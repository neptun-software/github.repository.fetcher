{
  "metadata": {
    "timestamp": 1736566191833,
    "page": 200,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "swig/swig",
      "stars": 5857,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.052734375,
          "content": ".gitattributes export-ignore\n.gitignore export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.48046875,
          "content": "# Compiled Source\n*.o\n*.class\n\n# Editor files and various other junk\n.*.sw?\n*.bak\n*.log\n.DS_Store\n\n# Local PCRE\npcre\n*.gz\n\n# C/C++ object files, based on:\n#   https://github.com/github/gitignore/blob/master/C.gitignore\n#   https://github.com/github/gitignore/blob/master/C%2B%2B.gitignore\n*.slo\n*.lo\n\n# C/C++ dynamic libraries, based on:\n#   https://github.com/github/gitignore/blob/master/C.gitignore\n#   https://github.com/github/gitignore/blob/master/C%2B%2B.gitignore\n*.dll\n*.so\n*.so.*\n*.dylib\n*.bundle\n\n# C/C++ static libraries, based on:\n#   https://github.com/github/gitignore/blob/master/C.gitignore\n#   https://github.com/github/gitignore/blob/master/C%2B%2B.gitignore\n*.lib\n*.lai\n*.la\n*.a\n\n# C/C++ executables, based on:\n#   https://github.com/github/gitignore/blob/master/C.gitignore\n#   https://github.com/github/gitignore/blob/master/C%2B%2B.gitignore\n*.exe\n*.out\n*.app\n\n# Generated by autogen.sh\nCCache/autom4te.cache/\nCCache/config.h.in\nCCache/configure\nCCache/configure~\nSource/Include/swigconfig.h.in\nSource/Include/swigconfig.h.in~\nSource/Makefile.in\nTools/config/compile\nTools/config/config.guess\nTools/config/config.sub\nTools/config/depcomp\nTools/config/install-sh\nTools/config/missing\nTools/config/ylwrap\naclocal.m4\nautom4te.cache/\nconfigure\nconfigure~\n\n# Generated by ./configure\nCCache/Makefile\nCCache/ccache_swig_config.h\nCCache/config.h\nCCache/config.log\nCCache/config.status\nCCache/config_win32.h\nExamples/Makefile\nExamples/guile/Makefile\nExamples/test-suite/*/Makefile\nExamples/xml/Makefile\n/Makefile\nSource/Include/stamp-h1\nSource/Include/swigconfig.h\nSource/Makefile\nTools/javascript/Makefile\n.deps\nconfig.log\nconfig.status\npreinst-swig\n\n# Build Artifacts\n.dirstamp\nCCache/ccache-swig\nCCache/ccache-swig.1\nCCache/web/ccache-swig-man.html\nLib/swigwarn.swg\nSource/CParse/parser.c\nSource/CParse/parser.h\nSource/eswig\nSource/TAGS\nswig\nTools/javascript/javascript\n\n# Generated documentation\nDoc/Manual/SWIGDocumentation.html\nDoc/Manual/SWIGDocumentation.pdf\nDoc/Manual/*.book\n\n# SWIG common generated files\n*_wrap.c\n*_wrap.cpp\n*_wrap.cxx\n*_wrap.h\n*-gypcopy.cxx\n\n# Scratch directories\nExamples/scratch\n\n# Out of source tree build directories\n*build*/\n\n# errors test-suite\nExamples/test-suite/errors/*.newerr\nExamples/test-suite/errors/*.py\n\n########## Language specific files ##########\n\n# C#\nExamples/test-suite/csharp/*/\n*runme.exe.mdb\nExamples/csharp/*/*.cs\n!Examples/csharp/*/runme.cs\n\n# D\nExamples/test-suite/d/*/\nExamples/d/**/example.d\nExamples/d/**/example_im.d\nExamples/d/**/runme\n\n# Go\n*.[5689]\n*_gc.c\nExamples/test-suite/go/*.go\n!Examples/test-suite/go/*runme.go\nExamples/test-suite/go/*runme\nExamples/test-suite/go/gopath\nExamples/test-suite/go/testdir\nExamples/go/*/gopath\nExamples/go/*/example.go\nExamples/go/*/runme\n\n# Guile\nExamples/guile/*/my-guile\n\n# Java\nExamples/test-suite/java/*/\nExamples/test-suite/java/expected.txt\nExamples/test-suite/java/got.txt\nExamples/java/*/*.java\n!Examples/java/*/runme.java\nExamples/java/doxygen/javadocs\n\n# Javascript\nExamples/test-suite/javascript/*/\n*.gyp\n\n# Lua\nExamples/lua/dual/dual\nExamples/lua/dual/swigluarun.h\nExamples/lua/embed/embed\nExamples/lua/embed2/embed2\nExamples/lua/embed3/embed3\nExamples/lua/embed3/swigluarun.h\n\n# OCaml\nExamples/test-suite/ocaml/*.ml*\nExamples/test-suite/ocaml/*.cm*\nExamples/test-suite/ocaml/*_runme\n!Examples/test-suite/ocaml/*runme.ml\nExamples/ocaml/**/example.ml*\nExamples/ocaml/**/runme\nExamples/ocaml/**/runme_top\nExamples/ocaml/**/*.cm*\nExamples/ocaml/**/swig.ml*\nExamples/ocaml/**/swigp4.ml\n\n# Octave\nswigexample*.oct\nExamples/test-suite/octave/*.oct\nExamples/test-suite/octave/octheaders.hpp\nExamples/test-suite/octave/octheaders.hpp.gch\n\n# Perl5\nExamples/test-suite/perl5/*.pm\nExamples/perl5/*/*.pm\n\n# PHP\nExamples/test-suite/php/php_*.h\nExamples/php/*/php_*.h\nExamples/php/pragmas/example.php\n\n# Python\n#   Based on https://github.com/github/gitignore/blob/master/Python.gitignore\n*.py[cod]\n*_abi3_report.json\n*/__pycache__/\n/__pycache__/\nExamples/test-suite/python/*.py\n!Examples/test-suite/python/*runme.py\nExamples/python/**/bar.py\nExamples/python/**/base.py\nExamples/python/**/example.py\nExamples/python/**/foo.py\nExamples/python/**/robin.py\nExamples/python/**/runme3.py\nExamples/python/**/spam.py\nExamples/python/import_packages/module_is_init/pkg1/__init__.py\nExamples/python/import_packages/namespace_pkg/path4.zip\nExamples/python/doxygen/example.html\n\n# R\nExamples/test-suite/r/*.R\nExamples/test-suite/r/*.Rout\n!Examples/test-suite/r/*runme.R\nExamples/r/*/example.R\nExamples/r/*/*.Rout\nExamples/r/*/.RData\n\n# Scilab\nExamples/test-suite/scilab/*/\nloader.sce\n\n"
        },
        {
          "name": "ANNOUNCE",
          "type": "blob",
          "size": 1.212890625,
          "content": "*** ANNOUNCE: SWIG 4.4.0 (in progress) ***\n\nhttps://www.swig.org\n\nWe're pleased to announce SWIG-4.4.0, the latest SWIG release.\n\nWhat is SWIG?\n=============\n\nSWIG is a software development tool that reads C/C++ header files and\ngenerates the wrapper code needed to make C and C++ code accessible\nfrom other programming languages including Perl, Python, Tcl, Ruby,\nPHP, C#, Go, Java, Javascript, Lua, Scheme (Guile, MzScheme), D,\nOcaml, Octave, R, Scilab.  SWIG can also export its parse tree in\nthe form of XML.  Major applications of SWIG include generation of\nscripting language extension modules, rapid prototyping, testing,\nand user interface development for large C/C++ systems.\n\nRelease Notes\n=============\nDetailed release notes are available with the release and are also\npublished on the SWIG web site at https://swig.org/release.html.\n\nAvailability\n============\nThe release is available for download on Sourceforge at\n\n     https://prdownloads.sourceforge.net/swig/swig-4.4.0.tar.gz\n\nA Windows version is also available at\n\n     https://prdownloads.sourceforge.net/swig/swigwin-4.4.0.zip\n\nPlease report problems with this release to the swig-devel mailing list,\ndetails at https://www.swig.org/mail.html.\n\n--- The SWIG Developers\n\n"
        },
        {
          "name": "CCache",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGES",
          "type": "blob",
          "size": 1171.92578125,
          "content": "SWIG (Simplified Wrapper and Interface Generator)\n\nSee the CHANGES.current file for changes in the current version.\nSee the RELEASENOTES file for a summary of changes in each release.\nIssue # numbers mentioned below can be found on Github. For more details, add\nthe issue number to the end of the URL: https://github.com/swig/swig/issues/\n\nVersion 4.3.0 (20 Oct 2024)\n===========================\n\n2024-10-20: wsfulton\n            #3051 Fix seg fault passing invalid unicode values when expecting a\n            std::string type - fix for python-3.13.\n\n2024-10-19: olly\n\t    [Ruby] Documentation comments now use `true` and `false` for bool\n\t    parameter default values, instead of `True` and `False` (which are\n\t    the Python names and wrong for Ruby!)\n\n2024-10-16: wsfulton\n            #874 Add nested classes to the parse tree dumped out by -xml.\n\n2024-10-16: wsfulton\n            #2213 Documentation for the XML output options of SWIG's parse tree has\n            been added to the Extending chapter.\n\n2024-10-09: wsfulton\n            Remove -xmllang option used with -xml, which had no effect on the output.\n\n2024-10-06: wsfulton\n            [PHP] #2907 Fix returning NULL from functions with output\n            parameters.\n\n            Ensures OUTPUT and INOUT typemaps are handled consistently wrt\n            return type.\n\n            Added:\n              void SWIG_Php_AppendOutput(zval *target, zval *o, int is_void);\n\n            The t_output_helper function is deprecated. Replace t_output_helper\n            in typemaps with SWIG_AppendOutput which calls SWIG_Php_AppendOutput\n            appropriately setting the is_void parameter using the $isvoid special\n            variable. If t_output_helper is currently being used and a completely\n            backwards compatible (but technically incorrect) solution is required,\n            then use SWIG_Php_AppendOutput and pass 1 instead of $isvoid for the\n            is_void parameter.\n\n            The t_output_helper fragment is also deprecated and is no longer\n            needed as the SWIG_Php_AppendOutput function is now always\n            generated.\n\n2024-10-05: wsfulton\n            [Ruby] Removed backwards compatible output_helper fragment and\n            macro.\n\n            Use SWIG_AppendOutput instead of output_helper (does not require\n            the output_helper fragment).\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2024-10-05: wsfulton\n            [Ruby] #2907 Fix returning NULL from functions with output\n            parameters.\n\n            Ensures OUTPUT and INOUT typemaps are handled consistently wrt\n            return type.\n\n            New declaration of SWIG_Ruby_AppendOutput is now:\n\n              SWIG_Ruby_AppendOutput(VALUE target, VALUE o, int is_void);\n\n            The 3rd parameter is new and the new $isvoid special variable\n            should be passed to it, indicating whether or not the wrapped\n            function returns void. If SWIG_Python_AppendOutput is currently being\n            used and a completely backwards compatible (but technically incorrect)\n            solution is required, then pass 1 for the is_void parameter.\n\n            Also consider replacing with:\n\n              SWIG_AppendOutput(VALUE target, VALUE o);\n\n            which calls SWIG_Ruby_AppendOutput with same parameters but adding\n            $isvoid for final parameter.\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2024-09-29: clintonstimpson\n            [Python] #2350 Switch implementation from static types to heap\n            types using PyType_FromSpec() introduced in Python 3.\n\n            This currently only applies to the default code generation and is\n            not available for the -builtin code generation.\n\n2024-09-29: wsfulton\n            [Python] Single line docstring comments are stripped of leading and\n            trailing whitespace.\n\n2024-09-29: olly\n\t    SWIG can now handle arbitrary expressions as a subscript (i.e. in\n\t    `[`...`]`).  We don't actually need to parse expressions in this\n\t    context so we can just skip to the matching closing square bracket.\n\n2024-09-29: olly\n\t    C++11 auto variables for which SWIG can't parse the initialiser\n\t    now give a warning and are ignored rather than SWIG exiting with a\n\t    parse error.\n\n2024-09-26: olly\n\t    SWIG now recognises --version as an alias for -version (it has\n\t    supported --help as an alias for -help since 2006).\n\n2024-09-25: wsfulton\n            [MzScheme/Racket] #920 #2830 MzScheme/Racket Deprecation notice.\n\n            This language module no longer works with modern Racket versions\n            (Racket 8 and later) due to the introduction of a different C API.\n            We are thus putting out a plea for a Racket maintainer to step\n            forward and rewrite the MzScheme module for Racket 8, otherwise it\n            will be removed in swig-4.4.\n\n2024-09-25: olly\n\t    SWIG can now handle arbitrary expressions in the parameter list of\n\t    a method call.  We don't actually need to parse expressions in this\n\t    context so we can just skip to the matching closing parenthesis.\n\n2024-09-25: olly\n\t    Add support for C99 _Bool.  SWIG now treats _Bool as an alias for\n\t    the bool keyword when in C mode.\n\n2024-09-23: olly\n\t    #3031 Improve support for C++11 trailing return types.  SWIG now\n\t    supports const references, const and non-const rvalue references,\n\t    and enum types with an explicit `enum`, `enum class` or `enum\n\t    struct`.\n\n2024-09-22: wsfulton\n            #3023 The binary executables in the Windows distribution are now\n            64-bit now instead of 32-bit. Any 32-bit Windows OS users will need\n            to build their own version using instructions in Windows.html or\n            the \"Getting Started Guide\" for Windows on the Wiki at\n            https://github.com/swig/swig/wiki/Getting-Started#windows.\n\n2024-09-21: wsfulton\n            #2879 Don't show warning SWIGWARN_LANG_SMARTPTR_MISSING (520) if\n            class is ignored.\n\n2024-09-21: olly\n\t    SWIG was ignoring `final` if specified after `noexcept`.\n\n2024-09-20: olly\n\t    [Javascript] Fix problems with v8 support.  The tests and examples\n\t    now work, and configure can now successfully probe for v8 without\n\t    assistance on Debian and Ubuntu.\n\n2024-09-19: wsfulton\n            #2866 Fix incorrect variable setters being generated when wrapping\n            reference member variables. A setter is no longer generated if the\n            type of the reference member variable is non-assignable.\n\n2024-09-18: olly\n\t    Fix parse error for a misplaced Doxygen comment which is the only\n\t    thing in a class/struct.\n\n2024-09-18: olly\n\t    Fix parse error for %include/#include in a class/struct followed\n\t    by a member declaration.\n\n2024-09-16: olly\n\t    #2995 SWIG now has generic handling for converting integer and\n\t    boolean literal values for use in target language code, replacing\n\t    code to do with in many of the target language backends.  This is\n\t    mainly an internal clean-up but it does fix a bug in the code it\n\t    replaces when wrapping code such as this:\n\n\t      typedef enum { T = (bool)1 } b;\n\n\t    With suitable enum wrapping settings, SWIG could incorrect wrap T\n\t    with value 0 in C#, D and Java.\n\n\t    Such cases now work correctly for D, but for C# and Java SWIG now\n\t    generates invalid C#/Java code because the C++ enum initialiser\n\t    expression isn't valid for initialising a C#/Java enum - this is\n\t    really an improvement over generating code which compiled but used\n\t    the wrong value!\n\n\t    If you are affected by this, use %csconstvalue/%javaconstvalue to\n\t    specify the value of such enumerators as a suitable C#/Java\n\t    expression.\n\n2024-09-16: olly\n\t    #2560 Document complex.i in the manual.\n\n2024-09-15: FredBonThermo\n\t    [C#] #2835 Support -doxygen option for converting doxygen comments\n\t    to XML formatted C# comments.\n\n2024-09-14: wsfulton\n            #2987 C++ reference errors when passing in a 'NULL' change of\n            behaviour.  Most languages now use \"NullReferenceError\" in the\n            error message where they previously used \"ValueError\". Also\n            exception changes:\n\n            Guile:    \"swig-null-reference-error\" instead of \"swig-value-error\"\n            MzScheme: \"swig-null-reference-error\" instead of \"swig-value-error\"\n            PHP:      TypeError instead of ValueError\n            Python:   Consistently raises TypeError instead of a mix of\n                      ValueError and TypeError.\n            Ruby:     Consistently raises NullReferenceError instead of a mix\n                      of ArgumentError and NullReferenceErrorError.\n\n            The consistent raising of a TypeError instead of ValueError for\n            Python ensures that incorrectly passing 'None' into a C++ reference\n            argument will correctly convert the error into a NotImplemented\n            error for the rich comparisons implementations per PEP 207.\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2024-09-13: vadz\n\t    [C] #2086 Add support for C as a target language.  This support is\n\t    currently experimental.\n\n2024-09-12: olly\n\t    Remove remains of %nestedworkaround and the nestedworkaround\n\t    feature it uses, which were deprecated over 10 years ago in SWIG\n\t    3.0.0.  Since then uses of these have done nothing except emit a\n\t    warning.\n\n2024-09-11: wsfulton\n            [C# Java] #1188 Add the %interface_additional macro to the family\n            of %interface macros for adding additional interfaces for the\n            %generated interface to extend/derive from.\n\n2024-09-11: olly\n\t    #197 #675 #1677 #2047 Fix incorrect inclusion of \"enum \" when\n\t    qualifying C++11 \"enum class\" enumerator names.\n\n2024-09-11: olly\n\t    [Perl] #630 Fix wrapping of C++11 enum class when -const command\n\t    line option is specified.\n\n2024-09-07: wsfulton\n            #2875 Fix swig-4.1.0 regression using the %interface family of\n            macros for multiple inheritance and common bases.\n\n2024-09-06: olly\n\t    [Python] Stop documenting to define SWIG_FILE_WITH_INIT - this does\n\t    not actually do anything (and apparently never has!)\n\n2024-09-05: wsfulton\n            #2845 Fix duplicate friend wrappers for friend declarations in\n            nested classes.\n\n2024-09-03: olly\n\t    #3010 Improve handling of zero bytes in input files.  This is\n\t    certainly a corner case, but GCC and clang both accept zero bytes\n\t    at least in comments, and SWIG's current handling is to ignore\n\t    the zero byte and all following characters up to and including the\n\t    next newline, so for example if a // comment contains a zero byte\n\t    SWIG would quietly ignore the next line.\n\n2024-08-30: olly\n\t    #2996 Fix generic string literal handling to handle embedded zero\n\t    bytes.  This allows such strings to work for C# (with %csconst), D\n\t    (with %dmanifestconst), Go and Java (with %javaconst).  For other\n\t    target languages SWIG-generated wrappers still truncate such string\n\t    literals at a zero byte (which is probably the best we can do for\n\t    target languages where the native string can't contain zero bytes).\n\n2024-08-23: wsfulton\n            [Java] #2991 Document solutions for mismatch in C++ access\n            specifiers and Java access modifiers in an inheritance hierarchy.\n\n2024-08-19: wsfulton\n\t    [Python] #2993 Add missing std::filesystem namespace to\n\t    std_filesystem.i.\n\n2024-08-17: olly\n\t    #904 #1907 #2579 Fix string literal and character literal wrapping\n\t    bugs.\n\n2024-08-15: olly\n\t    Fix parsing of octal string escapes.  We now stop when the next\n\t    character is digit 8 or 9, and stop after 3 octal digits even if\n\t    the next character is an octal digit.\n\n2024-08-15: olly\n\t    SWIG now gives an error for digits 8 and 9 in octal constants -\n\t    previously these were quietly accepted resulting in a bogus value.\n\t    C++11 binary constants are now treated similarly - only digits 0\n\t    and 1 were allowed before, but trying to use other digits now gives\n\t    a clearer error.\n\n2024-08-12: olly\n\t    #657 Allow unmatched ' and \" in #error and #warning.\n\n2024-08-09: wsfulton\n\t    [Java] #409 Add the constantsmodifiers pragma so that the\n\t    visibility for the Java constants interface can be changed from\n\t    public to default.\n\n2024-08-02: vadz\n\t    [Python] #2966 Fix overloaded Doxygen comments. Sometimes the\n\t    Doxygen comments were not combined into one Pydoc comment.\n\n2024-08-01: olly\n\t    Fix wrapping of string constants containing bytes 0-8, 11, 12 or\n\t    14-31 followed by a digit '0' to '7'.  We were emitting these bytes\n\t    as a one or two character octal escape sequence which when\n\t    interpreted would include the following character.\n\n2024-07-27: olly\n\t    #2087 Fix parsing of `noexcept` on a function pointer type used\n\t    as the type of a function parameter.  We currently generate\n\t    invalid C++ code if we try to wrap the function parameter, but\n\t    at least the user can `%ignore` the parameter or the whole\n\t    function, whereas the parse error was hard to work around.\n\n2024-07-26: olly\n\t    Support parsing `noexcept(X)` in expressions, including deducing\n\t    its type (which is always `bool`).\n\n2024-07-21: wsfulton\n\t    [Python] Add missing slot for init in struct _specialization_cache\n            needed for python-3.13 builtin wrappers.\n\n2024-07-21: shadchin\n\t    [Python] #2968 Add missing tp_versions_used slot needed for\n\t    python-3.13.\n\n2024-07-19: olly\n\t    -Wallkw now includes keywords for Javascript.\n\n2024-07-19: vadz\n\t    [Javascript] #2940 Names of object properties can be keywords in\n\t    Javascript so don't auto-rename them to have a leading underscore.\n\n2024-07-18: olly\n\t    #1917 Stop removing `f` and `F` suffixes from float literals.\n\t    This was resulting in incorrect generated C# and Java code.  For\n\t    some cases such as `#define CONSTANT 1.0f` this was a regression\n\t    introduced in 4.2.0 when we started more correctly wrapping these\n\t    as `float` rather than `double`.\n\n2024-07-15: vadz\n            #2941 Suppress warning WARN_PARSE_USING_UNDEF for ignored using\n            declarations.\n\n2024-07-03: wsfulton\n            #2860 Enhance Windows.html documentation for the popular Visual C++\n            compiler recommending users to correctly set the __cplusplus macro\n            in order to benefit from modern standards based features that SWIG\n            provides.\n\n2024-07-02: erezgeva\n\t    [Python, Ruby] #2870 Change the thread safety options for the\n            director code that manages C++ director pointer ownership. Please\n            define SWIG_THREADS to turn on thread safety. For Python, this can\n            also be done via the threads module option or -threads.\n            Implementation now includes a C++11 std::mutex option as priority\n            over WIN32 and pthread mutexes. See director_guard.swg for further\n            implementation details.\n\n2024-06-28: vadz\n            #2935 Fix instantiation of specialized template where the primary\n            template is a forward class template declaration.\n\n2024-06-16: wsfulton\n            #2927 Don't ignore overloaded friend functions that are also\n            declared constexpr.\n\n2024-06-15: wsfulton\n            [Python] Removed deprecated pytuplehlp.swg file and t_output_helper.\n            Use SWIG_AppendOutput as a direct replacement for t_output_helper.\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2024-06-15: vadz\n            [Python] #2907 Fix returning null from functions with output\n            parameters.  Ensures OUTPUT and INOUT typemaps are handled\n            consistently wrt return type.\n\n            New declaration of SWIG_Python_AppendOutput is now:\n\n              SWIG_Python_AppendOutput(PyObject* result, PyObject* obj, int is_void);\n\n            The 3rd parameter is new and the new $isvoid special variable\n            should be passed to it, indicating whether or not the wrapped\n            function returns void. If SWIG_Python_AppendOutput is currently being\n            used and a completely backwards compatible (but technically incorrect)\n            solution is required, then pass 1 for the is_void parameter.\n\n            Also consider replacing with:\n\n              SWIG_AppendOutput(PyObject* result, PyObject* obj);\n\n            which calls SWIG_Python_AppendOutput with same parameters but adding $isvoid\n            for final parameter.\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2024-06-15: wsfulton\n            #2907 Add $isvoid special variable which expands to 1 if the\n            wrapped function has a void return, otherwise expands to 0.\n\n2024-06-14: jschueller\n\t    #2863 Support Python 3.13 (currently in prerelease).\n\n2024-06-13: erezgeva\n            #2609 Fix Java typemap (const char *STRING, size_t LENGTH) to\n            marshall as Java String instead of Java byte[]. If the old\n            behaviour is required, replace with typemap (const void *BYTES,\n            size_t LENGTH).\n\n            Add multi-argument typemaps to most languages:\n\n              (const char *STRING, size_t LENGTH)\n\n            All languages now use a target language string type for this\n            typemap.\n\n            New multi-argument typemaps have been added to most target\n            languages for use with C raw data (cdata):\n\n              (const void *BYTES, size_t LENGTH) to\n\n            Statically typed languages use a byte array for this typemap, while\n            scripting languages remain using a string.\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n            * Raw C data: Go uses byte array and int64 for size.\n            Users can use the (const char *STRING, size_t LENGTH) typemaps for\n            strings.\n\n2024-06-06: olly\n\t    Support alignof(T) for arbitrary type T, and deduce the type of\n\t    alignof(T) as size_t.\n\n2024-06-06: olly\n\t    #2919 Support parsing `sizeof(X)` for any expression or type X by\n\t    skipping balanced parentheses.  We don't need to actually parse X\n\t    since the type of sizeof is always size_t.\n\n2024-06-05: leakec\n            #2873 Fix -fvirtual and using declarations for inheriting base\n            class methods corner case.\n\n2024-05-31: wsfulton\n            [C#, D, Java, Javascript, Lua] Fix %nspace and %nspacemove for\n            nested classes and enums in a class. For example:\n\n              %nspace Space::OuterClass80;\n              namespace Space {\n                struct OuterClass80 {\n                  struct InnerClass80 {\n                    struct BottomClass80 {};\n                  };\n                  enum InnerEnum80 { ie80a, ie80b };\n                };\n              }\n\n            Previously the following were additionally required for some\n            languages:\n\n              %nspace Space::OuterClass80::InnerClass80;\n              %nspace Space::OuterClass80::InnerClass80::Bottom80;\n\n            Now the appropriate nspace setting is taken from the outer class.\n\n            A new warning has also been introduced to check and correct\n            conflicting nspace usage, for example if the following is\n            additionally added:\n\n              %nspacemove(AnotherSpace) Space::OuterClass80::InnerClass80;\n\n            The following warning appears as an inner class can't be moved\n            outside of the outer class:\n\n              Warning 406: Ignoring nspace setting (AnotherSpace) for 'Space::OuterClass80::InnerClass80',\n              Warning 406: as it conflicts with the nspace setting (Space) for outer class 'Space::OuterClass80'.\n\n2024-05-31: wsfulton\n            [C#, D, Java, Javascript, Lua] #2782 Enhance the nspace feature\n            with %nspacemove for moving a class or enum into a differently\n            named %target language equivalent of a namespace.\n\n2024-05-31: binaire10\n\t    [Ruby] #2906 Fix SWIG wrappers for std::map and std::vector to\n\t    work with Ruby's \"select\".\n\n2024-05-30: olly\n\t    #2914 Handle alternative operator names in C++ preprocessor\n\t    expressions.  Handle full set of alternative operator names in\n\t    C++ expressions (previously only \"and\", \"or\" and \"not\" were\n\t    understood).\n\n2024-05-15: olly\n\t    #2868 Support C++17 fold expressions.\n\n2024-05-15: olly\n\t    #2876 Report error if parser stack depth exceeded.  Previously SWIG\n\t    would quietly exit with status 0 in this situation.\n\n2024-04-12: pfusik\n            [Javascript] #2869 Fix JavaScript _wrap_getCPtr on 64-bit Windows\n\n2024-04-12: wsfulton\n            [Javascript, MzScheme, Python, Ruby] #202 Remove the vast majority\n            of the /*@SWIG:...*/ locator strings in the generated wrappers for\n            these 4 languages to help with reproducible builds.\n\n2024-04-08: thewtex\n            [Python] #2856 Include stdlib.h for more recent Python Stable ABI\n\n2024-03-28: olly\n\t    Fix preprocessor to handle C-style comment ending **/ in macro\n\t    argument.\n\n2024-03-27: wsfulton\n            [Python] #2844 Fix for using more than one std::string_view type in\n            a method.\n\n2024-03-27: wsfulton\n            [R] #2847 Add missing std::vector<long> and std::vector<long long>\n            typemaps which were missing depending on whether or not\n            SWIGWORDSIZE64 was defined.\n\n2024-03-25: wsfulton\n            [Python] #2826 Stricter stable ABI conformance.\n            1. Use Py_DecRef and Py_IncRef when Py_LIMITED_API is defined\n               instead of macro equivalents, such as Py_INCREF.\n            2. Don't use PyUnicode_GetLength from python-3.7 and later.\n            3. Use PyObject_Free instead of deprecated equivalents.\n\n2024-03-25: olly\n\t    #2848 Fix elision of comma before ##__VA_ARGS__ which we document\n\t    as supported but seems to have not worked since before 2009.\n\n2024-03-11: wsfulton\n            [C#] #2829 Improve handling and documentation of missing enum base\n            type information.\n\n2024-03-07: wsfulton\n            [Ocaml] Fix SWIGTYPE MOVE 'in' typemap to fix compilation error.\n\n2024-03-07: wsfulton\n            Add SWIGTYPE MOVE 'typecheck' typemaps to remove warning 472\n            (SWIGWARN_TYPEMAP_TYPECHECK_UNDEF).\n\n2024-03-06: wsfulton\n            Add support for std::unique_ptr & typemaps. Non-const inputs\n            implement move semantics from proxy class to C++ layer, otherwise\n            const inputs and all reference returns behave like any other lvalue\n            reference to a class.\n\n2024-03-06: wsfulton\n            [Javascript, MzScheme, Octave] Support NULL being passed into char*\n            typemaps.\n\n2024-03-06: christophe-calmejane,wsfulton\n            #2650 Add support for movable std::unique_ptr by adding in\n            std::unique_ptr && input typemaps. The std::unique && output\n            typemaps do not support move semantics by default and behave like\n            lvalue references.\n\n2024-03-06: wsfulton\n            Add missing use of move constructor instead of copy constructor\n            when passing movable types by value. This was previously\n            implemented only for parameters passed to a global function or\n            static member function and is now extended to parameters passed to\n            member methods as well as constructors.\n\n2024-03-01: olly\n\t    [Java] #2819 Suppress Java removal warnings for uses of\n\t    System.runFinalization().  SWIG will need to stop relying on\n\t    finalize methods, but we know that and meanwhile these warnings\n\t    make the testsuite output noisy.  Fix use of deprecated form\n\t    of Runtime.exec() in the doxygen example.\n\n2024-02-28: wsfulton\n            #1754 Fix compilation errors in generated code when instantiating a\n            templated static method within a template (non-static methods and\n            constructors were always okay). For example:\n\n              template <typename T> class X {\n                template <class InputIterator>\n                  static void fn(InputIterator first, InputIterator last) {\n                    ...\n                  }\n              };\n              class SimpleIterator { ... };\n\n              %extend X<int> {\n                %template(fn) fn<SimpleIterator>;\n              }\n\nVersion 4.2.1 (24 Feb 2024)\n===========================\n\n2024-02-23: wsfulton\n            #2814 Correctly ignore duplicate template instantiation (when the\n            duplicate contains typedef'd template parameters).\n\n2024-02-22: erezgeva\n            [Ruby, Octave, R] #2284 Fix segfault shrinking STL containers.\n\n2024-02-22: simark\n\t    Fix -Wundef warning about testing the value of __cplusplus when\n\t    compiling SWIG-generated C code.  Warning introduced by a change in\n\t    SWIG 4.2.0.\n\n2024-02-21: olly\n\t    #2808 [PHP] Fix memory leak when getting or setting a PHP\n\t    attribute which wraps a C++ member variable.  Bug introduced in\n\t    SWIG 4.1.0.\n\n2024-02-18: wsfulton\n            #2745 Fix for wrapping STL containers that are static member variables\n            or global variables (most scripting languages). Previously a copy of the\n            STL container was made into a target language container when reading the\n            variable. Changes, such as adjusting an element or adding/erasing\n            elements, were made to the copy of the container rather the actual\n            underlying C++ container. Also applies to const reference STL static\n            members.\n\n            If you really need the old behaviour, add in the typemap that used\n            to provide it. For example, for std::list< int > and\n            const std::list< int >&, use:\n\n              %typemap(varout,noblock=1,fragment=\"SWIG_\" \"Traits\" \"_\" {std::list< int >})\n                  std::list< int >, const std::list< int >&  {\n                $result = swig::from(static_cast< std::list< int > >($1));\n              }\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2024-02-15: olly\n\t    Improve type deduction for enum values in expressions.\n\n2024-02-15: rlaboiss\n\t    #2799 [Octave] Add support for Octave 9.0; fix warnings about use\n\t    of deprecated Octave APIs with Octave 7 and later.\n\n2024-02-14: olly\n\t    SWIG now warns and ignores if %constant is used with an implicit\n\t    type which SWIG can't deduce.\n\n2024-02-13: olly\n\t    Fix type deduction for certain cases involving C-style casts, or\n\t    which are syntactically like a C-style cast applied to an unary\n\t    operator, such as: (7)*6\n\n2024-02-13: olly\n\t    #2796 Fix handling of enum initialised by expression including a\n\t    cast to a typedef-ed type.  Regression introduced in 4.2.0.\n\n2024-02-09: wsfulton\n            #2794 Fix SwigType_isvariadic assertion to add support for variadic\n            templated functions in a template.\n\n2024-02-08: wsfulton\n            #2761 [Tcl] Fix assert in SWIG_Tcl_ConvertPtrFromString().\n\n2024-02-03: wsfulton\n            #1897 [C#, Java] Fix crash handling enums with same name in different\n            namespaces.\n\n2024-02-01: wsfulton\n            #2781 Correctly report line number warnings/errors for base classes that\n            are templates.\n\n2024-01-31: olly\n\t    Fix assertion failure and segfault trying to use %constant to\n\t    deduce the type of a \"float _Complex\" constant.\n\n2024-01-31: jim-easterbrook\n            #2771 [Python] builtin fixes to handle NULL values passed to slots using\n            functype: ssizeobjargproc and ternaryfunc.\n\n2024-01-31: olly\n\t    [Java] #2766 Fix segfault trying to wrap a constant whose type is unknown\n\t    to SWIG with \"%javaconst(1);\" enabled.\n\n2024-01-31: wsfulton\n            #2768 Fix seg fault handling upcasting when using %shared_ptr on some\n            templates.\n\n2024-01-31: olly\n\t    #2783 Fix incorrectly deduced type for function call.  Regression\n\t    introduced in 4.2.0.\n\n2024-01-27: wsfulton\n            [Python] Fix compilation error when wrapping two or more classes that\n            have the same friend operator overload when the classes are in a namespace.\n\n2024-01-15: wsfulton\n            https://sourceforge.net/p/swig/bugs/960/\n            https://sourceforge.net/p/swig/bugs/807/\n            Fix so that friend operators within a namespace can be correctly ignored\n            or renamed.\n\n2024-01-15: wsfulton\n            Wrap friend functions that are defined or declared within a namespace.\n            Previously unqualified friend definitions/declarations in a namespace were\n            ignored.\n\n            The visibility of unqualified friend functions in C++ is somewhat quirky\n            and the documentation has been enhanced to aid wrapping of friends.\n\n2024-01-12: wsfulton\n            #2749 Fix seg fault handling friend constructor/destructor declarations.\n\n2024-01-12: olly\n\t    [Ruby, Tcl] #2751 Fix -external-runtime output to define\n\t    SWIG_snprintf (bug introduced in 4.2.0).\n\n2024-01-12: olly\n\t    Improve preprocessor warning for use of an undefined function-like\n\t    macro. SWIG now warns:\n\n\t    Warning 202: Could not evaluate expression 'MY_VERSION_AT_LEAST(1,2,3)'\n\t    Warning 202: Use of undefined function-like macro\n\n\t    instead of:\n\n\t    Warning 202: Could not evaluate expression 'MY_VERSION_AT_LEAST(1,2,3)'\n\t    Warning 202: Syntax error: expected operator\n\n2024-01-11: PaulObermeier\n\t    [Tcl] Improve support for Tcl 9.0.  All examples and tests now pass\n\t    with Tcl 9.0.b1.\n\n2024-01-06: wsfulton\n            [Python] #2744 Regression fix - add in missing SwigPyIterator_T fragment for\n            SwigPyIteratorClosed_T when using %import on an instantiated std::map.\n\nVersion 4.2.0 (30 Dec 2023)\n===========================\n\n2023-12-24: degasus\n\t    [Python] #2494 Fix integer overflow / undefined behavior for python\n            castmode on sizeof(long)==8 platforms for implicit conversions around\n            edge cases of LONG_MAX and ULONG_MAX, for example:\n\n              void as_l(long x); // C interface\n\n            Usage from Python:\n\n              lmaxd = math.nextafter(float(2**63), 0.0) # LONG_MAX == 2**63-1\n              # Now below correctly raises a TypeError due to the overflow\n              as_l(math.nextafter(lmaxd, float('inf')))\n\n2023-12-21: olly\n\t    [PHP] `%feature(\"php:allowdynamicproperties\", 0) Foo;` is now handled as\n\t    the feature being off to match other boolean features.  Previously\n\t    any value set was treated as on.\n\n2023-12-20: treitmayr\n            [Ruby] #2033 Fix missing checks for negative numbers when passing numbers\n            to unsigned long/unsigned long long C types.\n\n2023-12-20: crhilton\n            [C#] #2722 Add support the \"cs:defaultargs\" feature.\n\n            This adds a way to wrap C++ functions that have default arguments\n            with an equivalent C# function with default arguments, instead of\n            generating an overloaded C# method for each defaulted argument.\n\n2023-12-20: vadz, vadimcn, wangito33, wsfulton, clintonstimpson\n            [Python] #1613 #1687 #1727 #2190 #2727 #2428 Add support for the Python stable\n            ABI using default Python options. Code is generated that compiles when\n            setting the C macro Py_LIMITED_API to 0x03040000 (at C/C++ compile time).\n            Note that the -builtin, -fast (used by -O) options are not supported.\n\n2023-12-20: wsfulton\n            [Python] More efficient input string marshalling for Python 3.\n\n            Previously a copy of a string was made while converting from a Python 3\n            string to a char * or std::string. This copy is no longer needed making\n            string marshalling more efficient. Does not apply to the stable ABI\n            targetting Python < 3.10 where a copy is still required where the stable\n            ABI does not provide PyUnicode_AsUTF8AndSize.\n\n2023-12-20: wsfulton\n            #2190 Replace SWIG_Python_str_AsChar with SWIG_PyUnicode_AsUTF8AndSize.\n\n            SWIG_Python_str_AsChar has undefined behaviour when Py_LIMITED_API is defined\n            as it returns a pointer to a string in a PyBytes object that no longer exists.\n\n            SWIG_PyUnicode_AsUTF8AndSize is an efficient replacement, but requires a\n            different API and the caller to decrement the refcount on the intermediate\n            PyObject in the Py_LIMITED_API < 0x030A0000 implementation. The alternative\n            would have required copying the returned char * string as was done in a\n            previous implementation requiring a call to the defunct SWIG_Python_str_DelForPy3\n            function.\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2023-12-14: PaulObermeier\n\t    [Tcl] #2730 Rename SWIG's Tcl_GetBoolFromObj() since Tcl 8.7 (TIP 618)\n\t    introduces a function with the same name.\n\n\t    [Tcl] #2729 Use Tcl_GetString() instead of Tcl_GetStringFromObj(..., NULL)\n\t    for compatibility with Tcl 9.\n\n2023-12-03: olly\n\t    [Ocaml] Remove -suffix command line option which has emitted a\n\t    deprecation warning since SWIG 3.0.4 - if you want to specify\n\t    a different filename extension for generated C++ files use -cppext\n\t    instead, which works for all SWIG target language backends.\n\n2023-12-01: saiarcot895\n            [Python] #2413 Prevent potential multi-threading crash; gracefully exit running\n            daemon threads on main thread exit.\n\n2023-11-24: wsfulton\n            Add support for parsing C++20 constexpr destructors.\n\n2023-11-19: olly\n\t    Fix handling of constant expressions containing < and > to not\n\t    drop parentheses around the subexpression as doing so can change\n\t    its value in some cases.\n\n2023-11-18: yasamoka, jmarrec\n            [Python] #2639 Add std_filesystem.i for wrapping std::filesystem::path\n            with pathlib.Path.\n\n2023-11-17: chrstphrchvz\n\t    [Tcl] #2711 Fix -Wmissing-braces warning in generated code.\n\n2023-11-17: chrstphrchvz\n\t    [Tcl] #2710 Stop using Tcl's CONST macro.  It's no longer needed\n\t    and is set to be deprecated in Tcl 8.7, and removed in Tcl 9.0.\n\n2023-11-08: wsfulton\n            [C#] Replace empty() method with IsEmpty property for std::vector, std::list, std::map\n            containers for consistency across all containers.\n\n            The empty() method is actually still wrapped, but as a private proxy method. For backwards\n            compatibility, the method can be made public again using %csmethodmodifiers for all\n            vectors as follows:\n\n              %extend std::vector {\n                %csmethodmodifiers empty() const \"public\"\n              }\n              %include \"std_vector.i\"\n\n            or alternatively for each individual %template instantiation as follows:\n\n              %csmethodmodifiers std::vector<double>::empty() const \"public\"\n              %template(VectorDouble) std::vector<double>;\n\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2023-11-08: wsfulton\n            [C#] Add std_unordered_set.i for wrapping std::std_unordered_set, implementing\n            C# System.Collections.Generic.ISet<>.\n\n2023-11-09: olly\n\t    #2591 SWIG now supports command line options -std=cXX and\n\t    -std=c++XX to specify the C/C++ standards version.  The only effect\n\t    of these options is to set appropriate values for __STDC_VERSION__\n\t    and __cplusplus respectively, which is useful if you're wrapping\n\t    headers which have preprocessor checks based on their values.\n\n2023-11-09: olly\n\t    SWIG now defines __STDC__ to 1 to match the behaviour of ISO C/C++\n\t    compilers - previously it had an empty value.\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2023-11-09: olly\n\t    When -c++ is used, SWIG now defines __cplusplus to be 199711L (the\n\t    value for C++98) by default - previously its value was set to\n\t    __cplusplus.\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2023-11-08: emmenlau\n            #2480 [C#] Add std_unordered_map.i for wrapping std::std_unordered_map, implementing\n            C# System.Collections.Generic.IDictionary<>.\n\n2023-11-06: wsfulton\n            [D, Java] Add the dbegin option to the %module directive for generating code at\n            the beginning of every D file. Similarly javabegin for Java. This enables one\n            to add a common comment at the start of each D/Java file.\n\n2023-11-06: wsfulton\n            [C#] #2681 Support nullable reference types. A generic C# option to the\n            %module directive allows one to add in any code at the beginning of every\n            C# file. This can add the #nullable enable preprocessor directive at the beginning\n            of every C# file in order to enable nullable reference types as follows:\n\n              %module(csbegin=\"#nullable enable\\n\") mymodule\n\n2023-10-21: wsfulton\n            [Python] #1783 Don't swallow all exceptions into a NotImplemented return\n            when wrapping operators which are marked with %pythonmaybecall. Corrects the\n            implementation of PEP 207.\n\n2023-10-18: wsfulton\n            [C#, D] #902 Use the C++11 enum base, that is, the underlying enum\n            type.\n\n            For C#, it is used as the underlying type in the generated C# enum.\n            For D, it is used as the enum base type in the generated D enum.\n\n2023-10-16: wsfulton\n            #2687 Another using declarations fix for inheritance hierarchies more than\n            two deep and the using declarations are overloaded. Using declarations\n            from a base class' base were not available for use in the target\n            language when the using declaration was before a method declaration.\n\n2023-10-11: wsfulton\n            [C#, D, Go, Guile, Java, Javascript, Lua, Ocaml, R, Racket] #1680\n            carrays.i library modified to use size_t instead of int for the functions\n            provided by %array_functions and %array_class.\n\n            If the old types are required for backwards compatibility, use %apply to\n            restore the old types as follows:\n\n              %include \"carrays.i\"\n              %apply int { size_t nelements, size_t index }\n              ... %array_functions and %array_class ...\n              %clear size_t nelements, size_t index; # To be safe in case used elsewhere\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2023-10-11: olly\n\t    [PHP] #2685 Fix testcase director_finalizer to work with PHP 8.3.\n\n2023-10-06: wsfulton\n            #2307 std::vector::capacity and std::vector::reserve signature changes.\n\n            Java api changes from:\n              public long capacity() { ... }\n              public void reserve(long n) { ... }\n            to:\n              public int capacity() { ... }\n              public void reserve(int n) { ... }\n            to fit in with the usual Java convention of using int for container\n            indexing and sizing.\n\n            The original api for std::vector::reserve can be also be made available via\n            %extend to add in an overloaded method as follows:\n\n              %include <std_vector.i>\n              %extend std::vector {\n                void reserve(jlong n) throw (std::length_error, std::out_of_range) {\n                  if (n < 0)\n                    throw std::out_of_range(\"vector reserve size must be positive\");\n                  self->reserve(n);\n                }\n              }\n\n            This change is partially driven by the need to seamlessly support the full\n            64-bit range for size_t generically, apart from the customisations for the\n            STL containers, by using:\n\n              %apply unsigned long long { size_t };\n              %apply const unsigned long long & { const size_t & };\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2023-10-05: wsfulton\n            [C#] #2379 Defining SWIGWORDSIZE64 now applies the (unsigned)\n            long long typemaps to (unsigned) long for a better match on systems\n            where long is 64-bits. A new \"Type mapping\" section has been added into\n            the CSharp.html documentation covering this and marshalling of primitive\n            types. C (unsigned) long handling remains as is by default, that is,\n            marshall as 32-bit.\n\n            The INPUT[], OUTPUT[], INOUT[], FIXED[] typemaps for long and unsigned long\n            in arrays_csharp.i can now be used and compiled on 64-bit platforms where\n            sizeof(long) != sizeof(int). Requires SWIGWORDSIZE64 to be defined.\n\n2023-09-27: wsfulton\n            [Java] #646 #649 Defining SWIGWORDSIZE64 now applies the (unsigned)\n            long long typemaps to (unsigned) long for a better match on systems\n            where long is 64-bits.\n\n2023-09-18: christophe-calmejane\n            #2631 C++17 std::map fix for values that are not default constructible.\n            Enhancements for all target languages except Python and Ruby.\n\n2023-09-14: mmomtchev\n            #2675 #2676 Temporary variable zero initialisation in the wrappers for\n            consistency with handling pointers.\n\n2023-09-11: emmenlau\n            #2394 Add support to preprocessor for true and false. Note that this\n            is for C++ not C.\n\n2023-09-11: wsfulton\n            [R] #2605 Complete transition to rtypecheck typemaps from hard coded\n            logic. Also see entry dated 2022-10-28 for swig-4.1.1. The rtypecheck\n            typemaps implement typechecking in R for each function parameter using\n            functions such as is.numeric, is.character, is.logical, is.null etc.\n\n2023-09-09: wsfulton\n            https://sourceforge.net/p/swig/bugs/919/\n\n            Fix incorrect variable setters being generated when wrapping arrays.\n            A setter is no longer generated if the type of the array members\n            are non-assignable.\n\n2023-09-09: wsfulton\n            Non-assignable detection fixes when wrapping const member variables.\n            Const member variables such as the following are non-assignable by\n            by default:\n\n              char * const x;\n              const int x;\n              const int x[1];\n\n            but not:\n\n              const char * x;\n\n            Variable setters are not generated when wrapping these non-assignable\n            variables and classes containing such non-assignable variables.\n\n2023-09-07: wsfulton\n            Non-assignable detection fixes when wrapping rvalue reference variables.\n            Rvalue reference variables such as the following are non-assignable by\n            by default:\n\n              X &&v;\n\n            Variable setters are not generated when wrapping these non-assignable\n            variables and classes containing such non-assignable variables.\n\n2023-09-06: wsfulton\n            Non-assignable detection fixes when wrapping reference variables.\n            Reference variables such as the following are non-assignable by\n            by default:\n\n              int &v;\n\n            Variable setters are not generated when wrapping these non-assignable\n            variables and classes containing such non-assignable variables.\n\n2023-09-06: wsfulton\n            Assignment operator detection fixes when wrapping static member\n            variables.\n\n2023-09-06: wsfulton\n            #1416 Implicit assignment operator detection fixes.\n\n            A class that does not have an explicit assignment operator does not\n            have an implicit assignment operator if a member variable is not\n            assignable. Similarly should one of the base classes also not be\n            assignable. Detection of these scenarios has been fixed so that when\n            wrapping a variable that is not assignable, a variable setter is not\n            generated in order to avoid a compiler error.\n\n            Template instantiation via %template is required in order for this to\n            work for templates that are not assignable.\n\n2023-09-03: wsfulton\n            https://sourceforge.net/p/swig/bugs/1006/\n            Fix incorrect variable setters being generated when the type of the\n            variable is not assignable, due to variable type inheriting a private\n            assignment operator further up the inheritance chain (further up than\n            the immediate base).\n\n2023-09-03: wsfulton\n            [Guile, Ocaml, Perl] Don't attempt to generate a setter when wrapping\n            variables which have a private assignment operator as assignment is not\n            possible. This now matches the behaviour of all the other target languages.\n\n2023-09-02: wsfulton\n            Fix problems wrapping deleted destructors. Derived classes are not\n            constructible, so don't attempt to generate default constructor or\n            copy constructor wrappers.\n\n              struct StackOnly1 {\n                // Only constructible on the stack\n                ~StackOnly1() = delete;\n              };\n              struct StackOnlyDerived1 : StackOnly1 {\n                // this class is not constructible due to deleted base destructor\n              };\n\n2023-09-02: wsfulton\n            Fix %copyctor feature when used on classes with deleted copy constructors.\n            A default constructor wrapper was sometimes incorrectly generated.\n\n2023-09-02: wsfulton\n            #1644 Fix wrapping types passed by value where the type has a deleted\n            default constructor.\n\n2023-08-16: shadchin\n            [Python] #2665 Fix missing-field-initializers warning to provide support\n            for python-3.12.\n\n2023-08-09: olly\n\t    [Ruby] Remove -feature command line option which has been\n\t    deprecated since SWIG 1.3.32 in 2007.  Use -initname instead.\n\n2023-08-06: wsfulton\n            Add support for using declarations to introduce templated member\n            methods and for inheriting templated constructors, such as:\n\n              struct Base {\n                // templated constructor\n                template <typename T> Base(const T &t, const char *s) {}\n                // templated member method\n                template <typename T> void template_method(const T &t, const char *s) {}\n              };\n\n              %template(Base) Base::Base<int>;\n              %template(template_method) Base::template_method<double>;\n\n              struct Derived : Base {\n                using Base::Base;\n                using Base::template_method;\n              };\n\n            Previously the templated methods and constructors were ignored and\n            not introduced into the Derived class.\n\n2023-08-04: wsfulton\n            Fix using declarations for inheritance hierarchies more than\n            two deep and the using declarations are overloaded. Using declarations\n            from a base class' base were not available for use in the target\n            language. For example in the code below, Using1::usingmethod(int i)\n            was not wrapped for use in Using3:\n\n              struct Using1 {\n              protected:\n                void usingmethod(int i) {}\n              };\n              struct Using2 : Using1 {\n              protected:\n                void usingmethod(int i, int j) {}\n                using Using1::usingmethod;\n              };\n              struct Using3 : Using2 {\n                void usingmethod(int i, int j, int k) {}\n                using Using2::usingmethod;\n              };\n\n            Similarly for C++11 using declarations for inheriting constructors.\n\n2023-08-02: wsfulton\n            https://sourceforge.net/p/swig/bugs/932/\n            Fix missing constructor generation due to abstract class test\n            failure when a method is declared in the class along with a\n            using declaration and the using declaration is declared before\n            the method that implemented the pure virtual method, such as:\n\n              struct ConcreteDerived : AbstractBase {\n                ConcreteDerived() {} // was not wrapped\n                using AbstractBase::f;\n                virtual void f(int n) override {}\n              };\n\n2023-08-02: olly\n\t    [PHP] Implement overloading between different integer types and\n\t    between double and float.\n\n2023-07-29: wsfulton\n            https://sourceforge.net/p/swig/bugs/678/\n            Fix %copyctor used on class hierarchies with non-const copy\n            constructors. Previously SWIG always attempted to call a copy\n            constructor taking a const reference parameter instead of a\n            non-const reference parameter.\n\n2023-07-28: wsfulton\n            #2541 Fix overloading of templated constructors and %copyctor.\n\n2023-07-21: wsfulton\n            Don't generate a default constructor wrapper when a class has a\n            templated constructor, as there isn't actually an implied default\n            constructor. For example:\n\n              struct TConstructor3 {\n                template<typename T> TConstructor3(T val) {}\n              };\n\n            Previously wrappers were generated for a non-existent default\n            constructor which failed to compile.\n\n2023-07-15: wsfulton\n            C++11 using declarations for inheriting constructors has now been\n            extended to support the directors feature.\n\n2023-07-13: wsfulton\n            C++11 using declarations for inheriting constructors support now\n            also includes inheriting implicitly defined default constructors\n            from the base class.\n\n2023-07-04: wsfulton\n            #2641 Add support for C++11 using declarations for inheriting\n            constructors.\n\n2023-06-30: wsfulton\n            #2640 Fix syntax error parsing an expression which calls a function\n            with no parameters within additional brackets.\n\n2023-06-27: mmomtchev\n            [Javascript] #2545 New Javascript generator targeting the Node.js\n            binary stable ABI Node-API.\n\n2023-06-27: olly\n\t    [Java] Completely remove pragmas which were deprecated in 2002 and\n\t    have triggered an error since SWIG 2.0:\n\n\t    moduleimport\t\tUse the moduleimports pragma\n\t    moduleinterface\t\tUse the moduleinterfaces pragma\n\t    modulemethodmodifiers\tUse %javamethodmodifiers\n\t    allshadowimport\t\tUse %typemap(javaimports)\n\t    allshadowcode\t\tUse %typemap(javacode)\n\t    allshadowbase\t\tUse %typemap(javabase)\n\t    allshadowinterface\t\tUse %typemap(javainterfaces)\n\t    allshadowclassmodifiers\tUse %typemap(javaclassmodifiers)\n\t    shadowcode\t\t\tUse %typemap(javacode)\n\t    shadowimport\t\tUse %typemap(javaimports)\n\t    shadowbase\t\t\tUse %typemap(javabase)\n\t    shadowinterface\t\tUse %typemap(javainterfaces)\n\t    shadowclassmodifiers\tUse %typemap(javaclassmodifiers)\n\n2023-06-24: wsfulton\n            #2616 https://sourceforge.net/p/swig/bugs/1102/ Fix directors and\n            allprotected mode and using declarations. Previously SWIG either\n            seg faulted or generated code that did not compile.\n\n2023-06-20: olly\n\t    #2486 Fix handling of template in array size, which was being\n\t    rejected by SWIG because the type string contains '<' not followed\n\t    by '('.  Drop this check as it should be unnecessary now since the\n\t    fixes that ensure that template parameters are enclosed within\n\t    '<(' and ')>'.\n\n2023-06-16: olly\n\t    [Java] Remove deprecated command line options which have done\n\t    nothing except emit a deprecation message since 2002 or before:\n\n\t    -jnic / -jnicpp\tJNI calling convention now automatic.\n\t    -nofinalize\t\tUse javafinalize typemap instead.\n\t    -proxy / -shadow\tNow on by default.\n\n2023-06-16: olly\n\t    [Guile] Drop support for -Linkage ltdlmod which was only useful\n\t    for Guile <= 1.4 which we no longer support.\n\n2023-06-15: olly\n\t    [Guile] The -gh and -scm command line options have been removed.\n\t    These have done nothing except emit a message since 2013 when\n\t    SWIG dropped support for generating bindings which used GH.\n\n2023-06-15: olly\n\t    Remove pointer.i from the SWIG library.  It's been a dummy file\n\t    which has done nothing except %echo a deprecation message since\n\t    2002.  The replacement is cpointer.i.\n\n2023-06-15: olly\n\t    SWIG will no longer fall back to using the include path to find the\n\t    input file, which has been deprecated and emitted a warning since\n\t    SWIG 1.3.37 (2009-01-13).  This makes the behaviour of SWIG the\n\t    same as C/C++ compilers and works with ccache.\n\n2023-06-15: olly\n\t    Remove features deprecated in SWIG 1.x and 2.x.  Most of these have\n\t    emitted a deprecation warning or error for well over a decade and\n\t    have replacements with fewer shortcomings so we expect users will\n\t    have migrated away from them long ago, but in case you need\n\t    them replacements are noted below:\n\n\t    %addmethods\t\tUse %extend instead.\n\t    %attribute_ref      Use %attributeref instead (NB: If called with\n\t\t\t\t4 parameters, the 3rd and 4th need switching).\n\t    %disabledoc\t\tUse Doxygen support instead.\n\t    %doconly\t\tUse Doxygen support instead.\n\t    %enabledoc\t\tUse Doxygen support instead.\n\t    %except\t\tUse %exception instead.\n\t    %extern\t\tUse %import instead.\n\t    %localstyle\t\tUse Doxygen support instead.\n\t    %name\t\tUse %rename instead.\n\t    %new\t\tUse %newobject instead.\n\t    %out\t\t%apply OUTPUT typemap rule instead.\n\t    %readonly\t\tUse %immutable instead.\n\t    %readwrite\t\tUse %mutable instead.\n\t    %section\t\tUse Doxygen support instead.\n\t    %style\t\tUse Doxygen support instead.\n\t    %subsection\t\tUse Doxygen support instead.\n\t    %subsubsection\tUse Doxygen support instead.\n\t    %text\t\tUse Doxygen support instead.\n\t    %title\t\tUse Doxygen support instead.\n\t    %typemap(except)\tUse %exception instead.\n\t    %typemap(ignore)\tUse %typemap(in,numinputs=0) instead.\n\t    %val\t\tUse typemaps instead.\n\t    -debug_template\tUse -debug-template instead.\n\t    -debug_typemap\tUse -debug-typemap instead.\n\t    -dump_classes\tUse -debug-classes instead.\n\t    -dump_memory\tUse -debug-memory instead.\n\t    -dump_module\tUse -debug-module 4 instead.\n\t    -dump_parse_module\tUse -debug-module 1 instead.\n\t    -dump_parse_top\tUse -debug-top 1 instead.\n\t    -dump_tags\t\tUse -debug-tags instead.\n\t    -dump_top\t\tUse -debug-top 4 instead.\n\t    -dump_tree\t\tUse -debug-top 4 instead.\n\t    -dump_typedef\tUse -debug-typedef instead.\n\t    -dump_xml\t\tUse -xmlout /dev/stdout instead.\n\t    -make_default\tOn by default since SWIG 1.3.7 (2001-09-03).\n\t    -makedefault\tOn by default since SWIG 1.3.7 (2001-09-03).\n\t    -no_default\t\tUse %nodefaultctor/%nodedefaultdtor instead.\n\t    -nodefault\t\tUse %nodefaultctor/%nodedefaultdtor instead.\n\t    -noextern option\tOn by default since SWIG 1.3.26 (2005-10-09).\n\t    -noruntime\t\tType sharing happens via target lang global.\n\t    -runtime\t\tType sharing happens via target lang global.\n\t    -show_templates\tUse -debug-template instead.\n\t    -tm_debug\t\tUse -debug-typemap instead.\n\t    -xml out.xml\tUse -xml -o out.xml instead.\n\t    BOTH typemap rule\tUse INOUT typemap rule instead.\n\t    SWIG_INTRUSIVE_PTR(PROXYCLASS, TYPE)\n\t\t\t\tUse %intrusive_ptr(TYPE) instead.\n\t    SWIG_INTRUSIVE_PTR_DERIVED(PROXYCLASS, BASECLASSTYPE, TYPE)\n\t\t\t\tUse %intrusive_ptr(TYPE) instead.\n\t    SWIG_INTRUSIVE_PTR_NO_WRAP(PROXYCLASS, TYPE)\n\t\t\t\tUse %intrusive_ptr_no_wrap(TYPE) instead.\n\t    SWIG_INTRUSIVE_PTR_DERIVED_NO_WRAP(PROXYCLASS, BASECLASSTYPE, TYPE)\n\t\t\t\tUse %intrusive_ptr_no_wrap(TYPE) instead.\n\t    SWIG_SHARED_PTR(PROXYCLASS, TYPE)\n\t\t\t\tUse %shared_ptr(TYPE) instead.\n\t    SWIG_SHARED_PTR_DERIVED(PROXYCLASS, BASECLASSTYPE, TYPE...)\n\t\t\t\tUse %shared_ptr(TYPE) instead.\n\t    SWIG_STD_VECTOR_SPECIALIZE(CSTYPE, CTYPE)\n\t\t\t\tUse SWIG_STD_VECTOR_ENHANCED(CTYPE) instead.\n\t    SWIG_STD_VECTOR_SPECIALIZE_MINIMUM(CSTYPE, CTYPE)\n\t\t\t\tNo longer required - remove uses.\n\t    specialize_std_map_on_both\n\t\t\t\tNo longer required - remove uses.\n\t    specialize_std_map_on_key\n\t\t\t\tNo longer required - remove uses.\n\t    specialize_std_map_on_value\n\t\t\t\tNo longer required - remove uses.\n\n2023-06-15: olly\n\t    [Guile] Fix freearg typemaps to go with char **INOUT and char\n\t    *INOUT in typemaps.  Previously the char **INOUT typemap would\n\t    leak memory if must_free$argnum was true, and the char *INOUT\n\t    typemap would generate code that didn't compile.\n\n2023-06-07: olly\n\t    #2630 Fix preprocessor handling of a slash immediately followed by\n\t    a single quote, which wasn't getting recognised as starting a\n\t    character literal.\n\n2023-06-07: olly\n\t    #2630 Fix parsing of <= and >= in templated lambda.\n\n\t    Skipping between matching delimiters is now done at the token level\n\t    rather than the character level.\n\n2023-06-02: mmomtchev\n\t    [Javascript] #2622 Fix support for %typemap(default) and improve\n\t    support for default arguments in general.\n\n2023-06-01: olly\n\t    [Perl] #2470 Fix some integer truncation warnings in generated\n\t    wrappers.\n\n2023-05-30: olly\n\t    [Lua] Fix bug when passing a Lua number to a C++ function expected\n\t    std::string.  Order of evaluation of C++ function arguments is not\n\t    defined, and if lua_rawlen() was called before lua_tostring() then\n\t    it would return 0 (because the value was still a number) and an\n\t    empty string would be passed.\n\n2023-05-30: mmomtchev\n\t    [Javascript] #2618 Fix handling of C++ pointer to member function.\n\n2023-05-25: olly\n\t    #1032 Allow typename disambiguator in:\n\n\t    using typename NodeT::links_type;\n\n2023-05-25: olly\n\t    SWIG now discriminates between long double, double and float\n\t    constants.  For example, this means that for target languages which\n\t    support a separate float type (such as C# and D) this will now\n\t    create a float constant instead of a double constant in the target\n\t    language:\n\n\t    #define PI_ISH 3.1414f\n\n2023-05-25: olly\n\t    C++11 `auto` variables and `decltype()` can now deduce the\n\t    type of some expressions which involve literals of built-in types.\n\n2023-05-25: olly\n\t    #1125 Support parsing C++11 auto variables.  This uses the\n\t    existing type deduction code from decltype so has the same\n\t    limitations, and such variables will only actually be wrapped\n\t    when SWIG can deduce the type.\n\n2023-05-23: olly\n\t    [Ruby] Fix deprecation warnings about ANYARGS when compiling\n\t    C++ code for SWIG-generated Ruby wrappers with Ruby 3.x.\n\n\t    This is a recurrence of a problem fixed in 4.0.2.  Our fix was\n\t    conditional on RB_METHOD_DEFINITION_DECL being defined, but Ruby\n\t    3.0 stopped defining this.\n\n2023-05-23: olly\n\t    #2606 Improve error output when SWIG reaches EOF while looking for\n\t    a closing delimiter.  This is reported with an error like:\n\n\t    Error: Missing '}'. Reached end of input.\n\n\t    We now exit after reporting this and so no longer report a second\n\t    more generic error like:\n\n\t    Error: Syntax error in input(1).\n\n2023-05-22: mmomtchev\n\t    [Javascript] #2600 Improve test coverage by adding _runme.js files\n\t    for 22 test cases.\n\n2023-05-20: erezgeva\n\t    [C#, D, Java, Javascript, Guile, Scilab] #2552 Implement argcargv.i\n            library multi-argument typemaps.\n\n2023-05-20: erezgeva\n\t    [D] #56 #2538 #2570 The generated code now works with recent D releases:\n            adds override keyword on overridden methods.\n\n            Support is now working using DMD, gcc D and LLVM D compilers.\n\n2023-05-20: olly\n\t    Support deducing the type for decltype(false) and\n\t    decltype(true).\n\n2023-05-19: olly\n\t    #2446 Add support for auto without trailing return type, which is a\n\t    C++14 feature.\n\n2023-05-19: olly\n\t    SWIG no longer defines preprocessor symbols corresponding to\n\t    command line options (e.g. `-module blah` was resulting in\n\t    `SWIGOPT_MODULE` being set to `blah`).  This feature was added in\n\t    2001 so that \"[m]odules can look for these symbols to alter their\n\t    code generation if needed\", but it's never been used for that\n\t    purpose in over 20 years, and has never been documented outside of\n\t    CHANGES.\n\n2023-05-18: olly\n\t    #2591 Add new -U command line option to undefine a preprocessor\n\t    symbol.\n\n2023-05-18: olly\n\t    #1589 #2335 Support parsing arbitrary expression in decltype.\n\n\t    Use parser error recovery to skip to the closing matching `)` and\n\t    issue a warning that we can't deduce the decltype for the\n\t    expression (like we already do for any expression which isn't a\n\t    simple variable or similar).\n\n2023-05-12: mmomtchev, erezgeva\n\t    [Javascript] #2561 Support check typemaps for Javascript.\n\n2023-05-12: olly\n\t    [Java] #2556 Suppress Java removal warnings on finalize method.\n\t    SWIG will need to stop relying on finalize methods, but we know\n\t    that and meanwhile these warnings make the testsuite output very\n\t    noisy.\n\n2023-05-11: olly\n\t    #302 #2079 #2474 Parse storage class more flexibly.\n\n\t    Previously we had a hard-coded list of allowed combinations in the\n\t    grammar, but this suffers from combinatorial explosion, and results\n\t    in a vague `Syntax error in input` error for invalid (and missing)\n\t    combinations.\n\n\t    This means we now support a number of cases which are valid C++ but\n\t    weren't supported, including `friend constexpr` and `virtual\n\t    explicit`.\n\n2023-05-08: olly\n\t    #1567 Add support for std::string_view (new in C++17) for C#, Java,\n\t    Lua, Perl, PHP, Python, Ruby and Tcl.\n\n2023-05-08: olly\n\t    [PHP] #2544 Wrap overloaded method with both static and non-static\n\t    forms.  We now wrap this as a non-static method in PHP, which means\n\t    the static form is only callable via an object.\n\n\t    Previously this case could end up wrapped as static or non-static\n\t    in PHP.  If it was wrapped as static, attempting to call non-static\n\t    overloaded forms would crash with a segmentation fault.\n\n2023-05-06: mmomtchev, wsfulton\n            #2550 Fix typedef/using declarations to a typedef struct/class.\n\n2023-05-04: erezgeva\n\t    [D] #2538 Drop support for D1/Tango, which was discontinued in\n\t    2012.  Wrappers for D2/Phobos are now generated by default, though\n\t    the -d2 command line option is still accepted (and now ignored) for\n\t    backward compatibility.\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2023-04-27: olly\n\t    #2502 Allow using snprintf() instead of sprintf() in wrappers.\n\n\t    We aim to produce code that works with C90 or C++98 so we can't\n\t    assume snprintf() is available, but it almost always is (even\n\t    on systems from before it was standardised) so having a way to\n\t    use it is helpful.\n\n\t    We enable this automatically if the compiler claims conformance\n\t    with at least C99 or C++11. It can also be enabled manually by\n\t    defining SWIG_HAVE_SNPRINTF.  Define SWIG_NO_SNPRINTF to disable\n\t    completely.\n\n\t    The fallback is to call sprintf() without a buffer size check,\n\t    which is what we've done until now.  Adding a check after the\n\t    call seems of limited benefit - if the buffer was overflowed\n\t    then it's too late to block it, and most of our uses either have a\n\t    fixed maximum possible size or dynamically allocate a buffer that's\n\t    large enough.\n\n2023-04-26: mmomtchev\n\t    [Javascript] Take into account numinputs when counting arguments.\n\n2023-04-24: olly\n\t    [PHP] Add throws typemaps for std:string* and const std::string*.\n\n2023-04-23: olly\n\t    [Javascript] #2453 The testsuite and examples now select which\n\t    Javascript engine to test based on what was detected by configure.\n\t    Previously they'd always test with node you specified a different\n\t    engine (e.g. with `ENGINE=jsc` on the make command line).  Now you\n\t    only need to specify ENGINE if you have more than one engine\n\t    installed.\n\n2023-04-23: olly\n\t    [Javascript] Turn on C++ output when wrapping for node, like\n\t    we already do when wrapping for V8-without-node.\n\n\t    The testsuite was masking this bug by using SWIG options\n\t    `-v8 -DBUILDING_NODE_EXTENSION=1` rather than `-node` when testing\n\t    with nodejs, while the javascript examples were masking this by\n\t    all getting processed with -c++.\n\n\t    This shouldn't be an incompatible change for users, as if you're\n\t    wrapping a C API you'd have to be working around the problem before\n\t    this change (like our testsuite and examples were), and this change\n\t    shouldn't break your workaround - it just makes it unnecessary.\n\n2023-04-21: mmomtchev\n\t    [Javascript] Fix naming of internal C++ helper for wrapping\n\t    variables for node to use the \"getter\" naming scheme rather\n\t    than the function wrapping one.  In practice this didn't actually\n\t    cause problems because Node wrappers are always compiled as C++\n\t    and the parameters are always different even if the names are\n\t    the same.\n\n2023-04-21: olly\n\t    [PHP] Support INPUT,INOUT,OUTPUT for std::string&.\n\n\t    By default SWIG/PHP wraps std::string& as a pass-by-reference PHP\n\t    string parameter, but sometimes such a parameter is only for input\n\t    or only for output, so add support for the named typemaps that other\n\t    target languages support.\n\n2023-04-21: degasus\n\t    #2519 Fix CanCastAsInteger range check to clear errno first to fix\n\t    bogus failures for valid inputs.if errno is set.\n\n2023-04-21: ZackerySpytz\n\t    [OCaml] #1439 Fix reference typemaps for std::string\n\n2023-04-21: olly\n\t    #2183 Fix #ifdef and #ifndef to work inside a %define.  Previously\n\t    they were silently ignored in this context (but #if defined already\n\t    worked here if you need a workaround which works for older\n\t    versions).\n\n2023-04-20: erezgeva\n\t    [Go] #2533 Implement argcargv.i library for Go.\n\n2023-04-19: davidcl\n            [Scilab] Add support for Scilab 2023.x.\n\t    Introduce a new `-gatewayxml6` option to generate XML with full\n\t    function names.\n\n2023-04-19: mmomtchev\n\t    https://sourceforge.net/p/swig/bugs/1163/ #1882 #2525\n\t    Fix preprocessor expansion when a macro expands to the name of\n\t    another macro which takes parameters from the input following the\n\t    original macro expansion.\n\n2023-04-19: wildmaples\n\t    [Ruby] #2527 Fix \"undefining the allocator of T_DATA\" warning seen\n\t    with Ruby 3.2.\n\n2023-04-18: davidcl\n\t    [Scilab] #894 extract values with \":\" for typemap (int* IN, int IN_SIZE)\n\n2023-04-14: olly\n\t    [PHP7] Support for PHP7 has been removed.  PHP7 security support\n\t    ended 2022-11-28 so it doesn't make sense to include support for\n\t    it in the SWIG 4.2.x release series.\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2023-04-05: wsfulton\n            [Python] #2515 Add support for all STL containers to be constructible from a Python set.\n\n            The previous implementation used the Python Sequence Protocol to convert from Python types\n            to STL containers. The new implementation uses the Python Iterator Protocol instead and\n            thereby can convert from a Python set too.\n\n2023-03-25: alatina\n            [Octave] #2512 Add support for Octave 8.1.\n\n2023-03-22: wsfulton\n            [C#] #2478 Minor enhancements to std::array wrappers in std_array.i.\n\n2023-03-13: wsfulton\n            Improved error checking when using %template to instantiate templates within\n            the correct scope.\n\n            1. When a template is instantiated via %template and uses the unary scope\n            operator ::, an error occurs if the instantiation is attempted within a\n            namespace that does not enclose the instantiated template.\n            For example, the following will now error as ::test::max is not enclosed within test1:\n\n            Error: '::test::max' resolves to 'test::max' and was incorrectly instantiated in\n            scope 'test1' instead of within scope 'test'.\n              namespace test1 {\n                %template(maxchar) ::test::max<char>;\n              }\n\n            2. SWIG previously failed to always detect a template did not exist when using\n            %template. In particular when instantiating a global template incorrectly within\n            namespace. The code below now correctly emits an error:\n\n            Error: Template 'test5::GlobalVector' undefined.\n              namespace test5 {\n              }\n              template<typename T> struct GlobalVector {};\n              %template(GVI) test5::GlobalVector<int>;\n\n2023-03-13: wsfulton\n            Error out if an attempt is made to define a class using the unary scope\n            operator ::. The following is not legal C++ and now results in an error:\n\n            Error: Using the unary scope operator :: in class definition '::Space2::B' is invalid.\n              namespace Space2 {\n                struct B;\n              }\n              struct ::Space2::B {};\n\n2023-03-08: wsfulton\n            Fix duplicate const in generated code when template instantiation type is const\n            and use of template parameter is also explicitly const, such as:\n\n              template <typename T> struct Conster {\n                void cccc1(T const& t) {}\n              };\n              %template(ConsterInt) Conster<const int>;\n\n            Above previously led to generated code:\n              (arg1)->cccc1((int const const &)*arg2);\n            instead of\n              (arg1)->cccc1((int const &)*arg2);\n\n2023-03-01: wsfulton\n            Partial template specialization fixes to support default arguments from the primary\n            template's parameter list.\n\n              template<class Y, class T=int> struct X { void primary() {} };\n              // Previously the specialization below resulted in:\n              // Error: Inconsistent argument count in template partial specialization. 1 2\n              template<class YY> struct X<YY*> { void special(YY*) {} };\n\n              // Both of these correctly wrap the partially specialized template\n              %template(StringPtr) X<const char *>;\n              %template(ShortPtr) X<short *, int>;\n\n2023-02-15: wsfulton\n            #1300 Further partial template specialization fixes.\n            Fixes when templates are used as a template parameter in a partially specialized\n            instantiation such as:\n\n              template<typename V> struct Vect {};\n              template<class T, typename TT> class Foo { ... };\n              template<class TS, typename TTS> class Foo<Vect<TS>, TTS> { ... };\n              %template(VectInt) Vect<int>;\n              %template(FooVectIntDouble) Foo<Vect<int>, double>; // was previously attempting to use primary template\n\n            Also fixes partial specialization where the same template parameter name is used twice,\n            for example:\n\n              template<typename X, typename Y> struct H { ... };\n              template<typename T> struct H<T, T> { ... };\n              %template(HInts) H<int, int>; // was previously attempting to use primary template\n\n2023-01-27: jschueller\n\t    #2492 [python] Fix unused parameter warnings for self parameter in\n\t    generated C/C++ wrapper code.\n\n2023-01-14: wsfulton\n            Fix deduction of partially specialized template parameters when the specialized\n            parameter is non-trivial, used in a wrapped method and the type to %template uses\n            typedefs. For example:\n\n              typedef double & DoubleRef;\n              template <typename T> struct XX {};\n              template <typename T> struct XX<T &> { void fn(T t) {} };\n              %template(XXD) XX<DoubleRef>;\n\n            The type of the parameter in the instantiated template for fn is now correctly deduced\n            as double.\n\n2023-01-03: wsfulton\n            #983 Fix seg fault when instantiating templates with parameters that are function\n            parameters containing templates, such as:\n\n              %template(MyC) C<int(std::vector<int>)>;\n\n2023-01-03: wsfulton\n            Complete support for C++11 variadic function templates. Support was previously limited\n            to just one template parameter. Now zero or more template parameters are supported\n            in the %template instantiation.\n\n2022-12-29: wsfulton\n            #1863 Syntax error fixes parsing more elaborate parameter pack arguments that are\n            used in function pointers, member function pointers:\n\n              template <typename... V> struct VariadicParms {\n                void ParmsFuncPtrPtr(int (*)(V*...)) {}\n                void ParmsFuncPtrPtrRef(int (*)(V*&...)) {}\n                void ParmsFuncPtrPtrRValueRef(int (*)(V*&&...)) {}\n                void ParmsFuncPtrRef(int (*)(V&...)) {}\n                void ParmsFuncPtrRValueRef(int (*)(V&&...)) {}\n\n                void ParmsMemFuncPtrPtr(int (KlassMemFuncs::*)(V*...)) {}\n                void ParmsMemFuncPtrPtrRef(int (KlassMemFuncs::*)(V*&...)) {}\n                void ParmsMemFuncPtrPtrRValueRef(int (KlassMemFuncs::*)(V*&&...)) {}\n                void ParmsMemFuncPtrRef(int (KlassMemFuncs::*)(V&...)) {}\n                void ParmsMemFuncPtrRValueRef(int (KlassMemFuncs::*)(V&&...)) {}\n              };\n\n              %template(VariadicParms0) VariadicParms<>;\n              %template(VariadicParms1) VariadicParms<A>;\n\n            Also in various other places such as within noexcept specifiers:\n\n              template<typename T, typename... Args>\n              void emplace(Args &&... args) noexcept(\n                  std::is_nothrow_constructible<T, Args &&...>::value);\n\n2022-12-27: wsfulton\n            Fix instantiation of variadic class templates containing parameter pack arguments that\n            are function pointers.\n\n              template <typename... V> struct VariadicParms {\n                void ParmsFuncPtrVal(int (*)(V...)) {}\n              };\n\n              %template(VariadicParms0) VariadicParms<>;\n              %template(VariadicParms1) VariadicParms<A>;\n\n2022-12-23: wsfulton\n            #1863 Fix syntax error parsing variadic templates containing parameter pack arguments that\n            are function pointers.\n\n2022-12-22: wsfulton\n            Complete support for C++11 variadic class templates. Support was previously limited\n            to just one template parameter. Now zero or more template parameters are supported.\n\n2022-12-06: wsfulton\n            #1636 Fix syntax error for misplaced Doxygen comment after struct/class member.\n            Fix syntax error using Doxygen member groups syntax, \"///*}\", when used after\n            final struct/class member.\n\n2022-12-05: wsfulton\n            #2023 Fix garbled Doxygen post comments in parameter lists.\n            Fix syntax error parsing a trailing Doxygen comment in parameter lists.\n\n2022-12-03: wsfulton\n            #1609 Fix syntax error parsing of Doxygen comments after last enum item.\n\n2022-12-03: wsfulton\n            #1715 Fix syntax error parsing of unconventionally placed Doxygen post\n            comments for enum items.\n\n2022-12-02: wsfulton\n            #624 #1021 Improved template template parameters support. Previously, specifying more\n            than one simple template template parameter resulted in a parse error. Now\n            multiple template template parameters are working including instantiation with\n            %template. Example:\n\n              template <template<template<class> class, class> class Op, template<class> class X, class Y>\n              class C { ... };\n\n2022-11-26: wsfulton\n            #1589 #1590 Slightly better decltype() support for expressions, such as:\n\n              int i;\n              ...  decltype(&i) ...\n\n            These result in a warning for non-trivial expressions which SWIG cannot evaluate:\n\n              Warning 344: Unable to deduce decltype for '&i'.\n\n            See 'Type Inference' in CPlusPlus.html for workarounds.\n\n2022-11-22: wsfulton\n\t    #366 #1037 Fix seg fault handling template parameter expressions\n\t    containing '<=' or '>='.\n\n2022-11-18: wsfulton\n            Duplicate class template instantiations via %template now issue a warning and are ignored.\n\n                %template(Aint) A<int>;\n                %template(Aint2) A<int>; // Now ignored and issues a warning\n\n            example.i:7: Warning 404: Duplicate template instantiation of 'A< int >' with name 'Aint2' ignored,\n            example.i:6: Warning 404: previous instantiation of 'A< int >' with name 'Aint'.\n\n            A single empty template instantiation before a named instantiation is the one exception\n            for allowing duplicate template instantiations as the empty template instantiation does not\n            create a wrapper for the template, it merely adds the instantiation into SWIG's internal\n            type system.\n            Duplicate empty template instantiations are quietly ignored.\n\n                %template() B<int>;\n                %template(Bint) B<int>; // OK\n\n                %template() C<int>;\n                %template() C<int>; // Quietly ignored now\n                %template(Cint) C<int>; // OK\n\n            Note that default template parameters are considered when looking for duplicates such as:\n\n                template <typename T, typename U = short> struct D {};\n                %template(Dint) D<int>;\n                %template(Dintshort) D<int, short>;\n\n            example.i:7: Warning 404: Duplicate template instantiation of 'D< int,short >' with name 'Dintshort' ignored,\n            example.i:6: Warning 404: previous instantiation of 'D< int >' with name 'Dint'.\n\n            Note that the following always was ignored, but that was because the chosen name was a\n            duplicate rather than the template being a duplicate:\n\n                %template(Eint) E<int>;\n                %template(Eint) E<int>; // Always has been ignored as a redefined identifier\n\n            The old warning was:\n\n            example.i:7: Warning 302: Identifier 'Eint' redefined (ignored) (Renamed from 'E< int >'),\n            example.i:6: Warning 302: previous definition of 'Eint' (Renamed from 'E< int >').\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\nVersion 4.1.1 (30 Nov 2022)\n===========================\n\n2022-11-29: bero\n            Fix mismatch between #pragma GCC diagnostic push and pop statements\n\n2022-11-26: wsfulton\n            #2449 Fix undefined behaviour in ccache-swig calculating md4 hashes and possibly\n            also handling errors when CCACHE_CPP2 is set.\n\n2022-11-25: wsfulton\n            #961 Fix syntax error parsing unnamed template parameters with a default value.\n\n2022-11-25: olly\n\t    #2447 Fix undefined behaviour in swig's parser when handling\n\t    default parameter expressions containing method calls.\n\n2022-11-13: olly\n\t    [PHP] #2419 Update the documentation to reflect that SWIG 4.1.0\n\t    dropped support for -noproxy when generating PHP wrappers.\n\n2022-11-05: wsfulton\n            #2417 Fix -swiglib for Windows when building with CMake.\n\n2022-11-02: wsfulton\n            #2418 Fix infinite loop handling non-type template parameters.\n\n            Fixes infinite loop due to () brackets in a non-type template\n            parameter containing an expression.\n\n2022-10-28: wsfulton\n            [R] R rtypecheck typemaps\n\n            Further switch to use rtypecheck typemaps instead of hard coded logic.\n            The full switch to typemaps is deferred until swig-4.2 as it can't be fully\n            backwards compatible. For now a warning is provided to help the\n            transition. It provides the full typemap that should be placed into\n            a user's interface file, for example:\n\n            %typemap(\"rtype\") int32_t * \"integer\"\n            void testmethod(int32_t * i);\n            void testmethod();\n\n            If there is no rtypecheck typemap for int32_t *, the warning shown is:\n\n              example.i:7: Warning 750: Optional rtypecheck code is deprecated. Add the\n              following typemap to fix as the next version of SWIG will not work without it:\n              %typemap(\"rtypecheck\") int32_t * %{ (is.integer($arg) || is.numeric($arg)) %}\n\n            The warning is shown for any code that previously used \"numeric\", \"integer\" or\n            \"character\" for the rtype typemap. Copying the rtypecheck typemap as\n            shown into the user interface file will provide the appropriate fix and\n            the warning will disappear. This is important to do as swig-4.2 will\n            not be able to provide this helpful warning.\n\n2022-10-27: wsfulton\n            [R] Allow NULL to be used in overloaded functions taking shared_ptr.\n            Also fixes special variable $argtype expansion in rtypecheck typemaps.\n\n2022-10-26: wsfulton\n            [R] Improve R wrapper error message when calling overloaded methods\n            when incorrect types passed are passed to the overloaded methods.\n\n            Old unhelpful error message:\n              Error in f(...) : could not find function \"f\"\n\n            Example of new improved error message:\n              Error in use_count(k) :\n                cannot find overloaded function for use_count with argtypes (NULL)\n\n2022-10-26: wsfulton\n            [R] #2386 Fix memory leak in R shared_ptr wrappers.\n            Fix leak when a cast up a class inheritance chain is required.\n\nVersion 4.1.0 (24 Oct 2022)\n===========================\n\n2022-10-24: wsfulton, AndLLA\n            [R] #2386 Fix problems in shared_ptr wrappers where the class names\n            were not consistent when using the shared_ptr template or the actual\n            underlying type.\n\n2022-10-24: wsfulton\n            [R] Add support for special variable replacement in the $typemap()\n            special variable macro for R specific typemaps (rtype, rtypecheck,\n            scoercein, scoereout).\n\n2022-10-24: wsfulton\n\t    [R] Polymorphism in the wrappers was only working for C++ classes,\n            now this works for C++ structs too.\n\n2022-10-19: olly\n\t    [Lua] #2126 Fix type resolution between multiple SWIG-wrapped\n\t    modules.\n\n2022-10-17: wsfulton\n            [R] #2385 Add support for std::vector<std::vector<std::string>>.\n\n2022-10-14: murillo128\n\t    [Javascript] #2109 Tweak unsigned long and unsigned long long typemaps\n            to create a v8::Number instead of v8::Integer if the value exceeds\n            the size of v8::Integer. Note that the v8::Number value will be\n            imprecise if the value is > MAX_SAFE_INTEGER.\n\n2022-10-14: olly\n\t    [R] Arrange that destructors of local C++ objects in the wrapper\n\t    function get run on SWIG_fail (which calls Rf_error() which calls\n\t    longjmp()).\n\n2022-10-14: olly\n\t    [Lua] Arrange that destructors of local C++ objects in the wrapper\n\t    function get run on SWIG_fail (which calls lua_error() which calls\n\t    longjmp()).\n\n2022-10-13: wsfulton\n            [R] Add missing SWIGTYPE *const& typemaps for supporting pointers\n            by const reference.\n\n2022-10-10: wsfulton\n            #2160 Fix compile error when using templates with more than one template\n            parameter and used as an input parameter in a virtual method in a\n            director class (problem affecting most of the scripting languages).\n\n2022-10-10: treitmayr, wsfulton\n            [Python, Ruby] #1811 #1823 Fix invalid code generated in some cases when\n            returning a pointer or reference to a director-enabled class instance.\n            This previously only worked in very simple cases, now return types are\n            resolved to fix. A bug in template instantiations using pointers also\n            works now.\n\n2022-10-06: wsfulton\n\t    [CFFI] #1966 #2200 Remove code for Common Lisp CFFI.  We dropped support\n\t    for it in SWIG 4.0.0 by disabling it as the first stage. This is the\n            final stage for complete removal as there has been no meaningful\n            progress to revive it to the status of experimental language.\n\n2022-10-06: olly\n\t    [Python] #2390 Remove deprecated and apparently useless defarg.swg\n\n\t    The only documentation is in the file itself and describes a Python\n\t    wrapper around the C function defined here, but digging though the\n\t    git history this Python wrapper doesn't seem to have ever actually\n\t    been generated by SWIG.\n\n\t    This file was also marked as deprecated in 2005.\n\n2022-10-06: wsfulton\n            [Java] #2048 Fix quoting for doxygen \\image command to quote the output\n            file name generated into the html src attribute.\n\n2022-10-05: benjamin-sch\n            [Python] added an interpreter counter to fix deinitialization\n            issues if multiple subinterpreters are used\n\n2022-10-05: olly, wsfulton\n            #672 Add support for parsing C++11 final classes such as:\n\n              class X final {};\n\n            This no longer gives a syntax error.\n\n2022-10-05: wsfulton\n            [OCaml] Fix %rename for enum items. Previously the rename had no effect.\n\n2022-10-05: olly\n\t    #1465 Report errors in preprocessor expressions by default\n\n\t    Until now SWIG quietly ignored such errors unless -Wextra (or -Wall\n\t    which implies -Wextra) was passed, but this is unhelpful as it tends\n\t    to hide genuine problems.  To illustrate this point, enabling this\n\t    warning by default revealed a typo in the preproc_defined.i\n\t    testcase in SWIG's own testsuite.\n\n\t    If you really don't want to see this warning, you can suppress it\n\t    with command line option -w202 or by using this in your interface\n\t    file:\n\n\t    %warnfilter(SWIGWARN_PP_EVALUATION);\n\n\t    Both will work with older versions of SWIG too.\n\n2022-10-04: olly\n\t    #1050 Consistently define SWIG_VERSION both at SWIG-time and in\n\t    the generated wrapper.  Best practice remains to check at SWIG-time\n\t    where possible because that results in smaller generated wrapper\n\t    sources.\n\n\t    SWIGGO and SWIGJAVASCRIPT are now defined in the generated wrappers\n\t    to match behaviour for all other target languages.\n\n\t    The undocumented SWIGVERSION macro is no longer defined.\n\n2022-09-29: olly\n\t    #2303 SWIG's internal hash tables now use a better hash function.\n\n\t    The old hash function only considerd the last five characters\n\t    plus the least significant bit of the last-but-sixth character,\n\t    which as you might guess generated a lot of many-way collisions.\n\n\t    This change seems to give about a 4% reduction in wallclock time\n\t    for processing li_std_list_wrap.i from the testsuite for Python.\n\t    The hash collision rate for this example drops from 39% to 0!\n\n2022-09-29: wsfulton\n            #2303 Type tables are now output in a fixed order whereas previously\n            the order may change with any minor input code change. This shouldn't\n            affect users except SWIG_TypePrettyName may output a different C/C++\n            typedef to a type - it's used mostly for showing errors when the type\n            passed to a function is wrong.\n\n2022-09-29: olly\n\t    [PHP] Dynamic class properties are no longer supported by default.\n\n\t    Historically PHP has supported dynamic class properties and SWIG\n\t    has implemented them too (because we implement the magic __get(),\n\t    __set() and __isset() methods we need to include explicit\n\t    handling).\n\n\t    PHP 8.2 deprecates dynamic class properties - initially they'll\n\t    warn, and apparently they'll not work by default in PHP 9.0:\n\t    https://wiki.php.net/rfc/deprecate_dynamic_properties\n\n\t    In PHP code dynamic properties can be enabled for a class by\n\t    marking that class with the attribute `#[AllowDynamicProperties]`.\n\n\t    To follow this PHP change, in SWIG you now need to specify\n\t    `%feature(\"php:allowdynamicproperties\", 1) Foo;` (or\n\t    `%feature(\"php:allowdynamicproperties\", 1)` to enable it for\n\t    all wrapped classes).  Unknown features are ignored, so you can add\n\t    it unconditionally and it'll work with older SWIG too.\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2022-09-19: wsfulton\n            #1484 Fixes for class inheritance with the same name in different namespaces\n            such as:\n\n              namespace A { class Bar {}; }\n              namespace B { template<typename T, typename U> class Bar : public A::Bar {}; }\n\n2022-09-19: wsfulton\n            #2316 Remove swig.spec file and srcrpm makefile target. These are very out of date\n            and don't seem to be used by RPM based Linux distributions which have their\n            own version of swig.spec.\n\n2022-09-17: wsfulton\n            [Go, Guile, Racket, Scilab] Add throws typemaps for std::string so that thrown\n            string exception messages can be seen.\n\n2022-09-17: wsfulton\n            [Racket] Add throws typemaps for char * so that thrown string exception\n            messages can be seen from Racket.\n\n2022-09-17: wsfulton\n            [Javascript, Octave, R] Improve exceptions for %catches and exception\n            specifications for native types. String exception messages are shown as\n            the exception message instead of just the type of the exception.\n\n2022-09-17: wsfulton\n            Add missing typecheck typemaps for std::auto_ptr and std::unique_ptr to\n            fix overloading when using these types.\n\n2022-09-17: wsfulton\n            [Guile] Add error checking to SWIGTYPE and SWIGTYPE & in typemaps to prevent\n            seg faults when passing #nil to these parameter types.\n\n2022-09-16: wsfulton\n            #999 Provide SWIGTYPE MOVE typemaps in swigmove.i for implementing full\n            move semantics when passing parameters by value.\n\n2022-08-31: wsfulton\n            #999 Improve move semantics when using rvalue references.\n            The SWIGTYPE && input typemaps now assume the object has been moved.\n\n            These typemaps have been changed assuming that after the function call,\n            the rvalue reference parameter has been moved. The parameter's proxy class\n            that owns the C++ object thus has the underlying pointer set to null\n            so that the (moved from, but still valid) C++ object cannot be used again\n            and the object is additionally deleted.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2022-08-28: wsfulton\n            [Octave] SWIG now marshals a C/C++ NULL pointer into the null matrix, [].\n            SWIG has always marshalled the null matrix into a NULL pointer; this remains\n            and now we have consistency in representing a NULL pointer.\n\n2022-08-26: wsfulton\n            [Racket] SWIG now marshals a C/C++ NULL pointer into a null value by calling\n            scheme_make_null(), so that scheme's null? is true for a NULL C/C++ pointer value.\n\n2022-08-18: wsfulton\n            [Racket] Add support for std::unique_ptr in std_unique_ptr.i.\n            Add support for std::auto_ptr in std_auto_ptr.i.\n\n2022-08-13: wsfulton\n            [Guile] Add support for std::unique_ptr in std_unique_ptr.i.\n            Add support for std::auto_ptr in std_auto_ptr.i.\n\n2022-08-11: wsfulton\n            [Lua] Add support for std::unique_ptr in std_unique_ptr.i.\n            Add support for std::auto_ptr in std_auto_ptr.i.\n\n2022-08-05: wsfulton\n            [D] Fix occasional undefined behaviour with inheritance hierarchies, particularly\n            when using virtual inheritance as the pointers weren't correctly upcast from derived\n            class to base class when stored in the base's proxy class.\n\n2022-08-05: wsfulton\n            [D] Add support for std::unique_ptr in std_unique_ptr.i.\n            Add support for std::auto_ptr in std_auto_ptr.i.\n\n2022-08-03: wsfulton\n            [Javascript] Add support for std::unique_ptr in std_unique_ptr.i.\n            Add support for std::auto_ptr in std_auto_ptr.i.\n\n2022-08-02: wsfulton\n            [Octave] Add support for std::unique_ptr in std_unique_ptr.i.\n            Add support for std::auto_ptr in std_auto_ptr.i.\n\n2022-08-01: wsfulton\n            [Python] Add initialisers for additional members in PyHeapTypeObject\n            (builtin mode) for Python-3.11 - _ht_tpname, _spec_cache.\n\n2022-07-30: wsfulton\n            C++20 has deprecated std::basic_string<>::reserve() and the C++11 method\n            std::basic_string<>::shrink_to_fit() is a replacement that can be used.\n            std_string.i and std_wstring.i provided wrappers for reserve with the following\n            template instantiations:\n\n              %template(string) std::basic_string<char>;\n              %template(wstring) std::basic_string<wchar_t>;\n\n            The reserve method is no longer wrapped, however the shrink_to_fit() method\n            can be used as an alternative from the target language (the generated wrappers\n            call reserve() instead if C++<=20).\n\n            Note that std::basic_string<>::reserve(size_t n) is still wrapped unchanged.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2022-07-30: wsfulton\n            [Tcl] Add support for std::unique_ptr in std_unique_ptr.i.\n            Add support for std::auto_ptr in std_auto_ptr.i.\n\n2022-07-27: ZackerySpytz, olly\n\t    #1678 Support parsing C++20 templated lambdas.\n\n2022-07-27: ZackerySpytz, olly\n\t    #1622 Add support for the C++20 spaceship operator (<=>).\n\n2022-07-26: olly\n\t    [Tcl] https://sourceforge.net/p/swig/bugs/977/\n\t    Fix handling of long long on 32-bit platforms.  This fix raises\n\t    SWIG's minimum supported Tcl version to 8.4.0 (which was released\n\t    just under 20 years ago).\n\n2022-07-26: olly\n            Fix incorrect operator precedence in preprocessor expressions.\n\n2022-07-25: olly\n\t    Support for C++14 binary integer literals in preprocessor expressions.\n\n2022-07-20: wsfulton\n            [C#, Java] Ensure the order of interfaces generated in proxy interfaces for the\n            %interface family of macros is the same as that parsed from the bases in C++.\n\n2022-07-20: jicks, Ingener74, olly\n\t    #422 [Python] Fix mishandling of a Python class inheriting from\n\t    multiple SWIG-wrapped director classes.\n\n2022-07-19: wsfulton\n            #692 [C#, Java, Perl, Python, Ruby] std::unique_ptr and std::auto_ptr typemaps\n            provided for inputs types in std_unique_ptr.i and std_auto_ptr.i.\n\n            Now these smart pointers can be used as input parameters to functions. A proxy\n            class instance transfers memory ownership of the underlying C++ object from the\n            proxy class to a smart pointer instance passed to the wrapped function.\n\n2022-07-19: jschueller\n\t    [Python] #2314 Drop support for Python 3.2.\n\n2022-07-19: olly\n\t    Remove remaining support code for classic macos, which has not been\n\t    supported by Apple for over 20 years now.\n\n2022-07-12: wsfulton\n            #999 Performance optimisation for parameters passed by value that are C++11 movable.\n            The C++ wrappers create a temporary variable for a parameter to be passed to a\n            function. This is initially default constructed and then copy assigned from the\n            instance being passed in from the target language. This is unchanged, however,\n            when the temporary variable is passed to the wrapped function, it is now done using\n            std::move. If the type is move constructible, the move constructor will be used\n            instead of the copy constructor.\n\n2022-07-12: wsfulton\n            [Perl] Add std::auto_ptr support in std_auto_ptr.i library file.\n\n2022-07-12: erezgeva\n            [Perl] Add std::unique_ptr support in std_unique_ptr.i library file.\n\n2022-07-07: jmarrec\n\t    #1158 #2286 Add basic support for C++11 attributes.  These are now\n\t    crudely ignored by SWIG's parser's tokeniser, which is better than\n\t    failing with a parse error.\n\n2022-07-05: ianlancetaylor\n\t    [Go] #2245 Handle NULL pointers for string* conversions.\n\t    Rearrange generation of director methods and rename\n\t    receiver argument from p to swig_p.\n\n2022-07-03: wsfulton\n            #999 Performance optimisation for directors for classes passed by value. The directorin\n            typemaps in the director methods now use std::move on the input parameter when\n            copying the object from the stack to the heap prior to the callback into the target\n            language, thereby taking advantage of move semantics if available.\n\n2022-07-02: wsfulton\n            #1722 [C#, Java, Python, Ruby] Add std::unique_ptr support. Ported from std::auto_ptr.\n            Use the %unique_ptr(T) macro as follows for usage std::unique_ptr<T>. For example, for\n            a class called Klass:\n\n              %include \"std_unique_ptr.i\"\n              %unique_ptr(Klass)\n\n            Support is currently limited to only returning a std::unique_ptr from a function.\n\n2022-06-29: wsfulton\n            #999 #1044 Enhance SWIGTYPE \"out\" typemaps to use std::move when copying\n            objects, thereby making use of move semantics when wrapping a function returning\n            by value if the returned type supports move semantics.\n\n            Wrapping functions that return move only types 'by value' now work out the box\n            without having to provide custom typemaps.\n\n            The implementation removed all casts in the \"out\" typemaps to allow the compiler to\n            appropriately choose calling a move constructor, where possible, otherwise a copy\n            constructor. The implementation also required modifying SwigValueWrapper to\n            change a cast operator from:\n\n              SwigValueWrapper::operator T&() const;\n\n            to\n\n              #if __cplusplus >=201103L\n                SwigValueWrapper::operator T&&() const;\n              #else\n                SwigValueWrapper::operator T&() const;\n              #endif\n\n            This is not backwards compatible for C++11 and later when using the valuewrapper feature\n            if a cast is explicitly being made in user supplied \"out\" typemaps. Suggested change\n            in custom \"out\" typemaps for C++11 and later code:\n\n            1. Try remove the cast altogether to let the compiler use an appropriate implicit cast.\n            2. Change the cast, for example, from static_cast<X &> to static_cast<X &&>, using the\n               __cplusplus macro if all versions of C++ need to be supported.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2022-06-15: wsfulton\n            #2039 Add move assignment operator to SwigValueWrapper used by the\n            valuewrapper feature.\n\n2022-06-04: sethrj\n            Enhance $typemap to support typemap attributes.\n\n              $typemap(method:attribute, typepattern)\n\n            For example:\n\n              %typemap(cstype, out=\"object\") XClass \"XClass\"\n              %typemap(cscode) BarClass %{\n                $typemap(cstype:out, XClass) bar() {\n                  return null;\n                }\n\n              which expands to\n\n                object bar() {\n                  return null;\n                }\n\n2022-05-30: wsfulton\n            [C#, D] Add new special variable expansion: $imfuncname.\n            Expands to the function name called in the intermediary class.\n\n2022-05-30: LindleyF\n            [Java] #2042 Add new special variable expansion: $imfuncname.\n            Expands to the function name called in the intermediary class.\n\n2022-05-28: jkuebart\n            [Java] On some versions of Android, specifically Android 6,\n            detaching the current thread from the JVM after every invocation\n            causes a memory leak.\n\n            Offer SWIG_JAVA_DETACH_ON_THREAD_END to configure a behaviour\n            where the JVM is only detached in the thread destructor.\n\n            See https://developer.android.com/training/articles/perf-jni#threads.\n\n2022-05-27: xypron\n            [Python] #2277 Define PY_SSIZE_T_CLEAN macro before #include \"Python.h\" as\n            recommended in Python 3.7 and later.\n\n            To avoid this macro definition, add the following to your interface file so\n            that SWIG_NO_PY_SSIZE_T_CLEAN is defined at the beginning of the C++ wrappers:\n\n              %begin %{\n              #define SWIG_NO_PY_SSIZE_T_CLEAN\n              %}\n\n2022-05-26: rokups\n            [C#] #1323 Modify SwigDerivedClassHasMethod for a more efficient director\n            implementation when calling virtual methods that are not overridden.\n\n2022-05-15: erezgeva, eiselekd\n            [Lua, Perl, Octave, PHP, Tcl] #2275 #2276 #2283 Add argcargv.i library containing\n            (int ARGC, char **ARGV) multi-argument typemaps.\n\n            Document this library in Typemaps.html.\n\n2022-05-07: KrisThielemans\n            [Python] Fix \"too many initializers for 'PyHeapTypeObject'\" errors\n            using PyPy 3.8 and later.\n\n2022-05-04: wsfulton\n            [C#] Add C# wchar_t * director typemaps\n\n2022-04-20: cminyard\n\t    Fix an issue where newlines were not properly generated\n\t    for godirectorin typemaps.  If you have a virtual function\n\t    not assigned to zero, in some cases it won't generate a\n\t    newline and you will see errors:\n\t      example.go:1508:3: expected ';', found swig_r\n\t    when compiling the go code.\n\n\t    Also add an example of using goin and godirectorin and add\n\t    a test for this situation.\n\n2022-04-29: jason-daly, JerryJoyce, wsfulton\n\t    [C#] #1233 Add wchar_t * and std::wstring Unicode string support on Linux.\n\n2022-04-11: robinst\n\t    #2257 Fix new Ruby 3.2 warning \"undefining the allocator of T_DATA\n\t    class swig_runtime_data\".\n\n2022-04-07: olly\n\t    #1750 SWIG now recognises and ignores Doxygen group commands `@{` and `@}`.\n\n2022-04-06: wsfulton\n            ./configure now enables C++11 and later C++ standards testing by default (when\n            running: 'make check').\n\n            The options to control this testing are the same:\n\n              ./configure --enable-cpp11-testing\n              ./configure --disable-cpp11-testing\n\n            But the former is now the default and the latter can be used to turn off C++11 and\n            later C++ standards testing.\n\n2022-04-06: wsfulton\n            [Python] #1635 The \"autodoc\" feature no longer overrides Doxygen comments\n            in the generated docstring.\n\n            If a \"docstring\" feature is present it will still override a Doxygen comment.\n            If the \"autodoc\" feature is also present, the combined \"autodoc\" and \"docstring\"\n            will override the Doxygen comment. If no \"docstring\" is present then the\n            \"autodoc\" feature will not be generated when there is a Doxygen comment.\n\n            This way the \"autodoc\" feature can be specified and used to provide documentation\n            for 'missing' Doxygen comments.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2022-04-01: olly\n\t    Remove undocumented and non-functional -browse command line option.\n\n2022-03-26: eltoder\n            [Python] #1684 Use different capsule names with and without -builtin\n\n            Types generated with and without -builtin are not compatible. Mixing\n            them in a common type list leads to crashes. Avoid this by using\n            different capsule names: \"type_pointer_capsule\" without -builtin and\n            \"type_pointer_capsule_builtin\" with.\n\n2022-03-25: wsfulton\n            The debug command line options that display parse tree nodes\n            (-debug-module, -debug-top, -debug-symtabs) now display previously hidden\n            linked list pointers which are useful for debugging parse trees.\n\n            Added new command line option -debug-quiet. This suppresses the display\n            of most linked list pointers and symbol table pointers in the parse tree nodes.\n\n            The keys in the parse tree node are now shown in alphabetical order.\n\n2022-03-24: wsfulton\n            #2244 Fix using declaration in derived class bugs when all the base\n            class's overloaded methods were overridden in the derived class -\n            fixes \"multiply defined\" errors.\n\n2022-03-23: wsfulton\n            [Python] #1779 The -py3 option is deprecated and now has no effect on the\n            code generated. Use of this option results in a deprecated warning.\n            The related SWIGPYTHON_PY3 macro that this option defined is no longer generated.\n\n            Note that %pythonnondynamic feature generates a metaclass that works on both\n            Python 2 and Python 3.\n\n2022-03-21: wsfulton\n            [Python] #1779 pyabc.i for abstract base classes now supports versions of\n            Python prior to 3.3 by using the collection module for these older versions.\n            Python-3.3 and later continue to use the collections.abc module.\n            The -py3 option no longer has any effect on the %pythonabc feature.\n\n2022-03-21: jschueller, jim-easterbrook, wsfulton\n            [Python] #2137 C++ static member functions no longer generate a \"flattened\"\n            name in the Python module. For example:\n\n              s = example.Spam()\n              s.foo()               # Spam::foo() via an instance\n              example.Spam.foo()    # Spam::foo() using class method\n              example.Spam_foo()    # Spam::foo() \"flattened\" name\n\n            The \"flattened\" name is no longer generated, but can be generated\n            by using the new -flatstaticmethod option.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2022-03-18: ianlancetaylor\n\t    [Go] #337 Implement %extend base methods in child classes.\n\n2022-03-17: olly\n\t    [Python] #1779 SWIG's Python test-suite and examples are now\n\t    run with Python 3 by default.  To run them with Python 2, set\n\t    PY2 to a non-empty value, e.g.:\n\n\t    make check-python-test-suite PY2=1\n\n2022-03-16: olly\n\t    [Go] #683 -intgosize is now optional - if not specified the\n\t    generated C/C++ wrapper code will use ptrdiff_t for intgo and\n\t    size_t for uintgo.\n\n2022-03-15: ianlancetaylor\n\t    [Go] Add typemaps for std::string*.\n\n2022-03-15: ianlancetaylor\n\t    [Go] Don't convert arrays to pointers if there is a \"gotype\"\n\t    typemap entry.\n\n2022-03-15: ianlancetaylor\n\t    [Go] Add documentation note about Go and C++ exceptions.\n\n2022-03-12: wsfulton\n            #1524 %interface family of macros no longer contain the getter/setter\n            methods for wrapping variables. The interface only contains\n            virtual and non-virtual instance methods, that is, no static methods.\n            Enums are also no longer added to the interface (affects Java only where\n            they were missing from the proxy class, C# never had them in the interface).\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2022-03-12: wsfulton\n            #1277 Fixes for the family of %interface macros, %interface,\n            %interface_impl and %interface_custom fixes for overloaded methods\n            in an inheritance chain.\n\n            When C++ methods are not able to be overloaded in a derived class,\n            such as when they differ by just const, or the target language\n            parameters types are identical even when the C++ parameter types\n            are different, SWIG will ignore one of the overloaded methods with\n            a warning. A %ignore is required to explicitly ignore one of the\n            overloaded methods to avoid the warning message. Methods added\n            in the derived classes due to one of the %interface macros are now\n            similarly ignored/not added to the derived class.\n\n            The methods added to the derived classes can now also be modified\n            via %feature and %rename.\n\n2022-03-08: ianlancetaylor\n\t    [Go] Treat a nil argument as a NULL pointer.\n\n2022-03-08: ianlancetaylor\n\t    [Go] Add documentation notes about thread local storage.\n\n2022-03-08: olly\n\t    #1006 SWIG now copes with an interface filename specified on the\n\t    command line which contains a closing parenthesis `)`, and more\n\t    generally with attributes to `%include` and `%import` which\n\t    are quoted and contain parentheses.\n\n2022-03-07: Omar Medina\n\t    [Tcl] https://sourceforge.net/p/swig/bugs/1290/\n\t    Fix SWIG_AsWCharPtrAndSize() to actually assign to result\n\t    variable.  It looks like SWIG/Tcl wide character handling is\n\t    currently fundamentally broken except on systems which use wide\n\t    characters as the system encoding, but this should fix wrapping\n\t    functions which take a wide string as a parameter on Microsoft\n\t    Windows.\n\n2022-03-07: olly\n\t    [Javascript] #682 Fix handling of functions which take void*.\n\n2022-03-06: olly\n\t    SWIG should now reliably exit with status 0 if the run was\n\t    successful and status 1 if there was an error (or a warning and\n\t    -Werror was in effect).\n\n\t    Previously in some situations SWIG would try to exit with the\n\t    status set to the number of errors encountered, but that's\n\t    problematic - for example if there were 256 errors this would\n\t    result in exit status 0 on most platforms.  Also some error\n\t    statuses have special meanings e.g. those defined by <sysexits.h>.\n\t    Also SWIG/Javascript tried to exit with status -1 in a few places\n\t    (which typically results in exit status 255).\n\n2022-03-05: wsfulton\n            #1441 Fix using declaration in derived class incorrectly introducing a method\n            from a base class when the using declaration is declared before the method\n            declaration. Problem occurred when within a namespace and the parameter types\n            in the method signatures were not fully qualified.\n\n2022-03-05: ianlancetaylor\n\t    [Go] Treat non-const references as pointers.\n\n2022-03-05: ianlancetaylor\n\t    In SWIG Go testsuite, fail test if \"go build\" fails.\n\n2022-03-03: olly\n\t    #1901 #2223 SWIG should now always exit cleanly if memory\n\t    allocation fails, including removing any output files created\n\t    during the current run.\n\n\t    Previously most places in the code didn't check for a NULL return\n\t    from malloc()/realloc()/calloc() at all, typically resulting in\n\t    undefined behaviour; some places used assert() to check for a NULL\n\t    return (which is a misuse of assert() and such checks disappear if\n\t    built with NDEBUG defined leaving us back with undefined\n\t    behaviour).\n\n2022-03-03: olly\n\t    #891 Report errors for typemap attributes without a value\n\t    (previously SWIG segfaulted) and for typemap types with a value\n\t    (previously the value was quietly ignored).\n\n\t    The old way of specifying a language name in the typemap attributes\n\t    is no longer supported (it has been deprecated for 16 years).\n\n2022-03-02: geographika, wsfulton\n            [Python] #1951 Add Python variable annotations support.\n\n            Both function annotations and variable annotations are turned on using the\n            \"python:annotations\" feature. Example:\n\n              %feature(\"python:annotations\", \"c\");\n\n              struct V {\n                float val;\n              };\n\n            The generated code contains a variable annotation containing the C float type:\n\n              class V(object):\n                  val: \"float\" = property(_example.V_val_get, _example.V_val_set)\n                  ...\n\n            Python 3.5 and earlier do not support variable annotations, so variable\n            annotations can be turned off with a \"python:annotations:novar\" feature flag.\n            Example turning on function annotations but not variable annotations globally:\n\n              %feature(\"python:annotations\", \"c\");\n              %feature(\"python:annotations:novar\");\n\n            or via the command line:\n\n              -features python:annotations=c,python:annotations:novar\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2022-02-27: wsfulton\n            [Python] #735 #1561 Function annotations containing C/C++ types are no longer\n            generated when using the -py3 option. Function annotations support has been\n            moved to a feature to provide finer grained control. It can be turned on\n            globally by adding:\n\n              %feature(\"python:annotations\", \"c\");\n\n            or by using the command line argument:\n\n              -features python:annotations=c\n\n            Also see entry dated 2022-03-02, regarding variable annotations.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2022-02-26: wsfulton\n            #655 #1840 Add new warning WARN_LANG_USING_NAME_DIFFERENT to warn when a\n            method introduced by a using declaration in a derived class cannot\n            be used due to a conflict in names.\n\n2022-02-24: olly\n\t    #1465 An invalid preprocessor expression is reported as a pair of\n\t    warnings with the second giving a more detailed message from the\n\t    expression evaluator.  Previously SWIG prefixed the second message\n\t    with \"Error:\" - that was confusing as it's actually only a warning\n\t    by default so we've now dropped this prefix.\n\n\t    Before:\n\n\t    x.i:1: Warning 202: Could not evaluate expression '1.2'\n\t    x.i:1: Warning 202: Error: 'Floating point constant in preprocessor expression'\n\n\t    Now:\n\n\t    x.i:1: Warning 202: Could not evaluate expression '1.2'\n\t    x.i:1: Warning 202: Floating point constant in preprocessor expression\n\n2022-02-23: olly\n\t    #1384 Fix a preprocessor expression evaluation bug.  A\n\t    subexpression in parentheses lost its string/int type flag and\n\t    instead used whatever type was left in the stack entry from\n\t    previous use.  In practice we mostly got away with this because\n\t    most preprocessor expressions are integer, but it could have\n\t    resulted in a preprocessor expression incorrectly evaluating as\n\t    zero.  If -Wextra was in use you got a warning:\n\n\t    Warning 202: Error: 'Can't mix strings and integers in expression'\n\n2022-02-21: davidcl\n\t    [Scilab] Improve 5.5.2, 6.0.0 and 6.1.0 support.\n\n\t    For Scilab 5, long names are reduced to small names preserving the \n\t    class prefix and accessor suffix (get or set).\n\n\t    For Scilab 6, long names with the class prefix and accessor suffix\n\t    should be used on the user code.\n\n\t    The `-targetversion` option has been removed as the generated code\n\t    now detects the Scilab version in loader.sce or builder.sce.\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2022-02-20: wsfulton\n            Fix %warnfilter warning suppress for warning 315 SWIGWARN_PARSE_USING_UNDEF.\n\n2022-02-17: olly\n\t    [PHP] https://sourceforge.net/p/swig/bugs/1211/\n\t    Fix to call cleanup code in exception situations and not to invoke\n\t    the freearg typemap twice in certain situations.\n\n2022-02-15: olly\n\t    #300 #368 Improve parser handling of % followed immediately by\n\t    an identifier.  If it's not a recognised directive the scanner\n\t    now emits MODULO and then rescans what follows, and if the parser\n\t    then gives a syntax error we report it as an unknown directive.\n\t    This means that `a%b` is now allowed in an expression, and that\n\t    things like `%std::vector<std::string>` now give an error rather\n\t    than being quietly ignored.\n\n2022-02-11: adr26\n            [Python] #2154 Fix memory leak.\n\n            SWIG python objects were being freed after the corresponding SWIG\n            module information was destroyed in Python 3, causing leaks when as\n            a result the object destructor could not be invoked. To prevent this\n            misordering, SWIG python objects now obtain a reference to the\n            Python capsule wrapping the module information, so that the module\n            information is correctly destroyed after all SWIG python objects\n            have been freed (and corresponding destructors invoked).\n\n2022-02-10: olly\n\t    [Tcl] https://sourceforge.net/p/swig/bugs/1207/\n\t    https://sourceforge.net/p/swig/bugs/1213/\n\n\t    Fix Tcl generic input typemap for std::vector.\n\n2022-02-07: sethrj\n            #2196 Add alternative syntax for specifying fragments in typemaps.\n\n            New syntax:\n              %typemap(\"in\", fragment=\"frag1\", fragment=\"frag2\", fragment=\"frag3\") {...}\n            which is equivalent to:\n              %typemap(in, fragment=\"frag1,frag2,frag3\") {...}\n\n\n2022-02-07: olly\n\t    #1806 Remove support for the \"command\" encoder, which was mostly\n\t    intended for use in `%rename` - most uses can be achieved using\n\t    the \"regex\" encoder, so we recommend using that instead.\n\n\t    The \"command\" encoder suffers from a number of issues - as the\n\t    documentation for it admitted, \"[it] is extremely slow compared to\n\t    all the other [encoders] as it involves spawning a separate process\n\t    and using it for many declarations is not recommended\" and that it\n\t    \"should generally be avoided because of performance\n\t    considerations\".\n\n\t    But it's also not portable.  The design assumes that `/bin/sh`\n\t    supports `<<<` but that's a bash-specific feature so it doesn't\n\t    work on platforms where `/bin/sh` is not bash - it fails on\n\t    Debian, Ubuntu and probably some other Linux distros, plus most\n\t    non-Linux platforms.  Microsoft Windows doesn't even have a\n\t    /bin/sh as standard.\n\n\t    Finally, no escaping of the passed string is done, so it has\n\t    potential security issues (though at least with %rename the input\n\t    is limited to valid C/C++ symbol names).\n\n2022-02-06: olly\n\t    #2193 -DFOO on the SWIG command line now sets FOO to 1 for\n\t    consistency with C/C++ compiler preprocessors.  Previously\n\t    SWIG set FOO to an empty value.\n\n\t    Existing invocations of SWIG with `-DFOO` where the empty value\n\t    matters can be updated to `-DFOO=` which should work with both\n\t    old and new releases of SWIG.\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2022-02-06: sethrj\n\t    #2194 Classes that are non-assignable due to const data or const\n\t    reference members are now automatically detected.\n\n2022-02-04: friedrichatgc\n\t    [Octave] #1672 Fix for isobject for Octave 4.4 - 6.0.\n\n2022-02-03: olly\n\t    [C#] #283 #998 Fix memory leak in directorin typemap for\n\t    std::string.\n\n2022-02-03: olly\n\t    [Python] #967 Make `self` parameter available to user typemaps.\n\n2022-02-03: teythoon\n\t    [Python] #801 Fix -Wunused-parameter warnings with builtin,\n\n2022-02-03: teythoon\n\t    #801 Fix -Wstrict-prototypes warnings in generated pointer\n\t    functions.\n\n2022-02-03: olly\n\t    #660 https://sourceforge.net/p/swig/bugs/1081/\n\t    Default parameter values containing method calls are now parsed and\n\t    handled - e.g. `x->foo(3,4)` and `y.z()`.\n\n2022-02-02: olly\n\t    [Ruby] https://sourceforge.net/p/swig/bugs/1136/ Fix remove of prefix\n\t    from method name to only remove it at the start.\n\n2022-02-01: olly\n\t    #231 Handle returning an object by reference in a C++ trailing\n\t    return type.\n\n2022-02-01: davidcl\n            [Scilab] #745 use SWIG_<module>_Init() as a C module init function.\n\n2022-02-01: olly\n\t    [OCaml] #2083 Fix to work when CAML_SAFE_STRING is on, which it is\n\t    by default in recent Ocaml releases.\n\n2022-01-31: mreeez\n\t    https://sourceforge.net/p/swig/bugs/1147/\n\t    Fix copyToR() generated for a struct in a namespace.\n\n2022-01-29: fschlimb\n\t    #655 Better handling of using declarations.\n\n2022-01-29: dontpanic92\n\t    [Go] #676 Fix code generated for a C++ class with a non-capitalised\n\t    name.\n\n2022-01-26: trex58\n\t    #1919 #1921 #1923 Various fixes for AIX portability.\n\n2022-01-26: olly\n\t    #1935 Don't crash on an unclosed HTML tag in a doxygen comment\n\t    when -doxygen is specified.\n\n2022-01-25: olly\n\t    Constant expressions now support member access with `.` such as\n\t    `foo.bar`.  Previous this only worked in a case like `x->foo.bar`.\n\n2022-01-25: olly\n\t    #2091 Support most cases of `sizeof` applied to an expression\n\t    in constant expressions.  Previously there was only support for\n\t    `sizeof(<type>)` and expressions which syntactically look like a\n\t    type (such as `sizeof(foo)`).\n\n2022-01-25: olly\n\t    #80 #635 https://sourceforge.net/p/swig/bugs/1139/\n\t    Add support for parsing common cases of `<` and `>` comparisons\n\t    in constant expressions.  Adding full support for these seems hard\n\t    to do without introducing conflicts into the parser grammar, but in\n\t    fact all reported cases have had parentheses around the comparison\n\t    and we can support that with a few restrictions on the left side of\n\t    `<`.\n\n2022-01-25: wsfulton\n            New warning 327 for extern templates, eg:\n\n              extern template class std::vector<int>;\n              extern template void Func<int>();\n\n            results in warning\n\n              example.i:3: Warning 327: Extern template ignored.\n              example.i:4: Warning 327: Extern template ignored.\n\n            Extern template classes previously resulted in warning 320.\n\n2022-01-24: romintomasetti\n            #2131 #2157 C++11 extern function template parsing error fix.\n\n2022-01-21: wsfulton\n            #2120 #2138 Replace legacy PCRE dependency with PCRE2.\n            This requires changes for building SWIG from source. See updated\n            html documentation in Preface.html and Windows.html. Updated\n            instructions are also shown when running ./configure if PCRE2 is not\n            found. Note that debian based systems can install PCRE2 using:\n\n              apt install libpcre2-dev\n\n            Note that https://github.com/swig/swig/wiki/Getting-Started also has\n            updated information for building from source.\n\n2022-01-19: olly\n\t    [PHP] #2027 Automatically generate PHP type declarations for PHP 8.\n\t    The generate code still compiles for PHP 7.x, but without type\n\t    declarations since PHP 7.x has much more limited type declaration\n\t    support.\n\n2022-01-18: olly\n\t    [Perl] #1629 Perl 5.8.0 is now the oldest version we aim to support.\n\n2022-01-14: wsfulton\n            [Python] Fix %callback and specifying the callback function as a\n            static member function using Python staticmethod syntax, such as\n            Klass.memberfunction instead of Klass_memberfunction when using\n            -builtin and -fastproxy.\n\n2022-01-11: wsfulton\n            [Python] Accept keyword arguments accessing static member functions when\n            using -builtin and kwargs feature and Python class staticmethod syntax.\n            The missing keyword argument support was only when using the\n            class staticmethod syntax, such as Klass.memberfunction, and not when\n            using the flat static method syntax, such as Klass_memberfunction.\n\n2022-01-04: juierror\n            [Go] #2045 Add support for std::array in std_array.i.\n\n2021-12-18: olly\n\t    [PHP] Add PHP keyword 'readonly' (added in 8.1) to the list SWIG\n\t    knows to automatically rename.  This keyword is special in that PHP\n\t    allows it to be used as a function (or method) name.\n\n2021-12-07: vstinner\n            [Python] #2116 Python 3.11 support: use Py_SET_TYPE()\n\n2021-12-05: rwf1\n            [Octave] #2020 #1893 Add support for Octave 6 up to and including 6.4.\n            Also add support for compiling with -Bsymbolic which is used by default\n            by mkoctfile.\n\n2021-12-02: jsenn\n            [Python] #2102 Fixed crashes when using embedded Python interpreters. \n\n2021-11-12: wsfulton\n            [Javascript] v8 and node only. Fix mismatched new char[] and free()\n            when wrapping C code char arrays. Now calloc is now used instead of\n            new char[] in SWIG_AsCharPtrAndSize.\n\n2021-10-03: ajrh1\n            [Perl] #2074: Avoid -Wmisleading-indentation in generated code\n            when using gcc11.\n\n2021-10-03: jschueller\n            [CMake] #2065: Add option to enable or disable PCRE support.\n\n2021-09-16: ianlancetaylor\n            [Go] Improved _cgo_panic implementation.\n\n2021-09-16: ianlancetaylor\n            [Go] Don't use crosscall2 for panicking. Instead rely on documented\n            and exported interfaces.\n\n2021-09-14: ianlancetaylor\n            [Go] Remove -no-cgo option (long unsupported in Go)\n\n2021-05-04: olly\n\t    [PHP] #2014 Throw PHP exceptions instead of using PHP errors\n\n\t    PHP exceptions can be caught and handled if desired, but if they\n\t    aren't caught then PHP exits in much the same way as it does for a\n\t    PHP error.\n\n\t    In particular this means parameter type errors and some other cases\n\t    in SWIG-generated wrappers now throw a PHP exception, which matches\n\t    how PHP's native parameter handling deals with similar situations.\n\n\t    `SWIG_ErrorCode()`, `SWIG_ErrorMsg()`, `SWIG_FAIL()` and `goto thrown;`\n\t    are no longer supported (these are really all internal implementation\n\t    details and none are documented aside from brief mentions in CHANGES\n\t    for the first three).  I wasn't able to find any uses in user interface\n\t    files at least in FOSS code via code search tools.\n\n\t    If you are using these:\n\n\t    Use `SWIG_PHP_Error(code,msg);` instead of `SWIG_ErrorCode(code);\n\t    SWIG_ErrorMsg(msg);` (which will throw a PHP exception in SWIG >= 4.1\n\t    and do the same as the individual calls in older SWIG).\n\n\t    `SWIG_FAIL();` and `goto thrown;` can typically be replaced with\n\t    `SWIG_fail;`.  This will probably also work with older SWIG, but\n\t    please test with your wrappers if this is important to you.\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2021-05-17: adr26\n            [Python] #1985 Fix memory leaks:\n\n            1. Python object references were being incorrectly retained by\n            SwigPyClientData, causing swig_varlink_dealloc() never to run / free\n            memory. SwigPyClientData_New() / SwigPyClientData_Del() were updated\n            to fix the object reference counting, causing swig_varlink_dealloc()\n            to run and the memory swig_varlink owns to be freed.\n\n            2. SwigPyClientData itself was not freed by SwigPyClientData_Del(),\n            causing another heap leak. The required free() was added to\n            SwigPyClientData_Del()\n\n            3. Fix reference counting/leak of python cached type query\n\n            4. Fix reference counting/leak of SwigPyObject dict (-builtin)\n\n            5. Python object reference counting fixes for out-of-memory\n            scenarios were added to: SWIG_Python_RaiseOrModifyTypeError(),\n            SWIG_Python_AppendOutput(), SwigPyClientData_New(),\n            SwigPyObject_get___dict__() and SwigPyObject_format()\n\n            6. Add error handling for PyModule_AddObject() to\n            SWIG_Python_SetModule() (failure could be caused by OOM or a name\n            clash caused by malicious code)\n\n2021-05-13: olly\n\t    [UFFI] #2009 Remove code for Common Lisp UFFI.  We dropped support\n\t    for it in SWIG 4.0.0 and nobody has stepped forward to revive it in\n\t    over 2 years.\n\n2021-05-13: olly\n\t    [S-EXP] #2009 Remove code for Common Lisp S-Exp.  We dropped\n\t    support for it in SWIG 4.0.0 and nobody has stepped forward to\n\t    revive it in over 2 years.\n\n2021-05-13: olly\n\t    [Pike] #2009 Remove code for Pike.  We dropped support for it in\n\t    SWIG 4.0.0 and nobody has stepped forward to revive it in over 2\n\t    years.\n\n2021-05-13: olly\n\t    [Modula3] #2009 Remove code for Modula3.  We dropped support for it\n\t    in SWIG 4.0.0 and nobody has stepped forward to revive it in over 2\n\t    years.\n\n2021-05-13: olly\n\t    [CLISP] #2009 Remove code for GNU Common Lisp.  We dropped support\n\t    for it in SWIG 4.0.0 and nobody has stepped forward to revive it in\n\t    over 2 years.\n\n2021-05-13: olly\n\t    [Chicken] #2009 Remove code for Chicken.  We dropped support for it\n\t    in SWIG 4.0.0 and nobody has stepped forward to revive it in over 2\n\t    years.\n\n2021-05-13: olly\n\t    [Allegrocl] #2009 Remove code for Allegro Common Lisp.  We dropped\n\t    support for it in SWIG 4.0.0 and nobody has stepped forward to\n\t    revive it in over 2 years.\n\n2021-05-04: olly\n\t    [PHP] #1982 #1457 https://sourceforge.net/p/swig/bugs/1339/\n\t    SWIG now only use PHP's C API to implement its wrappers, and no\n\t    longer generates PHP code to define classes.  The wrappers should\n\t    be almost entirely compatible with those generated before, but\n\t    faster and without some previously hard-to-fix bugs.\n\n\t    The main notable difference is SWIG no longer generates a .php\n\t    wrapper at all by default (only if %pragma(php) code=... or\n\t    %pragma(php) include=... are specified in the interface file).\n\t    This also means you need to load the module via extension=...\n\t    in php.ini, rather than letting the dl() in the generated\n\t    .php wrapper load it (but dl() has only worked for command-line\n\t    PHP for some years now).\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2021-04-30: olly\n\t    #1984 Remove support for $source and $target.\n\t    These were officially deprecated in 2001, and attempts to use them have\n\t    resulted in a warning (including a pointer to what to update them to)\n\t    for most if not all of that time.\n\n2021-04-27: wsfulton\n            #1987 [Java] Fix %interface family of macros for returning by const\n            pointer reference.\n\n2021-04-19: olly\n\t    Fix use of uninitialised variable in the generated code for an\n\t    empty typecheck typemap, such as the dummy one we include for\n\t    std::initializer_list.\n\n2021-04-12: olly\n\t    #1777 [Python] Specifying -py3 now generates a check for Python\n\t    version >= 3.0.\n\n2021-03-26: olly\n\t    [PHP] Add PHP keywords 'fn' (added in 7.4) and 'match' (added in\n\t    8.0) to the list SWIG knows to automatically rename.\n\n2021-03-23: wsfulton\n            #1942 [Python] Fix compilation error in wrappers when using -builtin\n            and wrapping varargs in constructors.\n\n2021-03-22: goto40\n            #1977 Fix handling of template template parameters.\n\n2021-03-21: olly\n\t    #1929, #1978 [PHP] Add support for PHP 8.\n\n2021-03-19: wsfulton\n            #1610 Remove -ansi from default compilation flags.\n\n2021-03-19: dot-asm\n            #1934 [Java] Clean up typemaps for long long arrays.\n\n2021-03-19: olly\n\t    #1527 [PHP] Improve PHP object creation in directorin case.\n\t    Reportedly the code we were using in this case gave segfaults in\n\t    PHP 7.2 and later - we've been unable to reproduce these, but the\n\t    new approach is also simpler and should be bit faster too.\n\n2021-03-18: olly\n\t    #1655 [PHP] Fix char* typecheck typemap to accept PHP Null like the\n\t    corresponding in typemap does.\n\n2021-03-18: olly\n\t    #1900, #1905 [PHP] Fix wrapping of overloaded directed methods with\n\t    non-void return.\n\n2021-03-11: murillo128\n            #1498 [Javascript] Support type conversion.\n\n2021-03-06: nshmyrev\n            #872 [Javascript] Various typemap issues in arrays_javascript.i fixed.\n\n2021-03-03: vaughamhong\n            #577 [Javascript] Implemented SetModule/GetModule for JSC to allow type sharing\n            across modules.\n\n2021-03-01: xantares, Oliver Buchtala, geographika\n            #1040 Add support for building SWIG with CMake. See documentation in Windows.html.\n\n2021-03-01: vadz\n            #1952 Fix incorrect warning \"Unknown Doxygen command: .\"\n\n2021-02-28: p2k\n            #969 [Javascript] v8/node - prevent crash calling a constructor without new keyword.\n\n2021-02-28: alecmev\n            #405 #1121 [Javascript] Fix OUTPUT typemaps on methods that don't return void.\n            The output value is appended to the return value.\n\n2021-02-26: murillo128, wsfulton\n            #1269 [Javascript] Fix handling of large positive unsigned long and\n            unsigned long long values.\n\n2021-02-24: tomleavy, yegorich, tungntpham\n            #1746 [Javascript] Add support for Node v12, v14 and v16.\n            SWIG support for Node is now for v6 and later only.\n\n2020-02-09: ZackerySpytz\n            #1872 Fix typos in attribute2ref macros.\n\n2020-10-10: wsfulton\n            [Javascript] Fix so that ccomplex.i interface to file can be used.\n\n2020-10-10: wsfulton\n            #252 complex can now be used as a C identifier and doesn't give a syntax error.\n\n2020-10-10: lpsinger\n            #1770 Correct C complex support.\n            _Complex is now parsed as a keyword rather than complex as per the C99 standard.\n            The complex macro is available in the ccomplex.i library file along with other\n            complex number handling provided by the complex.h header.\n\n2020-10-07: ZackerySpytz\n            [Python] #1812 Fix the error handling for the PyObject_GetBuffer() calls in\n            pybuffer.i.\n\n2020-10-07: treitmayr\n            #1824 Add missing space in director method declaration returning\n            const pointer.\n\n2020-10-07: adelva1984\n            #1859 Remove all (two) exceptions from SWIG executable.\n\n2020-09-25: wsfulton\n            [C#, Java] #1874 Add ability to change the modifiers for the interface\n            generated when using the %interface macros.\n\n            For C# use the 'csinterfacemodifiers' typemap.\n            For Java use the 'javainterfacemodifiers' typemap.\n\n            For example:\n\n              %typemap(csinterfacemodifiers) X \"internal interface\"\n\n2020-09-24: geefr\n            [C#] #1868 Fix wchar_t* csvarout typemap for member variable wrappers.\n\n2020-08-28: wsfulton\n            [Java] #1862 Fix crashes in swig_connect_director during director class construction\n            when using the director class from multiple threads - a race condition initialising\n            block scope static variables. The fix is guaranteed when using C++11, but most\n            compilers also fix it when using C++03/C++98.\n\n2020-08-16: wsfulton\n            [Python] Add missing initializer for member '_heaptypeobject::ht_module' when using\n            -builtin to complete Python 3.9 support.\n\n2020-08-16: wsfulton\n            [Python] Remove PyEval_InitThreads() call for Python 3.7 and later as Python calls\n            it automatically now. This removes a deprecation warning when using Python 3.9.\n\n2020-08-15: wsfulton\n            [Python] All Python examples and tests are written to be Python 2 and Python 3\n            compatible, removing the need for 2to3 to run the examples or test-suite.\n\n2020-08-13: wsfulton\n            [C#] Add support for void *VOID_INT_PTR for member variables.\n\n2020-07-29: chrisburr\n            #1843 [Python] Compilation error fix in SwigPyBuiltin_SetMetaType when using PyPy.\n\n2020-06-14: ZackerySpytz\n            #1642 #1809 Fix virtual comparison operators in director classes by removing an\n            incorrect space in the function name (for example, operator= = is now operator==).\n\nVersion 4.0.2 (8 Jun 2020)\n==========================\n\n2020-06-07  vigsterkr\n            [Ruby] #1717 Nil fix mangling strings\n\n2020-06-07  vadz\n            #1748 Fix doxygen comments quoting issue\n\n2020-06-07  munoah\n            #1800 Escape spaces in file paths for dependencies (-M -MM etc)\n\n2020-06-06  andreas-schwab\n            [Ruby] #1801 Fix encoding on big endian systems when wrapping std::wstring.\n\n2020-05-31  kwwette\n            [Octave] #1789 error handling improvements and return error code on exit for SWIG wrapped modules.\n\n2020-05-30  msteinbeck\n            [D] #1593 Replace broken imports when using newer versions of D.\n\n2020-05-29: ZackerySpytz\n            [Python] #1716 Performance improvements when converting strings when using Python >= 3.3.\n\n2020-05-28: ZackerySpytz\n            #1776 Quite dramatically decrease run times when generating very large interface files by changing\n            some internal memory pool sizes.\n\n2020-05-28: mcfarljm\n            #1788 Fix handling of Doxygen \\endlink command.\n\n2020-05-24: vapier\n            [Javascript] #1796 Fix pkg-config invocation in configure.\n\n2020-04-30: kwwette\n            [Octave] Fix exception raising for newer Octave versions\n            Since (at least) Octave 5.1.0, the Octave error() function now raises a C++ exception,\n            which if uncaught immediately exits a SWIG wrapper function, bypassing any cleanup code\n            that may appear after a \"fail:\" label. This patch adds a \"try { ... } catch(...) { }\"\n            block around the contents of SWIG wrapper functions to first execute the cleanup code\n            before rethrowing any exception raised. It is backward compatible with earlier versions\n            of Octave where error() does not raise an exception, which will still branch to the\n            \"fail:\" block to execute cleanup code if an error is encountered.\n\n            Note that the new \"try { ... } catch(...) { }\" block will localise any local variables\n            used in typemaps that were NOT declared through SWIG's %typemap(...) syntax, so it's\n            possible this could break existing SWIG wrappers which were implicitly sharing local\n            variables between typemaps. This can be fixed, however, by declaring local variables\n            which need to be shared between typemaps through SWIG's %typemap(...) syntax.\n\n2020-02-18: ryannevell\n            [Lua] #1728 Add support for LUA lightuserdata to SWIG_Lua_ConvertPtr.\n\n2020-02-18: dmach\n            [Ruby] #1725 Fix gcc -Wcatch-value warnings.\n\n2020-02-14: treitmayr\n            #1724 Fix wrapping of abstract user-defined conversion operators.\n\n2020-02-13: ddurham2\n            [Python] #1512 Fix memleak when using STL containers of shared_ptr objects.\n\n2020-02-06: wsfulton\n            [Python] #1673 #1674 Fix setting 'this' when extending a proxy class with __slots__.\n\n2020-01-31: vadz\n            [Ruby] #1651 Add std::auto_ptr<> typemaps.\n\n2020-01-31: ZackerySpytz\n            [Python] #1700 The Python C API functions PyBytes_AsStringAndSize() and\n            PyString_AsStringAndSize() are now checked for failure.\n\n2020-01-31: vadz\n            [Python] #1710 Fix crash parsing empty docstrings.\n\n2020-01-30: Alzathar\n            [R] #910 #914 Fix R memory leak on exception.\n\n2020-01-30: richardbeare\n            [R] #1511 Fix bug wrapping functions. These were previously incorrectly wrapped as if\n            they were variables. This happened when 'get' or 'set' was in the name of the function\n            or method, but sometimes also in some other circumstances. If you were using R\n            attribute syntax to access these methods, you'll need to switch to calling them as R\n            methods.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2020-01-24: etse-dignitas, wsfulton\n            [C#, D, Java] #1533 Fix upcasting for shared_ptr's of templated types.\n\n2020-01-16: mcfarljm\n            #1643 #1654 When using -doxygen, fix segfault when nameless parameters or vararg parameters\n            are used.\n\n2020-01-16: mcfarljm\n            #1632 #1659 Fix newline handling for doxygen \"///\" comments.\n\n2020-01-14: mcfarljm\n            #1647 #1656 Fix crash handling empty doxygen comments.\n\n2020-01-14: mcfarljm\n            #1608 Improve doxygen support.\n            - Add support for \\param[] commands such as: \\param[in].\n            - Optional arguments are marked as 'optional' in pydoc.\n            - Improve support for \\code commands so that other languages are supported as code blocks.\n              Support added for java, c and py.  For example Python: \\code{.py} ... \\endcode\n            - Fix doxygen handling of \\em and \\p tags for Python.\n\n2020-01-13: wsfulton\n            [Python] #1595 Python -builtin constructors silently ignored keyword arguments.\n            Instead of silently ignoring them, now a \"TypeError: f() takes no keyword arguments\"\n            exception is thrown if keyword arguments are used. Hence constructors and normal methods/\n            functions behave in the same way. Note, -keyword should be used with -builtin to obtain\n            keyword argument support.\n\n2020-01-05: jschueller shadchin\n            [Python] #1670 #1696 Add missing field initializers introduced in python 3.8:\n            tp_vectorcall and tp_print.\n\n2020-01-05: friedrichatgc\n            [Octave] #1688 Change swig_this() to use size_t instead of long for compatibility\n            with Windows 64 bit.\n\n2020-01-05: treitmayr\n            [Ruby] #1692 #1689 Add support for Ruby 2.7\n\n2019-12-30: treitmayr\n            [Ruby] #1653 #1668 Fix code generated when using -globalmodule option.\n\n2019-12-29: ZackerySpytz\n            [OCaml] #1686 Fix compilation errors with OCaml 4.09.0.\n\n2019-12-10: wsfulton\n            #1679 Fix parsing of C++11 identifiers with special meaning (final and override) when\n            they are used as part of the scope name of an identifier, such as a namespace name.\n\n2019-11-26: wsfulton\n            [C#] #1628 'out' or 'ref' used in a cstype typemap was not always stripped out in parts\n            of director code generation.\n\n2019-11-01: wsfulton\n            [Python] #1595 Fix bug in support for keyword arguments (kwargs feature or -keyword)\n            when using -builtin. The fix is in the argument error checking when wrapping zero\n            argument constructors only.\n\nVersion 4.0.1 (21 Aug 2019)\n===========================\n\n2019-08-20: TekuConcept\n            [Javascript] #1535 Add %native support to Javascript.\n\n2019-08-20: bkotzz\n            [Java] #1616 Add SWIG_JavaIllegalStateException to support throwing\n            java.lang.IllegalStateException from JNI code.\n\n2019-08-19: sjml\n            [Lua] #1596 tostring output changes to show the underlying C/C++ pointer.\n\n2019-08-08: rokups\n            [C#, Java] #1601 Fix invalid code generated for \"%constant enum EnumType.\n\n2019-08-07: wsfulton\n            [Python] Fix method overloading of methods that take STL containers of different\n            types. The following usage (using std::vector) would fail when using -builtin:\n\n              %include <std_string.i>\n              %include <std_vector.i>\n\n              %inline %{\n              struct X {};\n              %}\n\n              %template(VectorX) std::vector<X>;\n              %template(VectorInt) std::vector<int>;\n\n              %inline %{\n              using namespace std;\n              string VectorOverload(vector<X> v);\n              string VectorOverload(vector<int> v);\n              %}\n\n            The following would incorrectly fail:\n\n              s = VectorOverload([1, 2, 3])\n\n            With:\n\n              Traceback (most recent call last):\n                File \"runme3.py\", line 20, in <module>\n                  ret = VectorOverload([1, 2, 3])\n              TypeError: Wrong number or type of arguments for overloaded function 'VectorOverload'.\n                Possible C/C++ prototypes are:\n                  VectorOverload(std::vector< Number,std::allocator< Number > >)\n                  VectorOverload(std::vector< int,std::allocator< int > >)\n\n            The problem was due to some error handling that was not cleared during typechecking.\n            In this case an error was not cleared when the elements in the list failed the\n            typecheck for converting to X. Only occurs in Python 3+.\n\n            In some combinations of overloaded methods, the following type of error message would\n            occur:\n\n              RuntimeError: in sequence element 0\n\n              The above exception was the direct cause of the following exception:\n\n              Traceback (most recent call last):\n                File \"runme3.py\", line 23, in <module>\n                  check(VectorOverload(v), \"vector<X>\")\n              SystemError: <built-in function VectorOverload> returned a result with an error set\n\n2019-08-01: wsfulton\n            #1602 Fix regression in 4.0.0 where a template function containing a parameter\n            with the same name as the function name led to the parameter name used in the\n            target language being incorrectly modified.\n\n2019-07-29: wsfulton\n            Remove all generated files on error. Previously generated files were not removed,\n            potentially breaking Makefiles using file dependencies, especially when -Werror\n            (warnings as errors) was used.\n\n2019-07-23: smithx\n            [C#] #1530 #1532 Fix marshalling of std::wstring to C#.\n\n2019-07-18: gicmo\n            [Python] #1587 Python 3.8 support - remove use of deprecated PyObject_GC_UnTrack.\n\n2019-07-18: cher-nov\n            [Python] #1573 Generated Python code uses consistent string quoting style - double\n            quotes.\n\n2019-07-16: geefr\n            [C#] #616 #1576 Fix C# bool INPUT[], bool OUTPUT[], bool INOUT[] typemaps to marshall\n            as 1-byte.\n\n2019-07-12: vadz\n            [C#, Java] #1568 #1583 Fix std::set<> typemaps for primitive types.\n\n2019-07-12: vadz\n            #1566 #1584 Regression in 4.0.0 - fix missing value for first item of enums with\n            trailing comma.\n\n2019-07-11: mcfarljm\n            #1548 #1578 Fix segfault in Doxygen parser parsing empty lines in some commands like\n            \\code.\n\n2019-07-09: IsaacPascual\n            [C#, Java] #1570 Fix name of generated C#/Java classes for %interface macros\n            in swiginterface.i when wrapping nested C++ classes.\n\n2019-07-05: wsfulton\n            [Python] #1547 Whitespace fixes in Doxygen translated comments into pydoc comments\n            for Sphinx compatibility.\n\n2019-06-28: wsfulton\n            [MzScheme, OCaml] #1559 $arg and $input were incorrectly substituted in the\n            argout typemap when two or more arguments were present.\n\n2019-06-24: wsfulton\n            [Python, Ruby] #1538 Remove the UnknownExceptionHandler class in order to be\n            C++17 compliant as it uses std::unexpected_handler which was removed in C++17.\n            This class was intended for director exception handling but was never used by\n            SWIG and was never documented.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2019-06-06: bkotzz\n            [Java] #1552 Improve performance in Java std::vector constructor wrapper that takes\n            a native Java array as input.\n\n2019-06-03: olly\n\t    [Python] Fix regression in implicit_conv handling of tuples,\n\t    introduced in SWIG 4.0.0.  Fixes #1553, reported by Alexandre\n\t    Duret-Lutz.\n\n2019-05-24: wsfulton\n            [Octave] Fix detection of Octave on MacOS.\n\n2019-05-24: opoplawski\n            [Octave] #1522 Adapt OCTAVE_LDFLAGS for Octave 5.1.\n\n2019-05-22: ferdynator\n\t    [PHP] #1528 Don't add a closing '?>' PHP tag to generated files.\n\t    PSR-2 says it MUST be omitted for files containing only PHP.\n\nVersion 4.0.0 (27 Apr 2019)\n===========================\n\n2019-04-24: vadz\n            #1517 Fix crash if \"@return\" Doxygen tag was used on a node without any return type.\n\n2019-04-24: vadz\n            #1515 Fix parsing of enums with trailing comma when using -doxygen.\n\n2019-04-19: ianlancetaylor\n            [Go] #1055 When generating Go code, make -cgo the default. Add new -no-cgo option\n            to disable the default.\n\n2019-04-19: pbecherer\n            [Tcl] #1508 Fix Visual Studio 2015 and later compilation errors due to snprintf macro\n            definition.\n\n2019-04-09: wsfulton\n            [C#] Fix FxCop warning CA2002 in SWIGPendingException - a lock on a reference of\n            type 'Type'.\n\n2019-03-30: wsfulton\n            [Java, D] Add the parameters typemap attribute to the javadestruct,\n            javadestruct_derived, ddispose, ddispose_derived typemaps to mirror enhanced\n            flexibility in the csdisposing and csdisposing_derived (C#) typemaps. If provided\n            the contents are generated as the delete/dispose method's parameters declaration.\n\n2019-03-30: wsfulton\n            [C#] #421 Fix FxCop warning CA1063 by implementing the recommended Dispose methods for\n            the IDisposable interface. Previously just the Dispose() method was generated.\n            Now the Dispose() and Dispose(bool disposing) methods are generated.\n            Changes are required if custom \"csfinalize\", \"csdestruct\" or \"csdestruct_derived\"\n            typemaps are being used. Details in #421 on Github. SWIG will error out if one of\n            the \"csfinalize, \"csdestruct\" or \"csdestruct_derived\" typemaps are found. Example\n            error message:\n\n              foo.h:60: Error: A deprecated csfinalize typemap was found for Foo, please remove\n              it and replace all csdestruct, csdestruct_derived and csfinalize typemaps by the\n              csdispose, csdispose_derived, csdisposing and csdisposing_derived typemaps.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2019-03-25: Liryna\n            [C#] #1143 Add std_list.i for std::list support.\n            The C# std::list<T> wrappers are made to look and feel like a C#\n            System.Collections.Generic.LinkedList<> collection.\n            The IEnumerable<> interface is implemented in the proxy class.\n            The ICollection<> interface can also be implemented to provide enhanced functionality\n            whenever a C++ operator== is available. This is the case for when T is a\n            primitive type or a pointer. If T does define an operator==, then use the\n            SWIG_STD_LIST_ENHANCED macro to obtain this enhanced functionality, for example:\n\n              SWIG_STD_LIST_ENHANCED(SomeNamespace::Klass)\n              %template(ListKlass) std::list<SomeNamespace::Klass>;\n\n2019-03-18: richardbeare\n            [R] #1328 Non-trivial enums are working now. The enum values are now obtained from\n            the C/C++ layer. const reference enums and C++11 enum classes are also now working.\n\n2019-03-14: mochizk\n            [Javascript] #1500 Fix compilation errors due to deprecating V8 API in Node.js.\n            New V8 API is used if node.js >= v10.12, or if V8 >= v7.0.\n\n2019-03-12: vadz\n            [C#] #1495 Add std_set.i for std::set support.\n\n2019-03-11: dirteat,opoplawski\n            [Octave] Fix compilation errors in Octave 5.1.\n\n              error: format not a string literal and no format arguments [-Werror=format-security]\n\n2019-02-28: wsfulton\n            [Java] std::vector improvements for types that do not have a default constructor.\n\n            The std::vector wrappers have been changed to work by default for elements that are\n            not default insertable, i.e. have no default constructor. This has been achieved by\n            not wrapping:\n\n              vector(size_type n);\n\n            Previously the above had to be ignored via %ignore.\n\n            If the above constructor is still required it can be added back in again via %extend:\n\n              %extend std::vector {\n                vector(size_type count) { return new std::vector< T >(count); }\n              }\n\n            Alternatively, the following wrapped constructor could be used as it provides near-enough\n            equivalent functionality:\n\n              vector(jint count, const value_type& value);\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2019-02-25: wsfulton\n            [Python] Fix compile errors wrapping overloaded functions/constructors where a vararg\n            function is declared after a non-vararg function.\n\n2019-02-23: zphensley42\n            Use fully qualified name 'java.lang.Object' instead of 'Object' in generated code to\n            avoid clashes with wrapped C++ classes called 'Object'.\n\n2019-02-23: gtbX\n            [Java] #1035 Add (const char *STRING, size_t LENGTH) typemaps in addition to the non-const\n            typemaps (char *STRING, size_t LENGTH) which does not attempt to write back to the const\n            string.\n\n2019-02-22: tamuratak\n            [Ruby] #984 Add support for RTypedData introduced in Ruby 1.9.3.\n\n2019-02-22: ZackerySpytz\n            #1483 Fix compilation failures when a director class has final methods.\n\n2019-02-21: wsfulton\n            [Java] #1240 Suppress Java 9 deprecation warnings on finalize method.\n\n2019-02-21: ZackerySpytz\n            #1480 Fix some rejections of valid floating-point literals.\n\n2019-02-19: wsfulton\n            #1475 Fix regression parsing gcc preprocessor linemarkers in the form:\n\n            # linenum filename flags\n\n2019-02-18: jakecobb\n            [Python] #945 #1234 Elements in std::vector memory access fix.\n\n            Accessing an element in a std::vector obtains a reference to the element via an\n            iterator pointing to the element in the container. If the vector is garbage collected,\n            the SWIG wrapper containing the pointer to the element becomes invalid. The fix is\n            to obtain a back-reference to the container by the wrapper to the element in the Python\n            layer to prevent the garbage collector from destroying the underlying container.\n\n2019-02-17: wsfulton\n            Fix typemap matching to expand template parameters when the name contains\n            template parameters. In the %typemap below the type is T and the name is X<T>::make\n            and the name now expands correctly to X< int >::make\n\n              template<typename T> struct X {\n                %typemap(out) T X<T>::make \"...\"\n                T make();\n              };\n\n              %template(Xint) X<int>;\n\n2019-02-16: wsfulton\n            Fix parser error containing multiple #define statements inside an enum.\n\n            The second #define fails to parse:\n\n              enum FooEnum {\n                ENUM1 = 0,\n                ENUM2 = 1,\n\n              #define MACRO_DEF1 \"Hello\"\n              #define MACRO_DEF2 \"World!\"\n\n                ENUM3 = 2,\n                ENUM4 = 3,\n              };\n\n            Bug mentioned at https://sourceforge.net/p/swig/patches/333/\n\n2019-02-14: wsfulton\n            Add some missing copy constructors into STL containers.\n\n2019-02-14: bkotzz\n            [Java] #1356 Add STL containers:\n              std::unordered_map\n              std::unordered_set\n              std::set\n\n2019-02-14: bkotzz\n            [Java] #1356 std::map wrappers have been modified. Now the Java proxy class\n            extends java.util.AbstractMap. The std::map container looks and feels much like\n            a java.util.HashMap from Java.\n\n            A few members have changed their names. If the old method signatures are needed,\n            then copy std_map.i from swig-3.0.12 and use that instead. Alternatively,\n            add the old missing methods to the new methods by using the following %proxycode:\n\n              %extend std::map {\n              %proxycode %{\n                // Old API\n                public boolean empty() {\n                  return isEmpty();\n                }\n                public void set($typemap(jboxtype, K) key, $typemap(jboxtype, T) x) {\n                  put(key, x);\n                }\n                public void del($typemap(jboxtype, K) key) {\n                  remove(key);\n                }\n                public boolean has_key($typemap(jboxtype, K) key) {\n                  return containsKey(key);\n                }\n              %}\n              }\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2019-02-13: ZackerySpytz\n            #1469 Add support for C++17 hexadecimal floating literals.\n\n2019-02-11: wsfulton\n            [OCaml] #1437 OCaml has been give the 'Experimental' language status. The examples work\n            and most of the test-suite is also working, so it is quite close to being a 'Supported' language.\n\n2019-02-10: ZackerySpytz\n\t    #1464 Add support for C++14 binary integer literals.\n\n2019-02-10: ZackerySpytz\n\t    #1450 Add support for C++11 UCS-2 and UCS-4 character literals. Also, add support for\n            C++17 UTF-8 character literals.\n\n2019-02-10: wsfulton\n\t    [MzScheme] #1437 MzScheme/Racket is now an 'Experimental' language. The examples work\n            and a large portion of the test-suite is also working.\n\n2019-02-10: wsfulton\n\t    [MzScheme] Destructor wrappers were not being generated.\n\n2019-02-10: wsfulton\n\t    [MzScheme] Static variable wrappers fixed - $argnum was not expanded.\n\n2019-02-10: sethrj\n\t    #1452 Fix %apply for anonymous template instantiations\n\n2019-02-09: olly\n\t    [PHP] Fix access to already released memory during PHP module\n\t    shutdown, which often didn't cause visible problems, but could\n\t    result in segmentation faults, bus errors, etc.  Fixes #1170,\n\t    reported by Jitka Plesníková.\n\n2019-02-09: olly\n\t    [PHP] A renamed constructor is now wrapped as a static method in\n\t    PHP.\n\n2019-02-08: olly\n\t    [PHP] Don't generate code which references $r when $r hasn't been\n\t    defined.  This could happen in overloaded methods which returned\n\t    void and took at least one const std::string& parameter.\n\n2019-02-08: olly\n\t    [PHP] The generated code is now compatible with PHP 7.3, and the\n\t    testsuite now runs cleanly with this version too.\n\n2019-02-05: wsfulton\n            #1437 SWIG now classifies the status of target languages into either 'Experimental' or\n            'Supported'. This status is provided to indicate the level of maturity to expect when using\n            a particular target language as not all target languages are fully developed. Details are\n            in the Introduction.html chapter of the documentation.\n\n2019-02-04: wsfulton\n\t    [CFFI] #1447 Common Lisp CFFI has been disabled as a target language in SWIG as part of a\n            clean up to remove target languages that have been neglected/not functional.\n\n2019-02-04: wsfulton\n\t    [Allegrocl] #1447 Allegro Common Lisp has been disabled as a target language in SWIG as part of a\n            clean up to remove target languages that have been neglected/not functional.\n\n2019-02-04: wsfulton\n\t    [Chicken] #1447 CHICKEN has been disabled as a target language in SWIG as part of a\n            clean up to remove target languages that have been neglected/not functional.\n\n2019-02-04: wsfulton\n\t    [CLISP] #1447 GNU Common Lisp has been disabled as a target language in SWIG as part of a\n            clean up to remove target languages that have been neglected/not functional.\n\n2019-02-04: wsfulton\n\t    [S-EXP] #1447 Common Lisp S-Exp has been disabled as a target language in SWIG as part of a\n            clean up to remove target languages that have been neglected/not functional.\n\n2019-02-04: wsfulton\n\t    [UFFI] #1447 Common Lisp UFFI has been disabled as a target language in SWIG as part of a\n            clean up to remove target languages that have been neglected/not functional.\n\n2019-02-04: wsfulton\n\t    [Pike] #1447 Pike has been disabled as a target language in SWIG as part of a\n            clean up to remove target languages that have been neglected/not functional.\n\n2019-02-04: wsfulton\n\t    [Modula3] #1447 Modula3 has been disabled as a target language in SWIG as part of a\n            clean up to remove target languages that have been neglected/not functional.\n\n2019-02-02: ahnolds\n\t    [Python] Documentation enhancements for Python:\n\n            #728 Fixed the handling of autodoc when using -fastproxy.\n\n            #1367 Added documentation to wrapped member variables using the\n            property(... doc=\"...\") construct.\n\n            Only show a single documentation entry for functions with default arguments when\n            using autodoc.\n\n            Fixed a bug where a cached doxygen docstring could be deleted while still in use,\n            causing swig to segfault.\n\n2019-01-31: olly\n\t    SWIG now requires a target language to be specified instead of\n\t    defaulting to wrapping for Tcl.  Specifying swig --help without\n\t    a target language now just shows the generic help.  The -nolang\n\t    option has been removed.\n\n2019-01-28: ZackerySpytz\n            [OCaml] #1429 Remove support for OCaml versions < 3.12.0.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2019-01-22: vadz\n            [Ruby, Octave] #1424 Improve autodoc parameter naming.\n\n2019-01-22: vadz\n            [Python] #1271 #1423 Always include default parameter values in autodoc strings.\n\n2019-01-19: vadz\n            #1272, #1421 When a function's parameter is a keyword, the name of the paramater is\n            no longer simply changed to argN, where N is the argument number. Instead the\n            parameter name is changed to the renaming rules for keywords that normally apply to\n            symbols such as classes/functions etc. Note that unlike other symbol renaming,\n            parameter renaming does not issue a warning when the parameter is renamed. This\n            change only affects languages where the parameter names are actually used, for example,\n            Java function parameter lists in the proxy class or Python documentation comments.\n\n2019-01-18: wsfulton\n            #1420 Fix gdb debugger functions 'swigprint' and 'locswigprint' from swig.gdb to\n            work with newer versions of gdb-8. Fixes errors when debugging SWIG source with gdb:\n\n              (gdb) swigprint n\n              Undefined command: \"Printf\".  Try \"help\".\n\n2019-01-16: wsfulton\n            Python static method wrapper changes\n\n            - Static method wrappers were using the 'fastproxy' approach by default.\n              This is inconsistent with instance method wrappers. The fastproxy approach\n              is now turned off by default to be consistent with instance methods.\n              Static method wrappers can now also be controlled using the -fastproxy and\n              -olddefs options.\n\n              Example:\n\n                struct Klass {\n                  static int statmethod(int a = 2);\n                };\n\n              generates by default:\n\n              class Klass(object):\n                  ...\n                  @staticmethod\n                  def statmethod(a=2):\n                      return _example.Klass_statmethod(a)\n\n              instead of the following (which can be restored by using -fastproxy):\n\n                class Klass(object):\n                  ...\n                  statmethod = staticmethod(_example.Klass_statmethod)\n\n              - Modernise wrappers for static methods to use decorator syntax - @staticmethod.\n\n              - Add missing runtime test for static class methods and using the actual class method.\n\n2019-01-12: ZackerySpytz\n            [OCaml] #1403 #1194 Fix compilation problems for OCaml >= 4.03.0 due to OCaml using\n            int64_t instead of int64.\n\n2019-01-11: ZackerySpytz\n            [OCaml] #1400 Fix the getters and setters of non-static member variables.\n\n2019-01-07: wsfulton\n            #358 Add VOID to windows.i\n\n2019-01-05: wsfulton\n            #948 #1019 #1273 Fix for C++11 raw strings where the delimiters were mistakenly left\n            in the string contents in situations where the string was copied into generated code.\n            For example, %constant, the \"docstring\" feature and for C#/Java/D constants turned on\n            with %javaconst/%csconst/%dmanifestconst.\n\n2019-01-05: wsfulton\n            [Ruby] #538. Fix Ruby support for %feature(\"docstring\").\n\n2019-01-03: wsfulton\n            #1202 Fix overloading of non-pointer class types in scripting languages when overloaded\n            with a pointer and a NULL scripting language equivalent is used, eg None in Python.\n\n            The implementation changes the SWIGTYPE, SWIGTYPE& and SWIGTYPE&& typecheck typemaps to\n            prevent accepting a conversion to a NULL pointer.\n\n2019-01-03: ZackerySpytz\n            [OCaml] #1386 Fix the OCaml examples and test suite for out-of-source builds.\n\n2019-01-01: wsfulton\n            [Python] #639 remove duplicate proxy method definitions for global function wrappers.\n\n            Global functions previously generated two definitions, eg:\n\n              def foo():\n                  return _example.foo()\n              foo = _example.foo\n\n            The first definition is replaced by the second definition and so the second definition\n            is the one used when the method is actually called. Now just the first definition is\n            generated by default and if the -fastproxy command line option is used, just the second\n            definition is generated. The second definition is faster as it avoids the proxy Python\n            method as it calls the low-level C wrapper directly. Using both -fastproxy and -olddefs\n            command line options will restore the previously generated code as it will generate both\n            method definitions.\n\n            With this change, the wrappers for global C/C++ functions and C++ class methods now work\n            in the same way wrt to generating just a proxy method by default and control via\n            -fastproxy/-olddefs options.\n\n2018-12-20: hasinoff,wsfulton\n            [Java] #1334 Set Java thread name to native thread name when using directors.\n\n            Default is to use name \"Thread-XXX\" and is still works like this by default. However,\n            adding the following will turn on the thread name setting (works for more recent\n            versions of Linux and MacOS):\n\n            %begin %{\n            #define SWIG_JAVA_USE_THREAD_NAME\n            %}\n\n2018-12-20: chlandsi\n            [Python] #1357. Fix overriding __new__ in Python 3.6.\n\n            Fixes SystemError: Objects/tupleobject.c:81: bad argument to internal function\"\n\n2018-12-16: wsfulton\n            [Python] #848 #1343 The module import logic has changed to stop obfuscating real ImportError\n            problems. Only one import of the low-level C/C++ module from the pure Python module is\n            attempted now. Previously a second import of the low-level C/C++ module was attempted\n            after an ImportError occurred and was done to support 'split modules'. A 'split module' is\n            a configuration where the pure Python module is a module within a Python package and the\n            low-level C/C++ module is a global Python module. Now a 'split module' configuration is\n            no longer supported by default. This configuration can be supported with a simple\n            customization, such as:\n\n              %module(package=\"mypackage\", moduleimport=\"import $module\") foo\n\n            or if using -builtin:\n\n              %module(package=\"mypackage\", moduleimport=\"from $module import *\") foo\n\n            instead of\n\n              %module(package=\"mypackage\") foo\n\n            See the updated Python chapter titled \"Location of modules\" in the documentation.\n\n2018-12-11: tlby\n            [Perl] #1374 repair EXTEND() handling in typemaps\n\n2018-12-06: vadz\n            #1359 #1364 Add missing nested class destructor wrapper when the nested class is\n            inside a template. Removes associated bogus 'Illegal destructor name' warning. Only\n            occurred when the nested class' destructor is explicitly specified.\n\n2018-12-04: adr26\n            [Python] #1368 #1369 Access Violation in tp_print caused by mismatched Python/extension\n            CRT usage\n\n            Remove all use of tp_print, as this API uses a FILE*, which can be\n            mismatched when modules are built with different C libraries from\n            the main python executable.\n\n            This change also brings consistent output between Python 2 and 3 for the 'cvar' SWIG\n            object (that contains the global variables) and SWIG packed objects (such as callback\n            constants).\n\n2018-12-04: wsfulton\n            [Python] #1282 Fix running 'python -m'  when using 'swig -builtin'\n\n            Similar to the earlier PEP 366 conforming fix for non-builtin.\n\n2018-11-29: adr26\n            [Python] #1360 Leak of SWIG var link object\n\n            Fix reference counting on _SWIG_globals to allow var link to be freed on module unload.\n\n2018-11-28: wsfulton\n            [Python] When using -builtin, the two step C-extension module import is now\n            one step and the wrapped API is only available once and not in an underlying\n            module attribute like it is without -builtin. To understand this, consider a\n            module named 'example' (using: %module example). The C-extension is compiled into\n            a Python module called '_example' and a pure Python module provides the actual\n            API from the module called 'example'. It was previously possible to additionally\n            access the API from the module attribute 'example._example'. The latter was an\n            implementation detail and is no longer available. It shouldn't have been used, but\n            if necessary it can be resurrected using the moduleimport attribute described in the\n            Python chapter of the documentation. If both modules are provided in a Python\n            package, try:\n\n              %module(moduleimport=\"from . import _example\\nfrom ._example import *\") example\n            or more generically:\n              %module(moduleimport=\"from . import $module\\nfrom .$module import *\") example\n\n            and if both are provided as global modules, try:\n\n              %module(moduleimport=\"import _example\\nfrom _example import *\") example\n            or more generically:\n              %module(moduleimport=\"import $module\\nfrom $module import *\") example\n\n            The module import code shown will appear in the example.py file.\n\n2018-11-24: vadz\n            #1358 Fix handling of abstract base classes nested inside templates\n\n            Correct detecting of whether a derived class method overrides a pure virtual\n            base class method when both classes are nested inside a template class: this\n            notably didn't work correctly for methods taking parameters of the base class\n            type.\n\n2018-11-22: rupertnash\n            [Python] #1282 Make generated module runnable via python -m (PEP 366 conforming)\n\n            Previously any SWIG generated modules in a package would fail with an ImportError\n            when using 'python -m' for example 'python -m mypkg.mymodule'.\n\n            This fix also allows the SWIG generated module to be placed into a directory and\n            then renamed __init__.py to convert the module into a package again. This ability\n            stopped working in swig-3.0.9. However, only Python 2.7 or 3.3 and later work. If\n            Python 3.2 support is needed, use moduleimport in %module to customise the import\n            code.\n\n2018-11-13: wsfulton\n            #1340 Remove -cppcast and -nocppcast command line options (this was an option\n            available to the scripting language targets).\n\n            The -cppcast option is still turned on by default. The -nocppcast option\n            to turn off the use of c++ casts (const_cast, static_cast etc) has been\n            removed. However, defining SWIG_NO_CPLUSPLUS_CAST will still generate C casts\n            instead of C++ casts for C++ wrappers.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2018-11-13: wsfulton\n            [Python] #1340 Remove -outputtuple and -nooutputtuple command line options.\n\n            Both the command line and %module options of the same name have been\n            removed. These were undocumented. The -outputtuple option returned a\n            Python tuple instead of a list, mostly typically in the OUTPUT\n            typemap implementations.\n\n            It unclear why a tuple instead of a list return type is needed and\n            hence this option has been removed as part of the simplification of\n            the SWIG Python command line options for SWIG 4.\n\n2018-11-13: wsfulton\n            [Python] #1340 Remove -noproxyimport command line option.\n\n            This option turned off the insertion of Python import statements\n            derived from a %import directive. For example given:\n\n              %module module_b\n              %import \"module_a.i\"\n\n            then module_b.py will contain:\n\n              import module_a\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2018-10-29: AlexanderGabriel\n\t    [PHP] The following PHP7 reserved keywords are now only renamed by\n\t    SWIG when used as function names in the API being wrapper:\n\t    __halt_compiler array die echo empty eval exit include include_once\n\t    isset list print require require_once return unset\n\n2018-10-22: olly,wsfulton\n            [Python] #1261 #1340 Turn on many optimisation options by default and rationalise the\n            number of command line options.\n\n            There were an unnecessary number of command line options and many of these have now\n            been removed in a drive for simplification. Some were needed to support older versions\n            of Python (2.6 and earlier).\n\n            Many of the options could be turned on individually and when using -O. Previously -O\n            resulted in turning on a set of options:\n\n              -modern -fastdispatch -nosafecstrings -fvirtual -noproxydel\n              -fastproxy -fastinit -fastunpack -fastquery -modernargs -nobuildnone\n\n            Now -O results in turning on this reduced set:\n\n              -fastdispatch -fastproxy -fvirtual\n\n            The following options are now on by default, a deprecated warning is displayed if they\n            are used:\n              -fastinit     Class initialisation code done in C/C++ rather than in Python code.\n              -fastquery    Python dictionary used for lookup of types.\n              -fastunpack   Faster unpacking of function arguments in C/C++ wrappers.\n              -modern       Use Python 2.3 features such as object and property.\n              -modernargs   Use Python 2.3 C APIs for unpacking arguments in tuples.\n              -noproxydel   Stop generating a proxy __del__ method for backwards compatibility.\n              -safecstrings No discernable difference\n\n            The following options have been removed altogether:\n              -aliasobj0\n              -buildnone\n              -classptr\n              -new_repr\n              -newrepr\n              -noaliasobj0\n              -nobuildnone\n              -nocastmode\n              -nodirvtable\n              -noextranative\n              -nofastinit\n              -nofastproxy\n              -nofastquery\n              -nomodern\n              -nomodernargs\n              -nooutputtuple\n              -nosafecstrings\n              -old_repr\n              -oldrepr\n              -proxydel\n\n            -new_vwm is no longer supported. Use the -newvwm alias instead.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2018-10-22: olly\n            [Python] #1261 Remove command line option no longer needed as Python 2.3 and earlier\n            are no longer supported:\n\n              -classic\n\n2018-10-09: wsfulton\n            [D, Go, Guile, Lua, Mzscheme, Ocaml, Perl5, Php, Scilab, Tcl]\n            Allow wrapping of std::map using non-default comparison function.\n\n2018-10-09: vadz\n            [Java] #1274 Allow wrapping of std::map using non-default comparison function.\n\n2018-10-04: wsfulton\n            [Python] #1126 Fix C default arguments with -builtin and -fastunpack and -modernargs.\n            Problem occurred when there is just one (defaulted) parameter in the parameter list.\n\n2018-09-24: wsfulton\n            [Python] #1319 C++11 hash tables implementation is finished now (including for -builtin):\n              std::unordered_map\n              std::unordered_set\n              std::unordered_multimap\n              std::unordered_multiset\n\n2018-09-21: wsfulton\n            [Python] Fix when using -builtin and wrapping std::map, std::set, std::unordered_map or\n            std::unordered_set to ensure __contains__ is called. This is a wrapper for the STL\n            container's find method. Without it, Python will do its own slower sequence search.\n\n2018-09-19: wsfulton\n            [Python] Fix functors (wrapped as __call__) when using -builtin -modern -fastunpack.\n\n2018-09-02: andreas.gaeer,tkrasnukha\n            [Python] #1321 Fix assert in PyTuple_GET_SIZE in debug interpreter builds of python-3.7\n            when calling tp_new.\n\n2018-09-01: ChristopherHogan\n            [Guile] #1288 Fix garbage collection for guile >= 2.0.12.\n\n2018-08-31: wsfulton\n            [Python] #1319 C++11 hash tables support:\n              std::unordered_map\n              std::unordered_set\n              std::unordered_multimap\n              std::unordered_multiset\n            is now compiling and working (sorting using -builtin not fully functional yet though).\n\n2018-08-20: wkalinin\n            #1305 Fix nested structure symbol tables in C mode to fix member name conflicts\n            in different structs with the same nested struct member name.\n\n2018-08-18: wsfulton\n            [Python] #688 Fix makefile recursion when running python test-suite.\n\n2018-08-18: wsfulton\n            [Python] #1310 Re-implement Python -fastproxy option.\n\n            The previous implementation failed with Python 3 and abstract base clases.\n            The new implementation replaces the Python 2 implementation using\n            new.instancemethod with the C API PyMethod_New to match the equivalent Python 3\n            implementation which uses PyInstanceMethod_New.\n\n            The new approach runs slightly faster. See #1310.\n\n2018-08-12: gmazzamuto\n            [Python] #1283 Update pybuffer.i library to use new-style Python buffer C API.\n\n2018-08-12: brianhatwood,wsfulton\n            [Java] #1303 #1304 Fix crash in directors when using OUTPUT and INOUT typemaps in typemaps.i and\n            passing NULL pointers in C++ to director method overloaded and implemented in Java.\n\n2018-08-10: wsfulton\n            [Python] #1293 Improve TypeError message inconsistencies between default and fastdispatch\n            mode when handling overloaded C++ functions. Previously the error message did not always\n            display the possible C/C++ prototypes in fastdispatch mode.\n\n2018-08-02: furylynx,jacobwgillespie,p2k\n            [Javascript] #1290, #968. Add support for NodeJS versions 2-10.\n\n2018-07-31: wsfulton\n            [Python] #1293 Overloaded C++ function wrappers now raise a TypeError instead\n            of NotImplementedError when the types passed are incorrect. This change means\n            there is now consistency with non-overloaded function wrappers which have always\n            raised TypeError when the incorrect types are passed. The error message remains\n            the same and is for example now:\n\n              TypeError: Wrong number or type of arguments for overloaded function 'f'.\n                Possible C/C++ prototypes are:\n                  f(int)\n                  f(char const *)\n\n            instead of:\n\n              NotImplementedError: Wrong number or type of arguments for overloaded function 'f'.\n                Possible C/C++ prototypes are:\n                  f(int)\n                  f(char const *)\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2018-06-23: wsfulton\n            [Python] #718 Fix pythonnondynamic feature for modern classes\n\n            Fixes nondynamic mode when an instance variable is set with the same\n            name as a class variable in a class derived from a SWIG proxy class.\n            This corner case set an instance variable instead of raising an AttributeError.\n\n            Also fix %pythonnondynamic in Python 3 with -modern. The metaclass\n            containing the implementation was previously not being applied in Python 3.\n\n2018-07-17: petrmitrichev,wsfulton\n            [Python] #1275 #1279 Initialize function-local statics (singletons) that call Python\n            code during Python module initialization in order to avoid deadlocks with subsequent\n            multi-threaded usage.\n\n2018-06-15: wsfulton\n            [Python] Fix seg fault using Python 2 when passing a Python string, containing\n            invalid utf-8 content, to a wstring or wchar * parameter. A TypeError is thrown instead, eg:\n\n              %include <std_wstring.i>\n              void instring(const std::wstring& s);\n\n              instring(b\"h\\xe9llooo\") # Python\n\n2018-06-15: wsfulton\n            [Python] Python 3.7 support: Replace use of deprecated PyUnicode_GetSize with\n            PyUnicode_GetLength to remove deprecated warnings compiling the C/C++ wrappers.\n\n2018-06-12: wsfulton\n            [Python] Python 3.7 support: The %pythonabc feature in pyabc.i now uses base classes\n              collections.abc.MutableSequence\n              collections.abc.MutableMapping\n              collections.abc.MutableSet\n            instead of\n              collections.MutableSequence\n              collections.MutableMapping\n              collections.MutableSet\n            as the latter are deprecated in Python 3.7 and are due to be removed in Python 3.8.\n            The classes in collections.abc.* are available from Python 3.3 onwards. If you\n            require support for Python 3.2, then copy the pyabc.i file and modify by removing\n            the few instances of the .abc sub-module.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2018-06-12: olly,wsfulton\n            [Python] #701 Remove support for Python versions < 2.7 and 3.0 and 3.1.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2018-06-11: olly\n            [Python] Fix new GCC8 warnings in generated code by avoiding casts\n            between incompatible function types where possible, and by\n            suppressing the warning when it's due to the design of Python's C\n            API.  Fixes #1259.\n\n2018-06-08: philippkraft\n\t    [Python] Stop exposing <CLASS>_swigregister to Python.  It's not\n\t    useful for user Python code to call this, and it just clutters the\n\t    API unnecessarily.  Fixes #1225.\n\n2018-06-07: cmfoil, kabbi, Jamie Kirkpatrick, markok314, vadz, wsfulton, Yann Diorcet\n            #170 Doxygen documentation support added. This allows translation of Doxygen comments\n            into JavaDoc and PyDoc documentation. It is enabled via the -doxygen command line\n            option. See the Doxygen.html chapter in the documentation for further information.\n\n2018-06-07: olly\n\t    [PHP] We've finally removed support for %pragma(php4) which was\n\t    deprecated back in 2008.  Use %pragma(php) instead, which has been\n\t    supported since at least 2005.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2018-06-07: olly\n\t    [PHP5] Support for PHP5 has been removed.  PHP5 is no longer\n\t    actively supported by the PHP developers and security support for\n\t    it ends completely at the end of 2018, so it doesn't make sense\n\t    to include support for it in the upcoming SWIG 4.0.0 release.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2018-06-06: olly\n\t    [Lua] Improve configure probes for Lua headers and libs used in testsuite.\n\n2018-05-15: kwwette\n            [Octave] add support for version 4.4\n            - Should not introduce any user-visible incompatibilities\n\n2018-05-15: wsfulton\n            [C#, D, Java] Fix lookup of csconstruct, dconstruct and javaconstruct typemaps.\n            The C++ namespace was previously ignored when looking up the typemap.\n\n2018-05-15: wsfulton\n            [Javascript] Fix generated C++ code when using %nspace on namespaces that are more\n            than two levels deep.\n\n2018-05-14: wsfulton\n            Issue #1251 Add support for C++17 nested namespace definitions,\n            for example:\n              namespace A::B { ... }\n\n2018-05-11: wsfulton\n            [C#, D, Java] Add support so that the %csmethodmodifiers, %dmethodmodifiers,\n            %javamethodmodifiers can modify the method modifiers for the destructor wrappers\n            in the proxy class: dispose, Dispose, delete. With this feature, it is now possible\n            to make a C# proxy class sealed, eg when wrapping a class X, the virtual method modifiers\n            can be removed using:\n\n              %typemap(csclassmodifiers) X \"public sealed class\"\n              %csmethodmodifiers X::~X \"public /*virtual*/\";\n\n2018-04-18: olly\n\t    [Python] Suppress new pycodestyle warning:\n\t    E252 missing whitespace around parameter equals\n\n2018-04-07: goatshriek\n            [Ruby] #1213 Fix ruby %alias directive for global C/C++ functions.\n\n2018-04-03: olly\n\t    [Ruby] Fix to pass Qnil instead of NULL to rb_funcall(), which silences GCC\n\t    -Wconversion-null warning (on by default with recent GCC).\n\n2018-03-09: wsfulton\n            [Java] #1184 Fix swigReleaseOwnership() and swigTakeOwnership() regression\n            for non-director classes. Restores a dynamic_cast which was previously removed.\n\n2018-03-07: llongi\n\t    Github PR #1166 - Fix preprocessor handling of macros with commas\n\t    in a // comment.\n\n2018-02-18: JPEWdev\n            Patch #1164 - Add support for a command-line options file, also sometimes\n            called a response file. This is useful if the command-line options exceed\n            the system command-line length limit. To use, put the command-line options\n            into a file, then provide the file name prefixed with @, for example using\n            a file called args.txt:\n\n              swig @args.txt\n\n2018-02-11: wsfulton\n            [Javascript] #1187 Fix compilation error wrapping std::complex via\n            std_complex.i.\n\n2018-01-30: smarchetto\n            [Scilab] add type name argument in SWIG_ptr() function to cast from pointer address to typed pointers\n\n2018-01-16: wsfulton\n            Expressions following a preprocessor directive must now be separated by whitespace\n            or non-numeric characters. This syntax change makes the SWIG preprocessor work like\n            the C preprocessor in this area.\n\n            For example, the following code used be accepted as valid syntax:\n              #if1\n              #define ABC 123\n              #endif\n\n            Now you get an error:\n              example.h:1: Error: Unknown SWIG preprocessor directive: if1 (if this is a block of\n              target language code, delimit it with %{ and %})\n              example.h:3: Error: Extraneous #endif.\n\n            The following is the correct syntax:\n              #if 1\n              #define ABC 123\n              #endif\n\n            The following of course also works:\n              #if(1)\n              #define ABC 123\n              #endif\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2018-01-15: wsfulton\n            Fix issue #1183. Floating point exception evaluating preprocessor expressions\n            resulting in division by zero.\n\n2018-01-14: wsfulton\n            Fix issue #1172. Seg fault parsing invalid exponents in the preprocessor.\n\n2018-01-12: Liryna\n            [C#] Patch #1128. Add ToArray function to std::vector wrappers.\n\n2018-01-12: wsfulton\n            [Java] Fix issue #1156. Add missing throws clause for interfaces when using the\n            %interface family of macros.\n\n2018-01-05: wsfulton\n            Fix default arguments using expressions containing -> syntax error. Problem reported on\n            swig-user mailing list.\n\n2017-12-30: wsfulton\n            [Python] Replace pep8 with pycodestyle for checking the Python code style when\n            running Python tests.\n\n2017-12-30: davedissian\n            Fixed a symbol lookup issue when encountering a typedef of a symbol from the tag\n            namespace to the global namespace when the names are identical, such as 'typedef\n            struct Foo Foo;'.\n\n2017-12-13: wsfulton\n            [Perl] add missing support for directorfree typemaps.\n\n2017-12-13: wsfulton\n            Issue #1167 Fix directorout typemaps which were causing undefined behaviour when\n            returning pointers by reference.\n\n2017-12-08: olly\n\t    [PHP] Use ZEND_MODULE_GLOBALS_ACCESSOR to access globals so the\n\t    generated code builds when PHP was built with ZTS enabled.\n\n2017-12-04: wsfulton\n            [Python] Add missing checks for failures in calls to PyUnicode_AsUTF8String. Previously a\n            seg fault could occur when passing invalid UTF8 strings (low surrogates), eg passing\n            u\"\\udcff\" to the C layer (Python 3).\n\n2017-11-24: joequant\n\t    [R] Fix #1124 and return R_NilValue for null pointers\n\n2017-11-29: wsfulton\n            [Java] director exception handling improvements.\n\n            When a director method throws an exception and it is caught by DirectorException\n            and passed back to Java using Swig::DirectorException::throwException, the Java\n            stack trace now contains the original source line that threw the exception.\n\n            Deprecate Swig::DirectorException::raiseJavaException, please replace usage with\n            Swig::DirectorException::throwException.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2017-10-26: wsfulton\n            Add support for C++11 ref-qualifiers when using directors.\n\n2017-10-26: wsfulton\n            Fix generated code when using directors and methods returning const ref pointers.\n\n2017-10-26: wsfulton\n            [C#, D, Java, Octave, R, Scilab] Port director typemaps to these additional languages.\n            Issue #700.\n\n2017-10-26: radarsat1\n            [Ruby Python] Patch #1029 - Correct handling of null using directors and shared_ptr.\n\n2017-10-10: joequant\n\t    [R] pass enum expressions to R.  This will generate\n\t    incorrect files when there is an arithmetic expression\n\t    in the enum, but this is better than silently generating\n\t    incorrect code\n\n2017-10-09: olly\n\t    [PHP] Fix incorrect wrapper code generated when there's a\n\t    combination of overloading, parameters with a default value\n\t    and %newobject.  Fixes https://sourceforge.net/p/swig/bugs/1350/\n\n2017-10-09: olly\n\t    Remove GCJ support.  It isn't in a good state and doesn't seem to\n\t    be used, and GCC7 dropped GCJ.  Closes\n\t    https://sourceforge.net/p/swig/bugs/823/\n\n2017-10-07: olly\n\t    Fix preprocessor handling of empty macro arguments to match that of\n\t    C/C++ compilers.  Fixes issue #1111 and\n\t    https://sourceforge.net/p/swig/bugs/826/\n\n2017-10-06: wsfulton\n            [Python] Issue #1108. Fix platform inconsistency in Python default argument handling.\n            32 bit and 64 bit compiled versions of SWIG generated different Python files\n            when default arguments were outside the range of 32 bit signed integers.\n            The default arguments specified in Python are now only those that are in the\n            range of a 32 bit signed integer, otherwise the default is obtained from C/C++ code.\n\n2017-10-02: wsfulton\n            [C#] Fix std::complex types passed by value.\n\n2017-10-02: wsfulton\n            [Javascript, Python, Ruby] Issue #732 - Missing type information for std::complex\n            in std_complex.i meant that previously std::complex always had to be fully qualified\n            in order to be wrapped with the appropriate typemaps.\n\n2017-10-01: joequant\n            allow R package names with docs\n\t    allowing multiple get accessors in R\n\t    fix smart-pointer and NAMESPACE support\n\t    constructors now returning smart pointers (if class\n\t    declared as such)\n\t    smart-pointer classes deriving from parent smart-pointers\n\n2017-09-29: wsfulton\n            Issue #1100 - Allow an instantiated template to have the same name in the target\n            language as the C++ template name, for example, this is now possible:\n\n              template<typename T> struct X { ... };\n              %template(X) X<int>;\n\n2017-09-23: wsfulton\n            Issue #1098. Fix overloading of shared_ptr with underlying pointer types, eg:\n\n              void m(std::shared_ptr<T> p);\n              void m(T &p);\n              void m(T *p);\n\n            Only the first method is wrapped and the others are ignored/shadowed.\n            The implementation is done via a new attribute in the 'typecheck' typemap called\n            'equivalent'. If specified, it must contain the equivalent pointer type for overloading\n            and can only be used for the special SWIG_TYPECHECK_POINTER precedence level.\n            The shared_ptr 'typecheck' typemaps have been modified accordingly.\n            Here is a simplified version:\n\n              %typemap(typecheck, precedence=SWIG_TYPECHECK_POINTER, equivalent=\"T *\")\n                T,\n                T CONST &,\n                T CONST *,\n                T *CONST&,\n                std::shared_ptr< T >,\n                std::shared_ptr< T > &,\n                std::shared_ptr< T > *,\n                std::shared_ptr< T > *&\n                { ... }\n\n            Overloading with any of these types will result in SWIG ignoring all but the first\n            overloaded method by default. Without the 'equivalent' attribute, wrapping the overloaded\n            methods resulted in types being shadowed (scripting languages) or code that did not\n            compile (statically typed languages).\n\n2017-09-19: futatuki\n            [Python] #1003 Add --with-2to3=/path/to/2to3 option to configure.\n\n2017-09-18: wsfulton\n            Fix type promotion wrapping constant expressions of the form:\n              # define EXPR_MIXED1    (0x80 + 11.1) - 1\n            This was previously an integral type instead of a floating point type.\n\n2017-09-17: wsfulton\n            Fix generated code for constant expressions containing wchar_t L literals such as:\n              # define __WCHAR_MAX    (0x7fffffff + L'\\0')\n              # define __WCHAR_MIN    (-__WCHAR_MAX - 1)\n\n2017-09-10: mlamarre\n            [Python] Patch #1083. Define_DEBUG to 1 to do exactly like Visual Studio\n            /LDd, /MDd or /MTd compiler options.\n\n2017-08-25: wsfulton\n            Issue #1059. Add support for C++11 ref-qualifiers on non-static member functions.\n            Members with lvalue ref-qualifiers such as:\n\n              struct RQ {\n                void m1(int x) &;\n                void m2(int x) const &;\n              };\n\n            are wrapped like any other member function. Member functions with rvalue ref-qualifiers\n            are ignored by default, such as:\n\n              struct RQ {\n                void m3(int x) &&;\n                void m4(int x) const &&;\n              };\n\n              example.i:7: Warning 405: Method with rvalue ref-qualifier m3(int) && ignored.\n              example.i:8: Warning 405: Method with rvalue ref-qualifier m4(int) const && ignored.\n\n            These can be unignored and exposed to the target language, see further documentation in\n            CPlusPlus11.html.\n\n2017-08-16: wsfulton\n            Fix #1063. Add using declarations to templates into typedef table.\n\n            Using declarations to templates were missing in SWIG's internal typedef tables.\n            This led to a few problems, such as, templates that did not instantiate and generated\n            C++ code that did not compile as SWIG did not know what scope the template was\n            in. This happened mostly when a using declaration was used on a template type in a\n            completely unrelated namespace.\n\n2017-08-16: wsfulton\n            Fix type lookup in the presence of using directives and using declarations.\n\n            Fix some cases of type lookup failure via a combination of both using directives and\n            using declarations resulting in C++ code that did not compile as the generated type was\n            not fully qualified for use in the global namespace. Example below:\n\n              namespace Space5 {\n                namespace SubSpace5 {\n                  namespace SubSubSpace5 {\n                    struct F {};\n                  }\n                }\n                using namespace SubSpace5;\n                using SubSubSpace5::F;\n                void func(SubSubSpace5::F f);\n              }\n\n2017-08-16: wsfulton\n            Issue #1051. %template scope enforcement and class definition fixes.\n\n            The scoping rules around %template have been specified and enforced.\n            The %template directive for a class template is the equivalent to an\n            explicit instantiation of a C++ class template. The scope for a valid\n            %template instantiation is now the same as the scope required for a\n            valid explicit instantiation of a C++ template. A definition of the\n            template for the explicit instantiation must be in scope where the\n            instantiation is declared and must not be enclosed within a different\n            namespace.\n\n            For example, a few %template and C++ explicit instantiations of std::vector\n            are shown below:\n\n              // valid\n              namespace std {\n                %template(vin) vector<int>;\n                template class vector<int>;\n              }\n\n              // valid\n              using namespace std;\n              %template(vin) vector<int>;\n              template class vector<int>;\n\n              // valid\n              using std::vector;\n              %template(vin) vector<int>;\n              template class vector<int>;\n\n              // ill-formed\n              namespace unrelated {\n                using std::vector;\n                %template(vin) vector<int>;\n                template class vector<int>;\n              }\n\n              // ill-formed\n              namespace unrelated {\n                using namespace std;\n                %template(vin) vector<int>;\n                template class vector<int>;\n              }\n\n              // ill-formed\n              namespace unrelated {\n                namespace std {\n                  %template(vin) vector<int>;\n                  template class vector<int>;\n                }\n              }\n\n              // ill-formed\n              namespace unrelated {\n                %template(vin) std::vector<int>;\n                template class std::vector<int>;\n              }\n\n            When the scope is incorrect, an error now occurs such as:\n\n              cpp_template_scope.i:34: Error: 'vector' resolves to 'std::vector' and\n              was incorrectly instantiated in scope 'unrelated' instead of within scope 'std'.\n\n            Previously SWIG accepted the ill-formed examples above but this led to\n            numerous subtle template scope problems especially in the presence of\n            using declarations and using directives as well as with %feature and %typemap.\n\n            Actually, a valid instantiation is one which conforms to the C++03\n            standard as C++11 made a change to disallow using declarations and\n            using directives to find a template.\n\n              // valid C++03, ill-formed C++11\n              using std::vector;\n              template class vector<int>;\n\n            Similar fixes for defining classes using forward class references have\n            also been put in place. For example:\n\n              namespace Space1 {\n                struct A;\n              }\n              namespace Space2 {\n                struct Space1::A {\n                  void x();\n                }\n              }\n\n            will now error out with:\n\n              cpp_class_definition.i:5: Error: 'Space1::A' resolves to 'Space1::A' and\n              was incorrectly instantiated in scope 'Space2' instead of within scope 'Space1'.\n\n            Previously some symbols would have been instantiated in the wrong scope and led\n            to lots of scope problems involving SWIG typemaps, features, renames etc.\n            You will need to correct the scope used in other SWIG directives which do not\n            support 'using declarations' and 'using directives'. For example, if you previously had:\n\n              %rename(Zap) vector<int>::clear;\n              using namespace std;\n              %template(VectorInt) vector<int>;\n\n            Prior versions of SWIG incorrectly instantiated vector<int> in the global namespace\n            and so the %rename matched. Now the template is instantiated in the correct namespace,\n            so is fully qualified as std::vector<int>. The other SWIG directives need correcting as\n            they do not follow 'using declarations' and 'using directives'. Change it to:\n\n              %rename(Zap) std::vector<int>::clear;\n              using namespace std;\n              %template(vin) vector<int>;\n\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2017-08-16: wsfulton\n            Fix scope lookup for template parameters containing unary scope operators.\n\n            Fixes cases like:\n\n            namespace Alloc {\n              template<typename T> struct Rebind {\n                typedef int Integer;\n              };\n            }\n            %template(RebindBucket) Alloc::Rebind< Bucket >;\n            OR\n            %template(RebindBucket) Alloc::Rebind< ::Bucket >;\n\n            Alloc::Rebind< Bucket >::Integer Bucket1();\n            Alloc::Rebind< ::Bucket >::Integer Bucket2();\n            Alloc::Rebind<::template TemplateBucket<double>>::Integer Bucket3();\n\n2017-08-16: wsfulton\n            For templates only, the template parameters are fully resolved when\n            handling typemaps. Without this, it is too hard to have decent rules\n            to apply typemaps when parameter types are typedef'd and template\n            parameters have default values.\n\n            Fixes %clear for typedefs in templates, eg:\n\n              %typemap(\"in\") XXX<int>::Long \"...\"\n              template typename<T> struct XXX {\n                typedef long Long;\n              };\n              %clear XXX<int>::Long;\n\n            as the typemap was previously incorrectly stored as a typemap for long\n            instead of XXX<int>::Long.\n\n2017-08-05: olly\n\t    [C++11] Allow static_assert at the top level (and disallow it right\n\t    after template<T>).  Fixes issue 1031 reported by Artem V L.\n\n2017-08-02: wsfulton\n            Fix incorrectly shown warning when an empty template instantiation was used on a\n            class used as a base class and that base class was explicitly ignored with %ignore.\n            Example of the warning which will no longer appear:\n\n              Warning 401: Base class 'Functor< int,int >' has no name as it is an empty\n              template instantiated with '%template()'. Ignored.\n\n2017-07-17: fflexo\n            [Java] #674 Add std_list.i to add support for std::list containers. The Java proxy\n            extends java.util.AbstractSequentialList and makes the C++ std::list container look\n            and feel much like a java.util.LinkedList from Java.\n\n2017-07-07: wsfulton\n            [Python] Fix display of documented template types when using the autodoc\n            feature. For example when wrapping:\n\n              %feature(\"autodoc\");\n              template<typename X> struct T {};\n              %template(TInteger) T<int>;\n\n            the generated documentation contains:\n              \"\"\"Proxy of C++ T< int > class.\"\"\"\n            instead of:\n              \"\"\"Proxy of C++ T<(int)> class.\"\"\"\n            and\n              \"\"\"__init__(TInteger self) -> TInteger\"\"\"\n            instead of\n              \"\"\"__init__(T<(int)> self) -> TInteger\"\"\"\n\n2017-06-27: nihaln\n\t    [PHP] Update the OUTPUT Typemap to add return statement to the\n\t    PHP Wrapper.\n\n2017-06-27: nihaln\n\t    [PHP] Update the enum and value examples to use the OO wrappers\n\t    rather than the flat functions produced with -noproxy.  There's\n\t    not been a good reason to use -noproxy for since PHP5 OO wrapping\n\t    was fixed back in 2005.\n\n2017-06-23: m7thon\n            [Python] fix and improve default argument handling:\n\n            1. Fix negative octals. Currently not handled correctly by `-py3`\n               (unusual case, but incorrect).\n            2. Fix arguments of type \"octal + something\" (e.g. `0640 | 04`).\n               Currently drops everything after the first octal. Nasty!\n            3. Fix bool arguments \"0 + something\" (e.g. `0 | 1`) are always\n               \"False\" (unusual case, but incorrect).\n            4. Remove special handling of \"TRUE\" and \"FALSE\" from\n               `convertValue` since there's no reason these have to match\n               \"true\" and \"false\".\n            5. Remove the Python 2 vs. Python 3 distinction based on the\n               `-py3` flag. Now the same python code is produced for default\n               arguments for Python 2 and Python 3. For this, octal default\n               arguments, e.g. 0644, are now wrapped as `int('644', 8)`. This\n               is required, as Python 2 and Python 3 have incompatible syntax\n               for octal literals.\n\n            Fixes #707\n\n2017-06-21: futatuki\n            #1004 - Fix ccache-swig executable name to respect configure's --program-prefix and\n            --program-suffix values if used.\n\n2017-06-21: tamuratak\n            [Ruby] #911 - Add std::wstring support.\n\n2017-06-19: wsfulton\n            [Python] Fix handling of rich comparisons when wrapping overloaded operators:\n\n              operator<  operator<=  operator>  operator>=  operator==  operator!=\n\n            Previously a TypeError was always thrown if the type was not correct. NotImplemented\n            is now returned from these wrapped functions if the type being compared with is\n            not correct. The subsequent behaviour varies between different versions of Python\n            and the comparison function being used, but is now consistent with normal Python\n            behaviour. For example, for the first 4 operator overloads above, a TypeError\n            'unorderable types' is thrown in Python 3, but Python 2 will return True or False.\n            NotImplemented should be returned when the comparison cannot be done, see PEP 207 and\n            https://docs.python.org/3/library/constants.html#NotImplemented\n\n            Note that the bug was only present when overloaded operators did not also have a\n            function overload.\n\n            Fixes SF bug #1208 (3441262) and SF patch #303.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2017-06-17: fabrice102\n            [Go] Fix Go callback example.  Fixes github #600, #955, #1000.\n\n2017-06-16: wsfulton\n            Make sure warning and error messages are not split up by other processes writing to\n            stdout at the same time.\n\n2017-06-16: wsfulton\n            [R] Fix wrapping function pointers containing rvalue and lvalue reference parameters.\n\n2017-06-13: olly\n\t    [Perl] Fix testsuite to work without . in @INC - it was removed in\n\t    Perl 5.26 for security reasons, and has also been removed from\n\t    older versions in some distros.  Fixes #997 reported by lfam.\n\n2017-06-03: wsfulton\n            Fix %import on a file containing a file scope %fragment forced inclusion to not\n            generate the fragment contents as %import should not result in code being generated.\n            The behaviour is now the same as importing code insertion blocks.\n            Wrapping FileC.i in the following example will result in no generated code, whereas\n            previously \"#include <limits.h>\" was generated:\n\n              // FileA.i\n              %fragment(\"<limits.h>\", \"header\") %{\n                #include <limits.h>\n              %}\n\n              %{\n                #include <stdio.h>\n              %}\n              %fragment(\"<limits.h>\");\n\n              // FileC.i\n              %import \"FileA.i\"\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2017-05-26: Volker Diels-Grabsch, vadz\n            [Java] #842 Extend from java.util.AbstractList<> and implement java.util.RandomAccess for\n            std::vector wrappers. This notably allows to iterate over wrapped vectors in a natural way.\n            Note that boxed types are now used in the Java layer when wrapping vector of C primitive\n            types, for example. This may introduce some subtle incompatibilities due to some\n            differences in how Java converts boxed types and unboxed types. For example,\n\n              int i=0;\n              double d1 = i; // ok\n              Double d2 = i; // error: incompatible types: int cannot be converted to Double\n\n            This can be a problem when calling the add and set functions. A suggested backwards\n            compatible workaround is to use something like (shown for std::vector<double>:\n\n              #if defined(SWIGJAVA)\n              // Add in old api that uses non-boxed types\n              %extend std::vector<double> {\n              %proxycode %{\n                public void add(double x) {\n                  add(Double.valueOf(x));\n                }\n                public void set(int i, double val) {\n                  set(i, Double.valueOf(val));\n                }\n              %}\n              }\n              #endif\n\n              %include \"std_vector.i\"\n              %template(VectorDouble) std::vector<double>;\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2017-05-30: davidcl\n            [Scilab] #994 Undefined symbol error when loading in Scilab 6\n\n2017-05-25: asibross\n            [Java] #370 #417 Missing smart pointer handling in Java director extra methods\n            swigReleaseOwnership() and swigTakeOwnership().\n\n2017-05-23: wsfulton\n            [Java] #230 #759 Fix Java shared_ptr and directors for derived classes java compilation\n            error.\n\n            For shared_ptr proxy proxy classes, add a protected method swigSetCMemOwn for modifying\n            the swigCMemOwn and swigCMemOwnDerived member variables which are used by various other\n            methods for controlling memory ownership.\n\n2017-05-21: Sghirate\n            [Java, C#, D] #449 Remove unnecessary use of dynamic_cast in directors to enable\n            non-RTTI compilation.\n\n2017-05-21: wsfulton\n            [Python] #993 Fix handling of default -ve unsigned values, such as:\n              void f(unsigned = -1U);\n\n2017-05-20: jschueller\n            [Python] #991 Fix E731 PEP8 warning: do not assign a lambda expression\n\n2017-05-16: nihal95\n            [PHP] Add %pragma version directive to allow the version of the\n            extension to be set.  Patch #970, fixes #360.\n\n2017-05-13: yag00\n            Patch #975 - Add support for noexcept on director methods.\n\n2017-04-27: redbrain\n            Issue #974, Patch #976 - Fix preprocessor handling of macros with commas in a comment.\n\n2017-04-25: jleveque\n            [Lua] #959 - Fix Visual Studio C4244 conversion warnings in Lua wrappers.\n\n2017-04-21: tamuratak\n            [Ruby] #964 - Add shared_ptr director typemaps.\n\n2017-04-20: wsfulton\n            [Ruby] #586, #935 Add assert for invalid NULL type parameter when calling SWIG_Ruby_NewPointerObj.\n\n2017-04-20: tamuratak\n            [Ruby] #930, #937 - Fix containers of std::shared_ptr.\n            Upcasting, const types (eg vector<shared_ptr<const T>>) and NULL/nullptr support added.\n\n2017-04-12: smarchetto\n            [Scilab] New parameter targetversion to specify the Scilab target version (5, 6, ..) for code generation\n            With Scilab 6 target specified, identifier names truncation is disabled (no longer necessary)\n\n2017-03-24: tamuratak\n            [Ruby] Fix #939 - Wrapping std::vector<bool> fix due to incorrect null checks\n            on VALUE obj.\n\n2017-03-17: vadz\n            [C#] #947 Add support for std::complex<T>\n\n2017-03-17: wsfulton\n            [Go] Fix handling of typedef'd function pointers and typedef'd member function pointers\n            such as:\n\n              typedef int (*FnPtr_td)(int, int);\n              int do_op(int x, int y, FnPtr_td op);\n\n2017-03-16: wsfulton\n            Add support for member const function pointers such as:\n\n              int fn(short (Funcs::* parm)(bool)) const;\n\n            Also fix parsing of references/pointers and qualifiers to member\n            pointers such as:\n\n              int fn(short (Funcs::* const parm)(bool));\n              int fn(short (Funcs::* & parm)(bool));\n\n2017-03-10: wsfulton\n            Extend C++11 alternate function syntax parsing to support const and noexcept, such as:\n\n              auto sum1(int x, int y) const -> int { return x + y; }\n              auto sum2(int x, int y) noexcept -> int { return x + y; }\n\n2017-02-29: tamuratak\n            [Ruby] #917 - Add Enumerable module to all container class wrappers. It was missing\n            for std::list, std::multiset, std::unordered_multiset and std::unordered_map.\n\n2017-02-27: assambar\n            [C++11] Extend parser to support throw specifier in combination\n            with override and/or final.\n\n2017-02-10: tamuratak\n            [Ruby] #883 - Add support for C++11 hash tables:\n              std::unordered_map\n              std::unordered_set\n              std::unordered_multimap\n              std::unordered_multiset\n\n2017-02-08: jcsharp\n            [C#] #887 Improve std::vector<T> wrapper constructors -\n            Replace constructor taking ICollection with IEnumerable and also add IEnumerable<T>\n            constructor to avoid the boxing and unboxing overhead of the original constructor,\n            when the type parameter is a value type.\n\nVersion 3.0.12 (27 Jan 2017)\n============================\n\n2017-01-27: wsfulton\n            [C#] #882 Fix missing filename in error messages when there is a problem\n            writing out C# files.\n\n2017-01-27: briancaine\n            [Guile] #744 Fix compilation errors in Guile wrappers - regression\n            introduced in swig-3.0.11.\n\n2017-01-24: andrey-starodubtsev\n            [Java] Apply #704 - director typemap improvements.\n            Memory leak fixes, add support for \"directorargout\" typemap and\n            add director support to typemaps.i.\n\n2017-01-24: wsfulton\n            Enhance %extend to extend a class with template constructors, eg:\n\n              struct Foo {\n                %extend {\n                  template<typename T>\n                  Foo(int a, T b) {\n                    ...\n                  }\n                }\n              };\n              %template(Foo) Foo::Foo<double>;\n\n2017-01-22: wsfulton\n            Issue #876 Enhance %extend to extend a class with template methods, eg:\n\n              struct Foo {\n                %extend {\n                  template<typename T>\n                  void do_stuff(int a, T b) {\n                    ...\n                  }\n                }\n              };\n              %template(do_stuff_inst) Foo::do_stuff<double>;\n\n              Similarly for static template methods.\n\n2017-01-22: kwwette\n            [Octave] add support for version 4.2\n            - The Octave API now uses some C++11 features. It is recommended to use\n              the mkoctfile program supplied by Octave to compile the SWIG-generated\n              wrapper code, as mkoctfile will ensure the correct C++ compiler/options\n              are used. Otherwise, the value of `mkoctfile -p CXX` should be parsed\n              for any -std=* flags which might be present.\n            - Octave has dropped support for << and >> operators, so SWIG now\n              ignores them.\n            - The Octave error() function now raises C++ exceptions to propagate\n              Octave errors, so %exception directives may need to be modified.\n              For convenience the SWIG_RETHROW_OCTAVE_EXCEPTIONS macro can be used\n              to rethrow any Octave exceptions for Octave itself to handle, e.g.:\n\n                try {\n                  $action                        // may call error()\n                }\n                SWIG_RETHROW_OCTAVE_EXCEPTIONS   // error() exceptions are rethrown\n                catch(...) {\n                  ...                            // all other exceptions\n                }\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2017-01-16: wkalinin\n            [C#] Fix #733 regression introduced in swig-3.0.9.\n            Missing virtual function override in C# layer when using %import.\n\n2017-01-16: fschlimb\n            Fix #813 template symbol name lookup bug when typedef names are the same but in different\n            namespaces.\n\n2017-01-15: wsfulton\n            [C# D Java]\n            The SWIG library no longer uses the javatype, dtype or cstype typemaps, thereby\n            completely freeing them up for users to use without having to replicate the library\n            code that they previously added. The code previously generated by these typemaps\n            has been replaced by the new %proxycode directive. Their use in the library code\n            was fairly minimal:\n\n              C#   cstype:   std_array.i std_map.i std_vector.i\n              D    dtype:    std_vector.i\n              Java javatype: arrays_java.i\n\n2017-01-14: wsfulton\n            The %extend directive can now optionally support one of the 'class', 'struct' or 'union'\n            keywords before the identifier name, for example:\n\n              struct X { ... };\n              %extend struct X { ... }\n\n            Previously this had to specified as:\n\n              struct X { ... };\n              %extend X { ... }\n\n2017-01-13: wsfulton\n\t    [C# D Java] Add new %proxycode directive which is a macro for %insert(\"proxycode\").\n            This is a way of adding pure C#/D/Java code into the appropriate proxy class, eg:\n\n              %extend Proxy2 {\n              %proxycode %{\n                public int proxycode2(int i) {\n                  return i+2;\n                }\n              %}\n              }\n\n              %inline %{\n              struct Proxy2 {};\n              %}\n\n            There will then be a pure Java/C#/D method called proxycode2 in the Proxy2 class.\n\n2016-12-31: ajrheading1\n\t    Issue #860 - Remove use of std::unary_function and std::binary_function\n            which is deprecated in C++11.\n\n2016-12-30: olly\n\t    [PHP7] Register internal 'swig_runtime_data_type_pointer' constant\n\t    as \"CONST_PERSISTENT\" to avoid segmentation fault on module unload.\n\t    Fixes #859 reported by Timotheus Pokorra. Thanks also to Javier Torres\n\t    for a minimal reproducer.\n\nVersion 3.0.11 (29 Dec 2016)\n============================\n\n2016-12-24: wsfulton\n            [C#] Add %feature(\"csdirectordelegatemodifiers\") to enable customization\n            of the delegate access modifiers generated in director classes.\n            Fixes issue #748.\n\n2016-12-23: wsfulton\n            [Python] Fix builtin \"python:slot\" feature failing for tp_hash when using\n            hashfunc closure with a \"Wrong type for hash function\" for Python 2.\n            Issue #843.\n\n2016-12-21: joequamt\n            Changed generation of functions so that only functions\n            that end in _set generate accessor functions rather than\n\t    looking for \"set\".\n\t    Change generation of operators to not have underscores\n\t    to start in R. Users need to provide custom names for these operator overloads.\n\n2016-12-21: olly\n\t    Fix isfinite() checks to work with all C++11 compilers.\n\t    Fixes issues #615, #788 and #849.\n\n2016-12-20: wsfulton\n            %namewarn unnecessarily caused keyword warnings for non-instantiated template classes\n            and duplicate warnings for instantiated template classes when keywords were used.\n            Issue #845.\n\n2016-12-18: ezralanglois \n            [Python, Ruby, Octave] Memory leak fix on error in std::pair wrappers.\n            Issue #851.\n\n2016-12-18: wsfulton\n            Zero initialize arrays when using %array_class and %array_functions.\n\n2016-12-18: t-ikegami\n            [Python] Fix #446\n            Python %array_class of carrays.i failed with -builtin option.\n\n2016-12-16: briancaine\n            [Guile] Patch #744 Added support for Guile's native pointer functionality\n\n2016-12-01: wsfulton\n            [Python] Issue #769.\n            Add optional moduleimport attribute to %module so that the\n            default module import code can be overridden. See the \"Searching for the wrapper module\"\n            documentation in Python.html. Example:\n\n              %module(moduleimport=\"import _foo\") foo\n\n            $module also expands to the low-level C/C++ module name, so the following is the\n            same as above\n\n              %module(moduleimport=\"import $module\") foo\n\n2016-11-30: olly\n\t    [PHP] Add support for PHP7.  PHP5's C extension API has changed\n\t    substantially so you need to use -php7 to specify you want PHP7\n\t    compatible wrappers.  The default extension for generated wrappers\n\t    is now .cxx (to match SWIG's default for every other language - to\n\t    generate foo_wrap.cpp you can run SWIG with -cppext cpp).  Fixes\n\t    issue #571.\n\n\t    As part of this change, the language subdirectory for PHP5 has\n\t    changed from \"php\" to \"php5\" - if you are making use of the search\n\t    path feature where the language subdirectory of each directory\n\t    is also searched, you'll need to update your bindings.  A simple\n\t    fix which works for older and newer SWIG is to add a symlink:\n\t    ln -s php php5\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2016-11-30: olly\n\t    [PHP] Only emit one copy of each distinct arginfo.  Previously we\n\t    emitted a separate one for every wrapped function, but typically\n\t    many functions have the same number of parameters and combinations\n\t    of parameters passed by reference or not.\n\n\t    This change significantly reduces both the size of the generated\n\t    wrapper, and of the compiled PHP extension module (e.g. by ~6% for\n\t    the stripped extension module for Xapian's PHP7 bindings).\n\n2016-11-28: wsfulton\n            Fix %rename override of wildcard %rename for templates. For example:\n\n              %rename(GlobalIntOperator) *::operator bool; // wildcard %rename\n\n              %rename(XIntOperator) X::operator bool; // fix now overrides first %rename above\n              OR\n              %rename(XIntOperator) X<int>::operator bool; // fix now overrides first %rename above\n\n              template<typename T> struct X {\n                operator bool();\n                ...\n              };\n              %template(Xint) X<int>;\n\n            This also fixes %rename override of global %rename for templates. For example:\n\n              // Global rename to make all functions start with a lower case letter\n              %rename(\"%(firstlowercase)s\", %$isfunction ) \"\";\n              %rename(woohoo) W::Woo; // fix now overrides above %rename\n\n              template<typename T> struct W {\n                W Woo();\n                ...\n              };\n              %template(Wint) W<int>;\n\n            The above also introduces a possibly unexpected change. Many of the STL containers\n            provided by SWIG use %rename to rename some methods, eg in std::vector, push_back\n            is renamed to add in Java. Previously this intended rename did not happen when using\n            using global %rename rules and the method would remain as push_back, but is now\n            renamed to add. Some more info in issue #856.\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2016-11-26: m7thon\n            [Python] Issue #709 - improved wrapping of division operators\n            'from __future__ import division' now works in Python 2 whether or not the\n            -py3 flag is used.\n\n2016-11-12: joequant\n            [R] Issue #697 - fix comma issue with overload methods\n\n2016-11-12: joequant\n\t    [R] Issue #555 - R runtime needs stdio.h\n\n2016-11-02: wsfulton\n            [Python] Issue #816 - fix compilation error when using -extranative and -builtin.\n\n2016-11-02: liorgold\n            Patch #741 - Add support for C++11 alias templates, see updated CPlusPlus11.html\n            documentation.\n\n2016-10-30: myd7349\n            [C#] Patch #740 Add std_array.i for C# for wrapping std::array.\n\n            Patch also enhances std::vector<std::wstring> C# wrappers with additional functions\n            (Contains, IndexOf, LastIndexOf and Remove).\n\n2016-10-30: tobilau\n            [Java] Fix wrappers for wstring parameters in director methods to cleanup local\n            ref after director callback has finished.\n\n2016-10-23: wsfulton\n            [C#] Add missing csdirectorin VOID_INT_PTR and csdirectorout VOID_INT_PTR typemaps.\n\n2016-10-23: jiulongw\n            Patch #781 - Fix wrapping of C compound expressions containing char constants\n            in quotes such as:\n\n              #define H_SUPPRESS_SCALING_MAGIC (('s'<<24) | ('u'<<16) | ('p'<<8) | 'p')\n\n              enum DifferentTypes {\n                typecharcompound='A'+1,\n                typecharcompound2='B' << 2\n              };\n\n2016-10-13: wsfulton\n            [Python] Issue #808 - fix Python pickling and metaclass for builtin wrappers.\n\n            The metaclass (SwigPyObjectType) for SWIG objects was not defined in\n            a way that let importlib successfully import the Python wrappers.\n            The pickle module previously failed to pickle objects because it couldn't\n            determine what module the SWIG wrapped objects were in.\n\n2016-09-29: wsfulton\n            [Allegrocl, CFFI, GO, Javascript, Ocaml, R, Scilab]\n            Add missing support for the \"ret\" typemap in a few target languages.\n            The documentation also now has info on the \"ret\" typemap.\n\n2016-09-27: ahmed-usman\n            [xml] Handle template parameters correctly.\n\n2016-09-27: dontpanic92\n            [Go] Fix argument names in inherited functions taking more than 8\n            parameters.  Fixes #795.\n\n2016-09-26: smarchetto\n            [Scilab] mlists that map pointers can be given a custom type name.\n\n2016-09-25: wsfulton\n            Patch #793 from q-p to expand exception handling to include std::bad_cast\n            in std_except.i.\n\n2016-09-24: olly\n            [PHP] Fix code generated for feature(\"director:except\") -\n            previously the return value of call_user_function() was ignored and\n            we checked an uninitialised value instead.  Fixes #627.  Based on\n            patch from Sergey Seroshtan.\n\n2016-09-22: wsfulton\n            [Python] More flexible python builtin slots for overloaded C++ function.\n\n            The closure names used for builtin slots are mangled with their functype so\n            that overloaded C++ method names can be used for multiple slots.\n            For example:\n\n              %feature(\"python:slot\", \"mp_subscript\", functype=\"binaryfunc\") SimpleArray::__getitem__;\n              %feature(\"python:slot\", \"sq_item\", functype=\"ssizeargfunc\") SimpleArray::__getitem__(Py_ssize_t n);\n\n            will generate closures:\n\n              SWIGPY_SSIZEARGFUNC_CLOSURE(_wrap_SimpleArray___getitem__) /* defines _wrap_SimpleArray___getitem___ssizeargfunc_closure */\n              SWIGPY_BINARYFUNC_CLOSURE(_wrap_SimpleArray___getitem__) /* defines _wrap_SimpleArray___getitem___binaryfunc_closure */\n\n            Previously only one name was defined: _wrap_SimpleArray___getitem___closure.\n            Hence the overloaded __getitem__ method can be used to support both mp_subscript and sq_item slots.\n\n2016-09-17: wsfulton\n            [Python] Fix iterators for containers of NULL pointers (or Python None) when using\n            -builtin. Previously iteration would stop at the first element that was NULL.\n\n2016-09-16: olly\n            [Javascript] Fix SWIG_exception() macro to return from the current\n            function.  Fixes #789, reported by Julien Dutriaux.\n\n2016-09-16: olly\n            [PHP] Fix SWIG_exception() macro to return from the current function.\n            Fixes #240, reported by Sergey Seroshtan.\n\n2016-09-12: xypron\n            [C#] Patch #786 Keyword rename to be CLS compliant by adding an underscore\n            suffix instead of an underscore prefix to the C symbol name. Please use an explicit\n            %rename to rename the symbol with a _ prefix if you want the old symbol name.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2016-09-09: olly\n            [Python] Fix import handling for Python 2.6 to work in a frozen\n            application.  Fixes #145, reported by Thomas Kluyver.\n\n2016-09-02: smarchetto\n            [Scilab] Pointers are mapped to mlist instead of tlist\n            (mlist better for scilab overloading)\n\n2016-09-02: olly\n            [PHP] Fix \"out\" typemap for member function pointers and \"in\"\n            typemap for char INPUT[ANY].\n\n2016-09-01: wsfulton\n            [Python] More efficient Python slicing.\n            Call reserve for container types that support it to avoid repeated\n            memory reallocations for new slices or slices that grow in size.\n\n2016-09-01: wsfulton\n            [Python] #771 - Make builtin types hashable by default.\n            Default hash is the underlying C/C++ pointer. This matches up with testing for\n            equivalence (Py_EQ in SwigPyObject_richcompare) which compares the pointers.\n\n2016-08-22: wsfulton\n            [Python] The following builtin slots can be customized like other slots via the\n            \"python:<x>\" and \"python:slot\" features where <x> is the appropriate slot name:\n              tp_allocs\n              tp_bases\n              tp_basicsize\n              tp_cache\n              tp_del\n              tp_dealloc\n              tp_flags\n              tp_frees\n              tp_getset\n              tp_is_gc\n              tp_maxalloc\n              tp_methods\n              tp_mro\n              tp_new\n              tp_next\n              tp_prev\n              tp_richcompare\n              tp_subclasses\n              tp_weaklist\n              was_sq_ass_slice\n              was_sq_slice\n\n            A few documentation improvements for slot customization.\n\n2016-08-09: joequant\n            [R] Patch #765 Fix extern \"C\" header includes for C++ code.\n\n2016-08-05: olly\n            [xml] Fix how the output filename is built to avoid problems when\n            it contains the embedded strings \".c\", \".cpp\" or \".cxx\".\n            Fixes #540 reported by djack42.\n\n2016-07-01: wsfulton\n            Fix corner case of wrapping std::vector of T pointers where a pointer to a pointer of T\n            also exists in the wrapped code. SF Bug 2359417 (967).\n\n2016-06-26: wkalinin\n            [Java, C#] Patch #681 Fix seg fault when ignoring nested classes.\n\n2016-06-25: mromberg\n            [Python] #711 Fix -castmode and conversion of signed and unsigned integer types.\n            See 2015-12-23 CHANGES entry for details of these improvements when they were\n            implemented for the default options (ie not using -castmode).\n\n2016-06-25: ahnolds\n            Patch #730 - Fix %implicitconv for overloaded functions when using\n            -castmode or -fastdispatch options.\n\n            The result is that in all overload cases where there are multiple possibilities\n            with the same number of arguments, the dispatch function will first check for\n            exact (aka non implicit) matches, and then subsequently check for implicit\n            casting matches. This was already happening in the normal dispatch situation,\n            and in the -fastdispatch case two passes through the candidates were happening,\n            just with SWIG_POINTER_IMPLICIT_CONV always set. After this patch, it is not set\n            on the first pass, and then set on the second pass.\n\n2016-06-25: liorgold\n            Patch #727 - Add support for C++11 type aliasing.\n\nVersion 3.0.10 (12 Jun 2016)\n============================\n\n2016-06-06: mromberg\n            [Python] Patch #698. Add support for -relativeimport for python 2.7, so -py3 is no\n            longer also required for relative import support.\n\n2016-06-05: mromberg\n            [Python] Patch #694 - Fix package import regressions introduced in swig-3.0.9.\n\n            1) The code in 3.0.9 did not fall back to 'import _foo' if 'import bar._foo' failed\n            (assuming bar.foo was the main module). Every place _foo is imported now first tries\n            it from the package where foo was found and if that fails tries _foo as a global module.\n\n            2) The separate block of Python code that injected code to pull in the attributes\n            from _foo when -builtin is used made use of the -py3 switch to either do\n            'from ._foo import *' or \"from _foo import *\". This block of code no longer does this\n            and instead checks the Python version at runtime to switch between the two syntaxes.\n\n            In summary, swig-3.0.10 has been modified to ease the creation of wrapper modules\n            that can be fully made part of a Python package.  SWIG no longer\n            assumes the dynamically linked C module is a global module.\n            The dynamic module can now be placed into either the same package as the pure Python\n            module or as a global module.  Both locations are used by the Python wrapper to\n            locate the C module.\n\n            However, this could cause a backwards incompatibility with some code\n            that was relying on the ability of \"from package import _module\" to\n            pull attributes out of the package directly.  If your code populates a\n            module (which is also a package) with attributes that are SWIG\n            generated modules which were not loaded in a conventional way,\n            swig-3.0.8 and earlier may have worked due to 'from package import\n            _module' bypassing a real import and pulling your module in as an\n            attribute. This will no longer work.  Since this is not a common (or\n            even recommended) practice, most folk should not be affected.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2016-05-31: wsfulton\n            Fix #690 - Smart pointer to %ignored class doesn't expose inherited methods.\n            Regression introduced in swig-3.0.9.\n\nVersion 3.0.9 (29 May 2016)\n===========================\n\n2016-05-24: mromberg\n            [Python] Patch #612 - Add support for Python's implicit namespace packages.\n\n2016-05-23: wsfulton\n            [Ruby] Fix #602 - Error handling regression of opaque pointers introduced\n            in swig-3.0.8 when C functions explicitly reset a pointer using 'DATA_PTR(self) = 0'.\n            An ObjectPreviouslyDeleted error was incorrectly thrown when the pointer was used\n            as a parameter.\n\n2016-05-17: tamuratak\n            [Ruby] Patch #651 - Correct overloaded function error message when function is\n            using %newobject.\n\n2016-05-17: aurelj\n            [Ruby] Patch #582 - add support for docstring option in %module()\n\n2016-05-14: wsfulton\n            Fix #434 - Passing classes by value as parameters in director methods did not create\n            a copy of the argument leading to invalid memory accesses if the object was used\n            after the upcall into the target language. Passing arguments by value shouldn't give\n            rise to these sorts of memory problems and so the objects are now copied and ownership\n            of their lifetime is controlled by the target language.\n\n2016-05-07: wsfulton\n            Fix #611. Fix assertion handling defaultargs when using %extend for a template\n            class and the extended methods contain default arguments.\n\n2016-05-05: ejulian\n            [Python] Patch #617. Fix operator/ wrappers.\n\n2016-05-02: wsfulton\n            Fix #669. Don't issue warning about ignoring base classes when the derived class is\n            itself ignored.\n\n2016-04-18: ianlancetaylor\n\t    [Go] Fix use of goout typemap when calling base method by\n\t    forcing the \"type\" attribute to the value we need.\n\n2016-04-17: ianlancetaylor\n\t    [Go] Fixes for Go 1.6: avoid returning Go pointers from\n\t    directors that return string values; add a trailing 0 byte\n\t    when treating Go string as C char*.\n\n2016-04-06: smarchetto\n            [Scilab] #552 Make Scilab runtime keep track of pointer types\n            Instead of a Scilab pointer which has no type, SWIG Scilab maps a\n            pointer to a structure tlist containing the pointer adress and its type.\n\n2016-04-02: ahnolds\n            [Python] Apply #598. Fix misleading error message when attempting to read a non-existent\n            attribute. The previous cryptic error message:\n              AttributeError: type object 'object' has no attribute '__getattr__'\n            is now replaced with one mentioning the attribute name, eg:\n              AttributeError: 'Foo' object has no attribute 'bar'\n\n2016-04-02: derkuci\n            [Python] Patch #610 to fix #607.\n            Fix single arguments when using python -builtin -O with %feature(\"compactdefaultargs\")\n\n2016-03-31: wsfulton\n            Fixes #594. Fix assertion for some languages when wrapping a C++11 enum class that\n            is private in a class.\n\n            Also don't wrap private enums for a few languages that attempted to do so.\n\n2016-03-31: wsfulton\n            [Java] unsigned long long marshalling improvements when a negative number\n            is passed from Java to C. A cast to signed long long in the C layer will now\n            result in the expected value. No change for positive numbers passed to C.\n            Fixes #623.\n\n2016-03-22: alexwarg\n\t    [Lua] #398 Fix lua __getitem + inheritance\n            The new handling of classes in Lua (not merging methods into the derived classes)\n            breaks for classes that provide a __getitem function. The __getitem function\n            prevents method calls to any method defined in a base class. This fix calls\n            __getitem only if the member is not found using recursive lookup.\n\n2016-03-18: ptomulik\n\t    [Python] #563 Stop generating unnecessary _swigconstant helpers.\n\n2016-03-16: richardbeare\n\t    [R] #636 Add extra std::vector numeric types\n\n2016-03-14: wsfulton\n\t    [Java] Add std_array.i for C++11 std::array support.\n\n2016-03-12: wsfulton\n\t    [Java, C#, D] Fix static const char member variables wrappers with %javaconst(1)\n            %csconst(1) or %dmanifestconst.\n            This fixes the case when an integer is used as the initializer, such as:\n\n              struct W { static const char w = 100; };\n\n\t    Fix generated code parsing enum values using char escape sequences\n            when these values appear in the Java code (usually when using %javaconst(1))\n            such as:\n\n              enum X { x1 = '\\n', x2 = '\\1' };\n\n            Similarly for static const member char variables such as:\n\n              struct Y { static const char y = '\\n'; }\n\n            Likewise for D and %dmanifestconstant. For C# and %csconst(1), char\n            values in C# are now hex escaped as C# doesn't support C octal escaping.\n\n2016-03-11: wsfulton\n            [Java C#] Add support for treating C++ base classes as Java interfaces\n            instead of Java proxy classes. This enable some sort of support for\n            multiple inheritance. The implementation is in swiginterface.i and\n            provides additional macros (see Java.html for full documentation):\n\n              %interface(CTYPE)\n              %interface_impl(CTYPE)\n              %interface_custom(\"PROXY\", \"INTERFACE\", CTYPE)\n\n2016-03-01: wsfulton\n            Add rstrip encoder for use in %rename. This is like the strip encoder but\n            strips the symbol's suffix instead of the prefix. The example below\n            will rename SomeThingCls to SomeThing and AnotherThingCls to AnotherThing:\n\n              %rename(\"%(rstrip:[Cls])s\") \"\";\n\n              class SomeThingCls {};\n              struct AnotherThingCls {};\n\n2016-03-01: olly\n\t    Fix isfinite() check to work with GCC6.  Fixes\n\t    issue #615 reported by jplesnik.\n\n2016-02-17: olly\n\t    [Python] Add missing keywords 'as' and 'with' to pythonkw.swg.\n\n2016-02-07: kwwette\n            [Octave] recognise various unary functions\n            * Use __float__() for numeric conversions, e.g. when calling double()\n            * Map various unary functions, e.g. abs() to __abs__(), see full list\n              in section 32.3.10 of manual; only available in Octave 3.8.0 or later\n\n2016-02-07: kwwette\n            [Octave] export function swig_octave_prereq() for testing Octave version\n\n2016-02-06: pjohangustavsson\n            [C#] Fix duplicate symbol problems when linking the source generated\n            from multiple SWIG modules into one shared library for the -namespace\n            option. The namespace is now mangled into the global PInvoke function\n            names.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2016-01-27: ahnolds\n            [Python] Added support for differentiating between Python Bytes\n            and Unicode objects using by defining SWIG_PYTHON_STRICT_BYTE_CHAR\n            and SWIG_PYTHON_STRICT_UNICODE_WCHAR.\n\n2016-01-27: steeve\n            [Go] Ensure structs are properly packed between gc and GCC/clang.\n\n2016-01-25: ahnolds\n            [Python] Support the full Python test suite in -classic mode\n            * Convert long/unsigned long/long long/unsigned long long to PyInt\n              rather than PyLong when possible. Certain python functions like\n              len() require a PyInt when operating on old-style classes.\n            * Add support for static methods in classic mode, including support\n              for pythonappend, pythonprepend, and docstrings.\n            * Removing the use of __swig_getmethods__ for static member methods\n              since they will always be found by the standard argument lookup\n            * Fix a bug where the wrong type of exception was caught when\n              checking for new-style class support\n\n2016-01-23: ahnolds\n            [Go] Enable support for the Go test-suite on OSX:\n            * The linker on OSX requires that all symbols (even weak symbols)\n              are defined at link time. Because the function _cgo_topofstack is\n              only defined starting in Go version 1.4, we explicitly mark it as\n              undefined for older versions of Go on OSX.\n            * Avoid writing empty swigargs structs, since empty structs are not\n              allowed in extern \"C\" blocks.\n\n2016-01-12: olly\n\t    [Javascript] Look for \"nodejs\" as well as \"node\", as it's packaged\n\t    as the former on Debian.\n\n2016-01-12: olly\n\t    [Javascript] For v8 >= 4.3.0, use V8_MAJOR_VERSION.\n\t    Fixes issue 561.\n\n2016-01-10: ahnolds\n            Improved size_t and ptrdiff_t typemaps to support large values\n            on platforms where sizeof(size_t) > sizeof(unsigned long) and\n            sizeof(ptrdiff_t) > sizeof(long).\n\nVersion 3.0.8 (31 Dec 2015)\n===========================\n\n2015-12-30: wsfulton\n            The pdf documentation is now generated by wkhtmltopdf and has colour\n            for the code snippets just like the html documentation!\n\n2015-12-23: ahnolds\n            [Python] Fixes for conversion of signed and unsigned integer types:\n\n            No longer check for PyInt objects in Python3. Because PyInt_Check\n            and friends are #defined to the corresponding PyLong methods, this\n            had caused errors in Python3 where values greater than what could be\n            stored in a long were incorrectly interpreted as the value -1 with\n            the Python error indicator set to OverflowError. This applies to\n            both the conversions PyLong->long and PyLong->double.\n\n            Conversion from PyLong to long, unsigned long, long long, and\n            unsigned long long now raise OverflowError instead of TypeError in\n            both Python2 and Python3 for PyLong values outside the range\n            expressible by the corresponding C type. This matches the existing\n            behavior for other integral types (signed and unsigned ints, shorts,\n            and chars), as well as the conversion for PyInt to all numeric\n            types. This also indirectly applies to the size_t and ptrdiff_t\n            types, which depend on the conversions for unsigned long and long.\n\n2015-12-19: wsfulton\n            [Python] Python 2 Unicode UTF-8 strings can be used as inputs to char * or\n            std::string types if the generated C/C++ code has SWIG_PYTHON_2_UNICODE defined.\n\n2015-12-17: wsfulton\n            Issues #286, #128\n            Remove ccache-swig.1 man page - please use the CCache.html docs instead.\n            The yodl2man and yodl2html tools are no longer used and so SWIG no\n            longer has a dependency on these packages which were required when\n            building from git.\n\n2015-12-16: zturner/coleb\n            [Python] Fix Python3.5 interpreter assertions when objects are being\n            deleted due to an existing exception. Most notably in generators\n            which terminate using a StopIteration exception. Fixes #559 #560 #573.\n            If a further exception is raised during an object destruction,\n            PyErr_WriteUnraisable is used on this second exception and the\n            original exception bubbles through.\n\n2015-12-14: ahnolds/wsfulton\n            [Python] Add in missing initializers for tp_finalize,\n            nb_matrix_multiply, nb_inplace_matrix_multiply, ht_qualname\n            ht_cached_keys and tp_prev.\n\n2015-12-12: wsfulton\n            Fix STL wrappers to not generate <: digraphs.\n            For example std::vector<::X::Y> was sometimes generated, now\n            corrected to std::vector< ::X::Y >.\n\n2015-11-25: wsfulton\n            [Ruby] STL ranges and slices fixes.\n\n            Ruby STL container setting slices fixes:\n\n            Setting an STL container wrapper slice better matches the way Ruby\n            arrays work. The behaviour is now the same as Ruby arrays. The only\n            exception is the default value used when expanding a container\n            cannot be nil as this is not a valid type/value for C++ container\n            elements.\n\n            Obtaining a Ruby STL container ranges and slices fixes:\n\n            Access via ranges and slices now behave identically to Ruby arrays.\n            The fixes are mostly for out of range indices and lengths.\n            - Zero length slice requests return an empty container instead of nil.\n            - Slices which request a length greater than the size of the container\n              no longer chop off the last element.\n            - Ranges which used to return nil now return an empty array when the\n              the start element is a valid index.\n\n            Ruby STL container negative indexing support improved.\n\n            Using negative indexes to set values works the same as Ruby arrays, eg\n\n            %template(IntVector) std::vector<int>;\n\n            iv = IntVector.new([1,2,3,4])\n            iv[-4] = 9 # => [1,2,3,9]\n            iv[-5] = 9 # => IndexError\n\n2015-11-21: wsfulton\n            [Ruby, Python] Add std::array container wrappers.\n\n            These work much like any of the other STL containers except Python/Ruby slicing\n            is somewhat limited because the array is a fixed size. Only slices of\n            the full size are supported.\n\n2015-10-10: wsfulton\n            [Python] #539 - Support Python 3.5 and -builtin.  PyAsyncMethods is a new\n            member in PyHeapTypeObject.\n\n2015-10-06: ianlancetaylor\n\t    [Go] Don't emit a constructor function for a director\n\t    class with an abstract method, since the function will\n\t    always panic.\n\n2015-10-01: wsfulton\n            Fix %shared_ptr support for private and protected inheritance.\n            - Remove unnecessary Warning 520: Derived class 'Derived' of 'Base'\n              is not similarly marked as a smart pointer\n            - Do not generate code that attempts to cast up the inheritance chain in the\n              type system runtime in such cases as it doesn't compile and can't be used.\n            Remove unnecessary warning 520 for %shared_ptr when the base class is ignored.\n\n2015-10-01: vkalinin\n            Fix #508: Fix segfault parsing anonymous typedef nested classes.\n\n2015-09-26: wsfulton\n            [Ruby] Add shared_ptr support\n\n2015-09-13: kkaempf\n            [Ruby] Resolve tracking bug - issue #225.\n            The bug is that the tracking code uses a ruby hash and thus may\n            allocate objects (Bignum) while running the GC. This was tolerated in\n            1.8 but is invalid (raises an exception) in 1.9.\n            The patch uses a C hash (also used by ruby) instead.\n\n2015-09-09: lyze\n            [CFFI] Extend the \"export\" feature in the CFFI module to support\n            exporting to a specified package.\n\n2015-09-04: olly\n\t    [Python] Fix docstrings for %callback functions.\n\n2015-09-03: demi-rluddy\n            [Go] Removed golang stringing for signed/unsigned char\n\n            Changed default handling of signed char* and unsigned char* to be\n            opaque pointers rather than strings, similarly to how other\n            languages work.\n\n            Any existing code relying on treating signed char* or unsigned\n            char* as a string can restore the old behavior with typemaps.i by\n            using %apply to copy the [unchanged] char* behavior.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2015-08-07: talby\n            [Perl] tidy -Wtautological-constant-out-of-range-compare warnings when building generated code under clang\n\n2015-08-07: xantares\n            [Python] pep257 & numpydoc conforming docstrings:\n            - Mono-line module docsstring\n            - Rewrite autodoc parameters section in numpydoc style:\n              https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt\n            - One line summary should end with \".\"\n            - Adds a blank line after class docstring\n\n2015-08-05: vadz\n            [Java] Make (char* STRING, size_t LENGTH) typemaps usable for\n            strings of other types, e.g. \"unsigned char*\".\n\nVersion 3.0.7 (3 Aug 2015)\n==========================\n\n2015-08-02: wsfulton\n            [Java] Fix potential security exploit in generated Java classes.\n            The swigCPtr and swigCMemOwn member variables in the generated Java\n            classes are now declared 'transient' by default. Further details of the exploit\n            in Android is being published in an academic paper as part of USENIX WOOT '15:\n            https://www.usenix.org/conference/woot15/workshop-program/presentation/peles.\n\n            In the unlikely event that you are relying on these members being serializable,\n            then you will need to override the default javabody and javabody_derived typemaps\n            to generate the old generated code. The relevant typemaps are in the Lib directory\n            in the java.swg, boost_shared_ptr.i and boost_intrusive_ptr.i files. Copy the\n            relevant default typemaps into your interface file and remove the 'transient' keyword.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2015-08-01: vadz\n            Make configure --without-alllang option more useful: it can now be overridden by the following\n            --with-xxx options, allowing to easily enable just one or two languages.\n\n2015-07-30: wsfulton\n            Fix #440 - Initialise all newly created arrays when using %array_functions and %array_class\n            in the carrays.i library - bug is only relevant when using C++.\n\n2015-07-29: wsfulton\n            [Python] Improve indentation warning and error messages for code in the following directives:\n\n              %pythonprepend\n              %pythonappend\n              %pythoncode\n              %pythonbegin\n              %feature(\"shadow\")\n\n            Old error example:\n              Error: Line indented less than expected (line 3 of pythoncode)\n\n            New error example:\n              Error: Line indented less than expected (line 3 of %pythoncode or %insert(\"python\") block)\n              as no line should be indented less than the indentation in line 1\n\n            Old warning example:\n              Warning 740: Whitespace prefix doesn't match (line 2 of %pythoncode or %insert(\"python\") block)\n\n            New warning example:\n              Warning 740: Whitespace indentation is inconsistent compared to earlier lines (line 3 of\n              %pythoncode or %insert(\"python\") block)\n\n            \n2015-07-28: wsfulton\n            [Python] Fix #475. Improve docstring indentation handling.\n            \n            SWIG-3.0.5 and earlier sometimes truncated text provided in the docstring feature.\n            This occurred when the indentation (whitespace) in the docstring was less in the\n            second or later lines when compared to the first line.\n            SWIG-3.0.6 gave a 'Line indented less than expected' error instead of truncating\n            the docstring text.\n            Now the indentation for the 'docstring' feature is smarter and is appropriately\n            adjusted so that no truncation occurs.\n\n2015-07-22: wsfulton\n            Support for special variable expansion in typemap attributes. Example usage expansion\n            in the 'out' attribute (C# specific):\n\n              %typemap(ctype, out=\"$*1_ltype\") unsigned int& \"$*1_ltype\"\n\n            is equivalent to the following as $*1_ltype expands to 'unsigned int':\n\n              %typemap(ctype, out=\"unsigned int\") unsigned int& \"unsigned int\"\n\n            Special variables can be used within special variable macros too. Example usage expansion:\n\n              %typemap(cstype) unsigned int \"uint\"\n              %typemap(cstype, out=\"$typemap(cstype, $*1_ltype)\") unsigned int& \"$typemap(cstype, $*1_ltype)\"\n\n            Special variables are expanded first and hence the above is equivalent to:\n\n              %typemap(cstype, out=\"$typemap(cstype, unsigned int)\") unsigned int& \"$typemap(cstype, unsigned int)\"\n\n            which then expands to:\n\n              %typemap(cstype, out=\"uint\") unsigned int& \"uint\"\n\n2015-07-22: lindleyf\n\t    Apply patch #439 - support for $typemap() (aka embedded typemaps or special variable\n            macros) in typemap attributes. A simple example where $typemap() is expanded in the\n            'out' attribute (C# specific):\n\n              %typemap(cstype) unsigned int \"uint\"\n              %typemap(cstype, out=\"$typemap(cstype, unsigned int)\") unsigned int& \"$typemap(cstype, unsigned int)\"\n\n            is equivalent to:\n\n              %typemap(cstype, out=\"uint\") unsigned int& \"uint\"\n\n2015-07-18: m7thon\n\t    [Python] Docstrings provided via %feature(\"docstring\") are now quoted and added to\n            the tp_doc slot when using python builtin classes (-builtin). When no docstring is\n            provided, the tp_doc slot is set to the fully qualified C/C++ class name.\n            Github issues #445 and #461.\n\n2015-07-17: kwwette\n            [octave] Support Octave version 4.0.0 (thanks to patches from Orion Poplawski).\n\n2015-07-07: wsfulton\n\t    SWIG no longer generates a wrapper for a class' constructor if that class has\n            any base class with a private destructor. This is because your compiler should\n            not allow a class to be instantiated if a base has a private destructor. Some\n            compilers do, so if you need the old behaviour, use the \"notabstract\" feature, eg:\n\n              %feature(\"notabstract\") Derived;\n              class Base {\n                ~Base() {}\n              };\n              struct Derived : Base {};\n\nVersion 3.0.6 (5 Jul 2015)\n==========================\n\n2015-07-02: wsfulton\n\t    Fix syntax error when the template keyword is used in types, eg:\n\n              std::template vector<int> v;\n\n2015-07-02: ngladitz\n\t    [Lua] Push characters as unformatted 1-character strings to avoid\n\t    unprintable characters such as (char)127 being converted to\n\t    \"<\\127>\" with Lua 5.3 and later.  (github PR #452)\n\n2015-06-29: olly\n\t    [Python] Improve handling of whitespace in %pythoncode.\n\n\t    Previously SWIG looked at the indentation of the first line and\n\t    removed that many characters from each subsequent line, regardless\n\t    of what those characters were.  This was made worse because SWIG's\n\t    preprocessor removes any whitespace before a '#'.  Fixes github\n\t    issue #379, reported by Joe Orton.\n\n2015-06-12: wsfulton\n\t    [R] Fix #430 - call to SWIG_createNewRef in copyToC was incorrectly named.\n\n2015-06-11: sghirate\n\t    [C#] Patch #427 adds in new command line option -outfile to combine all the\n            generated C# code into a single file.\n\n2015-06-09: wsfulton\n\t    Fix seg fault processing C++11 type aliasing. Issue #424.\n\n2015-05-28: wsfulton\n\t    [Python] Add new feature \"python:cdefaultargs\" to control default argument\n            code generation. By default, SWIG attempts to convert C/C++ default argument values\n            into Python values and generates code into the Python layer with these values.\n            Recent versions of SWIG are able to convert more of these values, however, the\n            new behaviour can be circumvented if desired via this new feature, such that\n            the default argument values are obtained from the C layer and not the Python layer.\n            For example:\n\n              struct CDA {\n                int fff(int a = 1, bool b = false);\n              };\n\n            The default code generation in the Python layer is:\n\n              class CDA(_object):\n                  ...\n                  def fff(self, a=1, b=False):\n                      return _default_args.CDA_fff(self, a, b)\n\n            Adding the feature:\n\n              %feature(\"python:cdefaultargs\") CDA::fff;\n\n            Results in:\n\n              class CDA(_object):\n                  ...\n                  def fff(self, *args):\n                      return _default_args.CDA_fff(self, *args)\n\n            Some code generation modes, eg -builtin and -fastproxy, are unaffected by this as\n            the default values are always obtained from the C layer.\n\n2015-05-27: wsfulton\n\t    [Python] Deal with an integer as the default value of a typedef to bool\n\t    parameter in the C++ prototype.  See #327. Regression from 3.0.0 onwards.\n\n2015-05-19: olly\n\t    [Python] Fix warning when compiling generated code with MSVC.\n\t    (Fixes https://sourceforge.net/p/swig/patches/351/ reported by\n\t    Mateusz Szyma¿ski).\n\n2015-05-14: wsfulton\n            Fix seg fault wrapping shared_ptr of classes with private constructors and destructors. \n            This also fixes the \"unref\" feature when used on classes with private destructors.\n\n2015-05-10: wsfulton\n            [Java] Fix multi-argument typemaps (char *STRING, size_t LENGTH)\n            so that they can be applied to a wider range of types. Fixes #385.\n\n2015-05-07: olly\n\t    [Python] Deal with an integer as the default value of a bool\n\t    parameter in the C++ prototype.  Fixes github #327, reported by\n\t    Greg Allen.\n\n2015-05-07: LindleyF\n\t    [Java] Allow feature(\"director\") and feature(\"ref\") to be used\n\t    together.  Github PR#403.\n\n2015-05-05: olly\n\t    Suppress warning 325 \"Nested class not currently supported (Foo\n\t    ignored)\" when Foo has already been explicitly ignored with \"%ignore\".\n\n2015-05-04: wsfulton\n            Add support for friend templates, including operator overloading - fixes #196. Considering\n            the example below, previously the operator gave a syntax error and friendfunc incorrectly\n            warned with:\n\n             \"Warning 503: Can't wrap 'friendfunc<(Type)>' unless renamed to a valid identifier.\"\n\n              template <class Type> class MyClass {\n                friend int friendfunc <Type>(double is, MyClass <Type> & x);\n                friend int operator<< <Type>(double un, const MyClass <Type> &x);\n              };\n\n            The following also previously incorrectly warned with:\n\n              \"Warning 302: Identifier 'template_friend' redefined (ignored),\"\n\n              template<typename T> T template_friend(T);\n              struct MyTemplate {\n                template<typename T> friend T template_friend(T);\n              };\n\n2015-05-01: wsfulton\n            Fix handling of conversion operators where the operator is split over multiple\n            lines or has comments within the operator type. Fixes #401.\n\n            Also fix similar problem with normal operators which gave a syntax error if split over\n            multiple lines or had a comment within the operator declaration.\n\n2015-04-30: olly\n\t    Ignore unknown preprocessor directives which are inside an inactive\n\t    conditional (github issue #394, reported by Dan Wilcox).\n\t    Regression introduced in 3.0.3.\n\n2015-04-27: vadz\n            [Python] Fix \"default\" typemap used after an argument with \"numinputs=0\" (#377).\n\n2015-04-24: wsfulton\n            [Python] Fix #256. Code generated with '-builtin -modernargs' segfaults for any\n            method taking zero arguments.\n\n            Also fixes: \"SystemError: error return without exception set\" during error checking\n            when using just -builtin and the incorrect number of arguments is passed to a class\n            method expecting zero arguments.\n\n2015-04-23: wsfulton\n            [Java] Bug #386 - Memory leak fix in (char *STRING, size_t LENGTH) typemaps.\n\n2015-04-23: vadz\n            [Python] Make \"default\" typemap work again (#330, #377).\n\n2015-04-23: vadz\n            [Python] Fix the use of default values for the pointer types (#365, #376).\n\n2015-04-23: wsfulton\n            Fix 'make check-ccache' which is part of 'make check' when one of the CCACHE_\n            environment variables, for example CCACHE_DISABLE, is set.\n\n2015-04-14: wsfulton\n            Clearer warning message for badly constructed typecheck typemaps. For example, was:\n\n              example.i:3: Warning 467: Overloaded foo(int) not supported (no type checking\n              rule for 'int').\n\n            Now:\n\n              example.i:3: Warning 467: Overloaded foo(int) not supported (incomplete type checking\n              rule - no precedence level in typecheck typemap for 'int').\n\n2015-04-11: wsfulton\n            [Java] Fix #353 - Linker multiple definition of 'ExceptionMatches' when\n            using directors and multiple modules.\n\n2015-04-11: wsfulton\n            Merge #320 - Make __dict__ accessible for Python builtin classes.\n\n2015-04-07: wsfulton\n            Fix #375 - parsing of extern \"C\" and typedef for example:\n              extern \"C\" typedef void (*Hook2_t)(int, const char *);\n              extern \"C\" typedef int Integer;\n\n2015-03-12: olly\n\t    -DSWIG_DIRECTOR_STATIC is now supported for all languages with\n\t    director support, not only Python and PHP.\n\n2015-03-02: ianlancetaylor\n\t    [Go] Add -cgo option, required for Go versions 1.5 and\n\t    later.\n\n2015-02-26: olly\n\t    Fix segmentation fault when top==NULL, introduced by nested class\n\t    handling (reported in issue#346 by Pawe¿ Tomulik).\n\n2015-02-09: wsfulton\n            [Guile] Fix generated code for static const char member variables when\n            defined and declared inline.\n\n2015-02-09: mishas\n            [Go] Fix %import of files in sub directories.\n\n2015-02-05: ianlancetaylor\n            [Go] Ignore Go specific type maps (goin, goout, etc.) if they are empty.\n\n2015-02-05: ianlancetaylor\n            [Go] Generated Go code no longer calls _swig_goallocate or\n            _swig_makegostring, as they will no longer work as of Go 1.5.\n\nVersion 3.0.5 (31 Jan 2015)\n===========================\n\n2015-01-30: wsfulton\n            [Python] Fix Python -classic and property setting. Setting properties on classic classes\n            was broken in swig-3.0.3 by attempting to use __setattr__. This regression is fixed now\n            by using __dict__ again when using -classic.\n            Fixes patch #232.\n\n2015-01-27: smarchetto\n\t    [Scilab] Support for the Scilab language has been added\n\n2015-01-23: olly\n\t    [PHP] When wrapping a returned resource as an object, check if all\n\t    cases wrap it in the same class, and if so eliminate the pointless\n\t    switch statement wrapper we previously generated.\n\n2015-01-22: wsfulton\n            [Octave] Merge patch #297 for SF bug #1277 - Octave shared_ptr support\n\n2015-01-15: wsfulton\n            [Python] Merge patch #250 - Fixes for using %constant and objects (non-primitive types)\n\n2015-01-15: wsfulton\n            [C# Go] Merge patch #308 and fix #307 - C++11 strongly typed enum support\n            in directors\n\n2015-01-15: wsfulton\n            [Python] Second fix for #294 #296 - Regression introduced in SWIG-3.0.3 when\n            wrapping functions with default arguments, this time when using kwargs.\n\nVersion 3.0.4 (14 Jan 2015)\n===========================\n\n2015-01-12: olly\n\t    [PHP] Fix segfault in director upcall check when using PHP built with\n\t    ZTS enabled.  Fixes #155, reported by Pierre Labastie.\n\n2015-01-12: vadz\n            [Python] Fix #294 #296 - Regression introduced in SWIG-3.0.3 when\n            wrapping functions with default arguments. Invalid or missing default\n            arguments were sometimes being generated into the python layer.\n\n2015-01-08: olly\n\t    Allow C++11 \"explicit constexpr\".  Fixes github issue #284 reported\n\t    by Pawel Tomulik.  Also handle \"constexpr explicit\" and \"constexpr\n\t    static\".\n\n2015-01-08: olly\n\t    When reporting an error for a construct which hasn't been\n\t    terminated when the end of the file is reached, report it at the\n\t    start line rather than \"EOF\" as then tools like editors and IDEs\n\t    will take you to a generally more useful place for fixing the\n\t    problem.\n\n2015-01-08: olly\n\t    Improve error messages for a few cases which previously gave the\n\t    one of the cryptic catch-all errors \"Syntax error in input\".\n\n2015-01-08: olly\n\t    Provide -cppext as a general command line option for setting the\n\t    extension used for generated C++ files (previously it was specific\n\t    to the PHP backend).  Deprecate the equivalent -suffix option\n\t    provided by the Ocaml backend, but continue to support that for\n\t    now.\n\nVersion 3.0.3 (30 Dec 2014)\n===========================\n\n2014-12-27: wsfulton\n            Fix #280 - abort using all default template parameters within other template\n            parameters.\n\n2014-12-27: talby\n            [Perl] Issue #282 perl5 archlib vs archlibexp\n            [Perl] tidy \"warning: duplicate 'extern' declaration specifier\" when building generated code\n            under clang\n\n2014-12-18: wsfulton\n            Add support for %constant and structs/classes - issue #272\n\n2014-12-09: wsfulton\n            Fix #245 - regression (since swig-3.0.0) in templated constructors.\n            Templated constructors could not be instantiated - they were incorrectly ignored with a warning 504:\n            \"Function: xyz must have a return type. Ignored.\"\n\n2014-12-07: wsfulton\n            Add support for C++11 strongly typed enumerations.\n\n2014-11-21: wsfulton\n            [Java C#] Fix multiply defined error when using %rename of enum items when using the \"simple enum\"\n            wrappers.\n\n2014-10-28: vadz\n            [Python] Patch #201 The generated .py file no longer uses *args for all Python parameters.\n            Instead, the parameters are named using the C++ parameter names.\n\n            \"compactdefaultargs\" feature can be enabled to restore the old behaviour.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2014-10-24: timotheecour\n            [D] Patch #204 Use core.atomic.atomicOp to mutate shared variables\n\n2014-10-21: wsfulton\n            Fix issue #242 - Use of the \"kwargs\" feature no longer automatically turns on the\n            \"compactdefaultargs\" feature if the target language does not support kwargs.\n            This change affects all languages except Python and Ruby.\n\n            *** POTENTIAL INCOMPATIBILITY  ***\n\n2014-10-10: diorcety\n            [Python] Patch #232 Fix property access using directors\n\n2014-10-06: wsfulton\n            [Python] Fixes when using -builtin and std::vector/std::list wrappers to allow deletion\n            of single elements, such as 'del vec[0]'.\n\n2014-09-30: oliverb\n            [Javascript] Merge patch #216 by Richie765 - Added support for many versions of v8 javascript.\n\n2014-09-30: oliverb\n            [Javascript] Merge patch #195 by zittix - Fixed JSClassRef declaration not using the static one.\n\n2014-09-30: ianlancetaylor\n\t    [Go] In configure script, require Go 1.1 or later.\n\n2014-09-30: wsfulton\n            [Python] Patch #207 - Fix No module error with -relativeimport when using single\n            header file import.\n\n2014-09-27: wsfulton\n            Patch #208 - Initialise newly created array when using array_functions in the\n            carrays.i library (C++ usage).\n\n2014-09-27: wsfulton\n            [Ruby] Patch #187 - Fix crash on shutdown of the Ruby interpreter if more than one\n            module was loaded at a time when data is being shared between modules.\n\n2014-09-27: wsfulton\n            [Java] Patch #168 - Fix leak in Java director string handling after the Java\n            upcall when called from a native thread.\n\n2014-09-25: ianlancetaylor\n\t    [Go] Adjust generated code to work with upcoming Go 1.4\n\t    release.\n\n2014-09-23: wsfulton\n            [Python] Add patch from Thomas Maslach to fix crash in wrappers when using -threads in\n            the STL iterators (SwigPyIterator destructor).\n\n2014-09-17: wsfulton\n            [C#] Merge patch #229 from contre - Add bool array types to arrays_csharp.i\n\n2014-09-12: olly\n\t    [PHP] Add support for specifying any PHP interfaces a wrapped class\n\t    implements, e.g.: %typemap(\"phpinterfaces\") MyIterator \"Iterator\"\n\n2014-09-11: olly\n\t    [PHP] Fix throwing a PHP exception through C++ from a subclassed\n\t    director method - PHP NULL gets returned by the subclassed method\n\t    in this case, so the directorout typemap needs to allow that (at\n\t    least if an exception is active).\n\n2014-09-09: ianlancetaylor\n\t    [Go] Add goargout typemap.\n\n2014-09-09: olly\n\t    [PHP] Fix segmentation faults with directors in PHP >= 5.4, and\n\t    reenable runme tests for director_basic testcase.  Fix from\n\t    pavel-charvat in issue#164.\n\n2014-09-05: ianlancetaylor\n\t    [Go] Add imtype, goin, goout, godirectorin, and\n\t    godirectorout typemaps, to support writing Go code to\n\t    convert between types.\n\n2014-09-02: olly\n\t    [Python] Fix regression in indentation of python code produced with\n\t    -modern, introduced by changes in #188.  Reported by fabiencastan\n\t    in #218.\n\n2014-09-01: olly\n\t    Issue an error for unknown SWIG preprocessor directives, rather\n\t    than quietly ignoring them.  Reported by jrhelsey in issue#217.\n\n            *** POTENTIAL INCOMPATIBILITY  ***\n\n2014-08-15: talby\n            [Perl] Include guard fix for nested modules from Anthony Heading (SF Patch #350).\n\n2014-08-04: wsfulton\n            [C#] Merge patch #200 from gpetrou - Changed CSharp license header to include auto-generated\n            tag so that StyleCop ignores the files.\n\n2014-08-04: wsfulton\n            [Java] Merge patch #198 from Yuval Kashtan - Support for java.nio.ByteBuffer mapping to\n            unsigned char * in various.i in NIOBUFFER typemaps.\n\n2014-07-14: ianlancetaylor\n\t    [Go] Change struct definition to use void *, not uint8, so\n\t    that the type is recorded as possibly containing\n\t    pointers.  This ensures that the 1.3 garbage collector\n\t    does not collect pointers passed to C++ code.\n\n2014-07-01: wsfulton\n            Fix SF Bug #1375 - Expansion of the $parentclassname special variable incorrectly contains\n            brackets in the expanded name.\n\nVersion 3.0.2 (4 Jun 2014)\n==========================\n\n2014-06-02: v-for-vandal\n            [Lua] Pull request #176:\n            If class has no __eq implemented, then default __eq is generated. \n            Default __eq compares actual pointers stored inside Lua userdata.\n\n2014-06-02: vkalinin\n            Fix #183 - %extend and unnamed nested structs\n\n2014-05-28: kwwette\n            Fix install failure when using an 'out of source' build using the shipped\n            tarball - regression introduced in swig-3.0.1.\n\n2014-05-24: kwwette\n            [Octave] Remove deprecated -global/-noglobal command-line arguments\n\n            *** POTENTIAL INCOMPATIBILITY  ***\n\nVersion 3.0.1 (27 May 2014)\n===========================\n\n2014-05-25: hfalcic\n\t    [Python] Python 3 byte string output: use errors=\"surrogateescape\"\n            if available on the version of Python that's in use. This allows\n            obtaining the original byte string (and potentially trying a fallback\n            encoding) if the bytes can't be decoded as UTF-8.\n\n            Previously, a UnicodeDecodeError would be raised with no way to treat\n            the data as bytes or try another codec.\n\n2014-05-18: vkalinin\n\t    Bug #175 - Restore %extend to work for unnamed nested structures by using a C\n            symbol comprising the outer structure name and unnamed variable instance name.\n\n2014-05-15: kwwette\n\t    Add #166 - 'make check' now works out of source. This required the examples to build\n            out of source. The main languages have been tested - C#, Go, Guile, Java, Javascript,\n            Lua, Octave, Perl, PHP, Python, Ruby and Tcl.\n\n2014-05-01: Oliver Buchtala\n\t    Javascript support added, see Javascript chapter in the documentation.\n\n2014-05-01: olly\n\t    [PHP] The generated __isset() method now returns true for read-only properties.\n\n2014-04-24: kwwette\n            [Go] Fix go ./configure parsing of gccgo --version, and\n            goruntime.swg typo in __GNUC_PATCHLEVEL__ (SF Bug #1298)\n\n2014-04-24: kwwette\n            Fix {python|perl5|ruby|tcl}/java examples\n\n            In Lib/gcj/cni.i, for compatibility with newer gcj versions:\n\n            - remove JvAllocObject() which gcj no longer defines, from gcj Changelog:\n              2004-04-16  Bryce McKinlay  <mckinlay@redhat.com>\n                * gcj/cni.h (JvAllocObject): Remove these obsolete,\n                undocumented CNI calls.\n\n            - change JvCreateJavaVM() argument from void* to JvVMInitArgs*, from gcj Changelog:\n              2005-02-23  Thomas Fitzsimmons  <fitzsim@redhat.com>\n              PR libgcj/16923\n              ...\n              (JvCreateJavaVM): Declare vm_args as JvVMInitArgs* rather than void*.\n\n            *** POTENTIAL INCOMPATIBILITY  ***\n\n2014-04-08: wsfulton\n            SF Bug #1366 - Remove duplicate declarations of strtoimax and strtoumax in inttypes.i\n\n2014-04-08: wsfulton\n            [Java C#] Enums which have been ignored via %ignore and are subsequently\n            used are handled slightly differently. Type wrapper classes are now generated\n            which are effectively a wrapper of an empty enum. Previously in Java uncompilable\n            code was generated and in C# an int was used.\n\n2014-04-04: wsfulton\n            Fix regression in 3.0.0 where legal code following an operator<< definition might\n            give a syntax error. SF Bug #1365.\n\n2014-04-03: olly\n\t    [PHP] Fix wrapping director constructors with default parameters\n\t    with a ZTS-enabled build of PHP.\n\n2014-04-02: olly\n\t    [PHP] Pass the ZTS context we already have to avoid needing to\n\t    call TSRMLS_FETCH, which is relatively expensive.\n\n2014-04-02: olly\n\t    [PHP] Pass ZTS context through to t_output_helper() so it works\n\t    with a ZTS-enabled build of PHP.  Reported by Pierre Labastie in\n\t    github PR#155.\n\n2014-03-28: wsfulton\n            [Java C# D Go] Fixes for C enums used in an API and the definition of the enum\n            has not been parsed. For D, this fixes a segfault in SWIG. The other languages\n            now produce code that compiles, although the definition of the enum is needed\n            in order to use the enum properly from the target language.\n\n2014-03-23: v-for-vandal\n            [Lua] Fix for usage of snprintf in Lua runtime which Visual Studio does not have.\n\nVersion 3.0.0 (16 Mar 2014)\n===========================\n\n2014-03-16: wsfulton\n            C++11 support initially developed as C++0x support by Matevz Jekovec as a Google Summer of Code\n            project has been further extended. The C++11 support is comprehensive, but by no means complete\n            or without limitations. Full details for each new feature in C++11 is covered in the\n            CPlusPlus11.html chapter in the documentation which is included in SWIG and also available\n            online at https://www.swig.org/Doc3.0/CPlusPlus11.html.\n\n2014-03-14: v-for-vandal\n            [Lua] Numerous Lua improvements:\n            1. %nspace support has been added. Namespaces are mapped to tables in the module, with the same\n               name as the C++ namespace.\n            2. Inheritance is now handled differently. Each class metatable keeps a list of class bases instead\n               of merging all members of all bases into the derived class.\n            3. The new metatables result in differences in accessing class members. For example:\n\n                 %module example\n                 struct Test {\n                     enum { TEST1 = 10, TEST2 = 20 };\n                     static const int ICONST = 12;\n                 };\n\n                 Now this can be used as follows:\n                   print(example.Test.TEST1)\n                   print(example.Test.ICONST)\n                 The old way was:\n                   print(example.Test_TEST1)\n                   print(example.Test_ICONST)\n\n            4. The special class metatable member \".constructor\" was removed. Now SWIG generates the proxy\n               function by itself and assigns it directly to the class table \"__call\" method.\n            5. eLua should also now support inheritance.\n            6. 'const' subtable in eLua is considered deprecated.\n\n            Changes in behaviour:\n            a. You can no longer assign to non-existing class members in classes without a __setitem__ method.\n               It will cause a Lua error.\n            b. You can no longer iterate over a module table and copy everything into the global namespace.\n               Actually, this was never the case, but it is now explicitly prohibited.\n            c. Now changing a base class will immediately affect all derived classes.\n            d. There might be some issues with inheritance. Although the bases iteration scheme is the same\n               as was used for merging base classes into derived one, some unknown issues may arise.\n\n            The old metatable behaviour can be restored by using the -no-old-metatable-bindings option.\n\n            *** POTENTIAL INCOMPATIBILITY  ***\n\n2014-03-06: wsfulton\n            [Python] Change in default behaviour wrapping C++ bool. Only a Python True or False\n            will now work for C++ bool parameters. This fixes overloading bool with other types.\n            Python 2.3 minimum is now required for wrapping bool.\n\n            When wrapping:\n\n              const char* overloaded(bool value) { return \"bool\"; }\n              const char* overloaded(int value) { return \"int\"; }\n\n            Previous behaviour:\n              >>> overloaded(False)\n              'int'\n              >>> overloaded(True)\n              'int'\n              >>> overloaded(0)\n              'int'\n\n            Now we get the expected behaviour:\n              >>> overloaded(False)\n              'bool'\n              >>> overloaded(0)\n              'int'\n\n            The consequence is when wrapping bool in non-overloaded functions:\n\n              const char* boolfunction(bool value) { return value ? \"true\" : \"false\"; }\n\n            The previous behaviour was very Pythonic:\n              >>> boolfunction(\"\")\n              'false'\n              >>> boolfunction(\"hi\")\n              'true'\n              >>> boolfunction(12.34)\n              'true'\n              >>> boolfunction(0)\n              'false'\n              >>> boolfunction(1)\n              'true'\n\n            Now the new behaviour more along the lines of C++ due to stricter type checking. The\n            above calls result in an exception and need to be explicitly converted into a bool as\n            follows:\n              >>> boolfunction(0)\n              Traceback (most recent call last):\n                File \"<stdin>\", line 1, in <module>\n              TypeError: in method 'boolfunction', argument 1 of type 'bool'\n              >>> boolfunction(bool(0))\n              'false'\n\n            The old behaviour can be resurrected by passing the -DSWIG_PYTHON_LEGACY_BOOL command line\n            parameter when executing SWIG. Typemaps can of course be written to customise the behaviour\n            for specific parameters.\n\n            *** POTENTIAL INCOMPATIBILITY  ***\n\n2014-03-06: wsfulton\n\t    Fix SF Bug #1363 - Problem with method overloading when some methods are added by %extend\n            and others are real methods and using template default parameters with smart pointers.\n            This is noticeable as a regression since 2.0.12 when using the default smart pointer\n            handling for some languages when the smart pointer wraps std::map and other STL containers.\n\n2014-03-02: wsfulton\n\t    [Python] SF Patch #346 from Jens Krueger. Correct exception thrown attempting to\n            access a non-existent C/C++ global variable on the 'cvar' object. The exception thrown\n            used to be a NameError. However, as this access is via a primary, an AttributeError\n            is more correct and so the exception thrown now is an AttributeError. Reference:\n            http://docs.python.org/2/reference/expressions.html#attribute-references\n\n            *** POTENTIAL INCOMPATIBILITY  ***\n\n2014-03-01: wsfulton\n\t    [Python] Patch #143 Fix type shown when using type() to include the module and package\n            name when using -builtin.\n\n2014-03-01: wsfulton\n\t    [Python] SF patch #347 Fix missing argument count checking with -modern.\n            Fixes regression introduced when builtin changes were introduced in SWIG-2.0.3.\n\n2014-02-21: wsfulton\n\t    [PHP] Fix warning suppression using %warnfilter for PHP reserved class names.\n\n2014-02-19: olly\n\t    [Lua] Add keyword warnings for Lua keywords and Basic Functions.\n\n2014-02-19: olly\n\t    -Wallkw now includes keywords for all languages with keyword\n\t    warnings (previously Go and R were missing).\n\n2014-02-19: olly\n\t    [PHP] Update the lists of PHP keywords with new ones from PHP 5.4\n\t    and newer (and some missing ones from 5.3).  Reserved PHP constants\n\t    names are now checked against enum values and constants, instead\n\t    of against function and method names.  Built-in PHP function names\n\t    no longer match methods added by %extend.  Functions and methods\n\t    named '__sleep', '__wakeup', 'not', 'parent', or 'virtual' are no\n\t    longer needlessly renamed.\n\n2014-02-15: wsfulton\n\t    Fix the %$ismember %rename predicates to also apply to members added via %extend.\n\n            Add %$isextendmember for %rename of members added via %extend. This can be used to\n            distinguish between normal class/struct members and %extend members. For example\n            '%$ismember, %$not %$isextendmember' will now identify just class/struct members.\n\n            *** POTENTIAL INCOMPATIBILITY  ***\n\n2014-02-16: hfalcic\n            [Python] Patch #137 - fix crashes/exceptions in exception handling in Python 3.3\n\n2014-02-15: wsfulton\n            [Java] Add support for the cdata library.\n\n2014-02-08: vkalinin\n            Nested class support added. This primarily allows SWIG to properly parse nested\n            classes and keep the nested class information in the parse tree. Java and C#\n            have utilised this information wrapping the C++ nested classes as Java/C#\n            nested classes. The remaining target languages ignore nested classes as in\n            previous versions. Help is needed by users of these remaining languages to\n            design how C++ nested classes can be best wrapped. Please talk to us on the\n            swig-devel mailing list if you think you can help.\n\n            Previously, there was limited nested class support. Nested classes were treated\n            as opaque pointers. However, the \"nestedworkaround\" feature provided a way to\n            wrap a nested class as if it was a global class. This feature no longer exists\n            and is replaced by the new \"flatnested\" feature. This effectively does the same\n            thing with less manual code to be written. Please see the 'Nested classes'\n            section in the documentation in SWIGPlus.html if you were previously using this\n            feature.\n\n            SWIG now parses the contents of nested classes where previously it did not. You\n            may find that you will need to make adjustments to your interface file as\n            effectively extra code is being wrapped.\n\n            *** POTENTIAL INCOMPATIBILITY  ***\n\n2014-02-06: gjanssens\n            [Guile] Patch #133. Make scm to string conversion work with non-ascii strings.\n            Guile 2 has a completely rewritten string implementation. SWIG made some assumptions\n            that are no longer valid as to the internals of guile's string representation.\n\n2014-01-30: wsfulton\n            [C#] Add new swigtype_inout.i library containing SWIGTYPE *& OUTPUT typemaps.\n\n            Example usage wrapping:\n\n              void f(XXX *& x) { x = new XXX(111); }\n\n            would be:\n\n              XXX x = null;\n              f(out x);\n              // use x\n              x.Dispose(); // manually clear memory or otherwise leave out and leave it to the garbage collector\n\n2014-01-21: ianlancetaylor\n\t    [Go] Add %go_import directive.\n\n2014-01-21: ianlancetaylor\n\t    [Go] Add support for Go 1.3, not yet released.\n\n2014-01-20: wsfulton\n            Director exceptions (Swig::DirectorException) now derive from std::exception\n            and hence provide the what() method. In Python and Ruby, this replaces the now\n            deprecated DirectorException::getMessage() method.\n\n2014-01-14: diorcety\n            Patch #112 - Fix symbol resolution involving scopes that have multiple levels\n            of typedefs - fixes some template resolutions as well as some typemap searches.\n\n2014-01-11: wsfulton\n            Fix and document the naturalvar feature override behaviour - the naturalvar\n            feature attached to a variable name has precedence over the naturalvar\n            feature attached to the variable's type. The overriding was not working\n            when turning the feature off on the variable's name.\n\n            Fix so that any use of the naturalvar feature will override the global\n            setting. Previously when set globally by -naturalvar or %module(naturalvar=1),\n            use of the naturalvar feature was not always honoured.\n\n2014-01-06: ianlancetaylor\n\t    [Go] Fix bug that broke using directors from a thread not\n\t    created by Go.\n\n2013-12-24: ptomulik\n            [Python] SF Bug #1297\n\n            Resolve several issues related to python imports.\n            For example, it's now possible to import modules having the same module\n            names, but belonging in different packages.\n            \n            From the user's viewpoint, this patch gives a little bit more control on\n            import statements generated by SWIG. The user may choose to use relative\n            or absolute imports.\n            \n            Some details:\n              - we (still) generate import statements in the form 'import a.b.c' which\n                corresponds to absolute imports in python3 and (the only available)\n                ambiguous one in python2.\n              - added -relativeimport option to use explicit relative import syntax\n                (python3),\n\n            The \"Python Packages\" section in the documentation discusses how to work\n            with importing packages including the new -relativeimport command line option.\n\n2013-12-23: vadz\n            [Octave, Perl, Python, R, Ruby, Tcl] Change the length of strings created from fixed-size char\n            buffers in C code.\n\n            This is a potential backwards compatibility break: a \"char buf[5]\" containing \"ho\\0la\" was\n            returned as a string of length 5 before, but is returned as a string of length 2 now. Also,\n            it was possible to assign a (non-NUL-terminated) string \"hello\" to such a buffer before but\n            now this fails and only \"helo\" can fit.\n\n            Apply \"char FIXSIZE[ANY]\" typemaps to explicitly choose the old behaviour.\n\n            *** POTENTIAL INCOMPATIBILITY  ***\n\n2013-12-23: talby\n            [Perl] Add support for directors.\n\n2013-12-18: ianlancetaylor\n\t    [Go] Don't require that Go environment variables be set\n\t    when running examples or testsuite when using Go 1 or\n\t    later.\n\n2013-12-17: ianlancetaylor\n\t    [Go] Remove -longsize option (for backward compatibility,\n\t    ignore it if seen).\n\n2013-12-17: ianlancetaylor\n\t    [Go] Add -go-pkgpath option.\n\n2013-12-16: ianlancetaylor\n\t    [Go] Update for Go 1.2 release.  Add support for linking\n\t    SWIG code directly into executable, rather than using a\n\t    shared library.\n\n2013-12-13: ianlancetaylor\n\t    [Go] Add SWIG source file name as comments in generated\n\t    files.  This can be used by Go documentation tools.\n\n2013-12-12: jleveque\n\t    [Lua] Fix typo (wchar instead of wchar_t) which made wchar.i\n\t    for Lua useless.\n\n2013-12-12: vmiklos\n\t    [PHP] PHP's peculiar call-time pass-by-reference feature was\n\t    deprecated in PHP 5.3 and removed in PHP 5.4, so update the REF\n\t    typemaps in phppointers.i to specify pass-by-reference in the\n\t    function definition.  Examples/php/pointer has been updated\n\t    accordingly.\n\n2013-12-12: olly\n\t    [PHP] The usage of $input in PHP directorout typemaps has been\n\t    changed to be consistent with other languages.  The typemaps\n\t    provided by SWIG have been updated accordingly, but if you\n\t    have written your own directorout typemaps, you'll need to\n\t    update $input to &$input (or make equivalent changes).\n\n            *** POTENTIAL INCOMPATIBILITY  ***\n\n2013-11-27: vadz\n            [C#, Java, Python] Add std_auto_ptr.i defining typemaps for returning std::auto_ptr<>.\n\n2013-11-09: wsfulton\n            [C#] Apply patch #79 from Brant Kyser\n              - Remove using directives from the generated C# code and fully qualify the use of all .NET\n                framework types in order to minimize potential name collisions from input files defining\n                types, namespace, etc with the same name as .NET framework members.\n              - Globally qualify the use of .NET framework types in the System namespace\n              - Remove .NET 1.1 support, .NET 2 is the minimum for the C# module\n\n            This is a potential backwards compatibility break if code has been added relying on these using\n            statements that used to be generated:\n\n              using System;\n              using System.Runtime.InteropServices;\n\n            The quick fix to add these back in is to add the -DSWIG2_CSHARP command line option when\n            executing SWIG. See CSharp.html documentation for more info.\n\n            *** POTENTIAL INCOMPATIBILITY  ***\n\n2013-11-05: wsfulton\n            [Java] Fix some corner cases for the $packagepath/$javaclassname special variable substitution.\n\n2013-11-05: wsfulton\n            [Java] Apply patch #91 from Marvin Greenberg - Add director:except feature for improved\n            exception handling in director methods for Java.\n\n2013-10-15: vadz\n            Allow using \\l, \\L, \\u, \\U and \\E in the substitution part of %(regex:/pattern/subst/)\n            inside %rename to change the case of the text being replaced.\n\n2013-10-12: wsfulton\n            [CFFI] Apply #96 - superclass not lispify\n\n2013-10-12: wsfulton\n            Merge in C++11 support from the gsoc2009-matevz branch where Matevz Jekovec first\n            started the C++0x additions. Documentation of the C++11 features supported is in a\n            new Chapter of the documentation, \"SWIG and C++11\" in Doc/Manual/CPlusPlus11.html.\n\n2013-10-04: wsfulton\n            Fix %naturalvar not having any affect on templated classes instantiated with an\n            enum as the template parameter type. Problem reported by Vadim Zeitlin.\n\n2013-09-20: wsfulton\n            [Java] Fix a memory leak for the java char **STRING_ARRAY typemaps.\n\nVersion 2.0.12 (9 Feb 2014)\n===========================\n\n2014-01-16: wsfulton\n            [PHP] Fix compilation error in ZTS mode (64 bit windows) due to incorrect placement\n            of TSRMLS_FETCH() in SWIG_Php_GetModule() as reported by Mark Dawson-Butterworth.\n\n2014-01-13: kwwette\n            [Octave] update support to Octave version 3.8.0\n\n            - Octave 3.8.0 no longer defines OCTAVE_API_VERSION_NUMBER, but 3.8.1\n              will define OCTAVE_{MAJOR,MINOR,PATCH}_VERSION instead: see\n                http://hg.savannah.gnu.org/hgweb/octave/rev/b6b6e0dc700e\n              So we now use a new macro SWIG_OCTAVE_PREREQ(major,minor,patch) to\n              enable features requiring Octave version major.minor.patch or later.\n\n              For Octave versions prior to 3.8.1, we reconstruct values for\n              OCTAVE_{MAJOR,MINOR,PATCH}_VERSION based on OCTAVE_API_VERSION_NUMBER,\n              extracted from Octave's ChangeLogs. An additional hack is needed to\n              distinguish between Octave <= 3.2.x and 3.8.0, neither of which define\n              OCTAVE_API_VERSION_NUMBER.\n\n            - Octave 3.8.0 deprecates symbol_table::varref(), so remove its use\n              for this and future versions of Octave.\n\n            - Octave 3.8.0 removes octave_value::is_real_nd_array(), used in\n              octave_swig_type::dims(). Its use is not required here, so remove it.\n\n            - Retested against Octave versions 3.0.5, 3.2.4, 3.4.3, 3.6.4, and 3.8.0.\n\n            - Updated Octave documentation with tested Octave versions, and added a\n              warning against using versions <= 3.x.x, which are no longer tested.\n\n2013-12-22: wsfulton\n            C++11 support for new versions of erase and insert in the STL containers.\n\n            The erase and insert methods in the containers use const_iterator instead\n            of iterator in C++11.  There are times when the methods wrapped must match\n            the parameters exactly. Specifically when full type information for\n            template types is missing or SWIG fails to look up the type correctly,\n            for example:\n\n              %include <std_vector.i>\n              typedef float Real;\n              %template(RealVector) std::vector<Real>;\n\n            SWIG does not find std::vector<Real>::iterator because %template using\n            typedefs does not always work and so SWIG doesn't know if the type is\n            copyable and so uses SwigValueWrapper<iterator> which does\n            not support conversion to another type (const_iterator). This resulted\n            in compilation errors when using the C++11 version of the containers.\n\n            Closes #73\n\n2013-10-17: wsfulton\n            [R] Fix SF #1340 - Visual Studio compile error in C++ wrappers due to #include <exception>\n            within extern \"C\" block.\n\n2013-10-17: wsfulton\n            [Python] Fix SF #1345 - Missing #include <stddef.h> for offsetof when using -builtin.\n\n2013-10-12: wsfulton\n            [Lua] Apply #92 - missing return statements for SWIG_Lua_add_namespace_details()\n            and SWIG_Lua_namespace_register().\n\nVersion 2.0.11 (15 Sep 2013)\n============================\n\n2013-09-15: wsfulton\n            [R] Fix attempt to free a non-heap object in OUTPUT typemaps for:\n              unsigned short *OUTPUT\n              unsigned long *OUTPUT\n              signed long long *OUTPUT\n              char *OUTPUT\n              signed char*OUTPUT\n              unsigned char*OUTPUT\n\n2013-09-12: wsfulton\n            [Lua] Pull Git patch #62.\n              1) Static members and static functions inside class can be accessed as\n                 ModuleName.ClassName.FunctionName (MemberName respectively). Old way such as\n                 ModuleName.ClassName_FunctionName still works.\n              2) Same goes for enums inside classes: ModuleName.ClassName.EnumValue1 etc.\n\n2013-09-12: wsfulton\n            [UTL] Infinity is now by default an acceptable value for type 'float'. This fix makes\n            the handling of type 'float' and 'double' the same. The implementation requires the\n            C99 isfinite() macro, or otherwise some platform dependent equivalents, to be available.\n\n            Users requiring the old behaviour of not accepting infinity, can define a 'check' typemap\n            wherever a float is used, such as:\n\n              %typemap(check,fragment=\"<float.h>\") float, const float & %{\n                if ($1 < -FLT_MAX || $1 > FLT_MAX) {\n                  SWIG_exception_fail(SWIG_TypeError, \"Overflow in type float\");\n                }\n              %}\n\n            *** POTENTIAL INCOMPATIBILITY  ***\n\n2013-08-30: wsfulton\n            [Lua] Pull Git patch #81: Include Lua error locus in SWIG error messages.  \n            This is standard information in Lua error messages, and makes it much\n            easier to find bugs.\n\n2013-08-29: wsfulton\n            Pull Git patch #75: Handle UTF-8 files with BOM at beginning of file. Was giving an\n            'Illegal token' syntax error.\n\n2013-08-29: wsfulton\n            [C#] Pull Git patch #77: Allow exporting std::map using non-default comparison function.\n\n2013-08-28: wsfulton\n            [Python] %implicitconv is improved for overloaded functions. Like in C++, the methods\n            with the actual types are considered before trying implicit conversions. Example:\n\n              %implicitconv A;\n              struct A {\n                A(int i);\n              };\n              class CCC {\n                public:\n                  int xx(int i) { return 11; }\n                  int xx(const A& i) { return 22; }\n              };\n\n            The following python code:\n\n              CCC().xx(-1)\n\n            will now return 11 instead of 22 - the implicit conversion is not done.\n\n2013-08-23: olly\n\t    [Python] Fix clang++ warning in generated wrapper code.\n\n2013-08-16: wsfulton\n            [Python] %implicitconv will now accept None where the implicit conversion takes a C/C++ pointer.\n            Problem highlighted by Bo Peng. Closes SF patch #230.\n\n2013-08-07: wsfulton\n            [Python] SF Patch #326 from Kris Thielemans - Remove SwigPyObject_print and SwigPyObject_str and\n            make the generated wrapper use the default python implementations, which will fall back to repr\n            (for -builtin option).\n\n            Advantages:\n            - it avoids the swig user having to jump through hoops to get print to work as expected when\n              redefining repr/str slots.\n            - typing the name of a variable on the python prompt now prints the result of a (possibly redefined)\n              repr, without the swig user having to do any extra work.\n            - when redefining repr, the swig user doesn't necessarily have to redefine str as it will call the\n              redefined repr\n            - the behaviour is exactly the same as without the -builtin option while requiring no extra work\n              by the user (aside from adding the %feature(\"python:slot...) statements of course)\n\n            Disadvantage:\n            - default str() will give different (but clearer?) output on swigged classes\n\n2013-07-30: wsfulton\n            [Python, Ruby] Fix #64 #65: Missing code in std::multimap wrappers. Previously an instantiation\n            of a std::map was erroneously required in addition to an instantiation of std::multimap with the\n            same template parameters to prevent compilation errors for the wrappers of a std::multimap.\n\n2013-07-14: joequant\n            [R] Change types file to allow for SEXP return values\n\n2013-07-05: wsfulton\n            [Python] Add %pythonbegin directive which works like %pythoncode, except the specified code is\n            added at the beginning of the generated .py file. This is primarily needed for importing from\n            __future__ statements required to be at the very beginning of the file. Example:\n\n              %pythonbegin %{\n              from __future__ import print_function\n              print(\"Loading\", \"Whizz\", \"Bang\", sep=' ... ')\n              %}\n\n2013-07-01: wsfulton\n            [Python] Apply SF patch #340 - Uninitialized variable fix in SWIG_Python_NonDynamicSetAttr\n            when using -builtin.\n\n2013-07-01: wsfulton\n            [Python, Ruby, Ocaml] Apply SF patch #341 - fix a const_cast in generated code that was generating\n            a <:: digraph when using the unary scope operator (::) (global scope) in a template type.\n\n2013-07-01: wsfulton\n            [Python] Add SF patch #342 from Christian Delbaere to fix some director classes crashing on\n            object deletion when using -builtin. Fixes SF bug #1301.\n\n2013-06-11: wsfulton\n            [Python] Add SWIG_PYTHON_INTERPRETER_NO_DEBUG macro which can be defined to use the Release version\n            of the Python interpreter in Debug builds of the wrappers. The Visual Studio .dsp example\n            files have been modified to use this so that Debug builds will now work without having\n            to install or build a Debug build of the interpreter.\n\n2013-06-07: wsfulton\n\t    [Ruby] Git issue #52. Fix regression with missing rb_complex_new function for Ruby\n            versions prior to 1.9 using std::complex wrappers if just using std::complex as an output type.\n            Also fix the Complex helper functions external visibility (to static by default).\n\n2013-06-04: olly\n\t    [PHP] Fix SWIG_ZTS_ConvertResourcePtr() not to dereference NULL\n\t    if the type lookup fails.\n\nVersion 2.0.10 (27 May 2013)\n============================\n\n2013-05-25: wsfulton\n            [Python] Fix Python 3 inconsistency when negative numbers are passed\n            where a parameter expects an unsigned C type. An OverFlow error is\n            now consistently thrown instead of a TypeError.\n\n2013-05-25: Artem Serebriyskiy\n            SVN Patch ticket #338 - fixes to %attribute macros for template usage\n            with %arg.\n\n2013-05-19: wsfulton\n            Fix ccache-swig internal error bug due to premature file cleanup.\n\n            Fixes SF bug 1319 which shows up as a failure in the ccache tests on\n            Debian 64 bit Wheezy, possibly because ENABLE_ZLIB is defined.\n\n            This is a corner case which will be hit when the maximum number of files\n            in the cache is set to be quite low (-F option), resulting in a cache miss.\n\n2013-05-09: kwwette\n            [Octave] Fix bugs in Octave module loading:\n            - fix a memory leak in setting of global variables\n            - install functions only once, to speed up module loads\n\n2013-04-28: gjanssens\n            [Guile] Updates in guile module:\n            - Add support for guile 2.0\n            - Drop support for guile 1.6\n            - Drop support for generating wrappers using guile's gh interface.\n              All generated wrappers will use the scm interface from now on.\n            - Deprecate -gh and -scm options. They are no longer needed.\n              A warning will be issued when these options are still used.\n            - Fix all tests and examples to have a successful travis test\n\n2013-04-18: wsfulton\n            Apply Patch #36 from Jesus Lopez to add support for $descriptor() special variable macro expansion \n            in fragments. For example:\n\n              %fragment(\"nameDescriptor\", \"header\")\n              %{\n                static const char *nameDescriptor = \"$descriptor(Name)\";\n              %}\n\n            which will generate into the wrapper if the fragment is used:\n\n              static const char *nameDescriptor = \"SWIGTYPE_Name\";\n\n2013-04-18: wsfulton\n            Fix SF Bug #428 - Syntax error when preprocessor macros are defined inside of enum lists, such as:\n\n              typedef enum {\n                eZero = 0\n              #define ONE 1\n              } EFoo;\n\n            The macros are silently ignored.\n\n2013-04-17: wsfulton\n            [C#] Pull patch #34 from BrantKyser to fix smart pointers in conjunction with directors.\n\n2013-04-15: kwwette\n            [Octave] Fix bugs in output of cleanup code.\n            - Cleanup code is now written also after the \"fail:\" label, so it will be called if\n              a SWIG_exception is raised by the wrapping function, consistent with other modules.\n            - Octave module now also recognises the \"$cleanup\" special variable, if needed.\n\n2013-04-08: kwwette\n            Add -MP option to SWIG for generating phony targets for all dependencies.\n            - Prevents make from complaining if header files have been deleted before\n              the dependency file has been updated.\n            - Modelled on similar option in GCC.\n\n2013-04-09: olly\n\t    [PHP] Add missing directorin typemap for char* and char[] which\n\t    fixes director_string testcase failure.\n\n2013-04-05: wsfulton\n            [Ruby] SF Bug #1292 - Runtime fixes for Proc changes in ruby-1.9 when using STL\n            wrappers that override the default predicate, such as:\n\n              %template(Map) std::map<swig::LANGUAGE_OBJ, swig::LANGUAGE_OBJ, swig::BinaryPredicate<> >;\n\n2013-04-05: wsfulton\n            [Ruby] SF Bug #1159 - Correctly check rb_respond_to call return values to fix some\n            further 1.9 problems with functors and use of Complex wrappers.\n\n2013-04-02: wsfulton\n            [Ruby] Runtime fixes for std::complex wrappers for ruby-1.9 - new native Ruby complex numbers are used.\n\n2013-03-30: wsfulton\n            [Ruby] Fix seg fault when using STL containers of generic Ruby types, GC_VALUE or LANGUAGE_OBJECT,\n            on exit of the Ruby interpreter. More frequently observed in ruby-1.9.\n\n2013-03-29: wsfulton\n            [Ruby] Fix delete_if (reject!) for the STL container wrappers which previously would\n            sometimes seg fault or not work.\n\n2013-03-25: wsfulton\n            [Python] Fix some undefined behaviour deleting slices in the STL containers.\n\n2013-03-19: wsfulton\n            [C#, Java, D] Fix seg fault in SWIG using directors when class and virtual method names are\n            the same except being in different namespaces when the %nspace feature is not being used.\n\n2013-02-19: kwwette\n            Fix bug in SWIG's handling of qualified (e.g. const) variables of array type. Given the typedef\n              a(7).q(volatile).double myarray     // typedef volatile double[7] myarray;\n            the type\n              q(const).myarray                    // const myarray\n            becomes\n              a(7).q(const volatile).double       // const volatile double[7]\n            Previously, SwigType_typedef_resolve() produces the type\n              q(const).a(7).q(volatile).double    // non-sensical type\n            which would never match %typemap declarations, whose types were parsed correctly.\n            Add typemap_array_qualifiers.i to the test suite which checks for the correct behaviour.\n\n2013-02-18: wsfulton\n            Deprecate typedef names used as constructor and destructor names in %extend. The real\n            class/struct name should be used.\n\n              typedef struct tagEStruct {\n                int ivar;\n              } EStruct;\n\n              %extend tagEStruct {\n                EStruct() // illegal name, should be tagEStruct()\n                {\n                  EStruct *s = new EStruct();\n                  s->ivar = ivar0;\n                  return s;\n                }\n                ~EStruct() // illegal name, should be ~tagEStruct()\n                {\n                  delete $self;\n                }\n              }\n\n            For now these trigger a warning:\n\n              extend_constructor_destructor.i:107: Warning 522: Use of an illegal constructor name 'EStruct' in\n              %extend is deprecated, the constructor name should be 'tagEStruct'.\n              extend_constructor_destructor.i:111: Warning 523: Use of an illegal destructor name 'EStruct' in\n              %extend is deprecated, the destructor name should be 'tagEStruct'.\n\n            These %extend destructor and constructor names were valid up to swig-2.0.4, however swig-2.0.5 ignored\n            them altogether for C code as reported in SF bug #1306. The old behaviour of using them has been\n            restored for now, but is officially deprecated. This does not apply to anonymously defined typedef\n            classes/structs such as:\n\n              typedef struct {...} X;\n\n2013-02-17: kwwette\n            When generating functions provided by %extend, use \"(void)\" for no-argument functions\n            instead of \"()\". This prevents warnings when compiling with \"gcc -Wstrict-prototypes\".\n\n2013-02-17: kwwette\n            [Octave] Minor fix to autodoc generation: get the right type for functions returning structs.\n\n2013-02-15: wsfulton\n            Deprecate typedef names used in %extend that are not the real class/struct name. For example:\n\n              typedef struct StructBName {\n                int myint;\n              } StructB;\n\n              %extend StructB {\n                void method() {}\n              }\n\n            will now trigger a warning:\n\n              swig_extend.i:19: Warning 326: Deprecated %extend name used - the struct name StructBName\n              should be used instead of the typedef name StructB.\n\n            This is only partially working anyway (the %extend only worked if placed after the class\n            definition). \n\n2013-02-09: wsfulton\n            [CFFI] Apply patch #22 - Fix missing package before &body\n\n2013-01-29: wsfulton\n            [Java] Ensure 'javapackage' typemap is used as it stopped working from version 2.0.5.\n\n2013-01-28: wsfulton\n            [Python] Apply patch SF #334 - Fix default value conversions \"TRUE\"->True, \"FALSE\"->False.\n\n2013-01-28: wsfulton\n            [Java] Apply patch SF #335 - Truly ignore constructors in directors with %ignore.\n\n2013-01-18: Brant Kyser\n            [Java] Patch #15 - Allow the use of the nspace feature without the -package commandline option.\n            This works as long and the new jniclasspackage pragma is used to place the JNI intermediate class\n            into a package and the nspace feature is used to place all exposed types into a package.\n\n2013-01-15: wsfulton\n            Fix Visual Studio examples to work when SWIG is unzipped into a directory containing spaces.\n\n2013-01-15: wsfulton\n            [C#] Fix cstype typemap lookup for member variables so that a fully qualified variable name\n            matches. For example:\n              %typemap(cstype) bool MVar::mvar \"MyBool\"\n              struct MVar {\n                bool mvar;\n              };\n\n2013-01-11: Brant Kyser\n\t    [Java, C#, D] SF Bug #1299 - Fix generated names for when %nspace is used on\n            classes with the same name in two different namespaces.\n\n2013-01-11: Vladimir Kalinin\n\t    [C#] Add support for csdirectorin 'pre', 'post' and 'terminator' attributes.\n\n2013-01-08: olly\n\t    [PHP] Fix to work with a ZTS build of PHP (broken in 2.0.7).\n\n2013-01-07: olly\n\t    Fix bashism in configure, introduced in 2.0.9.\n\n2013-01-06: wsfulton\n            Pull patch #4 from ptomulik to fix SF Bug #1296 - Fix incorrect warning for virtual destructors\n            in templates, such as:\n             Warning 521: Illegal destructor name B< A >::~B(). Ignored.\n\n2013-01-05: wsfulton\n            [Python] Pull patch #3 from ptomulik to fix SF Bug #1295 - standard exceptions as\n            classes using the SWIG_STD_EXCEPTIONS_AS_CLASSES macro.\n\n2013-01-04: wsfulton\n            [Java] Pull patch #2 from BrantKyser to fix SF Bug #1283 - fix smart pointers in conjuction\n            with directors.\n\n2013-01-03: wsfulton\n            [Java] Pull patch #1 from BrantKyser to fix SF Bug #1278 - fix directors and nspace feature when\n            multilevel namespaces are used.\n\nVersion 2.0.9 (16 December 2012)\n================================\n\n2012-12-16: wsfulton\n            Fix garbage line number / empty file name reporting for some missing\n            '}' or ')' error messages.\n\n2012-12-15: kkaempf\n            [Ruby] Apply patch 3530444, Class#methods and Class#constants returns array of\n            symbols in Ruby 1.9+\n\n2012-12-14: kkaempf\n            [Ruby] Apply patch 3530439 and finally replace all occurrences of the STR2CSTR() macro\n            with StringValuePtr(). STR2CSTR was deprecated since years and got removed in Ruby 1.9\n\n2012-12-14: kkaempf\n            [Ruby] Applied patches #3530442 and 3530443 to adapt compile and runtime include\n            paths to match Ruby 1.9+\n\n2012-12-14: wsfulton\n            [CFFI] Fix #3161614 - Some string constants are incorrect\n\n2012-12-13: wsfulton\n            [CFFI] Fix #3529690 - Fix incorrect constant names.\n\n2012-12-12: drjoe\n\t    [R] add fix to finalizer that was missed earlier\n\n2012-12-11: wsfulton\n            [Python] Apply patch #3590522 - fully qualified package paths for Python 3 even if a module is in the\n            same package.\n\n2012-12-08: wsfulton\n            [Python] Bug #3563647 - PyInt_FromSize_t unavailable prior to Python 2.5 for unsigned int types.\n\n2012-12-08: wsfulton\n            [Perl] Fix bug #3571361 - C++ comment in C wrappers.\n\n2012-12-07: wsfulton\n            [C#] Apply patch #3571029 which adds missing director support for const unsigned long long &.\n\n2012-11-28: kwwette\n            [Octave] Simplified module loading: now just the syntax\n            $ example;\n            is accepted, which loads functions globally but constants and variables relative to the current scope.\n            This make module loading behaviour reliably consistent, and reduces problems when loading modules which\n            depend on other modules which may not have been previously loaded.\n\n2012-11-27: wsfulton\n            [cffi] Fix junk output when wrapping single character literal constants.\n\n2012-11-17: wsfulton\n            [Tcl, Modula3] Add missing support for -outdir.\n\n2012-11-17: wsfulton\n            Fix segfaults when using filename paths greater than 1024 characters in length.\n\n2012-11-14: wsfulton\n            [ccache-swig] Apply patch #3586392 from Frederik Deweerdt to fix some error cases - incorrectly using\n            memory after it has been deleted.\n\n2012-11-09: vzeitlin\n            [Python] Fix overflow when passing values greater than LONG_MAX from Python 3 for parameters with unsigned long C type.\n\n2012-11-09: wsfulton\n            Fix some feature matching issues for implicit destructors and implicit constructors and implicit\n            copy constructors added with %copyctor. Previously a feature for these had to be fully qualified\n            in order to match. Now the following will also match:\n\n              %feature(\"xyz\") ~XXX();\n              struct XXX {};\n\n2012-11-09: wsfulton\n            Further consistency in named output typemap lookups for implicit constructors and destructors and\n            implicit copy constructors added with %copyctor. Previously only the fully qualified name was being\n            used, now the unqualified name will also be used. For example, previously:\n\n              example.i:38: Searching for a suitable 'out' typemap for: void Space::More::~More\n                Looking for: void Space::More::~More\n                Looking for: void\n\n            Now the unqualified name is also used:\n\n              example.i:38: Searching for a suitable 'out' typemap for: void Space::More::~More\n                Looking for: void Space::More::~More\n                Looking for: void ~More\n                Looking for: void\n\n2012-11-02: wsfulton\n            Fix some subtle named output typemap lookup misses, the fully qualified name was not always being\n            used for variables, for example:\n\n              struct Glob {\n                int MyVar;\n              };\n\n            Previously the search rules (as shown by -debug-tmsearch) for the getter wrapper were:\n\n              example.i:44: Searching for a suitable 'out' typemap for: int MyVar\n                Looking for: int MyVar\n                Looking for: int\n\n            Now the scope is named correctly:\n\n              example.i:44: Searching for a suitable 'out' typemap for: int Glob::MyVar\n                Looking for: int Glob::MyVar\n                Looking for: int MyVar\n                Looking for: int\n\n2012-10-26: wsfulton\n            Fix director typemap searching so that a typemap specified with a name will be correctly matched. Previously\n            the name was ignored during the typemap search. Applies to the following list of typemaps: \n            directorout, csdirectorout, cstype, imtype, ctype, ddirectorout, dtype, gotype, jtype, jni, javadirectorout.\n\n2012-10-11: wsfulton\n            Most of the special variables available for use in %exception are now also available for expansion in\n            %extend blocks. These are: $name $symname $overname $decl $fulldecl $parentclassname $parentclasssymname, see docs\n            on \"Class extension\" in SWIGPlus.html. Patch based on submission from Kris Thielemans.\n\n2012-10-10: wsfulton\n            Additional new special variables in %exception are expanded as follows:\n              $parentclassname - The parent class name (if any) for a method.\n              $parentclasssymname - The target language parent class name (if any) for a method.\n\n2012-10-08: iant\n\t    [Go] Generating Go code now requires using the -intgosize option to\n\t    indicate the size of the 'int' type in Go.  This is because the\n\t    size of the type is changing from Go 1.0 to Go 1.1 for x86_64. \n\n2012-09-14: wsfulton\n\t    Add new warning if the empty template instantiation is used as a base class, for example:\n\n              template <typename T> class Base {};\n              %template() Base<int>;\n              class Derived : public Base<int> {};\n\n            gives the following warning instead of silently ignoring the base:\n\n            cpp_inherit.i:52: Warning 401: Base class 'Base< int >' has no name as it is an empty template instantiated with '%template()'. Ignored.\n            cpp_inherit.i:51: Warning 401: The %template directive must be written before 'Base< int >' is used as a base class and be declared with a name.\n\n\n2012-09-11: wsfulton\n\t    [Java] Fix #3535304 - Direct use of a weak global reference in directors\n            sometimes causing seg faults especially on Android.\n\n2012-09-06: wsfulton\n\t    [Java] Fix (char *STRING, size_t LENGTH) typemaps to accept NULL string.\n\n2012-08-26: drjoe\n\t    [R] make ExternalReference slot ref to contain reference\n\n2012-08-26: drjoe\n\t    [R] fix Examples/Makefile to use C in $(CC) rather than $(CXX)\n\nVersion 2.0.8 (20 August 2012)\n==============================\n\n2012-08-15: wsfulton\n            [Perl] Add size_type, value_type, const_reference to the STL containers.\n\n2012-08-15: wsfulton\n            [Python] Add discard and add methods to std::set wrappers so that pyabc.i can be used ensuring\n            MutableSet is a valid abstract base class for std::set. As reported by Alexey Sokolov.\n            Similarly for std::multiset.\n\n2012-08-15: wsfulton\n            [Python] Fix #3541744 - Missing PyInt_FromSize_t calls for Python 3.\n\n2012-08-13: wsfulton\n            [Java] Patch from David Baum to add the assumeoverride feature for Java directors to\n            improve performance when all overridden methods can be assumed to be overridden.\n\n2012-08-05: wsfulton\n            [Python] #3530021 Fix unused variable warning.\n\n2012-08-05: wsfulton\n            [C#] Fix #3536360 - Invalid code sometimes being generated for director methods\n            with many arguments.\n\n2012-08-05: wsfulton\n            [Perl] #3545877 - Don't undefine bool if defined by C99 stdbool.h - problem using \n            Perl 5.16 and later.\n\n2012-08-04: wsfulton\n            Remove incorrect warning (314) about target language keywords which were triggered\n            by using declarations and using directives. For example 'string' is a keyword in C#:\n              namespace std { class string; }\n              using std::string;\n\n2012-07-21: wsfulton\n            Fix display of pointers in various places on 64 bit systems - only 32 bits were being shown.\n\n2012-07-21: wsfulton\n            Fix gdb debugger functions 'swigprint' and 'locswigprint' to display to the gdb output window\n            rather than stdout. This fixes display problems in gdbtui and the ensures the output\n            appears where expected in other gdb based debuggers such as Eclipse CDT.\n\n2012-07-20: kwwette\n            [Octave] segfault-on-exit prevention hack now preserves exit status, and uses C99 _Exit().\n\n2012-07-02: wsfulton\n            Fix Debian bug http://bugs.debian.org/672035, typemap copy failure - regression introduced \n            in swig-2.0.5:\n              %include<stl.i>\n              using std::pair;\n              %template(StrPair) pair<std::string, std::string>;\n\n2012-07-02: wsfulton\n            Fix using declarations combined with using directives with forward class declarations so that\n            types are correctly found in scope for templates. Example:\n\n              namespace Outer2 {\n                namespace Space2 {\n                  template<typename T> class Thing2;\n                }\n              }\n              using namespace Outer2;\n              using Space2::Thing2;\n              template<typename T> class Thing2 {};\n              // STILL BROKEN void useit2(Thing2<int> t) {}\n              void useit2a(Outer2::Space2::Thing2<int> t) {}\n              void useit2b(::Outer2::Space2::Thing2<int> t) {}\n              void useit2c(Space2::Thing2<int> t) {}\n              namespace Outer2 {\n                void useit2d(Space2::Thing2<int> t) {}\n              }\n\n              %template(Thing2Int) Thing2<int>;\n\n\n2012-06-30: wsfulton\n            Fix template namespace problems for symbols declared with a forward class declarations, such as:\n\n              namespace Space1 {\n                namespace Space2 {\n                  template<typename T> struct YYY;\n                }\n                template<typename T> struct Space2::YYY {\n                  T yyy(T h) {\n                    return h;\n                  }    \n                };\n                void testYYY1(Space1::Space2::YYY<int> yy) {}\n                void testYYY2(Space2::YYY<int> yy) {}\n                void testYYY3(::Space1::Space2::YYY<int> yy) {}\n              }\n\n              %template(YYYInt) Space1::Space2::YYY<int>;\n\n2012-06-30: wsfulton\n            Fix namespace problems for symbols declared with a forward class declarations, such as:\n\n              namespace Space1 {\n                namespace Space2 {\n                  struct XXX;\n                  struct YYY;\n                }\n\n                struct Space2::YYY {};\n                struct Space1::Space2::XXX {};\n\n                void testXXX2(Space2::XXX xx) {}\n                void testYYY2(Space2::YYY yy) {}\n              }\n\n            where xx and yy were not recognised as the proxy classes XXX and YYY.\n\n2012-06-30: wsfulton\n            Fix using declarations combined with using directives with forward class declarations so that\n            types are correctly found in scope. \n\n              namespace Outer2 {\n                namespace Space2 {\n                  class Thing2;\n                }\n              }\n              using namespace Outer2;\n              using Space2::Thing2;\n              class Thing2 {};\n              // None of the methods below correctly used the Thing2 proxy class\n              void useit2(Thing2 t) {}\n              void useit2a(Outer2::Space2::Thing2 t) {}\n              void useit2b(::Outer2::Space2::Thing2 t) {}\n              void useit2c(Space2::Thing2 t) {}\n              namespace Outer2 {\n                void useit2d(Space2::Thing2 t) {}\n              }\n\n2012-06-25: wsfulton\n            Fix using declarations combined with using directives so that types are correctly found in scope.\n            Example:\n\n              namespace Outer2 {\n                namespace Space2 {\n                  class Thing2 {};\n                }\n              }\n              using namespace Outer2; // using directive\n              using Space2::Thing2; // using declaration\n              void useit2(Thing2 t) {}\n\n            Similarly for templated classes.\n\n2012-05-29: wsfulton\n            Fix #3529601 - seg fault when a protected method has the \"director\"\n            feature but the parent class does not. Also fix similar problems with\n            the allprotected feature.\n\n2012-05-28: wsfulton\n            Fix seg fault when attempting to warn about an illegal destructor - #3530055, 3530078 and #3530118.\n\nVersion 2.0.7 (26 May 2012)\n===========================\n2012-05-26: wsfulton\n            std::string typemap modifications so they can be used with %apply for other string\n            classes.\n\n2012-05-25: wsfulton\n            [Lua] Fixes for -external-runtime to work again.\n\n2012-05-22: szager\n\t    [python] Disambiguate SWIG_From_unsigned_SS_int and SWIG_From_unsigned_SS_long.\n\n2012-05-18: olly\n\t    [PHP] Fix getters for template members. (SF#3428833, SF#3528035)\n\n2012-05-14: wsfulton\n            Fix some language's std::map wrappers to recognise difference_type, size_type, key_type\n            and mapped_type.\n\n2012-05-14: kwwette (signed off by xavier98)\n            [Octave] Prevent Octave from seg-faulting at exit when SWIG\n            modules are loaded, due to bugs in Octave's cleanup code:\n            * Wrapping functions now declared with Octave DEFUN_DLD macro,\n              and loaded through Octave's dynamic module loader\n            * Global variables of swigref type are now assigned a new()\n              copy of the swigref class, to prevent double-free errors\n            * SWIG module at-exit cleanup function now created in Octave\n              through eval(), so not dependent on loaded .oct library\n            * For Octave versions 3.1.* to 3.3.*, register C-level at-exit\n              function which terminates Octave immediately (with correct\n              status code) without performing memory cleanup. This function\n              can be controlled with macros in Lib/octave/octruntime.swg\n\n            [Octave] New syntax for determing whether SWIG module should be\n            loaded globally or non-globally. To load module \"example\" globally,\n            type the module name\n            $ example;\n            as before; to load module non-globally, assign it to a variable:\n            $ example = example;\n            or\n            $ ex = example;\n            for a shorter (local) module name. -global/-noglobal command-line\n            options and module command line are deprecated. Added usage info\n            to module, so typing\n            $ help example\n            or incorrect usage should display proper usage, with examples.\n\n            *** POTENTIAL INCOMPATIBILITY  ***\n\n2012-05-12: olly\n\t    [PHP] Fix memory leak in code generated for a callback.  Patch from\n\t    SF bug #3510806.\n\n2012-05-12: olly\n\t    [PHP] Avoid using zend_error_noreturn() as it doesn't work with all\n\t    builds of PHP (SF bug #3166423).  Instead we now wrap it in a\n\t    SWIG_FAIL() function which we annotate as \"noreturn\" for GCC to\n\t    avoids warnings.  This also reduces the size of the compiled\n\t    wrapper (e.g. the stripped size is reduced by 6% for Xapian's PHP\n\t    bindings).\n\n2012-05-11: wsfulton\n            [Java] SF patch #3522855 Fix unintended uninitialised memory access in OUTPUT typemaps.\n\n2012-05-11: wsfulton\n            [Java] SF patch #3522674 Fix possible uninitialised memory access in char **STRING_OUT\n            typemap.\n\n2012-05-11: wsfulton\n            [Java] SF patch #3522611 Fix uninitialised size regression in char **STRING_ARRAY\n            introduced in swig-2.0.6.\n\n2012-05-11: wsfulton\n            SF bug #3525050 - Fix regression introduced in swig-2.0.5 whereby defining one typemap\n            method such as an 'out' typemap may hide another typemap method such as an 'in' typemap -\n            only occurs when the type is a template type where the template parameters are the same\n            via a typedef.\n\n2012-05-10: olly\n\t    [PHP] Fix the constant typemaps for SWIGTYPE, etc - previously\n\t    these used the wrong name for renamed constants.  Add\n\t    autodoc_runme.php to the testsuite as a regression test for this.\n\n2012-05-02: ianlancetaylor\n\t    [Go] Remove compatibility support for gccgo 4.6.  Using\n\t    SWIG with gccgo will now require gccgo 4.7.  Using SWIG\n\t    with the more commonly used gc compiler is unaffected.\n\n2012-05-01: wsfulton\n            Fix generated code for C forward enum declarations in some languages.\n\nVersion 2.0.6 (30 April 2012)\n=============================\n\n2012-04-25: wsfulton\n            [Lua] Fix uninitialised variable in SWIGTYPE **OUTPUT typemaps as reported by Jim Anderson.\n\n2012-04-28: wsfulton\n            [Python] Fix compilation errors when wrapping STL containers on Mac OS X and possibly other systems.\n\n2012-04-28: wsfulton\n            [Java] Patch 3521811 from Leo Davis - char **STRING_ARRAY typemaps fixed to handle\n            null pointers.\n\nVersion 2.0.5 (19 April 2012)\n=============================\n\n2012-04-14: wsfulton\n            [Lua] Apply patch #3517435 from Miles Bader - prefer to use Lua_pushglobaltable\n\n2012-04-14: wsfulton\n            [Ruby] Apply patch #3517769 from Robin Stocker to fix compile error on MacRuby using RSTRING_PTR.\n\n2012-04-13: wsfulton\n            Apply patch #3511009 from Leif Middelschulte for slightly optimised char * variable wrappers.\n\n2012-04-13: wsfulton\n            [Lua] Apply #3219676 from Shane Liesegang which adds:\n            - support for %factory\n            - a __tostring method\n            - a __disown method\n\n2012-04-13: wsfulton\n            [Xml] Apply #3513569 which adds a catchlist to the xml output.\n\n2012-04-05: olly\n\t    [Lua] Add support for Lua 5.2 (patch SF#3514593 from Miles Bader)\n\n2012-03-26: xavier98\n\t    [octave] Apply patch #3425993 from jgillis: add extra logic to the octave_swig_type::dims(void) method: it checks if the user has defined a __dims__ method and uses this in stead of returning (1,1)\n\t    [octave] Apply patch #3424833 from jgillis: make is_object return true for swig types\n\n2012-03-24: wsfulton\n            [D] Apply #3502431 to fix duplicate symbols in multiple modules.\n\n2012-03-21: wsfulton\n            Fix #3494791 - %$isglobal for %rename matching.\n\n2012-03-20: wsfulton\n            Fix #3487706 and #3391906 - missing stddef.h include for ptrdiff_t when using %import\n            for STL containers and compiling with g++-4.6. An include of stddef.h is now only\n            generated when SWIG generates STL helper templates which require ptrdiff_t. If you \n            were previously relying on \"#include <stddef.h>\" always being generated when using a\n            %include of an STL header, you may now need to add this in manually.\n\n2012-03-16: wsfulton\n            Apply patch #3392264 from Sebastien Bine to parse (unsigned) long long types in enum value assignment.\n\n2012-03-16: wsfulton\n            Apply patch #3505530 from Karl Wette to allow custom allocators in STL string classes for the UTL languages.\n\n2012-03-13: wsfulton\n            Apply patch #3468362 from Karl Wette to fix %include inside %define.\n\n2012-03-13: wsfulton\n            [Python, Ruby, Octave, R] Fix #3475492 - iterating through std::vector wrappers of enumerations.\n\n2012-02-27: xavier98 (patches from Karl Wette)\n\t    [Octave] Use -globals . to load global variables in module namespace\n\t    [Octave] Comment declaration of unimplemented function swig_register_director\n\t    [Octave] Fix OCTAVE_PATH in octave Makefiles\n\t    [Octave] Add support for std::list - fix li_std_containers_int test\n\t    [Octave] Fix imports test\n\n2012-02-16: wsfulton\n            [Java] Make generated support functions in arrays_java.i static so that generated code\n            from multiple instances of SWIG can be compiled and linked together - problem reported by\n            Evan Krause.\n\n2012-01-24: wsfulton\n            Fix crash with bad regex - bug #3474250.\n\n2012-01-24: wsfulton\n            [Python] Add Python stepped slicing support to the STL wrappers (std::vector, std::list).\n            Assigning to a slice, reading a slice and deleting a slice with steps now work.\n            For example:\n\n            %template(vector_i) std::vector<int>\n\n              vi = vector_i(range(10))\n              print list(vi)\n              vi[1:4:2] = [111, 333]\n              print list(vi)\n              del vi[3:10:3]\n              print list(vi)\n              print list(vi[::-1])\n\n            gives (same behaviour as native Python sequences such as list):\n\n              [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n              [0, 111, 2, 333, 4, 5, 6, 7, 8, 9]\n              [0, 111, 2, 4, 5, 7, 8]\n              [8, 7, 5, 4, 2, 111, 0]\n\n2012-01-23: klickverbot\n            [D] Correctly annotate function pointers with C linkage.\n            [D] Exception and Error have become blessed names; removed d_exception_name test case.\n\n2012-01-20: wsfulton\n            [Python] Fix some indexing bugs in Python STL wrappers when the index is negative, eg:\n\n            %template(vector_i) std::vector<int>\n\n              iv=vector_i([0,1,2,3,4,5])\n              iv[-7:]\n\n            now returns [0, 1, 2, 3, 4, 5] instead of [5].\n\n              vv[7:9] = [22,33]\n\n            now returns [0, 1, 2, 3, 4, 5, 22, 33] instead of \"index out range\" error.\n\n            Also fix some segfaults when replacing ranges, eg when il is a std::list wrapper:\n\n              il[0:2] = [11]\n\n2012-01-17: wsfulton\n            [Go] Fix forward class declaration within a class when used as a base.\n\n2012-01-07: wsfulton\n            [C#] Add support for %nspace when using directors.\n\n2012-01-06: wsfulton\n            [Java] Patch #3452560 from Brant Kyser - add support for %nspace when using directors.\n\n2011-12-21: wsfulton\n            The 'directorin' typemap now accepts $1, $2 etc expansions instead of having to use workarounds -\n            $1_name, $2_name etc.\n\n2011-12-20: wsfulton\n            [Java] Add (char *STRING, size_t LENGTH) director typemaps.\n\n2011-12-20: wsfulton\n            [C#, Go, Java, D] Add support for the 'directorargout' typemap.\n\n2011-12-20: wsfulton\n            [Ocaml, Octave, PHP, Python, Ruby] Correct special variables in 'directorargout' typemap.\n            This change will break any 'directorargout' typemaps you may have written. Please change:\n              $result to $1\n              $input to $result\n\n            Also fix the named 'directorargout' DIRECTOROUT typemaps for these languages which didn't\n            previously compile and add in $1, $2 etc expansion.\n\n            *** POTENTIAL INCOMPATIBILITY  ***\n\n2011-12-10: talby\n            [perl5] SWIG_error() now gets decorated with perl source file/line number.\n            [perl5] error handling now conforms to public XS api (fixes perl v5.14 issue).\n\n2011-12-10: wsfulton\n            [Android/Java] Fix directors to compile on Android.\n\n            Added documentation and examples for Android.\n\n2011-12-08: vadz\n\t    Bug fix: Handle methods renamed or ignored in the base class correctly in the derived classes\n\t    (they could be sometimes mysteriously not renamed or ignored there before).\n\n2011-12-03: klickverbot\n            [D] Fix exception glue code for newer DMD 2 versions.\n            [D] Do not default to 32 bit glue code for DMD anymore.\n            [D] Use stdc.config.c_long/c_ulong to represent C long types.\n\n2011-12-01: szager\n\t    [python] Fixed bug 3447426: memory leak in vector.__getitem__.\n\n2011-11-30: wsfulton\n            [R] Remove C++ comments from generated C code.\n\n2011-11-27: olly\n\t    [Python] Fix some warnings when compiling generated wrappers with\n\t    certain GCC warning options (Debian bug #650246).\n\n2011-11-28: wsfulton\n            Fix #3433541 %typemap(in, numinputs=0) with 10+ arguments.\n\n2011-11-28: olly\n\t    [Perl] Fix warnings when compiling generated wrappers with certain\n\t    GCC warning options (Debian bug #436711).\n\n2011-11-28: olly\n\t    [PHP] Update keyword list to include keywords added in PHP releases up to 5.3.\n\n2011-11-25: wsfulton\n            [C#] Provide an easy way to override the default visibility for the proxy class pointer\n            constructors and getCPtr() method. The visibility is 'internal' by default and if multiple\n            SWIG modules are being used and compiled into different assemblies, then they need to be \n            'public' in order to use the constructor or getCPtr() method from a different assembly.\n            Use the following macros to change the visibilities in the proxy and type wrapper class:\n\n              SWIG_CSBODY_PROXY(public, public, SWIGTYPE)\n              SWIG_CSBODY_TYPEWRAPPER(public, public, public, SWIGTYPE)\n\n            [Java] Provide an easy way to override the default visibility for the proxy class pointer\n            constructors and getCPtr() method. The visibility is 'protected' by default and if multiple\n            SWIG modules are being used and compiled into different packages, then they need to be \n            'public' in order to use the constructor or getCPtr() method from a different package.\n            Use the following macros to change the visibilities in the proxy and type wrapper class:\n\n              SWIG_JAVABODY_PROXY(public, public, SWIGTYPE)\n              SWIG_JAVABODY_TYPEWRAPPER(public, public, public, SWIGTYPE)\n\n            The default for Java has changed from public to protected for the proxy classes. Use the\n            SWIG_JAVABODY_PROXY macro above to restore to the previous visibilities.\n\n            *** POTENTIAL INCOMPATIBILITY  ***\n\n2011-11-22: szager\n\t    [python] Bug 3440044: #ifdef out SWIG_Python_NonDynamicSetAttr if -builtin\n\t    isn't being used, to avoid unnecessary binary incompatibilities between\n\t    python installations.\n\n2011-11-17: wsfulton\n            Bug fix: Remove root directory from directory search list in Windows.\n\n2011-11-13: wsfulton\n            [Ruby] Apply patch #3421876 from Robin Stocker to fix #3416818 - same class name in \n            different namespaces confusion when using multiple modules.\n\n2011-11-11: wsfulton\n            Fix pcre-build.sh to work with non-compressed tarballs - problem reported by Adrian Blakely.\n\n2011-11-03: wsfulton\n            Expand special variables in typemap warnings, eg:\n\n              %typemap(in, warning=\"1000:Test warning for 'in' typemap for $1_type $1_name\") int \"...\"\n\n2011-11-01: wsfulton\n            Fix named output typemaps not being used when the symbol uses a qualifier and contains\n            a number, eg:\n\n              %typemap(out) double ABC::m1 \"...\"\n\n2011-10-24: talby\n            [perl5] SF bug #3423119 - overload dispatch stack corruption fix.  Better, but more research\n            is needed on a stable path for tail calls in XS.\n\n            Also, fix for large long longs in 32 bit perl.\n\n2011-10-13: xavier98\n\t    [octave] Allow Octave modules to be re-loaded after a \"clear all\".\n\n2011-09-19: wsfulton\n            Fix regression introduced in swig-2.0.1 reported by Teemu Ikonone leading to uncompilable code\n            when using typedef and function pointer references, for example: \n\n              typedef int FN(const int &a, int b);\n              void *typedef_call1(FN *& precallback, FN * postcallback);\n\n2011-09-14: wsfulton\n            [Lua] Patch #3408012 from Raman Gopalan - add support for embedded Lua (eLua)\n            including options for targeting Lua Tiny RAM (LTR).\n\n2011-09-14: wsfulton\n            [C#] Add boost_intrusive_ptr.i library contribution from patch #3401571.\n\n2011-09-13: wsfulton\n            Add warnings for badly named destructors, eg:\n\n              struct KStruct {\n                ~NOT_KStruct() {}\n              };\n\n            cpp_extend_destructors.i:92: Warning 521: Illegal destructor name ~NOT_KStruct. Ignored.\n\n2011-09-13: wsfulton\n            Fix %extend and destructors for templates. The destructor in %extend was not always wrapped,\n            for example:\n\n              %extend FooT {\n                ~FooT() { delete $self; } // was not wrapped as expected\n              };\n              template<class T> class FooT {};\n              %template(FooTi) FooT<int>;\n\n2011-09-13: wsfulton\n            Fix special variables such as \"$decl\" and \"$fulldecl\" in destructors to include the ~ character.\n\n2011-09-10: talby\n            [perl5] SF bug #1481958 - Improve range checking for integer types.\n            Enhance li_typemaps_runme.pl\n\n2011-09-08: wsfulton\n            Fix %extend on typedef classes in a namespace using the typedef name, for example:\n            namespace Space {\n              %extend CStruct {\n                ...\n              }\n              typedef struct tagCStruct { ... } CStruct;\n            }\n\n2011-08-31: xavier98\n\t    [octave] patches from Karl Wette: improvements to module loading behavior;\n\t    added example of friend operator to operator example; fixed octave panic/crash in 3.0.5;\n\t    documentation improvements\n\n2011-08-30: szager\n\t    [python] Bug 3400486, fix error signalling for built-in constructors.\n\n2011-08-26: wsfulton\n            [Go] Fix file/line number display for \"gotype\" when using typemap debugging options\n            -tmsearch and -tmused.\n\n2011-08-26: wsfulton\n            [C#, D] Fix %callback which was generating uncompilable code.\n\n2011-08-25: wsfulton\n            Fix constructors in named typedef class declarations as reported by Gregory Bronner:\n\n            typedef struct A {\n              A(){} // Constructor which was not accepted by SWIG\n              B(){} // NOT a constructor --illegal, but was accepted by SWIG\n            } B;\n\n            For C code, the fix now results in the use of 'struct A *' instead of just 'B *' in\n            the generated code when wrapping members in A, but ultimately this does not matter, as\n            they are the same thing.\n\n2011-08-23: wsfulton\n            Fix %newobject when used in conjunction with %feature(\"ref\") as reported by Jan Becker. The\n            code from the \"ref\" feature was not always being generated for the function specified by %newobject.\n            Documentation for \"ref\" and \"unref\" moved from Python to the C++ chapter.\n\n2011-08-22: szager\n\t    [python] Fixed memory leak with --builtin option (bug 3385089).\n\n2011-08-22: wsfulton\n            [Lua] SF patch #3394339 from Torsten Landschoff - new option -nomoduleglobal to disable installing \n            the module table into the global namespace. Require call also returns the module table instead \n            of a string.\n\n2011-08-09: xavier98\n            Fix bug 3387394; Octave patches for 3.4.0 compatibility, etc. (from Karl Wette)\n\n2011-08-04: wsfulton\n            Add in $symname expansion for director methods.\n\n2011-07-29: olly\n\t    [PHP] Don't generate \"return $r;\" in cases where $r hasn't been set.\n\t    This was basically harmless, except it generated a PHP E_NOTICE if\n\t    the calling code had enabled them.\n\n2011-07-26: wsfulton\n            Fix scoping of forward class declarations nested within a class (for C++). Previously the symbol\n            was incorrectly put into the outer namespace, eg\n\n            namespace std {\n              template<class Key, class T> struct map {\n                class iterator;\n              };\n            }\n\n            iterator was scoped as std::iterator, but now it is correctly std::map<Key, T>::iterator;\n\n            Also fixed is %template and template parameters that are a typedef when the template contains\n            default template parameters, eg:\n\n            namespace Std {\n              template<class Key, class T, class C = int> struct Map {\n                typedef Key key_type;\n                typedef T mapped_type;\n              };\n            }\n            typedef double DOUBLE;\n            %template(MM) Std::Map<int, DOUBLE>;\n\n            All symbols within Map will be resolved correctly, eg key_type and mapped_type no matter if the\n            wrapped code uses Std::Map<int, double> or std::Map<int, DOUBLE> or Std::Map<int, double, int>\n\n            Also fixes bug #3378145 - regression introduced in 2.0.4 - %template using traits.\n\n2011-07-20  szager\n\t    [python] Fix closure for tp_call slot.\n\n2011-07-16: wsfulton\n\t    [python] Fix director typemap using PyObject *.\n\n2011-07-13: szager\n\t    [python] SF patch #3365908 - Add all template parameters to map support code in std_map.i\n\n2011-07-13: szager\n\t    [python] Fix for bug 3324753: %rename member variables with -builtin.\n\n2011-07-01: wsfulton\n\t    Fix some scope and symbol lookup problems when template default parameters are being\n            used with typedef. For example:\n\n            template<typename XX, typename TT = SomeType> struct Foo {\n              typedef XX X;\n              typedef TT T;\n            };\n            template<typename TT> struct UsesFoo {\n              void x(typename Foo<TT>::T, typename Foo<TT>::X);\n            };\n\n            Also fixes use of std::vector<int>::size_type for Python as reported by Aubrey Barnard.\n\n2011-06-23: olly\n\t    [PHP] Fix director code to work when PHP is built with ZTS enabled,\n\t    which is the standard configuration on Microsoft Windows.\n\n2011-06-21: mutandiz\n\t    [allegrocl]\n\t    - various small tweaks and bug fixes.\n\t    - Avoid name conflicts between smart pointer wrappers and the wrappers for\n\t    the actual class.\n\t    - Fix default typemaps for C bindings, which were incorrectly attempting to\n\t    call non-existent destructors on user-defined types.\n\t    - New feature, feature:aclmixins, for adding superclass to the foreign class\n\t    wrappers.\n\t    - Improve longlong typemaps.\n\n2011-06-19: wsfulton\n\t    Fix incorrect typemaps being used for a symbol within a templated type, eg:\n            A<int>::value_type would incorrectly use a typemap for type A.\n\n2011-06-18: olly\n\t    [Tcl] Fix variable declarations in middle of blocks which isn't\n\t    permitted in C90 (issue probably introduced in 2.0.3 by patch #3224663).\n\t    Reported by Paul Obermeier in SF#3288586.\n\n2011-06-17: wsfulton\n\t    [Java] SF #3312505 - slightly easier to wrap char[] or char[ANY] with a Java byte[]\n            using arrays_java.i.\n\n2011-06-13: wsfulton\n\t    [Ruby, Octave] SF #3310528 Autodoc fixes similar to those described below for Python.\n\n2011-06-10: wsfulton\n\t    [Python] Few subtle bugfixes in autodoc documentation generation,\n            - Unnamed argument names fix for autodoc levels > 0.\n            - Display of template types fixed for autodoc levels > 1.\n            - Fix SF #3310528 - display of typedef structs for autodoc levels > 1.\n            - Add missing type for self for autodoc levels 1 and 3.\n            - autodoc levels 2 and 3 documented.\n            - Minor tweaks to autodoc style to conform with PEP8.\n\n2011-05-30: olly\n\t    [PHP] Fix handling of directors when -prefix is used.\n\n2011-05-24: olly\n\t    [PHP] Fix handling of methods of classes with a virtual base class (SF#3124665).\n\nVersion 2.0.4 (21 May 2011)\n===========================\n\n2011-05-19: wsfulton\n\t    [Guile] Patch #3191625 fixing overloading of integer types.\n\n2011-05-19: wsfulton\n\t    [Perl] Patch #3260265 fixing overloading of non-primitive types and integers in \n            Perl 5.12 and later.\n\n2011-05-19: wsfulton\n\t    [Ruby] Fix %import where one of the imported files %include one of the STL include\n            files such as std_vector.i.\n\n2011-05-17: wsfulton\n\t    [Java] Apply #3289851 from Alan Harder to fix memory leak in directors when checking\n            for pending exceptions.\n\n2011-05-17: wsfulton\n\t    [Tcl] Apply #3300072 from Christian Delbaere to fix multiple module loading not\n            always sharing variables across modules.\n\n2011-05-16: xavier98\n\t    [octave] Fix an incompatibility with never versions of Octave. Case on Octave\n\t    API >= 40 to handle rename of Octave_map to octave_map.\n\t    [octave] Add support for y.__rop__(x) operators when x.__op__(y) doesn't exist.\n\t    [octave] Allow global operators to be defined by SWIG-wrapped functions.\n\t    [octave] Fix several bugs around module namespaces; add -global, -noglobal,\n\t    -globals <name> command line options to the module.\n\n2011-05-14: wsfulton\n\t    %varargs when used with a numeric argument used to create an additional argument \n            which was intended to provide a guaranteed sentinel value. This never worked and now\n            the additional argument is not generated.\n\n2011-05-13: wsfulton\n\t    [python] Additional fixes for python3.2 support.\n\n2011-05-07: szager\n\t    [python] Fixed PyGetSetDescr for python3.2.\n\n2011-05-05: wsfulton\n            [Lua, Python, Tcl] C/C++ prototypes shown in error message when calling an overloaded\n            method with incorrect arguments improved to show always show fully qualified name\n            and if a const method. \n\n            Also fixed other Lua error messages in generated code which weren't consistently\n            using the fully qualified C++ name - requested by Gedalia Pasternak.\n\n2011-04-29: szager\n\t    Bug 2635919: Convenience method to convert std::map to a python dict.\n\n2011-04-29: szager\n\t    [Python] Fixed bug 2811549: return non-const iterators from STL\n\t    methods begin(), end(), rbegin(), rend().\n\n2011-04-25: szager\n\t    [Python] Fixed bug 1498929: Access to member fields in map elements\n\n2011-04-23: klickverbot\n            [D] nspace: Correctly generate identifiers for base classes when\n            not in split proxy mode.\n\n2011-04-13: szager\n\t    Fixed bug 3286333: infinite recursion with mutual 'using namespace' clauses.\n\n2011-04-12: szager\n\t    Fixed bug 1163440: vararg typemaps.\n\n2011-04-12: szager\n\t    Fixed bug #3285386: parse error from 'operator T*&()'.  Added operator_pointer_ref\n\t    test case to demonstrate.\n\n2011-04-11: szager\n\t    [Python] Fixed PyVarObject_HEAD_INIT to eliminate VC++ compiler errors about\n\t    static initialization of struct members with pointers.\n\n2011-04-11: wsfulton\n            [Tcl] Apply patch #3284326 from Colin McDonald to fix some compiler warnings.\n\n2011-04-11: szager\n\t    [Python] Fixed PyVarObject_HEAD_INIT to eliminate VC++ compiler errors about\n\t    static initialization of struct members with pointers.\n\n2011-04-10: klickverbot\n            [D] Fixed wrapping of enums that are type char, for example:\n            enum { X = 'X'; } (this was already in 2.0.3 for C# and Java)\n\n2011-04-10: klickverbot\n            [D] nspace: Fixed referencing types in the root namespace when\n            not in split proxy mode.\n\n2011-04-09: szager\n\t    [Python] Applied patch #1932484: migrate PyCObject to PyCapsule.\n\n2011-04-09: szager\n\t    [Python] Added preprocessor guards for python functions PyUnicode_AsWideChar and\n\t    PySlice_GetIndices, which changed signatures in python3.2.\n\n2011-04-07: wsfulton\n            Fix wrapping of const array typedefs which were generating uncompilable code as\n            reported by Karl Wette.\n\n2011-04-03: szager\n\t    [Python] Fixed the behavior of %pythonnondynamic to conform to the spec in Lib/pyuserdir.swg.\n\n2011-04-03: szager\n\t    [Python] Merged in the szager-python-builtin branch, adding the -builtin feature\n\t    for python.  The -builtin option may provide a significant performance gain\n\t    in python wrappers.  For full details and limitations, refer to Doc/Manual/Python.html.\n\t    A small test suite designed to demonstrate the performance gain is in\n\t    Examples/python/performance.\n\n2011-04-01: wsfulton\n            Add in missing wrappers for friend functions for some target languages, mostly\n            the non-scripting languages like Java and C#.\n\nVersion 2.0.3 (29 March 2011)\n=============================\n\n2011-03-29: wsfulton\n            [R] Apply patch #3239076 from Marie White fixing strings for R >= 2.7.0\n\n2011-03-29: wsfulton\n            [Tcl] Apply patch #3248280 from Christian Delbaere which adds better error messages when\n            the incorrect number or type of arguments are passed to overloaded methods.\n\n2011-03-29: wsfulton\n            [Tcl] Apply patch #3224663 from Christian Delbaere.\n            1. Fix when function returns a NULL value, a \"NULL\" command will be created in the Tcl interpreter\n            and calling this command will cause a segmentation fault. \n\n            2. Previous implementation searches for class methods using a linear search causing performance issues\n            in wrappers for classes with many member functions. The patch adds a method hash table to classes and\n            changes method name lookup to use the hash table instead of doing a linear search.\n\n2011-03-26: wsfulton\n\t    [C#, Java] SF bug #3195112 - fix wrapping of enums that are type char, for example:\n              enum { X = 'X'; }\n\n2011-03-21: vadz\n\t    Allow setting PCRE_CFLAGS and PCRE_LIBS during configuration to override the values returned by\n\t    pcre-config, e.g. to allow using a static version of PCRE library.\n\n2011-03-17: wsfulton\n\t    [UTL] Add missing headers in generated STL wrappers to fix compilation with gcc-4.6.\n\n2011-03-17: wsfulton\n\t    Fix regression introduced in swig-2.0.2 where filenames with spaces were not found\n\t    when used with %include and %import. Reported by Shane Liesegang.\n\n2011-03-15: wsfulton\n\t    [UTL] Fix overloading when using const char[], problem reported by David Maxwell.\n            Similarly for char[ANY] and const char[ANY].\n\n2011-03-15: wsfulton\n\t    [C#] Apply patch #3212624 fixing std::map Keys property.\n\n2011-03-14: olly\n\t    [PHP] Fix handling of overloaded methods/functions where some\n\t    return void and others don't - whether this worked or not depended\n\t    on the order they were encountered in (SF#3208299).\n\t\n2011-03-13: klickverbot\n            [D] Extended support for C++ namespaces (nspace feature).\n\n2011-03-12: olly\n\t    [PHP] Fix sharing of type information between multiple SWIG-wrapped\n\t    modules (SF#3202463).\n\n2011-03-09: wsfulton\n\t    [Python] Fix SF #3194294 - corner case bug when 'NULL' is used as the default value\n            for a primitive type parameter in a method declaration.\n\n2011-03-07: olly\n\t    [PHP] Don't use zend_error_noreturn() for cases where the function\n\t    returns void - now this issue can only matter if you have a function\n\t    or method which is directed and returns non-void.\n\n2011-03-06: olly\n\t    [PHP] Add casts to the typemaps for long long and unsigned long\n\t    long to avoid issues when they are used with shorter types via\n\t    %apply.\n\n2011-03-02: wsfulton\n\t    Templated smart pointers overloaded with both const and non const operator-> generated uncompilable\n\t    code when the pointee was a class with either public member variables or static methods.\n\t    Regression in 2.0.x reported as working in 1.3.40 by xantares on swig-user mailing list.\n\nVersion 2.0.2 (20 February 2011)\n================================\n\n2011-02-19: wsfulton\n\t    [PHP] Add missing INPUT, OUTPUT and INOUT typemaps in the typemaps.i library\n            for primitive reference types as well as signed char * and bool *.\n\n2011-02-19: olly\n\t    [PHP] Address bug in PHP on some platforms/architectures which\n\t    results in zend_error_noreturn() not being available using\n\t    SWIG_ZEND_ERROR_NORETURN which defaults to zend_error_noreturn but\n\t    can be overridden when building the module by passing\n\t    -DSWIG_ZEND_ERROR_NORETURN=zend_error to the compiler.  This may\n\t    result in compiler warnings, but should at least allow a module\n\t    to be built on those platforms/architectures (SF#3166423).\n\n2011-02-18: wsfulton\n            Fix #3184549 - vararg functions and function overloading when using the -fastdispatch option.\n\n2011-02-18: olly\n\t    [PHP] An overloaded method which can return an object or a\n\t    primitive type no longer causes SWIG to segfault.  Reported by Paul\n\t    Colby in SF#3168531.\n\n2011-02-18: olly\n\t    [PHP] Fix invalid erase during iteration of std::map in generated\n\t    director code.  Reported by Cory Bennett in SF#3175820.\n\n2011-02-17: wsfulton\n            Preprocessing now warns if extra tokens appear after #else and #end.\n\n2011-02-16: wsfulton\n            Fix #1653092 Preprocessor does not error out when #elif is missing an expression.\n            This and other cases of missing preprocessor expressions now result in an error.\n\n2011-02-14: wsfulton\n            [Ocaml] Apply patch #3151788 from Joel Reymont. Brings Ocaml support up to date \n            (ver 3.11 and 3.12), including std::string.\n\n2011-02-13: wsfulton\n            [Ruby] Apply patch #3176274 from James Masters - typecheck typemap for time_t.\n\n2011-02-13: wsfulton\n            Apply patch #3171793 from szager - protected director methods failing when -fvirtual is used.\n\n2011-02-13: wsfulton\n            Fix #1927852 - #include directives don't preprocess the file passed to it. The fix is for\n            #include with -importall or -includeall, %include and %import, for example:\n              #define FILENAME \"abc.h\"\n              %include FILENAME\n\n2011-02-12: wsfulton\n            Fix #1940536, overactive preprocessor which was expanding defined(...) outside of #if and #elif\n            preprocessor directives.\n\n2011-02-05: wsfulton\n            [MzScheme] SF #2942899 Add user supplied documentation to help getting started with MzScheme.\n            Update chapter name to MzScheme/Racket accounting for the rename of MzScheme to Racket.\n\n2011-02-05: wsfulton\n            [C#] SF #3085906 - Possible fix running test-suite on Mac OS X.\n\n2011-02-05: wsfulton\n            SF #3173367 Better information during configure about Boost prerequisite for running\n            the test-suite.\n\n2011-02-05: wsfulton\n            SF #3127633 Fix infinite loop in recursive typedef resolution.\n\n2011-02-04: wsfulton\n            [R] SF #3168676 Fix %rename not working for member variables and methods.\n\n2011-02-04: wsfulton\n            [clisp] SF #3148200 Fix segfault parsing nested unions.\n\n2011-02-01: wsfulton\n            [C#] Directors - a call to a method being defined in the base class, not\n            overridden in a subclass, but again overridden in a class derived from\n            the first subclass was not being dispatched correctly to the most derived class.\n            See director_alternating.i for an example.\n\n2011-02-01: wsfulton\n            [C#, Java] Any 'using' statements in the protected section of a class were previously\n            ignored with director protected (dirprot) mode.\n\n2011-01-30: wsfulton\n            Fix overloading with const pointer reference (SWIGTYPE *const&) parameters for a\n            number of scripting languages.\n\n2011-01-17: wsfulton\n            New warning for smart pointers if only some of the classes in the inheritance\n            chain are marked as smart pointer, eg, %shared_ptr should be used for all classes\n            in an inheritance hierarchy, so this new warning highlights code where this is\n            not the case.\n\n              example.i:12: Warning 520: Base class 'A' of 'B' is not similarly marked as a smart pointer.\n              example.i:16: Warning 520: Derived class 'C' of 'B' is not similarly marked as a smart pointer.\n\n2011-01-14: wsfulton\n            Added some missing multi-argument typemaps: (char *STRING, size_t LENGTH) and \n            (char *STRING, int LENGTH). Documentation for this updated. Java patch from\n            Volker Grabsch.\n\n2011-01-11: iant\n\t    Require Go version 7077 or later.\n\n2010-12-30: klickverbot\n            [C#, D, Java] Check for collision of parameter names with target\n            language keywords when generating the director glue code.\n            \n            The situation in which the generated could would previously be\n            invalid is illustrated in the new 'director_keywords' test case.\n\n2010-12-23: wsfulton\n            [C#] Fix $csinput special variable not being expanded for csvarin typemaps\n            when used for global variables. Reported by Vadim Zeitlin.\n\n2010-12-14: wsfulton\n            Fix $basemangle expansion in array typemaps. For example if type is int *[3],\n            $basemangle expands to _p_int.\n\n2010-12-07: iant\n\t    Check that we are using a sufficiently new version of the\n\t    6g or 8g Go compiler during configure time. If not, disable Go.\n            Minimum version is now 6707.\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2010-12-06: wsfulton\n            Fix #3127394 - use of network paths on Windows/MSys.\n\n2010-11-18: klickverbot\n\t    [D] Added the D language module.\n\n2010-11-12: vadz\n\t    Fix handling of multiple regex-using %renames attached to the same\n\t    declaration. For example, now\n\n\t      %rename(\"%(regex:/^Set(.*)/put\\\\1/)s\") \"\";\n\t      %rename(\"%(regex:/^Get(.*)/get\\\\1/)s\") \"\";\n\n\t    works as expected whereas before only the last anonymous rename was\n\t    taken into account.\n\n2010-10-17: drjoe\n\t    [R] Fix failure in overloaded functions which was breaking\n\t    QuantLib-SWIG\n\n2010-10-14: olly\n\t    [PHP] Allow compilation on non-conforming Microsoft C++ compilers\n\t    which don't accept: return function_returning_void();\n\t    Reported by Frank Vanden Berghen on the SWIG mailing list.\n\n2010-10-12: wsfulton\n            Fix unary scope operator (::) (global scope) regression introduced in 2.0.0, reported by\n            Ben Walker. The mangled symbol names were incorrect, sometimes resulting in types being\n            incorrectly treated as opaque types.\n\n            Also fixes #2958781 and some other type problems due to better typedef resolution, eg \n            std::vector<T *>::value_type didn't resolve to T * when it should have. The mangled type\n            was incorrectly SWIGTYPE_std__vectorT_Test_p_std__allocatorT_Test_p_t_t__value_type and now\n            it is correctly SWIGTYPE_p_Test.\n\nVersion 2.0.1 (4 October 2010)\n==============================\n\n2010-10-03: wsfulton\n            Apply patch #3066958 from Mikael Johansson to fix default smart pointer\n            handling when the smart pointer contains both a const and non-const operator->.\n\n2010-10-01: wsfulton\n            Add -pcreversion option to display PCRE version information.\n\n2010-10-01: olly\n\t    [Ruby] Avoid segfault when a method node has no parentNode\n\t    (SF#3034054).\n\n2010-10-01: olly\n\t    [Python] Allow reinitialisation to work with an embedded Python\n\t    interpreter (patch from Jim Carroll in SF#3075178).\n\n2010-09-28: wsfulton\n            [C#] Apply patch from Tomas Dirvanauskas for std::map wrappers to avoid\n            throwing exceptions with normal usage of iterators.\n\n2010-09-27: olly\n\t    [Python] Improve error message given when a parameter of the wrong\n\t    type is passed to an overloaded method (SF#3027355).\n\n2010-09-25: wsfulton\n            Apply SF patch #3075150 - Java directors using static variables in\n            named namespace.\n\n2010-09-24: wsfulton\n            More file and line error/warning reporting fixes where SWIG macros\n            are used within {} braces (where the preprocessor expands macros),\n            for example macros within %inline {...} and %fragment(...) {...}\n            and nested structs.\n\n2010-09-18: wsfulton\n            More file and line error/warning reporting fixes for various inherited\n            class problems.\n\n2010-09-15: wsfulton\n            A much improved debugging of SWIG source experience is now available and\n            documented in the \"Debugging SWIG\" section in the Doc/Devel/internals.html\n            file, including a swig.dbg support file for the gdb debugger.\n\n2010-09-11: wsfulton\n            Fix incorrect line number reporting in errors/warnings when a macro\n            definition ends with '/' and it is not the end of a C comment.\n\n2010-09-11: wsfulton\n            Fix incorrect line number reporting in errors/warnings after parsing\n            macro invocations with parameters given over more than one line.\n\n2010-09-10: wsfulton\n            Remove extraneous extra line in preprocessed output after including files\n            which would sometimes lead to error/warning messages two lines after the\n            end of the file.\n\n2010-09-10: wsfulton\n            Fix #2149523 - Incorrect line number reporting in errors after parsing macros\n            containing C++ comments.\n\n2010-09-08: olly\n\t    [PHP] Fix handling of OUTPUT typemaps (Patch from Ryan in SF#3058394).\n\n2010-09-03: wsfulton\n            Fix erroneous line numbers in error messages for macro expansions, for example,\n            the error message now points to instantiation of the macro, ie the last line here:\n\n              #define MACRO2(a, b) \n\n              #define MACRO1(NAME) MACRO2(NAME,2,3) \n\n              MACRO1(abc)\n\n2010-09-02: wsfulton\n            Fix line numbers in error and warning messages for preprocessor messages within\n            %inline, for example:\n\n              %inline %{\n              #define FOOBAR 1\n              #define FOOBAR \"hi\"\n              %}\n\n2010-09-02: wsfulton\n            Fix line numbers in error and warning messages which were cumulatively one\n            less than they should have been after parsing each %include/%import - bug\n            introduced in swig-1.3.32. Also fix line numbers in error and warning messages\n            when new line characters appear between the %include / %import statement and\n            the filename.\n\n2010-08-30: wsfulton\n            Fix line number and file name reporting for some macro preprocessor warnings.\n            The line number of the macro argument has been corrected and the line number\n            of the start of the macro instead of one past the end of the macro is used.\n            Some examples:\n              file.h:11: Error: Illegal macro argument name '..'\n              file.h:19: Error: Macro 'DUPLICATE' redefined,\n              file.h:15: Error: previous definition of 'DUPLICATE'.\n              file.h:25: Error: Variable-length macro argument must be last parameter\n              file.h:32: Error: Illegal character in macro argument name\n              file.i:37: Error: Macro 'SIT' expects 2 arguments\n\n2010-08-26: wsfulton\n            Fix __LINE__ and __FILE__ expansion reported by Camille Gillot. Mostly this\n            did not work at all. Also fixes SF #2822822.\n\n2010-08-17: wsfulton\n            [Perl] Fix corner case marshalling of doubles - errno was not being correctly\n            set before calling strtod - patch from Justin Vallon - SF Bug #3038936.\n\n2010-08-17: wsfulton\n            Fix make distclean when some of the more obscure languages are detected by\n            configure - fixes from Torsten Landschoff.\n\n2010-07-28: wsfulton\n            Restore configuring out of source for the test-suite since it broke in 1.3.37.\n            As previously, if running 'make check-test-suite' out of source, it needs to be\n            done by invoking configure with a relative path. Invoking configure with an\n            absolute path will not work. Running the full 'make check' still needs to be\n            done in the source tree.\n\n2010-07-16: wsfulton\n            Fix wrapping of function pointers and member function pointers when the function\n            returns by reference.\n\n2010-07-13: vadz\n            Removed support for the old experimental \"rxspencer\" encoder and\n            \"[not]rxsmatch\" in %rename (see the 01/16/2006 entry). The new and\n            officially supported \"regex\" encoder and \"[not]regexmatch\" checks\n            should be used instead (see the two previous entries). Please\n            replace \"%(rxspencer:[pat][subst])s\" with \"%(regex:/pat/subst/)s\"\n            when upgrading. Notice that you will also need to replace the back-\n            references of form \"@1\" with the more standard \"\\\\1\" and may need to\n            adjust your regular expressions syntax as the new regex encoder uses\n            Perl-compatible syntax and not (extended) POSIX syntax as the old one.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2010-07-13: vadz\n            Add \"regexmatch\", \"regextarget\" and \"notregexmatch\" which can be\n            used to apply %rename directives to the declarations matching the\n            specified regular expression only. The first two can be used\n            interchangeably, both of the %renames below do the same thing:\n\n                %rename(\"$ignore\", regexmatch$name=\"Old$\") \"\";\n                %rename(\"$ignore\", regextarget=1) \"Old$\";\n\n            (namely ignore the declarations having \"Old\" suffix).\n\n            \"notregexmatch\" restricts the match to only the declarations which\n            do not match the regular expression, e.g. here is how to rename to\n            lower case versions all declarations except those consisting from\n            capital letters only:\n\n                %rename(\"$(lowercase)s\", notregexmatch$name=\"^[A-Z]+$\") \"\";\n\n2010-07-13: vadz\n            Add the new \"regex\" encoder that can be used in %rename, e.g.\n\n                %rename(\"regex:/(\\\\w+)_(.*)/\\\\2/\") \"\";\n\n            to remove any alphabetical prefix from all identifiers. The syntax\n            of the regular expressions is Perl-like and PCRE library\n            (http://www.pcre.org/) is used to implement this feature but notice\n            that backslashes need to be escaped as usual inside C strings.\n\n            Original patch from Torsten Landschoff.\n\n2010-07-08: wsfulton\n            Fix #3024875 - shared_ptr of classes with non-public destructors. This also fixes\n            the \"unref\" feature when used on classes with non-public destructors.\n\n2010-06-17: ianlancetaylor\n            [Go] Add the Go language module.\n\n2010-06-10: wsfulton\n            [Lua] Fix SWIG_lua_isnilstring multiply defined when using multiple\n            modules and wrapping strings. Patch from 'Number Cruncher'.\n\n2010-06-10: olly\n\t    [PHP] Fix directors to correctly call a method with has a\n\t    different name in PHP to C++ (we were always using the C++ name\n\t    in this case).\n\n2010-06-03: wsfulton\n            Fix uncompilable code when %rename results in two enum items\n            with the same name. Reported by Vadim Zeitlin.\n\nVersion 2.0.0 (2 June 2010)\n===========================\n\n2010-06-02: wsfulton\n            [C#] Fix SWIG_STD_VECTOR_ENHANCED macro used in std::vector to work with\n            types containing commas, for example:\n\n              SWIG_STD_VECTOR_ENHANCED(std::pair< double, std::string >)\n\n2010-06-01: wsfulton\n            Add in std_shared_ptr.i for wrapping std::shared_ptr. Requires the %shared_ptr\n            macro like in the boost_shared_ptr.i library. std::tr1::shared_ptr can also be\n            wrapped if the following macro is defined:\n\n              #define SWIG_SHARED_PTR_SUBNAMESPACE tr1\n              %include <std_shared_ptr.i>\n\n            shared_ptr is also documented in Library.html now.\n\n2010-05-27: wsfulton\n            Add the ability for $typemap special variable macros to call other $typemap\n            special variable macros, for example:\n\n              %typemap(cstype) CC \"CC\"\n              %typemap(cstype) BB \"$typemap(cstype, CC)\"\n              %typemap(cstype) AA \"$typemap(cstype, BB)\"\n              void hah(AA aa);\n\n            This also fixes C# std::vector containers of shared_ptr and %shared_ptr.\n\n            Also added diagnostics for $typemap with -debug-tmsearch, for example, the\n            above displays additional diagnostic lines starting \"Containing: \":\n\n              example.i:34: Searching for a suitable 'cstype' typemap for: AA aa\n                Looking for: AA aa\n                Looking for: AA\n                Using: %typemap(cstype) AA\n                Containing: $typemap(cstype, BB)\n              example.i:31: Searching for a suitable 'cstype' typemap for: BB\n                Looking for: BB\n                Using: %typemap(cstype) BB\n                Containing: $typemap(cstype, CC)\n              example.i:29: Searching for a suitable 'cstype' typemap for: CC\n                Looking for: CC\n                Using: %typemap(cstype) CC\n\n2010-05-26: olly\n\t    Fix %attribute2ref not to produce a syntax error if the last\n\t    argument (AccessorMethod) is omitted.  Patch from David Piepgras\n\t    in SF#2235756.\n\n2010-05-26: olly\n\t    [PHP] When using %throws or %catches, SWIG-generated PHP5 wrappers\n\t    now throw PHP Exception objects instead of giving a PHP error of\n\t    type E_ERROR.\n\n\t    This change shouldn't cause incompatibility issues, since you can't\n\t    set an error handler for E_ERROR, so previously PHP would just exit\n\t    which also happens for unhandled exceptions.  The benefit is you can\n\t    now catch them if you want to.\n\n\t    Fixes SF#2545578 and SF#2955522.\n\n2010-05-25: olly\n\t    [PHP] Add missing directorin typemap for const std::string &.\n\t    Fixes SF#3006404 reported by t-Legiaw.\n\n2010-05-23: wsfulton\n            [C#] Fix #2957375 - SWIGStringHelper and SWIGExceptionHelper not always being\n            initialized before use in .NET 4 as the classes were not marked beforefieldinit.\n            A static constructor has been added to the intermediary class like this:\n\n              %pragma(csharp) imclasscode=%{\n                static $imclassname() {\n                }\n              %}\n\n            If you had added your own custom static constructor to the intermediary class in\n            the same way as above, you will have to modify your approach to use static variable\n            initialization or define SWIG_CSHARP_NO_IMCLASS_STATIC_CONSTRUCTOR - See csharphead.swg.\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2010-05-23: wsfulton\n            Fix #2408232. Improve shared_ptr and intrusive_ptr wrappers for classes in an\n            inheritance hierarchy. No special treatment is needed for derived classes.\n            The proxy class also no longer needs to be specified, it is automatically\n            deduced. The following macros are deprecated:\n              SWIG_SHARED_PTR(PROXYCLASS, TYPE)\n              SWIG_SHARED_PTR_DERIVED(PROXYCLASS, BASECLASSTYPE, TYPE)\n            and have been replaced by\n              %shared_ptr(TYPE)\n            Similarly for intrusive_ptr wrappers, the following macro is deprecated:\n              SWIG_INTRUSIVE_PTR(PROXYCLASS, TYPE)\n              SWIG_INTRUSIVE_PTR_DERIVED(PROXYCLASS, BASECLASSTYPE, TYPE)\n            and have been replaced by\n              %intrusive_ptr(TYPE)\n\n2010-05-21: olly\n\t    [PHP] Stop generating a bogus line of code in certain constructors.\n\t    This was mostly harmless, but caused a PHP notice to be issued, if\n\t    enabled (SF#2985684).\n\n2010-05-18: wsfulton\n            [Java] Fix member pointers on 64 bit platforms.\n\n2010-05-14: wsfulton\n            Fix wrapping of C++ enum boolean values reported by Torsten Landschoff:\n              typedef enum { PLAY = true, STOP = false } play_state;\n\n2010-05-14: olly\n\t    [PHP] Fix wrapping of global variables which was producing\n\t    uncompilable code in some cases.\n\n2010-05-12: drjoe\n\t    [R] Add two more changes from Wil Nolan.  Get garbage\n\t    collection to work.  Implement newfree\n\n2010-05-09: drjoe\n            Fix bug reported by Wil Nolan change creation of string so\n            that R 2.7.0+ can use char hashes\n\n2010-05-07: wsfulton\n            Apply patch #2955146 from Sergey Satskiy to fix expressions containing divide by\n            operator in constructor initialization lists.\n\n2010-05-05: wsfulton\n            [R] Memory leak fix handling const std::string & inputs, reported by Will Nolan.\n\n2010-05-01: wsfulton\n            Typemap matching enhancement for non-default typemaps. Previously all\n            qualifiers were stripped in one step, now they are stripped one at a time\n            starting with the left most qualifier. For example, int const*const \n            is first stripped to int *const then int *.\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2010-04-25: bhy\n            [Python] Fix #2985655 - broken constructor renaming.\n\n2010-04-14: wsfulton\n            Typemap fragments are now official and documented in Typemaps.html.\n\n2010-04-09: wsfulton\n            [Ruby] Fix #2048064 and #2408020.\n            Apply Ubuntu patch to fix Ruby and std::vector wrappers with -minherit.\n            https://bugs.launchpad.net/ubuntu/+source/swig1.3/+bug/522874\n\n2010-04-09: wsfulton\n            [Mzscheme] Apply Ubuntu patch to fix std::map wrappers:\n            https://bugs.launchpad.net/ubuntu/+source/swig1.3/+bug/203876\n\n2010-04-09: wsfulton\n            [Python] Apply patch #2952374 - fix directors and the -nortti option.\n\n2010-04-09: wsfulton\n            [Lua] Fix #2887254 and #2946032 - SWIG_Lua_typename using wrong stack index.\n\n2010-04-03: wsfulton\n            [Python] Fix exceptions being thrown with the -threads option based on patch from Arto Vuori.\n            Fixes bug #2818499.\n\n2010-04-03: wsfulton\n            Fix Makefile targets: distclean and maintainer-clean\n\n2010-04-02: wsfulton\n            [Lua] Fix char pointers, wchar_t pointers and char arrays so that nil can be passed as a\n            valid value. Bug reported by Gedalia Pasternak.\n\n2010-04-01: wsfulton\n            Numerous subtle typemap matching rule fixes when using the default type. The typemap\n            matching rules are to take a type and find the best default typemap (SWIGTYPE, SWIGTYPE* etc),\n            then look for the next best match by reducing the chosen default type. The type deduction\n            now follows C++ class template partial specialization matching rules.\n\n            Below are the set of changes made showing the default type deduction\n            along with the old reduced type and the new version of the reduced type:\n\n                   SWIGTYPE const &[ANY]\n              new: SWIGTYPE const &[]\n              old: SWIGTYPE (&)[ANY]\n\n                   SWIGTYPE *const [ANY]\n              new: SWIGTYPE const [ANY]\n              old: SWIGTYPE *[ANY]\n\n                   SWIGTYPE const *const [ANY]\n              new: SWIGTYPE *const [ANY]\n              old: SWIGTYPE const *[ANY]\n\n                   SWIGTYPE const *const &\n              new: SWIGTYPE *const &\n              old: SWIGTYPE const *&\n\n                   SWIGTYPE *const *\n              new: SWIGTYPE const *\n              old: SWIGTYPE **\n\n                   SWIGTYPE *const &\n              new: SWIGTYPE const &\n              old: SWIGTYPE *&\n\n            Additionally, a const SWIGTYPE lookup is used now for any constant type. Some examples, where\n            T is some reduced type, eg int, struct Foo:\n\n                   T const\n              new: SWIGTYPE const\n              old: SWIGTYPE\n\n                   T *const\n              new: SWIGTYPE *const\n              old: SWIGTYPE *\n\n                   T const[]\n              new: SWIGTYPE const[]\n              old: SWIGTYPE[]\n\n                   enum T const\n              new: enum SWIGTYPE const\n              old: enum SWIGTYPE\n\n                   T (*const )[]\n              new: SWIGTYPE (*const )[]\n              old: SWIGTYPE (*)[]\n\n            Reminder: the typemap matching rules can now be seen for any types being wrapped by using\n            either the -debug-tmsearch or -debug-tmused options.\n\n            In practice this leads to some subtle matching rule changes and the majority of users\n            won't notice any changes, except in the prime area of motivation for this change: Improve\n            STL containers of const pointers and passing const pointers by reference. This is fixed\n            because many of the STL containers use a type 'T const&' as parameters and when T is \n            a const pointer, for example, 'K const*', then the full type is 'K const*const&'. This\n            means that the 'SWIGTYPE *const&' typemaps now match when T is either a non-const or\n            const pointer. Furthermore, some target languages incorrectly had 'SWIGTYPE *&' typemaps\n            when these should have been 'SWIGTYPE *const&'. These have been corrected (Java, C#, Lua, PHP).\n\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2010-03-13: wsfulton\n            [Java] Some very old deprecated pragma warnings are now errors.\n\n2010-03-13: wsfulton\n            Improve handling of file names and directories containing double/multiple path separators.\n\n2010-03-10: mutandiz (Mikel Bancroft)\n\t    [allegrocl] Use fully qualified symbol name of cl::identity in emit_defun().\n\n2010-03-06: wsfulton\n            [Java] The intermediary JNI class modifiers are now public by default meaning these\n            intermediary low level functions are now accessible by default from outside any package\n            used. The proxy class pointer constructor and getCPtr() methods are also now public.\n            These are needed in order for the nspace option to work without any other mods.\n            The previous default of protected access can be restored using:\n\n              SWIG_JAVABODY_METHODS(protected, protected, SWIGTYPE)\n              %pragma(java) jniclassclassmodifiers = \"class\"\n\n2010-03-06: wsfulton\n            [C#] Added the nspace feature for C#. Documentation for the nspace feature is now available.\n\n2010-03-04: wsfulton\n            Added the nspace feature. This adds some improved namespace support. Currently only Java\n            is supported for target languages, where C++ namespaces are automatically translated into\n            Java packages. The feature only applies to classes,struct,unions and enums declared within\n            a namespace. Methods and variables declared in namespaces still effectively have their\n            namespaces flattened. Example usage:\n\n              %feature(nspace) Outer::Inner1::Color;\n              %feature(nspace) Outer::Inner2::Color;\n\n              namespace Outer {\n                namespace Inner1 {\n                  struct Color {\n                    ...\n                  };\n                }\n                namespace Inner2 {\n                  struct Color {\n                    ...\n                  };\n                }\n              }\n\n            For Java, the -package option is also required when using the nspace feature. Say\n            we use -package com.myco, the two classes can then be accessed as follows from Java:\n\n              com.myco.Outer.Inner1.Color and com.myco.Outer.Inner2.Color.\n\n2010-02-27: wsfulton\n            [Python] Remove -dirvtable from the optimizations included by -O as it this option\n            currently leads to memory leaks as reported by Johan Blake.\n\n2010-02-27: wsfulton\n            License code changes: SWIG Source is GPL-v3 and library code license is now clearer\n            and is provided under a very permissive license. See https://www.swig.org/legal.html.\n\n2010-02-13: wsfulton\n            [Ruby] A few fixes for compiling under ruby-1.9.x including patch from 'Nibble'.\n\n2010-02-13: wsfulton\n            [Ruby] Apply patch from Patrick Bennett to fix RARRAY_LEN and RARRAY_PTR usage for Ruby 1.9.x\n            used in various STL wrappers.\n\n2010-02-13: wsfulton\n            [C#, Java] Fix incorrect multiply defined symbol name error when an enum item\n            and class name have the same name, as reported by Nathan Krieger. Example:\n\n              class Vector {};\n              namespace Text {\n                enum Preference { Vector };\n              }\n\n            This also fixes other incorrect corner case target language symbol name clashes.\n\n2010-02-11: wsfulton\n            Add the -debug-lsymbols option for displaying the target language layer symbols.\n\n2010-02-09: wsfulton\n            Fix -MM and -MMD options on Windows. They were not omitting files in the SWIG library as\n            they should be.\n\n2010-02-08: wsfulton\n            Fix #1807329 - When Makefile dependencies are being generated using the -M family of options\n            on Windows, the file paths have been corrected to use single backslashes rather than double\n            backslashes as path separators.\n\n2010-02-06: wsfulton\n            Fix #2918902 - language specific files not being generated in correct directory on\n            Windows when using forward slashes for -o, for example:\n              swig -python -c++ -o subdirectory/theinterface_wrap.cpp subdirectory/theinterface.i\n\n2010-02-05: wsfulton\n            Fix #2894405 - assertion when using -xmlout.\n\n2010-01-28: wsfulton\n            Fix typemap matching bug when a templated type has a typemap both specialized and not\n            specialized. For example:\n\n              template<typename T> struct XX { ... };\n              %typemap(in) const XX & \"...\"\n              %typemap(in) const XX< int > & \"...\"\n\n            resulted in the 2nd typemap being applied for all T in XX< T >.\n\n2010-01-22: wsfulton\n            Fix #2933129 - typemaps not being found when the unary scope operator (::) is used to denote\n            global scope, the typemap is now used in situations like this:\n\n              struct X {};\n              %typemap(in) const X & \"...\"\n              void m(const ::X &);\n\n            and this:\n\n              struct X {};\n              %typemap(in) const ::X & \"...\"\n              void m(const X &);\n\n2010-01-20: wsfulton\n            Fix some unary scope operator (::) denoting global scope problems in the types generated\n            into the C++ layer. Previously the unary scope operator was dropped in the generated code\n            if the type had any sort of qualifier, for example when using pointers, references, like\n            ::foo*, ::foo&, bar< ::foo* >.\n\n2010-01-13: olly\n\t    [PHP] Add datetime to the list of PHP predefined classes (patch\n\t    from David Fletcher in SF#2931042).\n\n2010-01-11: wsfulton\n            Slight change to warning, error and diagnostic reporting. The warning number is no \n            longer shown within brackets. This is to help default parsing of warning messages by\n            other tools, vim on Unix in particular.\n\n            Example original display using -Fstandard:\n              example.i:20: Warning(401): Nothing known about base class 'B'. Ignored.\n            New display:\n              example.i:20: Warning 401: Nothing known about base class 'B'. Ignored.\n\n            Also subtle fix to -Fmicrosoft format adding in missing space. Example original display:\n              example.i(20): Warning(401): Nothing known about base class 'Base'. Ignored.\n            New display:\n              example.i(20) : Warning 401: Nothing known about base class 'Base'. Ignored.\n\n2010-01-10: wsfulton\n            Fix a few inconsistencies in reporting of file/line numberings including modifying\n            the overload warnings 509, 512, 516, 474, 475 to now be two line warnings.\n\n2010-01-10: wsfulton\n            Modify -debug-tags output to use standard file name/line reporting so that editors\n            can easily navigate to the appropriate lines.\n            Was typically:\n              . top . include . include (/usr/share/swig/temp/trunk/Lib/swig.swg:312)\n              . top . include . include . include (/usr/share/swig/temp/trunk/Lib/swigwarnings.swg:39)\n            now:\n              /usr/share/swig/temp/trunk/Lib/swig.swg:312:  . top . include . include\n              /usr/share/swig/temp/trunk/Lib/swigwarnings.swg:39:  . top . include . include . include\n\n2010-01-03: wsfulton\n            Fix missing file/line numbers for typemap warnings and in output from the\n           -debug-tmsearch/-debug-tmused options.\n\n2010-01-03: wsfulton\n            Add typemaps used debugging option (-debug-tmused). When used each line displays\n            the typemap used for each type for which code is being generated including the file\n            and line number related to the type. This is effectively a condensed form of the\n            -debug-tmsearch option. Documented in Typemaps.html.\n\n2009-12-23: wsfulton\n            Fix for %javaexception and directors so that all the appropriate throws clauses \n            are generated. Problem reported by Peter Greenwood.\n\n2009-12-20: wsfulton\n            Add -debug-tmsearch option for debugging the typemap pattern matching rules.\n            Documented in Typemaps.html.\n\n2009-12-12: wsfulton\n            [Octave] Remove the -api option and use the new OCTAVE_API_VERSION_NUMBER\n            macro provided in the octave headers for determining the api version instead.\n\n2009-12-04: olly\n\t    [Ruby] Improve support for Ruby 1.9 under GCC.  Addresses part of\n\t    SF#2859614.\n\n2009-12-04: olly\n\t    Fix handling of modulo operator (%) in constant expressions\n\t    (SF#2818562).\n\n2009-12-04: olly\n\t    [PHP] \"empty\" is a reserved word in PHP, so rename empty() method\n\t    on STL classes to \"is_empty()\" (previously this was automatically\n\t    renamed to \"c_empty()\").\n\t    *** POTENTIAL INCOMPATIBILITY ***\n\n2009-12-03: olly\n\t    [PHP] Add typemaps for long long and unsigned long long, and for\n\t    pointer to method.\n\n2009-12-02: olly\n\t    [PHP] Fix warning and rename of reserved class name to be case\n\t    insensitive.\n\n2009-12-01: wsfulton\n            Revert support for %extend and memberin typemaps added in swig-1.3.39. The\n\t    memberin typemaps are ignored again for member variables within a %extend block.\n            Documentation inconsistency reported by Torsten Landschoff.\n\n2009-11-29: wsfulton\n            [Java, C#] Fix generated quoting when using %javaconst(1)/%csconst(1) for \n            static const char member variables.\n\n              %javaconst(1) A;\n              %csconst(1) A;\n              struct X {\n                static const char A = 'A'; \n              };\n\n2009-11-26: wsfulton\n            [Java, C#] Fix %javaconst(1)/%csconst(1) for static const member variables to\n            use the actual constant value if it is specified, rather than the C++ code to\n            access the member.\n\n              %javaconst(1) EN;\n              %csconst(1) EN;\n              struct X {\n                static const int EN = 2;\n              };\n\n2009-11-23: wsfulton\n            C++ nested typedef classes can now be handled too, for example:\n              struct Outer {\n                typedef Foo { } FooTypedef1, FooTypedef2;\n              };\n\n2009-11-18: wsfulton\n            The wrappers for C nested structs are now generated in the same order as declared \n            in the parsed code.\n\n2009-11-18: wsfulton\n            Fix #491476 - multiple declarations of nested structs, for example:\n              struct Outer {\n                struct {\n                  int val;\n                } inner1, inner2, *inner3, inner4[1];\n              } outer;\n\n2009-11-17: wsfulton\n            Fix parsing of enum declaration and initialization, for example:\n\n              enum ABC {\n                a,\n                b,\n                c\n              } A = a, *pC = &C, array[3] = {a, b, c};\n\n2009-11-17: wsfulton\n            Fix parsing of struct declaration and initialization, for example:\n\n              struct S {\n                 int x;\n              } instance = { 10 };\n\n2009-11-15: wsfulton\n            Fix #1960977 - Syntax error parsing derived nested class declaration and member\n            variable instance.\n\n2009-11-14: wsfulton\n            Fix #2310483 - function pointer typedef within extern \"C\" block.\n\n2009-11-13: wsfulton\n            Fix usage of nested template classes within templated classes so that compilable code \n            is generated.\n\n2009-11-13: olly\n\t    [php] Fix place where class prefix (as specified with -prefix)\n\t    wasn't being used.  Patch from gverbruggen in SF#2892647.\n\n2009-11-12: wsfulton\n            Fix usage of nested template classes so that compilable code is generated - the nested\n            template class is now treated like a normal nested classes, that is, as an opaque type\n            unless the nestedworkaround feature is used.\n\n2009-11-12: wsfulton\n            Replace SWIGWARN_PARSE_NESTED_CLASS with SWIGWARN_PARSE_NAMED_NESTED_CLASS and\n            SWIGWARN_PARSE_UNNAMED_NESTED_CLASS for named and unnamed nested classes respectively.\n\n            Named nested class ignored warnings can now be suppressed by name using %warnfilter, eg:\n\n              %warnfilter(SWIGWARN_PARSE_NAMED_NESTED_CLASS) Outer::Inner;\n\n            but clearly unnamed nested classes cannot and the global suppression is still required, eg:\n\n              #pragma SWIG nowarn=SWIGWARN_PARSE_UNNAMED_NESTED_CLASS\n\n2009-11-11: wsfulton\n            Added the nestedworkaround feature as a way to use the full functionality of a nested class \n            (C++ mode only). It removes the nested class from SWIG's type information so it is as if SWIG\n            had never parsed the nested class. The documented nested class workarounds using a global\n            fake class stopped working when SWIG treated the nested class as an opaque pointer, and\n            this feature reverts this behaviour. The documentation has been updated with details of how\n            to use and implement it, see the \"Nested classes\" section in SWIGPlus.html.\n\n2009-11-11: wsfulton\n            There were a number of C++ cases where nested classes/structs/unions were being handled\n            as if C code was being parsed which would oftentimes lead to uncompilable code as an\n            attempt was made to wrap the nested structs like it is documented for C code. Now all\n            nested structs/classes/unions are ignored in C++ mode, as was always documented. However,\n            there is an improvement as usage of nested structs/classes/unions is now always treated\n            as an opaque type by default, resulting in generated code that should always compile.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2009-11-09: drjoe\n\t    Fix R for -fcompact and add std_map.i\n\n2009-11-08: wsfulton\n            Fix inconsistency for nested structs/unions/classes. Uncompilable code was being\n            generated when inner struct and union declarations were used as types within the\n            inner struct. The inner struct/union is now treated as a forward declaration making the\n            behaviour the same as an inner class. (C++ code), eg:\n\n              struct Outer {\n                struct InnerStruct { int x; };\n                InnerStruct* getInnerStruct();\n              };\n\n2009-11-08: wsfulton\n\t    Ignored nested class/struct warnings now display the name of the ignored class/struct.\n\n2009-11-07: wsfulton\n\t    Bug #1514681 - Fix nested template classes within a namespace generated uncompilable\n            code and introduced strange side effects to other wrapper code especially code\n            after the nested template class. Note that nested template classes are still ignored.\n\n2009-11-07: wsfulton\n\t    Add new debug options:\n              -debug-symtabs    - Display symbol tables information\n              -debug-symbols    - Display target language symbols in the symbol tables\n              -debug-csymbols   - Display C symbols in the symbol tables\n\n2009-11-03: wsfulton\n\t    Fix some usage of unary scope operator (::) denoting global scope, for example:\n\n              namespace AA { /* ... */ }\n              using namespace ::AA;\n\n            and bug #1816802 - SwigValueWrapper should be used:\n\n              struct CC {\n                CC(int); // no default constructor\n              };\n              ::CC x();\n\n            and in template parameter specializations:\n\n              struct S {};\n              template <typename T> struct X { void a() {} };\n              template <> struct X<S> { void b() {} };\n              %template(MyTConcrete) X< ::S >;\n\n            plus probably some other corner case usage of ::.\n\n2009-11-02: olly\n\t    [Python] Fix potential memory leak in initialisation code for the\n\t    generated module.\n\n2009-10-23: wsfulton\n\t    Fix seg fault when using a named nested template instantiation using %template(name) \n            within a class. A warning that these are not supported is now issued plus processing \n            continues as if no name was given.\n\n2009-10-20: wsfulton\n\t    [Python] Fix std::vector<const T*>. This would previously compile, but not run correctly.\n\n2009-10-20: wsfulton\n\t    Fixed previously fairly poor template partial specialization and explicit \n            specialization support. Numerous bugs in this area have been fixed including:\n\n            - Template argument deduction implemented for template type arguments, eg this now\n              works:\n                template<typename T> class X      {};\n                template<typename T> class X<T *> {};\n                %template(X1) X<const int *>; // Chooses T * specialization\n\n              and more complex cases with multiple parameters and a mix of template argument\n              deduction and explicitly specialised parameters, eg:\n                template <typename T1, typename T2> struct TwoParm               { void a() {} };\n                template <typename T1>              struct TwoParm<T1 *, int *>  { void e() {} };\n                %template(E) TwoParm<int **, int *>;\n\n            Note that the primary template must now be in scope, like in C++, when\n            an explicit or partial specialization is instantiated with %template.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2009-09-14: wsfulton\n\t    [C#] Add %csattributes for adding C# attributes to enum values, see docs for example.\n\n2009-09-11: wsfulton\n\t    Fix memmove regression in cdata.i as reported by Adriaan Renting.\n\n2009-09-07: wsfulton\n\t    Fix constant expressions containing <= or >=.\n\n2009-09-02: wsfulton\n\t    The following operators in constant expressions now result in type bool for C++ \n            wrappers and remain as type int for C wrappers, as per each standard: \n\n              && || == != < > <= >= (Actually the last 4 are still broken). For example:\n\n              #define A 10\n              #define B 10\n              #define A_EQ_B  A == B // now wrapped as type bool for C++\n              #define A_AND_B A && B // now wrapped as type bool for C++\n\n2009-09-02: wsfulton\n\t    Fix #2845746. true and false are now recognised keywords (only when wrapping C++).\n            Constants such as the following are now wrapped (as type bool):\n              #define FOO true\n              #define BAR FOO && false\n\nVersion 1.3.40 (18 August 2009)\n===============================\n\n2009-08-17: olly\n\t    [Perl] Add \"#undef do_exec\" to our clean up of Perl global\n\t    namespace pollution.\n\n2009-08-17: olly\n\t    [PHP] Fix to wrap a resource returned by __get() in a PHP object (SF#2549217).\n\n2009-08-17: wsfulton\n            Fix #2797485 After doing a 'make clean', install fails if yodl2man or yodl2html \n            is not available.\n\n2009-08-16: wsfulton\n            [Octave] Caught exceptions display the type of the C++ exception instead of the\n            generic \"c++-side threw an exception\" message.\n\n2009-08-16: wsfulton\n            [Java] When %catches is used, fix so that any classes specified in the \"throws\"\n            attribute of the \"throws\" typemap are generated into the Java method's throws clause.\n\n2009-08-16: wsfulton\n            [C#] Fix exception handling when %catches is used, reported by Juan Manuel Alvarez.\n\n2009-08-15: wsfulton\n            Fix %template seg fault on some cases of overloading the templated method.\n            Bug reported by Jan Kupec.\n\n2009-08-15: wsfulton\n\t    [Ruby] Add numerous missing wrapped methods for std::vector<bool> specialization\n            as reported by Youssef Jones.\n\n2009-08-14: wsfulton\n\t    [Perl] Add SWIG_ConvertPtrAndOwn() method into the runtime for smart pointer \n            memory ownership control. shared_ptr support still to be added. Patch from \n            David Fletcher.\n\n2009-08-14: olly\n\t    [PHP] PHP5 now wraps static member variables as documented.\n\n2009-08-14: olly\n\t    [PHP] Update the PHP \"class\" example to work with PHP5 and use\n\t    modern wrapping features.\n\n2009-08-13: wsfulton\n\t    [PHP] std::vector wrappers overhaul. They no longer require the \n            specialize_std_vector() macro. Added wrappers for capacity() and reserve().\n\n2009-08-13: wsfulton\n\t    [PHP] Add const reference typemaps. const reference primitive types are\n            now passed by value rather than pointer like the other target languages.\n\t    Fixes SF#2524029.\n\n2009-08-08: wsfulton\n\t    [Python] More user friendly AttributeError is raised when there are\n            no constructors generated for the proxy class in the event that the\n            class is abstract - the error message is now \n            \"No constructor defined - class is abstract\" whereas if there are no\n            public constructors for any other reason and the class is not abstract,\n            the message remains\n            \"No constructor defined\".\n            [tcl] Similarly for tcl when using -itcl.\n\n2009-08-04: olly\n\t    [PHP] Fix generated code to work with PHP 5.3.\n\n2009-08-04: vmiklos\n            [PHP] Various mathematical functions (which would conflict\n            with the built-in PHP ones) are now automatically handled by\n            adding a 'c_' prefix.\n\n2009-08-03: wsfulton\n            [C#] The std::vector<T> implementation is improved and now uses $typemap such\n            that the proxy class for T no longer has to be specified in some macros\n            for correct C# compilation; the following macros are deprecated, where\n            CSTYPE was the C# type for the C++ class CTYPE:\n\n            SWIG_STD_VECTOR_SPECIALIZE_MINIMUM(CSTYPE, CTYPE)\n              usage should be removed altogether\n\n            SWIG_STD_VECTOR_SPECIALIZE(CSTYPE, CTYPE)\n              should be replaced with:\n            SWIG_STD_VECTOR_ENHANCED(CTYPE)\n\n            Some more details in csharp/std_vector.i\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2009-07-31: olly\n\t    [Python] Fix indentation so that we give a useful error if the\n\t    module can't be loaded.  Patch from Gaetan Lehmann in SF#2829853.\n\n2009-07-29: wsfulton\n            Add $typemap(method, typelist) special variable macro. This allows\n            the contents of a typemap to be inserted within another typemap.\n            Fully documented in Typemaps.html.\n\n2009-07-29: vmiklos\n            [PHP] Static member variables are now prefixed with the\n            class name. This allows static member variables with the\n            same name in different classes.\n\n2009-07-29: olly\n\t    [Python] Add missing locks to std::map wrappers.  Patch from \n\t    Paul Hampson in SF#2813836.\n\n2009-07-29: olly\n\t    [PHP] Fix memory leak in PHP OUTPUT typemaps.  Reported by Hitoshi\n\t    Amano in SF#2826322.\n\n2009-07-29: olly\n\t    [PHP] Fix memory leak in PHP resource destructor for classes\n\t    without a destructor and non-class types.  Patch from Hitoshi Amano\n\t    in SF#2825303.\n\n2009-07-28: olly\n\t    [PHP] Update warnings about clashes between identifiers and PHP\n\t    keywords and automatic renaming to work with the PHP5 class\n\t    wrappers.  Fixes SF#1613679.\n\n2009-07-28: vmiklos\n            [PHP] If a member function is not public but it has a base\n            which is public, then now a warning is issued and the member\n            function will be public, as PHP requires this.\n\n2009-07-21: vmiklos\n            [PHP] Director support added.\n\n2009-07-15: olly\n\t    [Perl] Don't specify Perl prototype \"()\" for a constructor with a\n\t    different name to the class, as such constructors can still take\n\t    parameters.\n\n2009-07-12: xavier98\n\t    [Octave] Add support for Octave 3.2 API\n\n2009-07-05: olly\n\t    [PHP] Update the list of PHP keywords - \"cfunction\" is no longer a\n\t    keyword in PHP5 and PHP 5.3 added \"goto\", \"namespace\", \"__DIR__\",\n\t    and \"__NAMESPACE__\".\n\n2009-07-03: olly\n\t    [Tcl] To complement USE_TCL_STUBS, add support for USE_TK_STUBS\n\t    and SWIG_TCL_STUBS_VERSION.  Document all three in the Tcl chapter\n\t    of the manual.  Based on patch from SF#2810380 by Christian\n\t    Gollwitzer.\n\n2009-07-02: vmiklos\n            [PHP] Added factory.i for PHP, see the li_factory testcase\n            for more info on how to use it.\n\n2009-07-02: wsfulton\n            Fix -Wallkw option as reported by Solomon Gibbs.\n\n2009-07-02: wsfulton\n            Fix syntax error when a nested struct contains a comment containing a * followed \n            eventually by a /. Regression from 1.3.37, reported by Solomon Gibbs.\n\n2009-07-01: vmiklos\n            [PHP] Unknown properties are no longer ignored in proxy\n            classes.\n\n2009-07-01: vmiklos\n            [PHP] Fixed %newobject behaviour, previously any method\n            marked with %newobject was handled as a constructor.\n\n2009-06-30: olly\n\t    [Ruby] Undefine close and connect macros defined by Ruby API\n\t    headers as we don't need them and they can clash with C++ methods\n\t    being wrapped.  Patch from Vit Ondruch in SF#2814430.\n\n2009-06-26: olly\n\t    [Ruby] Fix to handle FIXNUM values greater than MAXINT passed for a\n\t    double parameter.\n\n2009-06-24: wsfulton\n            Fix wrapping methods with default arguments and the compactdefaultargs feature \n            where a class is passed by value and is assigned a default value. The SwigValueWrapper\n            template workaround for a missing default constructor is no longer used as the code \n            generated does not call the default constructor.\n\n2009-06-16: wsfulton\n\t    [Java,C#] Fix enum marshalling when %ignore is used on one of the enum items.\n            Incorrect enum values were being passed to the C++ layer or compilation errors resulted.\n\n2009-06-02: talby\n\t    [Perl] Resolved reference.i overload support problem\n\t    identified by John Potowsky.\n\n2009-05-26: wsfulton\n\t    [C#] Improved std::map wrappers based on patch from Yuval Baror. The C# proxy\n            now implements System.Collections.Generic.IDictionary<>.\n\n\t    These std:map wrappers have a non-backwards compatible overhaul to make them\n            like a .NET IDictionary. Some method names have changed as following:\n              set -> setitem (use this[] property now)\n              get -> getitem (use this[] property now)\n              has_key -> ContainsKey\n              del -> Remove\n              clear -> Clear\n\n            The following macros used for std::map wrappers are deprecated and will no longer work:\n              specialize_std_map_on_key\n              specialize_std_map_on_value\n              specialize_std_map_on_both\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2009-05-20: vmiklos\n            [PHP] Add the 'thisown' member to classes. The usage of it\n            is the same as the Python thisown one: it's 1 by default and\n            you can set it to 0 if you want to prevent freeing it. (For\n            example to prevent a double free.)\n\n2009-05-14: bhy\n            [Python] Fix the wrong pointer value returned by SwigPyObject_repr().\n\n2009-05-13: mutandiz (Mikel Bancroft)\n\t    [allegrocl] Minor tweak when wrapping in -nocwrap mode.\n\n2009-05-11: wsfulton\n\t    [C#] Improved std::vector wrappers on the C# proxy side from Yuval Baror. These\n\t    implement IList<> instead of IEnumerable<> where possible.\n\n2009-04-29: wsfulton\n\t    [Java, C#] Add the 'notderived' attribute to the javabase and csbase typemaps.\n\t    When this attribute is set, the typemap will not apply to classes that are derived\n\t    from a C++ base class, eg \n\t      %typemap(csbase, notderived=\"1\") SWIGTYPE \"CommonBase\"\n\n2009-04-29: olly\n\t    [Python] Don't attempt to acquire the GIL in situations where we\n\t    know that it will already be locked.  This avoids some dead-locks\n\t    with mod_python (due to mod_python bugs which are apparently\n\t    unlikely to ever be fixed), and results in smaller wrappers which\n\t    run a little faster (in tests with Xapian on x86-64 Ubuntu 9.04,\n\t    the stripped wrapper library was 11% smaller and ran 2.7% faster).\n\n2009-04-21: wsfulton\n\t    [C#] Fix #2753469 - bool &OUTPUT and bool *OUTPUT typemaps initialisation.\n\n2009-04-09: wsfulton\n\t    Fix #2746858 - C macro expression using floating point numbers\n\n2009-03-30: olly\n\t    [PHP] The default out typemap for char[ANY] now returns the string up to a\n\t    zero byte, or the end of the array if there is no zero byte.  This\n\t    is the same as Python does, and seems more generally useful than\n\t    the previous behaviour of returning the whole contents of the array\n\t    including any zero bytes.  If you want the old behaviour, you can provide\n\t    your own typemap to do this:\n\n\t    %typemap(out) char [ANY]\n\t    %{\n\t\tRETVAL_STRINGL($1, $1_dim0, 1);\n\t    %}\n\nVersion 1.3.39 (21 March 2009)\n==============================\n\n2009-03-19: bhy\n            [Python] Fix the memory leak related to Python 3 unicode and C char* conversion,\n            which can be shown in the following example before this fix:\n            \n                  from li_cstring import *\n                  i=0\n                  while True:\n                      i += 1\n                      n = str(i)*10\n                      test3(n)\n\n            This fix affected SWIG_AsCharPtrAndSize() so you cannot call this function with\n            a null alloc and non-null cptr argument in Python 3, otherwise a runtime error\n            will be raised.\n\n2009-03-18: wsfulton\n\t    [C#] std::vector<T> wrapper improvements for .NET 2 and also providing the\n\t    necessary machinery to use the std::vector<T> wrappers with more advanced features such\n\t    as LINQ - the C# proxy class now derives from IEnumerable<>. The default is now to \n\t    generate code requiring .NET 2 as a minimum, although the C# code can be compiled \n\t    for .NET 1 by defining the SWIG_DOTNET_1 C# preprocessor constant. See the \n\t    std_vector.i file for more details.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2009-03-12: wsfulton\n\t    [Ruby] Fix #2676738 SWIG generated symbol name clashes.\n\n2009-03-01: bhy\n            [Python] Some fixes for Python 3.0.1 and higher support. In 3.0.1, the C API function\n            PyObject_Compare is removed, so PyObject_RichCompareBool is used for replacement.\n            Struct initilization of SwigPyObject and SwigPyObject_as_number changed to reflect\n            the drop of tp_compare and nb_long.\n\n2009-03-01: bhy\n            [Python] Fix SF#2583160. Now the importer in Python shadow wrapper take care of the\n            case that module already imported at other place.\n\n2009-02-28: bhy\n            [Python] Fix SF#2637352. Move struct declaration of SWIG_module in pyinit.swg before\n            the method calls, since some C compiler don't allow declaration in middle of function\n            body.\n\n2009-02-21: wsfulton\n\t    [Allegrocl] Fix seg fault wrapping some constant variable (%constant) types.\n\n2009-02-20: wsfulton\n\t    [CFFI] Fix seg faults when for %extend and using statements.\n\n2009-02-20: wsfulton\n\t    Fix SF #2605955: -co option which broke in 1.3.37. \n\n2009-02-20: wsfulton\n\t    New %insert(\"begin\") section added. Also can be used as %begin. This is a new\n\t    code section reserved entirely for users and the code within the section is generated\n\t    at the top of the C/C++ wrapper file and so provides a means to put custom code\n\t    into the wrapper file before anything else that SWIG generates.\n\n2009-02-17: wsfulton\n\t    'make clean-test-suite' will now run clean on ALL languages. Previously it only\n\t    ran the correctly configured languages. This way it is now possible to clean up\n\t    properly after running 'make partialcheck-test-suite'.\n\n2009-02-14: wsfulton\n\t    Extend attribute library support for structs/classes and the accessor functions use\n\t    pass/return by value semantics. Two new macros are available and usage is identical\n\t    to %attribute. These are %attributeval for structs/classes and %attributestring for\n\t    string classes, like std::string. See attribute.swg for more details.\n\n2009-02-13: wsfulton\n\t    Add support for %extend and memberin typemaps. Previously the memberin typemaps were\n\t    ignored for member variables within a %extend block.\n\n2009-02-12: wsfulton\n\t    Remove unnecessary temporary variable when wrapping return values that are references. \n\t    Example of generated code for wrapping:\n\n\t      struct XYZ {\n\t\tstd::string& refReturn();\n\t      };\n\n\t    used to be:\n\n              std::string *result = 0 ;\n              ...\n              {\n                std::string &_result_ref = (arg1)->refReturn();\n                result = (std::string *) &_result_ref;\n              }\n\n\t     Now it is:\n\n              std::string *result = 0 ;\n              ...\n              result = (std::string *) &(arg1)->refReturn();\n\n2009-02-08: bhy\n            Change the SIZE mapped by %pybuffer_mutable_binary and %pybuffer_binary in pybuffer.i from\n            the length of the buffer to the number of items in the buffer.\n\n2009-02-08: wsfulton\n            Fix %feature not working for conversion operators, reported by Matt Sprague, for example:\n\t      %feature(\"cs:methodmodifiers\") operator bool \"protected\";\n\n2009-02-07: wsfulton\n            [MzScheme] Apply #2081967 configure changes for examples to build with recent PLT versions.\n\t    Also fixes Makefile errors building SWIG executable when mzscheme package is installed \n\t    (version 3.72 approx and later).\n\n2009-02-04: talby\n            [Perl] Fix SF#2564192 reported by David Kolovratnk.\n            SWIG_AsCharPtrAndSize() now handles \"get\" magic.\n\nVersion 1.3.38 (31 January 2009)\n================================\n\n2009-01-31: bhy\n            [Python] Fix SF#2552488 reported by Gaetan Lehmann. Now %pythonprepend\n            and %pythonappend have correct indentation.\n\n2009-01-31: bhy\n            [Python] Fix SF#2552048 reported by Gaetan Lehmann. The parameter list\n            of static member function in generated proxy code should not have the\n            'self' parameter.\n\n2009-01-29: wsfulton\n\t    Fix regression introduced in 1.3.37 where the default output directory\n\t    for target language specific files (in the absence of -outdir) was no\n\t    longer the same directory as the generated c/c++ file.\n\n2009-01-28: wsfulton\n\t    [Java, C#] Fix proxy class not being used when the global scope operator\n\t    was used for parameters passed by value. Reported by David Piepgrass.\n\n2009-01-15: wsfulton\n\t    [Perl] Fix seg fault when running with -v option, reported by John Ky.\n\nVersion 1.3.37 (13 January 2009)\n================================\n\n2009-01-13: mgossage\n\t    [Lua] Added contract support for requiring that unsigned numbers are >=0\n\t    Rewrote much of Examples/Lua/embed3. \n\t    Added a lot to the Lua documentation.\n\n2009-01-13: wsfulton\n\t    Fix compilation error when using directors on protected virtual overloaded \n\t    methods reported by Sam Hendley.\n\n2009-01-12: drjoe\n            [R] Fixed handling of integer arrays\n\n2009-01-10: drjoe\n\t    [R] Fix integer handling in r to deal correctly with signed\n\t    and unsigned issues\n\n2009-01-10: wsfulton\n\t    Patch  #1992756 from Colin McDonald - %contract not working for classes \n\t    in namespace\n\n2009-01-05: olly\n\t    Mark SWIGPERL5, SWIGPHP5, and SWIGTCL8 as deprecated in the source\n\t    code and remove documentation of them.\n\n2008-12-30: wsfulton\n\t    Bug #2430756. All the languages now define a macro in the generated C/C++\n\t    wrapper file indicating which language is being wrapped. The macro name is the\n\t    same as those defined when SWIG is run, eg SWIGJAVA, SWIGOCTAVE, SWIGCSHARP etc\n\t    and are listed in the \"Conditional Compilation\" section in the documentation.\n\n2008-12-23: wsfulton\n\t    [Java] Fix #2153773 - %nojavaexception was clearing the exception feature\n            instead of disabling it. Clearing checked Java exceptions also didn't work. \n\t    The new %clearjavaexception can be used for clearing the exception feature.\n\n2008-12-22: wsfulton\n\t    Fix #2432801 - Make SwigValueWrapper exception safe for when copy constructors\n\t    throw exceptions.\n\n2008-12-21: wsfulton\n\t    Apply patch #2440046 which fixes possible seg faults for member and global\n\t    variable char arrays when the strings are larger than the string array size.\n\n2008-12-20: wsfulton\n\t    The ccache compiler cache has been adapted to work with SWIG and\n\t    named ccache-swig. It now works with C/C++ compilers as well as SWIG\n\t    and can result in impressive speedups when used to recompile unchanged\n\t    code with either a C/C++ compiler or SWIG. Documentation is in CCache.html\n\t    or the installed ccache-swig man page.\n\n2008-12-12: wsfulton\n\t    Apply patch from Kalyanov Dmitry which fixes parsing of nested structs\n\t    containing comments.\n\n2008-12-12: wsfulton\n\t    Fix error message in some nested struct and %inline parsing error situations\n\t    such as unterminated strings and comments.\n\n2008-12-07: olly\n\t    [PHP] Fix warnings when compiling generated wrapper with GCC 4.3.\n\n2008-12-06: wsfulton\n\t    [PHP] Deprecate %pragma(php4). Please use %pragma(php) instead.\n\t    The following two warnings have been renamed:\n\t    WARN_PHP4_MULTIPLE_INHERITANCE -> WARN_PHP_MULTIPLE_INHERITANCE\n\t    WARN_PHP4_UNKNOWN_PRAGMA       -> WARN_PHP_UNKNOWN_PRAGMA\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2008-12-04: bhy\n            [Python] Applied patch SF#2158938: all the SWIG symbol names started with Py\n            are changed, since they are inappropriate and discouraged in Python\n            documentation (from http://www.python.org/doc/2.5.2/api/includes.html):\n\n            \"All user visible names defined by Python.h (except those defined by\n            the included standard headers) have one of the prefixes \"Py\" or \"_Py\".\n            Names beginning with \"_Py\" are for internal use by the Python implementation\n            and should not be used by extension writers. Structure member names do\n            not have a reserved prefix.\n\n            Important: user code should never define names that begin with \"Py\" or \"_Py\".\n            This confuses the reader, and jeopardizes the portability of the user\n            code to future Python versions, which may define additional names beginning\n            with one of these prefixes.\"\n\n            Here is a brief list of what changed:\n\n                PySwig* -> SwigPy*\n                PyObject_ptr -> SwigPtr_PyObject\n                PyObject_var -> SwigVar_PyObject\n                PySequence_Base, PySequence_Cont, PySequence_Ref ->\n                        SwigPySequence_Base, SwigPySequence_Cont, SwigPySequence_Ref\n                PyMap* -> SwigPyMap*\n\n            We provided a pyname_compat.i for backward compatibility. Users whose code having\n            these symbols and do not want to change it could simply include this file\n            at front of your code. A better solution is to run the converting tool on\n            your code, which has been put in SWIG's SVN trunk (Tools/pyname_patch.py) and\n            you can download it here:\n            https://swig.svn.sourceforge.net/svnroot/swig/trunk/Tools/pyname_patch.py \n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n2008-12-02: wsfulton\n\t    [Python] Apply patch #2143727 from Serge Monkewitz to fix importing base classes \n\t    when the package option is specified in %module and that module is %import'ed.\n\n2008-11-28: wsfulton\n\t    [UTL] Fix #2080497. Some incorrect acceptance of types in the STL, eg a double * element\n\t    passed into a vector<int *> constructor would be accepted, but the ensuing behaviour\n\t    was undefined. Now the type conversion correctly raises an exception.\n\n2008-11-24: wsfulton\n\t    Add -outcurrentdir option. This sets the default output directory to the current \n\t    directory instead of the path specified by the input file. This option enables\n\t    behaviour similar to c/c++ compilers. Note that this controls the output directory,\n\t    but only in the absence of the -o and/or -outdir options.\n\n2008-11-23: wsfulton\n\t    [ruby] Apply patch #2263850 to fix ruby/file.i ... rubyio.h filename change in \n\t    ruby 1.9.\n\n2008-11-23: wsfulton\n\t    Apply patch #2319790 from Johan Hake to fix shared_ptr usage in std::tr1 namespace.\n\n2008-11-21: wsfulton\n\t    The use of the include path to find the input file is now deprecated.\n\t    This makes the behaviour of SWIG the same as C/C++ compilers in preparation\n\t    for use with ccache.\n\n2008-11-16: wsfulton\n\t    Fix -nopreprocess option to:\n\t    - correctly report file names in warning and error messages.\n\t    - use the original input filename that created the preprocessed output when \n\t      determining the C++ wrapper file name (in the absence of -o). Previously \n\t      the name of the input file containing the preprocessed output was used.\n\n2008-11-11: wsfulton\n\t    [Java] Add patch #2152691 from MATSUURA Takanori which fixes compiles using the\n\t    Intel compiler\n\n2008-11-01: wsfulton\n            Add patch #2128249 from Anatoly Techtonik which corrects the C/C++ proxy\n            class being reported for Python docstrings when %rename is used.\n\n2008-11-01: wsfulton\n            Add the strip encoder patch from Anatoly Techtonik #2130016. This enables an \n            easy way to rename symbols by stripping a commonly used prefix in all the\n            function/struct names. It works in the same way as the other encoders, such as\n            title, lower, command etc outlined in CHANGES file dated 12/30/2005. Example\n            below will rename wxAnotherWidget to AnotherWidget and wxDoSomething to \n            DoSomething:\n\n              %rename(\"%(strip:[wx])s\") \"\"; \n\n              struct wxAnotherWidget {\n                  void wxDoSomething();\n              };\n\n2008-09-26: mutandiz\n\t    [allegrocl]\n\t    Lots of test-suite work.\n\t    - Fix ordering of wrapper output and %{ %} header output.\n\t    - Fix declarations of local vars in C wrappers.\n\t    - Fix declaration of defined constants in C wrappers.\n\t    - Fix declaration of EnumValues in C wrappers.\n\t    - add some const typemaps to allegrocl.swg\n\t    - add rename for operator bool() overloads.\n\t\n2008-09-25: olly\n\t    [PHP5] Fill in typemaps for SWIGTYPE and void * (SF#2095186).\n\n2008-09-22: mutandiz (Mikel Bancroft)\n\t    [allegrocl]\n\t    - Support wrapping of types whose definitions are not seen by\n\t    SWIG. They are treated as forward-referenced classes and if a\n\t    definition is not seen are treated as (* :void).\n\t    - Don't wrap the contents of unnamed namespaces.\n\t    - More code cleanup. Removed some extraneous warnings.\n\t    - start work on having the allegrocl mod pass the cpp test-suite.\n\n2008-09-19: olly\n\t    [PHP5] Add typemaps for long long and unsigned long long.\n\n2008-09-18: wsfulton\n            [C#] Added C# array typemaps provided by Antti Karanta.\n            The arrays provide a way to use MarshalAs(UnmanagedType.LPArray)\n            and pinning the array using 'fixed'. See arrays_csharp.i library file\n            for details.\n\n2008-09-18: wsfulton\n\t    Document the optional module attribute in the %import directive,\n            see Modules.html. Add a warning for Python wrappers when the\n            module name for an imported base class is missing, requiring the\n            module attribute to be added to %import, eg \n\n              %import(module=\"FooModule\") foo.h\n\n2008-09-18: olly\n\t    [PHP5] Change the default input typemap for char * to turn PHP\n\t    Null into C NULL (previously it was converted to an empty string).\n\t    The new behaviour is consistent with how the corresponding output\n\t    typemap works (SF#2025719).\n\n\t    If you want to keep the old behaviour, add the following typemap\n\t    to your interface file (PHP's convert_to_string_ex() function does\n\t    the converting from PHP Null to an empty string):\n\n\t    %typemap(in) char * {\n\t\tconvert_to_string_ex($input);\n\t\t$1 = Z_STRVAL_PP($input);\n\t    }\n\n2008-09-18: olly\n\t    [PHP5] Fix extra code added to proxy class constructors in the case\n\t    where the only constructor takes no arguments.\n\n2008-09-18: olly\n\t    [PHP5] Fix wrapping of a renamed enumerated value of an enum class\n\t    member (SF#2095273).\n\n2008-09-17: mutandiz (Mikel Bancroft)\n\t    [allegrocl]\n\t    - Fix how forward reference typedefs are handled, so as not to conflict\n\t    with other legit typedefs.\n\t    - Don't (for now) perform an ffitype typemap lookup when trying to\n\t    when calling compose_foreign_type(). This is actually a useful thing\n\t    to do in certain cases, the test cases for which I can't currently\n\t    locate :/. It's breaking some wrapping behavior that is more commonly\n\t    seen, however. I'll readd in a more appropriate way when I can\n\t    recreate the needed test case, or a user complains (which means\n\t    they probably have a test case).\n\t    - document the -isolate command-line arg in the 'swig -help' output.\n\t    It was in the html docs, but not there.\n\t    - small amount of code cleanup, removed some unused code.\n\t    - some minor aesthetic changes.\n\n2008-09-12: bhy\n            [Python] Python 3.0 support branch merged into SWIG trunk. Thanks to\n            Google Summer of Code 2008 for supporting this project! By default\n            SWIG will generate interface files compatible with both Python 2.x\n            and 3.0. And there's also some Python 3 new features that can be\n            enabled by passing a \"-py3\" command line option to SWIG. These\n            features are:\n\n              - Function annotation support\n                  Also, the parameter list of proxy function will be generated,\n                  even without the \"-py3\" option. However, the parameter list\n                  will fallback to *args if the function (or method) is overloaded.\n              - Buffer interface support\n              - Abstract base class support\n\n            For details of Python 3 support and these features, please see the\n            \"Python 3 Support\" section in the \"SWIG and Python\" chapter of the SWIG\n            documentation.\n\n            The \"-apply\" command line option and support of generating codes\n            using apply() is removed. Since this is only required by very old\n            Python.\n\n            This merge also patched SWIG's parser to solve a bug. By this patch,\n            SWIG features able to be correctly applied on C++ conversion operator,\n            such like this:\n              \n              %feature(\"shadow\")  *::operator bool %{ ... %}\n\n2008-09-02: richardb\n\t    [Python] Commit patch #2089149: Director exception handling mangles\n\t    returned exception.  Exceptions raised by Python code in directors\n\t    are now passed through to the caller without change.  Also, remove\n\t    the \": \" prefix which used to be added to other director exceptions\n\t    (eg, those due to incorrect return types).\n\n2008-09-02: wsfulton\n            [Python] Commit patch #1988296 GCItem multiple module linking issue when using \n            directors.\n\n2008-09-02: wsfulton\n            [C#] Support for 'using' and 'fixed' blocks in the 'csin' typemap is now\n            possible through the use of the pre attribute and the new terminator attribute, eg\n\n              %typemap(csin, \n                       pre=\"    using (CDate temp$csinput = new CDate($csinput)) {\",\n                       terminator=\"    } // terminate temp$csinput using block\",\n                      ) const CDate &\n                       \"$csclassname.getCPtr(temp$csinput)\"\n\n            See CSharp.html for more info.\n\n2008-09-01: wsfulton\n            [CFFI] Commit patch #2079381 submitted by Boris Smilga - constant exprs put into \n            no-eval context in DEFCENUM\n\n2008-08-02: wuzzeb\n            [Chicken,Allegro] Commit Patch 2019314\n            Fixes a build error in chicken, and several build errors and other errors\n            in Allegro CL\n\n2008-07-19: wsfulton\n            Fix building of Tcl examples/test-suite on Mac OS X reported by Gideon Simpson.\n\n2008-07-17: wsfulton\n            Fix SF #2019156 Configuring with --without-octave or --without-alllang\n            did not disable octave.\n\n2008-07-14: wsfulton\n            [Java, C#] Fix director typemaps for pointers so that NULL pointers are correctly \n            marshalled to C#/Java null in director methods.\n\n2008-07-04: olly\n\t    [PHP] For std_vector.i and std_map.i, rename empty() to is_empty()\n\t    since \"empty\" is a PHP reserved word.  Based on patch from Mark Klein\n\t    in SF#1943417.\n\n2008-07-04: olly\n\t    [PHP] The deprecated command line option \"-make\" has been removed.  \n\t    Searches on Google codesearch suggest that nobody is using it now\n\t    anyway.\n\n2008-07-04: olly\n\t    [PHP] The SWIG cdata.i library module is now supported.\n\n2008-07-03: olly\n\t    [PHP] The deprecated command line option \"-phpfull\" has been\n\t    removed.  We recommend building your extension as a dynamically\n\t    loadable module.\n\n2008-07-02: olly\n\t    [PHP4] Support for PHP4 has been removed.  The PHP developers are\n\t    no longer making new PHP4 releases, and won't even be providing\n\t    patches for critical security issues after 2008-08-08.\n\n2008-07-02: olly\n\t    [Python] Import the C extension differently for Python 2.6 and\n\t    later so that an implicit relative import doesn't produce a\n\t    deprecation warning for 2.6 and a failure for 2.7 and later.\n\t    Patch from Richard Boulton in SF#2008229, plus follow-up patches\n\t    from Richard and Haoyu Bai.\n\nVersion 1.3.36 (24 June 2008)\n=============================\n\n06/24/2008: wsfulton\n            Remove deprecated -c commandline option (runtime library generation).\n\n06/24/2008: olly\n\t    [PHP] Fix assertion failure when handling %typemap(in,numinputs=0)\n\t    (testcase ignore_parameter).\n\n06/24/2008: olly\n\t    [PHP] Fix segfault when wrapping a non-class function marked with\n\t    %newobject (testcase char_strings).\n\n06/22/2008: wsfulton\n            [Java] Add a way to use AttachCurrentThreadAsDaemon instead of AttachCurrentThread\n            in director code. Define the SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON macro, see\n            Lib/java/director.swg.\n\n06/21/2008: wsfulton\n            [Ruby] Fix crashing in the STL wrappers (reject! and delete_if methods)\n\n06/19/2008: wsfulton\n            [Java, C#] C# and Java keywords will be renamed instead of just issuing a warning\n            and then generating uncompilable code. Warning 314 gives the new name when a \n            keyword is found.\n\n06/19/2008: wsfulton\n            [R] Keyword handling added. R Keywords will be renamed as necessary.\n            Warning 314 gives the new name when a keyword is found.\n\n06/17/2008: mgossage\n            [Lua] Added missing support for bool& and bool*. Added runtest for li_typemaps testcase.\n            (Bug #1938142)\n\n06/07/2008: bhy\n            Added test case keyword_rename, then made the keyword renaming works properly\n            by fixing Swig_name_make() for a incomplete condition checking.\n\n06/02/2008: wsfulton\n            [Java, C#] Fix enum wrappers when using -noproxy.\n\n05/30/2008: bhy\n            Added std::wstring into Lib/typemaps/primtypes.swg, since it is also a primitive \n            type in SWIG - fixed SF #1976978.\n\n05/29/2008: wsfulton\n            [Java, C#] Fix variable wrappers when using -noproxy.\n\n05/29/2008: bhy\n            [Python] Fixed a typo of %#ifdef in Lib/python/pycontainer.swg, which is related \n            to -extranative SWIG option - SF #1971977.\n\n05/20/2008: wsfulton\n            New partialcheck makefile targets for partial testing of the test-suite. These\n            just invoke SWIG, ie no compilation and no runtime testing. It can be faster\n            when developing by just doing a directory diff of the files SWIG generates\n            against those from a previous run. Example usage from the top level directory:\n\n              make partialcheck-test-suite\n              make partialcheck-java-test-suite\n\n            This change also encompasses more flexibility in running the test-suite, eg\n            it is possible to prefix the command line which runs any target language test\n            with a tool. See the RUNTOOL, COMPILETOOL and SWIGTOOL targets in the common.mk\n            file and makefiles in the test-suite directory. For example it is possible to \n            run the runtime tests through valgrind using:\n\n              make check RUNTOOL=\"valgrind --leak-check=full\"\n\n            or invoke SWIG under valgrind using:\n\n              make check SWIGTOOL=\"valgrind --tool=memcheck\"\n\n05/19/2008: drjoe\n            [R] Fixed define that was breaking pre-2.7.  Checked in\n            patch from Soren Sonnenburg that creates strings in  \n\t    version independent way\n\n05/15/2008: wsfulton\n            [Java] Fix variable name clash in directors - SF #1963316 reported by Tristan.\n\n05/14/2008: wsfulton\n            Add an optimisation for functions that return objects by value, reducing\n            the number of copies of the object that are made. Implemented using an\n            optional attribute in the \"out\" typemap called \"optimal\". Details in \n            Typemaps.html.\n\n05/11/2008: olly\n\t    [PHP] Check for %feature(\"notabstract\") when generating PHP5 class\n\t    wrapper.\n\n05/11/2008: wsfulton\n            Fix SF #1943608 - $self substitution in %contract, patch submitted by\n            Toon Verstraelen.\n\n05/09/2008: olly\n\t    [PHP] Fix char * typemaps to work when applied to signed char * and\n\t    unsigned char * (uncovered by testcase apply_strings).\n\n05/09/2008: wsfulton\n            Fix wrapping of char * member variables when using allprotected mode.\n            Bug reported by Warren Wang.\n\n05/09/2008: olly\n\t    [PHP] Fix bad PHP code generated when wrapping an enum in a\n\t    namespace (uncovered by testcase arrays_scope).\n\n05/09/2008: olly\n\t    [PHP] SWIG now runs the PHP testsuite using PHP5, not PHP4.  PHP4\n\t    is essentially obsolete now, so we care much more about solid PHP5\n\t    support.\n\n05/07/2008: wsfulton\n            STL fixes when using %import rather than %include and the Solaris Workshop\n            compiler and the Roguewave STL.\n\n05/07/2008: wsfulton\n            Fix wrapping of overloaded protected methods when using allprotected mode.\n            Bug reported by Warren Wang.\n\n05/03/2008: wsfulton\n            Commit patch #1956607 to add -MT support from Richard Boulton.\n            This patch mirrors the gcc -MT option which allows one to change the default\n            Makefile target being generated when generating makefiles with the -M family\n            of options. For example:\n\n              $ swig -java -MM -MT overriddenname -c++  example.i\n              overriddenname: \\\n               example.i \\\n               example.h \n\n04/30/2008: mgossage\n\t    [Lua] Removed generation of _wrap_delete_XXXXX (wrappered destructor)\n\t    which was unused and causing warning with g++ -Wall.\n\t    Removed other unused warning in typemaps.i and other places.\n\t    Added Examples/lua/embed3, and run tests a few test cases.\n\n04/24/2008: olly\n\t    [Python] Fix generated code for IBM's C++ compiler on AIX (patch\n\t    from Goeran Uddeborg in SF#1928048).\n\n04/24/2008: olly\n\t    Rename BSIZE in Examples/test-suite/arrays_scope.i to BBSIZE to\n\t    avoid a clash with BSIZE defined by headers on AIX with Perl\n\t    (reported in SF#1928048).\n\n04/20/2008: wsfulton\n            Add the ability to wrap all protected members when using directors.\n            Previously only the virtual methods were available to the target language.\n            Now all protected members, (static and non-static variables, non-virtual methods\n            and static methods) are wrapped when using the allprotected mode. The allprotected\n            mode is turned on in the module declaration:\n\n              %module(directors=\"1\", allprotected=\"1\") modulename\n\nVersion 1.3.35 (7 April 2008)\n=============================\n\n04/07/2008: wsfulton\n            [Lua] Add missing pointer reference typemaps\n\n04/06/2008: wsfulton\n            Fix stack overflow when using typemap warning suppression, eg \n              %warnfilter(SWIGWARN_TYPEMAP_CHARLEAK_MSG)\n\n04/05/2008: wsfulton\n            [Python] Fix shared_ptr typemaps so that %pythonnondynamic can be used. Also corrects\n            display of the proxy class type. Reported by Robert Lupton.\n\n04/04/2008: olly\n\t    [Python] Add %newobject reference to python memory management subsection of manual\n\t    (patch from mdbeachy in SF#1894610).\n\n03/27/2008: wsfulton\n            [Python] Fix shared_ptr typemaps where the pointer type is a templated type with\n            with more than one parameter. Reported by Robert Lupton.\n\n03/27/2008: mgossage\n            [Lua] Added a typemap DISOWN for SWIGTYPE* and SWIGTYPE[], and support for %delobject feature.\n            Added Examples/lua/owner which demonstrates the use of the memory management.\n\n03/26/2008: wsfulton\n            [Java] Apply patch #1844301 from Monty Taylor to suppress enum constructor\n            unused warnings.\n\n03/26/2008: wsfulton\n            [Python] Apply patch #1924524 from Casey Raymondson which ensures the\n            \"No constructor defined\" message is displayed when attempting to call a\n            constructor on a class that doesn't have a constructor wrapper, eg if\n            the C++ class is abstract.\n\n03/26/2008: wsfulton\n            [Python] Apply patch #1925702 from Casey Raymondson which removes warning 512\n            for std::vector wrappers.\n\n03/26/2008: olly\n\t    [Python] Apply GCC 4.3 warnings patch from Philipp Thomas\n\t    (SF#1925122).\n\n03/21/2008: wsfulton\n            [Python] Thread safety patch for STL iterators from Abhinandan Jain.\n\n03/17/2008: mgossage\n            [Lua] Added %luacode feature to add source code into wrappers.\n            Updated documentation to document this.\n            Added Examples/lua/arrays to show its use (and typemaps)\n\n03/17/2008: olly\n\t    Fix nonportable sed usage which failed on Mac OS X (and probably\n\t    other platforms).  Fixes SF#1903612.\n\n03/17/2008: olly\n\t    Fix memory leak in SWIG's parser (based on patch from Russell\n\t    Bryant in SF#1914023).\n\n03/12/2008: wsfulton\n            Fix bug #1878285 - unnecessary cast for C struct creation wrappers.\n\n03/12/2008: wsfulton\n            [Python] Remove debugging info when using shared_ptr support\n\n03/06/2008: mgossage\n            [Lua] Updated documentation for Lua exceptions.\n            Added Examples/lua/exception and Examples/lua/embed2.\n            Small updates to the typemaps.\n\n03/04/2008: wsfulton\n            [Java, C#] Add char *& typemaps.\n\n03/04/2008: wsfulton\n            Fix occasional seg fault when attempting to report overloaded methods as being ignored.\n\n02/29/2008: wsfulton\n            [Perl] Fix #1904537 Swig causes a Perl warning \"x used only once\" in Perl 5.10\n            reported by Ari Jolma\n\n02/29/2008: wsfulton\n            [Python] Add shared_ptr varin/varout typemaps for wrapping global variables.\n\n02/25/2008: wsfulton\n            Fix $wrapname to work in %exception (fixes some wrap:name assertions)\n\nVersion 1.3.34 (27 February 2008)\n=================================\n\n02/13/2008: wsfulton\n            [R] Fix wrapping of global function pointer variables.\n\n02/13/2008: wsfulton\n            Add new special variables for use within %exception:\n              $wrapname - language specific wrapper name\n              $overname - if a method is overloaded this contains the extra mangling used on \n                          the overloaded method\n              $decl     - the fully qualified C/C++ declaration of the method being wrapped \n                          without the return type\n              $fulldecl - the fully qualified C/C++ declaration of the method being wrapped \n                          including the return type\n\n02/12/2008: drjoe\n            [R] Now setting S4 flag in SWIG created objects.  This\n            fixes R-SWIG for 2.6 and warning for 2.6 failure has been removed.\n\n02/11/2008: mgossage\n            [Lua] Added a patch by Torsten Landschoff to fix the unary minus issue\n            Ran 'astyle --style=kr -2' across lua.cxx to neaten it up\n\n02/10/2008: wsfulton\n            Bump SWIG_RUNTIME_VERSION to 4. This is because of the recently introduced API \n            change in the conversion functions, ie change in definition of swig_converter_func.\n            Anyone calling SWIG_TypeCast must pass in a valid value for the new additional\n            (third) parameter and then handle the newly created memory if the returned value\n            is set to SWIG_CAST_NEW_MEMORY else a memory leak will ensue.\n\n02/09/2008: wsfulton\n            [Python] Experimental shared_ptr typemaps added. Usage is the same as the recently\n            added Java and C# shared_ptr typemaps. Two macros are available, although these\n            may well change in a future version:\n\n            For base classes or classes not in an inheritance chain:\n              SWIG_SHARED_PTR(PROXYCLASS, TYPE)\n            For derived classes:\n              SWIG_SHARED_PTR_DERIVED(PROXYCLASS, BASECLASSTYPE, TYPE)\n\n            The PROXYCLASS is the name of the proxy class, but is only required for Java/C#.\n            Example usage:\n\n              %include \"boost_shared_ptr.i\"\n\n              SWIG_SHARED_PTR(Klass, Space::Klass)\n              SWIG_SHARED_PTR_DERIVED(KlassDerived, Space::Klass, Space::KlassDerived)\n\n              namespace Space {\n                struct Klass { ... };\n                struct KlassDerived : Klass { ... };\n              }\n\n            Further details to follow in future documentation, but the following features\n            should be noted:\n\n            - Not restricted to boost::shared_ptr, eg std::tr1::shared_ptr can also be used.\n            - Available typemap groups:\n              (a) Typemaps for shared_ptr passed by value, reference, pointer and pointer \n                  reference.\n            - (b) Typemaps for passing by raw value, raw pointer, raw reference, raw pointer\n                  reference. \n            - The code being wrapped does not even have to use shared_ptr, SWIG can use\n              shared_ptr as the underlying storage mechanism instead of a raw pointer due to \n              the typemaps in group (b) above.\n            - No array support as shared_ptr does not support arrays.\n            - This works quite differently to the usual SWIG smart pointer support when\n              operator-> is parsed by SWIG:\n              - An additional smart pointer class is not generated reducing code bloat in\n                the wrappers.\n              - Using smart pointers and raw pointers can be mixed seamlessly.\n              - Missing constructors for the smart pointers is no longer a problem and so\n                separate factory type functions do not have to be written and wrapped.\n              - The implicit C++ shared_ptr< derived class > to shared_ptr< base class >\n                cast also works in the target language. This negates the necessity to write\n                an explicit helper cast function providing the upcast which would need\n                calling prior to passing a derived class to a method taking a shared_ptr to\n                a base class.\n\n02/09/2008: wsfulton\n            [Python] Add support for overriding the class registration function via a new\n            \"smartptr\" feature. This is a very low level of customisation most users\n            would never need to know. The feature will typically be used for intrusive \n            smart pointers along with additional typemaps. Example usage of the feature:\n\n              %feature(\"smartptr\", noblock=1) Foo { boost::shared_ptr< Foo > }\n              class Foo {};\n\n            The generated Foo_swigregister function will then register boost::shared < Foo >\n            (SWIGTYPE_p_boost__shared_ptrTFoo_t instead of SWIGTYPE_p_Foo) as the underlying\n            type for instantiations of Foo.\n\n02/09/2008: wsfulton\n            Features now supports the optional 'noblock' attribute for all usage of %feature. \n            When specified, the { } braces are removed from the feature code. This is identical\n            in behaviour to usage of 'noblock' in typemaps and is used when the preprocessor\n            is required to operate on the code in the feature and the enclosing { } braces\n            are not required. Example:\n\n              #define FOO foo\n              %feature(\"smartptr\", noblock=\"1\") { FOO::bar }\n\n            The preprocessor then reduces this as if this had been used instead:\n\n              %feature(\"smartptr\") \"foo::bar\"\n\n02/01/2008: olly\n\t    [Python] Fix format string bug (SF#1882220).\n\n01/31/2008: wsfulton\n            Additions to the %types directive. Now the conversion / casting code can be\n            overridden to some custom code in the %types directive, like so:\n\n              %types(fromtype = totype) %{\n                ... code to convert fromtype to totype and return ...\n              %}\n\n            The special variable $from will be replaced by the name of the parameter of the\n            type being converted from. The code must return the totype cast to void *. Example:\n\n              class Time;\n              class Date;\n              Date &Time::dateFromTime();\n\n              %types(Time = Date) %{\n                Time *t = (Time *)$from;\n                Date &d = t->dateFromTime();\n                return (void *) &d;\n              %}\n\n            resulting in the conversion / casting code looking something like:\n\n              static void *_p_TimeTo_p_Date(void *x) {\n                Time *t = (Time *)x;\n                Date &d = t->dateFromTime();\n                return (void *) &d;\n              }\n\n            This is advanced usage, please use only if you understand the runtime type system.\n\n01/30/2008: mgossage\n\t    Small update to documentation in Typemaps.html, to warn about use of local \n\t    variables in typemaps for multiple types.\n\n01/25/2008: wsfulton\n\t    [Java] Fix bug reported by Kevin Mills in ARRAYSOFCLASSES typemaps where any\n            changes made to an array element passed from Java to C are not reflected back\n            into Java.\n\n01/24/2008: mgossage\n\t    More updates to the configure script for detecting lua.\n\t    Also looks in /usr/include/lua*\n\t    Also changed typemaps.i not to check for NULL before freeing a pointer\n\n01/21/2008: wsfulton\n\t    [Python] For STL containers, SWIG no longer attempts to convert from one\n            STL container to another, eg from std::vector<int> to std::vector<double>\n            or std::list<int> to std::vector<int> or even std::vector<Foo> to\n            std::vector<Bar> as it previously did. In fact SWIG no longer attempts to\n            convert any SWIG wrapped C++ proxy class that is also a Python sequence,\n            whereas previously it would. Any non-SWIG Python sequence will still be\n            accepted wherever an STL container is accepted. Overloaded methods using\n            containers should be faster.\n\n01/18/2008: wsfulton\n\t    [C#] Add 'directorinattributes' and 'directoroutattributes' typemap attributes\n            for the imtype typemap. These should contain C# attributes which will\n            be generated into the C# director delegate methods.\n\n01/18/2008: olly\n\t    Fix handling of byte value 255 in input files on platforms where\n\t    char is signed (it was getting mapped to EOF).  Fixes SF#1518219.\n\n01/16/2008: wsfulton\n\t    Fix template member variables wrapped by a smart pointer. Bug reported \n            by Robert Lupton.\n\n01/14/2008: mgossage\n\t    Substantial changes to configure script for detecting lua.\n\t      Code can now link to liblua.a, liblua50.a or liblua51.a\n\t      It's also a lot neater now.\n\n12/16/2007: wsfulton\n\t    [Perl] Backed out #1798728 - numbers can be passed to functions taking char *\n\n12/16/2007: wsfulton\n\t    Fix #1832613 - Templates and some typedefs involving pointers or function pointers\n\n12/12/2007: wsfulton\n\t    [Java] Fix #1632625 - Compilation errors on Visual C++ 6 when using directors.\n\n12/12/2007: wsfulton\n\t    [Perl] Fix #1798728 - numbers can be passed to functions taking char *.\n\n12/12/2007: wsfulton\n\t    Fix #1819847 %template with just one default template parameter \n\n              template<typename T = int> class Foo {...};\n              %template(FooDefault) Foo<>;\n\n12/12/2007: mgossage\n\t    [Lua] Small correction on Lua.html\n\n12/09/2007: wsfulton\n\t    Apply patch #1838248 from Monty Taylor for vpath builds of SWIG.\n\n12/08/2007: wsfulton\n\t    [Lua] Fixes to remove gcc-4.2 warnings\n\n12/06/2007: wsfulton\n\t    Fix #1734415 - template template parameters with default arguments such as:\n\n              template<typename t_item, template<typename> class t_alloc = pfc::alloc_fast >\n                class list_t : public list_impl_t<t_item,pfc::array_t<t_item,t_alloc> > { ... };\n\n12/04/2007: mgossage\n\t    [lua] Fix a bug in the class hierachy code, where the methods were not propagated, \n\t    if the name ordering was in a certain order.\n\t    Added new example programs (dual, embed) and runtime tests for test-suite.\n\n11/30/2007: wsfulton\n\t    Fix using statements using a base class method where the methods were overloaded.\n            Depending on the order of the using statements and method declarations, these\n            were previously generating uncompilable wrappers, eg:\n\n              struct Derived : Base {\n                virtual void funk();\n                using Base::funk;\n              };\n\nVersion 1.3.33 (November 23, 2007)\n==================================\n\n11/21/2007: mikel\n\t    [allegrocl] omit private slot type info in the classes/types\n\t    defined on the lisp side. Fix bug in mapping of C/++ types\n\t    to lisp types. Fix typo in modules generated defpackage form.\n\t    Have std::string *'s automatically marshalled between foreign\n\t    and lisp strings.\n\t\n11/20/2007: olly\n\t    [Python] Fill in Python Dictionary functions list (patch from\n\t    Jelmer Vernooij posted to swig-devel).\n\n11/20/2007: beazley\n            Fixed a bug in the C scanner related to backslash characters.\n\n11/19/2007: wsfulton\n\t    [Perl] Fix broken compilation of C++ wrappers on some compilers.\n\n11/16/2007: olly\n\t    [Python] Don't pass Py_ssize_t for a %d printf-like format as\n\t    that's undefined behaviour when sizeof(Py_ssize_t) != sizeof(int).\n\nVersion 1.3.32 (November 15, 2007)\n==================================\n\n11/14/2007: wsfulton\n            [R] Package name and dll name is now the same as the SWIG module\n            name. It used to be the module name with _wrap as a suffix. The package\n            and dll names can be modified using the -package and -dll commandline\n            options.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n11/11/2007: wsfulton\n            [R] Add support for Windows (Visual C++ 8 tested)\n\n11/10/2007: olly\n\t    [php] Fix makefile generated by -make (SF#1633679).  Update\n\t    documentation to mark \"-make\" as deprecated (none of the other\n\t    SWIG backends seem to offer such a feature, it can't realistically\n\t    generate a fully portable makefile, and the commands to build an\n\t    extension are easy enough to write for the user's preferred build\n\t    tool).  Also recommend against the use of \"-phpfull\" (it's only\n\t    really useful when static linking, and a dynamically loadable\n\t    module is virtually always the better approach).\n\n11/09/2007: olly\n\t    Fix --help output to note that `export SWIG_FEATURES' is required.\n\n10/29/2007: wsfulton\n            [R] Fix seg fault on Windows\n            [R] Examples R scripts are now platform independent\n\n10/30/2007: mgossage\n\t    [lua] fixed bug in template classes which cases template_default2\n\t    and template_specialization_defarg to fail.\n\t    Added several warning filters into the overload's test cases.\n\t    Added runtime tests for several codes.\n\t    You can now make check-lua-test-suite with no errors and only a few warnings.\n\n10/30/2007: olly\n\t    [guile] Fix the configure test to put GUILELINK in LIBS not LDFLAGS\n\t    (SF#1822430).\n\n10/30/2007: olly\n\t    [guile] Fix the guile examples on 64-bit platforms.\n\n10/29/2007: wsfulton\n            [C#] Fix member pointers on 64 bit platforms.\n\n10/28/2007: olly\n\t    [lua] Fix swig_lua_class instances to be static to allow multiple\n\t    SWIG wrappers to be compiled into the same executable statically.\n\t    Patch from Andreas Fredriksson (posted to the swig mailing list).\n\n10/28/2007: olly\n\t    [lua] Fix Examples/lua to pass SRCS for C tests rather than CXXSRCS.\n\t    The code as it was happened to work on x86, but broke on x86_64 (and\n\t    probably any other platforms which require -fPIC).\n\n10/28/2007: wsfulton\n            [Java, C#] New approach for fixing uninitialised variable usage on error in director\n            methods using the new templated initialisation function SwigValueInit().\n\n10/28/2007: wsfulton\n            [Perl] Use more efficient SvPV_nolen(x) instead of SvPV(x,PL_na) if SvPV_nolen is\n            supported.\n\n10/26/2007: wuzzeb\n\t    [Chicken] Fix global variables of class member function pointers.\n\t    Other minor fixes, so all tests in the chicken test suite now pass\n\n10/25/2007: olly\n\t    Fix UTL typecheck macro for a function taking char[] or const\n\t    char[] (SF#1820132).\n\n10/22/2007: mkoeppe\n\t    [Guile] Filter out -ansi -pedantic from CFLAGS while compiling test programs for Guile\n\t    in configure.  This enables running the test suite for Guile if it is installed and\n\t    usable.\n\n10/22/2007: mkoeppe\n\t    [Guile -scm] Fix testcases apply_signed_char and apply_strings\n\t    by adding explicit casts to the appropriate $ltype.\n\n10/22/2007: wsfulton\n            [Java, C#] Fix uninitialised variable usage on error in director methods.\n\n10/19/2007: wsfulton\n            [Java, C#] Bug #1794247 - fix generated code for derived classes when csbase or javabase\n            typemaps are used with the replace=\"1\" attribute.\n\n10/19/2007: wsfulton\n            [Python] Docs updated to suggest using distutils. Patch #1796681 from Christopher Barker.\n\n10/19/2007: olly\n\t    [perl5] Clear errno before calls to strtol(), strtoul(), strtoll()\n\t    and strtoull() which we check errno after to avoid seeing a junk\n\t    value of errno if there isn't an error in the call.\n\n10/16/2007: wsfulton\n            Deprecate %attribute_ref and replace with %attributeref. There is just an argument\n            order change in order to maintain consistency with %attribute, from:\n\n              %attribute_ref(Class, AttributeType, AccessorMethod, AttributeName)\n            to\n              %attributeref(Class, AttributeType, AttributeName, AccessorMethod)\n\n10/16/2007: olly\n\t    [Tcl] Fix several occurrences of \"warning: deprecated conversion\n\t    from string constant to 'char*'\" from GCC 4.2 in generated C/C++\n\t    code.\n\n10/16/2007: olly\n\t    [PHP] Fix many occurrences of \"warning: deprecated conversion from\n\t    string constant to 'char*'\" from GCC 4.2 in generated C/C++ code\n\t    when compiling with a new enough version of PHP 5 (tested with\n\t    PHP 5.2.3, but PHP 5.2.1 is probably the minimum requirement).\n\n10/15/2007: wsfulton\n            Patch #1797133 from David Piepgrass fixes %attribute when the getter has the same name\n            as the attribute name and no longer generate non-functional setter for read-only attributes.\n\n10/15/2007: olly\n\t    [Tcl] Prevent SWIG_Tcl_ConvertPtr from calling the unknown proc.\n\t    Add Examples/tcl/std_vector/ which this change fixes.  Patch\n\t    is from \"Cliff C\" in SF#1809819.\n\n10/12/2007: wsfulton\n            [Java] Add DetachCurrentThread back in for directors. See entry dated 08/11/2006 and\n            search for DetachCurrentThread on the mailing lists for details. The crashes on Solaris\n            seem to be only present in jdk-1.4.2 and lower (jdk-1.5.0 and jdk-1.6.0 are okay), so\n            anyone using directors should use a recent jdk on Solaris, or define (see director.swg)\n            SWIG_JAVA_NO_DETACH_CURRENT_THREAD to the C++ compiler to get old behaviour.\n\n10/12/2007: wsfulton\n\t    [Java] Ensure the premature garbage collection prevention parameter (pgcpp) is generated\n            when there are C comments in the jtype and jstype typemaps.\n\n10/12/2007: wuzzeb\n\t    Added a testsuite entry for Bug #1735931\n\n10/09/2007: olly\n\t    Automatically rerun autogen.sh if configure.in is modified.\n\n10/09/2007: olly\n\t    Enhance check-%-test-suite rule and friends to give a more helpful\n\t    error message if you try them for a language which doesn't exist\n\t    (e.g. \"make check-php-test-suite\" rather than the correct\n\t    \"make check-php4-test-suite\").\n\n10/09/2007: olly\n\t    Add make rule to regenerate Makefile from Makefile.in if it has\n\t    changed.\n\n10/09/2007: olly\n\t    [php] Fix long-standing memory leak in wrapped constructors and\n\t    wrapped functions/methods which return an object.\n\n10/08/2007: olly\n\t    Fix Makefile.in to read check.list files correctly in a VPATH\n\t    build.\n\n10/07/2007: wsfulton\n            [C#, Java] Experimental shared_ptr typemaps added\n\n09/27/2007: mgossage\n\t    [lua] added more verbose error messages for incorrect typechecks.\n\t    Added a routine which checks the exact number of parameters passed to a function\n\t    (breaks operator_overloading for unary minus operator, currently disabled).\n\t    Reorganised the luatypemaps.swg to tidy it up.\n\t    Added a lot of %ignores on the operators not supported by lua.\n\t    Added support for constant member function pointers & runtest for member_pointer.i\n\t    Added first version of wchar.i\n\n09/25/2007: wsfulton\n            [C#, Java] throws typemaps for std::wstring using C# patch #1799064 from David Piepgrass\n\n09/24/2007: wsfulton\n            [Tcl] Apply #1771313 to fix bug #1650229 - fixes long long and unsigned long long\n            handling.\n\n09/20/2007: olly\n\t    [Java] Eliminate some unnecessary uses of a temporary buffer\n\t    allocated using new[].  SF#1796609.\n\n09/19/2007: wsfulton\n            [C#] The $csinput special variable can be used in the csvarin typemap where it is always\n            expanded to 'value'.\n\n09/19/2007: wsfulton\n            [C#] Fix bug reported by Glenn A Watson and #1795260 where the cstype typemap used the 'ref'\n            keyword in the typemap body, it produced uncompilable C# properties (variable wrappers).\n            The type for the property now correctly comes from the 'out' attribute in the cstype typemap.\n\n09/19/2007: wsfulton\n            [Java] Fix const std::wstring& typemaps\n\n09/19/2007: wsfulton\n\t    [Java] Ensure the premature garbage collection prevention parameter (pgcpp) is generated\n            where a parameter is passed by pointer reference, eg in the std::vector wrappers. The pgcpp\n            is also generated now when user's custom typemaps use a proxy class in the jstype typemap\n            and a 'long' in the jtype typemap.\n\n09/18/2007: olly\n\t    [php] Add typemaps for handling parameters of type std::string &\n\t    which are modified by the wrapped function.\n\n09/17/2007: olly\n\t    [python] Split potentially long string literals to avoid hitting\n\t    MSVC's low fixed limit on string literal length - patch from\n\t    SF#1723770, also reported as SF#1630855.\n\n09/17/2007: olly\n\t    [ocaml] Fix renaming of overloaded methods in the method_table -\n\t    my patch from SF#940399.\n\n09/17/2007: olly\n\t    [python] Simpler code for SWIG_AsVal_bool() which fixes a \"strict\n\t    aliasing\" warning from GCC - patch from SF#1724581 by Andrew\n\t    Baumann.\n\n09/17/2007: olly\n\t    [perl5] Use sv_setpvn() to set a scalar from a pointer and length\n\t    - patch from SF#174460 by \"matsubaray\".\n\n09/17/2007: olly\n\t    When wrapping C++ code, generate code which uses\n\t    std::string::assign(PTR, LEN) rather than assigning\n\t    std::string(PTR, LEN).  Using assign generates more efficient code\n\t    (tested with GCC 4.1.2).\n\n09/07/2007: wsfulton\n\t    Fix %ignore on constructors which are not explicitly declared [SF #1777712]\n\n09/05/2007: wuzzeb (John Lenz)\n\t    - Change r_ltype in typesys.c to store a hashtable instead of a single value.\n\t      several very subtle bugs were being caused by multiple ltypes being mapped\n\t      to a single mangled type, mostly when using typedefed template parameters.\n\t      Now, r_ltype stores a hashtable of possible ltypes, and when generating the\n\t      type table, all the ltypes are added into the swig_type_info structure.\n\n08/31/2007: wsfulton\n            SF #1754967 from James Bigler.\n            - Fix bug in turning on warnings that were turned off by default. Eg 'swig -w+309' will now\n              turn on the normally suppressed warning 309.\n\n            - New -Wextra commandline option which enables the extra warning numbers:\n              202,309,403,512,321,322 (this is the list of warnings that have always been suppressed by\n              default). By specifying -Wextra, all warnings will be turned on, but unlike -Wall,\n              warnings can still be selectively turned on/off using %warnfilter,\n              #pragma SWIG nowarn or further -w commandline options, eg:\n                swig -Wextra -w309\n              will turn on all warnings except 309.\n\n08/28/2007: wsfulton\n            - New debugging options, -debug-module <n> and -debug-top <n> to display the parse tree at\n              various stages, where <n> is a comma separated list of stages 1-4.For example, to\n              display top of parse tree at stages 1 and 3:\n                swig -debug-top 1,3\n\n            - Deprecate the following options which have equivalents below:\n              -dump_parse_module    =>   -debug-module 1\n              -dump_module          =>   -debug-module 4\n              -dump_parse_top       =>   -debug-top 1\n              -dump_top             =>   -debug-top 4\n\n            - Renamed some commandline options for naming consistency across all options:\n              -debug_template  =>   -debug-template\n              -debug_typemap   =>   -debug-typemap\n              -dump_classes    =>   -debug-classes\n              -dump_tags       =>   -debug-tags\n              -dump_typedef    =>   -debug-typedef\n              -dump_memory     =>   -debug-memory\n\n08/25/2007: olly\n\t    [PHP5] Fix handling of double or float parameters with an integer\n\t    default value.\n\n08/25/2007: olly\n\t    [PHP5] Generate __isset() methods for setters for PHP 5.1 and later.\n\n08/20/2007: wsfulton\n            [Java C#] Fix director bug #1776651 reported by Stephane Routelous which occurred when\n            the director class name is the same as the start of some other symbols used within\n            the director class.\n\n08/17/2007: wsfulton\n            Correct behaviour for templated methods used with %rename or %ignore and the empty\n            template declaration - %template(). A warning is issued if the method has not been\n            renamed.\n\n08/16/2007: mutandiz (Mikel Bancroft)\n\t    [allegrocl] Name generated cl file based on input file rather than by\n\t    module name. It was possible to end up with a mypackage.cl and a test_wrap.c\n\t    when parsing a test.i input file. Confusing. Also, include external-format\n\t    templates for :fat and :fat-le automatically to avoid these being compiled\n\t    at runtime.\n\n08/15/2007: efuzzyone\n            [cffi] Apply patch #1766076 from Leigh Smith adding support for newly introduced\n            in cffi :long-long and :unsigned-long-long.\n\n08/10/2007: wsfulton\n            [Java] Add documentation patch #1743573 from Jeffrey Sorensen. It contains a neat\n            idea with respect to better memory management by the JVM of C++ allocated memory.\n\n08/10/2007: wsfulton\n            [Perl] Apply patch #1771410 from Wade Brainerd to fix typedef XS(SwigPerlWrapper) in\n            perlrun.swg for ActiveState Perl build 822 and Perl 5.8.9 and 5.10 branches.\n\n08/10/2007: wsfulton\n            [Lua] const enum reference typemaps fixed.\n\n08/09/2007: wsfulton\n            [C#] Added missing support for C++ class member pointers.\n\n08/09/2007: wsfulton\n            [C#, Java] Add support for $owner in the \"out\" typemaps like in the scripting\n            language modules. Note that $owner has always been supported in the \"javaout\" / \"csout\"\n            typemaps.\n\n08/01/2007: wsfulton\n            Fix smart pointer handling for classes that have templated methods within the smart\n            pointer type. Problem reported by craigdo at ee.washington.edu.\n\n07/31/2007: efuzzyone\n            [cffi] fixed memory access after being freed bug. thanks to Martin Percossi.\n            package name clos changed to cl. thanks to Ralf Mattes\n\n07/24/2007: wsfulton\n            Parallel make support added for the examples and test-suite for developers who have\n            more than one CPU. Now parallel make can be used for checking in addition to building\n            the SWIG executable. Some typical checking examples:\n\n              make -j8 -k check\n              make -j4 check-java-test-suite\n              make -j2 check-java-examples\n\n07/19/2007: mgossage\n            Fixed bug that stopped configure working on mingw (applied dos2unix to configure.in)\n\n07/10/2007: mgossage\n            [lua] Extra compatibility with Lua 5.1 (updated SWIG_init, docs, examples, test suite)\n\t    Removed name clash for static link of multiple modules\n\n07/05/2007: mgossage\n            [lua] Fix a bug in SWIG_ALLOC_ARRAY()\n            improved the error messages for incorrect arguments.\n            Changed the output of swig_type() to use the human readable form of the type,\n\t    rather than the raw swig type.\n\n07/03/2007: wsfulton\n            [C#] Fix directors for some overloaded methods where the imtype resulted in identical\n            methods being generated in the C# director class, eg void foo(int *) and void foo(double *)\n            used to generated two of these:\n\n              private void SwigDirectorfoo(IntPtr p) { ... }\n\n06/25/2007: wsfulton\n            [Java, C#] Some parameter name changes in std_vector.i allowing better targeting\n            of typemaps for method parameters (for memory management of containers of pointers).\n\n06/07/2007: mutandiz (Mikel Bancroft)\n\t    [allegrocl]\n\t    fix foreign-type constructor to properly look for ffitype typemap\n\t    bindings. fix inout_typemaps.i for strings.\n\n06/06/2007: olly\n\t    [Ruby]\n\t    Use whichever of \"long\" or \"long long\" is the same size as \"void*\"\n\t    to hold pointers as integers, rather than whichever matches off_t.\n\t    Fixes compilation on OS X and GCC warnings on platforms where\n\t    sizeof(void*) < sizeof(off_t) (SF patch #1731979).\n\n06/06/2007: olly\n\t    [PHP5]\n\t    Fix handling of a particular case involving overloaded functions\n\t    with default parameters.\n\n06/05/2007: mutandiz (Mikel Bancroft)\n\t    [allegrocl]\n\t    Fix case where we'd pass fully qualified identifiers\n\t    (i.e. NS1::NS2::FOO) to swig-insert-id. All namespaces\n\t    should be stripped.\n\n\t    Fix bug in TypedefHandler introduced by last fix.\n\n06/05/2007: olly\n\t    Fix reporting of filenames in errors after %include (patch from\n\t    Leigh Smith in #1731040; also reported as #1699940).\n\n05/31/2007: olly\n\t    [Python]\n\t    Fix \"missing initialiser\" warning when compiling generated C/C++\n\t    wrapper code with Python 2.5 with warnings enabled (patch from\n\t    bug#1727668 from Luke Moore).\n\n05/29/2007: olly\n\t    [Python]\n\t    Split docstrings into separate string literals at each newline when\n\t    generating C/C++ wrapper code (the C/C++ compiler will just combine\n\t    them back into a single string literal).  This avoids MSVC\n\t    complaining that the strings are too long (problem reported by\n\t    Bo Peng on the mailing list).\n\n05/28/2007: olly\n\t    [Python]\n\t    Escape backslashes in docstrings.\n\n05/26/2007: olly\n\t    [Python]\n\t    Fix autodoc generation of enums to be more consistent with how the\n\t    enums are wrapped - patch #1697226 from Josh Cherry.\n\n05/26/2007: olly\n\t    [PHP5]\n\t    Fix wrapping of methods and functions which return a pointer to a\n\t    class (bug#1700788) and those which have overloaded forms returning\n\t    both classes and non-classes (bug#1712717, thanks to Simon\n\t    Berthiaume for the patch).\n\n05/25/2007: wsfulton\n            Fixed %rename inconsistency in conversion operators as reported by Zhong Ren. The matching\n            is now done on the operator name in the same way as it is done for parameters. For example:\n\n              %rename(opABC) Space::ABC::operator ABC() const;\n              %rename(methodABC) Space::ABC::method(ABC a) const;\n              namespace Space {\n                class ABC {\n                  public:\n                    void method(ABC a) const {}\n                    operator ABC() const { ABC a; return a; }\n                };\n              }\n\n            Note that qualifying the conversion operator previously may or may not have matched.\n            Now it definitely won't, so this will not match:\n\n              %rename(opABC) Space::ABC::operator Space::ABC() const;\n\n            in the same way that this does not match:\n\n              %rename(methodABC) Space::ABC::method(Space::ABC a) const;\n\n            The documentation has been improved with respect to %rename, namespaces and templates.\n            Conversion operators documentation too.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n05/16/2007: mutandiz\n\t    [allegrocl]\n\t    Fix bad generation of local var ltype's in functionWrapper().\n\t    Try to work better with the backward order in which swig\n\t    unrolls nested class definitions.\n\t    cleaned up a little unnecessary code/debug printf's.\n\t    Remove warning when replacing $ldestructor for ff:foreign-pointer\n\n05/12/2007: olly\n\t    [Python]\n\t    swig -python -threads now generates C/C++ code which uses Python's\n\t    own threading abstraction (from pythread.h) rather than OS specific\n\t    code.  The old code failed to compile on MS Windows.  (See SF patch\n\t    tracker #1710341).\n\n05/04/2007: gga\n\t    [Ruby]\n\t    Changed STL renames to be global renames.  This fixes\n\t    STL functions not being renamed when autorename is on.\n            This is a not a totally perfect work-around, but better.\n\t    Someone really needs to fix the template renaming code.\n\t    (See bug #1545634)\n\n05/04/2007  gga\n\t    [All]\n            Changed %rename(\"%(undercase)s\") a little so that single\n\t    numbers at the end of a function are not undercased.  That is:\n\t\tgetSomething -> get_something\n\t\tget2D\t     -> get_2d\n\t\tget234\t     -> get_234\n\t    BUT:\n\t\tasFloat2     -> as_float2\n\t    (Bug #1699714)\n\n05/03/2007: gga\n\t    [Ruby]\n\t    Made __swigtype__ => @__swigtype__ so it can be accessed\n\t    from the scripting language (and follows Ruby's official\n            documentation, just in case).\n\t    Made tracking => @__trackings__ for same reason.\n\t    Currently storing ivars without the @ seems valid, but\n\t    the PickAxe says this is not correct, so just in case...\n\n05/03/2007: gga\n\t    [Ruby]\n\t    Applied patch for -minherit bug and exception classes.\n\t    This issue should be revisited more closely, as Multiple\n\t    Inheritance in Ruby is still problematic.\n\t    (patch/bug #1604878)\n\n05/03/2007: gga\n\t    [Ruby]\n\t    Overloaded functions in ruby will now report to the user\n            the possible prototypes when the user mistypes the number or\n            type of a parameter.\n\n05/03/2007: gga\n\t    [Ruby]\n\t    Forgot to document the bug fixing of an old bug regarding\n\t    exceptions.\n\t    (bug #1458247)\n\n05/03/2007: gga\n\t    [Ruby]\n\t    Fixed Ruby documentation to use the proper css styles for\n\t    each section. Added autodoc section to Ruby's docs to\n\t    document the features supported by Ruby in documenting its modules.\n\t    Made rdoc documentation spit out the full name of the class +\n\t    method name.  Albeit this will make the current rdoc not recognize\n            the method, this is still needed to disambiguate between different\n            classes with similar methods (rdoc was created to document the\n\t    ruby source which only contains one class per c file, unlike swig)\n            I have patched rdoc to make it more friendly to swig.  This\n            patch needs to be merged in the ruby std library now.\n\n05/03/2007: gga\n\t    [Ruby]\n\t    Changed flag -feature to be -init_name to better reflect its\n\t    purpose and avoid confusion with -features.\n\n05/03/2007: gga\n\t    [Ruby]\n\t    Improved autodoc generation.\n\t    Added autodoc .swg files to Ruby library for easily adding\n\t    documentation to common Ruby methods and STL methods.\n\t    Fixed autodoc documenting of getters and setters and module.\n\t    Made test suite always generate autodocs.\n\n05/03/2007: gga\n\t    [Ruby]\n\t    Removed some warnings from STL and test suite.\n\n05/02/2007: mgossage\n            [Lua] Fixed issues with C++ classes and hierachies across multiple\n\t    source files. Fixed imports test case & added run test.\n\t    Added Examples/imports.\n\t    Added typename for raw lua_State*\n\t    Added documentation on native functions.\n\n05/02/2007: gga\n\t    [Ruby]\n\t    Docstrings are now supported.\n\t    %feature(\"autodoc\") and %feature(\"docstring\") are now\n\t    properly supported in Ruby.  These features will generate\n\t    a _wrap.cxx file with rdoc comments in them.\n\n05/02/2007: gga\n\t    [Ruby]\n\t    STL files have been upgraded to follow the new swig/python\n\t    Lib/std conventions.\n\t    This means std::vector, std::set, std::map, set::multimap,\n\t    std::multiset, std::deque and std::string are now properly\n\t    supported, including their iterators, support for containing\n\t    ruby objects (swig::GC_VALUE) and several other ruby\n\t    enhancements.\n\t    std::complex, std::ios, std::iostream, std::iostreambuf and\n\t    std::sstream are now also supported.\n\t    std::wstring, std::wios, std::wiostream, std::wiostreambuf\n\t    and std::wsstream are supported verbatim with no unicode\n\t    conversion.\n\n\t    std_vector.i now mimics the behavior of Ruby Arrays much more\n\t    closely, supporting slicing, shifting, unshifting,\n            multiple indexing and proper return values on assignment.\n\n\t    COMPATABILITY NOTE: this changes the older api a little bit in\n\t    that improper indexing would previously (incorrectly) raise\n\t    exceptions.  Now, nil is returned instead, following ruby's\n\t    standard Array behavior.\n\n05/02/2007: gga\n\t    [Ruby]\n\t    Changed the value of SWIG_TYPECHECK_BOOL to be 10000 (ie. higher\n\t    than that of all integers).\n\t    This is because Ruby allows typecasting\n\t    integers down to booleans which can make overloaded functions on\n\t    bools and integers to fail.\n\t    (bug# 1488142)\n\n05/02/2007: gga\n\t    [Ruby]\n\t    Fixed a subtle bug in multiple argouts that could get triggered if\n\t    the user returned two or more arguments and the first one was an\n\t    array.\n\n05/01/2007: gga\n\t    [Ruby]\n\t    Improved the documentation to document the new features\n            added, add directorin/out/argout typemaps, etc.\n\n05/01/2007: gga\n\t    [Ruby]\n\t    Added %initstack and %ignorestack directives for director\n\t    functions.  These allow you to control whether a director\n\t    function should re-init the Ruby stack.\n\t    This is sometimes needed for an embedded Ruby where the\n\t    director method is used as a C++ callback and not called\n            by the user from ruby code.\n\t    Explanation:\n\t    Ruby's GC needs to be aware of the running OS stack in order to\n\t    mark any VALUE (Ruby objects) it finds there to avoid collection\n\t    of them.  This allows the ruby API to be very simple and allows\n\t    you to write code like \"VALUE a = sth\" anywhere without needing\n\t    to do things like refcounting like python.\n\t    By default, the start of the stack is set when ruby_init() is\n\t    called.   If ruby is inited within main(), as it usually is the\n\t    case with the main ruby executable, ruby will be able to calculate\n\t    its stack properly.  However, when this is not possible, as when\n\t    ruby is embedded as a plugin to an application where main is not\n\t    available, ruby_init() will be called in the wrong place, and\n\t    ruby will be incorrectly tracking the stack from the function\n\t    that called ruby_init() forwards only, which can lead to\n\t    all sorts of weird crashes or to ruby thinking it has run out of\n\t    stack space incorrectly.\n\t    To avoid this, director (callback) functions can now be tagged\n\t    to try to reset the ruby stack, which will solve the issues.\n\t    NOTE: ruby1.8.6 still contains a bug in it in that its function\n\t    to reset the stack will not always do so.  This bug is triggered\n\t    very rarely, when ruby is called from two very distinct places\n\t    in memory, like a branch of main() and another dso.  This bug\n\t    has now been reported to ruby-core and is pending further\n\t    investigation.\n\t    (bug #1700535 and patch #1702907)\n\n04/30/2007: wsfulton\n            Fix #1707582 - Restore building from read-only source directories.\n\n04/30/2007: gga\n\t    [Ruby]\n\t    Ruby will now report the parameter index properly on type\n\t    errors as well as the class and value of the incorrect\n\t    argument passed.\n\t    (feature request #1699670)\n\n04/30/2007: gga\n\t    [Ruby]\n\t    Ruby no longer creates the free_Class function if the class\n\t    contains its own user defined free function (%freefunc).\n\t    (bug #1702882)\n\n04/30/2007: gga\n\t    [Ruby]\n\t    Made directors raise a ruby exception for incorrect argout\n\t    returned values if RUBY_EMBEDDED is set, instead of throwing\n\t    an actual SwigDirector exception.\n\t    This will prevent crashes when ruby is embedded and unaware\n\t    of the SwigDirector exception.\n\n04/30/2007: gga\n\t    [Ruby]\n\t    Removed the need for -DSWIGEXTERN.\n\t    Changed swig_ruby_trackings to be a static variable, but also\n\t    be kept within a hidden instance variable in the SWIG module.\n\t    This allows properly dealing with trackings across multiple\n\t    DSOs, which was previously broken.\n\t    (bug #1700535 and improvement to patch #1702907)\n\n04/29/2007: gga\n\t    [Ruby] Fixed GC memory issues with trackings that could lead\n\t    to segfaults when dealing, mainly, with static variables.\n\t    (bug #1700535 and patch #1702907)\n\n04/29/2007: gga\n\t    [Ruby]\n\t    Fixed String conversion using old ruby1.6 macros.  Now\n\t    StringValuePtr() is used if available.  This removes warnings\n\t    when converting strings with \\0 in them.\n\t    (bug #1700535 and patch #1702907)\n\n04/29/2007: gga\n\t    [Ruby]\n\t    Fixed the argout count in directors for Ruby.  Previously,\n\t    ignored or \"numinputs=0\" typemaps would incorrectly not get\n\t    counted towards the argout count.\n\t    (bug/patch #1545585)\n\n04/29/2007: gga\n\t    [Ruby]\n\t    Upgraded Ruby converter to recognize \"numinputs=0\".  Previously,\n\t    only the old \"ignore\" flag was checked (which would currently\n\t    still work properly, but is deprecated).\n\n04/29/2007: gga\n\t    [Ruby - but should be made generic]\n\n\t    %feature(\"numoutputs\",\"0\") added.\n\n\t    This feature allows you to ignore the output of a function so\n\t    that it is not added to a list of output values\n\t    ( ie. argouts ).\n\t    This should also become a feature of %typemap(directorout)\n\t    as \"numoutputs\"=0, just like \"numinputs\"=0 exists.\n\n\t    %feature(\"directors\"=1)\n\n\t    %include <typemaps.i>\n\n\t    %feature(\"numoutputs\",\"0\") { Class::member_function1 };\n\t    %typemap(out) MStatus { // some code, like check mstatus\n\t                            // and raise exception if wrong };\n\n\t    %inline %{\n\t      typedef int MStatus;\n\t      class Class {\n\n\t      // one argument returned, but director out code added\n\t      // MStatus is discarded as a return (out) parameter.\n\t      virtual MStatus member_function1( int& OUTPUT );\n\n\t      // two arguments returned, director out code added\n\t      // MStatus is not discarded\n\t      virtual MStatus member_function2( int& OUTPUT );\n\t      };\n            %}\n\n\n04/21/2007: olly\n\t    Fix parsing of float constants with an exponent (e.g. 1e-02f)\n\t    (bug #1699646).\n\n04/20/2007: olly\n\t    [Python] Fix lack of generation of docstrings when -O is used.\n\t    Also, fix generation of docstrings containing a double quote\n\t    character.  Patch from Richard Boulton in bug#1700146.\n\n04/17/2007: wsfulton\n            [Java, C#] Support for adding in Java/C# code before and after the intermediary call,\n            specifically related to the marshalling of the proxy type to the intermediary type.\n            The javain/csin typemap now supports the 'pre' and 'post' attributes to achieve this.\n            The javain typemap also supports an optional 'pgcppname' attribute for premature garbage\n            collection prevention parameter naming and the csin typemap supports an optional 'cshin'\n            attribute for the parameter type used in a constructor helper generated when the type is used\n            in a constructor. Details in the Java.html and CSharp.html documentation.\n\n04/16/2007: olly\n\t    Don't treat `restrict' as a reserved identifier in C++ mode\n\t    (bug#1685534).\n\n04/16/2007: olly\n\t    [PHP5] Fix how zend_throw_exception() is called (bug #1700785).\n\n04/10/2007: olly\n\t    Define SWIGTEMPLATEDISAMBIGUATOR to template for aCC (reported on\n\t    swig-user that this is needed).\n\n04/04/2007: olly\n\t    [PHP5] If ZTS is enabled, release <module>_globals_id in MSHUTDOWN\n\t    to avoid PHP interpreter crash on shutdown.  This solution was\n\t    suggested here: http://bugs.php.net/bug.php?id=40985\n\n04/03/2007: olly\n\t    [PHP4] Add missing ZTS annotations to generated C++ wrapper code\n\t    to fix compilation failures when using ZTS enabled SWIG (Linux\n\t    distributions tend to disable ZTS, but notably the Windows build\n\t    uses it by default).\n\n04/01/2007: efuzzyone\n            [CFFI] Patch #1684261: fixes handling of unsigned int literals, thanks Leigh Smith.\n            Also, improved documentation.\n\n03/30/2007: olly\n\t    Avoid generating '<:' token when using SwigValueWrapper<> on a type\n\t    which starts with '::' (patch #1690948).\n\n03/25/2007: wuzzeb (John Lenz)\n\t    [perl5] Add SWIG_fail to the SWIG_exception macro.  Fixes a few problems reported\n\t    on the mailing list.\n\n03/23/2007: wsfulton\n            String copying patch from Josh Cherry reducing memory consumption by about 25%.\n\n03/21/2007: wsfulton\n            [Java] Apply patch #1631987 from Ulrik Peterson - bool INOUT typemaps\n            fail on big endian machines.\n\n03/16/2007: wsfulton\n            Fix seg fault given dodgy C++ code: namespace abc::def { }\n\n03/16/2007: wsfulton\n            [Java] Fixes so that ARRAYSOFCLASSES and ARRAYSOFENUMS in arrays_java.i can be applied\n            to pointer types.\n\n03/03/2007: olly\n\t    [PHP5] When we know the literal numeric value for a constant, use\n\t    that to initialise the const member in the PHP wrapper class.\n\n03/02/2007: olly\n\t    [PHP5] Fix PHP wrapper code generated for certain cases of\n\t    overloaded forms with default arguments.\n\n02/26/2007: efuzzyone\n            [CFFI] Patch #1656395: fixed hex and octal values bug, thanks to Arthur Smyles.\n\n02/22/2007: mgossage\n            [Lua] Fixed bug in typemaps which caused derived_byvalue and rname test cases to fail.\n\t    Updated derived_byvalue.i to explain how to find and fix the problem\n\n01/25/2007: wsfulton\n            Fix #1538522 and #1338527, forward templated class declarations without a\n            name for the templated class parameters, such as:\n\n              template <typename, class> class X;\n\n01/23/2007: mgossage\n            [Lua] Patch #1640862: <malloc.h> replaced by <stdlib.h>\n\t    Patch #1598063 Typo in typemaps.i\n\n01/22/2007: mgossage\n            [Lua] Added a lua specific carrays.i which adds the operator[] support.\n\t    modified the main code to make it not emit all the class member functions & accessors\n\t    Note: C structs are created using new_XXX() while C++ classes use XXX() (should be standardised)\n\t    Updated test case: li_carrays\n\t    Updated the documentation.\n\n01/12/2007: wsfulton\n            [Php] Add support for newfree typemaps (sometimes used by %newobject)\n\n01/12/2007: beazley\n            New command line option -macroerrors.   When supplied, this will force\n            the C scanner/parser to report proper location information for code contained\n            inside SWIG macros (defined with %define).  By default, SWIG merely reports\n            errors on the line at which a macro is used.  With this option, you\n            can expand the error back to its source---something which may simplify\n            debugging.\n\n01/12/2007: beazley\n            [Internals] Major overhaul of C/C++ scanning implementation.  For quite\n            some time, SWIG contained two completely independent C/C++ tokenizers--\n            the legacy scanner in CParse/cscanner.c and a general purpose scanner\n            in Swig/scanner.c. SWIG still has two scanning modules, but the C parser\n            scanner (CParse/cscanner.c) now relies upon the general purpose\n            scanner found in Swig/scanner.c.  As a result, it is much smaller and\n            less complicated.  This change also makes it possible to maintain all\n            of the low-level C tokenizing in one central location instead of two\n            places as before.\n\n            ***POTENTIAL FLAKINESS***\n            This change may cause problems with accurate line number reporting\n            as well as error reporting more generally. I have tried to resolve this\n            as much as possible, but there might be some corner cases.\n\n01/12/2007: mgossage\n            [Lua] Added typemap throws for std::string*, typemap for SWIGTYPE DYNAMIC,\n\t    changed the existing throws typemap to throw a string instead of making a copy of\n\t    the object (updating a few test cases to deal with the change).\n\t    fixed test case: dynamic_casts, exception_partial_info, li_std_string, size_t\n\n01/03/2007: beazley\n            [Internals].  Use of swigkeys.c/.h variables is revoked.  Please use\n            simple strings for attribute names.\n\n12/30/2006: beazley\n            Internal API functions HashGetAttr() and HashCheckAttr() have been revoked.\n            Please use Getattr() to retrieve attributes.  The function Checkattr() can\n            be used to check attributes.  Note:  These functions have been revoked\n            because they only added a marginal performance improvement at the expense\n            code clarity.\n\n12/26/2006: mgossage\n            [Lua] Added more STL (more exceptions, map, size_t),\n\t    fixed test case: conversion_ns_template.\n\n12/21/2006: mgossage\n            [Lua] Update to throw errors when setting immutables,\n\t    and allowing user addition of module variables.\n\n12/20/2006: wsfulton\n            Fix typedef'd variable wrappers that use %naturalvar, eg, std::string.\n\n12/14/2006: wsfulton\n            [C#] Add std::wstring and wchar_t typemaps\n\n12/14/2006: olly\n\t    [php] Fix bug #1613673 (bad PHP5 code generated for getters and\n\t    setters).\n\n12/02/2006: wsfulton, John Lenz, Dave Beazley\n            Move from cvs to Subversion for source control\n\n11/30/2006: beazley\n            Cleaned up swigwarnings.swg file not to use nested macro\n            definitions.\n\n11/12/2006: wsfulton\n            [Java, C#] Fix for %extend to work for static member variables.\n\nVersion 1.3.31 (November 20, 2006)\n==================================\n\n11/12/2006: Luigi Ballabio\n            [Python] Alternate fix for Python exceptions bug #1578346 (the previous one broke Python\n            properties in modern classes)\n\n11/12/2006: wsfulton\n            -fakeversion commandline option now generates the fake version into the generated wrappers\n            as well as displaying it when the -version commandline option is used.\n\n14/11/2006: mgossage\n\t    [lua] update to typemap for object by value, to make it c89 compliant\n\nVersion 1.3.30 (November 13, 2006)\n==================================\n\n11/12/2006: wsfulton\n            [java] Remove DetachCurrentThread patch from  08/11/2006 - it causes segfaults\n            on some systems.\n\n11/12/2006: wsfulton\n            [python] Fix #1578346 - Python exceptions with -modern\n\n11/10/2006: wsfulton\n            Fix #1593291 - Smart pointers and inheriting from templates \n\n11/09/2006: wsfulton\n            Fix director operator pointer/reference casts - #1592173.\n\n11/07/2006: wsfulton\n            Add $self special variable for %extend methods. Please use this instead of just 'self'\n            as the C++ 'this' pointer.\n\n11/07/2006: mutandiz\n\t    [allegrocl] \n\t    allegrocl.swg: swig-defvar updated to allow specifying of\n\t    \t\t   non-default foreign type (via :ftype keyword arg).\n\t    allegrocl.cxx: Specify proper access type for enum values.\n\n11/03/2006: wsfulton\n            [Java/C#] Fix const std::string& return types for directors as reported by\n            Mark Donselzmann\n\n10/29/2006: wsfulton\n            [Java] Remove DeleteLocalRef from end of director methods for now as it is causing a\n            seg fault when run on Solaris 8.\n\n10/29/2006: wuzzeb (John Lenz)\n\t    [Guile] Patch from Chris Shoemaker to clean up some warnings in the generated code.\n\n10/29/2006: wsfulton\n            [Java] Important fix to prevent early garbage collection of the Java proxy class\n            while it is being used in a native method. The finalizer could destroy the underlying\n            C++ object while it was being used. The problem occurs when the proxy class is no\n            longer strongly reachable after a native call.  The problem seems to occur in\n            memory stress situations on some JVMs. It does not seem to occur on the\n            Sun client JVM up to jdk 1.5. However the 1.6 client jdk has a more aggressive garbage\n            collector and so the problem does occur. It does occur on the Sun server\n            JVMs (certainly 1.4 onwards). The fix entails passing the proxy class into the native\n            method in addition to the C++ pointer in the long parameter, as Java classes are not\n            collected when they are passed into JNI methods. The extra parameter can be suppressed\n            by setting the nopgcpp attribute in the jtype typemap to \"1\" or using the new -nopgcpp\n            commandline option.\n\n            See Java.html#java_pgcpp for further details on this topic.\n\n10/24/2006: wsfulton\n            [C#] Fix smart pointer wrappers. The virtual/override/new keyword is not generated\n            for each method as the smart pointer class does not mirror the underlying pointer\n            class inheritance hierarchy. SF #1496535\n\n10/24/2006: mgossage\n            [lua] added support for native methods & member function pointers.\n            fixed test cases arrays_dimensionless & cpp_basic. Added new example (functor).\n            tidied up a little of the code (around classHandler).\n\n10/17/2006: wsfulton\n            [C#, Java] directorout typemap changes to fall in line with the other director\n            languages. $result is now used where $1 used to be used. Please change your typemaps\n            if you have a custom directorout typemap.\n\n10/18/2006: wsfulton\n            Some fixes for applying the char array typemaps to unsigned char arrays.\n\n10/17/2006: wsfulton\n            [C#, Java] Add in const size_t& and const std::size_t& typemaps.\n\n10/15/2006: efuzzyone \n            [CFFI] Suppress generating defctype for enums, thanks to Arthur Smyles. Patch 1560983. \n\n10/14/2006: wuzzeb (John Lenz)\n            [Chicken] Minor fix to make SWIG work with the (as yet unreleased) chicken 2.5\n\n            [Guile,Chicken] Fix SF Bug 1573892.  Added an ext_test to the test suite to test\n            this bug, but this test can not really be made generic because the external code must\n            plug into the target language interpreter directly.\n            See Examples/test-suite/chicken/ext_test.i and ext_test_external.cxx\n\n            Added a %.externaltest to common.mk, and any interested language modules can\n            copy and slightly modify either the chicken or the guile ext_test.i\n\n10/14/2006: mgossage\n            [Lua] added OUTPUT& for all number types, added a long long type\n            fixed several test cases.\n            update: changed typemaps to use SWIG_ConvertPtr rather than SWIG_MustGetPointer\n            started spliting lua.swg into smaller parts to make it neater\n\n10/13/2006: wsfulton\n            [C#, Java] Marginally better support for multiple inheritance only in that you can\n            control what the base class is. This is done using the new 'replace' attribute in the \n            javabase/csbase typemap, eg in the following, 'Me' will be the base class,\n            no matter what Foo is really derived from in the C++ layer.\n\n              %typemap(javabase, replace=\"1\") Foo \"Me\"\n              %typemap(csbase, replace=\"1\") Foo \"Me\"\n\n            Previously it was not possible for the javabase/csbase typemaps to override the C++ base.\n\n10/12/2006: wsfulton\n            [Java] Remove potential race condition on the proxy class' delete() method \n            (it is now a synchronized method, but is now customisable by changing the \n            methodmodifiers attribute in the javadestruct or javadestruct_derived typemap)\n\n            [C#] Remove potential race condition on the proxy class' Dispose() method, \n            similar to Java's delete() above.\n\n            *** POTENTIAL INCOMPATIBILITY ***\n\n10/12/2006: wsfulton\n            [Ruby, Python] Remove redundant director code in %extend methods (%extend\n            methods cannot be director methods)\n\n10/12/2006: wsfulton\n            [Ruby, Python] Fix #1505594 - director objects not returned as director objects\n            in %extend methods.\n\n10/11/2006: wsfulton\n            [Java] Fix #1238798 - Directors using unsigned long long or any other type\n            marshalled across the JNI boundary using a Java class (where the jni typemap \n            contains jobject).\n\n10/06/2006: wsfulton\n            Fix #1162194 - #include/%include within a structure\n\n10/06/2006: wsfulton\n            Fix #1450661, string truncation in String_seek truncating Java/C# enums.\n\n10/06/2006: mgossage\n            [Lua] Fix #1569587. The name is now correct.\n\n10/04/2006: wsfulton\n            Director fixes for virtual conversion operators\n\n10/04/2006: olly\n\t    [php] Fix #1569587 for PHP.  Don't use sizeof() except with string\n\t    literals.  Change some \"//\" comments to \"/* */\" for portability.\n\n10/04/2006: mgossage\n            [Lua] Partial Fix #1569587. The type is now correct, but the name is still not correct.\n\n10/03/2006: wsfulton\n            [Ruby] Fix #1527885 - Overloaded director virtual methods sometimes produced\n            uncompilable code when used with the director:except feature.\n\n10/03/2006: wsfulton\n            Directors: Directors are output in the order in which they are declared in \n            the C++ class rather than in some pseudo-random order.\n\n10/03/2006: mmatus\n            Fix #1486281 and #1471039.\n\n10/03/2006: olly\n\t    [Perl] Fix for handling strings with zero bytes from Stephen Hutsal.\n\n09/30/2006: efuzzyone\n            [CFFI] Bitfield support and vararg support due to Arthur Smyles.\n            C expression to Lisp conversion, thanks to Arthur Smyles for the initial\n            idea, it now supports conversion for a whole range of C expressions. \n\n09/28/2006: wsfulton\n            Fix #1508327 - Overloaded methods are hidden when using -fvirtual optimisation.\n            Overloaded methods are no longer candidates for elimination - this mimics\n            C++ behaviour where all overloaded methods must be defined and implemented\n            in a derived class in order for them to be available.\n\n09/25/2006: wsfulton\n            [Ruby, Python, Ocaml] Fix #1505591 Throwing exceptions in extended directors\n\n09/25/2006: wsfulton\n            Fix #1056100 - virtual operators. \n\n09/24/2006: olly\n\t    Don't accidentally create a \"<:\" token (which is the same as \"[\" in C++).\n\t    Fixes bug # 1521788.\n\n09/23/2006: olly\n\t    [Ruby] Support building with recent versions of the Ruby 1.9\n\t    development branch.  Fixes bug #1560092.\n\n09/23/2006: olly\n\t    Templates can now be instantiated using negative numbers and\n\t    constant expressions, e.g.:\n\n\t    template<int q> class x {};\n\t    %template(x_minus1) x<-1>;\n\t    %template(x_1plus2) x<1+2>;\n\n\t    Also, constant expressions can now include comparisons (>, <, >=,\n\t    <=, !=, ==), modulus (%), and ternary conditionals (a ? b : c).\n\n\t    Fixes bugs #646275, #925555, #956282, #994301.\n\n09/22/2006: wsfulton\n            Fix %ignore on director methods - Bugs #1546254, #1543533\n\n09/20/2006: wsfulton\n            Fix %ignore on director constructors\n\n09/20/2006: wsfulton\n            Fix seg faults and asserts when director methods are ignored (#1543533)\n\n09/20/2006: wsfulton\n            Fix out of source builds - bug #1544718\n\n09/20/2006: olly\n\t    Treat a nested class definition as a forward declaration rather\n\t    than ignoring it completely, so that we generate correct code for\n\t    passing opaque pointers to the nested class (fixes SF bug #909387).\n\n09/20/2006: olly\n            *** POTENTIAL INCOMPATIBILITY ***\n\t    [php] Overload resolution now works.  However to allow this, SWIG\n\t    generated wrappers no longer coerce PHP types (which reverts a change\n\t    made in 1.3.26).  So for example, if a method takes a string, you\n\t    can no longer pass a number without explicitly converting it to a\n\t    string in PHP using: (string)x\n\n09/18/2006: mgossage\n            [ALL] fix on swiginit.swg, has been reported to crash on several test cases\n\t    found and fixed problem in imports under python (mingw)\n\n09/16/2006: wsfulton\n            [Python] Patch from Michal Marek for Python 2.5 to fix 64 bit array indexes on\n            64 bit machines.\n\n09/13/2006: wsfulton\n            The explicitcall feature has been scrapped. This feature was introduced primarily\n            to solve recursive director method calls. Director upcall improvements made instead:\n\n            [Python, Ruby, Ocaml] The swig_up flag is no longer used. The required mutexes\n            wrapping this flag are also no longer needed. The recursive calls going from C++\n            to the target language and back again etc are now avoided by a subtlely different\n            approach. Instead of using the swig_up flag in each director method to indicate\n            whether the explicit C++ call to the appropriate base class method or a normal\n            polymorphic C++ call should be made, the new approach makes one of these calls\n            directly from the wrapper method.\n\n            [Java, C#] The recursive call problem when calling a C++ base class method from\n            Java/C# is now fixed. The implementation is slightly different to the other languages\n            as the detection as to whether the explicit call or a normal polymorphic call is made\n            in the Java/C# layer rather than in the C++ layer.\n\n09/11/2006: mgossage\n            [ALL] updated swiginit.swg to allow multiple interpreters to use multiple\n\t    swig modules at once. This has been tested in Lua (mingw & linux),\n\t    perl5 & python (linux) only.\n\n09/11/2006: mgossage\n            [lua] added support for passing function pointers as well as native lua object\n            into wrappered function.\n            Added example funcptr3 to demonstrate this feature\n\n09/05/2006: olly\n\t    [php] Rename ErrorCode and ErrorMsg #define-s to SWIG_ErrorCode\n\t    and SWIG_ErrorMsg to avoid clashes with code the user might be\n\t    wrapping (patch from Darren Warner in SF bug #1466086).  Any\n\t    user typemaps which use ErrorCode and/or ErrorMsg directly will\n\t    need adjusting - you can easily fix them to work with both old\n\t    and new SWIG by changing to use SWIG_ErrorMsg and adding:\n\n\t\t#ifndef SWIG_ErrorMsg\n\t\t#define SWIG_ErrorMsg() ErrorMsg()\n\t\t#endif\n\n08/29/2006: olly\n\t    [php] Move constant initialisation from RINIT to MINIT to fix a\n\t    warning when using Apache and mod_php.  We only need to create\n\t    PHP constants once when we're first initialised, not for every HTTP\n\t    request.\n\n08/21/2006: mgossage\n            [Lua]\n\t    Bugfix #1542466 added code to allow mapping Lua nil's <-> C/C++ NULL's\n\t    updated various typemaps to work correctly with the changes\n\t    added voidtest_runme.lua to show the features working\n\n08/19/2006: wuzzeb (John Lenz)\n\t    [Guile] Add feature:constasvar to export constants as variables instead of functions\n            that return the constant value.\n\n08/11/2006: wsfulton\n            [Java] DetachCurrentThread calls have been added so that natively created threads\n            no longer prevent the JVM from exiting. Bug reported by Thomas Dudziak and\n            Paul Noll.\n\n08/10/2006: wsfulton\n            [C#] Fix director protected methods so they work\n\n07/25/2006: mutandiz\n\t    [allegrocl]\n\t    more additions to std::string, some tweaks and small bug fixes\n\t    -nocwrap mode.\n\n07/21/2006: mgossage\n            [Lua]\n\t    Bugfix #1526022 pdated std::string to support strings with '\\0' inside them\n\t    updated typemaps.i to add support for pointer to pointers\n\n07/19/2006: mutandiz\n\t    [allegrocl]\n\t    - Add std_string.i support.\n\t    - Add newobject patch submitted by mkoeppe (thanks!)\n\t    - Fix type name mismatch issue for nested type definitions.\n\t      specifically typedefs in templated class defns.\n\n07/18/2006: mgossage\n\t    Bugfix #1522858\n\t    updated lua.cxx to support -external-runtime command\n\n07/14/2006: wuzzeb (John Lenz)\n\t    Increment the SWIG_RUNTIME_VERSION to 3, because of the\n\t    addition of the owndata member in swig_type_info.\n\t    Reported by: Prabhu Ramachandran\n\n07/05/2006: wsfulton\n            Search path fixes:\n            - Fix search path for library files to behave as documented in Library.html.\n            - Fix mingw/msys builds which did not find the SWIG library when installed.\n            - Windows builds also output the mingw/msys install location when running\n              swig -swiglib.\n            - The non-existent and undocumented config directory in the search path has\n              been removed.\n\n07/05/2006: wsfulton\n            Fix $symname special variable expansion.\n\n07/04/2006: wuzzeb (John Lenz)\n\t    [Chicken]\n\t    Add %feature(\"constasvar\"), which instead of exporting a constant as a\n\t    scheme function, exports the constant as a scheme variable.  Update the\n\t    documentation as well.\n\n07/04/2006: wsfulton\n            [See entry of 09/13/2006 - explicitcall feature and documentation to it removed]\n            New explicitcall feature which generates additional wrappers for virtual methods\n            that call the method explicitly, not relying on polymorphism to make the method\n            call. The feature is a feature flag and is enabled like any other feature flag.\n            It also recognises an attribute, \"suffix\" for mangling the feature name, see\n            SWIGPlus.html#SWIGPlus_explicitcall documentation for more details.\n\n            [Java, C#]\n            The explicitcall feature is also a workaround for solving the recursive calls\n            problem when a director method makes a call to a base class method. See\n            Java.html#java_directors_explicitcall for updated documentation.\n\n06/28/2006: joe (Joseph Wang)\n\t    [r] Initial support for R\n\n06/20/2006: wuzzeb (John Lenz)\n\t    [Chicken]\n            Minor fixes to get apply_strings.i testsuite to pass\n\t    Remove integers_runme.scm from the testsuite, because SWIG and Chicken does\n            handle overflows.\n\n06/19/2005: olly\n\t    [php] Add support for generating PHP5 class wrappers for C++\n\t    classes (use \"swig -php5\").\n\n06/17/2006: olly\n\t    [php] Added some missing keywords to the PHP4 keyword list, and\n\t    fixed __LINE__ and __FILE__ which were in the wrong category.\n\t    Also added all the keywords new in PHP5, and added comments\n\t    noting the PHP4 keywords which aren't keywords in PHP5.\n\n06/17/2006: olly\n\t    [php] Don't segfault if PHP Null is passed as this pointer (e.g.\n\t    Class_method(Null)) - give a PHP Error instead.\n\n06/15/2006: mutandiz\n\t    [allegrocl]\n\t    Add initial support for std::list container class.\n\t    Fix a few bugs in helper functions.\n\n05/13/2006: wsfulton\n            [Java] Replace JNIEXPORT with SWIGEXPORT, thereby enabling the possibility\n            of using gcc -fvisibility=hidden for potentially smaller faster loading wrappers.\n\n05/13/2006: wsfulton\n            Fix for Makefiles for autoconf-2.60 beta\n\n05/13/2006: wsfulton\n            Vladimir Menshakov patch for compiling wrappers with python-2.5 alpha.\n\n05/12/2006: wsfulton\n            Fix buffer overflow error when using large %feature(docstring) reported\n            by Joseph Winston.\n\n05/12/2006: wsfulton\n            [Perl] Operator overload fix from Daniel Moore.\n\n05/25/2006: mutandiz\n\t    [allegrocl]\n\t    Fix bug in generation of CLOS type declarations for unions\n\t    and equivalent types.\n\n05/24/2006: mutandiz\n\t    [allegrocl]\n\t    Don't require a full class definition to generate a CLOS wrapper.\n\n05/20/2006: olly\n\t    [php] GCC Visibility support now works with PHP.\n\n05/19/2006: olly\n\t    [php] Removed support for -dlname (use -module instead).  Fixed\n\t    naming of PHP extension module to be consistent with PHP\n\t    conventions (no \"php_\" prefix on Unix; on PHP >= 4.3.0, handle Unix\n\t    platforms which use something other than \".so\" as the extension.)\n\n05/13/2006: wsfulton\n            [C#] Director support added\n\n05/07/2006: olly\n\t    [php] Don't segfault if PHP Null is passed where a C++ reference\n\t    is wanted.\n\n05/05/2006: olly\n\t    [php] Fix wrappers generated for global 'char' variables to not\n\t    include a terminating zero byte in the PHP string.\n\n05/03/2006: wsfulton\n            Modify typemaps so that char * can be applied to unsigned char * or signed char *\n            types and visa versa.\n\n05/03/2006: efuzzyone\n\t    [cffi]Thanks to Luke J Crook for this idea.\n             - a struct/enum/union is replaced with :pointer only if\n               that slot is actually a pointer to that type. So,: \n                    struct a_struct { int x; } and\n                    struct b_struct { a_struct struct_1; }; \n               will be converted as:\n                   (cffi:defcstruct b_struct\n                           (struct_1 a_struct))\n             - Other minor fixes in lispifying names.\n\n05/02/2006: wsfulton\n            Fix possible redefinition of _CRT_SECURE_NO_DEPRECATE for VC++.\n\n04/14/2006: efuzzyone\n\t    [cffi]\n            Thanks to Thomas Weidner for the patch.\n            - when feature export is set (export 'foo) is \n              generated for every symbol\n            - when feature inline is set (declaim (inline foo)) is \n              generated before every function definition\n            - when feature intern_function is set \n              #.(value-of-intern-function \"name\" \"nodeType\" package)\n              is emitted instead of the plain symbol. A sample swig-lispify \n              is provided.\n            - every symbol is prefixed by it's package.\n\n04/13/2006: efuzzyone\n\t    [cffi]\n\t    Fixed the generation of wrappers for global variables. \n            Added the option [no]swig-lisp which turns on/off generation \n            of code for swig helper lisp macro, functions, etc.\n\nVersion 1.3.29 (March 21, 2006)\n===============================\n\n04/05/2006: mutandiz\n\t    [allegrocl]\n\t    Fix output typemap of char so it produces a character instead\n\t    of an integer. Also adds input/output typemaps for 'char *'.\n\n\t    add command-line argument -isolate to generate an interface\n\t    file that won't interfere with other SWIG generated files that\n\t    may be used in the same application.\n\n03/20/2005: mutandiz\n\t    [allegrocl]\n\t    More tweaks to INPUT/OUTPUT typemaps for bool.\n\n\t    Fix constantWrapper for char and string literals.\n\n\t    find-definition keybindings should work in ELI/SLIME.\n\t    Output (in-package <module-name>) to lisp wrapper\n\t    instead of (in-package #.*swig-module-name*).\n\n\t    slight rework of multiple return values.\n\n\t    doc updates.\n\n03/17/2005: mutandiz\n\t    [allegrocl]\n\t    mangle names of constants generated via constantWrapper.\n\t    \n\t    When using OUTPUT typemaps and the function has a non-void\n\t    return value, it should be first in the values-list, followed\n\t    by the OUTPUT mapped values.\n\n\t    Fix bug with boolean parameters, which needed to be\n\t    passed in as int values, rather than T or NIL.\n\n03/15/2006: mutandiz\n\t    [allegrocl]\n\t    Generate wrappers for constants when in C++ or -cwrap mode.\n\t    Make -cwrap the default, since it is most correct. Users\n\t    can use the -nocwrap option to avoid the creation of a .cxx\n\t    file when interfacing to C code.\n\n\t    When in -nocwrap mode, improve the handling of converting\n \t    infix literals to prefix notation for lisp. This is very\n\t    basic and not likely to be improved upon since this only\n\t    applies to the -nocwrap case. Literals we can't figure out\n\t    will result in a warning and be included in the generated\n\t    code.\n\n\t    validIdentifier now more closely approximates what may be\n\t    a legal common lisp symbol.\n\n\t    Fix typemap error in allegrocl.swg\n\t    \n03/12/2006: mutandiz\n\t    [allegrocl]\n\t    fix up INPUT/OUTPUT typemaps for bool.\n\t    Generate c++ style wrapper functions for struct/union members\n\t    when -cwrap option specified.\n\n03/10/2006: mutandiz\n\t    [allegrocl]\n\t    Fix bug in C wrapper generation introduced by last allegrocl\n\t    commit.\n\n03/10/2006: wsfulton\n            [Java]\n            Commit #1447337 - Delete LocalRefs at the end of director methods to fix potential leak\n\n03/10/2006: wsfulton\n            Fix #1444949 - configure does not honor --program-prefix.\n            Removed non-standard configure option --with-release-suffix. Fix the autoconf standard\n            options --program-prefix and --program-suffix which were being shown in the help,\n            but were being ignored. Use --program-suffix instead of --with-release-suffix now.\n\n03/10/2006: wsfulton\n            [Java]\n            Fix #1446319 with patch from andreasth - more than one wstring parameter in director methods\n\n03/07/2006: mkoeppe\n\t    [Guile] \n\t    Fix for module names containing a \"-\" in non-\"shadow\" mode.\n\t    Patch from Aaron VanDevender (#1441474).\n\n03/04/2006: mmatus\n\t    - Add -O to the main program, which now enables -fastdispatch\n\t    \n\t    [Python]\n\n\t    - Add the -fastinit option to enable faster __init__\n              methods. Setting 'this' as 'self.this.append(this)' in the python\n\t      code confuses PyLucene. Now the initialization is done in the\n\t      the C++ side, as reported by Andi and Robin.\n\n\t    - Add the -fastquery option to enable faster SWIG_TypeQuery via a\n              python dict cache, as proposed by Andi Vajda\n\n\t    - Avoid to call PyObject_GetAttr inside SWIG_Python_GetSwigThis,\n\t      since this confuses PyLucene, as reported by Andi Vajda.\n\t    \n03/02/2006: wsfulton\n            [Java]\n            Removed extra (void *) cast when casting pointers to and from jlong as this\n            was suppressing gcc's \"dereferencing type-punned pointer will break strict-aliasing rules\"\n            warning. This warning could be ignored in versions of gcc prior to 4.0, but now the\n            warning is useful as gcc -O2 and higher optimisation levels includes -fstrict-aliasing which\n            generates code that doesn't work with these casts. The assignment is simply never made.\n            Please use -fno-strict-aliasing to both suppress the warning and fix the bad assembly\n            code generated. Note that the warning is only generated by the C compiler, but not\n            the C++ compiler, yet the C++ compiler will also generate broken code. Alternatively use \n            -Wno-strict-aliasing to suppress the warning for gcc-3.x. The typemaps affected\n            are the \"in\" and \"out\" typemaps in java.swg and arrays_java.swg. Users ought to fix\n            their own typemaps to do the same. Note that removal of the void * cast simply prevents\n            suppression of the warning for the C compiler and nothing else. Typical change:\n\n            From:\n              %typemap(in) SWIGTYPE * %{ $1 = *($&1_ltype)(void *)&$input; %}\n            To:\n              %typemap(in) SWIGTYPE * %{ $1 = *($&1_ltype)&$input; %}\n\n            From:\n              %typemap(out) SWIGTYPE * %{ *($&1_ltype)(void *)&$result = $1; %} \n            To:\n              %typemap(out) SWIGTYPE * %{ *($&1_ltype)&$result = $1; %} \n\n03/02/2006: mkoeppe\n\t    [Guile -scm]\n\t    Add typemaps for \"long long\"; whether the generated code compiles, however, depends\n\t    on the version and configuration of Guile.\n\n03/02/2006: wsfulton\n            [C#]\n            Add support for inner exceptions. If any of the delegates are called which construct\n            a pending exception and there is already a pending exception, it will create the new\n            exception with the pending exception as an inner exception.\n\n03/02/2006: wsfulton\n            [Php]\n            Added support for Php5 exceptions if compiling against Php5 (patch from Olly Betts).\n\n03/01/2006: mmatus\n\t    Use the GCC visibility attribute in SWIGEXPORT.\n\n\t    Now you can compile (with gcc 3.4 or later) using\n\t    CFLAGS=\"-fvisibility=hidden\".\n\t    \n\t    Check the difference for the 'std_containers.i' python \n\t    test case:\n \n            Sizes:\n\n\t      3305432 _std_containers.so\n\t      2383992 _std_containers.so.hidden\n\n\t    Exported symbols (nm -D <file>.so | wc -l):\n\n              6146 _std_containers.so \n              174  _std_containers.so.hidden \n\n\t    Execution times:\n\n\t      real 0m0.050s user 0m0.039s sys 0m0.005s   _std_containers.so\n              real 0m0.039s user 0m0.026s sys 0m0.007s   _std_containers.so.hidden\n\n\t    Read http://gcc.gnu.org/wiki/Visibility for more details.\n\n\n02/27/2006: mutandiz\n\t    [allegrocl]\n\t    Add support for INPUT, OUTPUT, and INOUT typemaps.\n\t    For OUTPUT variables, the lisp wrapper returns multiple\n\t    values.\n\n02/26/2006: mmatus\n\n\t    [Ruby] add argcargv.i library file.\n\t    \n\t    Use it as follow:\n\n\t\t%include argcargv.i\n\t      \t\t\t\t\t\t\t\t\t \n   \t        %apply (int ARGC, char **ARGV) { (size_t argc, const char **argv) } \n\t      \t\t\t\t\t\t\t\t\t \n   \t        %inline {\t\t\t\t\n   \t          int mainApp(size_t argc, const char **argv) \t\n   \t          {\t\t\t\t\t\t\n   \t            return argc;\t\t\t\t\t\n   \t          }\n                }\t\t\t\t\t\t\t\n\t      \t\t\t\t\t\t\t\n   \t    then in the ruby side:\t\t\t\t\t\n\t      \t\t\t\t\t\t\t\t\n   \t        args = [\"asdf\", \"asdf2\"]\t\t\t\t\n   \t        n = mainApp(args);\n\t\n\n\t    This is the similar to the python version Lib/python/argcargv.i\n\n02/24/2006: mgossage\n\n\t    Small update Lua documents on troubleshooting problems\n\t    \n02/22/2006: mmatus \n\n\t    Fix all the errors reported for 1.3.28.\n\t    - fix bug #1158178\n\t    - fix bug #1060789\n\t    - fix bug #1263457\n\t    - fix 'const  char*&' typemap in the UTL, reported by Geof"
        },
        {
          "name": "CHANGES.current",
          "type": "blob",
          "size": 3.1728515625,
          "content": "Below are the changes for the current release.\nSee the CHANGES file for changes in older releases.\nSee the RELEASENOTES file for a summary of changes in each release.\nIssue # numbers mentioned below can be found on Github. For more details, add\nthe issue number to the end of the URL: https://github.com/swig/swig/issues/\n\nVersion 4.4.0 (in progress)\n===========================\n\n2024-12-07: arbrauns\n\t    [Lua] #3083 Fix \"unsigned long long\" being interpreted as \"signed\n\t    long long\".\n\n2024-11-22: wsfulton\n            Use new <errno.h> fragment for including this header when needed instead\n            of either always including it or relying on it being included elsewhere.\n            Fixes the removal of errno.h when defining PY_LIMITED_API for python-3.11\n            and later.\n\n2024-11-21: olly\n\t    [Java] #3070 Fix regression wrapping enum values which don't fit\n\t    in a Java signed int.\n\n2024-11-09: wsfulton\n            #3064 Perform repeated typedef lookups instead of a single typedef\n            lookup on the type being applied in %apply when looking for a family\n            of typemaps to apply.\n\n2024-11-01: wsfulton\n            Fix internal error handling parameters that are typedefs to references\n            when using the compactdefaultargs feature.\n\n2024-10-30: wsfulton\n            #1851 Fix handling of parameters with default arguments that are\n            initializer lists when using -keyword or the compactdefaultargs option.\n\n2024-10-27: olly\n\t    #3058 Fix precedence of casts, which should have the same high\n\t    precedence as unary plus and minus, but actually had a lower\n\t    precedence than anything else.  This could lead to the wrong type\n\t    being deduced in obscure cases, but also prevented SWIG deducing a\n\t    type for expressions such as (0)*1+2 which SWIG parses as a cast\n\t    and then fixes up afterwards.  A bug fixed in 4.3.0 made this\n\t    latter problem manifest more often (previously type deduction\n\t    happened to work for (0)*1+2 due to an internal field not getting\n\t    cleared properly).\n\n2024-10-25: olly\n\t    [Guile] Allow wrapping anything with a `varout` typemap as a\n\t    constant.\n\n2024-10-24: olly\n\t    [Perl] https://sourceforge.net/p/swig/bugs/1134/ Ensure C++\n\t    local variables get destroyed before throwing a Perl exception.\n\n2024-10-22: olly\n\t    #3034 SWIG's testsuite is now free of SWIG warnings for all target\n\t    languages except mzscheme and the SWIG -Werror option is now\n\t    enabled automatically to ensure this doesn't regress.\n\n2024-10-22: olly\n\t    #2998 Drop support for specifying SWIG's internal type string\n\t    representation in interface files.  This \"secret developer feature\"\n\t    was only documented in developer documentation, and had no test\n\t    coverage.\n\n\t    It allowed specifying an SWIG internal syntax type string, e.g.:\n\n\t      `p.a(10).p.f(int, p.f(int).int)` foo(int, int (*x)(int));\n\n\t    In the unlikely event that anyone was using this, we recommend you\n\t    use the standard C/C++ type syntax instead, which will work with\n\t    previous SWIG releases too, e.g.:\n\n\t      (*(*foo(int, int (*)(int)))[10])(int, int (*)(int));\n\n\t    The C/C++ syntax has the major advantage of being the same syntax\n\t    that C/C++ compilers use.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 5.2451171875,
          "content": "cmake_minimum_required (VERSION 3.13)\n\nset (CMAKE_BUILD_TYPE Release CACHE STRING \"Build type\")\n\nproject (swig)\n\nif (POLICY CMP0074)\n  cmake_policy (SET CMP0074 NEW)\nendif()\n\nfile (STRINGS configure.ac line LIMIT_COUNT 1 REGEX \"AC_INIT\\\\(.*\\\\)\" )\nif (line MATCHES \"AC_INIT\\\\(\\\\[(.*)\\\\],[ \\t]*\\\\[(.*)\\\\],[ \\t]*\\\\[(.*)\\\\]\\\\)\" )\n  set (SWIG_VERSION ${CMAKE_MATCH_2})\n  set (PACKAGE_BUGREPORT ${CMAKE_MATCH_3})\nelse ()\n  message (SEND_ERROR \"Could not parse version from configure.ac\")\nendif ()\n\nset (SWIG_ROOT ${PROJECT_SOURCE_DIR})\n\nif (WIN32)\n  set (SWIG_LIB bin/Lib)\nelse ()\n  set (SWIG_LIB share/swig/${SWIG_VERSION})\nendif ()\n# Project wide configuration variables\n# ------------------------------------\n\nset (SWIG_SOURCE_DIR ${SWIG_ROOT}/Source CACHE INTERNAL \"Path of swig sources\" FORCE)\n\nset (PACKAGE_NAME swig)\nset (PACKAGE_VERSION ${SWIG_VERSION})\n\n# Configure\n# ---------\n\nlist (APPEND CMAKE_MODULE_PATH ${SWIG_ROOT}/Tools/cmake)\n\ninclude (CheckIncludeFiles)\ninclude (CheckIncludeFile)\ninclude (CheckIncludeFileCXX)\ninclude (CheckTypeSize)\ninclude (CheckSymbolExists)\ninclude (CheckFunctionExists)\ninclude (CheckLibraryExists)\ninclude (CheckCSourceCompiles)\n\n# HACK: didn't get the bool check working for Visual Studio 2008\nif (MSVC)\n  set(HAVE_BOOL 1)\nelse()\n  set (CMAKE_EXTRA_INCLUDE_FILES stdbool.h)\n  check_type_size (\"bool\" HAVE_BOOL)\n  set (CMAKE_EXTRA_INCLUDE_FILES)\nendif()\n\ncheck_include_file (\"inttypes.h\" HAVE_INTTYPES_H)\ncheck_include_file (\"stddef.h\" HAVE_STDDEF_H)\ncheck_include_file (\"stdint.h\" HAVE_STDINT_H)\ncheck_include_file (\"stdio.h\" HAVE_STDIO_H)\ncheck_include_file (\"stdlib.h\" HAVE_STDLIB_H)\ncheck_include_file (\"string.h\" HAVE_STRING_H)\ncheck_include_file (\"strings.h\" HAVE_STRINGS_H)\ncheck_include_file (\"sys/stat.h\" HAVE_SYS_STAT_H)\ncheck_include_file (\"sys/types.h\" HAVE_SYS_TYPES_H)\ncheck_include_file (\"unistd.h\" HAVE_UNISTD_H)\ncheck_include_files (\"stdlib.h;stdarg.h;string.h;float.h\" STDC_HEADERS)\n\ncheck_include_file_cxx (\"boost/shared_ptr.hpp\" HAVE_BOOST)\ncheck_library_exists (dl dlopen \"\" HAVE_LIBDL)\ncheck_function_exists (popen HAVE_POPEN)\n\nif (MSVC)\n  set (CMAKE_CXX_FLAGS \"/EHsc ${CMAKE_CXX_FLAGS}\")\nendif ()\n\noption (WITH_PCRE \"Enable PCRE\" ON)\nif (WITH_PCRE)\n  find_package (PCRE2 REQUIRED)\n  set (HAVE_PCRE 1)\n  include_directories (${PCRE2_INCLUDE_DIRS})\nendif()\n\n#if (WIN32)\n#  file (TO_NATIVE_PATH ${CMAKE_INSTALL_PREFIX}/${SWIG_LIB} SWIG_LIB_WIN_UNIX)\n#  string (REGEX REPLACE \"\\\\\\\\\" \"\\\\\\\\\\\\\\\\\" SWIG_LIB_WIN_UNIX \"${SWIG_LIB_WIN_UNIX}\")\n#endif ()\nconfigure_file (${SWIG_ROOT}/Tools/cmake/swigconfig.h.in\n                ${CMAKE_CURRENT_BINARY_DIR}/Source/Include/swigconfig.h)\n\nfind_package (BISON 3.5 REQUIRED)\n\n\n# Compiler flags\n# --------------\n\ninclude_directories (\n    ${SWIG_SOURCE_DIR}/CParse\n    ${SWIG_SOURCE_DIR}/Include\n    ${SWIG_SOURCE_DIR}/DOH\n    ${SWIG_SOURCE_DIR}/Swig\n    ${SWIG_SOURCE_DIR}/Preprocessor\n    ${SWIG_SOURCE_DIR}/Modules\n    ${PROJECT_BINARY_DIR}/Source/Include\n    ${PROJECT_BINARY_DIR}/Source/CParse\n    ${PROJECT_SOURCE_DIR}/Source/Doxygen\n)\n\n# generate the parser source code (depends on bison)\nfile (MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/Source/CParse)\n\nBISON_TARGET (swig_parser\n    ${SWIG_SOURCE_DIR}/CParse/parser.y\n    ${PROJECT_BINARY_DIR}/Source/CParse/parser.c\n)\n\n# generate swigwarn.swg\nfile (READ ${SWIG_SOURCE_DIR}/Include/swigwarn.h SWIG_WARN_H)\nstring (REGEX REPLACE \"#define WARN([^ \\\\t]*)[ \\\\t]*([0-9]+)\" \"%define SWIGWARN\\\\1 \\\\2 %enddef\" SWIG_WARN_SWG ${SWIG_WARN_H})\nfile (WRITE ${CMAKE_CURRENT_BINARY_DIR}/swigwarn.swg ${SWIG_WARN_SWG})\nset_property (SOURCE ${CMAKE_CURRENT_BINARY_DIR}/swigwarn.swg PROPERTY GENERATED 1)\n\n# install lib\ninstall (DIRECTORY ${SWIG_ROOT}/Lib/ DESTINATION ${SWIG_LIB})\ninstall (FILES ${CMAKE_CURRENT_BINARY_DIR}/swigwarn.swg DESTINATION ${SWIG_LIB})\n\n# sources\n# ---------\nfile (GLOB DOH_SOURCES ${SWIG_SOURCE_DIR}/DOH/*.c)\nfile (GLOB CPARSE_SOURCES ${SWIG_SOURCE_DIR}/CParse/*.c)\nlist (REMOVE_ITEM CPARSE_SOURCES ${SWIG_SOURCE_DIR}/CParse/parser.c)\nlist (APPEND CPARSE_SOURCES)\nfile (GLOB PREPROCESSOR_SOURCES ${SWIG_SOURCE_DIR}/Preprocessor/*.c)\nfile (GLOB CORE_SOURCES ${SWIG_SOURCE_DIR}/Swig/*.c)\nfile (GLOB DOXYGEN_SOURCES ${SWIG_SOURCE_DIR}/Doxygen/*.cxx)\nfile (GLOB MODULES_SOURCES ${SWIG_SOURCE_DIR}/Modules/*.cxx)\n\nadd_executable (swig\n  ${CPARSE_SOURCES}\n  ${DOH_SOURCES}\n  ${DOXYGEN_SOURCES}\n  ${MODULES_SOURCES}\n  ${CORE_SOURCES}\n  ${PREPROCESSOR_SOURCES}\n  ${PROJECT_BINARY_DIR}/Source/Include/swigconfig.h\n  ${SWIG_SOURCE_DIR}/Include/swigwarn.h\n  ${PROJECT_BINARY_DIR}/Source/CParse/parser.c\n  ${PROJECT_BINARY_DIR}/Source/CParse/parser.h\n)\nif (PCRE2_FOUND)\n  target_link_libraries (swig ${PCRE2_LIBRARIES})\nendif ()\ninstall (TARGETS swig DESTINATION bin)\n\n# 'make package-source' creates tarballs\nset (CPACK_PACKAGE_NAME ${PACKAGE_NAME})\nset (CPACK_SOURCE_GENERATOR \"TGZ;TBZ2\")\nset (CPACK_SOURCE_IGNORE_FILES \"/.git;/build;.*~;${CPACK_SOURCE_IGNORE_FILES}\")\nset (CPACK_SOURCE_PACKAGE_FILE_NAME ${PACKAGE_NAME}-${PACKAGE_VERSION})\ninclude (CPack)\n\n# few tests\nenable_testing ()\nadd_test (NAME cmd_version COMMAND swig -version)\nadd_test (NAME cmd_pcreversion COMMAND swig -pcreversion)\nadd_test (NAME cmd_swiglib COMMAND swig -swiglib)\nadd_test (NAME cmd_external_runtime COMMAND swig -external-runtime ext_rt.h)\nset_tests_properties(cmd_external_runtime PROPERTIES ENVIRONMENT \"SWIG_LIB=${PROJECT_SOURCE_DIR}/Lib\")\n\n"
        },
        {
          "name": "COPYRIGHT",
          "type": "blob",
          "size": 6.6376953125,
          "content": "SWIG Copyright and Authors\n--------------------------\n\nCopyright (c) 1995-2023 The SWIG Developers\nCopyright (c) 2005-2006 Arizona Board of Regents (University of Arizona).\nCopyright (c) 1998-2005 University of Chicago.\nCopyright (c) 1995-1998 The University of Utah and the Regents of the University of California\n\nPortions also copyrighted by:\n Network Applied Communication Laboratory, Inc\n Information-technology Promotion Agency, Japan\n\nActive SWIG Developers:\n William Fulton (wsf@fultondesigns.co.uk)                 (SWIG core, Java, C#, Windows, Cygwin)\n Olly Betts (olly@survex.com)                             (PHP)\n Joseph Wang (joequant@gmail.com)                         (R)\n Momtchil Momtchev (momtchil@momtchev.com)                (Javascript Node-API)\n Simon Marchetto (simon.marchetto@scilab-enterprises.com) (Scilab)\n Zackery Spytz (zspytz@gmail.com)                         (OCaml, SWIG core)\n\nPast SWIG developers and major contributors include:\n Dave Beazley (dave-swig@dabeaz.com)                      (SWIG core, Python, Tcl, Perl)\n Henning Thielemann (swig@henning-thielemann.de)          (Modula3)\n Matthias Köppe (mkoeppe@mail.math.uni-magdeburg.de)      (Guile, MzScheme)\n Luigi Ballabio (luigi.ballabio@fastwebnet.it)            (STL wrapping)\n Mikel Bancroft (mikel@franz.com)                         (Allegro CL)\n Surendra Singhi (efuzzyone@netscape.net)                 (CLISP, CFFI)\n Marcelo Matus (mmatus@acms.arizona.edu)                  (SWIG core, Python, UTL[python,perl,tcl,ruby])\n Art Yerkes (ayerkes@speakeasy.net)                       (OCaml)\n Lyle Johnson (lyle@users.sourceforge.net)                (Ruby)\n Charlie Savage (cfis@interserv.com)                      (Ruby)\n Thien-Thi Nguyen (ttn@glug.org)                          (build/test/misc)\n Richard Palmer (richard@magicality.org)                  (PHP)\n Sam Liddicott - Ananova Ltd (saml@liddicott.com)         (PHP)\n Tim Hockin - Sun Microsystems (thockin@sun.com)          (PHP)\n Kevin Ruland                                             (PHP)\n Shibukawa Yoshiki                                        (Japanese Translation)\n Jason Stewart (jason@openinformatics.com)                (Perl5)\n Loic Dachary                                             (Perl5)\n David Fletcher                                           (Perl5)\n Gary Holt                                                (Perl5)\n Masaki Fukushima                                         (Ruby)\n Scott Michel (scottm@cs.ucla.edu)                        (Java directors)\n Tiger Feng (songyanf@cs.uchicago.edu)                    (SWIG core)\n Mark Rose (mrose@stm.lbl.gov)                            (Directors)\n Jonah Beckford (beckford@usermail.com)                   (CHICKEN)\n Ahmon Dancy (dancy@franz.com)                            (Allegro CL)\n Dirk Gerrits                                             (Allegro CL)\n Neil Cawse                                               (C#)\n Harco de Hilster                                         (Java)\n Alexey Dyachenko (dyachenko@fromru.com)                  (Tcl)\n Bob Techentin                                            (Tcl)\n Martin Froehlich <MartinFroehlich@ACM.org>               (Guile)\n Marcio Luis Teixeira <marciot@holly.colostate.edu>       (Guile)\n Duncan Temple Lang                                       (R)\n Miklos Vajna <vmiklos@frugalware.org>                    (PHP directors)\n Mark Gossage (mark@gossage.cjb.net)                      (Lua)\n Raman Gopalan (ramangopalan@gmail.com)                   (eLua)\n Gonzalo Garramuno (ggarra@advancedsl.com.ar)             (Ruby, Ruby's UTL)\n John Lenz                                                (Guile, MzScheme updates, Chicken module, runtime system)\n Baozeng Ding  <sploving1@163.com>                        (Scilab)\n Ian Lance Taylor                                         (Go)\n Dmitry Kabak (userdima@gmail.com)                        (Doxygen)\n Vadim Zeitlin                                            (PCRE, Python, Doxygen)\n Stefan Zager (szager@gmail.com)                          (Python)\n Vincent Couvert                                          (Scilab)\n Sylvestre Ledru                                          (Scilab)\n Wolfgang Frisch                                          (Scilab)\n Oliver Buchtala (oliver.buchtala@gmail.com)              (Javascript)\n Neha Narang (narangneha03@gmail.com)                     (Javascript)\n Xavier Delacour (xavier.delacour@gmail.com)              (Octave)\n David Nadlinger (code@klickverbot.at)                    (D)\n Leif Middelschulte (leif.middelschulte@gmail.com)        (C)\n\nPast contributors include:\n James Michael DuPont, Clark McGrew, Dustin Mitchell, Ian Cooke, Catalin Dumitrescu, Baran\n Kovuk, Oleg Tolmatcev, Tal Shalif, Lluis Padro, Chris Seatory, Igor Bely, Robin Dunn,\n Edward Zimmermann, David Ascher, Dominique Dumont, Pier Giorgio Esposito, Hasan Baran Kovuk,\n Klaus Wiederänders, Richard Beare, Hans Oesterholt.\n (See CHANGES and CHANGES.current and the bug tracker for a more complete list).\n\nPast students:\n Songyan Feng (Chicago).\n Xinghua Shi (Chicago).\n Jing Cao (Chicago).\n Aquinas Hobor (Chicago).\n\nHistorically, the following people contributed to early versions of SWIG.\nPeter Lomdahl, Brad Holian, Shujia Zhou, Niels Jensen, and Tim Germann\nat Los Alamos National Laboratory were the first users. Patrick\nTullmann at the University of Utah suggested the idea of automatic\ndocumentation generation. John Schmidt and Kurtis Bleeker at the\nUniversity of Utah tested out the early versions.  Chris Johnson\nsupported SWIG's developed at the University of Utah. John Buckman,\nLarry Virden, and Tom Schwaller provided valuable input on the first\nreleases and improving the portability of SWIG. David Fletcher and\nGary Holt have provided a great deal of input on improving SWIG's\nPerl5 implementation. Kevin Butler contributed the first Windows NT\nport.\n\nEarly bug reports and patches:\nAdam Hupp, Arthur Smyles, Brad Clements, Brett Williams, Buck Hodges,\nBurkhard Kloss, Chia-Liang Kao, Craig Files, Dennis Marsa, Dieter Baron,\nDrake Diedrich, Fleur Diana Dragan, Gary Pennington, Geoffrey Hort, Gerald Williams,\nGreg Anderson, Greg Kochanski, Greg Troxel, Henry Rowley, Irina Kotlova,\nIsrael Taller, James Bailey, Jim Fulton, Joel Reed, Jon Travis,\nJunio Hamano, Justin Heyes-Jones, Karl Forner, Keith Davidson,\nKrzysztof Kozminski, Larry Virden, Luke J Crook, Magnus Ljung, Marc Zonzon,\nMark Howson, Micahel Scharf, Michel Sanner, Mike Romberg, Mike Simons,\nMike Weiblen, Paul Brannan, Ram Bhamidipaty, Reinhard Fobbe, Rich Wales,\nRichard Salz, Roy Lecates, Rudy Albachten, Scott Drummonds\nScott Michel, Shaun Lowry, Steve Galser, Tarn Weisner Burton,\nThomas Weidner, Tony Seward, Uwe Steinmann, Vadim Chugunov, Wyss Clemens,\nZhong Ren.\n\n"
        },
        {
          "name": "Doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "Examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 9.0048828125,
          "content": "Basic Installation\n==================\n\n   These are generic installation instructions.\n\n   The `configure' shell script attempts to guess correct values for\nvarious system-dependent variables used during compilation.  It uses\nthose values to create a `Makefile' in each directory of the package.\nIt may also create one or more `.h' files containing system-dependent\ndefinitions.  Finally, it creates a shell script `config.status' that\nyou can run in the future to recreate the current configuration, and a\nfile `config.log' containing compiler output (useful mainly for\ndebugging `configure').\n\n   It can also use an optional file (typically called `config.cache'\nand enabled with `--cache-file=config.cache' or simply `-C') that saves\nthe results of its tests to speed up reconfiguring.  (Caching is\ndisabled by default to prevent problems with accidental use of stale\ncache files.)\n\n   If you need to do unusual things to compile the package, please try\nto figure out how `configure' could check whether to do them, and mail\ndiffs or instructions to the address given in the `README' so they can\nbe considered for the next release.  If you are using the cache, and at\nsome point `config.cache' contains results you don't want to keep, you\nmay remove or edit it.\n\n   The file `configure.ac' (or `configure.in') is used to create\n`configure' by a program called `autoconf'.  You only need\n`configure.ac' if you want to change it or regenerate `configure' using\na newer version of `autoconf'.\n\nThe simplest way to compile this package is:\n\n  1. `cd' to the directory containing the package's source code and type\n     `./configure' to configure the package for your system.  If you're\n     using `csh' on an old version of System V, you might need to type\n     `sh ./configure' instead to prevent `csh' from trying to execute\n     `configure' itself.\n\n     Running `configure' takes awhile.  While running, it prints some\n     messages telling which features it is checking for.\n\n  2. Type `make' to compile the package.\n\n  3. Optionally, type `make check' to run any self-tests that come with\n     the package.\n\n  4. Type `make install' to install the programs and any data files and\n     documentation.\n\n  5. You can remove the program binaries and object files from the\n     source code directory by typing `make clean'.  To also remove the\n     files that `configure' created (so you can compile the package for\n     a different kind of computer), type `make distclean'.  There is\n     also a `make maintainer-clean' target, but that is intended mainly\n     for the package's developers.  If you use it, you may have to get\n     all sorts of other programs in order to regenerate files that came\n     with the distribution.\n\nCompilers and Options\n=====================\n\n   Some systems require unusual options for compilation or linking that\nthe `configure' script does not know about.  Run `./configure --help'\nfor details on some of the pertinent environment variables.\n\n   You can give `configure' initial values for variables by setting\nthem in the environment.  You can do that on the command line like this:\n\n     ./configure CC=c89 CFLAGS=-O2 LIBS=-lposix\n\n   *Note Environment Variables::, for more details.\n\nCompiling For Multiple Architectures\n====================================\n\n   You can compile the package for more than one kind of computer at the\nsame time, by placing the object files for each architecture in their\nown directory.  To do this, you must use a version of `make' that\nsupports the `VPATH' variable, such as GNU `make'.  `cd' to the\ndirectory where you want the object files and executables to go and run\nthe `configure' script.  `configure' automatically checks for the\nsource code in the directory that `configure' is in and in `..'.\n\n   If you have to use a `make' that does not support the `VPATH'\nvariable, you have to compile the package for one architecture at a time\nin the source code directory.  After you have installed the package for\none architecture, use `make distclean' before reconfiguring for another\narchitecture.\n\nInstallation Names\n==================\n\n   By default, `make install' will install the package's files in\n`/usr/local/bin', `/usr/local/man', etc.  You can specify an\ninstallation prefix other than `/usr/local' by giving `configure' the\noption `--prefix=PATH'.\n\n   You can specify separate installation prefixes for\narchitecture-specific files and architecture-independent files.  If you\ngive `configure' the option `--exec-prefix=PATH', the package will use\nPATH as the prefix for installing programs and libraries.\nDocumentation and other data files will still use the regular prefix.\n\n   In addition, if you use an unusual directory layout you can give\noptions like `--bindir=PATH' to specify different values for particular\nkinds of files.  Run `configure --help' for a list of the directories\nyou can set and what kinds of files go in them.\n\n   If the package supports it, you can cause programs to be installed\nwith an extra prefix or suffix on their names by giving `configure' the\noption `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.\n\nOptional Features\n=================\n\n   Some packages pay attention to `--enable-FEATURE' options to\n`configure', where FEATURE indicates an optional part of the package.\nThey may also pay attention to `--with-PACKAGE' options, where PACKAGE\nis something like `gnu-as' or `x' (for the X Window System).  The\n`README' should mention any `--enable-' and `--with-' options that the\npackage recognizes.\n\n   For packages that use the X Window System, `configure' can usually\nfind the X include and library files automatically, but if it doesn't,\nyou can use the `configure' options `--x-includes=DIR' and\n`--x-libraries=DIR' to specify their locations.\n\nSpecifying the System Type\n==========================\n\n   There may be some features `configure' cannot figure out\nautomatically, but needs to determine by the type of host the package\nwill run on.  Usually `configure' can figure that out, but if it prints\na message saying it cannot guess the host type, give it the\n`--build=TYPE' option.  TYPE can either be a short name for the system\ntype, such as `sun4', or a canonical name which has the form:\n\n     CPU-COMPANY-SYSTEM\n\nwhere SYSTEM can have one of these forms:\n\n     OS\n     KERNEL-OS\n\n   See the file `config.sub' for the possible values of each field.  If\n`config.sub' isn't included in this package, then this package doesn't\nneed to know the host type.\n\n   If you are _building_ compiler tools for cross-compiling, you should\nuse the `--target=TYPE' option to select the type of system they will\nproduce code for.\n\n   If you want to _use_ a cross compiler, that generates code for a\nplatform different from the build platform, you should specify the host\nplatform (i.e., that on which the generated programs will eventually be\nrun) with `--host=TYPE'.  In this case, you should also specify the\nbuild platform with `--build=TYPE', because, in this case, it may not\nbe possible to guess the build platform (it sometimes involves\ncompiling and running simple test programs, and this can't be done if\nthe compiler is a cross compiler).\n\nSharing Defaults\n================\n\n   If you want to set default values for `configure' scripts to share,\nyou can create a site shell script called `config.site' that gives\ndefault values for variables like `CC', `cache_file', and `prefix'.\n`configure' looks for `PREFIX/share/config.site' if it exists, then\n`PREFIX/etc/config.site' if it exists.  Or, you can set the\n`CONFIG_SITE' environment variable to the location of the site script.\nA warning: not all `configure' scripts look for a site script.\n\nEnvironment Variables\n=====================\n\n   Variables not defined in a site shell script can be set in the\nenvironment passed to configure.  However, some packages may run\nconfigure again during the build, and the customized values of these\nvariables may be lost.  In order to avoid this problem, you should set\nthem in the `configure' command line, using `VAR=value'.  For example:\n\n     ./configure CC=/usr/local2/bin/gcc\n\nwill cause the specified gcc to be used as the C compiler (unless it is\noverridden in the site shell script).\n\n`configure' Invocation\n======================\n\n   `configure' recognizes the following options to control how it\noperates.\n\n`--help'\n`-h'\n     Print a summary of the options to `configure', and exit.\n\n`--version'\n`-V'\n     Print the version of Autoconf used to generate the `configure'\n     script, and exit.\n\n`--cache-file=FILE'\n     Enable the cache: use and save the results of the tests in FILE,\n     traditionally `config.cache'.  FILE defaults to `/dev/null' to\n     disable caching.\n\n`--config-cache'\n`-C'\n     Alias for `--cache-file=config.cache'.\n\n`--quiet'\n`--silent'\n`-q'\n     Do not print messages saying which checks are being made.  To\n     suppress all normal output, redirect it to `/dev/null' (any error\n     messages will still be shown).\n\n`--srcdir=DIR'\n     Look for the package's source code in directory DIR.  Usually\n     `configure' can determine that directory automatically.\n\n`configure' also accepts some other, not widely useful, options.  Run\n`configure --help' for more details.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "SWIG is free software: you can redistribute it and/or modify it\nunder the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version. See the LICENSE-GPL file for\nthe full terms of the GNU General Public license version 3.\n\nPortions of SWIG are also licensed under the terms of the licenses\nin the file LICENSE-UNIVERSITIES. You must observe the terms of\nthese licenses, as well as the terms of the GNU General Public License,\nwhen you distribute SWIG.\n\nThe SWIG library and examples, under the Lib and Examples top level \ndirectories, are distributed under the following terms:\n\n  You may copy, modify, distribute, and make derivative works based on\n  this software, in source code or object code form, without\n  restriction. If you distribute the software to others, you may do\n  so according to the terms of your choice. This software is offered as\n  is, without warranty of any kind.\n\nSee the COPYRIGHT file for a list of contributors to SWIG and their\ncopyright notices.\n"
        },
        {
          "name": "LICENSE-GPL",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "LICENSE-UNIVERSITIES",
          "type": "blob",
          "size": 4.546875,
          "content": "SWIG is distributed under the following terms:\n\nI.  \n\nCopyright (c) 1995-1998\nThe University of Utah and the Regents of the University of California\nAll Rights Reserved\n\nPermission is hereby granted, without written agreement and without\nlicense or royalty fees, to use, copy, modify, and distribute this\nsoftware and its documentation for any purpose, provided that \n(1) The above copyright notice and the following two paragraphs\nappear in all copies of the source code and (2) redistributions\nincluding binaries reproduces these notices in the supporting\ndocumentation.   Substantial modifications to this software may be\ncopyrighted by their authors and need not follow the licensing terms\ndescribed here, provided that the new terms are clearly indicated in\nall files where they apply.\n\nIN NO EVENT SHALL THE AUTHOR, THE UNIVERSITY OF CALIFORNIA, THE \nUNIVERSITY OF UTAH OR DISTRIBUTORS OF THIS SOFTWARE BE LIABLE TO ANY\nPARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL\nDAMAGES ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION,\nEVEN IF THE AUTHORS OR ANY OF THE ABOVE PARTIES HAVE BEEN ADVISED OF\nTHE POSSIBILITY OF SUCH DAMAGE.\n\nTHE AUTHOR, THE UNIVERSITY OF CALIFORNIA, AND THE UNIVERSITY OF UTAH\nSPECIFICALLY DISCLAIM ANY WARRANTIES,INCLUDING, BUT NOT LIMITED TO, \nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE. THE SOFTWARE PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND \nTHE AUTHORS AND DISTRIBUTORS HAVE NO OBLIGATION TO PROVIDE MAINTENANCE,\nSUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n\n\nII. \n\nThis software includes contributions that are Copyright (c) 1998-2005\nUniversity of Chicago.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\nRedistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.  Redistributions\nin binary form must reproduce the above copyright notice, this list of\nconditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.  Neither the name of\nthe University of Chicago nor the names of its contributors may be\nused to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE UNIVERSITY OF CHICAGO AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY OF\nCHICAGO OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nIII.  \n\nThis software includes contributions that are Copyright (c) 2005-2006\nArizona Board of Regents (University of Arizona).\nAll Rights Reserved\n\nPermission is hereby granted, without written agreement and without\nlicense or royalty fees, to use, copy, modify, and distribute this\nsoftware and its documentation for any purpose, provided that \n(1) The above copyright notice and the following paragraph\nappear in all copies of the source code and (2) redistributions\nincluding binaries reproduces these notices in the supporting\ndocumentation.   Substantial modifications to this software may be\ncopyrighted by their authors and need not follow the licensing terms\ndescribed here, provided that the new terms are clearly indicated in\nall files where they apply.\n\nTHIS SOFTWARE IS PROVIDED BY THE UNIVERSITY OF ARIZONA AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY OF\nARIZONA OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n"
        },
        {
          "name": "Lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "Makefile.in",
          "type": "blob",
          "size": 18.626953125,
          "content": "#######################################################################\n# SWIG top level Makefile\n#######################################################################\n\n.PHONY: ccache source swig\n\nprefix      = @prefix@\nexec_prefix = @exec_prefix@\nsrcdir      = @srcdir@\ndatarootdir = @datarootdir@\n\n#####################################################################\n# Make options - override these to see more output\n#####################################################################\n\nRUNPIPE     = \\>/dev/null\nFLAGS       = -k -s\n\n#####################################################################\n# Compiler and system configuration\n#####################################################################\n\nSHELL       = /bin/sh\nSWIG_LIB_INSTALL = @SWIG_LIB_INSTALL@\nBIN_DIR     = @bindir@\nENABLE_CCACHE = @ENABLE_CCACHE@\nTARGET_NOEXE= swig\nTARGET      = $(TARGET_NOEXE)@EXEEXT@\nSOURCE      = Source\nCCACHE      = CCache\nDOCS        = Doc/Manual\n\nswig: libfiles source ccache\n\nsource:\n\t@$(MAKE) -C $(SOURCE)\n\nccache:\n\ttest -z \"$(ENABLE_CCACHE)\" || $(MAKE) -C $(CCACHE)\n\nlibfiles: $(srcdir)/Lib/swigwarn.swg\n\n# Files required just for the tarball\nmaintainer: libfiles\n\t@$(MAKE) -C $(SOURCE) CParse/parser.h\n\n#####################################################################\n# Documentation\n#####################################################################\n\ndocs: docs-main\n\ndocs-main:\n\t@echo making docs\n\t@test ! -d $(DOCS) || $(MAKE) -C $(DOCS) all clean-baks\n\n#####################################################################\n# All the languages SWIG speaks (when it wants to)\n#####################################################################\n\nskip-c\t\t= test -n \"@SKIP_C@\"\nskip-csharp\t= test -n \"@SKIP_CSHARP@\"\nskip-d\t\t= test -n \"@SKIP_D@\"\nskip-go\t\t= test -n \"@SKIP_GO@\"\nskip-guile\t= test -n \"@SKIP_GUILE@\"\nskip-java\t= test -n \"@SKIP_JAVA@\"\nskip-javascript\t= test -n \"@SKIP_JAVASCRIPT@\"\nskip-lua    \t= test -n \"@SKIP_LUA@\"\nskip-mzscheme\t= test -n \"@SKIP_MZSCHEME@\"\nskip-ocaml      = test -n \"@SKIP_OCAML@\"\nskip-octave     = test -n \"@SKIP_OCTAVE@\"\nskip-perl5\t= test -n \"@SKIP_PERL5@\"\nskip-php\t= test -n \"@SKIP_PHP@\"\nskip-python\t= test -n \"@SKIP_PYTHON@\"\nskip-r\t\t= test -n \"@SKIP_R@\"\nskip-ruby\t= test -n \"@SKIP_RUBY@\"\nskip-scilab     = test -n \"@SKIP_SCILAB@\"\nskip-tcl\t= test -n \"@SKIP_TCL@\"\n\n# Additional dependencies for some tests\nskip-android    = test -n \"@SKIP_ANDROID@\"\n\n# Special errors test-case\nskip-errors\t= test -n \"\"\n\ncheck-%-enabled:\n\t@if $(skip-$*); then\t\t\t\t\t\\\n\t  echo skipping $* version;\t\t\t\t\\\n\t  exit 1;   \\\n\tfi\n\n#####################################################################\n# CHECK\n#####################################################################\n\nACTION = check\nNOSKIP =\n\ncheck-aliveness:\n\ttest -x ./$(TARGET)\n\t./$(TARGET) -version\n\t./$(TARGET) -help\n\t@$(skip-c) \t  || ./$(TARGET) -c          -help\n\t@$(skip-csharp)   || ./$(TARGET) -csharp     -help\n\t@$(skip-d) \t  || ./$(TARGET) -d          -help\n\t@$(skip-go)\t  || ./$(TARGET) -go         -help\n\t@$(skip-guile)    || ./$(TARGET) -guile      -help\n\t@$(skip-java)     || ./$(TARGET) -java       -help\n\t@$(skip-javascript) || ./$(TARGET) -javascript -help\n\t@$(skip-lua)      || ./$(TARGET) -lua        -help\n\t@$(skip-mzscheme) || ./$(TARGET) -mzscheme   -help\n\t@$(skip-ocaml)    || ./$(TARGET) -ocaml      -help\n\t@$(skip-octave)   || ./$(TARGET) -octave     -help\n\t@$(skip-perl5)    || ./$(TARGET) -perl       -help\n\t@$(skip-php)      || ./$(TARGET) -php7       -help\n\t@$(skip-python)   || ./$(TARGET) -python     -help\n\t@$(skip-r) \t  || ./$(TARGET) -r          -help\n\t@$(skip-ruby)     || ./$(TARGET) -ruby       -help\n\t@$(skip-scilab)   || ./$(TARGET) -scilab     -help\n\t@$(skip-tcl)      || ./$(TARGET) -tcl        -help\n\ncheck-ccache:\n\ttest -z \"$(ENABLE_CCACHE)\" || $(MAKE) -C $(CCACHE) check\n\n# Checks / displays versions of each target language\ncheck-versions:\t\t\t\t\t\\\n\tcheck-android-version\t\t\t\\\n\tcheck-csharp-version\t\t\t\\\n\tcheck-d-version\t\t\t\t\\\n\tcheck-go-version\t\t\t\\\n\tcheck-guile-version\t\t\t\\\n\tcheck-java-version\t\t\t\\\n\tcheck-javascript-version\t\t\\\n\tcheck-lua-version\t\t\t\\\n\tcheck-mzscheme-version\t\t\t\\\n\tcheck-ocaml-version\t\t\t\\\n\tcheck-octave-version\t\t\t\\\n\tcheck-perl5-version\t\t\t\\\n\tcheck-php-version\t\t\t\\\n\tcheck-python-version\t\t\t\\\n\tcheck-r-version\t\t\t\t\\\n\tcheck-ruby-version\t\t\t\\\n\tcheck-scilab-version\t\t\t\\\n\tcheck-tcl-version\t\t\t\\\n\n# all examples\ncheck-%-version :\n\t@if test -z \"$(skip-$*)\"; then\t\t\t\t\\\n\t  echo $* unknown;\t\t\t\t\t\\\n\t  exit 1;\t\t\t\t\t\t\\\n\tfi\n\t@if $(skip-$*); then\t\t\t\t\t\\\n\t  echo skipping $* version;\t\t\t\t\\\n\telse\t\t\t\t\t\t\t\\\n\t  echo showing $* version;\t\t\t\t\\\n\t  $(MAKE) -C Examples $(FLAGS) $*_version;\t\t\\\n\tfi\n\n# Checks examples for compilation (does not run them)\ncheck-examples:\t\t\t\t\t\\\n\tcheck-android-examples\t\t\t\\\n\tcheck-c-examples\t\t\t\\\n\tcheck-csharp-examples\t\t\t\\\n\tcheck-d-examples\t\t\t\\\n\tcheck-go-examples\t\t\t\\\n\tcheck-guile-examples\t\t\t\\\n\tcheck-java-examples\t\t\t\\\n\tcheck-javascript-examples\t\t\\\n\tcheck-lua-examples\t\t\t\\\n\tcheck-mzscheme-examples\t\t\t\\\n\tcheck-ocaml-examples\t\t\t\\\n\tcheck-octave-examples\t\t\t\\\n\tcheck-perl5-examples\t\t\t\\\n\tcheck-php-examples\t\t\t\\\n\tcheck-python-examples\t\t\t\\\n\tcheck-r-examples\t\t\t\\\n\tcheck-ruby-examples\t\t\t\\\n\tcheck-scilab-examples\t\t\t\\\n\tcheck-tcl-examples\t\t\t\\\n\nandroid_examples   :=$(shell sed '/^\\#/d' $(srcdir)/Examples/android/check.list)\nc_examples         :=$(shell sed '/^\\#/d' $(srcdir)/Examples/c/check.list)\ncsharp_examples    :=$(shell sed '/^\\#/d' $(srcdir)/Examples/csharp/check.list)\nd_examples         :=$(shell sed '/^\\#/d' $(srcdir)/Examples/d/check.list)\ngo_examples        :=$(shell sed '/^\\#/d' $(srcdir)/Examples/go/check.list)\nguile_examples     :=$(shell sed '/^\\#/d' $(srcdir)/Examples/guile/check.list)\njava_examples      :=$(shell sed '/^\\#/d' $(srcdir)/Examples/java/check.list)\njavascript_examples:=$(shell sed '/^\\#/d' $(srcdir)/Examples/javascript/check.list)\nlua_examples       :=$(shell sed '/^\\#/d' $(srcdir)/Examples/lua/check.list)\nmzscheme_examples  :=$(shell sed '/^\\#/d' $(srcdir)/Examples/mzscheme/check.list)\nocaml_examples     :=$(shell sed '/^\\#/d' $(srcdir)/Examples/ocaml/check.list)\noctave_examples    :=$(shell sed '/^\\#/d' $(srcdir)/Examples/octave/check.list)\nperl5_examples     :=$(shell sed '/^\\#/d' $(srcdir)/Examples/perl5/check.list)\nphp_examples       :=$(shell sed '/^\\#/d' $(srcdir)/Examples/php/check.list)\npython_examples    :=$(shell sed '/^\\#/d' $(srcdir)/Examples/python/check.list)\nr_examples         :=$(shell sed '/^\\#/d' $(srcdir)/Examples/r/check.list)\nruby_examples      :=$(shell sed '/^\\#/d' $(srcdir)/Examples/ruby/check.list)\nscilab_examples    :=$(shell sed '/^\\#/d' $(srcdir)/Examples/scilab/check.list)\ntcl_examples       :=$(shell sed '/^\\#/d' $(srcdir)/Examples/tcl/check.list)\n\n# Running tests using v8 or jsc involves creating a custom interpreter in\n# Tools/javascript.  This causes problems for parallel builds (we attempt to\n# update this interpreter when it's already running, resulting in a \"Text file\n# busy\" error).  We can avoid this by ensuring we have built the custom\n# interpreter before running the tests.\nifeq ($(ENGINE), $(filter $(ENGINE), jsc v8))\nifeq ($(ACTION), check)\ncheck-javascript-prepare:\n\t@$(MAKE) $(FLAGS) -C Tools/javascript javascript\nendif\nendif\n\ncheck-%-prepare:\n\t@:\n\n# all examples\ncheck-%-examples : check-%-prepare\n\t@if test -z \"$(skip-$*)\"; then\t\t\t\t\\\n\t  echo $* unknown;\t\t\t\t\t\\\n\t  exit 1;\t\t\t\t\t\t\\\n\tfi\n\t@if $(skip-$*); then\t\t\t\t\t\\\n\t  echo skipping $* $(ACTION);\t\t\t\t\\\n\telif test -z \"$($(strip $*_examples))\"; then\t\t\\\n\t  echo empty $* $(ACTION);\t\t\t\t\\\n\telse\t\t\t\t\t\t\t\\\n\t  $(MAKE) $(FLAGS) $($*_examples:=.actionexample) LANGUAGE=$* ACTION=$(ACTION); \\\n\tfi\n\n# individual example\n%.actionexample:\n\t@$(MAKE) -C Examples Makefile\n\t@echo $(ACTION)ing Examples/$(LANGUAGE)/$*\n\t@$(MAKE) -C Examples/$(LANGUAGE)/$* $(FLAGS) $(ACTION) RUNPIPE=$(RUNPIPE)\n\n# Checks testcases in the test-suite excluding those which are known to be broken\ncheck-test-suite:\t\t\t\t\\\n\tcheck-errors-test-suite\t\t\t\\\n\tcheck-c-test-suite\t\t\t\\\n\tcheck-csharp-test-suite\t\t\t\\\n\tcheck-d-test-suite\t\t\t\\\n\tcheck-go-test-suite\t\t\t\\\n\tcheck-guile-test-suite\t\t\t\\\n\tcheck-java-test-suite\t\t\t\\\n\tcheck-javascript-test-suite\t\t\\\n\tcheck-lua-test-suite\t\t\t\\\n\tcheck-mzscheme-test-suite\t\t\\\n\tcheck-ocaml-test-suite\t\t\t\\\n\tcheck-octave-test-suite\t\t\t\\\n\tcheck-perl5-test-suite\t\t\t\\\n\tcheck-php-test-suite\t\t\t\\\n\tcheck-python-test-suite\t\t\t\\\n\tcheck-r-test-suite\t\t\t\\\n\tcheck-ruby-test-suite\t\t\t\\\n\tcheck-scilab-test-suite\t\t\t\\\n\tcheck-tcl-test-suite\t\t\t\\\n\ncheck-%-test-suite: check-%-prepare\n\t@if test -z \"$(skip-$*)\"; then\t\t\t\t\t\\\n\t  echo $* unknown;\t\t\t\t\t\t\\\n\t  exit 1;\t\t\t\t\t\t\t\\\n\tfi\n\t@passed=true;\t\t\t\t\t\t\t\\\n\tdir=\"Examples/test-suite/$*\";\t\t\t\t\t\\\n\tif $(skip-$*) -a \"$(NOSKIP)\" != \"1\"; then\t\t\t\\\n\t  echo skipping $* test-suite $(ACTION);\t\t\t\\\n\telif [ ! -d $$dir ]; then\t\t\t\t\t\\\n\t  echo warning: cannot $(ACTION) $* test-suite \"(no dir $$dir)\";\\\n\telse\t\t\t\t\t\t\t\t\\\n\t  echo $(ACTION)ing $* test-suite;\t\t\t\t\\\n\t  $(MAKE) -C $$dir $(FLAGS) $(ACTION)\t\t\t\t\\\n\t  || passed=false;\t\t\t\t\t\t\\\n\tfi;\t\t\t\t\t\t\t\t\\\n\ttest $$passed = true\n\n# Partial test-suite check - it only invokes SWIG, ie no compilation and no runtime testing\npartialcheck-test-suite:\n\t@$(MAKE) $(FLAGS) check-test-suite ACTION=partialcheck NOSKIP=1\n\npartialcheck-%-test-suite:\n\t@$(MAKE) $(FLAGS) check-$*-test-suite ACTION=partialcheck NOSKIP=1\n\ncheck: check-aliveness check-ccache check-versions check-examples check-test-suite\n\n# Run known-to-be-broken as well as not broken testcases in the test-suite\nall-test-suite:\t\t\t\t\t\\\n\tall-c-test-suite\t\t\t\\\n\tall-csharp-test-suite\t\t\t\\\n\tall-d-test-suite\t\t\t\\\n\tall-go-test-suite\t\t\t\\\n\tall-guile-test-suite\t\t\t\\\n\tall-java-test-suite\t\t\t\\\n\tall-javascript-test-suite\t\t\\\n\tall-lua-test-suite\t\t\t\\\n\tall-mzscheme-test-suite\t\t\t\\\n\tall-ocaml-test-suite\t\t\t\\\n\tall-octave-test-suite\t\t\t\\\n\tall-perl5-test-suite\t\t\t\\\n\tall-php-test-suite\t\t\t\\\n\tall-python-test-suite\t\t\t\\\n\tall-r-test-suite\t\t\t\\\n\tall-ruby-test-suite\t\t\t\\\n\tall-scilab-test-suite   \t\t\\\n\tall-tcl-test-suite\t\t\t\\\n\nall-%-test-suite:\n\t@$(MAKE) $(FLAGS) check-$*-test-suite ACTION=all\n\n# Run known-to-be-broken testcases in the test-suite\nbroken-test-suite:\t\t\t\t\\\n\tbroken-c-test-suite\t\t\t\\\n\tbroken-csharp-test-suite\t\t\\\n\tbroken-d-test-suite\t\t\t\\\n\tbroken-go-test-suite\t\t\t\\\n\tbroken-guile-test-suite\t\t\t\\\n\tbroken-java-test-suite\t\t\t\\\n\tbroken-javascript-test-suite\t\t\\\n\tbroken-lua-test-suite\t\t\t\\\n\tbroken-mzscheme-test-suite\t\t\\\n\tbroken-ocaml-test-suite\t\t\t\\\n\tbroken-octave-test-suite\t\t\\\n\tbroken-perl5-test-suite\t\t\t\\\n\tbroken-php-test-suite\t\t\t\\\n\tbroken-python-test-suite\t\t\\\n\tbroken-r-test-suite\t\t\t\\\n\tbroken-ruby-test-suite\t\t\t\\\n\tbroken-scilab-test-suite\t\t\\\n\tbroken-tcl-test-suite\t\t\t\\\n\nbroken-%-test-suite:\n\t@$(MAKE) $(FLAGS) check-$*-test-suite ACTION=broken\n\n#####################################################################\n# CLEAN\n#####################################################################\n\nclean: clean-objects clean-examples clean-test-suite\n\nclean-objects: clean-source clean-ccache\n\nclean-source:\n\t@echo cleaning Source\n\t@$(MAKE) -C $(SOURCE) $(FLAGS) clean\n\t@rm -f $(TARGET)\n\nclean-examples:\n\t@$(MAKE) $(FLAGS) check-examples ACTION=clean\n\nclean-test-suite:\n\t@$(MAKE) $(FLAGS) check-test-suite ACTION=clean NOSKIP=1\n\nclean-%-examples:\n\t@$(MAKE) $(FLAGS) check-$*-examples ACTION=clean\n\nclean-%-test-suite:\n\t@$(MAKE) $(FLAGS) check-$*-test-suite ACTION=clean NOSKIP=1\n\nclean-ccache:\n\ttest -z \"$(ENABLE_CCACHE)\" || $(MAKE) -C $(CCACHE) $(FLAGS) clean\n\n#####################################################################\n# DISTCLEAN - clean what configure built\n#####################################################################\n\nDISTCLEAN-DEAD = config.status config.log config.cache Makefile mkmf.log preinst-swig\n\ndistclean-helper: distclean-test-suite distclean-examples distclean-tools distclean-dead\n\ndistclean: distclean-source distclean-ccache distclean-helper\n\ndistclean-source:\n\t@echo distcleaning Source\n\t@$(MAKE) -C $(SOURCE) $(FLAGS) distclean\n\t@rm -f $(TARGET)\n\ndistclean-test-suite:\n\t@echo distcleaning Examples/test-suite\n\t@$(MAKE) $(FLAGS) check-test-suite ACTION=distclean NOSKIP=1\n\ndistclean-examples:\n\t@echo distcleaning Examples\n\t@$(MAKE) $(FLAGS) clean-examples\n\t@$(MAKE) -C Examples $(FLAGS) distclean\n\t@if test \"x$(srcdir)\" != \"x.\"; then \\\n\t\tfor mkfile in `cd $(srcdir) && find Examples/ -type f -name Makefile`; do \\\n\t\t\trm -f \"$$mkfile\"; \\\n\t\tdone; \\\n\tfi\n\ndistclean-ccache:\n\t@test -z \"$(ENABLE_CCACHE)\" || $(MAKE) -C $(CCACHE) $(FLAGS) distclean\n\ndistclean-tools:\n\t@echo distcleaning Tools\n\t@$(MAKE) -C Tools/javascript $(FLAGS) distclean\n\ndistclean-dead:\n\trm -f $(DISTCLEAN-DEAD)\n\trm -rf autom4te.cache\n\n#####################################################################\n# MAINTAINER CLEAN - clean what the maintainer builds and ships in\n# the distributed tarball - should not delete anything needed to run\n# ./configure && make\n#####################################################################\n\nmaintainer-clean:\n\t@echo maintainer-cleaning source\n\t@$(MAKE) -C $(SOURCE) $(FLAGS) maintainer-clean\n\t@echo maintainer-cleaning CCache\n\t@test -z \"$(ENABLE_CCACHE)\" || $(MAKE) -C $(CCACHE) $(FLAGS) maintainer-clean\n\t@echo maintainer-cleaning docs\n\t@test ! -d $(DOCS) || $(MAKE) -C $(DOCS) $(FLAGS) maintainer-clean\n\t@echo maintainer-cleaning Lib files\n\t@rm -f $(srcdir)/Lib/swigwarn.swg\n\t@echo distcleaning\n\t@$(MAKE) $(FLAGS) distclean-helper\n\ncheck-maintainer-clean: maintainer-clean\n\t@if test \"x$(srcdir)\" = \"x.\"; then \\\n\t\techo \"skipping maintainer-clean check (in-source-tree build)\"; \\\n\t\texit 0; \\\n\tfi; \\\n\tfor file in `find . -type f`; do \\\n\t\techo \"file missed by maintainer-clean: $$file\"; \\\n\tdone; \\\n\ttest \"x$$file\" = x && echo \"all files cleaned by maintainer-clean\"\n\n#####################################################################\n# Update the Lib/swigwarn.swg file\n# Note: Generated into the source tree rather than build tree\n#####################################################################\n\n$(srcdir)/Lib/swigwarn.swg: $(srcdir)/Source/Include/swigwarn.h\n\tmkdir -p Lib\n\techo \"/* SWIG warning codes - generated from swigwarn.h - do not edit */\" > $@\n\tcat $? | grep \"^#define WARN\\|/\\*.*\\*/\\|^[ \\t]*$$\" | sed 's/^#define \\(WARN.*[0-9][0-9]*\\)\\(.*\\)$$/%define SWIG\\1 %enddef\\2/' >> $@\n\n#####################################################################\n# TARGETS: install & friends\n#####################################################################\n\nINSTALL         = @abs_srcdir@/Tools/config/install-sh\nINSTALL_DATA    = ${INSTALL} -c -m 644\nINSTALL_PROGRAM = ${INSTALL} -c -m 755\nMKINSTDIRS      = ${INSTALL} -m 0755 -d\n# Use standard autoconf approach to transform executable name using --program-prefix and --program-suffix\ntransform\t= @program_transform_name@\n\ninstall: install-main install-lib install-ccache\n\t@echo \"Installation complete\"\n\ninstall-main:\n\t@echo \"Installing SWIG executable\"\n\t@$(MKINSTDIRS) $(DESTDIR)$(BIN_DIR)\n\t@echo \"Installing $(DESTDIR)$(BIN_DIR)/`echo $(TARGET_NOEXE) | sed '$(transform)'`@EXEEXT@\"\n\t@$(INSTALL_PROGRAM) $(TARGET) $(DESTDIR)$(BIN_DIR)/`echo $(TARGET_NOEXE) | sed '$(transform)'`@EXEEXT@\n\nlib-languages = typemaps tcl perl5 python guile java mzscheme ruby php ocaml octave \\\n\tcsharp lua r c go d javascript javascript/jsc \\\n\tjavascript/v8 javascript/napi scilab xml\n\nlib-modules = std\n\n\ninstall-lib:\n\t@echo \"Installing the SWIG library\"\n\t@$(MKINSTDIRS) $(DESTDIR)$(SWIG_LIB_INSTALL)\n\t@for file in $(srcdir)/Lib/*.i $(srcdir)/Lib/*.swg ; do \\\n\t    i=`basename $$file` ;\t\t\t\t\\\n\t    echo \"Installing $(DESTDIR)$(SWIG_LIB_INSTALL)/$$i\";\t\\\n\t    $(INSTALL_DATA) $$file $(DESTDIR)$(SWIG_LIB_INSTALL)/$$i;\t\\\n\t    done;\n\t@for lang in $(lib-languages) $(lib-modules);\t\t\\\n\t    do\t\t\t\t\t\t\t\\\n\t    echo \"Installing language specific files for $$lang\"; \\\n\t    dst=$(DESTDIR)$(SWIG_LIB_INSTALL)/$$lang;\t\t\t\\\n\t    $(MKINSTDIRS) $$dst;\t\t\t\t\\\n\t     (doti=\"`cd $(srcdir)/Lib/$$lang && ls *.i 2>/dev/null || echo ''`\"; \\\n\t      dotswg=\"`cd $(srcdir)/Lib/$$lang && ls *.swg 2>/dev/null || echo ''`\"; \\\n\t      if [ -f $(srcdir)/Lib/$$lang/extra-install.list ]; then\t\\\n\t\t  extra=\"`sed '/^#/d' $(srcdir)/Lib/$$lang/extra-install.list`\";\t\\\n\t      fi;\t\t\t\t\t\t\\\n\t      files=\"`echo $$doti $$dotswg $$extra`\";\t\t\\\n\t      if [ x\"$$files\" = x ]; then\t\t\t\\\n\t\t  echo \"Installing nothing from Lib/$$lang\";\t\\\n\t      else for file in $$doti $$dotswg $$extra;\t\t\\\n\t\t  do\t\t\t\t\t\t\\\n\t\t  echo \"Installing $$dst/$$file\";\t\t\\\n\t\t  $(INSTALL_DATA) $(srcdir)/Lib/$$lang/$$file $$dst/$$file; \\\n\t\t  done;\t\t\t\t\t\t\\\n\t      fi) ; \t\t\t\t\t\t\\\n\tdone\n\ninstall-ccache:\n\t@test -z \"$(ENABLE_CCACHE)\" || $(MAKE) -C $(CCACHE) install\n\n\n#####################################################################\n# TARGETS: uninstall & friends\n#####################################################################\n\nuninstall: uninstall-main uninstall-lib uninstall-ccache\n\t@echo \"Uninstall complete\"\n\nuninstall-main:\n\t@echo \"Uninstalling SWIG executable $(DESTDIR)$(BIN_DIR)/`echo $(TARGET_NOEXE) | sed '$(transform)'`@EXEEXT@\"\n\trm -f $(DESTDIR)$(BIN_DIR)/`echo $(TARGET_NOEXE) | sed '$(transform)'`@EXEEXT@\n\nuninstall-lib:\n\t@echo \"Uninstalling the SWIG library\"\n\trm -rf $(DESTDIR)$(SWIG_LIB_INSTALL)/\n\nuninstall-ccache:\n\ttest -z \"$(ENABLE_CCACHE)\" || $(MAKE) -C $(CCACHE) uninstall\n\n############################################################################\n# DIST and other maintenance\n############################################################################\n\ndist:\n\t@echo \"'make dist' not implemented - use Tools/mkdist.py instead - e.g.:\"\n\t@echo \"Tools/mkdist.py @VERSION@ master\"\n\t@false\n\n# Update the autoconf files for detecting host/targets. Automake will do this in\n# version 1.10 for our case of not having a top level Makefile.am. Until then we\n# can fetch them manually and will have to commit them to Git.\nconfigfiles:\n\twget 'https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess' -O Tools/config/config.guess\n\tchmod a+x Tools/config/config.guess\n\twget 'https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub' -O Tools/config/config.sub\n\tchmod a+x Tools/config/config.sub\n\n# Regenerate Makefile if Makefile.in or config.status have changed.\nMakefile: $(srcdir)/Makefile.in config.status\n\t$(SHELL) ./config.status\n\n# This target is usually called from Source/Makefile when configure.ac has\n# changed.\nam--refresh: $(srcdir)/configure\n\n$(srcdir)/configure: $(srcdir)/configure.ac\n\t@echo \"Build system is out of date.  If the following commands fail, please reconfigure by hand (rerun: ./autogen.sh && ./configure)\"\n\tcd $(srcdir) && ./autogen.sh\n\t$(SHELL) ./config.status --recheck\n\n############################################################################\n# Tools\n############################################################################\n\n# Coverity static code analyser build and submit - EMAIL and PASSWORD need specifying\n# See http://scan.coverity.com/start/\nEMAIL=wsf@fultondesigns.co.uk\nPASSWORD=\ncoverity:\n\ttest -n \"$(PASSWORD)\" || (echo \"PASSWORD not set\" && false)\n\t$(MAKE) clean-source\n\trm -rf cov-int\n\tcov-build --dir cov-int $(MAKE) source\n\ttar czvf swig-coverity.tgz cov-int\n\tcurl --form file=@swig-coverity.tgz --form project=swig --form password=$(PASSWORD) --form email=$(EMAIL) http://scan5.coverity.com/cgi-bin/upload.py\n\n# Makefile ends here\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 5.16796875,
          "content": "SWIG (Simplified Wrapper and Interface Generator)\n\nTagline: SWIG is a compiler that integrates C and C++ with languages\n         including Perl, Python, Tcl, Ruby, PHP, Java, C#, D, Go, Lua,\n         Octave, R, Scheme (Guile, MzScheme/Racket), Scilab, Ocaml.\n         SWIG can also export its parse tree into XML.\n\nSWIG reads annotated C/C++ header files and creates wrapper code (glue\ncode) in order to make the corresponding C/C++ libraries available to\nthe listed languages, or to extend C/C++ programs with a scripting\nlanguage.\n\nUp-to-date SWIG related information can be found at\n\n        https://www.swig.org\n\nA SWIG FAQ and other hints can be found on the SWIG Wiki:\n\n        https://github.com/swig/swig/wiki\n\nLicense\n=======\nPlease see the LICENSE file for details of the SWIG license. For\nfurther insight into the license including the license of SWIG's\noutput code, please visit\n\n        https://www.swig.org/legal.html\n\nRelease Notes\n=============\nPlease see the CHANGES.current file for a detailed list of bug fixes and\nnew features for the current release. The CHANGES file contains bug fixes\nand new features for older versions. A summary of changes in each release\ncan be found in the RELEASENOTES file.\n\nDocumentation\n=============\nThe Doc/Manual directory contains the most recent set of updated\ndocumentation for this release. The documentation is available in\nthree different formats, each of which contains identical content.\nThese format are, pdf (Doc/Manual/SWIGDocumentation.pdf), single\npage html (Doc/Manual/SWIGDocumentation.html) or multiple page html\n(other files in Doc/Manual). Please select your chosen format and\ncopy/install to wherever takes your fancy.\n\nThere is some technical developer documentation available in the\nDoc/Devel subdirectory.  This is not necessarily up-to-date, but it\nhas some information on SWIG internals.\n\nDocumentation is also online at https://www.swig.org/doc.html.\n\nBackwards Compatibility\n=======================\nThe developers strive their best to preserve backwards compatibility\nbetween releases, but this is not always possible as the overriding\naim is to provide the best wrapping experience. Where backwards\ncompatibility is known to be broken, it is clearly marked as an\nincompatibility in the CHANGES and CHANGES.current files.\n\nSee the documentation for details of the SWIG_VERSION preprocessor\nsymbol if you have backward compatibility issues and need to use more\nthan one version of SWIG.\n\nInstallation\n============\nPlease read the Doc/Manual/Preface.html#Preface_installation for\nfull installation instructions for Windows, Unix and Mac OS X\nusing the release tarball/zip file. The INSTALL file has generic\nbuild and installation instructions for Unix users.\nUsers wishing to build and install code from Github should\nvisit https://swig.org/svn.html to obtain the more detailed\ninstructions required for building code obtained from Github - extra\nsteps are required compared to building from the release tarball.\n\nTesting\n=======\nThe typical 'make -k check' can be performed on Unix operating systems.\nPlease read Doc/Manual/Preface.html#Preface_testing for details.\n\nExamples\n========\nThe Examples directory contains a variety of examples of using SWIG\nand it has some browsable documentation.  Simply point your browser to\nthe file \"Example/index.html\".\n\nThe Examples directory also includes Visual C++ project 6 (.dsp) files for\nbuilding some of the examples on Windows. Later versions of Visual Studio\nwill convert these old style project files into a current solution file.\n\nKnown Issues\n============\nThere are minor known bugs, details of which are in the bug tracker, see\nhttps://www.swig.org/bugs.html.\n\nTroubleshooting\n===============\nIn order to operate correctly, SWIG relies upon a set of library\nfiles.  If after building SWIG, you get error messages like this,\n\n    $ swig foo.i\n    :1. Unable to find 'swig.swg'\n    :3. Unable to find 'tcl8.swg'\n\nit means that SWIG has either been incorrectly configured or\ninstalled.  To fix this:\n\n    1.  Make sure you remembered to do a 'make install' and that\n        the installation actually worked.  Make sure you have\n        write permission on the install directory.\n\n    2.  If that doesn't work, type 'swig -swiglib' to find out\n        where SWIG thinks its library is located.\n\n    3.  If the location is not where you expect, perhaps\n        you supplied a bad option to configure.  Use\n        ./configure --prefix=pathname to set the SWIG install\n        location.   Also, make sure you don't include a shell\n        escape character such as ~ when you specify the path.\n\n    4.  The SWIG library can be changed by setting the SWIG_LIB\n        environment variable.  However, you really shouldn't\n        have to do this.\n\nIf you are having other troubles, you might look at the SWIG Wiki at\nhttps://github.com/swig/swig/wiki.\n\nParticipate!\n============\nPlease report any errors and submit patches (if possible)!  We only\nhave access to a limited variety of hardware (Linux, Solaris, OS-X,\nand Windows). All contributions help.\n\nIf you would like to join the SWIG development team or contribute a\nlanguage module to the distribution, please contact the swig-devel\nmailing list, details at https://www.swig.org/mail.html.\n\n\n -- The SWIG Maintainers\n\n"
        },
        {
          "name": "RELEASENOTES",
          "type": "blob",
          "size": 23.384765625,
          "content": "This file contains a brief overview of the changes made in each release.\nA detailed description of changes are available in the CHANGES.current\nand CHANGES files.\n\nRelease Notes\n=============\nDetailed release notes are available with the release and are also\npublished on the SWIG web site at https://swig.org/release.html.\n\nSWIG-4.3.0 summary:\n- Add experimental support for C as a target language.\n- MzScheme/Racket is deprecated and planned for removal in SWIG-4.4.\n- The distributed Windows binary is now a 64-bit executable.\n- Add some missing use of move semantics for performance improvements.\n- Enhanced handling of namespaces when using the nspace feature.\n- STL wrapper enhancements for std::unique_ptr, std::string_view,\n  std::filesystem.\n- Various enum and enum class wrapping improvements.\n- Other C++ handling improvements around templates, friends, C++11\n  trailing return types and C++17 fold expressions.\n- Many parser improvements for both C and C++, especially expressions.\n- Improvements to handling of string and character literals.\n- Minor preprocessor fixes.\n- Python: Stricter stable ABI conformance, add support for python-3.13.\n- C#: Add support for converting Doxygen comments into XML C# comments.\n- Various other target language specific enhancements and updates for\n  Java, Javascript, Lua, MzScheme, Ocaml, Octave, Perl, Python, R, Ruby.\n\nSWIG-4.2.1 summary:\n- Tcl 9.0 support.\n- Octave 9.0 support.\n- Improvements wrapping friend functions.\n- Variadic templated functions within a template support.\n- Type deduction enhancements.\n- Stability and regression fixes.\n\nSWIG-4.2.0 summary:\n- Various template wrapping improvements: template template parameters,\n  variadic templates, partially specialized templates, const template\n  parameters and improved error checking instantiating templates.\n- Improved decltype() support for expressions.\n- C++14 auto without trailing return type and C++11 auto variables.\n- Numerous C++ using declarations improvements.\n- Numerous fixes for constructors, destructors and assignment operators:\n  implicit, default and deleted and related non-assignable variable\n  wrappers.\n- STL: std::array and std::map improvements, std::string_view support\n  added.\n- Various C preprocessor improvements.\n- Various issues fixed to do with architecture specific long type.\n- Various Doxygen improvements.\n- D1/Tango support removed.  D2/Phobos is now the supported D version\n  and SWIG now generates code which works with recent D2 releases.\n- New Javascript generator targeting Node.js binary stable ABI Node-API.\n- Octave 8.1 support added.\n- PHP7 support removed, PHP8 is now the supported PHP version.\n- Python STL container wrappers now use the Python Iterator Protocol.\n- Python stable ABI support added.\n- Python 3.12 support added.\n- Ruby 3.2 and 3.3 support.\n- Scilab 2023.* support added.\n- Various minor enhancements for C#, Go, Guile, Javascript, Lua, Ocaml,\n  Perl, PHP, R, Racket, Ruby, Scilab and Tcl.\n- A number of deprecated features have been removed.\n\nSWIG-4.1.1 summary:\n- Couple of stability fixes.\n- Stability fix in ccache-swig when calculating hashes of inputs.\n- Some template handling improvements.\n- R - minor fixes plus deprecation for rtypecheck typemaps being optional.\n\nSWIG-4.1.0 summary:\n- Add Javascript Node v12-v18 support, remove support prior to v6.\n- Octave 6.0 to 6.4 support added.\n- Add PHP 8 support.\n- PHP wrapping is now done entirely via PHP's C API - no more .php wrapper.\n- Perl 5.8.0 is now the oldest version SWIG supports.\n- Python 3.3 is now the oldest Python 3 version SWIG supports.\n- Python 3.9-3.11 support added.\n- Various memory leak fixes in Python generated code.\n- Scilab 5.5-6.1 support improved.\n- Many improvements for each and every target language.\n- Various preprocessor expression handling improvements.\n- Improved C99, C++11, C++14, C++17 support. Start adding C++20 standard.\n- Make SWIG much more move semantics friendly.\n- Add C++ std::unique_ptr support.\n- Few minor C++ template handling improvements.\n- Various C++ using declaration fixes.\n- Few fixes for handling Doxygen comments.\n- GitHub Actions is now used instead of Travis CI for continuous integration.\n- Add building SWIG using CMake as a secondary build system.\n- Update optional SWIG build dependency for regex support from PCRE to PCRE2.\n\nSWIG-4.0.2 summary:\n- A few fixes around doxygen comment handling.\n- Ruby 2.7 support added.\n- Various minor improvements to C#, D, Java, OCaml, Octave, Python,\n  R, Ruby.\n- Considerable performance improvement running SWIG on large\n  interface files.\n\nSWIG-4.0.1 summary:\n- SWIG now cleans up on error by removing all generated files.\n- Add Python 3.8 support.\n- Python Sphinx compatibility added for Doxygen comments.\n- Some minor regressions introduced in 4.0.0 were fixed.\n- Fix some C++17 compatibility problems in Python and Ruby generated\n  code.\n- Minor improvements/fixes for C#, Java, Javascript, Lua, MzScheme,\n  Ocaml, Octave and Python.\n\nSWIG-4.0.0 summary:\n- Support for Doxygen documentation comments which are parsed and\n  converted into JavaDoc or PyDoc comments.\n- STL wrappers improved for C#, Java and Ruby.\n- C++11 STL containers added for Java, Python and Ruby.\n- Improved support for parsing C++11 and C++14 code.\n- Various fixes for shared_ptr.\n- Various C preprocessor corner case fixes.\n- Corner case fixes for member function pointers.\n- Python module overhaul by simplifying the generated code and turning\n  most optimizations on by default.\n- %template improvements wrt scoping to align with C++ explicit\n  template instantiations.\n- Added support for a command-line options file (sometimes called a\n  response file).\n- Numerous enhancements and fixes for all supported target languages.\n- SWIG now classifies the status of target languages into either\n  'Experimental' or 'Supported' to indicate the expected maturity\n  level.\n- Support for CFFI, Allegrocl, Chicken, CLISP, S-EXP, UFFI, Pike,\n  Modula3 has been removed.\n- Octave 4.4-5.1 support added.\n- PHP5 support removed, PHP7 is now the supported PHP version.\n- Minimum Python version required is now 2.7, 3.2-3.7 are the only\n  other versions supported.\n- Added support for Javascript NodeJS versions 2-10.\n- OCaml support is much improved and updated, minimum OCaml version\n  required is now 3.12.0.\n\nSWIG-3.0.12 summary:\n- Add support for Octave-4.2.\n- Enhance %extend to support template functions.\n- Language specific enhancements and fixes for C#, D, Guile, Java, PHP7.\n\nSWIG-3.0.11 summary:\n- PHP 7 support added.\n- C++11 alias templates and type aliasing support added.\n- Minor fixes and enhancements for C# Go Guile Java Javascript Octave\n  PHP Python R Ruby Scilab XML.\n\nSWIG-3.0.10 summary:\n- Regression fixes for smart pointers and importing Python modules.\n\nSWIG-3.0.9 summary:\n- Add support for Python's implicit namespace packages.\n- Fixes to support Go 1.6.\n- C++11 std::array support added for Java.\n- Improved C++ multiple inheritance support for Java/C# wrappers.\n- Various other minor fixes and improvements for C#, D, Go, Java,\n  Javascript, Lua, Python, R, Ruby, Scilab.\n\nSWIG-3.0.8 summary:\n- pdf documentation enhancements.\n- Various Python 3.5 issues fixed.\n- std::array support added for Ruby and Python.\n- shared_ptr support added for Ruby.\n- Minor improvements for CFFI, Go, Java, Perl, Python, Ruby.\n\nSWIG-3.0.7 summary:\n- Add support for Octave-4.0.0.\n- Remove potential Android security exploit in generated Java classes.\n- Minor new features and bug fixes.\n\nSWIG-3.0.6 summary:\n- Stability and regression fixes.\n- Fixed parsing of C++ corner cases.\n- Language improvements and bug fixes for C#, Go, Java, Lua, Python, R.\n\nSWIG-3.0.5 summary:\n- Added support for Scilab.\n- Important Python regression fix when wrapping C++ default arguments.\n- Minor improvements for C#, Go, Octave, PHP and Python.\n\nSWIG-3.0.4 summary:\n- Python regression fix when wrapping C++ default arguments.\n- Improved error messages.\n\nSWIG-3.0.3 summary:\n- Add support for C++11 strongly typed enumerations.\n- Numerous bug fixes and minor enhancements for C#, D, Go, Java,\n  Javascript, PHP, Perl and Python wrappers.\n\nSWIG-3.0.2 summary:\n- Bug fix during install and a couple of other minor changes.\n\nSWIG-3.0.1 summary:\n- Javascript module added. This supports JavascriptCore (Safari/Webkit),\n  v8 (Chromium) and node.js currently.\n- A few notable regressions introduced in 3.0.0 have been fixed - in \n  Lua, nested classes and parsing of operator <<.\n- The usual round of bug fixes and minor improvements for:\n  C#, GCJ, Go, Java, Lua, PHP and Python.\n\nSWIG-3.0.0 summary:\n- This is a major new release focusing primarily on C++ improvements.\n- C++11 support added. Please see documentation for details of supported\n  features: https://www.swig.org/Doc3.0/CPlusPlus11.html\n- Nested class support added. This has been taken full advantage of in\n  Java and C#. Other languages can use the nested classes, but require\n  further work for a more natural integration into the target language.\n  We urge folk knowledgeable in the other target languages to step\n  forward and help with this effort.\n- Lua: improved metatables and support for %nspace.\n- Go 1.3 support added.\n- Python import improvements including relative imports.\n- Python 3.3 support completed.\n- Perl director support added.\n- C# .NET 2 support is now the minimum. Generated using statements are\n  replaced by fully qualified names.\n- Bug fixes and improvements to the following languages:\n  C#, Go, Guile, Java, Lua, Perl, PHP, Python, Octave, R, Ruby, Tcl\n- Various other bug fixes and improvements affecting all languages.\n- Note that this release contains some backwards incompatible changes\n  in some languages.\n- Full detailed release notes are in the changes file.\n\nSWIG-2.0.12 summary:\n- This is a maintenance release backporting some fixes from the pending\n  3.0.0 release.\n- Octave 3.8 support added.\n- C++11 support for new versions of erase/insert in the STL containers.\n- Compilation fixes on some systems for the generated Lua, PHP, Python\n  and R wrappers.\n\nSWIG-2.0.11 summary:\n- Minor bug fixes and enhancements mostly in Python, but also\n  C#, Lua, Ocaml, Octave, Perl, PHP, Python, R, Ruby, Tcl.\n\nSWIG-2.0.10 summary:\n- Ruby 1.9 support is now complete.\n- Add support for Guile 2.0 and Guile 1.6 support (GH interface) has\n  been dropped.\n- Various small language neutral improvements and fixes.\n- Various bug fixes and minor improvements specific to C#, CFFI, D,\n  Java, Octave, PHP, Python,\n- Minor bug fix in ccache-swig.\n- Development has moved to Github with Travis continuous integration\n  testing - patches using https://github.com/swig/swig are welcome.\n\nSWIG-2.0.9 summary:\n- Improved typemap matching.\n- Ruby 1.9 support is much improved.\n- Various bug fixes and minor improvements in C#, CFFI, Go, Java,\n  Modula3, Octave, Perl, Python, R, Ruby, Tcl and in ccache-swig.\n\nSWIG-2.0.8 summary:\n- Fix a couple of regressions introduced in 2.0.5 and 2.0.7.\n- Improved using declarations and using directives support.\n- Minor fixes/enhancements for C#, Java, Octave, Perl and Python.\n\nSWIG-2.0.7 summary:\n- Important regression fixes since 2.0.5 for typemaps in general and\n  in Python.\n- Fixes and enhancements for Go, Java, Octave and PHP.\n\nSWIG-2.0.6 summary:\n- Regression fix for Python STL wrappers on some systems.\n\nSWIG-2.0.5 summary:\n- Official Android support added including documentation and examples.\n- Improvements involving templates:\n  1) Various fixes with templates and typedef types.\n  2) Some template lookup problems fixed.\n  3) Templated type fixes to use correct typemaps.\n- Autodoc documentation generation improvements.\n- Python STL container wrappers improvements including addition of\n  stepped slicing.\n- Approximately 70 fixes and minor enhancements for the following\n  target languages: AllegroCL, C#, D, Go, Java, Lua, Ocaml, Octave,\n  Perl, PHP, Python, R, Ruby, Tcl, Xml.\n\nSWIG-2.0.4 summary:\n- This is mainly a Python oriented release including support for Python\n  built-in types for superior performance with the new -builtin option.\n  The -builtin option is especially suitable for performance-critical\n  libraries and applications that call wrapped methods repeatedly.\n  See the python-specific chapter of the SWIG manual for more info.\n- Python 3.2 support has also been added and various Python bugs have\n  been fixed.\n- Octave 3.4 support has also been added.\n- There are also the usual minor generic improvements, as well as bug\n  fixes and enhancements for D, Guile, Lua, Octave, Perl and Tcl. \n\nSWIG-2.0.3 summary:\n- A bug fix release including a couple of fixes for regressions in the\n  2.0 series.\n\nSWIG-2.0.2 summary:\n- Support for the D language has been added.\n- Various bug fixes and minor enhancements.\n- Bug fixes particular to the Clisp, C#, Go, MzScheme, Ocaml, PHP, R,\n  Ruby target languages.\n\nSWIG-2.0.1 summary:\n- Support for the Go language has been added.\n- New regular expression (regex) encoder for renaming symbols based on\n  the Perl Compatible Regular Expressions (PCRE) library.\n- Numerous fixes in reporting file and line numbers in error and warning\n  messages.\n- Various bug fixes and improvements in the C#, Lua, Perl, PHP, Ruby\n  and Python language modules.\n\nSWIG-2.0.0 summary:\n- License changes, see LICENSE file and https://www.swig.org/legal.html.\n- Much better nested class/struct support.\n- Much improved template partial specialization and explicit\n  specialization handling.\n- Namespace support improved with the 'nspace' feature where namespaces\n  can be automatically translated into Java packages or C# namespaces.\n- Improved typemap and symbol table debugging.\n- Numerous subtle typemap matching rule changes when using the default\n  (SWIGTYPE) type. These now work much like C++ class template partial\n  specialization matching.\n- Other small enhancements for typemaps. Typemap fragments are also now\n  official and documented.\n- Warning and error display refinements.\n- Wrapping of shared_ptr is improved and documented now.\n- Numerous C++ unary scope operator (::) fixes.\n- Better support for boolean expressions.\n- Various bug fixes and improvements in the Allegrocl, C#, Java, Lua,\n  Octave, PHP, Python, R, Ruby and XML modules.\n\nSWIG-1.3.40 summary:\n- SWIG now supports directors for PHP.\n- PHP support improved in general.\n- Octave 3.2 support added.\n- Various bug fixes/enhancements for Allegrocl, C#, Java, Octave, Perl,\n  Python, Ruby and Tcl.\n- Other generic fixes and minor new features.\n\nSWIG-1.3.39 summary:\n- Some new small feature enhancements.\n- Improved C# std::vector wrappers.\n- Bug fixes: mainly Python, but also Perl, MzScheme, CFFI, Allegrocl \n  and Ruby\n\nSWIG-1.3.38 summary:\n- Output directory regression fix and other minor bug fixes\n\nSWIG-1.3.37 summary:\n- Python 3 support added\n- SWIG now ships with a version of ccache that can be used with SWIG.\n  This enables the files generated by SWIG to be cached so that repeated\n  use of SWIG on unchanged input files speeds up builds quite considerably.\n- PHP 4 support removed and PHP support improved in general\n- Improved C# array support\n- Numerous Allegro CL improvements\n- Bug fixes/enhancements for Python, PHP, Java, C#, Chicken, Allegro CL,\n  CFFI, Ruby, Tcl, Perl, R, Lua.\n- Other minor generic bug fixes and enhancements\n\nSWIG-1.3.36 summary:\n- Enhancement to directors to wrap all protected members\n- Optimisation feature for objects returned by value\n- A few bugs fixes in the PHP, Java, Ruby, R, C#, Python, Lua and \n  Perl modules\n- Other minor generic bug fixes\n\nSWIG-1.3.35 summary:\n- Octave language module added\n- Bug fixes in Python, Lua, Java, C#, Perl modules\n- A few other generic bugs and runtime assertions fixed\n\nSWIG-1.3.34 summary:\n- shared_ptr support for Python\n- Support for latest R - version 2.6\n- Various minor improvements/bug fixes for R, Lua, Python, Java, C#\n- A few other generic bug fixes, mainly for templates and using statements\n\nSWIG-1.3.33 summary:\n- Fix regression for Perl where C++ wrappers would not compile\n- Fix regression parsing macros\n\nSWIG-1.3.32 summary:\n- shared_ptr support for Java and C#\n- Enhanced STL support for Ruby\n- Windows support for R\n- Fixed long-standing memory leak in PHP Module\n- Numerous fixes and minor enhancements for Allegrocl, C#, cffi, Chicken, Guile,\n  Java, Lua, Ocaml, Perl, PHP, Python, Ruby, Tcl.\n- Improved warning support\n\nSWIG-1.3.31 summary:\n- Python modern classes regression fix\n\nSWIG-1.3.30 summary:\n- Python-2.5 support\n- New language module: R\n- Director support added for C#\n- Numerous director fixes and improvements\n- Improved mingw/msys support\n- Better constants support in Guile and chicken modules\n- Support for generating PHP5 class wrappers\n- Important Java premature garbage collection fix\n- Minor improvements/fixes in cffi, php, allegrocl, perl, chicken, lua, ruby,\n  ocaml, python, java, c# and guile language modules\n- Many many other bug fixes\n\nSWIG-1.3.29 summary:\n- Numerous important bug fixes\n- Few minor new features\n- Some performance improvements in generated code for Python\n\nSWIG-1.3.28 summary:\n- More powerful renaming (%rename) capability.\n- More user friendly warning handling.\n- Add finer control for default constructors and destructors. We discourage\n  the use of the 'nodefault' option, which disables both constructors and\n  destructors, leading to possible memory leaks. Use instead 'nodefaultctor'\n  and/or 'nodefaultdtor'.\n- Automatic copy constructor wrapper generation via the 'copyctor' option/feature.\n- Better handling of Windows extensions and types.\n- Better runtime error reporting.\n- Add the %catches directive to catch and dispatch exceptions.\n- Add the %naturalvar directive for more 'natural' variable wrapping.\n- Better default handling of std::string variables using the %naturalvar directive.\n- Add the %allowexcept and %exceptionvar directives to handle exceptions when\n  accessing a variable.\n- Add the %delobject directive to mark methods that act like destructors.\n- Add the -fastdispatch option to enable smaller and faster overload dispatch\n  mechanism.\n- Template support for %rename, %feature and %typemap improved.\n- Add/doc more debug options, such as -dump_module, -debug_typemaps, etc.\n- Unified typemap library (UTL) potentially providing core typemaps for all\n  scripting languages based on the recently evolving Python typemaps.\n- New language module: Common Lisp with CFFI.\n- Python, Ruby, Perl and Tcl use the new UTL, many old reported and hidden \n  errors with typemaps are now fixed.\n- Initial Java support for languages using the UTL via GCJ, you can now use \n  Java libraries in your favorite script language using gcj + swig.\n- Tcl support for std::wstring.\n- PHP4 module update, many error fixes and actively maintained again.\n- Allegrocl support for C++, also enhanced C support.\n- Ruby support for bang methods.\n- Ruby support for user classes as native exceptions.\n- Perl improved dispatching in overloaded functions via the new cast and rank\n  mechanism.\n- Perl improved backward compatibility, 5.004 and later tested and working.\n- Python improved backward compatibility, 1.5.2 and later tested and working.\n- Python can use the same cast/rank mechanism via the -castmode option.\n- Python implicit conversion mechanism similar to C++, via the %implicitconv\n  directive (replaces and improves the implicit.i library). \n- Python threading support added.\n- Python STL support improved, iterators are supported and STL containers can\n  use now the native PyObject type.\n- Python many performance options and improvements, try the -O option to test\n  all of them. Python runtime benchmarks show up to 20 times better performance\n  compared to 1.3.27 and older versions.\n- Python support for 'multi-inheritance' on the python side.\n- Python simplified proxy classes, now swig doesn't need to generate the\n  additional 'ClassPtr' classes.\n- Python extended support for smart pointers.\n- Python better support for static member variables.\n- Python backward compatibility improved, many projects that used to work\n  only with  swig-1.3.21 to swig-1.3.24 are working again with swig-1.3.28\n- Python test-suite is now 'valgrinded' before release, and swig also\n  reports memory leaks due to missing destructors.\n- Minor bug fixes and improvements to the Lua, Ruby, Java, C#, Python, Guile,\n  Chicken, Tcl and Perl modules.\n\nSWIG-1.3.27 summary:\n- Fix bug in anonymous typedef structures which was leading to strange behaviour\n\nSWIG-1.3.26 summary:\n- New language modules: Lua, CLISP and Common Lisp with UFFI.\n- Big overhaul to the PHP module.\n- Change to the way 'extern' is handled.\n- Minor bug fixes specific to  C#, Java, Modula3, Ocaml, Allegro CL,\n  XML, Lisp s-expressions, Tcl, Ruby and Python modules.\n- Other minor improvements and bug fixes.\n\nSWIG-1.3.25 summary:\n- Improved runtime type system.  Speed of module loading improved in\n  modules with lots of types.  SWIG_RUNTIME_VERSION has been increased\n  from 1 to 2, but the API is exactly the same; only internal changes\n  were made.\n- The languages that use the runtime type system now support external\n  access to the runtime type system.\n- Various improvements with typemaps and template handling.\n- Fewer warnings in generated code.\n- Improved colour documentation.\n- Many C# module improvements (exception handling, prevention of early\n  garbage collection, C# attributes support added, more flexible type\n  marshalling/asymmetric types.)\n- Minor improvements and bug fixes specific to the C#, Java, TCL, Guile,\n  Chicken, MzScheme, Perl, Php, Python, Ruby and Ocaml modules).\n- Various other bug fixes and memory leak fixes.\n\nSWIG-1.3.24 summary:\n- Improved enum handling\n- More runtime library options\n- More bugs fixes for templates and template default arguments, directors\n  and other areas.\n- Better smart pointer support, including data members, static members\n  and %extend.\n\nSWIG-1.3.23 summary:\n- Improved support for callbacks\n- Python docstring support and better error handling\n- C++ default argument support for Java and C# added.\n- Improved c++ default argument support for the scripting languages plus\n  option to use original (compact) default arguments.\n- %feature and %ignore/%rename bug fixes and mods - they might need default\n  arguments specified to maintain compatible behaviour when using the new\n  default arguments wrapping.\n- Runtime library changes: Runtime code can now exist in more than one module\n  and so need not be compiled into just one module\n- Further improved support for templates and namespaces\n- Overloaded templated function support added\n- More powerful default typemaps (mixed default typemaps)\n- Some important %extend and director code bug fixes\n- Guile now defaults to using SCM API.  The old interface can be obtained by\n  the -gh option.\n- Various minor improvements and bug fixes for C#, Chicken, Guile, Java, \n  MzScheme, Perl, Python and Ruby\n- Improved dependencies generation for constructing Makefiles.\n\nSWIG-1.3.22 summary:\n- Improved exception handling and translation of C errors or C++\n  exceptions into target language exceptions.\n- Improved enum support, mapping to built-in Java 1.5 enums and C#\n  enums or the typesafe enum pattern for these two languages.\n- Python - much better STL support and support for std::wstring,\n  wchar_t and FILE *.\n- Initial support for Modula3 and Allegro CL.\n- 64 bit TCL support.\n- Java and C#'s proxy classes are now nearly 100% generated from\n  typemaps and/or features for finer control on the generated code.\n- SWIG runtime library support deprecation.\n- Improved documentation. SWIG now additionally provides documentation\n  in the form of a single HTML page as well as a pdf document.\n- Enhanced C++ friend declaration support.\n- Better support for reference counted classes.\n- Various %fragment improvements.\n- RPM fixes.\n- Various minor improvements and bug fixes for C#, Chicken, Guile, Java, \n  MzScheme, Perl, Php, Python, Ruby and XML.\n\n\n"
        },
        {
          "name": "Source",
          "type": "tree",
          "content": null
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 7.380859375,
          "content": "SWIG TO-DO\n\n-----------------------------------------------------------------------------\n\n****    = High Priority\n***     = Implement if possible.\n**      = Will implement if time.\n*       = Implement if bored (or deemed necessary).\n\ndefer   = Implement in next version\n\nCORE:\n\n****   Add support for nested classes.   The type system should be\ndefer  ready to go.  The primary obstacle lies in the target language\n       modules (which were never programmed with nested classes in\n       mind).  There are also issues with nested C structures.  For\n       example:\n\n             struct Foo {\n                 struct {\n                     int x,y;\n                 } z;\n             };\n\n       This is one of the last remaining \"hard\" problems in the SWIG\n       core, but it is important that we solve it.\n\n***    Implement $fail special variable substitution in wrappers. Used\n       to properly transfer control out of a wrapper function while\n       reclaiming resources.\n\n       Note: Implemented in languages that uses the UTL via the\n       'SWIG_fail' macro.\n\n***    Rewrite declaration annotation to better unify %rename and related\n       directives.  Add a selector mechanism that allows specific parse tree\n       nodes to be identified.  For example:\n\n             %feature(\"foo\", nodetype=\"class\") Foo { ... some code ... };\n\n       Consider use of wildcards.   Namespace/nested scope support in\n       %feature is currently weak.  It works, but is fragile.  Consider\n       an implementation that is better integrated with symbol table\n       management.  Continue to consolidate SWIG directives to %feature.\n\n       Note: Initial implementation in the %rename directive.\n\n***    Add more intelligent information related to object ownership.\n       SWIG should be able to automatically strip ownership from\n       objects when they are assigned to pointer variables and structure\n       members as well as stored in a container (i.e., an array of pointers).\n\n       [ Partially finished for Ruby/Perl/Tcl/Python. ]\n\n**     Restoration of the documentation system.\n       [ Partially done for Python. ]\n              \n\n**     Restoration of Objective-C support.\n\n**     Unification of symbol tables and type system scopes.  In a sense\n       they capture the same information so it is not necessary to have\n       both.  The existence of two symbol management systems is mostly\n       historical.\n\nBuild\n-----\n\nLibrary\n-------\n\n****   Add more support for the C++ standard library.  std::complex and other\n       core datatypes.   Refine support for STL vector.   Add more STL objects.\n\n       [ Partially finished for Python. ]\n\n****   Continue to expand the set of recognized typemaps.\n\nWindows\n-------\n\nAll language modules\n--------------------\n\nPython\n------\n\n***    Ability to wrap certain classes as Python built-in types.\n\nPerl\n----\n\n****   Rewrite runtime pointer type checking to better integrate\n       shadow classes.   Creation of shadow classes should be done\n       in C instead of Perl.   This will fix a number of problems\n       related to typemaps and reduce the amount of Perl wrapper code.\n\n****   Create tests for existing support for operator overloading\n\nTcl\n---\n\nRuby\n----\n\n****   The \"Resource Management in Proxies\" section of the \"SWIG and C++\"\n       chapter discusses how proxies' ownership of their associated C++\n       object can change, and the use of the special disown() and\n       acquire() methods to change this ownership status. Need to\n       address this for Ruby as well.\n\n***    Add support for keyword arguments (by collecting them in a hash?).\n\nJava\n----\n\n\nC#\n--\n\nPHP\n---\n\n****   Look at moving to using the UTL.\n\n**     When returning wrapped objects via alternate constructors if that\n       pointer value already exists \"out there\" as a resource we should\n       use the same resource, we can't have multiple ref-counted resources\n       mapping to the same object in case it gets twice destroyed.\n\n**     Look at pass by point and passby ref,\n       Make sometype** to be auto allocated\n       Make sometype& and sometype* to be autoallocated IF THEY ARE NOT\n       ALREADY swigtype wrapped.\n\n*      Review to see what else is missing!\n\nGuile\n-----\n\n**     Maybe rename slot setters from CLASS-SLOT-set to CLASS-SLOT-set!\n       to match Scheme convention for naming of mutators.\n\n**     Support keyword args.\n\n**     Director Support!\n\n**     Cleaner handling of multiple values.\n       Use a typemap keyword argument \"numoutputs\" of \"out\" and\n       \"argout\" to indicate how many values are returned.\n\n**     Make SWIG's types first-class by using a separate smob type for\n       SWIG type descriptors; enable reflection on types.  (Maybe\n       GOOPS metaclasses?)\n\n**     Provide a clean way to construct type predicates.\n\n**     In GOOPS mode, maybe make overloaded functions methods. \n\n**     Increase the safety of destructor functions.  John Lenz suggests:\n\n\t  I think the best way of doing this would be to use %feature to mark  \n\t  which classes allow for \"normal\" <swig> smobs to be deleted explicitly.\n\n\t  We separate pointers into two classes, those that can be deleted from  \n\t  scheme and those that can't.  The pointers that can be deleted use the\n\t  <collectable-swig> smob and those that can not be deleted use the  \n\t  <swig> smob.  A user can specify which type of each object they want  \n\t  with %newobject and the CONSUMED typemap.\n\n\t  By default, the exported destructor will only accept <collectable-swig>  \n\t  smobs, because by definition, collectable-swig smobs are those that can  \n\t  be deleted from scheme.  This allows for the user to implement  \n\t  protection.  In the interface file, the user has complete control over  \n\t  which objects can and can not be deleted, and can guarantee that  \n\t  objects that should not be deleted can not be deleted, and that objects  \n\t  that should eventually be deleted will be garbage collected.\n\n\t  This protection can then be overridden with a %feature directive,  \n\t  something like\n\n\t  %feature(\"guile_allow_destroy_all\",\"1\") Foo::~Foo;\n\n\t  I don't know what word we want to use, guile_allow_destroy_all is kinda  \n\t  bad.  This feature would then allow for a <swig Foo *> smob to be  \n\t  deleted by passing it to the destructor.  This would allow users to  \n\t  maintain the protection on other classes, only manually overriding the  \n\t  protection on the classes that need it.\n\n\nMzscheme\n--------\n\n**     Port list-vector.i and pointer-in-out.i from Guile.\n\n**     Add shadow class support for the Swindle system. \n\nOcaml\n-----\n**     I've been working with my camlp4 module and type information\n       from the compiler.  When I'm done, the user will have access\n       to type inference when writing code, when the inference is\n       unambiguous.  This allows the user to write x = _foo 1.0\n       instead of x = get_float (_foo (C_float 1.0)).  It's not as\n       easy as it sounds, because O'caml doesn't keep type information\n       at run time, and doesn't really have a mechanism for doing what\n       I need.  However, it's possible to write a preprocessor that\n       inserts correct type info at compile time.\n\n       That having been said, the program must compile for type info\n       to be available, so I need to attend to a lot of details;  The\n       program must compile both with and without type augmentation.\n       \nXml\n---\n\n\nDocumentation\n-------------\n\n****   Extending SWIG (and internals).\n\n***    Perl, Python, Tcl modules.\n\n***    add section for Perl module support for operator overloading\n"
        },
        {
          "name": "Tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "Win",
          "type": "tree",
          "content": null
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 7.607421875,
          "content": "platform:\n- x64\n\nskip_commits:\n  files:\n    - '.github/**'\n    - 'CHANGES*'\n    - 'Doc/**'\n    - 'Tools/CI-*'\n\nenvironment:\n  global:\n    MAKEJOBS: 2\n\n  matrix:\n  - SWIGLANG: python\n    VSVER: 15\n    VER: 38\n    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n  - SWIGLANG: python\n    VSVER: 16\n    VER: 39\n    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019\n  - SWIGLANG: python\n    OSVARIANT: mingw\n    WITHLANG: python\n    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022\n\n#matrix:\n#  allow_failures:\n#  - SWIGLANG: python\n#    OSVARIANT: cygwin\n\n# Skip stale commits (pull requests only), see https://github.com/appveyor/ci/issues/38#issuecomment-70628826\ninit:\n- ps: |\n    if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `\n        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `\n        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `\n        throw \"There are newer queued builds for this pull request, failing early.\" }\n\ninstall:\n- date /T & time /T\n- ps: >-\n    if ($env:Platform -eq \"x86\") {\n      $env:PCRE_PLATFORM=\"Win32\"\n      $env:JAVA_HOME=\"C:/Program Files (x86)/Java/jdk1.8.0\"\n      $env:VCVARS_PLATFORM=\"x86\"\n      $env:LANG_PLATFORM=\"\"\n      $env:CYGWINBIN=\"C:\\cygwin\\bin\"\n      $env:CYGWINSETUP=\"C:/cygwin/setup-x86.exe\"\n      $env:MSYSBIN=\"C:\\msys64\\usr\\bin\"\n      $env:MINGWBIN=\"C:\\msys64\\mingw32\\bin\"\n      $env:MBITS=\"32\"\n      $env:MARCH=\"i686\"\n      $env:VSARCH=\"\"\n    } else {\n      $env:PCRE_PLATFORM=\"x64\"\n      $env:JAVA_HOME=\"C:/Program Files/Java/jdk17\"\n      $env:VCVARS_PLATFORM=\"amd64\"\n      $env:LANG_PLATFORM=\"-x64\"\n      $env:CYGWINBIN=\"C:\\cygwin64\\bin\"\n      $env:CYGWINSETUP=\"C:/cygwin64/setup-x86_64.exe\"\n      $env:MSYSBIN=\"C:\\msys64\\usr\\bin\"\n      $env:MINGWBIN=\"C:\\msys64\\mingw64\\bin\"\n      $env:MBITS=\"64\"\n      $env:MARCH=\"x86_64\"\n      $env:VSARCH=\" Win64\"\n    }\n- ps: >-\n    if (!$env:OSVARIANT) {\n      $env:PATH=\"$env:CYGWINBIN;$env:PATH\"\n      $env:CYGWIN=\"nodosfilewarning\"\n      $env:CC=\"cccl\"\n      $env:CXX=\"cccl\"\n      if ($env:VSVER -ge 17) {\n        $env:VCVARSBAT=\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvars$env:MBITS.bat\"\n        $env:BOOSTROOT=\"C:/Libraries/boost_1_83_0\"\n      } elseif ($env:VSVER -eq 16) {\n        $env:VCVARSBAT=\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvars$env:MBITS.bat\"\n        $env:BOOSTROOT=\"C:/Libraries/boost_1_83_0\"\n      } elseif ($env:VSVER -eq 15) {\n        $env:VCVARSBAT=\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build\\vcvars$env:MBITS.bat\"\n        $env:BOOSTROOT=\"C:/Libraries/boost_1_69_0\"\n        nuget install Bison -Version 3.7.4 -OutputDirectory C:\\Tools\\bison\n      } else {\n        $env:VSCOMNTOOLS=(Get-Content (\"env:VS\" + \"$env:VSVER\" + \"0COMNTOOLS\"))\n        $env:VCVARSBAT=\"$env:VSCOMNTOOLS..\\..\\VC\\vcvarsall.bat\"\n        $env:VCVARSARG=\"$env:VCVARS_PLATFORM\"\n        $env:BOOSTROOT=\"C:/Libraries/boost_1_69_0\"\n        nuget install Bison -Version 3.7.4 -OutputDirectory C:\\Tools\\bison\n      }\n    } elseif ($env:OSVARIANT -eq \"cygwin\") {\n      $env:PATH=\"$env:CYGWINBIN;$env:PATH\"\n      $env:CYGWIN=\"nodosfilewarning\"\n      $env:CC=\"gcc\"\n      $env:CXX=\"g++\"\n    } elseif ($env:OSVARIANT -eq \"mingw\") {\n      # Note mingw setup tests the native Windows Python distribution (not MinGW Python) with gcc\n      $env:PATH=\"$env:MINGWBIN;$env:MSYSBIN;$env:PATH\"\n      $env:MSYSTEM=\"MINGW$env:MBITS\" # This is important for msys2\n      $env:CC=\"gcc\"\n      $env:CXX=\"g++\"\n    }\n- if \"%OSVARIANT%\"==\"\" bash -c \"cd /usr/bin && curl --retry 15 -s -L https://github.com/swig/cccl/archive/cccl-1.2.tar.gz | tar -xz --strip 1 cccl-cccl-1.2/cccl\"\n- if \"%OSVARIANT%\"==\"\" call \"%VCVARSBAT%\" %VCVARSARG%\n- if \"%OSVARIANT%\"==\"\" appveyor-retry appveyor DownloadFile https://github.com/PhilipHazel/pcre2/archive/refs/tags/pcre2-10.39.zip\n- if \"%OSVARIANT%\"==\"\" 7z x pcre2-10.39.zip\n- if \"%OSVARIANT%\"==\"\" set PCRE_ROOT=C:/pcre\n- if \"%OSVARIANT%\"==\"\" set PATH=C:\\Python%VER%%LANG_PLATFORM%;%PATH%\n- if \"%OSVARIANT%\"==\"\" bash -c \"which cl.exe\"\n- if \"%OSVARIANT%\"==\"\" bash -c \"cl.exe /? 2>&1 | head -n 1\"\n- if \"%OSVARIANT%\"==\"\" bash -c \"which csc.exe\"\n- if \"%OSVARIANT%\"==\"\" bash -c \"csc.exe /? | head -n 1\"\n- if \"%OSVARIANT%\"==\"cygwin\" %CYGWINSETUP% --quiet-mode --packages python3-devel,libpcre2-devel,libboost-devel > cygwin-install.txt || bash -c \"cat cygwin-install.txt\"\n- if \"%OSVARIANT%\"==\"mingw\" bash -c \"pacman --noconfirm --sync mingw%MBITS%/mingw-w64-%MARCH%-autotools mingw%MBITS%/mingw-w64-%MARCH%-pcre2 mingw%MBITS%/mingw-w64-%MARCH%-boost mingw%MBITS%/mingw-w64-%MARCH%-python\"\n- if not \"%WITHLANG%\"==\"\" set SWIGWITHLANG==%WITHLANG%\n- if not \"%WITHLANG%\"==\"\" where %WITHLANG%\n- if \"%SWIGLANG%\"==\"python\" set PY3=3\n- if \"%PY2%\"==\"2\" set PY3=\n- bash -c \"which $CC\"\n- bash -c \"which $CXX\"\n- bash -c \"$CC --version | head -n 1\"\n- bash -c \"$CXX --version | head -n 1\"\n- bash -c \"which python\"\n- bash -c \"python -V\"\n- bash -c \"make --version | head -n 2\"\n- pwd\n- echo MAKEJOBS=%MAKEJOBS%\n- uname -a\n- systeminfo | findstr /B /C:\"OS Name\" /B /C:\"OS Version\"\n\nbuild_script:\n- set PATH=C:\\Tools\\bison\\Bison.3.7.4\\bin;%PATH%\n- set CCCL_OPTIONS=--cccl-muffle /W3 /EHsc\n- set CHECK_OPTIONS=CSHARPOPTIONS=-platform:%Platform%\n- if \"%BUILDSYSTEM%\"==\"cmake\" cd pcre2-pcre2-10.39 && cmake -G \"Visual Studio 14 2015%VSARCH%\" -DCMAKE_INSTALL_PREFIX=\"%PCRE_ROOT:\\=/%\" . && cmake --build . --config Release --target install && cd ..\n- if \"%BUILDSYSTEM%\"==\"cmake\" cmake --version && cmake -G \"Visual Studio 14 2015%VSARCH%\" -DCMAKE_INSTALL_PREFIX=\"%CD:\\=/%/install2\" -DCMAKE_C_FLAGS=\"/WX /DPCRE2_STATIC\" -DCMAKE_CXX_FLAGS=\"/WX /DPCRE2_STATIC\" -DPCRE2_INCLUDE_DIR=%PCRE_ROOT%/include -DPCRE2_LIBRARY=%PCRE_ROOT%/lib/pcre2-8-static.lib -DBISON_EXECUTABLE=C:/Tools/bison/Bison.3.7.4/bin/bison.exe . && cmake --build . --config Release --target install && ctest --output-on-failure -V -C Release && appveyor exit\n- if \"%OSVARIANT%\"==\"\" bash -c \"exec 0</dev/null && cd pcre2-pcre2-10.39 && ./autogen.sh && ./configure CC=$CC CXX=$CXX CFLAGS='-O2' LDFLAGS='--cccl-link /LTCG' --prefix=%PCRE_ROOT% --disable-shared && time make -s -j%MAKEJOBS% LN_S=cp && make install && cd .. && cp -v %PCRE_ROOT%/lib/libpcre2-8.lib %PCRE_ROOT%/lib/pcre2-8.lib\"\n  # Open dummy file descriptor to fix error on cygwin: ./configure: line 560: 0: Bad file descriptor\n- if \"%OSVARIANT%\"==\"\" bash -c \"exec 0</dev/null && ./autogen.sh && time ./configure --disable-dependency-tracking --disable-ccache CC=$CC CXX=$CXX CFLAGS='-O2' CXXFLAGS='-O2' LDFLAGS='--cccl-link /LTCG' PCRE2_CFLAGS='-I%PCRE_ROOT%/include -DPCRE2_STATIC' PCRE2_LIBS='-L%PCRE_ROOT%/lib/ -lpcre2-8' --without-perl5 --without-go --with-boost=%BOOSTROOT% || cat config.log\"\n- if not \"%OSVARIANT%\"==\"\" bash -c \"exec 0</dev/null && ./autogen.sh && time ./configure CC=%CC% CXX=%CXX% --without-alllang --with-$SWIGLANG$PY3$SWIGWITHLANG || cat config.log\"\n- bash -c \"time make -s -j%MAKEJOBS%\"\n\ntest_script:\n- set CCCL_OPTIONS=--cccl-muffle /W3 /EHsc\n- .\\swig.exe -version\n- .\\swig.exe -pcreversion\n- if not \"%OSVARIANT%\"==\"\" CCache\\ccache-swig -V\n- bash -c \"file ./swig.exe\"\n- bash -c \"make check-%SWIGLANG%-version\"\n- bash -c \"make check-%SWIGLANG%-enabled\"\n- bash -c \"time make -k check-%SWIGLANG%-examples %CHECK_OPTIONS% %CHECK_OPTIONS2%\"\n- bash -c \"time make -k check-%SWIGLANG%-test-suite -j%MAKEJOBS% %CHECK_OPTIONS% %CHECK_OPTIONS2%\"\n\n# Do not build on tags (GitHub only)\nskip_tags: true\n\n#on_finish: # Display RDP connection information\n#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.572265625,
          "content": "#! /bin/sh\n\n# Bootstrap the development environment - add extra files needed to run configure. \n# Note autoreconf should do what this file achieves, but it has a bug when working with automake!\n# The latest config.guess and config.sub should be copied into Tools/config.\n# This script will ensure the latest is copied from your autotool installation.\n\nset -e\nset -x\ntest -d Tools/config || mkdir Tools/config\n${ACLOCAL-aclocal} -I Tools/config\n${AUTOHEADER-autoheader}\n${AUTOMAKE-automake} --add-missing --copy --force-missing\n${AUTOCONF-autoconf}\ncd CCache && ${AUTORECONF-autoreconf}\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 89.6279296875,
          "content": "dnl Process this file with autoconf to produce a configure script.\ndnl The macros which aren't shipped with the autotools are stored in the\ndnl Tools/config directory in .m4 files.\n\nAC_INIT([swig],[4.4.0],[https://www.swig.org])\nAC_PREREQ([2.60])\n\nAC_CONFIG_SRCDIR([Source/Swig/swig.h])\nAC_CONFIG_AUX_DIR([Tools/config])\nAC_CONFIG_HEADERS([Source/Include/swigconfig.h])\nAC_CANONICAL_HOST\nAM_INIT_AUTOMAKE\n\ndnl Some extra defines for the config file\nAH_BOTTOM([\n/* Deal with attempt by Microsoft to deprecate C standard runtime functions */\n#if defined(_MSC_VER)\n# define _CRT_SECURE_NO_DEPRECATE\n#endif\n])\n\ndnl Check for programs that a user requires to build SWIG\nAC_PROG_CC\nAC_PROG_CXX\nAM_PROG_CC_C_O  # Needed for subdir-objects in AUTOMAKE_OPTIONS\n\nAC_COMPILE_WARNINGS # Increase warning levels\n\nAC_MSG_CHECKING([CFLAGS to compile SWIG executable])\nAC_MSG_RESULT([$CFLAGS])\nAC_MSG_CHECKING([CXXFLAGS to compile SWIG executable])\nAC_MSG_RESULT([$CXXFLAGS])\n\nAC_DEFINE_UNQUOTED(SWIG_CXX, [\"$CXX\"], [Compiler that built SWIG])\nAC_DEFINE_UNQUOTED(SWIG_PLATFORM, [\"$host\"], [Platform that SWIG is built for])\n\n# For AC_EGREP_CPP\nAC_PROG_EGREP\n\ndnl PCRE\nAC_ARG_WITH([pcre],\n  [AS_HELP_STRING([--without-pcre],\n                  [Disable support for regular expressions using PCRE2])],\n  [],\n  [with_pcre=yes])\n\nAC_MSG_CHECKING([whether to enable PCRE2 support])\nAC_MSG_RESULT([$with_pcre])\n\ndnl To make configuring easier, check for a locally built PCRE using the Tools/pcre-build.sh script\nif test x\"${with_pcre}\" = xyes ; then\n  AC_MSG_CHECKING([whether to use local PCRE2])\n  local_pcre_config=no\n  if test -z \"$PCRE2_CONFIG\"; then\n    if test -f `pwd`/pcre/pcre-swig-install/bin/pcre2-config; then\n      PCRE2_CONFIG=`pwd`/pcre/pcre-swig-install/bin/pcre2-config\n      local_pcre_config=$PCRE2_CONFIG\n    fi\n  fi\n  AC_MSG_RESULT([$local_pcre_config])\nfi\nAS_IF([test \"x$with_pcre\" != xno],\n  [AX_PATH_GENERIC([pcre2],\n    [], dnl Minimal version of PCRE we need -- accept any\n    [], dnl custom sed script for version parsing is not needed\n    [AC_DEFINE([HAVE_PCRE], [1], [Define if you have PCRE2 library])\n     LIBS=\"$LIBS $PCRE2_LIBS\"\n     CPPFLAGS=\"$CPPFLAGS $PCRE2_CFLAGS\"\n    ],\n    [AC_MSG_FAILURE([\n        Cannot find pcre2-config script from PCRE2 (Perl Compatible Regular Expressions)\n        library package. This dependency is needed for configure to complete,\n        Either:\n        - Install the PCRE2 developer package on your system (preferred approach).\n        - Download the PCRE2 source tarball, build and install on your system\n          as you would for any package built from source distribution.\n        - Use the Tools/pcre-build.sh script to build PCRE2 just for SWIG to statically\n          link against. Run 'Tools/pcre-build.sh --help' for instructions.\n          (quite easy and does not require privileges to install PCRE2 on your system)\n        - Use configure --without-pcre to disable regular expressions support in SWIG\n          (not recommended).])\n    ],\n    [],[],[--libs8])\n  ])\n\n\ndnl CCache\nAC_ARG_ENABLE([ccache], AS_HELP_STRING([--disable-ccache], [disable building and installation of ccache-swig executable (default enabled)]), [enable_ccache=$enableval], [enable_ccache=yes])\nAC_MSG_CHECKING([whether to enable ccache-swig])\nAC_MSG_RESULT([$enable_ccache])\n\nif test \"$enable_ccache\" = yes; then\n  AC_CONFIG_SUBDIRS(CCache)\n  ENABLE_CCACHE=1\nfi\nAC_SUBST(ENABLE_CCACHE)\n\n\necho \"\"\necho \"Checking packages required for SWIG developers.\"\necho \"Note : None of the following packages are required for users to compile and install SWIG from the distributed tarball\"\necho \"\"\n\nAC_CHECK_PROGS([BISON], [bison], [$MISSING bison])\n\necho \"\"\necho \"Checking for installed target languages and other information in order to compile and run\"\necho \"the examples and test-suite invoked by 'make check'.\"\necho \"Note : None of the following packages are required for users to compile and install SWIG from the distributed tarball\"\necho \"\"\n\ndnl Some test cases require Boost\nAX_BOOST_BASE(,,,)\n\ndnl Info for building shared libraries ... in order to run the examples\n\n# SO is the extension of shared libraries (including the dot!)\nAC_MSG_CHECKING(SO)\nif test -z \"$SO\"\nthen\n\tcase $host in\n\t*-*-hp*) SO=.sl;;\n\t*-*-darwin*) SO=.bundle;;\n\t*-*-cygwin* | *-*-mingw* | *-*-msys*) SO=.dll;;\n\t*) SO=.so;;\n\tesac\nfi\nAC_MSG_RESULT($SO)\n\n# LDSHARED is the ld *command* used to create shared library\n# -- \"ld\" on SunOS 4.x.x, \"ld -G\" on SunOS 5.x, \"ld -shared\" on IRIX 5\n# (Shared libraries in this instance are shared modules to be loaded into\n# Python, as opposed to building Python itself as a shared library.)\nAC_MSG_CHECKING(LDSHARED)\nif test -z \"$LDSHARED\"\nthen\n\tcase $host in\n\t*-*-aix*) LDSHARED=\"$CC -shared\";;\n\t*-*-cygwin* | *-*-mingw* | *-*-msys*)\n            if test \"$GCC\" = yes; then\n                LDSHARED=\"\\$(CC) -shared\"\n            else\n                if test \"cl\" = $CC ;  then\n                    # Microsoft Visual C++ (MSVC)\n                    LDSHARED=\"\\$(CC) -nologo -LD\"\n                else\n                    # Unknown compiler try gcc approach\n                    LDSHARED=\"\\$(CC) -shared\"\n                fi\n            fi ;;\n\t*-*-irix5*) LDSHARED=\"ld -shared\";;\n\t*-*-irix6*) LDSHARED=\"ld ${SGI_ABI} -shared -all\";;\n\t*-*-sunos4*) LDSHARED=\"ld\";;\n\t*-*-solaris*) LDSHARED=\"ld -G\";;\n\t*-*-hp*) LDSHARED=\"ld -b\";;\n\t*-*-osf*) LDSHARED=\"ld -shared -expect_unresolved \\\"*\\\"\";;\n\t*-sequent-sysv4) LDSHARED=\"ld -G\";;\n\t*-*-next*)\n\t\tif test \"$ns_dyld\"\n\t\tthen LDSHARED=\"\\$(CC) \\$(LDFLAGS) -bundle -prebind\"\n\t\telse LDSHARED=\"\\$(CC) \\$(CFLAGS) -nostdlib -r\"\n\t\tfi\n                if test \"$with_next_framework\" ; then\n\t\t    LDSHARED=\"$LDSHARED \\$(LDLIBRARY)\"\n\t\tfi ;;\n\t*-*-linux*) LDSHARED=\"\\$(CC) -shared\";;\n\t*-*-dgux*) LDSHARED=\"ld -G\";;\n\t*-*-freebsd3*) LDSHARED=\"\\$(CC) -shared\";;\n\t*-*-freebsd* | *-*-openbsd*) LDSHARED=\"ld -Bshareable\";;\n\t*-*-netbsd*)\n\t\tif [[ \"`\\$(CC) -dM -E - </dev/null | grep __ELF__`\" != \"\" ]]\n\t\tthen\n\t\t\tLDSHARED=\"\\$(CC) -shared\"\n\t\telse\n\t\t\tLDSHARED=\"ld -Bshareable\"\n\t\tfi;;\n\t*-sco-sysv*) LDSHARED=\"\\$(CC) -G -KPIC -Ki486 -belf -Wl,-Bexport\";;\n\t*-*-darwin*) LDSHARED=\"\\$(CC) -bundle -undefined suppress -flat_namespace\";;\n\t*)\tLDSHARED=\"ld\";;\n\tesac\nfi\nAC_MSG_RESULT($LDSHARED)\n# CXXSHARED is the ld *command* used to create C++ shared library\n# -- \"ld\" on SunOS 4.x.x, \"ld -G\" on SunOS 5.x, \"ld -shared\" on IRIX 5\n# (Shared libraries in this instance are shared modules to be loaded into\n# Python, as opposed to building Python itself as a shared library.)\nAC_MSG_CHECKING(CXXSHARED)\nif test -z \"$CXXSHARED\"\nthen\n\tCXXSHARED=\"$LDSHARED\"\nfi\nAC_MSG_RESULT($CXXSHARED)\n\n#\nAC_MSG_CHECKING(TRYLINKINGWITHCXX)\nif test -z \"$TRYLINKINGWITHCXX\"\nthen\n\tcase $host in\n\t*-*-solaris*) if test \"$GCC\" = yes\n             then TRYLINKINGWITHCXX=\"CXXSHARED= \\$(CXX) -Wl,-G\"\n             else TRYLINKINGWITHCXX=\"CXXSHARED= \\$(CXX) -G -L/opt/SUNWspro/lib -lCrun -lCstd\"\n             fi;;\n        *-*-hp*) TRYLINKINGWITHCXX=\"CXXSHARED= \\$(CXX) +z \";;\n        *-*-darwin*) TRYLINKINGWITHCXX=\"CXXSHARED= \\$(CXX) -bundle -undefined suppress -flat_namespace\";;\n        *-*-cygwin* | *-*-mingw* | *-*-msys*)\n            if test \"$GCC\" = yes; then\n                TRYLINKINGWITHCXX=\"CXXSHARED= \\$(CXX) -shared \"\n            else\n                if test \"cl\" = $CXX ;  then\n                    # Microsoft Visual C++ (MSVC)\n                    TRYLINKINGWITHCXX=\"CXXSHARED= \\$(CXX) -nologo -LD\"\n                else\n                    TRYLINKINGWITHCXX=\"#unknown Windows compiler\"\n                fi\n            fi ;;\n        *)       TRYLINKINGWITHCXX=\"CXXSHARED= \\$(CXX) -shared \";;\n        esac\nfi\nAC_MSG_RESULT($TRYLINKINGWITHCXX)\n# CCSHARED are the C *flags* used to create objects to go into a shared\n# library (module).  Typically an option is needed to tell the compiler\n# to general Position-Independent Code (PIC).\nAC_MSG_CHECKING(CCSHARED)\nif test -z \"$CCSHARED\"\nthen\n\tcase $host in\n\t*-*-hp*) if test \"$GCC\" = yes\n\t\t then CCSHARED=\"-fPIC\"\n\t\t else CCSHARED=\"+z\"\n\t\t fi;;\n\t*-*-linux* | *-*-freebsd* | *-*-netbsd* | *-*-openbsd*) CCSHARED=\"-fPIC\";;\n\t*-sco-sysv*) CCSHARED=\"-KPIC -dy -Bdynamic\";;\n\t*-*-irix6*)  case $CC in\n\t\t   *gcc*) CCSHARED=\"-shared\";;\n\t\t   *) CCSHARED=\"\";;\n\t\t   esac;;\n\tesac\nfi\nAC_MSG_RESULT($CCSHARED)\n\n# RPATH is the path used to look for shared library files.\nAC_MSG_CHECKING(RPATH)\nif test -z \"$RPATH\"\nthen\n\tcase $host in\n\t*-*-solaris*) RPATH='-R. -R$(exec_prefix)/lib';;\n        *-*-irix*) RPATH='-rpath .:$(exec_prefix)/lib';;\n\t*-*-linux*) RPATH='-Xlinker -rpath $(exec_prefix)/lib -Xlinker -rpath .';;\n\t*)\tRPATH='';;\n\tesac\nfi\nAC_MSG_RESULT($RPATH)\n\n# LINKFORSHARED are the flags passed to the $(CC) command that links\n# a few executables -- this is only needed for a few systems\n\nAC_MSG_CHECKING(LINKFORSHARED)\nif test -z \"$LINKFORSHARED\"\nthen\n\tcase $host in\n\t*-*-aix*)\tLINKFORSHARED='-Wl,-bE:$(srcdir)/python.exp -lld';;\n\t*-*-hp*)\n\t    LINKFORSHARED=\"-Wl,-E -Wl,+s -Wl,+b\\$(BINLIBDEST)/lib-dynload\";;\n\t*-*-linux*) LINKFORSHARED=\"-Xlinker -export-dynamic\";;\n\t*-*-next*) LINKFORSHARED=\"-u libsys_s\";;\n\t*-sco-sysv*) LINKFORSHARED=\"-Bdynamic -dy -Wl,-Bexport\";;\n\t*-*-irix6*) LINKFORSHARED=\"-all\";;\n\tesac\nfi\nAC_MSG_RESULT($LINKFORSHARED)\n\n# Optional CFLAGS used to silence/enhance compiler warnings on some platforms.\nAC_MSG_CHECKING(CFLAGS to use for testing (PLATCFLAGS))\ncase $host in\n  *-*-solaris*) if test \"$GCC\" = yes\n    then PLATCFLAGS=\n    else PLATCFLAGS=\n      #    else PLATCFLAGS=\"-errtags=yes\" # Need more work as C examples use ld for linking\n    fi;;\n  *-*-aix*) PLATCFLAGS=\"$CFLAGS\";;\n  *) PLATCFLAGS=\nesac\nAC_MSG_RESULT($PLATCFLAGS)\n\n# Add switch if necessary to enable C++11 support - just for tests\nAC_ARG_ENABLE([cpp11-testing], AS_HELP_STRING([--disable-cpp11-testing], [disable C++11 and later C++ standards testing even if supported by compiler (default enabled)]), [enable_cpp11_testing=$enableval], [enable_cpp11_testing=yes])\nAC_MSG_CHECKING([whether to attempt to enable C++11 and later C++ standards testing])\nAC_MSG_RESULT([$enable_cpp11_testing])\n\nPLATCXXFLAGS=\"$PLATCFLAGS\"\nif test x\"$enable_cpp11_testing\" = xyes; then\n  CXX_SAVED=$CXX\n  CXXCPP_SAVED=$CXXCPP\n\n  # Test for c++20\n  CXXCPP=\" \"\n  AX_CXX_COMPILE_STDCXX(20, [noext], [optional])\n  AC_MSG_CHECKING([whether C++11 to C++20 testing is enabled])\n  if test \"$HAVE_CXX20\" = \"1\"; then\n    AC_MSG_RESULT([yes])\n    PLATCXXFLAGS=\"$CXXCPP $PLATCXXFLAGS\"\n    HAVE_CXX17=\"1\"\n    HAVE_CXX14=\"1\"\n    HAVE_CXX11=\"1\"\n  else\n    AC_MSG_RESULT([no])\n\n    # Test for c++17\n    CXXCPP=\" \"\n    AX_CXX_COMPILE_STDCXX(17, [noext], [optional])\n    AC_MSG_CHECKING([whether C++11 to C++17 testing is enabled])\n    if test \"$HAVE_CXX17\" = \"1\"; then\n      AC_MSG_RESULT([yes])\n      PLATCXXFLAGS=\"$CXXCPP $PLATCXXFLAGS\"\n      HAVE_CXX14=\"1\"\n      HAVE_CXX11=\"1\"\n    else\n      AC_MSG_RESULT([no])\n\n      # Test for c++14\n      CXXCPP=\" \"\n      CXX=$CXX_SAVED\n      AX_CXX_COMPILE_STDCXX(14, [noext], [optional])\n      AC_MSG_CHECKING([whether C++11 to C++14 testing is enabled])\n      if test \"$HAVE_CXX14\" = \"1\"; then\n        AC_MSG_RESULT([yes])\n        PLATCXXFLAGS=\"$CXXCPP $PLATCXXFLAGS\"\n        HAVE_CXX11=\"1\"\n      else\n        AC_MSG_RESULT([no])\n\n        # Test for c++11\n        CXXCPP=\" \"\n        CXX=$CXX_SAVED\n        AX_CXX_COMPILE_STDCXX(11, [noext], [optional])\n        AC_MSG_CHECKING([whether C++11 testing is enabled])\n        if test \"$HAVE_CXX11\" = \"1\"; then\n          AC_MSG_RESULT([yes])\n          PLATCXXFLAGS=\"$CXXCPP $PLATCXXFLAGS\"\n        else\n          AC_MSG_RESULT([no])\n        fi\n      fi\n    fi\n  fi\n\n  CXX=$CXX_SAVED\n  CXXCPP=$CXXCPP_SAVED\nfi\nAC_SUBST(HAVE_CXX11)\nAC_SUBST(HAVE_CXX14)\nAC_SUBST(HAVE_CXX17)\nAC_SUBST(HAVE_CXX20)\n\n# On darwin 10.7,10.8,10.9 using clang++, need to ensure using\n# libc++ for tests and examples to run under mono. May affect\n# other language targets as well - problem is a Mac OS X incompatibility\n# between libraries depending on libstdc++ and libc++.\nCLANGXX=\n$CXX -v 2>&1 | grep -i clang >/dev/null && CLANGXX=yes\ncase $host in\n  *-*-darwin11* | *-*-darwin12* |*-*-darwin13*  ) if test \"$CLANGXX\" = \"yes\";\n    then PLATCXXFLAGS=\"$PLATCXXFLAGS -stdlib=libc++\"\n    fi;;\n  *) ;;\nesac\n\nAC_MSG_CHECKING(CXXFLAGS to use for testing (PLATCXXFLAGS))\nPLATCXXFLAGS=$(echo $PLATCXXFLAGS | xargs) # Trim whitespace\nAC_MSG_RESULT([$PLATCXXFLAGS])\n\n# Check for compiler pre-compiled header support\nAC_MSG_CHECKING([if compiler supports pre-compiled headers])\nPCHSUPPORT=no\nif test \"$CLANGXX\" = \"yes\"; then\n   PCHINCLUDEARG=\"-include-pch\"\n   PCHINCLUDEEXT=\".gch\"\nelse\n   PCHINCLUDEARG=\"-include\"\n   PCHINCLUDEEXT=\"\"\nfi\nAC_LANG_PUSH([C++])\necho '#include <cstdlib>' > conftest.hpp\necho '#include \"conftest.hpp\"' > conftest.cpp\n$CXX -c conftest.hpp 2>/dev/null\nif test $? -eq 0; then\n   if test -f conftest.hpp.gch; then\n      $CXX -H -c -I. ${PCHINCLUDEARG} ./conftest.hpp${PCHINCLUDEEXT} -o conftest.o conftest.cpp >conftest.out 2>&1\n      if test $? -eq 0; then\n         if test \"$CLANGXX\" = \"yes\"; then\n            PCHSUPPORT=yes\n         elif grep -q '^!.*conftest.hpp.gch$' conftest.out; then\n            PCHSUPPORT=yes\n         fi\n      fi\n   fi\nfi\nrm -f conftest.hpp conftest.cpp conftest.out\nAC_LANG_POP([C++])\nAC_MSG_RESULT([$PCHSUPPORT])\nAC_SUBST(PCHSUPPORT)\nAC_SUBST(PCHINCLUDEARG)\nAC_SUBST(PCHINCLUDEEXT)\n\n# Set info about shared libraries.\nAC_SUBST(SO)\nAC_SUBST(LDSHARED)\nAC_SUBST(CCSHARED)\nAC_SUBST(CXXSHARED)\nAC_SUBST(TRYLINKINGWITHCXX)\nAC_SUBST(RPATH)\nAC_SUBST(PLATCFLAGS)\nAC_SUBST(PLATCXXFLAGS)\nAC_SUBST(LINKFORSHARED)\n\n# This variation is needed on OS-X because there is no (apparent) consistency in shared library naming.\n# Sometimes .bundle works, but sometimes .so is needed.  It depends on the target language\n\nAC_SUBST(PYTHON_SO)\ncase $host in\n   *-*-mingw*) PYTHON_SO=.pyd;;\n   *-*-darwin*) PYTHON_SO=.so;;\n   *) PYTHON_SO=$SO;;\nesac\n\nAC_SUBST(TCL_SO)\ncase $host in\n   *-*-darwin*) TCL_SO=.dylib;;\n   *) TCL_SO=$SO;;\nesac\n\nAC_SUBST(GUILE_SO)\ncase $host in\n   *-*-darwin*) GUILE_SO=.so;;\n   *) GUILE_SO=$SO;;\nesac\n\nAC_SUBST(PHP_SO)\ncase $host in\n   *-*-darwin*) PHP_SO=.so;;\n   *) PHP_SO=$SO;;\nesac\n\nAC_SUBST(MZSCHEME_SO)\ncase $host in\n   *) MZSCHEME_SO=.so;;\nesac\n\nAC_SUBST(LUA_SO)\ncase $host in\n   *-*-darwin*) LUA_SO=.so;;\n   *) LUA_SO=$SO;;\nesac\n\n# Check for specific libraries.   Used for SWIG examples\nAC_CHECK_LIB(dl, dlopen)\t# Dynamic linking for SunOS/Solaris and SYSV\nAC_CHECK_LIB(dld, shl_load)\t# Dynamic linking for HP-UX\n\n# check for --with-libm=...\nAC_SUBST(LIBM)\nLIBM=-lm\nAC_ARG_WITH(libm, [  --with-libm=STRING      math library], [\nif test \"$withval\" != yes\nthen LIBM=$withval\nelse AC_MSG_ERROR([proper usage is --with-libm=STRING])\nfi])\nAC_CHECK_LIB(ieee, main, [LIBM=\"-lieee $LIBM\"])\n\n# check for --with-libc=...\nAC_SUBST(LIBC)\nAC_ARG_WITH(libc, [  --with-libc=STRING      C library], [\nif test \"$withval\" != yes\nthen LIBC=$withval\nelse AC_MSG_ERROR([proper usage is --with-libc=STRING])\nfi])\n\n#--------------------------------------------------------------------\n# Target languages\n#--------------------------------------------------------------------\n\nAC_ARG_WITH(alllang, AS_HELP_STRING([--without-alllang], [Disable all languages]), with_alllang=\"$withval\")\n\nif test \"$with_alllang\" = \"no\"; then\n  alllang_default=no\nelse\n  alllang_default=yes\nfi\n\nAC_PATH_TOOL([PKG_CONFIG], [pkg-config])\n\n#----------------------------------------------------------------\n# Look for Android\n#----------------------------------------------------------------\n\nAC_ARG_WITH(android, AS_HELP_STRING([--without-android], [Disable Android])\nAS_HELP_STRING([--with-android=path], [Set location of android executable]),[ANDROIDBIN=\"$withval\"], [ANDROIDBIN=\"$alllang_default\"])\nAC_ARG_WITH(adb, [  --with-adb=path         Set location of adb executable - Android Debug Bridge],[ADBBIN=\"$withval\"], [ADBBIN=])\nAC_ARG_WITH(ant, [  --with-ant=path         Set location of ant executable for Android],[ANTBIN=\"$withval\"], [ANTBIN=])\nAC_ARG_WITH(ndk-build, [  --with-ndk-build=path   Set location of Android ndk-build executable],[NDKBUILDBIN=\"$withval\"], [NDKBUILDBIN=])\n\n# First, check for \"--without-android\" or \"--with-android=no\".\nif test x\"${ANDROIDBIN}\" = xno; then\n  AC_MSG_NOTICE([Disabling Android])\n  ANDROID=\nelse\n  if test \"x$ANDROIDBIN\" = xyes; then\n    AC_CHECK_PROGS(ANDROID, android)\n  else\n    ANDROID=\"$ANDROIDBIN\"\n  fi\n\n  if test -z \"$ADBBIN\"; then\n    AC_CHECK_PROGS(ADB, adb)\n  else\n    ADB=\"$ADBBIN\"\n  fi\n\n  if test -z \"$ANTBIN\"; then\n    AC_CHECK_PROGS(ANT, ant)\n  else\n    ANT=\"$ANTBIN\"\n  fi\n\n  if test -z \"$NDKBUILDBIN\"; then\n    AC_CHECK_PROGS(NDKBUILD, ndk-build)\n  else\n    NDKBUILD=\"$NDKBUILDBIN\"\n  fi\nfi\n\nAC_SUBST(ANDROID)\nAC_SUBST(ADB)\nAC_SUBST(ANT)\nAC_SUBST(NDKBUILD)\n\n#----------------------------------------------------------------\n# Nothing to look for in C case, just define some variables\n#----------------------------------------------------------------\n\n# Some tweaks for creating shared modules.\nC_SO='$(SO)'\n\ncase $host in\n*-*-darwin*)\n        C_LDFLAGS='-dynamiclib'\n        C_SO=\".dylib\"\n        ;;\n*-*-cygwin* | *-*-mingw*)\n        # Nothing special to do.\n        ;;\n*)\n        # This is needed for linking with Boost which uses mutexes and does no\n        # harm in all the other cases.\n        C_LDFLAGS='-pthread'\n        ;;\nesac\n\nC_LDSHARED=\"\\$(LDSHARED) $C_LDFLAGS\"\nCXX_LDSHARED=\"\\$(CXXSHARED) $C_LDFLAGS\"\n\nAC_SUBST(C_LDSHARED)\nAC_SUBST(CXX_LDSHARED)\nAC_SUBST(C_SO)\n\n#----------------------------------------------------------------\n# Look for C#\n#----------------------------------------------------------------\n\nAC_ARG_WITH(csharp, AS_HELP_STRING([--without-csharp], [Disable CSharp]), [with_csharp=\"$withval\"], [with_csharp=\"$alllang_default\"])\nAC_ARG_WITH(cil-interpreter, [  --with-cil-interpreter=path     Set location of CIL interpreter for CSharp],[CSHARPBIN=\"$withval\"], [CSHARPBIN=])\nAC_ARG_WITH(csharp-compiler, [  --with-csharp-compiler=path     Set location of CSharp compiler],[CSHARPCOMPILERBIN=\"$withval\"], [CSHARPCOMPILERBIN=])\n\n# First, check for \"--without-csharp\" or \"--with-csharp=no\".\nif test x\"${with_csharp}\" = xno; then\nAC_MSG_NOTICE([Disabling CSharp])\nCSHARPCOMPILER=\nelse\n\nif test -z \"$CSHARPCOMPILERBIN\" ; then\n  case $host in\n  *-*-cygwin* | *-*-mingw* | *-*-msys*)\n    # prefer unified Mono mcs compiler (not to be confused with the ancient .NET 1 mcs) over older/alternative names.\n    AC_CHECK_PROGS(CSHARPCOMPILER, csc mcs mono-csc gmcs cscc)\n    if test -n \"$CSHARPCOMPILER\" && test \"$CSHARPCOMPILER\" = \"csc\" ; then\n      AC_MSG_CHECKING(whether csc is the Microsoft CSharp compiler)\n      csc 2>/dev/null | grep \"C#\" > /dev/null || CSHARPCOMPILER=\"\"\n      if test -z \"$CSHARPCOMPILER\" ; then\n        AC_MSG_RESULT(no)\n        AC_CHECK_PROGS(CSHARPCOMPILER, mcs mono-csc gmcs cscc)\n      else\n        AC_MSG_RESULT(yes)\n      fi\n    fi\n    ;;\n  *)AC_CHECK_PROGS(CSHARPCOMPILER, mono-csc gmcs mcs cscc);;\n  esac\nelse\n  CSHARPCOMPILER=\"$CSHARPCOMPILERBIN\"\nfi\n\nCSHARPCONVERTPATH=\"Tools/convertpath -u\"\nif test -z \"$CSHARPBIN\" ; then\n  CSHARPCILINTERPRETER=\"\"\n  CSHARPCILINTERPRETER_FLAGS=\"\"\n  if test \"cscc\" = \"$CSHARPCOMPILER\" ; then\n    AC_CHECK_PROGS(CSHARPCILINTERPRETER, ilrun)\n  else\n    if test \"mcs\" = \"$CSHARPCOMPILER\"; then\n      # Check that mcs is the C# compiler and not the Unix mcs utility by examining the output of 'mcs --version'\n      # The Mono compiler should emit: Mono C# compiler version a.b.c.d\n      csharp_version_raw=`(mcs --version) 2>/dev/null`\n      csharp_version_searched=`(mcs --version | sed -e \"/C#/b\" -e \"/Mono/b\" -e d) 2>/dev/null` # return string if contains 'Mono' or 'C#'\n      CSHARPCOMPILER=\"\"\n      if test -n \"$csharp_version_raw\" ; then\n        if test \"$csharp_version_raw\" = \"$csharp_version_searched\" ; then\n          CSHARPCOMPILER=\"mcs\"\n        fi\n      fi\n      if test \"mcs\" != \"$CSHARPCOMPILER\" ; then\n        echo \"mcs is not a working Mono C# compiler\"\n      fi\n    fi\n    if test \"mcs\" = \"$CSHARPCOMPILER\" || test \"gmcs\" = \"$CSHARPCOMPILER\" || test \"mono-csc\" = \"$CSHARPCOMPILER\"; then\n        AC_CHECK_PROGS(CSHARPCILINTERPRETER, mono) # Mono JIT\n        CSHARPCILINTERPRETER_FLAGS=\"--debug\"\n    else\n      if test \"csc\" = \"$CSHARPCOMPILER\"; then\n          CSHARPCONVERTPATH=\"Tools/convertpath -w\"\n      fi\n    fi\n  fi\nelse\n  CSHARPCILINTERPRETER=\"$CSHARPBIN\"\nfi\n\n# Cygwin requires the Windows standard (Pascal) calling convention as it is a Windows executable and not a Cygwin built executable\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-msys*)\n    if test \"$GCC\" = yes; then\n        CSHARPDYNAMICLINKING=\"$GCC_MNO_CYGWIN -mthreads -Wl,--add-stdcall-alias\"\n        CSHARPCFLAGS=\"$GCC_MNO_CYGWIN -mthreads\"\n    else\n        CSHARPDYNAMICLINKING=\"\"\n        CSHARPCFLAGS=\"\"\n    fi ;;\n*)\n        CSHARPDYNAMICLINKING=\"\"\n        CSHARPCFLAGS=\"\"\n        ;;\nesac\n\n# CSharp on Windows platforms including Cygwin doesn't use libname.dll, rather name.dll when loading dlls\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-msys*) CSHARPLIBRARYPREFIX=\"\";;\n*)CSHARPLIBRARYPREFIX=\"lib\";;\nesac\n\n# C#/Mono on Mac OS X tweaks\ncase $host in\n*-*-darwin*)\n    CSHARPSO=\".so\"\n    ;;\n*)\n    CSHARPSO=$SO\n    ;;\nesac\nfi\n\nAC_SUBST(CSHARPCILINTERPRETER_FLAGS)\nAC_SUBST(CSHARPCILINTERPRETER)\nAC_SUBST(CSHARPCONVERTPATH)\nAC_SUBST(CSHARPCOMPILER)\nAC_SUBST(CSHARPDYNAMICLINKING)\nAC_SUBST(CSHARPLIBRARYPREFIX)\nAC_SUBST(CSHARPCFLAGS)\nAC_SUBST(CSHARPSO)\n\n#----------------------------------------------------------------\n# Look for D\n#----------------------------------------------------------------\n\nAC_ARG_WITH(d, AS_HELP_STRING([--without-d], [Disable D]), [with_d=\"$withval\"], [with_d=\"$alllang_default\"])\nAC_ARG_WITH(d2-compiler, [  --with-d2-compiler=path  Set location of D2 compiler (DMD compatible)],[D2COMPILERBIN=\"$withval\"], [D2COMPILERBIN=])\n\n\n# First, check for \"--without-d\" or \"--with-d=no\".\nif test x\"${with_d}\" = xno; then\n  AC_MSG_NOTICE([Disabling D])\n  D2COMPILER=\nelse\n\n  if test -z \"$D2COMPILERBIN\" ; then\n    AC_CHECK_PROGS(D2COMPILER, dmd ldmd2 ldc2 gdmd)\n  else\n    D2COMPILER=\"$D2COMPILERBIN\"\n  fi\n  if test -n \"$D2COMPILER\" ; then\n    old_ac_ext=$ac_ext\n    ac_ext=d\n    AC_MSG_CHECKING(whether the D2 compiler works)\n    cat > conftest.$ac_ext <<_ACEOF\nimport std.algorithm;\nvoid main() {\n}\n_ACEOF\n      rm -f conftest.out\n      AS_IF(\n        [$D2COMPILER conftest.$ac_ext -ofconftest.out 2>&AS_MESSAGE_LOG_FD && test ! -s conftest.err && test -s conftest.out],\n        [AC_MSG_RESULT([yes])],\n        [_AC_MSG_LOG_CONFTEST AC_MSG_RESULT([no])\n        D2COMPILER=]\n      )\n    rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext conftest.out\n    ac_ext=$old_ac_ext\n  fi\nfi\n\n# Do not prefix library file names with \"lib\" on Windows.\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-msys*) DLIBPREFIX=\"\";;\n*)DLIBPREFIX=\"lib\";;\nesac\n\nAC_SUBST(D2COMPILER)\nAC_SUBST(DLIBPREFIX)\n\n#----------------------------------------------------------------\n# Look for Go compilers\n#----------------------------------------------------------------\n\nAC_ARG_WITH(go, AS_HELP_STRING([--without-go], [Disable Go])\nAS_HELP_STRING([--with-go=path], [Set location of Go compiler]),[GOBIN=\"$withval\"], [GOBIN=\"$alllang_default\"])\n\nif test x\"${GOBIN}\" = xno; then\n  AC_MSG_NOTICE([Disabling Go])\n  GO=\n  GOGCC=false\n  GCCGO=\n  GOOPT=\n  GCCGOOPT=\n  GOVERSIONOPTION=\nelse\n\n  if test \"x$GOBIN\" = xyes; then\n    AC_CHECK_PROGS(GO, go)\n  else\n    GO=\"$GOBIN\"\n  fi\n\n  GOGCC=false\n  GCCGO=\n  GOOPT=\n  GCCGOOPT=\n  GOVERSIONOPTION=\n\n  if test -n \"$GO\" ; then\n    GOVERSIONOPTION=version\n    go_version=$($GO $GOVERSIONOPTION | sed -e 's/go version //')\n    AC_MSG_CHECKING([whether go version is too old])\n    case $go_version in\n    go1.[012]*)\n      AC_MSG_RESULT([yes - minimum version is 1.3])\n      GO=\n      ;;\n    *)\n      AC_MSG_RESULT([no])\n      ;;\n    esac\n  fi\n\n  AC_CHECK_PROGS(GCCGO, gccgo)\n\n  if test -n \"$GCCGO\" ; then\n    if $GCCGO --help 2>/dev/null | grep gccgo >/dev/null 2>&1 ; then\n      AC_MSG_CHECKING([whether gccgo version is too old])\n      go_version=[`$GO $GOVERSIONOPTION | sed -n '1p' | sed -e 's/^.* \\([0-9.]*\\) *$/\\1/' -e 's/[.]//g'`]\n      if test \"x$go_version\" = x; then\n        AC_MSG_RESULT([could not determine gccgo version])\n        GCCGO=\n      elif test \"$go_version\" -lt 470; then\n        AC_MSG_RESULT([yes - minimum version is 4.7.0])\n        GCCGO=\n      else\n        AC_MSG_RESULT([no])\n        if test \"$go_version\" -lt 480; then\n          GCCGOOPT=\"-intgosize 32\"\n        fi\n      fi\n    fi\n  fi\nfi\n\nAC_SUBST(GOGCC)\nAC_SUBST(GCCGO)\nAC_SUBST(GO)\nAC_SUBST(GOC)\nAC_SUBST(GO1)\nAC_SUBST(GO12)\nAC_SUBST(GO13)\nAC_SUBST(GO15)\nAC_SUBST(GOOPT)\nAC_SUBST(GCCGOOPT)\nAC_SUBST(GOVERSIONOPTION)\n\n#----------------------------------------------------------------\n# Look for Guile\n#----------------------------------------------------------------\n\nGUILE=\nGUILE_CFLAGS=\nGUILE_LIBS=\n\nAC_ARG_WITH(guile-config, AS_HELP_STRING([--without-guile], [Disable Guile])\nAS_HELP_STRING([--with-guile-config=path], [Set location of guile-config]),[ GUILE_CONFIG=\"$withval\"], [GUILE_CONFIG=])\nAC_ARG_WITH(guile,[  --with-guile=path       Set location of Guile executable],[\n\tGUILE=\"$withval\"], [GUILE=\"$alllang_default\"])\nAC_ARG_WITH(guile-cflags,[  --with-guile-cflags=cflags   Set cflags required to compile against Guile],[\n\tGUILE_CFLAGS=\"$withval\"])\nAC_ARG_WITH(guile-libs,[  --with-guile-libs=ldflags    Set ldflags needed to link with Guile],[\n\tGUILE_LIBS=\"$withval\"])\n\n# First, check for \"--without-guile\" or \"--with-guile=no\".\nif test x\"${GUILE}\" = xno; then\n  AC_MSG_NOTICE([Disabling Guile])\nelse\n  if test -z \"$GUILE_CONFIG\" ; then\n    AC_PATH_PROG(GUILE_CONFIG, guile-config)\n  fi\n  if test -n \"$GUILE_CONFIG\" ; then\n    if test x\"$GUILE\" = xyes; then\n      AC_MSG_CHECKING([for guile executable])\n      # Try extracting it via guile-config first. If it's defined there it's the most reliable result\n      GUILE=\"`$GUILE_CONFIG info guile 2>/dev/null`\"\n      if test -n \"$GUILE\";  then\n        AC_MSG_RESULT([$GUILE])\n      else\n        AC_MSG_RESULT([not found via guile-config - constructing path])\n        AC_MSG_CHECKING([for guile bindir])\n        guile_bindir=\"`$GUILE_CONFIG info bindir`\"\n        AC_MSG_RESULT([$guile_bindir])\n        GUILE=\"$guile_bindir/guile\"\n      fi\n      if ! test -f \"$GUILE\" ; then\n        GUILE=\n        AC_PATH_PROG(GUILE, guile)\n      fi\n      if test -z \"$GUILE\" ; then\n        AC_MSG_WARN([no suitable guile executable found. Disabling Guile])\n      fi\n    fi\n\n    if test -n \"$GUILE\" ; then\n      AC_MSG_CHECKING([for guile version])\n      guile_version=`$GUILE -c '(display (effective-version))'`\n      AC_MSG_RESULT([$guile_version])\n      AC_MSG_CHECKING([for guile version >= 1.8])\n      guile_good_version=`$GUILE -c '(if (>= (string->number (effective-version)) 1.8) (display \"yes\") (display \"no\"))'`\n      AC_MSG_RESULT([$guile_good_version])\n      if test x\"$guile_good_version\" != xyes ; then\n        AC_MSG_WARN([at least guile version 1.8 is required. Disabling Guile])\n        GUILE=\n      fi\n    fi\n\n    if test -n \"$GUILE\" ; then\n      # Test if guile-config and guile versions match. They should.\n      gc_version=\"`$GUILE_CONFIG --version 2>&1 | sed '1 s/.* //;q'`\"\n      g_version=\"`$GUILE --version | sed '1 s/.* //;q'`\"\n      if test \"$gc_version\" != \"$g_version\"; then\n        AC_MSG_WARN([different versions reported by $GUILE_CONFIG ($gc_version) and $GUILE ($g_version). Disabling Guile])\n        GUILE=\n      fi\n    fi\n\n    if test -n \"$GUILE\" ; then\n      if test -z \"$GUILE_CFLAGS\" ; then\n        AC_MSG_CHECKING([for guile compile flags])\n        GUILE_CFLAGS=\"`$GUILE_CONFIG compile`\" # Note that this can sometimes be empty\n        AC_MSG_RESULT([$GUILE_CFLAGS])\n      fi\n\n      if test -z \"$GUILE_LIBS\" ; then\n        AC_MSG_CHECKING([for guile link flags])\n        GUILE_LIBS=\"`$GUILE_CONFIG link`\"\n        AC_MSG_RESULT([$GUILE_LIBS])\n      fi\n    fi\n  fi\nfi\n\nAC_SUBST(GUILE)\nAC_SUBST(GUILE_CFLAGS)\nAC_SUBST(GUILE_LIBS)\n\n#----------------------------------------------------------------\n# Look for java\n#----------------------------------------------------------------\n\nAC_ARG_WITH(java, AS_HELP_STRING([--without-java], [Disable Java])\nAS_HELP_STRING([--with-java=path], [Set location of java executable]),[JAVABIN=\"$withval\"], [JAVABIN=\"$alllang_default\"])\nAC_ARG_WITH(javac, [  --with-javac=path       Set location of javac executable],[JAVACBIN=\"$withval\"], [JAVACBIN=])\n\n# First, check for \"--without-java\" or \"--with-java=no\".\nif test x\"${JAVABIN}\" = xno; then\nAC_MSG_NOTICE([Disabling Java])\nJAVA=\nelse\n\ndnl Detect everything we need for Java: java for running Java tests, javac for\ndnl compiling them and C headers for compiling C code.\ndnl\ndnl If JAVA_HOME is defined and contains everything needed, as it's supposed to,\ndnl just use it. Otherwise try to locate the necessary files in the path.\ncase $host in\n  *-*-cygwin*)\n    dnl Ensure that JAVA_HOME is in the form we can use, it's typically set to Windows path by the installer.\n    if test -n \"$JAVA_HOME\"; then\n      JAVA_HOME=`cygpath --mixed \"$JAVA_HOME\"`\n    fi\n    dnl Java uses semicolons and not colons as separators in its classes search path under Windows.\n    JAVA_CLASSPATH_SEP=\";\"\n    ;;\n  *-*-mingw*)\n    if test -n \"$JAVA_HOME\"; then\n      JAVA_HOME=`${srcdir}/Tools/convertpath -u \"$JAVA_HOME\"`\n    fi\n    JAVA_CLASSPATH_SEP=\";\"\n    ;;\n  *-*-darwin*)\n    dnl Under OS X JAVA_HOME is not set by default, try to use the system default JRE.\n    if test -z \"$JAVA_HOME\" -a -x /usr/libexec/java_home; then\n      JAVA_HOME=`/usr/libexec/java_home`\n    fi\n    dnl The JAVA_HOME doesn't contain the JDK headers though, but they seem to\n    dnl always be in the same location, according to Apple JNI documentation.\n    JAVA_OSX_STD_INCDIR=\"/System/Library/Frameworks/JavaVM.framework/Headers\"\n    if test -r \"$JAVA_OSX_STD_INCDIR/jni.h\"; then\n      JAVA_HOME_INCDIR=$JAVA_OSX_STD_INCDIR\n    fi\n    JAVA_CLASSPATH_SEP=\":\"\n    ;;\n  *)\n    dnl Assume generic Unix.\n    JAVA_CLASSPATH_SEP=\":\"\n    ;;\nesac\n\nAC_MSG_CHECKING(for java JDK)\nif test -n \"$JAVA_HOME\"; then\n  dnl Don't complain about missing executables/headers if they had been\n  dnl explicitly overridden from the command line, but otherwise verify that we\n  dnl have everything we need.\n  java_home_ok=1\n  if test -z \"$JAVABIN\" -a ! -x \"$JAVA_HOME/bin/java\"; then\n    AC_MSG_WARN([No java executable under JAVA_HOME.])\n    java_home_ok=0\n  fi\n  if test -z \"$JAVACBIN\" -a ! -x \"$JAVA_HOME/bin/javac\"; then\n    AC_MSG_WARN([No javac executable under JAVA_HOME.])\n    java_home_ok=0\n  fi\n\n  dnl By default the headers are under JAVA_HOME/include, but OS X is special\n  dnl and defines JAVA_HOME_INCDIR differently above.\n  if test -z \"$JAVA_HOME_INCDIR\"; then\n    JAVA_HOME_INCDIR=\"$JAVA_HOME/include\"\n  fi\n  if test -z \"$JAVAINCDIR\" -a ! -r \"$JAVA_HOME_INCDIR/jni.h\"; then\n    AC_MSG_WARN([No java headers under JAVA_HOME (does it point to a JDK and not just JRE?).])\n    java_home_ok=0\n  fi\n  if test \"$java_home_ok\" = 1; then\n    AC_MSG_RESULT([found (in $JAVA_HOME)])\n  else\n    AC_MSG_RESULT(no)\n    AC_MSG_WARN([JAVA_HOME ($JAVA_HOME) is defined but does not point to a complete JDK installation, ignoring it.])\n    JAVA_HOME=\n  fi\nelse\n  AC_MSG_RESULT([no (JAVA_HOME is not defined)])\nfi\n\nif test \"x$JAVABIN\" = xyes; then\n  if test -n \"$JAVA_HOME\"; then\n    JAVA=\"$JAVA_HOME/bin/java\"\n  else\n    AC_CHECK_PROGS(JAVA, java kaffe guavac)\n  fi\nelse\n  JAVA=\"$JAVABIN\"\nfi\n\nif test -z \"$JAVACBIN\"; then\n  if test -n \"$JAVA_HOME\"; then\n    JAVAC=\"$JAVA_HOME/bin/javac\"\n  else\n    AC_CHECK_PROGS(JAVAC, javac)\n  fi\nelse\n  JAVAC=\"$JAVACBIN\"\nfi\n\n# Check Java version: we require Java 9 or later for Doxygen tests.\nif test -n \"$JAVAC\"; then\n    AC_MSG_CHECKING(if java version is 9 or greater)\n    javac_version=`\"$JAVAC\" -version 2>&1`\n    java_version_num=`echo $javac_version | sed -n 's/^javac //p'`\n    if test -z \"$java_version_num\"; then\n        AC_MSG_WARN([unknown format for Java version returned by \"$JAVAC\" ($javac_version)])\n        JAVA_SKIP_DOXYGEN_TEST_CASES=1\n        AC_MSG_RESULT(unknown)\n    else\n        dnl Until Java 8 version number was in format \"1.x\", starting from\n        dnl Java 9 it's just \"x\".\n        case $java_version_num in\n            1.*)\n                JAVA_SKIP_DOXYGEN_TEST_CASES=1\n                AC_MSG_RESULT([no, disabling Doxygen tests])\n                ;;\n\n            *)\n                AC_MSG_RESULT(yes)\n                ;;\n        esac\n    fi\n\n    AC_SUBST(JAVA_SKIP_DOXYGEN_TEST_CASES)\nfi\n\nAC_MSG_CHECKING(for java include file jni.h)\nAC_ARG_WITH(javaincl, [  --with-javaincl=path    Set location of Java include directory], [JAVAINCDIR=\"$withval\"], [JAVAINCDIR=])\n\nJAVAINC=\"\"\nif test -z \"$JAVAINCDIR\" ; then\n  if test -n \"$JAVA_HOME\"; then\n    JAVAINCDIR=\"$JAVA_HOME_INCDIR\"\n    JAVAINC=-I\\\"$JAVAINCDIR\\\"\n  else\n    JAVAINCDIR=\"/usr/j2sdk*/include /usr/local/j2sdk*/include /usr/jdk*/include /usr/local/jdk*/include /opt/j2sdk*/include /opt/jdk*/include /usr/java/include /usr/java/j2sdk*/include /usr/java/jdk*/include /usr/local/java/include /opt/java/include /usr/include/java /usr/local/include/java /usr/lib/java/include /usr/lib/jvm/java*/include /usr/lib64/jvm/java*/include /usr/include/kaffe /usr/local/include/kaffe /usr/include\"\n\n    # Add in default installation directory on Windows for Cygwin\n    case $host in\n    *-*-cygwin* | *-*-mingw*) JAVAINCDIR=\"c:/Program*Files*/Java/jdk*/include d:/Program*Files*/Java/jdk*/include c:/j2sdk*/include d:/j2sdk*/include c:/jdk*/include d:/jdk*/include $JAVAINCDIR\";;\n    *-*-darwin*) JAVAINCDIR=\"$JAVA_OSX_STD_INCDIR $JAVAINCDIR\";;\n    *);;\n    esac\n\n    for d in $JAVAINCDIR ; do\n      if test -r \"$d/jni.h\" ; then\n\tJAVAINCDIR=$d\n\tJAVAINC=-I\\\"$d\\\"\n\tJAVA_HOME_MAYBE=\"`dirname $d`\"\n\tbreak\n      fi\n    done\n  fi\nelse\n  if test -r \"$JAVAINCDIR/jni.h\" ; then\n    JAVAINC=-I\\\"$JAVAINCDIR\\\"\n  fi\nfi\n\nif test \"$JAVAINC\" = \"\" ; then\n  AC_MSG_RESULT(not found)\nelse\n  AC_MSG_RESULT($JAVAINC)\n  # now look for <arch>/jni_md.h\n  AC_MSG_CHECKING(for java include file jni_md.h)\n  JAVAMDDIR=`find \"$JAVAINCDIR\" -follow -name jni_md.h -print`\n  if test \"$JAVAMDDIR\" = \"\" ; then\n    AC_MSG_RESULT(not found)\n  else\n    JAVAMDDIR=-I\\\"`dirname \"$JAVAMDDIR\" | tail -1`\\\"\n    AC_MSG_RESULT($JAVAMDDIR)\n    JAVAINC=\"${JAVAINC} ${JAVAMDDIR}\"\n  fi\nfi\n\n# Auto-detecting JAVA_HOME is not so easy, below will only work up to and including jdk8\nif test -z \"$JAVA_HOME\" && test -n \"$JAVA_HOME_MAYBE\" ; then\n  AC_MSG_CHECKING(for java jdk from jni include paths)\n  if test -r \"$JAVA_HOME_MAYBE/lib/tools.jar\" ; then\n    JAVA_HOME=$JAVA_HOME_MAYBE\n    AC_MSG_RESULT([$JAVA_HOME])\n  else\n    AC_MSG_RESULT(not found)\n  fi\nfi\n\ncase $host in\n*-*-cygwin*)\n        # TODO: Only use this flag if the compiler supports it, later versions of gcc no longer have it\n        GCC_MNO_CYGWIN=\" -mno-cygwin\"\n        ;;\n*)\n        GCC_MNO_CYGWIN=\"\"\n        ;;\nesac\n\n# java.exe on Cygwin requires the Windows standard (Pascal) calling convention as it is a normal Windows executable and not a Cygwin built executable\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-msys*)\n    if test \"$GCC\" = yes; then\n        JAVADYNAMICLINKING=\"$GCC_MNO_CYGWIN -mthreads -Wl,--add-stdcall-alias\"\n        JAVACFLAGS=\"$GCC_MNO_CYGWIN -mthreads\"\n    else\n        JAVADYNAMICLINKING=\"\"\n        JAVACFLAGS=\"\"\n    fi ;;\n*-*-darwin*)\n        JAVADYNAMICLINKING=\"-dynamiclib -framework JavaVM\"\n        JAVACFLAGS=\"\"\n        ;;\n*)\n        JAVADYNAMICLINKING=\"\"\n        JAVACFLAGS=\"\"\n        ;;\nesac\n\n# Java on Windows platforms including Cygwin doesn't use libname.dll, rather name.dll when loading dlls\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-msys*) JAVALIBRARYPREFIX=\"\";;\n*)JAVALIBRARYPREFIX=\"lib\";;\nesac\n\n# Java on Mac OS X tweaks\ncase $host in\n*-*-darwin*)\n    JAVASO=\".jnilib\"\n    JAVALDSHARED='$(CC)'\n    JAVACXXSHARED='$(CXX)'\n    ;;\n*)\n    JAVASO=$SO\n    JAVALDSHARED='$(LDSHARED)'\n    JAVACXXSHARED='$(CXXSHARED)'\n    ;;\nesac\nfi\n\n# Quote for spaces in path to executables\nif test -n \"$JAVA\"; then\n  JAVA=\\\"$JAVA\\\"\nfi\nif test -n \"$JAVAC\"; then\n  JAVAC=\\\"$JAVAC\\\"\nfi\n\n# Turned off due to spurious warnings in later versions of openjdk-1.8\n# JAVAFLAGS=-Xcheck:jni\n\nAC_SUBST(JAVA)\nAC_SUBST(JAVAC)\nAC_SUBST(JAVAINC)\nAC_SUBST(JAVA_CLASSPATH_SEP)\nAC_SUBST(JAVADYNAMICLINKING)\nAC_SUBST(JAVALIBRARYPREFIX)\nAC_SUBST(JAVASO)\nAC_SUBST(JAVALDSHARED)\nAC_SUBST(JAVACXXSHARED)\nAC_SUBST(JAVAFLAGS)\nAC_SUBST(JAVACFLAGS)\n\n#----------------------------------------------------------------\n# Look for Javascript\n#----------------------------------------------------------------\nAC_ARG_WITH(javascript, AS_HELP_STRING([--without-javascript], [Disable Javascript]), [with_javascript=\"$withval\"], [with_javascript=\"$alllang_default\"])\n\n# First, check for \"--without-javascript\" or \"--with-javascript=no\".\nif test x\"${with_javascript}\" = xno; then\n  AC_MSG_NOTICE([Disabling Javascript])\n  JAVASCRIPT=\nelse\n  JAVASCRIPT=1\n\n  #----------------------------------------------------------------\n  # General Javascript settings shared by JSC and V8\n  #----------------------------------------------------------------\n\n  case $host in\n  *-*-darwin*)\n    JSSO=\".dylib\"\n    # HACK: didn't manage to get dynamic module loading working with a g++ compiled interpreter\n    JSINTERPRETERCXX='c++'\n    JSINTERPRETERLINKFLAGS='-g -Wl,-search_paths_first -Wl,-headerpad_max_install_names'\n    ;;\n  *)\n    JSSO=$SO\n    JSINTERPRETERCXX='$(CXX)'\n    JSINTERPRETERLINKFLAGS='-ldl'\n    ;;\n  esac\n\n  #----------------------------------------------------------------\n  # Look for Node.js which is the default Javascript engine\n  #----------------------------------------------------------------\n\n  AC_CHECK_PROGS(NODEJS, [node nodejs])\n\n  if test -n \"$NODEJS\"; then\n    # node-gyp needed to run the test-suite/examples\n    AC_CHECK_PROGS(NODEGYP, node-gyp)\n    if test -z \"$NODEGYP\"; then\n      NODEJS=\n    fi\n    AC_CHECK_PROGS(NODENPM, npm)\n    JSNAPIENABLED=\n    if test -n \"$NODENPM\"; then\n      AC_MSG_CHECKING([for Node-API (napi) header directory])\n      NODENPM_PREFIX=$($NODENPM config get prefix)\n      if test -n \"$NODENPM_PREFIX\"; then\n        NODENAPI_DIR=$NODENPM_PREFIX/lib/node_modules/node-addon-api\n        if test -f \"$NODENAPI_DIR/napi.h\"; then\n          JSNAPIENABLED=1\n          AC_SUBST(NODENAPI_DIR)\n        fi\n      fi\n      if test -n \"$JSNAPIENABLED\"; then\n        AC_MSG_RESULT([$NODENAPI_DIR])\n      else\n        AC_MSG_RESULT([not found])\n      fi\n    fi\n    AC_SUBST(JSNAPIENABLED)\n  fi\n\n  #----------------------------------------------------------------\n  # Look for JavaScriptCore (Webkit) settings\n  #----------------------------------------------------------------\n\n  # check for include files\n  AC_ARG_WITH(jscoreinc, [  --with-jscoreinc=path      Set location of JavaScriptCore/Webkit include directory], [JSCOREINCDIR=\"$withval\"], [JSCOREINCDIR=])\n  # check for JavaScriptCore/Webkit libraries\n  AC_ARG_WITH(jscorelib,[  --with-jscorelib=path      Set location of the JavaScriptCore/Webkit library directory],[JSCORELIB=\"-L$withval\"], [JSCORELIB=])\n\n  JSCOREVERSION=\n\n  if test -z \"$JSCOREINCDIR\" -a -n \"$JSCORELIB\"; then\n    AC_MSG_ERROR([Either both or none of --with-jcoreinc --with-jscorelib should be specified])\n  elif test -n \"$JSCOREINCDIR\" -a -z \"$JSCORELIB\"; then\n    AC_MSG_ERROR([Either both or none of --with-jcoreinc --with-jscorelib should be specified])\n  elif test -z \"$JSCOREINCDIR\" -a -z \"$JSCORELIB\"; then\n    if test -z \"$JSCORELIB\" -a -n \"$PKG_CONFIG \"; then\n      AC_MSG_CHECKING(for JavaScriptCore/Webkit)\n      if $PKG_CONFIG  javascriptcoregtk-4.1 2>/dev/null ; then\n        JSCORELIB=`$PKG_CONFIG  --libs javascriptcoregtk-4.1`\n        JSCOREINC=`$PKG_CONFIG  --cflags-only-I javascriptcoregtk-4.1`\n        JSCOREVERSION=`$PKG_CONFIG  --modversion javascriptcoregtk-4.1`\n      elif $PKG_CONFIG  javascriptcoregtk-4.0 2>/dev/null ; then\n        JSCORELIB=`$PKG_CONFIG  --libs javascriptcoregtk-4.0`\n        JSCOREINC=`$PKG_CONFIG  --cflags-only-I javascriptcoregtk-4.0`\n        JSCOREVERSION=`$PKG_CONFIG  --modversion javascriptcoregtk-4.0`\n      elif $PKG_CONFIG  javascriptcoregtk-3.0 2>/dev/null ; then\n        JSCORELIB=`$PKG_CONFIG  --libs javascriptcoregtk-3.0`\n        JSCOREINC=`$PKG_CONFIG  --cflags-only-I javascriptcoregtk-3.0`\n        JSCOREVERSION=`$PKG_CONFIG  --modversion javascriptcoregtk-3.0`\n      elif $PKG_CONFIG  javascriptcoregtk-1.0 2>/dev/null ; then\n        JSCORELIB=`$PKG_CONFIG  --libs javascriptcoregtk-1.0`\n        JSCOREVERSION=`$PKG_CONFIG  --modversion javascriptcoregtk-1.0`\n      fi\n      if test -z \"$JSCORELIB\"; then\n        AC_MSG_RESULT(not found)\n        JSCENABLED=\n      else\n        AC_MSG_RESULT([version $JSCOREVERSION])\n        AC_MSG_CHECKING(for JavaScriptCore/Webkit include flags)\n        AC_MSG_RESULT([$JSCOREINC])\n        AC_MSG_CHECKING(for JavaScriptCore/Webkit link flags)\n        AC_MSG_RESULT([$JSCORELIB])\n        JSCOREDYNAMICLINKING=\"$JSCORELIB\"\n        JSCENABLED=1\n      fi\n    fi\n  else\n    AC_MSG_CHECKING(for JavaScriptCore/Webkit include flags)\n    JSCOREINC=-I\\\"$JSCOREINCDIR\\\"\n    AC_MSG_RESULT([$JSCOREINC])\n    AC_MSG_CHECKING(for JavaScriptCore/Webkit link flags)\n    AC_MSG_RESULT([$JSCORELIB])\n    JSCOREDYNAMICLINKING=\"$JSCORELIB\"\n    JSCENABLED=1\n  fi\n\n  #----------------------------------------------------------------\n  # Look for V8 settings (JSV8INCDIR, JSV8DYNAMICLINKING)\n  #----------------------------------------------------------------\n\n  # check for include files\n  AC_MSG_CHECKING(for V8 Javascript v8.h)\n  AC_ARG_WITH(jsv8inc, [  --with-jsv8inc=path     Set location of Javascript v8 include directory], [JSV8INCDIR=\"$withval\"], [JSV8INCDIR=])\n\n  # if include dir is not specified we try to find it\n  if test -z \"$JSV8INCDIR\"; then\n    # Add in default directory for v8 headers for Linux\n    case $host in\n    *-*-linux*)\n      JSV8INCDIR=\"/usr/include/v8 /usr/include /usr/local/include/v8 /usr/local/include\"\n      ;;\n    esac\n  fi\n\n  for d in $JSV8INCDIR ; do\n    if test -r \"$d/v8.h\" ; then\n      JSV8INCDIR=$d\n      JSV8INC=-I$d\n      break\n    fi\n  done\n\n  JSV8DYNAMICLINKING=\n  JSV8ENABLED=\n  JSV8LIB=\n  if test \"$JSV8INC\" = \"\" ; then\n    AC_MSG_RESULT(not found)\n  else\n    AC_MSG_RESULT($JSV8INCDIR)\n\n    # check for V8 library\n    AC_MSG_CHECKING(for V8 Javascript library)\n    AC_ARG_WITH(jsv8lib,[  --with-jsv8lib=path     Set location of V8 Javascript library directory],[JSV8LIBDIR=-L\"$withval\"], [JSV8LIBDIR=])\n\n    AC_LANG_PUSH([C++])\n    save_CPPFLAGS=$CPPFLAGS\n    save_LDFLAGS=$LDFLAGS\n    save_LIBS=$LIBS\n    CPPFLAGS=$JSV8INC\n    LDFLAGS=$JSV8LIBDIR\n    LIBS=-lv8\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <v8.h>], [v8::V8::Initialize();])], [\n\tJSV8ENABLED=1\n\tJSV8LIB=$JSV8LIBDIR${JSV8LIBDIR:+ }$LIBS\n\tAC_MSG_RESULT([$JSV8LIB])\n      ], [\n\tAC_MSG_RESULT(not found)\n      ])\n    CPPFLAGS=$save_CPPFLAGS\n    LDFLAGS=$save_LDFLAGS\n    LIBS=$save_LIBS\n    AC_LANG_POP([C++])\n\n    # linking options\n    case $host in\n    *-*-darwin*)\n      JSV8DYNAMICLINKING=\"$JSV8LIB\"\n      ;;\n    *-*-linux*)\n      JSV8DYNAMICLINKING=\"$JSV8LIB\"\n      ;;\n    esac\n  fi\n\nfi\n\nAC_SUBST(JSINTERPRETERCXX)\nAC_SUBST(JSINTERPRETERLINKFLAGS)\n\nAC_SUBST(JSCOREINC)\nAC_SUBST(JSCOREDYNAMICLINKING)\nAC_SUBST(JSCOREVERSION)\nAC_SUBST(JSV8INC)\nAC_SUBST(JSV8DYNAMICLINKING)\n\nAC_SUBST(JSCENABLED)\nAC_SUBST(JSV8ENABLED)\n\nAC_SUBST(NODEJS)\nAC_SUBST(NODEGYP)\n\n#----------------------------------------------------------------\n# Look for Lua\n#----------------------------------------------------------------\n\nLUABIN=\nLUAINCLUDE=\nLUALIB=\nLUADYNAMICLOADLIB=\nLUAFLAGS=\nLUALINK=\n# note: if LUABIN is empty then lua tests will not be done\n# LUABIN will be cleared if certain dependencies cannot be found\n\nAC_ARG_WITH(lua, AS_HELP_STRING([--without-lua], [Disable Lua])\nAS_HELP_STRING([--with-lua=path], [Set location of Lua executable]),[ LUABIN=\"$withval\"], [LUABIN=\"$alllang_default\"])\nAC_ARG_WITH(luaincl,[  --with-luaincl=path     Set location of Lua include directory],[\n\tLUAINCLUDE=\"$withval\"], [LUAINCLUDE=])\nAC_ARG_WITH(lualib,[  --with-lualib=path      Set location of Lua library directory],[\n\tLUALIB=\"$withval\"], [LUALIB=])\n\n# First, check for \"--without-lua\" or \"--with-lua=no\".\nif test x\"${LUABIN}\" = xno; then\nAC_MSG_NOTICE([Disabling Lua])\nelse\n\n# can we find lua?\nif test \"x$LUABIN\" = xyes; then\n   # We look for a versioned Lua binary first, as there can be\n   # multiple versions of Lua installed on some systems (like Debian).\n   AC_PATH_PROGS(LUABIN, [lua5.4 lua5.3 lua5.2 lua5.1 lua])\nfi\n\n# check version: we need Lua 5.x\nif test \"$LUABIN\"; then\n  AC_MSG_CHECKING(Lua version)\n  [LUA_VERSION=`$LUABIN -e 'print(string.match(_VERSION, \"%d+[.]%d+\"))'`]\n  # For 5.0 and 5.1 header and libraries may be named using 50 or 51.\n  LUA_VERSION_NO_DOTS=\n  if test -n \"$LUA_VERSION\" ; then\n    AC_MSG_RESULT([Lua $LUA_VERSION.x])\n  else\n    AC_MSG_RESULT([failed])\n  fi\n  case $LUA_VERSION in\n    5.0) LUA_VERSION_NO_DOTS=50 ;;\n    5.1) LUA_VERSION_NO_DOTS=51 ;;\n    5.*) ;;\n    *)\n      AC_MSG_WARN([Not Lua 5.x, SWIG does not support this version of Lua])\n      LUABIN=\"\"\n      ;;\n  esac\nfi\n\nif test \"$LUABIN\"; then\n  AC_MSG_CHECKING(whether Lua dynamic loading is enabled)\n  # using Lua to check Lua\n  # lua 5.0 & 5.1 have different fn names\n  if test \"$LUA_VERSION\" = \"5.0\"; then\n    LUADYNAMICLOADLIB=`$LUABIN -e '_,_,c=loadlib(\"no_such_lib\",\"\") if c~=\"absent\" then print \"1\" end'`\n  else\n    LUADYNAMICLOADLIB=`$LUABIN -e '_,_,c=package.loadlib(\"no_such_lib\",\"\") if c~=\"absent\" then print \"1\" end'`\n  fi\n\n  if test -z \"$LUADYNAMICLOADLIB\"; then\n    AC_MSG_RESULT(no)\n  else\n    AC_MSG_RESULT(yes)\n  fi\n\n  # look for the header files & set LUAFLAGS accordingly\n  # will clear LUABIN if not present\n  if test -n \"$LUAINCLUDE\"; then\n    AC_CHECK_FILE($LUAINCLUDE/lua.h,[LUAFLAGS=\"-I$LUAINCLUDE\"],[LUABIN=])\n  else\n    LUA_OK=\"1\"\n    CFLAGS_SAVED=$CFLAGS\n    CFLAGS= # Use empty CFLAGS to avoid failure: \"present but cannot be compiled\"\n    AC_CHECK_HEADER([lua.h],[LUAFLAGS=\"\"],[LUA_OK=\"\"])\n    CFLAGS=$CFLAGS_SAVED\n    # if we didn't get it, going to have to look elsewhere (the hard way)\n    if test -z \"$LUA_OK\"; then\n      AC_MSG_CHECKING(for lua.h in other locations)\n      # note: Debian/Ubuntu seem to like /usr/include/lua5.1/lua.h\n      # The ordering of the include directories to search should match\n      # the ordering of libraries to search in the library test below.\n      inc=/usr/include\n      incloc=/usr/local/include\n      dirs=\"$inc/lua$LUA_VERSION\"\n      test -z \"$LUA_VERSION_NO_DOTS\" || dirs=\"$dirs $inc/lua$LUA_VERSION_NO_DOTS\"\n      dirs=\"$dirs $incloc/lua$LUA_VERSION\"\n      test -z \"$LUA_VERSION_NO_DOTS\" || dirs=\"$dirs $incloc/lua$LUA_VERSION_NO_DOTS\"\n      dirs=\"$dirs $incloc\"\n      for i in $dirs; do\n        #echo \"$i\"\n        if test -r $i/lua.h; then\n          AC_MSG_RESULT($i/lua.h)\n          LUAFLAGS=\"-I$i\"\n          break\n        fi\n      done\n      if test -z \"$LUAFLAGS\"; then\n        AC_MSG_RESULT(not found)\n        LUABIN=\"\" # clear the bin\n      fi\n    fi\n  fi\n\n  # look for the library files & set LUALINK accordingly\n  # will clear LUABIN if not present\n  lua_save_LIBS=$LIBS # the code seems to disrupt LIBS, so saving\n\n  if test -n \"$LUALIB\"; then\n    AC_CHECK_FILE($LUALIB/liblua.a,[LUALINK=\"-L$LUALIB -llua\"],[LUABIN=])\n  else\n    libs=\"lua lua$LUA_VERSION\"\n    test -z \"$LUA_VERSION_NO_DOTS\" || libs=\"$libs lua$LUA_VERSION_NO_DOTS\"\n    AC_SEARCH_LIBS(lua_close, [$libs], [LUALINK=\"-l$ac_lib\"],[LUABIN=])\n  fi\n\n  # adding lualib for lua 5.0\n  if test \"$LUA_VERSION\" = \"5.0\"; then\n    LUALINK=\"$LUALINK -llualib\"\n  fi\n  LUALINK=\"$LUALINK -pthread\"\n\n  LIBS=$lua_save_LIBS\t# restore LIBS\nfi\n\nfi # if not disabled\n\nAC_SUBST(LUADYNAMICLINKING)\nAC_SUBST(LUAFLAGS)\nAC_SUBST(LUALINK)\nAC_SUBST(LUABIN)\n\n#----------------------------------------------------------------\n# Look for MzScheme\n#----------------------------------------------------------------\n\nAC_ARG_WITH(mzscheme, AS_HELP_STRING([--without-mzscheme], [Disable MzScheme])\nAS_HELP_STRING([--with-mzscheme=path], [Set location of MzScheme executable]),[ MZSCHEMEBIN=\"$withval\"], [MZSCHEMEBIN=\"$alllang_default\"])\nAC_ARG_WITH(mzc, AS_HELP_STRING([--with-mzc=path], [Set location of MzScheme's mzc]), [ MZCBIN=\"$withval\"], [MZCBIN=])\n\n# First, check for \"--without-mzscheme\" or \"--with-mzscheme=no\".\nif test x\"${MZSCHEMEBIN}\" = xno; then\n  AC_MSG_NOTICE([Disabling MzScheme])\n  MZC=\nelse\n  if test \"x$MZSCHEMEBIN\" = xyes; then\n     AC_PATH_PROG(MZSCHEME, mzscheme)\n  else\n     MZSCHEME=\"$MZSCHEMEBIN\"\n  fi\n\n  if test -z \"$MZCBIN\"; then\n     AC_PATH_PROG(MZC, mzc)\n  fi\n\n  if test -n \"$MZSCHEME\"; then\n    AC_MSG_CHECKING(for MzScheme dynext object)\n    MZDYNOBJ=`$MZSCHEME --eval '(begin (require dynext/link) (with-handlers (((lambda args #t) (lambda args #f))) (for-each (lambda (x) (printf \"~a\" x)) (expand-for-link-variant (current-standard-link-libraries)))))' 2>/dev/null`\n    if test -f \"$MZDYNOBJ\"; then\n      :\n    else\n      # older versions (3.72 approx and earlier)\n      MZDYNOBJ=`$MZSCHEME --mute-banner --version --eval '(begin (require (lib \"link.ss\" \"dynext\")) (with-handlers (((lambda args #t) (lambda args #f))) (for-each (lambda (x) (display x) (display \" \")) ((current-make-standard-link-libraries)))) (with-handlers (((lambda args #t) (lambda args #f))) (for-each (lambda (x) (display x)) (expand-for-link-variant (current-standard-link-libraries)))))' 2>/dev/null`\n    fi\n    if test -f \"$MZDYNOBJ\"; then\n      AC_MSG_RESULT($MZDYNOBJ)\n    else\n      AC_MSG_RESULT(not found)\n      MZDYNOBJ=\"\"\n    fi\n  fi\nfi\nAC_SUBST(MZDYNOBJ)\n\n#----------------------------------------------------------------\n# Look for OCaml\n#----------------------------------------------------------------\n\nAC_ARG_WITH(ocaml, AS_HELP_STRING([--without-ocaml], [Disable OCaml]), [with_ocaml=\"$withval\"], [with_ocaml=\"$alllang_default\"])\nAC_ARG_WITH(ocamlc,[  --with-ocamlc=path      Set location of ocamlc executable],[ OCAMLC=\"$withval\"], [OCAMLC=])\nAC_ARG_WITH(ocamldlgen,[  --with-ocamldlgen=path  Set location of ocamldlgen],[ OCAMLDLGEN=\"$withval\" ], [OCAMLDLGEN=])\nAC_ARG_WITH(ocamlfind,[  --with-ocamlfind=path   Set location of ocamlfind],[OCAMLFIND=\"$withval\"],[OCAMLFIND=])\nAC_ARG_WITH(ocamlmktop,[  --with-ocamlmktop=path  Set location of ocamlmktop executable],[ OCAMLMKTOP=\"$withval\"], [OCAMLMKTOP=])\nAC_ARG_WITH(camlp4,[  --with-camlp4=path  Set location of camlp4 executable],[ CAMLP4=\"$withval\"], [CAMLP4=])\n\n# First, check for \"--without-ocaml\" or \"--with-ocaml=no\".\nif test x\"${with_ocaml}\" = xno; then\n    AC_MSG_NOTICE([Disabling OCaml])\n    OCAMLC=\nelse\n    # OCaml compiler\n    if test -z \"$OCAMLC\"; then\n\tAC_CHECK_PROGS(OCAMLC, ocamlc)\n    fi\n\n    # OCaml Pre-Processor-Pretty-Printer\n    if test -z \"$CAMLP4\"; then\n\tAC_CHECK_PROGS(CAMLP4, camlp4)\n    fi\n\n    # OCaml DL load generator\n    if test -z \"$OCAMLDLGEN\"; then\n\tAC_CHECK_PROGS(OCAMLDLGEN, ocamldlgen)\n    fi\n\n    # OCaml package tool\n    if test -z \"$OCAMLFIND\"; then\n\tAC_CHECK_PROGS(OCAMLFIND, ocamlfind)\n    fi\n\n    # OCaml toplevel creator\n    if test -z \"$OCAMLMKTOP\"; then\n\tAC_CHECK_PROGS(OCAMLMKTOP, ocamlmktop)\n    fi\nfi\n\nAC_SUBST(OCAMLC)\nAC_SUBST(CAMLP4)\nAC_SUBST(OCAMLDLGEN)\nAC_SUBST(OCAMLFIND)\nAC_SUBST(OCAMLMKTOP)\n\n#----------------------------------------------------------------\n# Look for Octave\n#----------------------------------------------------------------\n\nOCTAVEBIN=\nOCTAVE_SO=.oct\n\nAC_ARG_WITH(octave, AS_HELP_STRING([--without-octave], [Disable Octave])\nAS_HELP_STRING([--with-octave=path], [Set location of Octave executable]),[OCTAVEBIN=\"$withval\"], [OCTAVEBIN=\"$alllang_default\"])\n\n# Check for \"--without-octave\" or \"--with-octave=no\".\nif test x\"${OCTAVEBIN}\" = xno; then\n   AC_MSG_NOTICE([Disabling Octave])\n   OCTAVE=\n\n# Check for Octave; prefer command-line program \"octave-cli\" to (in newer versions) GUI program \"octave\"\nelif test \"x$OCTAVEBIN\" = xyes; then\n   AC_PATH_PROG(OCTAVE, [octave-cli octave])\n\nelse\n   OCTAVE=\"$OCTAVEBIN\"\nfi\n\n# Check if Octave works\nif test -n \"$OCTAVE\"; then\n   AC_MSG_CHECKING([if ${OCTAVE} works])\n   AS_IF([test \"x`${OCTAVE} --version 2>/dev/null | sed -n -e '1p' | sed -n -e '/Octave, version/p'`\" != x],[\n      AC_MSG_RESULT([yes])\n   ],[\n      AC_MSG_RESULT([no])\n      OCTAVE=\n   ])\nfi\n\n# Check for required Octave helper program \"mkoctfile\"\nif test -n \"$OCTAVE\"; then\n  AC_MSG_CHECKING([for mkoctfile])\n  version_suffix=[\"`echo $OCTAVE | sed -e 's|.*\\(-[0-9][0-9.]*\\)$|\\1|'`\"]\n  case $version_suffix in\n    -*) ;;\n    *) version_suffix=\"\" ;;\n  esac\n  octave_directory=`dirname $OCTAVE`\n  if test \"$octave_directory\" = \".\" ; then\n    mkoctfile=\"mkoctfile${version_suffix}\"\n  else\n    mkoctfile=\"${octave_directory}/mkoctfile${version_suffix}\"\n  fi\n  AC_MSG_RESULT([${mkoctfile}])\n  AC_MSG_CHECKING([if ${mkoctfile} works])\n  mkoctfile=\"env - PATH=$PATH LD_LIBRARY_PATH=$LD_LIBRARY_PATH ${mkoctfile}\"\n  AS_IF([test \"x`${mkoctfile} --version 2>/dev/null | sed -n -e '1p' | sed -n -e '/mkoctfile, version/p'`\" != x],[\n      AC_MSG_RESULT([yes])\n    ],[\n      AC_MSG_RESULT([no])\n      OCTAVE=\n    ])\nfi\n\n# Check for Octave preprocessor/compiler/linker flags\nif test -n \"$OCTAVE\"; then\n\n   AC_MSG_CHECKING([for Octave preprocessor flags])\n   OCTAVE_CPPFLAGS=\n   for var in CPPFLAGS INCFLAGS ALL_CXXFLAGS; do\n      for flag in `${mkoctfile} -p ${var}`; do\n         case ${flag} in\n            -D*|-I*) OCTAVE_CPPFLAGS=\"${OCTAVE_CPPFLAGS} ${flag}\";;\n            *) ;;\n         esac\n      done\n   done\n   AC_MSG_RESULT([$OCTAVE_CPPFLAGS])\n\n   AC_MSG_CHECKING([for Octave compiler flags])\n   OCTAVE_CXXFLAGS=\n   for var in CXX ALL_CXXFLAGS; do\n      for flag in `${mkoctfile} -p ${var}`; do\n         case ${flag} in\n            -std=*|-g*|-W*) OCTAVE_CXXFLAGS=\"${OCTAVE_CXXFLAGS} ${flag}\";;\n            *) ;;\n         esac\n      done\n   done\n   save_CXXFLAGS=\"${CXXFLAGS}\"\n   CXXFLAGS=\"-Werror -O0\"\n   AC_COMPILE_IFELSE([\n      AC_LANG_PROGRAM([],[])\n   ],[\n      OCTAVE_CXXFLAGS=\"${OCTAVE_CXXFLAGS} -O0\"\n   ])\n   CXXFLAGS=\"${save_CXXFLAGS}\"\n   AC_MSG_RESULT([$OCTAVE_CXXFLAGS])\n\n   AC_MSG_CHECKING([for Octave linker flags])\n   OCTAVE_LDFLAGS=\n   for var in OCTLIBDIR; do\n     OCTAVE_LDFLAGS=\"${OCTAVE_LDFLAGS} \"-L`${mkoctfile} -p ${var}`\n   done\n   for var in RDYNAMIC_FLAG RLD_FLAG OCTAVE_LIBS LIBS; do\n     # RLD_FLAG gives \"mkoctfile: unknown variable 'RLD_FLAG'\" on stderr\n     # with Octave 7.3 so just discard stderr here.  Apparently RLD_FLAG has\n     # reported an empty value since somewhere between 3.4.3 and 3.6.1 so\n     # can be removed below once we require Octave 4.\n     OCTAVE_LDFLAGS=\"${OCTAVE_LDFLAGS} \"`${mkoctfile} -p ${var} 2>/dev/null`\n   done\n   AC_MSG_RESULT([$OCTAVE_LDFLAGS])\n\nfi\n\n# Check for Octave options\nif test -n \"$OCTAVE\"; then\n   for octave_opt in --no-window-system --silent --norc --no-history; do\n      AC_MSG_CHECKING([if Octave option '${octave_opt}' is supported])\n      octave_out=`${OCTAVE} ${octave_opt} /dev/null 2>&1 | sed -n '1p' | sed -n '/unrecognized/p'`\n      AS_IF([test \"x${octave_out}\" = x],[\n         AC_MSG_RESULT([yes])\n         OCTAVE=\"${OCTAVE} ${octave_opt}\"\n      ],[\n         AC_MSG_RESULT([no])\n      ])\n   done\nfi\n\nAC_SUBST(OCTAVE)\nAC_SUBST(OCTAVE_SO)\nAC_SUBST(OCTAVE_CPPFLAGS)\nAC_SUBST(OCTAVE_CXXFLAGS)\nAC_SUBST(OCTAVE_LDFLAGS)\n\n#----------------------------------------------------------------\n# Look for Perl5\n#----------------------------------------------------------------\n\nPERLBIN=\n\nAC_ARG_WITH(perl5, AS_HELP_STRING([--without-perl5], [Disable Perl5])\nAS_HELP_STRING([--with-perl5=path], [Set location of Perl5 executable]),[ PERLBIN=\"$withval\"], [PERLBIN=\"$alllang_default\"])\n\n# First, check for \"--without-perl5\" or \"--with-perl5=no\".\nif test x\"${PERLBIN}\" = xno; then\nAC_MSG_NOTICE([Disabling Perl5])\nPERL=\nelse\n\n# First figure out what the name of Perl5 is\n\nif test \"x$PERLBIN\" = xyes; then\nAC_CHECK_PROGS(PERL, perl perl5)\nelse\nPERL=\"$PERLBIN\"\nfi\n\n\n# This could probably be simplified as for all platforms and all versions of Perl the following apparently should be run to get the compilation options:\n# perl -MExtUtils::Embed -e ccopts\nAC_MSG_CHECKING(for Perl5 header files)\nif test -n \"$PERL\"; then\n\tPERL5DIR=`($PERL -MConfig -le 'print $Config{archlibexp}') 2>/dev/null`\n\tif test -n \"$PERL5DIR\" ; then\n\t\tdirs=\"$PERL5DIR $PERL5DIR/CORE\"\n\t\tPERL5EXT=none\n\t\tfor i in $dirs; do\n\t\t\tif test -r $i/perl.h; then\n\t\t\t\tAC_MSG_RESULT($i)\n\t\t\t\tPERL5EXT=\"$i\"\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\t\tif test \"$PERL5EXT\" = none; then\n\t\t\tPERL5EXT=\"$PERL5DIR/CORE\"\n\t\t\tAC_MSG_RESULT(could not locate perl.h...using $PERL5EXT)\n\t\tfi\n\n\t\tAC_MSG_CHECKING(for Perl5 library)\n\t\tPERL5LIB=`($PERL -e 'use Config; $_=$Config{libperl}; s/^lib//; s/$Config{_a}$//; s/\\.$Config{so}.*//; print $_, \"\\n\"') 2>/dev/null`\n\t\tif test -z \"$PERL5LIB\" ; then\n\t\t\tAC_MSG_RESULT(not found)\n\t\telse\n\t\t\tAC_MSG_RESULT($PERL5LIB)\n\t\tfi\n    AC_MSG_CHECKING(for Perl5 ccflags)\n\t\tPERL5CCFLAGS=`($PERL -e 'use Config; print $Config{ccflags}, \"\\n\"' | sed \"s/-Wdeclaration-after-statement//\") 2>/dev/null`\n\t\tif test -z \"$PERL5CCFLAGS\" ; then\n\t\t\tAC_MSG_RESULT(not found)\n\t\telse\n\t\t\tAC_MSG_RESULT($PERL5CCFLAGS)\n\t\tfi\n    AC_MSG_CHECKING(for Perl5 ccdlflags)\n    PERL5CCDLFLAGS=`($PERL -e 'use Config; print $Config{ccdlflags}, \"\\n\"') 2>/dev/null`\n    if test -z \"$PERL5CCDLFLAGS\" ; then\n      AC_MSG_RESULT(not found)\n      else\n      AC_MSG_RESULT($PERL5CCDLFLAGS)\n    fi\n    AC_MSG_CHECKING(for Perl5 cccdlflags)\n    PERL5CCCDLFLAGS=`($PERL -e 'use Config; print $Config{cccdlflags}, \"\\n\"') 2>/dev/null`\n    if test -z \"$PERL5CCCDLFLAGS\" ; then\n      AC_MSG_RESULT(not found)\n      else\n      AC_MSG_RESULT($PERL5CCCDLFLAGS)\n    fi\n    AC_MSG_CHECKING(for Perl5 ldflags)\n    PERL5LDFLAGS=`($PERL -e 'use Config; print $Config{ldflags}, \"\\n\"') 2>/dev/null`\n    if test -z \"$PERL5LDFLAGS\" ; then\n      AC_MSG_RESULT(not found)\n      else\n      AC_MSG_RESULT($PERL5LDFLAGS)\n    fi\n    AC_MSG_CHECKING(for Perl5 Test::More module) # For test-suite\n    PERL5TESTMORE=`($PERL -e 'use Test::More; print \"good\";') 2>/dev/null`\n    if test -z \"$PERL5TESTMORE\" ; then\n      AC_MSG_RESULT(not found)\n      else\n      AC_MSG_RESULT(found)\n    fi\n\telse\n\t\tAC_MSG_RESULT(unable to determine perl5 configuration)\n\t\tPERL5EXT=$PERL5DIR\n\tfi\nelse\n\tAC_MSG_RESULT(could not figure out how to run perl5)\nfi\n\n# Cygwin (Windows) needs the library for dynamic linking\ncase $host in\n*-*-cygwin* | *-*-mingw*) PERL5DYNAMICLINKING=\"-L$PERL5EXT -l$PERL5LIB\";;\n*)PERL5DYNAMICLINKING=\"\";;\nesac\nfi\n\nAC_SUBST(PERL)\nAC_SUBST(PERL5EXT)\nAC_SUBST(PERL5DYNAMICLINKING)\nAC_SUBST(PERL5LIB)\nAC_SUBST(PERL5CCFLAGS)\nAC_SUBST(PERL5CCDLFLAGS)\nAC_SUBST(PERL5CCCDLFLAGS)\nAC_SUBST(PERL5LDFLAGS)\n\n#-------------------------------------------------------------------------\n# Look for PHP\n#-------------------------------------------------------------------------\n\nPHPBIN=\n\nAC_ARG_WITH(php, AS_HELP_STRING([--without-php], [Disable PHP])\nAS_HELP_STRING([--with-php=path], [Set location of PHP executable]),[ PHPBIN=\"$withval\"], [PHPBIN=\"$alllang_default\"])\n\n# First, check for \"--without-php\" or \"--with-php=no\".\nif test x\"${PHPBIN}\" = xno; then\n    AC_MSG_NOTICE([Disabling PHP])\n    PHP=\nelse\n    if test \"x$PHPBIN\" = xyes; then\n      AC_CHECK_PROGS(PHP, [php8.3 php8.2 php8.1 php8.0 php])\n    else\n      PHP=$PHPBIN\n    fi\n\n    if test -n \"$PHP\"; then\n      AC_MSG_CHECKING(for PHP header files)\n      dnl /usr/bin/php8.0 -> /usr/bin/php-config8.0\n      case $PHP in\n        *8.*)\n          PHPCONFIG=`echo \"$PHP\"|sed 's/8\\...*$/-config&/'` ;;\n        *)\n          PHPCONFIG=$PHP-config ;;\n      esac\n      php_version=`$PHPCONFIG --version 2>/dev/null`\n      case $php_version in\n      8.*)\n        PHPINC=`$PHPCONFIG --includes 2>/dev/null`\n        if test -n \"$PHPINC\"; then\n          AC_MSG_RESULT($PHPINC)\n        else\n          AC_MSG_RESULT(not found)\n        fi\n        ;;\n      \"\")\n        AC_MSG_RESULT([could not find $PHPCONFIG or obtain PHP version from it]) ;;\n      *)\n        AC_MSG_RESULT([found PHP $php_version - not PHP 8]) ;;\n      esac\n    fi\nfi\nAC_SUBST(PHP)\nAC_SUBST(PHPINC)\n\n#----------------------------------------------------------------\n# Look for Python\n#----------------------------------------------------------------\n\nPYINCLUDE=\nPYLIB=\nPYLINK=\nPYPACKAGE=\n\nAC_ARG_WITH(python, AS_HELP_STRING([--without-python], [Don't probe for Python 2.x])\nAS_HELP_STRING([--with-python=path], [Set location of Python 2.x executable]), [PYBIN=\"$withval\"], [PYBIN=\"$alllang_default\"])\n\n# First, check for \"--without-python\" or \"--with-python=no\".\nif test x\"${PYBIN}\" = xno; then\n  AC_MSG_NOTICE([Disabling Python 2.x probe])\nelse\n  # First figure out the name of the Python 2.x executable\n  if test \"x$PYBIN\" = xyes; then\n    AC_CHECK_PROGS(PYTHON, [python python2.7])\n  else\n    PYTHON=\"$PYBIN\"\n  fi\n\n  PYVER=0\n  if test -n \"$PYTHON\"; then\n    AC_MSG_CHECKING([for $PYTHON major version number])\n    PYVER=`($PYTHON -c \"import sys; sys.stdout.write(sys.version[[0]])\") 2>/dev/null`\n    AC_MSG_RESULT($PYVER)\n    if test -z \"$PYVER\"; then\n      PYVER=0\n    else\n      AC_MSG_CHECKING(for Python 2.x os.name)\n      PYOSNAME=`($PYTHON -c \"import sys, os; sys.stdout.write(os.name)\") 2>/dev/null`\n      AC_MSG_RESULT($PYOSNAME)\n      AC_MSG_CHECKING(for Python 2.x path separator)\n      PYSEPARATOR=`($PYTHON -c \"import sys, os; sys.stdout.write(os.sep)\") 2>/dev/null`\n      AC_MSG_RESULT($PYSEPARATOR)\n    fi\n  fi\n\n  if test $PYVER -eq 1 -o $PYVER -eq 2; then\n    AC_MSG_CHECKING(for Python 2.x prefix)\n    PYPREFIX=`($PYTHON -c \"import sys; sys.stdout.write(sys.prefix)\") 2>/dev/null`\n    AC_MSG_RESULT($PYPREFIX)\n    AC_MSG_CHECKING(for Python 2.x exec-prefix)\n    PYEPREFIX=`($PYTHON -c \"import sys; sys.stdout.write(sys.exec_prefix)\") 2>/dev/null`\n    AC_MSG_RESULT($PYEPREFIX)\n\n    if test x\"$PYOSNAME\" = x\"nt\" -a x\"$PYSEPARATOR\" = x\"\\\\\"; then\n      # Windows installations are quite different to posix installations (MinGW path separator is a forward slash)\n      PYPREFIX=`echo \"$PYPREFIX\" | sed -e 's,\\\\\\\\,/,g'` # Forward slashes are easier to use and even work on Windows most of the time\n      PYTHON_SO=.pyd\n\n      AC_MSG_CHECKING(for Python 2.x header files)\n      if test -r $PYPREFIX/include/Python.h; then\n        PYINCLUDE=\"-I$PYPREFIX/include\"\n      fi\n      AC_MSG_RESULT($PYINCLUDE)\n\n      AC_MSG_CHECKING(for Python 2.x library directory)\n      if test -d $PYPREFIX/libs; then\n        PYLIB=\"$PYPREFIX/libs\"\n        PYLINKFILE=`ls $PYLIB/python*.lib | grep \"python[[0-9]][[0-9]]\\+\\.lib\"`\n        if test -r \"$PYLINKFILE\"; then\n          PYLINK=-l`basename \"$PYLINKFILE\" | sed -e 's/\\.lib$//'`\n        else\n          PYLIB=\n        fi\n      fi\n    else\n      # Note: I could not think of a standard way to get the version string from different versions.\n      # This trick pulls it out of the file location for a standard library file.\n\n      AC_MSG_CHECKING(for Python 2.x version)\n\n      # Need to do this hack since autoconf replaces __file__ with the name of the configure file\n      filehack=\"file__\"\n      PYVERSION=`($PYTHON -c \"import sys,string,operator,os.path; sys.stdout.write(operator.getitem(os.path.split(operator.getitem(os.path.split(string.__$filehack),0)),1))\") 2>/dev/null`\n      AC_MSG_RESULT($PYVERSION)\n\n      # Find the directory for libraries this is necessary to deal with\n      # platforms that can have apps built for multiple archs: e.g. x86_64\n      AC_MSG_CHECKING(for Python 2.x lib dir)\n      PYLIBDIR=`($PYTHON -c \"import sys; sys.stdout.write(sys.lib)\") 2>/dev/null`\n      if test -z \"$PYLIBDIR\"; then\n        # Fedora patch Python to add sys.lib, for other distros we assume \"lib\".\n        PYLIBDIR=\"lib\"\n      fi\n      AC_MSG_RESULT($PYLIBDIR)\n\n      # Set the include directory\n\n      AC_MSG_CHECKING(for Python 2.x header files)\n      if test -r $PYPREFIX/include/$PYVERSION/Python.h; then\n        PYINCLUDE=\"-I$PYPREFIX/include/$PYVERSION -I$PYEPREFIX/$PYLIBDIR/$PYVERSION/config\"\n      fi\n      if test -z \"$PYINCLUDE\"; then\n        if test -r $PYPREFIX/include/Py/Python.h; then\n          PYINCLUDE=\"-I$PYPREFIX/include/Py -I$PYEPREFIX/$PYLIBDIR/python/lib\"\n        fi\n      fi\n      AC_MSG_RESULT($PYINCLUDE)\n\n      # Set the library directory blindly.   This probably won't work with older versions\n      AC_MSG_CHECKING(for Python 2.x library directory)\n      dirs=\"$PYVERSION/config $PYVERSION/$PYLIBDIR python/$PYLIBDIR\"\n      for i in $dirs; do\n        if test -d \"$PYEPREFIX/$PYLIBDIR/$i\"; then\n          PYLIB=\"$PYEPREFIX/$PYLIBDIR/$i\"\n          break\n        fi\n      done\n\n      PYLINK=\"-l$PYVERSION\"\n    fi\n\n    if test -z \"$PYLIB\"; then\n      AC_MSG_RESULT(Not found)\n    else\n      AC_MSG_RESULT($PYLIB)\n      PYLIB=\"-L$PYLIB\"\n    fi\n    AC_MSG_CHECKING(for Python 2.x library)\n    if test -z \"$PYLINK\"; then\n      AC_MSG_RESULT(Not found)\n    else\n      AC_MSG_RESULT($PYLINK)\n    fi\n  fi\n\n  # Cygwin (Windows) needs the library for dynamic linking\n  case $host in\n  *-*-cygwin* | *-*-mingw* | *-*-msys*)\n    PYTHONDYNAMICLINKING=\"$PYLIB $PYLINK\"\n    DEFS=\"-DUSE_DL_IMPORT $DEFS\"\n    ;;\n  *-*-aix*)\n    PYTHONDYNAMICLINKING=\"$PYLIB $PYLINK\"\n    ;;\n  *)PYTHONDYNAMICLINKING=\"\";;\n  esac\nfi\n\nAC_SUBST(PYINCLUDE)\nAC_SUBST(PYLIB)\nAC_SUBST(PYLINK)\nAC_SUBST(PYTHONDYNAMICLINKING)\n\n\n#----------------------------------------------------------------\n# Look for Python 3.x\n#----------------------------------------------------------------\n\nPY3INCLUDE=\nPY3LIB=\nPY3LINK=\nPY3PACKAGE=\n\nAC_ARG_WITH(python3, AS_HELP_STRING([--without-python3], [Don't probe for Python 3.x])\nAS_HELP_STRING([--with-python3=path], [Set location of Python 3.x executable]), [PY3BIN=\"$withval\"], [PY3BIN=\"$alllang_default\"])\n\n# First, check for \"--without-python3\" or \"--with-python3=no\".\nif test x\"${PY3BIN}\" = xno; then\n  AC_MSG_NOTICE([Disabling Python 3.x probe])\nelse\n  if test -z \"$PYVER\"; then\n    PYVER=0\n  fi\n  if test \"x$PY3BIN\" = xyes; then\n    if test x\"$PYOSNAME\" = x\"nt\" -a x\"$PYSEPARATOR\" = x\"\\\\\" -a $PYVER -ge 3; then\n      PYTHON3=\"$PYTHON\"\n    else\n      for py_ver in 3 3.15 3.14 3.13 3.12 3.11 3.10 3.9 3.8 3.7 3.6 3.5 3.4 3.3 \"\"; do\n        AC_CHECK_PROGS(PYTHON3, [python$py_ver])\n        if test -n \"$PYTHON3\"; then\n          AC_CHECK_PROGS(PY3CONFIG, [$PYTHON3-config])\n          if test -n \"$PY3CONFIG\"; then\n            break\n          fi\n        fi\n      done\n    fi\n  else\n    PYTHON3=\"$PY3BIN\"\n    AC_CHECK_PROGS(PY3CONFIG, [$PYTHON3-config])\n  fi\n\n  if test -n \"$PYTHON3\"; then\n    AC_MSG_CHECKING([for $PYTHON3 major version number])\n    PYVER=`($PYTHON3 -c \"import sys; sys.stdout.write(sys.version[[0]])\") 2>/dev/null`\n    AC_MSG_RESULT($PYVER)\n    if test -z \"$PYVER\"; then\n      PYVER=0\n    fi\n  fi\n\n  if test $PYVER -ge 3; then\n    AC_MSG_CHECKING(for Python 3.x os.name)\n    PY3OSNAME=`($PYTHON3 -c \"import sys, os; sys.stdout.write(os.name)\") 2>/dev/null`\n    AC_MSG_RESULT($PY3OSNAME)\n    AC_MSG_CHECKING(for Python 3.x path separator)\n    PYSEPARATOR=`($PYTHON3 -c \"import sys, os; sys.stdout.write(os.sep)\") 2>/dev/null`\n    AC_MSG_RESULT($PYSEPARATOR)\n\n    if test x\"$PY3OSNAME\" = x\"nt\" -a x\"$PYSEPARATOR\" = x\"\\\\\"; then\n      # Windows installations are quite different to posix installations\n      # There is no python-config to use\n      AC_MSG_CHECKING(for Python 3.x prefix)\n      PY3PREFIX=`($PYTHON3 -c \"import sys; sys.stdout.write(sys.prefix)\") 2>/dev/null`\n      AC_MSG_RESULT($PY3PREFIX)\n      PY3PREFIX=`echo \"$PY3PREFIX\" | sed -e 's,\\\\\\\\,/,g'` # Forward slashes are easier to use and even work on Windows most of the time\n      PYTHON_SO=.pyd\n\n      AC_MSG_CHECKING(for Python 3.x header files)\n      if test -r $PY3PREFIX/include/Python.h; then\n        PY3INCLUDE=\"-I$PY3PREFIX/include\"\n      fi\n      AC_MSG_RESULT($PY3INCLUDE)\n\n      AC_MSG_CHECKING(for Python 3.x library directory)\n      if test -d \"$PY3PREFIX/libs\"; then\n        PY3LIB=\"$PY3PREFIX/libs\"\n        PY3LINKFILE=`ls $PY3LIB/python*.lib | grep \"python[[0-9]][[0-9]]\\+\\.lib\"`\n        if test -r \"$PY3LINKFILE\"; then\n          PY3LINK=-l`basename $PY3LINKFILE | sed -e 's/\\.lib$//'`\n        else\n          PY3LIB=\n        fi\n      fi\n      if test -z \"$PY3LIB\"; then\n        AC_MSG_RESULT([Not found])\n      else\n        AC_MSG_RESULT($PY3LIB)\n        PY3LIB=\"-L$PY3LIB\"\n      fi\n      AC_MSG_CHECKING([for Python 3.x library])\n      if test -z \"$PY3LINK\"; then\n        AC_MSG_RESULT(Not found)\n      else\n        AC_MSG_RESULT($PY3LINK)\n      fi\n    elif test -n \"$PY3CONFIG\"; then\n      AC_MSG_CHECKING([for Python 3.x prefix])\n      PY3PREFIX=`($PY3CONFIG --prefix) 2>/dev/null`\n      AC_MSG_RESULT($PY3PREFIX)\n      AC_MSG_CHECKING(for Python 3.x exec-prefix)\n      # Piped through xargs to strip trailing whitespace (bug in msys2 + mingw Python)\n      PY3EPREFIX=`($PY3CONFIG --exec-prefix | xargs) 2>/dev/null`\n      AC_MSG_RESULT($PY3EPREFIX)\n\n      # Note: I could not think of a standard way to get the version string from different versions.\n      # This trick pulls it out of the file location for a standard library file.\n\n      AC_MSG_CHECKING([for Python 3.x version])\n\n      # Need to do this hack since autoconf replaces __file__ with the name of the configure file\n      filehack=\"file__\"\n      PY3VERSION=`($PYTHON3 -c \"import string,operator,os.path; print(operator.getitem(os.path.split(operator.getitem(os.path.split(string.__$filehack),0)),1))\") 2>/dev/null`\n      AC_MSG_RESULT($PY3VERSION)\n\n      # Find the directory for libraries this is necessary to deal with\n      # platforms that can have apps built for multiple archs: e.g. x86_64\n      AC_MSG_CHECKING([for Python 3.x lib dir])\n      PY3LIBDIR=`($PYTHON3 -c \"import sys; print(sys.lib)\") 2>/dev/null`\n      if test -z \"$PY3LIBDIR\"; then\n        # some dists don't have sys.lib  so the best we can do is assume lib\n        PY3LIBDIR=\"lib\"\n      fi\n      AC_MSG_RESULT($PY3LIBDIR)\n\n      # Set the include directory\n\n      AC_MSG_CHECKING([for Python 3.x header files])\n      PY3INCLUDE=`($PY3CONFIG --includes) 2>/dev/null`\n      AC_MSG_RESULT($PY3INCLUDE)\n\n      # Set the library directory blindly.   This probably won't work with older versions\n      AC_MSG_CHECKING([for Python 3.x library directory])\n      dirs=\"$PY3VERSION/config $PY3VERSION/$PY3LIBDIR python/$PY3LIBDIR\"\n      for i in $dirs; do\n        if test -d $PY3EPREFIX/$PY3LIBDIR/$i; then\n          PY3LIB=\"$PY3EPREFIX/$PY3LIBDIR/$i\"\n          break\n        fi\n      done\n      if test -z \"$PY3LIB\"; then\n        # Last resort\n        if test -d \"$PY3EPREFIX/$PY3LIBDIR\"; then\n          PY3LIB=\"$PY3EPREFIX/$PY3LIBDIR\"\n        fi\n      fi\n      if test -z \"$PY3LIB\"; then\n        AC_MSG_RESULT([Not found])\n      else\n        AC_MSG_RESULT($PY3LIB)\n        PY3LIB=\"-L$PY3LIB\"\n      fi\n\n      PY3LINK=\"-l$PY3VERSION\"\n\n      AC_MSG_CHECKING([for Python 3.x library])\n      if test -z \"$PY3LINK\"; then\n        AC_MSG_RESULT(Not found)\n      else\n        AC_MSG_RESULT($PY3LINK)\n      fi\n    fi\n  fi\n\n  # Cygwin (Windows) needs the library for dynamic linking\n  case $host in\n  *-*-cygwin* | *-*-mingw* | *-*-msys*)\n    # PYTHON3DYNAMICLINKING ought to be replaced by $PY3CONFIG --ldflags\n    PYTHON3DYNAMICLINKING=\"$PY3LIB $PY3LINK\"\n    DEFS=\"-DUSE_DL_IMPORT $DEFS\"\n    ;;\n  *-*-aix*)\n    PYTHON3DYNAMICLINKING=\"$PY3LIB $PY3LINK\"\n    ;;\n  *)PYTHON3DYNAMICLINKING=\"\";;\n  esac\n\n  AC_SUBST(PY3INCLUDE)\n  AC_SUBST(PY3LIB)\n  AC_SUBST(PY3LINK)\n  AC_SUBST(PYTHON3DYNAMICLINKING)\nfi\n\nif test -n \"$PYINCLUDE\" || test -n \"$PY3INCLUDE\" ; then\n  AC_CHECK_PROGS(PYCODESTYLE, pycodestyle)\n  if test -n \"$PYCODESTYLE\"; then\n    AC_MSG_CHECKING(pycodestyle version)\n    pycodestyle_version=`$PYCODESTYLE --version 2>/dev/null`\n    AC_MSG_RESULT($pycodestyle_version)\n  fi\n  if test -n \"$PY3INCLUDE\" ; then\n    AC_CHECK_PROGS(PYABI3AUDIT, [abi3audit])\n  fi\nfi\n\n#----------------------------------------------------------------\n# Look for R\n#----------------------------------------------------------------\n\nRBIN=\n\nAC_ARG_WITH(r, AS_HELP_STRING([--without-r], [Disable R])\nAS_HELP_STRING([--with-r=path], [Set location of R executable (r)]),[ RBIN=\"$withval\"], [RBIN=\"$alllang_default\"])\n\n# First, check for \"--without-r\" or \"--with-r=no\".\nif test x\"${RBIN}\" = xno; then\nAC_MSG_NOTICE([Disabling R])\nRBIN=\nelse\n\n# can we find R?\nif test \"x$RBIN\" = xyes; then\n   AC_PATH_PROG(RBIN, R)\nfi\nfi\n\nAC_SUBST(RBIN)\n\n#----------------------------------------------------------------\n# Look for Ruby\n#----------------------------------------------------------------\n\nRUBYBIN=\n\nAC_ARG_WITH(ruby, AS_HELP_STRING([--without-ruby], [Disable Ruby])\nAS_HELP_STRING([--with-ruby=path], [Set location of Ruby executable]),[ RUBYBIN=\"$withval\"], [RUBYBIN=\"$alllang_default\"])\n\n# First, check for \"--without-ruby\" or \"--with-ruby=no\".\nRUBYSO=$SO\nif test x\"${RUBYBIN}\" = xno; then\nAC_MSG_NOTICE([Disabling Ruby])\nRUBY=\nelse\n\n# First figure out what the name of Ruby is\n\nif test \"x$RUBYBIN\" = xyes; then\n\tAC_CHECK_PROGS(RUBY, ruby)\nelse\n\tRUBY=\"$RUBYBIN\"\nfi\n\nAC_MSG_CHECKING(for Ruby header files)\nif test -n \"$RUBY\"; then\n        # Try Ruby1.9+ first\n        RUBYDIR=`($RUBY -rrbconfig -e 'print RbConfig::CONFIG[[\"rubyhdrdir\"]] || $rubyhdrdir') 2>/dev/null`\n        RUBYARCHHDRDIR=`($RUBY -rrbconfig -e 'print RbConfig::CONFIG[[\"rubyarchhdrdir\"]] || $rubyarchhdrdir') 2>/dev/null`\n\tif test x\"$RUBYDIR\" = x\"\" || test x\"$RUBYDIR\" = x\"nil\"; then\n\t\tRUBYDIR=`($RUBY -rrbconfig -e 'print RbConfig::CONFIG[[\"archdir\"]] || $archdir') 2>/dev/null`\n        else\n                RUBYARCH=`($RUBY -rrbconfig -e 'print RbConfig::CONFIG[[\"arch\"]] || $arch') 2>/dev/null`\n        fi\n\tif test x\"$RUBYDIR\" != x\"\"; then\n\t\tdirs=\"$RUBYDIR\"\n\t\tRUBYINCLUDE=\n\t\tfor i in $dirs; do\n\t\t\tif test -r $i/ruby.h; then\n\t\t\t\tif test x\"$RUBYARCH\" = x\"\"; then\n\t\t\t\t\tRUBYINCLUDE=\"-I$i\"\n\t\t\t\telif test -n \"$RUBYARCHHDRDIR\"; then\n\t\t\t\t\tRUBYINCLUDE=\"-I$i -I$RUBYARCHHDRDIR\"\n\t\t\t\telse\n\t\t\t\t\tRUBYINCLUDE=\"-I$i -I$i/$RUBYARCH\"\n\t\t\t\tfi\n\t\t\t\tAC_MSG_RESULT($RUBYINCLUDE)\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\t\tif test x\"$RUBYINCLUDE\" = x\"\"; then\n\t\t\tAC_MSG_RESULT(could not locate ruby.h)\n\t\tfi\n\n\t\t# Find library and path for linking.\n\t\tAC_MSG_CHECKING(for Ruby library)\n\t\tRUBYLIB=\"\"\n\t\trb_archlibdir=`($RUBY -rrbconfig -e 'print RbConfig::CONFIG[[\"archlibdir\"]]') 2>/dev/null`\n\t\trb_libdir=`($RUBY -rrbconfig -e 'print RbConfig::CONFIG[[\"libdir\"]]') 2>/dev/null`\n\t\trb_bindir=`($RUBY -rrbconfig -e 'print RbConfig::CONFIG[[\"bindir\"]]') 2>/dev/null`\n\t\tdirs=\"$dirs $rb_archlibdir $rb_libdir $rb_bindir\"\n\n        rb_libruby=`($RUBY -rrbconfig -e 'print RbConfig::CONFIG[[\"LIBRUBY_A\"]]') 2>/dev/null`\n        RUBYLINK=`($RUBY -rrbconfig -e '\n            c = RbConfig::CONFIG\n            if c.has_key? \"LIBRUBYARG_STATIC\" # 1.8.x\n                if c[[\"LIBRUBY\"]] == c[[\"LIBRUBY_A\"]]\n                    link = c[[\"LIBRUBYARG_STATIC\"]]\n                else\n                    link = c[[\"LIBRUBYARG_SHARED\"]]\n                end\n            else # 1.6.x\n                link = \"-l\" + c[[\"RUBY_INSTALL_NAME\"]]\n            end\n\n            # Get the target Ruby was built for\n            target = c[[\"target\"]]\n\n            if target == \"i386-pc-mswin32\"\n              # Need to change msvcrt-ruby*.lib to -lmsvcrt-ruby*\n              ext = File.extname(link)\n              # Get index that counts backwards from end of string\n              index = -1 - ext.size\n              # Strip off the extension\n              link = link.slice(0..index)\n              puts \"-l#{link}\"\n            else\n              puts link\n            end') 2>/dev/null`\n\n\t\tif test \"$rb_libruby\" != \"\"; then\n\t\t\tfor i in $dirs; do\n\t\t\t\tif (test -r $i/$rb_libruby;) then\n\t\t\t\t\tRUBYLIB=\"$i\"\n\t\t\t\t\tbreak\n\t\t\t\tfi\n\t\t\tdone\n\t\tfi\n\t\tif test \"$RUBYLIB\" = \"\"; then\n\t\t\tRUBYLIB=\"$RUBYDIR\"\n\t\t\tAC_MSG_RESULT(not found... using $RUBYDIR)\n\t\telse\n\t\t\tAC_MSG_RESULT($RUBYLINK in $RUBYLIB)\n\t\tfi\n\telse\n\t\tAC_MSG_RESULT(unable to determine ruby configuration)\n\tfi\n\n\tcase $host in\n\t\t*-*-mingw*) ;; # do nothing, the default windows libraries are already included\n\t\t*) RUBYLINK=\"$RUBYLINK `($RUBY -rrbconfig -e 'print RbConfig::CONFIG[[\"LIBS\"]]') 2>/dev/null`\";;\n\tesac\n\n\tRUBYCCDLFLAGS=`($RUBY -rrbconfig -e 'print RbConfig::CONFIG[[\"CCDLFLAGS\"]]') 2>/dev/null`\n\tRUBYSO=.`($RUBY -rrbconfig -e 'print RbConfig::CONFIG[[\"DLEXT\"]]') 2>/dev/null`\nelse\n\tAC_MSG_RESULT(could not figure out how to run ruby)\nfi\n\ncase $host in\n*-*-cygwin* | *-*-mingw*)\tRUBYDYNAMICLINKING=\"-L$RUBYLIB $RUBYLINK\";;\n*)\t\tRUBYDYNAMICLINKING=\"\";;\nesac\nfi\n\nAC_SUBST(RUBYINCLUDE)\nAC_SUBST(RUBYLIB)\nAC_SUBST(RUBYLINK)\nAC_SUBST(RUBYCCDLFLAGS)\nAC_SUBST(RUBYSO)\nAC_SUBST(RUBYDYNAMICLINKING)\n\n#----------------------------------------------------------------\n# Look for Scilab\n#----------------------------------------------------------------\n\nAC_ARG_WITH(scilab, AS_HELP_STRING([--without-scilab], [Disable Scilab])\nAS_HELP_STRING([--with-scilab=path], [Set location of Scilab executable]),[SCILABBIN=\"$withval\"], [SCILABBIN=\"$alllang_default\"])\nAC_ARG_WITH(scilab-inc, [  --with-scilab-inc=path  Set location of Scilab include directory], [SCILABINCDIR=\"$withval\"], [SCILABINCDIR=\"\"])\n\n# First, check for \"--without-scilab\" or \"--with-scilab=no\".\nif test x\"${SCILABBIN}\" = xno; then\n  AC_MSG_NOTICE([Disabling Scilab])\n  SCILAB=\nelse\n  # Check for Scilab executable\n  if test \"x$SCILABBIN\" = xyes; then\n    AC_PATH_PROG(SCILAB, scilab)\n  else\n    AC_MSG_CHECKING(for scilab)\n    if test -f \"$SCILABBIN\"; then\n      AC_MSG_RESULT($SCILABBIN)\n      SCILAB=\"$SCILABBIN\"\n    else\n      AC_MSG_RESULT(not found)\n    fi\n  fi\n\n  if test -n \"$SCILAB\"; then\n    # Check for Scilab version (needs api_scilab so needs version 5.3.3 or higher)\n    SCILAB_VERSION=`$SCILAB -nwni -version | head -1 | sed -e 's|Scilab version \\\"\\(.*\\)\\\"|\\1|g'`\n\n    AC_MSG_CHECKING(Scilab version is higher than 5.3.2)\n    SCILAB_MAJOR_VERSION=`echo $SCILAB_VERSION | cut -d. -f1`\n    SCILAB_MINOR_VERSION=`echo $SCILAB_VERSION | cut -d. -f2`\n    SCILAB_MAINTENANCE_VERSION=`echo $SCILAB_VERSION | cut -d. -f3`\n    SCILAB_VERSION_NO_DOTS=`printf '%04d%02d%02d' \"$SCILAB_MAJOR_VERSION\" \"$SCILAB_MINOR_VERSION\" \"$SCILAB_MAINTENANCE_VERSION\"`\n\n    if test \"$SCILAB_VERSION_NO_DOTS\" -ge 00050303; then\n      AC_MSG_RESULT(yes - $SCILAB_VERSION)\n    else\n      AC_MSG_RESULT(no - $SCILAB_VERSION)\n      SCILAB=\n    fi\n\n    if test -n \"$SCILAB\"; then\n      # Set Scilab startup options depending on version\n      AC_MSG_CHECKING(for Scilab startup options)\n      SCILABOPT=\"-nwni -nb\"\n      if test \"$SCILAB_VERSION_NO_DOTS\" -ge 00050400; then\n        SCILABOPT+=\" -noatomsautoload\"\n      fi\n      if test \"$SCILAB_VERSION_NO_DOTS\" -ge 00060000; then\n        SCILABOPT+=\" -quit\"\n      fi\n      AC_MSG_RESULT($SCILABOPT)\n\n      # Check for Scilab header files\n      AC_MSG_CHECKING(for Scilab header files)\n      headers=\"`AS_DIRNAME([\"$SCILAB\"])`/../include\"\n      if test \"$SCILABINCDIR\" != \"\"; then\n        dirs=\"$SCILABINCDIR\"\n      elif test -d \"$SCI\"; then\n        dirs=\"$SCI/include $SCI/../../include\"\n      elif test -d \"$headers\"; then\n        dirs=\"$headers\"\n      elif test -n \"$PKG_CONFIG \"; then\n        dirs=`$PKG_CONFIG  scilab --cflags-only-I | sed -e 's/-I//g'`\n      else\n        dirs=\"/usr/include\"\n      fi\n      for i in $dirs; do\n        if test -r $i/api_scilab.h; then\n          AC_MSG_RESULT($i)\n          SCILABINCLUDE=\"-I$i\"\n          break\n        fi\n        if test -r $i/scilab/api_scilab.h; then\n          AC_MSG_RESULT($i/scilab)\n          SCILABINCLUDE=\"-I$i/scilab\"\n          break\n        fi\n      done\n      if test \"$SCILABINCLUDE\" = \"\" ; then\n        AC_MSG_RESULT(not found)\n        SCILAB=\n      fi\n    fi\n  fi\nfi\n\nAC_SUBST(SCILAB)\nAC_SUBST(SCILABINCLUDE)\nAC_SUBST(SCILABOPT)\nAC_SUBST(SCILAB_VERSION)\n\n#--------------------------------------------------------------------\n# Look for Tcl\n#--------------------------------------------------------------------\n\nTCLINCLUDE=\nTCLLIB=\nTCLPACKAGE=\nTCLLINK=\n\nAC_ARG_WITH(tclconfig, AS_HELP_STRING([--without-tcl], [Disable Tcl])\nAS_HELP_STRING([--with-tclconfig=path], [Set location of tclConfig.sh]), [with_tclconfig=\"$withval\"], [with_tclconfig=])\nAC_ARG_WITH(tcl,\n [  --with-tcl=path         Set location of Tcl package],[\n\tTCLPACKAGE=\"$withval\"], [TCLPACKAGE=\"$alllang_default\"])\nAC_ARG_WITH(tclincl,[  --with-tclincl=path     Set location of Tcl include directory],[\n\tTCLINCLUDE=\"-I$withval\"], [TCLINCLUDE=])\nAC_ARG_WITH(tcllib,[  --with-tcllib=path      Set location of Tcl library directory],[\n\tTCLLIB=\"-L$withval\"], [TCLLIB=])\n\n# First, check for \"--without-tcl\" or \"--with-tcl=no\".\nif test x\"${TCLPACKAGE}\" = xno; then\nAC_MSG_NOTICE([Disabling Tcl])\nelse\nAC_MSG_CHECKING([for Tcl configuration])\n# First check to see if --with-tclconfig was specified.\nif test x\"${with_tclconfig}\" != x ; then\n   if test -f \"${with_tclconfig}/tclConfig.sh\" ; then\n      TCLCONFIG=`(cd ${with_tclconfig}; pwd)`\n   else\n      AC_MSG_ERROR([${with_tcl} directory does not contain tclConfig.sh])\n   fi\nfi\n# check in a few common install locations\ndirs=\"/usr/lib*/ /usr/lib*/tcl*/ /usr/local/lib*/ /usr/local/lib*/tcl*/\"\ncase $host in\n*-*-darwin*)\n  tcl_framework=\"/System/Library/Frameworks/Tcl.framework/\"\n  macos_sysroot=\"$(xcodebuild -version -sdk macosx Path 2>/dev/null)\" # For MacOSX10.14 and later\n  dirs=\"$macos_sysroot$tcl_framework $tcl_framework $dirs\"\n  ;;\n*)\n  ;;\nesac\nif test x\"${TCLCONFIG}\" = x ; then\n  for d in $dirs ; do\n    for i in `ls -d -r $d 2>/dev/null` ; do\n      if test -f $i\"tclConfig.sh\" ; then\n        TCLCONFIG=`(cd $i; pwd)`\n        break\n      fi\n    done\n  done\nfi\nif test x\"${TCLCONFIG}\" = x ; then\n    AC_MSG_RESULT(no)\nelse\n    AC_MSG_RESULT(found $TCLCONFIG/tclConfig.sh)\n    . $TCLCONFIG/tclConfig.sh\n    if test -z \"$TCLINCLUDE\"; then\n        TCLINCLUDE=`echo $TCL_INCLUDE_SPEC`\n    fi\n    if test -z \"$TCLLIB\"; then\n        TCLLIB=$TCL_LIB_SPEC\n    fi\nfi\n\nif test -z \"$TCLINCLUDE\"; then\n   if test \"x$TCLPACKAGE\" != xyes; then\n\tTCLINCLUDE=\"-I$TCLPACKAGE/include\"\n   fi\nfi\n\nif test -z \"$TCLLIB\"; then\n   if test \"x$TCLPACKAGE\" != xyes; then\n\tTCLLIB=\"-L$TCLPACKAGE/lib -ltcl\"\n   fi\nfi\n\nAC_MSG_CHECKING(for Tcl header files)\nif test -z \"$TCLINCLUDE\"; then\nAC_PREPROC_IFELSE([AC_LANG_SOURCE([[#include <tcl.h>]])],[],[TCLINCLUDE=\"\"])\nif test -z \"$TCLINCLUDE\"; then\n\tdirs=\"/usr/local/include /usr/include /opt/local/include\"\n\tfor i in $dirs ; do\n\t\tif test -r $i/tcl.h; then\n\t\t\tAC_MSG_RESULT($i)\n\t\t\tTCLINCLUDE=\"-I$i\"\n\t\t\tbreak\n\t\tfi\n\tdone\nfi\nif test -z \"$TCLINCLUDE\"; then\n\tAC_MSG_RESULT(not found)\nfi\nelse\n        AC_MSG_RESULT($TCLINCLUDE)\nfi\n\nAC_MSG_CHECKING(for Tcl library)\nif test -z \"$TCLLIB\"; then\ndirs=\"/usr/local/lib /usr/lib /opt/local/lib /opt/freeware/lib\"\nfor i in $dirs ; do\n\tif test -r $i/libtcl.a; then\n\t    AC_MSG_RESULT($i)\n\t    TCLLIB=\"-L$i -ltcl\"\n\t    break\n\tfi\ndone\nif test -z \"$TCLLIB\"; then\n\tAC_MSG_RESULT(not found)\nfi\nelse\nAC_MSG_RESULT($TCLLIB)\nfi\n\n# Cygwin (Windows) needs the library for dynamic linking\ncase $host in\n*-*-cygwin* | *-*-mingw*) TCLDYNAMICLINKING=\"$TCLLIB\";;\n*-*-aix*) TCLDYNAMICLINKING=\"$TCLLIB\";;\n*)TCLDYNAMICLINKING=\"\";;\nesac\n\n# AIX needs -ltcl for linking at test time\ncase $host in\n*-*-aix*) TCLLINK=\"-ltcl\";;\n*)TCLLINK=\"\";;\nesac\n\ncase $host in\n*-*-darwin*)\n    TCLLDSHARED='$(CC) -dynamiclib -undefined suppress -flat_namespace'\n    TCLCXXSHARED='$(CXX) -dynamiclib -undefined suppress -flat_namespace'\n    ;;\n*)\n    TCLLDSHARED='$(LDSHARED)'\n    TCLCXXSHARED='$(CXXSHARED)'\n    ;;\nesac\n\nfi\n\nAC_SUBST(TCLINCLUDE)\nAC_SUBST(TCLLIB)\nAC_SUBST(TCLDYNAMICLINKING)\nAC_SUBST(TCLLDSHARED)\nAC_SUBST(TCLCXXSHARED)\nAC_SUBST(TCLLINK)\n\n#----------------------------------------------------------------\n# Determine which languages to use for examples/test-suite\n#----------------------------------------------------------------\n\ndnl We only need CC and CXX to test the C target language, and both of those\ndnl are required to build SWIG.\nSKIP_C=\nAC_SUBST(SKIP_C)\n\n\nSKIP_CSHARP=\nif test -z \"$CSHARPCOMPILER\" ; then\n    SKIP_CSHARP=\"1\"\nelse\n    if test \"cscc\" = \"$CSHARPCOMPILER\" && test -z \"$CSHARPCILINTERPRETER\" ; then\n      SKIP_CSHARP=\"1\"\n    fi\nfi\nAC_SUBST(SKIP_CSHARP)\n\n\nSKIP_D=\nif test -z \"$D2COMPILER\" ; then\n    SKIP_D=\"1\"\nfi\nAC_SUBST(SKIP_D)\n\n\nSKIP_GO=\nif test -z \"$GO\" ; then\n    SKIP_GO=\"1\"\nfi\nAC_SUBST(SKIP_GO)\n\n\nSKIP_GUILE=\nif test -z \"$GUILE\" || test -z \"$GUILE_LIBS\" ; then\n    SKIP_GUILE=\"1\"\nfi\nAC_SUBST(SKIP_GUILE)\n\nSKIP_JAVA=\nif test -z \"$JAVA\" || test -z \"$JAVAC\" || test -z \"$JAVAINC\" ; then\n    SKIP_JAVA=\"1\"\nfi\nAC_SUBST(SKIP_JAVA)\n\n\nSKIP_JAVASCRIPT=\nif test -z \"$JAVASCRIPT\" || ( test -z \"$NODEJS\" && test -z \"$JSCENABLED\" && test -z \"$JSV8ENABLED\" && test -z \"$JSNAPIENABLED\" ) ; then\n    SKIP_JAVASCRIPT=\"1\"\nfi\nAC_SUBST(SKIP_JAVASCRIPT)\n\n\nSKIP_LUA=\n# we need LUABIN & dynamic loading\nif test -z \"$LUABIN\" || test -z \"$LUADYNAMICLOADLIB\"; then\n    SKIP_LUA=\"1\"\nfi\nAC_SUBST(SKIP_LUA)\n\n\nSKIP_MZSCHEME=\nif test -z \"$MZC\" || test -z \"$MZDYNOBJ\" ; then\n    SKIP_MZSCHEME=\"1\"\nfi\nAC_SUBST(SKIP_MZSCHEME)\n\n\nSKIP_OCAML=\nif test -z \"$OCAMLC\" || test -z \"$CAMLP4\" ; then\n    SKIP_OCAML=\"1\"\nfi\nAC_SUBST(SKIP_OCAML)\n\n\nSKIP_OCTAVE=\nif test -z \"$OCTAVE\" ; then\n    SKIP_OCTAVE=\"1\"\nfi\nAC_SUBST(SKIP_OCTAVE)\n\n\nSKIP_PHP=\nif test -z \"$PHP\" || test -z \"$PHPINC\" ; then\n    SKIP_PHP=\"1\"\nfi\nAC_SUBST(SKIP_PHP)\n\n\nSKIP_PERL5=\nif test -z \"$PERL\" || test -z \"$PERL5EXT\" || test -z \"$PERL5TESTMORE\"; then\n    SKIP_PERL5=\"1\"\nfi\nAC_SUBST(SKIP_PERL5)\n\n\nSKIP_PYTHON=\nif (test -z \"$PYINCLUDE\" || test -z \"$PYLINK\") &&\n   (test -z \"$PY3INCLUDE\" || test -z \"$PY3LINK\") ; then\n    SKIP_PYTHON=\"1\"\nfi\nAC_SUBST(SKIP_PYTHON)\n\n\nSKIP_PYTHON3=\nif test -z \"$PY3INCLUDE\" || test -z \"$PY3LINK\" ; then\n    SKIP_PYTHON3=\"1\"\nfi\nAC_SUBST(SKIP_PYTHON3)\n\n\nSKIP_R=\nif test -z \"$RBIN\" ; then\n    SKIP_R=\"1\"\nfi\nAC_SUBST(SKIP_R)\n\n\nSKIP_RUBY=\nif test -z \"$RUBY\" || test -z \"$RUBYINCLUDE\" || test -z \"$RUBYLIB\" ; then\n    SKIP_RUBY=\"1\"\nfi\nAC_SUBST(SKIP_RUBY)\n\n\nSKIP_SCILAB=\nif test -z \"$SCILAB\"; then\n    SKIP_SCILAB=\"1\"\nfi\nAC_SUBST(SKIP_SCILAB)\n\n\nSKIP_TCL=\nif test -z \"$TCLINCLUDE\" || test -z \"$TCLLIB\" ; then\n    SKIP_TCL=\"1\"\nfi\nAC_SUBST(SKIP_TCL)\n\n\n#----------------------------------------------------------------\n# Additional language dependencies\n#----------------------------------------------------------------\n\nSKIP_ANDROID=\nif test -z \"$ANDROID\" || test -z \"$ADB\" || test -z \"$ANT\" || test -z \"$NDKBUILD\" ; then\n    SKIP_ANDROID=\"1\"\nfi\nAC_SUBST(SKIP_ANDROID)\n\n\n\n#----------------------------------------------------------------\n# Miscellaneous\n#----------------------------------------------------------------\n\nABS_SRCDIR=`(cd ${srcdir} && pwd)`\n\ndnl Under Cygwin, we may need native absolute path as it is used by SWIG, which\ndnl may be a native, and not a Cygwin, program (this is the case when it's\ndnl built using MinGW or cccl compiler in Cygwin environment). However it may,\ndnl although this is probably more rare, also be built as a Cygwin program.\ndnl Using \"mixed\" path like we do here allows the path to work in both cases.\ncase $host in\n  *-*-mingw* ) ABS_SRCDIR=`${srcdir}/Tools/convertpath -m $ABS_SRCDIR` ;;\n  *-*-cygwin* | *-*-msys*) ABS_SRCDIR=`cygpath --mixed $ABS_SRCDIR` ;;\nesac\n\n# Root directory\nROOT_DIR=`pwd`\ncase $host in\n*-*-cygwin*)\n  # Translate path for native Windows compilers for use with 'make check'\n  if (cygpath --mixed $ROOT_DIR) >/dev/null 2>/dev/null; then\n    ROOT_DIR=`cygpath --mixed $ROOT_DIR`\n  fi\n  ;;\nesac\n\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-msys*)\n  # Extra files generated by some Windows compilers\n  EXTRA_CLEAN=\"*.stackdump *.exp *.lib *.pdb *.ilk\"\n  ;;\nesac\n\nAC_SUBST(ROOT_DIR)\nAC_SUBST(EXTRA_CLEAN)\nAC_SUBST(ac_aux_dir)\n\n# Configure SWIG_LIB path\n\nAC_ARG_WITH(swiglibdir,[  --with-swiglibdir=DIR   Put SWIG system-independent libraries into DIR.],\n  [swig_lib=\"$withval\"], [swig_lib=\"${datadir}/swig/${PACKAGE_VERSION}\"])\nSWIG_LIB_INSTALL=${swig_lib}\nAC_SUBST(SWIG_LIB_INSTALL)\nAC_DEFINE_DIR(SWIG_LIB, swig_lib, [Directory for SWIG system-independent libraries])\n\ncase $build in\n  # Windows does not understand unix directories. Convert into a windows directory with drive letter.\n  *-*-mingw*) SWIG_LIB_WIN_UNIX=`${srcdir}/Tools/convertpath -m $SWIG_LIB`;;\n  *-*-cygwin*) SWIG_LIB_WIN_UNIX=`cygpath --mixed \"$SWIG_LIB\"`;;\n  *) SWIG_LIB_WIN_UNIX=\"\";;\nesac\nAC_DEFINE_UNQUOTED(SWIG_LIB_WIN_UNIX, [\"$SWIG_LIB_WIN_UNIX\"], [Directory for SWIG system-independent libraries (Unix install on native Windows)])\n\nSWIG_LIB_PREINST=$ABS_SRCDIR/Lib\nAC_SUBST(SWIG_LIB_PREINST)\n\ndnl For testing purposes, clear SWIG_LIB when building SWIG in the source\ndnl directory under Windows because it is supposed to work without SWIG_LIB\ndnl being set. Otherwise it always needs to be set.\nSWIG_LIB_SET=\"env SWIG_LIB=\\$(SWIG_LIB_DIR)\"\nif test \"${srcdir}\" = \".\"; then\n    AC_EGREP_CPP([yes],\n    [#ifdef _WIN32\n     yes\n    #endif\n    ], [SWIG_LIB_SET=\"env SWIG_LIB=\"], [])\nfi\nAC_SUBST(SWIG_LIB_SET)\n\nAC_CONFIG_FILES([\n    Makefile\n    Examples/Makefile\n    Examples/test-suite/errors/Makefile\n    Examples/test-suite/c/Makefile\n    Examples/test-suite/csharp/Makefile\n    Examples/test-suite/d/Makefile\n    Examples/test-suite/go/Makefile\n    Examples/test-suite/guile/Makefile\n    Examples/test-suite/java/Makefile\n    Examples/test-suite/javascript/Makefile\n    Examples/test-suite/lua/Makefile\n    Examples/test-suite/mzscheme/Makefile\n    Examples/test-suite/ocaml/Makefile\n    Examples/test-suite/octave/Makefile\n    Examples/test-suite/perl5/Makefile\n    Examples/test-suite/php/Makefile\n    Examples/test-suite/python/Makefile\n    Examples/test-suite/r/Makefile\n    Examples/test-suite/ruby/Makefile\n    Examples/test-suite/scilab/Makefile\n    Examples/test-suite/tcl/Makefile\n    Source/Makefile\n    Tools/javascript/Makefile\n])\nAC_CONFIG_FILES([preinst-swig], [chmod +x preinst-swig])\nAC_CONFIG_FILES([CCache/ccache_swig_config.h])\n\n#--------------------------------------------------------------------\n# Building Examples/ out of source directory\n#--------------------------------------------------------------------\n\n# If building out of source tree, replicate Examples/ source tree in\n# build directory, and copy over Makefiles from source directory.\n# Prefix each Makefile with a header which sets SRCDIR to the relative\n# source directory, and provides a rule for updating the Makefile from\n# its original source.\nAC_CONFIG_COMMANDS([Examples],[\n  if test \"x${srcdir}\" != \"x.\" ; then\n    AC_MSG_NOTICE([generating Examples build tree])\n    for mkfile in `cd ${srcdir} && find Examples/ -type f -name Makefile`; do\n      dir=`dirname ${mkfile}`\n      d=${dir}\n      reldir=\"\"\n      while test \"x$d\" != \"x.\" ; do\n        d=`dirname $d`\n        reldir=\"${reldir}../\"\n      done\n      relsrcdir=${reldir}${srcdir}/\n      AS_MKDIR_P([${dir}])\n      cat <<EOF >${mkfile}\n# DO NOT EDIT: instead edit ${relsrcdir}${mkfile}\n# and run (cd ${reldir} && ./config.status) to regenerate\nTOP_BUILDDIR_TO_TOP_SRCDIR = ${srcdir}/\nSRCDIR = ${relsrcdir}${dir}/\n\nEOF\n      cat ${srcdir}/${mkfile} >>${mkfile}\n    done\n  fi\n])\n\n#--------------------------------------------------------------------\n\nAC_OUTPUT\n\nlangs=\"\"\ntest -n \"$SKIP_C\"\t\t|| langs=\"${langs}c \"\ntest -n \"$SKIP_CSHARP\"\t\t|| langs=\"${langs}csharp \"\ntest -n \"$SKIP_D\"\t\t|| langs=\"${langs}d \"\ntest -n \"$SKIP_GO\"\t\t|| langs=\"${langs}go \"\ntest -n \"$SKIP_GUILE\"\t\t|| langs=\"${langs}guile \"\ntest -n \"$SKIP_JAVA\"\t\t|| langs=\"${langs}java \"\ntest -n \"$SKIP_JAVASCRIPT\"\t|| langs=\"${langs}javascript \"\ntest -n \"$SKIP_LUA\"\t\t|| langs=\"${langs}lua \"\ntest -n \"$SKIP_MZSCHEME\"\t|| langs=\"${langs}mzscheme \"\ntest -n \"$SKIP_OCAML\"\t\t|| langs=\"${langs}ocaml \"\ntest -n \"$SKIP_OCTAVE\"\t\t|| langs=\"${langs}octave \"\ntest -n \"$SKIP_PERL5\"\t\t|| langs=\"${langs}perl5 \"\ntest -n \"$SKIP_PHP\"\t\t|| langs=\"${langs}php \"\ntest -n \"$SKIP_PYTHON\"\t\t|| langs=\"${langs}python \"\ntest -n \"$SKIP_R\"\t\t|| langs=\"${langs}r \"\ntest -n \"$SKIP_RUBY\"\t\t|| langs=\"${langs}ruby \"\ntest -n \"$SKIP_SCILAB\"\t\t|| langs=\"${langs}scilab \"\ntest -n \"$SKIP_TCL\"\t\t|| langs=\"${langs}tcl \"\n\necho \"\nThe SWIG test-suite and examples are configured for the following languages:\n$langs\n\"\n\ndnl configure.ac ends here\n"
        },
        {
          "name": "preinst-swig.in",
          "type": "blob",
          "size": 0.232421875,
          "content": "#!/bin/sh\n\n# Convenience script for running SWIG before it is installed.\n# Intended for ad-hoc usage and not by the test-suite or examples.\n\nbuilddir=`dirname \"$0\"`\nSWIG_LIB='@SWIG_LIB_PREINST@'\nexport SWIG_LIB\nexec \"$builddir/swig\" \"$@\"\n"
        }
      ]
    }
  ]
}