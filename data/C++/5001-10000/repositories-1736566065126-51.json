{
  "metadata": {
    "timestamp": 1736566065126,
    "page": 51,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "scylladb/seastar",
      "stars": 8479,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0107421875,
          "content": ".git\nbuild\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.02734375,
          "content": "*.cc diff=cpp\n*.hh diff=cpp\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1591796875,
          "content": ".cooking_memory\n.cproject\n.project\n.settings\nbuild*\nbuild.ninja\ncscope.*\n__pycache__/\ncmake/Cooking.cmake\ntags\n.idea/\n.vscode/\ncompile_commands.json\n.clangd\n.cache"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0458984375,
          "content": "[submodule \"dpdk\"]\n\tpath = dpdk\n\turl = ../dpdk\n"
        },
        {
          "name": ".gitorderfile",
          "type": "blob",
          "size": 0.021484375,
          "content": "*.py\n*.hh\n*.rl\n*.cc\n*\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.2958984375,
          "content": "Avi Kivity <avi@scylladb.com> Avi Kivity' via seastar-dev <seastar-dev@googlegroups.com>\nRaphael S. Carvalho <raphaelsc@scylladb.com> Raphael S. Carvalho' via seastar-dev <seastar-dev@googlegroups.com>\nPavel Emelyanov <xemul@scylladb.com> Pavel Emelyanov' via seastar-dev <seastar-dev@googlegroups.com>\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 41.544921875,
          "content": "#\n# This file is open source software, licensed to you under the terms\n# of the Apache License, Version 2.0 (the \"License\").  See the NOTICE file\n# distributed with this work for additional information regarding copyright\n# ownership.  You may not use this file except in compliance with the License.\n#\n# You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\n#\n# Copyright (C) 2018 Scylladb, Ltd.\n#\n\ncmake_minimum_required (VERSION 3.13)\n\nlist (APPEND CMAKE_MODULE_PATH\n  ${CMAKE_CURRENT_SOURCE_DIR}/cmake\n  ${CMAKE_CURRENT_BINARY_DIR})\n\ncmake_policy (SET CMP0090 NEW)\nforeach (policy CMP0127 CMP0135 CMP0167)\n  if (POLICY ${policy})\n    cmake_policy (SET ${policy} NEW)\n  endif ()\nendforeach ()\n\ninclude (Cooking OPTIONAL)\n\n# This variable impacts the way DPDK is configured by cmake-cooking (if DPDK is enabled), so its definition needs to\n# come before PROJECT.\nset (Seastar_DPDK_MACHINE\n  \"native\"\n  CACHE\n  STRING\n  \"Configure DPDK for this processor architecture (if `Seastar_DPDK` is enabled). It configures -march or -mcpu\")\n\nproject (Seastar\n  VERSION 1.0\n  LANGUAGES CXX)\n\nset (Seastar_ALLOC_FAILURE_INJECTION\n  \"DEFAULT\"\n  CACHE\n  STRING\n  \"Enable failure injection into the Seastar allocator. Can be ON, OFF or DEFAULT (which enables it for Dev mode)\")\n\noption (Seastar_TASK_BACKTRACE\n  \"Collect backtrace at deferring points.\"\n  OFF)\n\noption (Seastar_DEBUG_ALLOCATIONS\n  \"For now just writes 0xab to newly allocated memory\"\n  OFF)\n\noption (Seastar_SSTRING\n  \"Use seastar's own string implementation\"\n  ON)\n\noption (Seastar_DEPRECATED_OSTREAM_FORMATTERS\n  \"Enable operator<< for formatting standard library containers, which will be deprecated in future\"\n  ON)\n\nset (Seastar_API_LEVEL\n  \"7\"\n  CACHE\n  STRING\n  \"Seastar compatibility API level (7=unified CPU/IO scheduling groups\")\n\nset_property (CACHE Seastar_API_LEVEL\n  PROPERTY\n  STRINGS 7)\n\nset (Seastar_SCHEDULING_GROUPS_COUNT\n  \"16\"\n  CACHE\n  STRING\n  \"A positive number to set Seastar's reactor number of allowed different scheduling groups.\")\n\nif (NOT Seastar_SCHEDULING_GROUPS_COUNT MATCHES \"^[1-9][0-9]*\")\n  message(FATAL_ERROR \"Seastar_SCHEDULING_GROUPS_COUNT must be a positive number (${Seastar_SCHEDULING_GROUPS_COUNT})\")\nendif ()\n\n#\n# Add a dev build type.\n#\n# All pre-defined build modes include optimizations or debug info,\n# which make them slow to build. The dev build mode is intended for\n# fast build/test iteration.\n#\n\nif (CMAKE_CXX_COMPILER_ID MATCHES Clang)\n  set (CMAKE_CXX_FLAGS_DEV_OPT_LEVEL \"-O2\")\nelse ()\n  set (CMAKE_CXX_FLAGS_DEV_OPT_LEVEL \"-O1\")\nendif ()\n\nset (CMAKE_CXX_FLAGS_DEV\n  \"${CMAKE_CXX_FLAGS_DEV_OPT_LEVEL}\"\n  CACHE\n  STRING\n  \"Flags used by the C++ compiler during dev builds.\"\n  FORCE)\n\nset (CMAKE_C_FLAGS_DEV\n  \"-O1\"\n  CACHE\n  STRING\n  \"Flags used by the C compiler during dev builds.\"\n  FORCE)\n\nset (CMAKE_EXE_LINKER_FLAGS_DEV\n  \"\"\n  CACHE\n  STRING\n  \"Flags used for linking binaries during dev builds.\"\n  FORCE)\n\nset (CMAKE_SHARED_LINKER_FLAGS_DEV\n  \"\"\n  CACHE\n  STRING\n  \"Flags used by the shared libraries linker during builds.\"\n  FORCE)\n\nmark_as_advanced (\n    CMAKE_CXX_FLAGS_DEV\n    CMAKE_C_FLAGS_DEV\n    CMAKE_EXE_LINKER_FLAGS_DEV\n    CMAKE_SHARED_LINKER_FLAGS_DEV)\n\nset (CMAKE_CXX_FLAGS_SANITIZE\n  \"-Os -g\"\n  CACHE\n  STRING\n  \"Flags used by the C++ compiler during sanitize builds.\"\n  FORCE)\n\nset (CMAKE_CXX_STANDARD\n  \"23\"\n  CACHE\n  STRING\n  \"C++ standard to build with.\")\n\ninclude (CMakeDependentOption)\ncmake_dependent_option (Seastar_MODULE\n  \"Build a C++20 module instead of a traditional library\" OFF\n  \"CMAKE_VERSION VERSION_GREATER_EQUAL 3.26;CMAKE_CXX_STANDARD GREATER_EQUAL 20\" OFF)\n\nset (CMAKE_C_FLAGS_SANITIZE\n  \"-Os -g\"\n  CACHE\n  STRING\n  \"Flags used by the C compiler during sanitize builds.\"\n  FORCE)\n\nset (CMAKE_EXE_LINKER_FLAGS_SANITIZE\n  \"\"\n  CACHE\n  STRING\n  \"Flags used for linking binaries during sanitize builds.\"\n  FORCE)\n\nset (CMAKE_SHARED_LINKER_FLAGS_SANITIZE\n  \"\"\n  CACHE\n  STRING\n  \"Flags used by the shared libraries linker during sanitize builds.\"\n  FORCE)\n\nmark_as_advanced (\n    CMAKE_CXX_FLAGS_SANITIZE\n    CMAKE_C_FLAGS_SANITIZE\n    CMAKE_EXE_LINKER_FLAGS_SANITIZE\n    CMAKE_SHARED_LINKER_FLAGS_SANITIZE)\n\nset (CMAKE_BUILD_TYPE\n  \"${CMAKE_BUILD_TYPE}\"\n  CACHE\n  STRING\n  \"Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel Dev Sanitize.\"\n  FORCE)\n\nif (NOT CMAKE_BUILD_TYPE)\n  set (CMAKE_BUILD_TYPE \"Release\")\nendif ()\n\nset (Seastar_ALLOC_PAGE_SIZE\n  \"\"\n  CACHE\n  STRING\n  \"Override the Seastar allocator page size, in bytes.\")\n\nfunction (set_option_if_package_is_found option_name package_name)\n  # if the package is found, set the option on behalf of user unless it is\n  # explicitly specified,\n  if (DEFINED ${option_name})\n    return ()\n  endif ()\n  if (${package_name}_FOUND)\n    set (${option_name} ON CACHE BOOL \"\")\n  endif ()\nendfunction ()\n\n# When Seastar is a top-level project, enable the non-library targets by default.\n# If it is embedded with `add_subdirectory`, disable them.\nif (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)\n  set (Seastar_MASTER_PROJECT ON)\nelse ()\n  set (Seastar_MASTER_PROJECT OFF)\nendif ()\n\noption (Seastar_APPS\n  \"Enable application targets.\"\n  ${Seastar_MASTER_PROJECT})\n\nset (Seastar_CXX_FLAGS\n  \"\"\n  CACHE\n  STRING\n  \"Semicolon-separated list of extra compilation flags for Seastar itself.\")\n\noption (Seastar_DEMOS\n  \"Enable demonstration targets.\"\n  ${Seastar_MASTER_PROJECT})\n\noption (Seastar_DOCS\n  \"Enable documentation targets.\"\n  ${Seastar_MASTER_PROJECT})\n\noption (Seastar_DPDK\n  \"Enable DPDK support.\"\n  OFF)\n\noption (Seastar_EXCLUDE_APPS_FROM_ALL\n  \"When enabled alongside Seastar_APPS, do not build applications by default.\"\n  OFF)\n\noption (Seastar_EXCLUDE_DEMOS_FROM_ALL\n  \"When enabled alongside Seastar_DEMOS, do not build demonstrations by default.\"\n  OFF)\n\noption (Seastar_EXCLUDE_TESTS_FROM_ALL\n  \"When enabled alongside Seastar_TESTING, do not build tests by default.\"\n  OFF)\n\noption (Seastar_EXECUTE_ONLY_FAST_TESTS\n  \"Only execute tests which run quickly.\"\n  OFF)\n\noption (Seastar_HWLOC\n  \"Enable hwloc support.\"\n  ON)\n\nif (DEFINED Seastar_IO_URING)\n  option (Seastar_IO_URING\n    \"Enable io_uring support.\"\n    ON)\nendif ()\n\nset (Seastar_JENKINS\n  \"\"\n  CACHE\n  STRING\n  \"If non-empty, the prefix for XML files containing the results of running tests (for Jenkins).\")\n\nset (Seastar_LD_FLAGS\n  \"\"\n  CACHE\n  STRING\n  \"Semicolon-separated list of extra linking flags for Seastar itself.\")\n\noption (Seastar_INSTALL\n  \"Install targets.\"\n  ${Seastar_MASTER_PROJECT})\n\noption (Seastar_NUMA\n  \"Enable NUMA support.\"\n  ON)\n\noption (Seastar_TESTING\n  \"Enable testing targets.\"\n  ${Seastar_MASTER_PROJECT})\n\ninclude (CMakeDependentOption)\ncmake_dependent_option (Seastar_ENABLE_TESTS_ACCESSING_INTERNET\n  \"Enable tests accessing internet.\" ON\n  \"Seastar_TESTING\" OFF)\n\noption (Seastar_COMPRESS_DEBUG\n  \"Compress debug info.\"\n  ON)\n\noption (Seastar_SPLIT_DWARF\n  \"Use split dwarf.\"\n  OFF)\n\noption (Seastar_HEAP_PROFILING\n    \"Enable heap profiling. No effect when Seastar is compiled with the default allocator.\"\n    OFF)\n\noption (Seastar_DEFERRED_ACTION_REQUIRE_NOEXCEPT\n    \"Enable noexcept requirement for deferred actions.\"\n    ON)\n\nset (Seastar_TEST_TIMEOUT\n  \"300\"\n  CACHE\n  STRING\n  \"Maximum allowed time for a test to run, in seconds.\")\n\noption (BUILD_SHARED_LIBS\n  \"Build seastar library as shared libraries instead of static\"\n  OFF)\n# We set the following environment variables\n# * ASAN_OPTIONS=disable_coredump=0:abort_on_error=1:detect_stack_use_after_return=1:verify_asan_link_order=0\n#   By default ASan disables core dumps because they used to be\n#   huge. This is no longer the case since the shadow memory is\n#   excluded, so it is safe to enable them.\n#   Also, by default, to make sure it works as expected, ASan\n#   verifies if the ASan dynamic runtime is the first DSO in the\n#   initial library list by calling dl_iterate_phdr(3). But\n#   Seastar provides this symbol, and its implementation references\n#   some static variables. So if Seastar is built as a shared\n#   library, this causes a chicken and egg problem. In other words,\n#   ASan is loaded first, and it tries to reference a symbol which\n#   is in turn provided by another shared library which does not\n#   necessarily ready its static variables yet. And this leads\n#   to a segfault. So, we have to disable this check when\n#   \"BUILD_SHARED_LIBS\" is enabled.\n# * UBSAN_OPTIONS=halt_on_error=1:abort_on_error=1\n#   Fail the test if any undefined behavior is found and use abort\n#   instead of exit. Using abort is what causes core dumps to be\n#   produced.\n# * BOOST_TEST_CATCH_SYSTEM_ERRORS=no\n#   Normally the boost test library handles SIGABRT and prevents core\n#   dumps from being produced.\n# This works great with clang and gcc 10.2, but unfortunately not any\n# previous gcc.\nset (Seastar_ASAN_OPTIONS \"disable_coredump=0:abort_on_error=1\")\nif ((NOT (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")) OR\n    (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 10.2))\n  string (APPEND Seastar_ASAN_OPTIONS \":detect_stack_use_after_return=1\")\nendif ()\nif (BUILD_SHARED_LIBS)\n  string (APPEND Seastar_ASAN_OPTIONS \":verify_asan_link_order=0\")\nendif ()\n\n\nset (Seastar_TEST_ENVIRONMENT\n  \"ASAN_OPTIONS=${Seastar_ASAN_OPTIONS};UBSAN_OPTIONS=halt_on_error=1:abort_on_error=1;BOOST_TEST_CATCH_SYSTEM_ERRORS=no\"\n  CACHE\n  STRING\n  \"Environment variables for running tests\")\n\noption (Seastar_UNUSED_RESULT_ERROR\n  \"Make [[nodiscard]] violations an error (instead of a warning).\"\n  OFF)\n\nset (Seastar_STACK_GUARDS\n  \"DEFAULT\"\n  CACHE\n  STRING\n  \"Enable stack guards. Can be ON, OFF or DEFAULT (which enables it for non release builds)\")\n\nset (Seastar_SANITIZE\n  \"DEFAULT\"\n  CACHE\n  STRING\n  \"Enable ASAN and UBSAN. Can be ON, OFF or DEFAULT (which enables it for Debug and Sanitize)\")\n\nset (Seastar_DEBUG_SHARED_PTR\n  \"DEFAULT\"\n  CACHE\n  STRING\n  \"Enable shared_ptr debugging. Can be ON, OFF or DEFAULT (which enables it for Debug and Sanitize)\")\n\n#\n# Useful (non-cache) variables.\n#\n\nset (Seastar_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})\nset (Seastar_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})\nset (Seastar_GEN_BINARY_DIR ${Seastar_BINARY_DIR}/gen)\n\n#\n# Dependencies.\n#\n\ninclude (SeastarDependencies)\nseastar_find_dependencies ()\n\n# Private build dependencies not visible to consumers\nfind_package (ragel 6.10 REQUIRED)\nfind_package (Threads REQUIRED)\nfind_package (PthreadSetName REQUIRED)\nfind_package (Valgrind REQUIRED)\n\ncmake_dependent_option (Seastar_LOGGER_COMPILE_TIME_FMT\n  \"Enable the compile-time {fmt} check when formatting logging messages\" ON\n  \"fmt_VERSION VERSION_GREATER_EQUAL 8.0.0\" OFF)\n\n#\n# Code generation helpers.\n#\n\nfunction (seastar_generate_protobuf)\n  set (one_value_args TARGET VAR IN_FILE OUT_DIR)\n  cmake_parse_arguments (args \"\" \"${one_value_args}\" \"\" ${ARGN})\n  get_filename_component (in_file_name ${args_IN_FILE} NAME_WE)\n  get_filename_component (in_file_dir ${args_IN_FILE} DIRECTORY)\n  set (header_out ${args_OUT_DIR}/${in_file_name}.pb.h)\n  set (source_out ${args_OUT_DIR}/${in_file_name}.pb.cc)\n\n  add_custom_command (\n    DEPENDS ${args_IN_FILE} protobuf::protoc\n    OUTPUT ${header_out} ${source_out}\n    COMMAND ${CMAKE_COMMAND} -E make_directory ${args_OUT_DIR}\n    COMMAND protobuf::protoc\n    ARGS --cpp_out=${args_OUT_DIR} -I${in_file_dir} ${args_IN_FILE})\n\n  add_custom_target (${args_TARGET}\n    DEPENDS\n      ${header_out}\n      ${source_out})\n\n  set (${args_VAR} ${header_out} ${source_out} PARENT_SCOPE)\nendfunction ()\n\nfunction (seastar_generate_ragel)\n  set (one_value_args TARGET VAR IN_FILE OUT_FILE)\n  cmake_parse_arguments (args \"\" \"${one_value_args}\" \"\" ${ARGN})\n  get_filename_component (out_dir ${args_OUT_FILE} DIRECTORY)\n\n  add_custom_command (\n    DEPENDS ${args_IN_FILE}\n    OUTPUT ${args_OUT_FILE}\n    COMMAND ${CMAKE_COMMAND} -E make_directory ${out_dir}\n    COMMAND ${ragel_RAGEL_EXECUTABLE} -G2 -o ${args_OUT_FILE} ${args_IN_FILE}\n    COMMAND sed -i -e \"'1h;2,$$H;$$!d;g'\" -re \"'s/static const char _nfa[^;]*;//g'\" ${args_OUT_FILE})\n\n  add_custom_target (${args_TARGET}\n    DEPENDS ${args_OUT_FILE})\n\n  set (${args_VAR} ${args_OUT_FILE} PARENT_SCOPE)\nendfunction ()\n\nfunction (seastar_generate_swagger)\n  set (one_value_args TARGET VAR IN_FILE OUT_DIR)\n  cmake_parse_arguments (args \"\" \"${one_value_args}\" \"\" ${ARGN})\n  get_filename_component (in_file_name ${args_IN_FILE} NAME)\n  set (generator ${Seastar_SOURCE_DIR}/scripts/seastar-json2code.py)\n  set (header_out ${args_OUT_DIR}/${in_file_name}.hh)\n  set (source_out ${args_OUT_DIR}/${in_file_name}.cc)\n\n  add_custom_command (\n    DEPENDS\n      ${args_IN_FILE}\n      ${generator}\n    OUTPUT ${header_out} ${source_out}\n    COMMAND ${CMAKE_COMMAND} -E make_directory ${args_OUT_DIR}\n    COMMAND ${generator} --create-cc -f ${args_IN_FILE} -o ${header_out})\n\n  add_custom_target (${args_TARGET}\n    DEPENDS\n      ${header_out}\n      ${source_out})\n\n  set (${args_VAR} ${header_out} ${source_out} PARENT_SCOPE)\nendfunction ()\n\n#\n# The `seastar` library.\n#\n\nseastar_generate_ragel (\n  TARGET seastar_http_chunk_parsers\n  VAR http_chunk_parsers_file\n  IN_FILE ${CMAKE_CURRENT_SOURCE_DIR}/src/http/chunk_parsers.rl\n  OUT_FILE ${Seastar_GEN_BINARY_DIR}/include/seastar/http/chunk_parsers.hh)\n\nseastar_generate_ragel (\n  TARGET seastar_http_request_parser\n  VAR http_request_parser_file\n  IN_FILE ${CMAKE_CURRENT_SOURCE_DIR}/src/http/request_parser.rl\n  OUT_FILE ${Seastar_GEN_BINARY_DIR}/include/seastar/http/request_parser.hh)\n\nseastar_generate_ragel (\n  TARGET seastar_http_response_parser\n  VAR http_response_parser_file\n  IN_FILE ${CMAKE_CURRENT_SOURCE_DIR}/src/http/response_parser.rl\n  OUT_FILE ${Seastar_GEN_BINARY_DIR}/include/seastar/http/response_parser.hh)\n\nseastar_generate_protobuf (\n  TARGET seastar_proto_metrics2\n  VAR proto_metrics2_files\n  IN_FILE ${CMAKE_CURRENT_SOURCE_DIR}/src/proto/metrics2.proto\n  OUT_DIR ${Seastar_GEN_BINARY_DIR}/src/proto)\n\nadd_library (seastar\n  ${http_chunk_parsers_file}\n  ${http_request_parser_file}\n  ${proto_metrics2_files}\n  ${seastar_dpdk_obj}\n  include/seastar/core/abort_source.hh\n  include/seastar/core/alien.hh\n  include/seastar/core/align.hh\n  include/seastar/core/aligned_buffer.hh\n  include/seastar/core/app-template.hh\n  include/seastar/core/array_map.hh\n  include/seastar/core/bitops.hh\n  include/seastar/core/bitset-iter.hh\n  include/seastar/core/byteorder.hh\n  include/seastar/core/cacheline.hh\n  include/seastar/core/checked_ptr.hh\n  include/seastar/core/chunked_fifo.hh\n  include/seastar/core/circular_buffer.hh\n  include/seastar/core/circular_buffer_fixed_capacity.hh\n  include/seastar/core/condition-variable.hh\n  include/seastar/core/deleter.hh\n  include/seastar/core/distributed.hh\n  include/seastar/core/do_with.hh\n  include/seastar/core/dpdk_rte.hh\n  include/seastar/core/enum.hh\n  include/seastar/core/exception_hacks.hh\n  include/seastar/core/execution_stage.hh\n  include/seastar/core/expiring_fifo.hh\n  include/seastar/core/fair_queue.hh\n  include/seastar/core/file.hh\n  include/seastar/core/file-types.hh\n  include/seastar/core/fsqual.hh\n  include/seastar/core/fstream.hh\n  include/seastar/core/function_traits.hh\n  include/seastar/core/future-util.hh\n  include/seastar/core/future.hh\n  include/seastar/core/gate.hh\n  include/seastar/core/iostream-impl.hh\n  include/seastar/core/iostream.hh\n  include/seastar/util/later.hh\n  include/seastar/core/layered_file.hh\n  include/seastar/core/linux-aio.hh\n  include/seastar/core/loop.hh\n  include/seastar/core/lowres_clock.hh\n  include/seastar/core/manual_clock.hh\n  include/seastar/core/map_reduce.hh\n  include/seastar/core/memory.hh\n  include/seastar/core/metrics.hh\n  include/seastar/core/metrics_api.hh\n  include/seastar/core/metrics_registration.hh\n  include/seastar/core/metrics_types.hh\n  include/seastar/core/pipe.hh\n  include/seastar/core/posix.hh\n  include/seastar/core/preempt.hh\n  include/seastar/core/prefetch.hh\n  include/seastar/core/print.hh\n  include/seastar/core/prometheus.hh\n  include/seastar/core/queue.hh\n  include/seastar/core/ragel.hh\n  include/seastar/core/reactor.hh\n  include/seastar/core/report_exception.hh\n  include/seastar/core/resource.hh\n  include/seastar/core/rwlock.hh\n  include/seastar/core/scattered_message.hh\n  include/seastar/core/scheduling.hh\n  include/seastar/core/scollectd.hh\n  include/seastar/core/scollectd_api.hh\n  include/seastar/core/seastar.hh\n  include/seastar/core/semaphore.hh\n  include/seastar/core/shard_id.hh\n  include/seastar/core/sharded.hh\n  include/seastar/core/shared_future.hh\n  include/seastar/core/shared_mutex.hh\n  include/seastar/core/shared_ptr.hh\n  include/seastar/core/shared_ptr_debug_helper.hh\n  include/seastar/core/shared_ptr_incomplete.hh\n  include/seastar/core/simple-stream.hh\n  include/seastar/core/signal.hh\n  include/seastar/core/slab.hh\n  include/seastar/core/sleep.hh\n  include/seastar/core/sstring.hh\n  include/seastar/core/stall_sampler.hh\n  include/seastar/core/stream.hh\n  include/seastar/core/systemwide_memory_barrier.hh\n  include/seastar/core/task.hh\n  include/seastar/core/temporary_buffer.hh\n  include/seastar/core/thread.hh\n  include/seastar/core/thread_cputime_clock.hh\n  include/seastar/core/thread_impl.hh\n  include/seastar/core/timed_out_error.hh\n  include/seastar/core/timer-set.hh\n  include/seastar/core/timer.hh\n  include/seastar/core/transfer.hh\n  include/seastar/core/unaligned.hh\n  include/seastar/core/units.hh\n  include/seastar/core/vector-data-sink.hh\n  include/seastar/core/weak_ptr.hh\n  include/seastar/core/when_all.hh\n  include/seastar/core/with_scheduling_group.hh\n  include/seastar/core/with_timeout.hh\n  include/seastar/http/api_docs.hh\n  include/seastar/http/common.hh\n  include/seastar/http/exception.hh\n  include/seastar/http/file_handler.hh\n  include/seastar/http/function_handlers.hh\n  include/seastar/http/handlers.hh\n  include/seastar/http/httpd.hh\n  include/seastar/http/json_path.hh\n  include/seastar/http/matcher.hh\n  include/seastar/http/matchrules.hh\n  include/seastar/http/mime_types.hh\n  include/seastar/http/reply.hh\n  include/seastar/http/request.hh\n  include/seastar/http/routes.hh\n  include/seastar/http/short_streams.hh\n  include/seastar/http/transformers.hh\n  include/seastar/http/client.hh\n  include/seastar/json/formatter.hh\n  include/seastar/json/json_elements.hh\n  include/seastar/net/api.hh\n  include/seastar/net/arp.hh\n  include/seastar/net/byteorder.hh\n  include/seastar/net/config.hh\n  include/seastar/net/const.hh\n  include/seastar/net/dhcp.hh\n  include/seastar/net/dns.hh\n  include/seastar/net/dpdk.hh\n  include/seastar/net/ethernet.hh\n  include/seastar/net/inet_address.hh\n  include/seastar/net/ip.hh\n  include/seastar/net/ip_checksum.hh\n  include/seastar/net/native-stack.hh\n  include/seastar/net/net.hh\n  include/seastar/net/packet-data-source.hh\n  include/seastar/net/packet-util.hh\n  include/seastar/net/packet.hh\n  include/seastar/net/posix-stack.hh\n  include/seastar/net/proxy.hh\n  include/seastar/net/socket_defs.hh\n  include/seastar/net/stack.hh\n  include/seastar/net/tcp-stack.hh\n  include/seastar/net/tcp.hh\n  include/seastar/net/tls.hh\n  include/seastar/net/toeplitz.hh\n  include/seastar/net/udp.hh\n  include/seastar/net/unix_address.hh\n  include/seastar/net/virtio-interface.hh\n  include/seastar/net/virtio.hh\n  include/seastar/rpc/lz4_compressor.hh\n  include/seastar/rpc/lz4_fragmented_compressor.hh\n  include/seastar/rpc/multi_algo_compressor_factory.hh\n  include/seastar/rpc/rpc.hh\n  include/seastar/rpc/rpc_impl.hh\n  include/seastar/rpc/rpc_types.hh\n  include/seastar/util/alloc_failure_injector.hh\n  include/seastar/util/backtrace.hh\n  include/seastar/util/concepts.hh\n  include/seastar/util/bool_class.hh\n  include/seastar/util/conversions.hh\n  include/seastar/util/defer.hh\n  include/seastar/util/eclipse.hh\n  include/seastar/util/function_input_iterator.hh\n  include/seastar/util/indirect.hh\n  include/seastar/util/is_smart_ptr.hh\n  include/seastar/util/lazy.hh\n  include/seastar/util/log-cli.hh\n  include/seastar/util/log-impl.hh\n  include/seastar/util/log.hh\n  include/seastar/util/noncopyable_function.hh\n  include/seastar/util/optimized_optional.hh\n  include/seastar/util/print_safe.hh\n  include/seastar/util/process.hh\n  include/seastar/util/program-options.hh\n  include/seastar/util/read_first_line.hh\n  include/seastar/util/reference_wrapper.hh\n  include/seastar/util/spinlock.hh\n  include/seastar/util/std-compat.hh\n  include/seastar/util/transform_iterator.hh\n  include/seastar/util/tuple_utils.hh\n  include/seastar/util/variant_utils.hh\n  include/seastar/util/closeable.hh\n  include/seastar/util/source_location-compat.hh\n  include/seastar/util/short_streams.hh\n  include/seastar/websocket/server.hh\n  src/core/alien.cc\n  src/core/file.cc\n  src/core/fair_queue.cc\n  src/core/reactor_backend.cc\n  src/core/thread_pool.cc\n  src/core/app-template.cc\n  src/core/dpdk_rte.cc\n  src/core/exception_hacks.cc\n  src/core/execution_stage.cc\n  src/core/file-impl.hh\n  src/core/fsnotify.cc\n  src/core/fsqual.cc\n  src/core/fstream.cc\n  src/core/future.cc\n  src/core/future-util.cc\n  src/core/linux-aio.cc\n  src/core/memory.cc\n  src/core/metrics.cc\n  src/core/on_internal_error.cc\n  src/core/posix.cc\n  src/core/prometheus.cc\n  src/core/program_options.cc\n  src/core/reactor.cc\n  src/core/resource.cc\n  src/core/sharded.cc\n  src/core/scollectd.cc\n  src/core/scollectd-impl.hh\n  src/core/signal.cc\n  src/core/systemwide_memory_barrier.cc\n  src/core/smp.cc\n  src/core/sstring.cc\n  src/core/thread.cc\n  src/core/uname.cc\n  src/core/vla.hh\n  src/core/io_queue.cc\n  src/core/semaphore.cc\n  src/core/condition-variable.cc\n  src/http/api_docs.cc\n  src/http/common.cc\n  src/http/file_handler.cc\n  src/http/httpd.cc\n  src/http/json_path.cc\n  src/http/matcher.cc\n  src/http/mime_types.cc\n  src/http/reply.cc\n  src/http/routes.cc\n  src/http/transformers.cc\n  src/http/url.cc\n  src/http/client.cc\n  src/http/request.cc\n  src/json/formatter.cc\n  src/json/json_elements.cc\n  src/net/arp.cc\n  src/net/config.cc\n  src/net/dhcp.cc\n  src/net/dns.cc\n  src/net/dpdk.cc\n  src/net/ethernet.cc\n  src/net/inet_address.cc\n  src/net/ip.cc\n  src/net/ip_checksum.cc\n  src/net/native-stack-impl.hh\n  src/net/native-stack.cc\n  src/net/net.cc\n  src/net/packet.cc\n  src/net/posix-stack.cc\n  src/net/proxy.cc\n  src/net/socket_address.cc\n  src/net/stack.cc\n  src/net/tcp.cc\n  src/net/tls.cc\n  src/net/udp.cc\n  src/net/unix_address.cc\n  src/net/virtio.cc\n  src/rpc/lz4_compressor.cc\n  src/rpc/lz4_fragmented_compressor.cc\n  src/rpc/rpc.cc\n  src/util/alloc_failure_injector.cc\n  src/util/backtrace.cc\n  src/util/conversions.cc\n  src/util/exceptions.cc\n  src/util/file.cc\n  src/util/log.cc\n  src/util/process.cc\n  src/util/program-options.cc\n  src/util/read_first_line.cc\n  src/util/tmp_file.cc\n  src/util/short_streams.cc\n  src/websocket/server.cc\n  )\n\nadd_library (Seastar::seastar ALIAS seastar)\n\nadd_dependencies (seastar\n  seastar_http_chunk_parsers\n  seastar_http_request_parser\n  seastar_http_response_parser\n  seastar_proto_metrics2)\n\ntarget_include_directories (seastar\n  PUBLIC\n    $<INSTALL_INTERFACE:include>\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n    $<BUILD_INTERFACE:${Seastar_GEN_BINARY_DIR}/include>\n    $<BUILD_INTERFACE:${Seastar_GEN_BINARY_DIR}/src>\n  PRIVATE\n    ${CMAKE_CURRENT_SOURCE_DIR}/src)\n\nset (Seastar_PRIVATE_CXX_FLAGS\n  -fno-semantic-interposition\n  -UNDEBUG\n  -Wall\n  -Werror\n  -Wimplicit-fallthrough\n  -Wdeprecated\n  -Wno-error=deprecated)\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n  include (CheckGcc107852)\n  if (NOT Cxx_Compiler_BZ107852_Free)\n    list (APPEND Seastar_PRIVATE_CXX_FLAGS\n      -Wno-error=stringop-overflow\n      -Wno-error=array-bounds)\n  endif ()\n  list (APPEND Seastar_PRIVATE_CXX_FLAGS\n    -Wdeprecated-declarations\n    -Wno-error=deprecated-declarations)\nendif ()\n\nif (CMAKE_CXX_STANDARD GREATER_EQUAL 23)\n  include (CheckP2582R1)\n  if (Cxx_Compiler_IMPLEMENTS_P2581R1)\n    target_compile_definitions (seastar\n      PUBLIC SEASTAR_P2581R1)\n  endif ()\nendif ()\n\nif (BUILD_SHARED_LIBS)\n  # use initial-exec TLS, as it puts the TLS variables in the static TLS space\n  # instead of allocating them using malloc. otherwise intercepting mallocs and\n  # friends could lead to recursive call of malloc functions when a dlopen'ed\n  # shared object references a TLS variable and it in turn uses malloc. the\n  # downside of this workaround is that the static TLS space is used, and it is\n  # a global resource.\n  list (APPEND Seastar_PRIVATE_CXX_FLAGS\n    $<$<IN_LIST:$<CONFIG>,RelWithDebInfo;Dev>:-ftls-model=initial-exec>)\nelse ()\n  list (APPEND Seastar_PRIVATE_CXX_FLAGS -fvisibility=hidden)\nendif ()\n\nif (Seastar_COMPRESS_DEBUG)\n  # -gz doesn't imply -g, so it is safe to add it regardless of debug\n  # info being enabled.\n  list (APPEND Seastar_PRIVATE_CXX_FLAGS -gz)\nendif ()\n\ntarget_link_libraries (seastar\n  PUBLIC\n    Boost::boost\n    Boost::program_options\n    Boost::thread\n    c-ares::cares\n    fmt::fmt\n    lz4::lz4\n    SourceLocation::source_location\n  PRIVATE\n    ${CMAKE_DL_LIBS}\n    GnuTLS::gnutls\n    StdAtomic::atomic\n    lksctp-tools::lksctp-tools\n    protobuf::libprotobuf\n    rt::rt\n    ucontext::ucontext\n    yaml-cpp::yaml-cpp\n    Threads::Threads)\nif (CMAKE_VERSION VERSION_GREATER_EQUAL 3.26)\n  target_link_libraries (seastar\n    PRIVATE\n      \"$<BUILD_LOCAL_INTERFACE:Valgrind::valgrind>\")\nelse ()\n  target_link_libraries (seastar\n    PRIVATE\n      \"$<BUILD_INTERFACE:Valgrind::valgrind>\")\nendif ()\n\nif (Seastar_DPDK)\n  target_link_libraries (seastar\n    PRIVATE\n      DPDK::dpdk)\nendif ()\n\ninclude (TriStateOption)\ntri_state_option (${Seastar_SANITIZE}\n  DEFAULT_BUILD_TYPES \"Debug\" \"Sanitize\"\n  CONDITION condition)\nif (condition)\n  if (NOT Sanitizers_FOUND)\n    message (FATAL_ERROR \"Sanitizers not found!\")\n  endif ()\n  set (Seastar_Sanitizers_OPTIONS ${Sanitizers_COMPILE_OPTIONS})\n  target_link_libraries (seastar\n    PUBLIC\n      $<${condition}:Sanitizers::address>\n      $<${condition}:Sanitizers::undefined_behavior>)\nendif ()\n\n# We only need valgrind to find uninitialized memory uses, so disable\n# the leak sanitizer.\n# To test with valgrind run \"ctest -T memcheck\"\nset( MEMORYCHECK_COMMAND_OPTIONS \"--error-exitcode=1 --leak-check=no --trace-children=yes\" )\ninclude (CTest)\n\n#\n# We want asserts enabled on all modes, but cmake defaults to passing\n# -DNDEBUG in some modes. We add -UNDEBUG to our private options to\n# reenable it. To force asserts off pass -DNDEBUG in\n# Seastar_CXX_FLAGS.\n#\n# To disable -Werror, pass -Wno-error to Seastar_CXX_FLAGS.\n#\n\ntarget_compile_definitions(seastar\n  PUBLIC\n  SEASTAR_API_LEVEL=${Seastar_API_LEVEL}\n  $<$<BOOL:${BUILD_SHARED_LIBS}>:SEASTAR_BUILD_SHARED_LIBS>)\n\ntarget_compile_features(seastar\n  PUBLIC\n    cxx_std_${CMAKE_CXX_STANDARD})\n\ninclude (CheckCXXCompilerFlag)\ncheck_cxx_compiler_flag (\"-Wno-maybe-uninitialized -Werror\" MaybeUninitialized_FOUND)\nif (MaybeUninitialized_FOUND)\n  target_compile_options (seastar\n    PUBLIC\n      # With std::experimental::optional it is easy to hit\n      # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88897.  We disable\n      # -Wmaybe-uninitialized in here since otherwise we would have to\n      # disable it on many types used inside optional<>.\n      -Wno-maybe-uninitialized)\nendif ()\n\nif (Seastar_SSTRING)\n  target_compile_definitions (seastar\n    PUBLIC SEASTAR_SSTRING)\nendif ()\n\nif (Seastar_DEPRECATED_OSTREAM_FORMATTERS)\n  target_compile_definitions (seastar\n    PUBLIC SEASTAR_DEPRECATED_OSTREAM_FORMATTERS)\nendif ()\n\nif (LinuxMembarrier_FOUND)\n  list (APPEND Seastar_PRIVATE_COMPILE_DEFINITIONS SEASTAR_HAS_MEMBARRIER)\n\n  target_link_libraries (seastar\n    PRIVATE LinuxMembarrier::membarrier)\nendif ()\n\ntri_state_option (${Seastar_ALLOC_FAILURE_INJECTION}\n  DEFAULT_BUILD_TYPES \"Dev\"\n  CONDITION condition)\nif (condition)\n  target_compile_definitions (seastar\n    PUBLIC $<${condition}:SEASTAR_ENABLE_ALLOC_FAILURE_INJECTION>)\nendif ()\n\nif (Seastar_TASK_BACKTRACE)\n  target_compile_definitions (seastar\n    PUBLIC SEASTAR_TASK_BACKTRACE)\nendif ()\n\nif (Seastar_DEBUG_ALLOCATIONS)\n  target_compile_definitions (seastar\n    PRIVATE SEASTAR_DEBUG_ALLOCATIONS)\nendif ()\n\nif (Sanitizers_FIBER_SUPPORT)\n  list (APPEND Seastar_PRIVATE_COMPILE_DEFINITIONS SEASTAR_HAVE_ASAN_FIBER_SUPPORT)\nendif ()\n\nif (Seastar_ALLOC_PAGE_SIZE)\n  target_compile_definitions (seastar\n    PUBLIC SEASTAR_OVERRIDE_ALLOCATOR_PAGE_SIZE=${Seastar_ALLOC_PAGE_SIZE})\nendif ()\n\nif (Seastar_LOGGER_COMPILE_TIME_FMT)\n  target_compile_definitions (seastar\n    PUBLIC SEASTAR_LOGGER_COMPILE_TIME_FMT)\nendif ()\n\ntarget_compile_definitions (seastar\n  PUBLIC SEASTAR_SCHEDULING_GROUPS_COUNT=${Seastar_SCHEDULING_GROUPS_COUNT})\n\nif (Seastar_CXX_FLAGS)\n  list (APPEND Seastar_PRIVATE_CXX_FLAGS ${Seastar_CXX_FLAGS})\nendif ()\n\n# When using split dwarf --gdb-index is effectively required since\n# otherwise gdb is just too slow. We also want to use split dwarf in\n# as many compilation units as possible.  So while these flags don't\n# have to be public, we don't expect anyone to want to build seastar\n# with them and some client code without.\nif (Seastar_SPLIT_DWARF)\n  set (Seastar_SPLIT_DWARF_FLAG \"-Wl,--gdb-index\")\n  target_link_libraries (seastar PUBLIC\n    $<$<NOT:$<CONFIG:Dev>>:${Seastar_SPLIT_DWARF_FLAG}>)\n  target_compile_options (seastar PUBLIC\n    $<$<NOT:$<CONFIG:Dev>>:-gsplit-dwarf>)\nendif ()\n\nif (Seastar_HEAP_PROFILING)\n    set_property (\n      SOURCE \"src/core/memory.cc\"\n      PROPERTY\n      COMPILE_DEFINITIONS SEASTAR_HEAPPROF)\n    set_property (\n      SOURCE \"src/core/reactor.cc\"\n      PROPERTY\n      COMPILE_DEFINITIONS SEASTAR_HEAPPROF)\nendif ()\n\nif (Seastar_DEFERRED_ACTION_REQUIRE_NOEXCEPT)\n  list (APPEND Seastar_PRIVATE_COMPILE_DEFINITIONS SEASTAR_DEFERRED_ACTION_REQUIRE_NOEXCEPT)\nendif ()\n\nif (Seastar_DPDK)\n  if (CMAKE_SYSTEM_PROCESSOR MATCHES \"ppc64\")\n    target_compile_options (seastar\n      PUBLIC\n        -mcpu=${Seastar_DPDK_MACHINE}\n        -mtune=${Seastar_DPDK_MACHINE})\n  else()\n    target_compile_options (seastar\n      PUBLIC\n        -march=${Seastar_DPDK_MACHINE})\n  endif ()\n  target_compile_definitions (seastar\n    PUBLIC SEASTAR_HAVE_DPDK)\nendif ()\n\nif (Seastar_HWLOC)\n  list (APPEND Seastar_PRIVATE_COMPILE_DEFINITIONS SEASTAR_HAVE_HWLOC)\n\n  target_link_libraries (seastar\n    PRIVATE hwloc::hwloc)\nendif ()\n\nset_option_if_package_is_found (Seastar_IO_URING LibUring)\nif (Seastar_IO_URING)\n  list (APPEND Seastar_PRIVATE_COMPILE_DEFINITIONS SEASTAR_HAVE_URING)\n  target_link_libraries (seastar\n    PRIVATE URING::uring)\nendif ()\n\nif (Seastar_LD_FLAGS)\n  target_link_options (seastar\n    PRIVATE ${Seastar_LD_FLAGS})\nendif ()\n\nif (Seastar_NUMA)\n  list (APPEND Seastar_PRIVATE_COMPILE_DEFINITIONS SEASTAR_HAVE_NUMA)\n\n  target_link_libraries (seastar\n    PRIVATE numactl::numactl)\nendif ()\n\nif (SystemTap-SDT_FOUND)\n  list (APPEND Seastar_PRIVATE_COMPILE_DEFINITIONS SEASTAR_HAVE_SYSTEMTAP_SDT)\n\n  target_link_libraries (seastar\n    PRIVATE SystemTap::SDT)\nendif ()\n\ncheck_cxx_compiler_flag (\"-Werror=unused-result\" ErrorUnused_FOUND)\nif (ErrorUnused_FOUND)\n  if (Seastar_UNUSED_RESULT_ERROR)\n    target_compile_options (seastar\n      PUBLIC -Werror=unused-result)\n  else()\n    target_compile_options (seastar\n      PUBLIC -Wno-error=unused-result)\n  endif ()\nendif ()\n\ncheck_cxx_compiler_flag (\"-Wno-error=#warnings\" ErrorWarnings_FOUND)\nif (ErrorWarnings_FOUND)\n  target_compile_options (seastar\n      PRIVATE \"-Wno-error=#warnings\")\nendif ()\n\nforeach (definition\n    SEASTAR_DEBUG\n    SEASTAR_DEFAULT_ALLOCATOR\n    SEASTAR_SHUFFLE_TASK_QUEUE)\n  target_compile_definitions (seastar\n    PUBLIC\n      $<$<IN_LIST:$<CONFIG>,Debug;Sanitize>:${definition}>)\nendforeach ()\n\ntri_state_option (${Seastar_DEBUG_SHARED_PTR}\n  DEFAULT_BUILD_TYPES \"Debug\" \"Sanitize\"\n  CONDITION condition)\nif (condition)\n  target_compile_definitions (seastar\n    PUBLIC\n      $<${condition}:SEASTAR_DEBUG_SHARED_PTR>)\nendif ()\n\ntri_state_option (${Seastar_DEBUG_SHARED_PTR}\n  DEFAULT_BUILD_TYPES \"Debug\" \"Sanitize\"\n  CONDITION condition)\nif (condition)\n  target_compile_definitions (seastar\n    PUBLIC\n      $<${condition}:SEASTAR_DEBUG_PROMISE>)\nendif ()\n\ninclude (CheckLibc)\n\ntri_state_option (${Seastar_STACK_GUARDS}\n  DEFAULT_BUILD_TYPES \"Debug\" \"Sanitize\" \"Dev\"\n  CONDITION condition)\nif (condition)\n  # check for -fstack-clash-protection together with -Werror, because\n  # otherwise clang can soft-fail (return 0 but emit a warning) instead.\n  check_cxx_compiler_flag (\"-fstack-clash-protection -Werror\" StackClashProtection_FOUND)\n  if (StackClashProtection_FOUND)\n    target_compile_options (seastar\n      PUBLIC\n        $<${condition}:-fstack-clash-protection>)\n  endif ()\n  target_compile_definitions (seastar\n    PRIVATE\n      $<${condition}:SEASTAR_THREAD_STACK_GUARDS>)\nendif ()\n\ntarget_compile_definitions (seastar\n  PUBLIC\n    $<$<IN_LIST:$<CONFIG>,Dev;Debug>:SEASTAR_TYPE_ERASE_MORE>)\n\ntarget_compile_definitions (seastar\n  PRIVATE ${Seastar_PRIVATE_COMPILE_DEFINITIONS})\n\ntarget_compile_options (seastar\n  PRIVATE ${Seastar_PRIVATE_CXX_FLAGS})\n\nset_target_properties (seastar\n  PROPERTIES\n    CXX_STANDARD ${CMAKE_CXX_STANDARD}\n    CXX_EXTENSIONS ON)\n\nadd_library (seastar_private INTERFACE)\n\ntarget_compile_definitions (seastar_private\n  INTERFACE ${Seastar_PRIVATE_COMPILE_DEFINITIONS})\n\ntarget_compile_options (seastar_private\n  INTERFACE ${Seastar_PRIVATE_CXX_FLAGS})\n\ntarget_link_libraries (seastar_private\n  INTERFACE seastar)\n\n#\n# The testing library.\n#\n\nif (Seastar_INSTALL OR Seastar_TESTING)\n  add_library (seastar_testing\n    include/seastar/testing/entry_point.hh\n    include/seastar/testing/exchanger.hh\n    include/seastar/testing/random.hh\n    include/seastar/testing/seastar_test.hh\n    include/seastar/testing/test_case.hh\n    include/seastar/testing/test_runner.hh\n    include/seastar/testing/thread_test_case.hh\n    src/testing/entry_point.cc\n    src/testing/random.cc\n    src/testing/seastar_test.cc\n    src/testing/test_runner.cc)\n\n  add_library (Seastar::seastar_testing ALIAS seastar_testing)\n\n  target_compile_definitions (seastar_testing\n    PRIVATE ${Seastar_PRIVATE_COMPILE_DEFINITIONS})\n\n  target_compile_options (seastar_testing\n    PRIVATE ${Seastar_PRIVATE_CXX_FLAGS})\n\n  target_link_libraries (seastar_testing\n    PUBLIC\n      Boost::unit_test_framework\n      Boost::dynamic_linking\n      seastar)\n\n  add_library(seastar_perf_testing\n    src/testing/random.cc\n    include/seastar/testing/perf_tests.hh\n    tests/perf/perf_tests.cc\n    tests/perf/linux_perf_event.cc)\n  add_library (Seastar::seastar_perf_testing ALIAS seastar_perf_testing)\n  target_compile_definitions (seastar_perf_testing\n    PRIVATE ${Seastar_PRIVATE_COMPILE_DEFINITIONS})\n  target_compile_options (seastar_perf_testing\n    PRIVATE ${Seastar_PRIVATE_CXX_FLAGS})\n  target_link_libraries (seastar_perf_testing\n    PUBLIC\n    seastar)\n\nendif ()\n\nif (Seastar_MODULE)\n  if (POLICY CMP0155)\n    cmake_policy (SET CMP0155 NEW)\n  endif ()\n  include (CxxModulesRules)\n  add_subdirectory (src)\nendif ()\n\n#\n# The tests themselves.\n#\n\nif (Seastar_TESTING)\n  enable_testing ()\n\n  if (Seastar_EXCLUDE_TESTS_FROM_ALL)\n    set (exclude EXCLUDE_FROM_ALL)\n  else ()\n    set (exclude \"\")\n  endif ()\n\n  add_subdirectory (tests ${exclude})\nendif ()\n\n#\n# Demonstrations.\n#\n\nif (Seastar_DEMOS)\n  if (Seastar_EXCLUDE_DEMOS_FROM_ALL)\n    set (exclude EXCLUDE_FROM_ALL)\n  else ()\n    set (exclude \"\")\n  endif ()\n\n  add_subdirectory (demos ${exclude})\nendif ()\n\n#\n# Documentation.\n#\n\nif (Seastar_DOCS)\n  add_subdirectory (doc)\nendif ()\n\n#\n# Applications.\n#\n\nif (Seastar_APPS)\n  if (Seastar_EXCLUDE_APPS_FROM_ALL)\n    set (exclude EXCLUDE_FROM_ALL)\n  else ()\n    set (exclude \"\")\n  endif ()\n\n  add_subdirectory (apps ${exclude})\nendif ()\n\nif (CMAKE_BUILD_TYPE STREQUAL \"Dev\")\n  include (CheckHeaders)\n  include (CheckIncludeStyle)\n  add_custom_target (checkheaders)\n  add_custom_target (check-include-style)\n  foreach (lib seastar seastar_testing seastar_perf_testing)\n    if (TARGET ${lib})\n      seastar_check_self_contained (checkheaders ${lib}\n        INCLUDE \"\\\\.hh$\"\n        # impl.hh headers are internal implementations of .hh, so they are not\n        # compilable. let's exclude them from the files to be checked.\n        EXCLUDE \"_impl.hh$|-impl.hh$\")\n      seastar_check_include_style (check-include-style ${lib})\n    endif ()\n  endforeach ()\nendif ()\n\n#\n# Installation and export.\n#\n\nif (Seastar_INSTALL)\n  #\n  # pkg-config generation.\n  #\n  # Note that unlike the CMake \"config module\", this description is not relocatable because\n  # some dependencies do not natively support pkg-config.\n  #\n\n  # Necessary here for pkg-config.\n  include (GNUInstallDirs)\n\n  # Set paths in pkg-config files for installation.\n  set (Seastar_PKG_CONFIG_PREFIX ${CMAKE_INSTALL_PREFIX})\n  set (Seastar_PKG_CONFIG_LIBDIR ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})\n  set (Seastar_PKG_CONFIG_SEASTAR_INCLUDE_FLAGS \"-I${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}\")\n\n  get_property (_is_Multi_Config GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\n  if (_is_Multi_Config)\n    # use different library names for each config\n    set (Seastar_PC \"_$<CONFIG>.pc\")\n  else ()\n    set (Seastar_PC \".pc\")\n  endif ()\n\n  if(CMAKE_CXX_EXTENSIONS)\n    set(Seastar_CXX_COMPILE_OPTION ${CMAKE_CXX${CMAKE_CXX_STANDARD}_EXTENSION_COMPILE_OPTION})\n  else()\n    set(Seastar_CXX_COMPILE_OPTION ${CMAKE_CXX${CMAKE_CXX_STANDARD}_STANDARD_COMPILE_OPTION})\n  endif()\n\n  configure_file (\n    ${CMAKE_CURRENT_SOURCE_DIR}/pkgconfig/seastar.pc.in\n    ${CMAKE_CURRENT_BINARY_DIR}/pkgconfig/seastar-install${Seastar_PC}.in\n    @ONLY)\n\n  configure_file (\n    ${CMAKE_CURRENT_SOURCE_DIR}/pkgconfig/seastar-testing.pc.in\n    ${CMAKE_CURRENT_BINARY_DIR}/pkgconfig/seastar-testing-install.pc.in\n    @ONLY)\n\n  # Set paths in pkg-config files for direct use in the build directory.\n  set (Seastar_PKG_CONFIG_PREFIX ${CMAKE_CURRENT_BINARY_DIR})\n  set (Seastar_PKG_CONFIG_LIBDIR ${CMAKE_CURRENT_BINARY_DIR})\n  set (Seastar_PKG_CONFIG_SEASTAR_INCLUDE_FLAGS \"-I${CMAKE_CURRENT_SOURCE_DIR}/include -I${CMAKE_CURRENT_BINARY_DIR}/gen/include\")\n\n  configure_file (\n    ${CMAKE_CURRENT_SOURCE_DIR}/pkgconfig/seastar.pc.in\n    ${CMAKE_CURRENT_BINARY_DIR}/pkgconfig/seastar${Seastar_PC}.in\n    @ONLY)\n\n  configure_file (\n    ${CMAKE_CURRENT_SOURCE_DIR}/pkgconfig/seastar-testing.pc.in\n    ${CMAKE_CURRENT_BINARY_DIR}/pkgconfig/seastar-testing.pc.in\n    @ONLY)\n\n  file (GENERATE\n    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/seastar${Seastar_PC}\n    INPUT ${CMAKE_CURRENT_BINARY_DIR}/pkgconfig/seastar${Seastar_PC}.in)\n\n  file (GENERATE\n    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/seastar-testing.pc\n    INPUT ${CMAKE_CURRENT_BINARY_DIR}/pkgconfig/seastar-testing.pc.in)\n\n  file (GENERATE\n    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/seastar-install${Seastar_PC}\n    INPUT ${CMAKE_CURRENT_BINARY_DIR}/pkgconfig/seastar-install${Seastar_PC}.in)\n\n  file (GENERATE\n    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/seastar-testing-install.pc\n    INPUT ${CMAKE_CURRENT_BINARY_DIR}/pkgconfig/seastar-testing-install.pc.in)\n\n  include (CMakePackageConfigHelpers)\n  set (install_cmakedir ${CMAKE_INSTALL_LIBDIR}/cmake/Seastar)\n\n  install (\n    DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/\n    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n\n  install (\n    DIRECTORY ${Seastar_GEN_BINARY_DIR}/include/\n    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n\n  install (\n    PROGRAMS ${CMAKE_CURRENT_SOURCE_DIR}/scripts/seastar-json2code.py\n    DESTINATION ${CMAKE_INSTALL_BINDIR})\n\n  install (\n    TARGETS\n      seastar\n      seastar_testing\n      seastar_perf_testing\n    EXPORT seastar-export\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})\n\n  install (\n    EXPORT seastar-export\n    FILE SeastarTargets.cmake\n    NAMESPACE Seastar::\n    DESTINATION ${install_cmakedir})\n\n  write_basic_package_version_file (\n    ${CMAKE_CURRENT_BINARY_DIR}/SeastarConfigVersion.cmake\n    VERSION ${PROJECT_VERSION}\n    COMPATIBILITY ExactVersion)\n\n  configure_package_config_file (\n    ${CMAKE_CURRENT_LIST_DIR}/cmake/SeastarConfig.cmake.in\n    ${CMAKE_CURRENT_BINARY_DIR}/SeastarConfig.cmake\n    INSTALL_DESTINATION ${install_cmakedir})\n\n  install (\n    FILES\n      ${CMAKE_CURRENT_BINARY_DIR}/SeastarConfig.cmake\n      ${CMAKE_CURRENT_BINARY_DIR}/SeastarConfigVersion.cmake\n    DESTINATION ${install_cmakedir})\n\n  install (\n    FILES\n      ${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindGnuTLS.cmake\n      ${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindLinuxMembarrier.cmake\n      ${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindSanitizers.cmake\n      ${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindSourceLocation.cmake\n      ${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindStdAtomic.cmake\n      ${CMAKE_CURRENT_SOURCE_DIR}/cmake/Findc-ares.cmake\n      ${CMAKE_CURRENT_SOURCE_DIR}/cmake/Finddpdk.cmake\n      ${CMAKE_CURRENT_SOURCE_DIR}/cmake/Findhwloc.cmake\n      ${CMAKE_CURRENT_SOURCE_DIR}/cmake/Findlksctp-tools.cmake\n      ${CMAKE_CURRENT_SOURCE_DIR}/cmake/Findlz4.cmake\n      ${CMAKE_CURRENT_SOURCE_DIR}/cmake/Findnumactl.cmake\n      ${CMAKE_CURRENT_SOURCE_DIR}/cmake/Findragel.cmake\n      ${CMAKE_CURRENT_SOURCE_DIR}/cmake/Findrt.cmake\n      ${CMAKE_CURRENT_SOURCE_DIR}/cmake/Finducontext.cmake\n      ${CMAKE_CURRENT_SOURCE_DIR}/cmake/Findyaml-cpp.cmake\n      ${CMAKE_CURRENT_SOURCE_DIR}/cmake/SeastarDependencies.cmake\n      ${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindLibUring.cmake\n      ${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindSystemTap-SDT.cmake\n    DESTINATION ${install_cmakedir})\n\n  install (\n    DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/cmake/code_tests\n    DESTINATION ${install_cmakedir})\n\n  install (\n    FILES ${CMAKE_CURRENT_BINARY_DIR}/seastar-install${Seastar_PC}\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig\n    RENAME seastar${Seastar_PC})\n\n  install (\n    FILES ${CMAKE_CURRENT_BINARY_DIR}/seastar-testing-install.pc\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig\n    RENAME seastar-testing.pc)\n\n  #\n  # Export targets from the build tree for the user package registry.\n  #\n\n  export (\n    EXPORT seastar-export\n    FILE ${CMAKE_CURRENT_BINARY_DIR}/SeastarTargets.cmake\n    NAMESPACE Seastar::)\n\n  export (PACKAGE Seastar)\n\n  #\n  # Packaging.\n  #\n\n  set (CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n  set (CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n  set (CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH})\n\n  include (CPack)\nendif ()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.7099609375,
          "content": "# Contributing Code to Seastar\n\nThere are two ways to contribute code to Seastar:\n* send your changes as [patches](https://github.com/scylladb/scylla/wiki/Formatting-and-sending-patches) to the [mailing list](https://groups.google.com/forum/#!forum/seastar-dev).\n* alternatively, open a [github pull request](https://github.com/scylladb/seastar/pulls).\n\n# Asking questions or requesting help\n\nUse the [Seastar mailing list](https://groups.google.com/forum/#!forum/seastar-dev) for general questions and help.\n\n# Reporting an issue\n\nPlease use the [Issue Tracker](https://github.com/scylladb/seastar/issues/) to report issues. Supply as much information about your environment as possible, especially for performance problems.\n\n"
        },
        {
          "name": "HACKING.md",
          "type": "blob",
          "size": 3.94921875,
          "content": "# Developing and using Seastar\n\n## Configuring the project\n\nThere are multiple ways to configure Seastar and its dependencies.\n\n### Use system-packages for most dependencies\n\nSee the instructions in [README.md](./README.md).\n\n### Download and install all external dependencies in a project-specific location\n\n- First pull the git submodules using `git submodule update --init --recursive`\n\n- Use `cmake-cooking` to prepare a development environment with all dependencies.  This allows for reproducible development environments, but means that approximately 3 GiB of dependencies get installed to `build/_cooking_`:\n\n```\n./cooking.sh\n```\n\n- The same as above, and enable DPDK support:\n\n```\n./cooking.sh -- -DSeastar_DPDK=ON\n```\n\n- Use system packages for all dependencies except `dpdk`, which is provided by `cmake-cooking` (and not yet widely available via system package-managers):\n\n```\n./cooking.sh -i dpdk\n```\n\n- Use `cmake-cooking` for all dependencies except for Boost:\n\n```\n./cooking.sh -e Boost\n```\n\n- The same, but compile in \"release\" mode:\n\n```\n./cooking.sh -e Boost -t Release\n```\n\n## Using an IDE with CMake support\n\nIf you use `configure.py` or `cooking.sh` to to configure Seastar, then the easiest way to use an IDE (such as Qt Creator, or CLion) for development is to instruct the IDE, when it invokes CMake, to include the following option:\n\n```\n-DCMAKE_PREFIX_PATH=${source_dir}/build/_cooking/installed\n```\n\nwhere `${source_dir}` is the root of the Seastar source tree on your file-system.\n\nThis will allow the IDE to also index Seastar's dependencies.\n\n## Building the project\n\n```\ncd $my_build_dir\nninja\n```\n\nIf you used `configure.py` to configure Seastar, then the build directory will be `build/$mode`. For example, `build/release`.\n\nIf you use `cooking.sh`, then the build directory will just be `build`.\n\n## Running tests\n\nMake sure you are in the \"build\" directory.\n\n- Run unit tests:\n\n```\nninja test_unit\n```\n\n- Run all tests:\n\n```\nninja test\n```\n\n- Build and run a specific test:\n\n```\nninja test_unit_thread_run\n```\n\n\n## Building documentation\n\nMake sure you are in the \"build\" directory.\n\n- Build all documentation:\n\n```\nninja docs\n```\n\n- Build the tutorial in HTML form:\n\n```\nninja doc_tutorial_html\n```\n\n- Build the tutorial in HTML form (one file per chapter):\n\n```\nninja doc_tutorial_html_split\n```\n\n- Build the Doxygen documentation:\n\n```\nninja doc_api\n```\n\n## Installing the project\n\nChoose the install path:\n\nWith `configure.py`:\n\n```\n./configure.py --mode=release --prefix=/my/install/path\n```\n\nWith `cooking.sh`:\n\n```\n./cooking.sh -- -DCMAKE_INSTALL_PREFIX=/my/install/path\n```\n\n```\nninja -C build install\n```\n\n## Using Seastar in an application\n\n### CMake\n\nOnce Seastar has been installed, it is sufficient to add a dependency on Seastar with\n\n```\nfind_package (Seastar ${VERSION} REQUIRED)\n\nadd_executable (my_program\n  my_program.cc)\n\ntarget_link_libraries (my_program\n  PRIVATE Seastar::seastar)\n```\n\nwhere `VERSION` is the desired version.\n\nIf you'd like to use `cmake-cooking` to set up a development environment which includes Seastar and its dependencies (a \"recipe\"), you can include Seastar as follows:\n\n```\ncooking_ingredient (Seastar\n  COOKING_RECIPE <DEFAULT>\n  COOKING_CMAKE_ARGS\n    -DSeastar_APPS=OFF\n    -DSeastar_DEMOS=OFF\n    -DSeastar_DOCS=OFF\n    -DSeastar_TESTING=OFF\n  EXTERNAL_PROJECT_ARGS\n    SOURCE_DIR ${MY_SEASTAR_SOURCE_DIR})\n```\n\n### pkg-config\n\nSeastar includes a `seastar.pc` file. It can be used from both the\ninstall and build directories.\n\nCompiling a single file:\n```\ng++ foo.cc -o foo $(pkg-config --libs --cflags --static /path/to/seastar.pc)\n```\n\nCompiling multiple files:\n```\n# Compiling sources into object files\ng++ -c $(pkg-config --cflags /path/to/seastar.pc) foo.cc -o foo.o\ng++ -c $(pkg-config --cflags /path/to/seastar.pc) bar.cc -o bar.o\n\n# Linking object files into an executable\ng++ -o foo_bar foo.o bar.o $(pkg-config --libs --static /path/to/seastar.pc)\n```\n\nThe `--static` flag is needed to include transitive (private) dependencies of `libseastar.a`.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.935546875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.44921875,
          "content": "Seastar Framework\nCopyright 2015 Cloudius Systems\n\nThis works contains software from the OSv project (http://osv.io), licensed\nunder the BSD license.\n\nThis work contains software from the DPDK project (http://dpdk.org), licensed\nunder the BSD license.  The software is under the dpdk/ directory.\n\nThis work contains software from the Android Open Source Project,\nlicensed under the Apache2 license.\nThe software is in the include/seastar/util/sampler.hh file.\n"
        },
        {
          "name": "README-DPDK.md",
          "type": "blob",
          "size": 1.2939453125,
          "content": "Seastar and DPDK\n================\n\nSeastar uses the Data Plane Development Kit to drive NIC hardware directly.  This\nprovides an enormous performance boost.\n\nTo enable DPDK, specify `--enable-dpdk` to `./configure.py`, and `--dpdk-pmd` as a\nrun-time parameter.  This will use the DPDK package provided as a git submodule with the\nseastar sources.\n\nPlease note, if `--enable-dpdk` is used to build DPDK on an aarch64 machine, you need to\nspecify [target architecture](https://gcc.gnu.org/onlinedocs/gcc/AArch64-Options.html) with optional\n[feature modifiers](https://gcc.gnu.org/onlinedocs/gcc/AArch64-Options.html#aarch64-feature-modifiers)\nwith the `--cflags` option as well, like:\n```console\n$ ./configure.py --mode debug --enable-dpdk --cflags='-march=armv8-a+crc+crypto'\n```\n\nTo use your own self-compiled DPDK package, follow this procedure:\n\n1. Setup host to compile DPDK:\n   - Ubuntu\n     `sudo apt-get install -y build-essential linux-image-extra-$(uname -r)`\n2. Prepare a DPDK SDK:\n   - Download the latest DPDK release: `wget https://fast.dpdk.org/rel/dpdk-23.07.tar.xz`\n   - Untar it.\n   - Follow the [Quick Start Guide](https://core.dpdk.org/doc/quick-start/)\n   - Pass `-Dmbuf_refcnt_atomic=false` to meson.\n3. Modify the CMake cache (`CMakeCache.txt`) to inform CMake of the location of the installed DPDK SDK.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.1533203125,
          "content": "Seastar\n=======\n\n[![Test](https://github.com/scylladb/seastar/actions/workflows/tests.yaml/badge.svg)](https://github.com/scylladb/seastar/actions/workflows/tests.yaml)\n[![Version](https://img.shields.io/github/tag/scylladb/seastar.svg?label=version&colorB=green)](https://github.com/scylladb/seastar/releases)\n[![License: Apache2](https://img.shields.io/github/license/scylladb/seastar.svg)](https://github.com/scylladb/seastar/blob/master/LICENSE)\n[![n00b issues](https://img.shields.io/github/issues/scylladb/seastar/n00b.svg?colorB=green)](https://github.com/scylladb/seastar/labels/n00b)\n\nIntroduction\n------------\n\nSeaStar is an event-driven framework allowing you to write non-blocking,\nasynchronous code in a relatively straightforward manner (once understood).\nIt is based on [futures](http://en.wikipedia.org/wiki/Futures_and_promises).\n\nBuilding Seastar\n--------------------\n\nFor more details and alternative work-flows, read [HACKING.md](./HACKING.md).\n\nAssuming that you would like to use system packages (RPMs or DEBs) for Seastar's dependencies, first install them:\n\n```\n$ sudo ./install-dependencies.sh\n```\n\nthen configure (in \"release\" mode):\n\n```\n$ ./configure.py --mode=release\n```\nthen compile:\n\n```\n$ ninja -C build/release\n```\n\nIn case there are compilation issues, especially like ```g++: internal compiler error: Killed (program cc1plus)```\ntry giving more memory to gcc, either by limiting the amount of threads ( -j1 ) and/or allowing at least 4g ram to your\nmachine.\n\nIf you're missing a dependency of Seastar, then it is possible to have the configuration process fetch a version of the dependency locally for development.\n\nFor example, to fetch `fmt` locally, configure Seastar like this:\n\n```\n$ ./configure.py --mode=dev --cook fmt\n```\n\n`--cook` can be repeated many times for selecting multiple dependencies.\n\n\nBuild modes\n----------------------------------------------------------------------------\n\nThe configure.py script is a wrapper around cmake. The --mode argument\nmaps to CMAKE_BUILD_TYPE, and supports the following modes\n\n|          | CMake mode          | Debug info | Optimi&shy;zations | Sanitizers   | Allocator | Checks   | Use for                                |\n| -------- | ------------------- | ---------- | ------------------ |------------- | --------- | -------- | -------------------------------------- |\n| debug    | `Debug`             | Yes        | `-O0`              | ASAN, UBSAN  | System    | All      | gdb                                    |\n| release  | `RelWithDebInfo`    | Yes        | `-O3`              | None         | Seastar   | Asserts  | production                             |\n| dev      | `Dev` (Custom)      | No         | `-O1`              | None         | Seastar   | Asserts  | build and test cycle                   |\n| sanitize | `Sanitize` (Custom) | Yes        | `-Os`              | ASAN, UBSAN  | System    | All      | second level of tests, track down bugs |\n\nNote that seastar is more sensitive to allocators and optimizations than\nusual. A quick rule of the thumb of the relative performances is that\nrelease is 2 times faster than dev, 150 times faster than sanitize and\n300 times faster than debug.\n\nUsing Seastar from its build directory (without installation)\n----------------------------------------------------------------------------\n\nIt's possible to consume Seastar directly from its build directory with CMake or `pkg-config`.\n\nWe'll assume that the Seastar repository is located in a directory at `$seastar_dir`.\n\n\nVia `pkg-config`:\n\n```\n$ g++ my_app.cc $(pkg-config --libs --cflags --static $seastar_dir/build/release/seastar.pc) -o my_app\n```\n\nand with CMake using the `Seastar` package:\n\n\n`CMakeLists.txt` for `my_app`:\n\n```\nset (CMAKE_CXX_STANDARD 23)\n\nfind_package (Seastar REQUIRED)\n\nadd_executable (my_app\n  my_app.cc)\n\ntarget_link_libraries (my_app\n  Seastar::seastar)\n```\n\n```\n$ mkdir $my_app_dir/build\n$ cd $my_app_dir/build\n$ cmake -DCMAKE_PREFIX_PATH=\"$seastar_dir/build/release;$seastar_dir/build/release/_cooking/installed\" -DCMAKE_MODULE_PATH=$seastar_dir/cmake $my_app_dir\n```\n\nThe `CMAKE_PREFIX_PATH` values ensure that CMake can locate Seastar and its compiled submodules. The `CMAKE_MODULE_PATH` value ensures that CMake can uses Seastar's CMake scripts for locating its dependencies.\n\nUsing an installed Seastar\n--------------------------------\n\nYou can also consume Seastar after it has been installed to the file-system.\n\n**Important:**\n\n- Seastar works with a customized version of DPDK, so by default builds and installs the DPDK submodule to `$build_dir/_cooking/installed`\n\nFirst, configure the installation path:\n\n```\n$ ./configure.py --mode=release --prefix=/usr/local\n```\n\nthen run the `install` target:\n\n```\n$ ninja -C build/release install\n```\n\nthen consume it from `pkg-config`:\n\n```\n$ g++ my_app.cc $(pkg-config --libs --cflags --static seastar) -o my_app\n```\n\nor consume it with the same `CMakeLists.txt` as before but with a simpler CMake invocation:\n\n```\n$ cmake ..\n```\n\n(If Seastar has not been installed to a \"standard\" location like `/usr` or `/usr/local`, then you can invoke CMake with `-DCMAKE_PREFIX_PATH=$my_install_root`.)\n\nThere are also instructions for building on any host that supports [Docker](doc/building-docker.md).\n\nUse of the [DPDK](http://dpdk.org) is [optional](doc/building-dpdk.md).\n\n#### Seastar's C++ standard: C++20 or C++23\n\nSeastar supports both C++20, and C++23. The build defaults to the latest\nstandard supported by your compiler, but can be explicitly selected with\nthe `--c++-standard` configure option, e.g., `--c++-standard=20`,\nor if using CMake directly, by setting on the `CMAKE_CXX_STANDARD` CMake\nvariable.\n\nSee the [compatibity statement](doc/compatibility.md) for more information.\n\nGetting started\n---------------\n\nThere is a [mini tutorial](doc/mini-tutorial.md) and a [more comprehensive one](doc/tutorial.md).\n\nThe documentation is available on the [web](http://docs.seastar.io/master/index.html).\n\n\nResources\n---------\n\n* Seasatar Development Mailing List: Discuss challenges, propose improvements with\n  sending code contributions (patches), and get help from experienced developers.\n  Subscribe or browse archives: [here](https://groups.google.com/forum/#!forum/seastar-dev)\n  (or email seastar-dev@googlegroups.com).\n* GitHub Discussions: For more casual conversations and quick questions, consider\n  using the Seastar project's [discussions on Github](https://github.com/scylladb/seastar/discussions).\n* Issue Tracker: File bug reports on the project's [issue tracker](https://github.com/scylladb/seastar/issues).\n\nLearn more about Seastar on the main [project website](http://seastar.io).\n\nThe Native TCP/IP Stack\n-----------------------\n\nSeastar comes with its own [userspace TCP/IP stack](doc/native-stack.md) for better performance.\n\nRecommended hardware configuration for SeaStar\n----------------------------------------------\n\n* CPUs - As much as you need. SeaStar is highly friendly for multi-core and NUMA\n* NICs - As fast as possible, we recommend 10G or 40G cards. It's possible to use\n       1G too but you may be limited by their capacity.\n       In addition, the more hardware queue per cpu the better for SeaStar.\n       Otherwise we have to emulate that in software.\n* Disks - Fast SSDs with high number of IOPS.\n* Client machines - Usually a single client machine can't load our servers.\n       Both memaslap (memcached) and WRK (httpd) cannot over load their matching\n       server counter parts. We recommend running the client on different machine\n       than the servers and use several of them.\n\nProjects using Seastar\n----------------------------------------------\n\n* [cpv-cql-driver](https://github.com/cpv-project/cpv-cql-driver): C++ driver for Cassandra/Scylla based on seastar framework\n* [cpv-framework](https://github.com/cpv-project/cpv-framework): A web framework written in c++ based on seastar framework\n* [redpanda](https://vectorized.io/): A Kafka replacement for mission critical systems\n* [Scylla](https://github.com/scylladb/scylla): A fast and reliable NoSQL data store compatible with Cassandra and DynamoDB\n* [smf](https://github.com/smfrpc/smf): The fastest RPC in the West\n* [Ceph - Crimson](https://github.com/ceph/ceph): Next-generation OSD (Object Storage Daemon) implementation based on the Seastar framework\n"
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.ninja",
          "type": "blob",
          "size": 0.17578125,
          "content": "rule display_help\n  command = echo 'Error: Execute Ninja in a build directory: `ninja -C build/release`'\n  description = Help the poor user\n\nbuild help: display_help\n\ndefault help\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "coding-style.md",
          "type": "blob",
          "size": 5.392578125,
          "content": "# Seastar Coding Style\n\n## Files\n\nHeader files have the `.hh` extension, source files use the `.cc` extension. All files must have a license and copyright blurb. Use `#pragma once` instead of an include guard.\n\nHeader files which contain a public part of the interface of Seastar go in the `include` directory. Internal header and source files which are private to the implementation go in the `src` directory.\n\n## Whitespace\n\nUse spaces only; NEVER tabs. Rationale: tabs render differently on each system.\n\nAn _indent_ is four spaces. A double indent is eight spaces, a half-indent is two spaces.\n\n## Naming\n\nWe follow the C++ and Boost naming conventions: class names, variables, functions, and concepts are `words_separated_by_whitespace`.\n\nPrivate data members are prefixed by an underscore:\n\n```c++\nclass my_class {\n    int _a_member;\npublic:\n    void foo() {\n        _a_member = 3;\n    }\n};\n```\n\nThink of the leading underscore as a shorthand for `this->`.\n\nTemplate parameters use `CamelCase`\n\nNote: because the Concept Technical Specification used CamelCase for concepts,\nsome Seastar concepts alse use CamelCase. These will be gradually deprecated\nand replaced with snake_case names. New concepts should use snake_case.\n\n## Including header files\n\nIn any file, to include a public header file (one in the `include` directory), use an absolute path with `<>` like this:\n\n```c++\n#include <seastar/core/future.hh>\n```\n\nIn any private file, to include a private header file (one in the `src` directory), use an absolute path with `\"\"` like this:\n\n```c++\n#include \"core/future_impl.hh\"\n```\n\nHeader files in Seastar must be self-contained, i.e., each can be included without having to include specific other headers first. To verify that your change did not break this property, run `ninja checkheaders` in the build directory.\n\n## Braced blocks\n\nAll nested scopes are braced, even when the language allows omitting the braces (such as an if-statement), this makes patches simpler and is more consistent. The opening brace is merged with the line that opens the scope (class definition, function definition, if statement, etc.) and the body is indented.\n\n```c++\nvoid a_function() {\n    if (some condition) {\n        stmt;\n    } else {\n        stmt;\n    }\n}\n```\n\nAn exception is namespaces -- the body is _not_ indented, to prevent files that are almost 100% whitespace left margin.\n\nWhen making a change, if you need to insert an indentation level, you can temporarily break the rules by insering a half-indent, so that the patch is easily reviewable:\n\n```c++\nvoid a_function() {\n  while (something) {   // new line - half indent\n    if (some condition) {\n        stmt;\n    } else {\n        stmt;\n    }\n  }                      // new line\n}\n```\n\nA follow-up patch can restore the indents without any functional changes.\n\n## Function parameters\n\nAvoid output parameters; use return values instead.  In/out parameters are tricky, but in some cases they are relatively standard, such as serialization/deserialization.\n\nIf a function accepts a lambda or an `std::function`, make it the last argument, so that it can be easily provided inline:\n\n```c++\ntemplate <typename Func>\nvoid function_accepting_a_lambda(int a, int b, Func func);\n\nint f() {\n    return function_accepting_a_lambda(2, 3, [] (int x, int y) {\n        return x + y;\n    });\n}\n```\n\n## Complex return types\n\nIf a function returns a complicated return type, put its return type on a separate line, otherwise it becomes hard to see where the return type ends and where the function name begins:\n\n```c++\ntemplate <typename T1, T2>\ntemplate <typename T3, T4>\nstd::vector<typename a_struct<T1, T2>::some_nested_class<T3, T4>>  // I'm the return type\na_struct<T1, T2>::a_function(T3 a, T4 b) {                         // And I'm the function name\n    // ...\n}\n```\n\n## Whitespace around operators\n\nWhitespace around operators should match their precedence: high precedence = no spaces, low precedency = add spaces:\n\n```c++\n     return *a + *b;  // good\n     return * a+* b;  // bad\n```\n\n`if`, `while`, `return` (and `template`) are not function calls, so they get a space after the keyword.\n\n## Long lines\n\nIf a line becomes excessively long (>160 characters?), or is just complicated, break it into two or more lines.  The second (and succeeding lines) are _continuation lines_, and have a double indent:\n\n```c++\n    if ((some_condition && some_other_condition)\n            || (more complicated stuff here...)   // continuation line, double indent\n            || (even more complicated stuff)) {   // another continuation line\n        do_something();  // back to single indent\n    }\n```\n\nOf course, long lines or complex conditions may indicate that refactoring is in order.\n\n## Generic lambdas and types\n\nGeneric lambdas (`[] (auto param)`) are discouraged where the type is known. Generic\nlambdas reduce the compiler's and other tools' ability to reason about the code.\nIn case the actual type of `param` doesn't match the programmers expectations,\nthe compiler will only detect an error in the lambda body, or perhaps\neven lower down the stack if more generic functions are called. In the case of an\nIDE, most of its functionality is disabled in a generic lambda, since it can't\nassume anything about that parameter.\n\nOf course, when there is a need to support multiple types, genericity is the correct\ntool. Even then, type parameters should be constrained with concepts, in order to\ncatch type mismatches early rather than deep in the instantiation chain.\n\n\n"
        },
        {
          "name": "configure.py",
          "type": "blob",
          "size": 11.521484375,
          "content": "#!/usr/bin/env python3\n#\n# This file is open source software, licensed to you under the terms\n# of the Apache License, Version 2.0 (the \"License\").  See the NOTICE file\n# distributed with this work for additional information regarding copyright\n# ownership.  You may not use this file except in compliance with the License.\n#\n# You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\nimport argparse\nimport os\nimport seastar_cmake\nimport subprocess\nimport tempfile\n\ntempfile.tempdir = \"./build/tmp\"\n\n\ndef add_tristate(arg_parser, name, dest, help, default=None):\n    arg_parser.add_argument('--enable-' + name, dest=dest, action='store_true', default=default,\n                            help='Enable ' + help + ' [default]' if default else '')\n    arg_parser.add_argument('--disable-' + name, dest=dest, action='store_false', default=None,\n                            help='Disable ' + help)\n\n\ndef try_compile(compiler, source='', flags=[]):\n    return try_compile_and_link(compiler, source, flags=flags + ['-c'])\n\n\ndef ensure_tmp_dir_exists():\n    if not os.path.exists(tempfile.tempdir):\n        os.makedirs(tempfile.tempdir)\n\n\ndef try_compile_and_link(compiler, source='', flags=[]):\n    ensure_tmp_dir_exists()\n    with tempfile.NamedTemporaryFile() as sfile:\n        ofd, ofile = tempfile.mkstemp()\n        os.close(ofd)\n        try:\n            sfile.file.write(bytes(source, 'utf-8'))\n            sfile.file.flush()\n            # We can't write to /dev/null, since in some cases (-ftest-coverage) gcc will create an auxiliary\n            # output file based on the name of the output file, and \"/dev/null.gcsa\" is not a good name\n            return subprocess.call([compiler, '-x', 'c++', '-o', ofile, sfile.name] + flags,\n                                   stdout=subprocess.DEVNULL,\n                                   stderr=subprocess.DEVNULL) == 0\n        finally:\n            if os.path.exists(ofile):\n                os.unlink(ofile)\n\n\ndef standard_supported(standard, compiler='g++'):\n    return try_compile(compiler=compiler, source='', flags=['-std=' + standard])\n\n\narg_parser = argparse.ArgumentParser('Configure seastar')\narg_parser.add_argument('--mode', action='store', choices=seastar_cmake.SUPPORTED_MODES + ['all'], default='all')\narg_parser.add_argument('--build-root', action='store', default=seastar_cmake.DEFAULT_BUILD_ROOT, type=str,\n                        help='The name of the build root build directoy: using a different name allows multiple '\n                        'configurations to co-exist in the same repository')\narg_parser.add_argument('--cflags', action = 'store', dest='user_cflags', default='',\n                        help='Extra flags for the C++ compiler')\narg_parser.add_argument('--ldflags', action='store', dest='user_ldflags', default='',\n                        help='Extra flags for the linker')\narg_parser.add_argument('--optflags', action='store', dest='user_optflags', default='',\n                        help='Extra optimization flags for the release mode')\narg_parser.add_argument('--api-level', action='store', dest='api_level', default='7',\n                        help='Compatibility API level (7=latest)')\narg_parser.add_argument('--compiler', action='store', dest='cxx', default='g++',\n                        help='C++ compiler path')\narg_parser.add_argument('--c-compiler', action='store', dest='cc', default='gcc',\n                        help='C compiler path (for bundled libraries such as dpdk)')\narg_parser.add_argument('--ccache', nargs='?', const='ccache', default='', metavar='CCACHE_BINARY_PATH',\n                        help='Use ccache to cache compilation (and optionally provide a path to ccache binary)')\narg_parser.add_argument('--c++-standard', action='store', dest='cpp_standard', default='',\n                        help='C++ standard to build with')\narg_parser.add_argument('--cook', action='append', dest='cook', default=[],\n                        help='Supply this dependency locally for development via `cmake-cooking` (can be repeated)')\narg_parser.add_argument('--verbose', dest='verbose', action='store_true', help='Make configure output more verbose.')\narg_parser.add_argument('--scheduling-groups-count', action='store', dest='scheduling_groups_count', default='16',\n                        help='Number of available scheduling groups in the reactor')\n\nadd_tristate(\n    arg_parser,\n    name='dpdk',\n    dest='dpdk',\n    help='DPDK support')\nadd_tristate(\n    arg_parser,\n    name='cxx-modules',\n    dest='cxx_modules',\n    help='build as C++20 module')\nadd_tristate(\n    arg_parser,\n    name='hwloc',\n    dest='hwloc',\n    help='hwloc support')\nadd_tristate(\n    arg_parser,\n    name='alloc-failure-injector',\n    dest='alloc_failure_injection',\n    help='allocation failure injection')\nadd_tristate(\n    arg_parser,\n    name='task-backtrace',\n    dest='task_backtrace',\n    help='Collect backtrace at deferring points')\nadd_tristate(\n    arg_parser,\n    name='unused-result-error',\n    dest=\"unused_result_error\",\n    help='Make [[nodiscard]] violations an error')\nadd_tristate(\n    arg_parser,\n    name='debug-shared-ptr',\n    dest=\"debug_shared_ptr\",\n    help='Debug shared_ptr')\nadd_tristate(\n    arg_parser,\n    name='io_uring',\n    dest='io_uring',\n    help='Support io_uring via liburing')\narg_parser.add_argument('--allocator-page-size', dest='alloc_page_size', type=int, help='override allocator page size')\narg_parser.add_argument('--without-tests', dest='exclude_tests', action='store_true', help='Do not build tests by default')\narg_parser.add_argument('--without-apps', dest='exclude_apps', action='store_true', help='Do not build applications by default')\narg_parser.add_argument('--without-demos', dest='exclude_demos', action='store_true', help='Do not build demonstrations by default')\narg_parser.add_argument('--split-dwarf', dest='split_dwarf', action='store_true', default=False,\n                        help='use of split dwarf (https://gcc.gnu.org/wiki/DebugFission) to speed up linking')\narg_parser.add_argument('--compile-commands-json', dest='cc_json', action='store_true',\n                        help='Generate a compile_commands.json file for integration with clangd and other tools.')\narg_parser.add_argument('--heap-profiling', dest='heap_profiling', action='store_true', default=False, help='Enable heap profiling')\narg_parser.add_argument('--dpdk-machine', default='native', help='Specify the target architecture')\nadd_tristate(arg_parser, name='deferred-action-require-noexcept', dest='deferred_action_require_noexcept', help='noexcept requirement for deferred actions', default=True)\narg_parser.add_argument('--prefix', dest='install_prefix', default='/usr/local', help='Root installation path of Seastar files')\nargs = arg_parser.parse_args()\n\n\ndef identify_best_standard(cpp_standards, compiler):\n    \"\"\"Returns the first C++ standard accepted by the compiler in the sequence,\n    assuming the \"best\" standards appear first.\n\n    If no standards are accepted, we fail configure.py. There is not point\n    of letting the user attempt to build with a standard that is known not\n    to be supported.\n    \"\"\"\n    for std in cpp_standards:\n        if standard_supported('c++{}'.format(std), compiler):\n            return std\n    raise Exception(f\"{compiler} does not seem to support any of Seastar's preferred C++ standards - {cpp_standards}. Please upgrade your compiler.\")\n\n\nif not args.cpp_standard:\n    cpp_standards = ['23', '20']\n    args.cpp_standard = identify_best_standard(cpp_standards, compiler=args.cxx)\n\n\nMODES = seastar_cmake.SUPPORTED_MODES if args.mode == 'all' else [args.mode]\n\n# For convenience.\ntr = seastar_cmake.translate_arg\n\nMODE_TO_CMAKE_BUILD_TYPE = {'release': 'RelWithDebInfo', 'debug': 'Debug', 'dev': 'Dev', 'sanitize': 'Sanitize' }\n\n\ndef configure_mode(mode):\n    BUILD_PATH = seastar_cmake.build_path(mode, build_root=args.build_root)\n\n    CFLAGS = seastar_cmake.convert_strings_to_cmake_list(\n        args.user_cflags,\n        args.user_optflags if seastar_cmake.is_release_mode(mode) else '')\n\n    LDFLAGS = seastar_cmake.convert_strings_to_cmake_list(args.user_ldflags)\n\n    TRANSLATED_ARGS = [\n        '-DCMAKE_BUILD_TYPE={}'.format(MODE_TO_CMAKE_BUILD_TYPE[mode]),\n        '-DCMAKE_CXX_COMPILER={}'.format(args.cxx),\n        '-DCMAKE_CXX_STANDARD={}'.format(args.cpp_standard),\n        '-DCMAKE_CXX_COMPILER_LAUNCHER={}'.format(args.ccache),\n        '-DCMAKE_INSTALL_PREFIX={}'.format(args.install_prefix),\n        '-DCMAKE_EXPORT_COMPILE_COMMANDS={}'.format('yes' if args.cc_json else 'no'),\n        '-DBUILD_SHARED_LIBS={}'.format('yes' if mode in ('debug', 'dev') else 'no'),\n        '-DSeastar_API_LEVEL={}'.format(args.api_level),\n        '-DSeastar_SCHEDULING_GROUPS_COUNT={}'.format(args.scheduling_groups_count),\n        tr(args.exclude_tests, 'EXCLUDE_TESTS_FROM_ALL'),\n        tr(args.exclude_apps, 'EXCLUDE_APPS_FROM_ALL'),\n        tr(args.exclude_demos, 'EXCLUDE_DEMOS_FROM_ALL'),\n        tr(CFLAGS, 'CXX_FLAGS'),\n        tr(LDFLAGS, 'LD_FLAGS'),\n        tr(args.cxx_modules, 'MODULE'),\n        tr(args.dpdk, 'DPDK'),\n        tr(args.dpdk_machine, 'DPDK_MACHINE'),\n        tr(args.hwloc, 'HWLOC', value_when_none='yes'),\n        tr(args.io_uring, 'IO_URING', value_when_none=None),\n        tr(args.alloc_failure_injection, 'ALLOC_FAILURE_INJECTION', value_when_none='DEFAULT'),\n        tr(args.task_backtrace, 'TASK_BACKTRACE'),\n        tr(args.alloc_page_size, 'ALLOC_PAGE_SIZE'),\n        tr(args.split_dwarf, 'SPLIT_DWARF'),\n        tr(args.heap_profiling, 'HEAP_PROFILING'),\n        tr(args.deferred_action_require_noexcept, 'DEFERRED_ACTION_REQUIRE_NOEXCEPT'),\n        tr(args.unused_result_error, 'UNUSED_RESULT_ERROR'),\n        tr(args.debug_shared_ptr, 'DEBUG_SHARED_PTR', value_when_none='default'),\n    ]\n\n    ingredients_to_cook = set(args.cook)\n\n    if args.dpdk:\n        ingredients_to_cook.add('dpdk')\n\n    # Generate a new build by pointing to the source directory.\n    if ingredients_to_cook:\n        # the C compiler is only used when building ingredients.\n        TRANSLATED_ARGS.append(f'-DCMAKE_C_COMPILER={args.cc}')\n\n        # We need to use cmake-cooking for some dependencies.\n        inclusion_arguments = []\n\n        for ingredient in ingredients_to_cook:\n            inclusion_arguments.extend(['-i', ingredient])\n\n        ARGS = seastar_cmake.COOKING_BASIC_ARGS + inclusion_arguments\n        if args.user_cflags:\n            ARGS += ['-s', f'CXXFLAGS={args.user_cflags}']\n        if args.user_ldflags:\n            ARGS += ['-s', f'LDFLAGS={args.user_ldflags}']\n        ARGS += ['-d', BUILD_PATH, '--']\n        dir = seastar_cmake.ROOT_PATH\n    else:\n        # When building without cooked dependencies, we can invoke cmake directly. We can't call\n        # cooking.sh, because without any -i parameters, it will try to build\n        # everything.\n        root_relative_to_build = os.path.relpath(seastar_cmake.ROOT_PATH, BUILD_PATH)\n        ARGS = ['cmake', '-G', 'Ninja', root_relative_to_build]\n        dir = BUILD_PATH\n    # filter out empty args, their values are actually \"guess\",\n    # CMake should be able to figure it out.\n    ARGS += filter(lambda arg: arg, TRANSLATED_ARGS)\n    if args.verbose:\n        print(\"Running CMake in '{}' ...\".format(dir))\n        print(\" \\\\\\n  \".join(ARGS))\n    os.makedirs(BUILD_PATH, exist_ok=True)\n    subprocess.check_call(ARGS, shell=False, cwd=dir)\n\n\nfor mode in MODES:\n    configure_mode(mode)\n"
        },
        {
          "name": "cooking.sh",
          "type": "blob",
          "size": 25.8515625,
          "content": "#!/bin/bash\n\n#\n# Copyright 2018 Jesse Haber-Kucharsky\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n#\n# This is cmake-cooking v0.10.0\n# The home of cmake-cooking is https://github.com/hakuch/CMakeCooking\n#\n\nset -e\n\nCMAKE=${CMAKE:-cmake}\n\ninvoked_args=(\"$@\")\nsource_dir=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\ninitial_wd=$(pwd)\nmemory_file=\"${initial_wd}/.cooking_memory\"\n\nrecipe=\"${source_dir}/cooking_recipe.cmake\"\ndeclare -a excluded_ingredients\ndeclare -a included_ingredients\nbuild_dir=\"${initial_wd}/build\"\nbuild_type=\"Debug\"\n# Depends on `build_dir`.\ningredients_dir=\"\"\ngenerator=\"Ninja\"\nlist_only=\"\"\nnested=\"\"\n\nusage() {\n    cat <<EOF\n\nFetch, configure, build, and install dependencies (\"ingredients\") for a CMake project\nin a local and repeatable development environment.\n\nUsage: $0 [OPTIONS]\n\nwhere OPTIONS are:\n\n-a\n-r RECIPE\n-e INGREDIENT\n-i INGREDIENT\n-d BUILD_DIR (=${build_dir})\n-p INGREDIENTS_DIR (=${build_dir}/_cooking/installed)\n-t BUILD_TYPE (=${build_type})\n-g GENERATOR (=${generator})\n-s VAR=VALUE\n-f EXPORT_DIR\n-l\n-h\n\nBy default, cmake-cooking reads a file called 'cooking_recipe.cmake'.\n\nIf neither [-i] nor [-e] are specified with a recipe ([-r]), then all ingredients of the recipe\nwill be fetched and built.\n\n[-i] and [-e] are mutually-exclusive options: only provide one.\n\nOption details:\n\n-a\n\n    Invoke 'cooking.sh' with the arguments that were provided to it last time, instead\n    of the arguments provided.\n\n-r RECIPE\n\n    Instead of reading the recipe in a file called 'cooking_recipe.cmake', follow the recipe\n    in the named file.\n\n    If the recipe file is a relative path, it is interpretted relative to the source directory\n    of the project.\n\n-e INGREDIENT\n\n    Exclude an ingredient from a recipe. This option can be supplied many times.\n\n    For example, if a recipe consists of 'apple', 'banana', 'carrot', and 'donut', then\n\n        ./cooking.sh -r dev -e apple -e donut\n\n    will prepare 'banana' and 'carrot' but not prepare 'apple' and 'donut'.\n\n    If an ingredient is excluded, then it is assumed that all ingredients that depend on it\n    can satisfy that dependency in some other way from the system (ie, the dependency is\n    removed internally).\n\n-i INGREDIENT\n\n   Include an ingredient from a recipe, ignoring the others. This option can be supplied\n   many times.\n\n   Similar to [-e], but the opposite.\n\n   For example, if a recipe consists of 'apple', 'banana', 'carrot', and 'donut' then\n\n       ./cooking.sh -r dev -i apple -i donut\n\n   will prepare 'apple' and 'donut' but not prepare 'banana' and 'carrot'.\n\n   If an ingredient is not in the \"include-list\", then it is assumed that all\n   ingredients that are in the list and which depend on it can satisfy that dependency\n   in some other way from the system.\n\n-d BUILD_DIR (=${build_dir})\n\n   Configure the project and build it in the named directory.\n\n-p INGREDIENTS_DIR (=${build_dir}/_cooking/installed)\n\n   Install compiled ingredients into this directory.\n\n-t BUILD_TYPE (=${build_type})\n\n   Configure all ingredients and the project with the named CMake build-type.\n   An example build type is \"Release\".\n\n-g GENERATOR (=${generator})\n\n    Use the named CMake generator for building all ingredients and the project.\n    An example generator is \"Unix Makfiles\".\n\n-s VAR=VALUE\n\n   Set an environmental variable 'VAR' to the value 'VALUE' during the invocation of CMake.\n\n-f EXPORT_DIR\n\n   If provided, and the project is successfully configured, then the tree of installed ingredients\n   is exported to this directory (the actual files: not symbolic links).\n\n   This option requires rsync.\n\n   This may be useful for preparing continuous integration environments, but it is not\n   recommended for distribution or release purposes (since this would be counter\n   to the goal of cmake-cooking).\n\n-l\n\n    Only list available ingredients for a given recipe, and don't do anything else.\n\n-h\n\n    Show this help information and exit.\n\nEOF\n}\n\nparse_assignment() {\n    local var\n    local value\n    IFS='=' read -r var value <<< \"${1}\"\n    export \"${var}\"=\"${value}\"\n}\n\nyell_include_exclude_mutually_exclusive() {\n    echo \"Cooking: [-e] and [-i] are mutually exclusive options!\" >&2\n}\n\nwhile getopts \"ar:e:i:d:p:t:g:s:f:lhx\" arg; do\n    case \"${arg}\" in\n        a)\n            if [ ! -f \"${memory_file}\" ]; then\n                echo \"No previous invocation found to recall!\" >&2\n                exit 1\n            fi\n\n            source \"${memory_file}\"\n            run_previous && exit 0\n            ;;\n        r)\n            if [[ \"${OPTARG}\" = /* ]]; then\n                recipe=${OPTARG}\n            else\n                recipe=\"${source_dir}/${OPTARG}\"\n            fi\n            ;;\n        e)\n            if [[ ${#included_ingredients[@]} -ne 0 ]]; then\n                yell_include_exclude_mutually_exclusive\n                exit 1\n            fi\n\n            excluded_ingredients+=(${OPTARG})\n            ;;\n        i)\n            if [[ ${#excluded_ingredients[@]} -ne 0 ]]; then\n                yell_include_exclude_mutually_exclusive\n                exit 1\n            fi\n\n            included_ingredients+=(${OPTARG})\n            ;;\n        d) build_dir=$(realpath \"${OPTARG}\") ;;\n        p) ingredients_dir=$(realpath \"${OPTARG}\") ;;\n        t) build_type=${OPTARG} ;;\n        g) generator=${OPTARG} ;;\n        s) parse_assignment \"${OPTARG}\" ;;\n        f) export_dir=$(realpath \"${OPTARG}\") ;;\n        l) list_only=\"1\" ;;\n        h) usage; exit 0 ;;\n        x) nested=\"1\" ;;\n        *) usage; exit 1 ;;\n    esac\ndone\n\nshift $((OPTIND - 1))\n\ncooking_dir=\"${build_dir}/_cooking\"\ncache_file=\"${build_dir}/CMakeCache.txt\"\ningredients_ready_file=\"${cooking_dir}/ready.txt\"\n\nif [ -z \"${ingredients_dir}\" ]; then\n    ingredients_dir=\"${cooking_dir}/installed\"\nfi\n\nmkdir -p \"${build_dir}\"\n\ncat <<'EOF' > \"${build_dir}/Cooking.cmake\"\n#\n# Copyright 2018 Jesse Haber-Kucharsky\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n#\n# This file was generated by cmake-cooking v0.10.0\n# The home of cmake-cooking is https://github.com/hakuch/CMakeCooking\n#\n\nmacro (project name)\n  set (_cooking_dir ${CMAKE_CURRENT_BINARY_DIR}/_cooking)\n\n  if (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)\n    set (_cooking_root ON)\n  else ()\n    set (_cooking_root OFF)\n  endif ()\n\n  find_program (Cooking_STOW_EXECUTABLE\n    stow\n    \"Executable path of GNU Stow.\")\n\n  if (NOT Cooking_STOW_EXECUTABLE)\n    message (FATAL_ERROR \"Cooking: GNU Stow is required!\")\n  endif ()\n\n  set (Cooking_INGREDIENTS_DIR\n    ${_cooking_dir}/installed\n    CACHE\n    PATH\n    \"Directory where ingredients will be installed.\")\n\n  set (Cooking_EXCLUDED_INGREDIENTS\n   \"\"\n   CACHE\n   STRING\n   \"Semicolon-separated list of ingredients that are not provided by Cooking.\")\n\n  set (Cooking_INCLUDED_INGREDIENTS\n   \"\"\n   CACHE\n   STRING\n   \"Semicolon-separated list of ingredients that are provided by Cooking.\")\n\n  option (Cooking_LIST_ONLY\n    \"Available ingredients will be listed and nothing will be installed.\"\n    OFF)\n\n  set (Cooking_RECIPE \"\" CACHE STRING \"Configure ${name}'s dependencies according to the named recipe.\")\n\n  if ((NOT DEFINED Cooking_EXCLUDED_INGREDIENTS) OR (Cooking_EXCLUDED_INGREDIENTS STREQUAL \"\"))\n    set (_cooking_is_excluding OFF)\n  else ()\n    set (_cooking_is_excluding ON)\n  endif ()\n\n  if ((NOT DEFINED Cooking_INCLUDED_INGREDIENTS) OR (Cooking_INCLUDED_INGREDIENTS STREQUAL \"\"))\n    set (_cooking_is_including OFF)\n  else ()\n    set (_cooking_is_including ON)\n  endif ()\n\n  if (_cooking_is_excluding AND _cooking_is_including)\n    message (\n      FATAL_ERROR\n      \"Cooking: The EXCLUDED_INGREDIENTS and INCLUDED_INGREDIENTS lists are mutually exclusive options!\")\n  endif ()\n\n  if (_cooking_root)\n    _project (${name} ${ARGN})\n\n    if (NOT (\"${Cooking_RECIPE}\" STREQUAL \"\"))\n      add_custom_target (_cooking_ingredients)\n\n      set (_cooking_ready_marker_file ${_cooking_dir}/ready.txt)\n\n      add_custom_command (\n        OUTPUT ${_cooking_ready_marker_file}\n        DEPENDS _cooking_ingredients\n        COMMAND ${CMAKE_COMMAND} -E touch ${_cooking_ready_marker_file})\n\n      add_custom_target (_cooking_ingredients_ready\n        DEPENDS ${_cooking_ready_marker_file})\n\n      set (_cooking_local_synchronize_marker_file ${Cooking_INGREDIENTS_DIR}/.cooking_local_synchronize)\n\n      add_custom_command (\n        OUTPUT ${_cooking_local_synchronize_marker_file}\n        COMMAND ${CMAKE_COMMAND} -E touch ${_cooking_local_synchronize_marker_file})\n\n      add_custom_target (_cooking_marked_for_local_synchronization\n        DEPENDS ${_cooking_local_synchronize_marker_file})\n\n      list (APPEND CMAKE_PREFIX_PATH ${Cooking_INGREDIENTS_DIR})\n      include (${Cooking_RECIPE})\n\n      if (NOT EXISTS ${_cooking_ready_marker_file})\n        return ()\n      endif ()\n    endif ()\n  endif ()\nendmacro ()\n\nfunction (_cooking_set_union x y var)\n  set (r ${${x}})\n\n  foreach (e ${${y}})\n    list (APPEND r ${e})\n  endforeach ()\n\n  list (REMOVE_DUPLICATES r)\n  set (${var} ${r} PARENT_SCOPE)\nendfunction ()\n\nfunction (_cooking_set_difference x y var)\n  set (r ${${x}})\n\n  foreach (e ${${y}})\n    if (${e} IN_LIST ${x})\n       list (REMOVE_ITEM r ${e})\n    endif ()\n  endforeach ()\n\n  set (${var} ${r} PARENT_SCOPE)\nendfunction ()\n\nfunction (_cooking_set_intersection x y var)\n  set (r \"\")\n\n  foreach (e ${${y}})\n    if (${e} IN_LIST ${x})\n      list (APPEND r ${e})\n    endif ()\n  endforeach ()\n\n  list (REMOVE_DUPLICATES r)\n  set (${var} ${r} PARENT_SCOPE)\nendfunction ()\n\nfunction (_cooking_query_by_key list key var)\n  list (FIND ${list} ${key} index)\n\n  if (${index} EQUAL \"-1\")\n    set (value NOTFOUND)\n  else ()\n    math (EXPR value_index \"${index} + 1\")\n    list (GET ${list} ${value_index} value)\n  endif ()\n\n  set (${var} ${value} PARENT_SCOPE)\nendfunction ()\n\nfunction (_cooking_populate_ep_parameter)\n  cmake_parse_arguments (\n    pa\n    \"\"\n    \"EXTERNAL_PROJECT_ARGS_LIST;PARAMETER;DEFAULT_VALUE\"\n    \"\"\n    ${ARGN})\n\n  string (TOLOWER ${pa_PARAMETER} parameter_lower)\n  _cooking_query_by_key (${pa_EXTERNAL_PROJECT_ARGS_LIST} ${pa_PARAMETER} ${parameter_lower})\n  set (value ${${parameter_lower}})\n  set (var_name _cooking_${parameter_lower})\n  set (ep_var_name _cooking_ep_${parameter_lower})\n\n  if (NOT value)\n    set (${var_name} ${pa_DEFAULT_VALUE} PARENT_SCOPE)\n    set (${ep_var_name} ${pa_PARAMETER} ${pa_DEFAULT_VALUE} PARENT_SCOPE)\n  else ()\n    set (${var_name} ${value} PARENT_SCOPE)\n    set (${ep_var_name} \"\" PARENT_SCOPE)\n  endif ()\nendfunction ()\n\nfunction (_cooking_define_listing_targets)\n  cmake_parse_arguments (\n    pa\n    \"\"\n    \"NAME;SOURCE_DIR;RECIPE\"\n    \"REQUIRES\"\n    ${ARGN})\n\n  set (stale_file ${Cooking_INGREDIENTS_DIR}/.cooking_stale_ingredient_${pa_NAME})\n\n  add_custom_command (\n    OUTPUT ${stale_file}\n    COMMAND ${CMAKE_COMMAND} -E touch ${stale_file})\n\n  add_custom_target (_cooking_ingredient_${pa_NAME}_stale\n    DEPENDS ${stale_file})\n\n  set (commands\n    COMMAND\n    ${CMAKE_COMMAND} -E touch ${Cooking_INGREDIENTS_DIR}/.cooking_ingredient_${pa_NAME})\n\n  if (pa_RECIPE)\n    if (pa_RECIPE STREQUAL <DEFAULT>)\n      set (recipe_args \"\")\n    else ()\n      set (recipe_args -r ${pa_RECIPE})\n    endif ()\n\n    list (INSERT commands 0\n      COMMAND\n      ${pa_SOURCE_DIR}/cooking.sh\n      ${recipe_args}\n      -p ${Cooking_INGREDIENTS_DIR}\n      -g ${CMAKE_GENERATOR}\n      -x\n      -l)\n  endif ()\n\n  add_custom_command (\n    OUTPUT ${Cooking_INGREDIENTS_DIR}/.cooking_ingredient_${pa_NAME}\n    DEPENDS\n      _cooking_ingredient_${pa_NAME}_stale\n      ${stale_file}\n    ${commands})\n\n  add_custom_target (_cooking_ingredient_${pa_NAME}_listed\n    DEPENDS ${Cooking_INGREDIENTS_DIR}/.cooking_ingredient_${pa_NAME})\n\n  foreach (d ${pa_REQUIRES})\n    add_dependencies (_cooking_ingredient_${pa_NAME}_listed _cooking_ingredient_${d}_listed)\n  endforeach ()\n\n  add_dependencies (_cooking_ingredients _cooking_ingredient_${pa_NAME}_listed)\nendfunction ()\n\nfunction (_cooking_adjust_requirements)\n  cmake_parse_arguments (\n    pa\n    \"\"\n    \"IS_EXCLUDING;IS_INCLUDING;OUTPUT_LIST\"\n    \"REQUIREMENTS\"\n    ${ARGN})\n\n  if (pa_IS_EXCLUDING)\n    # Strip out any dependencies that are excluded.\n    _cooking_set_difference (\n      pa_REQUIREMENTS\n      Cooking_EXCLUDED_INGREDIENTS\n      pa_REQUIREMENTS)\n  elseif (_cooking_is_including)\n    # Eliminate dependencies that have not been included.\n    _cooking_set_intersection (\n      pa_REQUIREMENTS\n      Cooking_INCLUDED_INGREDIENTS\n      pa_REQUIREMENTS)\n  endif ()\n\n  set (${pa_OUTPUT_LIST} ${pa_REQUIREMENTS} PARENT_SCOPE)\nendfunction ()\n\nfunction (_cooking_populate_ep_depends)\n  cmake_parse_arguments (\n    pa\n    \"\"\n    \"\"\n    \"REQUIREMENTS\"\n    ${ARGN})\n\n  if (pa_REQUIREMENTS)\n    set (value DEPENDS)\n\n    foreach (d ${pa_REQUIREMENTS})\n      list (APPEND value ingredient_${d})\n    endforeach ()\n  else ()\n    set (value \"\")\n  endif ()\n\n  set (_cooking_ep_depends ${value} PARENT_SCOPE)\nendfunction ()\n\nfunction (_cooking_prepare_restrictions_arguments)\n  cmake_parse_arguments (\n    pa\n    \"\"\n    \"IS_EXCLUDING;IS_INCLUDING;OUTPUT_LIST\"\n    \"REQUIREMENTS\"\n    ${ARGN})\n\n  set (args \"\")\n\n  if (pa_IS_INCLUDING)\n    _cooking_set_difference (\n      Cooking_INCLUDED_INGREDIENTS\n      pa_REQUIREMENTS\n      included)\n\n    foreach (x ${included})\n      list (APPEND args -i ${x})\n    endforeach ()\n  elseif (pa_IS_EXCLUDING)\n    _cooking_set_union (\n      Cooking_EXCLUDED_INGREDIENTS\n      pa_REQUIREMENTS\n      excluded)\n\n    foreach (x ${excluded})\n      list (APPEND args -e ${x})\n    endforeach ()\n  else ()\n    foreach (x ${pa_REQUIREMENTS})\n      list (APPEND args -e ${x})\n    endforeach ()\n  endif ()\n\n  set (${pa_OUTPUT_LIST} ${args} PARENT_SCOPE)\nendfunction ()\n\nfunction (_cooking_determine_common_cmake_args output)\n  string (REPLACE \";\" \":::\" prefix_path_with_colons \"${CMAKE_PREFIX_PATH}\")\n\n  set (cmake_args \"-G\" \"${CMAKE_GENERATOR}\")\n\n  if (CMAKE_CXX_FLAGS)\n    list(APPEND cmake_args -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS})\n  endif ()\n  if (CMAKE_C_FLAGS)\n    list(APPEND cmake_args -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS})\n  endif ()\n\n  list (APPEND cmake_args\n    -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>\n    -DCMAKE_PREFIX_PATH=${prefix_path_with_colons}\n    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\n    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n    -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}\n    -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS})\n\n  set (${output} ${cmake_args}\n    PARENT_SCOPE)\nendfunction ()\n\nfunction (_cooking_populate_ep_configure_command)\n  cmake_parse_arguments (\n    pa\n    \"\"\n    \"IS_EXCLUDING;IS_INCLUDING;RECIPE;EXTERNAL_PROJECT_ARGS_LIST\"\n    \"REQUIREMENTS;CMAKE_ARGS;COOKING_CMAKE_ARGS\"\n    ${ARGN})\n\n  if (pa_RECIPE)\n    if (pa_RECIPE STREQUAL <DEFAULT>)\n      set (recipe_args \"\")\n    else ()\n      set (recipe_args -r ${pa_RECIPE})\n    endif ()\n\n    _cooking_prepare_restrictions_arguments (\n      IS_EXCLUDING ${pa_IS_EXCLUDING}\n      IS_INCLUDING ${pa_IS_INCLUDING}\n      REQUIREMENTS ${pa_REQUIREMENTS}\n      OUTPUT_LIST restrictions_args)\n\n    set (value\n      CONFIGURE_COMMAND\n      <SOURCE_DIR>/cooking.sh\n      ${recipe_args}\n      -d <BINARY_DIR>\n      -p ${Cooking_INGREDIENTS_DIR}\n      -g ${CMAKE_GENERATOR}\n      -x\n      ${restrictions_args}\n      --\n      ${pa_COOKING_CMAKE_ARGS})\n  elseif (NOT (CONFIGURE_COMMAND IN_LIST ${pa_EXTERNAL_PROJECT_ARGS_LIST}))\n    set (value\n      CONFIGURE_COMMAND\n      ${CMAKE_COMMAND}\n      ${pa_CMAKE_ARGS}\n      <SOURCE_DIR>)\n  else ()\n    set (value \"\")\n  endif ()\n\n  set (_cooking_ep_configure_command ${value} PARENT_SCOPE)\nendfunction ()\n\nfunction (_cooking_populate_ep_build_command ep_args_list)\n  if (NOT (BUILD_COMMAND IN_LIST ${ep_args_list}))\n    set (value BUILD_COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR>)\n  else ()\n    set (value \"\")\n  endif ()\n\n  set (_cooking_ep_build_command ${value} PARENT_SCOPE)\nendfunction ()\n\nfunction (_cooking_populate_ep_install_command ep_args_list)\n  if (NOT (INSTALL_COMMAND IN_LIST ${ep_args_list}))\n    set (value INSTALL_COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target install)\n  else ()\n    set (value \"\")\n  endif ()\n\n  set (_cooking_ep_install_command ${value} PARENT_SCOPE)\nendfunction ()\n\nfunction (_cooking_define_ep)\n  cmake_parse_arguments (\n    pa\n    \"\"\n    \"NAME;SOURCE_DIR;BINARY_DIR;EXTERNAL_PROJECT_ARGS_LIST;RECIPE;INGREDIENT_DIR;STOW_DIR;LOCAL_RECONFIGURE;LOCAL_REBUILD\"\n    \"DEPENDS;CONFIGURE_COMMAND;BUILD_COMMAND;INSTALL_COMMAND;CMAKE_ARGS\"\n    ${ARGN})\n\n  string (REPLACE \"<DISABLE>\" \"\" forwarded_ep_args \"${${pa_EXTERNAL_PROJECT_ARGS_LIST}}\")\n  set (ep_name ingredient_${pa_NAME})\n  include (ExternalProject)\n\n  set (stamp_dir ${pa_INGREDIENT_DIR}/stamp)\n\n  ExternalProject_add (${ep_name}\n    DEPENDS ${pa_DEPENDS}\n    SOURCE_DIR ${pa_SOURCE_DIR}\n    BINARY_DIR ${pa_BINARY_DIR}\n    CONFIGURE_COMMAND ${pa_CONFIGURE_COMMAND}\n    BUILD_COMMAND ${pa_BUILD_COMMAND}\n    INSTALL_COMMAND ${pa_INSTALL_COMMAND}\n    PREFIX ${pa_INGREDIENT_DIR}\n    STAMP_DIR ${stamp_dir}\n    INSTALL_DIR ${pa_STOW_DIR}/${pa_NAME}\n    CMAKE_ARGS ${pa_CMAKE_ARGS}\n    LIST_SEPARATOR :::\n    STEP_TARGETS install\n    \"${forwarded_ep_args}\")\n\n  set (stow_marker_file ${Cooking_INGREDIENTS_DIR}/.cooking_ingredient_${pa_NAME})\n  set (lock_file ${Cooking_INGREDIENTS_DIR}/.cooking_stow.lock)\n\n  add_custom_command (\n    OUTPUT ${stow_marker_file}\n    DEPENDS\n      ${ep_name}-install\n      ${stamp_dir}/ingredient_${pa_NAME}-install\n    COMMAND\n      flock\n      --wait 30\n      ${lock_file}\n      ${Cooking_STOW_EXECUTABLE}\n      -t ${Cooking_INGREDIENTS_DIR}\n      -d ${pa_STOW_DIR}\n      ${pa_NAME}\n    COMMAND ${CMAKE_COMMAND} -E touch ${stow_marker_file})\n\n  add_custom_target (_cooking_ingredient_${pa_NAME}_stowed\n    DEPENDS ${stow_marker_file})\n\n  if (pa_RECIPE)\n    set (reconfigure_marker_file ${Cooking_INGREDIENTS_DIR}/.cooking_reconfigure_ingredient_${pa_NAME})\n\n    add_custom_command (\n      OUTPUT ${reconfigure_marker_file}\n      COMMAND ${CMAKE_COMMAND} -E touch ${reconfigure_marker_file})\n\n    add_custom_target (_cooking_ingredient_${pa_NAME}_marked_for_reconfigure\n      DEPENDS ${reconfigure_marker_file})\n\n    ExternalProject_add_step (${ep_name}\n      cooking-reconfigure\n      DEPENDERS configure\n      DEPENDS ${reconfigure_marker_file}\n      COMMAND ${CMAKE_COMMAND} -E echo_append)\n\n    ExternalProject_add_stepdependencies (${ep_name}\n      cooking-reconfigure\n      _cooking_ingredient_${pa_NAME}_marked_for_reconfigure)\n  endif ()\n\n  foreach (d ${pa_DEPENDS})\n    ExternalProject_add_stepdependencies (${ep_name}\n      configure\n      _cooking_${d}_stowed)\n  endforeach ()\n\n  add_dependencies (_cooking_ingredients _cooking_ingredient_${pa_NAME}_stowed)\n\n  if (pa_LOCAL_RECONFIGURE OR pa_LOCAL_REBUILD)\n    if (pa_LOCAL_RECONFIGURE)\n      set (step configure)\n    else ()\n      set (step build)\n    endif ()\n\n    ExternalProject_add_step (${ep_name}\n      cooking-local-${step}\n      DEPENDERS ${step}\n      DEPENDS ${_cooking_local_synchronize_marker_file}\n      COMMAND ${CMAKE_COMMAND} -E echo_append)\n\n    ExternalProject_add_stepdependencies (${ep_name}\n      cooking-local-${step}\n      _cooking_marked_for_local_synchronization)\n  endif ()\nendfunction ()\n\nmacro (cooking_ingredient name)\n  set (_cooking_args \"${ARGN}\")\n\n  if ((_cooking_is_excluding AND (${name} IN_LIST Cooking_EXCLUDED_INGREDIENTS))\n      OR (_cooking_is_including AND (NOT (${name} IN_LIST Cooking_INCLUDED_INGREDIENTS))))\n    # Nothing.\n  else ()\n    set (_cooking_ingredient_dir ${_cooking_dir}/ingredient/${name})\n\n    cmake_parse_arguments (\n      _cooking_pa\n      \"LOCAL_RECONFIGURE;LOCAL_REBUILD\"\n      \"COOKING_RECIPE\"\n      \"CMAKE_ARGS;COOKING_CMAKE_ARGS;EXTERNAL_PROJECT_ARGS;REQUIRES\"\n      ${_cooking_args})\n\n    _cooking_populate_ep_parameter (\n      EXTERNAL_PROJECT_ARGS_LIST _cooking_pa_EXTERNAL_PROJECT_ARGS\n      PARAMETER SOURCE_DIR\n      DEFAULT_VALUE ${_cooking_ingredient_dir}/src)\n\n    _cooking_populate_ep_parameter (\n      EXTERNAL_PROJECT_ARGS_LIST _cooking_pa_EXTERNAL_PROJECT_ARGS\n      PARAMETER BINARY_DIR\n      DEFAULT_VALUE ${_cooking_ingredient_dir}/build)\n\n    _cooking_populate_ep_parameter (\n      EXTERNAL_PROJECT_ARGS_LIST _cooking_pa_EXTERNAL_PROJECT_ARGS\n      PARAMETER BUILD_IN_SOURCE\n      DEFAULT_VALUE OFF)\n\n    if (_cooking_build_in_source)\n       set (_cooking_ep_binary_dir \"\")\n    endif ()\n\n    if (Cooking_LIST_ONLY)\n      _cooking_define_listing_targets (\n        NAME ${name}\n        SOURCE_DIR ${_cooking_source_dir}\n        RECIPE ${_cooking_pa_COOKING_RECIPE}\n        REQUIRES ${_cooking_pa_REQUIRES})\n    else ()\n      _cooking_adjust_requirements (\n        IS_EXCLUDING ${_cooking_is_excluding}\n        IS_INCLUDING ${_cooking_is_including}\n        REQUIREMENTS ${_cooking_pa_REQUIRES}\n        OUTPUT_LIST _cooking_pa_REQUIRES)\n\n      _cooking_populate_ep_depends (\n        REQUIREMENTS ${_cooking_pa_REQUIRES})\n\n      _cooking_determine_common_cmake_args (_cooking_common_cmake_args)\n\n      _cooking_populate_ep_configure_command (\n        IS_EXCLUDING ${_cooking_is_excluding}\n        IS_INCLUDING ${_cooking_is_including}\n        RECIPE ${_cooking_pa_COOKING_RECIPE}\n        REQUIREMENTS ${_cooking_pa_REQUIRES}\n        EXTERNAL_PROJECT_ARGS_LIST _cooking_pa_EXTERNAL_PROJECT_ARGS\n        CMAKE_ARGS\n          ${_cooking_common_cmake_args}\n          ${_cooking_pa_CMAKE_ARGS}\n        COOKING_CMAKE_ARGS\n          ${_cooking_common_cmake_args}\n          ${_cooking_pa_COOKING_CMAKE_ARGS})\n\n      _cooking_populate_ep_build_command (_cooking_pa_EXTERNAL_PROJECT_ARGS)\n      _cooking_populate_ep_install_command (_cooking_pa_EXTERNAL_PROJECT_ARGS)\n\n      _cooking_define_ep (\n        NAME ${name}\n        RECIPE ${_cooking_pa_COOKING_RECIPE}\n        DEPENDS ${_cooking_ep_depends}\n        SOURCE_DIR ${_cooking_ep_source_dir}\n        BINARY_DIR ${_cooking_ep_binary_dir}\n        CONFIGURE_COMMAND ${_cooking_ep_configure_command}\n        BUILD_COMMAND ${_cooking_ep_build_command}\n        INSTALL_COMMAND ${_cooking_ep_install_command}\n        INGREDIENT_DIR ${_cooking_ingredient_dir}\n        STOW_DIR ${_cooking_dir}/stow\n        CMAKE_ARGS ${_cooking_common_cmake_args}\n        EXTERNAL_PROJECT_ARGS_LIST _cooking_pa_EXTERNAL_PROJECT_ARGS\n        LOCAL_RECONFIGURE ${_cooking_pa_LOCAL_RECONFIGURE}\n        LOCAL_REBUILD ${_cooking_pa_LOCAL_REBUILD})\n    endif ()\n  endif ()\nendmacro ()\nEOF\n\ncmake_cooking_args=(\n    \"-DCooking_INGREDIENTS_DIR=${ingredients_dir}\"\n    \"-DCooking_RECIPE=${recipe}\"\n)\n\n#\n# Remove any `Cooking.cmake` file from the source directory. We now generate this file in the build directory, and old\n# copies will cause conflicts.\n#\n\nold_cooking_file=\"${source_dir}/cmake/Cooking.cmake\"\n\nif [ -f \"${old_cooking_file}\" ]; then\n    grep 'This file was generated by cmake-cooking' \"${old_cooking_file}\" > /dev/null && rm \"${old_cooking_file}\"\nfi\n\n#\n# Clean-up from a previous run.\n#\n\nif [ -e \"${ingredients_ready_file}\" ]; then\n    rm \"${ingredients_ready_file}\"\nfi\n\nif [ -e \"${cache_file}\" ]; then\n    rm \"${cache_file}\"\nfi\n\nif [ -d \"${ingredients_dir}\" -a -z \"${nested}\" ]; then\n    rm -r --preserve-root \"${ingredients_dir}\"\nfi\n\nmkdir -p \"${ingredients_dir}\"\n\n#\n# Validate recipe.\n#\n\nif [ -n \"${recipe}\" ]; then\n    if [ ! -f \"${recipe}\" ]; then\n        echo \"Cooking: The '${recipe}' recipe does not exist!\" >&2\n        exit 1\n    fi\nfi\n\n#\n# Prepare lists of included and excluded ingredients.\n#\n\nif [ -n \"${excluded_ingredients}\" ] && [ -z \"${list_only}\" ]; then\n    cmake_cooking_args+=(\n        -DCooking_EXCLUDED_INGREDIENTS=$(printf \"%s;\" \"${excluded_ingredients[@]}\")\n        -DCooking_INCLUDED_INGREDIENTS=\n    )\nfi\n\nif [ -n \"${included_ingredients}\" ] && [ -z \"${list_only}\" ]; then\n    cmake_cooking_args+=(\n        -DCooking_EXCLUDED_INGREDIENTS=\n        -DCooking_INCLUDED_INGREDIENTS=$(printf \"%s;\" \"${included_ingredients[@]}\")\n    )\nfi\n\n#\n# Configure and build ingredients.\n#\n\nmkdir -p \"${cooking_dir}\"/stow\ntouch \"${cooking_dir}\"/stow/.stow\ncd \"${build_dir}\"\n\ndeclare -a build_args\n\nif [ \"${generator}\" == \"Ninja\" ]; then\n    build_args+=(-v)\nfi\n\nif [ -n \"${list_only}\" ]; then\n    cmake_cooking_args+=(\"-DCooking_LIST_ONLY=ON\")\nfi\n\n${CMAKE} -DCMAKE_BUILD_TYPE=\"${build_type}\" \"${cmake_cooking_args[@]}\" -G \"${generator}\" \"${source_dir}\" \"${@}\"\n\nif [ -n \"${recipe}\" ]; then\n    ${CMAKE} --build . --target _cooking_ingredients_ready -- \"${build_args[@]}\"\n\n    #\n    # Report what we've done (if we're not nested).\n    #\n\n    if [ -z \"${nested}\" ]; then\n        ingredients=($(find \"${ingredients_dir}\" -name '.cooking_ingredient_*' -printf '%f\\n' | sed -r 's/\\.cooking_ingredient_(.+)/\\1/'))\n\n        if [ -z \"${list_only}\" ]; then\n            printf \"\\nCooking: Installed the following ingredients:\\n\"\n        else\n            printf \"\\nCooking: The following ingredients are necessary for this recipe:\\n\"\n        fi\n\n        for ingredient in \"${ingredients[@]}\"; do\n            echo \"  - ${ingredient}\"\n        done\n\n        printf '\\n'\n    fi\n\n    if [ -n \"${list_only}\" ]; then\n        exit 0\n    fi\n\n    #\n    # Configure the project, expecting all requirements satisfied.\n    #\n\n    ${CMAKE} -DCMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY=ON \"${@}\" .\n\n    #\n    # Optionally export the installed files.\n    #\n\n    if [ -n \"${export_dir}\" ]; then\n        rsync \"${ingredients_dir}/\" \"${export_dir}\" -a --copy-links\n        printf \"\\nCooking: Exported ingredients to ${export_dir}\\n\"\n    fi\nfi\n\n#\n# Save invocation information.\n#\n\ncd \"${initial_wd}\"\n\ncat <<EOF > \"${memory_file}\"\nrun_previous() {\n    \"${0}\" ${invoked_args[@]@Q}\n}\nEOF\n"
        },
        {
          "name": "cooking_recipe.cmake",
          "type": "blob",
          "size": 10.2744140625,
          "content": "#\n# This file is open source software, licensed to you under the terms\n# of the Apache License, Version 2.0 (the \"License\").  See the NOTICE file\n# distributed with this work for additional information regarding copyright\n# ownership.  You may not use this file except in compliance with the License.\n#\n# You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\n#\n# Copyright (C) 2018 Scylladb, Ltd.\n#\n\n#\n# Useful definitions for `cmake -E env`.\n#\n\nset (amended_PATH PATH=${Cooking_INGREDIENTS_DIR}/bin:$ENV{PATH})\nset (PKG_CONFIG_PATH PKG_CONFIG_PATH=${Cooking_INGREDIENTS_DIR}/lib/pkgconfig)\n\n#\n# Some Autotools ingredients need this information because they don't use pkgconfig.\n#\n\nset (autotools_ingredients_flags\n  CFLAGS=-I${Cooking_INGREDIENTS_DIR}/include\n  CXXFLAGS=-I${Cooking_INGREDIENTS_DIR}/include\n  LDFLAGS=-L${Cooking_INGREDIENTS_DIR}/lib)\n\n#\n# Some Autotools projects amend the info file instead of making a package-specific one.\n# This doesn't play nicely with GNU Stow.\n#\n# Just append the name of the ingredient, like\n#\n#     ${info_dir}/gmp\n#\n\nset (info_dir --infodir=<INSTALL_DIR>/share/info)\n\n#\n# Build-concurrency.\n#\n\ncmake_host_system_information (\n  RESULT build_concurrency_factor\n  QUERY NUMBER_OF_LOGICAL_CORES)\n\nset (make_command make -j ${build_concurrency_factor})\n\n#\n# All the ingredients.\n#\n\n##\n## Dependencies of dependencies of dependencies.\n##\n\ncooking_ingredient (gmp\n  EXTERNAL_PROJECT_ARGS\n    URL https://gmplib.org/download/gmp/gmp-6.1.2.tar.bz2\n    URL_MD5 8ddbb26dc3bd4e2302984debba1406a5\n    CONFIGURE_COMMAND <SOURCE_DIR>/configure --prefix=<INSTALL_DIR> --srcdir=<SOURCE_DIR> ${info_dir}/gmp\n    BUILD_COMMAND <DISABLE>\n    INSTALL_COMMAND ${make_command} install)\n\n##\n## Dependencies of dependencies.\n##\n\ncooking_ingredient (colm\n  EXTERNAL_PROJECT_ARGS\n    URL http://www.colm.net/files/colm/colm-0.13.0.6.tar.gz\n    URL_MD5 16aaf566cbcfe9a06154e094638ac709\n    # This is upsetting.\n    BUILD_IN_SOURCE YES\n    CONFIGURE_COMMAND ./configure --prefix=<INSTALL_DIR>\n    BUILD_COMMAND <DISABLE>\n    INSTALL_COMMAND ${make_command} install)\n\ncooking_ingredient (libpciaccess\n  EXTERNAL_PROJECT_ARGS\n    URL https://www.x.org/releases/individual/lib/libpciaccess-0.13.4.tar.gz\n    URL_MD5 cc1fad87da60682af1d5fa43a5da45a4\n    CONFIGURE_COMMAND <SOURCE_DIR>/configure --prefix=<INSTALL_DIR> --srcdir=<SOURCE_DIR>\n    BUILD_COMMAND <DISABLE>\n    INSTALL_COMMAND ${make_command} install)\n\ncooking_ingredient (nettle\n  REQUIRES gmp\n  EXTERNAL_PROJECT_ARGS\n    URL https://ftp.gnu.org/gnu/nettle/nettle-3.4.tar.gz\n    URL_MD5 dc0f13028264992f58e67b4e8915f53d\n    CONFIGURE_COMMAND\n      <SOURCE_DIR>/configure\n      --prefix=<INSTALL_DIR>\n      --srcdir=<SOURCE_DIR>\n      --libdir=<INSTALL_DIR>/lib\n      ${info_dir}/nettle\n      ${autotools_ingredients_flags}\n    BUILD_COMMAND <DISABLE>\n    INSTALL_COMMAND ${make_command} install)\n\n# Also a direct dependency of Seastar.\ncooking_ingredient (numactl\n  EXTERNAL_PROJECT_ARGS\n    URL https://github.com/numactl/numactl/releases/download/v2.0.12/numactl-2.0.12.tar.gz\n    URL_MD5 2ba9777d78bfd7d408a387e53bc33ebc\n    CONFIGURE_COMMAND <SOURCE_DIR>/configure --prefix=<INSTALL_DIR> --srcdir=<SOURCE_DIR>\n    BUILD_COMMAND <DISABLE>\n    INSTALL_COMMAND ${make_command} install)\n\ncooking_ingredient (zlib\n  EXTERNAL_PROJECT_ARGS\n    URL https://github.com/madler/zlib/releases/download/v1.2.13/zlib-1.2.13.tar.gz\n    URL_MD5 9b8aa094c4e5765dabf4da391f00d15c\n    CONFIGURE_COMMAND <SOURCE_DIR>/configure --prefix=<INSTALL_DIR>\n    BUILD_COMMAND <DISABLE>\n    INSTALL_COMMAND ${make_command} install)\n\n##\n## Private and private/public dependencies.\n##\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n  set (boost_toolset gcc)\nelseif (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n  set (boost_toolset clang)\nelse ()\n  set(boost_toolset \"cook_cxx\")\nendif ()\nset (boost_user_config \"${CMAKE_CURRENT_BINARY_DIR}/cook_boost.jam\")\nif (CMAKE_C_FLAGS)\n  string (JOIN \" <cflags>\" boost_cflags\n    \"<cflags>${CMAKE_C_FLAGS}\")\nendif ()\nif (CMAKE_CXX_FLAGS)\n  string (JOIN \" <cxxflags>\" boost_cxxflags\n    \"<cxxflags>${CMAKE_CXX_FLAGS}\")\nendif ()\nfile (WRITE \"${boost_user_config}\"\n  \"using ${boost_toolset}\"\n  \" : \" # toolset's version\n  \" : ${CMAKE_CXX_COMPILER}\"\n  \" : ${boost_cflags}${boost_cxxflags} <cxxflags>-std=c++${CMAKE_CXX_STANDARD}\"\n  \" ;\\n\")\n\ncooking_ingredient (Boost\n  EXTERNAL_PROJECT_ARGS\n    URL https://boostorg.jfrog.io/artifactory/main/release/1.81.0/source/boost_1_81_0.tar.bz2\n    URL_HASH SHA256=71feeed900fbccca04a3b4f2f84a7c217186f28a940ed8b7ed4725986baf99fa\n    PATCH_COMMAND\n      ./bootstrap.sh\n      --prefix=<INSTALL_DIR>\n      --with-libraries=atomic,chrono,date_time,filesystem,program_options,system,test,thread\n      --with-toolset=${boost_toolset}\n    CONFIGURE_COMMAND <DISABLE>\n    BUILD_COMMAND <DISABLE>\n    INSTALL_COMMAND\n      ${CMAKE_COMMAND} -E chdir <SOURCE_DIR>\n      ./b2\n      -j ${build_concurrency_factor}\n      --layout=system\n      --build-dir=<BINARY_DIR>\n      --user-config=${boost_user_config}\n      install\n      toolset=${boost_toolset}\n      variant=debug\n      link=shared\n      threading=multi\n      hardcode-dll-paths=true\n      dll-path=<INSTALL_DIR>/lib)\n\ncooking_ingredient (GnuTLS\n  REQUIRES\n    gmp\n    nettle\n  EXTERNAL_PROJECT_ARGS\n    URL https://www.gnupg.org/ftp/gcrypt/gnutls/v3.5/gnutls-3.5.18.tar.xz\n    URL_MD5 c2d93d305ecbc55939bc2a8ed4a76a3d\n    CONFIGURE_COMMAND\n     ${CMAKE_COMMAND} -E env ${PKG_CONFIG_PATH}\n      <SOURCE_DIR>/configure\n      --prefix=<INSTALL_DIR>\n      --srcdir=<SOURCE_DIR>\n      --with-included-unistring\n      --with-included-libtasn1\n      --without-p11-kit\n      # https://lists.gnupg.org/pipermail/gnutls-help/2016-February/004085.html\n      --disable-non-suiteb-curves\n      --disable-doc\n      ${autotools_ingredients_flags}\n    BUILD_COMMAND <DISABLE>\n    INSTALL_COMMAND ${make_command} install)\n\ncooking_ingredient (Protobuf\n  REQUIRES zlib\n  EXTERNAL_PROJECT_ARGS\n    URL https://github.com/protocolbuffers/protobuf/releases/download/v21.11//protobuf-cpp-3.21.11.tar.gz\n    URL_MD5 e2cf711edae444bba0da199bc034e031\n  CMAKE_ARGS\n    -Dprotobuf_BUILD_TESTS=OFF)\n\ncooking_ingredient (hwloc\n  REQUIRES\n    numactl\n    libpciaccess\n  EXTERNAL_PROJECT_ARGS\n    URL https://download.open-mpi.org/release/hwloc/v2.2/hwloc-2.2.0.tar.gz\n    URL_MD5 762c93cdca3249eed4627c4a160192bd\n    CONFIGURE_COMMAND <SOURCE_DIR>/configure --prefix=<INSTALL_DIR> --srcdir=<SOURCE_DIR>\n    BUILD_COMMAND <DISABLE>\n    INSTALL_COMMAND ${make_command} install)\n\ncooking_ingredient (ragel\n  REQUIRES colm\n  EXTERNAL_PROJECT_ARGS\n    URL http://www.colm.net/files/ragel/ragel-6.10.tar.gz\n    URL_MD5 748cae8b50cffe9efcaa5acebc6abf0d\n    PATCH_COMMAND\n      sed -i \"s/ CHAR_M/ SCHAR_M/g\" ragel/common.cpp\n    # This is upsetting.\n    BUILD_IN_SOURCE YES\n    CONFIGURE_COMMAND\n      ${CMAKE_COMMAND} -E env ${amended_PATH}\n      ./configure\n      --prefix=<INSTALL_DIR>\n      # This is even more upsetting.\n      ${autotools_ingredients_flags}\n    BUILD_COMMAND <DISABLE>\n    INSTALL_COMMAND ${make_command} install)\n\ncooking_ingredient (lksctp-tools\n  EXTERNAL_PROJECT_ARGS\n    URL https://sourceforge.net/projects/lksctp/files/lksctp-tools/lksctp-tools-1.0.16.tar.gz\n    URL_MD5 708bb0b5a6806ad6e8d13c55b067518e\n    PATCH_COMMAND ./bootstrap\n    CONFIGURE_COMMAND <SOURCE_DIR>/configure --prefix=<INSTALL_DIR> --srcdir=<SOURCE_DIR>\n    BUILD_COMMAND <DISABLE>\n    INSTALL_COMMAND ${make_command} install)\n\ncooking_ingredient (yaml-cpp\n  CMAKE_ARGS\n    -DYAML_CPP_BUILD_TESTS=OFF\n    -DYAML_BUILD_SHARED_LIBS=ON\n  EXTERNAL_PROJECT_ARGS\n    URL https://github.com/jbeder/yaml-cpp/archive/yaml-cpp-0.7.0.tar.gz\n    URL_MD5 74d646a3cc1b5d519829441db96744f0)\n\n##\n## Public dependencies.\n##\n\ncooking_ingredient (c-ares\n  EXTERNAL_PROJECT_ARGS\n    URL https://github.com/c-ares/c-ares/releases/download/v1.32.3/c-ares-1.32.3.tar.gz\n    URL_MD5 d5ed5967bc3a74191c051ce81ffe02fc\n    CONFIGURE_COMMAND <SOURCE_DIR>/configure --prefix=<INSTALL_DIR> --srcdir=<SOURCE_DIR>\n    BUILD_COMMAND <DISABLE>\n    INSTALL_COMMAND ${make_command} install)\n\nset (dpdk_args\n  --default-library=static\n  -Dc_args=\"-Wno-error\"\n  -Denable_docs=false\n  -Denable_apps=dpdk-testpmd\n  -Dtests=false\n  -Dexamples=\n  -Dmbuf_refcnt_atomic=false\n  -Dmax_memseg_lists=8192\n  -Ddisable_drivers=\"net/softnic,net/bonding\"\n  -Ddisable_libs=\"jobstats,power,port,table,pipeline,member\"\n  -Dcpu_instruction_set=${Seastar_DPDK_MACHINE})\n\nif (CMAKE_BUILD_TYPE STREQUAL Debug)\n  list (APPEND dpdk_args -Dbuildtype=debug)\nendif ()\n\nfind_program (Meson_EXECUTABLE\n  meson)\nif (NOT Meson_EXECUTABLE)\n  message (FATAL_ERROR \"Cooking: Meson is required!\")\nendif ()\n\nfind_program (Ninja_EXECUTABLE\n  ninja)\nif (NOT Ninja_EXECUTABLE)\n  message (FATAL_ERROR \"Cooking: Ninja is required!\")\nendif ()\n\ncooking_ingredient (dpdk\n  EXTERNAL_PROJECT_ARGS\n    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/dpdk\n    CONFIGURE_COMMAND\n      env CC=${CMAKE_C_COMPILER} ${Meson_EXECUTABLE} setup ${dpdk_args} --prefix=<INSTALL_DIR> <BINARY_DIR> <SOURCE_DIR>\n    BUILD_COMMAND\n      ${Ninja_EXECUTABLE} -C <BINARY_DIR>\n    INSTALL_COMMAND\n      ${Ninja_EXECUTABLE} -C <BINARY_DIR> install)\n\ncooking_ingredient (fmt\n  EXTERNAL_PROJECT_ARGS\n    URL https://github.com/fmtlib/fmt/archive/9.1.0.tar.gz\n    URL_MD5 21fac48cae8f3b4a5783ae06b443973a\n  CMAKE_ARGS\n    -DFMT_DOC=OFF\n    -DFMT_TEST=OFF)\n\ncooking_ingredient (liburing\n  EXTERNAL_PROJECT_ARGS\n    URL https://github.com/axboe/liburing/archive/liburing-2.1.tar.gz\n    URL_MD5 78f13d9861b334b9a9ca0d12cf2a6d3c\n    CONFIGURE_COMMAND\n      ${CMAKE_COMMAND} -E env CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}\n      <SOURCE_DIR>/configure --prefix=<INSTALL_DIR>\n    BUILD_COMMAND <DISABLE>\n    BUILD_BYPRODUCTS \"<SOURCE_DIR>/src/liburing.a\"\n    BUILD_IN_SOURCE ON\n    INSTALL_COMMAND ${make_command} -s install)\n\ncooking_ingredient (lz4\n  EXTERNAL_PROJECT_ARGS\n    URL https://github.com/lz4/lz4/archive/v1.8.0.tar.gz\n    URL_MD5 6247bf0e955899969d1600ff34baed6b\n    # This is upsetting.\n    BUILD_IN_SOURCE ON\n    CONFIGURE_COMMAND <DISABLE>\n    BUILD_COMMAND <DISABLE>\n    INSTALL_COMMAND ${make_command} PREFIX=<INSTALL_DIR> install)\n"
        },
        {
          "name": "debug",
          "type": "tree",
          "content": null
        },
        {
          "name": "demos",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "dpdk",
          "type": "commit",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "install-dependencies.sh",
          "type": "blob",
          "size": 5.765625,
          "content": "#!/bin/bash\n#\n# This file is open source software, licensed to you under the terms\n# of the Apache License, Version 2.0 (the \"License\").  See the NOTICE file\n# distributed with this work for additional information regarding copyright\n# ownership.  You may not use this file except in compliance with the License.\n#\n# You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\n# os-release may be missing in container environment by default.\nif [ -f \"/etc/os-release\" ]; then\n    . /etc/os-release\nelif [ -f \"/etc/arch-release\" ]; then\n    export ID=arch\nelse\n    echo \"/etc/os-release missing.\"\n    exit 1\nfi\n\ndebian_packages=(\n    cmake\n    diffutils\n    doxygen\n    g++\n    gcc\n    libboost-all-dev\n    libc-ares-dev\n    libcrypto++-dev\n    libfmt-dev\n    libgnutls28-dev\n    libhwloc-dev\n    liblz4-dev\n    libnuma-dev\n    libpciaccess-dev\n    libprotobuf-dev\n    libsctp-dev\n    libtool\n    liburing-dev\n    libxml2-dev\n    libyaml-cpp-dev\n    make\n    meson\n    ninja-build\n    openssl\n    pkg-config\n    protobuf-compiler\n    python3\n    python3-pyelftools\n    python3-yaml\n    ragel\n    stow\n    systemtap-sdt-dev\n    valgrind\n    xfslibs-dev\n)\n\n# seastar doesn't directly depend on these packages. They are\n# needed because we want to link seastar statically and pkg-config\n# has no way of saying \"static seastar, but dynamic transitive\n# dependencies\". They provide the various .so -> .so.ver symbolic\n# links.\ntransitive=(\n    libidn2-devel\n    libtool-ltdl-devel\n    libunistring-devel\n    trousers-devel\n)\n\nredhat_packages=(\n    boost-devel\n    c-ares-devel\n    cmake\n    diffutils\n    doxygen\n    fmt-devel\n    gcc\n    gnutls-devel\n    hwloc-devel\n    libpciaccess-devel\n    libtool\n    liburing-devel\n    libxml2-devel\n    lksctp-tools-devel\n    lz4-devel\n    make\n    meson\n    numactl-devel\n    openssl\n    protobuf-compiler\n    protobuf-devel\n    python3\n    python3-pyelftools\n    python3-pyyaml\n    stow\n    systemtap-sdt-devel\n    valgrind-devel\n    xfsprogs-devel\n    yaml-cpp-devel\n    \"${transitive[@]}\"\n)\n\nfedora_packages=(\n    \"${redhat_packages[@]}\"\n    boost-devel\n    fmt-devel\n    gcc-c++\n    libasan\n    libatomic\n    libubsan\n    ninja-build\n    ragel\n    valgrind-devel\n)\n\ncentos7_packages=(\n    \"${redhat_packages[@]}\"\n    cmake3\n    devtoolset-11-gcc-c++\n    devtoolset-11-libasan\n    devtoolset-11-libatomic\n    devtoolset-11-libubsan\n    ninja-build\n    ragel\n    rh-mongodb36-boost-devel\n)\n\ncentos8_packages=(\n    \"${redhat_packages[@]}\"\n    gcc-toolset-11-gcc\n    gcc-toolset-11-gcc-c++\n    gcc-toolset-11-libasan-devel\n    gcc-toolset-11-libatomic-devel\n    gcc-toolset-11-libubsan-devel\n    ninja-build\n    ragel\n)\n\ncentos9_packages=(\n    \"${redhat_packages[@]}\"\n    gcc-toolset-13-gcc\n    gcc-toolset-13-gcc-c++\n    gcc-toolset-13-libasan-devel\n    gcc-toolset-13-libatomic-devel\n    gcc-toolset-13-libubsan-devel\n    ninja-build\n    ragel\n)\n\n# 1) glibc 2.30-3 has sys/sdt.h (systemtap include)\n#    some old containers may contain glibc older,\n#    so enforce update on that one.\n# 2) if problems with signatures, ensure having fresh\n#    archlinux-keyring: pacman -Sy archlinux-keyring && pacman -Syyu\n# 3) aur installations require having sudo and being\n#    a sudoer. makepkg does not work otherwise.\narch_packages=(\n    boost\n    boost-libs\n    c-ares\n    cmake\n    crypto++\n    filesystem\n    fmt\n    gcc\n    glibc\n    gnutls\n    hwloc\n    libpciaccess\n    libtool\n    liburing\n    libxml2\n    lksctp-tools\n    lz4\n    make\n    meson\n    ninja\n    numactl\n    openssl\n    pkgconf\n    protobuf\n    python3\n    python-pyelftools\n    python-yaml\n    ragel\n    stow\n    valgrind\n    xfsprogs\n    yaml-cpp\n)\n\nopensuse_packages=(\n    c-ares-devel\n    cmake\n    hwloc-devel\n    libboost_atomic1_66_0\n    libboost_atomic1_66_0-devel\n    libboost_chrono1_66_0\n    libboost_chrono1_66_0-devel\n    libboost_date_time1_66_0\n    libboost_date_time1_66_0-devel\n    libboost_filesystem1_66_0\n    libboost_filesystem1_66_0-devel\n    libboost_program_options1_66_0\n    libboost_program_options1_66_0-devel\n    libboost_system1_66_0\n    libboost_system1_66_0-devel\n    libboost_test1_66_0\n    libboost_test1_66_0-devel\n    libboost_thread1_66_0\n    libboost_thread1_66_0-devel\n    libgnutls-devel\n    libgnutlsxx28\n    liblz4-devel\n    libnuma-devel\n    libtool\n    lksctp-tools-devel\n    meson\n    ninja\n    openssl\n    protobuf-devel\n    python3-PyYAML\n    ragel\n    stow\n    xfsprogs-devel\n    yaml-cpp-devel\n)\n\ncase \"$ID\" in\n    ubuntu|debian|pop)\n        apt-get install -y \"${debian_packages[@]}\"\n    ;;\n    fedora)\n        dnf install -y \"${fedora_packages[@]}\"\n    ;;\n    rhel|centos|rocky)\n        if [ \"$VERSION_ID\" = \"7\" ]; then\n            yum install -y epel-release centos-release-scl scl-utils\n            yum install -y \"${centos7_packages[@]}\"\n        elif [ \"${VERSION_ID%%.*}\" = \"8\" ]; then\n            dnf install -y epel-release\n            dnf install -y \"${centos8_packages[@]}\"\n        elif [ \"${VERSION_ID%%.*}\" = \"9\" ]; then\n            dnf install -y epel-release\n            dnf install -y \"${centos9_packages[@]}\"\n        fi\n    ;;\n    opensuse-leap)\n        zypper install -y \"${opensuse_packages[@]}\"\n    ;;\n    arch|manjaro)\n        if [ \"$EUID\" -eq \"0\" ]; then\n            pacman -Sy --needed --noconfirm \"${arch_packages[@]}\"\n        else\n            echo \"seastar: running without root. Skipping main dependencies (pacman).\" 1>&2\n        fi\n    ;;\n    *)\n        echo \"Your system ($ID) is not supported by this script. Please install dependencies manually.\"\n        exit 1\n    ;;\nesac\n"
        },
        {
          "name": "kvm",
          "type": "tree",
          "content": null
        },
        {
          "name": "licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkgconfig",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "seastar_cmake.py",
          "type": "blob",
          "size": 1.857421875,
          "content": "# This file is open source software, licensed to you under the terms\n# of the Apache License, Version 2.0 (the \"License\").  See the NOTICE file\n# distributed with this work for additional information regarding copyright\n# ownership.  You may not use this file except in compliance with the License.\n#\n# You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\nimport os\n\nSUPPORTED_MODES = ['release', 'debug', 'dev', 'sanitize']\n\nROOT_PATH = os.path.realpath(os.path.dirname(__file__))\n\nDEFAULT_BUILD_ROOT = 'build'\n\nCOOKING_BASIC_ARGS = ['./cooking.sh']\n\ndef build_path(mode, build_root):\n    \"\"\"Return the absolute path to the build directory for the given mode,\n    i.e., seastar_dir/<build_root>/<mode>\"\"\"\n    assert mode in SUPPORTED_MODES, f'Unsupported build mode: {mode}'\n    return os.path.join(ROOT_PATH, build_root, mode)\n\ndef is_release_mode(mode):\n    return mode == 'release'\n\ndef convert_strings_to_cmake_list(*args):\n    \"\"\"Converts a sequence of whitespace-separated strings of tokens into a semicolon-separated\n    string of tokens for CMake.\n\n    \"\"\"\n    return ';'.join(' '.join(args).split())\n\ndef translate_arg(arg, new_name, value_when_none='no'):\n    \"\"\"\n    Translate a value populated from the command-line into a name to pass to the invocation of CMake.\n    \"\"\"\n    if arg is None:\n        value = value_when_none\n    elif type(arg) is bool:\n        value = 'yes' if arg else 'no'\n    else:\n        value = arg\n\n    if value is None:\n        return ''\n    else:\n        return '-DSeastar_{}={}'.format(new_name, value)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test.py",
          "type": "blob",
          "size": 3.080078125,
          "content": "#!/usr/bin/env python3\n#\n# This file is open source software, licensed to you under the terms\n# of the Apache License, Version 2.0 (the \"License\").  See the NOTICE file\n# distributed with this work for additional information regarding copyright\n# ownership.  You may not use this file except in compliance with the License.\n#\n# You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\nimport argparse\nimport subprocess\nimport seastar_cmake\n\nif __name__ == \"__main__\":\n\n    parser = argparse.ArgumentParser(description=\"Seastar test runner\")\n    parser.add_argument('--fast',  action=\"store_true\", help=\"Run only fast tests\")\n    parser.add_argument('--name',  action=\"store\", help=\"Run only test whose name contains given string\")\n    parser.add_argument('--mode', choices=seastar_cmake.SUPPORTED_MODES, help=\"Run only tests for given build mode\")\n    parser.add_argument('--build-root', action='store', default=seastar_cmake.DEFAULT_BUILD_ROOT, type=str,\n                        help=\"The name of the build root build directoy: \"\n                        \"using a different name allows multiple configurations to co-exist in the same repository\")\n    parser.add_argument('--timeout', action=\"store\",default=\"300\",type=int, help=\"timeout value for test execution\")\n    parser.add_argument('--jenkins', action=\"store\",help=\"jenkins output file prefix\")\n    parser.add_argument('--smp', '-c', action=\"store\",default='2',type=int,help=\"Number of threads for multi-core tests\")\n    parser.add_argument('--verbose', '-v', action = 'store_true', default = False,\n                        help = 'Verbose reporting')\n    args = parser.parse_args()\n\n    MODES = [args.mode] if args.mode else seastar_cmake.SUPPORTED_MODES\n\n    def run_tests(mode):\n        BUILD_PATH = seastar_cmake.build_path(mode, args.build_root)\n\n        # For convenience.\n        tr = seastar_cmake.translate_arg\n\n        TRANSLATED_CMAKE_ARGS = [\n            tr(args.timeout, 'TEST_TIMEOUT'),\n            tr(args.fast, 'EXECUTE_ONLY_FAST_TESTS'),\n            tr(args.smp, 'UNIT_TEST_SMP'),\n            tr(args.jenkins, 'JENKINS', value_when_none=''),\n        ]\n\n        # Modify the existing build by pointing to the build directory.\n        CMAKE_ARGS = ['cmake', BUILD_PATH] + TRANSLATED_CMAKE_ARGS\n        print(CMAKE_ARGS)\n        subprocess.check_call(CMAKE_ARGS, shell=False, cwd=seastar_cmake.ROOT_PATH)\n\n        TRANSLATED_CTEST_ARGS = ['--output-on-failure']\n        if args.verbose:\n            TRANSLATED_CTEST_ARGS += ['--verbose']\n        if args.name:\n            TRANSLATED_CTEST_ARGS += ['-R', args.name]\n\n        CTEST_ARGS = ['ctest', BUILD_PATH] + TRANSLATED_CTEST_ARGS\n        print(CTEST_ARGS)\n        subprocess.check_call(CTEST_ARGS, shell=False, cwd=BUILD_PATH)\n\n    for mode in MODES:\n        run_tests(mode)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}