{
  "metadata": {
    "timestamp": 1736566040361,
    "page": 24,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "NVIDIA/TensorRT-LLM",
      "stars": 9122,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.326171875,
          "content": "---\nAccessModifierOffset: -4\nAlignAfterOpenBracket: DontAlign\nAlignConsecutiveAssignments: None\nAlignConsecutiveDeclarations: None\nAlignOperands:   false\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: Empty\nAllowShortCaseLabelsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: Yes\nBasedOnStyle: None\nBinPackArguments: true\nBinPackParameters: true\nBreakBeforeBinaryOperators: All\nBreakBeforeBraces: Allman\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: true\nColumnLimit:     120\nCommentPragmas:  '^ IWYU pragma:'\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nForEachMacros:   [ foreach, Q_FOREACH, BOOST_FOREACH ]\nIncludeBlocks: Preserve\nIncludeCategories:\n  - Regex:           '^\"(llvm|llvm-c|clang|clang-c)/'\n    Priority:        2\n  - Regex:           '^(<|\"(gtest|isl|json)/)'\n    Priority:        3\n  - Regex:           '.*'\n    Priority:        1\nIndentCaseLabels: false\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nKeepEmptyLinesAtTheStartOfBlocks: true\nLanguage: Cpp\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 4\nObjCSpaceAfterProperty: true\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerAlignment: Left\nQualifierAlignment: Right\nReflowComments:  true\nSeparateDefinitionBlocks: Always\nSortIncludes:    CaseSensitive\nSpaceAfterCStyleCast: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInCStyleCastParentheses: false\nSpacesInContainerLiterals: true\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        c++14\nTabWidth:        4\nUseTab:          Never\n...\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.2099609375,
          "content": "build\ncpp/*build*\ncpp/cmake-*\ncpp/.ccache\ncpp/tests/resources/models\ntensorrt_llm/libs\n**/__pycache__\nexamples/**/.git\nexamples/**/*.bin\nexamples/**/*.engine\nexamples/**/*.onnx\nexamples/**/c-model\nexamples/gpt/gpt*\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1611328125,
          "content": "*.a filter=lfs diff=lfs merge=lfs -text\n*.lib filter=lfs diff=lfs merge=lfs -text\n*.so filter=lfs diff=lfs merge=lfs -text\n*.dll filter=lfs diff=lfs merge=lfs -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.771484375,
          "content": "__pycache__/\n.vscode\n*.engine\n*.engine.config\n*.cache\n*.nsys-rep\n.VSCodeCounter\ncpp/build*\nbuild\n!tensorrt_llm/bench/build\n!builders/\n*.egg-info/\n.coverage\n*.onnx\ntmp/\nvenv/\n.venv/\n.local/\n.hypothesis/\n.idea/\ndump*/\n.trt-internal\n*.dot\n*.prof\n*.log\n*.pkl\n*.hdf5\n*.lock\nconfig.json\n/*.svg\ncpp/cmake-build-*\ncpp/.ccache\ntensorrt_llm/bin\ntensorrt_llm/libs\ntensorrt_llm/bindings.*.so\ntensorrt_llm/bindings.pyi\ntensorrt_llm/bindings/**/*.pyi\n*docs/cpp_docs*\n*docs/source/_cpp_gen*\ndocs/source/llm-api/*.rst\ndocs/source/llm-api-examples/llm_*.rst\n*.swp\n\n# Testing\n.coverage.*\nresults_trt/\nllm-test-workspace/\n\n# build/debug\n*.safetensors\n*/tllm_debug/**\n*.patch\n\n# Generated files\ncpp/include/tensorrt_llm/executor/version.h\n\n# User config files\nCMakeUserPresets.json\ncompile_commands.json\n*.bin\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.689453125,
          "content": "[submodule \"3rdparty/cutlass\"]\n\tpath = 3rdparty/cutlass\n\turl = https://github.com/NVIDIA/cutlass.git\n[submodule \"3rdparty/json\"]\n\tpath = 3rdparty/json\n\turl = https://github.com/nlohmann/json.git\n[submodule \"3rdparty/cxxopts\"]\n\tpath = 3rdparty/cxxopts\n\turl = https://github.com/jarro2783/cxxopts\n\tbranch = v3.1.1\n[submodule \"3rdparty/NVTX\"]\n\tpath = 3rdparty/NVTX\n\turl = https://github.com/NVIDIA/NVTX.git\n[submodule \"3rdparty/ucxx\"]\n\tpath = 3rdparty/ucxx\n\turl = https://github.com/rapidsai/ucxx.git\n[submodule \"3rdparty/pybind11\"]\n\tpath = 3rdparty/pybind11\n\turl = https://github.com/pybind/pybind11.git\n[submodule \"3rdparty/xgrammar\"]\n\tpath = 3rdparty/xgrammar\n\turl = https://github.com/mlc-ai/xgrammar.git\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.4697265625,
          "content": "repos:\n-   repo: https://github.com/pycqa/isort\n    rev: 5.12.0\n    hooks:\n    -   id: isort\n-   repo: https://github.com/Lucas-C/pre-commit-hooks.git\n    rev: v1.1.13\n    hooks:\n    -   id: remove-crlf\n-   repo:  https://github.com/google/yapf\n    rev: v0.43.0\n    hooks:\n    -   id: yapf\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.1.0\n    hooks:\n    -   id: check-added-large-files\n        exclude: |\n            (?x)^(.*cubin.cpp)$\n    -   id: check-merge-conflict\n    -   id: check-symlinks\n    -   id: detect-private-key\n    -   id: end-of-file-fixer\n    -   id: check-yaml\n    -   id: trailing-whitespace\n-   repo: https://github.com/PyCQA/autoflake\n    rev: v1.6.1\n    hooks:\n    -   id: autoflake\n        args: ['--in-place', '--remove-all-unused-imports', '--remove-unused-variables']\n-   repo: https://github.com/pre-commit/mirrors-clang-format\n    rev: v16.0.0\n    hooks:\n    -   id: clang-format\n        types_or: [c++, c, cuda]\n        exclude: |\n            (?x)^(.*cubin.cpp$ | .*fmha_cubin.h)$\n-   repo: https://github.com/cheshirekow/cmake-format-precommit\n    rev: v0.6.10\n    hooks:\n    -   id: cmake-format\n-   repo: https://github.com/codespell-project/codespell\n    rev: v2.2.4\n    hooks:\n    -   id: codespell\n        args:\n        - --skip=\".git,3rdparty\"\n        - --exclude-file=examples/whisper/tokenizer.py\n        - --ignore-words-list=rouge,inout,atleast,strat,nd,subtile,thrid,improbe\n        exclude: 'tests/llm-test-defs/turtle/test_input_files'\n"
        },
        {
          "name": "3rdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.9462890625,
          "content": "<div align=\"center\">\n\nTensorRT-LLM\n===========================\n<h4> A TensorRT Toolbox for Optimized Large Language Model Inference</h4>\n\n[![Documentation](https://img.shields.io/badge/docs-latest-brightgreen.svg?style=flat)](https://nvidia.github.io/TensorRT-LLM/)\n[![python](https://img.shields.io/badge/python-3.12.3-green)](https://www.python.org/downloads/release/python-3123/)\n[![cuda](https://img.shields.io/badge/cuda-12.6.3-green)](https://developer.nvidia.com/cuda-downloads)\n[![trt](https://img.shields.io/badge/TRT-10.7.0-green)](https://developer.nvidia.com/tensorrt)\n[![version](https://img.shields.io/badge/release-0.17.0.dev-green)](./tensorrt_llm/version.py)\n[![license](https://img.shields.io/badge/license-Apache%202-blue)](./LICENSE)\n\n[Architecture](./docs/source/architecture/overview.md)&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;[Performance](./docs/source/performance/perf-overview.md)&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;[Examples](./examples/)&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;[Documentation](./docs/source/)&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;[Roadmap](https://docs.google.com/presentation/d/1gycPmtdh7uUcH6laOvW65Dbp9F1McUkGDIcAyjicBZs/edit?usp=sharing)\n\n---\n<div align=\"left\">\n\n## Latest News\n* [2025/01/07] 🌟 Getting Started with TensorRT-LLM\n[➡️ link](https://www.youtube.com/watch?v=TwWqPnuNHV8)\n\n* [2025/01/04] ⚡Boost Llama 3.3 70B Inference Throughput 3x with NVIDIA TensorRT-LLM Speculative Decoding\n[➡️ link](https://developer.nvidia.com/blog/boost-llama-3-3-70b-inference-throughput-3x-with-nvidia-tensorrt-llm-speculative-decoding/)\n<div align=\"center\">\n<img src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2024/12/three-llamas-wearing-goggles.png\" width=\"50%\">\n<div align=\"left\">\n\n* [2024/12/10] ⚡ Llama 3.3 70B from AI at Meta is accelerated by TensorRT-LLM. 🌟 State-of-the-art model on par with Llama 3.1 405B for reasoning, math, instruction following and tool use. Explore the preview\n[➡️ link](https://build.nvidia.com/meta/llama-3_3-70b-instruct)\n\n* [2024/12/03] 🌟 Boost your AI inference throughput by up to 3.6x.  We now support speculative decoding and tripling token throughput with our NVIDIA TensorRT-LLM. Perfect for your generative AI apps.  ⚡Learn how in this technical deep dive\n[➡️ link](https://nvda.ws/3ZCZTzD)\n\n* [2024/12/02] Working on deploying ONNX models for performance-critical applications? Try our NVIDIA Nsight Deep Learning Designer ⚡ A user-friendly GUI and tight integration with NVIDIA TensorRT that offers:\n✅ Intuitive visualization of ONNX model graphs\n✅ Quick tweaking of model architecture and parameters\n✅ Detailed performance profiling with either ORT or TensorRT\n✅ Easy building of TensorRT engines\n[➡️ link](https://developer.nvidia.com/nsight-dl-designer?ncid=so-link-485689&linkId=100000315016072)\n\n* [2024/11/26] 📣 Introducing TensorRT-LLM for Jetson AGX Orin, making it even easier to deploy on Jetson AGX Orin with initial support in JetPack 6.1 via the v0.12.0-jetson branch of the TensorRT-LLM repo. ✅ Pre-compiled TensorRT-LLM wheels & containers for easy integration ✅ Comprehensive guides & docs to get you started\n[➡️ link](https://forums.developer.nvidia.com/t/tensorrt-llm-for-jetson/313227?linkId=100000312718869)\n\n* [2024/11/21] NVIDIA TensorRT-LLM Multiblock Attention Boosts Throughput by More Than 3x for Long Sequence Lengths on NVIDIA HGX H200\n[➡️ link](https://developer.nvidia.com/blog/nvidia-tensorrt-llm-multiblock-attention-boosts-throughput-by-more-than-3x-for-long-sequence-lengths-on-nvidia-hgx-h200/)\n\n* [2024/11/19] Llama 3.2 Full-Stack Optimizations Unlock High Performance on NVIDIA GPUs\n[➡️ link](https://developer.nvidia.com/blog/llama-3-2-full-stack-optimizations-unlock-high-performance-on-nvidia-gpus/?ncid=so-link-721194)\n\n* [2024/11/09] 🚀🚀🚀 3x Faster AllReduce with NVSwitch and TensorRT-LLM MultiShot\n[➡️ link](https://developer.nvidia.com/blog/3x-faster-allreduce-with-nvswitch-and-tensorrt-llm-multishot/)\n\n* [2024/11/09] ✨ NVIDIA advances the AI ecosystem with the AI model of LG AI Research 🙌\n[➡️ link](https://blogs.nvidia.co.kr/blog/nvidia-lg-ai-research/)\n\n* [2024/11/02] 🌟🌟🌟 NVIDIA and LlamaIndex Developer Contest\n🙌 Enter for a chance to win prizes including an NVIDIA® GeForce RTX™ 4080 SUPER GPU, DLI credits, and more🙌\n[➡️ link](https://developer.nvidia.com/llamaindex-developer-contest)\n\n<details close>\n<summary>Previous News</summary>\n\n* [2024/10/28] 🏎️🏎️🏎️ NVIDIA GH200 Superchip Accelerates Inference by 2x in Multiturn Interactions with Llama Models\n[➡️ link](https://developer.nvidia.com/blog/nvidia-gh200-superchip-accelerates-inference-by-2x-in-multiturn-interactions-with-llama-models/)\n\n* [2024/10/22] New 📝 Step-by-step instructions on how to\n✅ Optimize LLMs with NVIDIA TensorRT-LLM,\n✅ Deploy the optimized models with Triton Inference Server,\n✅ Autoscale LLMs deployment in a Kubernetes environment.\n🙌 Technical Deep Dive:\n[➡️ link](https://nvda.ws/3YgI8UT)\n\n* [2024/10/07] 🚀🚀🚀Optimizing Microsoft Bing Visual Search with NVIDIA Accelerated Libraries\n[➡️ link](https://developer.nvidia.com/blog/optimizing-microsoft-bing-visual-search-with-nvidia-accelerated-libraries/)\n\n* [2024/09/29] 🌟 AI at Meta PyTorch + TensorRT v2.4 🌟 ⚡TensorRT 10.1 ⚡PyTorch 2.4 ⚡CUDA 12.4 ⚡Python 3.12\n[➡️ link](https://github.com/pytorch/TensorRT/releases/tag/v2.4.0)\n\n* [2024/09/17] ✨ NVIDIA TensorRT-LLM Meetup\n[➡️ link](https://drive.google.com/file/d/1RR8GqC-QbuaKuHj82rZcXb3MS20SWo6F/view?usp=share_link)\n\n* [2024/09/17] ✨ Accelerating LLM Inference at Databricks with TensorRT-LLM\n[➡️ link](https://drive.google.com/file/d/1NeSmrLaWRJAY1rxD9lJmzpB9rzr38j8j/view?usp=sharing)\n\n* [2024/09/17] ✨ TensorRT-LLM @ Baseten\n[➡️ link](https://drive.google.com/file/d/1Y7L2jqW-aRmt31mCdqhwvGMmCSOzBUjG/view?usp=share_link)\n\n* [2024/09/04] 🏎️🏎️🏎️ Best Practices for Tuning TensorRT-LLM for Optimal Serving with BentoML\n[➡️ link](https://www.bentoml.com/blog/tuning-tensor-rt-llm-for-optimal-serving-with-bentoml)\n\n\n* [2024/08/20] 🏎️SDXL with #TensorRT Model Optimizer ⏱️⚡ 🏁 cache diffusion 🏁 quantization aware training 🏁 QLoRA 🏁 #Python 3.12\n[➡️ link](https://developer.nvidia.com/blog/nvidia-tensorrt-model-optimizer-v0-15-boosts-inference-performance-and-expands-model-support/)\n\n* [2024/08/13] 🐍 DIY Code Completion with #Mamba ⚡ #TensorRT #LLM for speed 🤖 NIM for ease ☁️ deploy anywhere\n[➡️ link](https://developer.nvidia.com/blog/revolutionizing-code-completion-with-codestral-mamba-the-next-gen-coding-llm/)\n\n* [2024/08/06] 🗫 Multilingual Challenge Accepted 🗫\n🤖 #TensorRT #LLM boosts low-resource languages like Hebrew, Indonesian and Vietnamese ⚡[➡️ link](https://developer.nvidia.com/blog/accelerating-hebrew-llm-performance-with-nvidia-tensorrt-llm/?linkId=100000278659647)\n\n* [2024/07/30] Introducing🍊 @SliceXAI ELM Turbo 🤖 train ELM once ⚡ #TensorRT #LLM optimize ☁️ deploy anywhere\n[➡️ link](https://developer.nvidia.com/blog/supercharging-llama-3-1-across-nvidia-platforms)\n\n* [2024/07/23] 👀 @AIatMeta Llama 3.1 405B trained on 16K NVIDIA H100s - inference is #TensorRT #LLM optimized ⚡\n🦙 400 tok/s - per node\n🦙 37 tok/s - per user\n🦙 1 node inference\n[➡️ link](https://developer.nvidia.com/blog/supercharging-llama-3-1-across-nvidia-platforms)\n\n* [2024/07/09] Checklist to maximize multi-language performance of @meta #Llama3 with #TensorRT #LLM inference:\n✅ MultiLingual\n✅ NIM\n✅ LoRA tuned adaptors[➡️ Tech blog](https://developer.nvidia.com/blog/deploy-multilingual-llms-with-nvidia-nim/)\n\n* [2024/07/02] Let the @MistralAI MoE tokens fly 📈 🚀 #Mixtral 8x7B with NVIDIA #TensorRT #LLM on #H100.\n[➡️ Tech blog](https://developer.nvidia.com/blog/achieving-high-mixtral-8x7b-performance-with-nvidia-h100-tensor-core-gpus-and-tensorrt-llm?ncid=so-twit-928467)\n\n* [2024/06/24] Enhanced with NVIDIA #TensorRT #LLM, @upstage.ai’s solar-10.7B-instruct is ready to power your developer projects through our API catalog 🏎️. ✨[➡️ link](https://build.nvidia.com/upstage/solar-10_7b-instruct?snippet_tab=Try )\n\n* [2024/06/18] CYMI: 🤩 Stable Diffusion 3 dropped last week 🎊 🏎️ Speed up your SD3 with #TensorRT INT8 Quantization[➡️ link](https://build.nvidia.com/upstage/solar-10_7b-instruct?snippet_tab=Try )\n\n* [2024/06/18] 🧰Deploying ComfyUI with TensorRT?  Here’s your setup guide [➡️ link](https://github.com/comfyanonymous/ComfyUI_TensorRT)\n\n* [2024/06/11] ✨#TensorRT Weight-Stripped Engines ✨\nTechnical Deep Dive for serious coders ✅+99% compression ✅1 set of weights → ** GPUs ✅0 performance loss ✅** models…LLM, CNN, etc.[➡️ link](https://developer.nvidia.com/blog/maximum-performance-and-minimum-footprint-for-ai-apps-with-nvidia-tensorrt-weight-stripped-engines/)\n\n* [2024/06/04] ✨ #TensorRT and GeForce #RTX unlock ComfyUI SD superhero powers 🦸⚡ 🎥 Demo: [➡️ link](https://youtu.be/64QEVfbPHyg)\n📗 DIY notebook: [➡️ link](https://console.brev.dev/launchable/deploy?userID=2x2sil999&orgID=ktj33l4xj&name=ComfyUI_TensorRT&instance=L4%40g2-standard-4%3Anvidia-l4%3A1&diskStorage=500&cloudID=GCP&baseImage=docker.io%2Fpytorch%2Fpytorch%3A2.2.0-cuda12.1-cudnn8-runtime&ports=ComfUI%3A8188&file=https%3A%2F%2Fgithub.com%2Fbrevdev%2Fnotebooks%2Fblob%2Fmain%2Ftensorrt-comfyui.ipynb&launchableID=env-2hQX3n7ae5mq3NjNZ32DfAG0tJf)\n\n* [2024/05/28] ✨#TensorRT weight stripping for ResNet-50 ✨ ✅+99% compression\n✅1 set of weights → ** GPUs\\ ✅0 performance loss ✅** models…LLM, CNN, etc\n👀 📚 DIY [➡️ link](https://console.brev.dev/launchable/deploy?userID=2x2sil999&orgID=ktj33l4xj&launchableID=env-2h6bym7h5GFNho3vpWQQeUYMwTM&instance=L4%40g6.xlarge&diskStorage=500&cloudID=devplane-brev-1&baseImage=nvcr.io%2Fnvidia%2Ftensorrt%3A24.05-py3&file=https%3A%2F%2Fgithub.com%2FNVIDIA%2FTensorRT%2Fblob%2Frelease%2F10.0%2Fsamples%2Fpython%2Fsample_weight_stripping%2Fnotebooks%2Fweight_stripping.ipynb&name=tensorrt_weight_stripping_resnet50)\n\n* [2024/05/21] ✨@modal_labs has the codes for serverless @AIatMeta Llama 3 on #TensorRT #LLM ✨👀 📚 Marvelous Modal Manual:\nServerless TensorRT-LLM (LLaMA 3 8B) | Modal Docs [➡️ link](https://modal.com/docs/examples/trtllm_llama)\n\n* [2024/05/08] NVIDIA TensorRT Model Optimizer -- the newest member of the #TensorRT ecosystem is a library of post-training and training-in-the-loop model optimization techniques ✅quantization ✅sparsity ✅QAT [➡️ blog](https://developer.nvidia.com/blog/accelerate-generative-ai-inference-performance-with-nvidia-tensorrt-model-optimizer-now-publicly-available/)\n\n* [2024/05/07] 🦙🦙🦙 24,000 tokens per second 🛫Meta Llama 3 takes off with #TensorRT #LLM 📚[➡️ link](https://blogs.nvidia.com/blog/meta-llama3-inference-acceleration/)\n\n* [2024/02/06] [🚀 Speed up inference with SOTA quantization techniques in TRT-LLM](./docs/source/blogs/quantization-in-TRT-LLM.md)\n* [2024/01/30] [ New XQA-kernel provides 2.4x more Llama-70B throughput within the same latency budget](./docs/source/blogs/XQA-kernel.md)\n* [2023/12/04] [Falcon-180B on a single H200 GPU with INT4 AWQ, and 6.7x faster Llama-70B over A100](./docs/source/blogs/Falcon180B-H200.md)\n* [2023/11/27] [SageMaker LMI now supports TensorRT-LLM - improves throughput by 60%, compared to previous version](https://aws.amazon.com/blogs/machine-learning/boost-inference-performance-for-llms-with-new-amazon-sagemaker-containers/)\n* [2023/11/13] [H200 achieves nearly 12,000 tok/sec on Llama2-13B](./docs/source/blogs/H200launch.md)\n* [2023/10/22] [🚀 RAG on Windows using TensorRT-LLM and LlamaIndex 🦙](https://github.com/NVIDIA/trt-llm-rag-windows#readme)\n* [2023/10/19] Getting Started Guide - [Optimizing Inference on Large Language Models with NVIDIA TensorRT-LLM, Now Publicly Available\n](https://developer.nvidia.com/blog/optimizing-inference-on-llms-with-tensorrt-llm-now-publicly-available/)\n* [2023/10/17] [Large Language Models up to 4x Faster on RTX With TensorRT-LLM for Windows\n](https://blogs.nvidia.com/blog/2023/10/17/tensorrt-llm-windows-stable-diffusion-rtx/)\n\n</details>\n\n## TensorRT-LLM Overview\n\nTensorRT-LLM is a library for optimizing Large Language Model (LLM) inference.\nIt provides state-of-the-art optimizations, including custom attention kernels, inflight batching, paged KV caching, quantization (FP8, INT4 [AWQ](https://arxiv.org/abs/2306.00978), INT8 [SmoothQuant](https://arxiv.org/abs/2211.10438), ++) and much more, to perform inference efficiently on NVIDIA GPUs\n\nTensorRT-LLM provides a Python API to build LLMs into optimized\n[TensorRT](https://developer.nvidia.com/tensorrt) engines.\nIt contains runtimes in Python (bindings) and C++ to execute those TensorRT engines.\nIt also includes a [backend](https://github.com/triton-inference-server/tensorrtllm_backend) for integration with the [NVIDIA Triton Inference Server](https://developer.nvidia.com/nvidia-triton-inference-server).\nModels built with TensorRT-LLM can be executed on a wide range of configurations from a single GPU to multiple nodes with multiple GPUs (using [Tensor Parallelism](https://docs.nvidia.com/nemo-framework/user-guide/latest/nemotoolkit/features/parallelisms.html#tensor-parallelism) and/or [Pipeline Parallelism](https://docs.nvidia.com/nemo-framework/user-guide/latest/nemotoolkit/features/parallelisms.html#pipeline-parallelism)).\n\nTensorRT-LLM comes with several popular models pre-defined. They can easily be\nmodified and extended to fit custom needs via a PyTorch-like Python API. Refer to the [Support Matrix](https://nvidia.github.io/TensorRT-LLM/reference/support-matrix.html) for a list of supported models.\n\nTensorRT-LLM is built on top of the [TensorRT](https://developer.nvidia.com/tensorrt) Deep Learning Inference library. It leverages much of TensorRT's deep learning optimizations and adds LLM-specific optimizations on top, as described above. TensorRT is an ahead-of-time compiler; it builds \"[Engines](https://docs.nvidia.com/deeplearning/tensorrt/quick-start-guide/index.html#ecosystem)\" which are optimized representations of the compiled model containing the entire execution graph. These engines are optimized for a specific GPU architecture, and can be validated, benchmarked, and serialized for later deployment in a production environment.\n\n\n## Getting Started\n\nTo get started with TensorRT-LLM, visit our documentation:\n\n- [Quick Start Guide](https://nvidia.github.io/TensorRT-LLM/quick-start-guide.html)\n- [Release Notes](https://nvidia.github.io/TensorRT-LLM/release-notes.html)\n- [Installation Guide for Linux](https://nvidia.github.io/TensorRT-LLM/installation/linux.html)\n- [Installation Guide for Windows](https://nvidia.github.io/TensorRT-LLM/installation/windows.html)\n- [Installation Guide for Grace Hopper](https://nvidia.github.io/TensorRT-LLM/installation/grace-hopper.html)\n- [Supported Hardware, Models, and other Software](https://nvidia.github.io/TensorRT-LLM/reference/support-matrix.html)\n\n## Community\n- [Model zoo](https://huggingface.co/TheFloat16) (generated by TRT-LLM rel 0.9 a9356d4b7610330e89c1010f342a9ac644215c52)\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "cpp",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements-dev-windows.txt",
          "type": "blob",
          "size": 0.2998046875,
          "content": "-r requirements-windows.txt\n--extra-index-url https://download.pytorch.org/whl/\ndatasets\neinops\ngraphviz\nmypy\nparameterized\npre-commit\npybind11\npybind11-stubgen\npytest-cov\npytest-forked\npytest-timeout\npytest-xdist\nrouge_score\ncloudpickle\ntyping-extensions==4.8.0\njsonlines==4.0.0\njieba==0.42.1\nrouge==1.0.1\n"
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.330078125,
          "content": "-r requirements.txt\ndatasets==2.19.2\neinops\ngraphviz\nmypy\nparameterized\npre-commit\npybind11\npybind11-stubgen\npytest-asyncio\npytest-cov\npytest-forked\npytest-xdist\npytest-timeout\npytest-split\nrouge_score\ncloudpickle\ntyping-extensions==4.12.2\nbandit==1.7.7\njsonlines==4.0.0\njieba==0.42.1\nrouge==1.0.1\npytest-rerunfailures\nsetuptools==70.3.0\n"
        },
        {
          "name": "requirements-windows.txt",
          "type": "blob",
          "size": 0.5810546875,
          "content": "--extra-index-url https://download.pytorch.org/whl/\naccelerate>=0.25.0\nbuild\ncolored\ncuda-python==12.6.0\ndiffusers>=0.27.0\nnumpy<2\nonnx>=1.12.0\nonnx_graphsurgeon>=0.5.2\nordered-set\npolygraphy==0.49.9\npsutil\npynvml>=11.5.0\npulp\npandas\nh5py==3.12.1\npywin32\nStrEnum\nsentencepiece>=0.2.0\ntensorrt~=10.7.0\ntokenizers>=0.14\n# Default torch is CPU-only on Windows, so need to specify a torch version with GPU support\ntorch==2.4.1+cu124\ntorchvision\nnvidia-modelopt[torch]~=0.19.0\ntransformers>=4.38.2,<=4.45.1\nwheel\noptimum\nevaluate\njanus\nmpmath>=1.3.0\nclick\nclick_option_group\npyzmq\nsetuptools==70.3.0\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.703125,
          "content": "accelerate>=0.25.0\nbuild\ncolored\ncuda-python # Do not override the custom version of cuda-python installed in the NGC PyTorch image.\ndiffusers>=0.27.0\nlark\nmpi4py\nnumpy<2\nonnx>=1.12.0\nonnx_graphsurgeon>=0.5.2\nopenai==1.54.3\npolygraphy\npsutil\npynvml>=11.5.0\npulp\npandas\nh5py==3.12.1\nStrEnum\nsentencepiece>=0.1.99\ntensorrt~=10.7.0\n# https://docs.nvidia.com/deeplearning/frameworks/pytorch-release-notes/rel-24-11.html#rel-24-11 uses 2.6.0a0.\ntorch>=2.5.1,<=2.6.0a0\ntorchvision\nnvidia-modelopt[torch]~=0.19.0\nnvidia-nccl-cu12\ntransformers>=4.38.2,<=4.45.1\npydantic>=2.9.1\npillow==10.3.0\nwheel\noptimum\nevaluate\nmpmath>=1.3.0\nclick\nclick_option_group\naenum\npyzmq\nfastapi==0.115.4\nuvicorn\nhttpx\nsetuptools==70.3.0\nordered-set\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.0712890625,
          "content": "[isort]\nline_length = 80\n\n[yapf]\nbased_on_style = pep8\ncolumn_limit = 80\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 5.00390625,
          "content": "# SPDX-FileCopyrightText: Copyright (c) 2022-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.\n# SPDX-License-Identifier: Apache-2.0\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport os\nimport platform\nfrom pathlib import Path\n\nfrom setuptools import find_packages, setup\nfrom setuptools.dist import Distribution\n\n\ndef parse_requirements(filename: os.PathLike):\n    with open(filename) as f:\n        requirements = f.read().splitlines()\n\n        def extract_url(line):\n            return next(filter(lambda x: x[0] != '-', line.split()))\n\n        extra_URLs = []\n        deps = []\n        for line in requirements:\n            if line.startswith(\"#\") or line.startswith(\"-r\"):\n                continue\n\n            # handle -i and --extra-index-url options\n            if \"-i \" in line or \"--extra-index-url\" in line:\n                extra_URLs.append(extract_url(line))\n            else:\n                deps.append(line)\n    return deps, extra_URLs\n\n\ndef sanity_check():\n    bindings_path = Path(\n        __file__).resolve().parent / \"tensorrt_llm\" / \"bindings\"\n    if not bindings_path.exists():\n        raise ImportError(\n            'The `bindings` module does not exist. Please check the package integrity. '\n            'If you are attempting to use the pip development mode (editable installation), '\n            'please execute `build_wheels.py` first, and then run `pip install -e .`.'\n        )\n\n\ndef get_version():\n    version_file = Path(\n        __file__).resolve().parent / \"tensorrt_llm\" / \"version.py\"\n    version = None\n    with open(version_file) as f:\n        for line in f:\n            if not line.startswith(\"__version__\"):\n                continue\n            version = line.split('\"')[1]\n\n    if version is None:\n        raise RuntimeError(f\"Could not set version from {version_file}\")\n\n    return version\n\n\nclass BinaryDistribution(Distribution):\n    \"\"\"Distribution which always forces a binary package with platform name\"\"\"\n\n    def has_ext_modules(self):\n        return True\n\n\non_windows = platform.system() == \"Windows\"\nrequired_deps, extra_URLs = parse_requirements(\n    Path(\"requirements-windows.txt\" if on_windows else \"requirements.txt\"))\ndevel_deps, _ = parse_requirements(\n    Path(\"requirements-dev-windows.txt\"\n         if on_windows else \"requirements-dev.txt\"))\nsanity_check()\n\n# https://setuptools.pypa.io/en/latest/references/keywords.html\nsetup(\n    name='tensorrt_llm',\n    version=get_version(),\n    description='TensorRT-LLM: A TensorRT Toolbox for Large Language Models',\n    long_description=\n    'TensorRT-LLM: A TensorRT Toolbox for Large Language Models',\n    author=\"NVIDIA Corporation\",\n    url=\"https://github.com/NVIDIA/TensorRT-LLM\",\n    download_url=\"https://github.com/NVIDIA/TensorRT-LLM/tags\",\n    packages=find_packages(),\n    # TODO Add windows support for python bindings.\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    distclass=BinaryDistribution,\n    license=\"Apache License 2.0\",\n    keywords=\"nvidia tensorrt deeplearning inference\",\n    package_data={\n        'tensorrt_llm': ([\n            'libs/th_common.dll', 'libs/tensorrt_llm.dll',\n            'libs/nvinfer_plugin_tensorrt_llm.dll',\n            'libs/tensorrt_llm_nvrtc_wrapper.dll', 'bindings.*.pyd'\n        ] if on_windows else [\n            'bin/executorWorker',\n            'libs/libtensorrt_llm.so',\n            'libs/libth_common.so',\n            'libs/libnvinfer_plugin_tensorrt_llm.so',\n            'libs/libtensorrt_llm_nvrtc_wrapper.so',\n            'libs/libtensorrt_llm_ucx_wrapper.so',\n            'libs/libdecoder_attention.so',\n            'bindings.*.so',\n        ]) + [\n            'bindings/*.pyi', 'tools/plugin_gen/templates/*',\n            'bench/build/benchmark_config.yml'\n        ],\n    },\n    entry_points={\n        'console_scripts': [\n            'trtllm-build=tensorrt_llm.commands.build:main',\n            'trtllm-prune=tensorrt_llm.commands.prune:main',\n            'trtllm-refit=tensorrt_llm.commands.refit:main',\n            'trtllm-bench=tensorrt_llm.commands.bench:main',\n            'trtllm-serve=tensorrt_llm.commands.serve:main',\n        ],\n    },\n    scripts=['tensorrt_llm/llmapi/trtllm-llmapi-launch'],\n    extras_require={\n        \"devel\": devel_deps,\n        \"benchmarking\": [\n            \"click\",\n            \"pydantic\",\n        ]\n    },\n    zip_safe=True,\n    install_requires=required_deps,\n    dependency_links=\n    extra_URLs,  # Warning: Dependency links support has been dropped by pip 19.0\n    python_requires=\">=3.7, <4\")\n"
        },
        {
          "name": "tensorrt_llm",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "windows",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}