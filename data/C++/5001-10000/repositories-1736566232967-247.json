{
  "metadata": {
    "timestamp": 1736566232967,
    "page": 247,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Alex313031/thorium",
      "stars": 5204,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gclient",
          "type": "blob",
          "size": 0.271484375,
          "content": "solutions = [\n  {\n    \"name\": \"src\",\n    \"url\": \"https://chromium.googlesource.com/chromium/src.git\",\n    \"managed\": False,\n    \"custom_deps\": {},\n    \"custom_vars\": {},\n  },\n]\n\ntarget_os = [ \"linux\", \"win\", \"android\", \"chromeos\" ]\ntarget_cpu = [ \"x64\", \"x86\", \"arm64\", \"arm\" ]\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5234375,
          "content": ".DS_Store\nAPI_KEYS.txt\n*.deb\n*.rpm\n*.snap\n*.AppImage\n*.zip\n*.apk\n/release/\n/test/\nmini_installer.exe\nthorium_mini_installer.exe\nthorium_SSE2_mini_installer.exe\nthorium_WIN32_mini_installer.exe\nthorium_SSE3_mini_installer.exe\nthorium_AVX_mini_installer.exe\nthorium_AVX2_mini_installer.exe\nthorium_ARM64_mini_installer.exe\nthorium_mini_installer_SSE2.exe\nthorium_mini_installer_WIN32.exe\nthorium_mini_installer_SSE3.exe\nthorium_mini_installer_AVX.exe\nthorium_mini_installer_AVX2.exe\nthorium_mini_installer_ARM64.exe\nThorium_squashfs-root\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.10546875,
          "content": "[submodule \"thorium-libjxl\"]\n\tpath = thorium-libjxl\n\turl = https://github.com/Alex313031/thorium-libjxl.git\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 4.9130859375,
          "content": "# Thorium Code of Conduct <img src=\"https://github.com/Alex313031/thorium/blob/main/logos/NEW/COC_Light.png#gh-dark-mode-only\" width=\"32\"> <img src=\"https://github.com/Alex313031/thorium/blob/main/logos/NEW/COC_Dark.png#gh-light-mode-only\" width=\"32\">\n\n<img src=\"https://github.com/Alex313031/thorium/blob/main/logos/NEW/Thorium_COC_Light.png#gh-dark-mode-only\" width=\"256\"> <img src=\"https://github.com/Alex313031/thorium/blob/main/logos/NEW/Thorium_COC_Dark.png#gh-light-mode-only\" width=\"256\">\n\nThe Thorium Authors and the Chromium team are committed to preserving and fostering a\ndiverse, welcoming community. Below is our community code of conduct, which\napplies to the Thorium repository, the Chromium repository, Alex313031 blog content, and any other Chromium-supported communication group or Thorium discussion board, as well as any private communication initiated in the context of these\nspaces, including GitHub Issues. This code of conduct must be followed by everyone contributing to or engaging with\nthe Thorium project, regardless of affiliation or position.\n\nSimply put, community discussions should be\n\n * respectful and kind;\n * about Thorium and/or Chromium;\n * about features and code, not the individuals involved (although friendly personal joking or discussion about individual matters is allowed).\n\n## Be respectful and constructive.\n\nTreat everyone with respect. Build on each other's ideas. Each of us has the\nright to enjoy our developer experience and participate without fear of harassment,\ndiscrimination, or condescension, whether blatant or subtle. Remember that\nThorium and Chromium is a geographically distributed team and that you may not be\ncommunicating with someone in their primary language. We all get frustrated\nwhen working on hard problems, but we cannot allow that frustration to turn\ninto personal attacks.\n\n## Speak up if you see or hear something.\n\nYou are empowered to politely engage when you feel that you or others are\ndisrespected. The person making you feel uncomfortable may not be aware of what\nthey are doing - politely bringing their behavior to their attention is\nencouraged.\n\n## Contacting\nIf you are uncomfortable speaking up, or feel that your concerns are not being\nduly considered, you can email me at Alex313031@gmail.com, or if it is specific to Chromium, at community@chromium.org to request involvement\nfrom a community manager. Please note that without a way to contact you, an anonymous report may be\ndifficult to act on. You may also create a throwaway account to report. In\ncases where a public response is deemed necessary, the identities of victims\nand reporters will remain confidential unless those individuals instruct us\notherwise.\n\nI will always respond in some way, but also keep in mind that while all reports will be taken seriously, I or the Chromium community managers may\nnot act on complaints that we feel are not violations of this code of conduct.\n\n## We will not tolerate harassment of any kind, including but not limited to:\n\n * Harassing comments\n * Intimidation\n * Encouraging a person to engage in self-harm.\n * Sustained disruption or derailing of threads, channels, lists, etc.\n * Offensive or violent comments, jokes or otherwise\n * Sustained disruption of discussion\n * Inappropriate sexual content\n * Unwelcome sexual or otherwise aggressive attention\n * Continued one-on-one communication after requests to cease\n * Distribution or threat of distribution of people's personally identifying\n   information, AKA “doxing”\n\n## Consequences for failing to comply with this policy\n\nConsequences for failing to comply with this policy may include, at the sole\ndiscretion of the a Thorium Maintainer or the Chromium community managers:\n\n * a request for an apology;\n * a private or public warning or reprimand;\n * a temporary ban from the mailing list, blog, Chromium repository or\n   organization, or other Chromium-supported communication group, including\n   loss of committer status;\n * a temporary ban from the Thorium repository, discussion groups, or blog.\n * a permanent ban from any of the above, or from all current and future\n   Thorium-supported or Chromium-supported communities, including loss of\n   committer/maintainer status.\n\nParticipants warned to stop any harassing behavior are expected to comply\nimmediately; failure to do so will result in an escalation of consequences.\n\n## Acknowledgements\n\nThis Code of Conduct is based on the Chromium Code of Conduct > https://chromium.googlesource.com/chromium/src/+/master/CODE_OF_CONDUCT.md, which is based on the Geek Feminism Code of Conduct > https://geekfeminismdotorg.wordpress.com/about/code-of-conduct/, the Django\nCode of Conduct > https://www.djangoproject.com/conduct/, and the Geek Feminism Wiki \"Effective codes of conduct\" guide > https://geekfeminism.fandom.com/wiki/Code_of_conduct_evaluations.\n\n## License\n\nThis Code of Conduct is available for reuse under the Creative Commons Zero\n(CC0) license. https://creativecommons.org/publicdomain/zero/1.0/legalcode\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.4716796875,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2021-2024, Alexander Frick\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.583984375,
          "content": "![GitHub tag (latest SemVer)](https://img.shields.io/github/v/tag/alex313031/thorium?label=Version%3A) &nbsp;![GitHub](https://img.shields.io/github/license/alex313031/thorium?color=green&label=License%3A) &nbsp;![GitHub commit activity](https://img.shields.io/github/commit-activity/w/alex313031/thorium?color=blueviolet&label=Commit%20Activity%3A) &nbsp;![Subreddit subscribers](https://img.shields.io/reddit/subreddit-subscribers/ChromiumBrowser?style=social)\n# Thorium\n\n<img src=\"https://github.com/Alex313031/thorium/blob/main/logos/NEW/thorium_ver_2048_grey_old.png\">\n\n## Chromium fork for linux named after [radioactive element No. 90](https://en.wikipedia.org/wiki/Thorium). Windows/MacOS/RasPi/Android/Other builds see below.\n\n- Always built with the latest stable version of [Chromium](https://www.chromium.org/).\n- Intended to behave like and have the featureset of Google Chrome, with differences/patches/enhancements listed below.\n- Includes [Widevine](https://www.widevine.com/), [All Codecs](https://tools.woolyss.com/html5-audio-video-tester/), Chrome Plugins, as well as thinLTO, CFlag, LDFlag, LLVM Loop, and PGO compiler optimizations. It is built with [SSE4](https://en.wikipedia.org/wiki/SSE4), [AVX](https://en.wikipedia.org/wiki/Advanced_Vector_Extensions), and [AES](https://en.wikipedia.org/wiki/AES_instruction_set), so it won't launch on CPU's below 2nd gen Core or AMD FX, but benefits from Advanced Vector EXtensions. If your CPU lacks AVX, you can use builds from the [Thorium SSE3](https://github.com/Alex313031/Thorium-SSE3) repo.\n### Other Builds &nbsp;<img src=\"https://github.com/Alex313031/thorium/blob/main/logos/STAGING/winflag_animated.gif\" width=\"34\"> &nbsp;<img src=\"https://github.com/Alex313031/thorium/blob/main/logos/STAGING/AVX2.png\" width=\"48\"> &nbsp;<img src=\"https://github.com/Alex313031/thorium/blob/main/logos/STAGING/apple.png\" width=\"30\"> &nbsp;<img src=\"https://github.com/Alex313031/thorium/blob/main/logos/STAGING/Android_Robot.svg\" width=\"26\"> &nbsp;<img src=\"https://github.com/Alex313031/thorium/blob/main/logos/STAGING/Raspberry_Pi_Logo.svg\" width=\"24\"> &nbsp;<img src=\"https://raw.githubusercontent.com/Alex313031/thorium-win7/main/logos/STAGING/win7/compatible-with-windows-7.png\" width=\"28\">\n&nbsp;&ndash; Windows builds are here > [Thorium Win](https://github.com/Alex313031/Thorium-Win) \\\n&nbsp;&ndash; AVX2 Builds for Windows and Linux > [Thorium AVX2](https://github.com/Alex313031/Thorium-AVX2) \\\n&nbsp;&ndash; MacOS (M1 and X64) builds are located at > [Thorium Mac](https://github.com/Alex313031/Thorium-Mac) \\\n&nbsp;&ndash; Android (arm32 & arm64) builds are located at > [Thorium Android](https://github.com/Alex313031/Thorium-Android) I might also occasionally post x86 builds. \\\n&nbsp;&ndash; Raspberry Pi builds are located at > [Thorium Raspi](https://github.com/Alex313031/Thorium-Raspi) For the Pi 3B/3B+ and Pi 4/400. \\\n&nbsp;&ndash; Special builds are located at > [Thorium Special](https://github.com/Alex313031/Thorium-SSE3) You can find SSE3 builds for CPUs without AVX here. \\\n&nbsp;&ndash; Thorium Website with deb repo for auto-updating on Linux > https://thorium.rocks/ \\\n&nbsp;&ndash; __NEW__: Windows 7 / 8 / 8.1 / Server 2012 builds in > [Thorium Win7](https://github.com/Alex313031/thorium-win7)\n\n### FEATURES & DIFFERENCES BETWEEN CHROMIUM AND THORIUM <img src=\"https://github.com/Alex313031/thorium/blob/main/logos/NEW/bulb_light.svg#gh-dark-mode-only\"> <img src=\"https://github.com/Alex313031/thorium/blob/main/logos/NEW/bulb_dark.svg#gh-light-mode-only\">\n> - Various compiler flags that improve performance and target [AVX](https://en.wikipedia.org/wiki/Advanced_Vector_Extensions) CPU's (read [PATCHES.md](https://github.com/Alex313031/thorium/blob/main/docs/PATCHES.md))\n> - Experimental [MPEG-DASH](https://en.wikipedia.org/wiki/Dynamic_Adaptive_Streaming_over_HTTP) support.\n> - HEVC/H.265 support on Linux and Windows.\n> - [JPEG XL](https://jpeg.org/jpegxl/) Image File Format support restored and turned on by default.\n> - [FTP](https://en.wikipedia.org/wiki/File_Transfer_Protocol) URL support restored and enabled by default.\n> - Enable [Live Caption](https://support.google.com/chrome/answer/10538231?hl) (SODA) on all builds.\n> - Experimental PDF annotation support (called \"Ink\" on ChromiumOS). # DISABLED FOR NOW BECAUSE OF CRASHES.\n> - Patches from Debian including font rendering patch, VAAPI Patch, Intel HD support patch, native notifications patch, title bar patch, and... the VDPAU Patch!! (Rejoice Nvidia users)\n> - Linux audio sandbox patch.\n> - [DoH](https://en.wikipedia.org/wiki/DNS_over_HTTPS) (DNS over HTTPS) patches from Bromite.\n> - Enable [Do Not Track](https://allaboutdnt.com/) by default patch from Vanadium.\n> - Show full URLs including trailing slashes in address bar by default.\n> - Disable [FLOC](https://en.wikipedia.org/wiki/Federated_Learning_of_Cohorts) patch.\n> - Disable annoying Google API Key Infobar warning (you can still use API Keys to enable sync) from Ungoogled Chromium.\n> - Disable annoying Default Browser Infobar warning.\n> - Disable annoying IPH (In Product Help) promos.\n> - Adds [DuckDuckGo](https://duckduckgo.com/), [Brave Search](https://search.brave.com/), [Ecosia](https://www.ecosia.org/), [Ask.com](https://www.ask.com/), and [Yandex.com](https://yandex.com/) in US and other locales, along with the normal search engines.\n> - Always use the local NTP (New Tab Page) regardless of search engine.\n> - Fix icons when distilling page content in [Reader Mode](https://www.howtogeek.com/423643/how-to-use-google-chromes-hidden-reader-mode/).\n> - Enable new Menu UI when right clicking the Reload button. (Adds 'Normal Reload', 'Hard Reload', and 'Clear Cache and Hard Reload')\n> - Home button, Chrome Labs button, and Bookmarks bar shown by default.\n> - [Prefetch](https://www.chromium.org/developers/design-documents/dns-prefetching/) settings updated to respect privacy.\n> - Patches for [GN](https://chromium.googlesource.com/chromium/src/tools/gn/+/48062805e19b4697c5fbd926dc649c78b6aaa138/README.md) and [chrome_sandbox](https://chromium.googlesource.com/chromium/src/+/HEAD/docs/design/sandbox.md) when building.\n> - Remove the addition of the Chrome APT sources.list during installation.\n> - Widevine CDM Patch for Linux.\n> - GTK auto dark mode patch\n> - Various new flags either developed from scratch, or added from Ungoogled Chromium. See [PATCHES.md](https://github.com/Alex313031/thorium/blob/main/docs/PATCHES.md)\n> - Enable Parallel Downloading by Default.\n> - Inclusion of <img src=\"https://github.com/Alex313031/thorium/blob/main/logos/STAGING/pak.png\" width=\"16\"> [pak](https://github.com/Alex313031/thorium/tree/main/pak_src#readme) a utility for packing and unpacking the [&#42;.pak](https://textslashplain.com/2022/05/03/chromium-internals-pak-files/) files in Thorium or any other Chromium based browser.\n> - Logo and Branding/Naming changed to the Thorium logo, Thorium name, and \"Alex313031\" being appended to \"The Chromium Authors\" in credits, etc.\n> - .desktop file includes useful cmdline flags that enable experimental or useful features. (See [PATCHES.md](https://github.com/Alex313031/thorium/blob/main/docs/PATCHES.md))\n> - Includes installer patches and files to include [ChromeDriver](https://chromedriver.chromium.org/home) and *thorium_shell* [(content_shell)](https://chromium.googlesource.com/chromium/src/+/HEAD/docs/testing/web_tests_in_content_shell.md), with a .desktop file being provided for thorium_shell (named thorium-shell.desktop and shows in desktop environments as Thorium Content Shell). These are also included in the Windows releases, but it doesn't make a shorcut, although a .png and .ico is in the install directory for you to make your own shortcut with an icon. You can also run content_shell with the command thorium-shell (custom wrapper for it, located in /usr/bin/). You can run ChromeDriver at /usr/bin/chromedriver or chromedriver.exe on Windows. Also, patches for abseil library and mini_installer when building with AVX on Windows.\n> - Right clicking the launcher after install gives three additional desktop actions, one to open thorium-shell, another to open in Safe Mode which disables any flags one has set in chrome://flags until the next launch, and lastly to open in Dark Mode which appends the --force-dark-mode flag.\n- For more info, read the [PATCHES.md](https://github.com/Alex313031/thorium/blob/main/docs/PATCHES.md) file.\n- Known bugs are in the [BUGS.md](https://github.com/Alex313031/thorium/blob/main/infra/BUGS.md) file.\n- A list of Chromium command line flags can be found at > https://peter.sh/experiments/chromium-command-line-switches\n\n## Building <img src=\"https://github.com/Alex313031/thorium/blob/main/logos/NEW/build_light.svg#gh-dark-mode-only\"> <img src=\"https://github.com/Alex313031/thorium/blob/main/logos/NEW/build_dark.svg#gh-light-mode-only\">\nSee > https://github.com/Alex313031/thorium/blob/main/docs/BUILDING.md\n\n## Debugging <img src=\"https://github.com/Alex313031/thorium/blob/main/logos/STAGING/bug.svg\" width=\"28\">\nSee > https://github.com/Alex313031/thorium/tree/main/infra/DEBUG#readme\n\n-------\n&nbsp;&minus; https://www.reddit.com/r/ChromiumBrowser/ is a subreddit I made for Thorium and general Thorium/Chromium discussion, https://thorium.rocks/ is the website I made for it, and https://alex313031.blogspot.com/ is a blog I made relating to Thorium/ThoriumOS. \\\n&nbsp;&minus; I also build ChromiumOS (now called ThoriumOS) with Thorium, Codecs, Widevine, linux-firmware/modules, and extra packages at > https://github.com/Alex313031/ChromiumOS/\n\n&nbsp;&minus; Thanks to https://github.com/robrich999/ for some info and fixes that went into this project.\\\n&nbsp;&minus; Thanks to https://github.com/midzer/ for support and helping with builds. \\\n&nbsp;&minus; Also thanks to https://github.com/bromite/bromite, https://github.com/saiarcot895/chromium-ubuntu-build, https://github.com/Eloston/ungoogled-chromium, https://github.com/GrapheneOS/Vanadium, and https://github.com/iridium-browser/iridium-browser for patch code. \\\n&nbsp;&minus; The pak_src dir, and the binaries in *pack_src/bin* are credited to @freeer https://github.com/myfreeer/chrome-pak-customizer/\n\n&nbsp;&nbsp; __NOTE:__ [*libpepflashplayer.so*](https://github.com/Alex313031/thorium/blob/main/infra/libpepflashplayer.so) is included for posterity and can be used to enable Adobe Flash on older Chromium releases. ʘ‿ʘ\n\n*Thanks for using Thorium!*\n\n<img src=\"https://github.com/Alex313031/thorium/blob/main/logos/STAGING/Thorium90_504.jpg\" width=\"200\">\n\n<img src=\"https://github.com/Alex313031/thorium/blob/main/logos/STAGING/GitHub/GitHub-Mark-Light-32px.png#gh-dark-mode-only\"> <img src=\"https://github.com/Alex313031/thorium/blob/main/logos/STAGING/GitHub/GitHub-Mark-32px.png#gh-light-mode-only\">\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.91015625,
          "content": "## Security\n\n### Thorium Security Policy\n\n - If it is a vulnerability in Chromium, please report it upstream [Here](https://bugs.chromium.org/p/chromium/issues/entry).\n - If it is a vulnerability in Thorium, file an issue on GitHub. However, if it is major and/or a zero day, please email me instead at Alex313031@gmail.com\n\n### List of major vulnerabilities fixed in Thorium\n\n &ndash; libwebp WebP bug [CVE-2023-4863](https://nvd.nist.gov/vuln/detail/CVE-2023-4863) - Fixed in M117\n\n &ndash; libvpx VP8 bug [CVE-2023-5217](https://nvd.nist.gov/vuln/detail/CVE-2023-5217) - Fixed in M117\n\n &ndash; USB data validation bug [CVE-2023-5482](https://github.com/advisories/GHSA-7cjp-92p9-vr97) - Fixed in M120\n\n &ndash; USB integer overflow bug [CVE-2023-5849](https://github.com/advisories/GHSA-pq78-6h8h-rcf4) - Fixed in M120\n\n &ndash; Use after free bug [CVE-2024-4671](https://nvd.nist.gov/vuln/detail/CVE-2024-4671) - Fixed in M124\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 1.9091796875,
          "content": "## TODO document for ideas and patches. Underneath each will be a comment with info or location of patch.\n\n&#45; Adjust DPI from 300 to 72 for Windows .ico files.\n\n - Gimp and convert.exe to check ico sizes\n\n&#45; Add new Thorium shortcuts to ThoriumOS Shortcuts App\n\n - For ChromeOS only: If you plan on adding a new accelerator and want it\n displayed in the Shortcuts app, please follow the instructions at: `ash/webui/shortcut_customization_ui/backend/accelerator_layout_table.h`.\n\n### Notes to self\n\n## .grd text replacements (search with grep), because there are a few places we want to tweak some strings.\n\nChromium > Thorium\nChrome > Thorium\nGoogle Thorium > Thorium\nGoogle recommends Thorium > Alex313031 recommends Thorium\nThorium Web Store > Chrome Web Store (Except some UI elements like NTP)\nThorium Remote Desktop > Chrome Remote Desktop\nThoriumOS Flex > ThoriumOS\nmade possible by Thorium > Chromium\nExperiments > Thorium Experiments\nAw, Snap! > Aw, #@%!, this tab's process has gone bye bye...\nDino strings in components/error_page_strings.grdp\n\n--M132--\n\nAdd full version renaming support for Linux and Windows, and partial for MacOS.\nAdd GM2 inkdrop for tabstrip control buttons.\nRemove //components/optimization_guide_core/optimization_guide_features.cc after upstream MacOS fix\n\nOpt with BOLT > https://aaupov.github.io/blog/2022/11/12/bolt-chromium\nSSD Restore > https://github.com/Alex313031/thorium/issues/61\nAdd textbox disk cache dir flag > https://github.com/Alex313031/thorium/issues/860\nFix outline of omnibox and bookmarks bar underline with themes\n\nhttps://source.chromium.org/chromium/chromium/src/+/99fe5ddf4ecd908fd52d1d03565176f2f481c79e\n\nMake UA and hints report chrome, and set hints\n\nfix thorium and shell portable --temp profile\n\nFix multiple profiles lag\nFix download shelf height\nTest non-optimized Thorium, versus optimized Thorium, versus vanilla Chromium, versus vanilla Google Chrome, all at the same revision.\n\n"
        },
        {
          "name": "aliases.txt",
          "type": "blob",
          "size": 0.7734375,
          "content": "alias origin='git checkout -f origin/main'\nalias gfetch='git fetch --tags'\nalias rebase='git rebase-update'\nalias gsync='gclient sync --with_branch_heads --with_tags -f -R -D'\nalias gnls='gn ls out/thorium'\nalias show='git show-ref'\nalias runhooks='gclient runhooks'\nalias pgo='python3 tools/update_pgo_profiles.py --target=linux update --gs-url-base=chromium-optimization-profiles/pgo_profiles'\nalias pgow='python3 tools/update_pgo_profiles.py --target=win64 update --gs-url-base=chromium-optimization-profiles/pgo_profiles'\nalias pgom='python3 tools/update_pgo_profiles.py --target=mac update --gs-url-base=chromium-optimization-profiles/pgo_profiles'\nalias pgomac-arm='python3 tools/update_pgo_profiles.py --target=mac-arm update --gs-url-base=chromium-optimization-profiles/pgo_profiles'\n"
        },
        {
          "name": "args.gn",
          "type": "blob",
          "size": 2.462890625,
          "content": "use_sse3 = true\nuse_sse41 = true\nuse_sse42 = true\nuse_avx = true\nuse_avx2 = false\nuse_avx512 = false\nuse_fma = false\n\n# use_polly = true\n# use_bolt = true\ntarget_os = \"linux\"\ntarget_cpu = \"x64\"\nenable_linux_installer = true\nenable_distro_version_check = false\nis_official_build = true\nis_debug = false\nenable_stripping = true\nthin_lto_enable_cache = false\ndcheck_always_on = false\nexclude_unwind_tables = true\nenable_iterator_debugging = false\ndisable_fieldtrial_testing_config = true\nenable_reporting = false\nenable_resource_allowlist_generation = false\nenable_profiling = false\nis_component_build = false\nsymbol_level = 0\nenable_nacl = false\noptimize_webui = true\nenable_webui_tab_strip = true\nis_clang = true\ntreat_warnings_as_errors = false\n# llvm_force_head_revision = true\nuse_lld = true\nuse_icf = true\nis_cfi = true\nv8_symbol_level = 0\nv8_enable_fast_torque = true\nv8_enable_builtins_optimization = true\nv8_enable_maglev = true\nv8_enable_turbofan = true\nv8_enable_wasm_simd256_revec = true\nuse_v8_context_snapshot = true\nblink_symbol_level = 0\nenable_precompiled_headers = false\nmedia_use_ffmpeg = true\nmedia_use_libvpx = true\nenable_hls_demuxer = true\nenable_discovery = true\nproprietary_codecs = true\nffmpeg_branding = \"Chrome\"\n# Set to false for Polly build\nclang_use_chrome_plugins = true\nenable_ffmpeg_video_decoders = true\nis_component_ffmpeg = true\nuse_webaudio_pffft = true\nuse_vaapi = true\nenable_library_cdms = true\nenable_widevine = true\nbundle_widevine_cdm = true\nenable_cdm_host_verification = false\nignore_missing_widevine_signing_cert = true\nenable_media_drm_storage = true\nenable_hangout_services_extension = false\nrtc_use_h264 = true\nrtc_use_h265 = true\nrtc_include_ilbc = true\nrtc_build_examples = false\nrtc_enable_avx2 = true\nenable_vr = true\nenable_platform_hevc = true\nenable_hevc_parser_and_hw_decoder = true\nplatform_has_optional_hevc_support = true\nenable_platform_ac3_eac3_audio = true\nenable_platform_ac4_audio = false\nenable_platform_dolby_vision = true\nenable_platform_encrypted_dolby_vision = true\nenable_platform_mpeg_h_audio = true\nenable_platform_dts_audio = true\nenable_mse_mpeg2ts_stream_parser = true\nuse_text_section_splitting = true\nuse_thin_lto = true\nthin_lto_enable_optimizations = true\nenable_rust = true\nenable_all_rust_features = true\ninit_stack_vars_zero = true\nchrome_pgo_phase = 2\npgo_data_path = \"/home/alex/chromium/src/chrome/build/pgo_profiles/chrome-linux-6723-1733159130-a5a2dc303855ef5efd9183eeebc68f04932f3097-d101f8bd9ceed464c1d066b8bffa18d791485d3e.profdata\"\n"
        },
        {
          "name": "arm",
          "type": "tree",
          "content": null
        },
        {
          "name": "autobuild.sh",
          "type": "blob",
          "size": 1.5361328125,
          "content": "#!/bin/bash\n\n# Copyright (c) 2024 Alex313031.\n\n## !! NOT FOR RELEASE BUILDS !! ##\n## Only for testing and automation, as it only produces debug and non-debug\n## AVX builds, as well as thorium_shell (content_shell) and thorium_ui_debug_shell (views_examples_with_content).\n\nYEL='\\033[1;33m' # Yellow\nCYA='\\033[1;96m' # Cyan\nRED='\\033[1;31m' # Red\nGRE='\\033[1;32m' # Green\nc0='\\033[0m' # Reset Text\nbold='\\033[1m' # Bold Text\nunderline='\\033[4m' # Underline Text\n\n# Error handling\nyell() { echo \"$0: $*\" >&2; }\ndie() { yell \"$*\"; exit 111; }\ntry() { \"$@\" || die \"${RED}Failed $*\"; }\n\n# --help\ndisplayHelp () {\n\tprintf \"\\n\" &&\n\tprintf \"${bold}${GRE}Script to build Thorium on Linux.${c0}\\n\" &&\n\tprintf \"${underline}${YEL}Usage:${c0} build.sh # (where # is number of jobs)${c0}\\n\" &&\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--help) displayHelp; exit 0;;\nesac\n\n# chromium/src dir env variable\nif [ -z \"${CR_DIR}\" ]; then \n    CR_SRC_DIR=\"$HOME/chromium/src\"\n    export CR_SRC_DIR\nelse \n    CR_SRC_DIR=\"${CR_DIR}\"\n    export CR_SRC_DIR\nfi\n\nprintf \"\\n\" &&\nprintf \"${YEL}Building Thorium for Linux...\\n\" &&\nprintf \"${CYA}\\n\" &&\n\n# Build Thorium\nexport NINJA_SUMMARIZE_BUILD=1 &&\nexport NINJA_STATUS=\"[%r processes, %f/%t @ %o/s | %e sec. ] \" &&\n\ncd ${CR_SRC_DIR} &&\nautoninja -C out/thorium thorium chrome_sandbox chromedriver clear_key_cdm thorium_shell policy_templates -j$@ &&\n\nprintf \"\\n\" &&\ncat ~/thorium/logos/thorium_logo_ascii_art.txt &&\nprintf \"\\n\" &&\n\nprintf \"${GRE}${bold}Build Completed! ${YEL}${bold}You can now run \\'./package.sh\\' to build installation packages.\\n\" &&\ntput sgr0\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 1.41796875,
          "content": "#!/bin/bash\n\n# Copyright (c) 2024 Alex313031.\n\nYEL='\\033[1;33m' # Yellow\nCYA='\\033[1;96m' # Cyan\nRED='\\033[1;31m' # Red\nGRE='\\033[1;32m' # Green\nc0='\\033[0m' # Reset Text\nbold='\\033[1m' # Bold Text\nunderline='\\033[4m' # Underline Text\n\n# Error handling\nyell() { echo \"$0: $*\" >&2; }\ndie() { yell \"$*\"; exit 111; }\ntry() { \"$@\" || die \"${RED}Failed $*\"; }\n\n# --help\ndisplayHelp () {\n\tprintf \"\\n\" &&\n\tprintf \"${bold}${GRE}Script to build Thorium on Linux.${c0}\\n\" &&\n\tprintf \"${underline}${YEL}Usage:${c0} build.sh # (where # is number of jobs)${c0}\\n\" &&\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--help) displayHelp; exit 0;;\nesac\n\n# chromium/src dir env variable\nif [ -z \"${CR_DIR}\" ]; then \n    CR_SRC_DIR=\"$HOME/chromium/src\"\n    export CR_SRC_DIR\nelse \n    CR_SRC_DIR=\"${CR_DIR}\"\n    export CR_SRC_DIR\nfi\n\nprintf \"\\n\" &&\nprintf \"${YEL}Building Thorium for Linux...\\n\" &&\nprintf \"${CYA}\\n\" &&\n\n# Build Thorium\nexport NINJA_SUMMARIZE_BUILD=1 &&\nexport NINJA_STATUS=\"[%r processes, %f/%t @ %o/s | %e sec. ] \" &&\n\ncd ${CR_SRC_DIR} &&\n# For restoring individual build targets for customization\n#autoninja -C out/thorium thorium chrome_sandbox chromedriver clear_key_cdm thorium_shell policy_templates -j$@ &&\nautoninja -C out/thorium thorium_all -j$@ &&\n\nprintf \"\\n\" &&\ncat ~/thorium/logos/thorium_logo_ascii_art.txt &&\nprintf \"\\n\" &&\n\nprintf \"${GRE}${bold}Build Completed! ${YEL}${bold}You can now run \\'./package.sh\\' to build installation packages.\\n\" &&\ntput sgr0\n"
        },
        {
          "name": "build_android.sh",
          "type": "blob",
          "size": 4.330078125,
          "content": "#!/bin/bash\n\n# Copyright (c) 2024 Alex313031.\n\nYEL='\\033[1;33m' # Yellow\nCYA='\\033[1;96m' # Cyan\nRED='\\033[1;31m' # Red\nGRE='\\033[1;32m' # Green\nc0='\\033[0m' # Reset Text\nbold='\\033[1m' # Bold Text\nunderline='\\033[4m' # Underline Text\n\n# Error handling\nyell() { echo \"$0: $*\" >&2; }\ndie() { yell \"$*\"; exit 111; }\ntry() { \"$@\" || die \"${RED}Failed $*\"; }\n\n# --help\ndisplayHelp () {\n\tprintf \"\\n\" &&\n\tprintf \"${bold}${GRE}Script to build Thorium for Android.${c0}\\n\" &&\n\tprintf \"${underline}${YEL}Usage:${c0}${bold} build_android.sh --arm32 | --arm64 | --x86 | --x64 # (where # is number of jobs)${c0}\\n\" &&\n\tprintf \" Use the --help flag to show this help.${c0}\\n\" &&\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--help) displayHelp; exit 0;;\nesac\n\n# chromium/src dir env variable\nif [ -z \"${CR_DIR}\" ]; then \n    CR_SRC_DIR=\"$HOME/chromium/src\"\n    export CR_SRC_DIR\nelse \n    CR_SRC_DIR=\"${CR_DIR}\"\n    export CR_SRC_DIR\nfi\n\ncr_build_jobs=\"$2\"\nexport cr_build_jobs\n\nprintf \"\\n\" &&\nprintf \"${bold}${GRE}Script to build Thorium for Android.${c0}\\n\" &&\nprintf \"${underline}${YEL}Usage:${c0}${bold} build_android.sh --arm32 | --arm64 | --x86 | --x64 # (where # is number of jobs)${c0}\\n\" &&\nprintf \" Use the --help flag to show this help.${c0}\\n\" &&\n\nbuildARM32 () {\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Building Thorium for Android arm32...\\n\" &&\n\tprintf \"${YEL}Note: You may want ADB installed.${c0}\\n\" &&\n\tprintf \"${CYA}\\n\" &&\n\n\t# Build Thorium, Thorium Shell, and System WebView32\n\texport NINJA_SUMMARIZE_BUILD=1 &&\n\texport NINJA_STATUS=\"[%r processes, %f/%t @ %o/s | %e sec. ] \" &&\n\n\tcd ${CR_SRC_DIR} &&\n\tautoninja -C out/thorium chrome_public_apk content_shell_apk system_webview_apk -j${cr_build_jobs} &&\n\tprintf \"\\n\" &&\n\tcat ~/thorium/logos/thorium_logo_ascii_art.txt &&\n\tprintf \"\\n\" &&\n\tprintf \"${GRE}${bold}Build Completed. ${YEL}${bold}You can copy the .apk(s) to your device or use ADB to install it.\\n\" &&\n\tprintf \"${GRE}${bold}They are located in \\'//chromium/src/out/thorium/apks/\\'\\n\" &&\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--arm32) buildARM32;\nesac\n\nbuildARM64 () {\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Building Thorium for Android arm64...\\n\" &&\n\tprintf \"${YEL}Note: You may want ADB installed.${c0}\\n\" &&\n\tprintf \"${CYA}\\n\" &&\n\n\t# Build Thorium, Thorium Shell, and System WebView64\n\texport NINJA_SUMMARIZE_BUILD=1 &&\n\texport NINJA_STATUS=\"[%r processes, %f/%t @ %o/s | %e sec. ] \" &&\n\n\tcd ${CR_SRC_DIR} &&\n\tautoninja -C out/thorium chrome_public_apk content_shell_apk system_webview_64_apk -j${cr_build_jobs} &&\n\tprintf \"\\n\" &&\n\tcat ~/thorium/logos/thorium_logo_ascii_art.txt &&\n\tprintf \"\\n\" &&\n\tprintf \"${GRE}${bold}Build Completed. ${YEL}${bold}You can copy the .apk(s) to your device or use ADB to install it.\\n\" &&\n\tprintf \"${GRE}${bold}They are located in \\'//chromium/src/out/thorium/apks/\\'\\n\" &&\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--arm64) buildARM64;\nesac\n\nbuildX86 () {\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Building Thorium for Android x86...\\n\" &&\n\tprintf \"${YEL}Note: You may want ADB installed.${c0}\\n\" &&\n\tprintf \"${CYA}\\n\" &&\n\n\t# Build Thorium, Thorium Shell, and System WebView x86\n\texport NINJA_SUMMARIZE_BUILD=1 &&\n\texport NINJA_STATUS=\"[%r processes, %f/%t @ %o/s | %e sec. ] \" &&\n\n\tcd ${CR_SRC_DIR} &&\n\tautoninja -C out/thorium chrome_public_apk content_shell_apk system_webview_apk -j${cr_build_jobs} &&\n\tprintf \"\\n\" &&\n\tcat ~/thorium/logos/thorium_logo_ascii_art.txt &&\n\tprintf \"\\n\" &&\n\tprintf \"${GRE}${bold}Build Completed. ${YEL}${bold}You can copy the .apk(s) to your device or use ADB to install it.\\n\" &&\n\tprintf \"${GRE}${bold}They are located in \\'//chromium/src/out/thorium/apks/\\'\\n\" &&\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--x86) buildX86;\nesac\n\nbuildX64 () {\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Building Thorium for Android x64...\\n\" &&\n\tprintf \"${YEL}Note: You may want ADB installed.${c0}\\n\" &&\n\tprintf \"${CYA}\\n\" &&\n\n\t# Build Thorium, Thorium Shell, and System WebView x86\n\texport NINJA_SUMMARIZE_BUILD=1 &&\n\texport NINJA_STATUS=\"[%r processes, %f/%t @ %o/s | %e sec. ] \" &&\n\n\tcd ${CR_SRC_DIR} &&\n\tautoninja -C out/thorium chrome_public_apk content_shell_apk system_webview_apk -j${cr_build_jobs} &&\n\tprintf \"\\n\" &&\n\tcat ~/thorium/logos/thorium_logo_ascii_art.txt &&\n\tprintf \"\\n\" &&\n\tprintf \"${GRE}${bold}Build Completed. ${YEL}${bold}You can copy the .apk(s) to your device or use ADB to install it.\\n\" &&\n\tprintf \"${GRE}${bold}They are located in \\'//chromium/src/out/thorium/apks/\\'\\n\" &&\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--x64) buildX64;\nesac\n\ntput sgr0\n"
        },
        {
          "name": "build_mac.sh",
          "type": "blob",
          "size": 2.134765625,
          "content": "#!/bin/bash\n\n# Copyright (c) 2024 Alex313031 and midzer.\n\nYEL='\\033[1;33m' # Yellow\nCYA='\\033[1;96m' # Cyan\nRED='\\033[1;31m' # Red\nGRE='\\033[1;32m' # Green\nc0='\\033[0m' # Reset Text\nbold='\\033[1m' # Bold Text\nunderline='\\033[4m' # Underline Text\n\n# Error handling\nyell() { echo \"$0: $*\" >&2; }\ndie() { yell \"$*\"; exit 111; }\ntry() { \"$@\" || die \"${RED}Failed $*\"; }\n\n# --help\ndisplayHelp () {\n\tprintf \"\\n\" &&\n\tprintf \"${bold}${GRE}Script to build Thorium and Thorium Shell on MacOS.${c0}\\n\" &&\n\tprintf \"${underline}${YEL}Usage:${c0} build.sh # (where # is number of jobs)${c0}\\n\" &&\n\tprintf \"${YEL}Use the --build-shell flag to also build the thorium_shell target.${c0}\\n\" &&\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--help) displayHelp; exit 0;;\nesac\n\n# Build Thorium Shell in addition to the others.\nbuildShell () {\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Building Thorium and Thorium Shell for MacOS...\\n\" &&\n\tprintf \"${CYA}\\n\" &&\n\t\n\t# Build Thorium\n\texport NINJA_SUMMARIZE_BUILD=1 &&\n\texport NINJA_STATUS=\"[%r processes, %f/%t @ %o/s | %e sec. ] \" &&\n\t\n\tcd ${CR_SRC_DIR} &&\n\tautoninja -C out/thorium thorium chromedriver thorium_shell policy_templates -j$@ &&\n\n\tprintf \"\\n\" &&\n\tcat ~/thorium/logos/thorium_logo_ascii_art.txt &&\n\tprintf \"\\n\" &&\n\t\n\tprintf \"${GRE}${bold}Build Completed. ${YEL}${bold}You can now run \\'./build_dmg.sh\\', and copy the Thorium Shell.app out.\\n\" &&\n\ttput sgr0\n}\ncase $1 in\n\t--build-shell) buildShell; exit 0;;\nesac\n\n# chromium/src dir env variable\nif [ -z \"${CR_DIR}\" ]; then \n    CR_SRC_DIR=\"$HOME/chromium/src\"\n    export CR_SRC_DIR\nelse \n    CR_SRC_DIR=\"${CR_DIR}\"\n    export CR_SRC_DIR\nfi\n\nprintf \"\\n\" &&\nprintf \"${YEL}Building Thorium for MacOS...\\n\" &&\nprintf \"${CYA}\\n\" &&\n\n# Build Thorium\nexport NINJA_SUMMARIZE_BUILD=1 &&\nexport NINJA_STATUS=\"[%r processes, %f/%t @ %o/s | %e sec. ] \" &&\n\ncd ${CR_SRC_DIR} &&\n# For restoring individual build targets for customization\n#autoninja -C out/thorium thorium chromedriver policy_templates -j$@ &&\nautoninja -C out/thorium thorium_all -j$@ &&\n\nprintf \"\\n\" &&\ncat ~/thorium/logos/thorium_logo_ascii_art.txt &&\nprintf \"\\n\" &&\n\nprintf \"${GRE}${bold}Build Completed. ${YEL}${bold}You can now run \\'./build_dmg.sh\\'\\n\" &&\ntput sgr0\n"
        },
        {
          "name": "build_win.sh",
          "type": "blob",
          "size": 1.5185546875,
          "content": "#!/bin/bash\n\n# Copyright (c) 2024 Alex313031.\n\nYEL='\\033[1;33m' # Yellow\nCYA='\\033[1;96m' # Cyan\nRED='\\033[1;31m' # Red\nGRE='\\033[1;32m' # Green\nc0='\\033[0m' # Reset Text\nbold='\\033[1m' # Bold Text\nunderline='\\033[4m' # Underline Text\n\n# Error handling\nyell() { echo \"$0: $*\" >&2; }\ndie() { yell \"$*\"; exit 111; }\ntry() { \"$@\" || die \"${RED}Failed $*\"; }\n\n# --help\ndisplayHelp () {\n\tprintf \"\\n\" &&\n\tprintf \"${bold}${GRE}Script to build Thorium for Windows.${c0}\\n\" &&\n\tprintf \"${underline}${YEL}Usage:${c0} build_win.sh # (where # is number of jobs)${c0}\\n\" &&\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--help) displayHelp; exit 0;;\nesac\n\n# chromium/src dir env variable\nif [ -z \"${CR_DIR}\" ]; then \n    CR_SRC_DIR=\"$HOME/chromium/src\"\n    export CR_SRC_DIR\nelse \n    CR_SRC_DIR=\"${CR_DIR}\"\n    export CR_SRC_DIR\nfi\n\nprintf \"\\n\" &&\nprintf \"${YEL}Building Thorium for Windows...\\n\" &&\nprintf \"${GRE}\\n\" &&\n\n# Build Thorium and mini_installer\nexport NINJA_SUMMARIZE_BUILD=1 &&\nexport NINJA_STATUS=\"[%r processes, %f/%t @ %o/s | %e sec. ] \" &&\n\ncd ${CR_SRC_DIR} &&\n# For restoring individual build targets for customization\n#autoninja -C out/thorium thorium chromedriver clear_key_cdm thorium_shell policy_templates pack_policy_templates setup mini_installer -j$@ &&\nautoninja -C out/thorium thorium_all -j$@ &&\nautoninja -C out/thorium setup mini_installer -j$@ &&\n\nprintf \"\\n\" &&\ncat ~/thorium/logos/thorium_logo_ascii_art.txt &&\nprintf \"\\n\" &&\n\nprintf \"${GRE}${bold}Build Completed. ${YEL}${bold}Installer at \\'//out/thorium/thorium_mini_installer.exe\\'\\n\" &&\ntput sgr0\n"
        },
        {
          "name": "check_simd.sh",
          "type": "blob",
          "size": 3.056640625,
          "content": "#!/bin/bash\n\n# Copyright (c) 2024 Alex313031.\n\nprogram=\"Thorium Browser.\" # The program we are checking for.\n\nYEL='\\033[1;33m' # Yellow\nCYA='\\033[1;96m' # Cyan\nRED='\\033[1;31m' # Red\nGRE='\\033[1;32m' # Green\nc0='\\033[0m' # Reset Text\nbold='\\033[1m' # Bold Text\nunderline='\\033[4m' # Underline Text\n\n# Error handling\nyell() { echo \"$0: $*\" >&2; }\ndie() { yell \"$*\"; exit 111; }\ntry() { \"$@\" || die \"${RED}Failed $*\"; }\n\nscript_name=${0##*/}\n\nclear &&\n\ncheck_result() { # Message calls\n    local ret=\"$1\"\n    local msg=\"$2\"\n    [ \"$ret\" -ne 0 ] && { printf \" ${RED}FAIL:\" && tput sgr0 && echo \" $msg\"; }\n    printf \" ${GRE}SUCCESS:\" && tput sgr0 && echo \" $msg\"\n}\n\nget_cpuinfo() { # return details of the first CPU only\n    cat /proc/cpuinfo | awk 'BEGIN { RS = \"\" ; } { printf (\"%s\\n\", $0); exit(0); }'\n}\n\nhave_cpu_feature() {\n    local feature=\"$1\"\n    get_cpuinfo | egrep -q \"^flags.*\\<$feature\\>\"\n}\n\nhave_64bit_cpu() {\n    local feature=\"lm\" # \"Long mode\"\n    local desc=\"64-bit x86 CPU\"\n    local need=\"$desc ($feature)\"\n    have_cpu_feature \"$feature\"\n    check_result \"$?\" \"$need\"\n}\n\nhave_sse2_cpu_feature () {\n    local feature=\"sse2\"\n    local desc=\"Streaming SIMD Extensions 2\"\n    local need=\"$desc ($feature)\"\n    have_cpu_feature \"$feature\"\n    check_result \"$?\" \"$need\"\n}\n\nhave_sse3_cpu_feature () {\n    local feature=\"pni\"\n    local desc=\"Streaming SIMD Extensions 3\"\n    local need=\"$desc ($feature)\"\n    have_cpu_feature \"$feature\"\n    check_result \"$?\" \"$need\"\n}\n\nhave_sse41_cpu_feature () {\n    local feature=\"sse4_1\"\n    local desc=\"Streaming SIMD Extensions 4.1\"\n    local need=\"$desc ($feature)\"\n    have_cpu_feature \"$feature\"\n    check_result \"$?\" \"$need\"\n}\n\nhave_sse42_cpu_feature () {\n    local feature=\"sse4_2\"\n    local desc=\"Streaming SIMD Extensions 4.2\"\n    local need=\"$desc ($feature)\"\n    have_cpu_feature \"$feature\"\n    check_result \"$?\" \"$need\"\n}\n\nhave_aes_cpu_feature () {\n    local feature=\"aes\"\n    local desc=\"Advanced Encryption Standard Extensions\"\n    local need=\"$desc ($feature)\"\n    have_cpu_feature \"$feature\"\n    check_result \"$?\" \"$need\"\n}\n\nhave_avx_cpu_feature () {\n    local feature=\"avx\"\n    local desc=\"Advanced Vector Extensions\"\n    local need=\"$desc ($feature)\"\n    have_cpu_feature \"$feature\"\n    check_result \"$?\" \"$need\"\n}\n\nhave_avx2_cpu_feature () {\n    local feature=\"avx2\"\n    local desc=\"Advanced Vector Extensions 2\"\n    local need=\"$desc ($feature)\"\n    have_cpu_feature \"$feature\"\n    check_result \"$?\" \"$need\"\n}\n\ncommon_checks() {\n    have_64bit_cpu && have_sse2_cpu_feature && have_sse3_cpu_feature && have_sse41_cpu_feature && \\\n    have_sse42_cpu_feature && have_aes_cpu_feature && have_avx_cpu_feature && have_avx2_cpu_feature\n}\n\ncheck_host() {\n\tprintf \"\\n\" &&\n    printf \" ${YEL}Checking host CPU instruction extensions...${c0}\\n\"; echo\n    common_checks\n\tprintf \"\\n\" &&\n    printf \" ${YEL}If your CPU has AVX, you can build/run $program${c0}\\n\" && tput sgr0;\n}\n\nmain() {\n    case \"$1\" in\n        host) check_host ;;\n        *) printf \" ${RED}ERROR: Invalid type specified: '$1'\\n\" 2>&1 && tput sgr0; exit 1 ;;\n    esac\n}\n\nmain \"host\" && printf \"\\n\" && exit 0\n"
        },
        {
          "name": "clean.sh",
          "type": "blob",
          "size": 1.4375,
          "content": "#!/bin/bash\n\n# Copyright (c) 2024 Alex313031.\n\n# Copy and run from within out/thorium or wherever you put your build, or cd there first!\n# i.e. cd /home/alex/bin/thorium/\n\nYEL='\\033[1;33m' # Yellow\nCYA='\\033[1;96m' # Cyan\nRED='\\033[1;31m' # Red\nGRE='\\033[1;32m' # Green\nc0='\\033[0m' # Reset Text\nbold='\\033[1m' # Bold Text\nunderline='\\033[4m' # Underline Text\n\n# Error handling\nyell() { echo \"$0: $*\" >&2; }\ndie() { yell \"$*\"; exit 111; }\ntry() { \"$@\" || die \"${RED}Failed $*\"; }\n\n# --help\ndisplayHelp () {\n\tprintf \"\\n\" &&\n\tprintf \"${bold}${GRE}Script to remove unneeded artifacts in Thorium's build directory.${c0}\\n\" &&\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--help) displayHelp; exit 0;;\nesac\n\n# chromium/src dir env variable\nif [ -z \"${CR_DIR}\" ]; then \n    CR_SRC_DIR=\"$HOME/chromium/src\"\n    export CR_SRC_DIR\nelse \n    CR_SRC_DIR=\"${CR_DIR}\"\n    export CR_SRC_DIR\nfi\n\nprintf \"\\n\" &&\nprintf \"${YEL}Cleaning up build artifacts...\\n\" &&\nprintf \"${RED}\\n\" &&\n\ncd ${CR_SRC_DIR}/out/thorium &&\n\nrm -r -f -v pyproto &&\nrm -r -f -v obj &&\nrm -r -f -v newlib_pnacl_nonsfi &&\nrm -r -f -v newlib_pnacl &&\nrm -r -f -v nacl_bootstrap_x64 &&\nrm -r -f -v irt_x64 &&\nrm -r -f -v glibc_x64 &&\nrm -r -f -v gen &&\nrm -r -f -v etc &&\nrm -r -f -v clang_newlib_x64 &&\nrm -r -f -v thinlto-cache &&\nrm -r -f -v fontconfig_caches &&\nfind ${CR_SRC_DIR}/out/thorium -name \"*deps*\" -delete &&\nfind ${CR_SRC_DIR}/out/thorium -name \"*TOC*\" -delete &&\n\nprintf \"${GRE}Done cleaning artifacts.\\n\" &&\ntput sgr0\n"
        },
        {
          "name": "create_dmg.sh",
          "type": "blob",
          "size": 1.15234375,
          "content": "#!/bin/bash\n\n# Copyright (c) 2024 Alex313031 and midzer.\n\nYEL='\\033[1;33m' # Yellow\nCYA='\\033[1;96m' # Cyan\nRED='\\033[1;31m' # Red\nGRE='\\033[1;32m' # Green\nc0='\\033[0m' # Reset Text\nbold='\\033[1m' # Bold Text\nunderline='\\033[4m' # Underline Text\n\n# Error handling\nyell() { echo \"$0: $*\" >&2; }\ndie() { yell \"$*\"; exit 111; }\ntry() { \"$@\" || die \"${RED}Failed $*\"; }\n\n# chromium/src dir env variable\nif [ -z \"${CR_DIR}\" ]; then \n    CR_SRC_DIR=\"$HOME/chromium/src\"\n    export CR_SRC_DIR\nelse \n    CR_SRC_DIR=\"${CR_DIR}\"\n    export CR_SRC_DIR\nfi\n\nprintf \"\\n\" &&\nprintf \"${YEL}Building .dmg of Thorium...\\n\" &&\nprintf \"${CYA}\\n\" &&\n\ncd ${CR_SRC_DIR} &&\n\n# Fix file attr\nxattr -csr out/thorium/Thorium.app &&\n\n# Sign binary\ncodesign --force --deep --sign - out/thorium/Thorium.app &&\n\n# Build dmg package\nchrome/installer/mac/pkg-dmg --sourcefile --source out/thorium/Thorium.app --target \"out/thorium/Thorium_MacOS.dmg\" --volname Thorium --symlink /Applications:/Applications --format UDBZ --verbosity 2 &&\n\ncd $HOME/thorium &&\ncat logos/apple_ascii_art.txt &&\n\nprintf \"${GRE}.DMG Build Completed. ${YEL}Installer at \\'//chromium/src/out/thorium/Thorium*_MacOS.dmg\\'\\n\" &&\ntput sgr0\n"
        },
        {
          "name": "depot_tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "g",
          "type": "blob",
          "size": 0.86328125,
          "content": "#!/bin/bash\n\nset -e\n\n# Copyright (c) 2024 Alex313031.\n\nYEL='\\033[1;33m' # Yellow\nCYA='\\033[1;96m' # Cyan\nRED='\\033[1;31m' # Red\nGRE='\\033[1;32m' # Green\nc0='\\033[0m' # Reset Text\nbold='\\033[1m' # Bold Text\nunderline='\\033[4m' # Underline Text\n\n# Error handling\nyell() { echo \"$0: $*\" >&2; }\ndie() { yell \"$*\"; exit 111; }\ntry() { \"$@\" || die \"${RED}Failed $*\"; }\n\n# --help\ndisplayHelp () {\n\tprintf \"\\n\" &&\n\tprintf \"${bold}${GRE}Script to run \\`gn args out\\` from within the Thorium repo.${c0}\\n\" &&\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--help) displayHelp; exit 0;;\nesac\n\n# chromium/src dir env variable\nif [ -z \"${CR_DIR}\" ]; then \n    CR_SRC_DIR=\"$HOME/chromium/src\"\n    export CR_SRC_DIR\nelse \n    CR_SRC_DIR=\"${CR_DIR}\"\n    export CR_SRC_DIR\nfi\n\nprintf \"\\n\" &&\nprintf \"${YEL}Running \\`gn args out/thorium\\`...\\n\" &&\nprintf \"${c0}\\n\" &&\ntput sgr0 &&\n\ncd ${CR_SRC_DIR} &&\ngn args out/thorium\n"
        },
        {
          "name": "get_repo.sh",
          "type": "blob",
          "size": 3.662109375,
          "content": "#!/bin/bash\n\n# Copyright (c) 2024 Alex313031.\n\nYEL='\\033[1;33m' # Yellow\nRED='\\033[1;31m' # Red\nGRE='\\033[1;32m' # Green\nc0=$'\\033[0m' # Reset Text\nbold=$'\\033[1m' # Bold Text\nunderline=$'\\033[4m' # Underline Text\n\n# Error handling\nyell() { echo \"$0: $*\" >&2; }\ndie() { yell \"$*\"; exit 111; }\ntry() { \"$@\" || die \"${RED}Failed $*\"; }\n\nprintf \"\\n\" &&\nprintf \"${GRE}Script to download all prequisites to build Thorium...\\n\" &&\ntput sgr0 &&\n\n# Give user a chance to stop if they wish\ntput setaf 1 &&\nread -p \"This script requires git and wget. Press Enter to continue, otherwise use Ctrl+C to stop and install these first.\"\ntput sgr0 &&\n\nprintf \"\\n\" &&\nprintf \"${YEL}Installing depot_tools, cloning Thorium repo, and creating Chromium directories...\\n\" &&\ntput sgr0 &&\nsleep 1 &&\n\ncd &&\n# Clone repos\ngit clone https://chromium.googlesource.com/chromium/tools/depot_tools.git &&\nprintf \"\\n\" &&\ngit clone --recursive https://github.com/Alex313031/thorium.git &&\n\n# Make Chromium dirs\nprintf \"\\n\" &&\nmkdir -v ~/chromium &&\nmkdir -v ~/chromium/src &&\nmkdir -v ~/chromium/win &&\ncd $HOME/chromium/win &&\n\nprintf \"\\n\" &&\nprintf \"${YEL}Downloading Cross-Building MSVS Artifacts Archive...\\n\" &&\ntput sgr0 &&\nsleep 1 &&\n\n# Download VS artifacts .zip\nprintf \"\\n\" &&\nwget -v https://github.com/Alex313031/Snippets/releases/download/10.1.20348.1_04/15be23e584.zip &&\nsleep 1 &&\n\n# Alert user to .bashrc changes\nprintf \"\\n\" &&\nprintf \"${YEL}Adding these lines to your .bashrc...\\n\" &&\ntput sgr0 &&\nprintf \"umask 022\\n\" &&\nprintf \"PATH=\\$PATH:\\$HOME/depot_tools\\n\" &&\nprintf \"export DEPOT_TOOLS_WIN_TOOLCHAIN_BASE_URL=\\$HOME/chromium/win/\\n\" &&\nprintf \"export GYP_MSVS_HASH_1023ce2e82=15be23e584\\n\" &&\n\n# Give user a chance to stop if they wish\ntput setaf 1 &&\nread -p \"Press Enter to continue, otherwise use Ctrl + C to stop.\"\ntput sgr0 &&\n\ncd &&\n# Append lines to .bashrc\necho 'umask 022' >> .bashrc &&\n\necho 'PATH=\"$PATH:$HOME/depot_tools\"' >> .bashrc &&\n\necho 'export DEPOT_TOOLS_WIN_TOOLCHAIN_BASE_URL=$HOME/chromium/win/' >> .bashrc &&\n\necho 'export GYP_MSVS_HASH_1023ce2e82=15be23e584' >> .bashrc &&\n\nprintf \"\\n\" &&\nprintf \"${YEL}Running source ~/.bashrc..\\n\" &&\ntput sgr0 &&\n\n# Source .bashrc so changes take effect\ncd &&\nsource .bashrc &&\n\nprintf \"\\n\" &&\nprintf \"${YEL}Downloading Chromium source (This will take a while)...\\n\" &&\ntput sgr0 &&\nsleep 1 &&\n\n# Use depot_tools fetch to download full Chromium source tree\ncd ~/chromium &&\n\nfetch --nohooks chromium &&\n\nprintf \"\\n\" &&\nprintf \"${YEL}Running install-build-deps.sh to make sure prerequisites are installed...\\n\" &&\ntput sgr0 &&\n\n# Run script to install needed libraries\ncd ~/chromium/src &&\nsudo dpkg --add-architecture i386 &&\nsudo apt update &&\n\n./build/install-build-deps.sh --arm --chromeos-fonts &&\n\nprintf \"\\n\" &&\nprintf \"${YEL}Running hooks...\\n\" &&\ntput sgr0 &&\n\n# Run hooks for Chromium\ncd ~/chromium/src &&\ngclient runhooks &&\n\n# Alert user to .gclient file changes\nprintf \"\\n\" &&\nprintf \"${YEL}Appending target_os = [ 'linux', 'win' ] to .gclient file...\\n\" &&\ntput sgr0 &&\n\ncd ~/chromium &&\n# Apend line to chromium/.gclient file\necho \"target_os = [ 'linux', 'win' ]\" >> .gclient &&\n\nprintf \"\\n\" &&\nprintf \"${YEL}Running set_exec.sh in ~/Thorium...\\n\" &&\ntput sgr0 &&\n\n# Make set_exec.sh executable so it can make all other scripts executable\ncd ~/Thorium &&\nchmod +x set_exec.sh &&\n\n# Run set_exec.sh\n./set_exec.sh &&\n\nprintf \"\\n\" &&\nprintf \"${YEL}Running trunk.sh in ~/Thorium...\\n\" &&\ntput sgr0 &&\n\n# Run final trunk.sh to sync/rebase everything with tags and branches, and to set the VS toolchain\n./trunk.sh &&\n\n# Land user in ~/chromium/src\ncd ~/chromium/src\n\nprintf \"${YEL}Done!\\n\" &&\n\nprintf \"${GRE}Done! ${YEL}You can now run ./setup.sh or build vanilla Chromium.\\n\"\ntput sgr0\n"
        },
        {
          "name": "infra",
          "type": "tree",
          "content": null
        },
        {
          "name": "logos",
          "type": "tree",
          "content": null
        },
        {
          "name": "other",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.sh",
          "type": "blob",
          "size": 1.1787109375,
          "content": "#!/bin/bash\n\n# Copyright (c) 2024 Alex313031.\n\nYEL='\\033[1;33m' # Yellow\nCYA='\\033[1;96m' # Cyan\nRED='\\033[1;31m' # Red\nGRE='\\033[1;32m' # Green\nc0='\\033[0m' # Reset Text\nbold='\\033[1m' # Bold Text\nunderline='\\033[4m' # Underline Text\n\n# Error handling\nyell() { echo \"$0: $*\" >&2; }\ndie() { yell \"$*\"; exit 111; }\ntry() { \"$@\" || die \"${RED}Failed $*\"; }\n\n# --help\ndisplayHelp () {\n\tprintf \"\\n\" &&\n\tprintf \"${bold}${GRE}Script to build Thorium .deb and .rpm packages on Linux.${c0}\\n\" &&\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--help) displayHelp; exit 0;;\nesac\n\n# chromium/src dir env variable\nif [ -z \"${CR_DIR}\" ]; then \n    CR_SRC_DIR=\"$HOME/chromium/src\"\n    export CR_SRC_DIR\nelse \n    CR_SRC_DIR=\"${CR_DIR}\"\n    export CR_SRC_DIR\nfi\n\nprintf \"\\n\" &&\nprintf \"${YEL}Building Thorium .deb & .rpm packages...\\n\" &&\nprintf \"${CYA}\\n\" &&\n\n# Build debian package\nexport NINJA_SUMMARIZE_BUILD=1 &&\nexport NINJA_STATUS=\"[%r processes, %f/%t @ %o/s | %e sec. ] \" &&\n\ncd ${CR_SRC_DIR} &&\n\nautoninja -C out/thorium \"chrome/installer/linux:stable_deb\" \"chrome/installer/linux:stable_rpm\" -j $(nproc) &&\n\nprintf \"${GRE}Done! ${YEL}Installers at \\'//out/thorium/thorium*.deb\\' and \\'//out/thorium/thorium*.rpm\\'\\n\" &&\ntput sgr0\n"
        },
        {
          "name": "pak_src",
          "type": "tree",
          "content": null
        },
        {
          "name": "patch_ac3.sh",
          "type": "blob",
          "size": 1.0498046875,
          "content": "#!/bin/bash\n\n# Copyright (c) 2024 Alex313031.\n\nYEL='\\033[1;33m' # Yellow\nCYA='\\033[1;96m' # Cyan\nRED='\\033[1;31m' # Red\nGRE='\\033[1;32m' # Green\nc0='\\033[0m' # Reset Text\nbold='\\033[1m' # Bold Text\nunderline='\\033[4m' # Underline Text\n\n# Error handling\nyell() { echo \"$0: $*\" >&2; }\ndie() { yell \"$*\"; exit 111; }\ntry() { \"$@\" || die \"${RED}Failed $*\"; }\n\n# --help\ndisplayHelp () {\n\tprintf \"\\n\" &&\n\tprintf \"${bold}${GRE}Script to patch Chromium's FFMPEG for AC3/EAC3 support.${c0}\\n\" &&\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--help) displayHelp; exit 0;;\nesac\n\n# chromium/src dir env variable\nif [ -z \"${CR_DIR}\" ]; then \n    CR_SRC_DIR=\"$HOME/chromium/src\"\n    export CR_SRC_DIR\nelse \n    CR_SRC_DIR=\"${CR_DIR}\"\n    export CR_SRC_DIR\nfi\n\nprintf \"\\n\" &&\nprintf \"${bold}${GRE}Script to patch Chromium's FFMPEG for AC3/EAC3 support.${c0}\\n\" &&\n\nprintf \"\\n\" &&\nprintf \"${YEL}Patching FFMPEG for AC3 & E-AC3...${c0}\\n\" &&\n\ncp -v other/ffmpeg_hevc_ac3.patch ${CR_SRC_DIR}/third_party/ffmpeg/ &&\ncd ${CR_SRC_DIR}/third_party/ffmpeg &&\ngit apply --reject ./ffmpeg_hevc_ac3.patch &&\n\ntput sgr0\n"
        },
        {
          "name": "reset_depot_tools.sh",
          "type": "blob",
          "size": 1.9462890625,
          "content": "#!/bin/bash\n\n# Copyright (c) 2024 Alex313031 and midzer\n\nYEL='\\033[1;33m' # Yellow\nCYA='\\033[1;96m' # Cyan\nRED='\\033[1;31m' # Red\nGRE='\\033[1;32m' # Green\nc0='\\033[0m' # Reset Text\nbold='\\033[1m' # Bold Text\nunderline='\\033[4m' # Underline Text\n\n# Error handling\nyell() { echo \"$0: $*\" >&2; }\ndie() { yell \"$*\"; exit 111; }\ntry() { \"$@\" || die \"${RED}Failed $*\"; }\n\n# --help\ndisplayHelp () {\n\tprintf \"\\n\" &&\n\tprintf \"${bold}${GRE}Script to reset depot_tools on Linux/MacOS.${c0}\\n\" &&\n\tprintf \"\\n\" &&\n\tprintf \"${bold}${YEL}This will remove ${CYA}depot_tools${YEL}, ${CYA}.gsutil${YEL}, ${CYA}.vpython_cipd_cache${YEL}, and ${CYA}.vpython-root${c0}\\n\" &&\n\tprintf \"${bold}${YEL}from your home directory, and then re-clone depot_tools in \\$HOME.${c0}\\n\" &&\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--help) displayHelp; exit 0;;\nesac\n\n# chromium/src dir env variable\nif [ -z \"${CR_DIR}\" ]; then \n    CR_SRC_DIR=\"$HOME/chromium/src\"\n    export CR_SRC_DIR\nelse \n    CR_SRC_DIR=\"${CR_DIR}\"\n    export CR_SRC_DIR\nfi\n\nprintf \"\\n\" &&\nprintf \"${YEL}Removing depot_tools, etc...${c0}\\n\" &&\ntput sgr0 &&\nprintf \"\\n\" &&\n\nsudo rm -r -f $HOME/depot_tools &&\nprintf \"removed \\'$HOME/depot_tools\\'${c0}\\n\" &&\n\nsudo rm -r -f $HOME/.gsutil &&\nprintf \"removed \\'$HOME/.gsutil\\'${c0}\\n\" &&\n\nsudo rm -r -f $HOME/.vpython_cipd_cache &&\nprintf \"removed \\'$HOME/.vpython_cipd_cache\\'${c0}\\n\" &&\n\nsudo rm -r -f $HOME/.vpython-root &&\nprintf \"removed \\'$HOME/.vpython-root\\'${c0}\\n\" &&\n\nsudo rm -r -f $HOME/.cache/.vpython-root &&\nprintf \"removed \\'$HOME/.cache/.vpython-root\\'${c0}\\n\" &&\n\nprintf \"\\n\" &&\nprintf \"${GRE}Running \\`git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git\\`...\\n\" &&\ntput sgr0 &&\nprintf \"\\n\" &&\n\ncd $HOME &&\n\ngit clone https://chromium.googlesource.com/chromium/tools/depot_tools.git &&\ncd depot_tools &&\ngit checkout -f 31e21628c3a558d4f2189712e25849d608b3ff8c &&\ncd .. &&\n\nsource ~/.bashrc &&\n\nprintf \"\\n\" &&\n\nprintf \"${GRE}Completed. ${YEL}You can now run \\'./trunk.sh\\'\\n\"\ntput sgr0\n"
        },
        {
          "name": "setup.sh",
          "type": "blob",
          "size": 13.7109375,
          "content": "#!/bin/bash\n\n# Copyright (c) 2024 Alex313031.\n\nYEL='\\033[1;33m' # Yellow\nCYA='\\033[1;96m' # Cyan\nRED='\\033[1;31m' # Red\nGRE='\\033[1;32m' # Green\nc0='\\033[0m' # Reset Text\nbold='\\033[1m' # Bold Text\nunderline='\\033[4m' # Underline Text\n\n# Error handling\nyell() { echo \"$0: $*\" >&2; }\ndie() { yell \"$*\"; exit 111; }\ntry() { \"$@\" || die \"${RED}Failed $*\"; }\n\n# --help\ndisplayHelp () {\n\tprintf \"\\n\" &&\n\tprintf \"${bold}${GRE}Script to copy Thorium source files over the Chromium source tree.${c0}\\n\" &&\n\tprintf \"${bold}${YEL}  Use the --mac flag for MacOS builds.${c0}\\n\" &&\n\tprintf \"${bold}${YEL}  Use the --raspi or --arm64 flag for Raspberry Pi builds.${c0}\\n\" &&\n\tprintf \"${bold}${YEL}  Use the --woa flag for Windows on ARM builds.${c0}\\n\" &&\n\tprintf \"${bold}${YEL}  Use the --avx512 flag for AVX-512 Builds.${c0}\\n\" &&\n\tprintf \"${bold}${YEL}  Use the --avx2 flag for AVX2 Builds.${c0}\\n\" &&\n\tprintf \"${bold}${YEL}  Use the --sse4 flag for SSE4.1 Builds.${c0}\\n\" &&\n\tprintf \"${bold}${YEL}  Use the --sse3 flag for SSE3 Builds.${c0}\\n\" &&\n\tprintf \"${bold}${YEL}  Use the --sse2 flag for 32 bit SSE2 Builds.${c0}\\n\" &&\n\tprintf \"${bold}${YEL}  Use the --android flag for Android Builds.${c0}\\n\" &&\n\tprintf \"${bold}${YEL}  Use the --cros flag for ChromiumOS Builds.${c0}\\n\" &&\n\tprintf \"${bold}${YEL}  --help or -h shows this help.${c0}\\n\" &&\n\tprintf \"${bold}${YEL}  IMPORTANT: For Polly builds, first run build_polly.sh in ./infra before building.${c0}\\n\" &&\n\tprintf \"${bold}${YEL}   This should be done AFTER running this setup.sh script!${c0}\\n\" &&\n\tprintf \"\\n\"\n\tprintf \"${bold}${YEL}  NOTE: The \\`CR_DIR\\` env variable can be used to override the location of \\\"chromium/src\\\".${c0}\\n\" &&\n\tprintf \"${bold}${YEL}   The default is $HOME/chromium/src${c0}\\n\" &&\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--help) displayHelp; exit 0;;\nesac\ncase $1 in\n\t-h) displayHelp; exit 0;;\nesac\n\n# chromium/src dir env variable\nif [ -z \"${CR_DIR}\" ]; then \n    CR_SRC_DIR=\"$HOME/chromium/src\"\n    export CR_SRC_DIR\nelse \n    CR_SRC_DIR=\"${CR_DIR}\"\n    export CR_SRC_DIR\nfi\n\nprintf \"\\n\" &&\nprintf \"${YEL}Creating build output directory...${c0}\\n\" &&\n\nmkdir -v -p ${CR_SRC_DIR}/out/thorium/ &&\n\nprintf \"\\n\" &&\nprintf \"${YEL}Copying Thorium source files over the Chromium tree...${c0}\\n\" &&\n\n# Copy libjxl src\ncd ~/thorium &&\ncp -r -v thorium-libjxl/src/. ${CR_SRC_DIR}/ &&\n\n# Copy Thorium sources\ncp -r -v src/BUILD.gn ${CR_SRC_DIR}/ &&\ncp -r -v src/ash ${CR_SRC_DIR}/ &&\ncp -r -v src/build ${CR_SRC_DIR}/ &&\ncp -r -v src/chrome ${CR_SRC_DIR}/ &&\ncp -r -v src/chromeos ${CR_SRC_DIR}/ &&\ncp -r -v src/components ${CR_SRC_DIR}/ &&\ncp -r -v src/content ${CR_SRC_DIR}/ &&\ncp -r -v src/extensions ${CR_SRC_DIR}/ &&\ncp -r -v src/google_apis ${CR_SRC_DIR}/ &&\ncp -r -v src/media ${CR_SRC_DIR}/ &&\ncp -r -v src/net ${CR_SRC_DIR}/ &&\ncp -r -v src/sandbox ${CR_SRC_DIR}/ &&\ncp -r -v src/services ${CR_SRC_DIR}/ &&\ncp -r -v src/third_party ${CR_SRC_DIR}/ &&\ncp -r -v src/tools ${CR_SRC_DIR}/ &&\ncp -r -v src/ui ${CR_SRC_DIR}/ &&\ncp -r -v src/v8 ${CR_SRC_DIR}/ &&\n\ncp -r -v thorium_shell/. ${CR_SRC_DIR}/out/thorium/ &&\ncp -r -v pak_src/binaries/pak ${CR_SRC_DIR}/out/thorium/ &&\ncp -r -v pak_src/binaries/pak-win/. ${CR_SRC_DIR}/out/thorium/ &&\n\npatchThor () {\n\tcp -v other/add-hevc-ffmpeg-decoder-parser.patch ${CR_SRC_DIR}/third_party/ffmpeg/ &&\n\tcp -v other/fix-policy-templates.patch ${CR_SRC_DIR}/ &&\n\tcp -v other/ftp-support-thorium.patch ${CR_SRC_DIR}/ &&\n\tcp -v other/thorium-2024-ui.patch ${CR_SRC_DIR}/ &&\n\tcp -v other/GPC.patch ${CR_SRC_DIR}/ &&\n\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Patching FFMPEG for HEVC...${c0}\\n\" &&\n\tcd ${CR_SRC_DIR}/third_party/ffmpeg &&\n\tgit apply --reject ./add-hevc-ffmpeg-decoder-parser.patch &&\n\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Patching policy templates...${c0}\\n\" &&\n\tcd ${CR_SRC_DIR} &&\n\tgit apply --reject ./fix-policy-templates.patch &&\n\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Patching FTP support...${c0}\\n\" &&\n\tcd ${CR_SRC_DIR} &&\n\tgit apply --reject ./ftp-support-thorium.patch &&\n\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Patching in GPC support...${c0}\\n\" &&\n\tcd ${CR_SRC_DIR} &&\n\tgit apply --reject ./GPC.patch\n\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Patching for Thorium 2024 UI...${c0}\\n\" &&\n\tcd ${CR_SRC_DIR} &&\n\tgit apply --reject ./thorium-2024-ui.patch\n}\n[ -f ${CR_SRC_DIR}/third_party/ffmpeg/add-hevc-ffmpeg-decoder-parser.patch ] || patchThor;\n\npatchAC3 () {\n\tcp -v other/ffmpeg_hevc_ac3.patch ${CR_SRC_DIR}/third_party/ffmpeg/ &&\n\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Patching FFMPEG for AC3 & E-AC3...${c0}\\n\" &&\n\tcd ${CR_SRC_DIR}/third_party/ffmpeg &&\n\tgit apply --reject ./ffmpeg_hevc_ac3.patch &&\n\tcd ~/thorium\n}\n\npatchSSE2 () {\n\tcp -v other/SSE2/angle-lockfree.patch ${CR_SRC_DIR}/third_party/angle/src/ &&\n\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Patching ANGLE for SSE2...${c0}\\n\" &&\n\tcd ${CR_SRC_DIR}/third_party/angle/src &&\n\tgit apply --reject ./angle-lockfree.patch &&\n\tcd ~/thorium\n}\n\ncd ~/thorium &&\n\nprintf \"\\n\" &&\necho \"Copying other files to \\`out/thorium\\`\" &&\n\n# Add default_apps dir for Google Docs Offline extension.\nmkdir -v -p ${CR_SRC_DIR}/out/thorium/default_apps &&\ncp -r -v infra/default_apps/. ${CR_SRC_DIR}/out/thorium/default_apps/ &&\n\n# Add initial preferences file to open Thorium welcome page on first run.\ncp -v infra/initial_preferences ${CR_SRC_DIR}/out/thorium/ &&\ncp -v infra/thor_ver ${CR_SRC_DIR}/out/thorium/ &&\n\n# MacOS ARMv8.3-A optimizations\ncopyMacOS () {\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Copying files for MacOS...${c0}\\n\" &&\n\tcp -v arm/mac_arm.gni ${CR_SRC_DIR}/build/config/arm.gni &&\n\tcp -r -v arm/third_party/* ${CR_SRC_DIR}/third_party/ &&\n\tcd ${CR_SRC_DIR} &&\n\tpython3 tools/update_pgo_profiles.py --target=mac update --gs-url-base=chromium-optimization-profiles/pgo_profiles &&\n\tpython3 tools/update_pgo_profiles.py --target=mac-arm update --gs-url-base=chromium-optimization-profiles/pgo_profiles &&\n\tcd ~/thorium &&\n\t[ -f ${CR_SRC_DIR}/third_party/ffmpeg/ffmpeg_hevc_ac3.patch ] || patchAC3;\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--mac) copyMacOS;\nesac\ncase $1 in\n\t--macos) copyMacOS;\nesac\n\n# Raspberry Pi Source Files\ncopyRaspi () {\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Copying Raspberry Pi build files...${c0}\\n\" &&\n\tcp -r -v arm/build/* ${CR_SRC_DIR}/build/ &&\n\tcp -r -v arm/third_party/* ${CR_SRC_DIR}/third_party/ &&\n\tcp -r -v arm/raspi/* ${CR_SRC_DIR}/ &&\n\tcp -v other/thor_ver_linux/wrapper-raspi ${CR_SRC_DIR}/chrome/installer/linux/common/wrapper &&\n\tcp -v pak_src/binaries/pak_arm64 ${CR_SRC_DIR}/out/thorium/pak &&\n\t#./infra/fix_libaom.sh &&\n\tprintf \"\\n\" &&\n\tcp -r -v arm/raspi/build/config/* ${CR_SRC_DIR}/build/config/ &&\n\tprintf \"\\n\" &&\n\t# Display raspi ascii art\n\tcat logos/raspi_ascii_art.txt\n}\ncase $1 in\n\t--raspi) copyRaspi;\nesac\ncase $1 in\n\t--arm64) copyRaspi;\nesac\n\n# Windows on ARM64 files\ncopyWOA () {\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Copying Windows on ARM build files...${c0}\\n\" &&\n\tcp -r -v arm/build/* ${CR_SRC_DIR}/build/ &&\n\tcp -r -v arm/third_party/* ${CR_SRC_DIR}/third_party/ &&\n\tcd ${CR_SRC_DIR} &&\n\tpython3 tools/update_pgo_profiles.py --target=win-arm64 update --gs-url-base=chromium-optimization-profiles/pgo_profiles &&\n\tcd ~/thorium &&\n\t# Use regular arm.gni from src, pending further testing\n\t# cp -v arm/woa_arm.gni ${CR_SRC_DIR}/build/config/arm.gni &&\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--woa) copyWOA;\nesac\n\n# Copy AVX512 files\ncopyAVX512 () {\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Copying AVX-512 build files...${c0}\\n\" &&\n\tcp -r -v other/AVX2/third_party/* ${CR_SRC_DIR}/third_party/ &&\n\tcp -v other/AVX512/thor_ver ${CR_SRC_DIR}/out/thorium/ &&\n\tcp -v other/thor_ver_linux/wrapper-avx512 ${CR_SRC_DIR}/chrome/installer/linux/common/wrapper &&\n\t[ -f ${CR_SRC_DIR}/third_party/ffmpeg/ffmpeg_hevc_ac3.patch ] || patchAC3;\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--avx512) copyAVX512;\nesac\n\n# Copy AVX2 files\ncopyAVX2 () {\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Copying AVX2 build files...${c0}\\n\" &&\n\tcp -r -v other/AVX2/third_party/* ${CR_SRC_DIR}/third_party/ &&\n\tcp -v other/AVX2/thor_ver ${CR_SRC_DIR}/out/thorium/ &&\n\tcp -v other/thor_ver_linux/wrapper-avx2 ${CR_SRC_DIR}/chrome/installer/linux/common/wrapper &&\n\t[ -f ${CR_SRC_DIR}/third_party/ffmpeg/ffmpeg_hevc_ac3.patch ] || patchAC3;\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--avx2) copyAVX2;\nesac\n\n# Copy SSE4.1 files\ncopySSE4 () {\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Copying SSE4.1 build files...${c0}\\n\" &&\n\tcp -v other/SSE4.1/thor_ver ${CR_SRC_DIR}/out/thorium/ &&\n\tcp -v other/thor_ver_linux/wrapper-sse4 ${CR_SRC_DIR}/chrome/installer/linux/common/wrapper &&\n\t[ -f ${CR_SRC_DIR}/third_party/ffmpeg/ffmpeg_hevc_ac3.patch ] || patchAC3;\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--sse4) copySSE4;\nesac\n\n# Copy SSE3 files\ncopySSE3 () {\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Copying SSE3 build files...${c0}\\n\" &&\n\tcp -v other/SSE3/thor_ver ${CR_SRC_DIR}/out/thorium/ &&\n\tcp -v other/thor_ver_linux/wrapper-sse3 ${CR_SRC_DIR}/chrome/installer/linux/common/wrapper &&\n\tcd ${CR_SRC_DIR} &&\n\tpython3 tools/update_pgo_profiles.py --target=win32 update --gs-url-base=chromium-optimization-profiles/pgo_profiles &&\n\tcd ~/thorium &&\n\t[ -f ${CR_SRC_DIR}/third_party/ffmpeg/ffmpeg_hevc_ac3.patch ] || patchAC3;\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--sse3) copySSE3;\nesac\n\n# Copy SSE2 files\ncopySSE2 () {\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Copying SSE2 (32-bit) build files...${c0}\\n\" &&\n\tcp -v other/SSE2/thor_ver ${CR_SRC_DIR}/out/thorium/ &&\n\tcp -v other/thor_ver_linux/wrapper-sse2 ${CR_SRC_DIR}/chrome/installer/linux/common/wrapper &&\n\tcd ${CR_SRC_DIR} &&\n\tpython3 tools/update_pgo_profiles.py --target=win32 update --gs-url-base=chromium-optimization-profiles/pgo_profiles &&\n\tcd ~/thorium &&\n\t[ -f ${CR_SRC_DIR}/third_party/ffmpeg/ffmpeg_hevc_ac3.patch ] || patchAC3;\n\t[ -f ${CR_SRC_DIR}/third_party/angle/src/angle-lockfree.patch ] || patchSSE2;\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--sse2) copySSE2;\nesac\n\n# Copy Android files\ncopyAndroid () {\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Copying Android (ARM64 and ARM32) build files...${c0}\\n\" &&\n\tcp -r -v arm/build/* ${CR_SRC_DIR}/build/ &&\n\tcp -r -v arm/third_party/* ${CR_SRC_DIR}/third_party/ &&\n\tprintf \"\\n\" &&\n\tcp -r -v arm/android/* ${CR_SRC_DIR}/ &&\n\tprintf \"\\n\" &&\n\t#cp -r -v arm/android/third_party/* ${CR_SRC_DIR}/third_party/ &&\n\trm -v -f ${CR_SRC_DIR}/chrome/android/java/res_base/drawable-v26/ic_launcher.xml &&\n\trm -v -f ${CR_SRC_DIR}/chrome/android/java/res_base/drawable-v26/ic_launcher_round.xml &&\n\trm -v -f ${CR_SRC_DIR}/chrome/android/java/res_chromium_base/mipmap-mdpi/layered_app_icon_background.png &&\n\t#rm -v -f ${CR_SRC_DIR}/chrome/android/java/res_chromium_base/mipmap-mdpi/layered_app_icon.png &&\n\trm -v -f ${CR_SRC_DIR}/chrome/android/java/res_chromium_base/mipmap-xhdpi/layered_app_icon_background.png &&\n\t#rm -v -f ${CR_SRC_DIR}/chrome/android/java/res_chromium_base/mipmap-xhdpi/layered_app_icon.png &&\n\trm -v -f ${CR_SRC_DIR}/chrome/android/java/res_chromium_base/mipmap-xxxhdpi/layered_app_icon_background.png &&\n\t#rm -v -f ${CR_SRC_DIR}/chrome/android/java/res_chromium_base/mipmap-xxxhdpi/layered_app_icon.png &&\n\trm -v -f ${CR_SRC_DIR}/chrome/android/java/res_chromium_base/mipmap-nodpi/layered_app_icon_foreground.xml &&\n\trm -v -f ${CR_SRC_DIR}/chrome/android/java/res_chromium_base/mipmap-hdpi/layered_app_icon_background.png &&\n\t#rm -v -f ${CR_SRC_DIR}/chrome/android/java/res_chromium_base/mipmap-hdpi/layered_app_icon.png &&\n\trm -v -f ${CR_SRC_DIR}/chrome/android/java/res_chromium_base/mipmap-xxhdpi/layered_app_icon_background.png &&\n\t#rm -v -f ${CR_SRC_DIR}/chrome/android/java/res_chromium_base/mipmap-xxhdpi/layered_app_icon.png &&\n\t#./infra/fix_libaom.sh &&\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Downloading PGO profiles...${c0}\\n\" &&\n\tcd ${CR_SRC_DIR} &&\n\tpython3 tools/update_pgo_profiles.py --target=android-arm64 update --gs-url-base=chromium-optimization-profiles/pgo_profiles &&\n\tpython3 tools/update_pgo_profiles.py --target=android-arm32 update --gs-url-base=chromium-optimization-profiles/pgo_profiles &&\n\tcd ~/thorium &&\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--android) copyAndroid;\nesac\n\n# Copy CrOS files\ncopyCros () {\n\tprintf \"\\n\" &&\n\tprintf \"${YEL}Copying ChromiumOS build files...${c0}\\n\" &&\n\tcp -r -v other/CrOS/* ${CR_SRC_DIR}/ &&\n\t[ -f ${CR_SRC_DIR}/third_party/ffmpeg/ffmpeg_hevc_ac3.patch ] || patchAC3;\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--cros) copyCros;\nesac\n\nprintf \"\\n\" &&\nprintf \"${GRE}Done!${c0}\\n\" &&\n\n#. ~/thorium/aliases.txt &&\n\n#printf \"\\n\" &&\n#printf \"export ${CYA}NINJA_SUMMARIZE_BUILD=1${c0}\\n\" &&\n#printf \"export ${CYA}EDITOR=nano${c0}\\n\" &&\n#printf \"export ${CYA}VISUAL=nano${c0}\\n\" &&\n#printf \"\\n\" &&\n#printf \"alias ${YEL}origin${c0} = ${CYA}git checkout -f origin/main${c0}\\n\" &&\n#printf \"alias ${YEL}gfetch${c0} = ${CYA}git fetch --tags${c0}\\n\" &&\n#printf \"alias ${YEL}rebase${c0} = ${CYA}git rebase-update${c0}\\n\" &&\n#printf \"alias ${YEL}gsync${c0} = ${CYA}gclient sync --with_branch_heads --with_tags -f -R -D${c0}\\n\" &&\n#printf \"alias ${YEL}args${c0} = ${CYA}gn args out/thorium${c0}\\n\" &&\n#printf \"alias ${YEL}gnls${c0} = ${CYA}gn ls out/thorium${c0}\\n\" &&\n#printf \"alias ${YEL}show${c0} = ${CYA}git show-ref${c0}\\n\" &&\n#printf \"alias ${YEL}runhooks${c0} = ${CYA}gclient runhooks${c0}\\n\" &&\n#printf \"alias ${YEL}pgo${c0} = ${CYA}python3 tools/update_pgo_profiles.py --target=linux update --gs-url-base=chromium-optimization-profiles/pgo_profiles${c0}\\n\" &&\n#printf \"alias ${YEL}pgow${c0} = ${CYA}python3 tools/update_pgo_profiles.py --target=win64 update --gs-url-base=chromium-optimization-profiles/pgo_profiles${c0}\\n\" &&\n#printf \"alias ${YEL}pgom${c0} = ${CYA}python3 tools/update_pgo_profiles.py --target=mac update --gs-url-base=chromium-optimization-profiles/pgo_profiles${c0}\\n\" &&\n#printf \"alias ${YEL}pgomac-arm${c0} = ${CYA}python3 tools/update_pgo_profiles.py --target=mac-arm update --gs-url-base=chromium-optimization-profiles/pgo_profiles${c0}\\n\" &&\n#printf \"\\n\" &&\n\ncat ./logos/thorium_ascii_art.txt &&\n\nprintf \"${YEL}Tip: See the ${CYA}aliases.txt${YEL} file for some handy bash aliases.${c0}\\n\" &&\nprintf \"\\n\" &&\nprintf \"${RED} IMPORTANT: If you ran setup.sh without any flags, you must also run ./patch_ac3.sh for AC3/E-AC3 support.\\n\" &&\nprintf \"\\n\" &&\nprintf \"${GRE}  Enjoy Thorium!\\n\" &&\nprintf \"\\n\" &&\ntput sgr0\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "thorium-libjxl",
          "type": "commit",
          "content": null
        },
        {
          "name": "thorium_shell",
          "type": "tree",
          "content": null
        },
        {
          "name": "tot.sh",
          "type": "blob",
          "size": 1.462890625,
          "content": "#!/bin/bash\n\n# Copyright (c) 2024 Alex313031.\n\nYEL='\\033[1;33m' # Yellow\nCYA='\\033[1;96m' # Cyan\nRED='\\033[1;31m' # Red\nGRE='\\033[1;32m' # Green\nc0='\\033[0m' # Reset Text\nbold='\\033[1m' # Bold Text\nunderline='\\033[4m' # Underline Text\n\n# Error handling\nyell() { echo \"$0: $*\" >&2; }\ndie() { yell \"$*\"; exit 111; }\ntry() { \"$@\" || die \"${RED}Failed $*\"; }\n\n# --help\ndisplayHelp () {\n\tprintf \"\\n\" &&\n\tprintf \"${bold}${GRE}Script to Rebase/Sync Chromium repo to Tip of Tree.${c0}\\n\" &&\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--help) displayHelp; exit 0;;\nesac\n\n# chromium/src dir env variable\nif [ -z \"${CR_DIR}\" ]; then \n    CR_SRC_DIR=\"$HOME/chromium/src\"\n    export CR_SRC_DIR\nelse \n    CR_SRC_DIR=\"${CR_DIR}\"\n    export CR_SRC_DIR\nfi\n\nprintf \"\\n\" &&\nprintf \"${bold}${GRE}Script to Rebase/Sync Chromium repo to Tip of Tree.${c0}\\n\" &&\nprintf \"\\n\" &&\nprintf \"${YEL}Rebasing/Syncing to \\`origin/main\\` and running hooks...\\n\" &&\ntput sgr0 &&\n\ncd ${CR_SRC_DIR}/v8/ &&\n\ngit restore . && git clean -ffd &&\n\ncd ${CR_SRC_DIR}/third_party/devtools-frontend/src &&\n\ngit restore . && git clean -ffd &&\n\ncd ${CR_SRC_DIR}/third_party/ffmpeg &&\n\ngit restore . && git clean -ffd &&\n\ncd ${CR_SRC_DIR} &&\n\nrm -v -r -f ${CR_SRC_DIR}/third_party/pak &&\n\ngit checkout -f origin/main &&\n\ngit clean -ffd &&\ngit clean -ffd &&\n\ngit rebase-update &&\n\ngit fetch --tags &&\n\ngclient sync --with_branch_heads --with_tags -f -R -D &&\n\ngit clean -ffd &&\n\ngclient runhooks &&\n\nprintf \"\\n\" &&\nprintf \"${GRE}Done!\" &&\nprintf \"\\n\" &&\ntput sgr0\n"
        },
        {
          "name": "trunk.sh",
          "type": "blob",
          "size": 3.541015625,
          "content": "#!/bin/bash\n\n# Copyright (c) 2024 Alex313031, midzer, and gz83.\n\nYEL='\\033[1;33m' # Yellow\nCYA='\\033[1;96m' # Cyan\nRED='\\033[1;31m' # Red\nGRE='\\033[1;32m' # Green\nc0='\\033[0m' # Reset Text\nbold='\\033[1m' # Bold Text\nunderline='\\033[4m' # Underline Text\n\n# Error handling\nyell() { echo \"$0: $*\" >&2; }\ndie() { yell \"$*\"; exit 111; }\ntry() { \"$@\" || die \"${RED}Failed $*\"; }\n\n# --help\ndisplayHelp () {\n\tprintf \"\\n\" &&\n\tprintf \"${bold}${GRE}Script to Rebase/Sync the Chromium repo.${c0}\\n\" &&\n\t# printf \"${bold}${YEL}Use the --shallow flag to do a shallow sync, if you have downloaded${c0}\\n\" &&\n\t# printf \"${bold}${YEL}the Chromium repo with the --no-history flag.${c0}\\n\" &&\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--help) displayHelp; exit 0;;\nesac\n\n# chromium/src dir env variable\nif [ -z \"${CR_DIR}\" ]; then \n    CR_SRC_DIR=\"$HOME/chromium/src\"\n    export CR_SRC_DIR\nelse \n    CR_SRC_DIR=\"${CR_DIR}\"\n    export CR_SRC_DIR\nfi\n\nprintf \"\\n\" &&\nprintf \"${bold}${GRE}Script to Rebase/Sync the Chromium repo.${c0}\\n\" &&\nprintf \"\\n\" &&\nprintf \"${YEL}Rebasing/Syncing and running hooks...\\n\" &&\ntput sgr0 &&\n\ncd ${CR_SRC_DIR}/v8/ &&\n\ngit restore . && git clean -ffd &&\n\ncd ${CR_SRC_DIR}/third_party/devtools-frontend/src &&\n\ngit restore . && git clean -ffd &&\n\ncd ${CR_SRC_DIR}/third_party/ffmpeg &&\n\ngit restore . && git clean -ffd &&\n\ncd ${CR_SRC_DIR} &&\n\nrm -v -r -f ${CR_SRC_DIR}/third_party/pak &&\n\nrm -r -f -v components/ungoogled/ &&\n\ngit checkout -f origin/main &&\n\ngit clean -ffd &&\ngit clean -ffd &&\n\ngit rebase-update &&\n\ngit fetch --tags &&\n\n# Use our artifacts hash\ncd $HOME/thorium &&\ncp -v src/build/vs_toolchain.py ${CR_SRC_DIR}/build/ &&\ncd ${CR_SRC_DIR} &&\n\ngclient sync --with_branch_heads --with_tags -f -R -D &&\n\ngit clean -ffd &&\n\ngclient runhooks &&\n\nprintf \"\\n\" &&\nprintf \"${GRE}Done! ${YEL}You can now run \\'./version.sh\\'\\n\" &&\ntput sgr0 &&\n\n#c0='\\033[0m' # Reset Text\n#c1='\\033[0m\\033[36m\\033[1m' # Light Cyan\n#c2='\\033[0m\\033[1;31m' # Light Red\n#c3='\\033[0m\\033[37m' # Light Grey\n#c4='\\033[0m\\033[1;34m\\033[1m' # Light Blue\n#c5='\\033[0m\\033[1;37m' # White\n#c6='\\033[0m\\033[1;34m' # Dark Blue\n#c7='\\033[1;32m' # Green\n\n#printf \"\\n\" &&\n#printf \"${c4}                .,:loool:,.              \\n\" &&\n#printf \"${c4}            .,coooooooooooooc,.          \\n\" &&\n#printf \"${c4}         .,lllllllllllllllllllll,.       \\n\" &&\n#printf \"${c4}        ;ccccccccccccccccccccccccc;      \\n\" &&\n#printf \"${c1}      ,${c4}ccccccccccccccccccccccccccccc.    \\n\" &&\n#printf \"${c1}     ,oo${c4}c::::::::ok${c5}00000${c3}OOkkkkkkkkkkk:   \\n\" &&\n#printf \"${c1}    .ooool${c4};;;;:x${c5}K0${c6}kxxxxxk${c5}0X${c3}K0000000000.  \\n\" &&\n#printf \"${c1}    :oooool${c4};,;O${c5}K${c6}ddddddddddd${c5}KX${c3}000000000d  \\n\" &&\n#printf \"${c1}    lllllool${c4};l${c5}N${c6}dllllllllllld${c5}N${c3}K000000000  \\n\" &&\n#printf \"${c1}    lllllllll${c4}o${c5}M${c6}dccccccccccco${c5}W${c3}K000000000  \\n\" &&\n#printf \"${c1}    ;cllllllllX${c5}X${c6}c:::::::::c${c5}0X${c3}000000000d  \\n\" &&\n#printf \"${c1}    .ccccllllllO${c5}Nk${c6}c;,,,;cx${c5}KK${c3}0000000000.  \\n\" &&\n#printf \"${c1}     .cccccclllllxO${c5}OOOO0${c1}kx${c3}O0000000000;   \\n\" &&\n#printf \"${c1}      .:ccccccccllllllllo${c3}O0000000OOO,    \\n\" &&\n#printf \"${c1}        ,:ccccccccclllcd${c3}0000OOOOOOl.     \\n\" &&\n#printf \"${c1}          .::ccccccccc${c3}dOOOOOOOkx:.       \\n\" &&\n#printf \"${c1}            ..,::cccc${c3}xOOOkkko;.          \\n\" &&\n#printf \"${c1}               ..::${c3}dOkkxl:.              \\n\" &&\n#printf \"\\n\"\n#printf \"${c7}            Long Live Chromium\\041\\n${c0}\\n\" &&\n\nprintf \"\\n\" &&\ncat ~/thorium/logos/chromium_logo_ascii_art.txt &&\nprintf \"\\n\" &&\ntput sgr0\n"
        },
        {
          "name": "upstream_version.sh",
          "type": "blob",
          "size": 2.140625,
          "content": "#!/bin/bash\n\n# Copyright (c) 2024 Alex313031.\n\nYEL='\\033[1;33m' # Yellow\nCYA='\\033[1;96m' # Cyan\nRED='\\033[1;31m' # Red\nGRE='\\033[1;32m' # Green\nc0='\\033[0m' # Reset Text\nbold='\\033[1m' # Bold Text\nunderline='\\033[4m' # Underline Text\n\n# Error handling\nyell() { echo \"$0: $*\" >&2; }\ndie() { yell \"$*\"; exit 111; }\ntry() { \"$@\" || die \"${RED}Failed $*\"; }\n\n# --help\ndisplayHelp () {\n\tprintf \"\\n\" &&\n\tprintf \"${bold}${YEL}Script to check out Chromium tag of current Thorium version.${c0}\\n\" &&\n\tprintf \"\\n\"\n\tprintf \"${RED}NOTE: You may need to run ${c0}${bold}./trunk.sh ${RED}before using this script!${c0}\\n\" &&\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--help) displayHelp; exit 0;;\nesac\n\n# chromium/src dir env variable\nif [ -z \"${CR_DIR}\" ]; then \n    CR_SRC_DIR=\"$HOME/chromium/src\"\n    export CR_SRC_DIR\nelse \n    CR_SRC_DIR=\"${CR_DIR}\"\n    export CR_SRC_DIR\nfi\n\nCR_VER=\"130.0.6723.174\"\n\nexport CR_VER &&\n\nprintf \"\\n\"\nprintf \"${GRE}Current Chromium version is:${c0} ${underline}$CR_VER${c0}\\n\"\nprintf \"\\n\"\nprintf \"${RED}NOTE: ${YEL}Checking out${CYA} tags/$CR_VER ${YEL}in ${CR_SRC_DIR}...${c0}\\n\"\nprintf \"\\n\"\n\ncd ${CR_SRC_DIR} &&\n\ngit checkout -f tags/$CR_VER &&\n\ngit clean -ffd &&\ngit clean -ffd &&\ngit clean -ffd &&\n\ngclient sync --with_branch_heads --with_tags -f -R -D &&\n\n# gclient runhooks &&\n\n# Install sysroots (i.e. for ARM64)\nbuild/linux/sysroot_scripts/install-sysroot.py --arch=amd64 &&\nbuild/linux/sysroot_scripts/install-sysroot.py --arch=arm64 &&\n\nprintf \"\\n\"\nprintf \"${GRE}Chromium tree is checked out at tag: ${c0}$CR_VER\\n\"\nprintf \"\\n\"\n\t\nprintf \"${YEL}Downloading PGO Profiles for Linux, Windows, and Mac...\\n\" &&\nprintf \"\\n\" &&\ntput sgr0 &&\n\npython3 tools/update_pgo_profiles.py --target=linux update --gs-url-base=chromium-optimization-profiles/pgo_profiles &&\n\npython3 tools/update_pgo_profiles.py --target=win64 update --gs-url-base=chromium-optimization-profiles/pgo_profiles &&\n\nprintf \"\\n\" &&\n\nprintf \"${YEL}Downloading PGO Profile for V8 (for when v8_enable_builtins_optimization = true)\\n\" &&\nprintf \"\\n\" &&\ntput sgr0 &&\n\npython3 v8/tools/builtins-pgo/download_profiles.py --depot-tools=$HOME/depot_tools --force download &&\nprintf \"\\n\" &&\n\nprintf \"${GRE}Done!\\n\"\ntput sgr0\n"
        },
        {
          "name": "version.sh",
          "type": "blob",
          "size": 2.533203125,
          "content": "#!/bin/bash\n\n# Copyright (c) 2024 Alex313031.\n\nYEL='\\033[1;33m' # Yellow\nCYA='\\033[1;96m' # Cyan\nRED='\\033[1;31m' # Red\nGRE='\\033[1;32m' # Green\nc0='\\033[0m' # Reset Text\nbold='\\033[1m' # Bold Text\nunderline='\\033[4m' # Underline Text\n\n# Error handling\nyell() { echo \"$0: $*\" >&2; }\ndie() { yell \"$*\"; exit 111; }\ntry() { \"$@\" || die \"${RED}Failed $*\"; }\n\n# --help\ndisplayHelp () {\n\tprintf \"\\n\" &&\n\tprintf \"${bold}${YEL}Script to check out Chromium tag of current Thorium version.${c0}\\n\" &&\n\tprintf \"\\n\"\n\tprintf \"${RED}NOTE: You may need to run ${c0}${bold}./trunk.sh ${RED}before using this script!${c0}\\n\" &&\n\tprintf \"\\n\"\n}\ncase $1 in\n\t--help) displayHelp; exit 0;;\nesac\n\n# chromium/src dir env variable\nif [ -z \"${CR_DIR}\" ]; then \n    CR_SRC_DIR=\"$HOME/chromium/src\"\n    export CR_SRC_DIR\nelse \n    CR_SRC_DIR=\"${CR_DIR}\"\n    export CR_SRC_DIR\nfi\n\nTHOR_VER=\"130.0.6723.174\"\n\nexport THOR_VER &&\n\nprintf \"\\n\"\nprintf \"${GRE}Current Thorium version is:${c0} ${underline}$THOR_VER${c0}\\n\"\nprintf \"\\n\"\nprintf \"${RED}NOTE: ${YEL}Checking out${CYA} tags/$THOR_VER ${YEL}in ${CR_SRC_DIR}...${c0}\\n\"\nprintf \"\\n\"\n\ncd ${CR_SRC_DIR} &&\n\ngit checkout -f tags/$THOR_VER &&\n\ncd ~/thorium &&\n\n# Use our artifacts hash\ncp -v src/build/vs_toolchain.py ${CR_SRC_DIR}/build/ &&\n\n# Add //third_party/libjxl to DEPS\ncp -v thorium-libjxl/src/DEPS ${CR_SRC_DIR}/ &&\ncp -v thorium-libjxl/src/.gitmodules ${CR_SRC_DIR}/ &&\ncp -v thorium-libjxl/src/third_party/.gitignore ${CR_SRC_DIR}/third_party/ &&\n\ncd ${CR_SRC_DIR} &&\n\ngit clean -ffd &&\ngit clean -ffd &&\ngit clean -ffd &&\n\ngclient sync --with_branch_heads --with_tags -f -R -D &&\n\n# gclient runhooks &&\n\n# Install sysroots (i.e. for ARM64)\nbuild/linux/sysroot_scripts/install-sysroot.py --arch=amd64 &&\nbuild/linux/sysroot_scripts/install-sysroot.py --arch=arm64 &&\n\nprintf \"\\n\"\nprintf \"${GRE}Chromium tree is checked out at tag: ${c0}$THOR_VER\\n\"\nprintf \"\\n\"\n\t\nprintf \"${YEL}Downloading PGO Profiles for Linux, Windows, and Mac...\\n\" &&\nprintf \"\\n\" &&\ntput sgr0 &&\n\npython3 tools/update_pgo_profiles.py --target=linux update --gs-url-base=chromium-optimization-profiles/pgo_profiles &&\n\npython3 tools/update_pgo_profiles.py --target=win64 update --gs-url-base=chromium-optimization-profiles/pgo_profiles &&\n\nprintf \"\\n\" &&\n\nprintf \"${YEL}Downloading PGO Profile for V8 (for when v8_enable_builtins_optimization = true)\\n\" &&\nprintf \"\\n\" &&\ntput sgr0 &&\n\npython3 v8/tools/builtins-pgo/download_profiles.py --depot-tools=$HOME/depot_tools --force download &&\nprintf \"\\n\" &&\n\ncd ~/thorium &&\n\nprintf \"${GRE}Done! ${YEL}You can now run \\'./setup.sh\\'\\n\"\ntput sgr0\n"
        },
        {
          "name": "win_args.gn",
          "type": "blob",
          "size": 2.458984375,
          "content": "use_sse3 = true\nuse_sse41 = true\nuse_sse42 = true\nuse_avx = true\nuse_avx2 = false\nuse_avx512 = false\nuse_fma = false\n\n# use_polly = true\n# use_bolt = true\ntarget_os = \"win\"\ntarget_cpu = \"x64\"\nis_official_build = true\nis_debug = false\nenable_stripping = true\nthin_lto_enable_cache = false\ndcheck_always_on = false\nexclude_unwind_tables = true\nenable_iterator_debugging = false\ndisable_fieldtrial_testing_config = true\nenable_reporting = false\nenable_resource_allowlist_generation = false\nenable_profiling = false\nis_component_build = false\nsymbol_level = 0\nenable_nacl = false\noptimize_webui = true\nenable_webui_tab_strip = true\nis_clang = true\ntreat_warnings_as_errors = false\n# llvm_force_head_revision = true\nwin_enable_cfg_guards = true\nuse_lld = true\nv8_symbol_level = 0\nv8_enable_fast_torque = true\nv8_enable_builtins_optimization = true\nv8_enable_maglev = true\nv8_enable_turbofan = true\nv8_enable_wasm_simd256_revec = true\nuse_v8_context_snapshot = true\nblink_symbol_level = 0\nenable_precompiled_headers = false\nmedia_use_ffmpeg = true\nmedia_use_libvpx = true\nenable_hls_demuxer = true\nenable_discovery = false\nproprietary_codecs = true\nffmpeg_branding = \"Chrome\"\n# Set to false for Polly build\nclang_use_chrome_plugins = true\nenable_ffmpeg_video_decoders = true\nis_component_ffmpeg = false\nuse_webaudio_pffft = true\nenable_library_cdms = true\nenable_widevine = true\nbundle_widevine_cdm = true\n# enable_media_foundation_widevine_cdm = true\n# enable_cdm_host_verification = true\nenable_cdm_storage_id = true\nenable_widevine_cdm_host_verification = true\nenable_rlz = true\nignore_missing_widevine_signing_cert = true\nenable_media_drm_storage = true\nenable_hangout_services_extension = false\nrtc_use_h264 = true\nrtc_use_h265 = true\nrtc_include_ilbc = true\nrtc_build_examples = false\nrtc_enable_avx2 = true\nenable_vr = true\nenable_platform_hevc = true\nenable_hevc_parser_and_hw_decoder = true\nplatform_has_optional_hevc_support = true\nenable_platform_ac3_eac3_audio = true\nenable_platform_ac4_audio = false\nenable_platform_dolby_vision = true\nenable_platform_encrypted_dolby_vision = true\nenable_platform_mpeg_h_audio = true\nenable_platform_dts_audio = true\nenable_mse_mpeg2ts_stream_parser = true\nuse_text_section_splitting = true\nuse_thin_lto = true\nthin_lto_enable_optimizations = true\nenable_rust = true\nchrome_pgo_phase = 2\npgo_data_path = \"/home/alex/chromium/src/chrome/build/pgo_profiles/chrome-win64-6723-1733159130-b743c98d2d178c1219202e52c5e084d8ac2f6af5-d101f8bd9ceed464c1d066b8bffa18d791485d3e.profdata\"\n"
        },
        {
          "name": "win_scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}