{
  "metadata": {
    "timestamp": 1736566142781,
    "page": 148,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zeek/zeek",
      "stars": 6569,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 28.900390625,
          "content": "##################################################################################\n# Please note:                                                                   #\n#                                                                                #\n# After updating this file, please also update CI column of the support matrix   #\n# at https://github.com/zeek/zeek/wiki/Zeek-Operating-System-Support-Matrix      #\n##################################################################################\n\ncpus: &CPUS 4\nbtest_jobs: &BTEST_JOBS 4\nbtest_retries: &BTEST_RETRIES 2\nmemory: &MEMORY 16GB\n\nconfig: &CONFIG --build-type=release --disable-broker-tests --prefix=$CIRRUS_WORKING_DIR/install --ccache --enable-werror -D FETCHCONTENT_FULLY_DISCONNECTED:BOOL=ON\nno_spicy_config: &NO_SPICY_CONFIG --build-type=release --disable-broker-tests --disable-spicy --prefix=$CIRRUS_WORKING_DIR/install --ccache --enable-werror\nstatic_config: &STATIC_CONFIG --build-type=release --disable-broker-tests --enable-static-broker --enable-static-binpac --prefix=$CIRRUS_WORKING_DIR/install --ccache --enable-werror\nbinary_config: &BINARY_CONFIG --prefix=$CIRRUS_WORKING_DIR/install --libdir=$CIRRUS_WORKING_DIR/install/lib --binary-package --enable-static-broker --enable-static-binpac --disable-broker-tests --build-type=Release --ccache --enable-werror\nspicy_ssl_config: &SPICY_SSL_CONFIG --build-type=release --disable-broker-tests --enable-spicy-ssl --prefix=$CIRRUS_WORKING_DIR/install --ccache --enable-werror\nasan_sanitizer_config: &ASAN_SANITIZER_CONFIG --build-type=debug --disable-broker-tests --sanitizers=address --enable-fuzzers --enable-coverage --ccache --enable-werror\nubsan_sanitizer_config: &UBSAN_SANITIZER_CONFIG --build-type=debug --disable-broker-tests --sanitizers=undefined --enable-fuzzers --ccache --enable-werror\ntsan_sanitizer_config: &TSAN_SANITIZER_CONFIG --build-type=debug --disable-broker-tests --sanitizers=thread --enable-fuzzers --ccache --enable-werror\n\nresources_template: &RESOURCES_TEMPLATE\n  cpu: *CPUS\n  memory: *MEMORY\n  # For greediness, see https://medium.com/cirruslabs/introducing-greedy-container-instances-29aad06dc2b4\n  greedy: true\n\nmacos_environment: &MACOS_ENVIRONMENT\n  # https://medium.com/cirruslabs/new-macos-task-execution-architecture-for-cirrus-ci-604250627c94\n  # suggests we can go faster here:\n  env:\n    ZEEK_CI_CPUS: 12\n    ZEEK_CI_BTEST_JOBS: 12\n    # No permission to write to default location of /zeek\n    CIRRUS_WORKING_DIR: /tmp/zeek\n\nfreebsd_resources_template: &FREEBSD_RESOURCES_TEMPLATE\n  cpu: 8\n  memory: *MEMORY\n  # For greediness, see https://medium.com/cirruslabs/introducing-greedy-container-instances-29aad06dc2b4\n  greedy: true\n\nfreebsd_environment: &FREEBSD_ENVIRONMENT\n  env:\n    ZEEK_CI_CPUS: 8\n    ZEEK_CI_BTEST_JOBS: 8\n\nbuilds_only_if_template: &BUILDS_ONLY_IF_TEMPLATE\n  # Rules for skipping builds:\n  # - Do not run builds for anything that's cron triggered\n  # - Don't do darwin builds on zeek-security repo because they use up a ton of compute credits.\n  # - Always build PRs, but not if they come from dependabot\n  # - Always build master and release/* builds from the main repo\n  only_if: >\n    ( $CIRRUS_CRON == '' ) &&\n    ( ( $CIRRUS_PR != '' && $CIRRUS_BRANCH !=~ 'dependabot/.*' ) ||\n    ( ( $CIRRUS_REPO_NAME == 'zeek' || $CIRRUS_REPO_NAME == 'zeek-security' ) &&\n      (\n      $CIRRUS_BRANCH == 'master' ||\n      $CIRRUS_BRANCH =~ 'release/.*'\n      )\n    ) )\n\nskip_task_on_pr: &SKIP_TASK_ON_PR\n  # Skip this task on PRs if it does not have the fullci label,\n  # it continues to run for direct pushes to master/release.\n  skip: >\n    ! ( $CIRRUS_PR == '' || $CIRRUS_PR_LABELS =~ '.*fullci.*' )\n\nzam_skip_task_on_pr: &ZAM_SKIP_TASK_ON_PR\n  # Skip this task on PRs unless it has the `fullci` or `zamci` label\n  # or files in src/script_opt/** were modified.\n  # It continues to run for direct pushes to master/release, as\n  # CIRRUS_PR will be empty.\n  skip: >\n    ! ( $CIRRUS_PR == '' || $CIRRUS_PR_LABELS =~ '.*fullci.*' || $CIRRUS_PR_LABELS =~ '.*zamci.*' || changesInclude('src/script_opt/**') )\n\nbenchmark_only_if_template: &BENCHMARK_ONLY_IF_TEMPLATE\n  # only_if condition for cron-triggered benchmarking tests.\n  # These currently do not run for release/.*\n  only_if: >\n    ( $CIRRUS_REPO_NAME == 'zeek' || $CIRRUS_REPO_NAME == 'zeek-security' ) &&\n    ( $CIRRUS_CRON == 'benchmark-nightly' ||\n      $CIRRUS_PR_LABELS =~ '.*fullci.*' ||\n      $CIRRUS_PR_LABELS =~ '.*benchmark.*' )\n\nci_template: &CI_TEMPLATE\n  << : *BUILDS_ONLY_IF_TEMPLATE\n\n  # Default timeout is 60 minutes, Cirrus hard limit is 120 minutes for free\n  # tasks, so may as well ask for full time.\n  timeout_in: 120m\n\n  sync_submodules_script: git submodule update --recursive --init\n\n  get_external_pcaps_cache:\n    folder: testing/external/zeek-testing-traces\n    fingerprint_script: echo zeek-testing-traces\n    populate_script: ./ci/init-external-repos.sh\n    reupload_on_changes: true\n\n  always:\n    ccache_cache:\n      folder: /tmp/ccache\n      fingerprint_script: echo ccache-$ZEEK_CCACHE_EPOCH-$CIRRUS_TASK_NAME-$CIRRUS_OS\n      reupload_on_changes: true\n\n  init_external_repos_script: ./ci/init-external-repos.sh\n\n  pre_build_script: ./ci/pre-build.sh\n  build_script: ./ci/build.sh\n  test_script: ./ci/test.sh\n\n  on_failure:\n    upload_btest_tmp_dir_artifacts:\n      path: \"testing/**/tmp.tar.gz\"\n  always:\n    upload_btest_xml_results_artifacts:\n      path: \"testing/**/btest-results.xml\"\n      type: text/xml\n      format: junit\n    upload_btest_html_results_artifacts:\n      path: \"testing/**/btest-results.html\"\n      type: text/html\n    cache_statistics_script:\n      ccache --show-stats\n    ccache_prune_script:\n      # Evit some of the cached build artifacts not used in this build.\n      CCACHE_MAXSIZE=${ZEEK_CCACHE_PRUNE_SIZE} ccache -c\n\nenv:\n  CIRRUS_WORKING_DIR: /zeek\n  ZEEK_CI_CPUS: *CPUS\n  ZEEK_CI_BTEST_JOBS: *BTEST_JOBS\n  ZEEK_CI_BTEST_RETRIES: *BTEST_RETRIES\n  ZEEK_CI_CONFIGURE_FLAGS: *CONFIG\n  # This is a single-purpose, read-only GitHub deploy key (SSH private key) for\n  # the zeek-testing-private repository.\n  ZEEK_TESTING_PRIVATE_SSH_KEY: ENCRYPTED[!dbdba93df9c166f926480cebff52dab303589257b3b3ee53aa392021aff2881ed9aafefef26aa9a1b71a49d663d1361c!]\n\n  # This is the key used to create HMAC auth keys for the benchmark script. This\n  # was generated by creating a new key using openssl, and then running sha256\n  # on it.\n  ZEEK_BENCHMARK_HMAC_KEY: ENCRYPTED[!468e2f3ea05543c4d24eb6c776c0c10695b24faec3a11d22c8da99e1df0d5b56da5b705887b1c038962a7db3eae0b9a4!]\n\n  # This is the https endpoint host and port used for benchmarking. It's kept\n  # encrypted as a security measure to avoid leaking the host's information.\n  ZEEK_BENCHMARK_HOST: ENCRYPTED[!bcda5b49af0825ee5581b27f6a86106a15605a434c9c52827eb21eade8210e668af0456d14fffbe76c098cd2d30f5d48!]\n  ZEEK_BENCHMARK_PORT: ENCRYPTED[!793057d6d8a5d1ebb5e0392786e53cf81a2ff5adb1f5386b6c8914d2bf0c4d2ead09e8f3c08c28c91a17380a5db7e2fa!]\n\n  # The repo token used for uploading data to Coveralls.io\n  ZEEK_COVERALLS_REPO_TOKEN: ENCRYPTED[7ffd1e041f848f02b62f5abc7fda8a5a8a1561fbb2b46d88cefb67c74408ddeef6ea6f3b279c7953ca14ae9b4d050e2d]\n\n  CCACHE_BASEDIR: $CIRRUS_WORKING_DIR\n  CCACHE_DIR: /tmp/ccache\n  CCACHE_COMPRESS: 1\n  # Ensure reasonable ccache upper limits to avoid spending\n  # too much time on pulling and pushing the cache folder.\n  # However, cache eviction with Cirrus CI is currently random\n  # due to mtime not being preserved through the cache instruction:\n  # https://github.com/cirruslabs/cirrus-ci-agent/issues/277\n  CCACHE_MAXSIZE: 1000M\n  CCACHE_MAXFILES: 20000\n\n  # Size to use when manually pruning the cache below. This size should be\n  # roughly `CCACHE_MAXSIZE - <build_size>`. This works around\n  # https://github.com/cirruslabs/cirrus-ci-agent/issues/277.\n  ZEEK_CCACHE_PRUNE_SIZE: 700M\n\n  # Increase this to flush the ccache cache. Mainly useful until there's\n  # a solution for the mtime pruning above.\n  ZEEK_CCACHE_EPOCH: 2\n\n# Linux EOL timelines: https://linuxlifecycle.com/\n# Fedora (~13 months): https://fedoraproject.org/wiki/Fedora_Release_Life_Cycle\n\nfedora41_task:\n  container:\n    # Fedora 41 EOL: Around Nov 2025\n    dockerfile: ci/fedora-41/Dockerfile\n    << : *RESOURCES_TEMPLATE\n  << : *CI_TEMPLATE\n\nfedora40_task:\n  container:\n    # Fedora 40 EOL: Around May 2025\n    dockerfile: ci/fedora-40/Dockerfile\n    << : *RESOURCES_TEMPLATE\n  << : *CI_TEMPLATE\n  << : *SKIP_TASK_ON_PR\n\ncentosstream9_task:\n  container:\n    # Stream 9 EOL: Around Dec 2027\n    dockerfile: ci/centos-stream-9/Dockerfile\n    << : *RESOURCES_TEMPLATE\n  << : *CI_TEMPLATE\n\ndebian12_task:\n  container:\n    # Debian 12 (bookworm) EOL: TBD\n    dockerfile: ci/debian-12/Dockerfile\n    << : *RESOURCES_TEMPLATE\n  << : *CI_TEMPLATE\n\narm_debian12_task:\n  arm_container:\n    # Debian 12 (bookworm) EOL: TBD\n    dockerfile: ci/debian-12/Dockerfile\n    << : *RESOURCES_TEMPLATE\n  << : *CI_TEMPLATE\n  env:\n    ZEEK_CI_CONFIGURE_FLAGS: *NO_SPICY_CONFIG\n\ndebian12_static_task:\n  container:\n    # Just use a recent/common distro to run a static compile test.\n    # Debian 12 (bookworm) EOL: TBD\n    dockerfile: ci/debian-12/Dockerfile\n    << : *RESOURCES_TEMPLATE\n  << : *CI_TEMPLATE\n  << : *SKIP_TASK_ON_PR\n  env:\n    ZEEK_CI_CONFIGURE_FLAGS: *STATIC_CONFIG\n\ndebian12_binary_task:\n  container:\n    # Just use a recent/common distro to run binary mode compile test.\n    # As of 2024-03, the used configure flags are equivalent to the flags\n    # that we use to create binary packages.\n    # Just use a recent/common distro to run a static compile test.\n    # Debian 12 (bookworm) EOL: TBD\n    dockerfile: ci/debian-12/Dockerfile\n    << : *RESOURCES_TEMPLATE\n  << : *CI_TEMPLATE\n  << : *SKIP_TASK_ON_PR\n  env:\n    ZEEK_CI_CONFIGURE_FLAGS: *BINARY_CONFIG\n\ndebian11_task:\n  container:\n    # Debian 11 EOL: June 2026\n    dockerfile: ci/debian-11/Dockerfile\n    << : *RESOURCES_TEMPLATE\n  << : *CI_TEMPLATE\n  << : *SKIP_TASK_ON_PR\n\nopensuse_leap_15_5_task:\n  container:\n    # Opensuse Leap 15.5 EOL: ~Dec 2024\n    dockerfile: ci/opensuse-leap-15.5/Dockerfile\n    << : *RESOURCES_TEMPLATE\n  << : *CI_TEMPLATE\n  << : *SKIP_TASK_ON_PR\n\nopensuse_leap_15_6_task:\n  container:\n    # Opensuse Leap 15.6 EOL: ~Dec 2025\n    dockerfile: ci/opensuse-leap-15.6/Dockerfile\n    << : *RESOURCES_TEMPLATE\n  << : *CI_TEMPLATE\n\nopensuse_tumbleweed_task:\n  container:\n    # Opensuse Tumbleweed has no EOL\n    dockerfile: ci/opensuse-tumbleweed/Dockerfile\n    << : *RESOURCES_TEMPLATE\n  prepare_script: ./ci/opensuse-tumbleweed/prepare.sh\n  << : *CI_TEMPLATE\n#  << : *SKIP_TASK_ON_PR\n\nubuntu24_10_task:\n  container:\n    # Ubuntu 24.10 EOL: 2025-07-30\n    dockerfile: ci/ubuntu-24.10/Dockerfile\n    << : *RESOURCES_TEMPLATE\n  << : *CI_TEMPLATE\n  << : *SKIP_TASK_ON_PR\n\nubuntu24_task:\n  container:\n    # Ubuntu 24.04 EOL: Jun 2029\n    dockerfile: ci/ubuntu-24.04/Dockerfile\n    << : *RESOURCES_TEMPLATE\n  << : *CI_TEMPLATE\n\n# Same as above, but using Clang and libc++\nubuntu24_clang_libcpp_task:\n  container:\n    # Ubuntu 24.04 EOL: Jun 2029\n    dockerfile: ci/ubuntu-24.04/Dockerfile\n    << : *RESOURCES_TEMPLATE\n  << : *CI_TEMPLATE\n  << : *SKIP_TASK_ON_PR\n  env:\n    CC: clang-18\n    CXX: clang++-18\n    CXXFLAGS: -stdlib=libc++\n\nubuntu22_task:\n  container:\n    # Ubuntu 22.04 EOL: June 2027\n    dockerfile: ci/ubuntu-22.04/Dockerfile\n    << : *RESOURCES_TEMPLATE\n  << : *CI_TEMPLATE\n  env:\n    ZEEK_CI_CREATE_ARTIFACT: 1\n  upload_binary_artifacts:\n    path: build.tgz\n  benchmark_script: ./ci/benchmark.sh\n  # Run on PRs, merges to master and release/.* and benchmark-nightly cron.\n  only_if: >\n    ( $CIRRUS_PR != '' && $CIRRUS_BRANCH !=~ 'dependabot/.*' ) ||\n    ( ( $CIRRUS_REPO_NAME == 'zeek' || $CIRRUS_REPO_NAME == 'zeek-security' ) &&\n        $CIRRUS_BRANCH == 'master' ||\n        $CIRRUS_BRANCH =~ 'release/.*' ||\n        $CIRRUS_CRON == 'benchmark-nightly' )\n\n# Also enable Spicy SSL for this\nubuntu22_spicy_task:\n  container:\n    # Ubuntu 22.04 EOL: April 2027\n    dockerfile: ci/ubuntu-22.04/Dockerfile\n    << : *RESOURCES_TEMPLATE\n  << : *CI_TEMPLATE\n  env:\n    ZEEK_CI_CREATE_ARTIFACT: 1\n    ZEEK_CI_CONFIGURE_FLAGS: *SPICY_SSL_CONFIG\n  spicy_install_analyzers_script: ./ci/spicy-install-analyzers.sh\n  upload_binary_artifacts:\n    path: build.tgz\n  benchmark_script: ./ci/benchmark.sh\n  << : *BENCHMARK_ONLY_IF_TEMPLATE\n\nubuntu22_spicy_head_task:\n  container:\n    # Ubuntu 22.04 EOL: April 2027\n    dockerfile: ci/ubuntu-22.04/Dockerfile\n    << : *RESOURCES_TEMPLATE\n  << : *CI_TEMPLATE\n  env:\n    ZEEK_CI_CREATE_ARTIFACT: 1\n    # Pull auxil/spicy to the latest head version. May or may not build.\n    ZEEK_CI_PREBUILD_COMMAND: 'cd auxil/spicy && git fetch && git reset --hard origin/main && git submodule update --init --recursive'\n  spicy_install_analyzers_script: ./ci/spicy-install-analyzers.sh\n  upload_binary_artifacts:\n    path: build.tgz\n  benchmark_script: ./ci/benchmark.sh\n  # Don't run this job on release branches. It tests against spicy HEAD, which\n  # will frequently require other fixes that won't be in a release branch.\n  skip: $CIRRUS_BRANCH =~ 'release/.*'\n  << : *BENCHMARK_ONLY_IF_TEMPLATE\n\nubuntu20_task:\n  container:\n    # Ubuntu 20.04 EOL: April 2025\n    dockerfile: ci/ubuntu-20.04/Dockerfile\n    << : *RESOURCES_TEMPLATE\n  << : *CI_TEMPLATE\n  << : *SKIP_TASK_ON_PR\n\nalpine_task:\n  container:\n    # Alpine releases typically happen every 6 months w/ support for 2 years.\n    # The Dockerfile simply tracks latest Alpine release and shouldn't\n    # generally need updating based on particular Alpine release timelines.\n    dockerfile: ci/alpine/Dockerfile\n    << : *RESOURCES_TEMPLATE\n  << : *CI_TEMPLATE\n\n# Cirrus only supports the following macos runner currently, selecting\n# anything else automatically upgrades to this one.\n#\n#    ghcr.io/cirruslabs/macos-runner:sonoma\n#\n# See also: https://cirrus-ci.org/guide/macOS/\nmacos_sonoma_task:\n  macos_instance:\n    image: ghcr.io/cirruslabs/macos-runner:sonoma\n  prepare_script: ./ci/macos/prepare.sh\n  << : *CI_TEMPLATE\n  << : *MACOS_ENVIRONMENT\n\n# FreeBSD EOL timelines: https://www.freebsd.org/security/#sup\nfreebsd14_task:\n  freebsd_instance:\n    # FreeBSD 14 EOL: Nov 30 2028\n    image_family: freebsd-14-1\n    << : *FREEBSD_RESOURCES_TEMPLATE\n\n  prepare_script: ./ci/freebsd/prepare.sh\n  << : *CI_TEMPLATE\n  << : *FREEBSD_ENVIRONMENT\n\nfreebsd13_task:\n  freebsd_instance:\n    # FreeBSD 13 EOL: January 31, 2026\n    image_family: freebsd-13-4\n    << : *FREEBSD_RESOURCES_TEMPLATE\n\n  prepare_script: ./ci/freebsd/prepare.sh\n  << : *CI_TEMPLATE\n  << : *SKIP_TASK_ON_PR\n  << : *FREEBSD_ENVIRONMENT\n\nasan_sanitizer_task:\n  container:\n    # Just uses a recent/common distro to run memory error/leak checks.\n    dockerfile: ci/ubuntu-24.04/Dockerfile\n    << : *RESOURCES_TEMPLATE\n\n  << : *CI_TEMPLATE\n  test_fuzzers_script: ./ci/test-fuzzers.sh\n  coverage_script: ./ci/upload-coverage.sh\n  env:\n    CXXFLAGS: -DZEEK_DICT_DEBUG\n    ZEEK_CI_CONFIGURE_FLAGS: *ASAN_SANITIZER_CONFIG\n    ASAN_OPTIONS: detect_leaks=1:detect_odr_violation=0\n    # Use absolute paths for coverage files.\n    CCACHE_BASEDIR:\n\n# ASAN task executing btests with zam alternative.\nasan_sanitizer_zam_task:\n  container:\n    dockerfile: ci/ubuntu-24.04/Dockerfile\n    << : *RESOURCES_TEMPLATE\n\n  << : *CI_TEMPLATE\n  env:\n    ZEEK_CI_CONFIGURE_FLAGS: *ASAN_SANITIZER_CONFIG\n    ASAN_OPTIONS: detect_leaks=1:detect_odr_violation=0\n    ZEEK_CI_SKIP_UNIT_TESTS: 1\n    ZEEK_CI_SKIP_EXTERNAL_BTESTS: 1\n    ZEEK_CI_BTEST_EXTRA_ARGS: -a zam\n  << : *ZAM_SKIP_TASK_ON_PR\n\nubsan_sanitizer_task:\n  container:\n    # Just uses a recent/common distro to run undefined behavior checks.\n    dockerfile: ci/ubuntu-24.04/Dockerfile\n    << : *RESOURCES_TEMPLATE\n\n  << : *CI_TEMPLATE\n  << : *SKIP_TASK_ON_PR\n  test_fuzzers_script: ./ci/test-fuzzers.sh\n  env:\n    CC: clang-18\n    CXX: clang++-18\n    CXXFLAGS: -DZEEK_DICT_DEBUG\n    ZEEK_CI_CONFIGURE_FLAGS: *UBSAN_SANITIZER_CONFIG\n    ZEEK_TAILORED_UB_CHECKS: 1\n    UBSAN_OPTIONS: print_stacktrace=1\n\nubsan_sanitizer_zam_task:\n  container:\n    dockerfile: ci/ubuntu-24.04/Dockerfile\n    << : *RESOURCES_TEMPLATE\n\n  << : *CI_TEMPLATE\n  env:\n    CC: clang-18\n    CXX: clang++-18\n    ZEEK_CI_CONFIGURE_FLAGS: *UBSAN_SANITIZER_CONFIG\n    ZEEK_TAILORED_UB_CHECKS: 1\n    UBSAN_OPTIONS: print_stacktrace=1\n    ZEEK_CI_SKIP_UNIT_TESTS: 1\n    ZEEK_CI_SKIP_EXTERNAL_BTESTS: 1\n    ZEEK_CI_BTEST_EXTRA_ARGS: -a zam\n  << : *ZAM_SKIP_TASK_ON_PR\n\ntsan_sanitizer_task:\n  container:\n    # Just uses a recent/common distro to run memory error/leak checks.\n    dockerfile: ci/ubuntu-24.04/Dockerfile\n    << : *RESOURCES_TEMPLATE\n\n  << : *CI_TEMPLATE\n  << : *SKIP_TASK_ON_PR\n  env:\n    CC: clang-18\n    CXX: clang++-18\n    ZEEK_CI_CONFIGURE_FLAGS: *TSAN_SANITIZER_CONFIG\n    ZEEK_CI_DISABLE_SCRIPT_PROFILING: 1\n    # If this is defined directly in the environment, configure fails to find\n    # OpenSSL. Instead we define it with a different name and then give it\n    # the correct name in the testing scripts.\n    ZEEK_TSAN_OPTIONS: suppressions=/zeek/ci/tsan_suppressions.txt\n\nwindows_task:\n  # 2 hour timeout just for potential of building Docker image taking a while\n  timeout_in: 120m\n  windows_container:\n    dockerfile: ci/windows/Dockerfile\n    os_version: 2019\n    cpu: 8\n    # Not allowed to request less than 8GB for an 8 CPU Windows VM.\n    memory: 8GB\n  sync_submodules_script: git submodule update --recursive --init\n  prepare_script: ci/windows/prepare.cmd\n  build_script: ci/windows/build.cmd\n  test_script: ci/windows/test.cmd\n  env:\n    ZEEK_CI_CPUS: 8\n    # Give verbose error output on a test failure.\n    CTEST_OUTPUT_ON_FAILURE: 1\n  << : *BUILDS_ONLY_IF_TEMPLATE\n\n\n# Container images\n#\n# Use two separate tasks to build images for amd64 and arm64.\n# Use use a third docker_builder task to collect the produced images\n# (through CIRRUS_HTTP_CACHE) and push them to the registry as\n# zeek/zeek:v1.2.3-<arch> or zeek/zeek-dev:latest-<arch> tags. Once\n# pushed, create a manifest for zeek/zeek:v1.2.3 or zeek/zeek-dev:latest\n# that includes the just pushed architecture specific images.\n#\n# We've previously tried using docker buildx with QEMU using GitHub\n# actions. The emulated arm64 build on the amd64 VMs they provide took\n# more than 6 hours and timed out. Using separate builders on Cirrus allows\n# us build natively and much faster at the expense of the docker manifest\n# wrangling (and not being able to use the nice GitHub actions).\ndocker_build_template: &DOCKER_BUILD_TEMPLATE\n  cpu: *CPUS\n  memory: *MEMORY\n  set_image_tag_script: echo \"IMAGE_TAG=zeek/zeek-multiarch:${CIRRUS_ARCH}\" >> $CIRRUS_ENV\n  only_if: >\n    ( $CIRRUS_CRON == '' ) &&\n    ( ( $CIRRUS_PR != '' && $CIRRUS_BRANCH !=~ 'dependabot/.*' ) ||\n        $CIRRUS_BRANCH == 'master' || $CIRRUS_BRANCH =~ 'release/.*' || $CIRRUS_TAG != '' )\n\n  env:\n    ZEEK_CONFIGURE_FLAGS: --ccache --generator=Ninja --build-type=Release --disable-btest-pcaps --disable-cpp-tests --disable-broker-tests\n    CIRRUS_LOG_TIMESTAMP: true\n    BUILDER_IMAGE_CACHE_DIR: /tmp/builder-image-cache\n    ZEEK_IMAGE_CACHE_DIR: /tmp/zeek-image-cache-${CIRRUS_ARCH}\n    BUILDKIT_PROGRESS: plain\n\n  always:\n    ccache_cache:\n      folder: /tmp/ccache\n      fingerprint_script: echo ccache-$ZEEK_CCACHE_EPOCH-$CIRRUS_TASK_NAME-$CIRRUS_OS\n      reupload_on_changes: true\n\n    builder_image_cache:\n      folder: /tmp/builder-image-cache\n      fingerprint_script: echo builder-image-cache-$CIRRUS_TASK_NAME-$CIRRUS_OS\n      reupload_on_changes: true\n\n    zeek_image_cache:\n      folder: /tmp/zeek-image-cache-${CIRRUS_ARCH}\n      fingerprint_key: zeek-image-cache-${CIRRUS_BUILD_ID}-${CIRRUS_ARCH}\n      reupload_on_changes: true\n\n  sync_submodules_script: git submodule update --recursive --init --recommend-shallow -j $(nproc)\n\n  prepare_builder_script:\n    - set -x\n    - mkdir -p ${BUILDER_IMAGE_CACHE_DIR} ${ZEEK_IMAGE_CACHE_DIR}\n    - if [ -f ${BUILDER_IMAGE_CACHE_DIR}/builder.zst ]; then zstd -d < ${BUILDER_IMAGE_CACHE_DIR}/builder.zst | docker load; fi\n    - if [ -f ${BUILDER_IMAGE_CACHE_DIR}/final.zst ]; then zstd -d < ${BUILDER_IMAGE_CACHE_DIR}/final.zst | docker load; fi\n    - cd docker && docker build --cache-from zeek-builder:latest -t zeek-builder:latest -f builder.Dockerfile .\n    - docker save zeek-builder:latest | zstd > ${BUILDER_IMAGE_CACHE_DIR}/builder.zst\n  build_zeek_script: |\n    set -x\n    docker run --name zeek-builder-container \\\n        -e CCACHE_MAXSIZE=$CCACHE_MAXSIZE \\\n        -e CCACHE_MAXFILES=$CCACHE_MAXFILES \\\n        -e CCACHE_DIR=/tmp/ccache \\\n        -e CCACHE_NOSTATS=1 \\\n        -v $(pwd):/src/zeek -v/tmp/ccache:/tmp/ccache -w /src/zeek zeek-builder:latest \\\n        bash -c \"./configure $ZEEK_CONFIGURE_FLAGS && ninja -C build install\"\n\n    # The \"zeek-build\" tag is used within final.Dockerfile using COPY --from=...\n    docker commit zeek-builder-container zeek-build\n  build_final_script:\n    - cd docker && docker build --cache-from ${IMAGE_TAG} -t ${IMAGE_TAG} -f final.Dockerfile .\n    - docker save ${IMAGE_TAG} | zstd > ${ZEEK_IMAGE_CACHE_DIR}/final.zst\n  test_script:\n    - docker tag ${IMAGE_TAG} zeek:latest\n    - make -C docker/btest\n\narm64_container_image_docker_builder:\n  env:\n    CIRRUS_ARCH: arm64\n  << : *DOCKER_BUILD_TEMPLATE\n  << : *SKIP_TASK_ON_PR\n\namd64_container_image_docker_builder:\n  env:\n    CIRRUS_ARCH: amd64\n  << : *DOCKER_BUILD_TEMPLATE\n  << : *SKIP_TASK_ON_PR\n\ncontainer_image_manifest_docker_builder:\n  cpu: 1\n  # Push master builds to zeek/zeek-dev, or tagged release branches to zeek/zeek\n  only_if: >\n    ( $CIRRUS_CRON == '' ) &&\n    ( $CIRRUS_REPO_FULL_NAME == 'zeek/zeek' &&\n      ( $CIRRUS_BRANCH == 'master' ||\n        $CIRRUS_TAG =~ 'v[0-9]+\\.[0-9]+\\.[0-9]+(-rc[0-9]+)?$' ) )\n  env:\n    DOCKER_USERNAME: ENCRYPTED[!505b3dee552a395730a7e79e6aab280ffbe1b84ec62ae7616774dfefe104e34f896d2e20ce3ad701f338987c13c33533!]\n    DOCKER_PASSWORD: ENCRYPTED[!6c4b2f6f0e5379ef1091719cc5d2d74c90cfd2665ac786942033d6d924597ffb95dbbc1df45a30cc9ddeec76c07ac620!]\n    AWS_ECR_ACCESS_KEY_ID: ENCRYPTED[!eff52f6442e1bc78bce5b15a23546344df41bf519f6201924cb70c7af12db23f442c0e5f2b3687c2d856ceb11fcb8c49!]\n    AWS_ECR_SECRET_ACCESS_KEY: ENCRYPTED[!748bc302dd196140a5fa8e89c9efd148882dc846d4e723787d2de152eb136fa98e8dea7e6d2d6779d94f72dd3c088228!]\n  login_script: |\n    docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD\n    AWS_ACCESS_KEY_ID=$AWS_ECR_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_ECR_SECRET_ACCESS_KEY aws ecr-public get-login-password --region us-east-1 | \\\n        docker login --username AWS --password-stdin public.ecr.aws\n  set_image_tag_script: |\n    # If we have a CIRRUS_TAG, use the value in VERSION to push the multiarch\n    # images, otherwise use latest. Basically we push the arch images as\n    #    zeek/zeek:1.2.3-<amd64|arm64> or\n    #    zeek/zeek-dev:latest-<amd64|arm64>\n    # and using these, create a manifest of the form zeek/zeek:${CIRRUS_TAG}\n    # for tags, or zeek/zeek-dev:latest for pushes to master.\n    set -x\n    if [ -n \"${CIRRUS_TAG}\" ]; then\n      echo \"IMAGE_NAME=zeek\"  >> $CIRRUS_ENV\n      echo \"IMAGE_TAG=$(cat VERSION)\" >> $CIRRUS_ENV\n      if [ \"${CIRRUS_TAG}\" != \"v$(cat VERSION)\" ]; then\n        echo \"CIRRUS_TAG '${CIRRUS_TAG}' and VERSION '$(cat VERSION)' inconsistent!\" >&2\n        exit 1\n      fi\n    elif [ \"${CIRRUS_BRANCH}\" = \"master\" ]; then\n      echo \"IMAGE_NAME=zeek-dev\"  >> $CIRRUS_ENV\n      echo \"IMAGE_TAG=latest\" >> $CIRRUS_ENV\n    # Hunk for testing and pushing into zeek/zeek-next. Make sure\n    # to allow the branch in the above only_if attribute of this task.\n    # elif [ \"${CIRRUS_BRANCH}\" = \"topic/awelzel/2674-arm64-containers-on-cirrus\" ]; then\n    #  echo \"IMAGE_NAME=zeek-next\"  >> $CIRRUS_ENV\n    #  echo \"IMAGE_TAG=latest\" >> $CIRRUS_ENV\n    else\n      echo \"Bad tag/branch for container_image_manifest\"\n      env\n      exit 1\n    fi\n\n  set_additional_manifest_tags_script: |\n    set -x\n    if [ -z \"${CIRRUS_TAG}\" ]; then\n      exit 0\n    fi\n\n    # Populate the checkout with all the repository information we need\n    # to determine what the current feature and lts versions are.\n    git fetch --tags origin \\\n        '+refs/heads/release/*:refs/remotes/origin/release/*' \\\n        '+refs/heads/master:refs/remotes/origin/master'\n\n    ./ci/container-images-addl-tags.sh \"${CIRRUS_TAG}\" | tee -a $CIRRUS_ENV\n\n  # These should've been populated by the previous jobs\n  zeek_image_arm64_cache:\n    folder: /tmp/zeek-image-cache-arm64\n    fingerprint_key: zeek-image-cache-${CIRRUS_BUILD_ID}-arm64\n\n  zeek_image_amd64_cache:\n    folder: /tmp/zeek-image-cache-amd64\n    fingerprint_key: zeek-image-cache-${CIRRUS_BUILD_ID}-amd64\n\n  load_image_script:\n    - set -x;\n    - ls -lha /tmp/zeek-image-cache-*/\n    - zstd -d < /tmp/zeek-image-cache-arm64/final.zst | docker load\n    - zstd -d < /tmp/zeek-image-cache-amd64/final.zst | docker load\n  tag_push_script:\n    # Tag images and push to Docker Hub and AWS ECR \"zeek\" account\n    - ./ci/container-images-tag-and-push.sh\n    - REGISTRY_PREFIX=public.ecr.aws/ ./ci/container-images-tag-and-push.sh\n  depends_on:\n    - arm64_container_image\n    - amd64_container_image\n\n# Once we've published new images in container_image_manifest, remove any untagged\n# images from the public ECR repository to stay within free-tier bounds.\npublic_ecr_cleanup_docker_builder:\n  cpu: 1\n  only_if: >\n    $CIRRUS_CRON == '' && $CIRRUS_REPO_FULL_NAME == 'zeek/zeek' && $CIRRUS_BRANCH == 'master'\n  env:\n    AWS_ACCESS_KEY_ID: ENCRYPTED[!eff52f6442e1bc78bce5b15a23546344df41bf519f6201924cb70c7af12db23f442c0e5f2b3687c2d856ceb11fcb8c49!]\n    AWS_SECRET_ACCESS_KEY: ENCRYPTED[!748bc302dd196140a5fa8e89c9efd148882dc846d4e723787d2de152eb136fa98e8dea7e6d2d6779d94f72dd3c088228!]\n    AWS_REGION: us-east-1\n  cleanup_script:\n    - ./ci/public-ecr-cleanup.sh\n  depends_on:\n    - container_image_manifest\n\ncluster_testing_docker_builder:\n  cpu: *CPUS\n  memory: *MEMORY\n  only_if: >\n    ( $CIRRUS_CRON == '' ) &&\n    ( ( $CIRRUS_PR != '' && $CIRRUS_BRANCH !=~ 'dependabot/.*' ) ||\n        $CIRRUS_BRANCH == 'master' || $CIRRUS_BRANCH =~ 'release/.*' || $CIRRUS_TAG != '' )\n  env:\n    CIRRUS_LOG_TIMESTAMP: true\n  install_deps_script:\n    # The cluster tests depend on jq and docker_builder doesn't have that :-(\n    - apt-get -q update && apt-get install -y --no-install-recommends jq\n  sync_btest_script: git submodule update --init ./auxil/btest/\n  checkout_script:\n    - set -x; cd testing/external/ && git clone https://github.com/zeek/zeek-testing-cluster.git && make checkout-repos\n  zeek_image_amd64_cache:\n    folder: /tmp/zeek-image-cache-amd64\n    fingerprint_key: zeek-image-cache-${CIRRUS_BUILD_ID}-amd64\n  load_image_script:\n    - zstd -d < /tmp/zeek-image-cache-amd64/final.zst | docker load\n    - docker tag zeek/zeek-multiarch:amd64 zeektest:latest\n  test_script:\n    # Invoke btest directly here. This mirrors ci/test.sh, ensures we don't\n    # accidentally build a Docker image, and enables console-level output:\n    - cd testing/external/zeek-testing-cluster && ../../../auxil/btest/btest -A -d -b -j ${ZEEK_CI_BTEST_JOBS}\n  on_failure:\n    upload_cluster_testing_artifacts:\n      path: \"testing/external/zeek-testing-cluster/.tmp/**\"\n  depends_on:\n    - amd64_container_image\n  << : *SKIP_TASK_ON_PR\n\n\n# Test zeekctl upon master and release pushes and also when\n# a PR has a zeekctlci or fullci label.\n#\n# Also triggers on CIRRUS_CRON == 'zeekctl-nightly' if that is configured\n# through the Cirrus Web UI.\nzeekctl_debian11_task:\n  cpu: *CPUS\n  memory: *MEMORY\n  only_if: >\n    ( $CIRRUS_CRON == 'zeekctl-nightly' ) ||\n    ( $CIRRUS_PR != '' && $CIRRUS_PR_LABELS =~ '.*(zeekctlci|fullci).*' ) ||\n    ( $CIRRUS_REPO_NAME == 'zeek' && (\n        $CIRRUS_BRANCH == 'master' ||\n        $CIRRUS_BRANCH =~ 'release/.*' )\n    )\n  container:\n    # Debian 11 EOL: June 2026\n    dockerfile: ci/debian-11/Dockerfile\n    << : *RESOURCES_TEMPLATE\n  sync_submodules_script: git submodule update --recursive --init\n  always:\n    ccache_cache:\n      folder: /tmp/ccache\n      fingerprint_script: echo zeekctl-ccache-$ZEEK_CCACHE_EPOCH-$CIRRUS_TASK_NAME-$CIRRUS_OS\n      reupload_on_changes: true\n  install_iproute2_script:\n    # No iproute2 in default Zeek build container, but zeekctl tests need it.\n    - apt-get update && apt-get install -y --no-install-recommends iproute2\n  build_script:\n    - cd auxil/zeekctl/testing && ./Scripts/build-zeek\n  test_script:\n    - cd auxil/zeekctl/testing && ../../btest/btest -A -d -j ${BTEST_JOBS}\n  on_failure:\n    upload_zeekctl_testing_artifacts:\n      path: \"auxil/zeekctl/testing/.tmp/**\"\n\n# Test building Zeek with builtin plugins available in\n# testing/builtin-plugins/Files/\ninclude_plugins_debian11_task:\n  cpu: *CPUS\n  memory: *MEMORY\n  container:\n    # Debian 11 EOL: June 2026\n    dockerfile: ci/debian-11/Dockerfile\n    << : *RESOURCES_TEMPLATE\n  sync_submodules_script: git submodule update --recursive --init\n  always:\n    ccache_cache:\n      folder: /tmp/ccache\n      fingerprint_script: echo builtin-plugins-ccache-$ZEEK_CCACHE_EPOCH-$CIRRUS_TASK_NAME-$CIRRUS_OS\n      reupload_on_changes: true\n  build_script: ZEEK_CI_CONFIGURE_FLAGS=\"${ZEEK_CI_CONFIGURE_FLAGS} --include-plugins='/zeek/testing/builtin-plugins/Files/protocol-plugin;/zeek/testing/builtin-plugins/Files/py-lib-plugin;/zeek/testing/builtin-plugins/Files/zeek-version-plugin'\" ./ci/build.sh\n  test_script:\n    - cd testing/builtin-plugins && ../../auxil/btest/btest -d -b -j ${ZEEK_CI_BTEST_JOBS}\n  on_failure:\n    upload_include_plugins_testing_artifacts:\n      path: \"testing/builtin-plugins/.tmp/**\"\n  << : *BUILDS_ONLY_IF_TEMPLATE\n  << : *SKIP_TASK_ON_PR\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 4.1220703125,
          "content": "# See the file \"COPYING\" in the main distribution directory for copyright.\n\n---\nLanguage:        Cpp\nAccessModifierOffset: -4\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Right\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: true\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  AfterExternBlock: false\n  BeforeCatch:     false\n  BeforeElse:      true\n  IndentBraces:    false\n  SplitEmptyFunction: false\n  SplitEmptyRecord: false\n  SplitEmptyNamespace: false\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Custom\nBreakBeforeInheritanceComma: false\nBreakInheritanceList: BeforeColon\nBreakBeforeTernaryOperators: false\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeColon\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     120\nCommentPragmas:  'NOLINT'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeBlocks: Regroup\n\n# Include categories go like this:\n# 0: reserved, since this automatically is the primary header for any .cc file\n# 1: zeek-config.h\n# 2: any c-style header\n# 3: any c++-style header\n# 4: any header that starts with \"zeek/\"\n# 5: everything else, which should catch any of the auto-generated code from the\n#    build directory as well\n# 6: third party doctest header\n#\n# Sections 0-1 and 2-3 get grouped together in their respective blocks\nIncludeCategories:\n  - Regex: '^\"zeek-config\\.h\"'\n    Priority: 1\n    SortPriority: 1\n  - Regex: '^\"zeek/zeek-config\\.h\"'\n    Priority: 1\n    SortPriority: 2\n  - Regex: '^<[[:print:]]+\\.(h|hh)>'\n    Priority: 2\n    SortPriority: 2\n  - Regex: '^<[[:print:]]+>'\n    Priority: 2\n    SortPriority: 3\n  - Regex: '^\"zeek/3rdparty/doctest.h'\n    Priority: 6\n  - Regex: '^\"zeek/'\n    Priority: 4\n  - Regex: '.*'\n    Priority: 5\n\nIncludeIsMainRegex: '$'\nIndentCaseLabels: true\nIndentPPDirectives: None\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: '^BEGIN_'\nMacroBlockEnd:   '^END_'\nMaxEmptyLinesToKeep: 2\nNamespaceIndentation: None\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 500\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 1000\nPointerAlignment: Left\nReflowComments:  true\nSortIncludes:    true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: false\nSpaceAfterLogicalNot: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nSpacesInConditionalStatement: true\nStandard:        Cpp11\nStatementMacros:\n  - STANDARD_OPERATOR_1\nTabWidth:        4\nUseTab:          Never\n---\nLanguage: Json\n...\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 0.123046875,
          "content": "Checks: '-*,\n         bugprone-*,\n\t -bugprone-easily-swappable-parameters,\n         clang-analyzer-*,\n         performance-*'\n"
        },
        {
          "name": ".cmake-format.json",
          "type": "blob",
          "size": 1.6875,
          "content": "{\n  \"parse\": {\n    \"additional_commands\": {\n      \"CheckIPProto\": {\n        \"kwargs\": {\n          \"_proto\": \"*\"\n        }\n      },\n      \"CheckType\": {\n        \"kwargs\": {\n          \"_type\": \"*\",\n          \"_alt_type\": \"*\",\n          \"_var\": \"*\"\n        }\n      },\n      \"SetPackageVersion\": {\n        \"kwargs\": {\n          \"_version\": \"*\"\n        }\n      },\n      \"SetPackageFileName\": {\n        \"kwargs\": {\n          \"_version\": \"*\"\n        }\n      },\n      \"SetPackageInstallScripts\": {\n        \"kwargs\": {\n          \"VERSION\": \"*\"\n        }\n      },\n      \"ConfigurePackaging\": {\n        \"kwargs\": {\n          \"_version\": \"*\"\n        }\n      },\n      \"SetPackageGenerators\": {},\n      \"SetPackageMetadata\": {},\n      \"FindRequiredPackage\": {\n        \"kwargs\": {\n          \"packageName\": \"*\"\n        }\n      },\n      \"InstallClobberImmune\": {\n        \"kwargs\": {\n          \"_srcfile\": \"*\",\n          \"_dstfile\": \"*\"\n        }\n      },\n      \"InstallPackageConfigFile\": {\n        \"kwargs\": {\n          \"_srcfile\": \"*\",\n          \"_dstdir\": \"*\",\n          \"_dstfilename\": \"*\"\n        }\n      },\n      \"InstallShellScript\": {\n        \"kwargs\": {\n          \"_srcfile\": \"*\",\n          \"_dstfile\": \"*\"\n        }\n      },\n      \"InstallSymLink\": {\n        \"kwargs\": {\n          \"_filepath\": \"*\",\n          \"_sympath\": \"*\"\n        }\n      },\n      \"spicy_add_analyzer\": {\n        \"kwargs\": {\n          \"NAME\": \"*\",\n          \"PACKAGE_NAME\": \"*\",\n          \"SOURCES\": \"*\",\n          \"MODULES\": \"*\"\n        }\n      }\n    }\n  },\n  \"format\": {\n    \"line_width\": 100,\n    \"tab_size\": 4,\n    \"separate_ctrl_name_with_space\": true,\n    \"max_subgroups_hwrap\": 3,\n    \"line_ending\": \"unix\"\n  },\n  \"markup\": {\n    \"enable_markup\": false\n  }\n}\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0400390625,
          "content": "**/.tmp\n**/.btest.failed.dat\n**/diag.log\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 1.0927734375,
          "content": "# Reformat the world (initial clang-format formatting)\nb2f171ec69eae3a833a9db1b16e5234bd3eaf0b6\n\n# clang-format: Force zeek-config.h to be earlier in the config ordering\n9cb54f5d449b63006cc9a1f451a47732c92fef2d\n\n# clang-format: A few minor comment-spacing fixes\n07e276ab2e351ce71b709139f1933b9ead40d094\n\n# clang-format: Enforce ordering of includes in ZBody\ncb99ae2b7c9988656b097ad2789dffd2c0c37939\n\n# clang-format: Other include ordering changes\ne97c14add5b04aedc7f3f9dba59f665cbad793af\n\n# clang-format: Other minor formatting changes\n02206f3215f977ba7752476ba89ca06abe93375c\n\n# clang-format: Set IndentCaseBlocks to false\n4423574d265749da8e707ab0fbcffcbfaed26614\n\n# clang-format: Set penalty for breaking after assignment operator\n9af6b2f48d11b4e287d0f18034a486f76f9f2d61\n\n# Remove trailing whitespace from script files\na6378531dbc5c357926d98fe785bb719cc70e1b4\n\n# clang-format: Reformat Zeek in Spicy style\nf5a76c1aedc7f8886bc6abef0dfaa8065684b1f6\n\n# clang-format: Bump pre-commit hooks.\n26d04fd9fca0868d9c81e02fbffb6f81a00b56e5\n\n# clang-format: Format JSON with clang-format\ne6256446ddef5c5d5240eefff974556f2e12ac46\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2197265625,
          "content": "*.sig linguist-detectable=false\n*.pac linguist-detectable=false\n*.bif linguist-language=C++\n*.l linguist-language=Lex\ntesting/btest/Baseline/** linguist-detectable=false\ntesting/btest/language/crlf-parsing.zeek text eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4462890625,
          "content": "# Ignore anything prefixed with build since people\n# tend to name all of their build directories prefixed that way.\nbuild*\n!ci/windows/build.cmd\n\ntmp\n*.gcov\n\n# Configuration and build directories for CLion\n.idea\ncmake-build-*\n\n# skip DS Store for MacOS\n.DS_Store\n\n# ignore pyenv local settings\n.python-version\n\n# clangd\n.cache\n\n# Visual Studio\n.vs/\n.vscode/\nout/\nCMakeSettings.json\n\n# Emacs temporary files\n*~\n\n# Vim temporary files\n*.swp\n*.swo\n\nsrc/include"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 2.541015625,
          "content": "[submodule \"auxil/zeek-aux\"]\n\tpath = auxil/zeek-aux\n\turl = https://github.com/zeek/zeek-aux\n[submodule \"auxil/binpac\"]\n\tpath = auxil/binpac\n\turl = https://github.com/zeek/binpac\n[submodule \"auxil/zeekctl\"]\n\tpath = auxil/zeekctl\n\turl = https://github.com/zeek/zeekctl\n[submodule \"auxil/btest\"]\n\tpath = auxil/btest\n\turl = https://github.com/zeek/btest\n[submodule \"cmake\"]\n\tpath = cmake\n\turl = https://github.com/zeek/cmake\n[submodule \"src/3rdparty\"]\n\tpath = src/3rdparty\n\turl = https://github.com/zeek/zeek-3rdparty\n[submodule \"auxil/broker\"]\n\tpath = auxil/broker\n\turl = https://github.com/zeek/broker\n[submodule \"auxil/netcontrol-connectors\"]\n\tpath = auxil/netcontrol-connectors\n\turl = https://github.com/zeek/zeek-netcontrol\n[submodule \"auxil/bifcl\"]\n\tpath = auxil/bifcl\n\turl = https://github.com/zeek/bifcl\n[submodule \"doc\"]\n\tpath = doc\n\turl = https://github.com/zeek/zeek-docs\n[submodule \"auxil/paraglob\"]\n\tpath = auxil/paraglob\n\turl = https://github.com/zeek/paraglob\n[submodule \"auxil/rapidjson\"]\n\tpath = auxil/rapidjson\n\turl = https://github.com/zeek/rapidjson\n[submodule \"auxil/libkqueue\"]\n\tpath = auxil/libkqueue\n\turl = https://github.com/zeek/libkqueue\n[submodule \"auxil/highwayhash\"]\n\tpath = auxil/highwayhash\n\turl = https://github.com/google/highwayhash\n[submodule \"auxil/package-manager\"]\n\tpath = auxil/package-manager\n\turl = https://github.com/zeek/package-manager\n[submodule \"auxil/zeek-client\"]\n\tpath = auxil/zeek-client\n\turl = https://github.com/zeek/zeek-client\n[submodule \"auxil/gen-zam\"]\n\tpath = auxil/gen-zam\n\turl = https://github.com/zeek/gen-zam\n[submodule \"auxil/c-ares\"]\n\tpath = auxil/c-ares\n\turl = https://github.com/c-ares/c-ares\n[submodule \"auxil/out_ptr\"]\n\tpath = auxil/out_ptr\n\turl = https://github.com/soasis/out_ptr.git\n[submodule \"auxil/spicy\"]\n\tpath = auxil/spicy\n\turl = https://github.com/zeek/spicy\n[submodule \"auxil/filesystem\"]\n\tpath = auxil/filesystem\n\turl = https://github.com/gulrak/filesystem.git\n[submodule \"auxil/zeek-af_packet-plugin\"]\n\tpath = auxil/zeek-af_packet-plugin\n\turl = https://github.com/zeek/zeek-af_packet-plugin.git\n[submodule \"auxil/libunistd\"]\n\tpath = auxil/libunistd\n\turl = https://github.com/zeek/libunistd\n[submodule \"auxil/zeekjs\"]\n\tpath = auxil/zeekjs\n\turl = https://github.com/corelight/zeekjs.git\n[submodule \"auxil/vcpkg\"]\n\tpath = auxil/vcpkg\n\turl = https://github.com/microsoft/vcpkg\n[submodule \"auxil/prometheus-cpp\"]\n\tpath = auxil/prometheus-cpp\n\turl = https://github.com/zeek/prometheus-cpp\n[submodule \"src/cluster/backend/zeromq/auxil/cppzmq\"]\n\tpath = src/cluster/backend/zeromq/auxil/cppzmq\n\turl = https://github.com/zeromq/cppzmq\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.404296875,
          "content": "# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\n#\nrepos:\n- repo: local\n  hooks:\n  - id: license\n    name: Check for license headers\n    entry: ./ci/license-header.py\n    language: python\n    files: '\\.(h|c|cpp|cc|spicy|evt)$'\n    types: [file]\n    exclude: '^(testing/btest/(Baseline|plugins|spicy|scripts)/.*|testing/builtin-plugins/.*)$'\n\n- repo: https://github.com/pre-commit/mirrors-clang-format\n  rev: 'v19.1.4'\n  hooks:\n  - id: clang-format\n    types_or:\n      - \"c\"\n      - \"c++\"\n      - \"json\"\n\n- repo: https://github.com/maxwinterstein/shfmt-py\n  rev: v3.7.0.1\n  hooks:\n    - id: shfmt\n      args: [\"-w\", \"-i\", \"4\", \"-ci\"]\n\n- repo: https://github.com/astral-sh/ruff-pre-commit\n  rev: v0.8.1\n  hooks:\n    - id: ruff\n      args: [--fix]\n    - id: ruff-format\n\n- repo: https://github.com/cheshirekow/cmake-format-precommit\n  rev: v0.6.13\n  hooks:\n  - id: cmake-format\n\n- repo: https://github.com/crate-ci/typos\n  rev: v1.28.2\n  hooks:\n    - id: typos\n      exclude: '^(.typos.toml|src/SmithWaterman.cc|testing/.*|auxil/.*|scripts/base/frameworks/files/magic/.*|CHANGES|scripts/base/protocols/ssl/mozilla-ca-list.zeek)$'\n\n- repo: https://github.com/bbannier/spicy-format\n  rev: v0.23.0\n  hooks:\n    - id: spicy-format\n      # TODO: Reformat existing large analyzers just before 8.0.\n      exclude: '(^testing/.*)|(protocol/ldap/.*)|(protocol/quic/.*)|(protocol/websocket/.*)'\n"
        },
        {
          "name": ".typos.toml",
          "type": "blob",
          "size": 2.302734375,
          "content": "[default]\nextend-ignore-re = [\n    \"#.*MSDN Ref.*\\\\[ms-oaut\\\\]\",\n    # seh too close to she\n    \"registered SEH to support IDL\",\n    # ALLO is a valid FTP command\n    \"\\\"ALLO\\\".*200\",\n    \"des-ede3-cbc-Env-OID\",\n    \"mis-aliasing of\",\n    \"mis-indexing\",\n    \"compilability\",\n    # On purpose\n    \"\\\"THE NETBIOS NAM\\\"\",\n    # NFS stuff.\n    \"commited: stable_how_t &optional\",\n    # script_opt uses \"ot\" a lot, but it's very close to \"to\", so\n    # don't want to add it as identifier. Match some patterns.\n    \"ASSERT\\\\(ot == OP_.*\",\n    \"ot->InternalType\",\n    \"ot->Tag\\\\(\\\\) == TYPE_.*\",\n    \"auto.* ot =\",\n    \"ot = OP_.*\",\n    \"ot\\\\[\",\n    \"ot.size\",\n    \"ot.empty\",\n    \"ot_i\",\n    \"ot.c_str\",\n    \"have_ot\",\n    \"if \\\\( ot == OP_.*\",\n    \"ot->Yield\\\\(\\\\)->InternalType\\\\(\\\\)\",\n    \"switch \\\\( ot \\\\)\",\n    \"\\\\(ZAMOpType ot\\\\)\",\n\n    # News stuff\n    \"SupressWeirds.*deprecated\",\n    \"\\\"BaR\\\"\",\n    \"\\\"xFoObar\\\"\",\n    \"\\\"FoO\\\"\",\n]\n\nextend-ignore-identifiers-re = [\n    \"TLS_.*_EDE.*_.*\",\n    \"SSL.*_EDE.*_.*\",\n    \"_3DES_EDE_CBC_SHA\",\n    \"GOST_R_.*\",\n    \"icmp6_nd_.*\",\n    \"ND_ROUTER_.*\",\n    \"ND_NEIGHBOR_.*\",\n    \".*_ND_option.*\",\n    \"bck\", # Used with same length as `fwd`\n    \"pn\", # Use for `PoolNode` variables\n    \"ffrom_[ip|port|mac]\", # Used in netcontrol.\n    \"complte_flag\", # Existing use in exported record in base.\n    \"VidP(n|N)\", # In SMB.\n    \"iin\", # In DNP3.\n    \"(ScValidatePnPService|ScSendPnPMessage)\", # In DCE-RPC.\n    \"snet\", # Used as shorthand for subnet in base scripts.\n    \"(e|i)it\", # Used as name for some iterators.\n]\n\n[default.extend-identifiers]\nBuildNDOptionsVal = \"BuildNDOptionsVal\"\nESC_SER = \"ESC_SER\"\nMCA_OCCURED = \"MCA_OCCURED\"\nMNT3ERR_ACCES = \"MNT3ERR_ACCES\"\nND_QUEUE_OVERFLOW = \"ND_QUEUE_OVERFLOW\"\nND_REDIRECT = \"ND_REDIRECT\"\nNED_ACK = \"NED_ACK\"\nNFS3ERR_ACCES = \"NFS3ERR_ACCES\"\nNO_SEH = \"NO_SEH\"\nOP_SWITCHS_Vii = \"OP_SWITCHS_Vii\"\nO_WRONLY = \"O_WRONLY\"\nRPC_NT_CALL_FAILED_DNE = \"RPC_NT_CALL_FAILED_DNE\"\nRpcAddPrintProvidor = \"RpcAddPrintProvidor\"\nRpcDeletePrintProvidor = \"RpcDeletePrintProvidor\"\nTHA = \"THA\"\nar_tha = \"ar_tha\"\nhave_2nd = \"have_2nd\"\not1 = \"ot1\"\not2 = \"ot2\"\nuses_seh = \"uses_seh\"\n\n[default.extend-words]\ncaf = \"caf\"\nhelo = \"helo\"\n# Seems we use this in the management framework\nrequestor = \"requestor\"\n# `inout` is used as a keyword in Spicy, but looks like a typo of `input`.\ninout = \"inout\"\n"
        },
        {
          "name": ".update-changes.cfg",
          "type": "blob",
          "size": 0.5869140625,
          "content": "\nfunction new_version_hook\n    {\n    # This can be used to automatically adapt version numbers in files,\n    # except it's not used for that currently.  Instead it updates the files\n    # which store the commit hashes associated with the version of external\n    # test suite repos to check out on a CI system.\n    version=$1\n\n    ./testing/scripts/update-external-repo-pointer.sh testing/external/zeek-testing testing/external/commit-hash.zeek-testing\n\n    ./testing/scripts/update-external-repo-pointer.sh testing/external/zeek-testing-private testing/external/commit-hash.zeek-testing-private\n    }\n"
        },
        {
          "name": "CHANGES",
          "type": "blob",
          "size": 1534.37109375,
          "content": "7.2.0-dev.64 | 2025-01-10 11:15:24 -0800\n\n  * GH-4102: Harden flaky test based on creating a file (Evan Typanski, Corelight)\n\n7.2.0-dev.62 | 2025-01-09 22:17:41 -0700\n\n  * Update btests for new local-only subnets (Tim Wojtulewicz, Corelight)\n\n  * Add recommended non-routable subnets (JW-Corelight, Corelight)\n\n    224.0.0.0/24 (and 6to4 conversion 2002:e000::/40) from RFC5771\t\"Multicast Local Network Control Block\" defined as non-routable.\n\n    239.0.0.0/8 (and 6to4 conversion 2002:ef00::/24) from RFC2365 \"Administratively Scoped IP Multicast\"\n\n    fec0::/10 from RFC3879 \"Deprecated Site Local Addresses\"\n    (cherry picked from commit 821ab2dbed0bc24c14b35ed22be6ba754646ca24)\n\n  * Fix another typo in the Coverity workflow script (Tim Wojtulewicz, Corelight)\n\n7.2.0-dev.57 | 2025-01-09 13:47:29 -0700\n\n  * Add missing include for <vector> (Tim Wojtulewicz, Corelight)\n\n  * Extended ZAM validation to include macros (Vern Paxson, Corelight)\n\n7.2.0-dev.54 | 2025-01-09 12:09:07 -0700\n\n  * factoring of some ZAM header files for better modularity (Vern Paxson, Corelight)\n\n7.2.0-dev.52 | 2025-01-09 12:02:45 -0700\n\n  * fixes for initializing globals when using -O gen-standalone-C++ (Vern Paxson, Corelight)\n\n7.2.0-dev.50 | 2025-01-09 16:26:00 +0100\n\n  * Update COPYING date to now and fix some [skip CI] (Evan Typanski, Corelight)\n\n7.2.0-dev.48 | 2025-01-08 21:44:21 -0800\n\n  * Try to be more careful with `--help` printing (Evan Typanski, Corelight)\n  * Update doc submodule [nomail] [skip ci] (zeek-bot)\n  * Add CECPQ2 curve number to SSL consts (Johanna Amann, Corelight)\n\n7.2.0-dev.43 | 2025-01-08 08:38:25 -0700\n\n  * CI: Fix escaping in coverity workflow (Tim Wojtulewicz, Corelight)\n\n7.2.0-dev.40 | 2025-01-07 11:41:31 -0700\n\n  * Add 7.1 contributors to NEWS file [skip ci] (Christian Kreibich, Corelight)\n\n7.2.0-dev.38 | 2025-01-07 10:05:15 -0700\n\n  * More updates to the SSL consts from recent protocol additions (Johanna Amann, Corelight)\n\n7.2.0-dev.35 | 2025-01-06 15:51:03 -0700\n\n  * Update ssl consts with more post-quantum curves (Johanna Amann, Corelight)\n\n7.2.0-dev.33 | 2025-01-06 10:37:33 -0700\n\n  * CI: Fix coverity workflow to support large uploads (Tim Wojtulewicz, Corelight)\n\n    The previous setup only allowed uploads of up to 500MB, which we\n    eclipsed a long time ago. They recently started enforcing it, so\n    this switches over to use a call-and-response API for uploading\n    larger files.\n\n  * CI: Remove use of wget from coverity workflow (Tim Wojtulewicz, Corelight)\n\n  * CI: Upgrade coverity workflow to ubuntu24, add jq (Tim Wojtulewicz, Corelight)\n\n7.2.0-dev.28 | 2025-01-05 14:19:15 -0700\n\n  * Fix incorrect uses of `zeek:see` (Benjamin Bannier)\n\n    This fixes instances where `zeek:see` was used incorrectly so it was not\n    rendered correctly. All these instances have been found by looking for\n    `zeek:see` in the generated HTML where it should not be visible anymore.\n\n    I also removed a doc reference to `paraglob_add` which never existed.\n\n7.2.0-dev.25 | 2024-12-20 15:31:19 -0700\n\n  * Bump auxil/spicy to latest development snapshot (Benjamin Bannier, Corelight)\n\n7.2.0-dev.23 | 2024-12-20 15:14:33 -0700\n\n  * Require spicy for spicy.analyzer-id btest (Tim Wojtulewicz, Corelight)\n\n  * Document `get_tag` to ensure that `name` exists (Evan Typanski, Corelight)\n\n    This caused confusion and I don't think it's very intuitive. If called\n    with a name that does not exist, this returns without a value, not even\n    an error value. Changing that seems like it could be more deprecation\n    work.\n\n7.2.0-dev.18 | 2024-12-18 15:44:40 -0700\n\n  * Add spicy runtime-support current_analyzer_id(), use it to set id in events (Tim Wojtulewicz, Corelight)\n\n7.2.0-dev.16 | 2024-12-18 09:28:33 +0100\n\n  * pre-commit: Bump spicy-format to 0.23 (Arne Welzel, Corelight)\n\n  * fix for ZAM optimization of assigning a record field to result of \"in\" operation (Vern Paxson, Corelight)\n\n7.2.0-dev.13 | 2024-12-17 12:15:42 -0700\n\n  * Return a warning and fail if creating a store at global scope (Tim Wojtulewicz, Corelight)\n\n7.2.0-dev.11 | 2024-12-16 12:37:25 -0700\n\n  * ZAM/relexpr-op NE for patterns (Vern Paxson, Corelight)\n\n  * Expr: Fix folding of pattern values to support == and != (Arne Welzel, Corelight)\n\n    The fatal error is actually triggered at runtime, so it's a bit\n    dangerous for users, but not sure there's many use-cases to\n    compare vectors of patterns.\n\n7.2.0-dev.8 | 2024-12-16 10:19:18 -0700\n\n  * QUIC/decrypt_crypto: Actually check if decryption was successful (Arne Welzel, Corelight)\n\n    ...and bail if it wasn't.\n\n    PCAP was produced using OSS-Fuzz input from issue 383379789.\n\n  * QUIC/decrypt_crypto: Limit payload_length to 10k (Arne Welzel, Corelight)\n\n    Given we dynamically allocate memory for decryption, employ a limit\n    that is unlikely to be hit, but allows for large payloads produced\n    by the fuzzer or jumbo frames.\n\n  * QUIC/decrypt_crypto: Fix decrypting into too small stack buffer (Arne Welzel, Corelight)\n\n    A QUIC initial packet larger than 1500 bytes could lead to crashes\n    due to the usage of a fixed size stack buffer for decryption.\n\n    Allocate the necessary memory dynamically on the heap instead.\n\n  * Fix naming of zeromq package in Coverity workflow (Tim Wojtulewicz, Corelight)\n\n  * Fix naming of cppzmq-dev package in Coverity workflow (Tim Wojtulewicz, Corelight)\n\n7.2.0-dev.2 | 2024-12-13 16:46:18 -0700\n\n  * CI: Add missing packages to coverity workflow (Tim Wojtulewicz, Corelight)\n\n  * Start of 7.2.0 development (Tim Wojtulewicz, Corelight)\n\n7.1.0-dev.829 | 2024-12-13 13:15:41 -0700\n\n  * Updating submodule(s) [nomail] (Tim Wojtulewicz, Corelight)\n\n7.1.0-dev.827 | 2024-12-13 12:17:25 -0700\n\n  * btest/supervisor: Bump one timeout to 30 seconds (Arne Welzel, Corelight)\n\n  * btest/cluster: Bump timeouts to 30 seconds (Arne Welzel, Corelight)\n\n    ZAM startup may take a long time, particularly in CI environments, so\n    bump it up from 10 to 30 seconds.\n\n  * btest/validate-ZAM: Update baseline, run always (Arne Welzel, Corelight)\n\n7.1.0-dev.823 | 2024-12-13 12:14:46 -0700\n\n  * simplified ZAM instructions for executing \"assert\" statements (Vern Paxson, Corelight)\n\n7.1.0-dev.821 | 2024-12-13 12:14:17 -0700\n\n  * cirrus/container_image_manifest: match RC tags, too (Arne Welzel, Corelight)\n\n    The rest should just work, assuming VERSION files contain an\n    appropriate value. Add a check for that, too.\n\n  * cirrus: Move additional tag \"computation\" into separate script (Arne Welzel, Corelight)\n\n    This allows for easier testing locally and maybe re-usability.\n\n7.1.0-dev.818 | 2024-12-13 08:04:17 -0700\n\n  * fix for memory management associated with ZAM table iteration (Vern Paxson, Corelight)\n\n7.1.0-dev.816 | 2024-12-13 12:59:08 +0100\n\n  * zeekygen: Disable Cluster::Experimental module (Arne Welzel, Corelight)\n\n    The nodes-experimental/manager.zeek file ends up calling Broker::publish()\n    unconditionally, resulting in a warning. Skip running that code when\n    generating documentation.\n\n7.1.0-dev.814 | 2024-12-13 10:57:19 +0100\n\n  * BTest updates in support of compiling-scripts-to-C++ (Vern Paxson, Corelight)\n\n  * -O gen-standalone-C++ fixes for recent more aggressive AST profiling (Vern Paxson, Corelight)\n\n7.1.0-dev.811 | 2024-12-12 20:11:39 -0800\n\n  * removed a bunch of no-longer used BTest alternatives and their associated baselines (Vern Paxson, Corelight)\n\n  * Update doc submodule [nomail] [skip ci] (zeek-bot)\n\n7.1.0-dev.808 | 2024-12-12 13:17:51 -0700\n\n  * netcontrol: Move to Cluster::publish() (Arne Welzel, Corelight)\n\n  * openflow: Move to Cluster::publish() (Arne Welzel, Corelight)\n\n  * netcontrol/catch-and-release: Move to Cluster::publish() (Arne Welzel, Corelight)\n\n  * config: Move to Cluster::publish() (Arne Welzel, Corelight)\n\n  * ssl/validate-certs: Move to Cluster::publish() (Arne Welzel, Corelight)\n\n  * irc: Move to Cluster::publish() (Arne Welzel, Corelight)\n\n  * ftp: Move to Cluster::publish() (Arne Welzel, Corelight)\n\n  * dhcp: Move to cluster publish (Arne Welzel, Corelight)\n\n  * notice: Move to Cluster::publish() (Arne Welzel, Corelight)\n\n  * intel: Move to Cluster::publish() (Arne Welzel, Corelight)\n\n  * sumstats: Move to Cluster::publish() (Arne Welzel, Corelight)\n\n7.1.0-dev.796 | 2024-12-12 13:16:57 -0700\n\n  * cluster/Backend: Handle unspecified table/set (Arne Welzel, Corelight)\n\n    Same as what we do in Broker. Use the expected type if publishing\n    a table() or set() parameter.\n\n    This fixes issues when switching sumstats to Cluster::publish()\n\n  * cluster: Fix Cluster::publish() of Broker::Data (Arne Welzel, Corelight)\n\n    The broker serializer leverages the existing data_to_val() function.\n    During unserialization, if the destination type is any, the logic\n    simply wraps the broker::data value into a Broker::Data record.\n    Therefore, events with any parameters are currently exposed to\n    the Broker::Data type.\n\n    There is a bigger issue in that re-publishing such Broker::Data\n    instances would encode them as a normal record. Explicitly prevent\n    this by serializing the contained data value directly instead, similar\n    to what Broker already did when publishing a record.\n\n  * cluster: Be noisy when attempting to connect to an unknown node (Arne Welzel, Corelight)\n\n    Mostly due to spending too much time wondering why nodes didn't connect\n    when there was a mismatch between \"manager\" and \"manager-1\" in the\n    cluster layout. Remove manager from test-all-policy-cluster test to\n    avoid connection attempts in this test.\n\n7.1.0-dev.792 | 2024-12-12 11:35:08 -0700\n\n  * Bump auxil/spicy to latest development snapshot (Benjamin Bannier, Corelight)\n\n7.1.0-dev.790 | 2024-12-12 11:33:01 -0700\n\n  * Add note about various dependency updates [nomail] [skip ci] (Tim Wojtulewicz, Corelight)\n\n  * NEWS additions for v7.1 [nomail] [skip ci] (Tim Wojtulewicz, Corelight)\n\n7.1.0-dev.787 | 2024-12-12 14:45:39 +0100\n\n  * Pre-compute the node topics for all pool entries. (Justin Azoff, Corelight)\n\n    A zeek script profile showed a small percentage of time spent in\n    Cluster::node_topic, but this never changes and can be cached.\n\n  * Fix ZAM's implementation of Analyzer::name() BiF (Christian Kreibich, Corelight)\n\n    ZAM's implementation deviates from Zeek's in consideration of remappings, which\n    means that running ZAM produced conn.log service names prefixed with \"spicy_\"\n    whereas regular Zeek doesn't.\n\n7.1.0-dev.782 | 2024-12-11 15:33:06 -0700\n\n  * Update zeekctl submodule to remove BroControl dir (Tim Wojtulewicz, Corelight)\n\n  * Run Coverity workflow on ubuntu 22.04 (Tim Wojtulewicz, Corelight)\n\n7.1.0-dev.779 | 2024-12-11 12:59:17 -0700\n\n  * Add blurb about Spicy SSL to NEWS (Johanna Amann, Corelight)\n\n7.1.0-dev.777 | 2024-12-11 12:38:48 -0700\n\n  * Add Spicy analyzers to Coverity builds (Tim Wojtulewicz, Corelight)\n\n7.1.0-dev.775 | 2024-12-11 11:45:31 -0700\n\n  * Swap pre-commit yapf for ruff/ruff-format, fix findings (Tim Wojtulewicz, Corelight)\n\n  * Upgrade package-manager submodule to get python upgrade (Tim Wojtulewicz, Corelight)\n\n  * Upgrade broker submodule to get python upgrade (Tim Wojtulewicz, Corelight)\n\n  * Upgrade zeekctl submodule to get python upgrade (Tim Wojtulewicz, Corelight)\n\n  * Upgrade zeek-client submodule to get python upgrade (Tim Wojtulewicz, Corelight)\n\n  * Upgrade btest submodule to get python upgrade (Tim Wojtulewicz, Corelight)\n\n  * Require Python 3.9 in CMakeLists.txt (Tim Wojtulewicz, Corelight)\n\n  * CI: Install python 3.9 on ubuntu 20 (Tim Wojtulewicz, Corelight)\n\n7.1.0-dev.766 | 2024-12-11 11:07:53 -0700\n\n  * btest: Avoid loading ZeroMQ if not compiled in (Arne Welzel, Corelight)\n\n    ...at the same time, add some `TEST-REQUIRES: have-zeromq` which\n    unfortunately means that developers will usually want libzmq\n    installed on their system.\n\n  * btest/coverage: Avoid warnings in test-all-policy-cluster (Arne Welzel, Corelight)\n\n  * Broker::publish: Warn on using Broker::publish() when inactive (Arne Welzel, Corelight)\n\n    This is mostly for transitioning base scripts to Cluster::publish() and\n    avoid silent surprises why certain things don't work when using ZeroMQ.\n\n  * Update zeek-testing and zeek-testing-cluster commit hashes (Tim Wojtulewicz, Corelight)\n\n7.1.0-dev.760 | 2024-12-11 09:28:04 +0100\n\n  * Update ZAM BiF-tracking (Arne Welzel, Corelight)\n\n  * configure: Add --disable-cluster-backend-zeromq (Arne Welzel, Corelight)\n\n  * CMakeLists: Cluster backends output (Arne Welzel, Corelight)\n\n  * zeromq: Conditionally enable by default (Arne Welzel, Corelight)\n\n    Instead of having ZeroMQ as a new dependency, enable the ZeroMQ backend only\n    if ZeroMQ is available on the system as suggested by Tim.\n\n  * btest/generic: Add publish_hrw(), publish_rr() and logging tests (Arne Welzel, Corelight)\n\n    They currently use zeromq, but technically they should be valid for\n    any other backend, too, even broker.\n\n  * generate-docs: Run on Ubuntu 24.04, add cppzmq (Arne Welzel, Corelight)\n\n  * docker: Add cppzmq/libzmq dependencies (Arne Welzel, Corelight)\n\n  * tsan_suppressions: Add called_from_lib: libzmq (Arne Welzel, Corelight)\n\n  * ci: Add cppzmq and libzmq to most platforms (Arne Welzel, Corelight)\n\n  * cluster/backend/zeromq: Add ZeroMQ based cluster backend (Arne Welzel, Corelight)\n\n    This is a cluster backend implementation using a central XPUB/XSUB proxy\n    that by default runs on the manager node. Logging is implemented leveraging\n    PUSH/PULL sockets between logger and other nodes, rather than going\n    through XPUB/XSUB.\n\n    The test-all-policy-cluster baseline changed: Previously, Broker::peer()\n    would be called from setup-connections.zeek, causing the IO loop to be\n    alive. With the ZeroMQ backend, the IO loop is only alive when\n    Cluster::init() is called, but that doesn't happen anymore.\n\n  * cluster/backend/zeromq: Add cppzmq submodule (Arne Welzel, Corelight)\n\n    Not all supported platforms provide a recent enough cppzmq version,\n    add a fallback as submodule. cppzmq is a header-only library, so there's\n    no build step involved.\n\n  * cluster: Add Cluster::node_id(), allow redef of node_topic(), nodeid_topic() (Arne Welzel, Corelight)\n\n    This provides a way for non-broker cluster backends to override a\n    node's identifier and its own topics that it listens on by default.\n\n  * cluster: Move publish_hrw() and publish_rr() to cluster.bif (Arne Welzel, Corelight)\n\n    From this point on, Cluster::publish_hrw() and Cluster::publish_rr()\n    go through cluster/Backend.cc code.\n\n7.1.0-dev.745 | 2024-12-10 16:15:57 -0700\n\n  * Add btest for unknown_protocols.log (Jan Grashoefer, Corelight)\n\n  * Add protocol_id count to unknown protocol record (Jan Grashoefer, Corelight)\n\n    The count representation is not logged and added for access to the value\n    in log policy hooks without converting the logged hex representation.\n\n7.1.0-dev.742 | 2024-12-10 14:41:10 -0700\n\n  * NEWS tweaks [skip ci] (Christian Kreibich, Corelight)\n\n    - Switch list items back to \"-\" from \"*\" -- we hadn't used \"*\" since\n      2.5.4 but started in 7.1, probably by accident? :-)\n\n    - Fix a typo.\n\n7.1.0-dev.740 | 2024-12-10 20:31:36 +0100\n\n  * Update BiF-tracking, add get_current_packet_ts() (Arne Welzel, Corelight)\n\n    Also, run the ZAM-bif-tracking test in non-ZAM environments so\n    failures are caught immediately. There's nothing overly ZAM specific about\n    running this test.\n\n    I'm not sure I like the fact that any new contributor adding a BiF\n    will need to dig into this... it might be a bit intimidating.\n\n7.1.0-dev.738 | 2024-12-10 18:26:31 +0100\n\n  * Introduce get_packet_lag() (Jan Grashoefer, Corelight)\n\n  * Add btest for get_current_packet_ts() (Jan Grashoefer, Corelight)\n\n  * Introduce get_current_packet_ts to fix packet lag (Jan Grashoefer, Corelight)\n\n    Using network_time to calculate packet lag will produce wrong results\n    when there is no packet available but network time does not (yet) fall\n    back to wall clock.\n\n7.1.0-dev.734 | 2024-12-10 09:56:46 +0100\n\n  * DNS/dns_binds_rr: Fix complte to complete typo, switch to count (Arne Welzel, Corelight)\n\n    From my reading in the docs the complete_flag should only ever be a\n    single byte, so add a weird for when it is longer, but use count\n    as the new type.\n\n7.1.0-dev.732 | 2024-12-09 23:28:30 -0800\n\n  * Support for Broker I/O backpressure overflow policies (Christian Kreibich, Corelight, and Dominik Charousset)\n\n    - Add sleep() BiF\n    - Add backpressure disconnect notification to cluster.log and via telemetry\n    - Remove unneeded @loads from base/misc/version.zeek\n    - Add Cluster::nodeid_to_node() helper function\n    - Support re-peering with Broker peers that fall behind\n    - Add Zeek-level configurability of Broker slow-peer disconnects\n    - Bump Broker to pull in disconnect feature and infinite-loop fix\n    - No need to namespace Cluster:: functions in their own namespace\n\n  * Update doc submodule [nomail] [skip ci] (zeek-bot)\n\n7.1.0-dev.720 | 2024-12-09 12:22:44 -0700\n\n  * Add missing copyright line to headers and cc files (Arne Welzel, Corelight)\n\n  * pre-commit: Add license-header check inspired by Spicy (Arne Welzel, Corelight)\n\n  * Add missing \"COPYING\" in file comments (Arne Welzel, Corelight)\n\n    This was just done via sed. There's a number of files that don't\n    have a license entry at all.\n\n7.1.0-dev.716 | 2024-12-09 12:15:46 -0700\n\n  * BTest baseline updates for compile-to-C++ (Vern Paxson, Corelight)\n\n  * mark ZAM regression BTests as not suitable for compile-to-C++ (Vern Paxson, Corelight)\n\n  * fix for -O gen-C++ maintenance helper to skip BTest intermediary files (Vern Paxson, Corelight)\n\n  * introduced simplified initialization for non-standalone -O gen-C++ code (Vern Paxson, Corelight)\n    tied -O gen-standalone-C++ to use of --optimize-files\n\n  * streamline generated -O C++ code by relying on per-function profiles rather than aggregate profile (Vern Paxson, Corelight)\n\n  * when reporting available/unavailble C++ script bodies, flag those that are skipped (Vern Paxson, Corelight)\n\n  * modified AST profiling to mark (and fully skip) non-optimizable functions (Vern Paxson, Corelight)\n\n  * modified merge_types() to skip work if given identical types, which (Vern Paxson, Corelight)\n    also preserves type names (useful for -O gen-C++)\n\n7.1.0-dev.707 | 2024-12-09 12:08:21 -0700\n\n  * Move python signatures to a separate file (Tim Wojtulewicz, Corelight)\n\n  * Add signatures for Python bytecode for 3.8-3.14 (Tim Wojtulewicz, Corelight)\n\n  * Bump pre-commit hooks (Benjamin Bannier, Corelight)\n\n  * Bump typos pre-commit hooks (Benjamin Bannier, Corelight)\n\n    This now picks up additional typical misspellings, but also triggers on\n    more identifiers we use. I opted for fixing the obvious misspellings and\n    updated the allowlist for anything else.\n\n  * Bump clang-format pre-commit hooks (Benjamin Bannier, Corelight)\n\n    This brings in slightly better formatting around uniform initialization,\n    and comments after blocks not surrounded by `{ .. }`.\n\n7.1.0-dev.700 | 2024-12-09 14:03:29 +0100\n\n  * ScriptOpt: Fail compilation if known exprs/stmts is outdated (Arne Welzel, Corelight)\n\n  * skip optimization of functions with AST nodes unknown to script optimization (Vern Paxson, Corelight)\n\n  * Disable CTU-SME test under TSAN (Arne Welzel, Corelight)\n\n7.1.0-dev.695 | 2024-12-06 17:33:19 +0100\n\n  * btest/http: Demo StreamEvent analyzer with HTTP::upgrade_analyzers (Arne Welzel, Corelight)\n\n  * protocol: Add StreamEvent analyzer (Arne Welzel, Corelight)\n\n    This analyzer can be used to transport raw stream data for a given\n    connection to the script layer. For example, adding this analyzer into\n    the HTTP::upgrade_analyzer or using it to configure a child WebSocket\n    analyzer allows to get access to the raw stream data in script land\n    when no more appropriate protocol analyzer is available.\n\n7.1.0-dev.692 | 2024-12-06 10:22:07 +0100\n\n  * fix for ZAM \"assert\" statements potentially evaluating invalid expressions (Vern Paxson, Corelight)\n\n7.1.0-dev.689 | 2024-12-05 13:48:46 -0700\n\n  * init-bare: Deprecate tcp_reassembler_ports (Arne Welzel, Corelight)\n\n    ...and remove from NetVar, seems left-over.\n\n7.1.0-dev.687 | 2024-12-05 21:43:49 +0100\n\n  * ZAM documentation updates for asserts and event handler run-time errors (Vern Paxson, Corelight)\n\n  * BTest updates for ZAM support of (optionally) keeping \"assert\" statements (Vern Paxson, Corelight)\n\n  * command-line options for controlling script optimization: keeping asserts, (Vern Paxson, Corelight)\n    avoiding event handler coalescence\n\n  * ZAM support for option to not coalesce event handlers (Vern Paxson, Corelight)\n\n  * ZAM support for keeping \"assert\" statements (Vern Paxson, Corelight)\n\n  * internal support for script optimization options for keeping asserts, not (Vern Paxson, Corelight)\n    consolidating event handlers\n\n  * ZAM operations to support asserts (Vern Paxson, Corelight)\n\n  * simplified \"assert\" by not trying to catch messages that themselves have errors (Vern Paxson, Corelight)\n\n  * ZAM optimization now removes hook calls to hooks without any bodies (Vern Paxson, Corelight)\n\n7.1.0-dev.676 | 2024-12-05 11:08:55 -0700\n\n  * update of BTest that tracks number of (and validates) ZAM operations (Vern Paxson, Corelight)\n\n  * ZAM support for pattern equality/inequality operations (Vern Paxson, Corelight)\n\n  * expanded ZAM operations for bit-shifting to allow for int/count shift values (Vern Paxson, Corelight)\n\n  * added type coercion for bit-shifting expressions (Vern Paxson, Corelight)\n\n7.1.0-dev.671 | 2024-12-05 14:51:01 +0100\n\n  * zeek-testing: Add Experiment-VM-Microsoft-Windows7AD-1 PCAP and baselines (Arne Welzel, Corelight)\n\n    The pcap comes from the following dataset [1]:\n\n        CTU-SME-11: a labeled dataset with real benign and malicious network\n        traffic mimicking a small medium-size enterprise environment\n\n    [1] https://zenodo.org/records/7958259\n\n7.1.0-dev.668 | 2024-12-04 13:47:10 +0100\n\n  * init-bare/zeek-setup: Groundwork for instantiating cluster backends (Arne Welzel, Corelight)\n\n  * cluster/serializer: Add binary-serialization-format (Arne Welzel, Corelight)\n\n    This is a serializer for log records that is using SerialTypes\n    for serializing and un-serializing rather. Essentially, this is\n    similar to what broker does except for the envelope.\n\n  * logging/WriterFrontend: Add logic for non-broker cluster backends (Arne Welzel, Corelight)\n\n    If cluster::backend isn't broker_mgr, use the WriterFrontend's buffering\n    logic and send a whole batch of log writes during FlushWriteBuffer().\n    This is a different path than broker's own logging logic.\n\n    Preferably we adapt broker to a model where it isn't\n    buffering either.\n\n  * logging/WriterBackend: Include logging/Types.h (Arne Welzel, Corelight)\n\n  * logging/Manager: Implement new WriteBatchFromRemote() (Arne Welzel, Corelight)\n\n  * logging/WriterFrontend: Add LogWriteHeader as member (Arne Welzel, Corelight)\n\n    The header captures the enum values as well as the fields\n\n  * logging: Add filter_name to WriterInfo (Arne Welzel, Corelight)\n\n    ...with this change, it'll be possible to identify WriterFrontend's\n    based on (stream, filter_name, path) pairs in addition to (stream,\n    writer, path) pairs.\n\n7.1.0-dev.660 | 2024-12-04 11:13:58 +0100\n\n  * GH-4077: btest/spicy.type-converter: Drop ASAN_OPTIONS from test (Arne Welzel, Corelight)\n\n7.1.0-dev.658 | 2024-12-04 11:07:34 +0100\n\n  * Remove obsolete c_str_safe utility (Dominik Charousset, Corelight)\n\n    The old `c_str_safe` utility function allowed Zeek to operator on\n    `broker::data` and `broker::variant`. The former grants access to actual\n    `std::string` objects while the latter only provides access to fields\n    via `std::string_view`. Since the Zeek formatting functions need null\n    terminated strings, we need to copy the characters into a\n    null-terminated container first.\n\n    After removing support for `broker::data` and `broker::variant` from the\n    same code paths, we can drop `c_str_safe` and always do the copying\n    (since we are always dealing with `broker::variant` now).\n\n  * Remove obsolete Broker compatibility layer (Dominik Charousset, Corelight)\n\n    Since the transition to broker::variant has been long finalized, there\n    is no more need to be able to go back to a pre-variant version of\n    Broker. Hence, we can drop various utilities that allow Zeek to run with\n    older Broker releases.\n\n7.1.0-dev.654 | 2024-12-03 10:10:15 -0700\n\n  * Add interval_as_double argument to control how intervals are converted to JSON (Tim Wojtulewicz, Corelight)\n\n  * Add btest for round-trip JSON conversion (Tim Wojtulewicz, Corelight)\n\n  * Allow comparing two PatternVals (Tim Wojtulewicz, Corelight)\n\n  * Handle conversion between data from Val::ToJSON and ValFromJSON better (Tim Wojtulewicz, Corelight)\n\n7.1.0-dev.649 | 2024-12-02 13:43:26 +0100\n\n  * added new Cluster:: BiFs to script optimization tracking (Vern Paxson, Corelight)\n\n  * added locations to ZAM run-time errors about vector size mismatches (Vern Paxson, Corelight)\n\n7.1.0-dev.645 | 2024-12-02 10:59:04 +0100\n\n  * fixed -O dump-final-ZAM to work in conjunction with -O no-ZAM-opt (Vern Paxson, Corelight)\n\n7.1.0-dev.643 | 2024-12-02 09:51:10 +0100\n\n  * Remove support for building against Spicy versions before 1.8 (Benjamin Bannier, Corelight)\n\n    zeek-6.0 shipped with spicy-1.8, but we still have dedicated handling\n    for earlier versions of Spicy in the code. This patch cleans them up\n    since these versions are unsupported.\n\n  * Bump auxil/spicy to latest development snapshot (Benjamin Bannier, Corelight)\n\n7.1.0-dev.639 | 2024-11-27 12:31:40 -0700\n\n  * Add TEST-REQUIRES: which jq to two new tests that are using jq (Johanna Amann, Corelight)\n\n  * Explain why modbus test does not work with the Spicy SSL analyzer (Johanna Amann, Corelight)\n\n    This took a _long_ time to figure out.\n\n7.1.0-dev.635 | 2024-11-27 08:29:19 +0000\n\n  * Support setting the synchronous flag and the journal_mode for the SQLite log writer.\n\n    These options allow for a significant speed-up of SQLite logging, at the expense\n    of some data security. To change the default settings, redef the LogSQLite::synchronous\n    and LogSQLite::journal_mode consts. (Mymaqn)\n\n7.1.0-dev.629 | 2024-11-26 17:45:08 +0100\n\n  * ci/test.sh: Run doctest with TZ=UTC (Arne Welzel, Corelight)\n\n    Broker's JSON serialization is TZ dependent (which seems a bug). For now\n    do the same as we do in btest.cfg and run doctests with TZ set to UTC.\n\n    Reported in zeek/broker#434.\n\n  * cluster/setup-connections: Switch to Cluster::subscribe(), short-circuit broker (Arne Welzel, Corelight)\n\n    For the time being, this is easiest, otherwise we'd need to\n    conditionally load a broker-specific policy script based on\n    Cluster::backend being set.\n\n  * cluster/serializer: Add Broker based event serializers (Arne Welzel, Corelight)\n\n    This adds the first event serializers that use\n    broker functionality. Binary and JSON formats.\n\n  * cluster: Add Cluster scoped bifs (Arne Welzel, Corelight)\n\n    ... and a broker based test using Cluster::publish() and\n    Cluster::subscribe().\n\n  * Reporter: Add ScriptLocationScope helper (Arne Welzel, Corelight)\n\n  * init-bare/zeek-setup: Add Cluster::backend const &redef (Arne Welzel, Corelight)\n\n  * broker: Implement cluster::Backend interface (Arne Welzel, Corelight)\n\n  * Broker: Fix some error messages (Arne Welzel, Corelight)\n\n  * broker: Remove MakeEvent(ArgsSpan) (Arne Welzel, Corelight)\n\n    This was added previously in the 7.1 cycle. Now that MakeEvent() was\n    removed from cluster::Backend, there's no need for Broker to provide\n    this version.\n\n  * Update 3dparty submodule (Johanna Amann, Corelight)\n\n7.1.0-dev.618 | 2024-11-26 17:17:00 +0100\n\n  * GH-4052: More robust memory management for ZAM execution - fixes #4052 (Vern Paxson, Corelight)\n\n  * Update SQLite to 3.47.1 (Johanna Amann, Corelight)\n\n7.1.0-dev.614 | 2024-11-26 15:25:09 +0100\n\n  * ZeekArgs: Deprecate val_list_to_args() (Arne Welzel, Corelight)\n\n    Fly-by deprecation for something that isn't used in-tree anymore.\n\n7.1.0-dev.611 | 2024-11-22 18:37:37 +0100\n\n  * btest/plugins: Add a plugin testing Init and Done hooks (Arne Welzel, Corelight)\n\n7.1.0-dev.609 | 2024-11-22 15:29:29 +0100\n\n  * GH-4052: Disable core.expr-execption btest under ZAM to fix CI builds (Tim Wojtulewicz, Corelight)\n\n7.1.0-dev.607 | 2024-11-22 12:32:21 +0100\n\n  * btest: Test Broker::make_event() together with Cluster::publish_hrw() (Arne Welzel, Corelight)\n\n  * btest: Add cluster dir, minimal test for enum value (Arne Welzel, Corelight)\n\n  * broker: Add shim plugin adding a backend component (Arne Welzel, Corelight)\n\n    For broker, this isn't really functioning, but at least makes the\n    CLUSTER_BACKEND_BROKER enum available.\n\n  * zeek-setup: Instantiate backend::manager (Arne Welzel, Corelight)\n\n    Required to allow registration of cluster components.\n\n  * cluster: Add to src/CMakeLists.txt (Arne Welzel, Corelight)\n\n  * cluster: Add Components and ComponentManager for new components (Arne Welzel, Corelight)\n\n  * cluster/Backend: Interface for cluster backends (Arne Welzel, Corelight)\n\n  * cluster/Serializer: Interface for event and log serializers (Arne Welzel, Corelight)\n\n  * logging: Introduce logging/Types.h (Arne Welzel, Corelight)\n\n    Header and implementation for types shared between the cluster and\n    logging framework. The logging framework will be adapted later to\n    use these. For now, the new cluster components will simply reference\n    them.\n\n  * SerialTypes/Field: Allow default construction and add move constructor (Arne Welzel, Corelight)\n\n    This is in preparation of using SerialTypes to serialize and\n    unserialize complete log batches which include Field instances\n    and not just Value's.\n\n  * DebugLogger: Add cluster debugging stream (Arne Welzel, Corelight)\n\n  * plugin: Add component enums for pluggable cluster backends (Arne Welzel, Corelight)\n\n  * broker: Pass frame to MakeEvent() (Arne Welzel, Corelight)\n\n    This was lost in a prior change.\n\n7.1.0-dev.592 | 2024-11-21 16:38:55 +0100\n\n  * sumstat/non-cluster: Move last epoch processing to zeek_done() (Arne Welzel, Corelight)\n\n    @Sheco reported that standalone epoch processing may exclude scheduled\n    events when the final sumstat epoch runs before. For example, this easily\n    happens when attempting to do sumstat observations within connection_state_remove().\n\n    Delay final epoch processing to zeek_done() instead.\n\n    This doesn't deal with the clustered version - this would need something\n    more elaborate and potentially a mechanism to delay the shutdown of\n    other cluster nodes until/after sumstat processing completed.\n\n7.1.0-dev.590 | 2024-11-21 14:40:53 +0100\n\n  * plugin: Add InitPreExecution() (Arne Welzel, Corelight)\n\n    Currently, plugins do not have a way to further inspect or even mutate\n    script functions after ZAM optimization ran. One use-case here is\n    zeek-perf-support [1]. This plugin wraps Stmt instances of functions,\n    events and hooks hooks with a small assembly stub to support JIT map\n    files [2] and for integration with perf tools.\n\n    This change introduces a new InitPreExecution() hook that runs after\n    ZAM optimization completed, just before the zeek_init() event is enqueued.\n\n    Additionally, remove the existing CPP_activation_hook. It doesn't seem\n    to be used. If it becomes necessary in the future, the new\n    InitPreExecution() hook can be leveraged instead.\n\n    [1] https://github.com/zeek/zeek-perf-support\n    [2] https://github.com/torvalds/linux/blob/master/tools/perf/Documentation/jit-interface.txt\n\n7.1.0-dev.588 | 2024-11-21 10:22:21 +0100\n\n  * Bump zeekjs to v0.14.0 (Arne Welzel, Corelight)\n\n        79b0c21 version: 0.14.0\n        b75b384 docker: Use Fedora 41 packages\n        d65cbc8 Minor header cleanup\n        4fd7e8b scripts: Remove __preload__.zeek and types.zeek\n        93a8113 CreateEnvironment: Unset kOwnsProcessState and kOwnsInspector\n        3b1f5d3 Instance::Init(): Replace parameters with Options struct\n\n  * Fix documentation for `have_spicy` [skip CI] (Benjamin Bannier, Corelight)\n\n    The continued line was incorrectly marked up (as a plain comment instead\n    of a Zeekygen comment) which caused only half of the docstring to be\n    rendered by Zeekygen.\n\n7.1.0-dev.583 | 2024-11-19 19:16:51 +0100\n\n  * Bump zeekjs to 0.13.2 (Arne Welzel, Corelight)\n\n        41ec748 cmake: Use foreach range\n        2b90a56 tests: Update new-event to run with 7.1+, remove ip_proto elsewhere\n        a596f6f Makefile: Update outdated commands\n        b954661 Enable `cmake/FindNodejs.cmake` to find more libnode versions\n\n7.1.0-dev.581 | 2024-11-19 10:52:56 -0700\n\n  * CI: Use test.sh script for running ZAM tests, but disable parts of it (Tim Wojtulewicz, Corelight)\n\n    This ensures that the normal test setup is run, which enables greedy\n    mode on Cirrus allowing us to over-provision the testing. This should\n    help speed up the ZAM builds a bit.\n\n7.1.0-dev.579 | 2024-11-18 10:13:00 -0800\n\n  * Order rule traversal in RuleMatcher::Match() operations by Rule index (Christian Kreibich, Corelight)\n\n7.1.0-dev.577 | 2024-11-18 09:39:05 -0800\n\n  * Define ordering on Rule instances and use on sets in RuleMatcher (Christian Kreibich, Corelight)\n\n7.1.0-dev.575 | 2024-11-18 17:28:18 +0100\n\n  * communityid: Use GetField() over GetFieldAs() (Arne Welzel, Corelight)\n\n    GetFieldAs() does not initialize an optional or default field. Apparently,\n    for ZAM that makes a difference, possibly the [] record construction is\n    optimized, not initializing proto until actually accessed. Not quite\n    sure why that's not happening for classic script interpretation\n    though.\n\n  * btest/Baseline.zam: Updates for proto addition (Arne Welzel, Corelight)\n\n7.1.0-dev.572 | 2024-11-16 09:34:27 -0700\n\n  * Make debug stream names use \"-\", and handle \"_\" transparently (Christian Kreibich, Corelight)\n\n    This looks consistent, and doesn't break any existing uses with underscores.\n\n  * Make \"-B all\" apply to plugin streams as well. (Christian Kreibich, Corelight)\n\n  * Sort streams in \"-B help\" output, and match case-insensitively throughout (Christian Kreibich, Corelight)\n\n    Matching of plugins' debug streams was still case-sensitive. Also contains some\n    minor output tweaks.\n\n    It'd be nice to only list plugin debug streams actually _used_ by plugins. I\n    didn't see a quick way to do that so that's for another time.\n\n7.1.0-dev.568 | 2024-11-15 19:08:02 -0800\n\n  * Don't forward out of the unknown IP transport analyzer (Tim Wojtulewicz, Corelight)\n\n  * The cisco-fabric-path pcap used in tests doesn't need the -C argument (Tim Wojtulewicz, Corelight)\n\n  * Add btests for ip_proto policy files (Tim Wojtulewicz, Corelight)\n\n7.1.0-dev.563 | 2024-11-15 17:39:49 +0100\n\n  * zeek-setup: Remove some unused headers (Arne Welzel, Corelight)\n\n    The zeek_binpac.h one isn't used directly, but keeping it over\n    <binpac.h> include. Also do some std prefixing. binpac.h has\n    'using namespace std', so these slip through :-(\n\n  * clang-format: Sort doctest header at the bottom (Arne Welzel, Corelight)\n\n  * RuleMatcher: Move plugin/Manager.h include from .h to .cc (Arne Welzel, Corelight)\n\n  * iosource/Manager: Remove superflous includes (Arne Welzel, Corelight)\n\n  * telemetry/Manager: Remove broker header include, add fnmatch.h (Arne Welzel, Corelight)\n\n  * logging/Manager: Fix using filename from input.h in debug log (Arne Welzel, Corelight)\n\n    ...and remove network_time, it's always included.\n\n  * Update external commit hashes (Arne Welzel, Corelight)\n\n  * communityid: Do not include ports for non TCP, UDP, ICMP (Arne Welzel, Corelight)\n\n    Checked against the result of pycommunityid. The SCTP case\n    isn't quite right, because Zeek's core will not have extracted\n    any ports for SCTP.\n\n7.1.0-dev.552 | 2024-11-14 14:15:24 +0100\n\n  * sumstats: Remove copy() for Broker::publish() calls (Arne Welzel, Corelight)\n\n    Serialization happens immediately at Broker::publish() time, there\n    should be no caching issues.\n\n  * broker/Publish: Use event time instead of network time (Arne Welzel, Corelight)\n\n    Discussed with @J-Gras, calling Broker::publish() within a scheduled\n    should use the \"intended timestamp\" implicitly.\n\n    This is subtle, but supposedly more expected when running\n    a pcap replay cluster.\n\n  * GH-3637: broker/Eventhandler: Deprecate Broker::auto_publish() for v8.1 (Arne Welzel, Corelight)\n\n    Relates to #3637\n\n  * btest: Remove Broker::auto_publish() usages (Arne Welzel, Corelight)\n\n    The ones that seemed to test Broker::auto_publish() were annotated\n    for removal.\n\n  * frameworks/control: Remove Broker::auto_publish() (Arne Welzel, Corelight)\n\n  * catch-and-release: Remove Broker::auto_publish() (Arne Welzel, Corelight)\n\n  * ssl/validate-certs: Remove Broker::auto_publish() (Arne Welzel, Corelight)\n\n  * sumstats: Remove Broker::auto_publish() (Arne Welzel, Corelight)\n\n  * cluster_started: No Broker::auto_publish() use (Arne Welzel, Corelight)\n\n  * openflow: Remove Broker::auto_publish() (Arne Welzel, Corelight)\n\n  * dhcp: Remove Broker::auto_publish() (Arne Welzel, Corelight)\n\n    This isn't prettier, but neither worse IMO. A test would be good.\n\n  * frameworks/notice: Remove Broker::auto_publish() (Arne Welzel, Corelight)\n\n  * netcontrol: Replace Broker::auto_publish() (Arne Welzel, Corelight)\n\n    I'd think we could drop the cluster.zeek and non-cluster.zeek and\n    just unconditionally do the publish(), but keeping it for now.\n\n  * intel: Switch to Cluster::publish() (Arne Welzel, Corelight)\n\n    This isn't quite making things a lot nicer, but more explicit.\n\n  * broker: Support publish() of unspecified set() / table() (Arne Welzel, Corelight)\n\n    Calling Broker::make_event(..., table()) or Broker::publish(..., table())\n    caused runtime type errors as same_type() would result in false.\n\n  * types: Fix table() resulting in table_type->IsSet() == true (Arne Welzel, Corelight)\n\n    typename(table()) apparently always resulted in a set[] type\n    being rendered. Make the yield type of an unspecified table\n    ANY so that type->IsSet() ends up false.\n\n    While at it, also render unspecified types as table(), set() and\n    vector() rather than vector of void, set[] or table[] of any which\n    IMO should help to figure out what's going.\n\n7.1.0-dev.535 | 2024-11-13 17:28:09 -0800\n\n  * CI: Use FEDORA40 crypto policy in Fedora 41 (Johanna Amann, Corelight)\n\n  * Bump zeekjs to 0.13.0 (Arne Welzel, Corelight)\n\n  * CI: bump FreeBSD 13 to 13.4, released in September (Christian Kreibich, Corelight)\n\n  * CI: drop Fedora 39, add 41 (Christian Kreibich, Corelight)\n\n  * Update doc submodule [nomail] [skip ci] (zeek-bot)\n\n7.1.0-dev.529 | 2024-11-13 14:36:04 -0700\n\n  * Add NEWS entry for ip_proto feature (Tim Wojtulewicz, Corelight)\n\n  * Move IP protocol names table out of policy script to init-bare (Tim Wojtulewicz, Corelight)\n\n  * Minor review nits (Tim Wojtulewicz, Corelight)\n\n  * Fixes for community ID hashing with new proto values (Tim Wojtulewicz, Corelight)\n\n  * Use new_connection instead of connection_state_remove (Tim Wojtulewicz, Corelight)\n\n  * Add policy script to remove ip_proto field, rename protocol naming script (Tim Wojtulewicz, Corelight)\n\n  * Rename protocol_id field to ip_proto and similar renaming for name field (Tim Wojtulewicz, Corelight)\n\n  * Increase size of proto fields to uint16_t, add common default value (Tim Wojtulewicz, Corelight)\n\n  * Disable part of core/dict-iteration-expire5 btest to avoid iteration bug (Tim Wojtulewicz)\n\n    The second set of seeds in this test trip the bug reported in #3538\n\n  * Add conn.log entries for connections with unhandled IP protocols (Tim Wojtulewicz, Corelight)\n\n  * CI: Add Ubuntu 24.10 (Johanna Amann, Corelight)\n\n7.1.0-dev.516 | 2024-11-12 12:26:41 -0700\n\n  * diff-remove-abspath: Add separate handling of Windows paths (Tim Wojtulewicz)\n\n  * diff-remove-abspath: Remove capture of windows drive letters from POSIX regex (Tim Wojtulewicz)\n\n7.1.0-dev.513 | 2024-11-12 16:16:11 +0100\n\n  * Bump Spicy to current `main`. (Robin Sommer, Corelight)\n\n7.1.0-dev.511 | 2024-11-12 16:00:00 +0100\n\n  * PktSrc: Remove first_timestamp condition check (Arne Welzel, Corelight)\n\n    The comment is stale and first_timestamp is only relevant/available\n    in pseudo_realtime.\n\n  * PktSrc: Fix includes (Arne Welzel, Corelight)\n\n  * PktSrc/RunState: Scale on first_wallclock and move pseudo realtime logic to RunState (Arne Welzel, Corelight)\n\n    check_pseudo_time() used zeek_start_time which skews things sufficiently\n    around being in the past when ZAM compilation takes multiple seconds. Switch\n    to using first_wallclock instead.\n\n    Further, move setting of first_timestamp and first_wallclock from PktSrc\n    into RunState's dispatch_packet(), so it's more centralized now.\n\n    The only pseudo_realtime piece left in PktSrc() is in GetNextTimeout() to\n    determine how long the PktSrc is idle until the next packet is ready.\n\n  * RunState.h: Deprecate misleadingly named current_packet_timestamp() (Arne Welzel, Corelight)\n\n    This returns current_pseudo, naming it current_packet_timestamp()\n    is actively misleading.\n\n  * debug: Add processing suspended/continued to debug.log (Arne Welzel, Corelight)\n\n7.1.0-dev.505 | 2024-11-12 10:26:15 +0100\n\n  * ZAM fixes for assignments involving \"any\" record fields (Vern Paxson, Corelight)\n\n  * fixes for (mostly ZAM) vector operation issues found by ASAN (Vern Paxson, Corelight)\n\n7.1.0-dev.501 | 2024-11-11 21:05:41 +0100\n\n  * GH-4006: Fix nullptr deref in Spicy accept/decline input (Evan Typanski, Corelight)\n\n    Seems like this is a continuation of #4006\n\n  * Spicy: Improve error messages reporting malformed unit names in EVT files. (Robin Sommer, Corelight)\n\n  * GH-3988: Spicy:: Remove unhelpful assertion. (Robin Sommer, Corelight)\n\n    In cases of a malformed event definition, this could fire instead of a\n    more helpful error message coming later.\n\n    Closes #3988.\n\n  * GH-4007: Spicy: Do not raise an analyzer error when a connection is missing a regular tear-down. (Robin Sommer, Corelight)\n\n    So far, when Zeek didn't see a connection's regular tear-down (e.g.,\n    because its state timed-out before we got to the end), we'd still\n    signal a regular end-of-data to Spicy parsers. As a result, they would\n    then typically raise a parse error because they were probably still\n    expecting data and would now declare it missing. That's not very\n    useful because semantically it's not really a protocol issue if the\n    data just doesn't make it over to us; it's a transport-layer issue\n    that Zeek already handles elsewhere. So we now switch to signaling\n    end-of-data to Spicy analyzers only if the connection indeed shuts\n    down regularly. This is also matches how BinPAC handles it.\n\n    This also comes with a test exercising various combinations of\n    end-of-data behavior so that we ensure consistent/desired behavior.\n\n    Closes #4007.\n\n7.1.0-dev.494 | 2024-11-11 10:25:43 +0100\n\n  * ci: Run ZAM CI if src/script_opt is modified (Arne Welzel, Corelight)\n\n    ...and rework && to || conditions.\n\n7.1.0-dev.492 | 2024-11-11 09:52:41 +0100\n\n  * DNS_Mgr: Remove processing of dns aliases in general (Tim Wojtulewicz, Corelight)\n\n  * ci: Add dnsmasq to a few platforms for testing (Arne Welzel, Corelight)\n\n  * DNS_Mgr: Fix aliases memory issues (Arne Welzel, Corelight)\n\n  * btest: Add integration test for DNS_Mgr (Arne Welzel, Corelight)\n\n    This makes use of an ephemeral dnsmasq instance\n\n  * DNS_Mgr: Remove usage of ares_getsock from Lookup (Tim Wojtulewicz, Corelight)\n\n  * DNS_Mgr: Remove usage of ares_getsock from GetNextTimeout (Tim Wojtulewicz, Corelight)\n\n  * DNS_Mgr: Switch to ares_set_servers_csv (Tim Wojtulewicz, Corelight)\n\n  * DNS_Mgr: Use ares_dns_record methods for queries (Tim Wojtulewicz, Corelight)\n\n  * Update vcpkg submodule to pick up c-ares v1.34.2 (Tim Wojtulewicz, Corelight)\n\n  * Update c-ares submodule to v1.34.2 (Tim Wojtulewicz, Corelight)\n\n7.1.0-dev.481 | 2024-11-11 09:34:10 +0100\n\n  * policy/community-id: Populate conn$community_id in new_connection() (Arne Welzel, Corelight)\n\n    This wasn't possible before #3028 was fixed, but now it's safe to set\n    the value in new_connection() and allow other users access to the\n    field much earlier. We do not have to deal with connection_flipped()\n    because the community-id hash is symmetric.\n\n7.1.0-dev.478 | 2024-11-08 18:36:07 +0100\n\n  * Fixed ZAM memory leak when coercing values to \"any\" (Vern Paxson, Corelight)\n\n  * ci: Remove -b from test_script lines for zam tasks (Arne Welzel, Corelight)\n\n7.1.0-dev.475 | 2024-11-08 15:35:00 +0100\n\n  * fixes for ZAM's propagation of control flow information for some degenerate constructs (Vern Paxson, Corelight)\n\n7.1.0-dev.473 | 2024-11-08 15:31:39 +0100\n\n  * fixed ZAM memory leak when looping over vectors of records (Vern Paxson, Corelight)\n\n7.1.0-dev.471 | 2024-11-08 15:22:48 +0100\n\n  * fixed access to uninitialized memory in ZAM's \"cat\" built-in (Vern Paxson, Corelight)\n\n  * GH-3906: ci: Add asan and ubsan sanitizer tasks for ZAM (Arne Welzel, Corelight)\n\n7.1.0-dev.467 | 2024-11-06 11:50:12 +0100\n\n  * Make Spicy hook execution order deterministic in test (Benjamin Bannier, Corelight)\n\n  * Bump auxil/spicy to latest development snapshot (Benjamin Bannier, Corelight)\n\n7.1.0-dev.464 | 2024-11-05 17:38:41 +0100\n\n  * Fix potential nullptr deref in Spicy plugin runtime (Benjamin Bannier, Corelight)\n\n    If we added a file but the other side of the connection had already run\n    into a protocol violation and shut down we could previously have\n    dereferenced a null cookie. This patch fixes the code so it now throws\n    in such scenarios.\n\n  * Assume no Spicy cookie in most places (Benjamin Bannier, Corelight)\n\n    We would previously assert that it was available which could have lead\n    to aborts since when the analyzer for either side of a connection shuts\n    down the connection cookie could get cleared and become nil. This patch\n    reworks the code slightly so we now never assume it is available. We do\n    this by either throwing or by making the whole operation requesting the\n    cookie a noop.\n\n7.1.0-dev.461 | 2024-11-04 19:35:21 +0100\n\n  * btest: Add detect-sqli test script (Arne Welzel, Corelight)\n\n    ...I added the baselines during the merge, just not the test itself.\n\n7.1.0-dev.459 | 2024-11-04 18:47:02 +0100\n\n  * switched CPPCompile::Canonicalize() to take std::string instead of const char* (Vern Paxson, Corelight)\n\n7.1.0-dev.457 | 2024-11-04 16:33:14 +0100\n\n  * minor ZAM BTest updates for recently added fnv1a64 BiF (Vern Paxson, Corelight)\n\n7.1.0-dev.455 | 2024-11-04 16:32:37 +0100\n\n  * RuleMatcher: Use a single list for tracking pattern_matches (Arne Welzel, Corelight)\n\n  * ZeekString: Implement move constructor (Arne Welzel, Corelight)\n\n  * Bump and reenable spicy-format pre-commit hook (Benjamin Bannier, Corelight)\n\n  * Add test for TCP over 802.3/SNAP (Johanna Amann, Corelight)\n\n    This admittedly is a quite esoteric combination of protocols. But - as\n    we do correctly support them, it seems nice to have a slightly more\n    complete testcase that covers this.\n\n7.1.0-dev.447 | 2024-10-30 14:52:40 +0100\n\n  * CI: Upgrade FreeBSD 14 to 14.1 (Evan Typanski, Corelight)\n\n  * CI: Add Ubuntu Clang task (Evan Typanski, Corelight)\n\n    This feels more like a band-aid solution - it still requires very manual\n    intervention to get the next builds, but at least this way we don't rely\n    on whatever Clang/libc++ happens to ship with FreeBSD for the only\n    libc++ testing. It seems like sanitizer builds don't use libc++, but I'd\n    rather a dedicated Linux/Clang/libc++ task at least.\n\n  * Fix up minor warnings in touched files (Evan Typanski, Corelight)\n\n  * GH-3994: Fix Clang 19 deprecation failure (Evan Typanski, Corelight)\n\n    Fixes #3994\n\n    Clang 19 with libc++ started failing to compile because the default\n    implementation of `std::char_traits` was removed, making uses of\n    `std::char_traits<unsigned char>` invalid. This was more of used for\n    convenience before, but it should be roughly the same behavior with\n    `char`.\n\n    See relevant LLVM commits:\n\n    https://github.com/llvm/llvm-project/commit/aeecef08c385b1e4955155dd649a2d3724463849\n\n    https://github.com/llvm/llvm-project/commit/08a0faf4cd32bce6c51027ea9b5ec351747995b4\n\n7.1.0-dev.442 | 2024-10-30 14:43:18 +0100\n\n  * pre-commit-config: Disable spicy-format (Arne Welzel, Corelight)\n\n    This fails to install currently: bbannier/spicy-format#157\n\n7.1.0-dev.441 | 2024-10-30 14:36:57 +0100\n\n  * GH-3984: Fix issues with Modbus message logging (Emmanuele Zambon)\n\n    This commit fixes three issues with Zeek's Modbus message logging:\n\n    1 - Some exception responses (e.g., READ_COILS_EXCEPTION) are logged\n        twice: once without and once with the exception message.\n    2 - Some exception responses (e.g., PROGRAM_484_EXCEPTION) are not\n        logged.\n    3 - Some known but reserved function codes (e.g., PROGRAM_UNITY) are\n        logged as unk-xxx (e.g., unk-90), while it would be possible to\n        log their known name.\n\n    To address these inconsistencies, the modbus parser has been updated\n    to parse all exception responses (i.e., all responses where the MSB\n    of the function code is set) using the already defined Exception\n    message.\n    Also, the Modbus main.zeek script has been updated to consistently\n    demand logging exception responses to the specialized\n    modbus_exception event, rather than logging some exception responses\n    in the modbus_message event and others in the modbus_exception event.\n    Finally, the main.zeek script has been updated to make sure that\n    for every known function code, the corresponding exception code was\n    also present, and the enumeration of known function codes in\n    consts.zeek has been expanded.\n\n    Closes #3984\n\n7.1.0-dev.439 | 2024-10-30 14:33:48 +0100\n\n  * signatures: Add data_end_offset to signature_match() and custom events (Arne Welzel, Corelight)\n\n    This change tracks the current offset (number of bytes fed into matchers)\n    on the top-level RuleEndpointState such that we can compute the relative ending\n    for matched texts individually.\n\n    Additionally, it adds the data_end_offset as a new optional parameter to\n    signature_match().\n\n  * Add pattern_end_offset to signature_state (ronny8360988)\n\n7.1.0-dev.436 | 2024-10-30 11:47:53 +0000\n\n  * modbus: Skip non-modbus traffic testing with Spicy SSL (Arne Welzel, Corelight)\n\n    With Spicy SSL, there's no SSL conn.log produced.\n\n  * testing: Add have-spicy-ssl helper and update tests (Arne Welzel, Corelight)\n\n  * Improvements in FNV1A hash functions (Martin van Hensbergen)\n\n    - Add FNV1a64 hash function\n    - make hash function type aware\n    - add unit tests\n\n7.1.0-dev.430 | 2024-10-29 14:08:25 +0100\n\n  * account for spaces encoding to plus signs in sqli regex detection (Cooper Grill)\n\n7.1.0-dev.428 | 2024-10-29 13:50:05 +0100\n\n  * fixed \"-O gen-C++\" naming of \"when\" captures to avoid ambiguities due to inlining (Vern Paxson, Corelight)\n\n    \tPreviously there was logic for doing this, but it was ineffectual\n    \tdue to the order in which canonicalization was done. This problem\n    \tmanifested non-deterministically depending on order-of-generation\n    \tof \"when\" lambdas, which is why previous testing didn't catch it.\n\n  * Simplified & made more robust maintenance helper script for \"-O gen-C++\" testing (Vern Paxson, Corelight)\n\n  * \"-a cpp\" baseline updates to reflect recent BTest changes (Vern Paxson, Corelight)\n\n7.1.0-dev.423 | 2024-10-24 07:08:45 -0700\n\n  * Telemetry framework: move BIFs to the primary-bif stage (Christian Kreibich, Corelight)\n\n  * Minor comment tweaks for init-frameworks-and-bifs.zeek (Christian Kreibich, Corelight)\n\n7.1.0-dev.420 | 2024-10-23 05:49:31 -0700\n\n  * Update broker submodule (Christian Kreibich, Corelight)\n\n  * Update doc submodule [nomail] [skip ci] (zeek-bot)\n\n7.1.0-dev.418 | 2024-10-22 19:04:22 +0200\n\n  * btest/telemetry: Fix \"Note compilable\" typo (Arne Welzel, Corelight)\n\n  * misc/stats: Add zeek_net_timestamp_seconds (Arne Welzel, Corelight)\n\n    Adding a metric for the network time value itself should make it\n    possible to observe it stopping or growing slowly as compared to\n    realtime when Zeek isn't able to keep up.\n\n    Also, modify the telemetry/log.zeek test to include misc/stats and\n    log at a higher frequency with a more interesting pcap.\n\n  * telemetry/Manager: Remove variant include (Arne Welzel, Corelight)\n\n  * GH-3947: telemetry: Invoke Telemetry::sync() only at scrape/collection time (Arne Welzel, Corelight)\n\n    This stops invoking Telemetry::sync() via a scheduled event and instead\n    only invokes it on-demand. This makes metric collection network time\n    independent and lazier, too.\n\n    With Prometheus scrape requests being processed on Zeek's main thread\n    now, we can safely invoke the script layer Telemetry::sync() hook.\n\n7.1.0-dev.413 | 2024-10-22 11:24:50 +0200\n\n  * GH-3978: Bump zeekjs to 0.12.1 (Arne Welzel, Corelight)\n\n        7ec0953 ci: Bump actions/upload-artifact\n        8e5914d ci/docker: Bump distros, update some OBS repos\n        129b737 Fix crash during shutdown\n\n7.1.0-dev.410 | 2024-10-21 15:51:05 +0200\n\n  * GH-3962: Prevent non-Modbus on port 502 to be reported as Modbus (Emmanuele Zambon)\n\n    This commit prevents most non-Modbus TCP traffic on port 502 to be\n    reported as Modbus in conn.log as well as in modbus.log.\n    To do so, we have introduced two &enforce checks in the Modbus\n    protocol definition that checks that some specific fields of the\n    (supposedly) Modbus header are compatible with values specified in\n    the specs.\n\n    To ensure non-regression, with this commit we also introduce a\n    new btest.\n\n    Closes #3962\n\n7.1.0-dev.408 | 2024-10-18 17:51:04 -0700\n\n  * factored CPP source's main header into collection of per-source-file headers (Vern Paxson, Corelight)\n\n  * renamed script optimization Attrs.h header to prepare for factoring large Compile.h (Vern Paxson, Corelight)\n\n  * factored ZAM source's main header into collection of per-source-file headers (Vern Paxson, Corelight)\n\n  * Update doc submodule [nomail] [skip ci] (zeek-bot)\n\n7.1.0-dev.403 | 2024-10-18 09:55:20 -0700\n\n  * Fix installation of Python packages in generate docs CI job again (Benjamin Bannier, Corelight)\n\n  * Update doc submodule [nomail] [skip ci] (zeek-bot)\n\n7.1.0-dev.400 | 2024-10-15 17:11:57 +0200\n\n  * Fix invalid Sphinx directive in docstring (Benjamin Bannier, Corelight)\n\n  * Bump GH actions for generate-docs job (Benjamin Bannier, Corelight)\n\n  * Fix installation of Python packages in generate docs CI job (Benjamin Bannier, Corelight)\n\n  * Bump GH actions for pre-commit job (Benjamin Bannier, Corelight)\n\n  * Pin distribution for pre-commit CI job (Benjamin Bannier, Corelight)\n\n7.1.0-dev.393 | 2024-10-15 09:56:19 +0200\n\n  * Test `.evt` file `&priority` (Evan Typanski, Corelight)\n\n    This was not documented nor tested, so this tests the behavior.\n    Documentation should be added later.\n\n7.1.0-dev.390 | 2024-10-09 15:36:41 -0700\n\n  * removed specialized ZAM instructions for GTPv1 and Teredo cleanup BiFs (Vern Paxson, Corelight)\n\n7.1.0-dev.388 | 2024-10-09 15:36:09 -0700\n\n  * -a zam baseline updates reflecting recent changes to main baselines (Vern Paxson, Corelight)\n\n7.1.0-dev.386 | 2024-10-09 14:26:35 -0700\n\n  * GH-3957: input/Raw: Rework GetLine() (Arne Welzel, Corelight)\n\n  * GH-215: POP3: Rework unbounded pending command fix (Arne Welzel, Corelight)\n\n7.1.0-dev.383 | 2024-10-04 12:45:05 -0700\n\n  * Bump zeek-testing-cluster to pull in a baseline update (Christian Kreibich, Corelight)\n\n7.1.0-dev.381 | 2024-10-04 19:31:36 +0200\n\n  * GH-3949: Fix flaky `missing-file-initially` test (Evan Typanski, Corelight)\n\n    That test got flaky probably from #3949 on centosstream9 CI. You can\n    replicate that behavior by increasing the sleep time when waiting for\n    the file such that the test will attempt to read the missing file again.\n    Since the one second wait for file is glacially slow for this, speeding\n    it up should mean that the file gets created sooner and so the test\n    won't try to open the file again. But, it's always still technically\n    possible, since the test will wait for 10 seconds and the heartbeat\n    seems to be 1 second. At least if that happens, it's probably a bug or\n    massive slowdown of some kind.\n\n7.1.0-dev.379 | 2024-10-04 13:34:31 +0200\n\n  * Add missing newline in `spicyz` usage message (Benjamin Bannier, Corelight)\n\n7.1.0-dev.377 | 2024-10-02 20:17:28 +0200\n\n  * Fix input error test nondeterminism (Evan Typanski, Corelight)\n\n    It seems like other similar tests get by because they have more \"stuff\"\n    before they call `terminate()` most likely. But, to be safe, just\n    removing the \"received termination signal\" line seems like the best\n    approach.\n\n7.1.0-dev.375 | 2024-10-01 11:40:16 +0200\n\n  * Report suppressed warnings count (Evan Typanski, Corelight)\n\n    This also triggers if there is one warning, which seems a little weird,\n    but it seems mostly reasonable.\n\n  * GH-3692: Avoid duplicating warnings when reading table (Evan Typanski, Corelight)\n\n    Invalid lines in a file was the one case that would not suppress future\n    warnings. Just make it suppress warnings too, but clear that suppression\n    if there is a field in between that doesn't error.\n\n    Fixes #3692\n\n7.1.0-dev.371 | 2024-09-27 15:17:04 -0700\n\n  * A round of ZAM/gen-C++-related updates and fixes (Vern Paxson, Corelight)\n\n    - factoring of logic used by ZAM's low-level optimizer when adjusting control flow info\n    - BTest baseline update for more complete function/lambda names\n    - tweak to -O gen-C++ maintenance script to avoid treating plugins as BTests\n    - fixed lambda hash collision bug due to function descriptions lacking full parameter information\n    - fixes (to avoid collisions) for AST profiling's function hash computations\n    - removed unused ZAM cast-to-any operation\n    - fixes for ZAM tracking the return type associated with function calls\n    - ZAM control-flow tracking now explicitly includes the ends of loops\n    - fix for ZAM identification of common subexpressions\n    - \"-O dump-final-ZAM\" option similar to \"dump-ZAM\" only prints final version of functions\n    - fix for setting object locations to avoid use-after-free situation\n    - extended \"-O allow-cond\" to apply to both gen-C++ and gen-standalone-C++\n    - -O gen-C++ fix for run-time warnings for \"when\" lambdas\n    - fix to -O gen-C++ for recent AST profiling changes for identifying function parameters\n    - fix to -O gen-C++ for dealing with \"hidden\" parameters\n    - tweak to prevent an incorrect warning for scripts compiled to C++\n    - fixed overly narrow Spicy test for manipulating packet analyzers\n    - fixed memory leak for recursive ZAM functions that exit via an exception\n    - remove unnecessary header include\n\n7.1.0-dev.351 | 2024-09-27 16:47:39 +0200\n\n  * Honor no plaintext password logging for PASS cmd (Martin van Hensbergen)\n\n7.1.0-dev.349 | 2024-09-27 15:37:13 +0200\n\n  * NEWS: Update (Arne Welzel, Corelight)\n\n  * scripts/base/cluster: Move active node management into node_down() (Arne Welzel, Corelight)\n\n    With the idea of an alternative cluster backend, we should\n    not maintain Cluster state within low-level Broker events.\n\n  * logging/Manager: Extract another CreateWriter() helper (Arne Welzel, Corelight)\n\n    For other cluster backends, CreateWriter() will use a logger's filter\n    configuration rather than receiving all configuration through CreateLog.\n    Extract a helper out from WriteToFilters() for reuse.\n\n  * logging/Manager: Extract path_func invocation into helper (Arne Welzel, Corelight)\n\n  * logging: Dedicated log flush timer (Arne Welzel, Corelight)\n\n    Log flushing is currently triggered based on the threading heartbeat timer\n    of WriterBackends and the hard-coded WRITE_BUFFER_SIZE 1000.\n\n    This change introduces a separate timer that is managed by the logger\n    manager instead of piggy-backing on the heartbeat timer, as well as a\n    const &redef for the buffer size.\n\n    This allows to modify the log flush frequency and batch size independently\n    of the threading heartbeat interval. Later, this will allow to re-use the\n    buffering and flushing logic of writer frontends for non-Broker cluster\n    backends, too.\n\n    One change here is that even frontends that do not have a backend will\n    be flushed regularly. This is wanted for non-Broker backends and should be\n    very cheap. Possibly, Broker can piggy back on this timer down the road, too,\n    rather than using its own script-level timer (see Broker::log_flush()).\n\n  * all: Change to use Func::GetName() (Arne Welzel, Corelight)\n\n  * script_opt: Use Func::GetName() (Arne Welzel, Corelight)\n\n  * Func: Add std::string name accessors, deprecate const char* versions (Arne Welzel, Corelight)\n\n  * plugin/ComponentManager: Support lookup by EnumValPtr (Arne Welzel, Corelight)\n\n7.1.0-dev.339 | 2024-09-27 14:59:45 +0200\n\n  * zeek-setup: Support enabling debug streams through env variable (Arne Welzel, Corelight)\n\n    For debugging btests, it can be convenient to enable debug streams\n    by setting an environment variable rather than editing zeek invocations\n    and adding -B selectively.\n\n    Sample use case:\n\n        $ export ZEEK_DEBUG_LOG_STREAMS=all\n        $ btest -d core/failing-test.zeek\n        $ less .tmp/core/failing-test/debug.log\n\n    This change makes Zeek's -B option and ZEEK_DEBUG_LOG_STREAMS are additive.\n\n  * Install `procps` in OpenSuse Leap images (Benjamin Bannier, Corelight)\n\n    The tests `core.sigterm-regular` and `core.sigterm-stdin` rely on `ps`\n    to be present which is not the case anymore on OpenSuse Leap; install it\n    explicitly there.\n\n  * Bump auxil/spicy to latest development snapshot (Benjamin Bannier, Corelight)\n\n7.1.0-dev.332 | 2024-09-23 10:59:51 -0700\n\n  * pop3: Remove unused headers (Arne Welzel, Corelight)\n\n  * pop3: Prevent unbounded state growth (Arne Welzel, Corelight)\n\n    The cmds list may grow unbounded due to the POP3 analyzer being in\n    multiLine mode after seeing `AUTH` in a Redis connection, but never\n    a `.` terminator. This can easily be provoked by the Redis ping\n    command.\n\n    This adds two heuristics: 1) Forcefully process the oldest commands in\n    the cmds list and cap it at max_pending_commands. 2) Start raising\n    analyzer violations if the client has been using more than\n    max_unknown_client_commands commands (default 10).\n\n    Closes #3936\n\n  * btest/pop3: Add somewhat more elaborate testing (Arne Welzel, Corelight)\n\n    PCAP taken from here: https://tranalyzer.com/tutorial/pop and reference\n    added to Traces/README.\n\n7.1.0-dev.328 | 2024-09-18 19:10:43 +0200\n\n  * Add enum value negative check (Evan Typanski, Corelight)\n\n    There was one already at parse time, this adds a check later so that\n    cases like overflows or internal enums with negative values get caught.\n\n  * Fix port/enum values `SizeOf` not being a count (Evan Typanski, Corelight)\n\n    Really, they both should be count. But, they were getting provided as an\n    integer. Port is easy since it is backed by an unsigned value. Enums\n    *should* be unsigned, but aren't. This doesn't address that, it just\n    takes the other name for this operator (absolute value) and makes the\n    enum value positive if it's negative.\n\n    This fixes a case where using the size of operator on enum/port values\n    in certain contexts (like the default parameter of a struct) would cause\n    an internal error.\n\n7.1.0-dev.324 | 2024-09-17 18:51:34 +0200\n\n  * btest: Update baselines for removal-hooks addition (Arne Welzel, Corelight)\n\n    The removal_hooks field exists in bare mode (seems fine) and moved within the\n    connection record to earlier, so a bunch of baselines changed\n\n  * gtpv1: Replace connection_state_remove() with RemovalHook (Arne Welzel, Corelight)\n\n  * teredo: Replace connection_state_remove() with RemovalHook (Arne Welzel, Corelight)\n\n    Remove overhead of unconditionally calling remove_teredo_connection()\n    for *every* connection by installing a connection removal hook for only\n    when state was allocated.\n\n  * teredo: Move conn member from analyzer to encapsulation (Arne Welzel, Corelight)\n\n    There's only a single instance of the Teredo analyzer. Mutating the conn\n    member for every new packet and leaving it set after processing the\n    packet is confusing. Move conn into TeredoEncapsulation instead, or pass\n    it explicitly.\n\n7.1.0-dev.319 | 2024-09-17 18:50:40 +0200\n\n  * Update broker submodule (Arne Welzel, Corelight)\n\n    ...to pin prometheus to 1.2.4\n\n  * telemetry: Move callbacks to Zeek (Arne Welzel, Corelight)\n\n    Now that we run callbacks on the main loop, we can move callback support\n    for Counter and Gauge instances directly into Zeek and don't need to patch\n    prometheus-cpp anymore.\n\n  * auxil/prometheus-cpp: Pin to 1.2.4 (Arne Welzel, Corelight)\n\n7.1.0-dev.315 | 2024-09-12 09:18:35 +0200\n\n  * Update Dockerfile to avoid LegacyKeyValueFormat warning (MP-Corelight)\n\n  * Fix potential endless loop in util::strreplace (Tim Wojtulewicz, Corelight)\n\n7.1.0-dev.311 | 2024-09-12 08:52:02 +0200\n\n  * Remove core.negative-time btest (Tim Wojtulewicz, Corelight)\n\n    This test is failing with libpcap libpcap 1.10; for more information\n    see https://github.com/zeek/zeek/issues/3921\n\n7.1.0-dev.309 | 2024-09-12 08:51:08 +0200\n\n  * Bump spicy-format to 0.16.2 (Johanna Amann, Corelight)\n\n  * Spicy SSL: reformat with new version of spicy format (Johanna Amann, Corelight)\n\n7.1.0-dev.305 | 2024-09-11 16:55:55 +0200\n\n  * Spicy SSL analyzer:\n\n    This commit adds an alternative Spicy-based SSL analyzer. It supports\n    nearly the entire functionality of the current binpac analyzer, with\n    the exception of DTLS and decryption.\n\n    This currently is mostly for internal tests, or for Spicy testing purposes.\n    There is no functional advantage to use the Spicy based analyzer - it does\n    not have any additional features.\n\n    It is currently gated behind a configure-time flag that needs to be provided\n    to enable it (--enable-spicy-ssl).\n\n7.1.0-dev.259 | 2024-09-09 13:24:45 +0200\n\n  * script_opt/ZAM/IterInfo.h: Add missing Dict.h dependency (Arne Welzel, Corelight)\n\n    Triggered when trying to remove some other includes elsewhere.\n\n  * script_opt/ZAM: ZBody.h / Support.h: Cleanup includes, use forward declarations (Arne Welzel, Corelight)\n\n    Not sure the IsAny() convenience functions were really worth the\n    include zeek/Expr.h.\n\n  * script_opt/ZAM/Profile: Remove Zeek header includes (Arne Welzel, Corelight)\n\n    This can stand by itself.\n\n  * script_opt: Extend Support.h to break include dependencies (Arne Welzel, Corelight)\n\n    Rebuilding ZBody.cc is annoyingly slow with UBSAN or ASAN enabled. A rebuild\n    is currently triggered when touching Manager.h files like logging/Manager.h,\n    broker/Manager.h or file_analysis/Manager.h and various other headers that are\n    included from there or directly in ZBody.h.\n\n    Add tiny wrapper functions to Support.h that encapsulate the actual Zeek\n    functionality and move the includes to Support.cc instead. This will\n    cause frequent Support.cc rebuilds, but that is decently fast.\n\n    This comes at the expense of one indirect function call for some ops, but\n    its overhead should be negligible in comparison to a lookup for a\n    connection or component or a log_mgr->Write() call.\n\n  * script_opt: Do not include ZBody.h in ZAM/Validate.cc (Arne Welzel, Corelight)\n\n    Touching broker/Manager.h or logging/Manager.h or anything that's\n    included in ZBody.h results in a rebuild of a bunch of files in ZAM.\n    Particularly, ZAM/Validate.cc takes much too long to recompile for\n    me (45+ seconds) and apparently that's mostly by accident.\n\n    Clean up the ZAM/Validate.cc includes to prevent this.\n\n7.1.0-dev.252 | 2024-09-06 19:17:29 +0200\n\n  * btest/ldap: Add regression test for #3919 (Arne Welzel, Corelight)\n\n    This works as expected in master, it's just that we forgot to backport\n    PR #3845 to 7.0.1. Add the PCAP from Martin anyhow.\n\n    Closes #3919.\n\n7.1.0-dev.250 | 2024-09-06 17:47:36 +0200\n\n  * postgresql: Simplify SSL buffering and forwarding (Arne Welzel, Corelight)\n\n    The ssl_sink can only be connected form the backend side, so don't\n    overcomplicate it.\n\n  * postgresql: Initial parser implementation (Arne Welzel, Corelight)\n\n    This adds a protocol parser for the PostgreSQL protocol and a new\n    postgresql.log similar to the existing mysql.log.\n\n    This should be considered preliminary and hopefully during 7.1 and 7.2\n    with feedback from the community, we can improve on the events and logs.\n    Even if most PostgreSQL communication is encrypted in the real-world, this\n    will minimally allow monitoring of the SSLRequest and hand off further\n    analysis to the SSL analyzer.\n\n    This originates from github.com/awelzel/spicy-postgresql, with lots of\n    polishing happening in the past two days.\n\n7.1.0-dev.247 | 2024-09-05 19:19:31 +0200\n\n  * testing/external: Update private baselines (Arne Welzel, Corelight)\n\n  * analyzer/syslog: Reformat with spicy-format (Arne Welzel, Corelight)\n\n  * analyzer/finger: Reformat with spicy-format (Arne Welzel, Corelight)\n\n  * scripts/spicy: Reformat with spicy-format (Arne Welzel, Corelight)\n\n  * pre-commit: Add spicy-format (Arne Welzel, Corelight)\n\n    This excludes the larger protocol analyzers. These should be formatted\n    during the 7.2 cycle, shortly before 8.0.\n\n7.1.0-dev.241 | 2024-09-04 14:53:19 -0700\n\n  * Check for netbios to avoid reporting extra bad DNS opcodes (Tim Wojtulewicz, Corelight)\n\n  * Add weird for unhandled opcodes in DNS analyzer (Tim Wojtulewicz, Corelight)\n\n7.1.0-dev.238 | 2024-09-03 09:03:24 -0700\n\n  * Bump auxil/spicy to latest development snapshot (Benjamin Bannier, Corelight)\n\n7.1.0-dev.236 | 2024-09-03 10:18:32 +0200\n\n  * Remove pre-commit exclusions for clang-format (Benjamin Bannier, Corelight)\n\n    We previously would ignore any files under `auxil/`. Since pre-commit\n    only formats files tracked in this repo, and `auxil/` today contains\n    only submodules this exclusion did not exclude anything; if however we\n    ever end up adding C++ files under `auxil/` we would like them to be\n    formatted consistently.\n\n  * Bump clang-format (Benjamin Bannier, Corelight)\n\n    This patch contains a bump of the configured clang-format version from\n    17.0.3 to 18.1.8 and automatically generated C++ source updates. The\n    main difference we are seeing from this is fixes for previously\n    incomplete reformats.\n\n7.1.0-dev.233 | 2024-09-03 10:02:59 +0200\n\n  * Bump zeek-aux for zeek/zeek-aux#57 (Arne Welzel, Corelight)\n\n7.1.0-dev.232 | 2024-08-30 18:56:24 +0200\n\n  * http: fix password capture when enabled (Pierre Lalet)\n\n    The current implementation would only log, if the password contains a\n    colon, the part before the first colon (e.g., the password\n    `password:password` would be logged as `password`).\n\n    A test has been added to confirm the expected behaviour.\n\n7.1.0-dev.230 | 2024-08-30 15:38:52 +0200\n\n  * RunState: Drop broker_mgr->Active() usage (Arne Welzel, Corelight)\n\n    ...and deprecate it. The communication_enabled flag doesn't really\n    make a difference in how the IO loop works.\n\n  * logging/WriterFrontend: No need for explicit CleanupWriteBuffer() (Arne Welzel, Corelight)\n\n    Any pending records will be cleaned in the destructor of WriterFrontend\n    and WriteBuffer, no need to do this explicitly.\n\n  * logging: Switch index-assignment of raw pointers to emplace_back() (Arne Welzel, Corelight)\n\n  * broker/logging: Change threading::Value** usage std::vector instead (Arne Welzel, Corelight)\n\n    This allows to leverage automatic memory management, less allocations\n    and using move semantics for expressing ownership.\n\n    This breaks the existing logging and broker API, but keeps the plugin\n    DoWrite() and HookLogWrite() methods functioning.\n\n    It further changes ValToLogVal to return a threading::Value rather than\n    a threading::Value*. The vector_val and set_val fields unfortunately\n    use the same pointer-to-array-of-pointers approach. this can'tbe changed\n    as it'd break backwards compatibility for plugin provided input readers\n    and log writers.\n\n  * threading/Value: Support move and copy constructors (Arne Welzel, Corelight)\n\n7.1.0-dev.222 | 2024-08-27 13:29:12 +0100\n\n  * Fix parsing of version field in SSLv2 client hello (Johanna Amann, Corelight)\n\n    It turns out that, for probably a long time, we have reported an\n    incorrect version when parsing an SSLv2 client hello. We always reported\n    this as SSLv2, no matter which version the client hello actually\n    contained.\n\n    This bug probably went unnoticed for a long time, as SSLv2 is\n    essentially unused nowadays, and as this field does not show up in the\n    default logs.\n\n    This was found due to a baseline difference when writing the Spicy SSL\n    analyzer.\n\n7.1.0-dev.219 | 2024-08-23 14:18:35 +0200\n\n  * Analyzer: Do not add child analyzers when finished (Arne Welzel, Corelight)\n\n    Depending on an analyzer's implementation, its Done() method may\n    attempt to access analyzer or connection state when executing.\n    When this happens in the destructor of the parent analyzer during\n    the process of destructing a connection, this state may have been\n    deleted, resulting in use-after-free crashes or worse memory\n    corruption.\n\n    The following cases have been observed in the wild for when this happens.\n\n      * PIA matching during Done() for undelivered TCP data enables a Spicy\n        based analyzer which in turn attempts to raise an analyzer violation\n        during Done()->EndOfData().\n\n      * Spicy analyzers attaching new analyzers during their Done() processing\n        which in turn attempt to use TCP() (to call FindChild()) during Done()\n        while the analyzer tree / connection is being destructed.\n\n    The second scenario was previously found to happen in the HTTP analyzer\n    and fixed with 6ef9423f3cff13e6c73f97eb6a3a27d6f64cc320.\n\n    Plug these scenarios by short-circuiting AddChildAnalyzer() if the analyzer\n    or connection have finished or are being finished.\n\n7.1.0-dev.217 | 2024-08-23 09:40:53 +0200\n\n  * TCP_Reassembler: Fix IsOrig() position in Match() call (Arne Welzel, Corelight)\n\n    Found during a debug session with @rsmmr. Undelivered TCP data\n    would only be matched for the responder and eol set to IsOrig().\n\n  * Spicy: Register well-known ports through an event handler. (Robin Sommer, Corelight)\n\n    This avoids the earlier problem of not tracking ports correctly in\n    scriptland, while still supporting `port` in EVT files and `%port` in\n    Spicy files.\n\n    As it turns out we are already following the same approach for file\n    analyzers' MIME types, so I'm applying the same pattern: it's one\n    event per port, without further customization points. That leaves the\n    patch pretty small after all while fixing the original issue.\n\n  * Revert \"Remove deprecated port/ports fields for spicy analyzers\" (Robin Sommer, Corelight)\n\n    This reverts commit 15d404dd191a723960e4efd956eec22739d3f1c2.\n\n7.1.0-dev.211 | 2024-08-20 11:38:48 +0100\n\n  * Make ssl_history work for SSLv2 handshakes/connections (Johanna Amann, Corelight)\n\n    It turns out that the ssl_history field never was populated with C/S for\n    SSLv2 connections, or connections using the SSLv2 handshake. In our\n    testcases, the latter is especially common - with connections up to TLS1\n    using the old SSLv2 client hello for backwards compatibility.\n\n    This change resolves this issue. As the history is not by default\n    enabled in a lot of locations, baseline impact is minor.\n\n7.1.0-dev.209 | 2024-08-20 10:10:46 +0200\n\n  * broker: Deprecate MakeEvent(ValPList*) (Arne Welzel, Corelight)\n\n    The variadic broker messaging BIFs currently convert @ARGS@ into a\n    ValPList before passing it on to MakeEvent(). This appears historic\n    plumbing. Implement the same functionality using Span<const ValPtr>\n    and do the extra copying in the now deprecated MakeEvent().\n\n    Further, make passing a frame optional as not all callers may\n    have one available.\n\n  * Span: Remove deduction guideline for Iter, Iter, include cleanup (Arne Welzel, Corelight)\n\n    We don't have a constructor for that, so that's confusing, also\n    <array> isn't used.\n\n  * ScriptOpt: Ensure global statements have non-null scope (Arne Welzel, Corelight)\n\n    The ProfileFunc() logic assumed that GetScope() returned a non-nullptr.\n    This holds except for the synthetic global statements function.\n\n    Fix the latter and add an assert, also add a name to the type so it's\n    easier to recognize in a debugger what's going on, otherwise the name\n    is \"\".\n\n    This was found by UBSAN due to it seeing the ->OrderedVars() call on a\n    nullptr. Elsewhere, num_params == 0 shielded from that access and so\n    didn't lead to crashes.\n\n  * Update gen-zam submodule [nomail] [skip ci] (Tim Wojtulewicz, Corelight)\n\n7.1.0-dev.202 | 2024-08-16 09:06:41 -0700\n\n  * Remove unused wrapper packet analyzer (Jan Grashoefer, Corelight)\n\n    This is a leftover from the migration to the packet analysis framework.\n    The analyzer wrapped the original packet analysis code for comparison.\n\n7.1.0-dev.200 | 2024-08-16 16:50:47 +0200\n\n  * Add DNS TKEY event (Evan Typanski, Corelight)\n\n7.1.0-dev.198 | 2024-08-16 12:10:00 +0200\n\n  * simpler and more robust identification of function parameters for AST profiling (Vern Paxson, Corelight)\n\n  * fixes to limit AST traversal in the face of recursive types (Vern Paxson, Corelight)\n\n  * address some script optimization compiler warnings under Linux (Vern Paxson, Corelight)\n\n  * fix for -O C++ construction of variable names that use multiple module namespaces (Vern Paxson, Corelight)\n\n  * fix for script optimization of \"opaque\" values that are run-time constants (Vern Paxson, Corelight)\n\n  * fix for script optimization of nested switch statements (Vern Paxson, Corelight)\n\n  * script optimization fix for complex \"in\" expressions in conditionals (Vern Paxson, Corelight)\n\n  * updates to typos allow-list reflecting ZAM regularization changes (Vern Paxson, Corelight)\n\n  * BTest updates for ZAM regularization changes (Vern Paxson, Corelight)\n\n  * convert new ZAM operations to use typed operands (Vern Paxson, Corelight)\n\n  * complete migration of ZAM to use only public ZVal methods (Vern Paxson, Corelight)\n\n  * \"-O validate-ZAM\" option to validate generated ZAM instructions (Vern Paxson, Corelight)\n\n  * internal option to suppress control-flow optimization (Vern Paxson, Corelight)\n\n  * exposing some functionality for greater flexibility in structuring run-time execution (Vern Paxson, Corelight)\n\n  * rework ZAM compilation of type switches to leverage value switches (Vern Paxson, Corelight)\n\n  * add tracking of control flow information (Vern Paxson, Corelight)\n\n  * factoring of ZAM operation specifications into separate files (Vern Paxson, Corelight)\n\n  * updates to ZAM operations / gen-zam regularization, other than the operations themselves (Vern Paxson, Corelight)\n\n  * type-checking fix for vector-of-string operations (Vern Paxson, Corelight)\n\n  * ZVal constructor for booleans (Vern Paxson, Corelight)\n\n  * fix for nit in base/protocols/krb/main.zeek (Vern Paxson, Corelight)\n\n  * mark functions skipped by ZAM compilation as such (Vern Paxson, Corelight)\n\n  * fix for avoiding inadvertent interpreter errors in CallExpr::IsPure() (Vern Paxson, Corelight)\n\n  * support for traversing ZAM code similar to AST traversal (Vern Paxson, Corelight)\n\n  * run-time warnings for scripts compiled to C++ (Vern Paxson, Corelight)\n\n  * allow C++ script compiler access to type internals (Vern Paxson, Corelight)\n\n  * fixes for script optimization of coerce-to-any expressions (Vern Paxson, Corelight)\n\n  * fix to correctly track whether a capture needs deep-copying (Vern Paxson, Corelight)\n\n  * fix for -O report-C++ (Vern Paxson, Corelight)\n\n  * support for more in-depth AST profiling (Vern Paxson, Corelight)\n\n  * allow profiling without updating of hash values (Vern Paxson, Corelight)\n\n  * ListVal method to clear the list to allow reusing w/o new construction (Vern Paxson, Corelight)\n\n  * accessor for smart-pointer version of FileVal's value (Vern Paxson, Corelight)\n\n7.1.0-dev.164 | 2024-08-15 10:30:37 +0200\n\n  * Func: Add SetCapturesVec() (Arne Welzel, Corelight)\n\n    Add an API to directly set captures_vec for use by C++ compilation. The\n    current code keys off or asserts on ZAM stmts, making it difficult to\n    leverage captures_vec in other contexts.\n\n  * marked some recently added BTests as not suitable for -O gen-C++ testing (Vern Paxson, Corelight)\n\n  * robustness improvements for -O gen-C++ generation of lambdas / \"when\"s (Vern Paxson, Corelight)\n\n  * speedups for compilation of initializers in -O gen-C++ generated code (Vern Paxson, Corelight)\n\n  * fixes for -O gen-C++ generation of floating point constants (Vern Paxson, Corelight)\n\n  * -O gen-C++ fix for dealing with use of more than one module qualifier (Vern Paxson, Corelight)\n\n  * header tweaks to provide gen-C++ script optimization with more flexibility (Vern Paxson, Corelight)\n\n  * fix for script optimization of constants of type \"opaque\" (Vern Paxson, Corelight)\n\n  * fix for script optimization of \"in\" operations (Vern Paxson, Corelight)\n\n  * some minor tidying of -O gen-C++ sources (Vern Paxson, Corelight)\n\n7.1.0-dev.152 | 2024-08-14 20:08:14 +0200\n\n  * mysql: Implement and test COM_CHANGE_USER (Arne Welzel, Corelight)\n\n    This reworks the parser such that COM_CHANGE_USER switches the\n    connection back into the CONNECTION_PHASE so that we can remove the\n    EXPECT_AUTH_SWITCH special case in the COMMAND_PHASE. Adds two pcaps\n    produced with Python that actually do COM_CHANGE_USER as it seems\n    not possible from the MySQL CLI.\n\n  * mysql: Remove auth plugin state (Arne Welzel, Corelight)\n\n    Now that we use CONNECTION_PHASE and interpret AuthSwitchRequest\n    correctly, we can remove reliance on the plugin discrepancy to\n    determine expectations.\n\n  * GH-3880: mysql: Handle server connection phase separately from command phase (Arne Welzel, Corelight)\n\n    This avoids interpreting an AuthSwitchRequest (0xfe) during the command\n    phase as EOF_Packet.\n\n    Thanks @AmazingPP.\n\n    Closes #3880\n\n7.1.0-dev.147 | 2024-08-13 12:37:17 +0200\n\n  * Deprecate old unknown_protocol event signature (Jan Grashoefer, Corelight)\n\n  * Use raw pointer for packet analyzer history (Jan Grashoefer, Corelight)\n\n  * Update external baselines for analyzer history (Jan Grashoefer, Corelight)\n\n  * Update btest baselines for analyzer history (Jan Grashoefer, Corelight)\n\n  * Add packet analyzer history (Jan Grashoefer, Corelight)\n\n7.1.0-dev.141 | 2024-08-12 11:07:32 +0200\n\n  * spicyz: Add back message about removed support for port / ports in evt (Arne Welzel, Corelight)\n\n    spicy-dhcp, spicy-http and spicy-dns all have this still in their .evt files,\n    so it seems popular. Be more helpful than \"unexpected token\" to users.\n\n7.1.0-dev.139 | 2024-08-09 20:57:23 +0200\n\n  * rule-parse: Remove id_to_str() lookup to squelch coverity warning (Arne Welzel, Corelight)\n\n    Coverity didn't like that id_to_str() allocates memory and we didn't\n    free it. Remote its usage wholesale.\n\n  * GH-3774: btest: Skip core.script-args under TSAN (Arne Welzel, Corelight)\n\n    TSAN may re-execute the executable when the memory layout doesn't\n    fullfill requirements, causing argument confusion when that happens.\n\n    Closes #3774.\n\n  * Update zeekctl submodule [nomail] (Tim Wojtulewicz, Corelight)\n\n7.1.0-dev.133 | 2024-08-08 10:44:31 +0200\n\n  * Update zeekctl submodule (Tim Wojtulewicz)\n\n  * Add note to NEWS about the removal of OpaqueVal::DoSerialize and OpaqueVal::DoUnserialize (Tim Wojtulewicz, Corelight)\n\n7.1.0-dev.129 | 2024-08-07 12:20:22 -0700\n\n  * Remove deprecated port/ports fields for spicy analyzers (Tim Wojtulewicz, Corelight)\n\n  * Remove deprecated Cluster::Node::interface field (Tim Wojtulewicz, Corelight)\n\n  * Remove deprecated signature definition format (Tim Wojtulewicz, Corelight)\n\n  * Return an error if GLOBAL:: prefix is used (Tim Wojtulewicz, Corelight)\n\n  * Remove deprecated BloomFilter serialization methods (Tim Wojtulewicz, Corelight)\n\n  * Remove deprecated OpaqueVal serialization methods (Tim Wojtulewicz, Corelight)\n\n  * Remove deprecated DECLARE_OPAQUE_VALUE macro (Tim Wojtulewicz, Corelight)\n\n  * Make TypePtr::Capture member variables private (Tim Wojtulewicz, Corelight)\n\n    The public versions were marked as deprecated for 7.0, and accessors\n    should be used to manage them now.\n\n  * Remove deprecated Trigger constructor (Tim Wojtulewicz, Corelight)\n\n  * Remove deprecated Controller::auto_assign_ports and Controller::auto_assign_start_port (Tim Wojtulewicz, Corelight)\n\n  * Remove deprecated load-balacing policy script (Tim Wojtulewicz, Corelight)\n\n  * Remove deprecated prometheus telemetry policy script (Tim Wojtulewicz, Corelight)\n\n  * Remove deprecated policy/tuning/default package (Tim Wojtulewicz, Corelight)\n\n  * Remove deprecated time machine settings (Tim Wojtulewicz, Corelight)\n\n  * Remove deprecated json NullDoubleWriter class (Tim Wojtulewicz, Corelight)\n\n  * Remove deprecated modbus event definitions (Tim Wojtulewicz, Corelight)\n\n  * Remove Connection::AppendAddl (Tim Wojtulewicz, Corelight)\n\n  * Remove STMT_ANY statement type (Tim Wojtulewicz, Corelight)\n\n  * Remove EventRegistry::Used and EventRegistry::SetUsed (Tim Wojtulewicz, Corelight)\n\n7.1.0-dev.109 | 2024-08-07 14:10:54 +0200\n\n  * ldap: Promote uint8 to uint64 before shifting (Arne Welzel, Corelight)\n\n    Relates to zeek/spicy#1829\n\n7.1.0-dev.107 | 2024-08-07 11:43:15 +0200\n\n  * ci/ubuntu-24.04: Use ccache 4.10.2 (Arne Welzel, Corelight)\n\n    The ccache version shipped with Ubuntu 24.04 does not yet recognize\n    --fprofile-update=atomic, install one that does.\n\n    Now that the asan_sanitizer build also includes building Spicy and\n    running the spicyz test suite, ccache is quite important.\n\n    Reference ccache/ccache#1408 and zeek/zeek#3777.\n\n7.1.0-dev.105 | 2024-08-07 10:54:10 +0200\n\n  * telemetry/Manager: Check RegisterFd() return value (Arne Welzel, Corelight)\n\n    Please coverity.\n\n  * telemetry/Manager: Track sent_in and sent_out totals without callback (Arne Welzel, Corelight)\n\n    For terminated threads, the totals would go down once the threads are\n    removed, which isn't great. Move tracking of sent in and sent out\n    messages from callback to explicit `Inc()` calls.\n\n    Also fixes total_messages_in_metric being initialized twice rather\n    than total_messages_out_metric.\n\n  * threading/Manager: Switch inf bucket from infinity() to max() (Arne Welzel, Corelight)\n\n    For uint64_t, std::numeric_limits<T>::has_infinity is false and infinity()\n    actually returns 0. Use uint64_t's max() instead. We could cast to double\n    and use the double infinity, but this seems reasonable, too.\n\n    This was found while trying to provoke some pending messages and being\n    confused why all but the \"inf\" bucket increased.\n\n  * threading/Manager: \"lt\" to \"le\" and do not break (Arne Welzel, Corelight)\n\n    The buckets are specified as lower-equal (changed from lower-than now),\n    which means we shouldn't break: The larger \"le\" bucket contains all previous\n    buckets, too. The \"inf\" bucket represents the current number of threads.\n\n    For example, with a total of 10 threads, 5 threads with 0 messages pending,\n    another 4 threads with 50 messages, and on with 2000 messages, the metrics\n    would end end up as follows:\n\n        pending_buckets{le=1}      = 5\n        pending_buckets{le=10}     = 5\n        pending_buckets{le=100}    = 9\n        pending_buckets{le=1000}   = 9\n        pending_buckets{le=10000}  = 10\n        pending_buckets{le=inf}    = 10\n\n    This might be strange initially, but aligns with the Prometheus\n    histogram approach (though we're using gauges here).\n\n7.1.0-dev.99 | 2024-08-06 20:08:37 +0200\n\n  * Bump auxil/spicy to latest development snapshot (Arne Welzel, Corelight)\n\n  * spicy/runtime-support: Switch ParameterMismatch::_fmt to static (Arne Welzel, Corelight)\n\n    UBSAN's vptr sanitize isn't happy with the call to _fmt()\n    in its member initializer list.\n\n        $ zeek -r Traces/ssh/single-conn.trace .tmp/spicy.event-args-mismatch/test.hlto .tmp/spicy.event-args-mismatch/event-args-mismatch.zeek\n        <...>/src/include/zeek/spicy/runtime-support.h:80:29: runtime error: member call on address 0x511000369540 which does not point to an object of type 'zeek::spicy::rt::ParameterMismatch'\n        0x511000369540: note: object has invalid vptr\n         00 00 00 00  be be be be be be be be  be be be be be be be be  be be be be be be be be  be be be be\n                      ^~~~~~~~~~~~~~~~~~~~~~~\n                      invalid vptr\n            #0 0x7f9c9977b019 in zeek::spicy::rt::ParameterMismatch::ParameterMismatch(std::basic_string_view<char, std::char_traits<char>>, zeek::IntrusivePtr<zeek::Type> const&, std::basic_string_view<char, std::char_traits<char>>) <...>/src/include/zeek/spicy/runtime-support.h:80:29\n            #1 0x7f9c9977a6a2 in zeek::spicy::rt::to_val(hilti::rt::Bytes const&, zeek::IntrusivePtr<zeek::Type> const&) <...>/src/include/zeek/spicy/runtime-support.h:562:15\n\n  * coverage/lcov_html: Ignore testing/btest/.tmp (Arne Welzel, Corelight)\n\n    gcda/gcno files in the btest/.tmp directory are from .htlo files\n    referencing ephemeral cc files. No need to include these.\n\n  * cirrus: Do not disable Spicy for sanitizer builds (Arne Welzel, Corelight)\n\n  * ldap: Avoid unset m$opcode (Arne Welzel, Corelight)\n\n    Initial fuzzing caused a bind response to arrive before a bind request,\n    resulting in an unset field expression error:\n\n        expression error in base/protocols/ldap/main.zeek, line 270: field value missing (LDAP::m$opcode)\n\n    Prevent this by ensuring m$opcode is set and raising instead.\n\n  * GH-3860: fuzzers: Add LDAP fuzzing (Arne Welzel, Corelight)\n\n    LDAP supports both, UDP and TCP as separate analyzers. The corpus\n    is identical, however. Started to hit the TLS analyzer fairly\n    quickly, too.\n\n    Closes #3860\n\n7.1.0-dev.92 | 2024-08-06 09:01:40 -0700\n\n  * Don't install empty ZAM directories (Tim Wojtulewicz, Corelight)\n\n  * btest/spicy: Make replaces-conflicts trigger replaces code path (Arne Welzel, Corelight)\n\n    The current test attempts to instantiate two spicy::SSH_1 protocol\n    analyzers in the .evt file. The intention likely was to use two\n    distinct protocol analyzer both trying to replace the builtin SSH\n    analyzer.\n\n    Coincidentally, fixing this happens to workaround TSAN errors tickled\n    by the FatalError() call while loading the .hlto with two identically\n    named analyzers.\n\n        $ cat .tmp/spicy.replaces-conflicts/output\n        error: redefinition of protocol analyzer spicy::SSH_1\n        ThreadSanitizer: main thread finished with ignores enabled\n          One of the following ignores was not ended (in order of probability)\n          Ignore was enabled at:\n            #0 __llvm_gcov_init __linker___d192e45c25d5ee23-484d3e0fc2caf5b4.cc (ssh.hlto+0x34036) (BuildId: 091934ca4da885e7)\n            #1 __llvm_gcov_init __linker___d192e45c25d5ee23-484d3e0fc2caf5b4.cc (ssh.hlto+0x34036) (BuildId: 091934ca4da885e7)\n            ...\n\n    I was tempted to replace FatalError() with Error() and rely on\n    zeek-setup.cc's early exiting on any reporter errors, but this\n    seems easier for now.\n\n    Relates to #3865.\n\n7.1.0-dev.87 | 2024-08-05 14:39:56 -0700\n\n  * Remove some unnecessary #includes (Tim Wojtulewicz, Corelight)\n\n  * Avoid capturing 'this' for callback in telemetry::Manager (Tim Wojtulewicz, Corelight)\n\n  * Make telemetry metrics out of MsgThread statistics (Tim Wojtulewicz, Corelight)\n\n  * Split cpu time metric into user/system components like prof.log (Tim Wojtulewicz, Corelight)\n\n    The total can be calculated from the two parts via Prometheus/Grafana\n    if desired, so it's more informative to pass them as separate parts.\n\n  * Move broker statistics to be telemetry metrics (Tim Wojtulewicz, Corelight)\n\n  * Add timer counts as telemetry metrics (Tim Wojtulewicz, Corelight)\n\n  * Move thread manager stats to telemetry metric (Tim Wojtulewicz, Corelight)\n\n  * Add extra metrics to session_mgr (Tim Wojtulewicz, Corelight)\n\n    - Sessions killed by activity\n    - Current number of sessions across all types\n\n  * Move dns_mgr stats to telemetry instruments (Tim Wojtulewicz, Corelight)\n\n  * Move trigger stats to telemetry instruments (Tim Wojtulewicz, Corelight)\n\n  * Move pulling of global state inside 'expensive' check for stats (Tim Wojtulewicz, Corelight)\n\n7.1.0-dev.74 | 2024-08-02 15:49:40 -0700\n\n  * Process metric callbacks from the main-loop thread (Tim Wojtulewicz, Corelight)\n\n    This avoids the callbacks from being processed on the worker thread\n    spawned by Civetweb. It fixes data race issues with lookups involving\n    global variables, amongst other threading issues.\n\n  * CI: Use 16GB of memory for FreeBSD builds (Tim Wojtulewicz, Corelight)\n\n7.1.0-dev.68 | 2024-07-26 10:09:48 -0700\n\n  * Bump auxil/spicy to latest development snapshot (Benjamin Bannier, Corelight)\n\n    This in particular pulls in a fix for zeek/spicy#1808.\n\n7.1.0-dev.66 | 2024-07-26 15:14:36 +0200\n\n  * GH-3853: ldap: Recognize SASL+SPNEGO+NTLMSSP (Arne Welzel, Corelight)\n\n    The ctu-sme-11-win7ad-1-ldap-tcp-50041.pcap file was harvested\n    from the CTU-SME-11 (Experiment-VM-Microsoft-Windows7AD-1) dataset\n    at https://zenodo.org/records/7958259 (DOI 10.5281/zenodo.7958258).\n\n    Closes #3853\n\n7.1.0-dev.63 | 2024-07-25 09:19:20 -0700\n\n  * Use accessor to reach into X509_ALGOR (Theo Buehler)\n\n    Despite already having an accessor, X509_ALGOR wasn't made opaque\n    during OpenSSL 1.1.0 development. It would be nice if this could be\n    fixed at some point, so avoid reaching into that struct by using the\n    accessor\n\n7.1.0-dev.61 | 2024-07-25 12:02:51 +0200\n\n  * mysql: Simplify length computation (Arne Welzel, Corelight)\n\n    Thanks Tim!\n\n  * mysql: Improve date and time parsing (Fupeng Zhao)\n\n  * btest/mysql: Clean query-attr.pcapng (Arne Welzel, Corelight)\n\n    It contained some unrelated IntelliJ traffic.\n\n  * mysql: Support non-string query attributes (Arne Welzel, Corelight)\n\n    The query attributes aren't exposed to script layer right now, but this\n    should at least parse over them once encountered and some fixups.\n\n  * btest/mysql: Add pcap with non-string query attributes (Arne Welzel, Corelight)\n\n    Pcap was generated as follows. Doesn't seem wireshark even parses\n    this properly right now.\n\n        with common.get_connection() as c:\n            with c.cursor() as cur:\n                date1 = datetime.date(1987, 10, 18)\n                datetime1 = datetime.datetime(1990, 9, 26, 12, 13, 14)\n                cur.add_attribute(\"number1\", 42)\n                cur.add_attribute(\"string1\", \"a string\")\n                cur.add_attribute(\"date1\", date1)\n                cur.add_attribute(\"datetime1\", datetime1)\n                cur.execute(\"SELECT version()\")\n                result = cur.fetchall()\n                print(\"result\", result)\n\n  * mysql: Introduce mysql_ssl_request event (Arne Welzel, Corelight)\n\n    This should've been added with fa48c885 for completion. Do it now.\n    The MySQL spec calls it SSLRequest packet, so keep SSL in the name for\n    consistency.\n\n  * mysql: Fix EOFIfLegacyThenResultSet (Arne Welzel, Corelight)\n\n    Only expect a result next if an EOF was consumed.\n\n  * mysql: Add data parameter to mysql_auth_plugin (Arne Welzel, Corelight)\n\n    This may contain salt from the server or a hashed password from the client.\n\n  * mysql: Add mysql_auth_plugin, mysql_auth_more_data and mysql_auth_switch_request events (Arne Welzel, Corelight)\n\n    Remove caching_sha2_password parsing/state from the analyzer and implement\n    the generic events. If we actually want to peak into the authentication\n    mechanism, we could write a separate analyzer for it. For now, treat it\n    as opaque values that are exposed to script land.\n\n    The added tests show the --get-server-public-key in use where\n    mysql_auth_more_data contains an RSA public key.\n\n  * mysql: AuthSwitchRequest: &enforce a 0xfe / 254 status (Arne Welzel, Corelight)\n\n  * mysql: Make auth_plugin_ a std::string (Arne Welzel, Corelight)\n\n  * mysql: Fix auth_plugin_data_part2 length computation (Arne Welzel, Corelight)\n\n  * Refactored connection phase state handling (Fupeng Zhao)\n\n    Added `ConnectionExpected` enum for expected packet types during the connection phase.\n\n  * Add support for \"auth switch\" and \"query attrs\" (Fupeng Zhao)\n\n    Also fix the issue where Resultset could not correctly distinguish between EOF_Packet and OK_Packet.\n\n  * Add support for parsing the \"caching_sha2_password\" auth plugin (Fupeng Zhao)\n\n7.1.0-dev.45 | 2024-07-24 15:28:59 -0700\n\n  * Update binpac submodule to better format output code [nomail] (Tim Wojtulewicz, Corelight)\n\n7.1.0-dev.43 | 2024-07-24 13:25:52 -0700\n\n  * Update 7.0 NEWS with blurb about multi-PDU parsing causing increased load [nomail] [skip ci] (Tim Wojtulewicz, Corelight)\n\n  * Fix handling of zero-length SMB2 error responses (Tim Wojtulewicz, Corelight)\n\n7.1.0-dev.40 | 2024-07-24 11:18:03 +0200\n\n  * minor optimization of boolean comparisons (Vern Paxson, Corelight)\n\n  * GH-3839: fix & regression test for GH-3839 (spurious warnings for \"when\" constructs) (Vern Paxson, Corelight)\n\n7.1.0-dev.37 | 2024-07-23 19:18:37 -0700\n\n  * Bump zeek-testing-cluster to reflect deprecation of prometheus.zeek (Christian Kreibich, Corelight)\n\n  * Update doc submodule [nomail] [skip ci] (zeek-bot)\n\n7.1.0-dev.34 | 2024-07-23 08:54:23 -0700\n\n  * Update Mozilla CA list and CT list (Johanna Amann, Corelight)\n\n7.1.0-dev.32 | 2024-07-23 08:51:11 -0700\n\n  * Bump auxil/spicy to latest development snapshot (Benjamin Bannier, Corelight)\n\n7.1.0-dev.30 | 2024-07-23 12:38:54 +0200\n\n  * ldap: Add heuristic for wrap tokens (Arne Welzel, Corelight)\n\n    Instead of dissecting the GSSAPI handshake, add another heuristic\n    into MaybeEncrypted to check for the WRAP token identifier.\n\n    After this change, the pcap on the following ticket is processed\n    nicely: https://gitlab.com/wireshark/migration-test/-/issues/9398\n\n  * ldap: Ignore ec/rrc for sealed wrap tokens (Arne Welzel, Corelight)\n\n    It shouldn't matter for the encrypted payload that we'll\n    just consume and ignore.\n\n  * ldap: Add LDAP sample with SASL-SRP mechanism (Arne Welzel, Corelight)\n\n    This is what @dopheide-esnet actually saw. Produced with a custom\n    cyrus-sasl and openldap build :-(\n\n  * ldap: Reintroduce encryption after SASL heuristic (Arne Welzel, Corelight)\n\n    @dopheide-esnet provided sample captures where SASL SRP is used as\n    a SASL mechanism and the follow-up LDAP messages are encrypted. It's\n    not clear how to determine whether encryption will or will not happen,\n    so re-add a heuristic to determine this based on the first byte of\n    the first message *after* the successful bindResponse handshake. If\n    that byte is 0x30, assume cleartext.\n\n    I haven't been able to produce such pcaps, unfortunately, but the\n    cleartext path is tested via the existing sasl-ntlm.pcap.\n\n  * ldap: Fix assuming GSS-SPNEGO for all bindResponses (Arne Welzel, Corelight)\n\n    In retrospect that's an obvious bug.\n\n  * ldap: Implement extended request/response and StartTLS support (Arne Welzel, Corelight)\n\n    PCAP was produced with a local OpenLDAP server configured to support StartTLS.\n\n    This puts the Zeek calls into a separate ldap_zeek.spicy file/module\n    to separate it from LDAP.\n\n7.1.0-dev.23 | 2024-07-23 10:02:52 +0200\n\n  * telemetry: Deprecate prometheus.zeek policy script (Arne Welzel, Corelight)\n\n    With Cluster::Node$metrics_port being optional, there's not really\n    a need for the extra script. New rule, if a metrics_port is set, the\n    node will attempt to listen on it.\n\n    Users can still redef Telemetry::metrics_port *after*\n    base/frameworks/telemetry was loaded to change the port defined\n    in cluster-layout.zeek.\n\n  * Update broker submodule [nomail] (Tim Wojtulewicz, Corelight)\n\n7.1.0-dev.20 | 2024-07-19 19:51:12 +0200\n\n  * GH-3836: input/Manager: Improve type checks of record fields with type any (Arne Welzel, Corelight)\n\n    Calling AsRecordType() or AsFunc() on a Val of type any isn't safe.\n\n    Closes #3836\n\n7.1.0-dev.18 | 2024-07-17 15:37:12 -0700\n\n  * Bump zeek-testing-cluster to pull in tee SIGPIPE fix (Christian Kreibich, Corelight)\n\n7.1.0-dev.16 | 2024-07-17 16:45:13 +0200\n\n  * ldap: Remove MessageWrapper with magic 0x30 searching (Arne Welzel, Corelight)\n\n    This unit implements a heuristic to search for the 0x30 sequence\n    byte if Message couldn't readily be parsed. Remove it with the\n    idea of explicit and predictable support for SASL mechanisms.\n\n  * ldap: Harden parsing a bit (Arne Welzel, Corelight)\n\n    ASN1Message(True) may go off parsing arbitrary input data as\n    \"something ASN.1\" This could be GBs of octet strings or just very\n    long sequences. Avoid this by open-coding some top-level types expected.\n\n    This also tries to avoid some of the &parse-from usages that result\n    in unnecessary copies of data.\n\n    Adds a locally generated PCAP with addRequest/addResponse that we\n    don't currently handle.\n\n  * ldap: Handle integrity-only KRB wrap tokens (Arne Welzel, Corelight)\n\n    Mostly staring at the PCAPs and opened a few RFCs. For now, only if the\n    MS_KRB5 OID is used and accepted in a bind response, start stripping\n    KRB5 wrap tokens for both, client and server traffic.\n\n    Would probably be nice to forward the GSS-API data to the analyzer...\n\n    Closes zeek/spicy-ldap#29.\n\n7.1.0-dev.12 | 2024-07-16 10:16:02 -0700\n\n  * Bump auxil/spicy to latest development snapshot (Benjamin Bannier, Corelight)\n\n    This patch bump Spicy to the latest development snapshot. This\n    introduces a backwards-incompatible change in that it removes support\n    for a never officially supported syntax to specify unit fields (so I\n    would argue: not strictly a breaking change).\n\n7.1.0-dev.10 | 2024-07-12 16:02:22 -0700\n\n  * CI: Set FETCH_CONTENT_FULLY_DISCONNECTED flag for configure (Tim Wojtulewicz, Corelight)\n\n  * Fix a broken merge (Tim Wojtulewicz, Corelight)\n\n    I merged an old version of the branch on accident and then merged the right\n    one over top of it, but git ended up including both versions. This fixes\n    that mistake.\n\n7.1.0-dev.6 | 2024-07-12 09:51:39 -0700\n\n  * Do not emit hook files for builtin modules (Benjamin Bannier, Corelight)\n\n    We would previously emit a C++ file with hooks for at least the builtin\n    `spicy` module even though that module like any other builtin module\n    never contains implementations of hooks for types in user code.\n\n    This patch prevents modules with skipped implementations (such as our\n    builtin modules) from being added to the compilation which prevents\n    generating their hook files.\n\n7.1.0-dev.2 | 2024-07-12 09:46:34 -0700\n\n  * Fix warning about grealpath when running 'make dist' on Linux (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.467 | 2024-07-11 12:14:52 -0700\n\n  * Update the scripts.base.frameworks.telemetry.internal-metrics test (Christian Kreibich, Corelight)\n\n  * Revert \"Temporarily disable the scripts/base/frameworks/telemetry/internal-metrics btest\" (Christian Kreibich, Corelight)\n\n  * Bump Broker to pull in new Prometheus support and pass in Zeek's registry (Dominik Charousset and Christian Kreibich, Corelight)\n\n7.0.0-dev.461 | 2024-07-10 18:45:36 +0200\n\n  * Extend btest for logging of disabled analyzers (Jan Grashoefer, Corelight)\n\n  * Add logging of disabled analyzers to analyzer.log (Jan Grashoefer, Corelight)\n\n7.0.0-dev.458 | 2024-07-10 11:05:19 +0200\n\n  * testing/btest: Default to HILTI_JIT_PARALLELISM=1 (Arne Welzel, Corelight)\n\n    This is a rework of b59bed9d06f2257a6b4f6c6408b8363a277eebac moving\n    HILTI_JIT_PARALLELISM=1 into btest.cfg to make it default applicable to\n    btest -j users (and CI).\n\n    The background for this change is that spicyz may spawn up to nproc compiler\n    instances by default. Combined with btest -j, this may be nproc x nproc\n    instances worst case. Particularly with gcc, this easily overloads CI or\n    local systems, putting them into hard-to-recover-from thrashing/OOM states.\n\n    Exporting HILTI_JIT_PARALLELISM in the shell allows overriding.\n\n  * Revert \"CI: Use ccache and a single CPU when building spicy analyzers for btests\" (Arne Welzel, Corelight)\n\n    This reverts commit b59bed9d06f2257a6b4f6c6408b8363a277eebac.\n\n7.0.0-dev.454 | 2024-07-09 15:12:19 -0700\n\n  * CI: Use ccache and a single CPU when building spicy analyzers for btests (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.452 | 2024-07-09 14:53:41 -0700\n\n  * Bump auxil/spicy to latest development snapshot (Benjamin Bannier, Corelight)\n\n7.0.0-dev.450 | 2024-07-09 10:15:13 -0700\n\n  * minor script optimization updates to reflect recent changes, Coverity findings (Vern Paxson, Corelight)\n\n7.0.0-dev.447 | 2024-07-09 17:10:16 +0200\n\n  * Fix for --display-cmake in configure (cknill)\n    Moved build directory creation further down in the script so that --display-cmake\n    has a chance to happen before build tree setup.\n\n7.0.0-dev.445 | 2024-07-09 00:07:25 -0700\n\n  * Management framework: bump cluster testsuite to pull in telemetry tests (Christian Kreibich, Corelight)\n\n  * Management framework: bump zeek-client (Christian Kreibich, Corelight)\n\n  * Management framework: augment deployed configs with instance IP addresses (Christian Kreibich, Corelight)\n\n  * Management framework: add auto-enumeration of metrics ports (Christian Kreibich, Corelight)\n\n  * Management framework: propagate metrics port from agent (Christian Kreibich, Corelight)\n\n  * Management framework: add metrics port in management & Supervisor node records (Christian Kreibich, Corelight)\n\n  * Harden the telemetry manager against unset Telemetry::metrics_address (Christian Kreibich, Corelight)\n\n  * Comment-only tweaks for telemetry-related settings. (Christian Kreibich, Corelight)\n\n  * Update submodules [nomail] (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.434 | 2024-07-04 17:34:23 +0200\n\n  * CMakeLists: Ensure Threads::Threads target exists (Arne Welzel, Corelight)\n\n    Fix failure on OSX with CMake 3.30 complaining about missing\n    Threads::Threads target.\n\n  * ci/macos: Only use sonoma image (Arne Welzel, Corelight)\n\n7.0.0-dev.431 | 2024-07-04 17:22:42 +0200\n\n  * Bump auxil/zeek-aux (Benjamin Bannier, Corelight)\n\n7.0.0-dev.429 | 2024-07-04 15:15:56 +0200\n\n  * Bump auxil/spicy to latest development snapshot (Benjamin Bannier, Corelight)\n\n7.0.0-dev.427 | 2024-07-04 13:35:25 +0200\n\n  * GH-3789: HTTP: Implement FlipRoles() (Arne Welzel, Corelight)\n\n    When Zeek flips roles of a HTTP connection subsequent to the HTTP analyzer\n    being attached, that analyzer would not update its own ContentLine analyzer\n    state, resulting in the wrong ContentLine analyzer being switched into\n    plain delivery mode.\n\n    In debug builds, this would result in assertion failures, in production\n    builds, the HTTP analyzer would receive HTTP bodies as individual header\n    lines, or conversely, individual header lines would be delivered as a\n    large chunk from the ContentLine analyzer.\n\n    PCAPs were generated locally using tcprewrite to select well-known-http ports\n    for both endpoints, then editcap to drop the first SYN packet.\n\n    Kudos to @JordanBarnartt for keeping at it.\n\n    Closes #3789\n\n  * ContentLineAnalyzer: Add getter for skip_partial (Arne Welzel, Corelight)\n\n7.0.0-dev.423 | 2024-07-02 15:35:36 -0700\n\n  * Remove the Supervisor's internal ClusterEndpoint struct. (Christian Kreibich, Corelight)\n\n  * Provide a script-layer equivalent to Supervisor::__init_cluster(). (Christian Kreibich, Corelight)\n\n7.0.0-dev.420 | 2024-07-02 14:46:29 -0700\n\n  * Update NEWS file to cover JSON enhancements (Christian Kreibich, Corelight)\n\n  * Support JSON roundtripping via to_json()/from_json() for patterns (Christian Kreibich, Corelight)\n\n  * Support table deserialization in from_json() (Christian Kreibich, Corelight)\n\n  * Support map-based definition of ports in from_json() (Christian Kreibich, Corelight)\n\n  * Document the field_escape_pattern in the to_json() BiF (Christian Kreibich, Corelight)\n\n7.0.0-dev.414 | 2024-07-02 19:42:10 +0200\n\n  * Bump cmake submodule [nomail] (Arne Welzel, Corelight)\n\n7.0.0-dev.413 | 2024-07-02 14:41:27 +0200\n\n  * threading/Manager: Warn if threads are added after termination (Arne Welzel, Corelight)\n\n    The core.file-analyzer-violation test showed that it's possible to\n    create new threads (log writers) when Zeek is in the process of\n    terminating. This can result in the IO manager's deconstructor\n    deleting IO sources for threads that are still running.\n\n    This is sort of a scripting issue, so for now log a reporter warning\n    when it happens to have a bit of a bread-crumb what might be\n    going on. In the future it might make sense to plug APIs with\n    zeek_is_terminating().\n\n  * iosource/Manager: Reap dry sources while computing timeout (Arne Welzel, Corelight)\n\n    Avoids looping over the sources vector twice and should result\n    in the same behavior.\n\n  * GH-3682: threading/MsgThread: Decouple IO source and thread lifetimes (Arne Welzel, Corelight)\n\n    MsgThread acting as an IO source can result in the situation where the\n    threading manager's heartbeat timer deletes a finished MsgThread instance,\n    but at the same time this thread is in the list of ready IO sources the\n    main loop is currently processing.\n\n    Fix this by decoupling the lifetime of the IO source part and properly\n    registering as lifetime managed IO sources with the IO manager.\n\n    Fixes #3682\n\n  * iosource/Manager: Do not manage lifetime of pkt_src (Arne Welzel, Corelight)\n\n    Now that dry sources are properly reaped and freed, an offline packet\n    source would be deleted once dry, resulting in GetPktSrc() returning\n    a wild pointer. Don't manage the packet source lifetime and instead\n    free it during Manager destruction.\n\n  * iosource/Manager: Honor manage_lifetime and dont_count for short-lived IO sources (Arne Welzel, Corelight)\n\n    If an IO source is registered and becomes dry at runtime, the IO\n    manager would not honor its manage_lifetime or dont_count attribute\n    during collection, resulting in memory leaks.\n\n    This probably hasn't mattered so far as there's no IO sources registered\n    in-tree at runtime using manage_lifetime=true.\n\n7.0.0-dev.407 | 2024-06-26 13:16:10 +0200\n\n  * coverage/lcov_html: Allow missing coveralls token (Arne Welzel, Corelight)\n\n    This is a fixup for 0cd023b83919fca7bfac55e75a41f724e820fd26 which\n    currently causes ASAN coverage builds to fail for non-master branches\n    when due to a missing COVERALLS_REPO_TOKEN.\n\n    Instead of bailing out for non-master branches, pass `--dry-run` to the\n    coveralls-lcov invocation to test more of the script.\n\n7.0.0-dev.405 | 2024-06-25 13:35:41 +0200\n\n  * Bump auxil/spicy to latest development snapshot (Benjamin Bannier, Corelight)\n\n7.0.0-dev.403 | 2024-06-25 11:29:58 +0200\n\n  * NEWS: Add entry about FileExtractDir (Arne Welzel, Corelight)\n\n  * Update zeekctl submodule (Arne Welzel, Corelight)\n\n  * zeek-testing-private: Update baseline, after merge (Arne Welzel, Corelight)\n\n7.0.0-dev.399 | 2024-06-24 11:19:14 +0200\n\n  * script optimization for record operations sourced (in part) from other records (Vern Paxson, Corelight)\n\n7.0.0-dev.397 | 2024-06-20 18:16:51 -0700\n\n  * zeek-testing-private: Update baseline (Arne Welzel, Corelight)\n\n  * ssh: Revert half-duplex robustness (Arne Welzel, Corelight)\n\n    This reverts part of commit a0888b7e36308d241f4c62b42715a94d499aab23 due\n    to inhibiting analyzer violations when parsing non SSH traffic when\n    the &restofdata path is entered.\n\n    See additional discussion here:\n    https://github.com/zeek/zeek/pull/3781\n    https://github.com/zeek/zeek/pull/3720/files#r1636314375\n\n7.0.0-dev.394 | 2024-06-20 17:28:11 -0700\n\n  * Add \"zeek/\" prefixes to includes in spicy/runtime-support.h (Michael Dopheide)\n\n7.0.0-dev.392 | 2024-06-20 15:51:42 +0200\n\n  * Spicy: Provide runtime API to access Zeek-side globals. (Robin Sommer, Corelight)\n\n    This allows to read Zeek global variables from inside Spicy code. The\n    main challenge here is supporting all of Zeek's data type in a\n    type-safe manner.\n\n    The most straight-forward API is a set of functions\n    `get_<type>(<id>)`, where `<type>` is the Zeek-side type\n    name (e.g., `count`, `string`, `bool`) and `<id>` is the fully scoped\n    name of the Zeek-side global (e.g., `MyModule::Boolean`). These\n    functions then return the corresponding Zeek value, converted in an\n    appropriate Spicy type. Example:\n\n        Zeek:\n            module Foo;\n\n            const x: count = 42;\n            const y: string = \"xxx\";\n\n        Spicy:\n            import zeek;\n\n            assert zeek::get_count(\"Foo::x\") == 42;\n            assert zeek::get_string(\"Foo::y\") == b\"xxx\"; # returns bytes(!)\n\n    For container types, the `get_*` function returns an opaque types that\n    can be used to access the containers' values. An additional set of\n    functions `as_<type>` allows converting opaque values of atomic\n    types to Spicy equivalents. Example:\n\n        Zeek:\n            module Foo;\n\n            const s: set[count] = { 1, 2 };\n            const t: table[count] of string = { [1] = \"One\", [2] = \"Two\" }\n\n        Spicy:\n\n            # Check set membership.\n            local set_ = zeek::get_set(\"Foo::s\");\n            assert zeek::set_contains(set_, 1) == True\n\n            # Look up table element.\n            local table_ = zeek::get_table(\"Foo::t\");\n            local value = zeek::table_lookup(t, 1);\n            assert zeek::as_string(value) == b\"One\"\n\n    There are also functions for accessing elements of Zeek-side vectors\n    and records.\n\n    If any of these `zeek::*` conversion functions fails (e.g., due to a\n    global of that name not existing), it will throw an exception.\n\n    The documentation has more information on all of this.\n\n    Design considerations:\n\n        - We support only reading Zeek variables, not writing. This is\n          both to simplify the API, and also conceptually to avoid\n          offering backdoors into Zeek state that could end up with a very\n          tight coupling of Spicy and Zeek code.\n\n        - We accept that a single access might be relatively slow due to\n          name lookup and data conversion. This is primarily meant for\n          configuration-style data, not for transferring lots of dynamic\n          state over.\n\n        - In that spirit, we don't support deep-copying complex data types\n          from Zeek over to Spicy. This is (1) to avoid performance\n          problems when accidentally copying large containers over,\n          potentially even at every access; and (2) to avoid the two sides\n          getting out of sync if one ends up modifying a container without\n          the other being able to see it.\n\n  * Spicy: Reformat `zeek.spicy` with `spicy-format`. (Robin Sommer, Corelight)\n\n  * Spicy: Extend exception hierarchy. (Robin Sommer, Corelight)\n\n    We move the current `TypeMismatch` into a  new `ParameterMismatch`\n    exception that's derived from a more general `TypeMismatch` now that\n    can also be used for other, non-parameter mismatches.\n\n7.0.0-dev.387 | 2024-06-18 10:52:25 +0200\n\n  * CMakeLists: Disable -Werror for 3rdparty/sqlite3.c (Arne Welzel, Corelight)\n\n    We package vanilla sqlite from upstream and on Fedora 40 with sqlite 3.46\n    there's the following compiler warning:\n\n        In function 'sqlite3Strlen30',\n            inlined from 'sqlite3ColumnSetColl' at\n            ../../src/3rdparty/sqlite3.c:122105:10:\n            ../../src/3rdparty/sqlite3.c:35003:28: error: 'strlen' reading 1 or more bytes from a region of size 0 [-Werror=stringop-overread]\n        35003 |   return 0x3fffffff & (int)strlen(z);\n              |                            ^~~~~~~~~\n        In function 'sqlite3ColumnSetColl':\n\n    Disabling -Werror on sqlite3.c seems sensible given we have little\n    control over that code.\n\n  * Bump zeek-3rdparty to pull in sqlite move to 3.46 (Christian Kreibich, Corelight)\n\n    This avoids a compiler warning/error on Fedora 40.\n\n  * CI: drop Fedora 38, add 40 (Christian Kreibich, Corelight)\n\n7.0.0-dev.383 | 2024-06-14 13:50:05 +0200\n\n  * GH-3783: Spicy: Disallow repeating replacements of the same analyzer. (Robin Sommer, Corelight)\n\n    We now reject EVT files that attempt to replace the same built-in\n    analyzer multiple times as doing so would be ill-defined and not very\n    intuitive in what exactly it means.\n\n  * Bump Spicy. (Robin Sommer, Corelight)\n\n7.0.0-dev.380 | 2024-06-11 15:11:43 +0200\n\n  * Drop EOL centos8-stream in CI (Benjamin Bannier, Corelight)\n\n7.0.0-dev.378 | 2024-06-11 12:01:03 +0200\n\n  * Suppress a known data race during civetweb shutdown (Tim Wojtulewicz)\n\n7.0.0-dev.376 | 2024-06-11 11:00:46 +0200\n\n  * Bump cmake for -fprofile-update=atomic usage (Arne Welzel, Corelight)\n\n  * cirrus: Unset CCACHE_BASEDIR for asan/coverage build (Arne Welzel, Corelight)\n\n    When CCACHE_BASEDIR is set, ccache will rewrite absolute paths to\n    relative paths in order to allow compilation in different source\n    directories. We do not need this feature on Cirrus (the checkout\n    is always in /zeek) and using absolute paths avoids\n    confusion/normalization needs for the gcov -p results.\n\n    We could consider removing the global CCACHE_BASEDIR, but it'd\n    bust the ccache of every other task, too.\n\n7.0.0-dev.372 | 2024-06-07 09:28:52 -0700\n\n  * Add Telemetry::metrics_address option (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.368 | 2024-06-06 18:08:29 -0700\n\n  * Change prometheus test to check for require jq (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.366 | 2024-06-06 18:06:42 -0700\n\n  * Check for 'zeekctl check' before trying to start up prometheus (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.362 | 2024-06-04 14:16:54 -0700\n\n  * Switch to zeek fork of prometheus-cpp (Tim Wojtulewicz, Corelight)\n\n  * Remove unnecessary shared_from_this on instrument classes (Tim Wojtulewicz, Corelight)\n\n  * Restore label_names field in MetricOpts record (Tim Wojtulewicz)\n\n  * Change how we count FDs on Linux to fix zeekctl stop issues (Tim Wojtulewicz)\n\n  * Update zeekctl tests for telemetry rework (Tim Wojtulewicz, Corelight)\n\n  * Use forward declarations of prometheus-cpp types in telemetry::Manager (Tim Wojtulewicz, Corelight)\n\n  * Add prometheus-cpp files to install set for plugins to use (Tim Wojtulewicz, Corelight)\n\n  * Fix a memory leak with the CivetWeb callbacks in telemetry (Tim Wojtulewicz, Corelight)\n\n  * Fix a bunch of copy-instead-of-move findings from Coverity (Tim Wojtulewicz, Corelight)\n\n  * Move telmetry label names out of opts records, into main metric records (Tim Wojtulewicz, Corelight)\n\n  * Ensure the order of label values matches the label names (Tim Wojtulewicz, Corelight)\n\n  * Remove prefix column from telemetry.log (Tim Wojtulewicz, Corelight)\n\n  * Fix race condition by pre-building the cluster json data for services.json (Tim Wojtulewicz)\n\n  * Set running_under_test for scripts.base.frameworks.logging.telemetry test (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.347 | 2024-06-04 11:36:13 -0700\n\n  * Update reporter.bif to describe special case of errors in init (Smoot)\n\n    Originally proposed in zeek/zeek-docs#257, but reverted via\n    9f9ebde62380a3012a1471d9ff1c1c91c7aa69da.\n\n7.0.0-dev.345 | 2024-06-04 10:36:46 -0700\n\n  * script optimization baseline tweaks due to recent minor changes (Vern Paxson, Corelight)\n\n  * updated list of BiFs for script optimization (Vern Paxson, Corelight)\n\n  * addressed some Coverity nits (Vern Paxson, Corelight)\n\n  * improved error cascade for invalid attributes (Vern Paxson, Corelight)\n\n7.0.0-dev.338 | 2024-05-31 14:18:15 -0700\n\n  * Add type aliases for instrument and family shared_ptrs (Tim Wojtulewicz, Corelight)\n\n  * Update NEWS for double and is_sum changes (Tim Wojtulewicz, Corelight)\n\n  * Remove is_sum arguments from counters and gauges (Tim Wojtulewicz, Corelight)\n\n  * Change all instruments to only handle doubles (Tim Wojtulewicz, Corelight)\n\n  * Add comment to telemetry::Manager::InitPostScript (Tim Wojtulewicz, Corelight)\n\n  * Remove all of the ZEEK_METRICS_ environment variables (Tim Wojtulewicz, Corelight)\n\n  * Fix header comments in scripts/policy/frameworks/telemetry/prometheus.zeek (Tim Wojtulewicz, Corelight)\n\n  * Change all prometheus #includes to use angle brackets (Tim Wojtulewicz, Corelight)\n\n  * Update zeekctl submodule for metrics_port node.cfg option (Tim Wojtulewicz, Corelight)\n\n  * Remove the is_sum argument from BIF histogram creation methods (Tim Wojtulewicz, Corelight)\n\n  * Update NEWS for Telemetry rework (Tim Wojtulewicz, Corelight)\n\n  * Remove Telemetry::metrics_export_prefixes option (Tim Wojtulewicz, Corelight)\n\n  * Validate that label names are constant in non-zeek metrics (Tim Wojtulewicz, Corelight)\n\n  * Avoid calling Collect() in counter/gauge Value() methods if not needed (Tim Wojtulewicz, Corelight)\n\n  * Fix some determinism issues with btests (Tim Wojtulewicz, Corelight)\n\n  * Temporarily disable the scripts/base/frameworks/telemetry/internal-metrics btest (Tim Wojtulewicz, Corelight)\n\n  * Fix the scripts.policy.frameworks.telemetry.prometheus btest to use the service discovery endpoint (Tim Wojtulewicz, Corelight)\n\n  * Btest updates due to recent changes (Tim Wojtulewicz, Corelight)\n\n  * Update telemetry log policy due to the fact that unit will not be filled in anymore (Tim Wojtulewicz, Corelight)\n\n  * Rework everything to access the prometheus-cpp objects more directly (Tim Wojtulewicz, Corelight)\n\n  * Move telemetry opaques out of OpaqueVal.h (Tim Wojtulewicz, Corelight)\n\n  * Add GetRegistry() method for retrieving access to prometheus-cpp registry (Tim Wojtulewicz, Corelight)\n\n  * Remove Broker metrics configuration values and methods (Tim Wojtulewicz, Corelight)\n\n  * Add support for callbacks for gauges/counters, restore process stat metrics (Tim Wojtulewicz, Corelight)\n\n  * Add a services.json endpoint for Prometheus service discovery (Tim Wojtulewicz, Corelight)\n\n  * Don't include endpoint label/value when collecting metrics internally (Tim Wojtulewicz, Corelight)\n\n  * Remove everything related to aggregation (Tim Wojtulewicz, Corelight)\n\n  * Make all options const-redefs, remove all of the change handler code (Tim Wojtulewicz, Corelight)\n\n  * Move base types from telemetry framework to init-bare (Tim Wojtulewicz, Corelight)\n\n  * Update test baselines due to underscore changes (Tim Wojtulewicz, Corelight)\n\n  * Convert telemetry code to use prometheus-cpp (Tim Wojtulewicz, Corelight)\n\n  * Add necessary script-land changes (Tim Wojtulewicz, Corelight)\n\n  * Add prometheus-cpp submodule, FindPrometheusCpp cmake module (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.302 | 2024-05-31 09:37:21 -0700\n\n  * More precise error reporting for the disable_analyzer() BiF (Christian Kreibich, Corelight)\n\n  * Add btests for the lookup_connection_analyzer_id() BiF. (Christian Kreibich, Corelight)\n\n  * Add BiF for looking up a connection's numeric protocol analyzer IDs (Christian Kreibich, Corelight)\n\n7.0.0-dev.298 | 2024-05-29 13:49:00 -0700\n\n  * removing now-vestigial \"add\" and \"delete\" statements (Vern Paxson, Corelight)\n\n  * script optimization support for \"add\" and \"delete\" being expressions (Vern Paxson, Corelight)\n\n  * \"add\" and \"delete\" are now expressions rather than statements (Vern Paxson, Corelight)\n\n  * bug fix for dealing with illegal types of initializers (Vern Paxson, Corelight)\n\n  * added a space when rendering some expressions so they're more readable (Vern Paxson, Corelight)\n\n7.0.0-dev.292 | 2024-05-29 14:11:57 +0100\n\n  * Copy timestamp from file object (mvhensbergen)\n\n\t\tIn some cases, e.g. running zeek on short pcaps as opposed to continuous\n\t\tpacket streams, network_time() may not equal the time that was used when\n\t\tgenerating the file object.  This results in the pe.log entry having a\n\t\tdifferent timestamp than its corresponding files.log entry which is strange\n\t\tas they refer to the exact same file.\n\n  * CI: Add coveralls-lcov gem to ubuntu 24, remove from ubuntu 20 (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.287 | 2024-05-28 13:05:45 -0700\n\n  * CI: Revert part of 2bde82ffa2f5fe9161e3322fee82eb45699b9164 to fix coverage builds (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.284 | 2024-05-24 15:04:27 -0700\n\n  * Fix Zeekygen warning for QUIC::unrecognized_version event (Christian Kreibich, Corelight)\n\n7.0.0-dev.282 | 2024-05-24 10:49:31 -0700\n\n  * Update TLS consts, mainly new named curves. (Johanna Amann, Corelight)\n\n    Add test for X25519Kyber768Draft00 (post-quantum key agreement)\n\n7.0.0-dev.280 | 2024-05-21 16:22:57 -0700\n\n  * CI: Remove --enable-werror for asan builds (Tim Wojtulewicz, Corelight)\n\n    There's a bug in GCC (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105562) that\n    causes std::regex to emit some warnings when built with -fsanitize=address. Any\n    warnings that actually mean anything would be caught by the other sanitizer\n    builds or by the regular ubuntu24 build.\n\n  * CI: Run coverage builds for PRs, but only upload on master (Tim Wojtulewicz, Corelight)\n\n  * Coverage: Ignore a few errors during generation (Tim Wojtulewicz, Corelight)\n\n  * Coverage: don't bother ignoring non-existent bro.dir files (Tim Wojtulewicz, Corelight)\n\n  * CI: Re-enable coverage (Tim Wojtulewicz, Corelight)\n\n  * CI: Switch asan build back to gcc (Tim Wojtulewicz, Corelight)\n\n    The tools used for coverage (gcov, lcov) work better with GCC. We could switch\n    over to similar tools for llvm, but they way they store files during coverage\n    builds don't work as well for us (mostly the places they store the files).\n\n  * CI: Avoid divide by zero error when generating coverage files (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.270 | 2024-05-20 15:54:09 -0700\n\n  * Fix for suppressing SMB logging of previously-logged files (Vern Paxson, Corelight)\n\n7.0.0-dev.268 | 2024-05-17 08:56:31 -0700\n\n  * Bump Spicy to latest dev snapshot (Benjamin Bannier, Corelight)\n\n  * CI: Disable coverage temporarily, broken with clang-18 (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.265 | 2024-05-16 11:09:23 -0700\n\n  * Fix for ZAM inlining of nested function calls with the same parameter names (Vern Paxson, Corelight)\n\n  * Fixed ZAM logic error in canonicalizing specialized min/max instructions (Vern Paxson, Corelight)\n\n  * Fixed order-of-evaluation bug in ZAM Subnet-To-Addr instruction (Vern Paxson, Corelight)\n\n  * \"-a zam\" BTest baseline update reflecting recent Spicy baseline change (Vern Paxson, Corelight)\n\n7.0.0-dev.260 | 2024-05-16 09:34:55 -0700\n\n  * CI: Disable spicy_head task for release branches (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.258 | 2024-05-15 20:00:41 -0700\n\n  * CI: Use llvm-cov-18 on Cirrus for building coverage data (Tim Wojtulewicz, Corelight)\n\n  * CI: Add missing lcov package to ubuntu 24 Dockerfile (Tim Wojtulewicz)\n\n7.0.0-dev.254 | 2024-05-13 17:40:37 -0700\n\n  * CI: Use clang-18 on Ubuntu 24 for sanitizers builds, enable TSan builds (Tim Wojtulewicz)\n\n  * CI: Add clang-18 to Ubuntu 24.04 VM (Tim Wojtulewicz)\n\n7.0.0-dev.251 | 2024-05-13 16:38:33 +0200\n\n  * Spicy: Apply missing fix for recent Spicy bump. (Robin Sommer, Corelight)\n\n7.0.0-dev.249 | 2024-05-13 11:51:17 +0200\n\n  * Bump Spicy, with small tweaks for API changes. (Robin Sommer, Corelight)\n\n7.0.0-dev.247 | 2024-05-10 10:19:43 -0700\n\n  * CI: Update asan and ubsan tasks to use Ubuntu 22.04 VM (Tim Wojtulewicz, Corelight)\n\n  * CI: Replace Ubuntu 23.10 with Ubuntu 24.04 (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.244 | 2024-05-10 11:08:47 +0200\n\n  * GH-3725: Spicy: Fix service reporting for replaced analyzers. (Robin Sommer, Corelight)\n\n    We accidentally applied analyzer mappings when looking up an\n    analyzer's name from scriptland.\n\n  * GH-3561: Spicy: Support UDP in Spicy's `protocol_*` runtime functions. (Robin Sommer, Corelight)\n\n    This extends the ability to feed new payload back into Zeek's analyzer\n    pipeline from TCP to now also UDP.\n\n    Note: We don't extend this further to ICMP because the ICMP analyzer\n    cannot be dynamically instantiated (Zeek aborts when trying so). As\n    ICMP isn't very interesting from use case perspective anyways, that\n    seems fine.\n\n  * Add method to analyzer to retrieve direct child by name. (Robin Sommer, Corelight)\n\n  * Add explicit children life-cycle management method to analyzers. (Robin Sommer, Corelight)\n\n  * Extend PIA's `FirstPacket` API. (Robin Sommer, Corelight)\n\n    `FirstPacket()` so far supported only TCP. To extend this to UDP, we\n    move the method into the PIA base class; give it a protocol parameter\n    for the case that there's no actual packet is available; and add the\n    ability to create fake UDP packets as well, not just TCP.\n\n    This whole thing is pretty ugly to begin with, and this doesn't make\n    it nicer, but we need this extension that so we can feed UDP data into\n    the signature engine that's tunneled over other protocols. Without the\n    fake packets, DPD signatures in particular wouldn't have anything to\n    match on.\n\n  * Spicy: Prepare for supporting forwarding to protocols other than TCP. (Robin Sommer, Corelight)\n\n    So far the Spicy runtime supported forwarding data into other\n    analyzers only for TCP analyzers. This puts branching logic in place\n    that let the relevant runtime functions dispatch differently based on\n    the target transport-layer protocol. We don't implement anything else\n    than TCP yet; that will come next.\n\n    Along with the internal changes, this also updates the user-visible\n    runtime function to pass protocol information in. For now, this\n    likewise remains limited to TCP. The function signatures are chosen so\n    that they stay backwards-compatible to previous Spicy version. In\n    particular, they default to TCP where not otherwise specified.\n\n  * Fix include of private file in public header (Benjamin Bannier, Corelight)\n\n  * Update package-manager submodule [nomail] (Tim Wojtulewicz, Corelight)\n\n  * Update zeekctl submodule [nomail] (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.231 | 2024-05-08 13:09:25 -0700\n\n  * enable ZAM operation specifications to reside in multiple files (not yet used) (Vern Paxson, Corelight)\n\n7.0.0-dev.229 | 2024-05-08 09:55:01 -0700\n\n  * Move packet_analysis::Dispatcher to detail namespace (Tim Wojtulewicz, Corelight)\n\n.0.0-dev.226 | 2024-05-07 12:02:28 -0700\n\n  * make SSH analyzer robust to half-duplex connections (Vern Paxson, Corelight)\n\n7.0.0-dev.224 | 2024-05-07 10:26:40 -0700\n\n  * Clarify membership in the Site::private_address_space prefix list. [skip ci] (Christian Kreibich, Corelight)\n\n    IANA's IPv6 special-purpose address registry now has members that technically\n    meet the definition of not being globally reachable, but don't imply operating\n    locally. An example: https://datatracker.ietf.org/doc/draft-ietf-6man-sids/06/\n\n    This change just explains that distinction.\n\n7.0.0-dev.222 | 2024-05-07 10:25:55 -0700\n\n  * Avoid segfault when generating Zeekygen docs on Zeek-internal identifiers. (Christian Kreibich, Corelight)\n\n    Identifiers that Zeek generates explicitly in-core for example during component management\n    (\"Analyzer::ANALYZER_FOO\", \"Input::READER_FOO\", etc), aren't associated with any\n    scripts and would lead to nullpointer derefs when trying to identify\n    modification time.\n\n    This fix returns a zero timestamp in such cases, ensuring it never triggers docs\n    refreshes. We do the same e.g. in PackageInfo instances.\n\n  * Add btest for Zeekygen docs extraction on identifiers defined by the Zeek core. (Christian Kreibich, Corelight)\n\n    Mainly, this should not crash. :-) The baseline output file also should remain\n    empty, since Zeekygen's staleness test should conclude that it's sufficiently\n    fresh.\n\n7.0.0-dev.218 | 2024-05-07 09:45:25 +0200\n\n  * Fix packet analyzer replacement. (Robin Sommer, Corelight)\n\n    Also reworking the existing test, which was pretty odd/broken.\n\n  * GH-3573: Spicy: Wenn replacing an analyzer add a component mapping. (Robin Sommer, Corelight)\n\n    This uses the new API to replace components internally.\n\n    With these changes in place, replacing protocol analyzers now don't\n    need to register their ports anymore if they match what the original\n    analyzer was using (because the old one's registrations will map\n    over).\n\n    Packet analyzer replacement doesn't quite work yet but will be fixed\n    in next commit.\n\n  * Add component API to transparently remap one component to another one. (Robin Sommer, Corelight)\n\n    When a specific component is requested through its tag or name, one\n    can now have the component manager transparently return a different\n    one that has been registered to replace the original one. We limit\n    this to disabled components to avoid unnecessary confusion. That also\n    means that remappings are currently only supported for analyzers\n    (because other types of components cannot be disabled for now, per the\n    previous change).\n\n  * Move enabled/disabled functionality from analyzers into `Component` base class API. (Robin Sommer, Corelight)\n\n    The different analyzers types all had their own methods for\n    enabling/disabling their availability. This change abstracts that into\n    a new API inside their base class (`plugin::Component`) so that they\n    can be toggled in a unified way.\n\n    In principle, other types of components could/should use this as well\n    now, so that, e.g., an input reader's availability could be toggled at\n    runtime. The code doesn't make that broader change for now because it\n    would requires a series of changes wherever these other component\n    types are being used. However, that means that one now could try\n    toggling some other component through the new API without that having\n    any effect. To catch that, there's a runtime check in place that turns\n    any such attempt into an internal error.\n\n  * GH-3440: Spicy: Query Zeek scriptland for file handles. (Robin Sommer, Corelight)\n\n    Like traditional file analyzers, we now query Zeek's\n    `get_file_handle()` event for handles when a connection begins\n    analyzing an embedded file. That means that Spicy-side protocol\n    analyzers that are forwarding data into file analysis now need to call\n    Zeek's `Files::register_protocol()` and provide a callback for\n    computing file handles. If that's missing, Zeek will now issue a\n    warning. This aligns with the requirements Zeek's traditional protocol\n    analyzers. (If the EVT file defines a protocol analyzer to `replace`\n    an existing one, that one's `register_protocol()` will be consulted.)\n\n    Because Zeek's `get_file_handle()` event requires a current\n    connection, if a Spicy file analyzer isn't directly part of a\n    connection context (e.g., with nested files), we continue to use\n    hardcoded, built-in file handle. Scriptland won't be consulted in\n    that case, just like before.\n\n  * Spicy: Cleanup some runtime code. (Robin Sommer, Corelight)\n\n  * GH-3606: Spicy: Map Spicy's `Protocol` enum to Zeek's `transport_proto`. (Robin Sommer, Corelight)\n\n    We now hardcode this specific enum mapping to make Zeek-side usage\n    more convenient.\n\n7.0.0-dev.207 | 2024-05-06 16:59:31 -0700\n\n  * Update broker submodule [nomail] (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.205 | 2024-05-06 11:16:15 -0700\n\n  * Move the options from policy/tuning/defaults to actual Zeek defaults, deprecate that package (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.200 | 2024-05-02 19:00:53 -0700\n\n  * refine Val \"footprint\" to equate long strings with multiple objects (Vern Paxson, Corelight)\n\n7.0.0-dev.198 | 2024-05-02 10:21:43 -0700\n\n  * Constify classes in RuleMatcher, fixes c++20 build failure (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.196 | 2024-04-29 09:09:28 -0700\n\n  * Fix cid propagation into files.log (Johanna Amann, Corelight)\n\n    Changes to the connection id were not propagated to files.log in all\n    cases.\n\n    Fixes GH-3700\n\n7.0.0-dev.194 | 2024-04-29 09:08:20 -0700\n\n  * factored BTest constants into globals to prevent premature ZAM optimization when testing (Vern Paxson, Corelight)\n\n  * addressed minor issues flagged by Coverity (Vern Paxson, Corelight)\n\n7.0.0-dev.191 | 2024-04-29 09:06:24 -0700\n\n  * Avoid calling typecasts in Val when we have direct access to the underlying value object (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.187 | 2024-04-26 12:29:18 -0700\n\n  * Gracefully handle empty/missing shadow file (Peter Cullen, Corelight)\n\n    When a shadow file is empty/missing during rotation, Zeek aborts\n    with an error message, but if the shadow file was empty, it'll still\n    be there after the restart, causing an endless restart loop. This\n    solution gracefully handles the rotation in such cases using the\n    default file extension and post processing function.\n\n7.0.0-dev.184 | 2024-04-26 11:17:52 -0700\n\n  * GH-3671: Factor in caplens in ICMPAnalyzer::DeliverPacket length calculations (Christian Kreibich, Corelight)\n\n  * Update binpac submodule [nomail] (Tim Wojtulewicz, Corelight)\n\n  * Update gen-zam submodule [nomail] (Tim Wojtulewicz, Corelight)\n\n  * Update doc submodule [nomail] [skip ci] (zeek-bot)\n\n7.0.0-dev.179 | 2024-04-25 09:15:30 -0700\n\n  * rewrite of ZAM optimization of BiFs and script functions/idioms (Vern Paxson, Corelight)\n\n  * flag base script as being known to ZAM optimization (Vern Paxson, Corelight)\n\n  * ZAM optimization for constructing records w/ fields initialized to network_time (Vern Paxson, Corelight)\n\n  * factor some functionality used by BiFs to make accessible to ZAM instructions (Vern Paxson, Corelight)\n\n  * factor script optimization Expr AST nodes out of main AST header (Vern Paxson, Corelight)\n\n  * new internal AST node for expression idioms with corresponding ZAM built-ins (Vern Paxson, Corelight)\n\n  * streamlining of expressions only used for script optimization (Vern Paxson, Corelight)\n\n  * reordering of expressions to match main usage vs. script-optimization extras (Vern Paxson, Corelight)\n\n  * support for conditional expressions transforming into interal has-elements expr (Vern Paxson, Corelight)\n\n  * make same_expr() functionality accessible as a utility (Vern Paxson, Corelight)\n\n  * unify functionality across EqExpr and RelExpr classes (Vern Paxson, Corelight)\n\n  * introduce notions of script functions/BiFs that are (1) foldable, (2) replaceable (Vern Paxson, Corelight)\n\n  * optimization of scripting idioms - min/max, has-elements (Vern Paxson, Corelight)\n\n  * hooks for ZAM optimization of calls to particular functions (Vern Paxson, Corelight)\n\n  * shift ZAM maintenance monitoring of new BiFs to a BTest so it automatically runs (Vern Paxson, Corelight)\n\n  * make externally available the expression used for initializating a record field (Vern Paxson, Corelight)\n\n  * record field initialization optimization: do coercions at compile-time if applicable (Vern Paxson, Corelight)\n\n  * $ZAM_PROFILE_ALL set tells ZAM to profile function bodies even if not executed (Vern Paxson, Corelight)\n\n  * performance speed-up for SMB base scripts (Vern Paxson, Corelight)\n\n  * fix for ZAM optimization pruning of unnecessary instructions (Vern Paxson, Corelight)\n\n  * bug fix for ZAM code generation (Vern Paxson, Corelight)\n\n  * optimize generation of \"-O gen-C++\" code for table/vector size operations (Vern Paxson, Corelight)\n\n  * removing vestigial same_val() function (Vern Paxson, Corelight)\n\n  * fix for ZAM optimization of '!' expressions (Vern Paxson, Corelight)\n\n  * fix for ZAM tracking of return values when in-lining (Vern Paxson, Corelight)\n\n  * fix for ZAM profiling potentially accessing freed memory (Vern Paxson, Corelight)\n\n  * Fix typo in hook name (Benjamin Bannier, Corelight)\n\n    While in Spicy code a hook priority is spelled `priority=4711` the\n    attribute is still called `&priority` (like in HILTI) and we rely on\n    exactly that name when e.g., extracting hook priorities for scheduling.\n\n    This change was introduced as part of\n    db98dc419334667e9299ef00670f4d435f3e408c and caused the default hook\n    priority for hooks defined in EVT files (intended to be -1000 to likely\n    schedule after e.g., hooks in the Spicy grammars) to be ignored. This\n    could then e.g., introduce issue when a `%done` hook would mutate state\n    exposed in an EVT hook (which now might not have seen the updated state\n    due to different scheduling).\n\n7.0.0-dev.147 | 2024-04-22 17:08:25 -0700\n\n  * Don't attempt to stop or flush disabled writer frontends (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.145 | 2024-04-22 15:55:53 -0700\n\n  * Allow SMB_TCP record to contain multiple protocol identifiers/headers (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.143 | 2024-04-22 15:15:55 -0700\n\n  * Check for valid identifier in WhenStmt::Describe (Tim Wojtulewicz, Corelight)\n\n  * Bump zeek-aux submodule to pull in zeek-archiver addition (Christian Kreibich, Corelight)\n\n  * Remove zeek-archiver from build config, deprecate --disable-archiver in configure (Christian Kreibich, Corelight)\n\n  * Drop zeek-archiver submodule (Christian Kreibich, Corelight)\n\n    zeek-archiver now lives in the zeek-aux submodule.\n\n7.0.0-dev.136 | 2024-04-18 09:02:14 -0700\n\n  * Update core.pcap.filter-warning baseline (Peter Cullen, Corelight)\n\n    Only the line numbers changed.\n\n  * Add PacketFilter::remove_exclude function (Peter Cullen, Corelight)\n\n    This adds a public function to the PacketFilter framework that\n    allows the caller to remove an exclude filter by filter id.\n\n7.0.0-dev.132 | 2024-04-17 14:59:43 -0700\n\n  * Parse and store localversion string (Peter Cullen, Corelight)\n\n  * Update version string btests for localversion (Peter Cullen, Corelight)\n\n  * Support for configurable localversion (Peter Cullen, Corelight)\n\n7.0.0-dev.123 | 2024-04-17 14:33:55 -0700\n\n  * fix for ZAM optimization of \"while\" loops (Vern Paxson, Corelight)\n\n7.0.0-dev.121 | 2024-04-17 09:20:53 -0700\n\n  * Add Opensuse leap 15.6 to CI (Johanna Amann, Corelight)\n\n7.0.0-dev.119 | 2024-04-15 17:52:44 +0200\n\n  * Bump Spicy. (Robin Sommer, Corelight)\n\n    Includes a couple of updates for the QUIC analyzer.\n\n  * Remove support for old Spicy versions from QUIC analyzer. (Robin Sommer, Corelight)\n\n7.0.0-dev.116 | 2024-04-11 15:26:05 -0700\n\n  * Make sure that vcpkg isn't preferred if pcap_root_dir is passed in (Tim Wojtulewicz)\n\n7.0.0-dev.114 | 2024-04-10 11:02:32 +0200\n\n  * Bump Spicy, including necessary changes to work with the current\n    Spicy version. (Robin Sommer, Corelight)\n\n  * Remove some unused Spicy state. (Robin Sommer, Corelight)\n\n7.0.0-dev.111 | 2024-04-09 15:12:13 -0700\n\n  * ZAM fix for concretizing vectors in record constructors (Vern Paxson, Corelight)\n\n  * improve ZAM's estimation of profiling overheads (Vern Paxson, Corelight)\n\n7.0.0-dev.108 | 2024-04-08 12:02:03 -0700\n\n  * CI: Remove commented openssl 1.1 workaround from macOS preparation script (Tim Wojtulewicz, Corelight)\n\n  * CI: Fix installation of python package on macOS (Tim Wojtulewicz, Corelight)\n\n  * fix ZAM \"cat\" of doubles/times to include trailing \".0\" per normal BiF behavior (Vern Paxson, Corelight)\n\n7.0.0-dev.102 | 2024-04-02 08:17:08 -0700\n\n  * fix ZAM \"cat\" of doubles/times to include trailing \".0\" per normal BiF behavior (Vern Paxson, Corelight)\n\n7.0.0-dev.100 | 2024-03-29 11:15:24 -0700\n\n  * CI: Specify the xcode version of the macOS Sonoma instance (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.98 | 2024-03-28 11:09:48 -0700\n\n  * Remove vestigial Conan bit in CMakeLists.txt (Christian Kreibich, Corelight)\n\n  * When configuring Spicy, be prepated for zeek_lib or zeek_exe targets. (Christian Kreibich, Corelight)\n\n  * Fix a typo in CMakeLists.txt when building Zeek as a library (Christian Kreibich, Corelight)\n\n7.0.0-dev.94 | 2024-03-25 11:25:47 +0100\n\n  * Bump Spicy to current `main`. (Robin Sommer, Corelight)\n\n7.0.0-dev.92 | 2024-03-19 14:39:26 -0700\n\n  * ZAM documentation updated to reflect finer-grained profiling (Vern Paxson, Corelight)\n\n  * ZAM-specific BTest baseline changes for tweak to how ZAM bodies print (Vern Paxson, Corelight)\n\n  * BTest baseline changes for tweak to how ZAM bodies print (Vern Paxson, Corelight)\n\n  * ZAM execution changes to support richer profiling (Vern Paxson, Corelight)\n\n  * use richer block-aware location information for ZAM instructions (Vern Paxson, Corelight)\n\n  * better isolation of ZAM instruction elements (Vern Paxson, Corelight)\n    hooks for tracking extended ZAM profiling location\n\n  * framework for --enable-ZAM-profiling configuration (Vern Paxson, Corelight)\n    profiles go to zprof.log rather than stdout\n\n  * ZAM classes in support of finer-grained profiling (Vern Paxson, Corelight)\n\n  * refined ZAM function profiling to include (correct) statement line number blocks (Vern Paxson, Corelight)\n\n  * avoid potentially expensive mallinfo() call if result won't be used (Vern Paxson, Corelight)\n\n7.0.0-dev.80 | 2024-03-19 10:59:22 -0700\n\n  * Remove variant from StdFunctionStmt (Tim Wojtulewicz, Corelight)\n\n    The variant ended up conflicting with std::bind, which resulted in failures\n    on the btest invoking it. Change back to a single function that takes a\n    flow, and default it to a value in Exec.\n\n7.0.0-dev.78 | 2024-03-18 16:37:46 -0700\n\n  * Add a method to register an event handler to a std::function via C++ (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.76 | 2024-03-18 16:15:44 -0700\n\n  * Update Broker submodule (Dominik Charousset, Corelight)\n\n  * cirrus: Remove misleading and always empty AWS_ECR_USERNAME (Arne Welzel, Corelight)\n\n7.0.0-dev.72 | 2024-03-18 09:55:51 +0100\n\n  * btest/spicy: Remove most port usages (Arne Welzel, Corelight)\n\n  * spicy: Deprecate port/ports in .evt files (Arne Welzel, Corelight)\n\n  * Update doc submodule (Arne Welzel, Corelight)\n\n    For spicy-pygments.py sync.\n\n  * github/generate-docs: Only commit if there are staged changes (Arne Welzel, Corelight)\n\n    git diff-index by default includes staged and non-staged changes.\n    The autogen-spicy-docs script copies over spicy-pygments.py from\n    the Spicy tree into doc/ext.\n\n    The job would attempt to commit scripts and script-reference even\n    though nothing actually is staged when a spurious diff existed in\n    ext/spicy-pygments.py. Guard from this by using --cached.\n\n7.0.0-dev.66 | 2024-03-16 11:14:25 +0100\n\n  * Bump Spicy to latest version reworking AST memory management. (Robin Sommer, Corelight)\n\n    Includes the necessary Zeek-side changes.\n\n    Goes with https://github.com/zeek/spicy/pull/1691.\n\n  * GH-3647: Add a CI test with the same options as we used for binary builds. (Johanna Amann, Corelight)\n\n    We already do have a test that check static builds, but none that tests\n    the exact same build flags we use for binary builds on OBS. This commit\n    fixes this oversight.\n\n  * GH-3647: Fix binary build of `spicyz`. (Robin Sommer, Corelight)\n\n    We need to link against the Spicy toolchain's object libraries but\n    were linking against static libraries instead.\n\n7.0.0-dev.61 | 2024-03-15 13:14:47 -0700\n\n  * CI: Remove CentOS 7 and Debian 10 builds (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.59 | 2024-03-15 13:36:30 +0100\n\n  * testing/external/cluster: Switch to docker-compose v2 (Arne Welzel, Corelight)\n\n    The Python docker-compose executable in the docker_builder image is not\n    functional anymore (TypeError: kwargs_from_env() got an unexpected\n    keyword argument 'ssl_version').\n\n    docker-compose v1 has been sun-setted for quite some time. Do the\n    minimal to switch to docker compose v2.\n\n7.0.0-dev.57 | 2024-03-13 10:17:48 -0700\n\n  * Add community contributions for the 6.2 timeframe to NEWS. [skip ci] (Christian Kreibich, Corelight)\n\n7.0.0-dev.54 | 2024-03-12 10:31:19 +0100\n\n  * GH-3640: Expr: Handle TYPE_VOID in SizeExpr and AssignExpr::Typecheck() (Arne Welzel, Corelight)\n\n    @vpax reported surprising behavior when working with \"void values\".\n    While these are not exposed to script land, plumb the places he\n    pointed out are causing confusing behavior.\n\n    Closes #3640.\n\n7.0.0-dev.52 | 2024-03-08 19:10:06 +0100\n\n  * AST location fixes for -O gen-C++ (Vern Paxson, Corelight)\n\n  * script optimization support for clearing tables/vectors using \"delete\" (Vern Paxson, Corelight)\n\n  * fix for ZAM printing of instructions that modify slots other than slot 1 (Vern Paxson, Corelight)\n\n  * fixed bug where appending an empty vector to a vector-of-vector's had no effect (Vern Paxson, Corelight)\n\n7.0.0-dev.47 | 2024-03-07 09:52:29 +0100\n\n  * Bump Spicy. (Robin Sommer, Corelight)\n\n7.0.0-dev.45 | 2024-03-06 10:38:55 +0100\n\n  * Make worker restart in cluster btest race-proof (Jan Grashoefer, Corelight)\n\n7.0.0-dev.43 | 2024-03-05 19:23:09 +0100\n\n  * highwayhash: Point to github.com/google/highwayhash, bump to master (Arne Welzel, Corelight)\n\n  * RE/Specific_RE_Matcher: Make Compile() return false for syntax errors (Arne Welzel, Corelight)\n\n    When creating RE_Matcher instances at runtime and verifying the pattern\n    compiles via Compile(), the syntax_error flag wasn't respected and\n    Compile() would return true even for some invalid regular expressions.\n\n    For example, compiling /a{1,b}/, Compile() would return true even though\n    it produced a reporter error while parsing complaining about b not\n    being valid.\n\n    This patch improves the error handling, so that calling Compile() returns\n    false whenever zeek::detail::synerr() was called while a pattern was\n    parsed. The use-case is creation of patterns at runtime based on\n    JavaScript strings. These might be entered or received at runtime via\n    an API. This change allows to be a bit more robust to detect invalid\n    input and raising exceptions to notify the user.\n\n    This also move syntax_error and csize out of global scope.\n\n    If RE_Matcher was to be used as an actual API, we likely should squelch\n    the reporter errors and mark it as not thread safe, but this is a small\n    step forward.\n\n7.0.0-dev.38 | 2024-03-04 12:32:59 -0700\n\n  * CI: Bump FreeBSD 13 build to 13.3 (Tim Wojtulewicz, Corelight)\n\n7.0.0-dev.36 | 2024-03-04 18:22:34 +0100\n\n  * Stmt: Fix assert evaluating cond twice (Arne Welzel, Corelight)\n\n    Since 81a9745fb36fb6705873921423364bd2c438bfc4, the assert condition is\n    evaluated twice. This leads to unexpected behavior when cond has a side\n    effect like publishing a message or creating a log stream or filter.\n\n    Found while using the following in ad-hoc testing code and wondering\n    why two messages were published.\n\n        assert publish(Cluster::worker_topic, hello, \"abc\")\n\n7.0.0-dev.34 | 2024-03-04 15:49:19 +0100\n\n  * Port Spicy integration to new AST API. (Robin Sommer, Corelight)\n\n7.0.0-dev.32 | 2024-02-28 17:10:26 +0100\n\n  * Bump zeekjs to 0.12.0 (Arne Welzel, Corelight)\n\n      0a89ca6 doc: Expand zeek.as() description and add an example\n      7e814d7 Types: Implement basic pattern support\n      43df9d2 Update docs to provide example of shared Node.js openSSL configuration\n      3bf2ea5 lsan suppressions: Add some for 21.11\n      640affa zeek.global_vars: Remove leftover internal field usage\n      3ee53c7 zeek.global_vars: Implement setter\n      8144061 zeek.as: Support more Zeek types\n      b453483 zeek.as: Fix crash for non-atomic types\n\n7.0.0-dev.29 | 2024-02-27 15:18:49 +0100\n\n  * GH-3619: spicy/zeekygen: Remove mtime from generated code (Arne Welzel, Corelight)\n\n    Zeekygen implements its own make-style update logic to prevent\n    re-creation of files that have not changed. To fulfill this, we\n    currently encode the current time into spicyz generated .cc files.\n\n    This degrades ccache efficiency for built-in analyzers and also\n    for all .evt files compiled during testing. Switch SpicyModuleInfo\n    to return current time instead. This results in the re-generation\n    of documentation files unconditionally when running Zeekygen, but\n    that seems more acceptable IMO.\n\n    Generally wonder if Zeekygen should produce output unconditionally\n    and if we need to clobber prevention, compare with the content of\n    the existing file.\n\n7.0.0-dev.26 | 2024-02-26 21:15:59 +0100\n\n  * signatures/iso-9660: Add \\x01 suffix to CD001 (Arne Welzel, Corelight)\n\n    As discussed with Tim, that should make it a bit more robust against\n    false positives.\n\n  * test-all-policy: Do not load iso-9660.zeek (Arne Welzel, Corelight)\n\n    Changing the default_file_bof_buffer_size has subtle impact on\n    MIME type detection and changed the zeek-testing baseline. Do\n    not load this new script via test-all-policy to avoid this.\n\n    The new test was mainly an aid to understand what is actually going on.\n    In short, if default_file_bof_buffer_size is larger than the file MIME\n    detection only runs when the buffer is full, or when the file is removed.\n    When a file transfer happens over multiple HTTP connections, only\n    some or one of the http.log entries will have a proper response MIME type.\n\n    PCAP extracted from 2009-M57-day11-18.trace.gz.\n\n  * signatures: Move ISO 9660 signature to policy (Arne Welzel, Corelight)\n\n    The previous \"fix\" caused significant performance degradation without\n    the signature ever having a chance to trigger. Moving it to policy\n    seems the best compromise, the alternative being outright removing it.\n\n  * GH-3490: global_ids: Align script_id$type_name field with type_name() (Arne Welzel, Corelight)\n\n    Populate script_id$type_name with what the type_name() bif\n    would produce for the same identifier.\n\n    Closes #3490\n\n  * utils: Introduce packages.zeek with can_load() helper (Arne Welzel, Corelight)\n\n  * GH-3594: zeek.bif: Add find_in_zeekpath() helper (Arne Welzel, Corelight)\n\n    Relates to #3594. This helper can be used to determine the path that\n    will be used by @load, if at all.\n\n7.0.0-dev.16 | 2024-02-26 11:09:57 -0700\n\n  * Update Mozilla CA and Google CT list and related tests. (Johanna Amann, Corelight)\n\n7.0.0-dev.13 | 2024-02-22 17:00:29 +0100\n\n  * GH-3139: spicy: Remove Zeek version from spicyz/config.h.in (Arne Welzel, Corelight)\n\n    It seems that Zeek's version number and string only need to be\n    available at runtime, so this change removes it from spicyz/configh.in\n    to avoid needlessly busting ccache for the src/spicyz tree for on a\n    Zeek version bump.\n\n  * spicy: Drop ZEEK_VERSION_NUMBER ifdef'ery (Arne Welzel, Corelight)\n\n    Given src/spicy is part of the Zeek tree, these are not necessary and\n    are probably just remains from the spicy-plugin era.\n\n7.0.0-dev.10 | 2024-02-22 12:38:38 +0100\n\n  * signatures: Fix ISO 9960 signature (Arne Welzel, Corelight)\n\n    This signature only really works when default_file_bof_buffer_size is bumped\n    to a sufficient value (40k).\n\n7.0.0-dev.8 | 2024-02-22 12:22:56 +0100\n\n  * testing: Update zeek-testing-private commit hash (Arne Welzel, Corelight)\n\n  * ftp: Reset fuid after logging (Arne Welzel, Corelight)\n\n    A user reported being confused about the fuid association of subsequent\n    FTP commands when a data transfer has completed. It seems reasonable to\n    unset fuid upon logging a FTP command which had a fuid.\n\n    The current behavior results in the PORT or PASV commands after a RETR or STOR\n    to have the fuid of the prior file transfer. Similarly, any CWD or DEL commands\n    following a file transfer will unnecessarily be logged with the fuid of the\n    prior file transfer.\n\n    This tickles the baselines for the private testing PCAP a lot, primarily\n    because there data connections in that pcap are never established properly.\n    E.g, the fuids FzDzid1Dxm9srVKHXf and FEfYX73q5C6GEQZXX9 have been re-used\n    for multiple commands.\n\n    This may look like we're losing information, but the fuids vanishing\n    in the normal btests belong to a LIST command that isn't logged by\n    default into ftp.log. If it was, the fuid would be attached to it.\n\n7.0.0-dev.5 | 2024-02-22 12:01:33 +0100\n\n  * GH-3472: Allow delete statement for tables, sets and vectors (Arne Welzel, Corelight)\n\n    Relates to #3472. This allow \"delete tbl\" as an alternative for\n    clear_table(tbl). Also works for vectors.\n\n  * Update cmake submodule [nomail] (Tim Wojtulewicz, Corelight)\n\n  * Update cmake submodule [nomail] (Tim Wojtulewicz, Corelight)\n\n  * Point cmake submodule at master branch (Tim Wojtulewicz, Corelight)\n\n  * Start of 7.0.0 development (Tim Wojtulewicz, Corelight)\n\n  * Update zkg submodule to v3.0.1 (Tim Wojtulewicz, Corelight)\n\n6.2.0-dev.545 | 2024-02-20 10:57:30 -0700\n\n  * Pull in variant-enabled Broker (Dominik Charousset, Corelight)\n\n    Switch the Broker submodule to a version with `broker::variant` enabled\n    and provide new overloads for `broker::variant` in the Broker manager.\n\n6.2.0-dev.543 | 2024-02-15 11:08:16 -0500\n\n  * Bump zkg to v3.0.0 (Tim Wojtulewicz, Corelight)\n\n6.2.0-dev.541 | 2024-02-15 11:07:17 -0500\n\n  * Bump Spicy to latest dev snapshot. (Benjamin Bannier, Corelight)\n\n6.2.0-dev.539 | 2024-02-13 20:10:06 +0100\n\n  * zeek.bif: Booleanate String constructor calls (Arne Welzel, Corelight)\n\n  * Conn/net_utils/fmt_mac: Avoid snprintf(), memcpy() and allocation (Arne Welzel, Corelight)\n\n    The fmt_mac() function returning a std::string means the resulting mac\n    is copied at least once upon returning. Then, the Assign() in GetVal()\n    taking a std::string internally allocates a new zeek::String which\n    hits a malloc (no short-string optimization for zeek::String) and then\n    also copies the content from the std::string into the malloced memory.\n\n    Save a few cycles by directly using the allocated memory with the\n    String instance. This change improves runtime for a SYN-only pcap\n    with just base/protocols/conn loaded by some 1-2%.\n\n  * bytestring_to_hexstr: Use bytetohex() instead of snprintf() (Arne Welzel, Corelight)\n\n    ...also avoid the extra memcpy and memory allocation.\n\n  * digest/digest_print: Use bytetohex() instead of snprintf() (Arne Welzel, Corelight)\n\n6.2.0-dev.533 | 2024-02-08 15:12:16 +0100\n\n  * Bump zeekjs for STMT_ANY deprecation (Arne Welzel, Corelight)\n\n  * GH-3529: Stmt: Deprecate STMT_ANY (Arne Welzel, Corelight)\n\n    This isn't used in-tree and has been misused by some external plugins\n    of mine (zeekjs and zeek-perf-support) for their own Stmt subclasses.\n    These plugins should be updated to use the new STMT_EXTERN statement.\n\n    Handle STMT_ANY explicitly in stmt_name() for the time being\n    to fix #3529 until we remove STMT_ANY for good.\n\n  * Stmt: Introduce STMT_EXTERN (Arne Welzel, Corelight)\n\n    It's currently possible for plugin's to implement their own statement\n    subclasses and override the Exec() implementation. This has been leveraged\n    by ZeekJS [1] and zeek-perf-support [2] as well as a private WASM plugin.\n    All of these used STMT_ANY as the tag of their own statement subclasses.\n\n    With STMT_EXTERN, we make the possibility to add external code into the AST\n    somewhat more supported. It's all in detail space and plugin authors have\n    no guarantee for stability, but it seems such a powerful extension point\n    that IMO we should keep it.\n\n    I'm conscious there's the broader topic how this interacts with ZAM\n    optimization like in-lining or rewriting of statements. However, this\n    already applies to the STMT_ANY usage of the mentioned plugins.\n\n    [1] https://github.com/corelight/zeekjs\n    [2] https://github.com/zeek/zeek-perf-support\n\n6.2.0-dev.528 | 2024-02-07 12:45:30 -0700\n\n  * Update .gitignore to add Emacs and Vim temp files (Tim Wojtulewicz)\n\n  * Update vcpkg submodule to pull in c-ares 1.26.0 to match other platforms (Tim Wojtulewicz)\n\n6.2.0-dev.525 | 2024-02-07 09:36:18 -0800\n\n  * Some NEWS updates for 6.2 (Christian Kreibich, Corelight)\n\n6.2.0-dev.523 | 2024-02-07 13:14:40 +0100\n\n  * websocket: Implement Spicy's unmask in C++ (Arne Welzel, Corelight)\n\n    This improves runtime for the test pcap I have from 22 seconds to\n    12 seconds, about 1.8x times faster.\n\n  * websocket: Add Spicy parser version, too. (Arne Welzel, Corelight)\n\n    The Spicy analyzer is added as a child analyzer when enabled and the\n    WebSocket.cc logic dispatches between the BinPac and Spicy version.\n\n    It substantially slower when tested against a somewhat artificial\n    2.4GB PCAP. The first flamegraph indicates that the unmask() function\n    stands out with 35% of all samples, and above it shared_ptr samples.\n\n6.2.0-dev.519 | 2024-02-06 11:51:26 +0000\n\n  * Netcontrol: add rule_added_policy (Johanna Amann, Corelight)\n\n    rule_added_policy allows the modification of rules just after they have\n    been added. This allows the implementation of some more complex features\n    - like changing rule states depending on insertion in other plugins.\n\n  * Netcontrol: more logging in catch-and-release (Johanna Amann, Corelight)\n\n    Catch-and-release logs now include the plugin that is responsible for an\n    action. Furthermore, the catch-and-release log also includes instances\n    where a rule already existed, and where an error occurred during an\n    operation.\n\n  * Netcontrol: allow supplying explicit name to Debug plugin (Johanna Amann, Corelight)\n\n    This change extends the arguments of NetControl::create_debug, and\n    allows the specification of an optional name argument, which can be used\n    instead of the default-generated name.\n\n    This is helpful when one wants to attach several plugins to verify\n    behavior in those cases.\n\n6.2.0-dev.515 | 2024-02-06 11:22:26 +0100\n\n  * Obj: Implement with_location_of() as template (Arne Welzel, Corelight)\n\n  * fixes & enhancements to location information associated w/ AST nodes & ZAM optimization (Vern Paxson, Corelight)\n\n6.2.0-dev.512 | 2024-02-06 09:55:48 +0100\n\n  * Do not default PoolSpec topics to the empty string. (Christian Kreibich, Corelight)\n\n    Similar to `node_topic`, we already spell out a topic in the existing use and\n    there's no obviously meaningful default value.\n\n  * Do not default to proxy nodes in Broker::PoolSpec (Christian Kreibich, Corelight)\n\n    This requires pool creation to spell out a spec explicitly, which the only code\n    using these types already does. There's no reason for pools to automatically\n    refer to proxies.\n\n  * Add missing include for int32_t in DebugCmds.h (Tim Wojtulewicz)\n\n  * CI: Remove emacs backup file of fedora-38 Dockerfile (Tim Wojtulewicz)\n\n  * CI: Fix building of alpine image with regards to python packages (Tim Wojtulewicz)\n\n6.2.0-dev.505 | 2024-02-05 17:18:41 -0800\n\n  * Bump cluster testsuite to latest main (Christian Kreibich, Corelight)\n\n6.2.0-dev.504 | 2024-02-05 12:50:48 -0700\n\n  * minor updates and fixes for script optimization maintenance (Vern Paxson, Corelight)\n\n6.2.0-dev.500 | 2024-02-02 15:27:23 -0700\n\n  * Fix searching for libpcap installed by vcpkg (Tim Wojtulewicz)\n\n  * Switch all of the conan configuration to vcpkg (Tim Wojtulewicz)\n\n6.2.0-dev.497 | 2024-02-02 13:50:05 -0800\n\n  * Fix markup typo in the Intel::seen_policy hook docstring [skip ci] (Christian Kreibich, Corelight)\n\n6.2.0-dev.495 | 2024-02-01 11:22:03 -0700\n\n  * Configure c-ares before libkqueue (Tim Wojtulewicz, Corelight)\n\n    On platforms without a native libkqueue, c-ares is using the existing\n    value for HAVE_KQUEUE that was set during the libkqueue setup. We don't\n    pass the libkqueue information down to the c-ares cmake run so it won't\n    have the paths or library when it builds.\n\n  * Update 3rdparty submodule to update sqlite to 3.45.0 (Tim Wojtulewicz, Corelight)\n\n  * Upgrade rapidjson to current upstream master (Tim Wojtulewicz, Corelight)\n\n  * Upgrade c-ares to 1.26.0 (Tim Wojtulewicz, Corelight)\n\n6.2.0-dev.490 | 2024-01-31 14:27:46 +0100\n\n  * spicy/diff-remove-timestamp: Fix missing -e (Arne Welzel, Corelight)\n\n    This got lost when converting to sed -E.\n\n6.2.0-dev.487 | 2024-01-30 21:47:06 +0100\n\n  * quic: Log client's source connection id, too. (Arne Welzel, Corelight)\n\n    Seem reasonable give we log the server SCID. Interestingly, the Chromium\n    examples actually have zero length (empty) source connection IDs. I wonder\n    if that's part of their \"protocol ossification avoidance\" effort.\n\n  * quic: Continue decryption attempts for later INITIAL packets (Arne Welzel, Corelight)\n\n    The original logic stopped decrypting any INITIAL packets after the\n    first. The Firefox/cloudflare pcaps actually show that the server\n    replies with a QUIC INITAL packet containing just ACK frames and no\n    CRYPTO frames. Only the second QUIC INITIAL packet from the server\n    then contains the CRYPTO frames.\n\n    There's no good reason to stop decryption attempts, either we succeed\n    down the road and then stop, or we fail and raise analyzer violations.\n\n  * quic: Rename set_conn() to set_session() (Arne Welzel, Corelight)\n\n    set_conn() should be about the c$conn record. Most other base scripts\n    for protocols use set_session(), so do the same.\n\n6.2.0-dev.483 | 2024-01-29 10:30:06 +0100\n\n  * Bump Spicy to current `main`. (Robin Sommer, Corelight)\n\n6.2.0-dev.481 | 2024-01-26 17:13:53 -0800\n\n  * Move GeoIP availability test in btests to `zeek-config --have-geoip` (Christian Kreibich, Corelight)\n\n  * Fix MMDB::Lookup() to check result status correctly (Christian Kreibich, Corelight)\n\n  * Add btest for succeeding/failing IPv4/IPv6 lookups (Christian Kreibich, Corelight)\n\n  * Add an IPv6 range to the test MMDB DBs (Christian Kreibich, Corelight)\n\n6.2.0-dev.476 | 2024-01-26 15:08:37 -0700\n\n  * Force Windows CI to use OpenSSL 3.1.1 (Tim Wojtulewicz)\n\n    There's something wrong with chocolatey's OpenSSL 3.2.0 package that\n    causes cmake to not be able to find libcrypto even though it's clearly\n    in the directory. Pinning to 3.1.1 fixes the build issue.\n\n6.2.0-dev.473 | 2024-01-25 20:54:56 +0100\n\n  * ZAM optimizations for record creation (Vern Paxson, Corelight)\n\n    includes reworking of managing \"auxiliary\" information for ZAM instructions\n\n  * testing/external: Revert commit hash for zeek-testing (Arne Welzel, Corelight)\n\n6.2.0-dev.470 | 2024-01-25 12:25:57 +0100\n\n  * GH-3256: Intel: Introduce Intel::seen_policy() hook (Arne Welzel, Corelight)\n\n    This introduces a new hook into the Intel::seen() function that allows\n    users to directly interact with the result of a find() call via external\n    scripts.\n\n    This should solve the use-case brought up by @chrisanag1985 in\n    discussion #3256: Recording and acting on \"no intel match found\".\n\n    @Canon88 was recently asking on Slack about enabling HTTP logging for a\n    given connection only when an Intel match occurred and found that the\n    Intel::match() event would only occur on the manager. The\n    Intel::match_remote() event might be a workaround, but possibly running a\n    bit too late and also it's just an internal \"detail\" event that might not\n    be stable.\n\n    Another internal use case revolved around enabling packet recording\n    based on Intel matches which necessarily needs to happen on the worker\n    where the match happened. The proposed workaround is similar to the above\n    using Intel::match_remote().\n\n    This hook also provides an opportunity to rate-limit heavy hitter intel\n    items locally on the worker nodes, or even replacing the event approach\n    currently used with a customized approach.\n\n6.2.0-dev.468 | 2024-01-25 12:21:24 +0100\n\n  * websocket: Fix opcode for continuation frames (Arne Welzel, Corelight)\n\n    A continuation frame has the same type as the first frame, but that\n    information wasn't used nor kept, resulting payload of continuation\n    frames not being forwarded. The pcap was created with a fake Python\n    server and a bit of message crafting.\n\n6.2.0-dev.465 | 2024-01-24 15:25:16 -0800\n\n  * Prepare Broker manager for broker::variant (Dominik Charousset)\n\n6.2.0-dev.463 | 2024-01-24 23:04:38 +0100\n\n  * testing/scripts: Use sed -E everywhere (Arne Welzel, Corelight)\n\n    I'm always a bit worried to use sed -E anywhere, because the canonifiers\n    give the impression it won't work everywhere consistently. My manpage says\n    sed -E should be preferred for portability, so lets remove the\n    sed -r / sed -E differentiation assuming it's just a thing from the past.\n\n6.2.0-dev.461 | 2024-01-24 23:04:12 +0100\n\n  * HTTP: Coverity std::move suggestion (Arne Welzel, Corelight)\n\n  * WebSocket: Coverity std::move suggestion (Arne Welzel, Corelight)\n\n  * SMTP/BDAT: Fix SonarQube reported issues (Arne Welzel, Corelight)\n\n6.2.0-dev.456 | 2024-01-23 21:53:07 +0100\n\n  * btest/smtp/bdat: Move tests into proper directory (Arne Welzel, Corelight)\n\n  * BDAT: Harden parse_bdat_arg() (Arne Welzel, Corelight)\n\n    There implementation assumed that arg is null terminated. Due to\n    the ContentLineAnalyzer wrongly being in plain delivery mode, this\n    assumption was violated. It shouldn't happen anymore, but protect\n    from this anyhow.\n\n  * SMTP: Reset ContentLineAnalyzer plain delivery on EndData() (Arne Welzel, Corelight)\n\n    When resetting the BDAT state, we also need to switch the ContentLine\n    analyzer back into line mode, otherwise we're feeding plain delivery\n    data through ProcessLine(), possibly violating some assumptions about\n    null termination.\n\n    Do it for both ContentLineAnalyzers - only one of them will be in plain\n    delivery mode anyhow, but we don't keep state which one it was.\n\n  * SMTP: Add SMTP_IN_BDAT state (Arne Welzel, Corelight)\n\n    Initially this reused SMTP_IN_DATA, but separating into SMTP_IN_BDAT\n    to avoid spurious EndData() calls upon a server's reply. The client\n    should usually continue to send the full in-flight chunk still.\n\n6.2.0-dev.451 | 2024-01-23 12:40:53 -0700\n\n  * Remove setting non-existent session history for IPTunnel (Tim Wojtulewicz, Corelight)\n\n6.2.0-dev.449 | 2024-01-23 10:41:16 -0700\n\n  * Change to use ToStdStringView() in a few other BIFs (Tim Wojtulewicz, Corelight)\n\n  * Convert remove_prefix/suffix BIFs to use std::string_view (Tim Wojtulewicz, Corelight)\n\n  * Rework starts_with BIF similarly to ends_with changes in 1649e3e7cc61d77645ca99a6068124e6fc11df2f (Tim Wojtulewicz, Corelight)\n\n6.2.0-dev.445 | 2024-01-23 18:01:50 +0100\n\n  * websocket: Handle breaking from WebSocket::configure_analyzer() (Arne Welzel, Corelight)\n\n    ...and various nits from the review.\n\n  * websocket: Address review feedback for BinPac code (Arne Welzel, Corelight)\n\n    * Rename mask_ to masking_key_\n    * Fold FrameHeaderFixed into FrameHeader directly\n    * Drop WebSocket_FramePayloadUnmask type\n\n    Thanks a bunch @ckreibich!\n\n  * fuzzers: Add WebSocket fuzzer (Arne Welzel, Corelight)\n\n    It immediately found an issue with &transient, but fairly stable thereafter.\n\n    This is a separate fuzzer implementation as there's a custom Configure()\n    call for the analyzer as well as disabling all other analyzers so we\n    don't fuzz unrelated protocols.\n\n  * websocket: Fix crash for fragmented messages (Arne Welzel, Corelight)\n\n    The &transient attribute does not work well with $element as that won't\n    be available within &until anymore apparently.\n\n    Found after a few seconds building out the fuzzer.\n\n  * websocket: Verify Sec-WebSocket-Key/Accept headers and review feedback (Arne Welzel, Corelight)\n\n    Don't log them, they are random and arbitrary in the normal case. Users\n    can do the following to log them if wanted.\n\n        redef += WebSocket::Info$client_key += { &log };\n        redef += WebSocket::Info$server_accept += { &log };\n\n  * btest/websocket: Test for coalesced reply-ping (Arne Welzel, Corelight)\n\n    Add a constructed PCAP where the HTTP/websocket server send a WebSocket\n    ping message directly with the packet of the HTTP reply. Ensure this is\n    interpreted the same as if the WebSocket message is in a separate packet\n    following the HTTP reply.\n\n    For the server side this should work, for the client side we'd need to\n    synchronize suspend parsing the client side as we currently cannot quite\n    know whether it's a pipelined HTTP request following, or upgraded protocol\n    data and we don't have \"suspend parsing\" functionality here.\n\n  * HTTP/CONNECT: Also weird on extra data in reply (Arne Welzel, Corelight)\n\n  * HTTP/Upgrade: Weird when more data is available (Arne Welzel, Corelight)\n\n    After an HTTP upgrade to another protocol, create a weird if the packet\n    that contains the HTTP reply *also* contains some additional data\n    belonging to the upgraded to protocol already.\n\n  * ContentLine: Add GetDeliverStreamRemainingLength() accessor (Arne Welzel, Corelight)\n\n    Helper to get information from the ContentLine analyzer about\n    bytes still pending to be delivered. In certain cases this can\n    be a signal for weirdness.\n\n  * HTTP: Drain event queue after instantiating upgrade analyzer (Arne Welzel, Corelight)\n\n    With configurability through script-land comes the draw back\n    that we actually need to execute event handlers in the middle\n    of the parsing process: This might not be the best model, but\n    the script-side configurability it enables is kind of nice.\n\n    This explicit call only matters here when the HTTP reply is\n    directly followed by some WebSocket message data within the\n    same network packet, otherwise the queue is drained once the\n    packet has been completely processed anyhow.\n\n  * btest/http: Explain switching-protocols test change as comment (Arne Welzel, Corelight)\n\n    DPD enables HTTP based on the content of the WebSocket frames. However,\n    it's not HTTP, the protocol is x-kaazing-handshake and the server sends\n    some form of status/acknowledge to the client first, so the HTTP and the\n    HTTP analyzer receives that as the first bytes of the response and\n    bails, oh well.\n\n  * GH-3424: WebSocket: Introduce new analyzer and log (Arne Welzel, Corelight)\n\n    This adds a new WebSocket analyzer that is enabled with the HTTP upgrade\n    mechanism introduced previously. It is a first implementation in BinPac with\n    manual chunking of frame payload. Configuration of the analyzer is sketched\n    via the new websocket_handshake() event and a configuration BiF called\n    WebSocket::__configure_analyzer(). In short, script land collects WebSocket\n    related HTTP headers and can forward these to the analyzer to change its\n    parsing behavior at websocket_handshake() time. For now, however, there's\n    no actual logic that would change behavior based on agreed upon extensions\n    exchanged via HTTP headers (e.g. frame compression). WebSocket::Configure()\n    simply attaches a PIA_TCP analyzer to the WebSocket analyzer for dynamic\n    protocol detection (or a custom analyzer if set). The added pcaps show this\n    in action for tunneled ssh, http and https using wstunnel. One test pcap is\n    Broker's WebSocket traffic from our own test suite, the other is the\n    Jupyter websocket traffic from the ticket/discussion.\n\n    This commit further adds a basic websocket.log that aggregates the WebSocket\n    specific headers (Sec-WebSocket-*) headers into a single log.\n\n    Closes #3424\n\n  * HTTP: Add mechanism to instantiate Upgrade analyzer (Arne Welzel, Corelight)\n\n    When a HTTP upgrade request/reply is detected, lookup an analyzer tag\n    from HTTP::upgrade_analyzers, or if nothing is found, attach PIA_TCP.\n\n  * Update doc submodule [nomail] [skip ci] (zeek-bot)\n\n6.2.0-dev.430 | 2024-01-22 10:36:11 -0700\n\n  * Make BIFs just return ValPtr directly instead of BifReturnVal (Tim Wojtulewicz, Corelight)\n\n  * Drop support for subscribing to bro/ topics (Tim Wojtulewicz, Corelight)\n\n6.2.0-dev.426 | 2024-01-21 19:31:02 -0700\n\n  * MIME: Cap nested MIME analysis depth to 100 (Arne Welzel, Corelight)\n\n    OSS-Fuzz managed to produce a MIME multipart message construction with\n    thousands of nested entities (or that's what Zeek makes out of it anyhow).\n    Prevent such deep analysis by capping at a nesting depth of 100,\n    preventing unnecessary resource usage. A new weird named exceeded_mime_max_depth\n    is reported when this limit is reached.\n\n    This change reduces the runtime of the OSS-Fuzz reproducer from ~45 seconds\n    to ~2.5 seconds.\n\n    The test PCAP was produced from a Python script using the email package\n    and sending the rendered version via POST to a HTTP server.\n\n6.2.0-dev.423 | 2024-01-19 21:18:44 +0100\n\n  * SMTP/BDAT: Use strtoull and bail on UULONG_MAX values (Arne Welzel, Corelight)\n\n  * SMTP/BDAT: Fix int/int64_t/uint64_t confusion (Arne Welzel, Corelight)\n\n    The BDAT analyzer should be supporting uint64_t sized chunks reasonably well,\n    but the ContentLine analyzer does not, And also, I totally got types for\n    RemainingChunkSize() and in DeliverStream() wrong, resulting in overflows\n    and segfaults when very large chunk sizes were used.\n\n    Tickled by OSS-Fuzz. Actually running the fuzzer locally only took a\n    few minutes to find the crash, too. Embarrassing.\n\n  * SMTP: Reject BDAT chunks larger than int64_t's max value (Arne Welzel, Corelight)\n\n    The ContentLine analyzer does not support uint64_t.\n\n6.2.0-dev.419 | 2024-01-19 10:25:52 -0800\n\n  * Default to setting ZEEK_HAVE_JAVASCRIPT=no in CMakeLists.txt (Christian Kreibich, Corelight)\n  * Show --disable-javascript in `configure --help` (Christian Kreibich, Corelight)\n  * Show AF_PACKET support status in cmake output, and sort features (Christian Kreibich, Corelight)\n  * Add feature tests for AF_PACKET, GeoIP, and JavaScript to zeek-config (Christian Kreibich, Corelight)\n\n6.2.0-dev.414 | 2024-01-19 12:27:39 +0100\n\n  * GH-3177: Merge branch 'topic/bbannier/issue-3177' (Benjamin Bannier, Corelight)\n\n  * GH-3177: Make sure Spicy symbols are available. (Benjamin Bannier, Corelight)\n\n6.2.0-dev.412 | 2024-01-18 16:16:50 -0800\n\n  * Fix a zeek_init -> zeek_done confusion in a docstring (Christian Kreibich, Corelight)\n  * Fix typo in docstring (Christian Kreibich, Corelight)\n\n6.2.0-dev.408 | 2024-01-17 10:00:06 -0700\n\n  * Enable darwin builds for zeek-security repo (Tim Wojtulewicz, Corelight)\n\n6.2.0-dev.405 | 2024-01-16 12:07:11 -0700\n\n  * Squeeze a bit more performance out of the ends_with bif (Tim Wojtulewicz)\n\n6.2.0-dev.403 | 2024-01-16 18:03:54 +0100\n\n  * SMTP: No state update for bad BDAT commands (Arne Welzel, Corelight)\n\n    OSS-Fuzz found that providing an invalid BDAT line would tickle an\n    assert in UpdateState(). The BDAT state was never initialized, but\n    within UpdateState() that was expected.\n\n    This also removes the AnalyzerViolation() call for bad BDAT commands\n    and instead raises a weird. The SMTP analyzer is very lax and not triggering\n    the violation allows to parse the server's response to such an invalid\n    command.\n\n    PCAP files produced by a custom Python SMTP client against Postfix.\n\n  * SMTP/BDAT: Harden BDAT argument parsing a bit (Arne Welzel, Corelight)\n\n    If the size is followed by something and it's not \" LAST\", treat it\n    as an error.\n\n6.2.0-dev.400 | 2024-01-16 13:08:32 +0000\n\n  * Fix ssl-log-ext omitting data in some cases (Johanna Amann, Corelight)\n\n    ssl-log-ext had a bug that caused data present in the SSL connection to\n    not be logged in some cases. Specifically, the script relied on the base\n    ssl script to initialize some data structures; however, this means that\n    protocol messages that arrive before a message is handled by the base\n    ssl script are not logged.\n\n    This commit changes the ssl-log-ext script to also initialize the data\n    structures; now messages are correctly included in the log in all cases.\n\n6.2.0-dev.398 | 2024-01-15 15:18:32 +0100\n\n  * Session/Conn: Follow-up fix for hist_seen and history lift (Arne Welzel, Corelight)\n\n    Borked in commit b4e86f28b8adcbd45b9008dfa1818c6eb2fbb4d0.\n\n    We don't need to initialize std::string explicitly either.\n\n    Thanks coverity!\n\n6.2.0-dev.396 | 2024-01-15 15:17:45 +0100\n\n  * ZAM speedup for constructing empty vectors (Vern Paxson, Corelight)\n\n  * fixes for ZAM optimization of \"switch\" statements (Vern Paxson, Corelight)\n\n  * BTests to catch regressions for recent ZAM fixes (Vern Paxson, Corelight)\n\n  * \"-a zam\" BTest baseline update for recent changes (Vern Paxson, Corelight)\n\n  * fix for needing to always flush optimization information for identifiers (Vern Paxson, Corelight)\n\n  * fix for logic bug in ldap base script (Vern Paxson, Corelight)\n\n  * better name for key variable in script optimization (Vern Paxson, Corelight)\n\n  * ZAM fix for tracking variable usage (Vern Paxson, Corelight)\n\n  * ZAM fixes for \"for\" loops that are only used to choose an element from a table/set (Vern Paxson, Corelight)\n\n  * ZAM fixes for loops indexed with variables not used in the loop body (Vern Paxson, Corelight)\n\n  * fix for ZAM location tracking - more extensive changes are pending (Vern Paxson, Corelight)\n\n  * fixes for ZAM's special-casing of that \"cat\" BiF (Vern Paxson, Corelight)\n\n  * some fixes for ZAM memory management (Vern Paxson, Corelight)\n\n  * streamlining of some script optimization APIs (Vern Paxson, Corelight)\n\n  * fixes for initializations of \"-O gen-C++\" script compilations (Vern Paxson, Corelight)\n\n  * script optimization fixes for \"concretizing\" vector-of-any's (Vern Paxson, Corelight)\n\n6.2.0-dev.378 | 2024-01-12 10:48:33 +0100\n\n  * btest/smtp: Test with smtp-bdat-pipeline-8bitmime.pcap (Arne Welzel, Corelight)\n\n    Not sure about the origin of this pcap, so adding it in a separate\n    commit, but it seems a nice real-world test case.\n\n  * GH-3264: SMTP: Add BDAT support (Arne Welzel, Corelight)\n\n6.2.0-dev.375 | 2024-01-12 09:27:58 +0100\n\n  * Modernize various C++/Zeek-isms in the MMDB code. (Christian Kreibich, Corelight)\n\n  * Fix MMDB code to re-open explicitly opened DBs correctly (Christian Kreibich, Corelight)\n\n    The filename from which a DB first gets opened (either via an explicitly\n    specified filename, or via the path sequence now configurable at the script\n    layer) is now \"sticky\", meaning re-opening won't switch to a different file.\n\n    This was easiest by moving most state into the MMDB class itself. The previous\n    approach of tracking the two DB instances via a smart pointer and blowing the\n    pointed-to objects away as needed is now instead one of two objects fixed over\n    the lifetime of Zeek, able to open/close/reopen their underlying Maxmind DBs.\n\n    The MMDB class now only has one Lookup() method since there was no need to break\n    them apart -- it saves the return of a MMDB_lookup_result_s over the stack and\n    there's no need for throwing an exception.\n\n  * Add btest to verify behavior of re-opened MMDBs opened directly via BIFs (Christian Kreibich, Corelight)\n\n    The mmdb_open_location_db() and mmdb_open_asn_db() BiFs were untested, and Zeek\n    has a bug that makes any DBs opened that way fall back to looking up DBs via the\n    existing script-level config mechanism (via mmdb_dir), which is at least\n    unexpected and might well be unconfigured if somebody uses the direct BiFs.\n\n  * Simplify MMDB code by moving more lookup functionality into MMDB class (Christian Kreibich, Corelight)\n\n  * Move MMDB logic out of mmdb.bif and into MMDB.cc/h. (Christian Kreibich, Corelight)\n\n    This does not change the implementation except for some light renaming where\n    things are now naturally scoped within MMDB.cc.\n\n  * Fix mmdb.temporary-error testcase when MMDBs are installed on system (Christian Kreibich, Corelight)\n\n    The test would previously fail in settings where the user has Maxmind DBs\n    installed in the hardwired system locations, because the fallback logic still\n    picked those up.\n\n  * Adapt MMDB BiF code to new script-layer variables (Christian Kreibich, Corelight)\n\n  * Update btest baselines to reflect introduction of mmdb.bif (Christian Kreibich, Corelight)\n\n  * Move MaxMind/GeoIP BiF functionality into separate file (Christian Kreibich, Corelight)\n\n  * Provide script-level configurability of MaxMind DB placement on disk (Christian Kreibich, Corelight)\n\n    This lifts the list of fallback directories in which Zeek will look for Maxmind\n    DBs into the script layer, and makes the names of the DB files themselves\n    (previously hardwired) configurable as well.\n\n    This does not yet change the in-core code; that commit follows.\n\n  * Sort toplevel .bif list in CMakeLists (Christian Kreibich, Corelight)\n\n    Not important, but here it is safe to do so and the list is getting lengthy.\n\n6.2.0-dev.362 | 2024-01-11 20:17:45 +0100\n\n  * GH-3540: Known: Keep &create_expire on local tables/sets valid (Arne Welzel, Corelight)\n\n    After switching the known scripts away from broker stores, the\n    &create_expire value of the local tables/sets of the known scripts\n    wasn't in effect due to Cluster::node_up() and Cluster::node_down()\n    re-assigning these without keeping the &create_expire attribute\n    intact. This broke the \"log hosts every 24h\" behavior.\n\n6.2.0-dev.360 | 2024-01-11 12:36:11 +0100\n\n  * Document upcoming breaking change for OpaqueVal (Dominik Charousset, Corelight)\n\n  * Integrate review feedback (Dominik Charousset, Corelight)\n\n  * Fix formatting (Dominik Charousset, Corelight)\n\n  * Backward compatibility for OpaqueVal serialization (Dominik Charousset, Corelight)\n\n    External plugins depend on the API for `OpaqueVal`. This set of changes\n    brings back the previous signature for the `Serialize` and `Unserialize`\n    member functions. The new set of functions that operate on the recently\n    added `BrokerData` API were renamed accordingly and use a `Data` suffix to\n    distinguish between the old and new interface.\n\n    For the transition period, `OpaqueVal` now has two \"sets\" of\n    serialization functions: old and new (using the suffix). By default, the\n    new functions call the old API and then convert to the new types. Hence,\n    plugins that override the old set of member functions will continue to\n    work. New code should only override the new set of functions.\n\n    Since the macro `DECLARE_OPAQUE_VALUE` (a convenience macro for adding a\n    default set of member functions to a subtype of `OpaqueVal`) might be\n    used by 3rd parties, the macro has been \"restored\" to its previous\n    behavior, i.e., it will override the old set of member functions. The\n    new macro `DECLARE_OPAQUE_VALUE_V2` is similar but overrides the new set\n    of functions instead.\n\n    The class `BloomFilter` uses the same member function signatures as\n    `OpaqueVal` for serialization. Hence, the same old/new split was\n    implemented to keep the APIs consistent.\n\n6.2.0-dev.355 | 2024-01-11 10:59:05 +0100\n\n  * NEWS: Update news for tunnel depth changes (Arne Welzel, Corelight)\n\n  * tunnels: Add 'X' to history when reaching Tunnel::max_depth (Arne Welzel, Corelight)\n\n  * Session/TCP/UDP: Reserve HIST_UNKNOWN_PKT mask (Arne Welzel, Corelight)\n\n    This is meant to be used for a new 'X' code in the history in scenarios when\n    packets are knowingly not processed or an unexpected unknown situation\n    is recognized.\n\n    Usually, these situations are currently reported via weirds or analyzer violations,\n    but being able to include it in the history field allows them to be more visible.\n\n    Will be used for exceeding tunnel depths first.\n\n  * Conn: Deprecated AppendAddl (Arne Welzel, Corelight)\n\n  * Conn/Session: Lift history logic into Session (Arne Welzel, Corelight)\n\n    This should allow to mangle a Session's history also from packet\n    analyzers without necessarily knowing the concrete connection type.\n\n    Given Connection is a subclass of Session, I don't think this\n    changes much.\n\n  * GH-3439: init-bare: Default Tunnel::max_depth to 4 (Arne Welzel, Corelight)\n\n    In AWS GLB environments, the max_depth of 2 is easily reached due to packets\n    being encapsulated with GENEVE and VXLAN [1]. Any additional encapsulation\n    layer causes Zeek raise a weird and ignore the inner traffic. Bump the default\n    maximum depth to 4, while not common it's not unusual either to observe\n    this in the wild.\n\n    [1] https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-packet-formats.html\n\n6.2.0-dev.347 | 2024-01-10 12:32:43 -0700\n\n  * Use std::move in return values from bif methods to avoid copies (Tim Wojtulewicz, Corelight)\n\n  * Use bool return values instead of int in a couple zeek.bif static methods (Tim Wojtulewicz, Corelight)\n\n6.2.0-dev.344 | 2024-01-10 14:07:18 +0100\n\n  * quic: Handle and log unhandled_version (Arne Welzel, Corelight)\n\n  * quic: Support decryption of a few more versions (Arne Welzel, Corelight)\n\n  * parse: Support @if conditionals in record definitions (Arne Welzel, Corelight)\n\n6.2.0-dev.339 | 2024-01-09 09:15:39 +0100\n\n  * Dict: Invalidate iterators during Clear() (Arne Welzel, Corelight)\n\n    If we don't do this, a RobustDictIterator owned by someone else holds\n    dangling pointers to the Dictionary that is being cleared.\n\n    Closes #3523\n\n6.2.0-dev.337 | 2024-01-08 14:10:44 -0700\n\n  * Merge branch 'topic/timw/werror' (Tim Wojtulewicz, Corelight)\n\n    * topic/timw/werror:\n      CI: Remove unused openssl30_config\n      CPP-gen: Don't emit extra braces if only one element\n      Use <poll.h> instead of <sys/poll.h>\n      ZAM: Create ListValPtr directly instead of a stack object\n      Bump zeekjs to pick up dprintf warning fix\n      Avoid unused-result warning in Supervisor\n      Update src/3rdparty submodule to fix sprintf warning in modp\n      Fix warning with attribute string lookup\n      Set -Werror / /WX via target_compile_options to force warnings as errors\n\n  * CI: Remove unused openssl30_config (Tim Wojtulewicz, Corelight)\n\n  * CPP-gen: Don't emit extra braces if only one element (Tim Wojtulewicz, Corelight)\n\n  * Use <poll.h> instead of <sys/poll.h> (Tim Wojtulewicz, Corelight)\n\n  * ZAM: Create ListValPtr directly instead of a stack object (Tim Wojtulewicz, Corelight)\n\n  * Bump zeekjs to pick up dprintf warning fix (Tim Wojtulewicz, Corelight)\n\n  * Avoid unused-result warning in Supervisor (Tim Wojtulewicz, Corelight)\n\n  * Update src/3rdparty submodule to fix sprintf warning in modp (Tim Wojtulewicz, Corelight)\n\n  * Fix warning with attribute string lookup (Tim Wojtulewicz, Corelight)\n\n  * Set -Werror / /WX via target_compile_options to force warnings as errors (Tim Wojtulewicz, Corelight)\n\n6.2.0-dev.327 | 2024-01-08 10:04:49 -0700\n\n  * Update broker to pick up Windows 2-minute exception fix (Tim Wojtulewicz, Corelight)\n\n6.2.0-dev.322 | 2024-01-05 16:07:04 +0100\n\n  * ldap: Fix substring filter parsing and rendering (Arne Welzel, Corelight)\n\n    The initial (prefix) and final (suffix) strings are specified individually\n    with a variable number of \"any\" matches that can occur between these.\n    The previous implementation assumed a single string and rendered it\n    as *<string>*.\n\n    Reported and PCAP provided by @martinvanhensbergen, thanks!\n\n    Closes zeek/spicy-ldap#27\n\n6.2.0-dev.320 | 2024-01-05 14:43:59 +0100\n\n  * quic: tests: Require have-spicy (Arne Welzel, Corelight)\n\n  * quic: analyzer: Recognize and report unknown versions better (Arne Welzel, Corelight)\n\n    This makes the analyzer.log entry more informative by including the\n    actual version and also allows to handle this scenario in script land\n    if needed.\n\n  * quic: tests: Add QUIC v2 test cases (Arne Welzel, Corelight)\n\n    Produced using examples from the go-quic project, patching the clients\n    to force QUIC v2.\n\n  * quic: analyzer: Support QUIC v2 (Arne Welzel, Corelight)\n\n    QUIC v2 changed the version *and* the packet type enumeration to prevent\n    protocol ossification. Use an intermediary unit to handle the difference.\n\n  * quic: decrypt_crypto: Support QUIC v2 (Arne Welzel, Corelight)\n\n    Attempt to refactor in order to re-use common code between the two\n    versions.\n\n6.2.0-dev.314 | 2024-01-04 16:40:00 +0100\n\n  * Bump auxil/spicy to latest development snapshot (Benjamin Bannier, Corelight)\n\n    This bump mostly brings in small incremental performance improvements\n    for runtime throughput for Spicy-generated parsers. With a large\n    internal analyzer at Corelight these changes improve throughput by\n    around (3.8±1.2)%.\n\n6.2.0-dev.311 | 2024-01-03 12:29:23 +0100\n\n  * Update external baselines (Arne Welzel, Corelight)\n\n  * ldap: Use scalar values in logs where appropriate (Arne Welzel, Corelight)\n\n    Skimming through the RFC, the previous approach of having containers for most\n    fields seems unfounded for normal protocol operation. The new weirds could just\n    as well be considered protocol violations. Outside of duplicated or missed data\n    they just shouldn't happen for well-behaved client/server behavior.\n    Additionally, with non-conformant traffic it would be trivial to cause\n    unbounded state growth and immense log record sizes.\n\n    Unfortunately, things have become a bit clunky now.\n\n    Closes #3504\n\n  * ldap: Rename LDAP::search_result to LDAP::search_result_entry (Arne Welzel, Corelight)\n\n    To avoid confusion potential confusion between SearchResultEntry\n    and SearchResultDone.\n\n6.2.0-dev.307 | 2024-01-03 12:25:03 +0100\n\n  * segment_profiling: Remove SegmentProfiler and load_sample event (Arne Welzel, Corelight)\n\n    While it seems interesting functionality, this hasn't been documented,\n    maintained or knowingly leveraged for many years.\n\n    There are various other approaches today, too:\n\n    * We track the number of event handler invocations regardless of\n      profiling. It's possible to approximate a load_sample event by\n      comparing the result of two get_event_stats() calls. Or, visualize\n      the corresponding counters in a Prometheus setup to get an idea of\n      event/s broken down by event names.\n\n    * HookCallFunction() allows to intercept script execution, including\n      measuring the time execution takes.\n\n    * The global call_stack and g_frame_stack can be used from plugins\n      (and even external processes) to walk the Zeek script stack at certain\n      points to implement a sampling profiler.\n\n    * USDT probes or more plugin hooks will likely be preferred over Zeek\n      builtin functionality in the future.\n\n    Relates to #3458\n\n6.2.0-dev.305 | 2024-01-03 09:38:17 +0000\n\n  * Avoid extra copies in threading_field_to_data (Dominik Charousset)\n\n    Passing the `broker::data` paramter for `threading_field_to_data` by\n    value forces copies. However, the function only needs const access to\n    its parameter. Hence, taking the parameter as const-ref is the logical\n    choice and avoids unnecessary copies of individual data fields.\n\n6.2.0-dev.302 | 2024-01-02 11:13:17 -0700\n\n  * smb: Fix &read_expire not in effect due to &default=string_set() usage (Arne Welzel, Corelight)\n\n    The SMB::State$recent_files field is meant to have expiring entries.\n    However, due to usage of &default=string_set(), the &read_expire\n    attribute is not respected causing unbounded state growth. Replace\n    &default=string_set() with &default=set().\n\n    Thanks to ya-sato on Slack for reporting!\n\n    Related: zeek/zeek-docs#179, #3513.\n\n6.2.0-dev.300 | 2023-12-16 17:57:49 +0100\n\n  * TableType: Convert table_hash unique_ptr (Arne Welzel, Corelight)\n\n    Cannot remove the destructor as otherwise the compiler attempts to create\n    its implementation in Type.h where CompositeHash isn't a complete type\n    yet and std::unique_ptr's delete fails to be instantiated.\n\n  * streamlining of constructing script-level tables (Vern Paxson, Corelight)\n\n6.2.0-dev.297 | 2023-12-15 14:59:34 -0700\n\n  * Update broker submodule (Dominik Charousset, Corelight)\n\n6.2.0-dev.295 | 2023-12-15 13:10:27 -0700\n\n  * improve search-ability in  zeek.spicy (Smoot)\n\n6.2.0-dev.292 | 2023-12-15 18:58:00 +0100\n\n  * ci/btest: Remove ZEEK_PROFILER_FILE from btest.cfg, set in ci/test.sh explicitly (Arne Welzel, Corelight)\n\n    The produced coverage files are of little use in current local workflows\n    and usually just end-up taking up disk space. ZEEK_PROFILER_FILE can be\n    set explicitly if there's a one-off need to produce these locally, too.\n\n  * ci: Remove ZEEK_CI_DISABLE_SCRIPT_PROFILING logic (Arne Welzel, Corelight)\n\n    To my knowledge this doesn't make a huge difference anymore and locally\n    I'm only using ASAN builds. It's not actually too slow.\n\n6.2.0-dev.288 | 2023-12-14 20:03:07 -0800\n\n  * Bump binpac, zeek-archiver, and zeek-aux submodules. (Christian Kreibich, Corelight)\n\n6.2.0-dev.287 | 2023-12-14 19:55:28 -0800\n\n  * CI updates (Christian Kreibich, Corelight)\n\n    - Move Debian variations from 11 to 12\n    - Bump Ubuntu 23.04 to 23.10\n    - Drop openSUSE Leap 15.4, about to EOL.\n    - FreeBSD 14 is out now, 12 is about to EOL.\n    - distro EOL comment tweaks\n    - drop Fedora 37, add Fedora 39\n\n6.2.0-dev.279 | 2023-12-15 00:11:59 +0000\n\n  * Update doc submodule [nomail] [skip ci] (zeek-bot)\n\n6.2.0-dev.278 | 2023-12-14 10:28:27 +0100\n\n  * rule-parse: Remove [event_name] syntax, deprecate msg as identifier (Arne Welzel, Corelight)\n\n    As suggested by Robin. Thanks.\n\n  * Bump zeekctl submodule to pull in Python 3.12 ConfigParser fix. (Christian Kreibich, Corelight)\n\n6.2.0-dev.275 | 2023-12-12 09:52:00 +0100\n\n  * recent BTests that should be skipped when using -O gen-C++ (Vern Paxson, Corelight)\n\n  * expanded ZAM maintenance notes & support scripts (Vern Paxson, Corelight)\n\n  * script optimization tracking of functions called by event engine or indirectly (Vern Paxson, Corelight)\n\n  * memory-handling fixes for information associated with low-level ZAM instructions (Vern Paxson, Corelight)\n\n  * fix for -O C++ lambda functions reporting errors/warnings (Vern Paxson, Corelight)\n\n  * revert problems with profiling attributes introduced by recent script-opt PR (Vern Paxson, Corelight)\n\n  * script optimization fixes for pattern tables (Vern Paxson, Corelight)\n\n  * regularized (some) types of pointers used in script optimization (Vern Paxson, Corelight)\n\n  * splitting off script optimization CSE into its own source files (Vern Paxson, Corelight)\n\n  * some very minor tidying of script optimization code/documentation (Vern Paxson, Corelight)\n\n  * fix for Trigger's whose termination leads to deleting other Trigger's (Vern Paxson, Corelight)\n\n  * bug fix for delayed logging (Vern Paxson, Corelight)\n\n6.2.0-dev.262 | 2023-12-11 13:11:09 +0100\n\n  * Bump auxil/spicy to latest development snapshot (Benjamin Bannier, Corelight)\n\n6.2.0-dev.259 | 2023-12-08 11:54:03 -0700\n\n  * Audit creation of temporary strings in Spicy bindings (Benjamin Bannier, Corelight)\n\n  * Bump auxil/spicy to latest development snapshot (Benjamin Bannier, Corelight)\n\n6.2.0-dev.256 | 2023-12-08 10:01:10 -0700\n\n  * incorporate latest version of gen-zam to correctly generate indirect calls (Vern Paxson, Corelight)\n\n  * added sub-directory for tracking ZAM maintenance issues (Vern Paxson, Corelight)\n\n  * BTest to stress-test AST optimizer's assessment of side effects (Vern Paxson, Corelight)\n\n  * reworked AST optimizers analysis of side effects during aggregate operations & calls (Vern Paxson, Corelight)\n\n  * script optimization support for tracking information associated with BiFs/functions (Vern Paxson, Corelight)\n\n  * fix for AST analysis of inlined functions (Vern Paxson, Corelight)\n\n  * improved AST optimizer's analysis of variable usage in inlined functions (Vern Paxson, Corelight)\n\n  * new method for Stmt nodes to report whether they could execute a \"return\" (Vern Paxson, Corelight)\n\n  * bug fixes for indirect function calls when using ZAM (Vern Paxson, Corelight)\n\n  * minor fixes for script optimization, exporting of attr_name, script layout tweak (Vern Paxson, Corelight)\n\n6.2.0-dev.245 | 2023-12-06 18:42:25 +0100\n\n  * Bump cmake submodule (Arne Welzel, Corelight)\n\n  * iosource: Specify libkqueue dependency for subdir lib (Arne Welzel, Corelight)\n\n    Since a while my build has been spilling the following warnings:\n\n        [18/1687] Building C object auxil/c-ares/src/lib/CMakeFiles/c-ares.dir/ares__addrinfo2hostent.c.o\n        cc1: warning: zeek/prod-build/libkqueue-build/include: No such file or directory [-Wmissing-include-dirs]\n\n    My take is that FindKqueue extends the include directories globally and\n    tickles this warning because c-ares is built first. Grepping around,\n    <sys/event.h> is only included in iosource/Manager.cc, so we should\n    be able to reduce the exposure just to the iosource subdir.\n\n  * Update zeek-aux submodule (Arne Welzel, Corelight)\n\n6.2.0-dev.241 | 2023-12-06 11:41:29 +0100\n\n  * spicy/runtime-support: Use Vector::unsafeBegin() for args iteration (Arne Welzel, Corelight)\n\n  * Bump spicy submodule (Arne Welzel, Corelight)\n\n6.2.0-dev.238 | 2023-12-05 16:00:56 +0100\n\n  * SegmentProfiler: Do not initialize initial_rusage (Arne Welzel, Corelight)\n\n    We use the SegmentProfiler in quite a few hot places and the memset of\n    the rusage structure (144bytes here) can show up significantly even if\n    the segment profiler itself isn't used.\n\n    Relates to #3485.\n\n  * EventMgr: Remove queue_flare, use GetNextTimeout() instead (Arne Welzel, Corelight)\n\n    It can be visible overhead to call write() on the underlying pipe of the\n    EventMgr's flare whenever the first event is enqueued during an IO loop\n    iteration. Particularly in scenarios where there's about 1 event per packet\n    for long lived connections and script-side event processing is fast.\n\n    Given the event manager is drained anyhow at the end of the main loop, this\n    shouldn't be needed. In fact, the EventMgr.Process() method is basically\n    a stub. The one reason it is needed is when more events are enqueued during\n    a drain. That, however, can be dealt with by implementing GetNextTimeout()\n    to return 0.0 when there's more events queued. This way the main-loop's poll\n    timeout is 0.0 and it'll continue immediately.\n\n    This also allows to removes some extra code and drop the recently introduced\n    InitPostFork() addition: Without a pipe, there's no need to recreate it.\n\n  * UpdateConnVal: Avoid FieldOffset() calls (Arne Welzel, Corelight)\n\n    These can be significant if a lot of new connections and or events\n    are created for which an existing conn val needs updating and otherwise\n    things are very fast.\n\n  * RuleActionMIME: Switch to std::string (Arne Welzel, Corelight)\n\n    And return const std::string& from GetMIME(). Probably not at all performance\n    relevant, but while I'm already here.\n\n  * signatures: Support custom event via [event_name] syntax (Arne Welzel, Corelight)\n\n    This change allows to specify a per signature specific event, overriding\n    the default signature_match event. It further removes the message\n    parameter from such events if not provided in the signature.\n\n    This also tracks the message as StringValPtr directly to avoid\n    allocating the same StringVal for every DoAction() call.\n\n    Closes #3403\n\n  * zeek-setup: Exit when rule loading tickles reporter errors (Arne Welzel, Corelight)\n\n    With custom events for signatures, Reporter::error() may be invoked\n    while loading them. Early exit in case that happens. We could continue\n    and either disable the signatures or fallback to the default\n    signature_match() event, but not sure that would be obviously better.\n\n  * rule-scan: Copy yytext strings (Arne Welzel, Corelight)\n\n    When trying to use TOK_IDENT and TOK_STRING in a single rule, that\n    resulted in \"corrupt\" strings.\n\n    https://www.gnu.org/software/bison/manual/html_node/Strings-are-Destroyed.html\n\n6.2.0-dev.229 | 2023-12-04 12:32:17 -0800\n\n  * Add facade types to avoid using raw Broker types (Dominik Charousset, Corelight)\n\n6.2.0-dev.226 | 2023-12-04 18:57:29 +0100\n\n  * logging: Fix coverity std::move suggestions (Arne Welzel, Corelight)\n\n  * logging/Manager: Fix coverity null-deref (Arne Welzel, Corelight)\n\n    Prior code assumed non-null stream given the active_write_ctx matches,\n    but please coverity.\n\n  * Fix some compiler warnings in logging::Manager (Tim Wojtulewicz, Corelight)\n\n  * logging/Manager: Fix token_val->AsCount() in debug logging (Arne Welzel, Corelight)\n\n    Second UBSAN error triggered from log delay merge.\n\n  * logging/Manager: Fix AsTime() to AsInterval() (Arne Welzel, Corelight)\n\n    Found by UBSAN after merge of log delay branch.\n\n6.2.0-dev.218 | 2023-12-01 12:04:32 +0100\n\n  * logging: ref() to record_ref() renaming (Arne Welzel, Corelight)\n\n  * logging: Fix typos from review (Arne Welzel, Corelight)\n\n  * logging/Manager: Make LogDelayExpiredTimer an implementation detail (Arne Welzel, Corelight)\n\n    The only reason this was a private component of Manager was to access\n    the Stream's function. Use a generic callback and a lambda to avoid\n    that exposure.\n\n  * logging/WriteToFilters: Use range-based for loop (Arne Welzel, Corelight)\n\n  * testing/btest: Log::delay() from JavaScript (Arne Welzel, Corelight)\n\n  * NEWS: Entry for delayed log writes (Arne Welzel, Corelight)\n\n  * Bump doc submodule to branch (Arne Welzel, Corelight)\n\n  * logging: Do not keep delay state persistent (Arne Welzel, Corelight)\n\n    If Log::remove_stream() and Log::create_stream() is called for a stream,\n    do not restore the previously used max delay or max queue size.\n\n  * logging: delay documentation polishing (Arne Welzel, Corelight)\n\n    Based on PR feedback.\n\n  * logging: Better error messages for invalid Log::delay() calls (Arne Welzel, Corelight)\n\n    Add a test for Log::delay() usage within filter policy hooks, too.\n\n  * logging/Manager: Implement DelayTokenType as an actual opaque (Arne Welzel, Corelight)\n\n    With a bit of tweaking in the JavaScript plugin to support opaque types, this\n    will allow the delay functionality to work there, too.\n\n    Making the LogDelayToken an actual opaque seems reasonable, too. It's not\n    supposed to be user inspected.\n\n  * logging: Implement get_delay_queue_size() (Arne Welzel, Corelight)\n\n    Primarily for introspection given that re-delaying may exceed\n    queue sizes.\n\n  * logging: Introduce Log::delay() and Log::delay_finish() (Arne Welzel, Corelight)\n\n    This is a verbose, opinionated and fairly restrictive version of the log delay idea.\n    Main drivers are explicitly, foot-gun-avoidance and implementation simplicity.\n\n    Calling the new Log::delay() function is only allowed within the execution\n    of a Log::log_stream_policy() hook for the currently active log write.\n\n    Conceptually, the delay is placed between the execution of the global stream\n    policy hook and the individual filter policy hooks. A post delay callback\n    can be registered with every Log::delay() invocation. Post delay callbacks\n    can (1) modify a log record as they see fit, (2) veto the forwarding of the\n    log record to the log filters and (3) extend the delay duration by calling\n    Log::delay() again. The last point allows to delay a record by an indefinite\n    amount of time, rather than a fixed maximum amount. This should be rare and\n    is therefore explicit.\n\n    Log::delay() increases an internal reference count and returns an opaque\n    token value to be passed to Log::delay_finish() to release a delay reference.\n    Once all references are released, the record is forwarded to all filters\n    attached to a stream when the delay completes.\n\n    This functionality separates Log::log_stream_policy() and individual filter\n    policy hooks. One consequence is that a common use-case of filter policy hooks,\n    removing unproductive log records, may run after a record was delayed. Users\n    can lift their filtering logic to the stream level (or replicate the condition\n    before the delay decision). The main motivation here is that deciding on a\n    stream-level delay in per-filter hooks is too late. Attaching multiple filters\n    to a stream can additionally result in hard to understand behavior.\n\n    On the flip side, filter policy hooks are guaranteed to run after the delay\n    and can be used for further mangling or filtering of a delayed record.\n\n  * logging/Manager: zeek::detail'ify (Arne Welzel, Corelight)\n\n    Introducing zeek::logging::detail requires detail:: references to be\n    qualified as preparation.\n\n  * logging/Manager: Split Write() (Arne Welzel, Corelight)\n\n    If we delay in the stream policy hook, we'll need to resume writing\n    to the attached filters later on. Prepare for that by splitting out\n    the filter processing.\n\n  * Timer: Add LOG_DELAY_EXPIRE timer type (Arne Welzel, Corelight)\n\n  * Ascii: Remove extra include (Arne Welzel, Corelight)\n\n    Should not be needed, not sure what I was thinking.\n\n6.2.0-dev.200 | 2023-11-30 10:16:13 +0100\n\n  * GH-3473: OpaqueVal: Register TelemetryVals, too (Arne Welzel, Corelight)\n\n    Even if they are not serializable, OpaqueMgr::TypeID() is called\n    during BuildJSON() for them and that previously just aborted.\n\n6.2.0-dev.198 | 2023-11-29 11:51:56 +0100\n\n  * Update zeekjs submodule (Arne Welzel, Corelight)\n\n    Contains the following fixes:\n\n        2da4abe Types: Add support for opaque types\n        1f1093f Types: Cast internal field to v8::Value\n        67e225c Plugin: Avoid creating Exprs at runtime\n\n6.2.0-dev.196 | 2023-11-28 13:40:54 -0700\n\n  * Add some uses of std::move in constructors and simple functions for pass-by-value arguments (Tim Wojtulewicz, Corelight)\n\n  * Avoid creating a few temporary values to avoid copy operations (Tim Wojtulewicz, Corelight)\n\n  * Change function return types to more concise types where possible (Tim Wojtulewicz, Corelight)\n\n    This helps avoid needing to call std::move on return values when we know the\n    type of value is fixed.\n\n6.2.0-dev.192 | 2023-11-28 15:11:42 +0000\n\n  * TLS: Update cipher consts and keyexchange parsing (Johanna Amann, Corelight)\n\n    Update cipher consts.\n\n    Furthermore some past updates have been applied to scriptland, but it\n    was not considered that some of these also have to be applied to binpac\n    code, to be able to correcly parse the ServerKeyExchange message.\n\n6.2.0-dev.189 | 2023-11-27 21:35:26 +0100\n\n  * OCSP: Open-code unknown revoke reason strings (Arne Welzel, Corelight)\n\n    OpenSSL 3.2.0 knows about more reasons. Add some backwards compatibility.\n\n    Reference: https://github.com/openssl/openssl/commit/1c8a7f5091e2c5aebc043be86bcbedc6947e1c6f\n\n6.2.0-dev.187 | 2023-11-23 17:19:51 +0000\n\n  * Spicy: allow providing file id in zeek::file_begin (Johanna Amann, Corelight)\n\n    Allow spicy parsers to generate their own file IDs and provide them to\n    Zeek. This duplicates functionality that is currently possible (and\n    used) by some binpac-based analyzers. One example for an analyzer\n    creating its own file IDs is the SSL analyzer.\n\n  * Bump cmake submodule for INCLUDE_DIRS fix (Arne Welzel, Corelight)\n\n6.2.0-dev.180 | 2023-11-22 10:34:18 +0100\n\n  * Integrate review feedback (Dominik Charousset, Corelight)\n\n  * Avoid OpenSSL header dependencies (Dominik Charousset, Corelight)\n\n6.2.0-dev.176 | 2023-11-21 14:31:12 +0100\n\n  * Add jq to final.Dockerfile (Matti Bispham, Corelight)\n\n6.2.0-dev.174 | 2023-11-21 12:00:20 +0100\n\n  * TableVal: Replace raw subnets/pattern_matcher with unique_ptr (Arne Welzel, Corelight)\n\n  * TablePatternMatcher: Drop Insert()/Remove(), use Clear() (Arne Welzel, Corelight)\n\n    Also move Clear() when assigning into more generic Assign() function.\n\n  * TableType: Simplify and inline Is...Index tests (Arne Welzel, Corelight)\n\n  * NEWS: Add small table[pattern] section (Arne Welzel, Corelight)\n\n  * Expr/Val: Add support for in set[pattern] (Arne Welzel, Corelight)\n\n  * zeek.bif: Implement table_pattern_matcher_stats() bif for introspection (Arne Welzel, Corelight)\n\n    Provide a script accessible way to introspect the DFA stats that can be\n    leveraged to gather runtime statistics of the underlying DFA. This\n    re-uses the existing MatcherStats used by ``get_matcher_stats()``.\n\n  * DFA: Extract inner Stats struct from DFA_State_Cache (Arne Welzel, Corelight)\n\n    This makes it possible to forward declare the class in Val.h which\n    otherwise seems difficult.\n\n  * Expr: Implement string in table[pattern] of X (Arne Welzel, Corelight)\n\n    Not sure how useful this is (and the implementation isn't optimized in\n    any way), but seems reasonable for consistency.\n\n    Vern suggested that set[pattern] can already be achieved via\n    set_to_regex(), so left out any set[pattern] variants.\n\n  * RE: Remove RE_DisjunctiveMatcher and re-use MatchAll() (Arne Welzel, Corelight)\n\n    Seems we can just open code the CompileSet() usage in the TablePatternMatcher\n    helper without indirecting through another class. Further, add the collection\n    of indices into MatchAll() rather than duplicating its code in\n    MatchDisjunction(). Doesn't seem like MatchAll() is used widely.\n\n  * TablePatternMatcher: Use const StringValPtr& instead of const StringVal* (Arne Welzel, Corelight)\n\n  * Val: Move TablePatternMatcher into detail namespace (Arne Welzel, Corelight)\n\n    There's anyway only prototype in the headers, so detail seems better\n    than the public zeek namespace.\n\n  * TablePatternMatcher: Use unique_ptr (Arne Welzel, Corelight)\n\n  * IndexType: Add IsPatternIndex(), like IsSubNetIndex() (Arne Welzel, Corelight)\n\n  * btest: Add test for pattern tables and when (Arne Welzel, Corelight)\n\n  * Reuse CompileSet() instead of || string formatting (Arne Welzel, Corelight)\n\n  * script optimization support for using strings to index table[pattern] values (Vern Paxson, Corelight)\n\n  * BTests for indexing \"table[pattern] of T\" with strings (Vern Paxson, Corelight)\n\n  * support for indexing \"table[pattern] of T\" with strings to get multi-matches (Vern Paxson, Corelight)\n\n6.2.0-dev.155 | 2023-11-21 10:08:14 +0100\n\n  * GH-3453: DNS: Add Ed25519 and Ed448 enum values to parser (Arne Welzel, Corelight)\n\n    We already had these declared in dns/const.zeek, so extend the parser\n    as well to avoid raising weirds and add some test pcaps:\n\n       $ dig @8.8.8.8 DNSKEY ed448.no\n       $ dig @8.8.8.8 ed448.no +dnssec\n\n    And the same for the ed25519.no domain.\n\n  * RE_Match_State: Do not reset current_pos for every Match() call (Arne Welzel, Corelight)\n\n    This seems like a bug: If one feeds one byte at a time, current_pos\n    is being reset for every byte, possibly reporting the wrong offsets\n    in the accepted_matches map.\n\n  * frameworks/software: Fix stale value used for stripping (Arne Welzel, Corelight)\n\n    There was some confusion around which value was used subsequent to a strip(),\n    but sub not respecting anchors make it appear to work. Also seems that the\n    `\\(?` part seems redundant.\n\n  * GH-3455: strings.bif/sub,gsub: Respect anchors in pattern (Arne Welzel, Corelight)\n\n    Anchors within pattern passed to sub() or gsub() were previously ignored,\n    replacing any occurrence of '<text>' even when '^<text>' was used as a\n    pattern.\n\n    This is a pretty user-visible change (and we even have anchored patterns\n    within the base scripts), but seems \"the right thing to do\".\n\n    Relates to #3455\n\n6.2.0-dev.147 | 2023-11-17 18:00:32 +0100\n\n  * BTest updates to accommodate event handler coalescence differences (Vern Paxson, Corelight)\n\n  * BTests for testing that event handler coalescence operates as expected (Vern Paxson, Corelight)\n\n  * coalescing of event handlers (ZAM optimization) (Vern Paxson, Corelight)\n\n6.2.0-dev.143 | 2023-11-17 09:24:36 -0700\n\n  * CI: Install missing packages on opensuse (Tim Wojtulewicz, Corelight)\n\n6.2.0-dev.141 | 2023-11-17 13:01:19 +0100\n\n  * GH-3455: strings.bif/do_split_string: Pass bol and eol to MatchPrefix() (Arne Welzel, Corelight)\n\n    This allows better control of BOL and EOL. MatchPrefix() / LongestMatch()\n    always start with BOL.\n\n  * RE_Matcher: Add MatchPrefix with bol/eol control (Arne Welzel, Corelight)\n\n6.2.0-dev.137 | 2023-11-11 17:45:51 +0100\n\n  * Bind scan_path to the scope; avoid heap allocation (Dominik Charousset, Corelight)\n\n6.2.0-dev.134 | 2023-11-10 12:42:57 +0100\n\n  * retention of superseded AST elements to prevent pointer mis-aliasing (Vern Paxson, Corelight)\n\n  * BTest updates for latest ZAM maintenance (Vern Paxson, Corelight)\n\n  * greater ZAM optimization of inlined function calls (Vern Paxson, Corelight)\n\n  * some minor ZAM optimization improvements (Vern Paxson, Corelight)\n\n  * added \"-O noinline\" option to turn off ZAM inlining, to help with diagnosing optimization problems (Vern Paxson, Corelight)\n\n  * fixes for a number of ZAM optimization bugs (Vern Paxson, Corelight)\n\n  * allow explicitly marking an identifier as equivalent to special '_' identifier (Vern Paxson, Corelight)\n\n  * fixed some warnings about mixing signed & unsigned integers (Vern Paxson, Corelight)\n\n  * descriptions of \"for\" statements now include their \"value variable\" if present (Vern Paxson, Corelight)\n\n6.2.0-dev.123 | 2023-11-09 17:22:29 +0100\n\n  * GH-3443: Spicy: Provide `zeek::skip_input()` to disable deliver to\n    current analyzer. (Robin Sommer, Corelight)\n\n6.2.0-dev.121 | 2023-11-09 10:42:16 +0100\n\n  * btest/opt: Update pure-inlining baseline (Arne Welzel, Corelight)\n\n    I suspect this as just stale due to not being executed regularly.\n\n  * btest/opt: Update basic baseline (Arne Welzel, Corelight)\n\n  * Expr: Fix alloc-dealloc-mismatch (Arne Welzel, Corelight)\n\n    I *thought* Vern had fixed this up, but maybe that was another\n    occurrence.\n\n  * btest: Move zam/basic.test into opt/basic.test, update TestDirs (Arne Welzel, Corelight)\n\n    It seems \"opt\" can and should run unconditionally. The \"misc\" dir was\n    definitely an oversight.\n\n  * Add deprecations to NEWS [nomail] [skipci] (Arne Welzel, Corelight)\n\n6.2.0-dev.114 | 2023-11-07 19:27:58 +0100\n\n  * Bump zeekctl (Arne Welzel, Corelight)\n\n  * GH-3187: EventHandler: Deprecate SetUsed() and Used() as well. (Arne Welzel, Corelight)\n\n    Seems the latter isn't used outside of the functions that were deprecated\n    in the previous commit and with UsageAnalyzer not making use of this\n    information unclear why we should keep it around.\n\n    Relates to #3187.\n\n  * GH-3187: EventRegistry: Deprecate UsedHandlers() and UnusedHandlers() (Arne Welzel, Corelight)\n\n    and check_for_unused_event_handlers: UsageAnalyzer is more thorough\n    and the previous ones weren't extended to work with &is_used and\n    should probably be considered superseded by the UsageAnalyzer even\n    if that currently does not provide a public API and just prints\n    out deprecation warnings.\n\n    I'm also tempted to deprecate SetUsed() and Used() of EventHandler\n    for the same reason.\n\n    Closes #3187.\n\n  * time machine: Mark leftovers for removal in v7.1 (Arne Welzel, Corelight)\n\n    I suspect we could just drop these directly, but lets follow the\n    deprecation cycle.\n\n  * policy/misc/load-balancing: Deprecate script (Arne Welzel, Corelight)\n\n  * GH-2877: cluster: Deprecate the Cluster::Node$interface field (Arne Welzel, Corelight)\n\n    This field isn't required by a worker and it's certainly not used by a\n    worker to listen on that specific interface. It also isn't required to\n    be set consistently and its use in-tree limited to the old load-balancing\n    script.\n\n    There's a bif called packet_source() which on a worker will provide\n    information about the actually used packet source.\n\n    Relates to zeek/zeek#2877.\n\n6.2.0-dev.107 | 2023-11-07 10:03:24 +0100\n\n  * Update binpac and bifcl submodules [nomail] (Tim Wojtulewicz, Corelight)\n\n  * CI: Use other base64 options on macOS Sonoma too (Tim Wojtulewicz, Corelight)\n\n  * CI: Add macOS Sonoma build, remove macOS Monterey build (Tim Wojtulewicz, Corelight)\n\n6.2.0-dev.102 | 2023-11-07 09:58:25 +0100\n\n  * Merge branch 'topic/xb-anssi/http_signature_body_end_match' of https://github.com/xb-anssi/zeek (Arne Welzel, Corelight)\n\n    * 'topic/xb-anssi/http_signature_body_end_match' of https://github.com/xb-anssi/zeek:\n      Let signature framework match HTTP body end\n      Test how the signature framework matches HTTP body\n\n  * Let signature framework match HTTP body end (xb-anssi)\n\n    The HTTP analyzer never tells the signature framework when the body of a\n    request or a response ends, so any signature regex ending in a '$' used\n    in an 'http-request-body' or in an 'http-reply-body' condition will\n    never match.\n\n    This made it impossible to write a signature which could distinguish an\n    HTTP body consisting only of something from an HTTP body prefixed by\n    that same something.\n\n    - Fix:\n\n    The fix notifies the signature framework on EndOfData() that there will\n    be no further data to match for this body by giving it an empty buffer\n    of length 0 with the eol parameter set to true and all others set to\n    false. This lets it reach the '$' state in its DFA, and doesn't affect\n    other documented HTTP match behaviours.\n\n    - Limitation:\n\n    Since the signature framework doesn't appear to keep previously consumed\n    data on hand, any match of an http-*-body condition whose patterns ends\n    with a '$' will lead to an empty data parameter being passed to the\n    signature_match() event because the body data is no longer available\n    when EndOfData() happens.\n\n    Due to segmentation there is anyway no guarantee the data parameter\n    would have held the entire match even without the '$', since the data\n    parameter only receives the last chunk of data which completed the match\n    condition, as can be seen on prefix matches in the btest cases where the\n    matching data spans multiple segments (the event gives 'B' and not\n    'AB'), so this is only an extreme case of partial data being given to\n    that event.\n\n  * Test how the signature framework matches HTTP body (xb-anssi)\n\n    This adds a signatures/http-body-match btest to verify how the signature\n    framework matches HTTP body in requests and responses.\n\n    It currently fails because the 'http-request-body' and 'http-reply-body'\n    clauses never match anything when there is a '$' in their regular\n    expressions.\n\n    The other pattern clauses such as the 'payload' clause do not suffer\n    from that restriction and it is not documented as a limitation of HTTP\n    body pattern clauses either, so it is probably a bug.\n\n    The \"http-body-match\" btest shows that without a fix any signatures\n    which ends with a '$' in a http-request-body or http-reply-body rule\n    will never raise a signature_match() event, and that signatures which do\n    not end with a '$' cannot distinguish an HTTP body prefixed by the\n    matching pattern (ex: ABCD) from an HTTP body consisting entirely of the\n    matching pattern (ex: AB).\n\n    Test cases by source port:\n    - 13579:\n      - GET without body, plain res body (CD, only)\n    - 13578:\n      - GET without body, plain res body (CDEF, prefix)\n    - 24680:\n      - POST plain req body (AB, only), plain res body (CD, only)\n    - 24681:\n      - POST plain req body (ABCD, prefix), plain res body (CDEF, prefix)\n    - 24682:\n      - POST gzipped req body (AB, only), gzipped res body (CD, only)\n      - POST plain req body (CD, only), plain res body (EF, only)\n    - 33210:\n      - POST multipart plain req body (AB;CD;EF, prefix)\n      - plain res body (CD, only)\n    - 33211:\n      - POST multipart plain req body (ABCD;EF, prefix)\n      - plain res body (CDEF, prefix)\n    - 34527:\n      - POST chunked gzipped req body (AB, only)\n      - chunked gzipped res body (CD, only)\n    - 34528:\n      - POST chunked gzipped req body (ABCD, prefix)\n      - chunked gzipped res body (CDEF, prefix)\n\n    The tests with source ports 24680, 24682 and 34527 should\n    match the signature http_request_body_AB_only and the signature\n    http_request_body_AB_prefix, but they only match the latter.\n\n    The tests with source ports 13579, 24680, 24682, 33210 and 34527 should\n    match the signature http_response_body_CD_only and the signature\n    http_response_body_CD_prefix, but they only match the latter.\n\n    The tests with source ports 24680, 24681, 33210 and 33211 show how the\n    http_request_body_AB_then_CD signature with two http-request-body\n    conditions match either on one or multiple requests (documented\n    behaviour).\n\n    The test cases with other source ports show where the\n    http_request_body_AB_only and http_response_body_CD_only signatures\n    should not match because their bodies include more than the searched\n    patterns.\n\n6.2.0-dev.99 | 2023-11-07 09:56:55 +0100\n\n  * Fix unsafe and inefficient uses of copy_string (Dominik Charousset, Corelight)\n\n    Add a new overload to `copy_string` that takes the input characters plus\n    size. The new overload avoids inefficient scanning of the input for the\n    null terminator in cases where we know the size beforehand. Furthermore,\n    this overload *must* be used when dealing with input character sequences\n    that may have no null terminator, e.g., when the input is from a\n    `std::string_view` object.\n\n6.2.0-dev.97 | 2023-11-06 09:29:49 -0700\n\n  * Update c-ares in Windows conanfile (Tim Wojtulewicz, Corelight)\n\n  * Upgrade c-ares submodule to 1.21.0 (Tim Wojtulewicz, Corelight)\n\n6.2.0-dev.93 | 2023-11-01 12:04:16 +0100\n\n  * build_inner_connection: Use the outer packet's timestamp (Arne Welzel, Corelight)\n\n    Don't construct the timeval based on run_state, just use the timestamp\n    of the outer packet to avoid the extra int/double conversions required.\n\n  * build_inner_connection: Avoid one extra Init() (Arne Welzel, Corelight)\n\n    Packet::Init() is not so cheap as one might think: It computes a\n    timestamp from { 0, 0 } using double division. Just avoid this\n    by not initializing an empty Packet.\n\n  * packet_analysis: Do not run DetectProtocol() on disabled analyzers (Arne Welzel, Corelight)\n\n    This came up when disabling the TEREDO analyzer but still seeing its\n    DetectProtocol() method prominently in flame graphs.\n\n  * packet_analysis/Dispatcher: Do not index table twice (Arne Welzel, Corelight)\n\n    It's okay to return the nullptr that's in the table, no need to check\n    for != nullptr before dereferencing again.\n\n  * GH-3379: packet_analysis: Avoid shared_ptr copying for analyzer lookups (Arne Welzel, Corelight)\n\n    For deeply encapsulated connections (think AWS traffic mirroring format\n    like IP,UDP,GENEVE,IP,UDP,VXLAN,ETH,IP,TCP), the Dispatcher::Lookup()\n    method is fairly visible in profiles when running in bare mode.\n\n    This changes the Analyzer::Lookup() and Dispatcher::Lookup() return value\n    breaking the API in favor of the performance improvement.\n\n    Relates to zeek/zeek#3379.\n\n6.2.0-dev.86 | 2023-10-31 16:17:33 +0000\n\n  * SSL: Add new extension types and ECH test (Johanna Amann, Corelight)\n\n    This commit adds a multitude of new extension types that were added in\n    the last few years; it also adds grease values to extensions, curves,\n    and ciphersuites.\n\n    Furthermore, it adds a test that contains a encrypted-client-hello\n    key-exchange (which uses several extension types that we do not have in\n    our baseline so far).\n\n6.2.0-dev.83 | 2023-10-30 12:34:26 -0700\n\n  * Format JSON with clang-format (Benjamin Bannier, Corelight)\n\n    We do not activate support for JavaScript at this time since most of our\n    JavaScript code is in BTest files to test zeekjs, but these files also\n    contain other languages which leads to largely misformated files.\n\n  * Reformat Zeek in Spicy style (Benjamin Bannier, Corelight)\n\n    This largely copies over Spicy's `.clang-format` configuration file. The\n    one place where we deviate is header include order since Zeek depends on\n    headers being included in a certain order.\n\n6.2.0-dev.78 | 2023-10-30 11:47:23 +0100\n\n  * GH-3421: Normalize version strings in test (Benjamin Bannier, Corelight)\n\n6.2.0-dev.74 | 2023-10-27 11:04:16 -0700\n\n  * IEEE802_11: Fix buffer-overflow due to not accounting for the amsdu header (Arne Welzel, Corelight)\n\n    The fuzzer generated input where data length left was 14 and the amsdu_len\n    field set to 14. That caused buffer overread due not taking into account\n    the amsdu header length of 14.\n\n  * ssl: Prevent unbounded ssl_history growth (Arne Welzel, Corelight)\n\n    The ssl_history field may grow unbounded (e.g., ssl_alert event). Prevent this\n    by capping using a configurable limit (default 100) and raise a weird once reached.\n\n  * ssl: Cap number of alerts parsed from SSL record (Arne Welzel, Corelight)\n\n    Limit the number of events raised from an SSL record with content_type\n    alert (21) to a configurable maximum number (default 10). For TLS 1.3,\n    the limit is set to 1 as specified in the RFC. Add a new weird cases\n    where the limit is exceeded.\n\n    OSS-Fuzz managed to generate a reproducer that raised ~660k ssl_plaintext\n    and ssl_alert events given ~810kb of input data. This change prevents this\n    with hopefully no negative side-effect in the real-world.\n\n  * ftp: Do not base seq on number of pending commands (Arne Welzel, Corelight)\n\n    Previously, seq was computed as the result of |pending_commands|+1. This\n    opened the possibility to override queued commands, as well as logging\n    the same pending ftp reply multiple times.\n\n    For example, when commands 1, 2, 3 are pending, command 1 may be dequeued,\n    but the incoming command then receives seq 3 and overrides the already\n    pending command 3. The second scenario happens when ftp_reply() selected\n    command 3 as pending for logging, but is then followed by many ftp_request()\n    events. This resulted in command 3's response being logged for every\n    following ftp_request() over and over again.\n\n    Avoid both scenarios by tracking the command sequence as an absolute counter.\n\n  * X509Common/SCT parsing: Fix memory leak in error case (Arne Welzel, Corelight)\n\n    Failed to free the copy of the OCSP extension's value the inner\n    octet string couldn't be parsed.\n\n6.2.0-dev.64 | 2023-10-27 19:19:55 +0200\n\n  * fuzzers: Add DTLS fuzzer (Arne Welzel, Corelight)\n\n    Not sure it adds a lot over the SSL analyzer as they share code, but it\n    provides a distinct entry point at least.\n\n  * GH-3398: generic-analyzer-fuzzer: Support NextPacket() fuzzing (Arne Welzel, Corelight)\n\n    A number of analyzers that we've been fuzzing with the generic-analyzer-fuzzer\n    setup do not implement DeliverStream() and instead only work with DeliverPacket()\n    (ntp, syslog, sip, radius, ...). Calling DeliverStream() on those is\n    pretty much a noop and fuzzing not effective.\n\n    This change adds support to fuzz DeliverPacket(). Whether to use packet\n    or stream fuzzing is configured through a define via CMake.\n\n    This is still a bit limited in that for analyzers that support both,\n    DeliverPacket() and DeliverStream(), only one code path is fuzzed.\n\n  * Require `truncate` for a test using it (Benjamin Bannier, Corelight)\n\n    It looks like older versions of macOS like Monterey do not ship with\n    `truncate`. Make a recently added test require it to suppress spurious\n    failures.\n\n  * Bump outdated baseline (Benjamin Bannier, Corelight)\n\n    This fixes an outdated baseline added with\n    caaffd0324ac0557ba4c5ce0290d07a4d013a735.\n\n  * Bump auxil/spicy to latest release (Benjamin Bannier, Corelight)\n\n6.2.0-dev.56 | 2023-10-26 15:34:17 +0200\n\n  * Fix tests so they work both with GNU and BSD tools (Benjamin Bannier, Corelight)\n\n    The GNU and BSD versions of `touch` and `truncate` allow slightly\n    different arguments, change the tests so they work in both versions.\n\n  * Install libmaxminddb in macOS CI (Benjamin Bannier, Corelight)\n\n6.2.0-dev.53 | 2023-10-25 17:01:57 +0200\n\n  * fuzzer-setup: Allow customization without recompiling (Arne Welzel, Corelight)\n\n    This change allows to invoke a reproducer with different script options\n    and extra scripts to ease debugging and investigation. For example, enabling\n    the DPD debug stream and adding misc/dump-events can be done as follows after\n    this change:\n\n        ZEEK_DEBUG_LOG_STDERR=1 ../../build/src/fuzzers/zeek-pop3-fuzzer <test-case> -- -B dpd misc/dump-events\n\n  * subdir-btest: Allow setting build_dir (Arne Welzel, Corelight)\n\n    We have that functionality in btest.cfg and it's actually nice to use\n    it for toggling between a debug/asan and release build.\n\n6.2.0-dev.49 | 2023-10-25 12:55:41 +0200\n\n  * GH-3043: Supervisor: Handle EAGAIN error on stem pipe (Arne Welzel, Corelight)\n\n    util::safe_write() calls abort() in case of EAGAIN errors. This is\n    easily observed when starting clusters with 32 workers or more.\n\n    Add a custom write_message() function handling EAGAIN by retrying\n    after a small sleep. It's not clear a more complicated poll() would be\n    much better: The pipe might be ready for writing, but then our message\n    might not actually fit in, resulting in another EAGAIN error. And even\n    poll() would introduce blocking/sleeping code.\n\n    Take some precautions against the stem and the supervisor dead-locking\n    when both pipes are full by draining the other end on EAGAIN errors.\n\n6.2.0-dev.47 | 2023-10-25 09:15:20 +0200\n\n  * CI: Pass -A flag to btest for cluster-testing builds (Tim Wojtulewicz, Corelight)\n\n6.2.0-dev.44 | 2023-10-24 13:05:55 -0700\n\n  * Update CMake submodule for caching fix (Dominik Charousset, Corelight)\n\n6.2.0-dev.41 | 2023-10-24 19:35:20 +0200\n\n  * GH-3190: event: Reinitialize EventMgr's flare after fork() from stem (Arne Welzel, Corelight)\n\n    Because EventMgr is defined globally as an object (rather than a global\n    pointer to an EventMgr object), its pipe is created even before main()\n    is entered. This further means that in the fork-based supervisor setup,\n    all Zeek processes created from the top-level supervisor process share\n    the same pipe object for the EventMgr. In turn, whenever any of the\n    processes enqueued an event, the flare was fired and ready for reading\n    on all other processes in the cluster, causing much contention and\n    unneeded overhead.\n\n  * btest/Files/mmdb: golang-ci suggested fixes (Arne Welzel, Corelight)\n\n6.2.0-dev.38 | 2023-10-24 13:57:03 +0200\n\n  * base/frameworks/spicy: Do not load base/misc/version (Arne Welzel, Corelight)\n\n    Unsure what it's used for today and also results in the situation that on\n    some platforms we generate a reporter.log in bare mode, while on others\n    where spicy is disabled, we do not.\n\n    If we want base/frameworks/version loaded by default, should put it into\n    init-bare.zeek and possibly remove the loading of the reporter framework\n    from it - Reporter::error() would still work and be visible on stderr,\n    just not create a reporter.log.\n\n  * btest/core/mmdb: Basic lookup_autonomous_system / lookup_location tests (Arne Welzel, Corelight)\n\n  * btest/files: Add mmdb testing databases and generator code (Arne Welzel, Corelight)\n\n  * zeek.bif: Switch mmdb stale check to network_time (Arne Welzel, Corelight)\n\n    Makes testing easier and aligns better with log rotation and timer\n    expiration. Should not have an effect in practice. Also, log detail\n    about whether inode or modification time changed, too.\n\n  * Fix mmdb pointer destruction (peter.cullen, Corelight)\n\n    The mmdb references needs to use reset() instead of release()\n    so that the destructor gets called and the stale DB is actually\n    cleaned up. Otherwise, the pointer is leaked and the stale DB\n    remains in memory.\n\n  * Bump auxil/spicy to latest development snapshot (Benjamin Bannier, Corelight)\n\n6.2.0-dev.29 | 2023-10-23 11:25:15 +0200\n\n  * GH-3370: Spicy: Avoid creating Zeek types multiple times. (Robin Sommer, Corelight)\n\n    We now cache the first time we create a (named) Zeek type so that we\n    can reuse it later when needed again.\n\n    Closes #3370.\n\n  * Spicy: Unroll Zeek type registrations. (Robin Sommer, Corelight)\n\n    For records and enums, the type registration calls could get pretty\n    large, and then slow to compile. We now build up their vectors\n    entry by entry instead of all at once.\n\n  * quic: Skip new test if have-quic is false (Arne Welzel, Corelight)\n\n6.2.0-dev.24 | 2023-10-20 11:44:15 -0700\n\n  * quic: Bump maximum history length, make configurable (Arne Welzel, Corelight)\n\n    From zeek/spicy-quic#15\n\n6.2.0-dev.21 | 2023-10-19 19:59:49 +0200\n\n  * fuzzers: Add SSL fuzzer (Arne Welzel, Corelight)\n\n6.2.0-dev.19 | 2023-10-19 16:25:34 +0200\n\n  * GH-3383: Fix missing version number in `spicyz`. (Robin Sommer, Corelight)\n\n6.2.0-dev.17 | 2023-10-19 11:08:07 +0200\n\n  * ldap: Use longer event names (Arne Welzel, Corelight)\n\n    It's unusual to compress and shorten event names of protocol analyzers,\n    switch to a slightly longer name instead.\n\n  * ldap: Add spicy-events.zeek (Arne Welzel, Corelight)\n\n  * quic: Add spicy-events.zeek (Arne Welzel, Corelight)\n\n6.2.0-dev.13 | 2023-10-18 12:05:24 -0700\n\n  * Add new SSH key exchange algorithms reported by OpenSSH 9.0 (Tim Wojtulewicz, Corelight)\n\n6.2.0-dev.11 | 2023-10-17 19:33:47 +0200\n\n  * gre-over-udp: Update testing pcap with both endpoints (Arne Welzel, Corelight)\n\n    The first pcap only contained packets from the originator, not the responder.\n\n    What stands out here is that the Linux kernel doesn't seem to use a symmetric\n    flow hash for the tunneled connection, resulting in a total of four tunnel\n    connections for the two inner connections. Sigh.\n\n6.2.0-dev.9 | 2023-10-17 15:54:34 +0200\n\n  * performance improvements for the LDAP ASN.1 analyzer (Paul Dokas, Corelight)\n\n6.2.0-dev.6 | 2023-10-16 11:49:33 -0700\n\n  * Add registration for GRE-over-UDP (Tim Wojtulewicz, Corelight)\n\n  * Update c-ares to v1.20.1 [nomail] (Tim Wojtulewicz, Corelight)\n\n6.2.0-dev.2 | 2023-10-13 14:36:17 -0700\n\n  * Broker: Adapt to upstream API adjustments (Dominik Charousset)\n\n6.1.0-dev.561 | 2023-10-13 13:15:59 +0200\n\n  * GH-14: protocol/quic/decrypt_crypto: Reuse OpenSSL context objects (Arne Welzel, Corelight)\n\n    It is not necessary to allocate and free the context objects used for\n    HKDF and AES all the time, they can be re-used. The main assumption here\n    is no cross-thread usage, but this should be guaranteed even with the\n    fibers: QUIC_decrypt_crypto_payload() always runs to completion.\n\n    A pcap with ~12k QUIC connections had ~15% samples in\n    QUIC_decrypt_crypto_payload. After this change it is down to 5%\n    of samples. The improvement in runtime is ~16%, 12.2 seconds\n    to 10.2 seconds.\n\n    From zeek/spicy-quic#14\n\n  * Bump auxil/spicy to latest development snapshot (Benjamin Bannier, Corelight)\n\n6.1.0-dev.557 | 2023-10-13 08:16:24 +0200\n\n  * CI: Add more logging during docker builds (Tim Wojtulewicz, Corelight)\n\n  * CI: Add timeouts for apt commands in docker builder Dockerfiles (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.553 | 2023-10-12 17:11:18 +0200\n\n  * Fix signed-unsigned comparison. (Benjamin Bannier, Corelight)\n\n    We compared the return value of `sizeof` which returns a `std::size_t`\n    with an `int` which GCC warned about. This patch changes the `int` to a\n    `size_t`.\n\n6.1.0-dev.551 | 2023-10-12 15:53:45 +0200\n\n  * quic: Avoid bytes for VariableLengthInteger (Arne Welzel, Corelight)\n\n    Allocation of bytes objects due to parsing and usage of pack and the\n    invocation of to_uint() showed significantly in profiles (3.3% sample\n    matches). Switch to a more procedural approach to avoid the allocation\n    overhead.\n\n    From zeek/spicy-quic/pull/13\n\n  * protocol/quic: Add doc-id/doc-description to .evt file (Arne Welzel, Corelight)\n\n    Without this, the QUIC enums end up under Zeek::Spicy and we don't\n    have an extra Zeek::QUIC section in the docs.\n\n6.1.0-dev.547 | 2023-10-11 18:02:25 +0200\n\n  * ci/btest: Remove spicy-quic helper, disable Spicy on CentOS 7 (Arne Welzel, Corelight)\n\n    The have-quic pattern wasn't great and it wouldn't scale.\n\n  * btest/core/ppp: Run test in bare mode (Arne Welzel, Corelight)\n\n  * btest/quic: Update other tests (Arne Welzel, Corelight)\n\n  * testing/quic: Fixups and simplification after Zeek integration (Arne Welzel, Corelight)\n\n  * quic: Integrate as default analyzer (Arne Welzel, Corelight)\n\n  * quic: Include Copyright lines to the analyzer's source code contributed by Fox-IT (Arne Welzel, Corelight)\n\n    This is primarily such that they stay intact when importing into the\n    Zeek project. Also move LICENSE to COPYING.\n\n  * quic: Squashed follow-ups: quic.log, tests, various fixes, performance (Arne Welzel, Corelight)\n\n  * quic: Initial implementation (Joost)\n\n6.1.0-dev.538 | 2023-10-11 15:20:27 +0200\n\n  * ci/update-zeekygen-docs.sh: Do output stderr by default (Arne Welzel, Corelight)\n\n    stderr was only produced when there was a real failure as it had been a\n    bit noisy previously, but has hidden actual problems. Now that there is\n    less noise, just output stderr all the time.\n\n  * zeekygen: Disable zeek_init() handlers causing error output (Arne Welzel, Corelight)\n\n    These modules have zeek_init() handlers with actual logic that has side-effects\n    and error outputs. Just disable them during zeekygen runs.\n\n  * zeekygen/example: Squelch unused function warning (Arne Welzel, Corelight)\n\n  * iosource/pcap: Support configurable buffer size (Arne Welzel, Corelight)\n\n    On Linux with a default ext4 or tmpfs filesystem, the default buffer size for\n    reading a pcap is chosen as 4k (strace/gdb validated). When reading large pcaps\n    containing raw data transfers, the syscall overhead for read becomes visible\n    in profiles. Support configurability of the buffer size and default to 128kb.\n\n    When processing a ~830M PCAP (16 UDP connections, each transferring ~50MB) in\n    bare mode, this change improves runtime from 1.39 sec to 1.29 sec. Increasing\n    the buffer further didn't provide a noticeable boost.\n\n  * util/setvbuf: Respect buf argument (Arne Welzel, Corelight)\n\n6.1.0-dev.531 | 2023-10-11 14:09:22 +0200\n\n  * protocol/ldap: Add doc-id/doc-description to .evt file (Arne Welzel, Corelight)\n\n  * spicy/manager: Ensure Zeekygen knows identifier for registered types (Arne Welzel, Corelight)\n\n    Without this, Zeekygen won't generate documentation about exported\n    enum types as it can not resolve the identifier. Also, only register a\n    type as item with the Spicy plugin if there's no _module_info currently\n    active.\n\n6.1.0-dev.528 | 2023-10-10 20:03:31 +0200\n\n  * Introduce dedicated `LDAP::Info` (Benjamin Bannier, Corelight)\n\n  * Remove redundant storing of protocol in LDAP logs (Benjamin Bannier, Corelight)\n\n  * Use LDAP `RemovalHook` instead of implementing `connection_state_remove` (Benjamin Bannier, Corelight)\n\n  * Tidy up LDAP code by using local references (Benjamin Bannier, Corelight)\n\n  * Pluralize container names in LDAP types (Benjamin Bannier, Corelight)\n\n  * Move LDAP script constants to their own file (Benjamin Bannier, Corelight)\n\n  * Name `LDAP::Message` and `LDAP::Search` `*Info` (Benjamin Bannier, Corelight)\n\n  * Make ports for LDAP analyzers fully configurable (Benjamin Bannier, Corelight)\n\n    This moves the ports the LDAP analyzers should be triggered on from the\n    EVT file to the Zeek module. This gives users full control over which\n    ports the analyzers are registered for while previously they could only\n    register them for additional ports (there is no Zeek script equivalent\n    of `Manager::UnregisterAnalyzerForPort`).\n\n    The analyzers could still be triggered via DPD, but this is intentional.\n    To fully disable analyzers users can use e.g.,\n\n    ```zeek\n    event zeek_init()\n        {\n        Analyzer::disable_analyzer(Analyzer::ANALYZER_LDAP_TCP);\n        }\n    ```\n\n  * Require have-spicy for tests which log spicy-ldap information (Benjamin Bannier, Corelight)\n\n  * Fix LDAP analyzer setup for when Spicy analyzers are disabled (Benjamin Bannier, Corelight)\n\n  * Bump zeek-testing-private (Benjamin Bannier, Corelight)\n\n  * Integrate spicy-ldap test suite (Benjamin Bannier, Corelight)\n\n  * Move spicy-ldap into Zeek protocol analyzer tree (Benjamin Bannier, Corelight)\n\n  * Explicitly use all of spicy-ldap's modules (Benjamin Bannier, Corelight)\n\n    This fixes building of this multi-module analyzer.\n\n  * Explicitly list `asn1.spicy` as spicy-ldap source (Benjamin Bannier, Corelight)\n\n    This will lead to the file being installed so it can be consumed by\n    other parsers.\n\n  * Remove uses of `zeek` module in spicy-ldap (Benjamin Bannier, Corelight)\n\n  * Fix typos in spicy-ldap (Benjamin Bannier, Corelight)\n\n  * Remove project configuration files in spicy-ldap (Benjamin Bannier, Corelight)\n\n  * Integrate spicy-ldap into build (Benjamin Bannier, Corelight)\n\n  * Import zeek/spicy-ldap@57b5eff9883d1c43896f4278218351a132de9ce1 (Benjamin Bannier, Corelight)\n\n  * Merge branch 'topic/timw/arm-build-failure' (Tim Wojtulewicz, Corelight)\n\n    * topic/timw/arm-build-failure:\n      CI: Disable spicy on arm_debian11 and opensuse_leap_15_4 builds\n      CI: Remove sanitizers resource template\n\n  * CI: Disable spicy on arm_debian11 and opensuse_leap_15_4 builds (Tim Wojtulewicz, Corelight)\n\n    These two builds are struggling to complete due to OOM issues. Reducing the\n    number of CPUs didn't help, so this temporarily disables Spicy from\n    building on those hosts to reduce the memory usage.\n\n  * CI: Remove sanitizers resource template (Tim Wojtulewicz, Corelight)\n\n    This template was added when the sanitizer builds needed more memory than all\n    of the other builds. We've since increased the amount of memory that the other\n    builds use beyond what's requested in this template, so it doesn't make sense\n    to keep it around.\n\n  * Updating zeek-aux submodule [nomail] (Arne Welzel, Corelight)\n\n  * NEWS: Polish external plugins message [nomail] [skip ci] (Arne Welzel, Corelight)\n\n6.1.0-dev.502 | 2023-10-09 16:26:58 +0200\n\n  * btest/plugins/hooks: Run in bare mode (Arne Welzel, Corelight)\n\n    Motivation is basically the same as in 88bb5270263934f0004fd9fdeebf5ac25015d213.\n    For plugin.hooks, one example is that adding a new option in the default script\n    changes the baseline due registration of change handlers. Also, the connection\n    record is printed in various places, resulting in churn when the default\n    scripts change.\n\n  * Bump cmake submodule for 3.15 requirement (Arne Welzel, Corelight)\n\n6.1.0-dev.499 | 2023-10-09 14:15:41 +0200\n\n  * btest/coverage: Add record-fields test (Arne Welzel, Corelight)\n\n    Justin pointed out that the misc/dump-events test shows added fields to\n    the connection record. Add a new test that prints the connection record\n    recursively in bare and default mode to cover that use-case\n    specifically.\n\n  * btest/dump-events: Run in bare mode, load conn and smtp scripts only (Arne Welzel, Corelight)\n\n    The dump-events baseline changes are pure noise and have spurred confusion\n    for internal and external contributors. For example, adding new\n    analyzers have perturbed orderings of sets holding analyzer tags.\n\n    Running in non-bare mode, the baselines change almost whenever any of the\n    record types attached to connections change in the default scripts. This\n    causes continuous and seemingly little useful updates to the baselines.\n\n    This change switches the test to run in bare mode and explicitly loads\n    just base/protocols/conn and base/protocols/smtp. The primary intention\n    of the test should be testing the functionality of the misc/dump-events\n    script, not the raised events of all loaded default scripts (for that the\n    used PCAP is too narrow).\n\n    Protocol specific scripts that do want to leverage misc/dump-events for\n    baseline creation of their or their analyzer's events can add additional\n    specific tests with suitable PCAP files.\n\n6.1.0-dev.495 | 2023-10-06 16:08:56 +0200\n\n  * Bump auxil/spicy to latest development snapshot (Benjamin Bannier, Corelight)\n\n6.1.0-dev.493 | 2023-10-04 22:46:38 -0700\n\n  * Btest for normalized reporter path reporting (Christian Kreibich, Corelight)\n\n  * Normalize file paths in find_file_in_path() (Christian Kreibich, Corelight)\n\n6.1.0-dev.490 | 2023-10-04 20:15:54 +0200\n\n  * Var/Func: Render function parameters using comma, not semicolon (Arne Welzel, Corelight)\n\n    A bit larger follow-up to what Tim pointed out: Function prototype descriptions\n    previously used semicolons to separate parameters.\n\n    Switch to use commas when a RecordType is used as function parameter.\n    Use existing \"func_args\" naming for consistency.\n\n  * GH-3314: Var: Fix null-pointer deref on redefinition of lambdas (Arne Welzel, Corelight)\n\n6.1.0-dev.486 | 2023-10-02 11:50:56 -0700\n\n  * get_current_packet: Add note/warning to docs (Arne Welzel, Corelight)\n\n6.1.0-dev.484 | 2023-10-02 11:44:21 -0700\n\n  * zeek-setup: Early exit when parsing failed (Arne Welzel, Corelight)\n\n    When there are errors reported during yyparse(), Zeek still continued\n    running initialization functions like init_general_global_var(), init_net_var()\n    and run_bif_initializers(). These usually call abort() in unexpected\n    situations causing misleading and confusing errors. This patch prevents\n    this by exiting earlier.\n\n    Closes #3316\n\n6.1.0-dev.482 | 2023-10-02 11:42:58 -0700\n\n  * broker/Manager: Fix deletion of composite keys (Arne Welzel, Corelight)\n\n    Follow-up for commit 44ae8f9e8f25ff403707026657e000693550873f.\n\n  * Add btest for brokerstore delete with complex index. (Jan Grashoefer, Corelight)\n\n6.1.0-dev.479 | 2023-10-02 11:09:13 -0700\n\n  * minor updates to -O gen-C++ maintenance notes and scripts (Vern Paxson, Corelight)\n\n  * ZAM fix for inlining bug when a local is assigned to a function parameter (Vern Paxson, Corelight)\n\n  * ZAM fixes for record creation and table indexing potentially having side-effects (Vern Paxson, Corelight)\n\n  * removed order-of-evaluation ambiguity from new BTest (Vern Paxson, Corelight)\n\n  * introduce internal \"mask\" expression node to avoid mixed-type overloading of \"/\" (Vern Paxson, Corelight)\n\n  * fix bug in failing to concretize empty vectors (Vern Paxson, Corelight)\n\n  * ZAM BTest update to match recent change to one of the tests (Vern Paxson, Corelight)\n\n  * fixed ZAM reduction bug in += / -= operators (Vern Paxson, Corelight)\n\n6.1.0-dev.470 | 2023-10-02 10:13:04 -0700\n\n  * generate-docs: Bump ccache from 500M to 2000M (Arne Welzel, Corelight)\n\n    Since enabling Spicy, 500M (default) of ccache max-size size is not\n    sufficient for efficient cache usage of a Zeek build anymore, so we\n    end up thrashing the configured ccache. Build times have increased\n    from 5-10 minutes to 1+ hour after enabling Spicy in the docs build.\n\n6.1.0-dev.468 | 2023-10-02 10:10:22 -0700\n\n  * Enable ccache-backed Spicy JIT for users of developer scripts. (Benjamin Bannier, Corelight)\n\n    For CI and more general BTest execution we already enabled ccache\n    previously, but developers using a Spicy build out of the build\n    directory still needed to manually set up caching.\n\n    With this patch we enable it for such cases as well via\n    `zeek-path-dev.*sh`.\n\n6.1.0-dev.466 | 2023-10-02 10:08:38 -0700\n\n  * DNS_Mgr: Fix | vs & for pollfd.revents (Arne Welzel, Corelight)\n\n    Follow-up for c4c4a23bfd19c258beb7254be9d96716914ad03f.\n\n6.1.0-dev.464 | 2023-10-02 14:38:18 +0200\n\n  * Bump auxil/spicy to latest development snapshot (Benjamin Bannier, Corelight)\n\n6.1.0-dev.462 | 2023-09-28 20:29:36 +0200\n\n  * cirrus/ci: Run ubuntu22_task on benchmark-nightly, too (Arne Welzel, Corelight)\n\n6.1.0-dev.460 | 2023-09-28 10:00:55 +0200\n\n  * Fix GCC warnings about unintended pointer comparisions (Benjamin Bannier, Corelight)\n\n6.1.0-dev.458 | 2023-09-27 16:53:02 +0200\n\n  * cirrus/ci: Add ubuntu22_spicy_task and ubuntu22_spicy_head_task (Arne Welzel, Corelight)\n\n    These tasks are meant to run nightly on the master branch. Currently,\n    the external dns, http and dhcp Spicy analyzers are installed via zkg\n    post building. The build artifact is uploaded to Cirrus and the benchmarker\n    API triggered.\n\n    For the spicy_head task, the auxil/spicy submodule is pulled to the latest\n    commit. This also provides a bit of a nightly integration test.\n\n  * cirrus/ci: Add pre_build_script mechanism (Arne Welzel, Corelight)\n\n    Allow tasks to run a bit of code just before ci/build.sh.\n\n6.1.0-dev.455 | 2023-09-26 18:42:20 +0200\n\n  * auxil/libunistd: Bump for poll() inclusion (Arne Welzel, Corelight)\n\n  * GH-3309: DNS_Mgr: Replace ares_fds() with ares_getsock() (Arne Welzel, Corelight)\n\n    On Slack, a user reported \"fortify source\" aborts within ares_fds() due\n    to the FDs used by c-ares exceeding 1024 and thereby larger than the\n    maximum fd value that a fd_set can hold.\n\n    Switch to ares_get_socks() and poll() to avoid this.\n\n    Closes #3309.\n\n6.1.0-dev.451 | 2023-09-26 16:14:24 +0200\n\n  * Use unique port for test `scripts.base.utils.active-http` (Benjamin Bannier, Corelight)\n\n  * Do not automatically load Spicy modules in dot paths. (Benjamin Bannier, Corelight)\n\n  * Exclude dot directories when searching ZEEK_PLUGIN_PATH (Benjamin Bannier, Corelight)\n\n    Dot directories rarely contain anything we would want to load as a\n    dynamic plugin. Even worse, they likely contain files with externally\n    controlled lifetimes which might be removed while we are using them\n    (see e.g., zeek/btest#98).\n\n    With this patch we do not search _discovered_ dot directories anymore.\n    We continue to load from a user-specified `ZEEK_PLUGIN_PATH`, even if\n    its name starts with a dot.\n\n    Since this patch changes previous behavior it is a **BREAKING CHANGE**.\n\n6.1.0-dev.447 | 2023-09-26 11:07:12 +0200\n\n  * VectorVal: Embed vector_val (Arne Welzel, Corelight)\n\n    Similar motivation as for RecordVal, save an extra malloc/free\n    and pointer indirection.\n\n    This breaks the `auto& RawVec()` API which previously returned\n    a reference to the std::vector*. It now returns a reference\n    to the vector instead. It's commented as intended for internal\n    and compiled code, so even though it's public API,\n\n    The previous `std::vector<std::optional<ZVal>>*&` return type was also very\n    likely not intended (all consumers just dereference it anyhow). I'm certain\n    this API was never meant to modify the actual pointer value.\n\n    I've switched to explicit typing, too.\n\n  * RecordVal: Embed record_val (Arne Welzel, Corelight)\n\n    This should remove one malloc/free per created and destroyed record instance\n    and avoid one extra pointer indirection to access fields.\n\n6.1.0-dev.444 | 2023-09-25 14:59:19 +0200\n\n  * Do not require cookie for `reject_protocol` during teardown. (Benjamin Bannier, Corelight)\n\n    A user reported that they ran into a situation where a parse error\n    caused an assertion failure in `reject_protocol`. printf debugging points\n    to the `CookieSetter`s in the `try`/`catch` blocks during processing\n    already clearing the cookie RAII-style; since their `catch` blocks\n    already send an analyzer violation no further sending of one from\n    `reject_protocol` is required.\n\n    This patch replaces the assert in `reject_protocol` with a runtime check\n    and an early return if the cookie is already cleared.\n\n6.1.0-dev.442 | 2023-09-25 13:50:15 +0200\n\n  * ci/benchmark: Also send CIRRUS_TASK_NAME to benchmarker API (Arne Welzel, Corelight)\n\n    We otherwise cannot distinguish between different benchmarking jobs when\n    we introduce them (think ubuntu22_jemalloc or ubuntu22_spicy).\n\n6.1.0-dev.441 | 2023-09-22 14:38:26 -0700\n\n  * CI: Disable tsan task until it can be fixed (Tim Wojtulewicz, Corelight)\n\n  * Update af_packet plugin submodule [nomail] (Tim Wojtulewicz)\n\n6.1.0-dev.436 | 2023-09-22 15:06:39 +0200\n\n  * Bump Spicy (Benjamin Bannier, Corelight)\n\n6.1.0-dev.434 | 2023-09-22 12:13:23 +0200\n\n  * Fix formatting of `spicy_add_analyzer` (Benjamin Bannier, Corelight)\n\n  * Update cmake submodule [nomail] (Arne Welzel, Corelight)\n\n6.1.0-dev.430 | 2023-09-21 10:55:12 +0200\n\n  * Add check to docs CI whether Spicy docs are up to date. (Robin Sommer, Corelight)\n\n  * Bump zeek-docs. (Robin Sommer, Corelight)\n\n  * Enable Spicy when generating docs. (Robin Sommer, Corelight)\n\n  * GH-3306: Zeekygen: Merge in Spicy analyzer documentation. (Robin Sommer, Corelight)\n\n  * Zeekygen: Refine location tracking for Spicy events. (Robin Sommer, Corelight)\n\n  * Zeekygen: Refactor code documenting analyzers. (Robin Sommer, Corelight)\n\n  * Add `%doc-*` tags to Syslog and Finger analyzers. (Robin Sommer, Corelight)\n\n  * Spicy: Support additional documentation tags inside EVT files. (Robin Sommer, Corelight)\n\n    So far we had trouble documenting Spicy analyzers through Zeekygen\n    because they would show up as components belonging to the\n    `Zeek::Spicy` plugin; whereas traditional analyzers would be their own\n    plugins and hence documented individually on their own. This commit\n    teaches Zeekygen to track Spicy analyzers separately inside their own\n    `Info` instances. This information isn't further used in this commit\n    yet, but will be merged with the plugin output in a subsequent change\n    to get the expected joint output.\n\n    To pass additional information to Zeekygen, EVT files now also support\n    two new tags for Zeekygen purposes:\n\n    - `%doc-id = ID;` defines the global ID under which everything inside\n      the EVT file will be documented by Zeekygen, conceptually comparable\n      to plugin names (e.g., `Zeek::Syslog`).\n\n    - `%doc-description = \"text\" provides additional text to go into the\n      documentation (comparable to plugin descriptions).\n\n    This information is carried through into the HLTO runtime\n    initialization code, from where it's registered with Zeekygen.\n\n    This commit also removes a couple of previous hacks of how Spicy\n    integrated with Zeekygen which (1) ended up generating broken doc output\n    for Spicy components, and (2) don't seem to be necessary anymore\n    anyways.\n\n  * Fix lack of namespace qualification inside an include file. (Robin Sommer, Corelight)\n\n  * Exclude script from documentation that interferes with other locations. (Robin Sommer, Corelight)\n\n6.1.0-dev.419 | 2023-09-21 09:55:51 +0200\n\n  * GH-3298: Spicy: Fix support for exporting bitfields. (Robin Sommer, Corelight)\n\n    Anonymous bitfields now have their fields lifted into the surrounding\n    record.\n\n  * Bump Spicy. (Robin Sommer, Corelight)\n\n6.1.0-dev.416 | 2023-09-20 13:04:21 +0200\n\n  * Correctly compute name for spicyz export with debug log. (Benjamin Bannier, Corelight)\n\n    In 36a6770e9891114b4f42dac3728040c67cc9411e we changed the way Spicy\n    fields exported as\n    record fields are represented. This broke the `zeek` debug log which\n    hardcoded a different representation.\n\n    This patch brings the generation of the debug log in line with the\n    actual AST structure. We also enable debug logging in one test to\n    validate that it works, at least for the case we hit here.\n\n  * Updating submodule(s) [nomail] (Benjamin Bannier, Corelight)\n\n6.1.0-dev.413 | 2023-09-19 19:56:44 +0200\n\n  * ci/benchmark: Send more Cirrus, GitHub and Zeek version information (Arne Welzel, Corelight)\n\n    I wonder if we hit a query string limitation and should instead switch\n    to post body here. It's the `curl -G -X POST` part making this a POST\n    with a long query string.\n\n6.1.0-dev.411 | 2023-09-18 10:46:34 -0700\n\n  * Remove some unnecessary includes of telemetry headers (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.409 | 2023-09-15 11:58:40 +0200\n\n  * Update zeekjs submodule (Arne Welzel, Corelight)\n\n    Primarily for the following fixes:\n\n        4dfc0dd Nodejs: Do not use UV_RUN_DEFAULT during InitPostScript()\n        ade764e Nodejs: Unset kNoInitializeCppgc for Node 20.6 or higher\n        a38df85 Fix type check of parameters array with zeek.event\n        deddadd Fix type check of parameters array with zeek.invoke\n\n  * CMakeLists: Set Python3_EXECUTABLE hint for spicy (Arne Welzel, Corelight)\n\n  * Avoid assertion/tag error on invalid table constructor index expression (Christian Kreibich, Corelight)\n\n    If an index expression in a table constructor isn't a list, don't abort with an\n    assertion failure (on debug builds) or a bad tag check. Instead, mark the\n    constructor expression erroneous and return gracefully. The following...\n\n      global a_table: table[subnet] of string = {\n            1.2.3.4/24 = \"unspecified\",    # should have been [1.2.3.4/24] = \"unspecified\",\n      };\n\n    ...now yields:\n\n      $ zeek ./test.zeek\n      error in ././test.zeek, line 2: table constructor index is not a list (1.2.3.0/24 = unspecified)\n      error in ././test.zeek, line 2: type clash in assignment (a_table = table(1.2.3.0/24 = unspecified))\n\n  * GH-3279: Fix handling of module scope when checking exported Spicy types for collisions (Benjamin Bannier, Corelight)\n\n    When checking exported Spicy types for collisions with existing Zeek\n    types we previously would also check whether they collide with names in\n    global scope, i.e., we didn't provide a `no_global` arg to\n    `detail::lookup_ID` which defaulted to false (since we also provided a\n    module name I'd argue that the behavior of that function is confusing\n    and probably error-prone -- like seen here).\n\n    This meant that e.g., a Spicy enum `foo::Direction` (automatically in\n    implicit Spicy module scope) would be detected to collide with the\n    existing Zeek `Direction` enum.\n\n    With this patch we use the `lookup_ID` API correctly and do not check\n    against potential collisions with globals anymore since it is not\n    needed.\n\n  * File extraction: use fseek (Johanna Amann, Corelight)\n\n    In the past, we allocated a buffer with zeroes and wrote that with\n    fwrite. Now, instead we just fseek to the correct offset.\n\n    This changes the way in which the file extract limit is counted a bit;\n    skipped bytes do no longer count against the file size limit.\n\n    (cherry picked from commit 5071592e9b7105090a1d9de19689c499070749d4)\n\n6.1.0-dev.397 | 2023-09-12 17:00:26 -0700\n\n  * Update dump-events test baseline after latest master changes (Tim Wojtulewicz)\n\n  * Add extract_limit_includes_missing option for file extraction (Johanna Amann, Corelight)\n\n    Setting this option to false does not count missing bytes in files towards the\n    extraction limits, and allows to extract data up to the desired limit,\n    even when partial files are written.\n\n    When missing bytes are encountered, files are now written as sparse\n    files.\n\n    Using this option requires the underlying storage and utilities to support\n    sparse files.\n\n    (cherry picked from commit afa6f3a0d3b8db1ec5b5e82d26225504c2891089)\n\n  * ftp: Do not log non-pending commands (Arne Welzel, Corelight)\n\n    OSS Fuzz generated a CWD request and reply followed by very many EPRT\n    requests. This caused Zeek to re-log the CWD request and invoke `build_url_ftp()`\n    over and over again resulting in long processing times.\n\n    Avoid this scenario by not logging commands that aren't pending anymore.\n\n    (cherry picked from commit b05dd31667ff634ec7d017f09d122f05878fdf65)\n\n  * http/smtp: Fix wrong character class usage (Arne Welzel, Corelight)\n\n    A call to `extract_filename_from_content_disposition()` is only\n    efficient if the string is guaranteed to contain the pattern that\n    is removed by `sub()`. Due to missing brackets around the `[:blank:]`\n    character class, an overly long string (756kb) ending in\n    \"Type:dtanameaa=\" matched the wrong pattern causing `sub()` to\n    exhibit quadratic runtime. Besides that, we may have potentially\n    extracted wrong information from a crafted header value.\n\n    (cherry picked from commit 6d385b1ca724a10444865e4ad38a58b31a2e2288)\n\n  * VLAN: Fix length checking for non-Ethernet type 2 frames (Tim Wojtulewicz, Corelight)\n\n    (cherry picked from commit c579eb7b7cf3ca1d9008e74d7934155866c7e4f7)\n\n  * Make sure that all sessions/connections are done before deleting plugins (Tim Wojtulewicz, Corelight)\n\n    (cherry picked from commit e29b499a211137cf3cf0c24a4ff82db1b806f132)\n\n6.1.0-dev.390 | 2023-09-12 20:52:01 +0200\n\n  * CreationInitsOptimizer: Use PreTypedef() instead of PreType() (Arne Welzel, Corelight)\n\n    PreTypedef() does not require the PreID() trampoline and ensures\n    it's only called for IDs that are types. Also allows dropping\n    the const_cast<> due to id->GetType() returning a const TypePtr which\n    is different from a `const Type*`...\n\n  * GH-3260: Fix deferred record initialization (Arne Welzel, Corelight)\n\n    Put RecordFieldInit instances into creation_inits during parsing and\n    determine their deferrability in an InitPostScript step. Any\n    RecordFieldInits can be deferred are moved into deferred_inits.\n\n  * testing/btest: Un-deferred record initalization tests (Arne Welzel, Corelight)\n\n    These baselines should align with what Zeek 5.2 or before did.\n\n6.1.0-dev.385 | 2023-09-11 10:15:51 -0700\n\n  * Move allocation of analyzer_hash to file_mgr (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.382 | 2023-09-08 16:46:53 +0200\n\n  * fix for ZAM statement-level profiling (broken by GH-3199) (Vern Paxson, Corelight)\n\n  * GH-3249: ZAM fixes for compatibility with GH-3249 changes (Vern Paxson, Corelight)\n\n  * GH-3249: -O gen-C++ fixes for compatibility with GH-3249 changes (Vern Paxson, Corelight)\n\n  * minor BTest reordering to diminish differences with script optimization (Vern Paxson, Corelight)\n\n6.1.0-dev.377 | 2023-09-08 13:48:26 +0200\n\n  * ID/Stmt: Introduce INIT_SKIP and use in ForStmt (Arne Welzel, Corelight)\n\n    Currently, loop vars are added to a function scope's inits and\n    initialized upon entering a function with default values. This\n    applies to vector, record and table types.\n\n    This is unnecessary for variables used in for loops as they are\n    guaranteed to be initialized while iterating.\n\n  * GH-3267: CompositeHash: Skip record initialization when recovering vals (Arne Welzel, Corelight)\n\n    Initializing fields of recovered records caused running &default expression\n    of fields just so that they are re-assigned in the next step with the\n    recovered fields. The second test case still shows that the loop var\n    is initialized as well even though that's not needed.\n\n    Add tests for iterating over records with &default attributes for both,\n    tables and vectors.\n\n    Fixes #3267\n\n6.1.0-dev.374 | 2023-09-07 15:58:22 +0200\n\n  * GH-3276: Propagate failure reason in `spicy::decline_input`/`zeek::reject_protocol`. (Benjamin Bannier, Corelight)\n\n    Closes #3276.\n\n6.1.0-dev.372 | 2023-09-07 14:26:27 +0200\n\n  * ci: update-alternative to have python3 be python3.9 (Arne Welzel, Corelight)\n\n    Tweak so that python3 is correct for the Python_FIND_UNVERSIONED_NAMES\n    change. python3 on 15.4 was pointing at Python3.6 still and for that\n    there are no dev headers installed.\n\n    A normal user could use --with-python instead, but in CI this is easier.\n\n  * Add OpenSUSE Leap 15.5 to ci (Johanna Amann, Corelight)\n\n    This also adds 15.4 to the list of distributions that are skipped by\n    default - let me know if this is not a good idea. I assume that by now\n    most people will be running 15.5 (15.4 will be EOL in ~3 months).\n\n  * GH-3275: configure/CMakelists: Use Python_EXECUTABLE as hint for interpreter (Arne Welzel, Corelight)\n\n    The PYTHON_EXECUTABLE variable was only interpreted by our own FindPythonDev.\n    cmake's FindPython uses Python_EXECUTABLE instead.\n\n    Also, if --with-python is not used, prefer unversioned executables that\n    match the version requirement. Further, remove Python_ADDITIONAL_VERSIONS\n    that is interpreted by FindPythonInterp which we're not using anymore.\n\n    https://cmake.org/cmake/help/latest/module/FindPython.html#artifacts-specification\n    https://cmake.org/cmake/help/latest/module/FindPythonInterp.html\n\n    Closes #3275\n\n6.1.0-dev.368 | 2023-09-07 13:28:42 +0200\n\n  * GH-3278: spicy: Do not register port N+1 for port N in .evt file (Arne Welzel, Corelight)\n\n  * Updating auxil/zeek-client submodule [nomail] (Christian Kreibich, Corelight)\n\n6.1.0-dev.364 | 2023-09-05 19:56:59 +0200\n\n  * DNS_Mgr: Use Process() for timeout expiration (Arne Welzel, Corelight)\n\n    DNS_Mgr has a GetNextTimeout() implementation that may return 0.0. When\n    that is the case, its IO source is enqueued as ready with an fd of -1.\n    This in turn results in Process() being called instead of ProcessFd()\n    in RunState.cc.\n\n    Ensure timeouts behavior is properly handled by actually forwarding\n    timeout indications to c-ares via DNS_Mgr::Process(). This results\n    in pending DNS queries for which a timeout happened to actually\n    timeout (when there's no other connectivity).\n\n  * DNS_Mgr: Fix GetNextTimeout() returning absolute values (Arne Welzel, Corelight)\n\n    Not sure, must have been some sort of left-over, but wasn't really\n    effective due to Process() not being implemented.\n\n6.1.0-dev.361 | 2023-09-04 14:00:37 +0200\n\n  * Fix check for emailed notices (Justin Azoff, Corelight)\n\n    This bug was introduced in 9d0bd96\n\n6.1.0-dev.358 | 2023-09-01 11:53:55 +0200\n\n  * GH-1705: http: Prevent request/response de-synchronization and unbounded state growth (Arne Welzel, Corelight)\n\n    When http_reply events are received before http_request events, either\n    through faking traffic or possible re-ordering, it is possible to trigger\n    unbounded state growth due to later http_requests never being matched\n    again with responses.\n\n    Prevent this by synchronizing request/response counters when late\n    requests come in.\n\n    Also forcefully flush pending requests when http_replies are never\n    observed either due to the analyzer having been disabled or because\n    half-duplex traffic.\n\n6.1.0-dev.356 | 2023-08-30 11:24:51 +0200\n\n  * testing/external: Exclude telemetry.log from baselines (Arne Welzel, Corelight)\n\n    The diffs produced by telemetry.log when introducing a weird or\n    removing/adding protocol specific logs is overwhelming and distracting\n    without providing value. Exclude telemetry.log similar to how we already\n    exclude stats.log.\n\n    Some more targeted telemetry.log tests exists in the normal testing/btest\n    suite and that appears more sensible.\n\n6.1.0-dev.354 | 2023-08-29 12:13:51 -0700\n\n  * Forward OpenSSL include path to plugins (Dominik Charousset, Corelight)\n\n6.1.0-dev.349 | 2023-08-29 09:11:21 -0700\n\n  * CI: Add ubuntu 23.04 build (Tim Wojtulewicz, Corelight)\n\n  * CI: Remove EOL ubuntu 22.10 build (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.346 | 2023-08-29 09:39:10 +0200\n\n  * pre-commit: autoupdate (Arne Welzel, Corelight)\n\n    ...except for clang-format, because versions after v13.0.0 have\n    borked the Whitesmith formatting. Also moves yapf from\n    pre-commit/mirrors-yapf to google/yapf.\n\n6.1.0-dev.343 | 2023-08-28 20:07:16 +0200\n\n  * cmake: Bump submodule for removal of NEED_KRB5_H (Arne Welzel, Corelight)\n\n  * zeek-config.h: Drop NEED_KRB5_H (Arne Welzel, Corelight)\n\n    This is unused in the Zeek tree after the previous commit, remove it\n    from zeek-config.h\n\n  * File: Drop krb5.h include (Arne Welzel, Corelight)\n\n    It looks as if krb5.h was only ever needed together with OpenSSL, then\n    OpenSSL includes were removed, but the krb5.h ones stayed around.\n\n6.1.0-dev.339 | 2023-08-28 10:53:37 -0700\n\n  * change Trigger constructor to not potentially auto-delete itself (Vern Paxson, Corelight)\n\n6.1.0-dev.337 | 2023-08-28 12:56:14 +0200\n\n  * Update doc, cmake submodules for installing .spicy files (Arne Welzel, Corelight)\n\n6.1.0-dev.336 | 2023-08-28 12:19:45 +0200\n\n  * testing: Bump external test suite (Arne Welzel, Corelight)\n\n  * dhcp: Handle is_orig=T for connections from server to 255.255.255.255 (Arne Welzel, Corelight)\n\n    This works around the new semantics of is_orig=T for \"connections\"\n    from DHCP servers to broadcast addresses. IMO, having the server address\n    as originator in the conn.log is still more intuitive.\n\n  * GH-3235: IPBasedAnalyzer: Don't flip connections when destination is broadcast (Arne Welzel, Corelight)\n\n6.1.0-dev.331 | 2023-08-25 21:38:40 +0200\n\n  * BTests for any/vector-of-any fixes (Vern Paxson, Corelight)\n\n  * fixes for vector assignments involving \"any\"/\"vector of any\" types (Vern Paxson, Corelight)\n\n6.1.0-dev.327 | 2023-08-24 12:17:42 -0700\n\n  * updated notes regarding \"-O gen-C++\" maintenance (Vern Paxson, Corelight)\n\n  * \"-O gen-C++\" support for \"assert\" statements (Vern Paxson, Corelight)\n\n  * addressed some nits re \"-O gen-C++\" script optimization (Vern Paxson, Corelight)\n\n  * fixes for compiling lambdas to C++ (Vern Paxson, Corelight)\n\n  * fixes to avoid ambiguities in analyzing captures for script optimization (Vern Paxson, Corelight)\n\n  * disambiguate lambdas by adding scoping and consideration of captures (Vern Paxson, Corelight)\n\n  * addressed performance and correctness issues flagged by Coverity (Vern Paxson, Corelight)\n\n6.1.0-dev.319 | 2023-08-24 12:26:00 +0200\n\n  * PPP: Add PPP analyzer to handle LINKTYPE_PPP (0x9) (Arne Welzel, Corelight)\n\n    Using pcaps from https://interop.seemann.io/ as samples for QUIC protocol\n    data didn't produce a conn.log for the contained data. `tcpdump -r`\n    and Wireshark do show the contained IP/UDP packets. Teach Zeek how\n    to handle link type DLT_PPP 0x09 using a new PPP analyzer based on the\n    PPPSerial analyzer code.\n\n    Usual update to files/x509 baseline after adding new analyzer due\n    to enum values changing.\n\n6.1.0-dev.316 | 2023-08-23 13:04:59 -0700\n\n  * CI: Force alpine image to rebuild (Tim Wojtulewicz, Corelight)\n\n  * CI: Install python3.8 on older distros (Tim Wojtulewicz, Corelight)\n\n  * CI: Remove Ubuntu 18 build (EOL) (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.312 | 2023-08-23 12:31:16 +0100\n\n  * Community-id: load main script in notice script, fix notice script (Johanna Amann, Corelight)\n\n    This change makes the community-id script that adds the community id to\n    notice.log automatically load the main script if this was not already\n    loaded.\n\n    In the past, the script just did not perform any action if the main\n    script was not loaded.\n\n    This change also makes the notice script respect the seed/base64\n    settings that were set in the main script.\n\n    Fixes GH-3242\n\n6.1.0-dev.310 | 2023-08-22 14:59:28 +0200\n\n  * GH-3218/GH-3219: Spicy: Extend functionality of `export` in EVT\n    files. (Robin Sommer, Corelight)\n\n    We now support selecting which fields of a unit type get exported into\n    the automatically created Zeek record; as well as selecting which\n    fields get a `&log` attribute added automatically to either all fields\n    or to selected fields.\n\n    Syntax:\n\n    - To export only selected fields:\n\n        export Foo::X with { field1, field3 };\n\n    - To export all but selected fields:\n\n        export Foo::X without { field2, field3 };\n\n    - To `&log` all fields:\n\n        export Foo::X &log;\n\n    - To `&log` only selected fields:\n\n        export Foo::X with { field1 &log, field3 }; # exports (only) field1 and field3, and marks field1 for logging\n\n  * pre-commit: Pin to latest shfmt-py version (Arne Welzel, Corelight)\n\n    This allows users to run shfmt-py with Python > 3.9. Also drop\n    the explicit Python version for the setup-python action.\n\n6.1.0-dev.303 | 2023-08-15 17:33:51 +0100\n\n  * Raw reader: use posix_spawn instead of fork + exec (Johanna Amann, Corelight)\n\n    This commit switchexisd the Raw reader to use posix_spawn, instead of\n    the combination of fork + exec. This should be much more efficient, and\n    also makes the code smaller, and easier to read and understand.\n\n6.1.0-dev.300 | 2023-08-15 09:19:57 -0700\n\n  * Force pre-commit to use python 3.9 (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.298 | 2023-08-14 11:18:14 -0700\n\n  * CI: update freebsd to 13.2 and 12.4 (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.293 | 2023-08-11 10:34:52 -0700\n\n  * Fix conversion with record types (Tim Wojtulewicz, Corelight)\n\n  * Add conversion between set and vector using 'as' keyword (Tim Wojtulewicz, Corelight)\n\n  * Add std::move for a couple of variables passed by value (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.289 | 2023-08-11 09:52:24 -0700\n\n  * Modbus: Add early return in case of data being too short to parse (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.287 | 2023-08-09 09:08:33 -0700\n\n  * Explicitly link Zeek executable against Spicy libraries in binary packaging mode. (Benjamin Bannier, Corelight)\n\n6.1.0-dev.284 | 2023-08-08 10:55:03 -0700\n\n  * Pass parsed file record information with ReadFile/WriteFile events (Tim Wojtulewicz, Corelight)\n\n  * Add length field from header to ModbusHeaders record type (Tim Wojtulewicz, Corelight)\n\n  * Modbus: Add support for Encapsulation Interface Transport (FC=2B) requests and responses (Tim Wojtulewicz, Corelight)\n\n  * Modbus: Add support for Diagnostics (FC=8) requests and responses (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.272 | 2023-08-07 09:41:34 -0700\n\n  * Change VERSION variable in CMake config to ZEEK_VERSION_FULL (Tim Wojtulewicz, Corelight)\n\n  * Update bifcl and binpac for FindPackage fixes (Tim Wojtulewicz, Corelight)\n\n  * Remove usage of FindRequiredPackage (Tim Wojtulewicz, Corelight)\n\n  * Update zeekctl and cmake to deprecate FindRequiredPackage (Tim Wojtulewicz, Corelight)\n\n  * Update broker submodule for pybind11 + cmake changes (Tim Wojtulewicz, Corelight)\n\n  * ci: Bump centos-7 (Arne Welzel, Corelight)\n\n6.1.0-dev.264 | 2023-08-07 10:22:18 +0200\n\n  * Suppress new tsan findings from Ubuntu 22 upgrade (Tim Wojtulewicz)\n\n  * Update tsan build to ubuntu22 (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.261 | 2023-08-04 12:31:51 +0200\n\n  * TableVal: Unify &default and &default_insert lookups (Arne Welzel, Corelight)\n\n    Introduce DefaultAttr() helper to avoid a bit of duplicated code.\n\n  * GH-2668: Add &default_insert attribute for tables (Arne Welzel, Corelight)\n\n    This is based on the discussion in zeek/zeek#2668. Using &default with tables\n    can be confusing as the default value is not inserted. The following example\n    prints an empty table at the end even new Service records was instantiated.\n\n        type Service: record {\n            occurrences: count &default=0;\n            last_seen: time &default=network_time();\n        };\n\n        global services: table[string] of Service &default=Service();\n\n        event zeek_init()\n            {\n            services[\"http\"]$occurrences += 1;\n            services[\"http\"]$last_seen = network_time();\n\n            print services;\n            }\n\n    Changing above &default to &default_insert will insert the newly created\n    default value upon a missed lookup and act less surprising.\n\n    Other examples that caused confusion previously revolved around table of sets\n     or table of vectors and `add` or `+=` not working as expected.\n\n        tbl_of_vector[\"http\"] += 1\n        add tbl_of_set[\"http\"][1];\n\n6.1.0-dev.258 | 2023-08-03 07:18:21 +0100\n\n  * Do not forward padding to downstream TCP packet analyzer (Johanna Amann, Corelight)\n\n    This is similar to GH-3206. There do not seem to be practical\n    consequences - but we should still fix it.\n\n    This also includes the udp-testcase that was forgotten in GH-3206.\n\n6.1.0-dev.256 | 2023-08-02 10:11:22 -0700\n\n  * Rename magic __bro_plugin__ file to __zeek_plugin__ (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.254 | 2023-08-02 09:23:18 +0200\n\n  * GH-3122: UsageAnalyzer: Collect identifiers found in attributes as seeds (Arne Welzel, Corelight)\n\n    This marks every identifier used within an attribute as seeds. The scenario\n    this avoids is functions referenced through attributes on unused tables or\n    record types (&default, &expire_func, ...) being dinged as unused as\n    that's rather confusing.\n\n    Also adds test for the above and a light smoke test into language/ as it\n    doesn't appear we had coverage here.\n\n  * Force refresh of all CI docker images (Tim Wojtulewicz, Corelight)\n\n    There's something going on with the image cache on Cirrus where the images\n    are sometimes vanishing from the cache, thus causing builds to fail\n    because it can't load them. This forces a rebuild of all of the images,\n    thus refreshing the cached version of all of them.\n\n6.1.0-dev.250 | 2023-08-01 09:58:04 -0700\n\n  * Fix memory leak in script_opt's Expr code (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.248 | 2023-07-31 15:59:41 -0700\n\n  * Do not forward more than the remaining data to downstream UDP analyzer (Johanna Amann, Corelight)\n\n    This fixes a bug introduced in 2b9de839b0948c7de3eb5ed4a397194f96aae6b5\n    / GH-3080, which causes UDP padding to be sent to UDP based analyzers.\n\n    Fixes GH-3205.\n\n  * Force rebuild of windows CI image (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.243 | 2023-07-26 14:46:06 -0700\n\n  * increase BTest wait time to abide ZAM compilation times (Vern Paxson, Corelight)\n\n  * avoid script coverage overhead (especially memory) when using ZAM (Vern Paxson, Corelight)\n\n  * fixes for correctly tracking which functions have been fully inlined (Vern Paxson, Corelight)\n\n  * support for discarding ASTs once compiled via ZAM script optimization (Vern Paxson, Corelight)\n\n  * some code simplifications and streamlining (Vern Paxson, Corelight)\n\n6.1.0-dev.236 | 2023-07-25 10:23:47 -0700\n\n  * fix for installing identifiers for lambdas into the global scope (Vern Paxson, Corelight)\n\n6.1.0-dev.234 | 2023-07-25 09:36:27 -0700\n\n  * Better input framework error messages for unset non-optionals (Johanna Amann, Corelight)\n\n    The input framework currently gives a rather opaque error message when\n    encountering a line in which a required value is not provided. This\n    change updates this behavior; the error message now provides the record\n    element (or the name or the index element) which was not set in the\n    input data, even though it is required to be set by the underlying Zeek\n    type.\n\n6.1.0-dev.232 | 2023-07-25 09:34:54 -0700\n\n  * Fix script_opt/cpp test scripts to work correctly on all platforms (Tim Wojtulewicz)\n\n  * CPP code-gen: Use std::move for constructor arguments (Tim Wojtulewicz)\n\n  * CPP code-gen: Mark child classes final, remove final from function defs (Tim Wojtulewicz)\n\n6.1.0-dev.225 | 2023-07-20 09:23:33 -0700\n\n  * Print type of opaque instead of 'no value description' (Tim Wojtulewicz, Corelight)\n\n  * Add compiler flag to disable unknown pragma warnings on Windows (Tim Wojtulewicz, Corelight)\n\n    Without this flag you get a warning from every use of Type.h since it\n    contains a '#pramga GCC' for disabling a deprecation warning.\n\n6.1.0-dev.220 | 2023-07-17 16:35:06 -0700\n\n  * allow signature actions to be dynamically updated (Vern Paxson, Corelight)\n\n6.1.0-dev.218 | 2023-07-17 16:33:22 -0700\n\n  * more extensive ZAM inlining & compilation of lambdas (Vern Paxson, Corelight)\n\n  * fixes for ZAM compilation of switch statements (Vern Paxson, Corelight)\n\n  * fix for ZAM inlining failing to inline function call arguments (Vern Paxson, Corelight)\n\n  * avoid constructing TypeList's on-the-fly for ListVal's with fixed types (Vern Paxson, Corelight)\n\n  * -O gen-C++ fix for recent smart pointer changes (Vern Paxson, Corelight)\n\n  * minor BTest generalizations & simplifications (Vern Paxson, Corelight)\n\n  * fixes for compiling function calls that return non-error nil ValPtr's (Vern Paxson, Corelight)\n\n6.1.0-dev.207 | 2023-07-14 09:15:16 -0700\n\n  * -O gen-C++ fix for recent smart pointer changes (Vern Paxson, Corelight)\n\n  * -a cpp Btest baseline updates (Vern Paxson, Corelight)\n\n  * minor BTest generalizations & simplifications (Vern Paxson, Corelight)\n\n  * fixes for compiling function calls that return non-error nil ValPtr's (Vern Paxson, Corelight)\n\n6.1.0-dev.202 | 2023-07-12 17:29:26 +0200\n\n  * ci: Bust Ubuntu 22.10 image cache (Arne Welzel, Corelight)\n\n    Cirrus jobs failing to pull the image, try rebuilding.\n\n  * GH-2709: Support :: prefix to reference global namespace, deprecate GLOBAL:: (Arne Welzel, Corelight)\n\n6.1.0-dev.198 | 2023-07-11 16:16:56 -0700\n\n  * dce-rpc: Test cases for unbounded state growth (Arne Welzel, Corelight)\n\n    Pcaps produced as shown in #3145 using a samba container and rpcclient.\n\n  * dce-rpc: Handle smb2_close_request() in scripts (Arne Welzel, Corelight)\n\n    If there's a request to close a fid and it's in the dce_rpc_backing\n    table, remove it from there.\n\n  * smb/dce-rpc: Cleanup DCE-RPC analyzers when fid is closed and limit them (Arne Welzel, Corelight)\n\n    This patch does two things:\n\n    1) For SMB close requests, tear down any associated DCE-RPC\n       analyzer if one exists.\n\n    2) Protect from fid_to_analyzer_map growing unbounded by introducing a\n       new SMB::max_dce_rpc_analyzers limit and forcefully wipe the\n       analyzers if exceeded. Propagate this to script land as event\n       smb_discarded_dce_rpc_analyzers() for additional cleanup.\n\n    This is mostly to fix how the binpac SMB analyzer tracks individual\n    DCE-RPC analyzers per open fid. Connections that re-open the same or\n    different pipe may currently allocate unbounded number of analyzers.\n\n    Closes #3145.\n\n  * dce-rpc: Do not repeatedly register removal hooks (Arne Welzel, Corelight)\n\n    ...once should be enough.\n\n  * removed use of unnecessary member variable accessors for StmtList methods (Vern Paxson, Corelight)\n\n  * migrated some raw pointers to smart pointers (Vern Paxson, Corelight)\n\n6.1.0-dev.190 | 2023-07-07 09:56:56 -0700\n\n  * Remove unused state_label() method from ssl analyzer binpac files (Tim Wojtulewicz)\n\n  * Mark some overridden functions with override keyword (Tim Wojtulewicz)\n\n  * Use emplace_back over push_back where appropriate (Tim Wojtulewicz)\n\n  * packet_analysis: Define all plugin type as final (Tim Wojtulewicz)\n\n  * Use std::make_unique in one place instead of declaring unique_ptr directly (Tim Wojtulewicz)\n\n  * Avoid unnecessary type names in return statements (Tim Wojtulewicz)\n\n  * Simplify type trait usage (remove ::value usage) (Tim Wojtulewicz)\n\n  * A handful of int-to-bool conversions (Tim Wojtulewicz)\n\n  * Replace empty destructor bodies with =default definitions (Tim Wojtulewicz)\n\n  * Reduce amount of files passed to clang-tidy (Tim Wojtulewicz)\n\n6.1.0-dev.179 | 2023-07-07 11:45:53 +0200\n\n  * GH-3157: [Spicy] Support `switch` fields when exporting Spicy types to Zeek. (Robin Sommer, Corelight)\n\n6.1.0-dev.177 | 2023-07-06 11:34:38 +0200\n\n  * Fix for nested \"when\" statements leading to confusion over scoping (Vern Paxson, Corelight)\n\n6.1.0-dev.175 | 2023-07-06 09:27:03 +0200\n\n  * Define early_shutdown lambda earlier in zeek-setup, avoids build failure with gperftools (Tim Wojtulewicz)\n\n6.1.0-dev.172 | 2023-07-05 13:32:42 -0700\n\n  * Set `SPICY_BUILD_DIRECTORY` in `zeek-path-dev`. (Robin Sommer, Corelight)\n\n    Having this set allows running Spicy tests from inside\n    `auxil/spicy/tests`.\n\n6.1.0-dev.170 | 2023-07-05 13:32:21 -0700\n\n  * Update dump-events baseline, not running with OpenSSL 3 (Arne Welzel, Corelight)\n\n  * Conn: In-place val flip and connection_flipped() (Arne Welzel, Corelight)\n\n    Avoids loosing state on a connection value when a connection is flipped.\n\n    Fixes up the NTP baseline as well where this was visible: analyzer_confirmation_info()\n    was raised for a connection value which was immediately forgotten due to\n    the subsequent connection flipping.\n\n    Closed #3028\n\n  * Conn: Remove is_version_sep() (Arne Welzel, Corelight)\n\n    Leftover from 2655a653314237f5354fdb644bf642d0d5867f63.\n\n  * Remove icmp_conn leftovers (Arne Welzel, Corelight)\n\n    Roughly 2.5 years ago all events taking the ``icmp_conn`` parameter were\n    removed with 44ad614094db3c57fef7fb226c539f6f090a5421 and the NetVar.cc\n    type not populated anymore.\n\n    Remove the left-overs in script land, too.\n\n6.1.0-dev.164 | 2023-07-05 10:23:27 -0700\n\n  * Bump Spicy to latest release. (Benjamin Bannier, Corelight)\n\n    This is the `master` branch companion patch for `release/6.0`'s\n    d6ad7f56c56925c0b0b3f27e98eb13b66e956c8f.\n\n    Closes #3101.\n\n6.1.0-dev.161 | 2023-07-05 08:33:36 -0700\n\n  * Update binpac, bifcl, and broker submodules for funsigned-char change (Tim Wojtulewicz, Corelight)\n\n  * Add /J flag on Windows to force unsigned char (Tim Wojtulewicz, Corelight)\n\n  * Use -funsigned-char flag when building Zeek (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.157 | 2023-07-05 15:24:57 +0200\n\n  * GH-3136: global_ids(): Include module names (Arne Welzel, Corelight)\n\n    Ad-hoc include module names in the global_ids() table. Table values will\n    have the type_name field set to \"module\" and their key in the table is\n    prefixed with \"module \" to avoid clashes with existing global identifiers\n    shadowing module names (Management::Node being an existing example).\n\n  * Update package-manager submodule [nomail] (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.154 | 2023-06-30 17:32:17 +0200\n\n  * Update zeekjs submodule to 0.9.4 (Arne Welzel, Corelight)\n\n  * Fixup external hashes modified during merge (Arne Welzel, Corelight)\n\n6.1.0-dev.152 | 2023-06-30 10:19:19 +0200\n\n  * documentation updates (Vern Paxson, Corelight)\n\n  * updates to ZAM-specific BTest baseline (Vern Paxson, Corelight)\n\n  * Address PR review feedback on zam-feature-complete (Vern Paxson, Corelight)\n\n  * Updates to BTest baselines due to previous BTest tweaks (Vern Paxson, Corelight)\n\n  * tweaks to BTests for ZAM feature completeness; new ZAM-only btest (Vern Paxson, Corelight)\n\n  * removal of unused functionality and some follow-on simplifications (Vern Paxson, Corelight)\n\n  * feature completeness for ZAM (Vern Paxson, Corelight)\n\n  * -O gen-C++ tweaks to be compatible with ZAM changes (Vern Paxson, Corelight)\n\n  * ZAM support for \"when\" statements (Vern Paxson, Corelight)\n\n  * ZAM changes intermixed with lambda and \"when\" support (Vern Paxson, Corelight)\n\n  * WhenStmt/WhenInfo restructuring in support of ZAM \"when\" statements (Vern Paxson, Corelight)\n\n  * ZAM support for lambdas (Vern Paxson, Corelight)\n\n  * ZAM internals have a notion of \"captures\" as global-like variables (Vern Paxson, Corelight)\n\n  * AST profiling enhnacements in support of script optimization for lambdas/whens (Vern Paxson, Corelight)\n\n  * refinements to LambdaExpr's to provide flexibility, support for ZVal captures (Vern Paxson, Corelight)\n\n  * support in ScriptFunc class for ZVal-oriented vector of captures (Vern Paxson, Corelight)\n\n  * simplifications to the Frame class now that it no longer has to support old-style captures (Vern Paxson, Corelight)\n\n  * use Ingredients directly for constructing functions (Vern Paxson, Corelight)\n\n  * the \"Capture\" struct is now a class (Vern Paxson, Corelight)\n\n  * more debugging information when dumping script optimization data structures (Vern Paxson, Corelight)\n\n  * bug fixes for script optimization intermediate forms (Vern Paxson, Corelight)\n\n  * clarifying comments, interface tightening (Vern Paxson, Corelight)\n\n  * added some class accessors/set-ers (Vern Paxson, Corelight)\n\n  * Update doc submodule [nomail] [skip ci] (zeek-bot)\n\n6.1.0-dev.127 | 2023-06-29 11:22:58 -0700\n\n  * Move CMake template files to separate directory (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.125 | 2023-06-29 18:33:41 +0200\n\n  * Add test with MUD example (Arne Welzel, Corelight)\n\n    This came up as a use-case on GitHub showing the limitations of the\n    opinionated approach. Add it as an example.\n\n    Reference https://www.rfc-editor.org/rfc/rfc8520#section-9\n\n  * GH-3142: from_json: Support function to normalize key names (Arne Welzel, Corelight)\n\n    When a JSON document contains key names containing colons or other\n    special characters that are not valid in Zeek identifiers, from_json()\n    cannot be used to parse such input.\n\n    This change allows a customizable normalization function.\n\n6.1.0-dev.121 | 2023-06-27 12:18:38 -0700\n\n  * Prefer Spicy include directories of this build over accidental ones. (Benjamin Bannier, Corelight)\n\n    Closes #3153.\n\n6.1.0-dev.118 | 2023-06-27 18:17:40 +0200\n\n  * fix http AUTHORIZATION base64 decode failed (progmboy)\n\n6.1.0-dev.115 | 2023-06-21 17:45:35 -0700\n\n  * formatters/JSON: Make JSON::NullDoubleWriter use zeek::json::detail version (Arne Welzel, Corelight)\n\n    Not using inheritance and preferring composition to avoid including the\n    detail/json.h header do an indirection via a unique_ptr and then just\n    re-use the Double() implementation.\n\n  * formatters/JSON: Remove surrounding_braces (Arne Welzel, Corelight)\n\n    This seems to have become unused 4 years ago with 9b76e8faf44e90c41f33f24b18900a50f0840c5a,\n    remove it.\n\n  * formatters/JSON: Prepare to remove rapidjson from installed Zeek headers (Arne Welzel, Corelight)\n\n    threading/formatters/JSON.h currently includes rapidjson headers for declaring\n    the NullDoubleWriter. This appears mostly an internal detail, but\n    results in the situation that 1) we need to ship rapidjson headers with\n    the Zeek install tree and 2) taking care that external plugins are able\n    to find these headers should they include formatters/JSON.h.\n\n    There are currently no other Zeek headers that include rapidjson, so this\n    seems very unfortunate and self-inflicted given it's not actually required.\n\n    Attempt to hide this implementation detail with the goal to remove the\n    rapidjson includes with v7.1 and then also stop bundling and exposing\n    the include path to external plugins.\n\n    The NullDoubleWriter implementation moves into a new formatters/detail/json.h\n    header which is not installed.\n\n    Closes #3128\n\n6.1.0-dev.110 | 2023-06-21 15:36:32 -0700\n\n  * Update zeekjs submodule (Tim Wojtulewicz, Corelight)\n\n  * Update broker submodule (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.108 | 2023-06-21 15:33:50 -0700\n\n  * telemetry: Disable metrics centralization by default (Arne Welzel, Corelight)\n\n    Move the telemetry/cluster.zeek file over into policy/frameworks/telemetry/prometheus.zeek.\n\n    Mention it in local.zeek.\n\n    Relates to zeek/broker#366.\n\n6.1.0-dev.106 | 2023-06-21 15:33:24 -0700\n\n  * GSSAPI: basic support for MIC/WRAP tokens (Johanna Amann, Corelight)\n\n    When MIC/WRAP tokens are encountered, we now skip the message, instead\n    of raising a parse error. The data in the messages is encrypted - so it\n    does not seem work to raise an event at the moment.\n\n6.1.0-dev.104 | 2023-06-20 10:15:24 -0700\n\n  * CI: Force rebuild of tumbleweed VM to pick up newer version of python (Tim Wojtulewicz, Corelight)\n\n    The version of python included in the existing VM doesn't have the sqlite\n    module included for some reason. Forcing the VM to rebuild installs python311\n    which does include it, fixing a build failure.\n\n  * Stmt/Assert: Use std::move() for backtrace element (Arne Welzel, Corelight)\n\n6.1.0-dev.100 | 2023-06-15 21:13:46 -0700\n\n  * Update external testing hashes for 6.1 deprecation changes (Tim Wojtulewicz, Corelight)\n\n  * Remove leftover baseline files from 6.1 deprecation removal (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.96 | 2023-06-15 16:27:36 -0700\n\n  * Update dce-rpc constants (Tim Wojtulewicz, Corelight)\n\n  * Update external testing repo hashes to current master commits (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.93 | 2023-06-15 16:25:50 -0700\n\n  * -O gen-C++ refinements for BiF failures, negative vector indices, boolean vector operations (Vern Paxson, Corelight)\n\n6.1.0-dev.91 | 2023-06-15 14:21:03 -0700\n\n  * ZAM bug fix for incorrect management of global variables (Vern Paxson, Corelight)\n\n  * ZAM bug fix (simplification) for nested inline functions that don't do anything (Vern Paxson, Corelight)\n\n  * ZAM support for negative vector indices (Vern Paxson, Corelight)\n\n  * ZAM ignores new \"assert\" statement (Vern Paxson, Corelight)\n\n  * fixes for doing \"script validation\" to check for ZAM compile-ability (Vern Paxson, Corelight)\n\n  * tweak for Broker BTest that needs a delay for ZAM (Vern Paxson, Corelight)\n\n  * BTest to check for invalid negative vector indices (Vern Paxson, Corelight)\n\n6.1.0-dev.80 | 2023-06-15 12:15:29 -0700\n\n  * Force -std=c++17 mode for plugin targets, remove use of RequireCXX17.cmake (Tim Wojtulewicz, Corelight)\n\n  * Add Spicy updates to NEWS for 6.0. (Robin Sommer, Corelight)\n\n6.1.0-dev.76 | 2023-06-15 18:36:25 +0200\n\n  * plugin/Manager: Warn when plugin with the same name is found (Arne Welzel, Corelight)\n\n    This was brought up on Slack as a potential source of confusion during\n    development as it's not visible when plugin directories are ignored outside\n    of looking into the plugin debug stream. I'd actually prefer to just\n    FatalError() this, but a warning seems reasonably visible for interactive\n    usage.\n\n  * Options: Do not output full usage on --test error (Arne Welzel, Corelight)\n\n    ...mostly because the usage output is very long and the actual useful\n    error message scrolls off the screen.\n\n  * GH-3090: CMakeLists: Propagate DOCTEST defines to external plugins (Arne Welzel, Corelight)\n\n    If Zeek has not been built with doctest enabled then it's not easy\n    to run a plugin's tests (and if they really wanted to they could\n    again undef the DOCTEST_CONFIG_DISABLE and provide their own doctest\n    main() implementation.\n\n  * GH-3090: CMakeLists: Add rapidjson/include to zeek_dynamic_plugin_base (Arne Welzel, Corelight)\n\n    threading/formatters/JSON.h has a rapidjson include. Extend the\n    include directories of external plugins so they are setup to find\n    these in Zeek's install tree.\n\n  * GH-3090: ZeekPluginBootstrap: Encode Zeek's CMAKE_BUILD_TYPE (Arne Welzel, Corelight)\n\n    ...and bump cmake to have plugin's make use of it.\n\n6.1.0-dev.66 | 2023-06-14 10:09:46 -0700\n\n  * Change table initialization deprecation to error (Tim Wojtulewicz, Corelight)\n\n  * Remove 5.2 deprecation we missed (Tim Wojtulewicz, Corelight)\n\n  * Remove Supervisor::NodeConfig (6.1 deprecation) (Tim Wojtulewicz, Corelight)\n\n  * Remove LogAscii::logdir (6.1 deprecation) (Tim Wojtulewicz, Corelight)\n\n  * Make break/next/continue outside loops an error (6.1 deprecation) (Tim Wojtulewicz, Corelight)\n\n  * Remove analyzer_confirmation/analyzer_violation events (6.1 deprecation) (Tim Wojtulewicz, Corelight)\n\n  * Remove full scripts marked as 6.1 deprecations (Tim Wojtulewicz, Corelight)\n\n  * Remove script functions marked as unused (6.1 deprecations) (Tim Wojtulewicz, Corelight)\n\n  * Remove deprecations tagged for v6.1 (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.54 | 2023-06-14 18:55:27 +0200\n\n  * docker: Add libnode to enable JavaScript support (Arne Welzel, Corelight)\n\n  * docker: Bump images to Debian 12 (Arne Welzel, Corelight)\n\n6.1.0-dev.50 | 2023-06-14 09:25:58 -0700\n\n  * Fix usage of realpath on macOS, instead preferring grealpath (Tim Wojtulewicz, Corelight)\n\n  * Don't generate minimal tarball anymore (Tim Wojtulewicz, Corelight)\n\n  * NEWS: Fix enumeration in Breaking Changes (Arne Welzel, Corelight)\n\n6.1.0-dev.46 | 2023-06-14 12:59:41 +0200\n\n  * all: Fix typos identified by typos pre-commit hook (Arne Welzel, Corelight)\n\n  * NEWS typo fixes (Arne Welzel, Corelight)\n\n  * Start with a typos pre-commit file (Arne Welzel, Corelight)\n\n    Inspired by Spicy and me creating typos everywhere. Some of the\n    suggestions are also very reasonable.\n\n6.1.0-dev.42 | 2023-06-14 12:51:08 +0200\n\n  * NEWS: Small section about assert statement (Arne Welzel, Corelight)\n\n  * Stmt: Rework assertion hooks break semantics (Arne Welzel, Corelight)\n\n    Using break in either of the hooks allows to suppress the default reporter\n    error message rather than suppressing solely based on the existence of an\n    assertion_failure() handler.\n\n  * Stmt: Introduce assert statement and related hooks (Arne Welzel, Corelight)\n\n    including two hooks called assertion_failure() and assertion_result() for\n    customization and tracking of assertion results.\n\n  * ZeekArgs: Helper for empty arguments (Arne Welzel, Corelight)\n\n  * Reporter: Allow AssertStmt to throw InterpreterException (Arne Welzel, Corelight)\n\n  * Lift backtrace() code into Func.{h,cc} (Arne Welzel, Corelight)\n\n    This is to be re-used by the assertion facility.\n\n6.1.0-dev.32 | 2023-06-13 11:29:36 -0700\n\n  * Clarify subitem relationship in CMake configure summary. (Benjamin Bannier, Corelight)\n\n6.1.0-dev.30 | 2023-06-13 11:28:26 -0700\n\n  * tests: Do not use archiver_rotation_format_func as postprocessor (Arne Welzel, Corelight)\n\n    This test triggered ubsan by putting a function with the wrong type\n    as a post-processor into the .shadow file. Don't do that.\n\n    Likely Zeek should provide a better error message, but hand-crafting\n    .shadow files isn't what is normally done and this is to fix the\n    master build for now.\n\n6.1.0-dev.28 | 2023-06-13 17:33:31 +0200\n\n  * GH-3112: cluster/logger: Fix leftover-log-rotation in multi-logger setups (Arne Welzel, Corelight)\n\n    Populating log_metadata during zeek_init() is too late for the\n    leftover-log-rotation functionality, so do it at script parse time.\n\n    Also, prepend archiver_ to the log_metadata table and encoding function\n    due to being in the global namespace and to align with the\n    archiver_rotation_format_func. This hasn't been in a released\n    version yet, so fine to rename still.\n\n    Closes #3112\n\n  * cluster/logger: Fix global var reference (Arne Welzel, Corelight)\n\n6.1.0-dev.25 | 2023-06-12 15:27:20 -0700\n\n  * Update broker submodule [nomail] (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.23 | 2023-06-12 11:06:34 -0700\n\n  * Bump `auxil/spicy`. (Benjamin Bannier, Corelight)\n\n6.1.0-dev.19 | 2023-06-12 11:04:42 -0700\n\n  * test-all-policy: Do not load nodes-experimental/manager.zeek (Arne Welzel, Corelight)\n\n    Turns out loading this script in non-cluster mode uses Cluster::log()\n    and creates cluster.log in the external baselines saying \"cluster\n    started\". Do not load it into test-all-policy.zeek and instead rely\n    on the new test-all-policy-cluster.test to load it transitively\n    when running as manager for basic checking.\n\n  * cluster/main: Remove extra @if ( Cluster::is_enabled() ) (Arne Welzel, Corelight)\n\n    These have been discussed in the context of \"@if &analyze\" [1] and\n    am much in favor for not disabling/removing ~100 lines (more than\n    fits on a single terminal) out from the middle of a file. There's no\n    performance impact for having these handlers enabled unconditionally.\n    Also, any future work on \"@if &analyze\" will look at them again which\n    we could also skip.\n\n    This also reverts back to the behavior where the Cluster::LOG stream\n    is created even in non cluster setups like in previous Zeek versions.\n    As long as no one writes to it there's essentially no difference. If\n    someone does write to Cluster::LOG, I'd argue not black holing these\n    messages is better. Schema generators using Log::active_streams will\n    continue to discover Cluster::LOG even if they run in non-cluster\n    mode.\n\n    https://github.com/zeek/zeek/pull/3062#discussion_r1200498905\n\n6.1.0-dev.16 | 2023-06-12 10:56:55 -0700\n\n  * socks/dpd: Add newer auth methods (Arne Welzel, Corelight)\n\n    The IANA has allocated a few more authentication methods, minimally\n    extend the signature to catch those.\n\n  * socks/dpd: Fix socks5_server side signature (Arne Welzel, Corelight)\n\n    The server replies with \\x05 and identifier for the chosen method.\n    Not quite sure what the previous signature meant capture.\n\n    See also: https://datatracker.ietf.org/doc/html/rfc1928#section-3\n\n    Closes #3099.\n\n6.1.0-dev.13 | 2023-06-09 11:03:54 +0200\n\n  * ci/windows: choco --localonly is gone (Arne Welzel, Corelight)\n\n    choco 2.0 is now used after some caching changes on the Cirrus side [1]\n    and the --localonly flag is gone from choco [2], remove its usage.\n\n    [1] https://github.com/cirruslabs/cirrus-ci-docs/issues/1174#issuecomment-1580928673\n    [2] https://docs.chocolatey.org/en-us/guides/upgrading-to-chocolatey-v2-v6#the-list-command-now-lists-local-packages-only-and-the-local-only-and-lo-options-have-been-removed\n\n6.1.0-dev.8 | 2023-06-05 14:16:53 +0200\n\n  * Update zeekctl for pysubnetree/patricia upgrade (Tim Wojtulewicz, Corelight)\n\n  * Update link to slack in README.md (Tim Wojtulewicz, Corelight)\n\n6.1.0-dev.4 | 2023-05-31 13:48:49 -0700\n\n  * Update bifcl, binpac, and broker repos for cmake changes (Tim Wojtulewicz)\n\n  * bison_target argument changes from HEADER to DEFINES_FILE (Tim Wojtulewicz, Corelight)\n\n  * Update cmake submodule [nomail] (Tim Wojtulewicz, Corelight)\n\n  * Start of 6.1.0 development (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.683 | 2023-05-31 09:50:46 +0200\n\n  * Simplify code generated for Spicy analyzer port ranges. (Benjamin Bannier, Corelight)\n\n    We previously would reprent port ranges from EVT files element-wise.\n    This can potentially generate a lot of code (all on a single line\n    though) which some versions of GCC seem to have trouble with, and which\n    also causes JIT overhead.\n\n    With this patch we switch to directly representing ranges. Single ports\n    are represented as ranges `[start, start]`.\n\n    Closes #3094.\n\n  * catch-and-release: Mark cr_check_rule as is_used (Arne Welzel, Corelight)\n\n  * Add test-all-policy-cluster (Arne Welzel, Corelight)\n\n    After the introduction of @if ... analyze, a lot of warnings were\n    triggered due to nested @if and @if .. analyze usage.\n\n    Add a test for coverage of all policy scripts in cluster mode\n    for the usual node types so this does not happen again.\n\n6.0.0-dev.662 | 2023-05-26 20:51:43 +0200\n\n  * Update ZeekJS submodule to 0.9.1 (Arne Welzel, Corelight)\n\n6.0.0-dev.660 | 2023-05-26 10:03:29 +0200\n\n  * CMakeLists: Skip zeek-version.h include for zeek_objs, too (Arne Welzel, Corelight)\n\n    I've continued to see somewhat slower builds after Zeek version bumps. It\n    appears files covered by zeek_objs didn't have -DZEEK_CONFIG_SKIP_VERSION_H\n    set causing ccache invalidation after a version bump.\n\n  * Bump cluster testsuite to latest main (Arne Welzel, Corelight)\n\n6.0.0-dev.657 | 2023-05-25 19:49:20 -0700\n\n  * Fix minor type-clash warning on Windows (Tim Wojtulewicz)\n\n  * Fix Coverity warning involving object copy in TLS binpac code (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.654 | 2023-05-25 20:01:37 +0200\n\n  * Address wire/capture length feedback (Arne Welzel, Corelight)\n\n  * packet_analysis/TCP: Do not use untrusted len for DeliverPacket() (Arne Welzel, Corelight)\n\n    We should not be passing the untrusted TCP header length into\n    DeliverPacket(). Also, DeliverPacket() cap len parameter should\n    be the capture length of the packet, not remaining data.\n\n  * GH-2683: Add regression test using pcap from GH-2683 (Arne Welzel, Corelight)\n\n  * Add btest to test Geneve->VXLAN->Truncated inner packet (Tim Wojtulewicz, Corelight)\n\n  * IP: Update packet->len with accumulated fragment size (Arne Welzel, Corelight)\n\n    With packet->len representing the wire length and other places\n    relying on it, ensure it's updated for fragments as well. This\n    assumes non-truncated fragments right now. Otherwise we'd need\n    to teach the FragmentReassembler to somehow track this independently\n    but it would be a mess.\n\n  * UDP: Forward any remaining data (also empty) to session-analysis (Arne Welzel, Corelight)\n\n    The protocol analyzers are prepared to receive truncated data and\n    this way we give analyzers a chance to look at data. We previously\n    allowed empty data being passed: When len ended up 0 and remaining\n    was 0 too.\n\n  * IPTunnel: Compute inner wire length based on cap_len differences. (Arne Welzel, Corelight)\n\n  * IP: fix weird name to not be ipv6 specific (Tim Wojtulewicz, Corelight)\n\n  * UDP: don't validate checksum if caplen < len (Tim Wojtulewicz, Corelight)\n\n    This may happen with truncated packets and will cause asan builds to bail out\n    before the packet can be forwarded along. The TCP analyzer already has this\n    check, but it's missing for UDP.\n\n  * PIA: Modernize how struct initialization is done (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.643 | 2023-05-25 09:03:40 -0700\n\n  * btest.cfg: Set HILTI_CXX_COMPILER_LAUNCHER based on build/CMakeCache.txt (Arne Welzel, Corelight)\n\n    If CMakeCache.txt indicates the Zeek build was done with ccache,\n    take the CCACHE_PROGRAM:FILEPATH= line and populate the\n    HILTI_CXX_COMPILER_LAUNCHER environment.\n\n    For local development with ccache, this speeds up the spicy tests\n    significantly after the initial run without knowing or needing know\n    that setting HILTI_CXX_COMPILER_LAUNCHER would've helped.\n\n6.0.0-dev.641 | 2023-05-25 09:03:08 -0700\n\n  * Speed up Spicy-related tests. (Benjamin Bannier, Corelight)\n\n    This patch changes invocations of `spicyz` and similar Spicy tools in\n    tests which perform compilation to use debug mode via passing `-d`. This\n    in turn leads to Spicy compiling generated C++ code in debug as opposed\n    to release mode which typically seems to require less CPU time and RAM.\n    For a local test running with `btest -j 16` and no caching via\n    `HILTI_CXX_COMPILER_LAUNCER` this sped up running of BTests under\n    `spicy/` by about 40s on my machine (120s vs 160s).\n\n6.0.0-dev.636 | 2023-05-24 09:41:01 +0200\n\n  * stats: Add zeek-net-packet-lag-seconds metric (Arne Welzel, Corelight)\n\n  * GH-3060: Support negative index lookups for vectors (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.628 | 2023-05-23 19:32:05 +0200\n\n  * ci: Disable openh264 repository on tumbleweed (Arne Welzel, Corelight)\n\n6.0.0-dev.626 | 2023-05-23 17:34:43 +0200\n\n  * Bump cmake to fix build of multiple Spicy analyzers in a package. (Robin Sommer, Corelight)\n\n6.0.0-dev.624 | 2023-05-23 15:45:34 +0200\n\n  * GH-3071: Fix crashing when disable_analyzer() called on root analyzers (Arne Welzel, Corelight)\n\n6.0.0-dev.622 | 2023-05-22 16:38:56 -0700\n\n  * Revert part of previous CMake debug type fix (Tim Wojtulewicz)\n\n6.0.0-dev.620 | 2023-05-22 16:34:06 -0700\n\n  * btest/input/raw: Fix reread test (Arne Welzel, Corelight)\n\n    This seems to have relied on the reading file twice behavior simply\n    testing that 16 lines are observed. Switch to using two separate\n    files and doing a system(\"mv ...\") to trigger the REREAD logic, there's\n    not force_update() needed and it wouldn't do anything if the file\n    hadn't changed anyway.\n\n  * input/Raw: Avoid reading file twice in MODE_REREAD (Arne Welzel, Corelight)\n\n    Found while writing documentation and being confused why\n    all lines and end_of_data() arrive twice during startup.\n\n    The test is a bit fuzzy, but does fail reliably without\n    the changes to Raw.cc\n\n    Also fix not checking dev in the MODE_REREAD path.\n\n    Closes #3053\n\n6.0.0-dev.617 | 2023-05-22 10:14:27 +0200\n\n  * Fix CMAKE_BUILD_TYPE_LOWER definition-vs-use ordering problem (Christian Kreibich, Corelight)\n\n    It needs to be defined by the time we create zeek-config, which happens before\n    its current definition. To avoid a redundant TOLOWER when we check for presence\n    of --enable-debug at the beginning, this also switches this to a case-unadjusted\n    comparison to \"Debug\", which we use elsewhere in the file too.\n\n6.0.0-dev.614 | 2023-05-19 10:51:35 -0700\n\n  * Allow plugins to call find_package(Zeek) (Dominik Charousset)\n\n6.0.0-dev.611 | 2023-05-19 09:37:39 -0700\n\n  * files: Warn once for missing get_file_handle() (Arne Welzel, Corelight)\n\n    Repeating the message for every new call to get_file_handle() is not\n    very useful. It's pretty much an analyzer configuration issue so logging\n    it once should be enough.\n\n  * MIME: Re-use cur_entity_id for EndOfFile() (Arne Welzel, Corelight)\n\n    If DataIn() was called and a cur_entity_id (file_id) has been produced\n    previously, re-use it for calls to EndOfFile(). This avoids a costly\n    event_mgr.Drain() when we already have that information. It should be safer,\n    too, as `get_file_handle()` in script may generate a different ID and\n    thereby de-synchronizing.\n\n  * zeek-fuzzer-setup: Configure fake DNS (Arne Welzel, Corelight)\n\n    I'm not sure if we somehow set this for oss-fuzz through the environment,\n    but didn't find anything obvious.\n\n    Running oss-fuzz reproducers locally can triggers lookups to malware.hash.cymru.com\n    and potentially other domains due to loading local.zeek.\n\n  * SupportAnalyzer: Stop delivering to disabled parent analyzer (Arne Welzel, Corelight)\n\n    When the parent of a support analyzer has been disabled, short-circuit\n    delivering stream or packet data to it.\n\n    The specific scenario this avoids is the Content-Line analyzer continuing\n    to feed data lines into an disabled SMTP analyzer in turn creating more\n    events.\n\n    This is primarily useful for our fuzzing setup where data chunks up to 1MB\n    are generated and fed into the analyzer pipeline. In the real-world, chunk\n    sizes are usually bounded to packet size. Certain TCP reassembly constellations\n    may trigger these scenarios, however.\n\n    Closes #168\n\n  * Add length checking to ToRawPktHdrVal for truncated packets (Tim Wojtulewicz, Corelight)\n\n  * ftp: No unbounded directory command re-use (Arne Welzel, Corelight)\n\n    OSS-Fuzz generated traffic containing a CWD command with a single very large\n    path argument (427kb) starting with \".___/` \\x00\\x00...\", This is followed\n    by a large number of ftp replies with code 250. The directory logic in\n    ftp_reply() would match every incoming reply with the one pending CWD command,\n    triggering path buildup ending with something 120MB in size.\n\n    Protect from re-using a directory command by setting a flag in the\n    CmdArg record when it was consumed for the path traversal logic.\n\n    This doesn't prevent unbounded path build-up generally, but does prevent the\n    amplification of a single large command with very many small ftp_replies.\n    Re-using a pending path command seems like a bug as well.\n\n6.0.0-dev.605 | 2023-05-18 08:54:41 -0700\n\n  * Fix CMake ordering issue leaving configuration paths unset. (Robin Sommer, Corelight)\n\n6.0.0-dev.602 | 2023-05-17 16:10:57 +0200\n\n  * Add license header to zeek-config*.h and zeek-version.h (Arne Welzel, Corelight)\n\n  * Rename util-config.h to zeek-config-paths.h and install it (Arne Welzel, Corelight)\n\n    The util-config.h has never been installed previously. Skimming the history,\n    it was only meant for inclusion from util.cc, hence the name. Now that it's\n    included from some other headers, rename it to align with what it\n    contains and install it, too.\n\n  * Ensure spicyz/config.h is installed (Arne Welzel, Corelight)\n\n6.0.0-dev.598 | 2023-05-17 12:46:23 +0200\n\n  * Introduce environment variables to override more paths configured\n    into `spicyz` (`ZEEK_SPICY_DATA_PATH`, `ZEEK_SPICY_MODULE_PATH`).\n    (Robin Sommer, Corelight).\n\n  * Fix an ordering issue in Spicy support's CMake config. This led to\n    variables left unset inside the subdirectory. (Robin Sommer,\n    Corelight)\n\n6.0.0-dev.595 | 2023-05-17 10:36:22 +0200\n\n  * Fix get_active_node_count for node types not present. (Jan Grashoefer, Corelight)\n\n6.0.0-dev.592 | 2023-05-17 09:02:09 +0200\n\n  * zeekygen: Render function parameters as :param x: instead of :x: (Arne Welzel, Corelight)\n\n    We're currently rendering parameter descriptions from .bif file into\n    the .rst as follows:\n\n        :cid: The connection identifier.\n\n        :aid: The analyzer ID.\n\n    Switch this to :param cid: instead so that we can have Sphinx deal with\n    this as param docfield and group all parameters into a single section.\n\n    Currently, having the bare :cid: style causes sphinx to treat it as an\n    unknown field type, capitalize it and render it.\n\n6.0.0-dev.589 | 2023-05-16 12:15:07 +0200\n\n  * Move Spicy submodule from `auxil/spicy/spicy` to `auxil/spicy`.\n    (Robin Sommer, Corelight)\n\n6.0.0-dev.587 | 2023-05-16 11:40:40 +0200\n\n  * Integrate Spicy plugin into Zeek proper. (Robin Sommer, Corelight)\n\n    The plugin code is now a part of Zeek, located inside the standard\n    `src/` tree. Going forward, we will maintain it here and phase out\n    the external plugin.\n\n    The integration reflects the `spicy-plugin` code as of\n    `d8c296b81cc2a11`.\n\n    In addition to moving the code into Zeek's source tree, this comes\n    with a couple small functional changes:\n\n    - `spicyz` no longer tries to infer if it's running from the build\n      directory. Instead `ZEEK_SPICY_LIBRARY` can be set to a custom\n      location. `zeek-set-path.sh` does that now.\n\n    - ZEEK_CONFIG can be set to change what `spicyz -z` print out. This is\n      primarily for backwards compatibility.\n\n    The minimum Spicy version is now 1.8 (i.e., current `main` branch\n    at the time of merge).\n\n    For now, this all remains backwards compatible with the current\n    `zkg` analyzer templates so that they work with both external and\n    integrated Spicy support. Later, once we don't need to support any\n    external Spicy plugin versions anymore, we can clean up the\n    templates as well.\n\n  * Add `zkg_provides` to `--build-info`. (Robin Sommer, Corelight)\n\n    This makes dependencies explicit that Zeek provides built-in for\n    `zkg`. It's in support of\n    https://github.com/zeek/package-manager/pull/157.\n\n    For now, `zkg_provides` contains the same data as `included_plugins`\n    plus an entry for `spicy-plugin`.\n\n  * Fix Spicy tuple type conversion. (Robin Sommer, Corelight)\n\n    With an anonymous Spicy-side tuple type, we'd be missing an ID to\n    create a Zeek-side record, leading to undefined behavior. To still\n    support this case, we now make up an ID. In addition, we also could\n    end up not correctly tracking type ID during conversion; using a stack\n    now to handle recursion correctly.\n\n  * Fix generation of Spicy's file IDs. (Robin Sommer, Corelight)\n\n    They weren't stable, and potentially repetitive.\n  * Modernize plugin test. (Robin Sommer, Corelight)\n\n    Not using the `zeek/` include style could lead to path problems.\n\n6.0.0-dev.570 | 2023-05-12 23:29:09 +0200\n\n  * Introduce ZEEK_SEED_VALUES environment variable (Arne Welzel, Corelight)\n\n    For \"individually different but deterministic\" runs specifying Zeek's\n    seed as an environment variable eases setups as one can avoid creating\n    extra seed files for each of the individual processes.\n\n    It is an error to specify the new ZEEK_SEED_VALUES variable together\n    with the existing ZEEK_SEED_FILE and -G. ZEEK_SEED takes precedence over\n    deterministic mode (-D) like ZEEK_SEED_FILE does today already.\n\n6.0.0-dev.568 | 2023-05-12 13:41:55 -0700\n\n  * enhancements for event-tracing: (Vern Paxson, Corelight)\n      - reporting of potentially sensitive constants\n      - tracking of unsupported types enabling hand-editing to fix them\n      - fixed generation of \"unspecified\" aggregates\n      - fixed generation of IPv6 constants\n      - fixed generation when running without a packet source\n\n6.0.0-dev.563 | 2023-05-12 10:01:42 -0700\n\n  * Fix memory leak caused by pattern compilation failure (mAsk°)\n\n6.0.0-dev.559 | 2023-05-11 15:01:44 +0100\n\n  * Add DTLSv1.3 support (Johanna Amann, Corelight)\n\n    DTLSv1.3 changes the DTLS record format, introducing a completely new\n    unified header - which is a first for DTLS.\n\n    In case connection IDs are used, parsing of the unified header\n    is skipped. This is due to the fact, that the header then contains a\n    variable length element, with the length of the element not given in the\n    header. Instead, the length is given in the client/server hello message\n    of the opposite side of the connection (which we might have missed).\n\n    Furthermore, parsing is not of a high importance, since we are not\n    passing the connection ID, or any of the other parsed values of the\n    unified header into scriptland.\n\n  * SSL: Fix logging of Hello Retry Requests (Johanna Amann, Corelight)\n\n    It turns out that we never logged hello retry requests correctly in the\n    ssl_history field.\n\n    Hello retry requests are (in their final version) signaled by a specific\n    random value in the server random.\n\n    This commit fixes this oversight, and hello retry requests are now\n    correctly logged as such.\n\n  * remote_event_ts_compat: Fix NETWORK_TIMESTAMP to NetworkTimestamp (Arne Welzel, Corelight)\n\n6.0.0-dev.551 | 2023-05-11 14:00:31 +0200\n\n  * Add compatibility tests for timestamped events. (Jan Grashoefer, Corelight)\n\n    This adds compatibility tests for receiving non-timestamped events as\n    well as providing timestamps via broker websockets.\n\n  * Add timestamps to auto published broker events. (Jan Grashoefer, Corelight)\n\n  * Add timestamps to manually published broker events. (Jan Grashoefer, Corelight)\n\n  * Annotate scheduled events with intended timestamp. (Jan Grashoefer, Corelight)\n\n  * Add timestamp to events. (Jan Grashoefer, Corelight)\n\n6.0.0-dev.544 | 2023-05-11 00:01:20 +0200\n\n  * GH-3028: policy/community-id: Do not use new_connection() (Arne Welzel, Corelight)\n\n    Issue #3028 tracks how a flipped connections reset a connection's value\n    including any state set during new_connection(). For the time being,\n    update community-id functionality back to the original connection_state_remove()\n    approach to avoid missing community_ids on flipped connections.\n\n6.0.0-dev.541 | 2023-05-10 23:16:24 +0200\n\n  * testing/zeek-version-link: Assume nm is there (Arne Welzel, Corelight)\n\n  * Drop dependency for zeek_dynamic_plugin_base (Dominik Charousset, Corelight)\n\n  * Fixup ifdef check in Plugin.h (Arne Welzel, Corelight)\n\n  * Update cmake_minimum_required() in test plugins (Arne Welzel, Corelight)\n\n  * testing: Add zeek-version-link tests (Arne Welzel, Corelight)\n\n  * Clean up ZEEK_CONFIG_SKIP_VERSION_H issues (Dominik Charousset, Corelight)\n\n6.0.0-dev.533 | 2023-05-09 13:38:37 -0700\n\n  * core.network_time.broker: Test reliability improvement (Arne Welzel, Corelight)\n\n    I wasn't able to reproduce this locally, but after looking at\n    -B main-loop,tm for a bit it dawned that if the manager is sending\n    ticks too fast, the Broker IO source may consume two ticks in one go\n    before expiring timers and that would explain the observed baseline\n    differences.\n\n    Solve this by removing the reliance on realtime delays and switch to\n    a request-reply pattern instead.\n\n6.0.0-dev.531 | 2023-05-09 13:38:15 -0700\n\n  * ci: Add public-ecr-vacuum.sh (Arne Welzel, Corelight)\n\n6.0.0-dev.529 | 2023-05-09 12:54:28 -0700\n\n  * Updating submodule(s) [nomail] (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.527 | 2023-05-09 19:11:00 +0200\n\n  * GH-2930: zeek.bif: Add log2() and ceil() (Arne Welzel, Corelight)\n\n6.0.0-dev.525 | 2023-05-09 09:05:51 -0700\n\n  * Use the same rules as cmake submodule to reformat Zeek (Tim Wojtulewicz, Corelight)\n\n  * Update cmake submodule after reformat (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.522 | 2023-05-09 15:19:43 +0200\n\n  * cluster/supervisor: Multi-logger awareness (Arne Welzel, Corelight)\n\n    When multiple loggers are configured in a Supervisor controlled cluster\n    configuration, encode extra information into the rotated filename to\n    identify which logger produced the log.\n\n    This is similar to the approach taken for ZeekControl, re-using the\n    log_suffix terminology, but as there's only a single zeek-archiver\n    process and no postprocessors and no other side-channel for additional\n    information, we encode extra metadata into the filename. zeek-archiver\n    is extended to recognize the special metadata part of the filename.\n\n    This also solves the issue that multiple loggers in a supervisor setup\n    overwrite each others log files within a single log-queue directory.\n\n  * Bump zeek-archiver submodule (Arne Welzel, Corelight)\n\n6.0.0-dev.519 | 2023-05-09 11:03:32 +0200\n\n  * Fixup Val.h/Val.cc: Actually move ValFromJSON into zeek::detail (Arne Welzel, Corelight)\n\n6.0.0-dev.518 | 2023-05-09 10:19:46 +0200\n\n  * Implement from_json bif (Fupeng Zhao)\n\n6.0.0-dev.516 | 2023-05-05 14:08:15 -0700\n\n  * BTest baseline updates for -O gen-C++ (Vern Paxson, Corelight)\n\n  * updates to C++ maintenance scripts to better handle uncompilable BTests (Vern Paxson, Corelight)\n\n  * added ZEEK_REPORT_UNCOMPILABLE environment variable for \"-O report-uncompilable\" (Vern Paxson, Corelight)\n\n  * BTest baseline updates for ZAM (Vern Paxson, Corelight)\n\n6.0.0-dev.511 | 2023-05-05 21:04:11 +0200\n\n  * Revert \"Skip version.h by default for Zeek sources\" (Arne Welzel, Corelight)\n\n    This reverts commit 8246baf25c692b658e7a39527f6652e37f5b5095.\n\n    Actually fails the include_plugins CI test and I had just\n    opened another related issue.\n\n6.0.0-dev.510 | 2023-05-05 20:14:21 +0200\n\n  * Skip version.h by default for Zeek sources (Dominik Charousset, Corelight)\n\n6.0.0-dev.508 | 2023-05-05 08:48:10 -0700\n\n  * generate-docs: Only update submodule pointer during scheduled builds (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.505 | 2023-05-04 20:08:33 +0200\n\n  * GH-2998: NTP: Detect out-of-order packets (Arne Welzel, Corelight)\n\n    The NTP mode provides us with the identity of the endpoints. For the\n    simple CLIENT / SERVER modes, flip the connection if we detect\n    orig/resp disagreeing with what the message says. This mainly\n    results in the history getting a ^ and the ntp.log / conn.log\n    showing the corrected endpoints.\n\n6.0.0-dev.503 | 2023-05-04 10:56:33 -0700\n\n  * Include compiler in --show-config output (Dominik Charousset, Corelight)\n\n  * Fix CMake option defaults on Windows (Dominik Charousset, Corelight)\n\n  * Move build defaults from configure to CMake (Dominik Charousset, Corelight)\n\n    Moving the defaults for build variables from the `configure` script to\n    `CMakeLists.txt` gives the same default behavior on platforms where the\n    `configure` script is not available (Windows) and also allows a pure\n    CMake-based work flow (e.g., the standard `cmake -S . -B build`) without\n    having to manually adjust the defaults.\n\n    The `configure` script also becomes much simpler as a result.\n\n6.0.0-dev.498 | 2023-05-04 09:30:18 +0200\n\n  * scripts/smb2-main: Reset script-level state upon smb2_discarded_messages_state() (Arne Welzel, Corelight)\n\n    This is similar to what the external corelight/zeek-smb-clear-state script\n    does, but leverages the smb2_discarded_messages_state() event instead of\n    regularly checking on the state of SMB connections.\n\n    The pcap was created using the dperson/samba container image and mounting\n    a share with Linux's CIFS filesystem, then copying the content of a\n    directory with 100 files. The test uses a BPF filter to imitate mostly\n    \"half-duplex\" traffic.\n\n  * smb2: Limit per-connection read/ioctl/tree state (Arne Welzel, Corelight)\n\n    Users on Slack observed memory growth in an environment with a lot of\n    SMB traffic. jeprof memory profiling pointed at the offset and fid maps\n    kept per-connection for smb2 read requests.\n\n    These maps can grow unbounded if responses are seen before requests, there's\n    packet drops, just one side of the connection is visible, or we fail to parse\n    responses properly.\n\n    Forcefully wipe out these maps when they grow too large and raise\n    smb2_discarded_messages_state() to notify script land about this.\n\n6.0.0-dev.493 | 2023-05-03 11:13:15 -0700\n\n  * Update Mozilla CA and Google CT lists (Johanna Amann, Corelight)\n\n6.0.0-dev.491 | 2023-05-03 09:31:36 -0700\n\n  * Surround string assignments in zeek-config in quotes (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.489 | 2023-05-03 09:31:19 -0700\n\n  * Remove parser error message for bro_init, et al (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.487 | 2023-05-03 09:30:55 -0700\n\n  * Add additional length check to IEEE 802.11 analyzer (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.484 | 2023-05-03 14:18:03 +0100\n\n  * SSL: do not try to disable failed analyzer (Johanna Amann, Corelight)\n\n    Currently, if a TLS/DTLS analyzer fails with a protocol violation, we\n    will still try to remove the analyzer later, which results in the\n    following error message:\n\n    error: connection does not have analyzer specified to disable\n\n    Now, instead we don't try removing the analyzer anymore, after a\n    violation occurred.\n\n6.0.0-dev.480 | 2023-05-02 20:28:55 +0200\n\n  * ip4_hdr: Add DF, MF, offset and sum fields (Arne Welzel, Corelight)\n\n    For low-level packet analysis use-cases, these fields are currently\n    not script-land accessible via raw_packet() or so. They are accessible\n    on the icmp_context record, but not on the actual ip4_hdr record, so\n    add them.\n\n  * GH-2991: unload: Fix unloading of packages (Arne Welzel, Corelight)\n\n    @ynadji found that unloading packages doesn't work due to @unload not\n    resolving the __load__.zeek file within a directory like @load does.\n\n    Fixes #2991\n\n6.0.0-dev.476 | 2023-05-02 11:12:44 -0700\n\n  * Use workaround for setvbuf on Windows in DebugLogger/Extract file analyzer (Tim Wojtulewicz)\n\n  * Add ifdef'd implementation of setvbuf to zeek::util (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.473 | 2023-05-02 09:42:19 -0700\n\n  * Fix smith-waterman sorting to follow correct Compare semantics (Tim Wojtulewicz)\n\n6.0.0-dev.470 | 2023-04-28 16:33:46 -0700\n\n  * CI: Automatically update opensuse-tumbleweed (Tim Wojtulewicz, Corelight)\n\n  * CI: Remove Fedora 36, add Fedora 38 (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.467 | 2023-04-28 10:01:13 +0200\n\n  * GH-2791: pcap/Source: Allow more than 32bit for link and dropped stats (Arne Welzel, Corelight)\n\n    The PktSrc::Stats object works with 64bit unsigned integers. Unfortunately,\n    libpcap's struct pcap_stat is using 32bit values and users have reported\n    the wrapping of these values being visible in their stats.log roughly every\n    7.5 hours (~160kpps).\n\n    This change moves tracking of link and drop counters into the PktSrc::Stats\n    object (like is done for received and bytes_received) and updates them\n    on a call to PcapSource::Statistics() with the difference to the\n    previous stats values to prevent the wrap from becoming visible to\n    script land.\n\n    This doesn't cover the case of the stats counters wrapping around multiple\n    times between two invocations of PktSrc::Statistics(). With the default\n    interval of 5 minutes for the stats script, this seems acceptable.\n\n    Closes #2791.\n\n  * record_fields: Include information about optionality of fields (Arne Welzel, Corelight)\n\n    This was reported as a wish for log schema generation, so add it...\n\n  * Fix a few warnings from recent changes (Tim Wojtulewicz)\n\n6.0.0-dev.461 | 2023-04-28 09:37:08 +0200\n\n  * Simplify btests using cluster_started event. (Jan Grashoefer, Corelight)\n\n6.0.0-dev.457 | 2023-04-27 11:25:45 -0700\n\n  * Modify Windows test cmd file to actually run tests (Tim Wojtulewicz)\n\n  * Add template file and cmake call for zeek-path setup on Windows (Tim Wojtulewicz)\n\n6.0.0-dev.453 | 2023-04-27 13:22:43 +0200\n\n  * Revert putting plugins into a fresh scope for now (Dominik Charousset, Corelight)\n\n  * Propagate zeek-version.h skip via CMake properties (Dominik Charousset, Corelight)\n\n    Add a define for `ZEEK_CONFIG_SKIP_VERSION_H` to static plugins as well\n    as to dynamic plugins that we build alongside Zeek. When including\n    `zeek-config.h` with this macro defined, the header skips including\n    `zeek-version.h`.\n\n6.0.0-dev.449 | 2023-04-27 12:16:46 +0200\n\n  * Bump zeekctl to multi-logger version (Arne Welzel, Corelight)\n\n  * logging: Support rotation_postprocessor_command_env (Arne Welzel, Corelight)\n\n    This new table provides a mechanism to add environment variables to the\n    postprocessor execution. Use case is from ZeekControl to inject a suffix\n    to be used when running with multiple logger.\n\n6.0.0-dev.445 | 2023-04-27 09:08:45 +0200\n\n  * Update ZeekJS submodule to 0.9.0 (Arne Welzel, Corelight)\n\n    * Performance improvements for the Redis Log::log_stream_policy example\n      around PortVal wrapping and caching field offsets for property lookups.\n    * Debug output is now channeled through PLUGIN_DBG_LOG() and available via\n      zeek -B plugin-Zeek-JavaScript instead of unconditionally on stderr.\n    * Reduced CMake output when Node.js isn't found\n\n6.0.0-dev.443 | 2023-04-26 12:42:48 -0700\n\n  * extend ZEEK_PROFILER_FILE profiling to include summaries for functions/hooks/event handlers (Vern Paxson, Corelight)\n\n6.0.0-dev.441 | 2023-04-26 15:37:59 +0200\n\n  * Update AF-Packet submodule (Arne Welzel, Corelight)\n\n    Include Tim's cleanup and modernization fixes, too.\n\n  * Update AF-Packet submodule (Arne Welzel, Corelight)\n\n    * Mask VLAN ID from tp_vlan_tci field to fix vlan > 4095 reported by Zeek\n      when PCP and/or DEI bits are set.\n    * Descriptive error message when interface is down. Instead of\n      \"Invalid argument\", Zeek now reports \"interface is down\".\n\n6.0.0-dev.437 | 2023-04-25 13:07:57 -0700\n\n  * Update docs and NEWS to include LLC, SNAP, and Novell packet analyzers (Tim Wojtulewicz)\n\n  * Fix length checks in VLAN/Ethernet analyzers for non-ethertype protocols (Tim Wojtulewicz, Corelight)\n\n  * Add forwarding from VLAN analyzer into LLC, SNAP, and Novell 802.3 analyzers (Tim Wojtulewicz, Corelight)\n\n  * Remove non-standard way of forwarding out of the Ethernet analyzer (Tim Wojtulewicz, Corelight)\n\n  * Add basic LLC, SNAP, and Novell 802.3 packet analyzers (Tim Wojtulewicz, Corelight)\n\n  * ARP: add support for IEEE802 hardware type (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.430 | 2023-04-25 11:37:44 -0700\n\n  * Merge branch 'topic/timw/2167-aruba-expansion' (Tim Wojtulewicz)\n\n    * topic/timw/2167-aruba-expansion:\n      Add NEWS entry about 802.11 and ARUBA changes\n      Remove workaround for tunnels from IEEE 802.11 analyzer\n      PPP in the GRE analyzer is actually PP*T*P\n      Add support for 802.11 A-MSDU aggregates\n      Fix IEEE 802.11 analyzer to properly forward tunneled packets\n      Fix IEEE 802.11 analyzer to skip packets with the Protected bit enabled\n      Expand support for Aruba protocol types in GRE analyzer\n      Default tunnel_type in iosource::Packet to NONE\n\n  * Add NEWS entry about 802.11 and ARUBA changes (Tim Wojtulewicz)\n\n  * Remove workaround for tunnels from IEEE 802.11 analyzer (Tim Wojtulewicz, Corelight)\n\n  * PPP in the GRE analyzer is actually PP*T*P (Tim Wojtulewicz, Corelight)\n\n  * Add support for 802.11 A-MSDU aggregates (Tim Wojtulewicz, Corelight)\n\n  * Fix IEEE 802.11 analyzer to properly forward tunneled packets (Tim Wojtulewicz, Corelight)\n\n    This mostly happens with Aruba, but could possibly happen with other tunnels too.\n\n  * Fix IEEE 802.11 analyzer to skip packets with the Protected bit enabled (Tim Wojtulewicz, Corelight)\n\n  * Expand support for Aruba protocol types in GRE analyzer (Tim Wojtulewicz, Corelight)\n\n    This also fixes the GRE analyzer to forward into the IEEE 802.11 analyzer\n    if it encounters Aruba packets with the proper protocol types. This way\n    the QoS header can be handled correctly.\n\n  * Default tunnel_type in iosource::Packet to NONE (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.421 | 2023-04-25 12:39:01 +0200\n\n  * Given the -C flag, set script-layer ignore_checksums to true. (Christian Kreibich, Corelight)\n\n  * Remove references to bro_broker in broker/Manager.h (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.416 | 2023-04-24 18:22:27 +0200\n\n  * Add irc_dcc_send_ack event and fix missing fields (Fupeng Zhao)\n\n6.0.0-dev.414 | 2023-04-24 14:36:32 +0200\n\n  * cmake: Fixup BRO_PLUGIN_INSTALL_PATH references (Arne Welzel, Corelight)\n\n    Commit 19cbb328a9b4598b71e0aa092bf8a03732da8d63 removed setting of\n    BRO_PLUGIN_INSTALL_PATH in favor of ZEEK_PLUGIN_DIR. Replace left-over\n    references the former.\n\n6.0.0-dev.412 | 2023-04-24 10:33:29 +0200\n\n  * Fix install directory for plugins (Dominik Charousset, Corelight)\n\n6.0.0-dev.410 | 2023-04-24 09:46:59 +0200\n\n  * policy: Import zeek-community-id scripts into protocols/conn frameworks/notice (Christian Kreibich, Corelight)\n\n  * Add community_id_v1() based on corelight/zeek-community-id (Christian Kreibich, Corelight)\n\n    \"Community ID\" has become an established flow hash for connection correlation\n    across different monitoring and storage systems. Other NSMs have had native\n    and built-in support for Community ID since late 2018. And even though the\n    roots of \"Community ID\" are very close to Zeek, Zeek itself has never provided\n    out-of-the-box support and instead required users to install an external plugin.\n\n    While we try to make that installation as easy as possible, an external plugin\n    always sets the bar higher for an initial setup and can be intimidating.\n    It also requires a rebuild operation of the plugin during upgrades. Nothing\n    overly complicated, but somewhat unnecessary for such popular functionality.\n\n    This isn't a 1:1 import. The options are parameters and the \"verbose\"\n    functionality  has been removed. Further, instead of a `connection`\n    record, the new bif works with `conn_id`, allowing computation of the\n    hash with little effort on the command line:\n\n        $ zeek -e 'print community_id_v1([$orig_h=1.2.3.4, $orig_p=1024/tcp, $resp_h=5.6.7.8, $resp_p=80/tcp])'\n        1:RcCrCS5fwYUeIzgDDx64EN3+okU\n\n    Reference: https://github.com/corelight/zeek-community-id/\n\n6.0.0-dev.405 | 2023-04-24 09:23:01 +0200\n\n  * file_analysis/Manager: Remove RunState.h include (Arne Welzel, Corelight)\n\n    The file_analysis/Manager.h header only needs run_state::terminating, so\n    declare just that similar to what Val.h does. This breaks ZBody compilation\n    due to OP_READING_LIVE_TRAFFIC_V and OP_READING_TRACES_V accessing\n    run-state::reading_live and run_state::reading_traces. Add the include to\n    ZBody.cc as a fix.\n\n    This may break external plugins, too, but then they didn't have the\n    right includes setup to begin with.\n\n6.0.0-dev.402 | 2023-04-21 14:04:52 -0700\n\n  * Update NEWS to cover cluster framework changes. (Jan Grashoefer, Corelight)\n\n  * Add cluster_started restart tests. (Jan Grashoefer, Corelight)\n\n  * Add basic cluster_started tests. (Jan Grashoefer, Corelight)\n\n  * Add cluster_started and node_fully_connected events. (Jan Grashoefer, Corelight)\n\n  * Add hook into cluster connection setup. (Jan Grashoefer, Corelight)\n\n  * Add broadcast_topics set. (Jan Grashoefer, Corelight)\n\n  * Generalize Cluster::worker_count. (Jan Grashoefer, Corelight)\n\n6.0.0-dev.394 | 2023-04-20 16:03:45 -0700\n\n  * Edit pass over the current 6.0 NEWS entries. (Christian Kreibich, Corelight)\n\n  * Update doc submodule [nomail] [skip ci] (zeek-bot)\n\n6.0.0-dev.391 | 2023-04-19 19:48:50 +0200\n\n  * zeek.bif: Remove cat_sep() fully var_arg changes (Arne Welzel, Corelight)\n\n    These were introduced to better catch type violations at runtime. With\n    bifcl doing these checks, revert to a better documented version.\n\n  * GH-2935: broker/messaging: Runtime type checks for pool (Arne Welzel, Corelight)\n\n    publish_hrw() and publish_rr() are excluded from type checking due to their\n    variadic nature. Passing a wrong type for the pool argument previously triggered\n    an abort, now the result is runtime errors. This isn't great, but it's\n    better than crashing Zeek.\n\n    Closes #2935\n\n  * bifcl: Bump for runtime-type checks in var_arg bifs (Arne Welzel, Corelight)\n\n6.0.0-dev.387 | 2023-04-19 09:01:32 -0700\n\n  * Add call stacks to script profiler output (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.385 | 2023-04-19 11:58:09 +0200\n\n  * different fix for MSVC compiler issues (Vern Paxson, Corelight)\n\n  * more general approach for addressing MSVC compiler issues with IntrusivePtr (Vern Paxson, Corelight)\n\n  * restored RecordType::Create, now marked as deprecated (Vern Paxson, Corelight)\n    tidying of namespaces and private class members\n    simplification of flagging record field initializations that should be skipped\n    address peculiar MSVC compilation complaint for IntrusivePtr's\n\n  * clarifications and tidying for record field initializations (Vern Paxson, Corelight)\n\n  * optimize record construction by deferring initializations of aggregates (Vern Paxson, Corelight)\n\n  * compile-scripts-to-C++ speedups by switching to raw record access (Vern Paxson, Corelight)\n\n  * logging speedup by switching to raw record access (Vern Paxson, Corelight)\n\n  * remove redundant record coercions (Vern Paxson, Corelight)\n\n6.0.0-dev.376 | 2023-04-19 10:14:02 +0200\n\n  * Improve CMake variables, update cmake submodule (Dominik Charousset, Corelight)\n\n  * Fix builds with plugins that use zeek-config (Dominik Charousset, Corelight)\n\n    When building plugins externally with `zeek-config` (as opposed to using\n    `ZEEK_DIST`), they point into the install prefix. There, we add a new\n    file `ZeekPluginBootstrap.cmake` that helps `ZeekPlugin.cmake` to find\n    everything else it needs from there.\n\n    Our template for plugins generates a `configure` script that sets\n    various variables with values from `zeek-config`. We only need\n    `BROKER_ROOT_DIR` with the new bootstrapping logic. Everything else, we\n    can get from the new bootstrapping file and from the CMake package file\n    for Zeek.\n\n6.0.0-dev.373 | 2023-04-18 11:11:44 -0700\n\n  * log-caching-cluster: Wait for X509::known_log_certs to populate (Arne Welzel, Corelight)\n\n    The known_log_certs table is populated asynchronously via broker after a\n    Broker::peer_added. It may take a variable amount of time depending on where\n    we run this test and it has been observed flaky specifically for the\n    arm_debian11 task. Instead of racing, give worker-2 3 seconds for receiving\n    the expected table content before continuing.\n\n    Fixes #2885\n\n6.0.0-dev.371 | 2023-04-14 13:02:35 +0200\n\n  * ci/debian-11: Install libnode-dev, too (Arne Welzel, Corelight)\n\n    Debian 11 doesn't have a new enough libnode version, so JavaScript\n    should not be attempted to be built.\n\n  * CMakeLists: Convert string append to list append (Arne Welzel, Corelight)\n\n    Seems the builtin plugins started with string(APPEND ...) and that\n    was copied over. Make it list(APPEND ...) instead.\n\n  * Add experimental JavaScript support when libnode is available (Arne Welzel, Corelight)\n\n        zeek.on('zeek_init', () => {\n            console.log('Hello, Zeek!');\n        });\n\n    For interaction with external systems and HTTP APIs, JavaScript and the\n    Node.js ecosystem beat Zeek script. Make it more easily accessible by\n    including ZeekJS with Zeek directly.\n\n    When a recent enough libnode version is found on the build system, ZeekJS is\n    added as a builtin plugin. This behavior can be disabled via\n    ``--disable-javascript``. Linux distributions providing such a package are\n    Ubuntu (22.10) and Debian (testing/bookworm) as libnode-dev.\n    Fedora provides it as nodejs-devel.\n\n    This plugin takes over loading of .js or .cjs files. When no such files\n    are provided to Zeek, Node and the V8 engine are not initialized and\n    should not get into the way.\n\n    This should be considered experimental.\n\n6.0.0-dev.367 | 2023-04-14 10:32:17 +0200\n\n  * Revert \"Type: Add TypeManager->TypeList() and use for ListVal()\" (Arne Welzel, Corelight)\n\n    This reverts commit 24c606b4df92f9871964c5bcb2fe90e43a177b1f.\n\n    This commit introduced a memory leak due to ListVal::Append() modifying\n    the cached TYPE_ANY type list.\n\n6.0.0-dev.364 | 2023-04-13 15:54:00 -0700\n\n  * Add NEWS entry for the CMake changes (Dominik Charousset, Corelight)\n\n  * Redesign subdir-libs and plugin scaffolding (Dominik Charousset, Corelight)\n\n6.0.0-dev.361 | 2023-04-13 09:05:31 -0700\n\n  * GH-2920: Don't warn on uninitialized container options (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.359 | 2023-04-13 08:57:22 -0700\n\n  * Reimplement fixes to handle commas at the end of config parser lines (Tim Wojtulewicz, Corelight)\n\n  * Revert \"Convert config framework to use std::regex\" (Tim Wojtulewicz, Corelight)\n\n    This reverts commit 65ee2287e9b74f861872d9e16b9c11fb300cfabd.\n\n  * Revert \"GH-636: Fix regex to handle commas at the end of config parser lines\" (Tim Wojtulewicz, Corelight)\n\n    This reverts commit 05bb50978905a6c3132b20eb2cfd246715f91356.\n\n6.0.0-dev.355 | 2023-04-13 09:24:19 +0200\n\n  * logging/Manager: Fix crash for rotation format function not returning (Arne Welzel, Corelight)\n\n    While working on a rotation format function, ran into Zeek crashing\n    when not returning a value from it, fix and recover the same way as\n    for scripting errors.\n\n6.0.0-dev.353 | 2023-04-12 13:23:29 -0700\n\n  * iosource/Manager: Fix poll_interval updating using not-yet valid IsLive() (Arne Welzel, Corelight)\n\n    Testing io_poll_interval_live tweaks with @dopheide-esnet on a Myricom based\n    system to reduce CPU usage showed no visible effect.\n\n    It turns out, the pkt_src->IsLive() call used to update poll_interval is only\n    valid *after* calling ->Register() with the source. The conditional updating\n    of the poll_interval introduced in 4fa3e4b9b4d78e6f20f42b9dbd85216403be07db\n    never worked out how it was intended to.\n\n    The fix ensures that\n\n    * we actually use a poll_interval of 10 in the live case\n    * changing io_poll_interval_live does have an effect\n\n    This is a bit of a major change due to lowering the default poll_interval\n    by a magnitude, but that seemed to have been the intention always. It's also\n    tunable via redef, so worst case it can be adapted via configuration.\n\n    As reference, with the default a Pcap::non_fd_timeout of 20usec *and* a\n    poll_interval of 100, theoretically we'd be trying to ask a non-selectable\n    packet source 500000 per second for a new packet. This is not a likely packet\n    rate that a single worker would currently observe or manage to process.\n\n6.0.0-dev.350 | 2023-04-11 15:41:31 -0700\n\n  * Only use -Wno-changes-meaning if it exists (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.348 | 2023-04-11 15:30:45 -0700\n\n  * file_analysis/File: Report overflowing chunks as weird and discard/truncate (Arne Welzel, Corelight)\n\n    This is one level above the Reassembler where we still have information\n    about the file and source. A weird entry may looks as follows:\n\n        1679759398.237353  ... file_offset_overflow    FXPLGt4SeMmlMKahJc: offset=fffffffffffffff7 len=10      F       zeek    HTTP\n\n  * Reassem: Reject blocks overflowing 64bit upper (Arne Welzel, Corelight)\n\n    The reassembler logic isn't wrap around safe, so just truncate or\n    reject such blocks. For files specifically, a byte offset in the\n    2**64 bytes represents 16EiB which is the maximum size supported\n    by BTRFS or NTFS (and probably nothing we'd ever see in practice).\n\n  * zeek-setup: Load scrips before running unit tests (Arne Welzel, Corelight)\n\n    It is currently not possible to call a->Conn()->GetVal() or construct a\n    zeek/file_analysis/File object from within doctests, as these quickly\n    reference the unpopulated zeek::id namespace to construct Val objects\n    of various types, making it hard write basic tests without completely\n    re-organizing.\n\n    Move running of the unit tests after parsing the scripts, so it is possible\n    for some basic exercising of File objects within tests.\n\n6.0.0-dev.344 | 2023-04-11 15:23:42 -0700\n\n  * RDP: Instantiate SSL analyzer instead of PIA (Tim Wojtulewicz, Corelight)\n\n  * RDP: add some enforcement to required values based on MS-RDPBCGR docs (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.341 | 2023-04-11 15:16:39 -0700\n\n  * Stop skipping expiration of empty DNS mappings (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.339 | 2023-04-11 15:16:15 -0700\n\n  * smtp: Validate mail transaction and disable SMTP analyzer if excessive (Arne Welzel, Corelight)\n\n    An invalid mail transaction is determined as\n\n    * RCPT TO command without a preceding MAIL FROM\n    * a DATA command without a preceding RCPT TO\n\n    and logged as a weird.\n\n    The testing pcap for invalid mail transactions was produced with a Python\n    script against a local exim4 configured to accept more errors and unknown\n    commands than 3 by default:\n\n        # exim4.conf.template\n        smtp_max_synprot_errors = 100\n        smtp_max_unknown_commands = 100\n\n    See also: https://www.rfc-editor.org/rfc/rfc5321#section-3.3\n\n  * generic-analyzer-fuzzer: Detect disable_analyzer() from scripts (Arne Welzel, Corelight)\n\n    Test if the analyzer is removed from the TCPSessionAdapter during\n    event processing. If we don't do this, we continue feeding the analyzer\n    even if scripts decided to disable the analyzer.\n\n    The analyzer instance isn't flagged as disabled itself, so we need\n    to look at the parent's children.\n\n6.0.0-dev.336 | 2023-04-11 14:50:47 -0700\n\n  * ftp/main: Special case for intermediate reply lines (Arne Welzel, Corelight)\n\n    The medium.trace in the private external test suite contains one\n    session/server that violates the multi-line reply protocol and\n    happened to work out fairly well regardless due to how we looked\n    up the pending commands unconditionally before.\n\n    Continue to match up reply lines that \"look like they contain status codes\"\n    even if cont_resp = T. This still improves runtime for the OSS-Fuzz\n    generated test case and keeps the external baselines valid.\n\n    The affected session can be extracted as follows:\n\n        zcat Traces/medium.trace.gz | tcpdump -r  - 'port 1491 and port 21'\n\n    We could push this into the analyzer, too, minimally the RFC says:\n\n        > If an intermediary line begins with a 3-digit number, the Server\n        > must pad the front  to avoid confusion.\n\n  * ftp/main: Skip get_pending_command() for intermediate reply lines (Arne Welzel, Corelight)\n\n    Intermediate lines of multiline replies usually do not contain valid status\n    codes (even if servers may opt to include them). Their content may be anything\n    and likely unrelated to the original command. There's little reason for us\n    trying to match them with a corresponding command.\n\n    OSS-Fuzz generated a large command reply with very many intermediate lines\n    which caused long processing times due to matching every line with all\n    currently pending commands.\n    This is a DoS vector against Zeek. The new ipv6-multiline-reply.trace and\n    ipv6-retr-samba.trace files have been extracted from the external ipv6.trace.\n\n6.0.0-dev.333 | 2023-04-11 12:05:29 -0700\n\n  * Add cstdint to WeirdState.h to fix compilation error on gcc13 (Tim Wojtulewicz, Corelight)\n\n  * Ignore -Wchanges-meaning warning in Spicy (Tim Wojtulewicz, Corelight)\n\n    This fixes a build failure with GCC 13. It's meant as a short-term fix to avoid\n    the failure in Zeek, but probably should be fixed more correctly upstream in\n    the Spicy repo.\n\n  * Update broker submodule to pull in GCC 13 fix (Tim Wojtulewicz, Corelight)\n\n  * CI: Force rebuild of OpenSUSE Tumbleweed VM to pick up GCC 13 (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.327 | 2023-04-08 11:22:57 -0700\n\n  * Fix a long-standing bug in the math around continue_processing (Tim Wojtulewicz, Corelight)\n\n  * Add is_processing_suspended BIF (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.323 | 2023-04-06 13:46:28 -0700\n\n  * Add NEWS entries for filtered packet statistics and telemetry (Tim Wojtulewicz, Corelight)\n\n  * Report packet statistics via the telemetry framework (Tim Wojtulewicz, Corelight)\n\n  * Add optional packet filtered statistics for packet sources (Tim Wojtulewicz, Corelight)\n\n  * ci: Add debian-12 / bookworm (Arne Welzel, Corelight)\n\n    The next version of Debian (bookworm) had a hard-freeze on\n    2023-03-16. Seems reasonable to have it in CI now.\n\n6.0.0-dev.317 | 2023-04-05 10:39:22 +0200\n\n  * scan.l: Support @pragma, specifically push/pop ignore-deprecations (Arne Welzel, Corelight)\n\n    This allows to ignore-deprecations as follows:\n\n        @pragma push ignore-deprecations\n        print r$deprecated;\n        @pragma pop\n\n    A bit of infrastructure is put in place for the push and pop, but\n    nothing overly generalized for future pragmas.\n\n  * Switch deprecations to reporter->Deprecation() (Arne Welzel, Corelight)\n\n    Removes a bit of reliance around the magic DoLog() rendering at the\n    cost of needing to open-code some of it. The new obj_desc_short()\n    helper makes that acceptable, though.\n\n  * Reporter: Add dedicated Deprecation() method (Arne Welzel, Corelight)\n\n    Minimally, provide a way to funnel all deprecations through\n    reporter->Deprecation() instead of various Warning() invocations.\n\n  * Desc: Add obj_desc_short() (Arne Welzel, Corelight)\n\n    Same as obj_desc() but use the short version and do not include the\n    location information by default. New method instead of bool parameters\n    for readability.\n\n6.0.0-dev.312 | 2023-04-04 09:05:34 -0700\n\n  * Update gen-zam submodule for std::move warnings (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.310 | 2023-04-04 10:00:24 +0200\n\n  * test suite update for minor change in \"when\" error messages (Vern Paxson, Corelight)\n\n  * removed skeletal (non-functioning) \"when\" support from ZAM (Vern Paxson, Corelight)\n\n  * simplify WhenInfo and Trigger classes given removal of old capture semantics (Vern Paxson, Corelight)\n\n  * introduced notion of light-weight Frame clones (Vern Paxson, Corelight)\n\n  * changed function_ingredients struct to FunctionIngredients class with accessors (Vern Paxson, Corelight)\n\n6.0.0-dev.303 | 2023-04-03 16:37:02 +0200\n\n  * addressed static analysis concern about possible null pointer (Vern Paxson, Corelight)\n\n  * tweaks for \"-O C++\" of BTest's with conditional code (Vern Paxson, Corelight)\n\n6.0.0-dev.300 | 2023-04-03 13:32:40 +0200\n\n  * minor ZAM BTest baseline updates (Vern Paxson, Corelight)\n\n  * fixed type mismatch for ssl_certificate_request event (Vern Paxson, Corelight)\n\n  * skip ZAM optimization of invalid scripts (Vern Paxson, Corelight)\n\n  * extended script validation to be call-able on a per-function basis (Vern Paxson, Corelight)\n\n6.0.0-dev.295 | 2023-04-03 13:19:20 +0200\n\n  * GH-2296: PktSrc: Introduce Pcap::non_fd_timeout (Arne Welzel, Corelight)\n\n    Increasing this value 10x has lowered CPU usage on a Myricom based\n    deployment significantly with reportedly no adverse side-effects.\n\n    After reviewing the Zeek 3 IO loop, my hunch is that previously when\n    no packets were available, we'd sleep 20usec every loop iteration after\n    calling ->Process() on the packet source. With current master ->Process()\n    is called 10 times on a packet source before going to sleep just once\n    for 20 usec. Likely this explains the increased CPU usage reported.\n\n    It's probably too risky to increase the current value, so introduce\n    a const &redef value for advanced users to tweak it. A middle ground\n    might be to lower ``io_poll_interval_live`` to 5 and increase the new\n    ``Pcap::non_fd_timeout`` setting to 100usec.\n\n    While this doesn't really fix #2296, we now have enough knobs for tweaking.\n\n    Closes #2296.\n\n6.0.0-dev.293 | 2023-03-31 10:38:45 +0200\n\n  * Add test cases for Geneve. (Jan Grashoefer, Corelight)\n\n  * Fix forwarding of tunnelled packets. (Jan Grashoefer, Corelight)\n\n    This fixes a bug for AYIYA, Geneve and VXLAN forwarding encapsulated\n    content only if it's longer than their header. A new weird is introduced\n    to indicate empty tunnels.\n\n6.0.0-dev.290 | 2023-03-31 10:33:53 +0200\n\n  * Type: Add TypeManager->TypeList() and use for ListVal() (Arne Welzel, Corelight)\n\n    It turns out that for every ListVal we construct, we also allocate\n    and construct a new TypeList instance, even though they are all the\n    same. Pre-create and cache the type instances in a new TypeManager.\n\n    The following script runs ~10% faster for me after this change.\n\n        global tbl: table[string] of string;\n        global i = 0;\n        while ( ++i < 10000000 )\n            tbl[\"a\"] = \"a\";\n\n6.0.0-dev.288 | 2023-03-30 13:09:18 -0700\n\n  * Add reporter framework to core.packet-analyzer-override btest (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.286 | 2023-03-30 09:52:26 -0700\n\n  * Consider cap len when forwarding into packet analysis. (Jan Grashoefer, Corelight)\n\n    When forwarding into packet analysis from TCP or UDP, the protocol's\n    length fields were trusted. This might be dangerous in case of truncated\n    packets.\n\n6.0.0-dev.284 | 2023-03-30 09:50:57 -0700\n\n  * Reintroduce info when overriding packet analyzer mappings. (Jan Grashoefer, Corelight)\n\n    In #2464 the warning when overriding a packet analyzer mapping was\n    removed. While a warning seems indeed excessive, some info would still\n    be nice to have.\n\n  * Update Cirrus memory limits to avoid timeouts when building (Tim Wojtulewicz)\n\n6.0.0-dev.280 | 2023-03-30 09:35:48 +0200\n\n  * Analyzer: Add GetChildAnalyzer() and IsPreventedChildAnalyzer() (Arne Welzel, Corelight)\n\n    GetChildAnalyzer() has the same semantics as HasChildAnalyzer(), but returns\n    the raw pointer to the child analyzer. Main issue is memory management: That\n    pointer is not guaranteed to stay valid. It might be disabled from script\n    land or otherwise removed from the analyzer tree and subsequent\n    deleted in one of the Forward* methods.\n\n    IsPreventedChildAnalyzer() provides minimal introspection for prevented\n    child analyzer tags and allows to remove some duplicated code.\n\n6.0.0-dev.278 | 2023-03-29 14:34:26 -0700\n\n  * Bump Spicy and spicy-plugin to their latest development snapshots. (Benjamin Bannier, Corelight)\n\n6.0.0-dev.276 | 2023-03-28 09:19:59 -0700\n\n  * Fix a bunch of -Wunqualified-std-cast-call warnings from clang 15 (Tim Wojtulewicz)\n\n6.0.0-dev.274 | 2023-03-27 21:32:53 +0200\n\n  * btest/broker: Add test using Python bindings and zeek -r (Arne Welzel, Corelight)\n\n    This came up in community.zeek.org as a use-case and there\n    were a few gaps and holes, so add a test showing minimally\n    the current behavior.\n\n  * Broker: Remove network time initialization (Arne Welzel, Corelight)\n\n    Remove the special case of initializing network time if it hasn't\n    happened yet. The argument about broker.log containing 0.0 timestamps\n    is more a problem of the log, not something that would justify modifying\n    network time globally. For broker.log and possibly cluster.log, it might\n    be more reasonable to use current time, anyway.\n\n    I was a bit wary about tables backed by broker stores being populated\n    with network_time set to 0.0, but there seems to exist logic and assumptions\n    that this is okay: It should be the same as if one populates a table with\n    expirations set within zeek_init().\n\n    In fact, staring a bit more, *not setting* network time might be more correct\n    as workers that don't see packets would never set zeek_start_network_time\n    which is used within the expiration computation.\n\n6.0.0-dev.271 | 2023-03-24 09:12:04 +0100\n\n  * cirrus: No container images on PRs (Arne Welzel, Corelight)\n\n6.0.0-dev.268 | 2023-03-23 13:40:26 +0100\n\n  * Ensure master/release builds run for zeek-security (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.266 | 2023-03-23 13:35:28 +0100\n\n  * iosource: Remove non-existing ManagerBase friend (Arne Welzel, Corelight)\n\n  * broker::Manager: use_realtime_false when allow_network_time_forward=F (Arne Welzel, Corelight)\n\n    Run the broker in non-realtime mode when allow_network_time_forward=F.\n    This may need an extra option for really advanced use-cases, but for\n    now this seems reasonable.\n\n  * A set of tests around network time handling (Arne Welzel, Corelight)\n\n  * broker::Manager: No more network_time forwarding (Arne Welzel, Corelight)\n\n    network_time forwarding will happen in the main-loop before draining the\n    EventMgr so timers/events scheduled based on broker messages should\n    behave similarly. This also keeps network_time unaffected during\n    non pseudo-realtime trace processing.\n\n  * TimerMgr: No network_time updates in Process() (Arne Welzel, Corelight)\n\n    network_time forwarding will now happen centrally in the main loop.\n    The TimerMgr returns a valid timeout that can be waited for and will\n    trigger network_time advancement, so we don't need to do it.\n\n  * Event: No more network_time updates (Arne Welzel, Corelight)\n\n    The whole docs read like this was only used to update the\n    network_time, so there may be a follow-up to ditch EventMgr\n    even being an IOSource (which could be argued it's not IO).\n\n  * RunState: Implement forward_network_time_if_applicable() (Arne Welzel, Corelight)\n\n    Add a central place where the decision when it's okay to update network time\n    to the current time (wallclock) is. It checks for pseudo_realtime and packet\n    source existence as well as packet source idleness.\n\n    A new const &redef allows to completely disable forwarding of network time.\n\n  * PktSrc: Add HasBeenIdleFor() method (Arne Welzel, Corelight)\n\n    This method will be used by the main loop to determine if an interface\n    has become idle. Initially this will be used to determine when it is\n    acceptable to update network_time to the current time (wallclock).\n\n  * PktSrc: Move termination pseduo_realtime special case to RunState (Arne Welzel, Corelight)\n\n    This also removes setting pseduo_realtime to 0.0 in the main loop\n    when the packet source has been closed. I had tried to understand\n    the implications it actually seems, if we shutdown the iosource::Manager\n    anyway, it shouldn't and it's just confusing.\n\n  * Bump zeekctl and doc submodule for updates regarding Site::local_nets (Christian Kreibich, Corelight)\n\n  * Update doc submodule [nomail] [skip ci] (zeek-bot)\n\n6.0.0-dev.250 | 2023-03-21 19:17:36 +0100\n\n  * Expr: Factor out type tag extraction (Arne Welzel, Corelight)\n\n  * Var: Add version to deprecated initialization (Arne Welzel, Corelight)\n\n    This has been added for Zeek 5.0, so mark it for removal in Zeek 6.1.\n\n  * Stmt: Error on deprecated when/local usage (Arne Welzel, Corelight)\n\n    This has been around since Zeek v4.1, so it was warned about in Zeek 5.0\n    LTS and we could've removed it with 5.1.\n\n    Also removed merge_top_scope() from the zeek::detail namespace, it's\n    unused now.\n\n    Updated the when-aggregates test somehow. I'm not quite sure what had\n    been tested there :-/\n\n  * Expr: Remove vector scalar operations (Arne Welzel, Corelight)\n\n    These seem to have been deprecated since 2018, so do it now.\n    Unfortunately the message didn't contain a version when it'll\n    be removed, but it's been long enough.\n\n  * parse.y: Make out-of-scope use errors (Arne Welzel, Corelight)\n\n    This was marked to be done in Zeek 5.1, so do it now. The message\n    didn't include a version, unfortunately, but minimally there was\n    a comment when it should happen.\n\n  * scan.l: Remove unused deprecated_attr (Arne Welzel, Corelight)\n\n6.0.0-dev.243 | 2023-03-21 16:40:35 +0100\n\n  * Add pcap_file option to supervised nodes. (Jan Grashoefer, Corelight)\n\n    This allows to start Supervised nodes with a pcap_file argument\n    rather than interface.\n\n6.0.0-dev.241 | 2023-03-21 10:10:50 +0100\n\n  * Add a new plugin test with verbose IO source output (Arne Welzel, Corelight)\n\n    This is mostly for documentation/verification purposes of how the IO loop\n    currently does draining and when it picks up FD based (non packet) IO\n    source. For example, it shows that currently FD based sources are processed\n    fairly delayed and that we now also process two timeout sources that are ready.\n\n  * iosource: Make poll intervals configurable (Arne Welzel, Corelight)\n\n    This probably should not be changed by users, but it's useful for\n    testing and experimentation rather than needing to recompile.\n\n    Processing 100 packets without checking an FD based IO source can\n    actually mean that FD based sources are never checked during a read\n    of a very small pcap...\n\n  * iomanager/Poll: Add zero-timeout timeout_src also when there's other events ready (Arne Welzel, Corelight)\n\n    This would generally happen the next loop iteration around anyway, but\n    seems nice to ensure a zero timeout source will be processed at the same\n    time as sources with ready FDs.\n\n  * iomanager: Collect all sources with zero timeouts as ready (Arne Welzel, Corelight)\n\n    Previously, if two iosources returned 0.0 as their timeout, only\n    one of them would be considered ready. An always ready source\n    therefore may starve other ready ones due to this and minimally\n    this behavior seems surprising.\n\n    Offline pcap sources are always ready and return 0.0 for\n    GetNextTimeout() (unless in pseudo-realtime), so we can\n    also remove the offline source special case.\n\n    One subtle side-effect of this change is that if an IO source\n    returns a 0.0 timeout *and* it's file descriptor is ready in\n    the same loop iteration, it may be processed twice.\n\n6.0.0-dev.235 | 2023-03-20 10:04:55 -0700\n\n  * ci/centos-stream-8: Add which command (Arne Welzel, Corelight)\n\n  * Update zeekctl test baseline for command.peerstatus test (Tim Wojtulewicz)\n\n  * Update zeekctl test baseline for changes to Site::local_nets (Tim Wojtulewicz)\n\n6.0.0-dev.231 | 2023-03-18 17:10:33 -0700\n\n  * Update Broker for fixing #2853 (Dominik Charousset, Corelight)\n\n6.0.0-dev.229 | 2023-03-17 14:39:03 -0700\n\n  * Fix integer signedness comparison warning with GCC 12.2 (Christian Kreibich, Corelight)\n\n  * Update doc submodule (zeek-bot)\n\n6.0.0-dev.226 | 2023-03-16 10:18:43 +0100\n\n  * dns: Remove AD and CD flags from log (Arne Welzel, Corelight)\n\n    There was a misunderstanding whether to include them by default in\n    the dns.log, so remove them again.\n\n    There had also been a discussion and quirk that AD of a request would\n    always be overwritten by reply in the dns.log unless the reply is\n    missing. For now, let users extend dns.log themselves for what best\n    fits their requirements, rather than adding these flags by default.\n\n    Add a btest to print AD and CD flags for smoke testing still.\n\n6.0.0-dev.224 | 2023-03-15 20:02:13 -0700\n\n  * Treat private address space as site-local by default (Christian Kreibich, Corelight)\n\n    - Update NEWS to cover new Site::local_nets behavior\n    - Bump external testsuites to reflect updated baselines\n    - Add btests for new Site::local_nets behavior\n    - Update plugins.hooks baseline to reflect added config framework activity\n    - Update scripts.policy.misc.dump-events baseline\n    - Update btest baselines to reflect the use of local address ranges\n    - Tighten local-nets filtering in the logging framework's path-func-column-demote test\n    - Fix scripts.policy.frameworks.intel.removal test given address locality info\n    - Provide a mechanism to suppress logging of internal config framework activity\n\n6.0.0-dev.212 | 2023-03-16 00:41:33 +0000\n\n  * Move port_masked variable inside #else block (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.210 | 2023-03-15 10:47:48 -0700\n\n  * Add configure option for preallocating PortVal objects (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.208 | 2023-03-15 14:10:07 +0100\n\n  * Fix the x509-invalid-extension test on OpenSSL 3.1 (Johanna Amann, Corelight)\n\n6.0.0-dev.206 | 2023-03-15 10:02:52 +0100\n\n  * SSL/TLS: Parse CertificateRequest message (Johanna Amann, Corelight)\n\n    This commit introduces parsing of the CertificateRequest message in the\n    TLS handshake. It introduces a new event ssl_certificate_request, as\n    well as a new function parse_distinguished_name, which can be used to\n    parse part of the ssl_certificate_request event parameters.\n\n    This commit also introduces a new policy script, which appends\n    information about the CAs a TLS server requests in the\n    CertificateRequest message, if it sends it.\n\n6.0.0-dev.202 | 2023-03-14 10:33:32 +0100\n\n  * GH-2672: Parse DNSSEC AD and CD bits (Michael R. Torres)\n\n    Parse authentic data (AD) and checking disabled (CD) bits according to\n    RFC 2535. Leaves the Z field as-is, in case users are already handling\n    this elsewhere and depend on the value being the integer for all 3 bits.\n\n    https://www.rfc-editor.org/rfc/rfc2535#section-6.1\n\n    Fixes #2672\n\n6.0.0-dev.199 | 2023-03-13 18:40:15 +0100\n\n  * GH-2851: HTTP: Make Content-Range parsing more robust (Arne Welzel, Corelight)\n\n    This was exposed by OSS-Fuzz after the HTTP/0.9 changes in zeek/zeek#2851:\n    We do not check the result of parsing the from and last bytes of a\n    Content-Range header and would reference uninitialized values on the stack\n    if these were not valid.\n\n    This doesn't seem as bad as it sounds outside of yielding non-sensible values:\n    If the result was negative, we weird/bailed. If the result was positive, we\n    already had to treat it with suspicion anyway and the SetPlainDelivery()\n    logic accounts for that.\n\n6.0.0-dev.197 | 2023-03-13 17:54:02 +0100\n\n  * GH-2851: HTTP: Reset reply_message for HTTP/0.9 (Arne Welzel, Corelight)\n\n    OSS-Fuzz tickled an assert when sending a HTTP response before a HTTP/0.9\n    request. Avoid this by resetting reply_message upon seeing a HTTP/0.9 request.\n\n    PCAP was generated artificially: Server sending a reply providing a\n    Content-Length. Because HTTP/0.9 processing would remove the ContentLine\n    support analyzer, more data was delivered to the HTTP_Message than\n    expected, triggering an assert.\n\n6.0.0-dev.195 | 2023-03-13 09:02:49 -0700\n\n  * dlclose() handle if the library loaded wasn't a plugin (Tim Wojtulewicz, Corelight)\n\n  * Fix uninitialized variables in Ascii writer (Tim Wojtulewicz, Corelight)\n\n  * Fix use-after-move bug in Scope constructor (Tim Wojtulewicz, Corelight)\n\n  * Add missing field initializations for ConnTuple (Tim Wojtulewicz, Corelight)\n\n  * Fix possible resource leak in analyzer unit tests (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.189 | 2023-03-13 09:55:56 +0100\n\n  * Allow offline packet sources to register FDs. (Jan Grashoefer, Corelight)\n\n  * GH-2039: GH-2842: PktSrc: Avoid calling ExtractNextPacketInternal() in GetNextTimeout() (Arne Welzel, Corelight)\n\n    This reworks 2aec7640dd60c3ea3cffd82461588567e406db34 (zeek/zeek#2039) to\n    avoid calling ExtractNextPacketInternal() within GetNextTimeout() for\n    the non-pseudo-realtime case. Also relates to zeek/zeek#2842.\n\n    The intention of the referenced change was to avoid a 0.00002 timeout when\n    a non-selectable packet source has more packets queued. This was implemented\n    by checking for a new packet within GetNextTimeout().\n\n    The proposed change switches to an predictive approach: Use the result of\n    the previous ExtractNextPacket() call (stored as had_packet) as an indication\n    whether more packets are to be expected.\n\n    Calling ExtractNextPacketInternal() within GetNextTimeout() may cause\n    surprising behavior as some packet source may block [1] or spent a significant\n    amount of time (e.g. applying BPF filters [2]) within ExtractNextPacket().\n    The result of GetNextTimeout() should be available immediately as guidance\n    for the main-loop and the actual work should happen within the ->Process()\n    method.\n\n    This change also attempts to separate the pseudo-realtime logic from the\n    non-pseudo-realtime in an attempt show pseudo-realtime as special.\n\n    [1] https://github.com/hosom/bro-napatech/blob/00c4d657e034927301d5f8d9bc03eca81e619699/src/Napatech.cc#L116\n    [2] https://github.com/sethhall/bro-myricom/blob/58b25c8ebac6d184ff8ff0c27f8da2b603694dab/src/Myricom.cc#L250\n\n6.0.0-dev.185 | 2023-03-13 09:38:34 +0100\n\n  * GH-2837: cirrus: Add smoke testing for builtin plugins (Arne Welzel, Corelight)\n\n  * ci/collect-repo-info: Make plugin VERSION reading more robust (Arne Welzel, Corelight)\n\n  * configure: Quote --include-plugins argument (Arne Welzel, Corelight)\n\n6.0.0-dev.179 | 2023-03-12 13:52:15 -0700\n\n  * Force rebuild of CentOS 7 CI image to pick up git install (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.177 | 2023-03-12 13:09:36 -0700\n\n  * get_dns_stats: Expose total cache size and cached text entries (Arne Welzel, Corelight)\n\n    It wasn't possible from script land to determine the total size\n    of the cache table held by the DNS_Mgr. Add the total and also\n    also the TEXT entries count.\n\n6.0.0-dev.175 | 2023-03-10 15:50:04 -0700\n\n  * Add weird for unknown HTTP/0.9 request method (Tim Wojtulewicz, Corelight)\n\n  * Special case HTTP 0.9 early on (Tim Wojtulewicz, Corelight)\n\n    Mostly, treat HTTP0.9 completely separate. Because we're doing raw\n    delivery of a body directly, fake enough (connection_close=1, and finish\n    headers manually) so that the MIME infrastructure thinks it is seeing a\n    body.\n\n    This deals better with the body due to accounting for the first line. Also\n    it avoids the content line analyzer to strip CRLF/LF and the analyzer\n    then adding CRLF unconditionally by fully bypassing the content line\n    analyzer.\n\n    Concretely, the vlan-mpls test case contains a HTTP response with LF only,\n    but the previous implementation would use CRLF, accounting for two many bytes.\n    Same for the http.no-version test which would previously report a body\n    length of 280 and now is at 323 (which agrees with wireshark).\n\n    Further, the mime_type detection for the http-09 test case works because\n    it's now seeing the full body.\n\n    Drawback: We don't extract headers when a server actually replies with\n    a HTTP/1.1 message, but grrr, something needs to give I guess.\n\n  * Remove a couple unnecessary break statements (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.171 | 2023-03-10 15:38:04 -0700\n\n  * Pin conan to 1.58 on Windows until conan.cmake supports 2.0 (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.169 | 2023-03-10 09:05:03 +0100\n\n  * ScriptValidation: Make break/next a warning until Zeek 6.1 (Arne Welzel, Corelight)\n\n    The ja3 package uses next instead of return and triggers the new\n    errors with Zeek 5.2. That seems somewhat bad.\n\n6.0.0-dev.167 | 2023-03-08 13:21:36 +0100\n\n  * Bump Spicy to latest main (Arne Welzel, Corelight)\n\n6.0.0-dev.165 | 2023-03-08 12:07:45 +0100\n\n  * Revert \"Merge branch 'topic/jgras/iosource-offline-fd' of https://github.com/J-Gras/zeek\" (Arne Welzel, Corelight)\n\n    This reverts commit 957825441a2ed32421fd9955b1cd9d3cbf561da0, reversing\n    changes made to c8cdc75f2bf56a369904ad54d9a9d05477fb44a3.\n\n    Caused spurious CI failures in the external testing baselines. See zeek/zeek#2842.\n\n6.0.0-dev.164 | 2023-03-08 11:05:07 +0100\n\n  * Allow offline packet sources to register FDs. (Jan Grashoefer, Corelight)\n\n6.0.0-dev.162 | 2023-03-08 10:43:00 +0100\n\n  * extend BTest \"path\" canonicalization to include compiled-to-C++ variable names (Vern Paxson, Corelight)\n\n  * use a subclass of TableType for incremental construction of compiled scripts (Vern Paxson, Corelight)\n\n  * script_opt/CPP: errors, recursive type fixes, fix embedded comments (Vern Paxson, Corelight)\n\n    better (than nothing) run-time errors for compiled scripts\n    fixes for dealing with recursive types in compiled scripts\n    fix for values in compiled scripts containing embedded comment markers\n\n  * Fix for EnumVal's returning their underlying value (Vern Paxson, Corelight)\n\n    Change EnumVal()->AsEnum() to zeek_int_t.\n\n  * Manually prune CI ccache. (Benjamin Bannier, Corelight)\n\n    Since ccache in Cirrus currently does not preserve timestamps the\n    timestamp-based cache pruning implemented by ccache likely would just\n    remove random files. To work around this, this patch implements a manual\n    pruning step. This step runs after the build so that at least the files\n    used in the build should have their timestamps updated. We can then\n    force eviction of some of the unused files from the cache by cleaning\n    the cache with a size less than the maximum cache size.\n\n6.0.0-dev.155 | 2023-03-07 09:28:27 -0700\n\n  * Add trigger_mgr to iosource_mgr later during startup (Tim Wojtulewicz, Corelight)\n\n    This fixes a potential crash due to trigger_mgr getting shutdown earlier\n    than dns_mgr, and dns_mgr then trying to use it after it's been deleted.\n    This change forces the order of initialization/destruction in\n    iosource_mgr to cause dns_mgr to be deleted first.\n\n6.0.0-dev.150 | 2023-03-02 12:49:16 -0700\n\n  * Default known stores to false to avoid Broker stores (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.148 | 2023-03-02 10:05:06 +0100\n\n  * logging/Manager: Remove unused variable (Arne Welzel, Corelight)\n\n  * logging: Add telemetry for streams and log writers (Arne Welzel, Corelight)\n\n    This adds one metric per log stream and one metric per log writer (path based)\n    to track the number of writes on a stream level as well as on a writer level.\n\n        $ curl -sSf localhost:8181/metrics | grep Conn\n        zeek_log_writer_writes_total{endpoint=\"\",filter-name=\"default\",module=\"HTTP\",path=\"http\",stream=\"HTTP::LOG\",writer=\"Log::WRITER_SQLITE\"} 1 1677497572770\n        zeek_log_stream_writes_total{endpoint=\"\",module=\"HTTP\",stream=\"HTTP::LOG\"} 1 1677497572770\n\n    The initial version of this change also included metrics around log\n    write vetoes, but given no log policies exist in the default configuration\n    and they are mostly interesting for a few streams/writers only, skip this\n    for now. These can always be added by the script writer, too.\n\n    The difference between the stream level writes and concrete writers can\n    be used to deduce the number of vetoes (or errors) as a starting point.\n\n6.0.0-dev.143 | 2023-03-01 10:40:36 +0000\n\n  * X.509: expose the signature type inside the tbs certificate (Johanna Amann, Corelight)\n\n    This change exposes the signature type inside the signed portion of an\n    X.509 certificate. In the past, we only exposed the signature type that\n    is contained inside the signature, which is outside the signed portion\n    of the X.509 certificate.\n\n    In theory, both signature fields should have the same value; it is,\n    however, possible to encode differing values in both fields. The new\n    field is not logged by default.\n\n6.0.0-dev.141 | 2023-03-01 10:20:59 +0100\n\n  * cirrus: Add zeekctl CI task (Arne Welzel, Corelight)\n\n    Run the zeekctl testing suite within a Debian 11 container. This runs on\n    pushes to master and release branches. Also, tagging PRs with fullci or\n    zeekctlci triggers it.\n\n6.0.0-dev.136 | 2023-02-28 09:24:34 -0700\n\n  * Add build status, slack, and discourse badges to readme (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.134 | 2023-02-27 14:48:16 -0700\n\n  * Configure apt to retry a few times on Docker image builder tasks (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.132 | 2023-02-27 13:47:41 -0700\n\n  * Bump zeekctl and add NEWS entries (Arne Welzel, Corelight)\n\n    These are added to the 5.2 section of NEWS. This is for backporting\n    into release/5.2.\n\n6.0.0-dev.130 | 2023-02-27 09:36:31 -0700\n\n  * Update bifcl submodule [nomail] (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.128 | 2023-02-27 12:36:09 +0100\n\n  * GH-2801: Fix re-instantiation of analyzers that were just removed. (Robin Sommer, Corelight)\n\n6.0.0-dev.126 | 2023-02-27 09:52:31 +0100\n\n  * Update cmake submodule (Arne Welzel, Corelight)\n\n    To pull in zeek/cmake#62.\n\n  * cirrus: Also add ccache limits to container builds (Arne Welzel, Corelight)\n\n  * cirrus: Add an epoch to the ccache fingerprint, bump to 1000M (Arne Welzel, Corelight)\n\n  * cirrus: Cap ccache max size to 500M and max files to 20000 (Arne Welzel, Corelight)\n\n6.0.0-dev.117 | 2023-02-23 08:27:12 -0700\n\n  * GH-2730: Use binary mode when opening files in Extract file analyzer (Tim Wojtulewicz)\n\n6.0.0-dev.115 | 2023-02-23 07:40:22 -0700\n\n  * Include stdint.h early in flex files to prevent redefinition of int type macros (Tim Wojtulewicz)\n\n  * SMB: clarify a confusing line in one of the pac files (Tim Wojtulewicz)\n\n  * module_util: Change streq helper method to just return bool (Tim Wojtulewicz)\n\n  * NTLM analyzer: Don't bother checking boolean values for > 0 (Tim Wojtulewicz)\n\n  * FTP analyzer: Remove unnecessary lines from constructor (Tim Wojtulewicz)\n\n  * IP_Hdr: take length value as uint64_t instead of int (Tim Wojtulewicz)\n\n  * EventTrace: take size_t as a constructor argument instead of int (Tim Wojtulewicz)\n\n  * Change argument to Tempvar constructor to size_t, avoids conversion warning in template construction (Tim Wojtulewicz)\n\n6.0.0-dev.104 | 2023-02-23 15:18:50 +0100\n\n  * ci/collect-repo-info: No hard dependency on git, take two (Arne Welzel, Corelight)\n\n    Collecting information about builtin external plugins also\n    tried to use `git` unconditionally.\n\n6.0.0-dev.100 | 2023-02-22 17:05:56 -0700\n\n  * Use btest -A on CI to get more information about stuck tests (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.98 | 2023-02-22 15:53:12 -0700\n\n  * Use ensurepip to install pip on FreeBSD (Tim Wojtulewicz, Corelight)\n\n    The py39-pip package is sometimes not available on FreeBSD, and using\n    ensurepip is the recommended way to install pip according to the pip\n    documentation. ensurepip should be available in every python\n    installation.\n\n6.0.0-dev.96 | 2023-02-22 14:26:29 -0700\n\n  * Update benchmarker Cirrus secrets to use org-level values (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.94 | 2023-02-22 19:29:52 +0100\n\n  * ci/collect-repo-info: No hard dependency on git (Arne Welzel, Corelight)\n\n    The OBS builds run in an environment where no git is installed and\n    release tarballs assembled manually.\n\n    Drop the hard-requirement on git from ci/collect-repo-info.json.\n\n6.0.0-dev.92 | 2023-02-22 16:49:36 +0100\n\n  * GH-2776: zeek-config: Move ZEEK_VERSION* out of zeek-config.h (Arne Welzel, Corelight)\n\n    When bumping the VERSION file, everything that includes the auto-generated\n    zeek/zeek-config.h needs to rebuild and ccache usage is voided due the file\n    changing. Split the mutable version information into a new zeek-version.h\n    file to avoid this.\n\n    Further, do not include zeek-version.h within Plugin.h and avoid the reference\n    to ZEEK_VERSION_FUNCTION unless we're building an external plugin.\n\n    Closes #2776.\n\n6.0.0-dev.89 | 2023-02-22 15:51:44 +0100\n\n  * Update Spicy plugin. (Robin Sommer, Corelight)\n\n6.0.0-dev.87 | 2023-02-22 12:58:05 +0100\n\n  * external/testing-setup: Less telemetry.log volume (Arne Welzel, Corelight)\n\n    For traces spanning a long time period, don't produce immense\n    amounts of logs. Also filter down the event handler invocation\n    entries to connection related events in telemetry.log.\n\n  * EventHandler: Use telemetry framework for EventHandler.call_count (Arne Welzel, Corelight)\n\n    Put the IntCounter into a std::optional rather than initializing\n    it at EventHandler construction time as that will currently expose\n    a time series per event handler through the Prometheus API.\n\n6.0.0-dev.82 | 2023-02-21 16:48:03 -0700\n\n  * parse.y: Improve error reporting of type redef (Arne Welzel, Corelight)\n\n    It's happening regularly to me that I forget the type specifier when redef'ing\n    records or enums and usually it takes me a while to figure out what's going\n    on as the errors are not descriptive. Improve the error reporting and just\n    bail as there's no sensible way to continue.\n\n    Closes #2777\n\n6.0.0-dev.79 | 2023-02-21 12:28:07 -0700\n\n  * ftp: Limit user, password, arg and reply_msg column sizes in log (Arne Welzel, Corelight)\n\n    The user and password fields are replicated to each of the ftp.log\n    entries. Using a very large username (100s of KBs) allows to bloat\n    the log without actually sending much traffic. Further, limit the\n    arg and reply_msg columns to large, but not unbounded values.\n\n  * Allow async DNS responses with zero TTLs to be considered valid after expriation (Tim Wojtulewicz, Corelight)\n\n    This fixes a potential memory leak when getting responses for asnyc DNS requests\n    where the TTL value on the response is zero. We were immediately considering the\n    request as expired and never removing it from the map of requests. This lead to\n    the DNS_Mgr eventually stopping processing of async requests.\n\n  * Add max_size argument for find_all/find_all_ordered BIFs (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.75 | 2023-02-19 19:23:50 -0700\n\n  * Update seemingly-unrelated btests (Eldon Koyle, Corelight)\n\n    For some reason, the plugin order appears to have changed in the files btests.\n\n  * Use a default analyzer (Eldon Koyle, Corelight)\n\n    Use a default analyzer instead of hardcoding a protocol number.\n\n  * Simplify PBB analyzer by using Ethernet analyzer (Eldon Koyle, Corelight)\n\n    After the first 4 bytes, this traffic actually just looks like Ethernet.\n    Rather than try to re-implement the ethernet analyzer, just check the\n    length, skip 4 bytes, and pass it on.\n\n  * Add btest for PBB and update baselines (Eldon Koyle, Corelight)\n\n  * Use constexpr instead of #define (Eldon Koyle, Corelight)\n\n  * Cleanup and add customer MAC addresses (Eldon Koyle, Corelight)\n\n     * Put c-dst/c-src in l2_dst/l2_src\n     * use #define instead of const int and move to PBB.h\n\n  * Add PBB (802.1ah) support (Eldon Koyle, Corelight)\n\n  * Bump Spicy and spicy-plugin to latest releases. (Benjamin Bannier, Corelight)\n\n    (cherry picked from commit f27a9a62648e642cc2f6aa267d067d529487eb21)\n\n  * Trim diffed output in test `spicy.spicy-dump`. (Benjamin Bannier, Corelight)\n\n    We previously would include any and all output from stderr during\n    compilation in the test baseline. Depending on the used compiler this\n    output may contain C++ compilation warnings which are uninteresting for\n    the behavior under test.\n\n    (cherry picked from commit 5221edf474e6a8cb05a1470318c7d8007857f202)\n\n  * Update cmake and zeek-aux submodules [nomail] (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.64 | 2023-02-17 17:36:40 +0100\n\n  * TableVal: Propagate &on_change attribute through copy() (Arne Welzel, Corelight)\n\n    Mostly for consistency with &default, &expire_func and other attributes\n    being propagated through a copy(). Seems this was just missed during\n    the implementation and/or was never tested for.\n\n  * GH-2793: TableVal: Propagate &ordered through copy() (Arne Welzel, Corelight)\n\n    Copying an &ordered table or set would result in a copy that is not ordered.\n    This seems rather surprising behavior, so propagate the &ordered attribute.\n\n  * GH-2690: Type/is_supported_index_type: Deal with recursive record types (Arne Welzel, Corelight)\n\n    This plugs the issue reported in #2690, there might be more though.\n\n6.0.0-dev.57 | 2023-02-16 15:10:33 -0700\n\n  * Move get_relative_seq and get_segment_len to public static methods (Tim Wojtulewicz, Corelight)\n\n  * CI: remove no longer needed workaround for GITHUB_ACTION env var in cluster tests (Christian Kreibich, Corelight)\n\n    This got fixed in the testsuite via zeek/zeek-testing-cluster#24.\n\n  * CI: directly invoke btest in the cluster testsuite (Christian Kreibich, Corelight)\n\n    This resembles the way we also invoke it in ci/test.sh, and \"-d\"'s direct\n    console output saves a roundtrip through uploaded artifacts when tests fail.\n    This skips test retries for now -- not sure we really need it for this\n    testsuite.\n\n6.0.0-dev.52 | 2023-02-15 11:12:28 -0700\n\n  * Fix linking of zeek_build_info on Windows (Tim Wojtulewicz)\n\n  * CI: Enable Windows builds for PRs (Tim Wojtulewicz)\n\n  * Call python explicitly from cmake for collecting repo info on Windows (Tim Wojtulewicz)\n\n  * Rework zeek-inet-ntop snprintf return value handling (Tim Wojtulewicz)\n\n6.0.0-dev.47 | 2023-02-15 19:10:35 +0100\n\n  * zeek-setup: Ensure telemetry_mgr is created before other managers (Arne Welzel, Corelight)\n\n    It's difficult to initialize metrics families in the constructor\n    of other Managers if the telemetry_mgr isn't around yet.\n\n6.0.0-dev.45 | 2023-02-15 13:30:29 +0100\n\n  * added to C++ script compiler maintainer notes utility of starting with full base script compile (Vern Paxson, Corelight)\n\n  * fixes for order-of-initialization in scripts compiled to C++ (Vern Paxson, Corelight)\n    annotations of such initializations to tie them to the original Zeek script\n\n6.0.0-dev.41 | 2023-02-14 13:18:11 -0800\n\n  * Bump external zeek-testing commit hash to bring it up to master (Christian Kreibich, Corelight)\n\n6.0.0-dev.40 | 2023-02-14 07:39:06 -0700\n\n  * HashKey: Do not call Describe() unconditionally in DEBUG mode (Arne Welzel, Corelight)\n\n    An unnecessary overhead of the Hash() method was uncovered for DEBUG builds\n    due to computing a description of every HashKey() even when the DBG_HASHKEY\n    stream is not enabled. Squelch it.\n\n6.0.0-dev.38 | 2023-02-14 07:35:50 -0700\n\n  * Call AnalyzerConfirmation earlier in VXLAN/Geneve analysis (Tim Wojtulewicz, Corelight)\n\n  * Add validation of session to start of AYIYA/VXLAN/Geneve analysis (Tim Wojtulewicz, Corelight)\n\n    This mimics how the Teredo analyzer is already doing it, including\n    sending a weird if the session is invalid and bailing out if the\n    protocol was already violated.\n\n  * ci/collect-repo-info.py: Recognize git worktrees, too (Arne Welzel, Corelight)\n\n    Benjamin reported ci/collect-repo-info.py failing for him in\n    Git worktrees, use `git` to actually check if we're in a repo.\n\n6.0.0-dev.33 | 2023-02-13 12:56:01 +0100\n\n  * GH-1405: Add zeek -V/--build-info (Arne Welzel, Corelight)\n\n    This adds a new utility called ci/collect-repo-info.py to produce a JSON\n    document that is then baked into the Zeek executable file. Further, when\n    creating a tarball via `make dist`, put a top-level repo-info.json file\n    in place that is picked when no .git directory exists.\n\n6.0.0-dev.30 | 2023-02-13 12:10:50 +0100\n\n  * docker/Makefile: Remove stray quotes, unused DOCKER (Arne Welzel, Corelight)\n\n  * cirrus/container: Polish, fix and automated pushing of images (Arne Welzel, Corelight)\n\n    * Add ci/find-current-version.sh to figure out versions of lts and\n      feature branch based on repository state.\n\n    * Do not use ZEEK_IMAGE_REPO for the local images that\n      are expected to exist.\n\n    * Only use IMAGE_NAME/IMAGE_TAG instead of the ARCH and MANIFEST\n      versions that contained the very same values\n\n    * Support and push additional tags\n\n      In addition to the lts and feature tags, also push the base version\n      tags. 5.0 or 5.1 such that someone pulling zeek/zeek:5.0 will get\n      the most recent available 5.0 patch release.\n\n6.0.0-dev.27 | 2023-02-11 22:07:31 -0700\n\n  * better error reporting when ZAM code calls a function (Vern Paxson, Corelight)\n\n  * fix for ZAM compilation of \"in\" expressions (Vern Paxson, Corelight)\n\n  * Update src/3rdparty submodule to get rid of some sprintf warnings (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.22 | 2023-02-10 10:25:37 +0100\n\n  * CI: Call 'brew install' for macOS to ensure we're using openssl@3 on all hosts (Tim Wojtulewicz, Corelight)\n\n  * Remove files in build/src/3rdparty from coverage reports (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.14 | 2023-02-07 10:29:28 -0700\n\n  * Update binpac submodule for modernization fixes [nomail] (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.11 | 2023-02-06 11:13:08 -0700\n\n  * krb/smb2_krb_nokeytab: Register get_file_handle() to avoid warnings (Arne Welzel, Corelight)\n\n    Now that the common event handler logs a warning, ensure there's one\n    in place, even if it's just returning stub data.\n\n  * fuzzer-setup: Do not always generate new_event (Arne Welzel, Corelight)\n\n    new_event should never be used on production systems, so don't turn\n    it on for fuzzing either as it showed up as bottlenecks in flamegraphs.\n\n  * EventHandler: Support unsetting generate_always (Arne Welzel, Corelight)\n\n  * files/main: No empty file_ids (Arne Welzel, Corelight)\n\n    When an analyzer calls DataIn(), there's a costly callback construct\n    going through the event queue. If an analyzer does not have a\n    get_file_handle() handler installed, the produced file_id would\n    end up empty and ignored. Consequently, the get_file_handle() callback\n    was invoked for every new DataIn() invocations.\n\n    This is surprising and costly. Log a warning when this happens and\n    instead set a generically generated file handle value instead to\n    prevent the repeated get_file_handle() invocations.\n\n6.0.0-dev.6 | 2023-02-06 10:33:24 -0700\n\n  * CI: Fix the ThreadSanitizer build (Tim Wojtulewicz, Corelight)\n\n6.0.0-dev.3 | 2023-02-03 10:50:24 -0700\n\n  * Start of 6.0.0 development (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.637 | 2023-02-03 09:05:15 -0700\n\n  * Bump spicy-plugin to latest development snapshot. (Benjamin Bannier, Corelight)\n\n5.2.0-dev.635 | 2023-02-03 16:48:18 +0100\n\n  * Add BIF `have_spicy_analyzers()`. (Robin Sommer, Corelight)\n\n    We previously used the Spicy plugin's `Spicy::available` to test for\n    Spicy support. However, having Spicy support does not necessarily mean that we\n    have built Zeek with its in-tree Spicy analyzers: the Spicy plugin\n    could have been pulled in from external. The new BIF now reliably\n    tells us whether the Spicy analyzers are available; its result\n    corresponds to what `zeek-config --have-spicy-analyzers` returns as\n    well.\n\n    We also move the two current checks over to use this BIF.\n\n    (Note: I refrained from renaming the CMake-side `USE_SPICY_ANALYERS`\n    to `HAVE_SPICY_ANALYZERS`. We should do this eventually for\n    consistency, but I didn't want to make more changes than necessary\n    right now.)\n\n  * Update package-manager submodule. (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.632 | 2023-02-02 20:20:27 +0100\n\n  * btest/decode_base_errors: Avoid binary output in baseline (Arne Welzel, Corelight)\n\n5.2.0-dev.630 | 2023-02-02 18:35:21 +0100\n\n  * cirrus: No container images builds or cluster testing on branches (Arne Welzel, Corelight)\n\n  * Bump private testsuite for char handling fixes (Arne Welzel, Corelight)\n\n  * GH-2742: Base64: report byte as positive integer (Arne Welzel, Corelight)\n\n    A baseline difference between arm64 and x86 showed up. We would\n    print a wrong character as negative value on x86 due to chars\n    being signed by default. Force an unsigned interpretation which\n    is also more reasonable because we'd have never indexed the\n    base64 table with -112\n\n        -XXXXXXXXXX.XXXXXX      XXXXXXXXXXX     131.243.99.154  3288 193.159.183.138 80      base64_illegal_encoding character -112 ignored by Base64 decoding       F       zeek    -\n        +XXXXXXXXXX.XXXXXX      XXXXXXXXXXX     131.243.99.154  3288 193.159.183.138 80      base64_illegal_encoding character 144 ignored by Base64 decoding        F       zeek    -\n\n    Fixes more of #2742\n\n  * GH-2742: netbios_decode: use unsigned char for result (Arne Welzel, Corelight)\n\n    The buf[i] < 3 condition in use previously allowed all chars (signed on x86)\n    through that had the 0x80 high-bit set after reconstructing from the two\n    bytes of the netbios name, resulting in escaped non-ascii content in\n    the logs.\n\n    Fixes more of #2742\n\n  * GH-2742: analyzer/http: Do not assume char is signed (Arne Welzel, Corelight)\n\n    On aarch64, char is unsigned, so is_HTTP_token_char() allowed\n    non-ASCII stuff with the high-bit set.\n\n    Fixes part of #2742\n\n  * cirrus: Run tests in a Debian 11 container, too (Arne Welzel, Corelight)\n\n5.2.0-dev.620 | 2023-02-02 12:52:40 +0100\n\n  * cirrus: There's no zeekurity repository on AWS ECR (Arne Welzel, Corelight)\n\n5.2.0-dev.619 | 2023-02-02 11:25:38 +0100\n\n  * cirrus: Also push images to the zeekurity account (Arne Welzel, Corelight)\n\n    This was mistakenly removed during f9b0681c98de3dd68f05bd1a8f36fcf8a6ca9068.\n\n5.2.0-dev.617 | 2023-02-01 16:38:41 -0800\n\n  * Bump cluster testsuite to pull in fix for test baseline race condition (Christian Kreibich, Corelight)\n\n5.2.0-dev.615 | 2023-02-01 16:05:42 -0800\n\n  * Update btest submodule to v1.0 (Christian Kreibich, Corelight)\n\n5.2.0-dev.614 | 2023-02-01 15:51:15 -0800\n\n  * Tighten the scripts.base.frameworks.logging.hooks test (Christian Kreibich, Corelight)\n\n  * Fix two btest-diff checks that couldn't fail (Christian Kreibich, Corelight)\n\n5.2.0-dev.611 | 2023-02-01 15:34:22 -0700\n\n  * Update broker submodule [nomail] (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.609 | 2023-02-01 20:55:45 +0100\n\n  * docker: Extend tests to run a very basic Zeek script (Arne Welzel, Corelight)\n\n    Mostly because a `-v` shortcuts quite, while a zeek -e 'print zeek_version()'\n    will also parse all base scripts, etc.\n\n  * cirrus: No broker-tests and no cpp-tests for images (Arne Welzel, Corelight)\n\n  * docker: Update Makefile/README to align with the Cirrus CI setup (Arne Welzel, Corelight)\n\n  * cirrus: Add back testing of container images (Arne Welzel, Corelight)\n\n5.2.0-dev.604 | 2023-02-01 10:48:03 -0700\n\n  * Restore/rename field in SMB2::Fscontrol record type (Tim Wojtulewicz, Corelight)\n\n    b41a4bf06dc2f3a4218cfa0a95b536ec9d253917 removed a field from this record\n    because it had a duplicate name as another field. The field does need to\n    exist, but it needs the correct name.\n\n5.2.0-dev.602 | 2023-02-01 10:47:41 -0700\n\n  * testing/http: http-11-request-then-cruft (Arne Welzel, Corelight)\n\n    A client sends a \"proper\" HTTP/1.1 request and afterwards a few T /\\n\\n sequences.\n    The latter ones aren't logged.\n\n  * testing/http: Add pcap extracted from m5-long external test-suite (Arne Welzel, Corelight)\n\n    This tests that the HTTP version is now updated if it changes in the\n    course of a connection.\n\n  * testing/external: m57-long baseline update (Arne Welzel, Corelight)\n\n    There's a HTTP server that first replies with HTTP/1.1, then HTTP/1.0.\n    Seems actually nicer to have the real value within the log/event.\n\n  * analyzers/http: Update request_version on subsequent SetVersion() calls (Arne Welzel, Corelight)\n\n    The #124 PR introduced special treatment when HTTP version 0.9\n    was set. With #127, a reproducer that set HTTP/1.0 in the first\n    request was created and subsequent requests wouldn't reset to\n    HTTP version 0.9.\n\n    This is subtle, but doesn't seem like things fall apart.\n\n    Improves runtime from 20 seconds to 2 seconds for the given\n    reproducer.\n\n5.2.0-dev.597 | 2023-02-01 10:47:21 -0700\n\n  * testing/ftp: Add tests and pcaps with invalid reply lines (Arne Welzel, Corelight)\n\n    These have been created artificially. The tests show that for an\n    invalid reply line without a numeric code, with a numeric code < 100\n    or a numeric code not followed by a space we now raise an analyzer\n    violation and disable the analyzer.\n\n  * ftp: Harden reply handing a bit and don't raise bad replies to script-land (Arne Welzel, Corelight)\n\n    This improves runtime of the oss-fuzz generated traffic in #125.\n    Specifically, that reproducers included a 064- reply code that was\n    interpreted as needing to be continued.\n\n    Also, return after AnalyzerViolations() for server replies rather than\n    propagating bad replies them to script-land. This trusts server's to\n    generally behave according to specification.\n\n  * ftp: ignore invalid commands (Arne Welzel, Corelight)\n\n    Do not propagate wrong FTP commands to script land.\n\n5.2.0-dev.593 | 2023-02-01 11:39:15 +0100\n\n  * Provide infrastructure to migrate legacy analyzers to in-tree\n    Spicy analyzers. As initial (trivial) examples, we port the Syslog\n    and Finger analyzers over to Spicy. The only user-visible change\n    is that we now detect Finger as service in `conn.log`. (Robin\n    Sommer, Corelight)\n\n  * GH-2675: Switch to building shared Spicy toolchain libraries by\n    default. Furthermore, Zeek itself no longer link against the\n    toolchain libraries itself because the Spicy plugin has removed\n    JIT support. But the other Spicy tools continue to do so, and\n    shrink in size now. (Robin Sommer, Corelight)\n\n  * Extend Zeekygen manager with method to check if it's active. (Robin Sommer, Corelight)\n\n5.2.0-dev.589 | 2023-02-01 09:02:00 +0100\n\n  * cirrus/containers: Do not install btest pcaps (Arne Welzel, Corelight)\n\n  * cirrus: Replace curl with _cache (Arne Welzel, Corelight)\n\n  * cirrus: Add cluster testing (Arne Welzel, Corelight)\n\n  * cirrus: Polish container_image_manifest_docker_builder (Arne Welzel, Corelight)\n\n  * cirrus: Use ccache for faster container builds (Arne Welzel, Corelight)\n\n  * cirrus: Add docker_builder tasks to build and push images (Arne Welzel, Corelight)\n\n  * github: No more docker workflow (Arne Welzel, Corelight)\n\n5.2.0-dev.579 | 2023-01-31 14:49:29 +0100\n\n  * mysql: Recognize when client/server negotiate SSL (Arne Welzel, Corelight)\n\n    This instantiates the SSL analyzer when the client requests SSL\n    so that Zeek now has a bit more visibility into encrypted MySQL\n    connections.\n\n    The pattern used is the same as in the IMAP, POP or XMPP analyzer.\n\n  * analyzer: Move disabling_analyzer() hook into Analyzer module (Arne Welzel, Corelight)\n\n    When disabling_analyzer() was introduced, it was added to the GLOBAL\n    module. The awkward side-effect is that implementing a hook handler\n    in another module requires to prefix it with GLOBAL. Alternatively, one\n    can re-open the GLOBAL module and implement the handler in that scope.\n\n    Both are not great, and prefixing with GLOBAL is ugly, so move the\n    identifier to the Analyzer module and ask users to prefix with Analyzer.\n\n  * Skip some error reporting when the record type has errors (Arne Welzel, Corelight)\n\n5.2.0-dev.571 | 2023-01-30 13:39:01 -0700\n\n  * Remove setting osx-sysroot on macOS CI builds (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.569 | 2023-01-30 09:19:23 -0700\n\n  * Whitespace cleanup in 5.2 NEWS block (Tim Wojtulewicz, Corelight)\n\n  * Updates to the NEWS for upcoming release/5.2 branching (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.566 | 2023-01-30 11:05:40 +0100\n\n  * GH-2698: broker/store: Extend SQLiteOptions around data safety and performance (Arne Welzel, Corelight)\n\n    Add configurability of synchronous and journal_mode for SQLite backed\n    Broker data stores. Setting these to synchronous=normal and journal_mode=wal\n    can significantly improve throughput at the cost of some durability in\n    the presence of power loss or OS crash. In the context of Zeek, this is\n    likely more than acceptable.\n\n    Additionally, add integrity_check and failure_mode options to support deleting\n    and re-opening a corrupted SQLite database at store creation.\n\n5.2.0-dev.563 | 2023-01-28 09:46:59 -0700\n\n  * Enable Debian 10 builds for PRs (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.561 | 2023-01-28 08:52:32 -0700\n\n  * Update smb1-OSS-fuzz-54883.pcap to have correct snaplen (Tim Wojtulewicz, Corelight)\n\n  * ci-notification: No notifications for \"skipped\" runs [skip ci] (Arne Welzel, Corelight)\n\n    It is not useful to receive email notifications for CI runs\n    that were skipped.\n\n5.2.0-dev.557 | 2023-01-27 13:24:58 -0700\n\n  * smb1: Prevent accessing uninitialized referenced_tree (Arne Welzel, Corelight)\n\n    The added pcap was created from an OSS Fuzz test case and is borderline\n    valid SMB traffic, but it triggered a scripting error.\n\n    Closes #2726\n\n5.2.0-dev.553 | 2023-01-27 13:23:09 -0700\n\n  * Add tooling section to README (Tim Wojtulewicz, Corelight)\n\n  * A bunch of other minor issues reported by PVS-Studio (Tim Wojtulewicz, Corelight)\n\n  * Simplify setup of IPv6 DNS resolvers (Tim Wojtulewicz, Corelight)\n\n  * Add missing assignment operators to RobustDictIterator (Tim Wojtulewicz, Corelight)\n\n  * Fix some member-variable shadowing issues (Tim Wojtulewicz, Corelight)\n\n  * Fix/simplify some if statement comparisons (Tim Wojtulewicz, Corelight)\n\n  * Fix a few minor int pointer value initializations (Tim Wojtulewicz, Corelight)\n\n  * Fix a bunch of missing class member initializations (Tim Wojtulewicz, Corelight)\n\n  * Remove unnecessary virtual specifiers from final classes (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.543 | 2023-01-27 12:08:28 -0700\n\n  * Add a few extra length checks to Teredo::DetectProtocol (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.541 | 2023-01-27 18:44:43 +0100\n\n  * github: cat the check_suite payload (Arne Welzel, Corelight)\n\n  * github: Send emails for success conclusion, too (Arne Welzel, Corelight)\n\n5.2.0-dev.538 | 2023-01-27 11:24:35 +0100\n\n  * testing/mysql: Add traces recorded with a free-tier MySQL instance (Arne Welzel, Corelight)\n\n  * MySQL: Fix endianness, introduce mysql_eof() event (Arne Welzel, Corelight)\n\n    We were parsing MySQL using bigendian even though the protocol is\n    specified as with \"least significant byte first\" [1]. This is most\n    problematic when parsing length encoded strings with 2 byte length\n    fields...\n\n    Further, I think, the EOF_Packet parsing was borked, either due to\n    testing the CLIENT_DEPRECATE_EOF with the wrong endianness, or due to\n    the workaround in Resultset processing raising mysql_ok(). Introduce a\n    new mysql_eof() that triggers for EOF_Packet's and remove the fake\n    mysql_ok() Resultset invocation to fix. Adapt the mysql script and tests\n    to account for the new event.\n\n    This is a quite backwards incompatible change on the event level, but\n    due to being quite buggy in general, doubt this matters to many.\n\n    [1] https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_basic_dt_integers.html\n\n5.2.0-dev.534 | 2023-01-26 20:06:24 +0100\n\n  * Tame error reporting and abort() for undefined types (Arne Welzel, Corelight)\n\n5.2.0-dev.532 | 2023-01-26 10:55:02 -0700\n\n  * Bump spicy to v1.6.1. (Benjamin Bannier, Corelight)\n\n5.2.0-dev.530 | 2023-01-26 09:44:36 -0700\n\n  * Update external testing repo commit hashes for Teredo changes (Tim Wojtulewicz, Corelight)\n\n  * Update scripts.base.frameworks.analyzer.logging btest to use a different trace file (Tim Wojtulewicz, Corelight)\n\n  * Update btest baselines due to reduced calls to UID::Set (Tim Wojtulewicz, Corelight)\n\n    UID::Set is called by AnalyzerViolation, and since Teredo isn't calling nearly\n    as many of those anymore the UIDs used by other calls changed as well.\n\n  * Rework TeredoAnalzyer::DetectProtocol to not catch as many packets (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.525 | 2023-01-26 09:11:45 -0700\n\n  * GH-2669: Give script location for type clash in for-loop construction (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.523 | 2023-01-26 14:37:35 +0100\n\n  * cirrus: Introduce SKIP_TASK_ON_PR (Arne Welzel, Corelight)\n\n    Limit the number of tasks we run on PRs to only a subset instead of\n    the full set to reduce the amount of resources we use for PRs. Labeling\n    a PR with \"fullci\" can be used enable running all tasks.\n\n    This removes a total of 14 task execution from PRs by default at the cost of\n    needing to monitor master builds more closely for distro specific breakage.\n\n5.2.0-dev.521 | 2023-01-25 14:11:03 -0700\n\n  * removed -O add-C++ option and updated documentation (Vern Paxson, Corelight)\n\n5.2.0-dev.519 | 2023-01-25 11:12:15 -0700\n\n  * GH-2684: Stop violating VXLAN for forwarding failures (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.515 | 2023-01-25 08:19:02 -0700\n\n  * Fix CI benchmark script to properly urlencode arguments (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.513 | 2023-01-24 09:01:42 -0700\n\n  * Add test for new handling of unknown RDP keyboards (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.510 | 2023-01-23 14:35:14 -0700\n\n  * Maintenance updates for -O gen-C++ / -O gen-standalone-C++ (Vern Paxson, Corelight)\n      fixes for using BiFs in standalone global initializations\n      avoiding redundant global initializations\n      updates to maintenance scripts and notes\n      removal of an unused member variable\n\n5.2.0-dev.508 | 2023-01-23 12:48:06 -0700\n\n  * Log raw keyboard value on best guess (jeff-bb)\n\n  * Avoid excessive fmt calls, return default behavior on unknown (jeff-bb)\n\n    Using \"in\" to query the language const. This also handles the case of not\n    having a best guess and continue using the existing behavior.\n    \n    Given\n    keyboard_layout = 1033 (0x0409), \"keyboard-English - United States\"\n    keyboard_layout = 66569 (0x00010409), \"keyboard-English - United States (Best Guess)\"\n    keyboard_layout = 12345 (0x3039), \"keyboard-12345\"\n\n  * \"Best Guess\" unknown keyboard / language variants (jeff-bb)\n\n    If the lookup table does not have an entry, it will just log as the raw\n    decimal language/keyboard code. With this change, if we do not have an entry\n    in the lookup table, we'll look at the low order / 4 least significant bits\n    to see if we have a match. The high order / 4 most significant bits are\n    flags/modifiers to the base language/keyboard code. We'll append that it is\n    a \"Best Guess\"\n\n5.2.0-dev.504 | 2023-01-23 09:37:47 -0700\n\n  * Update RDP Keyboard Languages (jeff-bb)\n\n    Using additional sources to add more languages / locales. Changed sort order to match other sections.\n\n5.2.0-dev.499 | 2023-01-19 09:14:07 -0700\n\n  * Reduce startup time on Windows by using std::filesystem::canonical (Tim Wojtulewicz)\n\n    realpath() apparently doesn't handle Windows symlinks very well. This\n    causes plugin::Manager and ScannedFile to rescan a bunch of extra\n    paths that they should be skipping. This commit reduces the startup\n    time on Windows by 3-4 seconds (~8.5s to ~5s).\n\n  * Fix diff-remove-abspath to ignore Windows drive letters (Tim Wojtulewicz)\n\n  * Re-enable the float/double versions of hton{d,f} on Windows (Tim Wojtulewicz)\n\n  * Make sure the DEBUG flag is defined when building in debug mode (Tim Wojtulewicz)\n\n    MSVC uses _DEBUG, unlike all of the other compilers, so we aren't\n    properly enabling/disabling varying bits of code that are dependent\n    on DEBUG being defined.\n\n  * Don't close the kqueue manually on shutdown on Windows (Tim Wojtulewicz)\n\n  * Fix MSVC compiler warning due to a type mismatch (Tim Wojtulewicz)\n\n  * GH-2565: Update libunistd submodule to fix builds on VS2022 (Tim Wojtulewicz)\n\n  * GH-2641: Lazy-load syslog to avoid creating bro.log on Windows (Tim Wojtulewicz)\n\n  * Use newer diff on Alpine for --strip-trailing-ci (Tim Wojtulewicz, Corelight)\n\n  * Update btest submodule to version that supports Windows (Tim Wojtulewicz)\n\n  * Use pathsep btest value in btest.cfg (Tim Wojtulewicz)\n\n  * Use build_dir btest value in btest.cfg (Tim Wojtulewicz)\n\n  * Fix zeek-path-dev.sh creation to better support Windows (Tim Wojtulewicz)\n\n  * Remove outdated distributions from CI. (Johanna Amann, Corelight)\n\n    Fedora 35: CI folder was forgotten during removal\n\n    Opensuse Leap 15.3: EOL was 2022\n\n    Openssl-3: No longer necessary, since part of distributions (e.g. Ubuntu\n    22.10)\n\n5.2.0-dev.483 | 2023-01-18 17:12:57 +0100\n\n  * Fix ZAM memory leak as reported in #2634 (Vern Paxson, Corelight)\n\n  * bifs/parse_eftp: Prevent reporter warnings/errors on invalid input (Arne Welzel, Corelight)\n\n    When passing invalid IPs or an out-of range port to parse_eftp()\n    a warning or error was generated on stderr (in addition to setting\n    the $valid field to F). Prevent the output by adding safe-guarding\n    and using IPAddr::ConvertString() instead.\n\n5.2.0-dev.478 | 2023-01-12 09:41:11 +0100\n\n  * fix for crashes when record definitions repeat a field name (Vern Paxson, Corelight)\n\n5.2.0-dev.476 | 2023-01-11 17:00:32 -0800\n\n  * CI updates (Christian Kreibich, Corelight)\n\n    - remove Fedora 35, now EOL\n    - avoid deprecated ::set-output use\n    - move action/checkout use to v3\n\n  * Bump zeek-archiver, zeek-af_packet-plugin, and doc submodules (Christian Kreibich, Corelight)\n\n  * Fixes to support the Npcap library on Windows (Tim Wojtulewicz, Corelight)\n\n  * GH-2645: fix for crash when specifying an unwriteable file to --profile-scripts (GH-2645) (Vern Paxson, Corelight)\n\n  * Fix a docstring typo (Christian Kreibich, Corelight)\n\n5.2.0-dev.464 | 2023-01-10 10:25:28 +0100\n\n  * Expand docstrings of file_new and file_over_new_connection events (Christian Kreibich, Corelight)\n\n  * GH-2031: analyzer: Add analyzer.log for logging violations/confirmations (Arne Welzel, Corelight)\n\n    By default this only logs all the violations, regardless of the\n    confirmation state (for which there's still dpd.log). It includes\n    packet, protocol and file analyzers.\n\n    This uses options, change handlers and event groups for toggling\n    the functionality at runtime.\n\n  * GH-2647: intel/seen/file-names: Use file_over_new_connection() (Arne Welzel, Corelight)\n\n    The seen/file-names script relies on f$info$filename to be populated.\n    For HTTP and other network protocols, however, this field is only\n    populated during file_over_new_connection() that's running after\n    file_new().\n\n    Use the file_new() event only for files without connections and\n    file_over_new_connection() implies that f$conns is populated, anyway.\n\n    Special case SMB to avoid finding files twice, because there's a\n    custom implementation in seen/smb-filenames.zeek.\n\n  * scripts/analyzer: Introduce Analyzer::requested_analyzers (Arne Welzel, Corelight)\n\n    In certain deployment scenarios, all analyzers are disabled by default.\n    However, conditionally/optionally loaded scripts may rely on analyzers\n    functioning and declare a request for them.\n\n    Add a global set set to the Analyzer module where external scripts can record\n    their requirement/request for a certain analyzer. Analyzers found in this\n    set are enabled at zeek_init() time.\n\n5.2.0-dev.453 | 2023-01-05 09:53:47 -0700\n\n  * Add error and abort if fuzzer requested is not found (Tim Wojtulewicz, Corelight)\n\n  * Add a bunch of new fuzzers and corpus data (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.450 | 2023-01-05 12:12:13 +0100\n\n  * EventRegistry/Func: Disable events when all bodies are disabled (Arne Welzel, Corelight)\n\n    Add state to Func for tracking if any enabled bodies exist which\n    allows us to propagate it up to the EventHandler::bool() operator.\n    In turn, when all bodies of an event's Func have been runtime disabled,\n    the event itself will not be invoked anymore.\n\n5.2.0-dev.447 | 2023-01-03 15:44:39 -0700\n\n  * Fix sprintf warnings on macOS (Tim Wojtulewicz, Corelight)\n\n    The most recent compiler update for macOS marked sprintf as\n    deprecated, so we started getting warnings from all of the places\n    that use it.\n\n5.2.0-dev.445 | 2023-01-03 12:10:20 -0700\n\n  * Update COPYING to 2023 (Tim Wojtulewicz, Corelight)\n\n  * Rename COPYING.3rdparty to COPYING-3rdparty (Tim Wojtulewicz, Corelight)\n\n    This keeps GitHub from being confused about this file being part of\n    the repository's license, and thus not displaying the proper linkage\n    to our actual COPYING file.\n\n5.2.0-dev.442 | 2023-01-03 12:09:10 -0700\n\n  * CI: avoid doing Windows builds with every push (Tim Wojtulewicz, Corelight)\n\n  * CI: drop macOS Big Sur, add macOS Ventura (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.437 | 2022-12-16 08:16:30 -0700\n\n  * GH-2637: Re-remove the bro symlink wrapper (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.435 | 2022-12-13 21:51:24 -0800\n\n  * Docker Hub: Push images to zeek/zeek and zeek/zeek-dev (Arne Welzel, Corelight)\n\n5.2.0-dev.432 | 2022-12-13 10:25:21 -0700\n\n  * Bump Spicy and spicy-plugin to latest releases. (Benjamin Bannier, Corelight)\n\n    This bumps Spicy to 1.6.0 and spicy-plugin to 1.4.2.\n\n5.2.0-dev.430 | 2022-12-13 11:50:47 +0100\n\n  * Func: Use std::stable_sort() for sorting bodies by priority (Arne Welzel, Corelight)\n\n5.2.0-dev.427 | 2022-12-13 11:37:47 +0100\n\n  * logging: Add event_groups to Stream (Arne Welzel, Corelight)\n\n    This commit adds an optional event_groups field to the Logging::Stream record\n    to associated event groups with logging streams.\n\n    This can be used to disable all event groups of a logging stream when it is\n    disabled. It does require making an explicit connection between the\n    logging stream and the involved groups, however.\n\n  * zeek.bif: Add has_event_group() / has_module_events() (Arne Welzel, Corelight)\n\n    Introduce helpers to determine if a given attribute or module event\n    group exists given a string.\n\n5.2.0-dev.422 | 2022-12-09 16:07:47 +0100\n\n  * maintenance updates for -O C++ (Vern Paxson, Corelight)\n\n  * maintenance updates for -O ZAM (Vern Paxson, Corelight)\n\n5.2.0-dev.418 | 2022-12-08 10:28:01 +0100\n\n  * dfa: Remove transition_counter (Arne Welzel, Corelight)\n\n5.2.0-dev.414 | 2022-12-06 12:21:44 +0100\n\n  * analyzer/files: handle non-analyzer names in describe_file() (Arne Welzel, Corelight)\n\n    When a fa_file object is created through the use of Input::add_analysis(),\n    the fa_file's source is likely not valid representation of an analyzer's\n    tag and a Files::describe() should not error and instead return an empty\n    description.\n\n  * frameworks/notice: Handle fa_file with no or more than a single connection better (Arne Welzel, Corelight)\n\n    * When a file is transferred over multiple connection, have\n      create_file_info() just pick the first one instead of none.\n\n    * Do not unconditionally assume cid and cuid as set on a\n      Notice::FileInfo object.\n\n5.2.0-dev.411 | 2022-12-06 12:15:42 +0100\n\n  * GH-2547: ContentLine: Fix spelling of \"suppress\", deprecate SupressWeirds() (Arne Welzel, Corelight)\n\n  * GH-2577: zeekygen/normalize_script_path: Special case plugin dirnames without _ (Arne Welzel, Corelight)\n\n    In normal installations, a plugin's basename has an underscore in it\n    to separate the namespace from the plugin name. E.g Zeek_Spicy. When\n    there is no underscore, this is most likely due to ./build being\n    picked up when using ZEEK_PLUGIN_PATH. The basename ends-up \"build\"\n    and is susceptible to collisions.\n\n    Prepend one parent directory as a heuristic to make this scenario less\n    likely, assuming ./build is usually below a repository checkout that\n    uniquely identifies the plugin.\n\n5.2.0-dev.407 | 2022-12-06 10:01:45 +0100\n\n  * Added several events for detailed info on the SSH2 key init directions (Joost Jansen)\n\n5.2.0-dev.404 | 2022-12-05 10:33:53 +0100\n\n  * Expose PA_ENC_TIMESTAMP to script land (nadavkluger)\n\n  * Update btest submodule [nomail] [skip ci] (Christian Kreibich, Corelight)\n\n5.2.0-dev.401 | 2022-12-04 18:36:56 -0800\n\n  * ID: Add AddAttr() helper (Arne Welzel, Corelight)\n\n  * GH-2628: Attr: Duplicated &is_used is allowed (Arne Welzel, Corelight)\n\n5.2.0-dev.398 | 2022-12-02 18:39:01 -0800\n\n  * parse.y: Allow trailing commas for table, set, vector and record construction (Arne Welzel, Corelight)\n\n  * ci/alpine: Use musl-fts-dev rather than fts-dev (Arne Welzel, Corelight)\n\n5.2.0-dev.393 | 2022-11-30 09:42:00 -0800\n\n  * GH-846: Expand Conn::Info$duration comment to clarify TCP end-of-connection handling (Christian Kreibich, Corelight)\n\n5.2.0-dev.391 | 2022-11-30 15:37:57 +0000\n\n  * script optimization fixes: (Vern Paxson, Corelight)\n     new initialization model for standalone C++ scripts\n     type coercion fix\n     ZAM fix for compiling using C++ optimizer\n     disambiguate empty constructors\n\n  * TimerMgr: Add back max_timer_expires=0 special case (Arne Welzel, Corelight)\n\n    Fixes #2514.\n\n  * Add btest for expiration of all pending timers. (Jan Grashoefer, Corelight)\n\n  * input: Add location info for invalid enums (Arne Welzel, Corelight)\n\n    Fixes #2613\n\n  * mqtt: Move from policy/ into base/ (Arne Welzel, Corelight)\n\n    Register dpd signatures and the analyzer when running in default mode.\n\n    Closes #2583\n\n  * Expr: Warn on count underflow for c -= 1 and c = c - 1 (Arne Welzel, Corelight)\n\n    Closes #2486\n\n  * Reporter: Add ExprRuntimeWarning() (Arne Welzel, Corelight)\n\n5.2.0-dev.376 | 2022-11-29 14:53:41 -0800\n\n  * smb: Drop references to uid_map in state. (Arne Welzel, Corelight)\n\n  * smb: Drop AUTH_LOG (Arne Welzel, Corelight)\n\n5.2.0-dev.373 | 2022-11-29 12:12:34 -0800\n\n  * CI: add Fedora 37 (Christian Kreibich, Corelight)\n\n5.2.0-dev.371 | 2022-11-28 17:37:28 -0800\n\n  * provide deprecated version of merge_type_list() (Vern Paxson, Corelight)\n\n  * keep merge_types() externally available; address reviewing suggestion (Vern Paxson, Corelight)\n\n  * change vector constructors to require direct type equivalence for non-arithmetics (Vern Paxson, Corelight)\n\n5.2.0-dev.365 | 2022-11-22 21:15:42 -0800\n\n  * Type coercion fix: transform +=/-= operators with arithmetic targets to explict assignments (Vern Paxson, Corelight)\n\n5.2.0-dev.363 | 2022-11-22 15:49:10 -0800\n\n  * zeekygen.bif: Drop using namespace zeekygen (Arne Welzel, Corelight)\n\n  * zeekygen: Add BIFs to access declaring scripts (Arne Welzel, Corelight)\n\n  * Update broker submodule [nomail] (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.359 | 2022-11-22 12:27:54 -0700\n\n  * Add additional length checking to IPv6::ToVal (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.357 | 2022-11-22 12:27:26 -0700\n\n  * ftp: Introduce FTP::max_command_length (Arne Welzel, Corelight)\n\n    oss-fuzz produced FTP traffic with a ~550KB long FTP command. Cap FTP command\n    length at 100 bytes, log a weird if a command is larger than that and move\n    on to the next. Likely it's not actual FTP traffic, but raising an\n    analyzer violation would allow clients an easy way to disable the analyzer\n    by sending an overly long command.\n\n    The added test PCAP was generated using a fake Python socket server/client.\n\n5.2.0-dev.355 | 2022-11-22 12:26:50 -0700\n\n  * http: Heuristic around rejecting malformed HTTP/0.9 traffic (Arne Welzel, Corelight)\n\n    oss-fuzz generated \"HTTP traffic\" containing 250k+ sequences of \"T<space>\\r\\r\"\n    which Zeek then logged as individual HTTP requests. Add a heuristic to bail\n    on such request lines. It's a bit specific to the test case, but should work.\n\n5.2.0-dev.352 | 2022-11-21 09:10:28 -0700\n\n  * Fix logic error in vfmt() when growing the buffer (Michael Dopheide)\n\n5.2.0-dev.350 | 2022-11-21 09:09:09 -0700\n\n  * Added NTLM challenge and response (nadavkluger)\n\n5.2.0-dev.347 | 2022-11-18 09:41:44 -0700\n\n  * docker/ecr: Push into zeek/zeek, not zeekurity/zeek (Arne Welzel, Corelight)\n\n5.2.0-dev.345 | 2022-11-18 09:41:08 -0700\n\n  * Fix warning in broker.web-socket-events btest (Dominik Charousset, Corelight)\n\n5.2.0-dev.343 | 2022-11-18 09:40:51 -0700\n\n  * Fix the strcasestr unit test (Tim Wojtulewicz)\n\n5.2.0-dev.341 | 2022-11-18 09:40:30 -0700\n\n  * spelling: repetitions (Josh Soref)\n\n5.2.0-dev.339 | 2022-11-18 11:49:47 +0100\n\n  * GH-2426: Fixing productive connections with missing SYN still considered partial after flipping direction. (Robin Sommer, Corelight)\n\n    In https://github.com/zeek/zeek/pull/2191, we added endpoint flipping\n    for cases where a connection starts with a SYN/ACK followed by ACK or\n    data. The goal was to treat the connection as productive and go ahead\n    and parse it. But the TCP analyzer could continue to consider it\n    partial after flipping, meaning that app layers would bail out. #2426\n    shows such a case: HTTP gets correctly activated after flipping\n    through content inspection, but it won't process anything because\n    `IsPartial()` returns true. As the is-partial state reflects\n    whether we saw the first packets each in direction, this patch now\n    overrides that state for the originally missing SYN after flipping.\n\n    We actually had the same problem at a couple of other locations already\n    as well. One of that only happened to work because of the originally\n    inconsistent state flipping that was fixed in the previous commit. The\n    corresponding unit test now broke after that change. This commit\n    updates that logic as well to override the state.\n\n5.2.0-dev.336 | 2022-11-17 16:28:40 -0800\n\n  * Publish container images to ECR in addition to docker.io. (Benjamin Bannier, Corelight)\n\n5.2.0-dev.334 | 2022-11-17 11:34:41 -0700\n\n  * Make dependency of `zeek` on spicy-plugin's driver object file explicit. (Benjamin Bannier, Corelight)\n\n5.2.0-dev.332 | 2022-11-17 11:31:23 -0700\n\n  * Spelling NEWS & CMakeLists.txt (Josh Soref)\n\n5.2.0-dev.330 | 2022-11-17 11:30:19 -0700\n\n  * Spelling testing (Josh Soref)\n\n5.2.0-dev.327 | 2022-11-16 14:55:02 -0700\n\n  * spelling: organization (Josh Soref)\n\n  * spelling: invalidate (Josh Soref)\n\n5.2.0-dev.324 | 2022-11-16 14:53:35 -0700\n\n  * spelling: github (Josh Soref)\n\n5.2.0-dev.322 | 2022-11-16 14:51:35 -0700\n\n  * smb1: Ensure existence of dialect_index in offered dialects (Arne Welzel, Corelight)\n\n5.2.0-dev.320 | 2022-11-16 14:50:58 -0700\n\n  * ssh: Test for c$ssh$analyzer_id existence (Arne Welzel, Corelight)\n\n5.2.0-dev.317 | 2022-11-15 11:34:47 -0700\n\n  * init-bare: Fix zeek:see after bif renaming (Arne Welzel, Corelight)\n\n5.2.0-dev.315 | 2022-11-14 13:19:33 -0700\n\n  * Update broker submodule [nomail] (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.313 | 2022-11-14 09:41:06 -0700\n\n  * Re-enable strcasestr on Windows, fix linking error (Tim Wojtulewicz)\n\n  * Minor renaming changes to event handler stats bif, plus a test (Tim Wojtulewicz, Corelight)\n\n  * Remove unneeded forward-declaration of select() (Tim Wojtulewicz, Corelight)\n\n  * Rework setting adding ports to map slightly (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.307 | 2022-11-11 15:13:47 -0700\n\n  * Merged support for Microsoft Windows (Tomer Lev, Elad Solomon, Microsoft)\n\n5.2.0-dev.234 | 2022-11-11 12:48:20 -0700\n\n  * Spelling src (Josh Soref)\n\n    Signed-off-by: Josh Soref <2119212+jsoref@users.noreply.github.com>\n\n5.2.0-dev.232 | 2022-11-09 18:23:11 -0700\n\n  * Script optimization maintenance and updates: (Vern Paxson, Corelight)\n      maintenance fixes for variadic run-time checks, '_' placeholder identifier\n      \"-O allow-cond\" permits compiling scripts to C++ when influenced by @if conditionals\n      more robust standalone compile-to-C++ properties\n      fix for nested \"when\" statements\n      test suite updates\n\n  * spelling: Fixes in pac files and functional changes in src directory (Josh Soref)\n\n    Signed-off-by: Josh Soref <2119212+jsoref@users.noreply.github.com>\n\n5.2.0-dev.215 | 2022-11-09 11:03:43 -0700\n\n  * Configure script: drop --with-caf, add -D option (Dominik Charousset, Corelight)\n\n5.2.0-dev.213 | 2022-11-09 08:51:08 -0700\n\n  * Update cmake submodule to remove STATIC_KQUEUE variable (Tim Wojtulewicz)\n\n  * Update doc submodule [nomail] [skip ci] (zeek-bot)\n\n  * Update zeek-testing-private commit hash (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.209 | 2022-11-08 16:44:48 -0700\n\n  * {http,smtp}/entities: Align header regexes with extract_filename_from_content_disposition() (Arne Welzel, Corelight)\n\n  * analyzer/HTTP: Call TCP_ApplicationAnalyzer::Done() after RequestMade()/ReplyMade() (Arne Welzel, Corelight)\n\n  * file_analysis/Analyzer: Limit maximum number of violations (Arne Welzel, Corelight)\n\n    Just the same as for protocol analyzers, prevent from violation event overload.\n\n  * test: Add btest verifying max_analyzer_violations functionality (Arne Welzel, Corelight)\n\n    The pcap has been generated roughly based on the example found on wikipedia\n    with some added garbled response after the STAT command from the client.\n\n  * analyzer: Cap analyzer violations at 1000 per analyzer instance (Arne Welzel, Corelight)\n\n  * Report an error if a key is too big for a DictEntry (Tim Wojtulewicz, Corelight)\n\n  * Use larger size variable for DictEntry key_size to avoid overflows with big keys (Tim Wojtulewicz, Corelight)\n\n  * ftp: Limit pending commands to FTP::max_pending_commands (default 20) (Arne Welzel, Corelight)\n\n  * Update baselines after AnalyzePacket changes (Arne Welzel, Corelight)\n\n    Mainly, for bad headers we do not (can not) put addresses into\n    the log anymore. Some were rather obviously bogus previously\n    already.\n\n  * protocol/ip: Only attach IP_Hdr to Packet if valid (Arne Welzel, Corelight)\n\n    Ensure packet->ip_hdr is not set (so no one can assume it's valid)\n    when AnalyzePacket() found something weird with the header.\n\n5.2.0-dev.198 | 2022-11-07 11:47:53 +0100\n\n  * Bump documentation.\n\n  * GH-2528: cluster: Add warning about cluster-layout.zeek content\n    (Arne Welzel, Corelight)\n\n5.2.0-dev.195 | 2022-11-07 11:22:31 +0100\n\n  * zeek-setup: Load builtin-plugins/__preload__.zeek before initializing bifs (Arne Welzel, Corelight)\n\n    Prevent errors as follows with the bro-http2 plugin.\n\n        error in /mitrecnd_HTTP2.events.bif.zeek, line 95: identifier not defined: http2_stream_stat\n        error in /mitrecnd_HTTP2.events.bif.zeek, line 363: identifier not defined: http2_settings\n        internal error in /mitrecnd_HTTP2.events.bif.zeek, line 460: Failed to find type named: http2_settings_unrecognized_table\n\n  * GH-2483: cmake: Introduce bro_PLUGIN_LINK_LIBS and add to link command. (Arne Welzel, Corelight)\n\n    When using --include-plugins with plugins that depend other libraries\n    using zeek_plugin_link_library(), these libraries were stashed into\n    bro_SUBDIR_LIBS that is used in add_executable(). However, that does not\n    work for shared libraries.\n\n    Explicitly track library dependencies in bro_PLUGIN_LINK_LIBS now and\n    use target_link_libraries() with Zeek (there's a change in cmake to\n    make zeek_plugin_link_library() populate bro_PLUGIN_LINK_LIBS instead).\n\n    Currently, zeekdeps needs to come after bro_PLUGIN_LINK_LIBS due to how\n    spicy-plugin (and other external plugins) fiddle with zeekdeps in order\n    to stash dependencies into the PARENT_SCOPE.\n\n    bro_PLUGIN_LINK_LIBS will continue to work with static libraries.\n\n    The failure occurred when attempting to include bro-http2 [1].\n\n    Fixes #2483\n\n    [1] https://github.com/MITRECND/bro-http2\n\n  * cmake: Do not use include_directories() for included plugins (Arne Welzel, Corelight)\n\n    There's a cmake repo change that does the include_directories() in\n    zeek_plugin_begin() unconditionally instead.\n\n5.2.0-dev.189 | 2022-11-04 09:15:57 -0700\n\n  * fuzzer-setup: Update ZEEKPATH to align with DEFAULT_ZEEKPATH (Arne Welzel, Corelight)\n\n    The util-config.h file uses @DEFAULT_ZEEKPATH@ which includes the\n    builtin-plugins directory. Do the same change for the fuzzers so\n    that scripts from builtin plugins can be found.\n\n    Fixes #2540\n\n5.2.0-dev.186 | 2022-11-03 09:21:35 -0700\n\n  * Add a missing deletion in ZAM code (Tim Wojtulewicz, Corelight)\n\n  * Add a couple of mising assignment operators to match copy constructors (Tim Wojtulewicz, Corelight)\n\n  * Fix a bunch of variable shadowing issues from LGTM (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.182 | 2022-11-03 08:57:39 -0700\n\n  * Add configure --display-cmake argument (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.180 | 2022-11-03 08:57:07 -0700\n\n  * Update external test hashes (Tim Wojtulewicz, Corelight)\n\n  * Update DNS type strings to match correct mappings (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.177 | 2022-11-03 08:56:24 -0700\n\n  * Add Ubuntu 22.10 to ci (Johanna Amann, Corelight)\n\n5.2.0-dev.175 | 2022-11-02 16:54:57 -0700\n\n  * Spelling fixes: scripts (Josh Soref)\n\n5.2.0-dev.173 | 2022-11-02 10:45:34 +0100\n\n  * GH-2440: parse.y: Traverse AST post parsing to detect break/next\n    usage issues (Arne Welzel, Corelight)\n\n5.2.0-dev.171 | 2022-11-01 07:47:41 -0700\n\n  * Func: Do not crash on va_args confusion for script funcs (Arne Welzel, Corelight)\n\n    Script and BIF functions with a single any parameter are excluded from\n    type checking regarding arguments. This makes it possible to call a\n    ScriptFunc with more arguments than it actually has parameters and frame\n    space for, causing heap-buffer-overflows.\n\n    This change runtime checks expected parameters and provided arguments\n    and short-circuits execution as well as logging runtime expression errors.\n\n    Fixes #2446\n\n5.2.0-dev.169 | 2022-10-31 15:18:04 -0700\n\n  * bifs/record_fields: Include actual enum name in type_name (Arne Welzel, Corelight)\n\n    One more from @stevesmoot. The record_fields() BIF produced \"enum\" as\n    type_name for fields of type enum.\n\n    Extend container_type_name() to append the actual name of the enum.\n\n    This is changing the format and may break consumers, but those are\n    likely in a category that are happy to adapt. Not having the actual\n    enum name available wasn't very helpful.\n\n    We could alternatively render only the actual type_name without the\n    prefixed \"enum\", but that isn't how it's done for record types currently\n    and it would make it more difficult to decide which subsequent BIFs to\n    use for further introspection, like enum_names().\n\n5.2.0-dev.167 | 2022-10-31 14:57:21 -0700\n\n  * IPBasedAnalyzer/TCPSessionAdapter: Fix TCP reassembly decision for known port analyzers (Arne Welzel, Corelight)\n\n    This seems to be an age-old bug. Reported by mchen on discourse [1].\n\n    The TCPSessionAdapter decides in AddExtraAnalyzers() whether to enable\n    reassembly or not. When dpd_reassemble_first_packets is F, this boils down to\n    ! GetChildren().empty(). The intention being that if any analyzers have been\n    added to the connection based on known ports, reassembly is to be enabled.\n\n    However, GetChildren() does not take into account new_children and so\n    ! GetChildren().empty() is always false here and reassembly solely\n    based on dpd_reassemble_first_packets=F (or the tcp_content... options).\n    Ouch.\n\n    Call AppendNewChildren() before AddExtraAnalyzers() as a fix. Without this,\n    the new test does not produce an http.log and service \"http\" isn't in conn.log.\n\n    [1] https://community.zeek.org/t/how-to-activate-an-application-layer-analyzer-when-signature-dpd-reassemble-first-packets-is-off/6763\n\n5.2.0-dev.162 | 2022-10-28 16:54:23 -0700\n\n  * GH-2425: cat_sep: Make fully vararg and do explicit runtime type checks (Arne Welzel, Corelight)\n\n  * Update cmake submodule (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.159 | 2022-10-28 15:44:57 -0700\n\n  * Update Spicy to the latest development snapshot. (Benjamin Bannier, Corelight)\n\n  * Bump spicy-plugin to v1.4.0. (Benjamin Bannier, Corelight)\n\n    spicy-plugin-1.4.0 changes behavior, so it is not backwards-compatible\n    with the spicy-plugin-1.3 series. This patch should not be backported to\n    LTS release branches.\n\n5.2.0-dev.156 | 2022-10-27 17:11:13 -0700\n\n  * Bump spicy-plugin to v1.3.21. (Benjamin Bannier, Corelight)\n\n5.2.0-dev.154 | 2022-10-27 17:09:55 -0700\n\n  * egrep reported as obsolete by opensuse-tumbleweed builds (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.150 | 2022-10-26 16:48:18 -0700\n\n  * Include in Jan's AF_PACKET plugin as builtin plugin (Arne Welzel, Corelight)\n\n  * Update doc submodule. (Robin Sommer, Corelight)\n\n5.2.0-dev.147 | 2022-10-26 11:37:24 +0200\n\n  * GH-2272: Use `json_escape_utf8` in broker debug output (AmazingPP)\n\n5.2.0-dev.145 | 2022-10-26 10:51:05 +0200\n\n  * Reintroduce event groups. (Arne Welzel, Corelight)\n\n    Allow the ``&group`` attribute on event and hook handlers for\n    annotating them with one or more event groups. These groups can be\n    disabled and enable during runtime. Disabling an event group\n    implies disabling all event and hook handlers that are part of it.\n\n    Additionally, event and hook handlers are implicitly placed into\n    event module groups based on the module they are implemented in.\n    All events implemented in a given module can be toggled with\n    ``disable_module_events()`` and ``enable_module_events()``.\n\n  * Update doc submodule [nomail] [skip ci] (zeek-bot)\n\n5.2.0-dev.142 | 2022-10-25 12:37:16 +0200\n\n  * enum_names: Support naming types with a string (Arne Welzel, Corelight)\n\n    Add support to enum_names() to transparently lookup the type if a string\n    is provided. This is similar in how record_fields() behaves when being\n    passed a string.\n\n5.2.0-dev.140 | 2022-10-25 12:34:39 +0200\n\n  * scripts: Migrate table iteration to blank identifiers (Arne Welzel, Corelight)\n\n  * Introduce special treatment for the blank identifier _ (Arne Welzel, Corelight)\n\n    Mostly: Do not instantiate variables within for loops and allow\n    reusing differently typed blanks which previously wasn't possible.\n\n  * Management framework: bump zeek-client and cluster testsuite (Christian Kreibich, Corelight)\n\n  * Add new zeek-client dependency to Dockerfile: python3-websocket (Christian Kreibich, Corelight)\n\n    This is a required dependency of zeek-client, and available as a .deb on Debian.\n\n  * Management framework: add websocket support to controller (Christian Kreibich, Corelight)\n\n    The controller now listens on an additional port, defaulting to 2149, for Broker\n    connections via websockets. Configuration works as for the existing traditional\n    Broker port (2150), via ZEEK_CONTROLLER_WEBSOCKET_ADDR and\n    ZEEK_CONTROLLER_WEBSOCKET_PORT environment variables, as well as corresponding\n    redef'able constants.\n\n    To disable the websockets feature, leave ZEEK_CONTROLLER_WEBSOCKET_PORT unset\n    and redefine Management::Controller::default_port_websocket to 0/unknown.\n\n5.2.0-dev.134 | 2022-10-24 08:10:06 -0700\n\n  * Re-enable ci-based benchmarking (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.131 | 2022-10-21 16:29:14 -0700\n\n  * Remove external CAF build for Coverity setup (Christian Kreibich, Corelight)\n\n5.2.0-dev.129 | 2022-10-21 12:24:25 -0700\n\n  * Remove cmake tests for LIBPCAP_PCAP_COMPILE_NOPCAP_HAS_ERROR_PARAMETER (Tim Wojtulewicz, Corelight)\n\n  * Rework the non-pcap version of BPF_Program::Compile (Tim Wojtulewicz, Corelight)\n\n  * Add btest that exercises the pcap filter warnings (Tim Wojtulewicz, Corelight)\n\n  * Restore reporting messages for pcap filter issues (Tim Wojtulewicz, Corelight)\n\n  * Add column to packet_filter.log for failure reason (Tim Wojtulewicz, Corelight)\n\n  * Store error message from BPF compilation (Tim Wojtulewicz, Corelight)\n\n  * Minor cleanup in BPF filtering code (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.120 | 2022-10-21 10:09:11 -0700\n\n  * Reorder includes in Options.cc (Tim Wojtulewicz, Corelight)\n\n  * Remove some leftover nb_dns stuff from the DNS_Mgr rework (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.116 | 2022-10-20 13:03:45 -0700\n\n  * Update bifcl, binpac, broker, cmake, gen-zam, and paraglob submodules (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.113 | 2022-10-18 08:30:45 -0700\n\n  * reset performance metrics every SizeUp() (Jason Lu)\n\n  * reduce space_distance_samples from int64_6 to uint32_t (Jason Lu)\n\n  * add performance based growth strategy (Jason Lu)\n\n5.2.0-dev.108 | 2022-10-17 16:18:55 -0700\n\n  * -O C++ maintenance updates to test suite (Vern Paxson, Corelight)\n\n  * -O gen-C++ maintenance: fixes for attributes & initializing globals (Vern Paxson, Corelight)\n\n5.2.0-dev.105 | 2022-10-17 08:48:20 -0700\n\n  * Surface a better CMake error if the user passes an invalid sanitizer name (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.103 | 2022-10-16 17:49:24 -0700\n\n  * plugins: Reject dynamic plugins matching names of built-in ones (Arne Welzel, Corelight)\n\n    This goes the hard-exit on conflicts route as IMO it provides better\n    messaging that something is wrong, rather than defaulting to something\n    the user may not expect.\n\n    Fixes #2403\n\n5.2.0-dev.101 | 2022-10-16 17:48:26 -0700\n\n  * Add &ordered attribute for tables/sets (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.99 | 2022-10-16 15:30:25 -0700\n\n  * Update zeek-3rdparty submodule for doctest/sqlite updates (Tim Wojtulewicz, Corelight)\n\n  * Update libkqueue submodule to latest upstream master (Tim Wojtulewicz, Corelight)\n\n  * Update rapidjson submodule to latest upstream master (Tim Wojtulewicz, Corelight)\n\n  * Update highwayhash submodule to latest upstream master (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.94 | 2022-10-13 15:12:19 -0500\n\n  * Add toplevel build dir to `PATH` for dev helper scripts. (Benjamin Bannier, Corelight)\n\n    We already added the toplevel build dir to the paths exposed by\n    `build/zeek-path-dev`, but never made the matching change for\n    `build/zeek-path-dev.[sh,csh]`. Due to that a shell would have never\n    found `zeek-config` from the build env like it would have been found for\n    installations, and could potentially even have picked up a different\n    one.\n\n5.2.0-dev.92 | 2022-10-13 15:10:51 -0500\n\n  * Update bifcl submodule to get fixes for DWARF information for lldb (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.90 | 2022-10-13 08:57:45 -0500\n\n  * ZAM maintenance for recent test suite changes (and fixups missed last time) (Vern Paxson, Corelight)\n\n5.2.0-dev.86 | 2022-10-12 15:56:23 -0500\n\n  * Update gen-zam and paraglob submodules for Coverity/clang-tidy fixes (Tim Wojtulewicz, Corelight)\n\n  * Fix some compiler warnings in script_opt (Tim Wojtulewicz, Corelight)\n\n  * Fix recent Coverity findings (Tim Wojtulewicz, Corelight)\n\n    1491334: AUTO_CAUSES_COPY due to a for loop using auto& instead of const auto&\n    1498652: AUTO_CAUSES_COPY due to a for loop using auto& instead of const auto&\n    1498745: AUTO_CAUSES_COPY due to a for loop using auto& instead of const auto&\n\n5.2.0-dev.82 | 2022-10-12 20:02:36 +0200\n\n  * Move API for disabling packet analyzers into component. (Robin Sommer)\n\n    Before, that API was part of the analyzers themselves, which meant\n    we couldn't disable a packet analyzer before it had been\n    instantiated. That was different from protocol/file analyzers,\n    where we disable them through the corresponding component.\n\n  * Suppress warning on an existing packet analyzer being remapped. (Robin Sommer)\n\n5.2.0-dev.79 | 2022-10-12 09:32:38 -0700\n\n  * smtp: Prevent script errors when smtp$entity is not set (Tim Wojtulewicz, Corelight)\n\n    This is the same issue presented in 38e226bf75772dad8769fa4b5ae61fabb5fb34b9 but\n    for SMTP instead of HTTP.\n\n5.2.0-dev.77 | 2022-10-10 11:10:31 -0700\n\n  * Disable robust iteration for ordered dictionaries (Tim Wojtulewicz, Corelight)\n\n    This also includes some minor commenting cleanup in that class\n\n  * Add support for itertors with ordered dictionaries (Tim Wojtulewicz, Corelight)\n\n  * Add equality, inequality, copy, and move operators to HashKey (Tim Wojtulewicz, Corelight)\n\n  * Disable annoying bugprone-easily-swappable-parameters clang-tidy check [skip ci] (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.70 | 2022-10-06 14:18:18 -0700\n\n  * Remove stray `/` at the end of directory name. (Benjamin Bannier, Corelight)\n\n    This variable is used to construct a path where the trailing `/` lead to\n    full paths like `/foo/spicy-plugin//spicyz`.\n\n  * Remove commented out code. (Benjamin Bannier, Corelight)\n\n  * Bump spicy-plugin to v1.3.19. (Benjamin Bannier, Corelight)\n\n5.2.0-dev.66 | 2022-10-06 14:15:01 -0700\n\n  * Update CT log list. (Johanna Amann, Corelight)\n\n    This uses the v3 json as a source for the first time. The test needed\n    some updating because Google removed a couple more logs - in the future\n    this should hopefully not be neccessary anymore because I think v3\n    should retain all logs.\n\n    In theory this might be neat in 5.1.\n\n5.2.0-dev.51 | 2022-10-05 13:27:08 +0200\n\n  * analyzer: Add file_analyzer support to enable_analyzer()/disable_analyzer() (Arne Welzel, Corelight)\n\n5.2.0-dev.46 | 2022-10-03 09:45:05 -0700\n\n  * use dynamic rather than static initialization of globals for scripts compiled to C++ (Vern Paxson, Corelight)\n\n  * safety checking for initializing scripts compiled to C++ (Vern Paxson, Corelight)\n\n  * fixes for initializing scripts compiled to C++ (Vern Paxson, Corelight)\n\n  * restructured tracking of initializations of globals for script compilation (Vern Paxson, Corelight)\n\n5.2.0-dev.40 | 2022-10-03 09:44:40 -0700\n\n  * http: Prevent script errors when http$current_entity is not set (Arne Welzel, Corelight)\n\n    The current_entity tracking in HTTP assumes that client/server never\n    send HTTP entities at the same time. The attached pcap (generated\n    artificially) violates this and triggers:\n\n        1663698249.307259 expression error in <...>base/protocols/http/./entities.zeek, line 89: field value missing (HTTP::c$http$current_entity)\n\n    For the http-no-crlf test, include weird.log as baseline. Now that weird is\n    @load'ed from http, it is actually created and seems to make sense\n    to btest-diff it, too.\n\n5.2.0-dev.38 | 2022-10-03 09:08:42 -0700\n\n  * Fix some Coverity issues in the recent ZAM updates (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.35 | 2022-09-30 16:40:22 -0700\n\n  * fixes for compiling \"standalone\" C++ scripts (Vern Paxson, Corelight)\n\n5.2.0-dev.33 | 2022-09-30 12:36:34 -0700\n\n  * fix for deprecated when's where the inner frame is larger than the outer frame (Vern Paxson, Corelight)\n\n5.2.0-dev.31 | 2022-09-30 10:03:00 +0200\n\n  * const: Deprecate tunnel-specific enable_* flags (Arne Welzel, Corelight)\n\n    With packet analyzers being toggle-able at runtime these can go.\n    They hadn't been consistently implemented either (VXLAN, Geneve).\n\n  * packet_analysis: Introduce PacketAnalyzer::__disable_analyzer() (Arne Welzel, Corelight)\n\n    This adds machinery to the packet_analysis manager for disabling\n    and enabling packet analyzers and implements two low-level bifs\n    to use it.\n\n    Extend Analyzer::enable_analyzer() and Analyzer::disable_analyzer()\n    to transparently work with packet analyzers, too. This also allows\n    to add packet analyzers to Analyzer::disabled_analyzers.\n\n5.2.0-dev.27 | 2022-09-28 10:34:28 +0200\n\n  * Bump `bifcl` and `doc` submodules. (Robin Sommer)\n\n5.2.0-dev.25 | 2022-09-28 10:00:40 +0200\n\n  * Introduce generic analyzer_confirmation_info and\n    analyzer_violation_info (Arne Welzel, Corelight)\n\n    Introduce two new events for analyzer confirmation and analyzer violation\n    reporting. The current analyzer_confirmation and analyzer_violation\n    events assume connection objects and analyzer ids are available which\n    is not always the case. We're already passing aid=0 for packet analyzers\n    and there's not currently a way to report violations from file analyzers\n    using analyzer_violation, for example.\n\n    These new events use an extensible Info record approach so that additional\n    (optional) information can be added later without changing the signature.\n    It would allow for per analyzer extensions to the info records to pass\n    analyzer specific info to script land. It's not clear that this would be\n    a good idea, however.\n\n    The previous analyzer_confirmation and analyzer_violation events\n    continue to exist, but are deprecated and will be removed with Zeek 6.1.\n\n  * GH-133: packet_analysis: Protect from nullptr sessions (Arne\n    Welzel, Corelight) Passing nullptr sessions to\n    AnalyzerConfirmation and AnalyzerViolation of protocol analyzers\n    previously blew up - protect from that.\n\n  * packet_analysis: Raise violations once (and don't raise\n    confirmations after violations) (Arne Welzel, Corelight) This is\n    mostly to avoid per-packet violations for packet analyzers that\n    have sessions attached to them.\n\n  * Introduce basic test triggering when zeek -r triggers script\n    errors. (Arne Welzel, Corelight)\n\n  * file_analysis: Implement AnalyzerViolation() for\n    file_analysis/Analyzer (Arne Welzel, Corelight)\n\n5.2.0-dev.19 | 2022-09-27 13:32:20 +0200\n\n  * GH-2422: cmake: Exclude empty directories due to headers install\n    (Arne Welzel, Corelight)\n\n5.2.0-dev.17 | 2022-09-27 13:30:27 +0200\n\n  * packet_analysis: Do not raise analyzer_confirmation per-packet for\n    tunnels (Arne Welzel, Corelight)\n\n5.2.0-dev.15 | 2022-09-23 13:33:16 -0700\n\n  * Skip darwin builds on zeek-security repo (Tim Wojtulewicz, Corelight)\n\n5.2.0-dev.12 | 2022-09-20 21:11:02 -0700\n\n  * scripts/conn: Open-code determine_service() (Arne Welzel, Corelight)\n\n  * Make connection$service_violation a set[string] (Arne Welzel, Corelight)\n\n  * strings: Implement join_string_set() as bif (Arne Welzel, Corelight)\n\n  * GH-2388: dpd: Replace negated service fmt() magic with dedicated field (Arne Welzel, Corelight)\n\n5.2.0-dev.6 | 2022-09-20 13:04:41 -0700\n\n  * Dict: Mark iterator move operator/constructors as noexcept (Tim Wojtulewicz, Corelight)\n\n  * Remove unused headers from Dict.cc (Tim Wojtulewicz, Corelight)\n\n  * Dict: Reduce some math required in repeatedly-called functions (Tim Wojtulewicz)\n\n  * Dict: use std::log2, remove custom Log2 method (Tim Wojtulewicz)\n\n  * Fix some typos in the 5.1.0 NEWS (Tim Wojtulewicz, Corelight)\n\n  * Start of 5.2.0 development (Tim Wojtulewicz, Corelight)\n\n  * Replace all the Warning() calls after IsFieldDeprecated() over to Warn() (AmazingPP)\n\n  * Fix deprecation not flagged and incorrect line number in record (AmazingPP)\n\n5.1.0-dev.535 | 2022-09-19 13:51:11 -0700\n\n  * updates to notes for compile-to-C++ maintenance (Vern Paxson, Corelight)\n\n  * fix deprecated \"local\" scoping in test scripts (Vern Paxson, Corelight)\n\n  * C++ script generation fix for lambdas that have identical bodies (Vern Paxson, Corelight)\n\n  * fix for C++ scripts that refer to \"opaque\" types (Vern Paxson, Corelight)\n\n  * C++ compilation support for 2-valued vector \"for\" loops (Vern Paxson, Corelight)\n\n  * C++ compilation support for RE /s operator (Vern Paxson, Corelight)\n\n  * run-time checking of vector operations for overflows and division-by-zero (Vern Paxson, Corelight)\n\n  * error propagation fix to avoid a crash (Vern Paxson, Corelight)\n\n5.1.0-dev.517 | 2022-09-19 13:44:13 -0700\n\n  * specialized ZAM operators for speeding up cat() operations (Vern Paxson, Corelight)\n\n  * ZAM support for two-valued \"for\" loops over vectors (Vern Paxson, Corelight)\n\n  * make it non-fatal for optimized scripts to encounter an empty \"for\" body (Vern Paxson, Corelight)\n\n  * script optimization fix for new-style table constructors (Vern Paxson, Corelight)\n\n5.1.0-dev.511 | 2022-09-19 12:41:31 -0700\n\n  * Add better length check to BuildOptionsVal() (Tim Wojtulewicz, Corelight)\n\n  * smb: Unify transaction_data_to_val() usage (Arne Welzel, Corelight)\n\n    the data/string handling in smb1-com-transaction.pcac was improved\n    with c75519ca8869448efc488598090f96d63352312f, re-use the added\n    functionality also for smb1-com-transaction-secondary.pac to avoid\n    buffer overflows.\n\n  * Add some additional checks for caplen in ICMP analyzer (Tim Wojtulewicz, Corelight)\n\n  * irc: Check parts.size() before removing the nick (Arne Welzel, Corelight)\n\n    ...also, don't remove the nick twice.\n\n  * Check IP payload length before casting to transport structure (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.506 | 2022-09-15 11:11:57 -0400\n\n  * Use NextStream instead of ForwardStream in fuzzers (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.504 | 2022-09-13 08:09:27 -0400\n\n  * Bump spicy-plugin to v1.3.18. (Benjamin Bannier, Corelight)\n\n5.1.0-dev.500 | 2022-09-09 09:37:48 -0700\n\n  * CI: remove FreeBSD 13.0, update FreeBSD 12 to 12.3 (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.497 | 2022-09-07 14:31:07 +0200\n\n  * GH-2289: parse.y/directives: Reject directives as statements (Arne Welzel, Corelight)\n\n    Conditional directives (``@if``, ``@ifdef``, ``@ifndef``, ``@else`` and ``@endif``)\n    can not be placed directly following ``if``, ``for`` or ``while`` statements\n    anymore. This was interpreted non-intuitively and could lead to subtle bugs.\n    The statement following the directive was placed outside of its intended block.\n    Placing braces after ``if``, ``for`` or ``while`` should result in the\n    intended behavior.\n\n5.1.0-dev.495 | 2022-09-07 14:29:32 +0200\n\n  * frameworks/dpd: Move to frameworks/analyzer/dpd, load by default\n    (Arne Welzel, Corelight)\n\n5.1.0-dev.489 | 2022-09-06 07:44:18 -0700\n\n  * Add is_used attribute to an ID if used in a signature eval statement (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.486 | 2022-09-02 13:57:31 -0700\n\n  * Update Management framework to new Supervisor::NodeConfig script fields (Christian Kreibich, Corelight)\n\n  * Suppress deprecation warnings for the Supervisor's own NodeConfig::script access (Christian Kreibich, Corelight)\n\n  * Expand Supervisor to support loading additional scripts before user scripts (Christian Kreibich, Corelight)\n\n5.1.0-dev.481 | 2022-09-01 00:52:02 +0000\n\n  * Fix warning in modbus analyzer (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.479 | 2022-08-31 10:50:05 -0700\n\n  * telemetry: Use dynamic metrics port, remove broker topic mentioning from NEWS entry (Arne Welzel, Corelight)\n\n  * telemetry: In a cluster, open port 9911 for Prometheus by default (Arne Welzel, Corelight)\n\n5.1.0-dev.476 | 2022-08-31 08:16:53 -0700\n\n  * bifs/to_port: Avoid ASAN errors when calling to_port(\"\") (Arne Welzel, Corelight)\n\n    Ran into this when using to_port(getenv(...)) for an undefined/empty\n    environment variable. ASAN doesn't like that the slash variable ends\n    up being access behind the string.\n\n5.1.0-dev.473 | 2022-08-29 09:26:56 -0700\n\n  * Add type checking to string_cat arguments (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.471 | 2022-08-26 14:49:04 -0700\n\n  * gtpv1: Do not register for protocol detection (Arne Welzel, Corelight)\n\n5.1.0-dev.469 | 2022-08-26 14:36:03 -0700\n\n  * Move fuzzer corpus files to another directory (Tim Wojtulewicz, Corelight)\n\n  * Add a way to create generic fuzzers without creating new files (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.466 | 2022-08-26 11:00:06 -0700\n\n  * Check for valid ip_hdr length before trying to make a Val out of it (Tim Wojtulewicz, Corelight)\n\n  * Fix potential overflow in modbus analyzer's bytestring_to_coils (Tim Wojtulewicz, Corelight)\n\n  * Add some sanity checking to BadARPEvent method (Tim Wojtulewicz, Corelight)\n\n  * Swap DNS EDNS field order to match script-land type (Tim Wojtulewicz, Corelight)\n\n  * Reset packet cap_len before returning from IP::AnalyzePacket (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.461 | 2022-08-26 09:09:23 -0700\n\n  * Revert to regular peering fn for ssl_auth_failure (Dominik Charousset, Corelight)\n\n    With the fixed Broker version, the `ssl_auth_failure` btest can use the\n    regular `peer` function again.\n\n  * Bump Spicy dependencies to spicy-1.5.1 and spicy-plugin-1.3.17. (Benjamin Bannier, Corelight)\n\n    (cherry picked from commit 7e1840f5fed47ddaa9111f265bb647f16c49663a)\n\n5.1.0-dev.457 | 2022-08-25 15:15:29 -0700\n\n  * Switch macOS Monterey build to new m1-based VM (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.455 | 2022-08-25 12:46:00 -0700\n\n  * Avoid race conditions in broker.ssl_auth_failure btest (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.452 | 2022-08-24 09:33:58 -0700\n\n  * Use correct variable to pass existing Spicy root to spicy-plugin. (Benjamin Bannier, Corelight)\n\n    spicy-plugin can find Spicy in paths given by `SPICY_ROOT_DIR` while\n    `./configure` instead set `SPICY_ROOT`. With this patch we now set the\n    correct variable.\n\n    We also adjust variations of the previous variable name with different\n    capitalization which caused us to not properly configure spicy-plugin\n    (which triggers finding Spicy in its given prefix).\n\n    Closes #2363.\n\n5.1.0-dev.450 | 2022-08-24 09:22:47 -0700\n\n  * Skip test based on preprocessor flag set by cmake (Simeon Miteff, Corelight)\n\n    Relies on change in d42dcb2d55029975a6a6b2e6378fc49a268631ec\n\n  * Set flag for libpcap without DLT_LINUX_SLL2 (Simeon Miteff, Corelight)\n\n    Requires\n    https://github.com/zeek/cmake/commit/6fd82a7e1d626f68ebf616b45f9bec11ca49d295\n\n    Submodule edited until that can be merged.\n\n  * Force event order in core/init-error btest (Simeon Miteff, Corelight)\n\n    See https://github.com/zeek/zeek/pull/2340#issuecomment-1218131444\n\n  * Add support for DLT_LINUX_SLL2 PCAP link-type (Simeon Miteff, Corelight)\n\n5.1.0-dev.442 | 2022-08-24 13:22:17 +0100\n\n  * Add Broker::metrics_import_topics (Arne Welzel & Dominik Charousset, both Corelight)\n\n5.1.0-dev.439 | 2022-08-23 20:28:05 -0700\n\n  * parse.y/anonymous_function: Allow conditionals between begin_lambda and lambda_body (Arne Welzel, Corelight)\n\n    This is to allow conditional statements following a lambda header\n    (begin_lambda) just as is done with func_hdr conditional_list func_body.\n\n5.1.0-dev.436 | 2022-08-23 10:19:23 -0700\n\n  * Deprecate misc/scan.zeek (Arne Welzel, Corelight)\n\n5.1.0-dev.434 | 2022-08-23 09:33:42 -0700\n\n  * stmt: Support iterating over vector values (Arne Welzel, Corelight)\n\n5.1.0-dev.432 | 2022-08-22 17:34:10 -0700\n\n  * Truncate Docker image artifact at end of Docker CI workflow (Christian Kreibich, Corelight)\n\n5.1.0-dev.430 | 2022-08-22 16:12:28 -0700\n\n  * Fix signed comparison warnings in bytestring_to_count (Tim Wojtulewicz)\n\n5.1.0-dev.428 | 2022-08-22 14:16:59 -0700\n\n  * Bump doc to pull in Sphinx exclusion for autogenerated files (Christian Kreibich, Corelight)\n\n  * Remove long-unused BRO_DISABLE_BROXYGEN env var from btests (Christian Kreibich, Corelight)\n\n  * Add Sphinx label to Zeekygen-generated plugin docs (Christian Kreibich, Corelight)\n\n5.1.0-dev.424 | 2022-08-22 10:56:47 -0700\n\n  * Merge branch 'topic/timw/parse-packet-results' (Tim Wojtulewicz, Corelight)\n\n    * topic/timw/parse-packet-results:\n      Make result of IP::ParsePacket easier to understand\n      Remove reporter warning for bad IP protocols\n\n  * Make result of IP::ParsePacket easier to understand (Tim Wojtulewicz, Corelight)\n\n  * Remove reporter warning for bad IP protocols (Tim Wojtulewicz, Corelight)\n\n    It turns out that this can be *very* spammy on networks where we're receiving\n    lots of these packets, and can fill up the reporter log very quickly. Weirds are\n    already reported in all of these cases anyways, so it doesn't make sense to log\n    a reporter warning too.\n\n5.1.0-dev.421 | 2022-08-19 15:23:22 -0700\n\n  * Remove unified2 file analyzer (Arne Welzel, Corelight)\n\n5.1.0-dev.419 | 2022-08-19 14:57:12 -0700\n\n  * Remove barnyard2 integration scripts (Arne Welzel, Corelight)\n\n5.1.0-dev.417 | 2022-08-18 15:56:49 -0700\n\n  * Retroactively cover log filter predicate deprecation/removal in NEWS (Christian Kreibich, Corelight)\n\n5.1.0-dev.414 | 2022-08-17 15:46:05 -0700\n\n  * Support other byte lengths in bytestring_to_count (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.412 | 2022-08-17 13:31:13 -0700\n\n  * Alignment tweak in help output (Christian Kreibich, Corelight)\n\n5.1.0-dev.410 | 2022-08-17 13:29:01 -0700\n\n  * GH-163: Use ID name (including module name) to create EventExpr when possible (Tim Wojtulewicz, Corelight)\n\n    The change to the capture-loss test is actually a fix for a bug exposed by the\n    code change. Previously it wasn't firing the scheduled event because of a failed\n    name lookup. Now that the lookup has been fixed, the event happens twice.\n\n5.1.0-dev.408 | 2022-08-17 09:00:50 -0700\n\n  * Use ForwardStream in fuzzers instead of DeliverStream (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.406 | 2022-08-17 10:38:07 +0200\n\n  * Fix code formatting. (Robin Sommer, Corelight)\n\n5.1.0-dev.405 | 2022-08-17 09:07:33 +0200\n\n  * Add support for parsing TCP option 27, and validate lengths for\n    TCP options 28, 29, & 34. (Fatema BW)\n\n5.1.0-dev.393 | 2022-08-17 08:59:11 +0200\n\n  * files.log: Unroll and introduce uid and id fields (Arne Welzel, Corelight)\n\n    This is a script-only change that unrolls File::Info records into\n    multiple files.log entries if the same file was seen over different\n    connections by a single worker. Consequently, the File::Info record\n    gets the commonly used uid and id fields added. These fields are\n    optional for File::Info - a file may be analyzed without relation\n    to a network connection (e.g by using Input::add_analysis()).\n\n    The existing tx_hosts, rx_hosts and conn_uids fields of Files::Info\n    are not meaningful after this change and removed by default. Therefore,\n    files.log will have them removed, too.\n\n    The tx_hosts, rx_hosts and conn_uids fields can be revived by using the\n    policy script frameworks/files/deprecated-txhosts-rxhosts-connuids.zeek\n    included in the distribution. However, with v6.1 this script will be\n    removed.\n\n5.1.0-dev.391 | 2022-08-16 09:17:06 -0700\n\n  * Fix a swath of AUTO_CAUSES_COPY issues reported by Coverity (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.389 | 2022-08-15 09:22:30 -0700\n\n  * Update zeek-testing-private commit hash after email regex changes (Tim Wojtulewicz, Corelight)\n\n    Related to https://github.com/zeek/zeek/pull/2221\n\n5.1.0-dev.386 | 2022-08-11 11:56:55 -0700\n\n  * Add a field to Modbus/TCP log to indicate the Modbus PDU type (Michael Torres)\n\n    Add the `pdu_type` field to Modbus over TCP logs to indicate whether the Modbus\n    message was a request or a response. Due to the client/server nature of Modbus\n    over TCP/IP, all messages from the TCP session originator are requests, while\n    all messages from the TCP session responder are responses.\n\n    Adding this information to the default log surfaces protocol metadata in a way\n    that doesn't require users to understand the Modbus over TCP protocol.\n\n  * Add modbus transaction and unit ids to logs (Michael Torres)\n\n    Add transaction IDs and unit IDs to default modbus over TCP/IP logs.\n    Update the relevant testing baselines to account for the extra fields.\n\n  * Enable modbus logging for requests (Michael Torres)\n\n5.1.0-dev.382 | 2022-08-11 10:41:08 -0700\n\n  * UPDATED: improving email address splitting for common comma case (TheAvgJojo)\n\n5.1.0-dev.380 | 2022-08-11 10:30:33 -0700\n\n  * Fix a crash related to a broken IPv6 chain (Tim Wojtulewicz)\n\n  * Add a couple of ICMP files to corpus for packet-fuzzer (Tim Wojtulewicz, Corelight)\n\n  * Trick event handlers into returning that they exist during fuzzing (Tim Wojtulewicz, Corelight)\n\n  * Add http, ftp, imap, and smtp fuzzers and corpora (Tim Wojtulewicz, Corelight)\n\n  * Add section to fuzzer README about generating corpus from pcaps (Tim Wojtulewicz, Corelight)\n\n  * Rename fuzzers/README to README.rst so github renders it (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.373 | 2022-08-11 08:49:22 -0700\n\n  * Add table_keys function (AmazingPP)\n\n  * Add table_values function (AmazingPP)\n\n5.1.0-dev.368 | 2022-08-11 16:01:32 +0200\n\n  * GH-1678: Introduce global disabling_analyzer() hook to veto disable_analyzer() (Arne Welzel, Corelight)\n\n    This hook can be used to coordinate disabling an analyzer for a\n    given connection. The contract is simple: Any script can veto a\n    disable_analyzer() call by breaking from this hook. The decision\n    is local to the script taking into account any state attached to\n    the connection object or script specific state stored elsewhere. A\n    script breaking from the hook takes over the responsibility to\n    call disable_analyzer() at a later point when it finds the\n    condition due to which it vetoed fulfilled (which may be never).\n\n    Signature:\n\n        disabling_analyzer: hook(c: connection, atype: AllAnalyzers::Tag, aid: count);\n\n    Example use-cases are keeping the SSL analyzer enabled for\n    finger-printing until a certain amount of bytes or packets have\n    been transferred or similarly the connection duration exceed a\n    certain threshold.\n\n    Other example use-cases might be keeping analyzers for SSH, RDP or SSL\n    enabled for connections from specific subnets.\n\n  * ssl: Only delete `c$ssl$analyzer_id` when disabling the analyzer\n    was successful (Arne Welzel, Corelight)\n\n5.1.0-dev.364 | 2022-08-11 11:59:00 +0200\n\n  * GH-2000: Support redef'ing the &log attribute of record fields (Arne Welzel, Corelight)\n\n    Add new syntax for adding and removing attributes from record fields:\n\n        redef RecordType$field_name += { &log };\n        redef RecordType$field_name -= { &log };\n\n    For now this only allowed for the &log attribute as the semantics are clear.\n    For &default and &optional the semantics aren't obvious and no use-cases have\n    been identified where those would make sense to change.\n\n    This enables a mechanism to add potentially interesting fields to the typical\n    Info records in base scripts, but letting users opt-into actually including\n    them into their log. At the same time, users that find specific fields in a\n    standard log uninteresting can opt-out without using `Log::Filter$exclude`\n    which can be difficult to use correctly. Patching or forking external packages\n    to remove columns from a log can also be avoided with this mechanism.\n\n    Closes #2000.\n\n  * GH-2262: telemetry: Remove singleton BIFs and the C++ pieces (Arne Welzel, Corelight)\n\n    The low-level singleton Telemetry BIFs have been removed with the that there\n    haven't been any users. Singleton metrics can be instantiated by providing\n    an empty label vector instead and aren't in any way a special concept.\n\n    Closes #2262.\n\n5.1.0-dev.360 | 2022-08-11 11:52:26 +0200\n\n  * telemetry: Switch to histogram family bucket and bound accessors\n    (Arne Welzel, Corelight)\n\n5.1.0-dev.357 | 2022-08-10 14:16:33 -0700\n\n  * Management framework: minor bugfixes and tweaks (Christian Kreibich, Corelight)\n\n    - bump cluster testsuite\n    - log node set in dispatch requests cleanly\n    - log additional node events\n    - upon deployment, make agent log multiple node results\n    - fix early return condition for get-id-value\n\n5.1.0-dev.351 | 2022-08-09 09:50:13 -0700\n\n  * Fix module-scoped type definitions that conflict with existing global ones (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.349 | 2022-08-08 11:09:04 -0700\n\n  * lower priority for change handlers (Yacin Nadji, Corelight)\n\n  * split update_zones_regex into two functions (Yacin Nadji, Corelight)\n\n5.1.0-dev.344 | 2022-08-08 11:03:24 -0700\n\n  * Squelch the zeekygen warnings for command line (AmazingPP)\n\n5.1.0-dev.341 | 2022-08-05 16:21:13 +0000\n\n  * Added test case with back-to-back notices (Annie Bryan)\n\n  * Fix notice suppression atomicity bug (Annie Bryan)\n\n5.1.0-dev.337 | 2022-08-05 16:19:59 +0000\n\n  * GH-2034: Store module names and use them in lookups for ifdef (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.335 | 2022-08-05 16:50:18 +0200\n\n  * Introduce telemetry framework (Arne Welzel, Corelight)\n\n    Adds base/frameworks/telemetry with wrappers around telemetry.bif\n    and updates telemetry/Manager to support collecting metrics from\n    script land.\n\n    Adds policy/frameworks/telemetry/log for logging of metrics data\n    into a new telemetry.log and telemetry_histogram.log and add into\n    local.zeek by default.\n\n5.1.0-dev.331 | 2022-08-03 10:27:28 -0700\n\n  * input/config: Use thread-safe Fmt() rather than util::fmt() for regex formatting (Arne Welzel, Corelight)\n\n    Calling util::fmt() from DoUpdate() of a thread is not safe as it is\n    using a statically allocated buffer and other threads or the main\n    thread may concurrently modify this buffer.\n\n    This was found by observing the scripts.base.frameworks.config.several-files\n    failing once in a blue moon (1/250 sometimes 1/1000 runs) with messages like\n    \"Failed to compile regex: Parenthesis is not closed.\":\n\n        scripts.base.frameworks.config.several-files ...\n          > btest-bg-run zeek zeek -b %INPUT\n          > btest-bg-wait 10\n        ... scripts.base.frameworks.config.several-files failed\n          % 'btest-bg-wait 10' failed unexpectedly (exit code 1)\n          % cat .stderr\n          The following processes did not terminate:\n          zeek -b /home/awelzel/corelight-oss/zeek/testing/btest/.tmp/scripts.base.frameworks.config.several-files/several-files.zeek\n          -----------\n          <<< [3667265] zeek -b /home/awelzel/corelight-oss/zeek/testing/btest/.tmp/scripts.base.frameworks.config.several-files/several-files.zeek\n          error: ../configfile1/Input::READER_CONFIG: Failed to compile regex: Parenthesis is not closed.\n          received termination signal\n          >>>\n\n5.1.0-dev.329 | 2022-08-03 10:26:45 -0700\n\n  * testing/missing-enum-value: redef exit_only_after_terminate=T (Arne Welzel, Corelight)\n\n    Seems this was the intention all along as the corresponding terminate()\n    call is there.\n\n  * option.bif: Short-circuit option changes when terminating (Arne Welzel, Corelight)\n\n    Due to the asynchronous behavior of the input framework and broker\n    communication, change handlers were previously called even after\n    zeek_done() event processing completed and also broker shutdown.\n\n    Accessing broker store handles within change handlers this late\n    triggered invalid Broker store handle messages:\n\n        error in ././my_option_store.zeek, line 13: invalid Broker store handle (Broker::put(Test::store, to_any_coercemy_option, to_any_coerceTest::new_value, 0 secs) and broker::store::{})\n\n    Fixes #2010\n\n5.1.0-dev.326 | 2022-08-03 09:56:37 -0700\n\n  * updates for gen-C++ maintenance, including skipping some inappropriate tests (Vern Paxson, Corelight)\n\n  * fix for profiling \"when\" statements (Vern Paxson, Corelight)\n\n  * gen-C++ support for vector bit-shift operations (Vern Paxson, Corelight)\n\n  * corrected wording in some btest comments (Vern Paxson, Corelight)\n\n  * make gen-C++ maintenance scripts directly executable (Vern Paxson, Corelight)\n\n  * ZAM support for bit-shifting (Vern Paxson, Corelight)\n\n  * don't allow deprecated-style mixing of vectors and scaling for shifting (Vern Paxson, Corelight)\n    leverage restrictions placed on shifting (RHS is always unsigned)\n    split deprecated vector operations into separate test, with separate ZAM baseline\n\n  * ZAM fix for vector \"in\" operator (Vern Paxson, Corelight)\n\n  * ensure that language tests pay attention to .stderr (Vern Paxson, Corelight)\n\n  * fix vector tests, including checking for errors (Vern Paxson, Corelight)\n\n5.1.0-dev.312 | 2022-08-02 12:37:51 -0700\n\n  * Update plugins.hooks baseline with new DHCP options (peter.cullen, Corelight)\n\n  * Prevent large dhcp log entries (Peter Cullen, Corelight)\n\n    A flood of DHCP traffic can result if very large log entries consisting\n    of many uids and/or msg_types. Such large log entries can disrupt a SIEM\n    ingestion pipeline. This change forcing a log entry to be written when\n    the number of uids or the number of msg_Types exceed a certain value.\n    The values are treated as options for easy configuration.\n\n5.1.0-dev.309 | 2022-08-02 11:33:22 -0700\n\n  * Add support for /s modifier to RE matcher and parser (Tim Wojtulewicz, Corelight)\n\n  * Code cleanup in RE_Matcher code (Tim Wojtulewicz, Corelight)\n\n    - Use std::string in Specific_RE_Matcher instead of char*\n    - Change a couple of ints-as-bools to bools\n\n  * Add basic unit tests for RE_Matcher (Tim Wojtulewicz, Corelight)\n\n  * Add /s modifier to parser for patterns (Tim Wojtulewicz, Corelight)\n\n  * Update gen-zam submodule [nomail] (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.303 | 2022-08-01 09:56:45 -0700\n\n  * GH-1344: Give better warning when using a type that doesn't exist (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.301 | 2022-07-29 12:10:20 -0700\n\n  * Add btest for vector bit-shift operators (Tim Wojtulewicz, Corelight)\n\n  * Handle error cases for bit-shift operators more cleanly (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.298 | 2022-07-29 12:00:57 -0700\n\n  * Update 3rdparty submodule to get patricia reformat (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.295 | 2022-07-28 11:21:59 -0700\n\n  * Re-enable sending coverage data to Coveralls via Cirrus (Tim Wojtulewicz, Corelight)\n\n    This was lost in 903f4bcc8ea2bc260f7ca9bf8d9fff445cb22f26\n\n5.1.0-dev.292 | 2022-07-25 09:43:44 -0700\n\n  * Return an error if redef'ing a variable without redef attribute (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.289 | 2022-07-21 11:54:12 -0700\n\n  * Add comments for specialized versions of util::split (Tim Wojtulewicz, Corelight)\n\n  * Make char*/wchar_t* split methods use string_view/wstring_view (Tim Wojtulewicz, Corelight)\n\n  * GH-1628: Return an error for duplicate record field names (Tim Wojtulewicz, Corelight)\n\n  * Fix a bug with splitting strings in Ascii input reader (Tim Wojtulewicz, Corelight)\n\n    The previous way of splitting strings would break if the last string in\n    the line was an empty string, and it would return one fewer fields than\n    it should have. This was breaking the last line in the\n    scripts.base.framework.input.ascii.setspecialcases once the bug fixed in\n    GH #1628 was fixed.\n\n  * Iterator and looping cleanup in Ascii input reader (Tim Wojtulewicz, Corelight)\n\n  * Add util::split methods for splitting strings (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.282 | 2022-07-21 09:06:31 -0700\n\n  * Add bitshift operators (AmazingPP)\n\n5.1.0-dev.279 | 2022-07-19 15:21:10 +0200\n\n  * GH-2267: Add btest that runs the doctest-based unit tests. (Robin\n    Sommer, Corelight)\n\n  * Fix local const variables can be modified via loops. (AmazingPP)\n\n5.1.0-dev.273 | 2022-07-19 12:57:11 +0100\n\n  * Remove use of fallible `get_conn_transport_proto` in `analyzer_violation`. (Benjamin Bannier, Corelight)\n\n    When setting up the DPD info we previously would get the\n    `transport_proto` for the connection with `get_conn_transport_proto`.\n    This function takes a `conn_id` and would fail fatally if the connection\n    for the given ID was unknown. It seems it was possible to run into such\n    scenarios when the `analyzer_violation` event was processed after the\n    connection had been cleaned up.\n\n    We now get the `transport_proto` directly from the ports in the\n    `connection` passed into `analyzer_violation` via\n    `get_port_transport_proto` which cannot fail.\n\n5.1.0-dev.271 | 2022-07-19 12:01:41 +0200\n\n  * GH-2276: Raise smb2_file_delete for CREATE with\n    FILE_DELETE_ON_CLOSE. (Arne Welzel, Corelight)\n\n    When a CREATE request contains the FILE_DELETE_ON_CLOSE option and\n    the subsequent CREATE response indicates success, we now raise the\n    smb2_file_delete event to log a delete action in smb_files.log and\n    also give users a way to handle this scenario.\n\n5.1.0-dev.269 | 2022-07-18 08:57:32 -0700\n\n  * DebugLogger: \"auto const\" to \"const auto\" (Arne Welzel, Corelight)\n\n    This was pointed out in a separate PR so fixing the occurrence I\n    had managed to sneak in already.\n\n5.1.0-dev.267 | 2022-07-18 08:55:38 -0700\n\n  * Fix some warnings from bro_version deprecation (Tim Wojtulewicz)\n\n5.1.0-dev.265 | 2022-07-18 08:54:30 -0700\n\n  * GH-636: Fix regex to handle commas at the end of config parser lines (Tim Wojtulewicz, Corelight)\n\n  * Convert config framework to use std::regex (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.261 | 2022-07-14 15:46:29 -0700\n\n  * Management framework: fix an agent boot-time race condition plus minor tweaks (Christian Kreibich, Corelight)\n\n      - bump cluster testsuite\n      - undo the testsuite result mask\n      - additional logging tweaks\n      - additional context in a few log messages\n      - await Supervisor peering before sending agent's hello\n      - remove outdated comment\n\n5.1.0-dev.254 | 2022-07-14 09:48:20 -0700\n\n  * Add pow function (AmazingPP)\n\n5.1.0-dev.252 | 2022-07-14 08:58:01 -0700\n\n  * GH-2258: Add skip decorator to DNS unit tests (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.250 | 2022-07-14 08:57:38 -0700\n\n  * GH-2261: Fix type used for analyzer_confirmation/violation events (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.248 | 2022-07-13 18:17:13 -0700\n\n  * Fix requirement check in a logging framework / sqlite btest (Christian Kreibich, Corelight)\n\n5.1.0-dev.245 | 2022-07-13 11:57:18 -0700\n\n  * Stop signal-masking upon running unit tests (Christian Kreibich, Corelight)\n\n  * Pause signal-masking during script parsing (Christian Kreibich, Corelight)\n\n  * Add btests to verify Zeek's handling of SIGTERM and reading stdin (Christian Kreibich, Corelight)\n\n  * Add procps/procps-ng to several CI Docker images (Christian Kreibich, Corelight)\n\n5.1.0-dev.240 | 2022-07-13 11:23:38 -0700\n\n  * Use clang-format for all files in `testing/btest/plugins`. (Benjamin Bannier, Corelight)\n\n    This is a fixup commit for dc65b6248c017b947e60afa4992decab04772111.\n\n5.1.0-dev.238 | 2022-07-13 11:11:48 -0700\n\n  * GH-696: Add bytestring_to_float BIF (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.236 | 2022-07-13 09:30:59 +0100\n\n  * Avoid race conditions in broker.ssl-mismatch test (Dominik Charousset, Corelight)\n\n  * Raw reader: Fix tail -F semantics when want_record=F and add tests for the new features.\n    See GH-2266. (Craig Leres)\n\n5.1.0-dev.229 | 2022-07-12 14:17:45 -0700\n\n  * Rename bro_version and BRO_PLUGIN_BRO_VERSION to zeek names (Tim Wojtulewicz, Corelight)\n\n  * Update binpac, bifcl, and gen-zam submodules for renaming changes (Tim Wojtulewicz, Corelight)\n\n  * Deprecate BRO_PLUGIN_API_VERSION, create zeek::PLUGIN_API_VERSION (Tim Wojtulewicz, Corelight)\n\n  * Deprecate HOOK_BRO_OBJ_DTOR and related methods (Tim Wojtulewicz, Corelight)\n\n  * Miscellaneous deprecations and renaming (Tim Wojtulewicz, Corelight)\n\n  * Rename all of bro lexer methods and such (Tim Wojtulewicz, Corelight)\n\n  * Stop installing the bro symlink, it's been long enough (Tim Wojtulewicz, Corelight)\n\n  * Deprecate bro_inet_ntop.{c,h} (Tim Wojtulewicz, Corelight)\n\n  * Deprecate bro_int_t and bro_uint_t (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.219 | 2022-07-12 12:00:10 -0700\n\n  * Run clang-format on all of our plugin test c++ files (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.217 | 2022-07-11 17:29:19 -0700\n\n  * Fix race condition in scripts.base.utils.dir test (Christian Kreibich, Corelight)\n\n  * Remove needless \"touch\" in scripts.base.utils.dir test (Christian Kreibich, Corelight)\n\n5.1.0-dev.214 | 2022-07-11 09:46:52 -0700\n\n  * Fix default build with `--disable-cpp-tests`. (Benjamin Bannier, Corelight)\n\n    For a build configured with `--disable-cpp-tests` we globally set\n    `-DDOCTEST_CONFIG_DISABLE`. Spicy does not expect this define to be used\n    and its unit tests fail to build with it.\n\n    This patch adds a Zeek-side workaround for that. We now do not build the\n    Spicy unit test targets as part of `ALL` anymore.\n\n    Closes #2238.\n\n5.1.0-dev.212 | 2022-07-11 09:45:18 -0700\n\n  * fix for script profiling of lambda functions (Vern Paxson, Corelight)\n\n5.1.0-dev.210 | 2022-07-11 09:43:49 -0700\n\n  * Fix for ZAM optimization of '?' conditional with vector-valued result (Vern Paxson, Corelight)\n\n5.1.0-dev.208 | 2022-07-11 12:51:21 +0200\n\n  * policy: Use literal dots for patterns used against `content-type`\n    and `hostname`. (Arne Welzel, Corelight)\n\n5.1.0-dev.204 | 2022-07-08 10:13:00 -0700\n\n  * Fix usage of broker::convert(double,timespan) (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.202 | 2022-07-08 09:55:35 -0700\n\n  * Avoid calling safe_realloc unnecessarily from ODesc::Grow() (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.200 | 2022-07-08 09:29:04 +0200\n\n  * GH-913: zeek-setup: Validate plugin debug streams during startup.\n    (Arne Welzel, Corelight)\n\n5.1.0-dev.198 | 2022-07-07 14:19:23 -0700\n\n  * Bump broker and zeek-archiver submodules to pull in CI updates (Christian Kreibich, Corelight)\n\n  * CI updates  (Christian Kreibich, Corelight)\n\n    - add FreeBSD 13.1 and fix broken link\n    - Add OpenSUSE Tumbleweed\n    - drop Ubuntu 21.10, EOL 2022-07-14\n    - drop Debian 9, EOL 2022-06-30\n\n5.1.0-dev.192 | 2022-07-07 07:51:04 +0200\n\n  * sqlite default-logdir test: Remove ls ./logs baseline (Arne Welzel, Corelight)\n\n    Observed .sqlite-journal files and missing reporter.sqlite files\n    in CI runs. Subsequently reading the ./test.sqlite file is more\n    reliable and should be good enough.\n\n  * logging/sqlite: Recognize Log::default_logdir and place files there if set (Arne Welzel, Corelight)\n\n  * logging: Introduce Log::default_logdir deprecate LogAscii::logdir and per writer logdir (Arne Welzel, Corelight)\n\n    Also modify FormatRotationPath to keep rotated logs within\n    Log::default_logdir unless the rotation function explicitly\n    set dir, e.g. by when the user redef'ed default_rotation_interval.\n\n  * logging/ascii: Fix .shadow paths when using LogAscii::logdir (Arne Welzel, Corelight)\n\n    With the introduction of LogAscii::logdir, log filenames can now include\n    parent directories rather than being plain basenames. Enabling log rotation,\n    leftover log rotation and setting LogAscii::logdir broke due to not\n    handling this situation.\n\n5.1.0-dev.186 | 2022-07-05 22:18:52 +0000\n\n  * Remove unnecssary includes of Dict.h (Tim Wojtulewicz, Corelight)\n\n  * Turn PDict into a type alias (Tim Wojtulewicz, Corelight)\n\n  * Convert Dictionary types to be templated classes (Tim Wojtulewicz, Corelight)\n\n    This has the fortunate side-effect of also making it so we can store\n    the value objects as typed pointers, instead of void*.\n\n  * Fix signedness comparison warning in ssl analyzer (Tim Wojtulewicz, Corelight)\n\n  * Management framework: make artifact filenames Github-compatible (Christian Kreibich, Corelight)\n\n    The upload-artifact action refuses to process certain filenames:\n\n      \"Invalid characters include: Double quote \", Colon :, Less than <,\n       Greater than >, Vertical bar |, Asterisk *, Question mark ?, Carriage\n       return \\r, Line feed \\n\"\n\n    On failure, this iterates over the btest artifacts in the testsuite's .tmp\n    directory and renames any of these to dots.\n\n  * Management framework: mask testsuite result (Christian Kreibich, Corelight)\n\n    There's currently a race condition in the agent-supervisor interaction that can\n    cause requests to the Supervisor to get lost. This temporarily masks the\n    testsuite result until I've had a chance to investigate.\n\n5.1.0-dev.177 | 2022-07-05 15:03:12 +0100\n\n  * SSL Analyzer: track connection direction by messages (Johanna Amann)\n\n    This PR changes the way in which the SSL analyzer tracks the direction\n    of connections. So far, the SSL analyzer assumed that the originator of\n    a connection would send the client hello (and other associated\n    client-side events), and that the responder would be the SSL servers.\n\n    In some circumstances this is not true, and the initiator of a\n    connection is the server, with the responder being the client. So far\n    this confused some of the internal statekeeping logic and could lead to\n    mis-parsing of extensions.\n\n    This reversal of roles can happen in DTLS, if a connection uses STUN -\n    and potentially in some StartTLS protocols.\n\n    This PR tracks the direction of a TLS connection using the hello\n    request, client hello and server hello handshake messages. Furthermore,\n    it changes the SSL events from providing is_orig to providing is_client,\n    where is_client is true for the client_side of a connection. Since the\n    argument positioning in the event has not changed, old scripts will\n    continue to work seamlessly - the new semantics are what everyone\n    writing SSL scripts will have expected in any case.\n\n    There is a new event that is raised when a connection is flipped. A\n    weird is raised if a flip happens repeatedly.\n\n    Addresses GH-2198.\n\n5.1.0-dev.174 | 2022-07-05 10:26:14 +0200\n\n  * Add `gulrak/filesystem` as a compiler-independent\n    `std::filesystem` replacement. The `ghc::filesystem` namespace is\n    exposed as `zeek::filesystem` in `util.h`. (Arne Welzel,\n    Corelight)\n\n5.1.0-dev.172 | 2022-07-04 10:22:45 +0100\n\n  * The STREAM mode of the ASCII reader now behaves like `tail -F`: when file is\n    removed/replaced, it will start tracking the new file. See\n    https://github.com/zeek/zeek/pull/2097 for more detail. (Craig Leres)\n\n  * Remove loops from Dict iterator invalidation unit test (Tim Wojtulewicz, Corelight)\n\n    This fixes Coverity finding 1490366\n\n5.1.0-dev.154 | 2022-07-01 14:10:58 -0700\n\n  * Remove unused util::detail::rand64bit method (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.151 | 2022-07-01 11:11:29 -0700\n\n  * Management framework: bump zeek-client and cluster testsuite (Christian Kreibich, Corelight)\n\n5.1.0-dev.149 | 2022-07-01 09:23:33 -0700\n\n  * GH-2229: Fix some typos in weak-keys.zeek (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.146 | 2022-06-30 13:38:33 -0700\n\n  * Bump Spicy and spicy-plugin to their latest release. (Benjamin Bannier, Corelight)\n\n5.1.0-dev.144 | 2022-06-30 13:37:40 -0700\n\n  * Optimize 64 bit random number generation (Johanna Amann)\n\n    rand64bit called random 4 times to generate one 64 bit number. There is\n    no reason to do this - random() is basically guaranteed to return a 32\n    bit number.\n\n    This also adds a static check to make sure that it does.\n\n5.1.0-dev.142 | 2022-06-30 12:27:42 -0700\n\n  * Remove other general deprecations (Tim Wojtulewicz, Corelight)\n\n  * Remove some deprecated ocsp/ssl base scripts (Tim Wojtulewicz, Corelight)\n\n  * Remove deprecated DESC_PORTABLE ODesc mode and ODesc::IsPortable() (Tim Wojtulewicz, Corelight)\n\n  * Remove deprecated UDP, ICMP, and TCP analyzers (Tim Wojtulewicz, Corelight)\n\n  * Remove deprecated protocol_confirmation/violation events and methods (Tim Wojtulewicz, Corelight)\n\n  * Remove deprecated IterCookie-based dictionary iteration (Tim Wojtulewicz, Corelight)\n\n  * Remove deprecated MemoryAllocation() methods and related code (Tim Wojtulewicz, Corelight)\n\n  * Remove deprecated --enable-mobile-ipv6 configure argument (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.133 | 2022-06-30 09:56:20 -0700\n\n  * Add helpers for syncing commit files with external testsuites (Christian Kreibich, Corelight)\n\n  * Fix typo in update-timing target for external testsuites (Christian Kreibich, Corelight)\n\n  * Update broker submodule [nomail] (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.128 | 2022-06-27 13:04:47 -0700\n\n  * removed deprecated capture-by-reference closures (Vern Paxson, Corelight)\n\n5.1.0-dev.126 | 2022-06-27 11:43:27 -0700\n\n  * GH-2183: Rework Packet checksummed variable naming (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.124 | 2022-06-27 10:37:06 -0700\n\n  * Code modernization: Convert from deprecated C standard library headers (Tim Wojtulewicz)\n\n5.1.0-dev.121 | 2022-06-27 09:26:54 -0700\n\n  * Mark bools in BasicThread as atomic to avoid data races (Tim Wojtulewicz)\n\n  * Avoid calling DBG_LOG during signal handling (Tim Wojtulewicz)\n\n  * Fixes for iosource::Manager for deadlocks during shutdown (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.116 | 2022-06-24 14:18:40 -0700\n\n  * Bump broker submodule to pick up two fixes (Tim Wojtulewicz, Corelight)\n\n    - https://github.com/zeek/broker/pull/244\n    - https://github.com/zeek/broker/pull/245\n\n  * Add NEWS entry for 5.0 management changes [nomail] [skip ci] (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.113 | 2022-06-24 09:08:00 -0700\n\n  * News entry about Bloom Filter changes in 5.0. (Johanna Amann, Corelight)\n\n5.1.0-dev.110 | 2022-06-23 13:03:55 -0700\n\n  * Bump Spicy to the latest development version. (Benjamin Bannier, Corelight)\n\n5.1.0-dev.108 | 2022-06-23 12:26:26 -0700\n\n  * Management framework: support for cluster node restarts (Christian Kreibich, Corelight)\n\n    - bump external cluster testsuite\n    - bump zeek-client\n    - edit pass over docstrings\n    - node restart support\n    - more consistent Supervisor interaction in the agent\n    - log the controller's startup deployment attempt\n    - bugfix for a get_id_value corner case\n    - minor timeout bugfix\n    - make \"result\" argument plural in multi-result response events\n\n5.1.0-dev.98 | 2022-06-22 22:39:32 -0700\n\n  * Management framework: separate config staging and deployment (Christian Kreibich, Corelight)\n\n    - bump external cluster testsuite\n    - bump zeek-client\n    - rename set_configuration events to stage_configuration\n    - trigger deployment upon when instances are ready\n    - more resilient node shutdown upon deployment\n    - re-trigger deployment upon controller launch\n    - move most deployment handling to internal function\n    - distinguish internally and externally requested deployments\n    - track instances by their Broker IDs\n    - tweak Supervisor event logging\n    - make helper function a local\n    - rename \"log_level\" to \"level\"\n    - add \"finish\" callback to requests\n    - add a helper for rendering result vectors to a string\n    - agents now skip re-deployment of current config\n    - suppress notify_agent_hello upon Supervisor peering\n    - introduce state machine for configs and persist them\n    - introduce deployment API in controller\n    - rename agent \"set_configuration\" to \"deploy\"\n    - consistency fixes to the Result record\n\n5.1.0-dev.75 | 2022-06-22 12:06:00 -0700\n\n  * Provide zeek-client by default (Christian Kreibich, Corelight)\n\n5.1.0-dev.73 | 2022-06-22 09:40:05 -0700\n\n  * GH-1991: Add option to limit the number of tunnel_changed events (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.71 | 2022-06-21 16:58:25 -0700\n\n  * Management framework: config validation (Christian Kreibich, Corelight)\n\n    - bump external cluster testsuite\n    - bump zeek-client\n    - add config validation\n    - improvements to port auto-enumeration\n    - control output-to-console in Supervisor\n    - handle no-instances corner case in set-config correctly\n\n5.1.0-dev.64 | 2022-06-21 12:23:20 -0700\n\n  * CI: Add Fedora 36, remove Fedora 34 (Johanna Amann, Corelight)\n\n  * Update broker submodule to fix put_unique issues from 5.0RC1 (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.61 | 2022-06-17 09:21:44 -0700\n\n  * CI: Add OpenSuSE Leap 15.4, fix 15.3 (Johanna Amann, Corelight)\n\n    15.3 included the wrong update repo in the Dockerfile\n\n5.1.0-dev.59 | 2022-06-17 09:09:58 -0700\n\n  * Bump Spicy and spicy-plugin to latest dev snapshot. (Benjamin Bannier, Corelight)\n\n    This bump brings in fixes for the following issues:\n\n    - zeek/spicy#1204\n    - zeek/spicy#1208\n    - zeek/spicy#1210\n    - zeek/spicy-plugin#112\n    - zeek/spicy-plugin#117\n\n5.1.0-dev.56 | 2022-06-16 15:57:19 -0700\n\n  * flip connections that begin with SYN-ACKs if subsequent acks or data seen (Vern Paxson, Corelight)\n\n5.1.0-dev.53 | 2022-06-16 14:27:54 -0700\n\n  * Revert \"Merge remote-tracking branch 'turrisxyz/Dependabot-GitHub-Actions'\" (Tim Wojtulewicz, Corelight)\n\n    This reverts commit 910e3b302406b838c1c12e016d4a05306a3bad46, reversing\n    changes made to 64198655204bee20cc6b933d07909bd30869d7e8.\n\n5.1.0-dev.52 | 2022-06-16 11:11:33 -0700\n\n  * Management framework: bump external cluster testsuite (Christian Kreibich, Corelight)\n\n  * Management framework: make agents support zeek-archiver invocations (Christian Kreibich, Corelight)\n\n  * Management framework: fix module naming typo (Christian Kreibich, Corelight)\n\n5.1.0-dev.48 | 2022-06-16 10:08:14 -0700\n\n  * Use ccache for docs gen github workflow (Tim Wojtulewicz, Corelight)\n\n  * CI: Add Ubuntu 22.04 (LTS Release, EOL 04/2027) (Johanna Amann, Corelight)\n\n5.1.0-dev.38 | 2022-06-14 15:43:44 -0700\n\n  * Fix pattern matching in Cirrus dependabot check (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.35 | 2022-06-14 14:39:02 -0700\n\n  * Ignore dependabot PRs on Cirrus (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.33 | 2022-06-14 14:34:31 -0700\n\n  * Merge PQ_Timer into base TimerMgr class (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.30 | 2022-06-14 12:02:46 -0700\n\n  * Management framework: bump external cluster testsuite (Christian Kreibich, Corelight)\n\n  * Management framework: switch default network visibilities (Christian Kreibich, Corelight)\n\n5.1.0-dev.27 | 2022-06-14 11:30:28 -0700\n\n  * chore: Set permissions for GitHub actions (naveen)\n\n     Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much.\n\n    - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions\n\n    https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions\n\n    https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs\n\n    [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)\n\n    Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>\n\n5.1.0-dev.25 | 2022-06-14 10:07:32 -0700\n\n  * chore: Included githubactions in the dependabot config (naveen)\n\n    This should help with keeping the GitHub actions updated on new releases. This will also help with keeping it secure.\n\n    Dependabot helps in keeping the supply chain secure https://docs.github.com/en/code-security/dependabot\n\n    GitHub actions up to date https://docs.github.com/en/code-security/dependabot/working-with-dependabot/keeping-your-actions-up-to-date-with-dependabot\n\n    https://github.com/ossf/scorecard/blob/main/docs/checks.md#dependency-update-tool\n    Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>\n\n  * Sort package names in Dockerfiles (Tim Wojtulewicz, Corelight)\n\n  * Dockerfile changes for consistency with Broker files (Tim Wojtulewicz, Corelight)\n\n  * Make some of the CI Dockerfiles more consistent (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.16 | 2022-06-08 13:42:41 -0700\n\n  * Management framework: port auto-assignment (Christian Kreibich, Corelight)\n\n    - support auto-assignment of ports in cluster nodes\n    - also use send_set_configuration_response_error elsewhere\n    - minor log formatting tweak, for consistency\n    - bump zeek-client to pull in relaxed port handling\n    - bump external cluster testsuite\n\n5.1.0-dev.10 | 2022-06-07 10:02:39 -0700\n\n  * Keep make dist from deleting all paths containing 'build' [skip ci] (Tim Wojtulewicz)\n\n5.1.0-dev.8 | 2022-06-06 09:38:59 -0700\n\n  * Remove duplicate entry about websockets from 5.0 NEWS (Tim Wojtulewicz, Corelight)\n\n5.1.0-dev.7 | 2022-06-06 09:36:32 -0700\n\n  * NEWS updates for 5.0 (Vern Paxson, Corelight)\n\n  * ZAM test suite updates due to recent changes (Vern Paxson, Corelight)\n\n5.1.0-dev.1 | 2022-06-03 12:38:20 -0700\n\n  * Update local-compat test for 5.1 (Tim Wojtulewicz, Corelight)\n\n  * Start of 5.1.0 development (Tim Wojtulewicz, Corelight)\n\n5.0.0-dev.575 | 2022-06-03 10:55:47 -0700\n\n  * Management framework: bump external cluster testsuite (Christian Kreibich, Corelight)\n\n  * Management framework: bump zeek-client to bring back to master (Christian Kreibich, Corelight)\n\n5.0.0-dev.572 | 2022-06-03 10:31:51 -0700\n\n  * Fix hang in DNS analyzer with malformed packet (Tim Wojtulewicz, Corelight)\n\n    (cherry picked from commit dfc9f77b68f6d02d059ade322b9c132e32c26872)\n\n5.0.0-dev.571 | 2022-06-03 09:50:45 -0700\n\n  * Additional &is_used tags in the Netcontrol and Sumstats frameworks (Christian Kreibich, Corelight)\n\n    When running a cluster, these functions only get called in select node types and\n    could trigger no-caller warnings on stderr.\n\n5.0.0-dev.569 | 2022-06-03 09:50:01 -0700\n\n  * Management framework: bump zeek-client to pull in rendering tweaks (Christian Kreibich, Corelight)\n\n  * Management framework: bump external cluster testsuite (Christian Kreibich, Corelight)\n\n  * Mark lookup_asn() BIF as deprecated in v6.1 (Phil Rzewski)\n\n  * Define geo_autonomous_system record type (Phil Rzewski)\n\n  * Add lookup_autonomous_system() BIF that returns AS number and org (Phil Rzewski)\n\n5.0.0-dev.559 | 2022-06-02 16:58:58 -0700\n\n  * Mark lookup_asn() BIF as deprecated in v6.1 (Phil Rzewski)\n\n  * Define geo_autonomous_system record type (Phil Rzewski)\n\n  * Add lookup_autonomous_system() BIF that returns AS number and org (Phil Rzewski)\n\n5.0.0-dev.553 | 2022-06-02 13:16:44 -0700\n\n  * Make broker.web-socket-events test require the Python websockets package (Christian Kreibich, Corelight)\n\n5.0.0-dev.551 | 2022-06-02 12:19:32 -0700\n\n  * Expand scripts.base.frameworks.intel.cluster-transparency test (Christian Kreibich, Corelight)\n\n  * Fix races in scripts.base.frameworks.intel.cluster-transparency-with-proxy test (Christian Kreibich, Corelight)\n\n  * Add Intel::send_store_on_node_up boolean to control min_data_store delivery (Christian Kreibich, Corelight)\n\n  * Fix a -Wstringop-overflow memset size warning with GCC 12 (Christian Kreibich, Corelight)\n\n5.0.0-dev.545 | 2022-06-02 12:00:53 +0200\n\n  * Add WebSocket support for exchanging events with external clients.\n    (Robin Sommer, Corelight)\n\n    This exposes Broker's new WebSocket support in Zeek. To enable it,\n    call `Broker::listen_websocket()`. Zeek will then start listening on\n    port 9997 for incoming WebSocket connections.\n\n    See the Broker documentation for a description of the message format\n    expected over these WebSocket connections.\n\n5.0.0-dev.540 | 2022-06-01 11:08:42 -0700\n\n  * GH-2136: Clean up DNS_Mgr before shutting down (Tim Wojtulewicz, Corelight)\n\n5.0.0-dev.538 | 2022-06-01 09:20:21 -0700\n\n  * GH-2101: Update cmake submodule to fix c-ares include path problem (Tim Wojtulewicz, Corelight)\n\n5.0.0-dev.535 | 2022-05-31 12:58:32 -0700\n\n  * Management framework updates (Christian Kreibich, Corelight)\n\n    - bump external cluster testsuite\n    - bump zeek-client to pull in set-config rendering\n    - enable stdout/stderr reporting\n    - Supervisor extensions for stdout/stderr handling\n    - disambiguate redef field names in agent and controller\n    - move to ResultVec in agent's set_configuration response\n    - tune request timeout granularity and interval\n    - verify node starts when deploying a configuration\n    - a bit of debug-level logging for troubleshooting\n\n5.0.0-dev.525 | 2022-05-31 12:53:01 -0700\n\n  * Add Supervisor::node_status notification event (Christian Kreibich, Corelight)\n\n5.0.0-dev.523 | 2022-05-31 11:13:47 -0700\n\n  * Update spicy-plugin with change that checks for zeek version (Tim Wojtulewicz, Corelight)\n\n  * deprecation messages for unused base script functions (Vern Paxson, Corelight)\n\n  * clearer messages for warning about unused functions (Vern Paxson, Corelight)\n\n  * annotate orphan base script components with &deprecated (Vern Paxson, Corelight)\n\n  * annotate base scripts with &is_used as needed (Vern Paxson, Corelight)\n\n  * --no-usage-warnings flag to suppress analysis (Vern Paxson, Corelight)\n\n  * support for associating &is_used attributes with functions (Vern Paxson, Corelight)\n\n  * classes for evaluating function/hook/event usage (Vern Paxson, Corelight)\n\n  * broader support for AST traversal, including Attr and Attributes objects (Vern Paxson, Corelight)\n\n  * include attributes in descriptions of sets and tables (Vern Paxson, Corelight)\n\n5.0.0-dev.508 | 2022-05-27 14:33:47 -0700\n\n  * Update zeek-aux submodule to fix a compiler warning (Tim Wojtulewicz, Corelight)\n\n5.0.0-dev.505 | 2022-05-26 16:08:42 -0700\n\n  * Management framework updates (Christian Kreibich, Corelight)\n\n    - bump zeek-client to pull in instance serialization fixes\n    - bump external cluster testsuite\n    - update agent-checkin test to reflect recent changes\n    - place each Zeek process in its own working dir\n    - set defaults for log rotation and persistent state\n    - add spool and state directory config settings\n    - establish stdout/stderr files also for cluster nodes\n    - default to having agents check in with the (local) controller\n    - move role variable from logging into framework-wide config\n    - distinguish supervisor/supervisee when loading agent/controller\n    - simplify agent and controller stdout/stderr files\n    - prefix the management logs with \"management-\"\n    - comment and layouting tweaks, no functional change\n    - rename env var that labels agents/controllers\n    - increase robustness of agent/controller naming\n\n  * Add some missing NEWS entries (Tim Wojtulewicz, Corelight)\n\n5.0.0-dev.488 | 2022-05-26 08:23:42 -0700\n\n  * GH-2054: Allow nulls as separators for join_string_vec (Tim Wojtulewicz, Corelight)\n\n5.0.0-dev.485 | 2022-05-25 12:09:42 -0700\n\n  * Propagate BPF_Program error message to script land (Tim Wojtulewicz, Corelight)\n\n  * Allow pcap pktsrc to use other BPF_Program::Compile method (Tim Wojtulewicz, Corelight)\n\n5.0.0-dev.482 | 2022-05-25 09:40:18 -0700\n\n  * Bump Spicy and spicy-plugin. (Benjamin Bannier, Corelight)\n\n  * Clean up test `spicy.spicyz-jit`. (Benjamin Bannier, Corelight)\n\n    This test was created from a copy of `spicy.spicyz-aot`, but updated\n    incompletly. This patch removes the last ahead-of-time compilation bits.\n\n5.0.0-dev.479 | 2022-05-25 09:38:20 -0700\n\n  * GH-2125: Fix compiler warnings in ScriptProfile (Tim Wojtulewicz, Corelight)\n\n5.0.0-dev.477 | 2022-05-25 09:37:58 -0700\n\n  * Use ZEEK_DICT_DEBUG more in Dict.cc instead of DEBUG (Tim Wojtulewicz)\n\n5.0.0-dev.475 | 2022-05-25 09:37:19 -0700\n\n  * Move fuzzer setup in CMake below builtin plugin setup (Tim Wojtulewicz, Corelight)\n\n  * Remove flex/bison flags from CI build (Tim Wojtulewicz, Corelight)\n\n5.0.0-dev.470 | 2022-05-24 11:55:37 -0700\n\n  * Ensure presence of Zeek-related directories in toplevel CMakeLists.txt (Christian Kreibich, Corelight)\n\n  * Add base/misc/installation.zeek, with Zeek installation directories (Christian Kreibich, Corelight)\n\n  * Add scripts.base.misc.installation btest (Christian Kreibich, Corelight)\n\n5.0.0-dev.466 | 2022-05-23 17:47:08 -0700\n\n  * Add DOCKERFILE_VERSION variable to all CI dockerfiles (Tim Wojtulewicz, Corelight)\n\n5.0.0-dev.462 | 2022-05-19 11:45:38 -0700\n\n  * speed up ZAM compilation by capping function size when inlining (Vern Paxson, Corelight)\n\n5.0.0-dev.460 | 2022-05-19 11:24:50 -0700\n\n  * Zeekify the scripts.base.utils.paths test (Christian Kreibich, Corelight)\n\n  * Expand build_path() function to handle empty dir arguments gracefully (Christian Kreibich, Corelight)\n\n5.0.0-dev.457 | 2022-05-19 10:51:45 -0700\n\n  * Rework .cirrus.yml a bit to commonize some parts (Tim Wojtulewicz)\n\n  * Enable 'greedy' mode for other CI builds (Tim Wojtulewicz, Corelight)\n\n  * Enable ccache for Cirrus builds (Tim Wojtulewicz, Corelight)\n\n  * Fix SSL tests on Centos Stream 9 (Johanna Amann, Corelight)\n\n    SHA1 signatures are only allowed in the legacy policy. I have no idea\n    where this is documented - I found it in a patch for the OpenSSL source\n    package.\n\n    Also adding tar as a specific dependency, since we have a test that\n    requires it, and at least for me it was not present in a minimal\n    installation.\n\n    Fixes #2115\n\n5.0.0-dev.451 | 2022-05-19 09:13:13 -0700\n\n  * Disable Spicy in Zeek Coverity builds (Tim Wojtulewicz, Corelight)\n\n5.0.0-dev.449 | 2022-05-18 11:11:58 -0700\n\n  * Always generate helper scripts for Spicy. (Benjamin Bannier, Corelight)\n\n    We previously only generated these files if configuring a build which\n    included Spicy. This meant that e.g., `zeek-path-dev.*` scripts would\n    emit errors for non-existing paths if Spicy was not included.\n\n    We now always generate the helper scripts so we can reference them\n    regardless of build configuration. If Spicy is not included the files\n    will still be sourced, but have no actual effect.\n\n5.0.0-dev.447 | 2022-05-18 11:07:30 -0700\n\n  * Partially revert OpenSSL hashing changes (Johanna Amann, Corelight)\n\n    This commit partially reverts the changes that we made in\n    6217851d6db3859b2add34773be5a6b3ecba49f0. It turns out that reverting to\n    the legacy OpenSSL API means that Zeek can no longer be run in FIPS mode\n    for old (but still used) versions of OpenSSL.\n\n    This commit thus uses a bunch of #ifdefs to support both implementations\n    simultaneously.\n\n5.0.0-dev.445 | 2022-05-18 11:07:02 -0700\n\n  * GH-1672: Keep a reference to a table being expired, just in case (Tim Wojtulewicz, Corelight)\n\n5.0.0-dev.442 | 2022-05-17 09:15:27 -0700\n\n  * Remove unnecessary uses of util::fmt() (Tim Wojtulewicz, Corelight)\n\n5.0.0-dev.440 | 2022-05-17 08:50:15 -0700\n\n  * Add NEWS item for new requirements due to default-enabled Spicy support. (Benjamin Bannier, Corelight)\n\n  * Include headers in binary dir before other headers. (Benjamin Bannier, Corelight)\n\n    If e.g., optional dependencies are installed in the same prefix as a\n    previous Zeek installation, the build would have previously found\n    `zeek-config.h` from the external prefix instead of from the current\n    build.\n\n    With this patch we now include the current binary dir before any\n    previously configured include directories (here in particular: optional\n    dependencies). With that the correct `zeek-config.h` is found.\n\n  * Increase memory in CI. (Benjamin Bannier, Corelight)\n\n    Spicy requires substantial amounts of RAM to compile. In this patch we\n    bump the amount of RAM available in CI so a build including Spicy can be\n    performed.\n\n  * Add tests for bundled Spicy infrastructure. (Benjamin Bannier, Corelight)\n\n  * Include spicy in build. (Benjamin Bannier, Corelight)\n\n  * Add `bare_mode` bif. (Benjamin Bannier, Corelight)\n\n  * Change test so included plugins can load notice framework. (Benjamin Bannier, Corelight)\n\n  * Do not log function arguments in test. (Benjamin Bannier, Corelight)\n\n    This was excercising hooks to validate that they were called. For that\n    it uses pretty verbose logging. Since version numbers are not stable and\n    hard to canonify this script already unloads the version module (there\n    is e.g., code in `base/misc/version` which splits the version strings\n    and works on single components which might appear like pretty ordinary\n    floating point numbers in the log).\n\n    This test however worked under the assumption that nothing in bare mode\n    loads `base/misc/version` which is hard to guarantee, especially\n    considering that plugins can be embedded and might load that module\n    themself.\n\n    With this patch we now make the logging slightly less verbose so that\n    function call arguments are not logged anymore.\n\n5.0.0-dev.431 | 2022-05-16 17:00:24 -0700\n\n  * Store location during Ascii input parsing for use in error messages (Tim Wojtulewicz, Corelight)\n\n  * Include file information in input reader error messages (Tim Wojtulewicz, Corelight)\n\n5.0.0-dev.427 | 2022-05-16 16:59:31 -0700\n\n  * NEWS items for script profiling, \"footprint\" BiFs, and Trigger method deprecations (Vern Paxson, Corelight)\n\n  * make deprecation advice a bit more helpful (Vern Paxson, Corelight)\n\n  * add deprecation for Trigger Cache/Lookup interfaces (Vern Paxson, Corelight)\n\n  * helper scripts for -O C++ maintenance (Vern Paxson, Corelight)\n\n  * \"-O use-C++\" now fails if no C++ bodies wound up being applicable (Vern Paxson, Corelight)\n\n  * update environemnt variable names to match command-line arguments (Vern Paxson, Corelight)\n\n  * final changes for -O C++ feature completeness, mainly \"when\" statement support (Vern Paxson, Corelight)\n\n  * Change \"when\" statements that don't require closures to use new implementation. (Vern Paxson, Corelight)\n    Provide hooks for script optimization access to \"when\" statements.\n    Regularize treatment of naming and timeouts for Triggers.\n\n  * switch cached Trigger values to be opaque-and-generic, rather than assuming CallExpr's (Vern Paxson, Corelight)\n\n  * tracking of when statements/expressions occur in a \"when\" context (Vern Paxson, Corelight)\n\n  * fix bug that sometimes associated the wrong location with global statements (Vern Paxson, Corelight)\n\n  * fix incomplete AST traversal of \"when\" statements (Vern Paxson, Corelight)\n\n  * add some missing \"when\" closures (Vern Paxson, Corelight)\n\n  * regularize test suite names to avoid custom/outdated suffices (Vern Paxson, Corelight)\n\n5.0.0-dev.410 | 2022-05-16 13:14:31 -0700\n\n  * Call pip using python -m flag during FreeBSD CI prep (Tim Wojtulewicz, Corelight)\n\n5.0.0-dev.408 | 2022-05-16 09:10:53 -0700\n\n  * Store hash analyzer kind StringVals for later reuse (Tim Wojtulewicz, Corelight)\n\n  * Add Component::GetCanonicalNameVal to avoid extra StringVal allocations (Tim Wojtulewicz, Corelight)\n\n  * Avoid type unnecessary type conversion in ComponentManager::GetComponentName (Tim Wojtulewicz, Corelight)\n\n  * Only set connection history if strings differ (Tim Wojtulewicz, Corelight)\n\n5.0.0-dev.403 | 2022-05-16 09:10:15 -0700\n\n  * Explicitly define copy and move operators/constructors for ScriptProfileStats (Tim Wojtulewicz, Corelight)\n\n    Fixes Coverity 1488768\n\n5.0.0-dev.401 | 2022-05-16 09:09:37 -0700\n\n  * Add --retry to curl invocations in update-traces (Tim Wojtulewicz, Corelight)\n\n5.0.0-dev.399 | 2022-05-16 09:09:05 -0700\n\n  * GH-2103: Disable leak detection for bifs.footprint in another way (Tim Wojtulewicz, Corelight)\n\n5.0.0-dev.396 | 2022-05-13 16:50:53 -0700\n\n  * Fix UB during early shutdown on OpenSSL state (Dominik Charousset, Corelight)\n\n5.0.0-dev.393 | 2022-05-13 16:48:56 -0700\n\n  * Correcly typify bloom filters in all cases during merge (Johanna Amann)\n\n    Before, there were edge-cases where the type was not transferred if one\n    of the involved bloom-filters was untypified.\n\n    Fixes GH-1938\n\n  * Add intersect operation for bloom filters (Johanna Amann)\n\n    Intersecting two bloom filters yields a bloom filter that returns true\n    when an element was contained in both bloom filters. The false positive\n    rate is potentially a bit higher than in the original bloom filters.\n\n    This operation also works for counting bloom filters, however the\n    counters are discarded and the bloomfilters are converted to basic bloom\n    filters. The reason is that there is no obvious meaning to the counters\n    when two bloom filters are intersected - besides the fact if an element\n    was inserted at all.\n\n  * Add bloomfilter_decrement bif (Johanna Amann)\n\n    This bif implements the decrement operation for counting bloom filters.\n\n    It also clarifies some of the documentation.\n\n5.0.0-dev.385 | 2022-05-12 11:03:25 +0100\n\n  * Include certificate information in SSL::Weak_Key notice (Johanna Amann, Corelight)\n\n5.0.0-dev.382 | 2022-05-11 12:56:13 -0700\n\n  * tidy up after generating profile (Vern Paxson, Corelight)\n\n  * fix for coverage reporting for functions that use \"when\" statements (Vern Paxson, Corelight)\n\n  * new global_options() BiF to speed up startup, plus a micro-preen (Vern Paxson, Corelight)\n\n  * hooks for new --profile-scripts option (Vern Paxson, Corelight)\n\n  * classes for managing script profiles (Vern Paxson, Corelight)\n\n  * address some holes in script coverage (Vern Paxson, Corelight)\n\n  * fix for script coverage missing on-exit activity (Vern Paxson, Corelight)\n\n  * memory management fixes for loggers (Vern Paxson, Corelight)\n\n  * make curr_CPU_time() broadly available rather than just isolated to ZAM (Vern Paxson, Corelight)\n\n  * Add exact name of the Top-k algorithm. (Johanna Amann)\n\n    I needed to figure out which exact algorithm we use for our\n    probabilistic top-k measurements. It turns out that we do not mention\n    this in our source tree at all so far.\n\n5.0.0-dev.368 | 2022-05-09 10:37:44 +0100\n\n  * when printing a description of a type, use its name if available (Vern Paxson, Corelight)\n\n5.0.0-dev.363 | 2022-05-06 15:28:34 -0700\n\n  * Management framework: consistency tweaks in zeek-client, plus test updates (Christian Kreibich, Corelight)\n\n5.0.0-dev.361 | 2022-05-06 12:47:49 -0700\n\n  * Update doctest to v2.4.8 (Tim Wojtulewicz, Corelight)\n\n5.0.0-dev.359 | 2022-05-06 11:32:13 -0700\n\n  * to avoid recursion, track all aggregates, not just records (Vern Paxson, Corelight)\n    isolate the internal methods\n\n  * simpler public calling interface for computing footprint (Vern Paxson, Corelight)\n\n  * use stack-based set to prevent infinite recursion rather than a static one (Vern Paxson, Corelight)\n\n  * change value_footprint() to val_footprint() to be more similar to val_size() (Vern Paxson, Corelight)\n\n  * make including count of container elements non-optional (Vern Paxson, Corelight)\n\n  * fix for tracking footprints of mutually-recursive records (Vern Paxson, Corelight)\n\n  * added value_footprint() and global_container_footprints() BiFs (Vern Paxson, Corelight)\n\n5.0.0-dev.347 | 2022-05-05 18:09:44 -0700\n\n  * Management framework: add get_configuration_request/response transaction (Christian Kreibich, Corelight)\n\n  * Update zeek-archiver submodule (Christian Kreibich, Corelight)\n\n5.0.0-dev.344 | 2022-05-04 11:57:50 -0700\n\n  * fix for coverage reporting for functions that use \"when\" statements (Vern Paxson, Corelight)\n\n  * ZAM maintenance for recent changes and some newly exercised corner cases (Vern Paxson, Corelight)\n\n5.0.0-dev.341 | 2022-05-04 09:23:55 -0700\n\n  * Fixes Coverity issues reported from DNS_Mgr merge (Tim Wojtulewicz, Corelight)\n\n    Reports fixed: 1488295, 1488292, 1488281, 1488279\n\n5.0.0-dev.338 | 2022-05-03 14:40:57 -0700\n\n  * fix for sets containing recursive records (Vern Paxson, Corelight)\n\n5.0.0-dev.336 | 2022-05-03 17:09:54 +0100\n\n  * Update X.509 and CT trust anchors (Johanna Amann, Corelight)\n\n5.0.0-dev.332 | 2022-04-28 19:52:04 +0000\n\n  * Initialize OpenSSL on startup (Dominik Charousset, Corelig"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 58.181640625,
          "content": "# When changing the minimum version here, also adapt\n# auxil/zeek-aux/plugin-support/skeleton/CMakeLists.txt\ncmake_minimum_required(VERSION 3.15.0 FATAL_ERROR)\n\nif (WIN32)\n    # Enable usage of CMAKE_MSVC_RUNTIME_LIBRARY variable\n    cmake_policy(SET CMP0091 NEW)\n\n    # I tried to just use CMAKE_SOURCE_DIR and CMAKE_CURRENT_SOURCE_DIR\n    # but it's not setting the path correctly and so the toolchain\n    # variable doesn't get passed down to submodules like libkqueue\n    # correctly. Instead get the absolute path to the vcpkg.cmake file\n    # and use that.\n    get_filename_component(_toolchain ./auxil/vcpkg/scripts/buildsystems/vcpkg.cmake ABSOLUTE)\n\n    # This needs to happen before the project() call below so that it\n    # doesn't need to be manually passed on the command line.\n    set(CMAKE_TOOLCHAIN_FILE ${_toolchain} CACHE STRING \"Vcpkg toolchain file\")\nendif ()\n\nproject(Zeek C CXX)\n\n# We want to set ENABLE_DEBUG to ON by default if the build type is Debug.\nset(ENABLE_DEBUG_DEFAULT OFF)\nif (NOT GENERATOR_IS_MULTI_CONFIG)\n    string(TOLOWER \"${CMAKE_BUILD_TYPE}\" _build_type_lower)\n    if (_build_type_lower STREQUAL \"debug\")\n        set(ENABLE_DEBUG_DEFAULT ON)\n    endif ()\n    unset(_build_type_lower)\nendif ()\n\n# On UNIX, install additional Zeek tools by default and build shared objects.\nif (NOT WIN32)\n    set(ZEEK_INSTALL_TOOLS_DEFAULT ON)\n    option(BUILD_SHARED_LIBS \"Build targets as shared libraries.\" ON)\nelse ()\n    set(ZEEK_INSTALL_TOOLS_DEFAULT OFF)\nendif ()\n\n# CMake options (Boolean flags).\noption(ENABLE_DEBUG \"Build Zeek with additional debugging support.\" ${ENABLE_DEBUG_DEFAULT})\noption(ENABLE_JEMALLOC \"Link against jemalloc.\" OFF)\noption(ENABLE_PERFTOOLS \"Build with support for Google perftools.\" OFF)\noption(ENABLE_ZEEK_UNIT_TESTS \"Build the C++ unit tests.\" ON)\noption(INSTALL_AUX_TOOLS \"Install additional tools from auxil.\" ${ZEEK_INSTALL_TOOLS_DEFAULT})\noption(INSTALL_BTEST \"Install btest alongside Zeek.\" ${ZEEK_INSTALL_TOOLS_DEFAULT})\noption(INSTALL_BTEST_PCAPS \"Install pcap files for testing.\" ${ZEEK_INSTALL_TOOLS_DEFAULT})\noption(INSTALL_ZEEKCTL \"Install zeekctl.\" ${ZEEK_INSTALL_TOOLS_DEFAULT})\noption(INSTALL_ZEEK_CLIENT \"Install the zeek-client.\" ${ZEEK_INSTALL_TOOLS_DEFAULT})\noption(INSTALL_ZKG \"Install zkg.\" ${ZEEK_INSTALL_TOOLS_DEFAULT})\noption(PREALLOCATE_PORT_ARRAY \"Pre-allocate all ports for zeek::Val.\" ON)\noption(ZEEK_STANDALONE \"Build Zeek as stand-alone binary?\" ON)\n\n# Non-boolean options.\nif (NOT WIN32)\n    if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n        set(CMAKE_INSTALL_PREFIX \"/usr/local/zeek\"\n            CACHE PATH \"Install directory used by install().\" FORCE)\n    endif ()\n    # On windows, this defaults to \"c:/Program Files/${PROJECT_NAME}\":\n    # https://cmake.org/cmake/help/v3.15/variable/CMAKE_INSTALL_PREFIX.html.\nendif ()\n\nset(ZEEK_SCRIPT_INSTALL_PATH \"${CMAKE_INSTALL_PREFIX}/share/zeek\"\n    CACHE PATH \"Install directory for Zeek scripts.\")\n\nset(ZEEK_ETC_INSTALL_DIR \"${CMAKE_INSTALL_PREFIX}/etc\"\n    CACHE PATH \"Install directory for Zeek configuration files.\")\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON CACHE INTERNAL\n                                           \"Whether to write a JSON compile commands database\")\n\nset(ZEEK_CXX_STD cxx_std_17 CACHE STRING \"The C++ standard to use.\")\n\nset(ZEEK_SANITIZERS \"\" CACHE STRING \"Sanitizers to use when building.\")\n\nset(CPACK_SOURCE_IGNORE_FILES \"\" CACHE STRING \"Files to be ignored by CPack\")\n\nset(ZEEK_INCLUDE_PLUGINS \"\" CACHE STRING \"Extra plugins to add to the build.\")\n\nset(ZEEK_VERSION_LOCAL \"\" CACHE STRING \"Custom version string.\")\n\n# Look into the build tree for additional CMake modules.\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_BINARY_DIR})\nlist(APPEND CMAKE_PREFIX_PATH ${CMAKE_BINARY_DIR})\n\n# Windows: Configure runtime and dependencies\nif (MSVC)\n    # Remove existing runtime flags\n    set(CompilerFlags\n        CMAKE_CXX_FLAGS\n        CMAKE_CXX_FLAGS_DEBUG\n        CMAKE_CXX_FLAGS_RELEASE\n        CMAKE_CXX_FLAGS_RELWITHDEBINFO\n        CMAKE_C_FLAGS\n        CMAKE_C_FLAGS_DEBUG\n        CMAKE_C_FLAGS_RELEASE\n        CMAKE_C_FLAGS_RELWITHDEBINFO)\n    foreach (CompilerFlag ${CompilerFlags})\n        string(REGEX REPLACE \"[/|-]MDd\" \"\" ${CompilerFlag} \"${${CompilerFlag}}\")\n        string(REGEX REPLACE \"[/|-]MD\" \"\" ${CompilerFlag} \"${${CompilerFlag}}\")\n        string(REGEX REPLACE \"[/|-]MTd\" \"\" ${CompilerFlag} \"${${CompilerFlag}}\")\n        string(REGEX REPLACE \"[/|-]MT\" \"\" ${CompilerFlag} \"${${CompilerFlag}}\")\n        string(REGEX REPLACE \"[/|-]Zi\" \"\" ${CompilerFlag} \"${${CompilerFlag}}\")\n        string(REGEX REPLACE \"[/|-]W3\" \"\" ${CompilerFlag} \"${${CompilerFlag}}\")\n        string(REGEX REPLACE \"[/|-]W4\" \"\" ${CompilerFlag} \"${${CompilerFlag}}\")\n    endforeach ()\n\n    # Set compilation flags for Windows\n    add_compile_options(\n        /guard:cf # required by CheckCFlags\n        /Z7 # required by CheckCFlags\n        /J # Similar to -funsigned-char on other platforms\n        /wd4068) # Disable unknown pragma warnings\n\n    add_link_options(/debug:full # required by CheckCFlags\n    )\n\n    # Set always to static runtime\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /MT\")\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /MTd /DDEBUG\")\n    if (CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n        set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreadedDebug\")\n        set(CMAKE_MSVC_RUNTIME_LIBRARY_FLAG \"MTd\")\n    else ()\n        set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded\")\n        set(CMAKE_MSVC_RUNTIME_LIBRARY_FLAG \"MT\")\n    endif ()\n\n    set(OPENSSL_USE_STATIC_LIBS true)\n    set(OPENSSL_MSVC_STATIC_RT true)\n\n    # Set PCAP_ROOT_DIR to point at the installation from vcpkg. A later call\n    # to FindPCAP.cmake will fill in the rest of the necessary variables.\n    if (NOT PCAP_ROOT_DIR)\n        set(PCAP_ROOT_DIR ${VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET})\n    else ()\n        unset(PCAP_INCLUDE_DIR CACHE)\n        unset(PCAP_LIBRARY CACHE)\n    endif ()\n\n    set(LIBPCAP_PCAP_COMPILE_NOPCAP_HAS_ERROR_PARAMETER false)\n\n    # Find zlib installed by vcpkg.\n    find_package(ZLIB)\n    set(ZLIB_LIBRARY ZLIB::ZLIB)\n\n    # Find c-ares installed by vcpkg.\n    find_package(c-ares)\n    set(HAVE_CARES true) # Disable FindCAres cmake file\n    include_directories(BEFORE ${c-ares_INCLUDE_DIRS})\n    set(zeekdeps ${zeekdeps} c-ares::cares)\n    add_definitions(-DCARES_STATICLIB)\n\n    add_subdirectory(auxil/libunistd)\n    set(UNISTD_INCLUDES ${CMAKE_SOURCE_DIR}/auxil/libunistd/unistd\n                        ${CMAKE_SOURCE_DIR}/auxil/libunistd/regex)\n    include_directories(BEFORE ${UNISTD_INCLUDES})\n\n    # Required for `check_include_files` to operate correctly\n    list(APPEND CMAKE_REQUIRED_INCLUDES ${UNISTD_INCLUDES})\n    list(APPEND zeekdeps libunistd libregex)\n\n    # Set CMAKE flags for supported windows build.\n    set(DISABLE_PYTHON_BINDINGS true)\n    set(BROKER_DISABLE_TESTS true)\n    set(BROKER_DISABLE_DOC_EXAMPLES true)\n    add_definitions(-DDOCTEST_CONFIG_NO_MULTITHREADING)\n\n    # Disable Spicy as it is not yet supported in Windows.\n    set(DISABLE_SPICY true)\n\n    if (BUILD_WITH_WERROR)\n        # TODO: This is disabled for now because there a bunch of known\n        # compiler warnings on Windows that we don't have good fixes for.\n        #set(WERROR_FLAG \"/WX\")\n        #set(WERROR_FLAG \"/WX\")\n    endif ()\nelse ()\n    include(GNUInstallDirs)\n    if (BUILD_WITH_WERROR)\n        set(WERROR_FLAG \"-Werror\")\n    endif ()\nendif ()\n\ninclude(cmake/CommonCMakeConfig.cmake)\ninclude(cmake/FindClangTidy.cmake)\ninclude(cmake/CheckCompilerArch.cmake)\n\nstring(TOLOWER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_LOWER)\n\n# ##############################################################################\n# Main targets and utilities.\n\n# Variable for referring back to Zeek's top-level source dir. Used for plugins\n# to tell them where to find the Zeek headers.\nset(ZEEK_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\")\n\n# Tell dynamic plugins where to find scripts such as\n# zeek-plugin-create-package.sh. Needed by ZeekPluginConfig.cmake.in.\nset(ZEEK_PLUGIN_SCRIPTS_PATH \"${PROJECT_SOURCE_DIR}/cmake\")\n\n# Our C++17 base target for propagating compiler and linker flags. Note: for\n# now, we only use it for passing library dependencies around.\nadd_library(zeek_internal INTERFACE)\nadd_library(Zeek::Internal ALIAS zeek_internal)\nset_target_properties(zeek_internal PROPERTIES EXPORT_NAME Internal)\ninstall(TARGETS zeek_internal EXPORT ZeekTargets)\n\n# Skip \"link-time version check\" in Plugin.h for plugins that we bake in.\ntarget_compile_definitions(zeek_internal INTERFACE ZEEK_PLUGIN_SKIP_VERSION_CHECK)\n\n# Target for bundling the creation of auto-generated files.\nadd_custom_target(zeek_autogen_files)\n\n# Define our main targets and place the output files under src (for historic\n# reasons and backwards compatibility).\nif (ZEEK_STANDALONE)\n    add_executable(zeek_exe)\n    target_compile_features(zeek_exe PRIVATE ${ZEEK_CXX_STD})\n    set_target_properties(zeek_exe PROPERTIES CXX_EXTENSIONS OFF)\n    target_link_libraries(zeek_exe PRIVATE $<BUILD_INTERFACE:zeek_internal>)\n    add_dependencies(zeek_exe zeek_autogen_files)\n    set_target_properties(zeek_exe PROPERTIES RUNTIME_OUTPUT_NAME zeek)\n    if (NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)\n        set_target_properties(zeek_exe PROPERTIES RUNTIME_OUTPUT_DIRECTORY src)\n    endif ()\n    install(TARGETS zeek_exe RUNTIME DESTINATION bin)\n    # Export symbols from zeek executable for use by plugins\n    set_target_properties(zeek_exe PROPERTIES ENABLE_EXPORTS ON)\n    if (MSVC)\n        set(WINDOWS_EXPORT_ALL_SYMBOLS ON)\n    endif ()\n    # Tell zeek_target_link_libraries to add library dependencies as PRIVATE.\n    set(zeek_exe_access PRIVATE)\n\n    if (${CMAKE_SYSTEM_NAME} MATCHES \"FreeBSD\")\n        target_link_libraries(zeek_exe PRIVATE /usr/lib/libutil.so)\n        target_link_libraries(zeek_exe PRIVATE procstat)\n    endif ()\nelse ()\n    add_library(zeek_lib STATIC)\nendif ()\n\nif (TARGET zeek_lib)\n    target_link_libraries(zeek_lib PRIVATE $<BUILD_INTERFACE:zeek_internal>)\n    add_dependencies(zeek_lib zeek_autogen_files)\n    set_target_properties(zeek_lib PROPERTIES RUNTIME_OUTPUT_NAME libzeek)\n    if (NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)\n        set_target_properties(zeek_lib PROPERTIES LIBRARY_OUTPUT_DIRECTORY src)\n    endif ()\n    install(TARGETS zeek_lib LIBRARY DESTINATION lib)\n    # Tell zeek_target_link_libraries to add library dependencies as PRIVATE.\n    set(zeek_lib_access PRIVATE)\n\n    if (${CMAKE_SYSTEM_NAME} MATCHES \"FreeBSD\")\n        target_link_libraries(zeek_lib PRIVATE /usr/lib/libutil.so)\n        target_link_libraries(zeek_lib PRIVATE procstat)\n    endif ()\n\nendif ()\n\n# When building our fuzzers, we also need one extra top-level target that\n# bundles all of our object libraries and other dependencies.\nif (ZEEK_ENABLE_FUZZERS)\n    add_library(zeek_fuzzer_shared SHARED)\n    target_compile_features(zeek_fuzzer_shared PRIVATE ${ZEEK_CXX_STD})\n    set_target_properties(zeek_fuzzer_shared PROPERTIES CXX_EXTENSIONS OFF)\n    target_link_libraries(zeek_fuzzer_shared PUBLIC $<BUILD_INTERFACE:zeek_internal>)\n    # Tell zeek_target_link_libraries to add library dependencies as PUBLIC.\n    set(zeek_fuzzer_shared_access PUBLIC)\nendif ()\n\n# Set ZEEK_CONFIG_SKIP_VERSION_H for our main in-source targets.\nforeach (name zeek_exe zeek_lib zeek_fuzzer_shared)\n    if (TARGET ${name})\n        target_compile_definitions(${name} PRIVATE ZEEK_CONFIG_SKIP_VERSION_H)\n        target_compile_options(${name} PRIVATE ${WERROR_FLAG})\n    endif ()\nendforeach ()\n\n# Convenience function for adding library dependencies to the main target(s).\nfunction (zeek_target_link_libraries lib_target)\n    foreach (name zeek_exe zeek_lib zeek_fuzzer_shared)\n        if (TARGET ${name})\n            target_link_libraries(${name} ${${name}_access} ${lib_target})\n        endif ()\n    endforeach ()\nendfunction ()\n\nfunction (zeek_include_directories)\n    foreach (name zeek_exe zeek_lib zeek_fuzzer_shared)\n        if (TARGET ${name})\n            target_include_directories(${name} ${${name}_access} ${ARGN})\n        endif ()\n    endforeach ()\nendfunction ()\n\n# Convenience function for adding a dependency to the main target(s).\nfunction (zeek_add_dependencies dep)\n    foreach (name zeek_exe zeek_lib zeek_fuzzer_shared)\n        if (TARGET ${name})\n            add_dependencies(${name} ${dep})\n        endif ()\n    endforeach ()\nendfunction ()\n\n# Used by library zeek_dynamic_plugin_base and for sanitizer builds.\nfind_package(Threads REQUIRED)\n\n# Interface library for propagating extra flags and include paths to dynamically\n# loaded plugins. Also propagates include paths and C++17 mode on the install\n# interface.\nadd_library(zeek_dynamic_plugin_base INTERFACE)\ntarget_include_directories(\n    zeek_dynamic_plugin_base\n    INTERFACE $<INSTALL_INTERFACE:include> $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>\n              $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>)\ntarget_link_libraries(zeek_dynamic_plugin_base INTERFACE Threads::Threads)\nadd_library(Zeek::DynamicPluginBase ALIAS zeek_dynamic_plugin_base)\nset_target_properties(zeek_dynamic_plugin_base PROPERTIES EXPORT_NAME DynamicPluginBase)\ninstall(TARGETS zeek_dynamic_plugin_base EXPORT ZeekTargets)\n\n# On macOS, we need to tell the linker that the modules are allowed to have\n# undefined symbols.\nif (CMAKE_SYSTEM_NAME MATCHES \"Darwin\")\n    target_link_options(zeek_dynamic_plugin_base INTERFACE -undefined dynamic_lookup\n                        -Wl,-bind_at_load)\nendif ()\n\nfunction (add_zeek_dynamic_plugin_build_interface_include_directories)\n    foreach (path ${ARGV})\n        target_include_directories(zeek_dynamic_plugin_base INTERFACE $<BUILD_INTERFACE:${path}>)\n    endforeach ()\nendfunction ()\n\nadd_zeek_dynamic_plugin_build_interface_include_directories(\n    ${PROJECT_SOURCE_DIR}/src/include\n    ${PROJECT_SOURCE_DIR}/auxil/binpac/lib\n    ${PROJECT_SOURCE_DIR}/auxil/broker/libbroker\n    ${PROJECT_SOURCE_DIR}/auxil/paraglob/include\n    ${PROJECT_SOURCE_DIR}/auxil/prometheus-cpp/core/include\n    ${CMAKE_BINARY_DIR}/src\n    ${CMAKE_BINARY_DIR}/src/include\n    ${CMAKE_BINARY_DIR}/auxil/binpac/lib\n    ${CMAKE_BINARY_DIR}/auxil/broker/libbroker\n    ${CMAKE_BINARY_DIR}/auxil/prometheus-cpp/core/include)\n\ntarget_include_directories(\n    zeek_dynamic_plugin_base SYSTEM\n    INTERFACE $<INSTALL_INTERFACE:include/zeek/3rdparty/prometheus-cpp/include>)\n\n# Convenience function for adding an OBJECT library that feeds directly into the\n# main target(s).\n#\n# Usage: zeek_add_subdir_library( <name> SOURCES ... [INCLUDE_DIRS ...]\n# [DEPENDENCIES ...] [INTERNAL_DEPENDENCIES ...] [BIFS ...] )\nfunction (zeek_add_subdir_library name)\n    # Parse arguments.\n    set(fn_varargs INCLUDE_DIRS DEPENDENCIES INTERNAL_DEPENDENCIES SOURCES BIFS)\n    cmake_parse_arguments(FN_ARGS \"\" \"\" \"${fn_varargs}\" ${ARGN})\n    if (NOT FN_ARGS_SOURCES)\n        message(FATAL_ERROR \"zeek_add_subdir_library called without any SOURCES\")\n    endif ()\n\n    # Create target and add the sources.\n    set(target_name \"zeek_${name}_obj\")\n    add_library(${target_name} OBJECT ${FN_ARGS_SOURCES})\n    target_compile_features(${target_name} PRIVATE ${ZEEK_CXX_STD})\n    set_target_properties(${target_name} PROPERTIES CXX_EXTENSIONS OFF)\n    target_compile_definitions(${target_name} PRIVATE ZEEK_CONFIG_SKIP_VERSION_H)\n    add_dependencies(${target_name} zeek_autogen_files)\n    target_link_libraries(${target_name} PRIVATE $<BUILD_INTERFACE:zeek_internal>)\n    add_clang_tidy_files(${FN_ARGS_SOURCES})\n    target_compile_options(${target_name} PRIVATE ${WERROR_FLAG})\n\n    # Take care of compiling BIFs.\n    if (FN_ARGS_BIFS)\n        foreach (bif ${FN_ARGS_BIFS})\n            # Generate the target and add the extra dependency.\n            bif_target(${bif})\n        endforeach ()\n    endif ()\n\n    # Optionally add include directories and extra dependencies.\n    if (FN_ARGS_INCLUDE_DIRS)\n        target_include_directories(${target_name} BEFORE PRIVATE ${FN_ARGS_INCLUDE_DIRS})\n    endif ()\n    if (FN_ARGS_DEPENDENCIES)\n        target_link_libraries(${target_name} PRIVATE ${FN_ARGS_DEPENDENCIES})\n    endif ()\n    if (FN_ARGS_INTERNAL_DEPENDENCIES)\n        add_dependencies(${target_name} ${FN_ARGS_INTERNAL_DEPENDENCIES})\n    endif ()\n\n    # Feed into the main Zeek target(s).\n    zeek_target_link_libraries(${target_name})\nendfunction ()\n\n# ##############################################################################\n# Utility function for forcing CMake to re-run if files change on disk.\n\nfunction (zeek_watch_files)\n    set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${ARGN})\nendfunction ()\n\n# ##############################################################################\n# Create empty __load__.zeek stubs (override pre-existing ones).\n\nfunction (zeek_create_load_script_stubs)\n    set(file_comment \"# Warning, this is an autogenerated file!\\n\")\n    foreach (fpath ${ARGN})\n        file(WRITE \"${CMAKE_BINARY_DIR}/${fpath}\" \"${file_comment}\")\n        zeek_watch_files(\"${CMAKE_BINARY_DIR}/${fpath}\")\n    endforeach ()\nendfunction ()\n\n# Note: these files are filled from BifCl.cmake via `file(APPEND ...)`\nzeek_create_load_script_stubs(scripts/builtin-plugins/__load__.zeek\n                              scripts/base/bif/plugins/__load__.zeek scripts/base/bif/__load__.zeek)\n\n# ##############################################################################\n# Create empty __all__*.cc stubs (override pre-existing ones).\n\nfunction (zeek_create_bif_autogen_stubs)\n    set(file_comment \"// Warning, this is an autogenerated file!\\n\")\n    foreach (fpath ${ARGN})\n        file(WRITE \"${CMAKE_BINARY_DIR}/${fpath}\" \"${file_comment}\")\n        zeek_watch_files(\"${CMAKE_BINARY_DIR}/${fpath}\")\n    endforeach ()\nendfunction ()\n\n# Note: these files are filled from BifCl.cmake via `file(APPEND ...)`.\nzeek_create_bif_autogen_stubs(src/__all__.bif.cc src/__all__.bif.init.cc\n                              src/__all__.bif.register.cc)\n\n# ##############################################################################\n# Project/Build Configuration\n\nif (ZEEK_ENABLE_FUZZERS)\n    # Fuzzers use shared lib to save disk space, so need -fPIC on everything\n    set(CMAKE_POSITION_INDEPENDENT_CODE ON)\nendif ()\n\nif (ENABLE_ZEEK_UNIT_TESTS)\n    enable_testing()\n    add_definitions(-DDOCTEST_CONFIG_SUPER_FAST_ASSERTS)\n    target_compile_definitions(zeek_dynamic_plugin_base INTERFACE DOCTEST_CONFIG_SUPER_FAST_ASSERTS)\nelse ()\n    add_definitions(-DDOCTEST_CONFIG_DISABLE)\n    target_compile_definitions(zeek_dynamic_plugin_base INTERFACE DOCTEST_CONFIG_DISABLE)\nendif ()\n\nif (ENABLE_CCACHE)\n    find_program(CCACHE_PROGRAM ccache)\n\n    if (NOT CCACHE_PROGRAM)\n        message(FATAL_ERROR \"ccache not found\")\n    endif ()\n\n    message(STATUS \"Using ccache: ${CCACHE_PROGRAM}\")\n    set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE_PROGRAM})\n    set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE_PROGRAM})\nendif ()\n\nset(ZEEK_ROOT_DIR ${CMAKE_INSTALL_PREFIX})\nif (NOT ZEEK_SCRIPT_INSTALL_PATH)\n    # set the default Zeek script installation path (user did not specify one)\n    set(ZEEK_SCRIPT_INSTALL_PATH ${ZEEK_ROOT_DIR}/share/zeek)\nendif ()\n\nif (NOT ZEEK_MAN_INSTALL_PATH)\n    # set the default Zeek man page installation path (user did not specify one)\n    set(ZEEK_MAN_INSTALL_PATH ${ZEEK_ROOT_DIR}/share/man)\nendif ()\n\n# sanitize the Zeek script install directory into an absolute path (CMake is\n# confused by ~ as a representation of home directory)\nget_filename_component(ZEEK_SCRIPT_INSTALL_PATH ${ZEEK_SCRIPT_INSTALL_PATH} ABSOLUTE)\n\n# A folder for library-like Zeek-specific things: Python modules, Zeek plugins,\n# etc.\nset(ZEEK_LIBDIR_PATH ${CMAKE_INSTALL_FULL_LIBDIR}/zeek)\n\nif (NOT ZEEK_PLUGIN_DIR)\n    set(ZEEK_PLUGIN_DIR ${ZEEK_LIBDIR_PATH}/plugins CACHE STRING \"Installation path for plugins\"\n                                                          FORCE)\nendif ()\n\nset(cmake_binary_dir \"${CMAKE_BINARY_DIR}\")\nset(cmake_current_binary_dir \"${CMAKE_CURRENT_BINARY_DIR}\")\nset(cmake_install_prefix \"${CMAKE_INSTALL_PREFIX}\")\nset(cmake_source_dir \"${CMAKE_SOURCE_DIR}\")\nset(zeek_script_install_path \"${ZEEK_SCRIPT_INSTALL_PATH}\")\nif (MSVC)\n    # This has to happen before we modify the paths below so that the pure Windows\n    # paths are stored in the output file.\n    configure_file(cmake_templates/zeek-path-dev.bat.in\n                   ${CMAKE_CURRENT_BINARY_DIR}/zeek-path-dev.bat)\n\n    string(REGEX REPLACE \"^([A-Za-z]):/(.*)\" \"/\\\\1/\\\\2\" cmake_binary_dir \"${cmake_binary_dir}\")\n    string(REGEX REPLACE \"^([A-Za-z]):/(.*)\" \"/\\\\1/\\\\2\" cmake_current_binary_dir\n                         \"${cmake_current_binary_dir}\")\n    string(REGEX REPLACE \"^([A-Za-z]):/(.*)\" \"/\\\\1/\\\\2\" cmake_install_prefix\n                         \"${cmake_install_prefix}\")\n    string(REGEX REPLACE \"^([A-Za-z]):/(.*)\" \"/\\\\1/\\\\2\" cmake_source_dir \"${cmake_source_dir}\")\n    string(REGEX REPLACE \"^([A-Za-z]):/(.*)\" \"/\\\\1/\\\\2\" zeek_script_install_path\n                         \"${zeek_script_install_path}\")\nendif ()\n\n# Set the path where we install the ZeekConfig.cmake file and related files.\nset(ZEEK_CMAKE_CONFIG_DIR \"${CMAKE_INSTALL_PREFIX}/share/zeek/cmake\")\n\nif (NOT ZEEK_ETC_INSTALL_DIR)\n    set(ZEEK_ETC_INSTALL_DIR ${ZEEK_ROOT_DIR}/etc)\nendif ()\n\nif (NOT ZEEK_STATE_DIR)\n    set(ZEEK_STATE_DIR ${ZEEK_ROOT_DIR}/var/lib)\nendif ()\n\nif (NOT ZEEK_SPOOL_DIR)\n    set(ZEEK_SPOOL_DIR ${ZEEK_ROOT_DIR}/spool)\nendif ()\n\nif (NOT ZEEK_LOG_DIR)\n    set(ZEEK_LOG_DIR ${ZEEK_ROOT_DIR}/logs)\nendif ()\n\nif (NOT MSVC)\n    set(HAVE_SUPERVISOR true)\nendif ()\n\ninstall(DIRECTORY DESTINATION ${ZEEK_ETC_INSTALL_DIR})\ninstall(DIRECTORY DESTINATION ${ZEEK_STATE_DIR})\ninstall(DIRECTORY DESTINATION ${ZEEK_SPOOL_DIR})\ninstall(DIRECTORY DESTINATION ${ZEEK_LOG_DIR})\n\nconfigure_file(cmake_templates/zeek-path-dev.in ${CMAKE_CURRENT_BINARY_DIR}/zeek-path-dev)\n\nfile(\n    WRITE ${CMAKE_CURRENT_BINARY_DIR}/zeek-path-dev.sh\n    \"export ZEEKPATH=`${cmake_binary_dir}/zeek-path-dev`\\n\"\n    \"export ZEEK_PLUGIN_PATH=\\\"${cmake_binary_dir}/src\\\":$\\{ZEEK_PLUGIN_PATH\\}\\n\"\n    \"export PATH=\\\"${cmake_binary_dir}\\\":\\\"${cmake_binary_dir}/src\\\":\\\"${cmake_binary_dir}/auxil/spicy/bin\\\":\\\"${cmake_binary_dir}/src/spicy/spicyz\\\":$\\{PATH\\}\\n\"\n    \"export SPICY_PATH=`${cmake_binary_dir}/spicy-path`\\n\"\n    \"export HILTI_CXX_INCLUDE_DIRS=`${cmake_binary_dir}/hilti-cxx-include-dirs`\\n\"\n    \"export ZEEK_SPICY_LIBRARY_PATH=${cmake_source_dir}/scripts/spicy\\n\"\n    \"export SPICY_BUILD_DIRECTORY=${cmake_binary_dir}/auxil/spicy\\n\")\n\nfile(\n    WRITE ${CMAKE_CURRENT_BINARY_DIR}/zeek-path-dev.csh\n    \"setenv ZEEKPATH `${cmake_binary_dir}/zeek-path-dev`\\n\"\n    \"setenv ZEEK_PLUGIN_PATH \\\"${cmake_binary_dir}/src\\\":$\\{ZEEK_PLUGIN_PATH\\}\\n\"\n    \"setenv PATH \\\"${cmake_binary_dir}\\\":\\\"${cmake_binary_dir}/src\\\":\\\"${cmake_binary_dir}/auxil/spicy/bin\\\":\\\"${cmake_binary_dir}/src/spicy/spicyz\\\":$\\{PATH\\}\\n\"\n    \"setenv SPICY_PATH \\\"`${cmake_binary_dir}/spicy-path`\\\"\\n\"\n    \"setenv HILTI_CXX_INCLUDE_DIRS \\\"`${cmake_binary_dir}/hilti-cxx-include-dirs`\\\"\\n\"\n    \"setenv ZEEK_SPICY_LIBRARY_PATH \\\"${cmake_source_dir}/scripts/spicy\\\"\\n\"\n    \"setenv SPICY_BUILD_DIRECTORY \\\"${cmake_binary_dir}/auxil/spicy\\\"\\n\")\n\nif (CMAKE_CXX_COMPILER_LAUNCHER)\n    file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/zeek-path-dev.sh\n         \"export HILTI_CXX_COMPILER_LAUNCHER=${CMAKE_CXX_COMPILER_LAUNCHER}\\n\")\n\n    file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/zeek-path-dev.csh\n         \"setenv HILTI_CXX_COMPILER_LAUNCHER=${CMAKE_CXX_COMPILER_LAUNCHER}\\n\")\nendif ()\n\nfile(STRINGS \"${CMAKE_CURRENT_SOURCE_DIR}/VERSION\" ZEEK_VERSION_FULL LIMIT_COUNT 1)\n\nexecute_process(\n    COMMAND grep \"^constexpr int PLUGIN_API_VERSION\"\n    INPUT_FILE ${CMAKE_CURRENT_SOURCE_DIR}/src/plugin/Plugin.h\n    OUTPUT_VARIABLE API_VERSION\n    OUTPUT_STRIP_TRAILING_WHITESPACE)\n\nstring(REGEX MATCH \"^constexpr int PLUGIN_API_VERSION = ([0-9]+);\" API_VERSION \"${API_VERSION}\")\nset(API_VERSION \"${CMAKE_MATCH_1}\")\n\nstring(REGEX REPLACE \"[.-]\" \" \" version_numbers ${ZEEK_VERSION_FULL})\nseparate_arguments(version_numbers)\nlist(GET version_numbers 0 VERSION_MAJOR)\nlist(GET version_numbers 1 VERSION_MINOR)\nlist(GET version_numbers 2 VERSION_PATCH)\nset(VERSION_MAJ_MIN \"${VERSION_MAJOR}.${VERSION_MINOR}\")\nmath(EXPR ZEEK_VERSION_NUMBER\n     \"${VERSION_MAJOR} * 10000 + ${VERSION_MINOR} * 100 + ${VERSION_PATCH}\")\n\nset(VERSION_C_IDENT \"${ZEEK_VERSION_FULL}_plugin_${API_VERSION}\")\nstring(REGEX REPLACE \"-[0-9]*$\" \"_git\" VERSION_C_IDENT \"${VERSION_C_IDENT}\")\nstring(REGEX REPLACE \"[^a-zA-Z0-9_\\$]\" \"_\" VERSION_C_IDENT \"${VERSION_C_IDENT}\")\n\nset(ZEEK_VERSION_FULL_LOCAL \"${ZEEK_VERSION_FULL}\")\nif (NOT ZEEK_VERSION_LOCAL STREQUAL \"\")\n    if (ZEEK_VERSION_LOCAL MATCHES \"-\")\n        message(FATAL_ERROR \"ZEEK_VERSION_LOCAL can not contain dashes: ${ZEEK_VERSION_LOCAL}\")\n    endif ()\n    set(ZEEK_VERSION_FULL_LOCAL \"${ZEEK_VERSION_FULL_LOCAL}-${ZEEK_VERSION_LOCAL}\")\n    set(VERSION_C_IDENT \"${VERSION_C_IDENT}_${ZEEK_VERSION_LOCAL}\")\nendif ()\n\nif (ENABLE_DEBUG)\n    set(VERSION_C_IDENT \"${VERSION_C_IDENT}_debug\")\n    target_compile_definitions(zeek_internal INTERFACE DEBUG)\n    target_compile_definitions(zeek_dynamic_plugin_base INTERFACE DEBUG)\nendif ()\n\nif (NOT BINARY_PACKAGING_MODE)\n    macro (_make_install_dir_symlink _target _link)\n        install(\n            CODE \"\n        if ( \\\"\\$ENV{DESTDIR}\\\" STREQUAL \\\"\\\" )\n          if ( EXISTS \\\"${_target}\\\" AND NOT EXISTS \\\"${_link}\\\" )\n            message(STATUS \\\"WARNING: installed ${_link} as symlink to ${_target}\\\")\n            execute_process(COMMAND \\\"${CMAKE_COMMAND}\\\" -E create_symlink\n              \\\"${_target}\\\" \\\"${_link}\\\")\n          endif ()\n        endif ()\n      \")\n    endmacro ()\n\n    if (\"${CMAKE_INSTALL_PREFIX}\" STREQUAL \"/usr/local/zeek\")\n        # If we're installing into the default prefix, check if the old default\n        # prefix already exists and symlink to it. This is done to help keep custom\n        # user configuration/installation if they're upgrading from a version before\n        # Zeek 3.0.\n        _make_install_dir_symlink(\"/usr/local/bro\" \"/usr/local/zeek\")\n    endif ()\n\n    # Check whether we need to symlink directories used by versions before Zeek\n    # 3.0.\n    _make_install_dir_symlink(\"${CMAKE_INSTALL_PREFIX}/include/bro\"\n                              \"${CMAKE_INSTALL_PREFIX}/include/zeek\")\n    _make_install_dir_symlink(\"${CMAKE_INSTALL_PREFIX}/share/bro\"\n                              \"${CMAKE_INSTALL_PREFIX}/share/zeek\")\n    _make_install_dir_symlink(\"${CMAKE_INSTALL_PREFIX}/lib/bro\" \"${CMAKE_INSTALL_FULL_LIBDIR}/zeek\")\nendif ()\n\nif (ZEEK_SANITIZERS)\n    string(REPLACE \",\" \" \" _sanitizer_args \"${ZEEK_SANITIZERS}\")\n    separate_arguments(_sanitizer_args)\n    set(ZEEK_SANITIZERS \"\")\n\n    foreach (_sanitizer ${_sanitizer_args})\n        if (ZEEK_SANITIZERS)\n            set(ZEEK_SANITIZERS \"${ZEEK_SANITIZERS},\")\n        endif ()\n\n        if (_sanitizer STREQUAL \"thread\")\n            set(ZEEK_TSAN true)\n        endif ()\n\n        if (NOT _sanitizer STREQUAL \"undefined\")\n            set(ZEEK_SANITIZERS \"${ZEEK_SANITIZERS}${_sanitizer}\")\n            continue()\n        endif ()\n\n        if (NOT DEFINED ZEEK_SANITIZER_UB_CHECKS)\n            if (DEFINED ENV{ZEEK_TAILORED_UB_CHECKS})\n                # list(APPEND _check_list \"alignment\") # TODO: fix associated errors\n                list(APPEND _check_list \"bool\")\n                # list(APPEND _check_list \"builtin\") # Not implemented in older GCCs\n                list(APPEND _check_list \"bounds\") # Covers both array/local bounds\n                                                  # options below\n                # list(APPEND _check_list \"array-bounds\") # Not implemented by GCC\n                # list(APPEND _check_list \"local-bounds\") # Not normally part of\n                # \"undefined\"\n                list(APPEND _check_list \"enum\")\n                list(APPEND _check_list \"float-cast-overflow\")\n                list(APPEND _check_list \"float-divide-by-zero\")\n                # list(APPEND _check_list \"function\") # Not implemented by GCC\n                # list(APPEND _check_list \"implicit-unsigned-integer-truncation\") # Not\n                # truly UB list(APPEND _check_list \"implicit-signed-integer-truncation\")\n                # # Not truly UB list(APPEND _check_list \"implicit-integer-sign-change\")\n                # # Not truly UB\n                list(APPEND _check_list \"integer-divide-by-zero\")\n                list(APPEND _check_list \"nonnull-attribute\")\n                list(APPEND _check_list \"null\")\n                # list(APPEND _check_list \"nullability-arg\") # Not normally part of\n                # \"undefined\" list(APPEND _check_list \"nullability-assign\") # Not\n                # normally part of \"undefined\" list(APPEND _check_list\n                # \"nullability-return\") # Not normally part of \"undefined\" list(APPEND\n                # _check_list \"objc-cast\") # Not truly UB list(APPEND _check_list\n                # \"pointer-overflow\") # Not implemented in older GCCs\n                list(APPEND _check_list \"return\")\n                list(APPEND _check_list \"returns-nonnull-attribute\")\n                list(APPEND _check_list \"shift\")\n                # list(APPEND _check_list \"unsigned-shift-base\") # Not implemented by\n                # GCC\n                list(APPEND _check_list \"signed-integer-overflow\")\n                list(APPEND _check_list \"unreachable\")\n                # list(APPEND _check_list \"unsigned-integer-overflow\") # Not truly UB\n                list(APPEND _check_list \"vla-bound\")\n                list(APPEND _check_list \"vptr\")\n\n                # Clang complains if this one is defined and the optimizer is set to\n                # -O0. We only set that optimization level if NO_OPTIMIZATIONS is\n                # passed, so disable the option if that's set.\n                if (NOT DEFINED ENV{NO_OPTIMIZATIONS})\n                    list(APPEND _check_list \"object-size\")\n                endif ()\n\n                string(REPLACE \";\" \",\" _ub_checks \"${_check_list}\")\n                set(ZEEK_SANITIZER_UB_CHECKS \"${_ub_checks}\" CACHE INTERNAL \"\" FORCE)\n            else ()\n                set(ZEEK_SANITIZER_UB_CHECKS \"undefined\" CACHE INTERNAL \"\" FORCE)\n            endif ()\n        endif ()\n\n        set(ZEEK_SANITIZERS \"${ZEEK_SANITIZERS}${ZEEK_SANITIZER_UB_CHECKS}\")\n    endforeach ()\n\n    set(_sanitizer_flags \"-fsanitize=${ZEEK_SANITIZERS}\")\n\n    # The linker command used by check_cxx_compiler_flag requires you to also pass\n    # the sanitizer to it or it fails. The best way to do this is to set\n    # CMAKE_REQUIRED_LINK_OPTIONS, but save off a copy of it so it can be reset\n    # back to what it was previously afterwards.\n    set(_temp_link_options ${CMAKE_REQUIRED_LINK_OPTIONS})\n    list(APPEND CMAKE_REQUIRED_LINK_OPTIONS ${_sanitizer_flags})\n    include(CheckCXXCompilerFlag)\n    check_cxx_compiler_flag(${_sanitizer_flags} COMPILER_SUPPORTS_SANITIZERS)\n    if (NOT COMPILER_SUPPORTS_SANITIZERS)\n        message(FATAL_ERROR \"Invalid sanitizer compiler flags: ${_sanitizer_flags}\")\n    endif ()\n    set(CMAKE_REQUIRED_LINK_OPTIONS ${_temp_link_options})\n\n    if (ZEEK_SANITIZER_UB_CHECKS)\n        set(_sanitizer_flags\n            \"${_sanitizer_flags} -fno-sanitize-recover=${ZEEK_SANITIZER_UB_CHECKS}\")\n    endif ()\n\n    set(_sanitizer_flags \"${_sanitizer_flags} -fno-omit-frame-pointer\")\n    set(_sanitizer_flags \"${_sanitizer_flags} -fno-optimize-sibling-calls\")\n\n    if (NOT DEFINED ZEEK_SANITIZER_OPTIMIZATIONS)\n        if (DEFINED ENV{NO_OPTIMIZATIONS})\n            # Using -O1 is generally the suggestion to get more reasonable\n            # performance.  The one downside is it that the compiler may optimize out\n            # code that otherwise generates an error/leak in a -O0 build, but that\n            # should be rare and users mostly will not be running unoptimized builds\n            # in production anyway.\n            set(ZEEK_SANITIZER_OPTIMIZATIONS false CACHE INTERNAL \"\" FORCE)\n        else ()\n            set(ZEEK_SANITIZER_OPTIMIZATIONS true CACHE INTERNAL \"\" FORCE)\n        endif ()\n    endif ()\n\n    if (ZEEK_SANITIZER_OPTIMIZATIONS)\n        set(_sanitizer_flags \"${_sanitizer_flags} -O1\")\n    endif ()\n\n    # Technically, the we also need to use the compiler to drive linking and give\n    # the sanitizer flags there, too.  However, CMake, by default, uses the\n    # compiler for linking and so the automatically flags get used.  See\n    # https://cmake.org/pipermail/cmake/2014-August/058268.html\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${_sanitizer_flags}\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${_sanitizer_flags}\")\nendif ()\n\n# ##############################################################################\n# Dependency Configuration\n\n# Check cache value first to avoid displaying \"Found sed\" messages everytime\nif (NOT SED_EXE)\n    find_program(SED_EXE sed)\n    if (NOT SED_EXE)\n        message(FATAL_ERROR \"Could not find required dependency: sed\")\n    else ()\n        message(STATUS \"Found sed: ${SED_EXE}\")\n    endif ()\nendif ()\n\nset(ZEEK_PYTHON_MIN 3.9.0)\nset(Python_FIND_UNVERSIONED_NAMES FIRST)\nfind_package(Python ${ZEEK_PYTHON_MIN} REQUIRED COMPONENTS Interpreter)\nfind_package(FLEX REQUIRED)\nfind_package(BISON 2.5 REQUIRED)\nfind_package(PCAP REQUIRED)\nfind_package(OpenSSL REQUIRED)\nif (NOT MSVC)\n    find_package(BIND REQUIRED)\nendif ()\nfind_package(ZLIB REQUIRED)\n\nif (NOT BINARY_PACKAGING_MODE)\n    # TODO: Broker seems to always turn on static libraries. We don't want that for Spicy by default.\n    set(BUILD_SHARED_LIBS yes)\nendif ()\n\n# Forward user-defined hint for OpenSSL to the plugins. Use a cache variable to\n# make sure this variable survives CMake re-runs. Note: This variable is picked\n# up in ZeekPluginConfig.cmake.in and ZeekConfig.cmake.in.\nif (OPENSSL_ROOT_DIR)\n    set(ZeekOpenSSLHint \"${OPENSSL_ROOT_DIR}\" CACHE INTERNAL \"\" FORCE)\nelseif (DEFINED ENV{OPENSSL_ROOT_DIR})\n    set(ZeekOpenSSLHint \"$ENV{OPENSSL_ROOT_DIR}\" CACHE INTERNAL \"\" FORCE)\nendif ()\n\n# Forward PKG_CONFIG_PATH to the plugins. Use a cache variable to make sure this\n# variable survives CMake re-runs. Note: This variable is picked up in\n# ZeekPluginConfig.cmake.in.\nif (DEFINED ENV{PKG_CONFIG_PATH})\n    set(ZeekPkgConfigPath \"$ENV{PKG_CONFIG_PATH}\" CACHE INTERNAL \"\" FORCE)\nendif ()\n\n# Installation directory for the distribution's Python modules. An override via\n# configure's --python-dir wins, specifying a directory explicitly. Next is\n# --python-prefix, which includes a versioned Python folder as the --prefix\n# option in distutils does. Next consider a distutils --home style override via\n# --python-home, and finally default to \"zeek/python\" in our libdir.\nif (ZEEK_PYTHON_DIR)\n    set(py_mod_install_dir ${ZEEK_PYTHON_DIR})\nelseif (ZEEK_PYTHON_PREFIX)\n    set(pyver ${Python_VERSION_MAJOR}.${Python_VERSION_MINOR})\n    set(py_mod_install_dir ${ZEEK_PYTHON_PREFIX}/lib/python${pyver}/site-packages)\nelseif (ZEEK_PYTHON_HOME)\n    set(py_mod_install_dir ${ZEEK_PYTHON_HOME}/lib/python)\nelse ()\n    set(py_mod_install_dir ${ZEEK_LIBDIR_PATH}/python)\nendif ()\nset(PY_MOD_INSTALL_DIR ${py_mod_install_dir} CACHE STRING \"Installation path for Python modules\"\n                                                   FORCE)\n\nif (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/auxil/binpac/CMakeLists.txt)\n\n    set(ENABLE_STATIC_ONLY_SAVED ${ENABLE_STATIC_ONLY})\n    if (MSVC)\n        set(BUILD_STATIC_BINPAC true)\n    endif ()\n\n    if (BUILD_STATIC_BINPAC)\n        set(ENABLE_STATIC_ONLY true)\n    endif ()\n\n    add_subdirectory(auxil/binpac)\n    set(ENABLE_STATIC_ONLY ${ENABLE_STATIC_ONLY_SAVED})\n\n    # FIXME: avoid hard-coding a path for multi-config generator support. See the\n    # TODO in ZeekPluginConfig.cmake.in.\n    set(BINPAC_EXE_PATH \"${CMAKE_BINARY_DIR}/auxil/binpac/src/binpac${CMAKE_EXECUTABLE_SUFFIX}\")\nendif ()\n\nfind_package(BinPAC REQUIRED)\n\n# Add an alias (used by our plugin setup).\nadd_executable(Zeek::BinPAC ALIAS binpac)\n\nif (NOT BIFCL_EXE_PATH)\n    add_subdirectory(auxil/bifcl)\n    add_executable(Zeek::BifCl ALIAS bifcl)\n    # FIXME: avoid hard-coding a path for multi-config generator support. See the\n    # TODO in ZeekPluginConfig.cmake.in.\n    set(BIFCL_EXE_PATH \"${CMAKE_BINARY_DIR}/auxil/bifcl/bifcl${CMAKE_EXECUTABLE_SUFFIX}\")\n    set(_bifcl_exe_path \"included\")\nelse ()\n    add_executable(Zeek::BifCl IMPORTED)\n    set_property(TARGET Zeek::BifCl PROPERTY IMPORTED_LOCATION \"${BIFCL_EXE_PATH}\")\n    set(_bifcl_exe_path \"BIFCL_EXE_PATH\")\nendif ()\n\nif (NOT GEN_ZAM_EXE_PATH)\n    add_subdirectory(auxil/gen-zam)\nendif ()\n\nif (ENABLE_JEMALLOC)\n    if (${CMAKE_SYSTEM_NAME} MATCHES \"FreeBSD\")\n        if (DEFINED JEMALLOC_ROOT_DIR)\n            # Look for jemalloc at a specific path\n            find_package(JeMalloc)\n        else ()\n            # jemalloc is in the base system\n            set(JEMALLOC_FOUND true)\n        endif ()\n    else ()\n        find_package(JeMalloc)\n    endif ()\n\n    if (NOT JEMALLOC_FOUND)\n        message(FATAL_ERROR \"Could not find requested JeMalloc\")\n    endif ()\nendif ()\n\nadd_subdirectory(auxil/paraglob)\nif (MSVC)\n    cmake_policy(SET CMP0079 NEW)\n    target_link_libraries(paraglob shlwapi)\n    set(BROKER_DISABLE_TOOLS true)\nendif ()\nset(zeekdeps ${zeekdeps} paraglob)\n\n# Note: Broker gets some special attention in ZeekConfig.cmake.in.\nif (Broker_ROOT)\n    find_package(Broker REQUIRED CONFIG)\n    list(APPEND zeekdeps ${BROKER_LIBRARY})\n    set(broker_includes ${BROKER_INCLUDE_DIR})\n    set(ZEEK_HAS_EXTERNAL_BROKER ON)\n    set(ZEEK_HAS_STATIC_BROKER OFF)\nelse ()\n    if (ZEEK_SANITIZERS)\n        set(BROKER_SANITIZERS ${ZEEK_SANITIZERS})\n    endif ()\n\n    set(ENABLE_STATIC_ONLY_SAVED ${ENABLE_STATIC_ONLY})\n    if (MSVC)\n        set(BUILD_STATIC_BROKER true)\n    endif ()\n\n    if (BUILD_STATIC_BROKER)\n        set(ENABLE_STATIC_ONLY true)\n    endif ()\n\n    add_subdirectory(auxil/broker)\n    set(ENABLE_STATIC_ONLY ${ENABLE_STATIC_ONLY_SAVED})\n\n    if (BUILD_STATIC_BROKER)\n        list(APPEND zeekdeps broker_static)\n    else ()\n        list(APPEND zeekdeps broker)\n    endif ()\n\n    set(broker_includes ${CMAKE_CURRENT_SOURCE_DIR}/auxil/broker/libbroker\n                        ${CMAKE_CURRENT_BINARY_DIR}/auxil/broker/libbroker)\n\n    if (BUILD_STATIC_BROKER)\n        set(ZEEK_HAS_STATIC_BROKER ON)\n    else ()\n        set(ZEEK_HAS_STATIC_BROKER OFF)\n    endif ()\n    set(ZEEK_HAS_EXTERNAL_BROKER OFF)\n\n    # Tell plugins where to find the Broker CMake package in the source tree. This\n    # variable is picked up in ZeekPluginConfig.cmake.in.\n    set(ZEEK_PLUGIN_BROKER_PATH \"${CMAKE_CURRENT_BINARY_DIR}/auxil/broker\")\nendif ()\n\nif (NOT DISABLE_SPICY)\n    if (SPICY_ROOT_DIR)\n        find_package(Spicy REQUIRED) # will set HAVE_SPICY\n        spicy_require_version(\"1.8.0\")\n\n        if (NOT SPICY_HAVE_TOOLCHAIN)\n            message(FATAL_ERROR \"Spicy not built with toolchain support\")\n        endif ()\n\n        spicy_print_summary()\n    else ()\n        # Spicy needs the full prefix for Flex and Bison while Zeek captures\n        # only the paths to the executables. Derive the prefixes from the\n        # binary paths under the assumption that their bindir is under their\n        # prefix (which also implies that one such prefix even exists).\n        get_filename_component(dir ${FLEX_EXECUTABLE} DIRECTORY ABSOLUTE)\n        set(FLEX_ROOT ${dir}/..)\n\n        get_filename_component(dir ${BISON_EXECUTABLE} DIRECTORY ABSOLUTE)\n        set(BISON_ROOT ${dir}/..)\n\n        # The script generating precompiled headers for Spicy expects a\n        # different build system layout than provided for a bundled Spicy,\n        # disable it.\n        set(HILTI_DEV_PRECOMPILE_HEADERS OFF)\n\n        # Remove in v6.2. Older versions of Spicy use find_package(Python3),\n        # accommodate by setting the Python3_EXECUTABLE hint.\n        if (Python_EXECUTABLE)\n            set(Python3_EXECUTABLE ${Python_EXECUTABLE} CACHE STRING \"Python3_EXECUTABLE hint\")\n        endif ()\n\n        add_subdirectory(auxil/spicy)\n        include(ConfigureSpicyBuild) # set some options different for building Spicy\n\n        zeek_add_dependencies(spicy)\n\n        # Explicitly link against Spicy libraries if we are packaging. Since\n        # Zeek's binary packaging mode still leaves `BUILD_SHARED_LIBS` set we\n        # cannot use the branching inside `hilti_link_libraries_in_tree` and\n        # instead explicitly branch on `BINARY_PACKAGING_MODE` here.\n        if (BINARY_PACKAGING_MODE)\n            hilti_link_object_libraries_in_tree(zeek_exe PRIVATE)\n            spicy_link_object_libraries_in_tree(zeek_exe PRIVATE)\n        else ()\n            if (TARGET zeek_exe)\n                hilti_link_libraries_in_tree(zeek_exe PRIVATE)\n                spicy_link_libraries_in_tree(zeek_exe PRIVATE)\n            endif ()\n            if (TARGET zeek_lib)\n                hilti_link_libraries_in_tree(zeek_lib PRIVATE)\n                spicy_link_libraries_in_tree(zeek_lib PRIVATE)\n            endif ()\n        endif ()\n\n        set(HAVE_SPICY yes)\n    endif ()\n\n    set(USE_SPICY_ANALYZERS yes)\nelse ()\n    set(HAVE_SPICY no)\n    set(USE_SPICY_ANALYZERS no)\nendif ()\n\nset(USE_SPICY_ANALYZERS \"${USE_SPICY_ANALYZERS}\" CACHE BOOL \"Use built-in Spicy analyzers\")\ninclude(BuiltInSpicyAnalyzer)\n\ninclude_directories(BEFORE ${PCAP_INCLUDE_DIR} ${BIND_INCLUDE_DIR} ${BinPAC_INCLUDE_DIR}\n                    ${ZLIB_INCLUDE_DIR} ${JEMALLOC_INCLUDE_DIR})\n\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/auxil/filesystem/include/ghc\n        DESTINATION include/zeek/3rdparty/)\n\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/auxil/prometheus-cpp/core/include/prometheus\n        DESTINATION include/zeek/3rdparty/prometheus-cpp/include)\n\ninstall(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/auxil/prometheus-cpp/core/include/prometheus\n        DESTINATION include/zeek/3rdparty/prometheus-cpp/include)\n\n# Create 3rdparty/ghc within the build directory so that the include for\n# \"zeek/3rdparty/ghc/filesystem.hpp\" works within the build tree.\nexecute_process(COMMAND \"${CMAKE_COMMAND}\" -E make_directory\n                        \"${CMAKE_CURRENT_BINARY_DIR}/3rdparty/\")\nexecute_process(\n    COMMAND\n        \"${CMAKE_COMMAND}\" -E create_symlink\n        \"${CMAKE_CURRENT_SOURCE_DIR}/auxil/filesystem/include/ghc\"\n        \"${CMAKE_CURRENT_BINARY_DIR}/3rdparty/ghc\")\n\n# Optional Dependencies\n\nset(USE_GEOIP false)\nfind_package(LibMMDB)\nif (LIBMMDB_FOUND)\n    set(USE_GEOIP true)\n    include_directories(BEFORE ${LibMMDB_INCLUDE_DIR})\n    list(APPEND OPTLIBS ${LibMMDB_LIBRARY})\nendif ()\n\nset(USE_KRB5 false)\nif (${CMAKE_SYSTEM_NAME} MATCHES Linux)\n    find_package(LibKrb5)\n    if (LIBKRB5_FOUND)\n        set(USE_KRB5 true)\n        include_directories(BEFORE ${LibKrb5_INCLUDE_DIR})\n        list(APPEND OPTLIBS ${LibKrb5_LIBRARY})\n    endif ()\nendif ()\n\nset(HAVE_PERFTOOLS false)\nset(USE_PERFTOOLS_DEBUG false)\nset(USE_PERFTOOLS_TCMALLOC false)\n\nif (ENABLE_PERFTOOLS)\n    find_package(GooglePerftools)\n\n    if (GOOGLEPERFTOOLS_FOUND OR TCMALLOC_FOUND)\n        set(HAVE_PERFTOOLS true)\n        set(USE_PERFTOOLS_TCMALLOC true)\n\n        if (ENABLE_PERFTOOLS_DEBUG)\n            # Enable heap debugging with perftools.\n            set(USE_PERFTOOLS_DEBUG true)\n            include_directories(BEFORE ${GooglePerftools_INCLUDE_DIR})\n            list(APPEND OPTLIBS ${GooglePerftools_LIBRARIES_DEBUG})\n        else ()\n            # Link in tcmalloc.\n            list(APPEND OPTLIBS ${GooglePerftools_LIBRARIES})\n        endif ()\n    else ()\n        message(FATAL_ERROR \"Could not find requested Google Perftools.\")\n    endif ()\nendif ()\n\n# Making sure any non-standard OpenSSL includes get searched earlier than other\n# dependencies which tend to be in standard system locations and thus cause the\n# system OpenSSL headers to still be picked up even if one specifies\n# --with-openssl (which may be common).\ninclude_directories(BEFORE ${OPENSSL_INCLUDE_DIR})\n\n# Determine if libfts is external to libc, i.e. musl\nfind_package(FTS)\nif (FTS_FOUND)\n    list(APPEND OPTLIBS ${FTS_LIBRARY})\n    include_directories(BEFORE ${FTS_INCLUDE_DIR})\nendif ()\n\n# Any headers that are possibly bundled in the Zeek source-tree and that are\n# supposed to have priority over any preexisting/system-wide headers need to\n# appear early in compiler search path.\ninclude_directories(BEFORE ${broker_includes})\ninclude_directories(BEFORE ${CMAKE_CURRENT_SOURCE_DIR}/auxil/highwayhash)\ninclude_directories(BEFORE ${CMAKE_CURRENT_SOURCE_DIR}/auxil/paraglob/include)\ninclude_directories(BEFORE ${CMAKE_CURRENT_SOURCE_DIR}/auxil/rapidjson/include)\n\nset(zeekdeps\n    ${zeekdeps}\n    ${BinPAC_LIBRARY}\n    ${PCAP_LIBRARY}\n    ${OPENSSL_LIBRARIES}\n    ${BIND_LIBRARY}\n    ${ZLIB_LIBRARY}\n    ${JEMALLOC_LIBRARIES}\n    ${OPTLIBS})\n\n# ##############################################################################\n# System Introspection\n\ninclude(TestBigEndian)\ntest_big_endian(WORDS_BIGENDIAN)\ninclude(CheckSymbolExists)\ncheck_symbol_exists(htonll arpa/inet.h HAVE_BYTEORDER_64)\n\ninclude(OSSpecific)\ninclude(CheckTypes)\ninclude(CheckHeaders)\ninclude(CheckFunctions)\ninclude(MiscTests)\ninclude(PCAPTests)\ninclude(OpenSSLTests)\ninclude(CheckNameserCompat)\ninclude(GetArchitecture)\n\n# On platforms without a native libkqueue, c-ares is using the existing\n# value for HAVE_KQUEUE that was set during the libkqueue setup. We don't\n# pass the libkqueue information down to the c-ares cmake run so it won't\n# have the paths or library when it builds.\ninclude(FindCAres)\ninclude(FindKqueue)\n\ninclude(FindPrometheusCpp)\ninclude_directories(BEFORE \"auxil/out_ptr/include\")\n\nif ((OPENSSL_VERSION VERSION_EQUAL \"1.1.0\") OR (OPENSSL_VERSION VERSION_GREATER \"1.1.0\"))\n    set(ZEEK_HAVE_OPENSSL_1_1 true CACHE INTERNAL \"\" FORCE)\nendif ()\nif ((OPENSSL_VERSION VERSION_EQUAL \"3.0.0\") OR (OPENSSL_VERSION VERSION_GREATER \"3.0.0\"))\n    set(ZEEK_HAVE_OPENSSL_3_0 true CACHE INTERNAL \"\" FORCE)\nendif ()\n\n# Tell the plugin code that we're building as part of the main tree.\nset(ZEEK_PLUGIN_INTERNAL_BUILD true CACHE INTERNAL \"\" FORCE)\n\nset(ZEEK_HAVE_AF_PACKET no)\nif (${CMAKE_SYSTEM_NAME} MATCHES Linux)\n    if (NOT DISABLE_AF_PACKET)\n        if (NOT AF_PACKET_PLUGIN_PATH)\n            set(AF_PACKET_PLUGIN_PATH ${CMAKE_SOURCE_DIR}/auxil/zeek-af_packet-plugin)\n        endif ()\n\n        list(APPEND ZEEK_INCLUDE_PLUGINS ${AF_PACKET_PLUGIN_PATH})\n        set(ZEEK_HAVE_AF_PACKET yes)\n    endif ()\nendif ()\n\nset(ZEEK_HAVE_JAVASCRIPT no)\nif (NOT DISABLE_JAVASCRIPT)\n    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/auxil/zeekjs/cmake)\n    find_package(Nodejs)\n\n    if (NODEJS_FOUND)\n        if (${NODEJS_VERSION} VERSION_LESS \"16.13.0\")\n            message(\n                STATUS\n                    \"Node.js version ${NODEJS_VERSION} is too old, need 16.13 or later. Not enabling JavaScript support.\"\n            )\n        else ()\n            set(ZEEKJS_PLUGIN_PATH ${CMAKE_SOURCE_DIR}/auxil/zeekjs)\n            list(APPEND ZEEK_INCLUDE_PLUGINS ${ZEEKJS_PLUGIN_PATH})\n            set(ZEEK_HAVE_JAVASCRIPT yes)\n        endif ()\n    endif ()\nendif ()\n\nset(ZEEK_HAVE_JAVASCRIPT ${ZEEK_HAVE_JAVASCRIPT} CACHE INTERNAL \"Zeek has JavaScript support\")\n\nset(DEFAULT_ZEEKPATH_PATHS\n    . ${ZEEK_SCRIPT_INSTALL_PATH} ${ZEEK_SCRIPT_INSTALL_PATH}/policy\n    ${ZEEK_SCRIPT_INSTALL_PATH}/site ${ZEEK_SCRIPT_INSTALL_PATH}/builtin-plugins)\nif (MSVC)\n    list(JOIN DEFAULT_ZEEKPATH_PATHS \";\" DEFAULT_ZEEKPATH)\nelse ()\n    list(JOIN DEFAULT_ZEEKPATH_PATHS \":\" DEFAULT_ZEEKPATH)\nendif ()\n\nif (NOT BINARY_PACKAGING_MODE)\n    set(ZEEK_DIST ${PROJECT_SOURCE_DIR})\nendif ()\n\ninclude_directories(BEFORE ${CMAKE_CURRENT_BINARY_DIR})\nexecute_process(COMMAND \"${CMAKE_COMMAND}\" -E create_symlink \".\" \"${CMAKE_CURRENT_BINARY_DIR}/zeek\")\n\nif (BinPAC_ROOT_DIR)\n    set(ZEEK_CONFIG_BINPAC_ROOT_DIR ${BinPAC_ROOT_DIR})\nelse ()\n    set(ZEEK_CONFIG_BINPAC_ROOT_DIR ${ZEEK_ROOT_DIR})\nendif ()\n\nif (BROKER_ROOT_DIR)\n    set(ZEEK_CONFIG_BROKER_ROOT_DIR ${BROKER_ROOT_DIR})\nelse ()\n    set(ZEEK_CONFIG_BROKER_ROOT_DIR ${ZEEK_ROOT_DIR})\nendif ()\n\nif (PCAP_INCLUDE_DIR)\n    set(ZEEK_CONFIG_PCAP_INCLUDE_DIR ${PCAP_INCLUDE_DIR})\nendif ()\nif (ZLIB_INCLUDE_DIR)\n    set(ZEEK_CONFIG_ZLIB_INCLUDE_DIR ${ZLIB_INCLUDE_DIR})\nendif ()\nif (OPENSSL_INCLUDE_DIR)\n    set(ZEEK_CONFIG_OPENSSL_INCLUDE_DIR ${OPENSSL_INCLUDE_DIR})\nendif ()\nif (LibKrb5_INCLUDE_DIR)\n    set(ZEEK_CONFIG_LibKrb5_INCLUDE_DIR ${LibKrb5_INCLUDE_DIR})\nendif ()\nif (GooglePerftools_INCLUDE_DIR)\n    set(ZEEK_CONFIG_GooglePerftools_INCLUDE_DIR ${GooglePerftools_INCLUDE_DIR})\nendif ()\n\nset(ZEEK_CONFIG_BTEST_TOOLS_DIR ${ZEEK_ROOT_DIR}/share/btest)\ninstall(DIRECTORY DESTINATION ${ZEEK_CONFIG_BTEST_TOOLS_DIR})\n\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake_templates/zeek-config.in\n               ${CMAKE_CURRENT_BINARY_DIR}/zeek-config @ONLY)\ninstall(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/zeek-config DESTINATION bin)\n\ninstall(\n    DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/cmake\n    DESTINATION share/zeek\n    USE_SOURCE_PERMISSIONS\n    PATTERN \".git\" EXCLUDE)\n\nif (NOT MSVC)\n    # Install wrapper script for Bro-to-Zeek renaming.\n    include(InstallShellScript)\n    include(InstallSymlink)\nendif ()\n\n# ##############################################################################\n# zkg configuration\n\nif (INSTALL_ZKG)\n    # An etc/zkg directory for zkg's config file simplifies zkg's config file\n    # code.\n    set(ZEEK_ZKG_CONFIG_DIR \"${ZEEK_ETC_INSTALL_DIR}/zkg\")\n    set(ZEEK_ZKG_STATE_DIR \"${ZEEK_STATE_DIR}/zkg\")\n\n    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake_templates/zkg-config.in\n                   ${CMAKE_CURRENT_BINARY_DIR}/zkg-config @ONLY)\n\n    install(DIRECTORY DESTINATION var/lib/zkg)\n    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/zkg-config DESTINATION ${ZEEK_ZKG_CONFIG_DIR}\n            RENAME config)\nendif ()\n\n# ##############################################################################\n# Look for external plugins to build in\n\nstring(REPLACE \",\" \" \" _build_in_plugins \"${ZEEK_INCLUDE_PLUGINS}\")\nseparate_arguments(_build_in_plugins)\nforeach (plugin_dir ${_build_in_plugins})\n    if (NOT IS_ABSOLUTE \"${plugin_dir}/CMakeLists.txt\")\n        message(\n            FATAL_ERROR \"Plugins to build in need to be defined with absolute path! ${plugin_dir}\")\n    endif ()\n\n    if (NOT EXISTS \"${plugin_dir}/CMakeLists.txt\")\n        message(FATAL_ERROR \"No plugin found at ${plugin_dir}!\")\n    endif ()\n\n    get_filename_component(plugin_name ${plugin_dir} NAME)\n\n    # Create a list of plugin directories that will then be added in the\n    # src/CMakeLists.txt\n    list(APPEND BUILTIN_PLUGIN_LIST ${plugin_dir})\n\n    message(STATUS \"  Building in plugin: ${plugin_name} (${plugin_dir})\")\n\n    if (\"${ZEEK_BUILTIN_PLUGINS}\" STREQUAL \"\")\n        set(ZEEK_BUILTIN_PLUGINS ${plugin_name})\n    else ()\n        set(ZEEK_BUILTIN_PLUGINS \"${ZEEK_BUILTIN_PLUGINS}, ${plugin_name}\")\n    endif ()\nendforeach ()\n\n# ##############################################################################\n# Populate the ZEEK_BUILD_INFO for use in src/version.c.in\n\nif (WIN32)\n    # Windows installs Python to C:\\Python311\\python, but doesn't create a version\n    # or symlink to python3. Call python with the script directly since the\n    # shebang in the script won't work here.\n    execute_process(\n        COMMAND \"python\" \"${PROJECT_SOURCE_DIR}/ci/collect-repo-info.py\" \"${ZEEK_INCLUDE_PLUGINS}\"\n        WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}\"\n        OUTPUT_VARIABLE ZEEK_BUILD_INFO\n        RESULT_VARIABLE ZEEK_BUILD_INFO_RESULT\n        OUTPUT_STRIP_TRAILING_WHITESPACE)\nelse ()\n    execute_process(\n        COMMAND \"${PROJECT_SOURCE_DIR}/ci/collect-repo-info.py\" \"${ZEEK_INCLUDE_PLUGINS}\"\n        WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}\"\n        OUTPUT_VARIABLE ZEEK_BUILD_INFO\n        RESULT_VARIABLE ZEEK_BUILD_INFO_RESULT\n        OUTPUT_STRIP_TRAILING_WHITESPACE)\nendif ()\n\nif (NOT ZEEK_BUILD_INFO_RESULT EQUAL \"0\")\n    message(FATAL_ERROR \"Could not collect repository info\")\nendif ()\n\n# string(JSON ... ) requires CMake 3.19, but then we could do something like:\n# string(JSON ZEEK_BUILD_INFO SET \"${ZEEK_BUILD_INFO}\" compile_options cxx_flags\n# \"${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_${BuildType}}\")\n\n# ##############################################################################\n# Recurse on sub-directories\n\nadd_subdirectory(src)\nadd_subdirectory(scripts)\nadd_subdirectory(man)\nadd_subdirectory(testing)\n\nif (NOT DISABLE_SPICY)\n    zeek_add_dependencies(spicyz)\nendif ()\n\ninclude(CheckOptionalBuildSources)\n\ncheckoptionalbuildsources(auxil/btest BTest INSTALL_BTEST)\ncheckoptionalbuildsources(auxil/package-manager ZKG INSTALL_ZKG)\ncheckoptionalbuildsources(auxil/zeekctl ZeekControl INSTALL_ZEEKCTL)\ncheckoptionalbuildsources(auxil/zeek-aux Zeek-Aux INSTALL_AUX_TOOLS)\ncheckoptionalbuildsources(auxil/zeek-client ZeekClient INSTALL_ZEEK_CLIENT)\n\n# Generate Spicy helper scripts referenced in e.g., `zeek-path-dev.*`. These\n# set Spicy-side environment variables to run it out of the build directory.\nconfigure_file(${CMAKE_SOURCE_DIR}/cmake_templates/spicy-path.in ${CMAKE_BINARY_DIR}/spicy-path\n               @ONLY)\nconfigure_file(${CMAKE_SOURCE_DIR}/cmake_templates/hilti-cxx-include-dirs.in\n               ${CMAKE_BINARY_DIR}/hilti-cxx-include-dirs @ONLY)\n\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake_templates/zeek-version.h.in\n               ${CMAKE_CURRENT_BINARY_DIR}/zeek-version.h)\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/zeek-version.h DESTINATION include/zeek)\n\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake_templates/zeek-config.h.in\n               ${CMAKE_CURRENT_BINARY_DIR}/zeek-config.h)\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/zeek-config.h DESTINATION include/zeek)\n\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake_templates/zeek-config-paths.h.in\n               ${CMAKE_CURRENT_BINARY_DIR}/zeek-config-paths.h)\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/zeek-config-paths.h DESTINATION include/zeek)\n\n# ##############################################################################\n# Packaging Setup\n\nif (INSTALL_ZEEKCTL OR INSTALL_ZKG OR INSTALL_ZEEK_CLIENT)\n    # CPack RPM Generator may not automatically detect this\n    set(CPACK_RPM_PACKAGE_REQUIRES \"python >= ${ZEEK_PYTHON_MIN}\")\nendif ()\n\n# If this CMake project is a sub-project of another, we will not configure the\n# generic packaging because CPack will fail in the case that the parent project\n# has already configured packaging\nif (\"${PROJECT_SOURCE_DIR}\" STREQUAL \"${CMAKE_SOURCE_DIR}\")\n    include(ConfigurePackaging)\n    ConfigurePackaging(${ZEEK_VERSION_FULL})\nendif ()\n\n# Refers back to the \"distribution prefix\". This is the source tree when\n# referring to Zeek from the build directory and the \"share\" directory under the\n# install preifx otherwise.\nset(ZEEK_DIST_PREFIX $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}>\n                     $<INSTALL_INTERFACE:${CMAKE_INSTALL_DATAROOTDIR}/foo/bar>)\n\n# Generate extra config file for the dynamic plugins.\nconfigure_file(src/ZeekPluginConfig.cmake.in ZeekPluginConfig.cmake @ONLY)\n\n# Write the CMake package and version files.\nconfigure_package_config_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/src/ZeekConfig.cmake.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/ZeekConfig.cmake\" INSTALL_DESTINATION \"${ZEEK_CMAKE_CONFIG_DIR}\")\nwrite_basic_package_version_file(\"${CMAKE_CURRENT_BINARY_DIR}/ZeekConfigVersion.cmake\"\n                                 VERSION ${ZEEK_VERSION_NUMBER} COMPATIBILITY ExactVersion)\n\n# Write the CMake targets file.\nexport(EXPORT ZeekTargets FILE ZeekTargets.cmake NAMESPACE Zeek::)\n\n# Write the bootstrap file for dynamic plugins. Needed by ZeekPlugin.cmake.\nconfigure_file(src/ZeekPluginBootstrap.cmake.in ZeekPluginBootstrap.cmake @ONLY)\ninstall(FILES \"${CMAKE_CURRENT_BINARY_DIR}/ZeekPluginBootstrap.cmake\"\n        DESTINATION \"${ZEEK_CMAKE_CONFIG_DIR}\")\n\ninstall(FILES \"${CMAKE_CURRENT_BINARY_DIR}/ZeekConfig.cmake\"\n              \"${CMAKE_CURRENT_BINARY_DIR}/ZeekConfigVersion.cmake\"\n        DESTINATION \"${ZEEK_CMAKE_CONFIG_DIR}\")\n\ninstall(EXPORT ZeekTargets DESTINATION \"${ZEEK_CMAKE_CONFIG_DIR}\" NAMESPACE Zeek::)\n\n# ##############################################################################\n# Build Summary\n\nif (CMAKE_BUILD_TYPE)\n    string(TOUPPER ${CMAKE_BUILD_TYPE} BuildType)\nendif ()\n\nif (INSTALL_BTEST_PCAPS)\n    set(_install_btest_tools_msg \"all\")\nelse ()\n    set(_install_btest_tools_msg \"no pcaps\")\nendif ()\n\nset(_binpac_exe_path \"included\")\nif (BINPAC_EXE_PATH)\n    set(_binpac_exe_path ${BINPAC_EXE_PATH})\nendif ()\n\nset(_gen_zam_exe_path \"included\")\nif (GEN_ZAM_EXE_PATH)\n    set(_gen_zam_exe_path ${GEN_ZAM_EXE_PATH})\nendif ()\n\nset(_spicy \"included\")\nif (DISABLE_SPICY)\n    set(_spicy \"disabled\")\nelseif (SPICY_ROOT_DIR)\n    set(_spicy \"external (${SPICY_ROOT_DIR})\")\nendif ()\n\nif (ZEEK_LEGACY_ANALYZERS)\n    list(JOIN ZEEK_LEGACY_ANALYZERS \", \" _legacy_analyzers)\n    set(_legacy_analyzers\n        \"\\n          - Using unmaintained legacy analyzers for: ${_legacy_analyzers}\")\nendif ()\n\nif (ZEEK_SKIPPED_ANALYZERS)\n    list(JOIN ZEEK_SKIPPED_ANALYZERS \", \" _skipped_analyzers)\n    set(_skipped_analyzers \"\\n          - Skipping analyzers: ${_skipped_analyzers}\")\nendif ()\n\nif (ZEEK_LEGACY_ANALYZERS OR ZEEK_SKIPPED_ANALYZERS)\n    set(_analyzer_warning\n        \"\\n\\n[Warning] Some analyzers are not available due to lack of Spicy support:${_legacy_analyzers}${_skipped_analyzers}\"\n    )\nendif ()\n\nmessage(\n    \"\\n====================|  Zeek Build Summary  |====================\"\n    \"\\n\"\n    \"\\nBuild type:        ${CMAKE_BUILD_TYPE}\"\n    \"\\nBuild dir:         ${PROJECT_BINARY_DIR}\"\n    \"\\n\"\n    \"\\nInstall prefix:    ${CMAKE_INSTALL_PREFIX}\"\n    \"\\nConfig file dir:   ${ZEEK_ETC_INSTALL_DIR}\"\n    \"\\nLog dir:           ${ZEEK_LOG_DIR}\"\n    \"\\nPlugin dir:        ${ZEEK_PLUGIN_DIR}\"\n    \"\\nPython module dir: ${PY_MOD_INSTALL_DIR}\"\n    \"\\nScript dir:        ${ZEEK_SCRIPT_INSTALL_PATH}\"\n    \"\\nSpool dir:         ${ZEEK_SPOOL_DIR}\"\n    \"\\nState dir:         ${ZEEK_STATE_DIR}\"\n    \"\\nSpicy modules dir: ${ZEEK_SPICY_MODULE_PATH}\"\n    \"\\n\"\n    \"\\nDebug mode:        ${ENABLE_DEBUG}\"\n    \"\\nUnit tests:        ${ENABLE_ZEEK_UNIT_TESTS}\"\n    \"\\nBuiltin Plugins:   ${ZEEK_BUILTIN_PLUGINS}\"\n    \"\\n\"\n    \"\\nCC:                ${CMAKE_C_COMPILER}\"\n    \"\\nCFLAGS:            ${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_${BuildType}}\"\n    \"\\nCXX:               ${CMAKE_CXX_COMPILER}\"\n    \"\\nCXXFLAGS:          ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_${BuildType}}\"\n    \"\\nCPP:               ${CMAKE_CXX_COMPILER}\"\n    \"\\n\"\n    \"\\nAF_PACKET:         ${ZEEK_HAVE_AF_PACKET}\"\n    \"\\nAux. Tools:        ${INSTALL_AUX_TOOLS}\"\n    \"\\nBifCL:             ${_bifcl_exe_path}\"\n    \"\\nBinPAC:            ${_binpac_exe_path}\"\n    \"\\nBTest:             ${INSTALL_BTEST}\"\n    \"\\nBTest tooling:     ${_install_btest_tools_msg}\"\n    \"\\nGen-ZAM:           ${_gen_zam_exe_path}\"\n    \"\\nJavaScript:        ${ZEEK_HAVE_JAVASCRIPT}\"\n    \"\\nSpicy:             ${_spicy}\"\n    \"\\nSpicy analyzers:   ${USE_SPICY_ANALYZERS}\"\n    \"\\nzeek-client:       ${INSTALL_ZEEK_CLIENT}\"\n    \"\\nZeekControl:       ${INSTALL_ZEEKCTL}\"\n    \"\\nzkg:               ${INSTALL_ZKG}\"\n    \"\\n\"\n    \"\\nlibmaxminddb:      ${USE_GEOIP}\"\n    \"\\nKerberos:          ${USE_KRB5}\"\n    \"\\ngperftools found:  ${HAVE_PERFTOOLS}\"\n    \"\\n  - tcmalloc:      ${USE_PERFTOOLS_TCMALLOC}\"\n    \"\\n  - debugging:     ${USE_PERFTOOLS_DEBUG}\"\n    \"\\njemalloc:          ${ENABLE_JEMALLOC}\"\n    \"\\n\"\n    \"\\nCluster backends:\"\n    \"\\n  - Broker:        ON\"\n    \"\\n  - ZeroMQ:        ${ENABLE_CLUSTER_BACKEND_ZEROMQ}\"\n    \"\\n\"\n    \"\\nFuzz Targets:      ${ZEEK_ENABLE_FUZZERS}\"\n    \"\\nFuzz Engine:       ${ZEEK_FUZZING_ENGINE}\"\n    \"${_analyzer_warning}\"\n    \"\\n\"\n    \"\\n================================================================\\n\")\n\ninclude(UserChangedWarning)\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.794921875,
          "content": "Copyright (c) 1995-now, The Regents of the University of California\nthrough the Lawrence Berkeley National Laboratory and the\nInternational Computer Science Institute. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n(1) Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n\n(2) Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\n(3) Neither the name of the University of California, Lawrence Berkeley\n    National Laboratory, U.S. Dept. of Energy, International Computer\n    Science Institute, nor the names of contributors may be used to endorse\n    or promote products derived from this software without specific prior\n    written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\nNote that some files in the distribution may carry their own copyright\nnotices.\n"
        },
        {
          "name": "COPYING-3rdparty",
          "type": "blob",
          "size": 37.845703125,
          "content": "The Zeek project contains third party software which is under different license\nterms. This file collects these license terms.\n\nNote that this file may not contain the licenses of all third party software\ncontained in Zeek; please check the top of all files for additional license\nstatements.\n\nIf you note a missing license statement, please open a bug at\nhttps://github.com/zeek/zeek/issues\n\n%%% SQLite\n\n==============================================================================\n\nThe author disclaims copyright to this source code.  In place of\na legal notice, here is a blessing:\n\n   May you do good and not evil.\n   May you find forgiveness for yourself and forgive others.\n   May you share freely, never taking more than you give.\n\n==============================================================================\n\n%%% libkqueue - kqueue(2) compatibility library\n\n==============================================================================\n\n== all source ==\n\nCopyright (c) 2009 Mark Heily <mark@heily.com>\n\nPermission to use, copy, modify, and distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n== event.h ==\n\nCopyright (c) 1999,2000,2001 Jonathan Lemon <jlemon@FreeBSD.org>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n\n==============================================================================\n\n%%% RapidJSON - A fast JSON parser/generator for C++ with both SAX/DOM style API\n\n==============================================================================\n\nTencent is pleased to support the open source community by making RapidJSON available.\n\nCopyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip.  All rights reserved.\n\nIf you have downloaded a copy of the RapidJSON binary from Tencent, please note that the RapidJSON binary is licensed under the MIT License.\nIf you have downloaded a copy of the RapidJSON source code from Tencent, please note that RapidJSON source code is licensed under the MIT License, except for the third-party components listed below which are subject to different license terms.  Your integration of RapidJSON into your own projects may require compliance with the MIT License, as well as the other licenses applicable to the third-party components included within RapidJSON. To avoid the problematic JSON license in your own projects, it's sufficient to exclude the bin/jsonchecker/ directory, as it's the only code under the JSON license.\nA copy of the MIT License is included in this file.\n\nOther dependencies and licenses:\n\nOpen Source Software Licensed Under the BSD License:\n--------------------------------------------------------------------\n\nThe msinttypes r29\nCopyright (c) 2006-2013 Alexander Chemeris\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n* Neither the name of  copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nOpen Source Software Licensed Under the JSON License:\n--------------------------------------------------------------------\n\njson.org\nCopyright (c) 2002 JSON.org\nAll Rights Reserved.\n\nJSON_checker\nCopyright (c) 2002 JSON.org\nAll Rights Reserved.\n\n\nTerms of the JSON License:\n---------------------------------------------------\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nThe Software shall be used for Good, not Evil.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nTerms of the MIT License:\n--------------------------------------------------------------------\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n==============================================================================\n\n%%% C++ Actor Framework\n\n==============================================================================\n\nDistributed under the terms and conditions of the BSD 3-Clause License or\nat your option) under the terms and conditions of the Boost Software\nLicense 1.0. See accompanying files LICENSE and LICENSE_ALTERNATIVE.\n\nLICENSE:\n\nCopyright (c) 2011-2014, Dominik Charousset\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n    * Neither the name of the copyright holder nor the names of its\n      contributors may be used to endorse or promote products derived from\n      this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\nBUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\nOR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\nADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nLICENSE_ALTERNATIVE:\n\nBoost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\n==============================================================================\n\n%%% tsl-ordered-map\n\n==============================================================================\n\nCopyright (c) 2017 Tessil\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n==============================================================================\n\n%%% Multifast Project\n\n==============================================================================\n\nCopyright 2010-2015 Kamiar Kanani <kamiar.kanani@gmail.com>\n\nmultifast is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nmultifast is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with multifast.  If not, see <http://www.gnu.org/licenses/>.\n\nWITH EXPLICIT PERMISSION OF ITS AUTHOR, KAMIAR KANANI, THE MULTIFAST\nPROJECT (http://multifast.sourceforge.net/) CAN BE USED IN THE ZEEK\nPROJECT (https://github.com/zeek) UNDER BSD LICENCE.\n\n==============================================================================\n\n%%% 3rdparty/in_cksum.cc\n\n==============================================================================\n\nCopyright (c) 1988, 1992, 1993\nThe Regents of the University of California.  All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. Neither the name of the University nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n\n==============================================================================\n\n%%% 3rdparty/patricia.c\n\n==============================================================================\n\nDave Plonka <plonka@doit.wisc.edu>\n\nThis product includes software developed by the University of Michigan,\nMerit Network, Inc., and their contributors.\n\nFrom copyright.txt:\n\nCopyright (c) 1997, 1998, 1999\n\nThe Regents of the University of Michigan (\"The Regents\") and Merit Network,\nInc.  All rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n1.  Redistributions of source code must retain the above\n    copyright notice, this list of conditions and the\n    following disclaimer.\n2.  Redistributions in binary form must reproduce the above\n    copyright notice, this list of conditions and the\n    following disclaimer in the documentation and/or other\n    materials provided with the distribution.\n3.  All advertising materials mentioning features or use of\n    this software must display the following acknowledgement:\nThis product includes software developed by the University of Michigan, Merit\nNetwork, Inc., and their contributors.\n4.  Neither the name of the University, Merit Network, nor the\n    names of their contributors may be used to endorse or\n    promote products derived from this software without\n    specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n==============================================================================\n\n%%% 3rdparty/strsep.c\n\n==============================================================================\n\nCopyright (c) 1990, 1993\n The Regents of the University of California.  All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. All advertising materials mentioning features or use of this software\n   must display the following acknowledgement:\n This product includes software developed by the University of\n California, Berkeley and its contributors.\n4. Neither the name of the University nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n\n==============================================================================\n\n%%% 3rdparty/ConvertUTF.c\n\n==============================================================================\n\n                    The LLVM Compiler Infrastructure\n\nThis file is distributed under the University of Illinois Open Source\nLicense:\n\n   University of Illinois/NCSA\n   Open Source License\n\n   Copyright (c) 2003-2014 University of Illinois at Urbana-Champaign.\n   All rights reserved.\n\n   Developed by:\n\n       LLVM Team\n\n       University of Illinois at Urbana-Champaign\n\n       http://llvm.org\n\n   Permission is hereby granted, free of charge, to any person\n   obtaining a copy of this software and associated documentation\n   files (the \"Software\"), to deal with the Software without\n   restriction, including without limitation the rights to use,\n   copy, modify, merge, publish, distribute, sublicense, and/or\n   sell copies of the Software, and to permit persons to whom the\n   Software is furnished to do so, subject to the following\n   conditions:\n\n       * Redistributions of source code must retain the above\n         copyright notice, this list of conditions and the\n         following disclaimers.\n\n       * Redistributions in binary form must reproduce the\n         above copyright notice, this list of conditions and\n         the following disclaimers in the documentation and/or\n         other materials provided with the distribution.\n\n       * Neither the names of the LLVM Team, University of\n         Illinois at Urbana-Champaign, nor the names of its\n         contributors may be used to endorse or promote\n         products derived from this Software without specific\n         prior written permission.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n   NONINFRINGEMENT.  IN NO EVENT SHALL THE CONTRIBUTORS OR\n   COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n   USE OR OTHER DEALINGS WITH THE SOFTWARE.\n\nCopyright 2001-2004 Unicode, Inc.\n\nDisclaimer\n\nThis source code is provided as is by Unicode, Inc. No claims are\nmade as to fitness for any particular purpose. No warranties of any\nkind are expressed or implied. The recipient agrees to determine\napplicability of information provided. If this file has been\npurchased on magnetic or optical media from Unicode, Inc., the\nsole remedy for any claim will be exchange of defective media\nwithin 90 days of receipt.\n\nLimitations on Rights to Redistribute This Code\n\nUnicode, Inc. hereby grants the right to freely use the information\nsupplied in this file in the creation of products supporting the\nUnicode Standard, and to make copies of this file in any form\nfor internal or external distribution as long as this notice\nremains attached.\n\n==============================================================================\n\n%%% probabilistic/CardinalityCounter.cc\n\n==============================================================================\n\nThe following function is copied from libc/string/flsll.c from the FreeBSD source\ntree. Original copyright message follows\n\nCopyright (c) 1990, 1993\n     The Regents of the University of California.  All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. Neither the name of the University nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n\n==============================================================================\n\n%%% 3rdparty/bsd-getopt-long.c\n\n==============================================================================\n\nCopyright (c) 2002 Todd C. Miller <Todd.Miller@courtesan.com>\n\nPermission to use, copy, modify, and distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND TODD C. MILLER DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL TODD C. MILLER BE LIABLE\nFOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION\nOF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nCopyright (c) 2000 The NetBSD Foundation, Inc.\nAll rights reserved.\n\nThis code is derived from software contributed to The NetBSD Foundation\nby Dieter Baron and Thomas Klausner.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. All advertising materials mentioning features or use of this software\n   must display the following acknowledgement:\n       This product includes software developed by the NetBSD\n       Foundation, Inc. and its contributors.\n4. Neither the name of The NetBSD Foundation nor the names of its\n   contributors may be used to endorse or promote products derived\n   from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS\n``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\nTO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS\nBE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\n==============================================================================\n\n%%% auxil/filesystem\n\n==============================================================================\n\nCopyright (c) 2018, Steffen Schümann <s.schuemann@pobox.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n==============================================================================\n\n%%% auxil/highwayhash\n\n==============================================================================\n\nTaken from https://github.com/google/highwayhash with Apache 2 License:\n\nCopyright 2017 Google Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n==============================================================================\n\n%%% 3rdparty/bro_inet_ntop.c\n\n==============================================================================\n\nTaken/adapted from FreeBSD 9.0.0 inet_ntop.c (CVS revision 1.3.16.1.2.1)\n\nCopyright (c) 2004 by Internet Systems Consortium, Inc. (\"ISC\")\nCopyright (c) 1996-1999 by Internet Software Consortium.\n\nPermission to use, copy, modify, and distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND ISC DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT\nOF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n==============================================================================\n\n%%% 3rdparty/modp_numtoa.h\n\n==============================================================================\n\nCopyright &copy; 2007, Nick Galbreath -- nickg [at] modp [dot] com\nAll rights reserved.\nhttp://code.google.com/p/stringencoders/\nReleased under the bsd license.\n\n==============================================================================\n\n%%% pybind11\n\n==============================================================================\n\nCopyright (c) 2016 Wenzel Jakob <wenzel.jakob@epfl.ch>, All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nPlease also refer to the file CONTRIBUTING.md, which clarifies licensing of\nexternal contributions to this project including patches, pull requests, etc.\nbroker/bindings/python/3rdparty/pybind11/LICENSE (END)\n\n==============================================================================\n\n%%% broker/tests/benchmark/readerwriterqueue/benchmarks/ext/folly\n\n==============================================================================\n\nCopyright 2013 Facebook, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n==============================================================================\n\n%%% FindBISON.cmake\n\n==============================================================================\n\nCopyright 2009 Kitware, Inc.\nCopyright 2006 Tristan Carel\nModified 2010 by Jon Siwek, adding HEADER option\n\nDistributed under the OSI-approved BSD License (the \"License\"):\nCMake - Cross Platform Makefile Generator\nCopyright 2000-2009 Kitware, Inc., Insight Software Consortium\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n* Redistributions of source code must retain the above copyright\n  notice, this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright\n  notice, this list of conditions and the following disclaimer in the\n  documentation and/or other materials provided with the distribution.\n\n* Neither the names of Kitware, Inc., the Insight Software Consortium,\n  nor the names of their contributors may be used to endorse or promote\n  products derived from this software without specific prior written\n  permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nThis software is distributed WITHOUT ANY WARRANTY; without even the\nimplied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nSee the License for more information.\n\n==============================================================================\n\n%%% mozilla-ca-list.zeek\n\n==============================================================================\n\nThe original source file comes with this licensing statement:\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\n==============================================================================\n\n%%% src/3rdparty/doctest.h\n\n==============================================================================\n\nCopyright (c) 2016-2019 Viktor Kirilov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n==============================================================================\n\n%%% auxil/libunistd\n\n==============================================================================\n\nThe MIT License (MIT)\n\nCopyright (c) 2015 Robin Rowe\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 0.0146484375,
          "content": "doc/install.rst"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.8251953125,
          "content": "#\n# A simple static wrapper for a number of standard Makefile targets,\n# mostly just forwarding to build/Makefile. This is provided only for\n# convenience and supports only a subset of what CMake's Makefile\n# offers. For more, execute that one directly.\n#\n\nBUILD=build\nREPO=$$(cd $(CURDIR) && basename $$(git config --get remote.origin.url | sed 's/^[^:]*://g'))\nVERSION_FULL=$(REPO)-$$(cd $(CURDIR) && cat VERSION)\nGITDIR=$$(test -f .git && echo $$(cut -d\" \" -f2 .git) || echo .git)\nREALPATH=$$($$(realpath --relative-to=$(shell pwd) . >/dev/null 2>&1) && echo 'realpath' || echo 'grealpath')\n\nall: configured\n\t$(MAKE) -C $(BUILD) $@\n\ninstall: configured all\n\t$(MAKE) -C $(BUILD) $@\n\ninstall-aux: configured\n\t$(MAKE) -C $(BUILD) $@\n\nclean: configured docclean\n\t$(MAKE) -C $(BUILD) $@\n\ndoc:\n\t$(MAKE) -C doc $@\n\ndocclean:\n\t(cd doc && make clean)\n\nlivehtml:\n\t$(MAKE) -C doc $@\n\n# The COPYFILE_DISABLE flag used in the tar commands below is an undocumented feature\n# of the tar binary on macOS. It causes tar to avoid including any of the special files\n# that macOS litters around the repository directory, such as ._ resource files, none\n# of which should be included in the distribution packages.\ndist:\n\t@test -e ../$(VERSION_FULL) && rm -ri ../$(VERSION_FULL) || true\n\t@cp -R . ../$(VERSION_FULL)\n\t@for i in . $$(git submodule foreach -q --recursive $(REALPATH) --relative-to=$$(pwd) .); do ((cd ../$(VERSION_FULL)/$$i && test -f .git && cp -R $(GITDIR) .gitnew && rm -f .git && mv .gitnew .git && sed -i.bak -e 's#[[:space:]]*worktree[[:space:]]*=[[:space:]]*.*##g' .git/config) || true); done\n\t@for i in . $$(git submodule foreach -q --recursive $(REALPATH) --relative-to=$$(pwd) .); do (cd ../$(VERSION_FULL)/$$i && git reset -q --hard && git clean -ffdxq); done\n\t@(cd ../$(VERSION_FULL) && find . -name \\.git\\* | xargs rm -rf)\n\t@(cd ../$(VERSION_FULL) && find . -name \\.idea -type d | xargs rm -rf)\n\t@(cd ../$(VERSION_FULL) && find . -maxdepth 1 -name build\\* | xargs rm -rf)\n\t@python3 ./ci/collect-repo-info.py --only-git > ../$(VERSION_FULL)/repo-info.json\n\t@mv ../$(VERSION_FULL) .\n\t@COPYFILE_DISABLE=true tar -czf $(VERSION_FULL).tar.gz $(VERSION_FULL)\n\t@echo Package: $(VERSION_FULL).tar.gz\n\t@rm -rf $(VERSION_FULL)\n\ndistclean:\n\trm -rf $(BUILD)\n\t$(MAKE) -C testing $@\n\ntest:\n\t-@( cd testing && make )\n\ntest-aux:\n\t-test -d auxil/zeekctl && ( cd auxil/zeekctl && make test-all )\n\t-test -d auxil/btest  && ( cd auxil/btest && make test )\n\t-test -d auxil/zeek-aux && ( cd auxil/zeek-aux && make test )\n\t-test -d auxil/plugins && ( cd auxil/plugins && make test-all )\n\ntest-all: test test-aux\n\nconfigured:\n\t@test -d $(BUILD) || ( echo \"Error: No build/ directory found. Did you run configure?\" && exit 1 )\n\t@test -e $(BUILD)/Makefile || ( echo \"Error: No build/Makefile found. Did you run configure?\" && exit 1 )\n\n.PHONY : all install clean doc docclean dist distclean configured livehtml\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 275.7021484375,
          "content": "\nThis document summarizes the most important changes in the current Zeek\nrelease. For an exhaustive list of changes, see the ``CHANGES`` file\n(note that submodules, such as Broker, come with their own ``CHANGES``.)\n\nZeek 7.2.0\n==========\n\nBreaking Changes\n----------------\n\nNew Functionality\n-----------------\n\nChanged Functionality\n---------------------\n\n- Command line options processing will no longer print usage whenever there\n  is an error. Instead, issues in command line processing will print an error,\n  then prompt to use --help. The --help usage will now print to standard output\n  rather than standard error.\n\nRemoved Functionality\n------------------------\n\nDeprecated Functionality\n------------------------\n\nZeek 7.1.0\n==========\n\nWe would like to thank Aashish Sharma (@initconf), Andras Gemes (@gemesa),\nAnthony Kasza (@anthonykasza), Benjamin Grap (@blightzero), Chiragdeshlehra27,\n@cooper-grill, Craig Leres (@leres), Eldon Koyle (@ekoyle), Emmanuele Zambon\n(@zambo99), Fox-IT Data Science (@fox-ds), Fupeng Zhao (@AmazingPP), Jan\nGrashöfer (@J-Gras), Jordan Barnartt (@JordanBarnartt), Jürgen Löhel (@jloehel),\nJustin Azoff (@JustinAzoff), Lucas (@Lucasmeteenc), Martin van Hensbergen\n(@martinvanhensbergen), Matti Bispham (@mbispham), Matteo (@skorpion98), Mike\nDopheide (@dopheide-esnet), Mike Peters (@MP-Corelight), Mohan Dhawan\n(@Mohan-Dhawan), Pierre (@p-l-), @robinkou, Rodrigo Rojo (@r-rojo), @scyllaever,\nSeth Hall (@sethhall), Simeon Miteff (@simeonmiteff), @Sonderino, @superzerosec,\nSven (@svenvanhal), Theo Buehler (@botovq), @timo-mue, @Zopazz, and\n@zrobinette12 for their contributions to this release.\n\nBreaking Changes\n----------------\n\n- The ``OpaqueVal::DoSerialize`` and ``OpaqueVal::DoUnserialize`` methods were\n  marked as deprecated in v7.0 and have now been removed as per the Zeek\n  deprecation policy. Plugins that were overriding these methods and were not\n  updated will fail to compile. Those plugins should be updated to override the\n  new ``OpaqueVal::DoSerializeData`` and ``OpaqueVal::DoUnserializeData``\n  methods.\n\n- Certain internal methods on the broker and logging classes have been changed to\n  accept std::vector<threading::Value> parameters instead of threading::Value**\n  to leverage automatic memory management, reduce the number of allocations\n  and use move semantics to express ownership.\n\n  The DoWrite() and HookLogWrite() methods which can be provided by plugins\n  are not affected by this change, so we keep backwards compatibility with\n  existing log writers.\n\n- ``Func::Name()`` was deprecated, use ``Func::GetName()`` instead.\n\nNew Functionality\n-----------------\n\n- The following dependencies have had updates:\n\n  - The bundled version of Spicy was updated to 1.12.0. See\n    https://github.com/zeek/spicy/releases/tag/v1.12.0 for notes on what's new\n    with Spicy.\n\n  - The bundled version of c-ares has been updated to v1.34.2, which required\n    some updates to Zeek's internal DNS resolver due to changes in the c-ares\n    API. At least version v1.28.0 is now required to build Zeek.\n\n  - Python 3.9 is now required for Zeek and all of it's associated subprojects.\n\n- IP-based connections that were previously not logged due to using an unknown\n  IP protocol (e.g. not TCP, UDP, or ICMP) now appear in conn.log. All conn.log\n  entries have a new ``ip_proto`` column that indicates the numeric IP protocol\n  identifier used by the connection. A new policy script at\n  ``policy/protocols/conn/ip-proto-name-logging.zeek`` can be loaded to also add\n  an ``ip_proto_name`` column with a string version of the ``ip_proto`` value.\n  This entire feature can be disabled by loading the new\n  ``policy/protocols/conn/disable-unknown-ip-proto-support.zeek`` policy script.\n\n- New ``Cluster::publish()``, ``Cluster::subscribe()`` and ``Cluster::unsubscribe()``\n  functions have been added. In contrast to their ``Broker`` counterparts, these\n  will operator on whichever cluster backend is enabled. Going forward, in-tree\n  ``Broker::publish()`` usages will be replaced with ``Cluster::publish()`` and\n  script writers should opt to prefer these over the Broker-specific functions.\n\n- Zeek now includes a PostgreSQL protocol analyzer. This analyzer is enabled\n  by default. The analyzer's events and its ``postgresql.log`` should be\n  considered preliminary and experimental until the arrival of Zeek's next\n  long-term-stable release (8.0).\n\n  If you observe unusually high CPU consumption or other issues due to this\n  analyzer being enabled by default, the easiest way to disable it is via the\n  ``Analyzer::disabled_analyzers`` const as follows:\n\n\tredef Analyzer::disabled_analyzers += {\n\t\tAnalyzer::ANALYZER_POSTGRESQL,\n\t};\n\n  If you observe PostgreSQL traffic in your environment, please provide feedback\n  about the analyzer and structure of the new log.\n\n- Broker's message I/O buffering now operates on per-peering granularity at the\n  sender (it was previously global) and provides configurable overflow handling\n  when a fast sender overwhelms a slow receiver, via the following new tunables\n  in the ``Broker`` module:\n\n\tconst peer_buffer_size = 2048 &redef;\n\tconst peer_overflow_policy = \"disconnect\" &redef;\n\tconst web_socket_buffer_size = 512 &redef;\n\tconst web_socket_overflow_policy = \"disconnect\" &redef;\n\n  When a send buffer overflows (i.e., it is full when a node tries to transmit\n  another message), the sender may drop the message and unpeer the slow receiver\n  (policy ``disconnect``, the default), drop the newest message in the buffer\n  (``drop_newest``), or drop the oldest (``drop_oldest``). Buffer sizes are\n  measured in number of messages, not bytes. Note that \"sender\" and \"receiver\"\n  are independent of the direction in which Zeek established the peering. After\n  disconnects Zeek automatically tries to re-establish peering with the slow\n  node, in case it recovers.\n\n  Zeek notifies you in two ways of such disconnects:\n\n    * A cluster.log entry for the sending node indicates that a slow peered node\n      has been removed. Here node ``worker01`` has removed a peered ``proxy01`:\n\n\t1733468802.626622  worker01  removed due to backpressure overflow: 127.0.0.1:42204/tcp (proxy01)\n\n    * The labeled counter metric ``zeek_broker_backpressure_disconnects_total``\n      in the telemetry framework tracks the number of times such disconnects\n      happen between respective nodes. The following scraped telemetry indicates\n      the same disconnect as above:\n\n\tzeek_broker_backpressure_disconnects_total{endpoint=\"worker01\",peer=\"proxy01\"} 1\n\n  To implement custom handling of a backpressure-induced disconnect, add a\n  ``Broker::peer_removed`` event handler, as follows:\n\n\tevent Broker::peer_removed(endpoint: Broker::EndpointInfo, msg: string)\n\t\t{\n\t\tif ( \"caf::sec::backpressure_overflow\" !in msg )\n\t\t\treturn;\n\n\t\t# The local node has disconnected the given endpoint,\n\t\t# add your logic here.\n                }\n\n  These new policies fix a problem in which misbehaving nodes could trigger\n  cascading \"lockups\" of nodes, each ceasing to transmit any messages.\n\n- The LDAP analyzer now supports handling of non-sealed GSS-API WRAP tokens.\n\n- StartTLS support was added to the LDAP analyzer. The SSL analyzer is enabled\n  for connections where client and server negotiate to TLS through the extended\n  request/response mechanism.\n\n- The ``unknown_protocols()`` event now includes the name of all packet\n  analyzer used for processing the packet when the event is raised. The\n  ``unknown_protocol.log`` file was extended to include this information.\n\n- The MySQL analyzer now generates a ``mysql_user_change()`` event when the user\n  changes mid-session via the ``COM_USER_CHANGE`` command.\n\n- The DNS analyzer was extended to support TKEY RRs (RFC 2390). A corresponding\n  ``dns_TKEY`` event was added.\n\n- The ``signature_match()`` and custom signature events now receive the end of\n  match offset within the ``data`` parameter as an optional parameter named\n  ``end_of_match``.\n\n\tevent signature_match(state: signature_state, msg: string, data: string, end_of_match: count);\n\n- A new plugin hook ``InitPreExecution()`` has been added to allow introspection\n  of Zeek's AST after ZAM optimizations ran. This hook executes right before\n  the ``zeek_init()`` event is enqueued.\n\n- The SQLite logger now supports setting the value of the SQLite synchronous mode,\n  as well as of the journal mode. For example, WAL mode can be enabled by setting:\n\n  redef LogSQLite::journal_mode=LogSQLite::SQLITE_JOURNAL_MODE_WAL;\n\n- A pseudo protocol analyzer StreamEvent has been added. Attaching this analyzer\n  to TCP connections allows processing the connection's stream data in the\n  scripting layer. One example use-case is interactive terminal sessions over\n  HTTP connections upgraded to TCP.\n\n\tredef HTTP::upgrade_analyzers += {\n\t\t[\"tcp\"] = Analyzer::ANALYZER_STREAM_EVENT,\n\t};\n\n\tevent stream_deliver(c: connection, is_orig: bool, data: string);\n\n  This comes with performance caveats: For use-cases with high-data rates\n  a native protocol analyzer with dedicated events will be far more efficient.\n\n- Experimental support for pluggable cluster backends has been added. New plugin\n  components have been introduced to support switching Zeek's Broker-based\n  publish-subscribe and remote logging functionality to alternative implementations.\n\n\tredef Cluster::backend = Cluster::CLUSTER_BACKEND_ZEROMQ;\n\n  Besides the backend, the serialization format used for events and log-writes\n  has become pluggable as well.\n\n- The Zeek distribution now includes an experimental ZeroMQ based cluster backend.\n  To experiment with it, load the following script on each cluster node.\n\n\t@load frameworks/cluster/backend/zeromq/connect\n\n  Note that Broker-dependent scripts or integrations will become non-functional\n  when doing so as Zeek nodes will not listen on Broker ports anymore, nor will\n  they establish a peering to other nodes.\n\n- Zeek now ships with an experimental Spicy-based SSL analyzer, which is\n  disabled by default. This analyzer can be enabled using the\n  ``--enable-spicy-ssl`` conifgure-time option. The Spicy-based analyzer has\n  full support for SSL and TLS, just like the current binpac analyzer. It does,\n  however, not support any version of DTLS. Enabling it will disable DTLS\n  parsing in Zeek.\n\n  The analyzer is currently mostly interesting if you want to experiment with\n  SSL; we do not yet recommend to enable it in normal Zeek deployments.\n\n- The majority of the metrics reported via stats.log are also now reported via\n  the Telemetry framework, and are visible in the output passed to Prometheus.\n\n- A new weird ``DNS_unknown_opcode`` was added to the DNS analyzer to report\n  when it receives opcodes that it cannot process.\n\nChanged Functionality\n---------------------\n\n- Heuristics for parsing SASL encrypted and signed LDAP traffic have been\n  made more strict and predictable. Please provide input if this results in\n  less visibility in your environment.\n\n- The MySQL analyzer has been improved to better support plugin authentication\n  mechanisms, like caching_sha2_password, as well as recognizing MySQL query\n  attributes.\n\n- The ``mysql.log`` for user change commands will contain *just* the username\n  instead of the remaining parts of the command, including auth plugin data.\n\n- The POP3 parser has been hardened to avoid unbounded state growth in the\n  face of one-sided traffic capture or when enabled for non-POP3 traffic.\n  Concretely, the Redis protocol's AUTH mechanism enables the POP3 analyzer\n  for such connections through DPD.\n\n- Batching and flushing for local log writers can now be controlled via the\n  options ``Log::flush_interval`` and ``Log::write_buffer_size``. Previously\n  the ``Threading::heartbeat_interval`` was used for flushing and the buffer\n  size fixed at 1000.\n\n- Logging of the FTP PASS command in ``ftp.log`` now honors ``FTP::default_capture_password``\n  and the password is blanked with \"<hidden>\". Previously, the argument for the PASS\n  command would be logged in clear.\n\n- The ASCII input reader now suppresses warnings for consecutive invalid lines,\n  producing a summary of total suppressions once a valid line is encountered.\n\n- The `Telemetry::sync()` hook is now invoked on demand. Either when the metrics\n  of a node are scraped via the Prometheus HTTP endpoint, or one of the collect\n  methods is invoked from Zeek script.\n\n- The community-id-logging.zeek policy script was used to set ``c$conn$community_id``\n  during ``new_connection()`` rather than ``connection_state_remove()``, allowing\n  other scripts to reuse its value early.\n\n- Calling ``Broker::publish()`` now uses the event time of the currently\n  executing event as network time metadata attached to the remote event.\n  Previously, ``network_time()`` was used. This matters if ``Broker::publish()``\n  is called within scheduled events or called within remote events.\n\n- The SSL analyzer now reports the correct version when an SSLv2 client hello is\n  used. Zeek previously always reported these as v2, even when the v2 client\n  hello indicated support for a later version of SSL.\n\nDeprecated Functionality\n------------------------\n\n- The ``Broker::auto_publish()`` function has been deprecated and should\n  be replaced with explicit ``Broker::publish()`` invocations that are\n  potentially guarded with appropriate ``@if`` or ``@ifdef`` directives.\n\n- The misspelled ``complte_flag`` in the ``dns_binds_rr`` record has been deprecated.\n  The new ``complete_flag`` uses type ``count`` instead of ``string``.\n\nZeek 7.0.0\n==========\n\nBreaking Changes\n----------------\n\n- The Telemetry framework has had a major rework, and includes a number of\n  breaking changes. The biggest change is a move towards a Prometheus-first\n  model. This removes the internal aggregation of metrics from nodes onto the\n  manager node, replacing it with a Prometheus service discovery endpoint. The\n  usage of this endpoint is described in the updated documentation for the\n  Telemetry framework. Using this endpoint also requires adding a new\n  ``metrics_port`` field to each node in the cluster configuration, denoting\n  what port to connect to for each node.\n\n  All of the metrics-related script-level options, type, and methods have been\n  moved to the Telemetry framework:\n    * Option ``Broker::metrics_port` is now ``Telemetry::metrics_port``\n    * Option ``Broker::metrics_export_endpoint_name`` is now ``Telemetry::metrics_endpoint_name``\n\n  The following options have been removed:\n    * ``Broker::metrics_export_interval``\n    * ``Broker::metrics_export_topic``\n    * ``Broker::metrics_import_topics``\n    * ``Broker::metrics_export_prefixes``\n\n  The ``unit`` field has been removed from the telemetry log.\n\n  All of the ``BROKER_METRICS_*`` environment variables have been removed. Use\n  the equivalent script-level variables for setting configuration settings. For\n  cluster settings, a new ``metrics_port`` option was added to the ``node.cfg``\n  options and can be used to set the port number. The cluster layout record\n  defined in ``cluster-layout.zeek`` has the same option, and it can be\n  automatically populated by ``zeekctl`` during the ``install`` or ``deploy``\n  commands.\n\n  The instruments that previously supported ``count`` in scripts and ``int64_t``\n  in C++ were removed in favor of only providing ``double`` versions. Prometheus\n  only handles ``double`` underneath the Zeek code, so it makes sense to only\n  support it directly in Zeek as well. This also simplifies the code\n  significantly.\n\n  The ``is_sum`` argument has been removed from the constructors/creation\n  methods for all of the instruments. This again follows how Prometheus works,\n  where ``counter`` instruments are always considered sums and ``gauge``\n  instruments are not. ``Histogram`` instruments don't have the concept of\n  summing.\n\n- Zeekctl now sets `FileExtract::prefix` to `spool/extract_files/<node>` to avoid\n  deletion of extracted files when stopping worker nodes. To revert to the\n  previous behavior, set `FileExtractDir` to an empty string in `zeekctl.cfg`.\n\n  If you never enabled Zeek's file extraction functionality, there's no impact.\n\nNew Functionality\n-----------------\n\n- Support ``delete`` on tables, sets and vectors to clear their contents.\n\n\tglobal v = vector(1, 2, 3);\n\tdelete v;\n\tassert |v| == 0;\n\n- A new helper function ``can_load()`` backed by a new bif ``find_in_zeekpath()``\n  was added to determine if a non-relative ``@load`` directive might work. This\n  can be used to guard ``@load`` directives when script packages may or may not\n  be installed.\n\n\t@if ( can_load(\"my-package\") )\n\t@load my-package\n\t@endif\n\n- Zeek packagers can now include a \"local\" addition into Zeek's version string.\n  Configure your Zeek build with ``--localversion=XXX`` to add the provided\n  string, dash-separated, at the end of Zeek's regular version string. The build\n  setup will refuse strings that contain dashes, to avoid confusing the version\n  components.  For debug builds, the ``-debug`` suffix remains at the end. For\n  example, the version string on a debug-enabled build with local addition \"XXX\"\n  might be \"7.0.0-dev.114-XXX-debug\". For Docker builds, the ``LOCALVERSION``\n  environment variable configures the addition.\n\n- SMB2 packets containing multiple PDUs now correctly parse all of the headers,\n  instead of just the first one and ignoring the rest. This may cause increased\n  CPU load on SMB2-heavy networks.\n\n- The new built-in function ``lookup_connection_analyzer_id()`` retrieves the\n  numeric identifier of an analyzer associated with a connection. This enables\n  the use of the ``disable_analyzer()`` BiF outside of the analyzer\n  confirmation/violation events that have so far been the only providers of\n  those identifiers. For example, this allows the suppression of an analyzer\n  from the outset for specific connections:\n\n\tevent connection_established(c: connection):\n\t\t{\n\t\tif ( no_http_for_this_conn_wanted(c) )\n\t\t\t{\n\t\t\tlocal aid = lookup_connection_analyzer_id(c$id, Analyzer::ANALYZER_HTTP);\n\t\t\tif ( aid > 0 )\n\t\t\t\tdisable_analyzer(c$id, aid, T, T);\n\t\t\t}\n\t\t}\n\n  Use ``Analyzer::get_tag()`` if you need to obtain an analyzer's tag from its\n  name (such as \"HTTP\").\n\n- The ``from_json()`` function now supports ingesting JSON representations of\n  tables as produced by the ``to_json()`` function. It now also supports reading\n  the object-based representation of ports that ``to_json()`` generates for that\n  Zeek type.\n\n- The ``analyzer.log`` now optionally supports logging of disabled analyzers\n  through the new option ``Analyzer::logging::include_disabling``.\n\nChanged Functionality\n---------------------\n\n- The ``ftp.log`` fuid field is now cleared after handling a command with a fuid\n  associated with it. Previously, fuid was sticky and any subsequent FTP command\n  would reproduce the same fuid, even if the command itself did not result in\n  a file transfer over a data connection (e.g., CWD, DEL, PASV, SIZE).\n\n- The type_name field populated by ``global_ids()`` now aligns with the value\n  returned by ``type_name()`` for each identifier. E.g, ``Site::local_nets``\n  has a type_name of ``set[subnet]`` rather than ``table``.\n\n- The ISO 9660 file signature has been moved into the policy directory. The\n  signature has previously been non-functional due to implicit anchoring. Further,\n  this signature requires users to significantly increase their\n  ``default_file_bof_buffer_size``. Users can now enable this signature by loading\n  ``frameworks/signatures/iso-9660`` which also increases the BOF buffer sufficiently.\n  Note, doing so may increase memory and CPU usage significantly.\n\n- The ``val_footprint()`` BiF now factors in the size of strings when reporting\n  footprints, roughly equating a string's size with the number of elements\n  comparable to that length. As before, footprints are not meant to be precise\n  but mainly for providing comparisons, which is why this is not a breaking\n  change.\n\n- The tuning/defaults policy has been deprecated and will be removed in\n  v7.1. This policy was already being loaded by default via local.zeek. The\n  settings contained within have become the overall defaults for Zeek now,\n  instead of having to load the policy. The two changes here are that fragments\n  now timeout after 5 minutes by default instead of no timeout, and extracted\n  files now have a default size limit of 100MB instead of unlimited.\n\n- If a Spicy protocol analyzers feeds data into file analysis, it now\n  needs to call Zeek's `Files::register_protocol()` and provide a\n  callback for computing file handles. If that's missing, Zeek will\n  issue a warning. While this was not necessary in previous versions,\n  it aligns with the same requirement for traditional analyzers and\n  enables customizing file handles for protocol-specific semantics.\n\n- The Supervisor's API now returns NodeConfig records with a cluster table whose\n  ClusterEndpoints have a port value of 0/unknown, rather than 0/tcp, to\n  indicate that the node in question has no listening port.\n\nRemoved Functionality\n---------------------\n\nDeprecated Functionality\n------------------------\n\n- The ``--disable-archiver`` configure flag no longer does anything and will be\n  removed in 7.1. zeek-archiver has moved into the zeek-aux repository.\n\n- The policy/frameworks/telemetry/prometheus.zeek script has been deprecated\n  and will be removed with Zeek 7.1. Setting the ``metrics_port`` field on a\n  ``Cluster::Node`` implies listening on that port and exposing telemetry\n  in Prometheus format.\n\nZeek 6.2.0\n==========\n\nWe would like to thank Anthony Verez (netantho), Bijoy Das (mute019), Jan\nGrashöfer (J-Gras), Matti Bispham (mbispham), Phil Rzewski (philrz), and\nxb-anssi for their contributions to this release.\n\nBreaking Changes\n----------------\n\n- The methods ``Dispatcher::Lookup()`` and ``Analyzer::Lookup()`` in the packet_analysis\n  namespace were changed to return a reference to a std::shared_ptr instead of a copy\n  for performance reasons.\n\n- Zeek's ``OPENSSL_INCLUDE_DIR`` is not automatically added to an external plugin's\n  include path anymore. A plugin using OpenSSL functionality directly can use the\n  following explicit entry to re-use Zeek's ``OPENSSL_INCLUDE_DIR``:\n\n\tzeek_add_plugin(\n\t\tNamespace Name\n\t\tINCLUDE_DIRS \"${OPENSSL_INCLUDE_DIR}\"\n\t\tSOURCES ...\n\t)\n\n- The \"segment_profiling\" functionality and ``load_sample`` event have been removed\n  without deprecation. This functionality was unmaintained and not known to be used.\n\n- Certain ``ldap.log`` and ``ldap_search.log`` fields have been renamed from\n  plural to singular and their types changed to scalars. This maps better onto\n  the expected request-response protocol used between client and server. Additionally,\n  it removes the burden of working with non-scalar columns from downstream systems.\n\n  Specifically, for ``ldap.log``:\n    * ``arguments: vector of string`` is now ``argument: string``\n    * ``diagnostic_messages: vector of string`` is now ``diagnostic_message: string``\n    * ``objects: vector of string`` is now ``object: string``\n    * ``opcodes: set[string]`` is now ``opcode: string``\n    * ``results: set[string]`` is now ``result: string``\n\n  For ``ldap_search.log``, the following fields were changed:\n    * ``base_objects: vector of string`` is now ``base_object: string``\n    * ``derefs: set[string]`` is now ``deref_aliases: string``\n    * ``diagnostic_messages: vector of string`` is now ``diagnostic_message: string``\n    * ``results: set[string]`` is now ``result: string``\n    * ``scopes: set[string]`` is now ``scope: string``\n\n  In the unlikely scenario that a request-response pair with the same message\n  identifier is observed, containing different values for certain fields, new\n  weirds are raised and will appear in ``weird.log``, including the old and new\n  values as well as the LDAP message identifier. The value within the LDAP logs\n  will be the most recently observed one.\n\n- BIF methods now return a ``ValPtr`` directly instead of a ``BifReturnVal`` object\n  which was just a thin wrapper around ``ValPtr``. This may cause compilation errors\n  in C++ code that was calling BIF methods directly.\n\nNew Functionality\n-----------------\n\n- The table type was extended to allow parallel regular expression matching\n  when a table's index is a pattern. Indexing such tables yields a vector\n  containing all values of matching patterns for keys of type string.\n\n  As an example, the following snippet outputs ``[a, a or b], [a or b]``.\n\n\tglobal tbl: table[pattern] of string;\n\ttbl[/a/] = \"a\";\n\ttbl[/a|b/] = \"a or b\";\n\ttbl[/c/] = \"c\";\n\tprint tbl[\"a\"], tbl[\"b\"];\n\n  Depending on the patterns and input used for matching, memory growth may\n  be observed over time as the underlying DFA is constructed lazily. Users are\n  advised to test with realistic and adversarial input data with focus on\n  memory growth. The DFA's state can be reset by removal/addition of a single\n  pattern. For observability, a new bif ``table_pattern_matcher_stats()``\n  can be used to gather ``MatcherStats``.\n\n- Support for delaying log writes.\n\n  The logging framework offers two new functions ``Log::delay()`` and ``Log::delay_finish()``\n  to delay a ``Log::write()`` operation. This new functionality allows delaying of\n  a specific log record within the logging pipeline for a variable but bounded\n  amount of time. This can be used, for example, to query and wait for additional\n  information to attach to the pending record, or even change its final verdict.\n\n  Conceptually, delaying a log record happens after the execution of the global\n  ``Log::log_stream_policy`` hook for a given ``Log::write()`` and before the\n  execution of filter policy hooks. Any mutation of the log record within the\n  delay period will be visible to filter policy hooks. Calling ``Log::delay()``\n  is currently only allowed within the context of the ``Log::log_stream_policy`` hook\n  for the active ``Log::write()` operation (or during the execution of post delay callbacks).\n  While this may appear restrictive, it makes it explicit which ``Log::write()``\n  operation is subject to the delay.\n\n  Interactions, semantics and conflicts of this feature when writing the same\n  log record multiple times to the same or different log streams need to be taken\n  into consideration by script writers.\n\n  Given this is the first iteration of this feature, feedback around usability and\n  use-cases that aren't covered are more than welcome.\n\n- A WebSocket analyzer has been added together with a new ``websocket.log``.\n\n  The WebSocket analyzer is instantiated when a WebSocket handshake over HTTP is\n  recognized. By default, the payload of WebSocket messages is fed into Zeek's dynamic\n  protocol detection framework, possibly discovering and analyzing tunneled protocols.\n\n  The format of the log and the event semantics should be considered preliminary until\n  the arrival of the next long-term-stable release (7.0).\n\n  To disable the analyzer in case of fatal errors or unexpected resource usage,\n  use the ``Analyzer::disabled_analyzers`` pattern:\n\n\tredef Analyzer::disabled_analyzers += {\n\t\tAnalyzer::ANALYZER_WEBSOCKET,\n\t};\n\n- The SMTP analyzer was extended to recognize and properly handle the BDAT command\n  from RFC 3030. This improves visibility into the SMTP protocol when mail agents\n  and servers support and use this extension.\n\n- The event keyword in signatures was extended to support choosing a custom event\n  to raise instead of ``signature_match()``. This can be more efficient in certain\n  scenarios compared to funneling every match through a single event.\n\n  The new syntax is to put the name of the event before the string used for the\n  ``msg`` argument. As an extension, it is possible to only provide an event name,\n  skipping ``msg``. In this case, the framework expects the event's parameters to\n  consist of only state and data as follows:\n\n\tsignature only-event {\n\t\tpayload /.*root/\n\t\tevent found_root\n\t}\n\n\tevent found_root(state: signature_state, data: string) { }\n\n  Using the ``msg`` parameter with a custom event looks as follows. The custom\n  event's parameters need to align with those for ``signature_match()` event:\n\n\tsignature event-with-msg {\n\t\tpayload /.*root/\n\t\tevent found_root_with_msg \"the-message\"\n\t}\n\n\tevent found_root_with_msg(state: signature_state, msg: string, data: string) { }\n\n  Note, the message argument can currently still be specified as a Zeek identifier\n  referring to a script-level string value. If used, this is disambiguated behind\n  the scenes for the first variant. Specifying ``msg`` as a Zeek identifier has\n  been deprecated with the new event support and will be removed in the future.\n\n  Note that matches for signatures with custom events will not be recorded in\n  ``signatures.log``. This log is based on the generation of ``signature_match()``\n  events.\n\n- The QUIC analyzer has been extended to support analyzing QUIC Version 2\n  INITIAL packets (RFC 9369). Additionally, prior draft and some of\n  Facebook's mvfst versions are supported. Unknown QUIC versions will now be\n  reported in ``quic.log`` as an entry with a ``U`` history field.\n\n- Conditional directives (``@if``, ``@ifdef``, ``@ifndef``, ``@else`` and\n  ``@endif``) can now be placed within a record's definition to conditionally\n  define or extend a record type's fields.\n\n\ttype r: record {\n\t\tc: count;\n\t@if ( cond )\n\t\td: double;\n\t@else\n\t\td: count;\n\t@endif\n\t};\n\n  Note that generally you should prefer record extension in conditionally loaded\n  scripts rather than using conditional directives in the original record definition.\n\n- The 'X' code can now appear in a connection's history. It is meant to indicate\n  situations where Zeek stopped analyzing traffic due to exceeding certain limits or\n  when encountering unknown/unsupported protocols. Its first use is to indicate\n  ``Tunnel::max_depth`` being exceeded.\n\n- A new ``Intel::seen_policy`` hook has been introduced to allow intercepting\n  and changing ``Intel::seen` behavior:\n\n\thook Intel::seen_policy(s: Intel::Seen, found: bool)\n\n- A new ``NetControl::rule_added_policy`` hook has been introduced to allow modification\n  of NetControl rules after they have been added.\n\n- The IP geolocation / ASN lookup features in the script layer provide better\n  configurability. The file names of MaxMind databases are now configurable via\n  the new ``mmdb_city_db``, ``mmdb_country_db``, and ``mmdb_asn_db`` constants,\n  and the previously hardwired fallback search path when not using an\n  ``mmdb_dir`` value is now adjustable via the ``mmdb_dir_fallbacks``\n  vector. Databases opened explicitly via the ``mmdb_open_location_db`` and\n  ``mmdb_open_asn_db`` functions now behave more predictably when updated or\n  removed. For details, see:\n  https://docs.zeek.org/en/master/customizations.html#address-geolocation-and-as-lookups\n\n- The ``zeek-config`` script now provides a set of ``--have-XXX`` checks for\n  features optionally compiled in. Each check reports \"yes\"/\"no\" to stdout and\n  exits with 0/1, respectively.\n\nChanged Functionality\n---------------------\n\n- The ``split_string`` family of functions now respect the beginning-of-line ^ and\n  end-of-line $ anchors. Previously, an anchored pattern would be matched anywhere\n  in the input string.\n\n- The ``sub()`` and ``gsub()` functions now respect the beginning-of-line ^ and\n  end-of-line $ anchors. Previously, an anchored pattern would be matched anywhere\n  in the input string.\n\n- Ed25519 and Ed448 DNSKEY and RRSIG entries do not cause weirds anymore.\n\n- The OpenSSL references in ``digest.h`` and ``OpaqueVal.h`` headers have been\n  hidden to avoid unneeded dependencies on OpenSSL headers. Plugins using the\n  detail API from ``digest.h`` to compute hashes likely need to accommodate for\n  this change.\n\n- The ``Tunnel::max_depth`` default was changed from 2 to 4 allowing for more than\n  two encapsulation layers. Two layers are already easily reached in AWS GLB\n  environments.\n\n- Nested MIME message analysis is now capped at a maximum depth of 100 to prevent\n  unbounded MIME message nesting. This limit is configurable with ``MIME::max_depth``.\n  A new weird named ``exceeded_mime_max_depth`` is reported when reached.\n\n- The ``netcontrol_catch_release.log`` now contains a plugin column that shows which\n  plugin took an action. The logs also contain information when errors or existing\n  rules are encountered.\n\n- The ``Cluster::PoolSpec`` record no longer provides default values for its\n  ``topic`` and ``node_type`` fields, since defaults don't fit their intended\n  use and looked confusing in generated documentation.\n\nRemoved Functionality\n---------------------\n\n- Zeek no longer automatically subscribes to topics prefixed with \"bro/\" whenever\n  subscribing to topics prefixed with \"zeek/\". This was a leftover backward-\n  compatibility step in the Broker code that should have been removed long ago.\n\nDeprecated Functionality\n------------------------\n\n- The virtual functions ``DoSerialize``and ``DoUnserialize`` of the ``OpaqueVal``\n  (and ``BloomFilter``) class will be removed with Zeek 7.1. Unfortunately, code\n  implementing the deprecated methods does not produce compiler warnings.\n\n  Plugin authors implementing an ``OpaqueVal`` subclass need to convert to\n  ``DoSerializeData`` and ``DoUnserializeData``:\n\n    * ``std::optional<BrokerData> OpaqueVal::DoSerializeData() const``\n    * ``bool OpaqueVal::DoUnserializeData(BrokerDataView data)``\n\n  When overriding ``DoSerializeData()``, return ``std::nullopt`` (or a\n  default-constructed ``optional``) for values that cannot be serialized.\n  Otherwise, the canonical way to create a ``BrokerData`` for serialization is\n  by using a ``BrokerListBuilder``. For example, creating a ``BrokerData`` that\n  contains ``true`` and the count ``42`` could be implemented as follows:\n\n    BrokerListBuilder builder;\n    builder.Add(true);\n    builder.AddCount(42u);\n    return std::move(builder).Build();\n\n  Please refer to the respective class documentation for a full list of member\n  functions on ``BrokerListBuilder`` and ``BrokerDataView``.\n\n  For plugins that are using the macro ``DECLARE_OPAQUE_VALUE`` to generate the\n  function prototypes for the serialization functions: please use\n  ``DECLARE_OPAQUE_VALUE_DATA`` instead to generate prototypes for the new API.\n\n  Plugin authors that need to support multiple Zeek versions can use the\n  ``ZEEK_VERSION_NUMBER`` macro to conditionally implement the new and old\n  methods. Provide the new versions with Zeek 6.2 (60200) or later, otherwise\n  keep the old signature. The default implementations for the new functions\n  as used by Zeek will call the old signatures and convert the results.\n\n- The ``Cluster::Node$interface`` field has been deprecated. It's essentially\n  unneeded, unused and not a reliable way to gather the actual interface used\n  by a worker. In Zeekctl deployments the field will be populated until its\n  removal. The ``packet_source()`` bif should be used on worker processes to\n  gather information about the interface.\n\n- The ``policy/misc/load-balancing`` script has been deprecated in favor of\n  AF_PACKET PF_RING, Netmap or other NIC specific load balancing approaches.\n\n- Time machine related enums, options and fields have been marked for removal.\n\n- The ``check_for_unused_event_handlers`` options the related ``UsedHandlers()``,\n  ``UnusedHandlers()`` and their related ``SetUsed()`` and ``Used()`` methods\n  have been marked for removal. The feature of finding unused event handlers is\n  provided by default via the ``UsageAnalyzer`` component.\n\n- Using a Zeek identifier for the ``msg`` argument within a signatures's ``event``\n  keyword has been deprecated.\n\nZeek 6.1.0\n==========\n\nBreaking Changes\n----------------\n\n- ``assert`` is now a reserved keyword for the new ``assert`` statement.\n\n- The ``__bro_plugin__`` file that gets generated as part of plugin builds was\n  renamed to ``__zeek_plugin__``. This will affect the ability for older\n  versions of ``zkg`` to use the ``zkg unload`` and ``zkg load`` commands. This\n  should only cause breakage for people using a version of ``zkg` that doesn't\n  come bundled with Zeek (which we generally don't recommend doing).\n\n- Zeek does not traverse into dot directories to find plugins or hlto files\n  anymore.  Any dot directories found below the directories specified in\n  ZEEK_PLUGIN_PATH or ZEEK_SPICY_MODULE_PATH are now skipped. Dot directories\n  explicitly listed in ZEEK_PLUGIN_PATH or ZEEK_SPICY_MODULE_PATH are not\n  skipped.\n\n- External plugins will fail to configure if their minimum required CMake\n  version is below 3.15. This was a warning with Zeek 6.0, but has caused user\n  confusion due to unhelpful error messages around the IN_LIST operator policy.\n\n- The FindBISON, FindOpenSSL, FindPackageHandleStandardArgs, FindPackageMessage,\n  and SelectLibraryConfigurations cmake files were removed from our cmake\n  repository in favor of the versions that come with CMake. This should not\n  cause any breakage, but it is possible in the case that someone was using\n  these in a plugin.\n\nNew Functionality\n-----------------\n\n- Zeek now includes the LDAP protocol analyzer from the zeek/spicy-ldap project\n  (https://github.com/zeek/spicy-ldap). This analyzer is enabled by default. The\n  analyzer's events and its ``ldap.log`` and ``ldap_search.log`` should be\n  considered preliminary and experimental until the arrival of Zeek's next\n  long-term-stable release (7.0).\n\n  If you observe unusually high CPU consumption or other issues due to this\n  analyzer being enabled by default, the easiest way to disable it is via the\n  ``Analyzer::disabled_analyzers`` const as follows:\n\n\tredef Analyzer::disabled_analyzers += {\n\t\tAnalyzer::ANALYZER_LDAP_UDP,\n\t\tAnalyzer::ANALYZER_LDAP_TCP,\n\t};\n\n  Please do report issues to us including diagnostic information in case this is\n  necessary in your environment. We're also open to general feedback about the\n  structure of the new logs.\n\n- Zeek now includes the QUIC protocol analyzer from the zeek/spicy-quic project\n  (https://github.com/zeek/spicy-quic). This project is a fork of Fox-IT's\n  initial implementation (https://github.com/fox-ds/spicy-quic).\n\n  As for the LDAP analyzer, the analyzer's events and the new ``quic.log``\n  should be considered preliminary and experimental until the arrival of Zeek's\n  next long-term-stable release (7.0). As above, any feedback and contributions\n  to this analyzer and the new log are welcome.\n\n  The analyzer's functionality is limited to decryption of the INITIAL packets\n  of QUIC version 1. If decryption of these packets is successful, the handshake\n  data is forwarded to Zeek's SSL analyzer. An ``ssl.log`` entry will appear in\n  ``ssl.log`` for QUIC connections. The entry in the ``conn.log`` will contain\n  ``quic`` and ``ssl`` in the service field.\n\n  To disable the analyzer in case of issues, use the following snippet:\n\n\tredef Analyzer::disabled_analyzers += {\n\t\tAnalyzer::ANALYZER_QUIC,\n\t};\n\n- Added a new ``assert`` statement for assertion based testing and asserting\n  runtime state.\n\n\tassert <expr: bool>[, <message: string>];\n\n  This statement comes with two hooks. First, ``assertion_failure()`` that is\n  invoked for every failing assert statement. Second, ``assertion_result()``\n  which is invoked for every assert statement and its outcome. The latter allows\n  to construct a summary of failing and passing assert statements. Both hooks\n  receive the location and call stack for the ``assert`` statement via a\n  ``Backtrace`` vector.\n\n  A failing assert will abort execution of the current event handler similar to\n  scripting errors. By default, a reporter error message is logged. Using the\n  break statement within ``assertion_failure()`` or ``assertion_result()``\n  allows to suppress the default message.\n\n- Add a new ``&default_insert`` attribute for tables. This behaves as\n  ``&default`` with the addition that the default value is inserted into the\n  table upon a failed lookup. Particularly for tables with nested container\n  values, the ``&default`` behavior of not inserting the value can be of little\n  use.\n\n- The ``from_json()`` function now takes an optional key_func argument to\n  normalize JSON object key names. This can be useful if the keys in a JSON\n  object are not valid Zeek identifiers or reserved keywords.\n\n- Module names are now included in ``global_ids()``. Their key in the returned\n  table is prefixed with \"module \" and their value will have the ``type_name``\n  field set to \"module\".\n\n- Identifiers in the global scope can now be referenced and defined from within\n  modules by prefixing their names with ``::``. Previously, these required an\n  explicit ``GLOBAL::`` prefix to be used. Using ``GLOBAL::`` has been\n  deprecated.\n\n- The ``as`` keyword now supports casting between ``set`` and ``vector`` values\n  with the same element type. Converting ``set`` values with multiple index\n  values is not supported. We plan to extend the use of the ``as`` keyword to\n  support more type conversions in the future.\n\n- Added new packet analyzer to handle PCAP files DLT_PPP link type.\n\n- Fixed appending of ``any`` to ``vector of any``.\n\n- The ModBus analyzer's function support was expanded, with new handling of the\n  Encapsulation Interface Transport (function 28) And Diagnostics (function 8)\n  functions. This adds new ``modbus_encap_interface_transport_{request,response}``\n  and ``modbus_diagnostics_{request,response}`` events.\n\n- The ModBus file record read and write events now provide the full data from\n  the request and response messages as part of the event data.\n\n- The full PDU length was added to the ``ModBusHeader`` record type passed with\n  all of the ModBus events.\n\nChanged Functionality\n---------------------\n\n- A connection's value is now updated in-place when its directionality is\n  flipped due to Zeek's heuristics (for example, SYN/SYN-ACK reversal or\n  protocol specific approaches).  Previously, a connection's value was discarded\n  when flipped, including any values set in a ``new_connection()`` handler. A\n  new ``connection_flipped()`` event is added to allow updating custom state in\n  script-land.\n\n- Loading ``policy/frameworks/notice/community-id.zeek`` now also automatically\n  community ID logging. In the past, loading the script had no effect unless\n  ``policy/protocols/conn/community-id-logging.zeek`` was loaded before. This\n  was fairly unusual and hard to debug behavior.\n\n- Connections to broadcast addresses are not flipped based on\n  ``likely_server_ports`` anymore. Previously, broadcast packets originating\n  from a likely server port resulted in 255.255.255.255 being the originator in\n  ``conn.log``.\n\n- When too many HTTP requests are pending, Zeek will now log them at once and\n  reset request/response correlation instead of running into unbounded state\n  growth. This behavior is configurable via a new option\n  ``HTTP::max_pending_requests``.  The default is ``100``.\n\n- Fix deferred initialization of nested records containing non-const &default\n  attributes.\n\n- Parameter lists for functions, events and hooks now use commas instead of\n  semicolons in error messages or when printing such functions.\n\n- The IO buffer size used for PCAP file reading is now always 128kb. This new\n  default can be changed via ``Pcap::bufsize_offline_bytes``.\n\n- The input framework now provides better information in error messages when\n  encountering missing non-optional field while loading data.\n\n- The SSL analyzer will now parse a configurable maximum of 10 SSL Alerts per\n  SSL message. For TLS 1.3, the maximum is implicitly 1 as defined by RFC 8446.\n  If there are more alerts, a new weird \"SSL_excessive_alerts_in_record\" is raised.\n  For non-TLS 1.3, the maximum can be redefined via ``SSL::max_alerts_per_record``.\n\n- The ``ssl_history`` field in the ssl.log is now capped at a configurable\n  limit of 100 characters prevent unbounded growth. The limit can be changed\n  via the option ``SSL::max_ssl_history_length``. When reached, a new weird\n  named \"SSL_max_ssl_history_length_reached\" is raised.\n\nDeprecated Functionality\n------------------------\n\n- Accessing globals with ``GLOBAL::name`` has been deprecated and will be\n  removed with Zeek 7.1. Use ``::name`` instead.\n\n- The original ``trigger::Trigger`` constructor has been deprecated and will be\n  removed with Zeek 7.1. Use the new alternative constructor (per\n  ``src/Trigger.h``) instead, including replacing any use of ``new ...`` with\n  ``make_intrusive<...>``. The new constructor differs only in the placement of\n  the ``timeout`` parameter, and in that - unlike the original - it always\n  returns a valid pointer, which must be Unref()'d after construction, either\n  explicitly (if using ``new``) or implicitly (if using\n  ``make_intrusive<...>``).\n\nZeek 6.0.0\n==========\n\nBreaking Changes\n----------------\n\n- Zeek now treats private address space (i.e., non-routable IP address ranges)\n  as local by default, matching the intuition of many users that e.g. a\n  192.168/16 IP address should show up as local in the logs. To do this, Zeek\n  automatically adds ``Site::private_address_space`` to ``Site::local_nets`` at\n  startup. Subsequent runtime updates to ``Site::private_address_space``\n  propagate to ``Site::local_nets``, while updates to the latter don't affect\n  the former.\n\n  You're free to define ``Site::local_nets`` as before and do not need to update\n  your configurations. If you added standard private address space to\n  ``Site::local_nets`` in the past, you no longer need to do so. This also\n  applies to zeekctl's ``networks.cfg`` file.\n\n  The new global Boolean ``Site::private_address_space_is_local``, true by\n  default, controls the behavior. A redef to false brings back Zeek's prior\n  behavior of considering private address space an unrelated concept, which will\n  come in handy for example when working with tests that compare results against\n  log baselines that have not yet been updated.\n\n- Telemetry centralization and Prometheus exposition is not enabled by default\n  anymore. Previously, the manager node would open port 9911/tcp by default and\n  import all metrics from other nodes. For large clusters, the current implementation\n  introduces significant processing overhead on the manager even if the Prometheus\n  functionality is not used. While inconvenient, disable this functionality\n  (assumed to be used by few as of now) by default to preserve resources.\n\n  The script to enable centralization and the Prometheus endpoint is now\n  located in the ``policy/`` folder. Re-enable the old functionality with:\n\n\t@load frameworks/telemetry/prometheus\n\n  You may experiment with increasing ``Broker::metrics_export_interval``\n  (default 1s) to reduce the extra overhead and communication at the expense\n  of stale metrics.\n\n- Custom source tarballs require a ``repo-info.json`` file.\n\n  Note, should you be using official Zeek release tarballs only, or build\n  Zeek solely from git checkouts, this does not affect you.\n\n  However, if you're building your own Zeek source tarballs, it is now required\n  that a ``repo-info.json`` file exists at the top-level. The ``dist`` target was\n  extended to add this file and official Zeek release source tarballs will\n  contain it going forward.\n\n  The following command can be used to produce ``repo-info.json``:\n\n\tpython3 ./ci/collect-repo-info.py --only-git > ../path/to/tarballdir/repo-info.json\n\n  This is required to support the new ``-V`` / ``--build-info`` option that\n  provides information about git submodules and included plugins used during\n  the build. The ``ci/collect-repo-info.py`` tool runs at ``./configure`` time\n  and either collects the required information from a git clone (when git is\n  installed), or otherwise uses the content of a file named ``repo-info.json``.\n\n  If you see opportunities to extend ``repo-info.json`` with further information,\n  please get in touch.\n\n- Plugin authors should raise the minimum required CMake version to 3.15 to\n  ensure compatibility with new CMake scaffolding included in this\n  release. Older versions will trigger a warning at configuration time and,\n  depending on the functionality included in the plugin, may trigger subsequent\n  errors during configuration or build.\n\n- Zeek container images are not pushed to the zeekurity organization anymore.\n  Please switch to using the ``zeek/zeek`` image on DockerHub, or the images\n  published to ``public.ecr.aws/zeek/zeek``.\n\n- The IRC_Data analyzer declaration has been moved to protocols/irc/IRC.h.\n\n- The error message returned when using ``bro_init``, ``bro_done``, and\n  ``bro_script_loaded`` events is now removed.  removed. Usage of these events\n  has returned that error during script parsing for a few years, and time has\n  come to finally remove it.\n\nNew Functionality\n-----------------\n\n- Zeek now features experimental JavaScript support:\n\n\t/* hello.js */\n\tzeek.on('zeek_init', () => {\n\t  console.log('Hello, Zeek!');\n\t});\n\n\t$ zeek ./hello.js\n\tHello, Zeek!\n\n  When building Zeek on a system that features a recent (16.13+) version of the\n  libnode package with development headers, Zeek automatically includes the\n  externally-maintained ZeekJS plugin (https://github.com/corelight/zeekjs) as a\n  builtin plugin. This allows Zeek to load and execute JavaScript code located\n  in ``.js`` or ``.cjs`` files. When no such files are passed to Zeek, the\n  JavaScript engine and Node.js environment aren't initialized and there is no\n  runtime impact.\n\n  The Linux distributions Fedora 37 & 38, Ubuntu 22.10, and the upcoming Debian\n  12 release provide suitable packages. On other platforms, Node.js can be built\n  from source with the ``--shared`` option.\n\n  To disable this functionality, pass ``--disable-javascript`` to configure.\n\n- Zeek now comes with Spicy support built in, meaning it can now\n  leverage any analyzers written in Spicy out of the box. While the\n  interface layer connecting Zeek and Spicy used to be implemented\n  through an external Zeek plugin, that code has now moved into the\n  Zeek code base itself. We also added infrastructure to Zeek that\n  enables its built-in standard analyzers to use Spicy instead of\n  Binpac. As initial (simple) examples, Zeek's Syslog and Finger\n  analyzers are now implemented in Spicy. While their legacy versions\n  remain available as fallbacks for now in case Spicy gets explicitly\n  disabled at build time, their use is deprecated and their code won't\n  be maintained any further. (Some of these Spicy updates were part of\n  Zeek 5.2 already, but hadn't been included in its NEWS section.)\n\n- Zeek events now hold network timestamps. For scheduled events, the timestamp\n  represents the network time for which the event was scheduled for, otherwise\n  it is the network time at event creation. A new bif ``current_event_time()``\n  allows to retrieve the current event's network timestamp within the script-layer.\n\n  When Zeek sends events via Broker to other nodes in a cluster, an event's network\n  timestamp is attached to the Broker messages. On a receiving Zeek node executing a\n  handler for a remote event, ``current_event_time()`` returns the network time of\n  the sending node at the time the event was created.\n\n  The Broker level implementation allows to exchange arbitrary event metadata, but\n  Zeek's script and C++ APIs currently only expose network timestamp functionality.\n\n- A new bif ``from_json()`` can be used to parse JSON strings into records.\n\n\ttype A: record { a: addr; };\n\tlocal p = from_json({\\\"a\\\": \\\"192.168.0.1\\\"}\", A);\n\tif ( p$valid )\n\t\tprint (p$v as A)\n\n  Implicit conversion from JSON to Zeek types is implemented for bool, int, count,\n  real, interval (number as seconds) and time (number as unix timestamp), port\n  (strings in \"80/tcp\" notation), patterns, addr, subnet, enum, sets, vectors\n  and records similar to the rules of the input framework. Optional or default\n  record fields are allowed to be missing or null in the input.\n\n- Zeek now provides native \"Community ID\" support with a new bif called\n  ``community_id_v1()``. Two policy scripts ``protocols/conn/community-id-logging``\n   and ``frameworks/notice/community-id`` extend the respective logs with a\n  ``community_id`` field the same way as the external zeek-community-id plugin\n  provides. A main difference to the external ``hash_conn()`` bif is that the\n  ``community_id_v1()`` takes a ``conn_id`` record instead of a ``connection``.\n\n  Loading the new policy scripts and using the external zeek-community-id\n  plugin at the same time is unsupported.\n\n- ZeekControl is now multi-logger aware. When multiple logger nodes are configured\n  in ZeekControl's node.cfg, by default the log archival logic adds a logger's name\n  as suffix to the rotated file name:\n\n\tstats.11:18:57-11:19:00-logger-1.log.gz\n\tstats.11:18:57-11:19:00-logger-2.log.gz\n\n  Previously, in a multi-logger setup, individual logger processes would overwrite\n  each other's log files during rotation, causing data loss.\n\n  For setups with a single logger, there's no change in behavior. The naming\n  of the final logs can be customized by providing an alternative\n  ``make-archive-name`` script and using the new ``ZEEK_ARG_LOG_SUFFIX``\n  environment variable.\n\n- A supervisor controlled Zeek cluster is now multi-logger aware. This avoids\n  loggers overwriting each other's log files within a single log-queue directory.\n  By default, a logger's name is appended to the rotated logs by zeek-archiver.\n\n- Introduce a new command-line option ``-V`` / ``--build-info``. It produces\n  verbose output in JSON format about the repository state and any included\n  plugins.\n\n- The X.509 certificate parser now exposes the signature type that is given inside\n  the signed portion of the certificate.\n\n- The SSL parser now parses the CertificateRequest handshake message. There is a new\n  ``ssl_certificate_request`` event and a new ``parse_distinguished_name`` function.\n  We also added the ``protocols/ssl/certificate-request-info`` policy script, that\n  adds some additional information to ``ssl.log``.\n\n- Add logging metrics for streams (``zeek-log-stream-writes``) and writers\n  (``zeek-log-writer-writes-total``).\n\n- Add networking metrics via the telemetry framework. These are enabled\n  when the ``misc/stats`` script is loaded.\n\n\tzeek-net-dropped-packets\n\tzeek-net-link-packets\n\tzeek-net-received-bytes\n\tzeek-net-packet-lag-seconds\n\tzeek-net-received-packets-total\n\n  Except for lag, metrics originate from the ``get_net_stats()`` bif and are\n  updated through the ``Telemetry::sync()`` hook every 15 seconds by default.\n\n- The DNS analyzer now parses RFC 2535's AD (\"authentic data\") and CD (\"checking\n  disabled\") flags from DNS requests and responses,  making them available in\n  the ``dns_msg`` record provided by many of the ``dns_*`` events. The existing\n  ``Z`` field remains unchanged and continues to subsume the two flags, for\n  backward compatibility.\n\n- The supervisor framework can now start worker nodes that read from a trace file.\n\n- Zeek can be prevented from updating ``network_time()`` to the current time\n  by setting ``allow_network_time_forward=F``. Together with ``set_network_time()``\n  or a custom plugin, this allows control of ``network_time()`` without Zeek\n  interfering.\n\n- The setting ``Pcap::non_fd_timeout`` can be used to configure the timeout\n  used by non-selectable packet sources in the idle case (default 20usec).\n  This value has previously been hard-coded, but increasing it can significantly\n  reduce idle CPU usage in low packet rate deployments.\n\n- Zeek now supports a new ``@pragma`` directive. It currently allows suppressing\n  deprecation warnings in Zeek scripts by opening with\n  ``@pragma push ignore-deprecations`` and closing with ``@pragma pop``.\n  This particularly helps in situations where use of the Zeek base scripts, for\n  example to populate a deprecated field for API compatibility, would otherwise\n  trigger deprecation warnings.\n\n- The ``Reporter`` class was extended by a ``Deprecation()`` method to use\n  for logging deprecations rather than using ad-hoc ``Warning()`` calls.\n\n- The network statistics record type features a new ``pkts_filtered`` field for\n  reporting the number of packets that the interface filtered before hand-off to\n  Zeek. Packet source implementations are free to fill this field as\n  feasible. The default pcap packet source does not provide this information\n  because its availability depends on the libpcap version.\n\n- Packet statistics (packets received, packets dropped, bytes received, packets\n  seen on link, and packets filtered) are now reported to the Telemetry\n  framework, under the ``zeek_net`` prefix.\n\n- Zeek's cluster framework provides the new ``get_node_count(node_type: NodeType)``\n  function to obtain the number of nodes for a given node type as defined in the\n  cluster layout. Furthermore, ``broadcast_topics`` was added as a collection of\n  broker topics that can be used to reach all nodes in a cluster.\n\n- The new ``Cluster::Experimental`` namespace has been introduced to Zeek's cluster\n  framework to provide experimental features. Based on practical experiences and the\n  adoption of an experimental feature, it may become a regular feature or be removed\n  in future releases. Experimental features are loaded via:\n  ``@load policy/frameworks/cluster/experimental``\n\n- Zeek's cluster framework provides two new experimental events:\n\n  - ``cluster_started``: This event will be broadcasted from the manager once all\n    cluster-level connections have been established based on the given cluster layout.\n    If any node restarts (including the manager itself), the event will neither be\n    rebroadcasted nor raised locally for the restarted node.\n\n  - ``node_fully_connected``: This event will be sent to the manager and raised\n    locally once a cluster node has successfully conducted cluster-level handshakes\n    for all its outgoing connections to other cluster nodes based on the given cluster\n    layout.\n\n  Note: There is no tracking of cluster node connectivity. Thus, there is no guarantee\n  that all peerings still exist at the time of these events being raised.\n\n- The IEEE 802.11 packet analyzer gains the ability to parse encapsulated A-MSDU\n  packets, instead of just dropping them. It also gains the ability to properly\n  recognize CCMP-encrypted packets. These encrypted packets are currently\n  dropped to Zeek's inability to do anything with them.\n\n- Add packet analyzers for LLC, SNAP, and Novell 802.3, called from the Ethernet\n  and VLAN analyzers by default.\n\n- Environment variables for the execution of log rotation postprocessors can\n  be set via ``Log::default_rotation_postprocessor_cmd_env``.\n\n- The ``record_field`` record was extended by ``optional`` and ``record_fields()``\n  can now be used to determine the optionality of record fields.\n\n- The ``ip4_hdr`` record was extended by ``DF``, ``MF``, ``offset`` and ``sum``\n  to aid packet-level analysis use-cases.\n\n- Zeek now supports parsing the recently standardized DTLS 1.3. Besides the protocol\n  messages being correctly parsed and raising the typical SSL/TLS events, the biggest\n  visible change is the newly added ``ssl_extension_connection_id`` event.\n\n- The NTP analyzer now recognizes when client and server mode messages disagree\n  with the notion of \"originator\" and \"responder\" and flips the connection. This\n  can happen in packet loss or packet re-ordering scenarios. Such connections will\n  have a ``^`` added to their history.\n\n- New bifs for ``ceil()`` and ``log2()`` have been added.\n\n- Seeds for deterministic processing can now also be set through a new environment\n  variable called ``ZEEK_SEED_VALUES``. The format is expected to contain 21\n  positive numbers separated by spaces.\n\nChanged Functionality\n---------------------\n\n- The base distribution of the Zeek container images has been upgraded to\n  Debian 12 \"bookworm\" and JavaScript support was enabled.\n\n- When ``get_file_handle()`` is invoked for an analyzer that did not register\n  an appropriate callback function, log a warning and return a generic handle\n  value based on the analyzer and connection information.\n\n- The ``&on_change`` attribute of set and tables is propagated through ``copy()``.\n\n- Revert back to old method of preallocating ``PortVal`` objects for all valid\n  port numbers, as it was implemented prior to the Windows port. Not\n  preallocating these objects saves a minor amount of memory for short runs of\n  Zeek, but comes at a performance cost for having to allocate the objects every\n  time a new port is seen plus do map lookups for each port. This memory savings\n  is mostly lost for long runs of Zeek, since all of the ports will likely end\n  up allocated in time.\n\n  If the version from the Windows port is desired, a new configure option\n  ``--disable-port-prealloc`` will disable the preallocation and enable the map\n  lookup version.\n\n- The main-loop has been changed to process all ready IO sources with a\n  zero timeout in the same loop iteration. Previously, two zero-timeout\n  sources would require two main-loop iterations. Further, when the main-loop\n  is polling IO sources with file descriptors, zero timeout IO sources are\n  added to the list of sources to be processed as well.\n\n  The intervals to decide when Zeek checks FD-based IO sources for readiness\n  have been made configurable through ``io_poll_interval_default`` and\n  ``io_poll_interval_live`` for ease of testing, development and debugging\n  of the main-loop.\n\n- Zeek does not arbitrarily update ``network_time()`` to current time anymore.\n  When a packet source is providing a constant stream of packets, packets\n  drive network time. Previously, Zeek updated network time to current\n  time in various situations, disregarding timestamps of network packets.\n  Zeek will now update ``network_time()`` only when a packet source has been\n  inactive/idle for an interval of ``packet_source_inactivity_timeout``\n  (default 100msec). When a worker process suddenly observes no packets, timer\n  expiration may initially be delayed by ``packet_source_inactivity_timeout``.\n\n- Calling ``suspend_processing()`` when reading traces does not update network\n  time to the current time anymore. Instead, Zeek keeps ``network_time()``\n  according to the trace file. This causes scheduled events to not fire once\n  ``suspend_processing()`` is called, which seems more reasonable than\n  arbitrarily setting ``network_time()`` to current time. Processing can still\n  be continued from broker events or input readers.\n\n- Previously, Zeek would process and dispatch events for the very first packet\n  in a trace file in order to initialize time, even if ``suspend_processing()``\n  was called in a ``zeek_init()`` handler. This has been changed such that the\n  first packet will only be processed once ``continue_processing()`` has been\n  invoked again. Some background around the previous behavior can be found\n  in GH-938. Given that the ``network_time_init()`` event explicitly signals\n  initialization of network time, this behavior seems more reasonable.\n\n- If an event is scheduled with a 0.0sec timeout from a ``zeek_init()`` handler\n  that also invokes ``suspend_processing()``, the scheduled event will fire\n  immediately with ``network_time()`` still yielding ``0.0``. Previously,\n  ``network_time()`` was set to the current time. The new behavior provides\n  more deterministic operation and aligns with timers stopping during a\n  ``suspend_processing()``.\n\n- Broker no longer initializes network time to current time when processing\n  input. Particularly in combination with pcap processing this was not desirable\n  behavior.\n\n- The IO loop's poll interval is now correctly reduced from 100 to 10 for\n  live packet sources. This should lower CPU usage for deployments with\n  non-selectable packet sources.\n\n- Zeek's CMake scaffolding has received an overhaul for modernizing the build\n  system and to make it easier to maintain going forward. Plugins can now use a\n  declarative interface for adding all sources, BIFs, etc. in one block instead\n  of using the previous begin/end functions. While the old plugin functions\n  still exist for backward compatibility, the underlying codebase requires newer\n  CMake features. Plugin authors should raise their minimum required CMake\n  version to 3.15, to match Zeek's.\n\n- The IRC data analyzer does not extract DCC acknowledgements to files anymore.\n  Instead, ``irc_dcc_send_ack`` is raised with the bytes acknowledged by the\n  recipient.\n\n- The IRC base script now use ``file_sniff()`` instead of ``file_new()`` for\n  DCC file transfers to capture ``fuid`` and inferred MIME type in irc.log.\n\n- The ``ignore_checksums`` script variable now reflects the correct value\n  when using the ``-C`` command-line flag.\n\n- Support for ARUBA GRE tunnels now covers all of the known protocol type values\n  for those tunnels.\n\n- The vlan field reported by the AF_PACKET packet source is now properly\n  masked to exclude PCP and DEI bits. Previously, these bits were included\n  and could cause invalid vlan values > 4095 to be reported.\n\n- Libpcap based packet source now avoids the 32bit wraparound of link and\n  dropped packet counters as reported by users.\n\n- The `ssl_history` field in ssl.log indicates that the letter `j` is reserved\n  for hello retry requests. However, this logging was never fully implemented;\n  instead, hello retry requests were logged like as a server hello (with the letter\n  `s`). This oversight was fixed, and hello retry requests are now correctly logged.\n\n- When per-connection SMB parser state (read offsets, tree ids, ...) exceeds\n  ``SMB::max_pending_messages`` (default 1000), Zeek discards such per-connection\n  state and raises a new ``smb2_discarded_messages_state()`` event. This event is\n  used to reset script-layer SMB state. This change provides protection against\n  unbounded state growth due to partial or one-sided SMB connections.\n\n  Setting ``SMB::max_pending_messages`` to 0 can be used to switch back to the\n  previous behavior of not discarding state. Setting ``SMB::enable_state_clear``\n  to ``F`` skips the script-layer state clearing logic.\n\n- Fix ``disable_analyzer()`` builtin function crashing when attempting to\n  disable connection's root analyzers.\n\n- Zeek script vectors now support negative indices.\n\n\tlocal v = vector(1, 2, 3);\n\tprint v[-1];  # prints 3\n\n- Function parameters are rendered by Zeekygen as ``:param x`` rather than just\n  ``:x:``. This allows to group parameters Zeek's documentation.\n\nRemoved Functionality\n---------------------\n\n- Mixing vector and scalar operands for binary expressions, like addition,\n  multiplication, etc., is now an error.\n\n- Using deprecated ``when`` semantics without capturing variables is now an error.\n\n- Referencing local variables in a more outer scope than where they were declared\n  is now an error\n\nDeprecated Functionality\n------------------------\n\n- The cluster framework's ``worker_count`` has been deprecated in favor of the\n  new function ``get_active_node_count(node_type: NodeType)`` that can be used\n  to obtain the number of nodes of a given type the calling node is currently\n  connected to.\n\n\nZeek 5.2.0\n==========\n\nBreaking Changes\n----------------\n\n- Zeekctl now assigns network ports to workers starting at port 27760. This\n  fixes an issue where workers were starting up with ports within Linux's\n  ephemeral port range, and were potentially failing to startup due the ports\n  already being in use. This change may require changes in firewall/routing\n  configurations between hosts in a Zeek cluster. This should not affect\n  clusters running on FreeBSD, as that OS uses a different range for ephemeral\n  ports.\n\n- Zeekctl support for the AF_PACKET plugin specific options (af_packet_*) has\n  been integrated into zeekctl directly. Upgrading to Zeek 5.2 with a builtin\n  AF_PACKET packet source (default on Linux) requires an upgrade of zeekctl\n  to the version bundled with Zeek to continue using these options.\n\n- The blank identifier ``_`` cannot be used in expressions and options anymore.\n  Outside of obfuscation exercises, this should have little real-world impact.\n\n- A new ``mysql_eof`` event has been introduced and the ``mysql_ok`` event\n  is not raised in its place or artificially anymore. The base scripts were\n  adapted accordingly. Users of ``mysql_ok()`` likely need to switch to\n  ``mysql_eof()``.\n\n- Zeek will now exit at startup if an external plugin (e.g. from a package) is\n  discovered to have the same name as a built-in plugin. See below for the\n  change regarding the AF_PACKET plugin now being built-in for an example of\n  this potentially being triggered.\n\n- DNS query type strings were updated to match the current standardized list of\n  strings. This changes the string reported for a small subset of query types:\n\n\t30: Changed from \"EID\" to \"NXT\"\n\t31: Changed from \"NIMLOC\" to \"EID\"\n\t32: Changed from \"NB\" to \"NIMLOC\"\n\n- The ``--with-caf`` option for the ``configure`` script was removed. Broker now\n  requires specific versions of CAF per Zeek release, and passing an\n  externally-built version of CAF often lead to build failures.\n\nNew Functionality\n-----------------\n\n- Experimental support added for building and running Zeek on Microsoft Windows\n  environments. This is considered experimental due to the fact that our\n  standard testing setup (btest) doesn't run properly on Windows. This will be\n  fixed in the future. In the meantime we have done some basic testing against\n  builds done with Visual Studio 2019. Information on how to build on Windows is\n  available in the Zeek documentation. Note also that Spicy is currently\n  unsupported and will be fixed in the future.\n\n  The feature as checked into the repository is not considered production-ready.\n  There are many bugs to squash and features to improve, and we will be steadily\n  fixing things over the next few months.\n\n  The Zeek team wants to give a huge thank you to the team at Microsoft for all\n  of their effort in completing this port.\n\n- Zeek container images are now being published to zeek/zeek and zeek/zeek-dev\n  rather than zeekurity/zeek and zeekurity/zeek-dev on Docker Hub (and continue\n  to be published to public.ecr.aws) Further, container images for amd64 and\n  arm64 platforms are now available. Main driver for the latter was to allow\n  usage of the official container images on Apple's M1 systems.\n\n- Zeekctl support for using ``af_packet`` as ``lb_method`` has been added.\n\n- New ``analyzer_confirmation_info`` and ``analyzer_violation_info`` events with\n  accompanying record types ``AnalyzerConfirmationInfo`` and\n  ``AnalyzerViolationInfo`` have been added. These supersede\n  ``analyzer_confirmation`` and ``analyzer_violation``, which have been\n  deprecated.\n\n- Added helpers to determine protocol, packet or file analyzer based on\n  ``AllAnalyzers::Tag`` values named ``is_protocol_analyzer()``,\n  ``is_packet_analyzer()`` and ``is_file_analyzer()``.\n\n- File analyzers can now raise analyzer violations to the script-layer via the\n  new ``AnalyzerViolation()`` method.\n\n- Packet and file analyzers can now be disabled and enabled at runtime using the\n  ``Analyzer::enable_analyzer()`` and ``Analyzer::disable_analyzer()``\n  wrappers. While initially for protocol analyzers only, these have been\n  extended to work for packet and file analyzers. This now allows to leverage\n  ``Analyzer::disabled_analyzers`` for these kinds of analyzers.\n\n- The blank identifier ``_`` can now be used to ignore loop variables of\n  different types without type clash errors. This allows to do the following\n  within the same scope:\n\n\tlocal vec = vector(\"a\", \"b\", \"c\");\n\tfor ( _, v in vec )\n\t\tprint v;\n\n\tfor ( i, _ in vec )\n\t\tprint v;\n\n  Iterating over only the values of a table can be done by ignoring the full\n  index with a single blank identifier. Due to the internal structure of Zeek\n  tables, this can result in a performance improvement.\n\n\tlocal tab = table([\"a\", 1, T] = \"a1T\", [\"b\", 2, F] = \"b2f\");\n\tfor ( _, v in tab )\n\t\tprint v;\n\n  It's also possible ignore individual indices of different types with the blank\n  identifier ``_`` as follows:\n\n\tfor ( [_, i, _], v in tab )\n\t\tprint i, v;\n\n  As noted under breaking changes, the blank identifier ``_`` cannot be\n  referenced in expression anymore.\n\n- It is now possible to put trailing commas within table, vector, set and record\n  construction. For example, the following code is now valid, which can make for\n  more uniform style and smaller diffs.\n\n\tlocal vec = vector(\n\t\t\"1\",\n\t\t\"2\",\n\t);\n\n\tlocal tab: table[string] of count = [\n\t\t[\"a\"] = 1,\n\t\t[\"b\"] = 2,\n\t];\n\n  Function calls and record constructors can have a trailing comma after the\n  last argument.\n\n\tAnalyzer::schedule_analyzer(\n\t\tchan$orig_h,\n\t\tchan$resp_h,\n\t\tchan$resp_p,\n\t\tAnalyzer::ANALYZER_FTP_DATA,\n\t\t5mins,\n\t);\n\n- Re-introduce event groups. Allow the ``&group`` attribute on event and hook\n  handlers for annotating them with one or more event groups. These groups can\n  be disabled and enable during runtime. Disabling an event group implies\n  disabling all event and hook handlers that are part of it.\n\n  The main difference to a previous implementation in (very) old Zeek versions\n  is its granularity: It is now possible to toggle individual event handlers\n  (event handler bodies). The original implementation worked at the level of\n  events, disabling or enabling all event handlers for a given event at once.\n  Additionally, support for hooks was added as these are structurally similar to\n  events.\n\n  The BIFs ``disable_event_group()`` and ``enable_event_group()`` are\n  re-instantiated and allow controlling event groups based on the group\n  attribute.\n\n  Additionally, event and hook handlers are implicitly placed into event module\n  groups based on the module they are implemented in. All events implemented in\n  a given module can be toggled with ``disable_module_events()`` and\n  ``enable_module_events()``.\n\n- Extend the ``Logging::Stream`` record with an ``event_groups`` field and\n  toggle these during ``Log::disable_stream`` and ``Log::enable_stream``\n  invocations. This allows for explicit/manual opt-in performance optimizations\n  by turning off event handlers at runtime that are only needed for log\n  generation.\n\n- On Linux, the AF_PACKET packet source plugin\n  (https://github.com/zeek/zeek-af_packet-plugin) is included as a builtin\n  plugin by default. To select this packet source, prefix the interface name\n  with ``af_packet``.\n\n\tzeek -i af_packet::eth0\n\n- Usage of ``break`` and ``next`` statements is now validated. It was previously\n  possible to place these outside of ``for``, ``while`` or ``switch`` statements\n  without any error indication.\n\n- Add two BIFs ``get_identifier_declaring_script()`` and\n  ``get_record_field_declaring_script()`` to query the declaring scripts for\n  identifiers and record fields from Zeek scripts.\n\n- Extend the SSH analyzer to produce new events (``ssh2_ecc_init``,\n  ``ssh2_gh_gex_init``, ``ssh2_gss_init``, ssh2_rsa_secret``) to detect when SSH\n  client and server roles are reversed.\n\n- Analyzers found in the new ``Analyzer::requested_analyzers`` set will be\n  enabled at ``zeek_init()`` time. The set can be populated via\n  :zeek:see:`redef`.  This change only has an effect in settings where\n  ``Analyzer::disable_all`` is changed to ``T``. By default, all analyzers\n  continue to be enabled.\n\n- A new ``analyzer.log`` was added to log all analyzer violations and optionally\n  analyzer confirmations. This log can be useful during development of new\n  analyzers as well as for collecting operational data in production\n  environments.\n\n- Expose configurability of for SQLite's synchronous and journal_mode PRAGMAs\n  for SQLite backed Broker data stores. Setting these to synchronous=normal\n  and journal_mode=wal can significantly improve throughput at the cost of\n  some durability in the presence of power loss or OS crash. In the context\n  of Zeek, this is likely more than acceptable.\n\n  Additionally, add integrity_check and failure_mode options to support\n  detecting and deleting corrupted SQLite database at store initialization.\n\n- A new ``join_string_set`` BIF was added, replacing the existing script-level\n  version from utils/strings.zeek.\n\n- A new ``&ordered`` attribute for tables and sets was added. This attribute\n  causes iteration over a table/set to return elements in the order of their\n  insertion.\n\n- A new ``-D`` argument was added to the ``configure`` script to allow passing\n  parameters directly to the underlying CMake call.\n\n- Added parsing for the challenge and response fields to the NTLM analyzer.\n\n- A new ``FTP::max_command_length`` value was added to script-land, defaulting\n  to 100. This value is used by the FTP analyzer to limit the size of commands\n  accepted by the analyzer. A ``FTP_max_command_length_exceeded`` weird is\n  raised for any violations of that length.\n\n- The MySQL analyzer has been extended to detect when client and server negotiate\n  to use a SSL encrypted session. This allows analysis of the subsequent SSL\n  handshake. The service field for encrypted MySQL connections in the conn.log\n  will have entries for both, mysql and ssl.\n\nChanged Functionality\n---------------------\n\n- Violations for packet analyzers that have sessions attached with them will be\n  raised once only. Further, analyzer confirmations are not raised after a\n  violation.\n\n- The parameter given to ``enum_names()`` can now be a string naming the enum\n  type, rather than the type itself.\n\n- The ``type_name`` of enum types produced by ``record_fields()`` now includes\n  the actual type name rather than just ``\"enum\"``.\n\n- Passing non-string ``sep`` and ``def`` arguments to ``cat_sep()`` isn't a\n  fatal error anymore. More descriptive error messages are produced, too.\n\n- The number of analyzer violation events that can be raised by protocol\n  analyzer instances is now capped by the const\n  ``max_analyzer_violation_events``.\n\n- The number of analyzer violation events that can be raised by protocol and\n  file analyzer instances is now capped by the const\n  ``max_analyzer_violation_events``.  Its default is 1000 and the main purpose\n  is to prevent analyzers from scheduling too many ``analyzer_violation_info``\n  events before the DPD ``max_violations`` script-level logic has a chance to\n  run and disable the problematic analyzer.\n\n- The TCP analyzer now continues processing payload for some\n  connections missing initial packets where it would previously have\n  stopped. This fixes a few cases where we already had the logic to\n  continue in place, but we still ended up considering them partial.\n\n- Count underflows via ``--c`` or subtract from statements (``c = c - 1``) are\n  now consistently warned about. Previously, underflows through ``--c`` were\n  treated as runtime errors, while \"subtract from\" underflows were silently\n  accepted. The following (surprising behavior) now causes a warning, too:\n\n\t$ zeek -e 'print 1 - 2'\n\texpression warning in <command line>, line 1: count underflow (1 - 2)\n\t18446744073709551615\n\n- The MQTT scripts registering the analyzer and DPD signatures have been moved\n  from the policy folder to base and are loaded by default.\n\n- Notices created for files transferred over multiple connections will now be\n  associated with one of the connections rather than none.\n\n- The MySQL analyzer has been switched to parse in little endian. This avoids\n  analyzer violations due to out of bound errors for length encoded strings.\n\n- Non-fatal errors when setting up BPF filtering will no longer cause Zeek to\n  exit, but instead will log the error in reporter.log and continue processing.\n\n- The languages reported for the ``keyboard_layout`` field in rdp.log were\n  updated to match the current standardized set of languages. Unknown layout\n  values now attempt to fallback to a \"parent\" layout if one is available.\n\n- In the cluster management framework, the controller now supports Broker's\n  WebSocket data transport for communication with clients. It listens on TCP\n  port 2149 for this purpose. zeek-client now likewise uses the WebSocket\n  transport, removing its runtime dependency on the Broker library and enabling\n  standalone installation. The client still bundles with Zeek by default but is\n  now also available on PyPI and installable via ``pip install zeek-client``.\n  The documentation provides additional details.\n\nDeprecated Functionality\n------------------------\n\n- The global ``disabling_analyzer()`` hook has been deprecated and replaced\n  with ``Analyzer::disabling_analyzer()`` that has the same semantics.\n\n- The ``analyzer_confirmation`` and ``analyzer_violation`` events have been\n  deprecated in favor of the more generic ``analyzer_confirmation_info`` and\n  ``analyzer_violation_info`` events.\n\n- The const values for toggling individual tunnel packet analyzers have been\n  deprecated in favor of using ``Analyzer::disable_analyzer()`` directly. This\n  affects:\n\n\tTunnel::enable_ip\n\tTunnel::enable_ayiya\n\tTunnel::enable_teredo\n\tTunnel::enable_gtpv1\n\tTunnel::enable_gre\n\n  Setting these explicitly to F can be achieved by leveraging\n  ``Analyzers::disabled_analyzers``, for example:\n\n\tredef Analyzer::disabled_analyzers += { PacketAnalyzer::ANALYZER_GRE };\n\n- The ``zeek::merge_type_list()`` function has been deprecated. Please consider\n  the partially compatible and saner ``zeek::maximal_type()`` instead. See\n  GH-2604 for context.\n\n- The pre-authentication data field (pa_data) available in certain Kerberos\n  events now exposes the (encrypted) PA-ENC-TIMESTAMP field (padata-type=2).\n\n- The ``SupressWeirds()`` method in the ContentLine analyzer was deprecated in\n  favor of the correctly-spelled ``SuppressWeirds()`` method.\n\n- The `bro` symlink has finally been removed.\n\nZeek 5.1.0\n==========\n\nBreaking Changes\n----------------\n\n- The ``Packet::{l2,l3}_checksummed`` variables were reworked to correctly match\n  the network layers that they apply to. A new ``Packet::l4_checksummed``\n  variable was added to cover the transport layer. See this GitHub issue for\n  more detail: https://github.com/zeek/zeek/issues/2183.\n\n- The STREAM mode of the ASCII reader now behaves like `tail -F`: when file is\n  removed/replaced, it will start tracking the new file. See\n  https://github.com/zeek/zeek/pull/2097 for more detail\n\n- The Dictionary and PDict classes are now C++ templates. This may cause\n  plugin/package builds to fail due to needing to modify uses of them to match.\n\n- By default, ``files.log`` does not have the fields ``tx_hosts``, ``rx_hosts``\n  and ``conn_uids`` anymore. These have been replaced with the more commonly\n  used ``uid`` and ``id`` fields. They can be re-instantiated by loading the\n  following policy script through ``local.zeek``:\n\n\t@load frameworks/files/deprecated-txhosts-rxhosts-connuids\n\n  Note, however, that this script will be removed with Zeek 6.1. Consumers\n  of ``files.log`` should convert to using the singular ``uid`` and ``id``\n  fields instead.\n\n- The ``files.log`` is now unrolled consistently. That is, when Zeek associates\n  multiple connections with a single file, each of these connections will result\n  in individual ``files.log`` entries with unique connection uids, all sharing\n  the same file uid.\n\n  This unrolling behavior always existed in a Zeek cluster when the network\n  connections involved in a file transfer are load-balanced to different\n  workers.  Due to this affecting only a marginal ratio of files on real-world\n  networks, unrolling the log was chosen as the more efficient approach over\n  making the current logic cluster aware.\n\n  The ``seen_bytes`` and ``missing_bytes`` fields of a ``File::Info`` record\n  continue to represent the total number across all connections seen by the\n  current instance of Zeek.\n\n- The barnyard2 policy scripts have been removed. The integration with the\n  Barnyard2 project used the pre-Broker Broccoli library, which got removed in\n  Zeek 3.0.\n\n- The unified2 analyzer and accompanying scripts have been removed without\n  deprecation.\n\n- The return value of ``packet_analysis::IP::ParsePacket`` has changed to return\n  enum values. This makes it easier to look at the result and immediately know\n  what it means. Unfortunately, because we can't overload a method on the return\n  value alone, we aren't able to deprecate the original version of the method.\n  This may cause build of packages to fail if they were using this method.\n\n- Conditional directives (``@if``, ``@ifdef``, ``@ifndef``, ``@else`` and\n  ``@endif``) can not be placed directly following ``if``, ``for`` or ``while``\n  statements anymore. This was interpreted non-intuitively and could lead to\n  subtle bugs.  The statement following the directive was placed outside of its\n  intended block.  Placing braces after ``if``, ``for`` or ``while`` should\n  result in the intended behavior.\n\n- The ``bro`` symlink to the ``zeek`` binary has finally been removed.\n\n- The connection's service field does not hold \"negated\" analyzer names\n  anymore (analyzers that triggered violations after a confirmation).\n  These analyzers are now tracked in a separate ``service_violation``\n  field with their respective enum values instead.\n\nNew Functionality\n-----------------\n\n- Added support for the /s regular expression modifier. Using this modifier in\n  patterns in Zeek scripts will cause the '.' character to also match newline\n  characters.\n\n- Added a new telemetry framework for providing high-level access to Zeek's\n  metric subsystem. This framework allows script writers to use different metric\n  types (counters, gauges and histograms) for tracking metrics without using\n  lower-level BiFs from ``telemetry.bif``. Additionally, metrics can now be\n  accessed from script land using ``Telemetry::collect_metrics()`` and\n  ``Telemetry::collect_histogram_metrics()``.\n\n  The framework is located in ``base/frameworks/telemetry``.\n\n  In addition to the Prometheus endpoint for metrics export that has existed\n  since Zeek 4.1, two new log streams, ``telemetry.log`` and\n  ``telemetry_histogram.log``, can be enabled by loading\n  ``policy/frameworks/telemetry/log``. This policy script is included in\n  ``local.zeek`` by default.\n\n  For further details on the framework and examples, please refer to the\n  Zeek documentation.\n\n- Allow redef'ing the ``&log`` attribute of record fields:\n\n\tredef Notice::Info$email_dest -= { &log };\n\n  While the syntax allows for any attribute, only ``&log`` is supported. The\n  semantics for other record field attributes are not easy to grasp and there\n  were no obvious use-cases identified.\n\n- Introduced a global ``disabling_analyzer()`` hook to allow vetoing calls\n  to ``disable_analyzer()``.\n\n  The contract is simple: Any script can veto a ``disable_analyzer()`` call by\n  breaking from this hook. The decision is local to the script taking into\n  account any state attached to the connection or state stored elsewhere.\n  A script breaking from the hook takes over responsibility to call\n  ``disable_analyzer()`` at a later point when it finds the condition due\n  to which it vetoed fulfilled (which may be never).\n\n- Add support for iterating over indices and values of a vector using the\n  same syntax as used for iterating over key-value pairs of tables, where\n  ``value`` will be set to ``vec[idx]``.\n\n\tlocal vec = vector(\"zero\", \"one\", \"two\");\n\tfor ( idx, value in vec )\n\t\tprint idx, value;\n\n- The Supervisor framework now allows better control over where to place\n  additional scripts in the load sequence of new nodes. It previously always\n  loaded such scripts after any other user scripts, which could create pitfalls\n  when users expected their scripts to run last. Scripts placed in\n  ``NodeConfig``'s new ``addl_base_scripts`` and ``addl_user_scripts`` fields\n  will be loaded after the base scripts (and thus before any user scripts) and\n  after any user scripts, respectively. The old ``NodeConfig$scripts` field\n  still adds to the very end and is deprecated.\n\n- Added a new script-level option ``max_changes_per_connection`` to limit the\n  number of ``tunnel_changed`` events that can be sent for a connection. This\n  helps prevent log spam from connections that regularly swap. The option\n  defaults to 5, and can be set to zero do disable the limiting.\n\n- Added a new BIF ``bytestring_to_float`` for converting 4-byte bytestrings to\n  float values.\n\n- Added a new BIF ``pow``.\n\n- Added new bit-shift operators ``<<`` and ``>>`` for use in scripts.\n\n- Added a new BIF ``table_keys`` which returns a ``set`` of keys from a table.\n\n- Added a new BIF ``table_values`` which returns a ``vector`` of keys from a\n  table.\n\n- Added new fields to the Modbus log for the Modbus PDU type, the transaction\n  ID, and the unit ID. See https://github.com/zeek/zeek/pull/2281 for more\n  information.\n\n- Added support for parsing TCP option 27, and fixed validation of lengths for\n  TCP options 28, 29, and 34.\n\n- Added new packet-analyzer to handle the DLT_LINUX_SLL2 PCAP link type.\n\nChanged Functionality\n---------------------\n\n- The SSL analyzer now determines the direction of the SSL/TLS session by examining\n  the packets, and no longer assumes that the connection originator is the client.\n  Due to this, the ``is_orig`` field in all SSL/TLS events was renamed to ``is_client``.\n\n  Furthermore, the ``ssl_history`` now can indicate that the connection was flipped\n  (meaning that it is not in the normal order of the originator is the client) using\n  the ``^`` character. A new ``ssl_connection_flipped`` is raised when the connection\n  is flipped. Furthermore, a ``SSL_unclear_connection_direction`` weird is raised when\n  we cannot determine the connection direction, because both sides of the connection\n  send packets that are associated with being a client/server.\n\n- The default logging directory is now set globally across all log\n  writers through ``Log::default_logdir``.\n\n- Calling `Option::set()` when Zeek is terminating is now a noop and returns `F`.\n  This prevents callbacks into script-land through change handlers when parts\n  of the environment have already been torn down.\n\n- When running in cluster mode, the manager by default now imports metrics from\n  all other cluster nodes and opens port 9911/tcp for Prometheus metrics exposition.\n\n- The ``smb2_file_delete`` event will now be raised for SMB2 ``CREATE`` requests\n  marked with the ``FILE_DELETE_ON_CLOSE`` option.\n\n- Fixed ``bytestring_to_count`` to handle 3-, 5-, 6-, and 7-byte strings.\n\nRemoved Functionality\n---------------------\n\n- The barnyard2 policy scripts have been removed.\n\n- The unified2 analyzer and accompanying scripts have been removed.\n\nDeprecated Functionality\n------------------------\n\n- The ``PDict`` class is now an alias to ``Dictionary`` and has been\n  deprecated. Use ``Dictionary`` directly, passing a pointer type to the\n  template.\n\n- ``LogAscii::logdir`` and per-writer log directories have been deprecated in\n  favor of the new ``Log::default_logdir``.\n\n- The ``HOOK_BRO_OBJ_DTOR`` hook and associated methods have been\n  deprecated. They are replaced by the ``HOOK_OBJ_DTOR`` hook and methods.\n\n- The ``bro_int_t`` and ``bro_uint_t`` types have been deprecated and replaced\n  by ``zeek_int_t`` and ``zeek_uint_t``.\n\n- The ``bro_inet_ntop.h`` and ``bro_inet_ntop.c`` files have been deprecated and\n  replaced by ``zeek_*`` files.\n\n- The ``BRO_PLUGIN_API_VERSION`` has been deprecated and replaced by\n  ``zeek::PLUGIN_API_VERSION``.\n\n- The ``misc/scan.zeek`` script has been marked for removal in Zeek 6.1.  Use\n  github.com/ncsa/bro-simple-scan instead.\n\n- The Supervisor framework's ``NodeConfig$scripts`` field has been deprecated\n  and marked for removal in Zeek 6.1. Use ``NodeConfig$addl_user_scripts``\n  instead.\n\nZeek 5.0.0\n==========\n\nBreaking Changes\n----------------\n\n- Zeek now requires at least CMake version 3.15.0.\n\n- If Zeek is configured with support for included Spicy (the default) we now\n  require at least Flex version 2.6 and its development headers, at least Bison\n  version 3.3, and GCC version 8.3 or Clang version 9.0 or higher.\n\n- The script-land ``union`` and ``timer`` types have been removed. They haven't\n  had any actual semantics backing them for some time and shouldn't have\n  functioned in any useable way. We opted to skip the deprecation cycle for\n  these types for that reason.\n\n- Broker now uses a new network backend with a custom network protocol that is\n  incompatible with the pre-5.0 backend. In practice, this means Zeek 4.x will\n  not be able to exchange events with Zeek 5.x. Going forward, this new backend\n  will allow us to keep the Broker protocol more stable and add new capabilities\n  in a backwards compatible way.\n\nNew Functionality\n-----------------\n\n- The Zeek cluster management framework now supports operational use of\n  single-instance clusters, meaning setups in which all Zeek cluster nodes\n  (manager, workers, etc) reside on a single machine. The framework builds upon\n  Zeek's Supervisor (``-j`` is a requirement) and includes three components:\n\n  (1) A cluster controller, loaded via ``policy/frameworks/management/controller`.\n      The controller is the central management entity for a Zeek cluster. It\n      interacts with one or more agents to enact instructions delivered by a\n      management client. The controller is stateful and can persist cluster\n      state to disk.\n\n  (2) One or more cluster agents, loaded via ``policy/frameworks/management/agent`.\n      Each agent assists the controller in managing the local instance (typically\n      a machine or container) of Zeek cluster nodes. Agents interact with the\n      local Supervisor to control nodes and peer directly with running Zeek\n      nodes via Broker to carry out node-local tasks.\n\n  (3) zeek-client, the cluster management client. A standalone client running\n      outside of Zeek, it's now installed by default, alongside the other\n      executables. The client supports uploading cluster configurations to the\n      controller, deploying them, retrieving them, checking cluster node status,\n      restarting individual cluster nodes, and retrieving the current value(s)\n      of global identifiers in one or more Zeek nodes.\n\n  Controller and agent come pre-configured for single-instance deployments of\n  Zeek clusters, with automated log rotation and archival via Zeek's\n  ``zeek-archiver`` tool. For further details on the framework, please refer\n  to the Zeek documentation.\n\n  zeekctl remains included and offers more knobs and features than the\n  management framework. It remains the recommended solution for multi-machine\n  clusters and those needing rich management capabilities.\n\n- Zeek now automatically warns about unused functions, hooks, and event\n  handlers.  The intent behind these checks is to catch instances where the\n  script writer has introduced typos in names, or has forgotten to remove\n  code that's no longer needed.\n\n  For functions and hooks, \"unused\" means the function/hook is not exported or\n  in the global scope (nor deprecated), and no \"live\" (i.e., not \"unused\")\n  function/hook/event handler calls it.  For event handlers, \"unused\" means\n  that the event engine does not generate the event, nor do any \"live\"\n  function/hook/event handler generates (and the event handler is not\n  deprecated).\n\n  The warnings can occasionally be or inappropriate or incorrect, such as due\n  to the use of conditional code (which Zeek does not try to incorporate\n  into its analysis), or events sent via Broker.  You can mark such instances\n  using the ``&is_used`` attribute to suppress the associated warning.\n  You can also suppress all such warnings using the ``--no-unused-warnings``\n  command-line option.\n\n- A new feature, ``--profile-scripts[=file]`` instructs Zeek to write (upon\n  termination) a profile of every function body to the given file (default:\n  stdout), along with some aggregate profiles. A function body is associated\n  with a function or a BiF (they can only have one), or a hook or event handler\n  (they can have multiple).  The profile is in TSV, quasi-Zeek-log format.  It\n  includes (1) the name of the script body, (2) its location, (3) its type\n  (e.g., \"BiF\" or \"function\"), (4) how many times it was called, (5) the total\n  CPU time that accumulated during its execution, (6) how much of that time was\n  due to execution of its \"children\" (other functions it called), (7) the total\n  memory allocated during its execution (approximately), and (8) how much of\n  that memory was due to its children.  Note that profiling is expensive and may\n  not be suitable for execution on live traffic.\n\n- Zeek now includes support for building Spicy and spicy-plugin as part of\n  Zeek. This feature is enabled by default, and can be turned off by passing the\n  ``--disable-spicy`` flag to ``./configure``.\n\n- Zeek now supports generation and replay of event traces via the new\n  ``--event-trace`` / ``-E`` command-line options. For details, see:\n  https://docs.zeek.org/en/master/quickstart.html#tracing-events\n\n- Zeek now features limited TLS decryption capabilities. This feature is\n  experimental and only works for TLS 1.2 connections that use the\n  TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 ciphersuite. Furthermore Zeek requires\n  access to the pre-master secret of each TLS connection. Typically this\n  functionality will be most useful when analyzing trace-files where the TLS\n  client recorded the key material. For more details and examples how to use\n  this functionality, see the TLS Decryption documentation at\n  https://docs.zeek.org/en/master/frameworks/tls-decryption.html\n\n- Zeek now provides WebSocket support for exchanging events with external\n  clients. To enable it, call `Broker::listen_websocket()`.  Zeek will then\n  start listening on port 9997 for incoming WebSocket connections. Zeek/Broker\n  communicates via JSON messages. See the Broker documentation for a description\n  of the message format expected over these WebSocket connections at\n  https://docs.zeek.org/projects/broker/en/current/web-socket.html.\n\n- Compiling scripts to C++ (via ``-O gen-C++``) is now \"feature complete\", i.e.,\n  the compiler should be able to process any script - other than those\n  potentially affected by ``@if`` conditionals - regardless of which Zeek\n  language constructs it uses.  That said, such compilation remains\n  experimental and only lightly tested.\n\n- ZAM script optimization (``-O ZAM``) now includes some major performance\n  improvements.\n\n- The new --with-gen-zam configure flag and its corresponding GEN_ZAM_EXE_PATH\n  cmake variable allow reuse of a previously built Gen-ZAM code generator. This\n  aids cross-compilation: the Zeek build process normally compiles Gen-ZAM on\n  the fly, but when cross-compiling will do so for the target platform, breaking\n  its use on the host platform. Gen-ZAM is similar to binpac and bifcl in this\n  regard. Like binpac and bifcl, it's now also available as a standalone git\n  repository and hooked into the Zeek distribution as a submodule.\n\n- Zeek now uses the c-ares (https://c-ares.org) library for performing DNS\n  requests, replacing an old custom implementation of a DNS resolver. Switching\n  to this library simplifies the DNS code, adds support for IPv6 lookups, and\n  adds the ability to support more DNS request types in the future.\n\n- Two new BiFs, val_footprint() and global_container_footprints(), offer\n  substitutes for the deprecated val_size() and global_sizes() BiFs.  A value's\n  \"footprint\" is the number of elements it includes either directly or\n  indirectly.  The number is not meant to be precise, but rather comparable:\n  larger footprint correlates with more memory consumption.\n\n- The Supervisor features two new events, ``Supervisor::node_status`` and\n  ``SupervisorControl::node_status``, to notify recipients of the fact that the\n  stem process has (re-)started a node. The events indicate the node's name and\n  its new PID, reflecting the information the stem already shares with the\n  Supervisor core.\n\n- The new ``configure --statedir`` option lets you adjust the installation's\n  persistent state directory. It defaults to ``var/lib`` under your Zeek\n  installation's root directory.\n\n- The ``base/misc/installation.zeek`` script provides your Zeek installation's\n  key directories.\n\n- Zeek now lets you decrement Counting Bloom Filters using the new\n  ``bloomfilter_decrement`` BiF. Furthermore, two Bloom Filters can be\n  intersected using the new ``bloomfilter_intersect`` BiF.\n\nChanged Functionality\n---------------------\n\n- The behavior of the ``=``, ``+=``, and ``-=`` operators has been expanded and\n  unified. It now covers ``{ ... }`` initializer lists, supports cross-product\n  initialization, enables ``+=`` for table, set, vector and pattern values,\n  similarly allows ``-=`` for table and set values, and supports listing\n  multiple sets for ``+=`` initialization. For details, see:\n  https://docs.zeek.org/en/master/script-reference/operators.html#assignment-operators\n\n- The is_num(), is_alpha(), and is_alnum() BiFs now return F for the empty\n  string.\n\n- Type mismatch error messages now print the easier to understand type names,\n  instead of the fully expanded raw type.\n\n- Errors caused by setting a filter at start-up are now more informative about\n  what actually caused the error, including with the default ``ip or no ip``\n  filter.\n\n- Log messages about errors in input files are now more informative about where\n  errors occurred.\n\n- The ``--enable-zeek-client`` configure flag has been removed and is now the\n  default. The new ``--disable-zeek-client`` flag allows users to skip\n  installation of the client.\n\nDeprecated Functionality\n------------------------\n\n- For developers of asynchronous BiFs, or other uses of ``when`` statement\n  triggers, the versions of ``Trigger::Cache`` and ``Trigger::Lookup`` that take\n  ``const CallExpr*`` parameters have been deprecated.  The replacements take\n  ``const void*`` parameters.  Usually all you'll need to do is replace previous\n  uses of ``Frame::GetCall`` with ``Frame::GetTriggerAssoc``.\n\n- The ``--caf-root`` option of ``zeek-config`` was made obsolete by the changes\n  to how we include CAF and has been marked as deprecated.\n\nZeek 4.2.0\n==========\n\nBreaking Changes\n----------------\n\n- The existing ``Tag`` types in C++ (``zeek::Analyzer::Tag``, etc) have been\n  merged into a single type called ``zeek::Tag``. This is a breaking change, and\n  may result in plugins failing to build where they were relying on those types\n  being different for function overloading and such. We attempted to include\n  deprecated versions of the old types, but were unable to do so because of\n  changes to return types from a number of methods. With this change, any uses\n  of the `zeek::*::Tag` types will need to be replaced by `zeek::Tag`.\n\n- The DPD signature for SSL version 2 is no longer enabled by default. SSLv2\n  is basically extinct nowadays - and the protocol has a relatively high probability\n  of matching with random traffic and being misidentified. If you want to enable\n  the SSLv2 dpd signature, you can load the signature from `policy/protocols/ssl/dpd-v2.sig`\n\n  The DPD signature for SSL version 3 and up (including TLS 1.0 and above) now matches\n  for one-sided connections and does not require a reverst match anymore. This prevents\n  missed handshakes, where the client handshake contains a lot of data.\n\nNew Functionality\n-----------------\n\n- We now provide minimal official Docker images for the Zeek project via two\n  repositories on the Docker hub, ``zeekurity/zeek`` and ``zeekurity/zeek-dev``.\n  The former receives all Zeek release versions, with tag ``zeek:latest`` being\n  the most recent. An image corresponding to our latest merge into the master\n  branch is tagged at ``zeek-dev:latest``.\n\n  The images run Debian and provide a full install of the Zeek distribution into\n  ``/usr/local/zeek``. They do not set Zeek-specific entrypoints or provide any\n  particular configuration for operationally running Zeek. To keep the images\n  lightweight they also do not contain a development toolchain as needed for\n  example to build a Zeek plugin. You can add any required system packages in a\n  derived image, or install them directly in the running container.\n\n- Zeek now supports formatting the C++ code using clang-format. Also provided is\n  a configuration for ``pre-commit`` to run clang-format when add new commits via\n  ``git``. More details can be found at https://github.com/zeek/zeek/wiki/Coding-Style-and-Conventions#clang-format.\n\n- Experimental support for speeding up Zeek script execution by compiling\n  scripts to a low-level form called \"ZAM\".  You activate this feature by\n  specifying ``-O ZAM`` on the command line.  See\n  ``src/script_opt/ZAM/README.md`` for more information.\n\n- Improvements for compiling scripts to C++ (an experimental optimization\n  feature introduced in 4.1).  The generated C++ now compiles much faster than\n  previously, though it can still take quite a while when using C++ optimization\n  on large sets of scripts.  You can incrementally compile additional scripts\n  using ``-O add-C++``.  See ``src/script_opt/CPP/README.md`` for details.\n\n- The new flags --optimize-files=/pat/ and --optimize-funcs=/pat/ apply\n  to both ZAM and compile-to-C++ script optimization.  The first instructs\n  Zeek to optimize any functions/hooks/event handlers residing in files\n  matching the given pattern (unanchored).  The second does the same but\n  based on the function name, and with the pattern anchored (so for example\n  --optimize-funcs=foo will optimize any functions named \"foo\" but not\n  those named \"foobar\", or \"MYSCOPE::foo\").  The flags can be combined\n  and can also be used multiple times to specify a set of patterns.\n  If neither flag is used then optimization is applied to all loaded\n  scripts; if used, then only to those that match.\n\n- The ``-uu`` flag for analyzing potentially unused record fields has been\n  removed because, due to other changes in script optimization, keeping it\n  would now require about 1,800 lines of code not otherwise needed.\n\n- The DNS analyzer has initial support for the SVCB and HTTPS types. The new\n  events are ``dns_SVCB`` and ``dns_HTTPS``.\n\n- The ``find_str`` and ``rfind_str`` bifs now support case-insensitive searches.\n\n- Added a new plugin hook for capturing packets that made it through analysis\n  without being processed called ``Plugin::HookUnprocessedPacket``. Currently\n  ARP packets or packets with a valid IP-based transport header are marked as\n  processed. This also adds an event called ``packet_not_processed`` that\n  reports the same packets.\n\n- A new command-line option ``-c`` or ``--capture-unprocessed`` will dump any\n  packets not marked as being processed, similar to the new hook and event\n  above.\n\n- In Zeek plugins, the new cmake function ``zeek_plugin_scripts()`` should be\n  used alongside ``zeek_plugin_cc()`` and related functions to establish\n  dependency tracking between Zeek scripts shipped with the plugin and plugin\n  rebuilds.  Previously, updates to included Zeek scripts didn't reliably\n  trigger a rebuild.\n\n- Added PacketAnalyzer::register_for_port(s) functions to the packet analyzer\n  framework in script-land. This allows a packet analyzer to register a port\n  mapping with a parent analyzer just like any other numeric identifier, while\n  also adding that port to the now-global Analyzer::ports table used by BPF\n  filtering.\n\n- Added AllAnalyzers::Tag enum type that combines the existing Analyzer::Tag,\n  PacketAnalyzer::Tag, and Files::Tags into a single enum. The existing types\n  still exist, but the new type can be used as an argument for\n  functions/hooks/events that need to handle any of the analyzer types.\n\n- Added protocol detection functionality to the packet analyzer framework.\n  Packet analyzers can register for protocol detection using the\n  ``PacketAnalyzer::register_protocol_detection`` script function and implement\n  the ``PacketAnalyzer::DetectProtocol`` method in C++. This allows packet\n  analyzer plugins to detect a protocol via byte matching or other heuristics\n  instead of relying solely on a numeric identifier for forwarding.\n\n- The JSON logger's new LogAscii::json_include_unset_fields flag provides\n  control over how to handle unset \"&optional\" fields. By default it continues\n  to skip such fields entirely. When redef'ing the flag to T it includes such\n  fields, with a \"null\" value. This simplifies data import use cases that\n  require fields to be present at all times, regardless of their value.\n\n- A new external testsuite, https://github.com/zeek/zeek-testing-cluster,\n  focuses on testing the emerging controller framework. It leverages the new\n  official Zeek Docker image for building docker-compose test setups, driven via\n  btest. The GitHub CI setup now includes a workflow that deploys and runs this\n  testsuite.\n\n- The GRE analyzer now supports the Aruba WLAN protocol type.\n\nChanged Functionality\n---------------------\n\n- Zeek now treats non-atomic index types for sets and tables more consistently.\n  Indexing now generally works with any types Zeek's hashing subsystem knows how\n  to serialize, meaning that you can now also index with sets, vectors,\n  patterns, and even tables.\n\n- The traditional TSV Zeek logs are now valid UTF8 by default. It's possible to\n  revert to the previous behavior by setting ``LogAscii::enable_utf_8`` to\n  false.\n\n- The ``SYN_packet`` record now records TCP timestamps (TSval/TSecr) when\n  available.\n\n- The ``init-plugin`` script now focuses purely on dynamic Zeek plugins. It no\n  longer generates Zeek packages. To instantiate new Zeek packages, use the\n  ``zkg create`` command instead.\n\n- The ``ignore_checksums`` options and the ``-C`` command-line option now\n  additionally cause Zeek to accept IPv4 packets that provide a length of zero\n  in the total-length IPv4 header field. When the length is set to zero, the\n  capture length of the packet is used instead.  This can be used to replay\n  traces, or analyze traffic when TCP sequence offloading is enabled on the\n  local NIC - which typically causes the total-length of affected packets to be\n  set to zero.\n\n- The existing tunnel analyzers for AYIYA, Geneve, GTPv1, Teredo, and VXLAN are\n  now packet analyzers.\n\n- C++ unit tests are now compiled in by default and can be disabled by\n  configuring the build with --disable-cpp-tests. We removed the former\n  --enable-cpp-tests configure flag. Unit tests now also work in (static and\n  dynamic) Zeek plugins.\n\n- This release expands the emerging cluster controller framework. Most changes\n  concern internals of the framework. Agent/controller connectivity management\n  has become more flexible: configuration updates pushed by the client can now\n  convey the agent topology, removing the need to hardwire/redef settings\n  in the controller. The new ClusterController::API::notify_agents_ready event\n  declares the management infrastructure ready for use. zeek-client's CLI has\n  expanded to support the new functionality.\n\n  The framework is still experimental and provides only a small subset of\n  ZeekControl's functionality. ZeekControl remains the recommended tool for\n  maintaining your cluster.\n\n- Entries in ``http.log`` now record the original ``HOST`` headers.\n  Previously, they would skip any port specification a header might\n  include.\n\nDeprecated Functionality\n------------------------\n\n- The ``protocol_confirmation`` and ``protocol_violation`` events along with the\n  corresponding ``Analyzer::ProtocolConfirmation` and\n  ``Analyzer::ProtocolViolation`` C++ methods are marked as deprecated. They are\n  replaced by ``analyzer_confirmation`` and ``analyzer_violation`` which can\n  also now be implemented in packet analyzers.\n\n- Declaring a local variable in an inner scope and then accessing it in an\n  outer scope is now deprecated.  For example,\n\n\tif ( foo() )\n\t\t{\n\t\tlocal a = 5;\n\t\t...\n\t\t}\n\tprint a;\n\n  is deprecated.  You can address the issue by hoisting the declaration\n  to the outer scope, such as:\n\n\tlocal a: count;\n\tif ( foo() )\n\t\t{\n\t\ta = 5;\n\t\t...\n\t\t}\n\tprint a;\n\nZeek 4.1.0\n==========\n\nNew Functionality\n-----------------\n\n- Lambda functions can now use capture-list to help specify exactly which local\n  variables from outer scopes need to made available while evaluating the lambda\n  and also the method by which they're made available: deep vs. shallow copy.\n\n  For examples, see: https://docs.zeek.org/en/master/script-reference/types.html#type-function\n\n- Support for VN-Tag protocol headers: the new VN-Tag packet analyzer simply\n  skips past the VN-Tag header, allowing for further analysis of subsequent\n  packet contents.\n\n- Support for decapsulating Geneve packets to process the inner\n  payload, similar in operation to the existing VXLAN support.\n\n- Support for Zeek script \"Reaching Definitions\" (RD) analysis: tracking the\n  extent to which a given variable definition (assignment) can be visible\n  elsewhere in the Zeek script.  The analysis works on local variables in\n  function/event/hook bodies, but not across them.\n\n  The code tracks two forms of RDs, \"minimal\" (what's guaranteed to reach a\n  given point in a function body) and \"maximal\" (what possibly could reach).\n  Upcoming script optimization will use the latter, but the former currently\n  allows identification of places for which a value is used where it\n  does not appear that it will necessarily be defined. Specifying the\n  ``zeek -u`` option will generate warnings for instances where this holds for\n  local variables. Specifying ``zeek -uu`` turns on additional (expensive)\n  analysis to report instances where record fields might be used without\n  having previously been set.\n\n  The ``zeek -u`` option can also identify assigned-to variables that aren't\n  subsequently used (i.e. \"dead code\") and issues a warning.  A new ``is_used``\n  attribute can be used situationally to suppress such warnings.\n\n  The base scripts have some places where the static analysis lacks sufficient\n  power to tell that values are being used safely (guaranteed to have been\n  identified). In order to enable users to employ ``zeek -u`` on their own\n  scripts without being distracted by these instances, this change also\n  includes a new attribute, ``&is_assigned``, which can be associated with a\n  variable or a record field to inform Zeek's analysis that the script writer\n  asserts the value will be set, suppressing the associated warnings.\n\n- A Telemetry API was added to assist in gathering arbitrary runtime\n  metrics and allows export to Prometheus. This is still\n  work-in-progress, preliminary documentation for current, low-level\n  API lives at https://github.com/zeek/zeek/wiki/Telemetry for now.\n\n- Experimental support for translating Zeek scripts to equivalent C++.\n  The generated C++ can then be compiled directly into the ``zeek`` binary,\n  replacing use of the interpreter and producing better runtime performance.\n  See ``src/script_opt/CPP/README.md`` for a guide on how to use this feature.\n\n- Support for more generic session management. The NetSessions class has been\n  renamed to SessionMgr (with the old name marked deprecated). The new\n  class allows plugins to take advantage of session management similar to how\n  Connection objects were handled previously, but without the need to be based\n  on IP-based protocols.\n\n- The logging framework now provides a global policy hook, ``Log::log_stream_policy``.\n  Like the existing filter-level hooks, handlers for the new hook can provide\n  additional processing and veto the log write. The new hook runs once per\n  write, prior to any filter-level policy hooks. Even when it vetoes,\n  filter-level policy hooks still run, but cannot \"un-veto\" the write.\n\n- The ASCII writer gained a new option LogAscii::logdir, which can be used to\n  change the logging output directory.\n\n- Added a ``--include-plugins`` argument to ``configure``. This argument\n  takes a semicolon separated list of paths containing plugins that will be\n  statically built into Zeek.\n\n- Added a ``--plugindir`` argument to ``configure`` to set the\n  installation path for plugins.\n\n- The X509 analyzer now can check if a specific hostname is valid for a\n  certificate. Two new BIFs were added for this, ``x509_check_hostname`` and\n  ``x509_check_cert_hostname``. A new field ``sni_matches_cert`` that tracks\n  this information was added to ``ssl.log``.\n\n- Added new functions to dynamically enable/disable file analyzers:\n\n  - ``global enable_analyzer: function(tag: Files::Tag): bool;``\n  - ``global disable_analyzer: function(tag: Files::Tag): bool;``\n  - ``global analyzer_enabled: function(tag: Files::Tag): bool;``\n\n- Zeek now includes its own BTest tooling in the distribution, enabling other\n  tests (e.g. in Zeek packages) to use it. The ``$PREFIX/share/btest folder``,\n  reported via ``zeek-config --btest_tools_dir``, includes:\n\n  - ``scripts/`` for ``btest-diff`` canonifiers\n  - ``data/`` for data files, including ``random.seed``\n  - ``data/pcaps`` for the test pcaps\n\n  Configuring with ``--disable-btest-pcaps`` suppresses installation of the\n  test pcaps.\n\n- The Supervisor now defaults to starting with a minimal set of Zeek\n  scripts controlled by a new init file, ``base/init-supervisor.zeek``.\n  One may still run it with a larger configuration by loading additional\n  scripts, including ``init-default.zeek``, as always. (Bare mode continues\n  to work as usual, reducing the configuration to a minimum.)\n\n  The ``NodeConfig`` record has two new members, providing additional\n  control over launched nodes.  The ``env`` member allows setting environment\n  variables in the launched process.  The ``bare_mode`` member, an optional\n  boolean, provides control over the bare-mode state of the new node.\n  When not provided, the node inherits the bare-mode status of the\n  Supervisor, and setting the variable enables/disables bare mode.\n\n- Zeek now includes an incomplete, preliminary version of the future\n  cluster controller framework.  Loading ``policy/frameworks/cluster/agent``\n  and/or ``policy/frameworks/cluster/agent`` in a Zeek running with the\n  Supervisor will launch the corresponding cluster management node(s).\n  An experimental management client, `zeek-client`, connects to the\n  controller and lets you issue commands. It requires configuration with\n  ``--enable-zeek-client``.  This does not yet provide a functional\n  substitute for ``zeekctl``, which users should continue to use for now.\n\nChanged Functionality\n---------------------\n\n- The default IP-based transport protocols (UDP, TCP, and ICMP) have been\n  moved to the packet analysis framework. This change allows us to move other\n  analyzers in the future that better align with the packet analysis framework\n  than they do with session analysis.\n\n- The input framework's handling of unset fields (commonly expressed as \"-\")\n  in ingested data is now safer and more consistent. When reading data into\n  records, Zeek now accepts unset fields in the input data only when the\n  corresponding record field is ``&optional``. Unset fields for non-optional\n  fields cause the input line to be skipped. Reading data into tables with complex\n  index types (such as ``table[count, count] of string``) now also skips lines\n  with unset fields, since such indexes require fields to be present.\n\n  Note that this may change the behavior of existing scripts if you have unset\n  fields in your input data.\n\n- The version field in ssh.log is now optional and will not be set if we cannot\n  determine the version that was negotiated by the client and server.\n\n- Add a new field ``email_dest`` to NOTICEs, which defines where to\n  send email to. The email-related NOTICE actions fill this now, and\n  then emails will be sent to all recorded addresses at the end of\n  NOTICE processing. This makes email generation more consistent and\n  extensible.\n\n- Add page and email administrator to mails processed by hostnames extension.\n\n- SSL and X509 handling was significantly overhauled with the goal to make\n  the data that is logged by Zeek more helpful and compact.\n\n  This change means that there are significant changes to the default log files,\n  as well as changes to functionality:\n\n  - ``x509.log`` is now indexed by the sha256 of the certificate, with deduplication\n    being automatically performed. By default, the same certificate is only logged\n    once per day.\n\n    This also means that the file ID is no longer present in X509 log. Similarly,\n    ``ssl.log`` now contains hashes for X509 certificates.\n\n    The hash function that is used for indexing the certificates is changeable by\n    changing the ``X509::hash_function`` option.\n\n    The time period after which a certificate is logged again can be configured by\n    changing ``X509::relog_known_certificates_after``.\n\n    By default deduplication of certificates is done across the entire cluster using\n    broker. If this is not desired due to the higher communication overhead, this\n    behavior can be disabled using ``X509::known_log_certs_use_broker``.\n\n  - X509 certificates are, by default, no longer logged into files.log. This\n    behavior is configurable and the previous default can be restored by changing\n    the ``X509::log_x509_in_files_log`` option.\n\n  - ``x509.log`` now tracks if a certificate was encountered as a end-host certificate\n    or as a client certificate.\n\n  - OCSP logging is now enabled by default.\n\n  - ``ssl.log`` now no longer includes information about the certificate issuer and\n    subject. This information is still available in X509.log. If you need this\n    information in ``ssl.log``, the old behavior can be restored by changing the\n    ``SSL::log_include_server_certificate_subject_issuer`` and\n    ``SSL::log_include_client_certificate_subject_issuer`` configuration options.\n\n  - ``ssl.log`` now contains a ``ssl_history`` field, which tracks which protocol\n    messages were seen in an SSL/TLS connection.\n\n  - We added a policy script ``ssl-log-ext.zeek`` which greatly extends the amount\n    of protocol information logged to SSL.log. The script is not loaded by default.\n\n  - We added a ``disable-certificate-events-known-certs.zeek`` policy script. This script\n    will completely disable X509 events for known certificates over SSL/TLS connections.\n\n    For Zeek installations in settings where you encounter a lot of certificates,\n    this could improve the performance of your installation. Before enabling this\n    script, make sure that you do not use any third-party scripts that depend on the\n    X509 events. The script is not loaded by default.\n\n  - The ICSI SSL Notary script was deprecated. This functionality is superseded by newer\n    approaches, like SCT validation (which is supported by Zeek).\n\n  - ``extract-certs-pem.zeek`` was deprecated - it never really worked in cluster modes.\n    A new policy script, ``log-certs-base64.zeek`` that can be used to log raw certificates\n    was added instead.\n\n- The CT logs listed in ``ct-list.zeek`` are now derived from the list of CT\n  logs that are accepted by Google Chrome. In the past, we allowed the list\n  of all known CT logs. This no longer makes sense since nowadays logs exist that\n  contain, e.g., only outdated or invalid certificates. If the old behavior is\n  desired, you can re-add Logs to ``SSL::ct_logs``.\n\n- The Mozilla CA list was updated to the state of NSS 3.67.\n\n- SQLite was updated to 3.36.0.\n\n- The list of subnets that are considered private addresses was updated to mostly\n  match IANA's list unroutable addresses. This brings it in line with Chrome, the\n  W3C spec, and Python's ipaddress module.\n\nRemoved Functionality\n---------------------\n\n- Support for the RocksDB Broker data store was previously broken and unusable,\n  so all code/options related to it are now removed.\n\n- Support for the ``ENABLE_MOBILE_IPV6`` compiler variable has been removed. Mobile\n  IPv6 is now enabled by default. The ``--enable-mobile-ipv6`` option for\n  ``configure`` now returns a warning that it will be removed in v5.1 and no\n  longer has any effect.\n\n- The logging framework's filter records no longer provide predicate\n  functions. Policy hooks, introduced in Zeek 4, replace them:\n  https://docs.zeek.org/en/master/frameworks/logging.html#filtering-log-records\n\nDeprecated Functionality\n------------------------\n\n- Lambda/closure support: automatic capturing of references to variables\n  outside a lambda's scope is now deprecated.  An explicit capture\n  list which also specifies the desired copy-semantics is now required when\n  writing lambda functions that refer to local variables of an outer scope.\n\n  For examples, see: https://docs.zeek.org/en/master/script-reference/types.html#type-function\n\n- The ``IterCookie`` version of iteration over ``Dictionary`` and ``PDict``\n  objects was marked as deprecated. It was replaced by standard-library\n  compatible iterators. This enables the use of standard constructs such\n  as ranged-for loops to iterate over those objects.\n\n- The ``zeek::util::zeekenv()`` function is deprecated since use of all\n  environment variables prefixed by ``BRO_`` is now removed and calling\n  ``getenv()`` directly with ``ZEEK_`` environment variables can be done.\n\n- ``supervisor_rotation_format_func`` is renamed to ``archiver_rotation_format_func``\n\n- The ``MemoryAllocation()`` function implemented by a number of interfaces\n  is now deprecated. In testing we found that the values returned were mostly\n  incorrect and weren't useful. The ``val_size`` and ``global_sizes`` BIF\n  methods have also both been marked deprecated.\n\nZeek 4.0.0\n==========\n\nNew Functionality\n-----------------\n\n- Added support for EDNS0 Cookie and Keep-Alive options.\n\n- Added new Packet Analysis plugin architecture for parsing packet headers\n  at layers below the existing Session analysis plugins. This allows\n  writing plugins to parse the various parts of a packet header separately,\n  chaining down into other plugins as needed.\n\n- Add ``dce_rpc_request_stub`` and ``dce_rpc_response_stub`` events for\n  accessing the contents of DCE-RPC request/response stub data.\n\n- Add support for log filter policy hooks, which supersede the current\n  log predicates. The hook signature is as follows:\n\n        hook(rec: any, id: Log::ID, filter: Log::Filter);\n\n  The logging manager invokes hooks on each log record. Hooks can veto\n  log records via a break, and modify them if necessary. Log filters\n  inherit the stream-level hook, but can override or remove the hook\n  as needed. The distribution's existing log streams now come with\n  pre-defined hooks that users can add handlers to. The existing\n  predicates are deprecated for removal in 4.1 but continue to work.\n\n  See https://docs.zeek.org/en/master/frameworks/logging.html#filter-log-records\n  for more details.\n\n- Added a ``udp-state`` signature condition to enforce matching against\n  either \"originator\" or \"responder\" flow direction of UDP packets.\n\n- Improvements to capture-loss.zeek:\n\n  - A new option, ``CaptureLoss::initial_watch_interval``.  When restarting a\n    Zeek cluster, one usually wants some immediate feedback as to the health of\n    the monitoring via capture loss. However, you previously needed to wait a\n    full ``CaptureLoss::watch_interval``, which defaults to 15 minutes.  The\n    new option specifies the interval for the first-time report.  So the new\n    default behavior provides stats after 1 minute and then after\n    15 minutes afterward.\n\n  - A new notice type, ``CaptureLoss::Too_Little_Traffic``.\n    If a Zeek process sees less than ``CaptureLoss::minimum_acks`` ACKs in a\n    given interval, this notice gets raised.  This can be a useful diagnostic\n    if, for whatever reason, a Zeek process stops seeing traffic, but\n    capture-loss.zeek would have previously only reported that \"0 gaps and 0\n    ACKs is 0% loss\".\n\n- A new ``zeek_script_args`` variable contains a list of arguments passed\n  to a script.  E.g. either when explicitly executing Zeek like\n  ``zeek -- myscript.zeek -arg1 -arg2``, or when using Zeek to interpret\n  executable scripts that contain a hashbang line at the top like::\n\n    #!/usr/local/zeek/bin/zeek --\n\n- Added a new ``generate_all_events`` bif, which can be used to always raise\n  events, even when they are not used by scripts. This can be used by the\n  ``dump-events.zeek`` script to log all events that happen; the script\n  got a new option to enable this behavior.\n\n- Added new unknown_protocols.log that will log analyzer and protocol pairs\n  via the packet analysis framework for packet protocols that aren't\n  supported by Zeek. It can be enabled by loading the\n  ``policy/misc/unknown-protocols`` script. The script adds a new\n  ``unknown_protocol`` event.\n\n- Added support for DNS resource records LOC, SSHFP, NSEC3PARAM, and custom\n  BIND9 signaling. The associated events are:\n\n  - dns_LOC\n  - dns_SSHFP\n  - dns_NSEC3PARAM\n  - dns_BINDS\n\n- Zeek now supports SSH clients/servers that advertise SSH version 1.99, which\n  is a special version indicating that the server/client supports both SSH2 and\n\tSSH1.\n\n- Added ``count_to_double()`` and ``int_to_double()`` type-conversion BIFs.\n\n- Added these string-processing BIFs:\n\n  - count_substr\n  - find_str\n  - rfind_str\n  - starts_with\n  - ends_with\n  - is_num\n  - is_alpha\n  - is_alnum\n  - ljust\n  - rjust\n  - swap_case\n  - to_title\n  - zfill\n  - remove_prefix\n  - remove_suffix\n\n- Added a new ``Weird::sampling_global_list`` option to configure global\n  rate-limiting of certain weirds instead of per connection/flow.\n\n- Added a ``Pcap::findalldevs()`` for obtaining available network devices.\n\n- Added ``enum_names()`` BIF to return names of an enum type's values\n\n- Added ``type_aliases`` BIF for introspecting type-names of types/values\n\n- Added composite-index support for ``&backend`` (Broker-backed tables).\n  An example of a set with composite index is ``set[string, count, count]``.\n\n- Sumstats now allows manual epochs. If an ``epoch`` interval of 0 is specified,\n  epochs will have to be manually ended by calling ``SumStats::next_epoch``. This\n  can be convenient because epochs can be synced to other events.\n\n- The Zeek distribution now includes Zeek's package manager, zkg. Its\n  code, configuration, and state reside in Zeek's installation tree,\n  as follows:\n\n  - The toplevel script, ``zkg``, installs alongside ``zeek`` in the\n    distribution's ``$prefix/bin`` folder.\n\n  - The config file installs into ``$prefix/etc/zkg/config``. The\n    distribution's zkg command uses it by default, but you can switch\n    to a different one via the ``ZKG_CONFIG_FILE`` environment\n    variable or the ``--configfile`` command-line flag.\n\n  - zkg's package state resides in ``$prefix/var/lib/zkg``. This\n    implies that parallel Zeek installations now automatically\n    separate their package installations.\n\n  These folders have the same ownership and access permissions as the\n  rest of the installation, , meaning that in order to manage zkg\n  packages you need to run zkg as a user with corresponding access.\n  Apart from these location overrides, the bundled zkg installation\n  behaves as usual.\n\n  local.zeek now contains a (commented out) ``@load`` statement you\n  can use to source zkg's package state automatically.\n\n  zkg's own Python module resides in ``zeek/python/zeekpkg`, in the\n  installation tree's library folder. See below for additional changes\n  around the library folder.\n\n  zkg has external Python module dependencies. The Zeek configuration\n  does not verify whether these dependencies are met. A new warning\n  message at zkg launch flags missing packages and how to install them\n  (e.g. via pip).\n\n  Configuring with ``--disable-zkg`` disables the zkg inclusion. You\n  can continue to install and use zkg independently. You're also free\n  to use the config file in ``$prefix/etc/zkg/config`` with other zkg\n  installations.\n\n  The zkg source tree resides in ``auxil/package-manager`` as an\n  additional Git submodule.\n\n- Added a new ``ssl_probable_encrypted_handshake_message`` event, which\n  is raised for encrypted TLS 1.3 handshake messages.\n\nChanged Functionality\n---------------------\n\n- ``NetControl::DROP`` had 3 conflicting definitions that could potentially\n  be used incorrectly without any warnings or type-checking errors.\n  Such enum redefinition conflicts are now caught and treated as errors,\n  so the ``NetControl::DROP`` enums had to be renamed:\n\n  - The use as enum of type ``Log::ID`` is renamed to ``NetControl::DROP_LOG``\n\n  - The use as enum of type ``NetControl::CatchReleaseInfo`` is renamed to\n    ``NetControl::DROP_REQUESTED``\n\n  - The use as enum of type ``NetControl::RuleType`` is unchanged and still\n    named ``NetControl::DROP``\n\n- The extract_email_addrs_vec() BIF now returns all occurrences of emails,\n  including duplicates, with preserved order of occurrence.  This seems like\n  the original/documented intent of the function, but the previous\n  implementation did not preserve ordering or duplicates.\n\n- The Dictionary implementation is replaced (no API changes).  The new version\n  uses clustered hashing, a variation of Robinhood / Open Addressing hashing.\n  This implementation generally performs better and utilizes less memory\n  than the previous one.  A detailed explanation of the implementation is here:\n  https://jasonlue.github.io/algo/2019/08/20/clustered-hashing.html\n\n- The ``p`` fields of ``Cluster::Node`` records now use a\n  ``&default=0/unknown`` attribute with ``0/unknown`` meaning that the node is\n  not pre-configured to listen for incoming connections from other cluster\n  nodes.\n\n- The ``|x|`` operator, where ``x`` is an expression with an integral result,\n  no longer performs an implicit coercion of that result into a signed\n  ``int`` type.  This was actually the behavior before Zeek 3.0 as well, but\n  the attempt to prevent mistakes that easily result from integer literals in\n  Zeek being unsigned like ``|5 - 9|`` causing an overflow/wraparound and\n  yielding a very large number is not generally consistent since overflows\n  are still generally able to happen in other ways and also in other contexts\n  besides just the absolute-value operator.  So the preference was to revert\n  to a behavior that favors consistency.  For reference, see\n  https://github.com/zeek/zeek/pull/251#issuecomment-713956976\n\n- The Zeek installation tree is now more consistent in using a ``lib64/``\n  (rather than ``lib/``) subdirectory for platforms where that's the common\n  convention.  If the old hardcoded ``lib/`` path exists while installing Zeek\n  4.0 and the new subdirectory differs, the old ``lib/`` remains untouched.\n  This clutters the installation but is safe: the new installation does not\n  require the old location, and any files you might require still in the old\n  tree (e.g. ZeekControl plugins) remain available.\n\n  Due to Zeek 4's reorganization of the installation tree we recommend\n  a clean-slate install when possible.\n\n- Python modules installed with the Zeek distribution now reside in a\n  common ``zeek/python`` directory below the library path (such as\n  ``lib64/zeek/python``) and no longer assume ZeekControl. The\n  ``zeek/python/zeekctl`` folder now contains only ZeekControl's own\n  functionality, ``zeek/python/zeekpkg`` contains zkg's Python module, and\n  Broker's Python bindings live in ``zeek/python/broker``. ``zeek-config\n  --python_dir`` now reports this new ``zeek/python`` folder. Several\n  new configure options allow you to customize the Python folder location,\n  depending on your needs.\n\n  As with the new libdir, no cleanup of the existing Python tree occurs.\n\n- Continued renaming/namespacing of many classes into either ``zeek`` or\n  ``zeek::detail`` namespaces as already explained in Zeek 3.2's release notes.\n  Deprecation warnings should generally help notify plugin developers of these\n  changes.\n\n- Changed HTTP DPD signatures to trigger analyzer independent of peer state.\n\n  This is to avoid missing large sessions where a single side exceeds\n  the DPD buffer size. It comes with the trade-off that now the analyzer\n  can be triggered by anybody controlling one of the endpoints (instead\n  of both).  For discussion, see https://github.com/zeek/zeek/issues/343.\n\n- TLS 1.3 support was improved in several ways:\n\n  * In the past, some TLS 1.3 sessions were misidentified as using session\n    resumption when, in fact, they were not resumed. This was caused by\n    the TLS session ID which no longer has any meaning in TLS 1.3. This was\n    fixed.\n\n  * Similarly, in the past, TLS 1.3 sessions that use TLS 1.3 PSKs for\n    session resumption were not marked as resumed. This also was fixed.\n\n  * The way in which session establishment for TLS 1.3 is performed was\n    rewritten. This causes the ``ssl_encrypted_data`` event to be correctly\n    raised; in the past this did not work for some sessions. A new\n    ``ssl_probable_encrypted_handshake_message`` event was added that is\n    raised for encrypted TLS 1.3 handshake packets.\n\n  * In the same vein, hello retry requests in TLS 1.3 should now always\n    be handled correctly; in the past this only happened in some cases.\n\n    Please note: When a connection uses Hello Retry requests you will see\n    two client hello and two server hello events in a single connection.\n\n    This happened in the past, but may become more common now; this might\n    trigger unexpected behavior in your scripts.\n\nRemoved Functionality\n---------------------\n\n- The counter type was removed. This type was never fully functional/used\n  anywhere.\n\n- Removed the PRI_PTR_COMPAT_INT, PRI_PTR_COMPAT_UINT, and PRI_SOURCE_ID\n  macros. There are no deprecation warnings for these because they were C\n  macros. Use the PRIdPTR and PRIuPTR macros from the standard library\n  instead.\n\n- The  ``successful_connection_remove`` and ``connection_successful`` events\n  as well as ``connection$successful`` field that were added in Zeek v3.1.0 are\n  now removed.  They were found to be unintuitive along with having unresolved\n  corner cases.  The original goal/intent to avoid the overhead and scalability\n  issues with every new protocol-analysis adding a new\n  ``connection_state_remove`` handler can now be resolved with a less-confusing\n  approach: see the ``Conn::register_removal_hook`` function.\n\n- Python 2 is no longer supported.  Python 3.5 is the new minimum requirement.\n\n- CMake versions less than 3.5 are no longer supported.\n\n- CAF version 0.18 is now required and, by default, that is bundled with\n  the Zeek distribution and will get built unless overridden with the\n  ``--with-caf=`` configuration option.\n\n- ``server_appdata`` and ``client_appdata`` were removed from ``SSL::Info``.\n  These variables were only used internally, and did not give a correct counts\n  in all circumstances.\n\nDeprecated Functionality\n------------------------\n\n- Marked the Continuation.h and PacketDumper.h files as deprecated. The code\n  contained within them is unused by Zeek.\n\n- ``Type::GetAliases()`` and ``Type::AddAlias()`` are deprecated, use\n  ``Type::Aliases()`` and ``Type::RegisterAlias()``.\n\n- The ``ssh1_server_host_key`` event's modulus and exponent parameters,\n  *e* and *p*, were named in misleading way (*e* is the modulus)\n  and now deprecated in favor of the new *modulus* and *exponent* parameters.\n\n- The logging framework's log filter predicates are now deprecated. Please\n  use the new policy hooks instead.\n\nZeek 3.2.0\n==========\n\nNew Functionality\n-----------------\n\n- X509 Certificate caching:\n\n  Zeek now caches certificates if they have (by default) been encountered\n  more than 10 times in 62 seconds. Information for cached certificates is\n  retained; if the certificate is encountered again it does not have to\n  be re-parsed and already existing information is used to raise the events.\n\n  This should especially help with performance in environments where the\n  same certificates are seen very often.\n\n  Certificate caching is very configurable; it is possible to disable the\n  feature, change the time intervals or even suppress X509 events.\n  For details see ``scripts/base/files/x509/main.zeek``.\n\n- Add parsing support for Remote Desktop Protocol UDP Transport Extension\n  (RDPEUDP versions 1 and 2).  This primarily only adds \"rdpeudp\" to\n  connection record service fields when an RDPEUDP session handshake is\n  detected, but also provides a few other events related to the RDPEUDP\n  connection establishment.\n\n- Add the ``udp_content_ports`` configuration option. Any port added to\n  this set will cause the ``udp_contents`` event to be raised.\n\n- Add the ``udp_content_delivery_ports_use_resp`` option which can be used\n  to specify how the destination port for the ``udp_content_delivery_ports_orig``\n  and ``udp_content_delivery_ports_orig`` options is determined. The current value\n  keeps behavior as it was in previous versions of Zeek.\n\n- Add a file signature to identify ISO9660 disk images (application/x-iso9660-image)\n\n- Add file signature to identify Python bytecode (application/x-python-bytecode)\n\n- Events and hooks are now allowed to have multiple, alternate prototype\n  declarations.  This allows for extending event/hook parameters in a way that\n  won't break an existing user's handlers and also allows users to define their\n  own custom event/hook prototypes that consume a subset of the parameters\n  (convenience of typing/memory/etc).  This feature is documented in detail\n  here: https://docs.zeek.org/en/current/script-reference/types.html#type-event\n\n- Add ``flags`` parameters to ``rdp_connect_request``,\n  ``rdp_negotiation_response``, and ``rdp_negotiation_failure`` events.\n\n- ``Reporter::conn_weird`` now correctly handles weirds for expired connections,\n  for which no connection state information is available in the core anymore. These\n  cases will raise the new ``expired_conn_weird`` event.\n\n- Broker Store table synchronization (experimental).\n\n  Zeek now supports synchronizing tables/sets across clusters using a backing Broker\n  store. The same feature also allows persistent storage of data in tables/sets\n  over Zeek restarts. This feature is implemented using the new ``&backend`` attribute.\n\n  To synchronize a table over a cluster, you can, e.g., use:\n\n    global t: table[string] of count &backend=Broker::MEMORY;\n\n  This feature is documented in detail here:\n\n    https://docs.zeek.org/en/current/frameworks/broker.html#broker-store-backed-zeek-tables-for-data-synchronization-and-persistence\n\n  Note: this feature is experimental and the syntax/specifics can change in the future.\n\nChanged Functionality\n---------------------\n\n- Several C++ functions have been changed to pass smart pointers\n  (``class IntrusivePtr<>``) instead of raw pointers.  This makes the\n  code more robust.  External plugins may need to be updated to this\n  API change.\n\n- BIFs that use @ARG@, @ARGS@, or @ARGC@ may break since their type has\n  changed: BIF arguments are now passed as a ``std::vector<IntrusivePtr<Val>>``\n  rather than a ``val_list`` (i.e. ``List<Val*>``).\n\n- RocksDB support for Broker data stores is now opt-in instead of automatically\n  detected and used at configuration-time.  Use the ``--enable-rocksdb`` and\n  ``--with-rocksdb=`` flags to opt-in.\n\n- At the C++ level, a large number of functions had their return\n  values and/or arguments changed to use ``bool`` types instead of\n  ``int``. This includes some virtual methods, which may cause build\n  failures in plugins that were overriding those methods. Those\n  plugins will need to be updated to match these API changes. To make\n  sure to catch changes you need to make to your plugin, double-check\n  that all virtual method implementations use \"override\".\n\n- Many C++ classes were marked \"final\" which also has some performance benefits\n  due to devirtualization optimizations.\n\n- Data members of many C++ classes/structs were reordered to achieve better\n  packing and smaller memory footprint.\n\n- \"using namespace std\" was removed from the Zeek header files; Zeek now always\n  explicitly specifies std when using STL functionality in headers. This may\n  necessitate small changes in external plugins, if they relied on the using\n  statement in Zeek headers.\n\n- The ``connection_external`` event was removed. This functionality that could\n  raise this event (injecting connections via broccoli) was removed a while ago;\n  the event handler served no purpose anymore.\n\n- Reorganize the file signatures to break them out into more groups.  This may\n  break scripts that had been explicitly loading any signature files that moved.\n\n- The DCE/RPC operation string of \"NetrLogonSamLogonWithFlags\" has been\n  corrected from \"NetrLogonSameLogonWithFlags\".\n\n- ``AsRecord()`` and ``AsNonConstRecord()`` have changed to return\n  ``std::vector<IntrusivePtr<Val>>*``.\n\n- ``AsVector()`` has changed to return ``std::vector<IntrusivePtr<Val>>*``.\n\n- Moved a large number of classes from the global namespace into either the\n  ``zeek`` or ``zeek::detail`` namespace. See https://github.com/zeek/zeek/issues/266\n  for the rationale behind these changes. Most types that were moved and functions\n  that used them have been marked as deprecated and will generate compiler\n  warnings if used (a few exceptions will not generate compiler warnings,\n  but the Deprecated Functionality section below will mention those\n  ones specifically).\n\n  This includes a number of renames to classes, removing 'Bro' from their\n  names. Deprecation warnings should notify plugin developers of these\n  name changes.\n\nRemoved Functionality\n---------------------\n\n- The fmt() function which takes a va_list argument is replaced, use\n  the new vfmt() function for equivalent functionality.  The former is\n  deprecated because overloading it with the variadic fmt() function\n  can cause the unintended overload to be chosen depending on how the\n  platform implements va_list.\n\nDeprecated Functionality\n------------------------\n\n- The ``plugin::Plugin::HookCallFunction()`` method is deprecated.  Note\n  that compilers will not emit a deprecation warning, but the replacement\n  method to now use is called ``HookFunctionCall`` and uses ``IntrusivePtr``\n  arguments and return value.\n\n- The ``Func::Call(val_list*, ...)`` method is now deprecated.  Use ``Invoke()``\n  instead which takes a ``zeek::Args`` (``std::vector<IntrusivePtr<Val>>``).\n  There's also a variadic template for ``Invoke()`` that forwards all arguments\n  into a ``zeek::Args`` for you.\n\n- The ``EventMgr::QueueEvent()`` and EventMgr::QueueEventFast()`` methods\n  are now deprecated, use ``EventMgr::Enqueue()`` instead.\n\n- The ``Connection::ConnectionEvent()``, ``Connection::Event()``, and\n  ``Connection::ConnectionEventFast()`` methods are now deprecated, use\n  ``Connection::EnqueueEvent()`` instead.\n\n- The ``file_analysis::File::FileEvent()`` methods taking ``val_list``\n  arguments are now deprecated, use the overload that takes a ``zeek::Args``\n  instead.\n\n- The ``analyzer::Analyzer::ConnectionEvent()``, ``analyzer::Analyzer::Event``,\n  and ``analyzer::Analyzer::ConnectionEventFast()`` methods are deprecated, use\n  ``analyzer::Analyzer::EnqueueConnEvent()`` instead.\n\n- All ``val_mgr`` methods starting with \"Get\" are deprecated, use the new\n  ``val_mgr`` methods that return ``IntrusivePtr``.\n\n- ``Connection::BuildConnVal()`` is deprecated, use ``Connection::ConnVal()``.\n\n- ``Analyzer::BuildConnVal()`` is deprecated, use ``Analyzer::ConnVal()``.\n\n- ``BifEvent::generate_`` functions are deprecated, use ``zeek::BifEvent::enqueue_``.\n\n- ``binpac::bytestring_to_val()`` is deprecated, use ``binpac::to_stringval()``.\n\n- ``binpac::string_to_val()`` is deprecated, use ``StringVal`` constructor.\n\n- Returning ``Val*`` from BIFs is deprecated, return ``IntrusivePtr`` instead.\n\n- Various methods of converting protocol structures, like IP or packet headers,\n  to associated ``Val`` type are now deprecated, the deprecation warning\n  message will advise what new method to use instead.\n\n- Various methods of ``Tag`` classes are deprecated with the warning\n  message advising what new method to use instead.\n\n- The ``utf16_bytestring_to_utf8_val()`` function is deprecated, use\n  ``utf16_to_utf8_val()`` instead.\n\n- ``RecordType::FieldType()`` is deprecated, use ``RecordType::GetFieldType()``\n\n- ``BroType::HasField()`` and ``BroType::FieldType()`` are deprecated, use\n  the methods of ``RecordType`` directly.\n\n- ``BroType::YieldType()`` is deprecated, use ``BroType::Yield()``.\n\n- ``ID::AsType()`` is deprecated, use ``ID::IsType()`` and ``ID::GetType()``.\n\n- ``ID::Type()`` is deprecated, use ``ID::GetType()``.\n\n- ``ID::ID_Val()`` is deprecated, use ``ID::GetVal()``.\n\n- ``internal_type()`` is deprecated, use ``zeek::id::find_type()``.\n\n- ``internal_val()`` and ``internal_const_val()`` are deprecated, use\n  ``zeek::id::find_val()`` or ``zeek::id::find_const()``.\n\n- ``internal_func()`` is deprecated, use ``zeek::id::find_func()``.\n\n- ``opt_internal_val()`` is deprecated, use ``lookup_ID()`` or\n  ``zeek::id::find_val()``.\n\n- ``Val::Type()`` is deprecated, use ``Val::GetType``.\n\n- Most global type/value pointers in NetVar.h are deprecated, but one can\n  still always perform the lookup themselves.\n\n- ``Scope::Lookup()`` is deprecated, use ``Scope::Find()``.\n\n- All generated ``BroType*`` names in the ``BifType::`` namespaces are\n  deprecated, but there's an equivalent name in ``zeek::BifType::`` of\n  ``IntrusivePtr`` type to use instead.\n\n- All generated ``BifConst::`` names are deprecated, but there's an\n  equivalent name now in ``zeek::BifCont::``, and changed to ``IntrusivePtr``\n  if the old name was some ``Val*`` type.\n\n- Constructors for ``Val`` types that take a ``BroType*`` are all generally\n  deprecated, with alternatives that instead take an ``IntrusivePtr`` argument.\n\n- ``FuncType::Args()`` is deprecated, use ``FuncType::Params()``.\n\n- ``FuncType::ArgTypes()`` is deprecated, use ``FuncType::ParamList()``.\n\n- ``RecordVal::Assign(int, Val*)`` is deprecated, use the overload taking\n  ``IntrusivePtr``.\n\n- ``RecordVal::Lookup(int)`` is deprecated, use ``RecordVal::GetField(int)``.\n\n- ``RecordVal::LookupWithDefault(int)`` is deprecated, use\n  ``RecordVal::GetFieldOrDefault(int)``.\n\n- ``RecordVal::Lookup(const char*, bool)`` is deprecated, use either\n  ``RecordVal::GetField()`` or ``RecordVal::GetFieldOrDefault()``.\n\n- ``TableVal::Assign`` methods taking raw ``Val*`` are deprecated, use the\n  overloads taking ``IntrusivePtr``.\n\n- ``TableVal::Lookup()`` is deprecated, use ``TableVal::Find()`` or\n  ``TableVal::FindOrDefault()``.\n\n- ``VectorVal::Assign`` and ``Insert`` methods taking raw ``Val*`` are\n  deprecated, use the methods that take ``IntrusivePtr``.\n\n- ``VectorVal::Lookup()`` is deprecated, use ``VectorVal::At()``.\n\n- The file analysis/analyzer API has deprecated methods taking raw\n  ``RecordVal*`` for analyzer arguments and replaced those with methods\n  taking ``IntrusivePtr``.\n\n- The ``Val(double, TypeTag)`` constructor is deprecated, use either\n  ``IntervalVal()``, ``TimeVal()`` or ``DoubleVal()`` constructors.\n\n- The \"BroString.h\" file is deprecated, use \"ZeekString.h\"\n\n- The str_split() BIF is deprecated, use str_split_indices().  Note\n  that the former returns a vector with indices starting at 1 while the\n  later returns a vector with indices starting at 0.\n\n- The ``icmp_conn`` parameter of ICMP events is deprecated, there's an\n  alternate version with an ``icmp_info`` parameter to use instead.\n  The ``icmp_conn`` record passed to ICMP events has always been re-used\n  amongst all events within an ICMP \"connection\", so the\n  ``itype``, ``icode``, ``len``, and ``hlim`` fields as inspected in\n  handlers never appears to change even if the underlying packet data\n  has different values for those fields.  However, it's not known if\n  anyone relied on that behavior, so the new ``icmp_info`` record is\n  introduced with the more-expected behavior of being created and\n  populated for each new event.  It also removes the orig_h/resp_h\n  fields since those are redundant with what's already available in\n  the connection parameter.\n\n- External plugins should include Zeek header files like\n  ``#include <zeek/Foo.h>`` instead of ``#include <Foo.h>``.  The later\n  style is considered deprecated.  Reliance on ``zeek-config --include_dir``\n  to contain ``$prefix/include/zeek`` is also deprecated: its replacement\n  output is expected to be just ``$prefix/include``, with it currently\n  outputting both paths, delimited by a colon, during the deprecation period.\n\nZeek 3.1.0\n==========\n\nNew Functionality\n-----------------\n\n- Add a new supervisor framework that enables Zeek to operate clusters\n  of processes itself without any external help.\n\n  The Supervisor framework provides an entirely new deployment mode\n  for Zeek, one that supervises a set of Zeek processes that are meant\n  to be persistent. A Supervisor automatically revives any process\n  that dies or exits prematurely and also arranges for an ordered\n  shutdown of the entire process tree upon its own termination. This\n  Supervisor mode for Zeek provides the basic foundation for process\n  configuration/management that could be used to deploy a Zeek cluster\n  similar to what ZeekControl does, but is also simpler to integrate\n  as a standard system service.\n\n  This mode is still experimental and will evolve over time. The\n  command-line argument of ``-j`` toggles Zeek to run in \"Supervisor\n  mode\" to allow for creation and management of child processes. If\n  you're going to test this, please note that you will need some\n  custom script code to configure the processes you want Zeek to run.\n  See the documentation for more information:\n  https://docs.zeek.org/en/stable/frameworks/supervisor.html\n\n- Add a new option, ``dpd_late_match_stop``, which can be used in conjunction\n  with the option ``dpd_match_only_beginning`` and the new event\n  ``protocol_late_match`` to help annotate the conn.log with a field\n  to speculate on the protocol/service in cases where the DPD buffer\n  was already exhausted and can't analyze the full connection anymore,\n  but where there was still a late signature match.  A new script,\n  ``policy/protocols/conn/speculative-service.zeek``, was added as an\n  example of how to perform this tuning and add a \"speculative_service\"\n  field to conn.log, but it's not loaded by default.\n\n- There is now a new ``tcp_options`` event that is raised for each TCP header\n  that contains options.\n\n- Added a new option, ``Log::print_to_log`` that can be set to automatically\n  redirect the output from \"print\" statements to a real log stream (e.g.\n  instead of writing to stdout).\n\n- There is now a new ``&on_change`` attribute that can be used to be notified\n  of changes to tables and sets.\n\nChanged Functionality\n---------------------\n\n- A C++17-capable compiler and CMake 3.0+ are now required to compile Zeek\n\n- The backwards-compatibility wrappers & workarounds introduced in 3.0\n  for the \"Bro to Zeek rename\" have either changed their operation, or in some\n  cases been removed. Generally, anything that reported a\n  naming-related warning in 3.0 now aborts with a corresponding error\n  message. In cases where 3.0 silently continued to accept old names,\n  3.1 now reports warnings. Most importantly, that's loading of\n  scripts with \".bro\" endings, which are now flagged and should be\n  renamed.\n\n- Broker has switched versions for the underlying CAF communication\n  library from 0.16 to 0.17. CAF has changed its wireformat between\n  those versions, which means that previous Broker and Zeek versions\n  won't be able to connect to the new ones. In other words, all Zeek\n  instances, as well as other Broker clients, need to upgrade at the\n  same time. In case of version mismatches, Broker now reports better\n  error messages to point out the problem.\n\n- The key type of ``Known::service_store`` has changed to\n  ``Known::AddrPortServTriplet`` and ``Known::services`` is now a table\n  instead of just a set.\n\n- The DNS class name for Hesiod in the ``DNS::classes`` table is now spelled\n  correctly as \"C_HESIOD\" instead of \"C_HESOD\".  For reference, this\n  class name string may appear in the dns.log file or in any custom\n  script logic that inspects the ``qclass`` field of ``DNS::Info``\n  after a ``dns_request`` event.\n\n- The configuration input reader now ignores trailing spaces at the end of\n  configuration lines.\n\n- The tcp_option event is now correctly raised.\n\n- The base scripts shipped with Zeek now use the new\n  ``successful_connection_remove`` event instead of\n  ``connection_state_remove`` where possible (when the logic doesn't\n  pertain to unestablished TCP connections). There's a performance\n  benefit to this switch, but it may potentially break custom scripts\n  that depended on accessing or modifying state via specific\n  ``&priority`` ordering of ``connection_state_remove`` event\n  handlers. However, since most of Zeek's base scripts previously just\n  used that event with the intention of writing a finalized log as the\n  last thing executed for a given connection, and the new\n  ``successful_connection_remove`` event handlers all run after\n  ``connection_state_remove``, it's not likely this change to the base\n  scripts causes any incompatibility with user scripts.\n\n  There's also a new event called ``connection_successful`` and a new\n  ``connection`` record field named \"successful\" to help indicate this\n  new property of connections.\n\n- The JSON output formatters now use the RapidJSON library. This\n  improves their performance considerably over the library that was\n  previously used. Output from the formatters remains nearly\n  identical.\n\n- The ``decompose_uri`` function no longer raises an error when parsing\n  URIs with an empty port number (e.g. ``http://example.org:/``). Instead,\n  the ``portnum`` component of the returned ``URI`` value is left\n  uninitialized.\n\n- Replace old ``select``-based IO loop with a new architecture that doesn't\n  spin checking for active IO sources. The new architecture now waits for the\n  the sources to actively notify it when activity occurs and only processes\n  data once it's ready. This helps heavily reduce the CPU usage on idle\n  network connections. This includes a couple of breaking changes:\n\n  - Only a single packet source is allowed to be specified from the\n    command-line now. If you pass combinations of multiple ``-r`` and/or\n    ``-i`` flags, Zeek will return an error at startup.\n  - The IOSource API changed fairly wildly. The ``GetFds()`` and\n    ``NextTimestamp`` methods no longer exist. If you had previously\n    implemented a custom IOSource, you will need to look at the new API\n    and make changes to your code to accommodate it. This does not include\n    packet sources, which should remain functional with little to no\n    changes, since the entirety of the changes should be in ``PktSrc``.\n\n- Remove a large number of headers from being included by various files across\n  the entire code base, which leads to a sizeable build time improvement. This\n  set of changes has the potential to cause plugins to not build anymore. The\n  fixes for this potential breakage should just be a matter of including the\n  necessary headers in the plugin code.\n\nRemoved Functionality\n---------------------\n\n- Removed the ``current_conns_extern`` field from the ConnStats record\n  type. Zeek only maintains a single timer manager now, and without the\n  manager tags that came with multiple timer managers, we don't track\n  whether a connection is external anymore.\n\nDeprecated Functionality\n------------------------\n\n- The C++ API typedefs for int{8,16,32,64} and uint{8,16,32,64} are deprecated\n  in favor of the real <cstdint> types they alias.  E.g. use int8_t instead of\n  int8.\n\n- The C++ API functions \"safe_snprintf\" and \"safe_vsnprintf\" are deprecated.\n  Use \"snprintf\" and \"vsnprintf\" instead.\n\nZeek 3.0.0\n==========\n\nNew Functionality\n-----------------\n\n- Added support for DNSSEC resource records RRSIG, DNSKEY, DS, NSEC, and NSEC3.\n  The associated events are:\n\n  - dns_RRSIG\n  - dns_DNSKEY\n  - dns_DS\n  - dns_NSEC\n  - dns_NSEC3\n\n- Added support for parsing and logging DNS SPF resource records.\n  A new ``dns_SPF_reply`` event is also available.\n\n- Zeek's Plugin framework now allows a patch version.  If a patch version is not\n  provided, it will default to 0.  To specify this, modify the plugin\n  Configuration class in your ``src/Plugin.cc`` and set\n  ``config.version.patch``.  Note that the default plugin skeleton\n  includes a unit test whose Baseline has the plugin version number in\n  it and that will now fail due to the version number now including a\n  patch number.  For those that want to keep the unit test, simply adapt\n  the unit test/baseline to include the new plugin patch number.\n\n- The default http.log not includes a field for the HTTP request Origin header.\n\n- Support for decapsulating VXLAN tunnels.\n\n- The for-loop syntax now allows for iterating over key-value pairs of tables.\n  Previously, a separate lookup within the loop was required to obtain the\n  value at a given index/key, but now this works::\n\n      local t: table[count] of string = table();\n      t[1] = \"hello\";\n      t[55] = \"goodbye\";\n\n      for ( key, value in t )\n          print key, value;\n\n- Added options for controlling the source path/prefix for Input and\n  Intel framework files:\n\n  - InputAscii::path_prefix\n  - InputBinary::path_prefix\n  - Intel::path_prefix\n\n- Support for NFLOG link-layer type.\n\n- Support for some SMB 3.x features\n\n  - An ``smb2_transform_header`` event is raised after parsing\n    TRANSFORM_HEADER structures associated with encrypted messages.\n\n  - The ``SMB2::NegotiateResponse`` record now contains\n    ``negotiate_context_count`` and ``negotiate_context_values`` fields\n    containing capability information found in an SMB 3.1.1 dialect's\n    negotiation message.\n\n- Added a new hook, ``Intel::filter_item``, to assist in filtering and\n  removal of intelligence items that are about to be inserted.\n\n- Add support for SMB filenames in the intel framework.\n\n- Added a new event for weirdness found via file analysis: ``file_weird``.\n\n- The conn.log \"history\" field supports a new character 'G' or 'g'\n  (capital for originator, lowercase responder) to indicate a content\n  gap in the TCP stream.  These are recorded logarithmically.\n\n- The ``ZEEK_DNS_RESOLVER`` environment variable now controls\n  the DNS resolver to use by setting it to an IPv4 or IPv6 address.  If\n  not set, then the first IPv4 address from /etc/resolv.conf gets used.\n\n- The ``/<re>/i`` convenience syntax for case-insensitive patterns is now\n  also allowed when specifying patterns used in signature files.\n\n- New RDP functionality.\n\n  - New events:\n    - rdp_client_network_data\n    - rdp_client_security_data\n    - rdp_client_cluster_data\n    - rdp_native_encrypted_data\n\n  - Add a new \"client_channels\" field to rdp.log based on data parsed from\n    the Client Network Data (TS_UD_CS_NET) packet.  The channel list is also\n    available in the new ``rdp_client_network_data`` event.\n\n- Add parsing support for TLS 1.3 pre-shared key extension.  This info\n  is available in the events: ``ssl_extension_pre_shared_key_client_hello``\n  and ``ssl_extension_pre_shared_key_server_hello``.\n\n- Added/re-wrote support for NTP.\n\n  - Parsing support for modes 1-7, with parsed structures available in\n    the ``ntp_message`` event.\n\n  - An ntp.log is produced by default, containing data extracted from\n    NTP messages with modes 1-5.\n\n- Add support for vector slicing operations.  For example::\n\n    local v = vector(1, 2, 3, 4, 5);\n    v[2:4] = vector(6, 7, 8);        # v is now [1, 2, 6, 7, 8, 5]\n    print v[:4];                     # prints [1, 2, 6, 7]\n\n- Add support for paraglob, a fairly quick data structure for matching a string\n  against a large list of patterns. For example::\n\n\tlocal v1 = vector(\"*\", \"d?g\", \"*og\", \"d?\", \"d[!wl]g\");\n\tlocal p1 = paraglob_init(v1);\n\tprint paraglob_match(p1, \"dog\");\n\n- An ``expire_func`` for a table with a multi-value-index will now unroll\n  the index and take one argument for each index value. For example, for a\n  ``table[string,string] of count`` the expire function signature is:\n\n  function(t: table[string, string] of count, s: string, s2: string): interval\n\n- Zeek's anonymous functions now capture their closures by reference.\n  This means that they can use and modify variables from the scope\n  that they were generated in. For example:\n\n      local n = 3;\n      local f = function() { n += 1; };\n      f();\n      print n; # prints 4\n\n  These anonymous functions can also be serialized over Broker with\n  their closures. In order to be serialized over Broker the receiving\n  script needs to have an identical version of the function declared.\n  For the above example, a receiving script would need to have\n  declared a function\n\n      local name = function() { n += 1; };\n\n  to be able to receive the senders function over Broker.\n\n  Functions with closures can still use the variables they have\n  captured even after they have left the scope that they were declared\n  in. For example, a simple generator function like the one below\n  works as expected.\n\n      local make_adder = function(n: count): function(m: count): count\n          {\n          return function (m: count): count\n              {\n              return n + m;\n              };\n          };\n\n      print make_adder(3)(5); # prints 8\n\n      local three = make_adder(3);\n      print three(5); # prints 8\n\n- Add ``LogAscii::enable_utf_8`` option to allow valid utf8 sequences\n  to be written directly into the ASCII logs without any escaping.\n\n- Add parsing, analysis, and logging support for MQTT protocol v3.1/v3.1.1.\n  This is not enabled by default, use ``@load policy/protocols/mqtt`` to\n  use the new MQTT analysis support.\n\n- Zeek now supports duration thresholding on connections, similarly to how it supports\n  byte and packet thresholds.\n\n  - New events:\n    - ConnThreshold::duration_threshold_crossed\n    - conn_duration_threshold_crossed\n\n  - New functions:\n    - ConnThreshold::set_duration_threshold\n    - ConnThreshold::delete_duration_threshold\n    - set_current_conn_duration_threshold\n    - get_current_conn_duration_threshold\n\nChanged Functionality\n---------------------\n\n- The following executable names have changed (the old names will\n  continue to work, but emit a deprecation warning):\n\n  - ``bro`` is now ``zeek``\n\n  - ``bro-config`` is now ``zeek-config``\n\n  - ``broctl`` is now ``zeekctl``\n\n  - ``bro-cut`` is now ``zeek-cut``\n\n- BroControl has been completely renamed to ZeekControl.  Many installation\n  directories and files with \"broctl\" in their name have been changed\n  to use \"zeekctl\" instead.  It's expected this has been done in a way\n  that's backwards compatible with previous Bro installations.  E.g.\n  if you made customizations to the ``broctl.cfg`` file of a previous\n  installation, installing the newer Zeek version over it will retain that\n  file and even symlink the new ``zeekctl.cfg`` to it.\n\n- The default install prefix is now ``/usr/local/zeek`` instead of\n  ``/usr/local/bro``.  If you have an existing installation that used\n  the previous default and are still using the new default when upgrading,\n  we'll crate ``/usr/local/zeek`` as a symlink to ``/usr/local/bro``.\n  Certain subdirectories will also get similar treatment: ``share/bro``,\n  ``include/bro``, and ``lib/bro``.\n\n- ``$prefix/share/bro/site/local.bro`` has been renamed to\n  ``local.zeek``.  If you have a ``local.bro`` file from a previous\n  installation, possibly with customizations made to it, the new\n  version of Zeek will install a ``local.zeek`` file that is a symlink\n  to the preexisting ``local.bro``.  In that case, you may want to\n  just copy ``local.bro`` into the new ``local.zeek`` location to\n  avoid confusion, but things are otherwise meant to work properly\n  without intervention.\n\n- All scripts ending in ``.bro`` that ship with the Zeek source tree have\n  been renamed to ``.zeek``.\n\n- The search logic for the ``@load`` script directive now prefers files\n  ending in ``.zeek``, but will fallback to loading a ``.bro`` file if\n  it exists.  E.g. ``@load foo`` will first check for a ``foo.zeek``\n  file to load and then otherwise ``foo.bro``.  Note that\n  ``@load foo.bro`` (with the explicit ``.bro`` file suffix) prefers\n  in the opposite order: it first checks for ``foo.bro`` and then\n  falls back to a ``foo.zeek``, if it exists.\n\n- The for-loop index variable for vectors has been changed from\n  'int' to 'count' type.  It's unlikely this would alter/break any\n  script behavior unless they were explicitly inspecting the variable's\n  type (and there's typically no reason to do that).\n\n- The startup/initialization behavior has changed such that any errors\n  encountered while processing the ``bro_init()`` event will cause the\n  process to terminate rather than continue on the main run loop.\n\n- The ``dns_state`` field within ``connection`` records has changed: the\n  ``pending_queries`` and ``pending_replies`` fields are now ``&optional``,\n  and there is a new field ``pending_query`` that is populated before\n  ``pending_queries``.  If you have scripts that access the ``pending_queries``\n  or ``pending_replies`` fields, they will need to be updated.\n  This change was made to improve performance.\n\n- The ternary operator (\"<expr> ? <alt1> : <alt2>\") now enforces that\n  if \"<alt1>\" and \"<alt2>\" are both records, they are of the same\n  type. It was always assumed that they were, but code might have\n  still worked even if not.\n\n- The \"orig_fuids\", \"orig_filenames\", \"orig_mime_types\" http.log fields\n  as well as their \"resp\" counterparts are now limited to having\n  \"HTTP::max_files_orig\" or \"HTTP::max_files_resp\" entries, which are 15\n  by default.  The limit can also be ignored case-by-case via the\n  \"HTTP::max_files_policy\" hook.\n\n- The binpac library is now only compiled as a shared library by default.\n  To revert back to compiling only a static library, there's the\n  ``--enable-static-binpac`` configure option.\n\n- The Broker C++ API has some breaking changes, see it's own NEWS file for\n  details on how to migrate old code.\n\n- Some Weirds associated with generic binpac parsing exceptions in analyzers\n  that didn't otherwise handle them (like syslog, modbus, dnp3) are now\n  a ProtocolViolation instead\n\n- An \"addl\" parameter was added to the ``flow_weird`` and ``net_weird`` events\n  for describing additional information about the weird.  The ``conn_weird``\n  event already had such a parameter.\n\n- Weird names that contained variable content and may result in an unbounded\n  number of weird names have been renamed to remove the variable content\n  (which has been made available in the \"addl\" field of ``conn_weird``,\n   ``flow_weird``, or ``net_weird`` events):\n\n    - \"unknown_dce_rpc_auth_type_%d\" -> unknown_dce_rpc_auth_type\n    - \"gtp_invalid_info_element_%d\" -> gtp_invalid_info_element\n    - \"unknown_netbios_type:\" 0x%x -> unknown_netbios_type\n    - \"excess_netbios_hdr_len\" (%d > %d) -> excess_netbios_hdr_len\n    - \"deficit_netbios_hdr_len\" (%d > %d) -> deficit_netbios_hdr_len\n    - \"bad_RPC_program (%d)\" -> bad_RPC_program\n    - \"unknown_MOUNT_request(%u)\" -> unknown_MOUNT_request\n    - \"unknown_NFS_request(%u)\" -> unknown_NFS_request\n    - \"RPC resync: discard %d bytes\\n\" -> RPC_resync\n    - \"RPC_message_too_long (%d64)\" -> RPC_message_too_long\n    - \"socks5_unsupported_authentication_method_%d\" -> socks5_unsupported_authentication_method\n    - \"socks5_unsupported_authentication_%d_%d\" -> socks5_unsupported_authentication\n    - \"ssh_unknown_kex_algorithm=%s\" -> ssh_unknown_kex_algorithm\n    - \"Encountered unknown type in server name ssl extension: %d\" -> ssl_ext_unknown_server_name_type\n    - \"UDP_datagram_length_mismatch(%d!=%d)\" -> UDP_datagram_length_mismatch\n    - \"OPENSSL Could not parse OCSP request (fuid %s)\" -> openssl_ocsp_request_parse_error\n    - \"OPENSSL Could not parse OCSP response (fuid %s)\" -> openssl_ocsp_response_parse_error\n    - \"Could not parse X509 certificate (fuid %s)\" -> x509_cert_parse_error\n    - \"Certificate with invalid BasicConstraint. fuid %s\" -> x509_invalid_basic_constraint\n    - \"Could not parse subject alternative names. fuid %s\" -> x509_san_parse_error\n    - \"DNS-field does not contain an IA5String. fuid %s\" -> x509_san_non_string\n    - \"Weird IP address length %d in subject alternative name. fuid %s\" -> x509_san_ip_length\n    - \"Could not parse time in X509 certificate (fuid %s) -- UTCTime has wrong length\" -> x509_utc_length\n    - \"Could not parse UTC time in non-YY-format in X509 certificate (x509 %s)\" -> x509_utc_format\n    - \"Could not parse time in X509 certificate (fuid %s) -- Generalized time has wrong length\" -> x509_gen_time_length\n    - \"Invalid time type in X509 certificate (fuid %s)\" -> x509_invalid_time_type\n    - \"Could not parse time in X509 certificate (fuid %s) -- additional char after time\" -> x509_time_add_char\n    - \"Could not parse time in X509 certificate (fuid %s) -- not enough bytes remaining for offset\" -> x509_time_offset_underflow\n    - \"Could not parse time in X509 certificate (fuid %s) -- unknown offset type\" -> x509_time_offset_type\n    - \"X509::GetExtensionFromBIO: %s\" -> x509_get_ext_from_bio\n    - \"unknown_mobility_type_%d\" -> unknown_mobility_type\n    - \"unknown_routing_type_%d\" -> unknown_routing_type\n    - \"unknown_protocol_%d\" ->  unknown_protocol\n    - \"unknown_gre_version_%d\" -> unknown_gre_version\n    - \"unknown_gre_protocol_%u16\" -> unknown_gre_protocol\n\n- The \"missed_bytes\" field of conn.log can be calculated slightly differently\n  in some cases: ACKs that reveal a content gap, but also come at\n  the end of a connection (in a FIN or RST) are considered unreliable\n  and aren't counted as true gaps.\n\n- The Broxygen component, which is used to generate our Doxygen-like\n  scripting API documentation has been renamed to Zeekygen.  This likely has\n  no breaking or visible changes for most users, except in the case one\n  used it to generate their own documentation via the ``--broxygen`` flag,\n  which is now named ``--zeekygen``.  Besides that, the various documentation\n  in scripts has also been updated to replace Sphinx cross-referencing roles\n  and directives like \":bro:see:\" with \":zeek:see:\".\n\n- The catch-and-release and unified2 scripts are no longer loaded by\n  default.  Because there was a performance impact simply from loading\n  them and it's unlikely a majority of user make use of their features,\n  they've been moved from the scripts/base/ directory into\n  scripts/policy/ and must be manually loaded to use their\n  functionality.  The \"drop\" action for the notice framework is likewise\n  moved since it was implemented via catch-and-release.  As a result,\n  the default notice.log no longer contains a \"dropped\" field.\n\n  If you previously used the catch-and-release functionality add this:\n\n      @load policy/frameworks/netcontrol/catch-and-release\n\n  If you previously used Notice::ACTION_DROP add:\n\n      @load policy/frameworks/notice/actions/drop\n\n  If you previously used the Unified2 file analysis support add:\n\n      @load policy/files/unified2\n\n- The default value of ``peer_description`` has changed from \"bro\"\n  to \"zeek\".  This won't effect most users, except for the fact that\n  this value may appear in several log files, so any external plugins\n  that have written unit tests that compare baselines of such log\n  files may need to be updated.\n\n- The \"remote_ip\" field of \"addr\" type was removed from radius.log and\n  replaced with a field named \"tunnel_client\" of \"string\" type.  The\n  reason for this is that the Tunnel-Client-Endpoint RADIUS attribute\n  this data is derived from may also be a FQDN, not just an IP address.\n\n- The ``ssl_server_hello`` event's ``server_random`` parameter has been\n  changed to always include the full 32-byte field from the\n  ServerHello.  Previously a 4-byte timestamp and 28-byte random data\n  were parsed separately as some TLS protocol versions specified a\n  separate timestamp field as part of the full 32-byte random sequence.\n\n- The namespace used by all the builtin plugins that ship with Zeek have\n  changed to use \"Zeek::\" instead of \"Bro::\".\n\n- Any Broker topic names used in scripts shipped with Zeek that\n  previously were prefixed with \"bro/\" are now prefixed with \"zeek/\"\n  instead.\n\n  In the case where external applications were using a \"bro/\" topic\n  to send data into a Bro process, a Zeek process still subscribes\n  to those topics in addition to the equivalently named \"zeek/\" topic.\n\n  In the case where external applications were using a \"bro/\" topic\n  to subscribe to remote messages or query data stores, there's no\n  backwards compatibility and external applications must be changed\n  to use the new \"zeek/\" topic.  The thought is this change will have\n  low impact since most data published under \"bro/\" topic names is\n  intended for use only as a detail of implementing cluster-enabled\n  versions of various scripts.\n\n  A list of the most relevant/common topic names that could potentially\n  be used in external applications to consume/query remote data that\n  one may need to change:\n\n  - store names\n    - bro/known/services\n    - bro/known/hosts\n    - bro/known/certs\n\n  - cluster nodes\n    - bro/cluster/<node type>\n    - bro/cluster/node/<name>\n    - bro/cluster/nodeid/<id>\n\n  - logging\n    - bro/logs/<stream>\n\n- The ``resp_ref`` argument was removed from the ``ocsp_response_bytes``\n  event. ``resp_ref`` was not used by anything in the codebase and could not be\n  passed to any other functions for further processing. The remainder of the\n  ``ocsp_response_bytes`` is unchanged.\n\n- For performance reasons, processing of notices is now always\n  performed by the node on which the notice is raised rather than\n  the centralized Manager node.  This has potential incompatibilities\n  for those that relied on global state for notice policy processing.\n  It also introduces an expected race condition that may cause multiple\n  notices of the same kind that are generated within a short timespan\n  of each other on separate cluster nodes to all be logged rather\n  than suppressed and de-duplicated into a single notice.\n\n\n- to_json is now a bif, no longer a script. Loading base/utils/json.zeek is no\n  longer necessary and has been deprecated. to_json should yield much better, always\n  valid json. There are some small differences in output; unnecessary spaces are removed\n  and port values are rendered differently, now including the port and the protocol.\n\n- The output of the JSON logger now uses an external library to generate json. There\n  are small changes to the output; most visibly double numbers are now rounded slightly\n  differently. The way in which port values are rendered does _not_ change for JSON logs.\n\n- The C++-layer List, Queue, and Dict types have changed from using macros to\n  templates as well as some other API changes.\n\n  - Range-based for-loops are now supported\n\n  - The loop_over_queue macro is now removed\n\n  - PList is now a template instead of a macro, so any \"PList(T)\" usages in\n    external code should now use \"PList<T>\"\n\n  - PDict is now a template instead of a macro, so any \"PDict(T)\" usages in\n    external code should now use \"PDict<T>\"\n\n  - Generally some methods used to assume containers were only using integer\n    or pointer types, so semantics may now be slightly different to\n    either avoid copying or unsafely returning arbitrary T types by value.\n    E.g. List::remove_nth and List::get can no longer return a \"null\" value\n    when the provided index is out of range, so they assert instead, and\n    Queue::pop methods do not return a value at all (one must check for\n    a non-empty container before removing an element).\n\n- Google Perftools (tcmalloc) is no longer used by default on Linux\n  systems if it's found during the configuration process.\n  Use the --enable-perftools configuration flag to use tcmalloc.\n  The --disable-perftools flag is also no longer provided since\n  there's no longer any case in which tcmalloc will be used by default.\n\n- There now is a maximum number of protocol violations that can be raised by an analyzer\n  before it is disabled; the default is set to 5. This behavior is customizable using\n  ``DPD::max_violations`` and ``DPD::ignore_violations``.\n\n- The scan detection script, ``policy/misc/scan``, is no longer loaded by\n  default in ``site/local.zeek`` due to it frequently causing performance issues.\n\nRemoved Functionality\n---------------------\n\n- A number of functions that were deprecated in version 2.6 or below and completely\n  removed from this release. Most of the functions were used for the old communication\n  code.\n\n    - ``find_ip_addresses``\n    - ``cat_string_array``\n    - ``cat_string_array_n``\n    - ``complete_handshake``\n    - ``connect``\n    - ``decode_base64_custom``\n    - ``disconnect``\n    - ``enable_communication``\n    - ``encode_base64_custom``\n    - ``get_event_peer``\n    - ``get_local_event_peer``\n    - ``join_string_array``\n    - ``listen``\n    - ``merge_pattern``\n    - ``request_remote_events``\n    - ``request_remote_logs``\n    - ``request_remote_sync``\n    - ``resume_state_updates``\n    - ``send_capture_filter``\n    - ``send_current_packet``\n    - ``send_id``\n    - ``send_ping``\n    - ``set_accept_state``\n    - ``set_compression_level``\n    - ``sort_string_array``\n    - ``split1``\n    - ``split_all``\n    - ``split``\n    - ``suspend_state_updates``\n    - ``terminate_communication``\n    - ``split``\n    - ``send_state``\n    - ``checkpoint_state``\n    - ``rescan_state``\n    - ``log_file_name``\n    - ``open_log_file``\n    - ``disable_print_hook``\n\n- The following events were deprecated in version 2.6 or below and are completely\n  removed from this release:\n\n    - ``ssl_server_curve``\n    - ``dhcp_ack``\n    - ``dhcp_decline``\n    - ``dhcp_discover``\n    - ``dhcp_inform``\n    - ``dhcp_nak``\n    - ``dhcp_offer``\n    - ``dhcp_release``\n    - ``dhcp_request``\n    - ``remote_state_access_performed``\n    - ``remote_state_inconsistency``\n    - ``remote_connection_established``\n    - ``remote_connection_closed``\n    - ``remote_connection_handshake_done``\n    - ``remote_event_registered``\n    - ``remote_connection_error``\n    - ``remote_capture_filter``\n    - ``remote_log_peer``\n    - ``remote_log``\n    - ``finished_send_state``\n    - ``remote_pong``\n    - ``software_version_found``\n    - ``software_unparsed_version_found``\n    - ``software_parse_error``\n    - ``print_hook``\n    - ``interconn_stats``\n    - ``interconn_remove_conn``\n    - ``root_backdoor_signature_found``\n    - ``napster_signature_found``\n    - ``kazaa_signature_found``\n    - ``gaobot_signature_found``\n    - ``ftp_signature_found``\n    - ``gnutella_signature_found``\n    - ``http_signature_found``\n    - ``irc_signature_found``\n    - ``telnet_signature_found``\n    - ``ssh_signature_found``\n    - ``rlogin_signature_found``\n    - ``smtp_signature_found``\n    - ``http_proxy_signature_found``\n    - ``backdoor_stats``\n    - ``backdoor_remove_conn``\n    - ``dns_full_request``\n    - ``non_dns_request``\n\n- The following types/records were deprecated in version 2.6 or below and are\n  removed from this release:\n\n    - ``peer_id``\n    - ``event_peer``\n    - ``packet``\n    - ``software``\n    - ``software_version``\n\n- The following configuration options were deprecated in version 2.6 or below and are\n  removed from this release:\n\n    - ``max_remote_events_processed``\n    - ``forward_remote_events``\n    - ``forward_remote_state_changes``\n    - ``enable_syslog``\n    - ``remote_trace_sync_interval``\n    - ``remote_trace_sync_peers``\n    - ``remote_check_sync_consistency``\n    - ``log_rotate_interval``\n    - ``log_max_size``\n    - ``log_encryption_key``\n    - ``state_dir``\n    - ``state_write_delay``\n    - ``ssl_ca_certificate``\n    - ``ssl_private_key``\n    - ``ssl_passphrase``\n    - ``suppress_local_output``\n    - ``irc_servers``\n    - ``interconn_min_interarrival``\n    - ``interconn_max_interarrival``\n    - ``interconn_max_keystroke_pkt_size``\n    - ``interconn_default_pkt_size``\n    - ``interconn_stat_period``\n    - ``interconn_stat_backoff``\n    - ``interconn_endp_stats``\n    - ``backdoor_stat_period``\n    - ``backdoor_stat_backoff``\n    - ``backdoor_endp_stats``\n    - ``chunked_io_buffer_soft_cap``\n\n- The following constants were used as part of deprecated functionality in version 2.6\n  or below and are removed from this release:\n\n    - ``PEER_ID_NONE``\n    - ``REMOTE_LOG_INFO``\n    - ``REMOTE_SRC_CHILD``\n    - ``REMOTE_SRC_PARENT``\n    - ``REMOTE_SRC_SCRIPT``\n\n- The deprecated script ``policy/protocols/smb/__load__.bro`` was removed.\n  Instead of ``@load policy/protocols/smb`` use ``@load base/protocols/smb``.\n\n- Broccoli, which had been deprecated in version 2.6 and was no longer built by default\n  was removed from the source tree.\n\n- Support for the &persistent, &synchronized, &mergeable, &encrypt, &rotate_interval,\n  and &rotate_size attributes, which were deprecated in Bro 2.6, was removed. The ``-g``\n  command-line option (dump-config) which relied on this functionality was also removed.\n\n- Functionality for writing state updates for variables with the\n  &synchronized attribute was removed. This entails the\n  ``-x`` command-line option (print-state) as well as the\n  ``capture_state_updates`` function.\n\n- Removed the BroControl ``update`` command, which was deprecated in Bro 2.6.\n\n- Functionality for writing/reading binary event streams was\n  removed. This functionality relied on the old communication code\n  and was basically untested. The ``-R`` command-line option (replay)\n  as well as the ``capture_events`` function were removed.\n\n- Removed p0f (passive OS fingerprinting) support. The version of\n  p0f shipped with zeek was ancient, probably did not give\n  any reliable support anymore and did not offer a clear\n  upgrade path. The ``OS_version_found`` event as well as the\n  ``generate_OS_version_event`` configuration option were removed.\n\n- Removed the ``max_files_in_cache`` option and the associated\n  \"file caching\" feature it's associated with. That feature allowed\n  one to open many scripting-layer ``file`` objects and potentially\n  bypass the operating system's resource limits for open files.\n  This is typically not necessary and it's a problem that is more\n  appropriately addressed at the system configuration level.\n\n- Removed the InterConn analyzer.\n\n- Removed the BackDoor analyzer.\n\n- Removed ``List::sortedinsert`` from the C++ API.\n\nDeprecated Functionality\n------------------------\n\n- The ``str_shell_escape`` function is now deprecated, use ``safe_shell_quote``\n  instead.  The later will automatically return a value that is enclosed\n  in double-quotes.\n\n- The ``bro_init``, ``bro_done``, and ``bro_script_loaded`` events are now\n  deprecated, use ``zeek_init``, ``zeek_done``, and\n  ``zeek_script_loaded`` instead.  Any existing event handlers for\n  the deprecated versions will automatically alias to the new events\n  such that existing code will not break, but will emit a deprecation\n  warning.\n\n- The ``bro_is_terminating`` and ``bro_version`` function are deprecated and\n  replaced by functions named ``zeek_is_terminating`` and ``zeek_version``.\n\n- The ``List::insert`` method from the C++ API is deprecated, use\n  ``List::push_front`` instead.\n\nBro 2.6\n=======\n\nNew Functionality\n-----------------\n\n- Bro has switched to using the new Broker library for all its\n  communication. Broker's API has been completely redesigned (compared\n  to the version in 2.5), and much of its implementation has been\n  redone. There's a new script-level \"broker\" framework that\n  supersedes the old \"communication\" framework, which is now\n  deprecated.  All scripts that ship with Bro have been ported to use\n  Broker.  BroControl has likewise been ported to use Broker.\n\n  For more about the new Broker framework, see\n  https://www.bro.org/sphinx-git/frameworks/broker.html.  There's also\n  a guide there for porting existing Bro scripts to Broker. For more\n  about Broker itself, including its API for external applications,\n  see https://bro-broker.readthedocs.io/en/stable\n\n  When using BroControl, the function of proxies has changed with\n  Broker. If you are upgrading and have configured more than one proxy\n  currently, we recommend going back down to a single proxy node now.\n  That should be fine unless you are using custom scripts doing\n  significant data distribution through the new cluster framework.\n\n  A side effect of the switch to using Broker is that each Bro node now runs\n  as a single process instead of two.  Also, the number of file descriptors\n  being polled in Bro's main event loop has been reduced (1 per worker\n  versus 5).  This should increase the number of workers one can\n  use before reaching the common 1024 file descriptor limitation of\n  \"select()\".\n\n- Bro now has new \"is\" and \"as\" script operators for dynamic\n  type-checking and casting.\n\n    - \"v as T\" casts a value v into a value of type T, assuming that's\n      possible (if not, it triggers a runtime error).\n\n    - \"v is T\" returns a boolean indicating whether value v can be\n      casted into type T (i.e., if true then \"v as T\" will succeed).\n\n    This casting supports three cases currently: (1) a value of\n    declared type \"any\" can be casted to its actual underlying type;\n    (2) Broker values can be casted to their corresponding script\n    types; and (3) all values can be casted to their declared types\n    (i.e., a no-op).\n\n    Example for \"any\"::\n\n        # cat a.bro\n        function check(a: any)\n            {\n            local s: string = \"default\";\n\n            if ( a is string )\n                s = (a as string);\n\n            print fmt(\"s=%s\", s);\n            }\n\n        event bro_init()\n            {\n            check(\"Foo\");\n            check(1);\n            }\n\n        # bro a.bro\n        s=Foo\n        s=default\n\n- The existing \"switch\" statement got extended to now also support switching by\n  type rather than value. The new syntax supports two type-based versions\n  of \"case\":\n\n    - \"case type T: ...\": Take branch if operand can be casted to type T.\n\n    - \"case type T as x: ... \": Take branch if operand can be casted\n      to type T, and make the casted value available through ID \"x\".\n\n    Multiple types can be listed per branch, separated by commas.\n    However, one cannot mix cases with expressions and types inside a\n    single switch statement.\n\n    Example::\n\n        function switch_one(v: any)\n            {\n            switch (v) {\n            case type string:\n                    print \"It's a string!\";\n                    break;\n\n            case type count as c:\n                    print \"It's a count!\", c;\n                    break;\n\n            case type bool, type addr:\n                    print \"It's a bool or address!\";\n                    break;\n\n            default:\n                    print \"Something else!\";\n                    break;\n            }\n            }\n\n- Bro now comes with a new \"configuration framework\" that allows\n  updating script options dynamically at runtime. This functionality\n  consists of three larger pieces working together:\n\n  - Option variables: The new \"option\" keyword allows variables to be\n    declared as runtime options. Such variables cannot be changed\n    using normal assignments. Instead, they can be changed using the\n    new function \"Config::set_value\".  This function will automatically\n    apply the change to all nodes in a cluster.  Note that options can also\n    be changed using the new function \"Option::set\", but this function will\n    not send the change to any other nodes, so Config::set_value should\n    typically be used instead of Option::set.\n\n    Various redef-able constants in the standard Bro scripts have\n    been converted to runtime options.  This change will not affect any\n    user scripts because the initial value of runtime options can still be\n    redefined with a \"redef\" declaration.  Example::\n\n        option testvar = \"old value\";\n        redef testvar = \"new value\";\n\n    It is possible to \"subscribe\" to an option through\n    \"Option::set_change_handler\", which will trigger a handler callback\n    when an option changes. Change handlers can optionally modify\n    values before they are applied by returning the desired value, or\n    reject updates by returning the old value. Priorities can be\n    specified if there are several handlers for one option.\n\n    Example script::\n\n        option testbool: bool = T;\n\n        function option_changed(ID: string, new_value: bool): bool\n            {\n            print fmt(\"Value of %s changed from %s to %s\", ID, testbool, new_value);\n            return new_value;\n            }\n\n        event bro_init()\n            {\n            print \"Old value\", testbool;\n            Option::set_change_handler(\"testbool\", option_changed);\n            Option::set(\"testbool\", F);\n            print \"New value\", testbool;\n            }\n\n  - Script-level configuration framework: The new script framework\n    base/framework/config facilitates reading in new option values\n    from external files at runtime. The format for these files looks\n    like this::\n\n        [option name][tab/spaces][new variable value]\n\n    Configuration files to read can be specified by adding them to\n    \"Config::config_files\".\n\n    Usage example::\n\n        redef Config::config_files += { \"/path/to/config.dat\" };\n\n        module TestConfig;\n\n        export {\n            option testbool: bool = F;\n        }\n\n    The specified file will now be monitored continuously for changes, so\n    that writing \"TestConfig::testbool T\" into ``/path/to/config.dat`` will\n    automatically update the option's value accordingly.\n\n    The configuration framework creates a ``config.log`` that shows all\n    value changes that took place.\n\n  - Config reader: Internally, the configuration framework uses a new\n    type of input reader to read such configuration files into Bro.\n    The reader uses the option name to look up the type that variable\n    has, converts the read value to the correct type, and then updates\n    the option's value. Example script use::\n\n        type Idx: record {\n            option_name: string;\n        };\n\n        type Val: record {\n            option_val: string;\n        };\n\n        global currconfig: table[string] of string = table();\n\n        event InputConfig::new_value(name: string, source: string, id: string, value: any)\n            {\n            print id, value;\n            }\n\n        event bro_init()\n            {\n            Input::add_table([$reader=Input::READER_CONFIG, $source=\"../configfile\", $name=\"configuration\", $idx=Idx, $val=Val, $destination=currconfig, $want_record=F]);\n            }\n\n- Support for OCSP and Signed Certificate Timestamp. This adds the\n  following events and BIFs:\n\n  - Events:\n\n    - ocsp_request\n    - ocsp_request_certificate\n    - ocsp_response_status\n    - ocsp_response_bytes\n    - ocsp_response_certificate\n    - ocsp_extension\n    - x509_ocsp_ext_signed_certificate_timestamp\n    - ssl_extension_signed_certificate_timestamp\n\n  - Functions:\n\n    - sct_verify\n    - x509_subject_name_hash\n    - x509_issuer_name_hash\n    - x509_spki_hash\n\n- The SSL scripts provide a new hook \"ssl_finishing(c: connection)\"\n  to trigger actions after the handshake has concluded.\n\n- New functionality has been added to the TLS parser, adding several\n  events. These events mostly extract information from the server and client\n  key exchange messages. The new events are:\n\n  - ssl_ecdh_server_params\n  - ssl_dh_server_params\n  - ssl_server_signature\n  - ssl_ecdh_client_params\n  - ssl_dh_client_params\n  - ssl_rsa_client_pms\n\n  Since \"ssl_ecdh_server_params\" contains more information than the old\n  \"ssl_server_curve\" event, \"ssl_server_curve\" is now marked as deprecated.\n\n- The \"ssl_application_data\" event was retired and replaced with\n  \"ssl_plaintext_data\".\n\n- Some SSL events were changed and now provide additional data. These events\n  are:\n\n  - ssl_client_hello\n  - ssl_server_hello\n  - ssl_encrypted_data\n\n  If you use these events, you can make your scripts work on old and new\n  versions of Bro by wrapping the event definition in an \"@if\", for example::\n\n    @if ( Version::at_least(\"2.6\") || ( Version::number == 20500 && Version::info$commit >= 944 ) )\n    event ssl_client_hello(c: connection, version: count, record_version: count, possible_ts: time, client_random: string, session_id: string, ciphers: index_vec, comp_methods: index_vec)\n    @else\n    event ssl_client_hello(c: connection, version: count, possible_ts: time, client_random: string, session_id: string, ciphers: index_vec)\n    @endif\n\n- Functions for retrieving files by their ID have been added:\n\n  - Files::file_exists\n  - Files::lookup_File\n\n- New functions in the logging API:\n\n  - Log::get_filter_names\n  - Log::enable_stream\n\n- HTTP now recognizes and skips upgraded/websocket connections.  A new event,\n  \"http_connection_upgrade\", is raised in such cases.\n\n- A new hook, HTTP::sqli_policy, may be used to whitelist requests that\n  could otherwise be counted as SQL injection attempts.\n\n- Added a MOUNT3 protocol parser\n\n  - This is not enabled by default (no ports are registered and no\n    DPD signatures exist, so no connections will end up attaching the\n    new Mount analyzer).  If it were to be activated by users, the\n    following events are available:\n\n    - mount_proc_null\n    - mount_proc_mnt\n    - mount_proc_umnt\n    - mount_proc_umnt_all\n    - mount_proc_not_implemented\n    - mount_reply_status\n\n- Added new NFS events:\n\n  - nfs_proc_symlink\n  - nfs_proc_link\n  - nfs_proc_sattr\n\n- The SMB scripts in ``policy/protocols/smb`` are now moved into\n  ``base/protocols/smb`` and loaded/enabled by default.  If you previously\n  loaded these scripts from their ``policy/`` location (in local.bro or\n  other custom scripts) you may now remove/change those although they\n  should still work since ``policy/protocols/smb`` is simply a placeholder\n  script that redirects to the new ``base/`` location.\n\n- Added new SMB events:\n\n  - smb1_transaction_secondary_request\n  - smb1_transaction2_secondary_request\n  - smb1_transaction_response\n\n- Bro can now decrypt Kerberos tickets, and retrieve the authentication from\n  them, given a suitable keytab file.\n\n- Added support for bitwise operations on \"count\" values.  '&', '|' and\n  '^' are binary \"and\", \"or\" and \"xor\" operators, and '~' is a unary\n  ones-complement operator.\n\n- The '&' and '|' operators can apply to patterns, too.  p1 & p2 yields\n  a pattern that represents matching p1 followed by p2, and p1 | p2 yields\n  a pattern representing matching p1 or p2.  The p1 | p2 functionality was\n  semi-present in previous versions of Bro, but required constants as\n  its operands; now you can use any pattern-valued expressions.\n\n- You can now specify that a pattern matches in a case-insensitive\n  fashion by adding 'i' to the end of its specification.  So for example\n  /fOO/i == \"Foo\" yields T, as does /fOO/i in \"xFoObar\".\n\n  You can achieve the same functionality for a subpattern enclosed in\n  parentheses by adding \"?i:\" to the open parenthesis.  So for example\n  /foo|(?i:bar)/ will match \"BaR\", but not \"FoO\".\n\n  For both ways of specifying case-insensitivity, characters enclosed in\n  double quotes remain case-sensitive.  So for example /\"foo\"/i will not\n  match \"Foo\", but it will match \"foo\".\n\n- \"make install\" now installs Bro's include headers (and more) into\n  \"--prefix\" so that compiling plugins no longer needs access to a\n  source/build tree. For OS distributions, this also facilitates\n  creating \"bro-devel\" packages providing all files necessary to build\n  plugins.\n\n- Bro now supports PPPoE over QinQ.\n\n- Bro now supports OpenSSL 1.1.\n\n- The new connection/conn.log history character 'W' indicates that\n  the originator ('w' = responder) advertised a TCP zero window\n  (instructing the peer to not send any data until receiving a\n  non-zero window).\n\n- The connection/conn.log history characters 'C' (checksum error seen),\n  'T' (retransmission seen), and 'W' (zero window advertised) are now\n  repeated in a logarithmic fashion upon seeing multiple instances\n  of the corresponding behavior.  Thus a connection with 2 C's in its\n  history means that the originator sent >= 10 packets with checksum\n  errors; 3 C's means >= 100, etc.\n\n- The above connection history behaviors occurring multiple times\n  (i.e., starting at 10 instances, than again for 100 instances,\n  etc.) generate corresponding events:\n\n  - tcp_multiple_checksum_errors\n  - udp_multiple_checksum_errors\n  - tcp_multiple_zero_windows\n  - tcp_multiple_retransmissions\n\n  Each has the same form, e.g.::\n\n      event tcp_multiple_retransmissions(c: connection, is_orig: bool,\n                                         threshold: count);\n\n- Added support for set union, intersection, difference, and comparison\n  operations.  The corresponding operators for the first three are\n  \"s1 | s2\", \"s1 & s2\", and \"s1 - s2\".  Relationals are in terms\n  of subsets, so \"s1 < s2\" yields true if s1 is a proper subset of s2\n  and \"s1 == s2\" if the two sets have exactly the same elements.\n  \"s1 <= s2\" holds for subsets or equality, and similarly \"s1 != s2\",\n  \"s1 > s2\", and \"s1 >= s2\" have the expected meanings in terms\n  of non-equality, proper superset, and superset-or-equal.\n\n- An expression of the form \"v += e\" will append the value of the expression\n  \"e\" to the end of the vector \"v\" (of course assuming type-compatibility).\n  \"redef v += { a, b, c }\" will similarly extend a vector previously declared\n  with &redef by appending the result of expressions \"a\", \"b\", and \"c\" to\n  the vector at initialization-time.\n\n- A new \"@deprecated\" directive was added. It marks a script-file as\n  deprecated.\n\nChanged Functionality\n---------------------\n\n- All communication is now handled through Broker, requiring changes\n  to existing scripts to port them over to the new API. The Broker\n  framework documentation comes with a porting guide.\n\n- The DHCP analyzer and its script-layer interface have been rewritten.\n\n  - Supports more DHCP options than before.\n\n  - The DHCP log now represents DHCP sessions based on transaction ID\n    and works on Bro cluster deployments.\n\n  - Removed the ``policy/protocols/dhcp/known-devices-and-hostnames.bro``\n    script since it's generally less relevant now with the updated log.\n\n  - Removed the ``base/protocols/dhcp/utils.bro`` script and thus the\n    \"reverse_ip\" function.\n\n  - Replaced all DHCP events with the single \"dhcp_message\" event.\n    The list of removed events includes:\n\n    - dhcp_discover\n    - dhcp_offer\n    - dhcp_request\n    - dhcp_decline\n    - dhcp_ack\n    - dhcp_nak\n    - dhcp_release\n    - dhcp_inform\n\n  - A new script, ``policy/protocols/dhcp/deprecated_events.bro``, may be\n    loaded to aid those transitioning away from the list of \"removed\"\n    events above.  The script provides definitions for the old events\n    and automatically generates them from a \"dhcp_message\" handler, thus\n    providing equivalent functionality to the previous Bro release.\n    Such usage emits deprecation warnings.\n\n- Removed ``policy/misc/known-devices.bro`` script and thus\n  ``known_devices.log`` will no longer be created.\n\n- The \"--with-binpac\" configure option has changed to mean \"path\n  to the binpac executable\" instead of \"path to binpac installation root\".\n\n- The MIME types used to identify X.509 certificates in SSL\n  connections changed from \"application/pkix-cert\" to\n  \"application/x-x509-user-cert\" for host certificates and\n  \"application/x-x509-ca-cert\" for CA certificates.\n\n- The \"ssl_server_curve\" event is considered deprecated and will be removed\n  in the future.  See the new \"ssl_ecdh_server_params\" event for a\n  replacement.\n\n- The Socks analyzer no longer logs passwords by default. This\n  brings its behavior in line with the FTP/HTTP analyzers which also\n  do not log passwords by default.\n\n  To restore the previous behavior and log Socks passwords, use::\n\n      redef SOCKS::default_capture_password = T;\n\n- The DNS base scripts no longer generate some noisy and annoying\n  weirds:\n\n  - dns_unmatched_msg\n  - dns_unmatched_msg_quantity\n  - dns_unmatched_reply\n\n- The \"tunnel_parents\" field of ``conn.log`` is now marked ``&optional``, so,\n  in the default configuration of logs, this field will show \"-\"\n  instead of \"(empty)\" for connections that lack any tunneling.\n\n- SMB event argument changes:\n\n  - \"smb1_transaction_request\" now has two additional arguments, \"parameters\"\n    and \"data\" strings\n\n  - \"smb1_transaction2_request\" now has an additional \"args\" record argument\n\n- The \"SMB::write_cmd_log\" option has been removed and the corresponding\n  logic moving to ``policy/protocols/smb/log-cmds.bro`` which can simply\n  be loaded to produce the same effect of toggling the old flag on.\n\n- SSL event argument changes:\n\n  - \"ssl_server_signature\" now has an additional argument\n    \"signature_and_hashalgorithm\".\n\n- The \"dnp3_header_block\" event no longer has the \"start\" parameter.\n\n- The \"string_to_pattern()\" and now-deprecated \"merge_pattern()\"\n  built-ins are no longer restricted to only be called at initialization time.\n\n- GeoIP Legacy Database support has been replaced with GeoIP2 MaxMind DB\n  format support.\n\n  - This updates the \"lookup_location\" and \"lookup_asn\" BIFs to use\n    libmaxminddb.  The motivation for this is that MaxMind is discontinuing\n    GeoLite Legacy databases: no updates after April 1, 2018, no downloads\n    after January 2, 2019.  It's also noted that all GeoIP Legacy databases\n    may be discontinued as they are superseded by GeoIP2.\n\n- \"Weird\" events are now generally suppressed/sampled by default according to\n  some tunable parameters:\n\n  - Weird::sampling_whitelist\n  - Weird::sampling_threshold\n  - Weird::sampling_rate\n  - Weird::sampling_duration\n\n  Those options can be changed if one needs the previous behavior of\n  a \"net_weird\", \"flow_weird\", or \"conn_weird\" event being raised for\n  every single event.\n\n  The original ``weird.log`` may not differ much with these changes,\n  except in the cases where a particular weird type exceeds the\n  sampling threshold.\n\n  Otherwise, there is a new ``weird_stats.log`` generated via\n  ``policy/misc/weird-stats.bro`` which contains concise summaries\n  of weird counts per type per time period.\n\n- Improved DCE-RPC analysis via tracking of context identifier mappings\n\n  - These DCE-RPC events now contain an additional context-id argument:\n\n    - dce_rpc_bind\n    - dce_rpc_request\n    - dce_rpc_response\n\n  - Added new events:\n\n    - dce_rpc_alter_context\n    - dce_rpc_alter_context_resp\n\n- The default value of ``Pcap::snaplen`` changed from 8192 to 9216 bytes\n  to better accommodate jumbo frames.\n\n- Improvements to ``ntlm.log`` to fix incorrect reporting of login\n  success/failure.  Also, the \"status\" field was removed and\n  \"server_nb_computer_name\", \"server_dns_computer_name\", and\n  \"server_tree_name\" fields added.\n\n- BroControl: The output of the broctl \"top\" command has changed slightly.\n  The \"Proc\" column has been removed from the output.  This column previously\n  indicated whether each Bro process was the \"parent\" or \"child\", but this\n  is no longer relevant because each Bro node now runs as a single process.\n\n- The ``DNP3::function_codes`` name for request 0x21 has been corrected from\n  \"AUTHENTICATE_ERR\" to \"AUTHENTICATE_REQ_NR\".\n\n- The ``DNS::query_types`` names for resource records 41 and 100 have been\n  corrected from \"EDNS\" to \"OPT\" and \"DINFO\" to \"UINFO\", respectively.\n\nRemoved Functionality\n---------------------\n\n- We no longer maintain any Bro plugins as part of the Bro\n  distribution. Most of the plugins that used to be in aux/plugins have\n  been moved over to use the Bro Package Manager instead. See\n  https://packages.bro.org for a list of Bro packages currently\n  available.\n\n- The \"ocsp_request\" event no longer has \"requestorName\" parameter.\n\n- The node-specific ``site/local-*.bro`` scripts have been removed.\n\n- BroControl: The \"IPv6Comm\" and \"ZoneID\" options are no longer\n  available (though Broker should be able to handle IPv6 automatically).\n\nDeprecated Functionality\n------------------------\n\n- The old communication system is now deprecated and scheduled for\n  removal with the next Bro release. This includes the \"communication\"\n  framework, the ``&synchronized`` attributes, and the existing\n  communication-related BiFs. Use Broker instead.\n\n- The infrastructure for serializing Bro values into a binary\n  representation is now deprecated and scheduled for removal with the\n  next Bro release. This includes the ``&persistent`` attribute, as well\n  as BIFs like \"send_id()\". Use Broker data stores and the new\n  configuration framework instead.\n\n- Mixing of scalars and vectors, such as \"v + e\" yielding a vector\n  corresponding to the vector v with the scalar e added to each of\n  its elements, has been deprecated.\n\n- The built-in function \"merge_pattern()\" has been deprecated.  It will\n  be replaced by the '&' operator for patterns.\n\n- The undocumented feature of using \"&&\" and \"||\" operators for patterns\n  has been deprecated.\n\n- BroControl: The \"update\" command is deprecated and scheduled for\n  removal with the next Bro release. Bro's new configuration framework\n  is taking its place.\n\nBro 2.5.5\n=========\n\nBro 2.5.5 primarily addresses security issues.\n\n- Fix array bounds checking in BinPAC: for arrays that are fields within\n  a record, the bounds check was based on a pointer to the start of the\n  record rather than the start of the array field, potentially resulting\n  in a buffer over-read.\n\n- Fix SMTP command string comparisons: the number of bytes compared was\n  based on the user-supplied string length and can lead to incorrect\n  matches.  e.g. giving a command of \"X\" incorrectly matched\n  \"X-ANONYMOUSTLS\" (and an empty commands match anything).\n\nThe following changes address potential vectors for Denial of Service\nreported by Christian Titze & Jan Grashöfer of Karlsruhe Institute of\nTechnology:\n\n- \"Weird\" events are now generally suppressed/sampled by default according\n   to some tunable parameters:\n\n  - Weird::sampling_whitelist\n  - Weird::sampling_threshold\n  - Weird::sampling_rate\n  - Weird::sampling_duration\n\n  Those options can be changed if one needs the previous behavior of\n  a \"net_weird\", \"flow_weird\", or \"conn_weird\" event being raised for\n  every single event.  Otherwise, there is a new weird_stats.log which\n  contains concise summaries of weird counts per type per time period\n  and the original weird.log may not differ much either, except in\n  the cases where a particular weird type exceeds the sampling threshold.\n  These changes help improve performance issues resulting from excessive\n  numbers of weird events.\n\n- Improved handling of empty lines in several text protocol analyzers\n  that can cause performance issues when seen in long sequences.\n\n- Add 'smtp_excessive_pending_cmds' weird which serves as a notification\n  for when the \"pending command\" queue has reached an upper limit and\n  been cleared to prevent one from attempting to slowly exhaust memory.\n\nBro 2.5.4\n=========\n\nBro 2.5.4 primarily fixes security issues:\n\n- Multiple fixes and improvements to BinPAC generated code related to\n  array parsing, with potential impact to all Bro's BinPAC-generated\n  analyzers in the form of buffer over-reads or other invalid memory\n  accesses depending on whether a particular analyzer incorrectly\n  assumed that the evaluated-array-length expression is actually the\n  number of elements that were parsed out from the input.\n\n- The NCP analyzer (not enabled by default and also updated to actually\n  work with newer Bro APIs in the release) performed a memory allocation\n  based directly on a field in the input packet and using signed integer\n  storage.  This could result in a signed integer overflow and memory\n  allocations of negative or very large size, leading to a crash or\n  memory exhaustion.  The new NCP::max_frame_size tuning option now\n  limits the maximum amount of memory that can be allocated.\n\nThere's also the following bug fixes:\n\n- A memory leak in the SMBv1 analyzer.\n\n- The MySQL analyzer was generally not working as intended, for example,\n  it now is able to parse responses that contain multiple results/rows.\n\nBro 2.5.3\n=========\n\nBro 2.5.3 fixes a security issue in Binpac generated code. In some cases\nthe code generated by binpac could lead to an integer overflow which can\nlead to out of bound reads and allow a remote attacker to crash Bro; there\nis also a possibility that this can be exploited in other ways.\n\nBro 2.5.2\n=========\n\nBro 2.5.2 fixes a security issue in the ContentLine analyzer. In rare cases\na bug in the ContentLine analyzer can lead to an out of bound write of a single\nbyte. This allows a remote attacker to crash Bro; there also is a possibility\nthis can be exploited in other ways. CVE-2017-1000458 has been assigned to this\nissue.\n\nBro 2.5.1\n=========\n\nNew Functionality\n-----------------\n\n- Bro now includes bifs for rename, unlink, and rmdir.\n\n- Bro now includes events for two extensions used by TLS 1.3:\n  ssl_extension_supported_versions and ssl_extension_psk_key_exchange_modes\n\n- Bro now includes hooks that can be used to interact with log processing\n  on the C++ level.\n\n- Bro now supports ERSPAN. Currently this ignores the ethernet header that is\n  carried over the tunnel; if a MAC is logged currently only the outer MAC\n  is returned.\n\n- Added a new BroControl option CrashExpireInterval to enable\n  \"broctl cron\" to remove crash directories that are older than the\n  specified number of days (the default value is 0, which means crash\n  directories never expire).\n\n- Added a new BroControl option MailReceivingPackets to control\n  whether or not \"broctl cron\" will mail a warning when it notices\n  that no packets were seen on an interface.\n\n- There is a new broctl command-line option \"--version\" which outputs\n  the BroControl version.\n\nChanged Functionality\n---------------------\n\n- The input framework's Ascii reader is now more resilient. If an input\n  is marked to reread a file when it changes and the file didn't exist\n  during a check Bro would stop watching the file in previous versions.\n  The same could happen with bad data in a line of a file.  These\n  situations do not cause Bro to stop watching input files anymore. The\n  old behavior is available through settings in the Ascii reader.\n\n- The RADIUS scripts have been reworked. Requests are now logged even if\n  there is no response. The new framed_addr field in the log indicates\n  if the radius server is hinting at an address for the client. The ttl\n  field indicates how quickly the server is replying to the network access\n  server.\n\n- With the introduction of the Bro package manager, the Bro plugin repository\n  is considered deprecated. The af_packet, postgresql, and tcprs plugins have\n  already been removed and are available via bro-pkg.\n\nBro 2.5\n=======\n\nNew Dependencies\n----------------\n\n- Bro now requires a compiler with C++11 support for building the\n  source code.\n\n- Bro now requires Python instead of Perl to compile the source code.\n\n- When enabling Broker (which is disabled by default), Bro now requires\n  version 0.14 of the C++ Actor Framework.\n\nNew Functionality\n-----------------\n\n- SMB analyzer. This is the rewrite that has been in development for\n  several years. The scripts are currently not loaded by default and\n  must be loaded manually by loading policy/protocols/smb. The next\n  release will load the smb scripts by default.\n\n   - Implements SMB1+2.\n   - Fully integrated with the file analysis framework so that files\n     transferred over SMB can be analyzed.\n   - Includes GSSAPI and NTLM analyzer and reimplements the DCE-RPC\n     analyzer.\n   - New logs: smb_cmd.log, smb_files.log, smb_mapping.log, ntlm.log,\n     and dce_rpc.log\n   - Not every possible SMB command or functionality is implemented, but\n     generally, file handling should work whenever files are transferred.\n     Please speak up on the mailing list if there is an obvious oversight.\n\n- Bro now includes the NetControl framework. The framework allows for easy\n  interaction of Bro with hard- and software switches, firewalls, etc.\n  New log files: netcontrol.log, netcontrol_catch_release.log,\n  netcontrol_drop.log, and netcontrol_shunt.log.\n\n- Bro now includes the OpenFlow framework which exposes the data structures\n  necessary to interface to OpenFlow capable hardware.\n\n- Bro's Intelligence Framework was refactored and new functionality\n  has been added:\n\n  - The framework now supports the new indicator type Intel::SUBNET.\n    As subnets are matched against seen addresses, the new field 'matched'\n    in intel.log was introduced to indicate which indicator type(s) caused\n    the hit.\n\n  - The new function remove() allows to delete intelligence items.\n\n  - The intel framework now supports expiration of intelligence items.\n    Expiration can be configured using the new Intel::item_expiration constant\n    and can be handled by using the item_expired() hook. The new script\n    do_expire.bro removes expired items.\n\n  - The new hook extend_match() allows extending the framework. The new\n    policy script whitelist.bro uses the hook to implement whitelisting.\n\n  - Intel notices are now suppressible and mails for intel notices now\n    list the identified services as well as the intel source.\n\n- There is a new file entropy analyzer for files.\n\n- Bro now supports the remote framebuffer protocol (RFB) that is used by\n  VNC servers for remote graphical displays.  New log file: rfb.log.\n\n- Bro now supports the Radiotap header for 802.11 frames.\n\n- Bro now has rudimentary IMAP and XMPP analyzers examining the initial\n  phases of the protocol. Right now these analyzers only identify\n  STARTTLS sessions, handing them over to TLS analysis. These analyzers\n  do not yet analyze any further IMAP/XMPP content.\n\n- New functionality has been added to the SSL/TLS analyzer:\n\n  - Bro now supports (draft) TLS 1.3.\n\n  - The new event ssl_extension_signature_algorithm() allows access to the\n    TLS signature_algorithms extension that lists client supported signature\n    and hash algorithm pairs.\n\n  - The new event ssl_extension_key_share gives access to the supported named\n    groups in TLS 1.3.\n\n  - The new event ssl_application_data gives information about application data\n    that is exchanged before encryption fully starts. This is used to detect\n    when encryption starts in TLS 1.3.\n\n- Bro now tracks VLAN IDs. To record them inside the connection log,\n  load protocols/conn/vlan-logging.bro.\n\n- A new dns_CAA_reply() event gives access to DNS Certification Authority\n  Authorization replies.\n\n- A new per-packet event raw_packet() provides access to layer 2\n  information. Use with care, generating events per packet is\n  expensive.\n\n- A new built-in function, decode_base64_conn() for Base64 decoding.\n  It works like decode_base64() but receives an additional connection\n  argument that will be used for decoding errors into weird.log\n  (instead of reporter.log).\n\n- A new get_current_packet_header() bif returns the headers of the current\n  packet.\n\n- Three new built-in functions for handling set[subnet] and table[subnet]:\n\n  - check_subnet(subnet, table) checks if a specific subnet is a member\n    of a set/table. This is different from the \"in\" operator, which always\n    performs a longest prefix match.\n\n  - matching_subnets(subnet, table) returns all subnets of the set or table\n    that contain the given subnet.\n\n  - filter_subnet_table(subnet, table) works like matching_subnets, but returns\n    a table containing all matching entries.\n\n- Several built-in functions for handling IP addresses and subnets were added:\n\n  - is_v4_subnet(subnet) checks whether a subnet specification is IPv4.\n\n  - is_v6_subnet(subnet) checks whether a subnet specification is IPv6.\n\n  - addr_to_subnet(addr) converts an IP address to a /32 subnet.\n\n  - subnet_to_addr(subnet) returns the IP address part of a subnet.\n\n  - subnet_width(subnet) returns the width of a subnet.\n\n- The IRC analyzer now recognizes StartTLS sessions and enables the SSL\n  analyzer for them.\n\n- The misc/stats.bro script is now loaded by default and logs more Bro\n  execution statistics to the stats.log file than it did previously. It\n  now also uses the standard Bro log format.\n\n- A set of new built-in functions for gathering execution statistics:\n\n      get_net_stats(), get_conn_stats(), get_proc_stats(),\n      get_event_stats(), get_reassembler_stats(), get_dns_stats(),\n      get_timer_stats(), get_file_analysis_stats(), get_thread_stats(),\n      get_gap_stats(), get_matcher_stats()\n\n- Two new functions haversine_distance() and haversine_distance_ip()\n  for calculating geographic distances. The latter function requires that Bro\n  be built with libgeoip.\n\n- Table expiration timeout expressions are evaluated dynamically as\n  timestamps are updated.\n\n- The pcap buffer size can be set through the new option Pcap::bufsize.\n\n- Input framework readers stream types Table and Event can now define a custom\n  event (specified by the new \"error_ev\" field) to receive error messages\n  emitted by the input stream. This can, e.g., be used to raise notices in\n  case errors occur when reading an important input source.\n\n- The logging framework now supports user-defined record separators,\n  renaming of column names, as well as extension data columns that can\n  be added to specific or all logfiles (e.g., to add new names).\n\n- The new \"bro-config\" script can be used to determine the Bro installation\n  paths.\n\n- New BroControl functionality in aux/broctl:\n\n  - There is a new node type \"logger\" that can be specified in\n    node.cfg (that file has a commented-out example).  The purpose of\n    this new node type is to receive logs from all nodes in a cluster\n    in order to reduce the load on the manager node.  However, if\n    there is no \"logger\" node, then the manager node will handle\n    logging as usual.\n\n  - The post-terminate script will send email if it fails to archive\n    any log files.  These mails can be turned off by changing the\n    value of the new BroControl option MailArchiveLogFail.\n\n  - Added the ability for \"broctl deploy\" to reload the BroControl\n    configuration (both broctl.cfg and node.cfg).  This happens\n    automatically if broctl detects any changes to those config files\n    since the last time the config was loaded.  Note that this feature\n    is relevant only when using the BroControl shell interactively.\n\n  - The BroControl plugin API has a new function \"broctl_config\".\n    This gives plugin authors the ability to add their own script code\n    to the autogenerated broctl-config.bro script.\n\n  - There is a new BroControl plugin for custom load balancing.  This\n    plugin can be used by setting \"lb_method=custom\" for your worker\n    nodes in node.cfg.  To support packet source plugins, it allows\n    configuration of a prefix and suffix for the interface name.\n\n- New Bro plugins in aux/plugins:\n\n    - af_packet: Native AF_PACKET support.\n    - kafka : Log writer interfacing to Kafka.\n    - myricom: Native Myricom SNF v3 support.\n    - pf_ring: Native PF_RING support.\n    - postgresql: A PostgreSQL reader/writer.\n    - redis: An experimental log writer for Redis.\n    - tcprs: A TCP-level analyzer detecting retransmissions, reordering, and more.\n\nChanged Functionality\n---------------------\n\n- Log changes:\n\n    - Connections\n\n        The 'history' field gains two new flags: '^' indicates that\n        Bro heuristically flipped the direction of the connection.\n        't/T' indicates the first TCP payload retransmission from\n        originator or responder, respectively.\n\n    - Intelligence\n\n        New field 'matched' to indicate which indicator type(s) caused the hit.\n\n    - DNS\n\n        New 'rtt' field to indicate the round trip time between when a\n        request was sent and when a reply started.\n\n    - SMTP\n\n        New 'cc' field which includes the 'Cc' header from MIME\n        messages sent over SMTP.\n\n        Changes in 'mailfrom' and 'rcptto' fields to remove some\n        non-address cruft that will tend to be found.  The main\n        example is the change from ``\"<user@domain>\"`` to\n        ``\"user@domain.com\"``.\n\n    - HTTP\n\n        Removed 'filename' field (which was seldom used).\n\n        New 'orig_filenames' and 'resp_filenames' fields which each\n        contain a vector of filenames seen in entities transferred.\n\n    - stats.log\n\n        The following fields have been added: active_tcp_conns,\n        active_udp_conns, active_icmp_conns, tcp_conns, udp_conns,\n        icmp_conns, timers, active_timers, files, active_files, dns_requests,\n        active_dns_requests, reassem_tcp_size, reassem_file_size,\n        reassem_frag_size, reassem_unknown_size.\n\n        The following fields have been renamed: lag -> pkt_lag.\n\n        The following fields have been removed: pkts_recv.\n\n- The BrokerComm and BrokerStore namespaces were renamed to Broker.\n  The Broker \"print()\" function was renamed to Broker::send_print(), and\n  the \"event()\" function was renamed to Broker::send_event().\n\n- The constant ``SSH::skip_processing_after_detection`` was removed. The\n  functionality was replaced by the new constant\n  ``SSH::disable_analyzer_after_detection``.\n\n- The ``net_stats()`` and ``resource_usage()`` functions have been\n  removed, and their functionality is now provided by the new execution\n  statistics functions (see above).\n\n- Some script-level identifiers have changed their names:\n\n      - snaplen                  -> Pcap::snaplen\n      - precompile_pcap_filter() -> Pcap::precompile_pcap_filter()\n      - install_pcap_filter()    -> Pcap::install_pcap_filter()\n      - pcap_error()             -> Pcap::error()\n\n- TCP analysis was changed to process connections without the initial\n  SYN packet. In the past, connections without a full handshake were\n  treated as partial, meaning that most application-layer analyzers\n  would refuse to inspect the payload. Now, Bro will consider these\n  connections as complete and all analyzers will process them normally.\n\n- The ``policy/misc/capture-loss.bro`` script is now loaded by default.\n\n- The traceroute detection script package ``policy/misc/detect-traceroute``\n  is no longer loaded by default.\n\n- Changed BroControl functionality in aux/broctl:\n\n  - The networks.cfg file now contains private IP space 172.16.0.0/12\n    by default.\n\n  - Upon startup, if broctl can't get IP addresses from the \"ifconfig\"\n    command for any reason, then broctl will now also try to use the\n    \"ip\" command.\n\n  - BroControl will now automatically search the Bro plugin directory\n    for BroControl plugins (in addition to all the other places where\n    BroControl searches).  This enables automatic loading of\n    BroControl plugins that are provided by a Bro plugin.\n\n  - Changed the default value of the StatusCmdShowAll option so that\n    the \"broctl status\" command runs faster.  This also means that\n    there is no longer a \"Peers\" column in the status output by\n    default.\n\n  - Users can now specify a more granular log expiration interval. The\n    BroControl option LogExpireInterval can be set to an arbitrary\n    time interval instead of just an integer number of days.  The time\n    interval is specified as an integer followed by a time unit:\n    \"day\", \"hr\", or \"min\".  For backward compatibility, an integer\n    value without a time unit is still interpreted as a number of\n    days.\n\n  - Changed the text of crash report emails.  Now crash reports tell\n    the user to forward the mail to the Bro team only when a backtrace\n    is included in the crash report.  If there is no backtrace, then\n    the crash report includes instructions on how to get backtraces\n    included in future crash reports.\n\n  - There is a new option SitePolicyScripts that replaces SitePolicyStandalone\n    (the old option is still available, but will be removed in the next\n    release).\n\nRemoved Functionality\n---------------------\n\n- The app-stats scripts have been removed because they weren't\n  being maintained and they were becoming inaccurate (as a result, the\n  app_stats.log is also gone). They were also prone to needing more regular\n  updates as the internet changed and will likely be more relevant if\n  maintained externally.\n\n- The event ack_above_hole() has been removed, as it was a subset\n  of content_gap() and led to plenty of noise.\n\n- The command line options ``--analyze``, ``--set-seed``, and\n  ``--md5-hashkey`` have been removed.\n\n- The packaging scripts pkg/make-\\*-packages are gone. They aren't\n  used anymore for the binary Bro packages that the project\n  distributes; haven't been supported in a while; and have\n  problems.\n\nDeprecated Functionality\n------------------------\n\n- The built-in functions decode_base64_custom() and\n  encode_base64_custom() are no longer needed and will be removed\n  in the future. Their functionality is now provided directly by\n  decode_base64() and encode_base64(), which take an optional\n  parameter to change the Base64 alphabet.\n\nBro 2.4\n=======\n\nNew Functionality\n-----------------\n\n- Bro now has support for external plugins that can extend its core\n  functionality, like protocol/file analysis, via shared libraries.\n  Plugins can be developed and distributed externally, and will be\n  pulled in dynamically at startup (the environment variables\n  BRO_PLUGIN_PATH and BRO_PLUGIN_ACTIVATE can be used to specify the\n  locations and names of plugins to activate). Currently, a plugin\n  can provide custom protocol analyzers, file analyzers, log writers,\n  input readers, packet sources and dumpers, and new built-in functions.\n  A plugin can furthermore hook into Bro's processing at a number of\n  places to add custom logic.\n\n  See https://www.bro.org/sphinx-git/devel/plugins.html for more\n  information on writing plugins.\n\n- Bro now has support for the MySQL wire protocol. Activity gets\n  logged into mysql.log.\n\n- Bro now parses DTLS traffic. Activity gets logged into ssl.log.\n\n- Bro now has support for the Kerberos KRB5 protocol over TCP and\n  UDP. Activity gets logged into kerberos.log.\n\n- Bro now has an RDP analyzer. Activity gets logged into rdp.log.\n\n- Bro now has a file analyzer for Portable Executables. Activity gets\n  logged into pe.log.\n\n- Bro now has support for the SIP protocol over UDP. Activity gets\n  logged into sip.log.\n\n- Bro now features a completely rewritten, enhanced SSH analyzer.  The\n  new analyzer is able to determine if logins failed or succeeded in\n  most circumstances, logs a lot more information about SSH\n  sessions, supports v1, and introduces the intelligence type\n  ``Intel::PUBKEY_HASH`` and location ``SSH::IN_SERVER_HOST_KEY``. The\n  analyzer also generates a set of additional events\n  (``ssh_auth_successful``, ``ssh_auth_failed``, ``ssh_auth_attempted``,\n  ``ssh_auth_result``, ``ssh_capabilities``, ``ssh2_server_host_key``,\n  ``ssh1_server_host_key``, ``ssh_encrypted_packet``,\n  ``ssh2_dh_server_params``, ``ssh2_gss_error``, ``ssh2_ecc_key``). See\n  next section for incompatible SSH changes.\n\n- Bro's file analysis now supports reassembly of files that are not\n  transferred/seen sequentially.  The default file reassembly buffer\n  size is set with the ``Files::reassembly_buffer_size`` variable.\n\n- Bro's file type identification has been greatly improved (new file types,\n  bug fixes, and performance improvements).\n\n- Bro's scripting language now has a ``while`` statement::\n\n        while ( i < 5 )\n            print ++i;\n\n  ``next`` and ``break`` can be used inside the loop's body just like\n  with ``for`` loops.\n\n- Bro now integrates Broker, a new communication library. See\n  aux/broker/README for more information on Broker, and\n  doc/frameworks/broker.rst for the corresponding Bro script API.\n\n  With Broker, Bro has the similar capabilities of exchanging events and\n  logs with remote peers (either another Bro process or some other\n  application that uses Broker).  It also includes a key-value store\n  API that can be used to share state between peers and optionally\n  allow data to persist on disk for longer-term storage.\n\n  Broker support is by default off for now; it can be enabled at\n  configure time with --enable-broker. It requires CAF version 0.13+\n  (https://github.com/actor-framework/actor-framework) as well as a\n  C++11 compiler (e.g. GCC 4.8+ or Clang 3.3+).\n\n  Broker will become a mandatory dependency in future Bro versions and\n  replace the current communication and serialization system.\n\n- Add --enable-c++11 configure flag to compile Bro's source code in\n  C++11 mode with a corresponding compiler. Note that 2.4 will be the\n  last version of Bro that compiles without C++11 support.\n\n- The SSL analysis now alerts when encountering SSL connections with\n  old protocol versions or unsafe cipher suites. It also gained\n  extended reporting of weak keys, caching of already validated\n  certificates, and full support for TLS record defragmentation. SSL generally\n  became much more robust and added several fields to ssl.log (while\n  removing some others).\n\n- A new icmp_sent_payload event provides access to ICMP payload.\n\n- The input framework's raw reader now supports seeking by adding an\n  option \"offset\" to the config map. Positive offsets are interpreted\n  to be from the beginning of the file, negative from the end of the\n  file (-1 is end of file).\n\n- One can now raise events when a connection crosses a given size\n  threshold in terms of packets or bytes. The primary API for that\n  functionality is in base/protocols/conn/thresholds.bro.\n\n- There is a new command-line option -Q/--time that prints Bro's execution\n  time and memory usage to stderr.\n\n- BroControl now has a new command \"deploy\" which is equivalent to running\n  the \"check\", \"install\", \"stop\", and \"start\" commands (in that order).\n\n- BroControl now has a new option \"StatusCmdShowAll\" that controls whether\n  or not the broctl \"status\" command gathers all of the status information.\n  This option can be used to make the \"status\" command run significantly\n  faster (in this case, the \"Peers\" column will not be shown in the output).\n\n- BroControl now has a new option \"StatsLogEnable\" that controls whether\n  or not broctl will record information to the \"stats.log\" file.  This option\n  can be used to make the \"broctl cron\" command run slightly faster (in this\n  case, \"broctl cron\" will also no longer send email about not seeing any\n  packets on the monitoring interfaces).\n\n- BroControl now has a new option \"MailHostUpDown\" which controls whether or\n  not the \"broctl cron\" command will send email when it notices that a host\n  in the cluster is up or down.\n\n- BroControl now has a new option \"CommandTimeout\" which specifies the number\n  of seconds to wait for a command that broctl ran to return results.\n\nChanged Functionality\n---------------------\n\n- bro-cut has been rewritten in C, and is hence much faster.\n\n- File analysis\n\n    * Removed ``fa_file`` record's ``mime_type`` and ``mime_types``\n      fields.  The event ``file_sniff`` has been added which provides\n      the same information.  The ``mime_type`` field of ``Files::Info``\n      also still has this info.\n\n    * The earliest point that new mime type information is available is\n      in the ``file_sniff`` event which comes after the ``file_new`` and\n      ``file_over_new_connection`` events.  Scripts which inspected mime\n      type info within those events will need to be adapted.  (Note: for\n      users that worked w/ versions of Bro from git, for a while there was\n      also an event called ``file_mime_type`` which is now replaced with\n      the ``file_sniff`` event).\n\n    * Removed ``Files::add_analyzers_for_mime_type`` function.\n\n    * Removed ``offset`` parameter of the ``file_extraction_limit``\n      event.  Since file extraction now internally depends on file\n      reassembly for non-sequential files, \"offset\" can be obtained\n      with other information already available -- adding together\n      ``seen_bytes`` and ``missed_bytes`` fields of the ``fa_file``\n      record gives how many bytes have been written so far (i.e.\n      the \"offset\").\n\n- The SSH changes come with a few incompatibilities. The following\n  events have been renamed:\n\n    * ``SSH::heuristic_failed_login`` to ``ssh_auth_failed``\n    * ``SSH::heuristic_successful_login`` to ``ssh_auth_successful``\n\n  The ``SSH::Info`` status field has been removed and replaced with\n  the ``auth_success`` field.  This field has been changed from a\n  string that was previously ``success``, ``failure`` or\n  ``undetermined`` to a boolean. a boolean that is ``T``, ``F``, or\n  unset.\n\n- The has_valid_octets function now uses a string_vec parameter instead of\n  string_array.\n\n- conn.log gained a new field local_resp that works like local_orig,\n  just for the responder address of the connection.\n\n- GRE tunnels are now identified as ``Tunnel::GRE`` instead of\n  ``Tunnel::IP``.\n\n- The default name for extracted files changed from extract-protocol-id\n  to extract-timestamp-protocol-id.\n\n- The weird named \"unmatched_HTTP_reply\" has been removed since it can\n  be detected at the script-layer and is handled correctly by the\n  default HTTP scripts.\n\n- When adding a logging filter to a stream, the filter can now inherit\n  a default ``path`` field from the associated ``Log::Stream`` record.\n\n- When adding a logging filter to a stream, the\n  ``Log::default_path_func`` is now only automatically added to the\n  filter if it has neither a ``path`` nor a ``path_func`` already\n  explicitly set.  Before, the default path function would always be set\n  for all filters which didn't specify their own ``path_func``.\n\n- BroControl now establishes only one ssh connection from the manager to\n  each remote host in a cluster configuration (previously, there would be\n  one ssh connection per remote Bro process).\n\n- BroControl now uses SQLite to record state information instead of a\n  plain text file (the file \"spool/broctl.dat\" is no longer used).\n  On FreeBSD, this means that there is a new dependency on the package\n  \"py27-sqlite3\".\n\n- BroControl now records the expected running state of each Bro node right\n  before each start or stop.  The \"broctl cron\" command uses this info to\n  either start or stop Bro nodes as needed so that the actual state matches\n  the expected state (previously, \"broctl cron\" could only start nodes in\n  the \"crashed\" state, and could never stop a node).\n\n- BroControl now sends all normal command output (i.e., not error messages)\n  to stdout.  Error messages are still sent to stderr, however.\n\n- The capability of processing NetFlow input has been removed for the\n  time being.  Therefore, the -y/--flowfile and -Y/--netflow command-line\n  options have been removed, and the netflow_v5_header and netflow_v5_record\n  events have been removed.\n\n- The -D/--dfa-size command-line option has been removed.\n\n- The -L/--rule-benchmark command-line option has been removed.\n\n- The -O/--optimize command-line option has been removed.\n\n- The deprecated fields \"hot\" and \"addl\" have been removed from the\n  connection record. Likewise, the functions append_addl() and\n  append_addl_marker() have been removed.\n\n- Log files now escape non-printable characters consistently as \"\\xXX'.\n  Furthermore, backslashes are escaped as \"\\\\\", making the\n  representation fully reversible.\n\nDeprecated Functionality\n------------------------\n\n- The split* family of functions are to be replaced with alternate\n  versions that return a vector of strings rather than a table of\n  strings. This also allows deprecation for some related string\n  concatenation/extraction functions. Note that the new functions use\n  0-based indexing, rather than 1-based.\n\n  The full list of now deprecated functions is:\n\n    * split: use split_string instead.\n\n    * split1: use split_string1 instead.\n\n    * split_all: use split_string_all instead.\n\n    * split_n: use split_string_n instead.\n\n    * cat_string_array: see join_string_vec instead.\n\n    * cat_string_array_n: see join_string_vec instead.\n\n    * join_string_array: see join_string_vec instead.\n\n    * sort_string_array: use sort instead.\n\n    * find_ip_addresses: use extract_ip_addresses instead.\n\nBro 2.3\n=======\n\nDependencies\n------------\n\n- Libmagic is no longer a dependency.\n\nNew Functionality\n-----------------\n\n- Support for GRE tunnel decapsulation, including enhanced GRE\n  headers. GRE tunnels are treated just like IP-in-IP tunnels by\n  parsing past the GRE header in between the delivery and payload IP\n  packets.\n\n- The DNS analyzer now actually generates the dns_SRV_reply() event.\n  It had been documented before, yet was never raised.\n\n- Bro now uses \"file magic signatures\" to identify file types. These\n  are defined via two new constructs in the signature rule parsing\n  grammar: \"file-magic\" gives a regular expression to match against,\n  and \"file-mime\" gives the MIME type string of content that matches\n  the magic and an optional strength value for the match. (See also\n  \"Changed Functionality\" below for changes due to switching from\n  using libmagic to such signatures.)\n\n- A new built-in function, \"file_magic\", can be used to get all file\n  magic matches and their corresponding strength against a given chunk\n  of data.\n\n- The SSL analyzer now supports heartbeats as well as a few\n  extensions, including server_name, alpn, and ec-curves.\n\n- The SSL analyzer comes with Heartbleed detector script in\n  protocols/ssl/heartbleed.bro.  Note that loading this script changes\n  the default value of \"SSL::disable_analyzer_after_detection\" from true\n  to false to prevent encrypted heartbeats from being ignored.\n\n- StartTLS is now supported for SMTP and POP3.\n\n- The X509 analyzer can now perform OCSP validation.\n\n- Bro now has analyzers for SNMP and Radius, which produce corresponding\n  snmp.log and radius.log output (as well as various events of course).\n\n- BroControl has a new option \"BroPort\" which allows a user to specify\n  the starting port number for Bro.\n\n- BroControl has a new option \"StatsLogExpireInterval\" which allows a\n  user to specify when entries in the stats.log file expire.\n\n- BroControl has a new option \"PFRINGClusterType\" which allows a user\n  to specify a PF_RING cluster type.\n\n- BroControl now supports PF_RING+DNA.  There is also a new option\n  \"PFRINGFirstAppInstance\" that allows a user to specify the starting\n  application instance number for processes running on a DNA cluster.\n  See the BroControl documentation for more details.\n\n- BroControl now warns a user to run \"broctl install\" if Bro has\n  been upgraded or if the broctl or node configuration has changed\n  since the most recent install.\n\nChanged Functionality\n---------------------\n\n- string slices now exclude the end index (e.g., \"123\"[1:2] returns\n  \"2\"). Generally, Bro's string slices now behave similar to Python.\n\n- ssl_client_hello() now receives a vector of ciphers, instead of a\n  set, to preserve their order.\n\n- Notice::end_suppression() has been removed.\n\n- Bro now parses X.509 extensions headers and, as a result, the\n  corresponding event got a new signature:\n\n      event x509_extension(c: connection, is_orig: bool, cert: X509, ext: X509_extension_info);\n\n- In addition, there are several new, more specialized events for a\n  number of x509 extensions.\n\n- Generally, all x509 events and handling functions have changed their\n  signatures.\n\n- X509 certificate verification now returns the complete certificate\n  chain that was used for verification.\n\n- Bro no longer special-cases SYN/FIN/RST-filtered traces by not\n  reporting missing data. Instead, if Bro never sees any data segments\n  for analyzed TCP connections, the new\n  base/misc/find-filtered-trace.bro script will log a warning in\n  reporter.log and to stderr.  The old behavior can be reverted by\n  redef'ing \"detect_filtered_trace\".\n\n- We have removed the packet sorter component.\n\n- Bro no longer uses libmagic to identify file types but instead now\n  comes with its own signature library (which initially is still\n  derived from libmagic's database). This leads to a number of further\n  changes with regards to MIME types:\n\n    * The second parameter of the \"identify_data\" built-in function\n      can no longer be used to get verbose file type descriptions,\n      though it can still be used to get the strongest matching file\n      magic signature.\n\n    * The \"file_transferred\" event's \"descr\" parameter no longer\n      contains verbose file type descriptions.\n\n    * The BROMAGIC environment variable no longer changes any behavior\n      in Bro as magic databases are no longer used/installed.\n\n    * Removed \"binary\" and \"octet-stream\" mime type detections. They\n      don't provide any more information than an uninitialized\n      mime_type field.\n\n    * The \"fa_file\" record now contains a \"mime_types\" field that\n      contains all magic signatures that matched the file content\n      (where the \"mime_type\" field is just a shortcut for the\n      strongest match).\n\n- dns_TXT_reply() now supports more than one string entry by receiving\n  a vector of strings.\n\n- BroControl now runs the \"exec\" and \"df\" broctl commands only once\n  per host, instead of once per Bro node.  The output of these\n  commands has been changed slightly to include both the host and\n  node names.\n\n- Several performance improvements were made.  Particular emphasis\n  was put on the File Analysis system, which generally will now emit\n  far fewer file handle request events due to protocol analyzers now\n  caching that information internally.\n\nBro 2.2\n=======\n\nNew Functionality\n-----------------\n\n- A completely overhauled intelligence framework for consuming\n  external intelligence data. It provides an abstracted mechanism\n  for feeding data into the framework to be matched against the\n  data available. It also provides a function named ``Intel::match``\n  which makes any hits on intelligence data available to the\n  scripting language.\n\n  Using input framework, the intel framework can load data from\n  text files. It can also update and add data if changes are\n  made to the file being monitored. Files to monitor for\n  intelligence can be provided by redef-ing the\n  ``Intel::read_files`` variable.\n\n  The intel framework is cluster-ready. On a cluster, the\n  manager is the only node that needs to load in data from disk,\n  the cluster support will distribute the data across a cluster\n  automatically.\n\n  Scripts are provided at ``policy/frameworks/intel/seen`` that\n  provide a broad set of sources of data to feed into the intel\n  framework to be matched.\n\n- A new file analysis framework moves most of the processing of file\n  content from script-land into the core, where it belongs. See\n  ``doc/file-analysis.rst``, or the online documentation, for more\n  information.\n\n  Much of this is an internal change, but the framework also comes\n  with the following user-visible functionality (some of that was\n  already available before but is done differently, and more\n  efficiently, now):\n\n      - HTTP:\n\n        * Identify MIME type of messages.\n        * Extract messages to disk.\n        * Compute MD5 for messages.\n\n      - SMTP:\n\n        * Identify MIME type of messages.\n        * Extract messages to disk.\n        * Compute MD5 for messages.\n        * Provide access to start of entity data.\n\n      - FTP data transfers:\n\n        * Identify MIME types of data.\n        * Record to disk.\n\n      - IRC DCC transfers: Record to disk.\n\n      - Support for analyzing data transferred via HTTP range requests.\n\n      - A binary input reader interfaces the input framework with the\n        file analysis, allowing to inject files on disk into Bro's\n        content processing.\n\n- A new framework for computing a wide array of summary statistics,\n  such as counters and thresholds checks, standard deviation and mean,\n  set cardinality, top K, and more. The framework operates in\n  real-time, independent of the underlying data, and can aggregate\n  information from many independent monitoring points (including\n  clusters). It provides a transparent, easy-to-use user interface,\n  and can optionally deploy a set of probabilistic data structures for\n  memory-efficient operation. The framework is located in\n  ``scripts/base/frameworks/sumstats``.\n\n  A number of new applications now ship with Bro that are built on top\n  of the summary statistics framework:\n\n    * Scan detection: Detectors for port and address scans. See\n      ``policy/misc/scan.bro`` (these scan detectors used to exist in\n      Bro versions <2.0; it's now back, but quite different).\n\n    * Tracerouter detector: ``policy/misc/detect-traceroute.bro``\n\n    * Web application detection/measurement:\n      ``policy/misc/app-stats/*``\n\n    * FTP and SSH brute-forcing detector:\n      ``policy/protocols/ftp/detect-bruteforcing.bro``,\n      ``policy/protocols/ssh/detect-bruteforcing.bro``\n\n    * HTTP-based SQL injection detector:\n      ``policy/protocols/http/detect-sqli.bro`` (existed before, but\n      now ported to the new framework)\n\n- GridFTP support. This is an extension to the standard FTP analyzer\n  and includes:\n\n      - An analyzer for the GSI mechanism of GSSAPI FTP AUTH method.\n        GSI authentication involves an encoded TLS/SSL handshake over\n        the FTP control session. For FTP sessions that attempt GSI\n        authentication, the ``service`` field of the connection log\n        will include ``gridftp`` (as well as also ``ftp`` and\n        ``ssl``).\n\n      - An example of a GridFTP data channel detection script. It\n        relies on the heuristics of GridFTP data channels commonly\n        default to SSL mutual authentication with a NULL bulk cipher\n        and that they usually transfer large datasets (default\n        threshold of script is 1 GB). For identified GridFTP data\n        channels, the ``services`` fields of the connection log will\n        include ``gridftp-data``.\n\n- Modbus and DNP3 support. Script-level support is only basic at this\n  point but see ``src/analyzer/protocol/{modbus,dnp3}/events.bif``, or\n  the online documentation, for the events Bro generates. For Modbus,\n  there are also some example policies in\n  ``policy/protocols/modbus/*``.\n\n- The documentation now includes a new introduction to writing Bro\n  scripts. See ``doc/scripting/index.rst`` or, much better, the online\n  version. There's also the beginning of a chapter on \"Using Bro\" in\n  ``doc/using/index.rst``.\n\n- GPRS Tunnelling Protocol (GTPv1) decapsulation.\n\n- The scripting language now provide \"hooks\", a new flavor of\n  functions that share characteristics of both standard functions and\n  events. They are like events in that multiple bodies can be defined\n  for the same hook identifier. They are more like functions in the\n  way they are invoked/called, because, unlike events, their execution\n  is immediate and they do not get scheduled through an event queue.\n  Also, a unique feature of a hook is that a given hook handler body\n  can short-circuit the execution of remaining hook handlers simply by\n  exiting from the body as a result of a ``break`` statement (as\n  opposed to a ``return`` or just reaching the end of the body). See\n  ``doc/scripts/builtins.rst``, or the online documentation, for more\n  information.\n\n- Bro's language now has a working ``switch`` statement that generally\n  behaves like C-style switches (except that case labels can be\n  comprised of multiple literal constants delimited by commas).  Only\n  atomic types are allowed for now.  Case label bodies that don't\n  execute a ``return`` or ``break`` statement will fall through to\n  subsequent cases. A ``default`` case label is supported.\n\n- Bro's language now has a new set of types ``opaque of X``. Opaque\n  values can be passed around like other values but they can only be\n  manipulated with BiF functions, not with other operators. Currently,\n  the following opaque types are supported::\n\n        opaque of md5\n        opaque of sha1\n        opaque of sha256\n        opaque of cardinality\n        opaque of topk\n        opaque of bloomfilter\n\n  These go along with the corresponding BiF functions ``md5_*``,\n  ``sha1_*``, ``sha256_*``, ``entropy_*``, etc. . Note that where\n  these functions existed before, they have changed their signatures\n  to work with opaques types rather than global state.\n\n- The scripting language now supports constructing sets, tables,\n  vectors, and records by name::\n\n        type MyRecordType: record {\n            c: count;\n            s: string &optional;\n        };\n\n        global r: MyRecordType = record($c = 7);\n\n        type MySet: set[MyRec];\n        global s = MySet([$c=1], [$c=2]);\n\n- Strings now support the subscript operator to extract individual\n  characters and substrings (e.g., ``s[4]``, ``s[1:5]``). The index\n  expression can take up to two indices for the start and end index of\n  the substring to return (e.g. ``mystring[1:3]``).\n\n- Functions now support default parameters, e.g.::\n\n      global foo: function(s: string, t: string &default=\"abc\", u: count &default=0);\n\n- Scripts can now use two new \"magic constants\" ``@DIR`` and\n  ``@FILENAME`` that expand to the directory path of the current\n  script and just the script file name without path, respectively.\n\n- ``ssl.log`` now also records the subject client and issuer\n  certificates.\n\n- The ASCII writer can now output CSV files on a per filter basis.\n\n- New SQLite reader and writer plugins for the logging framework allow\n  to read/write persistent data from on disk SQLite databases.\n\n- A new packet filter framework supports BPF-based load-balancing,\n  shunting, and sampling; plus plugin support to customize filters\n  dynamically.\n\n- Bro now provides Bloom filters of two kinds: basic Bloom filters\n  supporting membership tests, and counting Bloom filters that track\n  the frequency of elements. The corresponding functions are::\n\n    bloomfilter_basic_init(fp: double, capacity: count, name: string &default=\"\"): opaque of bloomfilter\n    bloomfilter_basic_init2(k: count, cells: count, name: string &default=\"\"): opaque of bloomfilter\n    bloomfilter_counting_init(k: count, cells: count, max: count, name: string &default=\"\"): opaque of bloomfilter\n    bloomfilter_add(bf: opaque of bloomfilter, x: any)\n    bloomfilter_lookup(bf: opaque of bloomfilter, x: any): count\n    bloomfilter_merge(bf1: opaque of bloomfilter, bf2: opaque of bloomfilter): opaque of bloomfilter\n    bloomfilter_clear(bf: opaque of bloomfilter)\n\n  See ``src/probabilistic/bloom-filter.bif``, or the online\n  documentation, for full documentation.\n\n- Bro now provides a probabilistic data structure for computing\n  \"top k\" elements. The corresponding functions are::\n\n    topk_init(size: count): opaque of topk\n    topk_add(handle: opaque of topk, value: any)\n    topk_get_top(handle: opaque of topk, k: count)\n    topk_count(handle: opaque of topk, value: any): count\n    topk_epsilon(handle: opaque of topk, value: any): count\n    topk_size(handle: opaque of topk): count\n    topk_sum(handle: opaque of topk): count\n    topk_merge(handle1: opaque of topk, handle2: opaque of topk)\n    topk_merge_prune(handle1: opaque of topk, handle2: opaque of topk)\n\n  See ``src/probabilistic/top-k.bif``, or the online documentation,\n  for full documentation.\n\n- Bro now provides a probabilistic data structure for computing set\n  cardinality, using the HyperLogLog algorithm.  The corresponding\n  functions are::\n\n    hll_cardinality_init(err: double, confidence: double): opaque of cardinality\n    hll_cardinality_add(handle: opaque of cardinality, elem: any): bool\n    hll_cardinality_merge_into(handle1: opaque of cardinality, handle2: opaque of cardinality): bool\n    hll_cardinality_estimate(handle: opaque of cardinality): double\n    hll_cardinality_copy(handle: opaque of cardinality): opaque of cardinality\n\n  See ``src/probabilistic/cardinality-counter.bif``, or the online\n  documentation, for full documentation.\n\n- ``base/utils/exec.bro`` provides a module to start external\n  processes asynchronously and retrieve their output on termination.\n  ``base/utils/dir.bro`` uses it to monitor a directory for changes,\n  and ``base/utils/active-http.bro`` for providing an interface for\n  querying remote web servers.\n\n- BroControl can now pin Bro processes to CPUs on supported platforms:\n  To use CPU pinning, a new per-node option ``pin_cpus`` can be\n  specified in node.cfg if the OS is either Linux or FreeBSD.\n\n- BroControl now returns useful exit codes.  Most BroControl commands\n  return 0 if everything was OK, and 1 otherwise.  However, there are\n  a few exceptions.  The \"status\" and \"top\" commands return 0 if all Bro\n  nodes are running, and 1 if not all nodes are running.  The \"cron\"\n  command always returns 0 (but it still sends email if there were any\n  problems).  Any command provided by a plugin always returns 0.\n\n- BroControl now has an option \"env_vars\" to set Bro environment variables.\n  The value of this option is a comma-separated list of environment variable\n  assignments (e.g., \"VAR1=value, VAR2=another\").  The \"env_vars\" option\n  can apply to all Bro nodes (by setting it in broctl.cfg), or can be\n  node-specific (by setting it in node.cfg).  Environment variables in\n  node.cfg have priority over any specified in broctl.cfg.\n\n- BroControl now supports load balancing with PF_RING while sniffing\n  multiple interfaces.  Rather than assigning the same PF_RING cluster ID\n  to all workers on a host, cluster ID assignment is now based on which\n  interface a worker is sniffing (i.e., all workers on a host that sniff\n  the same interface will share a cluster ID).  This is handled by\n  BroControl automatically.\n\n- BroControl has several new options:  MailConnectionSummary (for\n  disabling the sending of connection summary report emails),\n  MailAlarmsInterval (for specifying a different interval to send alarm\n  summary emails), CompressCmd (if archived log files will be compressed,\n  this specifies the command that will be used to compress them),\n  CompressExtension (if archived log files will be compressed, this\n  specifies the file extension to use).\n\n- BroControl comes with its own test-suite now. ``make test`` in\n  ``aux/broctl`` will run it.\n\nIn addition to these, Bro 2.2 comes with a large set of smaller\nextensions, tweaks, and fixes across the whole code base, including\nmost submodules.\n\nChanged Functionality\n---------------------\n\n- Previous versions of ``$prefix/share/bro/site/local.bro`` (where\n  \"$prefix\" indicates the installation prefix of Bro), aren't compatible\n  with Bro 2.2.  This file won't be overwritten when installing over a\n  previous Bro installation to prevent clobbering users' modifications,\n  but an example of the new version is located in\n  ``$prefix/share/bro/site/local.bro.example``.  So if no modification\n  has been done to the previous local.bro, just copy the new example\n  version over it, else merge in the differences.  For reference,\n  a common error message when attempting to use an outdated local.bro\n  looks like::\n\n    fatal error in /usr/local/bro/share/bro/policy/frameworks/software/vulnerable.bro, line 41: BroType::AsRecordType (table/record) (set[record { min:record { major:count; minor:count; minor2:count; minor3:count; addl:string; }; max:record { major:count; minor:count; minor2:count; minor3:count; addl:string; }; }])\n\n- The type of ``Software::vulnerable_versions`` changed to allow\n  more flexibility and range specifications.  An example usage:\n\n  .. code:: bro\n\n        const java_1_6_vuln = Software::VulnerableVersionRange(\n            $max = Software::Version($major = 1, $minor = 6, $minor2 = 0, $minor3 = 44)\n        );\n\n        const java_1_7_vuln = Software::VulnerableVersionRange(\n            $min = Software::Version($major = 1, $minor = 7),\n            $max = Software::Version($major = 1, $minor = 7, $minor2 = 0, $minor3 = 20)\n        );\n\n        redef Software::vulnerable_versions += {\n            [\"Java\"] = set(java_1_6_vuln, java_1_7_vuln)\n        };\n\n- The interface to extracting content from application-layer protocols\n  (including HTTP, SMTP, FTP) has changed significantly due to the\n  introduction of the new file analysis framework (see above).\n\n- Removed the following, already deprecated, functionality:\n\n    * Scripting language:\n        - ``&disable_print_hook attribute``.\n\n    * BiF functions:\n        - ``parse_dotted_addr()``, ``dump_config()``,\n          ``make_connection_persistent()``, ``generate_idmef()``,\n          ``split_complete()``\n\n        - ``md5_*``, ``sha1_*``, ``sha256_*``, and ``entropy_*`` have\n          all changed their signatures to work with opaque types (see\n          above).\n\n- Removed a now unused argument from ``do_split`` helper function.\n\n- ``this`` is no longer a reserved keyword.\n\n- The Input Framework's ``update_finished`` event has been renamed to\n  ``end_of_data``. It will now not only fire after table-reads have\n  been completed, but also after the last event of a whole-file-read\n  (or whole-db-read, etc.).\n\n- Renamed the option defining the frequency of alarm summary mails to\n  ``Logging::default_alarm_mail_interval``. When using BroControl, the\n  value can now be set with the new broctl.cfg option\n  ``MailAlarmsInterval``.\n\n- We have completely rewritten the ``notice_policy`` mechanism. It now\n  no longer uses a record of policy items but a ``hook``, a new\n  language element that's roughly equivalent to a function with\n  multiple bodies (see above). For existing code, the two main changes\n  are:\n\n    - What used to be a ``redef`` of ``Notice::policy`` now becomes a\n      hook implementation. Example:\n\n      Old::\n\n        redef Notice::policy += {\n            [$pred(n: Notice::Info) = {\n                return n$note == SSH::Login && n$id$resp_h == 10.0.0.1;\n                },\n            $action = Notice::ACTION_EMAIL]\n            };\n\n      New::\n\n        hook Notice::policy(n: Notice::Info)\n            {\n            if ( n$note == SSH::Login && n$id$resp_h == 10.0.0.1 )\n                add n$actions[Notice::ACTION_EMAIL];\n            }\n\n    - notice() is now likewise a hook, no longer an event. If you\n      have handlers for that event, you'll likely just need to change\n      the type accordingly. Example:\n\n      Old::\n\n        event notice(n: Notice::Info) { ... }\n\n      New::\n\n        hook notice(n: Notice::Info) { ... }\n\n- The ``notice_policy.log`` is gone. That's a result of the new notice\n  policy setup.\n\n- Removed the ``byte_len()`` and ``length()`` bif functions. Use the\n  ``|...|`` operator instead.\n\n- The ``SSH::Login`` notice has been superseded by an corresponding\n  intelligence framework observation (``SSH::SUCCESSFUL_LOGIN``).\n\n- ``PacketFilter::all_packets`` has been replaced with\n  ``PacketFilter::enable_auto_protocol_capture_filters``.\n\n- We removed the BitTorrent DPD signatures pending further updates to\n  that analyzer.\n\n- In previous versions of BroControl, running \"broctl cron\" would create\n  a file ``$prefix/logs/stats/www`` (where \"$prefix\" indicates the\n  installation prefix of Bro).  Now, it is created as a directory.\n  Therefore, if you perform an upgrade install and you're using BroControl,\n  then you may see an email (generated by \"broctl cron\") containing an\n  error message:  \"error running update-stats\".  To fix this problem,\n  either remove that file (it is not needed) or rename it.\n\n- Due to lack of maintenance the Ruby bindings for Broccoli are now\n  deprecated, and the build process no longer includes them by\n  default. For the time being, they can still be enabled by\n  configuring with ``--enable-ruby``, however we plan to remove\n  Broccoli's Ruby support with the next Bro release.\n\nBro 2.1\n=======\n\nNew Functionality\n-----------------\n\n- Bro now comes with extensive IPv6 support. Past versions offered\n  only basic IPv6 functionality that was rarely used in practice as it\n  had to be enabled explicitly. IPv6 support is now fully integrated\n  into all parts of Bro including protocol analysis and the scripting\n  language. It's on by default and no longer requires any special\n  configuration.\n\n  Some of the most significant enhancements include support for IPv6\n  fragment reassembly, support for following IPv6 extension header\n  chains, and support for tunnel decapsulation (6to4 and Teredo). The\n  DNS analyzer now handles AAAA records properly, and DNS lookups that\n  Bro itself performs now include AAAA queries, so that, for example,\n  the result returned by script-level lookups is a set that can\n  contain both IPv4 and IPv6 addresses. Support for the most common\n  ICMPv6 message types has been added. Also, the FTP EPSV and EPRT\n  commands are now handled properly. Internally, the way IP addresses\n  are stored has been improved, so Bro can handle both IPv4\n  and IPv6 by default without any special configuration.\n\n  In addition to Bro itself, the other Bro components have also been\n  made IPv6-aware by default. In particular, significant changes were\n  made to trace-summary, PySubnetTree, and Broccoli to support IPv6.\n\n- Bro now decapsulates tunnels via its new tunnel framework located in\n  scripts/base/frameworks/tunnels. It currently supports Teredo,\n  AYIYA, IP-in-IP (both IPv4 and IPv6), and SOCKS. For all these, it\n  logs the outer tunnel connections in both conn.log and tunnel.log,\n  and then proceeds to analyze the inner payload as if it were not\n  tunneled, including also logging that session in conn.log. For\n  SOCKS, it generates a new socks.log in addition with more\n  information.\n\n- Bro now features a flexible input framework that allows users to\n  integrate external information in real-time into Bro while it's\n  processing network traffic. The most direct use-case at the moment\n  is reading data from ASCII files into Bro tables, with updates\n  picked up automatically when the file changes during runtime. See\n  doc/input.rst for more information.\n\n  Internally, the input framework is structured around the notion of\n  \"reader plugins\" that make it easy to interface to different data\n  sources. We will add more in the future.\n\n- BroControl now has built-in support for host-based load-balancing\n  when using either PF_RING, Myricom cards, or individual interfaces.\n  Instead of adding a separate worker entry in node.cfg for each Bro\n  worker process on each worker host, it is now possible to just\n  specify the number of worker processes on each host and BroControl\n  configures everything correctly (including any necessary environment\n  variables for the balancers).\n\n  This change adds three new keywords to the node.cfg file (to be used\n  with worker entries): lb_procs (specifies number of workers on a\n  host), lb_method (specifies what type of load balancing to use:\n  pf_ring, myricom, or interfaces), and lb_interfaces (used only with\n  \"lb_method=interfaces\" to specify which interfaces to load-balance\n  on).\n\n- Bro's default ASCII log format is not exactly the most efficient way\n  for storing and searching large volumes of data. An alternatives,\n  Bro now comes with experimental support for two alternative output\n  formats:\n\n    * DataSeries: an efficient binary format for recording structured\n      bulk data. DataSeries is developed and maintained at HP Labs.\n      See doc/logging-dataseries for more information.\n\n    * ElasticSearch: a distributed RESTful, storage engine and search\n      engine built on top of Apache Lucene. It scales very well, both\n      for distributed indexing and distributed searching. See\n      doc/logging-elasticsearch.rst for more information.\n\n  Note that at this point, we consider Bro's support for these two\n  formats as prototypes for collecting experience with alternative\n  outputs. We do not yet recommend them for production (but welcome\n  feedback!)\n\n\nChanged Functionality\n---------------------\n\nThe following summarizes the most important differences in existing\nfunctionality. Note that this list is not complete, see CHANGES for\nthe full set.\n\n- Changes in dependencies:\n\n    * Bro now requires CMake >= 2.6.3.\n\n    * On Linux, Bro now links in tcmalloc (part of Google perftools)\n      if found at configure time. Doing so can significantly improve\n      memory and CPU use.\n\n      On the other platforms, the new configure option\n      --enable-perftools can be used to enable linking to tcmalloc.\n      (Note that perftools's support for non-Linux platforms may be\n      less reliable).\n\n- The configure switch --enable-brov6 is gone.\n\n- DNS name lookups performed by Bro now also query AAAA records. The\n  results of the A and AAAA queries for a given hostname are combined\n  such that at the scripting layer, the name resolution can yield a\n  set with both IPv4 and IPv6 addresses.\n\n- The connection compressor was already deprecated in 2.0 and has now\n  been removed from the code base.\n\n- We removed the \"match\" statement, which was no longer used by any of\n  the default scripts, nor was it likely to be used by anybody anytime\n  soon. With that, \"match\" and \"using\" are no longer reserved keywords.\n\n- The syntax for IPv6 literals changed from \"2607:f8b0:4009:802::1012\"\n  to \"[2607:f8b0:4009:802::1012]\". When an IP address variable or IP\n  address literal is enclosed in pipes (for example,\n  ``|[fe80::db15]|``) the result is now the size of the address in\n  bits (32 for IPv4 and 128 for IPv6).\n\n- Bro now spawns threads for doing its logging. From a user's\n  perspective not much should change, except that the OS may now show\n  a bunch of Bro threads.\n\n- We renamed the configure option --enable-perftools to\n  --enable-perftools-debug to indicate that the switch is only relevant\n  for debugging the heap.\n\n- Bro's ICMP analyzer now handles both IPv4 and IPv6 messages with a\n  joint set of events.  The `icmp_conn` record got a new boolean field\n  'v6' that indicates whether the ICMP message is v4 or v6.\n\n- Log postprocessor scripts get an additional argument indicating the\n  type of the log writer in use (e.g., \"ascii\").\n\n- BroControl's make-archive-name script also receives the writer\n  type, but as its 2nd(!) argument. If you're using a custom version\n  of that script, you need to adapt it. See the shipped version for\n  details.\n\n- Signature files can now be loaded via the new \"@load-sigs\"\n  directive. In contrast to the existing (and still supported)\n  signature_files constant, this can be used to load signatures\n  relative to the current script (e.g., \"@load-sigs ./foo.sig\").\n\n- The options \"tunnel_port\" and \"parse_udp_tunnels\" have been removed.\n  Bro now supports decapsulating tunnels directly for protocols it\n  understands.\n\n- ASCII logs now record the time when they were opened/closed at the\n  beginning and end of the file, respectively (wall clock). The\n  options LogAscii::header_prefix and LogAscii::include_header have\n  been renamed to LogAscii::meta_prefix and LogAscii::include_meta,\n  respectively.\n\n- The ASCII writers \"header_*\" options have been renamed to \"meta_*\"\n  (because there's now also a footer).\n\n- Some built-in functions have been removed: \"addr_to_count\" (use\n  \"addr_to_counts\" instead), \"bro_has_ipv6\" (this is no longer\n  relevant because Bro now always supports IPv6), \"active_connection\"\n  (use \"connection_exists\" instead), and \"connection_record\" (use\n  \"lookup_connection\" instead).\n\n- The \"NFS3::mode2string\" built-in function has been renamed to\n  \"file_mode\".\n\n- Some built-in functions have been changed: \"exit\" (now takes the\n  exit code as a parameter), \"to_port\" (now takes a string as\n  parameter instead of a count and transport protocol, but\n  \"count_to_port\" is still available), \"connect\" (now takes an\n  additional string parameter specifying the zone of a non-global IPv6\n  address), and \"listen\" (now takes three additional parameters to\n  enable listening on IPv6 addresses).\n\n- Some Bro script variables have been renamed:\n  \"LogAscii::header_prefix\" has been renamed to\n  \"LogAscii::meta_prefix\", \"LogAscii::include_header\" has been renamed\n  to \"LogAscii::include_meta\".\n\n- Some Bro script variables have been removed: \"tunnel_port\",\n  \"parse_udp_tunnels\", \"use_connection_compressor\",\n  \"cc_handle_resets\", \"cc_handle_only_syns\", and\n  \"cc_instantiate_on_data\".\n\n- A couple events have changed: the \"icmp_redirect\" event now includes\n  the target and destination addresses and any Neighbor Discovery\n  options in the message, and the last parameter of the\n  \"dns_AAAA_reply\" event has been removed because it was unused.\n\n- The format of the ASCII log files has changed very slightly.  Two\n  new lines are automatically added, one to record the time when the\n  log was opened, and the other to record the time when the log was\n  closed.\n\n- In BroControl, the option (in broctl.cfg) \"CFlowAddr\" was renamed to\n  \"CFlowAddress\".\n\n\nBro 2.0\n=======\n\nAs the version number jump from 1.5 suggests, Bro 2.0 is a major\nupgrade and lots of things have changed. Most importantly, we have\nrewritten almost all of Bro's default scripts from scratch, using\nquite different structure now and focusing more on operational\ndeployment. The result is a system that works much better \"out of the\nbox\", even without much initial site-specific configuration. The\ndown-side is that 1.x configurations will need to be adapted to work\nwith the new version. The two rules of thumb are:\n\n    (1) If you have written your own Bro scripts\n        that do not depend on any of the standard scripts formerly\n        found in ``policy/``, they will most likely just keep working\n        (although you might want to adapt them to use some of the new\n        features, like the new logging framework; see below).\n\n    (2) If you have custom code that depends on specifics of 1.x\n        default scripts (including most configuration tuning), that is\n        unlikely to work with 2.x. We recommend to start by using just\n        the new scripts first, and then port over any customizations\n        incrementally as necessary (they may be much easier to do now,\n        or even unnecessary). Send mail to the Bro user mailing list\n        if you need help.\n\nBelow we summarize changes from 1.x to 2.x in more detail. This list\nisn't complete, see the ``CHANGES`` file in the distribution.\nfor the full story.\n\nScript Organization\n-------------------\n\nIn versions before 2.0, Bro scripts were all maintained in a flat\ndirectory called ``policy/`` in the source tree.  This directory is now\nrenamed to ``scripts/`` and contains major subdirectories ``base/``,\n``policy/``, and ``site/``, each of which may also be subdivided\nfurther.\n\nThe contents of the new ``scripts/`` directory, like the old/flat\n``policy/`` still gets installed under the ``share/bro``\nsubdirectory of the installation prefix path just like previous\nversions.  For example, if Bro was compiled like ``./configure\n--prefix=/usr/local/bro && make && make install``, then the script\nhierarchy can be found in ``/usr/local/bro/share/bro``.\n\nThe main\nsubdirectories of that hierarchy are as follows:\n\n- ``base/`` contains all scripts that are loaded by Bro by default\n  (unless the ``-b`` command line option is used to run Bro in a\n  minimal configuration). Note that is a major conceptual change:\n  rather than not loading anything by default, Bro now uses an\n  extensive set of default scripts out of the box.\n\n  The scripts under this directory generally either accumulate/log\n  useful state/protocol information for monitored traffic, configure a\n  default/recommended mode of operation, or provide extra Bro\n  scripting-layer functionality that has no significant performance cost.\n\n- ``policy/`` contains all scripts that a user will need to explicitly\n  tell Bro to load.  These are scripts that implement\n  functionality/analysis that not all users may want to use and may have\n  more significant performance costs. For a new installation, you\n  should go through these and see what appears useful to load.\n\n- ``site/`` remains a directory that can be used to store locally\n  developed scripts. It now comes with some preinstalled example\n  scripts that contain recommended default configurations going beyond\n  the ``base/`` setup. E.g. ``local.bro`` loads extra scripts from\n  ``policy/`` and does extra tuning. These files can be customized in\n  place without being overwritten by upgrades/reinstalls, unlike\n  scripts in other directories.\n\nWith version 2.0, the default ``BROPATH`` is set to automatically\nsearch for scripts in ``policy/``, ``site/`` and their parent\ndirectory, but **not** ``base/``.  Generally, everything under\n``base/`` is loaded automatically, but for users of the ``-b`` option,\nit's important to know that loading a script in that directory\nrequires the extra ``base/`` path qualification.  For example, the\nfollowing two scripts:\n\n* ``$PREFIX/share/bro/base/protocols/ssl/main.bro``\n* ``$PREFIX/share/bro/policy/protocols/ssl/validate-certs.bro``\n\nare referenced from another Bro script like:\n\n.. code:: bro\n\n    @load base/protocols/ssl/main\n    @load protocols/ssl/validate-certs\n\nNotice how ``policy/`` can be omitted as a convenience in the second\ncase. ``@load`` can now also use relative path, e.g., ``@load\n../main``.\n\n\nLogging Framework\n-----------------\n\n- The logs generated by scripts that ship with Bro are entirely redone\n  to use a standardized, machine parsable format via the new logging\n  framework. Generally, the log content has been restructured towards\n  making it more directly useful to operations. Also, several\n  analyzers have been significantly extended and thus now log more\n  information. Take a look at ``ssl.log``.\n\n  * A particular format change that may be useful to note is that the\n    ``conn.log`` ``service`` field is derived from DPD instead of\n    well-known ports (while that was already possible in 1.5, it was\n    not the default).\n\n  * Also, ``conn.log`` now reports raw number of packets/bytes per\n    endpoint.\n\n- The new logging framework makes it possible to extend, customize,\n  and filter logs very easily.\n\n- A common pattern found in the new scripts is to store logging stream\n  records for protocols inside the ``connection`` records so that\n  state can be collected until enough is seen to log a coherent unit\n  of information regarding the activity of that connection.  This\n  state is now frequently seen/accessible in event handlers, for\n  example, like ``c$<protocol>`` where ``<protocol>`` is replaced by\n  the name of the protocol.  This field is added to the ``connection``\n  record by ``redef``'ing it in a\n  ``base/protocols/<protocol>/main.bro`` script.\n\n- The logging code has been rewritten internally, with script-level\n  interface and output backend now clearly separated. While ASCII\n  logging is still the default, we will add further output types in\n  the future (binary format, direct database logging).\n\n\nNotice Framework\n----------------\n\nThe way users interact with \"notices\" has changed significantly in order\nto make it easier to define a site policy and more extensible for adding\ncustomized actions.\n\n\nNew Default Settings\n--------------------\n\n- Dynamic Protocol Detection (DPD) is now enabled/loaded by default.\n\n- The default packet filter now examines all packets instead of\n  dynamically building a filter based on which protocol analysis scripts\n  are loaded. See ``PacketFilter::all_packets`` for how to revert to old\n  behavior.\n\nAPI Changes\n-----------\n\n- The ``@prefixes`` directive works differently now.\n  Any added prefixes are now searched for and loaded *after* all input\n  files have been parsed.  After all input files are parsed, Bro\n  searches ``BROPATH`` for prefixed, flattened versions of all of the\n  parsed input files.  For example, if ``lcl`` is in ``@prefixes``, and\n  ``site.bro`` is loaded, then a file named ``lcl.site.bro`` that's in\n  ``BROPATH`` would end up being automatically loaded as well.  Packages\n  work similarly, e.g. loading ``protocols/http`` means a file named\n  ``lcl.protocols.http.bro`` in ``BROPATH`` gets loaded automatically.\n\n- The ``make_addr`` BIF now returns a ``subnet`` versus an ``addr``\n\n\nVariable Naming\n---------------\n\n- ``Module`` is more widely used for namespacing. E.g. the new\n  ``site.bro`` exports the ``local_nets`` identifier (among other\n  things) into the ``Site`` module.\n\n- Identifiers may have been renamed to conform to new `scripting\n  conventions\n  <http://www.bro.org/development/howtos/script-conventions.html>`_\n\n\nRemoved Functionality\n---------------------\n\nWe have remove a bunch of functionality that was rarely used and/or\nhad not been maintained for a while already:\n\n    - The ``net`` script data type.\n    - The ``alarm`` statement; use the notice framework instead.\n    - Trace rewriting.\n    - DFA state expiration in regexp engine.\n    - Active mapping.\n    - Native DAG support (may come back eventually)\n    - ClamAV support.\n    - The connection compressor is now disabled by default, and will\n      be removed in the future.\n\nBroControl Changes\n------------------\n\nBroControl looks pretty much similar to the version coming with Bro 1.x,\nbut has been cleaned up and streamlined significantly internally.\n\nBroControl has a new ``process`` command to process a trace on disk\noffline using a similar configuration to what BroControl installs for\nlive analysis.\n\nBroControl now has an extensive plugin interface for adding new\ncommands and options. Note that this is still considered experimental.\n\nWe have removed the ``analysis`` command, and BroControl currently\ndoes not send daily alarm summaries anymore (this may be restored\nlater).\n\nDevelopment Infrastructure\n--------------------------\n\nBro development has moved from using SVN to Git for revision control.\nUsers that want to use the latest Bro development snapshot by checking it out\nfrom the source repositories should see the `development process\n<http://www.bro.org/development/process.html>`_. Note that all the various\nsub-components now reside in their own repositories. However, the\ntop-level Bro repository includes them as git submodules so it's easy\nto check them all out simultaneously.\n\nBro now uses `CMake <http://www.cmake.org>`_ for its build system so\nthat is a new required dependency when building from source.\n\nBro now comes with a growing suite of regression tests in\n``testing/``.\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 3.17578125,
          "content": "=================================\nThe Zeek Network Security Monitor\n=================================\n\nZeek is a powerful framework for network traffic analysis and security\nmonitoring. Follow us on Twitter at @zeekurity.\n\nKey Features\n============\n\n*   **In-depth Analysis**\n    Zeek ships with analyzers for many protocols, enabling\n    high-level semantic analysis at the application layer.\n\n*   **Adaptable & Flexible**\n    Zeek's domain specific scripting language enables site-specific\n    monitoring policies and means that it is not restricted to any\n    particular detection approach.\n\n*   **Efficient**\n    Zeek targets high-performance networks and is used operationally\n    at a variety of large sites.\n\n*   **Highly Stateful**\n    Zeek keeps extensive application-layer state about the network\n    it monitors and provides a high-level archive of a network's\n    activity.\n\nGetting Started\n===============\n\nThe best place to find information about getting started with Zeek is\nour web site https://www.zeek.org, specifically the documentation\nsection there [1]. One the web site you can also get downloads for\nstable releases, tutorials on getting Zeek set up, and many other\nuseful resources.\n\nYou can find release notes in NEWS, and a complete record of all\nchanges in CHANGES.\n\nTo work with the most recent code from the development branch of Zeek,\nclone the master git repository:\n\n    > git clone --recursive https://github.com/zeek/zeek\n\nWith all dependencies [2] in place, build and install:\n\n    > ./configure && make && sudo make install\n\nWrite your first Zeek script:\n\n    # File \"hello.zeek\"\n\n    event zeek_init()\n        {\n        print \"Hello, World!\";\n        }\n\nAnd run it:\n\n    > zeek hello.zeek\n\nFor learning more about the Zeek scripting language,\nhttps://try.zeek.org is a great resource.\n\nDevelopment\n===========\n\nZeek is developed on GitHub by its community. We welcome\ncontributions. Working on an open source project like Zeek can be an\nincredibly rewarding experience and, packet by packet, makes the\nInternet a little safer. Today, as a result of countless\ncontributions, Zeek is used operationally around the world by major\ncompanies and educational and scientific institutions alike for\nsecuring their cyber infrastructure.\n\nIf you're interested in getting involved, we collect feature requests\nand issues on GitHub. More information on Zeek's development can be\nfound here [2], and information about its community and mailing lists\n(which are fairly active) can be found here [3].\n\nLicense\n-------\n\nZeek comes with a BSD license, allowing for free use with virtually no\nrestrictions. You can find it in COPYING.\n\nTooling\n-------\n\nWe use the following tooling to help discover issues to fix, amongst a number of\nothers.\n\n- Clang-Tidy [5]\n- Coverity [6]\n- PVS-Studio - static analyzer for C, C++, C#, and Java code [7]\n\n[1] https://www.zeek.org/documentation/index.html\n[2] https://docs.zeek.org/en/stable/install/install.html\n[3] https://www.zeek.org/development/index.html\n[4] https://www.zeek.org/community/index.html\n[5] https://clang.llvm.org/extra/clang-tidy/\n[6] https://scan.coverity.com/projects/bro\n[7] https://pvs-studio.com/en/pvs-studio/?utm_source=github&utm_medium=organic&utm_campaign=open_source"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.267578125,
          "content": "<h1 align=\"center\">\n\n[![Zeek Logo](https://zeek.org/wp-content/uploads/2020/04/zeek-logo-without-text.png)](https://www.zeek.org)\n\nThe Zeek Network Security Monitor\n\n</h1><h4 align=\"center\">\n\nA [powerful](https://old.zeek.org/why_choose_zeek.pdf) framework for network\ntraffic analysis and security monitoring.\n\n[_Key Features_](#key-features) —\n[_Documentation_](https://docs.zeek.org/en/stable/index.html) —\n[_Getting Started_](#getting-started) —\n[_Development_](#development) —\n[_License_](#license)\n\nFollow us on Twitter at [@zeekurity](https://twitter.com/zeekurity).\n\n[![Coverage Status](https://coveralls.io/repos/github/zeek/zeek/badge.svg?branch=master)](https://coveralls.io/github/zeek/zeek?branch=master)\n[![Build Status](https://img.shields.io/cirrus/github/zeek/zeek)](https://cirrus-ci.com/github/zeek/zeek)\n\n[![Slack](https://img.shields.io/badge/slack-@zeek-brightgreen.svg?logo=slack)](https://zeek.org/slack)\n[![Discourse](https://img.shields.io/discourse/status?server=https%3A%2F%2Fcommunity.zeek.org)](https://community.zeek.org)\n\n</h4>\n\n\nKey Features\n--------------\n\n* __In-depth Analysis__\n\tZeek ships with analyzers for many protocols, enabling high-level semantic\n  analysis at the application layer.\n\n* __Adaptable and Flexible__\n\tZeek's domain-specific scripting language enables site-specific monitoring\n  policies and means that it is not restricted to any particular detection\n  approach.\n\n* __Efficient__\n\tZeek targets high-performance networks and is used operationally at a variety\n  of large sites.\n\n* __Highly Stateful__\n\tZeek keeps extensive application-layer state about the network it monitors\n  and provides a high-level archive of a network's activity.\n\nGetting Started\n---------------\n\nThe best place to find information about getting started with Zeek is\nour web site [www.zeek.org](https://www.zeek.org), specifically the\n[documentation](https://www.zeek.org/documentation/index.html) section\nthere. On the web site you can also find downloads for stable\nreleases, tutorials on getting Zeek set up, and many other useful\nresources.\n\nYou can find release notes in [NEWS](https://github.com/zeek/zeek/blob/master/NEWS),\nand a complete record of all changes in [CHANGES](https://github.com/zeek/zeek/blob/master/CHANGES).\n\nTo work with the most recent code from the development branch of Zeek,\nclone the master git repository:\n\n`git clone --recursive https://github.com/zeek/zeek`\n\nWith all [dependencies](https://docs.zeek.org/en/stable/install/install.html#prerequisites)\nin place, build and install:\n\n`./configure && make && sudo make install`\n\nWrite your first Zeek script:\n\n```zeek\n# File \"hello.zeek\"\n\nevent zeek_init()\n    {\n    print \"Hello World!\";\n    }\n```\n\nAnd run it:\n\n`zeek hello.zeek`\n\nFor learning more about the Zeek scripting\nlanguage, [try.zeek.org](http://try.zeek.org) is a great resource.\n\nDevelopment\n-----------\n\nZeek is developed on GitHub by its community. We welcome\ncontributions. Working on an open source project like Zeek can be an\nincredibly rewarding experience and, packet by packet, makes the\nInternet a little safer. Today, as a result of countless\ncontributions, Zeek is used operationally around the world by major\ncompanies and educational and scientific institutions alike for\nsecuring their cyber infrastructure.\n\nIf you're interested in getting involved, we collect feature requests\nand issues on GitHub [here](https://github.com/zeek/zeek/issues) and\nyou might find\n[these](https://github.com/zeek/zeek/labels/good%20first%20issue)\nto be a good place to get started. More information on Zeek's\ndevelopment can be found\n[here](https://www.zeek.org/development/index.html), and information\nabout its community and mailing lists (which are fairly active) can be\nfound [here](https://www.zeek.org/community/index.html).\n\nLicense\n-------\n\nZeek comes with a BSD license, allowing for free use with virtually no\nrestrictions. You can find it [here](https://github.com/zeek/zeek/blob/master/COPYING).\n\n\nTooling\n-------\n\nWe use the following tooling to help discover issues to fix, amongst a number of\nothers.\n\n- [Clang-Tidy](https://clang.llvm.org/extra/clang-tidy/)\n- [Coverity](https://scan.coverity.com/projects/bro)\n- [PVS-Studio](https://pvs-studio.com/en/pvs-studio/?utm_source=github&utm_medium=organic&utm_campaign=open_source) - static analyzer for C, C++, C#, and Java code.\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0126953125,
          "content": "7.2.0-dev.64\n"
        },
        {
          "name": "auxil",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "commit",
          "content": null
        },
        {
          "name": "cmake_templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 19.1962890625,
          "content": "#!/bin/sh\n# Convenience wrapper for easily viewing/setting options that\n# the project's CMake scripts will recognize\nset -e\n\ntrap '[ $? -eq 0 ] && exit 0 ||\necho \"Also, before re-running configure, consider cleaning the cache \\\n(removing the build directory) via \\`make distclean\\`\"' EXIT\n\ncommand=\"$0 $*\"\n\nusage=\"\\\nUsage: $0 [OPTION]... [VAR=VALUE]...\n\n  -h, --help                    display this help and exit\n  --show-config                 display the most relevant config parameters of an existing build\n\n  Build Options:\n    --cmake=PATH                custom path to a CMake binary\n    --builddir=DIR              place build files in directory [build]\n    --build-dir=DIR             alias for --builddir\n    --build-type=TYPE           set CMake build type [RelWithDebInfo]:\n                                  - Debug: optimizations off, debug symbols + flags\n                                  - MinSizeRel: size optimizations, debugging off\n                                  - Release: optimizations on, debugging off\n                                  - RelWithDebInfo: optimizations on,\n                                        debug symbols on, debug flags off\n    --generator=GENERATOR       CMake generator to use (see cmake --help)\n    --ccache                    use ccache to speed up recompilation (requires\n                                ccache installation and CMake 3.10+)\n    --toolchain=PATH            path to a CMAKE_TOOLCHAIN_FILE\n                                (useful for cross-compiling)\n    --sanitizers=LIST           comma-separated list of sanitizer names to enable\n    --include-plugins=PATHS     paths containing plugins to build directly into Zeek\n                                (semicolon delimited and quoted when multiple)\n    --localversion=version      version contains an additional, custom version string\n                                that is appended to the standard Zeek version string,\n                                with a dash [-] separating the two.\n\n  Installation Directories:\n    --prefix=PREFIX        installation directory [/usr/local/zeek]\n    --scriptdir=PATH       root installation directory for Zeek scripts\n                           [PREFIX/share/zeek]\n    --localstatedir=PATH   when using ZeekControl, path to store log files\n                           and run-time data (within log/ and spool/ subdirs)\n                           [PREFIX]\n    --spooldir=PATH        directory for in-progress logs [PREFIX/spool]\n    --statedir=PATH        directory for variable state [PREFIX/var/lib]\n    --logdir=PATH          directory for finalized logs [PREFIX/logs]\n    --libdir=PATH          installation directory for library files [PREFIX/lib]\n    --plugindir=PATH       installation directory for plugins [LIBDIR/zeek/plugin]\n    --conf-files-dir=PATH  installation directory for config files [PREFIX/etc]\n    --mandir=PATH          installation path for man pages [PREFIX/share/man]\n    --python-dir=PATH      explicit installation directory for Python modules\n    --python-prefix=PATH   versioned installation directory for Python modules,\n                           like setup.py install --prefix\n                           [PATH/lib/python<Python Version>/site-packages]\n    --python-home=PATH     installation path for Python modules, like setup.py's\n                           install --home [PATH/lib/python]\n\n  Optional Features:\n    --enable-coverage      compile with code coverage support (implies debugging mode)\n    --enable-debug         compile in debugging mode (like --build-type=Debug)\n    --enable-fuzzers       build fuzzer targets\n    --enable-jemalloc      link against jemalloc\n    --enable-perftools     enable use of Google perftools (use tcmalloc)\n    --enable-perftools-debug use Google's perftools for debugging\n    --enable-static-binpac build binpac statically (ignored if --with-binpac is specified)\n    --enable-static-broker build Broker statically (ignored if --with-broker is specified)\n    --enable-werror        build with -Werror\n    --enable-ZAM-profiling build with ZAM profiling enabled (--enable-debug implies this)\n    --enable-spicy-ssl     build with spicy SSL/TLS analyzer (conflicts with --disable-spicy)\n    --disable-af-packet    don't include native AF_PACKET support (Linux only)\n    --disable-auxtools     don't build or install auxiliary tools\n    --disable-broker-tests don't try to build Broker unit tests\n    --disable-btest        don't install BTest\n    --disable-btest-pcaps  don't install Zeek's BTest input pcaps\n    --disable-cluster-backend-zeromq don't build Zeek's ZeroMQ cluster backend\n    --disable-cpp-tests    don't build Zeek's C++ unit tests\n    --disable-javascript   don't build Zeek's JavaScript support\n    --disable-port-prealloc disable pre-allocating the PortVal array in ValManager\n    --disable-python       don't try to build python bindings for Broker\n    --disable-spicy        don't include Spicy\n    --disable-zeek-client  don't install Zeek cluster management client\n    --disable-zeekctl      don't install ZeekControl\n    --disable-zkg          don't install zkg\n\n  Required Packages in Non-Standard Locations:\n    --with-bifcl=PATH      path to Zeek BIF compiler executable\n                           (useful for cross-compiling)\n    --with-bind=PATH       path to BIND install root\n    --with-binpac=PATH     path to BinPAC executable\n                           (useful for cross-compiling)\n    --with-bison=PATH      path to bison executable\n    --with-broker=PATH     path to Broker install root\n                           (Zeek uses an embedded version by default)\n    --with-gen-zam=PATH    path to Gen-ZAM code generator\n                           (Zeek uses an embedded version by default)\n    --with-flex=PATH       path to flex executable\n    --with-libkqueue=PATH  path to libkqueue install root\n                           (Zeek uses an embedded version by default)\n    --with-openssl=PATH    path to OpenSSL install root\n    --with-pcap=PATH       path to libpcap install root\n    --with-python=PATH     path to Python executable\n\n  Optional Packages in Non-Standard Locations:\n    --with-geoip=PATH      path to the libmaxminddb install root\n    --with-jemalloc=PATH   path to jemalloc install root\n    --with-krb5=PATH       path to krb5 install root\n    --with-perftools=PATH  path to Google Perftools install root\n    --with-python-inc=PATH path to Python headers\n    --with-python-lib=PATH path to libpython\n    --with-spicy=PATH      path to Spicy install root\n    --with-swig=PATH       path to SWIG executable\n\n  Packaging Options (for developers):\n    --binary-package       toggle special logic for binary packaging\n    --ignore-dirs=PATHS    paths to ignore when creating source package\n                           (semicolon delimited and quoted when multiple)\n    --pkg-name-prefix=NAME use the given name as the package prefix instead\n                           of the default CMake project name\n    --osx-sysroot=PATH     path to the OS X SDK to compile against\n    --osx-min-version=VER  minimum OS X version (the deployment target)\n\n    --display-cmake        don't create build configuration, just output final CMake invocation\n\n  Advanced Options (for developers):\n    -D PARAM               passes a parameter directly to CMake\n\n  Influential Environment Variables (only on first invocation\n  per build directory):\n    CC                     C compiler command\n    CFLAGS                 C compiler flags\n    CXX                    C++ compiler command\n    CXXFLAGS               C++ compiler flags\n\"\n\nsourcedir=\"$(cd \"$(dirname \"$0\")\" && pwd)\"\n\nif [ ! -e \"$sourcedir/cmake/COPYING\" ]; then\n    if [ -d \"$sourcedir/.git\" ]; then\n        echo \"\\\nYou seem to be missing the content of the cmake directory.\n\nThis typically means that you performed a non-recursive git clone of\nZeek. To check out the required subdirectories, please execute:\n\n  ( cd $sourcedir && git submodule update --recursive --init )\n\" >&2\n    else\n        echo \"\\\nYou seem to be missing the content of the cmake directory.\n\nThis typically means that you downloaded a non-release archive from github.\nThese archives do not contain all required files.\n\nIf you want to download the current release of Zeek, please download a full\narchive using one of the links at https://zeek.org/get-zeek/.\n\nIf you want to get the current development version of Zeek, please use git to\nclone our repository.\n\nSee https://docs.zeek.org/en/master/install.html#retrieving-the-sources for\ninstructions.\n\" >&2\n    fi\n    exit 1\nfi\n\n# Function to append a CMake cache entry definition to the\n# CMakeCacheEntries variable.\n#   $1 is the cache entry variable name\n#   $2 is the cache entry variable type\n#   $3 is the cache entry variable value\nappend_cache_entry() {\n    CMakeCacheEntries=\"$CMakeCacheEntries -D $1:$2=$3\"\n}\n\n# set defaults\nbuilddir=build\nCMakeCacheEntries=\"\"\ndisplay_cmake=0\nhas_disable_archiver=0\n\n# parse arguments\nwhile [ $# -ne 0 ]; do\n    case \"$1\" in\n        -*=*) optarg=$(echo \"$1\" | sed 's/[-_a-zA-Z0-9]*=//') ;;\n        *) optarg= ;;\n    esac\n\n    case \"$1\" in\n        --help | -h)\n            echo \"${usage}\" 1>&2\n            exit 1\n            ;;\n        --show-config)\n            if [ ! -f \"$builddir/CMakeCache.txt\" ]; then\n                echo \"Error: no CMake build found under '$builddir'.\" 1>&2\n                exit 1\n            fi\n            grep -E \"^ENABLE_|^ZEEK_|^INSTALL_|^CMAKE_INSTALL_PRE|^CMAKE_C.*_FLAGS|^CMAKE_C.*_COMPILER|^CMAKE_.*_LINKER_FLAGS|^CMAKE_BUILD\" \"$builddir/CMakeCache.txt\" | grep -v ':INTERNAL'\n            exit 0\n            ;;\n        -D)\n            shift\n            if [ $# -eq 0 ]; then\n                echo \"Error: -D requires an argument.\"\n                exit 1\n            fi\n            CMakeCacheEntries=\"$CMakeCacheEntries -D $1\"\n            ;;\n        --cmake=*)\n            CMakeCommand=$optarg\n            ;;\n        --builddir=*)\n            builddir=$optarg\n            ;;\n        --build-dir=*)\n            builddir=$optarg\n            ;;\n        --build-type=*)\n            append_cache_entry CMAKE_BUILD_TYPE STRING $optarg\n            ;;\n        --generator=*)\n            CMakeGenerator=\"$optarg\"\n            ;;\n        --ccache)\n            append_cache_entry ENABLE_CCACHE BOOL true\n            ;;\n        --toolchain=*)\n            append_cache_entry CMAKE_TOOLCHAIN_FILE PATH $optarg\n            ;;\n        --include-plugins=*)\n            append_cache_entry ZEEK_INCLUDE_PLUGINS STRING \\\"$optarg\\\"\n            ;;\n        --localversion=*)\n            append_cache_entry ZEEK_VERSION_LOCAL STRING \\\"$optarg\\\"\n            ;;\n        --prefix=*)\n            append_cache_entry CMAKE_INSTALL_PREFIX PATH $optarg\n            ;;\n        --libdir=*)\n            append_cache_entry CMAKE_INSTALL_LIBDIR PATH $optarg\n            ;;\n        --plugindir=*)\n            append_cache_entry ZEEK_PLUGIN_DIR PATH $optarg\n            ;;\n        --python-dir=*)\n            append_cache_entry ZEEK_PYTHON_DIR PATH $optarg\n            ;;\n        --python-prefix=*)\n            append_cache_entry ZEEK_PYTHON_PREFIX PATH $optarg\n            ;;\n        --python-home=*)\n            append_cache_entry ZEEK_PYTHON_HOME PATH $optarg\n            ;;\n        --scriptdir=*)\n            append_cache_entry ZEEK_SCRIPT_INSTALL_PATH STRING $optarg\n            user_set_scriptdir=\"true\"\n            ;;\n        --conf-files-dir=*)\n            append_cache_entry ZEEK_ETC_INSTALL_DIR PATH $optarg\n            user_set_conffilesdir=\"true\"\n            ;;\n        --localstatedir=*)\n            append_cache_entry ZEEK_LOCAL_STATE_DIR PATH $optarg\n            ;;\n        --spooldir=*)\n            append_cache_entry ZEEK_SPOOL_DIR PATH $optarg\n            ;;\n        --statedir=*)\n            append_cache_entry ZEEK_STATE_DIR PATH $optarg\n            ;;\n        --logdir=*)\n            append_cache_entry ZEEK_LOG_DIR PATH $optarg\n            ;;\n        --mandir=*)\n            append_cache_entry ZEEK_MAN_INSTALL_PATH PATH $optarg\n            ;;\n        --enable-coverage)\n            append_cache_entry ENABLE_COVERAGE BOOL true\n            append_cache_entry ENABLE_DEBUG BOOL true\n            append_cache_entry ENABLE_ZAM_PROFILE BOOL true\n            ;;\n        --enable-debug)\n            append_cache_entry ENABLE_DEBUG BOOL true\n            append_cache_entry ENABLE_ZAM_PROFILE BOOL true\n            ;;\n        --enable-fuzzers)\n            append_cache_entry ZEEK_ENABLE_FUZZERS BOOL true\n            ;;\n        --enable-jemalloc)\n            append_cache_entry ENABLE_JEMALLOC BOOL true\n            ;;\n        --enable-perftools)\n            append_cache_entry ENABLE_PERFTOOLS BOOL true\n            ;;\n        --enable-perftools-debug)\n            append_cache_entry ENABLE_PERFTOOLS BOOL true\n            append_cache_entry ENABLE_PERFTOOLS_DEBUG BOOL true\n            ;;\n        --enable-static-binpac)\n            append_cache_entry BUILD_STATIC_BINPAC BOOL true\n            ;;\n        --enable-static-broker)\n            append_cache_entry BUILD_STATIC_BROKER BOOL true\n            ;;\n        --enable-werror)\n            append_cache_entry BUILD_WITH_WERROR BOOL true\n            ;;\n        --enable-ZAM-profiling)\n            append_cache_entry ENABLE_ZAM_PROFILE BOOL true\n            ;;\n        --enable-spicy-ssl)\n            append_cache_entry ENABLE_SPICY_SSL BOOL true\n            ;;\n        --disable-af-packet)\n            append_cache_entry DISABLE_AF_PACKET BOOL true\n            ;;\n        --disable-archiver)\n            has_disable_archiver=1\n            ;;\n        --disable-auxtools)\n            append_cache_entry INSTALL_AUX_TOOLS BOOL false\n            ;;\n        --disable-broker-tests)\n            append_cache_entry BROKER_DISABLE_TESTS BOOL true\n            append_cache_entry BROKER_DISABLE_DOC_EXAMPLES BOOL true\n            ;;\n        --disable-btest)\n            append_cache_entry INSTALL_BTEST BOOL false\n            ;;\n        --disable-btest-pcaps)\n            append_cache_entry INSTALL_BTEST_PCAPS BOOL false\n            ;;\n        --disable-cluster-backend-zeromq)\n            append_cache_entry ENABLE_CLUSTER_BACKEND_ZEROMQ BOOL false\n            ;;\n        --disable-cpp-tests)\n            append_cache_entry ENABLE_ZEEK_UNIT_TESTS BOOL false\n            ;;\n        --disable-javascript)\n            append_cache_entry DISABLE_JAVASCRIPT BOOL true\n            ;;\n        --disable-port-prealloc)\n            append_cache_entry PREALLOCATE_PORT_ARRAY BOOL false\n            ;;\n        --disable-python)\n            append_cache_entry DISABLE_PYTHON_BINDINGS BOOL true\n            ;;\n        --disable-spicy)\n            append_cache_entry DISABLE_SPICY BOOL true\n            ;;\n        --disable-zeek-client)\n            append_cache_entry INSTALL_ZEEK_CLIENT BOOL false\n            ;;\n        --disable-zeekctl)\n            append_cache_entry INSTALL_ZEEKCTL BOOL false\n            ;;\n        --disable-zkg)\n            append_cache_entry INSTALL_ZKG BOOL false\n            ;;\n        --with-bifcl=*)\n            append_cache_entry BIFCL_EXE_PATH PATH $optarg\n            ;;\n        --with-bind=*)\n            append_cache_entry BIND_ROOT_DIR PATH $optarg\n            ;;\n        --with-binpac=*)\n            append_cache_entry BINPAC_EXE_PATH PATH $optarg\n            ;;\n        --with-bison=*)\n            append_cache_entry BISON_EXECUTABLE PATH $optarg\n            ;;\n        --with-broker=*)\n            append_cache_entry BROKER_ROOT_DIR PATH $optarg\n            ;;\n        --with-caf=*)\n            append_cache_entry CAF_ROOT PATH $optarg\n            ;;\n        --with-flex=*)\n            append_cache_entry FLEX_EXECUTABLE PATH $optarg\n            ;;\n        --with-gen-zam=*)\n            append_cache_entry GEN_ZAM_EXE_PATH PATH $optarg\n            ;;\n        --with-geoip=*)\n            append_cache_entry LibMMDB_ROOT_DIR PATH $optarg\n            ;;\n        --with-jemalloc=*)\n            append_cache_entry JEMALLOC_ROOT_DIR PATH $optarg\n            append_cache_entry ENABLE_JEMALLOC BOOL true\n            ;;\n        --with-krb5=*)\n            append_cache_entry LibKrb5_ROOT_DIR PATH $optarg\n            ;;\n        --with-libkqueue=*)\n            append_cache_entry LIBKQUEUE_ROOT_DIR PATH $optarg\n            ;;\n        --with-pcap=*)\n            append_cache_entry PCAP_ROOT_DIR PATH $optarg\n            ;;\n        --with-perftools=*)\n            append_cache_entry GooglePerftools_ROOT_DIR PATH $optarg\n            ;;\n        --with-openssl=*)\n            append_cache_entry OPENSSL_ROOT_DIR PATH $optarg\n            ;;\n        --with-python=*)\n            append_cache_entry Python_EXECUTABLE PATH $optarg\n            ;;\n        --with-python-inc=*)\n            append_cache_entry PYTHON_INCLUDE_DIR PATH $optarg\n            append_cache_entry PYTHON_INCLUDE_PATH PATH $optarg\n            ;;\n        --with-python-lib=*)\n            append_cache_entry PYTHON_LIBRARY PATH $optarg\n            ;;\n        --with-spicy=*)\n            append_cache_entry SPICY_ROOT_DIR PATH $optarg\n            ;;\n        --with-swig=*)\n            append_cache_entry SWIG_EXECUTABLE PATH $optarg\n            ;;\n        --sanitizers=*)\n            append_cache_entry ZEEK_SANITIZERS STRING $optarg\n            ;;\n        --binary-package)\n            append_cache_entry BINARY_PACKAGING_MODE BOOL true\n            ;;\n        --ignore-dirs=*)\n            append_cache_entry CPACK_SOURCE_IGNORE_FILES STRING $optarg\n            ;;\n        --pkg-name-prefix=*)\n            append_cache_entry PACKAGE_NAME_PREFIX STRING $optarg\n            ;;\n        --osx-sysroot=*)\n            append_cache_entry CMAKE_OSX_SYSROOT PATH $optarg\n            ;;\n        --osx-min-version=*)\n            append_cache_entry CMAKE_OSX_DEPLOYMENT_TARGET STRING $optarg\n            ;;\n        --display-cmake)\n            display_cmake=1\n            ;;\n        *)\n            echo \"Invalid option '$1'.  Try $0 --help to see available options.\"\n            exit 1\n            ;;\n    esac\n    shift\ndone\n\nif [ -z \"$CMakeCommand\" ]; then\n    # prefer cmake3 over \"regular\" cmake (cmake == cmake2 on RHEL)\n    if command -v cmake3 >/dev/null 2>&1; then\n        CMakeCommand=\"cmake3\"\n    elif command -v cmake >/dev/null 2>&1; then\n        CMakeCommand=\"cmake\"\n    else\n        echo \"This package requires CMake, please install it first.\"\n        echo \"Then you may use this script to configure the CMake build.\"\n        echo \"Note: pass --cmake=PATH to use cmake in non-standard locations.\"\n        exit 1\n    fi\nfi\n\necho \"Using $(cmake --version | head -1)\"\necho\nif [ -n \"$CMakeGenerator\" ]; then\n    cmake=\"${CMakeCommand} -G ${CMakeGenerator} ${CMakeCacheEntries} ${sourcedir}\"\nelse\n    cmake=\"${CMakeCommand} ${CMakeCacheEntries} ${sourcedir}\"\nfi\n\nif [ \"${display_cmake}\" = 1 ]; then\n    echo \"${cmake}\"\n    exit 0\nfi\n\nif [ -d $builddir ]; then\n    # If build directory exists, check if it has a CMake cache\n    if [ -f $builddir/CMakeCache.txt ]; then\n        # If the CMake cache exists, delete it so that this configuration\n        # is not tainted by a previous one\n        rm -f $builddir/CMakeCache.txt\n    fi\nelse\n    # Create build directory\n    mkdir -p $builddir\nfi\n\necho \"Build Directory : $builddir\"\necho \"Source Directory: $sourcedir\"\ncd $builddir\n\neval ${cmake} 2>&1\n\necho \"# This is the command used to configure this build\" >config.status\necho $command >>config.status\nchmod u+x config.status\n\nif [ $has_disable_archiver -eq 1 ]; then\n    echo\n    echo \"NOTE: The --disable-archiver argument no longer has any effect and will be removed in v7.1. zeek-archiver is now part of zeek-aux, so consider --disable-auxtools instead.\"\nfi\n"
        },
        {
          "name": "doc",
          "type": "commit",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "ruff.toml",
          "type": "blob",
          "size": 0.19140625,
          "content": "target-version = \"py39\"\n\n# Skip anything in the auxil directory. This includes pysubnetree which\n# should be handled separately.\nexclude = [\"auxil\"]\n\n[lint]\nselect = [\"C4\", \"F\", \"I\", \"ISC\", \"UP\"]\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "vcpkg.json",
          "type": "blob",
          "size": 0.1220703125,
          "content": "{\r\n  \"name\": \"main\",\r\n  \"version-string\": \"latest\",\r\n  \"dependencies\": [\r\n    \"c-ares\",\r\n    \"libpcap\",\r\n    \"zlib\"\r\n  ]\r\n}\r\n"
        },
        {
          "name": "zeek-path-dev.in",
          "type": "blob",
          "size": 0.03125,
          "content": "cmake_templates/zeek-path-dev.in"
        }
      ]
    }
  ]
}