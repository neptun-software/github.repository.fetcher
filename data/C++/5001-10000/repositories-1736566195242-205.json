{
  "metadata": {
    "timestamp": 1736566195242,
    "page": 205,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "szad670401/HyperLPR",
      "stars": 5804,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.337890625,
          "content": ".idea\ncmake-build-debug/*\n3rdparty/opencv/*\n3rdparty/ncnn-bak/*\n3rdparty/MNN-bak/*\nbuild_android/*\n*.zip\n3rdparty/*\nfull_models/*\nimages/tmp/*\n.DS_Store\nbuild/\ninstall/\nbuild/\n.xmake\ntools/pack/pack_elixir_mb01/\nexamples/*\ndoxygen/\nbuild/\n.vscode/\n3rdparty_hyper_inspire_op\n*.so\n__pycache__\nbuild/\ndist/\nhyperlpr3.egg-info/\nvenv/\n*.pyc\n*~\n*.swp\n\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 7.3818359375,
          "content": "cmake_minimum_required(VERSION 3.14)\nproject(HyperLPR3-Source)\n\nset(CMAKE_CXX_STANDARD 11)\n\nset(LIBRARY_NAME hyperlpr3)\n\noption( LINUX_FETCH_MNN             \"Fetch and build MNN from git\"  ON )\noption( LINUX_USE_3RDPARTY_OPENCV   \"Linux platform using pre-compiled OpenCV library from 3rdparty_hyper_inspire_op\" OFF)\noption( BUILD_SHARE                 \"Build shared libs\"                 ON )\noption( BUILD_SAMPLES               \"Build samples demo\"                OFF )\noption( BUILD_TEST                  \"Build unit-test exec\"              OFF )\n\n\nset(PATH_3RDPARTY ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty_hyper_inspire_op)\n\n# find all cpp file\nfile(GLOB_RECURSE SRC_BUFFER_MODULE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/cpp/src/buffer_module/*.cpp)\nfile(GLOB_RECURSE SRC_CONTEXT_MODULE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/cpp/src/context_module/*.cpp)\nfile(GLOB_RECURSE SRC_NN_MODULE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/cpp/src/nn_module/*.cpp)\nfile(GLOB_RECURSE SRC_NN_IMPL_MODULE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/cpp/src/nn_implementation_module/*.cpp)\nfile(GLOB SRC_FILES ${CMAKE_CURRENT_SOURCE_DIR}/cpp/src/*.cpp)\n# local files\nset(SRC_INFERENCE_HELPER_LOCAL_FILES ${CMAKE_CURRENT_SOURCE_DIR}/cpp/src/inference_helper_module/inference_helper.cpp cpp/src/inference_helper_module/inference_helper_mnn.cpp)\n# include src header\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR}/cpp/src)\n\n\nset(SRC_C_CPP_FILES ${SRC_BUFFER_MODULE_FILES}\n        ${SRC_CONTEXT_MODULE_FILES}\n        ${SRC_LOADER_MODULE_FILES}\n        ${SRC_NN_MODULE_FILES}\n        ${SRC_NN_IMPL_MODULE_FILES}\n        ${SRC_SLOG_MODULE_FILES}\n        ${SRC_FILES}\n        ${SRC_INFERENCE_HELPER_LOCAL_FILES})\n\n# find all c file for c_api\nfile(GLOB_RECURSE CAPI_CC_FILES ${CMAKE_CURRENT_SOURCE_DIR}/cpp/c_api/*.cc)\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR}/cpp/c_api)\n\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR}/cpp/platform)\n\n# must use mnn\nadd_definitions(\"-DINFERENCE_HELPER_ENABLE_MNN\")\n\nset(LINK_THIRD_LIBS pthread MNN m)\n\nif (ANDROID)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11 \")\n    set(CMAKE_C_FLAGS \"${CMAKE_CXX_FLAGS}\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n    file(GLOB_RECURSE NATIVE_CPP_FILES ${CMAKE_CURRENT_SOURCE_DIR}/cpp/platform/jni/android/*.cpp)\n\n    find_package(OpenCV REQUIRED)\n    include_directories(${MNN_INCLUDE_DIRS})\n    link_directories(${MNN_LIBS})\n\n    add_library(${LIBRARY_NAME} SHARED ${NATIVE_CPP_FILES} ${SRC_C_CPP_FILES} ${CAPI_CC_FILES})\n    target_link_libraries(${LIBRARY_NAME} ${OpenCV_LIBS} jnigraphics log -Wl,--whole-archive MNN -Wl,--no-whole-archive)\n\nelseif(IOS)\n    # TODO: Not implement\nelse ()\n    # Build Linux or MacOS\n    if (BUILD_CUDA)\n        # TODO: Not implement\n    elseif (BUILD_LINUX_ARM7)\n        message(\"[BUILD]Linux Armv7\")\n        add_definitions(\"-DLINUX_ARM7\")\n        set(PLAT linux-arm32)\n        # MNN Third party dependence\n        set(MNN_INCLUDE_DIRS ${PATH_3RDPARTY}/MNN-2.2.0/${PLAT}-static/include)\n        set(MNN_LIBS ${PATH_3RDPARTY}/MNN-2.2.0/${PLAT}-static/lib)\n        # OpenCV Third party dependence\n        set(OpenCV_DIR ${PATH_3RDPARTY}/opencv/opencv-linux-armhf/share/OpenCV)\n        set(OpenCV_STATIC_INCLUDE_DIR ${PATH_3RDPARTY}/opencv/opencv-linux-armhf/include/)\n        find_package(OpenCV REQUIRED)\n\n    elseif (BUILD_LINUX_ARM64)\n        # TODO: Not implement\n    else()\n        # Local Build\n        message(\"[BUILD]Local\")\n        if (APPLE)\n            set(PLAT darwin)\n        else()\n            set(PLAT linux)\n        endif ()\n\n        # Fetch MNN from git if the option is enabled\n        if (LINUX_FETCH_MNN)\n            # Include FetchContent module\n            include(FetchContent)\n            # Fetch MNN\n            message(\"Downloading MNN from https://github.com/alibaba/MNN.git, this may take a while.\")\n            FetchContent_Declare(\n                    mnn\n                    GIT_REPOSITORY https://github.com/alibaba/MNN.git\n                    GIT_TAG        2.2.0\n            )\n            set(MNN_BUILD_SHARED_LIBS OFF CACHE BOOL \"\" FORCE)\n            set(MNN_BUILD_TOOLS OFF CACHE BOOL \"\" FORCE)\n\n            FetchContent_MakeAvailable(mnn)\n            set(MNN_INCLUDE_DIRS ${mnn_SOURCE_DIR}/include)\n            set(MNN_LIBS ${mnn_BINARY_DIR})\n        else()\n            # MNN Third party dependence\n            set(MNN_INCLUDE_DIRS ${PATH_3RDPARTY}/MNN-2.2.0/${PLAT}/include)\n            set(MNN_LIBS ${PATH_3RDPARTY}/MNN-2.2.0/${PLAT}/lib)\n        endif()\n\n\n        if(LINUX_USE_3RDPARTY_OPENCV)\n            # OpenCV Third party dependence （static）\n            set(OpenCV_DIR ${PATH_3RDPARTY}/opencv-4.5.1/${PLAT}/lib/cmake/opencv4)\n            set(OpenCV_STATIC_INCLUDE_DIR ${PATH_3RDPARTY}/opencv-4.5.1/${PLAT}/include/opencv4)\n        endif()\n        find_package(OpenCV REQUIRED)\n\n    endif()\nendif()\n\nif (NOT ANDROID)\n    # mnn\n    message(MNN_INCLUDE_DIRS=${MNN_INCLUDE_DIRS})\n    message(MNN_LIBS=${MNN_LIBS})\n    include_directories(${MNN_INCLUDE_DIRS})\n    link_directories(${MNN_LIBS})\n    # opencv\n    message(OpenCV_Version: ${OpenCV_VERSION})\n    message(libraries: ${OpenCV_LIBS})\n    message(libraries path: ${OpenCV_DIR})\n    message(OpenCV_INCLUDE_DIRS=${OpenCV_STATIC_INCLUDE_DIR})\n    include_directories(${OpenCV_STATIC_INCLUDE_DIR})\n\n    if (BUILD_SAMPLES)\n        # built samples exec\n        add_executable(ContextSample ${CMAKE_CURRENT_SOURCE_DIR}/cpp/samples/sample_context.cpp ${SRC_C_CPP_FILES})\n        target_link_libraries(ContextSample ${OpenCV_LIBS} ${LINK_THIRD_LIBS} )\n\n        add_executable(SplitDetSample ${CMAKE_CURRENT_SOURCE_DIR}/cpp/samples/sample_split_model.cpp ${SRC_C_CPP_FILES})\n        target_link_libraries(SplitDetSample ${OpenCV_LIBS} ${LINK_THIRD_LIBS} )\n\n        add_executable(CAPISample ${CMAKE_CURRENT_SOURCE_DIR}/cpp/samples/sample_capi.cpp ${SRC_C_CPP_FILES} ${CAPI_CC_FILES})\n        target_link_libraries(CAPISample ${OpenCV_LIBS} ${LINK_THIRD_LIBS} )\n\n    endif()\n\n    if (BUILD_TEST)\n        if (ENABLE_BENCHMARK_TEST)\n            message([Test]Open Benchmark Test)\n            add_definitions(-DENABLE_BENCHMARK_TEST)\n        endif ()\n        file(GLOB_RECURSE TEST_C_CPP_FILES ${CMAKE_CURRENT_SOURCE_DIR}/cpp/test/*.cpp)\n        add_executable(UnitTest ${TEST_C_CPP_FILES} ${SRC_C_CPP_FILES} ${CAPI_CC_FILES})\n        target_link_libraries(UnitTest ${OpenCV_LIBS} ${LINK_THIRD_LIBS})\n    endif()\n\n    if (BUILD_SHARE)\n        # build dynamic library\n        add_library(${LIBRARY_NAME} SHARED ${SRC_C_CPP_FILES} ${CAPI_CC_FILES})\n        target_link_libraries(${LIBRARY_NAME} ${OpenCV_LIBS} ${LINK_THIRD_LIBS} )\n        set(SRC_RKNN_RELATED ${CMAKE_CURRENT_SOURCE_DIR}/cpp/src/inference_helper_rknn.cpp)\n        set(SRC_C_CPP_FILES ${SRC_C_CPP_FILES} )\n\n    endif()\n\nendif()\n\nset(CMAKE_INSTALL_PREFIX ${PROJECT_BINARY_DIR}/install/hyperlpr3)\nmessage(CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX})\n\n# Add HyperLPR3-related files and directories to the installation list\ninstall(TARGETS ${LIBRARY_NAME} DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)\ninstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cpp/c_api/hyper_lpr_sdk.h DESTINATION ${CMAKE_INSTALL_PREFIX}/include)\n\n# Install resource file\ninstall(DIRECTORY resource DESTINATION ${CMAKE_INSTALL_PREFIX})\n\n# Install Resource files You can also install sample programs if they are available\nif (BUILD_SAMPLES)\n    install(TARGETS ContextSample DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)\n    install(TARGETS CAPISample DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)\n    install(TARGETS SplitDetSample DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)\nendif()\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.24609375,
          "content": "FROM ubuntu:18.04\n\nMAINTAINER tunm<tunmxy@163.com>\n\n# timezone\nRUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\nRUN echo 'Asia/Shanghai' >/etc/timezone\n\n\nRUN apt-get update\nRUN apt-get install cmake -y\nRUN apt-get install build-essential -y\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Prj-Android",
          "type": "tree",
          "content": null
        },
        {
          "name": "Prj-Linux",
          "type": "tree",
          "content": null
        },
        {
          "name": "Prj-Python",
          "type": "tree",
          "content": null
        },
        {
          "name": "Prj-iOS",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.7099609375,
          "content": "![logo_t](./images/hyperlpr_logo.png)\n\n## HyperLPR3 - High Performance License Plate Recognition Framework.\n\n#### [![1](https://badge.fury.io/py/hyperlpr3.svg \"title\")](https://pypi.org/project/hyperlpr3/)[![1](https://img.shields.io/pypi/pyversions/hyperlpr3.svg \"title\")](https://pypi.org/manage/project/hyperlpr3/releases/)[![](https://jitpack.io/v/HyperInspire/hyperlpr3-android-sdk.svg)](https://jitpack.io/#HyperInspire/hyperlpr3-android-sdk)\n[中文文档](README_CH.md)\n\n### Demo APP Installation\n\n- Android APP：[Scan QR Code](http://fir.tunm.top/hyperlpr)\n\n### Quick Installation\n\n`python -m pip install hyperlpr3`\n\n###### support：python3, Windows, Mac, Linux, Raspberry Pi。\n\n\n###### 720p cpu real-time (st on MBP r15 2.2GHz haswell).\n\n#### Quick Test\n\n```bash\n# image url\nlpr3 sample -src https://koss.iyong.com/swift/v1/iyong_public/iyong_2596631159095872/image/20190221/1550713902741045679.jpg\n\n# image path\nlpr3 sample -src images/test_img.jpg -det high\n```\n\n#### How to Use\n\n```python\n# import opencv\nimport cv2\n# import hyperlpr3\nimport hyperlpr3 as lpr3\n\n# Instantiate object\ncatcher = lpr3.LicensePlateCatcher()\n# load image\nimage = cv2.imread(\"images/test_img.jpg\")\n# print result\nprint(catcher(image))\n\n``` \n#### Start the WebAPI service\n\n```bash\n# start server\nlpr3 rest --port 8715 --host 0.0.0.0\n```\nPath to open SwaggerUI after startup：[http://localhost:8715/api/v1/docs](http://localhost:8715/api/v1/docs) View and test the online Identification API service:\n\n![swagger_ui](./images/swagger-ui.png)\n\n\n#### Q&A\n\nQ：Whether the accuracy of android in the project is consistent with that of apk-demo？\n\nA：Please compile or download the Android shared library from the release and copy it to Prj-Android for testing。\n\nQ：Source of training data for license plates？\n\nA：Since the license plate data used for training involves legal privacy and other issues, it cannot be provided in this project. Open more big data sets [CCPD](https://github.com/detectRecog/CCPD) registration dataset。\n\nQ：Provision of training code？\n\nA：The resources provide the old training code, and the training methods for HyperLPR3 will be sorted out and presented later。\n\n\n#### Resources\n\n- [HyperLPR3车牌识别-五分钟搞定: 中文车牌识别光速部署与使用](https://blog.csdn.net/weixin_40193776/article/details/129258107)\n\n- [HyperLPR3车牌识别-Android-SDK光速部署与使用](https://blog.csdn.net/weixin_40193776/article/details/129394240)\n\n- [HyperLPR3车牌识别-Linux/MacOS使用：C/C++库编译](https://blog.csdn.net/weixin_40193776/article/details/129295679)\n\n- [HyperLPR3车牌识别-Android使用：SDK编译与部署](https://blog.csdn.net/weixin_40193776/article/details/129354938)\n\n- To be added... Contributions welcome\n\n#### Other Versions\n\n- [HyperLPRv1](https://github.com/szad670401/HyperLPR/tree/v1)\n\n- [HyperLPRv2](https://github.com/szad670401/HyperLPR/tree/v2)\n\n### TODO\n\n- Support for rapid deployment of WebApi services\n- Support multiple license plates and double layers\n- Support large Angle license plate\n- Lightweight recognition model\n\n\n### Specialty\n\n- 720p faster, single core Intel 2.2G CPU (MaBook Pro 2015) average recognition time is less than 100ms\n- End-to-end license plate recognition does not require character segmentation\n- The recognition rate is high, and the accuracy of the entrance and exit scene is about 95%-97%\n- Support cross-platform compilation and rapid deployment\n\n### Matters Need Attention:\n\n- The C++ and Python implementations of this project are separate\n- When compiling C++ projects, OpenCV 4.0 and MNN 2.0 must be used, otherwise it will not compile\n- Android project compilation ndk as far as possible to use version 21\n\n### Python Dependency\n- opencv-python (>3.3)\n- onnxruntime (>1.8.1)\n- fastapi (0.92.0)\n- uvicorn (0.20.0)\n- loguru (0.6.0)\n- python-multipart\n- tqdm\n- requests \n\n### Cross-platform support\n\n#### Platform\n- Linux: x86、Armv7、Armv8\n- MacOS: x86\n- Android: arm64-v8a、armeabi-v7a\n  \n#### Embedded Development Board\n- Rockchip: rv1109rv1126(RKNPU)\n\n### CPP Dependency\n\n- Opencv 4.0 above\n- MNN 2.0 above\n\n### C/C++ Compiling Dependencies\n\nCompiling C/C++ projects requires the use of third-party dependency libraries. After downloading the library, unzip it, and put it into the root directory (the same level as CMakeLists.txt) by copying or soft linking.[baidu drive](https://pan.baidu.com/s/1zfP2MSsG1jgxB_MjvpwZJQ) code: eu31\n\n### Linux/Mac Shared Library Compilation\n\n- Need to place or link dependencies in the project root (same level as CMakeLists.txt)\n- We recommend you to compile OpenCV yourself and install it into the system. This can help reduce compilation errors caused by version mismatches and compiler issues with system dependencies. However, you can also try using the pre-compiled OpenCV static library we provide for compilation. To do this, you need to enable the **LINUX_USE_3RDPARTY_OPENCV** switch.\n\n```bash\n# execute the script\nsh command/build_release_linux_share.sh\n\n```\nCompiled to the **build/linux/install/hyperlpr3** dir，Which contains：\n- include - header file\n- lib - shared dir\n- resource - test-images and models dir\n\nCopy the files you need into your project\n\n### Linux/Mac Compiling the Demo\n\n- You need to complete the previous compilation step and ensure it's successful. The compiled files will be located in the root directory: **build/linux/install/hyperlpr3**. You will need to manually copy them to the current directory.\n- Go to the **Prj-Linux** folder\n```bash\n# go to Prj-linux\ncd Prj-Linux\n# exec sh\nsh build.sh\n```\nThe executable program is generated after compilation: **PlateRecDemo**，and Run the program\n```bash\n# go to build\ncd build/\n# first param models dir, second param image path\n./PlateRecDemo ../hyperlpr3/resource/models/r2_mobile ../hyperlpr3/resource/images/test_img.jpg\n```\n### Linux/Mac Quick Use SDK Code Example\n```C\n// Load image\ncv::Mat image = cv::imread(image_path);\n// Create a ImageData\nHLPR_ImageData data = {0};\ndata.data = image.ptr<uint8_t>(0);         // Setting the image data flow\ndata.width = image.cols;                   // Setting the image width\ndata.height = image.rows;                  // Setting the image height\ndata.format = STREAM_BGR;                  // Setting the current image encoding format\ndata.rotation = CAMERA_ROTATION_0;         // Setting the current image corner\n// Create a Buffer\nP_HLPR_DataBuffer buffer = HLPR_CreateDataBuffer(&data);\n\n// Configure license plate recognition parameters\nHLPR_ContextConfiguration configuration = {0};\nconfiguration.models_path = model_path;         // Model folder path\nconfiguration.max_num = 5;                      // Maximum number of license plates\nconfiguration.det_level = DETECT_LEVEL_LOW;     // Level of detector\nconfiguration.use_half = false;\nconfiguration.nms_threshold = 0.5f;             // Non-maxima suppress the confidence threshold\nconfiguration.rec_confidence_threshold = 0.5f;  // License plate number text threshold\nconfiguration.box_conf_threshold = 0.30f;       // Detector threshold\nconfiguration.threads = 1;\n// Instantiating a Context\nP_HLPR_Context ctx = HLPR_CreateContext(&configuration);\n// Query the Context state\nHREESULT ret = HLPR_ContextQueryStatus(ctx);\nif (ret != HResultCode::Ok) {\n    printf(\"create error.\\n\");\n    return -1;\n}\nHLPR_PlateResultList results = {0};\n// Execute LPR\nHLPR_ContextUpdateStream(ctx, buffer, &results);\n\nfor (int i = 0; i < results.plate_size; ++i) {\n\t// Getting results\n    std::string type;\n    if (results.plates[i].type == HLPR_PlateType::PLATE_TYPE_UNKNOWN) {\n        type = “Unknown\";\n    } else {\n        type = TYPES[results.plates[i].type];\n    }\n\n    printf(\"<%d> %s, %s, %f\\n\", i + 1, type.c_str(),\n           results.plates[i].code, results.plates[i].text_confidence);\n}\n\n// Release Buffer\nHLPR_ReleaseDataBuffer(buffer);\n// Release Context\nHLPR_ReleaseContext(ctx);\n```\n\n### Android: Compile the Shared Library\n- The first step is to install third-party dependencies\n- You need to prepare NDKS and configure environment variables: $ANDROID_NDK\n- Supports cross-compilation on Linux/MacOS\n```bash\n# execute the script\nsh command/build_release_android_share.sh\n```\nCompiled to the: **build/release_android/**，Which contains：\n- arm64-v8a - 64bit shard library\n- armeabi-v7a - 32bit shard library\n\nAfter compiling，Copy**arm64-v8a**and**armeabi-v7a** dirs to **Prj-Android/hyperlpr3/libs**，And compile the **Prj-Android** project to use.\n\n### Compile with Docker\n\nIf you need to compile with docker, we provide a few ways to compile:\n\n#### 1. Compile the Linux-x86 Shared Library using Docker\n\nYou need to install docker and docker-compose，Build Image for **hyperlpr_build**:\n\n```Bash\ndocker build -t hyperlpr_build .\n```\n\nStart compiling the shared library:\n\n```Bash\ndocker-compose up build_linux_x86_shared_lib\n```\n\nBuild dir: **build/linux**\n\n### Android SDK Demo\n\nWe have provided a demo project from the Android SDK source: [hyperlpr3-android-sdk](https://github.com/HyperInspire/hyperlpr3-android-sdk.git)，You can compile the shared library and use the project as needed.\n\n### Quick to use in Android\n\nIf you need to quickly integrate our sdk in your own Android project, then you can add the following dependency to your project's build.gradle:\n\n- Step 1. Add the JitPack repository to your build file.Add it in your root build.gradle at the end of repositories:\n\n```Java\nallprojects {\n    repositories {\n        ...\n        maven { url 'https://jitpack.io' }\n    }\n}\n```\n\n- Step 2. Add the dependency\n```Java\ndependencies {\n    implementation 'com.github.HyperInspire:hyperlpr3-android-sdk:1.0.3'\n}\n```\n\n- Step 3. Use hyperlpr in your application\n\n```Java\n// Initialization, which can be performed only once, is usually performed at program initialization\nHyperLPR3.getInstance().init(this, new HyperLPRParameter());\n\n…\n\n// exec recognition\nPlate[] plates =  HyperLPR3.getInstance().plateRecognition(bitmap, HyperLPR3.CAMERA_ROTATION_0, HyperLPR3.STREAM_BGRA);\n```\n\nKnow more about: **[Prj-Android](./Prj-Android)**\n\n\n### License Plate Type is Supported(Chinese)\n\n#### 支持\n- [x] 单行蓝牌\n- [x] 单行黄牌\n- [x] 新能源车牌\n- [x] 教练车牌\n#### 有限支持\n- [x] 白色警用车牌\n- [x] 使馆/港澳车牌\n- [x] 双层黄牌\n- [x] 武警车牌\n#### 待支持\n- [ ] 民航车牌\n- [ ] 双层武警\n- [ ] 双层军牌\n- [ ] 双层农用车牌\n- [ ] 双层个性化车牌\n- [ ] License plates from more countries\n\n###### Note:Due to some imbalanced samples during training, some special license plates have low recognition rates, such as (Embassy/Hong Kong and Macao license plates), which will be improved in the subsequent versions.\n\n\n### Example\n\n![demo](./images/demo.png)\n\n### Author\n- Jingyu Yan (tunmxy@163.com)\n- Jack Yu (jack-yu-business@foxmail.com / https://github.com/szad670401)\n- XiaoXiao (xiaoxiao@xidian.edu.cn)\n\n#### Help\n\n- HyperInspire QQ Group: 529385694\n\n"
        },
        {
          "name": "README_CH.md",
          "type": "blob",
          "size": 10.322265625,
          "content": "![logo_t](./images/hyperlpr_logo.png)\n\n## HyperLPR3   高性能开源中文车牌识别框架\n\n#### [![1](https://badge.fury.io/py/hyperlpr3.svg \"title\")](https://pypi.org/project/hyperlpr3/)[![1](https://img.shields.io/pypi/pyversions/hyperlpr3.svg \"title\")](https://pypi.org/manage/project/hyperlpr3/releases/)[![](https://jitpack.io/v/HyperInspire/hyperlpr3-android-sdk.svg)](https://jitpack.io/#HyperInspire/hyperlpr3-android-sdk)\n\n\n### 快速体验APP\n\n- 体验 Android APP：[扫码下载](http://fir.tunm.top/hyperlpr)\n\n### 一键安装\n\n`python -m pip install hyperlpr3`\n\n###### 支持python3, 支持Windows  Mac Linux 树莓派等。\n\n\n###### 720p cpu real-time (st on MBP r15 2.2GHz haswell).\n\n#### 快速体验\n\n```bash\n# 使用命令行测试 - 图像url地址\nlpr3 sample -src https://koss.iyong.com/swift/v1/iyong_public/iyong_2596631159095872/image/20190221/1550713902741045679.jpg\n\n# 使用命令行测试 - 本地图像路径\nlpr3 sample -src images/test_img.jpg -det high\n```\n\n#### 快速上手\n\n```python\n# 导入opencv库\nimport cv2\n# 导入依赖包\nimport hyperlpr3 as lpr3\n\n# 实例化识别对象\ncatcher = lpr3.LicensePlateCatcher()\n# 读取图片\nimage = cv2.imread(\"images/test_img.jpg\")\n# 识别结果\nprint(catcher(image))\n\n``` \n#### 启动WebApi服务\n\n```bash\n# 启动服务\nlpr3 rest --port 8715 --host 0.0.0.0\n```\n启动后可打开SwaggerUI的路径：[http://localhost:8715/api/v1/docs](http://localhost:8715/api/v1/docs) 查看和测试在线识别API服务:\n\n![swagger_ui](./images/swagger-ui.png)\n\n\n#### Q&A\n\nQ：Android识别率没有所传demo apk的识别率高？\n\nA：请自行编译或从release中下载安卓动态库放置于Prj-Android中进行测试。\n\nQ：车牌的训练数据来源？\n\nA：由于用于训练车牌数据涉及到法律隐私等问题，本项目无法提供。开放较为大的数据集有[CCPD](https://github.com/detectRecog/CCPD)车牌数据集。\n\nQ：训练代码的提供？\n\nA：相关资源中有提供老版的训练代码，HyperLPR3的训练方法会陆续整理并给出。\n\nQ：关于项目的来源？\n\nA：此项目来源于作者早期的研究和调试代码，代码缺少一定的规范，同时也欢迎PR。\n\n\n#### 相关资源\n\n- [HyperLPR3车牌识别-五分钟搞定: 中文车牌识别光速部署与使用](https://blog.csdn.net/weixin_40193776/article/details/129258107)\n\n- [HyperLPR3车牌识别-Android-SDK光速部署与使用](https://blog.csdn.net/weixin_40193776/article/details/129394240)\n\n- [HyperLPR3车牌识别-Linux/MacOS使用：C/C++库编译](https://blog.csdn.net/weixin_40193776/article/details/129295679)\n\n- [HyperLPR3车牌识别-Android使用：SDK编译与部署](https://blog.csdn.net/weixin_40193776/article/details/129354938)\n- 待补充...欢迎投稿\n\n#### 其他版本\n\n- [HyperLPRv1版](https://github.com/szad670401/HyperLPR/tree/v1)\n\n- [HyperLPRv2版](https://github.com/szad670401/HyperLPR/tree/v2)\n\n### TODO\n\n- 支持快速部署WebApi服务\n- 支持多种车牌以及双层\n- 支持大角度车牌\n- 轻量级识别模型\n\n\n### 特性\n\n- 速度快 720p,单核 Intel 2.2G CPU (MaBook Pro 2015)平均识别时间低于100ms\n- 基于端到端的车牌识别无需进行字符分割\n- 识别率高,卡口场景准确率在95%-97%左右\n- 支持跨平台编译和快速部署\n\n### 注意事项:\n\n- 本项目的C++实现和Python实现无任何关联，都为单独实现\n- 在编译C++工程的时候必须要使用OpenCV 4.0和MNN 2.0以上版本，否则无法编译 \n- 安卓工程编译ndk尽量采用21版本\n\n### Python 依赖\n- opencv-python (>3.3)\n- onnxruntime (>1.8.1)\n- fastapi (0.92.0)\n- uvicorn (0.20.0)\n- loguru (0.6.0)\n- python-multipart\n- tqdm\n- requests \n\n### 跨平台支持\n\n#### 平台\n- Linux: x86、Armv7、Armv8\n- MacOS: x86\n- Android: arm64-v8a、armeabi-v7a\n  \n#### 开发板\n- Rockchip: rv1109rv1126(RKNPU)\n\n### CPP 依赖\n\n- Opencv 4.0 以上版本\n- MNN 2.0 以上版本\n\n### C/C++编译依赖库\n\n编译C/C++工程需要使用第三方依赖库，将库下载后解压，并将其通过拷贝或软链接放入根目录(与CMakeLists.txt同级)即可，依赖的库下载地址：[百度网盘](https://pan.baidu.com/s/1zfP2MSsG1jgxB_MjvpwZJQ) code: eu31\n\n### Linux/Mac动态链接库编译\n\n- 需要将依赖库放置或链接在项目根目录下(与CMakeLists.txt同级)\n- 在编译Linux相关平台时，我们推荐您自行编译opencv并安装至系统中，这样可以降低因为系统中一些依赖版本和编译器原因导致的编译错误，当然，你也可以优先尝试使用我们提供的opencv静态库进行编译，需要您把LINUX_USE_3RDPARTY_OPENCV开关打开\n\n```bash\n# 执行编译脚本\nsh command/build_release_linux_share.sh\n\n```\n编译后的相关物料放置于根目录下**build/linux/install/hyperlpr3**中，其中包含：\n- include 头文件\n- lib 动态库路径\n- resource 包含测试图片与模型等静态资源\n\n按需取走需要的文件即可\n\n### Linux/Mac编译Demo\n\n- 需要完成上一步的编译动作，并保证编译成功且编译完成后的物料放置于根目录下的**build/linux/install/hyperlpr3**路径中，需要将其拷贝或链接到当前目录\n- 需要从根目录中进入到子工程**Prj-Linux**文件夹中进行操作\n```bash\n# 进入到子工程demo\ncd Prj-Linux\n# 执行编译脚本\nsh build.sh\n```\n编译完成后生成可执行程序**PlateRecDemo**，执行运行测试\n```bash\n# 进入编译目录\ncd build/\n# 传入模型文件夹路径和需要预测的图像执行程序\n./PlateRecDemo ../hyperlpr3/resource/models/r2_mobile ../hyperlpr3/resource/images/test_img.jpg\n```\n### Linux/Mac快速使用SDK代码示例\n```C\n// 读取图像\ncv::Mat image = cv::imread(image_path);\n// 创建ImageData\nHLPR_ImageData data = {0};\ndata.data = image.ptr<uint8_t>(0);      // 设置图像数据流\ndata.width = image.cols;                   // 设置图像宽\ndata.height = image.rows;                  // 设置图像高\ndata.format = STREAM_BGR;                  // 设置当前图像编码格式\ndata.rotation = CAMERA_ROTATION_0;         // 设置当前图像转角\n// 创建数据Buffer\nP_HLPR_DataBuffer buffer = HLPR_CreateDataBuffer(&data);\n\n// 配置车牌识别参数\nHLPR_ContextConfiguration configuration = {0};\nconfiguration.models_path = model_path;         // 模型文件夹路径\nconfiguration.max_num = 5;                      // 最大识别车牌数量\nconfiguration.det_level = DETECT_LEVEL_LOW;     // 检测器等级\nconfiguration.use_half = false;\nconfiguration.nms_threshold = 0.5f;             // 非极大值抑制置信度阈值\nconfiguration.rec_confidence_threshold = 0.5f;  // 车牌号文本阈值\nconfiguration.box_conf_threshold = 0.30f;       // 检测器阈值\nconfiguration.threads = 1;\n// 实例化车牌识别算法Context\nP_HLPR_Context ctx = HLPR_CreateContext(&configuration);\n// 查询实例化状态\nHREESULT ret = HLPR_ContextQueryStatus(ctx);\nif (ret != HResultCode::Ok) {\n    printf(\"create error.\\n\");\n    return -1;\n}\nHLPR_PlateResultList results = {0};\n// 执行车牌识别算法\nHLPR_ContextUpdateStream(ctx, buffer, &results);\n\nfor (int i = 0; i < results.plate_size; ++i) {\n\t// 解析识别后的数据\n    std::string type;\n    if (results.plates[i].type == HLPR_PlateType::PLATE_TYPE_UNKNOWN) {\n        type = \"未知\";\n    } else {\n        type = TYPES[results.plates[i].type];\n    }\n\n    printf(\"<%d> %s, %s, %f\\n\", i + 1, type.c_str(),\n           results.plates[i].code, results.plates[i].text_confidence);\n}\n\n// 销毁Buffer\nHLPR_ReleaseDataBuffer(buffer);\n// 销毁Context\nHLPR_ReleaseContext(ctx);\n```\n\n### Android编译动态链接库\n- 需要完成上面的步骤：安装第三方依赖库\n- 需要提前下载NDK并配置环境变量：$ANDROID_NDK\n- 支持在Linux/MacOS下进行交叉编译\n```bash\n# 执行编译脚本\nsh command/build_release_android_share.sh\n```\n编译完成后android的动态库会放置于**build/release_android/**，其中包含：\n- arm64-v8a 64位的动态库\n- armeabi-v7a 32位的动态库\n\n完成Android的动态库编译后，将**arm64-v8a**和**armeabi-v7a**文件夹放置于子项目路径**Prj-Android/hyperlpr3/libs**中，再编译android项目即可使用。**Prj-Android**项目中已内置hyperlpr3的SDK与使用demo。\n\n### 使用Docker进行构建\n\n如果你需要使用docker编译，我们提供了几种编译方法:\n\n#### 1. 使用docker编译Linux-x86动态库\n\n你需要提前安装好docker和docker-compose，并执行脚本构建**hyperlpr_build**的镜像:\n\n```Bash\ndocker build -t hyperlpr_build .\n```\n\n开始编译动态库:\n\n```Bash\ndocker-compose up build_linux_x86_shared_lib\n```\n\n编译目录: **build/linux**\n\n### Android-SDK示例工程\n\n我们提供了一个Android-SDK相关的Demo工程：[hyperlpr3-android-sdk](https://github.com/HyperInspire/hyperlpr3-android-sdk.git)，您可以根据需求去编译动态库使用该项目。\n\n### 在Android中快速集成HyperLPR\n\n如果你需要快速将我们的sdk集成到你自己的Android项目中，那么你可以将以下依赖添加到项目的build.gradle中:\n\n- 步骤 1. 将JitPack仓库添加到构建文件中。将其添加到根构建中。在仓库末尾添加Gradle:\n\n```Java\nallprojects {\n\trepositories {\n\t\t...\n\t\tmaven { url 'https://jitpack.io' }\n\t}\n}\n```\n\n- 步骤 2. 添加以下依赖\n```Java\ndependencies {\n\t  implementation 'com.github.HyperInspire:hyperlpr3-android-sdk:1.0.3'\n}\n```\n\n- 步骤 3. 在应用程序中使用hyperlpr\n\n```Java\n// 初始化通常在程序初始化时执行，只需执行一次\nHyperLPR3.getInstance().init(this, new HyperLPRParameter());\n\n…\n\n// 识别一张图像\nPlate[] plates =  HyperLPR3.getInstance().plateRecognition(bitmap, HyperLPR3.CAMERA_ROTATION_0, HyperLPR3.STREAM_BGRA);\n```\n\n关于快速集成到安卓工程可以查看: **[Prj-Android](./Prj-Android)**\n\n### 可识别和待支持的车牌的类型(中文)\n\n#### 支持\n- [x] 单行蓝牌\n- [x] 单行黄牌\n- [x] 新能源车牌\n- [x] 教练车牌\n#### 有限支持\n- [x] 白色警用车牌\n- [x] 使馆/港澳车牌\n- [x] 双层黄牌\n- [x] 武警车牌\n#### 待支持\n- [ ] 民航车牌\n- [ ] 双层武警\n- [ ] 双层军牌\n- [ ] 双层农用车牌\n- [ ] 双层个性化车牌\n- [ ] 更多国家车牌\n\n###### Note:由于训练的时候样本存在一些不均衡的问题,一些特殊车牌存在一定识别率低下的问题，如(使馆/港澳车牌)，会在后续的版本进行改进。\n\n\n### 效果示例\n\n![demo](./images/demo.png)\n\n\n#### 获取帮助\n\n- HyperInspire讨论QQ群: 529385694，加前请备注HyperLPR交流\n\n"
        },
        {
          "name": "command",
          "type": "tree",
          "content": null
        },
        {
          "name": "cpp",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.2255859375,
          "content": "version: \"3\"\nservices:\n  build_linux_x86_shared_lib:\n    container_name: hlpr_b_x86\n    image: hyperlpr_build\n    volumes:\n      - .:/work\n    working_dir: /work\n    command: bash command/build_release_linux_share.sh\n    tty: true\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "resource",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}