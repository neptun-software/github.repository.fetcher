{
  "metadata": {
    "timestamp": 1736566115315,
    "page": 114,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cartographer-project/cartographer",
      "stars": 7250,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bazelci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 0.892578125,
          "content": "# Copyright 2018 The Cartographer Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Do an optimized build by default, or otherwise Cartographer cannot run\n# real-time and certain tests will timeout.\nbuild -c opt\n\n# By default, an optimized C++ build with Bazel will build each library twice,\n# with and without -fPIC. --force_pic avoids the unnecessary actions and\n# reduces build time.\nbuild --force_pic\n\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0390625,
          "content": "**/Dockerfile*\n**/.dockerignore\n**/.git\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.013671875,
          "content": "build\nbazel-*\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.31640625,
          "content": "# This is the list of Cartographer authors for copyright purposes.\n#\n# This does not necessarily list everyone who has contributed code, since in\n# some cases, their employer may be the copyright holder.  To see the full list\n# of contributors, see the revision history in source control.\nGoogle Inc.\nand other contributors\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 0.962890625,
          "content": "# Copyright 2018 The Cartographer Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Cartographer is a system that provides real-time simultaneous localization\n# and mapping (SLAM) in 2D and 3D across multiple platforms and sensor\n# configurations.\n\nlicenses([\"notice\"])  # Apache 2.0\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"LICENSE\"])\n\nfilegroup(\n    name = \"configuration_files\",\n    srcs = glob([\n        \"configuration_files/*.lua\",\n    ]),\n)\n"
        },
        {
          "name": "CHANGELOG.rst",
          "type": "blob",
          "size": 0.6162109375,
          "content": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nChangelog for package cartographer\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n2.0.0 (2021-03-09)\n------------------\nhttps://github.com/cartographer-project/cartographer/compare/1.0.0...2.0.0\n\n1.0.0 (2018-06-01)\n------------------\nhttps://github.com/googlecartographer/cartographer/compare/0.3.0...1.0.0\n\n0.3.0 (2017-11-23)\n------------------\nhttps://github.com/googlecartographer/cartographer/compare/0.2.0...0.3.0\n\n0.2.0 (2017-06-19)\n------------------\nhttps://github.com/googlecartographer/cartographer/compare/0.1.0...0.2.0\n\n0.1.0 (2017-05-18)\n------------------\n* First unstable development release\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 13.4775390625,
          "content": "# Copyright 2016 The Cartographer Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\ncmake_minimum_required(VERSION 3.2)\n\nproject(cartographer)\n\nset(CARTOGRAPHER_MAJOR_VERSION 1)\nset(CARTOGRAPHER_MINOR_VERSION 0)\nset(CARTOGRAPHER_PATCH_VERSION 0)\nset(CARTOGRAPHER_VERSION ${CARTOGRAPHER_MAJOR_VERSION}.${CARTOGRAPHER_MINOR_VERSION}.${CARTOGRAPHER_PATCH_VERSION})\nset(CARTOGRAPHER_SOVERSION ${CARTOGRAPHER_MAJOR_VERSION}.${CARTOGRAPHER_MINOR_VERSION})\noption(BUILD_GRPC \"build Cartographer gRPC support\" false)\nset(CARTOGRAPHER_HAS_GRPC ${BUILD_GRPC})\noption(BUILD_PROMETHEUS \"build Prometheus monitoring support\" false)\n\ninclude(\"${PROJECT_SOURCE_DIR}/cmake/functions.cmake\")\ngoogle_initialize_cartographer_project()\ngoogle_enable_testing()\n\nfind_package(absl REQUIRED)\nset(BOOST_COMPONENTS iostreams)\nif(WIN32)\n  list(APPEND BOOST_COMPONENTS zlib)\n  set(Boost_USE_STATIC_LIBS FALSE)\nendif()\nfind_package(Boost REQUIRED COMPONENTS ${BOOST_COMPONENTS})\nfind_package(Ceres REQUIRED COMPONENTS SuiteSparse)\nfind_package(Eigen3 REQUIRED)\nfind_package(LuaGoogle REQUIRED)\nif(WIN32)\n  # On Windows, Protobuf is incorrectly found by the bundled CMake module, so prefer native CMake config.\n  set(protobuf_MODULE_COMPATIBLE TRUE CACHE INTERNAL \"\")\n  find_package(Protobuf 3.0.0 CONFIG)\nelse()\n  find_package(Protobuf 3.0.0 REQUIRED)\nendif()\n\nif (${BUILD_GRPC})\n  find_package(async_grpc REQUIRED)\nendif()\n\nif(${BUILD_PROMETHEUS})\n  find_package( ZLIB REQUIRED )\nendif()\n\ninclude(FindPkgConfig)\nif (NOT WIN32)\n  PKG_SEARCH_MODULE(CAIRO REQUIRED cairo>=1.12.16)\nelse()\n  find_library(CAIRO_LIBRARIES cairo)\nendif()\n\n# Only build the documentation if we can find Sphinx.\nfind_package(Sphinx)\nif(SPHINX_FOUND)\n  add_subdirectory(\"docs\")\nendif()\n\n# Install catkin package.xml\ninstall(FILES package.xml DESTINATION share/cartographer)\n\nset(CARTOGRAPHER_CONFIGURATION_FILES_DIRECTORY ${CMAKE_INSTALL_PREFIX}/share/cartographer/configuration_files\n  CACHE PATH \".lua configuration files directory\")\n\ninstall(DIRECTORY configuration_files DESTINATION share/cartographer/)\n\ninstall(DIRECTORY cmake DESTINATION share/cartographer/)\n\nfile(GLOB_RECURSE ALL_LIBRARY_HDRS \"cartographer/*.h\")\nfile(GLOB_RECURSE ALL_LIBRARY_SRCS \"cartographer/*.cc\")\nfile(GLOB_RECURSE TEST_LIBRARY_HDRS \"cartographer/fake_*.h\" \"cartographer/*test_helpers*.h\" \"cartographer/mock_*.h\")\nfile(GLOB_RECURSE TEST_LIBRARY_SRCS \"cartographer/fake_*.cc\" \"cartographer/*test_helpers*.cc\" \"cartographer/mock_*.cc\")\nfile(GLOB_RECURSE ALL_TESTS \"cartographer/*_test.cc\")\nfile(GLOB_RECURSE ALL_EXECUTABLES \"cartographer/*_main.cc\")\n\n# Remove dotfiles/-folders that could potentially pollute the build.\nfile(GLOB_RECURSE ALL_DOTFILES \".*/*\")\nif (ALL_DOTFILES)\n  list(REMOVE_ITEM ALL_LIBRARY_HDRS ${ALL_DOTFILES})\n  list(REMOVE_ITEM ALL_LIBRARY_SRCS ${ALL_DOTFILES})\n  list(REMOVE_ITEM TEST_LIBRARY_HDRS ${ALL_DOTFILES})\n  list(REMOVE_ITEM TEST_LIBRARY_SRCS ${ALL_DOTFILES})\n  list(REMOVE_ITEM ALL_TESTS ${ALL_DOTFILES})\n  list(REMOVE_ITEM ALL_EXECUTABLES ${ALL_DOTFILES})\nendif()\nlist(REMOVE_ITEM ALL_LIBRARY_SRCS ${ALL_EXECUTABLES})\nlist(REMOVE_ITEM ALL_LIBRARY_SRCS ${ALL_TESTS})\nlist(REMOVE_ITEM ALL_LIBRARY_HDRS ${TEST_LIBRARY_HDRS})\nlist(REMOVE_ITEM ALL_LIBRARY_SRCS ${TEST_LIBRARY_SRCS})\nfile(GLOB_RECURSE ALL_GRPC_FILES \"cartographer/cloud/*\")\nfile(GLOB_RECURSE ALL_PROMETHEUS_FILES \"cartographer/cloud/metrics/prometheus/*\")\nlist(REMOVE_ITEM ALL_GRPC_FILES ${ALL_PROMETHEUS_FILES})\nif (NOT ${BUILD_GRPC})\n  list(REMOVE_ITEM ALL_LIBRARY_HDRS ${ALL_GRPC_FILES})\n  list(REMOVE_ITEM ALL_LIBRARY_SRCS ${ALL_GRPC_FILES})\n  list(REMOVE_ITEM TEST_LIBRARY_HDRS ${ALL_GRPC_FILES})\n  list(REMOVE_ITEM TEST_LIBRARY_SRCS ${ALL_GRPC_FILES})\n  list(REMOVE_ITEM ALL_TESTS ${ALL_GRPC_FILES})\n  list(REMOVE_ITEM ALL_EXECUTABLES ${ALL_GRPC_FILES})\nendif()\nif (NOT ${BUILD_PROMETHEUS})\n  list(REMOVE_ITEM ALL_LIBRARY_HDRS ${ALL_PROMETHEUS_FILES})\n  list(REMOVE_ITEM ALL_LIBRARY_SRCS ${ALL_PROMETHEUS_FILES})\n  list(REMOVE_ITEM TEST_LIBRARY_HDRS ${ALL_PROMETHEUS_FILES})\n  list(REMOVE_ITEM TEST_LIBRARY_SRCS ${ALL_PROMETHEUS_FILES})\n  list(REMOVE_ITEM ALL_TESTS ${ALL_PROMETHEUS_FILES})\n  list(REMOVE_ITEM ALL_EXECUTABLES ${ALL_PROMETHEUS_FILES})\nendif()\nset(INSTALL_SOURCE_HDRS ${ALL_LIBRARY_HDRS} ${TEST_LIBRARY_HDRS})\nfile(GLOB_RECURSE INTERNAL_HDRS \"cartographer/*/internal/*.h\")\nlist(REMOVE_ITEM INSTALL_SOURCE_HDRS ${INTERNAL_HDRS})\n\nfile(GLOB_RECURSE ALL_PROTOS \"cartographer/*.proto\")\nfile(GLOB_RECURSE ALL_GRPC_SERVICES \"cartographer/*_service.proto\")\nlist(REMOVE_ITEM ALL_PROTOS ALL_GRPC_SERVICES)\nif (NOT ${BUILD_GRPC})\n  list(REMOVE_ITEM ALL_PROTOS ${ALL_GRPC_FILES})\nendif()\n\n# TODO(cschuet): Move proto compilation to separate function.\nset(ALL_PROTO_SRCS)\nset(ALL_PROTO_HDRS)\nforeach(ABS_FIL ${ALL_PROTOS})\n  file(RELATIVE_PATH REL_FIL ${PROJECT_SOURCE_DIR} ${ABS_FIL})\n  get_filename_component(DIR ${REL_FIL} DIRECTORY)\n  get_filename_component(FIL_WE ${REL_FIL} NAME_WE)\n\n  list(APPEND ALL_PROTO_SRCS \"${PROJECT_BINARY_DIR}/${DIR}/${FIL_WE}.pb.cc\")\n  list(APPEND ALL_PROTO_HDRS \"${PROJECT_BINARY_DIR}/${DIR}/${FIL_WE}.pb.h\")\n\n  add_custom_command(\n    OUTPUT \"${PROJECT_BINARY_DIR}/${DIR}/${FIL_WE}.pb.cc\"\n           \"${PROJECT_BINARY_DIR}/${DIR}/${FIL_WE}.pb.h\"\n    COMMAND  ${PROTOBUF_PROTOC_EXECUTABLE}\n    ARGS --cpp_out  ${PROJECT_BINARY_DIR} -I\n      ${PROJECT_SOURCE_DIR} ${ABS_FIL}\n    DEPENDS ${ABS_FIL}\n    COMMENT \"Running C++ protocol buffer compiler on ${ABS_FIL}\"\n    VERBATIM\n  )\nendforeach()\nset_source_files_properties(${ALL_PROTO_SRCS} ${ALL_PROTO_HDRS} PROPERTIES GENERATED TRUE)\nlist(APPEND ALL_LIBRARY_HDRS ${ALL_PROTO_HDRS})\nlist(APPEND ALL_LIBRARY_SRCS ${ALL_PROTO_SRCS})\n\nif(${BUILD_GRPC})\n  set(ALL_GRPC_SERVICE_SRCS)\n  set(ALL_GRPC_SERVICE_HDRS)\n  foreach(ABS_FIL ${ALL_GRPC_SERVICES})\n    file(RELATIVE_PATH REL_FIL ${PROJECT_SOURCE_DIR} ${ABS_FIL})\n    get_filename_component(DIR ${REL_FIL} DIRECTORY)\n    get_filename_component(FIL_WE ${REL_FIL} NAME_WE)\n\n    list(APPEND ALL_GRPC_SERVICE_SRCS \"${PROJECT_BINARY_DIR}/${DIR}/${FIL_WE}.pb.cc\")\n    list(APPEND ALL_GRPC_SERVICE_HDRS \"${PROJECT_BINARY_DIR}/${DIR}/${FIL_WE}.pb.h\")\n\n    add_custom_command(\n      OUTPUT \"${PROJECT_BINARY_DIR}/${DIR}/${FIL_WE}.pb.cc\"\n             \"${PROJECT_BINARY_DIR}/${DIR}/${FIL_WE}.pb.h\"\n      COMMAND  ${PROTOBUF_PROTOC_EXECUTABLE}\n      ARGS --cpp_out  ${PROJECT_BINARY_DIR}\n        -I ${PROJECT_SOURCE_DIR}\n        ${ABS_FIL}\n      DEPENDS ${ABS_FIL}\n      COMMENT \"Running C++ protocol buffer compiler on ${ABS_FIL}\"\n      VERBATIM\n    )\n  endforeach()\n  set_source_files_properties(${ALL_GRPC_SERVICE_SRCS} ${ALL_GRPC_SERVICE_HDRS} PROPERTIES GENERATED TRUE)\n  list(APPEND ALL_LIBRARY_HDRS ${ALL_GRPC_SERVICE_HDRS})\n  list(APPEND ALL_LIBRARY_SRCS ${ALL_GRPC_SERVICE_SRCS})\nendif()\nset(INSTALL_GENERATED_HDRS ${ALL_PROTO_HDRS} ${ALL_GRPC_SERVICE_HDRS})\n\nadd_library(${PROJECT_NAME} STATIC ${ALL_LIBRARY_HDRS} ${ALL_LIBRARY_SRCS})\n\nconfigure_file(\n  ${PROJECT_SOURCE_DIR}/cartographer/common/config.h.cmake\n  ${PROJECT_BINARY_DIR}/cartographer/common/config.h)\n\ngoogle_binary(cartographer_autogenerate_ground_truth\n  SRCS\n    cartographer/ground_truth/autogenerate_ground_truth_main.cc\n)\n\ngoogle_binary(cartographer_compute_relations_metrics\n  SRCS\n    cartographer/ground_truth/compute_relations_metrics_main.cc\n)\n\ngoogle_binary(cartographer_pbstream\n  SRCS\n  cartographer/io/pbstream_main.cc\n)\n\ngoogle_binary(cartographer_print_configuration\n  SRCS\n  cartographer/common/print_configuration_main.cc\n)\n\nif(${BUILD_GRPC})\n  google_binary(cartographer_grpc_server\n    SRCS\n      cartographer/cloud/map_builder_server_main.cc\n  )\n  target_link_libraries(cartographer_grpc_server PUBLIC grpc++)\n  target_link_libraries(cartographer_grpc_server PUBLIC async_grpc)\n  if(${BUILD_PROMETHEUS})\n    target_link_libraries(cartographer_grpc_server PUBLIC ${ZLIB_LIBRARIES})\n    target_link_libraries(cartographer_grpc_server PUBLIC prometheus-cpp-core)\n    target_link_libraries(cartographer_grpc_server PUBLIC prometheus-cpp-pull)\n  endif()\nendif()\n\ntarget_include_directories(${PROJECT_NAME} SYSTEM PUBLIC\n  \"${EIGEN3_INCLUDE_DIR}\")\ntarget_link_libraries(${PROJECT_NAME} PUBLIC ${EIGEN3_LIBRARIES})\n\ntarget_include_directories(${PROJECT_NAME} SYSTEM PUBLIC\n  \"${CERES_INCLUDE_DIRS}\")\ntarget_link_libraries(${PROJECT_NAME} PUBLIC ${CERES_LIBRARIES})\n\ntarget_include_directories(${PROJECT_NAME} SYSTEM PUBLIC\n  \"${LUA_INCLUDE_DIR}\")\ntarget_link_libraries(${PROJECT_NAME} PUBLIC ${LUA_LIBRARIES})\n\ntarget_include_directories(${PROJECT_NAME} SYSTEM PUBLIC\n  \"${Boost_INCLUDE_DIRS}\")\ntarget_link_libraries(${PROJECT_NAME} PUBLIC ${Boost_LIBRARIES})\n\nif (WIN32)\n  find_package(glog REQUIRED)\n  set(GLOG_LIBRARY glog::glog)\nelse()\n  set(GLOG_LIBRARY glog)\nendif()\n\ntarget_link_libraries(${PROJECT_NAME} PUBLIC ${GLOG_LIBRARY})\ntarget_link_libraries(${PROJECT_NAME} PUBLIC gflags)\nif(WIN32)\n  # Needed to fix conflict with MSVC's error macro.\n  target_compile_definitions(${PROJECT_NAME} PUBLIC -DGLOG_NO_ABBREVIATED_SEVERITIES)\nendif()\nif(MSVC)\n  # Needed for VS 2017 5.8\n  target_compile_definitions(${PROJECT_NAME} PUBLIC -D_ENABLE_EXTENDED_ALIGNED_STORAGE -D_USE_MATH_DEFINES)\nendif()\n\nif(\"${CAIRO_INCLUDE_DIRS}\")\n  target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC\n    \"${CAIRO_INCLUDE_DIRS}\")\nendif()\ntarget_link_libraries(${PROJECT_NAME} PUBLIC ${CAIRO_LIBRARIES})\n\ntarget_include_directories(${PROJECT_NAME} SYSTEM PUBLIC\n  ${PROTOBUF_INCLUDE_DIR})\n# TODO(hrapp): This should not explicitly list pthread and use\n# PROTOBUF_LIBRARIES, but that failed on first try.\ntarget_link_libraries(${PROJECT_NAME} PUBLIC ${PROTOBUF_LIBRARY} \n  absl::algorithm\n  absl::base\n  absl::debugging\n  absl::flat_hash_map\n  absl::memory\n  absl::meta\n  absl::numeric\n  absl::str_format\n  absl::strings\n  absl::synchronization\n  absl::time\n  absl::utility \n)\nif (NOT WIN32)\n  target_link_libraries(${PROJECT_NAME} PUBLIC pthread)\nendif()\nif(${BUILD_GRPC})\n  target_link_libraries(${PROJECT_NAME} PUBLIC grpc++)\n  target_link_libraries(${PROJECT_NAME} PUBLIC async_grpc)\nendif()\nif(${BUILD_PROMETHEUS})\n  target_link_libraries(${PROJECT_NAME} PUBLIC ${ZLIB_LIBRARIES})\n  target_link_libraries(${PROJECT_NAME} PUBLIC prometheus-cpp-core)\n  target_link_libraries(${PROJECT_NAME} PUBLIC prometheus-cpp-pull)\n  target_compile_definitions(${PROJECT_NAME} PUBLIC USE_PROMETHEUS=1)\nendif()\n\nset(TARGET_COMPILE_FLAGS \"${TARGET_COMPILE_FLAGS} ${GOOG_CXX_FLAGS}\")\nset_target_properties(${PROJECT_NAME} PROPERTIES\n  COMPILE_FLAGS ${TARGET_COMPILE_FLAGS})\n\nset(TEST_LIB\n  cartographer_test_library\n)\nadd_library(${TEST_LIB} ${TEST_LIBRARY_HDRS} ${TEST_LIBRARY_SRCS})\ntarget_include_directories(${TEST_LIB} SYSTEM PRIVATE\n  \"${GMOCK_INCLUDE_DIRS}\")\n# Needed for dynamically linked GTest on Windows.\nif (WIN32)\n  target_compile_definitions(${TEST_LIB} PUBLIC -DGTEST_LINKED_AS_SHARED_LIBRARY)\nendif()\ntarget_link_libraries(${TEST_LIB} PUBLIC ${GMOCK_LIBRARY})\ntarget_link_libraries(${TEST_LIB} PUBLIC ${PROJECT_NAME})\nset_target_properties(${TEST_LIB} PROPERTIES\n  COMPILE_FLAGS ${TARGET_COMPILE_FLAGS})\n\nforeach(ABS_FIL ${ALL_TESTS})\n  file(RELATIVE_PATH REL_FIL ${PROJECT_SOURCE_DIR} ${ABS_FIL})\n  get_filename_component(DIR ${REL_FIL} DIRECTORY)\n  get_filename_component(FIL_WE ${REL_FIL} NAME_WE)\n  # Replace slashes as required for CMP0037.\n  string(REPLACE \"/\" \".\" TEST_TARGET_NAME \"${DIR}/${FIL_WE}\")\n  google_test(\"${TEST_TARGET_NAME}\" ${ABS_FIL})\n  if(${BUILD_GRPC})\n    target_link_libraries(\"${TEST_TARGET_NAME}\" PUBLIC grpc++)\n    target_link_libraries(\"${TEST_TARGET_NAME}\" PUBLIC async_grpc)\n  endif()\n  if(${BUILD_PROMETHEUS})\n    target_link_libraries(\"${TEST_TARGET_NAME}\" PUBLIC ${ZLIB_LIBRARIES})\n    target_link_libraries(\"${TEST_TARGET_NAME}\" PUBLIC prometheus-cpp-core)\n    target_link_libraries(\"${TEST_TARGET_NAME}\" PUBLIC prometheus-cpp-pull)\n  endif()\n  target_link_libraries(\"${TEST_TARGET_NAME}\" PUBLIC ${TEST_LIB})\nendforeach()\n\n# Add the binary directory first, so that port.h is included after it has\n# been generated.\ntarget_include_directories(${PROJECT_NAME} PUBLIC\n    $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}>\n    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>\n    $<INSTALL_INTERFACE:include>\n)\n\ninstall(\n  TARGETS ${PROJECT_NAME}\n  EXPORT CartographerExport\n  ARCHIVE DESTINATION lib\n  LIBRARY DESTINATION lib\n  RUNTIME DESTINATION bin\n)\n\nforeach(HDR ${INSTALL_SOURCE_HDRS})\n  file(RELATIVE_PATH REL_FIL ${PROJECT_SOURCE_DIR} ${HDR})\n  get_filename_component(DIR ${REL_FIL} DIRECTORY)\n  install(\n    FILES ${HDR}\n    DESTINATION include/${DIR}\n  )\nendforeach()\n\nforeach(HDR ${INSTALL_GENERATED_HDRS})\n  file(RELATIVE_PATH REL_FIL ${PROJECT_BINARY_DIR} ${HDR})\n  get_filename_component(DIR ${REL_FIL} DIRECTORY)\n  install(\n    FILES ${HDR}\n    DESTINATION include/${DIR}\n  )\nendforeach()\n\nset(CARTOGRAPHER_CMAKE_DIR share/cartographer/cmake)\ninclude(CMakePackageConfigHelpers)\nconfigure_package_config_file(\n  cartographer-config.cmake.in\n  ${PROJECT_BINARY_DIR}/cmake/cartographer/cartographer-config.cmake\n  PATH_VARS CARTOGRAPHER_CMAKE_DIR\n  INSTALL_DESTINATION ${CMAKE_INSTALL_PREFIX}/share/cartographer\n)\n\ninstall(\n  EXPORT CartographerExport\n  DESTINATION share/cartographer/cmake/\n  FILE CartographerTargets.cmake\n)\n\ninstall(\n  FILES ${PROJECT_BINARY_DIR}/cmake/cartographer/cartographer-config.cmake\n  DESTINATION share/cartographer/\n)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.07421875,
          "content": "Want to contribute? Great! First, read this page.\n\n### Before you contribute\n\nAny contribution that you make to this repository will\nbe under the Apache 2 License, as dictated by that\n[license](http://www.apache.org/licenses/LICENSE-2.0):\n\n```\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n```\n\n### Developer Certificate of Origin\n\nContributors must sign-off each commit by adding a `Signed-off-by: ...`\nline to commit messages to certify that they have the right to submit\nthe code they are contributing to the project according to the\n[Developer Certificate of Origin (DCO)](https://developercertificate.org/).\nYou can sign-off a commit via `git commit -s`.\n\n### Code reviews\n\nAll submissions, including submissions by project members, require review.\nWe use GitHub pull requests for this purpose. Make sure you've read,\nunderstood and considered all the points below before creating your PR.\n\n#### Style guide\n\nC++ code should adhere to the\n[Google C++ Style Guide](https://google.github.io/styleguide/cppguide.html).\nYou can handle the formatting part of the style guide via `git clang-format`.\n\n#### Best practices\n\nWhen preparing your PR and also during the code review make sure to follow\n[best practices](https://google.github.io/eng-practices/review/developer/).\nMost importantly, keep your PR under 200 lines of code and address a single\nconcern.\n\n#### Testing\n\n- Add unit tests and documentation (these do not count toward your 200 lines).\n- Run `ninja test` or `catkin_make_isolated --install --use-ninja --pkg cartographer --make-args test` as appropriate.\n- Keep rebasing (or merging) of master branch to a minimum. It triggers Travis\n  runs for every update which blocks merging of other changes.\n"
        },
        {
          "name": "Dockerfile.bionic",
          "type": "blob",
          "size": 1.4013671875,
          "content": "# Copyright 2020 The Cartographer Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM ubuntu:bionic\n\nARG cc\nARG cxx\n\n# Set the preferred C/C++ compiler toolchain, if given (otherwise default).\nENV CC=$cc\nENV CXX=$cxx\n\n# This base image doesn't ship with sudo, apt-utils. tzdata is installed here to avoid hanging later\n# when it would wait for user input.\nRUN apt-get update && apt-get install -y sudo apt-utils tzdata && rm -rf /var/lib/apt/lists/*\n\nCOPY scripts/install_debs_cmake.sh cartographer/scripts/\nRUN cartographer/scripts/install_debs_cmake.sh && rm -rf /var/lib/apt/lists/*\nCOPY scripts/install_abseil.sh cartographer/scripts/\nRUN cartographer/scripts/install_abseil.sh && rm -rf /var/lib/apt/lists/*\nCOPY scripts/install_proto3.sh cartographer/scripts/\nRUN cartographer/scripts/install_proto3.sh && rm -rf protobuf\nCOPY . cartographer\nRUN cartographer/scripts/install_cartographer_cmake.sh && rm -rf cartographer\n"
        },
        {
          "name": "Dockerfile.bionic.grpc",
          "type": "blob",
          "size": 1.771484375,
          "content": "# Copyright 2020 The Cartographer Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM ubuntu:bionic\n\nARG cc\nARG cxx\n\n# Set the preferred C/C++ compiler toolchain, if given (otherwise default).\nENV CC=$cc\nENV CXX=$cxx\n\n# This base image doesn't ship with sudo, apt-utils. tzdata is installed here to avoid hanging later\n# when it would wait for user input.\nRUN apt-get update && apt-get install -y sudo apt-utils tzdata && rm -rf /var/lib/apt/lists/*\n\nCOPY scripts/install_debs_cmake.sh cartographer/scripts/\nRUN cartographer/scripts/install_debs_cmake.sh && rm -rf /var/lib/apt/lists/*\nCOPY scripts/install_abseil.sh cartographer/scripts/\nRUN cartographer/scripts/install_abseil.sh && rm -rf /var/lib/apt/lists/*\nCOPY scripts/install_proto3.sh cartographer/scripts/\nRUN cartographer/scripts/install_proto3.sh && rm -rf protobuf\nCOPY scripts/install_grpc.sh cartographer/scripts/\nRUN cartographer/scripts/install_grpc.sh && rm -rf grpc\nCOPY scripts/install_async_grpc.sh cartographer/scripts/\nRUN cartographer/scripts/install_async_grpc.sh && rm -rf async_grpc\nCOPY scripts/install_prometheus_cpp.sh cartographer/scripts/\nRUN cartographer/scripts/install_prometheus_cpp.sh && rm -rf prometheus-cpp\nCOPY . cartographer\nRUN cartographer/scripts/install_cartographer_cmake_with_grpc.sh && rm -rf cartographer\n"
        },
        {
          "name": "Dockerfile.bullseye",
          "type": "blob",
          "size": 1.056640625,
          "content": "# Copyright 2022 The Cartographer Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM debian:bullseye\n\nARG cc\nARG cxx\n\n# Set the preferred C/C++ compiler toolchain, if given (otherwise default).\nENV CC=$cc\nENV CXX=$cxx\n\n# This base image doesn't ship with sudo.\nRUN apt-get update && apt-get install -y sudo && rm -rf /var/lib/apt/lists/*\n\nCOPY scripts/install_debs_cmake.sh cartographer/scripts/\nRUN cartographer/scripts/install_debs_cmake.sh && rm -rf /var/lib/apt/lists/*\nCOPY . cartographer\nRUN cartographer/scripts/install_cartographer_cmake.sh && rm -rf cartographer\n"
        },
        {
          "name": "Dockerfile.buster",
          "type": "blob",
          "size": 1.1787109375,
          "content": "# Copyright 2020 The Cartographer Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM debian:buster\n\nARG cc\nARG cxx\n\n# Set the preferred C/C++ compiler toolchain, if given (otherwise default).\nENV CC=$cc\nENV CXX=$cxx\n\n# This base image doesn't ship with sudo.\nRUN apt-get update && apt-get install -y sudo && rm -rf /var/lib/apt/lists/*\n\nCOPY scripts/install_debs_cmake.sh cartographer/scripts/\nRUN cartographer/scripts/install_debs_cmake.sh && rm -rf /var/lib/apt/lists/*\nCOPY scripts/install_abseil.sh cartographer/scripts/\nRUN cartographer/scripts/install_abseil.sh && rm -rf /var/lib/apt/lists/*\nCOPY . cartographer\nRUN cartographer/scripts/install_cartographer_cmake.sh && rm -rf cartographer\n"
        },
        {
          "name": "Dockerfile.focal",
          "type": "blob",
          "size": 1.2880859375,
          "content": "# Copyright 2020 The Cartographer Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM ubuntu:focal\n\nARG cc\nARG cxx\n\n# Set the preferred C/C++ compiler toolchain, if given (otherwise default).\nENV CC=$cc\nENV CXX=$cxx\n\n# This base image doesn't ship with sudo, apt-utils. tzdata is installed here to avoid hanging later\n# when it would wait for user input.\nRUN apt-get update && apt-get install -y sudo apt-utils tzdata && rm -rf /var/lib/apt/lists/*\n\nCOPY scripts/install_debs_cmake.sh cartographer/scripts/\nRUN cartographer/scripts/install_debs_cmake.sh && rm -rf /var/lib/apt/lists/*\nCOPY scripts/install_abseil.sh cartographer/scripts/\nRUN cartographer/scripts/install_abseil.sh && rm -rf /var/lib/apt/lists/*\nCOPY . cartographer\nRUN cartographer/scripts/install_cartographer_cmake.sh && rm -rf cartographer\n"
        },
        {
          "name": "Dockerfile.jammy",
          "type": "blob",
          "size": 1.1640625,
          "content": "# Copyright 2020 The Cartographer Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM ubuntu:jammy\n\nARG cc\nARG cxx\n\n# Set the preferred C/C++ compiler toolchain, if given (otherwise default).\nENV CC=$cc\nENV CXX=$cxx\n\n# This base image doesn't ship with sudo, apt-utils. tzdata is installed here to avoid hanging later\n# when it would wait for user input.\nRUN apt-get update && apt-get install -y sudo apt-utils tzdata && rm -rf /var/lib/apt/lists/*\n\nCOPY scripts/install_debs_cmake.sh cartographer/scripts/\nRUN cartographer/scripts/install_debs_cmake.sh && rm -rf /var/lib/apt/lists/*\nCOPY . cartographer\nRUN cartographer/scripts/install_cartographer_cmake.sh && rm -rf cartographer\n"
        },
        {
          "name": "Dockerfile.trusty.bazel",
          "type": "blob",
          "size": 0.9375,
          "content": "# Copyright 2016 The Cartographer Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM ubuntu:trusty\n\nARG cc\nARG cxx\n\n# Set the preferred C/C++ compiler toolchain, if given (otherwise default).\nENV CC=$cc\nENV CXX=$cxx\n\nCOPY scripts/install_debs_bazel.sh cartographer/scripts/\nRUN cartographer/scripts/install_debs_bazel.sh && rm -rf /var/lib/apt/lists/*\nCOPY . cartographer\nRUN cartographer/scripts/install_cartographer_bazel.sh && rm -rf cartographer\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 8.291015625,
          "content": ".. Copyright 2016 The Cartographer Authors\n\n.. Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n..      http://www.apache.org/licenses/LICENSE-2.0\n\n.. Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n============\nCartographer\n============\n\n|build-jammy| |build-focal| |build-bionic| |build-bullseye| |build-buster| |docs| |license|\n\nPurpose\n=======\n\n`Cartographer`_ is a system that provides real-time simultaneous localization\nand mapping (`SLAM`_) in 2D and 3D across multiple platforms and sensor\nconfigurations.\n\n|video|\n\n.. _Cartographer: https://github.com/cartographer-project/cartographer\n.. _SLAM: https://en.wikipedia.org/wiki/Simultaneous_localization_and_mapping\n\nA Note for ROS Users\n====================\n\n**Cartographer is no longer actively maintained.**\nOn rare occasions critical pull requests may be merged, but no new development is currently taking place, including issue response.\nIf you are installing Cartographer in ROS 1 / ROS 2 using a binary package that package is a fork of this repository.\nThe ROS fork of Cartographer is only maintained in a limited capacity.\nNo new development takes place on this fork, but pull requests may be merged at the maintainers' discretion.    \n\nThe ROS fork of Cartographer, and the ROS wrapper library, can be found at these locations:\n\n- `Cartographer Fork <https://github.com/ros2/cartographer>`_\n- `Cartographer ROS  <https://github.com/ros2/cartographer_ros>`_\n\nAdditional discussion can be found in `this ROS Discourse thread<https://discourse.ros.org/t/rolling-and-soon-humble-release-of-both-cartographer-and-cartographer-ros-v2-and-call-for-testing/25137>`_.  \n\n\nGetting started\n===============\n\n* Learn to use Cartographer at `our Read the Docs site`_.\n* You can ask a question by `creating an issue`_.\n\n.. _our Read the Docs site: https://google-cartographer.readthedocs.io\n.. _creating an issue: https://github.com/cartographer-project/cartographer_ros/issues/new?labels=question\n\nContributing\n============\n\nYou can find information about contributing to Cartographer at `our Contribution\npage`_.\n\n.. _our Contribution page: https://github.com/cartographer-project/cartographer/blob/master/CONTRIBUTING.md\n\nOpen house slide archive\n========================\n\nIn the past there had been regular open-for-all meetings to discuss progress and plans for Cartographer.\nSlides of these Cartographer Open House meetings are listed below.\n\n- March 14, 2019: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/190314/slides.pdf>`_\n- February 21, 2019: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/190221/slides.pdf>`_\n- January 17, 2019: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/190117/slides.pdf>`_\n- November 22, 2018: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/181122/slides.pdf>`_\n- October 25, 2018: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/181025/slides.pdf>`_\n- September 13, 2018: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/180913/slides.pdf>`_\n- August 16, 2018: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/180816/slides.pdf>`_\n- August 2, 2018: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/180802/slides.pdf>`_\n- July 5, 2018: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/180705/slides.pdf>`_\n- June 21, 2018: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/180621/slides.pdf>`_\n- June 7, 2018: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/180607/slides.pdf>`_\n- May 24, 2018: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/180524/slides.pdf>`_\n- May 3, 2018: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/180503/slides.pdf>`_\n- March 29, 2018: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/180329/slides.pdf>`_\n- February 22, 2018: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/180222/slides.pdf>`_\n- February 8, 2018: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/180208/slides.pdf>`_\n- January 18, 2018: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/180125/slides.pdf>`_\n- January 11, 2018: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/180111/slides.pdf>`_\n- December 7, 2017: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/171207/slides.pdf>`_\n- November 23, 2017: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/171123/slides.pdf>`_\n- November 9, 2017: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/171109/slides.pdf>`_\n- October 26, 2017: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/171026/slides.pdf>`_\n- October 12, 2017: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/171012/slides.pdf>`_\n- September 14, 2017: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/170914/slides.pdf>`_\n- August 17, 2017: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/170817/slides.pdf>`_\n- July 20, 2017: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/170720/slides.pdf>`_\n- July 6, 2017: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/170706/slides.pdf>`_\n- June 22, 2017: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/170622/sildes.pdf>`_\n- June 8, 2017: `Slides <https://storage.googleapis.com/cartographer-public-data/cartographer-open-house/170608/slides.pdf>`_\n\n.. |build-jammy| image:: https://github.com/cartographer-project/cartographer/actions/workflows/ci-jammy.yaml/badge.svg\n    :alt: Ubuntu 22.04 Build Status\n    :scale: 100%\n    :target: https://github.com/cartographer-project/cartographer/actions/workflows/ci-jammy.yaml\n.. |build-focal| image:: https://github.com/cartographer-project/cartographer/actions/workflows/ci-focal.yaml/badge.svg\n    :alt: Ubuntu 20.04 Build Status\n    :scale: 100%\n    :target: https://github.com/cartographer-project/cartographer/actions/workflows/ci-focal.yaml\n.. |build-bionic| image:: https://github.com/cartographer-project/cartographer/actions/workflows/ci-bionic.yaml/badge.svg\n    :alt: Ubuntu 18.04 Build Status\n    :scale: 100%\n    :target: https://github.com/cartographer-project/cartographer/actions/workflows/ci-bionic.yaml\n.. |build-bullseye| image:: https://github.com/cartographer-project/cartographer/actions/workflows/ci-bullseye.yaml/badge.svg\n    :alt: Debian Bullseye Build Status\n    :scale: 100%\n    :target: https://github.com/cartographer-project/cartographer/actions/workflows/ci-bullseye.yaml\n.. |build-buster| image:: https://github.com/cartographer-project/cartographer/actions/workflows/ci-buster.yaml/badge.svg\n    :alt: Debian Buster Build Status\n    :scale: 100%\n    :target: https://github.com/cartographer-project/cartographer/actions/workflows/ci-buster.yaml\n.. |docs| image:: https://readthedocs.org/projects/google-cartographer/badge/?version=latest\n    :alt: Documentation Status\n    :scale: 100%\n    :target: https://google-cartographer.readthedocs.io/en/latest/?badge=latest\n.. |license| image:: https://img.shields.io/badge/License-Apache%202.0-blue.svg\n     :alt: Apache 2 license.\n     :scale: 100%\n     :target: https://github.com/cartographer-project/cartographer/blob/master/LICENSE\n.. |video| image:: https://j.gifs.com/wp3BJM.gif\n    :alt: Cartographer 3D SLAM Demo\n    :scale: 100%\n    :target: https://youtu.be/DM0dpHLhtX0\n"
        },
        {
          "name": "RELEASING.rst",
          "type": "blob",
          "size": 0.3779296875,
          "content": "Steps for Releasing\n-------------------\n\n.. code-block:: bash\n  catkin_generate_changelog\n\n* Update changelog to point to GitHub release log (e.g.\n  https://github.com/cartographer-project/cartographer/compare/0.1.0...0.2.0)\n\n.. code-block:: bash\n  git commit -am\"Update changelog for release\"\n  catkin_prepare_release --bump minor --no-push\n\n* Create PR\n* Add release via GitHub web UI\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 1.12109375,
          "content": "# Copyright 2018 The Cartographer Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nworkspace(name = \"com_github_googlecartographer_cartographer\")\n\nload(\"//:bazel/repositories.bzl\", \"cartographer_repositories\")\n\ncartographer_repositories()\n\n# This can't be inside cartographer_repositories() because of:\n# https://github.com/bazelbuild/bazel/issues/1550\nload(\"@com_github_nelhage_rules_boost//:boost/boost.bzl\", \"boost_deps\")\n\nboost_deps()\n\nload(\"@com_github_grpc_grpc//bazel:grpc_deps.bzl\", \"grpc_deps\")\n\ngrpc_deps()\n\nload(\"@com_github_jupp0r_prometheus_cpp//:repositories.bzl\", \"prometheus_cpp_repositories\")\n\nprometheus_cpp_repositories()\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 2.443359375,
          "content": "# Copyright 2018 The Cartographer Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\njobs:\n- job: Build\n  pool:\n    vmImage: 'vs2017-win2016'\n  timeoutInMinutes: 360\n  steps:\n  - script: |\n      choco sources add -n=roswin -s https://aka.ms/ros/public --priority 1\n      rem Azure VM runs out of space on C:, so use D: for ros and rosdeps\n      mkdir D:\\opt && mklink /J C:\\opt D:\\opt\n      choco upgrade %ROS_METAPACKAGE% -y\n      robocopy \".\" \".\\src\\cartographer\" /E /MOVE /XD \"src\" > NUL\n      call \"C:\\opt\\ros\\melodic\\x64\\env.bat\" rosdep install --from-paths src --ignore-src -r -y\n    env:\n      ROS_METAPACKAGE: 'ros-melodic-desktop'\n    displayName: Install prerequisites\n\n  - script: |\n      call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n      call \"C:\\opt\\ros\\melodic\\x64\\setup.bat\"\n      call src\\cartographer\\scripts\\remove_mingw_cygwin_from_path.bat\n      catkin_make_isolated --use-ninja --install\n    displayName: Build\n\n  - script: |\n      call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n      call \"C:\\opt\\ros\\melodic\\x64\\setup.bat\"\n      call src\\cartographer\\scripts\\remove_mingw_cygwin_from_path.bat\n      cd build_isolated\\cartographer\\install && ctest --no-compress-output -T Test\n    displayName: Run tests\n\n  - script: |\n      call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n      call \"C:\\opt\\ros\\melodic\\x64\\setup.bat\"\n      call src\\cartographer\\scripts\\remove_mingw_cygwin_from_path.bat\n      python src\\cartographer\\scripts\\ctest_to_junit.py build_isolated\\cartographer\\install\n    displayName: Convert tests to jUnit\n    condition: always()\n\n  - task: PublishTestResults@2\n    displayName: Publish test results\n    inputs:\n      testRunner: 'jUnit'\n      testResultsFiles: '**\\jUnit.xml'\n      searchFolder: '$(Build.SourcesDirectory)\\build_isolated\\cartographer\\install\\Testing'\n    condition: always()\n"
        },
        {
          "name": "bazel",
          "type": "tree",
          "content": null
        },
        {
          "name": "cartographer-config.cmake.in",
          "type": "blob",
          "size": 1.5576171875,
          "content": "# Copyright 2016 The Cartographer Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n#  Usage from an external project:\n#    In your CMakeLists.txt, add these lines:\n#\n#    find_package(cartographer REQUIRED)\n#    target_link_libraries(MY_TARGET_NAME PUBLIC cartographer)\n\n@PACKAGE_INIT@\n\nset_and_check(CARTOGRAPHER_CMAKE_DIR \"@PACKAGE_CARTOGRAPHER_CMAKE_DIR@\")\n\nset(CERES_DIR_HINTS @Ceres_DIR@)\nset(CARTOGRAPHER_HAS_GRPC @CARTOGRAPHER_HAS_GRPC@)\n\nif (cartographer_FIND_QUIETLY)\n   set(QUIET_OR_REQUIRED_OPTION \"QUIET\")\nelseif (cartographer_FIND_REQUIRED)\n   set(QUIET_OR_REQUIRED_OPTION \"REQUIRED\")\nelse ()\n   set(QUIET_OR_REQUIRED_OPTION \"\")\nendif()\n\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CARTOGRAPHER_CMAKE_DIR}/modules)\n\nfind_package(Ceres ${QUIET_OR_REQUIRED_OPTION} HINTS ${CERES_DIR_HINTS})\nif (WIN32)\n    find_package(glog REQUIRED)\nendif()\nfind_package(absl ${QUIET_OR_REQUIRED_OPTION})\nif(CARTOGRAPHER_HAS_GRPC)\n   find_package(async_grpc ${QUIET_OR_REQUIRED_OPTION})\nendif()\n\ninclude(\"${CARTOGRAPHER_CMAKE_DIR}/CartographerTargets.cmake\")\n\nunset(QUIET_OR_REQUIRED_OPTION)\n"
        },
        {
          "name": "cartographer",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "configuration_files",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.xml",
          "type": "blob",
          "size": 1.734375,
          "content": "<?xml version=\"1.0\"?>\n<!--\n  Copyright 2016 The Cartographer Authors\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n-->\n\n<package format=\"3\">\n  <name>cartographer</name>\n  <version>2.0.0</version>\n  <description>\n    Cartographer is a system that provides real-time simultaneous localization\n    and mapping (SLAM) in 2D and 3D across multiple platforms and sensor\n    configurations.\n  </description>\n  <maintainer email=\"cartographer-owners@googlegroups.com\">\n    The Cartographer Authors\n  </maintainer>\n  <license>Apache 2.0</license>\n\n  <url>https://github.com/cartographer-project/cartographer</url>\n\n  <author email=\"google-cartographer@googlegroups.com\">\n    The Cartographer Authors\n  </author>\n\n  <buildtool_depend>cmake</buildtool_depend>\n\n  <build_depend>git</build_depend>\n  <build_depend>google-mock</build_depend>\n  <build_depend>gtest</build_depend>\n  <build_depend>python3-sphinx</build_depend>\n\n  <depend>libboost-iostreams-dev</depend>\n  <depend>eigen</depend>\n  <depend>libabsl-dev</depend>\n  <depend>libcairo2-dev</depend>\n  <depend>libceres-dev</depend>\n  <depend>libgflags-dev</depend>\n  <depend>libgoogle-glog-dev</depend>\n  <depend>lua5.2-dev</depend>\n  <depend>protobuf-dev</depend>\n\n  <export>\n    <build_type>cmake</build_type>\n  </export>\n</package>\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}