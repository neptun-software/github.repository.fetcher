{
  "metadata": {
    "timestamp": 1736566092943,
    "page": 88,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "async-profiler/async-profiler",
      "stars": 7815,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".assets",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.01171875,
          "content": "*.sh eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1015625,
          "content": "/build/\n/nbproject/\n/out/\n/target/\n/.idea/\n/test/*.class\n.vscode\n*.iml\n/src/api/**/*.class\n.gdb_history\n"
        },
        {
          "name": ".licenserc.yaml",
          "type": "blob",
          "size": 0.4111328125,
          "content": "header:\n  - paths:\n      - 'src/jattach'\n    license:\n      content: |\n        Copyright The jattach authors\n        SPDX-License-Identifier: Apache-2.0\n\n    comment: on-failure\n\n  - paths:\n      - 'src'\n      - 'test'\n    paths-ignore:\n      - 'src/jattach'\n      - 'src/res'\n    license:\n      content: |\n        Copyright The async-profiler authors\n        SPDX-License-Identifier: Apache-2.0\n\n    comment: on-failure\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 16.00390625,
          "content": "# Changelog\n\n## [4.0] - Early Access\n\n### Features\n - #895, #905: `jfrconv` binary and numerous converter enhancements\n - #944: Interactive Heatmap\n - #1064: Native memory leak profiler\n - #1002: An option to display instruction addresses\n - #1007: Optimize wall clock profiling\n - #1073: Productize VMStructs-based stack walker: `--cstack vm/vmx`\n\n### Improvements\n - #923: Support JDK 23+\n - #952: Solve musl and glibc compatibility issues; link `libstdc++` statically\n - #955: `--libpath` option to specify path to `libasyncProfiler.so` in a container\n - #1018: `--grain` converter option to coarsen flame graphs\n - #1046: `--nostop` option to continue profiling outside `--begin`/`--end` window\n - #1009: Allows collecting allocation and live object traces at the same time\n - #925: An option to accumulate JFR events in memory instead of flushing to a file\n - #929: Load symbols from debuginfod cache\n - #982: Sample contended locks by overflowing interval bucket\n - #993: Filter native frames in allocation profile\n - #896: FlameGraph: `Alt+Click` to remove stacks\n - #1097: FlameGraph: `N`/`Shift+N` to navigate through search results\n - #1044: Fall back to `ctimer` for CPU profiling when perf_events are unavailable\n - #1068: Count missed samples when estimating total CPU time in `ctimer` mode\n - #1070: Demangle Rust v0 symbols\n - #1007: Use `ExecutionSample` event for CPU profiling and `WallClockSample` for Wall clock profiling\n - #1011: Obtain `can_generate_sampled_object_alloc_events` JVMTI capability only when needed\n - #1013: Intercept java.util.concurrent locks more efficiently\n - #759: Discover available profiling signal automatically\n - #884: Record event timestamps early\n - #885: Print error message if JVM fails to load libasyncProfiler\n - #892: Resolve tracepoint id in `asprof`\n - Suppress dynamic attach warning on JDK 21+\n\n### Bug fixes\n - #1095: jfr print fails when a recording has empty pools\n - #1084: Fixed Logging related races\n - #1074: Parse both .rela.dyn and .rela.plt sections\n - #1003: Support both tracefs and debugfs for kernel tracepoints\n - #986: Profiling output respects loglevel\n - #981: Avoid JVM crash by deleting JNI refs after `GetMethodDeclaringClass`\n - #934: Fix crash on Zing in a native thread\n - #843: Fix race between parsing and concurrent unloading of shared libraries\n - Stack walking fixes for ARM64\n - Converter fixes for `jfrsync` profiles\n - Fixed parsing non-PIC executables\n - Fixed recursion in `pthread_create` when using native profiling API\n - Fixed crashes on Alpine when profiling native apps\n - Fixed warnings with `-Xcheck:jni`\n - Fixed DefineClass crash on OpenJ9\n - JfrReader should handle custom events properly\n - Handle truncated JFRs\n\n### Project Infrastructure\n - Restructure and update documentation\n - Implement test framework; add new integration tests\n - Unit test framework for C++ code\n - Run CI on all supported platforms\n - Test Corretto 11, 17, 21, 23 in CI\n - Add GHA to validate license headers\n - Add Markdown checker and formatter\n - Add Issue and Pull Request templates\n - Add Contributing Guidelines and Code of Conduct\n - Run static analyzer and fix found issues (#1034, #1039, #1049, #1051, #1098)\n - Provide Docker image for building async-profiler release packages\n - Publish nightly builds automatically\n\n## [3.0] - 2024-01-20\n\n### Features\n - #724: Binary launcher `asprof`\n - #751: Profile non-Java processes\n - #795: AsyncGetCallTrace replacement\n - #719: Classify execution samples into categories in JFR converter\n - #855: `ctimer` mode for accurate profiling without perf_events\n - #740: Profile CPU + Wall clock together\n - #736: Show targets of vtable/itable calls\n - #777: Show JIT compilation task\n - #644: RISC-V port\n - #770: LoongArch64 port\n\n### Improvements\n - #733: Make the same `libasyncProfiler` work with both glibc and musl\n - #734: Support raw PMU event descriptors\n - #759: Configure alternative profiling signal\n - #761: Parse dynamic linking structures\n - #723: `--clock` option to select JFR timestamp source\n - #750: `--jfrsync` may specify a list of JFR events\n - #849: Parse concatenated multi-chunk JFRs\n - #833: Time-to-safepoint JFR event\n - #832: Normalize names of hidden classes / lambdas\n - #864: Reduce size of HTML Flame Graph\n - #783: Shutdown asprof gracefully on SIGTERM\n - Better demangling of C++ and Rust symbols\n - DWARF unwinding for ARM64\n - `JfrReader` can parse in-memory buffer\n - Support custom events in `JfrReader`\n - An option to read JFR file by chunks\n - Record `GCHeapSummary` events in JFR\n\n### Bug fixes\n - Workaround macOS crashes in SafeFetch\n - Fixed attach to OpenJ9 on macOS\n - Support `UseCompressedObjectHeaders` aka Lilliput\n - Fixed allocation profiling on JDK 20.0.x\n - Fixed context-switches profiling\n - Prefer ObjectSampler to TLAB hooks for allocation profiling\n - Improved accuracy of ObjectSampler in `--total` mode\n - Make Flame Graph status line and search results always visible\n - `loop` and `timeout` options did not work in some modes\n - Restart interrupted poll/epoll_wait syscalls\n - Fixed stack unwinding issues on ARM64\n - Workaround for stale jmethodIDs\n - Calculate ELF base address correctly\n - Do not dump redundant threads in a JFR chunk\n - `check` action prints result to a file\n - Annotate JFR unit types with `@ContentType`\n\n## [2.9] - 2022-11-27\n\n### Features\n - Java Heap leak profiler\n - `meminfo` command to print profiler's memory usage\n - Profiler API with embedded agent as a Maven artifact\n\n### Improvements\n - `--include`/`--exclude` options in the FlameGraph converter\n - `--simple` and `--dot` options in jfr2flame converter\n - An option for agressive recovery of `[unknown_Java]` stack traces\n - Do not truncate signatures in collapsed format\n - Display inlined frames under a runtime stub\n\n### Bug fixes\n - Profiler did not work with Homebrew JDK\n - Fixed allocation profiling on Zing\n - Various `jfrsync` fixes\n - Symbol parsing fixes\n - Attaching to a container on Linux 3.x could fail\n\n## [2.8.3] - 2022-07-16\n\n### Improvements\n - Support virtualized ARM64 macOS\n - A switch to generate auxiliary events by async-profiler or FlightRecorder in jfrsync mode\n\n### Bug fixes\n - Could not recreate perf_events after the first failure\n - Handle different versions of Zing properly\n - Do not call System.loadLibrary, when libasyncProfiler is preloaded\n\n## [2.8.2] - 2022-07-13\n\n### Bug fixes\n - The same .so works with glibc and musl\n - dlopen hook did not work on Arch Linux\n - Fixed JDK 7 crash\n - Fixed CPU profiling on Zing\n\n### Changes\n - Mark interpreted frames with `_[0]` in collapsed output\n - Double click selects a method name on a flame graph\n\n## [2.8.1] - 2022-06-10\n\n### Improvements\n - JFR to pprof converter (contributed by @NeQuissimus)\n - JFR converter improvements: time range, collapsed output, pattern highlighting\n - `%n` pattern in file names; limit number of output files\n - `--lib` to customize profiler library path in a container\n - `profiler.sh list` command now works without PID\n\n### Bug fixes\n - Fixed crashes related to continuous profiling\n - Fixed Alpine/musl compatibility issues\n - Fixed incomplete collapsed output due to weird locale settings\n - Workaround for JDK-8185348\n\n## [2.8] - 2022-05-09\n\n### Features\n - Mark top methods as interpreted, compiled (C1/C2), or inlined\n - JVM TI based allocation profiling for JDK 11+\n - Embedded HTTP management server\n\n### Improvements\n - Re-implemented stack recovery for better reliability\n - Add `loglevel` argument\n - Do not mmap perf page in `--all-user` mode\n - Distinguish runnable/sleeping threads in OpenJ9 wall-clock profiler\n - `--cpu` converter option to extract CPU profile from the wall-clock output\n\n## [2.7] - 2022-02-14\n\n### Features\n - Experimental support for OpenJ9 VM\n - DWARF stack unwinding\n\n### Improvements\n - Better handling of VM threads (fixed missing JIT threads)\n - More reliable recovery from `not_walkable` AGCT failures\n - Do not accept unknown agent arguments\n\n## [2.6] - 2022-01-09\n\n### Features\n - Continuous profiling; `loop` and `timeout` options\n\n### Improvements\n - Reliability improvements: avoid certain crashes and deadlocks\n - Smaller and faster agent library\n - Minor `jfr` and `jfrsync` enhancements (see the commit log)\n\n## [2.5.1] - 2021-12-05\n\n### Bug fixes\n - Prevent early unloading of libasyncProfiler.so\n - Read kernel symbols only for perf_events\n - Escape backslashes in flame graphs\n - Avoid duplicate categories in `jfrsync` mode\n - Fixed stack overflow in RedefineClasses\n - Fixed deadlock when flushing JFR\n\n### Improvements\n - Support OpenJDK C++ Interpreter (aka Zero)\n - Allow reading incomplete JFR recordings\n\n## [2.5] - 2021-10-01\n\n### Features\n - macOS/ARM64 (aka Apple M1) port\n - PPC64LE port (contributed by @ghaug)\n - Profile low-privileged processes with perf_events (contributed by @Jongy)\n - Raw PMU events; kprobes & uprobes\n - Dump results in the middle of profiling session\n - Chunked JFR; support JFR files larger than 2 GB\n - Integrate async-profiler events with JDK Flight Recordings\n\n### Improvements\n - Use RDTSC for JFR timestamps when possible\n - Show line numbers and bci in Flame Graphs\n - jfr2flame can produce Allocation and Lock flame graphs\n - Flame Graph title depends on the event and `--total`\n - Include profiler logs and native library list in JFR output\n - Lock profiling no longer requires JVM symbols\n - Better container support\n - Native function profiler can count the specified argument\n - An option to group threads by scheduling policy\n - An option to prepend library name to native symbols\n\n### Notes\n - macOS build is provided as a fat binary that works both on x86-64 and ARM64\n - 32-bit binaries are no longer shipped. It is still possible to build them from sources\n - Dropped JDK 6 support (may still work though)\n\n## [2.0] - 2021-03-14\n\n### Features\n - Profile multiple events together (cpu + alloc + lock)\n - HTML 5 Flame Graphs: faster rendering, smaller size\n - JFR v2 output format, compatible with FlightRecorder API\n - JFR to Flame Graph converter\n - Automatically turn profiling on/off at `--begin`/`--end` functions\n - Time-to-safepoint profiling: `--ttsp`\n\n### Improvements\n - Unlimited frame buffer. Removed `-b` option and 64K stack traces limit\n - Additional JFR events: OS, CPU, and JVM information; CPU load\n - Record bytecode indices / line numbers\n - Native stack traces for Java events\n - Improved CLI experience\n - Better error handling; an option to log warnings/errors to a dedicated stream\n - Reduced the amount of unknown stack traces\n\n### Changes\n - Removed non-ASL code. No more CDDL license\n\n## [1.8.4] - 2021-02-24\n\n### Improvements\n - Smaller and faster agent library\n\n### Bug fixes\n - Fixed JDK 7 crash during wall-clock profiling\n\n## [1.8.3] - 2021-01-06\n\n### Improvements\n - libasyncProfiler.dylib symlink on macOS\n\n### Bug fixes\n - Fixed possible deadlock on non-HotSpot JVMs\n - Gracefully stop profiler when terminating JVM\n - Fixed GetStackTrace problem after RedefineClasses\n\n## [1.8.2] - 2020-11-02\n\n### Improvements\n - AArch64 build is now provided out of the box\n - Compatibility with JDK 15 and JDK 16\n\n### Bug fixes\n - More careful native stack walking in wall-clock mode\n - `resume` command is not compatible with JFR format\n - Wrong allocation sizes on JDK 8u262\n\n## [1.8.1] - 2020-09-05\n\n### Improvements\n - Possibility to specify application name instead of `pid` (contributed by @yuzawa-san)\n\n### Bug fixes\n - Fixed long attach time and slow class loading on JDK 8\n - `UnsatisfiedLinkError` during Java method profiling\n - Avoid reading `/proc/kallsyms` when `--all-user` is specified\n\n## [1.8] - 2020-08-10\n\n### Features\n - Converters between different output formats:\n   - JFR -> nflx (FlameScope)\n   - Collapsed stacks -> HTML 5 Flame Graph \n\n### Improvements\n - `profiler.sh` no longer requires bash (contributed by @cfstras)\n - Fixed long attach time and slow class loading on JDK 8\n - Fixed deadlocks in wall-clock profiling mode\n - Per-thread reverse Flame Graph and Call Tree\n - ARM build now works with ARM and THUMB flavors of JDK\n\n### Changes\n - Release package is extracted into a separate folder\n\n## [1.7.1] - 2020-05-14\n\n### Features\n - LBR call stack support (available since Haswell)\n\n### Improvements\n - `--filter` to profile only specified thread IDs in wall-clock mode\n - `--safe-mode` to disable selected stack recovery techniques\n\n## [1.7] - 2020-03-17\n\n### Features\n - Profile invocations of arbitrary Java methods\n - Filter stack traces by the given name pattern\n - Java API to filter monitored threads\n - `--cstack`/`--no-cstack` option\n\n### Improvements\n - Thread names and Java thread IDs in JFR output\n - Wall clock profiler distinguishes RUNNABLE vs. SLEEPING threads\n - Stable profiling interval in wall clock mode\n - C++ function names as events, e.g. `-e VMThread::execute`\n - `check` command to test event availability\n - Allow shading of AsyncProfiler API\n - Enable CPU profiling on WSL\n - Enable allocation profiling on Zing\n - Reduce the amount of `unknown_Java` samples\n\n## [1.6] - 2019-09-09\n\n### Features\n - Pause/resume profiling\n - Allocation profiling support for JDK 12, 13 (contributed by @rraptorr)\n\n### Improvements\n - Include all AsyncGetCallTrace failures in the profile\n - Parse symbols of JNI libraries loaded in runtime\n - The agent autodetects output format by the file extension\n - Output file name patterns: `%p` and `%t`\n - `-g` option to print method signatures\n - `-j` can increase the maximum Java stack depth\n - Allocaton sampling rate can be adjusted with `-i`\n - Improved reliability on macOS\n\n### Changes\n - `-f` file names are now relative to the current shell directory\n\n## [1.5] - 2019-01-08\n\n### Features\n - Wall-clock profiler: `-e wall`\n - `-e itimer` mode for systems that do not support perf_events\n - Native stack traces on macOS\n - Support for Zing runtime, except allocation profiling\n\n### Improvements\n - `--all-user` option to allow profiling with restricted\n   `perf_event_paranoid` (contributed by @jpbempel)\n - `-a` option to annotate method names\n - Improved attach to containerized and chroot'ed JVMs\n - Native function profiling now accepts non-public symbols\n - Better mapping of Java thread names (contributed by @KirillTim)\n\n### Changes\n - Changed default profiling engine on macOS\n - Fixed the order of stack frames in JFR format\n\n## [1.4] - 2018-06-24\n\n### Features\n - Interactive Call tree and Backtrace tree in HTML format (contributed by @rpulle)\n - Experimental support for Java Flight Recorder (JFR) compatible output\n \n### Improvements\n - Added units: `ms`, `us`, `s` and multipliers: `K`, `M`, `G` for interval argument\n - API and command-line option `-v` for profiler version\n - Allow profiling containerized JVMs on older kernels\n\n### Changes\n - Default CPU sampling interval reduced to 10 ms\n - Changed the text format of flat profile\n\n## [1.3] - 2018-05-13\n\n### Features\n - Profiling of native functions, e.g. malloc\n \n### Improvements\n - JDK 9, 10, 11 support for heap profiling with accurate stack traces\n - `root` can now profile Java processes of any user\n - `-j` option for limiting Java stack depth\n\n## [1.2] - 2018-03-05\n\n### Features\n - Produce SVG files out of the box; flamegraph.pl is no longer needed\n - Profile ReentrantLock contention\n - Java API\n \n### Improvements\n - Allocation and Lock profiler now works on JDK 7, too\n - Faster dumping of results\n\n### Changes\n - `total` counter of allocation profiler now measures heap pressure (like JMC)\n\n## [1.1] - 2017-12-03\n\n### Features\n - Linux Perf Events profiling: CPU cycles, cache misses, branch misses, page faults, context switches etc.\n - Kernel tracepoints support\n - Contended monitor (aka intrinsic lock) profiling\n - Individual thread profiles\n\n### Improvements\n - Profiler can engage at JVM start and automatically dump results on exit\n - `list` command-line option to list supported events\n - Automatically find target process ID with `jps` tool\n - An option to include counter value in `collapsed` output\n - Friendly class names in allocation profile\n - Split allocations in new TLAB vs. outside TLAB\n\n### Changes\n - Replaced `-m` modes with `-e` events\n - Interval changed from `int` to `long`\n\n## [1.0] - 2017-10-09\n\n### Features\n - CPU profiler without Safepoint bias\n - Lightweight Allocation profiler\n - Java, native and kernel stack traces\n - FlameGraph compatible output\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.3017578125,
          "content": "## Code of Conduct\nThis project has adopted the [Amazon Open Source Code of Conduct](https://aws.github.io/code-of-conduct).\nFor more information see the [Code of Conduct FAQ](https://aws.github.io/code-of-conduct-faq) or contact\nopensource-codeofconduct@amazon.com with any additional questions or comments.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.236328125,
          "content": "# Contributing Guidelines\n\nThank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional\ndocumentation, we greatly value feedback and contributions from our community.\n\nPlease read through this document before submitting any issues or pull requests to ensure we have all the necessary\ninformation to effectively respond to your bug report or contribution.\n\n\n## Security issue notifications\nIf you discover a potential security issue in this project we ask that you notify our [Security Team](mailto:security@profiler.tools). Please do **not** create a public GitHub issue.\n\n\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/async-profiler/async-profiler/issues), or [recently closed](https://github.com/async-profiler/async-profiler/issues?q=is%3Aissue+is%3Aclosed), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n\n* A reproducible test case or series of steps\n* The version of our code being used\n* Any modifications you've made relevant to the bug\n* Anything unusual about your environment or deployment\n\n\n## Contributing via Pull Requests\nContributions via pull requests are much appreciated. Before sending us a pull request, please ensure that:\n\n1. You are working against the latest source on the *master* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n1. Fork the repository.\n2. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change.\n3. Ensure local tests pass.\n4. Commit to your fork using clear commit messages.\n5. Send us a pull request, answering any default questions in the pull request interface.\n6. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation.\n\nGitHub provides additional document on [forking a repository](https://help.github.com/articles/fork-a-repo/) and\n[creating a pull request](https://help.github.com/articles/creating-a-pull-request/).\n\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/async-profiler/async-profiler/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\nThis project has adopted the [Amazon Open Source Code of Conduct](https://aws.github.io/code-of-conduct).\nFor more information see the [Code of Conduct FAQ](https://aws.github.io/code-of-conduct-faq) or contact\nopensource-codeofconduct@amazon.com with any additional questions or comments.\n\n\n## Licensing\n\nSee the [LICENSE](LICENSE) file for our project's licensing. We will ask you to confirm the licensing of your contribution.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.326171875,
          "content": "# Image for building async-profiler release packages\n\n# Stage 0: download and build musl\nFROM public.ecr.aws/debian/debian:10-slim\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo libicu-dev patchelf curl make g++ openjdk-11-jdk-headless gcovr && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n\nARG musl_src=musl-1.2.5\nARG musl_sha256=a9a118bbe84d8764da0ea0d28b3ab3fae8477fc7e4085d90102b8596fc7c75e4\n\nADD https://musl.libc.org/releases/${musl_src}.tar.gz /\nRUN echo ${musl_sha256} ${musl_src}.tar.gz | sha256sum -c\n\nRUN [\"/bin/bash\", \"-c\", \"\\\n    tar xfz ${musl_src}.tar.gz && \\\n    cd /${musl_src} && \\\n    ./configure --disable-shared --prefix=/usr/local/musl && \\\n    make -j`nproc` && make install && make clean && \\\n    ln -s /usr/include/$(arch)-linux-gnu/asm /usr/include/{asm-generic,linux} /usr/local/musl/include/\"]\n\n# Stage 1: install build tools + copy musl toolchain from the previous step\nFROM public.ecr.aws/debian/debian:10-slim\n\n# The following command should be exactly the same as at stage 0 to benefit from caching.\n# libicu-dev is needed for the github actions runner\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    sudo libicu-dev patchelf curl make g++ openjdk-11-jdk-headless gcovr && \\\n    rm -rf /var/cache/apt /var/lib/apt/lists/*\n\nCOPY --from=0 /usr/local/musl /usr/local/musl\n"
        },
        {
          "name": "JavaHome.class",
          "type": "blob",
          "size": 0.6142578125,
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 7.958984375,
          "content": "PROFILER_VERSION ?= 3.0\n\nifeq ($(COMMIT_TAG),true)\n  PROFILER_VERSION := $(PROFILER_VERSION)-$(shell git rev-parse --short=8 HEAD)\nelse ifneq ($(COMMIT_TAG),)\n  PROFILER_VERSION := $(PROFILER_VERSION)-$(COMMIT_TAG)\nendif\n\nPACKAGE_NAME=async-profiler-$(PROFILER_VERSION)-$(OS_TAG)-$(ARCH_TAG)\nPACKAGE_DIR=/tmp/$(PACKAGE_NAME)\n\nASPROF=bin/asprof\nJFRCONV=bin/jfrconv\nLIB_PROFILER=lib/libasyncProfiler.$(SOEXT)\nAPI_JAR=jar/async-profiler.jar\nCONVERTER_JAR=jar/jfr-converter.jar\nTEST_JAR=test.jar\n\nCC=$(CROSS_COMPILE)gcc\nCXX=$(CROSS_COMPILE)g++\nSTRIP=$(CROSS_COMPILE)strip\n\nCFLAGS_EXTRA ?=\nCXXFLAGS_EXTRA ?=\nCFLAGS=-O3 -fno-exceptions $(CFLAGS_EXTRA)\nCXXFLAGS=-O3 -fno-exceptions -fno-omit-frame-pointer -fvisibility=hidden -std=c++11 $(CXXFLAGS_EXTRA)\nCPPFLAGS=\nDEFS=-DPROFILER_VERSION=\\\"$(PROFILER_VERSION)\\\"\nINCLUDES=-I$(JAVA_HOME)/include -Isrc/helper\nLIBS=-ldl -lpthread\nMERGE=true\nGCOV ?= gcov\n\nJAVAC=$(JAVA_HOME)/bin/javac\nJAR=$(JAVA_HOME)/bin/jar\nJAVA=$(JAVA_HOME)/bin/java\nJAVA_TARGET=8\nJAVAC_OPTIONS=--release $(JAVA_TARGET) -Xlint:-options\n\nTEST_LIB_DIR=build/test/lib\nLOG_DIR=build/test/logs\nLOG_LEVEL=\nSKIP=\nTEST_FLAGS=-DlogDir=$(LOG_DIR) -DlogLevel=$(LOG_LEVEL) -Dskip=$(SKIP)\n\nSOURCES := $(wildcard src/*.cpp)\nHEADERS := $(wildcard src/*.h)\nRESOURCES := $(wildcard src/res/*)\nJAVA_HELPER_CLASSES := $(wildcard src/helper/one/profiler/*.class)\nAPI_SOURCES := $(wildcard src/api/one/profiler/*.java)\nCONVERTER_SOURCES := $(shell find src/converter -name '*.java')\nTEST_SOURCES := $(shell find test -name '*.java')\nTESTS ?= $(notdir $(patsubst %/,%,$(wildcard test/test/*/)))\nCPP_TEST_SOURCES := test/native/testRunner.cpp $(shell find test/native -name '*Test.cpp')\nCPP_TEST_HEADER := test/native/testRunner.hpp\nCPP_TEST_INCLUDES := -Isrc -Itest/native\n\nifeq ($(JAVA_HOME),)\n  JAVA_HOME:=$(shell java -cp . JavaHome)\nendif\n\nOS:=$(shell uname -s)\nifeq ($(OS),Darwin)\n  CXXFLAGS += -D_XOPEN_SOURCE -D_DARWIN_C_SOURCE -Wl,-rpath,@executable_path/../lib -Wl,-rpath,@executable_path/../lib/server\n  INCLUDES += -I$(JAVA_HOME)/include/darwin\n  SOEXT=dylib\n  PACKAGE_EXT=zip\n  OS_TAG=macos\n  ifeq ($(FAT_BINARY),true)\n    FAT_BINARY_FLAGS=-arch x86_64 -arch arm64 -mmacos-version-min=10.12\n    CFLAGS += $(FAT_BINARY_FLAGS)\n    CXXFLAGS += $(FAT_BINARY_FLAGS)\n    PACKAGE_NAME=async-profiler-$(PROFILER_VERSION)-$(OS_TAG)\n    MERGE=false\n  endif\nelse\n  CXXFLAGS += -U_FORTIFY_SOURCE -Wl,-z,defs -Wl,--exclude-libs,ALL -static-libstdc++ -static-libgcc -fdata-sections -ffunction-sections -Wl,--gc-sections\n  ifeq ($(MERGE),true)\n    CXXFLAGS += -fwhole-program\n  endif\n  LIBS += -lrt\n  INCLUDES += -I$(JAVA_HOME)/include/linux\n  SOEXT=so\n  PACKAGE_EXT=tar.gz\n  OS_TAG=linux\nendif\n\nifeq ($(ARCH_TAG),)\n  ARCH:=$(shell uname -m)\n  ifeq ($(ARCH),x86_64)\n    ARCH_TAG=x64\n  else ifeq ($(ARCH),aarch64)\n    ARCH_TAG=arm64\n  else ifeq ($(ARCH),arm64)\n    ARCH_TAG=arm64\n  else ifeq ($(findstring arm,$(ARCH)),arm)\n    ARCH_TAG=arm32\n  else ifeq ($(ARCH),ppc64le)\n    ARCH_TAG=ppc64le\n  else ifeq ($(ARCH),riscv64)\n    ARCH_TAG=riscv64\n  else ifeq ($(ARCH),loongarch64)\n    ARCH_TAG=loongarch64\n  else\n    ARCH_TAG=x86\n  endif\nendif\n\nSTATIC_BINARY=$(findstring musl-gcc,$(CC))\nifneq (,$(STATIC_BINARY))\n  CFLAGS += -static -fdata-sections -ffunction-sections -Wl,--gc-sections\nendif\n\nifneq (,$(findstring $(ARCH_TAG),x86 x64 arm64))\n  CXXFLAGS += -momit-leaf-frame-pointer\nendif\n\n\n.PHONY: all jar release build-test test native clean coverage clean-coverage build-test-java build-test-cpp build-test-libs test-cpp test-java check-md format-md\n\nall: build/bin build/lib build/$(LIB_PROFILER) build/$(ASPROF) jar build/$(JFRCONV)\n\njar: build/jar build/$(API_JAR) build/$(CONVERTER_JAR)\n\nrelease: $(PACKAGE_NAME).$(PACKAGE_EXT)\n\n$(PACKAGE_NAME).tar.gz: $(PACKAGE_DIR)\n\tpatchelf --remove-needed ld-linux-x86-64.so.2 --remove-needed ld-linux-aarch64.so.1 $(PACKAGE_DIR)/$(LIB_PROFILER)\n\ttar czf $@ -C $(PACKAGE_DIR)/.. $(PACKAGE_NAME)\n\trm -r $(PACKAGE_DIR)\n\n$(PACKAGE_NAME).zip: $(PACKAGE_DIR)\n\ttruncate -cs -`stat -f \"%z\" build/$(CONVERTER_JAR)` $(PACKAGE_DIR)/$(JFRCONV)\nifneq ($(GITHUB_ACTIONS), true)\n\tcodesign -s \"Developer ID\" -o runtime --timestamp -v $(PACKAGE_DIR)/$(ASPROF) $(PACKAGE_DIR)/$(JFRCONV) $(PACKAGE_DIR)/$(LIB_PROFILER)\nendif\n\tcat build/$(CONVERTER_JAR) >> $(PACKAGE_DIR)/$(JFRCONV)\n\tditto -c -k --keepParent $(PACKAGE_DIR) $@\n\trm -r $(PACKAGE_DIR)\n\n$(PACKAGE_DIR): all LICENSE README.md\n\tmkdir -p $(PACKAGE_DIR)\n\tcp -RP build/bin build/lib LICENSE README.md $(PACKAGE_DIR)/\n\tchmod -R 755 $(PACKAGE_DIR)\n\tchmod 644 $(PACKAGE_DIR)/lib/* $(PACKAGE_DIR)/LICENSE $(PACKAGE_DIR)/README.md\n\nbuild/%:\n\tmkdir -p $@\n\nbuild/$(ASPROF): src/main/* src/jattach/* src/fdtransfer.h\n\t$(CC) $(CPPFLAGS) $(CFLAGS) $(DEFS) -o $@ src/main/*.cpp src/jattach/*.c\n\t$(STRIP) $@\n\nbuild/$(JFRCONV): src/launcher/* build/$(CONVERTER_JAR)\n\t$(CC) $(CPPFLAGS) $(CFLAGS) $(DEFS) -o $@ src/launcher/*.cpp\n\t$(STRIP) $@\n\tcat build/$(CONVERTER_JAR) >> $@\n\nbuild/$(LIB_PROFILER): $(SOURCES) $(HEADERS) $(RESOURCES) $(JAVA_HELPER_CLASSES)\nifeq ($(MERGE),true)\n\tfor f in src/*.cpp; do echo '#include \"'$$f'\"'; done |\\\n\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(DEFS) $(INCLUDES) -fPIC -shared -o $@ -xc++ - $(LIBS)\nelse\n\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(DEFS) $(INCLUDES) -fPIC -shared -o $@ $(SOURCES) $(LIBS)\nendif\n\nbuild/$(API_JAR): $(API_SOURCES)\n\tmkdir -p build/api\n\t$(JAVAC) $(JAVAC_OPTIONS) -d build/api $(API_SOURCES)\n\t$(JAR) cf $@ -C build/api .\n\t$(RM) -r build/api\n\nbuild/$(CONVERTER_JAR): $(CONVERTER_SOURCES) $(RESOURCES)\n\tmkdir -p build/converter\n\t$(JAVAC) $(JAVAC_OPTIONS) -d build/converter $(CONVERTER_SOURCES)\n\t$(JAR) cfe $@ Main -C build/converter . -C src/res .\n\t$(RM) -r build/converter\n\n%.class: %.java\n\t$(JAVAC) -source 7 -target 7 -Xlint:-options -g:none $^\n\nbuild/test/cpptests: $(CPP_TEST_SOURCES) $(CPP_TEST_HEADER) $(SOURCES) $(HEADERS) $(RESOURCES) $(JAVA_HELPER_CLASSES)\n\tmkdir -p build/test\nifeq ($(MERGE),true)\n\tfor f in src/*.cpp test/native/*.cpp; do echo '#include \"'$$f'\"'; done |\\\n\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(DEFS) $(INCLUDES) $(CPP_TEST_INCLUDES) -fPIC -o $@ -xc++ - $(LIBS)\nelse\n\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(DEFS) $(INCLUDES) $(CPP_TEST_INCLUDES) -fPIC -o $@ $(SOURCES) $(CPP_TEST_SOURCES) $(LIBS)\nendif\n\nbuild-test-java: all build/$(TEST_JAR) build-test-libs\n\nbuild-test-cpp: build/test/cpptests build-test-libs\n\nbuild-test: build-test-cpp build-test-java\n\nbuild-test-libs:\n\t@mkdir -p $(TEST_LIB_DIR)\n\t$(CC) -shared -fPIC -o $(TEST_LIB_DIR)/libreladyn.$(SOEXT) test/native/libs/reladyn.c\n\t$(CC) -shared -fPIC $(INCLUDES) -Isrc -o $(TEST_LIB_DIR)/libjnimalloc.$(SOEXT) test/native/libs/jnimalloc.c\n\ntest-cpp: build-test-cpp\n\techo \"Running cpp tests...\"\n\tLD_LIBRARY_PATH=\"$(TEST_LIB_DIR)\" build/test/cpptests\n\ntest-java: build-test-java\n\techo \"Running tests against $(LIB_PROFILER)\"\n\t$(JAVA) \"-Djava.library.path=$(TEST_LIB_DIR)\" $(TEST_FLAGS) -ea -cp \"build/test.jar:build/jar/*:build/lib/*\" one.profiler.test.Runner $(TESTS)\n\ncoverage: override FAT_BINARY=false\ncoverage: clean-coverage\n\t$(MAKE) test-cpp CXXFLAGS_EXTRA=\"-fprofile-arcs -ftest-coverage -fPIC -O0 --coverage\"\n\tmkdir -p build/test/coverage\n\tcd build/test/ && gcovr -r ../.. --html-details --gcov-executable \"$(GCOV)\" -o coverage/index.html\n\trm -rf -- -.gc*\n\ntest: test-cpp test-java\n\nbuild/$(TEST_JAR): $(TEST_SOURCES) build/$(CONVERTER_JAR)\n\tmkdir -p build/test\n\t$(JAVAC) -source $(JAVA_TARGET) -target $(JAVA_TARGET) -Xlint:-options -cp \"build/jar/*:build/converter/*\" -d build/test $(TEST_SOURCES)\n\t$(JAR) cf $@ -C build/test .\n\nnative:\n\tmkdir -p native/linux-x64 native/linux-arm64 native/macos\n\ttar xfO async-profiler-$(PROFILER_VERSION)-linux-x64.tar.gz */build/libasyncProfiler.so > native/linux-x64/libasyncProfiler.so\n\ttar xfO async-profiler-$(PROFILER_VERSION)-linux-arm64.tar.gz */build/libasyncProfiler.so > native/linux-arm64/libasyncProfiler.so\n\tunzip -p async-profiler-$(PROFILER_VERSION)-macos.zip */build/libasyncProfiler.dylib > native/macos/libasyncProfiler.dylib\n\ncheck-md:\n\tprettier -c README.md \"docs/**/*.md\"\n\nformat-md:\n\tprettier -w README.md \"docs/**/*.md\"\n\nclean-coverage:\n\t$(RM) -rf build/test/cpptests build/test/coverage\n\nclean:\n\t$(RM) -r build\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.671875,
          "content": "# Async-profiler\n\nThis project is a low overhead sampling profiler for Java\nthat does not suffer from the [Safepoint bias problem](http://psy-lob-saw.blogspot.ru/2016/02/why-most-sampling-java-profilers-are.html).\nIt features HotSpot-specific API to collect stack traces\nand to track memory allocations. The profiler works with\nOpenJDK and other Java runtimes based on the HotSpot JVM.\n\nUnlike traditional Java profilers, async-profiler monitors non-Java threads\n(e.g., GC and JIT compiler threads) and shows native and kernel frames in stack traces.\n\nWhat can be profiled:\n\n- CPU time\n- Allocations in Java Heap\n- Native memory allocations and leaks\n- Contended locks\n- Hardware and software performance counters like cache misses, page faults, context switches\n- and [more](docs/ProfilingModes.md).\n\nSee our [3 hours playlist](https://www.youtube.com/playlist?list=PLNCLTEx3B8h4Yo_WvKWdLvI9mj1XpTKBr)\nto learn about more features.\n\n# Download\n\n### Stable release: [3.0](https://github.com/async-profiler/async-profiler/releases/tag/v3.0)\n\n- Linux x64: [async-profiler-3.0-linux-x64.tar.gz](https://github.com/async-profiler/async-profiler/releases/download/v3.0/async-profiler-3.0-linux-x64.tar.gz)\n- Linux arm64: [async-profiler-3.0-linux-arm64.tar.gz](https://github.com/async-profiler/async-profiler/releases/download/v3.0/async-profiler-3.0-linux-arm64.tar.gz)\n- macOS x64/arm64: [async-profiler-3.0-macos.zip](https://github.com/async-profiler/async-profiler/releases/download/v3.0/async-profiler-3.0-macos.zip)\n- Profile converters: [converter.jar](https://github.com/async-profiler/async-profiler/releases/download/v3.0/converter.jar)\n\n### Nightly builds\n\n[The most recent binaries](https://github.com/async-profiler/async-profiler/releases/tag/nightly) corresponding\nto the latest successful commit in `master`.\n\nFor a build corresponding to one of the previous commits, go to\n[Nightly Builds](https://github.com/async-profiler/async-profiler/actions/workflows/test-and-publish-nightly.yml),\nclick the desired build and scroll down to the artifacts section. These binaries are kept for 30 days.\n\n# Quick start\n\nIn a typical use case, profiling a Java application is just a matter of a running `asprof` with a PID of a\nrunning Java process.\n\n```\n$ asprof -d 30 -f flamegraph.html <PID>\n```\n\nThe above command translates to: run profiler for 30 seconds and save results to `flamegraph.html`\nas an interactive [Flame Graph](docs/FlamegraphInterpretation.md) that can be viewed in a browser.\n\n[![FlameGraph](/.assets/images/flamegraph.png)](https://htmlpreview.github.io/?https://github.com/async-profiler/async-profiler/blob/master/.assets/html/flamegraph.html)\n\nFind more details in the [Getting started guide](docs/GettingStarted.md).\n\n# Building\n\n### Build status\n\n[![Build Status](https://github.com/async-profiler/async-profiler/actions/workflows/test-and-publish-nightly.yml/badge.svg?branch=master)](https://github.com/async-profiler/async-profiler/actions/workflows/test-and-publish-nightly.yml)\n\n### Minimum requirements\n\n- make\n- GCC 7.5.0+ or Clang 7.0.0+\n- JDK 11+\n\n### Now to build\n\nMake sure `gcc`, `g++` and `java` are available on the `PATH`.\nNavigate to the root directory with async-profiler sources and run `make`.\nasync-profiler launcher will be available at `build/bin/asprof`.\n\nOther Makefile targets:\n\n- `make test` - run unit and integration tests;\n- `make release` - package async-profiler binaries as `.tar.gz` (Linux) or `.zip` (macOS).\n\n### Supported platforms\n\n|           | Officially maintained builds | Other available ports                     |\n| --------- | ---------------------------- | ----------------------------------------- |\n| **Linux** | x64, arm64                   | x86, arm32, ppc64le, riscv64, loongarch64 |\n| **macOS** | x64, arm64                   |                                           |\n\n# Documentation\n\n## Basic usage\n\n- [Getting Started](docs/GettingStarted.md)\n- [Profiler Options](docs/ProfilerOptions.md)\n- [Profiling Modes](docs/ProfilingModes.md)\n- [Integrating async-profiler](docs/IntegratingAsyncProfiler.md)\n- [Profiling In Container](docs/ProfilingInContainer.md)\n\n## Profiler output\n\n- [Output Formats](docs/OutputFormats.md)\n- [FlameGraph Interpretation](docs/FlamegraphInterpretation.md)\n- [JFR Visualization](docs/JfrVisualization.md)\n- [Converter Usage](docs/ConverterUsage.md)\n\n## Advanced usage\n\n- [CPU Sampling Engines](docs/CpuSamplingEngines.md)\n- [Stack Walking Modes](docs/StackWalkingModes.md)\n- [Advanced Stacktrace Features](docs/AdvancedStacktraceFeatures.md)\n- [Profiling Non-Java Applications](docs/ProfilingNonJavaApplications.md)\n\n## Troubleshooting\n\nFor known issues faced while running async-profiler and their detailed troubleshooting,\nplease refer [here](docs/Troubleshooting.md).\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom-converter.xml",
          "type": "blob",
          "size": 4.177734375,
          "content": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>tools.profiler</groupId>\n    <artifactId>jfr-converter</artifactId>\n    <version>3.0</version>\n    <packaging>jar</packaging>\n\n    <name>async-profiler</name>\n    <url>https://profiler.tools</url>\n    <description>Low overhead sampling profiler for Java</description>\n\n    <licenses>\n        <license>\n            <name>Apache License Version 2.0</name>\n            <url>http://www.apache.org/licenses/LICENSE-2.0</url>\n            <distribution>repo</distribution>\n        </license>\n    </licenses>\n    <scm>\n        <url>https://github.com/async-profiler/async-profiler</url>\n        <connection>scm:git:git@github.com:async-profiler/async-profiler.git</connection>\n        <developerConnection>scm:git:git@github.com:async-profiler/async-profiler.git</developerConnection>\n    </scm>\n    <developers>\n        <developer>\n            <id>apangin</id>\n            <name>Andrei Pangin</name>\n            <email>noreply@pangin.pro</email>\n        </developer>\n    </developers>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n\n    <build>\n        <sourceDirectory>src/converter</sourceDirectory>\n        <resources>\n            <resource>\n                <directory>src/res</directory>\n            </resource>\n        </resources>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.8.1</version>\n                <configuration>\n                    <release>8</release>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>3.3.0</version>\n                <configuration>\n                    <archive>\n                        <manifest>\n                            <mainClass>Main</mainClass>\n                        </manifest>\n                    </archive>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-source-plugin</artifactId>\n                <version>3.2.0</version>\n                <executions>\n                    <execution>\n                        <id>attach-sources</id>\n                        <goals>\n                            <goal>jar-no-fork</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <version>3.2.0</version>\n                <executions>\n                    <execution>\n                        <id>attach-javadocs</id>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-gpg-plugin</artifactId>\n                <version>1.6</version>\n                <executions>\n                    <execution>\n                        <id>sign-artifacts</id>\n                        <phase>verify</phase>\n                        <goals>\n                            <goal>sign</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n\n    <distributionManagement>\n        <snapshotRepository>\n            <id>ossrh</id>\n            <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n        </snapshotRepository>\n        <repository>\n            <id>ossrh</id>\n            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>\n        </repository>\n    </distributionManagement>\n</project>\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 4.78125,
          "content": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>tools.profiler</groupId>\n    <artifactId>async-profiler</artifactId>\n    <version>3.0</version>\n    <packaging>jar</packaging>\n\n    <name>async-profiler</name>\n    <url>https://profiler.tools</url>\n    <description>Low overhead sampling profiler for Java</description>\n\n    <licenses>\n        <license>\n            <name>Apache License Version 2.0</name>\n            <url>http://www.apache.org/licenses/LICENSE-2.0</url>\n            <distribution>repo</distribution>\n        </license>\n    </licenses>\n    <scm>\n        <url>https://github.com/async-profiler/async-profiler</url>\n        <connection>scm:git:git@github.com:async-profiler/async-profiler.git</connection>\n        <developerConnection>scm:git:git@github.com:async-profiler/async-profiler.git</developerConnection>\n    </scm>\n    <developers>\n        <developer>\n            <id>apangin</id>\n            <name>Andrei Pangin</name>\n            <email>noreply@pangin.pro</email>\n        </developer>\n    </developers>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n\n    <build>\n        <sourceDirectory>src/api</sourceDirectory>\n        <resources>\n            <resource>\n                <directory>native</directory>\n            </resource>\n        </resources>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.8.1</version>\n                <configuration>\n                    <release>8</release>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>3.3.0</version>\n                <executions>\n                    <execution>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                        <configuration>\n                            <classifier>${native.platform}</classifier>\n                            <includes>\n                                <include>${native.platform}/*</include>\n                                <include>one/**</include>\n                            </includes>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-source-plugin</artifactId>\n                <version>3.2.0</version>\n                <configuration>\n                    <excludes>\n                        <exclude>linux*/**</exclude>\n                        <exclude>macos*/**</exclude>\n                    </excludes>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>attach-sources</id>\n                        <goals>\n                            <goal>jar-no-fork</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <version>3.2.0</version>\n                <executions>\n                    <execution>\n                        <id>attach-javadocs</id>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-gpg-plugin</artifactId>\n                <version>1.6</version>\n                <executions>\n                    <execution>\n                        <id>sign-artifacts</id>\n                        <phase>verify</phase>\n                        <goals>\n                            <goal>sign</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n\n    <distributionManagement>\n        <snapshotRepository>\n            <id>ossrh</id>\n            <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n        </snapshotRepository>\n        <repository>\n            <id>ossrh</id>\n            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>\n        </repository>\n    </distributionManagement>\n</project>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}