{
  "metadata": {
    "timestamp": 1736566143489,
    "page": 149,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "justcallmekoko/ESP32Marauder",
      "stars": 6546,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1083984375,
          "content": "\n.vscode/arduino.json\n.vscode/c_cpp_properties.json\n.vscode/settings.json\nesp32_marauder/.vscode/settings.json\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.1611328125,
          "content": "[submodule \"esp32_marauder/libraries/lv_arduino\"]\n\tpath = esp32_marauder/libraries/lv_arduino\n\turl = https://github.com/lvgl/lv_arduino.git\n[submodule \"esp32_marauder/libraries/LinkedList\"]\n\tpath = esp32_marauder/libraries/LinkedList\n\turl = https://github.com/ivanseidel/LinkedList.git\n[submodule \"esp32_marauder/libraries/TFT_eSPI\"]\n\tpath = esp32_marauder/libraries/TFT_eSPI\n\turl = https://github.com/justcallmekoko/TFT_eSPI.git\n[submodule \"esp32_marauder/libraries/JPEGDecoder\"]\n\tpath = esp32_marauder/libraries/JPEGDecoder\n\turl = https://github.com/Bodmer/JPEGDecoder.git\n[submodule \"esp32_marauder/libraries/NimBLE-Arduino\"]\n\tpath = esp32_marauder/libraries/NimBLE-Arduino\n\turl = https://github.com/h2zero/NimBLE-Arduino.git\n[submodule \"esp32_marauder/libraries/Adafruit_NeoPixel\"]\n\tpath = esp32_marauder/libraries/Adafruit_NeoPixel\n\turl = https://github.com/adafruit/Adafruit_NeoPixel.git\n[submodule \"esp32_marauder/libraries/ArduinoJson\"]\n\tpath = esp32_marauder/libraries/ArduinoJson\n\turl = https://github.com/bblanchon/ArduinoJson.git\n[submodule \"esp32_marauder/libraries/SwitchLib\"]\n\tpath = esp32_marauder/libraries/SwitchLib\n\turl = https://github.com/justcallmekoko/SwitchLib.git\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 3.451171875,
          "content": "sudo: required\n\nlanguage: python\npython: 3.6\n\nenv:\n  global:\n    # The Arduino IDE will be installed at APPLICATION_FOLDER/arduino\n    - APPLICATION_FOLDER=\"${HOME}/arduino-ide\"\n    - SKETCHBOOK_FOLDER=\"${HOME}/arduino-sketchbook\"\n\nbefore_install:\n\n  - git clone https://github.com/per1234/arduino-ci-script.git \"${HOME}/scripts/arduino-ci-script\"\n  - cd \"${HOME}/scripts/arduino-ci-script\"\n  # Get new tags from the remote\n  - git fetch --tags\n  # Checkout the latest tag\n  - git checkout $(git describe --tags `git rev-list --tags --max-count=1`)\n  - source \"${HOME}/scripts/arduino-ci-script/arduino-ci-script.sh\"\n\n  #- set_script_verbosity 1\n  #- set_verbose_output_during_compilation \"true\"\n\n  # Check for library issues that don't affect compilation\n  - set_library_testing \"true\"\n\n  - set_application_folder \"$APPLICATION_FOLDER\"\n  - set_sketchbook_folder \"$SKETCHBOOK_FOLDER\"\n\n  #- install_ide '(\"1.8.11\" \"1.8.12\" \"newest\")'\n  - install_ide '(\"newest\")'\n\n  # Install the library from the repository\n  #- install_library \"https://github.com/lvgl/lv_port_esp32/archive/master.zip\"\n  - install_library \"TFT_eSPI\"\n  - install_library \"JPEGDecoder\"\n  - install_library \"LinkedList\"\n  - install_library \"lv_arduino\"\n  - install_library \"https://github.com/adafruit/Adafruit_NeoPixel/archive/1.5.0.zip\" ## \"Adafruit_NeoPixel\"\n  - install_library 'https://github.com/bblanchon/ArduinoJson/releases/download/v5.13.5/ArduinoJson-v5.13.5.zip'\n  - install_library 'https://github.com/h2zero/NimBLE-Arduino/archive/master.zip' # NimBLE\n  \n  - cp ${TRAVIS_BUILD_DIR}/User_Setup.h /home/travis/arduino-sketchbook/libraries/TFT_eSPI/User_Setup.h\n  #- install_library 'https://github.com/bblanchon/ArduinoJson.git'\n  #- install_library \"https://github.com/spacehuhn/SimpleList.git\"\n  # \n  - install_package \"esp32:esp32\" \"https://dl.espressif.com/dl/package_esp32_index.json\" #  # esp32:esp32:m5stack-core-esp32\n  #- /home/travis/arduino-ide/arduino-1.8.10/arduino --pref \"compiler.warning_level=none\" --save-prefs   &>/dev/null\n  #- /home/travis/arduino-ide/arduino-1.8.10/arduino --pref \"build.warn_data_percentage=75\" --save-prefs   &>/dev/null\n  #- /home/travis/arduino-ide/arduino-1.8.10/arduino --pref \"boardsmanager.additional.urls=https://dl.espressif.com/dl/package_esp32_index.json\" --save-prefs   &>/dev/null\n  #- /home/travis/arduino-ide/arduino-1.8.10/arduino --install-boards esp32:esp32 &>/dev/null\n  - pip install pyserial\n\nscript:\n  # Compile all example sketches included with the library\n  # build_sketch arguments: sketch name, fqbn, allow failure, IDE version/list/range\n  # - check_library_manager_compliance \"$TRAVIS_BUILD_DIR\"\n  - set_ide_preference \"compiler.warning_level=auto\"\n  - build_sketch \"${TRAVIS_BUILD_DIR}/esp32_marauder/esp32_marauder.ino\" \"esp32:esp32:d32_pro:FlashFreq=80,UploadSpeed=921600,PartitionScheme=min_spiffs\" \"false\" \"newest\"\n\nafter_script:\n  # Commit a report of the job results to the CI-reports repository\n  - USER_NAME=\"$(echo \"$TRAVIS_REPO_SLUG\" | cut -d'/' -f 1)\"\n  - REPOSITORY_NAME=\"$(echo \"$TRAVIS_REPO_SLUG\" | cut -d'/' -f 2)\"\n  - publish_report_to_repository \"$REPORT_GITHUB_TOKEN\" \"https://github.com/${USER_NAME}/CI-reports.git\" \"$REPOSITORY_NAME\" \"build_$(printf \"%05d\\n\" \"${TRAVIS_BUILD_NUMBER}\")\" \"false\"\n  # Print a tab separated report of all sketch verification results to the log\n  - display_report\n\nnotifications:\n  email:\n    on_success: always\n    on_failure: always\n  webhooks:\n    urls:\n      - https://www.travisbuddy.com/\n    on_success: never\n    on_failure: always\n"
        },
        {
          "name": "Drivers",
          "type": "tree",
          "content": null
        },
        {
          "name": "FlashFiles",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "MIT License\n\nCopyright (c) 2020 Just Call Me Koko\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MarauderOTA",
          "type": "tree",
          "content": null
        },
        {
          "name": "PCBs",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.1474609375,
          "content": "<!---[![License: MIT](https://img.shields.io/github/license/mashape/apistatus.svg)](https://github.com/justcallmekoko/ESP32Marauder/blob/master/LICENSE)--->\n<!---[![Gitter](https://badges.gitter.im/justcallmekoko/ESP32Marauder.png)](https://gitter.im/justcallmekoko/ESP32Marauder)--->\n<!---[![Build Status](https://travis-ci.com/justcallmekoko/ESP32Marauder.svg?branch=master)](https://travis-ci.com/justcallmekoko/ESP32Marauder)--->\n<!---Shields/Badges https://shields.io/--->\n\n# ESP32 Marauder\n<p align=\"center\"><img alt=\"Marauder logo\" src=\"https://github.com/justcallmekoko/ESP32Marauder/blob/master/pictures/marauder3L.jpg?raw=true\" width=\"300\"></p>\n<p align=\"center\">\n  <b>A suite of WiFi/Bluetooth offensive and defensive tools for the ESP32</b>\n  <br><br>\n  <a href=\"https://github.com/justcallmekoko/ESP32Marauder/blob/master/LICENSE\"><img alt=\"License\" src=\"https://img.shields.io/github/license/mashape/apistatus.svg\"></a>\n  <a href=\"https://gitter.im/justcallmekoko/ESP32Marauder\"><img alt=\"Gitter\" src=\"https://badges.gitter.im/justcallmekoko/ESP32Marauder.png\"/></a>\n  <a href=\"https://github.com/justcallmekoko/ESP32Marauder/releases/latest\"><img src=\"https://img.shields.io/github/downloads/justcallmekoko/ESP32Marauder/total\" alt=\"Downloads\"/></a>\n  <br>\n  <a href=\"https://twitter.com/intent/follow?screen_name=jcmkyoutube\"><img src=\"https://img.shields.io/twitter/follow/jcmkyoutube?style=social&logo=twitter\" alt=\"Twitter\"></a>\n  <a href=\"https://www.instagram.com/just.call.me.koko\"><img src=\"https://img.shields.io/badge/Follow%20Me-Instagram-orange\" alt=\"Instagram\"/></a>\n  <br><br>\n</p>\n    \n[![Build and Push](https://github.com/justcallmekoko/ESP32Marauder/actions/workflows/build_push.yml/badge.svg)](https://github.com/justcallmekoko/ESP32Marauder/actions/workflows/build_push.yml)\n\n## Getting Started\nDownload the [latest release](https://github.com/justcallmekoko/ESP32Marauder/releases/latest) of the firmware.  \n\nCheck out the project [wiki](https://github.com/justcallmekoko/ESP32Marauder/wiki) for a full overview of the ESP32 Marauder\n\n# For Sale Now\nYou can buy the ESP32 Marauder using [this link](https://www.tindie.com/products/justcallmekoko/esp32-marauder/)\n"
        },
        {
          "name": "Release Bins",
          "type": "tree",
          "content": null
        },
        {
          "name": "TestFile",
          "type": "tree",
          "content": null
        },
        {
          "name": "User_Setup.h",
          "type": "blob",
          "size": 12.92578125,
          "content": "//                            USER DEFINED SETTINGS\n//   Set driver type, fonts to be loaded, pins used and SPI control method etc\n//\n//   See the User_Setup_Select.h file if you wish to be able to define multiple\n//   setups and then easily select which setup file is used by the compiler.\n//\n//   If this file is edited correctly then all the library example sketches should\n//   run without the need to make any more changes for a particular hardware setup!\n//   Note that some sketches are designed for a particular TFT pixel width/height\n\n\n// ##################################################################################\n//\n// Section 1. Call up the right driver file and any options for it\n//\n// ##################################################################################\n\n// Only define one driver, the other ones must be commented out\n#define ILI9341_DRIVER\n//#define ST7735_DRIVER      // Define additional parameters below for this display\n//#define ILI9163_DRIVER     // Define additional parameters below for this display\n//#define S6D02A1_DRIVER\n//#define RPI_ILI9486_DRIVER // 20MHz maximum SPI\n//#define HX8357D_DRIVER\n//#define ILI9481_DRIVER\n//#define ILI9486_DRIVER\n//#define ILI9488_DRIVER     // WARNING: Do not connect ILI9488 display SDO to MISO if other devices share the SPI bus (TFT SDO does NOT tristate when CS is high)\n//#define ST7789_DRIVER      // Full configuration option, define additional parameters below for this display\n//#define ST7789_2_DRIVER    // Minimal configuration option, define additional parameters below for this display\n//#define R61581_DRIVER\n//#define RM68140_DRIVER\n\n// Some displays support SPI reads via the MISO pin, other displays have a single\n// bi-directional SDA pin and the library will try to read this via the MOSI line.\n// To use the SDA line for reading data from the TFT uncomment the following line:\n\n// #define TFT_SDA_READ      // This option is for ESP32 ONLY, tested with ST7789 display only\n\n// For ST7789 ONLY, define the colour order IF the blue and red are swapped on your display\n// Try ONE option at a time to find the correct colour order for your display\n\n//  #define TFT_RGB_ORDER TFT_RGB  // Colour order Red-Green-Blue\n//  #define TFT_RGB_ORDER TFT_BGR  // Colour order Blue-Green-Red\n\n// For M5Stack ESP32 module with integrated ILI9341 display ONLY, remove // in line below\n\n// #define M5STACK\n\n// For ST7789, ST7735 and ILI9163 ONLY, define the pixel width and height in portrait orientation\n// #define TFT_WIDTH  80\n// #define TFT_WIDTH  128\n// #define TFT_WIDTH  240 // ST7789 240 x 240 and 240 x 320\n// #define TFT_HEIGHT 160\n// #define TFT_HEIGHT 128\n// #define TFT_HEIGHT 240 // ST7789 240 x 240\n// #define TFT_HEIGHT 320 // ST7789 240 x 320\n\n// For ST7735 ONLY, define the type of display, originally this was based on the\n// colour of the tab on the screen protector film but this is not always true, so try\n// out the different options below if the screen does not display graphics correctly,\n// e.g. colours wrong, mirror images, or tray pixels at the edges.\n// Comment out ALL BUT ONE of these options for a ST7735 display driver, save this\n// this User_Setup file, then rebuild and upload the sketch to the board again:\n\n// #define ST7735_INITB\n// #define ST7735_GREENTAB\n// #define ST7735_GREENTAB2\n// #define ST7735_GREENTAB3\n// #define ST7735_GREENTAB128    // For 128 x 128 display\n// #define ST7735_GREENTAB160x80 // For 160 x 80 display (BGR, inverted, 26 offset)\n// #define ST7735_REDTAB\n// #define ST7735_BLACKTAB\n// #define ST7735_REDTAB160x80   // For 160 x 80 display with 24 pixel offset\n\n// If colours are inverted (white shows as black) then uncomment one of the next\n// 2 lines try both options, one of the options should correct the inversion.\n\n// #define TFT_INVERSION_ON\n// #define TFT_INVERSION_OFF\n\n// If a backlight control signal is available then define the TFT_BL pin in Section 2\n// below. The backlight will be turned ON when tft.begin() is called, but the library\n// needs to know if the LEDs are ON with the pin HIGH or LOW. If the LEDs are to be\n// driven with a PWM signal or turned OFF/ON then this must be handled by the user\n// sketch. e.g. with digitalWrite(TFT_BL, LOW);\n\n// #define TFT_BACKLIGHT_ON HIGH  // HIGH or LOW are options\n\n// ##################################################################################\n//\n// Section 2. Define the pins that are used to interface with the display here\n//\n// ##################################################################################\n\n// We must use hardware SPI, a minimum of 3 GPIO pins is needed.\n// Typical setup for ESP8266 NodeMCU ESP-12 is :\n//\n// Display SDO/MISO  to NodeMCU pin D6 (or leave disconnected if not reading TFT)\n// Display LED       to NodeMCU pin VIN (or 5V, see below)\n// Display SCK       to NodeMCU pin D5\n// Display SDI/MOSI  to NodeMCU pin D7\n// Display DC (RS/AO)to NodeMCU pin D3\n// Display RESET     to NodeMCU pin D4 (or RST, see below)\n// Display CS        to NodeMCU pin D8 (or GND, see below)\n// Display GND       to NodeMCU pin GND (0V)\n// Display VCC       to NodeMCU 5V or 3.3V\n//\n// The TFT RESET pin can be connected to the NodeMCU RST pin or 3.3V to free up a control pin\n//\n// The DC (Data Command) pin may be labeled AO or RS (Register Select)\n//\n// With some displays such as the ILI9341 the TFT CS pin can be connected to GND if no more\n// SPI devices (e.g. an SD Card) are connected, in this case comment out the #define TFT_CS\n// line below so it is NOT defined. Other displays such at the ST7735 require the TFT CS pin\n// to be toggled during setup, so in these cases the TFT_CS line must be defined and connected.\n//\n// The NodeMCU D0 pin can be used for RST\n//\n//\n// Note: only some versions of the NodeMCU provide the USB 5V on the VIN pin\n// If 5V is not available at a pin you can use 3.3V but backlight brightness\n// will be lower.\n\n\n// ###### EDIT THE PIN NUMBERS IN THE LINES FOLLOWING TO SUIT YOUR ESP8266 SETUP ######\n\n// For NodeMCU - use pin numbers in the form PIN_Dx where Dx is the NodeMCU pin designation\n//#define TFT_CS   PIN_D8  // Chip select control pin D8\n//#define TFT_DC   PIN_D3  // Data Command control pin\n//#define TFT_RST  PIN_D4  // Reset pin (could connect to NodeMCU RST, see next line)\n//#define TFT_RST  -1    // Set TFT_RST to -1 if the display RESET is connected to NodeMCU RST or 3.3V\n\n//#define TFT_BL PIN_D1  // LED back-light (only for ST7789 with backlight control pin)\n\n//#define TOUCH_CS PIN_D2     // Chip select pin (T_CS) of touch screen\n\n//#define TFT_WR PIN_D2       // Write strobe for modified Raspberry Pi TFT only\n\n\n// ######  FOR ESP8266 OVERLAP MODE EDIT THE PIN NUMBERS IN THE FOLLOWING LINES  ######\n\n// Overlap mode shares the ESP8266 FLASH SPI bus with the TFT so has a performance impact\n// but saves pins for other functions.\n// Use NodeMCU SD0=MISO, SD1=MOSI, CLK=SCLK to connect to TFT in overlap mode\n\n// In ESP8266 overlap mode the following must be defined\n//#define TFT_SPI_OVERLAP\n\n// In ESP8266 overlap mode the TFT chip select MUST connect to pin D3\n//#define TFT_CS   PIN_D3\n//#define TFT_DC   PIN_D5  // Data Command control pin\n//#define TFT_RST  PIN_D4  // Reset pin (could connect to NodeMCU RST, see next line)\n//#define TFT_RST  -1  // Set TFT_RST to -1 if the display RESET is connected to NodeMCU RST or 3.3V\n\n\n// ###### EDIT THE PIN NUMBERS IN THE LINES FOLLOWING TO SUIT YOUR ESP32 SETUP   ######\n\n// For ESP32 Dev board (only tested with ILI9341 display)\n// The hardware SPI can be mapped to any pins\n\n#define TFT_MISO 19 // Matching T_DO\n#define TFT_MOSI 23 // Matching T_DIN\n#define TFT_SCLK 18 // Matching T_CLK\n#define TFT_CS   17  // Chip select control pin\n#define TFT_DC   16  // Data Command control pin\n#define TFT_RST   5  // Reset pin (could connect to RST pin)\n//#define TFT_RST  -1  // Set TFT_RST to -1 if display RESET is connected to ESP32 board RST\n\n#define TFT_BL   32  // LED back-light (only for ST7789 with backlight control pin)\n\n#define TOUCH_CS 21     // Chip select pin (T_CS) of touch screen\n\n//#define TFT_WR 22    // Write strobe for modified Raspberry Pi TFT only\n\n// For the M5Stack module use these #define lines\n//#define TFT_MISO 19\n//#define TFT_MOSI 23\n//#define TFT_SCLK 18\n//#define TFT_CS   14  // Chip select control pin\n//#define TFT_DC   27  // Data Command control pin\n//#define TFT_RST  33  // Reset pin (could connect to Arduino RESET pin)\n//#define TFT_BL   32  // LED back-light (required for M5Stack)\n\n// ######       EDIT THE PINs BELOW TO SUIT YOUR ESP32 PARALLEL TFT SETUP        ######\n\n// The library supports 8 bit parallel TFTs with the ESP32, the pin\n// selection below is compatible with ESP32 boards in UNO format.\n// Wemos D32 boards need to be modified, see diagram in Tools folder.\n// Only ILI9481 and ILI9341 based displays have been tested!\n\n// Parallel bus is only supported on ESP32\n// Uncomment line below to use ESP32 Parallel interface instead of SPI\n\n//#define ESP32_PARALLEL\n\n// The ESP32 and TFT the pins used for testing are:\n//#define TFT_CS   33  // Chip select control pin (library pulls permanently low\n//#define TFT_DC   15  // Data Command control pin - must use a pin in the range 0-31\n//#define TFT_RST  32  // Reset pin, toggles on startup\n\n//#define TFT_WR    4  // Write strobe control pin - must use a pin in the range 0-31\n//#define TFT_RD    2  // Read strobe control pin\n\n//#define TFT_D0   12  // Must use pins in the range 0-31 for the data bus\n//#define TFT_D1   13  // so a single register write sets/clears all bits.\n//#define TFT_D2   26  // Pins can be randomly assigned, this does not affect\n//#define TFT_D3   25  // TFT screen update performance.\n//#define TFT_D4   17\n//#define TFT_D5   16\n//#define TFT_D6   27\n//#define TFT_D7   14\n\n\n// ##################################################################################\n//\n// Section 3. Define the fonts that are to be used here\n//\n// ##################################################################################\n\n// Comment out the #defines below with // to stop that font being loaded\n// The ESP8366 and ESP32 have plenty of memory so commenting out fonts is not\n// normally necessary. If all fonts are loaded the extra FLASH space required is\n// about 17Kbytes. To save FLASH space only enable the fonts you need!\n\n#define LOAD_GLCD   // Font 1. Original Adafruit 8 pixel font needs ~1820 bytes in FLASH\n#define LOAD_FONT2  // Font 2. Small 16 pixel high font, needs ~3534 bytes in FLASH, 96 characters\n#define LOAD_FONT4  // Font 4. Medium 26 pixel high font, needs ~5848 bytes in FLASH, 96 characters\n#define LOAD_FONT6  // Font 6. Large 48 pixel font, needs ~2666 bytes in FLASH, only characters 1234567890:-.apm\n#define LOAD_FONT7  // Font 7. 7 segment 48 pixel font, needs ~2438 bytes in FLASH, only characters 1234567890:-.\n#define LOAD_FONT8  // Font 8. Large 75 pixel font needs ~3256 bytes in FLASH, only characters 1234567890:-.\n//#define LOAD_FONT8N // Font 8. Alternative to Font 8 above, slightly narrower, so 3 digits fit a 160 pixel TFT\n#define LOAD_GFXFF  // FreeFonts. Include access to the 48 Adafruit_GFX free fonts FF1 to FF48 and custom fonts\n\n// Comment out the #define below to stop the SPIFFS filing system and smooth font code being loaded\n// this will save ~20kbytes of FLASH\n#define SMOOTH_FONT\n\n\n// ##################################################################################\n//\n// Section 4. Other options\n//\n// ##################################################################################\n\n// Define the SPI clock frequency, this affects the graphics rendering speed. Too\n// fast and the TFT driver will not keep up and display corruption appears.\n// With an ILI9341 display 40MHz works OK, 80MHz sometimes fails\n// With a ST7735 display more than 27MHz may not work (spurious pixels and lines)\n// With an ILI9163 display 27 MHz works OK.\n// The RPi typically only works at 20MHz maximum.\n\n// #define SPI_FREQUENCY   1000000\n//define SPI_FREQUENCY   5000000\n// #define SPI_FREQUENCY  10000000\n// #define SPI_FREQUENCY  20000000\n#define SPI_FREQUENCY  27000000 // Actually sets it to 26.67MHz = 80/3\n// #define SPI_FREQUENCY  40000000 // Maximum to use SPIFFS\n// #define SPI_FREQUENCY  80000000\n\n// Optional reduced SPI frequency for reading TFT\n#define SPI_READ_FREQUENCY  20000000\n//#define SPI_READ_FREQUENCY  5000000\n\n// The XPT2046 requires a lower SPI clock rate of 2.5MHz so we define that here:\n#define SPI_TOUCH_FREQUENCY  2500000\n\n// The ESP32 has 2 free SPI ports i.e. VSPI and HSPI, the VSPI is the default.\n// If the VSPI port is in use and pins are not accessible (e.g. TTGO T-Beam)\n// then uncomment the following line:\n//#define USE_HSPI_PORT\n\n// Comment out the following #define if \"SPI Transactions\" do not need to be\n// supported. When commented out the code size will be smaller and sketches will\n// run slightly faster, so leave it commented out unless you need it!\n\n// Transaction support is needed to work with SD library but not needed with TFT_SdFat\n// Transaction support is required if other SPI devices are connected.\n\n// Transactions are automatically enabled by the library for an ESP32 (to use HAL mutex)\n// so changing it here has no effect\n\n// #define SUPPORT_TRANSACTIONS\n"
        },
        {
          "name": "User_Setup_Select.h",
          "type": "blob",
          "size": 10.0390625,
          "content": "// This header file contains a list of user setup files and defines which one the\n// compiler uses when the IDE performs a Verify/Compile or Upload.\n//\n// Users can create configurations for different Espressif boards and TFT displays.\n// This makes selecting between hardware setups easy by \"uncommenting\" one line.\n\n// The advantage of this hardware configuration method is that the examples provided\n// with the library should work with different setups immediately without any other\n// changes being needed. It also improves the portability of users sketches to other\n// hardware configurations and compatible libraries.\n//\n// Create a shortcut to this file on your desktop to permit quick access for editing.\n// Re-compile and upload after making and saving any changes to this file.\n\n// Customised User_Setup files are stored in the \"User_Setups\" folder.\n\n#ifndef USER_SETUP_LOADED //  Lets PlatformIO users define settings in\n                          //  platformio.ini, see notes in \"Tools\" folder.\n\n// Only ONE line below should be uncommented.  Add extra lines and files as needed.\n\n//#include <User_Setup.h>           // Default setup is root library folder\n\n//#include <User_Setup_og_marauder.h>\n//#include <User_Setup_id_receiver.h>\n//#include <User_Setup_marauder_mini.h>\n//#include <User_Setup_marauder_rev_feather.h>\n//#include <User_Setup_marauder_m5stickc.h>\n//#include <User_Setup_pocket_sdr.h>\n#include <User_Setup_dual_nrf24.h>\n//#include <User_Setup_pocket_sdr_2.h>\n\n//#include <User_Setups/Setup1_ILI9341.h>  // Setup file configured for my ILI9341\n//#include <User_Setups/Setup2_ST7735.h>   // Setup file configured for my ST7735\n//#include <User_Setups/Setup3_ILI9163.h>  // Setup file configured for my ILI9163\n//#include <User_Setups/Setup4_S6D02A1.h>  // Setup file configured for my S6D02A1\n//#include <User_Setups/Setup5_RPi_ILI9486.h>        // Setup file configured for my stock RPi TFT\n//#include <User_Setups/Setup6_RPi_Wr_ILI9486.h>     // Setup file configured for my modified RPi TFT\n//#include <User_Setups/Setup7_ST7735_128x128.h>     // Setup file configured for my ST7735 128x128 display\n//#include <User_Setups/Setup8_ILI9163_128x128.h>    // Setup file configured for my ILI9163 128x128 display\n//#include <User_Setups/Setup9_ST7735_Overlap.h>     // Setup file configured for my ST7735\n//#include <User_Setups/Setup10_RPi_touch_ILI9486.h> // Setup file configured for ESP8266 and RPi TFT with touch\n\n//#include <User_Setups/Setup11_RPi_touch_ILI9486.h> // Setup file configured for ESP32 and RPi TFT with touch\n//#include <User_Setups/Setup12_M5Stack.h>           // Setup file for the ESP32 based M5Stack\n//#include <User_Setups/Setup13_ILI9481_Parallel.h>  // Setup file for the ESP32 with parallel bus TFT\n//#include <User_Setups/Setup14_ILI9341_Parallel.h>  // Setup file for the ESP32 with parallel bus TFT\n//#include <User_Setups/Setup15_HX8357D.h>           // Setup file configured for HX8357D (untested)\n//#include <User_Setups/Setup16_ILI9488_Parallel.h>  // Setup file for the ESP32 with parallel bus TFT\n//#include <User_Setups/Setup17_ePaper.h>            // Setup file for any Waveshare ePaper display\n//#include <User_Setups/Setup18_ST7789.h>            // Setup file configured for ST7789\n\n//#include <User_Setups/Setup19_RM68140_Parallel.h>\t // Setup file configured for RM68140 with parallel bus\n\n//#include <User_Setups/Setup20_ILI9488.h>           // Setup file for ESP8266 and ILI9488 SPI bus TFT\n//#include <User_Setups/Setup21_ILI9488.h>           // Setup file for ESP32 and ILI9488 SPI bus TFT\n\n//#include <User_Setups/Setup22_TTGO_T4.h>           // Setup file for ESP32 and TTGO T4 version 1.2\n//#include <User_Setups/Setup22_TTGO_T4_v1.3.h>      // Setup file for ESP32 and TTGO T4 version 1.3\n//#include <User_Setups/Setup23_TTGO_TM.h>           // Setup file for ESP32 and TTGO TM ST7789 SPI bus TFT\n//#include <User_Setups/Setup24_ST7789.h>            // Setup file configured for ST7789 240 x 240\n//#include <User_Setups/Setup25_TTGO_T_Display.h>    // Setup file for ESP32 and TTGO T-Display ST7789V SPI bus TFT\n//#include <User_Setups/Setup26_TTGO_T_Wristband.h>  // Setup file for ESP32 and TTGO T-Wristband ST7735 SPI bus TFT\n\n//#include <User_Setups/Setup27_RPi_ST7796_ESP32.h>    // ESP32   RPi MHS-4.0 inch Display-B\n//#include <User_Setups/Setup28_RPi_ST7796_ESP8266.h>  // ESP8266 RPi MHS-4.0 inch Display-B\n\n//#include <User_Setups/Setup29_ILI9341_STM32.h>          // Setup for Nucleo board\n//#include <User_Setups/Setup30_ILI9341_Parallel_STM32.h> // Setup for Nucleo board and parallel display\n//#include <User_Setups/Setup31_ST7796_Parallel_STM32.h>  // Setup for Nucleo board and parallel display\n//#include <User_Setups/Setup32_ILI9341_STM32F103.h>      // Setup for \"Blue/Black Pill\"\n\n//#include <User_Setups/Setup33_RPi_ILI9486_STM32.h>      // Setup for Nucleo board\n\n//#include <User_Setups/Setup34_ILI9481_Parallel_STM32.h> // Setup for Nucleo board and parallel display\n//#include <User_Setups/Setup35_ILI9341_STM32_Port_Bus.h> // Setup for STM32 port A parallel display\n\n//#include <User_Setups/Setup36_RPi_touch_ILI9341.h>      // Setup file configured for ESP32 and RPi TFT with touch\n\n//#include <User_Setups/Setup43_ST7735.h>            // Setup file configured for my ST7735S 80x160\n//#include <User_Setups/Setup44_TTGO_CameraPlus.h>   // Setup file for ESP32 and TTGO T-CameraPlus ST7789 SPI bus TFT    240x240\n//#include <User_Setups/Setup45_TTGO_T_Watch.h>      // Setup file for ESP32 and TTGO T-Watch ST7789 SPI bus TFT  240x240\n\n//#include <User_Setups/Setup50_SSD1963_Parallel.h>  // Setup file for ESP32 and SSD1963 TFT display\n\n//#include <User_Setups/Setup135_ST7789.h>           // Setup file for ESP8266 and ST7789 135 x 240 TFT\n\n//#include <User_Setups/SetupX_Template.h>\n\n\n#endif // USER_SETUP_LOADED\n\n\n\n/////////////////////////////////////////////////////////////////////////////////////\n//                                                                                 //\n//     DON'T TINKER WITH ANY OF THE FOLLOWING LINES, THESE ADD THE TFT DRIVERS     //\n//       AND ESP8266 PIN DEFINITONS, THEY ARE HERE FOR BODMER'S CONVENIENCE!       //\n//                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////\n\n\n// Identical looking TFT displays may have a different colour ordering in the 16 bit colour\n#define TFT_BGR 0   // Colour order Blue-Green-Red\n#define TFT_RGB 1   // Colour order Red-Green-Blue\n\n// Legacy setup support, RPI_DISPLAY_TYPE replaces RPI_DRIVER\n#if defined (RPI_DRIVER)\n  #if !defined (RPI_DISPLAY_TYPE)\n    #define RPI_DISPLAY_TYPE\n  #endif\n#endif\n\n// Legacy setup support, RPI_ILI9486_DRIVER form is deprecated\n// Instead define RPI_DISPLAY_TYPE and also define driver (e.g. ILI9486_DRIVER) \n#if defined (RPI_ILI9486_DRIVER)\n  #if !defined (ILI9486_DRIVER)\n    #define ILI9486_DRIVER\n  #endif\n  #if !defined (RPI_DISPLAY_TYPE)\n    #define RPI_DISPLAY_TYPE\n  #endif\n#endif\n\n// Load the right driver definition - do not tinker here !\n#if   defined (ILI9341_DRIVER)\n     #include <TFT_Drivers/ILI9341_Defines.h>\n     #define  TFT_DRIVER 0x9341\n#elif defined (ST7735_DRIVER)\n     #include <TFT_Drivers/ST7735_Defines.h>\n     #define  TFT_DRIVER 0x7735\n#elif defined (ILI9163_DRIVER)\n     #include <TFT_Drivers/ILI9163_Defines.h>\n     #define  TFT_DRIVER 0x9163\n#elif defined (S6D02A1_DRIVER)\n     #include <TFT_Drivers/S6D02A1_Defines.h>\n     #define  TFT_DRIVER 0x6D02\n#elif defined (ST7796_DRIVER)\n      #include \"TFT_Drivers/ST7796_Defines.h\"\n      #define  TFT_DRIVER 0x7796\n#elif defined (ILI9486_DRIVER)\n     #include <TFT_Drivers/ILI9486_Defines.h>\n     #define  TFT_DRIVER 0x9486\n#elif defined (ILI9481_DRIVER)\n     #include <TFT_Drivers/ILI9481_Defines.h>\n     #define  TFT_DRIVER 0x9481\n#elif defined (ILI9488_DRIVER)\n     #include <TFT_Drivers/ILI9488_Defines.h>\n     #define  TFT_DRIVER 0x9488\n#elif defined (HX8357D_DRIVER)\n     #include \"TFT_Drivers/HX8357D_Defines.h\"\n     #define  TFT_DRIVER 0x8357\n#elif defined (EPD_DRIVER)\n     #include \"TFT_Drivers/EPD_Defines.h\"\n     #define  TFT_DRIVER 0xE9D\n#elif defined (ST7789_DRIVER)\n     #include \"TFT_Drivers/ST7789_Defines.h\"\n     #define  TFT_DRIVER 0x7789\n#elif defined (R61581_DRIVER)\n     #include \"TFT_Drivers/R61581_Defines.h\"\n     #define  TFT_DRIVER 0x6158\n#elif defined (ST7789_2_DRIVER)\n     #include \"TFT_Drivers/ST7789_2_Defines.h\"\n     #define  TFT_DRIVER 0x778B\n#elif defined (RM68140_DRIVER)\n     #include \"TFT_Drivers/RM68140_Defines.h\"\n     #define  TFT_DRIVER 0x6814\n#elif defined (SSD1963_480_DRIVER)\n     #include \"TFT_Drivers/SSD1963_Defines.h\"\n     #define  TFT_DRIVER 0x1963\n#elif defined (SSD1963_800_DRIVER)\n     #include \"TFT_Drivers/SSD1963_Defines.h\"\n     #define  TFT_DRIVER 0x1963\n#elif defined (SSD1963_800ALT_DRIVER)\n     #include \"TFT_Drivers/SSD1963_Defines.h\"\n     #define  TFT_DRIVER 0x1963\n#elif defined (SSD1963_800BD_DRIVER)\n     #include \"TFT_Drivers/SSD1963_Defines.h\"\n     #define  TFT_DRIVER 0x1963\n                              // <<<<<<<<<<<<<<<<<<<<<<<< ADD NEW DRIVER HERE\n                              // XYZZY_init.h and XYZZY_rotation.h must also be added in TFT_eSPI.cpp\n#elif defined (XYZZY_DRIVER)\n     #include \"TFT_Drivers/XYZZY_Defines.h\"\n     #define  TFT_DRIVER 0x0000\n#else\n     #define  TFT_DRIVER 0x0000\n#endif\n\n\n// These are the pins for ESP8266 boards\n//      Name   GPIO    NodeMCU      Function\n#define PIN_D0  16  // GPIO16       WAKE\n#define PIN_D1   5  // GPIO5        User purpose\n#define PIN_D2   4  // GPIO4        User purpose\n#define PIN_D3   0  // GPIO0        Low on boot means enter FLASH mode\n#define PIN_D4   2  // GPIO2        TXD1 (must be high on boot to go to UART0 FLASH mode)\n#define PIN_D5  14  // GPIO14       HSCLK\n#define PIN_D6  12  // GPIO12       HMISO\n#define PIN_D7  13  // GPIO13       HMOSI  RXD2\n#define PIN_D8  15  // GPIO15       HCS    TXD0 (must be low on boot to enter UART0 FLASH mode)\n#define PIN_D9   3  //              RXD0\n#define PIN_D10  1  //              TXD0\n\n#define PIN_MOSI 8  // SD1          FLASH and overlap mode\n#define PIN_MISO 7  // SD0\n#define PIN_SCLK 6  // CLK\n#define PIN_HWCS 0  // D3\n\n#define PIN_D11  9  // SD2\n#define PIN_D12 10  // SD4\n"
        },
        {
          "name": "User_Setup_dual_nrf24.h",
          "type": "blob",
          "size": 13.8193359375,
          "content": "//                            USER DEFINED SETTINGS\n//   Set driver type, fonts to be loaded, pins used and SPI control method etc\n//\n//   See the User_Setup_Select.h file if you wish to be able to define multiple\n//   setups and then easily select which setup file is used by the compiler.\n//\n//   If this file is edited correctly then all the library example sketches should\n//   run without the need to make any more changes for a particular hardware setup!\n//   Note that some sketches are designed for a particular TFT pixel width/height\n\n\n// ##################################################################################\n//\n// Section 1. Call up the right driver file and any options for it\n//\n// ##################################################################################\n\n// Display type -  only define if RPi display\n//#define RPI_DRIVER\n\n// Only define one driver, the other ones must be commented out\n#define ILI9341_DRIVER // OG Marauder\n//#define ST7735_DRIVER    // Marauder Mini  // Define additional parameters below for this display\n//#define ILI9163_DRIVER     // Define additional parameters below for this display\n//#define S6D02A1_DRIVER\n//#define RPI_ILI9486_DRIVER // 20MHz maximum SPI\n//#define HX8357D_DRIVER\n//#define ILI9481_DRIVER\n//#define ILI9486_DRIVER\n//#define ILI9488_DRIVER     // WARNING: Do not connect ILI9488 display SDO to MISO if other devices share the SPI bus (TFT SDO does NOT tristate when CS is high)\n//#define ST7789_DRIVER      // Full configuration option, define additional parameters below for this display\n//#define ST7789_2_DRIVER    // Minimal configuration option, define additional parameters below for this display\n//#define R61581_DRIVER\n//#define RM68140_DRIVER\n//#define ST7796_DRIVER\n\n// Some displays support SPI reads via the MISO pin, other displays have a single\n// bi-directional SDA pin and the library will try to read this via the MOSI line.\n// To use the SDA line for reading data from the TFT uncomment the following line:\n\n// #define TFT_SDA_READ      // This option is for ESP32 ONLY, tested with ST7789 display only\n\n// For ST7789 and ILI9341 ONLY, define the colour order IF the blue and red are swapped on your display\n// Try ONE option at a time to find the correct colour order for your display\n\n//  #define TFT_RGB_ORDER TFT_RGB  // Colour order Red-Green-Blue\n//  #define TFT_RGB_ORDER TFT_BGR  // Colour order Blue-Green-Red\n\n// For M5Stack ESP32 module with integrated ILI9341 display ONLY, remove // in line below\n\n// #define M5STACK\n\n// For ST7789, ST7735 and ILI9163 ONLY, define the pixel width and height in portrait orientation\n// #define TFT_WIDTH  80\n// #define TFT_WIDTH  128 // Marauder Mini\n// #define TFT_WIDTH  240 // ST7789 240 x 240 and 240 x 320\n// #define TFT_HEIGHT 160\n// #define TFT_HEIGHT 128 // Marauder Mini\n// #define TFT_HEIGHT 240 // ST7789 240 x 240\n// #define TFT_HEIGHT 320 // ST7789 240 x 320\n\n// For ST7735 ONLY, define the type of display, originally this was based on the\n// colour of the tab on the screen protector film but this is not always true, so try\n// out the different options below if the screen does not display graphics correctly,\n// e.g. colours wrong, mirror images, or tray pixels at the edges.\n// Comment out ALL BUT ONE of these options for a ST7735 display driver, save this\n// this User_Setup file, then rebuild and upload the sketch to the board again:\n\n// #define ST7735_INITB\n// #define ST7735_GREENTAB\n// #define ST7735_GREENTAB2\n// #define ST7735_GREENTAB3\n// #define ST7735_GREENTAB128    // For 128 x 128 display\n// #define ST7735_GREENTAB160x80 // For 160 x 80 display (BGR, inverted, 26 offset)\n// #define ST7735_REDTAB\n// #define ST7735_BLACKTAB\n// #define ST7735_REDTAB160x80   // For 160 x 80 display with 24 pixel offset\n\n// If colours are inverted (white shows as black) then uncomment one of the next\n// 2 lines try both options, one of the options should correct the inversion.\n\n// #define TFT_INVERSION_ON\n// #define TFT_INVERSION_OFF\n\n// If a backlight control signal is available then define the TFT_BL pin in Section 2\n// below. The backlight will be turned ON when tft.begin() is called, but the library\n// needs to know if the LEDs are ON with the pin HIGH or LOW. If the LEDs are to be\n// driven with a PWM signal or turned OFF/ON then this must be handled by the user\n// sketch. e.g. with digitalWrite(TFT_BL, LOW);\n\n// #define TFT_BACKLIGHT_ON LOW  // HIGH or LOW are options\n\n// ##################################################################################\n//\n// Section 2. Define the pins that are used to interface with the display here\n//\n// ##################################################################################\n\n// We must use hardware SPI, a minimum of 3 GPIO pins is needed.\n// Typical setup for ESP8266 NodeMCU ESP-12 is :\n//\n// Display SDO/MISO  to NodeMCU pin D6 (or leave disconnected if not reading TFT)\n// Display LED       to NodeMCU pin VIN (or 5V, see below)\n// Display SCK       to NodeMCU pin D5\n// Display SDI/MOSI  to NodeMCU pin D7\n// Display DC (RS/AO)to NodeMCU pin D3\n// Display RESET     to NodeMCU pin D4 (or RST, see below)\n// Display CS        to NodeMCU pin D8 (or GND, see below)\n// Display GND       to NodeMCU pin GND (0V)\n// Display VCC       to NodeMCU 5V or 3.3V\n//\n// The TFT RESET pin can be connected to the NodeMCU RST pin or 3.3V to free up a control pin\n//\n// The DC (Data Command) pin may be labeled AO or RS (Register Select)\n//\n// With some displays such as the ILI9341 the TFT CS pin can be connected to GND if no more\n// SPI devices (e.g. an SD Card) are connected, in this case comment out the #define TFT_CS\n// line below so it is NOT defined. Other displays such at the ST7735 require the TFT CS pin\n// to be toggled during setup, so in these cases the TFT_CS line must be defined and connected.\n//\n// The NodeMCU D0 pin can be used for RST\n//\n//\n// Note: only some versions of the NodeMCU provide the USB 5V on the VIN pin\n// If 5V is not available at a pin you can use 3.3V but backlight brightness\n// will be lower.\n\n\n// ###### EDIT THE PIN NUMBERS IN THE LINES FOLLOWING TO SUIT YOUR ESP8266 SETUP ######\n\n// For NodeMCU - use pin numbers in the form PIN_Dx where Dx is the NodeMCU pin designation\n//#define TFT_CS   PIN_D8  // Chip select control pin D8\n//#define TFT_DC   PIN_D3  // Data Command control pin\n//#define TFT_RST  PIN_D4  // Reset pin (could connect to NodeMCU RST, see next line)\n//#define TFT_RST  -1    // Set TFT_RST to -1 if the display RESET is connected to NodeMCU RST or 3.3V\n\n//#define TFT_BL PIN_D1  // LED back-light (only for ST7789 with backlight control pin)\n\n//#define TOUCH_CS PIN_D2     // Chip select pin (T_CS) of touch screen\n\n//#define TFT_WR PIN_D2       // Write strobe for modified Raspberry Pi TFT only\n\n\n// ######  FOR ESP8266 OVERLAP MODE EDIT THE PIN NUMBERS IN THE FOLLOWING LINES  ######\n\n// Overlap mode shares the ESP8266 FLASH SPI bus with the TFT so has a performance impact\n// but saves pins for other functions. It is best not to connect MISO as some displays\n// do not tristate that line wjen chip select is high!\n// On NodeMCU 1.0 SD0=MISO, SD1=MOSI, CLK=SCLK to connect to TFT in overlap mode\n// On NodeMCU V3  S0 =MISO, S1 =MOSI, S2 =SCLK\n// In ESP8266 overlap mode the following must be defined\n\n//#define TFT_SPI_OVERLAP\n\n// In ESP8266 overlap mode the TFT chip select MUST connect to pin D3\n//#define TFT_CS   PIN_D3\n//#define TFT_DC   PIN_D5  // Data Command control pin\n//#define TFT_RST  PIN_D4  // Reset pin (could connect to NodeMCU RST, see next line)\n//#define TFT_RST  -1  // Set TFT_RST to -1 if the display RESET is connected to NodeMCU RST or 3.3V\n\n\n// ###### EDIT THE PIN NUMBERS IN THE LINES FOLLOWING TO SUIT YOUR ESP32 SETUP   ######\n\n// For ESP32 Dev board (only tested with ILI9341 display)\n// The hardware SPI can be mapped to any pins\n\n// Marauder Mini\n/*\n#define TFT_CS   17  // Chip select control pin D8\n#define TFT_DC   16  // Data Command control pin\n#define TFT_RST  5  // Reset pin (could connect to NodeMCU RST, see next line)\n//#define TFT_MISO 19\n//#define TFT_MOSI 23\n//#define TFT_SCLK 18\n//#define TFT_BL   32\n*/\n\n// ESP32 Marauder \n#define TFT_CS   17  // Chip select control pin D8\n#define TFT_DC   26  // Data Command control pin\n#define TFT_RST  -1  // Reset pin (could connect to NodeMCU RST, see next line)\n#define TOUCH_CS -1\n//#define TFT_MISO 16\n#define TFT_MOSI 23\n#define TFT_SCLK 18\n#define TFT_BL   32\n\n//#define TOUCH_CS 21     // Chip select pin (T_CS) of touch screen\n\n/////////////////////////////\n\n// ESP32 Centauri\n/*\n#define TFT_MISO 19\n#define TFT_MOSI 23\n#define TFT_SCLK 18\n#define TFT_CS   27  // Chip select control pin\n#define TFT_DC   26  // Data Command control pin\n#define TFT_RST   5  // Reset pin (could connect to RST pin)\n//#define TFT_RST  -1  // Set TFT_RST to -1 if display RESET is connected to ESP32 board RST\n\n#define TFT_BL   32  // LED back-light (only for ST7789 with backlight control pin)\n\n#define TOUCH_CS 21     // Chip select pin (T_CS) of touch screen\n*/\n/////////////////////////////\n\n//#define TFT_WR 22    // Write strobe for modified Raspberry Pi TFT only\n\n// For the M5Stack module use these #define lines\n//#define TFT_MISO 19\n//#define TFT_MOSI 23\n//#define TFT_SCLK 18\n//#define TFT_CS   14  // Chip select control pin\n//#define TFT_DC   27  // Data Command control pin\n//#define TFT_RST  33  // Reset pin (could connect to Arduino RESET pin)\n//#define TFT_BL   32  // LED back-light (required for M5Stack)\n\n// ######       EDIT THE PINs BELOW TO SUIT YOUR ESP32 PARALLEL TFT SETUP        ######\n\n// The library supports 8 bit parallel TFTs with the ESP32, the pin\n// selection below is compatible with ESP32 boards in UNO format.\n// Wemos D32 boards need to be modified, see diagram in Tools folder.\n// Only ILI9481 and ILI9341 based displays have been tested!\n\n// Parallel bus is only supported on ESP32\n// Uncomment line below to use ESP32 Parallel interface instead of SPI\n\n//#define ESP32_PARALLEL\n\n// The ESP32 and TFT the pins used for testing are:\n//#define TFT_CS   33  // Chip select control pin (library pulls permanently low\n//#define TFT_DC   15  // Data Command control pin - must use a pin in the range 0-31\n//#define TFT_RST  32  // Reset pin, toggles on startup\n\n//#define TFT_WR    4  // Write strobe control pin - must use a pin in the range 0-31\n//#define TFT_RD    2  // Read strobe control pin\n\n//#define TFT_D0   12  // Must use pins in the range 0-31 for the data bus\n//#define TFT_D1   13  // so a single register write sets/clears all bits.\n//#define TFT_D2   26  // Pins can be randomly assigned, this does not affect\n//#define TFT_D3   25  // TFT screen update performance.\n//#define TFT_D4   17\n//#define TFT_D5   16\n//#define TFT_D6   27\n//#define TFT_D7   14\n\n\n// ##################################################################################\n//\n// Section 3. Define the fonts that are to be used here\n//\n// ##################################################################################\n\n// Comment out the #defines below with // to stop that font being loaded\n// The ESP8366 and ESP32 have plenty of memory so commenting out fonts is not\n// normally necessary. If all fonts are loaded the extra FLASH space required is\n// about 17Kbytes. To save FLASH space only enable the fonts you need!\n\n#define LOAD_GLCD   // Font 1. Original Adafruit 8 pixel font needs ~1820 bytes in FLASH\n#define LOAD_FONT2  // Font 2. Small 16 pixel high font, needs ~3534 bytes in FLASH, 96 characters\n#define LOAD_FONT4  // Font 4. Medium 26 pixel high font, needs ~5848 bytes in FLASH, 96 characters\n#define LOAD_FONT6  // Font 6. Large 48 pixel font, needs ~2666 bytes in FLASH, only characters 1234567890:-.apm\n#define LOAD_FONT7  // Font 7. 7 segment 48 pixel font, needs ~2438 bytes in FLASH, only characters 1234567890:-.\n#define LOAD_FONT8  // Font 8. Large 75 pixel font needs ~3256 bytes in FLASH, only characters 1234567890:-.\n//#define LOAD_FONT8N // Font 8. Alternative to Font 8 above, slightly narrower, so 3 digits fit a 160 pixel TFT\n#define LOAD_GFXFF  // FreeFonts. Include access to the 48 Adafruit_GFX free fonts FF1 to FF48 and custom fonts\n\n// Comment out the #define below to stop the SPIFFS filing system and smooth font code being loaded\n// this will save ~20kbytes of FLASH\n#define SMOOTH_FONT\n\n\n// ##################################################################################\n//\n// Section 4. Other options\n//\n// ##################################################################################\n\n// Define the SPI clock frequency, this affects the graphics rendering speed. Too\n// fast and the TFT driver will not keep up and display corruption appears.\n// With an ILI9341 display 40MHz works OK, 80MHz sometimes fails\n// With a ST7735 display more than 27MHz may not work (spurious pixels and lines)\n// With an ILI9163 display 27 MHz works OK.\n\n// #define SPI_FREQUENCY   1000000\n//#define SPI_FREQUENCY   5000000\n// #define SPI_FREQUENCY  10000000\n// #define SPI_FREQUENCY  20000000\n#define SPI_FREQUENCY  27000000 // Marauder // Actually sets it to 26.67MHz = 80/3\n// #define SPI_FREQUENCY  40000000\n// #define SPI_FREQUENCY  80000000\n\n// Optional reduced SPI frequency for reading TFT\n#define SPI_READ_FREQUENCY  20000000\n\n// The XPT2046 requires a lower SPI clock rate of 2.5MHz so we define that here:\n#define SPI_TOUCH_FREQUENCY  2500000\n\n// The ESP32 has 2 free SPI ports i.e. VSPI and HSPI, the VSPI is the default.\n// If the VSPI port is in use and pins are not accessible (e.g. TTGO T-Beam)\n// then uncomment the following line:\n//#define USE_HSPI_PORT\n\n// Comment out the following #define if \"SPI Transactions\" do not need to be\n// supported. When commented out the code size will be smaller and sketches will\n// run slightly faster, so leave it commented out unless you need it!\n\n// Transaction support is needed to work with SD library but not needed with TFT_SdFat\n// Transaction support is required if other SPI devices are connected.\n\n// Transactions are automatically enabled by the library for an ESP32 (to use HAL mutex)\n// so changing it here has no effect\n\n// #define SUPPORT_TRANSACTIONS\n"
        },
        {
          "name": "User_Setup_marauder_m5stickc.h",
          "type": "blob",
          "size": 13.955078125,
          "content": "//                            USER DEFINED SETTINGS\n//   Set driver type, fonts to be loaded, pins used and SPI control method etc\n//\n//   See the User_Setup_Select.h file if you wish to be able to define multiple\n//   setups and then easily select which setup file is used by the compiler.\n//\n//   If this file is edited correctly then all the library example sketches should\n//   run without the need to make any more changes for a particular hardware setup!\n//   Note that some sketches are designed for a particular TFT pixel width/height\n\n\n// ##################################################################################\n//\n// Section 1. Call up the right driver file and any options for it\n//\n// ##################################################################################\n\n// Display type -  only define if RPi display\n//#define RPI_DRIVER\n\n#define CGRAM_OFFSET\n\n// Only define one driver, the other ones must be commented out\n//#define ILI9341_DRIVER // OG Marauder\n//#define ST7735_DRIVER    // Marauder Mini  // Define additional parameters below for this display\n//#define ILI9163_DRIVER     // Define additional parameters below for this display\n//#define S6D02A1_DRIVER\n//#define RPI_ILI9486_DRIVER // 20MHz maximum SPI\n//#define HX8357D_DRIVER\n//#define ILI9481_DRIVER\n//#define ILI9486_DRIVER\n//#define ILI9488_DRIVER     // WARNING: Do not connect ILI9488 display SDO to MISO if other devices share the SPI bus (TFT SDO does NOT tristate when CS is high)\n//#define ST7789_DRIVER      // Full configuration option, define additional parameters below for this display\n#define ST7789_2_DRIVER    // Minimal configuration option, define additional parameters below for this display\n//#define R61581_DRIVER\n//#define RM68140_DRIVER\n//#define ST7796_DRIVER\n\n// Some displays support SPI reads via the MISO pin, other displays have a single\n// bi-directional SDA pin and the library will try to read this via the MOSI line.\n// To use the SDA line for reading data from the TFT uncomment the following line:\n\n// #define TFT_SDA_READ      // This option is for ESP32 ONLY, tested with ST7789 display only\n\n// For ST7789 and ILI9341 ONLY, define the colour order IF the blue and red are swapped on your display\n// Try ONE option at a time to find the correct colour order for your display\n\n  #define TFT_RGB_ORDER TFT_RGB  // Colour order Red-Green-Blue\n//  #define TFT_RGB_ORDER TFT_BGR  // Colour order Blue-Green-Red\n\n// For M5Stack ESP32 module with integrated ILI9341 display ONLY, remove // in line below\n\n// #define M5STACK\n\n// For ST7789, ST7735 and ILI9163 ONLY, define the pixel width and height in portrait orientation\n// #define TFT_WIDTH  80\n #define TFT_WIDTH  135 // Marauder Mini\n// #define TFT_WIDTH  240 // ST7789 240 x 240 and 240 x 320\n// #define TFT_HEIGHT 160\n #define TFT_HEIGHT 240 // Marauder Mini\n// #define TFT_HEIGHT 240 // ST7789 240 x 240\n// #define TFT_HEIGHT 320 // ST7789 240 x 320\n\n// For ST7735 ONLY, define the type of display, originally this was based on the\n// colour of the tab on the screen protector film but this is not always true, so try\n// out the different options below if the screen does not display graphics correctly,\n// e.g. colours wrong, mirror images, or tray pixels at the edges.\n// Comment out ALL BUT ONE of these options for a ST7735 display driver, save this\n// this User_Setup file, then rebuild and upload the sketch to the board again:\n\n// #define ST7735_INITB\n// #define ST7735_GREENTAB\n// #define ST7735_GREENTAB2\n// #define ST7735_GREENTAB3\n// #define ST7735_GREENTAB128    // For 128 x 128 display\n// #define ST7735_GREENTAB160x80 // For 160 x 80 display (BGR, inverted, 26 offset)\n// #define ST7735_REDTAB\n// #define ST7735_BLACKTAB\n// #define ST7735_REDTAB160x80   // For 160 x 80 display with 24 pixel offset\n\n// If colours are inverted (white shows as black) then uncomment one of the next\n// 2 lines try both options, one of the options should correct the inversion.\n\n// #define TFT_INVERSION_ON\n// #define TFT_INVERSION_OFF\n\n// If a backlight control signal is available then define the TFT_BL pin in Section 2\n// below. The backlight will be turned ON when tft.begin() is called, but the library\n// needs to know if the LEDs are ON with the pin HIGH or LOW. If the LEDs are to be\n// driven with a PWM signal or turned OFF/ON then this must be handled by the user\n// sketch. e.g. with digitalWrite(TFT_BL, LOW);\n\n #define TFT_BACKLIGHT_ON LOW  // HIGH or LOW are options\n\n// ##################################################################################\n//\n// Section 2. Define the pins that are used to interface with the display here\n//\n// ##################################################################################\n\n// We must use hardware SPI, a minimum of 3 GPIO pins is needed.\n// Typical setup for ESP8266 NodeMCU ESP-12 is :\n//\n// Display SDO/MISO  to NodeMCU pin D6 (or leave disconnected if not reading TFT)\n// Display LED       to NodeMCU pin VIN (or 5V, see below)\n// Display SCK       to NodeMCU pin D5\n// Display SDI/MOSI  to NodeMCU pin D7\n// Display DC (RS/AO)to NodeMCU pin D3\n// Display RESET     to NodeMCU pin D4 (or RST, see below)\n// Display CS        to NodeMCU pin D8 (or GND, see below)\n// Display GND       to NodeMCU pin GND (0V)\n// Display VCC       to NodeMCU 5V or 3.3V\n//\n// The TFT RESET pin can be connected to the NodeMCU RST pin or 3.3V to free up a control pin\n//\n// The DC (Data Command) pin may be labeled AO or RS (Register Select)\n//\n// With some displays such as the ILI9341 the TFT CS pin can be connected to GND if no more\n// SPI devices (e.g. an SD Card) are connected, in this case comment out the #define TFT_CS\n// line below so it is NOT defined. Other displays such at the ST7735 require the TFT CS pin\n// to be toggled during setup, so in these cases the TFT_CS line must be defined and connected.\n//\n// The NodeMCU D0 pin can be used for RST\n//\n//\n// Note: only some versions of the NodeMCU provide the USB 5V on the VIN pin\n// If 5V is not available at a pin you can use 3.3V but backlight brightness\n// will be lower.\n\n\n// ###### EDIT THE PIN NUMBERS IN THE LINES FOLLOWING TO SUIT YOUR ESP8266 SETUP ######\n\n// For NodeMCU - use pin numbers in the form PIN_Dx where Dx is the NodeMCU pin designation\n//#define TFT_CS   PIN_D8  // Chip select control pin D8\n//#define TFT_DC   PIN_D3  // Data Command control pin\n//#define TFT_RST  PIN_D4  // Reset pin (could connect to NodeMCU RST, see next line)\n//#define TFT_RST  -1    // Set TFT_RST to -1 if the display RESET is connected to NodeMCU RST or 3.3V\n\n//#define TFT_BL PIN_D1  // LED back-light (only for ST7789 with backlight control pin)\n\n//#define TOUCH_CS PIN_D2     // Chip select pin (T_CS) of touch screen\n\n//#define TFT_WR PIN_D2       // Write strobe for modified Raspberry Pi TFT only\n\n\n// ######  FOR ESP8266 OVERLAP MODE EDIT THE PIN NUMBERS IN THE FOLLOWING LINES  ######\n\n// Overlap mode shares the ESP8266 FLASH SPI bus with the TFT so has a performance impact\n// but saves pins for other functions. It is best not to connect MISO as some displays\n// do not tristate that line wjen chip select is high!\n// On NodeMCU 1.0 SD0=MISO, SD1=MOSI, CLK=SCLK to connect to TFT in overlap mode\n// On NodeMCU V3  S0 =MISO, S1 =MOSI, S2 =SCLK\n// In ESP8266 overlap mode the following must be defined\n\n//#define TFT_SPI_OVERLAP\n\n// In ESP8266 overlap mode the TFT chip select MUST connect to pin D3\n//#define TFT_CS   PIN_D3\n//#define TFT_DC   PIN_D5  // Data Command control pin\n//#define TFT_RST  PIN_D4  // Reset pin (could connect to NodeMCU RST, see next line)\n//#define TFT_RST  -1  // Set TFT_RST to -1 if the display RESET is connected to NodeMCU RST or 3.3V\n\n\n// ###### EDIT THE PIN NUMBERS IN THE LINES FOLLOWING TO SUIT YOUR ESP32 SETUP   ######\n\n// For ESP32 Dev board (only tested with ILI9341 display)\n// The hardware SPI can be mapped to any pins\n\n// Marauder Mini\n#define TFT_CS   5  // Chip select control pin D8\n#define TFT_DC   23  // Data Command control pin\n#define TFT_RST  18  // Reset pin (could connect to NodeMCU RST, see next line)\n#define TOUCH_CS 10\n//#define TFT_MISO 19\n#define TFT_MOSI 15\n#define TFT_SCLK 13\n#define TFT_BL   10\n\n/*\n// ESP32 Marauder \n#define TFT_MISO 19\n#define TFT_MOSI 23\n#define TFT_SCLK 18\n#define TFT_CS   17  // Chip select control pin\n#define TFT_DC   16  // Data Command control pin\n#define TFT_RST   5  // Reset pin (could connect to RST pin)\n//#define TFT_RST  -1  // Set TFT_RST to -1 if display RESET is connected to ESP32 board RST\n\n#define TFT_BL   32  // LED back-light (only for ST7789 with backlight control pin)\n\n#define TOUCH_CS 21     // Chip select pin (T_CS) of touch screen\n*/\n/////////////////////////////\n\n// ESP32 Centauri\n/*\n#define TFT_MISO 19\n#define TFT_MOSI 23\n#define TFT_SCLK 18\n#define TFT_CS   27  // Chip select control pin\n#define TFT_DC   26  // Data Command control pin\n#define TFT_RST   5  // Reset pin (could connect to RST pin)\n//#define TFT_RST  -1  // Set TFT_RST to -1 if display RESET is connected to ESP32 board RST\n\n#define TFT_BL   32  // LED back-light (only for ST7789 with backlight control pin)\n\n#define TOUCH_CS 21     // Chip select pin (T_CS) of touch screen\n*/\n/////////////////////////////\n\n//#define TFT_WR 22    // Write strobe for modified Raspberry Pi TFT only\n\n// For the M5Stack module use these #define lines\n//#define TFT_MISO 19\n//#define TFT_MOSI 23\n//#define TFT_SCLK 18\n//#define TFT_CS   14  // Chip select control pin\n//#define TFT_DC   27  // Data Command control pin\n//#define TFT_RST  33  // Reset pin (could connect to Arduino RESET pin)\n//#define TFT_BL   32  // LED back-light (required for M5Stack)\n\n// ######       EDIT THE PINs BELOW TO SUIT YOUR ESP32 PARALLEL TFT SETUP        ######\n\n// The library supports 8 bit parallel TFTs with the ESP32, the pin\n// selection below is compatible with ESP32 boards in UNO format.\n// Wemos D32 boards need to be modified, see diagram in Tools folder.\n// Only ILI9481 and ILI9341 based displays have been tested!\n\n// Parallel bus is only supported on ESP32\n// Uncomment line below to use ESP32 Parallel interface instead of SPI\n\n//#define ESP32_PARALLEL\n\n// The ESP32 and TFT the pins used for testing are:\n//#define TFT_CS   33  // Chip select control pin (library pulls permanently low\n//#define TFT_DC   15  // Data Command control pin - must use a pin in the range 0-31\n//#define TFT_RST  32  // Reset pin, toggles on startup\n\n//#define TFT_WR    4  // Write strobe control pin - must use a pin in the range 0-31\n//#define TFT_RD    2  // Read strobe control pin\n\n//#define TFT_D0   12  // Must use pins in the range 0-31 for the data bus\n//#define TFT_D1   13  // so a single register write sets/clears all bits.\n//#define TFT_D2   26  // Pins can be randomly assigned, this does not affect\n//#define TFT_D3   25  // TFT screen update performance.\n//#define TFT_D4   17\n//#define TFT_D5   16\n//#define TFT_D6   27\n//#define TFT_D7   14\n\n\n// ##################################################################################\n//\n// Section 3. Define the fonts that are to be used here\n//\n// ##################################################################################\n\n// Comment out the #defines below with // to stop that font being loaded\n// The ESP8366 and ESP32 have plenty of memory so commenting out fonts is not\n// normally necessary. If all fonts are loaded the extra FLASH space required is\n// about 17Kbytes. To save FLASH space only enable the fonts you need!\n\n#define LOAD_GLCD   // Font 1. Original Adafruit 8 pixel font needs ~1820 bytes in FLASH\n#define LOAD_FONT2  // Font 2. Small 16 pixel high font, needs ~3534 bytes in FLASH, 96 characters\n#define LOAD_FONT4  // Font 4. Medium 26 pixel high font, needs ~5848 bytes in FLASH, 96 characters\n#define LOAD_FONT6  // Font 6. Large 48 pixel font, needs ~2666 bytes in FLASH, only characters 1234567890:-.apm\n#define LOAD_FONT7  // Font 7. 7 segment 48 pixel font, needs ~2438 bytes in FLASH, only characters 1234567890:-.\n#define LOAD_FONT8  // Font 8. Large 75 pixel font needs ~3256 bytes in FLASH, only characters 1234567890:-.\n//#define LOAD_FONT8N // Font 8. Alternative to Font 8 above, slightly narrower, so 3 digits fit a 160 pixel TFT\n#define LOAD_GFXFF  // FreeFonts. Include access to the 48 Adafruit_GFX free fonts FF1 to FF48 and custom fonts\n\n// Comment out the #define below to stop the SPIFFS filing system and smooth font code being loaded\n// this will save ~20kbytes of FLASH\n#define SMOOTH_FONT\n\n\n// ##################################################################################\n//\n// Section 4. Other options\n//\n// ##################################################################################\n\n// Define the SPI clock frequency, this affects the graphics rendering speed. Too\n// fast and the TFT driver will not keep up and display corruption appears.\n// With an ILI9341 display 40MHz works OK, 80MHz sometimes fails\n// With a ST7735 display more than 27MHz may not work (spurious pixels and lines)\n// With an ILI9163 display 27 MHz works OK.\n\n// #define SPI_FREQUENCY   1000000\n//#define SPI_FREQUENCY   5000000\n// #define SPI_FREQUENCY  10000000\n #define SPI_FREQUENCY  20000000\n//#define SPI_FREQUENCY  27000000 // Marauder // Actually sets it to 26.67MHz = 80/3\n// #define SPI_FREQUENCY  40000000\n// #define SPI_FREQUENCY  80000000\n\n// Optional reduced SPI frequency for reading TFT\n#define SPI_READ_FREQUENCY  20000000\n\n// The XPT2046 requires a lower SPI clock rate of 2.5MHz so we define that here:\n#define SPI_TOUCH_FREQUENCY  2500000\n\n// The ESP32 has 2 free SPI ports i.e. VSPI and HSPI, the VSPI is the default.\n// If the VSPI port is in use and pins are not accessible (e.g. TTGO T-Beam)\n// then uncomment the following line:\n//#define USE_HSPI_PORT\n\n// Comment out the following #define if \"SPI Transactions\" do not need to be\n// supported. When commented out the code size will be smaller and sketches will\n// run slightly faster, so leave it commented out unless you need it!\n\n// Transaction support is needed to work with SD library but not needed with TFT_SdFat\n// Transaction support is required if other SPI devices are connected.\n\n// Transactions are automatically enabled by the library for an ESP32 (to use HAL mutex)\n// so changing it here has no effect\n\n// #define SUPPORT_TRANSACTIONS\n"
        },
        {
          "name": "User_Setup_marauder_mini.h",
          "type": "blob",
          "size": 13.9375,
          "content": "//                            USER DEFINED SETTINGS\n//   Set driver type, fonts to be loaded, pins used and SPI control method etc\n//\n//   See the User_Setup_Select.h file if you wish to be able to define multiple\n//   setups and then easily select which setup file is used by the compiler.\n//\n//   If this file is edited correctly then all the library example sketches should\n//   run without the need to make any more changes for a particular hardware setup!\n//   Note that some sketches are designed for a particular TFT pixel width/height\n\n\n// ##################################################################################\n//\n// Section 1. Call up the right driver file and any options for it\n//\n// ##################################################################################\n\n// Display type -  only define if RPi display\n//#define RPI_DRIVER\n\n// Only define one driver, the other ones must be commented out\n//#define ILI9341_DRIVER // OG Marauder\n#define ST7735_DRIVER    // Marauder Mini  // Define additional parameters below for this display\n//#define ILI9163_DRIVER     // Define additional parameters below for this display\n//#define S6D02A1_DRIVER\n//#define RPI_ILI9486_DRIVER // 20MHz maximum SPI\n//#define HX8357D_DRIVER\n//#define ILI9481_DRIVER\n//#define ILI9486_DRIVER\n//#define ILI9488_DRIVER     // WARNING: Do not connect ILI9488 display SDO to MISO if other devices share the SPI bus (TFT SDO does NOT tristate when CS is high)\n//#define ST7789_DRIVER      // Full configuration option, define additional parameters below for this display\n//#define ST7789_2_DRIVER    // Minimal configuration option, define additional parameters below for this display\n//#define R61581_DRIVER\n//#define RM68140_DRIVER\n//#define ST7796_DRIVER\n\n// Some displays support SPI reads via the MISO pin, other displays have a single\n// bi-directional SDA pin and the library will try to read this via the MOSI line.\n// To use the SDA line for reading data from the TFT uncomment the following line:\n\n// #define TFT_SDA_READ      // This option is for ESP32 ONLY, tested with ST7789 display only\n\n// For ST7789 and ILI9341 ONLY, define the colour order IF the blue and red are swapped on your display\n// Try ONE option at a time to find the correct colour order for your display\n\n//  #define TFT_RGB_ORDER TFT_RGB  // Colour order Red-Green-Blue\n  #define TFT_RGB_ORDER TFT_BGR  // Colour order Blue-Green-Red\n\n// For M5Stack ESP32 module with integrated ILI9341 display ONLY, remove // in line below\n\n// #define M5STACK\n\n// For ST7789, ST7735 and ILI9163 ONLY, define the pixel width and height in portrait orientation\n// #define TFT_WIDTH  80\n #define TFT_WIDTH  128 // Marauder Mini\n// #define TFT_WIDTH  240 // ST7789 240 x 240 and 240 x 320\n// #define TFT_HEIGHT 160\n #define TFT_HEIGHT 128 // Marauder Mini\n// #define TFT_HEIGHT 240 // ST7789 240 x 240\n// #define TFT_HEIGHT 320 // ST7789 240 x 320\n\n// For ST7735 ONLY, define the type of display, originally this was based on the\n// colour of the tab on the screen protector film but this is not always true, so try\n// out the different options below if the screen does not display graphics correctly,\n// e.g. colours wrong, mirror images, or tray pixels at the edges.\n// Comment out ALL BUT ONE of these options for a ST7735 display driver, save this\n// this User_Setup file, then rebuild and upload the sketch to the board again:\n\n// #define ST7735_INITB\n// #define ST7735_GREENTAB\n// #define ST7735_GREENTAB2\n #define ST7735_GREENTAB3\n// #define ST7735_GREENTAB128    // For 128 x 128 display\n// #define ST7735_GREENTAB160x80 // For 160 x 80 display (BGR, inverted, 26 offset)\n// #define ST7735_REDTAB\n// #define ST7735_BLACKTAB\n// #define ST7735_REDTAB160x80   // For 160 x 80 display with 24 pixel offset\n\n// If colours are inverted (white shows as black) then uncomment one of the next\n// 2 lines try both options, one of the options should correct the inversion.\n\n// #define TFT_INVERSION_ON\n// #define TFT_INVERSION_OFF\n\n// If a backlight control signal is available then define the TFT_BL pin in Section 2\n// below. The backlight will be turned ON when tft.begin() is called, but the library\n// needs to know if the LEDs are ON with the pin HIGH or LOW. If the LEDs are to be\n// driven with a PWM signal or turned OFF/ON then this must be handled by the user\n// sketch. e.g. with digitalWrite(TFT_BL, LOW);\n\n #define TFT_BACKLIGHT_ON LOW  // HIGH or LOW are options\n\n// ##################################################################################\n//\n// Section 2. Define the pins that are used to interface with the display here\n//\n// ##################################################################################\n\n// We must use hardware SPI, a minimum of 3 GPIO pins is needed.\n// Typical setup for ESP8266 NodeMCU ESP-12 is :\n//\n// Display SDO/MISO  to NodeMCU pin D6 (or leave disconnected if not reading TFT)\n// Display LED       to NodeMCU pin VIN (or 5V, see below)\n// Display SCK       to NodeMCU pin D5\n// Display SDI/MOSI  to NodeMCU pin D7\n// Display DC (RS/AO)to NodeMCU pin D3\n// Display RESET     to NodeMCU pin D4 (or RST, see below)\n// Display CS        to NodeMCU pin D8 (or GND, see below)\n// Display GND       to NodeMCU pin GND (0V)\n// Display VCC       to NodeMCU 5V or 3.3V\n//\n// The TFT RESET pin can be connected to the NodeMCU RST pin or 3.3V to free up a control pin\n//\n// The DC (Data Command) pin may be labeled AO or RS (Register Select)\n//\n// With some displays such as the ILI9341 the TFT CS pin can be connected to GND if no more\n// SPI devices (e.g. an SD Card) are connected, in this case comment out the #define TFT_CS\n// line below so it is NOT defined. Other displays such at the ST7735 require the TFT CS pin\n// to be toggled during setup, so in these cases the TFT_CS line must be defined and connected.\n//\n// The NodeMCU D0 pin can be used for RST\n//\n//\n// Note: only some versions of the NodeMCU provide the USB 5V on the VIN pin\n// If 5V is not available at a pin you can use 3.3V but backlight brightness\n// will be lower.\n\n\n// ###### EDIT THE PIN NUMBERS IN THE LINES FOLLOWING TO SUIT YOUR ESP8266 SETUP ######\n\n// For NodeMCU - use pin numbers in the form PIN_Dx where Dx is the NodeMCU pin designation\n//#define TFT_CS   PIN_D8  // Chip select control pin D8\n//#define TFT_DC   PIN_D3  // Data Command control pin\n//#define TFT_RST  PIN_D4  // Reset pin (could connect to NodeMCU RST, see next line)\n//#define TFT_RST  -1    // Set TFT_RST to -1 if the display RESET is connected to NodeMCU RST or 3.3V\n\n//#define TFT_BL PIN_D1  // LED back-light (only for ST7789 with backlight control pin)\n\n//#define TOUCH_CS PIN_D2     // Chip select pin (T_CS) of touch screen\n\n//#define TFT_WR PIN_D2       // Write strobe for modified Raspberry Pi TFT only\n\n\n// ######  FOR ESP8266 OVERLAP MODE EDIT THE PIN NUMBERS IN THE FOLLOWING LINES  ######\n\n// Overlap mode shares the ESP8266 FLASH SPI bus with the TFT so has a performance impact\n// but saves pins for other functions. It is best not to connect MISO as some displays\n// do not tristate that line wjen chip select is high!\n// On NodeMCU 1.0 SD0=MISO, SD1=MOSI, CLK=SCLK to connect to TFT in overlap mode\n// On NodeMCU V3  S0 =MISO, S1 =MOSI, S2 =SCLK\n// In ESP8266 overlap mode the following must be defined\n\n//#define TFT_SPI_OVERLAP\n\n// In ESP8266 overlap mode the TFT chip select MUST connect to pin D3\n//#define TFT_CS   PIN_D3\n//#define TFT_DC   PIN_D5  // Data Command control pin\n//#define TFT_RST  PIN_D4  // Reset pin (could connect to NodeMCU RST, see next line)\n//#define TFT_RST  -1  // Set TFT_RST to -1 if the display RESET is connected to NodeMCU RST or 3.3V\n\n\n// ###### EDIT THE PIN NUMBERS IN THE LINES FOLLOWING TO SUIT YOUR ESP32 SETUP   ######\n\n// For ESP32 Dev board (only tested with ILI9341 display)\n// The hardware SPI can be mapped to any pins\n\n// Marauder Mini\n#define TFT_CS   17  // Chip select control pin D8\n#define TFT_DC   16  // Data Command control pin\n#define TFT_RST  5  // Reset pin (could connect to NodeMCU RST, see next line)\n#define TOUCH_CS -1\n//#define TFT_MISO 19\n//#define TFT_MOSI 23\n//#define TFT_SCLK 18\n//#define TFT_BL   32\n\n/*\n// ESP32 Marauder \n#define TFT_MISO 19\n#define TFT_MOSI 23\n#define TFT_SCLK 18\n#define TFT_CS   17  // Chip select control pin\n#define TFT_DC   16  // Data Command control pin\n#define TFT_RST   5  // Reset pin (could connect to RST pin)\n//#define TFT_RST  -1  // Set TFT_RST to -1 if display RESET is connected to ESP32 board RST\n\n#define TFT_BL   32  // LED back-light (only for ST7789 with backlight control pin)\n\n#define TOUCH_CS 21     // Chip select pin (T_CS) of touch screen\n*/\n/////////////////////////////\n\n// ESP32 Centauri\n/*\n#define TFT_MISO 19\n#define TFT_MOSI 23\n#define TFT_SCLK 18\n#define TFT_CS   27  // Chip select control pin\n#define TFT_DC   26  // Data Command control pin\n#define TFT_RST   5  // Reset pin (could connect to RST pin)\n//#define TFT_RST  -1  // Set TFT_RST to -1 if display RESET is connected to ESP32 board RST\n\n#define TFT_BL   32  // LED back-light (only for ST7789 with backlight control pin)\n\n#define TOUCH_CS 21     // Chip select pin (T_CS) of touch screen\n*/\n/////////////////////////////\n\n//#define TFT_WR 22    // Write strobe for modified Raspberry Pi TFT only\n\n// For the M5Stack module use these #define lines\n//#define TFT_MISO 19\n//#define TFT_MOSI 23\n//#define TFT_SCLK 18\n//#define TFT_CS   14  // Chip select control pin\n//#define TFT_DC   27  // Data Command control pin\n//#define TFT_RST  33  // Reset pin (could connect to Arduino RESET pin)\n//#define TFT_BL   32  // LED back-light (required for M5Stack)\n\n// ######       EDIT THE PINs BELOW TO SUIT YOUR ESP32 PARALLEL TFT SETUP        ######\n\n// The library supports 8 bit parallel TFTs with the ESP32, the pin\n// selection below is compatible with ESP32 boards in UNO format.\n// Wemos D32 boards need to be modified, see diagram in Tools folder.\n// Only ILI9481 and ILI9341 based displays have been tested!\n\n// Parallel bus is only supported on ESP32\n// Uncomment line below to use ESP32 Parallel interface instead of SPI\n\n//#define ESP32_PARALLEL\n\n// The ESP32 and TFT the pins used for testing are:\n//#define TFT_CS   33  // Chip select control pin (library pulls permanently low\n//#define TFT_DC   15  // Data Command control pin - must use a pin in the range 0-31\n//#define TFT_RST  32  // Reset pin, toggles on startup\n\n//#define TFT_WR    4  // Write strobe control pin - must use a pin in the range 0-31\n//#define TFT_RD    2  // Read strobe control pin\n\n//#define TFT_D0   12  // Must use pins in the range 0-31 for the data bus\n//#define TFT_D1   13  // so a single register write sets/clears all bits.\n//#define TFT_D2   26  // Pins can be randomly assigned, this does not affect\n//#define TFT_D3   25  // TFT screen update performance.\n//#define TFT_D4   17\n//#define TFT_D5   16\n//#define TFT_D6   27\n//#define TFT_D7   14\n\n\n// ##################################################################################\n//\n// Section 3. Define the fonts that are to be used here\n//\n// ##################################################################################\n\n// Comment out the #defines below with // to stop that font being loaded\n// The ESP8366 and ESP32 have plenty of memory so commenting out fonts is not\n// normally necessary. If all fonts are loaded the extra FLASH space required is\n// about 17Kbytes. To save FLASH space only enable the fonts you need!\n\n#define LOAD_GLCD   // Font 1. Original Adafruit 8 pixel font needs ~1820 bytes in FLASH\n#define LOAD_FONT2  // Font 2. Small 16 pixel high font, needs ~3534 bytes in FLASH, 96 characters\n#define LOAD_FONT4  // Font 4. Medium 26 pixel high font, needs ~5848 bytes in FLASH, 96 characters\n#define LOAD_FONT6  // Font 6. Large 48 pixel font, needs ~2666 bytes in FLASH, only characters 1234567890:-.apm\n#define LOAD_FONT7  // Font 7. 7 segment 48 pixel font, needs ~2438 bytes in FLASH, only characters 1234567890:-.\n#define LOAD_FONT8  // Font 8. Large 75 pixel font needs ~3256 bytes in FLASH, only characters 1234567890:-.\n//#define LOAD_FONT8N // Font 8. Alternative to Font 8 above, slightly narrower, so 3 digits fit a 160 pixel TFT\n#define LOAD_GFXFF  // FreeFonts. Include access to the 48 Adafruit_GFX free fonts FF1 to FF48 and custom fonts\n\n// Comment out the #define below to stop the SPIFFS filing system and smooth font code being loaded\n// this will save ~20kbytes of FLASH\n#define SMOOTH_FONT\n\n\n// ##################################################################################\n//\n// Section 4. Other options\n//\n// ##################################################################################\n\n// Define the SPI clock frequency, this affects the graphics rendering speed. Too\n// fast and the TFT driver will not keep up and display corruption appears.\n// With an ILI9341 display 40MHz works OK, 80MHz sometimes fails\n// With a ST7735 display more than 27MHz may not work (spurious pixels and lines)\n// With an ILI9163 display 27 MHz works OK.\n\n// #define SPI_FREQUENCY   1000000\n//#define SPI_FREQUENCY   5000000\n// #define SPI_FREQUENCY  10000000\n #define SPI_FREQUENCY  20000000\n//#define SPI_FREQUENCY  27000000 // Marauder // Actually sets it to 26.67MHz = 80/3\n// #define SPI_FREQUENCY  40000000\n// #define SPI_FREQUENCY  80000000\n\n// Optional reduced SPI frequency for reading TFT\n#define SPI_READ_FREQUENCY  20000000\n\n// The XPT2046 requires a lower SPI clock rate of 2.5MHz so we define that here:\n#define SPI_TOUCH_FREQUENCY  2500000\n\n// The ESP32 has 2 free SPI ports i.e. VSPI and HSPI, the VSPI is the default.\n// If the VSPI port is in use and pins are not accessible (e.g. TTGO T-Beam)\n// then uncomment the following line:\n//#define USE_HSPI_PORT\n\n// Comment out the following #define if \"SPI Transactions\" do not need to be\n// supported. When commented out the code size will be smaller and sketches will\n// run slightly faster, so leave it commented out unless you need it!\n\n// Transaction support is needed to work with SD library but not needed with TFT_SdFat\n// Transaction support is required if other SPI devices are connected.\n\n// Transactions are automatically enabled by the library for an ESP32 (to use HAL mutex)\n// so changing it here has no effect\n\n// #define SUPPORT_TRANSACTIONS\n"
        },
        {
          "name": "User_Setup_marauder_rev_feather.h",
          "type": "blob",
          "size": 2.0859375,
          "content": "// ST7789 135 x 240 display with no chip select line\n\n#define ST7789_DRIVER     // Configure all registers\n\n#define TFT_WIDTH  135\n#define TFT_HEIGHT 240\n\n#define CGRAM_OFFSET      // Library will add offsets required\n\n//#define TFT_RGB_ORDER TFT_RGB  // Colour order Red-Green-Blue\n//#define TFT_RGB_ORDER TFT_BGR  // Colour order Blue-Green-Red\n\n//#define TFT_INVERSION_ON\n//#define TFT_INVERSION_OFF\n\n// DSTIKE stepup\n//#define TFT_DC    23\n//#define TFT_RST   32\n//#define TFT_MOSI  26\n//#define TFT_SCLK  27\n\n// Generic ESP32 setup\n//#define TFT_MISO 19\n//#define TFT_MOSI 23\n//#define TFT_SCLK 18\n//#define TFT_CS    -1 // Not connected\n//#define TFT_DC    2\n//#define TFT_RST   4  // Connect reset to ensure display initialises\n\n// For NodeMCU - use pin numbers in the form PIN_Dx where Dx is the NodeMCU pin designation\n#define TFT_MISO 37\n#define TFT_MOSI 35\n#define TFT_SCLK 36\n#define TFT_CS   42      // Define as not used\n#define TFT_DC   40  // Data Command control pin\n#define TFT_RST  41  // TFT reset pin (could connect to NodeMCU RST, see next line)\n#define TFT_BL   45\n\n\n#define LOAD_GLCD   // Font 1. Original Adafruit 8 pixel font needs ~1820 bytes in FLASH\n#define LOAD_FONT2  // Font 2. Small 16 pixel high font, needs ~3534 bytes in FLASH, 96 characters\n#define LOAD_FONT4  // Font 4. Medium 26 pixel high font, needs ~5848 bytes in FLASH, 96 characters\n#define LOAD_FONT6  // Font 6. Large 48 pixel font, needs ~2666 bytes in FLASH, only characters 1234567890:-.apm\n#define LOAD_FONT7  // Font 7. 7 segment 48 pixel font, needs ~2438 bytes in FLASH, only characters 1234567890:.\n#define LOAD_FONT8  // Font 8. Large 75 pixel font needs ~3256 bytes in FLASH, only characters 1234567890:-.\n//#define LOAD_FONT8N // Font 8. Alternative to Font 8 above, slightly narrower, so 3 digits fit a 160 pixel TFT\n#define LOAD_GFXFF  // FreeFonts. Include access to the 48 Adafruit_GFX free fonts FF1 to FF48 and custom fonts\n\n#define SMOOTH_FONT\n\n\n// #define SPI_FREQUENCY  27000000\n#define SPI_FREQUENCY  40000000\n\n#define SPI_READ_FREQUENCY  20000000\n\n#define SPI_TOUCH_FREQUENCY  2500000\n\n// #define SUPPORT_TRANSACTIONS"
        },
        {
          "name": "User_Setup_og_marauder.h",
          "type": "blob",
          "size": 13.9287109375,
          "content": "//                            USER DEFINED SETTINGS\n//   Set driver type, fonts to be loaded, pins used and SPI control method etc\n//\n//   See the User_Setup_Select.h file if you wish to be able to define multiple\n//   setups and then easily select which setup file is used by the compiler.\n//\n//   If this file is edited correctly then all the library example sketches should\n//   run without the need to make any more changes for a particular hardware setup!\n//   Note that some sketches are designed for a particular TFT pixel width/height\n\n\n// ##################################################################################\n//\n// Section 1. Call up the right driver file and any options for it\n//\n// ##################################################################################\n\n// Display type -  only define if RPi display\n//#define RPI_DRIVER\n\n// Only define one driver, the other ones must be commented out\n#define ILI9341_DRIVER // OG Marauder\n//#define ST7735_DRIVER    // Marauder Mini  // Define additional parameters below for this display\n//#define ILI9163_DRIVER     // Define additional parameters below for this display\n//#define S6D02A1_DRIVER\n//#define RPI_ILI9486_DRIVER // 20MHz maximum SPI\n//#define HX8357D_DRIVER\n//#define ILI9481_DRIVER\n//#define ILI9486_DRIVER\n//#define ILI9488_DRIVER     // WARNING: Do not connect ILI9488 display SDO to MISO if other devices share the SPI bus (TFT SDO does NOT tristate when CS is high)\n//#define ST7789_DRIVER      // Full configuration option, define additional parameters below for this display\n//#define ST7789_2_DRIVER    // Minimal configuration option, define additional parameters below for this display\n//#define R61581_DRIVER\n//#define RM68140_DRIVER\n//#define ST7796_DRIVER\n\n// Some displays support SPI reads via the MISO pin, other displays have a single\n// bi-directional SDA pin and the library will try to read this via the MOSI line.\n// To use the SDA line for reading data from the TFT uncomment the following line:\n\n// #define TFT_SDA_READ      // This option is for ESP32 ONLY, tested with ST7789 display only\n\n// For ST7789 and ILI9341 ONLY, define the colour order IF the blue and red are swapped on your display\n// Try ONE option at a time to find the correct colour order for your display\n\n//  #define TFT_RGB_ORDER TFT_RGB  // Colour order Red-Green-Blue\n//  #define TFT_RGB_ORDER TFT_BGR  // Colour order Blue-Green-Red\n\n// For M5Stack ESP32 module with integrated ILI9341 display ONLY, remove // in line below\n\n// #define M5STACK\n\n// For ST7789, ST7735 and ILI9163 ONLY, define the pixel width and height in portrait orientation\n// #define TFT_WIDTH  80\n// #define TFT_WIDTH  128 // Marauder Mini\n// #define TFT_WIDTH  240 // ST7789 240 x 240 and 240 x 320\n// #define TFT_HEIGHT 160\n// #define TFT_HEIGHT 128 // Marauder Mini\n// #define TFT_HEIGHT 240 // ST7789 240 x 240\n// #define TFT_HEIGHT 320 // ST7789 240 x 320\n\n// For ST7735 ONLY, define the type of display, originally this was based on the\n// colour of the tab on the screen protector film but this is not always true, so try\n// out the different options below if the screen does not display graphics correctly,\n// e.g. colours wrong, mirror images, or tray pixels at the edges.\n// Comment out ALL BUT ONE of these options for a ST7735 display driver, save this\n// this User_Setup file, then rebuild and upload the sketch to the board again:\n\n// #define ST7735_INITB\n// #define ST7735_GREENTAB\n// #define ST7735_GREENTAB2\n// #define ST7735_GREENTAB3\n// #define ST7735_GREENTAB128    // For 128 x 128 display\n// #define ST7735_GREENTAB160x80 // For 160 x 80 display (BGR, inverted, 26 offset)\n// #define ST7735_REDTAB\n// #define ST7735_BLACKTAB\n// #define ST7735_REDTAB160x80   // For 160 x 80 display with 24 pixel offset\n\n// If colours are inverted (white shows as black) then uncomment one of the next\n// 2 lines try both options, one of the options should correct the inversion.\n\n// #define TFT_INVERSION_ON\n// #define TFT_INVERSION_OFF\n\n// If a backlight control signal is available then define the TFT_BL pin in Section 2\n// below. The backlight will be turned ON when tft.begin() is called, but the library\n// needs to know if the LEDs are ON with the pin HIGH or LOW. If the LEDs are to be\n// driven with a PWM signal or turned OFF/ON then this must be handled by the user\n// sketch. e.g. with digitalWrite(TFT_BL, LOW);\n\n// #define TFT_BACKLIGHT_ON LOW  // HIGH or LOW are options\n\n// ##################################################################################\n//\n// Section 2. Define the pins that are used to interface with the display here\n//\n// ##################################################################################\n\n// We must use hardware SPI, a minimum of 3 GPIO pins is needed.\n// Typical setup for ESP8266 NodeMCU ESP-12 is :\n//\n// Display SDO/MISO  to NodeMCU pin D6 (or leave disconnected if not reading TFT)\n// Display LED       to NodeMCU pin VIN (or 5V, see below)\n// Display SCK       to NodeMCU pin D5\n// Display SDI/MOSI  to NodeMCU pin D7\n// Display DC (RS/AO)to NodeMCU pin D3\n// Display RESET     to NodeMCU pin D4 (or RST, see below)\n// Display CS        to NodeMCU pin D8 (or GND, see below)\n// Display GND       to NodeMCU pin GND (0V)\n// Display VCC       to NodeMCU 5V or 3.3V\n//\n// The TFT RESET pin can be connected to the NodeMCU RST pin or 3.3V to free up a control pin\n//\n// The DC (Data Command) pin may be labeled AO or RS (Register Select)\n//\n// With some displays such as the ILI9341 the TFT CS pin can be connected to GND if no more\n// SPI devices (e.g. an SD Card) are connected, in this case comment out the #define TFT_CS\n// line below so it is NOT defined. Other displays such at the ST7735 require the TFT CS pin\n// to be toggled during setup, so in these cases the TFT_CS line must be defined and connected.\n//\n// The NodeMCU D0 pin can be used for RST\n//\n//\n// Note: only some versions of the NodeMCU provide the USB 5V on the VIN pin\n// If 5V is not available at a pin you can use 3.3V but backlight brightness\n// will be lower.\n\n\n// ###### EDIT THE PIN NUMBERS IN THE LINES FOLLOWING TO SUIT YOUR ESP8266 SETUP ######\n\n// For NodeMCU - use pin numbers in the form PIN_Dx where Dx is the NodeMCU pin designation\n//#define TFT_CS   PIN_D8  // Chip select control pin D8\n//#define TFT_DC   PIN_D3  // Data Command control pin\n//#define TFT_RST  PIN_D4  // Reset pin (could connect to NodeMCU RST, see next line)\n//#define TFT_RST  -1    // Set TFT_RST to -1 if the display RESET is connected to NodeMCU RST or 3.3V\n\n//#define TFT_BL PIN_D1  // LED back-light (only for ST7789 with backlight control pin)\n\n//#define TOUCH_CS PIN_D2     // Chip select pin (T_CS) of touch screen\n\n//#define TFT_WR PIN_D2       // Write strobe for modified Raspberry Pi TFT only\n\n\n// ######  FOR ESP8266 OVERLAP MODE EDIT THE PIN NUMBERS IN THE FOLLOWING LINES  ######\n\n// Overlap mode shares the ESP8266 FLASH SPI bus with the TFT so has a performance impact\n// but saves pins for other functions. It is best not to connect MISO as some displays\n// do not tristate that line wjen chip select is high!\n// On NodeMCU 1.0 SD0=MISO, SD1=MOSI, CLK=SCLK to connect to TFT in overlap mode\n// On NodeMCU V3  S0 =MISO, S1 =MOSI, S2 =SCLK\n// In ESP8266 overlap mode the following must be defined\n\n//#define TFT_SPI_OVERLAP\n\n// In ESP8266 overlap mode the TFT chip select MUST connect to pin D3\n//#define TFT_CS   PIN_D3\n//#define TFT_DC   PIN_D5  // Data Command control pin\n//#define TFT_RST  PIN_D4  // Reset pin (could connect to NodeMCU RST, see next line)\n//#define TFT_RST  -1  // Set TFT_RST to -1 if the display RESET is connected to NodeMCU RST or 3.3V\n\n\n// ###### EDIT THE PIN NUMBERS IN THE LINES FOLLOWING TO SUIT YOUR ESP32 SETUP   ######\n\n// For ESP32 Dev board (only tested with ILI9341 display)\n// The hardware SPI can be mapped to any pins\n\n// Marauder Mini\n/*\n#define TFT_CS   17  // Chip select control pin D8\n#define TFT_DC   16  // Data Command control pin\n#define TFT_RST  5  // Reset pin (could connect to NodeMCU RST, see next line)\n//#define TFT_MISO 19\n//#define TFT_MOSI 23\n//#define TFT_SCLK 18\n//#define TFT_BL   32\n*/\n\n// ESP32 Marauder \n#define TFT_MISO 19\n#define TFT_MOSI 23\n#define TFT_SCLK 18\n#define TFT_CS   17  // Chip select control pin\n#define TFT_DC   16  // Data Command control pin\n#define TFT_RST   5  // Reset pin (could connect to RST pin)\n//#define TFT_RST  -1  // Set TFT_RST to -1 if display RESET is connected to ESP32 board RST\n\n#define TFT_BL   32  // LED back-light (only for ST7789 with backlight control pin)\n\n#define TOUCH_CS 21     // Chip select pin (T_CS) of touch screen\n\n/////////////////////////////\n\n// ESP32 Centauri\n/*\n#define TFT_MISO 19\n#define TFT_MOSI 23\n#define TFT_SCLK 18\n#define TFT_CS   27  // Chip select control pin\n#define TFT_DC   26  // Data Command control pin\n#define TFT_RST   5  // Reset pin (could connect to RST pin)\n//#define TFT_RST  -1  // Set TFT_RST to -1 if display RESET is connected to ESP32 board RST\n\n#define TFT_BL   32  // LED back-light (only for ST7789 with backlight control pin)\n\n#define TOUCH_CS 21     // Chip select pin (T_CS) of touch screen\n*/\n/////////////////////////////\n\n//#define TFT_WR 22    // Write strobe for modified Raspberry Pi TFT only\n\n// For the M5Stack module use these #define lines\n//#define TFT_MISO 19\n//#define TFT_MOSI 23\n//#define TFT_SCLK 18\n//#define TFT_CS   14  // Chip select control pin\n//#define TFT_DC   27  // Data Command control pin\n//#define TFT_RST  33  // Reset pin (could connect to Arduino RESET pin)\n//#define TFT_BL   32  // LED back-light (required for M5Stack)\n\n// ######       EDIT THE PINs BELOW TO SUIT YOUR ESP32 PARALLEL TFT SETUP        ######\n\n// The library supports 8 bit parallel TFTs with the ESP32, the pin\n// selection below is compatible with ESP32 boards in UNO format.\n// Wemos D32 boards need to be modified, see diagram in Tools folder.\n// Only ILI9481 and ILI9341 based displays have been tested!\n\n// Parallel bus is only supported on ESP32\n// Uncomment line below to use ESP32 Parallel interface instead of SPI\n\n//#define ESP32_PARALLEL\n\n// The ESP32 and TFT the pins used for testing are:\n//#define TFT_CS   33  // Chip select control pin (library pulls permanently low\n//#define TFT_DC   15  // Data Command control pin - must use a pin in the range 0-31\n//#define TFT_RST  32  // Reset pin, toggles on startup\n\n//#define TFT_WR    4  // Write strobe control pin - must use a pin in the range 0-31\n//#define TFT_RD    2  // Read strobe control pin\n\n//#define TFT_D0   12  // Must use pins in the range 0-31 for the data bus\n//#define TFT_D1   13  // so a single register write sets/clears all bits.\n//#define TFT_D2   26  // Pins can be randomly assigned, this does not affect\n//#define TFT_D3   25  // TFT screen update performance.\n//#define TFT_D4   17\n//#define TFT_D5   16\n//#define TFT_D6   27\n//#define TFT_D7   14\n\n\n// ##################################################################################\n//\n// Section 3. Define the fonts that are to be used here\n//\n// ##################################################################################\n\n// Comment out the #defines below with // to stop that font being loaded\n// The ESP8366 and ESP32 have plenty of memory so commenting out fonts is not\n// normally necessary. If all fonts are loaded the extra FLASH space required is\n// about 17Kbytes. To save FLASH space only enable the fonts you need!\n\n#define LOAD_GLCD   // Font 1. Original Adafruit 8 pixel font needs ~1820 bytes in FLASH\n#define LOAD_FONT2  // Font 2. Small 16 pixel high font, needs ~3534 bytes in FLASH, 96 characters\n#define LOAD_FONT4  // Font 4. Medium 26 pixel high font, needs ~5848 bytes in FLASH, 96 characters\n#define LOAD_FONT6  // Font 6. Large 48 pixel font, needs ~2666 bytes in FLASH, only characters 1234567890:-.apm\n#define LOAD_FONT7  // Font 7. 7 segment 48 pixel font, needs ~2438 bytes in FLASH, only characters 1234567890:-.\n#define LOAD_FONT8  // Font 8. Large 75 pixel font needs ~3256 bytes in FLASH, only characters 1234567890:-.\n//#define LOAD_FONT8N // Font 8. Alternative to Font 8 above, slightly narrower, so 3 digits fit a 160 pixel TFT\n#define LOAD_GFXFF  // FreeFonts. Include access to the 48 Adafruit_GFX free fonts FF1 to FF48 and custom fonts\n\n// Comment out the #define below to stop the SPIFFS filing system and smooth font code being loaded\n// this will save ~20kbytes of FLASH\n#define SMOOTH_FONT\n\n\n// ##################################################################################\n//\n// Section 4. Other options\n//\n// ##################################################################################\n\n// Define the SPI clock frequency, this affects the graphics rendering speed. Too\n// fast and the TFT driver will not keep up and display corruption appears.\n// With an ILI9341 display 40MHz works OK, 80MHz sometimes fails\n// With a ST7735 display more than 27MHz may not work (spurious pixels and lines)\n// With an ILI9163 display 27 MHz works OK.\n\n// #define SPI_FREQUENCY   1000000\n//#define SPI_FREQUENCY   5000000\n// #define SPI_FREQUENCY  10000000\n// #define SPI_FREQUENCY  20000000\n#define SPI_FREQUENCY  27000000 // Marauder // Actually sets it to 26.67MHz = 80/3\n// #define SPI_FREQUENCY  40000000\n// #define SPI_FREQUENCY  80000000\n\n// Optional reduced SPI frequency for reading TFT\n#define SPI_READ_FREQUENCY  20000000\n\n// The XPT2046 requires a lower SPI clock rate of 2.5MHz so we define that here:\n#define SPI_TOUCH_FREQUENCY  2500000\n\n// The ESP32 has 2 free SPI ports i.e. VSPI and HSPI, the VSPI is the default.\n// If the VSPI port is in use and pins are not accessible (e.g. TTGO T-Beam)\n// then uncomment the following line:\n//#define USE_HSPI_PORT\n\n// Comment out the following #define if \"SPI Transactions\" do not need to be\n// supported. When commented out the code size will be smaller and sketches will\n// run slightly faster, so leave it commented out unless you need it!\n\n// Transaction support is needed to work with SD library but not needed with TFT_SdFat\n// Transaction support is required if other SPI devices are connected.\n\n// Transactions are automatically enabled by the library for an ESP32 (to use HAL mutex)\n// so changing it here has no effect\n\n// #define SUPPORT_TRANSACTIONS\n"
        },
        {
          "name": "bootloaders",
          "type": "tree",
          "content": null
        },
        {
          "name": "esp32_marauder",
          "type": "tree",
          "content": null
        },
        {
          "name": "libraries",
          "type": "tree",
          "content": null
        },
        {
          "name": "mechanical",
          "type": "tree",
          "content": null
        },
        {
          "name": "old_README.md",
          "type": "blob",
          "size": 17.03515625,
          "content": "<!---[![License: MIT](https://img.shields.io/github/license/mashape/apistatus.svg)](https://github.com/justcallmekoko/ESP32Marauder/blob/master/LICENSE)--->\n<!---[![Gitter](https://badges.gitter.im/justcallmekoko/ESP32Marauder.png)](https://gitter.im/justcallmekoko/ESP32Marauder)--->\n<!---[![Build Status](https://travis-ci.com/justcallmekoko/ESP32Marauder.svg?branch=master)](https://travis-ci.com/justcallmekoko/ESP32Marauder)--->\n<!---Shields/Badges https://shields.io/--->\n\n# ESP32 Marauder v0.8.0\n<p align=\"center\"><img alt=\"Marauder logo\" src=\"https://github.com/justcallmekoko/ESP32Marauder/blob/master/pictures/marauder3L.jpg?raw=true\" width=\"300\"></p>\n<p align=\"center\">\n  <b>A suite of WiFi/Bluetooth offensive and defensive tools for the ESP32</b>\n  <br><br>\n  <a href=\"https://github.com/justcallmekoko/ESP32Marauder/blob/master/LICENSE\"><img alt=\"License\" src=\"https://img.shields.io/github/license/mashape/apistatus.svg\"></a>\n  <a href=\"https://gitter.im/justcallmekoko/ESP32Marauder\"><img alt=\"Gitter\" src=\"https://badges.gitter.im/justcallmekoko/ESP32Marauder.png\"/></a>\n  <a href=\"https://github.com/justcallmekoko/ESP32Marauder/releases/latest\"><img src=\"https://img.shields.io/github/downloads/justcallmekoko/ESP32Marauder/total\" alt=\"Downloads\"/></a>\n  <br>\n  <a href=\"https://twitter.com/intent/follow?screen_name=jcmkyoutube\"><img src=\"https://img.shields.io/twitter/follow/jcmkyoutube?style=social&logo=twitter\" alt=\"Twitter\"></a>\n  <a href=\"https://www.instagram.com/just.call.me.koko\"><img src=\"https://img.shields.io/badge/Follow%20Me-Instagram-orange\" alt=\"Instagram\"/></a>\n  <br><br>\n  <a href=\"https://www.tindie.com/products/justcallmekoko/esp32-marauder/\"><img src=\"https://d2ss6ovg47m0r5.cloudfront.net/badges/tindie-larges.png\" alt=\"I sell on Tindie\" width=\"200\" height=\"104\"></a>\n  <br>\n  <a href=\"https://www.twitch.tv/willstunforfood\"><img src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c540.png\" alt=\"Twitch WillStunForFood\" width=\"200\"></a>\n</p>\n\nCatch my live stream on [Twitch](https://www.twitch.tv/willstunforfood) where I play games, have just chatting sessions to talk tech, and just generally be an ordinary person who can't figure out how to make proper life decisions.\n  \n  Stream Schedule:  \n    Mon: 1800 - 2000 EST  \n    Wed: 1800 - 2000 EST  \n    Sun: 1200 - 1400 EST  \n\n[![HitCount](http://hits.dwyl.io/justcallmekoko/badges.svg)](http://hits.dwyl.io/justcallmekoko/badges)\n[![Build Status](https://travis-ci.com/justcallmekoko/ESP32Marauder.svg?branch=master)](https://travis-ci.com/justcallmekoko/ESP32Marauder)\n\n# Table Of Condensation\n- [About](#about)\n  - [YouTube](#youtube)\n  - [Hackster Article](#hackster-article)\n  - [Capabilities](#capabilities)\n- [Do It Yourself](#do-it-yourself)\n  - [Hardware](#hardware)\n    - [Connections](#connections)\n  - [Flashing Firmware](#flashing-firmware)\n    - [Using Arduino IDE](#using-arduino-ide)\n  - [Updating Firmware](#updating-firmware)\n    - [Web Update](#web-update)\n    - [SD Update](#sd-update)\n  - [Enclosure](#enclosure)\n- [Under Development](#under-development)\n- [Special Thanks](#special-thanks)\n- [For Sale Now](#for-sale-now)\n\n# About\nSometimes you just gotta do what you gotta do. Am I right, ladies?\nThe ESP32 Marauder is a suite of WiFi/Bluetooth offensive and defensive tools created for the ESP32 and was originally inspired by [Spacehuhn's](https://github.com/Spacehuhn) [esp8266_deauther](https://github.com/Spacehuhn/esp8366_deauther) project. The tool itself serves as a portable device used to test and analyze WiFi and Bluetooth devices. Use this tool and its firmware with caution as the use of some of its capabilities without explicit consent from the target owner is unlawful in most countries. For more information about this project and how it's assembled, follow the video link below. Track features and issues [here](https://github.com/justcallmekoko/ESP32Marauder/issues). Check out [#esp32marauder](https://www.instagram.com/explore/tags/esp32marauder/) on Instagram.  \n**Note:** Because of espressif's ESP32-IDF, the ESP32 included with Marauder is incapable of transmitting deauthentication frames.\n\n### YouTube\n<p align=\"left\"><a href=\"https://www.youtube.com/watch?v=BGFO1wA29o8\"><img alt=\"Marauder logo\" src=\"https://github.com/justcallmekoko/ESP32Marauder/blob/master/pictures/esp32marauder_thumbnail.jpg\" width=\"500\"></a></p>\n\n### Hackster Article\nYou can check out the marauder article written [here](https://www.hackster.io/news/esp32-marauder-puts-a-bluetooth-wi-fi-pen-testing-toolkit-in-your-pocket-32d389f6e66f) as well as other interesting engineering projects.\n\n## Capabilities\n### Current\n- Join WiFi: Just join a WiFi network\n- Shutdown WiFi: Shutdown the Marauder WiFi interface to save some RAM\n- Generate SSIDs: Add 20 random SSIDs to your list of SSIDs\n- Add SSID: Use an on-screen keyboard to add your own SSIDs to the SSID list\n- Clear SSIDs: Clear the list of SSIDs\n- Probe Request Sniff: Sniff for WiFi [probe request frames](https://mrncciew.com/2014/10/27/cwap-802-11-probe-requestresponse/) sent by wireless devices\n- Beacon Sniff: Sniff [beacon frames](https://en.wikipedia.org/wiki/Beacon_frame) sent by wireless acccess points\n- Beacon Spam List: Spam a list of SSIDs and monitoring connection attempts to those networks\n- Beacon Spam Random: Spam hundreds of random beacon frames to wireless devices within range\n- Rick Roll Beacon: Broadcast the rick roll lyrics as WiFi access points\n- Bluetooth Sniffer: Sniff bluetooth devices within range\n- Shutdown BLE: Shutdown the Marauder BLE interface to save RAM\n- Detect Card Skimmers: Detect bluetooth enabled credit card skimmers\n- Packet Monitor: Show WiFi packet density on a given channel using a time bar graph\n- EAPOL/PMKID Scan: Capture EAPOL/PMKID frames\n- Detect Pwnagotchi: Detect any pwnagotchis in range\n- Detect Espressif: Detect any espressif devices in range\n- Deauth Sniff: Detect deauthentication packets sent on all channels\n- Draw: Just doodle on the screen or whatever\n- Update Firmware: Update Marauder firmware over the air via web interface or with SD card\n- Save PCAP files to SD card\n\n# Do It Yourself\n<p align=\"center\"><img alt=\"Marauder logo\" src=\"https://github.com/justcallmekoko/ESP32Marauder/blob/master/pictures/diy.png?raw=true\" width=\"800\"></p>\n\n## Hardware\nThis project requires the following hardware in order to work:\n- Any ESP32 Development Board\n- 2.8\" TFT Touch Screen w/ ili9341\n- Jumper Wires\n- Breadboard\n\n### Connections\nMake the following connections between your 2.8\" TFT Screen and your ESP32 board. You may need to refer to a pinout sheet specific to the ESP32 dev board you have chosen. For more infomation about this circuit, please refer to [this schematic](https://github.com/justcallmekoko/ESP32Marauder/blob/master/schematics/Schematic_ESP32-Marauder-2_ESP32-Marauder-2-Schematic_20191007113616_png.png)\n\n| SD Card | 2.8\" TFT | ESP32  |\n| ------- | -------- | ------ |\n|         | VCC      | VCC    |\n|         | GND      | GND    |\n|         | CS       | GPIO17 |\n|         | RESET    | GPIO5  |\n|         | D/C      | GPIO16 |\n| SD_MOSI | MOSI     | GPIO23 |\n| SD_SCK  | SCK      | GPIO18 |\n|         | LED      | GPIO32 |\n| SD_MISO | MISO     | GPIO19 |\n|         | T_CLK    | GPIO18 |\n|         | T_CS     | GPIO21 |\n|         | T_DI     | GPIO23 |\n|         | T_DO     | GPIO19 |\n|         | T_IRQ    |        |\n| SD_CS   |          | GPIO12 |\n\nFor the analog battery circuit, use a 4 to 1 voltage divider, and (optional) a mosfet.\nFor the charge detection circuit, use a 1 to 2 voltage divider (the charge detection is optional and only changes the battery icon colour while charging)\n| BATTERY | ESP32  |\n| ------- | ------ |\n|  BAT +  | GPIO34 |\n|  MOSFET | GPIO13 |\n| CHARGE +| GPIO27 |\n\n## Flashing Firmware\n### Using Arduino IDE\n1. Install the [Arduino IDE](https://www.arduino.cc/en/main/software)\n2. In the Arduino IDE, go to `File`>`Preferences`\n3. Add the following URL to `Additional Boards Manager URLs:`\n    - https://dl.espressif.com/dl/package_esp32_index.json\n4. Go to `Tools`>`Board`>`Boards Manager`, search for `esp32` and install `esp32 by Espressif Systems`\n5. Install Spacehuhn's [SimpleList](https://github.com/spacehuhn/SimpleList) library in your Arduino IDE\n    - Download the SimpleList repo\n    - In the Arduino IDE, go to `Sketch`>`Include Library`>`Add .ZIP Library...` and add the SimpleList-master.zip you just downloaded\n<!---6. Install Bodmer's [TFT_eSPI](https://github.com/Bodmer/TFT_eSPI) library in your Arduino IDE--->\n6. Install my fork of Bodmer's [TFT_eSPI](https://github.com/justcallmekoko/TFT_eSPI) library in your Arduino IDE\n    - Download the TFT_eSPI repo\n    - In the Arduino IDE, go to `Sketch`>`Include Library`>`Add .ZIP Library...` and add the TFT-eSPI-master.zip you just downloaded\n    - Make the following modifications shown in [this issue](https://github.com/justcallmekoko/ESP32Marauder/issues/2#issuecomment-555695918) to the TFT_eSPI library you just installed\n7. Follow [these instructions](https://github.com/me-no-dev/arduino-esp32fs-plugin) for installing ESP32 Spiffs Tool\n8. Install the [CH340 Drivers](https://github.com/justcallmekoko/ESP32Marauder/blob/master/Drivers/CH34x_Install_Windows_v3_4.EXE)\n9. Download or clone this repository\n10. Open `esp32_marauder.ino`\n10.5. If you're using the analog battery measuring circuit, go to the MenuFunctions.h and change \"#define BATTERY_ANALOG_ON\" to 1\n11. Plug your ESP32 into a USB port and select the COM port under `Tools`>`Port`\n12. Select `LOLIN D32` under `Tools`>`Boards`\n12.5 If you want an upscaled version of the logo, go to the data folder and rename \"marauder3L1.jpg\" to \"marauder3L.jpg\"\n13. Click `ESP32 Sketch Data Upload` and wait for the SPIFFS upload to finish\n14. Click the upload button\n\n<p align=\"center\">\n  <img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/m5stack.jpg?raw=true\" height=\"300\">\n  <img alt=\"Marauder logo\" src=\"https://github.com/justcallmekoko/ESP32Marauder/blob/master/pictures/odroid_marauder.jpg?raw=true\" height=\"300\">\n</p>\n\n## Updating Firmware\nThere are multiple options available to update the Marauder firmware. If you have already built the project from this repo, you can just pull the latest commit and flash the firmware using the Arduino IDE (see [here](#using-arduino-ide)).  \nIf you own an ESP32 Marauder (v0.4.0 or later) and have not build the project, you can follow [these instructions](#web-update) for installing the latest update over the air via Marauder's web interface or [these instructions](#sd-update) for installing the latest update using an SD Card.  \n\n### Web Update\n1. Download the [latest release](https://github.com/justcallmekoko/ESP32Marauder/releases/latest) of the Marauder firmware\n2. With Marauder powered on, navigate to `Device`>`Update Firmware`>`Web Update`\n    - Marauder will display details on screen about the status of the update\n3. Connect to the MarauderOTA WiFi network from your computer\n    - password: justcallmekoko\n4. On your web browser, navigate to `http://192.168.4.1`\n5. Enter the username and password\n    - Username: admin\n    - Password: admin\n6. Click the `Browse` button and select the .bin file you downloaded from the releases\n7. Click `Update`\n    - Marauder will automatically reboot once the update has been applied\n    \n### SD Update\n*Using a Samsung MicroSD card will cause Marauder not to boot*\n1. Download the [latest release](https://github.com/justcallmekoko/ESP32Marauder/releases/latest) of the Marauder firmware\n2. Copy the bin file you downloaded to the root of an SD card\n3. Rename the bin file on the SD card to `update.bin`\n4. With Marauder powered off, insert the SD card into Marauder\n5. Power Marauder on and navigate to `Device`>`Update Firmware`>`SD Update`\n6. Click `Yes` to confirm the update\n    - Marauder will automatically reboot once the update has been applied\n    \n## Enclosure\nThe ESP32 Marauder sold on Tindie comes with its own 3D printed enclosure. If you want to replace the enclosure that came with yours or you want to try to fit your own hardware in an enclosure and have access to a 3D printer, you can download the STL files [here](https://github.com/justcallmekoko/ESP32Marauder/tree/master/3Dfiles) or from [Thingiverse](https://www.thingiverse.com/thing:4146626).\n\nInstructions from Thingiverse\nComponents of the project:\n  - ESP32 Marauder\n  - 4 M2.5x10 Hex screws\n  - Enclosure face plate\n  - Enclosure body\n\nHow to do the thing:\n1. Print both the face plate and the body\n2. Mount the face plate onto the screen of the Marauder by putting the pegs through the holes on the screen PCB\n3. Lower the Marauder into the body of the enclosure and ensure the battery sits within the trench in the center of the body\n4. Fasten the face plate to the body using 4 M2.5x10 hex screws.\n    - The top of the screws should be flush with the surface of the face plate\n    \n# Icons\nI put these here just because  \n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/attack_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/beacon_sniff_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/beacon_spam_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/bluetooth_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/bluetooth_sniff_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/deauth_sniff_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/device_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/device_info_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/draw_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/eapol_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/espressif_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/general_apps_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/monitor_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/probe_sniff_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/pwnagotchi_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/reboot_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/rick_roll_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/scan_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/sd_update_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/skimmer_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/sniff_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/update_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/web_update_22.bmp\">\n<img alt=\"Marauder logo\" src=\"https://raw.githubusercontent.com/justcallmekoko/ESP32Marauder/master/pictures/icons/wifi_22.bmp\">\n  \n# Under Development\nCurrently the ESP32 Marauder has limited firmware capabilities. Most of the work so far has been put into designing the hardware. New firmware features will be added over time and will eventually reach a point where this project will be a fully capable hacking machine.\n\n# Special Thanks\n- [Spacehuhn](https://github.com/spacehuhn) for an easy to use linked list library [SimpleList](https://github.com/spacehuhn/SimpleList)\n  - Also a well designed menu structure. I adapted it to the TFT GUI because it worked perfectly\n  - Also...providing the buffer class used to save pcap files to an SD card\n- [Ivanseidel](https://github.com/ivanseidel) for providing a thread safe [LinkedList](https://github.com/ivanseidel/LinkedList) library\n- [Bodmer](https://github.com/Bodmer) for a comprehensive TFT touch screen library [TFT_eSPI](https://github.com/Bodmer/TFT_eSPI)\n- [HyderHasnain](https://github.com/hyderhasnain) for an adaptable [line graph](https://github.com/hyderhasnain/arduino_touchscreen_controller/blob/master/Code/AccelGraph_Original.ino) to be used as the packet monitor\n\n# For Sale Now\nYou can buy the ESP32 Marauder using [this link](https://www.tindie.com/products/justcallmekoko/esp32-marauder/)\n"
        },
        {
          "name": "pictures",
          "type": "tree",
          "content": null
        },
        {
          "name": "release_countdown.html",
          "type": "blob",
          "size": 2.125,
          "content": "<!DOCTYPE HTML>\n<html>\n<head>\n<title>ESP32 Marauder Release</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<style>\n\nq {\n  position: absolute;\n  top: 50%;\n  -ms-transform: translateY(-50%);\n  transform: translateY(-50%);\n  \n  left: 50%;\n  -ms-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n}\n\np {\n  position: absolute;\n  top: 56%;\n  -ms-transform: translateY(-50%);\n  transform: translateY(-50%);\n  \n  left: 50%;\n  -ms-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n  \n  text-align: center;\n  font-size: 30px;\n  color: white;\n  font-family: courier new;\n  \n  padding-top: 10px;\n}\n\nbody {\n  background-color: black;\n}\n\n.countdown {\n  padding-top: 5%;\n}\n\n</style>\n</head>\n<body>\n\n<div>\n  <q>\n    <a href=\"https://www.tindie.com/products/justcallmekoko/esp32-marauder/\"><img src=\"https://github.com/justcallmekoko/ESP32Marauder/raw/master/pictures/marauder3L.jpg?raw=true\" alt=\"marauder\">\n  </q>\n</div>\n\n<div>\n  <p class=\"countdown\" id=\"demo\"></p>\n\n  <script>\n// Set the date we're counting down to\nvar countDownDate = new Date(\"Jun 1, 2021 15:00:00\").getTime();\n\n// Update the count down every 1 second\nvar x = setInterval(function() {\n\n  // Get today's date and time\n  var now = new Date().getTime();\n    \n  // Find the distance between now and the count down date\n  var distance = countDownDate - now;\n    \n  // Time calculations for days, hours, minutes and seconds\n  var days = Math.floor(distance / (1000 * 60 * 60 * 24));\n  var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n  var seconds = Math.floor((distance % (1000 * 60)) / 1000);\n    \n  // Output the result in an element with id=\"demo\"\n  document.getElementById(\"demo\").innerHTML = days + \"d \" + hours + \"h \"\n  + minutes + \"m \" + seconds + \"s \";\n  \n  document.title = days + \"d \" + hours + \"h \"\n  + minutes + \"m \" + seconds + \"s \";\n    \n  // If the count down is over, write some text \n  if (distance < 0) {\n    clearInterval(x);\n    document.getElementById(\"demo\").innerHTML = \"EXPIRED\";\n  }\n}, 1000);\n  </script>\n</div>\n\n</body>\n</html>\n"
        },
        {
          "name": "schematics",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}