{
  "metadata": {
    "timestamp": 1736566121932,
    "page": 123,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "WebAssembly/wabt",
      "stars": 7008,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0224609375,
          "content": "BasedOnStyle: Chromium\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.1123046875,
          "content": "[flake8]\nignore =\n  E501, # line too long\n  W504  # line break after binary operator\nexclude = ./third_party ./out\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.3505859375,
          "content": "# This file contains a list of commits that are not likely what you\n# are looking for in a blame, such as mass reformatting or renaming.\n# You can set this file as a default ignore file for blame by running\n# the following command.\n#\n# $ git config blame.ignoreRevsFile .git-blame-ignore-revs\n\n# Clang-format codebase\ne59cf9369004a521814222afbc05ae6b59446cd5\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.857421875,
          "content": "* text=auto\n*.c text\n*.h text\n*.js text\n*.l text\n*.md text\n*.py text\n*.rst text\n*.sh text\n*.txt text\n*.y text\ndocs/demo/primer.css binary\ndocs/demo/libwabt.js binary\ndocs/demo/third_party/codemirror/codemirror.css binary\ndocs/demo/third_party/codemirror/codemirror.js binary\n\n# Mark these tests as binary so git doesn't change the line endings:\ntest/parse/bad-crlf.txt binary\ntest/parse/bad-string-eof.txt binary\ntest/regress/regress-31.txt binary\ntest/regress/bad-annotation* binary\ntest/regress/unterminated-annotation* binary\n\n# Highlight tests like .wast files when displayed on GitHub.\ntest/**/*.txt linguist-language=WebAssembly\n\n# Mark test-files as \"vendored\". This tells GitHub to exclude them when it\n# calculates the repository's languages summary, and preserves the current\n# classification as a C++ project. See https://git.io/vr2pO\ntest/**/*.txt linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0791015625,
          "content": "/bin\n/build\n/out\n/fuzz-out\n/emscripten\n*.pyc\n.idea/\n.vscode/\n/cmake-build-debug/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.7197265625,
          "content": "[submodule \"third_party/testsuite\"]\n\tpath = third_party/testsuite\n\turl = https://github.com/WebAssembly/testsuite\n[submodule \"third_party/gtest\"]\n\tpath = third_party/gtest\n\turl = https://github.com/google/googletest\n[submodule \"third_party/ply\"]\n\tpath = third_party/ply\n\turl = https://github.com/dabeaz/ply\n[submodule \"third_party/wasm-c-api\"]\n\tpath = third_party/wasm-c-api\n\turl = https://github.com/WebAssembly/wasm-c-api\n[submodule \"third_party/uvwasi\"]\n\tpath = third_party/uvwasi\n\turl = https://github.com/nodejs/uvwasi\n[submodule \"third_party/picosha2\"]\n\tpath = third_party/picosha2\n\turl = https://github.com/okdshin/PicoSHA2\n[submodule \"third_party/simde\"]\n\tpath = third_party/simde\n\turl = https://github.com/simd-everywhere/simde\n"
        },
        {
          "name": ".style.yapf",
          "type": "blob",
          "size": 0.0849609375,
          "content": "[style]\nsplit_before_named_assigns = False\nbased_on_style = chromium\ncolumn_limit = 79\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 26.8623046875,
          "content": "#\n# Copyright 2016 WebAssembly Community Group participants\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\ncmake_minimum_required(VERSION 3.16)\nproject(WABT LANGUAGES C CXX VERSION 1.0.36)\n\ninclude(GNUInstallDirs)\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\n# 10.13 doesn't support std::optional::value (becuase it depends on\n# std::bad_optional_acces).\n# See: https://github.com/WebAssembly/wabt/issues/2527\nset(CMAKE_OSX_DEPLOYMENT_TARGET \"10.14\" CACHE STRING \"Minimum OS X deployment version\")\n\n# Check if wabt is being used directly or via add_subdirectory, FetchContent, etc\nstring(COMPARE EQUAL \"${CMAKE_CURRENT_SOURCE_DIR}\" \"${CMAKE_SOURCE_DIR}\" PROJECT_IS_TOP_LEVEL)\n\n# By default use the project version as the version string\nset(WABT_VERSION_STRING \"${PROJECT_VERSION}\")\n\n# For git users, attempt to generate a more useful version string\nif (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/.git)\n  find_package(Git)\n  if (Git_FOUND)\n    execute_process(\n      COMMAND \"${GIT_EXECUTABLE}\" -C \"${WABT_SOURCE_DIR}\" describe --tags\n      RESULT_VARIABLE GIT_VERSION_RESULT\n      ERROR_VARIABLE GIT_VERSION_ERROR\n      ERROR_STRIP_TRAILING_WHITESPACE\n      OUTPUT_VARIABLE GIT_VERSION\n      OUTPUT_STRIP_TRAILING_WHITESPACE\n    )\n    if (GIT_VERSION_RESULT EQUAL 0)\n      # If we're actually on the tag for this version, don't add the commit description\n      if (NOT GIT_VERSION STREQUAL \"${WABT_VERSION_STRING}\")\n        string(APPEND WABT_VERSION_STRING \" (git~${GIT_VERSION})\")\n      endif ()\n    elseif (PROJECT_IS_TOP_LEVEL)\n      message(NOTICE \"git: ${GIT_VERSION_ERROR}\\n  ** Did you forget to run `git fetch --tags`?\")\n    endif ()\n  endif ()\nendif ()\n\noption(BUILD_TESTS \"Build GTest-based tests\" ON)\noption(USE_SYSTEM_GTEST \"Use system GTest, instead of building\" OFF)\noption(BUILD_TOOLS \"Build wabt commandline tools\" ON)\noption(BUILD_FUZZ_TOOLS \"Build tools that can repro fuzz bugs\" OFF)\noption(BUILD_LIBWASM \"Build libwasm\" ON)\noption(USE_ASAN \"Use address sanitizer\" OFF)\noption(USE_MSAN \"Use memory sanitizer\" OFF)\noption(USE_LSAN \"Use leak sanitizer\" OFF)\noption(USE_UBSAN \"Use undefined behavior sanitizer\" OFF)\noption(CODE_COVERAGE \"Build with code coverage enabled\" OFF)\noption(WITH_EXCEPTIONS \"Build with exceptions enabled\" OFF)\noption(WERROR \"Build with warnings as errors\" OFF)\noption(WABT_INSTALL_RULES \"Include WABT's install() rules\" \"${PROJECT_IS_TOP_LEVEL}\")\n# WASI support is still a work in progress.\n# Only a handful of syscalls are supported at this point.\noption(WITH_WASI \"Build WASI support via uvwasi\" OFF)\noption(USE_INTERNAL_SHA256 \"Use internal PicoSHA2 for SHA-256 support instead of OpenSSL libcrypto\" OFF)\n\nif (MSVC)\n  set(COMPILER_IS_CLANG 0)\n  set(COMPILER_IS_GNU 0)\n  set(COMPILER_IS_MSVC 1)\nelseif (CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  set(COMPILER_IS_CLANG 1)\n  set(COMPILER_IS_GNU 0)\n  set(COMPILER_IS_MSVC 0)\nelseif (CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n  set(COMPILER_IS_CLANG 0)\n  set(COMPILER_IS_GNU 1)\n  set(COMPILER_IS_MSVC 0)\nelseif (CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n  set(COMPILER_IS_CLANG 1)\n  set(COMPILER_IS_GNU 0)\n  set(COMPILER_IS_MSVC 0)\nelse ()\n  set(COMPILER_IS_CLANG 0)\n  set(COMPILER_IS_GNU 0)\n  set(COMPILER_IS_MSVC 0)\nendif ()\n\ninclude(CheckIncludeFile)\ninclude(CheckSymbolExists)\n\ncheck_include_file(\"alloca.h\" HAVE_ALLOCA_H)\ncheck_include_file(\"unistd.h\" HAVE_UNISTD_H)\ncheck_include_file(\"setjmp.h\" HAVE_SETJMP_H)\ncheck_symbol_exists(snprintf \"stdio.h\" HAVE_SNPRINTF)\ncheck_symbol_exists(strcasecmp \"strings.h\" HAVE_STRCASECMP)\n\nif (NOT USE_INTERNAL_SHA256)\n  find_package(OpenSSL QUIET)\n  if (OpenSSL_FOUND)\n    set(CMAKE_REQUIRED_INCLUDES ${OPENSSL_INCLUDE_DIR})\n    check_include_file(\"openssl/sha.h\" HAVE_OPENSSL_SHA_H)\n    if (HAVE_OPENSSL_SHA_H)\n      find_package_message(OpenSSL \"Using OpenSSL libcrypto for SHA-256\" \"${HAVE_OPENSSL_SHA_H}\")\n    endif()\n  endif()\nendif()\n\nif (WIN32)\n  if(${CMAKE_GENERATOR_PLATFORM} MATCHES \"ARM64\")\n    # https://discourse.cmake.org/t/visual-studio-error-unable-to-deploy-local-file-c-x64-release-zero-check/2072\n    # Target ZERO_CHECK blocks remote debugger of ARM64 in Visual Studio\n    set(CMAKE_SUPPRESS_REGENERATION ON)\n  endif()\n  check_symbol_exists(ENABLE_VIRTUAL_TERMINAL_PROCESSING \"windows.h\" HAVE_WIN32_VT100)\nendif ()\n\ninclude(CheckTypeSize)\ncheck_type_size(ssize_t SSIZE_T)\ncheck_type_size(size_t SIZEOF_SIZE_T)\n\ninclude(TestBigEndian)  # Note: deprecated in CMake 3.20\ntest_big_endian(WABT_BIG_ENDIAN)\n\nif (CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n  set(WABT_DEBUG 1)\nendif ()\n\nconfigure_file(src/config.h.in include/wabt/config.h @ONLY)\n\n\nif (COMPILER_IS_MSVC)\n  if (WERROR)\n    add_definitions(-WX)\n  endif ()\n\n  # disable warning C4018: signed/unsigned mismatch\n  # disable warning C4056, C4756: overflow in floating-point constant arithmetic\n  #   seems to not like float compare w/ HUGE_VALF; bug?\n  # disable warnings C4267 and C4244: conversion/truncation from larger to smaller type.\n  # disable warning C4800: implicit conversion from larger int to bool\n  add_definitions(-W3 -wd4018 -wd4056 -wd4756 -wd4267 -wd4244 -wd4800 -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS)\n\n  if (NOT WITH_EXCEPTIONS)\n    # disable exception use in C++ library\n    add_definitions(-D_HAS_EXCEPTIONS=0)\n  endif ()\n\n  # multi-core build.\n  add_definitions(\"/MP\")\n\nelse ()\n  if (WERROR)\n    add_definitions(-Werror)\n  endif ()\n\n  # disable -Wunused-parameter: this is really common when implementing\n  #   interfaces, etc.\n  # disable -Wpointer-arith: this is a GCC extension, and doesn't work in MSVC.\n  add_definitions(\n    -Wall -Wextra -Wno-unused-parameter -Wpointer-arith -Wuninitialized -Wimplicit-fallthrough\n  )\n\n  set(CMAKE_CXX_EXTENSIONS OFF)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wold-style-cast\")\n\n  if (NOT WITH_EXCEPTIONS)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-exceptions\")\n  endif ()\n\n  # Need to define __STDC_*_MACROS because C99 specifies that C++ shouldn't\n  # define format (e.g. PRIu64) or limit (e.g. UINT32_MAX) macros without the\n  # definition, and some libcs (e.g. glibc2.17 and earlier) follow that.\n  add_definitions(-D__STDC_LIMIT_MACROS=1 -D__STDC_FORMAT_MACROS=1)\n\n  if (MINGW OR CYGWIN)\n    # On MINGW, _POSIX_C_SOURCE is needed to ensure we use mingw printf\n    # instead of the VC runtime one.\n    add_definitions(-D_POSIX_C_SOURCE=200809L)\n  endif()\n\n  if (COMPILER_IS_GNU)\n    # disable -Wclobbered: it seems to be guessing incorrectly about a local\n    # variable being clobbered by longjmp.\n    add_definitions(-Wno-clobbered)\n  endif ()\n\n  # wasm doesn't allow for x87 floating point math\n  if (NOT EMSCRIPTEN)\n    check_symbol_exists(__i386__ \"\" TARGET_IS_X86_32)\n    check_symbol_exists(__SSE2_MATH__ \"\" HAVE_SSE2_MATH)\n\n    if (TARGET_IS_X86_32 AND NOT HAVE_SSE2_MATH)\n      if (COMPILER_IS_GNU OR COMPILER_IS_CLANG)\n        add_compile_options(-msse2 -mfpmath=sse)\n      else ()\n        message(\n          WARNING\n          \"Unknown compiler ${CMAKE_CXX_COMPILER_ID} appears to target x86-32 with x87 \"\n          \"math. If you want wasm2c to work in a spec-compliant way, please add flags to \"\n          \"use SSE2 math and set TARGET_IS_X86_32 and HAVE_SSE2_MATH appropriately at the \"\n          \"CMake command line.\"\n        )\n      endif ()\n    endif ()\n  endif ()\nendif ()\n\nset(USE_SANITIZER FALSE)\n\nfunction(sanitizer NAME FLAGS)\n  if (${NAME})\n    if (USE_SANITIZER)\n      message(FATAL_ERROR \"Only one sanitizer allowed\")\n    endif ()\n    set(USE_SANITIZER TRUE PARENT_SCOPE)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${FLAGS}\" PARENT_SCOPE)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${FLAGS}\" PARENT_SCOPE)\n    set(WASM2C_CFLAGS \"${WASM2C_CFLAGS} ${FLAGS}\" PARENT_SCOPE)\n  endif ()\nendfunction()\nsanitizer(USE_ASAN \"-fsanitize=address\")\nsanitizer(USE_MSAN \"-fsanitize=memory\")\nsanitizer(USE_LSAN \"-fsanitize=leak\")\n\nif (USE_UBSAN)\n  # -fno-sanitize-recover was deprecated, see if we are compiling with a newer\n  # clang that requires -fno-sanitize-recover=all.\n  set(UBSAN_BLACKLIST ${WABT_SOURCE_DIR}/ubsan.blacklist)\n  include(CheckCXXCompilerFlag)\n  check_cxx_compiler_flag(\"-fsanitize=undefined -fno-sanitize-recover -Wall -Werror\" HAS_UBSAN_RECOVER_BARE)\n  if (HAS_UBSAN_RECOVER_BARE)\n    sanitizer(USE_UBSAN \"-fsanitize=undefined -fno-sanitize-recover -fsanitize-blacklist=${UBSAN_BLACKLIST}\")\n  endif ()\n  check_cxx_compiler_flag(\"-fsanitize=undefined -fno-sanitize-recover=all -Wall -Werror\" HAS_UBSAN_RECOVER_ALL)\n  # If we already setup UBSAN recover bare, setting it up again here will be an error.\n  if (NOT USE_SANITIZER AND HAS_UBSAN_RECOVER_ALL)\n    sanitizer(USE_UBSAN \"-fsanitize=undefined -fno-sanitize-recover=all -fsanitize-blacklist=${UBSAN_BLACKLIST}\")\n  endif ()\n  if (NOT USE_SANITIZER)\n    message(FATAL_ERROR \"UBSAN is not supported\")\n  endif ()\nendif ()\n\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${WABT_SOURCE_DIR}/cmake)\n\n# CWriter code templates\nset(TEMPLATE_CMAKE ${WABT_SOURCE_DIR}/scripts/gen-wasm2c-templates.cmake)\n\nadd_custom_command(\n  OUTPUT gen-wasm2c-prebuilt\n\n  COMMAND ${CMAKE_COMMAND} -D out=\"${WABT_SOURCE_DIR}/src/prebuilt/wasm2c_header_top.cc\" -D in=\"${WABT_SOURCE_DIR}/src/template/wasm2c.top.h\" -D symbol=\"s_header_top\" -P ${TEMPLATE_CMAKE}\n  COMMAND ${CMAKE_COMMAND} -D out=\"${WABT_SOURCE_DIR}/src/prebuilt/wasm2c_header_bottom.cc\" -D in=\"${WABT_SOURCE_DIR}/src/template/wasm2c.bottom.h\" -D symbol=\"s_header_bottom\" -P ${TEMPLATE_CMAKE}\n  COMMAND ${CMAKE_COMMAND} -D out=\"${WABT_SOURCE_DIR}/src/prebuilt/wasm2c_source_includes.cc\" -D in=\"${WABT_SOURCE_DIR}/src/template/wasm2c.includes.c\" -D symbol=\"s_source_includes\" -P ${TEMPLATE_CMAKE}\n  COMMAND ${CMAKE_COMMAND} -D out=\"${WABT_SOURCE_DIR}/src/prebuilt/wasm2c_source_declarations.cc\" -D in=\"${WABT_SOURCE_DIR}/src/template/wasm2c.declarations.c\" -D symbol=\"s_source_declarations\" -P ${TEMPLATE_CMAKE}\n  COMMAND ${CMAKE_COMMAND} -D out=\"${WABT_SOURCE_DIR}/src/prebuilt/wasm2c_simd_source_declarations.cc\" -D in=\"${WABT_SOURCE_DIR}/src/template/wasm2c_simd.declarations.c\" -D symbol=\"s_simd_source_declarations\" -P ${TEMPLATE_CMAKE}\n  COMMAND ${CMAKE_COMMAND} -D out=\"${WABT_SOURCE_DIR}/src/prebuilt/wasm2c_atomicops_source_declarations.cc\" -D in=\"${WABT_SOURCE_DIR}/src/template/wasm2c_atomicops.declarations.c\" -D symbol=\"s_atomicops_source_declarations\" -P ${TEMPLATE_CMAKE}\n  COMMAND ${CMAKE_COMMAND} -E touch gen-wasm2c-prebuilt\n\n  DEPENDS ${WABT_SOURCE_DIR}/src/template/wasm2c.top.h\n  ${WABT_SOURCE_DIR}/src/template/wasm2c.bottom.h\n  ${WABT_SOURCE_DIR}/src/template/wasm2c.includes.c\n  ${WABT_SOURCE_DIR}/src/template/wasm2c.declarations.c\n  ${WABT_SOURCE_DIR}/src/template/wasm2c_simd.declarations.c\n  ${WABT_SOURCE_DIR}/src/template/wasm2c_atomicops.declarations.c\n)\n\nadd_custom_target(gen-wasm2c-prebuilt-target DEPENDS gen-wasm2c-prebuilt)\n\nset(CWRITER_TEMPLATE_SRC ${WABT_SOURCE_DIR}/src/prebuilt/wasm2c_header_top.cc\n                         ${WABT_SOURCE_DIR}/src/prebuilt/wasm2c_header_bottom.cc\n                         ${WABT_SOURCE_DIR}/src/prebuilt/wasm2c_source_includes.cc\n                         ${WABT_SOURCE_DIR}/src/prebuilt/wasm2c_source_declarations.cc\n                         ${WABT_SOURCE_DIR}/src/prebuilt/wasm2c_simd_source_declarations.cc\n                         ${WABT_SOURCE_DIR}/src/prebuilt/wasm2c_atomicops_source_declarations.cc)\n\nadd_custom_target(everything)\n\nset(WABT_LIBRARY_CC\n  src/apply-names.cc\n  src/binary-reader-ir.cc\n  src/binary-reader-logging.cc\n  src/binary-reader.cc\n  src/binary-writer-spec.cc\n  src/binary-writer.cc\n  src/binary.cc\n  src/binding-hash.cc\n  src/color.cc\n  src/common.cc\n  src/config.cc\n  src/config.h.in\n  src/decompiler.cc\n  src/error-formatter.cc\n  src/expr-visitor.cc\n  src/feature.cc\n  src/filenames.cc\n  src/generate-names.cc\n  src/ir-util.cc\n  src/ir.cc\n  src/leb128.cc\n  src/lexer-source-line-finder.cc\n  src/lexer-source.cc\n  src/literal.cc\n  src/opcode-code-table.c\n  src/opcode.cc\n  src/option-parser.cc\n  src/resolve-names.cc\n  src/sha256.cc\n  src/shared-validator.cc\n  src/stream.cc\n  src/token.cc\n  src/tracing.cc\n  src/type-checker.cc\n  src/utf8.cc\n  src/validator.cc\n  src/wast-lexer.cc\n  src/wast-parser.cc\n  src/wat-writer.cc\n  src/c-writer.cc\n  ${CWRITER_TEMPLATE_SRC}\n\n  # TODO(binji): Move this into its own library?\n  src/interp/binary-reader-interp.cc\n  src/interp/interp.cc\n  src/interp/interp-util.cc\n  src/interp/istream.cc\n)\n\nset(WABT_LIBRARY_H\n  ${WABT_BINARY_DIR}/include/wabt/config.h\n\n  include/wabt/apply-names.h\n  include/wabt/binary-reader-ir.h\n  include/wabt/binary-reader-logging.h\n  include/wabt/binary-reader.h\n  include/wabt/binary-writer-spec.h\n  include/wabt/binary-writer.h\n  include/wabt/binary.h\n  include/wabt/binding-hash.h\n  include/wabt/color.h\n  include/wabt/common.h\n  include/wabt/decompiler-ast.h\n  include/wabt/decompiler-ls.h\n  include/wabt/decompiler-naming.h\n  include/wabt/decompiler.h\n  include/wabt/error-formatter.h\n  include/wabt/expr-visitor.h\n  include/wabt/feature.h\n  include/wabt/filenames.h\n  include/wabt/generate-names.h\n  include/wabt/ir-util.h\n  include/wabt/ir.h\n  include/wabt/leb128.h\n  include/wabt/lexer-source-line-finder.h\n  include/wabt/lexer-source.h\n  include/wabt/literal.h\n  include/wabt/opcode-code-table.h\n  include/wabt/opcode.h\n  include/wabt/option-parser.h\n  include/wabt/resolve-names.h\n  include/wabt/sha256.h\n  include/wabt/shared-validator.h\n  include/wabt/stream.h\n  include/wabt/string-util.h\n  include/wabt/token.h\n  include/wabt/tracing.h\n  include/wabt/type-checker.h\n  include/wabt/type.h\n  include/wabt/utf8.h\n  include/wabt/validator.h\n  include/wabt/wast-lexer.h\n  include/wabt/wast-parser.h\n  include/wabt/wat-writer.h\n\n  # TODO(binji): Move this into its own library?\n  include/wabt/interp/binary-reader-interp.h\n  include/wabt/interp/interp-inl.h\n  include/wabt/interp/interp-math.h\n  include/wabt/interp/interp-util.h\n  include/wabt/interp/interp.h\n  include/wabt/interp/istream.h\n)\n\nset(WABT_LIBRARY_SRC ${WABT_LIBRARY_CC} ${WABT_LIBRARY_H})\n\nadd_library(wabt STATIC ${WABT_LIBRARY_SRC})\nadd_dependencies(wabt gen-wasm2c-prebuilt-target)\nadd_library(wabt::wabt ALIAS wabt)\n\nif (HAVE_OPENSSL_SHA_H)\n  target_link_libraries(wabt OpenSSL::Crypto)\nelse()\n  include_directories(\"${WABT_SOURCE_DIR}/third_party/picosha2\")\nendif()\n\ntarget_compile_features(wabt PUBLIC cxx_std_17)\ntarget_include_directories(\n  wabt\n  PUBLIC\n  \"$<BUILD_INTERFACE:${WABT_SOURCE_DIR}/include>\"\n  \"$<BUILD_INTERFACE:${WABT_BINARY_DIR}/include>\"\n)\n\nif (WABT_INSTALL_RULES)\n  install(\n    TARGETS wabt EXPORT wabt-targets\n    COMPONENT wabt-development\n    INCLUDES DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\"\n  )\n  install(\n    DIRECTORY \"${WABT_SOURCE_DIR}/include/\" \"${WABT_BINARY_DIR}/include/\"\n    DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\"\n    COMPONENT wabt-development\n  )\nendif ()\n\nif (HAVE_SETJMP_H)\n  set(WASM_RT_FILES \"wasm2c/wasm-rt-impl.h\" \"wasm2c/wasm-rt-impl.c\" \"wasm2c/wasm-rt-exceptions-impl.c\" \"wasm2c/wasm-rt-mem-impl.c\" \"wasm2c/wasm-rt-impl-tableops.inc\" \"wasm2c/wasm-rt-mem-impl-helper.inc\")\n\n  add_library(wasm-rt-impl STATIC ${WASM_RT_FILES})\n  target_link_libraries(wasm-rt-impl ${CMAKE_THREAD_LIBS_INIT})\n  add_library(wabt::wasm-rt-impl ALIAS wasm-rt-impl)\n  if (WABT_BIG_ENDIAN)\n    target_compile_definitions(wasm-rt-impl PUBLIC WABT_BIG_ENDIAN=1)\n  endif ()\n\n  if (WABT_INSTALL_RULES)\n    install(\n      TARGETS wasm-rt-impl\n      EXPORT wabt-targets\n      COMPONENT wabt-development\n      INCLUDES DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\"\n    )\n    install(\n      FILES \"wasm2c/wasm-rt.h\" \"wasm2c/wasm-rt-exceptions.h\"\n      TYPE INCLUDE\n      COMPONENT wabt-development\n    )\n    install(\n      FILES ${WASM_RT_FILES}\n      DESTINATION \"${CMAKE_INSTALL_DATADIR}/wabt/wasm2c\"\n      COMPONENT wabt-development\n    )\n  endif ()\nendif ()\n\nif (BUILD_FUZZ_TOOLS)\n  set(FUZZ_FLAGS \"-fsanitize=fuzzer,address\")\n  add_library(wabt-fuzz STATIC ${WABT_LIBRARY_SRC})\n  target_link_libraries(wabt-fuzz PUBLIC wabt)\n  set_target_properties(wabt-fuzz\n    PROPERTIES\n    COMPILE_FLAGS \"${FUZZ_FLAGS}\"\n  )\nendif ()\n\n# libwasm, which implenents the wasm C API\nif (BUILD_LIBWASM)\n  add_library(wasm SHARED ${WABT_LIBRARY_SRC} src/interp/interp-wasm-c-api.cc)\n  target_link_libraries(wasm PUBLIC wabt)\n  target_include_directories(wasm PUBLIC third_party/wasm-c-api/include)\n  if (COMPILER_IS_MSVC)\n    target_compile_definitions(wasm PRIVATE \"WASM_API_EXTERN=__declspec(dllexport)\")\n  else ()\n    target_compile_options(wasm PRIVATE $<$<COMPILE_LANGUAGE:CXX>:-Wno-old-style-cast>)\n    target_compile_definitions(wasm PRIVATE \"WASM_API_EXTERN=__attribute__((visibility(\\\"default\\\")))\")\n  endif ()\n  set_target_properties(wasm PROPERTIES CXX_VISIBILITY_PRESET hidden)\nendif ()\n\nif (CODE_COVERAGE)\n  add_definitions(\"-fprofile-arcs -ftest-coverage\")\n  if (COMPILER_IS_CLANG)\n    set(CMAKE_EXE_LINKER_FLAGS \"--coverage\")\n  else ()\n    link_libraries(gcov)\n  endif ()\nendif ()\n\ninclude(CMakeParseArguments)\nfunction(wabt_executable)\n  cmake_parse_arguments(EXE \"WITH_LIBM;FUZZ;INSTALL\" \"NAME\" \"SOURCES;LIBS\" ${ARGN})\n\n  # Always link libwabt.\n  if (EXE_FUZZ)\n    set(EXE_LIBS \"${EXE_LIBS};wabt-fuzz\")\n    set(EXTRA_LINK_FLAGS \"${FUZZ_FLAGS}\")\n  else ()\n    set(EXE_LIBS \"${EXE_LIBS};wabt\")\n  endif ()\n\n  # Optionally link libm.\n  if (EXE_WITH_LIBM AND (COMPILER_IS_CLANG OR COMPILER_IS_GNU))\n    set(EXE_LIBS \"${EXE_LIBS};m\")\n  endif ()\n\n  add_executable(${EXE_NAME} ${EXE_SOURCES})\n  add_dependencies(everything ${EXE_NAME})\n  target_link_libraries(${EXE_NAME} ${EXE_LIBS})\n\n  if (EMSCRIPTEN)\n    set(EXTRA_LINK_FLAGS\n      \"${EXTRA_LINK_FLAGS} -sNODERAWFS -Oz -sALLOW_MEMORY_GROWTH\"\n    )\n  endif ()\n\n  set_target_properties(${EXE_NAME}\n    PROPERTIES\n    LINK_FLAGS \"${EXTRA_LINK_FLAGS}\"\n  )\n\n  if (EXE_INSTALL)\n    list(APPEND WABT_EXECUTABLES ${EXE_NAME})\n    set(WABT_EXECUTABLES ${WABT_EXECUTABLES} PARENT_SCOPE)\n\n    add_custom_target(${EXE_NAME}-copy-to-bin ALL\n      COMMAND ${CMAKE_COMMAND} -E make_directory ${WABT_SOURCE_DIR}/bin\n      COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${EXE_NAME}> ${WABT_SOURCE_DIR}/bin\n      DEPENDS ${EXE_NAME}\n    )\n  endif ()\nendfunction()\n\nif (BUILD_TOOLS)\n  # wat2wasm\n  wabt_executable(\n    NAME wat2wasm\n    SOURCES src/tools/wat2wasm.cc\n    INSTALL\n  )\n\n  # wast2json\n  wabt_executable(\n    NAME wast2json\n    SOURCES src/tools/wast2json.cc\n    INSTALL\n  )\n\n  # wasm2wat\n  wabt_executable(\n    NAME wasm2wat\n    SOURCES src/tools/wasm2wat.cc\n    INSTALL\n  )\n\n  # wasm2c\n  wabt_executable(\n    NAME wasm2c\n    SOURCES src/tools/wasm2c.cc\n    INSTALL\n  )\n\n  # wasm-stats\n  wabt_executable(\n    NAME wasm-stats\n    SOURCES src/tools/wasm-stats.cc src/binary-reader-stats.cc\n    INSTALL\n  )\n\n  # wasm-objdump\n  wabt_executable(\n    NAME wasm-objdump\n    SOURCES src/tools/wasm-objdump.cc src/binary-reader-objdump.cc\n    INSTALL\n  )\n\n  if(WITH_WASI)\n    # uvwasi uses the deprecated FetchContent_Populate function, disable it to avoid build error\n    set(CMAKE_POLICY_DEFAULT_CMP0169_BACK ${CMAKE_POLICY_DEFAULT_CMP0169})\n    set(CMAKE_POLICY_DEFAULT_CMP0169 OLD)\n    add_subdirectory(\"third_party/uvwasi\" EXCLUDE_FROM_ALL)\n    set(CMAKE_POLICY_DEFAULT_CMP0169 ${CMAKE_POLICY_DEFAULT_CMP0169_BACK})\n    include_directories(third_party/uvwasi/include)\n    add_definitions(-DWITH_WASI)\n    set(INTERP_LIBS uvwasi_a)\n    set(EXTRA_INTERP_SRC src/interp/interp-wasi.cc)\n\n    if (COMPILER_IS_GNU)\n      target_compile_options(uv_a PRIVATE \"-Wno-sign-compare\")\n    elseif (COMPILER_IS_CLANG)\n      target_compile_options(uv_a PRIVATE \"-Wno-implicit-fallthrough\")\n    endif()\n  endif()\n\n  # wasm-interp\n\n  wabt_executable(\n    NAME wasm-interp\n    SOURCES src/tools/wasm-interp.cc ${EXTRA_INTERP_SRC}\n    LIBS ${INTERP_LIBS}\n    WITH_LIBM\n    INSTALL\n  )\n\n  # spectest-interp\n  wabt_executable(\n    NAME spectest-interp\n    SOURCES src/tools/spectest-interp.cc\n    WITH_LIBM\n    INSTALL\n  )\n\n  # wat-desugar\n  wabt_executable(\n    NAME wat-desugar\n    SOURCES src/tools/wat-desugar.cc\n    INSTALL\n  )\n\n  # wasm-validate\n  wabt_executable(\n    NAME wasm-validate\n    SOURCES src/tools/wasm-validate.cc\n    INSTALL\n  )\n\n  # wasm-strip\n  wabt_executable(\n    NAME wasm-strip\n    SOURCES src/tools/wasm-strip.cc\n    INSTALL\n  )\n\n  # wasm-decompile\n  wabt_executable(\n    NAME wasm-decompile\n    SOURCES src/tools/wasm-decompile.cc\n    INSTALL\n  )\n\n  if(BUILD_FUZZ_TOOLS)\n    # wasm2wat-fuzz\n    wabt_executable(\n      NAME wasm2wat-fuzz\n      SOURCES src/tools/wasm2wat-fuzz.cc\n      FUZZ\n      INSTALL\n    )\n  endif ()\nendif ()\n\nif (BUILD_TESTS)\n  if (CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    set(WASM2C_CFLAGS \"${WASM2C_CFLAGS} -g -O0\")\n  endif ()\n\n  if (WABT_BIG_ENDIAN)\n    set(WASM2C_CFLAGS \"${WASM2C_CFLAGS} -DWABT_BIG_ENDIAN=1\")\n  endif ()\n\n  if (DEFINED CMAKE_OSX_SYSROOT)\n    set(WASM2C_CFLAGS \"${WASM2C_CFLAGS} -isysroot ${CMAKE_OSX_SYSROOT}\")\n  endif ()\n\n  if (DEFINED ENV{WASM2C_CFLAGS})\n    set(WASM2C_CFLAGS \"${WASM2C_CFLAGS} $ENV{WASM2C_CFLAGS}\")\n  endif ()\n\n  set(THREADS_PREFER_PTHREAD_FLAG ON)\n  find_package(Threads REQUIRED)\n\n  # Python 3.5 is the version shipped in Ubuntu Xenial\n  find_package(Python3 3.5 REQUIRED COMPONENTS Interpreter)\n\n  if (NOT USE_SYSTEM_GTEST)\n    if (NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/third_party/gtest/googletest)\n      message(FATAL_ERROR \"Can't find third_party/gtest. Run git submodule update --init, or disable with CMake -DBUILD_TESTS=OFF.\")\n    endif ()\n\n    include_directories(\n      third_party/gtest/googletest\n      third_party/gtest/googletest/include\n    )\n\n    # gtest\n    add_library(gtest STATIC\n      third_party/gtest/googletest/src/gtest-all.cc\n    )\n\n    add_library(gtest_main STATIC\n      third_party/gtest/googletest/src/gtest_main.cc\n    )\n\n    if (COMPILER_IS_GNU)\n      target_compile_options(gtest PRIVATE \"-Wno-maybe-uninitialized\")\n    endif ()\n  endif ()\n\n  # hexfloat-test\n  set(HEXFLOAT_TEST_SRCS\n    src/literal.cc\n    src/test-hexfloat.cc\n  )\n  wabt_executable(\n    NAME hexfloat_test\n    SOURCES ${HEXFLOAT_TEST_SRCS}\n    LIBS gtest_main gtest ${CMAKE_THREAD_LIBS_INIT}\n  )\n\n  # wabt-unittests\n  set(UNITTESTS_SRCS\n    src/test-binary-reader.cc\n    src/test-interp.cc\n    src/test-intrusive-list.cc\n    src/test-literal.cc\n    src/test-option-parser.cc\n    src/test-filenames.cc\n    src/test-utf8.cc\n    src/test-wast-parser.cc\n  )\n  wabt_executable(\n    NAME wabt-unittests\n    SOURCES ${UNITTESTS_SRCS}\n    LIBS gtest_main gtest ${CMAKE_THREAD_LIBS_INIT}\n  )\n\n  # test running\n  set(RUN_TESTS_PY ${WABT_SOURCE_DIR}/test/run-tests.py)\n\n  add_custom_target(run-tests\n    COMMAND ${CMAKE_COMMAND} -E env WASM2C_CC=${CMAKE_C_COMPILER} WASM2C_CFLAGS=${WASM2C_CFLAGS} ${Python3_EXECUTABLE} ${RUN_TESTS_PY} --bindir $<TARGET_FILE_DIR:wat2wasm>\n    DEPENDS ${WABT_EXECUTABLES}\n    WORKING_DIRECTORY ${WABT_SOURCE_DIR}\n    USES_TERMINAL\n  )\n\n  add_custom_target(run-unittests\n    COMMAND $<TARGET_FILE:wabt-unittests>\n    DEPENDS wabt-unittests\n    WORKING_DIRECTORY ${WABT_SOURCE_DIR}\n    USES_TERMINAL\n  )\n\n  add_custom_target(run-c-api-tests\n    COMMAND ${Python3_EXECUTABLE} ${WABT_SOURCE_DIR}/test/run-c-api-examples.py --bindir $<TARGET_FILE_DIR:wat2wasm>\n    WORKING_DIRECTORY ${WABT_SOURCE_DIR}\n    USES_TERMINAL\n  )\n\n  add_custom_target(check DEPENDS run-unittests run-tests run-c-api-tests)\n\n  function(c_api_example NAME)\n    set(EXENAME wasm-c-api-${NAME})\n    add_executable(${EXENAME} third_party/wasm-c-api/example/${NAME}.c)\n    if (COMPILER_IS_MSVC)\n      set_target_properties(${EXENAME} PROPERTIES COMPILE_FLAGS \"-wd4311\")\n    else ()\n      set_target_properties(${EXENAME} PROPERTIES COMPILE_FLAGS \"-std=gnu11 -Wno-pointer-to-int-cast\")\n    endif ()\n\n    target_link_libraries(${EXENAME} wasm Threads::Threads)\n    add_custom_target(${EXENAME}-copy-to-bin ALL\n      COMMAND ${CMAKE_COMMAND} -E make_directory ${WABT_SOURCE_DIR}/bin\n      COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${EXENAME}> ${WABT_SOURCE_DIR}/bin/\n      COMMAND ${CMAKE_COMMAND} -E copy ${WABT_SOURCE_DIR}/third_party/wasm-c-api/example/${NAME}.wasm $<TARGET_FILE_DIR:${EXENAME}>/\n      COMMAND ${CMAKE_COMMAND} -E copy ${WABT_SOURCE_DIR}/third_party/wasm-c-api/example/${NAME}.wasm ${WABT_SOURCE_DIR}/bin/\n      DEPENDS ${EXENAME}\n    )\n    add_dependencies(run-c-api-tests ${EXENAME})\n  endfunction()\n\n  c_api_example(callback)\n  c_api_example(finalize)\n  c_api_example(global)\n  c_api_example(hello)\n  c_api_example(hostref)\n  c_api_example(multi)\n  c_api_example(memory)\n  c_api_example(reflect)\n  c_api_example(serialize)\n  c_api_example(start)\n  c_api_example(table)\n  c_api_example(trap)\n  if (CMAKE_USE_PTHREADS_INIT)\n    c_api_example(threads)\n  endif ()\nendif ()\n\n# install\nif (WABT_INSTALL_RULES AND (BUILD_TOOLS OR BUILD_TESTS))\n  install(\n    TARGETS ${WABT_EXECUTABLES}\n    COMPONENT wabt-runtime\n  )\n  if (UNIX)\n    install(\n      DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/man/\"\n      DESTINATION ${CMAKE_INSTALL_MANDIR}/man1\n      COMPONENT wabt-documentation\n      FILES_MATCHING PATTERN \"*.1\"\n    )\n  endif ()\nendif ()\n\nif (EMSCRIPTEN)\n  # flags for all emscripten builds\n\n  # exceptions are never needed\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-exceptions\")\n\n  # wabt.js\n\n  # just dump everything into one binary so we can reference it from JavaScript\n  add_definitions(-Wno-warn-absolute-paths)\n  add_executable(libwabtjs src/emscripten-helpers.cc)\n  add_dependencies(everything libwabtjs)\n  target_link_libraries(libwabtjs wabt)\n  set_target_properties(libwabtjs PROPERTIES OUTPUT_NAME libwabt)\n\n  set(WABT_POST_JS ${WABT_SOURCE_DIR}/src/wabt.post.js)\n  set(EMSCRIPTEN_EXPORTS ${WABT_SOURCE_DIR}/src/emscripten-exports.txt)\n\n  set(LIBWABT_LINK_FLAGS\n    --post-js ${WABT_POST_JS}\n    -sSINGLE_FILE\n    -sEXPORTED_FUNCTIONS=@${EMSCRIPTEN_EXPORTS}\n    -sRESERVED_FUNCTION_POINTERS=10\n    -sNO_EXIT_RUNTIME=1\n    -sALLOW_MEMORY_GROWTH=1\n    -sMODULARIZE=1\n    -sEXPORT_NAME=WabtModule\n    -sWASM=0\n    -sEXPORTED_RUNTIME_METHODS=writeAsciiToMemory\n    -Oz\n  )\n  string(REPLACE \";\" \" \" LIBWABT_LINK_FLAGS_STR \"${LIBWABT_LINK_FLAGS}\")\n\n  set_target_properties(libwabtjs\n    PROPERTIES\n    LINK_FLAGS \"${LIBWABT_LINK_FLAGS_STR}\"\n    LINK_DEPENDS \"${WABT_POST_JS};${EMSCRIPTEN_EXPORTS}\"\n  )\nendif ()\n\n# Create find_package configuration files\nif (WABT_INSTALL_RULES)\n  include(CMakePackageConfigHelpers)\n\n  set(WABT_INSTALL_CMAKEDIR \"${CMAKE_INSTALL_LIBDIR}/cmake/wabt\"\n      CACHE STRING \"Path to wabt CMake files\")\n\n  install(\n    EXPORT wabt-targets\n    DESTINATION \"${WABT_INSTALL_CMAKEDIR}\"\n    NAMESPACE wabt::\n    FILE wabt-targets.cmake\n    COMPONENT wabt-development\n  )\n\n  configure_package_config_file(\n    scripts/wabt-config.cmake.in\n    wabt-config.cmake\n    INSTALL_DESTINATION \"${WABT_INSTALL_CMAKEDIR}\"\n    NO_SET_AND_CHECK_MACRO\n  )\n\n  write_basic_package_version_file(\n    wabt-config-version.cmake COMPATIBILITY ExactVersion\n  )\n\n  install(\n    FILES\n    \"${CMAKE_CURRENT_BINARY_DIR}/wabt-config.cmake\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/wabt-config-version.cmake\"\n    DESTINATION \"${WABT_INSTALL_CMAKEDIR}\"\n    COMPONENT wabt-development\n  )\nendif ()\n"
        },
        {
          "name": "Contributing.md",
          "type": "blob",
          "size": 0.3369140625,
          "content": "# Contributing to WebAssembly\n\nInterested in participating? Please follow\n[the same contributing guidelines as the design repository][].\n\n  [the same contributing guidelines as the design repository]: https://github.com/WebAssembly/design/blob/master/Contributing.md\n\nAlso, please be sure to read [the README.md](README.md) for this repository.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 5.0390625,
          "content": "#\n# Copyright 2016 WebAssembly Community Group participants\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n.SUFFIXES:\n\nMAKEFILE_NAME := $(lastword $(MAKEFILE_LIST))\nROOT_DIR := $(dir $(abspath $(MAKEFILE_NAME)))\n\nUSE_NINJA ?= 1\nEMSCRIPTEN_DIR ?= $(dir $(shell which emcc))\nCMAKE_CMD ?= cmake\n\nDEFAULT_SUFFIX = clang-debug\n\nCOMPILERS := GCC GCC_I686 CLANG CLANG_I686 EMCC\nBUILD_TYPES := DEBUG RELEASE\nSANITIZERS := ASAN MSAN LSAN UBSAN FUZZ\nCONFIGS := NORMAL $(SANITIZERS) COV NO_TESTS\n\n# directory names\nGCC_DIR := gcc/\nGCC_I686_DIR := gcc-i686/\nCLANG_DIR := clang/\nCLANG_I686_DIR := clang-i686/\nEMCC_DIR := emscripten/\nDEBUG_DIR := Debug/\nRELEASE_DIR := Release/\nNORMAL_DIR :=\nASAN_DIR := asan/\nMSAN_DIR := msan/\nLSAN_DIR := lsan/\nUBSAN_DIR := ubsan/\nFUZZ_DIR := fuzz/\nCOV_DIR := cov/\nNO_TESTS_DIR := no-tests/\n\n# CMake flags\nGCC_FLAG := -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++\nGCC_I686_FLAG := -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ \\\n\t-DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32\nCLANG_FLAG := -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++\nCLANG_I686_FLAG := -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \\\n\t-DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32\nEMCC_FLAG := -DCMAKE_TOOLCHAIN_FILE=${EMSCRIPTEN_DIR}/cmake/Modules/Platform/Emscripten.cmake\nDEBUG_FLAG := -DCMAKE_BUILD_TYPE=Debug\nRELEASE_FLAG := -DCMAKE_BUILD_TYPE=Release\nNORMAL_FLAG :=\nASAN_FLAG := -DUSE_ASAN=ON\nMSAN_FLAG := -DUSE_MSAN=ON\nLSAN_FLAG := -DUSE_LSAN=ON\nUBSAN_FLAG := -DUSE_UBSAN=ON\nFUZZ_FLAG := -DBUILD_FUZZ_TOOLS=ON\nCOV_FLAG := -DCODE_COVERAGE=ON\nNO_TESTS_FLAG := -DBUILD_TESTS=OFF\n\n# make target prefixes\nGCC_PREFIX := gcc\nGCC_I686_PREFIX := gcc-i686\nCLANG_PREFIX := clang\nCLANG_I686_PREFIX := clang-i686\nEMCC_PREFIX := emscripten\nDEBUG_PREFIX := -debug\nRELEASE_PREFIX := -release\nNORMAL_PREFIX :=\nASAN_PREFIX := -asan\nMSAN_PREFIX := -msan\nLSAN_PREFIX := -lsan\nUBSAN_PREFIX := -ubsan\nFUZZ_PREFIX := -fuzz\nCOV_PREFIX := -cov\nNO_TESTS_PREFIX := -no-tests\n\nifeq ($(USE_NINJA),1)\nBUILD_CMD := ninja\nBUILD_FILE := build.ninja\nGENERATOR := Ninja\nelse\nBUILD_CMD := +$(MAKE) --no-print-directory\nBUILD_FILE := Makefile\nGENERATOR := \"Unix Makefiles\"\nendif\n\nCMAKE_DIR = out/$($(1)_DIR)$($(2)_DIR)$($(3)_DIR)\nBUILD_TARGET = $($(1)_PREFIX)$($(2)_PREFIX)$($(3)_PREFIX)\nINSTALL_TARGET = install-$($(1)_PREFIX)$($(2)_PREFIX)$($(3)_PREFIX)\nTEST_TARGET = test-$($(1)_PREFIX)$($(2)_PREFIX)$($(3)_PREFIX)\n\ndefine CMAKE\n$(call CMAKE_DIR,$(1),$(2),$(3)):\n\tmkdir -p $(call CMAKE_DIR,$(1),$(2),$(3))\n\n$(call CMAKE_DIR,$(1),$(2),$(3))$$(BUILD_FILE): | $(call CMAKE_DIR,$(1),$(2),$(3))\n\tcd $(call CMAKE_DIR,$(1),$(2),$(3)) && \\\n\t$$(CMAKE_CMD) -G $$(GENERATOR) $$(ROOT_DIR) $$($(1)_FLAG) $$($(2)_FLAG) $$($(3)_FLAG)\nendef\n\ndefine BUILD\n.PHONY: $(call BUILD_TARGET,$(1),$(2),$(3))\n$(call BUILD_TARGET,$(1),$(2),$(3)): $(call CMAKE_DIR,$(1),$(2),$(3))$$(BUILD_FILE)\n\t$$(BUILD_CMD) -C $(call CMAKE_DIR,$(1),$(2),$(3)) all\nendef\n\ndefine INSTALL\n.PHONY: $(call INSTALL_TARGET,$(1),$(2),$(3))\n$(call INSTALL_TARGET,$(1),$(2),$(3)): $(call CMAKE_DIR,$(1),$(2),$(3))$$(BUILD_FILE)\n\t$$(BUILD_CMD) -C $(call CMAKE_DIR,$(1),$(2),$(3)) install\nendef\n\ndefine TEST\n.PHONY: $(call TEST_TARGET,$(1),$(2),$(3))\n$(call TEST_TARGET,$(1),$(2),$(3)): $(call CMAKE_DIR,$(1),$(2),$(3))$$(BUILD_FILE)\n\t$$(BUILD_CMD) -C $(call CMAKE_DIR,$(1),$(2),$(3)) check\ntest-everything: $(CALL TEST_TARGET,$(1),$(2),$(3))\nendef\n\n.PHONY: all install test\nall: $(DEFAULT_SUFFIX)\ninstall: install-$(DEFAULT_SUFFIX)\ntest: test-$(DEFAULT_SUFFIX)\n\n.PHONY: clean\nclean:\n\trm -rf out\n\n.PHONY: test-everything\ntest-everything:\n\n.PHONY: update-gperf\nupdate-gperf: src/prebuilt/lexer-keywords.cc\n\nsrc/prebuilt/lexer-keywords.cc: src/lexer-keywords.txt\n\tgperf -m 50 -L C++ -N InWordSet -E -t -c --output-file=$@ $<\n\n.PHONY: update-wasm2c-fac\nupdate-wasm2c-fac:\n\tmake -C wasm2c/examples/fac\n\n.PHONY: demo\ndemo: emscripten-release\n\tcp out/emscripten/Release/libwabt.js docs/demo\n\n# running CMake\n$(foreach CONFIG,$(CONFIGS), \\\n\t$(foreach COMPILER,$(COMPILERS), \\\n\t\t$(foreach BUILD_TYPE,$(BUILD_TYPES), \\\n\t\t\t$(eval $(call CMAKE,$(COMPILER),$(BUILD_TYPE),$(CONFIG))))))\n\n# building\n$(foreach CONFIG,$(CONFIGS), \\\n\t$(foreach COMPILER,$(COMPILERS), \\\n\t\t$(foreach BUILD_TYPE,$(BUILD_TYPES), \\\n\t\t\t$(eval $(call BUILD,$(COMPILER),$(BUILD_TYPE),$(CONFIG))))))\n\n# installing\n$(foreach CONFIG,$(CONFIGS), \\\n\t$(foreach COMPILER,$(COMPILERS), \\\n\t\t$(foreach BUILD_TYPE,$(BUILD_TYPES), \\\n\t\t\t$(eval $(call INSTALL,$(COMPILER),$(BUILD_TYPE),$(CONFIG))))))\n\n# test running\n$(foreach CONFIG,$(CONFIGS), \\\n\t$(foreach COMPILER,$(COMPILERS), \\\n\t\t$(foreach BUILD_TYPE,$(BUILD_TYPES), \\\n\t\t\t$(eval $(call TEST,$(COMPILER),$(BUILD_TYPE),$(CONFIG))))))\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.9365234375,
          "content": "[![Github CI Status](https://github.com/WebAssembly/wabt/workflows/CI/badge.svg)](https://github.com/WebAssembly/wabt)\n\n# WABT: The WebAssembly Binary Toolkit\n\nWABT (we pronounce it \"wabbit\") is a suite of tools for WebAssembly, including:\n\n - [**wat2wasm**](https://webassembly.github.io/wabt/doc/wat2wasm.1.html): translate from [WebAssembly text format](https://webassembly.github.io/spec/core/text/index.html) to the [WebAssembly binary format](https://webassembly.github.io/spec/core/binary/index.html)\n - [**wasm2wat**](https://webassembly.github.io/wabt/doc/wasm2wat.1.html): the inverse of wat2wasm, translate from the binary format back to the text format (also known as a .wat)\n - [**wasm-objdump**](https://webassembly.github.io/wabt/doc/wasm-objdump.1.html): print information about a wasm binary. Similiar to objdump.\n - [**wasm-interp**](https://webassembly.github.io/wabt/doc/wasm-interp.1.html): decode and run a WebAssembly binary file using a stack-based interpreter\n - [**wasm-decompile**](https://webassembly.github.io/wabt/doc/wasm-decompile.1.html): decompile a wasm binary into readable C-like syntax.\n - [**wat-desugar**](https://webassembly.github.io/wabt/doc/wat-desugar.1.html): parse .wat text form as supported by the spec interpreter (s-expressions, flat syntax, or mixed) and print \"canonical\" flat format\n - [**wasm2c**](https://webassembly.github.io/wabt/doc/wasm2c.1.html): convert a WebAssembly binary file to a C source and header\n - [**wasm-strip**](https://webassembly.github.io/wabt/doc/wasm-strip.1.html): remove sections of a WebAssembly binary file\n - [**wasm-validate**](https://webassembly.github.io/wabt/doc/wasm-validate.1.html): validate a file in the WebAssembly binary format\n - [**wast2json**](https://webassembly.github.io/wabt/doc/wast2json.1.html): convert a file in the wasm spec test format to a JSON file and associated wasm binary files\n - [**wasm-stats**](https://webassembly.github.io/wabt/doc/wasm-stats.1.html): output stats for a module\n - [**spectest-interp**](https://webassembly.github.io/wabt/doc/spectest-interp.1.html): read a Spectest JSON file, and run its tests in the interpreter\n\nThese tools are intended for use in (or for development of) toolchains or other\nsystems that want to manipulate WebAssembly files. Unlike the WebAssembly spec\ninterpreter (which is written to be as simple, declarative and \"speccy\" as\npossible), they are written in C/C++ and designed for easier integration into\nother systems. Unlike [Binaryen](https://github.com/WebAssembly/binaryen) these\ntools do not aim to provide an optimization platform or a higher-level compiler\ntarget; instead they aim for full fidelity and compliance with the spec (e.g.\n1:1 round-trips with no changes to instructions).\n\n## Online Demos\n\nWabt has been compiled to JavaScript via emscripten. Some of the functionality is available in the following demos:\n\n- [index](https://webassembly.github.io/wabt/demo/)\n- [wat2wasm](https://webassembly.github.io/wabt/demo/wat2wasm/)\n- [wasm2wat](https://webassembly.github.io/wabt/demo/wasm2wat/)\n\n## Supported Proposals\n\n* Proposal: Name and link to the WebAssembly proposal repo\n* flag: Flag to pass to the tool to enable/disable support for the feature\n* default: Whether the feature is enabled by default\n* binary: Whether wabt can read/write the binary format\n* text: Whether wabt can read/write the text format\n* validate: Whether wabt can validate the syntax\n* interpret: Whether wabt can execute these operations in `wasm-interp` or `spectest-interp`\n* wasm2c: Whether wasm2c supports these operations\n\n| Proposal   | flag | default | binary | text | validate | interpret | wasm2c |\n| --------------------- | --------------------------- | - | - | - | - | - | - |\n| [exception handling][]| `--enable-exceptions`       |   | ✓ | ✓ | ✓ | ✓ | ✓ |\n| [mutable globals][]   | `--disable-mutable-globals` | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| [nontrapping float-to-int conversions][] | `--disable-saturating-float-to-int` | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| [sign extension][]    | `--disable-sign-extension`  | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| [simd][]              | `--disable-simd`            | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| [threads][]           | `--enable-threads`          |   | ✓ | ✓ | ✓ | ✓ |   |\n| [multi-value][]       | `--disable-multi-value`     | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| [tail-call][]         | `--enable-tail-call`        |   | ✓ | ✓ | ✓ | ✓ | ✓ |\n| [bulk memory][]       | `--disable-bulk-memory`     | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| [reference types][]   | `--disable-reference-types` | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| [annotations][]       | `--enable-annotations`      |   |   | ✓ |   |   |   |\n| [memory64][]          | `--enable-memory64`         |   | ✓ | ✓ | ✓ | ✓ | ✓ |\n| [multi-memory][]      | `--enable-multi-memory`     |   | ✓ | ✓ | ✓ | ✓ | ✓ |\n| [extended-const][]    | `--enable-extended-const`   |   | ✓ | ✓ | ✓ | ✓ | ✓ |\n| [relaxed-simd][]      | `--enable-relaxed-simd`     |   | ✓ | ✓ | ✓ | ✓ |   |\n| [custom-page-sizes][] | `--enable-custom-page-sizes`|   | ✓ | ✓ | ✓ | ✓ |   |\n\n[exception handling]: https://github.com/WebAssembly/exception-handling\n[mutable globals]: https://github.com/WebAssembly/mutable-global\n[nontrapping float-to-int conversions]: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n[sign extension]: https://github.com/WebAssembly/sign-extension-ops\n[simd]: https://github.com/WebAssembly/simd\n[threads]: https://github.com/WebAssembly/threads\n[multi-value]: https://github.com/WebAssembly/multi-value\n[tail-call]: https://github.com/WebAssembly/tail-call\n[bulk memory]: https://github.com/WebAssembly/bulk-memory-operations\n[reference types]: https://github.com/WebAssembly/reference-types\n[annotations]: https://github.com/WebAssembly/annotations\n[memory64]: https://github.com/WebAssembly/memory64\n[multi-memory]: https://github.com/WebAssembly/multi-memory\n[extended-const]: https://github.com/WebAssembly/extended-const\n[relaxed-simd]: https://github.com/WebAssembly/relaxed-simd\n[custom-page-sizes]: https://github.com/WebAssembly/custom-page-sizes\n\n## Cloning\n\nClone as normal, but don't forget to get the submodules as well:\n\n```console\n$ git clone --recursive https://github.com/WebAssembly/wabt\n$ cd wabt\n$ git submodule update --init\n```\n\nThis will fetch the testsuite and gtest repos, which are needed for some tests.\n\n## Building using CMake directly (Linux and macOS)\n\nYou'll need [CMake](https://cmake.org). You can then run CMake, the normal way:\n\n```console\n$ mkdir build\n$ cd build\n$ cmake ..\n$ cmake --build .\n```\n\nThis will produce build files using CMake's default build generator. Read the\nCMake documentation for more information.\n\n**NOTE**: You must create a separate directory for the build artifacts (e.g.\n`build` above).  Running `cmake` from the repo root directory will not work\nsince the build produces an executable called `wasm2c` which conflicts with the\n`wasm2c` directory.\n\n## Building using the top-level `Makefile` (Linux and macOS)\n\n**NOTE**: Under the hood, this uses `make` to run CMake, which then calls\n`ninja` to perform that actual build.  On some systems (typically macOS), this\ndoesn't build properly. If you see these errors, you can build using CMake\ndirectly as described above.\n\nYou'll need [CMake](https://cmake.org) and [Ninja](https://ninja-build.org). If\nyou just run `make`, it will run CMake for you, and put the result in\n`out/clang/Debug/` by default:\n\n> Note: If you are on macOS, you will need to use CMake version 3.2 or higher\n\n```console\n$ make\n```\n\nThis will build the default version of the tools: a debug build using the Clang\ncompiler.\n\nThere are many make targets available for other configurations as well. They\nare generated from every combination of a compiler, build type and\nconfiguration.\n\n - compilers: `gcc`, `clang`, `gcc-i686`, `emscripten`\n - build types: `debug`, `release`\n - configurations: empty, `asan`, `msan`, `lsan`, `ubsan`, `fuzz`, `no-tests`\n\nThey are combined with dashes, for example:\n\n```console\n$ make clang-debug\n$ make gcc-i686-release\n$ make clang-debug-lsan\n$ make gcc-debug-no-tests\n```\n\n## Building (Windows)\n\nYou'll need [CMake](https://cmake.org). You'll also need\n[Visual Studio](https://www.visualstudio.com/) (2015 or newer) or\n[MinGW](https://www.mingw-w64.org/).\n\n_Note: Visual Studio 2017 and later come with CMake (and the Ninja build system)\nout of the box, and should be on your PATH if you open a Developer Command prompt.\nSee <https://aka.ms/cmake> for more details._\n\nYou can run CMake from the command prompt, or use the CMake GUI tool. See\n[Running CMake](https://cmake.org/runningcmake/) for more information.\n\nWhen running from the commandline, create a new directory for the build\nartifacts, then run cmake from this directory:\n\n```console\n> cd [build dir]\n> cmake [wabt project root] -DCMAKE_BUILD_TYPE=[config] -DCMAKE_INSTALL_PREFIX=[install directory] -G [generator]\n```\n\nThe `[config]` parameter should be a CMake build type, typically `DEBUG` or `RELEASE`.\n\nThe `[generator]` parameter should be the type of project you want to generate,\nfor example `\"Visual Studio 14 2015\"`. You can see the list of available\ngenerators by running `cmake --help`.\n\nTo build the project, you can use Visual Studio, or you can tell CMake to do it:\n\n```console\n> cmake --build [wabt project root] --config [config] --target install\n```\n\nThis will build and install to the installation directory you provided above.\n\nSo, for example, if you want to build the debug configuration on Visual Studio 2015:\n\n```console\n> mkdir build\n> cd build\n> cmake .. -DCMAKE_BUILD_TYPE=DEBUG -DCMAKE_INSTALL_PREFIX=..\\ -G \"Visual Studio 14 2015\"\n> cmake --build . --config DEBUG --target install\n```\n\n## Adding new keywords to the lexer\n\nIf you want to add new keywords, you'll need to install\n[gperf](https://www.gnu.org/software/gperf/). Before you upload your PR, please\nrun `make update-gperf` to update the prebuilt C++ sources in `src/prebuilt/`.\n\n## Running wat2wasm\n\nSome examples:\n\n```sh\n# parse test.wat and write to .wasm binary file with the same name\n$ bin/wat2wasm test.wat\n\n# parse test.wat and write to binary file test.wasm\n$ bin/wat2wasm test.wat -o test.wasm\n\n# parse spec-test.wast, and write verbose output to stdout (including the\n# meaning of every byte)\n$ bin/wat2wasm spec-test.wast -v\n```\n\nYou can use `--help` to get additional help:\n\n```console\n$ bin/wat2wasm --help\n```\n\nOr try the [online demo](https://webassembly.github.io/wabt/demo/wat2wasm/).\n\n## Running wasm2wat\n\nSome examples:\n\n```sh\n# parse binary file test.wasm and write text file test.wat\n$ bin/wasm2wat test.wasm -o test.wat\n\n# parse test.wasm and write test.wat\n$ bin/wasm2wat test.wasm -o test.wat\n```\n\nYou can use `--help` to get additional help:\n\n```console\n$ bin/wasm2wat --help\n```\n\nOr try the [online demo](https://webassembly.github.io/wabt/demo/wasm2wat/).\n\n## Running wasm-interp\n\nSome examples:\n\n```sh\n# parse binary file test.wasm, and type-check it\n$ bin/wasm-interp test.wasm\n\n# parse test.wasm and run all its exported functions\n$ bin/wasm-interp test.wasm --run-all-exports\n\n# parse test.wasm, run the exported functions and trace the output\n$ bin/wasm-interp test.wasm --run-all-exports --trace\n\n# parse test.json and run the spec tests\n$ bin/wasm-interp test.json --spec\n\n# parse test.wasm and run all its exported functions, setting the value stack\n# size to 100 elements\n$ bin/wasm-interp test.wasm -V 100 --run-all-exports\n```\n\nYou can use `--help` to get additional help:\n\n```console\n$ bin/wasm-interp --help\n```\n\n## Running wast2json\n\nSee [wast2json.md](docs/wast2json.md).\n\n## Running wasm-decompile\n\nFor example:\n\n```sh\n# parse binary file test.wasm and write text file test.dcmp\n$ bin/wasm-decompile test.wasm -o test.dcmp\n```\n\nYou can use `--help` to get additional help:\n\n```console\n$ bin/wasm-decompile --help\n```\n\nSee [decompiler.md](docs/decompiler.md) for more information on the language\nbeing generated.\n\n## Running wasm2c\n\nSee [wasm2c.md](wasm2c/README.md)\n\n## Running the test suite\n\nSee [test/README.md](test/README.md).\n\n## Sanitizers\n\nTo build with the [LLVM sanitizers](https://github.com/google/sanitizers),\nappend the sanitizer name to the target:\n\n```console\n$ make clang-debug-asan\n$ make clang-debug-msan\n$ make clang-debug-lsan\n$ make clang-debug-ubsan\n```\n\nThere are configurations for the Address Sanitizer (ASAN), Memory Sanitizer\n(MSAN), Leak Sanitizer (LSAN) and Undefined Behavior Sanitizer (UBSAN). You can\nread about the behaviors of the sanitizers in the link above, but essentially\nthe Address Sanitizer finds invalid memory accesses (use after free, access\nout-of-bounds, etc.), Memory Sanitizer finds uses of uninitialized memory,\nthe Leak Sanitizer finds memory leaks, and the Undefined Behavior Sanitizer\nfinds undefined behavior (surprise!).\n\nTypically, you'll just want to run all the tests for a given sanitizer:\n\n```console\n$ make test-asan\n```\n\nYou can also run the tests for a release build:\n\n```console\n$ make test-clang-release-asan\n...\n```\n\nThe GitHub actions bots run all of these tests (and more). Before you land a change,\nyou should run them too. One easy way is to use the `test-everything` target:\n\n```console\n$ make test-everything\n```\n\n## Fuzzing\n\nTo build using the [LLVM fuzzer support](https://llvm.org/docs/LibFuzzer.html),\nappend `fuzz` to the target:\n\n```console\n$ make clang-debug-fuzz\n```\n\nThis will produce a `wasm2wat_fuzz` binary. It can be used to fuzz the binary\nreader, as well as reproduce fuzzer errors found by\n[oss-fuzz](https://github.com/google/oss-fuzz/tree/master/projects/wabt).\n\n```console\n$ out/clang/Debug/fuzz/wasm2wat_fuzz ...\n```\n\nSee the [libFuzzer documentation](https://llvm.org/docs/LibFuzzer.html) for\nmore information about how to use this tool.\n\n## Installing prebuilt binaries\n\nWabt is available on many platforms as prepackaged binaries. For example, if\nyou use Homebrew you can use:\n```sh\nbrew install wabt\n```\n\nAnd you use an apt-based linux distribution you can use:\n```sh\nsudo apt install wabt\n```\n\nYou can also download prebuilt binaries for many platforms directly from the\ngithub releases page.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.5966796875,
          "content": "# Security Policy\n\nWABT is maintained by volunteers on a reasonable-effort basis. If you\nhave discovered a security vulnerability, please open a GitHub issue\nto report it. In the future, we may move to a system of private\nreporting of security issues. Please submit your report by filling out\n[this form](https://github.com/WebAssembly/wabt/issues/new).\n\nPlease provide the following information in your report:\n\n- A description of the vulnerability and its impact\n- How to reproduce the issue\n- Which WABT tools or library functions are affected\n- Which WebAssembly features (`--enable` flags) must be enabled\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz-in",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "ubsan.blacklist",
          "type": "blob",
          "size": 0.396484375,
          "content": "# Work around libstdc++ bug: https://llvm.org/bugs/show_bug.cgi?id=18156\n# Also see: http://lists.llvm.org/pipermail/cfe-dev/2015-January/040945.html\nsrc:*/ios_base.h\n\n# Work around another libstdc++ bug:\n# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=60734\nsrc:*/stl_tree.h\n\n# Work around for libstdc++ 4.8 bug:\n# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=59829\nsrc:*/stl_vector.h\nsrc:*/stl_iterator.h\n"
        },
        {
          "name": "wasm2c",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}