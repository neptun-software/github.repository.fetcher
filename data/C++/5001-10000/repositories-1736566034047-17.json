{
  "metadata": {
    "timestamp": 1736566034047,
    "page": 17,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rr-debugger/rr",
      "stars": 9261,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".android",
          "type": "tree",
          "content": null
        },
        {
          "name": ".buildkite",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.357421875,
          "content": "# BasedOnStyle:  Mozilla\nAccessModifierOffset: -2\nConstructorInitializerIndentWidth: 4\nAlignEscapedNewlinesLeft: false\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakTemplateDeclarations: false\nAlwaysBreakBeforeMultilineStrings: false\nBreakBeforeBinaryOperators: false\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBinPackParameters: true\nColumnLimit:     80\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nDerivePointerBinding: false\nExperimentalAutoDetectBinPacking: false\nIndentCaseLabels: true\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCSpaceBeforeProtocolList: false\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 60\nPenaltyBreakString: 1000\nPenaltyBreakFirstLessLess: 120\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerBindsToType: true\nSpacesBeforeTrailingComments: 1\nCpp11BracedListStyle: false\nStandard:        Cpp11\nIndentWidth:     2\nTabWidth:        8\nUseTab:          Never\nBreakBeforeBraces: Attach\nIndentFunctionDeclarationAfterType: false\nSpacesInParentheses: false\nSpacesInAngles:  false\nSpaceInEmptyParentheses: false\nSpacesInCStyleCastParentheses: false\nSpaceAfterControlStatementKeyword: true\nSpaceBeforeAssignmentOperators: true\nContinuationIndentWidth: 4\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.724609375,
          "content": "*~\n.cache\n.cproject\nCMakeCache.txt\nCMakeFiles/\ncmake_install.cmake\nCPackConfig.cmake\nCPackSourceConfig.cmake\n_CPack_Packages/\nCTestTestfile.cmake\ncompile_commands.json\nDebug\nbin_dir\nsource_dir\ndist/\ninstall_manifest.txt\nMakefile\nProfile\nobj/\n.project\n.vscode/\n*.log\n*.orig\n*.rej\n*.pyc\n*.record\n*.replay\n.settings/\nTesting/\n.idea/\n.*.swp\n*generated\nbuild/\nbin/\nlib/\nshare/\nlibbrotli*\nextra_version_string.h\ngit_revision.h\nthird-party/zen-pmu-workaround/.*\nthird-party/zen-pmu-workaround/*.ko\nthird-party/zen-pmu-workaround/*.o\nthird-party/zen-pmu-workaround/*.mod\nthird-party/zen-pmu-workaround/*.mod.c\nthird-party/zen-pmu-workaround/Module.symvers\nthird-party/zen-pmu-workaround/modules.order\nrr_trace.capnp.*\ntest32.c\nsrc/preload/rr_page.ld\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 66.8642578125,
          "content": "# *-* Mode: cmake; *-*\n\ncmake_minimum_required(VERSION 3.5)\nproject(rr C CXX ASM)\n\n# \"Do not add flags to export symbols from executables without the ENABLE_EXPORTS target property.\"\n# This avoids linking executables with -rdynamic. -rdynamic has been observed\n# to cause rr_exec_stub to be linked with the dynamic linker with some\n# version(s) of clang (but linked to an incorrect file name, causing\n# exec of rr_exec_stub to fail).\nif(POLICY CMP0065)\n  cmake_policy(SET CMP0065 NEW)\nendif()\n\n# We should switch to using FindPython3, but that requires CMake 3.12.\n# We'll switch later.\nif(POLICY CMP0148)\n  cmake_policy(SET CMP0148 OLD)\nendif()\n\n# On single configuration generators, make Debug the default configuration\nif(NOT CMAKE_CONFIGURATION_TYPES)\n  if(NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE STRING \"Whether to build in `Debug` or `Release` mode.\" FORCE)\n  endif()\nendif()\n\noption(INSTALL_TESTSUITE \"Install the testsuite\")\noption(force32bit \"Force a 32-bit rr build, rather than both 64 and 32-bit. rr will only be able to record and replay 32-bit processes.\")\noption(disable32bit \"On a 64-bit platform, avoid requiring a 32-bit cross-compilation toolchain by not building 32-bit components. rr will be able to record 32-bit processes but not replay them.\")\noption(staticlibs \"Force usage of static linkage for non-standard libraries like capnproto\")\noption(bpf \"Enable bpf acceleration\")\noption(asan \"Build with address sanitizer enabled.\")\noption(intel_pt_decoding \"Build with Intel PT decoding enabled.\")\noption(strip \"Strip debug info from rr binary\")\n\nenable_testing()\nset(BUILD_SHARED_LIBS ON)\n\nset(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib/rr)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nset(BUILD_TESTS ON CACHE BOOL \"Build tests\")\nset(WILL_RUN_TESTS ${BUILD_TESTS} CACHE BOOL \"Run tests\")\n\n# CAREFUL!  \"-\" is an invalid character in RPM package names, while\n# debian is happy with it.  However, \"_\" is illegal in debs, while RPM\n# is cool with it.  Sigh.\nset(rr_VERSION_MAJOR 5)\nset(rr_VERSION_MINOR 8)\nset(rr_VERSION_PATCH 0)\n\nif(ANDROID)\n  find_package(CapnProto REQUIRED)\nendif()\n\nadd_definitions(-DRR_VERSION=\"${rr_VERSION_MAJOR}.${rr_VERSION_MINOR}.${rr_VERSION_PATCH}\")\n\nexecute_process(\n  COMMAND git rev-parse HEAD\n  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n  OUTPUT_VARIABLE GIT_REVISION\n  OUTPUT_STRIP_TRAILING_WHITESPACE\n)\nconfigure_file(\n  ${CMAKE_SOURCE_DIR}/src/git_revision.h.in\n  ${CMAKE_BINARY_DIR}/git_revision.h\n)\nconfigure_file(\n  ${CMAKE_SOURCE_DIR}/src/extra_version_string.h.in\n  ${CMAKE_BINARY_DIR}/extra_version_string.h\n)\n\nset(FLAGS_COMMON \"-D__USE_LARGEFILE64 -pthread\")\nset(supports32bit true)\nset(x86ish false)\nset(has_syscallbuf false)\nif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"aarch64\")\n  set(has_syscallbuf true)\n  set(supports32bit false)\n  set(FLAGS_COMMON \"${FLAGS_COMMON} -march=armv8.3-a -moutline-atomics\")\n  set(PRELOAD_LIBRARY_PAGE_SIZE 65536)\n  set(VDSO_NAME \"LINUX_2.6.39\")\n  set(VDSO_SYMBOLS \"__kernel_clock_getres; __kernel_rt_sigreturn; __kernel_gettimeofday; __kernel_clock_gettime;\")\nelseif(${CMAKE_SYSTEM_PROCESSOR} MATCHES i386|i686|x86|x86_64)\n  set(x86ish true)\n  set(has_syscallbuf true)\n  set(FLAGS_COMMON \"${FLAGS_COMMON} -msse2 -D__MMX__ -D__SSE__ -D__SSE2__\")\n  set(PRELOAD_LIBRARY_PAGE_SIZE 4096)\n  set(VDSO_NAME \"LINUX_2.6\")\n  set(VDSO_SYMBOLS \"gettimeofday; clock_gettime; __vdso_gettimeofday; __vdso_clock_getres; __vdso_time; __vdso_clock_gettime; __vdso_getcpu;\")\nelse()\n  message(FATAL_ERROR \"The architecture \" ${CMAKE_SYSTEM_PROCESSOR} \" is not yet supported\")\nendif()\nconfigure_file(src/preload/rr_page.ld.in src/preload/rr_page.ld @ONLY)\n\ninclude(CheckCCompilerFlag)\nCHECK_C_COMPILER_FLAG(\"-fmacro-prefix-map=foo=bar\" SUPPORTS_MACRO_PREFIX_MAP)\nif (SUPPORTS_MACRO_PREFIX_MAP)\n  set(FLAGS_COMMON \"${FLAGS_COMMON} -fmacro-prefix-map=${CMAKE_SOURCE_DIR}/=\")\nendif()\n\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${FLAGS_COMMON} -Wstrict-prototypes -std=gnu11\")\n# Define __STDC_LIMIT_MACROS so |#include <stdint.h>| works as expected.\n# Define __STDC_FORMAT_MACROS so |#include <inttypes.h>| works as expected.\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${FLAGS_COMMON} -D__STDC_LIMIT_MACROS -D__STDC_FORMAT_MACROS -std=c++17\")\n\n# We support three build types:\n# DEBUG: suitable for debugging rr\n# RELEASE: suitable for using rr in production (but keeps rr debuginfo)\n# OTHER: suitable for using rr in production, but honouring distro/user opt/debug settings\n# (which we assume are suitable for production use)\n\n# Base settings for debug and release/unspecified builds.\n# Use -Werror for debug builds because we assume a developer is building, not a user.\nset(RR_FLAGS_DEBUG \"-Wall -Wextra -DDEBUG -UNDEBUG\")\nset(RR_FLAGS_RELEASE \"-Wall -Wextra -UDEBUG -DNDEBUG\")\n\n# The following settings are the defaults for the OTHER build type.\n# Flags used to build the preload library. MUST have debuginfo enabled. SHOULD be optimized.\n# LTO breaks us by moving code around.\nset(PRELOAD_COMPILE_FLAGS \"${RR_FLAGS_RELEASE} -fno-stack-protector -g3 -U_FORTIFY_SOURCE -fno-lto\")\nset(PRELOAD_LINK_FLAGS \"-nostartfiles -fno-lto\")\n# Flags used to build Brotli. SHOULD be optimized. MUST NOT error on warnings.\nset(BROTLI_COMPILE_FLAGS ${RR_FLAGS_RELEASE})\n# Flags used to build tests. MUST have -DDEBUG and debuginfo enabled, MUST NOT be optimized.\nset(RR_TEST_FLAGS \"${RR_FLAGS_DEBUG} -g3 -O0\")\n# Flags used to build other files. Entirely build-type-dependent.\nset(RR_FLAGS ${RR_FLAGS_RELEASE})\n\n# Now override for build type.\nstring(TOLOWER ${CMAKE_BUILD_TYPE} LOWERCASE_CMAKE_BUILD_TYPE)\nif(LOWERCASE_CMAKE_BUILD_TYPE STREQUAL \"debug\")\n  set(PRELOAD_COMPILE_FLAGS \"${PRELOAD_COMPILE_FLAGS} -O2 -Werror\")\n  set(BROTLI_COMPILE_FLAGS \"${RR_FLAGS_RELEASE} -O2\")\n  set(RR_TEST_FLAGS \"${RR_TEST_FLAGS} -Werror\")\n  set(RR_FLAGS \"${RR_FLAGS_DEBUG} -g3 -Werror\")\nelseif(LOWERCASE_CMAKE_BUILD_TYPE STREQUAL \"release\")\n  # CMake itself will add optimization flags\n  set(RR_FLAGS \"${RR_FLAGS_RELEASE} -g3 -flto\")\nendif()\n\nset(LINKER_FLAGS \"\")\nif(CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n  # Gcc generates bogus R_386_GOTOFF relocations in .debug_info which\n  # lld 9 rejects\n  set(LINKER_FLAGS \"-fuse-ld=bfd\")\nendif()\n\nif(CMAKE_C_COMPILER_ID STREQUAL \"Clang\")\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-unused-command-line-argument\")\nendif()\nif(CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-unused-command-line-argument\")\nendif()\n# -fno-integrated-as tells Clang to use whatever \"as\" happens to be. For an\n# Android build that will end up being whatever /usr/bin/as is, and whatever it\n# is, it's the wrong assembler for Android, because Android only supports the\n# Clang assembler.\nif (CMAKE_ASM_COMPILER_ID STREQUAL \"Clang\" AND NOT ANDROID)\n  set(CMAKE_ASM_FLAGS \"${CMAKE_ASM_FLAGS} -fno-integrated-as\")\nendif()\n\nif(force32bit)\n  set(rr_32BIT true)\n  set(rr_64BIT false)\n  set(rr_MBITNESS_OPTION -m32)\nelse()\n  if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n    if(disable32bit OR NOT supports32bit)\n      set(rr_32BIT false)\n    else()\n      set(rr_32BIT true)\n    endif()\n    set(rr_64BIT true)\n  else()\n    set(rr_32BIT true)\n    set(rr_64BIT false)\n  endif()\n  set(rr_MBITNESS_OPTION)\nendif()\n\n# Check that compiling 32-bit code on a 64-bit target works, if required.\nif(CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL \"x86_64\" AND rr_32BIT)\n  # try_compile won't accept LINK_FLAGS, so do this manually.\n  file(WRITE \"${CMAKE_BINARY_DIR}/test32.c\" \"int main() { return 0; }\")\n  execute_process(COMMAND ${CMAKE_C_COMPILER} -o ${CMAKE_BINARY_DIR}/test32 ${CMAKE_BINARY_DIR}/test32.c -m32\n                  RESULT_VARIABLE COMPILER_32BIT_RESULT)\n  if(NOT (COMPILER_32BIT_RESULT EQUAL 0))\n    message(FATAL_ERROR \"Your toolchain doesn't support 32-bit cross-compilation. Install the required packages or pass -Ddisable32bit=ON to cmake.\")\n  endif()\nendif()\n\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${rr_MBITNESS_OPTION}\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${rr_MBITNESS_OPTION}\")\nset(CMAKE_ASM_FLAGS \"${CMAKE_ASM_FLAGS} ${rr_MBITNESS_OPTION}\")\n\n# If SKIP_PKGCONFIG is set then ${PKG}_CFLAGS and ${PKG}_LDFLAGS must be\n# provided as well.\nif(NOT SKIP_PKGCONFIG)\n  find_package(PkgConfig REQUIRED)\n\n  # If we're cross-compiling a 32-bit rr build on a 64-bit host we need\n  # to ensure we're looking for the right libraries.\n  # This has been tested on Ubuntu and Fedora.\n  if(CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL \"x86_64\" AND NOT rr_64BIT)\n    set(LIBDIR32_CANDIDATES\n      /usr/lib/i386-linux-gnu/pkgconfig/\n      /usr/lib/pkgconfig/\n    )\n    foreach(libdir ${LIBDIR32_CANDIDATES})\n      if(IS_DIRECTORY ${libdir})\n        set(ENV{PKG_CONFIG_LIBDIR} ${libdir})\n        break()\n      endif()\n    endforeach(libdir)\n    if(NOT DEFINED ENV{PKG_CONFIG_LIBDIR})\n      message(FATAL_ERROR \"Couldn't find a suitable 32-bit pkgconfig lib dir. You probably need to install a 32-bit pkgconfig package (pkgconfig.i686 for Fedora or pkg-config:i386 for Ubuntu\")\n    endif()\n  endif()\nendif()\n\nfind_program(CAPNP capnp)\nif(${CAPNP} STREQUAL \"CAPNP-NOTFOUND\")\n  message(FATAL_ERROR \"Can't find 'capnp' command; install Capnproto packages? https://github.com/rr-debugger/rr/wiki/Building-And-Installing#tldr\")\nendif()\n\nset(REQUIRED_LIBS\n  capnp\n# zlib is required to handle ELF compression\n  zlib\n)\n\nif(NOT ANDROID)\n  set(REQUIRED_LIBS\n    ${REQUIRED_LIBS}\n    # zstd is required to handle ELF compression, but isn't available on Android.\n    libzstd\n  )\n  set(ZSTD 1)\n  add_definitions(-DZSTD=1)\nendif()\n\nif(bpf)\n  add_definitions(-DBPF=1)\n  set(REQUIRED_LIBS\n    ${REQUIRED_LIBS}\n    libbpf\n  )\nendif(bpf)\n\nforeach(required_lib ${REQUIRED_LIBS})\n  string(TOUPPER ${required_lib} PKG)\n  if(NOT SKIP_PKGCONFIG)\n    pkg_check_modules(${PKG} REQUIRED ${required_lib})\n  endif()\n  if(staticlibs)\n    string(REPLACE \";\" \" \" ${PKG}_STATIC_CFLAGS \"${${PKG}_STATIC_CFLAGS}\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${${PKG}_STATIC_CFLAGS}\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${${PKG}_STATIC_CFLAGS}\")\n  else()\n    string(REPLACE \";\" \" \" ${PKG}_CFLAGS \"${${PKG}_CFLAGS}\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${${PKG}_CFLAGS}\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${${PKG}_CFLAGS}\")\n  endif()\nendforeach(required_lib)\n\n# ==== brotli ====\nset(BROTLI_FILES\n  third-party/brotli/common/constants.c\n  third-party/brotli/common/context.c\n  third-party/brotli/common/dictionary.c\n  third-party/brotli/common/platform.c\n  third-party/brotli/common/shared_dictionary_internal.h\n  third-party/brotli/common/shared_dictionary.c\n  third-party/brotli/common/transform.c\n  third-party/brotli/dec/bit_reader.c\n  third-party/brotli/dec/decode.c\n  third-party/brotli/dec/huffman.c\n  third-party/brotli/dec/state.c\n  third-party/brotli/enc/backward_references.c\n  third-party/brotli/enc/backward_references.h\n  third-party/brotli/enc/backward_references_hq.c\n  third-party/brotli/enc/backward_references_hq.h\n  third-party/brotli/enc/backward_references_inc.h\n  third-party/brotli/enc/bit_cost.c\n  third-party/brotli/enc/bit_cost.h\n  third-party/brotli/enc/bit_cost_inc.h\n  third-party/brotli/enc/block_encoder_inc.h\n  third-party/brotli/enc/block_splitter.c\n  third-party/brotli/enc/block_splitter.h\n  third-party/brotli/enc/block_splitter_inc.h\n  third-party/brotli/enc/brotli_bit_stream.c\n  third-party/brotli/enc/brotli_bit_stream.h\n  third-party/brotli/enc/command.c\n  third-party/brotli/enc/cluster.c\n  third-party/brotli/enc/cluster.h\n  third-party/brotli/enc/cluster_inc.h\n  third-party/brotli/enc/command.h\n  third-party/brotli/enc/compress_fragment.c\n  third-party/brotli/enc/compress_fragment.h\n  third-party/brotli/enc/compound_dictionary.c\n  third-party/brotli/enc/compound_dictionary.h\n  third-party/brotli/enc/compress_fragment_two_pass.c\n  third-party/brotli/enc/compress_fragment_two_pass.h\n  third-party/brotli/enc/dictionary_hash.c\n  third-party/brotli/enc/dictionary_hash.h\n  third-party/brotli/enc/encode.c\n  third-party/brotli/enc/encoder_dict.c\n  third-party/brotli/enc/entropy_encode.c\n  third-party/brotli/enc/entropy_encode.h\n  third-party/brotli/enc/entropy_encode_static.h\n  third-party/brotli/enc/fast_log.c\n  third-party/brotli/enc/fast_log.h\n  third-party/brotli/enc/find_match_length.h\n  third-party/brotli/enc/hash_forgetful_chain_inc.h\n  third-party/brotli/enc/hash.h\n  third-party/brotli/enc/hash_longest_match64_inc.h\n  third-party/brotli/enc/hash_longest_match_inc.h\n  third-party/brotli/enc/hash_longest_match_quickly_inc.h\n  third-party/brotli/enc/hash_to_binary_tree_inc.h\n  third-party/brotli/enc/histogram.c\n  third-party/brotli/enc/histogram.h\n  third-party/brotli/enc/histogram_inc.h\n  third-party/brotli/enc/literal_cost.c\n  third-party/brotli/enc/literal_cost.h\n  third-party/brotli/enc/memory.c\n  third-party/brotli/enc/memory.h\n  third-party/brotli/enc/metablock.c\n  third-party/brotli/enc/metablock.h\n  third-party/brotli/enc/metablock_inc.h\n  third-party/brotli/enc/prefix.h\n  third-party/brotli/enc/quality.h\n  third-party/brotli/enc/ringbuffer.h\n  third-party/brotli/enc/state.h\n  third-party/brotli/enc/static_dict.c\n  third-party/brotli/enc/static_dict.h\n  third-party/brotli/enc/static_dict_lut.h\n  third-party/brotli/enc/utf8_util.c\n  third-party/brotli/enc/utf8_util.h\n  third-party/brotli/enc/write_bits.h\n  third-party/brotli/include/brotli/decode.h\n  third-party/brotli/include/brotli/encode.h\n  third-party/brotli/include/brotli/port.h\n  third-party/brotli/include/brotli/shared_dictionary.h\n)\nadd_library(brotli STATIC ${BROTLI_FILES})\nset_source_files_properties(${BROTLI_FILES}\n                            PROPERTIES COMPILE_FLAGS ${BROTLI_COMPILE_FLAGS})\n# ==== brotli ====\n\nfind_library(LIBRT rt)\n\nset_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS OFF)\nset_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB32_PATHS ON)\nfind_library(LIBRT_32 rt PATHS \"/usr/lib32\" \"/usr/lib\" NO_DEFAULT_PATH)\nset_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS ON)\nset_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB32_PATHS OFF)\n\nfind_path(SECCOMP NAMES \"linux/seccomp.h\")\nif(NOT SECCOMP)\n  message(FATAL_ERROR \"Couldn't find linux/seccomp.h. You may need to upgrade your kernel.\")\nendif()\n\nfind_path(PROC_SERVICE_H NAMES \"proc_service.h\")\nif(PROC_SERVICE_H)\n  add_definitions(-DPROC_SERVICE_H=1)\nelse()\n  message(AUTHOR_WARNING \"proc_service.h not present. Support for libthread_db.so is disabled.\")\nendif()\n\n# Test only includes\nfind_path(MQUEUE_H NAMES \"mqueue.h\")\nif(MQUEUE_H)\n  add_definitions(-DMQUEUE_H=1)\nendif()\n\nfind_path(FANOTIFY_H NAMES \"sys/fanotify.h\")\nif(FANOTIFY_H)\n  add_definitions(-DFANOTIFY_H=1)\nendif()\n\ninclude(CheckSymbolExists)\nlist(APPEND CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE)\ncheck_symbol_exists(LAV_CURRENT \"link.h\" RTLD_AUDIT)\nif(NOT RTLD_AUDIT)\n  message(AUTHOR_WARNING \"Couldn't find rtld-audit support. librraudit skipped.\")\nendif()\nlist(REMOVE_ITEM CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE)\n\ncheck_symbol_exists(backtrace \"execinfo.h\" EXECINFO_BACKTRACE)\nif(EXECINFO_BACKTRACE)\n  add_definitions(-DEXECINFO_BACKTRACE)\nelse()\n  message(AUTHOR_WARNING \"backtrace(3) not present in execinfo.h. Automatic backtraces for failures in rr are disabled.\")\nendif()\n\n# Test only symbols\ncheck_symbol_exists(pthread_mutexattr_setrobust \"pthread.h\" HAVE_ROBUST_MUTEX)\n\nset(Python_ADDITIONAL_VERSIONS 3 3.8 3.7 3.6 3.5 3.4 3.3 3.2 3.1 3.0)\nfind_package(PythonInterp 3 REQUIRED)\n\nexecute_process(COMMAND \"${PYTHON_EXECUTABLE}\" \"-c\" \"# nothing\"\n                RESULT_VARIABLE python_status)\nif(python_status)\n  message(FATAL_ERROR \"Couldn't run python interpreter ${PYTHON_EXECUTABLE}.\")\nendif()\n\n# Check for required Python modules\nif(WILL_RUN_TESTS)\n  if(NOT BUILD_TESTS)\n    message(FATAL_ERROR \"Running tests requires building them\")\n  endif()\n\n  set(REQUIRED_PYTHON_MODULES\n    pexpect\n  )\nelse()\n  set(REQUIRED_PYTHON_MODULES)\nendif()\n\nforeach(py_module ${REQUIRED_PYTHON_MODULES})\n  execute_process(COMMAND \"${PYTHON_EXECUTABLE}\" \"-c\"\n                  \"import ${py_module}\"\n                  RESULT_VARIABLE module_status)\n  if(module_status)\n    message(FATAL_ERROR \"Couldn't find required Python module ${py_module}.\")\n  endif()\nendforeach(py_module)\n\nif(WILL_RUN_TESTS)\n  # Check for gdb and lldb\n  execute_process(COMMAND \"gdb\" \"--version\" RESULT_VARIABLE module_status OUTPUT_QUIET)\n  if(module_status)\n    message(FATAL_ERROR \"Couldn't find gdb.\")\n  endif()\n  execute_process(COMMAND \"lldb\" \"--version\" RESULT_VARIABLE module_status OUTPUT_QUIET)\n  if(module_status)\n    message(FATAL_ERROR \"Couldn't find lldb.\")\n  endif()\nendif()\n\ninclude_directories(\"${PROJECT_SOURCE_DIR}/include\")\ninclude_directories(\"${PROJECT_SOURCE_DIR}/third-party/proc-service\")\ninclude_directories(\"${PROJECT_SOURCE_DIR}/third-party/brotli/include\")\n# We need to know where our generated files are.\ninclude_directories(\"${CMAKE_CURRENT_BINARY_DIR}\")\n\nset(RR_PAGE_FILES\n  rr_page.S\n)\nset(RR_PAGE_SOURCE_FILES\n  ${RR_PAGE_FILES}\n  rr_page_instructions.S\n  rr_vdso.S\n)\nadd_library(rrpage)\nforeach(file ${RR_PAGE_FILES})\n  target_sources(rrpage PUBLIC \"${CMAKE_SOURCE_DIR}/src/preload/${file}\")\n  set_source_files_properties(\"${CMAKE_SOURCE_DIR}/src/preload/${file}\"\n                              PROPERTIES COMPILE_FLAGS ${PRELOAD_COMPILE_FLAGS})\nendforeach(file)\n\n# Since librrpage replaces the kernel vDSO for processes exec'd by rr,\n# we want it to have the same SONAME as the real vDSO to trick things\n# like AddressSanitizer into recognising it as the vDSO.\nset_target_properties(rrpage PROPERTIES NO_SONAME ON)\nset_target_properties(rrpage PROPERTIES LINK_FLAGS \"-Wl,-T -Wl,${CMAKE_BINARY_DIR}/src/preload/rr_page.ld -Wl,--hash-style=both -nostdlib ${PRELOAD_LINK_FLAGS} -Wl,-z,max-page-size=${PRELOAD_LIBRARY_PAGE_SIZE} -Wl,-soname,linux-vdso.so.1 ${LINKER_FLAGS}\")\nset_target_properties(rrpage PROPERTIES LINK_DEPENDS ${CMAKE_BINARY_DIR}/src/preload/rr_page.ld)\n# CMake seems to have trouble generating the link line without this\nset_target_properties(rrpage PROPERTIES LINKER_LANGUAGE C)\n\nadd_custom_command(TARGET rrpage POST_BUILD\n                   COMMAND ${CMAKE_SOURCE_DIR}/src/preload/tweak_librrpage.py $<TARGET_FILE:rrpage> ${PRELOAD_LIBRARY_PAGE_SIZE})\n\n# Order matters here! syscall_hook.S must be immediately before syscallbuf.c,\n# raw_syscall.S must be before overrides.c, which must be last.\nif(has_syscallbuf)\n  set(PRELOAD_FILES\n    syscall_hook.S\n    syscallbuf.c\n    raw_syscall.S\n    overrides.c\n    )\nelse()\n  set(PRELOAD_FILES\n    overrides.c\n    )\nendif()\nset(PRELOAD_SOURCE_FILES\n  ${PRELOAD_FILES}\n  preload_interface.h\n  rrcalls.h\n  syscallbuf.h\n)\nadd_library(rrpreload)\nforeach(file ${PRELOAD_FILES})\n  target_sources(rrpreload PUBLIC \"${CMAKE_SOURCE_DIR}/src/preload/${file}\")\n  set_source_files_properties(\"${CMAKE_SOURCE_DIR}/src/preload/${file}\"\n                              PROPERTIES COMPILE_FLAGS ${PRELOAD_COMPILE_FLAGS})\nendforeach(file)\nset_target_properties(rrpreload PROPERTIES LINK_FLAGS \"${PRELOAD_LINK_FLAGS} ${LINKER_FLAGS}\")\nset_target_properties(rrpreload PROPERTIES INSTALL_RPATH \"\\$ORIGIN\")\n\nif(RTLD_AUDIT)\n  set(AUDIT_FILES\n    rtld-audit.c\n    stap-note-iter.c\n    ../preload/raw_syscall.S\n  )\n  set(AUDIT_SOURCE_FILES\n    ${AUDIT_FILES}\n    rtld-audit.h\n    stap-note-iter.h\n    ../preload/preload_interface.h\n    ../preload/rrcalls.h\n  )\n  add_library(rraudit)\n  foreach(file ${AUDIT_FILES})\n    target_sources(rraudit PUBLIC \"${CMAKE_SOURCE_DIR}/src/audit/${file}\")\n    set_source_files_properties(\"${CMAKE_SOURCE_DIR}/src/audit/${file}\"\n                                PROPERTIES COMPILE_FLAGS ${PRELOAD_COMPILE_FLAGS})\n  endforeach(file)\n  set_target_properties(rraudit PROPERTIES LINK_FLAGS \"${PRELOAD_LINK_FLAGS} -ldl ${LINKER_FLAGS}\")\nendif()\n\n# Ensure that CMake knows about our generated files.\n#\n# Alphabetical, please.\nset(GENERATED_FILES\n  AssemblyTemplates.generated\n  CheckSyscallNumbers.generated\n  SyscallEnumsX64.generated\n  SyscallEnumsX86.generated\n  SyscallEnumsGeneric.generated\n  SyscallEnumsForTestsX64.generated\n  SyscallEnumsForTestsX86.generated\n  SyscallEnumsForTestsGeneric.generated\n  SyscallHelperFunctions.generated\n  SyscallnameArch.generated\n  SyscallRecordCase.generated\n)\n\nforeach(generated_file ${GENERATED_FILES})\n  set_source_files_properties(${generated_file}\n                              PROPERTIES GENERATED true HEADER_FILE_ONLY true)\n  add_custom_command(OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/${generated_file}\"\n                     COMMAND \"${CMAKE_CURRENT_SOURCE_DIR}/src/generate_syscalls.py\"\n                             \"${CMAKE_CURRENT_BINARY_DIR}/${generated_file}\"\n                     DEPENDS \"${CMAKE_CURRENT_SOURCE_DIR}/src/generate_syscalls.py\"\n                             \"${CMAKE_CURRENT_SOURCE_DIR}/src/syscalls.py\"\n                             \"${CMAKE_CURRENT_SOURCE_DIR}/src/assembly_templates.py\")\nendforeach(generated_file)\n\nadd_custom_target(Generated DEPENDS ${GENERATED_FILES})\n\nadd_custom_command(OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/rr_trace.capnp.c++\"\n                          \"${CMAKE_CURRENT_BINARY_DIR}/rr_trace.capnp.h\"\n                   COMMAND capnp compile\n                           \"--src-prefix=${CMAKE_CURRENT_SOURCE_DIR}/src\"\n                           \"-oc++:${CMAKE_CURRENT_BINARY_DIR}\"\n                           \"${CMAKE_CURRENT_SOURCE_DIR}/src/rr_trace.capnp\"\n                   DEPENDS \"${CMAKE_CURRENT_SOURCE_DIR}/src/rr_trace.capnp\")\nset_source_files_properties(\"${CMAKE_CURRENT_BINARY_DIR}/rr_trace.capnp.c++\"\n                            PROPERTIES GENERATED true)\nset_source_files_properties(\"${CMAKE_CURRENT_BINARY_DIR}/rr_trace.capnp.h\"\n                            PROPERTIES GENERATED true HEADER_FILE_ONLY true)\n\nif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"aarch64\")\n  set(BLAKE_ARCH_DIR third-party/blake2/neon)\nelse()\n  set(BLAKE_ARCH_DIR third-party/blake2/sse)\nendif()\n\nset(RR_SOURCES\n  src/AddressSpace.cc\n  src/AutoRemoteSyscalls.cc\n  src/BuildidCommand.cc\n  src/Command.cc\n  src/CompressedReader.cc\n  src/CompressedWriter.cc\n  src/ContextSwitchEvent.cc\n  src/CPUFeaturesCommand.cc\n  src/CPUIDBugDetector.cc\n  src/DiversionSession.cc\n  src/DumpCommand.cc\n  src/Dwarf.cc\n  src/ElfReader.cc\n  src/EmuFs.cc\n  src/Event.cc\n  src/ExtraRegisters.cc\n  src/fast_forward.cc\n  src/FdTable.cc\n  src/FileMonitor.cc\n  src/FileNameCommand.cc\n  src/Flags.cc\n  src/ftrace.cc\n  src/DebuggerExtensionCommand.cc\n  src/DebuggerExtensionCommandHandler.cc\n  src/GdbServerConnection.cc\n  src/GdbServerExpression.cc\n  src/GdbInitCommand.cc\n  src/GdbServer.cc\n  src/HasTaskSet.cc\n  src/HelpCommand.cc\n  src/ExportImportCheckpoints.cc\n  src/kernel_abi.cc\n  src/kernel_metadata.cc\n  src/launch_debugger.cc\n  src/log.cc\n  src/LldbInitCommand.cc\n  src/LsCommand.cc\n  src/main.cc\n  src/MagicSaveDataMonitor.cc\n  src/MmappedFileMonitor.cc\n  src/MonitoredSharedMemory.cc\n  src/Monkeypatcher.cc\n  src/MvCommand.cc\n  src/PackCommand.cc\n  src/PerfCounters.cc\n  src/PerfCounterBuffers.cc\n  src/PidFdMonitor.cc\n  src/processor_trace_check.cc\n  src/ProcFdDirMonitor.cc\n  src/ProcMemMonitor.cc\n  src/ProcStatMonitor.cc\n  src/PsCommand.cc\n  src/RecordCommand.cc\n  src/RecordSession.cc\n  src/record_signal.cc\n  src/record_syscall.cc\n  src/RecordTask.cc\n  src/Registers.cc\n  src/remote_code_ptr.cc\n  src/ReplayCommand.cc\n  src/ReplaySession.cc\n  src/replay_syscall.cc\n  src/ReplayTask.cc\n  src/ReplayTimeline.cc\n  src/RerunCommand.cc\n  src/ReturnAddressList.cc\n  src/RmCommand.cc\n  src/Scheduler.cc\n  src/SeccompFilterRewriter.cc\n  src/Session.cc\n  src/SourcesCommand.cc\n  src/StdioMonitor.cc\n  src/SysCpuMonitor.cc\n  src/TargetDescription.cc\n  src/Task.cc\n  src/ThreadGroup.cc\n  src/TraceeAttentionSet.cc\n  src/TraceFrame.cc\n  src/TraceInfoCommand.cc\n  src/TraceStream.cc\n  src/VirtualPerfCounterMonitor.cc\n  src/util.cc\n  src/WaitManager.cc\n  src/WaitStatus.cc\n  ${CMAKE_CURRENT_BINARY_DIR}/rr_trace.capnp.c++\n  ${BLAKE_ARCH_DIR}/blake2b.c\n)\n\nif(PROC_SERVICE_H)\n  set(RR_SOURCES ${RR_SOURCES} src/ThreadDb.cc)\nendif()\n\nif (x86ish)\n  set(RR_SOURCES ${RR_SOURCES} src/test/x86/cpuid_loop.S)\nendif()\n\nif (asan)\n  set(ASAN_FLAGS \"-fsanitize=address -fno-omit-frame-pointer\")\n      # Without no-omit-frame-pointer incomplete backtraces get stored.\n  set(RR_FLAGS \"${ASAN_FLAGS} ${RR_FLAGS}\")\nendif()\n\nset_source_files_properties(${RR_SOURCES}\n                            PROPERTIES COMPILE_FLAGS ${RR_FLAGS})\n\nfunction(post_build_executable target)\n# grsecurity needs these. But if we add them ourselves, they may conflict\n# with other flags added in other ways, and they all have to match :-(. So\n# don't do this until a better solution presents itself\n#  add_custom_command(TARGET ${target}\n#                     POST_BUILD\n#                     COMMAND setfattr ARGS -n user.pax.flags -v m $<TARGET_FILE:${target}>)\nendfunction(post_build_executable)\n\nif(UNIX)\n  include(GNUInstallDirs)\nelse()\n  set(CMAKE_INSTALL_LIBDIR \"lib\")\n  set(CMAKE_INSTALL_BINDIR \"bin\")\n  set(CMAKE_INSTALL_DATADIR \"share\")\n  set(CMAKE_INSTALL_DOCDIR \"${CMAKE_INSTALL_DATADIR}/doc\")\n  set(CMAKE_INSTALL_INCLUDEDIR \"include\")\nendif()\n\nif (intel_pt_decoding)\n  set(RR_SOURCES ${RR_SOURCES} src/ProcessorTraceDecoder.cc)\n  add_definitions(-DINTEL_PT_DECODING=1)\nendif()\n\nadd_executable(rr ${RR_SOURCES})\nset_target_properties(rr PROPERTIES ENABLE_EXPORTS true)\npost_build_executable(rr)\nset(RR_BIN rr)\nadd_dependencies(rr Generated)\n\nif(bpf)\n  add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/share/rr/async_event_filter.o\n    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/src/bpf/async_event_filter.c\n    COMMAND clang -g -target bpf -Wall -O2 -c ${CMAKE_CURRENT_SOURCE_DIR}/src/bpf/async_event_filter.c -o ${CMAKE_CURRENT_BINARY_DIR}/share/rr/async_event_filter.o)\n\n  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/share/rr/async_event_filter.o\n    DESTINATION ${CMAKE_INSTALL_DATADIR}/rr)\n\n  add_custom_target(BPF DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/share/rr/async_event_filter.o)\n\n  add_dependencies(rr BPF)\nendif()\n\nset(RR_MAIN_LINKER_FLAGS ${LINKER_FLAGS})\nif(strip)\n  set(RR_MAIN_LINKER_FLAGS \"-s ${RR_MAIN_LINKER_FLAGS}\")\nendif()\nif (asan)\n  set(RR_MAIN_LINKER_FLAGS \" ${ASAN_FLAGS} ${RR_MAIN_LINKER_FLAGS}\")\nendif()\n\n# Add -flto option to linking step if release\nif(LOWERCASE_CMAKE_BUILD_TYPE STREQUAL \"release\")\n  CHECK_C_COMPILER_FLAG(\"-flto=auto\" SUPPORTS_LTO_AUTO)\n  if(SUPPORTS_LTO_AUTO)\n    set(RR_MAIN_LINKER_FLAGS \"${RR_MAIN_LINKER_FLAGS} -flto=auto\")\n  else()\n    set(RR_MAIN_LINKER_FLAGS \"${RR_MAIN_LINKER_FLAGS} -flto\")\n  endif()\nendif()\n\nif(intel_pt_decoding)\n  find_library(LIBIPT ipt)\n  target_link_libraries(rr ${LIBIPT})\nendif()\n\nif(LIBRT)\n  target_link_libraries(rr ${LIBRT})\nendif()\n\ntarget_link_libraries(rr\n  ${CMAKE_DL_LIBS}\n  ${ZLIB_LDFLAGS}\n  ${LIBBPF_LDFLAGS}\n  brotli\n)\n\nif(ZSTD)\n  target_link_libraries(rr ${LIBZSTD_LDFLAGS})\nendif()\n\nif(staticlibs)\n  # Urgh ... this might not work for everyone, but there doesn't seem to be\n  # a way to persuade pkg-config/pkg_check_modules to produce the right flags\n  target_link_libraries(rr -L/home/roc/lib -l:libcapnp.a -l:libkj.a)\n  # Note that this works for both clang++ and g++\n  set(RR_MAIN_LINKER_FLAGS \"-static-libstdc++ ${RR_MAIN_LINKER_FLAGS}\")\nelseif(ANDROID)\n  target_link_libraries(rr CapnProto::capnp)\nelse()\n  target_link_libraries(rr ${CAPNP_LDFLAGS})\nendif()\n\nset_target_properties(rr PROPERTIES LINK_FLAGS \"${RR_MAIN_LINKER_FLAGS}\")\n\ntarget_link_libraries(rrpreload\n  ${CMAKE_DL_LIBS}\n)\n\nadd_executable(rr_exec_stub src/exec_stub.c)\npost_build_executable(rr_exec_stub)\nset_target_properties(rr_exec_stub\n                      PROPERTIES LINK_FLAGS \"-static -nostartfiles -nodefaultlibs ${LINKER_FLAGS}\")\nset_source_files_properties(src/exec_stub.c\n                            COMPILE_FLAGS \"-fno-stack-protector\")\n\nset(RR_GDB_RESOURCES\n  32bit-avx.xml\n  32bit-core.xml\n  32bit-linux.xml\n  32bit-sse.xml\n  32bit-pkeys.xml\n  64bit-avx.xml\n  64bit-core.xml\n  64bit-linux.xml\n  64bit-seg.xml\n  64bit-sse.xml\n  64bit-pkeys.xml\n  aarch64-core.xml\n  aarch64-fpu.xml\n  aarch64-pauth.xml\n)\nforeach(file ${RR_GDB_RESOURCES})\n  configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/third-party/gdb/${file}\"\n                 \"${CMAKE_CURRENT_BINARY_DIR}/share/rr/${file}\"\n                 COPYONLY)\n  install(FILES third-party/gdb/${file}\n          DESTINATION ${CMAKE_INSTALL_DATADIR}/rr)\nendforeach(file)\n\nforeach(file ${PRELOAD_SOURCE_FILES})\n  configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/src/preload/${file}\"\n                 \"${CMAKE_CURRENT_BINARY_DIR}/share/rr/src/preload/${file}\"\n                 COPYONLY)\n  install(FILES src/preload/${file}\n          DESTINATION ${CMAKE_INSTALL_DATADIR}/rr/src/preload)\nendforeach(file)\n\nforeach(file ${RR_PAGE_SOURCE_FILES})\n  configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/src/preload/${file}\"\n                 \"${CMAKE_CURRENT_BINARY_DIR}/share/rr/src/preload/${file}\"\n                 COPYONLY)\n  install(FILES src/preload/${file}\n          DESTINATION ${CMAKE_INSTALL_DATADIR}/rr/src/preload)\nendforeach(file)\nconfigure_file(\"${CMAKE_CURRENT_BINARY_DIR}/src/preload/rr_page.ld\"\n               \"${CMAKE_CURRENT_BINARY_DIR}/share/rr/src/preload/rr_page.ld\"\n               COPYONLY)\ninstall(FILES \"${CMAKE_CURRENT_BINARY_DIR}/src/preload/rr_page.ld\"\n        DESTINATION ${CMAKE_INSTALL_DATADIR}/rr/src/preload)\n\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/scripts/rr-collect-symbols.py\"\n               \"${CMAKE_CURRENT_BINARY_DIR}/bin/rr-collect-symbols.py\"\n               COPYONLY)\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/scripts/rr-gdb-script-host.py\"\n               \"${CMAKE_CURRENT_BINARY_DIR}/bin/rr-gdb-script-host.py\"\n               COPYONLY)\n\ninstall(PROGRAMS scripts/signal-rr-recording.sh\n                 scripts/rr-collect-symbols.py\n  DESTINATION ${CMAKE_INSTALL_BINDIR})\n\ninstall(PROGRAMS scripts/rr_completion\n  DESTINATION ${CMAKE_INSTALL_DATADIR}/bash-completion/completions RENAME rr)\n\n# Note that this works fine when installing to /usr/local, but zsh by default doesn't autoload *any* completions in HOME,\n# so people will still have to manually set `FPATH=~/.local/share/zsh/site-functions`.\ninstall(PROGRAMS scripts/rr_completion.zsh\n  DESTINATION ${CMAKE_INSTALL_DATADIR}/zsh/site-functions RENAME _rr)\n\nset(RR_INSTALL_LIBS rrpreload rrpage rr_exec_stub)\nif(RTLD_AUDIT)\n  set(RR_INSTALL_LIBS ${RR_INSTALL_LIBS} rraudit)\nendif()\ninstall(TARGETS ${RR_BIN} ${RR_INSTALL_LIBS}\n  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}/rr\n  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/rr)\n\nif(EXTRA_EXTERNAL_SOLIBS)\n  install(PROGRAMS ${EXTRA_EXTERNAL_SOLIBS}\n    DESTINATION ${CMAKE_INSTALL_LIBDIR})\nendif()\n\n# Build 32-bit librrpreload and librraudit on 64-bit builds.\n# We copy the source files into '32' subdirectories in the output\n# directory, so we can set different compile options on them.\n# This sucks but I can't find a better way to get CMake to build\n# the same source file in two different ways.\nif(rr_32BIT AND rr_64BIT)\n  set(RR_INSTALL_LIBS_32 rrpreload_32 rrpage_32 rr_exec_stub_32)\n  add_library(rrpage_32)\n\n  foreach(file ${RR_PAGE_SOURCE_FILES})\n    configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/src/preload/${file}\"\n                   \"${CMAKE_CURRENT_BINARY_DIR}/32/preload/${file}\"\n                   COPYONLY)\n  endforeach(file)\n\n  foreach(file ${RR_PAGE_FILES})\n    target_sources(rrpage_32 PUBLIC \"${CMAKE_CURRENT_BINARY_DIR}/32/preload/${file}\")\n    set_source_files_properties(\"${CMAKE_CURRENT_BINARY_DIR}/32/preload/${file}\"\n                                PROPERTIES COMPILE_FLAGS \"-m32 ${PRELOAD_COMPILE_FLAGS}\")\n  endforeach(file)\n\n  set_target_properties(rrpage_32 PROPERTIES NO_SONAME ON)\n  set_target_properties(rrpage_32 PROPERTIES LINK_FLAGS \"-m32 -Wl,-T -Wl,${CMAKE_BINARY_DIR}/src/preload/rr_page.ld -Wl,--hash-style=both -nostdlib ${PRELOAD_LINK_FLAGS} -Wl,-soname,linux-vdso.so.1 ${LINKER_FLAGS}\")\n  set_target_properties(rrpage_32 PROPERTIES LINK_DEPENDS ${CMAKE_BINARY_DIR}/src/preload/rr_page.ld)\n  set_target_properties(rrpage_32 PROPERTIES LINKER_LANGUAGE C)\n\n  add_custom_command(TARGET rrpage_32 POST_BUILD\n                    COMMAND ${CMAKE_SOURCE_DIR}/src/preload/tweak_librrpage.py $<TARGET_FILE:rrpage_32> ${PRELOAD_LIBRARY_PAGE_SIZE})\n\n\n  add_library(rrpreload_32)\n\n  foreach(file ${PRELOAD_SOURCE_FILES})\n    configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/src/preload/${file}\"\n                   \"${CMAKE_CURRENT_BINARY_DIR}/32/preload/${file}\"\n                   COPYONLY)\n  endforeach(file)\n\n  foreach(file ${PRELOAD_FILES})\n    target_sources(rrpreload_32 PUBLIC \"${CMAKE_CURRENT_BINARY_DIR}/32/preload/${file}\")\n    set_source_files_properties(\"${CMAKE_CURRENT_BINARY_DIR}/32/preload/${file}\"\n                                PROPERTIES COMPILE_FLAGS \"-m32 ${PRELOAD_COMPILE_FLAGS}\")\n  endforeach(file)\n\n  set_target_properties(rrpreload_32 PROPERTIES LINK_FLAGS \"-m32 ${PRELOAD_LINK_FLAGS} ${LINKER_FLAGS}\")\n  set_target_properties(rrpreload_32 PROPERTIES INSTALL_RPATH \"\\$ORIGIN\")\n  target_link_libraries(rrpreload_32\n    ${CMAKE_DL_LIBS}\n  )\n\n  if(RTLD_AUDIT)\n    add_library(rraudit_32)\n\n    foreach(file ${AUDIT_SOURCE_FILES})\n      configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/src/audit/${file}\"\n                     \"${CMAKE_CURRENT_BINARY_DIR}/32/audit/${file}\"\n                     COPYONLY)\n    endforeach(file)\n\n    foreach(file ${AUDIT_FILES})\n      target_sources(rraudit_32 PUBLIC \"${CMAKE_CURRENT_BINARY_DIR}/32/audit/${file}\")\n      set_source_files_properties(\"${CMAKE_CURRENT_BINARY_DIR}/32/audit/${file}\"\n                                  PROPERTIES COMPILE_FLAGS \"-m32 ${PRELOAD_COMPILE_FLAGS}\")\n    endforeach(file)\n\n    set_target_properties(rraudit_32 PROPERTIES LINK_FLAGS \"-m32 -nostartfiles ${LINKER_FLAGS}\")\n    target_link_libraries(rraudit_32\n      ${CMAKE_DL_LIBS}\n    )\n\n    set(RR_INSTALL_LIBS_32 ${RR_INSTALL_LIBS_32} rraudit_32)\n  endif()\n\n  foreach(file exec_stub.c)\n    configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/src/${file}\"\n                   \"${CMAKE_CURRENT_BINARY_DIR}/32/${file}\"\n                   COPYONLY)\n    set_source_files_properties(\"${CMAKE_CURRENT_BINARY_DIR}/32/${file}\"\n                                PROPERTIES COMPILE_FLAGS \"-m32 -fno-stack-protector\")\n  endforeach(file)\n\n  add_executable(rr_exec_stub_32 32/exec_stub.c)\n  post_build_executable(rr_exec_stub_32)\n  set_target_properties(rr_exec_stub_32\n                        PROPERTIES LINK_FLAGS \"-static -nostartfiles -nodefaultlibs -m32 ${LINKER_FLAGS}\")\n\n  install(TARGETS ${RR_INSTALL_LIBS_32}\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}/rr\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/rr)\nendif()\n\n##--------------------------------------------------\n## Testing\n\n# A \"basic test\" consists of a foo.c source file. All basic tests use the\n# same basic_test.run driver script. The test name is passed as an additional\n# parameter to the driver script. This script just does\n# \"compare_test EXIT-SUCCESS\", i.e. records and replays the program and verifies\n# that the output of both runs is identical and contains EXIT-SUCCESS.\n#\n# NB: you must update this variable when adding a new test source\n# file.  The list is not generated automatically.\n#\n# Alphabetical, please.\nset(BASIC_TESTS\n  64bit_child\n  _llseek\n  abort\n  accept\n  acct\n  adjtimex\n  aio\n  alarm\n  alarm2\n  alsa_ioctl\n  x86/arch_prctl_x86\n  x86/arch_prctl_xstate\n  async_segv_ignored\n  at_threadexit\n  bad_ip\n  bad_syscall\n  barrier\n  big_buffers\n  big_select\n  block\n  block_open\n  bpf\n  bpf_map\n  bpf_prog_map\n  bpf_query\n  brk\n  brk2\n  capget\n  chew_cpu\n  x86/chew_cpu_cpuid\n  chmod\n  chown\n  clock\n  clock_adjtime\n  clock_nanosleep\n  clock_time64\n  clone\n  clone_bad_stack\n  clone_bad_tls\n  clone_cleartid_coredump\n  clone_fail\n  clone_immediate_exit\n  clone_newflags\n  clone_parent\n  clone_untraced\n  clone_vfork_pidfd\n  cloned_sigmask\n  close_range\n  constructor\n  copy_file_range\n  x86/cpuid_same_state\n  creat_address_not_truncated\n  x86/cross_arch\n  cwd_inaccessible\n  daemon\n  x86/deferred_patch\n  desched_blocking_poll\n  desched_sigkill\n  detach_huge_mmap\n  detach_state\n  detach_threads\n  detach_sigkill\n  detach_sigkill_exit\n  deterministic_sigsys\n  dev_zero\n  direct\n  dlchecksum\n  dup\n  doublesegv\n  epoll_create\n  epoll_create1\n  epoll_edge\n  epoll_many\n  epoll_pwait_eintr_sigmask\n  epoll_pwait2\n  eventfd\n  exec_flags\n  exec_no_env\n  exec_self\n  exec_from_main_thread\n  exec_from_other_thread\n  exec_stopsig\n  execveat\n  exit_with_syscallbuf_signal\n  fadvise\n  fatal_init_signal\n  fatal_sigsegv_thread\n  x86/fault_in_code_page\n  fcntl_dupfd\n  fcntl_misc\n  fcntl_notify\n  fcntl_owner_ex\n  fcntl_rw_hints\n  fcntl_seals\n  fcntl_sig\n  fd_cleanup\n  fd_tracking_across_threads\n  fds_clean\n  fexecve\n  fexecve_memfd\n  flock\n  flock_ofd\n  flock2\n  fork_brk\n  fork_child_crash\n  fork_many\n  fsmount\n  fstatat\n  futex_exit_race\n  futex_exit_race_sigsegv\n  futex_invalid_op\n  futex_pi\n  futex_priorities\n  futex_requeue\n  futex_restart_race\n  futex_restart_clone\n  gcrypt_rdrand\n  getcpu\n  getgroups\n  getpwnam\n  getrandom\n  setitimer\n  getsid\n  gettimeofday\n  grandchild_threads\n  grandchild_threads_main_running\n  grandchild_threads_thread_running\n  grandchild_threads_parent_alive\n  x86/hle\n  x86/hlt\n  inotify\n  int3\n  intr_futex_wait_restart\n  intr_poll\n  intr_ppoll\n  intr_pselect\n  intr_read_no_restart\n  intr_read_restart\n  intr_sleep\n  intr_sleep_no_restart\n  invalid_exec\n  invalid_fcntl\n  invalid_ioctl\n  io\n  io_uring\n  ioctl\n  ioctl_blk\n  ioctl_br\n  ioctl_fb\n  ioctl_fs\n  ioctl_pty\n  ioctl_sg\n  ioctl_tty\n  ioctl_vt\n  ioprio\n  x86/ioperm\n  x86/iopl\n  join_threads\n  joystick\n  kcmp\n  keyctl\n  kill_newborn\n  kill_ptracee\n  landlock\n  large_hole\n  large_write_deadlock\n  legacy_ugid\n  x86/lsl\n  madvise\n  madvise_dontneed_private\n  madvise_free\n  madvise_misc\n  madvise_remove\n  madvise_wipeonfork\n  map_fixed\n  map_shared_syscall\n  membarrier\n  memfd_create\n  memfd_create_efault\n  memfd_create_shared\n  memfd_create_shared_huge\n  mincore\n  mknod\n  mlock\n  mlock_madvise\n  mmap_adjacent_to_rr_usage\n  mmap_private\n  mmap_private_grow_under_map\n  mmap_recycle\n  mmap_ro\n  mmap_self_maps_shared\n  mmap_shared\n  mmap_shared_dev_zero\n  mmap_shared_grow\n  mmap_shared_grow_under_map\n  mmap_shared_multiple\n  mmap_shared_subpage\n  mmap_shared_write\n  mmap_shared_write_fork\n  mmap_short_file\n  mmap_write_complex\n  mmap_zero_size_fd\n  x86/modify_ldt\n  mount_ns_exec\n  mount_ns_exec2\n  mount_ns_execveat\n  mprotect\n  mprotect_heterogenous\n  mprotect_none\n  mprotect_stack\n  mremap\n  mremap_after_coalesce\n  mremap_dontunmap\n  mremap_grow\n  mremap_grow_shared\n  mremap_non_page_size\n  mremap_overwrite\n  mremap_private_grow_under_map\n  mremap_shrink\n  msg\n  msg_trunc\n  msync\n  mtio\n  multiple_pending_signals\n  multiple_pending_signals_sequential\n  munmap_segv\n  munmap_discontinuous\n  nanosleep\n  netfilter\n  netfilter_ipv6\n  netlink_mmap_disable\n  no_mask_timeslice\n  nscd\n  numa\n  x86/old_fork\n  openat2\n  openat_null\n  open_tree\n  orphan_process\n  packet_mmap_disable\n  x86/patch_syscall_restart\n  pause\n  perf_event\n  perf_event_ioctl\n  perf_event_mmap\n  personality\n  pid_ns_kill_child\n  pid_ns_kill_child_threads\n  pid_ns_kill_child_zombie\n  pid_ns_kill_threads\n  pid_ns_kill_threads_exit_wait\n  pid_ns_reap\n  pid_ns_segv\n  pid_ns_shutdown\n  pidfd\n  pidfd_getfd\n  x86/pkeys\n  poll_sig_race\n  ppoll\n  ppoll_deliver\n  prctl\n  prctl_anon_vma_name\n  prctl_caps\n  prctl_deathsig\n  prctl_name\n  prctl_short_name\n  prctl_speculation_ctrl\n  privileged_net_ioctl\n  proc_fds\n  proc_mem\n  protect_rr_fds\n  prw\n  pthread_condvar_locking\n  pthread_mutex_timedlock\n  pthread_pi_mutex\n  pthread_rwlocks\n  x86/ptrace\n  ptrace_attach_null_status\n  ptrace_attach_running\n  ptrace_attach_sleeping\n  ptrace_attach_stopped\n  ptrace_attach_syscall\n  ptrace_attach_thread_running\n  ptrace_breakpoint\n  ptrace_change_patched_syscall\n  x86/ptrace_debug_regs\n  ptrace_exec\n  x86/ptrace_exec32\n  ptrace_kill_grandtracee\n  x86/ptrace_tls\n  ptrace_seize\n  ptrace_sigchld\n  ptrace_sigchld_blocked\n  ptrace_signals\n  ptrace_singlestep\n  ptrace_syscall\n  ptrace_syscall_clone_untraced\n  x86/ptrace_sysemu\n  ptrace_sysemu_syscall\n  ptrace_trace_clone\n  ptrace_trace_exit\n  ptrace_traceme\n  ptrace_waiter_thread\n  ptracer_death\n  ptracer_death_multithread\n  ptracer_death_multithread_peer\n  # pivot_root ... disabled because it fails when run as root and does nothing otherwise\n  quotactl\n  x86/rdtsc\n  x86/rdtsc_flags\n  read_nothing\n  readdir\n  read_large\n  read_oversize\n  readlink\n  readlinkat\n  readv\n  record_replay_subject\n  recvfrom\n  redzone_integrity\n  rename\n  rlimit\n  rseq_cpu_id_reset\n  rusage\n  samask\n  save_data_fd\n  sched_attr\n  sched_setaffinity\n  sched_setparam\n  sched_yield\n  sched_yield_to_lower_priority\n  scm_rights\n  scratch_read\n  seccomp\n  seccomp_cloning\n  seccomp_clone_fail\n  seccomp_desched\n  seccomp_kill_exit\n  seccomp_null\n  seccomp_sigsys_args\n  seccomp_sigsys_sigtrap\n  seccomp_sigsys_syscallbuf\n  seccomp_tsync\n  seccomp_veto_exec\n  self_shebang\n  self_sigint\n  sem\n  send_block\n  sendfile\n  set_ptracer\n  set_tid_address\n  setgid\n  setgroups\n  setsid\n  shared_exec\n  shared_monitor\n  shared_offset\n  shared_write\n  shm\n  shm_unmap\n  sigaction_old\n  sigaltstack\n  sigchld_interrupt_signal\n  sigcont\n  sigcont_threaded\n  sigframe_grow_stack\n  sighandler_bad_rsp_sigsegv\n  sighandler_fork\n  sighandler_mask\n  sigill\n  signal_deferred\n  signal_during_preload_init\n  signal_frame\n  signal_unstoppable\n  x86/signal_xmm_state\n  signalfd\n  sigprocmask\n  sigprocmask_ensure_delivery\n  sigprocmask_exec\n  sigprocmask_evil\n  sigprocmask_in_syscallbuf_sighandler\n  sigprocmask_rr_sigs\n  sigprocmask_syscallbuf\n  # sigprof\n  sigpwr\n  sigqueueinfo\n  sigtrap_process_group\n  x86/sigreturn\n  sigreturn_reg\n  sigreturnmask\n  sigrt\n  sigstop\n  sigstop2\n  sigsuspend\n  sigtrap\n  simple_threads_stress\n  sioc\n  small_holes\n  sock_name_null\n  sock_names_opts\n  spinlock_priorities\n  splice\n  stack_growth_after_syscallbuf\n  stack_growth_syscallbuf\n  stack_growth_with_guard\n  stack_invalid\n  stack_overflow\n  stack_overflow_altstack\n  stack_overflow_with_guard\n  statfs\n  statx\n  stdout_child\n  stdout_cloexec\n  stdout_dup\n  stdout_redirect\n  switch_read\n  symlink\n  sync\n  sync_file_range\n  syscall_bp\n  syscall_in_writable_mem\n  syscallbuf_signal_reset\n  syscallbuf_signal_blocking\n  syscallbuf_sigstop\n  syscallbuf_timeslice\n  syscallbuf_timeslice2\n  sysconf\n  sysconf_conf\n  sysctl\n  sysemu_singlestep\n  x86/sysfs\n  sysinfo\n  tgkill\n  thread_yield\n  timer\n  timerfd\n  times\n  truncate_temp\n  tun\n  two_signals_with_mask\n  ulimit_low\n  uname\n  unexpected_exit\n  unexpected_exit_execve\n  unexpected_exit_execve_twice\n  unexpected_exit_pid_ns\n  unjoined_thread\n  unshare\n  userfaultfd\n  utimes\n  v4l_dmabuf\n  vdso_parts\n  vdso_symbols\n  vfork_done\n  vfork_flush\n  vfork_setopts\n  vfork_shared\n  video_capture\n  vm_readv_writev\n  vsyscall\n  vsyscall_timeslice\n  x86/x87env\n  wait\n  wait_sigstop\n  write_race\n  writev\n  xattr\n  zero_length_read\n)\n\nif(MQUEUE_H)\n  set(BASIC_TESTS ${BASIC_TESTS} mq)\nendif()\n\nif(FANOTIFY_H)\n  set(BASIC_TESTS ${BASIC_TESTS} fanotify)\nendif()\n\nif(HAVE_ROBUST_MUTEX)\n  set(BASIC_TESTS ${BASIC_TESTS} robust_futex)\nendif()\n\nset(BASIC_CPP_TESTS\n  std_random\n  unwind_rr_page\n)\n\n# A \"test with program\" consists of a foo.c source file and a foo.run driver\n# script.  See src/test/util.sh to learn how the .run files work.\n#\n# NB: you must update this variable when adding a new test source\n# file.  The list is not generated automatically.\n#\n# Alphabetical, please.\nset(TESTS_WITH_PROGRAM\n  abort_nonmain\n  alternate_thread_diversion\n  arm/arch_timer\n  args\n  async_kill_with_syscallbuf\n  async_kill_with_syscallbuf2\n  async_kill_with_threads\n  async_kill_with_threads_main_running\n  async_kill_with_threads_thread_running\n  async_segv\n  async_signal_syscalls\n  async_signal_syscalls2\n  async_signal_syscalls_siginfo\n  async_usr1\n  blacklist\n  block_clone_checkpoint\n  block_clone_interrupted\n  block_clone_syscallbuf_overflow\n  block_intr_sigchld\n  blocked_bad_ip\n  blocked_sigill\n  x86/blocked_sigsegv\n  breakpoint\n  breakpoint_conditions\n  breakpoint_overlap\n  call_function\n  call_gettid\n  chaos_oom\n  # Disabled because it's very slow\n  # check_session_leaks\n  checkpoint_dying_threads\n  checkpoint_mixed_mode\n  checksum_sanity\n  check_lost_interrupts\n  clone_file_range\n  clone_interruption\n  # Disabled because it fails\n  # clone_share_vm\n  clone_syscallbuf_cleanup_blocked\n  clone_syscallbuf_cleanup_cpu\n  clone_vfork\n  concurrent_signals\n  conditional_breakpoint_calls\n  conditional_breakpoint_offload\n  condvar_stress\n  cont_race\n  context_switch_after_patch\n  x86/cpuid_singlestep\n  crash\n  crash_in_function\n  daemon_read\n  dconf_mock\n  detach_terminal\n  dev_tty\n  x86/diversion_rdtsc\n  diversion_sigtrap\n  diversion_syscall\n  dlopen\n  early_error\n  elapsed_time\n  exclusion_region\n  exec_failed\n  exec_many\n  exec_shared_as\n  execve_loop\n  exit_codes\n  exit_group\n  exit_race\n  exit_status\n  x86/explicit_checkpoints\n  fd_limit\n  fork_stress\n  fork_syscalls\n  function_calls\n  x86/fxregs\n  getcwd\n  gdb_bogus_breakpoint\n  gdb_qpasssignals\n  goto_event\n  hello\n  hooks\n  # Disabled because issue #1806 makes tests fail on Debian 8.5 at least\n  # history\n  ignored_async_usr1\n  ignored_sigsegv\n  ignore_nested\n  immediate_restart\n  x86/int3_ok\n  interrupt\n  intr_ptrace_decline\n  invalid_interpreter\n  invalid_jump\n  jit_proc_mem\n  link\n  madvise_dontfork\n  madvise_fracture_flags\n  main_thread_exit\n  many_yields\n  mmap_fd_reuse_checkpoint\n  mmap_replace_most_mappings\n  mmap_shared_extern\n  mmap_shared_prot\n  mmap_shared_write_exec_race\n  mmap_tmpfs\n  mmap_write\n  mmap_write_private\n  mprotect_checkpoint\n  x86/morestack_unwind\n  mprotect_growsdown\n  mprotect_syscallbuf_overflow\n  mutex_pi_stress\n  nested_detach_wait\n  nested_detach_kill_stuck\n  nested_release_signal\n  overflow_branch_counter\n  pack\n  patch_page_end\n  x86/patch_40_80_f6_81\n  prctl_tsc\n  priority\n  ptrace_remote_unmap\n  x86/rdtsc_loop\n  x86/rdtsc_loop2\n  x86/rdtsc_interfering\n  read_big_struct\n  remove_latest_trace\n  restart_abnormal_exit\n  reverse_continue_breakpoint\n  reverse_continue_multiprocess\n  reverse_continue_process_signal\n  reverse_many_breakpoints\n  reverse_step_long\n  reverse_step_threads\n  reverse_step_threads_break\n  # Not called ps, because that interferes with using real 'ps' in tests\n  rr_ps\n  rr_ps_ns\n  rseq\n  rseq_syscallbuf\n  search\n  seccomp_blocks_rr\n  seccomp_open\n  seccomp_signals\n  seekticks_threads\n  segfault\n  setuid\n  shared_map\n  shared_persistent_file\n  signal_numbers\n  sigprocmask_race\n  sigprocmask_rr_sigs_nondefault\n  simple\n  x86/singlestep_pushf\n  stack_growth\n  step_into_lib\n  step_thread\n  strict_priorities\n  x86/string_instructions\n  x86/string_instructions_async_signals\n  x86/string_instructions_async_signals_shared\n  x86/string_instructions_multiwatch\n  x86/string_instructions_replay\n  x86/string_instructions_singlestep_fastforward\n  x86/string_instructions_watch\n  x86/syscallbuf_branch_check\n  syscallbuf_fd_disabling\n  x86/syscallbuf_rdtsc_page\n  syscallbuf_signal_blocking_read\n  sysconf_onln\n  target_fork\n  target_process\n  tcp_sockets\n  term_nonmain\n  term_rr\n  term_rr_ok\n  term_trace_reset\n  term_trace_syscall\n  thread_exit_signal\n  thread_open_race\n  thread_stress\n  threaded_syscall_spam\n  threads\n  tls\n  tracee_unmap_vdso\n  ttyname\n  unexpected_stack_growth\n  unicode\n  user_ignore_sig\n  vdso_clock_gettime_stack\n  vdso_gettimeofday_stack\n  vdso_time_stack\n  vfork\n  vfork_read_clone_stress\n  vsyscall_reverse_next\n  wait_for_all\n  watchpoint\n  watchpoint_at_sched\n  watchpoint_before_signal\n  x86/watchpoint_error\n  watchpoint_no_progress\n  watchpoint_size_change\n  watchpoint_syscall\n  watchpoint_unaligned\n  when_threads\n)\n\n# A \"test without program\" is a foo.run driver script only, which does\n# something with one of the test executables above (or has special rules\n# to build its own executable).\n#\n# NB: you must update this variable when adding a new test source\n# file.  The list is not generated automatically.\n#\n# Alphabetical, please.\nset(TESTS_WITHOUT_PROGRAM\n  async_signal_syscalls_100\n  async_signal_syscalls_1000\n  bad_breakpoint\n  break_block\n  break_clock\n  break_clone\n  break_exec\n  break_int3\n  break_mmap_private\n  break_msg\n  x86/break_rdtsc\n  break_sigreturn\n  break_sync_signal\n  break_thread\n  break_time_slice\n  breakpoint_consistent\n  breakpoint_print\n  call_exit\n  check_patched_pthread\n  checkpoint_async_signal_syscalls_1000\n  checkpoint_invalid\n  checkpoint_mmap_shared\n  checkpoint_prctl_name\n  checkpoint_simple\n  checksum_block_open\n  checksum_sanity_noclone\n  comm\n  cont_signal\n  copy_all\n  x86/cpuid\n  dead_thread_target\n  desched_ticks\n  deliver_async_signal_during_syscalls\n  env_newline\n  exec_deleted\n  exec_stop\n  execp\n  explicit_checkpoint_clone\n  file_name_newline\n  final_sigkill\n  first_instruction\n  fork_exec_info_thr\n  get_thread_list\n  hardlink_mmapped_files\n  hbreak\n  large_file\n  mprotect_step\n  nested_detach\n  nested_detach_kill\n  nested_detach_stop\n  nested_release\n  nested_release_exit_code\n  pack_dir\n  parent_no_break_child_bkpt\n  parent_no_stop_child_crash\n  post_exec_fpu_regs\n  proc_maps\n  read_bad_mem\n  record_replay\n  remove_watchpoint\n  replay_overlarge_event_number\n  replay_serve_files\n  restart_invalid_checkpoint\n  restart_unstable\n  restart_diversion\n  reverse_alarm\n  reverse_continue_exec_subprocess\n  reverse_continue_fork_subprocess\n  reverse_continue_int3\n  reverse_continue_start\n  reverse_finish\n  reverse_step_breakpoint\n  reverse_step_signal\n  reverse_step_threads2\n  reverse_watchpoint\n  reverse_watchpoint_syscall\n  run_end\n  run_in_function\n  sanity\n  seekticks\n  shm_checkpoint\n  siginfo\n  x86/sigreturn_checksum\n  signal_stop\n  signal_checkpoint\n  simple_script\n  simple_script_debug\n  simple_winch\n  stack_overflow_debug\n  step1\n  x86/step_rdtsc\n  step_signal\n  x86/string_instructions_break\n  x86/string_instructions_replay_quirk\n  subprocess_exit_ends_session\n  switch_processes\n  syscallbuf_timeslice_250\n  tick0\n  tick0_less\n  trace_version\n  term_trace_cpu\n  trace_events\n  transient_fault_replay_all\n  tty\n  unmap_vdso\n  unwind_on_signal\n  vfork_done_clone\n  vfork_exec\n  vfork_break_parent\n  vsyscall_singlestep\n  watch_code\n  watchpoint_cond\n  watchpoint_unaligned2\n  when\n)\n\nif(BUILD_TESTS)\n  # Part of the installable testsuite (test files).\n  if(INSTALL_TESTSUITE)\n    install(DIRECTORY ${CMAKE_SOURCE_DIR}/src/test/\n            DESTINATION ${CMAKE_INSTALL_LIBDIR}/rr/testsuite/rr/src/test\n            USE_SOURCE_PERMISSIONS)\n  endif(INSTALL_TESTSUITE)\n\n  # We use symlinks in the tests to access the build and source directories.\n  # This is needed because we cannot change the paths used by the tests when\n  # the testsuite is installed. We work around this by using symlinks during\n  # the normal build, and then installing symlinks with the testsuite that\n  # have the same name but, the new link targets.\n  execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_SOURCE_DIR} source_dir)\n  execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink ${PROJECT_BINARY_DIR} bin_dir)\n\n  if(INSTALL_TESTSUITE)\n    # Create the directory for the symlinks first and then create symlinks.\n    install(CODE \"execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory\n                  \\$ENV{DESTDIR}\\${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/rr/testsuite/obj)\n                  execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink\n                  \\${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/rr/testsuite/rr\n                  \\$ENV{DESTDIR}\\${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/rr/testsuite/obj/source_dir)\n                  execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink\n                  \\${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/rr/testsuite/obj\n                  \\$ENV{DESTDIR}\\${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/rr/testsuite/obj/bin_dir)\")\n  endif(INSTALL_TESTSUITE)\n\n  foreach(test ${BASIC_TESTS} ${TESTS_WITH_PROGRAM})\n    if (NOT x86ish AND ${test} MATCHES \"^x86/.*\")\n      continue()\n    endif()\n    if (NOT ${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"aarch64\" AND ${test} MATCHES \"^arm/.*\")\n      continue()\n    endif()\n    get_filename_component(testname ${test} NAME)\n\n    add_executable(${testname} src/test/${test}.c)\n    target_include_directories(${testname} PRIVATE src/preload)\n    post_build_executable(${testname})\n    set_source_files_properties(src/test/${test}.c\n                                PROPERTIES COMPILE_FLAGS ${RR_TEST_FLAGS})\n    add_dependencies(${testname} Generated)\n    if(LIBRT)\n      target_link_libraries(${testname} ${LIBRT})\n    endif()\n    target_link_libraries(${testname} -ldl)\n    # Part of the installable testsuite (test programs).\n    if(INSTALL_TESTSUITE)\n      install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/bin/${testname}\n              DESTINATION ${CMAKE_INSTALL_LIBDIR}/rr/testsuite/obj/bin)\n    endif(INSTALL_TESTSUITE)\n  endforeach(test)\n\n  add_executable(tick0 src/test/tick0.c)\n  post_build_executable(tick0)\n  set_target_properties(tick0\n    PROPERTIES LINK_FLAGS \"-static -nostdlib -nodefaultlibs\"\n    COMPILE_FLAGS \"-static -nostdlib -nodefaultlibs -O3 -g2 -DHAS_TICK0=1\")\n\n  add_executable(tick0_less src/test/tick0.c)\n  post_build_executable(tick0_less)\n  set_target_properties(tick0_less\n    PROPERTIES LINK_FLAGS \"-static -nostdlib -nodefaultlibs\"\n    COMPILE_FLAGS \"-static -nostdlib -nodefaultlibs -O3 -g2\")\n\n  add_executable(watchpoint_unaligned2 src/test/watchpoint_unaligned2.c)\n  post_build_executable(watchpoint_unaligned2)\n  set_target_properties(watchpoint_unaligned2\n    PROPERTIES COMPILE_FLAGS \"${RR_TEST_FLAGS} -g -O3\")\n  add_dependencies(watchpoint_unaligned2 Generated)\n\n  add_executable(prctl_tsc_supported src/test/prctl_tsc_supported.c)\n  post_build_executable(prctl_tsc_supported)\n\n  # Test disabled because it requires libuvc to be built and installed, and a\n  # working USB camera\n  # add_executable(usb src/test/usb.c)\n  # post_build_executable(usb)\n  # add_dependencies(usb Generated)\n  # target_link_libraries(usb ${LIBRT} -L/usr/local/lib -luvc -lusb-1.0)\n\n  foreach(test ${BASIC_CPP_TESTS})\n    add_executable(${test} src/test/${test}.cc)\n    post_build_executable(${test})\n    set_source_files_properties(src/test/${test}.cc\n                                PROPERTIES COMPILE_FLAGS ${RR_TEST_FLAGS})\n    add_dependencies(${test} Generated)\n    if(LIBRT)\n      target_link_libraries(${test} ${LIBRT})\n    endif()\n    # Part of the installable testsuite (test programs).\n    if(INSTALL_TESTSUITE)\n      install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/bin/${test}\n              DESTINATION ${CMAKE_INSTALL_LIBDIR}/rr/testsuite/obj/bin)\n    endif(INSTALL_TESTSUITE)\n  endforeach(test)\n\n  add_library(test_lib\n    src/test/test_lib.c\n    )\n  add_dependencies(test_lib Generated)\n  set_source_files_properties(src/test/test_lib.c\n                              PROPERTIES COMPILE_FLAGS ${RR_TEST_FLAGS})\n  if(LIBRT)\n    target_link_libraries(constructor ${LIBRT})\n    target_link_libraries(step_into_lib ${LIBRT})\n  endif()\n  target_link_libraries(constructor test_lib)\n  target_link_libraries(step_into_lib test_lib)\n\n  # cpuid test needs to link with cpuid_loop.S\n  if (x86ish)\n    add_executable(cpuid src/test/x86/cpuid.c src/test/x86/cpuid_loop.S)\n    post_build_executable(cpuid)\n    set_source_files_properties(src/test/x86/cpuid.c\n                                PROPERTIES COMPILE_FLAGS ${RR_TEST_FLAGS})\n    add_dependencies(cpuid Generated)\n    if(LIBRT)\n      target_link_libraries(cpuid ${LIBRT})\n    endif()\n  endif()\n\n  # Add exit_fast test executable\n  add_executable(exit_fast src/test/exit_fast.c)\n  set_target_properties(exit_fast\n                      PROPERTIES LINK_FLAGS \"-static -nostartfiles -nodefaultlibs ${LINKER_FLAGS}\")\n  post_build_executable(exit_fast)\n  add_dependencies(exit_fast Generated)\n  set_source_files_properties(src/test/exit_fast.c\n                              COMPILE_FLAGS \"-fno-stack-protector\")\n\n  # Check if we're running on KNL. If so, we allot more time to tests, due to\n  # reduced single-core performance.\n  execute_process(COMMAND cat /proc/cpuinfo OUTPUT_VARIABLE CPUINFO)\n  string(REGEX MATCH \"^.*(Xeon Phi).*$\" CPU_MODEL_PHI ${CPUINFO})\n  if(NOT \"${CPU_MODEL_PHI}\" STREQUAL \"\")\n    set(TEST_MONITOR_DEFAULT_TIMEOUT 480)\n  else()\n    set(TEST_MONITOR_DEFAULT_TIMEOUT 120)\n  endif()\n\n  # The real timeouts are handled by test-monitor\n  set(CTEST_TEST_TIMEOUT 1000)\n\n  function(configure_test test)\n    set_tests_properties(${test} PROPERTIES FAIL_REGULAR_EXPRESSION \"FAILED\" SKIP_RETURN_CODE 77)\n  endfunction(configure_test)\n\n  if(INSTALL_TESTSUITE)\n    install(TARGETS test_lib\n            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}/rr)\n    install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/bin/test-monitor\n            DESTINATION ${CMAKE_INSTALL_LIBDIR}/rr/testsuite/obj/bin)\n    install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/bin/exit_fast\n            DESTINATION ${CMAKE_INSTALL_LIBDIR}/rr/testsuite/obj/bin)\n    if (x86ish)\n      install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/bin/cpuid\n              DESTINATION ${CMAKE_INSTALL_LIBDIR}/rr/testsuite/obj/bin)\n    endif(x86ish)\n    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/CTestTestfile.cmake\n            DESTINATION ${CMAKE_INSTALL_LIBDIR}/rr/testsuite/obj)\n  endif(INSTALL_TESTSUITE)\n\n  foreach(test ${BASIC_TESTS} ${BASIC_CPP_TESTS} ${OTHER_TESTS})\n    if (NOT x86ish AND ${test} MATCHES \"^x86/.*\")\n      continue()\n    endif()\n    if (NOT ${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"aarch64\" AND ${test} MATCHES \"^arm/.*\")\n      continue()\n    endif()\n    get_filename_component(testname ${test} NAME)\n    add_test(${test}\n      bash source_dir/src/test/basic_test.run ${testname} \"\" bin_dir ${TEST_MONITOR_DEFAULT_TIMEOUT})\n    configure_test(${test})\n    add_test(${test}-no-syscallbuf\n      bash source_dir/src/test/basic_test.run ${testname} -n bin_dir ${TEST_MONITOR_DEFAULT_TIMEOUT})\n    configure_test(${test}-no-syscallbuf)\n  endforeach(test)\n\n  foreach(test ${TESTS_WITH_PROGRAM} ${TESTS_WITHOUT_PROGRAM})\n    if (NOT x86ish AND ${test} MATCHES \"^x86/.*\")\n      continue()\n    endif()\n    if (NOT ${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"aarch64\" AND ${test} MATCHES \"^arm/.*\")\n      continue()\n    endif()\n    get_filename_component(testname ${test} NAME)\n    add_test(${test}\n      bash source_dir/src/test/${test}.run ${testname} \"\" bin_dir ${TEST_MONITOR_DEFAULT_TIMEOUT})\n    configure_test(${test})\n    add_test(${test}-no-syscallbuf\n      bash source_dir/src/test/${test}.run ${testname} -n bin_dir ${TEST_MONITOR_DEFAULT_TIMEOUT})\n    configure_test(${test}-no-syscallbuf)\n  endforeach(test)\n\n  # Run 32-bit tests on 64-bit builds.\n  # We copy the test files into '32' subdirectories in the output\n  # directory, so we can set different compile options on them.\n  # This sucks but I can't find a better way to get CMake to build\n  # the same source file in two different ways.\n  if(rr_32BIT AND rr_64BIT)\n    foreach(header util.h nsutils.h ptrace_util.h util_syscall.h util_internal.h)\n      configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/src/test/${header}\"\n                    \"${CMAKE_CURRENT_BINARY_DIR}/32/${header}\"\n                    COPYONLY)\n    endforeach(header)\n\n    foreach(test ${BASIC_TESTS} ${TESTS_WITH_PROGRAM} x86/cpuid test_lib tick0 watchpoint_unaligned2 exit_fast)\n      configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/src/test/${test}.c\"\n                     \"${CMAKE_CURRENT_BINARY_DIR}/32/${test}.c\"\n                     COPYONLY)\n      set_source_files_properties(\"${CMAKE_CURRENT_BINARY_DIR}/32/${test}.c\"\n                                  PROPERTIES COMPILE_FLAGS \"-m32 ${RR_TEST_FLAGS}\")\n    endforeach(test)\n\n    foreach(test ${BASIC_CPP_TESTS})\n      configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/src/test/${test}.cc\"\n                     \"${CMAKE_CURRENT_BINARY_DIR}/32/${test}.cc\"\n                     COPYONLY)\n      set_source_files_properties(\"${CMAKE_CURRENT_BINARY_DIR}/32/${test}.cc\"\n                                  PROPERTIES COMPILE_FLAGS \"-m32 ${RR_TEST_FLAGS}\")\n    endforeach(test)\n\n    foreach(file x86/cpuid_loop.S x86/util.h)\n      configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/src/test/${file}\"\n                     \"${CMAKE_CURRENT_BINARY_DIR}/32/${file}\"\n                     COPYONLY)\n      set_source_files_properties(\"${CMAKE_CURRENT_BINARY_DIR}/32/${file}\"\n                                  PROPERTIES COMPILE_FLAGS \"-m32 ${RR_TEST_FLAGS}\")\n    endforeach(file)\n\n    foreach(test ${BASIC_TESTS} ${BASIC_CPP_TESTS} ${TESTS_WITH_PROGRAM})\n      if (NOT ${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"aarch64\" AND ${test} MATCHES \"^arm/.*\")\n        continue()\n      endif()\n      get_filename_component(testname ${test} NAME)\n      if(EXISTS \"${CMAKE_CURRENT_BINARY_DIR}/32/${test}.c\")\n        add_executable(${testname}_32 \"${CMAKE_CURRENT_BINARY_DIR}/32/${test}.c\")\n      else()\n        add_executable(${testname}_32 \"${CMAKE_CURRENT_BINARY_DIR}/32/${test}.cc\")\n      endif()\n      target_include_directories(${testname}_32 PRIVATE src/preload)\n      post_build_executable(${testname}_32)\n      add_dependencies(${testname}_32 Generated)\n      set_target_properties(${testname}_32 PROPERTIES LINK_FLAGS \"-m32 ${RR_TEST_FLAGS} ${LINKER_FLAGS}\")\n      if(LIBRT_32)\n        target_link_libraries(${testname}_32 ${LIBRT_32})\n      endif()\n      target_link_libraries(${testname}_32 -ldl)\n      # Part of the installable testsuite (test programs).\n      if (INSTALL_TESTSUITE)\n        install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/bin/${testname}_32\n                DESTINATION ${CMAKE_INSTALL_LIBDIR}/rr/testsuite/obj/bin)\n      endif (INSTALL_TESTSUITE)\n    endforeach(test)\n\n    add_executable(tick0_32 \"${CMAKE_CURRENT_BINARY_DIR}/32/tick0.c\")\n    post_build_executable(tick0_32)\n    set_target_properties(tick0_32\n      PROPERTIES LINK_FLAGS \"-m32 -static -nostdlib -nodefaultlibs\"\n      COMPILE_FLAGS \"-m32 -static -nostdlib -nodefaultlibs -O3 -g2 -DHAS_TICK0=1\")\n\n    add_executable(tick0_less_32 \"${CMAKE_CURRENT_BINARY_DIR}/32/tick0.c\")\n    post_build_executable(tick0_less_32)\n    set_target_properties(tick0_less_32\n      PROPERTIES LINK_FLAGS \"-m32 -static -nostdlib -nodefaultlibs\"\n      COMPILE_FLAGS \"-m32 -static -nostdlib -nodefaultlibs -O3 -g2\")\n\n    # Add exit_fast test executable\n    add_executable(exit_fast_32 \"${CMAKE_CURRENT_BINARY_DIR}/32/exit_fast.c\")\n    set_target_properties(exit_fast_32\n                        PROPERTIES LINK_FLAGS \"-static -nostartfiles -nodefaultlibs ${LINKER_FLAGS}\")\n    add_dependencies(exit_fast_32 Generated)\n    post_build_executable(exit_fast_32)\n    set_source_files_properties(\"${CMAKE_CURRENT_BINARY_DIR}/32/exit_fast.c\" COMPILE_FLAGS \"-fno-stack-protector\")\n\n    add_executable(watchpoint_unaligned2_32 \"${CMAKE_CURRENT_BINARY_DIR}/32/watchpoint_unaligned2.c\")\n    post_build_executable(watchpoint_unaligned2_32)\n    set_target_properties(watchpoint_unaligned2_32\n      PROPERTIES LINK_FLAGS \"-m32\"\n      COMPILE_FLAGS \"-m32 ${RR_TEST_FLAGS} -g -O3\")\n    add_dependencies(watchpoint_unaligned2_32 Generated)\n\n    add_library(test_lib_32\n      \"${CMAKE_CURRENT_BINARY_DIR}/32/test_lib.c\"\n    )\n    add_dependencies(test_lib_32 Generated)\n    set_target_properties(test_lib_32 PROPERTIES LINK_FLAGS \"-m32 ${LINKER_FLAGS}\")\n\n    if(LIBRT_32)\n      target_link_libraries(constructor_32 ${LIBRT_32})\n      target_link_libraries(step_into_lib_32 ${LIBRT_32})\n    endif()\n    target_link_libraries(constructor_32 test_lib_32)\n    target_link_libraries(step_into_lib_32 test_lib_32)\n\n    # cpuid test needs to link with cpuid_loop.S\n    add_executable(cpuid_32 32/x86/cpuid.c 32/x86/cpuid_loop.S)\n    post_build_executable(cpuid_32)\n    add_dependencies(cpuid_32 Generated)\n    set_target_properties(cpuid_32 PROPERTIES LINK_FLAGS \"-m32 ${LINKER_FLAGS}\")\n    if(LIBRT_32)\n      target_link_libraries(cpuid_32 ${LIBRT_32})\n    endif()\n\n    if(INSTALL_TESTSUITE)\n      install(TARGETS test_lib_32\n              LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}/rr)\n      install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/bin/cpuid_32\n              DESTINATION ${CMAKE_INSTALL_LIBDIR}/rr/testsuite/obj/bin)\n    endif(INSTALL_TESTSUITE)\n\n    foreach(test ${BASIC_TESTS} ${BASIC_CPP_TESTS} ${OTHER_TESTS})\n      if (NOT ${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"aarch64\" AND ${test} MATCHES \"^arm/.*\")\n        continue()\n      endif()\n      get_filename_component(testname ${test} NAME)\n      add_test(${test}-32\n        bash source_dir/src/test/basic_test.run ${testname}_32 \"\" bin_dir ${TEST_MONITOR_DEFAULT_TIMEOUT})\n      configure_test(${test}-32)\n      add_test(${test}-32-no-syscallbuf\n        bash source_dir/src/test/basic_test.run ${testname}_32 -n bin_dir ${TEST_MONITOR_DEFAULT_TIMEOUT})\n      configure_test(${test}-32-no-syscallbuf)\n    endforeach(test)\n\n    foreach(test ${TESTS_WITH_PROGRAM} ${TESTS_WITHOUT_PROGRAM})\n      if (NOT ${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"aarch64\" AND ${test} MATCHES \"^arm/.*\")\n        continue()\n      endif()\n      get_filename_component(testname ${test} NAME)\n      add_test(${test}-32\n        bash source_dir/src/test/${test}.run ${testname}_32 \"\" bin_dir ${TEST_MONITOR_DEFAULT_TIMEOUT})\n      configure_test(${test}-32)\n      add_test(${test}-32-no-syscallbuf\n        bash source_dir/src/test/${test}.run ${testname}_32 -n bin_dir ${TEST_MONITOR_DEFAULT_TIMEOUT})\n      configure_test(${test}-32-no-syscallbuf)\n    endforeach(test)\n  endif()\n\n  set(CHAOS_TESTS\n    core_count\n    futex_wakeup\n    getaffinity_core_count\n    pipe_wakeup\n    mmap_adjacent\n    mmap_bits\n    startup\n    starvation_multithreaded\n    starvation_singlethreaded\n  )\n\n  foreach(test ${CHAOS_TESTS})\n    add_executable(${test} src/chaos-test/${test}.c)\n    post_build_executable(${test})\n    if(LIBRT)\n      target_link_libraries(${test} ${LIBRT})\n    endif()\n  endforeach(test)\n\n  add_executable(test-monitor src/test-monitor/test-monitor.cc)\n\n  add_executable(ftrace_helper src/ftrace/ftrace_helper.c)\n  add_executable(counters src/counters-test/counters.cc)\n  set_source_files_properties(src/counters-test/counters.cc\n                              PROPERTIES COMPILE_FLAGS \"-fno-stack-protector\")\nendif()\n\ninclude(ProcessorCount)\nProcessorCount(N)\nif(NOT N EQUAL 0)\n  set(JFLAG -j${N})\nendif()\n\nadd_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND} --verbose ${JFLAG} USES_TERMINAL)\n# Run only syscallbuf-enabled and native-bitness tests\nadd_custom_target(fastcheck COMMAND ${CMAKE_CTEST_COMMAND} --verbose --exclude-regex '[-]' ${JFLAG} USES_TERMINAL)\n\n##--------------------------------------------------\n## Package configuration\n\ninclude (InstallRequiredSystemLibraries)\n\nset(CPACK_PACKAGE_NAME \"rr\")\nset(CPACK_PACKAGE_VERSION_MAJOR \"${rr_VERSION_MAJOR}\")\nset(CPACK_PACKAGE_VERSION_MINOR \"${rr_VERSION_MINOR}\")\nset(CPACK_PACKAGE_VERSION_PATCH \"${rr_VERSION_PATCH}\")\nset(CPACK_SYSTEM_NAME \"${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR}\")\n\nset(CPACK_OUTPUT_FILE_PREFIX dist)\nset(CPACK_GENERATOR \"TGZ;RPM;DEB\" CACHE STRING \"CPack generators\")\nset(CPACK_SOURCE_GENERATOR \"TGZ\")\nset(CPACK_BINARY_DIR \"${PROJECT_BINARY_DIR}\")\n# Don't strip binaries. It's important/useful for librrpreload at least to\n# have debug symbols. For package releases, pass -Dstrip=TRUE to strip symbols\n# from the rr binary at build time.\nset(CPACK_STRIP_FILES FALSE)\n\nset(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_SOURCE_DIR}/LICENSE\")\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY\n  \"Lightweight tool for recording and replaying execution of applications (trees of processes and threads)\")\nset(CPACK_PACKAGE_DESCRIPTION_FILE \"${CMAKE_SOURCE_DIR}/README.md\")\nset(CPACK_PACKAGE_VENDOR \"rr-debugger\")\n\nset(CPACK_DEBIAN_PACKAGE_MAINTAINER \"rr-debugger\")\nset(CPACK_DEBIAN_PACKAGE_SECTION \"devel\")\nif(${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"x86_64\")\n  set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE \"amd64\")\nelseif(${CMAKE_SYSTEM_PROCESSOR} MATCHES \"i.86\")\n  set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE \"i386\")\nelseif(${CMAKE_SYSTEM_PROCESSOR} MATCHES \"arm.*\")\n  set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE \"arm\")\nendif()\n\n# XXX Cmake 2.8.7 doesn't know how to avoid specifying /usr,\n# /usr/bin, etc, as files to be installed, but distros are finicky\n# about their specification.  We want to manually filter those paths\n# out of our install list but 2.8.7 also isn't capable of that.\nset(CPACK_RPM_USER_BINARY_SPECFILE \"${CMAKE_SOURCE_DIR}/rr.spec\")\nset(CPACK_RPM_PACKAGE_RELEASE 1)\nset(CPACK_RPM_PACKAGE_GROUP \"Development/Debuggers\")\nset(CPACK_RPM_PACKAGE_LICENSE \"MIT and BSD\")\n# Prevent binaries from being stripped\nset(CPACK_RPM_SPEC_INSTALL_POST \"/bin/true\")\n\ninclude (CPack)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.6748046875,
          "content": "# Community Participation Guidelines\n\nThis repository is governed by Mozilla's code of conduct and etiquette guidelines. \nFor more details, please read the\n[Mozilla Community Participation Guidelines](https://www.mozilla.org/about/governance/policies/participation/). \n\n## How to Report\nFor more information on how to report violations of the Community Participation Guidelines, please read our '[How to Report](https://www.mozilla.org/about/governance/policies/participation/reporting/)' page.\n\n<!--\n## Project Specific Etiquette\n\nIn some cases, there will be additional project etiquette i.e.: (https://bugzilla.mozilla.org/page.cgi?id=etiquette.html).\nPlease update for your project.\n-->\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.6728515625,
          "content": "## Submission Checklist\n\nPlease make sure you go through this list before submitting a patch.  The rules aren't hard and fast, but mostly adhering to them will make for quicker mergings.\n\n- [ ] Does your PR add support for a new kernel API?  For example, supporting a new syscall.  If so, your patch should include at least one new test for the API.  This is usually pretty easy.  See `$rr/src/test` for examples.\n\n- [ ] Did you run the rr test suite (including your new tests, if any), and pass all the tests?  `make -C $objdir check`.  Unfortunately, rr doesn't have automated infrastructure that can run the tests yet, so developers have to run them locally.\n\n- [ ] If you created new files for your PR, did you `git add` them?  Habitually (or with a script or push hook) checking `git status` is a good habit to acquire.\n\n- [ ] If you changed the trace layout or format, did you bump `TRACE_VERSION`?\n\n- [ ] If you added new command-line parameters, did you update `print_usage()` to document them?\n\n- [ ] Does your PR apply cleanly on top of upstream/master HEAD?  It's dangerous to have someone else sort out your merge conflicts, so just don't do it.  Best of all is to have a PR *rebased* on top of upstream/master HEAD, so that the merge is simply a fast-forward.\n\n- [ ] If your PR includes multiple changesets, do they all (i) build cleanly in sequence; (ii) pass all tests in sequence?  This is important for bisecting over commit history.\n\n- [ ] If your PR is a very large-scale change (for example, a rewrite in Rust to use the visitor pattern), did you discuss the proposed changes in an issue or the mailing list?  It's hard to review large patches that just fall in ones lap.  It's much easier to discuss the important changes at a high level and then approach the patch knowing what's important and what's not.\n\n- [ ] If your PR is large or includes many changesets, would it have been possible to break the changes into a series of smaller PRs?  For example, it's hard to review a big patch that, say, fixes whitespace errors in a file along with a one-line, important, bug fix.  It's much easier to review one PR that fixes whitespace (which can just be skimmed), and then review another PR that makes the one-line bug fix (which would be scrutinized more).  This approach is also better for the patch author in that it usually allows the work to land faster, and reduces the burden of continually un-bit-rotting large, trivial, changes.\n\n- [ ] Did you check your code is formatted correctly? It's easiest to run `scripts/reformat.sh` on each commit.\n\n## Coding Guidelines\n\nrr uses assertions heavily, for code documentation, for automated checking that the code matches the documentation, and to improve the power of automated tests. Assertions are turned on in release builds. Whenever you depend on an invariant not immediately obvious, consider adding assertions to check it.\n\nrr ships with debugging enabled and compiler optimizations disabled for the rr process itself. That's because rr performance almost always depends on algorithmic issues --- minimizing the number of system calls, and especially, minimizing the number of context switches between the tracees and the rr process --- much more than the performance of the code running in the rr process. For the same reason, rr-process code should be as simple as possible even if that's less efficient. To some extent, once we're running code in the rr process, we've already lost performance-wise. OTOH we do enable optimizations in `preload.c` because that runs in tracees.\n\n## Coding Style\n\nPut braces around all statement blocks, even one-line `if` bodies etc.\n\nAll C++ declarations are in the `rr` namespace.\n\nAll C++ types are in CamelCase; all C types are underscore_names.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 21.7861328125,
          "content": "Copyright (c) 2013 Mozilla Foundation\nCopyright 2015 VMware, Inc\nCopyright 2015 Google Inc.\n\nContributors: Albert Noll <noll.albert@gmail.com>, Thomas Anderegg <thomas@tanderegg.com>, Nimrod Partush <nimrodpar@gmail.com>\n              Andrew Walton <awalton@vmware.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\n/*\n * Copyright 2002 Niels Provos <provos@citi.umich.edu>\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n====================================================================================\n\nThe following applies only to files under third-party/gdb:\n\n<!-- Copyright (C) 2010-2014 Free Software Foundation, Inc.\n     Copying and distribution of this file, with or without modification,\n     are permitted in any medium without royalty provided the copyright\n     notice and this notice are preserved.  -->\n\n====================================================================================\n\nThe following applies only to files under third-party/zen-pmu-workaround:\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.\n                       51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Library General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate qto certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\f\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\f\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\f\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\f\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\f\n\t    How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Library General\nPublic License instead of this License.\n\n====================================================================================\n\nThe following applies only to src/test/dlchecksum.c:\n\n/*\n  Copyright (C) The Julia contributors.\n  Copyright (C) 2013 Mark Adler\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the author be held liable for any damages\n  arising from the use of this software.\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely, subject to the following restrictions:\n  1. The origin of this software must not be misrepresented; you must not\n     claim that you wrote the original software. If you use this software\n     in a product, an acknowledgment in the product documentation would be\n     appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be\n     misrepresented as being the original software.\n  3. This notice may not be removed or altered from any source distribution.\n  Mark Adler\n  madler@alumni.caltech.edu\n*/\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.896484375,
          "content": "# Overview\n\n[![Build and test status](https://github.com/rr-debugger/rr/actions/workflows/build-and-test-main.yml/badge.svg?branch=master)](https://github.com/rr-debugger/rr/actions)\n\nrr is a lightweight tool for recording, replaying and debugging execution of applications (trees of processes and threads).\nDebugging extends gdb with very efficient reverse-execution, which in combination with standard gdb/x86 features like hardware data watchpoints, makes debugging much more fun. More information about the project, including instructions on how to install, run, and build rr, is at [https://rr-project.org](https://rr-project.org). The best technical overview is currently the paper [Engineering Record And Replay For Deployability: Extended Technical Report](https://arxiv.org/pdf/1705.05937.pdf).\n\nOr go directly to the [installation and building instructions](https://github.com/rr-debugger/rr/wiki/Building-And-Installing).\n\nPlease contribute!  Make sure to review the [pull request checklist](/CONTRIBUTING.md) before submitting a pull request.\n\nIf you find rr useful, please [add a testimonial](https://github.com/rr-debugger/rr/wiki/Testimonials).\n\nrr development is sponsored by [Pernosco](https://pernos.co) and was originated by [Mozilla](https://www.mozilla.org).\n\n# System requirements\n\n* Linux kernel >= 4.7 (for support of `__WALL` in `waitid()`)\n  * rr 5.6.0 worked with kernel 3.11 (requiring `PTRACE_SETSIGMASK`)\n* rr currently requires either:\n  * An Intel CPU with [Nehalem](https://en.wikipedia.org/wiki/Nehalem_%28microarchitecture%29) (2010) or later microarchitecture.\n  * Certain AMD Zen or later processors (see https://github.com/rr-debugger/rr/wiki/Zen)\n  * Certain AArch64 microarchitectures (e.g. ARM Neoverse N1 or the Apple Silicon M-series)\n* Running in a VM guest is supported, as long as the VM supports virtualization of hardware performance counters. (VMware and KVM are known to work; Xen does not.)\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 1.216796875,
          "content": "# -*- mode: ruby -*-\n# vi: set ft=ruby :\n# Author: David Manouchehri\n\nVagrant.configure(\"2\") do |config|\n\tconfig.vm.box = \"bento/ubuntu-16.04\"\n\n\tconfig.vm.synced_folder \".\", \"/vagrant\", disabled: true\n\n\tconfig.vm.provision \"shell\", inline: <<-SHELL\n\t\tapt-get update\n\t\t# DEBIAN_FRONTEND=noninteractive apt-get -y upgrade\n\t\tDEBIAN_FRONTEND=noninteractive apt-get -y install ccache cmake make g++-multilib gdb pkg-config realpath python-pexpect manpages-dev git ninja-build capnproto libcapnp-dev zlib1g-dev\n\t\tapt-get clean\n\tSHELL\n\n\tconfig.vm.provision \"shell\", privileged: false, inline: <<-SHELL\n\t\tgit clone https://github.com/rr-debugger/rr.git\n\t\tcd rr\n\t\tmkdir obj\n\t\tcd obj\n\t\tcmake .. -DPYTHON_EXECUTABLE=/usr/bin/python\n\t\tmake -j8\n\t\tmake test\n\tSHELL\n\n\tconfig.vm.provision \"shell\", inline: <<-SHELL\n\t\tcd /home/vagrant/rr/obj/\n\t\tmake install\n\tSHELL\n\n\t%w(vmware_fusion vmware_workstation vmware_appcatalyst).each do |provider|\n\t\tconfig.vm.provider provider do |v|\n\t\t\tv.vmx[\"memsize\"] = \"4096\"\n\t\t\tv.vmx['vpmc.enable'] = 'true'\n\t\t\tv.vmx['vhv.enable'] = 'true'\n\t\t\tv.vmx['vvtd.enable'] = 'true'\n\t\t\tv.vmx['monitor_control.disable_hvsim_clusters'] = 'true'\n\t\t\tv.vmx['virtualHW.version'] = '14'\n\t\t\tv.vmx['ethernet0.virtualDev'] = 'vmxnet3'\n\t\tend\n\tend\nend\n"
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 0.0859375,
          "content": "#!/usr/bin/env bash\n\n# Helper to make |./configure && make| do what you expect.\ncmake .\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "release-process",
          "type": "tree",
          "content": null
        },
        {
          "name": "rr.spec",
          "type": "blob",
          "size": 1.3427734375,
          "content": "Buildroot: @CPACK_BINARY_DIR@/_CPack_Packages/@CPACK_SYSTEM_NAME@/RPM/@CPACK_PACKAGE_FILE_NAME@\nSummary:        Lightweight tool for recording and replaying execution of applications (trees of processes and threads)\nName:           @CPACK_PACKAGE_NAME@\nVersion:        @CPACK_PACKAGE_VERSION@\nRelease:        @CPACK_RPM_PACKAGE_RELEASE@\nLicense:        @CPACK_RPM_PACKAGE_LICENSE@\nGroup:          Development/Debuggers\nVendor:         @CPACK_PACKAGE_VENDOR@\nPrefix:         @CPACK_PACKAGING_INSTALL_PREFIX@\n@CPACK_RPM_PACKAGE_REQUIRES@\n\n%define _rpmfilename @CPACK_PACKAGE_FILE_NAME@.rpm\n%define _unpackaged_files_terminate_build 0\n \n%description\nrr is a lightweight tool for recording and replaying execution of applications (trees of processes and threads).  For more information, please visit\n\nhttp://rr-project.org\n \n# This is a shortcutted spec file generated by CMake RPM generator\n# we skip _install step because CPack does that for us.\n# We do only save CPack installed tree in _prepr\n# and then restore it in build.\n\n%files\n%defattr(-,root,root,-)\n@CPACK_PACKAGING_INSTALL_PREFIX@/lib64/*\n@CPACK_PACKAGING_INSTALL_PREFIX@/bin/rr\n@CPACK_PACKAGING_INSTALL_PREFIX@/bin/rr_exec_stub*\n@CPACK_PACKAGING_INSTALL_PREFIX@/bin/signal-rr-recording.sh\n@CPACK_PACKAGING_INSTALL_PREFIX@/share/rr/*.xml\n\n%changelog\n* Tue Jun 25 2013 Chris Jones <cjones@triton> - \n- Initial build.\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "snap",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "third-party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}