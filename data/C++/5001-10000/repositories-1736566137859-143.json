{
  "metadata": {
    "timestamp": 1736566137859,
    "page": 143,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "FastLED/FastLED",
      "stars": 6617,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0546875,
          "content": "   BasedOnStyle: LLVM\n   IndentWidth: 4\n   UseTab: Never"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5205078125,
          "content": "*.gch\n*~\n/docs/html\n/docs/latex\n/docs/doxygen-awesome-css\ncomponents/\n\n# Build outputs\n.build/\nbuild/\nout/\n\n# Misc\n.DS_Store\nThumbs.db\n\n# PlatformIO\n.pio/\n.pioenvs/\n.piolibdeps/\n.platformio/\n.vscode/c_cpp_properties.json\n.aider*\n!.aider.conf.yml\n!.aiderignore\nci/native/.vscode/\ntmp/\nfirmware_sizes.csv\n.aiderignore\nuv.lock\n.venv/\n__pycache__\n*.pyc\n**/.mypy_cache/\n**/.pytest_cache/\n**/.ruff_cache/\ndev/dev.ino.cpp\nci/tmp/\nci/tests/output\n\n# sometimes appears on windows during test compilation\nci/-\n**/fastled_js\ndist\n\nignore/\n.env\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "APA102.md",
          "type": "blob",
          "size": 4.8134765625,
          "content": "# Special Notes on APA102 and the 'High Definition' Mode in FastLED\n\nThe APA102 LED driver includes a 5-bit per-LED brightness component. Previously, this feature was not fully utilized, except through a workaround that defined a global brightness affecting all LEDs uniformly rather than individually.\n\nIn FastLED the APA102 chipset will have extra resolution in comparison to the WS2812 RGB8 mode.\n\nThere are two modes:\n  * APA102 \"Regular Mode\"\n    * Has enhanced color resolution when using the \"global brightness\" factor\n  * APA102HD Mode\n    * Applies automatic gamma correction at the driver level using \"pseudo 13-bit\" color mixing.\n\n**APA102HD Mode**\n\n[example: examples/APA102HD](examples/Apa102HD/)\n\nBy introducing a 5-bit gamma bit-shift algorithm, we now effectively leverage this per-LED brightness control. Faced with the decision to either rewrite the entire `CRGB` library to expose the 5-bit brightness—including adaptations for formats like RGBW—or to retain the existing RGB8 format used by FastLED and implement the enhancement at the driver level, the latter option was chosen. This approach avoids widespread changes and maintains compatibility; if RGB8 suffices for game development, it is adequate for LED development as well.\n\nThe term \"Pseudo-13-bit\" arises because the additional resolution becomes significant only when all color components are at low values. For example, colors like `CRGB(255, 255, 254)` or `CRGB(255, 1, 1)` do not benefit from increased resolution due to the dominance of the brighter components. However, in low-light conditions with colors such as `CRGB(8, 8, 8)`, where the maximum component value is low, the pseudo-13-bit algorithm significantly enhances resolution—precisely where increased resolution is most desired.\n\nGamma correction is applied to preserve the RGB8 format and because future LEDs are expected to support gamma correction inherently. In game development, the 0-255 color values are based on the gamma scale rather than the linear power scale. LEDs like the WS2812 operate on a linear power scale, which results in washed-out, undersaturated colors when displaying captured video directly. Implementing software gamma correction for RGB8 severely reduces color resolution.\n\nTo address this, an internal gamma scale mapping is applied:\n\n```\nRGB8 → RGB16 + 5-bit gamma → RGB8 + 5-bit gamma\n```\n\nDuring the conversion back to RGB8, the brightness from the 5-bit gamma is bit-shifted into the RGB components. Each time the 5-bit brightness is shifted right, the RGB components are shifted left. For example:\n\nStarting with `RGB(4, 4, 4)` and a 5-bit brightness value of 31:\n\n- Shift RGB components left, shift 5-bit brightness right:\n  - `RGB(8, 8, 8)`, brightness 15\n  - `RGB(16, 16, 16)`, brightness 7\n  - `RGB(32, 32, 32)`, brightness 3\n  - `RGB(64, 64, 64)`, brightness 1 (final state)\n\nThis simplified illustration omits that the actual processing occurs in 16-bit space rather than 8-bit, but the fundamental concept remains the same.\n\nBy truncating the gamma-corrected RGB16 values back to RGB8, the LEDs receive pre-boosted RGB components and pre-dimmed 5-bit brightness values. This method preserves minor color details over a greater range, offering a valuable trade-off and leading to the designation of this mode as \"APA102HD.\"\n\nIn version 3.9.0, the algorithm was completely rewritten to function natively on 8-bit controllers like the `__AVR__` chipsets without significant performance loss. Previously, accumulating the numerator and denominator during the brightness bit-shifting process introduced extra bits that were ultimately truncated. Testing revealed that equivalent resolution could be achieved using straightforward bit-shifting, which also significantly reduced code size on AVR platforms with the new algorithm.\n\n**Further Enhancements in Version 3.9.0**\n\nAdditionally, version 3.9.0 separated the color temperature from the global brightness scale. Before this update, global brightness was pre-mixed with the component scales—a method suitable for the WS2812's RGB8 format but not for the APA102's RGB8 plus 5-bit brightness. The update saw the global brightness and color scales separated for non-AVR chipsets. While the WS2812 continues to use pre-mixed values for performance reasons on AVR chipsets, the APA102 now performs component mixing within the \"pseudo-13-bit space.\"\n\nAlthough APA102HD mode offers the highest dynamic range, the standard APA102 mode also benefits from increased resolution when adjusting global brightness. In this mode, instead of pre-mixing scales and multiplying them against each `CRGB` value, the global brightness is applied to the 5-bit brightness component, and only the color scales are multiplied against the `CRGB` values. This approach is superior because each component of the color scale typically exceeds 127, providing ample high-order bits to preserve color information.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.7314453125,
          "content": "# FastLED\n# https://github.com/FastLED/FastLED\n# MIT License\n\ncmake_minimum_required(VERSION 3.5)\n\nfile(GLOB FastLED_SRCS \"src/*.cpp\")\nfile(GLOB FastLED_SRCS \"src/fl/**/*.cpp\")\nfile(GLOB FastLED_SRCS \"src/sensors/**/*.cpp\")\nfile(GLOB FastLED_SRCS \"src/fx/**/*.cpp\")\nlist(REMOVE_ITEM FastLED_SRCS \"${CMAKE_CURRENT_SOURCE_DIR}/src/stub_main.cpp\")\n\nfile(GLOB ESP32_SRCS \"src/platforms/esp/32/*.cpp\")\nfile(GLOB ESP32_THIRD_PARTY \"src/third_party/*.c\")\nfile(GLOB ESP32_THIRD_PARTY \"src/third_party/*.cpp\")\nlist(APPEND FastLED_SRCS ${ESP32_SRCS})\n\nidf_component_register(SRCS ${FastLED_SRCS} ${ESP32_LED_STRIP_COMPONENT_SRCS}\n                       INCLUDE_DIRS \"src\"\n                       REQUIRES arduino-esp32 esp_driver_rmt driver)\n\nproject(FastLED)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.8837890625,
          "content": "## Contributing\n\n[![clone and compile](https://github.com/FastLED/FastLED/actions/workflows/build_default.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_default.yml)\n\nIf you want to make changes to FastLED then please\n\n  * [Fork](https://github.com/FastLED/FastLED/fork) the https://github.com/FastLED/FastLED repo into your github account.\n  * Open up the folder with VSCode.\n    * Make sure VSCode has the platformio extension.\n  * Once FastLED is loading with platformio, give it some time to download the dependencies.\n  * Click the platformio compile\n    * Then upload to your device\n  * See [dev/dev.ino](dev/dev.ino).\n<img width=\"1220\" alt=\"image\" src=\"https://github.com/user-attachments/assets/66f1832d-3cfb-4633-8af8-e66148bcad1b\">\n\nWhen changes are made then push to your fork to your repo and git will give you a url to trigger a pull request into the master repo.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 FastLED\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "PORTING.md",
          "type": "blob",
          "size": 4.0361328125,
          "content": "Platform Porting Guide\n==========================\n\n# Fast porting for a new board on existing hardware\n\nSometimes \"porting\" FastLED simply consists of supplying new pin definitions for the given platform.  For example, platforms/avr/fastpin_avr.h contains various pin definitions for all the AVR variant chipsets/boards that FastLED supports.  Defining a set of pins involves setting up a set of definitions - for example here's one full set from the avr fastpin file:\n\n```\n#elif defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644P__)\n\n_FL_IO(A); _FL_IO(B); _FL_IO(C); _FL_IO(D);\n\n#define MAX_PIN 31\n_FL_DEFPIN(0, 0, B); _FL_DEFPIN(1, 1, B); _FL_DEFPIN(2, 2, B); _FL_DEFPIN(3, 3, B);\n_FL_DEFPIN(4, 4, B); _FL_DEFPIN(5, 5, B); _FL_DEFPIN(6, 6, B); _FL_DEFPIN(7, 7, B);\n_FL_DEFPIN(8, 0, D); _FL_DEFPIN(9, 1, D); _FL_DEFPIN(10, 2, D); _FL_DEFPIN(11, 3, D);\n_FL_DEFPIN(12, 4, D); _FL_DEFPIN(13, 5, D); _FL_DEFPIN(14, 6, D); _FL_DEFPIN(15, 7, D);\n_FL_DEFPIN(16, 0, C); _FL_DEFPIN(17, 1, C); _FL_DEFPIN(18, 2, C); _FL_DEFPIN(19, 3, C);\n_FL_DEFPIN(20, 4, C); _FL_DEFPIN(21, 5, C); _FL_DEFPIN(22, 6, C); _FL_DEFPIN(23, 7, C);\n_FL_DEFPIN(24, 0, A); _FL_DEFPIN(25, 1, A); _FL_DEFPIN(26, 2, A); _FL_DEFPIN(27, 3, A);\n_FL_DEFPIN(28, 4, A); _FL_DEFPIN(29, 5, A); _FL_DEFPIN(30, 6, A); _FL_DEFPIN(31, 7, A);\n\n#define HAS_HARDWARE_PIN_SUPPORT 1\n```\n\nThe ```_FL_IO``` macro is used to define the port registers for the platform while the ```_FL_DEFPIN``` macro is used to define pins.  The parameters to the macro are the pin number, the bit on the port that represents that pin, and the port identifier itself.  On some platforms, like the AVR, ports are identified by letter.  On other platforms, like arm, ports are identified by number.\n\nThe ```HAS_HARDWARE_PIN_SUPPORT``` define tells the rest of the FastLED library that there is hardware pin support available.  There may be other platform specific defines for things like hardware SPI ports and such.\n\n## Setting up the basic files/folders\n\n* Create platform directory (e.g. platforms/arm/kl26)\n* Create configuration header led_sysdefs_arm_kl26.h:\n  * Define platform flags (like FASTLED_ARM/FASTLED_TEENSY)\n  * Define configuration parameters re: interrupts, or clock doubling\n  * Include extar system header files if needed\n* Create main platform include, fastled_arm_kl26.h\n  * Include the various other header files as needed\n* Modify led_sysdefs.h to conditionally include platform sysdefs header file\n* Modify platforms.h to conditionally include platform fastled header\n\n## Porting fastpin.h\n\nThe heart of the FastLED library is the fast pin access.  This is a templated class that provides 1-2 cycle pin access, bypassing digital write and other such things.  As such, this will usually be the first bit of the library that you will want to port when moving to a new platform.  Once you have FastPIN up and running then you can do some basic work like testing toggles or running bit-bang'd SPI output.\n\nThere's two low level FastPin classes.  There's the base FastPIN template class, and then there is FastPinBB which is for bit-banded access on those MCUs that support bitbanding.  Note that the bitband class is optional and primarily useful in the implementation of other functionality internal to the platform.  This file is also where you would do the pin to port/bit mapping defines.\n\nExplaining how the macros work and should be used is currently beyond the scope of this document.\n\n## Porting fastspi.h\n\nThis is where you define the low level interface to the hardware SPI system (including a writePixels method that does a bunch of housekeeping for writing led data).  Use the fastspi_nop.h file as a reference for the methods that need to be implemented.  There are ofteh other useful methods that can help with the internals of the SPI code, I recommend taking a look at how the various platforms implement their SPI classes.\n\n## Porting clockless.h\n\nThis is where you define the code for the clockless controllers.  Across ARM platforms this will usually be fairly similar - though different arm platforms will have different clock sources that you can/should use.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.12109375,
          "content": "FastLED Library\n===========\n\n\n\n[![arduino-library-badge](https://www.ardu-badge.com/badge/FastLED.svg)](https://www.ardu-badge.com/FastLED)\n[![build status](https://github.com/FastLED/FastLED/workflows/build/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build.yml)\n[![unit tests](https://github.com/FastLED/FastLED/actions/workflows/build_unit_test.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_unit_test.yml)\n[![Arduino Library Lint](https://github.com/FastLED/FastLED/actions/workflows/arduino_library_lint.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/arduino_library_lint.yml)\n[![Documentation](https://img.shields.io/badge/Docs-Doxygen-blue.svg)](http://fastled.io/docs)\n[![Reddit](https://img.shields.io/badge/reddit-/r/FastLED-orange.svg?logo=reddit)](https://www.reddit.com/r/FastLED/)\n\nA robust and mature led driver for Arduino/Esp32/RaspberryPi/Atmega/Teensy and more. Supports nearly every single led chipset in existence.\n\n<a href=\"https://star-history.com/#fastled/fastled&Date\">\n <picture>\n   <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://api.star-history.com/svg?repos=fastled/fastled&type=Date&theme=dark\" />\n   <source media=\"(prefers-color-scheme: light)\" srcset=\"https://api.star-history.com/svg?repos=fastled/fastled&type=Date\" />\n   <img alt=\"Star History Chart\" src=\"https://api.star-history.com/svg?repos=fastled/fastled&type=Date\" />\n </picture>\n</a>\n\n\n## About\n\nThis is a library for easily & efficiently controlling a wide variety of LED chipsets, like the ones\nsold by Adafruit (NeoPixel, DotStar, LPD8806), Sparkfun (WS2801), and AliExpress.  In addition to writing to the\nLEDs, this library also includes a number of functions for high-performing 8-bit math for manipulating\nyour RGB values, as well as low level classes for abstracting out access to pins and SPI hardware, while\nstill keeping things as fast as possible.\n\nWe have multiple goals with this library:\n\n* Quick start for new developers - hook up your LEDs and go, no need to think about specifics of the LED chipsets being used\n* Zero pain switching LED chipsets - you get some new LEDs that the library supports, just change the definition of LEDs you're using, et. voila!  Your code is running with the new LEDs.\n* High performance - with features like zero cost global brightness scaling, high performance 8-bit math for RGB manipulation, and some of the fastest bit-bang'd SPI support around, FastLED wants to keep as many CPU cycles available for your LED patterns as possible\n\n\n## Example\n\n*This is an Arduino Sketch that will run on Arduino Uno/Esp32/Raspberri Pi*\n```C++\n// New feature! Overclocking WS2812\n// #define FASTLED_OVERCLOCK 1.2 // 20% overclock ~ 960 khz.\n#include <FastLED.h>\n#define NUM_LEDS 60\n#define DATA_PIN 6\nCRGB leds[NUM_LEDS];\nvoid setup() { FastLED.addLeds<NEOPIXEL, DATA_PIN>(leds, NUM_LEDS); }\nvoid loop() {\n\tleds[0] = CRGB::White; FastLED.show(); delay(30);\n\tleds[0] = CRGB::Black; FastLED.show(); delay(30);\n}\n```\n\nFor more examples see this [link](examples).\n\n\n\n\n## Supported Platforms\n### Arduino\n\n[![uno](https://github.com/FastLED/FastLED/actions/workflows/build_uno.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_uno.yml)\n\n\n[![attiny13](https://github.com/FastLED/FastLED/actions/workflows/build_attiny13.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_attiny13.yml)\n*needs pin definitions for this board*\n\n\n[![attiny85](https://github.com/FastLED/FastLED/actions/workflows/build_attiny85.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_attiny85.yml)\n\n[![attiny88](https://github.com/FastLED/FastLED/actions/workflows/build_attiny88.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_attiny88.yml)\n\n[![attiny1604](https://github.com/FastLED/FastLED/actions/workflows/build_attiny1604.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_attiny1604.yml)\n\n\n[![attiny1616](https://github.com/FastLED/FastLED/actions/workflows/build_attiny1616.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_attiny1616.yml)\n\n\n[![attiny4313](https://github.com/FastLED/FastLED/actions/workflows/build_attiny4313.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_attiny4313.yml)\n*needs pin definitions for this board*\n\n\n[![yun](https://github.com/FastLED/FastLED/actions/workflows/build_yun.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_yun.yml)\n\n\n[![digix](https://github.com/FastLED/FastLED/actions/workflows/build_digix.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_digix.yml)\n\n\n[![uno_r4_wifi](https://github.com/FastLED/FastLED/actions/workflows/build_uno_r4_wifif.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_uno_r4_wifif.yml)\n\n\n[![nano_every](https://github.com/FastLED/FastLED/actions/workflows/build_nano_every.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_nano_every.yml)\n\n[![Arduino Giga-R1](https://github.com/FastLED/FastLED/actions/workflows/build_giga_r1.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_giga_r1.yml)\n*Multiple issues with this board. Pins aren't defined, F_CPU is not defined nor is it constant. And lots of other issues. Help wanted!*\n\n\n### Teensy\n[![teensy30](https://github.com/FastLED/FastLED/actions/workflows/build_teensy30.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_teensy30.yml)\n\n\n[![teensy31](https://github.com/FastLED/FastLED/actions/workflows/build_teensy31.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_teensy31.yml)\n\n\n[![teensyLC](https://github.com/FastLED/FastLED/actions/workflows/build_teensyLC.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_teensyLC.yml)\n\n\n[![teensy40](https://github.com/FastLED/FastLED/actions/workflows/build_teensy40.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_teensy40.yml)\n\n\n[![teensy41](https://github.com/FastLED/FastLED/actions/workflows/build_teensy41.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_teensy41.yml)\n\n*Specific Features*\n\n[![teensy_octoWS2811](https://github.com/FastLED/FastLED/actions/workflows/build_teensy_octo.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_teensy_octo.yml)\n\n[![teensy41 ObjectFLED](https://github.com/FastLED/FastLED/actions/workflows/build_teensy41_ofled.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_teensy41_ofled.yml)\n\n### NRF\n\n[![nrf52840_sense](https://github.com/FastLED/FastLED/actions/workflows/build_adafruit_feather_nrf52840_sense.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_adafruit_feather_nrf52840_sense.yml)\n\n[![nordicnrf52_dk](https://github.com/FastLED/FastLED/actions/workflows/build_nrf52840_dk.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_nrf52840_dk.yml)\n\n[![adafruit_xiaoblesense](https://github.com/FastLED/FastLED/actions/workflows/build_adafruit_xiaoblesense.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_adafruit_xiaoblesense.yml)\n\n[![nrf52_xiaoblesense](https://github.com/FastLED/FastLED/actions/workflows/build_nrf52_xiaoblesense.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_nrf52_xiaoblesense.yml)\n(This board has mbed engine but doesn't compile against Arduino.h right now for some unknown reason.)\n\n### STM\n\n[![bluepill](https://github.com/FastLED/FastLED/actions/workflows/build_bluepill.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_bluepill.yml)\n\n[![maple_mini](https://github.com/FastLED/FastLED/actions/workflows/build_maple_map.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_maple_map.yml)\n\n[![stm103tb](https://github.com/FastLED/FastLED/actions/workflows/build_stm103tb.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_stm103tb.yml)\n(PlatformIO doesn't support this board yet and we don't know what the build info is to support this is yet)\n\n### Raspberry Pi\n\n[![rp2040](https://github.com/FastLED/FastLED/actions/workflows/build_rp2040.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_rp2040.yml)\n\n\n[![rp2350](https://github.com/FastLED/FastLED/actions/workflows/build_rp2350.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_rp2350.yml)\n\n\n### Esp\n\n[![esp32-8266](https://github.com/FastLED/FastLED/actions/workflows/build_esp8622.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_esp8622.yml)\n\n\n[![esp32dev](https://github.com/FastLED/FastLED/actions/workflows/build_esp32dev.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_esp32dev.yml)\n\n\n[![esp32wroom](https://github.com/FastLED/FastLED/actions/workflows/build_esp32wroom.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_esp32wroom.yml)\n\n\n[![esp32c2](https://github.com/FastLED/FastLED/actions/workflows/build_esp32c2.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_esp32c2.yml)\n*might work with alternative settings, missing RMT device*\n\n\n[![esp32c3](https://github.com/FastLED/FastLED/actions/workflows/build_esp32c3.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_esp32c3.yml)\n\n\n[![esp32s3](https://github.com/FastLED/FastLED/actions/workflows/build_esp32s3.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_esp32s3.yml)\n\n\n[![esp32c6](https://github.com/FastLED/FastLED/actions/workflows/build_esp32c6.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_esp32c6.yml)\n\n\n[![esp32h2](https://github.com/FastLED/FastLED/actions/workflows/build_esp32h2.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_esp32h2.yml)\n\n*Specific features*\n\n[![esp32_i2s_ws2812](https://github.com/FastLED/FastLED/actions/workflows/build_esp32_i2s_ws2812.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_esp32_i2s_ws2812.yml)\n\n[![esp32 extra libs](https://github.com/FastLED/FastLED/actions/workflows/build_esp_extra_libs.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_esp_extra_libs.yml)\n\nEspressif's current evaluation of FastLED's compatibility with their product sheet can be found [here](https://github.com/espressif/arduino-esp32/blob/gh-pages/LIBRARIES_TEST.md)\n\n\n### x86\n\n[![linux_native](https://github.com/FastLED/FastLED/actions/workflows/build_linux.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_linux.yml)\n\n### Wasm\n\n[![wasm](https://github.com/FastLED/FastLED/actions/workflows/build_wasm.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_wasm.yml)\n\n[![wasm_compile_test](https://github.com/FastLED/FastLED/actions/workflows/build_wasm_compilers.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_wasm_compilers.yml)\n\n## Compiled Library Size Check\n\n[![attiny85_binary_size](https://github.com/FastLED/FastLED/actions/workflows/check_attiny85.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/check_attiny85.yml)\n\n[![uno_binary_size](https://github.com/FastLED/FastLED/actions/workflows/check_uno_size.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/check_uno_size.yml)\n\n\n[![esp32dev_binary_size](https://github.com/FastLED/FastLED/actions/workflows/check_esp32_size.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/check_esp32_size.yml)\n\n\n[![teensy41_binary_size](https://github.com/FastLED/FastLED/actions/workflows/check_teensy41_size.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/check_teensy41_size.yml)\n\n# Install\n\n## Arduino IDE\n\nAfter the ArduinoIDE is installed then add the library to your IDE\n\n![image](https://github.com/user-attachments/assets/b1c02cf9-aba6-4f80-851e-78df914e2501)\n\n![image](https://github.com/user-attachments/assets/508eb700-7dd4-4901-a901-68c56cc4d0e1)\n\n## PlatformIO\n\nFollow our guide here. Our template will allow your project to be compiled by both PlatformIO and ArduinoIDE\n\nhttps://github.com/FastLED/PlatformIO-Starter\n\n\n\n# New Feature Announcements\n\n## New in 3.9.10: Super Stable WS2812 SPI driver for ESP32\n\n![image (2)](https://github.com/user-attachments/assets/b3c5801c-66df-40af-a6b8-bbd1520fbb36)\n\n## New in 3.9.9: 16-way Yves I2S parallel driver for the ESP32-S3\n\n![perpetualmaniac_an_led_display_in_a_room_lots_of_refaction_of_t_eb7c170a-7b2c-404a-b114-d33794b4954b](https://github.com/user-attachments/assets/982571fc-9b8d-4e58-93be-5bed76a0c53d)\n\n\n## New in 3.9.8 - Massive Teensy 4.1 & 4.0 LED output\n![New Project](https://github.com/user-attachments/assets/79dc2801-5161-4d5a-90a2-0126403e215f)\n\n\n## New in 3.9.2 - Overclocking of WS2812\n![image](https://github.com/user-attachments/assets/be98fbe6-0ec7-492d-8ed1-b7eb6c627e86)\nUpdate: max overclock has been reported at +70%: https://www.reddit.com/r/FastLED/comments/1gkcb6m/fastled_FASTLED_OVERCLOCK_17/\n\n\n## Development\n\n[![clone and compile](https://github.com/FastLED/FastLED/actions/workflows/build_default.yml/badge.svg)](https://github.com/FastLED/FastLED/actions/workflows/build_default.yml)\n\nIf you want to make changes to FastLED then please\n\n  * [Fork](https://github.com/FastLED/FastLED/fork) the https://github.com/FastLED/FastLED repo into your github account.\n  * Open up the folder with VSCode.\n    * Make sure VSCode has the platformio extension.\n  * Once FastLED is loading with platformio, give it some time to download the dependencies (esp32-s3 (default) has a 1+GB download!)\n  * Click the platformio compile\n    * Then upload to your device\n  * See [dev/dev.ino](dev/dev.ino).\n<img width=\"1220\" alt=\"image\" src=\"https://github.com/user-attachments/assets/66f1832d-3cfb-4633-8af8-e66148bcad1b\">\n\nWhen changes are made then push to your fork to your repo and git will give you a url to trigger a pull request into the master repo.\n\n### Testing other devices\n\n  * run [compile](compile) and then select your board\n\n```bash\nAvailable boards:\n[0]: ATtiny1616\n[1]: adafruit_feather_nrf52840_sense\n[2]: attiny85\n[3]: bluepill\n[4]: digix\n[5]: esp01\n[6]: esp32c2\n[7]: esp32c3\n[8]: esp32c6\n[9]: esp32s3\n[10]: esp32dev\n[11]: esp32dev_i2s\n[12]: esp32dev_idf44\n[13]: esp32rmt_51\n[14]: nano_every\n[15]: rpipico\n[16]: rpipico2\n[17]: teensy30\n[18]: teensy41\n[19]: uno\n[20]: uno_r4_wifi\n[21]: xiaoblesense_adafruit\n[22]: yun\n[all]: All boards\nEnter the number of the board you want to use: 0\n```\n\n## Help and Support\n\nIf you need help with using the library, please consider visiting the Reddit community at https://reddit.com/r/FastLED. There are thousands of knowledgeable FastLED users in that group and a plethora of solutions in the post history.\n\nIf you are looking for documentation on how something in the library works, please see the Doxygen documentation online at http://fastled.io/docs.\n\nIf you run into bugs with the library, or if you'd like to request support for a particular platform or LED chipset, please submit an issue at http://fastled.io/issues.\n\n## Supported LED Chipsets\n\nHere's a list of all the LED chipsets are supported.  More details on the LED chipsets are included [on our wiki page](https://github.com/FastLED/FastLED/wiki/Chipset-reference)\n\n* Adafruit's DotStars - aka APA102\n* Adafruit's Neopixel - aka WS2812B (also WS2811/WS2812/WS2813, also supported in lo-speed mode) - a 3 wire addressable LED chipset\n* TM1809/4 - 3 wire chipset, cheaply available on aliexpress.com\n* TM1803 - 3 wire chipset, sold by RadioShack\n* UCS1903 - another 3 wire LED chipset, cheap\n* GW6205 - another 3 wire LED chipset\n* LPD8806 - SPI based chipset, very high speed\n* WS2801 - SPI based chipset, cheap and widely available\n* SM16716 - SPI based chipset\n* APA102 - SPI based chipset\n  * APA102HD - Same as APA102 but with a high definition gamma correction function applied at the driver level.\n* P9813 - aka Cool Neon's Total Control Lighting\n* DMX - send rgb data out over DMX using Arduino DMX libraries\n* SmartMatrix panels - needs the SmartMatrix library (https://github.com/pixelmatix/SmartMatrix)\n* LPD6803 - SPI based chpiset, chip CMODE pin must be set to 1 (inside oscillator mode)\n\nHL1606, and \"595\"-style shift registers are no longer supported by the library.  The older Version 1 of the library (\"FastSPI_LED\") has support for these, but is missing many of the advanced features of current versions and is no longer being maintained.\n\n## Supported Platforms\n\nRight now the library is supported on a variety of arduino compatible platforms.  If it's ARM or AVR and uses the arduino software (or a modified version of it to build) then it is likely supported.  Note that we have a long list of upcoming platforms to support, so if you don't see what you're looking for here, ask, it may be on the roadmap (or may already be supported).  N.B. at the moment we are only supporting the stock compilers that ship with the arduino software.  Support for upgraded compilers, as well as using AVR studio and skipping the arduino entirely, should be coming in a near future release.\n\n* Adafruit Trinket & Gemma - Trinket Pro may be supported, but haven't tested to confirm yet\n* Arduino & compatibles - straight up Arduino devices, Uno, Duo, Leonardo, Mega, Nano, etc...\n* Arduino Due and the digistump DigiX\n* Arduino Yún\n* Arduino Zero\n* AVR microcontrollers - ATtiny, ATmega and more families\n* ESP32 based boards\n* ESP8266 using the Arduino board definitions from http://arduino.esp8266.com/stable/package_esp8266com_index.json - please be sure to also read https://github.com/FastLED/FastLED/wiki/ESP8266-notes for information specific to the 8266.\n* Teensy 2, Teensy++ 2, Teensy 3.0, Teensy 3.1/3.2, Teensy LC, Teensy 3.5, Teensy 3.6, and Teensy 4.0 - arduino compatible from pjrc.com with some extra goodies (note the teensy LC, 3.2, 3.5, 3.6, 4.0 are ARM, not AVR!)\n* RFDuino\n* SparkCore\n* The wino board - http://wino-board.com\n\nWhat types of platforms are we thinking about supporting in the future?  Here's a short list:  ChipKit32, Maple, Beagleboard\n\n### APA102 and the 'High Definition' Mode in FastLED\n\nFastLED features driver-level gamma correction for the APA102 and SK9822 chipsets, using our \"pseudo-13-bit mixing\" algorithm.\nRead about it here: https://github.com/FastLED/FastLED/blob/master/APA102.md\n\n![image](https://github.com/user-attachments/assets/999e68ce-454f-4f15-9590-a8d2e8d47a22)\n\nCheck out thr rust port of this algorithm:\n\nhttps://github.com/smart-leds-rs/apa102-spi-rs/pull/15\n\n# Getting Started\n\n### Arduino IDE / PlatformIO Dual Repo\n\nWe've created a custom repo you can try to start your projects. This repo is designed to be used with VSCode + PlatformIO but is also *backwards compatible with the Arduino IDE*.\n\nPlatformIO is an extension to VSCode and is generally viewed as a much better experience than the Arduino IDE. You get auto completion tools like intellisense and CoPilot and the ability to install tools like crash decoding. Anything you can do in Arduino IDE you can do with PlatformIO.\n\nGet started here:\n\nhttps://github.com/FastLED/PlatformIO-Starter\n\n### ArduinoIDE\n\nWhen running the Arduino IDE you need to do the additional installation step of installing FastLED in the global Arduino IDE package manager.\n\nInstall the library using either [the .zip file from the latest release](https://github.com/FastLED/FastLED/releases/latest/) or by searching for \"FastLED\" in the libraries manager of the Arduino IDE. [See the Arduino documentation on how to install libraries for more information.](https://docs.arduino.cc/software/ide-v1/tutorials/installing-libraries)\n\n\n## Porting FastLED to a new platform\n\nInformation on porting FastLED can be found in the file [PORTING.md](PORTING.md).\n\n## What about that name?\n\nWait, what happened to FastSPI_LED and FastSPI_LED2?  The library was initially named FastSPI_LED because it was focused on very fast and efficient SPI access.  However, since then, the library has expanded to support a number of LED chipsets that don't use SPI, as well as a number of math and utility functions for LED processing across the board.  We decided that the name FastLED more accurately represents the totality of what the library provides, everything fast, for LEDs.\n\n## For more information\n\nCheck out the official site http://fastled.io for links to documentation, issues, and news\n"
        },
        {
          "name": "RELEASE.md",
          "type": "blob",
          "size": 1.013671875,
          "content": "# FastLED Release howto\n\n*Pushing a fastled release, the short version, last updated May 2024*\n\n## Example\n\nhttps://github.com/FastLED/FastLED/commit/4444758ffaf853ba4f8deb973532548c9c1ee231\n\n## How to\n\nEdit these files to update the version number\n  * library.json \n  * library.properties \n  * src/FastLED.h \n  * docs/Doxyfile\n  * RELEASE.md\n    * This file: update instructions with the current release.\n\n\nEdit this file with release notes and version number.\n  * release_notes.md\n\nRelease notes should list highlight changes (not necessarily all minor bug fixes) and thank people for their help. \n\nGit commands to commit and tag release'\n```bash\n$ git commit -m \"Rev 3.9.10 - Fixes for ESP32 RMT5, new super stable clockless SPI driver for WS2812 on ESP\"\n$ git tag 3.9.10 master \n$ git push \n$ git push origin 3.9.10\n```\n\nThen use the GitHub UI to make a new “Release”:\n\nhttps://github.com/FastLED/FastLED/releases/new\n\nAnnounce new version on subreddit, highlighting major changes and thanking people for helping. \n\nThat’s it. \n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 1.2041015625,
          "content": "# Testing\n\n  * Esp32 testing\n    * https://github.com/marketplace/actions/esp32-qemu-runner will run a sketch for X seconds and see's if it crashes\n      * There's specific tests we'd like to run with this including the WS2812 and APA102 tests to test the clockless and clocked drivers\n\n# Feature Enhancements\n\n  * I2S driver for ESP32 WS2812\n    * https://github.com/hpwit/I2SClocklessLedDriver\n      * Our copy is here: https://github.com/FastLED/FastLED/blob/master/src/platforms/esp/32/clockless_i2s_esp32.h\n    * S3:\n      * https://github.com/hpwit/I2SClockLessLedDriveresp32s3\n    * Apparently, this driver allows MASSIVE parallelization for WS2812\n    * Timing guide for reducing RMT frequency https://github.com/Makuna/NeoPixelBus/pull/795\n    * ESp32 LED guide\n      * web: https://components.espressif.com/components/espressif/led_strip\n      * repo: https://github.com/espressif/idf-extra-components/tree/60c14263f3b69ac6e98ecae79beecbe5c18d5596/led_strip\n      * adafruit conversation on RMT progress: https://github.com/adafruit/Adafruit_NeoPixel/issues/375\n\n\n  * MIT Licensed SdFat library\n    * https://github.com/greiman/SdFat\n\n  * NimBLE for Arduino\n    * https://github.com/h2zero/NimBLE-Arduino?tab=readme-ov-file"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "clean",
          "type": "blob",
          "size": 0.23046875,
          "content": "#!/bin/bash\n\n# cd to the directory of the script\ncd \"$(dirname \"$0\")\"\n\nrm -rf .venv\nrm -rf .build\nrm -rf .pio\nrm -rf ci/tmp\nrm -rf tests/.build\n\n# remove any CMakeCache.txt files\nfind . -name \"CMakeCache.txt\" -type f -delete\nrm uv.lock\n"
        },
        {
          "name": "code_of_conduct.md",
          "type": "blob",
          "size": 5.462890625,
          "content": "\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n* \"Trolling\" and excessive complaints without the due benefit of contributing code.\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders via a bug report with the title [CODE OF CONDUCT] as the beginning text.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\n[https://www.contributor-covenant.org/version/2/0/code_of_conduct.html][v2.0].\n\nCommunity Impact Guidelines were inspired by \n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available \nat [https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.0]: https://www.contributor-covenant.org/version/2/0/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n\n"
        },
        {
          "name": "compile",
          "type": "blob",
          "size": 0.7734375,
          "content": "#!/bin/bash\nset -e\n\n# Function to find Python executable\nfind_python() {\n    if command -v python3 &> /dev/null; then\n        echo \"python3\"\n    elif command -v python &> /dev/null; then\n        echo \"python\"\n    else\n        echo \"Python not found. Please install Python 3.\"\n        exit 1\n    fi\n}\n\n# Check if uv is installed, if not, install it\nif ! command -v uv &> /dev/null; then\n    echo \"uv command not found. Installing uv...\"\n    PYTHON=$(find_python)\n    $PYTHON -m pip install uv\nfi\n\ncd \"$(dirname \"$0\")\"\n# if .venv not found\nif [ ! -d .venv ]; then\n    # create virtual environment\n    ./install\nfi\n\ninteractive_stmt=\"\"\n# if no arguments\nif [ $# -eq 0 ]; then\n    # set interactive statement\n    interactive_stmt=\"--interactive\"\nfi\n\nuv run ci/ci-compile.py $interactive_stmt \"$@\""
        },
        {
          "name": "compile.bat",
          "type": "blob",
          "size": 0.896484375,
          "content": "@echo off\nsetlocal\n\nrem Function to find Python executable\nwhere python >nul 2>nul\nif %errorlevel% equ 0 (\n    set \"PYTHON=python\"\n) else (\n    where python3 >nul 2>nul\n    if %errorlevel% equ 0 (\n        set \"PYTHON=python3\"\n    ) else (\n        echo Python not found. Please install Python 3.\n        exit /b 1\n    )\n)\n\nrem Check if uv is installed, if not, install it\nwhere uv >nul 2>nul\nif %errorlevel% neq 0 (\n    echo \"uv\" command not found. Please install \"uv\" by running \"pip install uv\" and try again.\n    exit /b 1\n)\n\nrem Change to the directory of the batch file\ncd /d \"%~dp0\"\n\nrem Check if .venv directory exists\nif not exist .venv (\n    rem Create virtual environment\n    call install.bat\n)\n\nset \"interactive_stmt=\"\nrem Check if no arguments were provided\nif \"%~1\"==\"\" (\n    set \"interactive_stmt=--interactive\"\n)\n\nrem Run the Python script\n.venv\\Scripts\\python.exe ci\\ci-compile.py %interactive_stmt% %*\n"
        },
        {
          "name": "component.mk",
          "type": "blob",
          "size": 0.1015625,
          "content": "COMPONENT_ADD_INCLUDEDIRS := ./src src/platforms/esp/32\nCOMPONENT_SRCDIRS := ./src src/platforms/esp/32\n"
        },
        {
          "name": "cool_projects.md",
          "type": "blob",
          "size": 0.7939453125,
          "content": "  * Advanced Color Gradient using online version of FastLED.\n    * https://wokwi.com/projects/285170662915441160\n  * LedMapper tool for irregular shapes\n    * https://github.com/jasoncoon/led-mapper\n  * list of projects on reddit:\n    * https://www.reddit.com/r/FastLED/wiki/index/user_examples/\n  * mesh networked esp32 with mutli wifi connections for redundancy\n\n  * https://github.com/Souravgoswami/Arduino-FastLED-Cool-Effects\n  * FastLED-IR: https://github.com/marcmerlin/FastLED-IR\n    * https://github.com/marcmerlin/NeoMatrix-FastLED-IR?tab=readme-ov-file\n\n  * Tree IR:\n    * https://www.evilgeniuslabs.org/tree-v2\n\n  * Esp32 server for fastled\n    * https://github.com/jasoncoon/esp32-fastled-webserver\n\n  * Strip tease - cool fx for strips\n    * https://github.com/lpaolini/Striptease?tab=readme-ov-file"
        },
        {
          "name": "dev.sh",
          "type": "blob",
          "size": 0.029296875,
          "content": "#!/bin/bash\n\nuv run dev/dev.py"
        },
        {
          "name": "dev",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "inspect",
          "type": "blob",
          "size": 0.0361328125,
          "content": "#!/bin/bash\n\nuv run ci/inspect_obj.py"
        },
        {
          "name": "install",
          "type": "blob",
          "size": 0.0810546875,
          "content": "#!/bin/bash\nset -e\nuv venv --python 3.11\nuv pip install . --refresh-package fastled"
        },
        {
          "name": "keywords.txt",
          "type": "blob",
          "size": 9.921875,
          "content": "#######################################\n# Syntax Coloring Map For FastLED\n#######################################\n\n#######################################\n# Datatypes (KEYWORD1)\n#######################################\n\nCFastLED\tKEYWORD1\nCHSV\tKEYWORD1\nCRGB\tKEYWORD1\nCRGBArray\tKEYWORD1\nLEDS\tKEYWORD1\nFastLED\tKEYWORD1\nFastPin\tKEYWORD1\nFastSPI\tKEYWORD1\nFastSPI_LED2\tKEYWORD1\n\nCLEDController\tKEYWORD1\n\nCRGBPalette16\tKEYWORD1\nCRGBPalette256\tKEYWORD1\nCHSVPalette16\tKEYWORD1\nCHSVPalette256\tKEYWORD1\nCHSVPalette16\tKEYWORD1\nCHSVPalette256\tKEYWORD1\nCRGBPalette16\tKEYWORD1\nCRGBPalette256\tKEYWORD1\n\nTProgmemPalette16\tKEYWORD1\nTProgmemPalette32\tKEYWORD1\nTDynamicRGBGradientPalette_byte\tKEYWORD1\nTDynamicRGBGradientPalette_bytes\tKEYWORD1\nTDynamicRGBGradientPaletteRef\tKEYWORD1\nTProgmemHSVPalette16\tKEYWORD1\nTProgmemHSVPalette32\tKEYWORD1\nTProgmemRGBGradientPalette_byte\tKEYWORD1\nTProgmemRGBGradientPalette_bytes\tKEYWORD1\nTProgmemRGBGradientPaletteRef\tKEYWORD1\nTProgmemRGBPalette16\tKEYWORD1\nTProgmemRGBPalette32\tKEYWORD1\n\nTBlendType\tKEYWORD1\n\n#######################################\n# Methods and Functions (KEYWORD2)\n#######################################\n\n# FastLED methods\naddLeds\tKEYWORD2\nsetBrightness\tKEYWORD2\ngetBrightness\tKEYWORD2\nshow\tKEYWORD2\nclear\tKEYWORD2\nclearData\tKEYWORD2\nshowColor\tKEYWORD2\nsetTemperature\tKEYWORD2\nsetCorrection\tKEYWORD2\nsetDither\tKEYWORD2\nsetMaxPowerInMilliWatts\tKEYWORD2\nsetMaxPowerInVoltsAndMilliamps\tKEYWORD2\nsetMaxRefreshRate\tKEYWORD2\ncountFPS\tKEYWORD2\ngetFPS\tKEYWORD2\nsize\tKEYWORD2\n\n# CLEDController Methods\nshowColor\tKEYWORD2\nshowLeds\tKEYWORD2\n\n# Noise methods\ninoise16_raw\tKEYWORD2\ninoise8_raw\tKEYWORD2\ninoise16\tKEYWORD2\ninoise8\tKEYWORD2\nfill_2dnoise16\tKEYWORD2\nfill_2dnoise8\tKEYWORD2\nfill_noise16\tKEYWORD2\nfill_noise8\tKEYWORD2\nfill_raw_2dnoise16\tKEYWORD2\nfill_raw_2dnoise16into8\tKEYWORD2\nfill_raw_2dnoise8\tKEYWORD2\nfill_raw_noise16into8\tKEYWORD2\nfill_raw_noise8\tKEYWORD2\n\n# Lib8tion methods\nqadd8\tKEYWORD2\nqadd7\tKEYWORD2\nqsub8\tKEYWORD2\nadd8\tKEYWORD2\nsub8\tKEYWORD2\nscale8\tKEYWORD2\nscale8_video\tKEYWORD2\ncleanup_R1\tKEYWORD2\nnscale8x3\tKEYWORD2\nnscale8x3_video\tKEYWORD2\nnscale8x2\tKEYWORD2\nnscale8x2_video\tKEYWORD2\nscale16by8\tKEYWORD2\nscale16by8\tKEYWORD2\nscale16\tKEYWORD2\nmul8\tKEYWORD2\nqmul8\tKEYWORD2\nabs8\tKEYWORD2\ndim8_raw\tKEYWORD2\ndim8_video\tKEYWORD2\ndim8_lin\tKEYWORD2\nbrighten8_raw\tKEYWORD2\nbrighten8_video\tKEYWORD2\nbrighten8_lin\tKEYWORD2\nrandom8\tKEYWORD2\nrandom16\tKEYWORD2\nrandom8\tKEYWORD2\nrandom8\tKEYWORD2\nrandom16\tKEYWORD2\nrandom16\tKEYWORD2\nrandom16_set_seed\tKEYWORD2\nrandom16_get_seed\tKEYWORD2\nrandom16_add_entropy\tKEYWORD2\nsin16_avr\tKEYWORD2\nsin16\tKEYWORD2\ncos16\tKEYWORD2\nsin8\tKEYWORD2\ncos8\tKEYWORD2\nlerp8by8\tKEYWORD2\nlerp16by16\tKEYWORD2\nlerp16by8\tKEYWORD2\nlerp15by8\tKEYWORD2\nlerp15by16\tKEYWORD2\nmap8\tKEYWORD2\nease8InOutQuad\tKEYWORD2\nease8InOutCubic\tKEYWORD2\nease8InOutApprox\tKEYWORD2\nease8InOutApprox\tKEYWORD2\ntriwave8\tKEYWORD2\nquadwave8\tKEYWORD2\ncubicwave8\tKEYWORD2\nsqrt16\tKEYWORD2\nblend8\tKEYWORD2\n\n# Beat Generators\nbeat88\tKEYWORD2\nbeat16\tKEYWORD2\nbeat8\tKEYWORD2\nbeatsin88\tKEYWORD2\nbeatsin16\tKEYWORD2\nbeatsin8\tKEYWORD2\n\n# Timekeeping\nseconds16\tKEYWORD2\nminutes16\tKEYWORD2\nhours8\tKEYWORD2\nbseconds16\tKEYWORD2\nEVERY_N_MILLIS\tKEYWORD2\nEVERY_N_MILLIS_I\tKEYWORD2\nEVERY_N_MILLISECONDS\tKEYWORD2\nEVERY_N_MILLISECONDS_I\tKEYWORD2\nEVERY_N_SECONDS\tKEYWORD2\nEVERY_N_SECONDS_I\tKEYWORD2\nEVERY_N_BSECONDS\tKEYWORD2\nEVERY_N_BSECONDS_I\tKEYWORD2\nEVERY_N_MINUTES\tKEYWORD2\nEVERY_N_MINUTES_I\tKEYWORD2\nEVERY_N_HOURS\tKEYWORD2\nEVERY_N_HOURS_I\tKEYWORD2\n\n# Color util methods\nblend\tKEYWORD2\nnblend\tKEYWORD2\nColorFromPalette\tKEYWORD2\nHeatColor\tKEYWORD2\nUpscalePalette\tKEYWORD2\nblend\tKEYWORD2\nfadeLightBy\tKEYWORD2\nfadeToBlackBy\tKEYWORD2\nfade_raw\tKEYWORD2\nfade_video\tKEYWORD2\nfill_gradient\tKEYWORD2\nfill_gradient_RGB\tKEYWORD2\nfill_palette\tKEYWORD2\nfill_palette_circular\tKEYWORD2\nfill_rainbow\tKEYWORD2\nfill_rainbow_circular\tKEYWORD2\nfill_solid\tKEYWORD2\nmap_data_into_colors_through_palette\tKEYWORD2\nnblend\tKEYWORD2\nnscale8\tKEYWORD2\nnscale8_video\tKEYWORD2\n\n# HSV methods\nhsv2grb_rainbow\tKEYWORD2\nhsv2rgb_spectrum\tKEYWORD2\nhsv2rgb_raw\tKEYWORD2\nfill_solid\tKEYWORD2\nfill_rainbow\tKEYWORD2\n\n# Gamma Correction\napplyGamma_video\tKEYWORD2\nnapplyGamma_video\tKEYWORD2\n\n# Colors\nCRGB::AliceBlue\tKEYWORD2\nCRGB::Amethyst\tKEYWORD2\nCRGB::AntiqueWhite\tKEYWORD2\nCRGB::Aqua\tKEYWORD2\nCRGB::Aquamarine\tKEYWORD2\nCRGB::Azure\tKEYWORD2\nCRGB::Beige\tKEYWORD2\nCRGB::Bisque\tKEYWORD2\nCRGB::Black\tKEYWORD2\nCRGB::BlanchedAlmond\tKEYWORD2\nCRGB::Blue\tKEYWORD2\nCRGB::BlueViolet\tKEYWORD2\nCRGB::Brown\tKEYWORD2\nCRGB::BurlyWood\tKEYWORD2\nCRGB::CadetBlue\tKEYWORD2\nCRGB::Chartreuse\tKEYWORD2\nCRGB::Chocolate\tKEYWORD2\nCRGB::Coral\tKEYWORD2\nCRGB::CornflowerBlue\tKEYWORD2\nCRGB::Cornsilk\tKEYWORD2\nCRGB::Crimson\tKEYWORD2\nCRGB::Cyan\tKEYWORD2\nCRGB::DarkBlue\tKEYWORD2\nCRGB::DarkCyan\tKEYWORD2\nCRGB::DarkGoldenrod\tKEYWORD2\nCRGB::DarkGray\tKEYWORD2\nCRGB::DarkGrey\tKEYWORD2\nCRGB::DarkGreen\tKEYWORD2\nCRGB::DarkKhaki\tKEYWORD2\nCRGB::DarkMagenta\tKEYWORD2\nCRGB::DarkOliveGreen\tKEYWORD2\nCRGB::DarkOrange\tKEYWORD2\nCRGB::DarkOrchid\tKEYWORD2\nCRGB::DarkRed\tKEYWORD2\nCRGB::DarkSalmon\tKEYWORD2\nCRGB::DarkSeaGreen\tKEYWORD2\nCRGB::DarkSlateBlue\tKEYWORD2\nCRGB::DarkSlateGray\tKEYWORD2\nCRGB::DarkSlateGrey\tKEYWORD2\nCRGB::DarkTurquoise\tKEYWORD2\nCRGB::DarkViolet\tKEYWORD2\nCRGB::DeepPink\tKEYWORD2\nCRGB::DeepSkyBlue\tKEYWORD2\nCRGB::DimGray\tKEYWORD2\nCRGB::DimGrey\tKEYWORD2\nCRGB::DodgerBlue\tKEYWORD2\nCRGB::FireBrick\tKEYWORD2\nCRGB::FloralWhite\tKEYWORD2\nCRGB::ForestGreen\tKEYWORD2\nCRGB::Fuchsia\tKEYWORD2\nCRGB::Gainsboro\tKEYWORD2\nCRGB::GhostWhite\tKEYWORD2\nCRGB::Gold\tKEYWORD2\nCRGB::Goldenrod\tKEYWORD2\nCRGB::Gray\tKEYWORD2\nCRGB::Grey\tKEYWORD2\nCRGB::Green\tKEYWORD2\nCRGB::GreenYellow\tKEYWORD2\nCRGB::Honeydew\tKEYWORD2\nCRGB::HotPink\tKEYWORD2\nCRGB::IndianRed\tKEYWORD2\nCRGB::Indigo\tKEYWORD2\nCRGB::Ivory\tKEYWORD2\nCRGB::Khaki\tKEYWORD2\nCRGB::Lavender\tKEYWORD2\nCRGB::LavenderBlush\tKEYWORD2\nCRGB::LawnGreen\tKEYWORD2\nCRGB::LemonChiffon\tKEYWORD2\nCRGB::LightBlue\tKEYWORD2\nCRGB::LightCoral\tKEYWORD2\nCRGB::LightCyan\tKEYWORD2\nCRGB::LightGoldenrodYellow\tKEYWORD2\nCRGB::LightGreen\tKEYWORD2\nCRGB::LightGrey\tKEYWORD2\nCRGB::LightPink\tKEYWORD2\nCRGB::LightSalmon\tKEYWORD2\nCRGB::LightSeaGreen\tKEYWORD2\nCRGB::LightSkyBlue\tKEYWORD2\nCRGB::LightSlateGray\tKEYWORD2\nCRGB::LightSlateGrey\tKEYWORD2\nCRGB::LightSteelBlue\tKEYWORD2\nCRGB::LightYellow\tKEYWORD2\nCRGB::Lime\tKEYWORD2\nCRGB::LimeGreen\tKEYWORD2\nCRGB::Linen\tKEYWORD2\nCRGB::Magenta\tKEYWORD2\nCRGB::Maroon\tKEYWORD2\nCRGB::MediumAquamarine\tKEYWORD2\nCRGB::MediumBlue\tKEYWORD2\nCRGB::MediumOrchid\tKEYWORD2\nCRGB::MediumPurple\tKEYWORD2\nCRGB::MediumSeaGreen\tKEYWORD2\nCRGB::MediumSlateBlue\tKEYWORD2\nCRGB::MediumSpringGreen\tKEYWORD2\nCRGB::MediumTurquoise\tKEYWORD2\nCRGB::MediumVioletRed\tKEYWORD2\nCRGB::MidnightBlue\tKEYWORD2\nCRGB::MintCream\tKEYWORD2\nCRGB::MistyRose\tKEYWORD2\nCRGB::Moccasin\tKEYWORD2\nCRGB::NavajoWhite\tKEYWORD2\nCRGB::Navy\tKEYWORD2\nCRGB::OldLace\tKEYWORD2\nCRGB::Olive\tKEYWORD2\nCRGB::OliveDrab\tKEYWORD2\nCRGB::Orange\tKEYWORD2\nCRGB::OrangeRed\tKEYWORD2\nCRGB::Orchid\tKEYWORD2\nCRGB::PaleGoldenrod\tKEYWORD2\nCRGB::PaleGreen\tKEYWORD2\nCRGB::PaleTurquoise\tKEYWORD2\nCRGB::PaleVioletRed\tKEYWORD2\nCRGB::PapayaWhip\tKEYWORD2\nCRGB::PeachPuff\tKEYWORD2\nCRGB::Peru\tKEYWORD2\nCRGB::Pink\tKEYWORD2\nCRGB::Plaid\tKEYWORD2\nCRGB::Plum\tKEYWORD2\nCRGB::PowderBlue\tKEYWORD2\nCRGB::Purple\tKEYWORD2\nCRGB::Red\tKEYWORD2\nCRGB::RosyBrown\tKEYWORD2\nCRGB::RoyalBlue\tKEYWORD2\nCRGB::SaddleBrown\tKEYWORD2\nCRGB::Salmon\tKEYWORD2\nCRGB::SandyBrown\tKEYWORD2\nCRGB::SeaGreen\tKEYWORD2\nCRGB::Seashell\tKEYWORD2\nCRGB::Sienna\tKEYWORD2\nCRGB::Silver\tKEYWORD2\nCRGB::SkyBlue\tKEYWORD2\nCRGB::SlateBlue\tKEYWORD2\nCRGB::SlateGray\tKEYWORD2\nCRGB::SlateGrey\tKEYWORD2\nCRGB::Snow\tKEYWORD2\nCRGB::SpringGreen\tKEYWORD2\nCRGB::SteelBlue\tKEYWORD2\nCRGB::Tan\tKEYWORD2\nCRGB::Teal\tKEYWORD2\nCRGB::Thistle\tKEYWORD2\nCRGB::Tomato\tKEYWORD2\nCRGB::Turquoise\tKEYWORD2\nCRGB::Violet\tKEYWORD2\nCRGB::Wheat\tKEYWORD2\nCRGB::White\tKEYWORD2\nCRGB::WhiteSmoke\tKEYWORD2\nCRGB::Yellow\tKEYWORD2\nCRGB::YellowGreen\tKEYWORD2\nCRGB::FairyLight\tKEYWORD2\nCRGB::FairyLightNCC\tKEYWORD2\n\n# Color Palettes\nDEFINE_GRADIENT_PALETTE\tKEYWORD2\n\n#######################################\n# Constants (LITERAL1)\n#######################################\n\n# Chipsets\nAPA102\tLITERAL1\nAPA104\tLITERAL1\nAPA106\tLITERAL1\nDMXSERIAL\tLITERAL1\nDMXSIMPLE\tLITERAL1\nDOTSTAR\tLITERAL1\nGE8822\tLITERAL1\nGS1903\tLITERAL1\nGW6205\tLITERAL1\nGW6205B\tLITERAL1\nGW6205_400\tLITERAL1\nLPD1886\tLITERAL1\nLPD1886_8BIT\tLITERAL1\nLPD6803\tLITERAL1\nLPD8806\tLITERAL1\nNEOPIXEL\tLITERAL1\nOCTOWS2811\tLITERAL1\nOCTOWS2811_400\tLITERAL1\nOCTOWS2813\tLITERAL1\nP9813\tLITERAL1\nPIXIE\tLITERAL1\nPL9823\tLITERAL1\nSK6812\tLITERAL1\nSK6822\tLITERAL1\nSK9822\tLITERAL1\nSM16703 LITERAL1\nSM16716\tLITERAL1\nSMART_MATRIX\tLITERAL1\nTM1803\tLITERAL1\nTM1804\tLITERAL1\nTM1809\tLITERAL1\nTM1812\tLITERAL1\nTM1829\tLITERAL1\nUCS1903\tLITERAL1\nUCS1903B\tLITERAL1\nUCS1904\tLITERAL1\nUCS2903\tLITERAL1\nWS2801\tLITERAL1\nWS2803\tLITERAL1\nWS2811\tLITERAL1\nWS2811_400\tLITERAL1\nWS2812\tLITERAL1\nWS2812B\tLITERAL1\nWS2812SERIAL\tLITERAL1\nWS2813\tLITERAL1\nWS2852\tLITERAL1\n\n# RGB orderings\nRGB\tLITERAL1\nRBG\tLITERAL1\nGRB\tLITERAL1\nGBR\tLITERAL1\nBRG\tLITERAL1\nBGR\tLITERAL1\n\n# hue literals\nHUE_RED\tLITERAL1\nHUE_ORANGE\tLITERAL1\nHUE_YELLOW\tLITERAL1\nHUE_GREEN\tLITERAL1\nHUE_AQUA\tLITERAL1\nHUE_BLUE\tLITERAL1\nHUE_PURPLE\tLITERAL1\nHUE_PINK\tLITERAL1\n\n# Color correction values\nTypicalSMD5050\tLITERAL1\nTypicalLEDStrip\tLITERAL1\nTypical8mmPixel\tLITERAL1\nTypicalPixelString\tLITERAL1\nUncorrectedColor\tLITERAL1\nCandle\tLITERAL1\nTungsten40W\tLITERAL1\nTungsten100W\tLITERAL1\nHalogen\tLITERAL1\nCarbonArc\tLITERAL1\nHighNoonSun\tLITERAL1\nDirectSunlight\tLITERAL1\nOvercastSky\tLITERAL1\nClearBlueSky\tLITERAL1\nWarmFluorescent\tLITERAL1\nStandardFluorescent\tLITERAL1\nCoolWhiteFluorescent\tLITERAL1\nFullSpectrumFluorescent\tLITERAL1\nGrowLightFluorescent\tLITERAL1\nBlackLightFluorescent\tLITERAL1\nMercuryVapor\tLITERAL1\nSodiumVapor\tLITERAL1\nMetalHalide\tLITERAL1\nHighPressureSodium\tLITERAL1\nUncorrectedTemperature\tLITERAL1\n\n# Color util literals\nFORWARD_HUES\tLITERAL1\nBACKWARD_HUES\tLITERAL1\nSHORTEST_HUES\tLITERAL1\nLONGEST_HUES\tLITERAL1\nLINEARBLEND\tLITERAL1\nNOBLEND\tLITERAL1\n\n# Predefined Color Palettes\nRainbow_gp\tLITERAL1\nCloudColors_p\tLITERAL1\nLavaColors_p\tLITERAL1\nOceanColors_p\tLITERAL1\nForestColors_p\tLITERAL1\nRainbowColors_p\tLITERAL1\nRainbowStripeColors_p\tLITERAL1\nPartyColors_p\tLITERAL1\nHeatColors_p\tLITERAL1\n"
        },
        {
          "name": "library.json",
          "type": "blob",
          "size": 2.203125,
          "content": "{\n    \"name\": \"FastLED\",\n    \"description\": \"FastLED is a library for programming addressable rgb led strips (APA102/Dotstar, WS2812/Neopixel, LPD8806, and a dozen others) acting both as a driver and as a library for color management and fast math.\",\n    \"keywords\": \"led,noise,rgb,math,fast\",\n    \"authors\": [\n        {\n            \"name\": \"Daniel Garcia\",\n            \"url\": \"https://github.com/focalintent\",\n            \"maintainer\": true\n        },\n        {\n            \"name\": \"Mark Kriegsman\",\n            \"url\": \"https://github.com/kriegsman\",\n            \"maintainer\": true\n        },\n        {\n            \"name\": \"Sam Guyer\",\n            \"url\": \"https://github.com/samguyer\",\n            \"maintainer\": true\n        },\n        {\n            \"name\": \"Jason Coon\",\n            \"url\": \"https://github.com/jasoncoon\",\n            \"maintainer\": true\n        },\n        {\n            \"name\": \"Josh Huber\",\n            \"url\": \"https://github.com/uberjay\",\n            \"maintainer\": true\n        },\n        {\n            \"name\": \"Zach Vorhies\",\n            \"url\": \"https://github.com/zackees\",\n            \"maintainer\": true\n        }\n    ],\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/FastLED/FastLED.git\"\n    },\n    \"version\": \"3.9.10\",\n    \"license\": \"MIT\",\n    \"homepage\": \"http://fastled.io\",\n    \"frameworks\": \"arduino\",\n    \"platforms\": \"atmelavr, atmelsam, freescalekinetis, nordicnrf51, nxplpc, ststm32, teensy, espressif8266, espressif32, nordicnrf52\",\n    \"headers\": \"FastLED.h\",\n    \"export\": {\n        \"exclude\": [\n            \"docs\",\n            \"extras\",\n            \"ci\",\n            \".*\",\n            \"compile.bat\",\n            \"compile\",\n            \"lint\",\n            \"test\",\n            \"platformio.ini\",\n            \"**/*.exe\"\n        ]\n    },\n    \"build\": {\n        \"srcFilter\": [\n            \"+<*.c>\",\n            \"+<*.cpp>\",\n            \"+<*.h>\",\n            \"+<platforms/arm/k20/**/*.cpp>\",\n            \"+<platforms/esp/32/**/*.cpp>\",\n            \"+<platforms/wasm/**/*.cpp>\",\n            \"+<third_party/**/*.cpp>\",\n            \"+<third_party/**/*.c>\",\n            \"+<fx/**/*.cpp>\",\n            \"+<fl/**/*.cpp>\",\n            \"+<sensors/**/*.cpp>\"\n        ],\n        \"libArchive\": false\n    }\n}\n"
        },
        {
          "name": "library.properties",
          "type": "blob",
          "size": 0.578125,
          "content": "name=FastLED\nversion=3.9.10\nauthor=Daniel Garcia\nmaintainer=Daniel Garcia <dgarcia@fastled.io>\nsentence=Multi-platform library for controlling dozens of different types of LEDs along with optimized math, effect, and noise functions.\nparagraph=FastLED is a fast, efficient, easy-to-use Arduino library for programming addressable LED strips and pixels such as WS2810, WS2811, LPD8806, Neopixel and more. FastLED also provides high-level math functions that can be used for generative art and graphics.\ncategory=Display\nurl=https://github.com/FastLED/FastLED\narchitectures=*\nincludes=FastLED.h\n"
        },
        {
          "name": "lint",
          "type": "blob",
          "size": 2.7451171875,
          "content": "#!/bin/bash\n\nset -e\n\n# Unset VIRTUAL_ENV to avoid warnings about mismatched paths\nunset VIRTUAL_ENV\n\ncd \"$(dirname \"$0\")\"\n# if .venv not found\nif [ ! -d .venv ]; then\n    # create virtual environment\n    ./install\nfi\n\n\n# Overwrite .vscode/launch.json if it's different\ncat > .vscode/launch.json << 'EOL'\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Python Debugger: Current File\",\n            \"type\": \"debugpy\",\n            \"request\": \"launch\",\n            \"program\": \"${file}\",\n            \"console\": \"integratedTerminal\"\n        },\n        {\n            \"type\": \"by-gdb\",\n            \"request\": \"launch\",\n            \"name\": \"Launch(gdb)\",\n            \"program\": \"tests/.build/bin/${fileBasenameNoExtension}\",\n            \"cwd\": \"${workspaceRoot}\"\n        },\n    ]\n}\nEOL\n\n\n\n\n# # Function to handle ESLint output in the background\n# run_eslint() {\n#     eslint_output_file=\"eslint_output.log\"\n#     eslint src/platforms/wasm/compiler/*.js src/platforms/wasm/compiler/modules/*.js &> \"$eslint_output_file\" &\n#     eslint_pid=$!\n# }\n\n# # Start ESLint in the background if available\n# if command -v eslint &> /dev/null; then\n#     echo \"Running eslint in the background\"\n#     run_eslint\n# else\n#     echo \"ESLint not found, skipping JavaScript linting\"\n# fi\n\n# Linting the Python code.\necho \"Running ruff check\"\nuv run ruff check --fix ci --exclude ci/tmp/ --exclude ci/wasm/\nuv run ruff check --fix src/platforms/wasm/compiler/compile.py\nuv run ruff check --fix src/platforms/wasm/compiler/server.py\nUV run ruff check --fix dev/dev.py\necho Running black\nblack ci --exclude ci/tmp/ --exclude ci/wasm/\nblack src/platforms/wasm/compiler/compile.py\nblack src/platforms/wasm/compiler/server.py\nblack dev/dev.py\necho Running isort\nisort --profile black ci --skip ci/tmp/ --skip ci/wasm/\nisort --profile black src/platforms/wasm/compiler/compile.py\nisort --profile black src/platforms/wasm/compiler/server.py\nisort --profile black dev/dev.py\necho \"Running mypy\"\nuv run mypy ci --exclude ci/tmp/ --exclude ci/wasm/\nuv run mypy src/platforms/wasm/compiler/compile.py\nuv run mypy src/platforms/wasm/compiler/server.py\nuv run mypy dev/dev.py\n\n\n\n# Linting the C++ code.\nfolders=(\n    #\"src/lib8tion\"\n    #\"src/platforms/stub\"\n    #\"src/platforms/apollo3\"  # clang-format breaks apollo3\n    #\"src/platforms/esp/8266\"  # clang-format breaks esp8266\n    #\"src/platforms/arm\" # clang-format breaks arm\n)\n\nfor folder in \"${folders[@]}\"; do\n    echo \"Running clang-format on $folder\"\n    uv run ci/run-clang-format.py -i -r \"$folder\"\ndone\n\n# # Wait for ESLint to finish and output its results\n# if [ -n \"$eslint_pid\" ]; then\n#     echo \"Waiting for ESLint to complete...\"\n#     wait \"$eslint_pid\"\n#     echo \"ESLint output:\"\n#     cat \"$eslint_output_file\"\n#     rm \"$eslint_output_file\"\n# fi\n"
        },
        {
          "name": "platformio.ini",
          "type": "blob",
          "size": 1.6552734375,
          "content": "\n[platformio]\nsrc_dir = dev ; target is ./dev/dev.ino\ndefault_envs = dev\n\n[env:generic-esp]\n# Developement branch of the open source espressif32 platform\nplatform =  https://github.com/pioarduino/platform-espressif32/releases/download/51.03.04/platform-espressif32.zip\nframework = arduino\nupload_protocol = esptool\nmonitor_filters = \n\tdefault\n\tesp32_exception_decoder  ; Decode exceptions so that they are human readable.\n; Symlink in the FastLED library so that changes to the library are reflected in the project\n; build immediatly.\nlib_deps = \n  FastLED=symlink://./\nbuild_type = debug\n\nbuild_flags =\n\t  -DDEBUG\n    -g\n    -Og\n    -DCORE_DEBUG_LEVEL=5\n    -DLOG_LOCAL_LEVEL=ESP_LOG_VERBOSE\n    -DFASTLED_ESP32_SPI_BULK_TRANSFER=1    \ncheck_tool = clangtidy\n\n[env:esp32s3]\nextends = env:generic-esp\nboard = seeed_xiao_esp32s3\nbuild_flags = \n    ${env:generic-esp.build_flags}\n    -DBOARD_HAS_PSRAM\n    -mfix-esp32-psram-cache-issue\n    -mfix-esp32-psram-cache-strategy=memw\nboard_build.partitions = huge_app.csv\n\n[env:esp32c6]\nextends = env:generic-esp\nboard = esp32-c6-devkitc-1\nbuild_flags = ${env:generic-esp.build_flags}\n\n[env:esp32c3]\nextends = env:generic-esp\nboard = esp32-c3-devkitm-1\nbuild_flags = ${env:generic-esp.build_flags}\n\n[env:esp32-wroom-32]\nextends = env:generic-esp\nboard = esp32dev\nbuild_flags = ${env:generic-esp.build_flags}\n\n[env:esp32c2]\nextends = env:generic-esp\nplatform = https://github.com/Jason2866/platform-espressif32.git#Arduino/IDF5\nboard = esp32-c2-devkitm-1\nbuild_flags = \n  ${env:generic-esp.build_flags}\n\n\n[env:esp32dev]\nplatform = platformio/espressif32\nboard = esp32dev\nbuild_flags = \n  ${env:generic-esp.build_flags}\n\n[env:dev]\nextends = env:esp32c2\n\n\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.623046875,
          "content": "[project]\nname = \"ci\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nreadme = \"README.md\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"platformio==6.1.16\",\n    \"fastled-wasm\",\n    \"python-dateutil\",\n    \"ruff\",\n    \"mypy\",\n    \"types-python-dateutil\",\n    \"clang-format\",\n    \"isort\",\n    \"black\",\n    \"pip\",\n    \"pytest\",\n    \"fpvgcc\",\n    \"uv\",\n    \"ziglang\",\n    \"ninja\",\n    \"cmake\",\n    \"download\",\n    \"fastled>=1.2.21\",\n    \"playwright\"\n]\n\n[build-system]\nrequires = [\"hatchling\", \"hatch-requirements-txt\"]\nbuild-backend = \"hatchling.build\"\n[tool.hatch.build.targets.wheel]\n\n[tool.hatch.build]\npackages = [\"ci/ci\"]\n"
        },
        {
          "name": "release_notes.md",
          "type": "blob",
          "size": 40.001953125,
          "content": "FastLED 3.9.10\n==============\n* ESP32\n  * RMT5 driver has been fixed for ESP32-S3. Upto 4 RMT workers may work in parallel.\n    * Rebased espressifs led_strip to v3.0.0\n    * Unresolved issues:\n      * DMA does not work for ESP32-S3 for my test setup with XIAO ESP32-S3\n        * This appears to be an espressif bug as using dma is not tested in their examples and does not work with the stock driver, or there is something I don't understand.\n        * Therefore DMA is disable for now, force it on with\n          * `#define FASTLED_RMT_USE_DMA` \n          * `#include \"FastLED.h\"`\n          * If anyone knows what's going on, please file a bug with FastLED [issues](https://github.com/FastLED/FastLED/issues/new) page.\n  * New WS2812 SPI driver for ESP32\n    * Enables the ESP32C2 device, as it does not have a I2S or RMT drivers.\n    * SPI is backed by DMA and is apparently more stable than the RMT driver.\n      * Unfortunately, the driver only works with the WS2812 protocol.\n    * I was able to test that ESP32-S3 was able to use two spi channels in parallel.\n    * You can enable this default via\n      * `#define FASTLED_ESP32_USE_CLOCKLESS_SPI`\n      * `#include \"FastLED.h\"\n    * Advanced users can enable both the RMT5 and SPI drivers if they are willing to manually construct the SPI driver and at it to the FastLED singleton object via `FastLED.addLeds<...>'\n    * If RMT is not present (ESP32C2) then the ClocklessSpiWS2812 driver will be enabled and selected automatically.\n* Teensy\n  * Massive Parallel - ObjectFLED clockless driver.\n    * Stability improvements with timing.\n    * Resolves issue with using ObjectFLED mode with Teensy Audio DMA.\n    * ObjectFLED driver is now rebased to version 1.1.0\n\n\nFastLED 3.9.9 - I2S For ESP32-S3\n=============\n* ESP32\n  * Yves's amazing I2S driver for ESP32S3 is available through fastled!\n    * 12 way parallel, I2S/LCD protocol.\n    * https://github.com/hpwit/I2SClockLessLedDriveresp32s3\n    * 12\n    * See the Esp32-S3-I2SDemo: https://github.com/FastLED/FastLED/blob/master/examples/Esp32S3I2SDemo/Esp32S3I2SDemo.ino\n      * Be mindful of the requirements, this driver requires psram to be enabled, which requires platformio or esp-idf to work. Instructions are in the example.\n      * There's no standard FastLED.add<....> api for this driver yet... But hopefully soon.\n  * RMT Green light being stuck on / Performance issues on the Wroom\n    * Traced it back to RMT disable/delete which puts the pin in floating input mode, which can false signal led colors. If you are affected by this, a weak pulldown resistor will also solve the issue.\n    * Fixed: FastLED no longer attempts to disable rmt between draws - once RMT mode is enabled it stay enabled.\n    * MAY fix wroom. If this doesn't fix it, just downgrade to RMT4 (sorry), or switch to a higher end chipset. I tested the driver at 6.5ms for 256 * 4 way parallel, which is the max performance on ESP32S3. It was flawless for me.\n  * Some internal cleanup. We are now header-stable with 4.0 release: few namespace / header changes from this release forward.\n\nSpecial thanks to Yves and the amazing work with the 12 way parallel driver. He's pushing the limits on what the ESP32-S3 is capabable of. No joke.\n\nIf you are an absolute performance freak, check out Yves's advanced version of this driver with ~8x multiplexing through \"turbo\" I2S:\n\nhttps://github.com/hpwit/I2SClockLessLedVirtualDriveresp32s3\n\nFastLED 3.9.8 - FastLED now supports 27.5k pixels and more, on the Teensy 4.x\n=============\n* FastLED 3.9.8 is the 7th beta release of FastLED 4.0\n* We are introducing the new beta release of a *Massive Parallel mode* for Teensy 4.0/4.1 for you to try out!\n  * Made possible by Kurt Funderburg's excellent ObjectFLED driver!\n    * Check out his stand alone driver: https://github.com/KurtMF/ObjectFLED\n    * And give him a star on his repo, this is INCREDIBLE WORK!\n  * This will allow you to drive\n    * Teensy 4.1: 50 strips of WS2812 - 27,500 pixels @ 60fps!!\n      * ~36k pixels at 30% overclock (common)\n      * ~46k pixels at 70% overclock (highest end WS2812)\n    * Teensy 4.0: 40 strips of WS2812 - 22,000 pixels @ 60fps.\n  * The Teensy 4.x series is a **absolute** LED driving beast!\n  * This driver is async, so you can prepare the next frame while the current frame draws.\n  * Sketch Example: [https://github.com/FastLED/FastLED/blob/master/examples/TeensyMassiveParallel/TeensyMassiveParallel.ino](https://github.com/FastLED/FastLED/blob/master/examples/TeensyMassiveParallel/TeensyMassiveParallel.ino)\n  * It's very simple to turn on:\n    * `#define FASTLED_USES_OBJECTFLED`\n    * `#include \"FastLED.h\"` - that's it! No other changes necessary!\n  * Q/A:\n    * Is anything else supported other than WS2812? - Not at this moment. As far as I know, all strips on this bulk controller **must** use the same\n      timings. Because of the popularity of WS2812, it is enabled for this controller first. I will add support for other controllers based on the number of feature requests for other WS281x chipsets.\n    * Is overclocking supported? Yes, and it binds to the current overclock `#define FASTLED_OVERCLOCK 1.2` @ a 20% overlock.\n    * Have you tested this? Very lightly in FastLED, but Kurt has done his own tests and FastLED just provides some wrappers to map it to our familiar and easy api.\n    * How does this compare to the stock LED driver on Teensy for just one strip? Better and way less random light flashes. For some reason the stock Teensy WS2812 driver seems to produce glitches, but with the ObjectFLED driver seems to fix this.\n    * Will this become the default driver on Teensy 4.x? Yes, in the next release, unless users report problems.\n    * Is RGBW supported? Yes - all FastLED RGBW modes are supported.\n    * Can other non WS281x chipsets be supported? It appears so, as ObjectFLED does have flexible timings that make it suitable for other clockless chipsets.\n    * Does this consume a lot of memory? Yes. ObjectFLED expects a rectangular pixel buffer and this will be generated automatically. This buffer will then be converted into a DMA memory block. However, this shouldn't be that big of a problem as the Teensy 4.x features a massive amount of memory.\n* Other Changes\n  * ESP32 - bug fixes for RMT5 no recycle mode. This is now the default and addresses the \"green led stuck on\" issue that some people are facing with ESP-WROOM-32. We also saw it in one bug report for ESP32-S3, so we are going to just enable it everywhere.\n    * If you absolutely need the extra controllers because you have more strips than RMT controllers, then you can re-enable recycle mode with:\n      * `#define FASTLED_RMT5_RECYCLE=1` before `#include \"FastLED.h\"`\n* Arduino Cloud compile fixes\n  * ESP328622 has an additional compile fix for the in-place new operator. Arduino Cloud compiler uses an ancient gcc compiler version which is missing the __has_include that we use to determine if FastLED needs to define a missing in-place new operator.\n* Internal stuff\n  * `FASTLED_ASSERT(true/false, MSG)` now implemented on ESP32, other platforms will just call `FASTLED_WARN(MSG)` and not abort. Use it via `#include fl/assert.h`. Be careful because on ESP32 it will absolutely abort the program, even in release. This may change later.\n\n\nFastLED 3.9.7\n=============\n* ESP32:\n  * Okay final fix for the green led that's been stuck on. It turns out in 3.9.6 I made a mistake and swapped the RMT recycle vs no recycle. This should now be corrected. To get the old behavior back use `#define FASTLED_RMT5_RECYCLE=1`. The new behavior may become the default if it turns out this is more stable.\n* Arduino Cloud Compiler: This should now work ancient compiler toolchains that they use for some of the older ESP boards. Despite the fact that two bugs were fixed in the last release, another one cropped up in 3.9.6 for extremely old idf toolchians which defines digitalRead/digitalWrite not as functions, but as macros.\n\n\nFastLED 3.9.6\n=============\n* ESP32:\n  * Sticky first green LED on the chain has been fixed. It turned out to be aggressive RMT recycling. We've disabled this for now and filed a bug:\n      * https://github.com/FastLED/FastLED/issues/1786\n      * https://github.com/FastLED/FastLED/issues/1761\n      * https://github.com/FastLED/FastLED/issues/1774\n* Bug fix for FastLED 3.9.5\n  * Fixes using namespace fl in `FastLED.h` in the last release (oops!)\n* Fixes for Arduino Cloud compiler and their ancient version of esp-idf for older chips.\n  * Handle missing `IRAM_ATTR`\n  * inplace new operator now is smarter about when to be defined by us.\n\nFastLED 3.9.5\n=============\n\n* Esp32:\n  * There's a bug in the firmware of some ESP32's where the first LED is green/blue/red, though we haven't be able to reproduce it.\n  * This may be manifesting because of our RMT recycling. We offer a new RMT5 variant that may fix this.\n    * Here's how you enable it: use `#define FASTLED_RMT5_RECYCLE=0` before you `#include \"FastLED.h\"`\n    * If this works then please let us know either on reddit or responding to our bug entries:\n      * https://github.com/FastLED/FastLED/issues/1786\n      * https://github.com/FastLED/FastLED/issues/1761\n      * https://github.com/FastLED/FastLED/issues/1774\n* ESP32C6\n  * This new board had some pins marked as invalid. This has been fixed.\n* ESP32S2\n  * The correct SPI chipset (FSPI, was VSPI) is now used when `FASTLED_ALL_PINS_HARDWARE_SPI` is active.\n* The previous headers that were in src/ now have a stub that will issue a deprecation warning and instructions to fix, please migrated before 4.0 as the deprecated headers will go away.\n* Many many strict compiler warnings are now treated as errors during unit test. Many fixes in the core have been applied.\n* CLEDController::setEnabled(bool) now allows controllers to be selectively disabled/enabled. This is useful if you want to have multiple controller types mapped to the same pin and select which ones are active during runtime, or to shut them off for whatever reason.\n* Attiny88 is now under test.\n* CLEDController::clearLeds() again calls showLeds(0)\n* Completely remove Json build artifacts for avr, fixes compiler error for ancient avr-gcc versions.\n* Namespaces: `fl` - the new FastLED namespace\n  * Much of the new code in 3.9.X has been moved into the `fl` namespace. This is now located in the `fl/` directory. These files have mandatory namespaces but most casual users won't care because because all the files in the `fl/` directory are for internal core use.\n  * Namespaces for the core library are now enabled in internal unit tests to ensure they work correctly for the power users that need them. Enabling them requires a build-level define. (i.e. every build system except ArduinoIDE supports this) you can use it putting in this build flag: `-DFASTLED_NAMESPACE=1`. This will force it on for the entire FastLED core.\n  * We are doing this because we keep getting conflicts with our files and classes conflict with power users who have lots of code.The arduino build system likes to put all the headers into the global space so the chance of collisions goes up dramatically with the number of dependencies one has and we are tired of playing wack a mole with fixing this.\n    * Example: https://github.com/FastLED/FastLED/issues/1775\n* Stl-like Containers: We have some exciting features coming up for you. In this release we are providing some of the containers necessary for complex embedded black-magic.\n  * `fl::Str`: a copy on write String with inlined memory, which overflows to the heap after 64 characters. Lightning fast to copy around and keep your characters on the stack and prevent heap allocation. Check it out in `fl/str.h`. If 64 characters is too large for your needs then you can change it with a build-level define.\n  * `fl/vector.h`:\n    * `fl::FixedVector`: Inlined vector which won't ever overflow.\n    * `fl::HeapVector`: Do you need overflow in your vector or a drop in replacement for `std::vector`? Use this.\n    * `fl::SortedHeapVector`: If you want to have your items sorted, use this. Inserts are O(n) always right now, however with deferred sorting, it could be much faster. Use `fl::SortedHeapVector::setMaxSize(int)` to keep it from growing.\n  * `fl/map.h`\n    * `fl::SortedHeapMap`: Almost a drop in replacement for `std::map`. It differs from the `fl::SortedHeapVector` because this version works on key/value pairs. Like `std::map` this takes a comparator which only applies to the keys.\n    * `fl::FixedMap`: Constant size version of `fl::SortedHeapMap` but keeps all the elements inlined and never overflows to the heap.\n  * `fl/set.h`\n    * `fl::FixedSet`: Similar to an `std::set`. Never overflows and all the memory is inlined. Ever operation is O(N) but the inlined nature means it will beat out any other set as long as you keep it small.\n  * `fl/scoped_ptr.h`:\n    * `fl::scoped_ptr.h`:\n      * Similar to `std::unique_ptr`, this allows you to manage a pointer type and have it automatically destructed.\n    * `fl::scoped_array.h`: Same thing but for arrays. Supports `operator[]` for array like access.\n  * `fl/slice.h`: Similar to an `std::span`, this class will allow you to pass around arrays of contigious memory. You can `pop_front()` and `pop_back()`, but it doesn't own the memory so nothing will get deleted.\n  * `fl/ptr.h`\n    * `fl::Ptr<T>`, a ref counted intrusive shared pointer. \"Intrusive\" means the referent is inside the class the pointer refers to, which prevents an extra allocation on the heap. It's harder to use than `std::shared_ptr` because it's extremely strict and will not auto-covert a raw pointer into this Ptr type without using `Ptr<T>::TakeOwnership(T*)`. This is done to prevent objects from double deletion. It can also take in pointers to stack/static objects with `Ptr<T>::NoTracking(T*)`, which will disable reference counter but still allow you use\n* Blur effects no longer link to the int XY(int x, int y) function which is assumed to exist in your sketch. This has been the bane of existance for those that encounter it. Now all functions that linked to XY() now take in a `fl::XYMap` which is the class\n  form of this. This also means that you can apply blur effects with multiple led panels, where XY() assumed you just had only one array of leds.\n* Sensors\n  * PIR (passife infrared) sensors are one of the staples of LED effects. They are extremely good at picking up movement anywhere and are extremely cheap. They are also extremely easy to use with only one pin, besides the power rails. I've used them countless times for nearly all my LED effects. Therefore I've added two PIR sensors for you to play around with.\n    * `sensors/pir.h`\n      * `fl::Pir`: This is a basic PIR that will tell you if the sensor is curently triggered. It doesn't do much else.\n      * `fl::AdvancedPir`: An extended version of `fl::Pir` which gives transition effects as it turns on and off. Here is what the\n        the constructor looks like: `fl::PirAdvanced(int pin, uint32_t latchMs = 5000, uint32_t risingTime = 1000, uint32_t fallingTime = 1000)`.\n        You will give it the pin, an optional latch time (how long it stays on for), the rising time (how long to go from off to on) and the falling\n        time which is how long it takes to go from on to off. By default it will ramp on for one second, stay on for 5 seconds at full brightness, then\n        start turning off for one second. All you have to do is give it the current `millis()` value.\n      * To see it in action check out `examples/fx/NoiseRing`\n* AVR\n  * The Atmega family and 32u now has a maximum of 16 controllers that can be active, up from 8, due to these models having more memory. Someone actually needed this, suprisingly.\n* The 4.0 release is getting closer. We have some exciting stuff on the horizon that I can't wait to show you! Happy Coding! ~Zach\n\nFastLED 3.9.4\n=============\n* Fixes some name collisions from users including a lot of libraries.\n* Other misc fixes.\n\n\nFastLED 3.9.3\n=============\n* Beta Release 3 for FastLED 4.0.0\n* ESP32C6 now supported with RMT5 driver without workaround. This chip does not use DMA and so must go through the non DMA path for RMT.\n* RMT5 tweaks for ESP32\n  * For non DMA memory boards like the ESP32, ESP32C3, ESP32C6 RMT will now double it's memory but only allow 4 RMT workers.\n  * This was the behavior for the RMT4.X drivers.\n  * This is done to reduce LED corruption when WIFI is enabled.\n* WS2812 now allows user overrides of it's timing values T1, T2, T3. This is to help debug timing issues on the new V5B of\n  this chipset. You can define FASTLED_WS2812_T1, FASTLED_WS2812_T2, FASTLED_WS2812_T3 before you include FastLED.\n\nFastLED 3.9.2\n=============\n* Beta release 2 for FastLED 4.0.0\n  * In this version we introduce the pre-release of our WS2812 overclocking\n  * We have compile fixes for 3.9.X\n* WS28XX family of led chipsets can now be overclocked\n  * See also define `FASTLED_OVERCLOCK`\n    * Example: `#define FASTLED_OVERCLOCK 1.2` (gives 20% overclock).\n    * You can set this define before you include `\"FastLED.h\"`\n    * Slower chips like AVR which do software bitbanging will ignore this.\n    * This discovery came from this reddit thread:\n      * https://www.reddit.com/r/FastLED/comments/1gdqtw5/comment/luegowu\n      * A special thanks to https://www.reddit.com/user/Tiny_Structure_7/ for discovering this!\n    * See examples/Overclock.ino for a working demo.\n  * You can either overclock globally or per led chipset on supported chipsets.\n  * Real world tests\n    * I (Zach Vorhies) have seen 25% overclock on my own test setup using cheap amazon WS2812.\n    * u/Tiny_Structure_7 was able to overclock quality WS2812 LEDs 800khz -> 1.2mhz!!\n    * Assuming 550 WS2812's can be driven at 60fps at normal clock.\n      * 25% overclock: 687 @ 60fps\n      * 50% overclock: 825 @ 60fps\n      * Animartrix benchmark (ESP32S3)\n        * 3.7.X: 34fps\n        * 3.9.0: 59fps\n        * 3.9.2: 70fps @ 20% overclock (after this the CPU becomes the bottleneck).\n      * FastLED is now likely at the theoretical maximum speed and efficiency for frame draw (async) & dispatch (overclock).\n  * Fixes `ESPAsyncWebServer.h` namespace collision with `fs.h` in FastLED, which has been renamed to `file_system.h`\n\n\nExample of how to enable overclocking.\n\n```\n#define FASTLED_OVERCLOCK 1.2 // 20% overclock ~ 960 khz.\n#include \"FastLED.h\"\n```\n\n\nFastLED 3.9.1\n=============\n* Bug fix for namespace conflicts\n* One of our third_party libraries was causing a namespace conflict with ArduinoJson included by the user.\n  * If you are affected then please upgrade.\n* FastLED now supports it's own namespace, default is `fl`\n  * Off by default, as old code wants FastLED stuff to be global.\n  * Enable it by defining: `FASTLED_FORCE_NAMESPACE`\n\n\nFastLED 3.9.0\n=============\n* Beta 4.0.0 release\n* ESP32 RMT5 Driver Implemented.\n  * Driver crashes on boot should now be solved.\n  * Parallel AND async.\n    * Drive up to 8 channels in parallel (more, for future boards) with graceful fallback\n      if your sketch allocates some of them.\n        * In the 3.7.X series the total number of RMT channels was limited to 4.\n    * async mode means FastLED.show() returns immediately if RMT channels are ready for new\n      data. This means you can compute the next frame while the current frame is being drawn.\n  * Flicker with WIFI *should* be solved. The new RMT 5.1 driver features\n    large DMA buffers and deep transaction queues to prevent underflow conditions.\n  * Memory efficient streaming encoding. As a result the \"one shot\" encoder no longer\n    exists for the RMT5 driver, but may be added back at a future date if people want it.\n  * If for some reason the RMT5 driver doesn't work for you then use the following define `FASTLED_RMT5=0` to get back the old behavior.\n* Improved color mixing algorithm, global brightness, and color scaling are now separate for non-AVR platforms. This only affects chipsets that have higher than RGB8 output, aka APA102, and clones\n  right now.\n  * APA102 and APA102HD now perform their own color mixing in psuedo 13 bit space.\n    * If you don't like this behavior you can always go back by using setting `FASTLED_HD_COLOR_MIXING=0`.\n* Binary size\n  * Avr platforms now use less memory\n  * 200 bytes in comparison to 3.7.8:\n    * 3.7.8: attiny85 size was 9447 (limit is 9500 before the builder triggers a failure)\n    * 3.8.0: attiny85 size is now 9296\n    * This is only true for the WS2812 chipset. The APA102 chipset consumes significantly more memory.\n* Compile support for ATtiny1604 and other Attiny boards\n  * Many of these boards were failing a linking step due to a missing timer_millis value. This is now injected in via weak symbol for these boards, meaning that you won't get a linker error if you include code (like wiring.cpp) that defines this.\n  * If you need a working timer value on AVR that increases via an ISR you can do so by defining `FASTLED_DEFINE_AVR_MILLIS_TIMER0_IMPL=1`\n* Board support\n  * nordicnrf52_dk now supported and tested (thanks https://github.com/paulhayes!)\n* Some unannounced features.\n* Happy coding!\n\n\nFor sketches that do a lot of heavy processing for each frame, FastLED is going to be **significantly** faster with this new release.\n\nHow much faster?\n\nI benchmarked the animartrix sketch, which has heavy floating point requirements (you'll need a Teensy41 or an ESP32S3 to handle the processing requirements).\n\nFastLED 3.7.X - 34fps\nFastLED 3.9.0 - 59fps (+70% speedup!)\n\nWhy?\n\nIn FastLED 3.7.X, FastLED.show() was always a blocking operation. Now it's only blocking when the previous frame is waiting to complete it's render.\n\nIn the benchmark I measured:\n12 ms - preparing the frame for draw.\n17 ms - actually drawing the frame.\n\n@ 22x22 WS2812 grid.\n\nSo for FastLED 3.7.X this meant that these two values would sum together. So 12ms + 17ms = 29ms = 34fps.\nBut in FastLED 3.9.0 the calculation works like this MAX(12, 17) = 17ms = 59fps. If you fall into this category, FastLED will now free up 17ms to do available work @ 60fps, which is a game changer.\n\nAs of today's release, nobody else is doing async drawing. FastLED is the only one to offer this feature.\n\nFastLED 3.8.0\n=============\n* Attiny0/1 (commonly Attiny85) support added.\n  * https://github.com/FastLED/FastLED/pull/1292 , https://github.com/FastLED/FastLED/pull/1183 , https://github.com/FastLED/FastLED/pull/1061\n  * Special thanks to [@freemovers](https://github.com/freemovers), [@jasoncoon](https://github.com/jasoncoon), [@ngyl88](https://github.com/ngyl88) for the contribution.\n  * Many common boards are now compiled in the Attiny family. See our repo for which ones are supported.\n* Arduino nano compiling with new pin definitions.\n  *  https://github.com/FastLED/FastLED/pull/1719\n  *  Thanks to https://github.com/ngyl88 for the contribution!\n* New STM32F1 boards compiling\n  * bluepill\n  * maple mini\n* CPPCheck now passing for HIGH and MEDIUM severity on all platforms.\n\n\nFastLED 3.7.7\n=============\n* WS2812 RGBW mode is now part of the API.\n  * Api: `FastLED.addLeds<WS2812, DATA_PIN, GRB>(leds, NUM_LEDS).setRgbw(RgbwDefault());`\n  * Only enabled on ESP32 boards, no-op on other platforms.\n  * See [examples/RGBW/RGBW.ino](https://github.com/FastLED/FastLED/blob/master/examples/RGBW/RGBW.ino)\n* WS2812 Emulated RGBW Controller\n  * Works on all platforms (theoretically)\n  * Has an extra side buffer to convert RGB -> RGBW data.\n    * This data is sent to the real driver as if it were RGB data.\n    * Some padding is added when source LED data is not a multiple of 3.\n  * See [examples/RGBWEmulated/RGBWEmulated.ino](https://github.com/FastLED/FastLED/blob/master/examples/RGBW/RGBW.ino)\n* New supported chipsets\n  * UCS1912 (Clockless)\n  * WS2815 (Clockless)\n* New supported boards\n  * xiaoblesense_adafruit\n    * Fixes https://github.com/FastLED/FastLED/issues/1445\n* [PixelIterator](src/pixel_iterator.h) has been introduced to reduce complexity of writing driver code\n  * This is how RGBW mode was implemented.\n  * This is a concrete class (no templates!) so it's suitable for driver code in cpp files.\n  * PixelController<> can convert to a PixelIterator, see `PixelController<>::as_iterator(...)`\n* Fixed APA102HD mode for user supplied function via the linker. Added test so that it won't break.\n\n\nFastLED 3.7.6\n=============\n* WS2812 RGBW Mode enabled on ESP32 via experimental `FASTLED_EXPERIMENTAL_ESP32_RGBW_ENABLED`\n* RPXXXX compiler fixes to solve asm segment overflow violation\n* ESP32 binary size blew up in 3.7.5, in 3.7.6 it's back to the same size as 3.7.4\n* APA102 & SK9822 have downgraded their default clock speed to improve \"just works\" experience\n  * APA102 chipsets have downgraded their default clock from 24 mhz to 6mhz to get around the \"long strip signal degradation bug\"\n    * https://www.pjrc.com/why-apa102-leds-have-trouble-at-24-mhz/\n    * We are prioritizing \"just works by default\" rather than \"optimized by default but only for short strips\".\n    * 6 Mhz is still blazingly fast compared to WS2812 and you can always bump it up to get more performance.\n  * SK9822 have downgraded their default clock from 24 mhz -> 12 mhz out of an abundance of caution.\n    * I don't see an analysis of whether SK9822 has the same issue as the APA102 for the clock signal degredation.\n    * However, 12 mhz is still blazingly fast (>10x) compared to WS2812. If you need faster, bump it up.\n* NRF52XXX platforms\n  * Selecting an invalid pin will not spew pages and pages of template errors. Now it's been deprecated to a runtime message and assert.\n* nrf52840 compile support now official.\n\nFastLED 3.7.5\n=============\n\n* split the esp32-idf 4.x vs 5.x rmt driver. 5.x just redirects to 4.x by @zackees in https://github.com/FastLED/FastLED/pull/1682\n* manually merged in stub from https://github.com/FastLED/FastLED/pull/1366 by @zackees in https://github.com/FastLED/FastLED/pull/1685\n* manually merge changes from https://github.com/FastLED/FastLED/compare/master...ben-xo:FastLED:feature/avr-clockless-trinket-interrupts by @zackees in https://github.com/FastLED/FastLED/pull/1686\n* Add simplex noise [revisit this PR in 2022] by @aykevl in https://github.com/FastLED/FastLED/pull/1252\n* Add ColorFromPaletteExtended function for higher precision by @zackees in https://github.com/FastLED/FastLED/pull/1687\n* correct RP2350 PIO count / fix double define SysTick by @FeuerSturm in https://github.com/FastLED/FastLED/pull/1689\n* improved simplex noise by @zackees in https://github.com/FastLED/FastLED/pull/1690\n* Fix shift count overflow on AVR in simplex snoise16 by @tttapa in https://github.com/FastLED/FastLED/pull/1692\n* adds extended color palette for 256 by @zackees in https://github.com/FastLED/FastLED/pull/1697\n* RP2350 board now compiles.\n\n\n\nFastLED 3.7.4\n=============\nBoard support added\n  * https://github.com/FastLED/FastLED/pull/1681\n    * Partial support for adafruit nrf sense\n      * WS2812 compiles\n      * APA102 does not\n    * Hat tip to https://github.com/SamShort7 for the patch.\n  * https://github.com/FastLED/FastLED/pull/1630\n    * Adafruit Pixel Trinkey M0 support\n    * Hat tip: https://github.com/BlitzCityDIY\n\n\nFastLED 3.7.3\n=============\nAdds Arduino IDE 2.3.1+ support in the idf-5.1 toolchain\nThe following boards are now tested to compile and build\n  * esp32dev\n  * esp32c3\n  * esp32s3\n  * esp32c6\n  * esp32s2\n\n\nFastLED 3.7.2\n=============\nThis is a feature enhancement release\n  * https://github.com/FastLED/FastLED/commit/cbfede210fcf90bcec6bbc6eee7e9fbd6256fdd1\n    * fill_gradient() now has higher precision for non __AVR__ boards.\n\t\t* Fixes: https://github.com/FastLED/FastLED/issues/1658\n\t\t\t* Thanks https://github.com/sutaburosu for the fix.\n\n\nFastLED 3.7.1\n=============\nThis is a bug fix release\n  * https://github.com/FastLED/FastLED/commit/85650d9eda459df20ea966b85d48b84053c2c604\n    * Addresses compiler issues related ESP32-S3 and the RMT legacy driver in ArduinoIDE 2.3.2 update which now includes the ESP-IDF 5.1.\n    * Note that this is a compiler fix *only* and was simple. If the community reports additional problems we will release a bugfix to address it.\n  * https://github.com/FastLED/FastLED/commit/e0a34180c5ad1512aa39f6b6c0987119535d39e8\n    * Work around for ESP32 halt when writing WS2812 LEDS under massive load. It appears there was an underflow condition in a critical ISR to refill the RMT buffer that did not give back to a semaphore. Subsequent calls to `show()` would then block forever. We now given a max timeout so that in the worse case scenario there will be a momentary hang of `portMAX_DELAY`.\n\n\nFastLED 3.7.0\n=============\nThis release incorporates valuable improvements from FastLED contributors, tested and explored by the world-wide FastLED community of artists, creators, and developers.  Thank you for all of your time, energy, and help!  Here are some of the most significant changes in FastLED 3.7.0:\n* Support for ESP-IDF version 5.x on ESP32 and ESP8266a\n* Improved support for new boards including UNO r4, Adafruit Grand Central Metro M4, SparkFun Thing Plus, RP2040, Portenta C33, and others.  We also added a pointer to the PORTING.md document to help streamline additional porting; if you’re porting to a new microcontroller, PORTING.md is the place to start.\n* New gamma correction capability for APA102 and SK9822 LEDs\n* Bug fixes and performances improvements, including faster smaller code on AVR, fewer compiler warnings, and  faster build times\n* Released May 2024, with heartfelt thanks to all the FastLED community members around the world!\n\n\nFastLED 3.6.0\n=============\nThis release incorporates valuable improvements from FastLED contributors, tested and explored by the world-wide FastLED community of artists, creators, and developers.  Thank you for all of your time, energy, and help!  Here are some of the most significant changes in FastLED 3.6.0: \n* Greatly improved support for ESP32 and ESP8266\n* Expanded and improved board support including Teensy4, Adafruit M4 CAN Express and Grand Central M4, RP2040, ATtiny48/88, Arduino MKRZero, and various other AVR and ARM boards\n* Added support for DP1903 LEDs\n* Added fill_rainbow_circular and fill_palette_circular functions to draw a full rainbow or other color palette on a circular ring of LEDs\n* Added a non-wrapping mode for ColorFromPalette, \"LINEARBLEND_NOWRAP\"\n* No more \"register\" compiler warnings\n* Bug fixes and performance improvements, including in lib8tion and noise functions\n* We are expanding the FastLED team to help the library grow, evolve, and flourish\n* Released May 2023, with deepest thanks to all the FastLED community members around the world!\n\n\nFastLED 3.5.0\n=============\nThis release incorporates dozens of valuable improvements from FastLED contributors, tested and explored by the world-wide FastLED community of artists, creators, and developers.  Thank you for all of your time, energy, and help!  Here are some of the most significant changes in FastLED 3.5.0: \n* Greatly improved ESP32 and ESP8266 support\n* Improved board support for Teensy 4, Adafruit MatrixPortal M4, Arduino Nano Every, Particle Photon, and Seeed Wio Terminal\n* Improved and/or sped up: sin8, cos8, blend8, blur2d, scale8, Perlin/simplex noise\n* Improved HSV colors are smoother, richer, and brighter in fill_rainbow and elsewhere\n* Modernized and cleaned up the FastLED examples\n* Added github CI integration to help with automated testing\n* Added a Code of Conduct from https://www.contributor-covenant.org/\n* Released January 2022, with many thanks to FastLED contributors and the FastLED community!  \n\n\nFastLED 3.4.0\n=============\n\n* Improved reliability on ESP32 when wifi is active\n* Merged in contributed support for Adafruit boards: QT Py SAMD21, Circuit Playground Express,  Circuit Playground Bluefruit, and ItsyBitsy nRF52840 Express\n* Merged in contributed support for SparkFun Artemis boards\n* Merged in contributed support for Arduino Nano Every / Arduino Uno Wifi Rev. 2\n* Merged in contributed support for Seeedstudio Odyssey and XIAO boards\n* Merged in contributed support for AVR chips ATmega1284, ATmega4809, and LGT8F328\n* XYMatrix example now supports 90-degree rotated orientation\n* Moved source code files into \"src\" subdirectory\n* Many small code cleanups and bug fixes\n* Released December 2020, with many thanks to everyone contributing to FastLED!\n\nWe also want to note here that in 2020, Github named FastLED one of the 'Greatest Hits' of Open Source software, and preserved an archived copy of FastLED in the Arctic Code Vault, the Bodleian Library at Oxford University, the Bibliotheca Alexandrina (the Library of Alexandria), and the Stanford University Libraries.  https://archiveprogram.github.com/greatest-hits/\n\n\n\nFastLED 3.3.3\n=============\n\n* Improved support for ESP32, Teensy4, ATmega16, nRF52, and ARM STM32.  \n* Added animation examples: \"TwinkleFox\" holiday lights, \"Pride2015\" moving rainbows, and \"Pacifica\" gentle ocean waves \n* Fixed a few bugs including a rare divide-by-zero crash\n* Cleaned up code and examples a bit\n* Said our sad farwells to FastLED founder Daniel Garcia, who we lost in a tragic accident on September 2nd, 2019.  Dan's beautiful code and warm kindness have been at the heart of the library, and our community, for ten years.  FastLED will continue with help from all across the FastLED world, and Dan's spirit will be with us whenever the lights shine and glow.  Thank you, Dan, for everything.\n\n\nFastLED 3.3.2\n=============\n\n* Fix APA102 compile error #870 \n* Normalize pin definition macros so that we can have an .ino file that can be used to output what pin/port mappings should be for a platform\n* Add defnition for ATmega32\n\nFastLED 3.3.1\n=============\n\n* Fix teensy build issue \n* Bring in sam's RMT timing fix\n\nFastLED 3.3.0\n==============\n* Preliminary Teensy 4 support\n* Fix #861 - power computation for OctoWS2811\n* keywords and other minor changes for compilers (#854, #845)\n* Fix some nrf52 issues (#856), #840\n\nFastLED 3.2.10\n==============\n* Adafruit Metro M4 Airlift support\n* Arduino Nano 33 IOT preliminary definitions\n* Bug fixes\n\nFastLED 3.2.9\n=============\n* Update ItsyBitsy support\n* Remove conflicting types courtesy of an esp8266 framework update\n* Fixes to clockless M0 code to allow for more interrupt enabled environments\n* ATTiny25 compilation fix\n* Some STM32 fixes (the platform still seems unhappy, though)\n* NRF52 support\n* Updated ESP32 support - supporting up to 24-way parallel output\n\n\n\nFastLED 3.2.6\n=============\n\n* typo fix\n\nFastLED 3.2.5\n=============\n\n* Fix for SAMD51 based boards (a SAMD21 optimization broke the D51 builds, now D51 is a separate platform)\n\nFastLED 3.2.4\n=============\n\n* fix builds for WAV boards\n\nFastLED 3.2.2\n=============\n\n* Perf tweak for SAMD21\n* LPD6803 support\n* Add atmega328pb support\n* Variety of minor bug/correctness/typo fixes\n* Added SM16703, GE8822, GS1903\n\nFastLED 3.2.1\n=============\n* ATmega644P support\n* Adafruit Hallowwing (Thanks to Lady Ada)\n* Improved STM 32 support\n* Some user contributed cleanups\n* ESP32 APA102 output fix\n\nFastLED3.2\n==========\n* ESP32 support with improved output and parallel output options (thanks Sam Guyer!)\n* various minor contributed fixes\n\nFastLED 3.1.8\n=============\n* Added support for Adafruit Circuit Playground Express (Thanks to Lady Ada)\n* Improved support for Adafruit Gemma and Trinket m0 (Thanks to Lady Ada)\n* Added support for PJRC's WS2812Serial (Thanks to Paul Stoffregen)\n* Added support for ATmega328 non-picopower hardware pins (Thanks to John Whittington)\n* Fixes for ESP32 support (Thanks to Daniel Tullemans)\n* 'Makefile' compilation fix (Thanks to Nico Hood)\n\nFastLED 3.1.7 (skipped)\n=======================\n\nFastLED 3.1.6\n=============\n* Preliminary support for esp32\n* Variety of random bug fixes\n* 6-channel parallel output for the esp8266\n* Race condition fixes for teensy hardware SPI\n* Preliminary teensy 3.6 support\n* Various fixes falling out from \"fixing\" scale 8 adjustments\n* Add gemma m0 support (thanks @ladyada!)\n\nFastLED 3.1.5\n=============\n* Fix due parallel output build issue\n\nFastLED 3.1.4\n=============\n* fix digispark avr build issue\n\nFastLED3.1.3\n===============\n\n* Add SK6822 timings\n* Add ESP8266 support - note, only tested w/the arduino esp8266 build environment\n* Improvements to hsv2rgb, palette, and noise performance\n* Improvements to rgb2hsv accuracy\n* Fixed noise discontinuity\n* Add wino board support\n* Fix scale8 (so now, scale8(255,255) == 255, not 254!)\n* Add ESP8266 parallel output support\n\n\nFastLED3.1.1\n============\n* Enabled RFDuino/nrf51822 hardware SPI support\n* Fix edge case bug w/HSV palette blending\n* Fix power management issue w/parallel output\n* Use static_asserts for some more useful compile time errors around bad pins\n* Roll power management into FastLED.show/delay directly\n* Support for adafruit pixies on arduino type platforms that have SoftwareSerial\n  * TODO: support hardware serial on platforms that have it available\n* Add UCS2903 timings\n* Preliminary CPixelView/CRGBSet code - more flexible treatment of groups of arrays\n  * https://github.com/FastLED/FastLED/wiki/RGBSet-Reference\n\n\nFastLED3.1.0\n============\n* Added support for the following platforms\n  * Arduino Zero\n  * Teensy LC\n  * RFDuino/nrf51822\n  * Spark Core\n* Major internal code reoganization\n* Started doxygen based documentation\n* Lots of bug/performance fixes\n* Parallel output on various arm platforms\n* lots of new stuff\n\nFastLED3.0.2\n============\n* possibly fix issues #67 and #90 by fixing gcc 4.8.x support\n\nFastLED3.0.1\n============\n* fix issue #89 w/power management pin always being on\n\nFastLED3.0\n==========\n\n* Added support for the following platforms:\n  * Arduino due\n  * Teensy 3.1\n* Added the following LED chipsets:\n  * USC1903_400\n  * GW6205 / GW6205_400\n  * APA102\n  * APA104\n  * LPD1886\n  * P9813\n  * SmartMatrix\n* Added multiple examples:\n  * ColorPalette - show off the color palette code\n  * ColorTemperature - show off the color correction code\n  * Fire2012\n  * Fire2012WithPalette\n  * Multiple led controller examples\n  * Noise\n  * NoisePlayground\n  * NoisePlusPalette\n  * SmartMatrix - show off SmartMatrix support\n  * XYMatrix - show how to use a mtrix layout of leds\n* Added color correction\n* Added dithering\n* Added power management support\n* Added support for color palettes\n* Added easing functions\n* Added fast trig functions\n* Added simplex noise functions\n* Added color utility functions\n* Fixed DMXSERIAL/DMXSIMPLE support\n* Timing adjustments for existing SPI chipsets\n* Cleaned up the code layout to make platform support easier\n* Many bug fixes\n* A number of performance/memory improvements\n* Remove Squant (takes up space!)\n\nFastLED2\n========\n\n## Full release of the library\n\n## Release Candidate 6\n* Rename library, offically, to FastLED, move to github\n* Update keywords with all the new stuffs\n\n## Release Candidate 5\n* Gemma and Trinket: supported except for global \"setBrightness\"\n\n## Release Candidate 4\n* Added NEOPIXEL as a synonym for WS2811\n* Fix WS2811/WS2812B timings, bring it in line to exactly 1.25ns/bit.  \n* Fix handling of constant color definitions (damn you, gcc!)\n\n## Release Candidate 3\n* Fixed bug when Clock and Data were on the same port\n* Added ability to set pixel color directly from HSV\n* Added ability to retrieve current random16 seed\n\n## Release Candidate 2\n* mostly bug fixes\n* Fix SPI macro definitions for latest teensy3 software update\n* Teensy 2 compilation fix\n* hsv2rgb_rainbow performance fix\n\n## Release Candidate 1\n* New unified/simplified API for adding/using controllers\n* fleshout clockless chip support\n* add hsv (spectrum and rainbow style colors)\n* high speed memory management operations\n* library for interpolation/easing functions\n* various api changes, addition of clear and showColor functions\n* scale value applied to all show methods\n* bug fixes for SM16716\n* performance improvements, lpd8806 exceeds 22Mbit now\n* hardware def fixes\n* allow alternate rgb color orderings\n* high speed math methods\n* rich CRGB structure\n\n## Preview 3\n* True hardware SPI support for teensy (up to 20Mbit output!)\n* Minor bug fixes/tweaks\n\n## Preview 2\n* Rename pin class to FastPin\n* Replace latch with select, more accurate description of what it does\n* Enforce intra-frame timing for ws2801s\n* SM16716 support\n* Add #define FAST_SPI_INTERRUPTS_WRITE_PINS to make sure world is ok w/interrupts and SPI\n* Add #define FASTLED_FORCE_SOFTWARE_SPI for those times when you absolutely don't want to use hardware SPI, ev\nen if you're using the hardware SPI pins\n* Add pin definitions for the arduino megas - should fix ws2811 support\n* Add pin definitions for the leonardo - should fix spi support and pin mappings\n* Add warnings when pin definitions are missing\n* Added google+ community for fastspi users - https://plus.google.com/communities/109127054924227823508\n# Add pin definitions for Teensy++ 2.0\n\n\n## Preview 1\n* Initial release\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "blob",
          "size": 0.05859375,
          "content": "#!/bin/bash\nset -e\n\ncd \"$(dirname \"$0\")\"\nuv run test.py \"$@\""
        },
        {
          "name": "test.py",
          "type": "blob",
          "size": 4.8818359375,
          "content": "#!/usr/bin/env python3\nimport os\nimport sys\nimport io\nimport subprocess\nimport time\nimport threading\nimport queue\nimport argparse\nimport _thread\nfrom pathlib import Path\nfrom typing import List, Tuple, Any, Optional\nfrom ci.running_process import RunningProcess\n\n_PIO_CHECK_ENABLED = False\n\n_IS_GITHUB = os.environ.get('GITHUB_ACTIONS') == 'true'\n\ndef run_command(cmd: List[str], **kwargs: Any) -> None:\n    \"\"\"Run a command and handle errors\"\"\"\n    try:\n        subprocess.run(cmd, check=True, **kwargs)\n    except subprocess.CalledProcessError as e:\n        sys.exit(e.returncode)\n\ndef output_reader(process: subprocess.Popen[str], \n                 output_queue: queue.Queue[Tuple[str, str]], \n                 stop_event: threading.Event) -> None:\n    \"\"\"Read output from process and put it in the queue\"\"\"\n    try:\n        assert process.stdout is not None  # for mypy\n        assert process.stderr is not None  # for mypy\n        \n        while not stop_event.is_set():\n            # Use a small timeout so we can check the stop_event regularly\n            if process.stdout.readable():\n                stdout_line = process.stdout.readline()\n                if stdout_line:\n                    output_queue.put(('stdout', stdout_line))\n            if process.stderr.readable():\n                stderr_line = process.stderr.readline()\n                if stderr_line:\n                    output_queue.put(('stderr', stderr_line))\n            \n            # Check if process has ended and all output has been read\n            if process.poll() is not None:\n                # Get any remaining output\n                remaining_out, remaining_err = process.communicate()\n                if remaining_out:\n                    output_queue.put(('stdout', remaining_out))\n                if remaining_err:\n                    output_queue.put(('stderr', remaining_err))\n                break\n    except KeyboardInterrupt:\n        # Interrupt main thread and exit\n        _thread.interrupt_main()\n        return\n\ndef parse_args() -> argparse.Namespace:\n    \"\"\"Parse command line arguments\"\"\"\n    parser = argparse.ArgumentParser(description='Run FastLED tests')\n    parser.add_argument('--cpp', action='store_true',\n                       help='Run C++ tests only')\n    parser.add_argument('--test', type=str,\n                       help='Specific C++ test to run')\n    return parser.parse_args()\n\n\ndef _make_pio_check_cmd() -> List[str]:\n    return ['pio', 'check', '--skip-packages', \n                            '--src-filters=+<src/>', '--severity=medium',\n                            '--fail-on-defect=high', '--flags',\n                            '--inline-suppr --enable=all --std=c++17']\n\n\ndef main() -> None:\n    try:\n        args = parse_args()\n        \n        # Change to script directory\n        os.chdir(Path(__file__).parent)\n\n        if args.cpp:\n            # Compile and run C++ tests\n            start_time = time.time()\n            if args.test:\n                # Run specific C++ test\n                proc = RunningProcess('uv run ci/cpp_test_run.py --test ' + args.test)\n                proc.wait()\n                if proc.returncode != 0:\n                    print(f\"Command failed: {proc.command}\")\n                    sys.exit(proc.returncode)\n            else:\n                # Run all C++ tests\n                proc = RunningProcess('uv run ci/cpp_test_run.py')\n                proc.wait()\n                if proc.returncode != 0:\n                    print(f\"Command failed: {proc.command}\")\n                    sys.exit(proc.returncode)\n            print(f\"Time elapsed: {time.time() - start_time:.2f}s\")\n            return\n        \n\n\n        cmd_list = _make_pio_check_cmd()\n        if not _PIO_CHECK_ENABLED:\n            cmd_list = ['echo', 'pio check is disabled']\n\n        cmd_str = subprocess.list2cmdline(cmd_list)\n        \n        print(f\"Running command (in the background): {cmd_str}\")\n        pio_process = RunningProcess(cmd_str, echo=False, auto_run=not _IS_GITHUB)\n        cpp_test_proc = RunningProcess('uv run ci/cpp_test_run.py')\n        compile_native_proc = RunningProcess('uv run ci/ci-compile-native.py', echo=False)\n        pytest_proc = RunningProcess('uv run pytest ci/tests', echo=False)\n        tests = [cpp_test_proc, compile_native_proc, pytest_proc, pio_process]\n\n        for test in tests:\n            sys.stdout.flush()\n            if not test.auto_run:\n                test.run()\n            test.wait()\n            if not test.echo:\n                for line in test.stdout.splitlines():\n                    print(line)\n            if test.returncode != 0:\n                [t.kill() for t in tests]\n                print(f\"\\nCommand failed: {test.command} with return code {test.returncode}\")\n                sys.exit(test.returncode)\n\n        print(\"All tests passed\")\n        sys.exit(0)\n    except KeyboardInterrupt:\n        sys.exit(130)  # Standard Unix practice: 128 + SIGINT's signal number (2)\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "wasm",
          "type": "blob",
          "size": 0.791015625,
          "content": "#!/bin/bash\n\n# Push instructions (x86_64)\n#   0. Only do this on x86_64.\n#   1. docker login\n#   2. ./wasm (builds the image and then runs a container)\n#     a. This will create an image tagged by fastled-wasm-compiler\n#   3. docker tag fastled-wasm-compiler:latest niteris/fastled-wasm:latest\n#   4. docker push niteris/fastled-wasm:latest\n#\n# Pull instructions (arm)\n#   0. Only do this on Mac-arm.\n#   1. docker login\n#   2. ./wasm (builds the image and then runs a container)\n#     a. This will create an image tagged by fastled-wasm-compiler\n#   3. docker tag fastled-wasm-compiler-arm64:latest niteris/fastled-wasm-arm64:latest\n#   4. docker push niteris/fastled-wasm-arm64:latest\n\n\n# pass in --build_wasm_compiler to build the wasm compilers.\n\nbuild_flag=\"-b\"\nuv run ci/wasm_compile.py $build_flag \"$@\"\n"
        },
        {
          "name": "workspace.code-workspace",
          "type": "blob",
          "size": 0.068359375,
          "content": "{\n    \"folders\": [\n        {\n            \"path\": \".\"\n        }\n    ]\n}"
        }
      ]
    }
  ]
}