{
  "metadata": {
    "timestamp": 1736566216261,
    "page": 228,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "forhappy/Cplusplus-Concurrency-In-Practice",
      "stars": 5357,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05078125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 傅海平\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.4755859375,
          "content": "﻿# 写作动机 #\n\n本书《C++ 并发编程指南》是个人在空余时间写的，由于时间仓促，加上自身水平有限，不可能写的很完善，也难免出现错误，如果你发现本书中的错误，或者有更好的想法，欢迎给我反馈，我会第一时间给予答复。后续我会坚持完善这一系列的文章。也希望感兴趣的同学和我一起完成。\n\n本书的创作出于以下两个目的：\n\n- 传播知识，介绍 C++ 并发编程。目前国内还没有一本完整介绍 C++11 并发编程的中文书籍，希望本书可以帮助广大的 C++ 开发者学习并发编程，降低 C++ 并发编程的学习难度，减少初学者对 C++ 并发编程的恐惧感。\n- 自我激励和提高。创作本书的另一个目的是自我激励和提高。和大部分人一样，本人也是 C++ 菜鸟一枚，在创作本书的过程中我会查阅大量资料，时间长了，自己学到的东西就慢慢积累多了。同时，在写作的时候为了表达清楚和准确，个别语句我会不断推敲，对自己的思维和语言表达能力很有帮助的。最后我坚信： 菜鸟都一样(因为什么都不会)，牛人各有各的不同。\n\n\n> 本书还处于创作早期(2013 年 8 月 31 日提交第一行内容)，还有很多内容需要修正和完善，如果你对此感兴趣，希望能加入到我们的队伍中(虽然目前还只有我一人孤身奋战)一起来完成 《C++ 并发编程指南》，传播知识，方便他人，提高自我吧。\n\n\n# 本书目录(只列出一级目录) #\n\n### 第一章 并发编程基础 ###\n### 第二章 几种常见的多线程库介绍 ###\n### 第三章 线程详解  ###\n### 第四章 互斥量与锁 ###\n### 第五章 条件变量与线程同步 ###\n### 第六章 异步任务详解 ###\n### 第七章 原子类型详解  ###\n### 第八章 C++11 内存模型 ###\n### 第九章 高级线程管理 ###\n### 第十章 如何编写正确的并发数据结构 ###\n### 第十一章 并发编程应用实例 ###\n### 附录 C++11 新标准概览 ###\n\n本书的详细目录和完成情况请移步[《C++ 并发编程指南》目录](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/Table-of-contents.md)\n\n# 本书创作发起人 #\n\n> forhappy（haipingf AT gmail DOT com）\n\n微博: @傅海平ICT([www.weibo.com/1702076100](http://www.weibo.com/1702076100))\n\n\n# 贡献者名单 #\n\n> 欢迎申请加入该名单 ;-)\n\n\n# License #\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 傅海平\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Table-of-contents.md",
          "type": "blob",
          "size": 9.1591796875,
          "content": "﻿# C++ 并发编程指南 #\n本书计划分为 11 章, 分别如下安排:\n\n## 第一章 并发编程基础 ##\n\n### 1.1 [什么是并发编程](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter1-Introduction/1.1%20What%20is%20concurrency.md) ###\n### 1.2 [并发与并行的区别和联系](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter1-Introduction/1.1%20What%20is%20concurrency.md#12-%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C%E7%9A%84%E8%81%94%E7%B3%BB%E5%92%8C%E5%8C%BA%E5%88%AB) ###\n### 1.3 为什么需要并发编程 ###\n### 1.4 并发编程应用场景和经典示例 ###\n### 1.5 [C++ 并发编程初探](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter1-Introduction/Cplusplus-Concurrency-Introduction.md) ###\n### 1.6 [资料汇](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter1-Introduction/web-resources.md) ###\n\n\n## 第二章 几种常见的多线程库介绍 ##\n\n### 2.1 Pthread 多线程编程指南 ###\n\n### 2.2 Windows 多线程编程指南 ###\n\n### 2.3 几种常见的多线程库接口对比 ###\n\n### 2.4 资料汇 ###\n\n\n## 第三章 线程详解 ##\n\n### 3.1 [`<thread>` 头文件摘要](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter3-Thread/Introduction-to-Thread.md#thread-%E5%A4%B4%E6%96%87%E4%BB%B6%E6%91%98%E8%A6%81) ###\n\n### 3.2 [`std::thread` 详解](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter3-Thread/Introduction-to-Thread.md#stdthread-%E8%AF%A6%E8%A7%A3) ###\n\n### 3.3 [`std::this_thread` 命名空间中相关辅助函数介绍](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter3-Thread/Introduction-to-Thread.md#stdthis_thread-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E4%B8%AD%E7%9B%B8%E5%85%B3%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D) ###\n\n### 3.4 `std::thread` 与 Pthread 线程对比 ###\n\n### 3.5 [资料汇](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter3-Thread/web-resources.md \"资料汇\") ###\n\n\n##第四章 互斥量与锁 ##\n\n### 4.1 [`<mutex>` 头文件摘要](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter4-Mutex/4.1%20Mutex-header-synopsis.md) ###\n\n### 4.2 [互斥量详解](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter4-Mutex/4.2%20Mutex-tutorial.md) ###\n\n### 4.3 [锁类型详解](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter4-Mutex/4.3%20Lock-tutorial.md) ###\n\n### 4.4 辅助函数介绍 ###\n\n### 4.5 `std::mutex` 与 Pthread 互斥量对比 ###\n\n### 4.6 [资料汇](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter4-Mutex/web-resources.md) ###\n\n\n##第五章 条件变量与线程同步 ##\n\n### 5.1 [`<condition_variable>` 头文件摘要](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter5-Condition-Variable/5.1%20Condition-variable%20header%20synopsis.md) ###\n\n### 5.2 [条件变量详解](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter5-Condition-Variable/5.2%20Condition-variable-tutorial.md) ###\n\n### 5.3 [辅助函数介绍](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter5-Condition-Variable/5.3%20Auxiliary-function.md) ###\n\n### 5.4 利用条件变量（std::condition_variable）进行线程同步 ###\n\n### 5.5 `std::condition_variable` 与 Pthread 条件变量对比 ###\n\n### 5.6 [资料汇](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter5-Condition-Variable/web-resources.md) ###\n\n\n##第六章 异步任务详解 ##\n\n### 6.1 [`<future>` 头文件摘要](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter6-Future/6.1%20Future-header-synopsis.md) ###\n\n### 6.2 [异步任务提供者(Provider) 介绍](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter6-Future/6.2%20Providers-tutorial.md) ###\n\n### 6.3 [异步任务提供者(Provider) 介绍（续）](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter6-Future/6.3%20Providers-tutorial-2.md) ###\n\n### 6.4 [异步任务 Future 类型详解](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter6-Future/6.4%20Future-tutorial.md) ###\n\n### 6.5 [与异步任务相关的类型介绍](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter6-Future/6.5%20Auxiliary-types.md) ###\n\n### 6.6 [异步任务辅助函数 `std::async` 介绍](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter6-Future/6.6%20Auxiliary-function.md) ###\n\n### 6.7 异步任务与多线程实例 ###\n\n### 6.8 [资料汇](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter6-Future/web-resources.md) ###\n\n\n##第七章 原子类型详解  ##\n\n### 7.1 [`<atomic>` 头文件摘要](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter7-Atomic/7.1%20Atomic-header-synopsis.md) ###\n\n### 7.2 [`std::atomic_flag` 详解](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter7-Atomic/7.2%20Atomic-flag-tutorial.md) ###\n\n### 7.3 [基本 `std::atomic` 类型详解](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter7-Atomic/7.3%20Atomic-tutorial.md) ###\n\n### 7.4 [特化的 `std::atomic` 类型详解](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter7-Atomic/7.4%20Atomic-tutorial2.md) ###\n\n### 7.5 [C 风格的原子操作](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter7-Atomic/7.5%20C-style-atomic.md) ###\n\n### 7.6 C++11 内存模型初探 ###\n\n### 7.7 如何利用原子类型设计并发数据结构 ###\n\n### 7.8 [资料汇](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter7-Atomic/web-resources.md) ###\n\n\n##第八章 C++11 内存模型 ##\n\n### 8.1 C++ 内存模型概述 ###\n### 8.2 X86 CPU 处理器架构与常见的存储一致性模型简介 ###\n### 8.3 内存序（Memory Order）与同步操作 ###\n### 8.4 原子类型编程实例 ###\n### 8.5 Lock-free 编程初探 ###\n### [资料汇](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter8-Memory-Model/web-resources.md) ###\n\n\n##第九章 高级线程管理 ##\n\n\n##第十章 如何编写正确的并发数据结构 ##\n\n\n##第十一章 并发编程应用实例 ##\n\n### 11.1 [利用 C++11 并发设施解决生产者消费者问题](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/chapter11-Application/11.1%20Producer-Consumer-solution.md \"如何利用 C++11 并发设施解决生产者消费者问题\") ###\n\n\n##附录 C++11 新标准概览 ##\n\n### 1. [核心语言的运行时性能强化](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/appendix%20C%2B%2B11%20standards/C%2B%2B11%20Core%20language%20runtime%20performance%20enhancements.md) ###\n\n本小节主要包括：\n\n1. 右值引用和 move 语义\n2. 泛化的常量表达式 constexpr\n3. 对 POD 类型定义的修正。\n\n### 2. [核心语言的构建时性能强化](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/appendix%20C%2B%2B11%20standards/C%2B%2B11%20Core%20language%20build%20time%20performance%20enhancements.md) ###\n\n本小节主要包括：\n\n1. 外部模板。\n\n### 3. [核心语言的可用性强化](https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial/blob/master/zh/appendix%20C%2B%2B11%20standards/C%2B%2B11%20Core%20language%20usability%20enhancements.md) ###\n\n本小节主要包括：\n\n1. 初始化列表(`std::initializer_list`)\n2. 统一的初始化方式\n3. 类型推导(auto 和 decltype 关键字)\n4. 基于范围的 for 循环\n5. lambda 表达式\n6. 另一种可选的函数语法\n7. 对象创建优化\n8. 显式虚函数重载\n9. 空指针常量(nullptr)\n10. 强类型枚举\n11. 右尖括号(>)\n12. 显式类型转换操作符\n13. 模板别名\n14. 无限制 union。\n\n### 4. 核心语言的功能提升 ###\n\n本小节主要包括：\n\n1. 变长参数模板\n2. 新的字符串字面值\n3. 用户自定义的字面值\n4. 多线程内存模型\n5. 线程本地存储\n6. 显式地使用或禁用某些特殊成员函数（构造函数，拷贝构造，赋值操作符，析构等）\n7. long long int类型\n8. 静态断言 assertions\n9. 允许 sizeof 运算符作用在类型的数据成员上，无须明确的对象\n10. 垃圾回收机制\n11. 属性\n\n### 5. C++ 标准库的变更 ###\n\n本小节主要包括：\n\n1. 标准库组件上的升级\n2. 多线程支持\n3. 元组(tuple)类型\n4. 散列表(hash table)\n5. 正则表达式\n6. 通用智能指针\n7. 可扩展的随机数功能\n8. 包装引用\n9. 多态函数对象包装器\n10. 用于元编程的类型属性\n11. 用于计算函数对象返回类型的统一方法"
        },
        {
          "name": "code",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "zh",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}