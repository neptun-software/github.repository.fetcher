{
  "metadata": {
    "timestamp": 1736566052212,
    "page": 37,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "PX4/PX4-Autopilot",
      "stars": 8760,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 5.4287109375,
          "content": "---\nChecks:          '*,\n                  -*-avoid-c-arrays,\n                  -*-uppercase-literal-suffix,\n                  -*-magic-numbers,\n                  -altera-id-dependent-backward-branch,\n                  -altera-unroll-loops,\n                  -android*,\n                  -bugprone-integer-division,\n                  -cert-dcl50-cpp,\n                  -cert-env33-c,\n                  -cert-err34-c,\n                  -cert-err58-cpp,\n                  -cert-flp30-c,\n                  -cert-msc30-c,\n                  -cert-msc50-cpp,\n                  -clang-analyzer-core.CallAndMessage,\n                  -clang-analyzer-core.NullDereference,\n                  -clang-analyzer-core.UndefinedBinaryOperatorResult,\n                  -clang-analyzer-core.uninitialized.Assign,\n                  -clang-analyzer-core.VLASize,\n                  -clang-analyzer-cplusplus.NewDelete,\n                  -clang-analyzer-cplusplus.NewDeleteLeaks,\n                  -clang-analyzer-deadcode.DeadStores,\n                  -clang-analyzer-optin.cplusplus.VirtualCall,\n                  -clang-analyzer-optin.performance.Padding,\n                  -clang-analyzer-security.FloatLoopCounter,\n                  -clang-analyzer-security.insecureAPI.strcpy,\n                  -clang-analyzer-unix.API,\n                  -clang-analyzer-unix.cstring.BadSizeArg,\n                  -clang-analyzer-unix.Malloc,\n                  -clang-analyzer-unix.MallocSizeof,\n                  -cppcoreguidelines-c-copy-assignment-signature,\n                  -cppcoreguidelines-interfaces-global-init,\n                  -cppcoreguidelines-no-malloc,\n                  -cppcoreguidelines-owning-memory,\n                  -cppcoreguidelines-pro-bounds-array-to-pointer-decay,\n                  -cppcoreguidelines-pro-bounds-constant-array-index,\n                  -cppcoreguidelines-pro-bounds-pointer-arithmetic,\n                  -cppcoreguidelines-pro-type-const-cast,\n                  -cppcoreguidelines-pro-type-cstyle-cast,\n                  -cppcoreguidelines-pro-type-member-init,\n                  -cppcoreguidelines-pro-type-reinterpret-cast,\n                  -cppcoreguidelines-pro-type-union-access,\n                  -cppcoreguidelines-pro-type-vararg,\n                  -cppcoreguidelines-special-member-functions,\n                  -fuchsia-*,\n                  -google-build-using-namespace,\n                  -google-explicit-constructor,\n                  -google-global-names-in-headers,\n                  -google-readability-casting,\n                  -google-readability-function-size,\n                  -google-readability-namespace-comments,\n                  -google-readability-todo,\n                  -google-runtime-int,\n                  -google-runtime-references,\n                  -hicpp-deprecated-headers,\n                  -hicpp-explicit-conversions,\n                  -hicpp-function-size,\n                  -hicpp-member-init,\n                  -hicpp-no-array-decay,\n                  -hicpp-no-assembler,\n                  -hicpp-no-malloc,\n                  -hicpp-signed-bitwise,\n                  -hicpp-special-member-functions,\n                  -hicpp-use-auto,\n                  -hicpp-use-equals-default,\n                  -hicpp-use-equals-delete,\n                  -hicpp-use-override,\n                  -hicpp-vararg,\n                  -llvmlibc-*,\n                  -llvm-header-guard,\n                  -llvm-include-order,\n                  -llvm-namespace-comment,\n                  -misc-incorrect-roundings,\n                  -misc-macro-parentheses,\n                  -misc-misplaced-widening-cast,\n                  -misc-redundant-expression,\n                  -misc-unconventional-assign-operator,\n                  -misc-unused-parameters,\n                  -modernize-deprecated-headers,\n                  -modernize-loop-convert,\n                  -modernize-pass-by-value,\n                  -modernize-raw-string-literal,\n                  -modernize-return-braced-init-list,\n                  -modernize-use-auto,\n                  -modernize-use-bool-literals,\n                  -modernize-use-default-member-init,\n                  -modernize-use-equals-default,\n                  -modernize-use-equals-delete,\n                  -modernize-use-override,\n                  -modernize-use-trailing-return-type,\n                  -modernize-use-using,\n                  -modernize-use-trailing-return-type,\n                  -performance-inefficient-string-concatenation,\n                  -readability-avoid-const-params-in-decls,\n                  -readability-container-size-empty,\n                  -readability-else-after-return,\n                  -readability-function-size,\n                  -readability-implicit-bool-cast,\n                  -readability-implicit-bool-conversion,\n                  -readability-inconsistent-declaration-parameter-name,\n                  -readability-named-parameter,\n                  -readability-non-const-parameter,\n                  -readability-redundant-declaration,\n                  -readability-static-accessed-through-instance,\n                  -readability-static-definition-in-anonymous-namespace,\n                 '\nWarningsAsErrors: '*'\nCheckOptions:\n  - key:             google-readability-function-size.BranchThreshold\n    value:           '600'\n  - key:             google-readability-function-size.LineThreshold\n    value:           '4000'\n  - key:             google-readability-function-size.StatementThreshold\n    value:           '4000'\n...\n"
        },
        {
          "name": ".clusterfuzzlite",
          "type": "tree",
          "content": null
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2568359375,
          "content": "root = true\n\n[*]\ninsert_final_newline = true\n\n[{*.{c,cpp,cc,h,hpp},CMakeLists.txt,Kconfig}]\nindent_style = tab\ntab_width = 8\n# Not in the official standard, but supported by many editors\nmax_line_length = 120\n\n[*.yaml, *.yml]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.3837890625,
          "content": "* text=auto eol=lf\n\n*.cmake  text eol=lf\n*.c      text eol=lf\n*.cc     text eol=lf\n*.cpp    text eol=lf\n*.h      text eol=lf\n*.hh     text eol=lf\n*.hpp    text eol=lf\n*.hxx    text eol=lf\n*.S      text eol=lf\n\n*.ipynb  text eol=lf\n*.m      text eol=lf\n*.mat    binary\n*.py     text eol=lf\n\n*.java   text eol=lf\n*.jar    binary\n*.xml    text eol=lf\n\n# PX4 msgs, etc\n*.bin    binary\n*.msg    text eol=lf\n*.config text eol=lf\n*.sdf    text eol=lf\n*.uavcan text eol=lf\n\n# NuttX\nMakefile.* text eol=lf\n*.defs   text eol=lf\n*.ld     text eol=lf\n\n*.csv    text eol=lf\n*.md     text eol=lf\n*.txt    text eol=lf\n\n# Scripts\n*.bash   text eol=lf\n*.sh     text eol=lf\n*.zsh    text eol=lf\n# These are explicitly windows files and should use crlf\n*.ps1    text eol=crlf\n*.{cmd,[cC][mM][dD]} text eol=crlf\n*.{bat,[bB][aA][tT]} text eol=crlf\n\n# Serialisation\n*.json   text eol=lf\n*.toml   text eol=lf\n*.xml    text eol=lf\n*.yaml   text eol=lf\n*.yml    text eol=lf\n\n# Graphics\n*.png    binary\n*.jpg    binary\n*.jpeg   binary\n*.gif    binary\n*.tif    binary\n*.tiff   binary\n*.ico    binary\n*.pdf    binary\n# SVG treated as an asset (binary) by default.\n*.svg    text eol=lf\n\n# Text files where line endings should be preserved\n*.patch  -text\n\n# Archives\n*.7z     binary\n*.gz     binary\n*.tar    binary\n*.tgz    binary\n*.zip    binary\n\n# everything else\n.gitattributes text eol=lf\n.gitignore     text eol=lf\nMakefile       text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.384765625,
          "content": "*.dSYM\n*.o\n*.gch\n*.pyc\n*~\n.*.swp\n.context\n.cproject\n.DS_Store\n.gdbinit\n.gdb_history\n.project\n.settings\n.swp\n.~lock.*\nTesting/\nPackages/*\nbuild/*\nbuild_*/\ncscope.out\ncscope.in.out\ncscope.po.out\nFirmware.sublime-workspace\nuser.sublime*\n/Documentation/doxy.log\n/Documentation/html/\n/Documentation/doxygen*objdb*tmp\n.tags\ntags\n.tags_sorted_by_file\n.pydevproject\n.ropeproject\n*.orig\nFirmware.zip\n*.generated.h\n.vagrant\n*.pretty\nxcode\nrootfs/\n*.autosave\nCMakeLists.txt.user\nGPATH\nGRTAGS\nGTAGS\n*.creator\n*.creator.user\n*.files\n*.includes\n\n# CLion ignores\n.idea\ncmake-build-*/\n\nposix-configs/SITL/init/test/*_generated\n\n/airframes.md\n/airframes.xml\n/parameters.md\n/parameters.xml\n/modules\n/msg/ros/*.msg\n\n*.gcov\n.coverage\n.coverage.*\n\n# KDevelop ignores\n.kdev4/*\n*.kdev4\n\n# cmake in tree (ninja)\n.ninja_deps\n.ninja_log\nbin/\nbuild.ninja\ncmake_install.cmake\nCMakeCache.txt\nCMakeFiles\ncompile_commands.json\nCPackConfig.cmake\nCPackSourceConfig.cmake\nCTestTestfile.cmake\nexternal/\nrules.ninja\n\n# in tree build\n**/*.a\n**/*.px4mod\n**/*.stamp\n/coverage*\n/functional-*\n/generated_params/\n/googletest-*/\n/logs\n/mavsdk_tests\n/unit-*\n/uORB/\nDartConfiguration.tcl\nmsg/tmp/\nmsg/topics_sources/\nplatforms/posix/apps.cpp\nplatforms/posix/apps.h\nsrc/lib/version/build_git_version.h\nsrc/modules/simulator/simulator_config.h\nsrc/systemcmds/topic_listener/listener_generated.cpp\n\n!src/drivers/distance_sensor/broadcom/afbrs50/Lib/*\n\n# colcon\nlog/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 3.7373046875,
          "content": "[submodule \"src/modules/mavlink/mavlink\"]\n\tpath = src/modules/mavlink/mavlink\n\turl = https://github.com/mavlink/mavlink.git\n\tbranch = master\n[submodule \"Tools/simulation/jmavsim/jMAVSim\"]\n\tpath = Tools/simulation/jmavsim/jMAVSim\n\turl = https://github.com/PX4/jMAVSim.git\n\tbranch = main\n[submodule \"Tools/simulation/gazebo-classic/sitl_gazebo-classic\"]\n\tpath = Tools/simulation/gazebo-classic/sitl_gazebo-classic\n\turl = https://github.com/PX4/PX4-SITL_gazebo-classic.git\n\tbranch = main\n[submodule \"src/drivers/gps/devices\"]\n\tpath = src/drivers/gps/devices\n\turl = https://github.com/PX4/PX4-GPSDrivers.git\n\tbranch = main\n[submodule \"platforms/nuttx/NuttX/nuttx\"]\n\tpath = platforms/nuttx/NuttX/nuttx\n\turl = https://github.com/PX4/NuttX.git\n\tbranch = px4_firmware_nuttx-10.3.0+\n[submodule \"platforms/nuttx/NuttX/apps\"]\n\tpath = platforms/nuttx/NuttX/apps\n\turl = https://github.com/PX4/NuttX-apps.git\n\tbranch = px4_firmware_nuttx-10.3.0+\n[submodule \"Tools/flightgear_bridge\"]\n\tpath = Tools/simulation/flightgear/flightgear_bridge\n\turl = https://github.com/PX4/PX4-FlightGear-Bridge.git\n[submodule \"Tools/simulation/jsbsim/jsbsim_bridge\"]\n\tpath = Tools/simulation/jsbsim/jsbsim_bridge\n\turl = https://github.com/PX4/px4-jsbsim-bridge.git\n[submodule \"src/drivers/cyphal/libcanard\"]\n\tpath = src/drivers/cyphal/libcanard\n\turl = https://github.com/opencyphal/libcanard.git\n[submodule \"src/drivers/cyphal/public_regulated_data_types\"]\n\tpath = src/drivers/cyphal/public_regulated_data_types\n\turl = https://github.com/opencyphal/public_regulated_data_types.git\n[submodule \"src/drivers/cyphal/legacy_data_types\"]\n\tpath = src/drivers/cyphal/legacy_data_types\n\turl = https://github.com/PX4/public_regulated_data_types.git\n\tbranch = legacy\n[submodule \"src/lib/crypto/monocypher\"]\n\tpath = src/lib/crypto/monocypher\n\turl = https://github.com/PX4/Monocypher.git\n\tbranch = px4\n[submodule \"src/lib/events/libevents\"]\n\tpath = src/lib/events/libevents\n\turl = https://github.com/mavlink/libevents.git\n\tbranch = main\n[submodule \"src/lib/crypto/libtomcrypt\"]\n\tpath = src/lib/crypto/libtomcrypt\n\turl = https://github.com/PX4/libtomcrypt.git\n\tbranch = px4\n[submodule \"src/lib/crypto/libtommath\"]\n\tpath = src/lib/crypto/libtommath\n\turl = https://github.com/PX4/libtommath.git\n\tbranch = px4\n[submodule \"src/modules/uxrce_dds_client/Micro-XRCE-DDS-Client\"]\n\tpath = src/modules/uxrce_dds_client/Micro-XRCE-DDS-Client\n\turl = https://github.com/PX4/Micro-XRCE-DDS-Client.git\n\tbranch = px4\n[submodule \"src/lib/cdrstream/cyclonedds\"]\n\tpath = src/lib/cdrstream/cyclonedds\n\turl = https://github.com/px4/cyclonedds\n[submodule \"src/lib/cdrstream/rosidl\"]\n\tpath = src/lib/cdrstream/rosidl\n\turl = https://github.com/px4/rosidl\n[submodule \"src/modules/zenoh/zenoh-pico\"]\n\tpath = src/modules/zenoh/zenoh-pico\n\turl = https://github.com/px4/zenoh-pico\n\tbranch = dev/1.0.0-px4\n[submodule \"src/lib/heatshrink/heatshrink\"]\n\tpath = src/lib/heatshrink/heatshrink\n\turl = https://github.com/PX4/heatshrink.git\n\tbranch = px4\n[submodule \"Tools/simulation/gz\"]\n\tpath = Tools/simulation/gz\n\turl = https://github.com/PX4/PX4-gazebo-models.git\n\tbranch = main\n[submodule \"boards/modalai/voxl2/libfc-sensor-api\"]\n\tpath = boards/modalai/voxl2/libfc-sensor-api\n\turl = https://gitlab.com/voxl-public/voxl-sdk/core-libs/libfc-sensor-api.git\n[submodule \"src/drivers/actuators/vertiq_io/iq-module-communication-cpp\"]\n\tpath = src/drivers/actuators/vertiq_io/iq-module-communication-cpp\n\turl = https://github.com/PX4/iq-module-communication-cpp.git\n\tbranch = master\n[submodule \"src/drivers/uavcan/libdronecan/dsdl\"]\n\tpath = src/drivers/uavcan/libdronecan/dsdl\n\turl = https://github.com/PX4/DSDL.git\n[submodule \"src/drivers/uavcan/libdronecan/libuavcan/dsdl_compiler/pydronecan\"]\n\tpath = src/drivers/uavcan/libdronecan/libuavcan/dsdl_compiler/pydronecan\n\turl = https://github.com/dronecan/pydronecan\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 17.2255859375,
          "content": "############################################################################\n#\n# Copyright (c) 2017 - 2024 PX4 Development Team. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n#\n# 1. Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright\n#    notice, this list of conditions and the following disclaimer in\n#    the documentation and/or other materials provided with the\n#    distribution.\n# 3. Neither the name PX4 nor the names of its contributors may be\n#    used to endorse or promote products derived from this software\n#    without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS\n# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n#\n############################################################################\n\n#=============================================================================\n# CMAKE CODING STANDARD FOR PX4\n#\n# Structure\n# ---------------------------------------------------------------------------\n#\n# * Common functions should be included in px_base.cmake.\n#\n# * OS/ board specific fucntions should be include in\n#\tpx_impl_${PX4_PLATFORM}.cmake\n#\n# Formatting\n# ---------------------------------------------------------------------------\n#\n# * Use hard indents to match the px4 source code.\n#\n# * All function and script arguments are upper case.\n#\n# * All local variables are lower case.\n#\n# * All cmake functions are lowercase.\n#\n# * For else, endif, endfunction, etc, never put the name of the statement\n#\n# Functions/Macros\n# ---------------------------------------------------------------------------\n#\n# * Use px4_parse_function_args to parse functions and check for required\n#   arguments. Unless there is only one argument in the function and it is clear.\n#\n# * Never use macros. They allow overwriting global variables and this\n#\tmakes variable declarations hard to locate.\n#\n# * If a target from add_custom_* is set in a function, explicitly pass it\n#\tas an output argument so that the target name is clear to the user.\n#\n# * Avoid use of global variables in functions. Functions in a nested\n#\tscope may use global variables, but this makes it difficult to\n#\treuse functions.\n#\n# Included CMake Files\n# ---------------------------------------------------------------------------\n#\n# * All variables in config files must have the prefix \"config_\".\n#\n# * Never set global variables in an included cmake file,\n#\tyou may only define functions. This excludes config and Toolchain files.\n#\tThis makes it clear to the user when variables are being set or targets\n#\tare being created.\n#\n# * Setting a global variable in a CMakeLists.txt file is ok, because\n#\teach CMakeLists.txt file has scope in the current directory and all\n#\tsubdirectories, so it is not truly global.\n#\n# * All toolchain files should be included in the cmake\n#\tdirectory and named Toolchain-\"name\".cmake.\n#\n# Misc\n# ---------------------------------------------------------------------------\n#\n# * If referencing a string variable, don't put it in quotes.\n#\tDon't do \"${PX4_PLATFORM}\" STREQUAL \"posix\",\n#\tinstead type ${PX4_PLATFORM} STREQUAL \"posix\". This will throw an\n#\terror when ${PX4_PLATFORM} is not defined instead of silently\n#\tevaluating to false.\n#\n#=============================================================================\n\ncmake_minimum_required(VERSION 3.9 FATAL_ERROR)\n\nset(PX4_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\" CACHE FILEPATH \"PX4 source directory\" FORCE)\nset(PX4_BINARY_DIR \"${CMAKE_CURRENT_BINARY_DIR}\" CACHE FILEPATH \"PX4 binary directory\" FORCE)\n\nlist(APPEND CMAKE_MODULE_PATH ${PX4_SOURCE_DIR}/cmake)\ninclude(px4_parse_function_args)\n\n#=============================================================================\n# git\n#\ninclude(px4_git)\n\nexecute_process(\n\tCOMMAND git describe --exclude ext/* --tags --match \"v[0-9]*\"\n\tOUTPUT_VARIABLE PX4_GIT_TAG\n\tOUTPUT_STRIP_TRAILING_WHITESPACE\n\tRESULTS_VARIABLE GIT_DESCRIBE_RESULT\n\tWORKING_DIRECTORY ${PX4_SOURCE_DIR}\n\t)\n\n# if proper git tag unavilable default to v0.0.0\nif(NOT ${GIT_DESCRIBE_RESULT} MATCHES \"0\")\n\tset(PX4_GIT_TAG \"v0.0.0\")\nendif()\n\nmessage(STATUS \"PX4_GIT_TAG: ${PX4_GIT_TAG}\")\n\n# git describe to X.Y.Z version\nstring(REPLACE \".\" \";\" VERSION_LIST ${PX4_GIT_TAG})\n\n# major version\nlist(GET VERSION_LIST 0 PX4_VERSION_MAJOR)\nstring(REPLACE \"v\" \"\" PX4_VERSION_MAJOR ${PX4_VERSION_MAJOR})\n# minor version\nlist(GET VERSION_LIST 1 PX4_VERSION_MINOR)\n# patch version\nlist(GET VERSION_LIST 2 PX4_VERSION_PATCH)\nstring(REPLACE \"-\" \";\" PX4_VERSION_PATCH ${PX4_VERSION_PATCH})\nlist(GET PX4_VERSION_PATCH 0 PX4_VERSION_PATCH)\n\n# # Capture only the hash part after 'g'\nstring(REGEX MATCH \"g([a-f0-9]+)$\" GIT_HASH \"${PX4_GIT_TAG}\")\nset(PX4_GIT_HASH ${CMAKE_MATCH_1})\n\ndefine_property(GLOBAL PROPERTY PX4_MODULE_LIBRARIES\n                 BRIEF_DOCS \"PX4 module libs\"\n                 FULL_DOCS \"List of all PX4 module libraries\"\n                 )\n\ndefine_property(GLOBAL PROPERTY PX4_KERNEL_MODULE_LIBRARIES\n                 BRIEF_DOCS \"PX4 kernel side module libs\"\n                 FULL_DOCS \"List of all PX4 kernel module libraries\"\n                 )\n\ndefine_property(GLOBAL PROPERTY PX4_MODULE_PATHS\n                 BRIEF_DOCS \"PX4 module paths\"\n                 FULL_DOCS \"List of paths to all PX4 modules\"\n                 )\n\ndefine_property(GLOBAL PROPERTY PX4_SRC_FILES\n                 BRIEF_DOCS \"src files from all PX4 modules & libs\"\n                 FULL_DOCS \"SRC files from px4_add_{module,library}\"\n                 )\n\n#=============================================================================\n# configuration\n#\n\ninclude(px4_add_module)\nset(config_module_list)\nset(config_kernel_list)\n\n# Find Python\nfind_package(PythonInterp 3)\n# We have a custom error message to tell users how to install python3.\nif(NOT PYTHONINTERP_FOUND)\n\tmessage(FATAL_ERROR \"Python 3 not found. Please install Python 3:\\n\"\n\t\t\"    Ubuntu: sudo apt install python3 python3-dev python3-pip\\n\"\n\t\t\"    macOS: brew install python\")\nendif()\n\noption(PYTHON_COVERAGE \"Python code coverage\" OFF)\nif(PYTHON_COVERAGE)\n\tmessage(STATUS \"python coverage enabled\")\n\tset(PYTHON_EXECUTABLE coverage run -p)\nendif()\n\ninclude(px4_config)\ninclude(kconfig)\nmessage(STATUS \"PX4 config: ${PX4_CONFIG}\")\nmessage(STATUS \"PX4 platform: ${PX4_PLATFORM}\")\n\nif($ENV{CLION_IDE})\n\t# CLion automatically executes some compiler commands after configuring the\n\t# project. This would fail on NuttX, as visibility.h tries to (indirectly)\n\t# include nuttx/config.h, which at that point does not exist yet\n\tadd_definitions(-DPX4_DISABLE_GCC_POISON)\nendif()\n\nif(${PX4_PLATFORM} STREQUAL \"posix\")\n\tif(ENABLE_LOCKSTEP_SCHEDULER)\n\t\tadd_definitions(-DENABLE_LOCKSTEP_SCHEDULER)\n\t\tmessage(STATUS \"PX4 lockstep: enabled\")\n\telse()\n\t\tmessage(STATUS \"PX4 lockstep: disabled\")\n\tendif()\nendif()\n\n# external modules\nset(EXTERNAL_MODULES_LOCATION \"\" CACHE STRING \"External modules source location\")\n\nif(NOT EXTERNAL_MODULES_LOCATION STREQUAL \"\")\n\tget_filename_component(EXTERNAL_MODULES_LOCATION \"${EXTERNAL_MODULES_LOCATION}\" ABSOLUTE)\nendif()\n\nset_property(GLOBAL PROPERTY PX4_MODULE_CONFIG_FILES)\n\ninclude(platforms/${PX4_PLATFORM}/cmake/px4_impl_os.cmake)\nlist(APPEND CMAKE_MODULE_PATH ${PX4_SOURCE_DIR}/platforms/${PX4_PLATFORM}/cmake)\n\nif(EXISTS \"${PX4_SOURCE_DIR}/platforms/${PX4_PLATFORM}/cmake/init.cmake\")\n\tinclude(init)\nendif()\n\n#=============================================================================\n# project definition\n#\nproject(px4 CXX C ASM)\n\n# CMake build type (Debug Release RelWithDebInfo MinSizeRel Coverage)\nif(NOT CMAKE_BUILD_TYPE)\n\tif(${PX4_PLATFORM} STREQUAL \"nuttx\")\n\t\tset(PX4_BUILD_TYPE \"MinSizeRel\")\n\telse()\n\t\tset(PX4_BUILD_TYPE \"RelWithDebInfo\")\n\tendif()\n\n\tset(CMAKE_BUILD_TYPE ${PX4_BUILD_TYPE} CACHE STRING \"Build type\" FORCE)\nendif()\n\nif((CMAKE_BUILD_TYPE STREQUAL \"Debug\") OR (CMAKE_BUILD_TYPE STREQUAL \"Coverage\"))\n\tset(MAX_CUSTOM_OPT_LEVEL -O0)\nelseif(CMAKE_BUILD_TYPE MATCHES \"Sanitizer\")\n\tset(MAX_CUSTOM_OPT_LEVEL -O1)\nelseif(CMAKE_BUILD_TYPE MATCHES \"Release\")\n\tset(MAX_CUSTOM_OPT_LEVEL -O3)\nelse()\n\tif(px4_constrained_flash_build)\n\t\tset(MAX_CUSTOM_OPT_LEVEL -Os)\n\telse()\n\t\tset(MAX_CUSTOM_OPT_LEVEL -O2)\n\tendif()\nendif()\n\nset_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug;Release;RelWithDebInfo;MinSizeRel;Coverage;AddressSanitizer;UndefinedBehaviorSanitizer\")\nmessage(STATUS \"cmake build type: ${CMAKE_BUILD_TYPE}\")\n\n# Check if LTO option and check if toolchain supports it\nif(LTO)\n    include(CheckIPOSupported)\n    check_ipo_supported()\n    message(AUTHOR_WARNING \"LTO enabled: LTO is highly experimental and should not be used in production\")\n    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)\nendif()\n\nset(package-contact \"px4users@googlegroups.com\")\n\nset(CMAKE_CXX_STANDARD 14)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_C_STANDARD 11)\nset(CMAKE_C_STANDARD_REQUIRED ON)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PX4_BINARY_DIR})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${PX4_BINARY_DIR})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${PX4_BINARY_DIR})\n\n#=============================================================================\n\n# gold linker - use if available (posix only for now)\nif(${PX4_PLATFORM} STREQUAL \"posix\")\n\tinclude(CMakeDependentOption)\n\tCMAKE_DEPENDENT_OPTION(USE_LD_GOLD\n\t\t\t\"Use GNU gold linker\" ON\n\t\t\t\"NOT WIN32;NOT APPLE\" OFF\n\t)\n\n\tif(USE_LD_GOLD)\n\t\texecute_process(COMMAND ${CMAKE_C_COMPILER} -fuse-ld=gold -Wl,--version ERROR_QUIET OUTPUT_VARIABLE LD_VERSION)\n\t\tif(\"${LD_VERSION}\" MATCHES \"GNU gold\")\n\t\t\tset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=gold\")\n\t\t\tset(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -fuse-ld=gold\")\n\t\telse()\n\t\t\tset(USE_LD_GOLD OFF)\n\t\tendif()\n\tendif()\nendif()\n\n#=============================================================================\n\n# Setup install paths\nif(${PX4_PLATFORM} STREQUAL \"posix\")\n\t# This makes it possible to dynamically load code which depends on symbols\n\t# inside the px4 executable.\n\tset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n\tset(CMAKE_ENABLE_EXPORTS ON)\n\n\tif(CMAKE_BUILD_TYPE MATCHES \"Coverage\")\n\t\tinclude(coverage)\n\tendif()\n\n\tinclude(sanitizers)\n\n\t# Define GNU standard installation directories\n\tinclude(GNUInstallDirs)\n\n\tif (NOT CMAKE_INSTALL_PREFIX)\n\t\tset(CMAKE_INSTALL_PREFIX \"/usr\" CACHE PATH \"Install path prefix\" FORCE)\n\tendif()\nendif()\n\ninclude(ccache)\n\n#=============================================================================\n# get chip and chip manufacturer\n#\npx4_os_determine_build_chip()\nif(NOT PX4_CHIP_MANUFACTURER)\n\tmessage(FATAL_ERROR \"px4_os_determine_build_chip() needs to set PX4_CHIP_MANUFACTURER\")\nendif()\nif(NOT PX4_CHIP)\n\tmessage(FATAL_ERROR \"px4_os_determine_build_chip() needs to set PX4_CHIP\")\nendif()\n\n#=============================================================================\n# build flags\n#\ninclude(px4_add_common_flags)\npx4_add_common_flags()\npx4_os_add_flags()\n\n#=============================================================================\n# board cmake init (optional)\n#\nif(EXISTS ${PX4_BOARD_DIR}/cmake/init.cmake)\n\tinclude(${PX4_BOARD_DIR}/cmake/init.cmake)\nendif()\n\n#=============================================================================\n# message, and airframe generation\n#\ninclude(px4_metadata)\n\nadd_subdirectory(msg EXCLUDE_FROM_ALL)\n\npx4_generate_airframes_xml(BOARD ${PX4_BOARD})\n\n#=============================================================================\n# external projects\n#\nset(ep_base ${PX4_BINARY_DIR}/external)\nset_property(DIRECTORY PROPERTY EP_BASE ${ep_base})\n\n# add external project install folders to build\n# add the directories so cmake won't warn\nexecute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${ep_base})\nexecute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${ep_base}/Install)\nexecute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${ep_base}/Install/lib)\nlink_directories(${ep_base}/Install/lib)\nexecute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${ep_base}/Install/include)\ninclude_directories(${ep_base}/Install/include)\n\n#=============================================================================\n# external modules\n#\nset(external_module_paths)\nif (NOT EXTERNAL_MODULES_LOCATION STREQUAL \"\")\n\tmessage(STATUS \"External modules: ${EXTERNAL_MODULES_LOCATION}\")\n\tadd_subdirectory(\"${EXTERNAL_MODULES_LOCATION}/src\" external_modules)\n\n\tforeach(external_module ${config_module_list_external})\n\t\tadd_subdirectory(${EXTERNAL_MODULES_LOCATION}/src/${external_module} external_modules/${external_module})\n\t\tlist(APPEND external_module_paths ${EXTERNAL_MODULES_LOCATION}/src/${external_module})\n\tendforeach()\nendif()\n\n#=============================================================================\n# Testing - Automatic unit and integration testing with CTest\n#\n\n# optionally enable cmake testing (supported only on posix)\noption(CMAKE_TESTING \"Configure test targets\" OFF)\nif(${PX4_CONFIG} STREQUAL \"px4_sitl_test\")\n\tset(CMAKE_TESTING ON)\nendif()\nif(CMAKE_TESTING)\n\tinclude(CTest) # sets BUILD_TESTING variable\nendif()\n\n# enable test filtering to run only specific tests with the ctest -R regex functionality\nset(TESTFILTER \"\" CACHE STRING \"Filter string for ctest to selectively only run specific tests (ctest -R)\")\n\n# if testing is enabled download and configure gtest\nlist(APPEND CMAKE_MODULE_PATH ${PX4_SOURCE_DIR}/cmake/gtest/)\ninclude(px4_add_gtest)\nif(BUILD_TESTING)\n\tinclude(gtest)\n\n\t# Ensure there's no -R without any filter expression since that trips newer ctest versions\n\tif(TESTFILTER)\n\t\tset(TESTFILTERARG \"-R\")\n\telse()\n\t\tset(TESTFILTERARG \"\")\n\tendif()\n\n\tadd_custom_target(test_results\n\t\t\tCOMMAND GTEST_COLOR=1 ${CMAKE_CTEST_COMMAND} --output-on-failure -T Test ${TESTFILTERARG} ${TESTFILTER}\n\t\t\tDEPENDS\n\t\t\t\tpx4\n\t\t\t\texamples__dyn_hello\n\t\t\tUSES_TERMINAL\n\t\t\tCOMMENT \"Running tests\"\n\t\t\tWORKING_DIRECTORY ${PX4_BINARY_DIR})\n\tset_target_properties(test_results PROPERTIES EXCLUDE_FROM_ALL TRUE)\nendif()\n\n\n#=============================================================================\n# subdirectories\n#\nadd_library(parameters_interface INTERFACE)\nadd_library(kernel_parameters_interface INTERFACE)\nadd_library(events_interface INTERFACE)\nadd_library(kernel_events_interface INTERFACE)\n\ninclude(px4_add_library)\nadd_subdirectory(src/lib EXCLUDE_FROM_ALL)\n\nadd_subdirectory(platforms/${PX4_PLATFORM}/src/px4)\nadd_subdirectory(platforms EXCLUDE_FROM_ALL)\n\nif(EXISTS \"${PX4_BOARD_DIR}/CMakeLists.txt\")\n\tadd_subdirectory(${PX4_BOARD_DIR})\nendif()\n\nforeach(module ${config_module_list})\n\tadd_subdirectory(src/${module})\nendforeach()\n\n# add events lib after modules and libs as it needs to know all source files (PX4_SRC_FILES)\nadd_subdirectory(src/lib/events EXCLUDE_FROM_ALL)\n# metadata needs PX4_MODULE_CONFIG_FILES\nadd_subdirectory(src/lib/metadata EXCLUDE_FROM_ALL)\n\n# must be the last module before firmware\nadd_subdirectory(src/lib/parameters EXCLUDE_FROM_ALL)\n\nif(${PX4_PLATFORM} STREQUAL \"nuttx\" AND NOT CONFIG_BUILD_FLAT)\n\ttarget_link_libraries(parameters_interface INTERFACE usr_parameters)\n\ttarget_link_libraries(kernel_parameters_interface INTERFACE parameters)\n\ttarget_link_libraries(events_interface INTERFACE usr_events)\n\ttarget_link_libraries(kernel_events_interface INTERFACE events)\nelse()\n\ttarget_link_libraries(parameters_interface INTERFACE parameters)\n\ttarget_link_libraries(events_interface INTERFACE events)\nendif()\n\n# firmware added last to generate the builtin for included modules\nadd_subdirectory(platforms/${PX4_PLATFORM})\n\n#=============================================================================\n# uORB graph generation: add a custom target 'uorb_graph'\n#\nset(uorb_graph_config ${PX4_BOARD})\n\nset(graph_module_list \"\")\nforeach(module ${config_module_list})\n\tset(graph_module_list \"${graph_module_list}\" \"--src-path\" \"src/${module}\")\nendforeach()\n\nadd_custom_command(OUTPUT ${uorb_graph_config}\n\tCOMMAND ${PYTHON_EXECUTABLE} ${PX4_SOURCE_DIR}/Tools/uorb_graph/create.py\n\t\t${graph_module_list} --src-path src/lib\n\t\t--merge-depends\n\t\t--exclude-path src/examples\n\t\t--exclude-path src/lib/parameters # FIXME: enable & fix\n\t\t--file ${PX4_SOURCE_DIR}/Tools/uorb_graph/graph_${uorb_graph_config}\n\tWORKING_DIRECTORY ${PX4_SOURCE_DIR}\n\tCOMMENT \"Generating uORB graph\"\n)\nadd_custom_target(uorb_graph DEPENDS ${uorb_graph_config})\n\n\ninclude(bloaty)\n\n\ninclude(doxygen)\ninclude(metadata)\ninclude(package)\n\n# install python requirements using configured python\nadd_custom_target(install_python_requirements\n\tCOMMAND ${PYTHON_EXECUTABLE} -m pip install --break-system-packages --requirement ${PX4_SOURCE_DIR}/Tools/setup/requirements.txt\n\tDEPENDS ${PX4_SOURCE_DIR}/Tools/setup/requirements.txt\n\tUSES_TERMINAL\n)\n\nif(EXISTS \"${PX4_SOURCE_DIR}/platforms/${PX4_PLATFORM}/cmake/finalize.cmake\")\n\tinclude(finalize)\nendif()\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.134765625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at lorenz@px4.io. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.583984375,
          "content": "# Contributing to PX4 Firmware\n\nWe follow the [Github flow](https://guides.github.com/introduction/flow/) development model.\n\n### Fork the project, then clone your repo\n\nFirst [fork and clone](https://help.github.com/articles/fork-a-repo) the project project.\n\n### Create a feature branch\n\n*Always* branch off main for new features.\n\n```\ngit checkout -b mydescriptivebranchname\n```\n\n### Edit and build the code\n\nThe [developer guide](https://docs.px4.io/main/en/development/development.html) explains how to set up the development environment on Mac OS, Linux or Windows. Please take note of our [coding style](https://docs.px4.io/main/en/contribute/code.html) when editing files.\n\n### Commit your changes\n\nAlways write descriptive commit messages and add a fixes or relates note to them with an [issue number](https://github.com/px4/Firmware/issues) (Github will link these then conveniently)\n\n**Example:**\n\n```\nChange how the attitude controller works\n\n- Fixes rate feed forward\n- Allows a local body rate override\n\nFixes issue #123\n```\n\n### Test your changes\n\nSince we care about safety, we will regularly ask you for test results. Best is to do a test flight (or bench test where it applies) and upload the logfile from it (on the microSD card in the logs directory) to Google Drive or Dropbox and share the link.\n\n### Push your changes\n\nPush changes to your repo and send a [pull request](https://github.com/PX4/Firmware/compare/).\n\nMake sure to provide some testing feedback and if possible the link to a flight log file. Upload flight log files to [Flight Review](http://logs.px4.io) and link the resulting report.\n"
        },
        {
          "name": "CTestConfig.cmake",
          "type": "blob",
          "size": 0.529296875,
          "content": "## This file should be placed in the root directory of your project.\n## Then modify the CMakeLists.txt file in the root directory of your\n## project to incorporate the testing dashboard.\n##\n## # The following are required to submit to the CDash dashboard:\n##   ENABLE_TESTING()\n##   INCLUDE(CTest)\n\nset(CTEST_PROJECT_NAME \"PX4 Firmware\")\nset(CTEST_NIGHTLY_START_TIME \"00:00:00 EST\")\n\nset(CTEST_DROP_METHOD \"http\")\nset(CTEST_DROP_SITE \"my.cdash.org\")\nset(CTEST_DROP_LOCATION \"/submit.php?project=PX4+Firmware\")\nset(CTEST_DROP_SITE_CDASH TRUE)\n"
        },
        {
          "name": "Documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "Jenkinsfile",
          "type": "blob",
          "size": 10.271484375,
          "content": "#!/usr/bin/env groovy\n\npipeline {\n  agent none\n  stages {\n\n    stage('Analysis') {\n      when {\n        anyOf {\n          branch 'main'\n          branch 'master' // should be removed, but in case there is something going on...\n          branch 'pr-jenkins' // for testing\n        }\n      }\n      parallel {\n\n        stage('Airframe') {\n          agent {\n            docker { image 'px4io/px4-dev-base-focal:2021-08-18' }\n          }\n          steps {\n            sh 'make distclean; git clean -ff -x -d .'\n            sh 'git fetch --all --tags'\n            sh 'make airframe_metadata'\n            dir('build/px4_sitl_default/docs') {\n              archiveArtifacts(artifacts: 'airframes.md, airframes.xml')\n              stash includes: 'airframes.md, airframes.xml', name: 'metadata_airframes'\n            }\n          }\n          post {\n            always {\n              sh 'make distclean; git clean -ff -x -d .'\n            }\n          }\n        }\n\n        stage('Parameter') {\n          agent {\n            docker { image 'px4io/px4-dev-base-focal:2021-08-18' }\n          }\n          steps {\n            sh 'make distclean; git clean -ff -x -d .'\n            sh 'git fetch --all --tags'\n            sh 'make parameters_metadata'\n            dir('build/px4_sitl_default/docs') {\n              archiveArtifacts(artifacts: 'parameters.md, parameters.xml, parameters.json.xz')\n              stash includes: 'parameters.md, parameters.xml, parameters.json.xz', name: 'metadata_parameters'\n            }\n          }\n          post {\n            always {\n              sh 'make distclean; git clean -ff -x -d .'\n            }\n          }\n        }\n\n        stage('Module') {\n          agent {\n            docker { image 'px4io/px4-dev-base-focal:2021-08-18' }\n          }\n          steps {\n            sh 'make distclean; git clean -ff -x -d .'\n            sh 'git fetch --all --tags'\n            sh 'make module_documentation'\n            dir('build/px4_sitl_default/docs') {\n              archiveArtifacts(artifacts: 'modules/*.md')\n              stash includes: 'modules/*.md', name: 'metadata_module_documentation'\n            }\n          }\n          post {\n            always {\n              sh 'make distclean; git clean -ff -x -d .'\n            }\n          }\n        }\n\n        stage('msg file docs') {\n          agent {\n            docker { image 'px4io/px4-dev-base-focal:2021-08-18' }\n          }\n          steps {\n            sh 'mkdir -p build/msg_docs; ./Tools/msg/generate_msg_docs.py -d build/msg_docs'\n            dir('build') {\n              archiveArtifacts(artifacts: 'msg_docs/*.md')\n              stash includes: 'msg_docs/*.md', name: 'msg_documentation'\n            }\n          }\n          post {\n            always {\n              sh 'make distclean; git clean -ff -x -d .'\n            }\n          }\n        }\n\n        stage('failsafe docs') {\n          agent {\n            docker { image 'px4io/px4-dev-nuttx-focal:2022-08-12' }\n          }\n          steps {\n            sh '''#!/bin/bash -l\n            echo $0;\n            git clone https://github.com/emscripten-core/emsdk.git _emscripten_sdk;\n            cd _emscripten_sdk;\n            ./emsdk install latest;\n            ./emsdk activate latest;\n            cd ..;\n            . ./_emscripten_sdk/emsdk_env.sh;\n            git fetch --all --tags;\n            make failsafe_web;\n            cd build/px4_sitl_default_failsafe_web;\n            mkdir -p failsafe_sim;\n            cp index.* parameters.json failsafe_sim;\n            '''\n            dir('build/px4_sitl_default_failsafe_web') {\n              archiveArtifacts(artifacts: 'failsafe_sim/*')\n              stash includes: 'failsafe_sim/*', name: 'failsafe_sim'\n            }\n          }\n          post {\n            always {\n              sh 'make distclean; git clean -ff -x -d .'\n            }\n          }\n        }\n\n        stage('uORB graphs') {\n          agent {\n            docker {\n              image 'px4io/px4-dev-nuttx-focal:2022-08-12'\n              args '-e CCACHE_BASEDIR=$WORKSPACE -v ${CCACHE_DIR}:${CCACHE_DIR}:rw'\n            }\n          }\n          steps {\n            sh 'export'\n            sh 'make distclean; git clean -ff -x -d .'\n            sh 'git fetch --all --tags'\n            sh 'make uorb_graphs'\n            dir('Tools/uorb_graph') {\n              archiveArtifacts(artifacts: 'graph_*.json')\n              stash includes: 'graph_*.json', name: 'uorb_graph'\n            }\n          }\n          post {\n            always {\n              sh 'make distclean; git clean -ff -x -d .'\n            }\n          }\n        }\n\n      } // parallel\n    } // stage: Generate Metadata\n\n    stage('Deploy') {\n\n      parallel {\n\n        stage('Userguide') {\n          agent {\n            docker { image 'px4io/px4-dev-base-focal:2021-08-18' }\n          }\n          steps {\n            sh('export')\n            unstash 'metadata_airframes'\n            unstash 'metadata_parameters'\n            unstash 'metadata_module_documentation'\n            unstash 'msg_documentation'\n            unstash 'failsafe_sim'\n            unstash 'uorb_graph'\n            withCredentials([usernamePassword(credentialsId: 'px4buildbot_github_personal_token', passwordVariable: 'GIT_PASS', usernameVariable: 'GIT_USER')]) {\n              sh('git clone https://${GIT_USER}:${GIT_PASS}@github.com/PX4/PX4-user_guide.git')\n              sh('cp airframes.md PX4-user_guide/en/airframes/airframe_reference.md')\n              sh('cp parameters.md PX4-user_guide/en/advanced_config/parameter_reference.md')\n              sh('cp -R modules/*.md PX4-user_guide/en/modules/')\n              sh('cp -R graph_*.json PX4-user_guide/public/middleware/')  // vitepress\n              sh('cp -R msg_docs/*.md PX4-user_guide/en/msg_docs/')\n              sh('cp -R failsafe_sim/* PX4-user_guide/public/config/failsafe')  // vitepress\n              sh('cd PX4-user_guide; git status; git add .; git commit -a -m \"Update PX4 Firmware metadata `date`\" || true')\n              sh('cd PX4-user_guide; git push origin main || true')\n              sh('rm -rf PX4-user_guide')\n            }\n          }\n          when {\n            anyOf {\n              branch 'main'\n              branch 'master' // should be removed, but in case there is something going on...\n              branch 'pr-jenkins' // for testing\n            }\n          }\n          options {\n            skipDefaultCheckout()\n          }\n        }\n\n        stage('QGroundControl') {\n          agent {\n            docker { image 'px4io/px4-dev-base-focal:2021-08-18' }\n          }\n          steps {\n            sh('export')\n            unstash 'metadata_airframes'\n            unstash 'metadata_parameters'\n            withCredentials([usernamePassword(credentialsId: 'px4buildbot_github_personal_token', passwordVariable: 'GIT_PASS', usernameVariable: 'GIT_USER')]) {\n              sh('git clone https://${GIT_USER}:${GIT_PASS}@github.com/mavlink/qgroundcontrol.git')\n              sh('cp airframes.xml qgroundcontrol/src/AutoPilotPlugins/PX4/AirframeFactMetaData.xml')\n              sh('cp parameters.xml qgroundcontrol/src/FirmwarePlugin/PX4/PX4ParameterFactMetaData.xml')\n              sh('cd qgroundcontrol; git status; git add .; git commit -a -m \"Update PX4 Firmware metadata `date`\" || true')\n              sh('cd qgroundcontrol; git push origin master || true')\n              sh('rm -rf qgroundcontrol')\n            }\n          }\n          when {\n            anyOf {\n              branch 'main'\n              branch 'master' // should be removed, but in case there is something going on...\n              branch 'pr-jenkins' // for testing\n            }\n          }\n          options {\n            skipDefaultCheckout()\n          }\n        }\n\n        stage('PX4 ROS msgs') {\n          agent {\n            docker { image 'px4io/px4-dev-base-focal:2021-08-18' }\n          }\n          steps {\n            sh('export')\n            sh('make distclean; git clean -ff -x -d .')\n            withCredentials([usernamePassword(credentialsId: 'px4buildbot_github_personal_token', passwordVariable: 'GIT_PASS', usernameVariable: 'GIT_USER')]) {\n              sh(\"git clone https://${GIT_USER}:${GIT_PASS}@github.com/PX4/px4_msgs.git\")\n              // 'main' branch\n              sh('rm -f px4_msgs/msg/*.msg')\n              sh('rm -f px4_msgs/msg/versioned/*.msg')\n              sh('rm -f px4_msgs/srv/*.srv')\n              sh('rm -f px4_msgs/srv/versioned/*.srv')\n              sh('cp msg/*.msg px4_msgs/msg/')\n              sh('mkdir -p px4_msgs/msg/versioned && cp msg/versioned/*.msg px4_msgs/msg/versioned/')\n              sh('cp srv/*.srv px4_msgs/srv/')\n              sh('mkdir -p px4_msgs/srv/versioned && cp srv/versioned/*.srv px4_msgs/srv/versioned/')\n              sh('cd px4_msgs; git status; git add .; git commit -a -m \"Update message definitions `date`\" || true')\n              sh('cd px4_msgs; git push origin main || true')\n              sh('rm -rf px4_msgs')\n            }\n          }\n          when {\n            anyOf {\n              branch 'main'\n            }\n          }\n        }\n\n        stage('S3') {\n          agent {\n            docker { image 'px4io/px4-dev-base-focal:2021-08-18' }\n          }\n          steps {\n            sh('export')\n            unstash 'metadata_airframes'\n            unstash 'metadata_parameters'\n            sh('ls')\n            withAWS(credentials: 'px4_aws_s3_key', region: 'us-east-1') {\n              s3Upload(acl: 'PublicRead', bucket: 'px4-travis', file: 'airframes.xml', path: 'Firmware/master/')\n              s3Upload(acl: 'PublicRead', bucket: 'px4-travis', file: 'parameters.xml', path: 'Firmware/master/')\n              s3Upload(acl: 'PublicRead', bucket: 'px4-travis', file: 'parameters.json.xz', path: 'Firmware/master/')\n            }\n          }\n          when {\n            anyOf {\n              branch 'main'\n              branch 'master' // should be removed, but in case there is something going on...\n              branch 'pr-jenkins' // for testing\n            }\n          }\n          options {\n            skipDefaultCheckout()\n          }\n        }\n\n      } // parallel\n    } // stage: Generate Metadata\n\n  } // stages\n\n  environment {\n    CCACHE_DIR = '/tmp/ccache'\n    CI = true\n    GIT_AUTHOR_EMAIL = \"bot@px4.io\"\n    GIT_AUTHOR_NAME = \"PX4BuildBot\"\n    GIT_COMMITTER_EMAIL = \"bot@px4.io\"\n    GIT_COMMITTER_NAME = \"PX4BuildBot\"\n  }\n  options {\n    buildDiscarder(logRotator(numToKeepStr: '20', artifactDaysToKeepStr: '30'))\n    timeout(time: 90, unit: 'MINUTES')\n  }\n}\n"
        },
        {
          "name": "Kconfig",
          "type": "blob",
          "size": 5.1181640625,
          "content": "# PX4 Firmware Configuration\n\n\nmainmenu \"PX4 Firmware Configuration\"\n\ncomment \"Vendor: $(VENDOR)\"\ncomment \"Model: $(MODEL)\"\ncomment \"Label: $(LABEL)\"\n\nmenu \"Toolchain\"\n    choice\n        prompt \"Platform\"\n        default PLATFORM_NUTTX\n        config PLATFORM_NUTTX\n            bool \"nuttx\"\n        config PLATFORM_POSIX\n            bool \"posix\"\n        config PLATFORM_QURT\n            bool \"qurt\"\n        config PLATFORM_ROS2\n            bool \"ros2\"\n    endchoice\n\n    config BOARD_PLATFORM\n        string\n        default \"nuttx\" if PLATFORM_NUTTX\n        default \"posix\" if PLATFORM_POSIX\n        default \"qurt\" if PLATFORM_QURT\n        default \"ros2\" if PLATFORM_ROS2\n\n    config BOARD_LOCKSTEP\n        bool \"Force enable lockstep\"\n        depends on PLATFORM_POSIX\n        help\n            forces lockstep behaviour, despite REPLAY env variable\n\n    config BOARD_NOLOCKSTEP\n        bool \"Force disable lockstep\"\n        depends on PLATFORM_POSIX\n        help\n            forces nolockstep behaviour, despite REPLAY env variable\n\n    config BOARD_LINUX_TARGET\n        bool \"Linux OS Target\"\n        depends on PLATFORM_POSIX\n        help\n            Board Platform is running the Linux operating system\n\n    config BOARD_TOOLCHAIN\n        string \"Toolchain\"\n        default \"\"\n\n    config BOARD_ARCHITECTURE\n        string \"Architecture\"\n        default \"\"\n\n    config BOARD_LTO\n        bool \"(EXPERIMENTAL) Link Time Optimization (LTO)\"\n        default n\n        help\n            Enables LTO flag in linker\n            Note: Highly EXPERIMENTAL, furthermore make sure you're using a modern compiler GCC 9 or later\n\n    config BOARD_FULL_OPTIMIZATION\n        bool \"Full optmization (O3)\"\n        default n\n        help\n            Enables Cmake Release for -O3 optimization\n\n    config BOARD_ROMFSROOT\n        string \"ROMFSROOT\"\n        default \"px4fmu_common\"\n        help\n            relative path to the ROMFS root directory\n\n    config BOARD_ROOTFSDIR\n        string \"Root directory\"\n        depends on PLATFORM_POSIX\n        default \".\"\n        help\n            Configure the root directory in the file system for PX4 files\n\n    config BOARD_IO\n        string \"IO board name\"\n        default \"px4_io-v2_default\"\n        depends on DRIVERS_PX4IO\n        help\n            name of IO board to be built and included in the ROMFS (requires a valid ROMFSROOT)\n\n    config BOARD_CONSTRAINED_FLASH\n        bool \"Contrained flash\"\n        help\n            flag to enable constrained flash options (eg limit init script status text)\n\n    config BOARD_NO_HELP\n        bool \"No help\"\n        help\n            optional condition flag to disable help text on constrained flash systems\n\n    config BOARD_CONSTRAINED_MEMORY\n        bool \"Contrained memory\"\n        help\n            flag to enable constrained memory options (eg limit maximum number of uORB publications)\n\n    config BOARD_EXTERNAL_METADATA\n        bool \"External metadata\"\n        help\n            flag to exclude metadata to reduce flash\n\n    config BOARD_LINKER_PREFIX\n        string \"linker prefix\"\n        help\n            optional to prefix on the Linker script.\n\n    config BOARD_COMPILE_DEFINITIONS\n        string \"add custom compile definitions\"\n        help\n            add custom compile defitions to this specific target\nendmenu #Toolchain\n\nconfig BOARD_TESTING\n    bool \"Testing\"\n    select SYSTEMCMDS_TESTS\n    help\n        flag to enable automatic inclusion of PX4 testing modules\n\n\nconfig BOARD_ETHERNET\n    bool \"Ethernet\"\n    help\n        flag to indicate that ethernet is enabled\n\nconfig BOARD_CRYPTO\n    bool \"Crypto support\"\n    help\n        Enable PX4 Crypto Support. Select the implementation under drivers\n\nconfig BOARD_PROTECTED\n    bool \"Memory protection\"\n    help\n        Enable memory protection via MPU/MMU\n\nmenu \"Serial ports\"\n\n    config BOARD_SERIAL_URT6\n        string \"URT6 tty port\"\n\n    config BOARD_SERIAL_GPS1\n        string \"GPS1 tty port\"\n\n    config BOARD_SERIAL_GPS2\n        string \"GPS2 tty port\"\n\n    config BOARD_SERIAL_GPS3\n        string \"GPS3 tty port\"\n\n    config BOARD_SERIAL_GPS4\n        string \"GPS4 tty port\"\n\n    config BOARD_SERIAL_GPS5\n        string \"GPS5 tty port\"\n\n    config BOARD_SERIAL_TEL1\n        string \"TEL1 tty port\"\n\n    config BOARD_SERIAL_TEL2\n        string \"TEL2 tty port\"\n\n    config BOARD_SERIAL_TEL3\n        string \"TEL3 tty port\"\n\n    config BOARD_SERIAL_TEL4\n        string \"TEL4 tty port\"\n\n    config BOARD_SERIAL_TEL5\n        string \"TEL5 tty port\"\n\n    config BOARD_SERIAL_RC\n        string \"RC tty port\"\n\n    config BOARD_SERIAL_WIFI\n        string \"WIFI tty port\"\n\n    config BOARD_SERIAL_EXT2\n        string \"EXT2 tty port\"\nendmenu\n\nmenu \"File paths\"\n\n    config BOARD_ROOT_PATH\n        string \"PX4 Root file path\"\n        default \"/fs/microsd\"\n\n    config BOARD_PARAM_FILE\n        string \"Parameter file\"\n        default \"/fs/mtd_params\"\nendmenu\n\nmenu \"drivers\"\nsource \"src/drivers/Kconfig\"\nendmenu\n\nmenu \"modules\"\nsource \"src/modules/Kconfig\"\nendmenu\n\nmenu \"systemcmds\"\nsource \"src/systemcmds/Kconfig\"\nendmenu\n\nmenu \"examples\"\nsource \"src/examples/Kconfig\"\nendmenu\n\nmenu \"platforms\"\ndepends on PLATFORM_QURT || PLATFORM_POSIX\nsource \"platforms/common/Kconfig\"\nendmenu\n\nsource \"src/lib/*/Kconfig\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4912109375,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2012 - 2023, PX4 Development Team\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 24.9609375,
          "content": "############################################################################\n#\n# Copyright (c) 2015 - 2024 PX4 Development Team. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n#\n# 1. Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright\n#    notice, this list of conditions and the following disclaimer in\n#    the documentation and/or other materials provided with the\n#    distribution.\n# 3. Neither the name PX4 nor the names of its contributors may be\n#    used to endorse or promote products derived from this software\n#    without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS\n# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n#\n############################################################################\n\n# Enforce the presence of the GIT repository\n#\n# We depend on our submodules, so we have to prevent attempts to\n# compile without it being present.\nifeq ($(wildcard .git),)\n    $(error YOU HAVE TO USE GIT TO DOWNLOAD THIS REPOSITORY. ABORTING.)\nendif\n\n# Help\n# --------------------------------------------------------------------\n# Don't be afraid of this makefile, it is just passing\n# arguments to cmake to allow us to keep the wiki pages etc.\n# that describe how to build the px4 firmware\n# the same even when using cmake instead of make.\n#\n# Example usage:\n#\n# make px4_fmu-v2_default \t\t\t(builds)\n# make px4_fmu-v2_default upload \t(builds and uploads)\n# make px4_fmu-v2_default test \t\t(builds and tests)\n#\n# This tells cmake to build the nuttx px4_fmu-v2 default config in the\n# directory build/px4_fmu-v2_default and then call make\n# in that directory with the target upload.\n\n# explicity set default build target\nall: px4_sitl_default\n\n# define a space character to be able to explicitly find it in strings\nspace := $(subst ,, )\n\ndefine make_list\n     $(shell [ -f .github/workflows/compile_${1}.yml ] && cat .github/workflows/compile_${1}.yml | sed -E 's|[[:space:]]+(.*),|check_\\1|g' | grep check_${2})\nendef\n\n# Parsing\n# --------------------------------------------------------------------\n# assume 1st argument passed is the main target, the\n# rest are arguments to pass to the makefile generated\n# by cmake in the subdirectory\nFIRST_ARG := $(firstword $(MAKECMDGOALS))\nARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))\n\n# Get -j or --jobs argument as suggested in:\n# https://stackoverflow.com/a/33616144/8548472\nMAKE_PID := $(shell echo $$PPID)\nj := $(shell ps T | sed -n 's|.*$(MAKE_PID).*$(MAKE).* \\(-j\\|--jobs\\) *\\([0-9][0-9]*\\).*|\\2|p')\n\n# Default j for clang-tidy\nj_clang_tidy := $(or $(j),4)\n\nNINJA_BIN := ninja\nifndef NO_NINJA_BUILD\n\tNINJA_BUILD := $(shell $(NINJA_BIN) --version 2>/dev/null)\n\n\tifndef NINJA_BUILD\n\t\tNINJA_BIN := ninja-build\n\t\tNINJA_BUILD := $(shell $(NINJA_BIN) --version 2>/dev/null)\n\tendif\nendif\n\nifdef NINJA_BUILD\n\tPX4_CMAKE_GENERATOR := Ninja\n\tPX4_MAKE := $(NINJA_BIN)\n\n\tifdef VERBOSE\n\t\tPX4_MAKE_ARGS := -v\n\telse\n\t\tPX4_MAKE_ARGS :=\n\tendif\n\n\t# Only override ninja default if -j is set.\n\tifneq ($(j),)\n\t\tPX4_MAKE_ARGS := $(PX4_MAKE_ARGS) -j$(j)\n\tendif\nelse\n\tifdef SYSTEMROOT\n\t\t# Windows\n\t\tPX4_CMAKE_GENERATOR := \"MSYS\\ Makefiles\"\n\telse\n\t\tPX4_CMAKE_GENERATOR := \"Unix\\ Makefiles\"\n\tendif\n\n\t# For non-ninja builds we default to -j4\n\tj := $(or $(j),4)\n\tPX4_MAKE = $(MAKE)\n\tPX4_MAKE_ARGS = -j$(j) --no-print-directory\nendif\n\nSRC_DIR := $(shell dirname \"$(realpath $(lastword $(MAKEFILE_LIST)))\")\n\n# check if replay env variable is set & set build dir accordingly\nifdef replay\n\tBUILD_DIR_SUFFIX := _replay\nelse\n\tBUILD_DIR_SUFFIX :=\nendif\n\nCMAKE_ARGS ?=\n\n# additional config parameters passed to cmake\nifdef EXTERNAL_MODULES_LOCATION\n\toverride CMAKE_ARGS += -DEXTERNAL_MODULES_LOCATION:STRING=$(EXTERNAL_MODULES_LOCATION)\nendif\n\nifdef PX4_CMAKE_BUILD_TYPE\n\toverride CMAKE_ARGS += -DCMAKE_BUILD_TYPE=${PX4_CMAKE_BUILD_TYPE}\nelse\n\n\t# Address Sanitizer\n\tifdef PX4_ASAN\n\t\toverride CMAKE_ARGS += -DCMAKE_BUILD_TYPE=AddressSanitizer\n\tendif\n\n\t# Memory Sanitizer\n\tifdef PX4_MSAN\n\t\toverride CMAKE_ARGS += -DCMAKE_BUILD_TYPE=MemorySanitizer\n\tendif\n\n\t# Thread Sanitizer\n\tifdef PX4_TSAN\n\t\toverride CMAKE_ARGS += -DCMAKE_BUILD_TYPE=ThreadSanitizer\n\tendif\n\n\t# Undefined Behavior Sanitizer\n\tifdef PX4_UBSAN\n\t\toverride CMAKE_ARGS += -DCMAKE_BUILD_TYPE=UndefinedBehaviorSanitizer\n\tendif\n\n\t# Fuzz Testing\n\tifdef PX4_FUZZ\n\t\toverride CMAKE_ARGS += -DCMAKE_BUILD_TYPE=FuzzTesting\n\tendif\n\nendif\n\n# Pick up specific Python path if set\nifdef PYTHON_EXECUTABLE\n\toverride CMAKE_ARGS += -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}\nendif\n\n# Functions\n# --------------------------------------------------------------------\n# describe how to build a cmake config\ndefine cmake-build\n\t$(eval override CMAKE_ARGS += -DCONFIG=$(1))\n\t@$(eval BUILD_DIR = \"$(SRC_DIR)/build/$(1)\")\n\t@# check if the desired cmake configuration matches the cache then CMAKE_CACHE_CHECK stays empty\n\t@$(call cmake-cache-check)\n\t@# make sure to start from scratch when switching from GNU Make to Ninja\n\t@if [ $(PX4_CMAKE_GENERATOR) = \"Ninja\" ] && [ -e $(BUILD_DIR)/Makefile ]; then rm -rf $(BUILD_DIR); fi\n\t@# make sure to start from scratch if ninja build file is missing\n\t@if [ $(PX4_CMAKE_GENERATOR) = \"Ninja\" ] && [ ! -f $(BUILD_DIR)/build.ninja ]; then rm -rf $(BUILD_DIR); fi\n\t@# only excplicitly configure the first build, if cache file already exists the makefile will rerun cmake automatically if necessary\n\t@if [ ! -e $(BUILD_DIR)/CMakeCache.txt ] || [ $(CMAKE_CACHE_CHECK) ]; then \\\n\t\tmkdir -p $(BUILD_DIR) \\\n\t\t&& cd $(BUILD_DIR) \\\n\t\t&& cmake \"$(SRC_DIR)\" -G\"$(PX4_CMAKE_GENERATOR)\" $(CMAKE_ARGS) \\\n\t\t|| (rm -rf $(BUILD_DIR)); \\\n\tfi\n\t@# run the build for the specified target\n\t@cmake --build $(BUILD_DIR) -- $(PX4_MAKE_ARGS) $(ARGS)\nendef\n\n# check if the options we want to build with in CMAKE_ARGS match the ones which are already configured in the cache inside BUILD_DIR\ndefine cmake-cache-check\n\t@# change to build folder which fails if it doesn't exist and CACHED_CMAKE_OPTIONS stays empty\n\t@# fetch all previously configured and cached options from the build folder and transform them into the OPTION=VALUE format without type (e.g. :BOOL)\n\t@$(eval CACHED_CMAKE_OPTIONS = $(shell cd $(BUILD_DIR) 2>/dev/null && cmake -L 2>/dev/null | sed -n 's|\\([^[:blank:]]*\\):[^[:blank:]]*\\(=[^[:blank:]]*\\)|\\1\\2|gp' ))\n\t@# transform the options in CMAKE_ARGS into the OPTION=VALUE format without -D\n\t@$(eval DESIRED_CMAKE_OPTIONS = $(shell echo $(CMAKE_ARGS) | sed -n 's|-D\\([^[:blank:]]*=[^[:blank:]]*\\)|\\1|gp' ))\n\t@# find each currently desired option in the already cached ones making sure the complete configured string value is the same\n\t@$(eval VERIFIED_CMAKE_OPTIONS = $(foreach option,$(DESIRED_CMAKE_OPTIONS),$(strip $(findstring $(option)$(space),$(CACHED_CMAKE_OPTIONS)))))\n\t@# if the complete list of desired options is found in the list of verified options we don't need to reconfigure and CMAKE_CACHE_CHECK stays empty\n\t@$(eval CMAKE_CACHE_CHECK = $(if $(findstring $(DESIRED_CMAKE_OPTIONS),$(VERIFIED_CMAKE_OPTIONS)),,y))\nendef\n\nCOLOR_BLUE = \\033[0;94m\nNO_COLOR   = \\033[m\n\ndefine colorecho\n+@echo -e '${COLOR_BLUE}${1} ${NO_COLOR}'\nendef\n\n# Get a list of all config targets boards/*/*.px4board\nALL_CONFIG_TARGETS := $(shell find boards -maxdepth 3 -mindepth 3 -name '*.px4board' -print | sed -e 's|boards\\/||' | sed -e 's|\\.px4board||' | sed -e 's|\\/|_|g' | sort)\n\n# ADD CONFIGS HERE\n# --------------------------------------------------------------------\n#  Do not put any spaces between function arguments.\n\n# All targets.\n$(ALL_CONFIG_TARGETS):\n\t@$(call cmake-build,$@$(BUILD_DIR_SUFFIX))\n\n# Filter for only default targets to allow omiting the \"_default\" postfix\nCONFIG_TARGETS_DEFAULT := $(patsubst %_default,%,$(filter %_default,$(ALL_CONFIG_TARGETS)))\n$(CONFIG_TARGETS_DEFAULT):\n\t@$(call cmake-build,$@_default$(BUILD_DIR_SUFFIX))\n\nall_config_targets: $(ALL_CONFIG_TARGETS)\nall_default_targets: $(CONFIG_TARGETS_DEFAULT)\n\nupdateconfig:\n\t@./Tools/kconfig/updateconfig.py\n\n# board reorganization deprecation warnings (2018-11-22)\ndefine deprecation_warning\n\t$(warning $(1) has been deprecated and will be removed, please use $(2)!)\nendef\n\n# All targets with just dependencies but no recipe must either be marked as phony (or have the special @: as recipe).\n.PHONY: all px4_sitl_default all_config_targets all_default_targets\n\n# Other targets\n# --------------------------------------------------------------------\n\n.PHONY: qgc_firmware px4fmu_firmware misc_qgc_extra_firmware\n\n# QGroundControl flashable NuttX firmware\nqgc_firmware: px4fmu_firmware misc_qgc_extra_firmware\n\n# px4fmu NuttX firmware\npx4fmu_firmware: \\\n\tcheck_px4_io-v2_default \\\n\tcheck_px4_fmu-v2_default \\\n\tcheck_px4_fmu-v3_default \\\n\tcheck_px4_fmu-v4_default \\\n\tcheck_px4_fmu-v4pro_default \\\n\tcheck_px4_fmu-v5_default \\\n\tcheck_px4_fmu-v5x_default \\\n\tsizes\n\nmisc_qgc_extra_firmware: \\\n\tcheck_nxp_fmuk66-v3_default \\\n\tcheck_mro_x21_default \\\n\tcheck_bitcraze_crazyflie_default \\\n\tcheck_bitcraze_crazyflie21_default \\\n\tcheck_airmind_mindpx-v2_default \\\n\tsizes\n\n.PHONY: sizes check quick_check uorb_graphs\n\nsizes:\n\t@-find build -name *.elf -type f | xargs size 2> /dev/null || :\n\n# All default targets that don't require a special build environment\ncheck: check_px4_sitl_default px4fmu_firmware misc_qgc_extra_firmware tests check_format\n\n# quick_check builds a single nuttx and SITL target, runs testing, and checks the style\nquick_check: check_px4_sitl_test check_px4_fmu-v5_default tests check_format\n\ncheck_%:\n\t@echo\n\t$(call colorecho,'Building' $(subst check_,,$@))\n\t@$(MAKE) --no-print-directory $(subst check_,,$@)\n\t@echo\n\nall_variants_%:\n\t@echo 'Building all $(subst all_variants_,,$@) variants:'  $(filter $(subst all_variants_,,$@)_%, $(ALL_CONFIG_TARGETS))\n\t@echo\n\t$(foreach a,$(filter $(subst all_variants_,,$@)_%, $(ALL_CONFIG_TARGETS)), $(call cmake-build,$(a)$(BUILD_DIR_SUFFIX)))\n\nuorb_graphs:\n\t@./Tools/uorb_graph/create.py --src-path src --exclude-path src/examples --exclude-path src/lib/parameters --merge-depends --file Tools/uorb_graph/graph_full\n\t@./Tools/uorb_graph/create.py --src-path src --exclude-path src/examples --exclude-path src/lib/parameters --exclude-path src/modules/mavlink --merge-depends --file Tools/uorb_graph/graph_full_no_mavlink\n\t@$(MAKE) --no-print-directory px4_fmu-v2_default uorb_graph\n\t@$(MAKE) --no-print-directory px4_fmu-v4_default uorb_graph\n\t@$(MAKE) --no-print-directory px4_fmu-v5_default uorb_graph\n\t@$(MAKE) --no-print-directory px4_sitl_default uorb_graph\n\npx4io_update:\n\t@$(MAKE) --no-print-directory px4_io-v2_default\n\t@$(MAKE) --no-print-directory cubepilot_io-v2_default\n\t# px4_io-v2_default\n\tcp build/px4_io-v2_default/px4_io-v2_default.bin boards/ark/fmu-v6x/extras/px4_io-v2_default.bin\n\tcp build/px4_io-v2_default/px4_io-v2_default.bin boards/holybro/durandal-v1/extras/px4_io-v2_default.bin\n\tcp build/px4_io-v2_default/px4_io-v2_default.bin boards/holybro/pix32v5/extras/px4_io-v2_default.bin\n\tcp build/px4_io-v2_default/px4_io-v2_default.bin boards/mro/x21/extras/px4_io-v2_default.bin\n\tcp build/px4_io-v2_default/px4_io-v2_default.bin boards/mro/x21-777/extras/px4_io-v2_default.bin\n\tcp build/px4_io-v2_default/px4_io-v2_default.bin boards/px4/fmu-v2/extras/px4_io-v2_default.bin\n\tcp build/px4_io-v2_default/px4_io-v2_default.bin boards/px4/fmu-v3/extras/px4_io-v2_default.bin\n\tcp build/px4_io-v2_default/px4_io-v2_default.bin boards/px4/fmu-v4pro/extras/px4_io-v2_default.bin\n\tcp build/px4_io-v2_default/px4_io-v2_default.bin boards/px4/fmu-v5/extras/px4_io-v2_default.bin\n\tcp build/px4_io-v2_default/px4_io-v2_default.bin boards/px4/fmu-v5x/extras/px4_io-v2_default.bin\n\tcp build/px4_io-v2_default/px4_io-v2_default.bin boards/px4/fmu-v6x/extras/px4_io-v2_default.bin\n\tcp build/px4_io-v2_default/px4_io-v2_default.bin boards/px4/fmu-v6c/extras/px4_io-v2_default.bin\n\t# cubepilot_io-v2_default\n\tcp build/cubepilot_io-v2_default/cubepilot_io-v2_default.bin boards/cubepilot/cubeorange/extras/cubepilot_io-v2_default.bin\n\tcp build/cubepilot_io-v2_default/cubepilot_io-v2_default.bin boards/cubepilot/cubeyellow/extras/cubepilot_io-v2_default.bin\n\tgit status\n\nbootloaders_update: \\\n\t3dr_ctrl-zero-h7-oem-revg_bootloader \\\n\tark_fmu-v6x_bootloader \\\n\tark_fpv_bootloader \\\n\tark_pi6x_bootloader \\\n\tcuav_nora_bootloader \\\n\tcuav_x7pro_bootloader \\\n\tcuav_7-nano_bootloader \\\n\tcubepilot_cubeorange_bootloader \\\n\tcubepilot_cubeorangeplus_bootloader \\\n\thkust_nxt-dual_bootloader \\\n\thkust_nxt-v1_bootloader \\\n\tholybro_durandal-v1_bootloader \\\n\tholybro_kakuteh7_bootloader \\\n\tholybro_kakuteh7mini_bootloader \\\n\tholybro_kakuteh7v2_bootloader \\\n\tmatek_h743_bootloader \\\n\tmatek_h743-mini_bootloader \\\n\tmatek_h743-slim_bootloader \\\n        micoair_h743_bootloader \\\n        micoair_h743-aio_bootloader \\\n\tmicoair_h743-v2_bootloader \\\n\tmodalai_fc-v2_bootloader \\\n\tmro_ctrl-zero-classic_bootloader \\\n\tmro_ctrl-zero-h7_bootloader \\\n\tmro_ctrl-zero-h7-oem_bootloader \\\n\tmro_pixracerpro_bootloader \\\n\tpx4_fmu-v6c_bootloader \\\n\tpx4_fmu-v6u_bootloader \\\n\tpx4_fmu-v6x_bootloader \\\n\tpx4_fmu-v6xrt_bootloader \\\n\tsiyi_n7_bootloader\n\tgit status\n\n.PHONY: coverity_scan\n\ncoverity_scan: px4_sitl_default\n\n# Documentation\n# --------------------------------------------------------------------\n.PHONY: parameters_metadata airframe_metadata module_documentation extract_events px4_metadata doxygen\n\nparameters_metadata:\n\t@$(MAKE) --no-print-directory px4_sitl_default metadata_parameters ver_gen\n\nairframe_metadata:\n\t@$(MAKE) --no-print-directory px4_sitl_default metadata_airframes ver_gen\n\nmodule_documentation:\n\t@$(MAKE) --no-print-directory px4_sitl_default metadata_module_documentation\n\nextract_events:\n\t@$(MAKE) --no-print-directory px4_sitl_default metadata_extract_events ver_gen\n\npx4_metadata: parameters_metadata airframe_metadata module_documentation extract_events\n\ndoxygen:\n\t@mkdir -p \"$(SRC_DIR)\"/build/doxygen\n\t@cd \"$(SRC_DIR)\"/build/doxygen && cmake \"$(SRC_DIR)\" $(CMAKE_ARGS) -G\"$(PX4_CMAKE_GENERATOR)\" -DCONFIG=px4_sitl_default -DBUILD_DOXYGEN=ON\n\t@$(PX4_MAKE) -C \"$(SRC_DIR)\"/build/doxygen\n\t@touch \"$(SRC_DIR)\"/build/doxygen/Documentation/.nojekyll\n\n# Style\n# --------------------------------------------------------------------\n.PHONY: check_format format check_newlines\n\ncheck_format:\n\t$(call colorecho,'Checking formatting with astyle')\n\t@\"$(SRC_DIR)\"/Tools/astyle/check_code_style_all.sh\n\t@cd \"$(SRC_DIR)\" && git diff --check\n\nformat:\n\t$(call colorecho,'Formatting with astyle')\n\t@\"$(SRC_DIR)\"/Tools/astyle/check_code_style_all.sh --fix\n\ncheck_newlines:\n\t$(call colorecho,'Checking for missing or duplicate newlines at the end of files')\n\t@\"$(SRC_DIR)\"/Tools/astyle/check_newlines.sh\n\n# Testing\n# --------------------------------------------------------------------\n.PHONY: tests tests_coverage tests_mission tests_mission_coverage tests_offboard tests_avoidance\n.PHONY: rostest python_coverage\n\ntests:\n\t$(eval override CMAKE_ARGS += -DTESTFILTER=$(TESTFILTER))\n\t$(eval ARGS += test_results)\n\t$(eval ASAN_OPTIONS += color=always:check_initialization_order=1:detect_stack_use_after_return=1)\n\t$(eval UBSAN_OPTIONS += color=always)\n\t$(call cmake-build,px4_sitl_test)\n\ntests_coverage:\n\t@$(MAKE) clean\n\t@$(MAKE) --no-print-directory tests PX4_CMAKE_BUILD_TYPE=Coverage\n\t@mkdir -p coverage\n\t@lcov --directory build/px4_sitl_test --base-directory build/px4_sitl_test --gcov-tool gcov --capture -o coverage/lcov.info\n\n\nrostest: px4_sitl_default\n\t@$(MAKE) --no-print-directory px4_sitl_default sitl_gazebo-classic\n\ntests_integration: px4_sitl_default\n\t@$(MAKE) --no-print-directory px4_sitl_default sitl_gazebo-classic\n\t@$(MAKE) --no-print-directory px4_sitl_default mavsdk_tests\n\t@\"$(SRC_DIR)\"/test/mavsdk_tests/mavsdk_test_runner.py --speed-factor 20 test/mavsdk_tests/configs/sitl.json\n\ntests_integration_coverage:\n\t@$(MAKE) clean\n\t@$(MAKE) --no-print-directory px4_sitl_default PX4_CMAKE_BUILD_TYPE=Coverage\n\t@$(MAKE) --no-print-directory px4_sitl_default sitl_gazebo-classic\n\t@$(MAKE) --no-print-directory px4_sitl_default mavsdk_tests\n\t@\"$(SRC_DIR)\"/test/mavsdk_tests/mavsdk_test_runner.py --speed-factor 20 test/mavsdk_tests/configs/sitl.json\n\t@mkdir -p coverage\n\t@lcov --directory build/px4_sitl_default --base-directory build/px4_sitl_default --gcov-tool gcov --capture -o coverage/lcov.info\n\ntests_mission: rostest\n\t@\"$(SRC_DIR)\"/test/rostest_px4_run.sh mavros_posix_tests_missions.test\n\nrostest_run: px4_sitl_default\n\t@$(MAKE) --no-print-directory px4_sitl_default sitl_gazebo-classic\n\t@\"$(SRC_DIR)\"/test/rostest_px4_run.sh $(TEST_FILE) mission:=$(TEST_MISSION) vehicle:=$(TEST_VEHICLE)\n\ntests_mission_coverage:\n\t@$(MAKE) clean\n\t@$(MAKE) --no-print-directory px4_sitl_default PX4_CMAKE_BUILD_TYPE=Coverage\n\t@$(MAKE) --no-print-directory px4_sitl_default sitl_gazebo-classic PX4_CMAKE_BUILD_TYPE=Coverage\n\t@\"$(SRC_DIR)\"/test/rostest_px4_run.sh mavros_posix_test_mission.test mission:=VTOL_mission_1 vehicle:=standard_vtol\n\t@$(MAKE) --no-print-directory px4_sitl_default generate_coverage\n\ntests_offboard: rostest\n\t@\"$(SRC_DIR)\"/test/rostest_px4_run.sh mavros_posix_tests_offboard_attctl.test\n\t@\"$(SRC_DIR)\"/test/rostest_px4_run.sh mavros_posix_tests_offboard_posctl.test\n\t@\"$(SRC_DIR)\"/test/rostest_px4_run.sh mavros_posix_tests_offboard_rpyrt_ctl.test\n\ntests_avoidance: rostest\n\t@\"$(SRC_DIR)\"/test/rostest_avoidance_run.sh mavros_posix_test_avoidance.test\n\t@\"$(SRC_DIR)\"/test/rostest_avoidance_run.sh mavros_posix_test_safe_landing.test\n\npython_coverage:\n\t@mkdir -p \"$(SRC_DIR)\"/build/python_coverage\n\t@cd \"$(SRC_DIR)\"/build/python_coverage && cmake \"$(SRC_DIR)\" $(CMAKE_ARGS) -G\"$(PX4_CMAKE_GENERATOR)\" -DCONFIG=px4_sitl_default -DPYTHON_COVERAGE=ON\n\t@$(PX4_MAKE) -C \"$(SRC_DIR)\"/build/python_coverage\n\t@$(PX4_MAKE) -C \"$(SRC_DIR)\"/build/python_coverage metadata_airframes\n\t@$(PX4_MAKE) -C \"$(SRC_DIR)\"/build/python_coverage metadata_parameters\n\t#@$(PX4_MAKE) -C \"$(SRC_DIR)\"/build/python_coverage module_documentation # TODO: fix within coverage.py\n\t@coverage combine `find . -name .coverage\\*`\n\t@coverage report -m\n\n\n# static analyzers (scan-build, clang-tidy, cppcheck)\n# --------------------------------------------------------------------\n.PHONY: scan-build px4_sitl_default-clang clang-tidy clang-tidy-fix clang-tidy-quiet\n.PHONY: cppcheck shellcheck_all validate_module_configs\n\nscan-build:\n\t@export CCC_CC=clang\n\t@export CCC_CXX=clang++\n\t@rm -rf \"$(SRC_DIR)\"/build/px4_sitl_default-scan-build\n\t@rm -rf \"$(SRC_DIR)\"/build/scan-build/report_latest\n\t@mkdir -p \"$(SRC_DIR)\"/build/px4_sitl_default-scan-build\n\t@cd \"$(SRC_DIR)\"/build/px4_sitl_default-scan-build && scan-build cmake \"$(SRC_DIR)\" -GNinja -DCONFIG=px4_sitl_default\n\t@scan-build -o \"$(SRC_DIR)\"/build/scan-build cmake --build \"$(SRC_DIR)\"/build/px4_sitl_default-scan-build\n\t@find \"$(SRC_DIR)\"/build/scan-build -maxdepth 1 -mindepth 1 -type d -exec cp -r \"{}\" \"$(SRC_DIR)\"/build/scan-build/report_latest \\;\n\npx4_sitl_default-clang:\n\t@mkdir -p \"$(SRC_DIR)\"/build/px4_sitl_default-clang\n\t@cd \"$(SRC_DIR)\"/build/px4_sitl_default-clang && cmake \"$(SRC_DIR)\" $(CMAKE_ARGS) -G\"$(PX4_CMAKE_GENERATOR)\" -DCONFIG=px4_sitl_default -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++\n\t@$(PX4_MAKE) -C \"$(SRC_DIR)\"/build/px4_sitl_default-clang\n\nclang-tidy: px4_sitl_default-clang\n\t@cd \"$(SRC_DIR)\"/build/px4_sitl_default-clang && \"$(SRC_DIR)\"/Tools/run-clang-tidy.py -header-filter=\".*\\.hpp\" -j$(j_clang_tidy) -p .\n\n# to automatically fix a single check at a time, eg modernize-redundant-void-arg\n#  % run-clang-tidy-4.0.py -fix -j4 -checks=-\\*,modernize-redundant-void-arg -p .\nclang-tidy-fix: px4_sitl_default-clang\n\t@cd \"$(SRC_DIR)\"/build/px4_sitl_default-clang && \"$(SRC_DIR)\"/Tools/run-clang-tidy.py -header-filter=\".*\\.hpp\" -j$(j_clang_tidy) -fix -p .\n\n# modified version of run-clang-tidy.py to return error codes and only output relevant results\nclang-tidy-quiet: px4_sitl_default-clang\n\t@cd \"$(SRC_DIR)\"/build/px4_sitl_default-clang && \"$(SRC_DIR)\"/Tools/run-clang-tidy.py -header-filter=\".*\\.hpp\" -j$(j_clang_tidy) -p .\n\n# TODO: Fix cppcheck errors then try --enable=warning,performance,portability,style,unusedFunction or --enable=all\ncppcheck: px4_sitl_default\n\t@mkdir -p \"$(SRC_DIR)\"/build/cppcheck\n\t@cppcheck -i\"$(SRC_DIR)\"/src/examples --enable=performance --std=c++14 --std=c99 --std=posix --project=\"$(SRC_DIR)\"/build/px4_sitl_default/compile_commands.json --xml-version=2 2> \"$(SRC_DIR)\"/build/cppcheck/cppcheck-result.xml > /dev/null\n\t@cppcheck-htmlreport --source-encoding=ascii --file=\"$(SRC_DIR)\"/build/cppcheck/cppcheck-result.xml --report-dir=\"$(SRC_DIR)\"/build/cppcheck --source-dir=\"$(SRC_DIR)\"/src/\n\nshellcheck_all:\n\t@\"$(SRC_DIR)\"/Tools/run-shellcheck.sh \"$(SRC_DIR)\"/ROMFS/px4fmu_common/\n\t@make px4_fmu-v5_default shellcheck\n\nvalidate_module_configs:\n\t@find \"$(SRC_DIR)\"/src/modules \"$(SRC_DIR)\"/src/drivers \"$(SRC_DIR)\"/src/lib -name *.yaml -type f \\\n\t-not -path \"$(SRC_DIR)/src/lib/mixer_module/*\" \\\n\t-not -path \"$(SRC_DIR)/src/modules/uxrce_dds_client/dds_topics.yaml\" \\\n\t-not -path \"$(SRC_DIR)/src/modules/zenoh/zenoh-pico/*\" \\\n\t-not -path \"$(SRC_DIR)/src/lib/events/libevents/*\" \\\n\t-not -path \"$(SRC_DIR)/src/lib/cdrstream/*\" \\\n\t-not -path \"$(SRC_DIR)/src/lib/crypto/libtommath/*\" -print0 | \\\n\txargs -0 \"$(SRC_DIR)\"/Tools/validate_yaml.py --schema-file \"$(SRC_DIR)\"/validation/module_schema.yaml\n\n# Cleanup\n# --------------------------------------------------------------------\n.PHONY: clean submodulesclean submodulesupdate distclean\n\nclean:\n\t@[ ! -d \"$(SRC_DIR)/build\" ] || find \"$(SRC_DIR)/build\" -mindepth 1 -maxdepth 1 -type d -exec sh -c \"echo {}; cmake --build {} -- clean || rm -rf {}\" \\; # use generated build system to clean, wipe build directory if it fails\n\t@git submodule foreach git clean -dX --force # some submodules generate build artifacts in source\n\nsubmodulesclean:\n\t@git submodule foreach --quiet --recursive git clean -ff -x -d\n\t@git submodule update --quiet --init --recursive --force || true\n\t@git submodule sync --recursive\n\t@git submodule update --init --recursive --force --jobs 4\n\nsubmodulesupdate:\n\t@git submodule update --quiet --init --recursive --jobs 4 || true\n\t@git submodule sync --recursive\n\t@git submodule update --init --recursive --jobs 4\n\t@git fetch --all --tags --recurse-submodules=yes --jobs=4\n\ndistclean:\n\t@git submodule deinit --force $(SRC_DIR)\n\t@rm -rf \"$(SRC_DIR)/build\"\n\t@git clean --force -X \"$(SRC_DIR)/msg/\" \"$(SRC_DIR)/platforms/\" \"$(SRC_DIR)/posix-configs/\" \"$(SRC_DIR)/ROMFS/\" \"$(SRC_DIR)/src/\" \"$(SRC_DIR)/test/\" \"$(SRC_DIR)/Tools/\"\n\n# Help / Error / Misc\n# --------------------------------------------------------------------\n\n# All other targets are handled by PX4_MAKE. Add a rule here to avoid printing an error.\n%:\n\t$(if $(filter $(FIRST_ARG),$@), \\\n\t\t$(error \"Make target $@ not found. It either does not exist or $@ cannot be the first argument. Use '$(MAKE) list_config_targets' to get a list of all possible [configuration] targets.\"),@#)\n\n# Print a list of non-config targets (based on http://stackoverflow.com/a/26339924/1487069)\nhelp:\n\t@echo \"Usage: $(MAKE) <target>\"\n\t@echo \"Where <target> is one of:\"\n\t@$(MAKE) -pRrq -f $(lastword $(MAKEFILE_LIST)) : 2>/dev/null | \\\n\t\tawk -v RS= -F: '/(^|\\n)# Files(\\n|$$)/,/(^|\\n)# Finished Make data base/ {if ($$1 !~ \"^[#.]\") {print $$1}}' | sort | \\\n\t\tegrep -v -e '^[^[:alnum:]]' -e '^($(subst $(space),|,$(ALL_CONFIG_TARGETS)))$$' -e '_default$$' -e '^(Makefile)'\n\t@echo\n\t@echo \"Or, $(MAKE) <config_target> [<make_target(s)>]\"\n\t@echo \"Use '$(MAKE) list_config_targets' for a list of configuration targets.\"\n\n# Print a list of all config targets.\nlist_config_targets:\n\t@for targ in $(patsubst %_default,%[_default],$(ALL_CONFIG_TARGETS)); do echo $$targ; done\n\ncheck_nuttx : $(call make_list,nuttx) \\\n\tsizes\n\ncheck_linux : $(call make_list,linux) \\\n\tsizes\n\ncheck_px4: $(call make_list,nuttx,\"px4\") \\\n\tsizes\n\ncheck_nxp: $(call make_list,nuttx,\"nxp\") \\\n\tsizes\n\n# helpers for running olddefconfig (nuttx) and px4_savedefconfig on all boards\n.PHONY: all_oldconfig all_px4_savedefconfig\nall_oldconfig:\n\t@for targ in $(ALL_CONFIG_TARGETS); do $(MAKE) $$targ oldconfig; done\n\nall_px4_savedefconfig:\n\t@for targ in $(ALL_CONFIG_TARGETS); do $(MAKE) $$targ px4_savedefconfig; done\n\n.PHONY: failsafe_web run_failsafe_web_server\nfailsafe_web:\n\t@if ! command -v emcc; then echo -e \"Install emscripten first: https://emscripten.org/docs/getting_started/downloads.html\\nAnd source the env: source <path>/emsdk_env.sh\"; exit 1; fi\n\t@$(MAKE) --no-print-directory px4_sitl_default failsafe_test parameters_xml \\\n\t\tPX4_CMAKE_BUILD_TYPE=Release BUILD_DIR_SUFFIX=_failsafe_web \\\n\t\tCMAKE_ARGS=\"-DCMAKE_CXX_COMPILER=em++ -DCMAKE_C_COMPILER=emcc\"\nrun_failsafe_web_server: failsafe_web\n\t@cd build/px4_sitl_default_failsafe_web && \\\n\t\tpython3 -m http.server\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.3056640625,
          "content": "# PX4 Drone Autopilot\n\n[![Releases](https://img.shields.io/github/release/PX4/PX4-Autopilot.svg)](https://github.com/PX4/PX4-Autopilot/releases) [![DOI](https://zenodo.org/badge/22634/PX4/PX4-Autopilot.svg)](https://zenodo.org/badge/latestdoi/22634/PX4/PX4-Autopilot)\n\n[![Build Targets](https://github.com/PX4/PX4-Autopilot/actions/workflows/build_all_targets.yml/badge.svg?branch=main)](https://github.com/PX4/PX4-Autopilot/actions/workflows/build_all_targets.yml) [![SITL Tests](https://github.com/PX4/PX4-Autopilot/workflows/SITL%20Tests/badge.svg?branch=master)](https://github.com/PX4/PX4-Autopilot/actions?query=workflow%3A%22SITL+Tests%22)\n\n[![Discord Shield](https://discordapp.com/api/guilds/1022170275984457759/widget.png?style=shield)](https://discord.gg/dronecode)\n\nThis repository holds the [PX4](http://px4.io) flight control solution for drones, with the main applications located in the [src/modules](https://github.com/PX4/PX4-Autopilot/tree/main/src/modules) directory. It also contains the PX4 Drone Middleware Platform, which provides drivers and middleware to run drones.\n\nPX4 is highly portable, OS-independent and supports Linux, NuttX and MacOS out of the box.\n\n* Official Website: http://px4.io (License: BSD 3-clause, [LICENSE](https://github.com/PX4/PX4-Autopilot/blob/main/LICENSE))\n* [Supported airframes](https://docs.px4.io/main/en/airframes/airframe_reference.html) ([portfolio](https://px4.io/ecosystem/commercial-systems/)):\n  * [Multicopters](https://docs.px4.io/main/en/frames_multicopter/)\n  * [Fixed wing](https://docs.px4.io/main/en/frames_plane/)\n  * [VTOL](https://docs.px4.io/main/en/frames_vtol/)\n  * [Autogyro](https://docs.px4.io/main/en/frames_autogyro/)\n  * [Rover](https://docs.px4.io/main/en/frames_rover/)\n  * many more experimental types (Blimps, Boats, Submarines, High altitude balloons, etc)\n* Releases: [Downloads](https://github.com/PX4/PX4-Autopilot/releases)\n\n\n## Building a PX4 based drone, rover, boat or robot\n\nThe [PX4 User Guide](https://docs.px4.io/main/en/) explains how to assemble [supported vehicles](https://docs.px4.io/main/en/airframes/airframe_reference.html) and fly drones with PX4.\nSee the [forum and chat](https://docs.px4.io/main/en/#getting-help) if you need help!\n\n\n## Changing code and contributing\n\nThis [Developer Guide](https://docs.px4.io/main/en/development/development.html) is for software developers who want to modify the flight stack and middleware (e.g. to add new flight modes), hardware integrators who want to support new flight controller boards and peripherals, and anyone who wants to get PX4 working on a new (unsupported) airframe/vehicle.\n\nDevelopers should read the [Guide for Contributions](https://docs.px4.io/main/en/contribute/).\nSee the [forum and chat](https://docs.px4.io/main/en/#getting-help) if you need help!\n\n\n### Weekly Dev Call\n\nThe PX4 Dev Team syncs up on a [weekly dev call](https://docs.px4.io/main/en/contribute/).\n\n> **Note** The dev call is open to all interested developers (not just the core dev team). This is a great opportunity to meet the team and contribute to the ongoing development of the platform. It includes a QA session for newcomers. All regular calls are listed in the [Dronecode calendar](https://www.dronecode.org/calendar/).\n\n\n## Maintenance Team\n\nNote: This is the source of truth for the active maintainers of PX4 ecosystem.\n\n| Sector | Maintainer |\n|---|---|\n| Founder | [Lorenz Meier](https://github.com/LorenzMeier) |\n| Architecture | [Daniel Agar](https://github.com/dagar) / [Beat Küng](https://github.com/bkueng)|\n| State Estimation | [Mathieu Bresciani](https://github.com/bresch) / [Paul Riseborough](https://github.com/priseborough) |\n| OS/NuttX | [David Sidrane](https://github.com/davids5) |\n| Drivers | [Daniel Agar](https://github.com/dagar) |\n| Simulation | [Jaeyoung Lim](https://github.com/Jaeyoung-Lim) |\n| ROS2 | [Beniamino Pozzan](https://github.com/beniaminopozzan) |\n| Community QnA Call | [Ramon Roche](https://github.com/mrpollo) |\n| [Documentation](https://docs.px4.io/main/en/) | [Hamish Willee](https://github.com/hamishwillee) |\n\n| Vehicle Type | Maintainer |\n|---|---|\n| Multirotor | [Matthias Grob](https://github.com/MaEtUgR) |\n| Fixed Wing | [Thomas Stastny](https://github.com/tstastny) |\n| Hybrid VTOL | [Silvan Fuhrer](https://github.com/sfuhrer) |\n| Rover | [Christian Friedrich](https://github.com/chfriedrich98) |\n| Boat | x |\n\n\nSee also [maintainers list](https://px4.io/community/maintainers/) (px4.io) and the [contributors list](https://github.com/PX4/PX4-Autopilot/graphs/contributors) (Github). However it may be not up to date.\n\n## Supported Hardware\n\nPixhawk standard boards and proprietary boards are shown below (discontinued boards aren't listed).\n\nFor the most up to date information, please visit [PX4 user Guide > Autopilot Hardware](https://docs.px4.io/main/en/flight_controller/).\n\n### Pixhawk Standard Boards\n\nThese boards fully comply with Pixhawk Standard, and are maintained by the PX4-Autopilot maintainers and Dronecode team\n\n* FMUv6X and FMUv6C\n  * [CUAV Pixahwk V6X (FMUv6X)](https://docs.px4.io/main/en/flight_controller/cuav_pixhawk_v6x.html)\n  * [Holybro Pixhawk 6X (FMUv6X)](https://docs.px4.io/main/en/flight_controller/pixhawk6x.html)\n  * [Holybro Pixhawk 6C (FMUv6C)](https://docs.px4.io/main/en/flight_controller/pixhawk6c.html)\n  * [Holybro Pix32 v6 (FMUv6C)](https://docs.px4.io/main/en/flight_controller/holybro_pix32_v6.html)\n* FMUv5 and FMUv5X (STM32F7, 2019/20)\n  * [Pixhawk 4 (FMUv5)](https://docs.px4.io/main/en/flight_controller/pixhawk4.html)\n  * [Pixhawk 4 mini (FMUv5)](https://docs.px4.io/main/en/flight_controller/pixhawk4_mini.html)\n  * [CUAV V5+ (FMUv5)](https://docs.px4.io/main/en/flight_controller/cuav_v5_plus.html)\n  * [CUAV V5 nano (FMUv5)](https://docs.px4.io/main/en/flight_controller/cuav_v5_nano.html)\n  * [Auterion Skynode (FMUv5X)](https://docs.auterion.com/avionics/skynode)\n* FMUv4 (STM32F4, 2015)\n  * [Pixracer](https://docs.px4.io/main/en/flight_controller/pixracer.html)\n  * [Pixhawk 3 Pro](https://docs.px4.io/main/en/flight_controller/pixhawk3_pro.html)\n* FMUv3 (STM32F4, 2014)\n  * [Pixhawk 2](https://docs.px4.io/main/en/flight_controller/pixhawk-2.html)\n  * [Pixhawk Mini](https://docs.px4.io/main/en/flight_controller/pixhawk_mini.html)\n  * [CUAV Pixhack v3](https://docs.px4.io/main/en/flight_controller/pixhack_v3.html)\n* FMUv2 (STM32F4, 2013)\n  * [Pixhawk](https://docs.px4.io/main/en/flight_controller/pixhawk.html)\n\n### Manufacturer supported\n\nThese boards are maintained to be compatible with PX4-Autopilot by the Manufacturers.\n\n* [ARK Electronics ARKV6X](https://docs.px4.io/main/en/flight_controller/ark_v6x.html)\n* [CubePilot Cube Orange+](https://docs.px4.io/main/en/flight_controller/cubepilot_cube_orangeplus.html)\n* [CubePilot Cube Orange](https://docs.px4.io/main/en/flight_controller/cubepilot_cube_orange.html)\n* [CubePilot Cube Yellow](https://docs.px4.io/main/en/flight_controller/cubepilot_cube_yellow.html)\n* [Holybro Durandal](https://docs.px4.io/main/en/flight_controller/durandal.html)\n* [Airmind MindPX V2.8](http://www.mindpx.net/assets/accessories/UserGuide_MindPX.pdf)\n* [Airmind MindRacer V1.2](http://mindpx.net/assets/accessories/mindracer_user_guide_v1.2.pdf)\n* [Holybro Kakute F7](https://docs.px4.io/main/en/flight_controller/kakutef7.html)\n\n### Community supported\n\nThese boards don't fully comply industry standards, and thus is solely maintained by the PX4 public community members.\n\n### Experimental\n\nThese boards are not maintained by PX4 team nor Manufacturer, and is not guaranteed to be compatible with up to date PX4 releases.\n\n* [Raspberry PI with Navio 2](https://docs.px4.io/main/en/flight_controller/raspberry_pi_navio2.html)\n* [Bitcraze Crazyflie 2.0](https://docs.px4.io/main/en/complete_vehicles/crazyflie2.html)\n\n## Project Roadmap\n\n**Note: Outdated**\n\nA high level project roadmap is available [here](https://github.com/orgs/PX4/projects/25).\n\n## Project Governance\n\nThe PX4 Autopilot project including all of its trademarks is hosted under [Dronecode](https://www.dronecode.org/), part of the Linux Foundation.\n\n<a href=\"https://www.dronecode.org/\" style=\"padding:20px\" ><img src=\"https://mavlink.io/assets/site/logo_dronecode.png\" alt=\"Dronecode Logo\" width=\"110px\"/></a>\n<a href=\"https://www.linuxfoundation.org/projects\" style=\"padding:20px;\"><img src=\"https://mavlink.io/assets/site/logo_linux_foundation.png\" alt=\"Linux Foundation Logo\" width=\"80px\" /></a>\n<div style=\"padding:10px\">&nbsp;</div>\n"
        },
        {
          "name": "ROMFS",
          "type": "tree",
          "content": null
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.0849609375,
          "content": "# Security Policy\n\n## Supported Versions\n\nThe following is a list of versions the development team is currently supporting.\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 1.4.x   | :white_check_mark: |\n| 1.3.3   | :white_check_mark: |\n| < 1.3   | :x:                |\n\n## Reporting a Vulnerability\n\nWe currently only receive security vulnerability reports through GitHub.\n\nTo begin a report, please go to the top-level repository, for example, PX4/PX4-Autopilot,\nand click on the Security tab. If you are on mobile, click the ... dropdown menu, and then click Security.\n\nClick Report a Vulnerability to open the advisory form. Fill in the advisory details form.\nMake sure your title is descriptive, and the development team can find all of the relevant details needed\nto verify on the description box. We recommend you add as much data as possible. We welcome logs,\nscreenshots, photos, and videos, anything that can help us verify and identify the issues being reported.\n\nAt the bottom of the form, click Submit report. The maintainer team will be notified and will get back to you ASAP.\n"
        },
        {
          "name": "Tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "boards",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "integrationtests",
          "type": "tree",
          "content": null
        },
        {
          "name": "launch",
          "type": "tree",
          "content": null
        },
        {
          "name": "msg",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.xml",
          "type": "blob",
          "size": 0.7685546875,
          "content": "<?xml version=\"1.0\"?>\n<?xml-model href=\"http://download.ros.org/schema/package_format3.xsd\" schematypens=\"http://www.w3.org/2001/XMLSchema\"?>\n<package format=\"3\">\n  <name>px4</name>\n  <version>1.14.0</version>\n  <description>PX4 Autopilot</description>\n  <maintainer email=\"daniel@agar.ca\">dagar</maintainer>\n  <license>BSD 3</license>\n\n  <build_depend>rosidl_default_generators</build_depend>\n\n  <buildtool_depend>ament_cmake</buildtool_depend>\n\n  <depend>rclcpp</depend>\n  <depend>std_msgs</depend>\n\n  <exec_depend>rosidl_default_runtime</exec_depend>\n\n  <member_of_group>rosidl_interface_packages</member_of_group>\n\n  <test_depend>ament_lint_auto</test_depend>\n  <test_depend>ament_lint_common</test_depend>\n\n  <export>\n    <build_type>ament_cmake</build_type>\n  </export>\n</package>\n"
        },
        {
          "name": "platforms",
          "type": "tree",
          "content": null
        },
        {
          "name": "posix-configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "srv",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_data",
          "type": "tree",
          "content": null
        },
        {
          "name": "validation",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}