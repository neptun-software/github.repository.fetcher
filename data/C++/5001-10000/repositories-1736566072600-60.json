{
  "metadata": {
    "timestamp": 1736566072600,
    "page": 60,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tstack/lnav",
      "stars": 8246,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 0.2568359375,
          "content": "freebsd_instance:\n  image_family: freebsd-13-2\ntask:\n  install_script: pkg install -y wget git m4 bash autoconf automake sqlite3 gmake curl libarchive pcre2 bzip2\n  build_script: ./autogen.sh && ./configure && gmake -j3\n  binaries_artifacts:\n    path: \"src/lnav\"\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 4.6162109375,
          "content": "---\nLanguage: Cpp\n# BasedOnStyle: Chromium\nAccessModifierOffset: -4\nAlignAfterOpenBracket: Align\nAlignConsecutiveMacros: Consecutive\nAlignConsecutiveAssignments: None\nAlignConsecutiveBitFields: None\nAlignConsecutiveDeclarations: None\nAlignEscapedNewlines: DontAlign\nAlignOperands: DontAlign\nAlignTrailingComments: false\nAllowAllArgumentsOnNextLine: true\nAllowAllConstructorInitializersOnNextLine: false\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortEnumsOnASingleLine: false\nAllowShortBlocksOnASingleLine: Empty\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Inline\nAllowShortLambdasOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLoopsOnASingleLine: false\n# AlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: TopLevelDefinitions\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: false\nBinPackParameters: false\nBraceWrapping:\n  AfterCaseLabel: false\n  AfterClass: false\n  AfterControlStatement: MultiLine\n  AfterEnum: false\n  AfterFunction: true\n  AfterNamespace: false\n  AfterObjCDeclaration: false\n  AfterStruct: false\n  AfterUnion: false\n  AfterExternBlock: true\n  BeforeCatch: false\n  BeforeElse: false\n  BeforeLambdaBody: false\n  BeforeWhile: false\n  IndentBraces: false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: All\nBreakBeforeBraces: Custom\n# BreakBeforeInheritanceComma: true\nBreakInheritanceList: BeforeComma\nBreakBeforeTernaryOperators: true\n# BreakConstructorInitializersBeforeComma: true\nBreakConstructorInitializers: BeforeColon\nBreakAfterJavaFieldAnnotations: true\nBreakStringLiterals: true\nColumnLimit: 80\nCommentPragmas: '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDeriveLineEnding: false\nDerivePointerAlignment: false\nDisableFormat: false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeBlocks: Regroup\nIncludeCategories:\n  # Standard library headers come before anything else\n  - Regex: '^<[a-z_]+>'\n    Priority: -1\n  - Regex: '^<.+\\.h(pp)?>'\n    Priority: 1\n  - Regex: '^<.*'\n    Priority: 2\n  - Regex: '.*'\n    Priority: 3\nIncludeIsMainRegex: ''\nIncludeIsMainSourceRegex: ''\nIndentCaseLabels: true\nIndentCaseBlocks: false\nIndentGotoLabels: true\nIndentPPDirectives: AfterHash\nIndentExternBlock: NoIndent\nIndentWidth: 4\nIndentWrappedFunctionNames: false\nInsertTrailingCommas: Wrapped\nJavaScriptQuotes: Double\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd: ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBinPackProtocolList: Never\nObjCBlockIndentWidth: 4\nObjCBreakBeforeNestedBlockParam: true\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 4\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\nRawStringFormats:\n  - Language: Cpp\n    Delimiters:\n      - cc\n      - CC\n      - cpp\n      - Cpp\n      - CPP\n      - 'c++'\n      - 'C++'\n    CanonicalDelimiter: ''\n    BasedOnStyle: google\n  - Language: TextProto\n    Delimiters:\n      - pb\n      - PB\n      - proto\n      - PROTO\n    EnclosingFunctions:\n      - EqualsProto\n      - EquivToProto\n      - PARSE_PARTIAL_TEXT_PROTO\n      - PARSE_TEST_PROTO\n      - PARSE_TEXT_PROTO\n      - ParseTextOrDie\n      - ParseTextProtoOrDie\n      - ParseTestProto\n      - ParsePartialTestProto\n    CanonicalDelimiter: ''\n    BasedOnStyle: google\nReflowComments: true\nSortIncludes: CaseInsensitive\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: true\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatementsExceptForEachMacros\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyBlock: false\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles: Never\nSpacesInConditionalStatement: false\nSpacesInContainerLiterals: false\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nSpaceBeforeSquareBrackets: false\nStandard: Auto\nStatementMacros:\n  - Q_UNUSED\n  - QT_REQUIRE_VERSION\nTabWidth: 8\nUseCRLF: false\nUseTab: Never\nWhitespaceSensitiveMacros:\n  - STRINGIZE\n  - PP_STRINGIZE\n  - BOOST_PP_STRINGIZE\n...\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 6.32421875,
          "content": "---\n# Enable ALL the things! Except not really\n# misc-non-private-member-variables-in-classes: the options don't do anything\nChecks: >\n  *,\n  -google-readability-todo,\n  -altera-unroll-loops,\n  -altera-id-dependent-backward-branch,\n  -altera-struct-pack-align,\n  -fuchsia-*,\n  fuchsia-multiple-inheritance,\n  -llvm-header-guard,\n  -llvm-include-order,\n  -llvmlibc-*,\n  -modernize-use-trailing-return-type,\n  -misc-non-private-member-variables-in-classes,\n  -cppcoreguidelines-pro-type-vararg,\n  -hicpp-vararg,\n  -cppcoreguidelines-avoid-c-arrays,\n  -hicpp-avoid-c-arrays,\n  -modernize-avoid-c-arrays\nWarningsAsErrors: ''\nCheckOptions:\n  - key: 'bugprone-argument-comment.StrictMode'\n    value: 'true'\n# Prefer using enum classes with 2 values for parameters instead of bools\n  - key: 'bugprone-argument-comment.CommentBoolLiterals'\n    value: 'true'\n  - key: 'bugprone-misplaced-widening-cast.CheckImplicitCasts'\n    value: 'true'\n  - key: 'bugprone-sizeof-expression.WarnOnSizeOfIntegerExpression'\n    value: 'true'\n  - key: 'bugprone-suspicious-string-compare.WarnOnLogicalNotComparison'\n    value: 'true'\n  - key: 'readability-simplify-boolean-expr.ChainedConditionalReturn'\n    value: 'true'\n  - key: 'readability-simplify-boolean-expr.ChainedConditionalAssignment'\n    value: 'true'\n  - key: 'readability-uniqueptr-delete-release.PreferResetCall'\n    value: 'true'\n  - key: 'cppcoreguidelines-init-variables.MathHeader'\n    value: '<cmath>'\n  - key: 'cppcoreguidelines-narrowing-conversions.PedanticMode'\n    value: 'true'\n  - key: 'readability-else-after-return.WarnOnUnfixable'\n    value: 'true'\n  - key: 'readability-else-after-return.WarnOnConditionVariables'\n    value: 'true'\n  - key: 'readability-inconsistent-declaration-parameter-name.Strict'\n    value: 'true'\n  - key: 'readability-qualified-auto.AddConstToQualified'\n    value: 'true'\n  - key: 'readability-redundant-access-specifiers.CheckFirstDeclaration'\n    value: 'true'\n# These seem to be the most common identifier styles\n  - key: 'readability-identifier-naming.AbstractClassCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ClassCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ClassConstantCase'\n    value: 'UPPER_CASE'\n  - key: 'readability-identifier-naming.ClassMemberCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ClassMethodCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ConstantCase'\n    value: 'UPPER_CASE'\n  - key: 'readability-identifier-naming.ConstantMemberCase'\n    value: 'UPPER_CASE'\n  - key: 'readability-identifier-naming.ConstantParameterCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ConstantPointerParameterCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ConstexprFunctionCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ConstexprMethodCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ConstexprVariableCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.EnumCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.EnumConstantCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.FunctionCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.GlobalConstantCase'\n    value: 'UPPER_CASE'\n  - key: 'readability-identifier-naming.GlobalConstantPointerCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.GlobalFunctionCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.GlobalPointerCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.GlobalVariableCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.InlineNamespaceCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.LocalConstantCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.LocalConstantPointerCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.LocalPointerCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.LocalVariableCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.MacroDefinitionCase'\n    value: 'UPPER_CASE'\n  - key: 'readability-identifier-naming.MemberCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.MethodCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.NamespaceCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ParameterCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ParameterPackCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.PointerParameterCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.PrivateMemberCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.PrivateMethodCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ProtectedMemberCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ProtectedMethodCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.PublicMemberCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.PublicMethodCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ScopedEnumConstantCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.StaticConstantCase'\n    value: 'UPPER_CASE'\n  - key: 'readability-identifier-naming.StaticVariableCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.StructCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.TemplateParameterCase'\n    value: 'CamelCase'\n  - key: 'readability-identifier-naming.TemplateTemplateParameterCase'\n    value: 'CamelCase'\n  - key: 'readability-identifier-naming.TypeAliasCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.TypedefCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.TypeTemplateParameterCase'\n    value: 'CamelCase'\n  - key: 'readability-identifier-naming.UnionCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ValueTemplateParameterCase'\n    value: 'CamelCase'\n  - key: 'readability-identifier-naming.VariableCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.VirtualMethodCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-length.MinimumVariableNameLength'\n    value: '2'\n  - key: 'readability-identifier-length.MinimumParameterNameLength'\n    value: '2'\n  - key: 'cppcoreguidelines-avoid-do-while.IgnoreMacros'\n    value: 'true'\n...\n"
        },
        {
          "name": ".codespellrc",
          "type": "blob",
          "size": 0.15234375,
          "content": "[codespell]\nbuiltin = clear,rare,en-GB_to_en-US,names,informal,code\ncheck-filenames =\ncheck-hidden =\nskip = */.git,*/build,*/prefix,*/conan\nquiet-level = 2\n"
        },
        {
          "name": ".coveralls.yml",
          "type": "blob",
          "size": 0.029296875,
          "content": "service_name: github-actions\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.6474609375,
          "content": ".deps\n.lnav\n.DS_Store\n*.dat\n*.diff\ntest/*.err\n*.index\n*.log\n*.o\n*.obj\n*.pyc\n*.tmp\n*.trs\n*~\n.idea/\nMakefile\nMakefile.in\nTESTS_ENVIRONMENT\naclocal.m4\naminclude_static.am\nar-lib\nautom4te.cache\ncompile\nconfig.guess\nconfig.log\nconfig.status\nconfig.sub\nconfigure\ndepcomp\ninstall-sh\nmissing\nmkinstalldirs\ntest-driver\ndocs/build\nrelease/lnav.spec\nrelease/release-NEWS.md\nrelease/linux-pkg/\nrelease/osx-build-dir/\nrelease/osx-pkg/\nrelease/outbox/\nrelease/vagrant-static-linux/.vagrant\nrelease/vagrant-static-linux/lnav\ncmake-build-debug/\nsrc/bin2c\nsrc/config.h\nsrc/config.h.in\nsrc/default-config-json.c\nsrc/default-log-formats-json.c\nsrc/dump-pid-sh.c\nsrc/help.c\nsrc/init-sql.c\nsrc/libdiag.a\nsrc/lnav\nsrc/lnav-test\nsrc/ptimec\nsrc/spookyhash/.dirstamp\nsrc/stamp-h1\nsrc/static-libs/\nsrc/time_fmts.cc\nsrc/yajl/.dirstamp\ntest/drive_data_scanner\ntest/drive_grep_proc\ntest/drive_json_op\ntest/drive_json_ptr_walk\ntest/drive_line_buffer\ntest/drive_listview\ntest/drive_logfile\ntest/drive_mvwattrline\ntest/drive_readline_curses\ntest/drive_sequencer\ntest/drive_sql\ntest/drive_view_colors\ntest/drive_vt52_curses\ntest/logfile_append.0\ntest/logfile_syslog.1.bz2\ntest/logfile_syslog.1.gz\ntest/scanned.dpt\ntest/scripty\ntest/simple-db.db\ntest/slicer\ntest/test_ansi_scrubber\ntest/test_auto_fd\ntest/test_auto_mem\ntest/test_bookmarks\ntest/test_chunky_index\ntest/test_concise\ntest/test_date_time_scanner\ntest/test_grep_proc2\ntest/test_hist_source\ntest/test_json_ptr\ntest/test_line_buffer2\ntest/test_log_accel\ntest/test_pcrepp\ntest/test_top_status\ntest/test_yajlpp\ntest/truncfile.0\ncmake-build/\n.vs/\n.vscode/\nbuild/\ncmake/open-cpp-coverage.cmake\ncmake-build-*/\nconan/\nprefix/\nCMakeLists.txt.user\nCMakeUserPresets.json\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.103515625,
          "content": "[submodule \"ext/pcapplusplus\"]\n\tpath = ext/pcapplusplus\n\turl = https://github.com/seladb/PcapPlusPlus.git\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.5283203125,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\nbuild:\n  os: \"ubuntu-22.04\"\n  tools:\n    python: \"3.11\"\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: docs/source/conf.py\n\n# Optionally build your docs in additional formats such as PDF\nformats:\n  - pdf\n\n# Optionally set the version of Python and requirements required to build your docs\npython:\n  install:\n    - requirements: docs/requirements.txt\n"
        },
        {
          "name": "ARCHITECTURE.md",
          "type": "blob",
          "size": 5.30078125,
          "content": "# Architecture\n\nThis document covers the internal architecture of the Logfile Navigator (lnav),\na terminal-based tool for viewing and analyzing log files.\n\n## Goals\n\nThe following goals drive the design and implementation of lnav:\n\n- Don't make the user do something that can be done automatically.\n\n  Example: Automatically detect log formats for files instead of making them\n  specify the format for each file.\n\n- Be performant on low-spec hardware.\n\n  Example: Prefer single-threaded optimizations over trying to parallelize\n\n- Operations should be \"live\" and not block the user from continuing to work.\n\n  Example: Searches are run in the background.\n\n- Provide context-sensitive help.\n\n  Example: When the cursor is over a SQL keyword/function, the help text for\n  that is shown above.\n\n- Show a preview of operations so the user knows what is going to happen.\n\n  Example: When entering a `:filter-out` command, the matched parts of the\n  lines are highlighted in red.\n\n## Overview\n\nThe whole of lnav consists of a\n[log file parser](https://docs.lnav.org/en/latest/formats.html),\n[text UI](https://docs.lnav.org/en/latest/ui.html),\n[integrations with SQLite](https://docs.lnav.org/en/latest/sqlext.html),\n[command-line interface](https://docs.lnav.org/en/latest/cli.html), and\n[commands for operating on logs](https://docs.lnav.org/en/latest/commands.html).\nSince the majority of lnav's operations center around logs, the core\ndata-structure is the combined log message index. The message index is populated\nwhen new messages are read from log files. The text UI displays a subset of\nmessages from the index. The SQLite virtual-tables allow for programmatic access\nto the messages and lnav's internal state.\n\n[![lnav architecture](docs/lnav-architecture.png)](https://whimsical.com/lnav-architecture-UM594Qo4G3nt2XWaSZA1mh)\n\n## File Monitoring\n\nEach file being monitored by lnav has an associated [`logfile`](src/logfile.hh)\nobject, be they plaintext files or files with a recognized format.  These\nobjects are periodically polled by the main event loop to check if the file\nwas deleted, truncated, or new lines added.  While reading new lines, if no\nlog format has matched yet, each line will be passed through the log format\nregular expressions to try and find a match.  Each line that is read is added\nto an index\n\n#### Why is `mmap()` not used?\n\nNote that file contents are consumed using `pread(2)`/`read(2)` and not\n`mmap(2)` since `mmap(2)` does not react well to files changing out from\nunderneath it.  For example, a truncated file would likely result in a\n`SIGBUS`.\n\n## Log Messages\n\nAs files are being indexed, if a matching format is found, the file is\n\"promoted\" from a plaintext file to a log file.  When the file is promoted,\nit is added to the [logfile_sub_source](src/logfile_sub_source.hh), which\ncollates all log messages together into a single index.\n\n### Timestamp Parsing\n\nSince all log messages need to have a timestamp, timestamp parsing needs to be\nvery efficient.  The standard `strptime()` function is quite expensive, so lnav\nincludes an optimized custom parser and code-generator in the\n[ptimec](src/ptimec.hh) component.  The code-generator is used at compile-time\nto generate parsers for several [common formats](src/time_formats.am).\n\n## Log Formats\n\n[log_format](src/log_format.hh) instances are used to parse lines from files\ninto `logline` objects. The majority of log formats are\n[external_log_format](src/log_format_ext.hh) objects that are create from\n[JSON format definitions](https://docs.lnav.org/en/latest/formats.html). The\nbuilt-in definitions are located in the [formats](src/formats) directory. Log\nformats that cannot be handled through a simple regular expression are\nimplemented in the [log_format_impls.cc](src/log_format_impls.cc) file.\n\n## User Interface\n\nThe lnav text-user-interface is built on top of\n[ncurses](https://invisible-island.net/ncurses/announce.html).\nHowever, the higher-level functionality of panels, widgets, and such is not\nused.  Instead, the following custom components are built on top of the ncurses\nprimitives:\n\n- [view_curses](src/view_curses.hh) - Provides the basics for text roles, which\n  allows for themes to color and style text. The `mvwattrline()` function does\n  all the heavy lifting of drawing [\"attributed\" lines](src/base/attr_line.hh),\n  which are strings that have attributes associated with a given range of\n  characters.\n- [listview_curses](src/listview_curses.hh) - Displays a list of items that are\n  provided by a source.\n- [textview_curses](src/textview_curses.hh) - Builds on the list view by adding\n  support for searching, filtering, bookmarks, etc...  The main panel that\n  displays the logs/plaintext/help is a textview.\n- [statusview_curses](src/state-extension-functions.cc) - Draws the status bars\n  at the top and bottom of the TUI.\n- [vt52_curses](src/vt52_curses.hh) - Adapts vt52 escape codes to the ncurses\n  API.\n- [readline_curses](src/readline_curses.hh) - Provides access to the readline\n  library.  The readline code is executed in a child process since readline\n  does not get along with ncurses.  The child process and readline is set to\n  use a vt52 terminal and the vt52_curses view is uses to translate those\n  escape codes to ncurses.\n\nThe following diagram shows the underlying components that make up the TUI:\n\n[![lnav TUI](docs/lnav-tui.png)](https://whimsical.com/lnav-tui-MQjXc7Vx23BxQTHrnuNp5F)\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.71875,
          "content": "\nPrimary Author\n--------------\n\nTimothy Stack (timothyshanestack@gmail.com)\n\nContributors\n------------\n\nSuresh Sundriyal (sureshsundriyal@gmail.com)\nMatt Dordal (matt@dordal.org)\nChristopher Meng\nSalvatore Bonaccorso\nHenrietta Stack\nPablo Iranzo Gómez\nBrian Cain\nPaul Wayper\nAdam Spiers\nKevin Pham\nEli Young\nVictor Hooi\nMichael Bouvy\nSantiago Agüero\nBenny Zlotnik\nThomas Hurst\nJustin Berger\nJan Chren\nGeoff Crompton\nMedina Maza\nPhil Hord\nTristan Ramseyer\nAurélien Rouëné\nEmiliano Bonassi\nDarragh O'Reilly\nStéphane Blondon\nMiguel Terron\nEnguerrand de Rochefort\nNicolas Werner\nMatt Hayden\nSimos Xenitellis\nFinnegan Stack\nAmos Bird\nCristian Chiru\nPeter Schiffer\nPedro Pombeiro\nFlorian Münchbach\nFredrik Forséll\nTobias Gruetzmacher\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.421875,
          "content": "cmake_minimum_required(VERSION 3.14)\n\ninclude(cmake/prelude.cmake)\n\nset(CMAKE_CXX_STANDARD 17)\nproject(\n        lnav\n        VERSION 0.12.3\n        DESCRIPTION \"An advanced log file viewer for the terminal.\"\n        HOMEPAGE_URL \"https://lnav.org/\"\n        LANGUAGES CXX C\n)\n\ninclude(cmake/project-is-top-level.cmake)\ninclude(cmake/variables.cmake)\n\nset(CURSES_NEED_NCURSES TRUE)\nfind_package(PkgConfig REQUIRED)\nfind_package(unofficial-sqlite3 CONFIG REQUIRED)\nfind_package(BZip2 REQUIRED)\nfind_package(LibArchive REQUIRED)\nfind_package(ZLIB REQUIRED)\nfind_package(pcre2 CONFIG REQUIRED)\npkg_check_modules(readline REQUIRED IMPORTED_TARGET readline)\nfind_package(Curses REQUIRED)\nfind_package(CURL REQUIRED)\n\nset(lnav_LIBS\n        CURL::libcurl\n        unofficial::sqlite3::sqlite3\n        BZip2::BZip2\n        ${CURSES_LIBRARIES}\n        PCRE2::8BIT PCRE2::16BIT PCRE2::32BIT PCRE2::POSIX\n        PkgConfig::readline\n        LibArchive::LibArchive\n        ZLIB::ZLIB\n        ${VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/lib/libunistring.a\n)\n\nadd_subdirectory(src)\nadd_subdirectory(test)\n\n# ---- Install rules ----\n\nif (NOT CMAKE_SKIP_INSTALL_RULES)\n    include(cmake/install-rules.cmake)\nendif ()\n\n# ---- Developer mode ----\n\nif (NOT lnav_DEVELOPER_MODE)\n    return()\nelseif (NOT PROJECT_IS_TOP_LEVEL)\n    message(\n            AUTHOR_WARNING\n            \"Developer mode is intended for developers of lnav\"\n    )\nendif ()\n\ninclude(cmake/dev-mode.cmake)\n"
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 0.314453125,
          "content": "{\n    \"version\": 2,\n    \"configurePresets\": [\n        {\n            \"name\": \"vcpkg\",\n            \"generator\": \"Ninja\",\n            \"binaryDir\": \"${sourceDir}/build\",\n            \"cacheVariables\": {\n                \"CMAKE_TOOLCHAIN_FILE\": \"$env{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake\"\n            }\n        }\n    ]\n}\n"
        },
        {
          "name": "CMakeUserPresets.json.example",
          "type": "blob",
          "size": 1.2314453125,
          "content": "{\n  \"version\": 2,\n  \"cmakeMinimumRequired\": {\n    \"major\": 3,\n    \"minor\": 14,\n    \"patch\": 0\n  },\n  \"configurePresets\": [\n    {\n      \"name\": \"dev-common\",\n      \"hidden\": true,\n      \"inherits\": [\"conan\"],\n      \"cacheVariables\": {\n        \"BUILD_MCSS_DOCS\": \"ON\"\n      }\n    },\n    {\n      \"name\": \"dev-unix\",\n      \"binaryDir\": \"${sourceDir}/build/dev-unix\",\n      \"inherits\": [\"dev-common\", \"ci-unix\", \"dev-mode\"],\n      \"cacheVariables\": {\n        \"CMAKE_BUILD_TYPE\": \"Debug\"\n      }\n    },\n    {\n      \"name\": \"dev-win64\",\n      \"binaryDir\": \"${sourceDir}/build/dev-win64\",\n      \"inherits\": [\"dev-common\", \"ci-win64\"]\n    },\n    {\n      \"name\": \"dev\",\n      \"binaryDir\": \"${sourceDir}/build/dev\",\n      \"inherits\": \"dev-unix\"\n    },\n    {\n      \"name\": \"dev-coverage\",\n      \"binaryDir\": \"${sourceDir}/build/coverage\",\n      \"inherits\": [\"dev-mode\", \"coverage-unix\", \"conan\"]\n    }\n  ],\n  \"buildPresets\": [\n    {\n      \"name\": \"dev\",\n      \"configurePreset\": \"dev\",\n      \"configuration\": \"Debug\",\n      \"jobs\": 4\n    }\n  ],\n  \"testPresets\": [\n    {\n      \"name\": \"dev\",\n      \"configurePreset\": \"dev\",\n      \"configuration\": \"Debug\",\n      \"output\": {\n        \"outputOnFailure\": true\n      },\n      \"execution\": {\n        \"jobs\": 4\n      }\n    }\n  ]\n}\n"
        },
        {
          "name": "FUNDING.yml",
          "type": "blob",
          "size": 0.0615234375,
          "content": "# These are supported funding model platforms\ngithub: [tstack]\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 9.01953125,
          "content": "Copyright 1994, 1995, 1996, 1999, 2000, 2001, 2002 Free Software\nFoundation, Inc.\n\n   This file is free documentation; the Free Software Foundation gives\nunlimited permission to copy, distribute and modify it.\n\nBasic Installation\n==================\n\n   These are generic installation instructions.\n\n   The `configure' shell script attempts to guess correct values for\nvarious system-dependent variables used during compilation.  It uses\nthose values to create a `Makefile' in each directory of the package.\nIt may also create one or more `.h' files containing system-dependent\ndefinitions.  Finally, it creates a shell script `config.status' that\nyou can run in the future to recreate the current configuration, and a\nfile `config.log' containing compiler output (useful mainly for\ndebugging `configure').\n\n   It can also use an optional file (typically called `config.cache'\nand enabled with `--cache-file=config.cache' or simply `-C') that saves\nthe results of its tests to speed up reconfiguring.  (Caching is\ndisabled by default to prevent problems with accidental use of stale\ncache files.)\n\n   If you need to do unusual things to compile the package, please try\nto figure out how `configure' could check whether to do them, and mail\ndiffs or instructions to the address given in the `README' so they can\nbe considered for the next release.  If you are using the cache, and at\nsome point `config.cache' contains results you don't want to keep, you\nmay remove or edit it.\n\n   The file `configure.ac' (or `configure.in') is used to create\n`configure' by a program called `autoconf'.  You only need\n`configure.ac' if you want to change it or regenerate `configure' using\na newer version of `autoconf'.\n\nThe simplest way to compile this package is:\n\n  1. `cd' to the directory containing the package's source code and type\n     `./configure' to configure the package for your system.  If you're\n     using `csh' on an old version of System V, you might need to type\n     `sh ./configure' instead to prevent `csh' from trying to execute\n     `configure' itself.\n\n     Running `configure' takes awhile.  While running, it prints some\n     messages telling which features it is checking for.\n\n  2. Type `make' to compile the package.\n\n  3. Optionally, type `make check' to run any self-tests that come with\n     the package.\n\n  4. Type `make install' to install the programs and any data files and\n     documentation.\n\n  5. You can remove the program binaries and object files from the\n     source code directory by typing `make clean'.  To also remove the\n     files that `configure' created (so you can compile the package for\n     a different kind of computer), type `make distclean'.  There is\n     also a `make maintainer-clean' target, but that is intended mainly\n     for the package's developers.  If you use it, you may have to get\n     all sorts of other programs in order to regenerate files that came\n     with the distribution.\n\nCompilers and Options\n=====================\n\n   Some systems require unusual options for compilation or linking that\nthe `configure' script does not know about.  Run `./configure --help'\nfor details on some of the pertinent environment variables.\n\n   You can give `configure' initial values for configuration parameters\nby setting variables in the command line or in the environment.  Here\nis an example:\n\n     ./configure CC=c89 CFLAGS=-O2 LIBS=-lposix\n\n   *Note Defining Variables::, for more details.\n\nCompiling For Multiple Architectures\n====================================\n\n   You can compile the package for more than one kind of computer at the\nsame time, by placing the object files for each architecture in their\nown directory.  To do this, you must use a version of `make' that\nsupports the `VPATH' variable, such as GNU `make'.  `cd' to the\ndirectory where you want the object files and executables to go and run\nthe `configure' script.  `configure' automatically checks for the\nsource code in the directory that `configure' is in and in `..'.\n\n   If you have to use a `make' that does not support the `VPATH'\nvariable, you have to compile the package for one architecture at a\ntime in the source code directory.  After you have installed the\npackage for one architecture, use `make distclean' before reconfiguring\nfor another architecture.\n\nInstallation Names\n==================\n\n   By default, `make install' will install the package's files in\n`/usr/local/bin', `/usr/local/man', etc.  You can specify an\ninstallation prefix other than `/usr/local' by giving `configure' the\noption `--prefix=PATH'.\n\n   You can specify separate installation prefixes for\narchitecture-specific files and architecture-independent files.  If you\ngive `configure' the option `--exec-prefix=PATH', the package will use\nPATH as the prefix for installing programs and libraries.\nDocumentation and other data files will still use the regular prefix.\n\n   In addition, if you use an unusual directory layout you can give\noptions like `--bindir=PATH' to specify different values for particular\nkinds of files.  Run `configure --help' for a list of the directories\nyou can set and what kinds of files go in them.\n\n   If the package supports it, you can cause programs to be installed\nwith an extra prefix or suffix on their names by giving `configure' the\noption `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.\n\nOptional Features\n=================\n\n   Some packages pay attention to `--enable-FEATURE' options to\n`configure', where FEATURE indicates an optional part of the package.\nThey may also pay attention to `--with-PACKAGE' options, where PACKAGE\nis something like `gnu-as' or `x' (for the X Window System).  The\n`README' should mention any `--enable-' and `--with-' options that the\npackage recognizes.\n\n   For packages that use the X Window System, `configure' can usually\nfind the X include and library files automatically, but if it doesn't,\nyou can use the `configure' options `--x-includes=DIR' and\n`--x-libraries=DIR' to specify their locations.\n\nSpecifying the System Type\n==========================\n\n   There may be some features `configure' cannot figure out\nautomatically, but needs to determine by the type of machine the package\nwill run on.  Usually, assuming the package is built to be run on the\n_same_ architectures, `configure' can figure that out, but if it prints\na message saying it cannot guess the machine type, give it the\n`--build=TYPE' option.  TYPE can either be a short name for the system\ntype, such as `sun4', or a canonical name which has the form:\n\n     CPU-COMPANY-SYSTEM\n\nwhere SYSTEM can have one of these forms:\n\n     OS KERNEL-OS\n\n   See the file `config.sub' for the possible values of each field.  If\n`config.sub' isn't included in this package, then this package doesn't\nneed to know the machine type.\n\n   If you are _building_ compiler tools for cross-compiling, you should\nuse the `--target=TYPE' option to select the type of system they will\nproduce code for.\n\n   If you want to _use_ a cross compiler, that generates code for a\nplatform different from the build platform, you should specify the\n\"host\" platform (i.e., that on which the generated programs will\neventually be run) with `--host=TYPE'.\n\nSharing Defaults\n================\n\n   If you want to set default values for `configure' scripts to share,\nyou can create a site shell script called `config.site' that gives\ndefault values for variables like `CC', `cache_file', and `prefix'.\n`configure' looks for `PREFIX/share/config.site' if it exists, then\n`PREFIX/etc/config.site' if it exists.  Or, you can set the\n`CONFIG_SITE' environment variable to the location of the site script.\nA warning: not all `configure' scripts look for a site script.\n\nDefining Variables\n==================\n\n   Variables not defined in a site shell script can be set in the\nenvironment passed to `configure'.  However, some packages may run\nconfigure again during the build, and the customized values of these\nvariables may be lost.  In order to avoid this problem, you should set\nthem in the `configure' command line, using `VAR=value'.  For example:\n\n     ./configure CC=/usr/local2/bin/gcc\n\nwill cause the specified gcc to be used as the C compiler (unless it is\noverridden in the site shell script).\n\n`configure' Invocation\n======================\n\n   `configure' recognizes the following options to control how it\noperates.\n\n`--help'\n`-h'\n     Print a summary of the options to `configure', and exit.\n\n`--version'\n`-V'\n     Print the version of Autoconf used to generate the `configure'\n     script, and exit.\n\n`--cache-file=FILE'\n     Enable the cache: use and save the results of the tests in FILE,\n     traditionally `config.cache'.  FILE defaults to `/dev/null' to\n     disable caching.\n\n`--config-cache'\n`-C'\n     Alias for `--cache-file=config.cache'.\n\n`--quiet'\n`--silent'\n`-q'\n     Do not print messages saying which checks are being made.  To\n     suppress all normal output, redirect it to `/dev/null' (any error\n     messages will still be shown).\n\n`--srcdir=DIR'\n     Look for the package's source code in directory DIR.  Usually\n     `configure' can determine that directory automatically.\n\n`configure' also accepts some other, not widely useful, options.  Run\n`configure --help' for more details.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.2939453125,
          "content": "Copyright (c) 2009-2025, Timothy Stack\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without \nmodification, are permitted provided that the following conditions are \nmet:\n\n  * Redistributions of source code must retain the above copyright \n    notice, this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright \n    notice, this list of conditions and the following disclaimer in the \n    documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS \nIS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED \nTO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A \nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED \nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR \nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF \nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING \nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS \nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 0.533203125,
          "content": "\nACLOCAL_AMFLAGS = -I .\n\nSUBDIRS = tools src test\n\nnoinst_SCRIPTS = TESTS_ENVIRONMENT\n\ndist_man_MANS = lnav.1\n\nEXTRA_DIST = \\\n    docs/lnav-architecture.png \\\n    docs/lnav-tui.png \\\n    docs/schemas/config-v1.schema.json \\\n    docs/schemas/event-file-format-detected-v1.schema.json \\\n    docs/schemas/event-file-open-v1.schema.json \\\n    docs/schemas/event-log-msg-detected-v1.schema.json \\\n    docs/schemas/event-session-loaded-v1.schema.json \\\n    docs/schemas/format-v1.schema.json \\\n    ARCHITECTURE.md \\\n\tAUTHORS \\\n\tLICENSE \\\n    README.md\n"
        },
        {
          "name": "NEWS.md",
          "type": "blob",
          "size": 69.8896484375,
          "content": "## lnav v0.12.4\n\nFeatures:\n* Log message timestamps are now represented with microsecond\n  precision internally instead of just millisecond.\n* The `log_time` and `log_level` fields can now be hidden.\n* Added a `report-access-log` script that generates a report that\n  is similar to the output of the [goaccess](https://goaccess.io)\n  utility.\n* Scripts can now specify their output format using the\n  `@output-format:` documentation description.\n  This setting can affect the output of some commands, like\n  `:write-table-to` which will output Markdown tables when the\n  output is set to `text/markdown`.\n* Column alignment in Markdown tables is now supported.\n\nInterface changes:\n* DB query results that start with a number are right justified\n  instead of only full numbers.\n* Left-clicking a local link in a markdown document will jump to\n  that section of the document instead of opening the overlay\n  menu.\n  You can still open the overlay menu by right-clicking on the link.\n* Rows in a Markdown table are now highlighted with alternating\n  styles.\n\nBreaking changes:\n* The `parse_url()` SQL function no longer raises an error for an\n  invalid URL.\n  Instead, it will return a JSON object with an object with the\n  following properties:\n  - `error` - An identifier for the error.\n  - `url` - The invalid URL itself.\n  - `reason` - A description of the error.\n\nBug Fixes:\n* Improved startup time.\n* Reduced memory footprint.\n* Improved search performance.\n* Reduce time to open help text.\n\nMaintenance:\n* Replaced ncurses with notcurses.\n\n## lnav v0.12.3\n\nFeatures:\n* Files that contain a mixture of log messages from separate\n  services (e.g. docker logs) can now be automatically\n  de-multiplexed into separate files that lnav can digest.\n* The `log_opid` column on log vtables can now be `UPDATE`d\n  so that you can manually set an opid on log messages that\n  don't have one.  Setting an opid allows messages to show\n  up in the timeline view.\n* The Files panel now has a details view on the right side\n  that shows extra information about the selected file.\n  You can look here for details of why lnav selected a\n  particular log format.\n* Add support for GitHub Markdown Alerts.\n* Added the `:xopen` command that will open the given paths\n  using an external opener like `open` or `xdg-open`.\n* Clicking on a link in a markdown file will open the Actions\n  with the following options:\n  - opening the link target in lnav or, if it's an lnav script,\n    executing the script;\n  - opening the target with `:xopen`;\n  - or, copying the link to the clipboard.\n* Added a `crash upload` command to the management CLI that will\n  upload crash logs to a server for analysis.\n* Added a `:set-text-view-mode` command that controls whether\n  file contents, such as markdown, are rendered or shown in\n  their raw state.\n* Text files with lines longer than 1024 characters will be\n  automatically pretty-printed.  You can revert to the raw view\n  using the `:set-text-view-mode` command.  The character limit\n  can be adjusted with the\n  `/tuning/textfile/max-unformatted-line-length` configuration\n  setting.\n* Added a `pretty_print()` SQL function that provides the same\n  functionality as the PRETTY view.\n* Keymap definitions can now bind to a function key using an\n  identifier that starts with `f` followed by the number of the\n  function key.\n* Added log formats for the `env_logger` and `simple_logger` Rust\n  crates.\n* Timestamp formats can now use `%j` to capture day-of-year values.\n\nInterface Changes:\n* The \"Gantt Chart\" view has been renamed to \"timeline.\"\n* In the timeline view, pressing `ENTER` will focus on\n  the preview pane, so you can scroll through messages\n  with the selected Op ID.\n* With mouse mode enabled, `CTRL` can be used as an alternate\n  to `SHIFT` when clicking/dragging in the main view to\n  highlight lines.  A few terminals capture shift+clicks as a\n  way to select text and do not pass them to the application.\n* Clicking on an internal link in a Markdown document will move \n  to that section.\n\nBug Fixes:\n* Log messages in formats with custom timestamp formats were\n  not being converted to the local timezone.\n* The timezone offset is now shown in the parser details\n  overlay for log messages.\n* If a theme does not define `cursor-line` or `selected-text`\n  styles, the styles from the default theme will be used.\n* The first argument to a script is now the full path of the\n  script and not just the script name.\n\nMaintenance:\n* You can now do an `UPDATE` on the `lnav_top_view` SQL view.\n  This makes it easier to write queries that manipulate the\n  current view.\n* Upgrade to C++17\n\n\n## lnav v0.12.2\n\nFeatures:\n* Added mouse support that can be toggled with `F2` or enabled\n  by default with: `:config /ui/mouse/mode enabled`.  With\n  mouse support enabled, many of the UI elements will respond to\n  mouse inputs:\n  - clicking on the main view will move the cursor to the given\n    row and dragging will scroll the view as needed;\n  - shift + clicking/dragging in the main view will highlight\n    lines and then toggle their bookmark status on release;\n  - double-clicking in the main view will select the underlying \n    text and drag-selecting within a line will select the given\n    text;\n  - when double-clicking text: if the mouse pointer is inside\n    a quoted string, the contents of the string will be selected;\n    if the mouse pointer is on the quote, the quote will be included\n    in the selection; if the mouse pointer is over a bracket\n    (e.g. [],{},()) where the matching bracket is on the same line,\n    the selection will span from one bracket to the other;\n  - when text is selected, a menu will pop up that can be used\n    to filter based on the current text, search for it, or copy\n    it to the clipboard;\n  - right-clicking the start of a log message in the main view\n    will open the parser details overlay;\n  - the parser details now displays a diamond next to fields to\n    indicate whether they are shown/hidden and this can be\n    clicked to toggle the state;\n  - the parser details will show a bar chart icon for fields with\n    values which, when clicked, will open either the spectrogram\n    view for the given field or open the DB query prompt with a\n    PRQL query to generate a histogram of the field values;\n  - clicking in the scroll area will move the view by a page,\n    double-clicking will move the view to that area, and\n    dragging the scrollbar will move the view to the given spot;\n  - clicking on the breadcrumb bar will select a crumb and\n    selecting a possibility from the popup will move to that\n    location in the view;\n  - clicking on portions of the bottom status bar will trigger\n    a relevant action (e.g. clicking the line number will open\n    the command prompt with `:goto <current-line>`);\n  - clicking on the configuration panel tabs (i.e. Files/Filters)\n    will open the selected panel and clicking parts of the\n    display in there will perform the relevant action (e.g.\n    clicking the diamond will enable/disable the file/filter);\n  - clicking in a prompt will move the cursor to the location;\n  - clicking on a column in the spectrogram view will select it.\n\n  (Note that this is new work, so there are likely to be some \n  glitches.)\n* Added a `journald://` URL handler that will call `journalctl`\n  and pass any query parameters as options.  For example, the\n  following command:\n\n  ```\n  $ lnav 'journal://?since=yesterday'\n  ```\n\n  Will execute the following and capture the output:\n\n  ```\n  journalctl --output=json -f --since=yesterday\n  ```\n* Added the \"last-word\" line-format field shortening algorithm\n  from @flicus.\n* Added a `stats.hist` PRQL transform that produces a histogram\n  of values over time.\n* The preview for the `:open` command will now show a listing\n  of archive contents.\n* Added `humanize_id` SQL function that colorizes a string using\n  ANSI escape codes.\n* Added a `selected_text` column to the `lnav_views` table that\n  reports information about text that was selected with a mouse.\n  This makes it possible to script operations that use the\n  selected text as an input.\n* Added `breadcrumb` as an option to the `:prompt` command so\n  that the breadcrumb hotkey can be configured.\n\nInterface changes:\n* The bar charts in the DB view have now been moved to their\n  individual columns instead of occupying the whole width of\n  the view.  The result is much cleaner, so the charts are\n  now enabled by default again.\n* Cursor mode in the main view is now the default instead of\n  using the top line as the focus.  You can change back by\n  running:\n\n  `:config /ui/movement/mode top`\n* In the parser details panel (opened by pressing `p`), you\n  can now hide/show fields by moving the cursor line to the\n  given field and pressing the space bar or by clicking on\n  the diamond with the mouse.\n* The `sv` keymap binds `§` to focus the breadcrumb bar.\n\nBug Fixes:\n* With the recent xz backdoor shenanigans, it seems like a good\n  time to add some checks for data being hidden by escape codes:\n  - File names with escape sequences are now displayed in quotes\n    with backslash escapes.\n  - Text that has the same foreground and background colors will\n    have the background set to a contrasting color.\n* Sub-millisecond time values should now be preserved when\n  displaying JSON-lines logs.\n* A crash during initialization on Apple Silicon and MacOS 12\n  has been fixed.\n* A crash when previewing non-text files.\n* Optimized ANSI-escape processing.\n* Various fixes to make lnav usable as a `PAGER`.\n\n## lnav v0.12.1\n\nFeatures:\n* Database queries can now be written in\n  [PRQL](https://prql-lang.org).  When executing a query with `;`,\n  if the query starts with `from`, it will be treated as PRQL.\n  The pipeline structure of PRQL queries is more desirable for\n  interactive use since lnav can make better suggestions and\n  show previews of the stages of the pipeline.\n* Log partitions can automatically be created by defining a log\n  message pattern in a log format.  Under a format definition,\n  add an entry into the \"partitions\" object in a format definition.\n  The \"pattern\" property specifies the regular expression to match\n  against a line in a file that matches the format.  If a match is\n  found, the partition name will be set to the value(s) captured\n  by the regex.  To restrict matches to certain files, you can add\n  a \"paths\" array whose object elements contain a \"glob\" property\n  that will be matched against file names.\n\nInterface changes:\n* When using PRQL in the database query prompt (`;`),\n  the preview pane will show the results for the pipeline\n  stage the cursor is within along with the results of\n  the previous stage (if there is one).  The preview\n  works on a limited data set, so the preview results\n  may differ from the final results.\n* Changed the breadcrumb bar styling to space things out\n  more and make the divisions between items clearer.\n* The `ESC` key can now be used to exit the files/filters\n  configuration panel instead of `q`.  This should make\n  it easier to avoid accidentally exiting lnav.\n* Added some default help text for the command prompt.\n* Suggestions are now shown for some commands and can\n  be accepted by pressing the right arrow key.  For\n  example, after typing in `:filter-in` the current\n  search term for the view will be suggested (if\n  one is active).\n* The focused line should be preserved more reliably in\n  the LOG/TEXT views.\n* In the LOG view, the current partition name (as set\n  with the `:partition-name` command) is shown as the\n  first breadcrumb in the breadcrumb bar.  And, when\n  that breadcrumb is selected, you can select another\n  partition to jump to.\n* The `{` / `}` hotkeys, `:next-section`, and `:prev-section`\n  commands now work in the LOG view and take you to the\n  next/previous partition.\n* The DB view now defaults to not showing bar charts.\n\nBreaking changes:\n* Many of the lesser used column in the log format tables\n  (e.g. `log_tags`) have been moved to after the columns\n  defined by the format.  These columns are usually `NULL`\n  and are a distraction when previewing queries.\n\n## lnav v0.12.0\n\nFeatures:\n* Added a Gantt Chart view to visualize operations over time\n  based on the \"opid\" in log messages.  The view shows\n  the operation IDs, a description of the operation captured\n  from log messages, and a bar representing the period of\n  time that the operation was running.\n* Added the `:sh` command and `-e` option to execute a shell\n  command-line and display its output within **lnav**.   The\n  captured output will be displayed in the TEXT view.  The\n  lines from stdout and stderr are recorded separately so\n  that the lines from stderr can be shown in the theme's\n  \"error\" highlight.  The time that the lines were received\n  are also recorded internally so that the \"time-offset\"\n  display (enabled by pressing `Shift` + `T`) can be shown\n  and the \"jump to slow-down\" hotkeys (`s`/`Shift` + `S`)\n  work.  Since the line-by-line timestamps are recorded\n  internally, they will not interfere with timestamps that\n  are in the commands output.\n* Added a `:cd` command to change **lnav**'s current directory.\n* Added support for automatically converting files that are\n  in a format not natively supported by **lnav**.  The new\n  `converter` section in a log format definition allows you\n  to specify how a file type can be detected and converted.\n  The built-in PCAP support in **lnav** is implemented using\n  this mechanism.\n* Added a `shell_exec()` SQLite function that executes a\n  command-line with the user's `$SHELL` and returns the\n  output.\n* Added support for custom URL schemes that are handled by an\n  lnav script.  Schemes can be defined under\n  `/tuning/url-schemes`.  See the main docs for more details.\n* Added `docker://` and `podman://` URL schemes that can be\n  used to tail the logs for containers (e.g.\n  `docker://my-container`) or files within a container (e.g.\n  `docker://my-serv/var/log/dpkg.log`).  Containers mentioned\n  in a \"Compose\" configuration file can be tailed by using\n  `compose` as the host name with the path to the configuration\n  file (e.g. `docker://compose/compose.yaml`).\n* Added an `:annotate` command that can trigger a call-out\n  to a script to analyze a log message and generate an\n  annotation that is attached to the message.  The script\n  is executed asynchronously, so it will not block input\n  and the result is saved in the session.  Annotations are\n  defined in the `/log/annotations` configuration property.\n* Timestamps with numeric timezone offsets (or `Z`) are now\n  automatically converted to the local time zone.  For\n  example, a timestamp ending in `-03:00` will be treated\n  as three hours behind UTC and then adjusted to the local\n  timezone.  This feature can be disabled by setting the\n  `/log/date-time/convert-zoned-to-local` configuration\n  property to `false`. Timestamps without a zone or have\n  a symbolic zone name (e.g. `PDT`) are not converted.\n* Added the SQLite JSON functions to the online help.\n* Added `config get` and `config blame` management CLI\n  commands to get the current configuration and the file\n  locations where the configuration options came from.\n* When piping data into **lnav**'s stdin, the input used to\n  only be written to a single file without any rotation.\n  Now, the input is written to a directory of rotating files.\n  The same is true for the command-lines executed through the\n  new `:sh` command.  The piped data can be managed using the\n  new `piper` commands in the management CLI.\n* The `$LNAV_HOME_DIR` and `$LNAV_WORK_DIR` environment\n  variables are now defined inside **lnav** and refer to\n  the location of the user's configuration directory and\n  the directory where cached data is stored, respectively.\n* The `<pre>` and `<img>` tags are now recognized in\n  Markdown files.\n* The `style` attribute in `<span>` tags is now supported.\n  The following CSS properties and values are supported:\n  * `color` and `background-color` with CSS color names\n  * `font-weight` with a value of `bold` or `bolder`\n  * `text-decoration` with `underline`\n  * `border-left` and `border-right` with the `solid`,\n    `dashed` and `dotted` line styles and colors.\n* Added an `options` column to the `lnav_views` table\n  to allow more control over overlays.\n* Added a \"Dracula\" theme as described at:\n  https://draculatheme.com\n* Added the following styles for themes:\n  - `/ui/theme-defs/<theme_name>/syntax-styles/inline-code`\n  - `/ui/theme-defs/<theme_name>/syntax-styles/type`\n  - `/ui/theme-defs/<theme_name>/syntax-styles/function`\n  - `/ui/theme-defs/<theme_name>/syntax-styles/separators-references-accessors`\n* Multi-line block comments (i.e. `/* ... */`) and strings\n  are now recognized and styled as appropriate.\n* Added `error` and `data` columns to the `fstat()`\n  table-valued-function.  The `error` column is non-NULL\n  if there is a problem accessing the file.  The `data`\n  contains the contents of the file, as such, it is\n  hidden by default.\n* Added a log format for Redis.\n* The `:eval` command will now treat its argument(s) as a\n  script, allowing multiple commands to be executed.\n* Added a `timezone()` SQL function for converting a timestamp\n  to a target timezone.\n* Added a `:convert-time-to` command that converts the\n  timestamp of the focused log message to the given timezone.\n* Added the `:set-file-timezone` and `:clear-file-timezone`\n  commands to set the timezone for log messages that don't\n  include a zone in their timestamp.\n* Added the `options_path` and `options` columns to the\n  `lnav_file` table so you can see what options are applied\n  to a file.  Currently, the only option is the default\n  timezone that is set by the `:set-file-timezone` command.\n* Added the `config file-options` management command that\n  can be used to examine the options that will be applied\n  to a given file.\n* When viewing a diff, the sections of the diff for each\n  file is recognized and shown in the breadcrumb bar.  So,\n  you can see the file the focused line is in.  You can\n  also jump to a particular file by focusing on the\n  breadcrumb bar, selecting the crumb, and then selecting\n  the desired file.\n* Binary files are now displayed as a hex dump with ASCII\n  representation (where applicable).\n* Added a `log_msg_line()` SQL function that will return the\n  line number of the start of the currently focused\n  message in the log view.\n* Added a `log_msg_values` column to the `all_logs` SQL\n  table that contains a JSON object with the top 5 values\n  for the fields extracted from the log message.\n* Added `:next-section` and `:prev-section` commands for\n  moving to the next and previous section of a document.\n  For example, the next section in a man page or JSON\n  array.  The default keymap has been changed to bind\n  the curly brace keys to these commands.\n* Added Nextcloud log format from Adam Monsen.\n* Added GitHub Event Log format for files from gharchive.org.\n  It makes a good example of a JSON-Lines format.\n\nBug Fixes:\n* Binary data piped into stdin should now be treated the same\n  as if it was in a file that was passed on the command-line.\n* The `-I` option is now recognized in the management CLI\n  (i.e. when you run **lnav** with the `-m` flag).\n* Fields in the bro and w3c log formats that were hidden are\n  now saved in the session and restored.\n* A warning will now be issued if a timestamp in a log format's\n  sample message does not match completely.  Warnings in the\n  configuration can be viewed by passing the `-W` flag.\n* Importing from regex101.com broke due to some changes in the\n  API.\n* The details overlay for a log message no longer shows keys\n  for unknown JSON properties.  These extra fields are now\n  shown with the proper `jget(log_raw_text, '/...')` SQL\n  expression needed to retrieve the value.\n* Improved text-wrapping when rendering Markdown.\n\nInterface changes:\n* The breadcrumb bar hotkey is moving to backtick `` ` ``\n  instead of `ENTER`.\n* The DB view now uses the \"alt-text\" theme style to draw\n  alternating rows instead of being hard-coded to bold.  The\n  alternation is also now done in groups of two rows instead\n  of only a single row.  Numbers are also rendered using the\n  \"number\" theme style as well.\n* The log message overlay in the LOG view is now limited\n  2/3rds of the height.  You can focus on the overlay panel\n  by pressing `CTRL-]`.  The \"alt-text\" theme style is also\n  used to draw the overlay contents now as well. (The\n  overlay is used to display the parser details, comments,\n  and annotations.)\n* The `{` and `}` keys have been changed from moving\n  through the \"location history\" to moving to the previous\n  and next section in a document.\n* Added indent guidelines when structured data is detected.\n\nBreaking changes:\n* Removed the `-w` command-line option.  This option was\n  useful when stdin was not automatically preserved.  Since\n  the data is now stored (and cleaned up) as well as being\n  spread across multiple files, this option doesn't make\n  sense anymore.\n* The `-t` command-line flag behaves a little differently\n  behind the scenes now.  Timestamps will always be\n  recorded for each line piped into lnav.  This flag means\n  that the data should be treated as a log file instead of\n  plain text.\n* Data piped into **lnav** is now stored in the work\n  directory instead of the `stdin-captures` dot-lnav\n  directory.\n* Changed the \"Bunyan\" log format name from `bunyan` to\n  `bunyan_log` to be consistent with other format names.\n\n## lnav v0.11.2\n\nFeatures:\n* A \"cursor\" mode has been added to the main view that can\n  be toggled by pressing CTRL-X.  While in cursor mode, any\n  operations that would normally work on the \"top\" line will\n  now operate on the focused line instead.\n* Added CTRL-D and CTRL-U hotkeys to move down/up by half\n  a page.\n* Added an `auto-width` flag to the elements of the\n  `line-format` array that indicates that the width of the\n  field should automatically be determined by the observed\n  values.\n* Added bunyan log format from Tobias Gruetzmacher.\n* Added cloudflare log format from @minusf.\n* Number fields used in a JSON log format `line-format`\n  array now default to being right-aligned.  Also, added\n  `prefix` and `suffix` to `line-format` elements so a\n  string can optionally be prepended/appended if the value\n  is not empty.\n* JSON log format detection has been improved to not rely\n  on matching the file name.  All possible formats are\n  tried and the one with the most available fields for a\n  given `line-format` is used.  For example, if the first\n  log message has 8 fields and format A contains 5 of\n  those fields in its `line-format` while format B only\n  contains 2 of those fields in its `line-format`, format\n  A will be used for the file.\n\nChanges:\n* For JSON-lines logs, line-feeds at the end of a value are\n  automatically stripped.\n\nBug Fixes:\n* Hidden values in JSON logs are now hidden by default.\n* Text with ANSI-escapes is now filtered properly.\n\n## lnav v0.11.1\n\nFeatures:\n* Additional validation checks for log formats have been\n  added and will result in warnings.  Pass `-W` on the\n  command-line to view the warnings.  The following new\n  check have been added:\n  - Each regex must have a corresponding sample log message\n    that it matches.\n  - Each sample must be matched by only one regex.\n* Added built-in support for anonymizing content.  The\n  `:write-*` commands now accept an `--anonymize` option\n  and there is an `anonymize()` SQL function.  The\n  anonymization process will try to replace identifying\n  information with random data.  For example, IPv4 addresses\n  are replaced with addresses in the 10.0.0.0/8 range.\n  (This feature is mainly intended to help with providing\n   information to lnav support that does not have sensitive\n   values.)\n* Added `parse_url()` and `unparse_url()` SQL functions for\n  parsing URLs into a JSON object and then back again. Note\n  that the implementation relies on libcurl which has some\n  limitations, like not supporting all types of schemes\n  (e.g. `mailto:`).\n* Added the `subsecond-field` and `subsecond-units` log\n  format properties to allow for specifying a separate\n  field for the sub-second portion of a timestamp.\n* Added a keymap for Swedish keyboards.\n\nBreaking changes:\n* The `regexp_capture()` table-valued-function now returns NULL\n  instead of an empty string for the `capture_name` column if\n  the capture is not named.\n\nFixes:\n* Reduce the \"no patterns have a capture\" error to a warning\n  so that it doesn't block lnav from starting up.\n* Some ANSI escape sequences will now be removed before testing\n  regexes against a log message.\n* If a line in a JSON-lines log file does not start with a\n  `{`, it will now be shown as-is and will not have the JSON\n  parse error.\n\nCost of Doing Business:\n* Migrated from pcre to pcre2.\n\n## lnav v0.11.0\n\nFeatures:\n* Redesigned the top status area to allow for user-specified\n  messages and added a second line that displays an interactive\n  breadcrumb bar.  The top status line now shows the clock and\n  the remaining area displays whatever messages are inserted\n  into the lnav_user_notifications table.  The information that\n  was originally on top is now in a second line and organized\n  as breadcrumbs.  Pressing `ENTER` will activate the breadcrumb bar\n  and the left/right cursor keys can be used to select a particular\n  crumb while the up/down keys can select a value to switch to.\n  While a crumb is selected, you can also type in some text to do\n  a fuzzy search on the possibilities or, if the crumb represents\n  an array of values, enter the index to jump to.\n* The pretty-print view will now show breadcrumbs that indicate the\n  location of the top line in the view with the prettified structure.\n* Markdown files (those with a .md extension) are now rendered in the\n  TEXT view.  The breadcrumb bar at the top will also be updated\n  depending on the section of the document that you are in and you\n  can use it to jump to different parts of the doc.\n* The `:goto` command will now accept anchor links (i.e. `#section-id`)\n  as an argument when the text file being viewed has sections.  You\n  can also specify an anchor when opening a file by appending\n  `#<link-name>`.  For example, `README.md#screenshot`.\n* Log message comments are now treated as markdown and rendered\n  accordingly in the overlay.  Multi-line comments are now supported\n  as well.\n* Metadata embedded in files can now be accessed by the\n  `lnav_file_metadata` table.  Currently, only the front-matter in\n  Markdown files is supported.\n* Added an integration with regex101.com to make it easier to edit\n  log message regular expressions.  Using the new \"management CLI\"\n  (activated by the `-m` option), a log format can be created from\n  a regular expression entry on regex101.com and existing patterns\n  can be edited.\n* In the spectrogram view, the selected value range is now shown by\n  an overlay that includes a summary of the range and the number of\n  values that fall in that range.  There is also a detail panel at\n  the bottom that shows the log-messages/DB-rows whose values are in\n  that range.  You can then press TAB to focus on the detail view\n  and scroll around.\n* Add initial support for pcap(3) files using tshark(1).\n* SQL statement execution can now be canceled by pressing `CTRL+]`\n  (same as canceling out of a prompt).\n* To make it possible to automate some operations, there is now an\n  `lnav_events` table that is updated when internal events occur\n  within lnav (e.g. opening a file, format is detected).  You\n  can then add SQLite `TRIGGER`s to this table that can perform a\n  task by updating other tables.\n* Tags can automatically be added to messages by defining a pattern\n  in a log format.  Under a format definition, add the tag name\n  into the \"tags\" object in a format definition.  The \"pattern\"\n  property specifies the regular expression to match against a line\n  in a file that matches the format.  If a match is found, the tag\n  will be applied to the log message.  To restrict matches to\n  certain files, you can add a \"paths\" array whose object elements\n  contain a \"glob\" property that will be matched against file names.\n* Log messages can now be detected automatically via \"watch\n  expressions\".  These are SQL expressions that are executed for\n  each log message.  If the expressions evaluates to true, an\n  event is published to the `lnav_events` table that includes the\n  message contents.\n* Added the `regexp_capture_into_json()` table-valued-function that\n  is similar to `regexp_capture()`, but returns a single row with a\n  JSON value for each match instead of a row for each capture.\n* Added a `top_meta` column to the lnav_views table that contains\n  metadata related to the top line in the view.\n* Added a `log_opid` hidden column to all log tables that contains\n  the \"operation ID\" as specified in the log format.\n* Moved the `log_format` column from the all_logs table to a hidden\n  column on all tables.\n* Add format for UniFi gateway.\n* Added a `glob` property to search tables defined in log formats\n  to constrain searches to log messages from files that have a\n  matching log_path value.\n* Initial indexing of large files should be faster.  Decompression\n  and searching for line-endings are now pipelined, so they happen\n  in a thread that is separate from the regular expression matcher.\n* Writing to the clipboard now falls back to OSC 52 escape sequence\n  if none of the clipboard commands could be detected.  Your\n  terminal software will need to support the sequence and you may\n  need to explicitly enable it in the terminal.\n* Added the `:export-session-to <path>` command that writes the\n  current session state to a file as a list of commands/SQL\n  statements.  This script file can be executed to restore the\n  majority of the current state.\n* Added the `echoln()` SQL function that behaves similarly to the\n  `:echo` command, writing its first argument to the current\n  output.\n* Added `encode()` and `decode()` SQL functions for transcoding\n  blobs or text values using one of the following algorithms:\n  base64, hex, or uri.\n* In regular expressions, capture group names are now semantically\n  highlighted (e.g. in the capture, `(?<name>\\w+)`, \"name\" would\n  have a unique color).  Also, operations or previews that use\n  that regular expression will highlight the matched data with\n  the same color.\n* Added an lnav_views_echo table that is a real SQLite table that\n  you can create TRIGGERs on in order to perform actions when\n  scrolling in a view.\n* Added a `yaml_to_json()` SQL function that converts a YAML\n  document to the equivalent JSON.\n\nBreaking Changes:\n* Formats definitions are now checked to ensure that values have a\n  corresponding capture in at least one pattern.\n* Added a 'language' column to the lnav_view_filters table that\n  specifies the language of the 'pattern' column, either 'regex'\n  or 'sql'.\n* Timestamps that do not have a day or month are rewritten to a\n  full timestamp like YYYY-MM-DD HH:MM:SS.\n* Removed the summary overlay at the bottom of the log view that\n  displayed things like \"Error rate\" and the time span.  It doesn't\n  seem like anyone used it.\n* Removed the `log_msg_instance` column from the logline and search\n  tables since it causes problems with performance.\n* Search tables now search for multiple matches within a message\n  instead of stopping at the first hit.  Each additional match is\n  returned as a separate row.  A `match_index` column has been\n  added to capture the index of the match within the message.\n  The table regex is also compiled with the \"multiline\" flag enabled\n  so the meaning of the `^` and `$` metacharacters are changed\n  to match the start/end of a line instead of the start/end of\n  the entire message string.\n* Search tables defined in formats are now constrained to only\n  match log messages that are in that log format instead of all\n  log messages.  As a benefit, the search table now includes\n  the columns that are defined as part of the format.\n* The lnav_view_filters table will treats the tuple of\n  (view_name, type, language, pattern) as a `UNIQUE` index and\n  will raise a conflict error on an `INSERT`.  Use `REPLACE INTO`\n  instead of `INSERT INTO` to ignore conflict error.\n* The types of SQL values stored as local variables in scripts\n  is now preserved when used as bound variables at a later point\n  in the script.\n\nFixes:\n* Toggling enabled/disabled filters when there is a SQL expression\n  no longer causes a crash.\n* Fix a crash related to long lines that are word wrapped.\n* Multiple SQL statements in a SQL block of a script are now\n  executed instead of just the first one.\n* In cases where there were many colors on screen, some text would\n  be colored incorrectly.\n* The pretty-print view now handles ANSI escape sequences.\n* The \"overstrike\" convention for doing bold and underline is now\n  supported.  (Overstrike is a character followed by a backspace\n  and then the same character for bold or an underscore for\n  underline.)\n* The `:eval` command now works with searching (using the '/'\n  prefix).\n\n## lnav v0.10.1\n\nFeatures:\n* Added `:show-only-this-file` command that hides all files except the\n  one for the top line in the view.\n* The `:write-raw-to` command now accepts a `--view` flag that specifies\n  the source view for the data to write.  For example, to write the\n  results of a SQL query, you would pass `--view=db` to the command.\n* The commands used to access the clipboard are now configured through\n  the \"tuning\" section of the configuration.\n* Added an `lnav_version()` SQL function that returns the current\n  version string.\n* Added basic support for the logfmt file format.  Currently, only files\n  whose lines are entirely logfmt-encoded are supported.  The lines\n  must also contain either a field named `time` or `ts` that contains\n  the timestamp.\n* Added the `logfmt2json()` SQL function to convert a string containing\n  a logfmt-encoded message into a JSON object that can be operated on\n  more easily.\n* Added the `gzip()` and `gunzip()` SQL functions to compress values\n  into a blob and decompress a blob into a string.\nInterface changes:\n* The xclip implementation for accessing the system clipboard now writes\n  to the \"clipboard\" selection instead of the \"primary\" selection.\n* The 'query' bookmark type and `y`/`Y` hotkeys have been removed due to\n  performance issues and the functionality is probably rarely used.\nBug Fixes:\n* The text \"send-input\" would show up on some terminals instead of\n  ignoring the escape sequence.  This control sequence was only\n  intended to be used in the test suite.\n* Remote file synchronization has been optimized a bit.\n* Configuration values loaded from the `~/.lnav/configs` directory\n  are now included in the default configuration, so they won't be\n  saved into the `~/.lnav/config.json` user configuration file.\n* Key handling in the visual filter editor will no longer swallow\n  certain key-presses when editing a filter.\n* Scrolling performance restored in the SQL view.\n* The `:redirect-to` command now works with `/dev/clipboard`\n* The field overlay (opened by pressing 'p') now shows `log_time`\n  for the timestamp field instead of the name defined in the format.\n* The search term in the bottom status bar will now update properly\n  when switching views.\n* The \"Out-Of-Time-Order Message\" overlay will be shown again.\n* The tab for the \"Files\" panel will be highlighted in red if there\n  is an issue opening a file.\n* Overwritten files should be reloaded again.\n* The `jget()` SQL function now returns numbers with the correct type.\n* The `json_contains()` SQL function now returns false if the first\n  argument is NULL instead of NULL.\n* The local copies of remote files are now cleaned up after a couple\n  days of the host not being accessed.\n* The initial loading and indexing phase has been optimized.\n\n## lnav v0.10.0\n\nFeatures:\n* Files on remote machines can be viewed/tailed if they are accessible\n  via SSH.  The syntax for specifying the host and path is similar to\n  scp.  For example, to view the files in the /var/log directory on the\n  machine `host1.example.org`:\n    ```console\n    $ lnav user@host1.example.org:/var/log\n    ```\n  Note that you must be able to log into the machine without any\n  interaction.\n* Added the `:filter-expr` command to filter log messages based on an SQL\n  expression.  This command allows much greater control over filtering.\n* Added the `:mark-expr` command to mark log messages based on an SQL\n  expression.  This command makes it easier to programmatically mark\n  log messages compared to using SQL.\n* Added support for archive files, like zip, and other compression formats,\n  like xz, when compiled with libarchive.  When one of these types of\n  files is detected, they are unpacked into a temporary directory and\n  all the files are loaded into lnav.\n* Added an `xpath()` table-valued function for extracting values from\n  strings containing XML snippets.\n* Added the `:prompt` command to allow for more customization of prompts.\n  Combined with a custom keymapping, you can now open a prompt and prefill\n  it with a given value.  For example, a key could be bound to the\n  following command to open the command prompt with `:filter-in `\n  already filled in:\n    ```lnav\n    :prompt command : 'filter-in '\n    ```\n* Added support for the W3C Extended Log File Format with the name\n  `w3c_log`.  Similarly to the bro log format, the header is used to\n  determine the columns in a particular file.  However, since the columns\n  can be different between files, the SQL table only has a well-known set\n  of columns and the remainder are accessible through JSON-objects stored\n  in columns like `cs_headers` and `sc_headers`.\n* Added support for the S3 Access File Format.\n* To jump to the first search hit above the top line in a view, you can\n  press `CTRL+J` instead of `ENTER` in the search prompt.  Pressing `ENTER`\n  will jump to the first hit below the current window.\n* Filtering, as a whole, can be now disabled/enabled without affecting\n  the state of individual filters.  This includes text and time-filters\n  (i.e. `:hide-lines-before`).  You can enable/disable filtering by:\n  pressing `f` in the filter editor UI; executing the `:toggle-filtering`\n  command; or by doing an `UPDATE` on the \"filtering\" column of the\n  `lnav_views` SQLite table.\n* Themes can now include definitions for text highlights under:\n    `/ui/theme-defs/<theme_name>/highlights`\n* Added a \"grayscale\" theme that isn't so colorful.\n* Added the `humanize_file_size()` SQL function that converts a numeric size\n  to a human-friendly string.\n* Added the `sparkline()` SQL function that returns a \"sparkline\" bar made\n  out of unicode characters.  It can be used with a single value or as\n  an aggregator.\n* Added a `log_time_msecs` hidden column to the log tables that returns\n  the timestamp as the number of milliseconds from the epoch.\n* Added an `lnav_top_file()` SQL function that can be used to get the\n  name of the top line in the top view or NULL if the line did not come\n  from a file.\n* Added a `mimetype` column to the lnav_file table that returns a guess as\n  to the MIME type of the file contents.\n* Added a `content` hidden column to the lnav_file table that can be used\n  to read the contents of the file.  The contents can then be passed to\n  functions that operate on XML/JSON data, like `xpath()` or `json_tree()`.\n* Added an `lnav_top_view` SQL VIEW that returns the row for the top view\n  in the lnav_views table.\n* The `generate_series()` SQLite extension is now included by default.\n  One change from the standard implementation is that both the start and\n  stop are required parameters.\n* Added the `;.read` SQL command for executing a plain SQL file.\n* Added the `-N` flag so that lnav will run without opening the default\n  syslog file.\n\nInterface Changes:\n* When copying log lines, the file name and time offset will be included\n  in the copy if they are enabled.\n* Log messages that cannot be parsed properly will be given an \"invalid\"\n  log level and the invalid portions colored yellow.\n* The range_start and range_stop values of the `regexp_capture()` results\n  now start at 1 instead of zero to match with what the other SQL string\n  functions expect.\n* The `:write-cols-to` command has been renamed to `:write-table-to`.\n* The DB view will limit the maximum column width to 120 characters.\n* The `:echo` command now evaluates its message to do variable\n  substitution.\n* The `:write-raw-to` command has been changed to write the original\n  log file content of marked lines.  For example, when viewing a JSON\n  log, the JSON-Line values from the log file will be written to the\n  output file.  The `:write-view-to` command has been added to perform\n  the previous work of `:write-raw-to` where the raw content of the view\n  is written to the file.\n\nFixes:\n* Unicode text can now be entered in prompts.\n* The `replicate()` SQL function would cause a crash if the number of\n  replications was zero.\n* Many internal improvements.\n\n## lnav v0.9.0\n\nFeatures:\n* Added support for themes and included a few as well: default, eldar,\n  monocai, night-owl, solarized-light, and solarized-dark.  The theme\n  can be changed using the `:config` command, like so:\n    ```lnav\n    :config /ui/theme night-owl\n    ```\n  Consult the online documentation for defining a new theme at:\n    https://lnav.readthedocs.io/en/latest/config.html#theme-definitions\n* Added support for custom keymaps and included the following: de, fr,\n  uk, us.  The keymap can be changed using the `:config` command, like so:\n    ```lnav\n    :config /ui/keymap uk\n    ```\n  Consult the online documentation for defining a new keymap at:\n    https://lnav.readthedocs.io/en/latest/config.html#keymap-definitions\n* The following JSON-Schemas have been published for the log format and\n  configuration JSON files:\n    - https://lnav.org/schemas/format-v1.schema.json\n    - https://lnav.org/schemas/config-v1.schema.json\n\n  Formats should be updated to reference the schema using the `$schema`\n  property.\n* Indexing of new data in log files can now be paused by pressing `=`\n  and unpaused by pressing it again.  The bottom status bar will display\n  'Paused' in the right corner while paused.\n* CMake is now a supported way to build.\n* When viewing data from the standard-input, a symbolic name can be used\n  to preserve session state.  The name can be changed using the\n  `|rename-stdin` lnav script or by doing an `UPDATE` to the filepath\n  column of the lnav_file table.  For example, to assign the name\n  \"journald\", the following SQL statement can be executed in lnav:\n    ```lnav\n    ;UPDATE lnav_file SET filepath='journald' WHERE filepath='stdin'\n    ```\n* The size of the terminal can be accessed in SQL using the `$LINES` and\n  `$COLS` variables.\n* The `raise_error(msg)` SQL function has been added to make it easier to\n  raise an error in an lnav script to stop execution and notify the user.\n* Added the `json_concat()` function to make it easier to append/concatenate\n  values onto arrays.\n* Added the `:write-jsonlines-to` command that writes the result of a SQL\n  query to a file in the JSON Lines format.\n\nInterface Changes:\n* Data piped into lnav is no longer dumped to the console after exit.\n  Instead, a file containing the data is left in `.lnav/stdin-captures/`\n  and a message is printed to the console indicating the file name.\n* In time-offset mode, the deltas for messages before the first mark\n  are now negative instead of relative to the start of the log.\n* The $XDG_CONFIG_HOME environment variable (or `~/.config` directory) are\n  now respected for storing lnav's configuration.  If you have an existing\n  `~/.lnav` directory, that will continue to be used until you move it to\n  `$XDG_CONFIG_HOME/lnav` or `~/.config/lnav`.\n* Removed the `:save-config` command. Changes to the configuration are now\n  immediately saved.\n\nFixes:\n* Added 'notice' log level.\n* If a `timestamp-format` is used in an element of a `line-format`, the\n  field name is ignored and a formatted timestamp is always used.\n* Ignore stdin when it is connected to `/dev/null`.\n\n## lnav v0.8.5\n\nFeatures:\n* Added a visual filter editor to make it easier to update existing\n  filters.  The editor can be opened by pressing `TAB`.  Once the editor\n  is opened, you can create/delete, enable/disable, and edit the patterns\n  with hotkeys.\n* Added an `lnav_view_filters` SQL table that can be used to\n  programmatically manipulate filters.\n* Added an `lnav_view_filter_stats` SQL table that contains the number of\n  times a given filter matched a line in the view.\n* Added a `log_filters` column to log tables that can be used to see what\n  filters matched the log message.\n* A history of locations in a view is now kept so that you can jump back\n  to where you were previously using the `{` and `}` keys.  The location\n  history can also be accessed through the `:prev-location` and\n  `:next-location` commands.\n* The `:write-*` commands will now accept `/dev/clipboard` as a file name\n  that writes to the system clipboard.\n* The `:write-to` and `:write-raw-to` commands will now print out comments\n  and tags attached to the lines.\n* Added a `:redirect-to <path>` command to redirect command output to the\n  given file.  This command is mostly useful in scripts where one might\n  want to redirect all output from commands like `:echo` and `:write-to -`\n  to a single file.\n* If a log file format has multiple patterns for matching log messages,\n  each pattern is now tried to match a message in a file.  Previously,\n  only one pattern was ever used for an entire file.\n* Added haproxy log format from Peter Hoffmann.\n* Added `spooky_hash()` and `group_spooky_hash()` SQL functions to\n  generate a hash of their parameters.\n* Added `time_offset` to the `lnav_file` table so that the timestamps in\n  a file can be adjusted programmatically.\n\nInterface Changes:\n* The auto-complete behavior in the prompt has been modified to fall back\n  to a fuzzy search if the prefix search finds no matches.  For example,\n  typing in `:fin` and pressing TAB would previously not do anything.\n  Now, the `:fin` will be completed to `:filter-in ` since that is a\n  strong fuzzy match.  If there are multiple matches, as would happen\n  with `:dfil`, readline's menu-complete behavior will be engaged and\n  you can press `TAB` cycle through the options.\n* Added `CTRL+F` to toggle the enabled/disabled state of all filters for the\n  current view.\n* The `-r` flag is now for recursively loading files.  The functionality\n  for loading rotated files is now under the `-R` flag.\n* The current search term is now shown in the bottom status bar.\n* Some initial help text is now shown for the search and SQL prompts to\n  refresh the memory.\n* When entering the `:comment` command for a line with a comment, the\n  command prompt will be filled in with the existing comment to make\n  editing easier.\n* Hidden fields now show up as a unicode vertical ellipsis (⋮) instead of\n  three-dot ellipsis to save space.\n* Pressing 7/8 will now move to the previous/next minute.\n* The `:write-raw-to` command has been changed to write the entire\n  contents of the current view and a `:write-screen-to` command has been\n  added to write only the current screen contents.\n* Disabled filters are now saved in sessions.\n* The `:adjust-log-time` command now accepts relative times as input.\n\nFixes:\n* The `:write-json-to` command will now pass through JSON cells as their\n  JSON values instead of a JSON-encoded string.\n\n## lnav v0.8.4\n\nFeatures:\n* Added the `:comment` command that can be used to attach a comment to a\n  log line.  The comment will be displayed below the line, like so:\n    ```\n    2017-01-01T15:30:00 error: computer is on fire\n      + This is where it all went wrong\n    ```\n  The `:clear-comment` command will remove the attached comment.  Comments\n  are searchable with the standard search mechanism and they are available\n  in SQL through the `log_comment` column.\n* Added the `:tag`, `:untag`, and `:delete-tags` commands that can be used\n  to attach/detach tags on the top log line and delete all instances of\n  a tag.  Tags are also searchable and are available in SQL as a JSON\n  array in the `log_tags` column.\n* Pressing left-arrow while viewing log messages will reveal the source\n  file name for each line and the unique parts of the source path.\n  Pressing again will reveal the full path.\n* The file name section of the top status line will show only the unique\n  parts of the log file path if there is not enough room to show the full\n  path.\n* Added the `:hide-unmarked-lines` and `:show-unmarked-lines` commands\n  that hide/show lines based on whether they are bookmarked.\n* Added the `json_contains()` SQL function to check if a JSON value\n  contains a number of a string.\n* The relative time parser recognizes \"next\" at the beginning of the\n  input, for example, \"next hour\" or \"next day\".  Handy for use in the\n  `:goto` command.\n* Added a \"text-transform\" option for formatting JSON log messages.  The\n  supported options are: none, uppercase, lowercase, and capitalize.\n* Added a special `__level__` field name for formatting JSON messages so\n  that the lnav level name can be used instead of the internal value in\n  the JSON object.\n* Added a log format for journald JSON logs.\n\nInterface Changes:\n* When typing in a search, instead of moving the view to the first match\n  that was found, the first ten matches will be displayed in the preview\n  window.\n* The pretty-print view maintains highlighting from the log view.\n* The pretty-print view no longer tries to reverse lookup IP addresses.\n* The online help for commands and SQL functions now includes a 'See Also'\n  section that lists related commands/functions.\n\nFixes:\n* The HOME key should now work in the command-prompt and move the cursor\n  to the beginning of the line.\n* The `:delete-filter` command should now tab-complete existing filters.\n* Milliseconds can now be used in relative times (e.g. 10:00:00.123)\n* The `J`/`K` hotkeys were not marking lines correctly when the bottom of\n  the view was reached.\n* The level field in JSON logs should now be recognized by the level\n  patterns in the format.\n\n## lnav v0.8.3\n\nFeatures:\n* Support for the Bro Network Security Monitor (https://www.bro.org) log\n  file format.\n* Added an `fstat()` table-valued function for querying the local\n  filesystem.\n* Added `readlink()` and `realpath()` SQL functions.\n* Highlights specified in log formats can now specify the colors to use\n  for the highlighted parts of the log message.\n* Added a `:quit` command.\n* Added a `/ui/default-colors` configuration option to specify that the\n  terminal's default background and foreground colors should be used\n  instead of black and white.\n\nInterface Changes:\n* Pressing delete at a command-prompt will exit the prompt if there is no\n  other input.\n\nFixes:\n* The help view now includes all the command-help that would pop up as\n  you entered commands and SQL queries.\n* Hidden fields and lines hidden before/after times are now saved in the\n  current session and restored.\n* Unicode characters should now be displayed correctly (make sure you\n  have LANG set to a UTF-8 locale).\n\n## lnav v0.8.2\n\nFeatures:\n* The timestamp format for JSON log files can be specified with the\n  `timestamp-format` option in the `line-format` array.\n* Added \"min-width\", \"max-width\", \"align\", and \"overflow\" options to the\n  \"line-format\" in format definitions for JSON log files.  These options\n  give you more control over how the displayed line looks.\n* Added a \"hidden\" option to log format values so that you can hide JSON\n  log fields from being displayed if they are not in the line format.\n* Added a `rewriter` field to log format value definitions that is a\n  command used to rewrite the field in the pretty-printed version of a\n  log message.  For example, the HTTP access log format will rewrite the\n  status code field to include the textual version (e.g. 200 (OK)).\n* Log message fields can now be hidden using the `:hide-fields` command or\n  by setting the 'hidden' property in the log format.  When hidden, the\n  fields will be replaced with a yellow ellipsis when displayed.  Hiding\n  large fields that contain extra details can make the log easier to read.\n  The `x` hotkey can be used to quickly toggle whether these fields are\n  displayed or not.\n* Added a `:mark` command to bookmark the top line in the current view.\n* Added an `:alt-msg` command that can be used to set the text to be\n  displayed in the bottom right of the command line.  This command is\n  mostly intended for use by hotkey maps to set the help text.\n* In lnav scripts, the first row of a SQL query result will now be turned\n  into local variables that can be referenced in other commands or\n  queries.  For example, the following script will print the number one:\n    ```lnav\n    ;SELECT 1 as foobar\n    :eval :echo ${foobar}\n    ```\n* Added an `lnav_view_stack` SQL table that gives access to the view\n  stack.\n* Added a `top_time` column to the lnav_views table so that you can get\n  the timestamp for the top line in views that are time-based as well as\n  allowing you to move the view to a given time with an UPDATE statement.\n* Added a 'search' column to the lnav_views table so that you can perform\n  a text search programmatically.\n* Added a `regexp_capture(<string>, <pattern>)` table-valued function for\n  getting detailed results from matching a regular expression against a\n  string.\n* Added a `timediff(<time1>, <time2>)` SQL function for computing the\n  difference between two relative or absolute timestamps.\n* Log formats can now define a default set of highlights with the\n  \"highlights\" property.\n* Added a `|search-for <pattern>` built-in script that can be used to\n  start a search from the command-line.\n* Log format definitions can now specify the expected log level for a\n  sample line.  This check should make it easier to validate the\n  definition.\n\nInterface Changes:\n* Command and SQL documentation is now displayed in a section at the\n  bottom of the screen when a command or query is being entered.  Some\n  commands will also display a preview of the command results.  For\n  example, the `:open` command will display the first ten lines of the\n  file to be opened and the `:filter-out` command will highlight text\n  that matches in the current view.  The preview pane can be shown/hidden\n  by pressing `CTRL-P`.\n* The color used for text colored via `:highlight` is now based on the\n  the regex instead of randomly picked so that colors are consistent\n  across invocations.\n* The \"graph\" view has been removed since it's functionality has been\n  obsoleted by other features, like `:create-search-table`.\n* When doing a search, if a hit is found within a second after hitting\n  `<ENTER>`, the view will move to the matched line.  The previous behavior\n  was to stay on the current line, which tended to be a surprise to new\n  users.\n* Pressing `n`/`N` to move through the next/previous search hit will now\n  skip adjacent lines, up to the vertical size of the view.  This should\n  make scanning through clusters of hits much faster.  Repeatedly\n  pressing these keys within a short time will also accelerate scanning\n  by moving the view at least a full page at a time.\n\nBreaking Changes:\n* The captured timestamp text in log files must fully match a known format\n  or an error will be reported.  The previous behavior was to ignore any\n  text at the end of the line.\n\nFixes:\n* You can now execute commands from the standard input by using a dash (`-`)\n  with the `-f` command-line argument.  Reading commands from a file\n  descriptor should also work, for example, with the following bash\n  syntax:\n     ```console\n     $ lnav -f <(echo :open the-file-to-open)\n     ```\n* Programming language syntax highlighting should now only be applied to\n  source code files instead of everywhere.\n\n## lnav v0.8.1\n\nFeatures:\n* Added a spectrogram command and view that displays the values of a\n  numeric field over time.  The view works for log message fields or\n  for database result columns.\n* Log formats can now create SQL views and execute other statements\n  by adding `.sql` files to their format directories.  The SQL scripts\n  will be executed on startup.\n* Added `json_group_object` and `json_group_array` aggregate SQL\n  functions that collects values from a GROUP BY query into a JSON\n  object or array, respectively.\n* The SQL view will now graph values found in JSON objects/arrays in\n  addition to the regular columns in the result.\n* Added an `regexp_match(<re>, <str>)` SQL function that can be used to\n  extract values from a string using a regular expression.\n* Added an `extract(<str>)` SQL function that extracts values using the\n  same data discover/extraction parser used in the `logline` table.\n* Added a \"summary\" overlay line to the bottom of the log view that\n  displays how long ago the last message was received, along with the\n  total number of files and the error rate over the past five minutes.\n* Pressing `V` in the DB view will now check for a column with a\n  timestamp and move to the corresponding time in the log view.\n* Added `a`/`A` hotkeys to restore a view previously popped with `q`/`Q`.\n* Added `:hide-lines-before`, `:hide-lines-after`, and\n  `:show-lines-before-and-after` commands so that you can filter out\n  log lines based on time.\n* Scripts containing lnav commands/queries can now be executed using\n  the pipe (`|`) hotkey.  See the documentation for more information.\n* Added an `:eval` command that can be used to execute a command or\n  query after performing environment variable substitution.\n* Added an `:echo` command that can be useful for scripts to message\n  the user.\n* The `log_part` column can now be set with an SQL `UPDATE` statement.\n* Added a `log_body` hidden column that returns the body of the log\n  message.\n* Added `:config`, `:reset-config`, and `:save-config` commands to change\n  configuration options, reset to default, and save them for future\n  executions.\n* Added a `/ui/clock-format` configuration option that controls the time\n  format in the top-left corner.\n* Added a `/ui/dim-text` configuration option that controls the brightness\n  of text in the UI.\n* Added support for TAI64 timestamps (http://cr.yp.to/libtai/tai64.html).\n* Added a safe execution mode. If the `LNAVSECURE` environment variable is\n  set before executing lnav, the following commands are disabled:\n  - `:open`\n  - `:pipe-to`\n  - `:pipe-line-to`\n  - `:write-*-to`\n\n  This makes it easier to run lnav with escalated privileges in restricted\n  environments, without the risk of users being able to use the above\n  mentioned commands to gain privileged access.\n\nInterface Changes:\n* The `o`/`O` hotkeys have been reassigned to navigate through log\n  messages that have a matching \"opid\" field.  The old action of\n  moving forward and backward by 60 minutes can be simulated by\n  using the `:goto` command with a relative time and the `r`/`R`\n  hotkeys.\n* Log messages with timestamps that pre-date previous log messages will\n  have the timestamp highlighted in yellow and underlined.  These out-\n  of-time-order messages will be assigned the time of the previous\n  message for sorting purposes.  You can press the 'p' hotkey to examine\n  the 'Received Time' of the message as well as the time parsed from the\n  original message.  A `log_actual_time` hidden field has also been\n  added to the SQLite virtual table so you can operate on the original\n  message time from the file.\n* The `A`/`B` hotkeys for moving forward/backward by 10% line increments\n  have been reassigned to `[` and `]`.  The `a` and `A` hotkeys are now\n  used to return to the previously popped view while trying to preserve\n  the time range.  For example, after leaving the spectrogram view with\n  'q', you can press 'A' return to the view with the top time in the\n  spectrogram matching the top time in the log view.\n* The 'Q' hotkey now pops the current view off of the stack while\n  maintaining the top time between views.\n\nFixes:\n* Issues with tailing JSON logs have been fixed.\n* The `jget()` SQL function should now work for objects nested in arrays.\n\n## lnav v0.8.0\n\nFeatures:\n* Integration with \"papertrailapp.com\" for querying and tailing\n  server log and syslog messages.  See the Papertrail section in\n  the online help for more details.\n* Remote files can be opened when lnav is built with libcurl v7.23.0+\n* SQL queries can now be done on lines that match a regular expression\n  using the `log_search` table or by creating custom tables with the\n  `:create-search-table` command.\n* Log formats that are \"containers\" for other log formats, like\n  syslog, are now supported.  See the online help for more\n  information.\n* Formats can be installed from git repositories using the `-i` option.\n  A standard set of extra formats can be installed by doing\n  `lnav -i extra`. (You must have git installed for this to work.)\n* Added support for 'VMware vSphere Auto Deploy' log format.\n* Added a 'sudo' log format.\n* Added hotkeys to move left/right by a smaller increment (H/L or\n  Shift+Left/Shift+Right).\n* A color-coded bar has been added to the left side to show where\n  messages from one file stop and messages from another file start.\n* The `-C` option will now try to check any specified log files to\n  make sure the format(s) match all of the lines.\n* Added an `all_logs` SQLite table that contains the message format\n  extracted from each log line.  Also added a `;.msgformat` SQL command\n  that executes a query that returns the counts for each format and the\n  first line where the format was seen.\n* Added an `lnav_views` SQLite table that can be used to query and\n  change the lnav view state.\n* When typing in a command, the status bar will display a short\n  summary of the currently entered command.\n* Added a `:delete-filter` command.\n* Added a `log_msg_instance` column to the logline and log_search\n  tables to make it easier to join tables that are matching log\n  messages that are ordered.\n* Added a `timeslice()` function to SQLite so that it is easier to\n  group log messages by time buckets.\n* The `:goto` command now supports relative time values like\n  `a minute ago`, `an hour later`, and many more.\n\nInterface Changes:\n* The `r`/`R` hotkeys have been reassigned to navigate through the log\n  messages by the relative time value that was last used with the\n  `:goto` command.\n\nFixes:\n* The pretty-print view should now work for text files.\n* Nested fields in JSON logs are now supported for levels, bodies, etc...\n* Tab-completion should work for quoted SQL identifiers.\n* 'lo-fi' mode key shortcut changed to `CTRL+L`.\n* 'redraw' shortcut removed. Relegated to just a command.\n* Fixed lnav hang in pretty-print mode while doing a dns lookup.\n* The generic log message parser used to extract data has been\n  optimized and should be a bit faster.\n\n## lnav v0.7.3\n\nFeatures:\n* Add `:pipe-to` and `:pipe-line-to` commands that pipe the currently\n  marked lines or the current log message to a shell command,\n  respectively.\n* Added a \"pretty-print\" view (P hotkey) that tries to reformat log\n  messages so that they are easier to read.\n* Added a `:redraw` command (CTRL+L hotkey) to redraw the window in\n  case it has been corrupted.\n* Added a `:relative-goto` command to move the current view relative\n  to its current position.\n* Experimental support for linking with jemalloc.\n* The plain text view now supports filtering.\n* Added `:next-mark` and `:prev-mark` commands to jump to the next or\n  previous bookmarked line (e.g. error, warning, ...)\n* Added a `:zoom-to` command to change the zoom level of the histogram\n  view.\n* Log formats can now define their own timestamp formats with the\n  `timestamp-format` field.\n\nFixes:\n* Autotools scripts overhaul.\n* Added a configure option to disable linking with libtinfo. The newer\n  versions of ncurses don't require it, however the build silently pulls\n  it in as a dependency, if it is available on the system. This can be\n  explicitly disabled using the `--disable-tinfo` option during configure.\n* Fixed the configure script behavior to ignore the values specified using\n  the CFLAGS and LDFLAGS environment variables while searching for sqlite3\n  when `--with-sqlite3` switch was specified without the prefix.\n* The configure script now recognizes libeditline symlink'ed to masquerade\n  as libreadline. This previously used to cause problems at compile time,\n  specially on OS X. If you come across this error, use the\n  `--with-readline=prefix` switch to specify the path to the correct\n  location of libreadline.\n* The order that log formats are tried against a log file is now\n  automatically determined so that more specific formats are tested\n  before more general ones.  The order is determined on startup based on\n  how each format matches each other formats sample lines.\n* Command files (i.e. those executed via the `-f` flag) now support\n  commands/queries that span more than one line.\n* Added more log levels: stats, debug2 - debug5.\n\n## lnav v0.7.2\n\n* Added log formats for vdsm, openstack, and the vmkernel.\n* Added a \"lo-fi\" mode (L hotkey) that dumps the displayed log lines\n  to the terminal without any decorations.  The `:write-to`, `:write-json-to`,\n  and `:write-csv-to` commands will also write their output to the terminal\n  when passed `-` as the file name.  This mode can be useful for copying\n  plain text lines to the clipboard.\n* (OS X) Text search strings are copied to the system's \"find\" clipboard.\n  Also, when starting a new search, the current value in the \"find\"\n  clipboard can be tab-completed.\n\n## lnav v0.7.1\n\nFeatures:\n* Added an `environ` SQL table that reflects lnav's environment\n  variables.  The table can be read and written to using SQL\n  `SELECT`, `INSERT`, `UPDATE`, and `DELETE` statements.  Setting\n  variables can be a way to use SQL query results in lnav commands.\n* Added a `jget()` SQLite function that can extract fields from a JSON-\n  encoded value.\n* Added log formats for the OpenAM identity provider.\n* Added a `:clear-highlight` command to clear previous calls to the\n  `:highlight` command.\n* Fixed some performance bugs in indexing JSON log formats.  Loading\n  times should be at least five times faster.\n* Filtering performance should be improved so that enabling/disabling\n  filters should be almost instantaneous.\n* The `:filter-in`, `:filter-out`, and `:highlight` commands now support\n  tab-completion of text in the current view.\n* Add a `-i` flag that installs format files in: `~/.lnav/formats/installed`\n\n## lnav v0.7.0\n\nFeatures:\n* Add the '.schema' SQL command to open a view that displays the schema\n  for the internal tables and any attached databases.  If lnav was only\n  executed with a SQLite database and no text files, this view will open\n  by default.\n* The scroll bar now indicates the location of errors/warnings, search\n  hits, and bookmarks.\n* The xterm title is update to reflect the file name for the top line\n  in the view.\n* Added a \"headless\" mode so that you can execute commands and run SQL\n  queries from the command-line without having to do it from the curses\n  UI.\n* When doing a search or SQL query, any text that is currently being\n  displayed can be tab-completed.\n* The `-H` option was added so you can view the internal help text.\n* Added the 'g/G' hotkeys to move to the top/bottom of the file.\n* Added a `log_mark` column to the log tables that indicates whether or\n  not a log message is bookmarked.  The field is writable, so you can\n  bookmark lines using an SQL UPDATE query.\n* Added syntax-highlighting when editing SQL queries or search regexes.\n* Added a `:write-json-to` command that writes the result of a SQL query\n  to a JSON-formatted file.\n* The \"elapsed time\" column now uses red/green coloring to indicate\n  sharp changes in the message rate.\n* Added a `:set-min-log-level` command to filter out log messages that\n  are below a given level.\n\nFixes:\n* Performance improvements.\n* Multi-line filtering has been fixed.\n* A collator has been added to the log_level column in the log tables\n  so that you can write expressions like `log_level > 'warning'`.\n* The log_time datetime format now matches what is returned by\n  `datetime('now')` so that collating works correctly.\n* If a search string is not valid PCRE syntax, a search is done for\n  the exact string instead of just returning an error.\n* Static-linking has been cleaned up.\n* OpenSSL is no longer a requirement.\n* Alpha support for Windows/cygwin.\n* Environment variables can now be accessed in SQL queries using\n  the syntax: `$VAR_NAME`\n* An internal log is kept and written out on a crash.\n* Partition bookmarks are now tracked separately from regular user\n  bookmarks.  You can start a partition with the 'partition-name'\n  command and remove it with the 'clear-partition' command.\n* Improved display of possible matches during tab-completion in the\n  command-prompt.  The matches are now shown in a separate view and\n  pressing tab repeatedly will scroll through the view.\n* The \"open\" command now does shell word expansion for file names.\n* More config directory paths have been added: `/etc/lnav`,\n  `$prefix/etc/lnav`, and directories passed on the command-line\n  with `-I`.\n\n## lnav v0.6.2\n\nFeatures:\n* Word-wrap support.\n\nFixes:\n* Fix some OS X Mavericks build/runtime issues.\n\n## lnav v0.6.1\nFeatures:\n* Support for JSON-encoded log files.\n\nFixes:\n* Some minor fixes and performance improvements.\n\n## lnav v0.6.0\n\nFeatures:\n* Custom log formats and more builtin formats\n* Automatic extraction of data from logs\n* UI improvements, support for 256 color terminals\n\n## lnav v0.5.1\n\nFeatures:\n* Added the `-t` and `-w` options which can be used to prepend a\n  timestamp to any data piped in on stdin and to specify a file to\n  write the contents of stdin to.\n\nFixes:\n* Cleanup for packaging.\n\n## lnav v0.5.0\n\nFeatures:\n* Files can be specified on the command-line using wildcards so that\n  new files are automatically loaded.  Directories can also be passed\n  as command-line arguments to read all of the files in the directory.\n* Builds on cygwin again.\n* Added the `C` hotkey to clear any existing user bookmarks.\n* Added experimental support for accepting input from mice.\n\nFixes:\n* Internal cleanup.\n* Copying to the clipboard on OS X is now supported.\n* Many bug fixes.\n\n## lnav v0.4.0\n\nFeatures:\n* Files that are not recognized as containing log messages have been\n  broken out to a separate text files view.  You can flip between the\n  log view and the text file view with the `t` hotkey.  When viewing\n  text files, the `f` hotkey will switch between files.\n* Files compressed with bzip2 are recognized and decompressed on the\n  fly.\n* Added a \"session\" file and command for storing commands that should\n  be executed on startup.  For example, if you always want some\n  highlighting to be done, you can add that command to the session\n  file.\n\nFixes:\n* Add some more log file formats for generic log files.\n* Performance improvements for compressed files.\n* Works on OS X now.\n\n## lnav v0.3.0\n\nChanges:\n* The hotkey for the SQL view was changed to `v` and `V` from '.'.\n\nFeatures:\n* You can now switch between the SQL result view and the log view while\n  keeping the top of the views in sync with the `log_line` column.\n\nFixes:\n* The `log_line` column is no longer included in the SQL result view's\n  stacked bar graph.\n* Added a \"warnings\" count to the histogram view.\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 1.9453125,
          "content": "\nLNAV\n----\n\nThe log file navigator, lnav, is an enhanced log file viewer that\ntakes advantage of any semantic information that can be gleaned from\nthe files being viewed, such as timestamps and log levels.  Using this\nextra semantic information, lnav can do things like interleaving\nmessages from different files, generate histograms of messages over\ntime, and providing hotkeys for navigating through the file.  It is\nhoped that these features will allow the user to quickly and\nefficiently zero in on problems.\n\n\nPREREQUISITES\n-------------\n\nThe following software packages are required to build/run lnav:\n\n  gcc/clang - A C++14-compatible compiler.\n  libpcre2  - The Perl Compatible Regular Expression v2 (PCRE2) library.\n  sqlite    - The SQLite database engine.  Version 3.9.0 or higher is required.\n  ncurses   - The ncurses text UI library.\n  readline  - The readline line editing library.\n  zlib      - The zlib compression library.\n  bz2       - The bzip2 compression library.\n  re2c      - The re2c scanner generator.\n  libcurl   - The cURL library for downloading files from URLs.  Version\n              7.23.0 or higher is required.\n  libarchive - The libarchive library for opening archive files, like zip/tgz.\n  wireshark - The 'tshark' program is used to interpret pcap files.\n\n\nINSTALLATION\n------------\n\nLnav follows the usual GNU style for configuring and installing software:\n\nRun \"./autogen.sh\" if compiling from a cloned repository.\n\n  $ ./configure\n  $ make\n  $ sudo make install\n\n\nUSING\n-----\n\nThe only file installed is the executable, \"lnav\".  You can execute it\nwith no arguments to view the default set of files:\n\n  $ lnav\n\nYou can view all the syslog messages by running:\n\n  $ lnav /var/log/messages*\n\n\nSUPPORT\n-------\n\nThe lnav mailing list can be reached at:\n\n  lnav@googlegroups.com\n\n\nACKNOWLEDGEMENTS\n----------------\n\nThe xterm color database was copied from:\n\n  https://jonasjacek.github.io/colors/\n\n\nSEE ALSO\n--------\n\nThe lnav website:\n\n  https://lnav.org\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.4873046875,
          "content": "<!-- This is a comment for testing purposes -->\n\n[![Build](https://github.com/tstack/lnav/workflows/ci-build/badge.svg)](https://github.com/tstack/lnav/actions?query=workflow%3Aci-build)\n[![Docs](https://readthedocs.org/projects/lnav/badge/?version=latest&style=plastic)](https://docs.lnav.org)\n[![Coverage Status](https://coveralls.io/repos/github/tstack/lnav/badge.svg?branch=master)](https://coveralls.io/github/tstack/lnav?branch=master)\n[![lnav](https://snapcraft.io/lnav/badge.svg)](https://snapcraft.io/lnav)\n[![Gurubase](https://img.shields.io/badge/Gurubase-Ask%20LNAV%20Guru-006BFF)](https://gurubase.io/g/lnav)\n\n[<img src=\"https://assets-global.website-files.com/6257adef93867e50d84d30e2/62594fddd654fc29fcc07359_cb48d2a8d4991281d7a6a95d2f58195e.svg\" height=\"20\" alt=\"Discord Logo\"/>](https://discord.gg/erBPnKwz7R)\n\n_This is the source repository for **lnav**, visit [https://lnav.org](https://lnav.org) for a high level overview._\n\n# LNAV -- The Logfile Navigator\n\nThe Logfile Navigator is a log file viewer for the terminal.  Given a\nset of files/directories, **lnav** will:\n\n- decompress as needed;\n- detect their format;\n- merge the files together by time into a single view;\n- tail the files, follow renames, find new files in directories;\n- build an index of errors and warnings;\n- [pretty-print JSON-lines](https://docs.lnav.org/en/latest/formats.html#json-lines).\n\nThen, in the **lnav** TUI, you can:\n\n- jump quickly to the previous/next error ([press `e`/`E`](https://docs.lnav.org/en/latest/hotkeys.html#spatial-navigation));\n- search using regular expressions ([press `/`](https://docs.lnav.org/en/latest/hotkeys.html#spatial-navigation));\n- highlight text with a regular expression ([`:highlight`](https://docs.lnav.org/en/latest/commands.html#highlight-pattern) command);\n- filter messages using [regular expressions](https://docs.lnav.org/en/latest/usage.html#regular-expression-match) or [SQLite expressions](https://docs.lnav.org/en/latest/usage.html#sqlite-expression);\n- pretty-print structured text ([press `P`](https://docs.lnav.org/en/latest/ui.html#pretty));\n- view a histogram of messages over time ([press `i`](https://docs.lnav.org/en/latest/ui.html#hist));\n- query messages using SQLite ([press `;`](https://docs.lnav.org/en/latest/sqlext.html))\n\n## Screenshot\n\nThe following screenshot shows a mix of syslog and web access log\nfiles.  Failed requests are shown in red.  Identifiers, like IP\naddress and PIDs are semantically highlighted.\n\n[![Screenshot](docs/assets/images/lnav-front-page.png)](docs/assets/images/lnav-front-page.png)\n\n## Why not **just** use `tail`/`grep`/`less`?\n\nThe standard Unix utilities are great for processing raw text lines,\nhowever, they do not understand log messages.  Tail can watch\nmultiple files at a time, but it won't display messages in order by\ntime and you can't scroll backwards.  Grep will only find matching\nlines, but won't return a full multi-line log message.  Less can only\ndisplay a single file at a time.  Also, none of these basic tools \nhandle compressed files.\n\n## Try online before installing\n\nYou can SSH into a demo node to play with lnav before installing.\n\nThe \"playground\" account starts lnav with a couple of log files as\nan example:\n\n[`$ ssh playground@demo.lnav.org`](ssh://playground@demo.lnav.org)\n\nThe \"tutorial 1\" account is an interactive tutorial that can teach \nyou the basics of operation:\n\n[`$ ssh tutorial1@demo.lnav.org`](ssh://tutorial1@demo.lnav.org)\n\n## Installation\n\n[Download a statically-linked binary for Linux/MacOS from the release page](https://github.com/tstack/lnav/releases/latest#release-artifacts)\n\n### Brew on MacOS\n\n```console\n$ brew install lnav\n```\n\n## Usage\n\nSimply point **lnav** at the files or directories you want to\nmonitor, it will figure out the rest:\n\n```console\n$ lnav /path/to/file1 /path/to/dir ...\n```\n\nThe **lnav** TUI will pop up right away and begin indexing the \nfiles. Progress is displayed in the \"Files\" panel at the \nbottom. Once the indexing has finished, the LOG view will display \nthe log messages that were recognized[^1]. You can then use the \nusual hotkeys to move around the view (arrow keys or\n`j`/`k`/`h`/`l` to move down/up/left/right).\n\nSee the [Usage section](https://docs.lnav.org/en/latest/usage.html)\nof the online documentation for more information.\n\n[^1]: Files that do not contain log messages can be seen in the \n      TEXT view (reachable by pressing `t`).\n\n### Usage with `systemd-journald`\n\nOn systems running `systemd-journald`, you can use `lnav` as the pager:\n\n```\n$ journalctl | lnav\n```\n\nor in follow mode:\n\n```\n$ journalctl -f | lnav\n```\n\nSince `journalctl`'s default output format omits the year, if you are\nviewing logs which span multiple years you will need to change the\noutput format to include the year, otherwise `lnav` gets confused:\n\n```\n$ journalctl -o short-iso | lnav\n```\n\nIt is also possible to use `journalctl`'s json output format and `lnav`\nwill make use of additional fields such as PRIORITY and \\_SYSTEMD_UNIT:\n\n```\n$ journalctl -o json | lnav\n```\n\nIn case some MESSAGE fields contain special characters such as\nANSI color codes which are considered as unprintable by journalctl,\nspecifying `journalctl`'s `-a` option might be preferable in order\nto output those messages still in a non-binary representation:\n\n```\n$ journalctl -a -o json | lnav\n```\n\nIf using systemd v236 or newer, the output fields can be limited to\nthe ones actually recognized by `lnav` for increased efficiency:\n\n```\n$ journalctl -o json --output-fields=MESSAGE,PRIORITY,_PID,SYSLOG_IDENTIFIER,_SYSTEMD_UNIT | lnav\n```\n\nIf your system has been running for a long time, for increased\nefficiency you may want to limit the number of log lines fed into\n`lnav`, e.g. via `journalctl`'s `-n` or `--since=...` options.\n\nIn case of a persistent journal, you may want to limit the number\nof log lines fed into `lnav` via `journalctl`'s `-b` option.\n\n## Support\n\nPlease file issues on this repository or use the discussions section.\nThe following alternatives are also available:\n\n- [support@lnav.org](mailto:support@lnav.org)\n- [Discord](https://discord.gg/erBPnKwz7R)\n- [Google Groups](https://groups.google.com/g/lnav)\n\n## Links\n\n- [Main Site](https://lnav.org)\n- [**Documentation**](https://docs.lnav.org) on Read the Docs\n- [Internal Architecture](ARCHITECTURE.md)\n\n## Contributing\n\n- [Become a Sponsor on GitHub](https://github.com/sponsors/tstack)\n\n### Building From Source\n\n#### Prerequisites\n\nThe following software packages are required to build lnav:\n\n- gcc/clang  - A C++14-compatible compiler.\n- libpcre2   - The Perl Compatible Regular Expression v2 (PCRE2) library.\n- sqlite     - The SQLite database engine.  Version 3.9.0 or higher is required.\n- ncurses    - The ncurses text UI library.\n- readline   - The readline line editing library.\n- zlib       - The zlib compression library.\n- bz2        - The bzip2 compression library.\n- libcurl    - The cURL library for downloading files from URLs.  Version 7.23.0 or higher is required.\n- libarchive - The libarchive library for opening archive files, like zip/tgz.\n- wireshark  - The 'tshark' program is used to interpret pcap files.\n- cargo/rust - The Rust language is used to build the PRQL compiler.\n\n#### Build\n\nLnav follows the usual GNU style for configuring and installing software:\n\nRun `./autogen.sh` if compiling from a cloned repository.\n\n```console\n$ ./configure\n$ make\n$ sudo make install\n```\n\n## See Also\n\n[Angle-grinder](https://github.com/rcoh/angle-grinder) is a tool to slice and dice log files on the command-line.\nIf you're familiar with the SumoLogic query language, you might find this tool more comfortable to work with.\n"
        },
        {
          "name": "TESTS_ENVIRONMENT.in",
          "type": "blob",
          "size": 7.6728515625,
          "content": "#! /bin/bash\n\nunset NO_COLOR\nunset XDG_CONFIG_HOME\n\ntop_srcdir=\"@abssrcdir@\"\nexport top_srcdir\n\ntop_srcdir_parent=`dirname ${top_srcdir}`\nexport top_srcdir_parent\n\nsrcdir=\"@abssrcdir@/test\"\nexport srcdir\n\n# The top build directory, derived from the path to this script.\ntop_builddir=`dirname $0`\nexport top_builddir\n\nbuilddir=`pwd -P`\nexport builddir\n\nLNAV_VERSION=`${top_builddir}/src/lnav-test -V`\nexport LNAV_VERSION\n\nprefix=\"@prefix@\"\nexport prefix\n\ntest_dir=\"@abssrcdir@/test\"\nexport test_dir\n\n# Let the tests know whether bzip is supported or not.\nBZIP2_SUPPORT=\"@BZIP2_SUPPORT@\"\nexport BZIP2_SUPPORT\n\nBZIP2_CMD=\"@BZIP2_CMD@\"\nexport BZIP2_CMD\n\nXZ_CMD=\"@XZ_CMD@\"\nexport XZ_CMD\n\nTSHARK_CMD=\"@TSHARK_CMD@\"\nexport TSHARK_CMD\n\nLIBARCHIVE_LIBS=\"@LIBARCHIVE_LIBS@\"\nexport LIBARCHIVE_LIBS\n\n# The full path of the test case\ntest_file=$1\n# The base name of the test case\ntest_file_base=`basename $1`\n# The current test number for shell based tests.\ntest_num=0\n\nHOME=\"${top_builddir}/test/cfg/${test_file_base}\"\nexport HOME\n\nrm -rf \"${top_builddir}/test/cfg/${test_file_base}\"\nmkdir -p ${HOME}\n\ntest_hash=\"\"\n\nlnav_test=\"${top_builddir}/src/lnav-test\"\nexport lnav_test\n\nlnav=\"${top_builddir}/src/lnav\"\nexport lnav\n\nLNAV_LOG_PATH=\"${top_builddir}/test/test.log\"\nexport LNAV_LOG_PATH\n\nSFTP_TEST_URL=\"@SFTP_TEST_URL@\"\nexport SFTP_TEST_URL\n\nHAVE_SQLITE3_VALUE_SUBTYPE=\"@HAVE_SQLITE3_VALUE_SUBTYPE@\"\nexport HAVE_SQLITE3_VALUE_SUBTYPE\n\nHAVE_SQLITE3_ERROR_OFFSET=\"@HAVE_SQLITE3_ERROR_OFFSET@\"\nexport HAVE_SQLITE3_ERROR_OFFSET\n\n## BEGIN Functions\n\nLAST_TEST=\"\"\n\nLAST_CAP_TEST=\"\"\n\nhas_errors=\"\"\n\n#\n# Run a test case and capture its standard out and standard err.\n#\n# Usage: run_test <utility> [<argument> ...]\n#\n# Example:\n#\n#   To run rktimes and capture all of its stdio output:\n#\n#     run_test rktimes -V\n#\nrun_test() {\n    printf \"%s \\033[0;35m=============================================================\\033[0m\\n\" $(date -Iseconds)\n    LAST_TEST=(\"test: $@\")\n    echo \"${LAST_TEST[@]}\"\n    export test_num=`expr ${test_num} \\+ 1`\n    \"$@\" > ${test_file_base}_${test_num}.tmp 2> ${test_file_base}_${test_num}.err\n}\n\nrun_cap_test() {\n    LAST_CAP_TEST=(\"test: $@\")\n    local full_cmd=$(echo \"${LAST_CAP_TEST[@]}\" | sed -e \"s;${test_dir};{test_dir};g\" -e \"s;${top_srcdir};{top_srcdir};g\")\n    export test_hash=$(echo \"${full_cmd}\" | shasum | cut -f 1 -d ' ')\n    echo \"${full_cmd}\" > ${test_file_base}_${test_hash}.cmd\n    \"$@\" > ${test_file_base}_${test_hash}.out 2> ${test_file_base}_${test_hash}.err\n\n    sed -ibak \\\n        -e \"s;${prefix}/etc;{prefix}/etc;g\" \\\n        -e \"s;${LNAV_VERSION};{LNAV_VERSION};g\" \\\n        -e \"s;${test_dir};{test_dir};g\" \\\n        -e \"s;${builddir};{test_dir};g\" \\\n        -e \"s;${top_srcdir};{top_srcdir};g\" \\\n        -e \"s;${top_srcdir_parent};{top_srcdir_parent};g\" \\\n        -e \"s;${TMPDIR};{TMPDIR};g\" \\\n        -e \"s;/tmp/;{TMPDIR};g\" \\\n        -e \"s;lnav-user-${UID}-work;lnav-user-{uid}-work;g\" \\\n        ${test_file_base}_${test_hash}.out\n    echo\n    printf \"%s \\033[0;35m=============================================================\\033[0m\\n\" $(date -Iseconds)\n    printf '\\033[0;35mCommand\\033[0m: %s\\n' \"${full_cmd}\"\n    printf '\\033[0;32mBEGIN\\033[0m %s\\n' \"${test_file_base}_${test_hash}.out\"\n    cat \"${test_file_base}_${test_hash}.out\"\n    printf '\\033[0;32mEND\\033[0m   %s\\n' \"${test_file_base}_${test_hash}.out\"\n    if test -f ${srcdir}/expected/${test_file_base}_${test_hash}.out; then\n       diff -w -u \\\n           ${srcdir}/expected/${test_file_base}_${test_hash}.out \\\n           ${test_file_base}_${test_hash}.out \\\n           > ${test_file_base}_${test_hash}.diff\n       if test $? -ne 0; then\n           echo OUT: \"${full_cmd}\"\n           cat ${test_file_base}_${test_hash}.diff\n           echo \"FAIL! EXPECTED OUT DIFF\"\n           export has_errors=\"yes\"\n       fi\n    else\n       echo \"FAIL! EXPECTED OUT MISSING -- ${srcdir}/expected/${test_file_base}_${test_hash}.out\"\n       export has_errors=\"yes\"\n    fi\n\n    sed -ibak -E \\\n        -e \"s;${prefix}/etc;{prefix}/etc;g\" \\\n        -e \"s;${LNAV_VERSION};{LNAV_VERSION};g\" \\\n        -e \"s;${test_dir};{test_dir};g\" \\\n        -e \"s;${builddir};{builddir};g\" \\\n        -e \"s;${top_srcdir};{top_srcdir};g\" \\\n        -e \"s;${TMPDIR};{TMPDIR};g\" \\\n        -e \"s;/tmp/;{TMPDIR};g\" \\\n        -e \"s;lnav-user-${UID}-work;lnav-user-{uid}-work;g\" \\\n        -e 's;\"errorId\":\".+\";;g' \\\n        ${test_file_base}_${test_hash}.err\n    printf '\\033[0;31mBEGIN\\033[0m %s\\n' \"${test_file_base}_${test_hash}.err\"\n    cat \"${test_file_base}_${test_hash}.err\"\n    printf '\\033[0;31mEND\\033[0m   %s\\n' \"${test_file_base}_${test_hash}.err\"\n    if test -f ${srcdir}/expected/${test_file_base}_${test_hash}.err; then\n       diff -w -u ${srcdir}/expected/${test_file_base}_${test_hash}.err \\\n           ${test_file_base}_${test_hash}.err \\\n           > ${test_file_base}_${test_hash}.err.diff\n       if test $? -ne 0; then\n           echo ERR: \"${full_cmd}\"\n           cat ${test_file_base}_${test_hash}.err.diff\n           echo \"FAIL! EXPECTED ERR DIFF\"\n           export has_errors=\"yes\"\n       fi\n    else\n       echo \"FAIL! EXPECTED ERR MISSING\"\n       export has_errors=\"yes\"\n    fi\n}\n\n#\n# Check the output generated by a run_test() call.\n#\n# Usage: check_output <fail message> {Expected output on stdin}\n#\n# Example:\n#\n#   To check the output of 'rktimes -V' and print out 'Unable to get version?'\n#   if the output doesn't match:\n#\n#     run_test rktimes -V\n#     check_output \"Unable to get version?\" <<EOF\n#     0.5\n#     EOF\n#\ncheck_output() {\n    sed -ibak \\\n        -e \"s;${test_dir};{test_dir};g\" \\\n        -e \"s;${top_srcdir};{top_srcdir};g\" \\\n        ${test_file_base}_${test_num}.tmp\n    diff -w -u - ${test_file_base}_${test_num}.tmp > ${test_file_base}_${test_num}.diff\n    if test $? -ne 0; then\n        echo \"${LAST_TEST[@]}\"\n        echo $1\n        cat ${test_file_base}_${test_num}.diff\n\t    exit 1\n    fi\n}\n\ncheck_output_ws() {\n    diff -u - ${test_file_base}_${test_num}.tmp > ${test_file_base}_${test_num}.diff\n    if test $? -ne 0; then\n        echo \"${LAST_TEST[@]}\"\n        echo $1\n        cat ${test_file_base}_${test_num}.diff\n\t    exit 1\n    fi\n}\n\ntest_filename() {\n    echo ${test_file_base}_${test_num}.tmp\n}\n\ntest_err_filename() {\n    echo ${test_file_base}_${test_num}.err\n}\n\ncheck_error_output() {\n    sed -ibak \\\n        -e \"s;${test_dir};{test_dir};g\" \\\n        -e \"s;${top_srcdir};{top_srcdir};g\" \\\n        ${test_file_base}_${test_num}.err\n    diff -w -u - ${test_file_base}_${test_num}.err \\\n        > ${test_file_base}_${test_num}.err.diff\n    if test $? -ne 0; then\n        echo \"${LAST_TEST[@]}\"\n        echo $1\n        cat ${test_file_base}_${test_num}.err.diff\n        exit 1\n    fi\n}\n\n#\n# Grep for a string in the output generated by a run_test() call.\n#\n# Usage: grep_output_for <string> <fail message>\n#\n# Example:\n#\n#   To check the output of 'cbhey -l' for 'IDL:Foobar:1.0' and print out\n#   'Unable to list supported interfaces?' if it is not found:\n#\n#     run_test cbhey -l\n#     grep_output_for \"IDL:Foobar:1.0\" \"Unable to list supported interface?\"\n#\ngrep_output_for() {\n    if grep -q $1 ${test_file_base}_${test_num}.tmp > /dev/null 2>&1; then\n\t:\n    else\n\techo \"${test_file_base}_${test_num}.tmp: $2\"\n\texit 1\n    fi\n}\n\non_error_log() {\n  if test $? -ne 0; then\n    echo $1 > /dev/stderr\n    cat ${test_file_base}_${test_num}.tmp\n    cat ${test_file_base}_${test_num}.err\n  fi\n}\n\non_error_fail_with() {\n    if test $? -ne 0; then\n\techo $1 > /dev/stderr\n\tcat ${test_file_base}_${test_num}.tmp\n\tcat ${test_file_base}_${test_num}.err\n\texit 1\n    fi\n}\n\n## END Functions\n\n\n# Finally, run the test...\n\nif test -x $1 && test `basename $1 .sh` == `basename $1`; then\n    exec $*\nelse\n    # Shell script\n    shift\n    . ${test_file}\nfi\n\ncleanup() {\n  if test \"${has_errors}\"x = \"yes\"x; then\n    exit 1\n  fi\n}\n\ntrap \"cleanup\" EXIT\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.5810546875,
          "content": "version: \"{build}\"\nimage: Visual Studio 2022\n\nenvironment:\n  matrix:\n  - cygwin: cygwin64\n    cygsetup: setup-x86_64.exe\n\ninstall:\n  - C:\\%cygwin%\\%cygsetup% -qnNdOX -R C:/%cygwin% -l C:/%cygwin%/var/cache/setup -P libpcre2-devel -P libncurses-devel -P libreadline-devel -P zlib-devel -P libbz2-devel -P libsqlite3-devel -P libcurl-devel -P libarchive-devel\n\nbuild_script:\n  - C:\\%cygwin%\\bin\\sh -lc \"uname -a && gcc --version && cd /cygdrive/c/projects/lnav && ./autogen.sh && ./configure && make && strip src/lnav.exe && ldd src/lnav.exe\"\n\nartifacts:\n  - path: src\\lnav.exe\n    name: lnav.exe\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.546875,
          "content": "#! /bin/sh\n\n\nif test x\"${AUTORECONF}\" = x\"\"; then\n    autoreconf -V 1>/dev/null 2>/dev/null\n    if test $? -eq 0; then\n        AUTORECONF=autoreconf\n    fi\nfi\n\nif test x\"${AUTORECONF}\" != x\"\"; then\n    ${AUTORECONF} -vfi -I m4\nelse\n    AUTOCONF=${AUTOCONF:-autoconf}\n    AUTOMAKE=${AUTOMAKE:-automake}\n    AUTOHEADER=${AUTOHEADER:-autoheader}\n    ACLOCAL=${ACLOCAL:-aclocal}\n\n    ${AUTOCONF} --version\n    ${AUTOMAKE} --version\n\n    ${ACLOCAL} -I m4 -I .\n    ${AUTOHEADER} -I .\n    ${AUTOMAKE} --add-missing --copy --force-missing --foreign\n    ${AUTOCONF}\nfi\n"
        },
        {
          "name": "cleanup_expected.sh",
          "type": "blob",
          "size": 0.3349609375,
          "content": "#!/usr/bin/env bash\n\nsrcdir=\"$1\"\nbuilddir=\"$2\"\n\nfor fname in \"${srcdir}\"/expected/*.out; do\n  stem=$(basename \"$fname\" | sed -e 's/.out$//')\n\n  if ! test -f \"${builddir}/$stem.cmd\"; then\n    echo \"removing $fname\"\n    guilt rm \"$fname\"\n    echo \"removing ${srcdir}/expected/${stem}.err\"\n    guilt rm \"${srcdir}/expected/${stem}.err\"\n  fi\ndone\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 10.5419921875,
          "content": "AC_INIT([lnav],[0.12.3],[lnav@googlegroups.com],[lnav],[http://lnav.org])\nAC_CONFIG_SRCDIR([src/lnav.cc])\nAC_CONFIG_MACRO_DIR([m4])\nAM_INIT_AUTOMAKE([foreign subdir-objects])\nAM_SILENT_RULES([yes])\n\nAC_PREFIX_DEFAULT(/usr)\n\nAC_CANONICAL_HOST\nAX_PROG_CC_FOR_BUILD\nAX_PROG_CXX_FOR_BUILD\n\nAX_PTHREAD()\nLIBS=\"$PTHREAD_LIBS $LIBS\"\nCFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\nCC=\"$PTHREAD_CC\"\nCXX=\"$PTHREAD_CXX\"\nCXXFLAGS=\"$CXXFLAGS $PTHREAD_CFLAGS\"\n\nAC_LANG(C++)\nAX_CXX_COMPILE_STDCXX_17([noext], [mandatory])\n\ndnl abssrcdir is the absolute path to the source base (regardless of where\ndnl you are building it)\nAS_CASE([x$srcdir],\n    [x/*],\n    AS_VAR_SET(abssrcdir, $srcdir),\n    AS_VAR_SET(abssrcdir, `cd $srcdir; pwd`)\n)\n\nAC_SUBST(abssrcdir)\n\nCXX=`echo $CXX | sed -e 's/-std=gnu++11//g'`\nCPPFLAGS=\"$CPPFLAGS -D_ISOC99_SOURCE -D__STDC_LIMIT_MACROS -D_GNU_SOURCE -DUSE_OS_TZDB=1 -DHAS_REMOTE_API=0\"\n\nAC_ARG_ENABLE([debug],\n              AS_HELP_STRING([--enable-debug],\n                             [Compile with symbols]))\n\nAS_VAR_IF([enable_profiling], [yes],\n      [CFLAGS=`echo $CFLAGS | sed 's/-O2//g'`\n       CXXFLAGS=`echo $CXXFLAGS | sed 's/-O2//g'`],\n      [enable_debug=no]dnl\n)\n\nAC_ARG_VAR(SFTP_TEST_URL)\n\nAC_PROG_INSTALL\nAC_PROG_RANLIB\nAM_PROG_AR\nAC_PROG_LN_S\nAC_PROG_MAKE_SET\n\nAC_PATH_PROG(BASH, [bash])\nAC_PATH_PROG(CARGO_CMD, [cargo])\nAC_PATH_PROG(BZIP2_CMD, [bzip2])\nAC_PATH_PROG(RE2C_CMD, [re2c])\nAM_CONDITIONAL(HAVE_RE2C, test x\"$RE2C_CMD\" != x\"\")\nAC_PATH_PROG(XZ_CMD, [xz])\nAC_PATH_PROG(TSHARK_CMD, [tshark])\nAC_PATH_PROG(CHECK_JSONSCHEMA, [check-jsonschema])\n\nAC_CHECK_SIZEOF(off_t)\nAC_CHECK_SIZEOF(size_t)\n\nAC_CHECK_FUNC(mkostemp,\n    AC_DEFINE([HAVE_MKOSTEMP], [1],\n        [Have the mkostemp() function]\n    )\n)\n\nAC_STRUCT_TIMEZONE\n\nAC_ARG_ENABLE([static],\n              AS_HELP_STRING([--enable-static],\n                             [Enable static linking]))\n\nAC_SEARCH_LIBS(openpty, util)\nAC_SEARCH_LIBS(gzseek, z, [], [AC_MSG_ERROR([libz required to build])])\nAC_SEARCH_LIBS(BZ2_bzopen, bz2,\n     AS_VAR_SET(BZIP2_SUPPORT, 1),\n     AS_VAR_SET(BZIP2_SUPPORT, 0))\nAC_SUBST(BZIP2_SUPPORT)\nAC_SEARCH_LIBS(dlopen, dl)\nAC_SEARCH_LIBS(backtrace, execinfo)\nLIBCURL_CHECK_CONFIG([], [7.23.0], [], [AC_MSG_ERROR([libcurl required to build])], [test x\"${enable_static}\" = x\"yes\"])\n\n# Sometimes, curses depends on these libraries being linked in...\nAC_ARG_ENABLE([tinfo],\n    AS_HELP_STRING([--disable-tinfo],\n        [Disable linking with tinfo, enabled by default]),\n    [], [enable_tinfo=\"yes\"]\n)\n\nAS_IF([test \"x${enable_tinfo}\" != \"xno\"],\n    [dnl\n    AC_MSG_NOTICE([Trying to link with tinfo])\n    AC_SEARCH_LIBS(cur_term, [tinfow tinfo],\n        AC_MSG_NOTICE([Linking with tinfo]),\n        AC_MSG_WARN([libtinfo not found])\n    )\n    ],\n    AC_MSG_NOTICE([Building with tinfo linking disabled])\n)\n\ndnl libgpm is required on some systems where there is a misconfigured ncurses\ndnl and gpm libraries with interdependencies. This check is not required on OS X.\nAS_CASE([\"$host_os\"],\n    [darwin*],\n    [],\n    AC_SEARCH_LIBS(Gpm_Open, [gpm :libgpm.so.2],\n       AS_VAR_SET(HAVE_GPM, \"1\"),\n       AC_MSG_WARN(m4_join([ ],\n                   [libgpm not found. If build fails later],\n                   [consider installing gpm dev package])dnl\n       )\n    )\n)\n\nAC_CHECK_HEADERS(execinfo.h pty.h util.h zlib.h bzlib.h libutil.h sys/ttydefaults.h libproc.h)\n\ndnl Experimental SIMD features.\nAC_ARG_ENABLE([simd],\n    AS_HELP_STRING([--enable-simd], [Try and enable simd optimizations]),\n    [\n     AS_CASE([\"$enable_simd\"],\n             [no], [enable_simd=\"no\"],\n             [yes | \"\"],[enable_simd=\"yes\"])\n     ],\n     []\n)\n\nAS_IF([test \"x$enable_simd\" = \"xyes\"], [\n       AC_CHECK_HEADERS(x86intrin.h)\n])\n\n\nAC_ARG_WITH([system_doctest],\n    AS_HELP_STRING(\n        [--with-system-doctest],\n        [Use the system provided doctest library rather than the bundled one]\n    ),\n    [], []\n)\n\nAS_IF([test \"x$with_system_doctest\" = \"xyes\"], [\n    AC_CHECK_HEADERS(doctest/doctest.h)\n    AS_IF([test \"x$ac_cv_header_doctest_doctest_h\" != \"xyes\"], [\n        AC_MSG_ERROR([system doctest not found])dnl\n    ])\n])\nAS_IF([test \"x$with_system_doctest\" != \"xyes\"], [\n    CPPFLAGS=\"-I\\$(top_srcdir)/src/third-party/doctest-root $CPPFLAGS\"\n])\n\n\nLNAV_WITH_JEMALLOC\n\nLNAV_WITH_LOCAL_YAJL\n\nAX_WITH_CURSES\n\nAS_VAR_IF([ax_cv_curses],[yes],[],\n    AC_MSG_ERROR([requires an X/Open-compatible Curses library with color])dnl\n)\n\nAX_PATH_LIB_ARCHIVE\nAX_CHECK_PCRE2([8], [], [AC_MSG_ERROR([pcre2 is required to build])])\nAX_PATH_LIB_READLINE\n\nAX_CODE_COVERAGE\n\nLNAV_WITH_SQLITE3(\"3.9.0\")\n\nAC_ARG_ENABLE(\n    [system-paths],\n    AS_HELP_STRING([--disable-system-paths],\n                   [Add extra system paths]),,[enable_system_paths=yes])\n\nif test x\"${enable_system_paths}\" != x\"no\"; then\n    for defdir in /opt/local /usr/local; do\n        if test -d \"$defdir/include\"; then\n            echo \"Adding include path: $defdir/include\"\n            CPPFLAGS=\"$CPPFLAGS -I$defdir/include\"\n        fi\n    done\n\n    for defdir in /opt/local /usr/local /usr /; do\n\n        if test -d \"$defdir/lib64\"; then\n            LDFLAGS=\"$LDFLAGS -L$defdir/lib64\"\n        fi\n        if test -d \"$defdir/lib\"; then\n            LDFLAGS=\"$LDFLAGS -L$defdir/lib\"\n        fi\n\n        if test -d \"$defdir/lib/x86_64-linux-gnu\"; then\n            LDFLAGS=\"$LDFLAGS -L$defdir/lib/x86_64-linux-gnu\"\n        fi\n    done\nelse\n    echo \"Not including extra system paths\"\nfi\n\ndnl case \"$host_os\" in\ndnl     *)\ndnl         # AC_DEFINE([_XOPEN_SOURCE], [500], [Need pread])\ndnl         AC_DEFINE([_DEFAULT_SOURCE], [1], [Need pread])\ndnl         AC_DEFINE([_BSD_SOURCE], [1], [Need pread])\ndnl         ;;\ndnl esac\n\nAC_DEFINE([_XOPEN_SOURCE_EXTENDED], [1], [Wide character support for ncurses])\n\nAS_VAR_SET(ALL_LDFLAGS, \"$SQLITE3_LDFLAGS $READLINE_LDFLAGS $LIBARCHIVE_LDFLAGS $LIBCURL $LDFLAGS\")\n\nAS_VAR_SET(static_lib_list,\n           [\"libncurses.a libncursesw.a libreadline.a libsqlite3.a libz.a libtinfo.a libtinfow.a\"])\nAS_VAR_SET(static_lib_list,\n           [\"$static_lib_list libpcre2-8.a libncursesw.a libbz2.a\"])\nAS_VAR_SET(static_lib_list,\n           [\"$static_lib_list libgpm.a libcurl.a libcrypto.a libssl.a libssh2.a\"])\nAS_VAR_SET(static_lib_list,\n           [\"$static_lib_list libnghttp2.a liblzma.a libcrypto.a libzstd.a libldap.a\"])\nAS_VAR_SET(static_lib_list,\n           [\"$static_lib_list libarchive.a libidn2.a libgssapi_krb5.a libbrotlidec-static.a\"])\nAS_VAR_SET(static_lib_list,\n           [\"$static_lib_list librtmp.a libiconv.a liblz4.a liblber.a libunistring.a\"])\n\nif test x\"${enable_static}\" = x\"yes\"; then\n    case \"$host_os\" in\n    darwin*)\n        STATIC_LDFLAGS=\"$STATIC_LDFLAGS -Wl,-search_paths_first\"\n        ;;\n    esac\n\n    AX_CHECK_LINK_FLAG([-static-libgcc], [STATIC_LDFLAGS=\"$STATIC_LDFLAGS -static-libgcc\"])\n\n    STATIC_LDFLAGS=\"$STATIC_LDFLAGS -L`pwd`/src/static-libs\"\n    AX_CHECK_LINK_FLAG([-static-libstdc++],\n                       [STATIC_LDFLAGS=\"$STATIC_LDFLAGS -static-libstdc++\"])\n    # This is a hack to link against static libraries instead of shared\n    # so that we can build a mostly statically link exe that can\n    # be downloaded and used right away.  This is required for OS X and\n    # will, hopefully, make a static binary that is compatible with\n    # many different versions of Linux.\n    AS_MKDIR_P(src/static-libs)\n    rm -f src/static-libs/*.a\n    for libflag in $ALL_LDFLAGS; do\n        case $libflag in\n        -Lstatic-libs)\n        ;;\n        -L*)\n                libdir=`echo $libflag | sed -e 's/-L//'`\n                for slib in $static_lib_list; do\n                    if test -e \"$libdir/$slib\" -a ! -e \"src/static-libs/$slib\"; then\n                        ln -sf \"$libdir/$slib\" src/static-libs/.\n                    fi\n                done\n        ;;\n        esac\n    done\n\n    for slib in $static_lib_list; do\n        AC_MSG_CHECKING(for static library $slib)\n        if test -e \"src/static-libs/$slib\"; then\n            found_slib=`readlink src/static-libs/$slib`\n            AC_MSG_RESULT($found_slib)\n        else\n            AC_MSG_RESULT(not found)\n        fi\n    done\nfi\nAC_SUBST(STATIC_LDFLAGS)\n\nAS_CASE([\"$host_os\"],\n    [darwin*],\n    [LDFLAGS=\"$LDFLAGS -framework CoreFoundation\"],\n    [\n    curses_lib=$(echo $CURSES_LIB | sed -e 's/-l//')\n    AS_IF([test $? -eq 0],\n        [\n        AS_CASE([\"$curses_lib\"],\n            [ncurses*],\n            [AS_VAR_SET_IF(HAVE_GPM, [],\n                [\n                AC_MSG_NOTICE([Checking for libgpm dependency])\n                AS_VAR_SET(saved_LDFLAGS, $LDFLAGS)\n                AS_VAR_SET(LDFLAGS, \"$STATIC_LDFLAGS $LDFLAGS\")\n                AS_VAR_SET(saved_LIBS, $LIBS)\n                AC_CHECK_LIB($curses_lib, mousemask,\n                    [\n                    AS_VAR_SET(LDFLAGS, $saved_LDFLAGS)\n                    AS_VAR_SET(LIBS, $saved_LIBS)\n                    ],\n                    AC_MSG_ERROR([libgpm development libraries are required to build]))dnl\n                ])dnl\n            ])\n        ],\n        [\n        AC_MSG_WARN([Unable to test for dependepncy on gpm.])\n        AC_MSG_WARN([If build fails during make consider installing libgpm development libraries.])\n        ])dnl\n    ]dnl\n)\n\nsaved_location=$(pwd)\ncd $srcdir\nversion=$(echo $(git describe --abbrev=7 --dirty --always --tags 2>/dev/null) | sed -e 's/^v//' 2>/dev/null)\ncd $saved_location\nAS_IF([test $? -eq 0],\n    [version=$(echo $version | tr -d '\\n')\n     version=${version:-${PACKAGE_VERSION}}\n     AC_DEFINE_UNQUOTED([VCS_PACKAGE_STRING], [\"$PACKAGE_NAME $version\"],\n         [VCS package string])],\n    AC_DEFINE_UNQUOTED([VCS_PACKAGE_STRING], [\"$PACKAGE_STRING\"], [VCS package string]))\n\nAM_CONDITIONAL(HAVE_CARGO, test x\"$CARGO_CMD\" != x\"\")\nAM_CONDITIONAL(USE_INCLUDED_YAJL, test $HAVE_LOCAL_YAJL -eq 0)\nAM_CONDITIONAL(HAVE_LIBCURL, test x\"$LIBCURL\" != x\"\")\nAM_CONDITIONAL([CROSS_COMPILING], [ test x\"$cross_compiling\" != x\"no\" ])\nAM_CONDITIONAL(HAVE_CHECK_JSONSCHEMA, test x\"$CHECK_JSONSCHEMA\" != x\"\")\n\nAS_VAR_SET(USER_CXXFLAGS, [\"$CXXFLAGS\"])\nAC_SUBST(USER_CXXFLAGS)\n\nAC_CONFIG_HEADERS([src/config.h])\nAC_CONFIG_FILES([Makefile])\nAC_CONFIG_FILES([TESTS_ENVIRONMENT])\nAC_CONFIG_FILES([tools/Makefile])\nAC_CONFIG_FILES([src/Makefile])\nAC_CONFIG_FILES([src/base/Makefile])\nAC_CONFIG_FILES([src/formats/logfmt/Makefile])\nAC_CONFIG_FILES([src/fmtlib/Makefile])\nAC_CONFIG_FILES([src/pcrepp/Makefile])\nAC_CONFIG_FILES([src/pugixml/Makefile])\nAC_CONFIG_FILES([src/tailer/Makefile])\nAC_CONFIG_FILES([src/yajl/Makefile])\nAC_CONFIG_FILES([src/yajlpp/Makefile])\nAC_CONFIG_FILES([src/third-party/base64/lib/Makefile])\nAC_CONFIG_FILES([src/third-party/date/src/Makefile])\nAC_CONFIG_FILES([src/third-party/notcurses/src/lib/Makefile])\nAC_CONFIG_FILES([src/third-party/scnlib/src/Makefile])\nAC_CONFIG_FILES([test/Makefile])\n\nAC_OUTPUT\n"
        },
        {
          "name": "crashd",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "example-scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "ext",
          "type": "tree",
          "content": null
        },
        {
          "name": "lnav.1",
          "type": "blob",
          "size": 3.2666015625,
          "content": ".\\\" Some roff macros, for reference:\r\n.\\\" .nh        disable hyphenation\r\n.\\\" .hy        enable hyphenation\r\n.\\\" .ad l      left justify\r\n.\\\" .ad b      justify to both left and right margins\r\n.\\\" .nf        disable filling\r\n.\\\" .fi        enable filling\r\n.\\\" .br        insert line break\r\n.\\\" .sp <n>    insert n+1 empty lines\r\n.\\\" for manpage-specific macros, see man(7)\r\n.\\\" Define macros\r\n.de Vb \\\" Begin verbatim text                                                                                                                                                       \r\n.ft CW\r\n.nf\r\n.ne \\\\$1\r\n..\r\n.de Ve \\\" End verbatim text\r\n.ft R\r\n.fi\r\n..\r\n.TH LNAV \"1\" \"April 2024\"\r\n.SH NAME\r\nlnav \\- log file viewer for the terminal\r\n.SH SYNOPSIS\r\n.B lnav \r\n[options] [logfile1 logfile2 ...]\r\n.SH DESCRIPTION\r\nThe Logfile Navigator, lnav, is a log file viewer for the terminal.\r\nGiven a set of files/directories, lnav will:\r\n.TP\r\n- decompress as needed;\r\n.TP\r\n- detect their format;\r\n.TP\r\n- merge the files together by time into a single view;\r\n.TP\r\n- tail the files, follow renames, find new files in directories;\r\n.TP\r\n- build an index of errors and warnings;\r\n.TP\r\n- pretty-print JSON-lines.\r\n.SH KEY BINDINGS\r\n.TP\r\n?\r\nView/leave the online help text.\r\n.TP\r\nq\r\nQuit the program.\r\n.SH OPTIONS\r\n.TP\r\n\\fB\\-h\\fR\r\nPrint help and exit\r\n.TP\r\n\\fB\\-H\\fR\r\nDisplay the internal help text.\r\n.TP\r\n\\fB\\-I\\fR path\r\nAdd the given configuration directory to the search path.\r\n.TP\r\n\\fB\\-W\\fR\r\nPrint warnings related to lnav's configuration.\r\n.TP\r\n\\fB\\-u\\fR\r\nUpdate formats installed from git repositories.\r\n.TP\r\n\\fB\\-d\\fR file\r\nWrite debug messages to the given file.\r\n.TP\r\n\\fB\\-V\\fR\r\nPrint version information.\r\n.TP\r\n\\fB\\-r\\fR\r\nRecursively load files from the given directories.\r\n.TP\r\n\\fB\\-R\\fR\r\nLoad older rotated log files as well.\r\n.TP\r\n\\fB\\-c\\fR cmd\r\nExecute a command after the files have been loaded.\r\n.TP\r\n\\fB\\-f\\fR path\r\nExecute the commands in the given file.\r\n.TP\r\n\\fB\\-e\\fR cmd\r\nExecute a shell command-line.\r\n.TP\r\n\\fB\\-t\\fR\r\nPrepend timestamps to the lines of data being read in\r\non the standard input.\r\n.TP\r\n\\fB\\-n\\fR\r\nRun without the curses UI.  (headless mode)\r\n.TP\r\n\\fB\\-N\\fR\r\nDo not open the default syslog file if no files are given.\r\n.TP\r\n\\fB\\-q\\fR\r\nQuiet mode.  Do not print the log messages after executing all of the commands.\r\n.SS \"Optional arguments:\"\r\n.TP\r\nlogfile1\r\nThe log files or directories to view.  If a\r\ndirectory is given, all of the files in the\r\ndirectory will be loaded.\r\n.SH MANAGEMENT-MODE OPTIONS\r\n.TP\r\n\\fB\\-i\\fR\r\nInstall the given format files in the $HOME/.lnav/formats/installed directory\r\nand exit.\r\n.TP\r\n\\fB\\-m\\fR\r\nSwitch to the management command-line mode.  This mode is\r\nused to work with lnav's configuration.\r\n.TP\r\n\\fB\\-C\\fR\r\nCheck the configuration and exit.  The log format files will be loaded and\r\nchecked.  Any files given on the command-line will be loaded checked to make\r\nsure they match a log format.\r\n.SH EXAMPLES\r\nTo load and follow the syslog file:\r\n.PP\r\n.Vb 1\r\n\\&    lnav\r\n.Ve\r\n.PP\r\nTo load all of the files in /var/log:\r\n.PP\r\n.Vb 1\r\n\\&    lnav /var/log\r\n.Ve\r\n.PP\r\nTo watch the output of make with timestamps prepended:\r\n.PP\r\n.Vb 1\r\n\\&    make 2>&1 | lnav \\-t\r\n.Ve\r\n.SH AUTHOR\r\nThis manual page was written by Salvatore Bonaccorso <carnil@debian.org>\r\nfor the Debian system (but may be used by others).\r\n"
        },
        {
          "name": "lnav.cfg",
          "type": "blob",
          "size": 19.6318359375,
          "content": "\n#\n# General options\n#\n\n# The type of line endings\nnewlines                      = lf       # auto/lf/crlf/cr\n\n# The original size of tabs in the input\ninput_tab_size                = 8        # number\n\n# The size of tabs in the output (only used if align_with_tabs=true)\noutput_tab_size               = 8        # number\n\n# The ascii value of the string escape char, usually 92 (\\). (Pawn)\nstring_escape_char            = 92       # number\n\n#\n# Indenting\n#\n\n# The number of columns to indent per level (usually 2, 3, 4, or 8)\nindent_columns                = 4        # number\n\n# How to use tabs when indenting code\n# 0=spaces only\n# 1=indent with tabs, align with spaces\n# 2=indent and align with tabs\nindent_with_tabs              = 0        # number\n\n# Whether to indent strings broken by '\\' so that they line up\nindent_align_string           = true    # false/true\n\n# Spaces to indent '{' from level\nindent_brace                  = 0        # number\n\n# Whether braces are indented to the body level\nindent_braces                 = false    # false/true\n\n# Disabled indenting function braces if indent_braces is true\nindent_braces_no_func         = false    # false/true\n\n# Indent based on the size of the brace parent, ie 'if' => 3 spaces, 'for' => 4 spaces, etc.\nindent_brace_parent           = false    # false/true\n\n# Whether the 'namespace' body is indented\nindent_namespace              = false    # false/true\n\n# Whether the 'class' body is indented\nindent_class                  = true     # false/true\n\n# Whether to indent the stuff after a leading class colon\nindent_class_colon            = true     # false/true\n\n# Whether to indent continued function call parameters one indent level (true) or aligns instead of indent (false)\nindent_func_call_param        = false    # false/true\n\n# The number of spaces to indent a continued '->' or '.'\n# Usually set to indent_columns.\nindent_member                 = 0        # number\n\n# Spaces to indent single line ('//') comments on lines before code\nindent_sing_line_comments     = 0        # number\n\n# Spaces to indent 'case' from 'switch'\nindent_switch_case            = 0        # number\n\n# Spaces to indent 'case' body from 'case'\nindent_case_body              = 4        # number\n\n# Spaces to indent '{' from 'case'\nindent_case_brace             = 0        # number\n\n# Whether to indent comments found in first column\nindent_col1_comment           = false    # false/true\n\n# How to indent goto labels (>0=absolute column where 1 is the leftmost column, <=0=subtract from brace indent)\nindent_label                  = 1        # number\n\n# If an open paren is followed by a newline, indent the next line so that it lines up after the open paren (not recommended)\nindent_paren_nl               = false    # false/true\n\n# If an open square is followed by a newline, indent the next line so that it lines up after the open square (not recommended)\nindent_square_nl              = false    # false/true\n\n#\n# Spacing options\n#\n\n# Add or remove space around arithmetic operator '+', '-', '/', '*', etc\nsp_arith                      = force    # ignore/add/remove/force\n\n# Add or remove space around assignment operator '=', '+=', etc\nsp_assign                     = force    # ignore/add/remove/force\n\n# Add or remove space around boolean operators '&&' and '||'\nsp_bool                       = force    # ignore/add/remove/force\n\n# Add or remove space around compare operator '<', '>', '==', etc\nsp_compare                    = force    # ignore/add/remove/force\n\n# Add or remove space inside '(' and ')'\nsp_inside_paren               = remove   # ignore/add/remove/force\n\n# Add or remove space between nested parens\nsp_paren_paren                = remove   # ignore/add/remove/force\n\n# Add or remove space between ')' and '{'\nsp_paren_brace                = ignore   # ignore/add/remove/force\n\n# Add or remove space before pointer star '*'\nsp_before_ptr_star            = force    # ignore/add/remove/force\n\n# Add or remove space between pointer stars '*'\nsp_between_ptr_star           = remove   # ignore/add/remove/force\n\n# Add or remove space after pointer star '*'\nsp_after_ptr_star             = remove   # ignore/add/remove/force\n\n# Add or remove space before reference sign '&'\nsp_before_byref               = force    # ignore/add/remove/force\n\n# Add or remove space after reference sign '&'\nsp_after_byref                = ignore   # ignore/add/remove/force\n\n# Add or remove space before '<>'\nsp_before_angle               = remove   # ignore/add/remove/force\n\n# Add or remove space after '<>'\nsp_after_angle                = force    # ignore/add/remove/force\n\n# Add or remove space before '(' of 'if', 'for', 'switch', and 'while'\nsp_before_sparen              = force    # ignore/add/remove/force\n\n# Add or remove space inside if-condition '(' and ')'\nsp_inside_sparen              = remove   # ignore/add/remove/force\n\n# Add or remove space after ')' of 'if', 'for', 'switch', and 'while'\nsp_after_sparen               = force    # ignore/add/remove/force\n\n# Add or remove space between ')' and '{' of 'if', 'for', 'switch', and 'while'\nsp_sparen_brace               = add      # ignore/add/remove/force\n\n# Add or remove space before empty statement ';' on 'if', 'for' and 'while'\nsp_special_semi               = ignore   # ignore/add/remove/force\n\n# Add or remove space before ';'\nsp_before_semi                = remove   # ignore/add/remove/force\n\n# Add or remove space before '[' (except '[]')\nsp_before_square              = ignore   # ignore/add/remove/force\n\n# Add or remove space before '[]'\nsp_before_squares             = ignore   # ignore/add/remove/force\n\n# Add or remove space inside '[' and ']'\nsp_inside_square              = remove   # ignore/add/remove/force\n\n# Add or remove space after ','\nsp_after_comma                = force    # ignore/add/remove/force\n\n# Add or remove space between 'operator' and operator sign\nsp_after_operator             = ignore   # ignore/add/remove/force\n\n# Add or remove space after cast\nsp_after_cast                 = remove   # ignore/add/remove/force\n\n# Add or remove space between 'sizeof' and '('\nsp_sizeof_paren               = remove   # ignore/add/remove/force\n\n# Add or remove space after the tag keyword (Pawn)\nsp_after_tag                  = ignore   # ignore/add/remove/force\n\n# Add or remove space inside enum '{' and '}'\nsp_inside_braces_enum         = force    # ignore/add/remove/force\n\n# Add or remove space inside struct/union '{' and '}'\nsp_inside_braces_struct       = force    # ignore/add/remove/force\n\n# Add or remove space inside '{' and '}'\nsp_inside_braces              = force    # ignore/add/remove/force\n\n# Add or remove space inside '<' and '>'\nsp_inside_angle               = remove   # ignore/add/remove/force\n\n# Add or remove space between return type and function name (a minimum of 1 is forced except for pointer return types)\nsp_type_func                  = ignore   # ignore/add/remove/force\n\n# Add or remove space between function name and '(' on function declaration\nsp_func_proto_paren           = remove   # ignore/add/remove/force\n\n# Add or remove space between function name and '(' on function definition\nsp_func_def_paren             = remove   # ignore/add/remove/force\n\n# Add or remove space inside empty function '()'\nsp_inside_fparens             = ignore   # ignore/add/remove/force\n\n# Add or remove space inside function '(' and ')'\nsp_inside_fparen              = remove   # ignore/add/remove/force\n\n# Add or remove space between ']' and '(' when part of a function call.\nsp_square_fparen              = ignore   # ignore/add/remove/force\n\n# Add or remove space between ')' and '{' of function\nsp_fparen_brace               = add      # ignore/add/remove/force\n\n# Add or remove space between function name and '(' on function calls\nsp_func_call_paren            = remove   # ignore/add/remove/force\n\n# Add or remove space between a constructor/destructor and the open paren\nsp_func_class_paren           = remove   # ignore/add/remove/force\n\n# Add or remove space between 'return' and '('\nsp_return_paren               = add      # ignore/add/remove/force\n\n# Add or remove space between macro and value\nsp_macro                      = ignore   # ignore/add/remove/force\n\n# Add or remove space between macro function ')' and value\nsp_macro_func                 = ignore   # ignore/add/remove/force\n\n# Add or remove space between 'else' and '{' if on the same line\nsp_else_brace                 = ignore   # ignore/add/remove/force\n\n# Add or remove space between '}' and 'else' if on the same line\nsp_brace_else                 = ignore   # ignore/add/remove/force\n\n#\n# Code alignment (not left column spaces/tabs)\n#\n\n# Whether to keep non-indenting tabs\nalign_keep_tabs               = false    # false/true\n\n# Whether to use tabs for alinging\nalign_with_tabs               = false    # false/true\n\n# Whether to bump out to the next tab when aligning\nalign_on_tabstop              = false    # false/true\n\n# Whether to left-align numbers\nalign_number_left             = true     # false/true\n\n# The span for aligning variable definitions (0=don't align)\nalign_var_def_span            = 1        # number\n\n# Whether the pointer star is part of the variable name or not\nalign_var_def_star            = true     # false/true\n\n# The threshold for aligning variable definitions (0=no limit)\nalign_var_def_thresh          = 12       # number\n\n# Whether to align the colon in struct bit fields\nalign_var_def_colon           = true     # false/true\n\n# Whether to align inline struct/enum/union variable definitions\nalign_var_def_inline          = true     # false/true\n\n# The span for aligning on '=' in assignments (0=don't align)\nalign_assign_span             = 1        # number\n\n# The threshold for aligning on '=' in assignments (0=no limit)\nalign_assign_thresh           = 12       # number\n\n# The span for aligning on '=' in enums (0=don't align)\nalign_enum_equ_span           = 4        # number\n\n# The threshold for aligning on '=' in enums (0=no limit)\nalign_enum_equ_thresh         = 0        # number\n\n# The span for aligning struct/union (0=don't align)\nalign_var_struct_span         = 99       # number\n\n# The span for aligning struct initializer values (0=don't align)\nalign_struct_init_span        = 3        # number\n\n# The minimum space between the type and the synonym of a typedef\nalign_typedef_gap             = 1        # number\n\n# The span for aligning single-line typedefs (0=don't align)\nalign_typedef_span            = 5        # number\n\n# Controls the positioning of the '*' in typedefs. Just try it.\n# 0: Align on typdef type, ignore '*'\n# 1: The '*' is part of type name: typedef int  *pint;\n# 2: The '*' is part of the type: typedef int *  pint;\nalign_typedef_star_style      = 1        # number\n\n# The span for aligning comments that end lines (0=don't align)\nalign_right_cmt_span          = 3        # number\n\n# The span for aligning function prototypes (0=don't align)\nalign_func_proto_span         = 0        # number\n\n# Whether to align macros wrapped with a backslash and a newline\nalign_nl_cont                 = true     # false/true\n\n# The minimum space between label and value of a preprocessor define\nalign_pp_define_gap           = 4        # number\n\n# The span for aligning on '#define' bodies (0=don't align)\nalign_pp_define_span          = 3        # number\n\n#\n# Newline adding and removing options\n#\n\n# Try to limit code width to N number of columns\ncode_width                    = 79        # number\n\n# Whether to collapse empty blocks between '{' and '}'\nnl_collapse_empty_body        = true     # false/true\n\n# Don't touch one-line function bodies inside a class xx { } body\nnl_class_leave_one_liners     = true     # false/true\n\n# Add or remove newlines at the start of the file\nnl_start_of_file              = remove   # ignore/add/remove/force\n\n# The number of newlines at the start of the file (only used if nl_start_of_file is 'add' or 'force'\nnl_start_of_file_min          = 0        # number\n\n# Add or remove newline at the end of the file\nnl_end_of_file                = force    # ignore/add/remove/force\n\n# The number of newlines at the end of the file (only used if nl_end_of_file is 'add' or 'force')\nnl_end_of_file_min            = 1        # number\n\n# Add or remove newline between '=' and '{'\nnl_assign_brace               = remove   # ignore/add/remove/force\n\n# The number of newlines after a block of variable definitions\nnl_func_var_def_blk           = 1        # number\n\n# Add or remove newline between function call and '('\nnl_fcall_brace                = add      # ignore/add/remove/force\n\n# Add or remove newline between 'enum' and '{'\nnl_enum_brace                 = remove   # ignore/add/remove/force\n\n# Add or remove newline between 'struct and '{'\nnl_struct_brace               = remove   # ignore/add/remove/force\n\n# Add or remove newline between 'union' and '{'\nnl_union_brace                = remove   # ignore/add/remove/force\n\n# Add or remove newline between 'if' and '{'\nnl_if_brace                   = remove   # ignore/add/remove/force\n\n# Add or remove newline between '}' and 'else'\nnl_brace_else                 = add      # ignore/add/remove/force\n\n# Add or remove newline between 'else if' and '{'\n# If set to ignore, nl_if_brace is used instead\nnl_elseif_brace               = remove   # ignore/add/remove/force\n\n# Add or remove newline between 'else' and '{'\nnl_else_brace                 = remove   # ignore/add/remove/force\n\n# Add or remove newline between 'for' and '{'\nnl_for_brace                  = remove   # ignore/add/remove/force\n\n# Add or remove newline between 'while' and '{'\nnl_while_brace                = remove   # ignore/add/remove/force\n\n# Add or remove newline between 'do' and '{'\nnl_do_brace                   = remove   # ignore/add/remove/force\n\n# Add or remove newline between '}' and 'while' of 'do' statement\nnl_brace_while                = remove   # ignore/add/remove/force\n\n# Add or remove newline between 'switch' and '{'\nnl_switch_brace               = remove   # ignore/add/remove/force\n\n# Whether to put a newline before 'case' statement\nnl_before_case                = true     # false/true\n\n# Whether to put a newline after 'case' statement\nnl_after_case                 = false    # false/true\n\n# Newline between namespace and {\nnl_namespace_brace            = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'template<>' and 'class'\nnl_template_class             = add      # ignore/add/remove/force\n\n# Add or remove newline between 'class' and '{'\nnl_class_brace                = remove   # ignore/add/remove/force\n\n# Add or remove newline after each ',' in the constructor member initialization\nnl_class_init_args            = add      # ignore/add/remove/force\n\n# Add or remove newline between return type and function name in definition\nnl_func_type_name             = ignore   # ignore/add/remove/force\n\n# Add or remove newline after '(' in a function declaration\nnl_func_decl_start            = ignore   # ignore/add/remove/force\n\n# Add or remove newline after each ',' in a function declaration\nnl_func_decl_args             = ignore   # ignore/add/remove/force\n\n# Add or remove newline before the ')' in a function declaration\nnl_func_decl_end              = ignore   # ignore/add/remove/force\n\n# Add or remove newline between function signature and '{'\nnl_fdef_brace                 = add      # ignore/add/remove/force\n\n# Whether to put a newline after 'return' statement\nnl_after_return               = true     # false/true\n\n# Whether to put a newline after semicolons, except in 'for' statements\nnl_after_semicolon            = false    # false/true\n\n# Whether to put a newline after brace open\nnl_after_brace_open           = false    # false/true\n\n# Whether to alter newlines in '#define' macros\nnl_define_macro               = false    # false/true\n\n# Whether to not put blanks after '#ifxx', '#elxx', or before '#endif'\nnl_squeeze_ifdef              = true     # false/true\n\n# Add or remove newline before 'if'\nnl_before_if                  = ignore   # ignore/add/remove/force\n\n# Add or remove newline after 'if'\nnl_after_if                   = ignore   # ignore/add/remove/force\n\n# Add or remove newline before 'for'\nnl_before_for                 = ignore   # ignore/add/remove/force\n\n# Add or remove newline after 'for'\nnl_after_for                  = ignore   # ignore/add/remove/force\n\n# Add or remove newline before 'while'\nnl_before_while               = ignore   # ignore/add/remove/force\n\n# Add or remove newline after 'while'\nnl_after_while                = ignore   # ignore/add/remove/force\n\n# Add or remove newline before 'switch'\nnl_before_switch              = ignore   # ignore/add/remove/force\n\n# Add or remove newline after 'switch'\nnl_after_switch               = ignore   # ignore/add/remove/force\n\n# Add or remove newline before 'do'\nnl_before_do                  = ignore   # ignore/add/remove/force\n\n# Add or remove newline after 'do'\nnl_after_do                   = ignore   # ignore/add/remove/force\n\n#\n# Positioning options\n#\n\n# The position of boolean operators in wrapped expressions\npos_bool                      = trail    # ignore/lead/trail\n\n# The position of colons between constructor and member initialization\npos_class_colon               = lead     # ignore/lead/trail\n\n#\n# Blank line options\n#\n\n# The maximum consecutive newlines\nnl_max                        = 4        # number\n\n# The number of newlines after a function prototype, if followed by another function prototype\nnl_after_func_proto           = 0        # number\n\n# The number of newlines after a function prototype, if not followed by another function prototype\nnl_after_func_proto_group     = 2        # number\n\n# The number of newlines after '}' of the function body\nnl_after_func_body            = 2        # number\n\n# The minimum number of newlines before a multi-line comment (doesn't apply if after a brace open)\nnl_before_block_comment       = 2        # number\n\n# Whether to remove blank lines after '{'\neat_blanks_after_open_brace   = true     # false/true\n\n# Whether to remove blank lines before '}'\neat_blanks_before_close_brace = true     # false/true\n\n#\n# Code modifying options (non-whitespace)\n#\n\n# Add or remove braces on single-line 'do' statement\nmod_full_brace_do             = add      # ignore/add/remove/force\n\n# Add or remove braces on single-line 'for' statement\nmod_full_brace_for            = add      # ignore/add/remove/force\n\n# Add or remove braces on single-line function defintions. (Pawn)\nmod_full_brace_function       = ignore   # ignore/add/remove/force\n\n# Add or remove braces on single-line 'if' statement\nmod_full_brace_if             = add      # ignore/add/remove/force\n\n# Don't remove braces around statements that span N newlines\nmod_full_brace_nl             = 0        # number\n\n# Add or remove braces on single-line 'while' statement\nmod_full_brace_while          = add      # ignore/add/remove/force\n\n# Add or remove unnecessary paren on 'return' statement\nmod_paren_on_return           = remove   # ignore/add/remove/force\n\n# Whether to change optional semicolons to real semicolons\nmod_pawn_semicolon            = false    # false/true\n\n#\n# Comment modifications\n#\n\n# Whether to group cpp-comments that look like they are in a block\ncmt_cpp_group                 = false    # false/true\n\n# Whether to put an empty '/*' on the first line of the combined cpp-comment\ncmt_cpp_nl_start              = false    # false/true\n\n# Whether to put a newline before the closing '*/' of the combined cpp-comment\ncmt_cpp_nl_end                = false    # false/true\n\n# Whether to change cpp-comments into c-comments\ncmt_cpp_to_c                  = true     # false/true\n\n# Whether to put a star on subsequent comment lines\ncmt_star_cont                 = true     # false/true\n\n#\n# Preprocessor options\n#\n\n# Add or remove indent of preprocessor directives\npp_indent                     = ignore   # ignore/add/remove/force\n\n# Add or remove space between # and, say, define\npp_space                      = ignore   # ignore/add/remove/force\n"
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "overlay-ports",
          "type": "tree",
          "content": null
        },
        {
          "name": "release",
          "type": "tree",
          "content": null
        },
        {
          "name": "snapcraft.yaml",
          "type": "blob",
          "size": 1.990234375,
          "content": "name: lnav\nadopt-info: lnav\nsummary: Log File Navigator\ndescription: |\n  The Log File Navigator, **lnav** for short, is an advanced log file viewer\n  for the small-scale.\nicon: docs/assets/images/favicon.png\n\nbase: core20\ngrade: stable\nconfinement: strict\n\nenvironment:\n  LOCPATH: $SNAP/usr/lib/locale\n  GIT_TEMPLATE_DIR: $SNAP/usr/share/git-core/templates\n  GIT_EXEC_PATH: $SNAP/usr/lib/git-core\n\nplugs:\n  etc-lnav:\n    interface: system-files\n    read:\n      - /etc/lnav\n\napps:\n  lnav:\n    command: usr/bin/lnav\n    plugs:\n      - etc-lnav\n      - home            # optional, allows to read log files from home directory\n      - log-observe     # required, provide access to system logs in /var/log\n      - network         # required, lnav uses sendto() with UNIX domain socket\n      - removable-media\n      - ssh-keys\n      - x11\n\nparts:\n  selective-checkout:\n    source: https://github.com/Lin-Buo-Ren/selective-checkout.git\n    source-tag: v2.0.2\n    plugin: dump\n    build-packages:\n    # Uncomment the VCS your main part is using\n    - git\n    - curl\n    - jq\n    - sed\n\n    #- mercurial\n    #- subversion\n    stage:\n      - scriptlets/selective-checkout\n    prime:\n      - -*\n  lnav:\n    after:\n      - selective-checkout\n    plugin: autotools\n    autotools-configure-parameters:\n      - CFLAGS=\"-O2\"\n      - CXXFLAGS=\"-O2\"\n    source: https://github.com/tstack/lnav.git\n    source-depth: 500\n    override-pull: |\n      snapcraftctl pull\n\n      \"$SNAPCRAFT_STAGE\"/scriptlets/selective-checkout --debug --force-snapshot\n    build-packages:\n      - build-essential\n      - cargo\n      - libarchive-dev\n      - libcurl4-gnutls-dev\n      - libpcre2-dev\n      - libsqlite3-dev\n      - libncursesw6\n      - libreadline-dev\n      - zlib1g-dev\n      - libbz2-dev\n      - libgpm-dev\n      - rustc\n    stage-packages:\n      - zlib1g\n      - git-core\n      - libcurl4\n      - libncursesw6\n      - libpcre2-8-0\n      - libgpm2\n      - libarchive13\n      - libicu66\n      - libxml2\n      - locales-all\n      - ssh\n      - tshark\n      - xclip\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "update_expected_output.sh",
          "type": "blob",
          "size": 2.6611328125,
          "content": "#!/usr/bin/env bash\n\nsrcdir=\"$1\"\nbuilddir=\"$2\"\n\nexpected_dir=\"$1/expected\"\nexpected_am=\"${expected_dir}/expected.am\"\n\nmkdir -p \"${expected_dir}\"\n\nfor fname in $(ls -t ${builddir}/*.cmd); do\n  echo\n  echo \"Checking test ${fname}:\"\n  echo -n \"  \"\n  cat \"${fname}\"\n  stem=$(echo $fname | sed -e 's/.cmd$//')\n  exp_stem=\"${srcdir}/expected/$(basename $stem)\"\n\n  echo \"    \\$(srcdir)/%reldir%/$(basename \"$stem\").out \\\\\" >> \"${expected_am}.tmp\"\n  echo \"    \\$(srcdir)/%reldir%/$(basename \"$stem\").err \\\\\" >> \"${expected_am}.tmp\"\n\n  if ! test -f \"${exp_stem}.out\"; then\n    printf '\\033[0;32mBEGIN\\033[0m %s.out\\n' \"${stem}\"\n    cat \"${stem}.out\"\n    printf '\\033[0;32mEND\\033[0m   %s.out\\n' \"${stem}\"\n    if test x\"${AUTO_APPROVE}\" = x\"\"; then\n      echo \"Expected stdout is missing, update with the above?\"\n      select yn in \"Yes\" \"No\"; do\n        case $yn in\n          Yes ) cp \"${stem}.out\" \"${exp_stem}.out\"; break;;\n          No ) exit;;\n        esac\n      done\n    else\n      cp \"${stem}.out\" \"${exp_stem}.out\"\n    fi\n  else\n    if ! cmp \"${exp_stem}.out\" \"${stem}.out\"; then\n      diff --color=always -u \"${exp_stem}.out\" \"${stem}.out\"\n      if test x\"${AUTO_APPROVE}\" = x\"\"; then\n        echo \"Expected stdout is different, update with the above?\"\n        select yn in \"Yes\" \"No\"; do\n          case $yn in\n            Yes ) cp \"${stem}.out\" \"${exp_stem}.out\"; break;;\n            No ) exit;;\n          esac\n        done\n      else\n        cp \"${stem}.out\" \"${exp_stem}.out\"\n      fi\n    fi\n  fi\n\n  if ! test -f \"${exp_stem}.err\"; then\n    printf '\\033[0;31mBEGIN\\033[0m %s.err\\n' \"${stem}\"\n    cat \"${stem}.err\"\n    printf '\\033[0;31mEND\\033[0m   %s.err\\n' \"${stem}\"\n    if test x\"${AUTO_APPROVE}\" = x\"\"; then\n      echo \"Expected stderr is missing, update with the above?\"\n      select yn in \"Yes\" \"No\"; do\n        case $yn in\n          Yes ) cp \"${stem}.err\" \"${exp_stem}.err\"; break;;\n          No ) exit;;\n        esac\n      done\n    else\n      cp \"${stem}.err\" \"${exp_stem}.err\"\n    fi\n  else\n    if ! cmp \"${exp_stem}.err\" \"${stem}.err\"; then\n      diff --color=always -u \"${exp_stem}.err\" \"${stem}.err\"\n      if test x\"${AUTO_APPROVE}\" = x\"\"; then\n        echo \"Expected stderr is different, update with the above?\"\n        select yn in \"Yes\" \"No\"; do\n          case $yn in\n            Yes ) cp \"${stem}.err\" \"${exp_stem}.err\"; break;;\n            No ) exit;;\n          esac\n        done\n      else\n        cp \"${stem}.err\" \"${exp_stem}.err\"\n      fi\n    fi\n  fi\ndone\n\ncat > \"${expected_am}.new\" <<EOF\n\nEXPECTED_FILES = \\\\\n$(sort \"${expected_am}.tmp\")\n    \\$()\nEOF\n\nif ! cmp \"${expected_am}\" \"${expected_am}.new\"; then\n  cp \"${expected_am}.new\" \"${expected_am}\"\nfi\n\nrm \"${expected_am}.new\"\nrm \"${expected_am}.tmp\"\n"
        },
        {
          "name": "vcpkg-configuration.json",
          "type": "blob",
          "size": 0.384765625,
          "content": "{\n  \"default-registry\": {\n    \"kind\": \"git\",\n    \"baseline\": \"cbf4a6641528cee6f172328984576f51698de726\",\n    \"repository\": \"https://github.com/microsoft/vcpkg\"\n  },\n  \"registries\": [\n    {\n      \"kind\": \"artifact\",\n      \"location\": \"https://github.com/microsoft/vcpkg-ce-catalog/archive/refs/heads/main.zip\",\n      \"name\": \"microsoft\"\n    }\n  ],\n  \"overlay-ports\": [\n    \"overlay-ports\"\n  ]\n}\n"
        },
        {
          "name": "vcpkg.json",
          "type": "blob",
          "size": 0.1572265625,
          "content": "{\n  \"dependencies\": [\n    \"bzip2\",\n    \"curl\",\n    \"libarchive\",\n    \"libunistring\",\n    \"ncurses\",\n    \"pcre2\",\n    \"readline\",\n    \"sqlite3\",\n    \"zlib\"\n  ]\n}\n"
        }
      ]
    }
  ]
}