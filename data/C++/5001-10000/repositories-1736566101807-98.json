{
  "metadata": {
    "timestamp": 1736566101807,
    "page": 98,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "neutralinojs/neutralinojs",
      "stars": 7538,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2529296875,
          "content": "# Developer tools' files\n.lite_workspace.lua\n.vscode\n\n# Neutralinojs-related files\n.storage\n*.log\n\n# Autogenerated files and folders\n*.obj\n/bin/.tmp\n/bin/neutralino-*\n/bin/resources.neu\n/bin/resources/js/neutralino.*\n\n# Platform specific \nThumbs.db\n.DS_Store\n"
        },
        {
          "name": ".releasezri",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 30.65234375,
          "content": "# Changelog\n\nAdd all code changes (features, deprecations, and enhancements) under the `Unreleased` topic to track changes for\nthe next release. Once the changes are released,\nrename `Unreleased` topic with the new version tag. Finally, create a new `Unreleased` topic for future changes.\n\n## Unreleased\n\n### API: window\n- Implement the `window.snapshot(path)` function to capture the window and save it as a PNG image file.\n\n### Improvements/bugfixes\n- Fix the empty string returning issue with the `window.getTitle()` function on Windows.\n\n### DevOps\n- Fix minor string formatting issues in the BuildZri automation script.\n\n## v5.5.0\n\n### Client library and globals injection\nNeutralinojs apps usually load globals and the client library using HTTP requests via the static server. This mechanism implements a generic way to enable the native API on all supported Neutralinojs app modes. However, this strategy prevents\nenabling the Neutralinojs native API if the primary web app is loaded through another server (local or remote). Now, app developers can inject globals and\nthe client library script into external web services using `window.injectGlobals` and `window.injectClientLibrary` configuration options on the window mode.\n\nThese options are available as CLI options as well (`--window-inject-globals` and `--window-inject-client-library`), so developers can use these options via the `window.create(url, options)` function. This code injection feature currently works with HTTP URLs only (can be used with local and remote HTTP web servers).\n\n### Preload script support\nThe framework already lets developers set pre-defined global variables for each web page by using custom globals from the app configuration and activating the `window.injectGlobals` option. However, custom globals are static values, so app developers can't define dynamic values or run a custom JavaScript source using globals and `window.injectGlobals` features. This framework version implements the `window.injectScript` configuration option to inject and run custom JavaScript source file before running the primary webapp's JavaScript sources.\n\nFor example, the following setup loads an initialization script from the `preload.js` file:\n\n```json\n\"window\": {\n  \"injectScript\": \"/resources/js/preload.js\"\n}\n```\n\nDevelopers can use native API calls within initialization scripts if `window.injectClientLibrary` is set to `true`. This option also can be set via `--window-inject-script` and `window.create(url, options)`.\n\n### Configuration\n- Implement the `dataLocation` config option to let users set data directory for framework data storage purposes, such as saving window state, storing extracted resources, etc. If `app` (default) is used, the framework will store app data within the app directory and if `system` is used, the framework will use a platform-specific data directory path (i.e., `/home/username/.local/share/<appId>` on GNU/Linux systems) to store app data. App developers can obtain the current data directory string from the `NL_DATAPATH` global variable.\n- Implement the `storageLocation` config option to let developers use system data directory for the Neutralinojs storage. If this option is 'app' (default), the framework store storage files within the app directory. If `system` is used, the framework will use the platform-specific standard data directory. In both `app` and `system` modes, the framework will use the `.storage` sub-directory for storage files.\n\n### Improvements/bugfixes\n- Search and load WebKitGtk functions dynamically from the available webkit2gtk library: `libwebkit2gtk-4.0-37` or `libwebkit2gtk-4.1-0`.\n- Fix the auto-reload issue during app development.\n\n## v5.4.0\n\n### API: resources\n- Implement `getFiles()`, `extractFile(path, dest)`, `readFile(path)`, and `readBinaryFile(path)` functions via the `resources` module for reading the files embedded in the `resources.neu` resources bundle. These functions works only if the framework loaded resources from the resource bundle -- they will throw `NE_RS_APIRQRF` if the framework loaded resources from the resources directory.\n\n### API: window\n- Implement `minimize()`, `unminimize()`, and `isMinimized()` functions to minimize and restore the native app window. \n\n### Improvements/bugfixes\n\n- Fix issues with the `clipboard.writeImage()` function on Windows.\n- Fix the unwanted delay with the `window.exitProcessOnClose` configuration option on Windows.\n- Fix a bug with the `window.isFullScreen()` function on GNU/Linux-based platforms.\n- Fix duplicate virtual PID issues with the `os.spawnProcess()` function.\n\n## v5.3.0\n\n### Configuration: window transparency on Windows\nWindow transparency support was added on the Windows version of the Neutralinojs framework. This can be activated with `modes.window.transparent` configuration property or `--window-transparent` command-line option. Unlike in other platforms, Windows native window becomes borderless (window controls will be hidden) with the activation of the transparent mode. \n\n### API: os\n- Add the `temp` key for the supported directory list of the `os.getPath(pathKey)` function.\n\n### API: filesystem\n- Add the `filesystem.getAbsolutePath(path)` function to let developers get a full path string from a relative path string.\n- Add the `filesystem.getRelativePath(path, ?base)` function to get a relative path from a path and a base path.\n- Add the `filesystem.getPathParts(path)` to parse and get path segments like filename, extension, root path, etc. \n\n### Improvements/bugfixes\n- Fix Unicode issues in the Windows version with filesystem, storage, and general modules.\n- Fix standard output/error data display issues on Windows\n\n## v5.2.0\n\n### Configuration: Configless framework initialization\nNow, developers can load the Neutralinojs framework without creating a `neutralino.config.json` file. Now, there is no mandatory configuration properties since Neutralinojs set reasonable defaults. Developers can launch the framework using the following methods without a configuration file:\n\n```bash\n# Loading a remote URL\n./framework-bin --url=https://neutralino.js.org/docs\n\n# Launches a local static web app\n./framework-bin --url=\"/resources/\" --window-title=\"My web app\" --enable-server\n```\n### Configuration\n- New internal CLI arguments added: `--single-page-serve`, `--enable-native-api` and `--document-root=<string>`\n\n### Core: Static server SPA (Single Page App) serving\nEarlier, Neutralinojs app developers had to use hash routing with their frontend-library-based apps since the internal static server didn't offer an inbuilt URL rewrite logic for SPAs (Single Page Apps). Now, they can use the `singlePageServe: true` option in the app configuration file to activate SPA routing. If this setting is on, the static server will serve the main `index.html` file when it receives directory requests that possibly send HTTP `404` status.\n\nFor example, the `/invoices` path serves the main `index.html` file if there is no directory named `invoices` which holds an `index.html` file. \n\n### API: window\n- Improve the behaviour of the `window.show()` function on Windows. Now, this function flashes the window if it's already in foreground and activates the window properly if it's minimized.\n\n### Improvements/bugfixes\n- Fix path issues with the `defaultPath` option in system file dialogs on Windows. \n\n## v5.1.0\n\n### Configuration: window transparency\nNeutralinojs offers the inbuilt borderless mode and draggable region API to create custom window frames using HTML and CSS. Earlier, Neutralinojs used a default opaque color (usually white) for the window and webview layer, so app developers couldn't make custom CSS-styled window frames transparent or implement custom window frame shapes (i.e., rounded edges). Now, it offers the `window.transparent` boolean flag to activate window transparency. \n\nIf the transparency mode is on, the Neutralinojs window and webview use an alpha color layer and become transparent, so developers can use the `rgba` CSS color function on `body` background to handle the transparency level of the app. \n\nThe transparency mode can be activated using the `--window-transparent=<bool>` internal command-line option too.\n\n*Note: This feature is not implemented for the Windows operating system yet.* \n\n### API: clipboard\n- Implement `clipboard.readImage()` and `clipboard.writeImage(image)` functions to work with clipboard image data.\n- Expose the `clipboard.clear()` function to clear system clipboard.\n- Expose the `clipboard.getFormat()` function to check the system clipboard data format. This function returns `text`, `image`, and `unknown` enum values based on existing data on the clipboard.\n\n## v5.0.0\n\n### API: Reading, writing with standard streams\n- Implement `app.readProcessInput(readAll=false)` for reading string data from the standard input stream. This function can read a single line or multiple lines at once.\n- Implement `app.writeProcessOutput` and `app.writeProcessError` for sending string data to standard output and error streams accordingly.\n\n### API: filesystem\n- Enable default recursive behavior in the `filesystem.createDirectory` function.\n- Add `filesystem.copy`, `filesystem.move`, and `filesystem.remove` functions.\n- Add `{recursive}` options object to `filesystem.readDirectory(path, options)` activate recursive directory listing.\n\n### API: os\n- Accept stdin with the background mode of the `os.execCommand` function.\n\n### Core: security\n- Now, all app clients and extensions require a valid connect token (A part of the `NL_TOKEN`) to connect to the Neutralinojs framework WebSocket server to receive app events.\n- The framework now sends the access token, connect token, port, and extension identifier to extension processes via the standard input, so other processes can't read them by scanning the process list.\n- The WebSocket client connection origin is checked during the HTTP/WS handshake to make sure that only local clients connect with a specific Neutralinojs app that runs on window, browser, or Chrome mode. Any URL origin is allowed for the cloud mode.\n- The above security enhancements fix two security advisories on GitHub. \n\n### Global variables\n- Now the `NL_ARCH` global variable returns the same value that `computer.getArch` returns.\n\n### Deprecations\n- Removed `filesystem.removeFile`, `filesystem.removeDirectory`, `filesystem.copyFile`, and `filesystem.moveFile` functions.\n- Extensions won't receive `--nl-port`, `--nl-token`, and `--nl-extension-id` as command-line arguments. Now the framework sends these via stdin as a JSON string. \n\n## v4.15.0\n\n### Configuration: custom user agent string\nDevelopers sometimes use the user agent string to indentify the client in server-side and client-side source codes. Now, Neutralinojs lets app developers extend the default user agent string with a custom string via the `window.extendUserAgentWith` configuration property and the `--window-extend-user-agent-with=<string>` command-line option, as shown in the following example:\n```js\n\"window\": {\n  // ---\n  \"extendUserAgentWith\": \"MyAppClient\"\n}\n```\nThe above configuration extends the user agent string:\n\n```js\nconsole.log(navigator.userAgent)    // <Default UA> MyAppClient \n```\n\n### Configuration: custom configuration files\nThe Neutralinojs framework typically loads the application configuration content from the `neutralino.config.json` file, but sometimes app developers need to use a custom configuration filename during development (i.e., For separating production and development environments). Now, you can use the `--config-file=<filename>` internal command-line parameter to use a custom app configuration, as shown in the following example:\n\n```bash\n./myapp-linux_x64 --load-dir-res --config-file=neutralino-dev.config.json\n```\n\n## v4.14.1\n\n### DevOps\n- Use Windows 2019 server and macOS 11 (Big Sur) to compile framework release artifacts.\n- Set minimum supported macOS version via `MACOSX_DEPLOYMENT_TARGET=10.7`\n\n## v4.14.0\n\n### Filesystem API\n- Introduce the `filesystem.getWatchers` function to get all created watchers.\n- Add binary file reading support for the `filesystem.updateOpenedFile(id, action, data)` function. This function implements `readBinary` and `readAllBinary` actions and `dataBinary` output action in the `openedFile` global event.\n- Return the existing watcher identifier from `filesystem.createWatcher` if there is an existing active watcher for the given path.\n\n### OS API\n- Add a way to set current working directory for process creation functions: `os.execCommand(command, options)` now supports `cwd` via the options object and `os.spawnProcess(command, cwd)` accepts currently working directory via the second string parameter.\n\n### Improvements/bugfixes\n- Fix Unicode charactor issues in the tray menu on Windows.\n- Avoid including null bytes to file reader events initiated by the `filesystem.openFile` function.\n- Discard `window` method executions on non-window modes.\n\n### DevOps\n- Update external GitHub Action packages to their latest versions.\n- Fix issues of the failing test cases\n\n## v4.13.0\n\n### Core: persistent window state\n\nNow the framework stores the primary window state in a temporary file (JSON formatted) and loads during the startup process.\nThis feature stores and sets the window position (x, y coordinates), size (width and height), and maximized status. This feature is enabled by default in all platforms, but app developers can turn it off by using `false` for the `window.useSavedState` configuration attribute or `--window-use-saved-state` internal CLI argument.\n\nAlso, the window state loading status is available via the `NL_WSAVSTLOADED` global variable. The framework sets `true` for this boolean variable if the window state was loaded from the saved configuration.\n\n### Improvements/bugfixes\n- Fix several issues in the webview Windows code (i.e., Wait for the window close event, window style fixes, etc.).\n\n## v4.12.0\n\n### API: window\n- Add `window.center` to center the application window programmatically.\n\n### Core: configuration\n- Setting the initial window position via `modes.window.x` and `modes.window.y` integer config props.\n- Centering the window at startup via `modes.window.center` boolean config props.\n- Add config overrides for the startup window position: `--window-center=<true|false>`, `--window-x=<int>` and `--window-y=<int>`\n\n### Core: webview\n- Statically link the Webview2 loader library on Windows, so app developers can package their apps without including the `WebView2Loader.dll` file.\n\n### Improvements/bugfixes\n- Added Unicode characters support for Neutralinojs Windows.\n\n## v4.11.0\n\n### API: File watchers\n\nIn some scenarios, Neutralinojs app developers need to implement file watchers in their apps. Earlier, Neutralinojs API didn't offer a native file watcher API and developers had to use less-performant workarounds, such as making recursive `filesystem.readDirectory` calls. The new file watchers API lets you create native, cross-platform, event-based file watchers for filesystem paths with the following functions:\n\n- `filesystem.createWatcher(path)`: Creates a new file watcher for a given path and returns the watcher identifier.\n- `filesystem.removeWatcher(watcherId)`: Removes a files watcher based on a file watcher identifier.\n\nWhenever a filesystem change occurs, file watcher instances dispatch the `watchFile` event with the following data:\n\n- `id`: Watcher identifier\n- `action`: Filesystem change: `add`, `delete`, `modified`, and `moved`\n- `dir`: Directory path\n- `filename`: Modified file\n\n### Improvements/bugfixes\n\n- Fix the initial window flashing and hidden window state issues on Windows.\n- Fix data corruption in binary file appending.\n- Apply dark/light themes based on system preferences on Windows.\n\n## v4.10.0\n\n### DevOps\n\n- Generate official macOS `arm64` (For Apple M1 and higher devices) and universal binaries with the GitHub workflow.\n\n### Improvements/bugfixes\n\n- Add a [JSON schema](https://json-schema.org/) definition for the `neutralino.config.json` file.\n- Fix source code compilation issues on macOS `arm64` systems.\n\n### ESM/NPM support\n\nNeutralinojs typically stores the client library implementation in a separate file (`neutralino.js`). This approach makes Neutralinojs app development\nprocess easier with a globally exposed JavaScript object, `Neutralino`. But, modern web developers use ES modules and they usually like to fetch dependencies from NPM. So, now, developers can load the `__neutralino_globals.js` internal script (i.e., `<script src=\"__neutralino_globals.js\"></script>`) to load only globals. Then, they can use the client library implementation via `neutralino.mjs` with the neu CLI or from [`@neutralinojs/lib`](https://www.npmjs.com/package/@neutralinojs/lib) with a Node package manager.\n\n## v4.9.0\n\n### API: Custom methods\n\nNeutralinojs offers the extensions API to write custom backend code with any programming language, but extensions come with the following drawbacks that affect apps in several scenarios:\n\n- Extensions use a shared WebSocket for communication, so using direct C++ references (i.e., the window handler) is impossible within extensions.\n- The developer is responsible for packaging their extension binaries.\n- A C++-based extension is not fast as native C++-based code due to the WebSockets-based IPC.\n\nAlternatively, a developer can download the framework C++ code, modify it, and re-compile it. But, the developer may face issues while synching upstream code modifications. So, Neutralinojs offers a separate namespace, a function template, inbuilt helper functions (i.e., to get the window handler, validation, etc.), and a developer guide to add custom APIs to the Neutralinojs framework without updating the framework core.\n\nExample:\n\n```js\nlet res = await Neutralino.custom.fetch('https://neutralino.js.org');\n```\n\nIf developers make a custom API that others can use, we motivate them to contribute to the Neutralinojs framework by adding it to the main codebase.\n\nExample:\n\n```js\nlet res = await Neutralino.net.fetch('https://neutralino.js.org');\n```\n\nIf the developer adds a new custom method to the framework, the client library will automatically export it to the `Neutralino.custom` namespace by using the `NL_CMETHODS` internal global variable. The `Neutralino.custom.getMethods` function returns an array of custom methods similar to `NL_CMETHODS`.\n\n### API: File streams\n\nThe current Neutralinojs API offers non-stream-based (Promise-based but synchronous-like) functions for working with files. For example, the `filesystem.readFile` function reads the file content and retrieves data synchronously even though the WebSocket communication mechanism supports asynchronous patterns. However, the synchronous API lets developers work with files in a simple way, but they face the following issues in some scenarios:\n\n- Reading large files is not performance-friendly (The whole file content gets loaded into the memory).\n- Unable to work with dynamic file objects (i.e., Device files).\n- File descriptors are not persistent within the app lifecycle as they get destroyed after native API calls.\n\nTo solve this issue, we offer an event-based file stream API with the following functions/events:\n\n#### Functions\n\n- `filesystem.openFile`: Creates a file stream by openning a file.\n- `filesystem.updateOpenedFile`: Triggers a file `read`/`readAll` event or sets the file cursor.\n- `filesystem.getOpenedFileInfo`: Returns (awaited) information about the file stream (Props: `id`, `eof`, `pos`, and `lastRead`)\n\n#### Events\n\n- `openedFile`: Occurs per each file read event and whenever the file stream reaches `EOF`.\n\n## v4.8.0\n\n### API: os.getEnvs\n`os.getEnv` returns a value for a given environment variable key. Developers had to use alternative methods to retrieve a list of all environment variables with values. The `os.getEnvs` returns all environment variables as a JavaScript object similar to Node's [`process.env`](https://nodejs.dev/en/api/v18/process/#processenv).\n\n### API: filesystem\n- Added `pos` and `size` options for `readFile` and `readBinaryFile` methods to set the file cursor position and buffer size respectively.\n\n### API: storage.getKeys\nAdded the `storage.getKeys` function to get an array of Neutralinojs storage keys. Now, developers don't need to write their own functions to retrieve storage keys with the filesystem API.\n\n### API: computer.getMousePosition\nReturns the current mouse cursor position via a JavaScript object that has `x` and `y` props. This function is helpful for develping interactive desktop widgets on all supported platforms.\n\n### Bugfixes/improvements\n- Replaced string error codes with enums in the C++ source code.\n- Some refactorings done in C++ struct definitions and return values.\n\n## v4.7.0\n\n### API: System information API\nEalier, we had the `getMemoryInfo` function in the `computer` namespace to retrieve system memory statistics. Now, we have added more functions to get details about the CPU, operating system, kernel, and connected displays:\n\n- `computer.getArch`: Returns the CPU architecture. i.e, `x64`, `arm`, etc.\n- `computer.getKernelInfo`: Returns the operating system's kernel details.\n- `computer.getOSInfo`: Returns the operating system details.\n- `computer.getCPUInfo`: Returns the CPU details.\n- `computer.getDisplays`: Returns an array of all connected displays with the resolution, frequency-like information.\n\n### API: os dialogs\n- Add the `defaultPath` option to `showSaveDialog`, `showOpenDialog`, and `showFolderDialog` functions to set the initial path/filename of system dialogs.\n\n### DevOps\n- Run the test suite on Windows GitHub Actions instance.\n- Fix the `armhf` framework binary generation issue in the GitHub Actions workflow.\n\n### Bugfixes/improvements\n- Hide the automation info bar from the Chrome mode by default -- Developers can add the `--enable-automation` flag to the config file if they need the particular command-line switch.\n\n\n## v4.6.0\n\n### API: Process spawning API\nWe have `os.execCommand` for launching processes, but it's synchronous, meaning, the developer has to wait unti process completion to receive `pid`, `stdOut` and `stdErr`. `execCommand` is not suitable for long-running processes. The new spawning API offers API functions for handling long-running processes in a multi-threaded way.\n\n- `os.spawnProcess(command)`: Spawns a process and returns `id` (A virtual Neutralino-scoped pid) and `pid` (Operating system-level pid).\n- `os.getSpawnedProcesses()`: Returns a list of spawned processes.\n- `os.updateSpawnedProcess(id, action, data)`: Sends an action event for the spawned process. Supports the following actions:\n  - `stdIn`: Sends a string via the standard input stream. `data` is the input string.\n  - `stdInEnd`: Closes the standard input stream.\n  - `exit`: Terminates the spawned process.\n\n### Core: events\n- `spawnedProcess`: Dispatched when there is a change in the spawned process. `CustomEvent` gets triggered with the following object:\n```js\n{\n  id: <id>,\n  pid: <pid>,\n  action: <action>,\n  data: <data>\n}\n```\nAvailable actions:\n- `stdOut`: Outputs standard output data. `data` contains the standard output payload.\n- `stdErr`: Outputs standard error data. `data` contains the standard error payload.\n- `exit`: Notified when the process terminates. `data` contains the process exit code.\n\n\n### DevOps\n- Add official Linux ARM (armhf and arm64) binary build support for the standard release workflow and nightly build.\n\n### API: filesystem\n- Expose `createdAt` and `modifiedAt` JavaScript timestamps via the `filesystem.getStats` function.\n\n### Bugfixes/improvements\n- Hide the `.storage` directory (Neutralinojs storage location) on Windows.\n- Support using query parameters in resources URLs. i.e., `index.html?v=2.0` is supported, but caching is not yet implemented.\n- Show a user-friendly error message for Neutralinojs server initialization failures.\n\n## v4.5.0\n\n### Core: events\n- Added `windowFocus` and `windowBlur` native events.\n\n### DevOps\n- Use [BuildZri](https://github.com/codezri/buildzri) for C++ build automation.\n- Implement a new workflow for nightly releases. Developers can get the nightly release binaries via the `nightly` version tag.\n\n### Bugfixes/improvements\n- Search and dynamically load app indicator libraries on Linux. This enhancement supports Neutralinojs to start without a crash when there is no app indicator library present on the system.\n- Throw `NE_OS_TRAYIER` from the `os.setTray` function for initialization failures.\n- Fix binary file write error on Windows with the `filesystem.writeBinaryFile` function. This was fixed by using `LF` as the line breaker on all platforms as a portable solution. If the developer needs CRLF on Windows (or CR on Darwin), the developer needs to handle it explicitly with `NL_OS`.\n\n### Core: global variables\n- Add `NL_COMMIT` to hold framework's release commit. This is helpful to find the nightly release's code snapshot.\n\n## v4.4.0\n\n### API: window\n- Add `window.getPosition` to get the current window coordinates.\n\n### API: filesystem\n- Add `filesystem.appendFile` to append text content to a file. Thrown errors are similar to the `filesystem.writeFile` function.\n- Add `filesystem.appendBinaryFile` to append binary content to a file. Thrown errors are similar to the `filesystem.writeBinaryFile` function.\n\n### Dependencies\n- Use `ayatana-appindicator3-0.1` instead of `appindicator3-0.1` (Marked as obsolete in [Debian packages](https://www.debian.org/releases/bullseye/amd64/release-notes/ch-information.en.html#noteworthy-obsolete-packages))\n\n### Bugfixes/improvements\n- Dynamically call `SetProcessDpiAwarenessContext` function to support previous Windows versions.\n- Display the native method name with the `NE_RT_NATPRME` error payload.\n\n## v4.3.0\n\n### Core: auth\n- Added `tokenSecurity` to the configuration to improve the security of `NL_TOKEN`. Accepted values are `none` and `one-time`. If `none` is set, Neutralinojs server will always expose `NL_TOKEN` for any application instance, so you can open Neutralinojs apps from browser directly. If `one-time` (recommended) is set, Neutralinojs server expose `NL_TOKEN` only once and client persists the token in `sessionStorage`, so all other clients that acces the app after the initial client will get an auth error message (Displayed to the user via HTML).\n\n### API: window\n- `window.setAlwaysOnTop(bool)` was added.\n- `window.getSize` was added.\n\n### Core: global variables\n- Added `NL_EXTENABLED` which returns `true` if extensions are enabled. It is used to check extensions status faster during initialization process.\n\n### Bugfixes\n- Fixed the file dialog order issue on Windows.\n- Removed tray icon when the application exits.\n\n## v4.2.0\n\n### API: clipboard\n- Add clipboard API for all platforms. Supports reading and writing text in the system clipboard.\n\n### Core: configuration\n- Accept chrome-related CLI args: `--chrome-width`, `--chrome-height`, and `--chrome-args`.\n- Accept `--neu-dev-extension` to enable devtools connections (For internal usages with CLI).\n- Accept custom HTTP headers via `serverHeaders` option.\n\n### API: global variables\n- Added `NL_RESMODE` to get details about application resources source. Returns `bundle` if resources are loaded from `resources.neu`. Otherwise, returns `directory`.\n\n### Bugfixes\n- Fix chrome mode user data dir issue (Support paths with spaces).\n- Fix browser mode's shutdown issue with neu CLI.\n\n## v4.1.0\n\n### API: window\n- `window.getTitle` returns the current native window title.\n\n### API: os\n- Remove `NE_OS_ENVNOEX` from `os.getEnv` and return an empty string if environment variable is not defined.\n\n### Core: Chrome mode\n- Now you can run Neutralinojs apps as Chrome apps via the `chrome` mode.\n\n### Core: configuration\n- Getting chrome mode config from `modes.chrome`. Added `height`, `width`, and args specially for the chrome mode.\n\n## v4.0.0\n\n### API: os.execCommand\n- Renamed `shouldRunInBackground` option to `background`.\n- Supports `stdIn` as an optional input.\n- Returns multiple values: `stdOut`, `stdErr`, `pid`, and `exitCode`.\n\n### Core: API extensions\n- Config file supports new `extensions` array globally or in a specific mode.\n- Neutralino spawns extension processes based on `extensions` array.\n- Neutralino doesn't send kill signals to extension processes. The extension developer needs to stop\n  processes properly.\n- `extension` setting has 4 fields: `id`, `command`, `commandLinux`,`commandDarwin`, and `commandWindows`.\n- The `command`'s (platform-specific command's) value accepts `${NL_PATH}` global variable.\n- Each extension process instance is called with three CLI args: `--nl-port={}`, `--nl-extension-id={}` and `--nl-token={}`\n- Enable/disable extensions with `enableExtensions` config.\n\n### Core: Static server\n- Supports setting document root (with `documentRoot`) via config. Now, it's possible to launch app without a subdirectory in the URL.\n\n### Core: Community driver processes\nNow developers can use Neutralinojs as a part of their software with any programming language by spawning Neutralinojs as a child process.\nUse `exportAuthInfo` to write auth details to `${NL_PATH}/.tmp/auth_info.json`. Then the parent process can pickup access details there. Note that WebSocket communication needs to be initiated via extensions API/loader.\n\n### API: app.broadcast\n- Sends an event to all app clients. This method is for extension developers.\n\n### API: events.broadcast\n- Sends an event to all clients (apps and extensions). Useful for notifying important general events.\n\n### API: extensions\n- `dispatch`: Sends an event to a specific extension.\n- `broadcast`: Sends an event to all connected extensions. Useful for sending shutdown signals.\n- `getStats`: Returns details about loaded extensions and connected extensions.\n\n### API: updater\n- `checkForUpdates`: Send a request to a seed URL (JSON) and fetch update details.\n- `install`: Install updates based on the currently downloaded manifest.\n\n### Events\n- `appClientConnect` and `appClientDisconnect`: Occurs when a new app instance is launched and closed respectively.\n- `extClientConnect` and `extClientDisconnect`: Occurs when a new extension is connected and disconnected respectively.\n- `extensionReady` can be used to implement immediate extension calls. This is implemented from the client-side with `extensions.getStats` and `extClientConnect`. This event gurantees that it will be triggered regardless of the extension's start time.\n\n### Error codes\n- `NE_EX_EXTNOTC`: Thrown by `extensions.dispatch` if the target extension is not connected.\n- `NE_UP_CUPDMER`: Thrown by `updater.checkForUpdates` if the JSON update manifest is invalid or applicationId is not matching.\n- `NE_UP_CUPDERR`: Thrown by `updater.checkForUpdates` if the updater API cannot fetch the manifest.\n- `NE_UP_UPDNOUF`: Thrown by `updater.install` when the update manifest is not loaded.\n- `NE_UP_UPDINER`: Thrown by `updater.install` for update installation errors.\n\n### Bug fixes\n- Fix port 0 issue with modes. Earlier, if the developer sets port as 0 from a specific mode,\nthe `NL_PORT` also becomes 0.\n- Fix an issue with `writeToLogFile` config option. Earlier, the log file was created even this\noption is set to `false`.\n\n### Global variables\n- `NL_APPVERSION`: Value of the `version` key in the config file.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1435546875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at neutralinojs@gmail.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.44921875,
          "content": "# Contributing\n\nEveryone can help Neutralinojs become better! You can contribute the project by writing code, reporting bugs, submitting feature requests, and improving the documentaion. Get started with [this guide](https://neutralino.js.org/docs/contributing/framework-developer-guide) if you are going to contribute by code.\n\nWe respect all contributors. Please interact with the community according to our [code of conduct](CODE_OF_CONDUCT.md). Thank you.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 29.142578125,
          "content": "Neutralinojs core is licensed for use as follows:\n\nMIT License\n\nCopyright (c) 2021 Neutralinojs and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n================================================================================\nhttps://github.com/zaphoyd/websocketpp (C++ websocket client/server library)\nis licensed for use as follows (from the original repository on GitHub):\n\nMain Library:\n\nCopyright (c) 2014, Peter Thorson. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the WebSocket++ Project nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL PETER THORSON BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nBundled Libraries:\n\n****** Base 64 Library (base64/base64.hpp) ******\nbase64.hpp is a repackaging of the base64.cpp and base64.h files into a\nsingle header suitable for use as a header only library. This conversion was\ndone by Peter Thorson (webmaster@zaphoyd.com) in 2012. All modifications to\nthe code are redistributed under the same license as the original, which is\nlisted below.\n\nbase64.cpp and base64.h\n\nCopyright (C) 2004-2008 René Nyffenegger\n\nThis source code is provided 'as-is', without any express or implied\nwarranty. In no event will the author be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n1. The origin of this source code must not be misrepresented; you must not\n  claim that you wrote the original source code. If you use this source code\n  in a product, an acknowledgment in the product documentation would be\n  appreciated but is not required.\n\n2. Altered source versions must be plainly marked as such, and must not be\n  misrepresented as being the original source code.\n\n3. This notice may not be removed or altered from any source distribution.\n\nRené Nyffenegger rene.nyffenegger@adp-gmbh.ch\n\n****** SHA1 Library (sha1/sha1.hpp) ******\nsha1.hpp is a repackaging of the sha1.cpp and sha1.h files from the shallsha1\nlibrary (http://code.google.com/p/smallsha1/) into a single header suitable for\nuse as a header only library. This conversion was done by Peter Thorson\n(webmaster@zaphoyd.com) in 2013. All modifications to the code are redistributed\nunder the same license as the original, which is listed below.\n\n Copyright (c) 2011, Micael Hildenborg\n All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of Micael Hildenborg nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY Micael Hildenborg ''AS IS'' AND ANY\n EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n DISCLAIMED. IN NO EVENT SHALL Micael Hildenborg BE LIABLE FOR ANY\n DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n****** MD5 Library (common/md5.hpp) ******\nmd5.hpp is a reformulation of the md5.h and md5.c code from\nhttp://www.opensource.apple.com/source/cups/cups-59/cups/md5.c to allow it to\nfunction as a component of a header only library. This conversion was done by\nPeter Thorson (webmaster@zaphoyd.com) in 2012 for the WebSocket++ project. The\nchanges are released under the same license as the original (listed below)\n\nCopyright (C) 1999, 2002 Aladdin Enterprises.  All rights reserved.\n\nThis software is provided 'as-is', without any express or implied\nwarranty.  In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must not\n claim that you wrote the original software. If you use this software\n in a product, an acknowledgment in the product documentation would be\n appreciated but is not required.\n2. Altered source versions must be plainly marked as such, and must not be\n misrepresented as being the original software.\n3. This notice may not be removed or altered from any source distribution.\n\nL. Peter Deutsch\nghost@aladdin.com\n\n****** UTF8 Validation logic (utf8_validation.hpp) ******\nutf8_validation.hpp is adapted from code originally written by Bjoern Hoehrmann\n<bjoern@hoehrmann.de>. See http://bjoern.hoehrmann.de/utf-8/decoder/dfa/ for\ndetails.\n\nThe original license:\n\nCopyright (c) 2008-2009 Bjoern Hoehrmann <bjoern@hoehrmann.de>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n================================================================================\nhttps://github.com/nlohmann/json (JSON parser library)\nis licensed for use as follows (from the original repository on GitHub):\n\nMIT License\n\nCopyright (c) 2013-2022 Niels Lohmann\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n================================================================================\nhttps://github.com/webview/webview (Cross-platform webview)\nis licensed for use as follows (from the original repository on GitHub):\n\nMIT License\n\nCopyright (c) 2017 Serge Zaitsev\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n================================================================================\nhttps://github.com/samhocevar/portable-file-dialogs (Cross-platform GUI dialogs library)\nis licensed for use as follows (from the original repository on GitHub):\n\n            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n                    Version 2, December 2004\n\n Copyright (C) 2004 Sam Hocevar\n\n Everyone is permitted to copy and distribute verbatim or modified\n copies of this license document, and changing it is allowed as long\n as the name is changed.\n\n            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. You just DO WHAT THE FUCK YOU WANT TO.\n\n================================================================================\nhttps://github.com/zserge/tray (Cross-platform tray library)\nis licensed for use as follows (from the original repository on GitHub):\n\nMIT License\n\nCopyright (c) 2017 Serge Zaitsev\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n================================================================================\nhttps://github.com/tobiaslocker/base64 (A modern C++ base64 encoder/decoder)\nis licensed for use as follows (from the original repository on GitHub):\n\nMIT License\n\nCopyright (c) 2019 Tobias Locker\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n================================================================================\nhttps://github.com/sago007/PlatformFolders (A C++ library to look for known platform\ndirectories) is licensed for use as follows (from the original repository on GitHub):\n  \nThe MIT License (MIT)\n\nCopyright (c) 2015 Poul Sander\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n================================================================================\nhttps://github.com/amrayn/easyloggingpp (C++ logging library) is licensed for use \nas follows (from the original repository on GitHub):\n  \nThe MIT License (MIT)\n\nCopyright (c) 2012-2018 Amrayn Web Services\nCopyright (c) 2012-2018 @abumusamq\n\nhttps://github.com/amrayn/\nhttps://amrayn.com\nhttps://muflihun.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n================================================================================\nhttps://gitlab.com/eidheim/tiny-process-library (Cross-platform process library) \nis licensed for use as follows (from the original repository on GitLab):\n  \nThe MIT License (MIT)\n\nCopyright (c) 2015-2020 Ole Christian Eidheim\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n================================================================================\nhttps://github.com/chriskohlhoff/asio (Asio standalone C++ library) \nis licensed for use as follows (from the original repository on GitHub):\n  \nBoost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\n================================================================================\nhttps://github.com/dacap/clip (Cross-platform C++ clipboard library) \nis licensed for use as follows (from the original repository on GitHub):\n\nCopyright (c) 2015-2021 David Capello\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n================================================================================\nhttps://github.com/ThePhD/infoware (C++ system information library) \nis licensed for use as follows (from the original repository on GitHub):\n\nCC0 1.0 Universal\n\nStatement of Purpose\n\nThe laws of most jurisdictions throughout the world automatically confer\nexclusive Copyright and Related Rights (defined below) upon the creator and\nsubsequent owner(s) (each and all, an \"owner\") of an original work of\nauthorship and/or a database (each, a \"Work\").\n\nCertain owners wish to permanently relinquish those rights to a Work for the\npurpose of contributing to a commons of creative, cultural and scientific\nworks (\"Commons\") that the public can reliably and without fear of later\nclaims of infringement build upon, modify, incorporate in other works, reuse\nand redistribute as freely as possible in any form whatsoever and for any\npurposes, including without limitation commercial purposes. These owners may\ncontribute to the Commons to promote the ideal of a free culture and the\nfurther production of creative, cultural and scientific works, or to gain\nreputation or greater distribution for their Work in part through the use and\nefforts of others.\n\nFor these and/or other purposes and motivations, and without any expectation\nof additional consideration or compensation, the person associating CC0 with a\nWork (the \"Affirmer\"), to the extent that he or she is an owner of Copyright\nand Related Rights in the Work, voluntarily elects to apply CC0 to the Work\nand publicly distribute the Work under its terms, with knowledge of his or her\nCopyright and Related Rights in the Work and the meaning and intended legal\neffect of CC0 on those rights.\n\n1. Copyright and Related Rights. A Work made available under CC0 may be\nprotected by copyright and related or neighboring rights (\"Copyright and\nRelated Rights\"). Copyright and Related Rights include, but are not limited\nto, the following:\n\n  i. the right to reproduce, adapt, distribute, perform, display, communicate,\n  and translate a Work;\n\n  ii. moral rights retained by the original author(s) and/or performer(s);\n\n  iii. publicity and privacy rights pertaining to a person's image or likeness\n  depicted in a Work;\n\n  iv. rights protecting against unfair competition in regards to a Work,\n  subject to the limitations in paragraph 4(a), below;\n\n  v. rights protecting the extraction, dissemination, use and reuse of data in\n  a Work;\n\n  vi. database rights (such as those arising under Directive 96/9/EC of the\n  European Parliament and of the Council of 11 March 1996 on the legal\n  protection of databases, and under any national implementation thereof,\n  including any amended or successor version of such directive); and\n\n  vii. other similar, equivalent or corresponding rights throughout the world\n  based on applicable law or treaty, and any national implementations thereof.\n\n2. Waiver. To the greatest extent permitted by, but not in contravention of,\napplicable law, Affirmer hereby overtly, fully, permanently, irrevocably and\nunconditionally waives, abandons, and surrenders all of Affirmer's Copyright\nand Related Rights and associated claims and causes of action, whether now\nknown or unknown (including existing as well as future claims and causes of\naction), in the Work (i) in all territories worldwide, (ii) for the maximum\nduration provided by applicable law or treaty (including future time\nextensions), (iii) in any current or future medium and for any number of\ncopies, and (iv) for any purpose whatsoever, including without limitation\ncommercial, advertising or promotional purposes (the \"Waiver\"). Affirmer makes\nthe Waiver for the benefit of each member of the public at large and to the\ndetriment of Affirmer's heirs and successors, fully intending that such Waiver\nshall not be subject to revocation, rescission, cancellation, termination, or\nany other legal or equitable action to disrupt the quiet enjoyment of the Work\nby the public as contemplated by Affirmer's express Statement of Purpose.\n\n3. Public License Fallback. Should any part of the Waiver for any reason be\njudged legally invalid or ineffective under applicable law, then the Waiver\nshall be preserved to the maximum extent permitted taking into account\nAffirmer's express Statement of Purpose. In addition, to the extent the Waiver\nis so judged Affirmer hereby grants to each affected person a royalty-free,\nnon transferable, non sublicensable, non exclusive, irrevocable and\nunconditional license to exercise Affirmer's Copyright and Related Rights in\nthe Work (i) in all territories worldwide, (ii) for the maximum duration\nprovided by applicable law or treaty (including future time extensions), (iii)\nin any current or future medium and for any number of copies, and (iv) for any\npurpose whatsoever, including without limitation commercial, advertising or\npromotional purposes (the \"License\"). The License shall be deemed effective as\nof the date CC0 was applied by Affirmer to the Work. Should any part of the\nLicense for any reason be judged legally invalid or ineffective under\napplicable law, such partial invalidity or ineffectiveness shall not\ninvalidate the remainder of the License, and in such case Affirmer hereby\naffirms that he or she will not (i) exercise any of his or her remaining\nCopyright and Related Rights in the Work or (ii) assert any associated claims\nand causes of action with respect to the Work, in either case contrary to\nAffirmer's express Statement of Purpose.\n\n4. Limitations and Disclaimers.\n\n  a. No trademark or patent rights held by Affirmer are waived, abandoned,\n  surrendered, licensed or otherwise affected by this document.\n\n  b. Affirmer offers the Work as-is and makes no representations or warranties\n  of any kind concerning the Work, express, implied, statutory or otherwise,\n  including without limitation warranties of title, merchantability, fitness\n  for a particular purpose, non infringement, or the absence of latent or\n  other defects, accuracy, or the present or absence of errors, whether or not\n  discoverable, all to the greatest extent permissible under applicable law.\n\n  c. Affirmer disclaims responsibility for clearing rights of other persons\n  that may apply to the Work or any use thereof, including without limitation\n  any person's Copyright and Related Rights in the Work. Further, Affirmer\n  disclaims responsibility for obtaining any necessary consents, permissions\n  or other rights required for any use of the Work.\n\n  d. Affirmer understands and acknowledges that Creative Commons is not a\n  party to this document and has no duty or obligation with respect to this\n  CC0 or use of the Work.\n\nFor more information, please see\n<http://creativecommons.org/publicdomain/zero/1.0/>\n\n================================================================================\nhttps://github.com/SpartanJ/efsw (Cross-platform C++ filesystem watcher library) \nis licensed for use as follows (from the original repository on GitHub):\n\nCopyright (c) 2020 Martín Lucas Golini\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\nThis software is a fork of the \"simplefilewatcher\" by James Wynn (james@jameswynn.com)\nhttp://code.google.com/p/simplefilewatcher/ also MIT licensed.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.5927734375,
          "content": "<div align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"media/nllogo-light-theme.png\" width=\"300\"/>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"media/nllogo-dark-theme.png\" width=\"300\"/>\n    <img alt=\"Neutralinojs logo\" src=\"media/nllogo-light-theme.png\" width=\"300\"/>\n  </picture>\n </div>\n\n[![GitHub release (latest by date)](https://img.shields.io/github/v/release/neutralinojs/neutralinojs)](https://github.com/neutralinojs/neutralinojs/releases)\n[![GitHub last commit](https://img.shields.io/github/last-commit/neutralinojs/neutralinojs.svg)](https://github.com/neutralinojs/neutralinojs/commits/main)\n![Build status](https://github.com/neutralinojs/neutralinojs/actions/workflows/test_suite.yml/badge.svg)\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fneutralinojs%2Fneutralinojs.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2Fneutralinojs%2Fneutralinojs?ref=badge_shield)\n\nNeutralinojs is a lightweight and portable desktop application development framework. It lets you develop lightweight cross-platform desktop applications using JavaScript, HTML and CSS. Apps built with Neutralinojs can run on Linux, macOS, Windows, Web, and Chrome. Also, you can extend Neutralinojs with any programming language (via extensions IPC) and use Neutralinojs as a part of any source file (via child processes IPC). \n\n- [Neutralinojs vs. Electron, NW.JS, Tauri, NodeGui, Flutter, .Net MAUI, Wails](https://github.com/Elanis/web-to-desktop-framework-comparison)\n- [Neutralinojs vs. Electron vs. NW.js (2018)](https://github.com/neutralinojs/evaluation)\n- [Roadmap 2024](https://codezri.org/blog/neutralinojs-2024-roadmap/)\n- [Release notes](https://neutralino.js.org/docs/release-notes/framework)\n\nGet started with the neu CLI:\n\n```bash\n # Creating a new app\n npm i -g @neutralinojs/neu\n neu create hello-world\n cd hello-world\n neu run\n \n # Building your app (No compilation - takes less than a second)\n neu build\n```\n\nYou can use your favorite frontend frameworks:\n\n```bash\n# Creating a new React-based app\nneu create hello-react -t codezri/neutralinojs-react\n```\n\nStart building apps: [neutralino.js.org/docs](https://neutralino.js.org/docs)\n \n## Why Neutralinojs? \n\nIn Electron and NWjs, you have to install NodeJs and hundreds of dependency libraries. Embedded Chromium and Node make simple apps bloaty. Neutralinojs offers a lightweight and portable SDK which is an alternative for Electron and NW.js. Neutralinojs doesn't bundle Chromium and uses the existing web browser library in the operating system (Eg: gtk-webkit2 on Linux). Neutralinojs implements a WebSocket connection for native operations and embeds a static web server to serve the web content. Also, it offers a built-in [JavaScript client library](https://github.com/neutralinojs/neutralino.js) for developers.\n\nAsk questions on StackOverflow using tag [neutralinojs](https://stackoverflow.com/questions/tagged/neutralinojs)\n\n## Contributing\n\nPlease check the [contribution guide](https://neutralino.js.org/docs/contributing/framework-developer-guide). We use GitHub Discussions and Discord for quick discussions. \n  * [Join on Discord](https://discord.gg/cybpp4guTJ)\n  * [Start a thread on Discussions](https://github.com/neutralinojs/neutralinojs/discussions)\n\nNeutralinojs contributors:\n\n<a href=\"https://github.com/neutralinojs/neutralinojs/graphs/contributors\">\n  <img src=\"https://contributors-img.firebaseapp.com/image?repo=neutralinojs/neutralinojs\" />\n</a>\n\nImage created with [contributors-img](https://contributors-img.firebaseapp.com).\n\n## Subprojects\n\n- Builds are powered by [BuildZri](https://codezri.org/docs/buildzri/intro)\n- Releases are powered by [ReleaseZri](https://codezri.org/docs/releasezri/intro)\n\n## Sponsors and Donators\n\nOrganizations and individuals support Neutralinojs development. See: https://codezri.org/sponsors\n\nIf you like to support our work, you can donate to Neutralinojs via [Patreon](https://www.patreon.com/shalithasuranga) or [GitHub Sponsors](https://github.com/sponsors/shalithasuranga).\n\n[![Become a Patreon](https://c5.patreon.com/external/logo/become_a_patron_button.png)](https://www.patreon.com/shalithasuranga)\n\n## Licenses and Copyrights\n\n- Neutralinojs core: MIT. Copyright (c) 2021 Neutralinojs and contributors.\n- C++ websocket client/server library: BSD-3-Clause from [zaphoyd/websocketpp](https://github.com/zaphoyd/websocketpp). Copyright (c) 2014, Peter Thorson. All rights reserved.\n- JSON parser library: MIT from [nlohmann/json](https://github.com/nlohmann/json). Copyright (c) 2013-2022 Niels Lohmann.\n- Cross-platform webview library: MIT from [webview/webview](https://github.com/webview/webview). Copyright (c) 2017 Serge Zaitsev. \n- Cross-platform tray library: MIT from [zserge/tray](https://github.com/zserge/tray). Copyright (c) 2017 Serge Zaitsev. \n- Cross-platform GUI dialogs library: WTFPL from [samhocevar/portable-file-dialogs](https://github.com/samhocevar/portable-file-dialogs). Copyright (c) 2018—2020 Sam Hocevar\n- Base64 encoder/decoder library: MIT from [tobiaslocker/base64](https://github.com/tobiaslocker/base64). Copyright (c) 2019 Tobias Locker.\n- Cross-platform known platform directories API: MIT from [sago007/PlatformFolders](https://github.com/sago007/PlatformFolders). Copyright (c) 2015 Poul Sander.\n- C++ logging library: MIT from [amrayn/easyloggingpp](https://github.com/amrayn/easyloggingpp). Copyright (c) 2012-2018 Amrayn Web Services. Copyright (c) 2012-2018 @abumusamq\n- Cross-platform process library: MIT from [eidheim/tiny-process-library](https://gitlab.com/eidheim/tiny-process-library). Copyright (c) 2015-2020 Ole Christian Eidheim.\n- Asio standalone C++ library: [Boost License v1.0](https://www.boost.org/LICENSE_1_0.txt) from [chriskohlhoff/asio](https://github.com/chriskohlhoff/asio). Copyright (c) 2003-2021 Christopher M. Kohlhoff\n- Cross-platform C++ clipboard library: MIT from [dacap/clip](https://github.com/dacap/clip). Copyright (c) 2015-2021 David Capello\n- Cross-platform C++ system information library: CC0 1.0 Universal from [ThePhD/infoware](https://github.com/ThePhD/infoware). Written in 2016-2020 by nabijaczleweli and ThePhD\n- Cross-platform C++ filesystem watcher library: MIT from [SpartanJ/efsw](https://github.com/SpartanJ/efsw). Copyright (c) 2020 Martín Lucas Golini\n- Logo design credits: [IconsPng](https://www.iconspng.com/image/2688/atom-orange). Copyright free as mentioned in their website. \n\n[See the complete license file](LICENSE)\n\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fneutralinojs%2Fneutralinojs.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2Fneutralinojs%2Fneutralinojs?ref=badge_large)\n\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.25,
          "content": "# Security Policy\n\n## Reporting a vulnerability\n\nIf you found a vulnerability in one of Neutralinojs components, please [create a security advisory](https://github.com/neutralinojs/neutralinojs/security/advisories/new) via GitHub. We'll review them and implement necessary patches with upcoming releases.\n\n## How to download security patches\n\nNeutralino binaries can be updated with [neu-cli](https://neutralino.js.org/docs/cli/neu-cli) from the developer's side. \nTherefore, if any vulnerability is reported against the Neutralinojs version you use, please update the existing binaries via CLI.\n\n## Prebuilt binaries\n\nThe neu CLI downloads prebuilt binaries for each platform from the releases (according your project configuration's versions). On Windows, if your virus scanner software identified a Neutralinojs binary as malware via a false positive detection, please take the following actions.\n\n- Do a full system scan with your antivirus software to verify whether a real malicious program is active.\n- Send a false positive detection report to your antivirus software developers.\n- Report to Neutralinojs developers via a Github [issue](https://github.com/neutralinojs/neutralinojs/issues).\n\nYou can download the Neutralinojs source, inspect, and build your binaries too.\n"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "auth",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "buildzri.config.json",
          "type": "blob",
          "size": 2.80859375,
          "content": "{\n    \"std\": \"c++17\",\n    \"name\": \"Neutralinojs\",\n    \"version\": \"5.5.0\",\n    \"output\": \"./bin/neutralino-${BZ_OS}_${BZ_TARGET_ARCH}\",\n    \"include\": {\n        \"*\": [\n            \".\",\n            \"lib\",\n            \"lib/asio/include\",\n            \"lib/infoware/include\",\n            \"lib/efsw/include\",\n            \"lib/efsw/src\"\n        ],\n        \"windows\": [\n            \"lib/webview/windows\"\n        ]\n    },\n    \"source\": {\n        \"*\": [\n            \"*.cpp\",\n            \"auth/*.cpp\",\n            \"server/*.cpp\",\n            \"api/*/*.cpp\",\n            \"lib/tinyprocess/process.cpp\",\n            \"lib/easylogging/easylogging++.cc\",\n            \"lib/platformfolders/platform_folders.cpp\",\n            \"lib/clip/clip.cpp\",\n            \"lib/clip/image.cpp\",\n            \"lib/infoware/src/**/*.cpp\",\n            \"lib/efsw/src/efsw/*.cpp\"\n        ],\n        \"linux\": [\n            \"lib/tinyprocess/process_unix.cpp\",\n            \"lib/clip/clip_x11.cpp\",\n            \"lib/efsw/src/efsw/platform/posix/*.cpp\"\n        ],\n        \"darwin\": [\n            \"lib/tinyprocess/process_unix.cpp\",\n            \"lib/clip/clip_osx.mm\",\n            \"lib/webview/macwindow.mm\",\n            \"lib/efsw/src/efsw/platform/posix/*.cpp\"\n        ],\n        \"windows\": [\n            \"lib/tinyprocess/process_win.cpp\",\n            \"lib/clip/clip_win.cpp\",\n            \"lib/efsw/src/efsw/platform/win/*.cpp\"\n        ]\n    },\n    \"options\": {\n        \"linux\": [\n            \"$(pkg-config --cflags --libs gtk+-3.0 glib-2.0 xcb x11 xrandr)\",\n            \"-pthread\",\n            \"-lpng\",\n            \"-lstdc++fs\",\n            \"-ldl\",\n            \"-no-pie\",\n            \"-Os\"\n        ],\n        \"darwin\": [\n            \"-Wno-deprecated-declarations\",\n            \"-framework WebKit\",\n            \"-framework Cocoa\",\n            \"-Os\"\n        ],\n        \"windows\": [\n            \"/utf-8\",\n            \"/EHsc\",\n            \"/Os\",\n            \"/Fobin/\",\n            \"/link lib/webview/windows/WebView2LoaderStatic.lib gdi32.lib version.lib Ole32.lib OleAut32.lib wbemuuid.lib ntdll.lib dwmapi.lib\"\n        ]\n    },\n    \"definitions\": {\n        \"*\": [\n            \"NEU_VERSION=\\\\\\\"${BZ_VERSION}\\\\\\\"\",\n            \"NEU_COMMIT=\\\\\\\"${BZ_COMMIT}\\\\\\\"\",\n            \"ELPP_NO_DEFAULT_LOG_FILE=1\",\n            \"ASIO_STANDALONE\",\n            \"INFOWARE_VERSION=\\\\\\\"0.6.0\\\\\\\"\",\n            \"INFOWARE_USE_X11\",\n            \"CLIP_ENABLE_IMAGE\"\n        ],\n        \"linux\": [\n            \"HAVE_XCB_XLIB_H\",\n            \"WEBVIEW_GTK=1\",\n            \"TRAY_APPINDICATOR=1\",\n            \"HAVE_PNG_H\"\n        ],\n        \"darwin\": [\n            \"WEBVIEW_COCOA=1\",\n            \"TRAY_APPKIT=1\",\n            \"MACOSX_DEPLOYMENT_TARGET=10.7\"\n        ],\n        \"windows\": [\n            \"_WEBSOCKETPP_CPP11_STL_\",\n            \"_HAS_STD_BYTE=0\",\n            \"TRAY_WINAPI=1\",\n            \"UNICODE\",\n            \"_UNICODE\"\n        ]\n    }\n}\n"
        },
        {
          "name": "chrome.cpp",
          "type": "blob",
          "size": 3.974609375,
          "content": "#include <string>\n#include <vector>\n#include <regex>\n\n#include \"lib/json/json.hpp\"\n#include \"lib/filedialogs/portable-file-dialogs.h\"\n#include \"settings.h\"\n#include \"helpers.h\"\n#include \"api/os/os.h\"\n#include \"api/fs/fs.h\"\n\nusing namespace std;\nusing json = nlohmann::json;\n\n/*\n* C++ rewrite of https://github.com/zserge/lorca/ (Go-based) concept\n*/\n\nnamespace chrome {\n\nstring __getDefaultChromeArgs() {\n    return \"--disable-background-networking \"\n    \"--disable-background-timer-throttling \"\n    \"--disable-backgrounding-occluded-windows \"\n    \"--disable-breakpad \"\n    \"--disable-client-side-phishing-detection \"\n    \"--disable-default-apps \"\n    \"--disable-dev-shm-usage \"\n    \"--disable-infobars \"\n    \"--disable-extensions \"\n    \"--disable-features=site-per-process \"\n    \"--disable-hang-monitor \"\n    \"--disable-ipc-flooding-protection \"\n    \"--disable-popup-blocking \"\n    \"--disable-prompt-on-repost \"\n    \"--disable-renderer-backgrounding \"\n    \"--disable-sync \"\n    \"--disable-translate \"\n    \"--disable-windows10-custom-titlebar \"\n    \"--metrics-recording-only \"\n    \"--no-first-run \"\n    \"--no-default-browser-check \"\n    \"--safebrowsing-disable-auto-update \"\n    \"--password-store=basic \"\n    \"--use-mock-keychain\";\n}\n\nstring __findChrome() {\n    string chromePath = \"\";\n    #if defined(__linux__)\n    vector<string> chromeBins = {\n        \"/usr/bin/google-chrome-stable\",\n        \"/usr/bin/google-chrome\",\n        \"/usr/bin/chromium\",\n        \"/usr/bin/chromium-browser\",\n        \"/snap/bin/chromium\",\n    };\n\n    #elif defined(__APPLE__)\n    vector<string> chromeBins = {\n        \"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\",\n        \"/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary\",\n        \"/Applications/Chromium.app/Contents/MacOS/Chromium\",\n        \"/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge\",\n        \"/usr/bin/google-chrome-stable\",\n        \"/usr/bin/google-chrome\",\n        \"/usr/bin/chromium\",\n        \"/usr/bin/chromium-browser\",\n    };\n\n    #elif defined(_WIN32)\n    vector<string> chromeBins = {\n        os::getEnv(\"LocalAppData\") + \"/Google/Chrome/Application/chrome.exe\",\n        os::getEnv(\"ProgramFiles\") + \"/Google/Chrome/Application/chrome.exe\",\n        os::getEnv(\"ProgramFiles(x86)\") + \"/Google/Chrome/Application/chrome.exe\",\n        os::getEnv(\"LocalAppData\") + \"/Chromium/Application/chrome.exe\",\n        os::getEnv(\"ProgramFiles\") + \"/Chromium/Application/chrome.exe\",\n        os::getEnv(\"ProgramFiles(x86)\") + \"/Chromium/Application/chrome.exe\",\n        os::getEnv(\"ProgramFiles(x86)\") + \"/Microsoft/Edge/Application/msedge.exe\",\n        os::getEnv(\"ProgramFiles\") + \"/Microsoft/Edge/Application/msedge.exe\",\n    };\n    #endif\n\n    for(const string &cmd: chromeBins) {\n        fs::FileStats stats = fs::getStats(cmd);\n        if(stats.status == errors::NE_ST_OK && stats.entryType == fs::EntryTypeFile) {\n            chromePath = cmd;\n            break;\n        }\n    }\n    return chromePath;\n}\n\nvoid init(const json &input) {\n\n    string chromeCmd = __findChrome();\n\n    if(chromeCmd.empty()) {\n        pfd::message(\"Unable to start Chrome mode\",\n                        \"You need to install Chrome browser to use the Neutralinojs chrome mode\",\n                        pfd::choice::ok,\n                        pfd::icon::error);\n        std::exit(1);\n    }\n\n    if(regex_search(chromeCmd, regex(\" \"))) {\n        chromeCmd = \"\\\"\" + chromeCmd + \"\\\"\";\n    }\n\n    chromeCmd += \" \" + __getDefaultChromeArgs();\n\n    chromeCmd += \" --user-data-dir=\\\"\" + settings::joinAppDataPath(\"/.tmp/chromedata\") + \"\\\"\";\n    chromeCmd += \" --app=\\\"\" + input[\"url\"].get<string>() + \"\\\"\";\n\n    if(helpers::hasRequiredFields(input, {\"width\", \"height\"})) {\n        chromeCmd += \" --window-size=\" + to_string(input[\"width\"].get<int>()) +\n                    \",\" + to_string(input[\"height\"].get<int>());\n    }\n\n    if(helpers::hasField(input, \"args\")) {\n        chromeCmd += \" \" + input[\"args\"].get<string>();\n    }\n\n    os::execCommand(chromeCmd, \"\", true);\n}\n\n} // namespace chrome\n\n"
        },
        {
          "name": "chrome.h",
          "type": "blob",
          "size": 0.2607421875,
          "content": "#ifndef NEU_CHROME_H\n#define NEU_CHROME_H\n\n#include <string>\n#include <vector>\n\n#include \"lib/json/json.hpp\"\n\nusing namespace std;\nusing json = nlohmann::json;\n\nnamespace chrome {\n\nvoid init(const json &input);\n\n} // namesapce chrome\n\n#endif // #define NEU_CHROME_H\n\n"
        },
        {
          "name": "errors.cpp",
          "type": "blob",
          "size": 6.9091796875,
          "content": "#include <string>\n#include <regex>\n\n#include \"errors.h\"\n#include \"lib/json/json.hpp\"\n\nusing namespace std;\nusing json = nlohmann::json;\n\nnamespace errors {\n\nstring __getStatusCodeString(const errors::StatusCode code) {\n    switch(code) {\n        // no-error\n        case errors::NE_ST_OK: return \"NE_ST_OK\";\n        // storage\n        case errors::NE_ST_INVSTKY: return \"NE_ST_INVSTKY\";\n        case errors::NE_ST_NOSTKEX: return \"NE_ST_NOSTKEX\";\n        case errors::NE_ST_STKEYWE: return \"NE_ST_STKEYWE\";\n        case errors::NE_ST_NOSTDIR: return \"NE_ST_NOSTDIR\";\n        // os\n        case errors::NE_OS_UNLTOUP: return \"NE_OS_UNLTOUP\";\n        case errors::NE_OS_INVNOTA: return \"NE_OS_INVNOTA\";\n        case errors::NE_OS_INVMSGA: return \"NE_OS_INVMSGA\";\n        case errors::NE_OS_TRAYIER: return \"NE_OS_TRAYIER\";\n        case errors::NE_OS_INVKNPT: return \"NE_OS_INVKNPT\";\n        // extensions\n        case errors::NE_EX_EXTNOTC: return \"NE_EX_EXTNOTC\";\n        // filesystem\n        case errors::NE_FS_FILWRER: return \"NE_FS_FILWRER\";\n        case errors::NE_FS_DIRCRER: return \"NE_FS_DIRCRER\";\n        case errors::NE_FS_REMVERR: return \"NE_FS_REMVERR\";\n        case errors::NE_FS_FILRDER: return \"NE_FS_FILRDER\";\n        case errors::NE_FS_NOPATHE: return \"NE_FS_NOPATHE\";\n        case errors::NE_FS_COPYERR: return \"NE_FS_COPYERR\";\n        case errors::NE_FS_MOVEERR: return \"NE_FS_MOVEERR\";\n        case errors::NE_FS_FILOPER: return \"NE_FS_FILOPER\";\n        case errors::NE_FS_UNLTOUP: return \"NE_FS_UNLTOUP\";\n        case errors::NE_FS_UNLTFOP: return \"NE_FS_UNLTFOP\";\n        case errors::NE_FS_UNLCWAT: return \"NE_FS_UNLCWAT\";\n        case errors::NE_FS_NOWATID: return \"NE_FS_NOWATID\";\n        // window\n        case errors::NE_WI_UNBSWSR: return \"NE_WI_UNBSWSR\";\n        // router\n        case errors::NE_RT_INVTOKN: return \"NE_RT_INVTOKN\";\n        case errors::NE_RT_APIPRME: return \"NE_RT_APIPRME\";\n        case errors::NE_RT_NATPRME: return \"NE_RT_NATPRME\";\n        case errors::NE_RT_NATRTER: return \"NE_RT_NATRTER\";\n        case errors::NE_RT_NATNTIM: return \"NE_RT_NATNTIM\";\n        // resources\n        case errors::NE_RS_TREEGER: return \"NE_RS_TREEGER\";\n        case errors::NE_RS_UNBLDRE: return \"NE_RS_UNBLDRE\";\n        case errors::NE_RS_APIRQRF: return \"NE_RS_APIRQRF\";\n        case errors::NE_RS_FILNOTF: return \"NE_RS_FILNOTF\";\n        // server\n        case errors::NE_SR_UNBSEND: return \"NE_SR_UNBSEND\";\n        case errors::NE_SR_UNBPARS: return \"NE_SR_UNBPARS\";\n        // config\n        case errors::NE_CF_UNBLDCF: return \"NE_CF_UNBLDCF\";\n        case errors::NE_CF_UNBPRCF: return \"NE_CF_UNBPRCF\";\n        case errors::NE_CF_UNSUPMD: return \"NE_CF_UNSUPMD\";\n        case errors::NE_CF_UNBLWCF: return \"NE_CF_UNBLWCF\";\n    }\n    return \"NE_ST_NOTOK\";\n}\n\nstring __findStatusCodeDesc(errors::StatusCode code) {\n    switch(code) {\n        // no-error\n        case errors::NE_ST_OK: return \"\";\n        // storage\n        case errors::NE_ST_INVSTKY: return \"Invalid storage key format. The key should match regex: %1\";\n        case errors::NE_ST_NOSTKEX: return \"Unable to find storage key: %1\";\n        case errors::NE_ST_STKEYWE: return \"Unable to write data to key: %1\";\n        case errors::NE_ST_NOSTDIR: return \"Unable to read storage directory: %1\";\n        // os\n        case errors::NE_OS_UNLTOUP: return \"Unable to update process id: %1\";\n        case errors::NE_OS_INVNOTA: return \"Invalid notification style arguments: %1\";\n        case errors::NE_OS_INVMSGA: return \"Invalid message box style arguments: %1\";\n        case errors::NE_OS_TRAYIER: return \"Unable to initialize the tray menu\";\n        case errors::NE_OS_INVKNPT: return \"Invalid platform path name: %1\";\n        // extensions\n        case errors::NE_EX_EXTNOTC: return \"%1 is not connected yet\";\n        // filesystem\n        case errors::NE_FS_FILWRER: return \"Unable to write file: %1\";\n        case errors::NE_FS_DIRCRER: return \"Cannot create a directory in %1\";\n        case errors::NE_FS_REMVERR: return \"Cannot remove path: %1\";\n        case errors::NE_FS_FILRDER: return \"Unable to open file: %1\";\n        case errors::NE_FS_NOPATHE: return \"Unable to open path %1\";\n        case errors::NE_FS_COPYERR: return \"Cannot perform copy: %1\";\n        case errors::NE_FS_MOVEERR: return \"Cannot perform move: %1\";\n        case errors::NE_FS_FILOPER: return \"Unable to open file: %1\";\n        case errors::NE_FS_UNLTOUP: return \"Unable to update opened file id: %1\";\n        case errors::NE_FS_UNLTFOP: return \"Unable to find opened file id: %1\";\n        case errors::NE_FS_UNLCWAT: return \"Unable to create watcher for path: %1\";\n        case errors::NE_FS_NOWATID: return \"Unable to find watcher: %1\";\n        // window\n        case errors::NE_WI_UNBSWSR: return \"Unable to save window screenshot to %1\";\n        // router\n        case errors::NE_RT_INVTOKN: return \"Invalid or expired NL_TOKEN value from client\";\n        case errors::NE_RT_APIPRME: return \"Missing permission to access Native API\";\n        case errors::NE_RT_NATPRME: return \"Missing permission to execute the native method: %1\";\n        case errors::NE_RT_NATRTER: return \"Native method execution error occurred. Make sure that you've provided required parameters properly.\";\n        case errors::NE_RT_NATNTIM: return \"%1 is not implemented in the Neutralinojs server\";\n        // resources\n        case errors::NE_RS_TREEGER: return \"Resource file tree generation error. %1 is missing.\";\n        case errors::NE_RS_UNBLDRE: return \"Unable to load application resource file %1\";\n        case errors::NE_RS_APIRQRF: return \"Resource API works only when the resource file is loaded\";\n        case errors::NE_RS_FILNOTF: return \"The request file (%1) is not found in the resource bundle\";\n        \n        // server\n        case errors::NE_SR_UNBSEND: return \"Unable to send native message\";\n        case errors::NE_SR_UNBPARS: return \"Unable to parse native call payload\";\n        // config\n        case errors::NE_CF_UNBLDCF: return \"Unable to load the %1 configuration file. Framework defaults will be loaded.\";\n        case errors::NE_CF_UNBPRCF: return \"Unable to parse the config file: %1\";\n        case errors::NE_CF_UNSUPMD: return \"Unsupported mode: %1. The default mode (window) is selected.\";\n                case errors::NE_CF_UNBLWCF: return \"Unable to load the window config file: %1\";\n    }\n    return \"\";\n}\n\nstring __getStatusCodeDesc(errors::StatusCode code, string param = \"\") {\n    string msg = __findStatusCodeDesc(code);\n    return regex_replace(msg, regex(\"%1\"), param);\n}\n\njson makeMissingArgErrorPayload() {\n    return errors::makeErrorPayload(errors::NE_RT_NATRTER);\n}\n\njson makeErrorPayload(const errors::StatusCode code, const string &param) {\n    json error;\n    error[\"code\"] = __getStatusCodeString(code);\n    error[\"message\"] = __getStatusCodeDesc(code, param);\n    return error;\n}\n\nstring makeErrorMsg(const errors::StatusCode code, const string &param) {\n    return __getStatusCodeString(code) + \": \" + __getStatusCodeDesc(code, param);\n}\n\n} // namespace errors\n"
        },
        {
          "name": "errors.h",
          "type": "blob",
          "size": 1.2890625,
          "content": "#ifndef NEU_ERRORS_H\n#define NEU_ERRORS_H\n\n#include <string>\n\n#include \"lib/json/json.hpp\"\n\nusing namespace std;\nusing json = nlohmann::json;\n\nnamespace errors {\n\nenum StatusCode {\n    // no-error\n    NE_ST_OK,\n    // storage\n    NE_ST_INVSTKY,\n    NE_ST_NOSTKEX,\n    NE_ST_STKEYWE,\n    NE_ST_NOSTDIR,\n    // os\n    NE_OS_UNLTOUP,\n    NE_OS_INVNOTA,\n    NE_OS_INVMSGA,\n    NE_OS_TRAYIER,\n    NE_OS_INVKNPT,\n    // extensions\n    NE_EX_EXTNOTC,\n    // filesystem\n    NE_FS_FILWRER,\n    NE_FS_DIRCRER,\n    NE_FS_REMVERR,\n    NE_FS_FILRDER,\n    NE_FS_NOPATHE,\n    NE_FS_COPYERR,\n    NE_FS_MOVEERR,\n    NE_FS_FILOPER,\n    NE_FS_UNLTOUP,\n    NE_FS_UNLTFOP,\n    NE_FS_UNLCWAT,\n    NE_FS_NOWATID,\n    // window\n    NE_WI_UNBSWSR,\n    // router\n    NE_RT_INVTOKN,\n    NE_RT_APIPRME,\n    NE_RT_NATPRME,\n    NE_RT_NATRTER,\n    NE_RT_NATNTIM,\n    // resources\n    NE_RS_TREEGER,\n    NE_RS_UNBLDRE,\n    NE_RS_APIRQRF,\n    NE_RS_FILNOTF,\n    // server\n    NE_SR_UNBSEND,\n    NE_SR_UNBPARS,\n    // config\n    NE_CF_UNBLDCF,\n    NE_CF_UNBPRCF,\n    NE_CF_UNSUPMD,\n    NE_CF_UNBLWCF\n};\n\njson makeMissingArgErrorPayload();\njson makeErrorPayload(const errors::StatusCode code, const string &param = \"\");\nstring makeErrorMsg(const errors::StatusCode code, const string &param = \"\");\n\n} // namespace errors\n\n#endif // #define NEU_ERRORS_H\n\n\n"
        },
        {
          "name": "extensions_loader.cpp",
          "type": "blob",
          "size": 2.1005859375,
          "content": "#include <string>\n#include <iostream>\n#include <fstream>\n#include <algorithm>\n#include <regex>\n#include <vector>\n\n#include \"extensions_loader.h\"\n#include \"settings.h\"\n#include \"helpers.h\"\n#include \"auth/authbasic.h\"\n#include \"api/os/os.h\"\n\nusing namespace std;\nusing json = nlohmann::json;\n\nnamespace extensions {\n\nvector<string> loadedExtensions;\nbool initialized = false;\n\njson __buildExtensionProcessInput(const string &extensionId) {\n    json options = {\n        {\"nlPort\", to_string(settings::getOptionForCurrentMode(\"port\").get<int>())},\n        {\"nlToken\", authbasic::getTokenInternal()},\n        {\"nlConnectToken\", authbasic::getConnectTokenInternal()},\n        {\"nlExtensionId\", extensionId}\n    };\n    return options;\n}\n\nvoid init() {\n    json jExtensions = settings::getOptionForCurrentMode(\"extensions\");\n    if(jExtensions.is_null())\n        return;\n    vector<json> extensions = jExtensions.get<vector<json>>();\n    for(const json &extension: extensions) {\n        string commandKeyForOs = \"command\" + string(NEU_OS_NAME);\n\n        if(!helpers::hasField(extension, \"id\")) {\n            continue;\n        }\n\n        string extensionId = extension[\"id\"].get<string>();\n\n        if(helpers::hasField(extension, \"command\") || helpers::hasField(extension, commandKeyForOs)) {\n            string command = helpers::hasField(extension, commandKeyForOs) ? extension[commandKeyForOs].get<string>()\n                                : extension[\"command\"].get<string>();\n            command = regex_replace(command, regex(\"\\\\$\\\\{NL_PATH\\\\}\"), settings::getAppPath());\n\n            os::execCommand(command, __buildExtensionProcessInput(extensionId).dump(), true); // async\n        }\n\n        extensions::loadOne(extensionId);\n    }\n    initialized = true;\n}\n\nvoid loadOne(const string &extensionId) {\n    loadedExtensions.push_back(extensionId);\n}\n\nvector<string> getLoaded() {\n    return loadedExtensions;\n}\n\nbool isLoaded(const string &extensionId) {\n    return find(loadedExtensions.begin(), loadedExtensions.end(), extensionId)\n            != loadedExtensions.end();\n}\n\nbool isInitialized() {\n    return initialized;\n}\n\n} // namespace extensions\n"
        },
        {
          "name": "extensions_loader.h",
          "type": "blob",
          "size": 0.3935546875,
          "content": "#ifndef NEU_EXTENSIONS_H\n#define NEU_EXTENSIONS_H\n\n#include <string>\n#include <vector>\n\n#include \"lib/json/json.hpp\"\n\nusing namespace std;\nusing json = nlohmann::json;\n\nnamespace extensions {\n\nvoid init();\nvoid loadOne(const string &extensionId);\nvector<string> getLoaded();\nbool isLoaded(const string &extensionId);\nbool isInitialized();\n\n} // namesapce extensions\n\n#endif // #define NEU_EXTENSIONS_H\n\n"
        },
        {
          "name": "helpers.cpp",
          "type": "blob",
          "size": 4.0986328125,
          "content": "#include <vector>\n#include <string>\n#include <algorithm>\n#include <sstream>\n#include <time.h>\n#include <ctype.h>\n\n#include \"helpers.h\"\n#include \"lib/json/json.hpp\"\n\n#if defined(_WIN32)\n#include <string>\n#include <windows.h>\n#endif\n\nusing namespace std;\nusing json = nlohmann::json;\n\nnamespace helpers {\n\nvector<string> split(const string &s, char delim, unsigned int stopAfter) {\n    stringstream ss(s);\n    string item;\n    vector<string> tokens;\n    while (getline(ss, item, delim)) {\n        tokens.push_back(item);\n        if(stopAfter !=-1 && tokens.size() == stopAfter - 1) {\n            delim = '\\n';\n        }\n    }\n    return tokens;\n}\n\nvector<string> splitTwo(const string &s, char delim) {\n    return split(s, delim, 2);\n}\n\nstring generateToken() {\n    srand(time(NULL));\n\n    string s = \"\";\n    static const char alphanum[] =\n        \"-_\"\n        \"0123456789\"\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        \"abcdefghijklmnopqrstuvwxyz\";\n\n    for (int i = 0; i < 96; ++i) {\n        s += alphanum[rand() % (sizeof(alphanum) - 1)];\n        if(i == 47) {\n            s += \".\";\n        }\n    }\n\n    return s;\n}\n\n/*\n* https://stackoverflow.com/a/14530993 - mini url decoder\n*/\nvoid urldecode(char *dst, const char *src) {\n    char a, b;\n    while (*src) {\n        if ((*src == '%') &&\n            ((a = src[1]) && (b = src[2])) &&\n            (isxdigit(a) && isxdigit(b))) {\n            if (a >= 'a')\n                a -= 'a' - 'A';\n            if (a >= 'A')\n                a -= ('A' - 10);\n            else\n                a -= '0';\n            if (b >= 'a')\n                b -= 'a' - 'A';\n            if (b >= 'A')\n                b -= ('A' - 10);\n            else\n                b -= '0';\n            *dst++ = 16 * a + b;\n            src += 3;\n        }\n        else if (*src == '+') {\n            *dst++ = ' ';\n            src++;\n        }\n        else {\n            *dst++ = *src++;\n        }\n    }\n    *dst++ = '\\0';\n}\n\nchar* cStrCopy(const string &str) {\n    char *text = new char[str.size() + 1];\n    copy(str.begin(), str.end(), text);\n    text[str.size()] = '\\0';\n    // delete[] text from the initiator\n    return text;\n}\n\nbool hasRequiredFields(const json &input, const vector<string> &keys) {\n    for(const string &key: keys) {\n        if(!helpers::hasField(input, key)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool hasField(const json &input, const string &key) {\n    return input.contains(key) && !input[key].is_null();\n}\n\nvector<string> getModes() {\n    return {\"window\", \"browser\", \"cloud\", \"chrome\"};\n}\n\nstring appModeToStr(settings::AppMode mode) {\n    switch(mode) {\n        case settings::AppModeWindow:\n            return \"window\";\n        case settings::AppModeBrowser:\n            return \"browser\";\n        case settings::AppModeCloud:\n            return \"cloud\";\n        case settings::AppModeChrome:\n            return \"chrome\";\n        default:\n            return \"invalid\";\n    }\n}\n\nstring normalizePath(string &path) {\n    #if defined(_WIN32)\n    replace(path.begin(), path.end(), '\\\\', '/');\n    #endif\n    if(path.size() > 1 && path.back() == '/') {\n        path.pop_back();\n    }\n    return path;\n}\n\nstring unNormalizePath(string &path) {\n    #if defined(_WIN32)\n    replace(path.begin(), path.end(), '/', '\\\\');\n    #endif\n    return path;\n}\n\n#if defined(_WIN32)\nwstring str2wstr(const string &str) {\n    int len = MultiByteToWideChar(CP_UTF8, 0, str.c_str(), (int)str.size(), nullptr, 0);\n    wstring ret(len, '\\0');\n    MultiByteToWideChar(CP_UTF8, 0, str.c_str(), (int)str.size(), (LPWSTR)ret.data(), (int)ret.size());\n    return ret;\n}\n\nstring wstr2str(const wstring &str) {\n    int len = WideCharToMultiByte(CP_UTF8, 0, str.c_str(), (int)str.size(), nullptr, 0, nullptr, nullptr);\n    string ret(len, '\\0');\n    WideCharToMultiByte(CP_UTF8, 0, str.c_str(), (int)str.size(), (LPSTR)ret.data(), (int)ret.size(), nullptr, nullptr);\n    return ret;\n}\n\nstring wcstr2str(const wchar_t* wstr) {\n    int count = WideCharToMultiByte(CP_UTF8, 0, wstr, wcslen(wstr), NULL, 0, NULL, NULL);\n    string str(count, 0);\n    WideCharToMultiByte(CP_UTF8, 0, wstr, -1, &str[0], count, NULL, NULL);\n    return str;\n}\n#endif\n\n} // namespace helpers\n"
        },
        {
          "name": "helpers.h",
          "type": "blob",
          "size": 1.24609375,
          "content": "#ifndef NEU_HELPERS_H\n#define NEU_HELPERS_H\n\n#include <vector>\n#include <string>\n\n#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n#define CONVSTR(S) S\n#define FS_CONVWSTR(S) S.string()\n#define FS_CONVWSTRN(S) S.string()\n#elif defined(_WIN32)\n#define CONVSTR(S) helpers::str2wstr(S)\n#define FS_CONVWSTR(S) helpers::wstr2str(S.wstring())\n#define FS_CONVWSTRN(S) helpers::normalizePath(helpers::wstr2str(S.wstring()))\n#endif\n\n#include \"lib/json/json.hpp\"\n\n#include \"settings.h\"\n\nusing namespace std;\nusing json = nlohmann::json;\n\nnamespace helpers {\n\nvector<string> split(const string &s, char delim, unsigned int stopAfter = -1);\nvector<string> splitTwo(const string &s, char delim);\nstring generateToken();\nvoid urldecode(char *dst, const char *src);\nchar* cStrCopy(const string &str);\nbool hasRequiredFields(const json &input, const vector<string> &keys);\nbool hasField(const json &input, const string &key);\nvector<string> getModes();\nstring appModeToStr(settings::AppMode mode);\nstring normalizePath(string &path);\nstring unNormalizePath(string &path);\n\n#if defined(_WIN32)\nwstring str2wstr(const string &str);\nstring wstr2str(const wstring &str);\nstring wcstr2str(const wchar_t* wstr);\n#endif\n\n} // namespace helpers\n\n#endif // #define NEU_HELPERS_H\n\n\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.cpp",
          "type": "blob",
          "size": 5.6083984375,
          "content": "#include <cstdlib>\n#include <string>\n#include <thread>\n#if defined(_WIN32)\n#include <winsock2.h>\n#include <websocketpp/error.hpp>\n#endif\n\n#include \"lib/json/json.hpp\"\n#include \"lib/easylogging/easylogging++.h\"\n#include \"lib/filedialogs/portable-file-dialogs.h\"\n#include \"auth/permission.h\"\n#include \"auth/authbasic.h\"\n#include \"server/neuserver.h\"\n#include \"settings.h\"\n#include \"resources.h\"\n#include \"helpers.h\"\n#include \"chrome.h\"\n#include \"extensions_loader.h\"\n#include \"api/app/app.h\"\n#include \"api/window/window.h\"\n#include \"api/os/os.h\"\n#include \"api/debug/debug.h\"\n#include \"api/storage/storage.h\"\n\n#define NEU_APP_LOG_FILE \"/neutralinojs.log\"\n#define NEU_APP_LOG_FORMAT \"%level %datetime %msg %loc %user@%host\"\n#define ELPP_THREAD_SAFE\n\nINITIALIZE_EASYLOGGINGPP\n\nusing namespace std;\nusing json = nlohmann::json;\n\nstring navigationUrl = \"\";\n\nvoid __wait() {\n    while(true) {\n        this_thread::sleep_for(20000ms);\n    }\n}\n\nvoid __startApp() {\n    json options = settings::getConfig();\n    switch(settings::getMode()) {\n        case settings::AppModeBrowser:\n            os::open(navigationUrl);\n            __wait();\n            break;\n        case settings::AppModeWindow: {\n            json windowOptions = options[\"modes\"][\"window\"];\n            windowOptions[\"url\"] = navigationUrl;\n            window::controllers::init(windowOptions);\n            }\n            break;\n        case settings::AppModeCloud:\n            if(neuserver::isInitialized()) {\n                debug::log(debug::LogTypeInfo, settings::getAppId() +\n                        \" is available at \" + navigationUrl);\n            }\n            __wait();\n            break;\n        case settings::AppModeChrome: {\n            json chromeOptions = options[\"modes\"][\"chrome\"];\n            chromeOptions[\"url\"] = navigationUrl;\n            chrome::init(chromeOptions);\n            __wait();\n            }\n            break;\n    }\n}\n\nvoid __configureLogger() {\n    bool enableLogging = true;\n    bool enableLogFile = true;\n\n    json logging = settings::getOptionForCurrentMode(\"logging\");\n    if(!logging[\"enabled\"].is_null()) {\n        enableLogging = logging[\"enabled\"].get<bool>();\n    }\n    if(!logging[\"writeToLogFile\"].is_null()) {\n        enableLogFile = logging[\"writeToLogFile\"].get<bool>();\n    }\n\n    el::Configurations defaultConf;\n    defaultConf.setToDefault();\n    defaultConf.setGlobally(\n            el::ConfigurationType::Format, NEU_APP_LOG_FORMAT);\n\n    if(enableLogFile) {\n        defaultConf.setGlobally(\n                el::ConfigurationType::Filename, settings::joinAppDataPath(NEU_APP_LOG_FILE));\n    }\n    defaultConf.setGlobally(\n            el::ConfigurationType::ToFile, enableLogFile ? \"true\" : \"false\");\n\n    defaultConf.setGlobally(\n            el::ConfigurationType::Enabled, enableLogging ? \"true\" : \"false\");\n    el::Loggers::reconfigureLogger(\"default\", defaultConf);\n}\n\nvoid __startServerAsync() {\n    navigationUrl = settings::getNavigationUrl();\n    json jEnableServer = settings::getOptionForCurrentMode(\"enableServer\");\n\n    if(!jEnableServer.is_null() && jEnableServer.get<bool>()) {\n        try {\n            navigationUrl = neuserver::init();\n        }\n        catch(websocketpp::exception &e) {\n            json jPort = settings::getOptionForCurrentMode(\"port\");\n            string errorMsg = \"Neutralinojs can't initialize the application server\";\n            if(!jPort.is_null()) {\n                errorMsg += \" on port: \" + to_string(jPort.get<int>());\n            }\n            pfd::message(\"Unable to start server\",\n                errorMsg,\n                pfd::choice::ok,\n                pfd::icon::error);\n            std::exit(1);\n        }\n        neuserver::startAsync();\n    }\n}\n\nvoid __initFramework(const json &args) {\n    settings::setGlobalArgs(args);\n    resources::init();\n    bool settingsStatus = settings::init();\n    if(!settingsStatus) {\n        pfd::message(\"Unable to load configuration\",\n            \"The application configuration file cannot be loaded due to a JSON parsing error.\",\n            pfd::choice::ok,\n            pfd::icon::error);\n        std::exit(1);\n    }\n    authbasic::init();\n    permission::init();\n    storage::init();\n}\n\nvoid __initExtra() {\n    bool enableExtensions = false;\n    bool exportAuthInfo = false;\n    json exts = settings::getOptionForCurrentMode(\"enableExtensions\");\n    if(!exts.is_null()) {\n        enableExtensions = exts.get<bool>();\n    }\n    json exportAuth = settings::getOptionForCurrentMode(\"exportAuthInfo\");\n    if(!exportAuth.is_null()) {\n        exportAuthInfo = exportAuth.get<bool>();\n    }\n\n    if(exportAuthInfo) {\n        authbasic::exportAuthInfo();\n    }\n    if(enableExtensions) {\n        extensions::init();\n    }\n}\n\n#if defined(_WIN32)\nvoid __attachConsole() {\n    FILE* fp;\n    if(AttachConsole(ATTACH_PARENT_PROCESS)) { \n        freopen_s(&fp, \"CONIN$\", \"r\", stdin);\n        freopen_s(&fp, \"CONOUT$\", \"w\", stdout);\n        freopen_s(&fp, \"CONOUT$\", \"w\", stderr);\n    }\n}\n\n#define ARG_C __argc\n#define ARG_V __wargv\n#define CONVWCSTR(S) helpers::wcstr2str(S)\nint APIENTRY wWinMain(HINSTANCE hInstance,\n                      HINSTANCE hPrevInstance,\n                      LPTSTR    lpCmdLine,\n                      int       nCmdShow)\n#elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n#define ARG_C argc\n#define ARG_V argv\n#define CONVWCSTR(S) S\nint main(int argc, char ** argv)\n#endif\n                                 {\n    json args;\n    for (int i = 0; i < ARG_C; i++) {\n        args.push_back(CONVWCSTR(ARG_V[i]));\n    }\n    #if defined(_WIN32)\n    __attachConsole();\n    #endif\n    __initFramework(args);\n    __startServerAsync();\n    __configureLogger();\n    __initExtra();\n    __startApp();\n    return 0;\n}\n"
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources.cpp",
          "type": "blob",
          "size": 4.3515625,
          "content": "#include <string>\n#include <iostream>\n#include <fstream>\n#include <regex>\n#include <vector>\n#include <limits.h>\n\n#include \"lib/easylogging/easylogging++.h\"\n#include \"lib/json/json.hpp\"\n#include \"helpers.h\"\n#include \"errors.h\"\n#include \"settings.h\"\n#include \"resources.h\"\n#include \"api/debug/debug.h\"\n#include \"api/fs/fs.h\"\n\n#define NEU_APP_RES_FILE \"/resources.neu\"\n\nusing namespace std;\nusing json = nlohmann::json;\n\nnamespace resources {\n\njson fileTree = nullptr;\nunsigned int asarHeaderSize;\nresources::ResourceMode mode = resources::ResourceModeBundle;\n\npair<int, string> __seekFilePos(const string &path, json node, const string &curpath) {\n    vector<string> pathSegments = helpers::split(path, '/');\n    string filename = pathSegments[pathSegments.size() - 1];\n    json json = node;\n    for(const auto &pathSegment: pathSegments) {\n        if(pathSegment.length() == 0 || json.is_null() || json[\"files\"].is_null())\n            continue;\n        json = json[\"files\"][pathSegment];\n    }\n    if(!json.is_null())\n        return make_pair<int, string>(json[\"size\"].get<int>(), json[\"offset\"].get<string>());\n    return make_pair<int, string>(-1, \"\");\n}\n\n// Needs explicit close later\nifstream __openResourceFile() {\n    ifstream asarArchive;\n    string resFileName = NEU_APP_RES_FILE;\n    resFileName = settings::joinAppPath(resFileName);\n    asarArchive.open(CONVSTR(resFileName), ios::binary);\n    if(!asarArchive) {\n        debug::log(debug::LogTypeError, errors::makeErrorMsg(errors::NE_RS_TREEGER, resFileName));\n    }\n    return asarArchive;\n}\n\nfs::FileReaderResult __getFileFromBundle(const string &filename) {\n    fs::FileReaderResult fileReaderResult;\n    pair<int, string> p = __seekFilePos(filename, fileTree, \"\");\n    if(p.first != -1) {\n        ifstream asarArchive = __openResourceFile();\n        if (!asarArchive) {\n            fileReaderResult.status = errors::NE_RS_TREEGER;\n            return fileReaderResult;\n        }\n        unsigned int uSize = p.first;\n        unsigned int uOffset = stoi(p.second);\n\n        vector<char>fileBuf ( uSize );\n        asarArchive.seekg(asarHeaderSize + uOffset);\n        asarArchive.read(fileBuf.data(), uSize);\n        string fileContent(fileBuf.begin(), fileBuf.end());\n        fileReaderResult.data = fileContent;\n        asarArchive.close();\n   }\n   else {\n        fileReaderResult.status = errors::NE_RS_FILNOTF;\n   }\n   return fileReaderResult;\n}\n\nbool __makeFileTree() {\n    ifstream asarArchive = __openResourceFile();\n    if (!asarArchive) {\n        return false;\n    }\n\n    char *sizeBuf = new char[8];\n    asarArchive.read(sizeBuf, 8);\n    unsigned int uSize = *(unsigned int *)(sizeBuf + 4) - 8;\n\n    delete[] sizeBuf;\n\n    asarHeaderSize = uSize + 16;\n    vector<char> headerBuf(uSize);\n    asarArchive.seekg(16);\n    asarArchive.read(headerBuf.data(), uSize);\n    json files;\n    string headerContent(headerBuf.begin(), headerBuf.end());\n    asarArchive.close();\n    try {\n        files = json::parse(headerContent);\n    }\n    catch(exception e) {\n        debug::log(debug::LogTypeError, e.what());\n    }\n    fileTree = files;\n    return fileTree != nullptr;\n}\n\nbool extractFile(const string &filename, const string &outputFilename) {\n    fs::FileReaderResult fileReaderResult = resources::getFile(filename);\n    if(fileReaderResult.status != errors::NE_ST_OK) {\n      return false;\n    }\n    fs::FileWriterOptions fileWriterOptions;\n    fileWriterOptions.filename = outputFilename;\n    fileWriterOptions.data = fileReaderResult.data;\n    return fs::writeFile(fileWriterOptions);\n}\n\nfs::FileReaderResult getFile(const string &filename) {\n    if(resources::isBundleMode()) {\n        return __getFileFromBundle(filename);\n    }\n    return fs::readFile(settings::joinAppPath(filename));\n}\n\nvoid init() {\n    if(resources::isDirMode()) {\n        return;\n    }\n    bool resourceLoaderStatus = __makeFileTree();\n    if(!resourceLoaderStatus) {\n        resources::setMode(resources::ResourceModeDir); // fallback to directory mode\n    }\n}\n\nvoid setMode(const resources::ResourceMode m) {\n    mode = m;\n}\n\nresources::ResourceMode getMode() {\n    return mode;\n}\n\nbool isDirMode() {\n   return resources::getMode() == resources::ResourceModeDir;\n}\n\nbool isBundleMode() {\n   return resources::getMode() == resources::ResourceModeBundle;\n}\n\njson getFileTree() {\n   return fileTree;\n}\n\nstring getModeString() {\n    return resources::isDirMode() ? \"directory\" : \"bundle\";\n}\n\n} // namespace resources\n"
        },
        {
          "name": "resources.h",
          "type": "blob",
          "size": 0.609375,
          "content": "#ifndef NEU_RESOURCES_H\n#define NEU_RESOURCES_H\n\n#include <string>\n\n#include \"lib/json/json.hpp\"\n#include \"api/fs/fs.h\"\n\nusing namespace std;\nusing json = nlohmann::json;\n\nnamespace resources {\n\nenum ResourceMode { ResourceModeDir, ResourceModeBundle };\n\nfs::FileReaderResult getFile(const string &filename);\nbool extractFile(const string &filename, const string &outputFilename);\nvoid init();\nvoid setMode(const resources::ResourceMode mode);\nresources::ResourceMode getMode();\nbool isDirMode();\nbool isBundleMode();\nstring getModeString();\njson getFileTree();\n\n} // namespace resources\n\n#endif // #define NEU_RESOURCES_H\n\n"
        },
        {
          "name": "schemas",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.cpp",
          "type": "blob",
          "size": 12.1533203125,
          "content": "#include <string>\n#include <iostream>\n#include <fstream>\n#include <algorithm>\n#include <regex>\n#include <vector>\n#include <map>\n#include <set>\n\n#include \"lib/json/json.hpp\"\n#include \"settings.h\"\n#include \"extensions_loader.h\"\n#include \"resources.h\"\n#include \"helpers.h\"\n#include \"auth/authbasic.h\"\n#include \"api/fs/fs.h\"\n#include \"api/debug/debug.h\"\n#include \"api/app/app.h\"\n#include \"api/custom/custom.h\"\n#include \"api/window/window.h\"\n#include \"api/computer/computer.h\"\n\n#include \"lib/platformfolders/platform_folders.h\"\n\nusing namespace std;\nusing json = nlohmann::json;\n\nnamespace settings {\n\njson options;\njson globalArgs;\nstring appPath;\nstring systemDataPath;\nstring appDataPath; // appPath or systemDataPath based on config.dataLocation\nstring configFile = NEU_APP_CONFIG_FILE;\n\nvector<settings::ConfigOverride> configOverrides;\n\nstring joinAppPath(const string &filename) {\n    return appPath + filename;\n}\n\nstring joinAppDataPath(const string &filename) {\n    return appDataPath + filename;\n}\n\nstring joinSystemDataPath(const string &filename) {\n    return systemDataPath + filename;\n}\n\nstring getAppPath() {\n    return appPath;\n}\n\nstring getConfigFile() {\n    return configFile;\n}\n\nbool init() {\n    options = json::object();\n    json config;\n    fs::FileReaderResult fileReaderResult = resources::getFile(configFile);\n    if(fileReaderResult.status == errors::NE_ST_OK) {\n        try {\n            config = json::parse(fileReaderResult.data);\n            options = config;\n        }\n        catch(exception e) {\n            debug::log(debug::LogTypeError, errors::makeErrorMsg(errors::NE_CF_UNBPRCF, string(configFile)));\n            return false;\n        }\n    }\n    else {\n        debug::log(debug::LogTypeError, errors::makeErrorMsg(errors::NE_CF_UNBLDCF, string(configFile)));\n    }\n\n    // Apply config overrides\n    json patches;\n    for(const auto &cfgOverride: configOverrides) {\n        json patch;\n\n        patch[\"op\"] = options[json::json_pointer(cfgOverride.key)].is_null()\n                            ? \"add\" : \"replace\";\n        patch[\"path\"] = cfgOverride.key;\n\n        // String to actual types\n        if(cfgOverride.convertTo == \"int\") {\n            patch[\"value\"] = stoi(cfgOverride.value);\n        }\n        else if(cfgOverride.convertTo == \"bool\") {\n            patch[\"value\"] = cfgOverride.value == \"true\";\n        }\n        else {\n            patch[\"value\"] = cfgOverride.value;\n        }\n\n        patches.push_back(patch);\n    }\n\n    if(!patches.is_null()) {\n        options = options.patch(patches);\n    }\n\n    systemDataPath = sago::getDataHome() + \"/\" + settings::getAppId();\n    systemDataPath = helpers::normalizePath(systemDataPath);\n\n    string dataLoc = \"app\";\n    json jLoc = settings::getOptionForCurrentMode(\"dataLocation\");\n    if(!jLoc.is_null()) {\n        dataLoc = jLoc.get<string>();\n    }\n    \n    appDataPath = dataLoc == \"system\" ? systemDataPath : appPath;\n\n    return true;\n}\n\njson getConfig() {\n    return options;\n}\n\nstring getAppId() {\n    if(!options[\"applicationId\"].is_null()) {\n        string appId = options[\"applicationId\"].get<string>();\n        appId = regex_replace(appId, regex(\"[^\\\\w.]\"), \"\");\n        return regex_replace(appId, regex(\"[.]{2,}\"), \".\");\n    }\n    return \"js.neutralino.framework\";\n}\n\nstring getNavigationUrl() {\n    return !settings::getOptionForCurrentMode(\"url\").is_null() ?\n        settings::getOptionForCurrentMode(\"url\").get<string>() : \"https://neutralino.js.org\";\n}\n\nstring getGlobalVars(){\n    string jsSnippet = \"var NL_OS='\" + string(NEU_OS_NAME) + \"';\";\n    jsSnippet += \"var NL_ARCH='\" + computer::getArch() + \"';\";\n    jsSnippet += \"var NL_VERSION='\" + string(NEU_VERSION) + \"';\";\n    jsSnippet += \"var NL_COMMIT='\" + string(NEU_COMMIT) + \"';\";\n    jsSnippet += \"var NL_APPID='\" + settings::getAppId() + \"';\";\n    if(!options[\"version\"].is_null()) {\n        jsSnippet += \"var NL_APPVERSION='\" + options[\"version\"].get<string>() + \"';\";\n    }\n    jsSnippet += \"var NL_PORT=\" + to_string(settings::getOptionForCurrentMode(\"port\").get<int>()) + \";\";\n    jsSnippet += \"var NL_MODE='\" + helpers::appModeToStr(settings::getMode()) + \"';\";\n    jsSnippet += \"var NL_TOKEN='\" + authbasic::getToken() + \"';\";\n    jsSnippet += \"var NL_CWD='\" + fs::getCurrentDirectory() + \"';\";\n    jsSnippet += \"var NL_ARGS=\" + globalArgs.dump() + \";\";\n    jsSnippet += \"var NL_PATH='\" + appPath + \"';\";\n    jsSnippet += \"var NL_DATAPATH='\" + appDataPath + \"';\";\n    jsSnippet += \"var NL_PID=\" + to_string(app::getProcessId()) + \";\";\n    jsSnippet += \"var NL_RESMODE='\" + resources::getModeString() + \"';\";\n    jsSnippet += \"var NL_EXTENABLED=\" + json(extensions::isInitialized()).dump() + \";\";\n    jsSnippet += \"var NL_CMETHODS=\" + json(custom::getMethods()).dump() + \";\";\n    jsSnippet += \"var NL_WSAVSTLOADED=\" + json(window::isSavedStateLoaded()).dump() + \";\";\n    jsSnippet += \"var NL_CONFIGFILE='\" + settings::getConfigFile() + \"';\";\n\n    json jGlobalVariables = settings::getOptionForCurrentMode(\"globalVariables\");\n    if(!jGlobalVariables.is_null()) {\n        for(const auto &it: jGlobalVariables.items()) {\n            jsSnippet += \"var NL_\" + it.key() +  \"=JSON.parse('\" + it.value().dump() + \"');\";\n        }\n    }\n    return jsSnippet;\n}\n\nsettings::CliArg _parseArg(const string &argStr) {\n    settings::CliArg arg;\n    vector<string> argParts = helpers::splitTwo(argStr, '=');\n    if(argParts.size() == 2 && argParts[1].length() > 0) {\n        arg.key = argParts[0];\n        arg.value = argParts[1];\n    }\n    else {\n        arg.key = argStr;\n    }\n    return arg;\n}\n\nvoid setGlobalArgs(const json &args) {\n    int argIndex = 0;\n    globalArgs = args;\n    for(const string &arg: args) {\n        settings::CliArg cliArg = _parseArg(arg);\n\n        // Set default path\n        if(argIndex == 0) {\n            appPath = fs::getDirectoryName(arg);\n            if(appPath == \"\")\n                appPath = fs::getCurrentDirectory();\n        }\n\n        // Resources read mode (resources.neu or from directory)\n        if(cliArg.key == \"--load-dir-res\") {\n            resources::setMode(resources::ResourceModeDir);\n            continue;\n        }\n\n        // Set app path context\n        if(cliArg.key == \"--path\") {\n            appPath = cliArg.value;\n            continue;\n        }\n\n        // Set app config file name\n        if(cliArg.key == \"--config-file\") {\n            configFile = cliArg.value;\n            continue;\n        }\n\n        // Enable dev tools connection (as an extension)\n        // Not available for production (resources.neu-based) apps\n        if(cliArg.key == \"--neu-dev-extension\" && !resources::isBundleMode()) {\n            extensions::loadOne(\"js.neutralino.devtools\");\n            continue;\n        }\n\n        // Override app configs\n        applyConfigOverride(cliArg);\n\n        argIndex++;\n    }\n}\n\nsettings::AppMode getMode() {\n    string mode = !options[\"defaultMode\"].is_null() ?\n                    options[\"defaultMode\"].get<string>() : \"window\";\n    if(mode == \"window\") return settings::AppModeWindow;\n    if(mode == \"browser\") return settings::AppModeBrowser;\n    if(mode == \"cloud\") return settings::AppModeCloud;\n    if(mode == \"chrome\") return settings::AppModeChrome;\n    return settings::AppModeWindow;\n}\n\nvoid setPort(int port) {\n    options[\"port\"] = port;\n\n    options[\"/modes/window/port\"_json_pointer] = port;\n    options[\"/modes/browser/port\"_json_pointer] = port;\n    options[\"/modes/cloud/port\"_json_pointer] = port;\n    options[\"/modes/chrome/port\"_json_pointer] = port;\n}\n\nvoid applyConfigOverride(const settings::CliArg &arg) {\n    map<string, vector<string>> cliMappings = {\n        // Top level\n        {\"--mode\", {\"/defaultMode\", \"string\"}},\n        {\"--url\", {\"/url\", \"string\"}},\n        {\"--document-root\", {\"/documentRoot\", \"string\"}},\n        {\"--port\", {\"/port\", \"int\"}},\n        {\"--logging-enabled\", {\"/logging/enabled\", \"bool\"}},\n        {\"--logging-write-to-log-file\", {\"/logging/writeToLogFile\", \"bool\"}},\n        {\"--enable-server\", {\"/enableServer\", \"bool\"}},\n        {\"--enable-native-api\", {\"/enableNativeAPI\", \"bool\"}},\n        {\"--single-page-serve\", {\"/singlePageServe\", \"bool\"}},\n        {\"--enable-extensions\", {\"/enableExtensions\", \"bool\"}},\n        {\"--export-auth-info\", {\"/exportAuthInfo\", \"bool\"}},\n        {\"--data-location\", {\"/dataLocation\", \"string\"}},\n        {\"--storage-location\", {\"/storageLocation\", \"string\"}},\n        // Window mode\n        {\"--window-title\", {\"/modes/window/title\", \"string\"}},\n        {\"--window-width\", {\"/modes/window/width\", \"int\"}},\n        {\"--window-height\", {\"/modes/window/height\", \"int\"}},\n        {\"--window-min-width\", {\"/modes/window/minWidth\", \"int\"}},\n        {\"--window-min-height\", {\"/modes/window/minHeight\", \"int\"}},\n        {\"--window-max-width\", {\"/modes/window/maxWidth\", \"int\"}},\n        {\"--window-max-height\", {\"/modes/window/maxHeight\", \"int\"}},\n        {\"--window-x\", {\"/modes/window/x\", \"int\"}},\n        {\"--window-y\", {\"/modes/window/y\", \"int\"}},\n        {\"--window-full-screen\", {\"/modes/window/fullScreen\", \"bool\"}},\n        {\"--window-always-on-top\", {\"/modes/window/alwaysOnTop\", \"bool\"}},\n        {\"--window-enable-inspector\", {\"/modes/window/enableInspector\", \"bool\"}},\n        {\"--window-borderless\", {\"/modes/window/borderless\", \"bool\"}},\n        {\"--window-maximize\", {\"/modes/window/maximize\", \"bool\"}},\n        {\"--window-hidden\", {\"/modes/window/hidden\", \"bool\"}},\n        {\"--window-resizable\", {\"/modes/window/resizable\", \"bool\"}},\n        {\"--window-maximizable\", {\"/modes/window/maximizable\", \"bool\"}},\n        {\"--window-center\", {\"/modes/window/center\", \"bool\"}},\n        {\"--window-transparent\", {\"/modes/window/transparent\", \"bool\"}},\n        {\"--window-exit-process-on-close\", {\"/modes/window/exitProcessOnClose\", \"bool\"}},\n        {\"--window-use-saved-state\", {\"/modes/window/useSavedState\", \"bool\"}},\n        {\"--window-icon\", {\"/modes/window/icon\", \"string\"}},\n        {\"--window-extend-user-agent-with\", {\"/modes/window/extendUserAgentWith\", \"string\"}},\n        {\"--window-inject-globals\", {\"/modes/window/injectGlobals\", \"bool\"}},\n        {\"--window-inject-client-library\", {\"/modes/window/injectClientLibrary\", \"bool\"}},\n        {\"--window-inject-script\", {\"/modes/window/injectScript\", \"string\"}},\n        // Chrome mode\n        {\"--chrome-width\", {\"/modes/chrome/width\", \"int\"}},\n        {\"--chrome-height\", {\"/modes/chrome/height\", \"int\"}},\n        {\"--chrome-args\", {\"/modes/chrome/args\", \"string\"}}\n    };\n\n    // Allows overriding from modes\n    // So, update all modes' values from CLI args\n    set<string> cliMappingAliases = {\n        \"/port\",\n        \"/url\",\n        \"/documentRoot\",\n        \"/logging/enabled\",\n        \"/logging/writeToLogFile\",\n        \"/enableServer\",\n        \"/enableNativeAPI\",\n        \"/singlePageServe\",\n        \"/enableExtensions\",\n        \"/exportAuthInfo\"\n    };\n\n    if(cliMappings.find(arg.key) != cliMappings.end()) {\n        if(arg.key == \"--mode\") {\n            vector<string> modes = helpers::getModes();\n\n            if(find(modes.begin(), modes.end(), arg.value) == modes.end()) {\n                debug::log(debug::LogTypeError,  errors::makeErrorMsg(errors::NE_CF_UNSUPMD, arg.value));\n                return;\n            }\n        }\n        settings::ConfigOverride cfgOverride;\n        cfgOverride.key = cliMappings[arg.key][0];\n        cfgOverride.convertTo = cliMappings[arg.key][1];\n        cfgOverride.value = arg.value;\n\n        // Make cases like --window-full-screen -> window-full-screen=true\n        if(cfgOverride.convertTo == \"bool\" && cfgOverride.value.empty()) {\n            cfgOverride.value = \"true\";\n        }\n\n        // Add original\n        configOverrides.push_back(cfgOverride);\n\n        // Add aliases\n        if(cliMappingAliases.find(cfgOverride.key) != cliMappingAliases.end()) {\n            vector<string> modes = helpers::getModes();\n            for(const string &mode: modes) {\n                settings::ConfigOverride cfgOverrideAlias = cfgOverride;\n                cfgOverrideAlias.key = \"/modes/\" + mode + cfgOverride.key;\n\n                configOverrides.push_back(cfgOverrideAlias);\n            }\n        }\n    }\n}\n\n// Priority: mode -> root -> null\njson getOptionForCurrentMode(const string &key) {\n    string mode = helpers::appModeToStr(settings::getMode());\n    json value = options[\"modes\"][mode][key];\n    if(value.is_null()) {\n        value = options[key];\n    }\n    return value;\n}\n\n} // namespace settings\n"
        },
        {
          "name": "settings.h",
          "type": "blob",
          "size": 1.2177734375,
          "content": "#ifndef NEU_SETTINGS_H\n#define NEU_SETTINGS_H\n\n#if defined(__linux__)\n#define NEU_OS_NAME \"Linux\"\n\n#elif defined(_WIN32)\n#define NEU_OS_NAME \"Windows\"\n\n#elif defined(__APPLE__)\n#define NEU_OS_NAME \"Darwin\"\n\n#elif defined(__FreeBSD__)\n#define NEU_OS_NAME \"FreeBSD\"\n\n#else\n#define NEU_OS_NAME \"Unknown\"\n\n#endif\n\n#define NEU_APP_CONFIG_FILE \"/neutralino.config.json\"\n\n#include <string>\n\n#include \"lib/json/json.hpp\"\n\nusing namespace std;\nusing json = nlohmann::json;\n\nnamespace settings {\n\nstruct CliArg {\n    string key;\n    string value;\n};\n\nstruct ConfigOverride {\n    string key;\n    string value;\n    string convertTo;\n};\n\nenum AppMode { AppModeWindow, AppModeBrowser, AppModeCloud, AppModeChrome };\n\nbool init();\njson getConfig();\nstring getAppId();\nstring getNavigationUrl();\nstring getGlobalVars();\nvoid setGlobalArgs(const json &args);\nstring joinAppPath(const string &filename);\nstring joinSystemDataPath(const string &filename);\nstring joinAppDataPath(const string &filename);\nstring getAppPath();\nstring getConfigFile();\nsettings::AppMode getMode();\nvoid setPort(int port);\nvoid applyConfigOverride(const settings::CliArg &arg);\njson getOptionForCurrentMode(const string &key);\n\n} // namesapce settings\n\n#endif // #define NEU_SETTINGS_H\n\n"
        },
        {
          "name": "spec",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}