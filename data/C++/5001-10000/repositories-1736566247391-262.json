{
  "metadata": {
    "timestamp": 1736566247391,
    "page": 262,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "includeos/IncludeOS",
      "stars": 5074,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3369140625,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\ndraw_white_space = all\ntrim_trailing_white_space_on_save = true\n\n[Makefile]\nindent_style = tab\n\n[Makelib]\nindent_style = tab\n\n[*.py]\nindent_size = 4\n\n[boot]\nindent_size = 4\n\n[*.asm]\nindent_size = 4\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5048828125,
          "content": "*\n!/**/\n!*.*\n*~\n*.a\n*.o\n*.out\n*.iso\n*.qcow2\n*.vdi\n*.vmdk\n*.tmp\n*.d\n*.pyc\n*.ropeproject\n*.xml\n*.img\n*.img.*\n*.gz\n*.tar\n*nacl.txt\n\\#*\n.DS_Store\nnbproject\ndummy.disk\ncallgraph.svg\nmassif.out.*\n\n!Dockerfile\n\n/.vagrant\nbuild/\nbuild_i686/\nbuild_x86_64/\nbuild_conan/\n\n# ignore log files in test tree\ntest/**/*.log\n\n# cmake related\nCMakeFiles*\nCMakeCache*\ncmake_install.cmake\n\n# Name of installation folder\nIncludeOS_install\n\n# Vim\n*.swp\n\n#CLion\n.idea/\n\n# Starbase disk file\nlib/uplink/starbase/disk\n\n!Jenkinsfile\n!CHANGELOG\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.462890625,
          "content": "# Changelog\n<!--\nPlease categorize a release with the following headings: Added, Changed, Deprecated, Removed, Fixed, Security\nGuidelines taken from: https://keepachangelog.com/en/1.0.0/\n-->\n\n## v0.15.0\n\n### Added\n- Conan build system\n  - Major refactoring of how IncludeOS is built\n  - Multiple ARCH is managed by Conan profiles and dependencies\n  - 3rd party dependencies are now built and managed in Jenkins. All recipes can be found [here](https://github.com/includeos/conan)\n    - Updated to libcxx, libcxxabi 7.0.1\n    - Updated to GSL 2.0.0\n  - Stable and latest binary packages can be found in [bintray](https://bintray.com/includeos/includeos)\n  - A repo to install Conan configs for IncludeOS: [conan_config](https://github.com/includeos/conan_config)\n  - Improvements to Jenkins integration, automatic uploads of latest/stable packages on master-merge/tags\n- Experimental IPv6 (WIP) including SLAAC\n  - IPv6/IPv4 dual stack integration\n  - TCP/UDP client / server\n  - Autoconfiguration with SLAAC\n  - Configuration with config.json - see [#2114](https://github.com/includeos/IncludeOS/pull/2114)\n- HAL (work in progress)\n  - The OS is now backed by a common Machine structure that makes it easier to create new ports\n  - A custom C++ allocator is available very early allowing the use of STL before libc is ready\n\n### Changed\n- Updates to workflow. All documented in the [README](README.md)\n  - No more need for `INCLUDEOS_PREFIX` in env variables\n  - Removed ARCH as part of the path to libraries/drivers/plugins/etc\n    - Drivers and Plugins can be created outside includeos\n- Moved IncludeOS repository from `hioa-cs` to `includeos` organization\n- Major breaking changes in the OS API, in particular the OS class is removed, replaced with a smaller os namespace. Much of the code moved to new `kernel::` namespace.\n- Relocated plugins/libraries/scripts:\n  - [Hello World example](https://github.com/includeos/hello_world)\n  - [Demos and examples](https://github.com/includeos/demo-examples)\n  - [Mana](https://github.com/includeos/mana)\n  - [Uplink](https://github.com/includeos/uplink)\n  - [Vmrunner](https://github.com/includeos/vmrunner)\n  - [Diskbuilder](https://github.com/includeos/diskbuilder)\n  - [Vmbuild](https://github.com/includeos/vmbuild)\n  - [MicroLB](https://github.com/includeos/microlb)\n\n### Removed / archived\n- Cleanup of unused/outdated scripts\n  - `install.sh` is gone as it does no longer work with the Conan workflow\n- mender client is [archived](https://github.com/includeos/mender)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.001953125,
          "content": "cmake_minimum_required(VERSION 3.6)\n\n#we are only creating libraries for ELF\nset(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)\n\nproject (includeos C CXX)\n\noption(SMP \"Compile with SMP (multiprocessing)\" ON)\noption(PROFILE \"Compile with startup profilers\" OFF)\n\ninclude(cmake/includeos.cmake)\n\nadd_subdirectory(src)\n\n# Install cmake files\ninstall(FILES cmake/linux.service.cmake DESTINATION cmake)\ninstall(FILES cmake/os.cmake DESTINATION cmake)\ninstall(FILES cmake/includeos.cmake DESTINATION cmake)\n\n# Install config to enable find_package(IncludeOS)\ninclude(CMakePackageConfigHelpers)\nconfigure_package_config_file(\n  cmake/includeos-config.cmake.in\n  ${CMAKE_CURRENT_BINARY_DIR}/cmake/includeos-config.cmake\n  INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake)\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/cmake/includeos-config.cmake DESTINATION cmake)\n\n# Install IncludeOS user code dependencies\ninstall(FILES src/service_name.cpp DESTINATION src)\n\n# Install IncludeOS headers\ninstall(DIRECTORY api/ DESTINATION include/os)\n"
        },
        {
          "name": "CONTRIBUTE.md",
          "type": "blob",
          "size": 0.2998046875,
          "content": "# Contributing to IncludeOS\n\nYou're very welcome to [clone, edit and send pull-request](https://help.github.com/articles/using-pull-requests). \n\n**Please read the contribution guidelines: [Contributing to IncludeOS](http://includeos.readthedocs.io/en/latest/Contributing-to-IncludeOS.html)**\n\n## Thank you!\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.236328125,
          "content": "IncludeOS - A Resource Efficient Unikernel for Cloud Services\n\nCopyright 2015 Oslo and Akershus University College of Applied Sciences \nand Alfred Bratterud\n\nThis product includes software developed at\nIncludeOS (http://www.includeos.org/).\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.5732421875,
          "content": "IncludeOS\n================================================\n\n**IncludeOS** is an includable, minimal [unikernel](https://en.wikipedia.org/wiki/Unikernel) operating system for C++ services running in the cloud and on real HW. Starting a program with `#include <os>` will literally include a tiny operating system into your service during link-time.\n\nIncludeOS is free software, with \"no warranties or restrictions of any kind\".\n\n**Note:** *IncludeOS is under active development. The public API should not be considered stable.*\n\n## <a name=\"features\"></a> Key features\n\n* **Extreme memory footprint**: A minimal bootable 64-bit web server, including operating system components and anything needed from the C/C++ standard libraries is currently 2.5 MB.\n* **KVM, VirtualBox and VMWare support** with full virtualization, using [x86 hardware virtualization](https://en.wikipedia.org/wiki/X86_virtualization), available on most modern x86 CPUs. IncludeOS will run on any x86 hardware platform, even on a physical x86 computer, given appropriate drivers. Officially, we develop for- and test on [Linux KVM](http://www.linux-kvm.org/page/Main_Page), and VMWare [ESXi](https://www.vmware.com/products/esxi-and-esx.html)/[Fusion](https://www.vmware.com/products/fusion.html) which means that you can run your IncludeOS service on Linux, Microsoft Windows and macOS, as well as on cloud providers such as [Google Compute Engine](http://www.includeos.org/blog/2017/includeos-on-google-compute-engine.html), [OpenStack](https://www.openstack.org/) and VMWare [vcloud](https://www.vmware.com/products/vcloud-suite.html).\n* **Instant boot:** IncludeOS on Qemu/kvm boots in about 300ms but IBM Research has also integrated IncludeOS with [Solo5/uKVM](https://github.com/Solo5/solo5), providing boot times as low as 10 milliseconds.\n* **Modern C++ support**\n    * Full C++11/14/17/20 language support with [clang](http://clang.llvm.org) 18 and later.\n    * Standard C++ library (STL) [libc++](http://libcxx.llvm.org) from [LLVM](http://llvm.org/).\n    * Exceptions and stack unwinding (currently using [libgcc](https://gcc.gnu.org/onlinedocs/gccint/Libgcc.html)).\n    * *Note:* Certain language features, such as threads and filestreams are currently missing backend support but is beeing worked on.\n* **Standard C library** using [musl libc](http://www.musl-libc.org/).\n* **Virtio and vmxnet3 Network drivers** with DMA. [Virtio](https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=virtio) provides a highly efficient and widely supported I/O virtualization. vmxnet3 is the VMWare equivalent.\n* **A highly modular TCP/IP-stack**.\n\nA longer list of features and limitations can be found on our [documentation site](http://includeos.readthedocs.io/en/latest/Features.html).\n\n## Contents\n\n- [Getting started](#getting_started)\n    - [Dependencies](#dependencies)\n    - [Hello world](#hello_world)\n    - [Kernel development](#develop_kernel)\n    - [Running tests](#running_tests)\n- [Contributing to IncludeOS](#contribute)\n- [C++ Guidelines](#guideline)\n- [Security contact](#security)\n\n## <a name=\"getting_started\"></a> Getting started\n\n### <a name=\"dependencies\"></a> Dependencies\n\nFor building and booting IncludeOS services you will need [nix](https://nixos.org) and Linux. Nix will automatically download and set up the correct versions of all the required libraries and compilers.\n\nTo speed up local builds we also recommend configuring nix with [ccache support](https://nixos.wiki/wiki/CCache) but this is not a requirement. To use ccache, `--arg withCcache true` can be added to most `nix-build` and `nix-shell` commands shown below.\n\nIncludeOS can currently not be built on macOS or Windows.\n\n### <a href=\"hello_world\"></a> Hello World\n\nA minimal IncludeOS \"hello world\" looks like a regular C++ program:\n\n```c++\n#include <iostream>\n\nint main(){\n  std::cout << \"Hello world\\n\";\n}\n```\n\nA full \"Hello world\" service with a working nix workflow is available in the [hello world repo](https://github.com/includeos/hello_world). The repository can also be used as a a starting point for developing your own IncludeOS service.\n\nFor more advanced service examples see the the integration tests (under ./IncludeOS/test/\\*/integration).\n\n### <a name=\"develop_kernel\"></a> Kernel development\n\nTo build IncludeOS, run\n\n```bash\n$ nix-build\n```\n\nThis will build the toolchain and all IncludeOS kernel libraries.\n\nNote that the first build will take some time to complete, as the IncludeOS toolchain is rebuilt from source code. This includes clang, llvm, libcxx, musl and so on. There is no nix binary cache available for these files at the moment. Subsequent builds will go much faster when the toolchain has been cached in the local nix-store.\n\nAfter making changes to the kernel, run `nix-build` again to get new binaries. If you are iterating on changes in one section of the kernel you can speed up the build significantly by using ccache. All `nix-build` and `nix-shell` commands in this section support the optional parameter `--arg withCcache true`.\n\nIt's not always practical to rebuild the whole kernel during development. You can get a development shell with a preconfigured environment using `shell.nix`:\n\n```bash\n$ nix-shell\n```\n\nFurther instructions will be shown for optionally configuring VM networking or overriding the build path when starting the shell.\n\nBy default th shell will also build the unikernel from `example.nix`. The example unikernel can be booted from within the shell:\n\n```bash\n$ nix-shell\n[...]\nnix$ boot hello_includeos.elf.bin\n```\n\nIf you want to build a different unikernel than the example, this can be specified with the `--argstr unikernel [path]` parameter. This is primarily used for integration tests. For example, to build and run the stacktrace-test:\n\n```bash\n$ nix-shell --argstr unikernel ./test/kernel/integration/stacktrace\n[...]\nnix$ ls -l kernel*\nkernel_stacktrace\nnix$ boot kernel_stacktrace\n[...]\nCalling os::print_backtrace()\nsymtab or strtab is empty, indicating image may be stripped\n[0] 0x000000000025dcd2 + 0x000: 0x25dcd2\n[1] 0x000000000021097d + 0x000: 0x21097d\n[2] 0x00000000002b370a + 0x000: 0x2b370a\n[3] 0x0000000000210eea + 0x000: 0x210eea\nWe reached the end.\n```\n\nTo build and run the test VM as a single command:\n\n```bash\n$ nix-shell --argstr unikernel ./test/kernel/integration/stacktrace --run ./test.py\n```\n\n### <a name=\"running_tests\"></a> Running tests\n\nYou can run all the integration tests using the script `./test.sh`. The tests will run locally in the nix environment. We recommend manually verifying that all the tests pass locally before submitting a new PR to IncludeOS to save review time.\n\nIndividual tests can be run with `nix-shell` directly. See `test.sh` for more details.\n\n## <a name=\"contribute\"></a> Contributing to IncludeOS\n\nIncludeOS is being developed on GitHub. Create your own fork and send us a pull request. Please read the [Guidelines for Contributing to IncludeOS](http://includeos.readthedocs.io/en/latest/Contributing-to-IncludeOS.html).\n\n## <a name=\"guideline\"></a> C++ Guidelines\n\nWe want to adhere as much as possible to the [ISO C++ Core Guidelines](https://github.com/isocpp/CppCoreGuidelines). When you find code in IncludeOS which doesn't adhere, please let us know in the [issue tracker](https://github.com/includeos/IncludeOS/issues) - or even better, fix it in your own fork and send us a [pull-request](https://github.com/includeos/IncludeOS/pulls).\n\n## <a name=\"security\"></a> Security contact\nIf you discover a security issue in IncludeOS please avoid the public issue tracker. Instead send an email to security@includeos.org. For more information and encryption please refer to the [documentation](http://includeos.readthedocs.io/en/latest/Security.html).\n"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "chainloader.nix",
          "type": "blob",
          "size": 1.0634765625,
          "content": "{\n  withCcache ? false, # Enable ccache. Requires /nix/var/cache/ccache to exist with correct permissions.\n\n  nixpkgs ? ./pinned.nix,\n  overlays ? [\n    (import ./overlay.nix {\n      inherit withCcache;\n      smp = false; # No SMP for chainloader\n    })\n  ],\n  pkgs ? import nixpkgs {\n      config = { };\n      inherit overlays;\n      crossSystem = {\n        config = \"i686-unknown-linux-musl\";\n      };\n  },\n}:\nlet\n  includeos = pkgs.pkgsIncludeOS.includeos;\n  stdenv = pkgs.pkgsIncludeOS.stdenv;\nin\n\nassert (stdenv.targetPlatform.system != \"i686-linux\") ->\n  throw \"Chainloader must be built as 32-bit target\";\nassert (stdenv.targetPlatform.isLinux == false) ->\n  throw \"Target platform must be Linux\";\nassert (stdenv.targetPlatform.isMusl == false) ->\n  throw \"Target stdenv should be based on Musl\";\n\nstdenv.mkDerivation rec {\n  pname = \"chainloader\";\n  version = \"dev\";\n\n  sourceRoot = \"./src/chainload/\";\n\n  buildInputs = [\n    includeos\n  ];\n\n  srcs = [\n    ./src\n    ./api\n    ./cmake\n    ];\n\n  nativeBuildInputs = [\n    pkgs.buildPackages.cmake\n    pkgs.buildPackages.nasm\n  ];\n}\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "code-of-conduct.md",
          "type": "blob",
          "size": 3.279296875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project leader at alfred@includeos.org. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n\n"
        },
        {
          "name": "default.nix",
          "type": "blob",
          "size": 0.587890625,
          "content": "{ withCcache ? false, # Enable ccache. Requires correct permissions, see overlay.nix.\n  smp ? false, # Enable multcore support (SMP)\n  nixpkgs ? ./pinned.nix,\n  overlays ? [\n    (import ./overlay.nix { inherit withCcache; inherit smp; } )\n  ],\n  pkgs ? import nixpkgs { config = {}; inherit overlays; }\n}:\n\nlet\n  inherit (pkgs) pkgsIncludeOS;\nin\n  assert (pkgsIncludeOS.stdenv.buildPlatform.isLinux == false) ->\n    throw \"Currently only Linux builds are supported\";\n  assert (pkgsIncludeOS.stdenv.hostPlatform.isMusl == false) ->\n    throw \"Stdenv should be based on Musl\";\n\n  pkgsIncludeOS.includeos\n"
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "example.nix",
          "type": "blob",
          "size": 0.595703125,
          "content": "{ withCcache ? false,\n\n  doCheck ? true, # boot unikernel after building it\n  includeos ? import ./default.nix { inherit withCcache; },\n}:\n\nincludeos.stdenv.mkDerivation rec {\n  pname = \"includeos_example\";\n  src = includeos.pkgs.lib.cleanSource ./example;\n  dontStrip = true;\n  inherit doCheck;\n\n  nativeBuildInputs = [\n    includeos.pkgs.buildPackages.nasm\n    includeos.pkgs.buildPackages.cmake\n  ];\n\n  buildInputs = [\n    includeos\n    includeos.chainloader\n  ];\n\n  nativeCheckInputs = [\n    includeos.vmrunner\n    includeos.pkgs.qemu\n  ];\n\n  checkPhase = ''\n    boot *.elf.bin\n  '';\n\n  version = \"dev\";\n}\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "overlay.nix",
          "type": "blob",
          "size": 6.6240234375,
          "content": "{\n  withCcache, # Enable ccache. Requires correct permissions, see below.\n  smp,      # Enable multicore support (SMP)\n} :\nfinal: prev: {\n\n  stdenvIncludeOS = prev.pkgsStatic.lib.makeScope prev.pkgsStatic.newScope (self: {\n    llvmPkgs = prev.pkgsStatic.llvmPackages_18;\n    stdenv = self.llvmPkgs.libcxxStdenv; # Use this as base stdenv\n\n    # Import unpatched musl for building libcxx. Libcxx needs some linux headers to be passed through.\n    musl-unpatched = self.callPackage ./deps/musl-unpatched/default.nix { linuxHeaders = prev.linuxHeaders; };\n\n    # Import IncludeOS musl which will be built and linked with IncludeOS services\n    musl-includeos = self.callPackage ./deps/musl/default.nix { };\n\n    # Clang with unpatched musl for building libcxx\n    clang_musl_unpatched_nolibcxx = self.llvmPkgs.clangNoLibcxx.override (old: {\n      bintools = prev.pkgsStatic.bintools.override {\n        # Disable hardening flags while we work on the build\n        defaultHardeningFlags = [];\n        libc = self.musl-unpatched;\n      };\n      libc = self.musl-unpatched;\n    });\n\n    # Libcxx which will be built with unpatched musl\n    libcxx_musl_unpatched = self.llvmPkgs.libcxx.override (old: {\n      stdenv = (prev.overrideCC self.llvmPkgs.libcxxStdenv self.clang_musl_unpatched_nolibcxx);\n    });\n\n    # Final stdenv, use libcxx w/unpatched musl + includeos musl as libc\n    clang_musl_includeos_libcxx = self.llvmPkgs.libcxxClang.override (old: {\n      bintools = prev.pkgsStatic.bintools.override {\n        # Disable hardening flags while we work on the build\n        defaultHardeningFlags = [];\n        libc = self.musl-includeos;\n      };\n      libc = self.musl-includeos;\n      libcxx = self.libcxx_musl_unpatched;\n    });\n\n    musl_includeos_stdenv_libcxx = (prev.overrideCC self.llvmPkgs.libcxxStdenv self.clang_musl_includeos_libcxx);\n\n    includeos_stdenv = self.musl_includeos_stdenv_libcxx;\n\n    libraries = {\n      libc = self.musl-includeos;\n      libcxx = {\n        # There doesn't seem to be a single package containing both libc++ headers and libs.\n        lib = \"${self.libcxx_musl_unpatched}/lib\";\n        include = \"${self.libcxx_musl_unpatched.dev}/include/c++/v1\";\n      };\n      libunwind = self.llvmPkgs.libraries.libunwind;\n      libgcc = self.llvmPkgs.compiler-rt;\n    };\n  });\n\n  pkgsIncludeOS = prev.pkgsStatic.lib.makeScope prev.pkgsStatic.newScope (self: {\n    # self.callPackage will use this stdenv.\n    stdenv = final.stdenvIncludeOS.includeos_stdenv;\n\n    # Deps\n    uzlib = self.callPackage ./deps/uzlib/default.nix { };\n    botan2 = self.callPackage ./deps/botan/default.nix { };\n    s2n-tls = self.callPackage ./deps/s2n/default.nix { };\n    http-parser = self.callPackage ./deps/http-parser/default.nix { };\n    vmbuild = self.callPackage ./vmbuild.nix { };\n\n    ccacheWrapper = prev.ccacheWrapper.override {\n        inherit (self.stdenv) cc;\n        extraConfig = ''\n          export CCACHE_COMPRESS=1\n          export CCACHE_DIR=\"/nix/var/cache/ccache\"\n          export CCACHE_UMASK=007\n          export CCACHE_SLOPPINESS=random_seed\n          if [ ! -d \"$CCACHE_DIR\" ]; then\n            echo \"=====\"\n            echo \"Directory '$CCACHE_DIR' does not exist\"\n            echo \"Please create it with:\"\n            echo \"  sudo mkdir -m0770 '$CCACHE_DIR'\"\n            echo \"  sudo chown root:nixbld '$CCACHE_DIR'\"\n            echo \"=====\"\n            exit 1\n          fi\n          if [ ! -w \"$CCACHE_DIR\" ]; then\n            echo \"=====\"\n            echo \"Directory '$CCACHE_DIR' is not accessible for user $(whoami)\"\n            echo \"Please verify its access permissions\"\n            echo \"=====\"\n            exit 1\n          fi\n        '';\n      };\n\n    # IncludeOS\n    includeos = self.stdenv.mkDerivation rec {\n      enableParallelBuilding = true;\n      pname = \"includeos\";\n\n      version = \"dev\";\n\n      # Convenient access to libc, libcxx etc\n      passthru.libraries = final.stdenvIncludeOS.libraries;\n\n      src = prev.pkgsStatic.lib.fileset.toSource {\n          root = ./.;\n          # Only include files needed by IncludeOS (not examples, docs etc)\n          fileset = prev.pkgsStatic.lib.fileset.unions [\n            ./src\n            ./api\n            ./cmake\n            ./deps\n            ./userspace\n            ./lib\n            ./CMakeLists.txt\n          ];\n      };\n\n      # If you need to patch, this is the place\n      postPatch = '''';\n\n      nativeBuildInputs = [\n        prev.buildPackages.cmake\n        prev.buildPackages.nasm\n      ] ++ prev.lib.optionals withCcache [self.ccacheWrapper];\n\n      buildInputs = [\n        self.botan2\n        self.http-parser\n        prev.pkgsStatic.openssl\n        prev.pkgsStatic.rapidjson\n        #self.s2n-tls          👈 This is postponed until we can fix the s2n build.\n        self.uzlib\n        self.vmbuild\n      ];\n\n      postInstall = ''\n        echo Copying vmbuild binaries to tools/vmbuild\n        mkdir -p \"$out/tools/vmbuild\"\n        cp -v ${self.vmbuild}/bin/* \"$out/tools/vmbuild\"\n        cp -r -v ${final.stdenvIncludeOS.libraries.libc} $out/libc\n        mkdir $out/libcxx\n        cp -r -v ${final.stdenvIncludeOS.libraries.libcxx.lib} $out/libcxx/lib\n        cp -r -v ${final.stdenvIncludeOS.libraries.libcxx.include} $out/libcxx/include\n        cp -r -v ${final.stdenvIncludeOS.libraries.libunwind} $out/libunwind\n        cp -r -v ${final.stdenvIncludeOS.libraries.libgcc} $out/libgcc\n        '';\n\n      archFlags = if self.stdenv.targetPlatform.system == \"i686-linux\" then\n        [\n          \"-DARCH=i686\"\n          \"-DPLATFORM=nano\" # we currently only support nano platform on i686\n        ]\n      else\n        [ \"-DARCH=x86_64\"];\n\n      smpFlags = if smp then [ \"-DSMP=ON\" ] else [];\n\n      cmakeFlags = archFlags ++ smpFlags;\n\n      # Add some pasthroughs, for easily building the dependencies (for debugging):\n      # $ nix-build -A NAME\n\n      passthru.vmrunner = prev.callPackage (builtins.fetchGit {\n          url = \"https://github.com/includeos/vmrunner\";\n        }) {};\n      passthru.chainloader = import ./chainloader.nix { inherit withCcache; };\n      passthru.lest = self.callPackage ./deps/lest {};\n      passthru.pkgsStatic = prev.pkgsStatic; # this is for convenience for other packages that depend on includeos\n      passthru.pkgs = prev.pkgs; # this is for convenience for other packages that depend on includeos\n\n      passthru = {\n        inherit (self) uzlib;\n        inherit (self) http-parser;\n        inherit (self) botan2;\n        #inherit (self) s2n-tls;\n        inherit (self) cmake;\n        inherit (self) vmbuild;\n      };\n\n      meta = {\n        description = \"Run your application with zero overhead\";\n        homepage = \"https://www.includeos.org/\";\n        license = prev.pkgsStatic.lib.licenses.asl20;\n      };\n    };\n  });\n}\n"
        },
        {
          "name": "pinned.nix",
          "type": "blob",
          "size": 0.1826171875,
          "content": "import (\n  builtins.fetchTarball {\n    url = \"https://github.com/NixOS/nixpkgs/archive/refs/tags/24.05.tar.gz\";\n    sha256 = \"1lr1h35prqkd1mkmzriwlpvxcb34kmhc9dnr48gkm8hh089hifmx\";\n  }\n)\n"
        },
        {
          "name": "shell.nix",
          "type": "blob",
          "size": 3.0595703125,
          "content": "{\n  # Will create a temp one if none is passed, for example:\n  # nix-shell --argstr buildpath .\n  buildpath ? \"\",\n\n  # The unikernel to build\n  unikernel ? \"./example\",\n\n  # vmrunner path, for vmrunner development\n  vmrunner ? \"\",\n\n  # Enable ccache support. See overlay.nix for details.\n  withCcache ? false,\n\n  # Enable multicore suport.\n  smp ? false,\n\n  includeos ? import ./default.nix { inherit withCcache; inherit smp; }\n\n}:\n\nincludeos.pkgs.mkShell.override { inherit (includeos) stdenv; } rec {\n  vmrunnerPkg =\n    if vmrunner == \"\" then\n      includeos.vmrunner\n    else\n      includeos.pkgs.callPackage (builtins.toPath /. + vmrunner) {};\n\n  packages = [\n    (includeos.pkgs.python3.withPackages (p: [\n      vmrunnerPkg\n    ]))\n    includeos.pkgs.buildPackages.cmake\n    includeos.pkgs.buildPackages.nasm\n    includeos.pkgs.qemu\n    includeos.pkgs.which\n    includeos.pkgs.grub2\n    includeos.pkgs.iputils\n    includeos.pkgs.xorriso\n  ];\n\n  buildInputs = [\n    includeos\n    includeos.chainloader\n    includeos.lest\n    includeos.pkgs.openssl\n    includeos.pkgs.rapidjson\n  ];\n\n  shellHook = ''\n\n    unikernel=$(realpath ${unikernel})\n    echo -e \"Attempting to build unikernel: \\n$unikernel\"\n    if [ ! -d \"$unikernel\" ]; then\n        echo \"$unikernel is not a valid directory\"\n        exit 1\n    fi\n    export BUILDPATH=${buildpath}\n    if [ -z \"${buildpath}\" ]; then\n        export BUILDPATH=\"$(mktemp -d)\"\n        pushd \"$BUILDPATH\"\n    else\n        mkdir -p \"$BUILDPATH\"\n        pushd \"$BUILDPATH\"\n    fi\n    cmake \"$unikernel\" -DARCH=x86_64 -DINCLUDEOS_PACKAGE=${includeos} -DCMAKE_MODULE_PATH=${includeos}/cmake \\\n                     -DFOR_PRODUCTION=OFF\n    make -j $NIX_BUILD_CORES\n    echo -e \"\\n====================== IncludeOS nix-shell =====================\"\n    if [ -z \"${buildpath}\" ]; then\n        echo -e \"\\nWorking directory, generated by this script:\"\n        echo $BUILDPATH\n        echo -e \"\\nTo use another directory pass in 'buildpath' to nix:\"\n        echo \"nix-shell --argstr buildpath you/build/path\"\n    fi\n    echo -e \"\\nThe C++ compiler set to:\"\n    echo $(which $CXX)\n    echo -e \"\\nIncludeOS package:\"\n    echo ${includeos}\n    echo -e \"\\n---------------------- Network privileges  ---------------------\"\n    echo \"The vmrunner for IncludeOS tests requires bridged networking for full functionality.\"\n    echo \"The following commands requiring sudo privileges can be used to set this up:\"\n    echo \"1. the qemu-bridge-helper needs sudo to create a bridge. Can be enabled with:\"\n    echo \"   sudo chmod u+s ${includeos.pkgs.qemu}/libexec/qemu-bridge-helper\"\n    echo \"2. bridge43 must exist. Can be set up with vmrunner's create_bridge.sh script:\"\n    echo \"   ${vmrunnerPkg.create_bridge}\"\n    echo \"3. /etc/qemu/bridge.conf must contain this line:\"\n    echo \"   allow bridge43\"\n    echo \"\"\n    echo \"Some tests require ping, which requires premissions to send raw packets. On some hosts\"\n    echo \"this is not enabled by default for iputils provided by nix. It can be enabled with:\"\n    echo \"4. sudo setcap cap_net_raw+ep ${includeos.pkgs.iputils}/bin/ping\"\n    echo \" \"\n    echo\n  '';\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test.sh",
          "type": "blob",
          "size": 6.3505859375,
          "content": "#!/bin/bash\n\n# Run all known IncludeOS tests.\n#\n# A lot of these tests require vmrunner and a network bridge.\n# See https://github.com/includeos/vmrunner/pull/31\n\n: \"${QUICK_SMOKE:=}\" # Define this to only do a ~1-5 min. smoke test.\n: \"${DRY_RUN:=}\"     # Define this to expand all steps without running any\n: \"${CCACHE_FLAG:=}\" # Define as \"--arg withCcache true\" to enable ccache.\n\nsteps=0\nfails=0\nfailed_tests=()\n\nsuccess(){\n  echo \"\"\n  if [[ $1 =~ ^[0-9]+$ ]]; then\n    echo -n \"👷💬 Step $1 succeeded \"\n    for ((i=1; i<=$1; i++)); do\n      echo -n \"👏\"\n    done\n  else\n    echo \"👷💬 Step $1 succeeded ✅\"\n  fi\n  echo \"\"\n}\n\nfail(){\n  echo \"\"\n  echo \"👷⛔ Step $1 failed ($2)\"\n  failed_tests+=(\"step $1: $2\")\n}\n\nrun(){\n  steps=$((steps + 1))\n  echo \"\"\n  echo \"🚧 Step $steps) $2\"\n  echo \"⚙️  Running this command:\"\n  # This will print the body of a bash function, but won't expand variables\n  # inside. It works well for bundling simple commands together and allows us to\n  # print them without wrapping them in qotes.\n  declare -f $1 | sed '1d;2d;$d' | sed 's/^[[:space:]]*//' # Print the function body\n  echo \"-------------------------------------- 💣 --------------------------------------\"\n\n\n  if [ ! $DRY_RUN ]\n  then\n    $1\n  fi\n  if [ $? -eq 0 ]; then\n    success $steps\n  else\n    echo \"‼️  Error: Command failed with exit status $?\"\n    fail $steps \"$1\"\n    fails=$((fails + 1))\n    return $?\n  fi\n}\n\nunittests(){\n  nix-build unittests.nix\n}\n\nbuild_chainloader(){\n  nix-build $CCACHE_FLAG chainloader.nix\n}\n\nbuild_example(){\n  nix-build $CCACHE_FLAG example.nix\n}\n\nmulticore_subset(){\n  nix-shell --pure --arg smp true $CCACHE_FLAG --argstr unikernel ./test/kernel/integration/smp --run ./test.py\n\n  # The following tests are not using multiple CPU's, but have been equippedd with some anyway\n  # to make sure core functionality is not broken by missing locks etc. when waking up more cores.\n  nix-shell --pure --arg smp true $CCACHE_FLAG --argstr unikernel ./test/net/integration/udp --run ./test.py\n  nix-shell --pure --arg smp true $CCACHE_FLAG --argstr unikernel ./test/kernel/integration/paging --run ./test.py\n}\n\nsmoke_tests(){\n  nix-shell --pure $CCACHE_FLAG --argstr unikernel ./test/net/integration/udp --run ./test.py\n  nix-shell --pure $CCACHE_FLAG --argstr unikernel ./test/net/integration/tcp --run ./test.py\n  nix-shell --pure $CCACHE_FLAG --argstr unikernel ./test/kernel/integration/paging --run ./test.py\n  nix-shell --pure $CCACHE_FLAG --argstr unikernel ./test/kernel/integration/smp --run ./test.py\n}\n\nrun unittests \"Build and run unit tests\"\n\nrun build_chainloader \"Build the 32-bit chainloader\"\n\nrun build_example \"Build the basic example\"\n\nrun multicore_subset \"Run selected tests with multicore enabled\"\n\nif [ \"$QUICK_SMOKE\" ]; then\n\n  run smoke_tests \"Build and run a few key smoke tests\"\n\n  if [ $fails -eq 0 ]; then\n    echo \"\"\n    echo \"👷💬 A lot of things are working! 💪\"\n  else\n    echo \"\"\n    echo \"👷🧰 $fails / $steps steps failed. There's some work left to do. 🛠  \"\n    echo \"\"\n    exit 1\n  fi\n  exit 0\nfi\n\n# Continuing from here will run all integration tests.\n\nrun_testsuite() {\n  local base_folder=\"$1\"\n  shift\n  local exclusion_list=(\"$@\")\n\n  steps=$((steps + 1))\n  substeps=1\n  subfails=0\n\n  echo \"\"\n  echo \"====================================== 🚜 ======================================\"\n  echo \"\"\n  echo \"🚧 $steps) Running integration tests in $base_folder\"\n\n  if [ ! ${#exclusion_list[@]} -eq 0 ]\n  then\n    echo \"⚠️  With the following exceptions: \"\n    for exclude in \"${exclusion_list[@]}\"; do\n      echo \" - ✏️  Skipping $exclude\"\n    done\n  fi\n  echo \"--------------------------------------------------------------------------------\"\n\n  for subfolder in \"$base_folder\"/*/; do\n    local skip=false\n\n    for exclude in \"${exclusion_list[@]}\"; do\n      if [[ \"$subfolder\" == *\"$exclude\"* ]]; then\n        skip=true\n        break\n      fi\n    done\n\n    if [ \"$skip\" = true ]; then\n      continue\n    fi\n\n\n    # The command to run, as string to be able to print the fully expanded command\n    cmd=\"nix-shell --pure $CCACHE_FLAG --argstr unikernel $subfolder --run ./test.py\"\n\n    echo \"\"\n    echo \"🚧 Step $steps.$substeps\"\n    echo \"📂 $subfolder\"\n    echo \"⚙️  Running this command:\"\n    echo $cmd\n    echo \"-------------------------------------- 💣 --------------------------------------\"\n\n\n    if [ ! $DRY_RUN ]\n    then\n      $cmd\n    fi\n    if [ $? -eq 0 ]; then\n      success \"$steps.$substeps\"\n    else\n      fail \"$steps.$substeps\" \"$cmd\"\n      subfails=$((subfails + 1))\n    fi\n\n    substeps=$((substeps + 1))\n\n  done\n\n  if [ $subfails -eq 0 ]; then\n    success $steps\n  else\n    fail $steps\n    fails=$((fails + 1))\n  fi\n}\n\n#\n# Kernel tests\n#\nexclusions=(\n  \"LiveUpdate\" # Missing includes\n  \"context\"    # Outdated - references nonexisting OS::heap_end()\n  \"fiber\"      # Crashes\n  \"modules\"    # Requires 32-bit build, which our shell.nix is not set up for\n)\n\nrun_testsuite \"./test/kernel/integration\" \"${exclusions[@]}\"\n\n#\n# C++ STL runtime tests\n#\nexclusions=(\n\n)\n\nrun_testsuite \"./test/stl/integration\" \"${exclusions[@]}\"\n\n\n#\n# Networking tests\n#\nexclusions=(\n  \"dhclient\"  # Times out because it requires DHCP server on the bridge.\n  \"dhcpd\"     # Times out, requires certain routes to be set up. Seems easy.\n  \"dhcpd_dhclient_linux\" # We can't run userspace tests with this setup yet.\n  \"gateway\"   # Requires NaCl which is currently not integrated\n  \"http\"      # Linking fails, undefined ref to http_parser_parse_url, http_parser_execute\n  \"microLB\"   # Missing dependencies: microLB, diskbuilder, os_add_os_library\n  \"nat\"       # Times out after 3 / 6 tests seem to pass. Might be a legit bug here.\n  \"router\"    # Times out, requies sudo and has complex network setup.\n  \"router6\"   # Times out: iperf3: error - unable to connect to server\n  \"vlan\"      # Times out. Looks similar to the nat test - maybe similar cause?\n  \"websocket\" # Linking fails, undefined ref to http_parser_parse_url, http_parser_execute\n)\n\nrun_testsuite \"./test/net/integration\" \"${exclusions[@]}\"\n\necho -e \"\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\n\nif [ $fails -eq 0 ]; then\n  echo \"\"\n  echo \"🌈✨ Everything is awesome ✨\"\n  echo \"\"\nelse\n  echo \"\"\n  echo \"👷🧰 $fails / $steps steps failed. There's some work left to do. 🛠  \"\n  echo \"\"\n  echo \"Failed tests:\"\n  for t in \"${failed_tests[@]}\"; do\n    echo \"$t\"\n  done\n\n  exit 1\nfi\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_solo5_hvt.sh",
          "type": "blob",
          "size": 0.275390625,
          "content": "#! /bin/bash\n. ./etc/set_traps.sh\n\nexport SYSTEM=`uname -s`\n\nif [[ ! $SYSTEM =~ .*[L|l]inux.* ]]\nthen\n  echo -e \"\\nRunning Solo5 is currently only supported on Linux. \\n\"\n  trap - EXIT\n  exit 1\nfi\n\npushd examples/demo_service\nmkdir -p build\nboot --with-solo5-hvt .\npopd\ntrap - EXIT\n"
        },
        {
          "name": "test_solo5_spt.sh",
          "type": "blob",
          "size": 0.275390625,
          "content": "#! /bin/bash\n. ./etc/set_traps.sh\n\nexport SYSTEM=`uname -s`\n\nif [[ ! $SYSTEM =~ .*[L|l]inux.* ]]\nthen\n  echo -e \"\\nRunning Solo5 is currently only supported on Linux. \\n\"\n  trap - EXIT\n  exit 1\nfi\n\npushd examples/demo_service\nmkdir -p build\nboot --with-solo5-spt .\npopd\ntrap - EXIT\n"
        },
        {
          "name": "unittests.nix",
          "type": "blob",
          "size": 1.55859375,
          "content": "{ nixpkgs ? ./pinned.nix,\n  pkgs ? import nixpkgs { config = { }; overlays = [ ]; },\n  stdenv ? pkgs.llvmPackages_18.libcxxStdenv,\n  withCcache ? false,\n}:\nstdenv.mkDerivation rec {\n  pname = \"unittests\";\n  version = \"dev\";\n  enableParallelBuilding = true;\n\n  sourceRoot = \"test\";\n\n  ccacheWrapper = pkgs.ccacheWrapper.override {\n    inherit (stdenv) cc;\n    extraConfig = ''\n      export CCACHE_COMPRESS=1\n      export CCACHE_DIR=\"/nix/var/cache/ccache\"\n      export CCACHE_UMASK=007\n      export CCACHE_SLOPPINESS=random_seed\n      if [ ! -d \"$CCACHE_DIR\" ]; then\n        echo \"=====\"\n        echo \"Directory '$CCACHE_DIR' does not exist\"\n        echo \"Please create it with:\"\n        echo \"  sudo mkdir -m0770 '$CCACHE_DIR'\"\n        echo \"  sudo chown root:nixbld '$CCACHE_DIR'\"\n        echo \"=====\"\n        exit 1\n      fi\n      if [ ! -w \"$CCACHE_DIR\" ]; then\n        echo \"=====\"\n        echo \"Directory '$CCACHE_DIR' is not accessible for user $(whoami)\"\n        echo \"Please verify its access permissions\"\n        echo \"=====\"\n        exit 1\n      fi\n    '';\n  };\n\n  srcs = [\n    ./test\n    ./src\n    ./api\n    ./lib\n    ];\n\n  hardeningDisable = [ \"all\" ];\n  cmakeBuildType = \"Debug\";\n\n  lest = pkgs.callPackage ./deps/lest {};\n  uzlib = pkgs.callPackage ./deps/uzlib {};\n\n  passthru = {\n    inherit lest;\n  };\n\n  nativeBuildInputs = [\n    pkgs.buildPackages.cmake\n    pkgs.buildPackages.valgrind\n    pkgs.buildPackages.clang-tools\n  ] ++ pkgs.lib.optionals withCcache [ccacheWrapper];\n\n  buildInputs = [\n    pkgs.rapidjson\n    pkgs.http-parser\n    pkgs.openssl\n    lest\n    uzlib\n  ];\n}\n"
        },
        {
          "name": "userspace",
          "type": "tree",
          "content": null
        },
        {
          "name": "vmbuild.nix",
          "type": "blob",
          "size": 0.3173828125,
          "content": "{ nixpkgs ? ./pinned.nix,\n  pkgs ? import nixpkgs { config = { }; overlays = [ ]; },\n}:\n\npkgs.stdenv.mkDerivation rec {\n  pname = \"vmbuild\";\n  version = \"dev\";\n\n  sourceRoot = pname;\n\n  srcs = [\n    ./vmbuild\n    ./src\n    ./api\n    ];\n\n  nativeBuildInputs = [\n    pkgs.buildPackages.cmake\n    pkgs.buildPackages.nasm\n  ];\n}\n"
        },
        {
          "name": "vmbuild",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}