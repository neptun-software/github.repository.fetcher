{
  "metadata": {
    "timestamp": 1736566154893,
    "page": 163,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "PixarAnimationStudios/OpenUSD",
      "stars": 6281,
      "defaultBranch": "release",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0390625,
          "content": "*.sdf\t\ttext eol=lf\n*.usda\t\ttext eol=lf\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0283203125,
          "content": ".p4*\n.DS_Store\n.AppleDouble\n\n"
        },
        {
          "name": "BUILDING.md",
          "type": "blob",
          "size": 29.9921875,
          "content": "Advanced Build Configuration\n============================\n\n## Table of Contents\n- [Building With Build Script](#building-with-build-script)\n- [Building With CMake](#building-with-cmake)\n- [Optional Components](#optional-components)\n- [Imaging Plugins](#imaging-plugins)\n- [Third Party Plugins](#third-party-plugins)\n- [Tests](#tests)\n- [Other Build Options](#other-build-options)\n- [USD Developer Options](#usd-developer-options)\n- [Optimization Options](#optimization-options)\n- [Linker Options](#linker-options)\n- [Build Issues FAQ](#build-issues-faq)\n\n## Building With Build Script\n\nThe simplest way to build USD is to run the supplied `build_usd.py`\nscript. This script will download required dependencies and build \nand install them along with USD in a given directory. \n\nSee instructions and examples in [README.md](README.md#getting-and-building-the-code).\n\n## Building With CMake\n\nUsers may specify libraries to build USD against and other build options by\npassing arguments when running cmake. Documentation for these arguments\nare below.\n\nSome examples:\n\n#### On Linux\n\n```bash\ncmake                                       \\\n-DTBB_ROOT_DIR=/path/to/tbb                 \\\n-DOPENSUBDIV_ROOT_DIR=/path/to/opensubdiv   \\\n/path/to/USD/source\n\ncmake --build . --target install -- -j <NUM_CORES>\n```\n\n#### On macOS\n\nThe following will generate an Xcode project that can be used to build USD.\n\n```bash\ncmake                                       \\\n-G \"Xcode\"                                  \\\n-DTBB_ROOT_DIR=/path/to/tbb                 \\\n-DOPENSUBDIV_ROOT_DIR=/path/to/opensubdiv   \\\n/path/to/USD/source\n\ncmake --build . --target install -- -j <NUM_CORES>\n```\n\n#### On Windows\n\nThe following will generate a Visual Studio 2017 solution that can be used to\nbuild USD.\n\n```cmd.exe\n\"C:\\Program Files\\CMake\\bin\\cmake.exe\"      ^\n-G \"Visual Studio 15 2017 Win64\"            ^\n-DTBB_ROOT_DIR=C:\\path\\to\\tbb               ^\n-DOPENSUBDIV_ROOT_DIR=C:\\path\\to\\opensubdiv ^\n\\path\\to\\USD\\source\n\ncmake --build . --target install -- /m:%NUMBER_OF_PROCESSORS%\n```\n\nFor other versions of Visual Studio, use the following cmake arguments:\n\n- For VS2019: `-G \"Visual Studio 16 2019\" -A x64`\n- For VS2022: `-G \"Visual Studio 17 2022\" -A x64`\n\nFor more information on Visual Studio generators for cmake, see \n[Visual Studio Generators](https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html#visual-studio-generators).\n\n## Optional Components\n\nUSD contains several optional components that are enabled by default\nbut may be disabled when invoking cmake. Disabling these components\nremoves the need for their dependencies when building USD.\n\n##### Python\n\nSome optional USD components use Python:\n- [The USD Toolset](https://graphics.pixar.com/usd/docs/USD-Toolset.html)\n- [Third Party Plugins](https://graphics.pixar.com/usd/docs/USD-3rd-Party-Plugins.html)\n- Python language bindings for the USD C++ API\n- Unit tests using Python\n\nPlease refer to [VERSIONS.md](VERSIONS.md) for supported Python versions.\n\nSupport for Python can optionally be disabled by specifying the cmake flag\n`PXR_ENABLE_PYTHON_SUPPORT=FALSE`.\n\n##### OpenGL\n\nSupport for OpenGL can optionally be disabled by specifying the cmake flag\n`PXR_ENABLE_GL_SUPPORT=FALSE`.  This will skip components and libraries\nthat depend on GL, including:\n- usdview\n- Hydra GL imaging\n\n##### Metal\n\nBuilding USD with Metal enabled requires macOS Mojave (10.14) or newer.\nSupport for Metal can optionally be disabled by specifying the cmake flag\n`PXR_ENABLE_METAL_SUPPORT=FALSE`.  This will skip components and libraries\nthat depend on Metal, including:\n- Hydra imaging\n\n##### Vulkan\n\nVulkan support for USD is currently experimental and disabled by default.\n\nBuilding USD with Vulkan enabled requires the Vulkan SDK and glslang to\nbe installed. If you wish to build a debug build on Windows, please make sure \nyou have the optional component \"Shader Toolchain Debug Symbols\" installed as \npart of the Vulkan SDK.\n\nThe VULKAN_SDK environment variable must point to the location of the SDK. The \nglslang compiler headers must be locatable during the build process.\n\nSupport for Vulkan can optionally be enabled by specifying the cmake flag\n`PXR_ENABLE_VULKAN_SUPPORT=TRUE`.\n\n##### MaterialX\n\nEnable [MaterialX](https://github.com/materialx/materialx) support in the \nbuild by specifying the cmake flag `PXR_ENABLE_MATERIALX_SUPPORT=TRUE` when\ninvoking cmake. Note that MaterialX with shared library support is required.\n\nWhen building via build_usd.py, MaterialX support is enabled by default. The\ndefault can be overriden using the --materialx and --no-materialx flags.\n\nThe additional dependencies that must be supplied when invoking cmake are:\n\n| Dependency Name    | Description                                                 |\n| ------------------ |-----------------------------------------------------------  |\n| MaterialX_DIR      | Path to the CMake package config of a MaterialX SDK install.|\n\nSee [3rd Party Library and Application Versions](VERSIONS.md) for version information.\n\n##### OSL (OpenShadingLanguage)\n\nSupport for OSL is disabled by default, and can optionally be enabled by\nspecifying the cmake flag `PXR_ENABLE_OSL_SUPPORT=TRUE`.  This will\nenable components and libraries that depend on OSL.\n\nEnabling OSL suport allows the Shader Definition Registry (sdr) to\nparse metadata from OSL shaders.\n\n##### Documentation\n\nDoxygen documentation can optionally be generated by specifying the cmake flag\n`PXR_BUILD_DOCUMENTATION=TRUE`.\n\nThere are two documentation sub-components, controlled by setting\n`PXR_BUILD_HTML_DOCUMENTATION` and `PXR_BUILD_PYTHON_DOCUMENTATION`. See the\nsections below for descriptions of precisely what they control.  Neither sub-\ncomponent will have any effect if `PXR_BUILD_DOCUMENTATION` is not `TRUE`.\n\nThe additional dependencies that must be supplied for enabling documentation\ngeneration are:\n\n| Dependency Name    | Description                             |\n| ------------------ |---------------------------------------  |\n| DOXYGEN_EXECUTABLE | The location of Doxygen                 |\n\nSee [3rd Party Library and Application Versions](VERSIONS.md) for version\ninformation, including supported Doxygen versions.\n\n##### HTML Documentation\n\nIf `PXR_BUILD_HTML_DOCUMENTATION` evaluates `TRUE` then building of the HTML\ndocumentation is enabled.  This includes USD overview and general concepts, and\nthe C++ API documentation.  It defaults to `TRUE`, and so is built by default\nwhen `PXR_BUILD_DOCUMENTATION` is also enabled (but has no effect if\n`PXR_BUILD_DOCUMENTATION` is not set.)\n\nThe additional dependencies that must be supplied for enabling HTML\ndocumentation generation are:\n\n| Dependency Name    | Description                             |\n| ------------------ |---------------------------------------  |\n| DOT_EXECUTABLE     | The location of Dot(from GraphViz).     |\n\nSee [3rd Party Library and Application Versions](VERSIONS.md) for version\ninformation, including supported GraphViz versions.\n\n##### Python Documentation\n\nPython docstrings for Python entities can be generated by specifying the cmake\nflag `PXR_BUILD_PYTHON_DOCUMENTATION`. This process requires that Python support\n(`PXR_ENABLE_PYTHON_SUPPORT`) and documentation (`PXR_BUILD_DOCUMENTATION`) are\nenabled. It defaults to `FALSE`.\n\nThis process uses the scripts in the docs/python subdirectory. Relevant\ndocumentation from generated doxygen XML data is extracted and matched with\nassociated Python classes, functions, and properties in the built Python \nmodules. A `__DOC.py` file is generated and installed in each of the directories \nof the installed Python modules. The `__DOC.py` file adds the docstrings to the \nPython entities when the module is loaded.\n\n##### Imaging\n\nThis component contains Hydra, a high-performance graphics rendering engine.\n\nDisable this component by specifying the cmake flag `PXR_BUILD_IMAGING=FALSE` when\ninvoking cmake. Disabling this component will also disable the [USD Imaging](#usd-imaging)\ncomponent and any [Imaging Plugins](#imaging-plugins).\n\n##### USD Imaging\n\nThis component provides the USD imaging delegates for Hydra, as well as\nusdview, a standalone native viewer for USD files.\n\nDisable this component by specifying the cmake flag `PXR_BUILD_USD_IMAGING=FALSE` when\ninvoking cmake. usdview may also be disabled independently by specifying the cmake flag \n`PXR_BUILD_USDVIEW=FALSE`.\n\n##### Command-line Tools\n\nUSD by default builds several helpful command-line tools for validating and \nmanipulating USD files. For more information on the tools, see [USD Toolset](https://graphics.pixar.com/usd/release/toolset.html).\n\nDisable building the command-line tools by specifying the cmake flag \n`PXR_BUILD_USD_TOOLS=FALSE` when invoking cmake. \n\n##### Examples\n\nUSD by default builds several example projects that demonstrate how to develop\nvarious extensions and plugins.\n\nDisable building the examples by specifying the cmake flag \n`PXR_BUILD_EXAMPLES=FALSE` when invoking cmake. \n\n##### Tutorials\n\nUSD by default builds USD and Python files used for the [USD Tutorials](https://graphics.pixar.com/usd/release/tut_usd_tutorials.html).\n\nDisable building the tutorial support files by specifying the cmake flag \n`PXR_BUILD_TUTORIALS=FALSE` when invoking cmake. \n\n## Imaging Plugins\n\nHydra's rendering functionality can be extended with these optional plugins.\n\n##### Ptex\n\nSupport for Ptex is disabled by default and can be enabled by specifying the \ncmake flag `PXR_ENABLE_PTEX_SUPPORT=TRUE`.\n\n##### OpenImageIO \n\nThis plugin can optionally be enabled by specifying the cmake flag\n`PXR_BUILD_OPENIMAGEIO_PLUGIN=TRUE`. When enabled, OpenImageIO provides\nbroader support for reading and writing different image formats as textures. \nIf OpenImageIO is disabled, imaging by default supports the image formats bmp, \njpg, png, tga, and hdr. With OpenImageIO enabled, support extends to exr, tif, \nzfile, and tx file formats, which allows for the use of more advanced features\nlike subimages and mipmaps.\n\n##### OpenColorIO \n\nThis plugin can optionally be enabled by specifying the cmake flag\n`PXR_BUILD_OPENCOLORIO_PLUGIN=TRUE`. When enabled, OpenColorIO provides\ncolor management for Hydra viewports. \n\n##### Embree Rendering\n\nThis component contains an example rendering backend for Hydra and usdview, \nbased on the embree raycasting library. Enable the plugin in the build by \nspecifying the cmake flag `PXR_BUILD_EMBREE_PLUGIN=TRUE` when invoking\ncmake.\n\nThe additional dependencies that must be supplied when invoking cmake are:\n\n| Dependency Name       | Description                                 |\n| --------------        | -----------------------------------         |\n| EMBREE_LOCATION       | The root path to an embree library install. |\n\nSee [3rd Party Library and Application Versions](VERSIONS.md) for version information.\n\n##### RenderMan Rendering\n\nThis plugin uses Pixar's RenderMan as a rendering backend for Hydra and \nusdview. Enable the plugin in the build by specifying the cmake flag \n`PXR_BUILD_PRMAN_PLUGIN=TRUE` when invoking cmake.\n\nThe additional dependencies that must be supplied when invoking cmake are:\n\n| Dependency Name       | Description                                 |\n| --------------        | -----------------------------------         |\n| RENDERMAN_LOCATION    | The root path to an RenderMan install.      |\n\nSee [3rd Party Library and Application Versions](VERSIONS.md) for version information.\n\nMore documentation is available [here](http://openusd.org/docs/RenderMan-USD-Imaging-Plugin.html).\n\n## Third Party Plugins\n\nUSD provides several plugins for integration with third-party software packages. \nThere is additional documentation on each plugin\n[here](http://openusd.org/docs/USD-3rd-Party-Plugins.html).\nThese plugins are not built by default and must be enabled via the instructions below.\n\nThe USD Maya plugins can be found in the Autodesk-supported repo available\n[here](https://github.com/Autodesk/maya-usd).\n\nThe USD Katana plugins can be found in the Foundry-supported repo available\n[here](https://github.com/TheFoundryVisionmongers/KatanaUsdPlugins).\n\n##### Alembic Plugin\n\nEnable the [Alembic](https://github.com/alembic/alembic) plugin in the build\nby specifying the cmake flag `PXR_BUILD_ALEMBIC_PLUGIN=TRUE` when invoking cmake.\n\nThe additional dependencies that must be supplied when invoking cmake are:\n\n| Dependency Name                   | Description                                       |\n| ----------------------------------|-------------------------------------------------- |\n| ALEMBIC_DIR                       | The location of [Alembic](https://https://github.com/alembic/alembic)   | \n| OPENEXR_LOCATION                  | The location of [OpenEXR](http://www.openexr.com) |\n| Imath_DIR (If not using OpenEXR)  | Path to the CMake package config of a Imath SDK install. (With OpenEXR 3+, Imath can be used explicitly instead of OpenEXR.)|\n\nEither OpenEXR or Imath is required depending on which library is used by the\nAlembic library specified in ALEMBIC_DIR.\n\nSee [3rd Party Library and Application Versions](VERSIONS.md) for version information.\n\nSupport for Alembic files using the HDF5 backend is enabled by default but can be\ndisabled by specifying the cmake flag `PXR_ENABLE_HDF5_SUPPORT=FALSE`. HDF5\nsupport requires the following dependencies:\n\n| Dependency Name    | Description     |\n| ------------------ |---------------- |\n| HDF5_LOCATION      | The location of [HDF5](https://www.hdfgroup.org/HDF5/) |\n\nFor further information see the documentation on the Alembic plugin [here](http://openusd.org/docs/Alembic-USD-Plugin.html).\n\n##### Draco Plugin\n\nEnable the [Draco](https://github.com/google/draco) plugin in the build by specifying the cmake flag `PXR_BUILD_DRACO_PLUGIN=TRUE`\nwhen invoking cmake. This plugin is compatible with Draco 1.3.4. The additional dependencies that must be supplied when invoking cmake are:\n\n| Dependency Name    | Description                              | Version |\n| ------------------ |----------------------------------------  | ------- |\n| DRACO_ROOT         | The root path to a Draco SDK install.    | 1.3.4   |\n\n## Tests\n\nTests are built by default but can be disabled by specifying the cmake flag \n`PXR_BUILD_TESTS=FALSE` when invoking cmake.\n\n##### Running Tests\nRun tests by invoking ctest from the build directory, which is typically the \ndirectory in which cmake was originally invoked. For example, to run all tests \nin a release build with verbose output:\n\n```bash\nctest -C Release -V\n```\n\nThe \"-R\" argument may be used to specify a regular expression matching the names \nof tests to be run. For example, to run all tests in a release build matching \n\"testUsdShade\" with verbose output:\n\n```bash\nctest -C Release -R testUsdShade -V\n```\n\nSee the [ctest documentation](https://cmake.org/cmake/help/latest/manual/ctest.1.html) for more options.\n\n##### Test Run Directories\n\nEach test is run out of an automatically-created temporary directory containing any additional files required by the test. Set the cmake\noption `PXR_TEST_RUN_TEMP_DIR_PREFIX` to prepend a prefix string to the name of these directories. For example, setting this option to\n\"foo-\" will create test run directories named \"foo-<test dir>\"\n\n##### Diagnosing Failed Tests\n\nIn order to aid with diagnosing of failing tests, test generated files for failing test are explicitly put in the following directories, where\n<ctest_run_timestamp> (formatted as \"%Y-%m-%dT%H.%M.%S\") represents the timestamp when ctest was run for the failing test.\n```\n${CMAKE_BINARY_DIR}/Testing/Failed-Diffs/<ctest_run_timestamp>/${TEST_NAME}/${filename}.result.${ext}\n${CMAKE_BINARY_DIR}/Testing/Failed-Diffs/<ctest_run_timestamp>/${TEST_NAME}/${filename}.baseline.${ext}\n```\n\n## Other Build Options\n\n##### Plugin Metadata Location\n\nEach library in the USD core generally has an associated file named 'plugInfo.json' that contains metadata about that library,\nsuch as the schema types provided by that library. These files are consumed by USD's internal plugin system to lazily load\nlibraries when needed.\n\nThe plugin system requires knowledge of where these metadata files are located. The cmake build will ensure this is set up\nproperly based on the install location of the build. However, if you plan to relocate these files to a new location after\nthe build, you must inform the build by setting the cmake variable `PXR_INSTALL_LOCATION` to the intended final\ndirectory where these files will be located. This variable may be a ':'-delimited list of paths.\n\nAnother way USD is locating plugins is the `PXR_PLUGINPATH_NAME` environment variable. This variable\nmay be a list of paths. If you do not want your USD build to use this default variable name, you can override the name\nof the environment variable using the following CMake option:\n\n```\n-DPXR_OVERRIDE_PLUGINPATH_NAME=CUSTOM_USD_PLUGINPATHS\n```\n\nBy doing this, USD will check the `CUSTOM_USD_PLUGINPATHS` environment variable for paths, instead of the default\n`PXR_PLUGINPATH_NAME` one.\n\nThe values specified in `PXR_PLUGINPATH_NAME` or `PXR_INSTALL_LOCATION`\nhave the following characteristics:\n\n- Values may contain any number of paths.\n\n- Paths ending with slash ('/') have 'plugInfo.json' appended automatically.\n\n- '*' may be used anywhere to match any character except slash.\n\n- '**' may be used anywhere to match any character including slash.\n\n- Paths follow Unix '$PATH'-like conventions; when duplicate definitions exist\n  in the path, the first one found is used.\n\n##### Shared library prefix\n\nBy default shared libraries will have the prefix 'lib'. This means, for a given\ncomponent such as [usdGeom](pxr/usd/lib/usdGeom), the build will generate a corresponding\nlibusdGeom object (libusdGeom.so on Linux, libusdGeom.dll on Windows\nand libusdGeom.dylib on Mac). You can change the prefix (or remove it) through\n`PXR_LIB_PREFIX`. For example,\n\n```\n-DPXR_LIB_PREFIX=pxr\n```\n\nWill generate pxrusdGeom.so on Linux, pxrusdGeom.dll on Windows and\npxrusdGeom.dylib on Mac for the usdGeom component.\n\n> Note: This prefix does not apply to shared objects used for Python bindings.\n\n## USD Developer Options\n\n##### C++ Namespace Configuration\n\nUSD comes with options to enable and customize C++ namespaces via the following\nflags:\n\n| Option Name                    | Description                             | Default |\n| ------------------------------ |-----------------------------------------| ------- |\n| PXR_SET_EXTERNAL_NAMESPACE     | The outer namespace identifier          | `pxr`     |\n| PXR_SET_INTERNAL_NAMESPACE     | The internal namespace identifier       | `pxrInternal_v_x_y` (for version x.y.z) |\n| PXR_ENABLE_NAMESPACES          | Enable namespaces                       | `ON`    |\n\nWhen enabled, there are a set of macros provided in a generated header,\npxr/pxr.h, which facilitates using namespaces:\n\n| Macro Name                     | Description                             |\n| ------------------------------ |-----------------------------------------|\n| PXR_NAMESPACE_OPEN_SCOPE       | Opens the namespace scope.                                           |\n| PXR_NAMESPACE_CLOSE_SCOPE      | Closes the namespace.                                                |\n| PXR_NS                         | Explicit qualification on items, e.g. `PXR_NS::TfToken foo = ...`|\n| PXR_NAMESPACE_USING_DIRECTIVE  | Enacts a using-directive, e.g. `using namespace PXR_NS;`         |\n\n##### ASCII Parser Editing/Validation\n\nThere is an ASCII parser for the USD file format, which can be found in\n[sdf](pxr/usd/sdf). Most users will not have a need to edit the parser, but\nfor the adventurous ones, there are a couple additional requirements.\n\nIf you choose to edit the ASCII parsers, make sure\n`PXR_VALIDATE_GENERATED_CODE` is set to `TRUE`.  This flag enables tests\nthat check the generated code in [sdf](pxr/usd/lib/sdf) and\n[gf](pxr/base/lib/gf).\n\n| Dependency Name    | Description                                             |\n| ------------------ | ------------------------------------------------------- |\n| FLEX_EXECUTABLE    | Path to [flex](http://flex.sourceforge.net/) executable |\n| BISON_EXECUTABLE   | Path to [bison](https://www.gnu.org/software/bison/) executable  |\n\nSee [3rd Party Library and Application Versions](VERSIONS.md) for version information.\n\n\n##### USD Schema Generation\n\nUSD generates some code through a process called [schema\ngeneration]. This process requires the following python modules be installed\nand available on the syspath. You can learn more about Schemas and why you\nmight want to generate them\n[here](http://openusd.org//docs/Generating-New-Schema-Classes.html).\n\n| Python Module Name                         | Description                    |\n| ------------------------------------------ |------------------------------- |\n| [Jinja2](http://jinja.pocoo.org/docs/dev/) | Jinja is the core code generator of usdGenSchema                     |\n| [Argparse](https://docs.python.org/3/library/argparse.html) | Argparse is used for basic command line arguments   |\n\nSee [3rd Party Library and Application Versions](VERSIONS.md) for version information.\n\n\n## Optimization Options\n\nThere are certain optimizations that can be enabled in the build.\n\n##### Malloc Library\n\nWe've found that USD performs best with allocators such as [Jemalloc](https://github.com/jemalloc/jemalloc).\nIn support of this, you can specify your own allocator through `PXR_MALLOC_LIBRARY`.\nThis variable should be set to a path to a shared object for the allocator. For example,\n\n```bash\n-DPXR_MALLOC_LIBRARY:path=/usr/local/lib/libjemalloc.so\n```\n\nIf none are specified, the default allocator will be used. More information on getting the most out of\nUSD can be found [Getting the Best Performance with USD](http://openusd.org/docs/Maximizing-USD-Performance.html).\n\n## Linker Options\n\nThere are four ways to link USD controlled by the following options:\n\n| Option Name            | Default   | Description                               |\n| ---------------------- | --------- | ----------------------------------------- |\n| BUILD_SHARED_LIBS      | `ON`      | Build shared or static libraries          |\n| PXR_BUILD_MONOLITHIC   | `OFF`     | Build single or several libraries         |\n| PXR_MONOLITHIC_IMPORT  |           | CMake file defining usd_ms import library |\n\n##### Shared Libraries\n\nThe default creates several shared libraries.  This option allows loading\njust the libraries necessary for a given task.\n\n| Option Name            | Value     |\n| ---------------------- | --------- |\n| BUILD_SHARED_LIBS      | `ON`      |\n| PXR_BUILD_MONOLITHIC   | `OFF`     |\n| PXR_MONOLITHIC_IMPORT  |           |\n\n```bash\ncmake -DBUILD_SHARED_LIBS=ON ...\n```\n\n##### Static Libraries\n\nThis mode builds several static libraries.  This option allows embedding\njust the libraries necessary for a given task.  However, it does not allow\nUSD plugins or Python modules since that would necessarily cause multiple\nsymbol definitions;  for any given symbol we'd have an instance in the main\napplication and another in each plugin/module.\n\n| Option Name            | Value     |\n| ---------------------- | --------- |\n| BUILD_SHARED_LIBS      | `OFF`     |\n| PXR_BUILD_MONOLITHIC   | `OFF`     |\n| PXR_MONOLITHIC_IMPORT  |           |\n\n```bash\ncmake -DBUILD_SHARED_LIBS=OFF ...\n```\n\n##### Internal Monolithic Library\n\nThis mode builds the core libraries (i.e. everything under `pxr/`) into a\nsingle archive library, 'usd_m', and from that it builds a single shared\nlibrary, 'usd_ms'.  It builds plugins outside of `pxr/` and Python modules\nas usual except they link against 'usd_ms' instead of the individual\nlibraries of the default mode.  Plugins inside of `pxr/` are compiled into\n'usd_m' and 'usd_ms'.  plugInfo.json files under `pxr/` refer to 'usd_ms'.\n\nThis mode is useful to reduce the number of installed files and simplify\nlinking against USD.\n\n| Option Name            | Value        |\n| ---------------------- | ----------   |\n| BUILD_SHARED_LIBS      | _Don't care_ |\n| PXR_BUILD_MONOLITHIC   | `ON`         |\n| PXR_MONOLITHIC_IMPORT  |              |\n\n```bash\ncmake -DPXR_BUILD_MONOLITHIC=ON ...\n```\n\n##### External Monolithic Library\n\nThis mode is similar to the\n[Internal Monolithic Library](#internal-monolithic-library) except the\nclient has control of building the monolithic shared library.  This mode\nis useful to embed USD into another shared library.  The build steps are\nsignificantly more complicated and are described below.\n\n| Option Name            | Value                 |\n| ---------------------- | ----------            |\n| BUILD_SHARED_LIBS      | _Don't care_          |\n| PXR_BUILD_MONOLITHIC   | `ON`                  |\n| PXR_MONOLITHIC_IMPORT  | _Path-to-import-file_ |\n\nTo build in this mode:\n\n1. Choose a path where the import file will be.  You'll be creating a cmake\nfile with `add_library(usd_ms SHARED IMPORTED)` and one or more `set_property`\ncalls.  The file doesn't need to exist.  If it does exist it should be empty\nor valid cmake code.\n1. Configure the build in the usual way but with `PXR_BUILD_MONOLITHIC=ON`\nand `PXR_MONOLITHIC_IMPORT` set to the path in step 1.\n1. Build the usual way except the target is `monolithic`.\n1. Create your shared library. If using cmake you can include the file\n`pxr/usd-targets-<CONFIG>` under the USD binary (build) directory, where\n`<CONFIG>` is the configuration you built in step 3. Then you can link your\nlibrary against 'usd_m'.  However, this isn't as simple as\n`target_link_libraries(mylib PUBLIC usd_m)` because you must get\n**everything** from 'usd_m'.  See [Linking Whole Archives](#linking-whole-archives)\nfor more details.\n1. Edit the import file to describe your library.  Your cmake build may\nbe able to generate the file directly via `export()`.  The USD build\nwill include this file and having done so must be able to link against\nyour library by adding 'usd_ms' as a target link library.  The file\nshould look something like this:\n    ```cmake\n    add_library(usd_ms SHARED IMPORTED)\n    set_property(TARGET usd_ms PROPERTY IMPORTED_LOCATION ...)\n    # The following is necessary on Windows.\n    #set_property(TARGET usd_ms PROPERTY IMPORTED_IMPLIB ...)\n    set_property(TARGET usd_ms PROPERTY INTERFACE_COMPILE_DEFINITIONS ...)\n    set_property(TARGET usd_ms PROPERTY INTERFACE_INCLUDE_DIRECTORIES ...)\n    set_property(TARGET usd_ms PROPERTY INTERFACE_LINK_LIBRARIES ...)\n    ```\n1. Complete the USD build by building the usual way, either with the\ndefault target or the 'install' target.\n\nTwo notes:\n1. Your library does **not** need to be named usd_ms. That's simply the\nname given to it by the import file. The IMPORTED_LOCATION  has the real\nname and path to your library.\n1. USD currently only supports installations where your library is in\nthe same directory the USD library/libraries would have been relative\nto the other installed USD files.  Specifically, the location of your\nlibrary will be used to find plugInfo.json files using the relative\npaths `../share/usd/plugins` and `../plugin/usd`.\n\n###### Linking Whole Archives\n\nNormally when linking against a static library the linker will only pull\nin object files that provide a needed symbol. USD has many files that\nhave static global objects with constructors with side effects.  If\nnothing uses any visible symbol from those object files then a normal\nlink would not include them. The side effects will not occur and USD\nwill not work.\n\nTo include everything you need to tell the linker to include the whole\narchive.  That's platform dependent and you'll want code something like\nthis:\n\n```cmake\nif(MSVC)\n    target_link_libraries(mylib -WHOLEARCHIVE:$<TARGET_FILE:usd_m> usd_m)\nelseif(CMAKE_COMPILER_IS_GNUCXX)\n    target_link_libraries(mylib -Wl,--whole-archive usd_m -Wl,--no-whole-archive)\nelseif(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n    target_link_libraries(mylib -Wl,-force_load usd_m)\nendif()\n```\n\nOn Windows cmake cannot recognize 'usd_m' as a library when appended to\n -WHOLEARCHIVE: because it's not a word to itself so we use TARGET_FILE\nto get the path to the library. We also link 'usd_m' separately so cmake\nwill add usd_m's interface link libraries, etc. This second instance\ndoesn't increase the resulting file size because all symbols will be\nfound in the first (-WHOLEARCHIVE) instance.\n\n###### Avoiding linking statically to Python\n\nThe default build with python support will link to the python static lib for\nyour interpreter. This is to support running python code from C++. If that is\nnot desirable, python static linking can be disabled using the flag\n\n```\n-DPXR_PY_UNDEFINED_DYNAMIC_LOOKUP=ON\n```\n\nThe primary motivating case for this is generating wheel packages for PyPI, but\nthe parameter was made more generic in case it has other uses in the future. It\nis useful when we want to take advantage of python's approach to ABI\ncompatibility.\n\nNote that this flag has no effect on Windows, see \n[here for more info](https://docs.python.org/3/extending/windows.html)\n    \n\n## Spline Options\n\nSplines (keyframe animation) are implemented by the library `pxr/base/ts`.\n\n#### Default Anti-Regression Authoring Mode\n\nA `Ts` spline provides a function from time to attribute value.  Bezier math\npermits long tangents to create shapes that go backwards in time, resulting in\nnon-functions.  This is typically prevented at authoring time, and there are\nseveral strategies available.  See\n[pxr/base/ts/doxygen/regression.md](./pxr/base/ts/doxygen/regression.md) for\ndetails of the different choices.\n\nThe hard-coded default is `TsAntiRegressionKeepRatio`.  To set a different\ndefault:\n\n* With `build_usd.py`:\n`--build-args USD,\"-DPXR_TS_DEFAULT_ANTI_REGRESSION_AUTHORING_MODE=TsAntiRegression...\"`\n\n* With cmake:\n`-DPXR_TS_DEFAULT_ANTI_REGRESSION_AUTHORING_MODE=TsAntiRegression...`\n\nClient code can also override the default as needed.\n\n\n## Build Issues FAQ\n\n1. Windows and Python 3.8+ (non-Anaconda)\nPython 3.8 and later on Windows will no longer search PATH for DLL dependencies.\nInstead, clients can call `os.add_dll_directory(p)` to set paths to search.\nBy default on that platform USD will iterate over PATH and add all paths using\n`os.add_dll_directory()` when importing Python modules. Users may override\nthis by setting the environment variable `PXR_USD_WINDOWS_DLL_PATH` to a PATH-like\nstring. If this is set, USD will use these paths instead.\n\nNote that the above does not apply to Anaconda python 3.8+ interpreters, as they\nare modified to behave like pre-3.8 python interpreters, and so continue to use\nthe PATH for DLL dependencies.  When running under Anaconda users should\nconfigure their system the same way they did for pre-python 3.8.\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 482.787109375,
          "content": "# Change Log\n\n## [24.11] - 2024-10-25\n\n### Build\n\n- Removed boost dependency from OpenUSD. Note that boost must still be supplied \n  when OpenVDB support is enabled due to its use of boost in headers.\n\n- OpenUSD now uses its own internal pxr_boost::python library for generating \n  Python bindings instead of boost::python.\n  - Types from OpenUSD like Usd.Stage will no longer interoperate with other C++ \n    code that have been wrapped with boost::python. Client code with Python \n    bindings that interoperate with OpenUSD types must be updated to use the new \n    pxr_boost::python library. In particular, schema libraries should be \n    regenerated to pick up the new library.\n  - Users can revert to the old behavior of using boost::python by specifying \n    `PXR_USE_BOOST_PYTHON=ON` when running CMake. This option is for testing and \n    transition purposes; it is deprecated and will be removed in a future release. \n\n- Added \"--boost-python\" option to build_usd.py for building OpenUSD's Python \n  bindings with boost::python. This option is for testing and transition \n  purposes; it is deprecated and will be removed in a future release. \n  Note that the build script will continue to build boost if it's needed by \n  optional dependencies. These include OpenImageIO and OpenVDB.\n\n- Enabled support for imaging and usdImaging on Apple embedded platforms.\n  (PR: [#3215](https://github.com/PixarAnimationStudios/OpenUSD/pull/3215))\n\n- OpenUSD's internal namespace now includes the patch version to help \n  distinguish releases within the same year.\n  (PR: [#3167](https://github.com/PixarAnimationStudios/OpenUSD/pull/3167))\n\n- Removed support for usd-core PyPI package for Python 3.6 and deprecated \n  support for Python 3.7.\n\n### USD\n\n- Updated Tf file utilities to ignore reparse points on network file systems on \n  Windows. Reparse points on these systems are unlikely to be accessible from \n  the remote machines. \n  (PR: [#2934](https://github.com/PixarAnimationStudios/OpenUSD/pull/2934))\n\n- Updated pxrTslRobinMap to latest release, 1.3.0, using erase_fast instead \n  of erase when the returned iterator is not needed. \n  (PR: [#3253](https://github.com/PixarAnimationStudios/OpenUSD/pull/3253), \n   [#3255](https://github.com/PixarAnimationStudios/OpenUSD/pull/3255))\n\n- Added support for named color spaces from the Color Interchange Forum to \n  GfColorSpace.\n\n- Added Gf.Color and Gf.ColorSpace Python bindings. \n\n- Removed overloads of GfMatrix4d::Transform, GfMatrix4d::TransformAffine, \n  GfMatrix4d::TransformDir, and GfRotation::TransformDir that take and return \n  GfVec3f, as they can potentially result in loss of precision. Matrix-vector \n  multiplication operators for double precision matrix types and single \n  precision vector types have also been removed. These were deprecated in 24.05.\n\n- Exposed Python bindings for ArAsset, enabling operations such as \n  ArResolver.OpenAsset(resolvedPath) to allow reading ArAsset buffers from \n  Python.\n  (PR: [#3318](https://github.com/PixarAnimationStudios/OpenUSD/pull/3318))\n\n- Various updates and fixes made for relocates.\n  - Fixed a bug where ancestral relocates weren't properly elided, leading to \n    verification failures and crashes.\n  - Fixed a bug with Pcp dependencies where some prim indexes from nested \n    relocates aren't invalidated when one of the ancestral relocates is \n    updated.\n\n- Improved how Pcp generates changelists for muting/unmuting layers and \n  adding/removing sublayers, improving performance especially in large stages. \n  Change notifications to external clients remain unaffected, and legacy \n  behavior is retained for layers that may contain relocates. This optimization \n  is still in development and is disabled by default. It can be enabled\n  by setting the environment variable \n  PCP_ENABLE_MINIMAL_CHANGES_FOR_LAYER_OPERATIONS = 1.\n\n- Deprecated time sample related methods on SdfLayer, to be removed in the next \n  release. SdfAttributeSpec now owns these time sample related methods.\n\n- Converted NdrSdfTypeIndicator from a std::pair to a full class.\n\n- Removed residual member function declaration for SdfPath.\n  (PR: [#3254](https://github.com/PixarAnimationStudios/OpenUSD/pull/3254))\n\n- Enhanced SdfCopySpec() to handle overlapping source/destination by copying the \n  source to a temporary anonymous layer first, then copying that temporary to \n  the destination. \n  (Issue: [#3095](https://github.com/PixarAnimationStudios/OpenUSD/issues/3095))\n\n- Initial work done on animation curves in USD.\n\n- Fixed performance issue writing .usdc files with high time sample counts.\n  (Issue: [#3249](https://github.com/PixarAnimationStudios/OpenUSD/issues/3249))\n\n- Reimplemented .usda text file parser using PEGTL. This removes a dependency on \n  lex/yacc and also provides some performance improvements.\n  (PR: [#3005](https://github.com/PixarAnimationStudios/OpenUSD/pull/3005),\n   [#3293](https://github.com/PixarAnimationStudios/OpenUSD/pull/3293),\n   [#3294](https://github.com/PixarAnimationStudios/OpenUSD/pull/3294))\n\n- Fixed bugs in the namespace-editing code that caused unnecessary and incorrect \n  edits to children defined by upstream composition dependencies.\n\n- Various updates for new Validation framework:\n  - Updated UsdValidationError to include a name property, used along with the \n    validator name to create an error identifier. This identifier can be used to \n    categorize and filter errors, especially when a validator can generate \n    multiple errors of different types. The error identifier is of the form \n    \"validatorName\".\"ErrorName\" or \"plugName\":\"validatorName\".\"ErrorName\".\n  - Added UsdValidationContext concept, which can be constructed by selecting \n    validators using keywords, plugins, validator metadata, schema types, or \n    pre-selected sets of validators. Validators for ancestor schema types are \n    also considered when selecting validators for a validation context. Clients \n    can use Validate() API to validate a layer, stage, or a set of prims with \n    parallel execution and error collection. UsdValidationContext initialization \n    may load plugins in order to load the validators. UsdValidationContext is a \n    stateless context, which means that clients handle validation input and \n    result tracking.\n  - Updated UsdValidationRegistry to be immortal, which means that any\n    registered validators and validator suites are also immortal.\n  - Added schema validators using the new Validation framework:\n    - Added StageMetadata Validator for usdGeom domain.\n      (PR: [#3134](https://github.com/PixarAnimationStudios/OpenUSD/pull/3134))\n    - Added StageMetadata Validator for core USD.\n      (PR: [#3125](https://github.com/PixarAnimationStudios/OpenUSD/pull/3125))\n    - Added SkelBindingApiAppliedValidator and SkelBindingApiValidator for \n      usdSkel domain. \n      (PR: [#3166](https://github.com/PixarAnimationStudios/OpenUSD/pull/3166))\n    - Added MaterialBindingApiAppliedValidator, EncapsulationRulesValidator for \n      usdShade domain.\n      (PR: [#3154](https://github.com/PixarAnimationStudios/OpenUSD/pull/3154))\n      (PR: [#3227](https://github.com/PixarAnimationStudios/OpenUSD/pull/3227))\n    - Added a Usdz Package Encapsulation Validator for usdUtils domain.\n      (PR: [#3206](https://github.com/PixarAnimationStudios/OpenUSD/pull/3206))\n    - Added validators for UsdGeomSubsets\n      (PR: [#3123](https://github.com/PixarAnimationStudios/OpenUSD/pull/3123))\n  - Updated UsdValidationErrorType to be registered as TfEnum.\n    (PR: [#3223](https://github.com/PixarAnimationStudios/OpenUSD/pull/3223))\n  - Added Python bindings for UsdValidatorMetadata, UsdValidator, \n    UsdValidatorSuite, UsdValidationError, UsdValidationErrorSite, \n    UsdValidationErrorType and UsdValidationRegistry.\n    (PR: [#3232](https://github.com/PixarAnimationStudios/OpenUSD/pull/3232))\n    (PR: [#3236](https://github.com/PixarAnimationStudios/OpenUSD/pull/3236))\n    (PR: [#3242](https://github.com/PixarAnimationStudios/OpenUSD/pull/3242))\n\n- Added support for `BlockCollection()` and `ResetCollection()` to \n  `UsdCollectionAPI` for expression-mode collections. Also added \n  `IsInExpressionMode()` and `IsInRelationshipsMode()` convenience APIs.\n\n- usdGenSchema now adds a schemaIdentifier field to schema plugInfo metadata.\n  When present, this field will be used as the schema's identifier in the schema \n  registry. If not, the alias under UsdSchemaBase will be used.\n\n- Updated usdGenSchema to generate helper files used in the build so that when \n  adding a new schema class to a schema library, users will just need to re-run \n  usdGenSchema instead of having to name the generated files manually in  \n  CMakeLists.txt  \n\n- Updated sdrOslParser to provide metadata (usdSchemaDef_* and \n  sdrGlobalConfig_*) used for schema generation via usdgenschemafromsdr. This \n  allows clients to generate USD schema from OSL shader definitions which are \n  registered via sdr.\n\n- Added a new usdSemantics module which includes a SemanticsLabelsAPI schema \n  for labeling prims with tokens. The implementation diverges slightly with \n  [the proposal](https://github.com/PixarAnimationStudios/OpenUSD-proposals/tree/main/proposals/semantic_schema) \n  with the taxonomy being after \"labels\" instead of before in the property name \n  (e.g., `semantics:labels:<taxonomy>` instead of `semantics:<taxonomy>:labels`).  \n  In addition to the schema, UsdSemanticsLabelsQuery provides a reference for \n  how ancestor labeling is expected to work and inherit.\n  (PR: [#3103](https://github.com/PixarAnimationStudios/OpenUSD/pull/3103))\n\n- Added support for elementType \"segment\" to UsdGeomSubset, where \"segment\" \n  refers to a segment of a UsdGeomBasisCurves object.\n\n- Updated UsdLuxCylinderLight bounds computation to use X axis as major axis.\n  (Issue: [#3233](https://github.com/PixarAnimationStudios/OpenUSD/issues/3233),\n   PR: [#3246](https://github.com/PixarAnimationStudios/OpenUSD/pull/3246))\n\n- Removed RenderDenoisePass from usdRender schemas.\n\n- Fixed crash in UsdSkelAnimQuery::ComputeJointLocalTransformComponents when \n  translate, rotate, or scale attributes are not present.\n\n- Updated UsdUtils.UpdateSchemaWithSdrNode to populate the shaderId attribute \n  for all shaderNodes across sourceTypes for the same identifier.\n\n- Added Python performance module under extras directory in support of local \n  performance testing and for tracking performance over OpenUSD releases. See\n  usdmeasureperformance.py and \n  [documentation](https://openusd.org/release/ref_performance_metrics.html) \n  for more details.\n\n### Hydra\n\n- Storm and HdPrman lighting/shading have been updated to be more consistent \n  when combining different material types and light types. Physically based \n  lighting and physically based materials have not changed; nor have camera \n  lights and fallback materials. However, camera lights and physically based \n  materials will appear brighter, and physically based lights and fallback \n  materials will appear darker, in order to produce correct lighting response.\n\n- Made change to allow the generative procedural resolving scene index to be \n  more easily toggled (via a new switchingSceneIndex).\n\n- Added a new filtering scene index: HdsiPrimTypeAndPathPruningSceneIndex. One \n  use case is to switch between camera and scene lights by changing the path \n  predicate.\n\n- Fixed a problem with motion blur when using HdRenderIndex::InsertSceneIndex, \n  where the shutter interval was not communicated from the render delegate to \n  emulation. Hence, emulation called GetContributingSampleTimesForInterval on an \n  HdSampledDataSource returned by the inserted scene index with a bad \n  startTime/endTime. \n\n- Overhauled HdExtComputationSchema and related schemas. In particular, \n  introduced HdExtComputationCpuCallback and changed the CPU callback data \n  source to return the new type.\n\n- Added typed getters and setters to HdExtComputationContext.\n\n- Introduced HdsiExtComputationDependencySceneIndex which clients can use \n  together with the HdsiExtComputationPrimvarPruningSceneIndex to evaluate and \n  invalidate ext computation primvars.\n\n- Added the WithOrientation method to PxOsdMeshTopology which behaves similar to \n  the WithScheme and WithHoleIndices methods. It returns a copy of the mesh \n  topology object except with the orientation set to the given orientation.\n\n- Added GeomUtilDiskMeshGenerator for generating disk-shaped meshes.\n\n- Fixed the GeomUtilCapsuleMeshGenerator so that the height, bottom radius, and \n  top radius of the cylindrical portion of the capsule is retained and the \n  spheres are adjusted to maintain continuity with the cylinder sides, as \n  defined in the documentation for UsdGeomCapsule.\n\n- Altered how the numCapAxial parameter works for GeomUtilCapsuleMeshGenerator \n  when the radii are different. When the radii differ, the numCapAxial parameter \n  is doubled and the number of cross-sections are divided between the top and \n  bottom hemispheres relative to the angle that each portion uses. This makes \n  the density of the mesh more even between the bottom and top when the radii \n  difference is large.\n\n- Added normals generation to the various mesh generation utility classes. \n  Similar to the point generation, the classes provide a method that returns the \n  number of normals and a method for generating the normals into a provided \n  container iterator. In addition, the interpolation mode of the normals can be \n  requested.\n\n- Made improvements to the light linking scene index. Added support for \n  non-nested native and point instancers and significantly improved invalidation \n  performance.\n\n- Prefixed predicate expressions with \"hd\" for clarity and deprecated existing \n  predicates.\n\n- Added render index API to allow batching of notices sent by the merging scene \n  index.\n\n- Fixed a subtle bug in the generative procedural resolving scene index to not \n  cook procedurals in response to scene queries.\n\n- Added RecipeMaterialOverride schema.\n\n- Added HdsiMaterialOverrideResolvingSceneIndex to resolve material overrides.\n\n- Fixed bug with loading monochrome .exr images. \n  (PR: [#3343](https://github.com/PixarAnimationStudios/OpenUSD/pull/3343))\n\n### UsdImaging\n\n- Added support for UsdGeomPlane in Scene Index mode.\n\n- Added UsdImagingModelSchema for any prim that has UsdModelAPI data in Scene \n  Index mode, including models demoted to act as subcomponents within other \n  models.  \n\n- Fixed a bug causing spurious warnings about \"implementationSource\" for lights.\n\n- Fixed an invalidation bug so that when a material is edited, prims with \n  that material bound will have their primvars correctly invalidated.\n  (Issue: [#2382](https://github.com/PixarAnimationStudios/OpenUSD/issues/2382))\n\n- Fixed DeprecationWarning in usdviewq/appController.py caused by a regex \n  containing an invalid escape sequence.\n  (PR: [#2955](https://github.com/PixarAnimationStudios/OpenUSD/pull/2955))\n\n- Added AOV light adapter for transporting USD AOV lights to Hydra. \n\n### Storm\n\n- Fixed Vulkan buffer leaks in HdSt_PipelineDrawBatch.\n  (PR: [#3313](https://github.com/PixarAnimationStudios/OpenUSD/pull/3313))\n\n- Improved Lavapipe support, enabling the Vulkan driver as a software rasterizer \n  on macOS. \n  (PR: [#3121](https://github.com/PixarAnimationStudios/OpenUSD/pull/3121))\n\n- Added support for configurable anisotropic filtering in Storm and Hgi. We now \n  disable anisotropy for certain texture/sampler uses such as dome light \n  textures and AOVs. \n  (PR: [#3216](https://github.com/PixarAnimationStudios/OpenUSD/pull/3216))\n\n- Fixed deadlock when Vulkan command buffers are consumed faster than they are \n  executed. \n  (PR: [#3170](https://github.com/PixarAnimationStudios/OpenUSD/pull/3170))\n\n- Updated simpleLights to increase the brightness when used with physically\n  based materials (for example, UsdPreviewSurface or MaterialX).\n\n- Updated fallback shading to decrease the brightness when used with physically \n  based lights (like UsdLux), for consistency with physically based materials.\n\n- Fixed displacement shading when using vertex or varying displacement \n  parameterization with Metal.\n  (Issue: [#3248](https://github.com/PixarAnimationStudios/OpenUSD/issues/3248))\n\n- Updated drawing of selected mesh edges to eliminate the need to apply a depth \n  offset in the geometry shader.\n\n- Exposed an option in HdMeshReprDesc to enable generation of surface edge ids \n  for surface and hull geom styles which do not otherwise draw edges. This \n  option is disabled by default which avoids enabling geometry shader stages for \n  more use cases.\n  (PR: [#3071](https://github.com/PixarAnimationStudios/OpenUSD/pull/3071))\n\n- Shaders for basis curves rprims that are rendered as ribbons are now provided \n  with a texture coordinate that varies over the width of the curve, via the \n  patchCoord argument to the shader terminal.\n\n- Fixed potential texture memory leak by explicitly calling garbage collection \n  of the necessary subsystem from resource registry's garbage collection.\n\n- Storm draw target clients no longer need to call \n  HdChangeTracker::MarkStateDirty when a draw target gets disabled and enabled. \n  Storm automatically does the necessary invalidation by tracking the version \n  number of the active draw target set in HdStRenderParam.\n\n- Fixed the deep selection resolve mode for the \"pickPointsAndInstances\" pick \n  target.\n\n- Fixed missing include in glslProgram. \n  (PR: [#3283](https://github.com/PixarAnimationStudios/OpenUSD/pull/3283))\n\n### RenderMan Hydra Plugin\n\n- **Important**: Removed hdPrman for RenderMan 25. This was deprecated in USD\n  24.08\n\n- usdRiPxr schemas for rman26.3 are not bundled with OpenUSD and instead will be \n  installed during a OpenUSD build from the specified RenderMan location.\n\n- Added support for the official RenderMan PxrPrimvarAPI schema in HdPrman.\n\n- Fixed a bug with missing invalidation of time-varying primvars in Scene Index \n  mode. This would manifest as a stale primvar value after changing the input \n  scene time during a render.\n\n- Added HD_PRMAN_INTERACTIVE_RENDER_WITH_RENDER_SETTINGS which adds the render \n  settings' products to the task's AOV bindings in the render view.\n\n- Updated simpleLights (that is, lights set via \n  HdxTaskController::SetLightingState) to increase the brightness when used with \n  or without materials.  \n\n- Added many preprocessor directives as needed to support compiling against USD \n  versions back to 22.05.\n\n- hdPrman now respects an env var called RMAN_XPU_GPUGCONFIG that can be set \n  with a comma delimited list of the indexes of the selected GPUs.\n\n- Updated the use of ri:checkpoint:exitat to work independently of \n  ri:checkpoint:interval being set.\n\n- Updated to use \"Shutter settings\" on the camera and ignore ri:shutter render \n  setting.\n\n- Updated PxrBakeTexture to correctly write to non tex files which exist on disk.\n\n- Fixed a bug where switching between VDB volumes that kept the same path name \n  would not update in the interactive render.\n\n- Fixed a bug where interactively editing the Material Sync Mode of a \n  PxrMeshLight would not trigger the expected update of the mesh light \n  geometry's visibility. Note that mesh light support is still in active \n  development and will be enabled in a future release.\n\n- Fixed a crash that could happen when switching between RenderMan Hydra \n  delegates in Katana.\n\n- Added support for environment variable HD_PRMAN_TEX_EXTS that accepts a \n  colon-separated list of extensions known to be tex compatible, e.g. \"tex:txr\".\n\n- Fixed a bug where UDIM textures used by the USDUvTexture node would be flipped \n  incorrectly.\n\n- Updated Volume prims with primvar named \"vel\" or \"velocity\" to infer the type \n  to be vector rather than float.\n\n- Support for the PRMAN_OSL_BEFORE_RIXPLUGINS environment variable to allow \n  resolving OSL shaders before C++.\n\n- Support finding MaterialX search paths at runtime based on a DCC install \n  location.\n\n- Support naming the hdPrman delegate something other than \"Prman\".\n\n- Support Ri:PixelFilterName and Ri:PixelFilterWidth options.\n\n- Various updates to SideFX Solaris support.\n  - Enabled the use of interactive denoiser from within Solaris.\n  - Fixed a bug where background renders in Solaris could lead to a crash if a \n    RIS render was already running interactively or if the output type of the \n    render was not set to \"raster\".\n  - Fixed a bug where pixelAspectRatio wasn't having the expected effect.\n  - Fixed some issues with MaterialX in Solaris.\n  - Fixed problem where hdPrman would keep rendering in the background when the \n    viewport switched to the GL renderer in Solaris.\n  - Improved data/display window calculation and removed clamp on overscan.\n  - Added support for aggregate volumes in Solaris.\n  - Added HD_PRMAN_HIDE_DEFAULT_DOMELIGHT_TEXTURE environment variable, which, \n    when set, forces any textured dome lights with a prefix of `</_UsdImaging_>` \n    or `</husk_headlight>` to be camera-invisible, as a temporary measure to \n    support Solaris.\n\n- Improved hdPrman compatibility with the Hush SideFX command line rendering \n  utility.\n\n- More work on hdPrman Hydra 2.0 transition. The following assumes a recent USD \n  version but does not require HD_PRMAN_EXPERIMENTAL_RILEY_SCENE_INDEX_OBSERVER. \n  The HdPrman_RileyGlobalsSceneIndex filtering scene index now computes some of \n  the Riley options to add a riley:globals prim. hdPrman's \n  HdsiPrimManagingSceneIndexObserver picks up the options on the riley:globals \n  prim and makes them contribute to the Riley::SetOptions call.\n\n- Fixed a bug where rendering a product without vars led to a crash in RenderMan.\n\n- Added support for PxrEnvDayLight.\n\n- Small performance cleanup for purpose-based visibility.\n\n### MaterialX\n\n- Made a change to how MaterialX node names are constructed from material \n  network node paths to support Solaris. This change only affects hdPrman built \n  as part of a DCC.\n\n- Fixed issue with Storm when rendering custom nodes that use the <texcoord> \n  node in their defining nodegraph, and either re-use that node's output or are \n  a multi-output node. \n\n- Fixed divide by zero issue in the calculation of a light's intensity value \n  inside Storm's MaterialX glslfx shader. \n\n- Added support for custom texture nodes in hdPrman.\n\n- Switched the USD name of surface shader nodes to use the MaterialX node name \n  instead of the NodeDef name.\n  (Issue: [#3100](https://github.com/PixarAnimationStudios/OpenUSD/issues/3100), \n   PR: [#3147](https://github.com/PixarAnimationStudios/OpenUSD/pull/3147))\n\n- Fixed shadow support for MaterialX materials in Metal. \n  (Issue: [#3176](https://github.com/PixarAnimationStudios/OpenUSD/issues/3176), \n   PR: [#3264](https://github.com/PixarAnimationStudios/OpenUSD/pull/3264))\n\n- Fixed testUsdMtlxFileFormat.py. \n  (PR: [#3147](https://github.com/PixarAnimationStudios/OpenUSD/pull/3147))\n\n- Added more function tracing in UsdMtlx. \n  (PR: [#2806](https://github.com/PixarAnimationStudios/OpenUSD/pull/2806))\n\n### Embree Hydra Plugin\n\n- Fixed a bug in HdEmbree random number generation. \n  (PR: [#3211](https://github.com/PixarAnimationStudios/OpenUSD/pull/3211))\n\n- Added HDEMBREE_RANDOM_NUMBER_SEED to facilitate stable image testing. \n  (PR: [#3183](https://github.com/PixarAnimationStudios/OpenUSD/pull/3183))\n\n- Typo fix and refactoring of ray hit code. \n  (PR: [#3185](https://github.com/PixarAnimationStudios/OpenUSD/pull/3185))\n\n### usdview\n\n- Made a fix to correctly handle device pixel ratio with multi-display setups.\n\n- Added applied API schema data to the usdview \"Meta Data\" tab. \n  (Issue: [#1431](https://github.com/PixarAnimationStudios/OpenUSD/issues/1431)) \n\n### Documentation\n\n- Added new [performance metrics page](https://openusd.org/release/ref_performance_metrics.html) \n  to docs, used to publish metrics for each release, and describe how metrics \n  are measured. \n\n- Various documentation updates:\n  - Improvements to Hydra prim schema documentation.\n  - Updated docs to clarify schema strength ordering.\n  - Additional doc fixes.\n    (PR: [#2695](https://github.com/PixarAnimationStudios/OpenUSD/pull/2695),\n     [#3287](https://github.com/PixarAnimationStudios/OpenUSD/pull/3287))\n\n- SIGGRAPH 2024 BoF slides PDF added to [Downloads page](https://openusd.org/release/dl_downloads.html). \n\n- [Contributing to USD](https://openusd.org/release/contributing_to_usd.html) \n  page updated with instructions to use when making major changes.\n\n- Added [Security Policy](https://github.com/PixarAnimationStudios/OpenUSD/blob/release/SECURITY.md)\n  with details on reporting security vulnerabilities with USD.\n\n- Switched .dox files in pxr/usd/usd to Markdown files (which addressed some \n  formatting issues), and renamed enclosing directory to \"docs\". We recommend \n  Markdown for new modules, as this makes the documentation more portable.\n\n- Updated URL to USD Assets Working Group \"Primvar Interpolation\" asset in the \n  Rendering with USD user guide.\n  (PR: [#3110](https://github.com/PixarAnimationStudios/OpenUSD/pull/3110))\n\n### Security\n\n- Fixed crash when reading .usdc file with corrupt SdfSpecType values, see\n  [security advisory on github](https://github.com/PixarAnimationStudios/OpenUSD/security/advisories/GHSA-4j7j-gm3f-m63w).\n\n<details open>\n  <summary><b>Previous Releases</b></summary>\n\n## [24.08] - 2024-07-25\n\nOpenUSD is now licensed under the Tomorrow Open Source Technology license. This\nis a renaming of the license, but the terms and conditions are the same as\nbefore. See [this forum post](https://forum.aousd.org/t/upcoming-openusd-license-update/1561) \nfor details.\n\n### Build\n\n- boost is now an optional dependency that is only required for building Python \n  bindings. \n  (PR: [#3028](https://github.com/PixarAnimationStudios/OpenUSD/pull/3028))\n\n- Added support for optionally building with oneTBB.\n  (PR: [#2457](https://github.com/PixarAnimationStudios/OpenUSD/pull/2457),\n   [#2458](https://github.com/PixarAnimationStudios/OpenUSD/pull/2458),\n   [#2459](https://github.com/PixarAnimationStudios/OpenUSD/pull/2459),\n   [#2462](https://github.com/PixarAnimationStudios/OpenUSD/pull/2462),\n   [#2463](https://github.com/PixarAnimationStudios/OpenUSD/pull/2463),\n   [#2464](https://github.com/PixarAnimationStudios/OpenUSD/pull/2464),\n   [#2465](https://github.com/PixarAnimationStudios/OpenUSD/pull/2465),\n   [#2466](https://github.com/PixarAnimationStudios/OpenUSD/pull/2466))\n\n- Various fixes and changes to build_usd.py:\n  - Added \"--onetbb\" option to use oneTBB instead of TBB.\n  - Added support for cross-compiling for iOS and visionOS.\n    (PR: [#2949](https://github.com/PixarAnimationStudios/OpenUSD/pull/2949), \n     [#2950](https://github.com/PixarAnimationStudios/OpenUSD/pull/2950), \n     [#3052](https://github.com/PixarAnimationStudios/OpenUSD/pull/3052))\n  - Disabled argument abbreviations. For example, \"--debug\" will no longer match \n    \"--debug-python\".\n  - Updated to build with MaterialX v1.38.10.\n\n- Added support for Python 3.12 and deprecated support for 3.6 for usd-core\n  PyPI package.\n\n- Added the build type to the absolute path used to store the PCH result, \n  preventing Debug/Release PCH files from over-writing each other causing linker \n  issues.\n  (PR: [#2698](https://github.com/PixarAnimationStudios/OpenUSD/pull/2698))\n\n- Fixed absolute paths to GL libraries and libm.so in pxrConfig.cmake.\n  (PR: [#2827](https://github.com/PixarAnimationStudios/OpenUSD/pull/2827),\n   [#2796](https://github.com/PixarAnimationStudios/OpenUSD/pull/2796))\n\n- Added support for MSVC's standards-conformant preprocessor.\n  (PR: [#2990](https://github.com/PixarAnimationStudios/OpenUSD/pull/2990))\n\n- Added the ability to set a string prefix for test run temp directory names.\n\n### USD\n\n- Continued progress on namespace editing:\n  - Completed the work of adding relocates composition.\n  - UsdNamespaceEditor can now handle moving and deleting prims with opinions \n    across composition arcs by authoring relocates.\n\n- Various updates for UsdCollectionAPI and path expressions:\n  - Allow leading & trailing whitespace in the SdfPathExpression constructor.\n  - Added PathExpression complement-of-complement cancellation.\n  - Allow path patterns that start with '//' to pass unchanged through both \n    PcpMapFunction and UsdStage's prototype-to-instance path mapping.\n  - Added missing Python bindings for \n    UsdCollectionMembershipQuery::UsesPathExpansionRuleMap and \n    UsdCollectionAPI::ResolveCompleteMembershipExpression().\n  - Added UsdComputePathExpressionFromCollectionMembershipQueryRuleMap()\n    which computes an SdfPathExpression that matches the same paths as the\n    given UsdCollectionMembershipQuery::PathExpansionRuleMap.\n  - Allow PathExpression atoms to be constructed from SdfPaths directly.\n\n- Completed the first phase of the \n[UsdValidation framework](https://github.com/PixarAnimationStudios/OpenUSD-proposals/tree/5a3c03b339db80052e45d2bda768ac0327653cb6/proposals/usd-validation-framework). \nUsers can now register UsdValidator validation functions with the \nUsdValidationRegistry. Validation functions can be invoked by \nUsdValidator::Validate() and will return any UsdValidationErrors. The following \nvalidators were also added:\n  - CompositionErrorTest validator, which reports composition errors on a stage.\n  - UsdShade ShaderPropertyTypeConformance validator, which reports various \n    errors associated with UsdShadeShader and SdrShader compliance.\n\n- Added TraceReporter::LoadReport(), which can be used to read reports generated \n  by TraceReporters.\n\n- Added TfMallocTag::CallTree::LoadReport(), which can be used to read malloc \n  tag reports generated by calling TfMallocTag::CallTree::Report().\n\n- Changed TfNormPath's and TfRealPath's behavior to match Python os.normpath and \n  os.realpath. In particular, the casing of drive letters on Windows will be \n  retained instead of forced to lower-case.\n  (Issue: [#3020](https://github.com/PixarAnimationStudios/OpenUSD/issues/3020))\n\n- Deprecated functions on GfMatrix{2,3,4}d and GfRotation that take and return \n  GfVec3f values as they can potentially result in loss of precision. These \n  functions will be removed in a subsequent release.\n \n- Added GfColor and GfColorSpace to represent colors and provide color\n  space transformations. This includes a set of built-in color spaces that\n  are always known to USD. Note that as before, USD represents colors\n  in scene description as float3, and properties and attributes may have\n  an associated color space token.\n\n- URI schemes used by Ar URI resolvers must now conform to the character set \n  requirements in RFC2396. Support for the environment variable \n  PXR_AR_DISABLE_STRICT_SCHEME_VALIDATION has been removed. Support for \n  non-compliant schemes was deprecated in 23.11. \n  (PR: [#2997](https://github.com/PixarAnimationStudios/OpenUSD/pull/2997))\n\n- Added support for sub-root default prims.\n  (Issue: [#2951](https://github.com/PixarAnimationStudios/OpenUSD/issues/2951))\n\n- Added a named sentinel value that is returned from SdfListProxy::Find when the \n  value is not present in the list of operations.\n\n- Fixed an issue in PcpMapFunction where some functions wouldn't compose \n  correctly.\n\n- Compose dynamic file format arguments through all non-dynamic arcs, which \n  allows variant selections to impact dynamic payload arguments.\n\n- Added SdrShaderNode::CheckCompliance static method which checks if the same \n  named properties of a given SdrShaderNode have matching types and default \n  values.\n\n- usdGenSchema now correctly generates code when namespaces are used in a \n  propertyNamespacePrefix.\n  (PR: [#3090](https://github.com/PixarAnimationStudios/OpenUSD/pull/3090))\n\n- We are deprecating the inclusion of API documentation in the \"documentation\" \n  field of the schema prim and property definitions. This will be fully removed \n  in 24.11.\n\n- Fixed issue with concurrent schema registry initialization and the Python GIL.\n  (Issue: [#3087](https://github.com/PixarAnimationStudios/OpenUSD/issues/3087))\n\n- Added UsdStage::GetAllCompositionErrors() for retrieving composition errors\n  for all prims and layer stacks on the stage.\n\n- Added UsdGeomBasisCurves::ComputeSegmentCounts().\n\n- Fixed the code for calculating mesh points on Capsule_1 prims with different \n  bottom and top radii. \n  (PR: [#3129](https://github.com/PixarAnimationStudios/OpenUSD/pull/3129))\n\n- UsdRenderPass schema refinements:\n  - Removed lightsRenderVisibility and geomRenderVisibility to consolidate with \n    the existing renderVisibility collection.\n  - Specify that renderVisibility and cameraVisibility only apply to \n    \"renderable\" prims, defined as geometry and lights but not render settings \n    related types such as display or sample filters (which do otherwise obey the \n    Hydra visibility schema). If a render pass intends to remove such types, a \n    prune collection should be used instead.\n  - renderVisibility and cameraVisibility can only make scene objects invisible; \n    they cannot make invisible objects visible again. The intuitive basis for \n    this is that render pass visibility is used to partition the upstream scene, \n    not to pull hidden things back into view.\n\n- Added 'deepRaster' to the allowed tokens list for the UsdRenderProduct's \n  productType attribute.\n\n- Added an option to UsdUtilsModifyAssetPaths which will preserve the length of \n  asset array attributes/metadata when empty paths are present or the modify \n  function returns an empty string.\n  (Issue: [#3060](https://github.com/PixarAnimationStudios/OpenUSD/issues/3060), \n   PR: [#3063](https://github.com/PixarAnimationStudios/OpenUSD/pull/3063))\n\n### Hydra\n\n- **Important**: HgiGL now defaults to using nearest sampling and not enabling \n  anisotropic filtering for depth and stencil textures.\n\n- **Important**: Fixed a bug in the HdMergingSceneIndex that was not properly \n  re-adding prims when removed in another input scene.\n\n- Added native support for .avif image files via the new hioAvif plugin. This \n  plugin only supports reading these image files.\n\n- Optimized removal of rprims from HdRenderIndex. These changes improved many \n  of the examples in the performance test by more than 100x.\n\n- HdxSelectionSceneIndexObserver::SetSceneIndex() now populates its initial \n  selection in parallel, improving performance for consumers such as \n  HdxColorizeSelectionTask::Prepare().\n\n- Certain Hdx task types now internally retain the GLSLFX form of their shaders \n  to avoid re-parsing them each time a task is constructed. This improves\n  render startup time. \n\n- Made change to ensure that HdsiPinnedCurveExpandingSceneIndex does not pull on \n  the basisCurves schema when asked for unrelated scene index keys. This was \n  causing a performance hit in the presence of generative procedurals producing \n  curve data.\n\n- The Hydra Scene Browser can now display SdfPathVector values.  \n\n- Added Hydra schema for render passes. Added activeRenderPassPrim to \n  HdSceneGlobals schema. Added render pass support to UsdImaging (when in scene \n  index mode).\n\n- HdxFullscreenShader now supports specifying samplers for any textures bound \n  to it.\n\n- HdGetSamplerParameters has a new overload that operates on a std::map.\n\n- Added current frame to the scene globals scene index and render settings \n  schemas, and updated Prman to use this ri:Frame attribute.\n\n- Fixed the transformation of camera lights when using a scene camera for \n  renderers other than Storm.\n\n- Updated TetMesh to use surfaceFaceVertexIndices instead of the \n  tetVertexIndices.\n\n- Removed down cast of world space hit point in HdxPickHit.\n\n- Added HdUtils::ConvertHdMaterialNetworkToHdMaterialSchema() and \n  ConvertHdMaterialNetworkToHdMaterialNetworkSchema().\n\n- Added HdEncapsulatingSceneIndex. The mix-in class allows inspection tools to \n  traverse the directed acyclic graph of scene indices at different levels of \n  detail. Note that hdui is not (yet) aware of encapsulating scenes and thus \n  their use is protected by an env var. The use of encapsulating scene indices \n  will eventually make env vars such as \n  USDIMAGING_SHOW_POINT_PROTOTYPE_SCENE_INDICES unnecessary.\n\n- In HdSceneDelegate added overloads of SampleFOO methods explicitly taking the \n  sampling interval as startTime and endTime. HdSceneIndexAdapterSceneDelegate \n  is passing these arguments to \n  HdSampledDataSource::GetContributingSampleTimesForInterval. This will allow us \n  to get rid of HdPrman_MotionBlurSceneIndexPlugin::SetShutterInterval and the \n  associated global variables in the future.\n\n- Moved HdTextureType out of Hydra core into Storm.\n\n- Added support to provide finer grained invalidation for light filter prims in \n  emulation.\n\n- Added HdsiLightLinkingSceneIndex to implement light linking semantics in a \n  scene index.\n\n- Fixed a bug in the evaluation of path expressions for collections with pruning \n  semantics.\n\n- Fixed backend emulation handling of PrimsAdded messages for already-populated \n  prims, to properly resync them.\n\n- Fixed a theoretical bug in HdDirtyList that would leave stale render tag prim \n  state if Sync() was called without any render tags activated.\n\n- Fixed a linking error some builds would hit related to \n  HdRenderIndex::InsertTask<T>.\n  (PR: [#3000](https://github.com/PixarAnimationStudios/OpenUSD/pull/3000))\n\n- Added missing <algorithm> include to several files.\n  (PR: [#3021](https://github.com/PixarAnimationStudios/OpenUSD/pull/3021))\n\n- Fixed a comment on the struct definition of HdDisplayStyle.\n  (Issue: [#3033](https://github.com/PixarAnimationStudios/OpenUSD/issues/3033))\n\n- Made HdRendererPluginRegistry more consistent about setting display name \n  correctly, and added an HD_RENDERER_PLUGINS debug flag.\n\n- Added API tags to the pxr/imaging/hdui library.\n  (PR: [#2689](https://github.com/PixarAnimationStudios/OpenUSD/pull/2689))\n\n- Added a debug flag to provide detail when Hgi::IsBackendSupported() returns \n  false.\n\n- Optimized HdSceneIndexAdapterSceneDelegate's usage of SdfPathTable to be more \n  correct and cache-friendly.\n\n- Added deep picking support to HdxPickTask, via the \"resolveDeep\" resolve mode \n  which is similar to \"resolveUnique\" but also includes results that are \n  occluded in a typical id-render. \n  (PR: [#3044](https://github.com/PixarAnimationStudios/OpenUSD/pull/3044)).\n\n- Updated stb_image to 2.29, and stb_image_resize to 2.07.\n  (PR: [#2880](https://github.com/PixarAnimationStudios/OpenUSD/pull/2880))\n\n- Added defensive coding in HioOIIOImage and switched int for size_t where \n  appropriate \n  (PR: [#3119](https://github.com/PixarAnimationStudios/OpenUSD/pull/3119))\n\n- When calling HdSceneDelegate::SamplePrimvar() for a time-varying primvar when \n  the time sampling interval's start or end time falls between authored sample \n  times, the bracketing authored sample times are now included in the output. \n  Previously, only authored sample times within the interval were included, \n  along with interpolated values at the interval start and end, as needed.\n  For example, if the primvar has authored values at T = [1, 2, 3], and the \n  sampling interval is [1.5, 2.5], the new behavior provides the authored values \n  at T =  [1, 2, 3], whereas the old behavior would provide values at \n  T = [1.5, 2, 2.5], with the values at 1.5 and 2.5 being linear interpolations \n  between the adjacent authored values.\n\n- The behavior of HdSampledDataSource::GetContributingSampleTimesForInterval() \n  for data sources coming out of UsdImaging has been corrected consistent with \n  the change to HdSceneDelegate::SamplePrimvar() described above. \n\n- HdsiVelocityMotionResolvingSceneIndex, a reference implementation of USD \n  velocity-based motion, has been added to the Hydra scene index library. It has \n  been added to the Storm renderer, but is not a part of the UsdImaging default \n  scene index stack.\n\n- HdGeomSubsetsSchema (plural 'Subsets') has been removed. In Hydra 2, geom \n  subsets are no longer properties of the parent geometry. They now traverse the \n  Hydra 2 scene indices as child prims of the parent geometry, so this schema is \n  no longer required. This change should be transparent to consumers of the \n  legacy HdSceneDelegate interface, but authors of Hydra 2 scene indices that \n  need to be subset-aware will need to revise their implementations.\n\n- HdGeomSubsetSchema (singular 'Subset') now has a non-empty default locator, \n  consistent with subsets' promotion from properties to prims. Data sources for \n  geom subset fields will now be found under the \"geomSubset\" property of the \n  geom subset prim, rather than at the top level of the prim. \n  This change should be transparent to consumers of the legacy HdSceneDelegate \n  interface.  \n\n### UsdImaging\n\n- Fixed an issue when scene lights are enabled and disabled.\n\n- Made fix to assign ReplacePrefix() return value to newLocators when changing \n  directMaterialBindings locators to materialBindings locators.\n\n- Made sure the results of UsdImagingStageSceneIndex's GetPrim and \n  GetChildPrim are consistent by using the same prim predicate.\n\n- UsdImagingDataSourceCustomPrimvars no longer stores attribute queries in a map \n  but creates it every time a particular primvar is queried. This fixes a bug \n  where a client would not see a primvar that has an authored value now but had \n  no authored value when the primvars container was retrieved by the client. \n  More generally, it also fixes bugs where the resolution info in the previous \n  attribute query is no longer valid.\n\n- Replaced UsdImagingDataSourceSchemaBased with the more flexible \n  UsdImagingDataSourceMapped.\n\n- Transport USD collections as data sources when using the stage scene index.  \n\n- Fixed performance issue where UsdImagingFieldAdapter would unnecessarily \n  compute the total number of time samples for attributes, which could cause \n  all value clip layers to be loaded.\n\n- Fixed sizing of result array when calling GetScenePrimPaths with some invalid \n  instance indices.\n  (PR: [#2960](https://github.com/PixarAnimationStudios/OpenUSD/pull/2960))\n\n- Added imaging transport for uniform and constant primvars on \n  UsdGeomPointInstancer, and fixed transport of \"velocities\", \"accelerations\", \n  and \"angularVelocities\" on point instancers.\n  (PR: [#1731](https://github.com/PixarAnimationStudios/OpenUSD/pull/1731), \n   [#1734](https://github.com/PixarAnimationStudios/OpenUSD/pull/1734))\n\n- Added null-prim checks when computing Hydra materials.\n  (PR: [#2930](https://github.com/PixarAnimationStudios/OpenUSD/pull/2930))\n\n- Fixed incorrect API tags in UsdSkelImaging and UsdVolImaging.\n  (PR: [#2691](https://github.com/PixarAnimationStudios/OpenUSD/pull/2691))\n\n- Added StageSceneIndex support for UsdLuxCylinderLight, and fixed support for \n  UsdGeomSubset.\n\n- Fixed UsdImagingGLEngine::TestIntersection instancing-related out-params when \n  using StageSceneIndex.\n\n- Ratcheted usdImagingGL test thresholds.\n  (PR: [#2970](https://github.com/PixarAnimationStudios/OpenUSD/pull/2970))\n\n- Fixed a bug where UsdImagingDelegate would sometimes end up with duplicate \n  primvar entries.\n  (PR: [#2096](https://github.com/PixarAnimationStudios/OpenUSD/pull/2096))\n\n- Added StageSceneIndex invalidation support for UsdVolField prims.\n\n- Fixed UsdImagingGLEngine::DecodeIntersection when using StageSceneIndex\n\n- Added a new version of UsdImagingGL::TestIntersection that takes resolve mode, \n  and returns a result vector instead of a single result.\n  (PR: [#3044](https://github.com/PixarAnimationStudios/OpenUSD/pull/3044))\n\n- UsdImagingPrimAdapter::SamplePrimvar() now includes bracketing authored sample \n  times in certain scenarios, similar to the updated behavior of \n  HdSceneDelegate::SamplePrimvar() described above.\n\n- Point instancer prototype prims are now relocated as children of the point \n  instancer, rather than properties of it. Previously, each drawable leaf prim \n  within the prototype of a point instancer was relocated as a direct child of \n  the point instancer, but with a property path of the form \n  `.proto0_<name>_id0`. This property form of path precluded the relocated \n  prototype prim from having child prims of its own. The promotion of geom \n  subsets from properties to prims therefore required also promoting the \n  relocated prototype prims from property paths to prim paths.\n\n### Storm\n\n- Updated the default compute shader local size to (64, 1, 1) for compute \n  shaders executed for GPU ext computations and the frustum culling compute \n  pipeline.\n\n- Improved shader interstage slot calculation for Hgi resource generation, \n  reducing the total number of interstage locations needed, and accounting for \n  resources that take up more than one slot. Fixed adaptive subdivision shader \n  compilation when using HgiVulkan.\n\n- Added function Hgi::CreateNamedHgi, which can be used to create a specific Hgi \n  instance given a valid Hgi token. \n  (PR: [#2850](https://github.com/PixarAnimationStudios/OpenUSD/pull/2850))\n\n- Use HgiHandle unique id in hashes rather than the pointer address, as the \n  latter can be reused between different objects.\n\n- Added tests testHgiGL and testHgiVulkan.\n\n- Various HgiVulkan fixes and improvements:\n  - Improved handling of Vulkan viewport. Rather than flipping the Vulkan \n    viewport in the Y-direction, instead allow the geometry to render upside \n    down by using the same projection matrix and viewport used for OpenGL, but \n    flipping the winding order. This change greatly simplifies and circumvents \n    coordinate system differences between Vulkan and other graphics backends in \n    Storm. \n  - Added MaterialX support for Vulkan, using MaterialX::VkShaderGenerator.\n  - Added implementations for HgiVulkanBlitCmds::CopyTextureToBuffer and \n    CopyBufferToTexture.\n  - Fixed a bug in HgiVulkanBlitCmds::CopyBufferGpuToCpu.\n  - Fixed bugs around HgiVulkan access masks for layout transition barriers.\n  - Added correct read usage flags for depth and stencil buffers in Vulkan.\n  - Fixed color correction shader and volume shader compilation bugs for Vulkan.\n\n- Fixed the behavior of HgiSubmitWaitTypeWaitUntilCompleted when submitting \n  command buffers on Metal.\n  (PR: [#2794](https://github.com/PixarAnimationStudios/OpenUSD/pull/2794))\n\n- Fixed shading with Metal when geometry is flipped (e.g. scale -1,1,1).\n  (Issue: [#2536](https://github.com/PixarAnimationStudios/OpenUSD/issues/2536))\n\n- Fixed MaterialX shader gen for EDF type declarations.\n  (Issue: [#3049](https://github.com/PixarAnimationStudios/OpenUSD/issues/3049), \n   [#3105](https://github.com/PixarAnimationStudios/OpenUSD/issues/3105), \n   PR: [#3106](https://github.com/PixarAnimationStudios/OpenUSD/pull/3106))\n\n- Fixed Ptex GLSL layout sampler declaration and binding.\n\n- Fixed adaptive tessellation of subdivision surfaces to avoid \n  under-tessellation artifacts.\n  (Issue: [#2981](https://github.com/PixarAnimationStudios/OpenUSD/issues/2981))\n\n- Fixed subdivision surface refinement of faceVarying primvar to avoid crashes \n  when the faceVarying primvar topology is invalid.\n\n- Fixed an issue pulling fallback values from Sdr that was affecting material \n  wrap modes, among others.\n  (PR: [#2519](https://github.com/PixarAnimationStudios/OpenUSD/pull/2519))\n\n- Fixed incorrect GPU skinning of meshes with blendshapes but no skeleton.\n  (Issue: [#2425](https://github.com/PixarAnimationStudios/OpenUSD/issues/2425),\n   PR: [#2696](https://github.com/PixarAnimationStudios/OpenUSD/pull/2696))\n\n- Added NAN guards to dome light convolution shader.\n  (PR: [#2383](https://github.com/PixarAnimationStudios/OpenUSD/pull/2383))\n\n- Fixed a bug where some BasisCurves pipelines were applying color overrides \n  twice.\n  (PR: [#3124](https://github.com/PixarAnimationStudios/OpenUSD/pull/3124))\n\n- Storm now supports velocity-based motion of points-based geometry and point \n  instances consistent with the USD velocity motion specification. \n  Velocity-based motion will now be correctly applied to geometry points and to \n  point instance positions and rotations at subframe sample times. Note that \n  velocity-based motion is intended primarily for subframe sampling and should \n  not be used as a physics engine or as a substitute for definitive, authored, \n  per-frame position data. \n  (Issue: [#2571](https://github.com/PixarAnimationStudios/OpenUSD/issues/2571))\n\n### RenderMan Hydra Plugin\n\n- hdPrman for RenderMan 25 is deprecated. Support for hdPrman for RenderMan 25 \n  will be removed in the 24.11 release.\n\n- Updated usdRiPxr to include schemas for Renderman 26.1. Also updated usdRiPxr \n  CMakeLists to gather bundled schemas from yet to be released Renderman 26.2 \n  and above.\n\n- Added code to take advantage of new display APIs for RenderMan 26 and also \n  add #ifdefs so that building against RenderMan 25 still works.\n\n- Fixed an issue where gprim Sync() would cause extra rounds of edit requests \n  to the Riley API, stopping & restarting the render even when there were no \n  actual edits required. \n\n- RenderMan requires Ri:Frame to be an integer so force it to int(floor(time)).  \n  This ensures that it produces an independent sampling sequence per integer \n  frame.\n\n- HdPrman now supports field-less RiVolume primitives. These are used for \n  homogeneous fog volumes which do not require voxel data. Field-less volumes \n  need the standard RenderMan parameters, Ri:type and Ri:Bounds.  \n\n- HdPrman now applies the render pass specified byHdSceneGlobalsSchema using an \n  internal RenderPassSceneIndex.\n\n- Fixed a bug where a crash could occur when AOV names are received as a string \n  rather than a TfToken.\n\n- Added support for usdRiPxr's PxrCameraAPI schema. This required a \n  corresponding adapter in usdRiPxrImaging as well as removing the default \n  values for shutterOpen/shutterClose/shutterOpening in hdPrman. The old default \n  values were hard-coded and different between the interactive and \n  non-interactive modes.\n\n- Removed code to dirty all rprims in \n  HdPrmanRenderDelegate::SetRenderSetting(\"renderCameraPath\", value). This is a \n  performance improvement when switching cameras. However, it also means that \n  clients of hdPrman need to invalidate all animated primvars if the shutter \n  interval between the old and new camera is different. Note that even before \n  the change, clients need to invalidate all animated primvars if the shutter \n  interval changes for reasons other than the camera path changing. This \n  behavior of hdPrman might be revisited in the future.\n\n- Register scene index plugin to perform light linking when the light linking \n  collections are transported. For legacy clients (e.g. UsdImagingDelegate) that \n  don't transport collections, light linking is performed at the scene delegate \n  end and this scene index should not affect that behavior.\n\n- Improved determination of the display driver to factor the product type.\n\n- Renamed rtx_glfImage to rtx_hioImage.\n\n- Added RMAN_DISPLAYPATH environment variable to populate 3rd-party RenderMan \n  display driver search paths.\n\n- Added HDPRMAN_TESSELLATE_IMPLICIT_SURFACES environment variable to make \n  hdPrman tessellated implicit surfaces into meshes rather than use builtin \n  representations.\n\n- PxrPathTracer support for purpose-based visibility has been temporarily \n  removed, as it could cause unexpected problems for lights. An improved \n  approach to this feature is now available via PbsPathTracer and will be \n  applied to PxrPathTracer in a future release of RenderMan.\n\n### MaterialX\n\n- Added support for MaterialX v1.38.10.\n\n- Added the ability to control Dome Light intensity with MaterialX materials.\n\n- Fixed MaterialX shader generation for simple surface shaders like \n  ND_convert_color3_surfaceshader.\n  (PR: [#3045](https://github.com/PixarAnimationStudios/OpenUSD/pull/3045))\n\n- Added traces to hdMtlx.\n  (PR: [#2665](https://github.com/PixarAnimationStudios/OpenUSD/pull/2665))\n\n- Fixed MaterialX shader objects getting garbage collected too early.\n  (PR: [#3051](https://github.com/PixarAnimationStudios/OpenUSD/pull/3051))\n\n- Fixed MaterialX material tag detection for glTF PBR.\n  (Issue: [#1882](https://github.com/PixarAnimationStudios/OpenUSD/issues/1882),\n   PR: [#3069](https://github.com/PixarAnimationStudios/OpenUSD/pull/3069))\n\n- Optimized MaterialX shader generation and reuse; improved material tag \n  detection; added support for triplanar texture nodes.\n  (Issue: [#2330](https://github.com/PixarAnimationStudios/OpenUSD/issues/2330), \n   [#3004](https://github.com/PixarAnimationStudios/OpenUSD/issues/3004), \n   PR: [#3073](https://github.com/PixarAnimationStudios/OpenUSD/pull/3073))\n\n### usdrecord\n\n- Updated to support specifying an active render pass, which is set in \n  HdsiSceneGlobalSceneIndex for use within Hydra.\n\n- Updated to use the startTimeCode from the USD stage as the default \n  time code.\n\n- Changed default dome light camera visibility to false, and added an \n  \"--enableDomeLightVisibility\" flag.\n  (PR: [#2352](https://github.com/PixarAnimationStudios/OpenUSD/pull/2352))\n\n### usdview \n\n- Added the 'bboxStandin' command line argument to allow for unloaded prims to \n  be displayed by their bounding boxes.\n  (Issue: [#2720](https://github.com/PixarAnimationStudios/OpenUSD/issues/2720))\n\n- Added workaround for issue in PySide that can cause the viewport to \n  render incorrectly.\n  (Issue: [#2996](https://github.com/PixarAnimationStudios/OpenUSD/issues/2996), \n   [#3009](https://github.com/PixarAnimationStudios/OpenUSD/issues/3009))\n\n- Added a keyboard shortcut (Ctrl + Shift + R) to reload stage.\n\n- Refactored Usdviewq.Launcher to make it easier to extend, e.g. by testusdview.\n\n- Fixed a bug in layer stack view when the root layer stack contained both muted \n  and unloaded sublayers.\n\n- Fixed an issue where the OCIO menus would occasionally select an invalid \n  colorspace, for certain OCIO configurations.\n  (PR: [#3017](https://github.com/PixarAnimationStudios/OpenUSD/pull/3017))\n\n### Documentation\n\n- Added infrastructure and [usdVol example content](https://openusd.org/release/user_guides/schemas/usdVol/usdVol_toc.html)\n  for a new schema user documentation process. User documentation can be added \n  to schema definition files, using Markdown format. User documentation will be \n  processed by usdGenSchema and added to the schema registry. User documentation \n  can also be generated into HTML output using a script that generates \n  Sphinx-compatible content files. See \"Generating Schema User Docs\" in \n  docs/README.md for more details. \n\n- Added new [testing guidelines](https://openusd.org/release/api/_page__testing__guidelines.html) \n  and [code guidelines](https://openusd.org/release/api/_page__coding__guidelines.html) \n  to documentation.\n\n- Added new [Collections and Patterns](https://openusd.org/release/user_guides/collections_and_patterns.html) \n  user guide to documentation.\n\n- Made clarifications to Hydra 2.0 Getting Started Guide.\n\n- Revised UsdCollectionAPI documentation to explain what makes an instance be\n  in relationship-mode vs expression-mode, and how the built-in properties \n  affect membership determination in each mode.\n \n\n## [24.05] - 2024-04-19\n\n### Build\n\n- Various fixes and changes to build_usd.py:\n  - Added change to explicitly specify C++17 when building boost on macOS to \n    avoid issues with newer Xcode toolchain versions. \n    (PR: [#2868](https://github.com/PixarAnimationStudios/OpenUSD/pull/2868))\n  - Added change to download AnimX from a fixed location.\n    (PR: [#2938](https://github.com/PixarAnimationStudios/OpenUSD/pull/2938))\n  - Fixed toolchain detection when using Microsoft Build Tools.\n    (PR: [#2220](https://github.com/PixarAnimationStudios/OpenUSD/pull/2220))\n  - Updated OpenSubdiv build configuration to disable support for GL on Apple \n    operating systems.\n  - Updated builds on MacOS to now use boost 1.82.0 to support newer versions \n    of Xcode.\n  - Updated MaterialX to 1.38.8.\n\n- Improved Vulkan build support.\n  (PR: [#2735](https://github.com/PixarAnimationStudios/OpenUSD/pull/2735))\n\n- Fixed a build issue in sdrOsl plugin when building against an OSL build that \n  uses Imath instead of IlmBase. \n  (Issue: [#2977](https://github.com/PixarAnimationStudios/OpenUSD/issues/2977),\n   PR: [#2604](https://github.com/PixarAnimationStudios/OpenUSD/pull/2604))\n\n- Cleaned up unnecessary uses of CREATE_FRAMEWORK in various libraries. \n  (PR: [#2953](https://github.com/PixarAnimationStudios/OpenUSD/pull/2953))    \n\n- Added initial support for iOS and other Apple embedded operating systems.\n  (PR: [#2949](https://github.com/PixarAnimationStudios/OpenUSD/pull/2949))\n\n- Updated pxOsd to link only with CPU OSD libraries.\n \n### USD\n\n- Initial work on adding relocates to USD in support of non-destructive\n  namespace editing of objects that are defined across composition arcs in \n  remote layerStacks. This is a work-in-progress, future releases will \n  provide more complete functionality and documentation. \n\n- Fixed issue that prevented processes from having different release versions \n  of the USD libraries loaded at the same time.\n  (PR: [#2861](https://github.com/PixarAnimationStudios/OpenUSD/pull/2861))\n\n- We now default to measurement based computation of NanosecondsPerTick when \n  CNTFRQ_EL0 is unreliable for arch platforms.\n  (PR: [#2929](https://github.com/PixarAnimationStudios/OpenUSD/pull/2929))\n\n- Reduced memory usage associated with specializes arcs in composition. In one \n  production test case that makes heavy use of specializes, memory use decreased \n  from 2.2 GB to 1.4 GB, a 36% improvement.\n\n- Added PythonGarbageCollectionCallback callback for tracing Python garbage \n  collection, using Trace.Collection.\n\n- Support for URI schemes in Ar URI resolvers that do not conform to RFC2396 is\n  deprecated. This support and the `PXR_AR_DISABLE_STRICT_SCHEME_VALIDATION`\n  environment variable will be removed in a subsequent release.\n\t\n- Added ArGetRegisteredURISchemes() function for retrieving the list of URI \n  schemes for which resolvers are registered.\n\n- Updated the implementation of ArDefaultResolver::SetDefaultSearchPath to \n  trigger ArNotice::ResolverChanged notifications when the search path is \n  updated.\n  (Issue: [#2925](https://github.com/PixarAnimationStudios/OpenUSD/issues/2925))\n\n- Various fixes and changes to support Boost dependency removal\n  - Replaced `boost::intrusive_ptr` with `TfDelegatedCountPtr`.\n    (PR: [#2891](https://github.com/PixarAnimationStudios/OpenUSD/pull/2891),\n     [#2892](https://github.com/PixarAnimationStudios/OpenUSD/pull/2892), \n     [#2893](https://github.com/PixarAnimationStudios/OpenUSD/pull/2893),\n     [#2894](https://github.com/PixarAnimationStudios/OpenUSD/pull/2894),\n     [#2895](https://github.com/PixarAnimationStudios/OpenUSD/pull/2895),\n     [#2896](https://github.com/PixarAnimationStudios/OpenUSD/pull/2896),\n     [#2897](https://github.com/PixarAnimationStudios/OpenUSD/pull/2897),\n     [#2917](https://github.com/PixarAnimationStudios/OpenUSD/pull/2917))\n  - Added gf/numericCast.h and replaced uses of boost::numeric_cast.\n  - Removed unused boost preprocessorUtils.\n    (Issue: [#2225](https://github.com/PixarAnimationStudios/OpenUSD/issues/2225))\n\n- Fixed a bug calculating umask in certain cases when creating USD files.\n  (PR: [#2933](https://github.com/PixarAnimationStudios/OpenUSD/pull/2933))\n\n- Fixed a bug where an incorrect bounds calculation could lead to a possible \n  buffer overflow when writing .usdc files.\n  (PR: [#2631](https://github.com/PixarAnimationStudios/OpenUSD/pull/2631))\n\n- Fixed an SdfPathExpression parser bug that incorrectly rejected namespaced \n  property names.\n\n- Fixed an SdfPathExpression evaluator bug where patterns that end in `//` did \n  not always correctly report constancy over descendants.\n\n- Removed the requirement to provide an object-to-path function in \n  SdfPathExpression evaluator.\n\n- Added the ability for file format implementations to distinguish \"Save\" \n  operations that update the layer's backing store from \"Export\" operations that \n  write the layer's data to an independent asset, via a new optional virtual \n  function SdfFileFormat::SaveToFile().\n\n- Changed .usdc file output to properly use Ar 2.0 API in conjunction with \n  implementing SdfFileFormat::SaveToFile in UsdUsdFileFormat and \n  UsdUsdcFileFormat so we can reliably detect \"Export\" operations. Enabled the \n  testUsdFileFormats_asset test on Windows now that this is fixed.\n  (Issue: [#2773](https://github.com/PixarAnimationStudios/OpenUSD/issues/2773))\n\n- Added cast-to-bool null check for pxr.Pcp.NodeRef and graceful handling of \n  calling methods on null pxr.Pcp.NodeRef.\n  (PR: [#2943](https://github.com/PixarAnimationStudios/OpenUSD/pull/2943))\n\n- Fixed a bug where attributes authored in variants were ignored when processing \n  dynamic file formats.\n\n- Fixed a bug where ancestral payloads of internal subroot reference paths were \n  not always being loaded.\n\n- Improved performance when adding or removing sublayers to a stage with many \n  prims.\n  (PR: [#2937](https://github.com/PixarAnimationStudios/OpenUSD/pull/2937))\n\n- Restored behavior of dependency analysis functions to recursively analyze \n  existing .usdz archives, allowing for discovery of assets in archives which \n  are not self contained.\n  (Issue: [#2636](https://github.com/PixarAnimationStudios/OpenUSD/issues/2636),\n   PR: [#2637](https://github.com/PixarAnimationStudios/OpenUSD/pull/2637))\n\n- Updated UsdRenderComputeSpec() to treat attribute connections as stronger than \n  local attribute values, consistent with UsdShade conventions. It also strips \n  out the `outputs:` prefix where present so that callers no longer need to \n  include it with requested namespaces.\n\n- Updated UsdRenderSpecComputeNamespacedSettings() to only collect attributes \n  that exist in a namespace. If specific namespaces are provided, only those are\n  used; if none are provided, any namespace is accepted.\n\n- Added GetSourceTypes function to UsdShadeNodeDefAPI and UsdShadeShader to\n  retrieve all source types for both sourceCode and sourceAsset implementations.\n\n- Updated UsdShadeShaderDefParser to always add sdrUsdDefinitionType metadata \n  for all sdrShaderProperties. This is important to maintain SdfValueTypeName \n  round-tripping for shader specs represented by UsdShadeShaderDefs. For \n  example, previously \"token\" property types in the USD shader spec were \n  reported as \"string\" from sdrProperty::GetTypeAsSdfType.  \n\n- Added UsdGeomTetMesh::FindInvertedElements to detect inverted tetrahedral \n  elements with respect to its orientation attribute.\n\n- Updated UsdGeomBoundable::ComputeExtent API for const correctness.\n\n### Hydra\n\n- **Important**: Removed HD_USE_DEPRECATED_INSTANCER_PRIMVAR_NAMES. In 23.11, \n  we introduced new names for the internal instancer primvars Hydra uses for \n  instance transforms. The rename was important to avoid accidental collisions \n  between custom authored primvars and the internal ones. At the same time, we \n  introduced the HD_USE_DEPRECATED_INSTANCER_PRIMVAR_NAMES option to allow \n  authors of Hydra render delegates time to update their implementations. We \n  announced that the setting would be removed in 24.05. Render delegate authors \n  who need more time to update their code should not adopt 24.05 until they have \n  completed the transition.\n\n- Added HdGpGenerativeProceduralFilteringSceneIndex, which filters Hydra \n  procedural prims against a list of allowed procedural types. Skipped \n  procedurals have their primType changed to skippedHydraGenerativeProcedural, \n  keeping them from being evaluated by a subsequent Resolving index but \n  otherwise leaving them intact.\n\n- Adjusted the order of how scene index plugins concatenate, making phase the \n  most significant ordinal component. Previously, all renderer-agnostic phases \n  were first appended, followed by all renderer-specific phases. As a result\n  there was no way for a renderer-specific plugin to run before a \n  renderer-agnostic one, regardless of their relative phase.\n\n- HdImageShader now supports having an associated material network.\n\n- Added support for motion blur in pinned basis curves by updating \n  functionality for respective scene index plugin.\n\n- Hydra schema generation tool hdGenSchema.py is now available.\n\n- Various Hydra schema clean-up changes: made getter's const, deprecated \n  BuildRetained (unless schema has \"GENERIC_MEMBER\" in hdSchemaDefs.py), added\n  consistent capitalization (in, e.g., UsdImagingGeomModelSchema token data \n  source builders).\n\n- Fixed memory corruption on macOS when using HgiMetal in an external project \n  whose automatic reference counting (ARC) setting differed from the setting \n  used when building OpenUSD.\n\n- Added predicate library and path expression evaluator to evaluate \n  SdfPathExpression-style queries on prims in a scene index.\n\n- Added schemata to represent collections. A collection has a name and path \n  expression, allowing scene indices to implement membership-based behavior \n  using the HdCollectionExpressionEvaluator.\n\n- Fixed a potential crash when updating skinned primitives.\n  (PR: [#2931](https://github.com/PixarAnimationStudios/OpenUSD/pull/2931))\n\n- Added Hydra2 support for geom subsets (also added to UsdImaging2).\n\n### UsdImaging\n\n- **Important**: Made changes to make adapter hijacking more transparent. \n  Delegate queries for information about prims whose adapters are masked by the \n  instancing and draw mode adapters will no longer fail when made during prim \n  insertion. Note that the following methods of the UsdimagingPrimAdapter API \n  are no longer const-qualified. Authors of custom prim adapters that override \n  these methods will need to remove the const qualifier:\n    * GetExtComputationInput\n    * GetExtComputationInputs\n    * GetExtComputationPrimvars\n    * TrackVariability\n\n- Added support for light filters in scene index mode. Note that light filter \n  linking is not yet implemented.\n\n- Added support for \"orientationsf\" attribute on UsdGeomPointInstancer. \n  (Issue: [#2529](https://github.com/PixarAnimationStudios/OpenUSD/issues/2529))\n\n- Added Hydra 2.0 imaging support for UsdGeomTetMesh.\n  \n- Fixed a bug in UsdImagingCoordSysAdapter where transform variability was \n  marking the wrong dirty bit.\n\n- Improved draw mode support in UsdImaging 2.0.\n\n- Updated \"wrapS\" and \"wrapT\" shader properties to be of token types for \n  UsdUVTexture OSL shader spec, to conform to UsdShadeShaderDef specification.\n\n### Storm\n\n- Added bits to HdBufferArrayUsageHint to convey whether the associated buffer \n  should be used as an SSBO, UBO, etc., allowing for more precise specification \n  of the HgiBufferUsage during buffer array allocation.\n\n- Added support for interpolation/storage qualifiers on shader block members.\n  (PR: [#2493](https://github.com/PixarAnimationStudios/OpenUSD/pull/2493))\n\n- Disabled alpha to coverage for id renders, fixing id rendering for HgiVulkan.\n\n- Fixed HgiVulkanBlitCmds::CopyTextureGpuToCpu such that it copies the depth \n  aspect when provided a depth-stencil texture.\n  (PR: [#2852](https://github.com/PixarAnimationStudios/OpenUSD/pull/2852))\n\n- HdStResourceRegistry now supports the notion of a sub-resource registry. A \n  sub-resource registry is an additional HdResourceRegistry defined externally \n  that can manage resources whose definitions and implementations are not known \n  to HdStResourceRegistry, but whose lifetime is tied to an \n  HdStResourceRegistry. HdStResourceRegistry will invoke Commit and \n  GarbageCollect on any sub-resource registries it has ownership of whenever \n  those functions are invoked on it.\n\n- Added support for primvars with the same name but different types in\n  HdStInstancer.\n  (Issue: [#2529](https://github.com/PixarAnimationStudios/OpenUSD/issues/2529))\n\n- Fixed a Metal API validation error that could occur when using tessellation \n  with MSAA.\n  (PR: [#2949](https://github.com/PixarAnimationStudios/OpenUSD/pull/2561))\n\n- Fixed shader code gen of primvar accessor methods to work correctly when a \n  shader parameter has the same name as a primvar.\n  (PR: [#2789](https://github.com/PixarAnimationStudios/OpenUSD/pull/2789))\n\n- Improved draw batch aggregation to reduce draw times when using GL indirect \n  draw batches for drawing scenes with a high ratio of textures to drawn \n  geometry such as can occur when drawing geometry as texture card proxies.\n\n- Improved performance of HgiGL buffer allocation to skip unneeded mapping of \n  buffers designated for use as storage buffers.\n\n### RenderMan Hydra Plugin\n\n- **Important**: Removed hdPrman for RenderMan 24. This was deprecated in \n  USD 23.11\n\n- Updated usdRiPxr codeless schemas with updated concepts from \n  RenderMan 25 (Feb 2024)\n\n- Updated the d_openexr display driver by providing a default value for the \n  parameter `asrgba` of 1.0, matching the default specified in d_openexr.args in \n  RenderMan. This ensures that exr's produced by RenderMan better conform to EXR \n  conventions.\n\n- Updated interactive mode to avoid interactive renders from halting \n  prematurely, by only filtering options that make sense for batch renders, \n  such as `exitat`.\n\n- Updated rendering progress by emitting classic RenderMan-style percentage \n  progress to the terminal during batch renders.\n\n- Updated HdPrman to add support for ad hoc EXR metadata coming from USD, in the \n  form of `ri:exrheader:namespace:name` attributes. This is mapped to \n  \"namespace/name\".\n\n- Fixed a bug where MaterialX shaders were not correctly generated when an \n  upstream node was both part of a pattern network and also directly connected \n  to the terminal node.\n\n- Updated the render delegate to include the default paths for the various \n  search paths, even if the override environment variable path \n  (e.g. RMAN_SHADERPATH) does not include it.\n\n- Added support for UsdGeomTetMesh.\n\n- Added support for camera parameters such as `shutterOpenTime`, \n  `shutteropening`, and `apertureNSides`.\n\n### MaterialX \n\n- **Important**: The minimum supported version of MaterialX is now 1.38.8. \n  Support for older versions of MaterialX has been removed.\n\n### Alembic plugin\n\n- We now use \"DCCFPS\" metadata to set the timeCodesPerSecond value in Alembic \n  reader code.\n  (PR: [#2944](https://github.com/PixarAnimationStudios/OpenUSD/pull/2944))\n\n### usdchecker\n\n- Added ShaderPropertyTypeConformanceChecker to ComplianceChecker for validating \n  attribute types on shaders.\n  (Issue: [#2729](https://github.com/PixarAnimationStudios/OpenUSD/issues/2729))\n\n### usdrecord\n\n- Added a --renderPassPrimPath argument.\n\n- Updated --disableCameraLight option to prevent the default camera light from \n  being inserted into the scene.\n\n- Added support for motion blur (need to use a valid render settings prim, and \n  indicate a frame number).\n\n### Documentation\n\n- Added Hydra developer documentation, including a \"Hydra 2.0 Getting Started \n  Guide\". See \"Hydra Guides\" listed on this page: \n  https://openusd.org/release/api/_developer__guides.html \n\n- Added \"MaterialX In Hydra and USD Architecture Guide\", see: \n  https://openusd.org/release/api/_page__material_x__in__hydra__u_s_d.html\n\n- Added \"Namespace Editing User Guide\", see: \n  https://openusd.org/release/user_guides/namespace_editing.html\n\n- Added documentation for USD_DEFAULT_FILE_FORMAT\n  (Issue: [#2922](https://github.com/PixarAnimationStudios/USD/issues/2922),\n   PR: [#2924](https://github.com/PixarAnimationStudios/OpenUSD/pull/2924))\n\n- Various documentation fixes and updates.\n  - General fixes.\n    (PR: [#2974](https://github.com/PixarAnimationStudios/OpenUSD/pull/2974))\n  - Added some additional documentation for using Vulkan.\n\n## [24.03] - 2024-02-23\n\n### Build\n\n- Added support for Python 3.11. \n  (PR: [#2742](https://github.com/PixarAnimationStudios/OpenUSD/pull/2742))\n\n- Various fixes and changes to build_usd.py:\n  - Updated OpenSubdiv version to 3.6.0.\n  - --ignore-paths and --ignore-homebrew options added to command line to help \n    solve problems where CMake picks up unwanted sources for dependencies. \n    (PR: [#2873](https://github.com/PixarAnimationStudios/OpenUSD/pull/2873))\n  - Fixed build issue with boost on macOS with Xcode 15.3+.\n    (PR: [#2919](https://github.com/PixarAnimationStudios/OpenUSD/pull/2919))\n\n- Builds on macOS now avoid hard-coding specific SDK versions for system library \n  dependencies. \n  (Issue: [#2771](https://github.com/PixarAnimationStudios/OpenUSD/issues/2771), \n   PR: [#2772](https://github.com/PixarAnimationStudios/OpenUSD/pull/2772))\n\n- Updated CMakeLists for usdImaging tools (usdrecord and usdBakeMtlx) to skip \n  building if GPU and/or OpenGL are unavailable. \n  (PR: [#2468](https://github.com/PixarAnimationStudios/OpenUSD/pull/2468))\n\n- CMake fixes to find OpenImageIO and OpenEXR when building for debug. \n  (PR: [#2079](https://github.com/PixarAnimationStudios/OpenUSD/pull/2079))\n\n- Made build of extras/imaging/examples conditional on PXR_BUILD_EXAMPLES.\n  (PR: [#2630](https://github.com/PixarAnimationStudios/OpenUSD/pull/2630))\n\n- Improved error message when uic is not found during the build. \n  (Issue: [#2582](https://github.com/PixarAnimationStudios/OpenUSD/issues/2582))\n\n### USD\n\n- Added support for Unicode identifiers. UTF-8 encoded characters may now be \n  used in prim, property, and variant names, and dictionary keys. Support for \n  serializing these identifiers has been added to the .usda and .usdc (crate) \n  file formats. Note that files containing UTF-8 identifiers are not \n  backwards-compatible with older versions of OpenUSD. See the \n  [proposals](https://github.com/PixarAnimationStudios/OpenUSD-proposals/tree/main/proposals/tf_utf8_identifiers) \n  page for more details. \n  (PR: [#2378](https://github.com/PixarAnimationStudios/OpenUSD/pull/2378), \n   [#2673](https://github.com/PixarAnimationStudios/OpenUSD/pull/2673), \n   [#2751](https://github.com/PixarAnimationStudios/OpenUSD/pull/2751),\n   [#2788](https://github.com/PixarAnimationStudios/OpenUSD/pull/2788), \n   [#2830](https://github.com/PixarAnimationStudios/OpenUSD/pull/2830), \n   [#2848](https://github.com/PixarAnimationStudios/OpenUSD/pull/2848),\n   [#2855](https://github.com/PixarAnimationStudios/OpenUSD/pull/2855), \n   [#2856](https://github.com/PixarAnimationStudios/OpenUSD/pull/2856),\n   [#2857](https://github.com/PixarAnimationStudios/OpenUSD/pull/2857),\n   [#2858](https://github.com/PixarAnimationStudios/OpenUSD/pull/2858), \n   [#2867](https://github.com/PixarAnimationStudios/OpenUSD/pull/2867), \n   [#2883](https://github.com/PixarAnimationStudios/OpenUSD/pull/2883), \n   [#2888](https://github.com/PixarAnimationStudios/OpenUSD/pull/2888),\n   [#2889](https://github.com/PixarAnimationStudios/OpenUSD/pull/2889),\n   [#2890](https://github.com/PixarAnimationStudios/OpenUSD/pull/2890),\n   [#2906](https://github.com/PixarAnimationStudios/OpenUSD/pull/2906)) \n\n- Added initial version of Ts library. This will be the open-source version of \n  Presto's libAnim. It implements animation splines. For details, see the \n  [Spline Animation proposal](https://github.com/PixarAnimationStudios/OpenUSD-proposals/blob/main/proposals/spline-animation/README.md).\n  This version builds, but isn't used by anything yet. It's a first milestone \n  that will allow us to begin co-developing with external partners and \n  collecting public feedback. Much work remains, see ts/README.md for a rough \n  list of tasks.\n\n- Add initial version of UsdNamespaceEditor. This object supports basic prim and \n  property edits, with property target path fixing, in the local layer stack \n  only. This is a work-in-progress, future releases will provide more complete \n  functionality and documentation.\n\n- Fixed broken validation of allowed characters in Ar URI resolver schemes. \n  (PR: [#2859](https://github.com/PixarAnimationStudios/OpenUSD/pull/2859))\n\n- Refactored Arch_ComputeNanosecondsPerTick to empirically calculate nanoseconds \n  per tick.\n  (Issue: [#2719](https://github.com/PixarAnimationStudios/OpenUSD/issues/2719))\n\n- Added thread-safety, size, and performance improvements to TfRefBase, \n  TfRefPtr, and TfToken.\n\n- Updated DoubleConversion version to v3.3.0 in Tf. \n  (Issue: [#2218](https://github.com/PixarAnimationStudios/OpenUSD/issues/2218))\n\n- Fixed bugs not properly decrementing Python exception state reference counts,\n  and not properly saving/restoring exception state in some corner cases.\n\n- Added workaround for \"insufficient permissions\" errors that occurred on \n  Windows when saving files to a network drive. By default, filesystem \n  permissions are no longer checked before saving files on Windows. This avoids \n  cases where permissions are incorrectly reported by the system. On Linux and \n  macOS permissions are still checked, maintaining previous behavior.\n  This behavior can be overridden by setting the environment variable\n  `TF_REQUIRE_FILESYSTEM_WRITE_PERMISSION`. This setting defaults to\n  `true` on Linux and macOS, and `false` on Windows.\n  (Issue: [#849](https://github.com/PixarAnimationStudios/OpenUSD/issues/849))\n\n- Fixed Python DLL loading order on Windows\n  (PR: [#2595](https://github.com/PixarAnimationStudios/OpenUSD/pull/2595))\n\n- Numerous changes to remove boost usage. \n  (PR: [#2353](https://github.com/PixarAnimationStudios/OpenUSD/pull/2353), \n   [#2681](https://github.com/PixarAnimationStudios/OpenUSD/pull/2681), \n   [#2682](https://github.com/PixarAnimationStudios/OpenUSD/pull/2682), \n   [#2684](https://github.com/PixarAnimationStudios/OpenUSD/pull/2684),\n   [#2701](https://github.com/PixarAnimationStudios/OpenUSD/pull/2701), \n   [#2707](https://github.com/PixarAnimationStudios/OpenUSD/pull/2707), \n   [#2709](https://github.com/PixarAnimationStudios/OpenUSD/pull/2709), \n   [#2711](https://github.com/PixarAnimationStudios/OpenUSD/pull/2711), \n   [#2714](https://github.com/PixarAnimationStudios/OpenUSD/pull/2714),\n   [#2715](https://github.com/PixarAnimationStudios/OpenUSD/pull/2715), \n   [#2718](https://github.com/PixarAnimationStudios/OpenUSD/pull/2718), \n   [#2748](https://github.com/PixarAnimationStudios/OpenUSD/pull/2748), \n   [#2750](https://github.com/PixarAnimationStudios/OpenUSD/pull/2750), \n   [#2752](https://github.com/PixarAnimationStudios/OpenUSD/pull/2752), \n   [#2754](https://github.com/PixarAnimationStudios/OpenUSD/pull/2754), \n   [#2761](https://github.com/PixarAnimationStudios/OpenUSD/pull/2761), \n   [#2763](https://github.com/PixarAnimationStudios/OpenUSD/pull/2763), \n   [#2764](https://github.com/PixarAnimationStudios/OpenUSD/pull/2764), \n   [#2765](https://github.com/PixarAnimationStudios/OpenUSD/pull/2765), \n   [#2778](https://github.com/PixarAnimationStudios/OpenUSD/pull/2778), \n   [#2781](https://github.com/PixarAnimationStudios/OpenUSD/pull/2781), \n   [#2785](https://github.com/PixarAnimationStudios/OpenUSD/pull/2785), \n   [#2786](https://github.com/PixarAnimationStudios/OpenUSD/pull/2786), \n   [#2802](https://github.com/PixarAnimationStudios/OpenUSD/pull/2802), \n   [#2810](https://github.com/PixarAnimationStudios/OpenUSD/pull/2810),\n   [#2811](https://github.com/PixarAnimationStudios/OpenUSD/pull/2811), \n   [#2823](https://github.com/PixarAnimationStudios/OpenUSD/pull/2823), \n   [#2831](https://github.com/PixarAnimationStudios/OpenUSD/pull/2831), \n   [#2833](https://github.com/PixarAnimationStudios/OpenUSD/pull/2833), \n   [#2834](https://github.com/PixarAnimationStudios/OpenUSD/pull/2834), \n   [#2835](https://github.com/PixarAnimationStudios/OpenUSD/pull/2835), \n   [#2842](https://github.com/PixarAnimationStudios/OpenUSD/pull/2842), \n   [#2843](https://github.com/PixarAnimationStudios/OpenUSD/pull/2843), \n   [#2864](https://github.com/PixarAnimationStudios/OpenUSD/pull/2864), \n   [#2874](https://github.com/PixarAnimationStudios/OpenUSD/pull/2874))\n\n- Various fixes and changes for SdfPathExpression:\n  - Fixed a bug in the SdfPathExpression parser: only allow the pattern chars \n    '-', '!', and ']' once an initial '[' has been seen. Previously a case like\n    /foo//-/foo/bar// which should parse as a set-difference ('/foo// -\n    /foo/bar//') would parse as a single path pattern with a '-' element.\n  - Fixed a bug where SdfPathExpression was searching for wildcard matches \n    anywhere in path components rather than matching components in full.\n  - Fixed logic bugs in the incremental search implementation for\n    SdfPathExpressionEval. Added debug output, and improved test coverage for\n    incremental searches in testSdfPathExpression.\n  - Fixed a bug where SdfPathExpression evaluation would incorrectly report a\n    constant false when the query path was a prefix of a pattern prefix.\n  - Added compile-time-enabled TF_DEBUG code for SdfPathExpressionEval.\n\n- SdfChangeList now provides a more precise list of layer edits.\n  - Changes to composition-related fields like \"references\" and \"inherits\" are \n    now listed as info changes so they can be handled generically. \n  - Some changes are now split into multiple entries for the same prim or \n    property when needed to provide clients an unambiguous order of operations.\n  - The previous path for re-parented prims is now captured. \n\n- Added exception throwing and handling to avoid corrupted file reads during \n  SdfLayer setup. \n  (PR: [#2552](https://github.com/PixarAnimationStudios/OpenUSD/pull/2552))\n\n- Ensured that SdfAbstractData::HasDictKey returns false if the provided value's \n  type does not match the valueType. \n\n- Fixed bug in SdfBatchNamespaceEdit where certain sequences of operations would \n  erroneously be flagged as invalid.\n\n- Initial work on reimplementing the .usda parser to remove dependencies on flex \n  and bison.\n  (PR: [#2822](https://github.com/PixarAnimationStudios/OpenUSD/pull/2822), \n   [#2819](https://github.com/PixarAnimationStudios/OpenUSD/pull/2819))\n\n- Fixed an issue in SdfAssetPath::_ReadUTF8 where certain multibyte unicode \n  characters would not be decoded correctly.\n  (Issue: [#2560](https://github.com/PixarAnimationStudios/OpenUSD/issues/2560))\n\n- Increased default version for newly created crate files to 0.9.0.\n  (PR: [#2838](https://github.com/PixarAnimationStudios/OpenUSD/pull/2838))\n\n- Updated SdrShaderProperty to support int2, int3, and int4, which conforms to\n  SdfValueTypeNamess->int2, SdfValueTypeNames->int3, SdfValueTypeNames->int4. \n  Users do not have to specify sdrUsdDefinitionType for int2, int3, and int4 \n  SdrShaderProperties now.\n\n- Added the ability to pass a traversal predicate to UsdStage attribute \n  connection/relationship target finders, and UsdStage::ExpandPopulationMask().\n\n- Made \"kind\" a disallowed field for metadata in schemas.\n\n- Changed UsdCollectionMembershipQuery behavior to use either the path expansion\n  rule map form, or the membership expression form, preferring the rule map form\n  if authored. Provided a way for callers to determine whether or not the\n  expression form was used to match. Also fixed some API export tag names.\n\n- UsdFlattenLayerStack now handles add/reorder statements as described in the \n  docs for the case where there's only one opinion.\n\n- Added guard to gracefully handle NULL stage pointers.\n  (Issue: [#2721](https://github.com/PixarAnimationStudios/OpenUSD/issues/2721))\n\n- Fixed unnecessary VtArray copy-on-writes during attribute creation. \n  (PR: [#2816](https://github.com/PixarAnimationStudios/OpenUSD/pull/2816))\n\n- Validate UsdCollectionAPI before accessing in \n  UsdShadeMaterialBindingAPI::ComputeBoundMaterial.\n  (PR: [#2501](https://github.com/PixarAnimationStudios/OpenUSD/pull/2501))\n\n- Improved performance for computing variant selections during prim composition. \n  For example, in a synthetic test case involving a prim with 1000 references, \n  adding 500 variant sets to that prim previously took ~25.5 seconds; it now \n  takes ~6.8 seconds. \n  (Issue: [#1957](https://github.com/PixarAnimationStudios/OpenUSD/issues/1957), \n   [#2010](https://github.com/PixarAnimationStudios/OpenUSD/issues/2010))\n\n- Fixed bug where variant selections authored at implied sites would be ignored \n  when composing prims with composition arcs pointing to subroot prims.\n\n- Fixed bug where incorrect sites would be checked for opinions during dynamic \n  payload argument composition.\n\n- Fixed bug where the wrong inclusion state for ancestral payloads would be \n  computed when composing prims with composition arcs pointing to subroot prims.\n\n- Fixed bugs in UsdInherits::GetAllDirectInherits where the results would be \n  incomplete or include paths in non-local layer stacks.\n\n- Added UsdGeomTetMesh schema.\n\n- Added support for elementTypes \"point\", \"edge\", and \"tetrahedron\" in \n  UsdGeomSubset.\n\n- Added single precision `orientationsf` to UsdGeomPointInstancer, which, if \n  authored, takes precedence over half-precision `orientations`.\n  (Issue: [#2529](https://github.com/PixarAnimationStudios/OpenUSD/issues/2529))\n\n- Deprecated UsdGeomSubset::ValidateSubsets in favor of ValidateFamily.\n\n- Added change to avoid de-referencing iterators of an empty set when validating \n  UsdGeomSubset families with no indices.\n  (PR: [#2733](https://github.com/PixarAnimationStudios/OpenUSD/pull/2733))\n\n- Updated UsdGeomPrimvar::ComputeFlattened() to consider elementSize.\n\n- Added a null pointer check in UsdGeomBBoxCache::_Resolve. This brings behavior \n  in line with other UsdGeomBBoxCache operations and prevents crashing in \n  certain multi-threaded situations. \n  (PR: [#2905](https://github.com/PixarAnimationStudios/OpenUSD/pull/2905))\n\n- Improved the UsdObj handling of .obj files with 'g' statements. \n  (PR: [#2092](https://github.com/PixarAnimationStudios/OpenUSD/pull/2092))\n\n- Updated usdRiPxr codeless schemas with updated concepts from RenderMan 25.\n\n- Updated UsdShadeOutput::GetAttr to return const reference for consistency. \n  (Issue: [#2617](https://github.com/PixarAnimationStudios/OpenUSD/issues/2617))\n\n- Updated UsdShadeOutput::IsOutput to check attribute validity, to match\n  UsdShadeInput::IsInput behavior.\n  (Issue: [#2876](https://github.com/PixarAnimationStudios/OpenUSD/issues/2876),\n   PR: [#2877](https://github.com/PixarAnimationStudios/OpenUSD/pull/2877))\n\n- Added a new method UsdUtilsLocalizeAsset which will localize an asset to a \n  directory on disk. It also introduces the concept of a user processing \n  function which allows users to provide a function which can modify asset paths \n  and dependencies while leveraging built in asset discovery and traversal code.\n\n- Added an optional UsdUtilsProcessingFunc parameter to \n  UsdUtilsComputeAllDependencies. This allows users to inject custom logic into \n  asset discovery.\n\n- Updated NormalMapTextureChecker to use GetValueProducingAttributes.\n  (PR: [#2885](https://github.com/PixarAnimationStudios/OpenUSD/pull/2885))\n\n- Updated ARKit conformance checks to match spec from WWDC 2023.\n  (https://developer.apple.com/documentation/realitykit/validating-usd-files)\n  (PR: [#2863](https://github.com/PixarAnimationStudios/OpenUSD/pull/2863),\n   [#2875](https://github.com/PixarAnimationStudios/OpenUSD/pull/2875))\n\n### UsdImaging\n\n- Replaced use of GetValueProducingAttribute() API, which had been deprecated\n  and was emitting warnings.\n\n- Added imaging support for UsdGeomTetMesh in Hydra 1.0.\n\n- Added support for Material Nodegraph edits when using the stage SceneIndex.\n\n- Added DataSourceAttributeColorSpace to lazily populate the color space \n  metadata in Hydra 2.0.\n\n- Added forceDirtyingTimeDeps flag to UsdImagingStageSceneIndex::SetTime(). This \n  can be used to force render delegates into resampling all primvars in response \n  to, e.g., the camera and thus the shutter interval changing.\n\n- Fixed a bug where time-sampled attributes on lights, light filters, and \n  cameras were not detected as time-varying. \n  (PR: [#2734](https://github.com/PixarAnimationStudios/OpenUSD/pull/2734))\n\n- Added support for asynchronous Hydra processing in UsdImagingGLEngine and \n  usdview, activated with the --allow-async flag in usdview.\n\n- Added support for asset[]-valued attribute data sources.\n\n### Storm\n\n- Removed include of dispatcher.h in public header to reduce transitive includes \n  of TBB headers.\n  (PR: [#2616](https://github.com/PixarAnimationStudios/OpenUSD/pull/2616))\n\n- Published HdSt and Hdx tests, available on Linux. \n\n- Enabled Hgi resource generation for non-HgiGL Hgi backends by default.\n\n- Fixed a bug where creation of HgiSampler in various backends will always \n  enable anisotropy.\n  (PR: [#2492](https://github.com/PixarAnimationStudios/OpenUSD/pull/2492))\n\n- Fixed a typo in hgiInterop CMakeLists.txt.\n  (PR: [#2641](https://github.com/PixarAnimationStudios/OpenUSD/pull/2641))\n\n- Added ability to support both HgiGL and HgiVulkan in single build.\n  (PR: [#2564](https://github.com/PixarAnimationStudios/OpenUSD/pull/2564))\n\n- Added new unit test for HgiGL and HgiVulkan.\n  (PR: [#2851](https://github.com/PixarAnimationStudios/OpenUSD/pull/2851))\n\n- Added memory barrier between CPU-GPU copy and GPU-GPU copies in \n  HdStStagingBuffer::Flush.\n\n- Various correctness and stability improvements to HgiVulkan, including:\n  - Added implementation for HgiVulkanBlitCmds::FillBuffer.\n  - Improved clearing logic of HgiVulkanGraphicsCmds such that we only clear a \n    VkRenderPass when it's used for the first draw batch in graphics cmds \n    submission.\n  - Fixed visualization of Embree normals AOV when using HgiVulkan.\n  - HgiVulkan now uses validation layer VK_LAYER_KHRONOS_validation instead of \n    deprecated VK_LAYER_LUNARG_standard_validation.\n  - Removed incorrect use of indexBufferByteOffset when binding index buffer.\n  - Added env var HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT, mirroring HgiGL version.\n  - Added support for builtin barycentric coordinates.\n  - Enabled alphaToOne, allowing its use in the \n    VkPipelineMultisampleStateCreateInfo setup.\n  - Added codepath for clearing attachments in HgiVulkanGraphicsCmds without \n    beginning a render pass.\n  - Added method Hgi::SubmitLayoutChange, allowing user to request texture \n    layout changes. Used this method to fix color correction task when using \n    HgiVulkan.\n  - Many validation layer error fixes.\n  (PR: [#2852](https://github.com/PixarAnimationStudios/OpenUSD/pull/2852))\n\n- Enabled multi-threaded buffer source resolve to improve performance when \n  executing buffer source computations during resource commit.\n\n- Updated to use improved OpenSubdiv shader source mixins to reduce shader \n  source size and improve compatibility when compiling GLSL to SPIR-V for Vulkan.\n\n- Updated to include implementations of SPIRV-Reflect and VMA (Vulkan Memory \n  Allocator) directly from the Vulkan SDK instead of maintaining copies of these \n  within the hgiVulkan implementation.\n  (PR: [#2563](https://github.com/PixarAnimationStudios/OpenUSD/pull/2563))\n\n- Added a version guarded workaround to avoid a performance regression when \n  rendering order independent transparency (OIT) on some recently released Metal \n  devices.\n\n- Removed the use of CoreVideo texture caches from hgiMetal to simplify the \n  implementation and fix a memory leak.\n  (PR: [#2828](https://github.com/PixarAnimationStudios/OpenUSD/pull/2828))\n\n- Added change to support float type matrix (GfMatrix4f) for instance transforms. \n  (PR: [#2724](https://github.com/PixarAnimationStudios/OpenUSD/pull/2724))\n\n- Added support to provide visual feedback for broken material shaders.\n\n- Fixed determination of screen space point size when using authored widths.\n\n- Improved the performance of shader generation when certain non-standard \n  primvar names are present.\n\n- Refactored HdSt_CodeGen to take metaData as constructor arg. This allows us to \n  delay the construction of the codeGen object since the hash can be computed \n  from the constructor args. With this change there is approx 50% speedup in \n  HdStExtCompGpuComputation::Execute.\n\n### Hydra\n\n- Fixed a bug that could lead to crashes in HdsiPrimTypePruningSceneIndex.\n\n- Hydra now supports inserting asset names into material networks.\n\n- Made HdImageShaderSchema constants return a schema instead of a container data \n  source.\n\n- Made HdSceneIndexAdapterSceneDelegate handle image shaders correctly.\n\n- Made HdImageShaderSchema filePath a string, not an asset path.\n\n- Moved material node sampler parameter extraction into the standalone function \n  HdGetSamplerParameters.\n\n- Added disableDepthOfField bool to RenderSettings.\n\n- Included <optional> to fix external build error. \n  (PR: [#2907](https://github.com/PixarAnimationStudios/OpenUSD/pull/2907))\n\n- Changed Metal's swizzle so single channel texture reads follow the \n  UsdPreviewSurface spec of repeating the single channel on the r, g, and b \n  channels with 1.0 in the alpha channel. \n  (Issue: [#2731](https://github.com/PixarAnimationStudios/OpenUSD/issues/2731))\n\n- Updated color correction task to support building against OpenColorIO 2.3.0. \n  (PR: [#2651](https://github.com/PixarAnimationStudios/OpenUSD/pull/2651))\n\n- Updated DataSourceMaterial and added HdMaterialNodeParameterSchema for \n  colorspace handling in both Hydra 1.0 and 2.0.\n\n- Added UnderlyingDataSource to HdSchema and HdVectorSchema. This allows folding \n  HdVectorSchemaBasedContainerSchema into HdSchemaBasedContainerSchema.\n\n- Deprecated hd/vectorSchemaTypeDefs.h in favor of the more generic \n  hd/schemaTypeDefs.h\n\n- Deprecated BuildRetained Hydra schema in favor of Builder.\n\n- Added more typing to Hydra schemas by replacing container/vector data sources \n  with appropriate schemas. This was done for HdMaterialBindingsSchema, \n  HdMaterialSchema, HdMaterialNetwork, HdMaterialNode, \n  HdRenderProductVectorSchema, and HdRenderVarVectorSchema.\n\n- Added GetFlattenedPrimvarValue for HdPrimvarSchema.\n\n- HdGeomSubsetsSchema::GetIds is now GetGeomSubsetNames.\n\n- Fixed implementation of GetContributingSampleTimesForInterval in \n  HdDataSourceLegacyPrim to include the samples just before or just after the \n  given shutter interval.\n\n- Added HdRenderDelegate::GetCapabilities, used to indicate motion blur support.\n\n- Introduced HdsiPrimTypeNoticeBatchingSceneIndex and \n  HdsiPrimManagingSceneIndexObserver. Future render delegates can be implemented \n  by observing the terminal scene index (HdRenderDelegate::SetTerminalSceneIndex) \n  and providing an appropriate prim factory.\n\n- HdRenderPassState::SetOverrideWindowPolicy now takes std::optional instead of \n  std::pair (similar for related classes).\n\n- Improved loading of multichannel OpenEXR files.\n\n- Enabled decompression of dwaa and dwab OpenEXR files.\n\n- OpenEXR code is now MinGW and Neon compatible.\n\n- Added support for monochrome OpenEXR images and swizzling for luminance \n  channels.\n  (Issue: [#2800](https://github.com/PixarAnimationStudios/OpenUSD/issues/2800))\n\n- Added utility to write out scene index to file.\n\n- Removed 'bindingStrength' from HdMaterialBindingSchema.\n\n- Added support for asynchronous processing in Hydra generative procedurals, \n  through the new SystemMessage scene index API. Procedural implementations need \n  to implement the new asynchronous API to take advantage of this, and the host \n  application will need to send periodic asyncPoll messages.\n\n- Added Hydra schema support for public interface mappings on material prims.\n\n- Prims with self-dependencies will no longer be signaled as dirty after they \n  are removed.\n\n- Fixed a situation where both smooth and flat normals were being computed for \n  HdMeshes for representations where only one of the two was needed. This is \n  expected to remove about 10ms per unintended invocation.\n\n- Added multithreaded sync for HdExtComputations. Added a work parallel loop in \n  Hd_PrimTypeIndex::SyncPrims enabled only for Prim types that opt-in. Opted \n  \"extComputation\" into threaded prim sync by default. With this there is an \n  order of magnitude performance improvement for use cases which have a \n  significant number of HdExtComputations.\n\n- Added Hydra schemata to transport direct and collection-based material \n  bindings, and a scene index to compute the resolved binding. Current support \n  is limited to direct material bindings.\n\n### RenderMan Hydra Plugin\n\n- LPE AOV's now use the RenderVar name rather than the LPE expression as the \n  channel name. This both gives expected output names in EXR channels, and fixes \n  name collisions when the same LPE is used with multiple summary statistics, \n  such as variance and mse.\n\n- Fixed crash when UsdRenderProduct's orderedVars points at a target prim that \n  does not exist.\n\n- HdPrman now supports TfToken-typed parameters.\n\n- HdPrman now has a scene index filter, HdPrman_UpdateObjectSettingsSceneIndex,\n  that will upgrade certain attributes used in older RenderMan versions to their \n  modern representation.\n\n- Reduced overhead of portalLightResolvingSceneIndexPlugin.\n\n- Fixed handling of coordinate systems for light filters, which would give \n  incorrect results in some circumstances.\n\n- Added support for single precision rotations for point instancers in HdPrman. \n  Note that half precision rotations are still supported but are cast to floats.\n  (Issue: [#2529](https://github.com/PixarAnimationStudios/OpenUSD/issues/2529))\n\n- Added PxrMesh adapter to help mesh lights work on older versions of USD which \n  do not have scene index support.\n\n- Added change to use the 'disableDepthOfField' RenderSettings option in HdPrman.\n\n- Added change to query and use shutter curve parameters if available.\n\n- Made various improvements to enable usage of a render settings prim to drive \n  render pass execution. Current support is limited to generation of multiple \n  render product artifacts in batched (i.e., non-interactive) mode.\n\n- Improved determination of the Riley shutter interval and its use for motion \n  blur.\n\n- Improved instancing stability & performance.\n\n- All motion blur handling has been consolidated into a single scene index. \n  Motion blur is now more consistently supported across the entire scene.\n\n- Motion blur will better respect the shutter settings of the active camera.\n\n- ExtComp is now compatible with motion blur.\n\n### usdview\n\n- Replaced deprecated QFontMetrics.width with horizontalAdvance.\n  (PR: [#2625](https://github.com/PixarAnimationStudios/OpenUSD/pull/2625))\n\n- Updated usdview selection processing to maintain correct selection \n  highlighting after switching variants or prim activation and avoid some errors \n  that could occur at startup when using PySide6 on Linux or Windows.\n\n### usdrecord\n\n- Updated camera transforms for usdrecord to make sure small objects are not \n  unexpectedly culled by the clipping planes. \n  (Issue: [#2556](https://github.com/PixarAnimationStudios/OpenUSD/issues/2556))\n\n- Updated CMakeLists for usdrecord to skip building if GPU and/or OpenGL are \n  unavailable. \n  (PR: [#2468](https://github.com/PixarAnimationStudios/OpenUSD/pull/2468))  \n\n### usdcat\n\n- Fixed issues with usdcat --flattenLayerStack argument.\n  (PR: [#2832](https://github.com/PixarAnimationStudios/OpenUSD/pull/2832))\n\n### MaterialX\n\n- Fixed name collision with MaterialX inputs and built-in uniforms in Storm. \n  (PR: [#2807](https://github.com/PixarAnimationStudios/OpenUSD/pull/2807))\n\n- Fixed OIT issues for MaterialX when using Metal. \n  (PR: [#2614](https://github.com/PixarAnimationStudios/OpenUSD/pull/2614))\n\n- Added HdMtlxGetStdLibraries to cache the MaterialX::LoadLibraries step. \n  (PR: [#2666](https://github.com/PixarAnimationStudios/OpenUSD/pull/2666))\n\n- Added change to allow matrix33 default values in UsdMtlx. \n  (PR: [#2554](https://github.com/PixarAnimationStudios/OpenUSD/pull/2554))\n\n- Fixed testUsdImagingGLMaterialXCustomNodes_customColor failure. \n  (PR: [#2728](https://github.com/PixarAnimationStudios/OpenUSD/pull/2728))\n\n- Fixed Tangent vector calculation for MaterialX NormalMaps. \n  (Issue: [#1585](https://github.com/PixarAnimationStudios/OpenUSD/issues/1585))\n\n- Updated MaterialXMatfilt to handle normalMaps with PreviewSurface Materials. \n  (Issue: [#1585](https://github.com/PixarAnimationStudios/OpenUSD/issues/1585))\n\n- Fixed shader compile error when using MaterialX's :heighttonormal nodes. \n  (Issue: [#2281](https://github.com/PixarAnimationStudios/OpenUSD/issues/2281), \n   PR: [#2474](https://github.com/PixarAnimationStudios/OpenUSD/pull/2474))\n\n- Fixed a bug where the \"fileprefix\" attribute was not being applied to \n  filenames. \n  (Issue: [#974](https://github.com/PixarAnimationStudios/OpenUSD/issues/974), \n   PR: [#2660](https://github.com/PixarAnimationStudios/OpenUSD/pull/2660))\n\n- Updated CMakeLists for usdBakeMtlx to skip building if GPU and/or OpenGL are \n  unavailable. \n  (PR: [#2468](https://github.com/PixarAnimationStudios/OpenUSD/pull/2468))   \n\n### Documentation\n\n- Fixed various documentation issues.\n  (PR: [#2565](https://github.com/PixarAnimationStudios/OpenUSD/pull/2565),\n   [#2779](https://github.com/PixarAnimationStudios/OpenUSD/pull/2779))\n\n- Updated doc for UsdStage::Traverse() comments regarding PrimRange.\n  (Issue: [#222](https://github.com/PixarAnimationStudios/USD/issues/222))\n\n- Updated UsdPreviewSurface Specification, added information about transparent \n  black for texture wrap mode border color, clarified clearcoat inputs.\n  (Issue: [#2659](https://github.com/PixarAnimationStudios/OpenUSD/issues/2659),\n   [#2770](https://github.com/PixarAnimationStudios/OpenUSD/issues/2770))\n\n- Updated \"Products Using USD\" docs page with new Unity packages.\n  (PR: [#2884](https://github.com/PixarAnimationStudios/OpenUSD/pull/2884))\n\n- Updated UsdSkel documentation with fixed examples.\n  (Issue: [#2621](https://github.com/PixarAnimationStudios/OpenUSD/issues/2621),\n   PR: [#2697](https://github.com/PixarAnimationStudios/OpenUSD/pull/2697))\n\n- Updated Python docstring generation scripts: \n   - Added fix to ignore previously generated __DOC.py files.\n   - Fixed building docstrings on Windows.\n   - Improved conversion of C++ types.\n   - Added ability to build docstrings without having to first build HTML docs, \n     using new CMake build options PXR_BUILD_PYTHON_DOCUMENTATION and \n     PXR_BUILD_HTML_DOCUMENTATION.\n  (PR: [#2574](https://github.com/PixarAnimationStudios/OpenUSD/pull/2574), \n   [#2575](https://github.com/PixarAnimationStudios/OpenUSD/pull/2575),\n   [#2578](https://github.com/PixarAnimationStudios/OpenUSD/pull/2578),\n   [#2581](https://github.com/PixarAnimationStudios/OpenUSD/pull/2581))\n\n- Fixed UsdShadeMaterialBindingAPI example.\n  (PR: [#2726](https://github.com/PixarAnimationStudios/OpenUSD/pull/2726))\n\n## [23.11] - 2023-10-26\n\n### Build\n\n- Updated C++ standard version to C++17 per VFX Reference Platform CY2022.\n\n- Various fixes and changes to build_usd.py:\n  - Updated dependency versions to adhere to VFX Reference Platform CY2022.\n  - Fixed a bug where boost would not be rebuilt if it failed to build on an \n    earlier run.\n  - Updated zlib version used by build_usd.py to 1.2.13 \n    (PR: [#2485](https://github.com/PixarAnimationStudios/OpenUSD/pull/2485))\n\n- Fixed a bug on Windows where loading Python modules would fail if the PATH \n  environment variable contained a relative path. \n  (PR: [#2409](https://github.com/PixarAnimationStudios/OpenUSD/pull/2409))\n\n- Numerous changes to remove uses of boost throughout the source tree.\n  (Issue: [#2202](https://github.com/PixarAnimationStudios/OpenUSD/issues/2202),\n   [#2211](https://github.com/PixarAnimationStudios/OpenUSD/issues/2211),\n   [#2226](https://github.com/PixarAnimationStudios/OpenUSD/issues/2226),\n   [#2228](https://github.com/PixarAnimationStudios/OpenUSD/issues/2228),\n   [#2247](https://github.com/PixarAnimationStudios/OpenUSD/issues/2247),\n   [#2250](https://github.com/PixarAnimationStudios/OpenUSD/issues/2250),\n   [#2296](https://github.com/PixarAnimationStudios/OpenUSD/issues/2296),\n   [#2305](https://github.com/PixarAnimationStudios/OpenUSD/issues/2305),\n   [#2311](https://github.com/PixarAnimationStudios/OpenUSD/issues/2311),\n   [#2634](https://github.com/PixarAnimationStudios/OpenUSD/issues/2634),\n   PR: [#2212](https://github.com/PixarAnimationStudios/OpenUSD/pull/2212),\n   [#2227](https://github.com/PixarAnimationStudios/OpenUSD/pull/2227),\n   [#2232](https://github.com/PixarAnimationStudios/OpenUSD/pull/2232),\n   [#2233](https://github.com/PixarAnimationStudios/OpenUSD/pull/2233),\n   [#2234](https://github.com/PixarAnimationStudios/OpenUSD/pull/2234),\n   [#2235](https://github.com/PixarAnimationStudios/OpenUSD/pull/2235),\n   [#2269](https://github.com/PixarAnimationStudios/OpenUSD/pull/2269),\n   [#2280](https://github.com/PixarAnimationStudios/OpenUSD/pull/2280),\n   [#2297](https://github.com/PixarAnimationStudios/OpenUSD/pull/2297),\n   [#2308](https://github.com/PixarAnimationStudios/OpenUSD/pull/2308),\n   [#2312](https://github.com/PixarAnimationStudios/OpenUSD/pull/2312),\n   [#2328](https://github.com/PixarAnimationStudios/OpenUSD/pull/2328),\n   [#2333](https://github.com/PixarAnimationStudios/OpenUSD/pull/2333),\n   [#2349](https://github.com/PixarAnimationStudios/OpenUSD/pull/2349),\n   [#2389](https://github.com/PixarAnimationStudios/OpenUSD/pull/2389),\n   [#2390](https://github.com/PixarAnimationStudios/OpenUSD/pull/2390),\n   [#2496](https://github.com/PixarAnimationStudios/OpenUSD/pull/2496),\n   [#2503](https://github.com/PixarAnimationStudios/OpenUSD/pull/2503),\n   [#2505](https://github.com/PixarAnimationStudios/OpenUSD/pull/2505),\n   [#2506](https://github.com/PixarAnimationStudios/OpenUSD/pull/2506),\n   [#2509](https://github.com/PixarAnimationStudios/OpenUSD/pull/2509),\n   [#2510](https://github.com/PixarAnimationStudios/OpenUSD/pull/2510),\n   [#2522](https://github.com/PixarAnimationStudios/OpenUSD/pull/2522),\n   [#2524](https://github.com/PixarAnimationStudios/OpenUSD/pull/2524),\n   [#2527](https://github.com/PixarAnimationStudios/OpenUSD/pull/2527),\n   [#2528](https://github.com/PixarAnimationStudios/OpenUSD/pull/2528),\n   [#2530](https://github.com/PixarAnimationStudios/OpenUSD/pull/2530),\n   [#2532](https://github.com/PixarAnimationStudios/OpenUSD/pull/2532),\n   [#2532](https://github.com/PixarAnimationStudios/OpenUSD/pull/2532),\n   [#2533](https://github.com/PixarAnimationStudios/OpenUSD/pull/2533),\n   [#2534](https://github.com/PixarAnimationStudios/OpenUSD/pull/2534),\n   [#2535](https://github.com/PixarAnimationStudios/OpenUSD/pull/2535),\n   [#2540](https://github.com/PixarAnimationStudios/OpenUSD/pull/2540),\n   [#2541](https://github.com/PixarAnimationStudios/OpenUSD/pull/2541),\n   [#2542](https://github.com/PixarAnimationStudios/OpenUSD/pull/2542),\n   [#2543](https://github.com/PixarAnimationStudios/OpenUSD/pull/2543),\n   [#2548](https://github.com/PixarAnimationStudios/OpenUSD/pull/2548),\n   [#2549](https://github.com/PixarAnimationStudios/OpenUSD/pull/2549),\n   [#2567](https://github.com/PixarAnimationStudios/OpenUSD/pull/2567),\n   [#2584](https://github.com/PixarAnimationStudios/OpenUSD/pull/2584),\n   [#2585](https://github.com/PixarAnimationStudios/OpenUSD/pull/2585),\n   [#2588](https://github.com/PixarAnimationStudios/OpenUSD/pull/2588),\n   [#2589](https://github.com/PixarAnimationStudios/OpenUSD/pull/2589),\n   [#2590](https://github.com/PixarAnimationStudios/OpenUSD/pull/2590),\n   [#2592](https://github.com/PixarAnimationStudios/OpenUSD/pull/2592),\n   [#2645](https://github.com/PixarAnimationStudios/OpenUSD/pull/2645),\n   [#2652](https://github.com/PixarAnimationStudios/OpenUSD/pull/2652),\n   [#2655](https://github.com/PixarAnimationStudios/OpenUSD/pull/2655),\n   [#2656](https://github.com/PixarAnimationStudios/OpenUSD/pull/2656),\n   [#2657](https://github.com/PixarAnimationStudios/OpenUSD/pull/2657),\n   [#2667](https://github.com/PixarAnimationStudios/OpenUSD/pull/2667),\n   [#2672](https://github.com/PixarAnimationStudios/OpenUSD/pull/2672),\n   [#2685](https://github.com/PixarAnimationStudios/OpenUSD/pull/2685),\n   [#2699](https://github.com/PixarAnimationStudios/OpenUSD/pull/2699),\n   [#2700](https://github.com/PixarAnimationStudios/OpenUSD/pull/2700),\n   [#2703](https://github.com/PixarAnimationStudios/OpenUSD/pull/2703),\n   [#2704](https://github.com/PixarAnimationStudios/OpenUSD/pull/2704),\n   [#2705](https://github.com/PixarAnimationStudios/OpenUSD/pull/2705),\n   [#2706](https://github.com/PixarAnimationStudios/OpenUSD/pull/2706),\n   [#2708](https://github.com/PixarAnimationStudios/OpenUSD/pull/2708),\n   [#2710](https://github.com/PixarAnimationStudios/OpenUSD/pull/2710),\n   [#2713](https://github.com/PixarAnimationStudios/OpenUSD/pull/2713),\n   [#2716](https://github.com/PixarAnimationStudios/OpenUSD/pull/2716))\n\n- Fixed various build errors and warnings.\n  (Issue: [#2183](https://github.com/PixarAnimationStudios/OpenUSD/issues/2183),\n   PR: [#2321](https://github.com/PixarAnimationStudios/OpenUSD/pull/2321), \n   [#2322](https://github.com/PixarAnimationStudios/OpenUSD/pull/2322), \n   [#2350](https://github.com/PixarAnimationStudios/OpenUSD/pull/2350), \n   [#2611](https://github.com/PixarAnimationStudios/OpenUSD/pull/2611),\n   [#2643](https://github.com/PixarAnimationStudios/OpenUSD/pull/2643), \n   [#2646](https://github.com/PixarAnimationStudios/OpenUSD/pull/2646),\n   \n- Fixed build errors when the path to the source tree or the install location \n  contains whitespace.\n\n- Improved cmake performance when performing a monolithic build.\n\n- Made 12.6.3 as the minimum macOS requirement (with compatible Xcode version \n  being 13.3) we test against.\n\n### USD\n\n- Fixed VtArray declarations of extern template instantiations. \n  (PR: [#2415](https://github.com/PixarAnimationStudios/OpenUSD/pull/2415))\n\n- Made change to use correct integer compression working space size when \n  decompressing. \n  (PR: [#2435](https://github.com/PixarAnimationStudios/OpenUSD/pull/2435))\n\n- Fixed a bug where crash could occur on Python shutdown.\n\n- The initial deployment of pattern-based collections is now feature complete. \n  This includes the following feature work on pattern-based collections:\n  SdfPathExpression attribute values, composition support, a new \n  membershipExpression attribute on UsdCollectionAPI, and \n  UsdCollectionMembershipQuery support.\n\n- Added VtValue::(Unchecked)Mutate<T>(), which lets callers mutate the held \n  object.\n\n- Added GetNodeSubtreeRange function to PcpPrimIndex that returns an iterator \n  range for traversing all nodes in prim index subtree starting at a particular \n  node.\n\n- Added methods to UsdGeomXformable to retrieve individual UsdGeomXformOps.\n\n- Cleaned up wrapSchemaClass.cpp by specifying args and checking names for \n  multipleApply classes. Regenerating schemas under this version will update \n  Python wrappings for multiple-apply API schemas to add named arguments to  \n  constructors.\n\n- Removed the deprecated UsdSkelPackedJointAnimation class.\n\n- Added UsdLuxDomeLight_1 schema, a new version of the UsdLuxDomeLight schema \n  that introduces a \"poleAxis\" property that affects the dome's final rendered \n  orientation.\n\n- Fixed a dangling pointer bug in TfType that could lead to crashes on program \n  exit.  \n\n- URI schemes used for Ar URI resolvers are restricted to ASCII alphanumeric \n  characters plus `+`, `.`, and `-` to conform to the URI/IRI specification in \n  RFC2396. By default, URI resolvers associated with non-compliant schemes are \n  ignored, but may be enabled by setting the environment variable \n  `PXR_AR_DISABLE_STRICT_SCHEME_VALIDATION` to `1`.\n  (PR: [#2453](https://github.com/PixarAnimationStudios/OpenUSD/pull/2453), \n   [#2467](https://github.com/PixarAnimationStudios/OpenUSD/pull/2467))  \n\n- When flattening a stage, asset paths with unresolvable URI schemes will be \n  treated as absolute paths.\n  (Issue: [#2480](https://github.com/PixarAnimationStudios/OpenUSD/issues/2480))\n\n- Allow loading plugins from file paths that contain Unicode characters. \n  (PR: [#1987](https://github.com/PixarAnimationStudios/OpenUSD/pull/1987))\n\n- Updated the UsdLuxPortalLight schema to add \"width\" and \"height\" and remove \n  \"extent\".\n\n- Extended stage variable expression language:\n  - Added support for integer, boolean and list types, and a 'None' sentinel \n    value.\n  - Added support for functions like \"if\" and \"contains\". \n    See [documentation](https://openusd.org/release/user_guides/variable_expressions.html) \n    for complete list.\n\n- Added \"resolved asset path resyncs\" to UsdNotice::ObjectsChanged. This new \n  category of changes indicates that asset paths in a subtree have been \n  invalidated and may now resolve to a different location, even though the \n  authored asset paths have not changed. This may occur due to asset resolver \n  changes, or expression variable changes.\n\n  Client code that cares about changes to resolved asset paths must be updated \n  to accommodate this new category of changes. The simplest way to do this is \n  to treat all resolved asset path resyncs as full object resyncs. This is what \n  UsdStage had done previously.\n\n- Fixed a bug where calls to ArResolver::RefreshContext that affected the \n  resolution of sublayer asset paths would not cause affected prims to be \n  resynced.\n\n- Fixed a bug where UsdNotice::ObjectsChanged::ChangedInfoOnly would incorrectly \n  indicate that descendants of prims with info changes also had info changes.\n\n- Fixed a bug where UsdStage would not send notices for changes to instancing \n  prototype in response to instances being loaded or unloaded.\n\n- Fixed a bug that caused crashes when calling UsdObject::GetDescription on \n  expired UsdPrims.\n\n- Added GetKind and SetKind APIs to UsdPrim.\n\n- Added IsComponent and IsSubComponent APIs to UsdPrim. Note that subcomponent \n  query is not cached because we only cache model-hierarchy-related information, \n  and therefore this query will be considerably slower than other kind-based \n  queries.\n\n- Added APIs to query model, group, assembly, component, and subcomponent to \n  libKind.\n\n- Fixed TfPathUtils test by using TfNormPath instead of TfRealPath on Windows. \n  (PR: [#2476](https://github.com/PixarAnimationStudios/OpenUSD/pull/2476))\n\n- Versioned up and introduced UsdGeomCapsule_1 and UsdGeomCylinder_1 schemas to\n  provide top and bottom radii. \n  (PR: [#2596](https://github.com/PixarAnimationStudios/OpenUSD/pull/2596))\n\n- Fixed SupportedFile error handling in complianceChecker.\n  (PR: [#2429](https://github.com/PixarAnimationStudios/OpenUSD/pull/2429))\n\n### UsdImaging\n\n- A previous release moved HdModelSchema out of UsdImagingModelSchema. This \n  change has been reverted.\n\n- Fixed missing refresh when editing nodegraph attributes \n  (PR: [#2168](https://github.com/PixarAnimationStudios/OpenUSD/pull/2168))\n\n- Introduced UsdImagingCreateSceneIndices. Clients are encouraged to use this \n  new API which abstracts creating the UsdImagingStageSceneIndex and the other \n  scene indices necessary to resolve various USD behaviors such as instancing. \n  Using the new API will hopefully isolate clients from future changes to the \n  topology of filtering scene indices that are necessary to process a USD stage.\n\n- Made various fixes to the scene indices resolving USD native instancing and \n  draw modes. In particular, draw modes authored on instances are now inherited \n  and handled correctly and some subtle bugs with xforms authored on the \n  prototype of a point instancer are fixed.\n\n- Moved code to handle UsdGeomModelAPI (when using scene indices) to its own \n  API adapter.\n\n- Renamed usdRiImaging to usdRiPxrImaging since the corresponding schemata are \n  in usdRiPxr (shipping with the Hydra RenderMan plugin).\n\n- Updated fallback purpose to \"guide\" so a bone mesh will not always \n  show up when rendering skinned geometry.\n\n- Fixed UsdImaging 2.0 handling of requests to resync \"/\".  The incorrect \n  behavior was causing issues when changing the layer stack of a UsdStage, \n  but behavior should now match UsdImagingDelegate.\n\n- Changed the UsdPreviewSurface spec's UDIM support to advertise handling of \n  UDIM tiles from [1001,1100], instead of ending at 1099. This allows artists to \n  use up to a 10x10 grid.  Changed usdImaging/hdStorm UDIM handling to match.\n\n- Fixed an issue where the UsdImaging 2.0 configuration of UsdImagingGLEngine \n  would lose root transform and visibility overrides on renderer change.\n\n- Bounding boxes representing prims with unloaded payloads are now instanced \n  correctly. \n  (PR: [#2408](https://github.com/PixarAnimationStudios/OpenUSD/pull/2408))\n\n- Primvars with type 'asset' are now supported on native instances.\n  (PR: [#2521](https://github.com/PixarAnimationStudios/OpenUSD/pull/2521))\n\n- HdxSelectionTask and HdxColorizeSelectionTask no longer have the \n  \"enableSelection\" parameter. This has been replaced with \n  \"enableSelectionHightlight\" and \"enableLocateHighlight\" to allow separate \n  control of selection and locate (rollover) highlighting with these tasks.\n\n- Added \"includeSchemaFamily\" option to the usdImaging pluginInfo.json, to allow \n  one adapter to be used to render multiple different schema versions.\n  (PR: [#2596](https://github.com/PixarAnimationStudios/OpenUSD/pull/2596))\n\n### Storm\n\n- Added error handling for calls to OCIO in HdxColorCorrectionTask. \n\n- Removed unused SetLightingStateFromOpenGL and SetLightingState methods from \n  HdStSimpleLightingShader.\n\n- Changed rebuilding of HdxSimpleLightTask buffer sources to happen only when \n  needed.\n\n- Added scalar accessor for primvar redirects in HdSt_CodeGen even if primvar \n  shares name with shader parameter.\n\n- Added argument to specify buffer usage when creating standalone buffer \n  resources, allowing for correct specification of the drawIndirectResult buffer \n  as a storage buffer. \n\n- Removed codegen of element primvar data for GPU frustum culling pipeline. \n\n- Fixed pipeline draw batch GPU frustum culling counting mechanism to wait for \n  compute work rather than blit work.\n\n- Removed colorResolveAttachmentDescs and depthResolveAttachmentDesc fields from \n  HgiGraphicsPipelineDesc and replaced them with boolean \"resolveAttachments\".\n\n- Added relevant geometric shader values to graphics pipeline hash computation. \n\n- Added OpenSubdiv shader source to geometry shader when using Hgi resource \n  generation.\n\n- Added explicit default stencil value in \n  HdStRenderDelegate::GetDefaultAovDescriptor, now used in Hgi backends.\n\n- Only fill color or depthStencil value of VkClearValue union in \n  HgiVulkanGraphicsPipeline.\n\n- Various small cleanups to Hgi resource destruction.\n\n- HdSt_ResourceLayout has been moved and renamed to HioGlslfxResourceLayout.\n\n- HdStRenderPassState::ComputeImageToHorizontallyNormalizedFilmback is now \n  accessible via the public API.\n\n- Improved shader program cache hit rate by reducing render pass shader variants \n  stemming from different numbers of clip planes.\n\n### Hydra\n\n- Added modelPath, kind, and asset{Identifier,Name,Version} to the Hydra \n  modelSchema, corresponding to UsdModelAPI. \n\n- Hydra's material network editor interface now provides GetModelAssetName().  \n  For the data source material implementation, this is backed by the Hydra \n  modelSchema\n\n- Added a Tf scope description to inform the user while the app is waiting for \n  a renderer to Stop()\n\n- Added HdxEffectsShader, a new base class for HdxFullscreenShader that provides\n  functionality for image shaders creating and managing an HgiGraphicsPipeline\n  instance.\n\n- HdxFullscreenShader's BindBuffers and BindTextures function signatures have \n  changed, and the method used for determining binding points for buffers and \n  textures has changed as well.\n\n- HdImageShader is a new prim type that has been added to represent image \n  shaders in Hydra. \n\n- The RenderColorWithOccludedSelection render pass now takes non-opaque \n  colors into account.\n\n- HdxAovInputTask now cleans up the intermediate depth texture it may have \n  created when it is destroyed.\n\n- Fixed a bug that caused HdxColorCorrectionTask to not work correctly when \n  using OpenColorIO 2.x with OpenGL on Linux.  \n\n- Fixed race condition in HdGpGenerativeProceduralResolvingSceneIndex.\n\n- Introduced HdMakeStaticCopy used to make a copy of a data source.\n\n- Added built-in support for .exr (OpenEXR) image files in Hio. You no longer \n  need to compile additional plugins to get OpenEXR support. See \n  [Working with Image File Formats: OpenEXR](https://openusd.org/release/user_guides/render_user_guide.html#openexr) for more details.\n\n- Fixed scene transport of portal lights.\n\n- Added HdRenderDelegate API SetTerminalSceneIndex and Update to allow a render \n  delegate to observe the terminal scene index and process change notices \n  directly, aiding the transition to the Hydra 2.0 OM.\n\n- Added \"shutterInterval\" as a computed field on the render settings schema. \n  Extended the render settings filtering scene index to compute and invalidate \n  it based on the targeted camera and motion blur opinions of the render \n  products.\n\n- Updated Hydra 2.0 stage scene index to sparsely invalidate in response to \n  resolved asset path resyncs.\n\n- Added doxygen documentation about the HioImage plugin interface to \n  help integrators writing their own HioImage plugins for texture loading.\n\n- Fixed Hydra 2.0 handling of transform flattening for non-zero shutter offsets.\n\n- The internal synthesized primvars used by Hydra instancers to communicate \n  instance transforms to render backends have been renamed. Custom backend \n  authors should update to the new tokens. An environment variable \n  (HD_USE_DEPRECATED_INSTANCER_PRIMVAR_NAMES) is provided for the next 2 releases\n  for those who need to continue using backends that have not yet been updated. \n  Hydra backends for RenderMan, Storm, and Embree have been updated. See the\n  post titled \"Hydra synthesized instancer primvars renamed in release 23.11\" \n  in the [Hydra channel in the AOUSD forums](https://forum.aousd.org/c/community/hydra/8) \n  for more details.\n\n- HdMeshReprSpec adds the parameter 'forceOpaqueEdges' which, when true, signals \n  that wireframe and hull opacity signals should be ignored.\n\n- Updated HdCyclinderSchema and HdCapsuleSchema in accordance with new \n  Cylinder_1 and Capsule_1 schemas. Deprecated radius attribute and added \n  radiusBottom and radiusTop attributes.\n\n### RenderMan Hydra Plugin\n\n- hdPrman for RenderMan 24 is deprecated. Support for hdPrman for RenderMan 24 \n  will be removed in a future release.\n\n- Added support for array-valued inputs on shader nodes.\n  (Issue: [#1710](https://github.com/PixarAnimationStudios/OpenUSD/issues/1710))\n\n- Changed UsdPrimvarReader_float3 OSL shader \"fallback\" param to be float array \n  instead of color.\n  (Issue: [#1683](https://github.com/PixarAnimationStudios/OpenUSD/issues/1683))\n\n- Added support during Riley shading node creation for shader parameters holding \n  a GfVec3f with type SdrPropertyTypes->Float, treating them as a float array.\n  (Issue: [#1683](https://github.com/PixarAnimationStudios/OpenUSD/issues/1683))\n\n- Fixed a bug in MatfiltConvertPreviewMaterial where it could potentially \n  iterate nodes multiple times, due to HdMaterialNetworkInterface::GetNodeNames \n  not removing duplicates. Duplicates happen when there are multiple outputs \n  being used on the material, like surface and displacement for UsdPreviewSurface. \n\n- We previously added sampleCount XPU rendering pixel information normalized in \n  the renderer as opposed to normalized by display drivers. To enable backward \n  compatibility, we've made a change that preserves the previous Rebind() API \n  and just has a dead parameter, \"weightsOffset\". We rely on display drivers to \n  ignore invalid offsets and only do sampleCount normalization when a valid \n  sampleCount offset is provided.\n\n- Motion blur improvements for legacy motion blur support when scene index \n  plug-ins aren't available:\n  - Added a fallback code path for velocity motion blur used when the velocity \n    blur scene index plug-in is not available. \n  - Added a fallback code path for querying externally computed points for blur \n    when the extComputationPrimvarPruningSceneIndexPlugin is not available.\n\n- Motion blur improvements for the velocity blur scene index plug-in:\n  - Fixed issue where points were sampled on the frame (at time zero) for \n    velocity computations, and other primvars were sampled at shutter open in \n    hdPrman, so any time the shutter didn't open at time zero the blur could \n    fail. Now, the velocity scene index plug-in deals with sampling all primvars \n    at the sample time used for velocity blur, rather than just points.\n  - For deforming blur, we now sample non-blurrable primvars at the center of \n    the shutter interval, which more closely mimics how they would look if they \n    were blurred.\n\n- The MtlxStandardSurface shader had an incorrect default for fuzzGain (it \n  should be 0, not 1). Changed the default in the OSL StandardSurfaceParameters \n  adapter pattern that gets wired up to PxrSurface when MtlxStandardSurface is \n  being translated.\n\n- Added code pathway to allow HdPrman_RenderPass to use the Render Settings prim \n  for non-interactive rendering with a valid Render Settings prim. Note that a \n  Render Settings prim is considered valid if there is at least one Render \n  Product and a camera relationship.\n\n- Added support for portal lights, including a resolver for managing their dome \n  light relationship.\n\n- Removed \"prmanParams\" Sprim in favor of \"renderSettings\".\n\n- Added various improvements to improve determinism of test runs and reduce run \n  times.\n\n- Reworked initialization of Riley scene options by composing opinions from \n  various sources and allowing it to be deferred until render settings prim sync \n  time to correctly handle immutable scene options.\n\n- The testHdPrman test shim will now produce noisier, but faster and more stable \n  renders by default.\n\n- In response to a recent change to RenderMan, HdPrman will now enable rendering \n  of volume aggregates by default when there is no authored integrator in the \n  scene.\n\n### usdview\n\n- Edited the \"Select Camera\" menu in usdview to provide a popup dialog box that \n  displays all cameras if there are more than 15 cameras in the scene.\n\n- Fixed a bug that prevented auto-complete from working correctly in the Python \n  interpreter when using PySide6.\n\n- When authoring drawMode on a prim, apply UsdGeomModelAPI to the respective \n  prim. Note that the scene index implementation of UsdImaging ignores the \n  drawMode on a prim unless the prim has UsdGeomModelAPI.\n\n### usdchecker\n\n- usdchecker now allows .exr (OpenEXR) images in USDZ.\n\n### usdrecord\n\n- Updated usdrecord to use the Render Settings prim to generate image(s) based \n  on the connected Render Products. To use this the \n  HD_PRMAN_RENDER_PASS_USE_RENDER_SETTINGS_PRIM environment variable needs to be \n  set to true.\n\n### MaterialX\n\n- Added change to process authored color spaces by HdMtlx and Storm, making the \n  default color space 'raw' instead of 'auto'\n  (Issue: [#1523](https://github.com/PixarAnimationStudios/OpenUSD/issues/1523), \n   [#1878](https://github.com/PixarAnimationStudios/OpenUSD/issues/1878))\n\n- Updated MaterialX imaging tests. \n\n- Added error handling for MaterialX to avoid crashes when the shader is unable \n  to be created.\n\n### Documentation\n\n- Updated USD Products entry for NVIDIA Omniverse.\n  (PR: [#2546](https://github.com/PixarAnimationStudios/OpenUSD/pull/2546))\n\n- Added [Rendering with USD user guide](https://openusd.org/release/user_guides/render_user_guide.html). \n  Use this guide to help build a robust USD pipeline and configure your assets \n  for rendering.\n\n- Added details on OpenEXR support in USD to the \n  [USDZ specification](https://openusd.org/release/spec_usdz.html) and the \n  [Rendering with USD](https://openusd.org/release/user_guides/render_user_guide.html#openexr) \n  docs.\n\n- Added [Variable Expression guide](https://openusd.org/release/user_guides/variable_expressions.html) \n  for using the new Variable Expressions feature.\n\n- Various documentation updates:\n  - Added doxygen custom footer with copyright\n  - Added VFX2022 details to VERSIONS.md \n  - Added link to USD Working Group \n    [learning content wiki page](https://wiki.aswf.io/display/WGUSD/Learning+Content)\n\n- Various updates to python doc strings generation:\n  - Added docstrings for many additional python objects \n    (PR: [#2526](https://github.com/PixarAnimationStudios/OpenUSD/pull/2526))\n  - Fixed script to remove `<USD module>_API` type name prefixes\n    (PR: [#2580](https://github.com/PixarAnimationStudios/OpenUSD/pull/2580))\n  - Fixed script to use \"classmethod\" instead of \"static\" \n    (PR: [#2579](https://github.com/PixarAnimationStudios/OpenUSD/pull/2579))\n  - Fixed script to not word-wrap within code blocks\n    (PR: [#2576](https://github.com/PixarAnimationStudios/OpenUSD/pull/2576))\n  - Fixed python docs build to raise CMake error if converting python docstrings \n    fails\n    (PR: [#2573](https://github.com/PixarAnimationStudios/OpenUSD/pull/2573))\n  - Fixed script to print stack trace on errors if debug mode on\n    (PR: [#2572](https://github.com/PixarAnimationStudios/OpenUSD/pull/2572))\n\n## [23.08] - 2023-07-21\n\nWe anticipate moving to the [VFX Reference Platform CY2022](https://vfxplatform.com/) \nand C++17 in an upcoming release. Note that as part of the migration to C++17,\nsome API signatures will change from using boost to using the std equivalent. \n\n### Build\n\n- Made numerous changes to remove uses of boost from parts of USD and usdImaging\n  as part of ongoing effort to remove boost throughout the code base. \n  (Issue: [#2203](https://github.com/PixarAnimationStudios/USD/issues/2203),\n   [#2250](https://github.com/PixarAnimationStudios/OpenUSD/issues/2250), \n   [#2257](https://github.com/PixarAnimationStudios/OpenUSD/issues/2257), \n   [#2272](https://github.com/PixarAnimationStudios/OpenUSD/issues/2272),  \n   [#2243](https://github.com/PixarAnimationStudios/OpenUSD/issues/2243), \n   [#2318](https://github.com/PixarAnimationStudios/OpenUSD/issues/2318), \n   [#2211](https://github.com/PixarAnimationStudios/OpenUSD/issues/2211), \n   [#2236](https://github.com/PixarAnimationStudios/OpenUSD/issues/2236), \n   [#2203](https://github.com/PixarAnimationStudios/OpenUSD/issues/2203), \n   PR: [#2205](https://github.com/PixarAnimationStudios/OpenUSD/pull/2205),\n   [#2207](https://github.com/PixarAnimationStudios/OpenUSD/pull/2207),\n   [#2208](https://github.com/PixarAnimationStudios/OpenUSD/pull/2208),\n   [#2209](https://github.com/PixarAnimationStudios/OpenUSD/pull/2209), \n   [#2214](https://github.com/PixarAnimationStudios/OpenUSD/pull/2214), \n   [#2237](https://github.com/PixarAnimationStudios/OpenUSD/pull/2237), \n   [#2244](https://github.com/PixarAnimationStudios/OpenUSD/pull/2244), \n   [#2251](https://github.com/PixarAnimationStudios/OpenUSD/pull/2251), \n   [#2252](https://github.com/PixarAnimationStudios/OpenUSD/pull/2252), \n   [#2253](https://github.com/PixarAnimationStudios/OpenUSD/pull/2253), \n   [#2259](https://github.com/PixarAnimationStudios/OpenUSD/pull/2259), \n   [#2261](https://github.com/PixarAnimationStudios/OpenUSD/pull/2261), \n   [#2270](https://github.com/PixarAnimationStudios/OpenUSD/pull/2270), \n   [#2271](https://github.com/PixarAnimationStudios/OpenUSD/pull/2271), \n   [#2273](https://github.com/PixarAnimationStudios/OpenUSD/pull/2273), \n   [#2285](https://github.com/PixarAnimationStudios/OpenUSD/pull/2285), \n   [#2292](https://github.com/PixarAnimationStudios/OpenUSD/pull/2292), \n   [#2293](https://github.com/PixarAnimationStudios/OpenUSD/pull/2293), \n   [#2294](https://github.com/PixarAnimationStudios/OpenUSD/pull/2294), \n   [#2295](https://github.com/PixarAnimationStudios/OpenUSD/pull/2295), \n   [#2309](https://github.com/PixarAnimationStudios/OpenUSD/pull/2309), \n   [#2320](https://github.com/PixarAnimationStudios/OpenUSD/pull/2320), \n   [#2345](https://github.com/PixarAnimationStudios/OpenUSD/pull/2345))\n\n- Added a new build_usd.py command line option `--cmake-build-args` which will \n  propagate arguments to all CMake invocations during the build process. \n  (PR: ([#2484](https://github.com/PixarAnimationStudios/OpenUSD/pull/2484))\n\n- Updated pxrConfig.cmake to add the Python version used at build time for \n  downstream projects to find during their cmake build configuration step.\n  (PR: [#2093](https://github.com/PixarAnimationStudios/OpenUSD/pull/2093))  \n\n- Removed support for PySide 1.x. This had been deprecated in the 22.08 release.\n\n### USD\n\n- Sublayers are now loaded in parallel during UsdStage composition.\n\n- Fixed a bug in VtArray Python binding where setting values at index -1 would \n  do nothing. \n  (Issue: [#2327](https://github.com/PixarAnimationStudios/OpenUSD/issues/2327))\n\n- UsdFlattenLayerStack now only adds a \".usda\" extension if the tag\n  provided is empty. This allows client code to flatten to their\n  desired schema/format.\n\n- Deprecated spec-based functions on UsdPrimDefinition in favor of new property \n  definition accessors.\n\n- Changed some behaviors of API schema composition in prim definitions.\n  - Authored API schemas have been changed to be the weakest schemas instead of \n    the strongest schemas when composing properties in a prim definition.\n  - The \"default\" and \"hidden\" fields of properties can now be composed in from \n    a weaker API if a stronger schema with the same property has no opinion for \n    those fields.\n  - The result of UsdPrim::GetAppliedSchemas now will never contain duplicate \n    schema names. \n  (Issue: [#2336](https://github.com/PixarAnimationStudios/OpenUSD/issues/2336))\n\n- Added a function to PcpDynamicFileFormatContext that allows dynamic file \n  formats to also compose and use attribute default values when determining the \n  file format arguments for a dynamic payload.\n\n- Updated UsdUtilsComputeAllDependencies and UsdUtilsExtractExternalReferences \n  to now work correctly with anonymous layer identifiers.\n  (Issue: [#2073](https://github.com/PixarAnimationStudios/USD/issues/2073)\n\n- Fixed bug where UsdUtilsComputeAllDependencies would return layers with \n  unexpected identifiers.\n  (Issue: [#2074](https://github.com/PixarAnimationStudios/USD/issues/2074)\n\n- Fixed an issue in which nested usdz packages could result in additional \n  dependencies being processed. \n  (Issue: [#2134](https://github.com/PixarAnimationStudios/USD/issues/2134)\n\n- Fixed an issue to prevent asstInfo:identifier metadata from triggering an \n  additional dependency when creating usdz archives. \n  (Issue: [#2135](https://github.com/PixarAnimationStudios/USD/issues/2135)\n\n- Fixed a regression in UsdUtilsModifyAssetPaths to preserve explicit \n  declaration of an empty SdfAssetPath.\n\n- Fixed a bug where UsdUtils.UsdzAssetIterator would change the process' current \n  working directory.\n\n- Updated UsdSkel to remove warnings when UsdSkel attributes are authored on a \n  prim but the UsdSkelBindingAPI schema is not applied. Please ensure that prims \n  that have authored UsdSkel attributes have the UsdSkelBindingAPI schema \n  applied.\n\n- Added stage variable expressions feature. The initial implementation supports \n  string-valued variables and expressions with string substitutions \n  (e.g., `\"asset_${NAME}\".usd`) in sublayer, reference, and payload asset paths, \n  variant selections, and asset and asset[]-valued attributes and metadata. \n  Additional work slated for an upcoming release include:\n  - Support for integer and boolean value types as well as comparison and other \n    functions.\n  - Improved change processing to avoid resync notices for affected prims when \n    variables are authored.\n  - Detailed documentation\n\n- Fixed error messages for invalid specs in SdfCopySpec. \n  (PR: [#2440](https://github.com/PixarAnimationStudios/OpenUSD/pull/2440))\n\n- Removed the use of USD_SHADE_MATERIAL_BINDING_API_CHECK environment variable.\n  Updated UsdShadeMaterialBindingAPI application check by adding a\n  supportLegacyBindings argument to relevant APIs, which currently defaults to \n  true. Note this default will be updated when Hydra 2.0 is enabled by default.\n\n- Fixed thread-safety issues that could lead to crashes in UsdSkel computations. \n  (Issue: [#1742](https://github.com/PixarAnimationStudios/OpenUSD/issues/1742), \n   PR: [#2369](https://github.com/PixarAnimationStudios/OpenUSD/pull/2369))\n\n### UsdImaging\n\n- Added UsdImagingPrimAdadpter::GetFullModelDrawMode and \n  UsdImagingDelegate::GetModelDrawMode to support access of model draw mode from \n  Hydra scene delegate.\n\n- Disabled shadows on the \"simple\" headlight.\n  (PR: [#2373](https://github.com/PixarAnimationStudios/OpenUSD/pull/2373))\n\n- Added various updates and fixes to UsdImagingStageSceneIndex. This class is \n  being developed as a replacement for UsdImagingDelegate and is missing support \n  for UsdSkel, UsdGeomSubset, and material binding collections. Code that wants \n  to try the new implementation can add it to a render index by following the \n  example of UsdImagingGLEngine, or enable it in UsdImagingGLEngine (and \n  usdview) with the USDIMAGINGGL_ENGINE_ENABLE_SCENE_INDEX env var.\n  - Added support for coordinate systems. Clients \n    expecting prims of type coordSys (such as hdPrman) need to run \n    HdsiCoordSysPrimSceneIndex to pick up the coordinate systems from the \n    UsdImagingStageSceneIndex.\n  - Added support for material binding strength (UsdShade's bindMaterialAs).\n  - Improved support for selection and instancing.\n  - Updated to force instance interpolation for non-constant and non-uniform \n    primvars on point instancers.\n  - Updated to prefer (prefixed) primvars over custom primvars (such as \n    normals).\n  - Applied multiple fixes to native and point instancing.\n  - Updated to honor displayColor/Opacity authored on materials.\n  - Added support for showing unloaded prims as bounding boxes.\n  - Updated to communicate to schema adapters whether a USD property was updated \n    or resynced.\n  - Added UsdImagingRootOverridesSceneIndex and HdsiLegacyDisplayStyleOverrideSceneIndex \n    and used these to implement some UsdImagingGLEngine behaviors when using \n    scene indices.    \n  - Added support for UsdGeomNurbsCurves and UsdGeomNurbsPatches. Note that \n    these are currently drawn as hulls by Storm, and not tessellated or \n    evaluated.\n  - Added both time-varying and property change invalidation for the \"light\" \n    data source.\n  - Made change when adding a new UsdImaging_DrawModeStandin draw mode standin \n    prim that now deletes its child subtree of draw mode standin prims.\n  - Made change that skips the draw mode processing of dirtied prims with an \n    existing draw mode standin ancestor.\n  - Made change that includes instancedBy data source in the draw mode standin \n    data source.\n\n- Updated UsdImagingGLEngine to use the scene globals scene index to set the \n  active render settings prim.\n\n- Fixed a performance regression in HdLight::Sync.\n  (Issue: [#2416](https://github.com/PixarAnimationStudios/OpenUSD/issues/2416))\n\n- Allow population of instanced USD materials as uninstanced Hydra materials. \n  While Hydra doesn't directly support instanced materials yet, this allows \n  scenes to make use of instancing at the USD level and still render correctly.  \n  If a UsdShadeMaterial is natively instanced on the UsdStage, it will share the \n  potentially numerous UsdShadeShader nodes, and the material-level parameter \n  interface (which can be connected to shader parameters) can be overridden on \n  each instance.\n\n- Fixed issues where certain authored transforms were being lost in certain \n  cases where point instancers were being instanced by native instancers, or \n  where transforms were authored on a point instancer's non-imageable prototype \n  root.\n  (Issue: [#1663](https://github.com/PixarAnimationStudios/OpenUSD/issues/1663),\n   [#2359](https://github.com/PixarAnimationStudios/OpenUSD/issues/2359))  \n\n- UsdImaging now returns material networks by render context,\n  and strips render context namespace from the terminal names.\n  Consequently we no longer need HdsiTerminalsResolvingSceneIndex.\n  Saved 30+ seconds of production shot Storm load time by keeping\n  Storm from traversing RenderMan-specific USD material networks\n  only to then immediately discard them.\n\n- Made change so UsdImagingDataSourceMaterial now strips the material path\n  prefix from names of the nodes in the network. This both makes\n  networks more concise to inspect and removes an unnecessary\n  source of superficial variation in otherwise-matching materials\n  recurring across models, enabling more effective de-duplication\n  of matching material networks across assets.\n\n- Made UsdImaging_PiPrototypeSceneIndex performance improvements,\n  reducing load time of a production shot from 67 sec to 13 sec.  \n\n- Moved UsdImagingModelSchema to HdModelSchema.\n\n### Storm\n\n- Fixed value of aspectMask in HgiVulkanTexture::CopyBufferToTexture.\n  (PR: [#2442](https://github.com/PixarAnimationStudios/OpenUSD/pull/2442))\n\n- Fixed a bug with GPU instance frustum culling prims with geom subsets. \n  (Issue: [#1892](https://github.com/PixarAnimationStudios/OpenUSD/issues/1892))\n\n- Updated HdStRenderPassState::ComputeViewport to use _GetFramebufferHeight when \n  computing the viewport.\n\n- Made various fixes for Metal backend:\n  - Fixed null pointer checks during buffer binding.\n    (PR: [#2401](https://github.com/PixarAnimationStudios/OpenUSD/pull/2401))\n  - Fixed 1x1 texture mipmap generation.\n    (PR: [#2264](https://github.com/PixarAnimationStudios/OpenUSD/pull/2264))\n  - Fixed HgiInteropMetal to use FP16 textures to allow clients to make use of \n    Extended Dynamic Range (EDR).\n    (PR: [#2482](https://github.com/PixarAnimationStudios/OpenUSD/pull/2482))\n  - Fixed tessellation for Intel GPUs.\n\n- Cleaned up HdStRenderPassState setup of face cull mode.\n  (PR: [#2433](https://github.com/PixarAnimationStudios/OpenUSD/pull/2433))\n\n- Cleaned up codeGen mixins related to OpenSubdiv to reduce the size of compiled \n  shader source.\n\n- Moved several Storm specific implementation aspects from lib/hd to lib/hdSt \n  including: smoothNormals, flatNormals, vertexAdjacency, bufferArrayRegistry, \n  strategyBase, resource, bufferResource, computation, extComp, drawItem BAR \n  accessors.\n\n- Updated Basis curves shader to use difference rather than tangent vector when \n  the latter is degenerate. This prevents artifacts where the last segment \n  during tessellation is dropped when pinning curves (having the last points of \n  a cubic curve all equal).\n\n- Fixed rendering of pinned catmullRom curves to include the first and last \n  segments when drawn as lines.\n  (Issue: [#2445](https://github.com/PixarAnimationStudios/OpenUSD/issues/2445))\n\n- Optimized shader processing in Storm to provide stable shadertext to the\n  GPU. This allows some GPU drivers to fully utilize shader compilation caches,\n  significantly reducing the time spent compiling and linking GLSL shaders. In\n  one production shot, this time went from 5+ seconds to 60 ms.\n\n### Hydra\n\n- HdsiPrimTypePruningSceneIndex now nulls out the primType\n  and dataSource of pruned prims without also pruning the subtree\n  beneath them. This allows application-supplied renderBuffers,\n  drawTargets, etc. that are children of pruned prim types to survive.\n\n- HdFlatteningSceneIndex now lazily populates its cache\n  of flattened data sources using a two phase scheme that \n  more efficiently accommodates both scene updates and concurrent traversal.\n\n- Fixed HdRenderIndex::GetSceneDelegateAndInstancerIds for prims that don't \n  contain a \"delegate\" data source.\n\n- Added API for accessing model draw mode data in HdSceneDelegate.\n\n- Fixed alpha channel blending in hgiInterop composite functions. \n\n- Added lens distortion, focus, and split diopter parameters to HdCamera.\n\n- Updated fullscreen shader to use the correct texture sampling function for the \n  depth texture.\n\n- Updated HdxAovInputTask to create and manage a \"depthIntermediate\" texture to \n  facilitate ping-pong behavior for image shaders.\n\n- Added legacy and Hydra 2.0 support for the render terminals in \n  PxrRenderTerminalsAPI\n\n- Made HdFlatteningSceneIndex modular by allowing clients to give a container \n  data source mapping names of data sources to instances of \n  HdFlattenedDataSourceProvider which a client can implement to provide \n  additional flattening policies. Some other fixes and potential performance \n  improvements to HdFlatteningSceneIndex.\n\n- Updated HdFlatteningSceneIndex to additionally flatten coordinate system \n  bindings and constant primvars.\n\n- Introduced HdsiPrimTypePruningSceneIndex which generalizes \n  HdsiMaterialPruningSceneIndex and is also used to prune scene lights.\n\n- Renamed HdMaterialBindingSchema to HdMaterialBindingsSchema and made it \n  contain a schema rather than just a path to the material to bind. This is to \n  facilitate material binding strength in usdImaging.\n\n- Added GetSchemaToken to Hydra schemas where appropriate.\n\n- Made shading nodes with implementation source code work with scene indices.\n  Updated HdRenderPassState to make the calls to set the camera, override window \n  policy, and framing/viewport orthogonal.\n\n- Added scene index to manage global scene data such as the active render \n  settings prim.\n\n- Added scene index that provides dependency registration and namespace \n  filtering functionality in service of render settings prims.\n\n- Removed query of \"material\" data source for \n  HdSceneIndexAdapterSceneDelegate::GetLightParamValue as it has significant \n  overhead.\n\n- Updated to return light parameters within \"light\" data source from \n  UsdImagingStageSceneIndex in order to satisfy render delegates which don't \n  make use of GetMaterialResource for lights.\n\n- Added display names and tags for scene index instances (in service of user \n  interfaces).\n\n- Added renderInstanceId on HdRenderIndex (used for application-specific \n  tracking and in service of user interfaces).\n\n- Added scene index plug-in registry support for closure-based registration for \n  application-specific configuration of downstream scene indices.\n\n- Updated HdSceneIndexPluginRegistry::InsertionPhase from unsigned int to int \n  (in preparation for future \"before vs after per-renderer branch distinction\").\n\n- Added HdSceneIndexObserver::RenamePrims for future use (with fallback behavior \n  to convert to removes and adds).\n\n- Updated back-end Hydra emulation to allow fallthrough to delegate->Get for an \n  empty result even when a \"primvars\" data source is present.\n\n- Updated HioImage plugin precedence to space values out, for more flexibility. \n  Note that the relative precedence of existing HioImage subclasses has not \n  changed. Future plugin authors can add support for new image loading libraries \n  by subclassing HioImage, specifying supported file extensions, and choosing a \n  precedence relative to the basic USD plugins; the highest precedence plugin is \n  used.\n\n- Added native instancing and point instancer support for lights to Hydra and \n  HdPrman. Analytic and geometric (mesh) lights are now supported in instance \n  prototypes all the way through Hydra, and Hydra render bridges may now expect \n  to see instancing information on light prims. Note that mesh light support in \n  HdPrman still requires that scene indices be enabled.\n\n- Made various performance improvements:\n  - HdMergingSceneIndex now traverses the contents of added input scenes\n    using task parallelism.\n  - Improved performance of Hd_SortedItems when using Hydra scene indexes\n    with nested point and native USD instancing, reducing load time of a\n    production shot by 3 seconds.\n  - Added a new approach to toggling use of scene materials, using\n    a Hydra filtering scene index to prune material prims and bindings.\n    Reduced time to load a production shot in Storm (with scene materials off)\n    by 10 seconds, by avoiding unnecessary shader compiling and linking.\n  - HdxColorCorrectionTask now does OCIO 3D LUT generation and shadertext \n    generation in an async task, saving 750 msec of render startup time by \n    moving work off the main thread.\n\n### RenderMan Hydra Plugin\n\n- Added support for RenderMan 25.\n\n- Fixed a bug where black artifacts often show up in RenderMan renders that use \n  UsdPreviewSurface with a normal map. The fix handles bumpNormals that are \n  facing away from the camera when the surface is facing forwards, based on what \n  PxrNormalMap does in the RixAdjustNormal method.\n\n- Added support to use scene option settings on the active render settings prim.\n\n- Added functionality to configure and use the render settings filtering scene \n  index for filtering and dependency functionality.  \n\n- Improved performance of HdPrman significantly when rendering scenes with very \n  high instance counts by making use of RenderMan nested group instancing.\n\n- Added support for instanced lights.\n\n- Updated RenderMan args parser to camelCase shader node context for \n  displayFilters, to match how its done for sampleFilter, lightFilter and \n  pixelFilter.\n\n- Updated usdRiPxr schemas to reflect updates to RenderMan args files for \n  RenderMan 24.0.\n\n### usddiff\n\n- Enhanced usddiff to work with usdz packages. Files contained in usdz packages \n  are now iterated and diffed individually. A specific diff program may be \n  specified when image files are encountered in packages by setting the \n  USD_IMAGE_DIFF environment variable. The USD_IMAGE_DIFF_FORMATS environment \n  variable can optionally be set to indicate the file extensions that the image \n  diffing tool supports. These are specified in a comma-separated list with the \n  default being \"'bmp', 'jpg', 'jpeg', 'png', 'tga', 'hdr'\".\n\n### usdrecord\n\n- Disabled HdxPresentTask from running during recordings to avoid unneeded use \n  of GL.\n  (PR: [#2391](https://github.com/PixarAnimationStudios/OpenUSD/pull/2391))\n\n### usdview \n\n- Fixed a bug in usdview's metadata tab where not all inherited paths would \n  necessarily be listed for the inherits field.\n\n- Fixed PySide object initialization to avoid runtime exceptions when using \n  PySide6 6.5.x.\n  (PR: [#2392](https://github.com/PixarAnimationStudios/OpenUSD/pull/2392)) \n\n- Fixed a bug with display of prims having property paths for IDs in Python \n  Hydra scene browser.\n\n### Alembic plugin\n\n- Updated UsdAbc plugin to re-enable USD_ABC_READ_ARCHIVE_USE_MMAP to be true by \n  default and match the current behavior of Alembic 1.7.9+. \n  (PR: ([#2439](https://github.com/PixarAnimationStudios/OpenUSD/pull/2439))\n\n### MaterialX\n\n- Added MaterialX v1.38.7 support to allow for MaterialX support on Metal. \n  (Issue: [#2216](https://github.com/PixarAnimationStudios/OpenUSD/issues/2216), \n   PR: [#1965](https://github.com/PixarAnimationStudios/OpenUSD/pull/1965), \n   [#2324](https://github.com/PixarAnimationStudios/OpenUSD/pull/2324), \n   [#2402](https://github.com/PixarAnimationStudios/OpenUSD/pull/2402))\n\n- Fixed a bug where calling SdfLayer::ImportFromString with a .mtlx document \n  would fail to resolve relative XML include paths.\n\n- Added Distant light support to MaterialX in Hydra.  \n  (Issue: [#2411](https://github.com/PixarAnimationStudios/OpenUSD/issues/2411))\n\n### Documentation\n\n- Made various documentation updates:\n  - Fixed various broken links and replaced references to graphics.pixar.com \n    with openusd.org\n  - Clarified propagation of UsdNotice::ObjectChanged() notification\n  - Updated dynamic payload doc with new uniform attributes\n  - Fixed usdRender RenderPass doc example\n  - Added descriptions for opaque and group attribute types\n  - Added more info on using session layer\n\n- Added the doxygen awesome theme to doc build. This theme adds responsive \n  design so documentation can be viewed on mobile devices, and a dark/light \n  theme to improve visibility. Note that doxygen awesome needs doxygen 1.9 or \n  better to build properly.\n  (PR: [#2050](https://github.com/PixarAnimationStudios/OpenUSD/pull/2050))\n\n- Fixed typo in primvar documentation\n  (Issue: [#2386](https://github.com/PixarAnimationStudios/OpenUSD/issues/2386))\n\n- Fixed reported broken link\n  (Issue: [#2450](https://github.com/PixarAnimationStudios/OpenUSD/issues/2450))\n\n- Fixed pipeline plugInfo.json doc example\n  (Issue: [#2346](https://github.com/PixarAnimationStudios/OpenUSD/issues/2346))\n\n- Replaced references to ASCII with Text in USD binaries to account for UTF-8 \n  support\n  (PR: [#2394](https://github.com/PixarAnimationStudios/OpenUSD/pull/2394), \n   [#2395](https://github.com/PixarAnimationStudios/OpenUSD/pull/2395))\n\n- Clarified sourceColorSpace = sRGB only applies to transfer curve and not gamut\n  (Issue: [#2303](https://github.com/PixarAnimationStudios/OpenUSD/issues/2303))\n\n- Added info on changing metadata via variants\n  (Issue: [#2326](https://github.com/PixarAnimationStudios/OpenUSD/issues/2326))\n\n## [23.05] - 2023-04-18\n\nSupport for Python 2 has been removed in this release.\n\n### Build\n\n- Changes and fixes for build_usd.py:\n  - MaterialX support is now enabled by default.\n  - Updated to use libpng version v1.6.38.\n    (PR: [#1946](https://github.com/PixarAnimationStudios/USD/pull/1946))\n  - Fixed error when using Visual Studio 2019 or later with \n    `--generator Ninja`. \n    (PR: [#2192](https://github.com/PixarAnimationStudios/USD/pull/2192))\n  - Cleanup unused code. \n    (PR: [#2267](https://github.com/PixarAnimationStudios/USD/pull/2267))\n  - NASM is no longer a required dependency when enabling OpenImageIO support \n    on Windows.\n  - Updated to use TurboJPEG 2.0.1 on all platforms for OpenImageIO.\n\n- Various CMake fixes\n  (PR: [#2275](https://github.com/PixarAnimationStudios/USD/pull/2275)\n   [#2030](https://github.com/PixarAnimationStudios/USD/pull/2030), \n   [#2179](https://github.com/PixarAnimationStudios/USD/pull/2179))\n\n- Bumped CMake minimum to 3.14 on linux to support vfx2020 dependencies. Other \n  platforms require 3.20 or greater.\n  (Issue: [#1620](https://github.com/PixarAnimationStudios/USD/issues/1620))\n\n- Updated CMake to use PROJECT_SOURCE_DIR and PROJECT_BINARY_DIR instead of \n  CMAKE_SOURCE_DIR and CMAKE_BINARY_DIR respectively, in order to allow building \n  USD as a subdirectory.\n  (PR: [#1971](https://github.com/PixarAnimationStudios/USD/pull/1971))\n\n- Removed uic as alternative to pysideX-uic from FindPySide.cmake as uic will \n  produce a py file containing C++ code.\n\n- Added ability to build docstrings for the USD Python modules. This can be \n  enabled by specifying the `PXR_BUILD_DOCUMENTATION`, \n  `PXR_ENABLE_PYTHON_SUPPORT`, and `PXR_BUILD_PYTHON_DOCUMENTATION` options \n  when running CMake, or `--docs`, `--python`, and `--python-docs` when running \n  build_usd.py. See BUILDING.md for more details.\n  (Issue: [#196](https://github.com/PixarAnimationStudios/USD/issues/196))\n\n- Fixed issue when PXR_PY_UNDEFINED_DYNAMIC_LOOKUP is explicitly set when\n  packaging wheels, or when cross compiling to a Python environment that is not \n  the current interpreter environment. The value will now be set automatically \n  during cmake configuration.\n  (Issue: [#1620](https://github.com/PixarAnimationStudios/USD/issues/1620))\n\n- Various fixes for build issues, including missing headers on different \n  platforms and compilers. \n  (PR: [#2194](https://github.com/PixarAnimationStudios/USD/pull/2194), \n   [#2215](https://github.com/PixarAnimationStudios/USD/pull/2215))\n\n- Various fixes for compiler warnings from clang. This has reduced the warning \n  count on MacOS builds from several hundred to roughly 60. \n  (PR: [#1684](https://github.com/PixarAnimationStudios/USD/pull/1684), \n   [#1997](https://github.com/PixarAnimationStudios/USD/pull/1997))\n\n- Removed PXR_USE_PYTHON_3 CMake option.\n\n### USD\n\n- Fixed a bug where undefined behavior could be invoked when reading a corrupted \n  .usdz file.\n\n- Fixed a bug where UsdStage::LoadAndUnload() could over invalidate and\n  recompose.\n  (Issue: [#2286](https://github.com/PixarAnimationStudios/USD/issues/2286))\n\n- Fixed deadlock when opening and closing layers from multiple threads in \n  Python. \n  (Issue: [#2306](https://github.com/PixarAnimationStudios/USD/issues/2306))\n\n- Fixed deadlock in TfType::GetAllDerivedTypes(), which could appear when \n  opening and closing layers from multiple threads. \n  (Issue: [#2282](https://github.com/PixarAnimationStudios/USD/issues/2282))\n\n- VtArray now uses operator new (including global replacements) to allocate \n  memory.\n\n- Fixed a bug where VtArray could read from freed memory when inserting copies \n  of elements from within the container.\n\n- Fixed various safety issues for reading from corrupted .usdc files.\n\n- The composition engine now supports internal references expressed by a \n  variant. Internal references also now retain visibility to namespaces outside \n  the referenced scope.\n\n- The composition engine now prohibits scene paths with embedded variant \n  selection components (such as </A{x=y}B>) when used for composition arc \n  targets. This is enforced both at the Sdf schema level and composition \n  subsystem level. Schema enforcement means that invalid paths cannot be \n  authored via runtime API, nor will they be accepted by the text parser. As a \n  deployment aid, the environment setting \n  SDF_SCHEMA_PROHIBIT_INVALID_VARIANT_SELECTIONS may be set to '0' to continue \n  to allow these paths at the schema & parser level. Regardless of the setting, \n  however, the composition system will always prohibit such paths where invalid \n  for composition purposes.\n\n- UsdCollectionAPI now handles the combination of includeRoot=true and\n  expansionRule=explicitOnly without throwing a coding error.  \n  (Issue: [#2258](https://github.com/PixarAnimationStudios/USD/issues/2258)\n\n- Updated RapidJSON used by pxr/base/js to the latest available version as of \n  January 2023. \n  (Issue: [#2219](https://github.com/PixarAnimationStudios/USD/issues/2219))\n\n- Completed initial support for Schema Versioning\n  - usdGenSchema now allows API schemas with version suffixes to be generated.\n  - usdGenSchema does not allow a schema to inherit from another version of a \n    schema in the same family.\n  - usdGenSchema generates schema identifier and family tokens in the library \n    tokens class.\n  - UsdPrimDefinitons now enforce the rule that more than one version of the \n    same API schema family cannot be applied at the same time.\n  - If more than one version of the same API schema family is auto-applied to a \n    schema only the latest version of the API schema is applied.\n  - Added a templated static overload of FindSchemaInfo to UsdSchemaRegistry.\n\n- Improved UsdStage update performance when applying or removing an API schema \n  on prim.\n  (Issue: [#2343](https://github.com/PixarAnimationStudios/USD/issues/2343))\n\n- Added \"collection:<name>\" to the CollectionAPI schema as a real, opaque \n  valued, attribute for allowing collections to be targeted by a relationship.\n\n- usdGenSchema now allows multiple-apply schemas to declare a property with no \n  base name via the special property name \"__INSTANCE_NAME__\".\n\n- usdGenSchema generates literal token identifiers (instead of camel cased \n  identifiers) by default. Some usdLux and usdVol token identifiers have been \n  updated.\n\n- Added SdfFileFormat::FindAllDerivedFileFormatExtensions to determine all \n  extensions supported by a subset of file formats without loading the plugins \n  for those formats. \n\n- Updated usdRi schema to include RiRenderPassAPI, which provides \n  cameraVisibility and matte collection attributes to provide collections of \n  objects relevant to the renderer for respective concepts. Note by default \n  cameraVisibility collection includes all objects, and matte collection \n  excludes all objects.\n\n- Updated RenderPass schema to include a renderVisibility collection property, \n  which provides a collection of objects relevant to the renderer. Note by \n  default all objects are included in the collection.\n\n- Fixed race condition in ArFilesystemWritableAsset that could cause writing \n  to the same directory from multiple threads to fail if that directory had \n  not yet been created.\n\n- Added support for array vstruct sdrShaderPropery types.\n\n- Resolved UDIM tiles when calculating asset dependencies.\n  (PR: [#2133](https://github.com/PixarAnimationStudios/USD/pull/2133))\n\n- File format plugins can now specify read / write / edit capabilities in their \n  plugInfo.json file.\n  (Issue: [#2147](https://github.com/PixarAnimationStudios/USD/issues/2147))\n\n- Added pointWeights attribute to NurbsCurves in usdGeom.\n  (Issue: [#1554](https://github.com/PixarAnimationStudios/USD/issues/1554))\n\n- Introduced GetAppliedItems for SdfListOp API. Deprecates \n  GetAddedOrExplicitItems.\n\n- SdfSpec::ClearInfo now errors for unknown metadata fields.\n\n- UsdRenderComputeSpec() now skips schema properties when aggregating authored \n  settings.\n\n- Replaced uses of boost::hash with TfHash throughout the base and usd packages \n  of pxr. \n  (PR: [#2173](https://github.com/PixarAnimationStudios/USD/pull/2173),\n   [#2176](https://github.com/PixarAnimationStudios/USD/pull/2176), \n   [#2181](https://github.com/PixarAnimationStudios/USD/pull/2181), \n   [#2182](https://github.com/PixarAnimationStudios/USD/pull/2182), \n   [#2184](https://github.com/PixarAnimationStudios/USD/pull/2184), \n   [#2185](https://github.com/PixarAnimationStudios/USD/pull/2185), \n   [#2186](https://github.com/PixarAnimationStudios/USD/pull/2186), \n   [#2187](https://github.com/PixarAnimationStudios/USD/pull/2187), \n   [#2190](https://github.com/PixarAnimationStudios/USD/pull/2190), \n   [#2191](https://github.com/PixarAnimationStudios/USD/pull/2191), \n   [#2289](https://github.com/PixarAnimationStudios/USD/pull/2289), \n   [#2298](https://github.com/PixarAnimationStudios/USD/pull/2298), \n   [#2304](https://github.com/PixarAnimationStudios/USD/pull/2304), \n   [#2329](https://github.com/PixarAnimationStudios/USD/pull/2329))\n\n- Removed use of \"register\" keyword, which is no longer supported as of C++17. \n  (PR: [#2204](https://github.com/PixarAnimationStudios/USD/pull/2204))\n\n- Various changes to remove uses of boost. \n  (Issue: [#2203](https://github.com/PixarAnimationStudios/USD/issues/2203), \n   [#2211](https://github.com/PixarAnimationStudios/USD/issues/2211),\n   [#2217](https://github.com/PixarAnimationStudios/USD/issues/2217),\n   [#2221](https://github.com/PixarAnimationStudios/USD/issues/2221), \n   [#2247](https://github.com/PixarAnimationStudios/USD/issues/2247), \n   [#2290](https://github.com/PixarAnimationStudios/USD/issues/2290) \n   PR: \n   [#2210](https://github.com/PixarAnimationStudios/USD/pull/2210), \n   [#2213](https://github.com/PixarAnimationStudios/USD/pull/2213),\n   [#2213](https://github.com/PixarAnimationStudios/USD/pull/2224), \n   [#2249](https://github.com/PixarAnimationStudios/USD/pull/2249), \n   [#2291](https://github.com/PixarAnimationStudios/USD/pull/2291))\n\n- Fixed a bug where UsdUtilsCreateNewUsdzPackage would not correctly handle \n  relative filesystem paths pointing to a directory outside the directory \n  containing the root layer.\n\n- Fixed a bug where using a Usd.PrimRange from an expired Usd.Stage in Python \n  would crash or throw an unexpected exception. \n  (Issue: [#2160](https://github.com/PixarAnimationStudios/USD/issues/2160))\n\n- Updated USD compliance checker to error instead of warn when the following \n  issues are found:\n  - Shader prims are not encapsulated within a container type prim.\n  - For 8bit normal maps, if sourceColorSpace is not \"raw\" and if bias and \n    scale values are not provided.\n\n- Updated deprecation logic for USD_SHADE_COORD_SYS_IS_MULTI_APPLY, such that\n  warnings are reported when the environment variable is set to Warn and usdPrim \n  is using any old style coordSys property. \n\n- Updated testUsdBugs to explicitly use integer division, so as to avoid passing \n  a float to truncate method. \n  (Issue: [#2170](https://github.com/PixarAnimationStudios/USD/issues/2170), \n   PR: [#2171](https://github.com/PixarAnimationStudios/USD/pull/2171))\n\n- Updated UsdProperty.GetPropertyStack and \n  UsdProperty.GetPropertyStackWithLayerOffsets python APIs to take a \n  `UsdTimeCode` as an optional argument, to match their respective C++\n  APIs. \n  (PR: [#2317](https://github.com/PixarAnimationStudios/USD/pull/2317))\n\n- Added compliance tests to make sure UsdSkelBindingAPI is applied on prims \n  having properties provided by UsdSkelBindingAPI. Also added a compliance test \n  to ensure that UsdSkelBindingAPI has only been applied on SkelRoot prims or \n  descendants of SkelRoot prims.\n\n- Updated usdRiPxr codeless schemas with updated concepts from Renderman 24.5.\n\n- Fixed ZipFileWriter context manager to discard any archived files if the root \n  USD file is non-compliant. This fixes usdzip and usdfixbrokenpixarschemas \n  usage with non-compliant usdz archives.\n\n- Fixed various gf tests to resolve floating point precision issues on ARM \n  (aarch64) platforms.\n  (PR: [#2115](https://github.com/PixarAnimationStudios/USD/pull/2115))\n\n- Updated UsdShadeShaderDefUtils::GetPrimvarNamesMetadataString to only append \n  existing non-empty primvar strings into the list in order to avoid appending \n  of empty strings on aarch64 platforms.\n  (PR: [#2131](https://github.com/PixarAnimationStudios/USD/pull/2131))\n\n### UsdImaging\n\n- Added UsdImaging::SetRootInstancerId as a method to set new member \n  `_rootInstancerId`, which is now used as the fallback case for \n  UsdImagingDelegate::GetInstancerId.\n\n- Fixed crash in UsdImagingAdapterRegistry by comparing with the end iterator \n  of the same unordered_map.\n  (PR: [#2197](https://github.com/PixarAnimationStudios/USD/pull/2197))\n\n- Removed material prims under a point instancer when resyncing.\n  (Issue: [#1960](https://github.com/PixarAnimationStudios/USD/issues/1960))\n\n- Fixed shader compilation errors with usdImagingGL volume tests on macOS.\n\n- Fixed errors and inconsistencies with usdImagingGL instancing tests related \n  to Ptex textures and handling of \"--cullStyle\" and \"--shading\" test command \n  line arguments.\n  (Issue: [#2097](https://github.com/PixarAnimationStudios/USD/issues/2097))\n\n- Updated PreviewSurface.glslfx to mirror changes made to simpleLighting.glslfx \n  to make sure the intensity and exposure on dome lights are properly affecting \n  PreviewSurface materials.\n  \n- Added GetRenderSettingsNamespaces to HdRenderDelegate to get namespaces for \n  render settings attributes that are render-specific.\n\n- Updated HdRenderSettingsSchema and UsdImagingRenderSettingsAdapter.\n\n- Add Scene Index support functions to the UsdImagingRenderSettingsAdapter.\n\n- Added UsdImagingUsdSchema which combines data sources internal to UsdImaging.\n\n- Fixed a cyclic reference (in UsdImaging_NiInstanceAggregationSceneIndex_Impl) \n  where a data source in a HdRetainedSceneIndex \n  (_InstanceObserver::_retainedSceneIndex) held on to a ref ptr to a data \n  structure (namely, _InstanceObserver) containing a ref ptr to the scene index. \n  This was causing a memory leak and a crash in _InstanceObserver::PrimsRemoved.\n\n- Made various small fixes and clean-ups to the filtering scene indices required \n  for USD native and point instancing support.\n\n- UsdImagingPiPrototypesPropagatingSceneIndex now lists the paths of the \n  propagated prototypes for a USD prototype. This is intended for clients that \n  need to translate a USD path to a Hydra scene path, e.g., to support \n  selection highlighting.\n\n- UsdImagingNiPrototypesPropagatingSceneIndex populates the HdInstanceSchema \n  for native instances.\n\n- Enabled selection highlighting of USD native instances when using scene \n  indices. The UsdImagingSelectionSceneIndex processes the path to a native USD \n  instance by reading its HdInstanceSchema and populating the HdSelectionSchema.\n\n- Fixed purpose handling in the UsdSkelImagingAdapter.\n\n- Added adapter support for transporting render settings scene description \n  (which includes render products and render vars, but not render passes).\n\n- Fixed an issue where having multiple prim/API adapters could cause double \n  population in UsdImagingStageSceneIndex.\n\n- Added support for \"keyless\" API schema adapters which have an opportunity to \n  contribute to any prim.\n\n- GetInstanceCategories now works under nested instancing, returning categories \n  for all instances in the flattened hierarchy. \n  (Issue: [#2002](https://github.com/PixarAnimationStudios/USD/issues/2002))\n\n- Fixed crash due to out of bounds access in \n  UsdImagingInstanceAdapter::GetScenePrimPaths.\n  (Issue: [#2268](https://github.com/PixarAnimationStudios/USD/issues/2149), \n   PR: [#2278](https://github.com/PixarAnimationStudios/USD/pull/2167))\n\n- Updated UsdImagingCoordSysAPIAdapter to provide access to coordSys hydra prim \n  (HdCoordSysSchema), which provides information about coordSys name and xform \n  values. Also added dependency of this coordSys prim to the bound target xform.\n\n- Removed Populate() from the UsdImagingStageSceneIndex. \"Population\" is now \n  done automatically when the stage is set.\n\n### Storm\n\n- Fixed use-after-free bug in basis-curves helper function in hdSt.\n\n- Implemented support for the remaining refined drawing modes for basisCurves \n  and meshes using HW tessellation with HgiMetal.\n\n- Renamed HdBinding to HdStBinding and moved to hdSt since this is used only by \n  Storm.\n  \n- Improved performance when freeing argument buffers after command buffer \n  submission with HgiMetal.\n  (PR: [#2046](https://github.com/PixarAnimationStudios/USD/pull/2046))\n\n- Fixed crash when loading non-filterable textures with HgiMetal.\n  (PR: [#2048](https://github.com/PixarAnimationStudios/USD/pull/2048))\n\n- Changed the name of an internal debug class to avoid problems with Cocoa \n  View classes.\n  (PR: [#2256](https://github.com/PixarAnimationStudios/USD/pull/2256))\n\n- Added HorizontallyNormalizedFilmbackCoordinates to renderPass.glslfx for \n  material shaders needing to draw in image space.\n\n- Fixed picking of semi-transparent fragments by using a small alpha threshold \n  value when discarding fragments. \n\n- Fixed a bug to avoid an infinite loop and issue a coding error when passing \n  relative paths to HdSystemSchema::Compose.\n\n- Improved the performance of cards stand-ins in Storm. Edges of cutouts may \n  show slightly increased artifacts as a result.\n\n### Hydra\n\n- Fixed a bug in scene index emulation where removing an Rprim or Bprim \n  from HdRenderIndex would remove all of that prim's children as well.\n\n- Moved UsdImaging_SceneIndexPrimView, an iterator to traverse all ancestors of \n  a prim in a scene index, to HdSceneIndexPrimView.\n\n- HdInstanceSchema now includes the index of a native instance within the \n  instancer instancing the prototype.\n\n- Added special case for sprim dirty bits translation for emulated mesh lights.\n\n- Added fix that ensures that HdSceneIndexAdapterSceneDelegate uses unique names \n  with HdSceneIndexNameRegistry.\n\n- Added optional argument needsPrefixing to HdRenderIndex::InsertSceneIndex \n  to indicate whether input scene index needs prefixing.\n\n- Added missing .tiff extension to hioOiio\n  (PR: [#2307](https://github.com/PixarAnimationStudios/USD/pull/2307))\n\n- Fixed double transforms in Hydra when using the new scene index API.\n\n- Added support for transporting render settings scene description in Hydra.\n\n- Added scene globals schema to encapsulate global state necessary to \n  orchestrate a render.\n\n- Fixed computed view transform for the shadow matrix.\n\n- Made HdxTask::_hgi member private. Subclasses should use the protected \n  _GetHgi() method instead.\n\n- Exported HdxTask::Sync to allow for custom render task creation and use. \n  (PR: [#2178](https://github.com/PixarAnimationStudios/USD/pull/2178))\n\n- Added HdCoordSysSchema which provides \"name\" member field and its builder \n  interface.  \n\n- Fixed a memory leak during framebuffer resize.\n  (PR: [#2342](https://github.com/PixarAnimationStudios/USD/pull/2342))\n\n### Renderman Hydra Plugin\n\n- The RenderMan Hydra delegate now transfers attributes from material to \n  geometry that binds the material. This is useful in cases such as displacement\n  bounds and subsurface trace groups.\n\n- Removed a deprecated staging flag, HD_PRMAN_ENABLE_LIGHT_MATERIAL_NETWORKS\n\n- Fixed hdPrman slowdown when rendering many AOVs.\n\n- Fixed an issue where normal maps going through the RtxHioImage plug-in were \n  being linearized. HdPrman now provides a \"sourceColorSpace=raw\" argument when \n  the rtxplugin is being invoked for a mtlx image node that has type \n  \"ND_image_vector[2,3,4]\"; the type comes about based on the mtlx image node's \n  \"signature\" param. This also affects the MaterialX Chess Set scene.\n\n- Fixed an issue with MaterialX texcoord nodes referring to texture coordinates \n  as \"uv\" instead of \"st\". Now, as the MaterialX network is translated we swap \n  out texcoord nodes for geompropvalue nodes that look up \"st\".\n\n- Fixed a crash in RtxHioImage plugin used by hdPrman, as a result of passing \n  nullptr for RixContext. Explicit nullptr guards are now added for the same.\n\n- Added improvements for rendering with Solaris's husk, including support for \n  RenderMan display drivers and command line arguments.\n\n- Reworked and reorganized the testHdPrman test harness to use the \n  RenderSettings Prim by default, instead of the UsdRenderSpec.\n\n- Updated riley geometry instances for rprims owned by hydra instancers \n  regardless of local dirty bit state to ensure that instance primvars are \n  updated.\n\n- Made hdPrman invalidation more granular for improved performance  \n\n- HdPrman now uses Renderman nested instancing for nested point instancer \n  hierarchies, which can provide significant performance and memory footprint \n  improvements in scenes with heavy nested instancing. This feature is enabled \n  by default, and can be disabled by setting \n  HD_PRMAN_DISABLE_NESTED_INSTANCING=1. Users should be aware that picking and \n  selection of individual instances may not work as expected when this feature \n  is enabled and HdPrman is in use. Users who need to use instance picking with \n  HdPrman should disable this feature.\n\n### usdrecord\n\n- Fixed crash on startup when using PySide6.\n\n### usdview\n\n- Fixed python exceptions in usdview when selecting relationship targets whose \n  path is either a property path or is a path to any object that doesn't exist \n  on the stage.\n\n- Added a display menu item to toggle display of dome light background texture \n  images when dome lights are enabled.\n  (PR: [#2123](https://github.com/PixarAnimationStudios/USD/pull/2123))\n\n- Fixed an error from the incorrect use of hasattr() when using openColorIO \n  color management.\n  (Issue: [#2254](https://github.com/PixarAnimationStudios/USD/issues/2254))\n\n- Fixed usdview to hide viewport frame when --norender is set\n\n- Updated usdview Hydra Scene Browser to be compatible with more PySide \n  versions and macOS\n\n### MaterialX\n\n- Fixed MaterialX materials with the name 'material' \n  (Issue: [#2076](https://github.com/PixarAnimationStudios/USD/issues/2076))\n\n- Fixed issue for MaterialX namespaces when adding MaterialX nodes to a node \n  graph.\n\n- Fixed MaterialX split string array parsing to split only on \",\" delimiter and \n  not \",\" and spaces.  \n  (Issue: [#2268](https://github.com/PixarAnimationStudios/USD/issues/2268), \n   PR: [#2278](https://github.com/PixarAnimationStudios/USD/pull/2278))\n\n- Updated usdMtlx parser to parse various MaterialX metadata into sdr \n  properties.\n  (Issue: [#1874](https://github.com/PixarAnimationStudios/USD/issues/1874),\n   PR: [#1895](https://github.com/PixarAnimationStudios/USD/pull/1895))\n\n### Documentation\n\n- Improved Python help() documentation for USD APIs when Python docstrings are\n  built, as described in Build section above.\n\n- Various documentation updates, including:\n  - Improved TfError documentation\n  - Renamed image source filenames in tutorial docs\n  - Added thread-safety guidance docs for ArResolver::RefreshContext()\n  - Updated contributing guidelines\n  - Updated docs on GeomPointInstancer xform resolution\n  - Fixed incorrect description of SkelAnimation binding example, cleanups to \n    UsdSkel documentation and examples\n  - Updated UsdLuxShadowAPI properties docs\n  - Added additional asset resources to \"Downloads and Videos\" page\n  - Fixed the path to the basisCurves example asset in the documentation.\n\n- Updated Windows build instructions example in README.md to build into \n  non-protected directory.\n  (PR: [#1994](https://github.com/PixarAnimationStudios/USD/pull/1994))\n\n- Updated \"Environment Setup\" section of Tutorials page to specify adding \n  USD_INSTALL_ROOT/lib to the PATH environment variable on Windows when \n  running the tutorials. \n  (PR: [#2198](https://github.com/PixarAnimationStudios/USD/pull/2198))\n\n- Added general guidance on FAQ page on where to install USD DLLs and plugins \n  on Windows.\n  (PR: [#1788](https://github.com/PixarAnimationStudios/USD/pull/1788))\n\n- Updated UsdUVTexture and UsdPreview docs to clarify usages of scale, bias and \n  sourceColorSpace when using an 8bit Normal Map, in order to satisfy tangent \n  space requirement of the normals.\n\n- Updated USD toolset documentation to include usdfixbrokenpixarschemas.\n\n## [23.02] - 2023-01-24\n\nVersion 23.02 is the last release that supports Python 2. Support for Python 2 \nwill be removed in the next release.\n\n### Build\n\n- The usd-core PyPI package now supports Apple Silicon.\n  (Issue: [#1718](https://github.com/PixarAnimationStudios/USD/issues/1718))\n\n- Added support for Python 3.10.\n  (PR: [#2007](https://github.com/PixarAnimationStudios/USD/pull/2007))\n\n- Added support for Visual Studio 2022, and removed 2015. The supported versions\n  are now 2017, 2019, and 2022.\n  (PR: [#2007](https://github.com/PixarAnimationStudios/USD/pull/2007))\n\n- The minimum supported Boost version is now 1.70.\n  (PR: [#2007](https://github.com/PixarAnimationStudios/USD/pull/2007), \n   [#2150](https://github.com/PixarAnimationStudios/USD/pull/2150))\n\n- Updated CMake build system to use modern FindPython modules and import\n  targets. This fixes an issue on macOS where the correct Python framework\n  directory would not be added as an RPATH. Clients that were specifying CMake\n  arguments like PYTHON_EXECUTABLE or PYTHON_LIBRARY or PYTHON_INCLUDE_DIR to \n  control the behavior of the deprecated find modules will need to use the \n  corresponding arguments for the new modules. \n  (Issue: [#2082](https://github.com/PixarAnimationStudios/USD/issues/2082), \n   PR: [#2091](https://github.com/PixarAnimationStudios/USD/pull/2091))\n\n- Fixed macOS code signing issue when using the Xcode CMake generator that would\n  cause builds to be unusable on Apple Silicon.\n\n- Various CMake build system cleanup. \n  (PR: [#1958](https://github.com/PixarAnimationStudios/USD/pull/1958), \n   [#2152](https://github.com/PixarAnimationStudios/USD/pull/2152))\n\n- Fixed threading issue causing assertions in Windows debug builds. \n  (PR: [#2127](https://github.com/PixarAnimationStudios/USD/pull/2127))\n\n- Fixed compiler warning when using GfVec3f::GetLength with -Wconversion \n  enabled. (PR: [#2060](https://github.com/PixarAnimationStudios/USD/pull/2060))\n\n- Removed dependency on boost::program_options.\n  (PR: [#2114](https://github.com/PixarAnimationStudios/USD/pull/2114))\n\n- Fixed issue where C++ executables like sdfdump would fail to run on Linux and \n  macOS in certain configurations due to a missing RPATH entry for the USD core\n  libraries.\n\n### USD\n\n- Numerous performance and memory optimizations.\n\n- Updated UsdSkel plugin bounds computation to include nested skeletons in the \n  case where there are no bindings.\n\n- UsdGeomModelAPI::ComputeExtentsHint now uses \n  UsdGeomBoundable::ComputeExtentFromPlugins for boundable models.\n\n- Added malloc tag reporting to sdfdump when run with the TF_MALLOC_TAG \n  environment variable set.\n\n- Fixed bug where handles to .usdc files were not being closed after the \n  associated SdfLayer object was destroyed. \n  (Issue: [#1766](https://github.com/PixarAnimationStudios/USD/issues/1766))\n\n- SdfLayer is now case-insensitive for characters in 'A'-'Z' when looking up \n  layer file format from file extension. \n  (Issue: [#1833](https://github.com/PixarAnimationStudios/USD/issues/1833))\n\n- Improved TfMallocTag performance for parallel applications. For example, time \n  to open one test asset on a UsdStage with tagging enabled decreased from ~40 \n  seconds to ~5 seconds.\n\n- Updated doc discouraging use of ArchGetFileName. \n  (Issue: [#1704](https://github.com/PixarAnimationStudios/USD/issues/1704))\n\n- UsdPrim::ComputeExpandedPrimIndex and UsdPrimCompositionQuery can be used with \n  prototype prims.\n\n- Fixed a composition error involving specializes and subroot references.\n\n- Initial Schema Versioning support. Note that not all of the schema versioning\n  work is complete. In particular, it is not yet possible to generate versioned\n  API schemas through usdGenSchema even though the UsdPrim API for querying and\n  authoring them has been added. Full schema versioning support is expected in\n  a following release.\n  - Added SchemaInfo structure to UsdSchemaRegistry for each schema type that \n    can be retrieved via the FindSchemaInfo method.\n  - Added functions to parse a schema's family and version from its identifier;\n    the family and version are included in each schema's SchemaInfo\n  - Added overloads the existing UsdPrim schema type query methods and API \n    schema authoring methods that can take a schema identifier or a schema \n    family and version.\n  - Added schema family and version based queries, IsInFamily and \n    HasAPIInFamily, to UsdPrim.\n\n- Added missing displayGroup and displayName hints for UsdLux properties that \n  have display hints specified in the PRMan args files. Fixed documentation\n  for CylinderLight's inputs:length property.\n\n- Added \"opaque\" and \"group\" attribute types. Opaque attributes have no value\n  but can be connected to other attributes or targeted by relationships. Group\n  attributes are opaque attributes that are intended to provide a \n  connectable/targetable object that represents a property namespace.\n\n- Minor clean ups to the UsdCollectionMembershipQuery.\n\n- Support for URL-encoded characters in session layer name. \n  (PR: [#2022](https://github.com/PixarAnimationStudios/USD/pull/2022))\n\n- Fixed varying primvar size computation in UsdGeomBasisCurves for pinned cubic\n  curves.\n\n- Made `displayName` metadata available on UsdPrim as well as UsdProperty, \n  and updated `usdview` to optionally use `displayName` in the Prim Browser, \n  when present.  Display Names can use the entire UTF-8 glyph set. \n  (PR: [#2055](https://github.com/PixarAnimationStudios/USD/pull/2055)) \n\n- Added UsdMediaAssetPreviewsAPI schema, an applied API for data in the \n  `assetInfo[\"previews\"]` dictionary on prims.  Initially, this allows robust \n  encoding of (asset) default and per-prim _thumbnail_ previews, but may be \n  expanded to other forms of preview in the future.\n\n- Modified sdffilter, sdfdump, and various tests to use CLI11 instead of \n  boost::program_options.\n  (PR: [#2107](https://github.com/PixarAnimationStudios/USD/pull/2107),\n   [#2109](https://github.com/PixarAnimationStudios/USD/pull/2109),\n   [#2110](https://github.com/PixarAnimationStudios/USD/pull/2110),\n   [#2111](https://github.com/PixarAnimationStudios/USD/pull/2111),\n   [#2113](https://github.com/PixarAnimationStudios/USD/pull/2113))\n\n- Ported usdtree and usdcat utilities from Python to C++.\n  (PR: [#2108](https://github.com/PixarAnimationStudios/USD/pull/2108),\n  [#2090](https://github.com/PixarAnimationStudios/USD/pull/2090))\n\n- Fixed various intermittent unit test failures. \n  (PR: [#2068](https://github.com/PixarAnimationStudios/USD/pull/2068))\n\n- Fixed bug where adding an empty sublayer could cause errors and incorrect \n  results with value clips. \n  (Issue: [#2014](https://github.com/PixarAnimationStudios/USD/issues/2014))\n\n- Added Python bindings for ArAssetInfo. \n  (Issue: [#2065](https://github.com/PixarAnimationStudios/USD/issues/2065))\n\n- Fixed crashes related to the dynamic library loader on macOS 12. \n  (Issue: [#2102](https://github.com/PixarAnimationStudios/USD/issues/2102))\n\n- Fixed issue where incorrect baseline image specifications for unit tests \n  would be silently ignored. \n  (PR: [#1856](https://github.com/PixarAnimationStudios/USD/pull/1856))\n\n- Fixed UsdUtilsModifyAssetPaths to remove duplicate entries if the \n  modification callback returns such entries, and to remove the original entry \n  if the callback returns an empty asset path. \n  (PR: [#1282](https://github.com/PixarAnimationStudios/USD/pull/1282))\n\n- Fixed crash when creating VtArray from Python buffer with over 2^31 elements.\n  (PR: [#2064](https://github.com/PixarAnimationStudios/USD/pull/2064))\n\n- Updated usdchecker to accept references to textures with the \".jpeg\" \n  extension. \n  (PR: [#1919](https://github.com/PixarAnimationStudios/USD/pull/1919))\n\n- Changed UsdShadeCoordSysAPI from a non-applied API schema to multiple-apply \n  API schema. The previous non-applied APIs have been deprecated and will issue\n  a warning when called. Setting the environment variable \n  USD_SHADE_COORD_SYS_IS_MULTI_APPLY to \"False\" will disable these warnings; \n  setting it to \"True\" will disable the deprecated functions.\n\n- Fixed bug where using C++ keywords as token names in schema definitions would\n  cause usdGenSchema to produce uncompilable C++ code. \n  (PR: [#2020](https://github.com/PixarAnimationStudios/USD/pull/2020))\n\n- Removed deprecated UsdRiTextureAPI schema.\n\n### Imaging\n\n- HdRendererPlugin::IsSupported and HdRendererPluginRegistry::GetDefaultPluginId\n  now take an argument indicating if the GPU is enabled to assist in determining\n  what to return to the caller.\n\n- Fixed bug where render settings were not being returned by \n  HdSceneIndexAdapterSceneDelegate.\n\n- Added missing null pointer checks to HdxColorizeSelectionTask.\n  (Issue: [#1991](https://github.com/PixarAnimationStudios/USD/issues/1991))\n\n- Draw mode: cards will now use UsdPreviewSurface materials, expanding renderer\n  compatibility. The draw mode adapter and scene index have accordingly been \n  relocated from UsdImagingGL to UsdImaging.\n\n- Fixed a bug that prevented changes to ModelAPI properties from triggering \n  invalidation.\n\n- Fixed a bug in Storm that prevented certain changes to array-valued primvars\n  from being properly applied.\n\n- Added a warning when a plugin that duplicates built-in prim-handling \n  functionality is detected. Note that overriding built-in prim-type handlers \n  via plugin is not officially supported. The prior behavior remains unchanged \n  (last-to-load wins).\n\n- Updated HdCoordSys::GetName() to return coodSys name in accordance with \n  recently updated CoordSysAPI to be multi-applied API.  \n\n### UsdImaging\n\n- Updated the precedence order of `primvars:ri:attributes:*`, which will now \n  take precedence over `ri:attributes:*`.\n\n- Added support for OCIO 2.1.1 with native Metal support. \n  (PR: [#1936](https://github.com/PixarAnimationStudios/USD/pull/1936))\n\n- Updated UsdImagingGL tests to always render to AOVs and to remove most direct\n  use of OpenGL. This improves consistency of test runs across different system \n  configurations and renderer implementations. Also, fixed minor discrepancies \n  in test command arguments and baseline compare metrics to more closely match \n  internal test suite runs.\n\n- Enabled multisample for Storm AOV image outputs for improved consistency with\n  usdview viewport display.\n\n- Populated the \"system\" container with asset resolution data.\n\n- Fixed UsdImagingBuildHdMaterialNetworkFromTerminal to support multiple input\n  connections.\n\n- Improved point instancing support of usdImaging when using scene indices. \n  This is implemented through a filtering scene index \n  UsdImagingPiPrototypePropagatingSceneIndex.\n\n- Added native instancing support of usdImaging when using scene indices. This\n  is implemented through a filtering scene index \n  UsdImagingNiPrototypePropagatingSceneIndex (doing the instance aggregation) \n  and some changes to the UsdImagingStageSceneIndex itself adding USD native \n  instances and prototypes with identifying data sources.\n\n- Reworked usage of a flattened dependency cache to speed up dependency \n  gathering.\n\n- Added methods for UsdImaging 2.0 prim adapters to represent descendants in \n  terms of population and invalidation. Implemented property change invalidation\n  for material prims via this mechanism. This change also manages time-varying \n  invalidation by making sure that properties of USD shader prims know the hydra\n  material path and locator.\n\n- Moved UsdImaging 2.0 primvar handling from gprim to prim and implemented \n  primvar invalidation.\n\n- Added vector types to dataSourceAttribute.\n\n- Removed HdContainerDataSource::Has, as it is redundant with GetNames and Get,\n  and doesn't in practice fulfill its original intent of being cheaper to query\n  than Get.\n\n- Added initial UsdImaging 2 adapter support for GenerativeProcedural.\n\n- UsdImagingDataSourcePrimvars updated to lazily handle \"primvars:\" \n  relationships as VtArray<SdfPath> data sources.\n\n- Added UsdImagingStageSceneIndex-specific HdDataSourceLocator convention for \n  triggering resync in response to property invalidation.\n\n- Added UsdPrim const& argument to UsdImaging 2.0 adapter methods to enable \n  property-driven population and invalidation.\n\n- Added UsdSkel Dual Quaternion skinning as both a GPU and CPU computation.\n\n- Fixed a crash in UsdSkelBlendShapeQuery::ComputeFlattenedSubShapeWeights, and\n  added asserts around array bounds violations.\n\n- Fixed bug where changing an attribute connection would not update primvars in\n  Hydra. \n  (Issue: [#2013](https://github.com/PixarAnimationStudios/USD/issues/2013), \n   PR: [#2017](https://github.com/PixarAnimationStudios/USD/pull/2017))\n\n- Added CoordSysAPIAdapter to add coordsys support for multi-apply \n  UsdShadeCoordSysAPI instances in UsdImagingStageSceneIndex.\n\n- Fixed UsdImagingStageSceneIndex functionality for subprims with non-empty \n  names, which were previously tripping an assert in SdfPath.\n\n### Storm\n\n- Added missing instancer handling for volumes.\n\n- Renamed Hgi function MemoryBarrier to InsertMemoryBarrier to avoid potential \n  build issues on Windows.\n  (PR: [#2124](https://github.com/PixarAnimationStudios/USD/pull/2124))\n\n- Fixed bug in which dome light prefilter textures were not created for 1x1 \n  input textures.\n\n- Updated texture system to create samplers for udim and ptex layout textures.\n\n- Changed handling of invalid or missing textures. When there is no valid \n  texture, bind a 1x1x1 black fallback texture. The value of TEXTURENAME_valid \n  is now always checked before returning the texture value in the shader. Ptex\n  and udim textures now also bind a boolean TEXTURENAME_valid value.\n\n- Converted mesh.glslfx geometry shader snippets to resource layouts, and \n  introduced HgiShaderFunctionGeometryDesc.\n\n- Added bindIndex member to HgiShaderFunctionTextureDesc.\n\n- Introduced shader variables \"hd_VertexID\", \"hd_InstanceID\", and \n  \"hd_BaseInstance\" to use instead of gl_VertexID, gl_InstanceID, and \n  gl_BaseInstance, respectively, with appropriate values determine by the Hgi \n  backend.\n\n- Various fixes and improvements to HgiVulkan backend, including:\n  - Fixed first vertex binding in vkCmdBindVertexBuffers.\n  - Added check to avoid destroying null Hgi resources in HgiVulkan::TrashObject.\n  - Fixed texture view creation to correctly specify first mip and first layer.\n  - Updated VkPhysicalDevicesFeatures to include additional needed features.\n  - Enabled Vulkan extension VK_EXT_vertex_attribute_divisor and fixed input \n    rate of per-draw command vertex attributes.\n  - Improved shader generation, including proper tracking of location layout \n    qualifiers of shader stage ins and outs and in and out blocks, and binding \n    indices of buffers and textures.\n  - Changed handling of binding indices in HgiVulkanResourceBindings to \n    correspond to those used in shadergen.\n  - Added handling for shader interpolation qualifiers.\n\n- Added fix to convert double mesh primvars to floats if doubles are not \n  supported by the Hgi backend. \n  (Issue: [#2070](https://github.com/PixarAnimationStudios/USD/issues/2070))\n\n- ImageShaderRenderPass now sets a viewport prior to executing a draw. \n\n- Improved rendering of assets with multiple geom subsets by increasing the \n  size of the drawingCoord topology offset and instancePrimvar offset from \n  8-bits to 16-bits.\n  (Issue: [#1749](https://github.com/PixarAnimationStudios/USD/issues/1749), \n   PR: [#2089](https://github.com/PixarAnimationStudios/USD/pull/2089))\n\n- Fixed some potential memory leaks related to HgiMetal resources. \n  (PR: [#2085](https://github.com/PixarAnimationStudios/USD/pull/2085))\n\n- Added StartFrame/EndFrame to HdxPickTask to improve Hgi resource cleanup. \n  (PR: [#2053](https://github.com/PixarAnimationStudios/USD/pull/2053))\n\n- Implemented GPU view frustum culling using compute shaders for \n  HdSt_PipelineDrawBatch (Metal and Vulkan) including minor cleanups to \n  HdStCommandBuffer and HdSt_RenderPass. As part of this, added a way to access\n  drawingCoord values from compute shaders. Also, added support for concurrent \n  dispatch of compute command encoders for Metal. \n  (PR: [#2053](https://github.com/PixarAnimationStudios/USD/pull/2053))\n\n- Updated render pass shader sources to include support for post tessellation \n  control shader stages.\n\n- Updated basis curves and mesh tessellation shader source to use resource \n  layouts for tessellation shaders. \n  (PR: [#2027](https://github.com/PixarAnimationStudios/USD/pull/2027))\n\n- Fixed some cases of undefined Osd symbols for Storm when using Osd shader \n  source.\n\n- Added fix for Dome Light not changing. \n  (PR: [#2125](https://github.com/PixarAnimationStudios/USD/pull/2125))\n\n- Fixed basis curves index computation and validation. This changes the imaging\n  behavior in that non-periodic curves with a vertex count of 2 or 3 are now \n  rendered instead of being ignored.\n\n- Fixed cullstyle resolution for a corner case.\n\n### Hydra\n\n- Added a \"system\" schema.  The \"system\" container is meant to be inherited by \n  prims within a scene index.  Scene indices that prefix and re-root have been \n  updated to preserve the \"system\" container.\n\n- Fixed small bug for how visibility/purpose is handled.\n\n- HdInstancedBySchema: added prototype root which is populated by \n  UsdImagingPiPrototypePropagatingSceneIndex and consumed by \n  UsdImagingNiPrototypePropagatingSceneIndex to support interleaved point and \n  native instancing.\n\n- Removed HdInstanceBySceneIndex in favor of new instancing implementation in \n  UsdImagingPiPrototypePropagatingSceneIndex and \n  UsdImagingNiPrototypePropagatingSceneIndex.\n\n- HdMergingSceneIndex and HdFlatteningSceneIndex: correct initialization when \n  adding an already populated scene index or constructing from an already \n  populated scene index.\n\n- Made data flattened by the HdFlatteningSceneIndex configurable.\n\n- Added initial support of picking for scene indices through HdPrimOriginSchema\n  and HdxPrimOriginInfo.\n\n- Added initial selection support for scene indices through HdSelectionsSchema \n  and HdSelectionSchema which are picked up by the HdxSelectionTracker.\n\n- Introduced HdTypedVectorSchema and HdSchemaBasedVectorSchema.\n\n- Added HdRenderSettings, a Hydra Bprim backing scene description render \n  settings.\n\n- Added scene index that presents computed primvars as authored ones.\n\n- Fixed bug in `HdExtComputationUtils::_GenerateDependencyMap()` with multiple \n  input computations. \n  (PR: [#2058](https://github.com/PixarAnimationStudios/USD/pull/2058))\n\n- Implemented optional scene index for transfer of primvars from material to \n  bound prims.\n\n- Added protection against GIL deadlocks within \n  generativeProceduralResolvingSceneIndex.\n\n- Added support for translation callbacks for custom sprim types within \n  HdDirtyBitsTranslator.\n\n- For mesh lights, nack-end scene index emulation now checks \n  GetLightParamValue(id, isLight) when considering whether a prim whose type is\n  not a light should be treated as one.\n\n- Fixed compile and logic bugs in \n  HdRetainedTypedMultisampledDataSource<T>::GetTypedValue.\n\n- Added source example for a C++ Qt version of Hydra Scene Browser. This is the\n  recommended reference and starting point for integration into applications \n  (aside from usdview).\n\n### Renderman Hydra Plugin\n\n- Added fix to treat invisible faces in the mesh topology as holes.\n\n- Added scene index plugin to present computed primvars as authored ones.\n\n- Added hdPrman support for UsdLuxMeshLightAPI, via the \n  meshLightResolvingSceneIndexPlugin.\n\n- Added support for Renderman Display Filters.\n\n- Removed deprecated MatfiltFilterChain, and associated\n  envvar HD_PRMAN_USE_SCENE_INDEX_FOR_MATFILT.\n\n### usdview\n\n- Fixed usdview exception when right-clicking for a context menu in the \n  Composition tab.\n\n- Included Hydra Scene Browser within usdview.\n\n- Added a function to usdviewApi to get the current renderer.\n\n- Changed the PluginMenu addItem() function to return the added action, so \n  further customizations (such as making it checkable) can be applied to it.\n\n### usdAppUtils\n\n- UsdAppUtilsFrameRecorder now sleeps between render invocations if the frame \n  has not converged to avoid potentially slowing down the render progress.\n\n### usdRecord\n\n- usdrecord can now be run without requiring a GPU by passing the \"--disableGpu\"\n  option on the command line \n  (Issue: [#1926](https://github.com/PixarAnimationStudios/USD/issues/1926)). \n  Note the following:\n  - The GPU is enabled by default.\n  - If no renderer is specified, an appropriate default will be chosen \n    depending on whether the GPU is enabled or not.\n  - Disabling the GPU will prevent the HdxTaskController from creating any \n    tasks that require it.  In particular, this means that color correction is \n    disabled when the GPU is disabled. \n\n### MaterialX Plugin\n\n- Fixed viewport calculation issue with full masking on both Mac and Vulkan\n  MaterialX Plugin.\n\n- Updated MaterialX Imaging Tests, adding more comparisons between the Native \n  and MaterialX implementations of UsdPreviewSurface materials. Note that these\n  PreviewSurface test cases are commented out by default. \n\n### Alembic Plugin\n\n- HDF5 support for the Alembic plugin is now disabled by default.\n\n### Documentation\n\n- Various documentation fixes and cleanup. \n  (PR: [#1995](https://github.com/PixarAnimationStudios/USD/pull/1995))\n\n- Updated sphinx documentation pages to use system fonts. \n  (PR: [#2084](https://github.com/PixarAnimationStudios/USD/pull/2084))\n\n- Added new documentation page showing products using USD. \n  (PR: [#2095](https://github.com/PixarAnimationStudios/USD/pull/2095))\n\n## [22.11] - 2022-10-21\n\n### Build\n- Updated Azure Pipelines configurations used for CI and PyPI\n  The active configurations are now:\n    - Ubuntu 20.04, Python 3.8.10, PySide2 5.15.2.1\n    - macOS 11.7, Python 3.10.6, PySide6 6.3.2\n    - Windows 10, Visual Studio 2019, Python 3.7.9, PySide2 5.15.2.1\n\n- Updated PXR_USE_PYTHON_3 to ON to enable USD Python 3 binding by default. We\n  still anticipate dropping support for Python 2 after the first release in 2023.\n\n- Fixed export of targets for usd monolithic builds (usd_ms).\n  (PR: [#2026](https://github.com/PixarAnimationStudios/USD/pull/2026))\n\n- Updated USD build to optionally use Imath library by using Imath's cmake \n  config package. USD build falls back to using OpenEXR if Imath is not FOUND. \n  Also updated USD's cmake config, pxrConfig.cmake.in to set Imath_DIR \n  accordingly to set the import targets which were used for the USD build.\n  (PR: [#1829](https://github.com/PixarAnimationStudios/USD/pull/1829))\n\n- Disable Ptex support by default when using CMake directly.\n\n- Updated OpenSubdiv version to 3.5.0 to take advantage of build configuration\n  improvements. The USD source remains compatible with OpenSubdiv 3.4.x.\n\n- Updated dependencies for JPEG, OpenImageIO, and Alembic for macOS to improve\n  compatibility with cross architecture and universal builds.\n\n- Updated build_usd.py for macOS with additional options to support specifying a \n  build architecture target and enabling code signing:\n    -build-target {native,x86_64,arm64,universal}\n    -codesign\n\n- Fixed issue where using pxrConfig.cmake from a USD build with MaterialX \n  support enabled would cause linker errors. \n  (Issue: [#1955](https://github.com/PixarAnimationStudios/USD/issues/1955))\n\n### USD\n- Updated gathering of geom subset prims to not use UsdPrimDefaultPredicate and\n  instead use a custom predicate that checks if the prim has a defining \n  specifier, rather than is defined, allowing for correct gathering of geom \n  subsets that are children of Prototype prims.\n\n- Updated ndr parser plugin instantiation to provide a stable ordering for \n  plugin loading.\n\n- Added ability to UsdAttributeQuery to make queries about an attribute's value \n  that only consider opinions \"up to\" or \"stronger than\" a certain edit target \n  or composition arc (via the new UsdResolveTarget object).\n  (Issue: [#1483](https://github.com/PixarAnimationStudios/USD/issues/1483))\n\n- Fixed a bug with calling UsdAttribute::GetResolveInfo at default time where it \n  could erroneously resolve to specs with time samples.\n\n- Updated UsdGeomImageable::GetPurposeVisibilityAttr and \n  ComputeEffectiveVisibility to check that UsdGeomVisibilityAPI is applied \n  before querying any purpose visibility attributes.\n\n- Updated TF_ERROR macros now return void instead of bool like the other \n  diagnostic macros.\n\n- Updated some of the errors that are reported during prim index composition to \n  be more informative.\n\n- Added GetTargetLayer and GetTargetPrimPath convenience functions to\n  UsdPrimCompositionQueryArc.\n\n- Updated UsdPrimCompositionQueryArcs to be validly queried if even after the\n  UsdPrimCompositionQuery that returned them is destroyed.\n\n- Added UsdGeomBBoxCache::ComputeWorldBoundWithOverrides.\n\n- Fixed a bug and updated docs for GfFrustum::ComputeNarrowedFrustum.\n\n- Updated UsdShadeMaterialBindingAPI::UnbindCollectionBinding documentation to\n  explicitly state to use instance name of the targeted collection for unbinding \n  if bindingName was not provided.\n\n- Documented the use of special use of \"@@@\" for asset paths containing \"@\".\n  (Issue: [#1832](https://github.com/PixarAnimationStudios/USD/issues/1832))\n\n- Created a usdzUtils python module, which provides methods like \n  CreateUsdzPackage, ExtractUsdzPackage and UsdzAssetIterator.\n\n- Added a script \"usdfixbrokenpixarschemas\" to update any usda, usdc or usdz \n  asset to respect updated pixar provides schemas. This utility currently fixes \n  MaterialBindingAPI, SkelBindingAPI and authoring of upAxis metadata.\n\n- Updated UsdUtilsComplianceChecker to check if MaterialBindingAPI is applied on \n  the prim which provides a material:binding. Also updated usdchecker unit tests \n  for the same.\n\n- Fixed UsdShadeMaterialBindingAPI to return an empty Material if binding \n  relationship is invalid. \n  (PR: [#2024](https://github.com/PixarAnimationStudios/USD/pull/2024))\n\n- Updated computing bound material core logic to check if MaterialBindingAPI is \n  applied on a prim providing material:binding. Introduced\n  USD_SHADE_MATERIAL_BINDING_API_CHECK environment variable for backward \n  compatibility and default to \"warnOnMissingAPI\". In a later release the \n  default will be updated to \"strict\", which will ignore prims which do not have \n  MaterialBindingAPI applied for bound material computation.\n\n- Updated UsdShadeMaterialBinding::ComputeBoundMaterial logic such that bound\n  material remains consistent irrespective of the load / active state of the \n  target prim on the material:binding relationship.\n\n- Added UsdShadeMaterialBinding::GetResolvedTargetPathFromBindingRel to help\n  clients get the path of the target of the winning binding from bound material \n  computation.\n\n- Added support for merging of collision groups in UsdPhysics.\n  (PR: [#1947](https://github.com/PixarAnimationStudios/USD/pull/1947))\n\n- Updated UsdPhysics documentation to clarify mesh subdivision options which \n  could affect physics colliders.\n  (PR: [#1948](https://github.com/PixarAnimationStudios/USD/pull/1948))\n\n- Added color4 type to Sdr to allow differentiating between color4 and vector4 \n  input types at Sdr level. \n  (PR: [#1894](https://github.com/PixarAnimationStudios/USD/pull/1894))\n\n- Added \"GetAll\" method for multi-apply schemas in codegenTemplates.\n  (PR: [#1773](https://github.com/PixarAnimationStudios/USD/pull/1773),\n   Issue: [#1772](https://github.com/PixarAnimationStudios/USD/issues/1772))\n\n- Added \"renderingColorSpace\" to UsdRenderSetting schema. This describes a\n  renderer's working (linear) colorSpace where all renderer/shader math is \n  expected to happen. Renderer is expected to use its own default when \n  renderingColorSpace is not provided.\n\n- Improved performance in clip manifest generation when no manifest is supplied.\n\n- Improved performance in pcp prim indexing by using a heap rather than a sorted \n  array to handle tasks in priority order.  This improves worst case runtime for \n  task processing from O(n^2 log(n)) to O(n log(n)).\n\n- Changed pcp prim index graph representation, simultaneously expanding size \n  limitations and reducing memory usage by 5-15% in production sets. Also \n  improving composition time performance, saving 35% on one production example. \n\n- Improved pcp composition thread scaling by letting indexing and index \n  publishing proceed concurrently.\n\n- Added node-based API to SdfPathTable so callers can pre-reserve memory\n  locations and insert them into tables later.\n\n- Added VtVisitValue() utility for operating on held-types of VtValues.\n\n- Updated pyInterpreter and pyModule to Account for Python GIL explicit \n  initialization deprecation from Python 3.7 to 3.9\n  (PR: [#1909](https://github.com/PixarAnimationStudios/USD/pull/1909))\n\n- Updated usddiff logic in an attempt to handle files with bogus extensions by \n  trying the usd file format, and copying the files to temporary extensioned \n  files if necessary.\n\n- Updated crateFile core to sanity check spec requirements in \n  prefer-safety-over-speed mode.\n  (Issue: [#1763](https://github.com/PixarAnimationStudios/USD/issues/1763))\n\n- Fixed a bug where TfType::_FindByTypeid() could call FindByName() while still \n  holding the registry lock, resulting in an attempt to recursively require the \n  lock, and a hang.\n\n- Updated USD changelog to indicate fixed but not-documented-as-such\n  CVE-2020-13495.\n  (Issue: [#1966](https://github.com/PixarAnimationStudios/USD/issues/1966))\n\n- Fixed usdc files to use read-only mappings in mmap mode to avoid commit charge \n  on most of the file content, only changing page protections to read/write when \n  detaching outstanding zero-copy-array data.\n\n- Fixed Python 3.11 incompatibility. \n  (PR: [#1928](https://github.com/PixarAnimationStudios/USD/pull/1928))\n\n- Added \"detached layer\" feature to Sdf. This allows clients to specify layers \n  to load \"detached\" from their serialized backing store, isolating them from \n  external changes. In particular, loading .usdc layers as \"detached\" can help \n  avoid crashes or other issues if another process attempts to overwrite those \n  .usdc layers. \n  (Issue: [#1852](https://github.com/PixarAnimationStudios/USD/issues/1852))\n\n- Added SdfLayer::DetachedLayerRules and related API for specifying detached \n  layers.\n\n- Added API to ArAsset, SdfFileFormat and SdfAbstractData to support detached \n  layers.\n\n- Small optimizations to SdfLayer change processing to avoid unnecessary \n  iteration and copies.\n\n- Fixed bug where SdfLayer would not strip file format arguments from \n  identifiers before passing them to ArResolver::GetModificationTimestamp when \n  calling SdfLayer::Save.\n\n- Fixed bug where calling SdfLayer::CreateNew with a file format target would \n  not include the target in the new layer's identifier, causing subsequent \n  lookups via SdfLayer::Find or FindOrOpen with the same arguments to fail.\n\n- Fixed bug causing errors when deleting a variant set containing only empty \n  variants.\n\n- Fixed bug where reloading a text-based .usd layer that was overwritten with a \n  crate-based layer would copy the contents of the crate layer into memory \n  instead of streaming data on-demand. \n\n- Fixed crashes when reading .usda files containing certain strings with escaped \n  quotes. .usda layers with incorrectly escaped/quoted strings (like \"fo\\\\\"o\") \n  will no longer load. \n  (Issue: [#1630](https://github.com/PixarAnimationStudios/USD/issues/1630))\n\n- Fixed UsdUtilsComputeAllDependencies to remove incorrect coding error if a \n  local reference or payload is encountered. \n  (Issue: [#1902](https://github.com/PixarAnimationStudios/USD/issues/1902))\n  \n- Fixed variety of missing symbol exports and header includes. \n  (Issue: [#1942](https://github.com/PixarAnimationStudios/USD/issues/1942), \n   [#1969](https://github.com/PixarAnimationStudios/USD/issues/1969), \n   PR: [#1950](https://github.com/PixarAnimationStudios/USD/pull/1950))\n\n### Imaging\n- Fixed a speculative issue with light invalidation sometimes using dirty bits\n  from the wrong enum.\n  (Issue: [#1719](https://github.com/PixarAnimationStudios/USD/issues/1719))\n\n- Fixes an issue where material binding paths on geometry subsets were not\n  correctly prefixed, leading to missing materials in certain circumstances.\n  (Issue: [#1687](https://github.com/PixarAnimationStudios/USD/issues/1687))\n\n- Updated conversion of UsdImagingGLRenderParams to HdxRenderTaskParams to\n  default to 0.1 for alphaThreshold no matter the transparency mode.\n\n- Added missing initialization of OpenVDB before creating a stream in Hio \n  OpenVDB Utils, preventing crash due to uncaught OpenVDB exception.\n\n- Implemented GPU Indirect Command Buffer (ICB) encoding of draw commands for\n  Storm on Metal.\n  (PR: [#1945](https://github.com/PixarAnimationStudios/USD/pull/1945))\n\n- Fixed GPU Skinning computations to not execute GL error checking for Storm on\n  Metal. (PR: [#1909](https://github.com/PixarAnimationStudios/USD/pull/1963))\n\n- Fixed CPU Frustum culling for Storm on Metal. (PR:\n  [#1978](https://github.com/PixarAnimationStudios/USD/pull/1978))\n\n- Minor optimization for CPU culling.\n  (PR: [#1860](https://github.com/PixarAnimationStudios/USD/pull/1860),\n   [#1956](https://github.com/PixarAnimationStudios/USD/pull/1956))\n\n- Fixed highlighting of selected mesh edges when mesh edges are not otherwise \n  being displayed.\n\n- Extended Hgi interface for buffer and texture bindings to specify which \n  bindings are writable. Non-writable bindings are declared const in shader gen \n  for correctness and potentially improved performance.\n  (PR: [#2042](https://github.com/PixarAnimationStudios/USD/pull/2042))\n\n- Storm draw buffer entries are now aligned to 32 bytes on Metal for improved\n  performance on newer drivers and correctness on older drivers\n  (PR: [#1980](https://github.com/PixarAnimationStudios/USD/pull/1980))\n\n- Implemented a workaround for fragment shader barycentrics and primitive id on \n  older Intel GPU drivers for Storm on Metal.\n  (PR: [#1980](https://github.com/PixarAnimationStudios/USD/pull/1980))\n\n- Refactoring and small performance improvements for the Hydra Scene Index API.\n\n- Fixes an issue with redundant shader compilation requests as a result of \n  rearranged HdBuffer elements.\n\n- Updated HdxTaskController to allow for DomeLight textures to use textures \n  other than the shipped default dome light texture.\n  (Issue: [#1708](https://github.com/PixarAnimationStudios/USD/issues/1708))\n\n- Updated HdSceneIndexAdapterSceneDelegate::GetCameraParamValue to access\n  data sources at nested data source locators. E.g. \n  GetCameraParamValue(cameraId, TfToken(\"lensDistortion:k1\")) accesses the data \n  source at HdDataSourceLocator(TfToken(\"camera\"), TfToken(\"lensDistortion\"), \n  TfToken(\"k1\")).\n\n- Added geomUtil, a library housing mesh generators for common implicit \n  primitives.\n\n- Fixed a bug in the computation of the number of vertex and varying primvars \n  for indexed and periodic cubic basis curves.\n\n- Added support for \"pinned\" basis curves in Hydra, via a scene index plugin \n  render delegates can use to convert \"pinned\" to \"unpinned\" curves.\n\n- Documented that Hydra only supports 100 tiles for UDIM\n  (Issue: [#1846](https://github.com/PixarAnimationStudios/USD/issues/1846))\n\n- Fixed performance issue in HdNoticeBatchingSceneIndex::_PrimsDirtied and\n  _PrimsRemoved which was previously fixed only for _PrimsAdded.\n\n- UpdatedHdRenderIndex to track depth of calls to \n  SceneIndexEmulationNoticeBatchBegin/End to allow for nested batching.\n\n- Unified behavior of procedural resolving scene index's GetChildPrimPaths to \n  match PrimsAdded's forwarding of existing child prims.\n\n- Implemented first pass of materialBinding support within \n  HdFlatteningSceneIndex.\n\n- Added support for prefixing of path array data sources in \n  HdPrefixingSceneIndex.\n\n- Updated HdMergingSceneIndex to allow inputs to sparsely provide either type or \n  data sources and confirms primType value in forwarded _PrimsAdded notices \n  matches the GetPrim behavior.\n\n- Added support for delivering multiple renderContext nodeIdentifier values \n  within HdMaterialNodeSchema.\n\n- Added fallback for HdSceneIndexAdapterSceneDelegate::GetLightParamValue to\n  check against the light terminal node within the \"material\" data source for \n  better compatibility with legacy render delegates.\n\n- Fixed a spurious dirty bit getting set on lights on visibility changes, which \n  could theoretically lead to over-invalidation.\n  (Issue: [#1719](https://github.com/PixarAnimationStudios/USD/issues/1719))\n\n- Fixed rendering issue in colorize selection task in which original contents \n  of render target (the rendered scene) were not properly loaded when \n  rendering and blending the selection color on top.\n\n### UsdImaging\n- Deleted UsdImagingGLLegacyEngine, i.e. usdview's \"HydraDisabled\" renderer.\n  This class was a simple GL3-based USD renderer that was kept as a fallback for\n  hydra, as Hydra Storm GL requires GL 4.5.  However, it was missing many\n  foundational USD features (like instancing) and it's main use (on OSX) has \n  been deprecated by the Storm Metal port.\n  This change doesn't affect any of the existing usdview Hydra backends.  If \n  Hydra can't find any supported backends (e.g. a variant of Storm, Embree, \n  Prman), usdview will now display an empty viewport.\n\n- Added an API for UsdImagingDelegate adapters to request a callback to\n  UpdateForTime. Adapters now invoke this API on relevant invalidation, but\n  UsdImagingDelegate doesn't automatically call UpdateForTime on every\n  invalidation. This can be a major performance benefit in some scenes. Custom\n  adapters need to be updated to work correctly; however, you can revert to the\n  old behavior by setting the env var USDIMAGING_LEGACY_UPDATE_FOR_TIME=1.\n\n- Added a domeLightCameraVisibility render setting that allows turning off the \n  dome light texture rendering while still using the dome light texture for \n  lighting computations.  This is respected by both Storm and Prman.\n  (Issue: [#1769](https://github.com/PixarAnimationStudios/USD/issues/1769))\n\n- Added partial support for point instancer to the scene index implementation.\n\n- Added UsdImagingDataSourceSchemaBased container data source to reduce\n  boilerplate code when writing usd prim adapters that mostly just pass through \n  Usd attribute values.\n\n- Fixed a case where UsdImaging would unnecessarily dirty prims from multiple \n  threads. This was breaking the _PrimsDirtied threading contract.\n\n- Updated LightDataSource to exclude light/lightLink|shadowLink identifiers for \n  trivial collections which include everything within UsdStageSceneIndex.\n\n- Added light/isLight bool and light/materialSyncMode data sources for \n  identifying presence and behavior of LightAPI on non-light types (i.e. mesh \n  light) within UsdStageSceneIndex.\n\n- Implemented Hydra 2.0 interfaces on UsdImagingLightAdapter to return\n  UsdImagingDataSourcePrim so that boundable contributions are present.\n\n- Introduced UsdImagingLightAPIAdapter for UsdImagingStageSceneIndex.\n\n- Updated UsdImagingDataSourceMaterial to answer for unauthored light param\n  attributes (like intensity) to match expectations of legacy hdStorm render \n  delegate.\n\n- Updated disk, distant, dome, plugin, rect and sphere light adapters to \n  implement Hydra 2.0 interfaces for defining prim type. This is combined with \n  the LightAPI schema adapter's contributions.\n\n- Updated UsdImagingGLEngine::Render to release GIL at the top of to avoid \n  deadlocks caused by imaging population code, potentially running plug-ins \n  which indirectly interact with python from multiple threads.\n\n- Fixed an issue where material binding paths on geometry subsets were not \n  correctly prefixed, leading to missing materials in certain circumstances. \n  Consumers of UsdImagingDelegate::GetMeshTopology() can now expect any geometry \n  subsets present on the topology to express full index paths for their id and \n  materialId properties.\n\n- Fixed rendering of excluded geometries upon modification of stage in a session \n  layer. (PR: [#1949](https://github.com/PixarAnimationStudios/USD/pull/1949))\n\n- Improved performance for UsdImagingDelegate::SetTime by pre-caching path\n  dependencies in parallel.\n  (PR: [#1815](https://github.com/PixarAnimationStudios/USD/pull/1815),\n   Issue: [#1813](https://github.com/PixarAnimationStudios/USD/issues/1813))\n\n- Improved performance of UsdImagingInstanceAdapter::_Populate by using \n  SdfPathSet instead of SdfPathVector for instance paths.\n  (PR: [#1823](https://github.com/PixarAnimationStudios/USD/pull/1823))\n\n- Updated usdImaging tests to detect differences between visibly distinct \n  reference images by tweaking idiff failure values.\n  (PR: [#1866](https://github.com/PixarAnimationStudios/USD/pull/1866))\n\n### Storm\n- Added new TF_DEBUG code HDX_DEBUG_DUMP_SHADOW_TEXTURES allowing\n  users to save the shadow textures produced by HdxShadowTask to image files.\n\n- Improved handling of oversized buffers in HdStInterleavedMemoryManager and\n  HdBufferArrayRegistry.\n\n- Added overload of HdInstanceRegistry::GarbageCollect that takes in a callback\n  function to be called when the resource instance is removed, now used to \n  properly destroy Hgi resources in HdStResourceRegistry.\n\n- Various fixes and improvements to HgiVulkan support.\n\n- Updated HdxSimpleLightTask to warn about the need to truncate the number of \n  lights when changes are made to the light set, instead of every frame.\n\n### Renderman Hydra Plugin\n- Updated minimum RenderMan version required by hdPrman to 24.1 to avoid an\n  issue where left-handed geometry may be shaded incorrectly.\n\n- Updated HdPrman plugin to respect \"vector\" role for instance primvars of type\n  VtArray<GfVec3> and pass an array of floats to rman.\n\n- Added support for terminal SdrPropertyType in hdPrman.\n\n- Updated MatFiltSceneIndexPlugin to allow scene index filters that interact \n  with materials to have access to terminal names in a renderer agnostic way by\n  executing HdSiTerminalsResolvingSceneIndex earlier in the scene index stack.\n\n- Added support for lens distortion. HdPrmanCamera::Sync reads the lens \n  distortion parameters, setting up the projection shader with the correct fov \n  and screen window. In order to render lens distortion, we aim to switch to the \n  PxrCamera projection shader in a later release (requiring RenderMan 25).\n\n- Updated the default of HD_PRMAN_USE_SCENE_INDEX_FOR_MATFILT to true for\n  better inspectability.\n\n- Added support to respect the doubleSided parameter on USD meshes with\n  UsdPreviewSurface materials applied to them. Also added support for cullStyle,\n  enabling, e.g., GL-like backface culling.\n\n- Updated UsdPreviewSurface OSL shader to improve appearance of transparency \n  when opacityThreshold is zero.\n\n- Added gridGroup support to hdPrman for VDB grids. For now all grids provided \n  in the VDB are included.\n\n### usdview\n- Updated usdview's Bounding box dashed lines drawing to use Hgi interface \n  instead of glLineStipple.\n\n- Moved the \"View\" menu in usdview into the Viewer panel as a reorganized set of \n  new menus.\n\n- Added the ability to save a screengrab from the Viewer of current frame in \n  usdview.\n\n- Added the guides column in the usdview Prim View to choose which cameras to \n  show oracles on.\n\n- Fixed (on posix platforms only) an issue where the usdview state file could be\n  corrupted when closing multiple instances of usdview simultaneously.\n\n- Added ability to specify detached layers in usdview using the --detachLayers, \n  --detachLayersInclude, and --detachLayersExclude arguments. \n  (Issue: [#1852](https://github.com/PixarAnimationStudios/USD/issues/1852))\n\n- Update usdview's layer stack view to be more informative of the effect of \n  cumulative layer offsets on each sublayer, including the auto-scaling that \n  occurs between layers with differing time codes per second.\n  (Issue: [#1782](https://github.com/PixarAnimationStudios/USD/issues/1782))\n\n- Fixed a bug in usdview where the property view would break when displaying an \n  array valued attribute whose resolved value is an unsupported or non-array \n  type.\n\n### MaterialX Plugin\n- Added support for locally defined custom nodes, and custom nodes that use\n  textures/texture coordinates\n  (Issue: [#1636](https://github.com/PixarAnimationStudios/USD/issues/1636))\n\n- Added support for MaterialX materials that use nodes outside nodegraphs and\n  nodegraph input/interface connections\n  (Issue: [#1636](https://github.com/PixarAnimationStudios/USD/issues/1636))\n\n- Added support for Custom Material Nodes that use textures.\n  (Issue: [#1786](https://github.com/PixarAnimationStudios/USD/issues/1786))\n\n- Added MaterialX tests to UsdImagingGL.\n\n- Added initial material caching for simple MaterialX Materials in Storm.\n\n- Updated HdStMaterialXShaderGen to use default geomprop/primvar value.\n  (Issue: [#1880](https://github.com/PixarAnimationStudios/USD/issues/1880))\n\n### Alembic Plugin\n- Fixed Alembic plugin to not collapse Alembic geometries into their transform \n  parents if the parent has multiple children.\n  (PR: [#1940](https://github.com/PixarAnimationStudios/USD/pull/1940))\n\n\n## [22.08] - 2022-07-21\n\nSupport for Python 2 is sunsetted as of this release. We anticipate dropping\nsupport after the first release in 2023, tentatively scheduled for January.\n\n### Build\n- Updated dependencies to align with VFX Reference Platform CY2020, with\n  some exceptions to work around various build issues on different platforms.\n\n- Added support for native builds on Apple Silicon.\n  It is possible to cross compile for Intel systems by building within an\n  x86_64 architecture environment, for example, by creating an x86_64 shell\n  via \"arch -x86_64 zsh\" and then running the build within that shell.\n  (PR: [#1875](https://github.com/PixarAnimationStudios/USD/pull/1875))\n\n- Added support for PySide6. By default, the build will search first for PySide6\n  then PySide2 then PySide.  Users may specify the following CMake variables to\n  influence this search behavior:\n    - PYSIDE_USE_PYSIDE2=TRUE  to force the use of PySide2 or\n    - PYSIDE_USE_PYSIDE=TRUE   to force the use of PySide\n  (PR: [#1898](https://github.com/PixarAnimationStudios/USD/pull/1898))\n\n- Support for PySide is deprecated and will be removed in a future release.\n\n- Changes and fixes for build_usd.py:\n  - Removed special handling when being run from Maya's Python.\n  - Fixed detection of Python library and include directories when run with a\n    virtualenv-based Python.\n    (PR: [#1692](https://github.com/PixarAnimationStudios/USD/pull/1692))\n  - Fixed detection of Python libraries with ABI tags.\n    (Issue: [#1724](https://github.com/PixarAnimationStudios/USD/issues/1724))\n\n- Fixed build errors on Windows with OpenVDB v7.0.0+.\n\n- Monolithic builds no longer add the \"usd_\" prefix to library names by default.\n\n- Cleanup for miscellaneous build errors and compiler warnings.\n  (Issue: [#806](https://github.com/PixarAnimationStudios/USD/issues/806),\n  PR: [#1696](https://github.com/PixarAnimationStudios/USD/pull/1696))\n\n- Unit tests will now extract files that fail baseline comparisons to\n  ${CMAKE_BINARY_DIR}/Testing/Failed-Diffs/${TEST_NAME}\n  (PR: [#1839](https://github.com/PixarAnimationStudios/USD/issues/1839))\n\n### USD\n- Automatically disable glibc malloc hooks support on glibc versions >= 2.34.\n\n- Removed support for Ar 1.0, which was deprecated in v21.11.\n\n- Added ability to disable Ndr plugins via the `PXR_NDR_DISABLE_PLUGINS` env var.\n\n- Added NdrRegistry::AppendDiscoveryResult to allow clients to explicitly\n  set additional discovery results that would not be found through the plugin\n  system.\n  (PR: [#1810](https://github.com/PixarAnimationStudios/USD/issues/1810))\n\n- Reverted collaborative layer loading feature while investigating intermittent\n  crashes.\n\n- Fixed bug where authoring opinions at certain sites for prims using inherits\n  and/or specializes arcs would not trigger change processing and notifications.\n\n- Fixed bug with the composition of reference/payload list ops across\n  sublayers with different time codes per second or layer offsets.\n  (Issue: [#1778](https://github.com/PixarAnimationStudios/USD/issues/1778))\n\n- Added the apiSchemaOverride feature to usdGenSchema that allows a schema\n  definition to explicitly define sparse overrides to properties it expects to\n  be included from a built-in API schema. See:\n  https://graphics.pixar.com/usd/release/api/_usd__page__generating_schemas.html#Usd_APISchemaPropertyOverride\n\n- Updated usdgenschemafromsdr to read Sdr node paths with environment variables.\n\n- Fixed UsdUtilsUpdateSchemaFromSdrNode:\n  - Non connectable nodes do not get any connectivity assigned.\n  - Fixed pruning of properties when only typedSchemaForAttrPruning is set.\n\n- Fixed issue where UsdInherits::GetAllDirectInherits might not have returned\n  all direct inherit paths and might have returned paths that were not actually\n  inherits.\n\n- Fixed issue with removing references in sublayers with differing time codes\n  per second.\n  (Issue: [#1778](https://github.com/PixarAnimationStudios/USD/issues/1778))\n\n- UsdAttribute::GetTimeSamplesInInterval will no longer open value clips\n  outside the requested interval when interpolateMissingClipValues is disabled.\n\n- Improved memory allocation for value clips by using a shared pointer to the\n  array of time mapping in Usd_Clips.\n  (Issue: [#1774](https://github.com/PixarAnimationStudios/USD/issues/1774),\n  PR: [#1777](https://github.com/PixarAnimationStudios/USD/pull/1777))\n\n- Improved performance of interpolating attribute time samples.\n  (PR: [#1883](https://github.com/PixarAnimationStudios/USD/pull/1883))\n\n- Improved UsdStage loading/repopulation performance and thread scalability.\n\n- Improved .usdc write performance for integer arrays.\n\n- Fixed UsdGeomImageable::ComputeProxyPrim to implement non-pruning semantics\n  when computing the purpose value for the targeted prim.\n\n- Removed Primvar API on UsdGeomImageable which was deprecated in v19.03.\n  All remaining uses of this API have been updated to use UsdGeomPrimvarsAPI.\n\n- Added UsdGeomPlane schema.\n  (Issue: [#772](https://github.com/PixarAnimationStudios/USD/issues/772),\n  PR: [#1819](https://github.com/PixarAnimationStudios/USD/pull/1819))\n\n- Cleaned UsdShadeConnectableAPIBehavior code to not throw warnings when\n  querying for incompatible prim type, which has no plugin registered.\n\n- Updated OSL and Args parsers to use Sdr's nested page delimiter of \":\",\n  instead of \".\". Updated documentation for the same in UsdShadeInput and\n  SdrShaderProperty.\n\n- Updated usdRiPxr schemas to reflect updates to RenderMan args files and to\n  include other schema classes:\n  - Added schemas for all RenderMan plugins/concepts, plus Options, Attributes,\n    and Primvars.\n  - Added RenderMan default plugins schema classes and display drivers schema\n    classes.\n  - Updated previously generated schemas to use \":\" as the nested page delimiter\n    in display groups.\n  - A few vector3 attribute types were updated to use\n    sdrUsdDefinitionType=\"float3\", to provide appropriate SdfValueTypeName in\n    the generated schema.\n\n- Added UsdRenderPass and UsdRenderDenoisePass schemas to UsdRender.\n\n- Added UsdProc schema domain for representing procedural data and an\n  initial concrete UsdProcGenerativeProcedural schema.\n\n- Added UsdHydraGenerativeProceduralAPI to the now-repurposed usdHydra schema\n  domain.\n\n- Miscellaneous small fixes.\n  (PR: [#1775](https://github.com/PixarAnimationStudios/USD/pull/1775),\n  PR: [#1842](https://github.com/PixarAnimationStudios/USD/pull/1842),\n  PR: [#1845](https://github.com/PixarAnimationStudios/USD/pull/1845),\n  PR: [#1850](https://github.com/PixarAnimationStudios/USD/issues/1850))\n\n### Imaging\n- Fixed crash in GlfSimpleShadowArray::GetShadowMapTexture, avoiding discrepancy\n  between the lighting context/light data and the simple shadow array data.\n\n- Added HdChangeTracker::GetInstanceIndicesChangeCount to detect changes to\n  instance indexing.\n  (PR: [#1754](https://github.com/PixarAnimationStudios/USD/pull/1754))\n\n- Fixed bug in HdRenderIndex::RemoveSceneIndex where a client removes a scene\n  index that was added with a non-trivial scene path prefix.\n\n- Fixed double-creation of Bprims when using scene index emulation.\n  (PR: [#1737](https://github.com/PixarAnimationStudios/USD/pull/1737))\n\n- Various fixes to primvar sampling in scene index emulation and the usdImaging\n  stage scene index.\n\n- Fixed inconsistencies for clipping planes to work with scene index emulation.\n\n- HdPrimvarSchema role tokens: changing capitalization for consistency with how\n  these are used elsewhere in Hydra.\n\n- GLSLFX shaders can now consume int- and int-array valued primvars.\n\n- Fixed codegen of HdGetScalar_* for GLSL bindings to primvars.\n  (Issue: [#1862](https://github.com/PixarAnimationStudios/USD/issues/1862),\n  PR: [#1863](https://github.com/PixarAnimationStudios/USD/issues/1863))\n\n- Exposed secondary selection highlight color as a settable value on\n  HdxTaskController.\n  (PR: [#1771](https://github.com/PixarAnimationStudios/USD/issues/1771))\n\n- Added HdGp library for Hydra procedurals which have read access to the input\n  scene and can generate (or update) prims beneath a given prim.\n  HdGpGenerativeProcedural subclasses may be provided by plugins and are\n  resolved/evaluated/updated via an HdGpGenerativeProceduralResolvingSceneIndex.\n\n  HdGp procedurals are disabled by default but may be enabled by setting the\n  HDGP_INCLUDE_DEFAULT_RESOLVER environment variable to 1.\n\n- Added support for \"includeDisconnectedNodes\" within material network data\n  source to trigger legacy behavior for renderers which rely on Hydra 1.0\n  behavior.\n\n- Fixed HdMergingSceneIndex::GetChildPrimPaths to incorporate ancestor paths\n  of inputs with specified root paths.\n\n### UsdImaging\n- Added basic edit processing support for the USD scene index.\n\n- Added basic support for SampleFilters in RenderSettings in UsdImaging scene\n  delegate and HdPrman render delegate.\n\n- Added hdSi library to support implicit shapes in UsdImagingStageSceneIndex.\n\n- Added usdProcImaging library for imaging UsdProcGenerativeProcedural prims.\n\n- Added initial support for API schema adapters in UsdImagingStageSceneIndex,\n  along with an adapter for UsdShadeMaterialBindingAPI (direct bindings only).\n\n- Implemented Hydra 2.0 methods on UsdImagingMaterialAdapter.\n\n- Added API for accessing AOV render buffers to UsdImagingGLEngine.\n\n- Removed remaining direct uses of OpenGL from UsdImagingGLEngine.\n\n- Deprecated UsdImaging_GetUdimTiles.\n\n- Fixed \"model:drawMode\" evaluation to apply to components without\n  \"GeomModelAPI\" applied.\n\n- Updated UsdImagingCameraAdapter::TrackVariability to consider all attributes\n  on the camera prim.\n  (PR: [#1797](https://github.com/PixarAnimationStudios/USD/pull/1797))\n\n- Improved performance when handling large number of native instances.\n  (Issue: [#1740](https://github.com/PixarAnimationStudios/USD/issues/1740),\n  PR: [#1822](https://github.com/PixarAnimationStudios/USD/pull/1822),\n  PR: [#1932](https://github.com/PixarAnimationStudios/USD/pull/1932))\n\n- Fixed light collection change-tracking.\n  (PR: [#1653](https://github.com/PixarAnimationStudios/USD/pull/1653),\n  PR: [#1930](https://github.com/PixarAnimationStudios/USD/pull/1930))\n\n- Fixed bug where coordSys Sprims were not dirtied on transform changes on the\n  target prim.\n\n- Updated UsdImagingPointInstancerAdapter to register velocity and\n  acceleration primvars.\n  (PR: [#1849](https://github.com/PixarAnimationStudios/USD/pull/1849))\n\n- Fixed bug where changes to materials bound to geom subsets were not processed.\n  (Issue: [#1837](https://github.com/PixarAnimationStudios/USD/issues/1837),\n  PR: [#1838](https://github.com/PixarAnimationStudios/USD/issues/1838))\n\n- Fixed UsdImagingPrimAdapter computation of dirty bits for primvars.\n  (PR: [#1807](https://github.com/PixarAnimationStudios/USD/issues/1807))\n\n- Fixed thresholds for testUsdImagingGLPurpose to be more accurate.\n  (PR: [#1827](https://github.com/PixarAnimationStudios/USD/issues/1827))\n\n### Storm\n- Added a render setting for the maximum number of lights to support in\n  Storm. This should be used with caution, as Storm hasn't been optimized for\n  large numbers of lights.\n\n- Added API export tags to HdStTextureIdentifier.\n  (Issue: [#1758](https://github.com/PixarAnimationStudios/USD/issues/1758))\n\n- Improved HgiGraphicsCmds interface for binding vertex buffers.\n  (PR: [#1876](https://github.com/PixarAnimationStudios/USD/pull/1876))\n\n- Stopped adding fallback/unconnected material param names to the list of a\n  HdSt_MaterialNetworkShader's primvars.\n\n- Changes and fixes for hgiVulkan backend:\n  - Updated some missing HgiVulkanCapabilities and desired Vulkan extensions.\n  - Fixed unsafe use of pointers to objects in temporary scopes.\n    (Issue: [#1911](https://github.com/PixarAnimationStudios/USD/issues/1911))\n\n- Fix crash when mesh prim has authored points and faceVertexCounts but\n  not faceVertexIndices.\n\n- Transform two channel (grayscale + alpha) PNG images into RGBA format.\n  (Issue: [#1796](https://github.com/PixarAnimationStudios/USD/issues/1796))\n\n- Storm volumes: making material final to avoid the volume shader being replaced\n  by the default material network that does not work for volumes.\n\n- Updated HdSt_DrawBatch::Prepare() to take a HgiGraphicsCmds instance to allow\n  combined submission of GPU work.\n\n- Improved organization of internal methods in HdSt_PipelineDrawBatch and\n  HgiMetalGraphicsCommands and HgiGraphicsPipeline.\n  (PR: [#1859](https://github.com/PixarAnimationStudios/USD/pull/1859))\n\n- Fixed inconsistent naming of HgiDeviceCapabilitiesBitsBasePrimitiveOffset.\n  (PR: [#1858](https://github.com/PixarAnimationStudios/USD/pull/1858))\n\n- Removed redundant shader resource layout declarations from Storm shader\n  source.\n\n### RenderMan Hydra Plugin\n- Added various implicit shapes support by using native Riley prims and the\n  implicit surface scene index.\n\n- Added support for SdfAssetPath-valued shader parameters.\n\n- Added support for RenderSettings and Murk Sample Filter prims, with the\n  ability to have multiple Sample Filters. These prims are supported with and\n  without scene index emulation.\n\n- Added support for MaterialX displacements and improved editing of\n  displacements.\n\n- Various improvements to MaterialX support.\n\n- Improved diagnostic messages for materials with empty/wrongly typed material\n  resources.\n\n- Updated to look for material properties in the \"primvars:ri:attributes\"\n  namespace. \"ri:attributes:\" is still supported for backwards compatibility.\n\n- Fixed support for sharpness per crease edge with subdivs.\n\n- Fixed \"depth\" AOV to return [0,1] instead of [-1,1], for consistency with\n  Storm and the expectations of Hdx compositing code.\n\n### usdview\n- Added --mute command line option for muting layers prior to initial stage load.\n\n- Improved muted layer support in the Layer Stack tab (previously muted layers\n  were not listed) and added context menu support to interactively mute/unmute\n  layers from the UI.\n\n- Fixed Interpreter window to respect OS hover-focus/click-focus settings.\n\n- Fixed Python 3 warning in usdview about not properly closing a file.\n  (PR: [#1861](https://github.com/PixarAnimationStudios/USD/pull/1861))\n\n- Fixed an error in usdview when framing with the root prim selected.\n  (Issue: [#1619](https://github.com/PixarAnimationStudios/USD/issues/1619),\n   PR: [#1843](https://github.com/PixarAnimationStudios/USD/issues/1843))\n\n### MaterialX Plugin\n- Added support for MaterialX v1.38.3+ and removed support for older versions.\n  (PR: [#1792](https://github.com/PixarAnimationStudios/USD/pull/1792))\n\n- Added support for usdBakeMaterialX baking script on Windows.\n\n- Updated default texture node wrap values for MaterialX texture nodes.\n  (Issue: [#1793](https://github.com/PixarAnimationStudios/USD/issues/1793))\n\n- Fixed MaterialX shading without a Dome Light.\n  (Issue: [#1877](https://github.com/PixarAnimationStudios/USD/issues/1877))\n\n## [22.05b] - 2022-06-14\n\n### Build\n- Fixed broken URL in build_usd.py for downloading libtiff.\n  (Issue: [#1901](https://github.com/PixarAnimationStudios/USD/issues/1901))\n\n## [22.05a] - 2022-05-11\n\n### USD\n- Fixed a race condition that could lead to crashes during scene changes.\n\n## [22.05] - 2022-04-22\n\nThis release enables Storm for macOS using Metal. Refer to notes under Storm for\ndetails. Many thanks to our collaborators at Apple for all of their work to make\nthis happen!\n\n### Build\n- Fixed compilation issue on GCC11.\n  (Issue: [#1721](https://github.com/PixarAnimationStudios/USD/pull/1721), \n   PR: [#1776](https://github.com/PixarAnimationStudios/USD/pull/1776))\n\n- Deprecated support for Visual Studio 2015. Visual Studio 2017 will be the \n  minimum supported version as of the next release.\n\n- Builds with Python enabled or disabled are now ABI-compatible.\n  (PR: [#1729](https://github.com/PixarAnimationStudios/USD/pull/1729))\n\n- Made 10.15.7 as the minimum macOS requirement (with compatible Xcode version \n  being 12.4) we test against. Minimum CMake requirement for macOS has also been \n  updated to 3.18.6.\n\n- On Apple Silicon systems, it is required to use an x86_64 architecture\n  environment (e.g. \"arch -x86_64 zsh\") to build and execute binaries.\n\n- Updated build_usd.py to use OpenSubdiv 3.4.4.\n\n### USD\n- Added support for sdrUsdDefinitionType in UsdShadeShaderDef.\n\n- Removed SDR_DEFAULT_VALUE_AS_SDF_DEFAULT_VALUE environment variable,\n  SdrShaderProperty::GetDefaultValue and\n  SdrShaderProperty::GetDefaultValueAsSdfType will provide default values\n  appropriately.\n\n- Added disableMotionBlur in favor of deprecated instantaneousShutter in\n  UsdRender, to be more compliant of standard behavior of using only one sample\n  at the current frame when motion blur is disabled.\n\n- Deprecated motion:velocityScale in UsdGeomMotionAPI in favor of more general\n  motion:blurScale. Also deprecated usage of velocityScale in \n  UsdGeomPointInstancer and UsdGeomPointBased. Refer to motion:blurScale \n  documentation for more details.\n\n- Added GetMaterialPurposes() API to UsdShadeMaterialBindingAPI.\n\n- Improved performance and correctness of TfDictionaryLess.\n\n- Fixed performance regression due to thrashing of Sdf object identities.\n\n- Numerous performance improvements in UsdPrim's property names computation.\n\n- Changes for usdGenSchema:\n  - Disabled inheritance for multiple apply API schemas, now that\n    built-in API schemas are supported for multiple apply schemas.\n  - Fixed issue where schema tokens with invalid C++ identifiers would be \n    generated. These tokens will now be converted into a valid identifier. \n    Tokens beginning with a numeral are now prefixed with '_'.\n  - Added ability to generate C++ identifiers using property names and values \n    exactly as authored in schema.usda instead of camel-casing them by \n    specifying useLiteralIdentifier in the GLOBAL schema metadata. This is \n    helpful in scenarios where schema.usda is generated using utilities like \n    usdgenschemafromsdr instead of being hand authored.\n  - Fixed Python 3 compatibility by explicitly included the None\n    keyword in reserved list.\n\n- Added error handling for corrupt .usdc files where VtValues claimed to \n  contain themselves.\n\n- Fixed inconsistent behavior of UsdShadeConnectableAPI::HasConnectableAPI \n  between Python and C++.\n\n- Fixed UsdShadeConnectableAPIBehavior registry that caused it to miss builtin \n  API schemas when querying for connectability. This caused incorrect result\n  when querying for HasConnectableAPI on just the prim types.\n\n- Numerous fixes and improvements for Python 3 compatibility.\n\n- Instance proxies can now be used to author opinions to non-local edit targets.\n\n- Added NdrFsHelperDiscoverFiles function to NdrDiscoveryPlugin which returns a\n  list of raw and resolved URIs to the files found by walking the directory.\n  This is similar to NdrFsHelperDiscoverNodes which returns a list of full\n  discovery results.\n\n- Updated UsdUtilsUpdateSchemaWithSdrNode to process nodes which do not exhibit\n  UsdShade connectability. This is used to incorporate rman concepts like\n  Options, etc, not connectable sdr nodes in the usdRiPxr schemas.\n\n- Updated NdrFsHelperDiscoverNodes API to include a parameter to optionally \n  parse a shader identifier into its name, family and version.\n\n- Added an optional parameter to specify the tolerance for\n  UsdSkelNormalizeWeights.\n  (PR: [#1667](https://github.com/PixarAnimationStudios/USD/pull/1667))\n\n- Deprecated UsdLuxListAPI in favor of new UsdLuxLightListAPI.\n\n- Added plugin mechanism for registering variantSets for \n  UsdUtilsGetRegisteredVariantSets.\n\n- Fixed a critical bug with UsdPhysics Mass computation.\n  (PR: [#1799](https://github.com/PixarAnimationStudios/USD/pull/1799))\n\n- Restored fix for symlink reading on Windows.\n  (PR: [#1804](https://github.com/PixarAnimationStudios/USD/pull/1804))\n\n- Added UsdGeomBoundable::ComputeExtent API to sit alongside\n  UsdGeomBoundable::ComputeExtentFromPlugins. This returns the extent on a\n  boundable if one is explicitly authored, else it computes using the registered\n  ComputeExtentFunction. Its recommended to use this API over extent getters,\n  which might incorrectly return schema fallback extent.\n\n- Added nonlinearSampleCount attribute to UsdGeomMotionAPI.\n\n### MaterialX Plugin\n- Make UsdMtlx plugin a library, moved to /usd/usdMtlx\n\n- Added support for multi-output MaterialX nodes.\n  (Issue: [#1581](https://github.com/PixarAnimationStudios/USD/issues/1581)\n\n- Added support for MaterialX namespaces declared in stdLibs\n  (PR: [#1631](https://github.com/PixarAnimationStudios/USD/pull/1631))\n\n- Fixed MaterialX boolean inputs.\n  (Issue: [#1784](https://github.com/PixarAnimationStudios/USD/pull/1784),\n   PR: [#1789](https://github.com/PixarAnimationStudios/USD/pull/1789))\n\n- Added support for using texcoord MaterialX node type for texture coordinates.\n  (Issue: [#1636](https://github.com/PixarAnimationStudios/USD/issues/1636)\n\n- Updated documentation to mention current known limitation of the MaterialX\n  plugin.\n  (Issue: [#1636](https://github.com/PixarAnimationStudios/USD/issues/1636)\n\n- Added a UsdBakeMaterialX script to bake MaterialX materials, via \n  MaterialX::TextureBaker. Note this does not work on windows yet, and skips \n  volume materials.\n\n- Improved discovery of MaterialX vector3 inputs\n  (PR: [#1790](https://github.com/PixarAnimationStudios/USD/pull/1790))\n\n### Alembic Plugin\n- Pruned redundant \"vals\" namespace from the primvars namespace when reading \n  array primvars from alembic. \n  (PR: [#1635](https://github.com/PixarAnimationStudios/USD/pull/1635))\n\n### Imaging\n- Added HdNoticeBatchingSceneIndex and methods to begin and end batching of \n  notices for legacy scene delegates.\n\n- Adjusted HdRenderIndex::RemoveSprim() to not remove hierarchical descendents \n  when scene index emulation is enabled.\n\n- Added HdSceneDelegate::GetScenePrimPaths(), a vectorized version of \n  GetScenePrimPath(). Note that with this change, GetScenePrimPath() is \n  deprecated; use GetScenePrimPaths() instead. \n  (PR: [#1744](https://github.com/PixarAnimationStudios/USD/pull/1744))\n\n### UsdImaging\n- Added tests for usdImagingGL and testusdview. These are enabled on Linux but\n  are currently disabled on macOS and Windows, while we investigate these\n  further.\n  (PR: [#1743](https://github.com/PixarAnimationStudios/USD/pull/1743))\n\n- Support shapes with blendshapes but no skinning when using CPU computations\n  (PR: [#1757](https://github.com/PixarAnimationStudios/USD/pull/1757))\n\n- Fixed UDIM path resolving when no \"1001\" file exists\n  (PR: [#1787](https://github.com/PixarAnimationStudios/USD/pull/1787))\n\n- Made usdImaging stricter about only reading \"model:drawMode\" attributes from \n  prims with UsdGeomModelAPI applied.\n\n- Added early support to UsdImagingEngine (and consequently usdview) for \n  loading USD stages into hydra with scene indices instead of scene delegates. \n  This is gated on an environment variable and is disabled by default.\n\n- Added USD scene index support for cameras and volumes.\n\n### Storm\n- Enabled Storm for macOS using Metal. This is the first release with this \n  feature enabled and there are currently the following limitations:\n  - Disabled for macOS releases before 10.15 (Catalina) since Metal Shading \n    Language 2.2 is required.\n  - Disabled for systems using integrated Intel GPUs which do not yet support \n    fragment shader barycentric coordinates.\n  - Curves primitives are always drawn as linear segments and do not refine \n    when complexity is changed.\n  - Mesh primitives do support subdivision refinement but do not support \n    adaptive tessellation.\n  - Frustum culling is enabled but only executes on the CPU, GPU frustum \n    culling is disabled.\n  - MaterialX materials are not yet supported.\n\n- Introduced several aspects to take advantage of full performance on Metal:\n  - Post Tessellation Vertex Shaders (PTVS) used when executing displacement \n    shader terminals.\n  - Vertex buffer step function used to support plumbing of drawing coordinate \n    attributes.\n  - Argument buffers used for buffer and texture binding.\n  - Support parallel encoding of render command buffers.\n\n- Significant additions to the Hgi API and to the HgiMetal and HgiGL \n  implementations. The Hgi API is still under development, recent additions \n  include:\n  - Extended shader parameter descriptor to include specification of \n    interpolation qualifiers, arraySize, and binding location.\n  - Improved the distinction between UBO and SSBO bindings as needed for GL.\n  - Added support for GLSL style interstage interface blocks.\n  - Added a way to enable early_fragment_tests.\n  - Added support for conservative rasterization for HgiGL\n  - Added support for additional clipping distances.\n  - Added support for declaring and accessing arrays of textures (and texture \n  arrays).\n  - Added support to distinguish between [0,1] and [-1,1] depth ranges.\n  - Added a BlitCmd to fill the contents of a GPU buffer.\n  - Additional enumeration of GPU capabilities.\n  - Improved consistency of naming for the input arguments to drawing commands.\n\n- Added support for building against OCIO v2.0 with backup compatibility for \n  OCIO v1.x.\n\n- Fixed domeLight computations and skyDome viewport rendering for Metal \n  including fixing the alpha value written by the skyDome\n  (Issue: [#1656](https://github.com/PixarAnimationStudios/USD/issues/1656))\n\n- Fixed management of framebuffer objects in HgiGL for applications with \n  multiple GL contexts.\n\n- Added support for \"widget\" styled drawing in Storm.\n\n- Added a display style flag \"materialIsFinal\" to let geometry (such as \n  widgets) opt out of material overrides.\n\n- Added ImageToWorldMatrix to renderPassState and GetPositionInWorldSpace() \n  GLSL helper for fragment shaders.\n\n- Updated Storm runtime shader code generation significantly to support \n  declaration of shader resources (textures, buffers, etc.) using Hgi.\n\n- Shader code generation continues to support native GLSL declaration of shader \n  resources, the new method of using Hgi for this purpose is guarded by the \n  env setting HDST_ENABLE_HGI_RESOURCE_GENERATION which is enabled by default \n  only for Metal.\n\n- Enabled declaration of resources (textures, buffers, interstage interface \n  blocks, etc.) as GLSLFX layouts for Storm's internal shader source files.\n\n- Use the appropriate GLSL (for OpenGL) or MSL (for Metal) shader mixins from \n  OpenSubdiv.\n\n- Updated shader source files and generated shader code to use Hgi abstractions \n  for accessing packed types, buffers, textures, atomic operators,\n\n- Updated previewSurface.glslfx and simpleLighting.glslfx to use newly added \n  HdTextureLod_name() (consistent sampler access to specific mipmap levels) and \n  HdGetScalar_name() (single component, scalar value access of a parameter \n  without needing to guard against component swizzle of scalar data types) \n  accessors where necessary for compatibility with GLSL and MSL. Also updated \n  lighting shaders to use HdGet_name() for sampling shadow textures and arrays \n  of shadow textures.\n\n- Shader programs compiled directly from Hgi (i.e. not going through Storm \n  codegen) now access textures using HgiGet_name() accessors, HdGet_name() and \n  similar accessors are provided by Storm codegen.\n\n- Generated shader source now has organizational comments to indicate which \n  aspect of shader generation provided the following lines of shader source code.\n\n- Enabled HdSt_PipelineDrawBatch for Metal, and deleted HdSt_ImmediateDrawBatch. \n  The existing env setting which enabled use of MDI drawing command buffers has \n  been repurposed to just control whether the CPU or GPU iterates over the \n  command buffer when executing drawing.\n\n- Fixed HdStTextureUtils::HgiTextureReadback() to support readback into aligned \n  allocated buffers.\n\n- Added guards to allow volume primitive shaders to run when double precision \n  values are not supported by the shader runtime.\n\n- Improved calculation of the size of OIT buffers in shaders for compatibility \n  with Metal.\n\n- Added an error message when a scene is rendered with more than 16 lights. \n  Changed the light selection to grab the first 16 lights, prioritizing dome \n  and simple lights (which tend to be used as camera lights). Filtered out \n  zero-intensity lights before light selection.\n\n### RenderMan Hydra Plugin\n- Removed use of __lightFilterParentShader as this is obsolete since R22, which \n  was generating unknown or mismatched input parameter errors.\n\n- Changed light filter coordinate system name to be the full light filter path \n  as opposed to the leaf name. Since light filters affecting a light are \n  expressed via relationship, only the full path guarantees uniqueness.\n\n- Added support for light filter combineMode.\n\n- Updated the MaterialNetwork conversion function to return an \n  HdMaterialNetwork2 for a given HdMaterialNetworkMap, instead of using an out \n  param. Doing so avoids potential issues if the caller passes in an existing \n  HdMaterialNetwork2, in which case we would get an inaccurate final material \n  network.\n\n- Fixed a hang in StopRender() when blocking = true. Fixed \n  HdPrmanRenderDelegate::IsStopped (and the Stop return value), which were \n  previously erroneously always returning true for offline mode, and always \n  returning false for interactive mode.\n\n- Disabled MaterialX scene index plugin when MaterialX support is not enabled.\n\n- Added scene index plugins for material filtering functionality.\n\n- Improved hdPrman's motion blur support by adding blur scale and velocity and \n  acceleration motion blur implemented through a new scene index. \n  The instantaneousShutter setting has been deprecated in favor of \n  disableMotionBlur.\n\n- Fixed a bug where toggling visibility of individual instances would lead to a \n  crash.\n\n- Fixed an issue that was not correctly updating riley visibility on changing \n  rprim tags.\n\n- Updated hdPrman display driver to correctly normalize render outputs based on \n  accumulation rule and type.\n\n- Updated usdRiPxr schemas to reflect updates to renderman args files.\n\n### usdview\n\n- Fixed crash bugs when running usdview on macOS systems where Storm is not \n  enabled.\n  (Issue: [#1780](https://github.com/PixarAnimationStudios/USD/issues/1780))\n\n- Deprecated UsdImagingGLLegacyEngine, i.e. \"HydraDisabled\". This renderer \n  doesn't support most USD features, and will be removed in the next release.\n\n- Deprecated UsdImagingGLEngine::_GetDelegate. This API will be removed in the \n  next release.\n\n## [22.03] - 2022-02-18\n\n### Build\n- boost::program_options is now required only if PXR_BUILD_USD_TOOLS or\n  PXR_BUILD_TESTS is enabled.\n  (PR: [#1649](https://github.com/PixarAnimationStudios/USD/pull/1649),\n   [#1703](https://github.com/PixarAnimationStudios/USD/pull/1703))\n\n- Workaround issues with UTF-8 filenames when extracting boost in build_usd.py.\n  (PR: [#1694](https://github.com/PixarAnimationStudios/USD/pull/1694))\n\n- The source .rst files for documentation on https://openusd.org are\n  now part of the repository under the docs/ subdirectory.\n\n- Fixed warnings emitted when building with \"-Wformat-security\" and enabled\n  this flag by default for gcc/clang builds.\n  (Issue: [#1675](https://github.com/PixarAnimationStudios/USD/issues/1675))\n\n- Fixed build failures with hioOpenVDB on Windows.\n\n- Fixed build failures with precompiled headers disabled on Windows.\n  (PR: [#1672](https://github.com/PixarAnimationStudios/USD/pull/1672))\n\n- Fixed error when importing modules from the usd-core PyPI package\n  in Conda environments on Windows.\n  (Issue: [#1602](https://github.com/PixarAnimationStudios/USD/issues/1602),\n   PR: [#1642](https://github.com/PixarAnimationStudios/USD/pull/1642))\n\n### USD\n- Additions to simplify porting client code to Python 3:\n  - Support for \"future division\" in Python 2 to Vt.Array and Sdf.TimeCode.\n  - Support for Unicode strings in Tf.Type and Tf.Type.FindByName.\n\n- Fixed handling of file paths from mounted volumes on Windows.\n  (Issue: [#1520](https://github.com/PixarAnimationStudios/USD/issues/1520),\n   PR: [#1746](https://github.com/PixarAnimationStudios/USD/pull/1746))\n\n- Improved accuracy of timing performed by Trace and TfStopwatch.\n\n- Changes to Ndr and Sdr:\n  - Improved performance of lookups by identifier and source type.\n  - Removed aliasing functionality.\n  - Switched environment variable `SDR_DEFAULT_VALUE_AS_SDF_DEFAULT_VALUE`\n    off by default.\n\n- Fixed bug where certain combinations of specializes and inherit arcs on\n  a prim could lead to errors or incorrect strength ordering.\n\n- Fixed regression where SdfSpec::IsInert would mark empty variant and\n  variant set specs as not inert.\n  (Issue: [#1652](https://github.com/PixarAnimationStudios/USD/issues/1652))\n\n- Changes for applied API schemas:\n  - Multiple-apply API schemas can now include other multiple-apply API schemas\n    as built-ins.\n  - \"prepend apiSchemas\" must be used in schema.usda to set built-in API schemas\n    on another schema.\n  - Applied API schemas authored on a prim can no longer change the type of\n    a property defined by that prim's type or built-in API schemas.\n\n- Fixed uninitialized fields in UsdZipFile.\n  (Issue: [#1579](https://github.com/PixarAnimationStudios/USD/issues/1579),\n   PR: [#1578](https://github.com/PixarAnimationStudios/USD/pull/1578))\n\n- Cache .usdz archive traversal to improve performance for reading archives\n  with many files and references. In one example, a .usdz file that previously\n  took ~3 minutes to load improved to ~16 seconds with this change.\n  (Issue: [#1577](https://github.com/PixarAnimationStudios/USD/issues/1577),\n   PR: [#1578](https://github.com/PixarAnimationStudios/USD/pull/1578))\n\n- Numerous changes to improve performance of various operations, including\n  reading .usda and .usdc files and initializing the schema registry.\n\n- Fixed bug where UsdUtilsComputeAllDependencies would inadvertently try to\n  edit the given layer.\n\n- Fixed UsdUtilsUpdateSchemaWithSdrNode to emit \"allowedTokens\" for\n  token-valued attributes based on the Sdr node's options.\n\n- Various documentation fixes.\n  (Issue: [#1370](https://github.com/PixarAnimationStudios/USD/issues/1370))\n\n- Fixed crash in UsdGeomCamera::SetFromCamera when the current edit target\n  specifies a weaker layer than the layer defining xformOpList.\n  (PR: [#1661](https://github.com/PixarAnimationStudios/USD/pull/1661))\n\n- Added \"guideRadius\" attribute to UsdLuxDomeLight.\n\n- Removed UsdRenderSettingsAPI.\n\n- Changes to connectability in UsdShade:\n  - Typeless prims can now be queried for connectability.\n  - Multiple-apply schemas are now ignored when determining connectability.\n    This previously would result in an error.\n\n- UsdShadeShaderDef now treats an attribute's \"allowedTokens\" as options\n  if no other \"options\" metadata has been specified in \"sdrMetadata\".\n\n- Added support for skinning normals with faceVarying interpolation in UsdSkel.\n  (PR: [#1695](https://github.com/PixarAnimationStudios/USD/pull/1695))\n\n- Added UsdPhysicsRigidBodyAPI::ComputeMassProperties for computing the\n  mass properties of the rigid body.\n  (PR: [#1677](https://github.com/PixarAnimationStudios/USD/pull/1677))\n\n- Changed UsdVolFieldBase to be an Xformable instead of a Boundable.\n\n### Draco Plugin\n- Fix compile error when building with Draco library that has disabled\n  deduplication features.\n  (Issue: [#1671](https://github.com/PixarAnimationStudios/USD/issues/1671))\n\n### MaterialX Plugin\n- Fixed issue with NodeDef discovery. \n  (Issue: [#1629](https://github.com/PixarAnimationStudios/USD/issues/1629),\n   PR: [#1641](https://github.com/PixarAnimationStudios/USD/pull/1641))\n\n- Fixed issue with computing a shader name for Sdr from the NodeDef.\n  (PR: [#1641](https://github.com/PixarAnimationStudios/USD/pull/1641))\n\n- Allow runtime adjustment of MaterialX search paths.\n  (Issue: [#1586](https://github.com/PixarAnimationStudios/USD/issues/1586),\n   PR: [#1628](https://github.com/PixarAnimationStudios/USD/pull/1628))\n\n### Imaging\n- Added HdMaterialNetworkInterface to let material processing operators abstract\n  away data representation.\n\n- Added API to merge application-provided scene indices with the Hydra emulation\n  scene index.\n\n- Added API to HdRenderDelegate to query pause and stop state.\n\n- Augmented HdRenderDelegate::Stop to allow requests for blocking or\n  non-blocking stop.\n\n- For HdxTaskController users with non-Storm renderers, replaced the fallback\n  sphere light with a distant light.\n\n- Changed default dome light texture format from .exr to .hdr.\n  (Issue: [#1481](https://github.com/PixarAnimationStudios/USD/issues/1481))  \n\n- Added HdSceneIndexPluginRegistry and HdSceneIndexPlugin, to allow for external\n  registration of filtering scene indices to be added for specified renderers.\n\n- Improved HdMeshUtil Patch Param documentation.\n  (Issue: [#1720](https://github.com/PixarAnimationStudios/USD/issues/1720))  \n\n- Cache \"renderTag\" attribute in Hydra instead of pulling it at every use.\n\n### UsdImaging\n- Fixed instancing-related edit processing bugs: when prims are added to or\n  removed from USD prototype roots; or when invalidations propagate from\n  non-instanced prims to instanced prims.\n\n- Fixed drawing of \"unloaded-prim-as-bounds\" when the unloaded prim is an\n  instance.\n\n- Improved performance of UsdImagingDelegate::PopulateSelection.\n  (Issue: [#1689](https://github.com/PixarAnimationStudios/USD/issues/1689),\n   PR: [#1691](https://github.com/PixarAnimationStudios/USD/pull/1691))\n\n- Added UsdImagingStageSceneIndex, a scene-index native reader of Usd stages.\n  Feature support is very limited as this is under development.\n\n- Fixed a bug where disabling scene materials would also disable lights when\n  lights were using material network representation.\n\n### Storm\n- Filled out Hgi interface for Storm rendering needs\n  - Added a capability bit for double-precision support in shaders.\n  - Added fields to sampler parameter, graphics pipeline, and attachment state.\n  - Added HgiVertexBufferStepFunction, to support Hgi multidraw calls.\n  - Started adding Hgi API support for tessellation shaders and\n    post-tessellation vertex shaders.\n  - Added support for Hgi compute pipelines to specify workgroup size.\n\n- Refactored Storm to use Hgi for graphics API access\n  - Augmented HdRenderPassState with further pipeline flags: conservative\n    rasterization, depth clamp, depth range.\n  - Added the Hgi-based PipelineDrawBatch, which is expected to deprecate the\n    GL-specific Immediate- and IndirectDrawBatch classes.  PipelineDrawBatch is\n    currently disabled behind a config flag for main render and image shader\n    use.\n  - Extended HdSt_TextureBinder, HdSt_ResourceBinder, and HdSt_RenderPassState\n    to let them use Hgi instead of direct GL calls.\n  - Ported HdxShadowTask shadow rendering to use hydra-managed shadow textures,\n    rather than GlfSimpleShadowArray.\n  - Ported HdxSimpleLightTask to pass in lighting data through the HdSt buffer\n    management system, instead of using out-of-band GL uniform blocks. Note that\n    as part of this change, there's a new shader API for accessing lighting\n    data.\n  - Added the \"triangulated quad\" primitive type, which draws quad geometry as\n    triangles.  This is expected to deprecate the current quad rendering with\n    adjacency lists, although the latter is supported in HgiGL at the moment.\n  - Added support for built-in barycentric coordinates, based on\n    NV_fragment_shader_barycentric in GL.\n  - Removed geometry shader dependency from many rendering configurations: edge\n    rendering & picking, patch coordinate evaluation, face-varying evaluation\n    (only available in GL if barycentric coordinates are available).\n  - Fixed codegen and shader snippet cross-compilation issues.\n\n- Improved support for MaterialX imaging in Storm:\n  - Moved MaterialX parameters out of generated shadercode and into parameter\n    buffers to support faster updates.\n  - Added support for reading from non-bindless textures.\n    (PR: [#1634](https://github.com/PixarAnimationStudios/USD/pull/1634))\n  - Added selection highlighting for MaterialX shaders.\n    (PR: [#1647](https://github.com/PixarAnimationStudios/USD/pull/1647))\n  - Fixed duplicate name error when processing network nodes.\n    (PR: [#1659](https://github.com/PixarAnimationStudios/USD/pull/1659))\n  - Added shadow support to MaterialX shaders.\n    (PR: [#1680](https://github.com/PixarAnimationStudios/USD/pull/1680))\n\n- Fixed typo in HgiVulkan backend.\n  (Issue: [#1702](https://github.com/PixarAnimationStudios/USD/issues/1702))\n\n- Extended GLSLFX file format to support resource layout configuration metadata.\n\n- Added shader support for binding arrays of UV textures (as distinct from\n  TEXTURE_2D_ARRAY).  Switched shadowmap binding to use arrays of textures, and\n  removed bindless shadow texture code.\n\n- Added basis curve builtin primvars: screenSpaceWidths (boolean), for rendering\n  UI elements, and minScreenSpaceWidth, for reducing aliasing of thin curves.\n  Note that these haven't been formalized in USD.\n\n- Changed meshes with a present but invalid normals primvar to draw with\n  shader-generated normals.\n\n- Added support for bool array primvar data.\n\n- Added support for widget rendering via the \"widget\" rendertag and\n  surfaceShader implementation, which uses a draw/blend-on-top configuration.\n\n- Sped up execution of empty render passes.\n\n- Fixed leakage of vertex attrib binding state in HdxPickTask.\n\n- Added shadow support for \"distantLight\" prim type.\n\n- Fixed evaluation of dome lights and dome light parameters.\n\n- Added support for depthStencil AOV output.\n\n### RenderMan Hydra Plugin\n- Added API to request a non-blocking stop of Prman in interactive mode.\n\n- Removed fallback domelight when no lights are provided by the scene.\n\n- Enabled rendering of in-memory VDB volumes in hdPrman. Previously, hdPrman\n  only supported VDB volumes from disk.\n\n- Added support (by scene index plugin) for velocity-based motion blur.\n\n- Added a render setting for the Prman backend to use.\n\n- Changed the shutter interval used for processing geometry deformation to come\n  from the render camera, rather than render settings.\n\n- Changed light prims to pull parameters from light material networks by\n  default, instead of using GetLightParamValue.\n\n- Improved support for offline rendering: e.g. writing results directly to file,\n  configuring output via render settings, and rendering synchronously.\n\n- Fixed cookie light filters in hdPrman to provide the appropriate coordinate\n  system object.\n\n- Updated hdPrman's fallback surface material to better match Storm, by\n  respecting the \"displayColor\", \"displayOpacity\", \"displayRoughness\", and\n  \"displayMetallic\" primvars.\n\n- Improved performance blitting Prman output when running interactively.\n\n- Reworked material filtering operations to use the material network interface.\n\n### usdview\n- Added usdviewApi functions to toggle viewer mode and set the renderer plugin.\n\n- usdview plugins can now extend built-in menus like File or Window.\n\n- Increased statistics timer resolution from millisecond to microsecond.\n\n- Added light material network support to usdview builtin lights.\n\n- Fixed uninitialized values when picking from Python.\n\n- Fixed a bug with usdview's composition view when examining prims with\n  specializes arcs.\n\n- Added support to set the OCIO display, view, and colorspace.\n  (PR: [#1491](https://github.com/PixarAnimationStudios/USD/pull/1491))\n\n## [21.11] - 2021-11-01\n\nAr 2.0 is enabled by default as of this release. Ar 1.0 is deprecated and will\nbe removed in a subsequent release. During this transition, Ar 1.0 may still be\nenabled by setting `PXR_USE_AR_2=OFF` when running CMake.\n\n### Build\n- Added support for building against debug versions of Python. Users must\n  specify `PXR_USE_DEBUG_PYTHON=ON` when running CMake.\n  (PR: [#1478](https://github.com/PixarAnimationStudios/USD/pull/1478))\n\n- Libraries now use @loader_path instead of absolute paths for RPATHs on macOS.\n  (PR: [#1478](https://github.com/PixarAnimationStudios/USD/pull/1478))\n\n- Libraries are now prefixed with \"libusd_\" on Linux and macOS and \"usd_\" on\n  Windows to avoid name conflicts with other packages. The previous behavior can\n  be restored by setting `PXR_LIB_PREFIX=\"lib\"` on Linux and macOS or \n  `PXR_LIB_PREFIX=\"\"` on Windows when running CMake.\n  (Issue: [#1615](https://github.com/PixarAnimationStudios/USD/issues/1615))\n\n- Changes and fixes to build_usd.py:\n  - Added `--debug-python` and `--build-python-info` options to enable builds\n    against debug versions of Python and to control Python to build against.\n    (PR: [#1478](https://github.com/PixarAnimationStudios/USD/pull/1478))\n  - Added `--use-cpp11-abi` option on Linux to control defininition of\n    `_GLIBCXX_USE_CXX11_ABI` when building USD and dependencies.\n    (Issue: [#1609](https://github.com/PixarAnimationStudios/USD/issues/1609))\n  - Replaced `--debug` option with `--build-variant`.\n  - Updated download locations for boost, libtiff, and libpng to avoid\n    certificate expiration issues on systems with OpenSSL older than 1.1.0.\n  - Updated Blosc to v1.20.1 for compatibility with macOS Catalina (10.15).\n  - Fixed issue where the OpenEXR libraries would be installed in the root of\n    the filesystem.\n    (PR: [#1575](https://github.com/PixarAnimationStudios/USD/pull/1575)\n\n### USD\n- Fixed deadlock in NdrRegistry::GetNodesByFamily.\n\n- Changes for Ar 2.0:\n  - ArResolver::CreateDefaultContextForAsset now gives all registered resolvers\n    an opportunity to provide a default context for an asset.\n  - ArResolver::GetModificationTimestamp now returns an ArTimestamp object\n    instead of a VtValue. ArTimestamp requires the use of Unix time to\n    facilitate asset comparisons across resolvers.\n  - Added default implementations for ArResolver::GetExtension and\n    GetModificationTimestamp to simplify resolver implementations.\n  - Added UsdResolverExample, an example URI resolver implementation.\n  - Added more documentation.\n\n- Deprecated SdfLayer::GetExternalReferences and UpdateExternalReference in\n  favor of GetCompositionAssetDependencies and UpdateCompositionAssetDependency.\n\n- SdfLayer no longer treats the inability to retrieve a timestamp for a layer or\n  its external asset dependencies as an error under Ar 2.0. Calls to\n  SdfLayer::Reload will always reload layers with invalid timestamps.\n\n- Updated SdfCreateVariantInLayer and SdfCreatePrimInLayer to use \"prepend\" when\n  creating new variant sets.\n  (Issue: [#1552](https://github.com/PixarAnimationStudios/USD/issues/1552))\n\n- Added support for Unicode asset paths on Windows.\n  (Issue: [#1443](https://github.com/PixarAnimationStudios/USD/issues/1443),\n  PR: [#1580](https://github.com/PixarAnimationStudios/USD/pull/1580))\n\n- Fixed bug that caused errors when reading large .usda files.\n\n- Code invoked from Python that accesses invalid UsdPrim objects in C++ will now\n  emit a Python exception instead of crashing.\n\n- Fixed issue where ArResolver::OpenAsset would be called multiple times when\n  opening an ASCII .usd file or a .usdz file.\n  (Issue: [#1613](https://github.com/PixarAnimationStudios/USD/issues/1613))\n\n- Fixed bugs in gfGenCode and usdGenSchema where file objects were not closed,\n  leading to ResourceWarnings from Python.\n  (PR: [#1557](https://github.com/PixarAnimationStudios/USD/pull/1557))\n\n- Updated usdGenSchema to mark plugInfo as a resource instead of a library when\n  codeless schemas are being generated via skipCodeGen option.\n\n- Fixed bugs where changes to a layer's resolved path would not trigger\n  recomposition of prims when needed.\n\n- Fixed bug that caused crashes during composition.\n  (PR: [#1568](https://github.com/PixarAnimationStudios/USD/pull/1568))\n\n- Fixed bug where UsdNotice::ObjectsChanged notice emitted after call to\n  UsdStage::Reload would contain pointers to destroyed objects.\n  (Issue: [#1605](https://github.com/PixarAnimationStudios/USD/issues/1605)\n\n- Fixed bug where UsdUtilsComplianceChecker returned a false error due to not\n  recognizing the `UsdTransform2d` shader.\n  (PR: [#1625](https://github.com/PixarAnimationStudios/USD/pull/1625))\n\n- Fixed issue where UsdUtilsExtractExternalReferences would mutate the input\n  layer unnecessarily.\n  (Issue: [#1573](https://github.com/PixarAnimationStudios/USD/issues/1573)\n\n- Added UsdGeomVisibilityAPI. This schema provides attributes to control prim\n  visibility based on the \"purpose\" attribute from the UsdGeomImageable schema.\n  It will eventually be the place where primary visibility and purpose are also\n  housed and authored.\n\n- Added UsdGeomImageable::ComputeEffectiveVisibility for computing purpose\n  visibility.\n\n- Removed unused UsdGeomImageable::ComputeVisibility overload that took a\n  parentVisibility parameter.\n\n- Fixed broken Python bindings for UsdPhysics on Windows under Python 3.8+.\n\n- Fixed missing Python bindings and \"kilogramsPerUnit\" metadata in UsdPhysics.\n  (PR: [#1606](https://github.com/PixarAnimationStudios/USD/pull/1606))\n\n- Deleted many previously deprecated UsdRi schema classes, namely, UsdRiRisBxdf,\n  UsdRiRisIntegrator, UsdRiRisObject, UsdRiRisOslPattern, UsdRiRisPattern,\n  UsdRiRslShader and all UsdRiLight and UsdRiLightFilters which are now part of\n  the usdRiPxr schema domain.\n\n- Updated connectedAPIBehavior so that APISchemas can now provide\n  connectableAPIBehavior by explicitly registering a new behavior associated\n  with the APISchemaType or by providing plug metadata to configure the\n  connectability behavior. Note that the latter can be used for codeless\n  schemas.\n\n- Fixed a couple of rare bugs associated with UsdShadeConnectableAPIBehavior and\n  UsdGeomComputeExtentFunction, resulting in robust behavior when new plugins\n  are registered.\n\n- Updated UsdUtilsUpdateSchemaWithSdrNodes to include new concepts like addition\n  of shaderId attribute to the generated schema classes, provide\n  apiSchemaCanOnlyApplyTo, and provide ability to control\n  UsdShadeConnectableAPIBehavior using metadata on the sdrNodes. Refer to the\n  updated documentation for more details.\n\n- Updated usdgenschemafromsdr to be able to provide sdr nodes via explicit asset\n  paths and to parse and add renderContext related information from the json\n  config.\n\n- Added support for different Sdr to Sdf type mappings. Introducimg a new\n  \"sdrUsdDefinitionType\" metadata field for sdrShaderProperty, which is used to\n  distinguish between sdrDefaultValue and equivalent sdfTypeDefaultValue. Note\n  that for backward compatibility SdrShaderProperty::GetDefaultValue currently\n  returns the same value as SdrShaderProperty::GetSdfTypeDefaultValue, this is\n  guarded by an environment variable \"SDR_DEFAULT_VALUE_AS_SDF_DEFAULT_VALUE\".\n\n- Single apply API schemas can now include built-in API schemas and can auto\n  apply to other single apply API schemas. API schemas are now only allowed to\n  inherit directly from UsdAPISchemaBase.\n\n- Applied API schemas can no longer inherit from other other applied API\n  schemas, which allows UsdPrim::HasAPI() to be a much faster query. Non-applied\n  schemas may still inherit from other non-applied schemas.\n\n- Added UsdLuxLightAPI, which can be applied to geometry to create a light.\n  UsdLuxLight has been deleted. Added the applied API schemas UsdLuxMeshLightAPI\n  and UsdLuxVolumeLightAPI, which include UsdLuxLightAPI as a builtin.\n  - The core lights UsdLuxCylinderLight, UsdLuxDiskLight, UsdLuxRectLight,\n    UsdLuxSphereLight, and UsdLuxPortalLight all inherit from from\n    UsdLuxBoundableLightBase, are now Boundable, and have extents/bbox\n    computations.\n  - The core lights UsdLuxDomeLight and UsdLuxDistantLight now inherit from\n    UsdLuxNonboundableLightBase and are not Boundable.\n  - Deprecated UsdLuxGeometryLight\n  - Deleted deprecated UsdLuxLightPortal (use UsdLuxPortalLight instead).\n  - Fixed issue where UsdLux would register default SdrShaderNodes with 'USD'\n    source types for lights defined outside of UsdLux.\n  - Default SdrShaderNodes registered for UsdLux lights now include shadow and\n    shaping API properties.\n\n### Imaging\n- First iteration of the Scene Index and Data Source system is now on by default\n  and compatible with existing scene and render delegates via emulation. No new\n  functionality is yet exposed as this is thus far intended to validate\n  correctness and performance. This can be disabled by setting an\n  HD_ENABLE_SCENE_INDEX_EMULATION environmental variable to \"0\".\n\n- Changed the return type of UsdImagingDelegate::Get() for the point instancer\n  \"rotate\" attribute from GfVec4f (quaternion layout of <real, i, j, k>) to\n  GfQuath (quaternion layout of <i, j, k, real>). This aligns with the result\n  of SamplePrimvar(). In hdStorm, the quaternion data is now transported to the\n  GPU as half-float data, instead of float.\n  All custom scene delegates supplying the instancer \"rotate\" primvar via the\n  Get() API must be updated for the new quaternion layout.\n\n- Added half-float vec2 and vec4 primvar support to hdStorm.\n\n- Added support to UsdImaging for new LightAPI features.\n\n- Added sprim-sprim dependency map to HdChangeTracker so it can track the\n  dependencies between lights and their light filters.\n\n- UsdImagingMeshAdapter only keeps track of geom subsets that are using the\n  materialBind family.\n\n- UsdImaging internally manages which prims to call UpdateForTime on, instead of\n  relying on hydra to maintain that list.\n\n- Extended HdxTaskController to support built-in lights for backends like\n  HdPrman.\n\n- When filtering primvars by material in UsdImagingGprimAdapter, added filtering\n  using materials bound to geom subsets.\n\n- Improved dirty list management and performance including moving to a single\n  dirty list managed by the render index.\n\n- Deleted PrimvarDescCache::Extract and GarbageCollect, and\n  UsdImagingDelegate::PostSyncCleanup.\n\n- Deleted HdRenderPass::Prepare.\n\n- Improved UsdImagingDelegate performance when editing many instances of the\n  same prototype.\n  (PR: [#1608](https://github.com/PixarAnimationStudios/USD/pull/1608))\n\n- Updated stb_image code to latest versions, enable UTF-8 filename support for\n  Windows.\n  (PR: [#1580](https://github.com/PixarAnimationStudios/USD/pull/1580))\n\n- Fixed sync valid repr tokens just once for Rprims.\n\n- Fixed memory leak in HioOpenVDB.\n\n- Fixed HioOpenVDB build on windows.\n  (PR: [#1574](https://github.com/PixarAnimationStudios/USD/pull/1574))\n\n- Fixed errors when trying to read udims from .usdz files.\n  (Issue: [#1558](https://github.com/PixarAnimationStudios/USD/issues/1558))\n\n- Fixed HdResampleRawTimeSamples() parameter bug and add test coverage.\n  (Issue: [#1549](https://github.com/PixarAnimationStudios/USD/issues/1549))\n\n- Fixed crash when processing multiple native instancer edits in the same frame.\n  (Issue: [#1551](https://github.com/PixarAnimationStudios/USD/issues/1551))\n\n- Fixed GprimAdapter::_AddRprim material resolution order to be consistent with\n  other functions.\n  (Issue: [#1626](https://github.com/PixarAnimationStudios/USD/issues/1626))\n\n- Fixed to not normalize point instancer quaternions.\n  (Issue: [#1505](https://github.com/PixarAnimationStudios/USD/issues/1505))\n\n### Storm\n- Added support for rendering meshes with geom subsets.\n\n- Added support for rendering DomeLights as a skydome.\n  (Issue: [#1385](https://github.com/PixarAnimationStudios/USD/issues/1385))\n\n- Added support to rendering BasisCurves that don't completely cover the\n  supplied points or other primvars.\n\n- Added support for \"constant shading\" of basis curves wherein they're\n  unaffected by lighting.\n\n- Added support for screen-space flat normals.\n\n- Improved 1st order approximations of the basic area lights (SphereLight,\n  DiskLight, RectLight, DistantLight, and CylinderLight).\n\n- Moved barycentric coord generation to codeGen.\n\n- Consolidated edge param calculations.\n\n- Implemented IsValid() for HdStUdimTextureObject.\n\n- Sync visibility once per-Rprim sync rather than per draw item.\n\n- Even if there are zero lights, prims should still use the lighting integrator,\n  specifically the one specified by their shader key.\n\n- Moved bindless address fetch out of HdStBufferResource.\n\n- Changing the type storing the volume shader glslfx source code and material\n  params in an HdStMaterial from HdStShaderCode to struct\n  HdStMaterial::VolumeMaterialData.\n\n- When a scene delegate provides a network without volume output for a material\n  used by a volume, use the volume fallback shader.\n\n- Removed IsFragmentOnPoint() and IsFragmentOnEdge() shader methods.\n\n- Renamed HdStSurfaceShader to HdSt_MaterialNetworkShader.\n\n- Fixed domelights to respond to visibility changes.\n\n- Fixed crash when UDIM textures are missing.\n\n- Fixed to support all sizes of domelight textures.\n\n- Fixed GS smooth fvar interp for displacement\n\n- Fixed GL version test to include minor version.\n  (Issues: [#957](https://github.com/PixarAnimationStudios/USD/issues/957) and\n  [#1001](https://github.com/PixarAnimationStudios/USD/issues/1001)\n\n- Various improvements to Hgi:\n  - Moved bindless texture management to HgiGL.\n  - Exposed general and device specific capabilities.\n  - Improved staging buffer for unified memory devices.\n  - Use shaderc to compile GLSL to SPIR-V in HgiVulkan.\n  - Check buffer storage mode before blit sync in HgiMetal.\n\n### RenderMan Hydra Plugin\n- Added support for UsdPreviewSurface's displacement in HdPrman.\n\n- Added support for UsdUvTexture's \"sourceColorSpace\" input and fixed normal\n  mapping.\n\n- Added support for additional clip planes.\n\n- Added flipped flag to RtxHioImage plugin.\n\n- Adjusted HdPrman's fallback volume shader to match Storm's.\n\n- Introduced codeless usdRiPxr schema domain for RenderMan lights and\n  lightfilters. These are generated using usdgenschemfromsdr from rman light and\n  lightfilter args files. Note that these schemas are compatible with RenderMan\n  24.2.\n\n- Removed use of \"allowPresenceWithGlass\" from UsdPreviewSurfaceParameters node.\n\n- RtxHioImage can convert various texture formats to type float, so they can be\n  passed to Renderman.\n  (Issue: [#1313](https://github.com/PixarAnimationStudios/USD/issues/1313))\n\n- Fixed HdPrman's fallback maxSamples to match the RenderMan fallback (64).\n\n### MaterialX\n- Updating the arguments passed into mx::loadLibraries to better accommodate\n  relocating the MaterialX libraries folder.\n  (Issue: [#1586](https://github.com/PixarAnimationStudios/USD/issues/1586))\n\n## [21.08] - 2021-07-15\n\nAr 2.0 is feature-complete as of this release. We anticipate addressing\nfeedback and bug reports, deprecating Ar 1.0 and enabling Ar 2.0 by default\nfor the next release, then removing Ar 1.0 entirely in the release after\nthat. Developers should begin migrating to Ar 2.0 now.\n\nRenderMan 24 is now required for the RenderMan plugin as of this release.\nSupport for RenderMan 23 was deprecated in 21.05 and has now been removed.\n\n### Build\n- Updated dependencies to align with VFX Reference Platform CY2019. In\n  particular, USD now requires TBB 2018 or greater.\n- Added support for Python 3.8+ on Windows. The usd-core PyPI package now\n  supports Python 3.8 and 3.9 on all platforms.\n  (PR: [#1511](https://www.github.com/PixarAnimationStudios/USD/pull/1511),\n   [#1512](https://www.github.com/PixarAnimationStudios/USD/pull/1512),\n   [#1513](https://www.github.com/PixarAnimationStudios/USD/pull/1513))\n- Fixed build errors on ARM64 on Linux.\n  (PR: [#1453](https://www.github.com/PixarAnimationStudios/USD/pull/1453))\n- Fixed various build errors due to missing or bad includes on gcc 11,\n  clang 11, clang 13, and for Android or emscripten.\n  (PR: [#1497](https://www.github.com/PixarAnimationStudios/USD/pull/1497),\n   [#1499](https://www.github.com/PixarAnimationStudios/USD/pull/1499),\n   [#1530](https://www.github.com/PixarAnimationStudios/USD/pull/1530),\n   Issue: [#1546](https://www.github.com/PixarAnimationStudios/USD/pull/1546))\n- Fixed issue in build_usd.py with some versions of PySide2 on Windows.\n  (PR: [#1454](https://www.github.com/PixarAnimationStudios/USD/pull/1454))\n\n### USD\n- Fixed bug with symbol demangling on Windows which broke some TfType alias\n  registrations.\n  (PR: [#1510](https://www.github.com/PixarAnimationStudios/USD/pull/1510))\n- Replaced some uses of deprecated tbb::atomic with std::atomic.\n  (PR: [#1486](https://www.github.com/PixarAnimationStudios/USD/pull/1486))\n\n- Numerous changes to the Work library to adhere to TBB thread limits set by\n  host applications.\n  (Issue: [#1368](https://www.github.com/PixarAnimationStudios/USD/pull/1368)):\n  - WorkGetConcurrencyLimit now returns tbb::this_task_arena::max_concurrency\n  - Replaced WorkArenaDispatcher and other uses of task_arena in favor of new\n    WorkWithScopedParallelism, which uses TBB's task isolation feature.\n\n- Many changes for Ar 2.0:\n  - Removed the majority of deprecated APIs, including AnchorRelativePath,\n    FetchToLocalResolvedPath, ConfigureResolverForAsset, and others.\n  - UsdStage::Refresh now calls ArResolver::RefreshContext to let resolvers\n    update any internal state. Resolvers can send a ArNotice::ResolverChanged\n    notice in that function to inform UsdStage and other listeners of any\n    changes.\n  - Added default implementations for context management and scoped\n    caching to make it easier to implement resolvers. Note that resolvers\n    that provide their own implementations must indicate this in the\n    plugInfo.json file. See ArResolver documentation for more details.\n\n- Added UTF-8 support for reading and writing asset paths.\n  (Issue: [#1443](https://www.github.com/PixarAnimationStudios/USD/pull/1443))\n- UTF-8 sequences are now written into .usda layers without hex encoding.\n- Embedded NUL bytes are disallowed in string values in .usda layers.\n- Dynamic file formats can now be set up to use anonymous layer identifiers to\n  avoid the need for dummy resolvable assets.\n  (Issue: [#1356](https://www.github.com/PixarAnimationStudios/USD/pull/1356))\n- Made virtual SdfFileFormat functions protected instead of private.\n  (PR: [#1519](https://www.github.com/PixarAnimationStudios/USD/pull/1519))\n- Fixed bug where a layer would be dropped from the Sdf layer registry if its\n  identifier were changed to an existing layer's via SdfLayer::SetIdentifier.\n- Fixed SdfLayer::SetIdentifier to use same restrictions as SdfLayer::CreateNew.\n- Fixed bug where entire layer would be parsed when reading layer metadata only\n  from .usda layers via SdfLayer::OpenAsAnonymous if no such metadata existed.\n- Fixed bug with vector usage during calls to SdfLayer::TransferContent and\n  other methods that caused debug asserts on Windows.\n  (Issue: [#1501](https://www.github.com/PixarAnimationStudios/USD/pull/1501))\n- Fixed output of PcpPrimIndex::PrintStatistics on Windows.\n  (PR: [#1480](https://www.github.com/PixarAnimationStudios/USD/pull/1480))\n\n- Added support for \"codeless\" USD schemas that do not have any C++ or Python\n  code. Changes to these schemas' definitions do not require any code to be\n  recompiled; instead, the generatedSchema.usda just needs to be regenerated\n  via usdGenSchema and reinstalled.\n\n- Added usdgenschemafromsdr utility to generate schemas from Sdr nodes.\n- Added ability to specify allowed prim types for API schemas in the customData\n  dictionary for the schema in schema.usda.\n- Added UsdPrim::CanApplyAPI and CanApply to all API schema classes to check if\n  an API schema can be applied to a prim based on the restrictions above.\n- Removed deprecated instancing \"master\" API from UsdStage and UsdPrim.\n- Removed support for deprecated \"UsdSchemaType\" terminology in schemas.\n- Fixed UsdStage::ResolveIdentifierToEditTarget to be consistent with asset\n  path computations during composition.\n- Fixed bug where UsdResolveInfo / UsdAttributeQuery would be invalidated by an\n  insignificant layer stack change.\n  (Issue: [#1500](https://www.github.com/PixarAnimationStudios/USD/pull/1500))\n- Improved change processing performance in UsdStage. In an internal test that\n  authored many attributes, runtime decreased by ~50% (from ~50s to ~25s).\n- A UsdConnectableAPIBehavior can now be set to ignore shader encapsulation\n  rules by overriding UsdConnectableAPIBehavior::RequiresEncapsulation.\n- API schemas can now provide connectability behavior, which can override\n  behavior based on prim type.\n- Deprecated UsdShadeMaterial::ComputeSurfaceSource, ComputeVolumeSource, and\n  ComputeDisplacementSource overloads taking a single token for renderContext.\n- Renamed SdfTypeIndicator to NdrSdfTypeIndicator.\n- Added initial version of UsdPhysics domain and schemas. For more details, see\n  the [proposal](https://graphics.pixar.com/usd/docs/Rigid-Body-Physics-in-USD-Proposal.html).\n  (PR: [#1424](https://www.github.com/PixarAnimationStudios/USD/pull/1424))\n- Miscellaneous documentation fixes.\n  (PR: [#1485](https://www.github.com/PixarAnimationStudios/USD/pull/1485),\n   [#1553](https://www.github.com/PixarAnimationStudios/USD/pull/1553))\n\n### Imaging\n- Added basic support for Hydra Commands, a mechanism to invoke actions that\n  renderers know how to perform.\n- Added support for loading OpenVDB grids via ArAsset, allowing OpenVDB files\n  to be read from within .usdz files.\n- Added support for cameras in the testing Null render delegate.\n- Added new rendertask param to disable clipping.\n- Added UsdImagingGLEngine::SetPresentationOutput to explicitly set the\n  framebuffer that AOVs are presented into.\n- Fixed buffer allocation in vboSimpleMemory Manager.\n- Fixed issue in UsdImaging that would occur when a CoordSys is bound to an\n  Xform prim with a renderable descendants.\n- Fixed resync of shaders in UsdImaging to also resync geometry bound to the\n  shader's material.\n  (Issue: [#1487](https://www.github.com/PixarAnimationStudios/USD/pull/1487))\n- Fixed handling of edits to \"purpose\" in the native instance adapter in\n  UsdImaging.\n  (Issue: [#1515](https://www.github.com/PixarAnimationStudios/USD/pull/1515))\n- Fixed unwanted export of stbImage symbols from Hio.\n  (PR: [#1498](https://www.github.com/PixarAnimationStudios/USD/pull/1498))\n- Allow point instancer prototypes from overs in UsdImaging.\n  (PR: [#1436](https://www.github.com/PixarAnimationStudios/USD/pull/1436))\n- Removed HdxMaterialTagTokens in favor of HdStMaterialTagTokens.\n\n### usdview\n- usdview and usdrecord now share the argument parsing facility for renderers.\n- Fixed issue where usdview would sometimes open in the background on Windows.\n  (PR: [#1537](https://www.github.com/PixarAnimationStudios/USD/pull/1537))\n- Fixed to not error or warn in Rollover Prim Info if assetInfo has no\n  identifier entry.\n  (PR: [#1476](https://www.github.com/PixarAnimationStudios/USD/pull/1476))\n- Fixed Qt window being displayed in usdrecord.\n  (Issue: [#1521](https://www.github.com/PixarAnimationStudios/USD/pull/1521))\n\n### Storm\n- Added support for correct refinement of varying and face-varying primvars.\n- Added support for compute program preprocessor defines.\n- Added size validation for uniform primvars of basis curves.\n- Improved performance of volume ray marching shader.\n- Improved wireframe on surface display for adaptive tessellation.\n- Improved wireframe on surface display for uniform refinement.\n- Improved edge picking performance.\n- Improved performance and appearance of patch edge drawing.\n- Improved GPU memory usage by using a non-aggregated allocation for GPU stencil\n  table buffers.\n- Moved mesh edge handling out of the geometry shader.\n- Changed default material tag in HdxTaskController to enable alpha-to-coverage.\n- Changed behavior, when a dome light texture is invalid, issue a coding error\n  and print the file path for debugging.\n- Changed behavior, updated selection on tracker during Prepare instead of Sync.\n- Use the new texture system to bind the texture in the render pass shader.\n- Removed redundant ptexId field from patchParam.\n- Removed HdStExtCompGpuComputationBufferSource.\n- Removed remaining GS edge id shader code.\n- Removed HdStMixinShader since its usage was very limited.\n- Fixed multiple issues related to OSD drawing.\n- Fixed Ptex layout texture sampler type.\n- Fixed TCS/TES processing of primvar and drawingCoord.\n- Fixed incorrect handling of left-handed meshes.\n  (Issue: [#1075](https://www.github.com/PixarAnimationStudios/USD/pull/1075))\n- Fixed resolution of symlinked UDIM textures.\n  (Issue: [#1329](https://www.github.com/PixarAnimationStudios/USD/pull/1329))\n- Fixed area light approximation when transforms are animated.\n  (Issue: [#1524](https://www.github.com/PixarAnimationStudios/USD/pull/1524))\n\n- Various improvements to Hgi:\n  - Added 1D texture array upload support in HgiMetal.\n  - Added 16-bit signed integer data formats.\n  - Added buffer binding support for Hgi shader codegen.\n  - Added codeGen for compute shader invocation ID.\n  - Added HgiShaderFunctionDesc creation path to HdStGLSLProgram.\n  - Moved Storm compute functions to Hgi shader generation.\n  - Removed now unnecessary restoration of framebuffer in HgiGLScopedStateHolder\n    and HgiInteropOpenGL.\n  - Converted primvar refinement to Hgi compute shaders.\n\n### RenderMan Hydra Plugin\n- Updated RenderMan version required by HdPrman to 24.\n- Unified HdPrman & HdxPrman into HdPrman.\n- Added basic support to optionally use MaterialX networks. (see below)\n\n### Alembic Plugin\n- Changed default number of threads used for reading Ogawa-backed files from\n  4 to 1. This may be changed with the `USD_ABC_NUM_OGAWA_STREAMS` env var.\n\n### MaterialX Plugin\n- Added support for reading MaterialX documents within .usdz files\n  when Ar 2.0 is enabled.\n- Imaging support:\n    - Moved the code common to both Storm and HdPrman into imaging/hdMtlx.\n    - Allow the output of a nodegraph to be used multiple times.\n      (Issue: [#1489](https://www.github.com/PixarAnimationStudios/USD/pull/1489))\n    - Update _GetMxNodeType to use MaterialX functions to support arbitrary node\n      types not just UsdPreviewSurface and StandardSurface.\n      (Issue [#1538](https://www.github.com/PixarAnimationStudios/USD/pull/1538))\n    - Fixed issue with incorrect paths for finding nodes.\n      (Issue: [#1488](https://www.github.com/PixarAnimationStudios/USD/pull/1488))\n    - (Storm support) Added support for different primvar texture coordinate\n      names to be passed down through the mtlx file.\n    - (Storm support) Added support for textures to be used anywhere within the\n      connected nodegraph instead of just as inputs for the material properties.\n    - (Storm support) Added basic support for transparent MaterialX materials\n      making sure the proper material tag is set.\n    - (HdPrman support) Added basic support to use MaterialX networks.\n    - (HdPrman support) Updated StandardSurface adapter node to pass the normal\n      to PxrSurface for the bumpNormal.\n\n### Security\n- Fixed [CVE-2020-13520](https://talosintelligence.com/vulnerability_reports/TALOS-2020-1120)\n- Fixed [CVE-2020-13531](https://talosintelligence.com/vulnerability_reports/TALOS-2020-1145)\n\n## [21.05] - 2021-04-12\n\n### Build\n- Removed unnecessary check for Python executable in build_usd.py.\n  (Issue: [#1414](https://www.github.com/PixarAnimationStudios/USD/issues/1414), \n  PR: [#1464](https://www.github.com/PixarAnimationStudios/USD/pull/1464))\n- Updated build_usd.py to use MaterialX v1.38.0 and unified the MaterialX plugin \n  and imaging build options PXR_BUILD_MATERIALX_PLUGIN and \n  PXR_ENABLE_MATERIALX_IMAGING_SUPPORT into PXR_ENABLE_MATERIALX_SUPPORT.\n- Exposed version numbers in pxrConfig.cmake for CMake client projects.\n- Updated CHANGELOG.md to include links to pull requests and issues. \n  (Issue: [#1362](https://www.github.com/PixarAnimationStudios/USD/issues/1362))\n- Fixed linking errors by removing extern C linkage from LZ4 symbols, to avoid \n  collisions with other libraries embedding LZ4. \n  (Issue: [#1447](https://www.github.com/PixarAnimationStudios/USD/issues/1447))\n- Updated VERSIONS.md to include  Linux, Windows and MacOS versions used for \n  testing. Note that Windows and MacOS should still be considered experimental. \n  (PR: [#1393](https://www.github.com/PixarAnimationStudios/USD/pull/1393))\n\n### USD\n- Added UsdUtils.UpdateSchemaWithSdrNode functionality for creating or updating \n  a schema.usda from specially curated sdrShaderNode and sdrShaderProperty \n  metadata.\n- Updated usdGenSchema to not error when generating a dynamic schema and \n  libraryPath is not specified.\n- The default 'USD' SdrShaderNodes generated from UsdLuxLightFilter types now \n  have the context of \"lightFilter\" like other light filter shader nodes.\n- Fixed bug where the registered URI resolver would not be invoked for a URI \n  asset path if it was shorter than the longest registered URI schema.\n- The template asset path field for value clips now supports Sdf file format \n  arguments. \n  (PR: [#1450](https://www.github.com/PixarAnimationStudios/USD/pull/1450))\n- SdfLayer::ListFields now includes \"required fields\" for each spec type.\n- A collection of fixes and tests for Windows path handling, especially \n  involving symlinks. \n  (PR: [#1441](https://www.github.com/PixarAnimationStudios/USD/pull/1441),\n  [#1465](https://www.github.com/PixarAnimationStudios/USD/pull/1465), \n  [#1468](https://www.github.com/PixarAnimationStudios/USD/pull/1468),\n  Issues: [#1440](https://www.github.com/PixarAnimationStudios/USD/issues/1440))\n- Fixed usdGenSchema to honor apiName metadata for auto generated tokens.h. This \n  results in correct doxygen documentation for the correct API names.\n- UsdUtilsStitchClips now creates a separate manifest layer instead of using the \n  topology layer as the manifest layer. This is because the topology layer can \n  contain attributes that actually don't have any time samples in clips. \n  (Issue: [#1344](https://www.github.com/PixarAnimationStudios/USD/issues/1344))\n- Added documentation for built-in and auto-applied API schemas.\n- Added additional plugInfo mechanism (via AutoApplyAPISchemas metadata) to \n  define auto apply API schemas, to allow context/site specific auto application \n  of API schemas.\n- Added FlattenTo function to UsdPrimDefinition to copy the contents of a prim \n  definition into a prim spec on a layer.\n- Updated UsdShadeConnectableAPI::Get{Inputs,Outputs} to only return authored \n  inputs/outputs by default. Optional onlyAuthored=false argument can be passed \n  to explicitly include Builtins. Results in performance improvement at code \n  sites like UsdShadeShaderDefUtils.\n- UsdLux Shadow and Shaping APIs are now connectable. All attributes on these \n  APIs have been given the \"inputs:\" prefix.\n- Adding support for identifier aliases in Ndr/Sdr. This allows NdrRegistry to \n  use these aliases to find the node through the GetNodeByIdentifierAPIs when \n  there are no appropriate nodes that exactly match the identifier being \n  searched for.\n- Performance improvement in terminal resolution in UsdShade. Introduced a \n  `shaderOutputOnly` flag on the GetValueProducingAttributes function, this \n  allows us to get only the type of connections we want and avoid the cost of \n  the extra checks.\n- Updated NdrRegistry::GetNodeFromAsset() to use asset name and extension as the \n  node name instead of the identifier. Note that node name is not expected to be \n  unique for a NdrNode.\n- Fixed a pcp change processing bug where we did not consider layers with \n  replaced content significant wrt layer stacks that use the layer. \n  (Issue: [#1407](https://www.github.com/PixarAnimationStudios/USD/issues/1407))\n- Removed UsdShadeConnectableAPI implicit constructors from UsdShadeShader and \n  UsdShadeNodeGraph to enforce independence of connectability concept from \n  shader graphs. Callers are required to convert these explicitly now, which can \n  be done via the ConnectableAPI() method on Shader and NodeGraph.\n- Updated connectability rules in UsdShadeConnectableAPIBehavior to improve \n  encapsulation. Refer to the UsdShade documentation for details on \n  connectability rules.\n- usdGenSchema now adds a type alias for abstract typed schemas, which means \n  abstract typed schemas now have an official USD type name which is registered \n  with the UsdSchemaRegistry.\n- Auto apply API schemas in USD can now specify abstract typed schemas to auto \n  apply to, indicating that the API should be applied to all schemas that derive \n  from the abstract schema type.\n- Removed deprecated UsdConnectableAPI::IsShader() and IsNodeGraph() APIs.\n- Fixed performance regression in UsdStage change processing when applying an \n  API schema.\n- Make OSL parser for Sdr more robust to dynamic array type names.\n- Backwards compatibility for the deprecated \"UsdSchemaType\" terminology will be \n  removed in the next release. Schemas that have not been updated since v21.02 \n  must be regenerated to avoid breakage in the next release.\n\n\n### Imaging\n- Added SampleIndexedPrimvar() and GetIndexedPrimvar() scene delegate API to \n  allow users to access unflattened primvars and their indices.\n- Added support for time-sampled computed primvars in the scene delegate API \n  (including an UsdImaging implementation for Skel). \n  (PR: [#1455](https://www.github.com/PixarAnimationStudios/USD/pull/1455))\n- Added GetInstancerPrototypes() scene delegate API to return prim paths that \n  are prototypes of an instancer.\n- Added support for GetMaterialResource() to the lightAdapter and \n  lightFilterAdapter classes so the usdImaging scene delegate can provide \n  HdMaterialNetworks for lights and filters.\n- Added imaging adapters for UsdLuxPluginLight and UsdLuxPluginLightFilter.\n- Added optimization when checking primvar existence, use Get() instead of \n  ComputeFlattened().\n- Renamed render delegate API GetMaterialNetworkSelector() to \n  GetMaterialRenderContexts() to allow for multiple material render contexts.\n- Moved version tracking of batches from HdChangeTracker to Storm's render \n  delegate.\n- Moved garbage collection API to Storm's render delegate.\n- Refactored the free camera code in HdxTaskController::_Delegate into its own \n  HdxFreeCameraSceneDelegate.\n- Removed obsolete HdTexture bprim.\n- Various improvements to Hio:\n   - Refactored reading of HioImage and the conversion to an HgiFormat into \n     common functionality.\n   - Moved volume field texture loading out of Glf. Volume data is loaded via a \n     plugin point (hioOpenVDB) in HioFieldTextureData.\n   - Replaced GlfGetNumElements(HioFormat) and GlfGetElementSize(HioFormat) with \n     equivalent functions in Hio.\n   - The HioOIIO OpenImageIO plugin supports format conversion when loading \n     image data, so we specify the target format in the destination image spec.\n   - As the transition to Hio (and our new texture system) continues to move \n     forward, we are now removing many entry points in Glf.\n- Fixed crash on Hydra update when a prototype primitive is removed (deleted or \n  deactivated) in the same update cycle where an inheritable primvar is added or \n  changed to an ancestor of the prototype that used to exist. \n  (PR: [#1418](https://www.github.com/PixarAnimationStudios/USD/pull/1418), \n  Issue: [#1417](https://www.github.com/PixarAnimationStudios/USD/issues/1417))\n- Fixed skip creating unsupported AOVs in the task controller. \n  (Issue: [#1215](https://www.github.com/PixarAnimationStudios/USD/issues/1215))\n- Fixed non-color AOV visualization. \n  (Issue: [#1437](https://www.github.com/PixarAnimationStudios/USD/issues/1437))\n- Fixed material binding improvements for point instancer prototypes. \n  (Issue: [#1449](https://www.github.com/PixarAnimationStudios/USD/issues/1449))\n- Fixed instance highlighting for native instances when the selected instance is \n  invisible. \n  (Issue: [#1461](https://www.github.com/PixarAnimationStudios/USD/issues/1461))\n- Fixed PointInstancerAdapter Get() to properly call the fallback if it can't \n  find the requested key. \n  (Issue: [#1439](https://www.github.com/PixarAnimationStudios/USD/issues/1439))\n\n### Storm\n- Added filtering of instancer primvar bindings.\n- Added shader configurations, mixins and a new material tag \n  'translucentToSelection' to enable occluded selection to show through.\n- Added HdRenderPassState API to enable/disable the depth test.\n- Added better support for a color mask to be specified per color attachment \n  rather than use the same mask for all attachments.\n- Added SetPresentationOutput() API specifies the framebuffer the present task \n  will write the AOVs into.\n- Added casts to avoid GLSL compile errors when enabling \n  HD_ENABLE_DOUBLE_MATRIX and using the volume raymarcher.\n- Added GlfAnySharedGLContextScopeHolder that is a conditional \n  GlfSharedGLContextScopeHolder only switching the shared context if there is no \n  current valid context.\n- Added number of texture objects and handles to \n  HdStResourceRegistry::GetResourceAllocation.\n- Changed Ptex layout texture format in order to improve compatibility on \n  platforms which don't support 3-component textures.\n- Disabled bindless textures while we investigate unexpected performance \n  regressions related to switching context and bindless.\n- Optimization to bail out early for Storm tasks that have no work.\n- Avoid invalidation in the renderpass shader when processing buffer binding \n  requests.\n- Refactored basis curves points primvar processing such that it uses \n  HdSt_BasisCurvesPrimvarInterpolaterComputation.\n- Fixed to trigger draw item gather when material tag changes\n- Fixed HgiBufferDesc byteSize calculations to avoid reading beyond initialized \n  data when creating buffer objects.\n- Renamed renderPassShader.glslfx to renderPassColorShader.glslfx to clarify its \n  intent.\n- Renamed rprimUtils to primUtils to reduce code duplication.\n- Removed unused mixin option to discard unselected fragments.\n- Removed Bind/Unbind HdRenderPassState API\n- Removed GlfHasLegacyGraphics - use GlfContextCaps instead.\n- Removed render pass state override shader.\n- Various improvements to Hgi:\n   - Added support to pass an external framebuffer to HgiInterop.\n   - Renamed HgiMipInfo::byteSize to HgiMipInfo::byteSizePerLayer for \n     clarification.\n   - Moved HgiShaderSection::WriteAttributeToIndex to HgiMetalShaderSection.\n   - Unified how attributes are stored across GL, Metal and Vulkan.\n   - Fixed resolve op to transfer data from/to all attachments.\n   - Fixed a potential bug where the wrong size was computed for a compressed \n     array texture.\n   - Fixed code generation for unsigned and signed integer textures.\n   - Fixed redundant depth buffer resolve and ensure that in the absence of \n     color attachments, it still gets resolved.\n   - Fixed Metal error related to resource lifetime.\n\n### RenderMan Hydra Plugin\n- Updated RenderMan version required by hdPrman to 23.5.\n- NOTE: The USD release following the RenderMan 24 release will increase the \n  required version once more to 24.0. In other words, this will likely be the \n  last USD release with hdPrman support for RenderMan 23.x.\n- Made the rman args parser map `bxdf` types inputs to the Sdr `terminal` type.\n- Finishing work to support fieldDataType and vectorDataRoleHint for UsdVol \n  prims in hdPrman.\n\n\n### MaterialX Support\n- Minimum of MaterialX v1.38 is now required.\n- MaterialX support in Storm:\n   - Added basic support for textures.\n   - Added basic support for direct lights.\n   - Added a Mtlx render context, which gets consumed by Storm's render \n     delegate.\n   - Register MaterialX nodes as having \"mtlx\" source type and allow Storm's \n     material network to accept both glslfx and mtlx sourcetypes.\n   - Changed the MaterialX option from FIS to Specular Environment Prefilter.\n   - Fixed u_envMatrix calculation to account for y-up/z-up/domelight \n     transform.\n- Various improvements to the usdMtlx plugin:\n   - Record \"geomprop\" references from materialx into Sdr's \"primvars\" \n     metadata. This lets clients query which primvars the material wants access \n     to (for purposes such as primvar filtering).\n   - No longer copying default values on shader inputs to each USD shader \n     definition to improve performance and keep it more consistent with other \n     UsdShade constructs.\n   - Removed deprecated references to shaderref, Color2.\n   - Fixed a crash in UsdMtlx when reading mtlx nodes that use a MaterialX \n     standard shader nodedef.\n\n### usdview\n- Fixed a bug where we weren't updating for changes that affect the entire \n  stage. \n  (Issue: [#1407](https://www.github.com/PixarAnimationStudios/USD/issues/1407))\n- Improved testusdview error reporting \n  (PR: [#1416](https://www.github.com/PixarAnimationStudios/USD/pull/1416))\n\n## [21.02] - 2021-01-18\n\n### Build\n- Added build and packaging scripts for PyPI packages. Thanks to Nvidia for\n  their work on this project!\n- Updated documentation build to fix several issues and no longer require \n  Python. (Issue: [#718](https://www.github.com/PixarAnimationStudios/USD/issues/718))\n- GLEW is no longer required for building imaging components.\n\n- Various fixes and changes to build_usd.py:\n  - Fixed command-line args not being respected for OpenVDB. \n    (PR: [#1406](https://www.github.com/PixarAnimationStudios/USD/pull/1406))\n  - Updated boost to 1.70 on macOS for both Python 2 and 3. \n    (Issue: [#1369](https://www.github.com/PixarAnimationStudios/USD/issues/1369))\n  - Updated MaterialX to 1.37.3 with shared libraries on Linux.\n\n- Fixed various linking issues with OpenEXR. \n  (PR: [#1398](https://www.github.com/PixarAnimationStudios/USD/pull/1398))\n\n### USD\n- Allow setting malloc hook functions if they were previously set to malloc/etc.\n- Fixed handling of symbolic links and mount points on Windows. \n  (PR: [#1378](https://www.github.com/PixarAnimationStudios/USD/pull/1378))\n- Fixed incorrect handling of non-existent variables in TfEnvSetting in Python.\n- Updated GfRect2i API to use function and argument names that are agnostic\n  to the direction of the Y axis.\n- Updated ilmbase half embedded in Gf to OpenEXR v2.5.3. \n  (Issue: [#1354](https://www.github.com/PixarAnimationStudios/USD/issues/1354))\n- Added VtArray::AsConst, cfront, and cback methods to help avoid inadvertent\n  copy-on-writes and thread-safety issues.\n\n- Fixes for variety of issues with VtArray conversions in Python, including\n  conversion from Python sequences if all elements are convertible and a\n  bug with inadvertent copy-on-writes. \n  (Issue: [#1138](https://www.github.com/PixarAnimationStudios/USD/issues/1138))\n\n- Initial implementation of Ar 2.0. This includes new features like support\n  for URI resolvers and many changes to the ArResolver interface. For more\n  details see https://graphics.pixar.com/usd/docs/668045551.html.\n\n  Work on Ar 2.0 is not yet complete and will continue through the next few\n  releases. Ar 2.0 is disabled by default but can be enabled for preview and\n  initial testing by specifying `PXR_USE_AR_2=ON` when running CMake.\n\n- Moved SdfFindOrOpenRelativeToLayer to SdfLayer::FindOrOpenRelativeToLayer.\n- Fixed SdfLayer::FindRelativeToLayer to use the same anchoring logic as\n  SdfLayer::FindOrOpenRelativeToLayer.\n- Fixed string encoding issue in .usda file writer. \n  (Issue: [#1331](https://www.github.com/PixarAnimationStudios/USD/issues/1331))\n- Improved behavior when hitting hard-coded composition graph limits in Pcp.\n- Fixed incorrect native instancing behavior with sub-root references.\n\n- Added support for auto-apply API schemas. This allows single-apply API\n  schemas to be automatically applied to prims using one of a list of\n  associated concrete schema types instead of requiring the user to manually\n  apply the API schema.\n\n- Renamed UsdSchemaType to UsdSchemaKind to disambiguate between the schema\n  type (e.g. UsdGeomSphere) and kind (e.g. non-applied, single-apply, etc).\n- Deprecated functions using the \"schema type\" terminology in favor of\n  \"schema kind\".\n- Added UsdVariantSet::BlockVariantSelection. \n  (Issue: [#1319](https://www.github.com/PixarAnimationStudios/USD/issues/1319), \n  PR: [#1340](https://www.github.com/PixarAnimationStudios/USD/pull/1340))\n- Removed deprecated UsdAttribute::BlockConnections.\n- Removed deprecated UsdRelationship::BlockTargets.\n- Removed deprecated UsdCollectionAPI::ApplyCollection.\n- Added \"container\" concept to UsdShadeConnectableAPI.\n- Added support for connecting multiple sources to UsdShadeConnectableAPI.\n- Deprecated API for connecting to single sources in favor of the more\n  general multiple-source API on UsdShadeConnectableAPI.\n\n- Deprecated UsdConnectableAPI::IsShader and IsNodeGraph in favor of\n  IsContainer API. Warnings are emitted on first use unless the environment\n  setting `USD_SHADE_EMIT_CONNECTABLE_API_DEPRECATION_WARNING` is set to 0.\n\n- Updated various clients to apply the UsdShadeMaterialBindingAPI schema\n  before binding materials.\n- Fixed Python binding for UsdShade.CoordSysAPI.HasLocalBindings. \n  (PR: [#1360](https://www.github.com/PixarAnimationStudios/USD/pull/1360))\n- Fixed Python binding for UsdSkel.SkinningQuery.ComputeExtentsPadding.\n  (Issue: [#1375](https://www.github.com/PixarAnimationStudios/USD/issues/1375))\n- Added UsdLuxPluginLight and UsdLuxPluginLightFilter schemas that allow for\n  defining a light or light filter via an SdrShaderNode.\n- UsdLuxLight and UsdLuxLightFilter schemas now publish an associated\n  SdrShaderNode based on their built-in properties.\n- Input attributes for UsdLuxLight and UsdLuxLightFilter schemas are now\n  connectable and have been renamed to include the \"inputs:\" prefix.\n- Deprecated UsdLuxLightPortal schema in favor of new UsdLuxPortalLight schema.\n\n### Imaging\n- Added new GL Loading Library (GLApi) to replace GLEW. GLEW is no longer \n  required.\n- Added HioImage, removed GlfImage.\n- Added new camera framing API. Introduces the display and data window and \n  storage size to separate these concepts. Updated Storm, HdPrman, and HdEmbree.\n- Added support for normal buffers to HdxPickFromRenderBufferTask.\n- Added standard prim API to HdInstancer and HdSceneDelegate::GetInstancerId.\n- Added support for animated extents when using draw modes. \n  (PR: [#1365](https://www.github.com/PixarAnimationStudios/USD/pull/1365))\n- Improved Hydra camera to better support physically based attributes.\n- Extended HdDisplayStyle to house more advanced selection behaviors.\n- Changed renderParams timeCode default values from Default to EarliestValue.\n- Changed UsdImagingDelegate to map HdLightTokens to the new input attribute \n  names in queries through GetLightParamValue.\n- Merged tokens textureResourceMemory into textureMemory for better performance \n  tracking.\n- Renamed UsdImagingValueCache to UsdImagingPrimvarDescCache, it only stores \n  primvar descriptors.\n- Removed implementations of deprecated HdSceneDelegate::GetTextureResource.\n- Removed HwFieldReader volume material node in favor of typed nodes.\n- Fixed bug in pick targets when resolving unique hits. \n  (Issue: [#1343](https://www.github.com/PixarAnimationStudios/USD/issues/1343))\n- Fixed UsdSkel instance drawing at origin bug. \n  (Issue: [#1347](https://www.github.com/PixarAnimationStudios/USD/issues/1347))\n- Fixed UsdImaging to discard coord sys bindings to non-existent xforms. \n  (Issue: [#1346](https://www.github.com/PixarAnimationStudios/USD/issues/1346))\n- Fixed UsdSkelImagingSkeletonAdapter to forward GetMaterialId and \n  GetDoubleSided calls to skinned mesh primadapter. \n  (Issue: [#1384](https://www.github.com/PixarAnimationStudios/USD/issues/1384))\n- Fixed an issue where UsdSkelImagingSkeletonAdapter::_RemovePrim() failed to \n  remove skeletons that did not have any bindings to skinned prims. \n  (Issue: [#1228](https://www.github.com/PixarAnimationStudios/USD/issues/1228), \n   Issue: [#1248](https://www.github.com/PixarAnimationStudios/USD/issues/1248))\n- Fixed some display crashes after resyncing skeletons. \n  (PR: [#1397](https://www.github.com/PixarAnimationStudios/USD/pull/1397))\n- Fixed dome light preview surface. \n  (PR: [#1392](https://www.github.com/PixarAnimationStudios/USD/pull/1392))\n- Fixed links to OpenEXR for Alembic and OpenImageIO plugins. \n  (PR: [#1398](https://www.github.com/PixarAnimationStudios/USD/pull/1398))\n\n### Storm\n- Added support for varying interpolation of any basis curves primvar. \n  (Issue: [#1308](https://www.github.com/PixarAnimationStudios/USD/issues/1308))\n- Added support for HdStResourceRegistry::ReloadResource to allow clients to \n  explicitly force textures to be reloaded by file path. \n  (Issue: [#1352](https://www.github.com/PixarAnimationStudios/USD/issues/1352))\n- Added a new HdMaterialNetwork2 to combine (and then replace) \n  HdStMaterialNetwork and MatFiltNetwork.\n- Added step to convert 3 channel textures to 4 channel to support Hgi backends \n  with 4 channel requirements.\n- Added Resize() to barContainer.\n- Added fieldTextureMemory render setting to specify the target memory of \n  volume textures.\n- Added experimental MaterialXFilter to process a material network and convert \n  it into a MaterialX network. Also, added a first pass on a MaterialX \n  shadergen.\n- Enabled bindless textures by default.\n- Several improvements to volume rendering including a step size relative to the \n  sample distance so that the quality of the rendered volume does not depend on \n  the scale.\n- Optimized HdStRenderBuffer performance by only allocating when the descriptor \n  changes.\n- Optimized computations by avoiding copying the compute kernel for GPU \n  computations.\n- Refactored face culling to remove fragment shader discards when possible.\n- Refactored geometric shaders such that only prims with the \"masked\" material \n  tag can use alpha threshold based discards.\n- Switched Storm over to using the \"translucent\" material tag rather than \n  \"additive\" as the default translucency state.\n- Fixed handling of valid to invalid BAR transitions due to Scene graph \n  operations on primvars or primvar filtering. \n  (Issue: [#1182](https://www.github.com/PixarAnimationStudios/USD/issues/1182))\n- Fixed GPU memory leak of certain buffers never getting garbage collected.\n- Fixed fullscreen pass to preserve alpha.\n- Removed instance primvar filtering.\n- Various improvements to Hgi :\n  - Added initial version of the Hgi codegen to be able to produce \n    GLSL/MetalSL/others from glslfx.\n  - Added the first push of our experimental, incomplete, HgiVulkan backend, \n    which does not yet build by default.\n  - Added memory barriers to Hgi.\n  - Added CopyTextureToBuffer and CopyBufferToTexture to HgiBlitCmds.\n  - Added 2D_ARRAY support to Hgi.\n  - Moved Ptex and Udim loading from Glf to Hgi and Storm.\n  - Added UINT16 format as prep work for Ptex support.\n  - Fixed obj-c autorelease issue, and simplification of secondary command \n    buffer in HgiMetal compute encoder.\n  - Fixed HgiTexture::GetByteSizeOfResource to take the mip levels into account.\n  - Fixed for missing include. \n    (PR: [#1359](https://www.github.com/PixarAnimationStudios/USD/pull/1359))\n\n### usdview\n- Fixed StageView.pickObject when doubles are small or out of image-bounds. \n  (PR: [#1296](https://www.github.com/PixarAnimationStudios/USD/pull/1296))\n\n### MaterialX Plugin\n- Removed deprecated support for MaterialX 1.36.\n\n### Embree Hydra Plugin\n- Added support for new camera framing API and HdCamera API.\n\n### RenderMan Hydra Plugin\n- Bumped version requirement to RenderMan 23.5 or greater.\n- Improved calculation of vertex, varying, and face-varying primvar counts in \n  BasisCurves to better match RenderMan.\n- Added support for new camera framing API and HdCamera API.\n- Added support for material node int array inputs. \n  (Issue: [#1294](https://www.github.com/PixarAnimationStudios/USD/issues/1294))\n- Fixed issue that caused parameters from a shader to be incorrectly carried \n  over to the next shader that was parsed. \n  (Issue: [#1396](https://www.github.com/PixarAnimationStudios/USD/issues/1396))\n\n## [20.11] - 2020-10-14\n\n### Build\n- Updated CMakeLists.txt to conform to recommended practice. \n  (Issue: [#1241](https://www.github.com/PixarAnimationStudios/USD/issues/1241))\n- The build system now sets `Boost_NO_BOOST_CMAKE=ON` by default to\n  work around issues with boost's cmake files. \n  (Issue: [#1255](https://www.github.com/PixarAnimationStudios/USD/issues/1255))\n\n- Various fixes and changes to build_usd.py:\n  - Added `--toolset` option for specifying CMake toolset. \n    (PR: [#1325](https://www.github.com/PixarAnimationStudios/USD/pull/1325))\n  - Added `--prefer-safety-over-speed` and `--prefer-speed-over-safety`\n    options. See below for more details.\n  - Fixed issue with building libTIFF with Xcode 12. \n    (PR: [#1315](https://www.github.com/PixarAnimationStudios/USD/pull/1315))\n\n### USD\n- Fixed incorrect underlying container type for TfHashMultiMap. \n  (PR: [#1281](https://www.github.com/PixarAnimationStudios/USD/pull/1281))\n- Fixed invalid conversions of Gf containers like GfVec3f in Python. Note this\n  issue is still present in Python 3. \n  (Issue: [#1290](https://www.github.com/PixarAnimationStudios/USD/issues/1290))\n- Fixed various tests to accommodate `PXR_OVERRIDE_PLUGINPATH_NAME`. \n(PR: [#1275](https://www.github.com/PixarAnimationStudios/USD/pull/1275))\n\n- Added GetExternalAssetDependencies to SdfLayer and SdfFileFormat to allow\n  file format plugins to declare additional dependencies that determine when\n  a layer produced from that file format should be reloaded.\n\n- Reduced memory usage from SdfPath::GetString and added SdfPath::GetAsString\n  and SdfPath::GetAsToken to avoid populating internal caches. \n  (Issue: [#1287](https://www.github.com/PixarAnimationStudios/USD/issues/1287))\n\n- Various fixes to composition behavior:\n  - Fixed issues with sub-root references, payloads, and inherits, and\n    ancestral variant selections.\n  - Fixed issue with payloads on ancestors of sub-root references/payloads.\n  - Fixed issue with combinations of root, sub-root, and ancestral inherits.\n\n- Fixed bug in .usda file writer that could cause data corruption. \n  (Issue: [#1331](https://www.github.com/PixarAnimationStudios/USD/issues/1331))\n- Fixed performance issue when writing many relationship targets or attribute\n  connections to .usdc files. \n  (Issue: [#1345](https://www.github.com/PixarAnimationStudios/USD/issues/1345))\n\n- Improved performance for certain queries with .usdc files. In one example,\n  this decreased draw times in usdview after transform changes by ~90%.\n  (Issue: [#1300](https://www.github.com/PixarAnimationStudios/USD/issues/1300))\n\n- New .usdc files now default to version 0.8.0. These files cannot be read in\n  USD releases prior to v19.03. Users can revert to writing older versions by\n  setting the environment variable `USD_WRITE_NEW_USDC_FILES_AS_VERSION` to an\n  older version.\n\n- Added safety checks to guard against reading malformed .usdc files. These\n  checks may negatively impact performance and may be disabled by specifying\n  `PXR_PREFER_SAFETY_OVER_SPEED=OFF` when running CMake or\n  `--prefer-speed-over-safety` with build_usd.py.\n\n- Native instancing \"master\" prims are now referred to as \"prototype\" prims.\n  The generated paths of prototype prims has been changed from /__Master_<X>\n  to /__Prototype_<X>. Clients can use new UsdPrim::IsPrototypePath and\n  UsdPrim::IsPathInPrototype API to determine if a given path is related\n  to a prototype.\n\n  UsdStage and UsdPrim API using \"master\" terminology like UsdPrim::GetMaster\n  and UsdStage::GetMasters have been deprecated and will be removed in a future\n  release.\n\n- Added Get/Set/ClearChildrenReorder to UsdPrim for reordering prim children.\n- UsdProperty::FlattenTo now allows flattening properties across stages.\n- Deprecated UsdRelationship::BlockTargets and UsdAttribute::BlockConnections.\n  Clients should use SetTargets({}) and SetConnections({}) instead.\n- Changed UsdRelationship::GetTargets and UsdAttribute::GetConnections to return\n  false when HasAuthored would return false.\n- Fixed bug where UsdFlattenLayerStack was not applying the asset path\n  resolution callback to asset paths in `clips` metadata. \n  (PR: [#1266](https://www.github.com/PixarAnimationStudios/USD/pull/1266))\n- Added UsdNotice::LayerMutingChanged notice. \n  (Issue: [#676](https://www.github.com/PixarAnimationStudios/USD/issues/676))\n- Fixed resource leak with Usd.PrimCompositionQuery in Python. \n  (PR: [#1297](https://www.github.com/PixarAnimationStudios/USD/pull/1297))\n- Fixed crashes when printing expired Sdf.Layer and Usd.Stage objects in\n  Python. (PR: [#1012](https://www.github.com/PixarAnimationStudios/USD/pull/1012))\n- Removed `isPrivateApply` functionality from schema generation.\n- Fixed error in UsdUtilsComputeAllDependencies when an invalid\n  templateAssetPath value is specified. \n  (PR: [#1289](https://www.github.com/PixarAnimationStudios/USD/pull/1289))\n- Improved UsdUtilsGetPrimaryUVSetName and UsdUtilsGetPrefName. \n  (PR: [#1283](https://www.github.com/PixarAnimationStudios/USD/pull/1283))\n- Fixed bug in UsdUtilsStitchClips that led to inconsistent stitched results.\n\n- Added CanContainPropertyName to UsdCollectionAPI, UsdGeomPrimvars,\n  UsdShadeMaterialBindingAPI, and UsdShadeCoordSysAPI for checking if a\n  property name is valid for these schemas.\n\n- Deprecated UsdCollectionAPI::ApplyCollection in favor of Apply.\n- Added fallback values for texture card attributes on UsdGeomModelAPI schema.\n- Added exposure control to UsdGeomCamera.\n- Added ease-of-use API to UsdGeom primitives for querying the size of primary\n  geometric properties (e.g. UsdGeomMesh::GetFaceCount).\n- Fixed plugin extent computations for primitives in UsdGeom to respect\n  given timecode parameter. \n  (PR: [#1284](https://www.github.com/PixarAnimationStudios/USD/pull/1284))\n- Fixed crash in UsdGeomSubset::GetUnassignedIndices when a given subset had\n  negative indices. \n  (Issue: [#1227](https://www.github.com/PixarAnimationStudios/USD/issues/1227))\n- Added UsdShadeNodeDefAPI schema to represent connectable nodes in a graph.\n  UsdShadeShader has been modified to build off of this schema.\n- Added UsdShadeConnectableAPIBehavior to allow plugins to customize\n  connectability by prim type.\n- Added API to retrieve material outputs for standard terminals in all\n  render contexts on UsdShadeMaterial.\n- Added more instancing support to UsdSkel. \n  (PR: [#1258](https://www.github.com/PixarAnimationStudios/USD/pull/1258))\n- Updated UsdVol FieldAsset schemas.\n- Various documentation fixes. \n  (Issue: [#1162](https://www.github.com/PixarAnimationStudios/USD/issues/1162), \n  PR: [#1335](https://www.github.com/PixarAnimationStudios/USD/pull/1335))\n\n### Imaging\n- Added new \"sourceColorSpace\" input to UsdUVTexture with values \"raw\", \"sRGB\",\n  and \"auto\" for better control of with which color space a texture is read.\n- Added ability to use mip maps authored in a file in the new texture system in\n  Storm.\n- Added UsdImagingPrimAdapter::ShouldIgnoreNativeInstanceSubtrees() to allow\n  adapters to disable instancing of itself and its descendants.\n- Added pre-multiply alpha functionality for UDIM textures. Also added sRGB\n  internal formats for UDIMs.\n- Added checks in HioGlslfxConfig to make sure the default value for an\n  attribute and its type match.\n- Added HdEngine::ClearTaskContextData() to avoid the task context to hold on to\n  resources that are about to become invalid as the render delegate is destroyed.\n- Added HDST_DUMP_FAILING_SHADER_SOURCEFILE debug flag to facilitate shader\n  debugging.\n- Added texture filepath resolution for symlinks.\n- Added an \"outHitNormal\" parameter to UsdImagingGLEngine::TestIntersection().\n- Added ReloadResource in Storm which reloads shader files when they change.\n\n- Improvements to Hgi:\n  - Added Draw, DrawIndirect and DrawIndexedIndirect to Hgi and backends.\n  - Added tracking of HgiCmds submission to ensure they only get submitted once.\n  - Added TextureCpuToGpu copy on BlitCmd, and CopyBufferGpuToCpu to read back\n    the GPU frustum cull results.\n  - Added guarantees that HgiGLInterop will restore GL state after interop.\n  - Added guarantees that Hgi GPU-GPU sync between SubmitCmds calls.\n  - Added TextureView to Hgi and convert domelight to use Hgi compute and\n    texture views.\n  - Added staging buffer in Hgi to reduce the amount of times small amounts of\n    data are copied into the same GPU buffer.\n  - Added HgiPrimitiveType, and added HgiSampleCount on HgiPipelineDesc.\n  - Added support for BC texture compression.\n  - Added component mapping to HgiTextureDesc and implementations for GL and\n    Metal.\n  - Added ability to share HgiCmds objects in Storm.\n  - Added optional wait behavior for command submission in Hgi.\n\n- Changed GLenum usage in GlfBaseTextureData and others to use new HioFormat.\n- Changed Storm's frustum culling to be done via a vertex shader without a\n  fragment shader.\n- Changed HdxShadowTask to specify that it should only render opaque and masked\n  materials.\n- Changed cards UVs from face-varying to vertex interpolated.\n- Changed to GL_SAMPLE_ALPHA_TO_ONE when using alpha to coverage, the alpha\n  computed after the framebuffer resolve is more meaningful.\n- Changed texture cards to require prims with UsdGeomModelAPI schema applied.\n- Changed type of UsdPrimvarReader.varname input from token to string.\n- Renamed various HdSt*GL classes to just HdSt*, this is part of the transition\n  of Storm to support multiple rendering APIs.\n- Enabled bindless shadow maps by default in Storm.\n- On first material sync in Storm, now we try to batch prims with identical\n  textures together.\n- HdStDrawTarget's preferred mechanism are AOVs not GlfDrawTarget's. This change\n  allows us to remove all GlfDrawTarget support from HdStDrawTarget.\n- Since HdStDrawTarget's no longer rely on the resolve task, removing code to\n  communicate the draw target task render passes to the resolve task.\n- Deprecated HdSceneDelegate::GetTextureResource and will eventually be removed.\n- An application can now disable the PresentTask in hdx task controller.\n- When imaging basis curves, treat empty normals array the same as missing\n  normals (i.e. draw as tube and not ribbon at higher complexities).\n- Store HgiResourceBindings and HgiPipeline objects on HdSt resource registry.\n- Switched (most of) the GPU frustum culling code from raw GL to Hgi.\n- With the addition of HgiMetal, all platforms we currently support (for Storm)\n  support color correction and 16F targets.\n- Use BufferResource for GPU frustum cull result buffer so we can use the\n  regular buffer binding APIs.\n- Load mipmap data in HgiMetal textures.\n- Changed signature of HgiDataSizeOfFormat so that it can return blockWidth and\n  blockHeight. Returning block size in bytes for compressed formats.\n- Describe shader constants (push constants) in pipeline.\n- Using HgiCompute in smooth normals computation, switched flat normals and\n  quadrangulate to HgiCompute, and converted HdStExtCompGpuComputation to Hgi.\n\n- Removed UsdImaging value cache API for all data except primvar descriptors and\n  instance indices.\n- Removed unused hitMode field from HdxPickTaskContextParams.\n- Removed UsdImagingGLEngine::InvalidateBuffers().\n- Removed pre-multiply alpha behavior from volume.glslfx and changed\n  renderPass.glslfx to allow fully transparent but still emissive volumes.\n- Removed pre-multiply alpha behavior from stb_image and make it optional via\n  SubtextureIdentifier within the HdSt texture system.\n- Removed support of old-style draw targets using GlfDrawTarget instead of AOVs\n  and render buffers.\n- Removed UsdUvTexture's rgba output, and updated the cards draw mode to now use\n  \"rgb\" and \"a\" outputs rather than rgba.\n- Removed ReloadAllShaders from HdEngine.\n- Removed HD_DRAWITEM_DRAWN as it uses raw gl calls that map/unmap a buffer.\n- Removed HgiPipelineType. We split HgiPipeline into HgiComputePipeline and\n  HgiGraphicsPipeline a little bit ago.\n- Removed resource bindings handle from pipeline.\n- Removed smooth normals CPU fallback path. Since previous releases required\n  OpenGL 4.5 for Hgi to work, OpenGL compute must always be available.\n- Removed HdBinding::TBO.\n- Removed the implicit barriers from Hgi and let the external client manage\n  synchronization via SubmitCmds.\n\n- Fixed potential dead-lock caused by parallel loading plugins.\n- Fixed lights to be turned off when invisible in UsdImaging.\n- Fixed issue with UsdImagingGLEngine::TestIntersection such that it now\n  correctly populates. Callers of this function are reminded to provide the\n  \"frame\" field in UsdImagingGLRenderParams for correct and performant results.\n- Fixed handling of computed primvar sources for meshes.\n- Fixed normals after complexity change.\n- Fixed HgiGL garbage collector leak when Hgi is recreated during process.\n- Fixed HgiGL to better protect against long labels when using glObjectLabel.\n- Fixed render settings behaviors so we test whether or not we're really\n  changing anything before incrementing the settings version.\n- Fixed for cycle detection in material network processing.\n- Fixed Glf lighting resource binding.\n- Fixed USD edit dependency tracking for cards prims.\n\n- Updated UsdPreviewSurface clearcoat calculations to better match expected\n  inputs for a specular lobe in Storm, and added clearcoat component to indirect\n  lighting calculation in Storm. \n  (Issue: [#1307](https://www.github.com/PixarAnimationStudios/USD/issues/1307))\n- Added support for UsdPreviewSurface's opacityThreshold parameter in\n  Storm. (Issue: [#990](https://www.github.com/PixarAnimationStudios/USD/issues/990))\n- Added support for normal mapping for UsdPreviewSurfaces in Storm. \n  (Issue: [#701](https://www.github.com/PixarAnimationStudios/USD/issues/701))\n- Metallic materials should have an F0 equal to their base color in\n  UsdPreviewSurface in Storm. \n  (Issue: [#1174](https://www.github.com/PixarAnimationStudios/USD/issues/1174))\n\n- Removed pre-multiplication behavior from OIT resolve shader. The preview\n  surface (and other shaders) pre-multiply within the fragment shader (unless\n  the \"diffuseColor\" and \"opacity\" params are connected to the same\n  texture). \n  (Issue: [#1269](https://www.github.com/PixarAnimationStudios/USD/issues/1269))\n\n- Added support for UDIM texture scale and bias in Storm. \n  (Issue: [#1129](https://www.github.com/PixarAnimationStudios/USD/issues/1129))\n- Converted render index to usdImaging cachePath before calling the adapter\n  InvokeComputation method. \n  (Issue: [#1333](https://www.github.com/PixarAnimationStudios/USD/issues/1333))\n- Fix draw mode adapter handling of transforms for instanced card prims. \n  (Issue: [#1251](https://www.github.com/PixarAnimationStudios/USD/issues/1251))\n- _IsVarying no longer clears dirty bit and now ProcessPropertyChange is filled\n  out to provide more efficiency. \n  (Issue: [#1250](https://www.github.com/PixarAnimationStudios/USD/issues/1250))\n\n### usdview\n- Added 'Enable Scene Lights' option.\n- Changed UI to use bundled Roboto and Roboto Mono fonts.\n- Fixed build issues due to stricter checks in PySide2 5.15.1. \n  (PR: [#1320](https://www.github.com/PixarAnimationStudios/USD/pull/1320))\n\n### Alembic Plugin\n- Alembic uv's are now converted to texCoord2f[] primvars:st. This can\n  be disabled by setting the `USD_ABC_WRITE_UV_AS_ST_TEXCOORD2FARRAY`\n  environment variable to 0.\n\n### RenderMan Plugin\n- Fixed infinite loop in material processing.\n- Initial implementation of exposure.\n- Volumes can react to changes to a field prim. \n- Fixed UsdUVTexture wrap mode support. \n- Add support for UsdPreviewSurface's opacityThreshold param in HdPrman. \n  (Issue: [#990](https://www.github.com/PixarAnimationStudios/USD/issues/990))\n- Updated UsdPreviewSurface clearcoat calculations to better match expected\n  inputs for a specular lobe in HdPrman. \n  (Issue: [#1307](https://www.github.com/PixarAnimationStudios/USD/issues/1307))\n- Metallic materials should have an F0 equal to their base color in\n  UsdPreviewSurface in HdPrman. \n  (Issue: [#1174](https://www.github.com/PixarAnimationStudios/USD/issues/1174))\n\n### Security\n- Fixed [CVE-2020-6147](https://nvd.nist.gov/vuln/detail/CVE-2020-6147)\n- Fixed [CVE-2020-6148](https://nvd.nist.gov/vuln/detail/CVE-2020-6148)\n- Fixed [CVE-2020-6149](https://nvd.nist.gov/vuln/detail/CVE-2020-6149)\n- Fixed [CVE-2020-6150](https://nvd.nist.gov/vuln/detail/CVE-2020-6150)\n- Fixed [CVE-2020-6156](https://nvd.nist.gov/vuln/detail/CVE-2020-6156)\n- Fixed [CVE-2020-13493](https://nvd.nist.gov/vuln/detail/CVE-2020-13493)\n- Fixed [CVE-2020-13524](https://nvd.nist.gov/vuln/detail/CVE-2020-13524)\n- Fixed [CVE-2020-13498](https://nvd.nist.gov/vuln/detail/CVE-2020-13498)\n- Fixed [CVE-2020-13497](https://nvd.nist.gov/vuln/detail/CVE-2020-13497)\n- Fixed [CVE-2020-13496](https://nvd.nist.gov/vuln/detail/CVE-2020-13496)\n- Fixed [CVE-2020-13494](https://nvd.nist.gov/vuln/detail/CVE-2020-13494)\n- Fixed [CVE-2020-13495](https://nvd.nist.gov/vuln/detail/CVE-2020-13495)\n\n## [20.08] - 2020-07-21\n\n### Build\n- The \"master\" branch on GitHub has been renamed \"release\".\n- Improved error handling when building the RenderMan plugin. \n  (Issue: [#1054](https://www.github.com/PixarAnimationStudios/USD/issues/1054))\n\n- Various fixes and changes to build_usd.py:\n  - Added `--tools` and `--no-tools` options.\n  - Updated OpenImageIO (2.1.16.0) and MaterialX (1.37.1) dependencies.\n  - Specifying `--embree` will now build the Embree library. The\n    `--embree-location` parameter has been removed.\n  - CMake 3.14 is now required on Windows to support boost 1.70+.\n  - Python 3.8 on Windows now causes an error, as USD does not support\n    this version on Windows.\n  - Improved handling of boost build failures.\n  - Fixed locale decoding errors. \n    (Issue: [#1165](https://www.github.com/PixarAnimationStudios/USD/issues/1165))\n  - Fixed incorrect detection of Draco library. \n    (PR: [#1239](https://www.github.com/PixarAnimationStudios/USD/pull/1239))\n\n### USD\n- Added support for \"future division\" in Python 2 to aid transition to Python 3.\n\n- Added ArResolver::CreatePathForLayer to allow users to customize behavior\n  when writing a layer. SdfLayer now uses this method instead of creating a\n  directory, which was not appropriate for non-filesystem uses. \n  (Issue: [#1148](https://www.github.com/PixarAnimationStudios/USD/issues/1148))\n\n- Added SdfReference::IsInternal. \n  (PR: [#1204](https://www.github.com/PixarAnimationStudios/USD/pull/1204))\n- Added fallback prim types feature, allowing clients to specify alternative\n  schemas to use if a schema can't be found. See documentation for more details.\n- Added UsdPrim::ApplyAPI, RemoveAPI, AddAppliedSchemas,\n  and RemoveAppliedSchemas. \n  (Issue: [#1218](https://www.github.com/PixarAnimationStudios/USD/issues/1218))\n- Added Python __repr__ for generated schemas.\n- Added methods to UsdGeomPrimvar for processing property names.\n- Added methods to UsdGeomPrimvarsAPI for creating, removing, and blocking\n  primvars. \n  (Issue: [#1100](https://www.github.com/PixarAnimationStudios/USD/issues/1100))\n- Improved documentation for UsdVol schema domain. \n  (PR: [#1203](https://www.github.com/PixarAnimationStudios/USD/pull/1203))\n- Improved documentation for UsdGeomMesh. \n  (PR: [#1254](https://www.github.com/PixarAnimationStudios/USD/pull/1254))\n- Improved diagnostic messages for plugin registration and loading.\n\n- Plugin search paths in PXR_PLUGINPATH_NAME can now be a symlink. Paths are\n  now processed in order to ensure plugins in earlier entries take priority\n  over those in later entries.\n\n- Replaced SdrShaderNode::GetSourceURI and GetResolvedSourceURI with\n  GetResolvedDefinitionURI and GetResolvedImplementationURI to properly\n  represent RenderMan C++ shaders.\n\n- Time sample times from layers whose timeCodesPerSecond value differ from\n  the UsdStage are now automatically scaled to match. This can be disabled\n  by setting the PCP_DISABLE_TIME_SCALING_BY_LAYER_TCPS environment variable,\n  but we expect to remove this in a future release.\n\n- Significant changes and additions to value clips functionality. See\n  documentation for more details:\n  - Added support for jump discontinuities in clip times metadata to encode\n    looping behaviors.\n  - The clip manifest is now used to determine which attributes have values\n    in clips. The manifest will be generated in-memory at runtime if one\n    hasn't been specified.\n  - Value resolution will no longer fall through to weaker layers if a clip\n    does not have values for an attribute declared in the manifest. In these\n    cases, the value may come from the default value authored in the manifest\n    or (optionally) be interpolated from surrounding clips.\n  - Removed support for legacy value clips metadata.\n  - Fixed numerous bugs, including incorrect time samples when reversing\n    clips. (Issue: [#1116](https://www.github.com/PixarAnimationStudios/USD/issues/1116))\n\n- Changed the strength ordering of entries in the apiSchemas metadata to be\n  strongest-to-weakest, matching the ordering of references and other fields.\n- Constructing a UsdGeom::XformOp with an invalid attribute is no longer a\n  coding error for consistency with other schemas and objects.\n- Deprecated many schemas in UsdRi in preparation for modernization efforts\n  in a future release.\n- Removed support for deprecated \"hermite\" and \"power\" basis from UsdGeomCurves.\n- Fixed crash when removing many entries from an SdfPathTable. \n  (PR: [#1172](https://www.github.com/PixarAnimationStudios/USD/pull/1172))\n- Fixed compile error due to missing virtual destructor for\n  PcpDynamicFileFormatInterface. \n  (PR: [#1156](https://www.github.com/PixarAnimationStudios/USD/pull/1156))\n- Fixed type conversions when setting metadata values using dictionaries\n  in Python. (Issue: [#813](https://www.github.com/PixarAnimationStudios/USD/issues/813))\n- Fixed handling of stage metadata and session layer muting in UsdStage.\n- Fixed UsdFlattenLayerStack to handle mismatched attribute types and\n  time-sampled asset paths. \n  (PR: [#1169](https://www.github.com/PixarAnimationStudios/USD/pull/1169))\n- Fixed undefined behavior issue with iterator comparisons. \n  (Issue: [#1146](https://www.github.com/PixarAnimationStudios/USD/issues/1146))\n- Fixed regression in handling of inherited bindings in UsdSkelCache.\n- Fixed crash in UsdSkelBakeSkinning. \n  (PR: [#1213](https://www.github.com/PixarAnimationStudios/USD/pull/1213))\n\n### Imaging\n- Updated minimum required version of OpenGL to v4.5.\n\n- Added new texture system to Storm. This enables multi-threaded texture\n  loading, uses Hgi, and frees the scene delegate from having to load\n  textures. In a performance test using Nvidia's Attic scene, time to first\n  image dropped by ~90%, from 115s to 10s.\n\n- Added first iteration of HgiMetal, a Metal-based Hgi implementation for\n  Apple platforms. Currently, Hgi is used in several Hydra tasks to perform\n  tasks like blitting, the goal is to slowly integrate Hgi in Storm.\n\n- Numerous updates to Hgi:\n  - Added HgiInterop to exchange rendered results between GL-GL or Metal-GL.\n  - Added HgiSampler to represent texture samplers.\n  - Added HgiComputeCmds to issue compute commands.\n  - Added HgiBlitCmds for mipmap generation and GPU-GPU copy.\n  - Added SRGB format and removed unsupported 24-bit formats.\n  - Added GetRawResource function to various resource objects to expose\n    low-level resource handles.\n\n- Added garbage collection to HgiGL for proper handling of resource destruction.\n- Added HdRendererPluginHandle, an RAII object for managing plugin lifetimes.\n- Added HdxAovInputTask which takes HdRenderBuffer and (if needed) uploads\n  it to the GPU as HgiTexture.\n- Added support for down-sampling volumes in Storm.\n- Improved performance of volumes in Storm by not re-creating the entire\n  volume shader when fields are animated.\n- Added support for UsdTransform2d node in Storm. \n  (Issue: [#1207](https://www.github.com/PixarAnimationStudios/USD/issues/1207))\n- Added support for UsdUVTexture scale and bias in Storm. \n  (Issue: [#1129](https://www.github.com/PixarAnimationStudios/USD/issues/1129))\n- Added USDIMAGINGGL_ENGINE_DEBUG_SCENE_DELEGATE_ID environment variable to\n  specify scene delegate ID for debugging. \n  (Issue: [#1093](https://www.github.com/PixarAnimationStudios/USD/issues/1093))\n- Changed default version of HdSceneDelegate::GetScenePrimPath to strip\n  delegate ID.\n- Replaced obsolete GL_GENERATE_MIPMAP with glGenerateMipmap. \n  (Issue: [#1171](https://www.github.com/PixarAnimationStudios/USD/issues/1171))\n- Added support for uint16 type for GL textures and OpenImageIO. \n  (PR: [#1212](https://www.github.com/PixarAnimationStudios/USD/pull/1212))\n- Restructured OpenImageIO support as a plugin to Glf. \n  (PR: [#1214](https://www.github.com/PixarAnimationStudios/USD/pull/1214))\n- Converted common Hydra tasks (e.g. HdxColorCorrectionTask, HdxPresentTask,\n  HdxColorizeSelectionTask) to use Hgi.\n- Renamed HdxProgressiveTask to HdxTask.\n- Storm now uses Hgi for buffers, shaders, and programs instead of OpenGL.\n- HdStResourceRegistry is instantiated once per Hgi instance in Storm.\n- Unshared computation BAR are reused when possible. \n  (Issue: [#1083](https://www.github.com/PixarAnimationStudios/USD/issues/1083))\n- Improved handling of invalid cases in several areas. \n  (PR: [#1232](https://www.github.com/PixarAnimationStudios/USD/pull/1232), \n  PR: [#1201](https://www.github.com/PixarAnimationStudios/USD/pull/1201))\n- Improved performance of UsdImagingDelegate::SetTime. \n  (Issue: [#1166](https://www.github.com/PixarAnimationStudios/USD/issues/1166))\n- Improved performance for displaying meshes with large numbers of geometry\n  subsets. (PR: [#1170](https://www.github.com/PixarAnimationStudios/USD/pull/1170))\n- Normals are ignored on skinned meshes so they are computed post-skinning.\n- Inherited UsdSkel bindings are now respected.\n- Allow HdStRenderBuffer::Resolve() to change the size of the image. \n  (PR: [#1236](https://www.github.com/PixarAnimationStudios/USD/pull/1236))\n- Removed \"catmark\" token in pxOsd in favor of \"catmullClark\".\n- Removed UsdImagingGLMaterialTextureAdapter, UsdImagingGLDomeLightAdapter,\n  GlfVdbTexture[Container], and GlfTextureContainer, which are unneeded with\n  the new texture system.\n- Removed unused HdxColorizeTask and HdxFullscreenShaderGL.\n- Removed HdWrapLegacyClamp, which corresponded to the deprecated GL_CLAMP.\n- Removed uses of HdStGLSLProgram as part of a new strategy to create these\n  via HdStResourceRegistry (since it has access to Hgi).\n- Removed transform feedback from non-instanced GPU culling in Storm.\n- Fixed incorrect handling of buffer array resizing to 0 elements. \n  (Issue: [#1230](https://www.github.com/PixarAnimationStudios/USD/issues/1230))\n- Fixed memory regression when calling UsdImagingDelegate::SampleTransform\n  and SamplePrimvar.\n- Fixed error in UsdImaging when changing from a time where a mesh provided\n  points or normals to a time that does not.\n- Fixed potential deadlocks if plugins were loaded at various points in\n  UsdImagingGLEngine.\n- Fixed error when processing skinned prim with no joint influences.\n- Fixed change processing issue with native instanced prims. \n  (Issue: [#1163](https://www.github.com/PixarAnimationStudios/USD/issues/1163))\n- Fixed handling of widths primvar with no value.\n- Fixed \"IsFlipped\" computation for native instanced prims. \n  (Issue: [#1190](https://www.github.com/PixarAnimationStudios/USD/issues/1190))\n- Fixed crash when updating a removed primvar. \n  (PR: [#1223](https://www.github.com/PixarAnimationStudios/USD/pull/1223))\n- Fixed crash when reparenting an instance root. \n  (Issue: [#1245](https://www.github.com/PixarAnimationStudios/USD/issues/1245))\n- Fixed various issues with cards prims, including a crash issue. \n  (Issue: [#1210](https://www.github.com/PixarAnimationStudios/USD/issues/1210))\n- Fixed selection encoding/decoding of invisible native instances.\n- Fixed invalidation when changing the \"purpose\" attribute. \n  (Issue: [#1243](https://www.github.com/PixarAnimationStudios/USD/issues/1243))\n\n### usdview\n- Added \"Prototypes\" pick mode that selects the prototype for a picked gprim\n  in a PointInstancer and highlights the picked instance.\n- Reverted \"Prims\" and \"Instances\" pick modes to original behavior of selecting\n  the root boundable of the picked object. \n  (Issue: [#1196](https://www.github.com/PixarAnimationStudios/USD/issues/1196))\n- Fixed \"Reopen Stage\" when usdview was launched with `--norender`. \n  (PR: [#1192](https://www.github.com/PixarAnimationStudios/USD/pull/1192))\n- Fixed camera guide and reticles rendering on high DPI displays.\n\n### Alembic Plugin\n- Fixed conversion of mesh subdivision interpolation options between\n  UsdGeomMesh and AbcGeom's ISubD and OSubD schemas. \n  (PR: [#1246](https://www.github.com/PixarAnimationStudios/USD/pull/1246))\n\n### Embree Plugin\n- Removed support for Embree 2.0. The HdEmbree plugin now requires Embree 3.\n\n### MaterialX Plugin\n- Added support for MaterialX 1.37 and deprecated support for 1.36. We\n  anticipate requiring 1.37 in a future release.\n- MaterialX \"vectorN\" datatypes are now translated to USD \"floatN\" datatypes.\n- Changed default output name from \"result\" to \"out\" to match conventions\n  in MaterialX specification.\n- Fixed test issue found during Python 3 work. \n  (PR: [#1161](https://www.github.com/PixarAnimationStudios/USD/pull/1161))\n\n### RenderMan Plugin\n- Added support for arbitrary numbers of AOVs in HdPrman.\n- Removed deprecated RenderMan 22 Hydra plugin.\n\n- Material processing now uses SdrShaderNode::GetResolvedImplementationURI to\n  locate shaders, which allows it consume shaders identified via \n  UsdShadeShader's info:sourceAsset property.\n\n- Modified UsdVol support to allow easier extensions with custom volume plugin\n  for RenderMan.\n- Fixed calculation of specularFaceColor in UsdPreviewSurfaceParameters.osl\n  to better match the spec.\n\n## [20.05] - 2020-04-13\n\nThis release includes initial support for Python 3. Many thanks to our\ncollaborators at Nvidia and SideFX for all of their work to make this\nhappen!\n\nThe RenderMan 22 Hydra plugin is deprecated, and the deprecated Houdini\nand Katana plugins have been removed from the repository. See details below.\n\n### Build\n- Added support for Python 3. This may be enabled by specifying\n  `PXR_USE_PYTHON_3=TRUE` when running cmake or by running build_usd.py\n  with Python 3.\n- Updated C++ standard version to C++14 per VFX Reference Platform CY2018.\n- Updated CMake minimum version to 3.12. 2.x support was deprecated in 19.11.\n- Moved to Azure Pipelines for CI.\n- PySide2 is now preferred over PySide if both are installed. Users can specify\n  `PYSIDE_USE_PYSIDE=TRUE` when running cmake to force the use of PySide.\n- Building examples and tutorials is now optional. \n  (PR: [#594](https://www.github.com/PixarAnimationStudios/USD/pull/594))\n\n- Various fixes and changes to build_usd.py\n  - Updated TBB (2017.6), Alembic (1.7.10), OpenImageIO (1.8.9), and\n    OpenColorIO (1.0.9) dependencies for VFX Reference Platform CY2018 and/or\n    to reflect versions used for testing internally.\n  - Updated OpenSubdiv to 3.4.3. This removes the dependency on GLFW,\n    which itself required X libraries on Linux. \n    (Issue: [#261](https://www.github.com/PixarAnimationStudios/USD/issues/261))\n  - Miscellaneous fixes. \n    (Issue: [#1110](https://www.github.com/PixarAnimationStudios/USD/issues/1110), \n    Issue: [#1126](https://www.github.com/PixarAnimationStudios/USD/issues/1126))\n\n- Made OpenEXR an optional dependency. It is only required for enabling\n  OpenImageIO, OpenVDB, or OSL support. \n  (PR: [#1082](https://www.github.com/PixarAnimationStudios/USD/pull/1082))\n- Fixed strict builds on Linux when building with boost version 1.61 or\n  earlier. (PR: [#1081](https://www.github.com/PixarAnimationStudios/USD/pull/1081))\n- Fixed issue where warnings from 3rd-party headers would cause strict builds\n  to fail.\n- Fixed bug where the boost_python library would not be found when building\n  against boost 1.67+.\n- Fixed bug where specifying `PXR_BUILD_DOCUMENTATION=TRUE` but not\n  having required programs would result in an incomplete build. \n  (Issue: [#1127](https://www.github.com/PixarAnimationStudios/USD/issues/1127))\n- Fixed incorrect instructions in README.md for running build_usd.py under\n  Visual Studio 2017. \n  (PR: [#1120](https://www.github.com/PixarAnimationStudios/USD/pull/1120))\n- Fixed bug where build_usd.py would pick up external builds of boost 1.70\n  or later. \n  (Issue: [#1071](https://www.github.com/PixarAnimationStudios/USD/issues/1071))\n- Fixed bug in build_usd.py when building boost with Visual Studio 2019.\n  (Issue: [#1041](https://www.github.com/PixarAnimationStudios/USD/issues/1041))\n- Fixed issue where non-debug builds with Visual Studio 2019 would not work\n  properly or crash immediately. \n  (Issue: [#1095](https://www.github.com/PixarAnimationStudios/USD/issues/1095))\n- Fixed several issues that caused errors when building a program against\n  USD with clang on Windows. \n  (Issue: [#1030](https://www.github.com/PixarAnimationStudios/USD/issues/1030), \n  PR: [#1079](https://www.github.com/PixarAnimationStudios/USD/pull/1079))\n- Fixed issue where debug mode builds on Windows with Python bindings enabled\n  would fail without a special debug build of Python. \n  (PR: [#785](https://www.github.com/PixarAnimationStudios/USD/pull/785), \n  Issue: [#1006](https://www.github.com/PixarAnimationStudios/USD/issues/1006))\n\n### USD\n- Added typed value proxies to VtValue.\n- Added SdfPathAncestorsRange for iterating over an SdfPath's ancestors.\n- Added convenience scenegraph object accessor APIs to UsdPrim and UsdStage.\n- Added UsdPrim::GetInstances to get all instances of a master. \n  (Issue: [#962](https://www.github.com/PixarAnimationStudios/USD/issues/962))\n- Added UsdPrimDefinition to represent the built-in properties of a given prim.\n  Users can access a prim's definition via UsdPrim::GetPrimDefinition.\n- Added UsdUtilsConditionalAbortDiagnosticDelegate, a diagnostic delegate that\n  aborts when an error or warning is encountered based on text-matching rules.\n- Added UsdUtilsSparseValueWriter::GetSparseAttrValueWriters to help with\n  debugging. (PR: [#1038](https://www.github.com/PixarAnimationStudios/USD/pull/1038))\n- Added UsdGeomHermiteCurves schema.\n- Deprecated 'hermite' and 'power' basis for UsdGeomBasisCurves.\n- Removed remnants of relationship-based shader encoding from UsdShade schemas.\n- Removed \"shadow:include\" and \"shadow:exclude\" from UsdLuxShadowAPI schema.\n- Removed raw spec access API from UsdSchemaRegistry in favor of the new\n  UsdPrimDefinition objects.\n- For static USD builds, the Plug library now resolves plugin paths relative\n  to the path of the executable that links to USD.\n- SdfLayer and UsdStage API for timeCodesPerSecond now fall back to using\n  framesPerSecond if no timeCodePerSecond is specified.\n- Numerous optimizations for UsdStage load time and authoring speed.\n- UsdStage now sends notification when population mask, load rules, and\n  interpolation type are changed. \n  (Issue: [#1139](https://www.github.com/PixarAnimationStudios/USD/issues/1139))\n- Applied API schemas now impart their properties and fallback values as\n  builtins on the applied prim.\n- Concrete typed schemas can now provide fallback metadata values.\n- C++ typenames for schemas are no longer supported as prim typenames\n  in scene description.\n\n- UsdGeomImageable now computes 'purpose' using non-pruning semantics.\n  See documentation for UsdGeomImageable::ComputePurpose for a description\n  of the new behavior.\n\n- Various fixes and changes for usdGenSchema\n  - Added --headerTerminatorString option. \n    (Issue: [#1092](https://www.github.com/PixarAnimationStudios/USD/issues/1092), \n    PR: [#1097](https://www.github.com/PixarAnimationStudios/USD/pull/1097))\n  - Output directory automatically created if it doesn't already exist.\n  - Changed output in generatedSchema.usda for multiple-apply API schemas.\n  - Changed output ordering for tokens in tokens.h.\n\n- Fixed race condition in UsdGeomBoundable::ComputeExtentFromPlugins that\n  could cause incorrect results for bounds computations.\n- Fixed bug with value block handling in UsdFlattenLayerStack.\n- Fixed incorrect documentation on crate file structure. \n  (Issue: [#1072](https://www.github.com/PixarAnimationStudios/USD/issues/1072))\n- Fixed change processing bug for nested instancing that led to crashes.\n- Fixed bug reading .usdc files in .usdz files if USDC_USE_PREAD=1 was set.\n- Fixed usdedit failure on Windows due to file access conflicts. \n  (PR: [#1094](https://www.github.com/PixarAnimationStudios/USD/pull/1094))\n- Fixed line ending issue causing some tests to fail on Windows. \n  (PR: [#848](https://www.github.com/PixarAnimationStudios/USD/pull/848))\n\n### Imaging\n- Added swizzle metadata to the output of UsdUVTexture. \n  (Issue: [#657](https://www.github.com/PixarAnimationStudios/USD/issues/657))\n- Added ability to display unloaded prims as bounding boxes. \n  (PR: [#1145](https://www.github.com/PixarAnimationStudios/USD/pull/1145))\n- Added selection highlight outline capabilities (not exposed in usdview).\n- Added many more improvements to volume visualizations in Storm.\n- Added basic support for transporting pinned curves to UsdImaging.\n- Added support for computed vertex primvars for points prim in Storm.\n- Added support for element invising and point colors in basis curves.\n- Added hdTiny, a very simple example render delegate.\n- Added support for cascaded shadow maps (not exposed in usdview).\n- Added IsStopSupported/Stop/Restart APIs to render delegates.\n- Added transport of light filters through usdImaging.\n- Added HdResourceRegistry::ReloadResource API to allow for texture reloading.\n- Added USDVIEW_OCIO_LUT3D_EDGE_SIZE environment variable for setting 3D LUT\n  size for OpenColorIO.\n- Removed IsFlipped() from certain Storm shaders for clean up.\n- Many changes to remove or replace uses of boost with C++ features.\n- Changed many APIs in Hgi as that subsystem continues to be built up.\n- Changed HdResourceRegistry APIs for several cleanups and fixes.\n- Replaced HdSceneDelegate::GetPrimPathForInstanceIndex with GetScenePrimPath.\n- Moved HdMaterialParam to HdSt and made it private.\n- Moved HdxSimpleLightingShader to HdSt.\n- Fixed issue with Storm shutdown on certain platforms.\n- Fixed several issues with selection highlighting (including issues relating\n  to instancing) in usdImaging.\n- Fixed issue with Storm not drawing geometry when a PxrSurface is attached.\n  (Issue: [#1128](https://www.github.com/PixarAnimationStudios/USD/issues/1128))\n- Fixed issue where UsdUVTexture alpha output was driven by the wrong channel.\n  (Issue: [#657](https://www.github.com/PixarAnimationStudios/USD/issues/657))\n- Fixed drawing of sphere implicit to be centered. \n  (Issue: [#1086](https://www.github.com/PixarAnimationStudios/USD/issues/1086))\n- Fixed handling of primvar addition and removal in Hydra. \n  (Issue: [#1078](https://www.github.com/PixarAnimationStudios/USD/issues/1078))\n- Fixed .glslfx processing to use Ar for resolving paths for includes.\n- Fixed parsing of texture default values for .glslfx files in Sdr.\n- Fixed issue with texture binding with certain configurations. \n  (Issue: [#1063](https://www.github.com/PixarAnimationStudios/USD/issues/1063))\n- Fixed several cleanup issues. \n  (Issue: [#1103](https://www.github.com/PixarAnimationStudios/USD/issues/1103), \n  PR: [#1104](https://www.github.com/PixarAnimationStudios/USD/pull/1104))\n- Fixed order of draw targets drawing in HdxDrawTargetTask.\n- Fixed default values for displayColor, displayOpacity and widths. \n  (PR: [#1098](https://www.github.com/PixarAnimationStudios/USD/pull/1098))\n- Fixed point instancer resync of prototypes. For example, we now resync\n  prototypes properly if their material bindings change.\n- Fixed point instancer refresh in response to structural primvar and prototype\n  updates. (PR: [#1077](https://www.github.com/PixarAnimationStudios/USD/pull/1077))\n- Fixed HdRenderIndex::Clear to always call Finalize() for cleared rprims.\n  (Issue: [#1040](https://www.github.com/PixarAnimationStudios/USD/issues/1040))\n- Fixed color banding issue when using OpenColorIO.\n- Fixed reading stride with OpenImageIO. \n  (Issue: [#1080](https://www.github.com/PixarAnimationStudios/USD/issues/1080))\n- Fixed drawMode updates with native instancing. \n  (Issue: [#1069](https://www.github.com/PixarAnimationStudios/USD/issues/1069))\n- Fixed case sensitivity for image loading. \n  (PR: [#804](https://www.github.com/PixarAnimationStudios/USD/pull/804))\n- Fixed issue with Storm shader generation when input and primvar names match.\n- Fixed debug flag not properly displaying source when shader fails to link.\n  (PR: [#1020](https://www.github.com/PixarAnimationStudios/USD/pull/1020))\n\n### usdview\n- Added ability to change font size.\n- Added 'Apply' button to renderer settings dialog.\n- Improved start up time by waiting until we've populated more of the UI.\n- Made free-cam's FOV part of saved user settings.\n- Fixed multi-line paste in the interpreter. \n  (Issue: [#1117](https://www.github.com/PixarAnimationStudios/USD/issues/1117))\n- Fixed errors when using PySide2 5.14.0 or later. \n  (Issue: [#1111](https://www.github.com/PixarAnimationStudios/USD/issues/1111))\n- Fixed errors when closing usdview with the native windowing system commands.\n\n### Alembic Plugin\n- Added file format arguments 'abcReRoot' for reparenting hierarchy beneath\n  a new parent prim and 'abcLayers' for specifying a list of secondary files\n  to load as layered Alembic. \n  (PR: [#1099](https://www.github.com/PixarAnimationStudios/USD/pull/1099))\n- Only deliver interesting timeSamples for constant properties. \n  (PR: [#1114](https://www.github.com/PixarAnimationStudios/USD/pull/1114))\n- Relaxed type-checking on position property and let any float[3] type through.\n  (PR: [#1115](https://www.github.com/PixarAnimationStudios/USD/pull/1115))\n- Removed need to link directly against Alembic backend libraries to open files.\n\n### Houdini Plugin\n- The Houdini plugin has been removed from the USD repository in favor of the\n  native USD support in Houdini's Solaris suite.\n\n### Katana Plugin\n- The Katana plugin has been removed from the USD repository in favor of the\n  Foundry-supported Katana plugins available at\n  https://github.com/TheFoundryVisionmongers/KatanaUsdPlugins.\n\n### MaterialX Plugin\n- Fixed bug where implementation file relative paths were assumed to be\n  relative to the .mtlx file with the implementation node instead of to\n  the MaterialX library itself.\n\n### RenderMan Plugin\n- Deprecated support for RenderMan 22. We anticipate removing the renderman-22\n  plugin in a future release.\n- Added support for HdAov clearValue.\n- Added support for Stop/Restart functionality.\n- Added early initial support for light filters and trace groups.\n- Fixed bug that caused empty renders when no scene camera was present.\n  (Issue: [#1113](https://www.github.com/PixarAnimationStudios/USD/issues/1113))\n- Fixed routing of ri:attributes properties when instancing is involved.\n- Fixed restarting of RenderMan when application is told that resources\n  (e.g., textures) need to be reloaded.\n\n## [20.02] - 2020-01-24\n\nWe anticipate aligning with the version requirements from the VFX Reference\nPlatform CY2018 (https://vfxplatform.com) in the next release. In particular,\nthis includes requiring support for C++14.\n\nThis release adds a Hydra plugin for RenderMan 23 and removes the deprecated\nMaya plugin from the repository. This release also deprecates support for the\nHoudini and Katana plugins. See details below.\n\n### Build\n- The source tree has been restructured so that code no longer lives under a\n  separate \"lib\" directory. This means that (with a few exceptions) include\n  paths now match source tree paths.\n\n- Added support for Visual Studio 2019 to build_usd.py. \n  (PR: [#1042](https://www.github.com/PixarAnimationStudios/USD/pull/1042))\n- Added PXR_BUILD_USD_TOOLS option to disable building of command-line tools\n  (e.g. usdcat, usdedit) \n  (PR: [#1048](https://www.github.com/PixarAnimationStudios/USD/pull/1048))\n- The PXR_LIB_PREFIX option now defaults to \"\" and is respected for .lib files\n  on Windows. \n  (Issue: [#1027](https://www.github.com/PixarAnimationStudios/USD/issues/1027))\n\n### USD\n- Added \"subIdentifier\" and \"sourceType\" parameters to GetNodeFromAsset API in\n  Ndr and Sdr and \"subIdentifier\" attribute to UsdShadeShader schema. This\n  allows clients to identify and retrieve definitions for a particular shader\n  in source assets that have multiple shaders defined in them. \n  (Issue: [#919](https://www.github.com/PixarAnimationStudios/USD/issues/919))\n\n- Removed unused legacy SdfVariabilityConfig variability value.\n- Fixed bug where prims in masters would be populated incorrectly when a\n  UsdStage's population mask contained paths descendant to masters.\n- Fixed bug where layer stack flattening would lose some variant selections.\n  (Issue: [#1060](https://www.github.com/PixarAnimationStudios/USD/issues/1060))\n- UsdStage::CreateClassPrim is no longer restricted to root prims. \n  (Issue: [#994](https://www.github.com/PixarAnimationStudios/USD/issues/994))\n- UsdVariantSets::GetNames() now returns the union of all variant set names\n  across layer stacks.\n- Improved performance of retrieving metadata with templated API in UsdObject.\n- Numerous changes to improve performance when making edits to many properties.\n- Removed support for inverse layer offsets which were deprecated in v0.8.2.\n- Removed support for legacy UsdShade encodings, yielding cleaner code and\n  improved performance.\n- Improved diagnostics in usdGenSchema for non-identifier tokens in schema.usda.\n- Improved documentation generated by usdGenSchema for schema attributes.\n- usdGenSchema now treats all C++ and Python keywords as reserved and will\n  prepend a \"_\" if they are encountered in any identifiers.\n- Modified UsdGeomXformCommonAPI to be generated and behave like other API\n  schemas (as the name implies) for consistency.\n- Fixed bug in UsdGeomImageable::MakeVisible where the given prim would not be\n  made visible if other \"invis\" opinions existed on ancestor prims. \n  (PR: [#1043](https://www.github.com/PixarAnimationStudios/USD/pull/1043))\n- Fixed bug in UsdGeomSubset::GetUnassignedIndices where passing in an\n  invalid element count could lead to a crash. \n  (Issue: [#989](https://www.github.com/PixarAnimationStudios/USD/issues/989))\n- Removed deprecated shader binding API on UsdShadeMaterial in favor of\n  UsdShadeMaterialBindingAPI schema.\n- Improved fidelity of light-related UsdRi schemas.\n- Added UsdLuxDomeLight::OrientToStageUpAxis utility for creating dome lights\n  with an appropriate default orientation. \n  (Issue: [#938](https://www.github.com/PixarAnimationStudios/USD/issues/938))\n- Added UsdMedia schema library and UsdMediaSpatialAudio schema.\n- Fixed bugs in UsdSkelCache::ComputeSkelBinding where inherited skel:skeleton\n  bindings were incorrectly evaluated and bindings would be returned for\n  inactive prims.\n- Python binding for UsdSkelSkinningQuery is now UsdSkel.SkinningQuery.\n\n### Imaging\n- Added RenderMan 23 Hydra plugin.\n- Added support for specifying thread limits and convergence criteria in\n  HdPrman via settings.\n- Added initial support for light filters.\n- Added an Sdr parser plugin for .glslfx files.\n- Added support for material networks in Storm.\n- Added initial support for volume rendering in Storm.\n- Added basic support for bindless shadow maps in Storm.\n- Added primvar/points editing support for points, basis curves, and meshes\n  in UsdImaging. Previously everything was resync.\n- Added Hydra changetracker dependencies between parent and child instancers.\n- Added new task HdxColorChannelTask to output a specific display channel.\n- Added command line option (--traceToFile) to usdview to start tracing as soon\n  as the application is started.\n- Changed HdPrman linking to be independent of RenderMan install.\n- Changed \"depth\" AOV range from [-1, 1] to [0, 1].\n- Changed name \"linearDepth\" AOV to \"cameraDepth\".\n- Changed HdxPickHit \"ndcDepth\" field with a range of [-1,1] to\n  \"normalizedDepth\" with a range of [0,1]\n- Changed edge hashing to use triangular numbers in Hd. This is about 3x faster\n  than the previous code.\n- Changed UsdImaging's DrawModeAdapter to use HdMaterialNetwork.\n- Changed default camera shutter in UsdImaging to match UsdGeomCamera [0,0].\n- Improved Storm's instance registry and moved resource registries from Hd core\n  to Storm.\n- Improved aggregation of material shaders in Storm.\n- Improved material primvar filtering in Storm.\n- Improved property refresh support in UsdImaging for instance attributes.\n- Removed HydraMaterialAdapter in UsdImaging since it is no longer needed.\n- Removed old Hydra scene delegate API that was only used by the old material\n  system in Storm. (GetSurfaceShaderSource, GetDisplacementShaderSource,\n  GetMaterialParams and others..).\n- Fixed instance adapter selection highlighting performance issues.\n- Fixed bug where pick task was continuously running in usdview.\n- Fixed Storm to skip string primvars.\n- Fixed bug where rtx_glfImage was not honoring the channel offset and number\n  of channels specified in the FillRequest parameter.\n- Fixed nullptr exception in HdPrman when rendering without a camera.\n- Fixed data ownership of instance indices. DirtyInstanceIndex is set on\n  instancers and tells them they need to re-fetch their index buffer, relative\n  to one of their prototypes.\n- Fixed UsdImaging native instancing so instead of compensating for prototype\n  transforms by overwriting prototype transforms, it compensates in the\n  per-instance transform primvar.\n- Fixed usdSkelImaging dirtyness propagation to the skinning aggregator\n  computation.\n- Fixed double color correction on MacOS.\n- Implemented SamplePrimvar for native instancer adapter. \n  (Issue: [#996](https://www.github.com/PixarAnimationStudios/USD/issues/996))\n- Fixed UsdPreviewSurface material displacement in Storm. \n  (Issue: [#922](https://www.github.com/PixarAnimationStudios/USD/issues/922), \n   Issue: [#1026](https://www.github.com/PixarAnimationStudios/USD/issues/1026))\n- Fixed change processing when an inherited primvar is removed. \n  (Issue: [#1004](https://www.github.com/PixarAnimationStudios/USD/issues/1004))\n- Fixed incorrect points buffer computation for implicit geometry. \n  (Issue: [#1024](https://www.github.com/PixarAnimationStudios/USD/issues/1024))\n- Added GetHgiTextureHandle API on renderbuffer to avoid HdSt dynamic_casts\n  and CPU -> GPU copies during post-process pipeline \n  (Issue: [#1008](https://www.github.com/PixarAnimationStudios/USD/issues/1008))\n- Fixed TBB library linkage in hdEmbree. \n  (PR: [#991](https://www.github.com/PixarAnimationStudios/USD/pull/991))\n- Added support for 'jpeg' extension for Glf_StbImage. \n  (PR: [#998](https://www.github.com/PixarAnimationStudios/USD/pull/998))\n- Fixed bug where time-invariant geometry subsets would mask time-varying\n  topology from Hydra. \n  (PR: [#1045](https://www.github.com/PixarAnimationStudios/USD/pull/1045))\n- Fixed bug where UsdGeomSubset indices were always retrieved at the default\n  time. (PR: [#1059](https://www.github.com/PixarAnimationStudios/USD/pull/1059))\n- Fixed incomplete handling of UsdGeomMesh face-varying options. \n  (PR: [#1061](https://www.github.com/PixarAnimationStudios/USD/pull/1061))\n\n### Houdini Plugin\n- Deprecated Houdini plugins in favor of Houdini-native USD support.\n  We anticipate removing the plugin from the USD repository in a future\n  release.\n- Additional changes for Houdini 17.5 compatibility.\n\n### Katana Plugin\n- Deprecated Katana plugin in favor of the Foundry-supported Katana plugins \n  available at https://github.com/TheFoundryVisionmongers/KatanaUsdPlugins.\n  We anticipate removing the plugin from the USD repository in a future release.\n- Changed how UsdGeomBasisCurve Widths and Normal attributes are read into\n  Katana. Author either a geometry.point.* entry (old behavior) or a\n  geometry.arbitrary.* entry (new behavior) based on the attribute's\n  interpolation.\n- Changes in preparation for reading UsdShadeMaterials which contain\n  UsdShadeNodegraph subgraphs.\n- Removed custom Viewer Modifier Plugins. These were used by Katana's legacy\n  Viewer tab, which has been replaced by the Hydra Viewer tab.\n- Removed support for /LooksDerivedStructure in USD shader libraries.\n- Fixed incorrect geometry.instanceSource attribute for nested instances.\n  (PR: [#1015](https://www.github.com/PixarAnimationStudios/USD/pull/1015))\n\n### MaterialX Plugin\n- Added support for versions 1.36.3 and later.\n\n### Maya Plugin\n- The Maya plugin has been removed from the USD repository. Development for\n  the plugin has moved to the Autodesk maya-usd repository located at\n  https://github.com/Autodesk/maya-usd.\n\n## [19.11] - 2019-10-18\n\nThis release deprecates support for cmake 2.x and the Maya plugin.\nSee details below.\n\n### Build\n- Deprecated support for cmake 2.x. We anticipate requiring cmake 3.x in the\n  next release.\n- build_usd.py now fails if using 32-bit Python, which is a common gotcha on\n  Windows. (Issue: [#921](https://www.github.com/PixarAnimationStudios/USD/issues/921))\n- Fixed issue where build_usd.py would fail to build TBB on MacOS if CUDA was\n  installed due to an issue in the TBB build system. \n  (Issue: [#767](https://www.github.com/PixarAnimationStudios/USD/issues/767))\n- Made PXR_VERSION a valid and comparable integer in C++. \n  (PR: [#886](https://www.github.com/PixarAnimationStudios/USD/pull/886))\n- Fixed issue where pxrTargets.cmake would include plugins with no exported\n  symbols. This caused errors when building against USD on Windows. \n  (Issue: [#530](https://www.github.com/PixarAnimationStudios/USD/issues/530))\n- Fixed issue where downstream cmake projects using pxrTargets.cmake could not\n  find the USD headers.\n\n### USD\n- Added warning when reading a .usda layer with size in MB greater than value\n  of SDF_TEXTFILE_SIZE_WARNING_MB environment variable. \n  (PR: [#980](https://www.github.com/PixarAnimationStudios/USD/pull/980))\n- Added UsdStageLoadRules to support more robust and declarative intent about\n  how payloads should be included in a UsdStage.\n- Added UsdPrimCompositionQuery to facilitate discovery of composition arcs\n  affecting a UsdPrim.\n\n- Added \"timecode\" scene description value type. This type is represented by\n  the SdfTimeCode class and can be used for attribute and metadata values.\n  Layer offsets are applied to all timecode values during UsdStage\n  value resolution, enabling \"timing curve\"-like attributes.\n\n- Added support for Google's Draco compression library. This includes an\n  SdfFileFormat plugin for reading .drc files and a standalone \"usdcompress\"\n  tool that extracts and compress Mesh primitives from a USD file, creates\n  .drc files for each one, and references them back into a result USD file.\n  (PR: [#912](https://www.github.com/PixarAnimationStudios/USD/pull/912))\n\n- Added --quiet flag to usdGenSchema for suppressing output. \n  (PR: [#480](https://www.github.com/PixarAnimationStudios/USD/pull/480))\n- Added --brief flag to usddiff so differing lines are not printed.\n- Added support for indexed uint primvars to UsdGeomPrimvar. \n  (PR: [#861](https://www.github.com/PixarAnimationStudios/USD/pull/861))\n\n- Added \"accelerations\" attribute to UsdGeomPointInstancer schema and updated\n  UsdGeomPointInstancer::ComputeInstanceTransformAtTime(s) to account for\n  authored accelerations, if present.\n\n- Added \"accelerations\" attribute to UsdGeomPointBased schema and added\n  UsdGeomPointBased::ComputePointsAtTime(s) to compute point positions using\n  authored velocities and accelerations, if present.\n\n- Added initial version of UsdRender domain and schemas. See documentation and\n  white paper on openusd.org for more details. \n  (Issue: [#910](https://www.github.com/PixarAnimationStudios/USD/issues/910))\n- Added UsdShadeInput::GetValueProducingAttribute to facilitate more robust and\n  correct processing of UsdShade shading networks.\n- Added initial support for skinning mesh normals in UsdSkel.\n\n- Removed SdfAbstractDataSpecId and updated the SdfAbstractData interface to\n  use SdfPath in its place. Existing SdfAbstractData subclasses must be\n  updated to match. See this usd-interest post for more details:\n      https://groups.google.com/forum/#!topic/usd-interest/IVmd1t1GKBA\n\n- Numerous fixes for C++14 / gcc6 warnings. \n  (PR: [#869](https://www.github.com/PixarAnimationStudios/USD/pull/869))\n- Various optimizations and cleanups in trace library.\n\n- Inherits and specializes arcs that target root prims (\"global\" arcs) are now\n  combined with arcs that target sub-root prims (\"local\" arcs) for strength\n  ordering in composition. Previously, local arcs would always be considered\n  stronger than global arcs regardless of their authored order.\n\n- Calling UsdReferences::SetReferences (and equivalent API on UsdPayloads,\n  UsdInherits, and UsdSpecializes) with an empty vector now authors an\n  explicit empty list op instead of being a no-op. \n  (Issue: [#749](https://www.github.com/PixarAnimationStudios/USD/issues/749))\n\n- Numerous fixes and changes to Sdr and associated parser plugins. This\n  includes the addition of a \"terminal\" property type and \"role\" and\n  \"renderType\" metadata to better describe shader properties and their\n  representation in scene description.\n\n- Numerous optimizations for UsdStage load time and authoring speed.\n- Improved performance of adding empty sublayers to an existing UsdStage.\n\n- USD native instancing now includes both LoadRules and PopulationMasks in\n  instancing keys, so different instances can have different load state.\n  Instances that have equivalent load rules and population masks still share,\n  but those that do not will use different masters.\n\n- Load/Unload operations on a UsdStage now must operate on the \"expanded\" stage\n  namespace. That is, the namespace as it would be if instancing was disabled.\n- Updated UsdLuxDomeLight schema to clarify a dome light's orientation and\n  its textures' orientation. \n  (Issue: [#938](https://www.github.com/PixarAnimationStudios/USD/issues/938))\n- Changed 'pointIndices' attribute on UsdSkelBlendShape schema from uint[]\n  to int[] for consistency with other core schemas. \n  (Issue: [#858](https://www.github.com/PixarAnimationStudios/USD/issues/858))\n- Rewrote UsdSkelBakeSkinning to provide a more efficient baking solution.\n- Fixed bug where converting .usdc files from version 0.7 to 0.8 when saving\n  an existing file would produce incorrect layer offsets in payloads.\n- Fixed crashes when calling methods on invalid Usd.SchemaBase objects in\n  Python. \n  (Issue: [#872](https://www.github.com/PixarAnimationStudios/USD/issues/872), \n  PR: [#876](https://www.github.com/PixarAnimationStudios/USD/pull/876))\n- Fixed crash when muting and unmuting layers on a UsdStage. \n  (Issue: [#883](https://www.github.com/PixarAnimationStudios/USD/issues/883))\n\n### Imaging\n- Renamed the real-time engine/rasterizer to \"Storm\"\n- Added support for dome lights in Storm.\n- Added support for screen-space adaptive tessellation and drawing for Loop\n  scheme subdivision surface meshes when using OpenSubdiv 3.4 in Storm.\n- Added basic support for AOVs in Storm. In usdview, you can now switch between\n  color and depth when using Hydra Storm.\n- Added Hgi (Hydra Graphics Interface) library. Hgi abstracts away graphics\n  API calls in Storm.\n- Added HgiGL library, an OpenGL backend implementation for Hgi.\n- Added support for vstructs in Hydra RenderMan plugin.\n- Added support for light attributes in UsdImaging and Hydra RenderMan plugin.\n- Added an adapter in UsdImaging to read camera information, including custom\n  camera parameters.\n- Added support for physical camera parameters in Hydra and Hydra RenderMan\n  plugin.\n- Added support for camera motion blur in Hydra RenderMan plugin.\n- Added support to read any number of time samples authored in Usd. Improved\n  Hydra API to allow render delegates to extract any number of samples from\n  scene delegates.\n- Added API to HdRenderDelegate and the render thread to pause and resume\n  renderers if supported. Updated Hydra RenderMan plugin to support it. \n  (PR: [#888](https://www.github.com/PixarAnimationStudios/USD/pull/888))\n- Added API to HdRenderDelegate to return render stats to the client. Updated\n  Hydra Embree to expose the number of samples completed this way. \n  (PR: [#888](https://www.github.com/PixarAnimationStudios/USD/pull/888))\n- Added element/scope selection highlighting for raytraced backends.\n- Added basic support for NURBS curves to UsdImaging. For now, it will\n  send them to the render delegate as basis curves.\n- Added support for UsdShadeNodeGraph to UsdImaging.\n- Added support for acceleration primvars in UsdImaging and Hydra.\n- Added support for inherited primvars to native instances.\n- Added instance-inheritance support for string-typed primvars.\n- Added convergence criteria to render settings in Hydra RenderMan.\n- Added support for basis curves instancing in Hydra RenderMan plugin.\n- Added support for OpenImageIO's IOProxy feature to allow supported image\n  files (such as .exr) to be read from .usdz files.\n- Added \"Set As Active Camera' on USD camera prims context menu in usdview.\n- Added a \"Pause\" menu item to usdview, and display the render status message.\n- Replaced the key/fill/back lights in usdview by a dome light, still only\n  works in Storm for now.\n\n- Deprecated old material accessors on HdSceneDelegate in favor of using\n  material networks in Storm.\n- Removed TrackVariabilityPrep/UpdateForTimePrep in UsdImaging.\n\n- Moved usdShaders from usdImaging/lib to usdImaging/plugin.\n- Moved rendererPlugin and rendererPluginRegistry from hdx to hd.\n- Moved UsdPreviewSurface conversion to the MatfiltFilterChain in\n  Hydra RenderMan plugin.\n- Changed return type of HdRenderBuffer::Map from uint8_t to void*.\n- Improved handling of invalidations and edits of data such as instancers,\n  primvars and others, in UsdImaging.\n- Improved 32 bit color support when using Hydra and the default task controller.\n- Improved draw item batching in Hydra Storm. \n  (PR: [#528](https://www.github.com/PixarAnimationStudios/USD/pull/528))\n- Improved GLSL error reporting in Storm.\n- Improved usdrecord to allow more consistent results with usdview (e.g.,\n  default materials, purpose).\n- Prim browser in usdview now maintains its expansion-state and view when the\n  stage recomposes.\n\n- Prim browser in usdview now behaves more like Maya's outliner with respect to\n  viewport selections: the PrimView will no long expand/scroll to display the\n  selected prim until you use the 'f' hotkey over it to frame the selection.\n  Instead, all of the ancestors of selected prims will be highlighted in a\n  secondary color.\n\n- Searches in the usdview prim browser begin at the currently selected prim\n  rather than at the root of the scene.\n- Made usdview panes easier to resize by doubling size of splitter lanes.\n- Made usdview timeline playhead much larger to make it easier to grab.\n- Fixed inheriting primvars through instance boundaries when the primvar is an\n  array.\n- Fixed the way UsdGeomPointInstancer calculates purpose and visibility across\n  instance/master boundaries.\n- Fixed memory leak for draw items in Storm.\n- Fixed handling infinite bounds explicitly during GPU frustum culling in Storm.\n- Fixed UsdShadeShader material invalidations in UsdImaging.\n- Fixed handling of topology changes for basis curves in Storm.\n- Fixed ortho camera handling in Hydra RenderMan plugin.\n\n### Houdini Plugin\n- Added general methods for converting between USD values and GA_Attribute data.\n- Fixed missing usdSkel dependency. \n  (PR: [#827](https://www.github.com/PixarAnimationStudios/USD/pull/827))\n\n- Detect skinning influences stored as detail attribs when converting to\n  capture attributes. This allows rigid shapes to be coalesced into deforming\n  agent shapes.\n\n### Katana Plugin\n- Point instancers with velocities now get motion blur on the first frame,\n  even if their positions are not sampled at any previous frames.\n- Katana paths are now better aligned with USD paths when possible for point\n  instancer prototypes.\n- Includes \"prmanLightParams.iesProfileNormalize\" when reading UsdLux lights\n  in as RenderMan representations\n\n- Fixed bug where per-instance primvar values on point instancers could be\n  inherited by the prototype geometry, causing warnings about mismatched sizes.\n  (Issue: [#893](https://www.github.com/PixarAnimationStudios/USD/issues/893))\n\n### MaterialX Plugin\n- Fixed bug when reading a .mtlx file with more than 1 bindinput.\n  (Issue: [#950](https://www.github.com/PixarAnimationStudios/USD/issues/950), \n  PR: [#956](https://www.github.com/PixarAnimationStudios/USD/pull/956))\n\n### Maya Plugin\n- Deprecated Maya plugin in favor of the Autodesk maya-usd plugin available at\n  https://github.com/Autodesk/maya-usd. We anticipate removing the plugin from\n  the USD repository in the next release and recommend users begin transitioning\n  to the Autodesk plugin -- it contains the same features as the Pixar plugin\n  (in fact, it is the same code).\n\n- FindMaya.cmake module on MacOS (once again) supports paths that include the\n  \"Maya.app/Contents\" subdirectory when specifying MAYA_LOCATION. \n  (PR: [#878](https://www.github.com/PixarAnimationStudios/USD/pull/878))\n- Visibility for Maya point instancers is now exported to UsdGeomPointInstancer.\n- Maya \"stroke\" nodes are now exported as UsdGeomBasisCurves. \n  (Issue: [#867](https://www.github.com/PixarAnimationStudios/USD/issues/867))\n- Various bug fixes and cleanup.\n\n## [19.07] - 2019-06-17\n\n### Build\n- Improved detection of GLEW and Ptex libraries during build. \n  (PR: [#808](https://www.github.com/PixarAnimationStudios/USD/pull/808))\n- Fixed bug in build_usd.py that caused errors when specifying the\n  \"Xcode\" CMake generator.\n\n### USD:\n- Various optimizations and cleanups in trace library.\n- Added iterator-based construction for VtArray. \n  (PR: [#644](https://www.github.com/PixarAnimationStudios/USD/pull/644))\n- Added Python bindings for ArResolver::RefreshContext. \n  (PR: [#820](https://www.github.com/PixarAnimationStudios/USD/pull/820))\n- Fixed incorrect results from NdrRegistry::GetAllNodeSourceTypes.\n- Removed unused spec types from Sdf.\n- Reimplemented SdfPath. The new implementation dramatically improves the\n  performance of creating property paths, which is a key part of value\n  resolution.\n- SdfFileFormat::IsStreamingLayer was moved to SdfAbstractData::StreamsData.\n  SdfAbstractData implementations are now responsible for expressing\n  whether they stream data from their back-end instead of SdfFileFormat.\n- Added file format arguments to SdfLayer::CreateAnonymous to match CreateNew.\n- Fixed bug where strings in scene description that look like format\n  specifiers would be interpreted as such during .usda output.\n- Added dynamic payloads feature. Dynamic payloads allow file formats to\n  procedurally generate a layer using metadata authored on the prim where the\n  layer is introduced via a payload arc. See examples and \"Advanced Features\"\n  documentation for more details.\n- Fixed erroneous composition cycle detection for subroot references to\n  sibling prims across reference boundaries.\n- Added support for \"schemaTokens\" customData entry in schema.usda. This\n  allows developers to associate tokens with a particular schema for clarity\n  and organization. These tokens will continue to be emitted into the\n  standard tokens.h and tokens.cpp files in each schema library.\n- Removed deprecated UsdListPositionTempDefault and USD_AUTHOR_OLD_STYLE_ADD\n  environment variable.\n- Improved error detection for truncated .usdc files.\n- Improved error messages and debug output for USD schema generation.\n  (PR: [#427](https://www.github.com/PixarAnimationStudios/USD/pull/427), \n  PR: [#478](https://www.github.com/PixarAnimationStudios/USD/pull/478))\n- Fixed various issues that caused build errors on Windows. \n  (Issue: [#812](https://www.github.com/PixarAnimationStudios/USD/issues/812))\n- Fixed bug that caused corrupt .usdc files to be created in certain rare\n  cases. (Issue: [#811](https://www.github.com/PixarAnimationStudios/USD/issues/811))\n- Fixed bug where asset-valued stage metadata would not be resolved.\n- Calling Usd.Prim.IsDefined on a null prim in Python now raises a\n  Python exception. \n  (Issue: [#753](https://www.github.com/PixarAnimationStudios/USD/issues/753))\n- Fixed bug in UsdUtils dependency extraction and .usdz creation where\n  asset dependencies in layer metadata were ignored.\n- Improved integer encoding and fixed a source of non-deterministic output\n  in .usdc file format. \n  (Issue: [#830](https://www.github.com/PixarAnimationStudios/USD/issues/830))\n- Added ability to usdcat to only show layer metadata via --layerMetadata\n  command-line flag.\n- UsdGeomBasisCurves schema now accepts \"pinned\" as a valid value for\n  wrapping to represent pinned curves.\n- UsdGeomPointInstancer will now use the \"append\" list op when authoring\n  inactiveIds metadata instead of the deprecated \"added\" list op. This\n  behavior can be reverted by setting the environment variable\n  `USDGEOM_POINTINSTANCER_NEW_APPLYOPS` to 0, but this will be removed\n  in a future release.\n- Added UsdShadeCoordSysAPI schema for representing coordinate systems.\n- Added shaping:ies:normalize attribute to UsdLuxShapingAPI.\n- Numerous fixes and improvements to UsdSkel schemas.\n\n### Imaging:\n- Added early version of RenderMan Hydra render delegate with support for\n  geometry,material networks, lights, volumes, coordinate systems and more!\n- Added support for coordinate systems in Hydra and UsdImaging.\n- Added support for categories per instance in Hydra to support light linking\n  to individual instances.\n- Added order independent transparency (OIT) to Hydra GL.\n- Added support for backend-independent picking and highlighting.\n- Improved Hydra support for scenegraph cameras.\n- Added support for instance-rate primvar queries in Hydra GL shading code.\n- Added support for generating normals for picking hits in Hydra GL.\n- Added \"DontConform\" camera window policy.\n- Added support for picking points in Hydra GL.\n- Added depth compositing to HdxColorizeTask.\n- Render delegates can now access \"velocities\" attribute on point-based schemas.\n  (PR: [#824](https://www.github.com/PixarAnimationStudios/USD/pull/824))\n- Refactored and clarified use of \"path\" and \"prim\" terminology in UsdImaging.\n- Removed HdChangeTracker::MarkAllCollectionsDirty\n- Removed render tags API from HdRprimCollection. They have become a Hydra\n  task concept.\n- Fixed instancing-related crashes in UsdImaging. \n  (Issue: [#838](https://www.github.com/PixarAnimationStudios/USD/issues/838), \n  Issue: [#847](https://www.github.com/PixarAnimationStudios/USD/issues/847))\n- Added usdAppUtils library containing common functionality and utilities\n  for applications that view USD stages.\n- Added initial version of usdrecord command line tool for generating images\n  from a USD file.\n- Added \"debug flags\" configuration dialog in usdview.\n- Added ability to specify first/last/current frame when launching usdview\n  via \"--ff\", \"--lf\", and \"--cf\" command line parameters. \n  (PR: [#832](https://www.github.com/PixarAnimationStudios/USD/pull/832))\n- Numerous correctness, interaction, and performance improvements to usdview's\n  transport control (frame slider). \n  (PR: [#770](https://www.github.com/PixarAnimationStudios/USD/pull/770))\n\n### Alembic Plugin:\n- Added support for Alembic 1.7.9. \n  (PR: [#825](https://www.github.com/PixarAnimationStudios/USD/pull/825))\n\n### Houdini Plugin:\n- Support for Houdini 16.0 is deprecated. We anticipate bumping the minimum\n  version requirement to 16.5 and dropping 16.0 support in the next release.\n- Fixed bug which could cause visibility to be incorrect.\n- Added support for export of additional primvar types.\n- Fixed bug which could cause incorrect attribute typeinfo when importing\n  array attributes.\n- Added support for additional OSD subdiv interpolation tags.\n- Added support for targeting the default prim on import via a reserved\n  \"defaultPrim\" prim path.\n- Miscellaneous improvements for converting between UsdSkel and Agent\n  primitives.\n\n### Katana Plugin:\n- Added support for reading and resolving collection-based material bindings to\n  PxrUsdIn. This is done as a two stage process in which bindings (for the\n  purposes specified in \"additionalBindingPurposeNames\") are added within a\n  \"usd.materialBindings\" group attribute. The PxrUsdInResolveMaterialBindings\n  node (and its corresponding Op) transfers a purpose's binding to the\n  system-level \"materialAssign\" attribute and optionally filters inherited\n  redundancy.\n- The \"info.usd\" attributes which advertise which API schemas are applied can\n  be created in either array or group attribute form. The latter is convenient\n  to match against via CEL.\n\n### Maya Plugin:\n- Add support for exporting assembly edits on pxrUsdReferenceAssembly nodes.\n- Expose controls for tweaking selection parameters in pxrHdImagingShape.\n- Importing shaders and lights will use mel commands to property add shaders\n  to hypershade and lights to the defaultLightSet.\n\n## [19.05] - 2019-04-10\n\n### Build\n- Added support for Ninja build system in build_usd.py. \n  (PR: [#590](https://www.github.com/PixarAnimationStudios/USD/pull/590))\n- Added --build-debug option to build_usd.py. \n  (PR: [#502](https://www.github.com/PixarAnimationStudios/USD/pull/502))\n- Better support for static builds in exported pxrConfig.cmake. \n  (PR: [#787](https://www.github.com/PixarAnimationStudios/USD/pull/787))\n- .pdb files are now installed with the libraries on Windows. \n  (PR: [#502](https://www.github.com/PixarAnimationStudios/USD/pull/502))\n- MacOS users can now run build_usd.py with Maya's Python interpreter (mayapy)\n  to ensure that USD and the Maya plugin will be built against Maya's Python.\n  This requires the --no-usdview option, as Maya does not provide the OpenGL\n  module in Python. \n  (Issue: [#10](https://www.github.com/PixarAnimationStudios/USD/issues/10))\n- Numerous fixes for FindMaya.cmake module. In particular, users on MacOS\n  who specify MAYA_LOCATION should now use the root of the installation,\n  without the \"Maya.app/Contents\" suffix.\n\n### USD:\n- Added usdtree utility for viewing the scenegraph at the command line. \n  (PR: [#619](https://www.github.com/PixarAnimationStudios/USD/pull/619))\n- Added ability to configure default camera prim name via plugin and query\n  the default name via UsdUtilsGetPrimaryCameraName.\n- Added UsdUtilsTimeCodeRange for representing an iterable range of time codes.\n- Added API to UsdGeom for setting and querying Stage-level linear units via\n  the \"metersPerUnit\" metadata field.\n- Changed SdfFileFormat interface to operate in terms of SdfLayer instead of\n  SdfLayerBase.\n- Improved performance of UsdGeomPointBased::ComputeExtent overload with an\n  additional transform. \n  (PR: [#640](https://www.github.com/PixarAnimationStudios/USD/pull/640))\n- Various cleanup changes to fix documentation, compiler warnings, and remove\n  unused or legacy code.\n- Numerous changes to UsdSkel schemas for resolving and imaging blend shapes.\n- Removed UsdGeomFaceSetAPI schema.\n- Removed SdfLayerBase. Its functionality was folded into SdfLayer.\n- Fixed bug where parts of the codegen template for multiple-apply API schemas\n  were specific to UsdCollectionAPI. \n  (Issue: [#799](https://www.github.com/PixarAnimationStudios/USD/issues/799))\n- Fixed bug preventing the use of symlinks for generatedSchema.usda. \n  (Issue: [#763](https://www.github.com/PixarAnimationStudios/USD/issues/763))\n- Fixed several bugs in .usdz creation related to nesting of .usdz files and\n  file path syntax on Windows.\n\n### Imaging:\n- Added \"MaterialTags\" mechanism which allows the GL backend to render opaque\n  primitives separated from translucent primitives.\n- Added early implementation of CPU/GPU UsdSkel skinning support, working\n  in both GL and Embree backends.\n- Added early implementation of blend shapes support to UsdSkelImaging adapter.\n- Refactored renderer-independent input/output code into new \"hio\" library.\n- Added new phase for Hydra tasks called \"Prepare\", which runs after Sync\n  phase and before Commit.\n- Added \"instanceId\" and \"elementId\" AOVs in HdEmbree.\n- Added new purpose cache in UsdImaging to improve performance.\n- Added support for animated textures in drawModeAdapter. \n  (PR: [#735](https://www.github.com/PixarAnimationStudios/USD/pull/735))\n- TaskController::TestIntersections now allows selection by nearestToCamera.\n  (PR: [#760](https://www.github.com/PixarAnimationStudios/USD/pull/760))\n- Split Hydra's color primvar into a float3 displayColor and a float\n  displayOpacity.\n- Removed hidden GL dependencies in UsdImaging tests.\n- Removed unnecessary parameters from GetInstancerTransform and\n  SampleInstancerTransforms in HdSceneDelegate API.\n- Fixed several issues with curve drawing in GL backend. \n  (Issue: [#690](https://www.github.com/PixarAnimationStudios/USD/issues/690))\n- Fixed bug where UsdGeomSubset called Populate instead of Resync during\n  resyncs.\n- Fixed leak of empty GlfSimpleShadowArray instance. \n  (PR: [#786](https://www.github.com/PixarAnimationStudios/USD/pull/786))\n\n### Alembic plugin:\n- Fixed double time scaling when converting Alembic sample times from seconds\n  to USD time codes. \n  (Issue: [#662](https://www.github.com/PixarAnimationStudios/USD/issues/662))\n- USD's \"timeCodesPerSecond\" metadata is now used to scale when reading or\n  writing an Alembic file.\n- Added support for facesets, which are represented using the UsdGeomSubset\n  schema. (PR: [#758](https://www.github.com/PixarAnimationStudios/USD/pull/758))\n\n### Houdini plugin:\n- Added support for namespaced primvars in Houdini 17.5+. \n  (PR: [#747](https://www.github.com/PixarAnimationStudios/USD/pull/747))\n- Added support for caching in-memory USD stages in GusdStageCache. \n  (PR: [#775](https://www.github.com/PixarAnimationStudios/USD/pull/775))\n- Added support for import and export of holeIndices attribute on UsdGeomMesh.\n- Added support for all registered USD file extensions.\n- Changes in support of upcoming Houdini versions.\n- Fixed spurious warnings when evaluating transforms on pseudo-root prims.\n\n### Katana plugin:\n- The Katana plugin no longer supports Katana 2.x. Support for 2.x was\n  deprecated in release 19.03.\n- Expanded support for and use of zero-copy construction of FnAttribute from\n  VtArray.\n- Ensure that a NullAttribute is used to block an inherited shading connection\n  when the USD equivalent is present.\n- PxrUsdIn will observe a \"katana:useDefaultMotionSamples\" USD attribute to\n  hard-wire the equivalent behavior of a PxrUsdInDefaultMotionSamples node\n  targeting that scope.\n- Fixed bug where calling UsdKatanaCache::FindSessionLayer with a cache key\n  derived from an empty GroupAttribute would not return a layer whose key\n  was generated for an invalid/nonexistent GroupAttribute.\n- Fixed crash in PxrUsdIn when an invalid regex value was given for\n  \"ignoreLayerRegex\".\n\n### Maya plugin:\n- Added support for exporting units via new \"metersPerUnit\" metadata.\n- Imported shaders now appear in the Hypergraph UI.\n- Imported lights now appear in defaultLightSet.\n\n## [19.03] - 2019-02-13\n\n### Added\nBuild:\n- Ability to download and build OpenColorIO dependency via `--opencolorio`\n  argument to support new color management functionality in Hydra.\n\nUSD:\n- Enabled usddumpcrate utility for viewing .usdc file information in the build.\n  (PR: [#470](https://www.github.com/PixarAnimationStudios/USD/pull/470))\n- Internal payloads, list editing and layer offsets for payload arcs. Payloads\n  now provide the same set of features as references.\n\n  This may affect backwards compatibility of layers written with this version\n  of USD:\n  - Layers containing payloads using these new features will not be readable\n    in previous USD versions. .usdc files containing these payloads will be\n    marked as version 0.8.0.\n  - Layers containing payloads that only use the previously-available features\n    will continue to be readable in previous USD versions.\n- API for querying authored and inherited primvars in UsdGeomPrimvarsAPI schema.\n- Optional 'jointNames' attribute to UsdSkelSkeleton to help DCC import/export.\n\nImaging:\n- HdxColorCorrectionTask to do linear to sRGB conversions or color management\n  via OpenColorIO.\n- HdxProgressiveTask type tag for tasks that support progressive rendering.\n- Initial support for computations in the UsdImaging scene delegate.\n- Support for points rendering for basis curves in Hydra GL.\n- Publish the normals attribute or primvar from points primitives through \n  Hydra. (PR: [#742](https://www.github.com/PixarAnimationStudios/USD/pull/742))\n- usdview now responds to all scene edits from the interpreter. Plugins can\n  connect to the usdviewApi.dataModel.signalPrimsChanged signal to be notified\n  for these changes.\n\nHoudini plugin:\n- Support for more primvar types.\n\nKatana plugin:\n- Support for reading materials with multiple incoming shader connections.\n\nMaya plugin:\n- Initial work for a UsdPreviewSurface shader node and USD export support.\n\n### Changed\nBuild:\n- build_usd.py now explicitly detects Python version to link against on macOS\n  to avoid conflicts between multiple installations. \n  (Issue: [#19](https://www.github.com/PixarAnimationStudios/USD/issues/19), \n   Issue: [#699](https://www.github.com/PixarAnimationStudios/USD/issues/699))\n- build_usd.py only builds boost libraries like boost::filesystem when needed.\n\nUSD:\n- UsdStage::MuteAndUnmuteLayers and LoadAndUnload now send a\n  UsdNotice::StageContentsChanged notification. \n  (PR: [#710](https://www.github.com/PixarAnimationStudios/USD/pull/710))\n\nImaging:\n- UsdImaging scene delegate now stops population traversal at non-imageable\n  prims.\n- Materials are no longer resynced on visibility changes.\n- Hydra will now only reset varying state for clean prims.\n- HdxCompositor can now copy depth without remapping its range and can also\n  copy color and depth to a user-provided viewport size.\n- Interacting with the 'Vis' or 'Draw Mode' columns in usdview no longer\n  changes selection.\n- When multiple prims are selected in usdview, changes in the 'Vis' column\n  to one of those prims will affect all of them.\n\nKatana plugin:\n- Optimizations for reading gprims and point instancers via a new library,\n  vtKatana. This library requires Katana 3.0 or later.\n\nMaya plugin:\n- Configuration of the default material scope name has been moved to usdUtils\n  to facilitate sharing across plugins. See UsdUtilsGetMaterialsScopeName.\n\n### Deprecated\nUSD:\n- UsdAttribute::HasAuthoredValueOpinion in favor of HasAuthoredValue.\n- UsdPrim::ClearPayload, HasPayload, and SetPayload in favor of API on\n  UsdPayloads object returned by GetPayloads.\n- Primvar API on UsdGeomImageable in favor of UsdGeomPrimvarsAPI schema.\n\nKatana:\n- Support for Katana 2.x in favor of Katana 3.x. We anticipate removing support\n  for Katana 2.x in the next release.\n\n### Removed\n- Dependency on boost::filesystem \n  (Issue: [#679](https://www.github.com/PixarAnimationStudios/USD/issues/679))\n- Ability to read pre-xformOp transform attributes on UsdGeomXformable prims.\n- UsdShadeMaterial::CreateMaterialFaceSet, GetMaterialFaceSet,\n  HasMaterialFaceSet functions.\n- UsdGeomCollectionAPI schema.\n\n### Fixed\nBuild:\n- Detection of Visual Studio on non-English platforms in build_usd.py.\n  (Issue: [#613](https://www.github.com/PixarAnimationStudios/USD/issues/613), \n   Issue: [#697](https://www.github.com/PixarAnimationStudios/USD/issues/697))\n\nUSD:\n- Error when composing prims with both direct and ancestral specializes arcs.\n- Incorrect strength ordering when composing specializes arcs declared across\n  an internal reference arc.\n- UsdAttribute::GetConnections and UsdRelationship::GetTargets could return\n  incorrect paths in cases involving nested instancing and instance proxies\n  inside of masters.\n- Corrupted values when parsing OSL string arrays in Sdr via sdrOsl plugin.\n- Various fixes for UsdSkelSkinningQuery and UsdSkelAnimMapper.\n- Incorrect results from UsdGeomBBoxCache::ComputeRelativeBound.\n- UsdGeomPointInstancer enums in Python are now properly scoped under\n  UsdGeom.PointInstancer instead of UsdGeom.\n\nImaging:\n- GlfDrawTarget::_BindAttachment could leave a different framebuffer bound\n  than what was bound before calling the function.\n- Multiple GLSL shader fixes to allow Hydra GL to render correctly with Intel\n  GPUs.\n- Errors when trying to use usdview on macOS due to incorrect handling of\n  unsupported Hydra renderers. When no supported renderers are found, usdview\n  will fall back to the legacy renderer.\n- Missing symbol exports in UsdVolImaging that could cause build errors on\n  Windows. (PR: [#742](https://www.github.com/PixarAnimationStudios/USD/pull/742))\n- Regression in usdview that caused the \"Redraw On Frame Scrub\" option to\n  always be in effect. \n  (Issue: [#734](https://www.github.com/PixarAnimationStudios/USD/issues/734))\n\nAlembic plugin:\n- Alembic curve basis, type, and wrap were being converted to varying \n  attributes in USD instead of uniform.\n\nHoudini plugin:\n- Incorrect display in Tree View panel when unimporting the top-most prim.\n- USD Reference ROP behavior when updating or removing an existing reference.\n- Various compilation errors with different Houdini versions.\n- Incorrect default value for horizontal aperture offset in USD camera node.\n- Vertex attributes on meshes with rightHanded winding order. \n  (Issue: [#631](https://www.github.com/PixarAnimationStudios/USD/issues/631), \n  PR: [#632](https://www.github.com/PixarAnimationStudios/USD/pull/632))\n\nMaya plugin:\n- Incorrect name conflict error on export when stripping namespaces and merging\n  transform and shape nodes. \n  (PR: [#683](https://www.github.com/PixarAnimationStudios/USD/pull/683))\n\n## [19.01] - 2018-12-14\n\n### Added\nUSD:\n- usdresolve utility for checking the results of asset resolution at the \n  command line. (PR: [#609](https://www.github.com/PixarAnimationStudios/USD/pull/609))\n- SdfFileFormat::FindAllFileFormats and FindAllFileFormatExtensions\n  for querying available file formats. \n  (PR: [#532](https://www.github.com/PixarAnimationStudios/USD/pull/532))\n- Option to UsdGeomBBoxCache to ignore visibility.\n\nImaging:\n- Render settings API to HdRenderDelegate. (\"Enable Tiny Prim Culling\" is the\n  first example for Hydra GL)\n- Support for UDIM textures in Hydra GL. \n  (PR: [#597](https://www.github.com/PixarAnimationStudios/USD/pull/597))\n- Blending controls to HdRenderPassState for initial transparency support in\n  Hydra GL.\n- Ability to specify backend when starting usdview via \"--renderer\" parameter.\n- Optional \"Draw Mode\" column to prim browser in usdview that provides control\n  of model draw modes. (texture cards, bbox, etc.)\n\nHoudini plugin:\n- Optional layer scale, layer offset, and target prim parameters to the\n  USD Reference ROP.\n- Option on USD Output ROP to use or ignore obj-level transforms.\n- Support for exporting ramp parameters in OSL shader networks.\n\nKatana plugin:\n- \"info.usd.outputSession\" attribute authored by PxrUsdIn. This is a sibling\n  to \"info.usd.session\" but is not affected by the translation of PxrUsdIn's\n  old \"variants\" parameter into session data. It acts as a more stable session \n  cache key for external apps to use.\n- \"forceArrayForSingleValue\" parameter that allows PxrUsdInAttributeSet to\n  author 1-length arrays.\n\nMaya plugin:\n- Support for instancing USD reference assemblies in instancers.\n\n### Changed\nBuild:\n- Symbols for wrapping functions are no longer exported from modules\n  to avoid issues with using RTLD_GLOBAL in Python. \n  (Issue: [#641](https://www.github.com/PixarAnimationStudios/USD/issues/641))\n- Updated minimum required version of GLEW to 2.0.0.\n\nUSD:\n- Numerous fixes and cleanup changes throughout to improve performance, \n  remove dead code, convert code to more modern patterns, and remove \n  unneeded uses of boost.\n- Replaced safe-bool idiom with explicit bool operator in several places.\n- Improved performance of setting and erasing time samples in .usda \n  layers from linear complexity to logarithmic.\n- Improved error messages when attempting to read a .usdz files using\n  compression or encryption.\n- Various improvements to UsdSkel documentation and API.\n- Changed scene description name for UsdSkelBindingAPI from \"BindingAPI\"\n  to \"SkelBindingAPI\" to distinguish it from other binding API schemas.\n\nImaging:\n- Several improvements to the handling of AOVs in Hydra.\n- Simplified class hierarchy in usdImagingGL. The primary API entry point\n  is now UsdImagingGLEngine.\n- Better performance for animated textures and large numbers of invisible\n  prims in Hydra.\n- Optimized batch removal of prims in Hydra and UsdImaging.\n- Better handling of edits made in the interpreter in usdview.\n- Mesh normals are suppressed when the subdivision scheme is something\n  other than \"none\".\n- The default stb-based image reader now extracts gamma information from\n  .png images.\n- Functionality specific to the prim browser in usdview have been moved\n  to a browser-specific menu bar with \"Navigation\" and \"Show\" menus.\n- Property browser in usdview now shows resolved material bindings and\n  inherited primvars.\n\n Maya plugin:\n- The name of the scope for exported material prims can now be customized \n  in the UI or via the \"materialsScopeName\" parameter to usdExport. The \n  default scope name is \"Looks\", matching the previous behavior.\n- Refactoring and cleanup in preparation for shading export support.\n\n### Removed\nBuild:\n- Build-time dependency on Python. \n  (Issue: [#605](https://www.github.com/PixarAnimationStudios/USD/issues/605), \n  PR: [#615](https://www.github.com/PixarAnimationStudios/USD/pull/615))\n\nImaging:\n- HdSceneTask in favor of HdTask.\n- UsdImagingGL and UsdImagingGLHdEngine.\n\n### Fixed\nUSD:\n- Incorrect composition error in cases involving internal sub-root references \n  and variants. \n  (Issue: [#677](https://www.github.com/PixarAnimationStudios/USD/issues/677))\n- Regression that caused prims to sometimes be composed incorrectly.\n- Missing symbol exports that could cause build errors on Windows. \n  (PR: [#623](https://www.github.com/PixarAnimationStudios/USD/pull/623), \n   Issue: [#703](https://www.github.com/PixarAnimationStudios/USD/issues/703), \n   Issue: [#704](https://www.github.com/PixarAnimationStudios/USD/issues/704), \n   Issue: [#705](https://www.github.com/PixarAnimationStudios/USD/issues/705))\n- Incorrect type validation and conversion when authoring metadata via Python\n  that could lead to invalid scene description. \n  (Issue: [#529](https://www.github.com/PixarAnimationStudios/USD/issues/529))\n- Various issues in usdzip and related usdUtils API when processing references \n  for packaging into a .usdz file.\n\nImaging:\n- Batch aggregation for prims with face-varying primvars.\n- Drawing coord initialization of instance primvar slots.\n- Deep batch validation only happens when needed, improving performance.\n- Crash in cases where a prim is removed from a stage and a collection\n  targeting that prim is updated in the same round of changes. \n  (PR: [#685](https://www.github.com/PixarAnimationStudios/USD/pull/685))\n- Crash when reading half-float .exr images in the OpenImageIO plugin.\n  (Issue: [#581](https://www.github.com/PixarAnimationStudios/USD/issues/581))\n- Incorrect handling of edits to material bindings.\n\nHoudini plugin:\n- Issue where visibility and purpose attributes weren't properly inherited \n  on import. \n  (Issue: [#649](https://www.github.com/PixarAnimationStudios/USD/issues/649))\n- Crash when running ginfo on a USD file. \n  (Issue: [#673](https://www.github.com/PixarAnimationStudios/USD/issues/673), \n  PR: [#674](https://www.github.com/PixarAnimationStudios/USD/pull/674))\n- Issue where imported string attribute values could be incorrect. \n  (Issue: [#653](https://www.github.com/PixarAnimationStudios/USD/issues/653))\n\nKatana plugin:\n- Issues with reading UsdGeomPointInstancers\n  - Regression in instance transform computation with masked instances.\n  - Prototype transforms are cleared out on the Katana side since they are\n    folded in when computing instance transforms.\n\nMaya plugin:\n- Reference assemblies weren't being drawn in \"playback\" representation.\n  (Issue: [#675](https://www.github.com/PixarAnimationStudios/USD/issues/675))\n- Issue where HdImagingShape prevented nodes from being reordered.\n\n## [18.11] - 2018-10-10\n\n### Added\nUSD:\n- [usdVol] UsdVol schema for representing volumes. \n  (PR: [#567](https://www.github.com/PixarAnimationStudios/USD/pull/567))\n- [usdShade] Ability to define shaders in the shader definition registry \n   using UsdShade. \n- [usdShaders] Shader definition registry plugin for core nodes defined in \n   the UsdPreviewSurface specification.\n\nImaging:\n- [hd, usdImaging] Hydra support for UsdVol schema. \n  (PR: [#567](https://www.github.com/PixarAnimationStudios/USD/pull/567))\n- [hd, hdSt] Topology visibility operations for meshes in Hydra.\n- [hd, hdSt] Support for inverting the depth test of a draw target.\n- [hd, hdSt] \"Flat normals\" computed buffer source for meshes.\n- [hdx] ResolveNearestToCenter pick hit resolution method for ray picking.\n\n- [usdview] Menu for switching AOVs for supported backends.\n- [usdview] Menu for backend-specific settings.\n\nAlembic plugin:\n- [usdAbc] Behavior where an Xform with a single geometry or camera in an \n  Alembic file would be collapsed into a single prim in USD can now be disabled \n  by setting the environment variable `USD_ABC_XFORM_PRIM_COLLAPSE` to 0. \n  (PR: [#527](https://www.github.com/PixarAnimationStudios/USD/pull/527))\n\nMaya plugin:\n- [usdMaya] Display filter for USD proxy shapes.\n- [usdMaya, pxrUsdMayaGL] pxrHdImagingShape node that reduces overhead when \n  imaging scenes with many Hydra-backed shapes.\n- [pxrUsdMayaGL] Support for Maya lights casting shadows between Hydra shapes, \n  and Hydra shapes to Maya shapes, but not Maya shapes to Hydra shapes.\n\nHoudini plugin:\n- [gusd] Experimental build support for Houdini plugin on Windows.\n- [OP_gusd] Multi-seg export to USD output ROP.\n\n### Changed\n- Numerous fixes and cleanup changes throughout to improve performance, \n  convert code to more modern patterns, and remove unneeded uses of boost.\n  (PR: [#373](https://www.github.com/PixarAnimationStudios/USD/pull/373), \n   PR: [#453](https://www.github.com/PixarAnimationStudios/USD/pull/453), \n   PR: [#481](https://www.github.com/PixarAnimationStudios/USD/pull/481), \n   PR: [#484](https://www.github.com/PixarAnimationStudios/USD/pull/484), \n   PR: [#488](https://www.github.com/PixarAnimationStudios/USD/pull/488))\n\nUSD:\n- [usd] UsdAPISchemaBase is now an abstract base class as originally intended.\n- [usdGeom] Improved performance of UsdGeomPointBased::ComputeExtent. In one \n  example, this provided a ~30% improvement. \n  (PR: [#588](https://www.github.com/PixarAnimationStudios/USD/pull/588))\n- [usdGeom] Improved performance of computing extents for UsdGeomPointInstancer.\n  In one example with >5 million instances, extent computation time decreased\n  from ~25 seconds to ~3 seconds.\n- [usdSkel] UsdSkelBakeSkinning bakes skinning at additional time samples\n  based on stage's configured sampling rate.\n- [usdedit] Opening a .usdz file now forces read-only mode.\n- [usdzip] \"-l\" or \"-d\" arguments will now provide information about existing \n  .usdz files.\n- [usdzip] ARKit compliance checks now require valid sources for shader inputs\n  with connections and valid prims and/or collections for material bindings.\n\nImaging:\n- [hd] Improved Hydra AOV API.\n- [hd] Split reprs into the topology indices they affect.\n- [hd] Properly set up both the shadow projection and view matrices. \n  (PR: [#583](https://www.github.com/PixarAnimationStudios/USD/pull/583))\n- [hd] Optimization to not run garbage collection if a texture hasn't change.\n- [hd, hdSt, usdImaging] Update wrap mode fallback behavior to useMetadata.\n- [hdx] Improved shadow support in HdxTaskController. \n  (PR: [#541](https://www.github.com/PixarAnimationStudios/USD/pull/541))\n- [hdx] \"Enable Hardware Shading\" entry point is now \"Enable Scene Materials\".\n- [hdSt] Support to generate GLSL-compatible names for resources/primvars.\n- [usdImagingGL] Better support for animated textures. \n  (PR: [#488](https://www.github.com/PixarAnimationStudios/USD/pull/488))\n- [usdview] Better error reporting if an unsupported backend is selected. \n  (PR: [#635](https://www.github.com/PixarAnimationStudios/USD/pull/635))\n- [hdEmbree] Improved AO sampling (cosine-weighted sampling, stratified AO \n  samples LHS).\n\nMaya plugin:\n- [pxrUsdMayaGL] Many performance improvements in the Hydra batch renderer.\n- [usdMaya, pxrUsdMayaGL] Using USD in live surface uses the normal at the \n  snap point.\n- [usdMaya, pxrUsdTranslators] Various code cleanup in USD exporter.\n\nKatana plugin:\n- [usdKatana] Use bracketing sample closest to shutter open/close if no frames\n  found in shutter interval.\n- [usdKatana] Honor UsdStage's authored timeCodesPerSecond and framesPerSecond.\n  If they differ, Katana will operate in frames, with current time, motion\n  samples, and shutter interval scaled appropriately.\n\nHoudini plugin:\n- [gusd] Rebind materials when creating sub-root references.\n- [gusd] Optimizations in handling of stage mask operations.\n- [OP_gusd] USD output ROP now allows binding to shaders referenced from other \n  models.\n\n### Removed\n\nImaging:\n- [hd] Removed Repr requirements from GetRenderTag API.\n\n### Fixed\nBuild:\n- [cmake] User-specified CMAKE_MODULE_PATH was being ignored during build. \n  (PR: [#614](https://www.github.com/PixarAnimationStudios/USD/pull/614))\n- [cmake] Installed headers could take precedence over source headers, leading \n  to build failures. \n  (Issue: [#83](https://www.github.com/PixarAnimationStudios/USD/issues/83)) \n\nUSD:\n- [tf] TfEnvSetting crash on MSVC 2017.\n- [ar] ArDefaultResolver::AnchorRelativePath did not call IsRelativePath on\n  derived resolvers. \n  (PR: [#426](https://www.github.com/PixarAnimationStudios/USD/pull/426))\n- [sdf] SdfCopySpec did not handle copying prim specs to variants and vice-versa.\n- [sdf] Incorrect notification was sent when removing subtrees of inert specs.\n- [usd] Prim payload was not automatically loaded when a deactivated ancestor \n  prim with a payload was activated. \n  (Issue: [#604](https://www.github.com/PixarAnimationStudios/USD/issues/604))\n- [usd] Incorrect lists of time samples would be returned in certain cases\n  with value clips.\n- [usd, usdzip] .usdz files were not fully compliant with the zip file format \n  specification. \n- [usdUtils, usdzip] Creating an ARKit .usdz file with a .usda asset would \n  create an invalid file.\n- [usdMtlx] MaterialX plugin build failures on Windows and macOS. \n  (Issue: [#611](https://www.github.com/PixarAnimationStudios/USD/issues/611))\n\nImaging:\n- [hdx] Picking with disabled scene materials generating shader errors.\n- [hdSt] Fix immediate draw batch invalidation on buffer migration.\n- [hdSt] Fix garbage collection on buffer migration.\n- [hdSt] Bindless texture loading not being deferred.\n- [usdImaging] Wrong transforms were being used when using usdLux light \n  transforms \n  (Issue: [#612](https://www.github.com/PixarAnimationStudios/USD/issues/612)).\n- [usdImaging] Fix for usdImaging's TextureId not accounting for origin.\n\nHoudini plugin:\n- [gusd] Several fixes for building with Houdini 17. \n  (PR: [#549](https://www.github.com/PixarAnimationStudios/USD/pull/549))\n- [gusd] Several fixes for stale caches and crashes.\n- [gusd] Potential PackedUSD transform issues in Houdini 16.5.\n\n## [18.09] - 2018-08-07\n\nThis release includes several major new features and changes, including:\n  - .usdz file format for packaging assets into a single file\n  - Introduction of UsdPreviewSurface\n  - Switch to calendar-based versioning scheme for USD libraries\n\n### Added\n- Build:\n  - build_usd.py can be given custom arguments for building libraries via the\n    `--build-args` option.\n  - Option to disable building usdview by specifying `PXR_BUILD_USDVIEW=OFF` \n    when running cmake or `--no-usdview` when running build_usd.py.\n  - Allow specifying `Boost_USE_STATIC_LIBS` to cmake on Windows. Note that \n    static boost libraries may lead to issues with Python bindings. \n    (Issue: [#407](https://www.github.com/PixarAnimationStudios/USD/issues/407))\n\n- USD:\n  - ArAsset and ArResolver::OpenAsset interfaces allowing resolvers to control\n    how data for a given asset is accessed.\n  - \"Package\" asset and layer concepts to Ar and Sdf, including \n    \"package-relative\" asset path syntax for addressing assets within packages.\n  - sdffilter utility for inspecting and summarizing the contents of a layer.\n  - .usdz file format. This format allows multiple assets (including layers, \n    textures, etc.) to be packaged into a single file that can be consumed by\n    USD without being unpacked to disk. These files can be created via the \n    \"usdzip\" command-line utility or via APIs like UsdZipFileWriter and \n    UsdUtilsCreateNewUsdzPackage.\n  - UsdStage::GetObjectAtPath for retrieving a generic UsdObject. \n    (PR: [#390](https://www.github.com/PixarAnimationStudios/USD/pull/390))\n  - UsdCollectionAPI can represent collections that include all paths or exclude\n    some paths but include all others via the new \"includeRoot\" attribute.\n  - Support for \"sourceAsset\" and \"sourceCode\" implementation sources in \n    UsdShadeShader.\n  - Ndr and Sdr libraries that provide a registry for shader definitions that \n    can be extended via plugins.\n  - sdrOsl plugin for populating shader definition registry from OSL 1.8.12. \n    OSL support must be enabled by specifying `PXR_ENABLE_OSL_SUPPORT=TRUE` \n    when running cmake.\n  - usdMtlx plugin containing USD file format and shader definition registry \n    plugins based on MaterialX 1.36.0. MaterialX support must be enabled by\n    specifying `PXR_BUILD_MATERIALX_PLUGIN=TRUE` when running cmake.\n  - Initial UsdSkel schema for blend shapes, which are not yet factored into\n    computed deformation.\n\n- Imaging:\n  - Per-prim adaptive refinement enabled via materials in hdSt.\n  - Preliminary AOV support in Hydra with sample implementation in Embree \n    plugin.\n  - HdRenderThread utility class to enable render delegates to render in \n    background threads. The Embree plugin uses this class as an example.\n  - Support for scene-authored normals on meshes.\n\n- UsdImaging:\n  - Light linking support.\n  - Initial support for USD material preview nodes. For more details, see:\n    http://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html \n\n    Currently unimplemented features include:\n    - Support for automatically computed tangents when normal mapping. Primvars\n      must be supplied.\n    - Handling for ior (index or refraction).\n\n- Alembic plugin:\n  - Support for TextureCoordinate role and value types.\n\n- Maya plugin:\n  - Initial support for exporting .usdz files.\n  - Support for importing and exporting volume and displacement in \"pxrRis\"\n    shading mode.\n  - pxrUsdPointBasedDeformerNode - an animation cache deformer that allows users\n    to pose a Maya mesh based on a UsdGeomPointBased prim.\n  - Option to apply Euler filtering to transforms during export. \n    (PR: [#299](https://www.github.com/PixarAnimationStudios/USD/pull/299))\n  - Option to filter out certain Maya node types during export. \n    (PR: [#475](https://www.github.com/PixarAnimationStudios/USD/pull/475))\n\n- Katana plugin:\n  - Support for TextureCoordinate role and value types.\n  - Support for importing inherit paths metadata as a info.usd group attribute\n  - \"additionalLocations\" parameter to PxrUsdInVariantSelect\n  - \"asArchive\" option to PxrUsdIn. When enabled, a \"usd archive\" location will \n    be created rather than loading the USD data directly. This is intended for \n    passing along to renderers which support reading USD natively.\n  - PxrUsdIn supports a \"sharedLooksCacheKey\" attribute to permit sharing cached\n    USD shading information across multiple references/instances which are known\n    to be identical from a pipeline standpoint.\n\n- Houdini plugin:\n  - Support import of Scope prims.\n\n### Changed\n- Build:\n  - USD resource files are now installed into <prefix>/lib/usd instead of\n    <prefix>/share/usd/plugins to bring them closer to the installed libraries.\n  - OpenGL dependency in imaging is now optional and may be disabled by \n    specifying `PXR_ENABLE_GL_SUPPORT=FALSE` when running cmake. This will \n    disable all GL-based functionality, including usdview.\n  - OpenImageIO dependency imaging is now optional and is disabled by default. \n    Support must be enabled by specifying `PXR_BUILD_OPENIMAGEIO_PLUGIN=TRUE`\n    when running CMake or `--openimageio` when running build_usd.py.\n  - build_usd.py on Windows will now use powershell to download dependencies\n    if it's available to avoid TLS 1.2 issues. \n    (Issue: [#449](https://www.github.com/PixarAnimationStudios/USD/issues/449))\n  - build_usd.py now directs users to install PySide2 via pip on MacOS.\n\n- USD:\n  - Numerous fixes and cleanup changes throughout to improve performance, \n    convert code to more modern patterns, and remove unneeded uses of boost.\n  - ArGetResolver no longer returns an instance of the ArResolver subclass used\n    for asset resolution. Clients can use ArGetUnderlyingResolver in the special\n    cases where access to the exact subclass is necessary.\n  - ArResolver context and scoped cache functions are now public and have been\n    renamed to match convention. Resolvers that override these functions will \n    need to be updated.\n  - ArDefaultResolver default context for an asset now includes the directory\n    of the asset in its search path.\n  - Optimizations to prim change processing in UsdStage. In one example, \n    processing time for adding new prims decreased ~50%.\n  - New .usdc files now default to version 0.7.0, which includes compression\n    features introduced in earlier releases. These files cannot be read in USD\n    releases prior to v0.8.4. Users can revert to writing older versions by\n    setting the environment variable `USD_WRITE_NEW_USDC_FILES_AS_VERSION`\n    to an older version.\n  - Several changes to provide cleaner and more detailed runtime error messages.\n  - Better support for generating code for properties of multiple-apply API\n    schemas in usdGenSchema.\n  - Schema types are now specified using the UsdSchemaType enum instead of \n    individual flags.\n  - \"expansionRule\" attribute for UsdCollectionAPI is now optional; collections\n    are created simply by calling UsdCollectionAPI::ApplyCollection.\n  - UsdGeomBBoxCache's bounds computation now includes all defined prims,\n    including those with no type specified.\n  - UsdRiMaterialAPI now writes standardized \"ri:surface\" output by default \n    instead of deprecated \"ri:bxdf\".\n  - UsdRiStatementsAPI now writes ri attributes as primvars by default.\n  - Renamed UsdSkelPackedJointAnimation schema to UsdSkelAnimation\n  - Renamed UsdSkelBakingSkinningLBS function to UsdSkelBakeSkinning\n  - Numerous additional fixes and changes to UsdSkel schemas and APIs.\n\n- Imaging:\n  - Several API cleanup changes in HdSprim/HdBprim/HdRprim.\n  - HdRenderDelegate::CanComputeMaterialNetworks has been replaced by\n    GetMaterialBindingPurpose, which has a default value of \"preview\".\n  - Improved handling of fallback texturing behavior when texture inputs are\n    missing from a material.\n  - .png, .jpg, .bmp, .tga, and .hdr images are now handled by a built-in\n    image reader based on stb_image.\n  - Texture loading is deferred until needed.\n  - Truncate mesh vertex primvar data to expected length if larger than expected.\n  - Improved ptex rect packing performance. In one large test case, processing\n    time decreased from ~600s to ~40s.\n\n- UsdImaging:\n  - Avoid loading custom shaders and textures when the \"Enable Hardware Shading\"\n    option is disabled in usdview.\n  - Default values for wrapS/wrapT match the proposed value in the preview\n    material spec. Also adds support for mirrored wrapS/wrapT.\n  - Scene lights are now enabled by default. This can be disabled by setting\n    the environment variable `USDIMAGING_ENABLE_SCENE_LIGHTS` to 0.\n  - UsdShadeMaterialAPI is now used instead of UsdRi to look up material \n    networks.\n\n- Alembic plugin:\n  - Alembic writer now prefers writing to the \"st\" attribute instead of \"uv\". \n    (PR: [#463](https://www.github.com/PixarAnimationStudios/USD/pull/463))\n\n- Maya plugin:\n  - MAYA_SCRIPT_PATH and XBMLANGPATH environment variable settings have changed\n    due to new resource file install location documented above. Refer to Maya\n    plugin documentation for new values.\n  - Large refactoring and cleanup of usdMaya. USD importers and exporters for\n    built-in Maya nodes have been moved to pxrUsdTranslators plugin.\n  - Proxy shape now redraws in response to changes on UsdStage.\n  - Diagnostic messages are now batched together for better reporting behavior\n    and to prevent log spewage.\n  - Improved primvar export. \n    (PR: [#330](https://www.github.com/PixarAnimationStudios/USD/pull/330))\n  - Camera shake now applied to USD cameras on export. \n    (PR: [#366](https://www.github.com/PixarAnimationStudios/USD/pull/366))\n\n### Deprecated\n- USD:\n  - UsdSkelPackedJointAnimation schema in favor of UsdSkelAnimation\n  - Specialized RIS and RSL shader schemas in UsdRi (e.g. UsdRisPattern and \n    UsdRisBxdf) in favor of generic UsdShadeShader prims.\n\n### Removed\n- Build:\n  - boost::regex dependency.\n\n- USD:\n  - ArResolver::CreateDefaultContextForDirectory to better accommodate asset\n    systems that are not file-system based.\n  - SdfExtractExternalReferences. UsdUtilsExtractExternalReferences can be used\n    as an alternative.\n  - UsdLuxLinkingAPI, in favor of UsdCollectionAPI to represent light linking.\n\n### Fixed\n- Build:\n  - Fixed issues with using Visual Studio 2017 in build_usd.py.\n  - Issue preventing use of NMake generator on Windows. \n    (PR: [#519](https://www.github.com/PixarAnimationStudios/USD/pull/519))\n  - Several fixes for static library builds.\n\n- USD:\n  - Bug where SdfLayer::GetDisplayName would return an empty string for \n    anonymous layers if the tag contained a \":\". \n    (PR: [#440](https://www.github.com/PixarAnimationStudios/USD/pull/440))\n  - Bug where SdfLayer::UpdateExternalReferences would not handle variants and \n    payloads correctly.\n  - Incorrect load state handling in UsdStage for payloads introduced across \n    sub-root references, inherits, and specializes arcs.\n  - Incorrect value clip time mapping during value resolution on UsdStage.\n  - Change processing bug when adding a new inert prim spec.\n  - Load/unload change processing bug with nested instances on UsdStage.\n  - Crash when opening a UsdStage with a UsdStagePopulationMask containing \n    instance prims. \n    (Issue: [#497](https://www.github.com/PixarAnimationStudios/USD/issues/497))\n  - Test failures when USD_EDITOR environment variable is set. \n    (Issue: [#505](https://www.github.com/PixarAnimationStudios/USD/issues/505))\n  - Bug where non-constant primvars were inherited down namespace in\n    UsdGeomPrimvarsAPI.\n\n- Imaging:\n  - Triangulation/quadrangulation of face varying for refined meshes.\n  - Several selection and picking issues.\n\n- UsdImaging:\n  - Material binding to instanced prims.\n  - Change processing for UsdShadeShader prims beneath UsdShadeMaterial prims.\n\n- Alembic plugin:\n  - Texture coordinate indices are now preserved. \n  (PR: [#520](https://www.github.com/PixarAnimationStudios/USD/pull/520))\n\n- Katana plugin:\n  - Several asset resolution fixes. \n    (Issue: [#535](https://www.github.com/PixarAnimationStudios/USD/issues/535))\n  - Bug preventing correct inheritance of motion sample times overrides as\n    authored by PxrUsdInDefaultMotionSamples and PxrUsdInMotionOverrides in\n    Katana plugin.\n\n- Houdini plugin:\n  - Fixed several display and update issues with treeview panel.\n  - Fixed bug in batched loading of masked prims.\n\n## [0.8.5a] - 2018-05-21\n\n### Fixed\n- Fixed broken URL in build_usd.py for downloading libtiff. \n  (Issue: [#498](https://www.github.com/PixarAnimationStudios/USD/issues/498))\n\n## [0.8.5] - 2018-05-07\n\n### Added\n- New 'trace' library providing performance profiling functionality.\n- API to Ar for resolver implementations that wrap around other resolvers.\n- TextureCoordinate role and TexCoord{2,3}{h,f,d}{Array} value types to Sdf \n  to indicate attributes that represent UV(W) texture coordinates.\n- UsdUtilsSparseValueWriter and UsdUtilsSparseAttrValueWriter utility classes\n  for authoring attribute values sparsely.\n- UsdGeomPrimvar::GetIndicesAttr API for indexed primvars.\n- UsdGeomPrimvarsAPI schema for accessing primvars, including primvar\n  values inherited down namespace. This is intended as an eventual replacement \n  for the primvar API on UsdGeomImageable.\n- API to UsdShadeMaterial to support render context-specific terminal outputs \n  and core support for three universal render context outputs: surface, \n  displacement, and volume.\n- Time-sampling support for UsdGeomPointInstancer via new methods for\n  computing extents and instance transforms at multiple times.\n- Finalize method for sprims and bprims in Hydra.\n- Time-sampling support in Hydra for geometry instancing.\n- Maya plugin users can specify if colors coming from Maya are linear via the\n  `PIXMAYA_LINEAR_COLORS` environment variable.\n- Support for import/export with new TextureCoordinate role in Maya plugin.\n- Support for cards drawMode in USD reference assembly in Maya plugin.\n- Support for LiveSurface with proxy shapes in Maya plugin.\n- Support for importing UsdSkel schemas and exporting locators and\n  particles in Maya plugin.\n- Option for placing exported data in parent scope in Maya plugin.\n- Initial support for session layer metadata in PxrUsdIn in Katana plugin.\n- Support for reading in UsdLuxCylinderLight schemas in Katana plugin.\n- Gusd Python bindings for Houdini plugin.\n\n### Changed\n- USD now requires TBB version 4.4 Update 6 or later.\n- Removed GLUT dependency for libtiff in build_usd.py. \n  (Issue: [#402](https://www.github.com/PixarAnimationStudios/USD/issues/402))\n- build_usd.py will now use cURL to download dependencies if it's\n  installed in the user's PATH. This can help avoid TLS v1.2 errors\n  when downloading from certain sites. \n  (Issue: [#449](https://www.github.com/PixarAnimationStudios/USD/issues/449))\n- Numerous documentation additions and fixes throughout the codebase.\n- Improved performance of SdfCopySpec and UsdUtils stitching API; one test\n  case showed a 35% speed improvement, from 160s to 118s.\n- SdfLayer now uses the resolved path provided by Ar for a given identifier\n  to determine the layer file format. \n  (Issue: [#144](https://www.github.com/PixarAnimationStudios/USD/issues/144))\n- Simplified API for setting layer data in SdfFileFormat subclasses.\n- Adding or removing invalid sublayers now results in composition errors.\n- UsdStage::CreateNew and CreateInMemory now accept an InitialLoadSet argument.\n  This controls whether new payloads are loaded automatically. \n  (Issue: [#267](https://www.github.com/PixarAnimationStudios/USD/issues/267))\n- UsdStage::ExpandPopulationMask now considers attribute connections.\n- UsdStage::Flatten now authors anchored asset paths in flattened results.\n- UsdTraverseInstanceProxies() now includes instance proxy prims that pass the\n  default predicate instead of all prims.\n- .usdc files now support zero-copy array access, which can significantly\n  improve performance. This feature is supported by all .usdc file\n  versions, but may not be activated for certain files depending on their\n  data alignment. In these cases, users can simply re-export the file \n  to activate zero-copy access.\n\n  Users can set the environment variable `USDC_ENABLE_ZERO_COPY_ARRAYS` to 0 \n  to disable this feature. Users can also track cases where array data is \n  copied due to modifications by setting the environment variable\n  `VT_LOG_STACK_ON_ARRAY_DETACH_COPY` to 1.\n- Other performance improvements in UsdStage composition.\n- API schemas are now classified as either \"applied\" or \"non-applied\". See\n  \"Generating New Schema Classes\" tutorial for more information. \n- Behavior of UsdUtils stitching API can now be customized via callbacks.\n- UsdShadeMaterialBindingAPI now issues a warning when computing resolved\n  material bindings if prims with old \"look:binding\" relationships are found.\n  This can be disabled by setting the environment variable \n  `USD_SHADE_WARN_ON_LOOK_BINDING` to 0.\n- UsdRiMaterialAPI now supports writing ri:surface outputs. ri:bxdf outputs are\n  still written by default, but this can be disabled by setting the environment\n  variable `USD_RI_WRITE_BXDF_OUTPUT` to 0.\n- UsdRiStatementsAPI now supports encoding ri attibutes as primvars. This is\n  disabled by default but can be enabled by setting the environment variable \n  `USDRI_STATEMENTS_WRITE_NEW_ATTR_ENCODING` to 1.\n- Additions and improvements to UsdLux and UsdSkel schemas.\n- Hydra backends that consume full network materials now receive all primvars\n  for all rprims, not just those with bound materials.\n- Several improvements to primvar handling and picking infrastructure in Hydra.\n- Several performance improvements in Hydra, especially for material bindings\n  and scenes with heavy nesting of instances.\n- Ongoing work on Hydra compute framework.\n- Conformed Hydra API to use \"Primvar\" instead of \"PrimVar\".\n- HdMaterialNetwork is now emitted in topological order.\n- Redundant animation data is no longer written during Maya export.\n- Katana plugin now allows parent scope names for materials other than \"Looks\".\n  This can be enabled by setting the `USD_KATANA_ALLOW_CUSTOM_MATERIAL_SCOPES`\n  environment variable to 1.\n- Refactor material loading in Katana plugin so that material locations aren't \n  computed all at once and site ops can run on each location individually.\n- Improved construction of material terminal outputs in Katana plugin.\n- Caching improvements in Houdini plugin to share USD stages between loaded\n  primitives when possible.\n- Improved error handling and reporting in Houdini plugin.\n- USD stage masking in Houdini plugin can now be disabled via \n  `GUSD_STAGEMASK_ENABLE` environment variable.\n- Improved performance when opening USD stages which don't use \"component\" kind\n  in their model hierarchy.\n- Object-level transforms are now written at a higher-level scope than leaf\n  primitives if possible in Houdini plugin.\n\n### Deprecated\n- UsdGeomFaceSetAPI in favor of UsdGeomSubset.\n- UsdGeomCollectionAPI in favor of UsdCollectionAPI.\n\n### Removed\n- tracelite library, which has been replaced with the trace library.\n- Conversions for Python's datetime and dependency on boost::date_time.\n- Several unused classes and functions.\n- usdHydra schemas. This functionality is being replaced with by a registry\n  of shaders in a future release.\n- API for ri:bxdf output on UsdRiMaterialAPI schema. ri:bxdf sources will still\n  be returned by UsdRiMaterialAPI::GetSurface for backwards compatibility.\n\n### Fixed\n- Build errors when using ninja.\n- Error when extracting boost on Windows in build_usd.py. \n  (Issue: [#308](https://www.github.com/PixarAnimationStudios/USD/issues/308))\n- The build now prefers Alembic library specified at cmake time over any\n  Alembic library found in PATH. \n  (Issue: [#409](https://www.github.com/PixarAnimationStudios/USD/issues/409))\n- Several compile-time warnings on clang and other compilers.\n- Bug where list-op valued metadata was not emitted by UsdStage::Flatten.\n- Missing notifications for master prims affected by metadata/property changes.\n- Crash in UsdCollectionAPI::ApplyCollection when given an invalid collection \n  name. (Issue: [#425](https://www.github.com/PixarAnimationStudios/USD/issues/425))\n- Change processing for changes to drawMode property in imaging.\n- Numerous fixes to cards draw mode.\n- Change processing bug when removing nested point instancers.\n- Crashes in pxOsd due to incorrect authored crease data.\n- Bug where usdview would not redraw after switching renderer.\n- Crash in Alembic plugin when reading files with object names beginning \n  with numerals.\n- Change processing bug when reloading an Alembic layer. \n  (Issue: [#429](https://www.github.com/PixarAnimationStudios/USD/issues/429))\n- Several crash bugs in Maya plugin.\n- Material export bug in Maya plugin where the surface terminal was not\n  being exported under the \"ri\" render context. This fix requires re-exporting\n  any material networks exported from Maya using version 0.8.4.\n- Prevent overwriting instance sources that resolve to the same master name\n  in Katana plugin.\n- Path resolution issue in Houdini plugin.\n- Miscellaneous bug fixes in Houdini plugin.\n\n## [0.8.4] - 2018-03-05\n\n### Added\n- The PXR_PLUGINPATH_NAME environment variable name may be changed by\n  specifying `PXR_OVERRIDE_PLUGINPATH_NAME=<name>` when running cmake.\n- Example sendmail plugin for usdview, located at\n  extras/usd/examples/usdviewPlugins/sendMail.py\n- ArDefaultResolverContext, a context object for the ArDefaultResolver asset\n  resolution implementation that allows additional search paths to be used\n  during asset resolution.\n- Users can now query the UsdNotice::ObjectsChanged notice for the changed\n  scene description fields that affected the reported objects.\n- UsdAPISchemaBase base class for all API schemas.\n- All UsdGeomBoundable schemas in usdGeom now have functions for computing\n  extents. These functions are also used when calling the general \n  UsdGeomBoundable::ComputeExtentFromPlugins method.\n- UsdLuxCylinderLight schema.\n- Significant additions to edge and point selection and highlighting \n  capabilities in Hydra.\n- Initial support for UsdSkel bones in usdImaging.\n- Initial support for exporting joints and skin clusters using the UsdSkel\n  schema in the Maya plugin.\n- Documentation for third party plugin code is now included in the\n  doxygen build.\n\n### Changed\n- build_usd.py no longer checks for pyside-uic or boost::python if Python\n  support is disabled, and no longer builds OpenImageIO's Python bindings.\n- Updated moduleDeps.cpp files to only register direct library dependencies.\n  This makes it easier for users to generate their own file for custom schemas.\n- ArDefaultResolver now allows search paths like \"Dir/File.usd\" to be anchored \n  to other paths via AnchorRelativePath. During composition, these asset paths \n  will be resolved relative to the layer where they were authored before\n  falling back to the previous search path behavior.\n- Updates to VtArray and .usdc code in preparation for zero-copy functionality.\n- Inherit and specializes arcs to non-existent prims are no longer considered\n  composition errors.\n- Apply method on API schemas have been moved to UsdAPISchemaBase and now\n  require a UsdPrim. Also improved documentation.\n- Property queries on UsdPrim now accept a predicate for filtering results.\n- UsdPrim::HasAPI now accepts an instance name argument to query if a prim has\n  a particular instance of a multiple-apply API schema has been applied.\n- Adding or removing an inert prim spec no longer causes affected prims to\n  be resynced. These prims are now reported as \"changed info only\" in the\n  corresponding UsdNotice::ObjectsChanged notice.\n- UsdNotice::ObjectsChanged::GetResyncedPaths and GetChangedInfoOnlyPaths now\n  return a custom range object instead of a SdfPathVector.\n- Performance optimizations for querying properties on UsdPrim.\n- Replaced UsdCollectionAPI::AddPrim/RemovePrim with IncludePath/ExcludePath.\n- UsdGeomBoundable::ComputeExtentFromPlugins now accepts an optional \n  transform matrix, which may be used to provide more accurate bounds.\n- UsdGeomBBoxCache now computes extents for all UsdGeomBoundable schemas.\n- Performance optimizations in UsdShadeMaterialBindingAPI.\n- Numerous changes and fixes to UsdSkel schemas.\n- Significantly improved curve rendering in Hydra.\n- Many improvements towards the goal of getting modern UsdShade materials\n  through Hydra to various kinds of backends.\n- Performance improvements to hydra gather phase via multi-threading and other\n  optimizations.\n- Changed complexity options in usdview to prevent users from inadvertently\n  bumping the complexity value too high and hanging the application.\n- Several tweaks and improvements to usdview UI.\n- Refactored Maya/Hydra batch renderer to improve performance for imaging USD\n  proxy shape nodes.\n\n### Removed\n- UsdShadeLook schema. This has been replaced by UsdShadeMaterial.\n  Material bindings authored using the \"look:binding\" relationship are no\n  longer respected.\n\n### Fixed\n- Various typo and compiler warning fixes throughout the codebase.\n- Fixed bug where build_usd.py would not use the CMake generator specified at\n  the command line.\n- Fixed crash in Apply method on API schemas. \n- Fixed several bugs in UsdShadeMaterialBindingAPI::ComputeBoundMaterial.\n- Changing the population mask for a UsdStage now correctly releases resources\n  used by objects that have been excluded from the stage.\n- Fixed quadrangulation bug in Hydra with handling topology with degenerate or \n  hole faces.\n- Fixed patch param refinement for Loop meshes.\n- Several fixes to the nascent Hydra lights pipeline.\n- Fixed bug in the usdExport AlembicChaser in the Maya plugin where primvars \n  that match the primvarprefix do not get exported. They are now exported with \n  constant interpolation, and using _AbcGeomScope is no longer required.\n- Fixed bug in Katana plugin where infinite recursion would occur in pxrUsdIn\n  when sources were outside the scope of the point instancer. \n  (Issue: [#286](https://www.github.com/PixarAnimationStudios/USD/issues/286))\n\n## [0.8.3] - 2018-02-05\n\n### Added\n- Compression in .usdc files for integer arrays and scalar floating point \n  arrays. The latter are compressed if the values are all integers or there \n  are a small number of unique values. In the example Kitchen Set asset on \n  the USD website, the total size of the geometry layers decreased by ~46%, \n  from 25 MB to 14 MB.\n\n  .usdc files with this new compression enabled are marked as version 0.6.0\n  and are not readable by earlier releases. These files are not written by\n  default; this may be enabled by setting the environment variable \n  `USD_WRITE_NEW_USDC_FILES_AS_VERSION` to \"0.6.0\".\n- Ability to record and query API schemas that have been applied to a prim\n  via new Apply method on API schema classes, UsdPrim::GetAppliedSchemas and\n  UsdPrim::HasAPI. Custom API schemas should be updated with these new\n  methods by re-running usdGenSchema.\n- GetUnionedTimeSamples and GetUnionedTimeSamplesInInterval functions for\n  UsdAttribute and UsdAttributeQuery.\n- Ability to offset time for active value clips when using template clip \n  metadata via \"templateActiveOffset\" entry.\n- UsdUtilsGetDirtyLayers for retrieving dirty layers used by a UsdStage.\n- GetTimeSamplesInInterval functions for UsdGeomXformOp, UsdGeomXformable \n  and UsdGeomXformable::XformQuery.\n- UsdShadeMaterialBindingAPI, which provides an interface for binding \n  materials to prims or collections of prims and computing the final bound\n  material for a prim via \"material resolution\".\n- Numerous features and documentation for UsdSkel schema.\n- \"Save Flattened As\" functionality in usdview.\n- Plugin mechanism in usdview that allows users to add custom commands \n  and menus. See new tutorial for more details.\n- Partial support for RenderMan for Maya lights in the Maya plugin.\n- PxrUsdIn.BootstrapMaterialGroup op in Katana plugin for more robustly reading \n  a Looks scope from a .usd file\n\n### Changed\n- Build now supports versioned OpenEXR and IlmBase shared libraries. \n  (Issue: [#71](https://www.github.com/PixarAnimationStudios/USD/issues/71))\n- Layer identifiers may now include '?' characters. \n  (Issue: [#289](https://www.github.com/PixarAnimationStudios/USD/issues/289))\n- UsdStage preserves payload load state when processing instancing changes.\n- UsdListPosition enum values now specify the \"append\" or \"prepend\" list as \n  well as a position to provide users with finer-grained control.\n- The various Add... methods in Usd that take a UsdListPosition argument\n  now author entries to the back of the \"prepend\" list by default if no\n  \"explicit\" list exists. The old behavior of authoring to the (now \n  deprecated) \"added\" list can be restored by setting the environment\n  variable `USD_AUTHOR_OLD_STYLE_ADD` to 1.\n- Standard schema conventions are more strictly-enforced in usdGenSchema.\n- UsdCollectionAPI::AddCollection has been renamed ApplyCollection.\n- Enabled authoring of new UsdShade encoding by default. Authoring the old\n  (now deprecated) encoding can be restored by setting the environment variable \n  `USD_SHADE_WRITE_NEW_ENCODING` to 0.\n- The \"joints\" relationship on the UsdSkelSkeleton, UsdSkelPackedJointAnimation,\n  and UsdSkelBinding API schemas is now a token array-valued attribute.\n- UsdRiStatements API schema has been renamed to UsdRiStatementsAPI.\n- sdfdump utility now shows all specs in a layer, even if they have no fields.\n- Various improvements to Hydra reprs and geometry processing.\n- More improvements to Hydra's handling of invalid data.\n- Ongoing work to prepare Hydra to fully consume UsdShade schemas.\n- Refactored GL dependency out of Hd library.\n- Built-in variables in usdview interpreter are now accessed through a separate\n  usdviewApi object to avoid name collisions.\n- Performance improvements in Maya plugin when in Viewport 2.0.\n- Inclusion of info.usd.opArgs in Katana plugin is now parameterized; it will\n  be authored to the location where a \"setOpArgsToInfo\" attribute exists and is\n  set to 1.\n\n### Deprecated\n- The \"added\" list for list ops in scene description is deprecated in favor \n  of the \"prepend\" and \"append\" lists.\n\n### Removed\n- GfCamera::ZUp and GfCamera::YUp.\n- UsdSkelJoint schema.\n\n### Fixed\n- build_usd.py ensures OpenImageIO build does not pick up OpenEXR from other \n  locations, which could have led to runtime errors. \n  (Issue: [#315](https://www.github.com/PixarAnimationStudios/USD/issues/315), \n  Issue: [#325](https://www.github.com/PixarAnimationStudios/USD/issues/325))\n- Headers are now installed properly for monolithic builds. \n  (Issue: [#277](https://www.github.com/PixarAnimationStudios/USD/issues/277))\n- Original install location will no longer be searched for plugins after\n  relocating builds. \n  (Issue: [#363](https://www.github.com/PixarAnimationStudios/USD/issues/363))\n- Fixed thread-safety issue where plugins with the same name but in different\n  locations could be loaded twice. \n  (Issue: [#358](https://www.github.com/PixarAnimationStudios/USD/issues/358))\n- Fixed bug where layers that were muted via SdfLayer::AddToMutedLayers before\n  they were first opened could not be unmuted.\n- Fixed bug in usdGenSchema where changing an existing property's type in a \n  schema would not be reflected in the generated code.\n- Fixed bug where a large (> 1460) number of variants in a .usda file would\n  cause a \"memory exhausted\" error when parsing that file.\n- Fixed broken pread mode for .usdc files.\n- Fixed bug that caused UsdStage::CreateNew to crash on Windows. \n  (Issue: [#364](https://www.github.com/PixarAnimationStudios/USD/issues/364))\n- Fixed bug when using a UsdStagePopulationMask with prims beneath instances. \n  (Issue: [#312](https://www.github.com/PixarAnimationStudios/USD/issues/312))\n- Fixed bug where setting float-valued attributes to +inf in Python would fail.\n- UsdAttribute::GetTimeSamplesInInterval now properly accounts for layer \n  offsets. (Issue: [#352](https://www.github.com/PixarAnimationStudios/USD/issues/352))\n- Internal references or empty asset paths no longer cause errors in \n  UsdUtilsFlattenLayerStack.\n- Fixed bug where UsdGeomPrimvar::GetTimeSamples would miss time samples for\n  indexed primvars.\n- Disabled tiny prim culling in Hydra by default. It can be re-enabled by\n  setting the environment variable `HD_ENABLE_TINY_PRIM_CULLING` to 1.\n  (Issue: [#314](https://www.github.com/PixarAnimationStudios/USD/issues/314))\n- Fixed issues with using non-file-backed asset paths in various utilities\n  and Maya and Katana plugins.\n- Houdini plugin explicitly links against required libraries to avoid runtime\n  errors with Houdini 16.5.\n- Fixed several bugs with point instancing support in Houdini plugin.\n\n## [0.8.2] - 2017-12-01\n\nRelease 0.8.2 increments the file format version for .usdc files. New .usdc\nfiles created in this release will not be readable by earlier releases. See\nbelow for more details.\n\n### Added\n- SdfCopySpec for copying scene description specs in layers.\n- Usd.GetVersion() for retrieving USD version in Python \n  (Issue: [#306](https://www.github.com/PixarAnimationStudios/USD/issues/306))\n- UsdProperty::FlattenTo for copying a UsdProperty's resolved metadata/values.\n- IsTyped and IsConcrete schema queries on UsdSchemaRegistry and UsdSchemaBase. \n- UsdCollectionAPI schema for representing collections of objects. This schema\n  is more expressive than UsdGeomCollectionAPI and can represent large numbers\n  of objects compactly.\n- Utility functions in UsdUtils for determining compact representations of\n  objects for UsdCollectionAPI.\n- UsdUtilsCoalescingDiagnosticDelegate, a Tf diagnostic delegate that provides\n  condensed output for diagnostic messages.\n- UsdUtilsFlattenLayerStack for flattening a UsdStage's layer stack into a\n  single layer, as well as a --flattenLayerStack option to usdcat.\n- Support for named clip sets for clip stitching API in UsdUtils.\n- Schema for cards rendering in UsdGeomModelAPI and imaging support. This\n  provides a lightweight way to collapse model hierarchies into simple\n  geometry for visualization of large scenes.\n- Ability to encode familyType on owners of families of UsdGeomSubsets.\n- Size properties for UsdLuxDiskLight, UsdLuxSphereLight, and UsdLuxRectLight. \n  (Issue: [#290](https://www.github.com/PixarAnimationStudios/USD/issues/290))\n- Support for computing bounding boxes for UsdGeomPointInstancer instances \n  using UsdGeomBBoxCache.\n- Support for residual GPU computations in Hydra.\n- Sheer display mode in Hydra, a 'see-through' display mode akin to the\n  mesh being covered in a sheer mesh fabric instead of its regular surface.\n  Implemented as a regular grid stipple pattern of the surface at 20% opacity.\n- Testing framework for usdview.\n- PxrUsdMayaXformStack for representing transform stacks in the Maya plugin.\n- Support for exporting Maya instancers to UsdGeomPointInstancers in the Maya\n  plugin.\n- Support for exporting groups of objects with the same material binding as\n  collections encoded with UsdCollectionAPI in the Maya plugin.\n- Support for vec4 primvars in the Katana plugin.\n- Support for point instancers with varying topology that don't have authored \n  velocities in the Katana plugin.\n- Support for importing collections encoded with new UsdCollectionAPI schema\n  in the Katana plugin.\n- Support for overriding data on a subset of point instancer instances in\n  the Houdini plugin.\n\n### Changed\n- Build system now checks that the compiler being used supports 64-bit builds. \n- Tf diagnostic warnings and status messages issued in secondary threads are\n  no longer printed to the terminal.\n- Multiple delegates may now be registered with the Tf diagnostic system.\n- SdfLayer::RemoveInertSceneDescription removes inert overs in variants.\n- When saving a new .usdc file over an existing file, data is first saved to a \n  temporary file then renamed to the destination file. This provides some \n  protection for other processes that were reading the old file.\n- Compression for structural sections in .usdc files is now enabled by default.\n  New .usdc files will be marked as version 0.4.0 instead of 0.3.0 to \n  accommodate a bug fix described below. This means that any new .usdc files \n  created in this release will not be readable by previous USD releases.\n\n  Users can disable the compression functionality by setting the environment\n  variable `USD_WRITE_NEW_USDC_FILES_AS_VERSION` to \"0.0.1\". This will ensure \n  new .usdc files will be readable in older releases.\n\n- UsdStage now uses the composed layer offset instead of its inverse when\n  mapping times in layers to the stage. For example, to shift the time samples\n  in a referenced layer stack forward by 10, users previously authored an\n  offset of -10. Under the new behavior, users need to author an offset of 10\n  instead. \n\n  Users can revert to the old behavior by setting the environment variable\n  `USD_USE_INVERSE_LAYER_OFFSET` to 1. This will be deprecated in a future \n  release.\n\n- UsdStage now allows a prim to be loaded without loading its descendants via\n  a new UsdLoadPolicy argument supplied to UsdStage::Load and LoadAndUnload.\n- UsdInherits, UsdSpecializes, and UsdReferences now map non-root prim paths\n  to the namespace of the edit target.\n- UsdAttribute::GetTimeSamplesInInterval now supports open/finite end points.\n- UsdClipsAPI now authors the dictionary-style clips metadata introduced in\n  release 0.7.6 by default.\n- Schemas may now define fallback values for the majority of metadata fields,\n  including custom metadata fields.\n- Schemas may now have more than 256 tokens defined.\n- usdedit now checks `USD_EDITOR` environment variable first when determining\n  which editor to use.\n- Ongoing refactoring to move code from hd to hdSt in preparation for material\n  support in Hydra and use of Hydra in other renderer backends.\n- Several performance optimizations in Hydra and UsdImaging.\n- usdview now uses a new JSON-based format for its settings file. Settings\n  files from older releases will be ignored.\n- Several changes to provide better support for Viewport 2.0 in Maya plugin.\n- Enum attributes in Maya now have their integer values exported to USD \n  instead of their descriptive names.\n- Improved attribute transfer on USD Unpack node in Houdini plugin.\n- usdvisible and usdactive attributes in Houdini plugin are now integers\n  instead of strings.\n- Several changes to Houdini plugin for compatibility with Houdini 16.5\n  and improved HDK usage.\n\n### Deprecated\n- UsdGeomCollectionAPI, in favor of new UsdCollectionAPI.\n\n### Removed\n- TfDiagnosticNotice. The Tf diagnostic system no longer emits notices; \n  consumers relying on these notices should use diagnostic delegates instead.\n- UsdGeomPointInstancer prototypeDrawMode attribute. Consumers should use\n  the new drawMode attributes on UsdGeomModelAPI instead.\n\n### Fixed\n- Issue where users were forced to define certain preprocessor macros in \n  order to build code against USD. In particular, an issue introduced in 0.8.1\n  caused users who did not #define PXR_ENABLE_PYTHON_SUPPORT to run into odd\n  errors at runtime. \n  (Issue: [#304](https://www.github.com/PixarAnimationStudios/USD/issues/304))\n- Bug that caused invalid .usdc files to be written. This affected all files\n  with version 0.3.0; however, this file version was not enabled by default in\n  release 0.8.1 and would only affect users who had explicitly enabled the\n  new version via the `USD_WRITE_NEW_USDC_FILES_AS_VERSION` environment setting.\n- Precision loss when writing time sample times to .usda files.\n- Performance issue in UsdStage where memory would still be consumed by \n  child prims after their parent prim had been deactivated.\n- Bug that caused UsdStage::ExpandPopulationMask to add invalid paths.\n- Bug that caused UsdObject::GetMetadata to not fill in resolved paths for\n  asset-valued metadata.\n- Bug where layer offsets were incorrectly applied when authoring time samples.\n- Bug in UsdUtilsStageCache that led to crashes during static destruction.\n- Unpickable objects now act as occluders during picking in Hydra.\n- Bug that caused usdview to stop drawing after \"Reopen Stage\" or \"Open Stage\".\n- Bug that caused usdview to not play all frames if the step size was changed.\n  (Issue: [#321](https://www.github.com/PixarAnimationStudios/USD/issues/321))\n- Several performance and UI issues in usdview.\n- Crash in Maya plugin with nested assemblies and variant set selections.\n  (Issue: [#288](https://www.github.com/PixarAnimationStudios/USD/issues/288))\n- Bug in Maya plugin where exporting over a previously-imported layer failed.\n- Bug in Maya plugin that caused lights to flip between directional and \n  non-directional in legacy viewport.\n- Various issues that prevented UsdKatana Python module from being imported.\n  (Issue: [#323](https://www.github.com/PixarAnimationStudios/USD/issues/323))\n- Material bindings above point instancer prototypes are now preserved in \n  the Katana plugin.\n- Reworked how USD masters/sources are built in the Katana plugin so \n  that material bindings use the correct Katana paths.\n- Hang in Houdini plugin when importing from variant paths. \n  (Issue: [#309](https://www.github.com/PixarAnimationStudios/USD/issues/309))\n\n## [0.8.1] - 2017-10-02\n\n### Added\n- \"append\" and \"prepend\" operations for SdfListOp-valued fields.\n  Scene description layers that contain these new operations will not be\n  readable by earlier USD releases.\n- `--validate` argument to sdfdump for checking file validity.\n- Support for sub-root references and payloads.\n- Ability to specify amount of data to prefetch when reading a .usdc\n  file via the `USDC_MMAP_PREFETCH_KB` environment variable.\n- Debugging output that shows memory mapping information for .usdc files.\n  This can be enabled via the `USDC_DUMP_PAGE_MAPS` environment variable.\n- UsdGeomMotionAPI schema.\n- UsdGeomSubset schema for representing a subset of a geometric prim.\n- Hydra GL support for displacement shaders\n- Initial experimental support for PySide2 in usdview. By default, the \n  build will search for PySide, then PySide2. Alternatively, users may specify \n  `PYSIDE_USE_PYSIDE2=TRUE` to CMake to force the use of PySide2.\n- Ability to view connections and relationship targets in usdview.\n- Support for camera clipping range in Alembic plugin.\n- Support for array attributes with \"RfM Shaders\" shading mode in Maya exporter.\n- Support for angularVelocities attribute on point instancers in Katana plugin.\n- Filtered view and improved selection to Tree View panel in Houdini plugin.\n- Support for prototype offsets in point instancer exports in Houdini plugin.\n\n### Changed\n- Made Python dependency optional. Python support is enabled by default but\n  may be disabled by specifying `PXR_ENABLE_PYTHON_SUPPORT=FALSE` to CMake\n  or `--no-python` to build_usd.py.\n- build_usd.py now requires that users install PyOpenGL manually. \n  (Issue: [#264](https://www.github.com/PixarAnimationStudios/USD/issues/264))\n- Replaced addedOrExplicitItems attribute on Sdf.*ListOp in Python with\n  GetAddedOrExplicitItems method.\n- Renamed Append... methods on composition arc APIs (e.g. UsdReferences, \n  UsdInherits) to Add... and added a position argument to support new\n  \"append\" and \"prepend\" operations. \n\n  Calling these functions with the default UsdListPositionTempDefault argument\n  will author \"add\" operations, maintaining the previous behavior. We anticipate\n  removing UsdListPositionTempDefault and replacing it with UsdListPositionFront\n  so that \"prepend\" operations will be authored by default in 0.8.2. Users may \n  enable this behavior now by setting the `USD_AUTHOR_OLD_STYLE_ADD` environment\n  variable to false.\n\n- UsdStage now issues warnings for invalid layers it encounters instead of\n  errors, which cause exceptions in Python.\n- Code generation templates and schema.usda files used by usdGenSchema are \n  now installed as part of the build. Schemas can now use asset paths like\n  \"usdGeom/schema.usda\" or \"usdShade/schema.usda\" instead of absolute paths\n  to add installed schemas as sublayers. \n  (Issue: [#158](https://www.github.com/PixarAnimationStudios/USD/issues/158), \n   Issue: [#211](https://www.github.com/PixarAnimationStudios/USD/issues/211))\n- Improved USD scenegraph instancing to allow more sharing of assets with\n  inherits or specializes arcs. In one large example, this decreased stage load\n  time by ~60%, stage memory usage by ~65%, and time to first image in usdview \n  by ~20%.\n- Several optimizations to reduce I/O operations for .usda and .usdc files.\n- Add support for compressed structural sections in .usdc files. This can\n  significantly decrease file sizes for files that are dominated by prim and\n  property hierarchy; one production shading file decreased in size by ~94%,\n  from 21 MB to 1.3 MB.\n\n  Compressed files are marked as version 0.3.0 and are not readable by earlier \n  USD releases. To help with transition, USD will not write these compressed \n  files by default until a future release. Users may enable this feature now \n  by setting the `USD_WRITE_NEW_USDC_FILES_AS_VERSION` environment variable \n  to \"0.3.0\". We plan to add compression for geometry data and time samples\n  in a future release.\n\n- UsdUtilsExtractExternalReferences now checks for references to external files\n  in property values and metadata.\n- Increased precision for rotations attribute in UsdSkelPackedJointAnimation \n  schema to 32-bit.\n- UsdGeomPrimvar now allows primvar names with arbitrarily-nested namespaces.\n- Sizeable refactor in Hydra to support sprims more like rprims in anticipation \n  of future lights and material support.\n- Hydra no longer syncs rprims that are not visible.\n- Several performance and stability fixes to point instancer handling in Hydra.\n- \"Reload All Layers\" in usdview will try not to reset the camera or timeline.\n- Numerous other improvements to usdview.\n- The Alembic reader now converts single samples for properties in .abc files\n  to single time samples in USD, instead of default values.\n- Updated required Katana version to Katana 2.5v1.\n- Improved bounds computations for point instancers in Katana plugin\n- Account for motion sample time overrides when computing bounding boxes in\n  Katana plugin.\n- Improved stage cache in Houdini plugin, which can have significantly\n  better performance in some circumstances.\n- Improved handling of instanced USD primitives in Houdini plugin.\n\n### Deprecated\n- UsdGeomFaceSetAPI and related API in usdShade and usdLux in favor of new \n  UsdGeomSubset schema.\n\n### Removed\n- UsdStage::Close.\n- Camera zUp-related functionality\n- Support for faceVaryingInterpolateBoundary in UsdGeomMesh schema.\n  See faceVaryingLinearInterpolation instead.\n\n### Fixed\n- Bug in build_usd.py where specifying `--no-embree` did the opposite.\n  (Issue: [#276](https://www.github.com/PixarAnimationStudios/USD/issues/276))\n- Bug in build_usd.py where specifying `--force-all` or `--force` on a\n  Python dependency would cause the script to error out early. \n  (Issue: [#263](https://www.github.com/PixarAnimationStudios/USD/issues/263))\n- Race condition between TfType consumers and TfType registry initialization.\n- Composition bug where references with the same prim path and relative asset\n  path would be considered duplicates even when anchoring location differed.\n- Composition bug where payloads on arcs requiring ancestral opinions could\n  result in errors.\n- Change processing bug when removing sublayers specified by search path.\n- Stack overflow crash when reading .usdc files due to excessive recursion.\n- Possible crash in Hydra when using basis curves.\n- Memory leak in Hydra task controller.\n- Build issue for Alembic plugin with HDF5 support disabled when\n  precompiled headers are enabled (which is the default on Windows).\n- Several other bugs in Alembic reader.\n- Performance issue in Katana plugin due to inefficiency in UsdShadeNodeGraph.\n\n## [0.8.0] - 2017-07-29\n\n### Added\n- Added option to build_usd.py for building monolithic shared library\n  and for building new sample Embree plugin.\n- Added --mask option to usdcat, matching the --mask option in usdview.\n- Added CPU-side external computation support to Hydra.\n- Added Embree backend to serve as an example of how to add renderer \n  plugins to Hydra.\n- Added camera gates to usdview.\n- Added ability to Houdini plugin to set active state via usdactive \n  attribute and to write static data to default time via usdwritestatictopology,\n  usdwritestaticprimvars, and usdwritestaticgeo attributes.\n- Added UsdExportAttributes hda to Houdini plugin for setting primitive and \n  detail attributes which control various USD attributes or metadata.\n\n### Changed\n- Restored export of CMake targets from shared library builds.\n- Asset paths in .usda files may now contain any printable character.\n  (Issue: [#73](https://www.github.com/PixarAnimationStudios/USD/issues/73))\n- Legacy special behavior for variant sets named \"standin\" has been disabled\n  by default.\n- Interpolation is now applied to time samples from clips when no sample\n  exists at a specified clip time.\n- Removed deprecated UsdShadePShader schema.\n- Enabled vertex primvar sharing in Hydra. Hydra can now use significantly \n  less GPU memory.\n- Many internal performance improvements to Hydra.\n- usdview HUD now shows the backend renderer plugin used by Hydra\n- Wireframe drawing now ignores opacity.\n- Katana plugin properly interprets schema-supported triangle subdivision rule \n  when meshes are read in and rendered.\n\n### Fixed\n- Fixed several issues in build_usd.py related to building dependencies.\n  (Issue: [#225](https://www.github.com/PixarAnimationStudios/USD/issues/225), \n   Issue: [#230](https://www.github.com/PixarAnimationStudios/USD/issues/230), \n   Issue: [#234](https://www.github.com/PixarAnimationStudios/USD/issues/234))\n- Fixed bug where UsdGeomPrimvar::IsIndexed() would not work for attributes\n  with only authored time samples. \n  (Issue: [#238](https://www.github.com/PixarAnimationStudios/USD/issues/238))\n- Fixed small platform inconsistencies for Windows in Hydra.\n- Fixed crash in Katana plugin when using point instancers that did not have\n  scales or orientations specified. \n  (Issue: [#239](https://www.github.com/PixarAnimationStudios/USD/issues/239))\n- Fixed issue in Houdini plugin where the \"w\" attribute was not converted\n  to the \"angularVelocities\" attribute for point instancer prims.\n\t\n## [0.7.6] - 2017-06-30\n\n### Added\n- Added `build_scripts/build_usd.py` for building USD and its dependencies.\n- Added support for building static libraries or a single monolithic\n  shared library. See [BUILDING.md](BUILDING.md#linker-options) for more\n  details.\n- Added support for color spaces to Usd. Color configuration and management \n  system can be specified on a UsdStage (via the stage's root layer), and \n  colorSpace metadata is available on any UsdAttribute.\n- Added clip set functionality to Usd. This provides the ability to specify \n  multiple sets of value clips on the same prim, which allows users to compose \n  different sets of clips together. See UsdClipsAPI for more details.\n- Added initial UsdLux schemas for representing interchangeable lights and \n  related concepts, and UsdRi schemas for Renderman-specific extensions. \n  UsdImaging/Hydra support will be coming in a future release.\n- Added ability to specify smooth triangle subdivision scheme for catmullClark\n  surfaces in UsdGeomMesh and imaging support in Hydra.\n- Added backdrops for node layout description in UsdUI.\n- Added support for sharing immutable primvar buffers to Hydra.\n  This can greatly reduce the memory required on the GPU when displaying\n  typical scenes. It is currently experimental and disabled by default. It\n  can be enabled for testing with the environment variable\n  `HD_ENABLE_SHARED_VERTEX_PRIMVAR`.\n- Added support for uniform primvars for basis curves in Hydra.\n- Added ability to Alembic plugin to control number of Ogawa streams used for \n  each opened archive via the environment variable `USD_ABC_NUM_OGAWA_STREAMS`,\n  which defaults to 4.\n- Added Katana plugin support for reading UsdLux lights.\n- Added `--camera` command line argument to usdview to specify the initial \n  camera to use for viewing.\n- Added display of instance index and (if authored) instance ID to rollover\n  prim info in usdview. \n- Added initial version of Houdini plugin.\n\n### Changed\n\n- Removed unnecessary dependency on OpenImageIO binaries.\n- Removed unnecessary dependency on boost::iostreams.\n- Made HDF5 backend for Alembic plugin optional. HDF5 support is enabled by \n  default but may be disabled by specifying `PXR_ENABLE_HDF5_SUPPORT=FALSE`\n  to CMake.\n- Metadata fields for value clips feature in UsdStage (e.g. clipAssetPaths,\n  clipTimes, etc.) have been deprecated in favor of the new clips metadata\n  dictionary. Authoring APIs on UsdClipsAPI still write out the deprecated\n  metadata unless the environment variable `USD_AUTHOR_LEGACY_CLIPS` is set \n  to 0. This will be disabled in a future release.\n- When using value clips, Usd will now report time samples at each time \n  authored in the clip times metadata.\n- Completed support for encoding UsdShade data using UsdAttribute connections.\n  Authoring APIs still write out the old encoding, unless the environment \n  variable `USD_SHADE_WRITE_NEW_ENCODING` is set to 1. This will be enabled\n  in a future release.\n- Removed support for deprecated UsdShade schemas UsdShadeParameter and\n  UsdShadeInterfaceAttribute, which have been superseded by UsdShadeInput.\n- Removed deprecated UsdRiLookAPI, which has been replaced by UsdRiMaterialAPI.\n- Removed deprecated Hydra scene delegate APIs.\n- Significant refactoring and refinements to allow multiple backends to be\n  plugged in to Hydra.\n- UsdImaging now pushes GL_DEPTH_BUFFER_BIT to avoid any potential state\n  pollution issues when integrating it with other renderers. \n- Improved error handling in Hydra for:\n  - Invalid point instancer input\n  - Inconsistent displayColor and displayOpacity primvars\n  - Direct instances of imageable prims\n- usdview more gracefully handles the situation where it doesn't get a\n  valid GL context (e.g., due to limited resources on the GPU).\n- Improved how edits are handled on assembly nodes in the Maya plugin.\n- Improved UsdGeomPointInstancer support in the Katana plugin:\n  - Overhauled methods for computing instance transforms and aggregate bounds. \n  - Backward motion and multi-sampled point instancer positions, orientations, \n    and scales are now supported.\n  - Removed opArgs attributes that were used for configuring the reader's \n    behavior.\n  - More robust primvar transfer to point instancer's Katana locations.\n  - Restructured prototype building logic to preserve material bindings\n    when creating prototype prims.\n- Numerous changes and fixes for Mac and Windows ports.\n\n### Fixed\n\n- Fixed issue that caused IDEs and other tools to find headers in the build\n  directories rather than the source directories.\n- Fixed race condition in TfType.\n- Fixed long-standing memory corruption bug in Pcp that surfaced when \n  building on MacOS with XCode 8.3.2.\n- Fixed potential deadlocks in Usd and Pcp due to issues with TBB task group \n  isolation.\n- Fixed bug where UsdStage::Flatten was not preserving attribute connections.\n- Fixed infinite loop on glGetError in the presence of an invalid GL context.\n  (Issue: [#198](https://www.github.com/PixarAnimationStudios/USD/issues/198))\n- Fixed build issues that caused the Maya plugin to be unusable after building\n  on MacOS.\n\n## [0.7.5] - 2017-05-01\n\nC++ namespaces are now enabled by default. The `PXR_ENABLE_NAMESPACES` CMake\noption may be used to disable namespaces if needed.\n\nThis release adds initial experimental support for building the USD core\nlibraries on Windows.\n\n### Added\n- Added ability to build doxygen documentation. See\n  [BUILDING.md](BUILDING.md#documentation) for more details.\n- Added support for pre-compiled headers. By default, this is disabled\n  for Linux and Mac builds and enabled for Windows builds. This may be\n  configured with the `PXR_ENABLE_PRECOMPILED_HEADERS` CMake option.  \n- Added many unit tests for core libraries\n- Added UsdStage::Save and UsdStage::SaveSessionLayers\n- Added attribute connection feature that allows consumers to describe\n  connections between an attribute and other prims and properties.\n- Added instance proxy feature that allows consumers to interact with\n  objects on a UsdStage as if scenegraph instancing were not in use while\n  retaining the performance benefits of instancing.\n- Plugins providing Boundable schema types can now register functions for\n  computing extents. This allows code in the USD core to compute extents for\n  prims with types provided by external schemas.\n- Added support for specializes arcs to usdShade.\n- Added UsdUISceneGraphPrimAPI for representing prim display properties.\n- Added `HD_DISABLE_TINY_PRIM_CULLING` flag for `TF_DEBUG` to make it easier\n  to turn off tiny prim culling for debugging.\n- Added support for generic metadata to GLSLFX, allowing hardware shaders to\n  pass information to downstream rendering code.\n- Added ability to adjust basic material properties in usdview.\n- Plugins can now register MayaPrimWriter subclasses for exporting Maya \n  nodes to USD prims.\n- Added ability to override default motion data (sample times, current time, \n  shutter open/close) on a per-scope basis in Katana plugin. Users can author\n  these overrides by modifying the global graph state, then decide to use\n  the default motion values with or without these overrides applied.\n\n### Changed\n- Removed OpenEXR dependency from core libraries. Note that OpenEXR is still\n  required for imaging.\n- Made Ptex dependency optional. It is only required if Ptex support for\n  imaging is enabled. This is on by default, but can be disabled by specifying\n  `PXR_ENABLE_PTEX_SUPPORT=FALSE` to CMake.\n- Cleaned up and expanded doxygen documentation:\n  - Added documentation for value clips and scenegraph instancing USD features.\n  - Enabled XML generation for external tools\n  - Fixed invalid tags and formatting in several places\n- UsdTreeIterator has been replaced by UsdPrimRange, which provides \n  container-like semantics in C++ (e.g., the ability to use them in range-based\n  for loops).\n- Removed UsdPrim::GetPayload API\n- UsdRelationship and UsdAttribute will no longer forward target/connection\n  paths that point to objects within instances to objects in master prims.\n  Users can use the new instance proxy functionality to work with these paths\n  instead.\n- Relationships belonging to prims in instances that point to the root of the\n  instance no longer cause errors.\n- Value clip metadata can now be sparsely overridden across composition arcs.\n- Deprecated shading property schemas UsdShadeParameter and \n  UsdShadeInterfaceAttribute. These are replaced by UsdShadeInput, which can\n  represent both input parameters on shaders and interface inputs on node\n  graphs.\n- The `--compose` command line parameter for usddiff is now `--flatten`\n- Numerous cleanup changes for Hydra API. In particular:\n  - HdEngine::Draw has been retired in favor of HdEngine::Execute.\n  - HdSceneDelegate::IsInCollection has been deprecated in favor of render-tag\n    based API.\n- Meshes with subdivisionScheme = none will no longer be bilinearly subdivided.\n- usdview now displays prim hierarchies beneath instances inline in the \n  browser. The \"Jump to Master\" command has been removed in favor of this\n  new functionality.\n- The default specular response in usdview has been reduced by a factor of 5.\n- The Maya plugin now excludes attributes during import if they are tagged\n  with customData specifying them as generated.\n- Numerous changes for ongoing Mac and Windows port efforts.\n- Changed scoping of built-out point instancer prototypes in Katana plugin\n  so that their hierarchy more closely matches the original USD hierarchy.\n\n### Fixed\n- Added workaround to avoid redefined \"_XOPEN_SOURCE\" and \"_POSIX_C_SOURCE\" \n  macro warnings due to Python includes on Linux. \n  (Issue: [#1](https://www.github.com/PixarAnimationStudios/USD/issues/1))\n- Fixed issue where code would be generated directly into the install location \n  when running cmake, interfering with the use of make's DESTDIR functionality.\n  (Issue: [#84](https://www.github.com/PixarAnimationStudios/USD/issues/84))\n- Fixed memory leak when converting Python tuples to C++ GfVec objects.\n- Fixed thread-safety issue with `PCP_PRIM_INDEX` and `PCP_PRIM_INDEX_GRAPHS`\n  `TF_DEBUG` flags. \n  (Issue: [#157](https://www.github.com/PixarAnimationStudios/USD/issues/157))\n- Fixed invalid memory access bug in Pcp\n- Fixed memory leak when saving .usdc files.\n- Fixed bug with removing an attribute's last time sample in a .usdc file.\n- Fixed bug where instance prims with locally-defined variants would incorrectly\n  share the same master prim.\n- Reader-writer locks are now used for various registry to improve performance.\n- Improved speed of adding an empty sublayer to an opened stage. In one large\n  test case, time to add an empty sublayer went from ~30 seconds to ~5 seconds.\n- Fixed issues with opening .usda files and files larger than 4GB on Windows.\n  (Issue: [#189](https://www.github.com/PixarAnimationStudios/USD/issues/189))\n- Fixed backwards compatibility issues with UsdShadeInput and \n  UsdShadeConnectableAPI.\n- Memory footprint has been significantly reduced in Hydra's adjacency tables\n  for subdivs that contain vertices of high valence.\n- Fixed crash in imaging due to invalid textures.\n- Fixed shadow banding artifacts when using vertex color with basis curves.\n- Fixed buffer overrun when using GPU smooth normals.\n- Fixed issue in Maya plugin where multiple assemblies that reference the\n  same file might all be affected by the edits of one particular assembly \n  when viewing them via a proxy.\n- Fixed issue in Maya plugin where path resolution was being done by the\n  plugin itself rather than deferring to Usd and Sdf.\n\n## [0.7.4] - 2017-03-03\n\nUSD now supports C++ namespaces. They are disabled by default in this release\nto ease transition, but we anticipate enabling them by default in the next \nrelease. \n\nSpecify the `PXR_ENABLE_NAMESPACES` CMake option to enable namespaces.\nSee documentation in [BUILDING.md](BUILDING.md#c-namespace-configuration) for more details.\n\n### Added\n- Added GfHalf type to represent half-precision numeric values. This type \n  is currently an alias to the \"half\" type supplied by the ilmbase library \n  USD is built against. This will be changed in an upcoming release to point \n  to a version of \"half\" that is included in the USD codebase, which will\n  allow us to remove the USD core's dependency on ilmbase.\n- Added UsdShadeInput class to represent shader or NodeGraph input.\n  These are encoded as attributes in the \"inputs:\" namespace. By default, \n  this encoding will not be written out via UsdShadeConnectableAPI unless \n  the 'USD_SHADE_WRITE_NEW_ENCODING' environment variable is set.\n- Added \"Composition\" tab to usdview that allows users to inspect the \n  composition structure of a selected prim.\n- Added tests for Hdx. These tests are currently not run as part of the unit \n  test suite, but are being included for users to try on their platforms and \n  to serve as example code.\n- Added icons for the USD assemblies in Maya.\n- Added initial implementation of Katana plugin for reading \n  UsdGeomPointInstancer locations. \n\n### Changed\n- CMake module now additionally looks for the pyside-uic binary under the name \n  pyside-uic-2.7 to accommodate package managers on OSX.\n- Removed GLUT dependency.\n- Removed double-conversion dependency.\n- Modified all uses of \"half\" type from ilmbase to use new GfHalf type.\n- Renamed UsdShadeSubgraph to UsdShadeNodeGraph to conform with final\n  MaterialX terminology.\n- Numerous changes for in-progress work on refactoring Hydra to support render \n  delegates.\n- Updated UI in usdview to display legends for text coloring in collapsible \n  panes and to include more information.\n- The import UI in the Maya plugin now enables reading of anim data by default.\n- Updated API in Maya plugin that referred to \"look\" to \"material\".\n- Numerous changes for ongoing Mac and Windows porting efforts.\n\n### Fixed\n- Fixed several issues when building with C++ namespaces enabled.\n- Fixed bug with selection highlighting for instanced prims in usdview.\n- Fixed crash that occurred when an invalid color primvar was encountered while\n  using usdview's \"simple\" renderer.\n- Fixed issue with TF_REGISTRY_DEFINE* macros that caused build failures\n  for the Maya plugin on OSX. \n  (Issue: [#162](https://www.github.com/PixarAnimationStudios/USD/issues/162))\n\n## [0.7.3] - 2017-02-05\n\n### Added\n- Added support for RelWithDebInfo and MinSizeRel release types.\n- Added initial support for C++ namespaces. This feature is \n  currently experimental but can be enabled by specifying the \n  `PXR_ENABLE_NAMESPACES` option to CMake. See documentation in\n  BUILDING.md for more details.\n- Added population masking to UsdStage. \n  - Consumers can specify what parts of a stage to populate and use\n    to reduce resources used by the stage.\n  - usdview now has a --mask option allowing users to view just the\n    specified portion of a stage.\n- Added UsdPrim API for collecting relationship targets authored \n  in a given prim subtree.\n- Added UsdShade API to allow creating and connecting outputs\n  on subgraphs and shaders instead of terminals.\n- Added support for bool shader parameters in Hydra. \n  (Issue: [#104](https://www.github.com/PixarAnimationStudios/USD/issues/104))\n- Added ability to independently toggle display of geometry with\n  purpose=proxy in usdview.\n- Added initial set of unit tests for pxrUsd library in the Maya plugin.\n- The Maya plugin now supports multi-sampling of frames during export.\n- Attributes in Maya may now be tagged to be converted from double\n  to single precision during export.\n- Alembic tagging for attributes in Maya are now respected during \n  export. This includes support for primvars and custom prefixes.\n- Added support for playing back animation in assemblies via Hydra\n  when the Playback representation is activated in Maya.\n- Added support for reading material references in Katana plugin.\n\n### Changed\n- CMake will no longer look for X11 on OSX. \n  (Issue: [#72](https://www.github.com/PixarAnimationStudios/USD/issues/72))\n- The build system now uses relative paths for baking in plugin\n  search paths, allowing for relocatable builds as long as all\n  build products are moved together as one unit.\n- Removed hard-coded /usr/local/share directory from plugin search path.\n- Optimized creation of prim specs in Sdf. Creating 100k prim specs \n  previously took 190s, it now takes 0.9s.\n- SdfPath::GetVariantSelection now returns a variant selection only\n  for variant selection paths.\n- UsdStage no longer issues an error if requested to unload a path that\n  does not identify an unloadable object.\n- Changed API on UsdInherits, UsdReferences, UsdRelationship,\n  UsdSpecializes, UsdVariantSet, and UsdVariantSets for clarity.\n- Hydra GPU compute settings have been consolidated under a single\n  HD_ENABLE_GPU_COMPUTE environment setting which is enabled by\n  default if the OpenSubdiv being used supports the GLSL compute kernel.\n- Numerous changes for in-progress work on refactoring Hydra to\n  support render delegates.\n- Changed 'Display' menu in usdview to 'Display Purposes...' and menu\n  items to match USD terminology.\n- Updated required Maya version to Maya 2016 EXT2 SP2.\n- Normals are now emitted by default when exporting polygonal meshes in Maya.\n- Katana plugin now supports deactivating prims directly on\n  UsdStage for improved efficiency.\n- Continued work on deprecating UsdShadeLook in favor of UsdShadeMaterial.\n- Numerous changes for ongoing Mac and Windows porting efforts.\n- Changed coding style to use symbol-like logical operators\n  instead of the keyword-like form (e.g., '&&' instead of 'and').\n- Various cleanup changes to fix comments, compiler warnings, and\n  to remove unused/old code.\n\n### Fixed\n- Fixed composition bug where nested variants with the same name\n  were composed incorrectly.\n- Fixed composition bug where variant selections from classes\n  were not being applied in certain cases. \n  (Issue: [#156](https://www.github.com/PixarAnimationStudios/USD/issues/156))\n- Fixed .usda file output to write out floating point values\n  using the correct precision and to use exponential representation\n  for values greater than 1e15 (instead of 1e21) to avoid parsing\n  issues.\n- Fixed bug where negative double values that could be represented as\n  floats were not stored optimally in .usdc files.\n- Fixed bug where UsdPrim::Has/GetProperty would return incorrect results.\n- Fixed bug where UsdObject::GetMetadata would return incorrect results\n  for dictionary-valued metadata in certain cases.\n- Fixed bug where reading certain .usdc files while forcing single-threaded\n  processing via PXR_WORK_THREAD_LIMIT would lead to a stack overflow.\n- Fixed missing garbage collection for shader and texture resource\n  registries in Hydra.\n- Several fixes for nested instancing support in Hydra (native\n  USD instances containing other instances or point instancers, etc.)\n- Fixed \"Jump to Bound Material\" in \"Pick Models\" selection mode in usdview.\n- Fixed bug where USD assemblies would not be drawn in Maya under VP2.0.\n- Workaround for performance issue when drawing proxies in Katana plugin.\n- Fixed issue causing USD Alembic plugin to fail to build with\n  Alembic 1.7. \n  (Issue: [#106](https://www.github.com/PixarAnimationStudios/USD/issues/106))\n- Various other bug fixes and performance improvements.\n\n## [0.7.2] - 2016-12-02\n\n### Added\n- Added ability to apply a custom prefix to shared library names\n  by specifying the `PXR_LIB_PREFIX` option to CMake.\n- Added ability to disable tests by using the `PXR_BUILD_TESTS` option\n  with CMake.\n- usddiff can now diff two directories containing USD files.\n- Value clips on a prim may now be specified using 'template' clip\n  metadata. This is a more compact representation for simple cases\n  where each value clip corresponds to a single time code.\n- Better support for non-file-backed asset resolution\n  - Made ArDefaultResolver public, so that subclasses can layer\n    behavior on top of it.\n  - Added ArResolver API for retrieving files from data store when\n    needed.\n- Initial version of UsdGeomPointInstancer schema and preliminary\n  support in usdImaging.\n- pxrUsdReferenceAssemblies in Maya can now import animation from a USD scene.\n  See http://openusd.org/docs/Maya-USD-Plugins.html#MayaUSDPlugins-ImportingasAssemblies \n  for details. \n- Core USD metadata (e.g. hidden, instanceable, kind) now roundtrips through \n  Maya, stored as \"USD_XXX\" attributes on corresponding Maya nodes.\n\n### Changed\n- Removed dependency on Qt. Note that PySide is still a dependency for \n  usdview.\n  - Removed imaging/glfq library as part of this work.\n- Modified variant behavior in composition:\n  - Variants may now be nested within other variants in scene description.\n    Nested variants may be authored by using nested UsdEditContext objects\n    returned by UsdVariantSet::GetVariantEditContext.\n  - Weaker variants may now introduce variant selections that affect\n    stronger variants. Previously, these selections would be ignored \n    and the variant fallbacks would be used instead.\n- Optimized .usdc file format performance in certain cases:\n  - Output is buffered in memory to improve write times for layers \n    containing many nested dictionaries. In one such example, wall-clock\n    time improved by ~64% and system time improved by 89%.\n  - Time samples are now written out grouped by time to improve read \n    performance for frame-by-frame access patterns.\n- Several optimizations to improve USD scenegraph authoring and composition \n  speed and reduce memory consumption. In some use cases, we observed:\n  - ~5-7x less memory consumed by Pcp dependency tracking structures\n  - ~40% less time spent to author large stages\n- Exporting USD from the Maya Export window now produces binary .usd\n  files by default instead of .usda files.\n\n### Fixed\n- Fixed bug where edits to a layer opened in Maya would persist when\n  reopening that layer in a new scene.\n- Fixed issue where exporting USD from the Maya Export window would\n  produce files ending with \".usda\", even if a different format\n  was specified. The exporter should now respect any extension that\n  is entered, so long as the \"Default file extensions\" option is\n  turned off.\n- Fixed several issues with example plugins being improperly built, making\n  them unusuable, and missing functionality.\n- Various other bug fixes and performance improvements.\n\n## [0.7.1] - 2016-09-21\n\n### Added\n- UsdMaterial schema for shading, intended to replace UsdLook. Also added\n  support for this new schema to Hydra.\n- Initial version of UsdUI schema library, intended for encoding GUI \n  information on USD prims.\n- Parallel teardown of some data members in UsdStage, speeding up overall\n  teardown by ~2x.\n- Support for packed vertex normals to Hydra, reducing GPU memory consumption\n  by 20-30% in some cases.\n- Ability to compare two composed stages to usddiff by specifying the\n  \"--compose\" or \"-c\" options.\n- Support for soft-selection for collapsed USD assemblies in Maya.\n- Support for exporting color sets and UV sets as indexed primvars from Maya.\n\n### Changed\n- Refactored Hydra libraries to move higher-level concepts out of the core\n  hd library and into hdx.\n- Removed use of opensubdiv3/ include path from imaging code in favor of\n  standard opensubdiv/ include.\n- Modified UsdStage to automatically load newly-discovered payloads if\n  their nearest ancestor's payload was also loaded. For example, consumers\n  will no longer have to explicitly call UsdStage::Load to ensure payloads\n  are loaded when switching variants on a prim, so long as their nearest\n  ancestor is also loaded.\n- Refactoring and other changes to help with Mac and Windows ports.\n- Updated doxygen and other documentation.\n\n### Fixed\n- Fixed issue that caused Alembic plugin (usdAbc) to be misconfigured at\n  build time, which required users to manually update its plugInfo.json\n  and set an environment variable at runtime to make it work. This plugin\n  is now installed to $PREFIX/plugin/usd/ and requires no additional\n  steps to use once it has been built.\n- Fixed issue with .usdc files that resulted in corrupted files on Windows.\n  The file structure was changed, so the .usdc version has been bumped\n  from 0.0.1 to 0.1.0. USD will continue to write 0.0.1 files by default,\n  but will begin writing 0.1.0 files in the near future.\n\n  Users may choose to write files with the new version immediately\n  by setting the environment variable `USD_WRITE_NEW_USDC_FILES_AS_VERSION`\n  to \"0.1.0\".\n\n  Note that 0.0.1 files are still readable using this release, \n  except for those that have been generated on Windows using 0.7.0. \n  Early testers on Windows will need to regenerate those files\n  with this release.\n- Fixed issue that caused usdGenSchema to generate files that could\n  not be compiled.\n- Added a workaround for TBB-related issue in Maya that caused hangs when \n  using the USD Maya plugin. This can be enabled at build time by \n  specifying the `PXR_MAYA_TBB_BUG_WORKAROUND` option to CMake.\n- Various other bug fixes and performance improvements.\n\n## [0.7.0] - 2016-08-01\n\nInitial release\n\n</details>\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 2.0556640625,
          "content": "cmake_minimum_required(VERSION 3.14)\n\nproject(usd)\n\nif (NOT CMAKE_SIZEOF_VOID_P EQUAL 8)\n    if (WIN32)\n        message(FATAL_ERROR \"Compiler does not support 64-bit builds. \"\n                \"If you are using Visual Studio, make sure you are in the \"\n                \"x64 command prompt and have specified the Win64 cmake \"\n                \"generator (e.g., -G \\\"Visual Studio 15 2017 Win64\\\")\")\n    else()\n        message(FATAL_ERROR \"Compiler does not support 64-bit builds.\")\n    endif()\nendif()\n\nlist(APPEND CMAKE_MODULE_PATH\n    ${PROJECT_SOURCE_DIR}/cmake/defaults\n    ${PROJECT_SOURCE_DIR}/cmake/modules\n    ${PROJECT_SOURCE_DIR}/cmake/macros)\n\ninclude(Options)\ninclude(ProjectDefaults)\ninclude(Packages)\n\n# This has to be defined after Packages is included, because it relies on the\n# discovered path to the python executable.\nset(PXR_PYTHON_SHEBANG \"${PYTHON_EXECUTABLE}\" \n    CACHE \n    STRING\n    \"Replacement path for Python #! line.\"\n)\n\n# CXXDefaults will set a variety of variables for the project.\n# Consume them here. This is an effort to keep the most common\n# build files readable.\ninclude(CXXDefaults)\nadd_definitions(${_PXR_CXX_DEFINITIONS})\nset(CMAKE_CXX_FLAGS \"${_PXR_CXX_FLAGS} ${CMAKE_CXX_FLAGS}\")\n\ninclude(Public)\n\npxr_toplevel_prologue()\n\nadd_subdirectory(pxr)\nadd_subdirectory(extras)\n\nif (PXR_BUILD_PRMAN_PLUGIN)\n    set(prmanPluginPath \"third_party/renderman-${RENDERMAN_VERSION_MAJOR}\")\n\n    get_filename_component(prmanPluginAbsPath \"${prmanPluginPath}\" ABSOLUTE)\n    if (EXISTS \"${prmanPluginAbsPath}\")\n        add_subdirectory(\"${prmanPluginPath}\")\n    else()\n        message(FATAL_ERROR \"No RenderMan plugin available for \"\n                \"RenderMan ${RENDERMAN_VERSION_MAJOR}\")\n    endif()\nendif()\n\nif (PXR_BUILD_TESTS)\n    pxr_tests_prologue()\nendif()\n\nif (PXR_BUILD_DOCUMENTATION)\n    pxr_build_documentation()\n\n    # If building python doc strings, run script\n    # that uses doxygen build results and installed\n    # USD python modules\n    if (PXR_BUILD_PYTHON_DOCUMENTATION)\n        pxr_build_python_documentation()\n    endif()\nendif()   \n\npxr_toplevel_epilogue()"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1376953125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy toward other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at usd-admin@pixar.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.20703125,
          "content": "Thank you for your interest in contributing to USD! We ask that\npotential contributors review our guidelines on [contributing](http://openusd.org/docs/Contributing-to-USD.html) before submitting a pull request. \n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 47.708984375,
          "content": "============================================================\nOpenUSD\n============================================================\n\nNote: The Tomorrow Open Source Technology License 1.0 differs from the \noriginal Apache License 2.0 in the following manner. Section 6 (\"Trademarks\") \nis different.\n\nTOMORROW OPEN SOURCE TECHNOLOGY LICENSE 1.0\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor\n      and its affiliates, except as required to comply with Section 4(c) of\n      the License and to reproduce the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n============================================================\nRapidJSON\n============================================================\n\nTencent is pleased to support the open source community by making RapidJSON available. \n \nCopyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip.  All rights reserved.\n\nIf you have downloaded a copy of the RapidJSON binary from Tencent, please note that the RapidJSON binary is licensed under the MIT License.\nIf you have downloaded a copy of the RapidJSON source code from Tencent, please note that RapidJSON source code is licensed under the MIT License, except for the third-party components listed below which are subject to different license terms.  Your integration of RapidJSON into your own projects may require compliance with the MIT License, as well as the other licenses applicable to the third-party components included within RapidJSON. To avoid the problematic JSON license in your own projects, it's sufficient to exclude the bin/jsonchecker/ directory, as it's the only code under the JSON license.\nA copy of the MIT License is included in this file.\n\nOther dependencies and licenses:\n\nOpen Source Software Licensed Under the BSD License:\n--------------------------------------------------------------------\n\nThe msinttypes r29 \nCopyright (c) 2006-2013 Alexander Chemeris \nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. \n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n* Neither the name of  copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nOpen Source Software Licensed Under the JSON License:\n--------------------------------------------------------------------\n\njson.org \nCopyright (c) 2002 JSON.org\nAll Rights Reserved.\n\nJSON_checker\nCopyright (c) 2002 JSON.org\nAll Rights Reserved.\n\n\t\nTerms of the JSON License:\n---------------------------------------------------\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nThe Software shall be used for Good, not Evil.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nTerms of the MIT License:\n--------------------------------------------------------------------\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n============================================================\ndouble-conversion\n============================================================\n\nCopyright 2006-2011, the V8 project authors. All rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials provided\n      with the distribution.\n    * Neither the name of Google Inc. nor the names of its\n      contributors may be used to endorse or promote products derived\n      from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n============================================================\nOpenEXR/IlmBase/Half\n============================================================\n\n///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// Digital Ltd. LLC\n// \n// All rights reserved.\n// \n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n// *       Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// *       Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// *       Neither the name of Industrial Light & Magic nor the names of\n// its contributors may be used to endorse or promote products derived\n// from this software without specific prior written permission. \n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n///////////////////////////////////////////////////////////////////////////\n\n============================================================\nlibdeflate\n============================================================\n\nCopyright 2016 Eric Biggers\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation files\n(the \"Software\"), to deal in the Software without restriction,\nincluding without limitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of the Software,\nand to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\nBE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\nACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n============================================================\nApple Technical Q&A QA1361 - Detecting the Debugger\nhttps://developer.apple.com/library/content/qa/qa1361/_index.html\n============================================================\n\nSample code project: Detecting the Debugger\nVersion: 1.0\n\nAbstract: Shows how to determine if code is being run under the debugger.\n\nIMPORTANT:  This Apple software is supplied to you by Apple\nInc. (\"Apple\") in consideration of your agreement to the following\nterms, and your use, installation, modification or redistribution of\nthis Apple software constitutes acceptance of these terms.  If you do\nnot agree with these terms, please do not use, install, modify or\nredistribute this Apple software.\n\nIn consideration of your agreement to abide by the following terms, and\nsubject to these terms, Apple grants you a personal, non-exclusive\nlicense, under Apple's copyrights in this original Apple software (the\n\"Apple Software\"), to use, reproduce, modify and redistribute the Apple\nSoftware, with or without modifications, in source and/or binary forms;\nprovided that if you redistribute the Apple Software in its entirety and\nwithout modifications, you must retain this notice and the following\ntext and disclaimers in all such redistributions of the Apple Software.\nNeither the name, trademarks, service marks or logos of Apple Inc. may\nbe used to endorse or promote products derived from the Apple Software\nwithout specific prior written permission from Apple.  Except as\nexpressly stated in this notice, no other rights or licenses, express or\nimplied, are granted by Apple herein, including but not limited to any\npatent rights that may be infringed by your derivative works or by other\nworks in which the Apple Software may be incorporated.\n \nThe Apple Software is provided by Apple on an \"AS IS\" basis.  APPLE\nMAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\nTHE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS\nFOR A PARTICULAR PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND\nOPERATION ALONE OR IN COMBINATION WITH YOUR PRODUCTS.\n \nIN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL\nOR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION,\nMODIFICATION AND/OR DISTRIBUTION OF THE APPLE SOFTWARE, HOWEVER CAUSED\nAND WHETHER UNDER THEORY OF CONTRACT, TORT (INCLUDING NEGLIGENCE),\nSTRICT LIABILITY OR OTHERWISE, EVEN IF APPLE HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\n============================================================\nLZ4\n============================================================\n\nLZ4 - Fast LZ compression algorithm\nCopyright (C) 2011-present, Yann Collet.\n\nBSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nYou can contact the author at :\n - LZ4 homepage : http://www.lz4.org\n - LZ4 source repository : https://github.com/lz4/lz4\n\n============================================================\nstb\n============================================================\n\nstb_image - v2.19 - public domain image loader - http://nothings.org/stb\n                                  no warranty implied; use at your own risk\n\nstb_image_resize - v0.95 - public domain image resizing\n   by Jorge L Rodriguez (@VinoBS) - 2014\n      http://github.com/nothings/stb\n\nstb_image_write - v1.09 - public domain - http://nothings.org/stb/stb_image_write.h\n   writes out PNG/BMP/TGA/JPEG/HDR images to C stdio - Sean Barrett 2010-2015\n                                        no warranty implied; use at your own risk\n\nALTERNATIVE B - Public Domain (www.unlicense.org)                               \nThis is free and unencumbered software released into the public domain.         \nAnyone is free to copy, modify, publish, use, compile, sell, or distribute this \nsoftware, either in source code form or as a compiled binary, for any purpose,  \ncommercial or non-commercial, and by any means.                                 \nIn jurisdictions that recognize copyright laws, the author or authors of this   \nsoftware dedicate any and all copyright interest in the software to the public  \ndomain. We make this dedication for the benefit of the public at large and to   \nthe detriment of our heirs and successors. We intend this dedication to be an   \novert act of relinquishment in perpetuity of all present and future rights to   \nthis software under copyright law.                                              \nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,        \nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         \nAUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN          \nACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION    \nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                 \n\n============================================================\npugixml\n============================================================\n\nMIT License\n\nCopyright (c) 2006-2019 Arseny Kapoulkine\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n============================================================\nVulkan C++ examples and demos (dome light texture filtering)\n============================================================\n\nThe MIT License (MIT)\n\nCopyright (c) 2016 Sascha Willems\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n============================================================\npbrt (Hammersley Low-Discrepancy Sampling Sequence)\n============================================================\n\nCopyright (c) 1998-2015, Matt Pharr, Greg Humphreys, and Wenzel Jakob.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n============================================================\nDraco\n============================================================\nUSD bundles Draco, which is available under the Apache 2.0 license. For details,\nsee https://github.com/google/draco/blob/master/README.md.\n\n\n============================================================\nRoboto Fonts\n============================================================\nUSD bundles Roboto fonts, which is available under the Apache 2.0 license. \nFor details, see https://fonts.google.com/specimen/Roboto#license\n\n\n============================================================\nRoboto Mono Fonts\n============================================================\nUSD bundles Roboto Mono fonts, which is available under the Apache 2.0 license. \nFor details, see https://fonts.google.com/specimen/Roboto+Mono#license\n\n\n============================================================\nVulkan Memory Allocator\n============================================================\nCopyright (c) 2017-2020 Advanced Micro Devices, Inc. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n\n============================================================\nSpirv Reflect\n============================================================\nCopyright 2017-2018 Google Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n============================================================\nkhrplatform.h\n============================================================\nCopyright (c) 2008-2018 The Khronos Group Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and/or associated documentation files (the\n\"Materials\"), to deal in the Materials without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Materials, and to\npermit persons to whom the Materials are furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Materials.\n\nTHE MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nMATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.\n\n\n============================================================\nsurfgrad-bump-standalone-demo\n============================================================\nMIT License\n\nCopyright (c) 2020 mmikk\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n================================================================\nTessil robin-map\n================================================================\nMIT License\n\nCopyright (c) 2017 Thibaut Goetghebuer-Planchon <tessil@gmx.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n=====\nCLI11\n=====\n\nCLI11 2.3.1 Copyright (c) 2017-2022 University of Cincinnati, developed by Henry\nSchreiner under NSF AWARD 1414736. All rights reserved.\n\nRedistribution and use in source and binary forms of CLI11, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n3. Neither the name of the copyright holder nor the names of its contributors\n   may be used to endorse or promote products derived from this software without\n   specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n================================================================\nThe Art of C++ : PEGTL (Parsing Expression Grammar Template Library)\n================================================================\n\nThe MIT License (MIT)\n\nCopyright (c) 2007-2022 Dr. Colin Hirsch and Daniel Frey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n================================================================\nDoxygen Awesome\n================================================================\n\nMIT License\n\nCopyright (c) 2021 - 2023 jothepro\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n================================================================\nLibAvif v1.0.4\n================================================================\n\nCopyright 2019 Joe Drago. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n================================================================\nAVIF/src/obu.c, renamed in this repository as AVIF/src/avif_obu.c\n================================================================\n\nCopyright © 2018-2019, VideoLAN and dav1d authors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n================================================================\nAVIF/third_party/libyuv/*\n================================================================\n\nCopyright 2011 The LibYuv Project Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n\n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in\n    the documentation and/or other materials provided with the\n    distribution.\n\n  * Neither the name of Google nor the names of its contributors may\n    be used to endorse or promote products derived from this software\n    without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n================================================================\nlibaom\n================================================================\n\nCopyright (c) 2016, Alliance for Open Media. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in\n   the documentation and/or other materials provided with the\n   distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\nFOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\nBUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\nANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\n================================================================\nboost\n================================================================\n\nBoost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "NOTICE.txt",
          "type": "blob",
          "size": 0.16796875,
          "content": "Universal Scene Description   \r\nCopyright 2016 Pixar\n   \r\nAll rights reserved.\n\n   \r\n\r\nThis product includes software developed at:\n       \r\nPixar (http://www.pixar.com/).\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.0068359375,
          "content": "Universal Scene Description\n===========================\n\nUniversal Scene Description (USD) is an efficient, scalable system for\nauthoring, reading, and streaming time-sampled scene description for\ninterchange between graphics applications.\n\nFor more details, please visit the web site [here](http://openusd.org).\n\nBuild Status\n------------\n\n|         |   Linux   |  Windows  |   macOS   |\n|:-------:|:---------:|:---------:|:---------:|\n|   dev   | [![Build Status](https://dev.azure.com/PixarAnimationStudios/OpenUSD/_apis/build/status/PixarAnimationStudios.OpenUSD?branchName=dev&amp;jobName=Linux)](https://dev.azure.com/PixarAnimationStudios/OpenUSD/_build/latest?definitionId=2&branchName=dev) | [![Build Status](https://dev.azure.com/PixarAnimationStudios/OpenUSD/_apis/build/status/PixarAnimationStudios.OpenUSD?branchName=dev&amp;jobName=Windows)](https://dev.azure.com/PixarAnimationStudios/OpenUSD/_build/latest?definitionId=2&branchName=dev) | [![Build Status](https://dev.azure.com/PixarAnimationStudios/OpenUSD/_apis/build/status/PixarAnimationStudios.OpenUSD?branchName=dev&amp;jobName=macOS)](https://dev.azure.com/PixarAnimationStudios/OpenUSD/_build/latest?definitionId=2&branchName=dev) |\n|  release | [![Build Status](https://dev.azure.com/PixarAnimationStudios/OpenUSD/_apis/build/status/PixarAnimationStudios.OpenUSD?branchName=release&amp;jobName=Linux)](https://dev.azure.com/PixarAnimationStudios/OpenUSD/_build/latest?definitionId=2&branchName=release) | [![Build Status](https://dev.azure.com/PixarAnimationStudios/OpenUSD/_apis/build/status/PixarAnimationStudios.OpenUSD?branchName=release&amp;jobName=Windows)](https://dev.azure.com/PixarAnimationStudios/OpenUSD/_build/latest?definitionId=2&branchName=release) | [![Build Status](https://dev.azure.com/PixarAnimationStudios/OpenUSD/_apis/build/status/PixarAnimationStudios.OpenUSD?branchName=release&amp;jobName=macOS)](https://dev.azure.com/PixarAnimationStudios/OpenUSD/_build/latest?definitionId=2&branchName=release) |\n\nAdditional Documentation\n------------------------\n\n* [User Documentation and Tutorials](http://openusd.org/docs/index.html)\n* [API Documentation](http://openusd.org/docs/api/index.html)\n* [Advanced Build Configuration](BUILDING.md)\n\nGetting Help\n------------\n\nNeed help understanding certain concepts in USD? See\n[Getting Help with USD](http://openusd.org/docs/Getting-Help-with-USD.html) or\nvisit our [forum](https://groups.google.com/forum/#!forum/usd-interest).\n\nIf you are experiencing undocumented problems with the software, please \n[file a bug](https://github.com/PixarAnimationStudios/OpenUSD/issues/new).\nIf you need to report a security issue with the software, please review the \n[Security Policy](SECURITY.md).\n\nSupported Platforms\n-------------------\n\nUSD is primarily developed on Linux platforms (CentOS 7), but is built, tested \nand supported on macOS and Windows.\n\nIt is also possible to build USD libraries that can be embedded\nin iOS and visionOS apps.\n\nPlease see [VERSIONS.md](VERSIONS.md) for explicitly tested versions. \n\nDependencies\n------------\n\nRequired:\n - C/C++ compiler\n - [CMake](https://cmake.org/documentation/)\n - [Intel TBB](https://www.threadingbuildingblocks.org/)\n\nSee [3rd Party Library and Application Versions](VERSIONS.md) for version information.\n\nAdditional dependencies are required for the following components. These \ncomponents may be disabled at build-time. For further details see\n[Advanced Build Configuration](BUILDING.md).\n\n**Imaging and USD Imaging**\n\nRequired:\n - [OpenSubdiv](https://github.com/PixarAnimationStudios/OpenSubdiv)\n\nOptional:\n - [OpenEXR](http://www.openexr.com)\n - [OpenImageIO](https://sites.google.com/site/openimageio/home)\n - [OpenColorIO](http://opencolorio.org/)\n - [OSL (OpenShadingLanguage)](https://github.com/imageworks/OpenShadingLanguage)\n - [Ptex](http://ptex.us/)                          \n\n**Python Bindings**\n\nRequired:\n - [Python](https://python.org)\n\n**usdview**\n\nRequired:\n - Python bindings\n - [PySide6](http://wiki.qt.io/PySide6) or [PySide2](http://wiki.qt.io/PySide2)\n - [PyOpenGL](https://pypi.python.org/pypi/PyOpenGL/)\n\nGetting and Building the Code\n-----------------------------\n\nThe simplest way to build USD is to run the supplied `build_usd.py`\nscript. This script will download required dependencies and build \nand install them along with USD in a given directory. \n\nFollow the instructions below to run the script with its default behavior, \nwhich will build the USD core libraries, Imaging, and USD Imaging components.\nFor more options and documentation, run the script with the `--help`\nparameter.\n\nSee [Advanced Build Configuration](BUILDING.md) for examples and\nadditional documentation for running cmake directly.\n\n#### 1. Install prerequisites (see [Dependencies](#dependencies) for required versions)\n\n- Required:\n    - C++ compiler:\n        - gcc\n        - Xcode\n        - Microsoft Visual Studio\n    - CMake\n- Optional (Can be ignored by passing `--no-python` as an argument to `build_usd.py`)\n    - Python (required for [bindings and tests](BUILDING.md#python)) \n    - PyOpenGL (required for [usdview](BUILDING.md#usd-imaging))\n    - PySide6 or PySide2 (required for [usdview](BUILDING.md#usd-imaging))\n\n#### 2. Download the USD source code\n\nYou can download source code archives from [GitHub](https://www.github.com/PixarAnimationStudios/OpenUSD) or use `git` to clone the repository.\n\n```\n> git clone https://github.com/PixarAnimationStudios/OpenUSD\nCloning into 'OpenUSD'...\n```\n\n#### 3. Run the script\n\nRun the build_usd.py script to build and install USD. Note that the build script \nis structured with an out-of-source build in mind -- installing a build into the  \ndirectory where the repository was cloned is untested. \n\n##### Linux:\n\nFor example, the following will download, build, and install USD's dependencies,\nthen build and install USD into `/path/to/my_usd_install_dir`.\n\n```\n> python OpenUSD/build_scripts/build_usd.py /path/to/my_usd_install_dir\n```\n\n##### macOS:\n\nIn a terminal, run `xcode-select` to ensure command line developer tools are\ninstalled. Then run the script.\n\nFor example, the following will download, build, and install USD's dependencies,\nthen build and install USD into `/path/to/my_usd_install_dir`.\n\n```\n> python OpenUSD/build_scripts/build_usd.py /path/to/my_usd_install_dir\n```\n\n##### iOS and visionOS:\n\nWhen building from a macOS system, you can cross compile\nfor iOS based platforms.\n\nCross compilation builds are restricted to building libraries that can be\nembedded in applications built for the target platform. It can be helpful\nto use a monolithic build when embedding USD\n(see [Advanced Build Configuration](BUILDING.md)).\n\nThese builds do not support Python bindings or command line tools.\n\nFor example, the following will download, build, and install USD's dependencies,\nthen build and install USD for iOS into `/path/to/my_usd_install_dir`.\n\n```\n> python OpenUSD/build_scripts/build_usd.py --build-target iOS --build-monolithic /path/to/my_usd_install_dir\n```\n\nOr for visionOS:\n\n```\n> python OpenUSD/build_scripts/build_usd.py --build-target visionOS --build-monolithic /path/to/my_usd_install_dir\n```\n\n##### Windows:\n\nLaunch the \"x64 Native Tools Command Prompt\" for your version of Visual Studio\nand run the script in the opened shell. Make sure to use the 64-bit (x64) \ncommand prompt and not the 32-bit (x86) command prompt.\n\nSee https://docs.microsoft.com/en-us/cpp/build/how-to-enable-a-64-bit-visual-cpp-toolset-on-the-command-line for more details.\n\nFor example, the following will download, build, and install USD's dependencies,\nthen build and install USD into `C:\\path\\to\\my_usd_install_dir`.\n\n```\nC:\\> python OpenUSD\\build_scripts\\build_usd.py \"C:\\path\\to\\my_usd_install_dir\"\n```\n\n#### 4. Try it out\n\nSet the environment variables specified by the script when it finishes and \nlaunch `usdview` with a sample asset.\n\n```\n> usdview OpenUSD/extras/usd/tutorials/convertingLayerFormats/Sphere.usda\n```\n\nContributing\n------------\n\nIf you'd like to contribute to USD (and we appreciate the help!), please see\nthe [Contributing](http://openusd.org/docs/Contributing-to-USD.html) page in the\ndocumentation for more information.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.7841796875,
          "content": "# Security Policy\n\nWe appreciate your efforts to responsibly disclose your findings and will make \nevery effort to acknowledge your contributions.\n\n## Reporting a Vulnerability\n\nPlease use the GitHub Security Advisory \n[\"Report a Vulnerability\" tab](https://github.com/PixarAnimationStudios/OpenUSD/security/advisories/new) \nto report a security issue. Please do not report security vulnerabilities \nthrough public issues, discussions, or change requests.\n\nThe team will send a response indicating the next steps in handling your report. \nAfter the initial reply to your report, the security team will keep you informed \nof the progress towards a fix and may ask for additional information or guidance.\n\nReport security bugs in third-party plugins/applications to the team maintaining \nthe application.\n"
        },
        {
          "name": "USD_CLA_Corporate.pdf",
          "type": "blob",
          "size": 136.4970703125,
          "content": null
        },
        {
          "name": "USD_CLA_Individual.pdf",
          "type": "blob",
          "size": 58.9072265625,
          "content": null
        },
        {
          "name": "VERSIONS.md",
          "type": "blob",
          "size": 3.2666015625,
          "content": "3rd Party Library and Application Versions\n------------------------------------------\n\nUSD relies on an ecosystem of libraries and applications. This page outlines\nthe versions of these libraries used and tested against at Pixar.\n\nNote that not everything here is required, see README.md for more information\nabout which are required and which are optional for the various subsystems.\n\n## Tested\n\nOur test machines have the following software versions installed.\n\n| Software      | Linux                | macOS                        | Windows                        |\n| ------------- | -------------------- | ---------------------------- | ------------------------------ |\n| OS            | CentOS Linux 7       | 12.6.3, 14.5 for visionOS  | Windows 10                     |\n| C++ Compiler  | gcc 9.3.1            | Apple clang 13.1.6 (Xcode 13.3)<br>Apple clang 15.0.0 (Xcode 15.4) for visionOS | Visual Studio 2017 15.9     |\n| CMake         | 3.17.5               | 3.19.5                       | 3.25.3                         |\n| Python        | 3.9.16               | 3.9.13                       | 3.9.13                         |\n| Intel TBB     | 2020 Update 3        | 2018 Update 1, 2020 Update 3 | 2020 Update 3                  |\n| OpenSubdiv    | 3.6.0                | 3.6.0                        | 3.6.0                          |\n| OpenImageIO   | 2.3.21.0             | 2.3.21.0                     | 2.3.21.0                       |\n| OpenColorIO   | 2.1.3                | 2.1.3                        | 2.1.3                          |\n| OSL           | 1.10.9               |                              |                                |\n| Ptex          | 2.4.2                | 2.4.2                        | 2.4.2                          |\n| Qt for Python | PySide2 5.15.2.1     | PySide6 6.3.1                | PySide2 5.15.2.1               |\n| PyOpenGL      | 3.1.5                | 3.1.5                        | 3.1.5                          |\n| Embree        | 3.2.2                | 3.13.3                       | 3.2.2                          |\n| RenderMan     | 25.3                 | 25.3                         | 25.3                           |\n| Alembic       | 1.8.5                | 1.8.5                        | 1.8.5                          |\n| OpenEXR       | 3.1.11               | 3.1.11                       | 3.1.11                         |\n| MaterialX     | 1.38.10              | 1.38.10                      | 1.38.10                        |\n| Jinja2        | 2.0                  |                              |                                |\n| Flex          | 2.5.39               |                              |                                |\n| Bison         | 2.4.1                |                              |                                |\n| Doxygen       | 1.9.6                |                              |                                |\n| GraphViz      | 2.40.1               |                              |                                |\n| OpenVDB       | 9.1.0                | 7.1.0, 9.1.0                 | 9.1.0                          |\n| Vulkan SDK    | 1.3.243.0            | 1.3.243.0                    | 1.3.243.0                      |\n| Draco         | 1.3.6                | 1.3.6                        | 1.3.6                          |\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 2.4560546875,
          "content": "trigger:\n- release\n- dev\n\njobs:\n- job: Linux\n  timeoutInMinutes: 120\n  pool:\n    vmImage: 'Ubuntu-20.04'\n  steps:\n  - script: |\n      sudo apt-get -qq update;\n      sudo pip install --upgrade pip\n      sudo apt-get install python-setuptools;\n      sudo apt-get install libglew-dev libxrandr-dev libxcursor-dev libxinerama-dev libxi-dev;\n      sudo pip install PySide2 ;\n      sudo pip install PyOpenGL ;\n      sudo python3 build_scripts/build_usd.py --no-materialx --build $HOME/USDgen/build --src $HOME/USDgen/src $HOME/USDinst -v\n    displayName: 'Building USD'\n  - task: PublishPipelineArtifact@0\n    inputs:\n      artifactName: 'usd-linux'\n      targetPath: \"/home/vsts/USDinst\"\n\n- job: macOS\n  timeoutInMinutes: 120\n  pool:\n    vmImage: 'macOS-13'\n  steps:\n  - script: |\n      # Update PATH to ensure that pyside2-uic can be found\n      export PATH=/Library/Frameworks/Python.framework/Versions/3.11/bin:$PATH\n      sudo xcode-select -s /Applications/Xcode_14.1.app/Contents/Developer\n      # Set SYSTEM_VERSION_COMPAT while installing Python packages to\n      # accommodate the macOS version numbering change from 10.x to 11\n      export SYSTEM_VERSION_COMPAT=1\n      sudo pip3 install PySide6 ;\n      sudo pip3 install PyOpenGL ;\n      export -n SYSTEM_VERSION_COMPAT\n      python3 build_scripts/build_usd.py --no-materialx --generator Xcode --build $HOME/USDgen/build --src $HOME/USDgen/src $HOME/USDinst -v\n    displayName: 'Building USD'\n  - task: PublishPipelineArtifact@0\n    inputs:\n      artifactName: 'usd-macOS'\n      targetPath: \"/Users/runner/USDinst\"\n\n- job: Windows\n  timeoutInMinutes: 120\n  pool:\n    vmImage: 'windows-2019'\n  steps:\n  - script: |\n      call C:\\\"Program Files (x86)\"\\\"Microsoft Visual Studio\"\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat\n      call set PYTHONLOCATION=C:\\hostedtoolcache\\windows\\Python\\3.9.13\\x64\n      call set PYTHONBIN=%PYTHONLOCATION%\\python.exe\n      call set PATH=%PYTHONLOCATION%;%PYTHONLOCATION%\\Scripts;%PATH%\n      call set BOOST_ROOT=\n      call %PYTHONBIN% --version\n      call %PYTHONBIN% -m pip install --upgrade pip\n      call %PYTHONBIN% -m pip install PySide2\n      call %PYTHONBIN% -m pip install PyOpenGL\n      call %PYTHONBIN% build_scripts/build_usd.py --no-materialx --build %HOME%/USDgen/build --src %HOME%/USDgen/src %HOME%/USDinst --build-args USD,\"-DPXR_ENABLE_PRECOMPILED_HEADERS=OFF\" -v\n    displayName: 'Building USD'\n  - task: PublishPipelineArtifact@0\n    inputs:\n      artifactName: 'usd-win64'\n      targetPath: \"D:/USDinst\"\n"
        },
        {
          "name": "azure-pypi-pipeline.yml",
          "type": "blob",
          "size": 12.9814453125,
          "content": "name: PyPI_Packaging\n\n# Trigger this build whenever the dev or release branches are updated,\n# or on pull requests that affect PyPI-related files.\n#\n# Ideally we'd run this pipeline for all pull requests, but doing so consumes\n# our limited number of slots on Azure and almost always just duplicates the\n# build done in the main pipeline.\ntrigger:\n    branches:\n        include:\n        - dev\n        - release\n\npr:\n    branches:\n        include:\n        - dev\n        - release\n    paths:\n        include:\n        - azure-pypi-pipeline.yml\n        - build_scripts/pypi/*.py\n        - build_scripts/pypi/package_files/*\n\n# Azure does not support an empty string as a default argument, so we use a\n# special 'none' string for post_release_tag.\nparameters:\n- name: post_release_tag\n  displayName: Post Release Version Tag\n  type: string\n  default: 'none'\n\nvariables:\n- name: post_release_tag_arg\n  ${{ if eq(parameters.post_release_tag, 'none') }}:\n    value: ''\n  ${{ else }}:\n    value: ${{ format('--post-release-tag {0}', parameters.post_release_tag) }}\n\nstages:\n- stage: Build_and_Package\n  jobs:\n\n  - job: Linux\n    strategy:\n      matrix:\n        Python38:\n          PYTHON_INTERPRETER: /opt/python/cp38-cp38/bin/python\n          PYTHON_TAG: cp38\n        Python39:\n          PYTHON_INTERPRETER: /opt/python/cp39-cp39/bin/python\n          PYTHON_TAG: cp39\n        Python310:\n          PYTHON_INTERPRETER: /opt/python/cp310-cp310/bin/python\n          PYTHON_TAG: cp310\n        Python311:\n          PYTHON_INTERPRETER: /opt/python/cp311-cp311/bin/python\n          PYTHON_TAG: cp311\n        Python312:\n          PYTHON_INTERPRETER: /opt/python/cp312-cp312/bin/python\n          PYTHON_TAG: cp312\n    timeoutInMinutes: 90\n    pool:\n      vmImage: Ubuntu-20.04\n    steps:\n    - bash: |\n        docker build -t manylinuxwithcmake build_scripts/pypi/docker\n        docker run --name usdmanylinux --rm -id -v $(Build.SourcesDirectory):/opt/USD -v /home/vsts/dist:/opt/USD-dist manylinuxwithcmake\n      displayName: 'Creating docker build environment'\n    - bash: |\n        # Terrible, terrible hack. The manylinux Docker image used to build the\n        # Python wheel does not include the corresponding Python shared library\n        # to link against. https://peps.python.org/pep-0513/#libpythonx-y-so-1\n        # describes why this is so. However, the FindPython CMake module used\n        # by USD's build system requires that the library exists and will error\n        # out otherwise, even though we explicitly avoid linking against Python\n        # via the PXR_PY_UNDEFINED_DYNAMIC_LOOKUP flag.\n        # \n        # To work around this, we create a dummy file for the library using\n        # the same logic as build_usd.py to determine where the library should\n        # exist (see GetPythonInfo). FindPython will see that the library exists\n        # and allow the build to continue. The file is 100% bogus, but the\n        # PXR_PY_UNDEFINED_DYNAMIC_LOOKUP flag will ensure that we never try to\n        # link against this library anyway, so it doesn't matter.\n        docker exec usdmanylinux $(PYTHON_INTERPRETER) -c \"import pathlib,sysconfig; pathlib.Path(sysconfig.get_config_var('LIBDIR'), sysconfig.get_config_var('LDLIBRARY')).touch()\"\n        docker exec usdmanylinux $(PYTHON_INTERPRETER)  build_scripts/build_usd.py --build-args USD,\"-DPXR_PY_UNDEFINED_DYNAMIC_LOOKUP=ON -DPXR_BUILD_USD_TOOLS=OFF -DPXR_INSTALL_LOCATION=../pxr/pluginfo\" --no-materialx --no-imaging --no-examples --no-tutorials --build /opt/USD/gen/build --src /opt/USD/gen/src /opt/USD/inst -v\n      displayName: 'Building USD'\n    - bash: |\n        docker exec usdmanylinux mkdir ./packaging\n        docker exec usdmanylinux cp -R /opt/USD/inst ./packaging\n        docker exec usdmanylinux sh -c 'cp build_scripts/pypi/package_files/* ./packaging'\n        docker exec usdmanylinux sh -c 'cp LICENSE.txt ./packaging'\n      displayName: \"Creating packaging directory\"\n    - bash: |\n        docker exec -w /opt/USD/packaging usdmanylinux $(PYTHON_INTERPRETER) setup.py $(post_release_tag_arg) bdist_wheel --python-tag ${PYTHON_TAG}\n      displayName: 'Running setup.py'\n    - bash: |\n        docker exec usdmanylinux /bin/bash -c 'PYTHONPATH=/opt/USD/packaging/pypi/lib/python LD_LIBRARY_PATH=/opt/USD/packaging/pypi/lib:$LD_LIBRARY_PATH auditwheel repair packaging/dist/*.whl'\n      displayName: 'Running auditwheel repair (moves .so files into package)'\n    - bash: |\n        WHEEL_PACKAGE_NAME=`docker exec usdmanylinux ls wheelhouse`\n        docker exec usdmanylinux $(PYTHON_INTERPRETER) build_scripts/pypi/updatePluginfos.py \"wheelhouse/$WHEEL_PACKAGE_NAME\" \"/opt/USD-dist/$WHEEL_PACKAGE_NAME\"\n      displayName: 'Updating pluginfo paths'\n    - bash: |\n        docker stop usdmanylinux\n      displayName: 'Stopping docker container'\n    - task: PublishPipelineArtifact@0\n      inputs:\n        artifactName: dist-linux-$(PYTHON_TAG)\n        targetPath: /home/vsts/dist\n\n  - job: Windows\n    strategy:\n      matrix:\n        Python38:\n          PYTHON_VERSION_SPEC: 3.8\n          PYTHON_TAG: cp38\n        Python39:\n          PYTHON_VERSION_SPEC: 3.9\n          PYTHON_TAG: cp39\n        Python310:\n          PYTHON_VERSION_SPEC: 3.10\n          PYTHON_TAG: cp310\n        Python311:\n          PYTHON_VERSION_SPEC: 3.11\n          PYTHON_TAG: cp311\n        Python312:\n          PYTHON_VERSION_SPEC: 3.12\n          PYTHON_TAG: cp312\n    timeoutInMinutes: 90\n    pool:\n      vmImage: 'windows-2019'\n    steps:\n    - task: UsePythonVersion@0\n      inputs:\n        versionSpec: $(PYTHON_VERSION_SPEC)\n        addToPath: true\n    - script: |\n        call C:\\\"Program Files (x86)\"\\\"Microsoft Visual Studio\"\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat\n        set BOOST_ROOT=\n        python --version\n        python build_scripts/build_usd.py --build-args USD,\"-DPXR_ENABLE_PRECOMPILED_HEADERS=OFF -DPXR_PY_UNDEFINED_DYNAMIC_LOOKUP=ON -DPXR_BUILD_USD_TOOLS=OFF -DPXR_INSTALL_LOCATION=../pxr/pluginfo\" --no-materialx --no-imaging --no-examples --no-tutorials --build %HOME%/USDgen/build --src %HOME%/USDgen/src %HOME%/USDinst -v\n      displayName: 'Building USD'\n    - script: |\n        dir\n        mkdir D:\\packaging\n        xcopy /E /I %HOME%\\USDinst D:\\packaging\\inst\n        copy build_scripts\\pypi\\package_files\\* D:\\packaging\n        copy LICENSE.txt D:\\packaging\n        dir D:\\packaging\n        dir D:\\packaging\\inst\n      displayName: \"Creating packaging directory\"\n    - script: |\n        python -m pip install wheel setuptools\n      displayName: 'Installing python packages'\n    - script: |\n        cd D:\\packaging\n        dir\n        python setup.py $(post_release_tag_arg) bdist_wheel --python-tag $(PYTHON_TAG) --plat-name win_amd64\n      displayName: 'Running setup.py'\n    - task: PublishPipelineArtifact@0\n      inputs:\n        artifactName: dist-windows-$(PYTHON_TAG)\n        targetPath: D:\\packaging\\dist\n\n  - job: Mac\n    strategy:\n      matrix:\n        Python38:\n          PYTHON_VERSION_SPEC: 3.8\n          PYTHON_INTERPRETER: python3.8\n          PYTHON_TAG: cp38\n        Python39:\n          PYTHON_VERSION_SPEC: 3.9\n          PYTHON_INTERPRETER: python3.9\n          PYTHON_TAG: cp39\n        Python310:\n          PYTHON_VERSION_SPEC: 3.10\n          PYTHON_INTERPRETER: python3.10\n          PYTHON_TAG: cp310\n        Python311:\n          PYTHON_VERSION_SPEC: 3.11\n          PYTHON_INTERPRETER: python3.11\n          PYTHON_TAG: cp311\n        Python312:\n          PYTHON_VERSION_SPEC: 3.12\n          PYTHON_INTERPRETER: python3.12\n          PYTHON_TAG: cp312\n    timeoutInMinutes: 180\n    pool:\n      vmImage: 'macOS-13'\n    steps:\n    - task: UsePythonVersion@0\n      inputs:\n        versionSpec: $(PYTHON_VERSION_SPEC)\n        addToPath: true\n    - script: |\n        sudo xcode-select -s /Applications/Xcode_14.1.app/Contents/Developer\n        $(PYTHON_INTERPRETER) build_scripts/build_usd.py --build-args USD,\"-DPXR_PY_UNDEFINED_DYNAMIC_LOOKUP=ON -DPXR_BUILD_USD_TOOLS=OFF -DPXR_INSTALL_LOCATION=../pluginfo\" --no-materialx --no-imaging --no-examples --no-tutorials --generator Xcode --build-target universal --build $HOME/USDgen/build --src $HOME/USDgen/src $HOME/USDinst -v\n      displayName: 'Building USD'\n    - bash: |\n        $(PYTHON_INTERPRETER) -m pip install delocate~=0.10.2 wheel setuptools\n      displayName: 'Installing python packages'\n    - bash: |\n        mkdir ./packaging\n        mkdir ./packaging/inst\n        cp -R $HOME/USDinst/* ./packaging/inst\n        cp build_scripts/pypi/package_files/* ./packaging\n        cp LICENSE.txt ./packaging\n      displayName: \"Creating packaging directory\"\n    - bash: |\n        cd ./packaging\n        $(PYTHON_INTERPRETER) setup.py $(post_release_tag_arg) bdist_wheel --python-tag ${PYTHON_TAG} --plat-name macosx_10_9_universal2\n      displayName: 'Running setup.py'\n    - bash: |\n        delocate-wheel -v -w dist-delocated packaging/dist/*\n      displayName: 'Running delocate (moves shared lib files into package)'\n    - bash: |\n        WHEEL_PACKAGE_NAME=`ls ./packaging/dist`\n        mkdir -p ./dist\n        $(PYTHON_INTERPRETER)  build_scripts/pypi/updatePluginfos.py \"./dist-delocated/$WHEEL_PACKAGE_NAME\" \"./dist/$WHEEL_PACKAGE_NAME\"\n      displayName: 'Updating pluginfo paths'\n    - task: PublishPipelineArtifact@0\n      inputs:\n        artifactName: dist-mac-$(PYTHON_TAG)\n        targetPath: ./dist\n\n\n- stage: Deliver\n  dependsOn: Build_and_Package\n  jobs:\n  - job: Collect_Packages\n    timeoutInMinutes: 15\n    pool:\n      vmImage: Ubuntu-20.04\n    steps:\n    - task: DownloadPipelineArtifact@2\n      displayName: 'Downloading all artifacts'\n      inputs:\n        source: current\n        # Not specifying artifact names so we get all of them\n        downloadPath: '$(Pipeline.Workspace)'\n    - bash: |\n        cd $(Pipeline.Workspace)\n        mkdir dist-final\n        cp dist*/*.whl dist-final\n      displayName: 'Collecting whl packages'\n    - task: PublishPipelineArtifact@0\n      displayName: 'Publishing in a single download'\n      inputs:\n        artifactName: dist\n        targetPath: '$(Pipeline.Workspace)/dist-final'\n\n\n# The matrix below is verbose. There is a way to do this with a more n x m\n# syntax using a foreach loop kind of construct. For now, opting for the below\n# because it seems easier to read. An example of the other approach can be\n# found here:\n# https://github.com/nedrebo/parameterized-azure-jobs\n- stage: Test_Packages\n  dependsOn: Deliver\n  jobs:\n  - job: Test_Install\n    strategy:\n      matrix:\n        Linux_Python38:\n          PYTHON_VERSION_SPEC: 3.8\n          IMAGE: 'Ubuntu-20.04'\n          PYTHON_INTERPRETER: python3\n        Linux_Python39:\n          PYTHON_VERSION_SPEC: 3.9\n          IMAGE: 'Ubuntu-20.04'\n          PYTHON_INTERPRETER: python3\n        Linux_Python310:\n          PYTHON_VERSION_SPEC: 3.10\n          IMAGE: 'Ubuntu-20.04'\n          PYTHON_INTERPRETER: python3\n        Linux_Python311:\n          PYTHON_VERSION_SPEC: 3.11\n          IMAGE: 'Ubuntu-20.04'\n          PYTHON_INTERPRETER: python3\n        Linux_Python312:\n          PYTHON_VERSION_SPEC: 3.12\n          IMAGE: 'Ubuntu-20.04'\n          PYTHON_INTERPRETER: python3\n        Windows_Python38:\n          PYTHON_VERSION_SPEC: 3.8\n          IMAGE: 'windows-2019'\n          PYTHON_INTERPRETER: python\n        Windows_Python39:\n          PYTHON_VERSION_SPEC: 3.9\n          IMAGE: 'windows-2019'\n          PYTHON_INTERPRETER: python\n        Windows_Python310:\n          PYTHON_VERSION_SPEC: 3.10\n          IMAGE: 'windows-2019'\n          PYTHON_INTERPRETER: python\n        Windows_Python311:\n          PYTHON_VERSION_SPEC: 3.11\n          IMAGE: 'windows-2019'\n          PYTHON_INTERPRETER: python\n        Windows_Python312:\n          PYTHON_VERSION_SPEC: 3.12\n          IMAGE: 'windows-2019'\n          PYTHON_INTERPRETER: python\n        Mac_Python38:\n          PYTHON_VERSION_SPEC: 3.8\n          IMAGE: 'macOS-13'\n          PYTHON_INTERPRETER: python3\n        Mac_Python39:\n          PYTHON_VERSION_SPEC: 3.9\n          IMAGE: 'macOS-13'\n          PYTHON_INTERPRETER: python3\n        Mac_Python310:\n          PYTHON_VERSION_SPEC: 3.10\n          IMAGE: 'macOS-13'\n          PYTHON_INTERPRETER: python3\n        Mac_Python311:\n          PYTHON_VERSION_SPEC: 3.11\n          IMAGE: 'macOS-13'\n          PYTHON_INTERPRETER: python3\n        Mac_Python312:\n          PYTHON_VERSION_SPEC: 3.12\n          IMAGE: 'macOS-13'\n          PYTHON_INTERPRETER: python3\n    timeoutInMinutes: 10\n    pool:\n      vmImage: '$(IMAGE)'\n    steps:\n    - task: UsePythonVersion@0\n      inputs:\n        versionSpec: $(PYTHON_VERSION_SPEC)\n        addToPath: true\n    - task: DownloadPipelineArtifact@2\n      displayName: 'Downloading dist package'\n      inputs:\n        source: current\n        artifact: dist\n        downloadPath: '$(Pipeline.Workspace)'\n    - script: |\n        $(PYTHON_INTERPRETER) --version\n        $(PYTHON_INTERPRETER) -m pip install pytest\n        $(PYTHON_INTERPRETER) -m pip install --no-index --find-links=file://$(Pipeline.Workspace) usd-core\n        py.test --junitxml TEST-usdinstall.xml build_scripts/pypi/test.py\n      displayName: \"Testing fresh pip install\"\n    - task: PublishTestResults@2\n      condition: succeededOrFailed()\n      inputs:\n        testRunTitle: 'Test results for $(IMAGE) Python $(PYTHON_VERSION_SPEC)'\n\n"
        },
        {
          "name": "build_scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "pxr",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}