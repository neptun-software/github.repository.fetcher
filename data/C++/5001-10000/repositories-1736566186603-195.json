{
  "metadata": {
    "timestamp": 1736566186603,
    "page": 195,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "danmar/cppcheck",
      "stars": 5921,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 2.7099609375,
          "content": "---\nChecks: >\n        *,\n        -abseil-*,\n        -altera-*,\n        -android-*,\n        -boost-*,\n        -cert-*,\n        -cppcoreguidelines-*,\n        -darwin-*,\n        -fuchsia-*,\n        -google-*,\n        -hicpp-*,\n        -linuxkernel-*,\n        -llvm-*,\n        -llvmlibc-*,\n        -mpi-*,\n        -objc-*,\n        -openmp-*,\n        -zircon-*,\n        cert-err34-c,\n        cppcoreguidelines-pro-type-static-cast-downcast,\n        cppcoreguidelines-rvalue-reference-param-not-moved,\n        google-explicit-constructor,\n        -bugprone-assignment-in-if-condition,\n        -bugprone-branch-clone,\n        -bugprone-easily-swappable-parameters,\n        -bugprone-empty-catch,\n        -bugprone-macro-parentheses,\n        -bugprone-narrowing-conversions,\n        -bugprone-signed-char-misuse,\n        -bugprone-switch-missing-default-case,\n        -bugprone-unchecked-optional-access,\n        -clang-analyzer-*,\n        -concurrency-mt-unsafe,\n        -misc-const-correctness,\n        -misc-no-recursion,\n        -misc-non-private-member-variables-in-classes,\n        -misc-throw-by-value-catch-by-reference,\n        -misc-use-anonymous-namespace,\n        -modernize-avoid-c-arrays,\n        -modernize-deprecated-ios-base-aliases,\n        -misc-include-cleaner,\n        -misc-unused-using-decls,\n        -modernize-loop-convert,\n        -modernize-macro-to-enum,\n        -modernize-raw-string-literal,\n        -modernize-replace-auto-ptr,\n        -modernize-return-braced-init-list,\n        -modernize-type-traits,\n        -modernize-use-designated-initializers,\n        -modernize-use-nodiscard,\n        -modernize-use-trailing-return-type,\n        -performance-avoid-endl,\n        -performance-inefficient-string-concatenation,\n        -performance-no-automatic-move,\n        -portability-simd-intrinsics,\n        -portability-std-allocator-const,\n        -readability-avoid-nested-conditional-operator,\n        -readability-braces-around-statements,\n        -readability-container-data-pointer,\n        -readability-enum-initial-value,\n        -readability-function-cognitive-complexity,\n        -readability-function-size,\n        -readability-identifier-length,\n        -readability-identifier-naming,\n        -readability-implicit-bool-conversion,\n        -readability-isolate-declaration,\n        -readability-magic-numbers,\n        -readability-suspicious-call-argument,\n        -readability-uppercase-literal-suffix\nWarningsAsErrors: '*'\nHeaderFilterRegex: '(cli|gui|lib|oss-fuzz|test|triage)\\/[a-z]+\\.h'\nCheckOptions:\n  - key:             misc-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic\n    value:           '1'\n  - key:             readability-simplify-boolean-expr.SimplifyDeMorgan\n    value:           '0'\n"
        },
        {
          "name": ".codacy.yml",
          "type": "blob",
          "size": 0.162109375,
          "content": "exclude_paths:\n  - addons/test/**\n  - addons/y2038/test/*.c\n  - htmlreport/example.cc\n  - samples/**/bad.c\n  - samples/**/bad.cpp\n  - test/cfg/*.c\n  - test/cfg/*.cpp\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.44140625,
          "content": "## standard default enconding\n* text=auto\n\n## UNIX specific files\n*.sh    text eol=lf\n\n## Windows specific files\n*.bat               text eol=crlf\n*.cmd               text eol=crlf\n*.ps1               text eol=crlf\n*.vcxproj           text eol=crlf\n*.vcxproj.filters   text eol=crlf\n*.sln               text eol=crlf\n*.wixproj           text eol=crlf\n*.wxi               text eol=crlf\n*.wxs               text eol=crlf\n\n## Binary resources\n*.pdf binary"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.4619140625,
          "content": "*.bak\n*.gcno\n*.o\n*.pyc\n/cppcheck\n/cppcheck.exe\ncppcheck-core.dll\n/dmake\n/dmake.exe\nreduce\nreduce.exe\ntags\n/testrunner\n/testrunner.exe\ntools/daca2*.html\ntools/errmsg\ntools/extracttests\n\n# dump files generated by Cppcheck\n*.*.dump\n\n# CTU info files generated by Cppcheck\n*.*.ctu-info\n\n# VS generated files\n*.aps\n*.idb\n*.ncb\n*.obj\n*.opensdf\n*.orig\n*.pdb\n*.sdf\n*.suo\n*.user\n/.vs/\nUpgradeLog*.htm\n\n# VS build folders\nbin/\nBuild/\nBuildTmp/\n/cli/temp/\nipch/\n/lib/temp/\n/test/temp/\n\n# XCode build folders and files\n*.mode[0-9]v[0-9]\n*.pbxuser\nbuild/\n\n# Other (generated) GUI files\n/gui/help/online-help.qch\n/gui/help/online-help.qhc\n\n# Doxygen output folder\ndoxyoutput/\n\n# Backup files and stuff from patches\n*.rej\n*~\n\n# kdevelop 4.x\n*.kdev4\n\n# Common cmake build directories\nbuild**/\n\n# Temporal files\n*.swp\n\n# Snapcraft build\npart\nprime\nparts\nstage\n*.snap\n/snap/.snapcraft\n\n# Manual folder\n/man/manual.log\n/man/manual.tex\n/man/*.pdf\n/man/*.html\n\n# CLion\n/.idea\n/.metadata/\n/cmake-build-*\n/.run\n\n# clang tooling temporary files\n/.clangd/\n/.cache/\n/compile_commands.json\n\n#vs code\n/.vscode\n\n# fuzzing output\n/oss-fuzz/corpus\n/oss-fuzz/corpus_\n/oss-fuzz/samples\n\n# Python\n/.venv/\n/venv/\n**/*.egg-info/\n\n# cppcheck-htmlreport auto files\n/htmlreport/cppcheck_htmlreport/run.py\n\n# GDB configuration\n.gdbinit\n\n# pyinstaller output\n/addons/dist\n/addons/misra.spec\n/htmlreport/cppcheck-htmlreport.spec\n/htmlreport/dist\n\n# ccache folder in CI\n/.ccache\n\n# PCRE Windows files\n/externals/pcre.h\n/externals/pcre64.lib"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 2.7880859375,
          "content": "Andreas Bießmann <andreas@biessmann.de> <andreas.biessmann@corscience.de>\nAndrew Martin <andrew.c.martin@saic.com> acm4me\nAnkita Gupta <ankigupta@paypal.com> Ankita-gupta\nBenjamin Goose <gans+github@tngtech.com> <gansb+github@tngtech.com>\nDaniel Marjamäki <daniel.marjamaki@gmail.com> <hyd_danmar@users.sourceforge.net>\nDaniel Marjamäki <daniel.marjamaki@gmail.com> <danielm77@spray.se>\nDaniel Marjamäki <daniel.marjamaki@gmail.com> Daniel Marjam�ki\nDaniel Marjamäki <daniel.marjamaki@gmail.com> <daniel@daniel-laptop.(none)>\nDaniel Marjamäki <daniel.marjamaki@gmail.com> <daniel@raspberrypi.(none)>\nDeepak Gupta <deepak.dce01@gmail.com> deepak gupta\nEttl Martin <ettl.martin78@googlemail.com> Martin Ettl\nEttl Martin <ettl.martin78@googlemail.com> <ettl.martin@gmx.de>\nEttl Martin <ettl.martin78@googlemail.com> Martin Ettl <martin@martin.(none)>\nFrank Zingsheim <f.zingsheim@gmx.de> <zingsheim@users.sourceforge.net>\nGianluca Scacco <gscacco@users.sourceforge.net> <gianluca@gianluca-laptop.(none)>\nGianluca Scacco <gscacco@users.sourceforge.net> <giangy@giangy-desktop.(none)>\nHenrik Nilsson <henrik.nilsson@tvaaker.se> <henrik.nilsson@proceranetworks.com>\nKimmo Varis <kimmov@gmail.com> Kimmo varis\nKimmo Varis <kimmov@gmail.com> <kimmov@users.sourceforge.net>\nKimmo Varis <kimmov@gmail.com> <ext-kimmo.1.varis@nokia.com>\nKimmo Varis <kimmov@gmail.com> <kimmo@kimmoDesktop.(none)>\nKimmo Varis <kimmov@gmail.com> <kimmo@kimmo-VirtualBox.(none)>\nKimmo Varis <kimmov@gmail.com> <kimmo@kimmo-laptop.(none)>\nKimmo Varis <kimmov@gmail.com> <kimmov@kimmolaptop.(none)>\nLeandro Penz <lpenz@users.sourceforge.net> Leandro Lisboa Penz <llpenz@gmail.com>\nLeandro Penz <lpenz@users.sourceforge.net> Leandro Lisboa Penz <lpenz@notebook.penz>\nmakulik <g-makulik@t-online.de> unknown <g-makulik@t-online.de>\nNicolas Le Cam <kush@users.sourceforge.net> <niko.lecam@gmail.com>\nPete Johns <paj-github@johnsy.com> <pete@johnsy.com>\nPKEuS <philipp.kloke@web.de> Philipp K\nPKEuS <philipp.kloke@web.de> Philipp Kloke\nPKEuS <philipp.kloke@web.de> <philipp@kloke-witten.dyndns.org>\nReijo Tomperi <aggro80@users.sourceforge.net> <dvice_null@yahoo.com>\nRobert Reif <reif@earthlink.net> <reif@eartlink.net>\nRyan Pavlik <rpavlik@iastate.edu> <ryan.pavlik@snc.edu>\n\nSébastien Debrard <sebastien.debrard@gmail.com> seb777\nSébastien Debrard <sebastien.debrard@gmail.com> S�bastien Debrard\nSébastien Debrard <sebastien.debrard@gmail.com> Debrard Sébastien\n\nStefan Weil <weil@mail.berlios.de> <sw@weilnetz.de>\nTim Gerundt <tim@gerundt.de> <gerundt@users.sourceforge.net>\nVesa Pikki <spyree@gmail.com> <spyree@users.sourceforge.net>\nXhmikosR <xhmikosr@users.sourceforge.net> <xhmikosr@yahoo.com>\nZachary Blair <zack_blair@hotmail.com> <ack_blair@outlook.com>\nZachary Blair <zack_blair@hotmail.com> <zack_blair@outlook.com>\nZachary Blair <zack_blair@hotmail.com> zblair\n\n\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 1.9814453125,
          "content": "[MESSAGES CONTROL]\ndisable=\n        # W start\n        redefined-builtin,\n        broad-exception-caught,\n        fixme,\n        bare-except,\n        redefined-outer-name,\n        attribute-defined-outside-init,\n        unspecified-encoding,\n        global-statement,\n        protected-access,\n        broad-exception-raised,\n        subprocess-popen-preexec-fn,\n        logging-not-lazy,\n        unknown-option-value,\n        unused-wildcard-import,\n        wildcard-import,\n        unused-argument,\n        deprecated-module,\n        pointless-string-statement,\n        arguments-renamed,\n        duplicate-string-formatting-argument,\n        # C start\n        consider-using-f-string,\n        invalid-name,\n        line-too-long,\n        missing-module-docstring,\n        missing-function-docstring,\n        import-outside-toplevel,\n        missing-class-docstring,\n        superfluous-parens,\n        too-many-lines,\n        trailing-newlines,\n        missing-final-newline,\n        use-implicit-booleaness-not-len,\n        wrong-import-order,\n        use-implicit-booleaness-not-comparison,\n        consider-using-enumerate,\n        unnecessary-lambda-assignment,\n        consider-using-dict-items,\n        consider-iterating-dictionary,\n        # R start\n        duplicate-code,\n        consider-using-with,\n        too-many-statements,\n        too-many-branches,\n        too-many-locals,\n        too-many-arguments,\n        too-few-public-methods,\n        too-many-return-statements,\n        consider-using-in,\n        too-many-nested-blocks,\n        too-many-public-methods,\n        chained-comparison,\n        too-many-instance-attributes,\n        too-many-boolean-expressions,\n        use-a-generator,\n        too-many-positional-arguments\n[REPORTS]\nreports=no\n[TYPECHECK]\n# See https://stackoverflow.com/questions/10300082/how-to-prevent-python-pylint-complaining-about-socket-class-sendall-method\nignored-classes=SQLObject,_socketobject\n[MASTER]\ninit-hook='import sys; sys.path.append(\"./addons\")'\nsuggestion-mode=yes\n"
        },
        {
          "name": ".selfcheck_suppressions",
          "type": "blob",
          "size": 1.212890625,
          "content": "missingIncludeSystem\n\n# temporary suppressions - fix the warnings!\nsimplifyUsing:lib/valueptr.h\nvarid0:gui/projectfile.cpp\nnaming-privateMemberVariable:gui/test/cppchecklibrarydata/testcppchecklibrarydata.h\nsymbolDatabaseWarning:*/moc_*.cpp\nsimplifyUsing:*/moc_*.cpp\n\n# warnings in Qt generated code we cannot fix\nfuncArgNamesDifferent:*/moc_*.cpp\nnaming-varname:*/ui_*.h\nfunctionStatic:*/ui_fileview.h\n\n# --debug-warnings suppressions\nvalueFlowBailout\nvalueFlowBailoutIncompleteVar\nautoNoType\n\nnaming-varname:externals/simplecpp/simplecpp.h\nnaming-privateMemberVariable:externals/simplecpp/simplecpp.h\n\nvalueFlowMaxIterations:externals/tinyxml2/tinyxml2.cpp\n\n# TODO: these warnings need to be addressed upstream\nuninitMemberVar:externals/tinyxml2/tinyxml2.h\nnoExplicitConstructor:externals/tinyxml2/tinyxml2.h\nmissingOverride:externals/tinyxml2/tinyxml2.h\ninvalidPrintfArgType_sint:externals/tinyxml2/tinyxml2.h\nnaming-privateMemberVariable:externals/tinyxml2/tinyxml2.h\nfunctionStatic:externals/tinyxml2/tinyxml2.h\ninvalidPrintfArgType_uint:externals/tinyxml2/tinyxml2.cpp\nfuncArgNamesDifferent:externals/tinyxml2/tinyxml2.cpp\nnullPointerRedundantCheck:externals/tinyxml2/tinyxml2.cpp\nknownConditionTrueFalse:externals/tinyxml2/tinyxml2.cpp"
        },
        {
          "name": ".selfcheck_unused_suppressions",
          "type": "blob",
          "size": 0.26953125,
          "content": "# we are not using all methods of their interfaces\nunusedFunction:externals/*/*\n\n# usage is disabled\nunusedFunction:lib/symboldatabase.cpp\n\n# Q_OBJECT functions which are not called in our code\nunusedFunction:cmake.output.notest/gui/cppcheck-gui_autogen/*/moc_aboutdialog.cpp\n"
        },
        {
          "name": ".uncrustify.cfg",
          "type": "blob",
          "size": 121.17578125,
          "content": "# Uncrustify-0.72.0_f\n\n#\n# General options\n#\n\n# The type of line endings.\n#\n# Default: auto\nnewlines                        = auto     # lf/crlf/cr/auto\n\n# The original size of tabs in the input.\n#\n# Default: 8\ninput_tab_size                  = 4        # unsigned number\n\n# The size of tabs in the output (only used if align_with_tabs=true).\n#\n# Default: 8\noutput_tab_size                 = 4        # unsigned number\n\n# The ASCII value of the string escape char, usually 92 (\\) or (Pawn) 94 (^).\n#\n# Default: 92\nstring_escape_char              = 92       # unsigned number\n\n# Alternate string escape char (usually only used for Pawn).\n# Only works right before the quote char.\nstring_escape_char2             = 0        # unsigned number\n\n# Replace tab characters found in string literals with the escape sequence \\t\n# instead.\nstring_replace_tab_chars        = false    # true/false\n\n# Allow interpreting '>=' and '>>=' as part of a template in code like\n# 'void f(list<list<B>>=val);'. If true, 'assert(x<0 && y>=3)' will be broken.\n# Improvements to template detection may make this option obsolete.\ntok_split_gte                   = false    # true/false\n\n# Disable formatting of NL_CONT ('\\\\n') ended lines (e.g. multiline macros)\ndisable_processing_nl_cont      = false    # true/false\n\n# Specify the marker used in comments to disable processing of part of the\n# file.\n# The comment should be used alone in one line.\n#\n# Default:  *INDENT-OFF*\ndisable_processing_cmt          = \" *INDENT-OFF*\"      # string\n\n# Specify the marker used in comments to (re)enable processing in a file.\n# The comment should be used alone in one line.\n#\n# Default:  *INDENT-ON*\nenable_processing_cmt           = \" *INDENT-ON*\"     # string\n\n# Enable parsing of digraphs.\nenable_digraphs                 = false    # true/false\n\n# Add or remove the UTF-8 BOM (recommend 'remove').\nutf8_bom                        = ignore   # ignore/add/remove/force\n\n# If the file contains bytes with values between 128 and 255, but is not\n# UTF-8, then output as UTF-8.\nutf8_byte                       = false    # true/false\n\n# Force the output encoding to UTF-8.\nutf8_force                      = false    # true/false\n\n# Add or remove space between 'do' and '{'.\nsp_do_brace_open                = ignore   # ignore/add/remove/force\n\n# Add or remove space between '}' and 'while'.\nsp_brace_close_while            = ignore   # ignore/add/remove/force\n\n# Add or remove space between 'while' and '('.\nsp_while_paren_open             = add   # ignore/add/remove/force\n\n#\n# Spacing options\n#\n\n# Add or remove space around non-assignment symbolic operators ('+', '/', '%',\n# '<<', and so forth).\nsp_arith                        = ignore   # ignore/add/remove/force\n\n# Add or remove space around arithmetic operators '+' and '-'.\n#\n# Overrides sp_arith.\nsp_arith_additive               = ignore   # ignore/add/remove/force\n\n# Add or remove space around assignment operator '=', '+=', etc.\nsp_assign                       = ignore   # ignore/add/remove/force\n\n# Add or remove space around '=' in C++11 lambda capture specifications.\n#\n# Overrides sp_assign.\nsp_cpp_lambda_assign            = ignore   # ignore/add/remove/force\n\n# Add or remove space after the capture specification of a C++11 lambda when\n# an argument list is present, as in '[] <here> (int x){ ... }'.\nsp_cpp_lambda_square_paren      = ignore   # ignore/add/remove/force\n\n# Add or remove space after the capture specification of a C++11 lambda with\n# no argument list is present, as in '[] <here> { ... }'.\nsp_cpp_lambda_square_brace      = ignore   # ignore/add/remove/force\n\n# Add or remove space after the argument list of a C++11 lambda, as in\n# '[](int x) <here> { ... }'.\nsp_cpp_lambda_paren_brace       = ignore   # ignore/add/remove/force\n\n# Add or remove space between a lambda body and its call operator of an\n# immediately invoked lambda, as in '[]( ... ){ ... } <here> ( ... )'.\nsp_cpp_lambda_fparen            = ignore   # ignore/add/remove/force\n\n# Add or remove space around assignment operator '=' in a prototype.\n#\n# If set to ignore, use sp_assign.\nsp_assign_default               = ignore   # ignore/add/remove/force\n\n# Add or remove space before assignment operator '=', '+=', etc.\n#\n# Overrides sp_assign.\nsp_before_assign                = ignore   # ignore/add/remove/force\n\n# Add or remove space after assignment operator '=', '+=', etc.\n#\n# Overrides sp_assign.\nsp_after_assign                 = ignore   # ignore/add/remove/force\n\n# Add or remove space in 'NS_ENUM ('.\nsp_enum_paren                   = ignore   # ignore/add/remove/force\n\n# Add or remove space around assignment '=' in enum.\nsp_enum_assign                  = ignore   # ignore/add/remove/force\n\n# Add or remove space before assignment '=' in enum.\n#\n# Overrides sp_enum_assign.\nsp_enum_before_assign           = ignore   # ignore/add/remove/force\n\n# Add or remove space after assignment '=' in enum.\n#\n# Overrides sp_enum_assign.\nsp_enum_after_assign            = ignore   # ignore/add/remove/force\n\n# Add or remove space around assignment ':' in enum.\nsp_enum_colon                   = ignore   # ignore/add/remove/force\n\n# Add or remove space around preprocessor '##' concatenation operator.\n#\n# Default: add\nsp_pp_concat                    = add      # ignore/add/remove/force\n\n# Add or remove space after preprocessor '#' stringify operator.\n# Also affects the '#@' charizing operator.\nsp_pp_stringify                 = ignore   # ignore/add/remove/force\n\n# Add or remove space before preprocessor '#' stringify operator\n# as in '#define x(y) L#y'.\nsp_before_pp_stringify          = ignore   # ignore/add/remove/force\n\n# Add or remove space around boolean operators '&&' and '||'.\nsp_bool                         = force    # ignore/add/remove/force\n\n# Add or remove space around compare operator '<', '>', '==', etc.\nsp_compare                      = ignore   # ignore/add/remove/force\n\n# Add or remove space inside '(' and ')'.\nsp_inside_paren                 = remove   # ignore/add/remove/force\n\n# Add or remove space between nested parentheses, i.e. '((' vs. ') )'.\nsp_paren_paren                  = remove   # ignore/add/remove/force\n\n# Add or remove space between back-to-back parentheses, i.e. ')(' vs. ') ('.\nsp_cparen_oparen                = ignore   # ignore/add/remove/force\n\n# Whether to balance spaces inside nested parentheses.\nsp_balance_nested_parens        = false    # true/false\n\n# Add or remove space between ')' and '{'.\nsp_paren_brace                  = force    # ignore/add/remove/force\n\n# Add or remove space between nested braces, i.e. '{{' vs '{ {'.\nsp_brace_brace                  = ignore   # ignore/add/remove/force\n\n# Add or remove space before pointer star '*'.\nsp_before_ptr_star              = ignore   # ignore/add/remove/force\n\n# Add or remove space before pointer star '*' that isn't followed by a\n# variable name. If set to ignore, sp_before_ptr_star is used instead.\nsp_before_unnamed_ptr_star      = ignore   # ignore/add/remove/force\n\n# Add or remove space between pointer stars '*'.\nsp_between_ptr_star             = remove   # ignore/add/remove/force\n\n# Add or remove space after pointer star '*', if followed by a word.\n#\n# Overrides sp_type_func.\nsp_after_ptr_star               = ignore   # ignore/add/remove/force\n\n# Add or remove space after pointer caret '^', if followed by a word.\nsp_after_ptr_block_caret        = ignore   # ignore/add/remove/force\n\n# Add or remove space after pointer star '*', if followed by a qualifier.\nsp_after_ptr_star_qualifier     = ignore   # ignore/add/remove/force\n\n# Add or remove space after a pointer star '*', if followed by a function\n# prototype or function definition.\n#\n# Overrides sp_after_ptr_star and sp_type_func.\nsp_after_ptr_star_func          = ignore   # ignore/add/remove/force\n\n# Add or remove space after a pointer star '*', if followed by an open\n# parenthesis, as in 'void* (*)().\nsp_ptr_star_paren               = ignore   # ignore/add/remove/force\n\n# Add or remove space before a pointer star '*', if followed by a function\n# prototype or function definition.\nsp_before_ptr_star_func         = ignore   # ignore/add/remove/force\n\n# Add or remove space before a reference sign '&'.\nsp_before_byref                 = ignore   # ignore/add/remove/force\n\n# Add or remove space before a reference sign '&' that isn't followed by a\n# variable name. If set to ignore, sp_before_byref is used instead.\nsp_before_unnamed_byref         = ignore   # ignore/add/remove/force\n\n# Add or remove space after reference sign '&', if followed by a word.\n#\n# Overrides sp_type_func.\nsp_after_byref                  = ignore   # ignore/add/remove/force\n\n# Add or remove space after a reference sign '&', if followed by a function\n# prototype or function definition.\n#\n# Overrides sp_after_byref and sp_type_func.\nsp_after_byref_func             = ignore   # ignore/add/remove/force\n\n# Add or remove space before a reference sign '&', if followed by a function\n# prototype or function definition.\nsp_before_byref_func            = ignore   # ignore/add/remove/force\n\n# Add or remove space between type and word. In cases where total removal of\n# whitespace would be a syntax error, a value of 'remove' is treated the same\n# as 'force'.\n#\n# This also affects some other instances of space following a type that are\n# not covered by other options; for example, between the return type and\n# parenthesis of a function type template argument, between the type and\n# parenthesis of an array parameter, or between 'decltype(...)' and the\n# following word.\n#\n# Default: force\nsp_after_type                   = force    # ignore/add/remove/force\n\n# Add or remove space between 'decltype(...)' and word.\n#\n# Overrides sp_after_type.\nsp_after_decltype               = ignore   # ignore/add/remove/force\n\n# (D) Add or remove space before the parenthesis in the D constructs\n# 'template Foo(' and 'class Foo('.\nsp_before_template_paren        = ignore   # ignore/add/remove/force\n\n# Add or remove space between 'template' and '<'.\n# If set to ignore, sp_before_angle is used.\nsp_template_angle               = ignore   # ignore/add/remove/force\n\n# Add or remove space before '<'.\nsp_before_angle                 = remove   # ignore/add/remove/force\n\n# Add or remove space inside '<' and '>'.\nsp_inside_angle                 = remove   # ignore/add/remove/force\n\n# Add or remove space inside '<>'.\nsp_inside_angle_empty           = ignore   # ignore/add/remove/force\n\n# Add or remove space between '>' and ':'.\nsp_angle_colon                  = ignore   # ignore/add/remove/force\n\n# Add or remove space after '>'.\nsp_after_angle                  = add   # ignore/add/remove/force\n\n# Add or remove space between '>' and '(' as found in 'new List<byte>(foo);'.\nsp_angle_paren                  = remove   # ignore/add/remove/force\n\n# Add or remove space between '>' and '()' as found in 'new List<byte>();'.\nsp_angle_paren_empty            = ignore   # ignore/add/remove/force\n\n# Add or remove space between '>' and a word as in 'List<byte> m;' or\n# 'template <typename T> static ...'.\nsp_angle_word                   = add   # ignore/add/remove/force\n\n# Add or remove space between '>' and '>' in '>>' (template stuff).\n#\n# Default: add\nsp_angle_shift                  = ignore      # ignore/add/remove/force\n\n# (C++11) Permit removal of the space between '>>' in 'foo<bar<int> >'. Note\n# that sp_angle_shift cannot remove the space without this option.\nsp_permit_cpp11_shift           = true    # true/false\n\n# Add or remove space before '(' of control statements ('if', 'for', 'switch',\n# 'while', etc.).\nsp_before_sparen                = force    # ignore/add/remove/force\n\n# Add or remove space inside '(' and ')' of control statements.\nsp_inside_sparen                = remove   # ignore/add/remove/force\n\n# Add or remove space after '(' of control statements.\n#\n# Overrides sp_inside_sparen.\nsp_inside_sparen_open           = ignore   # ignore/add/remove/force\n\n# Add or remove space before ')' of control statements.\n#\n# Overrides sp_inside_sparen.\nsp_inside_sparen_close          = ignore   # ignore/add/remove/force\n\n# Add or remove space after ')' of control statements.\nsp_after_sparen                 = force    # ignore/add/remove/force\n\n# Add or remove space between ')' and '{' of of control statements.\nsp_sparen_brace                 = force    # ignore/add/remove/force\n\n# (D) Add or remove space between 'invariant' and '('.\nsp_invariant_paren              = ignore   # ignore/add/remove/force\n\n# (D) Add or remove space after the ')' in 'invariant (C) c'.\nsp_after_invariant_paren        = ignore   # ignore/add/remove/force\n\n# Add or remove space before empty statement ';' on 'if', 'for' and 'while'.\nsp_special_semi                 = ignore   # ignore/add/remove/force\n\n# Add or remove space before ';'.\n#\n# Default: remove\nsp_before_semi                  = remove   # ignore/add/remove/force\n\n# Add or remove space before ';' in non-empty 'for' statements.\nsp_before_semi_for              = remove   # ignore/add/remove/force\n\n# Add or remove space before a semicolon of an empty part of a for statement.\nsp_before_semi_for_empty        = ignore   # ignore/add/remove/force\n\n# Add or remove space after ';', except when followed by a comment.\n#\n# Default: add\nsp_after_semi                   = add      # ignore/add/remove/force\n\n# Add or remove space after ';' in non-empty 'for' statements.\n#\n# Default: force\nsp_after_semi_for               = force    # ignore/add/remove/force\n\n# Add or remove space after the final semicolon of an empty part of a for\n# statement, as in 'for ( ; ; <here> )'.\nsp_after_semi_for_empty         = remove   # ignore/add/remove/force\n\n# Add or remove space before '[' (except '[]').\nsp_before_square                = ignore   # ignore/add/remove/force\n\n# Add or remove space before '[' for a variable definition.\n#\n# Default: remove\nsp_before_vardef_square         = remove   # ignore/add/remove/force\n\n# Add or remove space before '[' for asm block.\nsp_before_square_asm_block      = ignore   # ignore/add/remove/force\n\n# Add or remove space before '[]'.\nsp_before_squares               = remove   # ignore/add/remove/force\n\n# Add or remove space before C++17 structured bindings.\nsp_cpp_before_struct_binding    = ignore   # ignore/add/remove/force\n\n# Add or remove space inside a non-empty '[' and ']'.\nsp_inside_square                = remove   # ignore/add/remove/force\n\n# Add or remove space inside '[]'.\nsp_inside_square_empty          = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove space inside a non-empty Objective-C boxed array '@[' and\n# ']'. If set to ignore, sp_inside_square is used.\nsp_inside_square_oc_array       = ignore   # ignore/add/remove/force\n\n# Add or remove space after ',', i.e. 'a,b' vs. 'a, b'.\nsp_after_comma                  = ignore   # ignore/add/remove/force\n\n# Add or remove space before ','.\n#\n# Default: remove\nsp_before_comma                 = remove   # ignore/add/remove/force\n\n# (C#) Add or remove space between ',' and ']' in multidimensional array type\n# like 'int[,,]'.\nsp_after_mdatype_commas         = ignore   # ignore/add/remove/force\n\n# (C#) Add or remove space between '[' and ',' in multidimensional array type\n# like 'int[,,]'.\nsp_before_mdatype_commas        = ignore   # ignore/add/remove/force\n\n# (C#) Add or remove space between ',' in multidimensional array type\n# like 'int[,,]'.\nsp_between_mdatype_commas       = ignore   # ignore/add/remove/force\n\n# Add or remove space between an open parenthesis and comma,\n# i.e. '(,' vs. '( ,'.\n#\n# Default: force\nsp_paren_comma                  = force    # ignore/add/remove/force\n\n# Add or remove space before the variadic '...' when preceded by a\n# non-punctuator.\nsp_before_ellipsis              = ignore   # ignore/add/remove/force\n\n# Add or remove space between a type and '...'.\nsp_type_ellipsis                = ignore   # ignore/add/remove/force\n\n# (D) Add or remove space between a type and '?'.\nsp_type_question                = ignore   # ignore/add/remove/force\n\n# Add or remove space between ')' and '...'.\nsp_paren_ellipsis               = ignore   # ignore/add/remove/force\n\n# Add or remove space between ')' and a qualifier such as 'const'.\nsp_paren_qualifier              = ignore   # ignore/add/remove/force\n\n# Add or remove space between ')' and 'noexcept'.\nsp_paren_noexcept               = ignore   # ignore/add/remove/force\n\n# Add or remove space after class ':'.\nsp_after_class_colon            = force    # ignore/add/remove/force\n\n# Add or remove space before class ':'.\nsp_before_class_colon           = force    # ignore/add/remove/force\n\n# Add or remove space after class constructor ':'.\nsp_after_constr_colon           = ignore   # ignore/add/remove/force\n\n# Add or remove space before class constructor ':'.\nsp_before_constr_colon          = ignore   # ignore/add/remove/force\n\n# Add or remove space before case ':'.\n#\n# Default: remove\nsp_before_case_colon            = remove   # ignore/add/remove/force\n\n# Add or remove space between 'operator' and operator sign.\nsp_after_operator               = ignore   # ignore/add/remove/force\n\n# Add or remove space between the operator symbol and the open parenthesis, as\n# in 'operator ++('.\nsp_after_operator_sym           = ignore   # ignore/add/remove/force\n\n# Overrides sp_after_operator_sym when the operator has no arguments, as in\n# 'operator *()'.\nsp_after_operator_sym_empty     = ignore   # ignore/add/remove/force\n\n# Add or remove space after C/D cast, i.e. 'cast(int)a' vs. 'cast(int) a' or\n# '(int)a' vs. '(int) a'.\nsp_after_cast                   = ignore   # ignore/add/remove/force\n\n# Add or remove spaces inside cast parentheses.\nsp_inside_paren_cast            = ignore   # ignore/add/remove/force\n\n# Add or remove space between the type and open parenthesis in a C++ cast,\n# i.e. 'int(exp)' vs. 'int (exp)'.\nsp_cpp_cast_paren               = ignore   # ignore/add/remove/force\n\n# Add or remove space between 'sizeof' and '('.\nsp_sizeof_paren                 = ignore   # ignore/add/remove/force\n\n# Add or remove space between 'sizeof' and '...'.\nsp_sizeof_ellipsis              = ignore   # ignore/add/remove/force\n\n# Add or remove space between 'sizeof...' and '('.\nsp_sizeof_ellipsis_paren        = ignore   # ignore/add/remove/force\n\n# Add or remove space between 'decltype' and '('.\nsp_decltype_paren               = ignore   # ignore/add/remove/force\n\n# (Pawn) Add or remove space after the tag keyword.\nsp_after_tag                    = ignore   # ignore/add/remove/force\n\n# Add or remove space inside enum '{' and '}'.\nsp_inside_braces_enum           = ignore   # ignore/add/remove/force\n\n# Add or remove space inside struct/union '{' and '}'.\nsp_inside_braces_struct         = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove space inside Objective-C boxed dictionary '{' and '}'\nsp_inside_braces_oc_dict        = ignore   # ignore/add/remove/force\n\n# Add or remove space after open brace in an unnamed temporary\n# direct-list-initialization.\nsp_after_type_brace_init_lst_open = ignore   # ignore/add/remove/force\n\n# Add or remove space before close brace in an unnamed temporary\n# direct-list-initialization.\nsp_before_type_brace_init_lst_close = ignore   # ignore/add/remove/force\n\n# Add or remove space inside an unnamed temporary direct-list-initialization.\nsp_inside_type_brace_init_lst   = ignore   # ignore/add/remove/force\n\n# Add or remove space inside '{' and '}'.\nsp_inside_braces                = ignore   # ignore/add/remove/force\n\n# Add or remove space inside '{}'.\nsp_inside_braces_empty          = remove   # ignore/add/remove/force\n\n# Add or remove space around trailing return operator '->'.\nsp_trailing_return              = ignore   # ignore/add/remove/force\n\n# Add or remove space between return type and function name. A minimum of 1\n# is forced except for pointer return types.\nsp_type_func                    = ignore   # ignore/add/remove/force\n\n# Add or remove space between type and open brace of an unnamed temporary\n# direct-list-initialization.\nsp_type_brace_init_lst          = ignore   # ignore/add/remove/force\n\n# Add or remove space between function name and '(' on function declaration.\nsp_func_proto_paren             = ignore   # ignore/add/remove/force\n\n# Add or remove space between function name and '()' on function declaration\n# without parameters.\nsp_func_proto_paren_empty       = ignore   # ignore/add/remove/force\n\n# Add or remove space between function name and '(' with a typedef specifier.\nsp_func_type_paren              = ignore   # ignore/add/remove/force\n\n# Add or remove space between alias name and '(' of a non-pointer function type typedef.\nsp_func_def_paren               = ignore   # ignore/add/remove/force\n\n# Add or remove space between function name and '()' on function definition\n# without parameters.\nsp_func_def_paren_empty         = ignore   # ignore/add/remove/force\n\n# Add or remove space inside empty function '()'.\n# Overrides sp_after_angle unless use_sp_after_angle_always is set to true.\nsp_inside_fparens               = ignore   # ignore/add/remove/force\n\n# Add or remove space inside function '(' and ')'.\nsp_inside_fparen                = ignore   # ignore/add/remove/force\n\n# Add or remove space inside the first parentheses in a function type, as in\n# 'void (*x)(...)'.\nsp_inside_tparen                = ignore   # ignore/add/remove/force\n\n# Add or remove space between the ')' and '(' in a function type, as in\n# 'void (*x)(...)'.\nsp_after_tparen_close           = ignore   # ignore/add/remove/force\n\n# Add or remove space between ']' and '(' when part of a function call.\nsp_square_fparen                = ignore   # ignore/add/remove/force\n\n# Add or remove space between ')' and '{' of function.\nsp_fparen_brace                 = ignore   # ignore/add/remove/force\n\n# Add or remove space between ')' and '{' of a function call in object\n# initialization.\n#\n# Overrides sp_fparen_brace.\nsp_fparen_brace_initializer     = ignore   # ignore/add/remove/force\n\n# (Java) Add or remove space between ')' and '{{' of double brace initializer.\nsp_fparen_dbrace                = ignore   # ignore/add/remove/force\n\n# Add or remove space between function name and '(' on function calls.\nsp_func_call_paren              = ignore   # ignore/add/remove/force\n\n# Add or remove space between function name and '()' on function calls without\n# parameters. If set to ignore (the default), sp_func_call_paren is used.\nsp_func_call_paren_empty        = ignore   # ignore/add/remove/force\n\n# Add or remove space between the user function name and '(' on function\n# calls. You need to set a keyword to be a user function in the config file,\n# like:\n#   set func_call_user tr _ i18n\nsp_func_call_user_paren         = ignore   # ignore/add/remove/force\n\n# Add or remove space inside user function '(' and ')'.\nsp_func_call_user_inside_fparen = ignore   # ignore/add/remove/force\n\n# Add or remove space between nested parentheses with user functions,\n# i.e. '((' vs. '( ('.\nsp_func_call_user_paren_paren   = ignore   # ignore/add/remove/force\n\n# Add or remove space between a constructor/destructor and the open\n# parenthesis.\nsp_func_class_paren             = ignore   # ignore/add/remove/force\n\n# Add or remove space between a constructor without parameters or destructor\n# and '()'.\nsp_func_class_paren_empty       = ignore   # ignore/add/remove/force\n\n# Add or remove space between 'return' and '('.\nsp_return_paren                 = ignore   # ignore/add/remove/force\n\n# Add or remove space between 'return' and '{'.\nsp_return_brace                 = ignore   # ignore/add/remove/force\n\n# Add or remove space between '__attribute__' and '('.\nsp_attribute_paren              = ignore   # ignore/add/remove/force\n\n# Add or remove space between 'defined' and '(' in '#if defined (FOO)'.\nsp_defined_paren                = ignore   # ignore/add/remove/force\n\n# Add or remove space between 'throw' and '(' in 'throw (something)'.\nsp_throw_paren                  = ignore   # ignore/add/remove/force\n\n# Add or remove space between 'throw' and anything other than '(' as in\n# '@throw [...];'.\nsp_after_throw                  = ignore   # ignore/add/remove/force\n\n# Add or remove space between 'catch' and '(' in 'catch (something) { }'.\n# If set to ignore, sp_before_sparen is used.\nsp_catch_paren                  = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove space between '@catch' and '('\n# in '@catch (something) { }'. If set to ignore, sp_catch_paren is used.\nsp_oc_catch_paren               = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove space before Objective-C protocol list\n# as in '@protocol Protocol<here><Protocol_A>' or '@interface MyClass : NSObject<here><MyProtocol>'.\nsp_before_oc_proto_list         = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove space between class name and '('\n# in '@interface className(categoryName)<ProtocolName>:BaseClass'\nsp_oc_classname_paren           = ignore   # ignore/add/remove/force\n\n# (D) Add or remove space between 'version' and '('\n# in 'version (something) { }'. If set to ignore, sp_before_sparen is used.\nsp_version_paren                = ignore   # ignore/add/remove/force\n\n# (D) Add or remove space between 'scope' and '('\n# in 'scope (something) { }'. If set to ignore, sp_before_sparen is used.\nsp_scope_paren                  = ignore   # ignore/add/remove/force\n\n# Add or remove space between 'super' and '(' in 'super (something)'.\n#\n# Default: remove\nsp_super_paren                  = remove   # ignore/add/remove/force\n\n# Add or remove space between 'this' and '(' in 'this (something)'.\n#\n# Default: remove\nsp_this_paren                   = remove   # ignore/add/remove/force\n\n# Add or remove space between a macro name and its definition.\nsp_macro                        = ignore   # ignore/add/remove/force\n\n# Add or remove space between a macro function ')' and its definition.\nsp_macro_func                   = ignore   # ignore/add/remove/force\n\n# Add or remove space between 'else' and '{' if on the same line.\nsp_else_brace                   = force    # ignore/add/remove/force\n\n# Add or remove space between '}' and 'else' if on the same line.\nsp_brace_else                   = force    # ignore/add/remove/force\n\n# Add or remove space between '}' and the name of a typedef on the same line.\nsp_brace_typedef                = ignore   # ignore/add/remove/force\n\n# Add or remove space before the '{' of a 'catch' statement, if the '{' and\n# 'catch' are on the same line, as in 'catch (decl) <here> {'.\nsp_catch_brace                  = force    # ignore/add/remove/force\n\n# (OC) Add or remove space before the '{' of a '@catch' statement, if the '{'\n# and '@catch' are on the same line, as in '@catch (decl) <here> {'.\n# If set to ignore, sp_catch_brace is used.\nsp_oc_catch_brace               = ignore   # ignore/add/remove/force\n\n# Add or remove space between '}' and 'catch' if on the same line.\nsp_brace_catch                  = force    # ignore/add/remove/force\n\n# (OC) Add or remove space between '}' and '@catch' if on the same line.\n# If set to ignore, sp_brace_catch is used.\nsp_oc_brace_catch               = ignore   # ignore/add/remove/force\n\n# Add or remove space between 'finally' and '{' if on the same line.\nsp_finally_brace                = ignore   # ignore/add/remove/force\n\n# Add or remove space between '}' and 'finally' if on the same line.\nsp_brace_finally                = ignore   # ignore/add/remove/force\n\n# Add or remove space between 'try' and '{' if on the same line.\nsp_try_brace                    = ignore   # ignore/add/remove/force\n\n# Add or remove space between get/set and '{' if on the same line.\nsp_getset_brace                 = ignore   # ignore/add/remove/force\n\n# Add or remove space between a variable and '{' for C++ uniform\n# initialization.\nsp_word_brace_init_lst          = ignore   # ignore/add/remove/force\n\n# Add or remove space between a variable and '{' for a namespace.\n#\n# Default: add\nsp_word_brace_ns                = add      # ignore/add/remove/force\n\n# Add or remove space before the '::' operator.\nsp_before_dc                    = ignore   # ignore/add/remove/force\n\n# Add or remove space after the '::' operator.\nsp_after_dc                     = ignore   # ignore/add/remove/force\n\n# (D) Add or remove around the D named array initializer ':' operator.\nsp_d_array_colon                = ignore   # ignore/add/remove/force\n\n# Add or remove space after the '!' (not) unary operator.\n#\n# Default: remove\nsp_not                          = remove   # ignore/add/remove/force\n\n# Add or remove space after the '~' (invert) unary operator.\n#\n# Default: remove\nsp_inv                          = remove   # ignore/add/remove/force\n\n# Add or remove space after the '&' (address-of) unary operator. This does not\n# affect the spacing after a '&' that is part of a type.\n#\n# Default: remove\nsp_addr                         = remove   # ignore/add/remove/force\n\n# Add or remove space around the '.' or '->' operators.\n#\n# Default: remove\nsp_member                       = remove   # ignore/add/remove/force\n\n# Add or remove space after the '*' (dereference) unary operator. This does\n# not affect the spacing after a '*' that is part of a type.\n#\n# Default: remove\nsp_deref                        = remove   # ignore/add/remove/force\n\n# Add or remove space after '+' or '-', as in 'x = -5' or 'y = +7'.\n#\n# Default: remove\nsp_sign                         = remove   # ignore/add/remove/force\n\n# Add or remove space between '++' and '--' the word to which it is being\n# applied, as in '(--x)' or 'y++;'.\n#\n# Default: remove\nsp_incdec                       = remove   # ignore/add/remove/force\n\n# Add or remove space before a backslash-newline at the end of a line.\n#\n# Default: add\nsp_before_nl_cont               = add      # ignore/add/remove/force\n\n# (OC) Add or remove space after the scope '+' or '-', as in '-(void) foo;'\n# or '+(int) bar;'.\nsp_after_oc_scope               = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove space after the colon in message specs,\n# i.e. '-(int) f:(int) x;' vs. '-(int) f: (int) x;'.\nsp_after_oc_colon               = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove space before the colon in message specs,\n# i.e. '-(int) f: (int) x;' vs. '-(int) f : (int) x;'.\nsp_before_oc_colon              = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove space after the colon in immutable dictionary expression\n# 'NSDictionary *test = @{@\"foo\" :@\"bar\"};'.\nsp_after_oc_dict_colon          = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove space before the colon in immutable dictionary expression\n# 'NSDictionary *test = @{@\"foo\" :@\"bar\"};'.\nsp_before_oc_dict_colon         = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove space after the colon in message specs,\n# i.e. '[object setValue:1];' vs. '[object setValue: 1];'.\nsp_after_send_oc_colon          = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove space before the colon in message specs,\n# i.e. '[object setValue:1];' vs. '[object setValue :1];'.\nsp_before_send_oc_colon         = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove space after the (type) in message specs,\n# i.e. '-(int)f: (int) x;' vs. '-(int)f: (int)x;'.\nsp_after_oc_type                = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove space after the first (type) in message specs,\n# i.e. '-(int) f:(int)x;' vs. '-(int)f:(int)x;'.\nsp_after_oc_return_type         = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove space between '@selector' and '(',\n# i.e. '@selector(msgName)' vs. '@selector (msgName)'.\n# Also applies to '@protocol()' constructs.\nsp_after_oc_at_sel              = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove space between '@selector(x)' and the following word,\n# i.e. '@selector(foo) a:' vs. '@selector(foo)a:'.\nsp_after_oc_at_sel_parens       = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove space inside '@selector' parentheses,\n# i.e. '@selector(foo)' vs. '@selector( foo )'.\n# Also applies to '@protocol()' constructs.\nsp_inside_oc_at_sel_parens      = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove space before a block pointer caret,\n# i.e. '^int (int arg){...}' vs. ' ^int (int arg){...}'.\nsp_before_oc_block_caret        = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove space after a block pointer caret,\n# i.e. '^int (int arg){...}' vs. '^ int (int arg){...}'.\nsp_after_oc_block_caret         = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove space between the receiver and selector in a message,\n# as in '[receiver selector ...]'.\nsp_after_oc_msg_receiver        = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove space after '@property'.\nsp_after_oc_property            = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove space between '@synchronized' and the open parenthesis,\n# i.e. '@synchronized(foo)' vs. '@synchronized (foo)'.\nsp_after_oc_synchronized        = ignore   # ignore/add/remove/force\n\n# Add or remove space around the ':' in 'b ? t : f'.\nsp_cond_colon                   = ignore   # ignore/add/remove/force\n\n# Add or remove space before the ':' in 'b ? t : f'.\n#\n# Overrides sp_cond_colon.\nsp_cond_colon_before            = ignore   # ignore/add/remove/force\n\n# Add or remove space after the ':' in 'b ? t : f'.\n#\n# Overrides sp_cond_colon.\nsp_cond_colon_after             = ignore   # ignore/add/remove/force\n\n# Add or remove space around the '?' in 'b ? t : f'.\nsp_cond_question                = ignore   # ignore/add/remove/force\n\n# Add or remove space before the '?' in 'b ? t : f'.\n#\n# Overrides sp_cond_question.\nsp_cond_question_before         = ignore   # ignore/add/remove/force\n\n# Add or remove space after the '?' in 'b ? t : f'.\n#\n# Overrides sp_cond_question.\nsp_cond_question_after          = ignore   # ignore/add/remove/force\n\n# In the abbreviated ternary form '(a ?: b)', add or remove space between '?'\n# and ':'.\n#\n# Overrides all other sp_cond_* options.\nsp_cond_ternary_short           = ignore   # ignore/add/remove/force\n\n# Fix the spacing between 'case' and the label. Only 'ignore' and 'force' make\n# sense here.\nsp_case_label                   = ignore   # ignore/add/remove/force\n\n# (D) Add or remove space around the D '..' operator.\nsp_range                        = ignore   # ignore/add/remove/force\n\n# Add or remove space after ':' in a Java/C++11 range-based 'for',\n# as in 'for (Type var : expr)'.\nsp_after_for_colon              = ignore   # ignore/add/remove/force\n\n# Add or remove space before ':' in a Java/C++11 range-based 'for',\n# as in 'for (Type var : expr)'.\nsp_before_for_colon             = ignore   # ignore/add/remove/force\n\n# (D) Add or remove space between 'extern' and '(' as in 'extern (C)'.\nsp_extern_paren                 = ignore   # ignore/add/remove/force\n\n# Add or remove space after the opening of a C++ comment,\n# i.e. '// A' vs. '//A'.\nsp_cmt_cpp_start                = ignore   # ignore/add/remove/force\n\n# If true, space is added with sp_cmt_cpp_start will be added after doxygen\n# sequences like '///', '///<', '//!' and '//!<'.\nsp_cmt_cpp_doxygen              = false    # true/false\n\n# If true, space is added with sp_cmt_cpp_start will be added after Qt\n# translator or meta-data comments like '//:', '//=', and '//~'.\nsp_cmt_cpp_qttr                 = false    # true/false\n\n# Add or remove space between #else or #endif and a trailing comment.\nsp_endif_cmt                    = ignore   # ignore/add/remove/force\n\n# Add or remove space after 'new', 'delete' and 'delete[]'.\nsp_after_new                    = ignore   # ignore/add/remove/force\n\n# Add or remove space between 'new' and '(' in 'new()'.\nsp_between_new_paren            = ignore   # ignore/add/remove/force\n\n# Add or remove space between ')' and type in 'new(foo) BAR'.\nsp_after_newop_paren            = ignore   # ignore/add/remove/force\n\n# Add or remove space inside parenthesis of the new operator\n# as in 'new(foo) BAR'.\nsp_inside_newop_paren           = ignore   # ignore/add/remove/force\n\n# Add or remove space after the open parenthesis of the new operator,\n# as in 'new(foo) BAR'.\n#\n# Overrides sp_inside_newop_paren.\nsp_inside_newop_paren_open      = ignore   # ignore/add/remove/force\n\n# Add or remove space before the close parenthesis of the new operator,\n# as in 'new(foo) BAR'.\n#\n# Overrides sp_inside_newop_paren.\nsp_inside_newop_paren_close     = ignore   # ignore/add/remove/force\n\n# Add or remove space before a trailing or embedded comment.\nsp_before_tr_emb_cmt            = ignore   # ignore/add/remove/force\n\n# Number of spaces before a trailing or embedded comment.\nsp_num_before_tr_emb_cmt        = 0        # unsigned number\n\n# (Java) Add or remove space between an annotation and the open parenthesis.\nsp_annotation_paren             = ignore   # ignore/add/remove/force\n\n# If true, vbrace tokens are dropped to the previous token and skipped.\nsp_skip_vbrace_tokens           = false    # true/false\n\n# Add or remove space after 'noexcept'.\nsp_after_noexcept               = ignore   # ignore/add/remove/force\n\n# Add or remove space after '_'.\nsp_vala_after_translation       = ignore   # ignore/add/remove/force\n\n# If true, a <TAB> is inserted after #define.\nforce_tab_after_define          = false    # true/false\n\n#\n# Indenting options\n#\n\n# The number of columns to indent per level. Usually 2, 3, 4, or 8.\n#\n# Default: 8\nindent_columns                  = 4        # unsigned number\n\n# The continuation indent. If non-zero, this overrides the indent of '(', '['\n# and '=' continuation indents. Negative values are OK; negative value is\n# absolute and not increased for each '(' or '[' level.\n#\n# For FreeBSD, this is set to 4.\nindent_continue                 = 0        # number\n\n# The continuation indent, only for class header line(s). If non-zero, this\n# overrides the indent of 'class' continuation indents.\nindent_continue_class_head      = 0        # unsigned number\n\n# Whether to indent empty lines (i.e. lines which contain only spaces before\n# the newline character).\nindent_single_newlines          = false    # true/false\n\n# The continuation indent for func_*_param if they are true. If non-zero, this\n# overrides the indent.\nindent_param                    = 0        # unsigned number\n\n# How to use tabs when indenting code.\n#\n# 0: Spaces only\n# 1: Indent with tabs to brace level, align with spaces (default)\n# 2: Indent and align with tabs, using spaces when not on a tabstop\n#\n# Default: 1\nindent_with_tabs                = 0        # unsigned number\n\n# Whether to indent comments that are not at a brace level with tabs on a\n# tabstop. Requires indent_with_tabs=2. If false, will use spaces.\nindent_cmt_with_tabs            = false    # true/false\n\n# Whether to indent strings broken by '\\' so that they line up.\nindent_align_string             = false    # true/false\n\n# The number of spaces to indent multi-line XML strings.\n# Requires indent_align_string=true.\nindent_xml_string               = 0        # unsigned number\n\n# Spaces to indent '{' from level.\nindent_brace                    = 0        # unsigned number\n\n# Whether braces are indented to the body level.\nindent_braces                   = false    # true/false\n\n# Whether to disable indenting function braces if indent_braces=true.\nindent_braces_no_func           = false    # true/false\n\n# Whether to disable indenting class braces if indent_braces=true.\nindent_braces_no_class          = false    # true/false\n\n# Whether to disable indenting struct braces if indent_braces=true.\nindent_braces_no_struct         = false    # true/false\n\n# Whether to indent based on the size of the brace parent,\n# i.e. 'if' => 3 spaces, 'for' => 4 spaces, etc.\nindent_brace_parent             = false    # true/false\n\n# Whether to indent based on the open parenthesis instead of the open brace\n# in '({\\n'.\nindent_paren_open_brace         = false    # true/false\n\n# (C#) Whether to indent the brace of a C# delegate by another level.\nindent_cs_delegate_brace        = false    # true/false\n\n# (C#) Whether to indent a C# delegate (to handle delegates with no brace) by\n# another level.\nindent_cs_delegate_body         = false    # true/false\n\n# Whether to indent the body of a 'namespace'.\nindent_namespace                = true    # true/false\n\n# Whether to indent only the first namespace, and not any nested namespaces.\n# Requires indent_namespace=true.\nindent_namespace_single_indent  = false    # true/false\n\n# The number of spaces to indent a namespace block.\n# If set to zero, use the value indent_columns\nindent_namespace_level          = 0        # unsigned number\n\n# If the body of the namespace is longer than this number, it won't be\n# indented. Requires indent_namespace=true. 0 means no limit.\nindent_namespace_limit          = 0        # unsigned number\n\n# Whether the 'extern \"C\"' body is indented.\nindent_extern                   = false    # true/false\n\n# Whether the 'class' body is indented.\nindent_class                    = true    # true/false\n\n# Whether to indent the stuff after a leading base class colon.\nindent_class_colon              = false    # true/false\n\n# Whether to indent based on a class colon instead of the stuff after the\n# colon. Requires indent_class_colon=true.\nindent_class_on_colon           = false    # true/false\n\n# Whether to indent the stuff after a leading class initializer colon.\nindent_constr_colon             = false    # true/false\n\n# Virtual indent from the ':' for member initializers.\n#\n# Default: 2\nindent_ctor_init_leading        = 2        # unsigned number\n\n# Additional indent for constructor initializer list.\n# Negative values decrease indent down to the first column.\nindent_ctor_init                = 0        # number\n\n# Whether to indent 'if' following 'else' as a new block under the 'else'.\n# If false, 'else\\nif' is treated as 'else if' for indenting purposes.\nindent_else_if                  = false    # true/false\n\n# Amount to indent variable declarations after a open brace.\n#\n#  <0: Relative\n# >=0: Absolute\nindent_var_def_blk              = 0        # number\n\n# Whether to indent continued variable declarations instead of aligning.\nindent_var_def_cont             = false    # true/false\n\n# Whether to indent continued shift expressions ('<<' and '>>') instead of\n# aligning. Set align_left_shift=false when enabling this.\nindent_shift                    = false    # true/false\n\n# Whether to force indentation of function definitions to start in column 1.\nindent_func_def_force_col1      = false    # true/false\n\n# Whether to indent continued function call parameters one indent level,\n# rather than aligning parameters under the open parenthesis.\nindent_func_call_param          = false    # true/false\n\n# Whether to indent continued function definition parameters one indent level,\n# rather than aligning parameters under the open parenthesis.\nindent_func_def_param           = false    # true/false\n\n# for function definitions, only if indent_func_def_param is false\n# Allows to align params when appropriate and indent them when not\n# behave as if it was true if paren position is more than this value\n# if paren position is more than the option value\nindent_func_def_param_paren_pos_threshold = 0        # unsigned number\n\n# Whether to indent continued function call prototype one indent level,\n# rather than aligning parameters under the open parenthesis.\nindent_func_proto_param         = false    # true/false\n\n# Whether to indent continued function call declaration one indent level,\n# rather than aligning parameters under the open parenthesis.\nindent_func_class_param         = false    # true/false\n\n# Whether to indent continued class variable constructors one indent level,\n# rather than aligning parameters under the open parenthesis.\nindent_func_ctor_var_param      = false    # true/false\n\n# Whether to indent continued template parameter list one indent level,\n# rather than aligning parameters under the open parenthesis.\nindent_template_param           = false    # true/false\n\n# Double the indent for indent_func_xxx_param options.\n# Use both values of the options indent_columns and indent_param.\nindent_func_param_double        = false    # true/false\n\n# Indentation column for standalone 'const' qualifier on a function\n# prototype.\nindent_func_const               = 0        # unsigned number\n\n# Indentation column for standalone 'throw' qualifier on a function\n# prototype.\nindent_func_throw               = 0        # unsigned number\n\n# How to indent within a macro followed by a brace on the same line\n# This allows reducing the indent in macros that have (for example)\n# `do { ... } while (0)` blocks bracketing them.\n#\n# true:  add an indent for the brace on the same line as the macro\n# false: do not add an indent for the brace on the same line as the macro\n#\n# Default: true\nindent_macro_brace              = true     # true/false\n\n# The number of spaces to indent a continued '->' or '.'.\n# Usually set to 0, 1, or indent_columns.\nindent_member                   = 0        # unsigned number\n\n# Whether lines broken at '.' or '->' should be indented by a single indent.\n# The indent_member option will not be effective if this is set to true.\nindent_member_single            = false    # true/false\n\n# Spaces to indent single line ('//') comments on lines before code.\nindent_sing_line_comments       = 0        # unsigned number\n\n# When opening a paren for a control statement (if, for, while, etc), increase\n# the indent level by this value. Negative values decrease the indent level.\nindent_sparen_extra             = 0        # number\n\n# Whether to indent trailing single line ('//') comments relative to the code\n# instead of trying to keep the same absolute column.\nindent_relative_single_line_comments = false    # true/false\n\n# Spaces to indent 'case' from 'switch'. Usually 0 or indent_columns.\nindent_switch_case              = 0        # unsigned number\n\n# indent 'break' with 'case' from 'switch'.\nindent_switch_break_with_case   = false    # true/false\n\n# Whether to indent preprocessor statements inside of switch statements.\n#\n# Default: true\nindent_switch_pp                = true     # true/false\n\n# Spaces to shift the 'case' line, without affecting any other lines.\n# Usually 0.\nindent_case_shift               = 0        # unsigned number\n\n# Spaces to indent '{' from 'case'. By default, the brace will appear under\n# the 'c' in case. Usually set to 0 or indent_columns. Negative values are OK.\nindent_case_brace               = 0        # number\n\n# Whether to indent comments found in first column.\nindent_col1_comment             = false    # true/false\n\n# Whether to indent multi string literal in first column.\nindent_col1_multi_string_literal = false    # true/false\n\n# How to indent goto labels.\n#\n#  >0: Absolute column where 1 is the leftmost column\n# <=0: Subtract from brace indent\n#\n# Default: 1\nindent_label                    = 1        # number\n\n# How to indent access specifiers that are followed by a\n# colon.\n#\n#  >0: Absolute column where 1 is the leftmost column\n# <=0: Subtract from brace indent\n#\n# Default: 1\nindent_access_spec              = -4        # number\n\n# Whether to indent the code after an access specifier by one level.\n# If true, this option forces 'indent_access_spec=0'.\nindent_access_spec_body         = false    # true/false\n\n# If an open parenthesis is followed by a newline, whether to indent the next\n# line so that it lines up after the open parenthesis (not recommended).\nindent_paren_nl                 = false    # true/false\n\n# How to indent a close parenthesis after a newline.\n#\n# 0: Indent to body level (default)\n# 1: Align under the open parenthesis\n# 2: Indent to the brace level\nindent_paren_close              = 0        # unsigned number\n\n# Whether to indent the open parenthesis of a function definition,\n# if the parenthesis is on its own line.\nindent_paren_after_func_def     = false    # true/false\n\n# Whether to indent the open parenthesis of a function declaration,\n# if the parenthesis is on its own line.\nindent_paren_after_func_decl    = false    # true/false\n\n# Whether to indent the open parenthesis of a function call,\n# if the parenthesis is on its own line.\nindent_paren_after_func_call    = false    # true/false\n\n# Whether to indent a comma when inside a parenthesis.\n# If true, aligns under the open parenthesis.\nindent_comma_paren              = false    # true/false\n\n# Whether to indent a Boolean operator when inside a parenthesis.\n# If true, aligns under the open parenthesis.\nindent_bool_paren               = false    # true/false\n\n# Whether to indent a semicolon when inside a for parenthesis.\n# If true, aligns under the open for parenthesis.\nindent_semicolon_for_paren      = false    # true/false\n\n# Whether to align the first expression to following ones\n# if indent_bool_paren=true.\nindent_first_bool_expr          = false    # true/false\n\n# Whether to align the first expression to following ones\n# if indent_semicolon_for_paren=true.\nindent_first_for_expr           = false    # true/false\n\n# If an open square is followed by a newline, whether to indent the next line\n# so that it lines up after the open square (not recommended).\nindent_square_nl                = false    # true/false\n\n# (ESQL/C) Whether to preserve the relative indent of 'EXEC SQL' bodies.\nindent_preserve_sql             = false    # true/false\n\n# Whether to align continued statements at the '='. If false or if the '=' is\n# followed by a newline, the next line is indent one tab.\n#\n# Default: true\nindent_align_assign             = true     # true/false\n\n# If true, the indentation of the chunks after a '=' sequence will be set at\n# LHS token indentation column before '='.\nindent_off_after_assign         = false    # true/false\n\n# Whether to align continued statements at the '('. If false or the '(' is\n# followed by a newline, the next line indent is one tab.\n#\n# Default: true\nindent_align_paren              = true     # true/false\n\n# (OC) Whether to indent Objective-C code inside message selectors.\nindent_oc_inside_msg_sel        = false    # true/false\n\n# (OC) Whether to indent Objective-C blocks at brace level instead of usual\n# rules.\nindent_oc_block                 = false    # true/false\n\n# (OC) Indent for Objective-C blocks in a message relative to the parameter\n# name.\n#\n# =0: Use indent_oc_block rules\n# >0: Use specified number of spaces to indent\nindent_oc_block_msg             = 0        # unsigned number\n\n# (OC) Minimum indent for subsequent parameters\nindent_oc_msg_colon             = 0        # unsigned number\n\n# (OC) Whether to prioritize aligning with initial colon (and stripping spaces\n# from lines, if necessary).\n#\n# Default: true\nindent_oc_msg_prioritize_first_colon = true     # true/false\n\n# (OC) Whether to indent blocks the way that Xcode does by default\n# (from the keyword if the parameter is on its own line; otherwise, from the\n# previous indentation level). Requires indent_oc_block_msg=true.\nindent_oc_block_msg_xcode_style = false    # true/false\n\n# (OC) Whether to indent blocks from where the brace is, relative to a\n# message keyword. Requires indent_oc_block_msg=true.\nindent_oc_block_msg_from_keyword = false    # true/false\n\n# (OC) Whether to indent blocks from where the brace is, relative to a message\n# colon. Requires indent_oc_block_msg=true.\nindent_oc_block_msg_from_colon  = false    # true/false\n\n# (OC) Whether to indent blocks from where the block caret is.\n# Requires indent_oc_block_msg=true.\nindent_oc_block_msg_from_caret  = false    # true/false\n\n# (OC) Whether to indent blocks from where the brace caret is.\n# Requires indent_oc_block_msg=true.\nindent_oc_block_msg_from_brace  = false    # true/false\n\n# When indenting after virtual brace open and newline add further spaces to\n# reach this minimum indent.\nindent_min_vbrace_open          = 0        # unsigned number\n\n# Whether to add further spaces after regular indent to reach next tabstop\n# when indenting after virtual brace open and newline.\nindent_vbrace_open_on_tabstop   = false    # true/false\n\n# How to indent after a brace followed by another token (not a newline).\n# true:  indent all contained lines to match the token\n# false: indent all contained lines to match the brace\n#\n# Default: true\nindent_token_after_brace        = true     # true/false\n\n# Whether to indent the body of a C++11 lambda.\nindent_cpp_lambda_body          = false    # true/false\n\n# How to indent compound literals that are being returned.\n# true: add both the indent from return & the compound literal open brace (ie:\n#       2 indent levels)\n# false: only indent 1 level, don't add the indent for the open brace, only add\n#        the indent for the return.\n#\n# Default: true\nindent_compound_literal_return  = true     # true/false\n\n# (C#) Whether to indent a 'using' block if no braces are used.\n#\n# Default: true\nindent_using_block              = true     # true/false\n\n# How to indent the continuation of ternary operator.\n#\n# 0: Off (default)\n# 1: When the `if_false` is a continuation, indent it under `if_false`\n# 2: When the `:` is a continuation, indent it under `?`\nindent_ternary_operator         = 0        # unsigned number\n\n# Whether to indent the statments inside ternary operator.\nindent_inside_ternary_operator  = false    # true/false\n\n# If true, the indentation of the chunks after a `return` sequence will be set at return indentation column.\nindent_off_after_return         = false    # true/false\n\n# If true, the indentation of the chunks after a `return new` sequence will be set at return indentation column.\nindent_off_after_return_new     = false    # true/false\n\n# If true, the tokens after return are indented with regular single indentation. By default (false) the indentation is after the return token.\nindent_single_after_return      = false    # true/false\n\n# Whether to ignore indent and alignment for 'asm' blocks (i.e. assume they\n# have their own indentation).\nindent_ignore_asm_block         = false    # true/false\n\n# Don't indent the close parenthesis of a function definition,\n# if the parenthesis is on its own line.\ndonot_indent_func_def_close_paren = false    # true/false\n\n#\n# Newline adding and removing options\n#\n\n# Whether to collapse empty blocks between '{' and '}'.\n# If true, overrides nl_inside_empty_func\nnl_collapse_empty_body          = true    # true/false\n\n# Don't split one-line braced assignments, as in 'foo_t f = { 1, 2 };'.\nnl_assign_leave_one_liners      = false    # true/false\n\n# Don't split one-line braced statements inside a 'class xx { }' body.\nnl_class_leave_one_liners       = false    # true/false\n\n# Don't split one-line enums, as in 'enum foo { BAR = 15 };'\nnl_enum_leave_one_liners        = false    # true/false\n\n# Don't split one-line get or set functions.\nnl_getset_leave_one_liners      = false    # true/false\n\n# (C#) Don't split one-line property get or set functions.\nnl_cs_property_leave_one_liners = false    # true/false\n\n# Don't split one-line function definitions, as in 'int foo() { return 0; }'.\n# might modify nl_func_type_name\nnl_func_leave_one_liners        = false    # true/false\n\n# Don't split one-line C++11 lambdas, as in '[]() { return 0; }'.\nnl_cpp_lambda_leave_one_liners  = false    # true/false\n\n# Don't split one-line if/else statements, as in 'if(...) b++;'.\nnl_if_leave_one_liners          = false    # true/false\n\n# Don't split one-line while statements, as in 'while(...) b++;'.\nnl_while_leave_one_liners       = false    # true/false\n\n# Don't split one-line for statements, as in 'for(...) b++;'.\nnl_for_leave_one_liners         = false    # true/false\n\n# (OC) Don't split one-line Objective-C messages.\nnl_oc_msg_leave_one_liner       = false    # true/false\n\n# (OC) Add or remove newline between method declaration and '{'.\nnl_oc_mdef_brace                = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove newline between Objective-C block signature and '{'.\nnl_oc_block_brace               = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove blank line before '@interface' statement.\nnl_oc_before_interface          = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove blank line before '@implementation' statement.\nnl_oc_before_implementation     = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove blank line before '@end' statement.\nnl_oc_before_end                = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove newline between '@interface' and '{'.\nnl_oc_interface_brace           = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove newline between '@implementation' and '{'.\nnl_oc_implementation_brace      = ignore   # ignore/add/remove/force\n\n# Add or remove newlines at the start of the file.\nnl_start_of_file                = ignore   # ignore/add/remove/force\n\n# The minimum number of newlines at the start of the file (only used if\n# nl_start_of_file is 'add' or 'force').\nnl_start_of_file_min            = 0        # unsigned number\n\n# Add or remove newline at the end of the file.\nnl_end_of_file                  = ignore   # ignore/add/remove/force\n\n# The minimum number of newlines at the end of the file (only used if\n# nl_end_of_file is 'add' or 'force').\nnl_end_of_file_min              = 0        # unsigned number\n\n# Add or remove newline between '=' and '{'.\nnl_assign_brace                 = ignore   # ignore/add/remove/force\n\n# (D) Add or remove newline between '=' and '['.\nnl_assign_square                = ignore   # ignore/add/remove/force\n\n# Add or remove newline between '[]' and '{'.\nnl_tsquare_brace                = ignore   # ignore/add/remove/force\n\n# (D) Add or remove newline after '= ['. Will also affect the newline before\n# the ']'.\nnl_after_square_assign          = ignore   # ignore/add/remove/force\n\n# Add or remove newline between a function call's ')' and '{', as in\n# 'list_for_each(item, &list) { }'.\nnl_fcall_brace                  = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'enum' and '{'.\nnl_enum_brace                   = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'enum' and 'class'.\nnl_enum_class                   = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'enum class' and the identifier.\nnl_enum_class_identifier        = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'enum class' type and ':'.\nnl_enum_identifier_colon        = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'enum class identifier :' and type.\nnl_enum_colon_type              = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'struct and '{'.\nnl_struct_brace                 = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'union' and '{'.\nnl_union_brace                  = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'if' and '{'.\nnl_if_brace                     = ignore   # ignore/add/remove/force\n\n# Add or remove newline between '}' and 'else'.\nnl_brace_else                   = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'else if' and '{'. If set to ignore,\n# nl_if_brace is used instead.\nnl_elseif_brace                 = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'else' and '{'.\nnl_else_brace                   = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'else' and 'if'.\nnl_else_if                      = ignore   # ignore/add/remove/force\n\n# Add or remove newline before '{' opening brace\nnl_before_opening_brace_func_class_def = ignore   # ignore/add/remove/force\n\n# Add or remove newline before 'if'/'else if' closing parenthesis.\nnl_before_if_closing_paren      = ignore   # ignore/add/remove/force\n\n# Add or remove newline between '}' and 'finally'.\nnl_brace_finally                = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'finally' and '{'.\nnl_finally_brace                = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'try' and '{'.\nnl_try_brace                    = ignore   # ignore/add/remove/force\n\n# Add or remove newline between get/set and '{'.\nnl_getset_brace                 = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'for' and '{'.\nnl_for_brace                    = ignore   # ignore/add/remove/force\n\n# Add or remove newline before the '{' of a 'catch' statement, as in\n# 'catch (decl) <here> {'.\nnl_catch_brace                  = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove newline before the '{' of a '@catch' statement, as in\n# '@catch (decl) <here> {'. If set to ignore, nl_catch_brace is used.\nnl_oc_catch_brace               = ignore   # ignore/add/remove/force\n\n# Add or remove newline between '}' and 'catch'.\nnl_brace_catch                  = ignore   # ignore/add/remove/force\n\n# (OC) Add or remove newline between '}' and '@catch'. If set to ignore,\n# nl_brace_catch is used.\nnl_oc_brace_catch               = ignore   # ignore/add/remove/force\n\n# Add or remove newline between '}' and ']'.\nnl_brace_square                 = ignore   # ignore/add/remove/force\n\n# Add or remove newline between '}' and ')' in a function invocation.\nnl_brace_fparen                 = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'while' and '{'.\nnl_while_brace                  = ignore   # ignore/add/remove/force\n\n# (D) Add or remove newline between 'scope (x)' and '{'.\nnl_scope_brace                  = ignore   # ignore/add/remove/force\n\n# (D) Add or remove newline between 'unittest' and '{'.\nnl_unittest_brace               = ignore   # ignore/add/remove/force\n\n# (D) Add or remove newline between 'version (x)' and '{'.\nnl_version_brace                = ignore   # ignore/add/remove/force\n\n# (C#) Add or remove newline between 'using' and '{'.\nnl_using_brace                  = ignore   # ignore/add/remove/force\n\n# Add or remove newline between two open or close braces. Due to general\n# newline/brace handling, REMOVE may not work.\nnl_brace_brace                  = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'do' and '{'.\nnl_do_brace                     = ignore   # ignore/add/remove/force\n\n# Add or remove newline between '}' and 'while' of 'do' statement.\nnl_brace_while                  = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'switch' and '{'.\nnl_switch_brace                 = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'synchronized' and '{'.\nnl_synchronized_brace           = ignore   # ignore/add/remove/force\n\n# Add a newline between ')' and '{' if the ')' is on a different line than the\n# if/for/etc.\n#\n# Overrides nl_for_brace, nl_if_brace, nl_switch_brace, nl_while_switch and\n# nl_catch_brace.\nnl_multi_line_cond              = false    # true/false\n\n# Add a newline after '(' if an if/for/while/switch condition spans multiple\n# lines\nnl_multi_line_sparen_open       = ignore   # ignore/add/remove/force\n\n# Add a newline before ')' if an if/for/while/switch condition spans multiple\n# lines. Overrides nl_before_if_closing_paren if both are specified.\nnl_multi_line_sparen_close      = ignore   # ignore/add/remove/force\n\n# Force a newline in a define after the macro name for multi-line defines.\nnl_multi_line_define            = false    # true/false\n\n# Whether to add a newline before 'case', and a blank line before a 'case'\n# statement that follows a ';' or '}'.\nnl_before_case                  = false    # true/false\n\n# Whether to add a newline after a 'case' statement.\nnl_after_case                   = false    # true/false\n\n# Add or remove newline between a case ':' and '{'.\n#\n# Overrides nl_after_case.\nnl_case_colon_brace             = ignore   # ignore/add/remove/force\n\n# Add or remove newline between ')' and 'throw'.\nnl_before_throw                 = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'namespace' and '{'.\nnl_namespace_brace              = ignore   # ignore/add/remove/force\n\n# Add or remove newline after 'template<...>' of a template class.\nnl_template_class               = ignore   # ignore/add/remove/force\n\n# Add or remove newline after 'template<...>' of a template class declaration.\n#\n# Overrides nl_template_class.\nnl_template_class_decl          = ignore   # ignore/add/remove/force\n\n# Add or remove newline after 'template<>' of a specialized class declaration.\n#\n# Overrides nl_template_class_decl.\nnl_template_class_decl_special  = ignore   # ignore/add/remove/force\n\n# Add or remove newline after 'template<...>' of a template class definition.\n#\n# Overrides nl_template_class.\nnl_template_class_def           = ignore   # ignore/add/remove/force\n\n# Add or remove newline after 'template<>' of a specialized class definition.\n#\n# Overrides nl_template_class_def.\nnl_template_class_def_special   = ignore   # ignore/add/remove/force\n\n# Add or remove newline after 'template<...>' of a template function.\nnl_template_func                = ignore   # ignore/add/remove/force\n\n# Add or remove newline after 'template<...>' of a template function\n# declaration.\n#\n# Overrides nl_template_func.\nnl_template_func_decl           = ignore   # ignore/add/remove/force\n\n# Add or remove newline after 'template<>' of a specialized function\n# declaration.\n#\n# Overrides nl_template_func_decl.\nnl_template_func_decl_special   = ignore   # ignore/add/remove/force\n\n# Add or remove newline after 'template<...>' of a template function\n# definition.\n#\n# Overrides nl_template_func.\nnl_template_func_def            = ignore   # ignore/add/remove/force\n\n# Add or remove newline after 'template<>' of a specialized function\n# definition.\n#\n# Overrides nl_template_func_def.\nnl_template_func_def_special    = ignore   # ignore/add/remove/force\n\n# Add or remove newline after 'template<...>' of a template variable.\nnl_template_var                 = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'template<...>' and 'using' of a templated\n# type alias.\nnl_template_using               = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'class' and '{'.\nnl_class_brace                  = ignore   # ignore/add/remove/force\n\n# Add or remove newline before or after (depending on pos_class_comma,\n# may not be IGNORE) each',' in the base class list.\nnl_class_init_args              = ignore   # ignore/add/remove/force\n\n# Add or remove newline after each ',' in the constructor member\n# initialization. Related to nl_constr_colon, pos_constr_colon and\n# pos_constr_comma.\nnl_constr_init_args             = ignore   # ignore/add/remove/force\n\n# Add or remove newline before first element, after comma, and after last\n# element, in 'enum'.\nnl_enum_own_lines               = ignore   # ignore/add/remove/force\n\n# Add or remove newline between return type and function name in a function\n# definition.\n# might be modified by nl_func_leave_one_liners\nnl_func_type_name               = ignore   # ignore/add/remove/force\n\n# Add or remove newline between return type and function name inside a class\n# definition. If set to ignore, nl_func_type_name or nl_func_proto_type_name\n# is used instead.\nnl_func_type_name_class         = ignore   # ignore/add/remove/force\n\n# Add or remove newline between class specification and '::'\n# in 'void A::f() { }'. Only appears in separate member implementation (does\n# not appear with in-line implementation).\nnl_func_class_scope             = ignore   # ignore/add/remove/force\n\n# Add or remove newline between function scope and name, as in\n# 'void A :: <here> f() { }'.\nnl_func_scope_name              = ignore   # ignore/add/remove/force\n\n# Add or remove newline between return type and function name in a prototype.\nnl_func_proto_type_name         = ignore   # ignore/add/remove/force\n\n# Add or remove newline between a function name and the opening '(' in the\n# declaration.\nnl_func_paren                   = ignore   # ignore/add/remove/force\n\n# Overrides nl_func_paren for functions with no parameters.\nnl_func_paren_empty             = ignore   # ignore/add/remove/force\n\n# Add or remove newline between a function name and the opening '(' in the\n# definition.\nnl_func_def_paren               = ignore   # ignore/add/remove/force\n\n# Overrides nl_func_def_paren for functions with no parameters.\nnl_func_def_paren_empty         = ignore   # ignore/add/remove/force\n\n# Add or remove newline between a function name and the opening '(' in the\n# call.\nnl_func_call_paren              = ignore   # ignore/add/remove/force\n\n# Overrides nl_func_call_paren for functions with no parameters.\nnl_func_call_paren_empty        = ignore   # ignore/add/remove/force\n\n# Add or remove newline after '(' in a function declaration.\nnl_func_decl_start              = ignore   # ignore/add/remove/force\n\n# Add or remove newline after '(' in a function definition.\nnl_func_def_start               = ignore   # ignore/add/remove/force\n\n# Overrides nl_func_decl_start when there is only one parameter.\nnl_func_decl_start_single       = ignore   # ignore/add/remove/force\n\n# Overrides nl_func_def_start when there is only one parameter.\nnl_func_def_start_single        = ignore   # ignore/add/remove/force\n\n# Whether to add a newline after '(' in a function declaration if '(' and ')'\n# are in different lines. If false, nl_func_decl_start is used instead.\nnl_func_decl_start_multi_line   = false    # true/false\n\n# Whether to add a newline after '(' in a function definition if '(' and ')'\n# are in different lines. If false, nl_func_def_start is used instead.\nnl_func_def_start_multi_line    = false    # true/false\n\n# Add or remove newline after each ',' in a function declaration.\nnl_func_decl_args               = ignore   # ignore/add/remove/force\n\n# Add or remove newline after each ',' in a function definition.\nnl_func_def_args                = ignore   # ignore/add/remove/force\n\n# Add or remove newline after each ',' in a function call.\nnl_func_call_args               = ignore   # ignore/add/remove/force\n\n# Whether to add a newline after each ',' in a function declaration if '('\n# and ')' are in different lines. If false, nl_func_decl_args is used instead.\nnl_func_decl_args_multi_line    = false    # true/false\n\n# Whether to add a newline after each ',' in a function definition if '('\n# and ')' are in different lines. If false, nl_func_def_args is used instead.\nnl_func_def_args_multi_line     = false    # true/false\n\n# Add or remove newline before the ')' in a function declaration.\nnl_func_decl_end                = ignore   # ignore/add/remove/force\n\n# Add or remove newline before the ')' in a function definition.\nnl_func_def_end                 = ignore   # ignore/add/remove/force\n\n# Overrides nl_func_decl_end when there is only one parameter.\nnl_func_decl_end_single         = ignore   # ignore/add/remove/force\n\n# Overrides nl_func_def_end when there is only one parameter.\nnl_func_def_end_single          = ignore   # ignore/add/remove/force\n\n# Whether to add a newline before ')' in a function declaration if '(' and ')'\n# are in different lines. If false, nl_func_decl_end is used instead.\nnl_func_decl_end_multi_line     = false    # true/false\n\n# Whether to add a newline before ')' in a function definition if '(' and ')'\n# are in different lines. If false, nl_func_def_end is used instead.\nnl_func_def_end_multi_line      = false    # true/false\n\n# Add or remove newline between '()' in a function declaration.\nnl_func_decl_empty              = ignore   # ignore/add/remove/force\n\n# Add or remove newline between '()' in a function definition.\nnl_func_def_empty               = ignore   # ignore/add/remove/force\n\n# Add or remove newline between '()' in a function call.\nnl_func_call_empty              = ignore   # ignore/add/remove/force\n\n# Whether to add a newline after '(' in a function call,\n# has preference over nl_func_call_start_multi_line.\nnl_func_call_start              = ignore   # ignore/add/remove/force\n\n# Whether to add a newline before ')' in a function call.\nnl_func_call_end                = ignore   # ignore/add/remove/force\n\n# Whether to add a newline after '(' in a function call if '(' and ')' are in\n# different lines.\nnl_func_call_start_multi_line   = false    # true/false\n\n# Whether to add a newline after each ',' in a function call if '(' and ')'\n# are in different lines.\nnl_func_call_args_multi_line    = false    # true/false\n\n# Whether to add a newline before ')' in a function call if '(' and ')' are in\n# different lines.\nnl_func_call_end_multi_line     = false    # true/false\n\n# Whether to respect nl_func_call_XXX option incase of closure args.\nnl_func_call_args_multi_line_ignore_closures = false    # true/false\n\n# Whether to add a newline after '<' of a template parameter list.\nnl_template_start               = false    # true/false\n\n# Whether to add a newline after each ',' in a template parameter list.\nnl_template_args                = false    # true/false\n\n# Whether to add a newline before '>' of a template parameter list.\nnl_template_end                 = false    # true/false\n\n# (OC) Whether to put each Objective-C message parameter on a separate line.\n# See nl_oc_msg_leave_one_liner.\nnl_oc_msg_args                  = false    # true/false\n\n# Add or remove newline between function signature and '{'.\nnl_fdef_brace                   = ignore   # ignore/add/remove/force\n\n# Add or remove newline between function signature and '{',\n# if signature ends with ')'. Overrides nl_fdef_brace.\nnl_fdef_brace_cond              = ignore   # ignore/add/remove/force\n\n# Add or remove newline between C++11 lambda signature and '{'.\nnl_cpp_ldef_brace               = ignore   # ignore/add/remove/force\n\n# Add or remove newline between 'return' and the return expression.\nnl_return_expr                  = ignore   # ignore/add/remove/force\n\n# Whether to add a newline after semicolons, except in 'for' statements.\nnl_after_semicolon              = false    # true/false\n\n# (Java) Add or remove newline between the ')' and '{{' of the double brace\n# initializer.\nnl_paren_dbrace_open            = ignore   # ignore/add/remove/force\n\n# Whether to add a newline after the type in an unnamed temporary\n# direct-list-initialization.\nnl_type_brace_init_lst          = ignore   # ignore/add/remove/force\n\n# Whether to add a newline after the open brace in an unnamed temporary\n# direct-list-initialization.\nnl_type_brace_init_lst_open     = ignore   # ignore/add/remove/force\n\n# Whether to add a newline before the close brace in an unnamed temporary\n# direct-list-initialization.\nnl_type_brace_init_lst_close    = ignore   # ignore/add/remove/force\n\n# Whether to add a newline after '{'. This also adds a newline before the\n# matching '}'.\nnl_after_brace_open             = false    # true/false\n\n# Whether to add a newline between the open brace and a trailing single-line\n# comment. Requires nl_after_brace_open=true.\nnl_after_brace_open_cmt         = false    # true/false\n\n# Whether to add a newline after a virtual brace open with a non-empty body.\n# These occur in un-braced if/while/do/for statement bodies.\nnl_after_vbrace_open            = false    # true/false\n\n# Whether to add a newline after a virtual brace open with an empty body.\n# These occur in un-braced if/while/do/for statement bodies.\nnl_after_vbrace_open_empty      = false    # true/false\n\n# Whether to add a newline after '}'. Does not apply if followed by a\n# necessary ';'.\nnl_after_brace_close            = false    # true/false\n\n# Whether to add a newline after a virtual brace close,\n# as in 'if (foo) a++; <here> return;'.\nnl_after_vbrace_close           = false    # true/false\n\n# Add or remove newline between the close brace and identifier,\n# as in 'struct { int a; } <here> b;'. Affects enumerations, unions and\n# structures. If set to ignore, uses nl_after_brace_close.\nnl_brace_struct_var             = ignore   # ignore/add/remove/force\n\n# Whether to alter newlines in '#define' macros.\nnl_define_macro                 = false    # true/false\n\n# Whether to alter newlines between consecutive parenthesis closes. The number\n# of closing parentheses in a line will depend on respective open parenthesis\n# lines.\nnl_squeeze_paren_close          = false    # true/false\n\n# Whether to remove blanks after '#ifxx' and '#elxx', or before '#elxx' and\n# '#endif'. Does not affect top-level #ifdefs.\nnl_squeeze_ifdef                = false    # true/false\n\n# Makes the nl_squeeze_ifdef option affect the top-level #ifdefs as well.\nnl_squeeze_ifdef_top_level      = false    # true/false\n\n# Add or remove blank line before 'if'.\nnl_before_if                    = ignore   # ignore/add/remove/force\n\n# Add or remove blank line after 'if' statement. Add/Force work only if the\n# next token is not a closing brace.\nnl_after_if                     = ignore   # ignore/add/remove/force\n\n# Add or remove blank line before 'for'.\nnl_before_for                   = ignore   # ignore/add/remove/force\n\n# Add or remove blank line after 'for' statement.\nnl_after_for                    = ignore   # ignore/add/remove/force\n\n# Add or remove blank line before 'while'.\nnl_before_while                 = ignore   # ignore/add/remove/force\n\n# Add or remove blank line after 'while' statement.\nnl_after_while                  = ignore   # ignore/add/remove/force\n\n# Add or remove blank line before 'switch'.\nnl_before_switch                = ignore   # ignore/add/remove/force\n\n# Add or remove blank line after 'switch' statement.\nnl_after_switch                 = ignore   # ignore/add/remove/force\n\n# Add or remove blank line before 'synchronized'.\nnl_before_synchronized          = ignore   # ignore/add/remove/force\n\n# Add or remove blank line after 'synchronized' statement.\nnl_after_synchronized           = ignore   # ignore/add/remove/force\n\n# Add or remove blank line before 'do'.\nnl_before_do                    = ignore   # ignore/add/remove/force\n\n# Add or remove blank line after 'do/while' statement.\nnl_after_do                     = ignore   # ignore/add/remove/force\n\n# Whether to put a blank line before 'return' statements, unless after an open\n# brace.\nnl_before_return                = false    # true/false\n\n# Whether to put a blank line after 'return' statements, unless followed by a\n# close brace.\nnl_after_return                 = false    # true/false\n\n# Whether to put a blank line before a member '.' or '->' operators.\nnl_before_member                = ignore   # ignore/add/remove/force\n\n# (Java) Whether to put a blank line after a member '.' or '->' operators.\nnl_after_member                 = ignore   # ignore/add/remove/force\n\n# Whether to double-space commented-entries in 'struct'/'union'/'enum'.\nnl_ds_struct_enum_cmt           = false    # true/false\n\n# Whether to force a newline before '}' of a 'struct'/'union'/'enum'.\n# (Lower priority than eat_blanks_before_close_brace.)\nnl_ds_struct_enum_close_brace   = false    # true/false\n\n# Add or remove newline before or after (depending on pos_class_colon) a class\n# colon, as in 'class Foo <here> : <or here> public Bar'.\nnl_class_colon                  = ignore   # ignore/add/remove/force\n\n# Add or remove newline around a class constructor colon. The exact position\n# depends on nl_constr_init_args, pos_constr_colon and pos_constr_comma.\nnl_constr_colon                 = ignore   # ignore/add/remove/force\n\n# Whether to collapse a two-line namespace, like 'namespace foo\\n{ decl; }'\n# into a single line. If true, prevents other brace newline rules from turning\n# such code into four lines.\nnl_namespace_two_to_one_liner   = false    # true/false\n\n# Whether to remove a newline in simple unbraced if statements, turning them\n# into one-liners, as in 'if(b)\\n i++;' => 'if(b) i++;'.\nnl_create_if_one_liner          = false    # true/false\n\n# Whether to remove a newline in simple unbraced for statements, turning them\n# into one-liners, as in 'for (...)\\n stmt;' => 'for (...) stmt;'.\nnl_create_for_one_liner         = false    # true/false\n\n# Whether to remove a newline in simple unbraced while statements, turning\n# them into one-liners, as in 'while (expr)\\n stmt;' => 'while (expr) stmt;'.\nnl_create_while_one_liner       = false    # true/false\n\n# Whether to collapse a function definition whose body (not counting braces)\n# is only one line so that the entire definition (prototype, braces, body) is\n# a single line.\nnl_create_func_def_one_liner    = false    # true/false\n\n# Whether to collapse a function definition whose body (not counting braces)\n# is only one line so that the entire definition (prototype, braces, body) is\n# a single line.\nnl_create_list_one_liner        = false    # true/false\n\n# Whether to split one-line simple unbraced if statements into two lines by\n# adding a newline, as in 'if(b) <here> i++;'.\nnl_split_if_one_liner           = false    # true/false\n\n# Whether to split one-line simple unbraced for statements into two lines by\n# adding a newline, as in 'for (...) <here> stmt;'.\nnl_split_for_one_liner          = false    # true/false\n\n# Whether to split one-line simple unbraced while statements into two lines by\n# adding a newline, as in 'while (expr) <here> stmt;'.\nnl_split_while_one_liner        = false    # true/false\n\n# Don't add a newline before a cpp-comment in a parameter list of a function\n# call.\ndonot_add_nl_before_cpp_comment = false    # true/false\n\n#\n# Blank line options\n#\n\n# The maximum number of consecutive newlines (3 = 2 blank lines).\nnl_max                          = 0        # unsigned number\n\n# The maximum number of consecutive newlines in a function.\nnl_max_blank_in_func            = 0        # unsigned number\n\n# The number of newlines inside an empty function body.\n# This option is overridden by nl_collapse_empty_body=true\nnl_inside_empty_func            = 0        # unsigned number\n\n# The number of newlines before a function prototype.\nnl_before_func_body_proto       = 0        # unsigned number\n\n# The number of newlines before a multi-line function definition.\nnl_before_func_body_def         = 0        # unsigned number\n\n# The number of newlines before a class constructor/destructor prototype.\nnl_before_func_class_proto      = 0        # unsigned number\n\n# The number of newlines before a class constructor/destructor definition.\nnl_before_func_class_def        = 0        # unsigned number\n\n# The number of newlines after a function prototype.\nnl_after_func_proto             = 0        # unsigned number\n\n# The number of newlines after a function prototype, if not followed by\n# another function prototype.\nnl_after_func_proto_group       = 0        # unsigned number\n\n# The number of newlines after a class constructor/destructor prototype.\nnl_after_func_class_proto       = 0        # unsigned number\n\n# The number of newlines after a class constructor/destructor prototype,\n# if not followed by another constructor/destructor prototype.\nnl_after_func_class_proto_group = 0        # unsigned number\n\n# Whether one-line method definitions inside a class body should be treated\n# as if they were prototypes for the purposes of adding newlines.\n#\n# Requires nl_class_leave_one_liners=true. Overrides nl_before_func_body_def\n# and nl_before_func_class_def for one-liners.\nnl_class_leave_one_liner_groups = false    # true/false\n\n# The number of newlines after '}' of a multi-line function body.\nnl_after_func_body              = 0        # unsigned number\n\n# The number of newlines after '}' of a multi-line function body in a class\n# declaration. Also affects class constructors/destructors.\n#\n# Overrides nl_after_func_body.\nnl_after_func_body_class        = 0        # unsigned number\n\n# The number of newlines after '}' of a single line function body. Also\n# affects class constructors/destructors.\n#\n# Overrides nl_after_func_body and nl_after_func_body_class.\nnl_after_func_body_one_liner    = 0        # unsigned number\n\n# The number of blank lines after a block of variable definitions at the top\n# of a function body.\n#\n# 0: No change (default).\nnl_func_var_def_blk             = 0        # unsigned number\n\n# The number of newlines before a block of typedefs. If nl_after_access_spec\n# is non-zero, that option takes precedence.\n#\n# 0: No change (default).\nnl_typedef_blk_start            = 0        # unsigned number\n\n# The number of newlines after a block of typedefs.\n#\n# 0: No change (default).\nnl_typedef_blk_end              = 0        # unsigned number\n\n# The maximum number of consecutive newlines within a block of typedefs.\n#\n# 0: No change (default).\nnl_typedef_blk_in               = 0        # unsigned number\n\n# The number of newlines before a block of variable definitions not at the top\n# of a function body. If nl_after_access_spec is non-zero, that option takes\n# precedence.\n#\n# 0: No change (default).\nnl_var_def_blk_start            = 0        # unsigned number\n\n# The number of newlines after a block of variable definitions not at the top\n# of a function body.\n#\n# 0: No change (default).\nnl_var_def_blk_end              = 0        # unsigned number\n\n# The maximum number of consecutive newlines within a block of variable\n# definitions.\n#\n# 0: No change (default).\nnl_var_def_blk_in               = 0        # unsigned number\n\n# The minimum number of newlines before a multi-line comment.\n# Doesn't apply if after a brace open or another multi-line comment.\nnl_before_block_comment         = 0        # unsigned number\n\n# The minimum number of newlines before a single-line C comment.\n# Doesn't apply if after a brace open or other single-line C comments.\nnl_before_c_comment             = 0        # unsigned number\n\n# The minimum number of newlines before a CPP comment.\n# Doesn't apply if after a brace open or other CPP comments.\nnl_before_cpp_comment           = 0        # unsigned number\n\n# Whether to force a newline after a multi-line comment.\nnl_after_multiline_comment      = false    # true/false\n\n# Whether to force a newline after a label's colon.\nnl_after_label_colon            = false    # true/false\n\n# The number of newlines after '}' or ';' of a struct/enum/union definition.\nnl_after_struct                 = 0        # unsigned number\n\n# The number of newlines before a class definition.\nnl_before_class                 = 0        # unsigned number\n\n# The number of newlines after '}' or ';' of a class definition.\nnl_after_class                  = 0        # unsigned number\n\n# The number of newlines before a namespace.\nnl_before_namespace             = 0        # unsigned number\n\n# The number of newlines after '{' of a namespace. This also adds newlines\n# before the matching '}'.\n#\n# 0: Apply eat_blanks_after_open_brace or eat_blanks_before_close_brace if\n#     applicable, otherwise no change.\n#\n# Overrides eat_blanks_after_open_brace and eat_blanks_before_close_brace.\nnl_inside_namespace             = 0        # unsigned number\n\n# The number of newlines after '}' of a namespace.\nnl_after_namespace              = 0        # unsigned number\n\n# The number of newlines before an access specifier label. This also includes\n# the Qt-specific 'signals:' and 'slots:'. Will not change the newline count\n# if after a brace open.\n#\n# 0: No change (default).\nnl_before_access_spec           = 0        # unsigned number\n\n# The number of newlines after an access specifier label. This also includes\n# the Qt-specific 'signals:' and 'slots:'. Will not change the newline count\n# if after a brace open.\n#\n# 0: No change (default).\n#\n# Overrides nl_typedef_blk_start and nl_var_def_blk_start.\nnl_after_access_spec            = 0        # unsigned number\n\n# The number of newlines between a function definition and the function\n# comment, as in '// comment\\n <here> void foo() {...}'.\n#\n# 0: No change (default).\nnl_comment_func_def             = 0        # unsigned number\n\n# The number of newlines after a try-catch-finally block that isn't followed\n# by a brace close.\n#\n# 0: No change (default).\nnl_after_try_catch_finally      = 0        # unsigned number\n\n# (C#) The number of newlines before and after a property, indexer or event\n# declaration.\n#\n# 0: No change (default).\nnl_around_cs_property           = 0        # unsigned number\n\n# (C#) The number of newlines between the get/set/add/remove handlers.\n#\n# 0: No change (default).\nnl_between_get_set              = 0        # unsigned number\n\n# (C#) Add or remove newline between property and the '{'.\nnl_property_brace               = ignore   # ignore/add/remove/force\n\n# Whether to remove blank lines after '{'.\neat_blanks_after_open_brace     = false    # true/false\n\n# Whether to remove blank lines before '}'.\neat_blanks_before_close_brace   = false    # true/false\n\n# How aggressively to remove extra newlines not in preprocessor.\n#\n# 0: No change (default)\n# 1: Remove most newlines not handled by other config\n# 2: Remove all newlines and reformat completely by config\nnl_remove_extra_newlines        = 0        # unsigned number\n\n# (Java) Add or remove newline after an annotation statement. Only affects\n# annotations that are after a newline.\nnl_after_annotation             = ignore   # ignore/add/remove/force\n\n# (Java) Add or remove newline between two annotations.\nnl_between_annotation           = ignore   # ignore/add/remove/force\n\n# The number of newlines before a whole-file #ifdef.\n#\n# 0: No change (default).\nnl_before_whole_file_ifdef      = 0        # unsigned number\n\n# The number of newlines after a whole-file #ifdef.\n#\n# 0: No change (default).\nnl_after_whole_file_ifdef       = 0        # unsigned number\n\n# The number of newlines before a whole-file #endif.\n#\n# 0: No change (default).\nnl_before_whole_file_endif      = 0        # unsigned number\n\n# The number of newlines after a whole-file #endif.\n#\n# 0: No change (default).\nnl_after_whole_file_endif       = 0        # unsigned number\n\n#\n# Positioning options\n#\n\n# The position of arithmetic operators in wrapped expressions.\npos_arith                       = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n# The position of assignment in wrapped expressions. Do not affect '='\n# followed by '{'.\npos_assign                      = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n# The position of Boolean operators in wrapped expressions.\npos_bool                        = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n# The position of comparison operators in wrapped expressions.\npos_compare                     = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n# The position of conditional operators, as in the '?' and ':' of\n# 'expr ? stmt : stmt', in wrapped expressions.\npos_conditional                 = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n# The position of the comma in wrapped expressions.\npos_comma                       = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n# The position of the comma in enum entries.\npos_enum_comma                  = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n# The position of the comma in the base class list if there is more than one\n# line. Affects nl_class_init_args.\npos_class_comma                 = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n# The position of the comma in the constructor initialization list.\n# Related to nl_constr_colon, nl_constr_init_args and pos_constr_colon.\npos_constr_comma                = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n# The position of trailing/leading class colon, between class and base class\n# list. Affects nl_class_colon.\npos_class_colon                 = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n# The position of colons between constructor and member initialization.\n# Related to nl_constr_colon, nl_constr_init_args and pos_constr_comma.\npos_constr_colon                = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n# The position of shift operators in wrapped expressions.\npos_shift                       = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n#\n# Line splitting options\n#\n\n# Try to limit code width to N columns.\ncode_width                      = 0        # unsigned number\n\n# Whether to fully split long 'for' statements at semi-colons.\nls_for_split_full               = false    # true/false\n\n# Whether to fully split long function prototypes/calls at commas.\n# The option ls_code_width has priority over the option ls_func_split_full.\nls_func_split_full              = false    # true/false\n\n# Whether to split lines as close to code_width as possible and ignore some\n# groupings.\n# The option ls_code_width has priority over the option ls_func_split_full.\nls_code_width                   = false    # true/false\n\n#\n# Code alignment options (not left column spaces/tabs)\n#\n\n# Whether to keep non-indenting tabs.\nalign_keep_tabs                 = false    # true/false\n\n# Whether to use tabs for aligning.\nalign_with_tabs                 = false    # true/false\n\n# Whether to bump out to the next tab when aligning.\nalign_on_tabstop                = false    # true/false\n\n# Whether to right-align numbers.\nalign_number_right              = false    # true/false\n\n# Whether to keep whitespace not required for alignment.\nalign_keep_extra_space          = false    # true/false\n\n# Whether to align variable definitions in prototypes and functions.\nalign_func_params               = false    # true/false\n\n# The span for aligning parameter definitions in function on parameter name.\n#\n# 0: Don't align (default).\nalign_func_params_span          = 0        # unsigned number\n\n# The threshold for aligning function parameter definitions.\n# Use a negative number for absolute thresholds.\n#\n# 0: No limit (default).\nalign_func_params_thresh        = 0        # number\n\n# The gap for aligning function parameter definitions.\nalign_func_params_gap           = 0        # unsigned number\n\n# The span for aligning constructor value.\n#\n# 0: Don't align (default).\nalign_constr_value_span         = 0        # unsigned number\n\n# The threshold for aligning constructor value.\n# Use a negative number for absolute thresholds.\n#\n# 0: No limit (default).\nalign_constr_value_thresh       = 0        # number\n\n# The gap for aligning constructor value.\nalign_constr_value_gap          = 0        # unsigned number\n\n# Whether to align parameters in single-line functions that have the same\n# name. The function names must already be aligned with each other.\nalign_same_func_call_params     = false    # true/false\n\n# The span for aligning function-call parameters for single line functions.\n#\n# 0: Don't align (default).\nalign_same_func_call_params_span = 0        # unsigned number\n\n# The threshold for aligning function-call parameters for single line\n# functions.\n# Use a negative number for absolute thresholds.\n#\n# 0: No limit (default).\nalign_same_func_call_params_thresh = 0        # number\n\n# The span for aligning variable definitions.\n#\n# 0: Don't align (default).\nalign_var_def_span              = 0        # unsigned number\n\n# How to consider (or treat) the '*' in the alignment of variable definitions.\n#\n# 0: Part of the type     'void *   foo;' (default)\n# 1: Part of the variable 'void     *foo;'\n# 2: Dangling             'void    *foo;'\n# Dangling: the '*' will not be taken into account when aligning.\nalign_var_def_star_style        = 0        # unsigned number\n\n# How to consider (or treat) the '&' in the alignment of variable definitions.\n#\n# 0: Part of the type     'long &   foo;' (default)\n# 1: Part of the variable 'long     &foo;'\n# 2: Dangling             'long    &foo;'\n# Dangling: the '&' will not be taken into account when aligning.\nalign_var_def_amp_style         = 0        # unsigned number\n\n# The threshold for aligning variable definitions.\n# Use a negative number for absolute thresholds.\n#\n# 0: No limit (default).\nalign_var_def_thresh            = 0        # number\n\n# The gap for aligning variable definitions.\nalign_var_def_gap               = 0        # unsigned number\n\n# Whether to align the colon in struct bit fields.\nalign_var_def_colon             = false    # true/false\n\n# The gap for aligning the colon in struct bit fields.\nalign_var_def_colon_gap         = 0        # unsigned number\n\n# Whether to align any attribute after the variable name.\nalign_var_def_attribute         = false    # true/false\n\n# Whether to align inline struct/enum/union variable definitions.\nalign_var_def_inline            = false    # true/false\n\n# The span for aligning on '=' in assignments.\n#\n# 0: Don't align (default).\nalign_assign_span               = 0        # unsigned number\n\n# The span for aligning on '=' in function prototype modifier.\n#\n# 0: Don't align (default).\nalign_assign_func_proto_span    = 0        # unsigned number\n\n# The threshold for aligning on '=' in assignments.\n# Use a negative number for absolute thresholds.\n#\n# 0: No limit (default).\nalign_assign_thresh             = 0        # number\n\n# How to apply align_assign_span to function declaration \"assignments\", i.e.\n# 'virtual void foo() = 0' or '~foo() = {default|delete}'.\n#\n# 0: Align with other assignments (default)\n# 1: Align with each other, ignoring regular assignments\n# 2: Don't align\nalign_assign_decl_func          = 0        # unsigned number\n\n# The span for aligning on '=' in enums.\n#\n# 0: Don't align (default).\nalign_enum_equ_span             = 0        # unsigned number\n\n# The threshold for aligning on '=' in enums.\n# Use a negative number for absolute thresholds.\n#\n# 0: no limit (default).\nalign_enum_equ_thresh           = 0        # number\n\n# The span for aligning class member definitions.\n#\n# 0: Don't align (default).\nalign_var_class_span            = 0        # unsigned number\n\n# The threshold for aligning class member definitions.\n# Use a negative number for absolute thresholds.\n#\n# 0: No limit (default).\nalign_var_class_thresh          = 0        # number\n\n# The gap for aligning class member definitions.\nalign_var_class_gap             = 0        # unsigned number\n\n# The span for aligning struct/union member definitions.\n#\n# 0: Don't align (default).\nalign_var_struct_span           = 0        # unsigned number\n\n# The threshold for aligning struct/union member definitions.\n# Use a negative number for absolute thresholds.\n#\n# 0: No limit (default).\nalign_var_struct_thresh         = 0        # number\n\n# The gap for aligning struct/union member definitions.\nalign_var_struct_gap            = 0        # unsigned number\n\n# The span for aligning struct initializer values.\n#\n# 0: Don't align (default).\nalign_struct_init_span          = 0        # unsigned number\n\n# The span for aligning single-line typedefs.\n#\n# 0: Don't align (default).\nalign_typedef_span              = 0        # unsigned number\n\n# The minimum space between the type and the synonym of a typedef.\nalign_typedef_gap               = 0        # unsigned number\n\n# How to align typedef'd functions with other typedefs.\n#\n# 0: Don't mix them at all (default)\n# 1: Align the open parenthesis with the types\n# 2: Align the function type name with the other type names\nalign_typedef_func              = 0        # unsigned number\n\n# How to consider (or treat) the '*' in the alignment of typedefs.\n#\n# 0: Part of the typedef type, 'typedef int * pint;' (default)\n# 1: Part of type name:        'typedef int   *pint;'\n# 2: Dangling:                 'typedef int  *pint;'\n# Dangling: the '*' will not be taken into account when aligning.\nalign_typedef_star_style        = 0        # unsigned number\n\n# How to consider (or treat) the '&' in the alignment of typedefs.\n#\n# 0: Part of the typedef type, 'typedef int & intref;' (default)\n# 1: Part of type name:        'typedef int   &intref;'\n# 2: Dangling:                 'typedef int  &intref;'\n# Dangling: the '&' will not be taken into account when aligning.\nalign_typedef_amp_style         = 0        # unsigned number\n\n# The span for aligning comments that end lines.\n#\n# 0: Don't align (default).\nalign_right_cmt_span            = 0        # unsigned number\n\n# Minimum number of columns between preceding text and a trailing comment in\n# order for the comment to qualify for being aligned. Must be non-zero to have\n# an effect.\nalign_right_cmt_gap             = 0        # unsigned number\n\n# If aligning comments, whether to mix with comments after '}' and #endif with\n# less than three spaces before the comment.\nalign_right_cmt_mix             = false    # true/false\n\n# Whether to only align trailing comments that are at the same brace level.\nalign_right_cmt_same_level      = false    # true/false\n\n# Minimum column at which to align trailing comments. Comments which are\n# aligned beyond this column, but which can be aligned in a lesser column,\n# may be \"pulled in\".\n#\n# 0: Ignore (default).\nalign_right_cmt_at_col          = 0        # unsigned number\n\n# The span for aligning function prototypes.\n#\n# 0: Don't align (default).\nalign_func_proto_span           = 0        # unsigned number\n\n# The threshold for aligning function prototypes.\n# Use a negative number for absolute thresholds.\n#\n# 0: No limit (default).\nalign_func_proto_thresh         = 0        # number\n\n# Minimum gap between the return type and the function name.\nalign_func_proto_gap            = 0        # unsigned number\n\n# Whether to align function prototypes on the 'operator' keyword instead of\n# what follows.\nalign_on_operator               = false    # true/false\n\n# Whether to mix aligning prototype and variable declarations. If true,\n# align_var_def_XXX options are used instead of align_func_proto_XXX options.\nalign_mix_var_proto             = false    # true/false\n\n# Whether to align single-line functions with function prototypes.\n# Uses align_func_proto_span.\nalign_single_line_func          = false    # true/false\n\n# Whether to align the open brace of single-line functions.\n# Requires align_single_line_func=true. Uses align_func_proto_span.\nalign_single_line_brace         = false    # true/false\n\n# Gap for align_single_line_brace.\nalign_single_line_brace_gap     = 0        # unsigned number\n\n# (OC) The span for aligning Objective-C message specifications.\n#\n# 0: Don't align (default).\nalign_oc_msg_spec_span          = 0        # unsigned number\n\n# Whether to align macros wrapped with a backslash and a newline. This will\n# not work right if the macro contains a multi-line comment.\nalign_nl_cont                   = false    # true/false\n\n# Whether to align macro functions and variables together.\nalign_pp_define_together        = false    # true/false\n\n# The span for aligning on '#define' bodies.\n#\n# =0: Don't align (default)\n# >0: Number of lines (including comments) between blocks\nalign_pp_define_span            = 0        # unsigned number\n\n# The minimum space between label and value of a preprocessor define.\nalign_pp_define_gap             = 0        # unsigned number\n\n# Whether to align lines that start with '<<' with previous '<<'.\n#\n# Default: true\nalign_left_shift                = true     # true/false\n\n# Whether to align comma-separated statements following '<<' (as used to\n# initialize Eigen matrices).\nalign_eigen_comma_init          = false    # true/false\n\n# Whether to align text after 'asm volatile ()' colons.\nalign_asm_colon                 = false    # true/false\n\n# (OC) Span for aligning parameters in an Objective-C message call\n# on the ':'.\n#\n# 0: Don't align.\nalign_oc_msg_colon_span         = 0        # unsigned number\n\n# (OC) Whether to always align with the first parameter, even if it is too\n# short.\nalign_oc_msg_colon_first        = false    # true/false\n\n# (OC) Whether to align parameters in an Objective-C '+' or '-' declaration\n# on the ':'.\nalign_oc_decl_colon             = false    # true/false\n\n# (OC) Whether to not align parameters in an Objectve-C message call if first\n# colon is not on next line of the message call (the same way Xcode does\n# aligment)\nalign_oc_msg_colon_xcode_like   = false    # true/false\n\n#\n# Comment modification options\n#\n\n# Try to wrap comments at N columns.\ncmt_width                       = 0        # unsigned number\n\n# How to reflow comments.\n#\n# 0: No reflowing (apart from the line wrapping due to cmt_width) (default)\n# 1: No touching at all\n# 2: Full reflow\ncmt_reflow_mode                 = 0        # unsigned number\n\n# Whether to convert all tabs to spaces in comments. If false, tabs in\n# comments are left alone, unless used for indenting.\ncmt_convert_tab_to_spaces       = true    # true/false\n\n# Whether to apply changes to multi-line comments, including cmt_width,\n# keyword substitution and leading chars.\n#\n# Default: true\ncmt_indent_multi                = true     # true/false\n\n# Whether to group c-comments that look like they are in a block.\ncmt_c_group                     = false    # true/false\n\n# Whether to put an empty '/*' on the first line of the combined c-comment.\ncmt_c_nl_start                  = false    # true/false\n\n# Whether to add a newline before the closing '*/' of the combined c-comment.\ncmt_c_nl_end                    = false    # true/false\n\n# Whether to change cpp-comments into c-comments.\ncmt_cpp_to_c                    = false    # true/false\n\n# Whether to group cpp-comments that look like they are in a block. Only\n# meaningful if cmt_cpp_to_c=true.\ncmt_cpp_group                   = false    # true/false\n\n# Whether to put an empty '/*' on the first line of the combined cpp-comment\n# when converting to a c-comment.\n#\n# Requires cmt_cpp_to_c=true and cmt_cpp_group=true.\ncmt_cpp_nl_start                = false    # true/false\n\n# Whether to add a newline before the closing '*/' of the combined cpp-comment\n# when converting to a c-comment.\n#\n# Requires cmt_cpp_to_c=true and cmt_cpp_group=true.\ncmt_cpp_nl_end                  = false    # true/false\n\n# Whether to put a star on subsequent comment lines.\ncmt_star_cont                   = false    # true/false\n\n# The number of spaces to insert at the start of subsequent comment lines.\ncmt_sp_before_star_cont         = 0        # unsigned number\n\n# The number of spaces to insert after the star on subsequent comment lines.\ncmt_sp_after_star_cont          = 0        # unsigned number\n\n# For multi-line comments with a '*' lead, remove leading spaces if the first\n# and last lines of the comment are the same length.\n#\n# Default: true\ncmt_multi_check_last            = true     # true/false\n\n# For multi-line comments with a '*' lead, remove leading spaces if the first\n# and last lines of the comment are the same length AND if the length is\n# bigger as the first_len minimum.\n#\n# Default: 4\ncmt_multi_first_len_minimum     = 4        # unsigned number\n\n# Path to a file that contains text to insert at the beginning of a file if\n# the file doesn't start with a C/C++ comment. If the inserted text contains\n# '$(filename)', that will be replaced with the current file's name.\ncmt_insert_file_header          = \"\"         # string\n\n# Path to a file that contains text to insert at the end of a file if the\n# file doesn't end with a C/C++ comment. If the inserted text contains\n# '$(filename)', that will be replaced with the current file's name.\ncmt_insert_file_footer          = \"\"         # string\n\n# Path to a file that contains text to insert before a function definition if\n# the function isn't preceded by a C/C++ comment. If the inserted text\n# contains '$(function)', '$(javaparam)' or '$(fclass)', these will be\n# replaced with, respectively, the name of the function, the javadoc '@param'\n# and '@return' stuff, or the name of the class to which the member function\n# belongs.\ncmt_insert_func_header          = \"\"         # string\n\n# Path to a file that contains text to insert before a class if the class\n# isn't preceded by a C/C++ comment. If the inserted text contains '$(class)',\n# that will be replaced with the class name.\ncmt_insert_class_header         = \"\"         # string\n\n# Path to a file that contains text to insert before an Objective-C message\n# specification, if the method isn't preceded by a C/C++ comment. If the\n# inserted text contains '$(message)' or '$(javaparam)', these will be\n# replaced with, respectively, the name of the function, or the javadoc\n# '@param' and '@return' stuff.\ncmt_insert_oc_msg_header        = \"\"         # string\n\n# Whether a comment should be inserted if a preprocessor is encountered when\n# stepping backwards from a function name.\n#\n# Applies to cmt_insert_oc_msg_header, cmt_insert_func_header and\n# cmt_insert_class_header.\ncmt_insert_before_preproc       = false    # true/false\n\n# Whether a comment should be inserted if a function is declared inline to a\n# class definition.\n#\n# Applies to cmt_insert_func_header.\n#\n# Default: true\ncmt_insert_before_inlines       = true     # true/false\n\n# Whether a comment should be inserted if the function is a class constructor\n# or destructor.\n#\n# Applies to cmt_insert_func_header.\ncmt_insert_before_ctor_dtor     = false    # true/false\n\n#\n# Code modifying options (non-whitespace)\n#\n\n# Add or remove braces on a single-line 'do' statement.\nmod_full_brace_do               = ignore   # ignore/add/remove/force\n\n# Add or remove braces on a single-line 'for' statement.\nmod_full_brace_for              = ignore   # ignore/add/remove/force\n\n# (Pawn) Add or remove braces on a single-line function definition.\nmod_full_brace_function         = ignore   # ignore/add/remove/force\n\n# Add or remove braces on a single-line 'if' statement. Braces will not be\n# removed if the braced statement contains an 'else'.\nmod_full_brace_if               = ignore   # ignore/add/remove/force\n\n# Whether to enforce that all blocks of an 'if'/'else if'/'else' chain either\n# have, or do not have, braces. If true, braces will be added if any block\n# needs braces, and will only be removed if they can be removed from all\n# blocks.\n#\n# Overrides mod_full_brace_if.\nmod_full_brace_if_chain         = false    # true/false\n\n# Whether to add braces to all blocks of an 'if'/'else if'/'else' chain.\n# If true, mod_full_brace_if_chain will only remove braces from an 'if' that\n# does not have an 'else if' or 'else'.\nmod_full_brace_if_chain_only    = false    # true/false\n\n# Add or remove braces on single-line 'while' statement.\nmod_full_brace_while            = ignore   # ignore/add/remove/force\n\n# Add or remove braces on single-line 'using ()' statement.\nmod_full_brace_using            = ignore   # ignore/add/remove/force\n\n# Don't remove braces around statements that span N newlines\nmod_full_brace_nl               = 0        # unsigned number\n\n# Whether to prevent removal of braces from 'if'/'for'/'while'/etc. blocks\n# which span multiple lines.\n#\n# Affects:\n#   mod_full_brace_for\n#   mod_full_brace_if\n#   mod_full_brace_if_chain\n#   mod_full_brace_if_chain_only\n#   mod_full_brace_while\n#   mod_full_brace_using\n#\n# Does not affect:\n#   mod_full_brace_do\n#   mod_full_brace_function\nmod_full_brace_nl_block_rem_mlcond = false    # true/false\n\n# Add or remove unnecessary parenthesis on 'return' statement.\nmod_paren_on_return             = ignore   # ignore/add/remove/force\n\n# (Pawn) Whether to change optional semicolons to real semicolons.\nmod_pawn_semicolon              = false    # true/false\n\n# Whether to fully parenthesize Boolean expressions in 'while' and 'if'\n# statement, as in 'if (a && b > c)' => 'if (a && (b > c))'.\nmod_full_paren_if_bool          = false    # true/false\n\n# Whether to remove superfluous semicolons.\nmod_remove_extra_semicolon      = false    # true/false\n\n# If a function body exceeds the specified number of newlines and doesn't have\n# a comment after the close brace, a comment will be added.\nmod_add_long_function_closebrace_comment = 0        # unsigned number\n\n# If a namespace body exceeds the specified number of newlines and doesn't\n# have a comment after the close brace, a comment will be added.\nmod_add_long_namespace_closebrace_comment = 0        # unsigned number\n\n# If a class body exceeds the specified number of newlines and doesn't have a\n# comment after the close brace, a comment will be added.\nmod_add_long_class_closebrace_comment = 0        # unsigned number\n\n# If a switch body exceeds the specified number of newlines and doesn't have a\n# comment after the close brace, a comment will be added.\nmod_add_long_switch_closebrace_comment = 0        # unsigned number\n\n# If an #ifdef body exceeds the specified number of newlines and doesn't have\n# a comment after the #endif, a comment will be added.\nmod_add_long_ifdef_endif_comment = 0        # unsigned number\n\n# If an #ifdef or #else body exceeds the specified number of newlines and\n# doesn't have a comment after the #else, a comment will be added.\nmod_add_long_ifdef_else_comment = 0        # unsigned number\n\n# Whether to take care of the case by the mod_sort_xx options.\nmod_sort_case_sensitive         = false    # true/false\n\n# Whether to sort consecutive single-line 'import' statements.\nmod_sort_import                 = false    # true/false\n\n# (C#) Whether to sort consecutive single-line 'using' statements.\nmod_sort_using                  = false    # true/false\n\n# Whether to sort consecutive single-line '#include' statements (C/C++) and\n# '#import' statements (Objective-C). Be aware that this has the potential to\n# break your code if your includes/imports have ordering dependencies.\nmod_sort_include                = false    # true/false\n\n# Whether to prioritize '#include' and '#import' statements that contain\n# filename without extension when sorting is enabled.\nmod_sort_incl_import_prioritize_filename = false    # true/false\n\n# Whether to prioritize '#include' and '#import' statements that does not\n# contain extensions when sorting is enabled.\nmod_sort_incl_import_prioritize_extensionless = false    # true/false\n\n# Whether to prioritize '#include' and '#import' statements that contain\n# angle over quotes when sorting is enabled.\nmod_sort_incl_import_prioritize_angle_over_quotes = false    # true/false\n\n# Whether to ignore file extension in '#include' and '#import' statements\n# for sorting comparison.\nmod_sort_incl_import_ignore_extension = false    # true/false\n\n# Whether to group '#include' and '#import' statements when sorting is enabled.\nmod_sort_incl_import_grouping_enabled = false    # true/false\n\n# Whether to move a 'break' that appears after a fully braced 'case' before\n# the close brace, as in 'case X: { ... } break;' => 'case X: { ... break; }'.\nmod_move_case_break             = false    # true/false\n\n# Add or remove braces around a fully braced case statement. Will only remove\n# braces if there are no variable declarations in the block.\nmod_case_brace                  = ignore   # ignore/add/remove/force\n\n# Whether to remove a void 'return;' that appears as the last statement in a\n# function.\nmod_remove_empty_return         = false    # true/false\n\n# Add or remove the comma after the last value of an enumeration.\nmod_enum_last_comma             = ignore   # ignore/add/remove/force\n\n# (OC) Whether to organize the properties. If true, properties will be\n# rearranged according to the mod_sort_oc_property_*_weight factors.\nmod_sort_oc_properties          = false    # true/false\n\n# (OC) Weight of a class property modifier.\nmod_sort_oc_property_class_weight = 0        # number\n\n# (OC) Weight of 'atomic' and 'nonatomic'.\nmod_sort_oc_property_thread_safe_weight = 0        # number\n\n# (OC) Weight of 'readwrite' when organizing properties.\nmod_sort_oc_property_readwrite_weight = 0        # number\n\n# (OC) Weight of a reference type specifier ('retain', 'copy', 'assign',\n# 'weak', 'strong') when organizing properties.\nmod_sort_oc_property_reference_weight = 0        # number\n\n# (OC) Weight of getter type ('getter=') when organizing properties.\nmod_sort_oc_property_getter_weight = 0        # number\n\n# (OC) Weight of setter type ('setter=') when organizing properties.\nmod_sort_oc_property_setter_weight = 0        # number\n\n# (OC) Weight of nullability type ('nullable', 'nonnull', 'null_unspecified',\n# 'null_resettable') when organizing properties.\nmod_sort_oc_property_nullability_weight = 0        # number\n\n#\n# Preprocessor options\n#\n\n# Add or remove indentation of preprocessor directives inside #if blocks\n# at brace level 0 (file-level).\npp_indent                       = ignore   # ignore/add/remove/force\n\n# Whether to indent #if/#else/#endif at the brace level. If false, these are\n# indented from column 1.\npp_indent_at_level              = false    # true/false\n\n# Specifies the number of columns to indent preprocessors per level\n# at brace level 0 (file-level). If pp_indent_at_level=false, also specifies\n# the number of columns to indent preprocessors per level\n# at brace level > 0 (function-level).\n#\n# Default: 1\npp_indent_count                 = 1        # unsigned number\n\n# Add or remove space after # based on pp_level of #if blocks.\npp_space                        = ignore   # ignore/add/remove/force\n\n# Sets the number of spaces per level added with pp_space.\npp_space_count                  = 0        # unsigned number\n\n# The indent for '#region' and '#endregion' in C# and '#pragma region' in\n# C/C++. Negative values decrease indent down to the first column.\npp_indent_region                = 0        # number\n\n# Whether to indent the code between #region and #endregion.\npp_region_indent_code           = false    # true/false\n\n# If pp_indent_at_level=true, sets the indent for #if, #else and #endif when\n# not at file-level. Negative values decrease indent down to the first column.\n#\n# =0: Indent preprocessors using output_tab_size\n# >0: Column at which all preprocessors will be indented\npp_indent_if                    = 0        # number\n\n# Whether to indent the code between #if, #else and #endif.\npp_if_indent_code               = false    # true/false\n\n# Whether to indent '#define' at the brace level. If false, these are\n# indented from column 1.\npp_define_at_level              = false    # true/false\n\n# Whether to ignore the '#define' body while formatting.\npp_ignore_define_body           = false    # true/false\n\n# Whether to indent case statements between #if, #else, and #endif.\n# Only applies to the indent of the preprocesser that the case statements\n# directly inside of.\n#\n# Default: true\npp_indent_case                  = true     # true/false\n\n# Whether to indent whole function definitions between #if, #else, and #endif.\n# Only applies to the indent of the preprocesser that the function definition\n# is directly inside of.\n#\n# Default: true\npp_indent_func_def              = true     # true/false\n\n# Whether to indent extern C blocks between #if, #else, and #endif.\n# Only applies to the indent of the preprocesser that the extern block is\n# directly inside of.\n#\n# Default: true\npp_indent_extern                = true     # true/false\n\n# Whether to indent braces directly inside #if, #else, and #endif.\n# Only applies to the indent of the preprocesser that the braces are directly\n# inside of.\n#\n# Default: true\npp_indent_brace                 = true     # true/false\n\n#\n# Sort includes options\n#\n\n# The regex for include category with priority 0.\ninclude_category_0              = \"\"         # string\n\n# The regex for include category with priority 1.\ninclude_category_1              = \"\"         # string\n\n# The regex for include category with priority 2.\ninclude_category_2              = \"\"         # string\n\n#\n# Use or Do not Use options\n#\n\n# true:  indent_func_call_param will be used (default)\n# false: indent_func_call_param will NOT be used\n#\n# Default: true\nuse_indent_func_call_param      = true     # true/false\n\n# The value of the indentation for a continuation line is calculated\n# differently if the statement is:\n# - a declaration: your case with QString fileName ...\n# - an assignment: your case with pSettings = new QSettings( ...\n#\n# At the second case the indentation value might be used twice:\n# - at the assignment\n# - at the function call (if present)\n#\n# To prevent the double use of the indentation value, use this option with the\n# value 'true'.\n#\n# true:  indent_continue will be used only once\n# false: indent_continue will be used every time (default)\nuse_indent_continue_only_once   = false    # true/false\n\n# The value might be used twice:\n# - at the assignment\n# - at the opening brace\n#\n# To prevent the double use of the indentation value, use this option with the\n# value 'true'.\n#\n# true:  indentation will be used only once\n# false: indentation will be used every time (default)\nindent_cpp_lambda_only_once     = true    # true/false\n\n# Whether sp_after_angle takes precedence over sp_inside_fparen. This was the\n# historic behavior, but is probably not the desired behavior, so this is off\n# by default.\nuse_sp_after_angle_always       = false    # true/false\n\n# Whether to apply special formatting for Qt SIGNAL/SLOT macros. Essentially,\n# this tries to format these so that they match Qt's normalized form (i.e. the\n# result of QMetaObject::normalizedSignature), which can slightly improve the\n# performance of the QObject::connect call, rather than how they would\n# otherwise be formatted.\n#\n# See options_for_QT.cpp for details.\n#\n# Default: true\nuse_options_overriding_for_qt_macros = true     # true/false\n\n# If true: the form feed character is removed from the list\n# of whitespace characters.\n# See https://en.cppreference.com/w/cpp/string/byte/isspace\nuse_form_feed_no_more_as_whitespace_character = false    # true/false\n\n#\n# Warn levels - 1: error, 2: warning (default), 3: note\n#\n\n# (C#) Warning is given if doing tab-to-\\t replacement and we have found one\n# in a C# verbatim string literal.\n#\n# Default: 2\nwarn_level_tabs_found_in_verbatim_string_literals = 2        # unsigned number\n\n# Limit the number of loops.\n# Used by uncrustify.cpp to exit from infinite loop.\n# 0: no limit.\ndebug_max_number_of_loops       = 0        # number\n\n# Set the number of the line to protocol;\n# Used in the function prot_the_line if the 2. parameter is zero.\n# 0: nothing protocol.\ndebug_line_number_to_protocol   = 0        # number\n\n# Set the number of second(s) before terminating formatting the current file,\n# 0: no timeout.\n# only for linux\ndebug_timeout                   = 0        # number\n\n# Meaning of the settings:\n#   Ignore - do not do any changes\n#   Add    - makes sure there is 1 or more space/brace/newline/etc\n#   Force  - makes sure there is exactly 1 space/brace/newline/etc,\n#            behaves like Add in some contexts\n#   Remove - removes space/brace/newline/etc\n#\n#\n# - Token(s) can be treated as specific type(s) with the 'set' option:\n#     `set tokenType tokenString [tokenString...]`\n#\n#     Example:\n#       `set BOOL __AND__ __OR__`\n#\n#     tokenTypes are defined in src/token_enum.h, use them without the\n#     'CT_' prefix: 'CT_BOOL' => 'BOOL'\n#\n#\n# - Token(s) can be treated as type(s) with the 'type' option.\n#     `type tokenString [tokenString...]`\n#\n#     Example:\n#       `type int c_uint_8 Rectangle`\n#\n#     This can also be achieved with `set TYPE int c_uint_8 Rectangle`\n#\n#\n# To embed whitespace in tokenStrings use the '\\' escape character, or quote\n# the tokenStrings. These quotes are supported: \"'`\n#\n#\n# - Support for the auto detection of languages through the file ending can be\n#   added using the 'file_ext' command.\n#     `file_ext langType langString [langString..]`\n#\n#     Example:\n#       `file_ext CPP .ch .cxx .cpp.in`\n#\n#     langTypes are defined in uncrusify_types.h in the lang_flag_e enum, use\n#     them without the 'LANG_' prefix: 'LANG_CPP' => 'CPP'\n#\n#\n# - Custom macro-based indentation can be set up using 'macro-open',\n#   'macro-else' and 'macro-close'.\n#     `(macro-open | macro-else | macro-close) tokenString`\n#\n#     Example:\n#       `macro-open  BEGIN_TEMPLATE_MESSAGE_MAP`\n#       `macro-open  BEGIN_MESSAGE_MAP`\n#       `macro-close END_MESSAGE_MAP`\n#\n#\n# option(s) with 'not default' value: 24\n#\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 6.1708984375,
          "content": "The cppcheck team, in alphabetical order:\n\n0x41head\nAbhijit Sawant\nAbhishek Bharadwaj\nAbigail Buccaneer\nAdam J Richter\nAdrien Chardon\nAhti Legonkov\nAkhilesh Nema\nAkio Idehara\nAlbert Aribaud\nAleksandr Pikalev\nAleksey Palazhchenko\nAlexander Alekseev\nAlexander Festini\nAlexander Gushchin\nAlexander Mai\nAlexander Tkachev\nAlexandre Chouvellon\nAlexey Eryomenko\nAlexey Zhikhartsev\nAlfi Maulana\nAli Can Demiralp\nAlon Alexander\nAlon Liberman\nAmeen Ali\nAndreas Bacher\nAndreas Bießmann\nAndreas Grob\nAndreas Pokorny\nAndreas Rönnquist\nAndreas Vollenweider\nAndrei Karas\nAndrew C Aitchison\nAndrew C. Martin\nAndrew D. Bancroft\nAndy Holmes\nAndy Maloney\nAndy Mac Gregor\nAneesh Azhakesan S\nAnkita Gupta\nanoymouserver\nAnton Lindqvist\nAntti Tuppurainen\nAnurag Garg\nArmin Müller\nArpit Chaudhary\nAugust Sodora\nAyaz Salikhov\nBalázs Tóth\nBaris Demiray\nBart vdr. Meulen\nBartlomiej Grzeskowiak\nbbennetts\nBenjamin Bannier\nBenjamin Fovet\nBenjamin Goose\nBenjamin Kramer\nBenjamin Woester\nBenjamin Wolsey\nBen T\nBernd Buschinski\nBill Egert\nBjörge Dijkstra\nBjörn Blissing\nbooga\nBoris Barbulovski\nBoris Egorov\nBoussaffa Walid\nBo Rydberg\nbzgec\nCarl Michael Grüner Monzón\nCarl Morgan\nCarlo Marcelo Arenas Belón\nCarlos Gomes Martinho\nCarl-Oskar Larsson\nCary Converse\nCary R\nChangkyoon Kim\nChris Lalancette\nChristian Ehrlicher\nChristian Franke\nChristian Göttsche\nChristoph Grüninger\nChristoph Schmidt\nChristoph Strehle\nChuck Larson\nCilyan Olowen\nClaus Jensby Madsen\nColomban Wendling\nConrado Gouvea\ndaisuke-chiba\nDaniel Friedrich\nDavid Korczynski\nDaniel Marjamäki\nDavid Hallas\nDavid Korth\nDávid Slivka\nDebrard Sebastien\nDeepak Gupta\nDegen's Regens\ndencat\nDiego de las Heras\nDirk Jagdmann\nDirk Mueller\nDmitriy\nDmitry Marakasov\nDmitry-Me\ndsamo\nDuraffort\nEdoardo Prezioso\nEivind Tagseth\nElbert Pol\nEmmanuel Blot\nEric Lemanissier\nEric Malenfant\nEric Sesterhenn\nErik Hovland\nErik Lax\nEttl Martin\nEven Rouault\nEvgeny Mandrikov\nfeelamee\nFelipe Pena\nFelix Faber\nFelix Geyer\nFelix Passenberg\nFelix Wolff\nFlorin Iucha\nFrancesc Elies\nFrançois Berder\nFrank Zingsheim\nFrederik Schwarzer\nfu7mu4\nGalimov Albert\nGarrett Bodily\nGary Leutheuser\ngaurav kaushik\nGennady Feldman\nGeorgi D. Sotirov\nGeorgy Komarov\nGerbo Engels\nGerhard Zlabinger\nGerik Rhoden\nGianfranco Costamagna\nGianluca Scacco\nGleydson Soares\nGoran Džaferi\nGraham Whitted\nGreg Hewgill\nGuillaume A.\nGuillaume Chauvel\nGuillaume Miossec\nGustav Palmqvist\nGünther Makulik\nHaowei Hsu\nHarald Scheidl\nHeiko Bauke\nHeiko Eißfeldt\nHeinrich Schuchardt\nHenrik Nilsson\nHe Yuqi\nHoang Tuan Su\nIgor Rondarev\nIgor Zhukov\nIlya Shipitsin\nIvan Maidanski\nIván Matellanes\nIvan Ryabov\nIvar Bonsaksen\nJakub Melka\nJan Egil Ruud\nJan Hellwig\nJános Maros\nJay Sigbrandt\nJedrzej Klocek\nJens Bäckman\nJens Yllman\nJérémy Lefaure\nJes Ramsing\nJesse Boswell\nJim Kuhn\nJim Zhou\njlguardi\nJohan Bertrand\nJohan Samuelson\nJohn Marshall\nJohn-Paul Ore\nJohn Smits\nJonathan Clohessy\nJonathan Haehne\nJonathan Neuschäfer\nJonathan Thackray\nJosé Martins\nJose Roquette\nJoshua Beck\nJoshua Rogers\nJulian Santander\nJulien Marrec\nJulien Peyregne\nJure Menart\nJussi Lehtola\nJørgen Kvalsvik\nKamil Dudka\nKartik Bajaj\nKefu Chai\nkeinflue\nKen-Patrick Lehrmann\nKetil Skjerve\nKevin Christian\nKevin Kendzia\nKimmo Varis\nKleber Tarcísio\nKonrad Grochowski\nKonrad Windszus\nKumar Ashwani\nKushal Chandar\nKyle Chisholm\nLars Even Almaas\nlarudwer\nLau bakman\nLauri Nurmi\nLeandro Lisboa Penz\nLeila F. Rahman\nLena Herscheid\nLeon De Andrade\nLieven de Cock\nlioncash\nLionel Gimbert\nLucas Manuel Rodriguez\nLudvig Gunne Lindström\nLuis Díaz Más\nLuís Pereira\nLukas Grützmacher\nLukasz Czajczyk\nŁukasz Jankowski\nLuxon Jean-Pierre\nMaarten van der Schrieck\nMaksim Derbasov\nMalcolm Parsons\nMarc-Antoine Perennou\nMarcel Raad\nMarco Trevisan\nMarek Zmysłowski\nMarian Klymov\nMark de Wever\nMark Hermeling\nMarkus Elfring\nMartin Delille\nMartin Ettl\nMartin Exner\nMartin Güthle\nMartin Herren\nMárton Csordás\nMasafumi Koba\nMassimo Paladin\nMateusz Michalak\nMateusz Pusz\nMathias De Maré\nMathias Schmid\nMatthias Krüger\nMatthias Kuhn\nMatthias Schmieder\nMatt Johnson\nMaurice Gilden\nMavik\nMichael Drake\nMichael Løiten\nMiika-Petteri Matikainen\nMika Attila\nMike Tzou\nMilhan Kim\nMil Tolstoy\nMischa Aster Alff\nMohit Mate\nMonika Lukow\nMoritz Barsnick\nMoritz Lipp\nMoshe Kaplan\nms\nNeszt Tibor\nNguyen Duong Tuan\nNi2c2k\nNick Ridgway\nNicolás Alvarez\nNicolas Le Cam\nNilesh Kumar\nOgawa KenIchi\nOleksandr Labetskyi\nOleksandr Redko\nOliver Schode\nOliver Stöneberg\nOlivier Croquette\nPatrick Oppenlander\nPaul Aitken\nPaul Bersee\nPaul Fultz II\nPavel Bibergal\nPavel Pimenov\nPavel Roschin\nPavel Skipenes\nPavel Šimovec\nPavol Misik\nPete Johns\nPeter Pentchev\nPeter Schops\nPhilip Chimento\nPhilipp Kloke\nPierre Schweitzer\nPino Toscano\nPranav Khanna\nRadek Jarecki\nRainer Wiesenfarth\nRamzan Bekbulatov\nRaphael Geissert\nRazvan Ioan Alexe\nReijo Tomperi\nRainer Wiesenfarth\nRiccardo Ghetta\nRichard A. Smith\nRichard Quirk\nRick van der Sluijs\nRikard Falkeborn\nrivdsl\nRobert Habrich\nRobert Morin\nRoberto Martelloni\nRobert Reif\nrofl0r\nRoman Zaytsev Borisovich\nRonald Hiemstra\nroot\nRosen Penev\nRudi Danner\nRudolf Grauberger\nRyan M. Lederman\nRyan Pavlik\nSamir Aguiar\nSam Truscott\nSamuel Degrande\nSamuel Poláček\nSandeep Dutta\nSavvas Etairidis\nScott Ehlert\nScott Furry\nSeafarix Ltd.\nSebastian Held\nSebastian Matuschka\nSébastien Debrard\nSergei Chernykh\nSergei Trofimovich\nSergey Burgsdorf\nShane Tapp\nShohei YOSHIDA\nSimon Cornell\nSimon Kagstrom\nSimon Large\nSimon Martin\nSimon Shanks\nSlava Semushin\nStas Cymbalov\nStefan Beller\nStefan Hagen\nStefan Naewe\nStefan van Kessel\nStefan Weil\nStéphane Michel\nSteve Browne\nSteve Duan\nSteve Mokris\nSteven Cook\nSteven Myint\nSusi Lehtola\nSwasti Shrivastava\nSylvain Joubert\nTam Do Thanh\nTeddy Didé\nTemuri Doghonadze\nThomas Arnhold\nTomasz Edward Posluszny\nThomas Jarosch\nThomas Niederberger\nThomas Otto\nThomas P. K. Healy\nThomas Sondergaard\nThorsten Sick\nTim Blume\nTim Gerundt\ntititiou36\nTobias Weibel\nTomasz Kłoczko\nTom Pollok\nTomo Dote\nToralf Förster\nTroshin V.S.\nTyson Nottingham\nValentin Batz\nValerii Lashmanov\nVasily Maslyukov\nVeli-Matti Visuri\nVesa Pikki\nVille-Pekka Vahteala\nVille Skyttä\nVincent Le Garrec\nVladimir Petrigo\nWang Haoyu\nWenChung Chiu\nWolfgang Stöggl\nx29a\nXhmikosR\nXuecheng Zhang\nYichen Yan\nYurii Putin\nZachary Blair\nZhao Qifa\nZhiyuan Zhang\nZhu Lei\nДмитрий Старцев\n\nGUI graphics courtesy of Tango Desktop Project:\nhttp://tango.freedesktop.org\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 4.46875,
          "content": "cmake_minimum_required(VERSION 3.5)\nif(MSVC)\n    cmake_minimum_required(VERSION 3.13)\nendif()\nproject(Cppcheck VERSION 2.16.99 LANGUAGES CXX)\n\ninclude(cmake/options.cmake)\n\ninclude(cmake/cxx11.cmake)\nuse_cxx11()\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\ninclude(GNUInstallDirs)\n\ninclude(cmake/compilerCheck.cmake)\ninclude(cmake/versions.cmake)\ninclude(cmake/findDependencies.cmake)\ninclude(cmake/compileroptions.cmake)\ninclude(cmake/compilerDefinitions.cmake)\ninclude(cmake/buildFiles.cmake)\nif(BUILD_GUI)\n    include(cmake/qtCompat.cmake)\nendif()\ninclude(cmake/printInfo.cmake)\n\n\nfile(GLOB addons_py \"addons/*.py\")\nfile(GLOB addons_json \"addons/*.json\")\nfile(GLOB cfgs \"cfg/*.cfg\")\nfile(GLOB platforms \"platforms/*.xml\")\n\nif(LIBXML2_XMLLINT_EXECUTABLE)\n    add_custom_target(validateCFG DEPENDS validateCFG-cmd)\n    add_custom_command(OUTPUT validateCFG-cmd\n            COMMAND ${LIBXML2_XMLLINT_EXECUTABLE} --noout ${CMAKE_SOURCE_DIR}/cfg/cppcheck-cfg.rng)\n    foreach(cfg ${cfgs})\n        add_custom_command(OUTPUT validateCFG-cmd APPEND\n                COMMAND ${LIBXML2_XMLLINT_EXECUTABLE} --noout --relaxng ${CMAKE_SOURCE_DIR}/cfg/cppcheck-cfg.rng ${cfg})\n    endforeach()\n    # this is a symbolic name for a build rule and not an output file\n    set_source_files_properties(validateCFG-cmd PROPERTIES SYMBOLIC \"true\")\n\n    add_custom_target(validatePlatforms ${LIBXML2_XMLLINT_EXECUTABLE} --noout ${CMAKE_SOURCE_DIR}/platforms/cppcheck-platforms.rng)\n    foreach(platform ${platforms})\n        get_filename_component(platformname ${platform} NAME_WE)\n        add_custom_target(validatePlatforms-${platformname} ${LIBXML2_XMLLINT_EXECUTABLE} --noout --relaxng ${CMAKE_SOURCE_DIR}/platforms/cppcheck-platforms.rng ${platform})\n        add_dependencies(validatePlatforms validatePlatforms-${platformname})\n    endforeach()\n\n    add_custom_target(errorlist-xml $<TARGET_FILE:cppcheck> --errorlist > ${CMAKE_BINARY_DIR}/errorlist.xml\n            DEPENDS cppcheck)\n\n    add_custom_target(example-xml $<TARGET_FILE:cppcheck> --xml --enable=all --inconclusive --max-configs=1 ${CMAKE_SOURCE_DIR}/samples 2> ${CMAKE_BINARY_DIR}/example.xml\n            DEPENDS cppcheck)\n\n    add_custom_target(createXMLExamples DEPENDS errorlist-xml example-xml)\n\n    if(Python_EXECUTABLE)\n        add_custom_target(checkCWEEntries ${Python_EXECUTABLE} ${CMAKE_SOURCE_DIR}/tools/listErrorsWithoutCWE.py -F ${CMAKE_BINARY_DIR}/errorlist.xml\n                DEPENDS errorlist-xml)\n    endif()\n\n    add_custom_target(validateXML ${LIBXML2_XMLLINT_EXECUTABLE} --noout ${CMAKE_SOURCE_DIR}/cppcheck-errors.rng\n            COMMAND ${LIBXML2_XMLLINT_EXECUTABLE} --noout --relaxng ${CMAKE_SOURCE_DIR}/cppcheck-errors.rng ${CMAKE_BINARY_DIR}/errorlist.xml\n            COMMAND ${LIBXML2_XMLLINT_EXECUTABLE} --noout --relaxng ${CMAKE_SOURCE_DIR}/cppcheck-errors.rng ${CMAKE_BINARY_DIR}/example.xml\n            DEPENDS createXMLExamples\n            )\n\n    add_custom_target(validateRules ${LIBXML2_XMLLINT_EXECUTABLE} --noout ${CMAKE_SOURCE_DIR}/rules/*.xml)\nendif()\n\n# TODO: add the following Makefile features:\n# - \"man/cppcheck.1\" target\n# - \"tags\" target\n# - Cygwin handling\n# - MinGW handling\n\nif(BUILD_TESTS)\n    enable_testing()\nendif()\n\nadd_custom_target(copy_cfg ALL\n    ${CMAKE_COMMAND} -E copy_directory \"${PROJECT_SOURCE_DIR}/cfg\"\n        \"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CMAKE_CFG_INTDIR}/cfg\"\n    COMMENT \"Copying cfg files to ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CMAKE_CFG_INTDIR}\")\n\n# TODO: copy *.py and *.json only\nadd_custom_target(copy_addons ALL\n    ${CMAKE_COMMAND} -E copy_directory \"${PROJECT_SOURCE_DIR}/addons\"\n        \"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CMAKE_CFG_INTDIR}/addons\"\n    COMMENT \"Copying addons files to ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CMAKE_CFG_INTDIR}\")\n\nadd_custom_target(copy_platforms ALL\n    ${CMAKE_COMMAND} -E copy_directory \"${PROJECT_SOURCE_DIR}/platforms\"\n    \"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CMAKE_CFG_INTDIR}/platforms\"\n    COMMENT \"Copying platforms files to ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CMAKE_CFG_INTDIR}\")\n\nif(USE_BUNDLED_TINYXML2)\n    message(STATUS \"Using bundled version of tinyxml2\")\n    add_subdirectory(externals/tinyxml2)\nendif()\nadd_subdirectory(externals/simplecpp)\nadd_subdirectory(lib)   # CppCheck Library\nadd_subdirectory(cli)   # Client application\nadd_subdirectory(test)  # Tests\nadd_subdirectory(gui)   # Graphical application\nadd_subdirectory(tools/triage)   # Triage tool\nadd_subdirectory(tools)\nadd_subdirectory(man)\n\ninclude(cmake/clang_tidy.cmake)\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 79.4130859375,
          "content": "# This file is generated by dmake, do not edit.\n\nifndef VERBOSE\n    VERBOSE=\nendif\n# To compile with rules, use 'make HAVE_RULES=yes'\nifndef HAVE_RULES\n    HAVE_RULES=\nendif\n\nifndef MATCHCOMPILER\n    MATCHCOMPILER=\nendif\n# use match compiler\nifeq ($(MATCHCOMPILER),yes)\n    # Find available Python interpreter\n    ifeq ($(PYTHON_INTERPRETER),)\n        PYTHON_INTERPRETER := $(shell which python3)\n    endif\n    ifeq ($(PYTHON_INTERPRETER),)\n        PYTHON_INTERPRETER := $(shell which python)\n    endif\n    ifeq ($(PYTHON_INTERPRETER),)\n        $(error Did not find a Python interpreter)\n    endif\n    ifdef VERIFY\n        matchcompiler_S := $(shell $(PYTHON_INTERPRETER) tools/matchcompiler.py --verify)\n    else\n        matchcompiler_S := $(shell $(PYTHON_INTERPRETER) tools/matchcompiler.py)\n    endif\n    libcppdir:=build\nelse ifeq ($(MATCHCOMPILER),)\n    libcppdir:=lib\nelse\n    $(error invalid MATCHCOMPILER value '$(MATCHCOMPILER)')\nendif\n\nifndef CPPFLAGS\n    CPPFLAGS=\nendif\n\nifdef FILESDIR\n    override CPPFLAGS+=-DFILESDIR=\\\"$(FILESDIR)\\\"\nendif\n\nRDYNAMIC=-rdynamic\n# Set the CPPCHK_GLIBCXX_DEBUG flag. This flag is not used in release Makefiles.\n# The _GLIBCXX_DEBUG define doesn't work in Cygwin or other Win32 systems.\nifndef COMSPEC\n    ifeq ($(VERBOSE),1)\n        $(info COMSPEC not found)\n    endif\n    ifdef ComSpec\n        ifeq ($(VERBOSE),1)\n            $(info ComSpec found)\n        endif\n        #### ComSpec is defined on some WIN32's.\n        WINNT=1\n\n        ifeq ($(VERBOSE),1)\n            $(info PATH=$(PATH))\n        endif\n\n        ifneq (,$(findstring /cygdrive/,$(PATH)))\n            ifeq ($(VERBOSE),1)\n                $(info /cygdrive/ found in PATH)\n            endif\n            CYGWIN=1\n        endif # CYGWIN\n    endif # ComSpec\nendif # COMSPEC\n\nifdef WINNT\n    ifeq ($(VERBOSE),1)\n        $(info WINNT found)\n    endif\n    #### Maybe Windows\n    ifndef CPPCHK_GLIBCXX_DEBUG\n        CPPCHK_GLIBCXX_DEBUG=\n    endif # !CPPCHK_GLIBCXX_DEBUG\n\n    ifeq ($(VERBOSE),1)\n        $(info MSYSTEM=$(MSYSTEM))\n    endif\n\n    ifneq ($(MSYSTEM),MINGW32 MINGW64)\n        RDYNAMIC=\n    endif\n\n    LDFLAGS+=-lshlwapi\nelse # !WINNT\n    ifeq ($(VERBOSE),1)\n        $(info WINNT not found)\n    endif\n\n    uname_S := $(shell sh -c 'uname -s 2>/dev/null || echo not')\n\n    ifeq ($(VERBOSE),1)\n        $(info uname_S=$(uname_S))\n    endif\n\n    ifeq ($(uname_S),Linux)\n        ifndef CPPCHK_GLIBCXX_DEBUG\n            CPPCHK_GLIBCXX_DEBUG=-D_GLIBCXX_DEBUG\n        endif # !CPPCHK_GLIBCXX_DEBUG\n    endif # Linux\n\n    ifeq ($(uname_S),GNU/kFreeBSD)\n        ifndef CPPCHK_GLIBCXX_DEBUG\n            CPPCHK_GLIBCXX_DEBUG=-D_GLIBCXX_DEBUG\n        endif # !CPPCHK_GLIBCXX_DEBUG\n    endif # GNU/kFreeBSD\n\n    LDFLAGS+=-pthread\n\nendif # WINNT\n\nifdef CYGWIN\n    ifeq ($(VERBOSE),1)\n        $(info CYGWIN found)\n    endif\n\n    # Increase stack size for Cygwin builds to avoid segmentation fault in limited recursive tests.\n    CXXFLAGS+=-Wl,--stack,8388608\nendif # CYGWIN\n\nifndef CXX\n    CXX=g++\nendif\n\nifeq (clang++, $(findstring clang++,$(CXX)))\n    CPPCHK_GLIBCXX_DEBUG=\nendif\nifndef CXXFLAGS\n    CXXFLAGS=-pedantic -Wall -Wextra -Wcast-qual -Wfloat-equal -Wmissing-declarations -Wmissing-format-attribute -Wno-long-long -Wpacked -Wredundant-decls -Wundef -Wno-sign-compare -Wno-multichar -Woverloaded-virtual $(CPPCHK_GLIBCXX_DEBUG) -g\nendif\n\nifeq (g++, $(findstring g++,$(CXX)))\n    override CXXFLAGS += -pipe\nendif\noverride CXXFLAGS += -std=c++11\nifeq ($(HAVE_RULES),yes)\n    PCRE_CONFIG = $(shell which pcre-config)\n    ifeq ($(PCRE_CONFIG),)\n        $(error Did not find pcre-config)\n    endif\n    override CXXFLAGS += -DHAVE_RULES $(shell $(PCRE_CONFIG) --cflags)\n    ifdef LIBS\n        LIBS += $(shell $(PCRE_CONFIG) --libs)\n    else\n        LIBS=$(shell $(PCRE_CONFIG) --libs)\n    endif\nelse ifneq ($(HAVE_RULES),)\n    $(error invalid HAVE_RULES value '$(HAVE_RULES)')\nendif\n\nifndef PREFIX\n    PREFIX=/usr\nendif\n\nifndef INCLUDE_FOR_LIB\n    INCLUDE_FOR_LIB=-Ilib -isystem externals -isystem externals/picojson -isystem externals/simplecpp -isystem externals/tinyxml2\nendif\n\nifndef INCLUDE_FOR_CLI\n    INCLUDE_FOR_CLI=-Ilib -isystem externals/picojson -isystem externals/simplecpp -isystem externals/tinyxml2\nendif\n\nifndef INCLUDE_FOR_TEST\n    INCLUDE_FOR_TEST=-Ilib -Icli -isystem externals/simplecpp -isystem externals/tinyxml2\nendif\n\nBIN=$(DESTDIR)$(PREFIX)/bin\n\n# For 'make man': sudo apt-get install xsltproc docbook-xsl docbook-xml on Linux\nDB2MAN?=/usr/share/sgml/docbook/stylesheet/xsl/nwalsh/manpages/docbook.xsl\nXP=xsltproc -''-nonet -''-param man.charmap.use.subset \"0\"\nMAN_SOURCE=man/cppcheck.1.xml\n\n\n###### Object Files\n\nLIBOBJ =      $(libcppdir)/valueflow.o \\\n              $(libcppdir)/tokenize.o \\\n              $(libcppdir)/symboldatabase.o \\\n              $(libcppdir)/addoninfo.o \\\n              $(libcppdir)/analyzerinfo.o \\\n              $(libcppdir)/astutils.o \\\n              $(libcppdir)/check.o \\\n              $(libcppdir)/check64bit.o \\\n              $(libcppdir)/checkassert.o \\\n              $(libcppdir)/checkautovariables.o \\\n              $(libcppdir)/checkbool.o \\\n              $(libcppdir)/checkboost.o \\\n              $(libcppdir)/checkbufferoverrun.o \\\n              $(libcppdir)/checkclass.o \\\n              $(libcppdir)/checkcondition.o \\\n              $(libcppdir)/checkers.o \\\n              $(libcppdir)/checkersidmapping.o \\\n              $(libcppdir)/checkersreport.o \\\n              $(libcppdir)/checkexceptionsafety.o \\\n              $(libcppdir)/checkfunctions.o \\\n              $(libcppdir)/checkinternal.o \\\n              $(libcppdir)/checkio.o \\\n              $(libcppdir)/checkleakautovar.o \\\n              $(libcppdir)/checkmemoryleak.o \\\n              $(libcppdir)/checknullpointer.o \\\n              $(libcppdir)/checkother.o \\\n              $(libcppdir)/checkpostfixoperator.o \\\n              $(libcppdir)/checksizeof.o \\\n              $(libcppdir)/checkstl.o \\\n              $(libcppdir)/checkstring.o \\\n              $(libcppdir)/checktype.o \\\n              $(libcppdir)/checkuninitvar.o \\\n              $(libcppdir)/checkunusedfunctions.o \\\n              $(libcppdir)/checkunusedvar.o \\\n              $(libcppdir)/checkvaarg.o \\\n              $(libcppdir)/clangimport.o \\\n              $(libcppdir)/color.o \\\n              $(libcppdir)/cppcheck.o \\\n              $(libcppdir)/ctu.o \\\n              $(libcppdir)/errorlogger.o \\\n              $(libcppdir)/errortypes.o \\\n              $(libcppdir)/findtoken.o \\\n              $(libcppdir)/forwardanalyzer.o \\\n              $(libcppdir)/fwdanalysis.o \\\n              $(libcppdir)/importproject.o \\\n              $(libcppdir)/infer.o \\\n              $(libcppdir)/keywords.o \\\n              $(libcppdir)/library.o \\\n              $(libcppdir)/mathlib.o \\\n              $(libcppdir)/path.o \\\n              $(libcppdir)/pathanalysis.o \\\n              $(libcppdir)/pathmatch.o \\\n              $(libcppdir)/platform.o \\\n              $(libcppdir)/preprocessor.o \\\n              $(libcppdir)/programmemory.o \\\n              $(libcppdir)/reverseanalyzer.o \\\n              $(libcppdir)/settings.o \\\n              $(libcppdir)/standards.o \\\n              $(libcppdir)/summaries.o \\\n              $(libcppdir)/suppressions.o \\\n              $(libcppdir)/templatesimplifier.o \\\n              $(libcppdir)/timer.o \\\n              $(libcppdir)/token.o \\\n              $(libcppdir)/tokenlist.o \\\n              $(libcppdir)/utils.o \\\n              $(libcppdir)/vf_analyzers.o \\\n              $(libcppdir)/vf_common.o \\\n              $(libcppdir)/vf_settokenvalue.o \\\n              $(libcppdir)/vfvalue.o\n\nEXTOBJ =      externals/simplecpp/simplecpp.o \\\n              externals/tinyxml2/tinyxml2.o\n\nCLIOBJ =      cli/cmdlineparser.o \\\n              cli/cppcheckexecutor.o \\\n              cli/executor.o \\\n              cli/filelister.o \\\n              cli/main.o \\\n              cli/processexecutor.o \\\n              cli/sehwrapper.o \\\n              cli/signalhandler.o \\\n              cli/singleexecutor.o \\\n              cli/stacktrace.o \\\n              cli/threadexecutor.o\n\nTESTOBJ =     test/fixture.o \\\n              test/helpers.o \\\n              test/main.o \\\n              test/options.o \\\n              test/test64bit.o \\\n              test/testanalyzerinformation.o \\\n              test/testassert.o \\\n              test/testastutils.o \\\n              test/testautovariables.o \\\n              test/testbool.o \\\n              test/testboost.o \\\n              test/testbufferoverrun.o \\\n              test/testcharvar.o \\\n              test/testcheck.o \\\n              test/testclangimport.o \\\n              test/testclass.o \\\n              test/testcmdlineparser.o \\\n              test/testcolor.o \\\n              test/testcondition.o \\\n              test/testconstructors.o \\\n              test/testcppcheck.o \\\n              test/testerrorlogger.o \\\n              test/testexceptionsafety.o \\\n              test/testfilelister.o \\\n              test/testfilesettings.o \\\n              test/testfunctions.o \\\n              test/testgarbage.o \\\n              test/testimportproject.o \\\n              test/testincompletestatement.o \\\n              test/testinternal.o \\\n              test/testio.o \\\n              test/testleakautovar.o \\\n              test/testlibrary.o \\\n              test/testmathlib.o \\\n              test/testmemleak.o \\\n              test/testnullpointer.o \\\n              test/testoptions.o \\\n              test/testother.o \\\n              test/testpath.o \\\n              test/testpathmatch.o \\\n              test/testplatform.o \\\n              test/testpostfixoperator.o \\\n              test/testpreprocessor.o \\\n              test/testprocessexecutor.o \\\n              test/testprogrammemory.o \\\n              test/testsettings.o \\\n              test/testsimplifytemplate.o \\\n              test/testsimplifytokens.o \\\n              test/testsimplifytypedef.o \\\n              test/testsimplifyusing.o \\\n              test/testsingleexecutor.o \\\n              test/testsizeof.o \\\n              test/teststandards.o \\\n              test/teststl.o \\\n              test/teststring.o \\\n              test/testsummaries.o \\\n              test/testsuppressions.o \\\n              test/testsymboldatabase.o \\\n              test/testthreadexecutor.o \\\n              test/testtimer.o \\\n              test/testtoken.o \\\n              test/testtokenize.o \\\n              test/testtokenlist.o \\\n              test/testtokenrange.o \\\n              test/testtype.o \\\n              test/testuninitvar.o \\\n              test/testunusedfunctions.o \\\n              test/testunusedprivfunc.o \\\n              test/testunusedvar.o \\\n              test/testutils.o \\\n              test/testvaarg.o \\\n              test/testvalueflow.o \\\n              test/testvarid.o\n\n.PHONY: run-dmake tags\n\n\n###### Targets\n\ncppcheck: $(EXTOBJ) $(LIBOBJ) $(CLIOBJ)\n\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ $^ $(LIBS) $(LDFLAGS) $(RDYNAMIC)\n\nall:\tcppcheck testrunner\n\ntestrunner: $(EXTOBJ) $(TESTOBJ) $(LIBOBJ) cli/cmdlineparser.o cli/cppcheckexecutor.o cli/executor.o cli/filelister.o cli/processexecutor.o cli/sehwrapper.o cli/signalhandler.o cli/singleexecutor.o cli/stacktrace.o cli/threadexecutor.o\n\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ $^ $(LIBS) $(LDFLAGS) $(RDYNAMIC)\n\ntest:\tall\n\t./testrunner\n\ncheck:\tall\n\t./testrunner -q\n\ncheckcfg:\tcppcheck validateCFG\n\t./test/cfg/runtests.sh\n\ndmake:\ttools/dmake/dmake.o cli/filelister.o $(libcppdir)/pathmatch.o $(libcppdir)/path.o $(libcppdir)/utils.o externals/simplecpp/simplecpp.o\n\t$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS)\n\nrun-dmake: dmake\n\t./dmake\n\nclean:\n\trm -f build/*.cpp build/*.o lib/*.o cli/*.o test/*.o tools/dmake/*.o externals/*/*.o testrunner dmake cppcheck cppcheck.exe cppcheck.1\n\nman:\tman/cppcheck.1\n\nman/cppcheck.1:\t$(MAN_SOURCE)\n\n\t$(XP) $(DB2MAN) $(MAN_SOURCE)\n\ntags:\n\tctags -R --exclude=doxyoutput --exclude=test/cfg cli externals gui lib test\n\ninstall: cppcheck\n\tinstall -d ${BIN}\n\tinstall cppcheck ${BIN}\n\tinstall htmlreport/cppcheck-htmlreport ${BIN}\nifdef FILESDIR\n\tinstall -d ${DESTDIR}${FILESDIR}\n\tinstall -d ${DESTDIR}${FILESDIR}/addons\n\tinstall -m 644 addons/*.json ${DESTDIR}${FILESDIR}/addons\n\tinstall -m 644 addons/*.py ${DESTDIR}${FILESDIR}/addons\n\tinstall -d ${DESTDIR}${FILESDIR}/cfg\n\tinstall -m 644 cfg/*.cfg ${DESTDIR}${FILESDIR}/cfg\n\tinstall -d ${DESTDIR}${FILESDIR}/platforms\n\tinstall -m 644 platforms/*.xml ${DESTDIR}${FILESDIR}/platforms\nelse\n\t$(error FILESDIR must be set!)\nendif\n\nuninstall:\n\t@if test -d ${BIN}; then \\\n\t  files=\"cppcheck cppcheck-htmlreport\"; \\\n\t  echo '(' cd ${BIN} '&&' rm -f $$files ')'; \\\n\t  ( cd ${BIN} && rm -f $$files ); \\\n\tfi\nifdef FILESDIR \n\t@if test -d ${DESTDIR}${FILESDIR}; then \\\n\t  echo rm -rf ${DESTDIR}${FILESDIR}; \\\n\t  rm -rf ${DESTDIR}${FILESDIR}; \\\n\tfi\nendif\n# Validation of library files:\nConfigFiles := $(wildcard cfg/*.cfg)\nConfigFilesCHECKED := $(patsubst %.cfg,%.checked,$(ConfigFiles))\n.PHONY: validateCFG\n%.checked:%.cfg\n\txmllint --noout --relaxng cfg/cppcheck-cfg.rng $<\nvalidateCFG: ${ConfigFilesCHECKED}\n\txmllint --noout cfg/cppcheck-cfg.rng\n\n# Validation of platforms files:\nPlatformFiles := $(wildcard platforms/*.xml)\nPlatformFilesCHECKED := $(patsubst %.xml,%.checked,$(PlatformFiles))\n.PHONY: validatePlatforms\n%.checked:%.xml\n\txmllint --noout --relaxng platforms/cppcheck-platforms.rng $<\nvalidatePlatforms: ${PlatformFilesCHECKED}\n\txmllint --noout platforms/cppcheck-platforms.rng\n\n# Validate XML output (to detect regressions)\n/tmp/errorlist.xml: cppcheck\n\t./cppcheck --errorlist >$@\n/tmp/example.xml: cppcheck\n\t./cppcheck --xml --enable=all --inconclusive --max-configs=1 samples 2>/tmp/example.xml\ncreateXMLExamples:/tmp/errorlist.xml /tmp/example.xml\n.PHONY: validateXML\nvalidateXML: createXMLExamples\n\txmllint --noout cppcheck-errors.rng\n\txmllint --noout --relaxng cppcheck-errors.rng /tmp/errorlist.xml\n\txmllint --noout --relaxng cppcheck-errors.rng /tmp/example.xml\n\ncheckCWEEntries: /tmp/errorlist.xml\n\t$(eval PYTHON_INTERPRETER := $(if $(PYTHON_INTERPRETER),$(PYTHON_INTERPRETER),$(shell which python3)))\n\t$(eval PYTHON_INTERPRETER := $(if $(PYTHON_INTERPRETER),$(PYTHON_INTERPRETER),$(shell which python)))\n\t$(eval PYTHON_INTERPRETER := $(if $(PYTHON_INTERPRETER),$(PYTHON_INTERPRETER),$(error Did not find a Python interpreter)))\n\t$(PYTHON_INTERPRETER) tools/listErrorsWithoutCWE.py -F /tmp/errorlist.xml\n.PHONY: validateRules\nvalidateRules:\n\txmllint --noout rules/*.xml\n\n###### Build\n\n$(libcppdir)/valueflow.o: lib/valueflow.cpp lib/addoninfo.h lib/analyzer.h lib/astutils.h lib/calculate.h lib/check.h lib/checkuninitvar.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/findtoken.h lib/forwardanalyzer.h lib/infer.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/programmemory.h lib/reverseanalyzer.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/timer.h lib/token.h lib/tokenlist.h lib/utils.h lib/valueflow.h lib/valueptr.h lib/vf_analyzers.h lib/vf_common.h lib/vf_settokenvalue.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/valueflow.cpp\n\n$(libcppdir)/tokenize.o: lib/tokenize.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/astutils.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/preprocessor.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/summaries.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/timer.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/valueflow.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/tokenize.cpp\n\n$(libcppdir)/symboldatabase.o: lib/symboldatabase.cpp lib/addoninfo.h lib/astutils.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/keywords.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/valueflow.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/symboldatabase.cpp\n\n$(libcppdir)/addoninfo.o: lib/addoninfo.cpp externals/picojson/picojson.h lib/addoninfo.h lib/config.h lib/json.h lib/path.h lib/standards.h lib/utils.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/addoninfo.cpp\n\n$(libcppdir)/analyzerinfo.o: lib/analyzerinfo.cpp externals/tinyxml2/tinyxml2.h lib/analyzerinfo.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/filesettings.h lib/mathlib.h lib/path.h lib/platform.h lib/standards.h lib/utils.h lib/xml.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/analyzerinfo.cpp\n\n$(libcppdir)/astutils.o: lib/astutils.cpp lib/addoninfo.h lib/astutils.h lib/check.h lib/checkclass.h lib/config.h lib/errortypes.h lib/findtoken.h lib/infer.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/utils.h lib/valueflow.h lib/valueptr.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/astutils.cpp\n\n$(libcppdir)/check.o: lib/check.cpp lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/check.cpp\n\n$(libcppdir)/check64bit.o: lib/check64bit.cpp lib/addoninfo.h lib/check.h lib/check64bit.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/check64bit.cpp\n\n$(libcppdir)/checkassert.o: lib/checkassert.cpp lib/addoninfo.h lib/astutils.h lib/check.h lib/checkassert.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkassert.cpp\n\n$(libcppdir)/checkautovariables.o: lib/checkautovariables.cpp lib/addoninfo.h lib/astutils.h lib/check.h lib/checkautovariables.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/valueflow.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkautovariables.cpp\n\n$(libcppdir)/checkbool.o: lib/checkbool.cpp lib/addoninfo.h lib/astutils.h lib/check.h lib/checkbool.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkbool.cpp\n\n$(libcppdir)/checkboost.o: lib/checkboost.cpp lib/check.h lib/checkboost.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/sourcelocation.h lib/standards.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkboost.cpp\n\n$(libcppdir)/checkbufferoverrun.o: lib/checkbufferoverrun.cpp externals/tinyxml2/tinyxml2.h lib/addoninfo.h lib/astutils.h lib/check.h lib/checkbufferoverrun.h lib/color.h lib/config.h lib/ctu.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/valueflow.h lib/vfvalue.h lib/xml.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkbufferoverrun.cpp\n\n$(libcppdir)/checkclass.o: lib/checkclass.cpp externals/tinyxml2/tinyxml2.h lib/addoninfo.h lib/astutils.h lib/check.h lib/checkclass.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/valueflow.h lib/vfvalue.h lib/xml.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkclass.cpp\n\n$(libcppdir)/checkcondition.o: lib/checkcondition.cpp lib/addoninfo.h lib/astutils.h lib/check.h lib/checkcondition.h lib/checkother.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkcondition.cpp\n\n$(libcppdir)/checkers.o: lib/checkers.cpp lib/checkers.h lib/config.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkers.cpp\n\n$(libcppdir)/checkersidmapping.o: lib/checkersidmapping.cpp lib/checkers.h lib/config.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkersidmapping.cpp\n\n$(libcppdir)/checkersreport.o: lib/checkersreport.cpp lib/addoninfo.h lib/checkers.h lib/checkersreport.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/utils.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkersreport.cpp\n\n$(libcppdir)/checkexceptionsafety.o: lib/checkexceptionsafety.cpp lib/addoninfo.h lib/astutils.h lib/check.h lib/checkexceptionsafety.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkexceptionsafety.cpp\n\n$(libcppdir)/checkfunctions.o: lib/checkfunctions.cpp lib/addoninfo.h lib/astutils.h lib/check.h lib/checkfunctions.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/valueflow.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkfunctions.cpp\n\n$(libcppdir)/checkinternal.o: lib/checkinternal.cpp lib/addoninfo.h lib/astutils.h lib/check.h lib/checkinternal.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkinternal.cpp\n\n$(libcppdir)/checkio.o: lib/checkio.cpp lib/addoninfo.h lib/astutils.h lib/check.h lib/checkio.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkio.cpp\n\n$(libcppdir)/checkleakautovar.o: lib/checkleakautovar.cpp lib/addoninfo.h lib/astutils.h lib/check.h lib/checkleakautovar.h lib/checkmemoryleak.h lib/checknullpointer.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkleakautovar.cpp\n\n$(libcppdir)/checkmemoryleak.o: lib/checkmemoryleak.cpp lib/addoninfo.h lib/astutils.h lib/check.h lib/checkmemoryleak.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkmemoryleak.cpp\n\n$(libcppdir)/checknullpointer.o: lib/checknullpointer.cpp lib/addoninfo.h lib/astutils.h lib/check.h lib/checknullpointer.h lib/color.h lib/config.h lib/ctu.h lib/errorlogger.h lib/errortypes.h lib/findtoken.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/valueflow.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checknullpointer.cpp\n\n$(libcppdir)/checkother.o: lib/checkother.cpp lib/addoninfo.h lib/astutils.h lib/check.h lib/checkother.h lib/config.h lib/errortypes.h lib/fwdanalysis.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/valueflow.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkother.cpp\n\n$(libcppdir)/checkpostfixoperator.o: lib/checkpostfixoperator.cpp lib/addoninfo.h lib/check.h lib/checkpostfixoperator.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkpostfixoperator.cpp\n\n$(libcppdir)/checksizeof.o: lib/checksizeof.cpp lib/addoninfo.h lib/check.h lib/checksizeof.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checksizeof.cpp\n\n$(libcppdir)/checkstl.o: lib/checkstl.cpp lib/addoninfo.h lib/astutils.h lib/check.h lib/checknullpointer.h lib/checkstl.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/pathanalysis.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/valueflow.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkstl.cpp\n\n$(libcppdir)/checkstring.o: lib/checkstring.cpp lib/addoninfo.h lib/astutils.h lib/check.h lib/checkstring.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkstring.cpp\n\n$(libcppdir)/checktype.o: lib/checktype.cpp lib/addoninfo.h lib/astutils.h lib/check.h lib/checktype.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/valueflow.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checktype.cpp\n\n$(libcppdir)/checkuninitvar.o: lib/checkuninitvar.cpp lib/addoninfo.h lib/astutils.h lib/check.h lib/checknullpointer.h lib/checkuninitvar.h lib/color.h lib/config.h lib/ctu.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkuninitvar.cpp\n\n$(libcppdir)/checkunusedfunctions.o: lib/checkunusedfunctions.cpp externals/tinyxml2/tinyxml2.h lib/addoninfo.h lib/astutils.h lib/checkunusedfunctions.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h lib/xml.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkunusedfunctions.cpp\n\n$(libcppdir)/checkunusedvar.o: lib/checkunusedvar.cpp lib/addoninfo.h lib/astutils.h lib/check.h lib/checkunusedvar.h lib/config.h lib/errortypes.h lib/fwdanalysis.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/valueflow.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkunusedvar.cpp\n\n$(libcppdir)/checkvaarg.o: lib/checkvaarg.cpp lib/addoninfo.h lib/astutils.h lib/check.h lib/checkvaarg.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/checkvaarg.cpp\n\n$(libcppdir)/clangimport.o: lib/clangimport.cpp lib/addoninfo.h lib/clangimport.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/clangimport.cpp\n\n$(libcppdir)/color.o: lib/color.cpp lib/color.h lib/config.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/color.cpp\n\n$(libcppdir)/cppcheck.o: lib/cppcheck.cpp externals/picojson/picojson.h externals/simplecpp/simplecpp.h externals/tinyxml2/tinyxml2.h lib/addoninfo.h lib/analyzerinfo.h lib/check.h lib/checkunusedfunctions.h lib/clangimport.h lib/color.h lib/config.h lib/cppcheck.h lib/ctu.h lib/errorlogger.h lib/errortypes.h lib/filesettings.h lib/json.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/timer.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/valueflow.h lib/version.h lib/vfvalue.h lib/xml.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/cppcheck.cpp\n\n$(libcppdir)/ctu.o: lib/ctu.cpp externals/tinyxml2/tinyxml2.h lib/addoninfo.h lib/astutils.h lib/check.h lib/color.h lib/config.h lib/ctu.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h lib/xml.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/ctu.cpp\n\n$(libcppdir)/errorlogger.o: lib/errorlogger.cpp externals/tinyxml2/tinyxml2.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/cppcheck.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/token.h lib/tokenlist.h lib/utils.h lib/vfvalue.h lib/xml.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/errorlogger.cpp\n\n$(libcppdir)/errortypes.o: lib/errortypes.cpp lib/config.h lib/errortypes.h lib/utils.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/errortypes.cpp\n\n$(libcppdir)/findtoken.o: lib/findtoken.cpp lib/astutils.h lib/config.h lib/errortypes.h lib/findtoken.h lib/library.h lib/mathlib.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/findtoken.cpp\n\n$(libcppdir)/forwardanalyzer.o: lib/forwardanalyzer.cpp lib/addoninfo.h lib/analyzer.h lib/astutils.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/forwardanalyzer.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenlist.h lib/utils.h lib/valueptr.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/forwardanalyzer.cpp\n\n$(libcppdir)/fwdanalysis.o: lib/fwdanalysis.cpp lib/addoninfo.h lib/astutils.h lib/config.h lib/errortypes.h lib/fwdanalysis.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/fwdanalysis.cpp\n\n$(libcppdir)/importproject.o: lib/importproject.cpp externals/picojson/picojson.h externals/tinyxml2/tinyxml2.h lib/addoninfo.h lib/config.h lib/errortypes.h lib/filesettings.h lib/importproject.h lib/json.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/token.h lib/tokenlist.h lib/utils.h lib/vfvalue.h lib/xml.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/importproject.cpp\n\n$(libcppdir)/infer.o: lib/infer.cpp lib/calculate.h lib/config.h lib/errortypes.h lib/infer.h lib/mathlib.h lib/templatesimplifier.h lib/token.h lib/utils.h lib/valueptr.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/infer.cpp\n\n$(libcppdir)/keywords.o: lib/keywords.cpp lib/config.h lib/keywords.h lib/standards.h lib/utils.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/keywords.cpp\n\n$(libcppdir)/library.o: lib/library.cpp externals/tinyxml2/tinyxml2.h lib/astutils.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/path.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenlist.h lib/utils.h lib/vfvalue.h lib/xml.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/library.cpp\n\n$(libcppdir)/mathlib.o: lib/mathlib.cpp externals/simplecpp/simplecpp.h lib/config.h lib/errortypes.h lib/mathlib.h lib/templatesimplifier.h lib/token.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/mathlib.cpp\n\n$(libcppdir)/path.o: lib/path.cpp externals/simplecpp/simplecpp.h lib/config.h lib/path.h lib/standards.h lib/utils.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/path.cpp\n\n$(libcppdir)/pathanalysis.o: lib/pathanalysis.cpp lib/astutils.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/pathanalysis.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/pathanalysis.cpp\n\n$(libcppdir)/pathmatch.o: lib/pathmatch.cpp lib/config.h lib/path.h lib/pathmatch.h lib/standards.h lib/utils.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/pathmatch.cpp\n\n$(libcppdir)/platform.o: lib/platform.cpp externals/tinyxml2/tinyxml2.h lib/config.h lib/mathlib.h lib/path.h lib/platform.h lib/standards.h lib/xml.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/platform.cpp\n\n$(libcppdir)/preprocessor.o: lib/preprocessor.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/utils.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/preprocessor.cpp\n\n$(libcppdir)/programmemory.o: lib/programmemory.cpp lib/addoninfo.h lib/astutils.h lib/calculate.h lib/config.h lib/errortypes.h lib/infer.h lib/library.h lib/mathlib.h lib/platform.h lib/programmemory.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenlist.h lib/utils.h lib/valueflow.h lib/valueptr.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/programmemory.cpp\n\n$(libcppdir)/reverseanalyzer.o: lib/reverseanalyzer.cpp lib/addoninfo.h lib/analyzer.h lib/astutils.h lib/config.h lib/errortypes.h lib/forwardanalyzer.h lib/library.h lib/mathlib.h lib/platform.h lib/reverseanalyzer.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/utils.h lib/valueptr.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/reverseanalyzer.cpp\n\n$(libcppdir)/settings.o: lib/settings.cpp externals/picojson/picojson.h lib/addoninfo.h lib/config.h lib/errortypes.h lib/json.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/settings.h lib/standards.h lib/summaries.h lib/suppressions.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/settings.cpp\n\n$(libcppdir)/standards.o: lib/standards.cpp externals/simplecpp/simplecpp.h lib/config.h lib/standards.h lib/utils.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/standards.cpp\n\n$(libcppdir)/summaries.o: lib/summaries.cpp lib/addoninfo.h lib/analyzerinfo.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/sourcelocation.h lib/standards.h lib/summaries.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/summaries.cpp\n\n$(libcppdir)/suppressions.o: lib/suppressions.cpp externals/tinyxml2/tinyxml2.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/filesettings.h lib/mathlib.h lib/path.h lib/platform.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h lib/xml.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/suppressions.cpp\n\n$(libcppdir)/templatesimplifier.o: lib/templatesimplifier.cpp lib/addoninfo.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/templatesimplifier.cpp\n\n$(libcppdir)/timer.o: lib/timer.cpp lib/config.h lib/timer.h lib/utils.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/timer.cpp\n\n$(libcppdir)/token.o: lib/token.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/astutils.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenlist.h lib/tokenrange.h lib/utils.h lib/valueflow.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/token.cpp\n\n$(libcppdir)/tokenlist.o: lib/tokenlist.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/astutils.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/keywords.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenlist.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/tokenlist.cpp\n\n$(libcppdir)/utils.o: lib/utils.cpp lib/config.h lib/utils.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/utils.cpp\n\n$(libcppdir)/vf_analyzers.o: lib/vf_analyzers.cpp lib/addoninfo.h lib/analyzer.h lib/astutils.h lib/calculate.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/programmemory.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/utils.h lib/valueflow.h lib/valueptr.h lib/vf_analyzers.h lib/vf_common.h lib/vf_settokenvalue.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/vf_analyzers.cpp\n\n$(libcppdir)/vf_common.o: lib/vf_common.cpp lib/addoninfo.h lib/astutils.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/utils.h lib/valueflow.h lib/vf_common.h lib/vf_settokenvalue.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/vf_common.cpp\n\n$(libcppdir)/vf_settokenvalue.o: lib/vf_settokenvalue.cpp lib/addoninfo.h lib/astutils.h lib/calculate.h lib/config.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/utils.h lib/valueflow.h lib/vf_common.h lib/vf_settokenvalue.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/vf_settokenvalue.cpp\n\n$(libcppdir)/vfvalue.o: lib/vfvalue.cpp lib/config.h lib/errortypes.h lib/mathlib.h lib/templatesimplifier.h lib/token.h lib/utils.h lib/vfvalue.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $(libcppdir)/vfvalue.cpp\n\ncli/cmdlineparser.o: cli/cmdlineparser.cpp cli/cmdlinelogger.h cli/cmdlineparser.h cli/filelister.h externals/tinyxml2/tinyxml2.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/cppcheck.h lib/errorlogger.h lib/errortypes.h lib/filesettings.h lib/importproject.h lib/library.h lib/mathlib.h lib/path.h lib/pathmatch.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/timer.h lib/utils.h lib/xml.h\n\t$(CXX) ${INCLUDE_FOR_CLI} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ cli/cmdlineparser.cpp\n\ncli/cppcheckexecutor.o: cli/cppcheckexecutor.cpp cli/cmdlinelogger.h cli/cmdlineparser.h cli/cppcheckexecutor.h cli/executor.h cli/processexecutor.h cli/sehwrapper.h cli/signalhandler.h cli/singleexecutor.h cli/threadexecutor.h externals/picojson/picojson.h lib/addoninfo.h lib/analyzerinfo.h lib/check.h lib/checkersreport.h lib/color.h lib/config.h lib/cppcheck.h lib/errorlogger.h lib/errortypes.h lib/filesettings.h lib/json.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/utils.h\n\t$(CXX) ${INCLUDE_FOR_CLI} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ cli/cppcheckexecutor.cpp\n\ncli/executor.o: cli/executor.cpp cli/executor.h lib/addoninfo.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/utils.h\n\t$(CXX) ${INCLUDE_FOR_CLI} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ cli/executor.cpp\n\ncli/filelister.o: cli/filelister.cpp cli/filelister.h lib/config.h lib/filesettings.h lib/mathlib.h lib/path.h lib/pathmatch.h lib/platform.h lib/standards.h lib/utils.h\n\t$(CXX) ${INCLUDE_FOR_CLI} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ cli/filelister.cpp\n\ncli/main.o: cli/main.cpp cli/cppcheckexecutor.h lib/config.h lib/errortypes.h lib/filesettings.h lib/mathlib.h lib/path.h lib/platform.h lib/standards.h\n\t$(CXX) ${INCLUDE_FOR_CLI} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ cli/main.cpp\n\ncli/processexecutor.o: cli/processexecutor.cpp cli/executor.h cli/processexecutor.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/cppcheck.h lib/errorlogger.h lib/errortypes.h lib/filesettings.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/timer.h lib/utils.h\n\t$(CXX) ${INCLUDE_FOR_CLI} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ cli/processexecutor.cpp\n\ncli/sehwrapper.o: cli/sehwrapper.cpp cli/sehwrapper.h lib/config.h lib/utils.h\n\t$(CXX) ${INCLUDE_FOR_CLI} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ cli/sehwrapper.cpp\n\ncli/signalhandler.o: cli/signalhandler.cpp cli/signalhandler.h cli/stacktrace.h lib/config.h lib/utils.h\n\t$(CXX) ${INCLUDE_FOR_CLI} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ cli/signalhandler.cpp\n\ncli/singleexecutor.o: cli/singleexecutor.cpp cli/executor.h cli/singleexecutor.h lib/addoninfo.h lib/check.h lib/config.h lib/cppcheck.h lib/errortypes.h lib/filesettings.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/timer.h lib/utils.h\n\t$(CXX) ${INCLUDE_FOR_CLI} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ cli/singleexecutor.cpp\n\ncli/stacktrace.o: cli/stacktrace.cpp cli/stacktrace.h lib/config.h lib/utils.h\n\t$(CXX) ${INCLUDE_FOR_CLI} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ cli/stacktrace.cpp\n\ncli/threadexecutor.o: cli/threadexecutor.cpp cli/executor.h cli/threadexecutor.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/cppcheck.h lib/errorlogger.h lib/errortypes.h lib/filesettings.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/timer.h lib/utils.h\n\t$(CXX) ${INCLUDE_FOR_CLI} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ cli/threadexecutor.cpp\n\ntest/fixture.o: test/fixture.cpp externals/simplecpp/simplecpp.h externals/tinyxml2/tinyxml2.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/cppcheck.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/xml.h test/fixture.h test/helpers.h test/options.h test/redirect.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/fixture.cpp\n\ntest/helpers.o: test/helpers.cpp cli/filelister.h externals/simplecpp/simplecpp.h externals/tinyxml2/tinyxml2.h lib/addoninfo.h lib/config.h lib/errortypes.h lib/filesettings.h lib/library.h lib/mathlib.h lib/path.h lib/pathmatch.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/xml.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/helpers.cpp\n\ntest/main.o: test/main.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/utils.h test/fixture.h test/options.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/main.cpp\n\ntest/options.o: test/options.cpp test/options.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/options.cpp\n\ntest/test64bit.o: test/test64bit.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/check64bit.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/test64bit.cpp\n\ntest/testanalyzerinformation.o: test/testanalyzerinformation.cpp lib/addoninfo.h lib/analyzerinfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/utils.h test/fixture.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testanalyzerinformation.cpp\n\ntest/testassert.o: test/testassert.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkassert.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testassert.cpp\n\ntest/testastutils.o: test/testastutils.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/astutils.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/smallvector.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testastutils.cpp\n\ntest/testautovariables.o: test/testautovariables.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkautovariables.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testautovariables.cpp\n\ntest/testbool.o: test/testbool.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkbool.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testbool.cpp\n\ntest/testboost.o: test/testboost.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkboost.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testboost.cpp\n\ntest/testbufferoverrun.o: test/testbufferoverrun.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkbufferoverrun.h lib/color.h lib/config.h lib/ctu.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testbufferoverrun.cpp\n\ntest/testcharvar.o: test/testcharvar.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkother.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testcharvar.cpp\n\ntest/testcheck.o: test/testcheck.cpp lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/utils.h test/fixture.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testcheck.cpp\n\ntest/testclangimport.o: test/testclangimport.cpp lib/addoninfo.h lib/check.h lib/clangimport.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testclangimport.cpp\n\ntest/testclass.o: test/testclass.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkclass.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testclass.cpp\n\ntest/testcmdlineparser.o: test/testcmdlineparser.cpp cli/cmdlinelogger.h cli/cmdlineparser.h externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/filesettings.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/timer.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h test/redirect.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testcmdlineparser.cpp\n\ntest/testcolor.o: test/testcolor.cpp lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/utils.h test/fixture.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testcolor.cpp\n\ntest/testcondition.o: test/testcondition.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkcondition.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testcondition.cpp\n\ntest/testconstructors.o: test/testconstructors.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkclass.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testconstructors.cpp\n\ntest/testcppcheck.o: test/testcppcheck.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/cppcheck.h lib/errorlogger.h lib/errortypes.h lib/filesettings.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testcppcheck.cpp\n\ntest/testerrorlogger.o: test/testerrorlogger.cpp externals/tinyxml2/tinyxml2.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/cppcheck.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/utils.h lib/xml.h test/fixture.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testerrorlogger.cpp\n\ntest/testexceptionsafety.o: test/testexceptionsafety.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkexceptionsafety.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testexceptionsafety.cpp\n\ntest/testfilelister.o: test/testfilelister.cpp cli/filelister.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/filesettings.h lib/library.h lib/mathlib.h lib/path.h lib/pathmatch.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/utils.h test/fixture.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testfilelister.cpp\n\ntest/testfilesettings.o: test/testfilesettings.cpp lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/filesettings.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/utils.h test/fixture.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testfilesettings.cpp\n\ntest/testfunctions.o: test/testfunctions.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkfunctions.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testfunctions.cpp\n\ntest/testgarbage.o: test/testgarbage.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testgarbage.cpp\n\ntest/testimportproject.o: test/testimportproject.cpp lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/filesettings.h lib/importproject.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/utils.h test/fixture.h test/redirect.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testimportproject.cpp\n\ntest/testincompletestatement.o: test/testincompletestatement.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkother.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testincompletestatement.cpp\n\ntest/testinternal.o: test/testinternal.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkinternal.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testinternal.cpp\n\ntest/testio.o: test/testio.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkio.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testio.cpp\n\ntest/testleakautovar.o: test/testleakautovar.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkleakautovar.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testleakautovar.cpp\n\ntest/testlibrary.o: test/testlibrary.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testlibrary.cpp\n\ntest/testmathlib.o: test/testmathlib.cpp lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/token.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testmathlib.cpp\n\ntest/testmemleak.o: test/testmemleak.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkmemoryleak.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testmemleak.cpp\n\ntest/testnullpointer.o: test/testnullpointer.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checknullpointer.h lib/color.h lib/config.h lib/ctu.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testnullpointer.cpp\n\ntest/testoptions.o: test/testoptions.cpp lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/utils.h test/fixture.h test/options.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testoptions.cpp\n\ntest/testother.o: test/testother.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkother.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testother.cpp\n\ntest/testpath.o: test/testpath.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testpath.cpp\n\ntest/testpathmatch.o: test/testpathmatch.cpp lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/pathmatch.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/utils.h test/fixture.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testpathmatch.cpp\n\ntest/testplatform.o: test/testplatform.cpp externals/tinyxml2/tinyxml2.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/utils.h lib/xml.h test/fixture.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testplatform.cpp\n\ntest/testpostfixoperator.o: test/testpostfixoperator.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkpostfixoperator.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testpostfixoperator.cpp\n\ntest/testpreprocessor.o: test/testpreprocessor.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testpreprocessor.cpp\n\ntest/testprocessexecutor.o: test/testprocessexecutor.cpp cli/executor.h cli/processexecutor.h externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/cppcheck.h lib/errorlogger.h lib/errortypes.h lib/filesettings.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/timer.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h test/redirect.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testprocessexecutor.cpp\n\ntest/testprogrammemory.o: test/testprogrammemory.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/programmemory.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testprogrammemory.cpp\n\ntest/testsettings.o: test/testsettings.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testsettings.cpp\n\ntest/testsimplifytemplate.o: test/testsimplifytemplate.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testsimplifytemplate.cpp\n\ntest/testsimplifytokens.o: test/testsimplifytokens.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testsimplifytokens.cpp\n\ntest/testsimplifytypedef.o: test/testsimplifytypedef.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testsimplifytypedef.cpp\n\ntest/testsimplifyusing.o: test/testsimplifyusing.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testsimplifyusing.cpp\n\ntest/testsingleexecutor.o: test/testsingleexecutor.cpp cli/executor.h cli/singleexecutor.h externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/cppcheck.h lib/errorlogger.h lib/errortypes.h lib/filesettings.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/timer.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h test/redirect.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testsingleexecutor.cpp\n\ntest/testsizeof.o: test/testsizeof.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checksizeof.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testsizeof.cpp\n\ntest/teststandards.o: test/teststandards.cpp lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/utils.h test/fixture.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/teststandards.cpp\n\ntest/teststl.o: test/teststl.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkstl.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/teststl.cpp\n\ntest/teststring.o: test/teststring.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkstring.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/teststring.cpp\n\ntest/testsummaries.o: test/testsummaries.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/summaries.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testsummaries.cpp\n\ntest/testsuppressions.o: test/testsuppressions.cpp cli/cppcheckexecutor.h cli/executor.h cli/processexecutor.h cli/singleexecutor.h cli/threadexecutor.h externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/cppcheck.h lib/errorlogger.h lib/errortypes.h lib/filesettings.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testsuppressions.cpp\n\ntest/testsymboldatabase.o: test/testsymboldatabase.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testsymboldatabase.cpp\n\ntest/testthreadexecutor.o: test/testthreadexecutor.cpp cli/executor.h cli/threadexecutor.h externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/cppcheck.h lib/errorlogger.h lib/errortypes.h lib/filesettings.h lib/library.h lib/mathlib.h lib/path.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/timer.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h test/redirect.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testthreadexecutor.cpp\n\ntest/testtimer.o: test/testtimer.cpp lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/timer.h lib/utils.h test/fixture.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testtimer.cpp\n\ntest/testtoken.o: test/testtoken.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testtoken.cpp\n\ntest/testtokenize.o: test/testtokenize.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testtokenize.cpp\n\ntest/testtokenlist.o: test/testtokenlist.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testtokenlist.cpp\n\ntest/testtokenrange.o: test/testtokenrange.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/tokenrange.h lib/utils.h lib/vfvalue.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testtokenrange.cpp\n\ntest/testtype.o: test/testtype.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checktype.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testtype.cpp\n\ntest/testuninitvar.o: test/testuninitvar.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkuninitvar.h lib/color.h lib/config.h lib/ctu.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testuninitvar.cpp\n\ntest/testunusedfunctions.o: test/testunusedfunctions.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkunusedfunctions.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testunusedfunctions.cpp\n\ntest/testunusedprivfunc.o: test/testunusedprivfunc.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkclass.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/sourcelocation.h lib/standards.h lib/suppressions.h lib/symboldatabase.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testunusedprivfunc.cpp\n\ntest/testunusedvar.o: test/testunusedvar.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkunusedvar.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testunusedvar.cpp\n\ntest/testutils.o: test/testutils.cpp lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/settings.h lib/standards.h lib/suppressions.h lib/utils.h test/fixture.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testutils.cpp\n\ntest/testvaarg.o: test/testvaarg.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/checkvaarg.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/tokenize.h lib/tokenlist.h lib/utils.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testvaarg.cpp\n\ntest/testvalueflow.o: test/testvalueflow.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testvalueflow.cpp\n\ntest/testvarid.o: test/testvarid.cpp externals/simplecpp/simplecpp.h lib/addoninfo.h lib/check.h lib/color.h lib/config.h lib/errorlogger.h lib/errortypes.h lib/library.h lib/mathlib.h lib/platform.h lib/preprocessor.h lib/settings.h lib/standards.h lib/suppressions.h lib/templatesimplifier.h lib/token.h lib/tokenize.h lib/tokenlist.h lib/utils.h lib/vfvalue.h test/fixture.h test/helpers.h\n\t$(CXX) ${INCLUDE_FOR_TEST} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ test/testvarid.cpp\n\nexternals/simplecpp/simplecpp.o: externals/simplecpp/simplecpp.cpp externals/simplecpp/simplecpp.h\n\t$(CXX)  $(CPPFLAGS) $(CXXFLAGS) -w -c -o $@ externals/simplecpp/simplecpp.cpp\n\nexternals/tinyxml2/tinyxml2.o: externals/tinyxml2/tinyxml2.cpp externals/tinyxml2/tinyxml2.h\n\t$(CXX)  $(CPPFLAGS) $(CXXFLAGS) -w -D_LARGEFILE_SOURCE -c -o $@ externals/tinyxml2/tinyxml2.cpp\n\ntools/dmake/dmake.o: tools/dmake/dmake.cpp cli/filelister.h lib/config.h lib/filesettings.h lib/mathlib.h lib/path.h lib/pathmatch.h lib/platform.h lib/standards.h lib/utils.h\n\t$(CXX) ${INCLUDE_FOR_LIB} $(CPPFLAGS) $(CXXFLAGS) -c -o $@ tools/dmake/dmake.cpp\n\n"
        },
        {
          "name": "addons",
          "type": "tree",
          "content": null
        },
        {
          "name": "build-pcre.txt",
          "type": "blob",
          "size": 1.3271484375,
          "content": "PCRE is a library that is used by the optional \"rules\" feature for the command\nline version of cppcheck. It is readily available on Linux and Mac OS X, but\nmust be obtained separately for Windows.\n\nBuild instructions\n------------------\n\nWindows\n-------\n\nVisual Studio\n\nTo build PCRE, download the source code from www.pcre.org and\nCMake (https://cmake.org/download/). We assume you use Visual Studio 2015 -\notherwise adapt the commands for your version.\n\nVS Solution file\n  cmake . -G \"Visual Studio 14 2015\"\n  Open PCRE.sln with VS IDE or via cmd:\n    call \"%VS140COMNTOOLS%..\\..\\VC\\vcvarsall.bat\" x86\n    MSBuild PCRE.sln /target:Build /property:Configuration=\"Release\"\n\n  For 64-bit target: cmake . -G \"Visual Studio 14 2015 Win64\"\n\nor using NMake\n  call \"%VS140COMNTOOLS%..\\..\\VC\\vcvarsall.bat\" x86\n  cmake . -G \"NMake Makefiles\"\n  nmake\n\nor using MSYS\n  cmake . -G \"MSYS Makefiles\"\n  make\n\n\nLinux\n-----\n\nThe normal Makefile should work.\n\nInstall PCRE on Ubuntu might be needed:\n  sudo apt-get install libpcre3 libpcre3-dev\n\n\nMac OSX\n-------\n\nInstall PCRE:\n\nhomebre\n  brew install pcre\n\nor macport\n  sudo port install pcre\n\nEnsure /path/to/pcre.h is in CXXFLAGS, e.g:\n\nfor homebrew\n  export CXXFLAGS=${CXXFLAGS}:/usr/local/include\n\nor macport\n  export CXXFLAGS=${CXXFLAGS}:/opt/local/include\n\nOr for MSVC copy pcre.lib and pcre.h in /externals directory.\n"
        },
        {
          "name": "cfg",
          "type": "tree",
          "content": null
        },
        {
          "name": "clang-tidy.md",
          "type": "blob",
          "size": 6.6171875,
          "content": "# clang-tidy\n\nBelow are the reasoning why certain checks are (currently) disabled for out code base\n\n## Externals\n\nWe do not perform static analysis of the source of the external libraries. `simplecpp` has its own CI with a clang-tidy workflow.\n\n## Disabled Checks\n\n`abseil-*`<br/>\n`altera-*`<br/>\n`android-*`<br/>\n`boost-*`<br/>\n`darwin-*`<br/>\n`fuchsia-*`<br/>\n`linuxkernel-*`<br/>\n`llvm-*`<br/>\n`llvmlibc-*`<br/>\n`mpi-*`<br/>\n`objc-*`<br/>\n`openmp-*`<br/>\n`zircon-*`<br/>\n\nThese are disabled since the platforms/libraries in question are not targeted by us.\n\n`cert-*`<br/>\n`cppcoreguidelines-*`<br/>\n`google-*`<br/>\n`hicpp-*`<br/>\n\nThese are coding guidelines we do not follow. Some of the checks might be explicitly enabled though.\n\n`readability-braces-around-statements`<br/>\n`readability-isolate-declaration`<br/>\n`modernize-use-trailing-return-type`<br/>\n`readability-uppercase-literal-suffix`<br/>\n`readability-identifier-length`<br/>\n\nThese do not reflect the style we are (currently) enforcing.\n\n`readability-function-size`<br/>\n`readability-function-cognitive-complexity`<br/>\n\nWe are not interested in the size/complexity of a function.\n\n`readability-magic-numbers`<br/>\n\nThese do not (always) increase readability.\n\n`bugprone-macro-parentheses`<br/>\n\nTo be documented.\n\n`readability-implicit-bool-conversion`<br/>\n\nThis does not appear to be useful as it is reported on very common code.\n\n`bugprone-narrowing-conversions`<br/>\n`performance-no-automatic-move`<br/>\n\nIt was decided not to apply these.\n\n`modernize-loop-convert`<br/>\n\nThese might change the behavior of code which might not be intended (need to file an upstream issue)\n\n`modernize-raw-string-literal`<br/>\n\nThis leads to a mismatch of raw string literals and regular ones and does reduce the readability.\n\n`-clang-analyzer-*`<br/>\n\nDisabled because of false positives (need to file upstream bug reports). The checks are also quite time consuming.\n\n`misc-non-private-member-variables-in-classes`<br/>\n\nWe intentionally use this.\n\n`misc-no-recursion`<br/>\n\nLeads to lots of \"false positives\". This seem to enforce a coding guidelines of certain codebases.\n\n`bugprone-easily-swappable-parameters`<br/>\n\nThis produces a lot of noise and they are not fixable that easily.\n\n`readability-container-data-pointer`<br/>\n\nDisable because of false positives and inconsistent warnings (need to file an upstream bug report).\n\n`misc-const-correctness`<br/>\n\nWork in progress.\n\n`bugprone-assignment-in-if-condition`<br/>\n\nIs reported for valid patterns we are using.\n\n`readability-suspicious-call-argument`<br/>\n\nProduces a lot of false positives since it is too vague in its analysis.\n\n`performance-inefficient-string-concatenation`<br/>\n\nProduces warnings which might be considered false positives starting with C++11 - see https://github.com/llvm/llvm-project/issues/54526.\n\n`modernize-avoid-c-arrays`<br/>\n\nProduces warnings when `const char[]` is being used which is quite common in our code. Does not make sense to enable before C++17 when `std::string_view` becomes available.\nAlso reports a false positive about templates which deduce the array length: https://github.com/llvm/llvm-project/issues/60053.\n\n`misc-include-cleaner`<br/>\n\nWe run this separately via `clang-include-cleaner` in the `iwyu.yml` workflow as the findings of the include checkers still need to be reviewed manually before applying them. \n\n`bugprone-branch-clone`<br/>\n`modernize-return-braced-init-list`<br/>\n`misc-throw-by-value-catch-by-reference`<br/>\n`bugprone-signed-char-misuse`<br/>\n`concurrency-mt-unsafe`<br/>\n`misc-use-anonymous-namespace`<br/>\n`performance-avoid-endl`<br/>\n`bugprone-switch-missing-default-case`<br/>\n`bugprone-empty-catch`<br/>\n`readability-avoid-nested-conditional-operator`<br/>\n`modernize-use-designated-initializers`<br/>\n`readability-enum-initial-value`<br/>\n\nTo be evaluated (need to remove exclusion).\n\n`cppcoreguidelines-missing-std-forward`<br/>\n`cppcoreguidelines-avoid-const-or-ref-data-members`<br/>\n`cppcoreguidelines-macro-usage`<br/>\n`cppcoreguidelines-pro-type-member-init`<br/>\n`cppcoreguidelines-prefer-member-initializer`<br/>\n`cppcoreguidelines-misleading-capture-default-by-value`<br/>\n`bugprone-argument-comment.CommentBoolLiterals`<br/>\n`cert-err33-c`<br/>\n`google-readability-namespace-comments`<br/>\n`cppcoreguidelines-special-member-functions`<br/>\n\nTo be evaluated (need to enable explicitly).\n\n`modernize-type-traits`<br/>\n`modernize-use-nodiscard`<br/>\n\nThese apply to codebases which use later standards then C++11 (C++17 is used when building with Qt6) so we cannot simply apply them.\n\n### Disabled for performance reasons\n\n`portability-std-allocator-const`<br/>\n\nOnly necessary for code which is exclusively compiled with `libc++`. Also disabled for performance reasons - see https://github.com/llvm/llvm-project/issues/57527#issuecomment-1237935132.\n\n`modernize-deprecated-ios-base-aliases`<br/>\n\nWarns about aliases which are removed in C++20. Also disabled for performance reasons - see https://github.com/llvm/llvm-project/issues/57527#issuecomment-1237935132.\n\n`bugprone-unchecked-optional-access`<br/>\n\nWe are not using any `optional` implementation. Also disabled for performance reasons - see https://github.com/llvm/llvm-project/issues/57527#issuecomment-1237935132.\n\n`modernize-replace-auto-ptr`<br/>\n\nStill available until C++17. It is unlikely such code will ever be introduced. Also disabled for performance reasons - see https://github.com/llvm/llvm-project/issues/57527#issuecomment-1237935132.\n\n`readability-identifier-naming`<br/>\n\nWe are currently using our own `naming.json` to enforce naming schemes. Also disabled for performance reasons - see https://github.com/llvm/llvm-project/issues/57527#issuecomment-1237935132.\n\n`portability-simd-intrinsics`<br/>\n\nWe are not using SIMD instructions and it suggests to use `std::experiemental::` features which might not be commonly available. Also disabled for performance reasons - see https://github.com/llvm/llvm-project/issues/57527#issuecomment-1237935132.\n\n`modernize-macro-to-enum`<br/>\n\nIt does not seem to produce any warnings for us (needs to be investigated) and it is one of the more expensive checks.\n\n`misc-unused-using-decls`<br/>\n\nThis is the most expensive check for several files and it is providing much in terms of code quality. Reported upstream as https://github.com/llvm/llvm-project/issues/72300.\n\n### Disabled for GUI only\n\n`readability-convert-member-functions-to-static`<br/>\n\nDisabled because of false positives with Qt `slot` methods (see https://github.com/llvm/llvm-project/issues/57520).\n\n`readability-redundant-access-specifiers`<br/>\n\nReports warning with the Qt `<access-specifier> slots:` syntax in class declarations - see https://github.com/llvm/llvm-project/issues/60055.\n"
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.064453125,
          "content": "comment: false\ncoverage:\n  status:\n    project: off\n    patch: off"
        },
        {
          "name": "cppcheck-errors.rng",
          "type": "blob",
          "size": 3.0751953125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<grammar xmlns=\"http://relaxng.org/ns/structure/1.0\" ns=\"\" datatypeLibrary=\"http://www.w3.org/2001/XMLSchema-datatypes\">\n  <start>\n    <element name=\"results\">\n      <attribute name=\"version\">\n        <choice>\n          <value type=\"string\">2</value>\n        </choice>\n      </attribute>\n      <element name=\"cppcheck\">\n        <attribute name=\"version\">\n          <data type=\"string\">\n            <param name=\"pattern\">[1-9]\\.[0-9]+.*</param>\n          </data>\n        </attribute>\n      </element>\n      <element name=\"errors\">\n        <zeroOrMore>\n          <element name=\"error\">\n            <attribute name=\"id\">\n              <data type=\"NCName\"/>\n            </attribute>\n            <optional>\n              <attribute name=\"inconclusive\">\n                <data type=\"boolean\"/>\n              </attribute>\n            </optional>\n            <attribute name=\"msg\">\n              <data type=\"string\"/>\n            </attribute>\n            <attribute name=\"severity\">\n              <choice>\n                <value type=\"string\">error</value>\n                <value type=\"string\">information</value>\n                <value type=\"string\">performance</value>\n                <value type=\"string\">portability</value>\n                <value type=\"string\">style</value>\n                <value type=\"string\">warning</value>\n              </choice>\n            </attribute>\n            <attribute name=\"verbose\">\n              <data type=\"string\"/>\n            </attribute>\n            <optional>\n              <attribute name=\"file0\">\n                <data type=\"string\"/>\n              </attribute>\n            </optional>\n            <optional>\n              <attribute name=\"cwe\">\n                <data type=\"integer\">\n                  <param name=\"minExclusive\">0</param>\n                </data>\n              </attribute>\n            </optional>\n            <optional>\n              <attribute name=\"hash\">\n                <data type=\"integer\">\n                  <param name=\"minExclusive\">1</param>\n                </data>\n              </attribute>\n            </optional>\n            <zeroOrMore>\n              <element name=\"location\">\n                <attribute name=\"file\">\n                  <data type=\"string\"/>\n                </attribute>\n                <attribute name=\"line\">\n                  <data type=\"integer\">\n                    <param name=\"minInclusive\">0</param>\n                  </data>\n                </attribute>\n                <attribute name=\"column\">\n                  <data type=\"integer\">\n                    <param name=\"minInclusive\">0</param>\n                  </data>\n                </attribute>\n                <optional>\n                  <attribute name=\"info\">\n                    <data type=\"string\"/>\n                  </attribute>\n                </optional>\n              </element>\n            </zeroOrMore>\n            <zeroOrMore>\n              <element name=\"symbol\">\n                <data type=\"string\"/>\n              </element>\n            </zeroOrMore>\n          </element>\n        </zeroOrMore>\n      </element>\n    </element>\n  </start>\n</grammar>\n"
        },
        {
          "name": "cppcheck.cppcheck",
          "type": "blob",
          "size": 0.544921875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"1\">\n    <root name=\".\"/>\n    <builddir>out1</builddir>\n    <analyze-all-vs-configs>true</analyze-all-vs-configs>\n    <includedir>\n        <dir name=\"lib/\"/>\n        <dir name=\"cli/\"/>\n        <dir name=\"externals/\"/>\n        <dir name=\"gui/temp/\"/>\n        <dir name=\"gui/\"/>\n    </includedir>\n    <paths>\n        <dir name=\"lib/\"/>\n        <dir name=\"cli/\"/>\n        <dir name=\"gui/\"/>\n        <dir name=\"test/\"/>\n    </paths>\n    <exclude>\n        <path name=\"gui/temp/\"/>\n    </exclude>\n</project>\n"
        },
        {
          "name": "cppcheck.sln",
          "type": "blob",
          "size": 3.234375,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.12.35506.116 d17.12\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"cli\", \"cli\\cli.vcxproj\", \"{35CBDF51-2456-3EC3-99ED-113C30858883}\"\n\tProjectSection(ProjectDependencies) = postProject\n\t\t{C183DB5B-AD6C-423D-80CA-1F9549555A1A} = {C183DB5B-AD6C-423D-80CA-1F9549555A1A}\n\tEndProjectSection\nEndProject\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"testrunner\", \"test\\testrunner.vcxproj\", \"{4F7DCE5E-6CDE-38C4-9EA7-27AF3B25CEB4}\"\n\tProjectSection(ProjectDependencies) = postProject\n\t\t{C183DB5B-AD6C-423D-80CA-1F9549555A1A} = {C183DB5B-AD6C-423D-80CA-1F9549555A1A}\n\tEndProjectSection\nEndProject\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"cppcheck\", \"lib\\cppcheck.vcxproj\", \"{C183DB5B-AD6C-423D-80CA-1F9549555A1A}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|x64 = Debug|x64\n\t\tDebug-PCRE|x64 = Debug-PCRE|x64\n\t\tRelease|x64 = Release|x64\n\t\tRelease-PCRE|x64 = Release-PCRE|x64\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{35CBDF51-2456-3EC3-99ED-113C30858883}.Debug|x64.ActiveCfg = Debug|x64\n\t\t{35CBDF51-2456-3EC3-99ED-113C30858883}.Debug|x64.Build.0 = Debug|x64\n\t\t{35CBDF51-2456-3EC3-99ED-113C30858883}.Debug-PCRE|x64.ActiveCfg = Debug-PCRE|x64\n\t\t{35CBDF51-2456-3EC3-99ED-113C30858883}.Debug-PCRE|x64.Build.0 = Debug-PCRE|x64\n\t\t{35CBDF51-2456-3EC3-99ED-113C30858883}.Release|x64.ActiveCfg = Release|x64\n\t\t{35CBDF51-2456-3EC3-99ED-113C30858883}.Release|x64.Build.0 = Release|x64\n\t\t{35CBDF51-2456-3EC3-99ED-113C30858883}.Release-PCRE|x64.ActiveCfg = Release-PCRE|x64\n\t\t{35CBDF51-2456-3EC3-99ED-113C30858883}.Release-PCRE|x64.Build.0 = Release-PCRE|x64\n\t\t{4F7DCE5E-6CDE-38C4-9EA7-27AF3B25CEB4}.Debug|x64.ActiveCfg = Debug|x64\n\t\t{4F7DCE5E-6CDE-38C4-9EA7-27AF3B25CEB4}.Debug|x64.Build.0 = Debug|x64\n\t\t{4F7DCE5E-6CDE-38C4-9EA7-27AF3B25CEB4}.Debug-PCRE|x64.ActiveCfg = Debug-PCRE|x64\n\t\t{4F7DCE5E-6CDE-38C4-9EA7-27AF3B25CEB4}.Debug-PCRE|x64.Build.0 = Debug-PCRE|x64\n\t\t{4F7DCE5E-6CDE-38C4-9EA7-27AF3B25CEB4}.Release|x64.ActiveCfg = Release|x64\n\t\t{4F7DCE5E-6CDE-38C4-9EA7-27AF3B25CEB4}.Release|x64.Build.0 = Release|x64\n\t\t{4F7DCE5E-6CDE-38C4-9EA7-27AF3B25CEB4}.Release-PCRE|x64.ActiveCfg = Release-PCRE|x64\n\t\t{4F7DCE5E-6CDE-38C4-9EA7-27AF3B25CEB4}.Release-PCRE|x64.Build.0 = Release-PCRE|x64\n\t\t{C183DB5B-AD6C-423D-80CA-1F9549555A1A}.Debug|x64.ActiveCfg = Debug|x64\n\t\t{C183DB5B-AD6C-423D-80CA-1F9549555A1A}.Debug|x64.Build.0 = Debug|x64\n\t\t{C183DB5B-AD6C-423D-80CA-1F9549555A1A}.Debug-PCRE|x64.ActiveCfg = Debug-PCRE|x64\n\t\t{C183DB5B-AD6C-423D-80CA-1F9549555A1A}.Debug-PCRE|x64.Build.0 = Debug-PCRE|x64\n\t\t{C183DB5B-AD6C-423D-80CA-1F9549555A1A}.Release|x64.ActiveCfg = Release|x64\n\t\t{C183DB5B-AD6C-423D-80CA-1F9549555A1A}.Release|x64.Build.0 = Release|x64\n\t\t{C183DB5B-AD6C-423D-80CA-1F9549555A1A}.Release-PCRE|x64.ActiveCfg = Release-PCRE|x64\n\t\t{C183DB5B-AD6C-423D-80CA-1F9549555A1A}.Release-PCRE|x64.Build.0 = Release-PCRE|x64\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {8CB50DEA-06DB-48E8-9C7B-F917494480A1}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "cppcheckpremium-suppressions",
          "type": "blob",
          "size": 7.1328125,
          "content": "\n# open source warnings are handled by the selfcheck.yml\nnoExplicitConstructor\npostfixOperator\nshadowFunction\nuseStlAlgorithm\nnormalCheckLevelMaxBranches\n\n###########################################################################################################################\n# Cert C++\n###########################################################################################################################\n\n# False positives for (a?b:c)&=true;\npremium-cert-exp35-c\n# False positives for initializations\npremium-cert-exp45-c\n# False positives when casting to uintptr\npremium-cert-int36-c\n\n# too picky\npremium-cert-arr30-c\npremium-cert-int32-c\npremium-cert-str34-c\n\n# we intentionally pass structs\npremium-cert-dcl39-c-*\n\n# we need to declare reserved identifier _CRTDBG_MAP_ALLOC\npremium-cert-dcl51-cpp\n\n# we don't want to check the return values of fclose/sprintf/etc\npremium-cert-err33-c\n\n# TODO: Is there unsafe allocations, in case of exceptions) in cppcheck\n# we have global objects\npremium-cert-err58-cpp\n\n# TODO: Exception objects must be nothrow copy constructible.\npremium-cert-err60-cpp\n\n# TODO should we throw Token?\npremium-cert-err61-cpp\n\n# TODO: Detect errors when converting a string to a number. The library function 'atoi()' shall not be used.\npremium-cert-err62-cpp\n\n# TODO: Can we reduce some const_cast?\npremium-cert-exp55-cpp\n\n\n###########################################################################################################################\n# Misra C++ 2023\n###########################################################################################################################\n\n# There are false positives\npremium-misra-cpp-2023-6.5.1:lib/symboldatabase.cpp\npremium-misra-cpp-2023-6.7.2\npremium-misra-cpp-2023-8.18.2\n# False positives: #13004\npremium-misra-cpp-2023-8.2.7:lib/valueflow.cpp\npremium-misra-cpp-2023-8.2.7:lib/checkclass.cpp\n\n\n# ignored function return value (emplace etc)\npremium-misra-cpp-2023-0.1.2\n\n# TODO use named function arguments\npremium-misra-cpp-2023-0.2.2\n\n# we comment out code by intention in some cases\npremium-misra-cpp-2023-5.7.2\n\n# TODO should we use this rule?\npremium-misra-cpp-2023-5.10.1\n\n# we use octal by intention in lib/color.cpp\npremium-misra-cpp-2023-5.13.2:lib/color.cpp\n\n# we intentionally write numeric constants without suffixes\npremium-misra-cpp-2023-5.13.4\n\n# we declare variables, functions, etc in global namespace by intention\npremium-misra-cpp-2023-6.0.3\n\n# TODO use inline for template functions?\npremium-misra-cpp-2023-6.2.4\n\n# TODO ensure we don't conceal methods in derived classes\npremium-misra-cpp-2023-6.4.2\n\n# Internal linkage using \"static\" keyword\npremium-misra-cpp-2023-6.5.2\n\n# we use local static variables by intention\npremium-misra-cpp-2023-6.7.1\n\n# Could write good warnings but also has a warning about safe code\npremium-misra-cpp-2023-6.8.3\n\n# FIXME enforce proper ref qualifications\npremium-misra-cpp-2023-6.8.4\n\n# We intentionally use the standard integer types\npremium-misra-cpp-2023-6.9.2\n\n# we have conversion from bool to int by intention\npremium-misra-cpp-2023-7.0.1\n\n# we convert integer to bool by intention\npremium-misra-cpp-2023-7.0.2\n\n# Misra C++ is too pedantic about using character values\npremium-misra-cpp-2023-7.0.3\n\n# signed integer expression in bitwise rhs by intention\npremium-misra-cpp-2023-7.0.4\n\n# sign conversions in assignments by intention\npremium-misra-cpp-2023-7.0.6\n\n# we intentionally have array-to-pointer decay in some function calls\npremium-misra-cpp-2023-7.11.2\n\n# warns when we use callbacks\npremium-misra-cpp-2023-7.11.3\n\n# too picky about operator precedence.\npremium-misra-cpp-2023-8.0.1\n\n# TODO review lambda captures\npremium-misra-cpp-2023-8.1.1\n\n# TODO should we use this rule?\npremium-misra-cpp-2023-8.1.2\n\n# TODO use strchr instead of memchr?\npremium-misra-cpp-2023-8.2.6\n\n# intentional pointer to int conversion in lib/utils.h to output dump files\npremium-misra-cpp-2023-8.2.7:lib/utils.h\n\n# TODO check ellipsis usage\npremium-misra-cpp-2023-8.2.11\n\n# we call functions etc by intention in && || RHS\npremium-misra-cpp-2023-8.14.1\n\n# we use c-style casts by intention\npremium-misra-cpp-2023-8.2.2\n\n# we use const_cast by intention\npremium-misra-cpp-2023-8.2.3\n\n# we use recursion by intention\npremium-misra-cpp-2023-8.2.10\n\n# we separate variable declarations by intention with comma\npremium-misra-cpp-2023-8.19.1\n\n# we leave out {} sometimes\npremium-misra-cpp-2023-9.3.1\n\n# we leave out \"else\" by intention\npremium-misra-cpp-2023-9.4.1\n\n# looping through linked lists by intention\npremium-misra-cpp-2023-9.5.1\n\n# I believe it warns in some cases where we don't have UB\npremium-misra-cpp-2023-9.5.2\n\n# cppcheck does not understand that __builtin_unreachable() is noreturn\npremium-misra-cpp-2023-9.6.4:lib/utils.h\n\n# we declare multiple variables by intention\npremium-misra-cpp-2023-10.0.1\n\n# we do not define enum type explicitly by intention\npremium-misra-cpp-2023-10.2.1\n\n# TODO we have unscoped enums\npremium-misra-cpp-2023-10.2.2\n\n# we use arrays by intention\npremium-misra-cpp-2023-11.3.1\n\n# we dont initialize variables directly by intention\npremium-misra-cpp-2023-11.6.1\n\n# we have enums where only last constant is initialized by intention\npremium-misra-cpp-2023-11.6.3\n\n# we use unions by intention\npremium-misra-cpp-2023-12.3.1\n\n# TODO ensure overrides match\npremium-misra-cpp-2023-13.3.2\n\n# TODO use the same parameter names in overriden methods.\npremium-misra-cpp-2023-13.3.3\n\n# we sometimes use both public/private data members by intention\npremium-misra-cpp-2023-14.1.1\n\n# TODO should we use this rule?\npremium-misra-cpp-2023-15.0.1\n\n# seems too picky (explicitly calling InferModel and Analyzer base class constructors even though they are defaulted).\npremium-misra-cpp-2023-15.1.2\n\n# TODO use explicit for conversion operator\npremium-misra-cpp-2023-15.1.3\n\n# TODO: should we use this rule?\npremium-misra-cpp-2023-16.6.1\n\n# TODO: should we use this rule?\npremium-misra-cpp-2023-17.8.1\n\n# TODO: should we throw token pointers?\npremium-misra-cpp-2023-18.1.1\n\n# TODO do not throw token pointer?\npremium-misra-cpp-2023-18.3.2:lib/tokenize.cpp\n\n# in smallvector we intentionally put a constant above some preprocessor includes\npremium-misra-cpp-2023-19.0.3:lib/smallvector.h\n\n# code is intentional, should cppcheck premium understand __has_cpp_attribute and compiler defines better?\npremium-misra-cpp-2023-19.1.3:lib/config.h\n\n# we use #/## by intention in some cases\npremium-misra-cpp-2023-19.3.1\n\n# We use #pragma by intention\npremium-misra-cpp-2023-19.6.1\n\n# We use atoi by intention\npremium-misra-cpp-2023-21.2.1\n\n# We use <cstring> functions by intention\npremium-misra-cpp-2023-21.2.2\n\n# We have limited use of std::getenv by intention\npremium-misra-cpp-2023-21.2.3\n\n# Dynamic memory usage in std::string etc\npremium-misra-cpp-2023-21.6.1\n\n# We use new/delete by intention sometimes\npremium-misra-cpp-2023-21.6.2\n\n# TODO use std::make_unique when we require C++14\npremium-misra-cpp-2023-23.11.1\n\n# we use <cctype> by intention\npremium-misra-cpp-2023-24.5.1\n\n# we use std::vector<bool> by intention in lib/infer.cpp but in general it should be avoided\npremium-misra-cpp-2023-26.3.1:lib/infer.cpp\n\n# TODO review that std::move is used properly\npremium-misra-cpp-2023-28.6.1\n\n# we use cstdio by intention\npremium-misra-cpp-2023-30.0.1\n\n"
        },
        {
          "name": "createrelease",
          "type": "blob",
          "size": 5.486328125,
          "content": "#!/bin/bash\n#\n# A script for creating release packages. The release packages are create in the home directory.\n#\n# Create release candidate\n# ========================\n#\n# update cppcheck used in premium addon CI\n#\n# check every isPremiumEnabled call:\n# - every id should be in --errorlist\n#   git grep 'isPremiumEnabled[(]\"' | sed 's/.*isPremiumEnabled[(]\"//' | sed 's/\".*//' | sort | uniq > ids1.txt\n#   ./cppcheck --errorlist | grep ' id=\"' | sed 's/.* id=\"//' | sed 's/\".*//' | sort | uniq > ids2.txt\n#   diff -y ids1.txt ids2.txt\n# - premiumaddon: check coverage.py\n#   python3 coverage.py --id ; sort ids-*.txt | uniq > ~/cppcheck/ids3.txt\n#   diff -y ids2.txt ids3.txt\n#\n# Windows installer:\n# - ensure latest build was successful\n# - ensure cfg files etc are included (win_installer/cppcheck.wxs)\n#\n# self check, fix critical issues:\n# make clean && make CXXFLAGS=-O2 MATCHCOMPILER=yes -j4\n# ./cppcheck -D__CPPCHECK__ -D__GNUC__ -DCHECK_INTERNAL -DHAVE_RULES --std=c++11 --library=cppcheck-lib --library=qt --enable=style --inconclusive --inline-suppr --suppress=bitwiseOnBoolean --suppress=shadowFunction --suppress=useStlAlgorithm --suppress=*:externals/picojson.h --suppress=functionConst --suppress=functionStatic --suppress=normalCheckLevelMaxBranches --xml cli gui/*.cpp lib 2> selfcheck.xml\n#\n# Generate lib/checkers.cpp (TODO the premium checkers should not be statically coded)\n# cd ~/cppchecksolutions/cppcheck && python3 tools/get_checkers.py > lib/checkers.cpp\n#\n# Update copyright year\n# git diff 2.8 -- */*.cpp */*.h | grep '^diff --git a/' | sed 's|.* b/||' | xargs sed -i 's/Copyright (C) 2007-20[12]./Copyright (C) 2007-2022/'\n# git diff | grep '^diff --git a/'\n#\n# Make sure \"cppcheck --errorlist\" works:\n# make clean && make -j4 && ./cppcheck --errorlist > errlist.xml && xmllint --noout errlist.xml\n#\n# Update AUTHORS using output from:\n# git log --format='%aN' 2.7..HEAD | sort -u > AUTHORS2 && diff -y AUTHORS AUTHORS2 | less\n#\n# Create 2.8.x branch\n# git checkout -b 2.8.x ; git push -u origin 2.8.x\n#\n# Release notes:\n# - ensure safety critical issues are listed properly\n# - empty the releasenotes.txt in main branch\n#\n# Update version numbers in:\n# sed -i -r \"s/version 2[.][0-9]+([.]99)*/version 2.13.0/\" cli/main.cpp\n# sed -i -r \"s|VERSION 2[.][0-9]+[.]99|VERSION 2.13.0|\" CMakeLists.txt # version must have 3 parts.\n# sed -i -r \"s/CPPCHECK_MINOR_VERSION [0-9]+/CPPCHECK_MINOR_VERSION 13/\" lib/version.h\n# sed -i -r \"s/CPPCHECK_BUGFIX_VERSION 99/CPPCHECK_BUGFIX_VERSION 0/\" lib/version.h\n# sed -i -r \"s/2[.][0-9]+([.]99)*( dev)*/2.13.0/\" win_installer/productInfo.wxi\n# sed -i -r \"s/subtitle: Version 2\\.[0-9]+.*/subtitle: Version 2.13/\" man/*.md\n# Ensure that \"-rc1\" is added in productInfo.wxi and lib/version.h\n# Verify:\n# grep '\\.99' */*.[ch]* && grep '[0-9][0-9] dev' */*.[ch]*\n# egrep \"2\\.[0-9]+\" */*.h */*.cpp man/*.md | grep -v \"test/test\" | less\n# git commit -a -m \"2.8: Set versions\"\n#\n# Build and test the windows installer\n#\n# Update the Makefile:\n# make dmake && ./dmake --release\n# git commit -a -m \"2.8: Updated Makefile [ci skip]\"\n#\n# Ensure that CI is happy\n#\n# Tag:\n# git tag 2.8-rc1\n# git push --tags\n#\n# Release\n# =======\n#\n# Remove \"-rc1\" from versions. Test: git grep \"\\-rc[0-9]\"\n#\n# Create a release folder on sourceforge:\n# https://sourceforge.net/projects/cppcheck/files/cppcheck/\n#\n# git tag 2.8 ; git push --tags\n# ./createrelease 2.8\n#\n# copy msi from release-windows, install and test cppcheck\n# copy manual from build-manual\n#\n# Update download link on index.php main page\n#\n# Trac:\n# 1. Create ticket \"2.12 safety cosmetic changes\"\n# 2. Check priorities for all tickets in milestone. Should be: safety-*\n# 3. Create new milestone\n# 4. Close old milestone\n#\n# write a news\n#\n# save \"cppcheck --doc\" output on wiki\n#\n# compile new democlient:\n# ssh -t danielmarjamaki,cppcheck@shell.sourceforge.net create\n# ./build-cppcheck.sh\n#\n# run daca with new release\n# 1. edit tools/donate-cpu-server.py. Update OLD_VERSION and SERVER_VERSION\n# 2. scp -i ~/.ssh/osuosl_id_rsa tools/donate-cpu-server.py danielmarjamaki@cppcheck1.osuosl.org:/var/daca@home/\n#\n# Backup:\n# * trac: cd /var && nice tar -cJf ~/trac.tar.xz trac-cppcheck/db/trac.db\n# * daca: cd /var && nice tar -cJf ~/daca.tar.xz daca@home\n# * git: git checkout -f && git checkout main && git pull && tar -cJf git.tar.xz .git\n# * git log 2.16.0..2.17.0 > Changelog\n# * mkdir out && python3 ~/cppchecksolutions/release/getWorkflowAndIssueLogs.py -r danmar/cppcheck -t 2.15.0 -p out\n\n# Folder/tag to use\nfolder=$1\ntag=$folder.0\n\n# Name of release\nreleasename=cppcheck-$tag\n\nset -e\n\ncd ~/cppcheck\n\ngit checkout $tag\n\nrm -rf upload\nmkdir -p upload\n\nmake clean\n\n# Create archives..\ngit archive --format=tar --prefix=$releasename/ $tag | gzip > upload/$releasename.tar.gz\ngit archive --format=tar --prefix=$releasename/ $tag | bzip2 > upload/$releasename.tar.bz2\ngit archive --format=zip -9 --prefix=$releasename/ $tag > upload/$releasename.zip\ncd upload\nscp $releasename.* danielmarjamaki,cppcheck@frs.sourceforge.net:/home/frs/project/c/cp/cppcheck/cppcheck/$folder/\nrm $releasename.*\ncd ..\n\n# Generate version.txt\nmake -j12\nrm -f cppcheck.cfg\n./cppcheck --version > upload/version.txt\n\ncd ~/cppcheck/upload\nscp version.txt danielmarjamaki,cppcheck@web.sourceforge.net:htdocs/\n\ncd ~/cppcheck\nrm -rf upload\n\n# Local cppcheck binary\nmkdir -p ~/.cppcheck/$tag\ncd ~/.cppcheck/$tag\ncp -R ~/cppcheck/cfg .\ncp -R ~/cppcheck/addons .\ncp -R ~/cppcheck/platforms .\ncd ~/cppcheck\nmake clean ; make -j12 FILESDIR=~/.cppcheck/$tag MATCHCOMPILER=yes CXXFLAGS=-O2\nmv cppcheck ~/.cppcheck/cppcheck-$tag\n\ngit checkout main\n"
        },
        {
          "name": "democlient",
          "type": "tree",
          "content": null
        },
        {
          "name": "doxyfile",
          "type": "blob",
          "size": 79.3271484375,
          "content": "# Doxyfile 1.8.4\n\n# This file describes the settings to be used by the documentation system\n# doxygen (www.doxygen.org) for a project.\n#\n# All text after a double hash (##) is considered a comment and is placed\n# in front of the TAG it is preceding .\n# All text after a hash (#) is considered a comment and will be ignored.\n# The format is:\n#       TAG = value [value, ...]\n# For lists items can also be appended using:\n#       TAG += value [value, ...]\n# Values that contain spaces should be placed between quotes (\" \").\n\n#---------------------------------------------------------------------------\n# Project related configuration options\n#---------------------------------------------------------------------------\n\n# This tag specifies the encoding used for all characters in the config file\n# that follows. The default is UTF-8 which is also the encoding used for all\n# text before the first occurrence of this tag. Doxygen uses libiconv (or the\n# iconv built into libc) for the transcoding. See\n# http://www.gnu.org/software/libiconv for the list of possible encodings.\n\nDOXYFILE_ENCODING      = UTF-8\n\n# The PROJECT_NAME tag is a single word (or sequence of words) that should\n# identify the project. Note that if you do not use Doxywizard you need\n# to put quotes around the project name if it contains spaces.\n\nPROJECT_NAME           = Cppcheck\n\n# The PROJECT_NUMBER tag can be used to enter a project or revision number.\n# This could be handy for archiving the generated documentation or\n# if some version control system is used.\n\nPROJECT_NUMBER         =\n\n# Using the PROJECT_BRIEF tag one can provide an optional one line description\n# for a project that appears at the top of each page and should give viewer\n# a quick idea about the purpose of the project. Keep the description short.\n\nPROJECT_BRIEF          =\n\n# With the PROJECT_LOGO tag one can specify an logo or icon that is\n# included in the documentation. The maximum height of the logo should not\n# exceed 55 pixels and the maximum width should not exceed 200 pixels.\n# Doxygen will copy the logo to the output directory.\n\nPROJECT_LOGO           =\n\n# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute)\n# base path where the generated documentation will be put.\n# If a relative path is entered, it will be relative to the location\n# where doxygen was started. If left blank the current directory will be used.\n\nOUTPUT_DIRECTORY       = doxyoutput\n\n# If the CREATE_SUBDIRS tag is set to YES, then doxygen will create\n# 4096 sub-directories (in 2 levels) under the output directory of each output\n# format and will distribute the generated files over these directories.\n# Enabling this option can be useful when feeding doxygen a huge amount of\n# source files, where putting all generated files in the same directory would\n# otherwise cause performance problems for the file system.\n\nCREATE_SUBDIRS         = NO\n\n# The OUTPUT_LANGUAGE tag is used to specify the language in which all\n# documentation generated by doxygen is written. Doxygen will use this\n# information to generate all constant output in the proper language.\n# The default language is English, other supported languages are:\n# Afrikaans, Arabic, Brazilian, Catalan, Chinese, Chinese-Traditional,\n# Croatian, Czech, Danish, Dutch, Esperanto, Farsi, Finnish, French, German,\n# Greek, Hungarian, Italian, Japanese, Japanese-en (Japanese with English\n# messages), Korean, Korean-en, Latvian, Lithuanian, Norwegian, Macedonian,\n# Persian, Polish, Portuguese, Romanian, Russian, Serbian, Serbian-Cyrillic,\n# Slovak, Slovene, Spanish, Swedish, Ukrainian, and Vietnamese.\n\nOUTPUT_LANGUAGE        = English\n\n# If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will\n# include brief member descriptions after the members that are listed in\n# the file and class documentation (similar to JavaDoc).\n# Set to NO to disable this.\n\nBRIEF_MEMBER_DESC      = YES\n\n# If the REPEAT_BRIEF tag is set to YES (the default) Doxygen will prepend\n# the brief description of a member or function before the detailed description.\n# Note: if both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the\n# brief descriptions will be completely suppressed.\n\nREPEAT_BRIEF           = YES\n\n# This tag implements a quasi-intelligent brief description abbreviator\n# that is used to form the text in various listings. Each string\n# in this list, if found as the leading text of the brief description, will be\n# stripped from the text and the result after processing the whole list, is\n# used as the annotated text. Otherwise, the brief description is used as-is.\n# If left blank, the following values are used (\"$name\" is automatically\n# replaced with the name of the entity): \"The $name class\" \"The $name widget\"\n# \"The $name file\" \"is\" \"provides\" \"specifies\" \"contains\"\n# \"represents\" \"a\" \"an\" \"the\"\n\nABBREVIATE_BRIEF       =\n\n# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then\n# Doxygen will generate a detailed section even if there is only a brief\n# description.\n\nALWAYS_DETAILED_SEC    = NO\n\n# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all\n# inherited members of a class in the documentation of that class as if those\n# members were ordinary class members. Constructors, destructors and assignment\n# operators of the base classes will not be shown.\n\nINLINE_INHERITED_MEMB  = NO\n\n# If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full\n# path before files name in the file list and in the header files. If set\n# to NO the shortest path that makes the file name unique will be used.\n\nFULL_PATH_NAMES        = NO\n\n# If the FULL_PATH_NAMES tag is set to YES then the STRIP_FROM_PATH tag\n# can be used to strip a user-defined part of the path. Stripping is\n# only done if one of the specified strings matches the left-hand part of\n# the path. The tag can be used to show relative paths in the file list.\n# If left blank the directory from which doxygen is run is used as the\n# path to strip. Note that you specify absolute paths here, but also\n# relative paths, which will be relative from the directory where doxygen is\n# started.\n\nSTRIP_FROM_PATH        =\n\n# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of\n# the path mentioned in the documentation of a class, which tells\n# the reader which header file to include in order to use a class.\n# If left blank only the name of the header file containing the class\n# definition is used. Otherwise one should specify the include paths that\n# are normally passed to the compiler using the -I flag.\n\nSTRIP_FROM_INC_PATH    =\n\n# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter\n# (but less readable) file names. This can be useful if your file system\n# doesn't support long names like on DOS, Mac, or CD-ROM.\n\nSHORT_NAMES            = NO\n\n# If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen\n# will interpret the first line (until the first dot) of a JavaDoc-style\n# comment as the brief description. If set to NO, the JavaDoc\n# comments will behave just like regular Qt-style comments\n# (thus requiring an explicit @brief command for a brief description.)\n\nJAVADOC_AUTOBRIEF      = YES\n\n# If the QT_AUTOBRIEF tag is set to YES then Doxygen will\n# interpret the first line (until the first dot) of a Qt-style\n# comment as the brief description. If set to NO, the comments\n# will behave just like regular Qt-style comments (thus requiring\n# an explicit \\brief command for a brief description.)\n\nQT_AUTOBRIEF           = NO\n\n# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make Doxygen\n# treat a multi-line C++ special comment block (i.e. a block of //! or ///\n# comments) as a brief description. This used to be the default behaviour.\n# The new default is to treat a multi-line C++ comment block as a detailed\n# description. Set this tag to YES if you prefer the old behaviour instead.\n\nMULTILINE_CPP_IS_BRIEF = NO\n\n# If the INHERIT_DOCS tag is set to YES (the default) then an undocumented\n# member inherits the documentation from any documented member that it\n# re-implements.\n\nINHERIT_DOCS           = YES\n\n# If the SEPARATE_MEMBER_PAGES tag is set to YES, then doxygen will produce\n# a new page for each member. If set to NO, the documentation of a member will\n# be part of the file/class/namespace that contains it.\n\nSEPARATE_MEMBER_PAGES  = NO\n\n# The TAB_SIZE tag can be used to set the number of spaces in a tab.\n# Doxygen uses this value to replace tabs by spaces in code fragments.\n\nTAB_SIZE               = 8\n\n# This tag can be used to specify a number of aliases that acts\n# as commands in the documentation. An alias has the form \"name=value\".\n# For example adding \"sideeffect=\\par Side Effects:\\n\" will allow you to\n# put the command \\sideeffect (or @sideeffect) in the documentation, which\n# will result in a user-defined paragraph with heading \"Side Effects:\".\n# You can put \\n's in the value part of an alias to insert newlines.\n\nALIASES                =\n\n# This tag can be used to specify a number of word-keyword mappings (TCL only).\n# A mapping has the form \"name=value\". For example adding\n# \"class=itcl::class\" will allow you to use the command class in the\n# itcl::class meaning.\n\nTCL_SUBST              =\n\n# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C\n# sources only. Doxygen will then generate output that is more tailored for C.\n# For instance, some of the names that are used will be different. The list\n# of all members will be omitted, etc.\n\nOPTIMIZE_OUTPUT_FOR_C  = NO\n\n# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java\n# sources only. Doxygen will then generate output that is more tailored for\n# Java. For instance, namespaces will be presented as packages, qualified\n# scopes will look different, etc.\n\nOPTIMIZE_OUTPUT_JAVA   = NO\n\n# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran\n# sources only. Doxygen will then generate output that is more tailored for\n# Fortran.\n\nOPTIMIZE_FOR_FORTRAN   = NO\n\n# Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL\n# sources. Doxygen will then generate output that is tailored for\n# VHDL.\n\nOPTIMIZE_OUTPUT_VHDL   = NO\n\n# Doxygen selects the parser to use depending on the extension of the files it\n# parses. With this tag you can assign which parser to use for a given\n# extension. Doxygen has a built-in mapping, but you can override or extend it\n# using this tag. The format is ext=language, where ext is a file extension,\n# and language is one of the parsers supported by doxygen: IDL, Java,\n# Javascript, CSharp, C, C++, D, PHP, Objective-C, Python, Fortran, VHDL, C,\n# C++. For instance to make doxygen treat .inc files as Fortran files (default\n# is PHP), and .f files as C (default is Fortran), use: inc=Fortran f=C. Note\n# that for custom extensions you also need to set FILE_PATTERNS otherwise the\n# files are not read by doxygen.\n\nEXTENSION_MAPPING      =\n\n# If MARKDOWN_SUPPORT is enabled (the default) then doxygen pre-processes all\n# comments according to the Markdown format, which allows for more readable\n# documentation. See http://daringfireball.net/projects/markdown/ for details.\n# The output of markdown processing is further processed by doxygen, so you\n# can mix doxygen, HTML, and XML commands with Markdown formatting.\n# Disable only in case of backward compatibilities issues.\n\nMARKDOWN_SUPPORT       = YES\n\n# When enabled doxygen tries to link words that correspond to documented\n# classes, or namespaces to their corresponding documentation. Such a link can\n# be prevented in individual cases by by putting a % sign in front of the word\n# or globally by setting AUTOLINK_SUPPORT to NO.\n\nAUTOLINK_SUPPORT       = YES\n\n# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want\n# to include (a tag file for) the STL sources as input, then you should\n# set this tag to YES in order to let doxygen match functions declarations and\n# definitions whose arguments contain STL classes (e.g. func(std::string); v.s.\n# func(std::string) {}). This also makes the inheritance and collaboration\n# diagrams that involve STL classes more complete and accurate.\n\nBUILTIN_STL_SUPPORT    = YES\n\n# If you use Microsoft's C++/CLI language, you should set this option to YES to\n# enable parsing support.\n\nCPP_CLI_SUPPORT        = NO\n\n# Set the SIP_SUPPORT tag to YES if your project consists of sip sources only.\n# Doxygen will parse them like normal C++ but will assume all classes use public\n# instead of private inheritance when no explicit protection keyword is present.\n\nSIP_SUPPORT            = NO\n\n# For Microsoft's IDL there are propget and propput attributes to indicate\n# getter and setter methods for a property. Setting this option to YES (the\n# default) will make doxygen replace the get and set methods by a property in\n# the documentation. This will only work if the methods are indeed getting or\n# setting a simple type. If this is not the case, or you want to show the\n# methods anyway, you should set this option to NO.\n\nIDL_PROPERTY_SUPPORT   = YES\n\n# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC\n# tag is set to YES, then doxygen will reuse the documentation of the first\n# member in the group (if any) for the other members of the group. By default\n# all members of a group must be documented explicitly.\n\nDISTRIBUTE_GROUP_DOC   = NO\n\n# Set the SUBGROUPING tag to YES (the default) to allow class member groups of\n# the same type (for instance a group of public functions) to be put as a\n# subgroup of that type (e.g. under the Public Functions section). Set it to\n# NO to prevent subgrouping. Alternatively, this can be done per class using\n# the \\nosubgrouping command.\n\nSUBGROUPING            = YES\n\n# When the INLINE_GROUPED_CLASSES tag is set to YES, classes, structs and\n# unions are shown inside the group in which they are included (e.g. using\n# @ingroup) instead of on a separate page (for HTML and Man pages) or\n# section (for LaTeX and RTF).\n\nINLINE_GROUPED_CLASSES = NO\n\n# When the INLINE_SIMPLE_STRUCTS tag is set to YES, structs, classes, and\n# unions with only public data fields or simple typedef fields will be shown\n# inline in the documentation of the scope in which they are defined (i.e. file,\n# namespace, or group documentation), provided this scope is documented. If set\n# to NO (the default), structs, classes, and unions are shown on a separate\n# page (for HTML and Man pages) or section (for LaTeX and RTF).\n\nINLINE_SIMPLE_STRUCTS  = NO\n\n# When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum\n# is documented as struct, union, or enum with the name of the typedef. So\n# typedef struct TypeS {} TypeT, will appear in the documentation as a struct\n# with name TypeT. When disabled the typedef will appear as a member of a file,\n# namespace, or class. And the struct will be named TypeS. This can typically\n# be useful for C code in case the coding convention dictates that all compound\n# types are typedef'ed and only the typedef is referenced, never the tag name.\n\nTYPEDEF_HIDES_STRUCT   = NO\n\n# The size of the symbol lookup cache can be set using LOOKUP_CACHE_SIZE. This\n# cache is used to resolve symbols given their name and scope. Since this can\n# be an expensive process and often the same symbol appear multiple times in\n# the code, doxygen keeps a cache of pre-resolved symbols. If the cache is too\n# small doxygen will become slower. If the cache is too large, memory is wasted.\n# The cache size is given by this formula: 2^(16+LOOKUP_CACHE_SIZE). The valid\n# range is 0..9, the default is 0, corresponding to a cache size of 2^16 = 65536\n# symbols.\n\nLOOKUP_CACHE_SIZE      = 0\n\n#---------------------------------------------------------------------------\n# Build related configuration options\n#---------------------------------------------------------------------------\n\n# If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in\n# documentation are documented, even if no documentation was available.\n# Private class members and static file members will be hidden unless\n# the EXTRACT_PRIVATE respectively EXTRACT_STATIC tags are set to YES\n\nEXTRACT_ALL            = YES\n\n# If the EXTRACT_PRIVATE tag is set to YES all private members of a class\n# will be included in the documentation.\n\nEXTRACT_PRIVATE        = YES\n\n# If the EXTRACT_PACKAGE tag is set to YES all members with package or internal\n# scope will be included in the documentation.\n\nEXTRACT_PACKAGE        = NO\n\n# If the EXTRACT_STATIC tag is set to YES all static members of a file\n# will be included in the documentation.\n\nEXTRACT_STATIC         = YES\n\n# If the EXTRACT_LOCAL_CLASSES tag is set to YES classes (and structs)\n# defined locally in source files will be included in the documentation.\n# If set to NO only classes defined in header files are included.\n\nEXTRACT_LOCAL_CLASSES  = YES\n\n# This flag is only useful for Objective-C code. When set to YES local\n# methods, which are defined in the implementation section but not in\n# the interface are included in the documentation.\n# If set to NO (the default) only methods in the interface are included.\n\nEXTRACT_LOCAL_METHODS  = NO\n\n# If this flag is set to YES, the members of anonymous namespaces will be\n# extracted and appear in the documentation as a namespace called\n# 'anonymous_namespace{file}', where file will be replaced with the base\n# name of the file that contains the anonymous namespace. By default\n# anonymous namespaces are hidden.\n\nEXTRACT_ANON_NSPACES   = NO\n\n# If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all\n# undocumented members of documented classes, files or namespaces.\n# If set to NO (the default) these members will be included in the\n# various overviews, but no documentation section is generated.\n# This option has no effect if EXTRACT_ALL is enabled.\n\nHIDE_UNDOC_MEMBERS     = NO\n\n# If the HIDE_UNDOC_CLASSES tag is set to YES, Doxygen will hide all\n# undocumented classes that are normally visible in the class hierarchy.\n# If set to NO (the default) these classes will be included in the various\n# overviews. This option has no effect if EXTRACT_ALL is enabled.\n\nHIDE_UNDOC_CLASSES     = NO\n\n# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, Doxygen will hide all\n# friend (class|struct|union) declarations.\n# If set to NO (the default) these declarations will be included in the\n# documentation.\n\nHIDE_FRIEND_COMPOUNDS  = NO\n\n# If the HIDE_IN_BODY_DOCS tag is set to YES, Doxygen will hide any\n# documentation blocks found inside the body of a function.\n# If set to NO (the default) these blocks will be appended to the\n# function's detailed documentation block.\n\nHIDE_IN_BODY_DOCS      = NO\n\n# The INTERNAL_DOCS tag determines if documentation\n# that is typed after a \\internal command is included. If the tag is set\n# to NO (the default) then the documentation will be excluded.\n# Set it to YES to include the internal documentation.\n\nINTERNAL_DOCS          = NO\n\n# If the CASE_SENSE_NAMES tag is set to NO then Doxygen will only generate\n# file names in lower-case letters. If set to YES upper-case letters are also\n# allowed. This is useful if you have classes or files whose names only differ\n# in case and if your file system supports case sensitive file names. Windows\n# and Mac users are advised to set this option to NO.\n\nCASE_SENSE_NAMES       = YES\n\n# If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen\n# will show members with their full class and namespace scopes in the\n# documentation. If set to YES the scope will be hidden.\n\nHIDE_SCOPE_NAMES       = NO\n\n# If the SHOW_INCLUDE_FILES tag is set to YES (the default) then Doxygen\n# will put a list of the files that are included by a file in the documentation\n# of that file.\n\nSHOW_INCLUDE_FILES     = YES\n\n# If the FORCE_LOCAL_INCLUDES tag is set to YES then Doxygen\n# will list include files with double quotes in the documentation\n# rather than with sharp brackets.\n\nFORCE_LOCAL_INCLUDES   = NO\n\n# If the INLINE_INFO tag is set to YES (the default) then a tag [inline]\n# is inserted in the documentation for inline members.\n\nINLINE_INFO            = YES\n\n# If the SORT_MEMBER_DOCS tag is set to YES (the default) then doxygen\n# will sort the (detailed) documentation of file and class members\n# alphabetically by member name. If set to NO the members will appear in\n# declaration order.\n\nSORT_MEMBER_DOCS       = YES\n\n# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the\n# brief documentation of file, namespace and class members alphabetically\n# by member name. If set to NO (the default) the members will appear in\n# declaration order.\n\nSORT_BRIEF_DOCS        = NO\n\n# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen\n# will sort the (brief and detailed) documentation of class members so that\n# constructors and destructors are listed first. If set to NO (the default)\n# the constructors will appear in the respective orders defined by\n# SORT_MEMBER_DOCS and SORT_BRIEF_DOCS.\n# This tag will be ignored for brief docs if SORT_BRIEF_DOCS is set to NO\n# and ignored for detailed docs if SORT_MEMBER_DOCS is set to NO.\n\nSORT_MEMBERS_CTORS_1ST = NO\n\n# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the\n# hierarchy of group names into alphabetical order. If set to NO (the default)\n# the group names will appear in their defined order.\n\nSORT_GROUP_NAMES       = NO\n\n# If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be\n# sorted by fully-qualified names, including namespaces. If set to\n# NO (the default), the class list will be sorted only by class name,\n# not including the namespace part.\n# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES.\n# Note: This option applies only to the class list, not to the\n# alphabetical list.\n\nSORT_BY_SCOPE_NAME     = NO\n\n# If the STRICT_PROTO_MATCHING option is enabled and doxygen fails to\n# do proper type resolution of all parameters of a function it will reject a\n# match between the prototype and the implementation of a member function even\n# if there is only one candidate or it is obvious which candidate to choose\n# by doing a simple string match. By disabling STRICT_PROTO_MATCHING doxygen\n# will still accept a match between prototype and implementation in such cases.\n\nSTRICT_PROTO_MATCHING  = NO\n\n# The GENERATE_TODOLIST tag can be used to enable (YES) or\n# disable (NO) the todo list. This list is created by putting \\todo\n# commands in the documentation.\n\nGENERATE_TODOLIST      = YES\n\n# The GENERATE_TESTLIST tag can be used to enable (YES) or\n# disable (NO) the test list. This list is created by putting \\test\n# commands in the documentation.\n\nGENERATE_TESTLIST      = YES\n\n# The GENERATE_BUGLIST tag can be used to enable (YES) or\n# disable (NO) the bug list. This list is created by putting \\bug\n# commands in the documentation.\n\nGENERATE_BUGLIST       = YES\n\n# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or\n# disable (NO) the deprecated list. This list is created by putting\n# \\deprecated commands in the documentation.\n\nGENERATE_DEPRECATEDLIST= YES\n\n# The ENABLED_SECTIONS tag can be used to enable conditional\n# documentation sections, marked by \\if section-label ... \\endif\n# and \\cond section-label ... \\endcond blocks.\n\nENABLED_SECTIONS       =\n\n# The MAX_INITIALIZER_LINES tag determines the maximum number of lines\n# the initial value of a variable or macro consists of for it to appear in\n# the documentation. If the initializer consists of more lines than specified\n# here it will be hidden. Use a value of 0 to hide initializers completely.\n# The appearance of the initializer of individual variables and macros in the\n# documentation can be controlled using \\showinitializer or \\hideinitializer\n# command in the documentation regardless of this setting.\n\nMAX_INITIALIZER_LINES  = 30\n\n# Set the SHOW_USED_FILES tag to NO to disable the list of files generated\n# at the bottom of the documentation of classes and structs. If set to YES the\n# list will mention the files that were used to generate the documentation.\n\nSHOW_USED_FILES        = YES\n\n# Set the SHOW_FILES tag to NO to disable the generation of the Files page.\n# This will remove the Files entry from the Quick Index and from the\n# Folder Tree View (if specified). The default is YES.\n\nSHOW_FILES             = YES\n\n# Set the SHOW_NAMESPACES tag to NO to disable the generation of the\n# Namespaces page.\n# This will remove the Namespaces entry from the Quick Index\n# and from the Folder Tree View (if specified). The default is YES.\n\nSHOW_NAMESPACES        = YES\n\n# The FILE_VERSION_FILTER tag can be used to specify a program or script that\n# doxygen should invoke to get the current version for each file (typically from\n# the version control system). Doxygen will invoke the program by executing (via\n# popen()) the command <command> <input-file>, where <command> is the value of\n# the FILE_VERSION_FILTER tag, and <input-file> is the name of an input file\n# provided by doxygen. Whatever the program writes to standard output\n# is used as the file version. See the manual for examples.\n\nFILE_VERSION_FILTER    =\n\n# The LAYOUT_FILE tag can be used to specify a layout file which will be parsed\n# by doxygen. The layout file controls the global structure of the generated\n# output files in an output format independent way. To create the layout file\n# that represents doxygen's defaults, run doxygen with the -l option.\n# You can optionally specify a file name after the option, if omitted\n# DoxygenLayout.xml will be used as the name of the layout file.\n\nLAYOUT_FILE            =\n\n# The CITE_BIB_FILES tag can be used to specify one or more bib files\n# containing the references data. This must be a list of .bib files. The\n# .bib extension is automatically appended if omitted. Using this command\n# requires the bibtex tool to be installed. See also\n# http://en.wikipedia.org/wiki/BibTeX for more info. For LaTeX the style\n# of the bibliography can be controlled using LATEX_BIB_STYLE. To use this\n# feature you need bibtex and perl available in the search path. Do not use\n# file names with spaces, bibtex cannot handle them.\n\nCITE_BIB_FILES         =\n\n#---------------------------------------------------------------------------\n# configuration options related to warning and progress messages\n#---------------------------------------------------------------------------\n\n# The QUIET tag can be used to turn on/off the messages that are generated\n# by doxygen. Possible values are YES and NO. If left blank NO is used.\n\nQUIET                  = NO\n\n# The WARNINGS tag can be used to turn on/off the warning messages that are\n# generated by doxygen. Possible values are YES and NO. If left blank\n# NO is used.\n\nWARNINGS               = YES\n\n# If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate warnings\n# for undocumented members. If EXTRACT_ALL is set to YES then this flag will\n# automatically be disabled.\n\nWARN_IF_UNDOCUMENTED   = YES\n\n# If WARN_IF_DOC_ERROR is set to YES, doxygen will generate warnings for\n# potential errors in the documentation, such as not documenting some\n# parameters in a documented function, or documenting parameters that\n# don't exist or using markup commands wrongly.\n\nWARN_IF_DOC_ERROR      = YES\n\n# The WARN_NO_PARAMDOC option can be enabled to get warnings for\n# functions that are documented, but have no documentation for their parameters\n# or return value. If set to NO (the default) doxygen will only warn about\n# wrong or incomplete parameter documentation, but not about the absence of\n# documentation.\n\nWARN_NO_PARAMDOC       = YES\n\n# The WARN_FORMAT tag determines the format of the warning messages that\n# doxygen can produce. The string should contain the $file, $line, and $text\n# tags, which will be replaced by the file and line number from which the\n# warning originated and the warning text. Optionally the format may contain\n# $version, which will be replaced by the version of the file (if it could\n# be obtained via FILE_VERSION_FILTER)\n\nWARN_FORMAT            = \"$file:$line: $text\"\n\n# The WARN_LOGFILE tag can be used to specify a file to which warning\n# and error messages should be written. If left blank the output is written\n# to stderr.\n\nWARN_LOGFILE           =\n\n#---------------------------------------------------------------------------\n# configuration options related to the input files\n#---------------------------------------------------------------------------\n\n# The INPUT tag can be used to specify the files and/or directories that contain\n# documented source files. You may enter file names like \"myfile.cpp\" or\n# directories like \"/usr/src/myproject\". Separate the files or directories\n# with spaces.\n\nINPUT                  = cli/ \\\n                         gui/ \\\n                         lib/\n\n# This tag can be used to specify the character encoding of the source files\n# that doxygen parses. Internally doxygen uses the UTF-8 encoding, which is\n# also the default input encoding. Doxygen uses libiconv (or the iconv built\n# into libc) for the transcoding. See http://www.gnu.org/software/libiconv for\n# the list of possible encodings.\n\nINPUT_ENCODING         = UTF-8\n\n# If the value of the INPUT tag contains directories, you can use the\n# FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp\n# and *.h) to filter out the source-files in the directories. If left\n# blank the following patterns are tested:\n# *.c *.cc *.cxx *.cpp *.c++ *.d *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh\n# *.hxx *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.dox *.py\n# *.f90 *.f *.for *.vhd *.vhdl\n\nFILE_PATTERNS          =\n\n# The RECURSIVE tag can be used to turn specify whether or not subdirectories\n# should be searched for input files as well. Possible values are YES and NO.\n# If left blank NO is used.\n\nRECURSIVE              = NO\n\n# The EXCLUDE tag can be used to specify files and/or directories that should be\n# excluded from the INPUT source files. This way you can easily exclude a\n# subdirectory from a directory tree whose root is specified with the INPUT tag.\n# Note that relative paths are relative to the directory from which doxygen is\n# run.\n\nEXCLUDE                =\n\n# The EXCLUDE_SYMLINKS tag can be used to select whether or not files or\n# directories that are symbolic links (a Unix file system feature) are excluded\n# from the input.\n\nEXCLUDE_SYMLINKS       = NO\n\n# If the value of the INPUT tag contains directories, you can use the\n# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude\n# certain files from those directories. Note that the wildcards are matched\n# against the file with absolute path, so to exclude all test directories\n# for example use the pattern */test/*\n\nEXCLUDE_PATTERNS       =\n\n# The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names\n# (namespaces, classes, functions, etc.) that should be excluded from the\n# output. The symbol name can be a fully qualified name, a word, or if the\n# wildcard * is used, a substring. Examples: ANamespace, AClass,\n# AClass::ANamespace, ANamespace::*Test\n\nEXCLUDE_SYMBOLS        =\n\n# The EXAMPLE_PATH tag can be used to specify one or more files or\n# directories that contain example code fragments that are included (see\n# the \\include command).\n\nEXAMPLE_PATH           =\n\n# If the value of the EXAMPLE_PATH tag contains directories, you can use the\n# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp\n# and *.h) to filter out the source-files in the directories. If left\n# blank all files are included.\n\nEXAMPLE_PATTERNS       =\n\n# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be\n# searched for input files to be used with the \\include or \\dontinclude\n# commands irrespective of the value of the RECURSIVE tag.\n# Possible values are YES and NO. If left blank NO is used.\n\nEXAMPLE_RECURSIVE      = NO\n\n# The IMAGE_PATH tag can be used to specify one or more files or\n# directories that contain image that are included in the documentation (see\n# the \\image command).\n\nIMAGE_PATH             =\n\n# The INPUT_FILTER tag can be used to specify a program that doxygen should\n# invoke to filter for each input file. Doxygen will invoke the filter program\n# by executing (via popen()) the command <filter> <input-file>, where <filter>\n# is the value of the INPUT_FILTER tag, and <input-file> is the name of an\n# input file. Doxygen will then use the output that the filter program writes\n# to standard output.\n# If FILTER_PATTERNS is specified, this tag will be ignored.\n# Note that the filter must not add or remove lines; it is applied before the\n# code is scanned, but not when the output code is generated. If lines are added\n# or removed, the anchors will not be placed correctly.\n\nINPUT_FILTER           =\n\n# The FILTER_PATTERNS tag can be used to specify filters on a per file pattern\n# basis.\n# Doxygen will compare the file name with each pattern and apply the\n# filter if there is a match.\n# The filters are a list of the form:\n# pattern=filter (like *.cpp=my_cpp_filter). See INPUT_FILTER for further\n# info on how filters are used. If FILTER_PATTERNS is empty or if\n# non of the patterns match the file name, INPUT_FILTER is applied.\n\nFILTER_PATTERNS        =\n\n# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using\n# INPUT_FILTER) will be used to filter the input files when producing source\n# files to browse (i.e. when SOURCE_BROWSER is set to YES).\n\nFILTER_SOURCE_FILES    = NO\n\n# The FILTER_SOURCE_PATTERNS tag can be used to specify source filters per file\n# pattern. A pattern will override the setting for FILTER_PATTERN (if any)\n# and it is also possible to disable source filtering for a specific pattern\n# using *.ext= (so without naming a filter). This option only has effect when\n# FILTER_SOURCE_FILES is enabled.\n\nFILTER_SOURCE_PATTERNS =\n\n# If the USE_MD_FILE_AS_MAINPAGE tag refers to the name of a markdown file that\n# is part of the input, its contents will be placed on the main page\n# (index.html). This can be useful if you have a project on for instance GitHub\n# and want reuse the introduction page also for the doxygen output.\n\nUSE_MDFILE_AS_MAINPAGE =\n\n#---------------------------------------------------------------------------\n# configuration options related to source browsing\n#---------------------------------------------------------------------------\n\n# If the SOURCE_BROWSER tag is set to YES then a list of source files will\n# be generated. Documented entities will be cross-referenced with these sources.\n# Note: To get rid of all source code in the generated output, make sure also\n# VERBATIM_HEADERS is set to NO.\n\nSOURCE_BROWSER         = YES\n\n# Setting the INLINE_SOURCES tag to YES will include the body\n# of functions and classes directly in the documentation.\n\nINLINE_SOURCES         = NO\n\n# Setting the STRIP_CODE_COMMENTS tag to YES (the default) will instruct\n# doxygen to hide any special comment blocks from generated source code\n# fragments. Normal C, C++ and Fortran comments will always remain visible.\n\nSTRIP_CODE_COMMENTS    = NO\n\n# If the REFERENCED_BY_RELATION tag is set to YES\n# then for each documented function all documented\n# functions referencing it will be listed.\n\nREFERENCED_BY_RELATION = YES\n\n# If the REFERENCES_RELATION tag is set to YES\n# then for each documented function all documented entities\n# called/used by that function will be listed.\n\nREFERENCES_RELATION    = YES\n\n# If the REFERENCES_LINK_SOURCE tag is set to YES (the default)\n# and SOURCE_BROWSER tag is set to YES, then the hyperlinks from\n# functions in REFERENCES_RELATION and REFERENCED_BY_RELATION lists will\n# link to the source code.\n# Otherwise they will link to the documentation.\n\nREFERENCES_LINK_SOURCE = YES\n\n# If the USE_HTAGS tag is set to YES then the references to source code\n# will point to the HTML generated by the htags(1) tool instead of doxygen\n# built-in source browser. The htags tool is part of GNU's global source\n# tagging system (see http://www.gnu.org/software/global/global.html). You\n# will need version 4.8.6 or higher.\n\nUSE_HTAGS              = NO\n\n# If the VERBATIM_HEADERS tag is set to YES (the default) then Doxygen\n# will generate a verbatim copy of the header file for each class for\n# which an include is specified. Set to NO to disable this.\n\nVERBATIM_HEADERS       = YES\n\n# If CLANG_ASSISTED_PARSING is set to YES, then doxygen will use the clang parser\n# for more accurate parsing at the cost of reduced performance. This can be\n# particularly helpful with template rich C++ code for which doxygen's built-in\n# parser lacks the necessary type information.\n\nCLANG_ASSISTED_PARSING = NO\n\n# If clang assisted parsing is enabled you can provide the compiler with command\n# line options that you would normally use when invoking the compiler. Note that\n# the include paths will already be set by doxygen for the files and directories\n# specified at INPUT and INCLUDE_PATH.\n\nCLANG_OPTIONS          =\n\n#---------------------------------------------------------------------------\n# configuration options related to the alphabetical class index\n#---------------------------------------------------------------------------\n\n# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index\n# of all compounds will be generated. Enable this if the project\n# contains a lot of classes, structs, unions or interfaces.\n\nALPHABETICAL_INDEX     = YES\n\n# If the alphabetical index is enabled (see ALPHABETICAL_INDEX) then\n# the COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns\n# in which this list will be split (can be a number in the range [1..20])\n\nCOLS_IN_ALPHA_INDEX    = 5\n\n# In case all classes in a project start with a common prefix, all\n# classes will be put under the same header in the alphabetical index.\n# The IGNORE_PREFIX tag can be used to specify one or more prefixes that\n# should be ignored while generating the index headers.\n\nIGNORE_PREFIX          =\n\n#---------------------------------------------------------------------------\n# configuration options related to the HTML output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_HTML tag is set to YES (the default) Doxygen will\n# generate HTML output.\n\nGENERATE_HTML          = YES\n\n# The HTML_OUTPUT tag is used to specify where the HTML docs will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `html' will be used as the default path.\n\nHTML_OUTPUT            = html\n\n# The HTML_FILE_EXTENSION tag can be used to specify the file extension for\n# each generated HTML page (for example: .htm,.php,.asp). If it is left blank\n# doxygen will generate files with .html extension.\n\nHTML_FILE_EXTENSION    = .html\n\n# The HTML_HEADER tag can be used to specify a personal HTML header for\n# each generated HTML page. If it is left blank doxygen will generate a\n# standard header. Note that when using a custom header you are responsible\n#  for the proper inclusion of any scripts and style sheets that doxygen\n# needs, which is dependent on the configuration options used.\n# It is advised to generate a default header using \"doxygen -w html\n# header.html footer.html stylesheet.css YourConfigFile\" and then modify\n# that header. Note that the header is subject to change so you typically\n# have to redo this when upgrading to a newer version of doxygen or when\n# changing the value of configuration settings such as GENERATE_TREEVIEW!\n\nHTML_HEADER            =\n\n# The HTML_FOOTER tag can be used to specify a personal HTML footer for\n# each generated HTML page. If it is left blank doxygen will generate a\n# standard footer.\n\nHTML_FOOTER            =\n\n# The HTML_STYLESHEET tag can be used to specify a user-defined cascading\n# style sheet that is used by each HTML page. It can be used to\n# fine-tune the look of the HTML output. If left blank doxygen will\n# generate a default style sheet. Note that it is recommended to use\n# HTML_EXTRA_STYLESHEET instead of this one, as it is more robust and this\n# tag will in the future become obsolete.\n\nHTML_STYLESHEET        =\n\n# The HTML_EXTRA_STYLESHEET tag can be used to specify an additional\n# user-defined cascading style sheet that is included after the standard\n# style sheets created by doxygen. Using this option one can overrule\n# certain style aspects. This is preferred over using HTML_STYLESHEET\n# since it does not replace the standard style sheet and is therefore more\n# robust against future updates. Doxygen will copy the style sheet file to\n# the output directory.\n\nHTML_EXTRA_STYLESHEET  =\n\n# The HTML_EXTRA_FILES tag can be used to specify one or more extra images or\n# other source files which should be copied to the HTML output directory. Note\n# that these files will be copied to the base HTML output directory. Use the\n# $relpath^ marker in the HTML_HEADER and/or HTML_FOOTER files to load these\n# files. In the HTML_STYLESHEET file, use the file name only. Also note that\n# the files will be copied as-is; there are no commands or markers available.\n\nHTML_EXTRA_FILES       =\n\n# The HTML_COLORSTYLE_HUE tag controls the color of the HTML output.\n# Doxygen will adjust the colors in the style sheet and background images\n# according to this color. Hue is specified as an angle on a colorwheel,\n# see http://en.wikipedia.org/wiki/Hue for more information.\n# For instance the value 0 represents red, 60 is yellow, 120 is green,\n# 180 is cyan, 240 is blue, 300 purple, and 360 is red again.\n# The allowed range is 0 to 359.\n\nHTML_COLORSTYLE_HUE    = 220\n\n# The HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of\n# the colors in the HTML output. For a value of 0 the output will use\n# grayscales only. A value of 255 will produce the most vivid colors.\n\nHTML_COLORSTYLE_SAT    = 100\n\n# The HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to\n# the luminance component of the colors in the HTML output. Values below\n# 100 gradually make the output lighter, whereas values above 100 make\n# the output darker. The value divided by 100 is the actual gamma applied,\n# so 80 represents a gamma of 0.8, The value 220 represents a gamma of 2.2,\n# and 100 does not change the gamma.\n\nHTML_COLORSTYLE_GAMMA  = 80\n\n# If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML\n# page will contain the date and time when the page was generated. Setting\n# this to NO can help when comparing the output of multiple runs.\n\nHTML_TIMESTAMP         = YES\n\n# If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML\n# documentation will contain sections that can be hidden and shown after the\n# page has loaded.\n\nHTML_DYNAMIC_SECTIONS  = NO\n\n# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of\n# entries shown in the various tree structured indices initially; the user\n# can expand and collapse entries dynamically later on. Doxygen will expand\n# the tree to such a level that at most the specified number of entries are\n# visible (unless a fully collapsed tree already exceeds this amount).\n# So setting the number of entries 1 will produce a full collapsed tree by\n# default. 0 is a special value representing an infinite number of entries\n# and will result in a full expanded tree by default.\n\nHTML_INDEX_NUM_ENTRIES = 100\n\n# If the GENERATE_DOCSET tag is set to YES, additional index files\n# will be generated that can be used as input for Apple's Xcode 3\n# integrated development environment, introduced with OSX 10.5 (Leopard).\n# To create a documentation set, doxygen will generate a Makefile in the\n# HTML output directory. Running make will produce the docset in that\n# directory and running \"make install\" will install the docset in\n# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find\n# it at startup.\n# See http://developer.apple.com/tools/creatingdocsetswithdoxygen.html\n# for more information.\n\nGENERATE_DOCSET        = NO\n\n# When GENERATE_DOCSET tag is set to YES, this tag determines the name of the\n# feed. A documentation feed provides an umbrella under which multiple\n# documentation sets from a single provider (such as a company or product suite)\n# can be grouped.\n\nDOCSET_FEEDNAME        = \"Doxygen generated docs\"\n\n# When GENERATE_DOCSET tag is set to YES, this tag specifies a string that\n# should uniquely identify the documentation set bundle. This should be a\n# reverse domain-name style string, e.g. com.mycompany.MyDocSet. Doxygen\n# will append .docset to the name.\n\nDOCSET_BUNDLE_ID       = org.doxygen.Project\n\n# When GENERATE_PUBLISHER_ID tag specifies a string that should uniquely\n# identify the documentation publisher. This should be a reverse domain-name\n# style string, e.g. com.mycompany.MyDocSet.documentation.\n\nDOCSET_PUBLISHER_ID    = org.doxygen.Publisher\n\n# The GENERATE_PUBLISHER_NAME tag identifies the documentation publisher.\n\nDOCSET_PUBLISHER_NAME  = Publisher\n\n# If the GENERATE_HTMLHELP tag is set to YES, additional index files\n# will be generated that can be used as input for tools like the\n# Microsoft HTML help workshop to generate a compiled HTML help file (.chm)\n# of the generated HTML documentation.\n\nGENERATE_HTMLHELP      = NO\n\n# If the GENERATE_HTMLHELP tag is set to YES, the CHM_FILE tag can\n# be used to specify the file name of the resulting .chm file. You\n# can add a path in front of the file if the result should not be\n# written to the html output directory.\n\nCHM_FILE               =\n\n# If the GENERATE_HTMLHELP tag is set to YES, the HHC_LOCATION tag can\n# be used to specify the location (absolute path including file name) of\n# the HTML help compiler (hhc.exe). If non-empty doxygen will try to run\n# the HTML help compiler on the generated index.hhp.\n\nHHC_LOCATION           =\n\n# If the GENERATE_HTMLHELP tag is set to YES, the GENERATE_CHI flag\n# controls if a separate .chi index file is generated (YES) or that\n# it should be included in the master .chm file (NO).\n\nGENERATE_CHI           = NO\n\n# If the GENERATE_HTMLHELP tag is set to YES, the CHM_INDEX_ENCODING\n# is used to encode HtmlHelp index (hhk), content (hhc) and project file\n# content.\n\nCHM_INDEX_ENCODING     =\n\n# If the GENERATE_HTMLHELP tag is set to YES, the BINARY_TOC flag\n# controls whether a binary table of contents is generated (YES) or a\n# normal table of contents (NO) in the .chm file.\n\nBINARY_TOC             = NO\n\n# The TOC_EXPAND flag can be set to YES to add extra items for group members\n# to the contents of the HTML help documentation and to the tree view.\n\nTOC_EXPAND             = NO\n\n# If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and\n# QHP_VIRTUAL_FOLDER are set, an additional index file will be generated\n# that can be used as input for Qt's qhelpgenerator to generate a\n# Qt Compressed Help (.qch) of the generated HTML documentation.\n\nGENERATE_QHP           = NO\n\n# If the QHG_LOCATION tag is specified, the QCH_FILE tag can\n# be used to specify the file name of the resulting .qch file.\n# The path specified is relative to the HTML output folder.\n\nQCH_FILE               =\n\n# The QHP_NAMESPACE tag specifies the namespace to use when generating\n# Qt Help Project output. For more information please see\n# http://doc.trolltech.com/qthelpproject.html#namespace\n\nQHP_NAMESPACE          = org.doxygen.Project\n\n# The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating\n# Qt Help Project output. For more information please see\n# http://doc.trolltech.com/qthelpproject.html#virtual-folders\n\nQHP_VIRTUAL_FOLDER     = doc\n\n# If QHP_CUST_FILTER_NAME is set, it specifies the name of a custom filter to\n# add. For more information please see\n# http://doc.trolltech.com/qthelpproject.html#custom-filters\n\nQHP_CUST_FILTER_NAME   =\n\n# The QHP_CUST_FILT_ATTRS tag specifies the list of the attributes of the\n# custom filter to add. For more information please see\n# <a href=\"http://doc.trolltech.com/qthelpproject.html#custom-filters\">\n# Qt Help Project / Custom Filters</a>.\n\nQHP_CUST_FILTER_ATTRS  =\n\n# The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this\n# project's\n# filter section matches.\n# <a href=\"http://doc.trolltech.com/qthelpproject.html#filter-attributes\">\n# Qt Help Project / Filter Attributes</a>.\n\nQHP_SECT_FILTER_ATTRS  =\n\n# If the GENERATE_QHP tag is set to YES, the QHG_LOCATION tag can\n# be used to specify the location of Qt's qhelpgenerator.\n# If non-empty doxygen will try to run qhelpgenerator on the generated\n# .qhp file.\n\nQHG_LOCATION           =\n\n# If the GENERATE_ECLIPSEHELP tag is set to YES, additional index files\n#  will be generated, which together with the HTML files, form an Eclipse help\n# plugin. To install this plugin and make it available under the help contents\n# menu in Eclipse, the contents of the directory containing the HTML and XML\n# files needs to be copied into the plugins directory of eclipse. The name of\n# the directory within the plugins directory should be the same as\n# the ECLIPSE_DOC_ID value. After copying Eclipse needs to be restarted before\n# the help appears.\n\nGENERATE_ECLIPSEHELP   = NO\n\n# A unique identifier for the eclipse help plugin. When installing the plugin\n# the directory name containing the HTML and XML files should also have\n# this name.\n\nECLIPSE_DOC_ID         = org.doxygen.Project\n\n# The DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs)\n# at top of each HTML page. The value NO (the default) enables the index and\n# the value YES disables it. Since the tabs have the same information as the\n# navigation tree you can set this option to NO if you already set\n# GENERATE_TREEVIEW to YES.\n\nDISABLE_INDEX          = NO\n\n# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index\n# structure should be generated to display hierarchical information.\n# If the tag value is set to YES, a side panel will be generated\n# containing a tree-like index structure (just like the one that\n# is generated for HTML Help). For this to work a browser that supports\n# JavaScript, DHTML, CSS and frames is required (i.e. any modern browser).\n# Windows users are probably better off using the HTML help feature.\n# Since the tree basically has the same information as the tab index you\n# could consider to set DISABLE_INDEX to NO when enabling this option.\n\nGENERATE_TREEVIEW      = NO\n\n# The ENUM_VALUES_PER_LINE tag can be used to set the number of enum values\n# (range [0,1..20]) that doxygen will group on one line in the generated HTML\n# documentation. Note that a value of 0 will completely suppress the enum\n# values from appearing in the overview section.\n\nENUM_VALUES_PER_LINE   = 4\n\n# If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be\n# used to set the initial width (in pixels) of the frame in which the tree\n# is shown.\n\nTREEVIEW_WIDTH         = 250\n\n# When the EXT_LINKS_IN_WINDOW option is set to YES doxygen will open\n# links to external symbols imported via tag files in a separate window.\n\nEXT_LINKS_IN_WINDOW    = NO\n\n# Use this tag to change the font size of Latex formulas included\n# as images in the HTML documentation. The default is 10. Note that\n# when you change the font size after a successful doxygen run you need\n# to manually remove any form_*.png images from the HTML output directory\n# to force them to be regenerated.\n\nFORMULA_FONTSIZE       = 10\n\n# Use the FORMULA_TRANPARENT tag to determine whether or not the images\n# generated for formulas are transparent PNGs. Transparent PNGs are\n# not supported properly for IE 6.0, but are supported on all modern browsers.\n# Note that when changing this option you need to delete any form_*.png files\n# in the HTML output before the changes have effect.\n\nFORMULA_TRANSPARENT    = YES\n\n# Enable the USE_MATHJAX option to render LaTeX formulas using MathJax\n# (see http://www.mathjax.org) which uses client side Javascript for the\n# rendering instead of using prerendered bitmaps. Use this if you do not\n# have LaTeX installed or if you want to formulas look prettier in the HTML\n# output. When enabled you may also need to install MathJax separately and\n# configure the path to it using the MATHJAX_RELPATH option.\n\nUSE_MATHJAX            = NO\n\n# When MathJax is enabled you can set the default output format to be used for\n# the MathJax output. Supported types are HTML-CSS, NativeMML (i.e. MathML) and\n# SVG. The default value is HTML-CSS, which is slower, but has the best\n# compatibility.\n\nMATHJAX_FORMAT         = HTML-CSS\n\n# When MathJax is enabled you need to specify the location relative to the\n# HTML output directory using the MATHJAX_RELPATH option. The destination\n# directory should contain the MathJax.js script. For instance, if the mathjax\n# directory is located at the same level as the HTML output directory, then\n# MATHJAX_RELPATH should be ../mathjax. The default value points to\n# the MathJax Content Delivery Network so you can quickly see the result without\n# installing MathJax.\n# However, it is strongly recommended to install a local\n# copy of MathJax from http://www.mathjax.org before deployment.\n\nMATHJAX_RELPATH        = http://www.mathjax.org/mathjax\n\n# The MATHJAX_EXTENSIONS tag can be used to specify one or MathJax extension\n# names that should be enabled during MathJax rendering.\n\nMATHJAX_EXTENSIONS     =\n\n# The MATHJAX_CODEFILE tag can be used to specify a file with javascript\n# pieces of code that will be used on startup of the MathJax code.\n\nMATHJAX_CODEFILE       =\n\n# When the SEARCHENGINE tag is enabled doxygen will generate a search box\n# for the HTML output. The underlying search engine uses javascript\n# and DHTML and should work on any modern browser. Note that when using\n# HTML help (GENERATE_HTMLHELP), Qt help (GENERATE_QHP), or docsets\n# (GENERATE_DOCSET) there is already a search function so this one should\n# typically be disabled. For large projects the javascript based search engine\n# can be slow, then enabling SERVER_BASED_SEARCH may provide a better solution.\n\nSEARCHENGINE           = YES\n\n# When the SERVER_BASED_SEARCH tag is enabled the search engine will be\n# implemented using a web server instead of a web client using Javascript.\n# There are two flavours of web server based search depending on the\n# EXTERNAL_SEARCH setting. When disabled, doxygen will generate a PHP script for\n# searching and an index file used by the script. When EXTERNAL_SEARCH is\n# enabled the indexing and searching needs to be provided by external tools.\n# See the manual for details.\n\nSERVER_BASED_SEARCH    = NO\n\n# When EXTERNAL_SEARCH is enabled doxygen will no longer generate the PHP\n# script for searching. Instead the search results are written to an XML file\n# which needs to be processed by an external indexer. Doxygen will invoke an\n# external search engine pointed to by the SEARCHENGINE_URL option to obtain\n# the search results. Doxygen ships with an example indexer (doxyindexer) and\n# search engine (doxysearch.cgi) which are based on the open source search\n# engine library Xapian. See the manual for configuration details.\n\nEXTERNAL_SEARCH        = NO\n\n# The SEARCHENGINE_URL should point to a search engine hosted by a web server\n# which will returned the search results when EXTERNAL_SEARCH is enabled.\n# Doxygen ships with an example search engine (doxysearch) which is based on\n# the open source search engine library Xapian. See the manual for configuration\n# details.\n\nSEARCHENGINE_URL       =\n\n# When SERVER_BASED_SEARCH and EXTERNAL_SEARCH are both enabled the unindexed\n# search data is written to a file for indexing by an external tool. With the\n# SEARCHDATA_FILE tag the name of this file can be specified.\n\nSEARCHDATA_FILE        = searchdata.xml\n\n# When SERVER_BASED_SEARCH AND EXTERNAL_SEARCH are both enabled the\n# EXTERNAL_SEARCH_ID tag can be used as an identifier for the project. This is\n# useful in combination with EXTRA_SEARCH_MAPPINGS to search through multiple\n# projects and redirect the results back to the right project.\n\nEXTERNAL_SEARCH_ID     =\n\n# The EXTRA_SEARCH_MAPPINGS tag can be used to enable searching through doxygen\n# projects other than the one defined by this configuration file, but that are\n# all added to the same external search index. Each project needs to have a\n# unique id set via EXTERNAL_SEARCH_ID. The search mapping then maps the id\n# of to a relative location where the documentation can be found.\n# The format is: EXTRA_SEARCH_MAPPINGS = id1=loc1 id2=loc2 ...\n\nEXTRA_SEARCH_MAPPINGS  =\n\n#---------------------------------------------------------------------------\n# configuration options related to the LaTeX output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_LATEX tag is set to YES (the default) Doxygen will\n# generate Latex output.\n\nGENERATE_LATEX         = NO\n\n# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `latex' will be used as the default path.\n\nLATEX_OUTPUT           = latex\n\n# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be\n# invoked. If left blank `latex' will be used as the default command name.\n# Note that when enabling USE_PDFLATEX this option is only used for\n# generating bitmaps for formulas in the HTML output, but not in the\n# Makefile that is written to the output directory.\n\nLATEX_CMD_NAME         = latex\n\n# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to\n# generate index for LaTeX. If left blank `makeindex' will be used as the\n# default command name.\n\nMAKEINDEX_CMD_NAME     = makeindex\n\n# If the COMPACT_LATEX tag is set to YES Doxygen generates more compact\n# LaTeX documents. This may be useful for small projects and may help to\n# save some trees in general.\n\nCOMPACT_LATEX          = NO\n\n# The PAPER_TYPE tag can be used to set the paper type that is used\n# by the printer. Possible values are: a4, letter, legal and\n# executive. If left blank a4 will be used.\n\nPAPER_TYPE             = a4wide\n\n# The EXTRA_PACKAGES tag can be to specify one or more names of LaTeX\n# packages that should be included in the LaTeX output.\n\nEXTRA_PACKAGES         =\n\n# The LATEX_HEADER tag can be used to specify a personal LaTeX header for\n# the generated latex document. The header should contain everything until\n# the first chapter. If it is left blank doxygen will generate a\n# standard header. Notice: only use this tag if you know what you are doing!\n\nLATEX_HEADER           =\n\n# The LATEX_FOOTER tag can be used to specify a personal LaTeX footer for\n# the generated latex document. The footer should contain everything after\n# the last chapter. If it is left blank doxygen will generate a\n# standard footer. Notice: only use this tag if you know what you are doing!\n\nLATEX_FOOTER           =\n\n# The LATEX_EXTRA_FILES tag can be used to specify one or more extra images\n# or other source files which should be copied to the LaTeX output directory.\n# Note that the files will be copied as-is; there are no commands or markers\n# available.\n\nLATEX_EXTRA_FILES      =\n\n# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated\n# is prepared for conversion to pdf (using ps2pdf). The pdf file will\n# contain links (just like the HTML output) instead of page references\n# This makes the output suitable for online browsing using a pdf viewer.\n\nPDF_HYPERLINKS         = YES\n\n# If the USE_PDFLATEX tag is set to YES, pdflatex will be used instead of\n# plain latex in the generated Makefile. Set this option to YES to get a\n# higher quality PDF documentation.\n\nUSE_PDFLATEX           = YES\n\n# If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \\\\batchmode.\n# command to the generated LaTeX files. This will instruct LaTeX to keep\n# running if errors occur, instead of asking the user for help.\n# This option is also used when generating formulas in HTML.\n\nLATEX_BATCHMODE        = NO\n\n# If LATEX_HIDE_INDICES is set to YES then doxygen will not\n# include the index chapters (such as File Index, Compound Index, etc.)\n# in the output.\n\nLATEX_HIDE_INDICES     = NO\n\n# If LATEX_SOURCE_CODE is set to YES then doxygen will include\n# source code with syntax highlighting in the LaTeX output.\n# Note that which sources are shown also depends on other settings\n# such as SOURCE_BROWSER.\n\nLATEX_SOURCE_CODE      = NO\n\n# The LATEX_BIB_STYLE tag can be used to specify the style to use for the\n# bibliography, e.g. plainnat, or ieeetr. The default style is \"plain\". See\n# http://en.wikipedia.org/wiki/BibTeX for more info.\n\nLATEX_BIB_STYLE        = plain\n\n#---------------------------------------------------------------------------\n# configuration options related to the RTF output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_RTF tag is set to YES Doxygen will generate RTF output\n# The RTF output is optimized for Word 97 and may not look very pretty with\n# other RTF readers or editors.\n\nGENERATE_RTF           = NO\n\n# The RTF_OUTPUT tag is used to specify where the RTF docs will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `rtf' will be used as the default path.\n\nRTF_OUTPUT             = rtf\n\n# If the COMPACT_RTF tag is set to YES Doxygen generates more compact\n# RTF documents. This may be useful for small projects and may help to\n# save some trees in general.\n\nCOMPACT_RTF            = NO\n\n# If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated\n# will contain hyperlink fields. The RTF file will\n# contain links (just like the HTML output) instead of page references.\n# This makes the output suitable for online browsing using WORD or other\n# programs which support those fields.\n# Note: wordpad (write) and others do not support links.\n\nRTF_HYPERLINKS         = NO\n\n# Load style sheet definitions from file. Syntax is similar to doxygen's\n# config file, i.e. a series of assignments. You only have to provide\n# replacements, missing definitions are set to their default value.\n\nRTF_STYLESHEET_FILE    =\n\n# Set optional variables used in the generation of an rtf document.\n# Syntax is similar to doxygen's config file.\n\nRTF_EXTENSIONS_FILE    =\n\n#---------------------------------------------------------------------------\n# configuration options related to the man page output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_MAN tag is set to YES (the default) Doxygen will\n# generate man pages\n\nGENERATE_MAN           = NO\n\n# The MAN_OUTPUT tag is used to specify where the man pages will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `man' will be used as the default path.\n\nMAN_OUTPUT             = man\n\n# The MAN_EXTENSION tag determines the extension that is added to\n# the generated man pages (default is the subroutine's section .3)\n\nMAN_EXTENSION          = .3\n\n# If the MAN_LINKS tag is set to YES and Doxygen generates man output,\n# then it will generate one additional man file for each entity\n# documented in the real man page(s). These additional files\n# only source the real man page, but without them the man command\n# would be unable to find the correct page. The default is NO.\n\nMAN_LINKS              = NO\n\n#---------------------------------------------------------------------------\n# configuration options related to the XML output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_XML tag is set to YES Doxygen will\n# generate an XML file that captures the structure of\n# the code including all documentation.\n\nGENERATE_XML           = NO\n\n# The XML_OUTPUT tag is used to specify where the XML pages will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `xml' will be used as the default path.\n\nXML_OUTPUT             = xml\n\n# The XML_SCHEMA tag can be used to specify an XML schema,\n# which can be used by a validating XML parser to check the\n# syntax of the XML files.\n\nXML_SCHEMA             =\n\n# The XML_DTD tag can be used to specify an XML DTD,\n# which can be used by a validating XML parser to check the\n# syntax of the XML files.\n\nXML_DTD                =\n\n# If the XML_PROGRAMLISTING tag is set to YES Doxygen will\n# dump the program listings (including syntax highlighting\n# and cross-referencing information) to the XML output. Note that\n# enabling this will significantly increase the size of the XML output.\n\nXML_PROGRAMLISTING     = YES\n\n#---------------------------------------------------------------------------\n# configuration options related to the DOCBOOK output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_DOCBOOK tag is set to YES Doxygen will generate DOCBOOK files\n# that can be used to generate PDF.\n\nGENERATE_DOCBOOK       = NO\n\n# The DOCBOOK_OUTPUT tag is used to specify where the DOCBOOK pages will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be put in\n# front of it. If left blank docbook will be used as the default path.\n\nDOCBOOK_OUTPUT         = docbook\n\n#---------------------------------------------------------------------------\n# configuration options for the AutoGen Definitions output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_AUTOGEN_DEF tag is set to YES Doxygen will\n# generate an AutoGen Definitions (see autogen.sf.net) file\n# that captures the structure of the code including all\n# documentation. Note that this feature is still experimental\n# and incomplete at the moment.\n\nGENERATE_AUTOGEN_DEF   = NO\n\n#---------------------------------------------------------------------------\n# configuration options related to the Perl module output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_PERLMOD tag is set to YES Doxygen will\n# generate a Perl module file that captures the structure of\n# the code including all documentation. Note that this\n# feature is still experimental and incomplete at the\n# moment.\n\nGENERATE_PERLMOD       = NO\n\n# If the PERLMOD_LATEX tag is set to YES Doxygen will generate\n# the necessary Makefile rules, Perl scripts and LaTeX code to be able\n# to generate PDF and DVI output from the Perl module output.\n\nPERLMOD_LATEX          = NO\n\n# If the PERLMOD_PRETTY tag is set to YES the Perl module output will be\n# nicely formatted so it can be parsed by a human reader.\n# This is useful\n# if you want to understand what is going on.\n# On the other hand, if this\n# tag is set to NO the size of the Perl module output will be much smaller\n# and Perl will parse it just the same.\n\nPERLMOD_PRETTY         = YES\n\n# The names of the make variables in the generated doxyrules.make file\n# are prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX.\n# This is useful so different doxyrules.make files included by the same\n# Makefile don't overwrite each other's variables.\n\nPERLMOD_MAKEVAR_PREFIX =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the preprocessor\n#---------------------------------------------------------------------------\n\n# If the ENABLE_PREPROCESSING tag is set to YES (the default) Doxygen will\n# evaluate all C-preprocessor directives found in the sources and include\n# files.\n\nENABLE_PREPROCESSING   = YES\n\n# If the MACRO_EXPANSION tag is set to YES Doxygen will expand all macro\n# names in the source code. If set to NO (the default) only conditional\n# compilation will be performed. Macro expansion can be done in a controlled\n# way by setting EXPAND_ONLY_PREDEF to YES.\n\nMACRO_EXPANSION        = NO\n\n# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES\n# then the macro expansion is limited to the macros specified with the\n# PREDEFINED and EXPAND_AS_DEFINED tags.\n\nEXPAND_ONLY_PREDEF     = NO\n\n# If the SEARCH_INCLUDES tag is set to YES (the default) the includes files\n# pointed to by INCLUDE_PATH will be searched when a #include is found.\n\nSEARCH_INCLUDES        = YES\n\n# The INCLUDE_PATH tag can be used to specify one or more directories that\n# contain include files that are not input files but should be processed by\n# the preprocessor.\n\nINCLUDE_PATH           =\n\n# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard\n# patterns (like *.h and *.hpp) to filter out the header-files in the\n# directories. If left blank, the patterns specified with FILE_PATTERNS will\n# be used.\n\nINCLUDE_FILE_PATTERNS  =\n\n# The PREDEFINED tag can be used to specify one or more macro names that\n# are defined before the preprocessor is started (similar to the -D option of\n# gcc). The argument of the tag is a list of macros of the form: name\n# or name=definition (no spaces). If the definition and the = are\n# omitted =1 is assumed. To prevent a macro definition from being\n# undefined via #undef or recursively expanded use the := operator\n# instead of the = operator.\n\nPREDEFINED             =\n\n# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then\n# this tag can be used to specify a list of macro names that should be expanded.\n# The macro definition that is found in the sources will be used.\n# Use the PREDEFINED tag if you want to use a different macro definition that\n# overrules the definition found in the source code.\n\nEXPAND_AS_DEFINED      =\n\n# If the SKIP_FUNCTION_MACROS tag is set to YES (the default) then\n# doxygen's preprocessor will remove all references to function-like macros\n# that are alone on a line, have an all uppercase name, and do not end with a\n# semicolon, because these will confuse the parser if not removed.\n\nSKIP_FUNCTION_MACROS   = YES\n\n#---------------------------------------------------------------------------\n# Configuration::additions related to external references\n#---------------------------------------------------------------------------\n\n# The TAGFILES option can be used to specify one or more tagfiles. For each\n# tag file the location of the external documentation should be added. The\n# format of a tag file without this location is as follows:\n#\n# TAGFILES = file1 file2 ...\n# Adding location for the tag files is done as follows:\n#\n# TAGFILES = file1=loc1 \"file2 = loc2\" ...\n# where \"loc1\" and \"loc2\" can be relative or absolute paths\n# or URLs. Note that each tag file must have a unique name (where the name does\n# NOT include the path). If a tag file is not located in the directory in which\n# doxygen is run, you must also specify the path to the tagfile here.\n\nTAGFILES               =\n\n# When a file name is specified after GENERATE_TAGFILE, doxygen will create\n# a tag file that is based on the input files it reads.\n\nGENERATE_TAGFILE       =\n\n# If the ALLEXTERNALS tag is set to YES all external classes will be listed\n# in the class index. If set to NO only the inherited external classes\n# will be listed.\n\nALLEXTERNALS           = NO\n\n# If the EXTERNAL_GROUPS tag is set to YES all external groups will be listed\n# in the modules index. If set to NO, only the current project's groups will\n# be listed.\n\nEXTERNAL_GROUPS        = YES\n\n# If the EXTERNAL_PAGES tag is set to YES all external pages will be listed\n# in the related pages index. If set to NO, only the current project's\n# pages will be listed.\n\nEXTERNAL_PAGES         = YES\n\n# The PERL_PATH should be the absolute path and name of the perl script\n# interpreter (i.e. the result of `which perl').\n\nPERL_PATH              = /usr/bin/perl\n\n#---------------------------------------------------------------------------\n# Configuration options related to the dot tool\n#---------------------------------------------------------------------------\n\n# If the CLASS_DIAGRAMS tag is set to YES (the default) Doxygen will\n# generate a inheritance diagram (in HTML, RTF and LaTeX) for classes with base\n# or super classes. Setting the tag to NO turns the diagrams off. Note that\n# this option also works with HAVE_DOT disabled, but it is recommended to\n# install and use dot, since it yields more powerful graphs.\n\nCLASS_DIAGRAMS         = YES\n\n# You can define message sequence charts within doxygen comments using the \\msc\n# command. Doxygen will then run the mscgen tool (see\n# http://www.mcternan.me.uk/mscgen/) to produce the chart and insert it in the\n# documentation. The MSCGEN_PATH tag allows you to specify the directory where\n# the mscgen tool resides. If left empty the tool is assumed to be found in the\n# default search path.\n\nMSCGEN_PATH            =\n\n# If set to YES, the inheritance and collaboration graphs will hide\n# inheritance and usage relations if the target is undocumented\n# or is not a class.\n\nHIDE_UNDOC_RELATIONS   = YES\n\n# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is\n# available from the path. This tool is part of Graphviz, a graph visualization\n# toolkit from AT&T and Lucent Bell Labs. The other options in this section\n# have no effect if this option is set to NO (the default)\n\nHAVE_DOT               = NO\n\n# The DOT_NUM_THREADS specifies the number of dot invocations doxygen is\n# allowed to run in parallel. When set to 0 (the default) doxygen will\n# base this on the number of processors available in the system. You can set it\n# explicitly to a value larger than 0 to get control over the balance\n# between CPU load and processing speed.\n\nDOT_NUM_THREADS        = 0\n\n# By default doxygen will use the Helvetica font for all dot files that\n# doxygen generates. When you want a differently looking font you can specify\n# the font name using DOT_FONTNAME. You need to make sure dot is able to find\n# the font, which can be done by putting it in a standard location or by setting\n# the DOTFONTPATH environment variable or by setting DOT_FONTPATH to the\n# directory containing the font.\n\nDOT_FONTNAME           = Helvetica\n\n# The DOT_FONTSIZE tag can be used to set the size of the font of dot graphs.\n# The default size is 10pt.\n\nDOT_FONTSIZE           = 10\n\n# By default doxygen will tell dot to use the Helvetica font.\n# If you specify a different font using DOT_FONTNAME you can use DOT_FONTPATH to\n# set the path where dot can find it.\n\nDOT_FONTPATH           =\n\n# If the CLASS_GRAPH and HAVE_DOT tags are set to YES then doxygen\n# will generate a graph for each documented class showing the direct and\n# indirect inheritance relations. Setting this tag to YES will force the\n# CLASS_DIAGRAMS tag to NO.\n\nCLASS_GRAPH            = YES\n\n# If the COLLABORATION_GRAPH and HAVE_DOT tags are set to YES then doxygen\n# will generate a graph for each documented class showing the direct and\n# indirect implementation dependencies (inheritance, containment, and\n# class references variables) of the class with other documented classes.\n\nCOLLABORATION_GRAPH    = YES\n\n# If the GROUP_GRAPHS and HAVE_DOT tags are set to YES then doxygen\n# will generate a graph for groups, showing the direct groups dependencies\n\nGROUP_GRAPHS           = YES\n\n# If the UML_LOOK tag is set to YES doxygen will generate inheritance and\n# collaboration diagrams in a style similar to the OMG's Unified Modeling\n# Language.\n\nUML_LOOK               = NO\n\n# If the UML_LOOK tag is enabled, the fields and methods are shown inside\n# the class node. If there are many fields or methods and many nodes the\n# graph may become too big to be useful. The UML_LIMIT_NUM_FIELDS\n# threshold limits the number of items for each type to make the size more\n# manageable. Set this to 0 for no limit. Note that the threshold may be\n# exceeded by 50% before the limit is enforced.\n\nUML_LIMIT_NUM_FIELDS   = 10\n\n# If set to YES, the inheritance and collaboration graphs will show the\n# relations between templates and their instances.\n\nTEMPLATE_RELATIONS     = NO\n\n# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDE_GRAPH, and HAVE_DOT\n# tags are set to YES then doxygen will generate a graph for each documented\n# file showing the direct and indirect include dependencies of the file with\n# other documented files.\n\nINCLUDE_GRAPH          = YES\n\n# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDED_BY_GRAPH, and\n# HAVE_DOT tags are set to YES then doxygen will generate a graph for each\n# documented header file showing the documented files that directly or\n# indirectly include this file.\n\nINCLUDED_BY_GRAPH      = YES\n\n# If the CALL_GRAPH and HAVE_DOT options are set to YES then\n# doxygen will generate a call dependency graph for every global function\n# or class method. Note that enabling this option will significantly increase\n# the time of a run. So in most cases it will be better to enable call graphs\n# for selected functions only using the \\callgraph command.\n\nCALL_GRAPH             = NO\n\n# If the CALLER_GRAPH and HAVE_DOT tags are set to YES then\n# doxygen will generate a caller dependency graph for every global function\n# or class method. Note that enabling this option will significantly increase\n# the time of a run. So in most cases it will be better to enable caller\n# graphs for selected functions only using the \\callergraph command.\n\nCALLER_GRAPH           = NO\n\n# If the GRAPHICAL_HIERARCHY and HAVE_DOT tags are set to YES then doxygen\n# will generate a graphical hierarchy of all classes instead of a textual one.\n\nGRAPHICAL_HIERARCHY    = YES\n\n# If the DIRECTORY_GRAPH and HAVE_DOT tags are set to YES\n# then doxygen will show the dependencies a directory has on other directories\n# in a graphical way. The dependency relations are determined by the #include\n# relations between the files in the directories.\n\nDIRECTORY_GRAPH        = YES\n\n# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images\n# generated by dot. Possible values are svg, png, jpg, or gif.\n# If left blank png will be used. If you choose svg you need to set\n# HTML_FILE_EXTENSION to xhtml in order to make the SVG files\n# visible in IE 9+ (other browsers do not have this requirement).\n\nDOT_IMAGE_FORMAT       = png\n\n# If DOT_IMAGE_FORMAT is set to svg, then this option can be set to YES to\n# enable generation of interactive SVG images that allow zooming and panning.\n# Note that this requires a modern browser other than Internet Explorer.\n# Tested and working are Firefox, Chrome, Safari, and Opera. For IE 9+ you\n# need to set HTML_FILE_EXTENSION to xhtml in order to make the SVG files\n# visible. Older versions of IE do not have SVG support.\n\nINTERACTIVE_SVG        = NO\n\n# The tag DOT_PATH can be used to specify the path where the dot tool can be\n# found. If left blank, it is assumed the dot tool can be found in the path.\n\nDOT_PATH               =\n\n# The DOTFILE_DIRS tag can be used to specify one or more directories that\n# contain dot files that are included in the documentation (see the\n# \\dotfile command).\n\nDOTFILE_DIRS           =\n\n# The MSCFILE_DIRS tag can be used to specify one or more directories that\n# contain msc files that are included in the documentation (see the\n# \\mscfile command).\n\nMSCFILE_DIRS           =\n\n# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of\n# nodes that will be shown in the graph. If the number of nodes in a graph\n# becomes larger than this value, doxygen will truncate the graph, which is\n# visualized by representing a node as a red box. Note that doxygen if the\n# number of direct children of the root node in a graph is already larger than\n# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note\n# that the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.\n\nDOT_GRAPH_MAX_NODES    = 50\n\n# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the\n# graphs generated by dot. A depth value of 3 means that only nodes reachable\n# from the root by following a path via at most 3 edges will be shown. Nodes\n# that lay further from the root node will be omitted. Note that setting this\n# option to 1 or 2 may greatly reduce the computation time needed for large\n# code bases. Also note that the size of a graph can be further restricted by\n# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.\n\nMAX_DOT_GRAPH_DEPTH    = 0\n\n# Set the DOT_TRANSPARENT tag to YES to generate images with a transparent\n# background. This is disabled by default, because dot on Windows does not\n# seem to support this out of the box. Warning: Depending on the platform used,\n# enabling this option may lead to badly anti-aliased labels on the edges of\n# a graph (i.e. they become hard to read).\n\nDOT_TRANSPARENT        = YES\n\n# Set the DOT_MULTI_TARGETS tag to YES allow dot to generate multiple output\n# files in one run (i.e. multiple -o and -T options on the command line). This\n# makes dot run faster, but since only newer versions of dot (>1.8.10)\n# support this, this feature is disabled by default.\n\nDOT_MULTI_TARGETS      = NO\n\n# If the GENERATE_LEGEND tag is set to YES (the default) Doxygen will\n# generate a legend page explaining the meaning of the various boxes and\n# arrows in the dot generated graphs.\n\nGENERATE_LEGEND        = YES\n\n# If the DOT_CLEANUP tag is set to YES (the default) Doxygen will\n# remove the intermediate dot files that are used to generate\n# the various graphs.\n\nDOT_CLEANUP            = YES\n"
        },
        {
          "name": "externals",
          "type": "tree",
          "content": null
        },
        {
          "name": "generate_coverage_report",
          "type": "blob",
          "size": 0.5185546875,
          "content": "#!/bin/bash\nset -e\nmake clean\nrm -rf coverage_report\nmake test CXXFLAGS=\"-g -fprofile-arcs -ftest-coverage\"\ntest/cfg/runtests.sh\ngcov lib/*.cpp -o lib/\nlcov --directory ./ --capture --output-file lcov_tmp.info -b ./\nlcov --extract lcov_tmp.info \"$(pwd)/*\" --output-file lcov.info\ngenhtml lcov.info -o coverage_report --frame --legend --demangle-cpp\nrm cli/*.gcda\nrm cli/*.gcno\nrm lib/*.gcda\nrm lib/*.gcno\nrm test/*.gcda\nrm test/*.gcno\nrm externals/tinyxml2/*.gcda\nrm externals/tinyxml2/*.gcno\nrm lcov.info lcov_tmp.info\nmake clean\n"
        },
        {
          "name": "gui",
          "type": "tree",
          "content": null
        },
        {
          "name": "htmlreport",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "naming.json",
          "type": "blob",
          "size": 0.1884765625,
          "content": "{\n    \"script\": \"addons/naming.py\",\n    \"args\": [\n        \"--private-member-variable=m[A-Z].*\",\n        \"--var=[_a-z].*\",\n        \"--const=[_a-zA-Z].*\",\n        \"--function=[a-zA-Z].*\"\n    ]\n}\n"
        },
        {
          "name": "oss-fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "philosophy.md",
          "type": "blob",
          "size": 2.2744140625,
          "content": "\n# Cppcheck Philosophy\n\nIt is important that everybody in the Cppcheck team has a consistent idea about how this tool should work.\n\nThis is a static analyzer tool.\n\n## Usability\n\nUsability is very important. It's more important that Cppcheck is usable than finding all bugs.\n - We don't want to have tons of configurations options.\n - It's very important that warning messages are well written and with enough details.\n - Speed is very important. --check-level=exhaustive can be used when user accept slow analysis.\n\n## Normal analysis - No false positives\n\nA fundamental goal is \"no false positives\".\n\nIt is not possible to achieve \"no false positives\" completely. One case where false positives are OK is when the code is garbage.\n\nIf the code is written as it is by design, then our goal is to not show any false positives.\n\nIf it is not known if there is a problem, then in general we need to bailout to avoid false positives. We can only warn when we see that there is a problem.\n\nStylistic checks are much more prone to false positives and therefore we should avoid writing stylistic checks mostly.\n\nReporting issues in Trac:\n - If you see a false negative; report that as an enhancement.\n - If you see a false positive; report that as a defect.\n\n### Inconclusive messages\n\nIf cppcheck can't determine that there is a problem or not, then the analysis is inconclusive.\n\nIf the user enables inconclusive warnings and we guess that the probability there is a real problem is at least 50-50 then it's OK to write a inconclusive warning.\n\nInconclusive messages shall not be used for new checks which are just being developed. There `settings.experimental` can be used.\n\n\n## No configuration\n\nWe want that a user can run Cppcheck without explicit -D and -I configuration.\n\nWhen this happens the false positives should be avoided. The user can reduce false negatives with configuration.\n\n\n## Allow compiler extensions\n\nThis is not just a tool for mainstream gcc/msvc c/c++ developers. If you can compile the code with a C/C++ compiler then our goal is that Cppcheck can check it.\n\n\n## C++ language\n\nOur goal is to be highly portable. Users must be able to compile Cppcheck with GCC 4.8 or Visual Studio 2013.\n\nNo C++14 is allowed. A subset of C++11 is allowed.\n\n\n## Avoid dependencies\n\nWe are very careful about dependencies.\n\n\n\n"
        },
        {
          "name": "platforms",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 11.3984375,
          "content": "# **Cppcheck** \n\n|release-windows|OSS-Fuzz|Coverity Scan Build Status|include-what-you-use|License|\n|:--:|:--:|:--:|:--:|:--:|\n|[![release-windows](https://github.com/danmar/cppcheck/actions/workflows/release-windows.yml/badge.svg?branch=main)](https://github.com/danmar/cppcheck/actions/workflows/release-windows.yml)|[![OSS-Fuzz](https://oss-fuzz-build-logs.storage.googleapis.com/badges/cppcheck.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:cppcheck)|[![Coverity Scan Build Status](https://img.shields.io/coverity/scan/512.svg)](https://scan.coverity.com/projects/512)|[![include-what-you-use](https://github.com/danmar/cppcheck/actions/workflows/iwyu.yml/badge.svg?branch=main)](https://github.com/danmar/cppcheck/actions/workflows/iwyu.yml)|[![License](https://img.shields.io/badge/license-GPL3.0-blue.svg)](https://opensource.org/licenses/GPL-3.0)\n\n\n## About the name\n\nThe original name of this program was \"C++check\", but it was later changed to \"Cppcheck\".\n\nDespite the name, Cppcheck is designed for both C and C++.\n\n## Manual\n\nA manual is available [online](https://cppcheck.sourceforge.io/manual.pdf).\n\n## Donate CPU\n\nCppcheck is a hobby project with limited resources. You can help us by donating CPU (1 core or as many as you like). It is simple:\n\n 1. Download (and extract) Cppcheck source code.\n 2. Run:\n    ```\n    cd cppcheck/\n    virtualenv .env\n    .env/bin/pip install -r tools/donate-cpu-requirements.txt\n    .env/bin/python tools/donate-cpu.py\n    ```\n\nThe script will analyse debian source code and upload the results to a cppcheck server. We need these results both to improve Cppcheck and to detect regressions.\n\nYou can stop the script whenever you like with Ctrl C.\n\n## Compiling\n\nCppcheck requires a C++ compiler with (partial) C++11 support. Minimum required versions are GCC 5.1 / Clang 3.5 / Visual Studio 2015.\n\nTo build the GUI application, you need to use the CMake build system.\n\nWhen building the command line tool, [PCRE](http://www.pcre.org/) is optional. It is used if you build with rules.\n\nThere are multiple compilation choices:\n* CMake - cross platform build tool\n* Windows: Visual Studio\n* Windows: Qt Creator + MinGW\n* GNU make\n* GCC (g++)\n* Clang (clang++)\n\nThe minimum required Python version is 3.6.\n\n### CMake\n\nThe minimum required version is CMake 3.5.\n\nExample, compiling Cppcheck with cmake:\n\n```shell\nmkdir build\ncd build\ncmake ..\ncmake --build .\n```\n\nIf you want to compile the GUI you can use the flag.\n-DBUILD_GUI=ON\n\nFor rules support (requires pcre) use the flag.\n-DHAVE_RULES=ON\n\nFor release builds it is recommended that you use:\n-DUSE_MATCHCOMPILER=ON\n\nFor building the tests use the flag.\n-DBUILD_TESTS=ON\n\nUsing cmake you can generate project files for Visual Studio,XCode,etc.\n\n#### Building a specific configuration\n\nFor single-configuration generators (like \"Unix Makefiles\") you can generate and build a specific configuration (e.g. \"RelWithDebInfo\") using:\n\n```shell\nmkdir build_RelWithDebInfo\ncd build_RelWithDebInfo\ncmake -DCMAKE_BUILD_TYPE=RelWithDebInfo ..\ncmake --build . --config RelWithDebInfo\n```\n\nFor multi-configuration generators (like \"Visual Studio 17 2022\") the same is achieved using:\n\n```shell\nmkdir build\ncd build\ncmake ..\ncmake --build . --config RelWithDebInfo\n```\n\n### Visual Studio\n\nUse the cppcheck.sln file. The file is configured for Visual Studio 2019, but the platform toolset can be changed easily to older or newer versions. The solution contains platform targets for both x86 and x64.\n\nTo compile with rules, select \"Release-PCRE\" or \"Debug-PCRE\" configuration. pcre.lib (pcre64.lib for x64 builds) and pcre.h are expected to be in /externals then. A current version of PCRE for Visual Studio can be obtained using [vcpkg](https://github.com/microsoft/vcpkg).\n\n### Visual Studio (from command line)\n\nIf you do not wish to use the Visual Studio IDE, you can compile cppcheck from the command line the following command.\n\n```shell\nmsbuild cppcheck.sln\n```\n\n### VS Code (on Windows)\n\nInstall MSYS2 to get GNU toolchain with g++ and gdb (https://www.msys2.org/).\nCreate a settings.json file in the .vscode folder with the following content (adjust path as necessary):\n\n```\n{\n    \"terminal.integrated.shell.windows\": \"C:\\\\msys64\\\\usr\\\\bin\\\\bash.exe\",\n    \"terminal.integrated.shellArgs.windows\": [\n        \"--login\",\n    ],\n    \"terminal.integrated.env.windows\": {\n        \"CHERE_INVOKING\": \"1\",\n        \"MSYSTEM\": \"MINGW64\",\n    }\n}\n```\n\nRun \"make\" in the terminal to build cppcheck.\n\nFor debugging create a launch.json file in the .vscode folder with the following content, which covers configuration for debugging cppcheck and misra.py:\n\n```\n{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"cppcheck\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceFolder}/cppcheck.exe\",\n            \"args\": [\n                \"--dump\",\n                \"${workspaceFolder}/addons/test/misra/misra-test.c\"\n            ],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${workspaceFolder}\",\n            \"environment\": [],\n            \"externalConsole\": true,\n            \"MIMode\": \"gdb\",\n            \"miDebuggerPath\": \"C:/msys64/mingw64/bin/gdb.exe\",\n            \"setupCommands\": [\n                {\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                }\n            ]\n        },\n        {\n            \"name\": \"misra.py\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceFolder}/addons/misra.py\",\n            \"console\": \"integratedTerminal\",\n            \"args\": [\n                \"${workspaceFolder}/addons/test/misra/misra-test.c.dump\"\n            ]\n        }\n    ]\n}\n```\n\n### Qt Creator + MinGW\n\nThe PCRE dll is needed to build the CLI. It can be downloaded here:\nhttp://software-download.name/pcre-library-windows/\n\n### GNU make\n\nSimple, unoptimized build (no dependencies):\n\n```shell\nmake\n```\n\nThe recommended release build is:\n\n```shell\nmake MATCHCOMPILER=yes FILESDIR=/usr/share/cppcheck HAVE_RULES=yes CXXFLAGS=\"-O2 -DNDEBUG -Wall -Wno-sign-compare -Wno-unused-function\"\n```\n\nFlags:\n\n1.  `MATCHCOMPILER=yes`\n    Python is used to optimise cppcheck. The Token::Match patterns are converted into C++ code at compile time.\n\n2.  `FILESDIR=/usr/share/cppcheck`\n    Specify folder where cppcheck files are installed (addons, cfg, platform)\n\n3.  `HAVE_RULES=yes`\n    Enable rules (PCRE is required if this is used)\n\n4.  `CXXFLAGS=\"-O2 -DNDEBUG -Wall -Wno-sign-compare -Wno-unused-function\"`\n    Enables most compiler optimizations, disables cppcheck-internal debugging code and enables basic compiler warnings.\n\n### g++ (for experts)\n\nIf you just want to build Cppcheck without dependencies then you can use this command:\n\n```shell\ng++ -o cppcheck -std=c++11 -Iexternals -Iexternals/simplecpp -Iexternals/tinyxml2 -Iexternals/picojson -Ilib cli/*.cpp lib/*.cpp externals/simplecpp/simplecpp.cpp externals/tinyxml2/*.cpp\n```\n\nIf you want to use `--rule` and `--rule-file` then dependencies are needed:\n\n```shell\ng++ -o cppcheck -std=c++11 -lpcre -DHAVE_RULES -Ilib -Iexternals -Iexternals/simplecpp -Iexternals/tinyxml2 cli/*.cpp lib/*.cpp externals/simplecpp/simplecpp.cpp externals/tinyxml2/*.cpp\n```\n\n### MinGW\n\n```shell\nmingw32-make\n```\n\nIf you encounter the following error with `MATCHCOMPILER=yes` you need to specify your Python interpreter via `PYTHON_INTERPRETER`.\n\n```\nprocess_begin: CreateProcess(NULL, which python3, ...) failed.\nmakefile:24: pipe: No error\nprocess_begin: CreateProcess(NULL, which python, ...) failed.\nmakefile:27: pipe: No error\nmakefile:30: *** Did not find a Python interpreter.  Stop.\n```\n\n### Other Compiler/IDE\n\n1. Create an empty project file / makefile.\n2. Add all cpp files in the cppcheck cli and lib folders to the project file / makefile.\n3. Add all cpp files in the externals folders to the project file / makefile.\n4. Compile.\n\n### Cross compiling Win32 (CLI) version of Cppcheck in Linux\n\n```shell\nsudo apt-get install mingw32\nmake CXX=i586-mingw32msvc-g++ LDFLAGS=\"-lshlwapi\" RDYNAMIC=\"\"\nmv cppcheck cppcheck.exe\n```\n\n## Packages\n\nBesides building yourself on the platform of your choice there are also several ways to obtain pre-built packages.<br/>\n\nOfficial packages maintained by the Cppcheck team:\n- (Windows) An official Windows installer is available via the official Cppcheck SourceForge page: https://cppcheck.sourceforge.io/.\n- (Windows) Official builds of the current development versions are available via the [release-windows](https://github.com/danmar/cppcheck/actions/workflows/release-windows.yml) workflow. They are built nightly for the `main` branch and for each commit for release branches. As these are development versions please refrain from using these in production environments!\n  - A portable package (i.e. does not require installation) is available as the `portable` artifact. This is still a work-in-progress - see https://trac.cppcheck.net/ticket/10771 for details.\n  - An installer is available via the `installer` artifact.\n- (Multi-Platform) A premium version with additional features provided by the original author of Cppcheck is available for purchase via https://www.cppcheck.com/.\n\nUnofficial packages *not* maintained by the Cppcheck team but their respective packagers:\n- (Windows) An portable package is available via https://portableapps.com/apps/development/cppcheck-portable.\n- (Windows / Outdated) A package is available via https://community.chocolatey.org/packages/cppcheck.\n- (Windows / Outdated) A package is available via https://winget.run/pkg/Cppcheck/Cppcheck.\n- (Windows / Outdated) A package is available via https://osdn.net/projects/sfnet_cppcheck/.\n- (Linux/Unix) Many major distros offer Cppcheck packages via their integrated package managers (`yum`, `apt`, `pacman`, etc.). See https://pkgs.org/search/?q=cppcheck for an overview.\n- (Linux/Unix) Unless you are using a \"rolling\" distro, it is likely that they are not carrying the latest version. There are several external (mainly unsupported) repositories like AUR (ArchLinux), PPA (ubuntu), EPEL (CentOS/Fedora) etc. which might provide up-to-date packages. \n- (Linux/Unix / Outdated) The Canonical Snapcraft packages (https://snapcraft.io/cppcheck / https://snapcraft.io/cppcheckgui) are unmaintained and contain very old (development) versions. Please refrain from using them! See https://trac.cppcheck.net/ticket/11641 for more details.\n- (MacOS) A package is available via Homebrew (`brew`). See https://formulae.brew.sh/formula/cppcheck.\n- (MacOS) A package is available via https://ports.macports.org/port/cppcheck/\n- (Multi-Platform) A package is available via https://anaconda.org/conda-forge/cppcheck.\n- Packages are also available from various download portals (mainly the Windows installer - sometimes re-packaged).\n\n*Note:* This is list is purely informational and listed in no particular order.\n\n*Note:* Please always try to obtain the package from the primary official source of your operating system/distro first and make sure you are getting the latest released version.\n\n*Note:* Some issues might be related to additional patches carried by the builds in these packages or the packaging itself. In that case issues might need to be reported to the respective project.\n\n## Webpage\n\nhttps://cppcheck.sourceforge.io/\n"
        },
        {
          "name": "readme.txt",
          "type": "blob",
          "size": 3.8603515625,
          "content": "=========\nCppcheck\n=========\n\n\nAbout\n\n    The original name of this program is \"C++check\" but it was later changed to \"cppcheck\".\n\nManual\n\n    A manual is available online:\n    https://cppcheck.sourceforge.io/manual.pdf\n\nCompiling\n\n    Any C++11 compiler should work. For compilers with partial C++11 support it may work. If\n    your compiler has the C++11 features that are available in Visual Studio 2013 / GCC 4.8\n    then it will work.\n\n    To build the GUI, you need Qt.\n\n    While building the command line tool, PCRE is optional. It is used if you build with rules.\n\n    There are multiple compilation choices:\n      * cmake - cross platform build tool\n      * Windows: Visual Studio\n      * Windows: Qt Creator + mingw\n      * gnu make\n      * g++ 4.8 (or later)\n      * clang++\n\n    cmake\n    =====\n        Example, compiling Cppcheck with cmake:\n            mkdir build\n            cd build\n            cmake ..\n            cmake --build .\n\n        If you want to compile the GUI you can use the flag\n        -DBUILD_GUI=ON\n\n        For rules support (requires pcre) use the flag\n        -DHAVE_RULES=ON\n\n        For release builds it is recommended that you use:\n        -DUSE_MATCHCOMPILER=ON\n\n    Visual Studio\n    =============\n        Use the cppcheck.sln file. The file is configured for Visual Studio 2019, but the platform\n        toolset can be changed easily to older or newer versions. The solution contains platform\n        targets for both x86 and x64.\n\n        To compile with rules, select \"Release-PCRE\" or \"Debug-PCRE\" configuration.\n        pcre.lib (pcre64.lib for x64 builds) and pcre.h are expected to be in /externals then.\n        A current version of PCRE for Visual Studio can be obtained using vcpkg:\n        https://github.com/microsoft/vcpkg\n\n    Qt Creator + mingw\n    ==================\n        The PCRE dll is needed to build the CLI. It can be downloaded here:\n            http://software-download.name/pcre-library-windows/\n\n    gnu make\n    ========\n        Simple build (no dependencies):\n            make\n\n        The recommended release build is:\n            make MATCHCOMPILER=yes FILESDIR=/usr/share/cppcheck HAVE_RULES=yes\n\n        Flags:\n        MATCHCOMPILER=yes               : Python is used to optimise cppcheck at compile time\n        FILESDIR=/usr/share/cppcheck    : Specify folder where cppcheck files are installed\n        HAVE_RULES=yes                  : Enable rules (pcre is required if this is used)\n\n    g++ (for experts)\n    =================\n        If you just want to build Cppcheck without dependencies then you can use this command:\n            g++ -o cppcheck -std=c++11 -Iexternals -Iexternals/picojson -Iexternals/simplecpp -Iexternals/tinyxml2 -Ilib cli/*.cpp lib/*.cpp externals/simplecpp/simplecpp.cpp externals/tinyxml2/*.cpp\n\n        If you want to use --rule and --rule-file then dependencies are needed:\n            g++ -o cppcheck -std=c++11 -lpcre -DHAVE_RULES -Ilib -Iexternals -Iexternals/picojson -Iexternals/simplecpp -Iexternals/tinyxml2 cli/*.cpp lib/*.cpp externals/simplecpp/simplecpp.cpp externals/tinyxml2/*.cpp\n\n    mingw\n    =====\n        The \"LDFLAGS=-lshlwapi\" is needed when building with mingw\n            mingw32-make LDFLAGS=-lshlwapi\n\n    other compilers/ide\n    ===================\n\n        1. Create a empty project file / makefile.\n        2. Add all cpp files in the cppcheck cli and lib folders to the project file / makefile.\n        3. Add all cpp files in the externals folders to the project file / makefile.\n        4. Compile.\n\n    Cross compiling Win32 (CLI) version of Cppcheck in Linux\n\n        sudo apt-get install mingw32\n        make CXX=i586-mingw32msvc-g++ LDFLAGS=\"-lshlwapi\"\n        mv cppcheck cppcheck.exe\n\nPackages\n\n    You can install Cppcheck with yum/apt/brew/etc.\n\n    The official rpms are built with these files:\n    https://src.fedoraproject.org/rpms/cppcheck/tree/master\n\nWebpage\n\n    https://cppcheck.sourceforge.io/\n"
        },
        {
          "name": "readmeja.md",
          "type": "blob",
          "size": 5.330078125,
          "content": "# Cppcheck\n\n| Linux ビルド状態 | Windows ビルド状態 | Coverity Scan Build 状態 |\n|:--:|:--:|:--:|\n| [![Linux ビルド状態](https://img.shields.io/travis/danmar/cppcheck/master.svg?label=Linux%20build)](https://travis-ci.org/danmar/cppcheck) | [![Windows ビルド状態](https://img.shields.io/appveyor/ci/danmar/cppcheck/master.svg?label=Windows%20build)](https://ci.appveyor.com/project/danmar/cppcheck/branch/master) | [![Coverity Scan Build 状態](https://img.shields.io/coverity/scan/512.svg)](https://scan.coverity.com/projects/512) |\n\n## 名前について\n\nこのプログラムは元々、\"C++check\"という名前でしたが後に\"Cppcheck\"に変更されました。\n\nこのような名前ですが、Cppcheckは CとC++の両方に対して設計されています。\n\n## マニュアル\n\nマニュアルは[オンライン上に](https://cppcheck.sourceforge.io/manual.pdf)あります。\n\n## ビルド\n\nC++11に対応したコンパイラが利用できます。部分的にC++11にサポートしたコンパイラも利用できるかもしれません。もし、あなたのコンパイラがVisual Studio 2013や GCC 4.8で利用できるC++11機能がサポートされているなら、そのコンパイラが利用できます。\n\nGUIも利用する場合、Qtライブラリが必要です。\n\nコマンドラインツールをビルドする場合、[PCRE](http://www.pcre.org/)はオプションです。これはルールを作成するために利用します。\n\nコンパイル上の選択肢がいくつかあります。\n* cmake - クロスプラットフォームのビルドツール\n* Windows: Visual Studio (VS 2013 またはそれ以上)\n* Windows: Qt Creator + mingw\n* gnu make\n* g++ 4.8 (またはそれ以上)\n* clang++\n\n### cmake\n\ncmakeでCppcheckをコンパイルする例\n\n```shell\nmkdir build\ncd build\ncmake ..\ncmake --build .\n```\n\nC++標準を指定する必要がある場合次のオプションを指定します。\n-DCMAKE_CXX_STANDARD=11\n\nCppcheckのGUIが必要な場合次のフラグを指定します。\n-DBUILD_GUI=ON\n\npcreが必要になりますが、正規表現のルールサポートが必要な場合次のフラグを指定します。\n-DHAVE_RULES=ON\n\n### Visual Studio\n\ncppcheck.slnファイルが利用できます。このファイルは、Visual Studio 2019向けです。しかし、このプラットフォームツールセットはこれより新しいバージョンまたは古いバージョン向けに変更できます。このソルーションには、プラットフォームターゲットとしてx86とx64があります。\n\nルールをコンパイルするためには、\"Release-PCRE\" または \"Debug-PCRE\" 設定を選択してください。pcre.lib (または pcre64.lib x64ビルド向け) と pcre.h を /externals にコピーしてください。Visual Studio のための PCRE の最新バージョンは [vcpkg](https://github.com/microsoft/vcpkg) から取得できます。\n\n### Qt Creator + MinGW\n\nコマンドラインツールをビルドするには、PCRE.dllが必要です。これは以下のURLからダウンロードできます。:\nhttp://software-download.name/pcre-library-windows/\n\n### GNU make\n\n単純で最適化しないビルド(依存関係なし):\n\n```shell\nmake\n```\n\n推奨するリリースビルド方法:\n\n```shell\nmake MATCHCOMPILER=yes FILESDIR=/usr/share/cppcheck HAVE_RULES=yes CXXFLAGS=\"-O2 -DNDEBUG -Wall -Wno-sign-compare -Wno-unused-function\"\n```\n\nフラグ:\n\n1. `MATCHCOMPILER=yes`\ncppcheckの最適化にPythonを使用します。Token::Match パターンはコンパイル時にlC++コードに変換されます。\n\n2. `FILESDIR=/usr/share/cppcheck`\ncppcheckの設定ファイル(addon や cfg や platform)を置くディレクトリを指定します。\n\n3. `HAVE_RULES=yes`\nルール機能の有効化 (ルール機能には PCRE が必要です)設定です。\n\n4. `CXXFLAGS=\"-O2 -DNDEBUG -Wall -Wno-sign-compare -Wno-unused-function\"`\nほとんどのコンパイラの最適化オプション、cppcheckの内部デバッグコードの無効化、基本的なコンパイラ警告の有効化\n\n### g++ (エキスパート向け)\n\n依存関係なく Cppcheckをビルドしたい場合、次のコマンドを利用できます。\n\n```shell\ng++ -o cppcheck -std=c++11 -Iexternals -Iexternals/simplecpp -Iexternals/tinyxml2 -Ilib cli/*.cpp lib/*.cpp externals/simplecpp/simplecpp.cpp externals/tinyxml2/*.cpp\n```\n\n`--rule` や `--rule-file` を利用する場合、依存ライブラリが必要です。\n\n```shell\ng++ -o cppcheck -std=c++11 -lpcre -DHAVE_RULES -Iexternals -Iexternals/simplecpp -Iexternals/tinyxml2 -Ilib cli/*.cpp lib/*.cpp externals/simplecpp/simplecpp.cpp externals/tinyxml2/*.cpp\n```\n\n### MinGW\n\n```shell\nmingw32-make\n```\n\n### その他のコンパイラ/IDE\n\n1. 空のプロジェクトファイル /makefileの作成\n2. cppcheck cli それに lib ディレクトリに含まれる全てのcppファイルをそのプロジェクトファイルまたはmakefileに加えます。\n3. externalsフォルダの全てのcppファイルをプロジェクトファイル / makefileに追加します。\n4. ビルド\n\n### Linux で Win32 コマンドラインバージョンをクロスコンパイル\n\n```shell\nsudo apt-get install mingw32\nmake CXX=i586-mingw32msvc-g++ LDFLAGS=\"-lshlwapi\" RDYNAMIC=\"\"\nmv cppcheck cppcheck.exe\n```\n\n## Webページ\n\nhttps://cppcheck.sourceforge.io/\n"
        },
        {
          "name": "releasenotes.txt",
          "type": "blob",
          "size": 0.376953125,
          "content": "Release Notes for Cppcheck 2.17\n\nNew checks:\n-\n\nImproved checking:\n-\n\nGUI:\n-\n\nChanged interface:\n-Added `reduced` check level. It can be activated with `--check-level=reduced`. You get faster analysis\nbut some fewer results. The motivation is to be able to make analysis time \"acceptable\" for direct usage.\n\nDeprecations:\n-\n\nOther:\n- Removed deperecated support for builds via qmake.\n-\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.095703125,
          "content": "pcre,pfultz2/pcre@8.45 -H sha256:d6f7182602a775a7d500a0cedca6449af0400c6493951513046d17615ed0bf11\n"
        },
        {
          "name": "rules",
          "type": "tree",
          "content": null
        },
        {
          "name": "runformat",
          "type": "blob",
          "size": 1.681640625,
          "content": "#!/bin/bash\n#\n# uncrustify-0.72 is used to format cppcheck source code.\n#\n# 1. Download source code: https://github.com/uncrustify/uncrustify/archive/refs/tags/uncrustify-0.72.0.zip\n#    It's important that all Cppcheck developers use the exact same version so we don't get a \"format battle\".\n# 2. Building:\n#    - Linux: mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release .. && make\n#    - Windows: mkdir build && cd build && cmake -G\"NMake Makefiles\" -DCMAKE_BUILD_TYPE=Release .. && nmake\n# 3. Ensure that the binary \"uncrustify\" is found by runformat. Either:\n#    - you can put uncrustify in your PATH\n#    - you can create an environment variable UNCRUSTIFY that has the full path of the binary\n\nUNCRUSTIFY_VERSION=\"0.72.0\"\nUNCRUSTIFY=\"${UNCRUSTIFY-uncrustify}\"\n\nDETECTED_VERSION=$(\"$UNCRUSTIFY\" --version 2>&1 | grep -o -E '[0-9.]+')\nif [ \"$DETECTED_VERSION\" != \"${UNCRUSTIFY_VERSION}\" ]; then\n  echo \"You should use version: ${UNCRUSTIFY_VERSION}\"\n  echo \"Detected version: ${DETECTED_VERSION}\"\n  exit 1\nfi\n\n# OS variables\n[ $(uname -s) = \"Darwin\" ] && export OSX=1 && export UNIX=1\n[ $(uname -s) = \"Linux\" ] && export LINUX=1 && export UNIX=1\nuname -s | grep -q \"_NT-\" && export WINDOWS=1\n\nif [ $OSX ]\nthen\n  export CPUCOUNT=$(sysctl -n hw.ncpu)\nelif [ $LINUX ]\nthen\n  export CPUCOUNT=$(nproc)\nelse\n  export CPUCOUNT=\"1\"\nfi\n\nfunction formatCplusplus {\n  find $1 -iname '*.h' \\\n      -o -iname '*.c' \\\n      -o -iname '*.cpp' \\\n      | xargs -n 1 -P $CPUCOUNT -I{} -t $UNCRUSTIFY -c .uncrustify.cfg --no-backup {}\n\n}\n\nformatCplusplus cli/\nformatCplusplus democlient/\nformatCplusplus gui/\nformatCplusplus lib/\nformatCplusplus oss-fuzz/\nformatCplusplus test/\nformatCplusplus tools/\nformatCplusplus samples/\n"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "snap",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "valgrind",
          "type": "tree",
          "content": null
        },
        {
          "name": "webreport.sh",
          "type": "blob",
          "size": 0.462890625,
          "content": "#!/bin/bash\n\n./generate_coverage_report\n\nrm -rf devinfo\nmkdir devinfo\n\nmv coverage_report devinfo/\n\ndoxygen 2> devinfo/doxygen-errors.txt\nmv doxyoutput/html devinfo/doxyoutput\n\ncd addons || exit 1\ndoxygen cppcheckdata.doxyfile\nmv html ../devinfo/cppcheckdata\ncd ..\n\n# Detect duplicate code..\n~/pmd-4.2.6/bin/cpd.sh lib/ > devinfo/cpd.txt\n#java -jar ~/simian-2.4.0/bin/simian-2.4.0.jar -language=c++ -reportDuplicateText -threshold=10 lib/*.cpp lib/*.h > devinfo/simian.txt\n\n"
        },
        {
          "name": "win_installer",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}