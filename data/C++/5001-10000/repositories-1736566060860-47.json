{
  "metadata": {
    "timestamp": 1736566060860,
    "page": 47,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gperftools/gperftools",
      "stars": 8533,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.517578125,
          "content": "*.[oa]\n*.la\n*.lo\n*~\n/*.log\n/*.trs\n/.deps\n/.libs\n/GPATH\n/GRTAGS\n/GSYMS\n/GTAGS\n/ID\n/Makefile\n/Makefile.in\n/aclocal.m4\n/addressmap_unittest\n/addressmap_unittest.exe\n/autom4te.cache/\n/benchmark/.deps\n/benchmark/.dirstamp\n/binary_trees\n/binary_trees.exe\n/binary_trees_shared\n/binary_trees_shared.exe\n/build/\n/check_address_test\n/cleanup_test\n/cleanup_test.exe\n/compile\n/config.guess\n/config.log\n/config.status\n/config.sub\n/configure\n/current_allocated_bytes_test\n/current_allocated_bytes_test.exe\n/debugallocation_test\n/debugallocation_test.sh\n/depcomp\n/frag_unittest\n/frag_unittest.exe\n/function_ref_test\n/function_ref_test.exe\n/generic_writer_test\n/generic_writer_test.exe\n/getpc_test\n/gperftools-*.tar.gz\n/gperftools-*.zip\n/heap-checker-death_unittest.sh\n/heap-checker_debug_unittest\n/heap-checker_debug_unittest.sh\n/heap-checker_unittest\n/heap-checker_unittest.sh\n/heap-profiler_debug_unittest\n/heap-profiler_debug_unittest.sh\n/heap-profiler_unittest\n/heap-profiler_unittest.sh\n/heap_checker_stub_test\n/install-sh\n/libprofiler.pc\n/libtcmalloc.pc\n/libtcmalloc_debug.pc\n/libtcmalloc_minimal.pc\n/libtcmalloc_minimal_debug.pc\n/libtool\n/low_level_alloc_unittest\n/low_level_alloc_unittest.exe\n/ltmain.sh\n/m4/libtool.m4\n/m4/ltoptions.m4\n/m4/ltsugar.m4\n/m4/ltversion.m4\n/m4/lt~obsolete.m4\n/malloc_bench\n/malloc_bench.exe\n/malloc_bench_shared\n/malloc_bench_shared.exe\n/malloc_bench_shared_full\n/malloc_bench_shared_full.exe\n/malloc_extension_c_test\n/malloc_extension_c_test.exe\n/malloc_extension_debug_test\n/malloc_extension_test\n/malloc_extension_test.exe\n/malloc_hook_test\n/malloc_hook_test.exe\n/markidle_unittest\n/markidle_unittest.exe\n/memalign_debug_unittest\n/memalign_unittest\n/min_per_thread_cache_size_test\n/min_per_thread_cache_size_test.exe\n/missing\n/packed_cache_test\n/packed_cache_test.exe\n/page_heap_test\n/page_heap_test.exe\n/pagemap_unittest\n/pagemap_unittest.exe\n/pprof-symbolize\n/proc_maps_iterator_test\n/proc_maps_iterator_test.exe\n/profile_handler_unittest\n/profiledata_unittest\n/profiler1_unittest\n/profiler2_unittest\n/profiler3_unittest\n/profiler4_unittest\n/profiler_unittest.sh\n/realloc_debug_unittest\n/realloc_unittest\n/realloc_unittest.exe\n/safe_strerror_test\n/safe_strerror_test.exe\n/sampler_test\n/sampler_test.exe\n/sampling_debug_test\n/sampling_debug_test.sh\n/sampling_test\n/sampling_test.sh\n/src/.deps\n/src/.dirstamp\n/src/base/.deps\n/src/base/.dirstamp\n/src/config.h\n/src/config.h.in\n/src/gperftools/tcmalloc.h\n/src/stamp-h1\n/src/stamp-h1\n/src/tests/.deps\n/src/tests/.dirstamp\n/src/windows/.deps\n/src/windows/.dirstamp\n/stack_trace_table_test\n/stack_trace_table_test.exe\n/stacktrace_unittest\n/system_alloc_unittest\n/tcm_asserts_unittest\n/tcm_asserts_unittest.exe\n/tcm_min_asserts_unittest\n/tcm_min_asserts_unittest.exe\n/tcmalloc_and_profiler_unittest\n/tcmalloc_both_unittest\n/tcmalloc_debug_unittest\n/tcmalloc_large_heap_fragmentation_unittest\n/tcmalloc_large_unittest\n/tcmalloc_minimal_debug_unittest\n/tcmalloc_minimal_large_heap_fragmentation_unittest\n/tcmalloc_minimal_large_heap_fragmentation_unittest.exe\n/tcmalloc_minimal_large_unittest\n/tcmalloc_minimal_large_unittest.exe\n/tcmalloc_minimal_unittest\n/tcmalloc_minimal_unittest.exe\n/tcmalloc_unittest\n/tcmalloc_unittest.sh\n/test-driver\n/thread_dealloc_unittest\n/thread_dealloc_unittest.exe\n/trivialre_test\n/trivialre_test.exe\n/unique_path_unittest\n/unique_path_unittest.exe\n/unwind_bench\n/unwind_bench.exe\n/vendor/googletest/googletest/src/.deps\n/vendor/googletest/googletest/src/.dirstamp\n/vendor/libbacktrace-integration/.deps\n/vendor/libbacktrace-integration/.dirstamp\n/vendor/libbacktrace/.deps\n/vendor/libbacktrace/.dirstamp\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.0283203125,
          "content": "gperftools@googlegroups.com\n\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 33.1494140625,
          "content": "cmake_minimum_required(VERSION 3.12)\n\n# Please note that cmake support is very preliminary. Autotools-based\n# build is the only fully supported build for now.\n\nset(CMAKE_BUILD_TYPE \"RelWithDebInfo\" CACHE STRING \"Choose the build type\")\n\nproject(gperftools VERSION 2.16 LANGUAGES C CXX\n        DESCRIPTION \"Performance tools for C++\"\n        HOMEPAGE_URL https://github.com/gperftools/gperftools)\n\n# Update this value for every release!\nset(TCMALLOC_SO_VERSION 9.18.5)\nset(PROFILER_SO_VERSION 5.13.5)\nset(TCMALLOC_AND_PROFILER_SO_VERSION 10.13.6)\n\n# The user can choose not to compile in the heap-profiler, or the\n# cpu-profiler.  There's also the possibility for a 'fully minimal'\n# compile, which leaves out the stacktrace code as well.  By default,\n# we include all of these that the target system supports.\nset(DEFAULT_BUILD_CPU_PROFILER ON)\nset(DEFAULT_BUILD_HEAP_PROFILER ON)\nset(DEFAULT_BUILD_DEBUGALLOC ON)\nset(DEFAULT_BUILD_MINIMAL OFF)\n\nset(DEFAULT_TCMALLOC_ALIGNMENT 16)\n\nset(HOST string(TOLOWER \"${CMAKE_SYSTEM_NAME}\"))\n\nif(MINGW OR MSVC)\n  set(DEFAULT_BUILD_MINIMAL ON)\n  set(DEFAULT_BUILD_DEBUGALLOC OFF)\nelseif(CYGWIN)\n  set(DEFAULT_BUILD_CPU_PROFILER OFF)\nendif()\n\ninclude(CheckCCompilerFlag)\ninclude(CheckCXXCompilerFlag)\ninclude(CheckCSourceCompiles)\ninclude(CheckCXXSourceCompiles)\ninclude(CheckFunctionExists)\ninclude(CheckIncludeFile)\ninclude(CheckLibraryExists)\ninclude(CheckSymbolExists)\ninclude(CheckTypeSize)\ninclude(CheckVariableExists)\ninclude(CMakeDependentOption)\ninclude(CTest)\n\noption(BUILD_SHARED_LIBS \"Build using shared libraries\" ON)\n\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)\ninclude(DefineTargetVariables)\n\ndefine_target_variables()\n\n# Currently only backtrace works on s390.\nif(s390 OR OSX)\n  set(default_enable_libunwind OFF)\n  set(default_enable_backtrace ON)\nelse()\n  set(default_enable_libunwind ON)\n  set(default_enable_backtrace OFF)\nendif()\n\n# Disable libunwind linking on ppc64 by default.\nif(PPC64)\n  set(default_enable_libunwind OFF)\n  set(default_tcmalloc_pagesize 64)\nelse()\n  if(PPC)\n    set(default_enable_libunwind OFF)\n  else()\n    set(default_enable_libunwind ON)\n  endif()\n  set(default_tcmalloc_pagesize 8)\nendif()\n\ncmake_dependent_option(\n  GPERFTOOLS_BUILD_CPU_PROFILER \"Build cpu-profiler\" ${DEFAULT_BUILD_CPU_PROFILER}\n  \"NOT gperftools_build_minimal\" OFF)\ncmake_dependent_option(\n  GPERFTOOLS_BUILD_HEAP_PROFILER \"Build heap-profiler\" ${DEFAULT_BUILD_HEAP_PROFILER}\n  \"NOT gperftools_build_minimal\" OFF)\ncmake_dependent_option(\n  GPERFTOOLS_BUILD_DEBUGALLOC \"Build debugalloc\" ${DEFAULT_BUILD_DEBUGALLOC}\n  \"NOT gperftools_build_minimal\" OFF)\noption(\n        gperftools_build_minimal\n        \"Build only tcmalloc-minimal (and maybe tcmalloc-minimal-debug)\"\n        ${DEFAULT_BUILD_MINIMAL})\nif(gperftools_build_minimal)\n  set(GPERFTOOLS_BUILD_CPU_PROFILER OFF)\n  set(GPERFTOOLS_BUILD_HEAP_PROFILER OFF)\nendif()\n\ncmake_dependent_option(\n  gperftools_build_benchmark \"Build benchmark\" ON \"NOT MINGW AND NOT MSVC\" OFF)\n\noption(gperftools_enable_stacktrace_via_backtrace\n       \"Enable use of backtrace() for stacktrace capturing (may deadlock)\"\n       ${default_enable_backtrace})\noption(gperftools_enable_libunwind\n       \"Enable libunwind linking\"\n       ${default_enable_libunwind})\n\nset(enable_backtrace ${gperftools_enable_stacktrace_via_backtrace})\nset(enable_libunwind ${gperftools_enable_libunwind})\n\noption(gperftools_enable_libgcc_unwinder_by_default\n       \"Prefer libgcc's _Unwind_Backtrace as default stacktrace capturing method\"\n       OFF)\nset(PREFER_LIBGCC_UNWINDER ${gperftools_enable_libgcc_unwinder_by_default})\n\nset(gperftools_tcmalloc_pagesize ${default_tcmalloc_pagesize}\n  CACHE STRING \"Set the tcmalloc internal page size\")\nset(allowed_page_sizes LIST \"4;8;16;32;64;128;256\")\nset_property(CACHE gperftools_tcmalloc_pagesize PROPERTY STRINGS ${allowed_page_sizes})\nif(NOT gperftools_tcmalloc_pagesize IN_LIST allowed_page_sizes)\n  message(WARNING\n    \"Invalid gperftools_tcmalloc_pagesize (${gperftools_tcmalloc_pagesize}), \"\n    \"setting to default value (${default_tcmalloc_pagesize})\")\n  set(gperftools_tcmalloc_pagesize ${default_tcmalloc_pagesize})\nendif()\nif (gperftools_tcmalloc_pagesize EQUAL 4)\n  set(TCMALLOC_PAGE_SIZE_SHIFT 12)\nelseif(gperftools_tcmalloc_pagesize EQUAL 8)\n  # default page size\nelseif(gperftools_tcmalloc_pagesize EQUAL 16)\n  set(TCMALLOC_PAGE_SIZE_SHIFT 14)\nelseif(gperftools_tcmalloc_pagesize EQUAL 32)\n  set(TCMALLOC_PAGE_SIZE_SHIFT 15)\nelseif(gperftools_tcmalloc_pagesize EQUAL 64)\n  set(TCMALLOC_PAGE_SIZE_SHIFT 16)\nelseif(gperftools_tcmalloc_pagesize EQUAL 128)\n  set(TCMALLOC_PAGE_SIZE_SHIFT 17)\nelseif(gperftools_tcmalloc_pagesize EQUAL 256)\n  set(TCMALLOC_PAGE_SIZE_SHIFT 18)\nelse()\n  message(WARNING\n  \"${gperftools_tcmalloc_pagesize}K size not supported, using default tcmalloc page size.\")\nendif()\n\nset(gperftools_tcmalloc_alignment ${DEFAULT_TCMALLOC_ALIGNMENT}\n  CACHE STRING \"Set the tcmalloc allocation alignment\")\nset_property(CACHE gperftools_tcmalloc_alignment PROPERTY STRINGS \"8\" \"16\")\nif(NOT gperftools_tcmalloc_alignment STREQUAL \"8\" AND\n   NOT gperftools_tcmalloc_alignment STREQUAL \"16\")\n  message(WARNING\n      \"Invalid gperftools_tcmalloc_alignment (${gperftools_tcmalloc_alignment}), \"\n      \"setting to default value (${DEFAULT_TCMALLOC_ALIGNMENT})\")\n  set(gperftools_tcmalloc_alignment ${DEFAULT_TCMALLOC_ALIGNMENT})\nendif()\nif(gperftools_tcmalloc_alignment STREQUAL \"8\")\n  set(TCMALLOC_ALIGN_8BYTES ON)\nendif()\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS ON)\n\n# AX_C___ATTRIBUTE__\ncheck_c_source_compiles(\"#include <stdlib.h>\n                         static void foo(void) __attribute__ ((unused));\n                         void foo(void) { exit(1); }\n                         int main() { return 0; }\"\n        HAVE___ATTRIBUTE__)\n\ncheck_c_source_compiles(\"#include <stdlib.h>\n                        void foo(void) __attribute__((aligned(128)));\n                        void foo(void) { exit(1); }\n                        int main() { return 0; }\"\n        HAVE___ATTRIBUTE__ALIGNED_FN)\n\nset(CMAKE_EXTRA_INCLUDE_FILES \"malloc.h\")\ncheck_type_size(\"struct mallinfo\" STRUCT_MALLINFO LANGUAGE CXX)\ncheck_type_size(\"struct mallinfo2\" STRUCT_MALLINFO2 LANGUAGE CXX)\ncheck_function_exists(\"sbrk\" HAVE_SBRK) # for tcmalloc to get memory\ncheck_function_exists(\"geteuid\" HAVE_GETEUID) # for turning off services when run as root\ncheck_include_file(\"features.h\" HAVE_FEATURES_H) # for vdso_support.h, Where __GLIBC__ is defined\ncheck_include_file(\"malloc.h\" HAVE_MALLOC_H) # some systems define stuff there, others not\ncheck_include_file(\"glob.h\" HAVE_GLOB_H) # for heap-profile-table (cleaning up profiles)\ncheck_include_file(\"execinfo.h\" HAVE_EXECINFO_H) # for stacktrace\ncheck_include_file(\"sched.h\" HAVE_SCHED_H) # for being nice in our spinlock code\ncheck_include_file(\"sys/syscall.h\" HAVE_SYS_SYSCALL_H)\ncheck_include_file(\"fcntl.h\" HAVE_FCNTL_H) # for tcmalloc_unittest\ncheck_include_file(\"sys/cdefs.h\" HAVE_SYS_CDEFS_H) # Where glibc defines __THROW\n\ncheck_include_file(\"sys/ucontext.h\" HAVE_SYS_UCONTEXT_H)\ncheck_include_file(\"ucontext.h\" HAVE_UCONTEXT_H)\ncheck_include_file(\"cygwin/signal.h\" HAVE_CYGWIN_SIGNAL_H) # ucontext on cywgin\ncheck_include_file(\"asm/ptrace.h\" HAVE_ASM_PTRACE_H) # get ptrace macros, e.g. PT_NIP\n\ncheck_include_file(\"unistd.h\" HAVE_UNISTD_H)\n# We also need <ucontext.h>/<sys/ucontext.h>, but we get those from\n# AC_PC_FROM_UCONTEXT, below.\n\n# We override a lot of memory allocation routines, not all of which are\n# standard.  For those the system doesn't declare, we'll declare ourselves.\nset(CMAKE_REQUIRED_DEFINITIONS -D_XOPEN_SOURCE=600)\ncheck_symbol_exists(\"cfree\" \"stdlib.h;malloc.h\" HAVE_DECL_CFREE)\ncheck_symbol_exists(\"posix_memalign\" \"stdlib.h;malloc.h\" HAVE_DECL_POSIX_MEMALIGN)\ncheck_symbol_exists(\"memalign\" \"stdlib.h;malloc.h\" HAVE_DECL_MEMALIGN)\ncheck_symbol_exists(\"valloc\" \"stdlib.h;malloc.h\" HAVE_DECL_VALLOC)\ncheck_symbol_exists(\"pvalloc\" \"stdlib.h;malloc.h\" HAVE_DECL_PVALLOC)\nset(CMAKE_REQUIRED_DEFINITIONS)\n\nif(HAVE_STRUCT_MALLINFO)\n    set(HAVE_STRUCT_MALLINFO 1)\nelse()\n    set(HAVE_STRUCT_MALLINFO 0)\nendif()\n\nif(HAVE_STRUCT_MALLINFO2)\n    set(HAVE_STRUCT_MALLINFO2 1)\nelse()\n    set(HAVE_STRUCT_MALLINFO2 0)\nendif()\n\n# We hardcode HAVE_MMAP to 1. There are no interesting systems anymore\n# without functional mmap. And our windows (except mingw) builds\n# aren't using autoconf. So we keep HAVE_MMAP define, but only to\n# distingush windows and rest.\nif(NOT WIN32)\n  set(HAVE_MMAP 1)\nendif()\n\nif(gperftools_enable_libunwind)\n  check_include_file(\"libunwind.h\" HAVE_LIBUNWIND_H)\n  if(HAVE_LIBUNWIND_H)\n    find_library(libunwind_location NAMES unwind)\n    if(libunwind_location)\n      check_library_exists(\n        unwind backtrace ${libunwind_location} have_libunwind)\n    endif()\n    if(have_libunwind)\n      set(unwind_libs ${libunwind_location})\n      set(will_use_libunwind ON)\n      set(USE_LIBUNWIND 1)\n    endif()\n  endif()\nendif()\n\ncheck_c_compiler_flag(\"-fno-omit-frame-pointer -momit-leaf-frame-pointer\" have_omit_leaf_fp)\ncheck_c_source_compiles(\"\n  #if !(__i386__ || __x86_64__ || __riscv || __aarch64__)\n  #error unsupported arch\n  #endif\n  int main() { return 0; }\n  \"\n  use_omit_leaf_fp)\n\nif (use_omit_leaf_fp)\n  add_compile_options(-fno-omit-frame-pointer -momit-leaf-frame-pointer)\nendif()\n\noption(gperftools_dynamic_sized_delete_support\n       \"Try to build run-time switch for sized delete operator\"\n       OFF)\nif(gperftools_dynamic_sized_delete_support)\n  set(ENABLE_DYNAMIC_SIZED_DELETE 1)\nendif()\n\noption(gperftools_sized_delete \"Build sized delete operator\" OFF)\nif(gperftools_sized_delete)\n  set(ENABLE_SIZED_DELETE 1)\nendif()\n\nif(NOT MSVC)\n  set(CMAKE_REQUIRED_FLAGS -fsized-deallocation)\n  check_cxx_source_compiles(\"\n  #include <new>\n  int main() { (::operator delete)(0, 256); return 0; }\"\n          have_sized_deallocation)\n  set(CMAKE_REQUIRED_FLAGS)\nendif()\n\ncheck_cxx_source_compiles(\"\n  #include <unwind.h>\n  int main()\n  {\n#if __APPLE__ || __FreeBSD__\n#error OSX _Unwind_Backtrace recurses back to malloc\n#endif\n    &_Unwind_Backtrace;\n    return 0;\n  }\"\n  HAVE_UNWIND_BACKTRACE)\n\ncheck_cxx_source_compiles(\"\n#include <cxxabi.h>\nint main() {\n  &__cxxabiv1::__cxa_demangle;\n}\"\n  HAVE_CXA_DEMANGLE)\n\nif(enable_backtrace)\n  set(default_emergency_malloc ON)\nelse()\n  set(default_emergency_malloc OFF)\nendif()\n\nif(will_use_libunwind AND ARM)\n  set(default_emergency_malloc ON)\nendif()\n\noption(gperftools_emergency_malloc\n       \"Build emergency malloc\"\n       ${default_emergency_malloc})\n\ncheck_c_source_compiles(\n  \"int main() { return __builtin_expect(main != 0, 1); }\"\n  HAVE_BUILTIN_EXPECT)\n\ncheck_c_source_compiles(\"\n  #include <unistd.h>\n  int main()\n  {\n    char** env = __environ;\n    return 0;\n  }\"\n  HAVE___ENVIRON)\n\nif(enable_backtrace)\n  check_symbol_exists(\"backtrace\" \"execinfo.h\" HAVE_DECL_BACKTRACE)\n  check_function_exists(\"backtrace\" backtrace_exists)\n  if(NOT backtrace_exists)\n    set(CMAKE_REQUIRED_LIBRARIES execinfo)\n    check_function_exists(\"backtrace\" backtrace_exists)\n    set(CMAKE_REQUIRED_LIBRARIES)\n    if(backtrace_exists)\n      list(INSERT unwind_libs 0 execinfo)\n    endif()\n  endif()\nendif()\n\nfind_package(Threads REQUIRED)\nlink_libraries(Threads::Threads)\n\ncheck_variable_exists(\"program_invocation_name\" HAVE_PROGRAM_INVOCATION_NAME)\n\nif(MINGW)\n  check_symbol_exists(\"sleep\" \"unistd.h\" HAVE_DECL_SLEEP)\n  check_symbol_exists(\"nanosleep\" \"time.h\" HAVE_DECL_NANOSLEEP)\nendif()\n\nif(LINUX)\n  check_c_source_compiles(\"\n    #include <signal.h>\n    #include <time.h>\n    int main() { return SIGEV_THREAD_ID || CLOCK_THREAD_CPUTIME_ID; }\"\n    HAVE_LINUX_SIGEV_THREAD_ID)\nendif()\n\n# Disable large allocation report by default.\noption(gperftools_enable_large_alloc_report\n      \"Report very large allocations to stderr\"\n      OFF)\nset(ENABLE_LARGE_ALLOC_REPORT ${gperftools_enable_large_alloc_report})\n\n# Enable aggressive decommit by default\noption(gperftools_enable_aggressive_decommit_by_default\n      \"Enable aggressive decommit by default\"\n      OFF)\nset(ENABLE_AGGRESSIVE_DECOMMIT_BY_DEFAULT ${gperftools_enable_aggressive_decommit_by_default})\n\n\nconfigure_file(cmake/config.h.in ${CMAKE_CURRENT_BINARY_DIR}/config.h @ONLY)\nconfigure_file(cmake/tcmalloc.h.in\n               ${CMAKE_CURRENT_BINARY_DIR}/gperftools/tcmalloc.h\n               @ONLY)\n\nif(GPERFTOOLS_BUILD_CPU_PROFILER OR\n   GPERFTOOLS_BUILD_HEAP_PROFILER)\n  set(WITH_STACK_TRACE ON)\nendif()\n\ninclude_directories($<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/>)\n# This is so we can #include <gperftools/foo>\ninclude_directories($<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>)\n\nif(NOT WITH_STACK_TRACE)\n  add_compile_definitions(NO_TCMALLOC_SAMPLES)\nendif()\n\n# These are good warnings to turn on by default.\nif(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wwrite-strings -Woverloaded-virtual -Wno-sign-compare\")\nendif()\n\nif(have_sized_deallocation)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsized-deallocation\")\nendif()\n\noption(\n  gperftools_enable_frame_pointers\n  \"Compile with -fno-omit-frame-pointer (see INSTALL)\"\n  OFF)\n\nif(gperftools_enable_frame_pointers)\n  add_compile_options(-fno-omit-frame-pointer -DFORCED_FRAME_POINTERS)\nendif()\n\n# On windows when building static library, due to patching, we need to\n#  force \"core\" of tcmalloc to be linked in to activate patching etc. We\n#  achieve that by telling linker to assume __tcmalloc is not defined.\nset(TCMALLOC_FLAGS)\nif(MINGW)\n  list(APPEND TCMALLOC_FLAGS \"-Wl,-u__tcmalloc\")\nendif()\nif(MSVC)\n  list(APPEND TCMALLOC_FLAGS \"/INCLUDE:__tcmalloc\")\nendif()\n\nadd_library(common\n  STATIC\n  src/base/logging.cc\n  src/base/generic_writer.cc\n  src/base/sysinfo.cc\n  src/base/proc_maps_iterator.cc\n  src/base/dynamic_annotations.cc\n  src/base/spinlock.cc\n  src/base/spinlock_internal.cc)\n\nadd_library(low_level_alloc\n  STATIC\n  src/base/low_level_alloc.cc)\n\nif(BUILD_SHARED_LIBS)\n  set_property(TARGET common\n               PROPERTY POSITION_INDEPENDENT_CODE ON)\n  set_property(TARGET low_level_alloc\n               PROPERTY POSITION_INDEPENDENT_CODE ON)\nelse()\n  # windows needs this. Doesn't hurt others.\n  #\n  # TODO: make sure we do something with headers. If/when someone uses\n  #  statically built tcmalloc_minimal.lib downstream, they need to see\n  #  PERFTOOLS_DLL_DECL set to nothing as well.\n  add_compile_definitions(PERFTOOLS_DLL_DECL= )\nendif()\n\nset(SYSTEM_ALLOC_CC src/system-alloc.cc)\nset(TCMALLOC_CC src/tcmalloc.cc)\n\nif(MINGW OR MSVC)\ntarget_sources(common PRIVATE\n  src/windows/port.cc\n  src/windows/ia32_modrm_map.cc\n  src/windows/ia32_opcode_map.cc\n  src/windows/mini_disassembler.cc\n  src/windows/preamble_patcher.cc\n  src/windows/preamble_patcher_with_stub.cc)\n\nset(SYSTEM_ALLOC_CC src/windows/system-alloc.cc)\nset(TCMALLOC_CC src/windows/patch_functions.cc)\n\n# patch_function uses -lpsapi and spinlock bits use -synchronization\n# and -lshlwapi\nlink_libraries(psapi synchronization shlwapi)\n\nendif()\n\nif(BUILD_TESTING)\n  add_library(gtest STATIC vendor/googletest/googletest/src/gtest_main.cc\n    vendor/googletest/googletest/src/gtest-assertion-result.cc\n    vendor/googletest/googletest/src/gtest-death-test.cc\n    vendor/googletest/googletest/src/gtest-filepath.cc\n    vendor/googletest/googletest/src/gtest-matchers.cc\n    vendor/googletest/googletest/src/gtest-port.cc\n    vendor/googletest/googletest/src/gtest-printers.cc\n    vendor/googletest/googletest/src/gtest-test-part.cc\n    vendor/googletest/googletest/src/gtest-typed-test.cc\n    vendor/googletest/googletest/src/gtest.cc)\n  target_include_directories(gtest PRIVATE\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/vendor/googletest/googletest>\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/vendor/googletest/googletest/include>)\n\n  target_include_directories(gtest INTERFACE\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/vendor/googletest/googletest/include>)\n\n  add_executable(low_level_alloc_unittest\n          src/tests/low_level_alloc_unittest.cc)\n  target_compile_definitions(low_level_alloc_unittest PRIVATE NO_TCMALLOC_SAMPLES PERFTOOLS_DLL_DECL= )\n  target_link_libraries(low_level_alloc_unittest low_level_alloc common gtest)\n  add_test(low_level_alloc_unittest low_level_alloc_unittest)\nendif()\n\n### ------- stack trace\n\nif(WITH_STACK_TRACE)\n  ### Making the library\n  add_library(stacktrace STATIC\n    src/stacktrace.cc\n    src/base/elf_mem_image.cc\n    src/base/vdso_support.cc)\n  target_link_libraries(stacktrace PRIVATE ${unwind_libs})\n  if(BUILD_SHARED_LIBS)\n    set_property(TARGET stacktrace\n                 PROPERTY POSITION_INDEPENDENT_CODE ON)\n  endif()\n\n  if(BUILD_TESTING)\n    add_executable(stacktrace_unittest\n      src/tests/stacktrace_unittest.cc\n      src/stacktrace.cc\n      src/base/elf_mem_image.cc\n      src/base/vdso_support.cc)\n    target_link_libraries(stacktrace_unittest ${unwind_libs} common gtest)\n    target_compile_definitions(stacktrace_unittest PRIVATE STACKTRACE_IS_TESTED PERFTOOLS_DLL_DECL= )\n    add_test(stacktrace_unittest stacktrace_unittest)\n\n    add_executable(check_address_test src/tests/check_address_test.cc)\n    target_link_libraries(check_address_test common gtest)\n    add_test(check_address_test check_address_test)\n  endif()\n\nendif()\n\n### ------- tcmalloc_minimal (thread-caching malloc)\n\n### Making the library\n\nset(MINIMAL_MALLOC_SRC\n  src/common.cc\n  src/internal_logging.cc\n  ${SYSTEM_ALLOC_CC}\n  src/memfs_malloc.cc\n  src/safe_strerror.cc\n  src/central_freelist.cc\n  src/page_heap.cc\n  src/sampler.cc\n  src/span.cc\n  src/stack_trace_table.cc\n  src/static_vars.cc\n  src/thread_cache.cc\n  src/thread_cache_ptr.cc\n  src/malloc_hook.cc\n  src/malloc_extension.cc)\n\nadd_library(tcmalloc_minimal ${TCMALLOC_CC} ${MINIMAL_MALLOC_SRC})\ntarget_compile_definitions(tcmalloc_minimal PRIVATE NO_TCMALLOC_SAMPLES)\ntarget_link_options(tcmalloc_minimal INTERFACE ${TCMALLOC_FLAGS})\ntarget_link_libraries(tcmalloc_minimal PRIVATE common)\n\nif(BUILD_TESTING)\n  add_executable(tcmalloc_minimal_unittest\n    src/tests/tcmalloc_unittest.cc\n    src/tests/testutil.cc)\n  target_link_libraries(tcmalloc_minimal_unittest tcmalloc_minimal gtest)\n  add_test(tcmalloc_minimal_unittest tcmalloc_minimal_unittest)\n\n  add_executable(tcmalloc_minimal_large_unittest\n          src/tests/tcmalloc_large_unittest.cc\n          src/tests/testutil.cc)\n  target_link_libraries(tcmalloc_minimal_large_unittest tcmalloc_minimal)\n  add_test(tcmalloc_minimal_large_unittest tcmalloc_minimal_large_unittest)\n\n  add_executable(tcmalloc_minimal_large_heap_fragmentation_unittest\n          src/tests/large_heap_fragmentation_unittest.cc)\n  target_link_libraries(\n          tcmalloc_minimal_large_heap_fragmentation_unittest tcmalloc_minimal gtest)\n  add_test(tcmalloc_minimal_large_heap_fragmentation_unittest tcmalloc_minimal_large_heap_fragmentation_unittest)\n\n  add_executable(addressmap_unittest\n          src/tests/addressmap_unittest.cc)\n  target_link_libraries(addressmap_unittest common gtest)\n  add_test(addressmap_unittest addressmap_unittest)\n\n  add_executable(system_alloc_unittest src/tests/system-alloc_unittest.cc)\n  target_link_libraries(system_alloc_unittest tcmalloc_minimal gtest)\n  add_test(system_alloc_unittest system_alloc_unittest)\n\n  if(NOT MINGW AND NOT MSVC)\n    add_executable(unique_path_unittest src/tests/unique_path_unittest.cc)\n    target_link_libraries(unique_path_unittest common gtest)\n    add_test(unique_path_unittest unique_path_unittest)\n  endif()\n\n  add_executable(packed_cache_test src/tests/packed-cache_test.cc src/internal_logging.cc)\n  target_compile_definitions(packed_cache_test PRIVATE PERFTOOLS_DLL_DECL= )\n  target_link_libraries(packed_cache_test common gtest)\n  add_test(packed_cache_test packed_cache_test)\n\n  add_executable(frag_unittest src/tests/frag_unittest.cc)\n  target_link_libraries(frag_unittest tcmalloc_minimal gtest)\n  add_test(frag_unittest frag_unittest)\n\n  add_executable(markidle_unittest\n          src/tests/markidle_unittest.cc\n          src/tests/testutil.cc)\n  target_link_libraries(markidle_unittest tcmalloc_minimal gtest)\n  add_test(markidle_unittest markidle_unittest)\n\n  add_executable(current_allocated_bytes_test\n          src/tests/current_allocated_bytes_test.cc)\n  target_link_libraries(current_allocated_bytes_test tcmalloc_minimal gtest)\n  add_test(current_allocated_bytes_test current_allocated_bytes_test)\n\n  add_executable(malloc_hook_test\n          src/tests/malloc_hook_test.cc\n          src/malloc_hook.cc\n          src/tests/testutil.cc)\n  target_compile_definitions(malloc_hook_test PRIVATE NO_TCMALLOC_SAMPLES PERFTOOLS_DLL_DECL= )\n  target_link_libraries(malloc_hook_test common gtest)\n  add_test(malloc_hook_test malloc_hook_test)\n\n  add_executable(malloc_extension_test src/tests/malloc_extension_test.cc)\n  target_link_libraries(malloc_extension_test tcmalloc_minimal gtest)\n  add_test(malloc_extension_test malloc_extension_test)\n\n  add_executable(malloc_extension_c_test src/tests/malloc_extension_c_test.cc)\n  target_link_libraries(malloc_extension_c_test tcmalloc_minimal gtest)\n  add_test(malloc_extension_c_test malloc_extension_c_test)\n\n  if(NOT MINGW AND NOT MSVC AND NOT APPLE)\n    add_executable(memalign_unittest src/tests/memalign_unittest.cc src/tests/testutil.cc)\n    target_link_libraries(memalign_unittest tcmalloc_minimal gtest)\n    add_test(memalign_unittest memalign_unittest)\n  endif()\n\n  # page heap test is somewhat special it compiles and links entirety\n  # of tcmalloc statically. We'll eventually make it right.\n  add_executable(page_heap_test src/tests/page_heap_test.cc ${TCMALLOC_CC} ${MINIMAL_MALLOC_SRC})\n  target_compile_definitions(page_heap_test PRIVATE NO_TCMALLOC_SAMPLES PERFTOOLS_DLL_DECL= )\n  target_link_libraries(page_heap_test common gtest)\n  add_test(page_heap_test page_heap_test)\n\n  add_executable(pagemap_unittest src/tests/pagemap_unittest.cc src/internal_logging.cc)\n  target_compile_definitions(pagemap_unittest PRIVATE PERFTOOLS_DLL_DECL= )\n  target_link_libraries(pagemap_unittest common gtest)\n  add_test(pagemap_unittest pagemap_unittest)\n\n  add_executable(safe_strerror_test src/tests/safe_strerror_test.cc src/safe_strerror.cc)\n  target_link_libraries(safe_strerror_test common gtest)\n  add_test(safe_strerror_test safe_strerror_test)\n\n  add_executable(cleanup_test src/tests/cleanup_test.cc)\n  target_link_libraries(cleanup_test gtest)\n  add_test(cleanup_test cleanup_test)\n\n  add_executable(function_ref_test src/tests/function_ref_test.cc)\n  target_link_libraries(function_ref_test gtest)\n  add_test(function_ref_test function_ref_test)\n\n  add_executable(trivialre_test benchmark/trivialre_test.cc)\n  target_link_libraries(trivialre_test gtest)\n  add_test(trivialre_test trivialre_test)\n\n  add_executable(generic_writer_test src/tests/generic_writer_test.cc)\n  target_link_libraries(generic_writer_test common gtest)\n  add_test(generic_writer_test generic_writer_test)\n\n  add_executable(proc_maps_iterator_test src/tests/proc_maps_iterator_test.cc)\n  target_link_libraries(proc_maps_iterator_test common gtest)\n  add_test(proc_maps_iterator_test proc_maps_iterator_test)\n\n  add_executable(realloc_unittest src/tests/realloc_unittest.cc)\n  target_link_libraries(realloc_unittest tcmalloc_minimal gtest)\n  add_test(realloc_unittest realloc_unittest)\n\n  add_executable(stack_trace_table_test\n    src/tests/stack_trace_table_test.cc\n    src/stack_trace_table.cc\n    src/internal_logging.cc)\n  target_compile_definitions(stack_trace_table_test PRIVATE STACK_TRACE_TABLE_IS_TESTED PERFTOOLS_DLL_DECL= )\n  target_link_libraries(stack_trace_table_test common gtest)\n  add_test(stack_trace_table_test stack_trace_table_test)\n\n  add_executable(thread_dealloc_unittest\n          src/tests/thread_dealloc_unittest.cc\n          src/tests/testutil.cc)\n  target_link_libraries(thread_dealloc_unittest tcmalloc_minimal)\n  add_test(thread_dealloc_unittest thread_dealloc_unittest)\n\n  add_executable(min_per_thread_cache_size_test src/tests/min_per_thread_cache_size_test.cc)\n  target_link_libraries(min_per_thread_cache_size_test tcmalloc_minimal gtest)\n  add_test(min_per_thread_cache_size_test min_per_thread_cache_size_test)\nendif()\n\n### ------- tcmalloc_minimal_debug (thread-caching malloc with debugallocation)\n\nif(GPERFTOOLS_BUILD_DEBUGALLOC)\n  add_library(libbacktrace\n    STATIC\n    vendor/libbacktrace-integration/file-format.c\n    vendor/libbacktrace/dwarf.c\n    vendor/libbacktrace/fileline.c\n    vendor/libbacktrace/posix.c\n    vendor/libbacktrace/sort.c\n    vendor/libbacktrace/state.c\n    vendor/libbacktrace/read.c)\n  target_include_directories(libbacktrace BEFORE PRIVATE\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/vendor/libbacktrace-integration>\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/vendor/libbacktrace>)\n  add_library(symbolize\n    STATIC\n    src/symbolize.cc\n    vendor/libbacktrace-integration/backtrace-alloc.cc)\n  target_link_libraries(symbolize PRIVATE libbacktrace)\n  if(BUILD_SHARED_LIBS)\n    set_property(TARGET libbacktrace PROPERTY POSITION_INDEPENDENT_CODE ON)\n    set_property(TARGET symbolize PROPERTY POSITION_INDEPENDENT_CODE ON)\n  endif()\n\n  add_library(tcmalloc_minimal_debug src/debugallocation.cc ${MINIMAL_MALLOC_SRC})\n  target_compile_definitions(tcmalloc_minimal_debug PRIVATE NO_TCMALLOC_SAMPLES)\n  target_link_libraries(tcmalloc_minimal_debug PRIVATE symbolize low_level_alloc common)\n\n  ### Unittests\n\n  if(BUILD_TESTING)\n    add_executable(tcmalloc_minimal_debug_unittest src/tests/tcmalloc_unittest.cc src/tests/testutil.cc)\n    target_link_libraries(tcmalloc_minimal_debug_unittest tcmalloc_minimal_debug gtest)\n    add_test(tcmalloc_minimal_debug_unittest tcmalloc_minimal_debug_unittest)\n\n    add_executable(malloc_extension_debug_test src/tests/malloc_extension_test.cc)\n    target_link_libraries(malloc_extension_debug_test tcmalloc_minimal_debug gtest)\n    add_test(malloc_extension_debug_test malloc_extension_debug_test)\n\n    if(NOT MINGW AND NOT APPLE)\n      add_executable(memalign_debug_unittest src/tests/memalign_unittest.cc src/tests/testutil.cc)\n      target_link_libraries(memalign_debug_unittest\n              tcmalloc_minimal_debug gtest)\n      add_test(memalign_debug_unittest memalign_debug_unittest)\n    endif()\n\n    add_executable(realloc_debug_unittest src/tests/realloc_unittest.cc)\n    target_link_libraries(realloc_debug_unittest PUBLIC tcmalloc_minimal_debug gtest)\n    add_test(realloc_debug_unittest realloc_debug_unittest)\n\n    if(WITH_STACK_TRACE)\n      add_executable(debugallocation_test src/tests/debugallocation_test.cc)\n      target_link_libraries(debugallocation_test tcmalloc_debug gtest)\n      add_test(debugallocation_test debugallocation_test)\n    endif()\n  endif()\nendif()\n\nif(NOT MINGW AND NOT MSVC)\n  if(gperftools_build_benchmark)\n    add_library(run_benchmark benchmark/run_benchmark.cc)\n\n    add_executable(malloc_bench benchmark/malloc_bench.cc)\n    target_link_libraries(malloc_bench tcmalloc_minimal run_benchmark)\n\n    if(GPERFTOOLS_BUILD_HEAP_PROFILER)\n      add_executable(malloc_bench_shared_full benchmark/malloc_bench.cc)\n      target_link_libraries(malloc_bench_shared_full run_benchmark tcmalloc)\n    endif()\n\n    add_executable(binary_trees benchmark/binary_trees.cc)\n    target_link_libraries(binary_trees tcmalloc_minimal)\n    add_executable(binary_trees_shared benchmark/binary_trees.cc)\n    target_link_libraries(binary_trees_shared tcmalloc_minimal)\n  endif()\nendif()\n\n### ------- tcmalloc (thread-caching malloc + heap profiler)\n\nif(GPERFTOOLS_BUILD_HEAP_PROFILER)\n  if(gperftools_emergency_malloc)\n    set(EMERGENCY_MALLOC_CC src/emergency_malloc.cc)\n    set(EMERGENCY_MALLOC_DEFINE ENABLE_EMERGENCY_MALLOC)\n  else()\n    set(EMERGENCY_MALLOC_CC )\n  endif()\n\n  ### Making the library\n\n  set(FULL_MALLOC_SRC\n    ${MINIMAL_MALLOC_SRC}\n    src/heap-profile-table.cc\n    src/heap-profiler.cc\n    ${EMERGENCY_MALLOC_CC}\n    src/malloc_backtrace.cc\n    src/heap-checker-stub.cc)\n  add_library(tcmalloc ${TCMALLOC_CC} ${FULL_MALLOC_SRC})\n  target_compile_definitions(tcmalloc PRIVATE ${EMERGENCY_MALLOC_DEFINE})\n  target_link_libraries(tcmalloc PRIVATE stacktrace low_level_alloc common)\n  target_link_options(tcmalloc INTERFACE ${TCMALLOC_FLAGS})\n\n  ### Unittests\n  if(BUILD_TESTING)\n    add_executable(tcmalloc_unittest src/tests/tcmalloc_unittest.cc src/tests/testutil.cc)\n    target_link_libraries(tcmalloc_unittest tcmalloc gtest)\n    add_test(tcmalloc_unittest tcmalloc_unittest)\n\n    add_executable(tcmalloc_large_unittest src/tests/tcmalloc_large_unittest.cc)\n    target_link_libraries(tcmalloc_large_unittest tcmalloc)\n    add_test(tcmalloc_large_unittest tcmalloc_large_unittest)\n\n    add_executable(tcmalloc_large_heap_fragmentation_unittest src/tests/large_heap_fragmentation_unittest.cc)\n    target_link_libraries(tcmalloc_large_heap_fragmentation_unittest tcmalloc gtest)\n    add_test(tcmalloc_large_heap_fragmentation_unittest tcmalloc_large_heap_fragmentation_unittest)\n\n    list(APPEND TESTS_ENVIRONMENT PPROF_PATH=${CMAKE_CURRENT_SOURCE_DIR}/src/pprof)\n\n    add_executable(heap_checker_stub_test src/tests/heap-checker-stub-test.cc)\n    target_link_libraries(heap_checker_stub_test tcmalloc)\n    add_test(heap_checker_stub_test heap_checker_stub_test)\n\n    add_executable(sampler_test src/tests/sampler_test.cc\n      src/sampler.cc\n      src/base/spinlock.cc\n      src/base/spinlock_internal.cc\n      src/base/sysinfo.cc\n      src/base/logging.cc)\n    target_link_libraries(sampler_test gtest)\n    add_test(sampler_test sampler_test)\n\n    # These unittests often need to run binaries.  They're in the current dir\n    list(APPEND TESTS_ENVIRONMENT BINDIR=. TMPDIR=/tmp/perftools)\n    set(sampling_test_SOURCES src/tests/sampling_test.cc)\n    add_executable(sampling_test src/tests/sampling_test.cc)\n    target_compile_definitions(sampling_test PRIVATE PPROF_PATH=${CMAKE_CURRENT_SOURCE_DIR}/src/pprof)\n    target_link_libraries(sampling_test tcmalloc)\n    add_test(sampling_test sampling_test)\n\n    if(GPERFTOOLS_BUILD_HEAP_PROFILER)\n      add_executable(heap-profiler_unittest src/tests/heap-profiler_unittest.cc)\n      target_link_libraries(heap-profiler_unittest tcmalloc)\n      add_test(NAME heap-profiler_unittest.sh\n              COMMAND \"${CMAKE_CURRENT_SOURCE_DIR}/src/tests/heap-profiler_unittest.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/heap-profiler_unittest\")\n    endif()\n  endif()\n\nendif()\n\n### ------- tcmalloc with debugallocation\nif(GPERFTOOLS_BUILD_DEBUGALLOC)\n  if(GPERFTOOLS_BUILD_HEAP_PROFILER)\n    add_library(tcmalloc_debug src/debugallocation.cc ${FULL_MALLOC_SRC})\n    target_compile_definitions(tcmalloc_debug PRIVATE ${EMERGENCY_MALLOC_DEFINE})\n    target_link_libraries(tcmalloc_debug PRIVATE symbolize low_level_alloc stacktrace common)\n\n    ### Unittests\n    if(BUILD_TESTING)\n      add_executable(tcmalloc_debug_unittest src/tests/tcmalloc_unittest.cc src/tests/testutil.cc)\n      target_link_libraries(tcmalloc_debug_unittest tcmalloc_debug gtest)\n      add_test(tcmalloc_debug_unittest tcmalloc_debug_unittest)\n\n      add_executable(sampling_debug_test src/tests/sampling_test.cc)\n          target_compile_definitions(sampling_debug_test PRIVATE PPROF_PATH=${CMAKE_CURRENT_SOURCE_DIR}/src/pprof)\n      target_link_libraries(sampling_debug_test tcmalloc_debug)\n      add_test(sampling_debug_test sampling_debug_test)\n\n      if(GPERFTOOLS_BUILD_HEAP_PROFILER)\n        add_executable(heap-profiler_debug_unittest src/tests/heap-profiler_unittest.cc)\n        target_link_libraries(heap-profiler_debug_unittest tcmalloc_debug)\n        add_test(heap-profiler_debug_unittest.sh \"${CMAKE_CURRENT_SOURCE_DIR}/src/tests/heap-profiler_unittest.sh\" \"${CMAKE_CURRENT_BINARY_DIR}/heap-profiler_debug_unittest\")\n      endif()\n    endif()\n  endif()\nendif()\n\n### ------- CPU profiler\nif(GPERFTOOLS_BUILD_CPU_PROFILER)\n\nadd_library(profiler\n    src/profiler.cc\n    src/profile-handler.cc\n    src/profiledata.cc)\n  target_link_libraries(profiler PRIVATE stacktrace common)\n\n  if(BUILD_TESTING)\n    add_executable(getpc_test src/tests/getpc_test.cc)\n    add_test(getpc_test getpc_test)\n\n    add_executable(profiledata_unittest\n      src/tests/profiledata_unittest.cc src/profiledata.cc)\n    target_link_libraries(profiledata_unittest stacktrace common gtest)\n    add_test(profiledata_unittest profiledata_unittest)\n\n    add_executable(profile_handler_unittest\n      src/tests/profile-handler_unittest.cc src/profile-handler.cc)\n    target_link_libraries(profile_handler_unittest stacktrace common gtest)\n    add_test(profile_handler_unittest profile_handler_unittest)\n\n    add_test(NAME profiler_unittest.sh\n            COMMAND \"${CMAKE_CURRENT_SOURCE_DIR}/src/tests/profiler_unittest.sh\")\n    set(PROFILER_UNITTEST_SRCS src/tests/profiler_unittest.cc\n            src/tests/testutil.h src/tests/testutil.cc)\n    # TODO: get rid of the {1,2,3,4} multiplicity\n    add_executable(profiler1_unittest ${PROFILER_UNITTEST_SRCS})\n    target_compile_definitions(profiler1_unittest PRIVATE NO_THREADS)\n    target_link_libraries(profiler1_unittest PRIVATE profiler)\n    add_executable(profiler2_unittest ${PROFILER_UNITTEST_SRCS})\n    target_compile_definitions(profiler2_unittest PRIVATE NO_THREADS)\n    target_link_libraries(profiler2_unittest PRIVATE profiler)\n    add_executable(profiler3_unittest ${PROFILER_UNITTEST_SRCS})\n    target_link_libraries(profiler3_unittest PRIVATE profiler)\n    add_executable(profiler4_unittest ${PROFILER_UNITTEST_SRCS})\n    target_link_libraries(profiler4_unittest PRIVATE stacktrace profiler)\n  endif()\nendif()\n\nif(BUILD_TESTING)\n  get_directory_property(tests TESTS)\n  message(\"TESTS_ENVIRONMENT:${TESTS_ENVIRONMENT}\")\n  if(TESTS_ENVIRONMENT)\n    foreach(test IN LISTS tests)\n      set_tests_properties(${test} PROPERTIES ENVIRONMENT \"${TESTS_ENVIRONMENT}\")\n    endforeach()\n  endif()\nendif()\n\nif(MSVC)\n    add_subdirectory(src/windows)\nendif()\n\nmessage(WARNING \"note: gperftools' cmake support is incomplete and is best-effort only\")\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.4443359375,
          "content": "Copyright (c) 2005, Google Inc.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n    * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "ChangeLog.old",
          "type": "blob",
          "size": 33.669921875,
          "content": "Fri Feb 03 15:40:45 2012  Google Inc. <google-perftools@googlegroups.com>\n\n\t* gperftools: version 2.0\n\t* Renamed the project from google-perftools to gperftools (csilvers)\n\t* Renamed the .deb/.rpm packagse from google-perftools to gperftools too\n\t* Renamed include directory from google/ to gperftools/ (csilvers)\n\t* Changed the 'official' perftools email in setup.py/etc\n\t* Renamed google-perftools.sln to gperftools.sln\n\t* PORTING: Removed bash-isms & grep -q in heap-checker-death_unittest.sh\n\t* Changed copyright text to reflect Google's relinquished ownership\n\nTue Jan 31 10:43:50 2012    Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 1.10 release\n\t* PORTING: Support for patching assembly on win x86_64! (scott.fr...)\n\t* PORTING: Work around atexit-execution-order bug on freebsd (csilvers)\n\t* PORTING: Patch _calloc_crt for windows (roger orr)\n\t* PORTING: Add C++11 compatibility method for stl allocator (jdennett)\n\t* PORTING: use MADV_FREE, not MADV_DONTNEED, on freebsd (csilvers)\n\t* PORTING: Don't use SYS_open when not supported on solaris (csilvers)\n\t* PORTING: Do not assume uname() returns 0 on success (csilvers)\n\t* LSS: Improved ARM support in linux-syscall-support (dougkwan)\n\t* LSS: Get rid of unused syscalls in linux-syscall-support (csilvers)\n\t* LSS: Fix broken mmap wrapping for ppc (markus)\n\t* LSS: Emit .cfi_adjust_cfa_offset when appropriate (ppluzhnikov)\n\t* LSS: Be more accurate in register use in __asm__ (markus)\n\t* LSS: Fix __asm__ calls to compile under clang (chandlerc)\n\t* LSS: Fix ARM inline assembly bug around r7 and swi (lcwu)\n\t* No longer log when an allocator fails (csilvers)\n\t* void* -> const void* for MallocExtension methods (llib)\n\t* Improve HEAP_PROFILE_MMAP and fix bugs with it (dmikurube)\n\t* Replace int-based abs with more correct fabs in a test (pmurin)\n\nThu Dec 22 16:22:45 2011    Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 1.9 release\n\t* Lightweight check for double-frees (blount)\n\t* BUGFIX: Fix pprof to exit properly if run with no args (dagitses)\n\t* Suggest ASan as a way to diagnose buggy code (ppluzhnikov)\n\t* Get rid of unused CACHELINE_SIZE (csilvers)\n\t* Replace atexit() calls with global dtors; helps freebsd (csilvers)\n\t* Disable heap-checker under AddressSanitizer (kcc)\n\t* Fix bug in powerpc stacktracing (ppluzhnikov)\n\t* PERF: Use exponential backoff waiting for spinlocks (m3b)\n\t* Fix 64-bit nm on 32-bit binaries in pprof (csilvers)\n\t* Add ProfileHandlerDisallowForever (rsc)\n\t* BUGFIX: Shell escape when forking in pprof (csilvers)\n\t* No longer combine overloaded functions in pprof (csilvers)\n\t* Fix address-normalizing bug in pprof (csilvers)\n\t* More consistently call abort() instead of exit() on failure (csilvers)\n\t* Allow NoGlobalLeaks to be safely called more than once (csilvers)\n\t* PORTING/BUGFIX: Fix ARM cycleclock to use volatile asm (dougkwan)\n\t* PORTING: 64-bit atomic ops for ARMv7 (dougkwan)\n\t* PORTING: Implement stacktrace for ARM (dougkwan)\n\t* PORTING: Fix malloc_hook_mmap_linux for ARM (dougkwan)\n\t* PORTING: Update linux_syscall_support.h for ARM/etc (evannier, sanek)\n\t* PORTING: Fix freebsd to work on x86_64 (chapp...@gmail.com)\n\t* PORTING: Added additional SYS_mmap fixes for FreeBSD (chappedm)\n\t* PORTING: Allow us to compile on OS X 10.6 and run on 10.5 (raltherr)\n\t* PORTING: Check for mingw compilers that *do* define timespec\n\t* PORTING: Add \"support\" for MIPS cycletimer\n\t* PORTING: Fix fallback cycle-timer to work with Now (dougkwan)\n\t* PERF: Move stack trace collecting out of the mutex (taylorc)\n\t* PERF: Get the deallocation stack trace outside the mutex (sean)\n\t* Make PageHeap dynamically allocated for leak checks (maxim)\n\t* BUGFIX: Fix probing of nm -f behavior in pprof (dpeng)\n\t* BUGFIX: Fix a race with the CentralFreeList lock before main (sanjay)\n\t* Support /pprof/censusprofile url arguments (rajatjain)\n\t* Change IgnoreObject to return its argument (nlewycky)\n\t* Update malloc-hook files to support more CPUs\n\t* BUGFIX: write our own strstr to avoid libc problems (csilvers)\n\t* Use simple callgrind compression facility in pprof\n\t* Print an error message when we can't run pprof to symbolize (csilvers)\n\t* Die in configure when g++ is't installed (csilvers)\n\t* DOC: Beef up the documentation a bit about using libunwind (csilvers)\n\nFri Aug 26 13:29:25 2011    Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 1.8.3 release\n\t* Added back the 'pthreads unsafe early' #define, needed for FreeBSD\n\nThu Aug 11 15:01:47 2011    Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 1.8.2 release\n\t* Fixed calculation of patchlevel, 'make check' should all pass again\n\nTue Jul 26 20:57:51 2011    Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 1.8.1 release\n\t* Added an #include to fix compile breakage on latest gcc's\n\t* Removed an extra , in the configure.ac script\n\nFri Jul 15 16:10:51 2011    Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 1.8 release\n\t* PORTING: (Disabled) support for patching mmap on freebsd (chapp...)\n\t* PORTING: Support volatile __malloc_hook for glibc 2.14 (csilvers)\n\t* PORTING: Use _asm rdtsc and __rdtsc to get cycleclock in windows (koda)\n\t* PORTING: Fix fd vs. HANDLE compiler error on cygwin (csilvers)\n\t* PORTING: Do not test memalign or double-linking on OS X (csilvers)\n\t* PORTING: Actually enable TLS on windows (jontra)\n\t* PORTING: Some work to compile under Native Client (krasin)\n\t* PORTING: deal with pthread_once w/o -pthread on freebsd (csilvers)\n\t* Rearrange libc-overriding to make it easier to port (csilvers)\n\t* Display source locations in pprof disassembly (sanjay)\n\t* BUGFIX: Actually initialize allocator name (mec)\n\t* BUGFIX: Keep track of 'overhead' bytes in malloc reporting (csilvers)\n\t* Allow ignoring one object twice in the leak checker (glider)\n\t* BUGFIX: top10 in pprof should print 10 lines, not 11 (rsc)\n\t* Refactor vdso source files (tipp)\n\t* Some documentation cleanups\n\t* Document MAX_TOTAL_THREAD_CACHE_SIZE <= 1Gb (nsethi)\n\t* Add MallocExtension::GetOwnership(ptr) (csilvers)\n\t* BUGFIX: We were leaving out a needed $(top_srcdir) in the Makefile\n\t* PORTING: Support getting argv0 on OS X\n\t* Add 'weblist' command to pprof: like 'list' but html (sanjay)\n\t* Improve source listing in pprof (sanjay)\n\t* Cap cache sizes to reduce fragmentation (ruemmler)\n\t* Improve performance by capping or increasing sizes (ruemmler)\n\t* Add M{,un}mapReplacmenet hooks into MallocHook (ribrdb)\n\t* Refactored system allocator logic (gangren)\n\t* Include cleanups (csilvers)\n\t* Add TCMALLOC_SMALL_BUT_SLOW support (ruemmler)\n\t* Clarify that tcmalloc stats are MiB (robinson)\n\t* Remove support for non-tcmalloc debugallocation (blount)\n\t* Add a new test: malloc_hook_test (csilvers)\n\t* Change the configure script to be more crosstool-friendly (mcgrathr)\n\t* PORTING: leading-underscore changes to support win64 (csilvers)\n\t* Improve debugallocation tc_malloc_size (csilvers)\n\t* Extend atomicops.h and cyceclock to use ARM V6+ optimized code (sanek)\n\t* Change malloc-hook to use a list-like structure (llib)\n\t* Add flag to use MAP_PRIVATE in memfs_malloc (gangren)\n\t* Windows support for pprof: nul and /usr/bin/file (csilvers)\n\t* TESTING: add test on strdup to tcmalloc_test (csilvers)\n\t* Augment heap-checker to deal with no-inode maps (csilvers)\n\t* Count .dll/.dylib as shared libs in heap-checker (csilvers)\n\t* Disable sys_futex for arm; it's not always reliable (sanek)\n\t* PORTING: change lots of windows/port.h macros to functions\n\t* BUGFIX: Generate correct version# in tcmalloc.h on windows (csilvers)\n\t* PORTING: Some casting to make solaris happier about types (csilvers)\n\t* TESTING: Disable debugallocation_test in 'minimal' mode (csilvers)\n\t* Rewrite debugallocation to be more modular (csilvers)\n\t* Don't try to run the heap-checker under valgrind (ppluzhnikov)\n\t* BUGFIX: Make focused stat %'s relative, not absolute (sanjay)\n\t* BUGFIX: Don't use '//' comments in a C file (csilvers)\n\t* Quiet new-gcc compiler warnings via -Wno-unused-result, etc (csilvers)\n\nFri Feb 04 15:54:31 2011    Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 1.7 release\n\t* Reduce page map key size under x86_64 by 4.4MB (rus)\n\t* Remove a flaky malloc-extension test (fdabek)\n\t* Improve the performance of PageHeap::New (ond..., csilvers)\n\t* Improve sampling_test with no-inline additions/etc (fdabek)\n\t* 16-byte align debug allocs (jyasskin)\n\t* Change FillProcSelfMaps to detect out-of-buffer-space (csilvers)\n\t* Document the need for sampling to use GetHeapSample (csilvers)\n\t* Try to read TSC frequency from tsc_freq_khs (adurbin)\n\t* Do better at figuring out if tests are running under gdb (ppluzhnikov)\n\t* Improve spinlock contention performance (ruemmler)\n\t* Better internal-function list for pprof's /contention (ruemmler)\n\t* Speed up GoogleOnce (m3b)\n\t* Limit number of incoming/outgoing edges in pprof (sanjay)\n\t* Add pprof --evince to go along with --gv (csilvers)\n\t* Document the various ways to get heap-profiling information (csilvers)\n\t* Separate out synchronization profiling routines (ruemmler)\n\t* Improve malloc-stats output to be more understandable (csilvers)\n\t* Add support for census profiler in pporf (nabeelmian)\n\t* Document how pprof's /symbol must support GET requests (csilvers)\n\t* Improve acx_pthread.m4 (ssuomi, liujisi)\n\t* Speed up pprof's ExtractSymbols (csilvers)\n\t* Ignore some known-leaky (java) libraries in the heap checker (davidyu)\n\t* Make kHideMask use all 64 bits in tests (ppluzhnikov)\n\t* Clean up pprof input-file handling (csilvers)\n\t* BUGFIX: Don't crash if __environ is NULL (csilvers)\n\t* BUGFIX: Fix totally broken debugallocation tests (csilvers)\n\t* BUGFIX: Fix up fake_VDSO handling for unittest (ppluzhnikov)\n\t* BUGFIX: Suppress all large allocs when report threshold is 0 (lexie)\n\t* BUGFIX: mmap2 on i386 takes an off_t, not off64_t (csilvers)\n\t* PORTING: Add missing PERFTOOLS_DLL_DECL (csilvers)\n\t* PORTING: Add stddef.h to make newer gcc's happy (csilvers)\n\t* PORTING: Document some tricks for working under OS X (csilvers)\n\t* PORTING: Don't try to check valgrind for windows (csilvers)\n\t* PORTING: Make array-size a var to compile under clang (chandlerc)\n\t* PORTING: No longer hook _aligned_malloc and _aligned_free (csilvers)\n\t* PORTING: Quiet some gcc warnings (csilvers)\n\t* PORTING: Replace %PRIxPTR with %p to be more portable (csilvers)\n\t* PORTING: Support systems that capitalize /proc weirdly (sanek)\n\t* PORTING: Treat arm3 the same as arm5t in cycletimer (csilvers)\n\t* PORTING: Update windows logging to not allocate memory (csilvers)\n\t* PORTING: avoid double-patching newer windows DLLs (roger.orr)\n\t* PORTING: get dynamic_annotations.c to work on windows (csilvers)\n\t* Add pkg-config .pc files for the 5 libraries we produce (csilvers)\n\t* Added proper libtool versioning, so this lib will be 0.1.0 (csilvers)\n\t* Moved from autoconf 2.64 to 2.65\n\nThu Aug  5 12:48:03 PDT 2010  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 1.6 release\n\t* Add tc_malloc_usable_size for compatibility with glibc (csilvers)\n\t* Override malloc_usable_size with tc_malloc_usable_size (csilvers)\n\t* Default to no automatic heap sampling in tcmalloc (csilvers)\n\t* Add -DTCMALLOC_LARGE_PAGES, a possibly faster tcmalloc (rus)\n\t* Make some functions extern \"C\" to avoid false ODR warnings (jyasskin)\n\t* pprof: Add SVG-based output (rsc)\n\t* pprof: Extend pprof --tools to allow per-tool configs (csilvers)\n\t* pprof: Improve support of 64-bit and big-endian profiles (csilvers)\n\t* pprof: Add interactive callgrind suport (weidenri...)\n\t* pprof: Improve address->function mapping a bit (dpeng)\n\t* Better detection of when we're running under valgrind (csilvers)\n\t* Better CPU-speed detection under valgrind (saito)\n\t* Use, and recommend, -fno-builtin-malloc when compiling (csilvers)\n\t* Avoid false-sharing of memory between caches (bmaurer)\n\t* BUGFIX: Fix heap sampling to use correct alloc size (bmauer)\n\t* BUGFIX: Avoid gcc 4.0.x bug by making hook-clearing atomic (csilvers)\n\t* BUGFIX: Avoid gcc 4.5.x optimization bug (csilvers)\n\t* BUGFIX: Work around deps-determining bug in libtool 1.5.26 (csilvers)\n\t* BUGFIX: Fixed test to use HAVE_PTHREAD, not HAVE_PTHREADS (csilvers)\n\t* BUGFIX: Fix tls callback behavior on windows when using wpo (wtc)\n\t* BUGFIX: properly align allocation sizes on Windows (antonm)\n\t* BUGFIX: Fix prototypes for tcmalloc/debugalloc wrt throw() (csilvers)\n\t* DOC: Updated heap-checker doc to match reality better (fischman)\n\t* DOC: Document ProfilerFlush, ProfilerStartWithOptions (csilvers)\n\t* DOC: Update docs for heap-profiler functions (csilvers)\n\t* DOC: Clean up documentation around tcmalloc.slack_bytes (fikes)\n\t* DOC: Renamed README.windows to README_windows.txt (csilvers)\n\t* DOC: Update the NEWS file to be non-empty (csilvers)\n\t* PORTING: Fix windows addr2line and nm with proper rc code (csilvers)\n\t* PORTING: Add CycleClock and atomicops support for arm 5 (sanek)\n\t* PORTING: Improve PC finding on cygwin and redhat 7 (csilvers)\n\t* PORTING: speed up function-patching under windows (csilvers)\n\nTue Jan 19 14:46:12 2010  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 1.5 release\n\t* Add tc_set_new_mode (willchan)\n\t* Make memalign functions + realloc respect tc_set_new_mode (willchan)\n\t* Add ReleaseToSystem(num_bytes) (kash)\n\t* Handle zero-length symbols a bit better in pprof (csilvers)\n\t* Prefer __environ to /proc/self/environ in cpu profiler (csilvers)\n\t* Add HEAP_CHECK_MAX_LEAKS flag to control #leaks to report (glider)\n\t* Add two new numeric pageheap properties to MallocExtension (fikes)\n\t* Print alloc size when mmap fails (hakon)\n\t* Add ITIMER_REAL support to cpu profiler (csilvers, nabeelmian)\n\t* Speed up symbolizer in heap-checker reporting (glider)\n\t* Speed up futexes with FUTEX_PRIVATE_FLAG (m3b)\n\t* Speed up tcmalloc but doing better span coalescing (sanjay)\n\t* Better support for different wget's and addr2maps in pprof (csilvres)\n\t* Implement a nothrow version of delete and delete[] (csilvers)\n\t* BUGFIX: fix a race on module_libcs[i] in windows patching (csilvers)\n\t* BUGFIX: Fix debugallocation to call cpp_alloc for new (willchan)\n\t* BUGFIX: A simple bugfix for --raw mode (mrabkin)\n\t* BUGFIX: Fix C shims to actually be valid C (csilvers)\n\t* BUGFIX: Fix recursively-unmapped-region accounting (ppluzhnikov)\n\t* BUGFIX: better distinguish real and fake vdso (ppluzhnikov)\n\t* WINDOWS: replace debugmodule with more reliable psai (andrey)\n\t* PORTING: Add .bundle as another shared library extension (csilvers)\n\t* PORTING: Fixed a typo bug in the ocnfigure PRIxx m4 macro (csilvers)\n\t* PORTING: Augment sysinfo to work on 64-bit OS X (csilvers)\n\t* PORTING: Use sys/ucontext.h to fix compiing on OS X 10.6 (csilvers)\n\t* PORTING: Fix sysinfo libname reporting for solaris x86 (jeffrey)\n\t* PORTING: Use libunwind for i386 when using --omitfp (ppluzhnikov)\n\t\nThu Sep 10 13:51:15 2009  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 1.4 release\n\t* Add debugallocation library, to catch memory leaks, stomping, etc\n\t* Add --raw mode to allow for delayed processing of pprof files\n\t* Use less memory when reading CPU profiles\n\t* New environment variables to control kernel-allocs (sbrk, memfs, etc)\n\t* Add MarkThreadBusy(): performance improvement\n\t* Remove static thread-cache-size code; all is dynamic now\n\t* Add new HiddenPointer class to heap checker\n\t* BUGFIX: pvalloc(0) allocates now (found by new debugalloc library)\n\t* BUGFIX: valloc test (not implementation) no longer overruns memory\n\t* BUGFIX: GetHeapProfile no longer deadlocks\n\t* BUGFIX: Support unmapping memory regions before main\n\t* BUGFIX: Fix some malloc-stats formatting\n\t* BUGFIX: Don't crash as often when freeing libc-allocated memory\n\t* BUGFIX: Deal better with incorrect PPROF_PATH when symbolizing\n\t* BUGFIX: weaken new/delete/etc in addition to malloc/free/etc\n\t* BUGFIX: Fix return value of GetAllocatedSize\n\t* PORTING: Fix mmap-#define problem on some 64-bit systems\n\t* PORTING: Call ranlib again (some OS X versions need it)\n\t* PORTING: Fix a leak when building with LLVM\n\t* PORTING: Remove some unneeded bash-ishs from testing scripts\n\t* WINDOWS: Support library unloading as well as loading\n\t* WINDOWS/BUGFIX: Set page to 'xrw' instead of 'rw' when patching\n\t\nTue Jun  9 18:19:06 2009  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 1.3 release\n\t* Provide our own name for memory functions: tc_malloc, etc (csilvers)\n\t* Weaken memory-alloc functions so user can override them (csilvers)\n\t* Remove meaningless delete(nothrow) and delete[](nothrow) (csilvers)\n\t* BUILD: replace clever libtcmalloc/profiler.a with a new .a (csilvers)\n\t* PORTING: improve windows port  by using google spinlocks (csilvers)\n\t* PORTING: Fix RedHat 9 memory allocation in heapchecker (csilvers)\n\t* PORTING: Rename OS_WINDOWS macro to PLATFORM_WINDOWS (mbelshe)\n\t* PORTING/BUGFIX: Make sure we don't clobber GetLastError (mbelshe)\n\t* BUGFIX: get rid of useless data for callgrind (weidenrinde)\n\t* BUGFIX: Modify windows patching to deadlock sometimes (csilvers)\n\t* BUGFIX: an improved fix for hook handling during fork (csilvers)\n\t* BUGFIX: revamp profiler_unittest.sh, which was very broken (csilvers)\n\t\nFri Apr 17 16:40:48 2009  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 1.2 release\n\t* Allow large_alloc_threshold=0 to turn it off entirely (csilvers)\n\t* Die more helpfully when out of memory for internal data (csilvers)\n\t* Refactor profile-data gathering, add a new unittest (cgd, nabeelmian)\n\t* BUGFIX: fix rounding errors with static thread-size caches (addi)\n\t* BUGFIX: disable hooks better when forking in leak-checker (csilvers)\n\t* BUGFIX: fix realloc of crt pointers on windows (csilvers)\n\t* BUGFIX: do a better job of finding binaries in .sh tests (csilvers)\n\t* WINDOWS: allow overriding malloc/etc instead of patching (mbelshe)\n\t* PORTING: fix compilation error in a ppc-specific file (csilvers)\n\t* PORTING: deal with quirks in cygwin's /proc/self/maps (csilvers)\n\t* PORTING: use 'A' version of functions for ascii input (mbelshe)\n\t* PORTING: generate .so's on cygwin and mingw (ajenjo)\n\t* PORTING: disable profiler methods on cygwin (jperkins)\n\t* Updated autoconf version to 2.61 and libtool version to 1.5.26\n\nWed Mar 11 11:25:34 2009  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 1.1 release\n\t* Dynamically resize thread caches -- nice perf. improvement (kash)\n\t* Add VDSO support to give better stacktraces in linux (ppluzhnikov)\n\t* Improve heap-profiling sampling algorithm (ford)\n\t* Rewrite leak-checking code: should be faster and more robust (sanjay)\n\t* Use ps2 instead of ps for dot: better page cropping for gv (csilvers)\n\t* Disable malloc-failure warning messages by default (csilvers)\n\t* Update config/Makefile to disable tests on a per-OS basis (csilvers)\n\t* PORTING: Get perftools compiling under MSVC 7.1 again (csilvers)\n\t* PORTING: Get perftools compiling under cygwin again (csilvers)\n\t* PORTING: automatically set library flags for solaris x86 (csilvers)\n\t* Add TCMALLOC_SKIP_SBRK to mirror TCMALLOC_SKIP_MMAP (csilvers)\n\t* Add --enable flags to allow selective building (csilvers)\n\t* Put addr2line-pdb and nm-pdb in proper output directory (csilvers)\n\t* Remove deprecated DisableChecksIn (sanjay)\n\t* DOCUMENTATION: Document most MallocExtension routines (csilvers)\n\t\nTue Jan  6 13:58:56 2009  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 1.0 release\n\t* Exactly the same as 1.0rc2\n\nSun Dec 14 17:10:35 2008  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 1.0rc2 release\n\t* Fix compile error on 64-bit systems (casting ptr to int) (csilvers)\n\nThu Dec 11 16:01:32 2008  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 1.0rc1 release\n\t* Replace API for selectively disabling heap-checker in code (sanjay)\n\t* Add a pre-mmap hook (daven, adlr)\n\t* Add MallocExtension interface to set memory-releasing rate (fikes)\n\t* Augment pprof to allow any string ending in /pprof/profile (csilvers)\n\t* PORTING: Rewrite -- and fix --  malloc patching for windows (dvitek)\n\t* PORTING: Add nm-pdb and addr2line-pdb for use by pprof (dvitek)\n\t* PORTING: Improve cygwin and mingw support (jperkins, csilvers)\n\t* PORTING: Fix pprof for mac os x, other pprof improvements (csilvers)\n\t* PORTING: Fix some PPC bugs in our locking code (anton.blanchard)\n\t* A new unittest, smapling_test, to verify tcmalloc-profiles (csilvers)\n\t* Turn off TLS for gcc < 4.1.2, due to a TLS + -fPIC bug (csilvers)\n\t* Prefer __builtin_frame_address to assembly for stacktraces (nlewycky)\n\t* Separate tcmalloc.cc out into multiple files -- finally! (kash)\n\t* Make our locking code work with -fPIC on 32-bit x86 (aruns)\n\t* Fix an initialization-ordering bug for tcmalloc/profiling (csilvers)\n\t* Use \"initial exec\" model of TLS to speed up tcmalloc (csilvers)\n\t* Enforce 16-byte alignment for tcmalloc, for SSE (sanjay)\n\t\nTue Sep 23 08:56:31 2008  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 0.99.2 release\n\t* COMPILE FIX: add #include needed for FreeBSD and OS X (csilvers)\n\nSat Sep 20 09:37:18 2008  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 0.99.1 release\n\t* BUG FIX: look for nm, etc in /usr/bin, not /usr/crosstool (csilvers)\n\nThu Sep 18 16:00:27 2008  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 0.99 release\n\t* Add IsHeapProfileRunning (csilvers)\n\t* Add C shims for some of the C++ header files (csilvers)\n\t* Fix heap profile file clean-up logic (maxim)\n\t* Rename linuxthreads.c to .cc for better compiler support (csilvers)\n\t* Add source info to disassembly in pprof (sanjay)\n\t* Use open instead of fopen to avoid memory alloc (csilvers)\n\t* Disable malloc extensions when running under valgrind (kcc)\n\t* BUG FIX: Fix out-of-bound error by reordering a check (larryz)\n\t* Add Options struct to ProfileData (cgd)\n\t* Correct PC-handling of --base in pprof (csilvers)\n\t* Handle 1 function occurring twice in an image (sanjay)\n\t* Improve stack-data cleaning (maxim)\n\t* Use 'struct Foo' to make header C compatible (csilvers)\n\t* Add 'total' line to pprof --text (csilvers)\n\t* Pre-allocate buffer for heap-profiler to avoid OOM errors (csilvers)\n\t* Allow a few more env-settings to control tcmalloc (csilvers)\n\t* Document some of the issues involving thread-local storage (csilvers)\n\t* BUG FIX: Define strtoll and friends for windows (csilvers)\n\nMon Jun  9 16:47:03 2008  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 0.98 release\n\t* Add ProfilerStartWithOptions() (cgd)\n\t* Change tcmalloc_minimal to not do any stack-tracing at all (csilvers)\n\t* Prefer mmap to sbrk for 64-buit debug mode (sanjay)\n\t* Fix accounting for some tcmalloc stats (sanjay)\n\t* Use setrlimit() to keep unittests from killing the machine (odo)\n\t* Fix a bug when sbrk-ing near address 4G (csilvers)\n\t* Make MallocHook thread-safe (jyasskin)\n\t* Fix windows build for MemoryBarrier (jyasskin)\n\t* Fix CPU-profiler docs to mention correct libs (csilvers)\n\t* Fix for GetHeapProfile() when heap-profiling is off (maxim)\n\t* Avoid realloc resizing ping-pongs using hysteresis (csilvers)\n\t* Add --callgrind output support to pprof (klimek)\n\t* Fix profiler.h and heap-profiler.h to be C-compatible (csilvers)\n\t* Break malloc_hook.h into two parts to reduce dependencies (csilvers)\n\t* Better handle systems that don't implement mmap (csilvers)\n\t* PORTING: disable system_alloc_unittest for msvc (csilvers)\n\t* PORTING: Makefile tweaks to build better on cygwin (csilvers)\n\t\nMon Apr 21 15:20:52 2008  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 0.97 release\n\t* Refactor GetHeapProfile to avoid using malloc (maxim)\n\t* Fix heap-checker and heap-profiler hook interactions (maxim)\n\t* Fix a data race in MemoryRegionMap::Lock (jyasskin)\n\t* Improve thread-safety of leak checker (maxim)\n\t* Fix mmap profile to no longer deadlock (maxim)\n\t* Fix rpm to have devel package depend on non-devel (csilvers)\n\t* PORTING: Fix clock-speed detection for Mac OS X (csilvers)\n\nTue Mar 18 14:30:44 2008  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 0.96 release\n\t* major atomicops rewrite; fixed atomic ops code for linux/ppc (vchen)\n\t* nix the stacktrace library; now build structure is simpler (csilvers)\n\t* Speed up heap-checker, and reduce extraneous logging (maxim)\n\t* Improve itimer code for NPTL case (cgd)\n\t* Add source code annotations for use by valgrind, etc (kcc)\n\t* PORTING: Fix high resolution timers for Mac OS X (adlr)\n\nTue Feb 19 12:01:31 2008  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 0.95.1 release  (bugfix release)\n\t* x86_64 compile-fix: nix pread64 and pwrite64 (csilvers)\n\t* more heap-checker debug logging (maxim)\n\t* minor improvement to x86_64 CycleClock (gpike)\n\nTue Feb 12 12:28:32 2008  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 0.95 release\n\t* Better -- not perfect -- support for linux-ppc (csilvers)\n\t* Fix race condition in libunwind stacktrace (aruns)\n\t* Speed up x86 spinlock locking (m3b)\n\t* Improve heap-checker performance (maxim)\n\t* Heap checker traverses more ptrs inside heap-alloced objects (maxim)\n\t* Remove deprecated ProfilerThreadState function (cgd)\n\t* Update libunwind documentation for statically linked binaries (aruns)\n\nMon Dec  3 23:51:54 2007  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 0.94.1 release  (bugfix release)\n\t* Fix missing #includes for x86_64 compile using libunwind (csilvers)\n\nThu Nov 29 07:59:43 2007  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 0.94 release\n\t* PORTING: MinGW/Msys support -- runs same code as MSVC does (csilvers)\n\t* PORTING: Add NumCPUs support for Mac OS X (csilvers)\n\t* Work around a sscanf bug in glibc(?) (waldemar)\n\t* Fix Windows MSVC bug triggered by thread deletion (csilvers)\n\t* Fix bug that triggers in MSVC /O2: missing volatile (gpike)\n\t* March-of-time support: quiet warnings/errors for gcc 4.2, OS X 10.5\n\t* Modify pprof so it works without nm: useful for windows (csilvers)\n\t* pprof: Support filtering for CPU profiles (cgd)\n\t* Bugfix: have realloc report to hooks in all situations (maxim)\n\t* Speed improvement: replace slow memcpy with std::copy (soren)\n\t* Speed: better iterator efficiency in RecordRegionRemoval (soren)\n\t* Speed: minor speed improvements via better bitfield alignment (gpike)\n\t* Documentation: add documentation of binary profile output (cgd)\n\t\nFri Aug 17 12:32:56 2007  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 0.93 release\n\t* PORTING: everything compiles on Solaris, OS X, FreeBSD (see INSTALL)\n\t* PORTING: cpu-profiler works on most platforms (much better GetPC())\n\t* PORTING: heap-profiler works on most platforms\n\t* PORTING: improved windows support, including release builds\n\t* No longer build or run ptmalloc tests by default\n\t* Add support for using memfs filesystem to allocate memory in linux\n\t* WINDOWS: give debug library and release library different names\n\t\nTue Jul 17 22:26:27 2007  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 0.92 release\n\t* PERFORMANCE: use a packed cache to speed up tcmalloc\n\t* PORTING: preliminary windows support! (see README.windows)\n\t* PORTING: better support for solaris, OS X, FreeBSD (see INSTALL)\n\t* Envvar support for running the heap-checker under gdb\n\t* Add weak declarations to maybe_threads to fix no-pthreads compile bugs\n\t* Some 64bit fixes, especially with pprof\n\t* Better heap-checker support for some low-level allocations\n\t* Fix bug where heap-profiles would sometimes get truncated\n\t* New documentation about how to handle common heap leak situations\n\t* Use computed includes for hash_map/set: easier config\n\t* Added all used .m4 templates to the distribution\n\nWed Apr 18 16:43:55 2007  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 0.91 release\n\t* Brown-paper-bag bugfix: compilation error on some x86-64 machines\n\nFri Apr 13 14:50:51 2007  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 0.90 release\n\t* (As the version-number jump hints, this is a major new release:\n\t  almost every piece of functionality was rewritten.  I can't do\n\t  justice to all the changes, but will concentrate on highlights.)\n\t*** USER-VISIBLE CHANGES:\n\t* Ability to \"release\" unused memory added to tcmalloc\n\t* Exposed more tweaking knobs via environment variables (see docs)\n\t* pprof tries harder to map addresses to functions\n\t* tcmalloc_minimal compiles and runs on FreeBSD 6.0 and Solaris 10\n\t*** INTERNAL CHANGES:\n\t* Much better 64-bit support\n\t* Better multiple-processor support (e.g. multicore contention tweaks)\n\t* Support for recent kernel ABI changes (e.g. new arg to mremap)\n\t* Addition of spinlocks to tcmalloc to reduce contention cost\n\t* Speed up tcmalloc by using __thread on systems that support TLS\n\t* Total redesign of heap-checker to improve liveness checking\n\t* More portable stack-frame analysis -- no more hard-coded constants!\n\t* Disentangled heap-profiler code and heap-checker code\n\t* Several new unittests to test, e.g., thread-contention costs\n\t* Lots of small (but important!) bug fixes: e.g., fixing GetPC on amd64\n\t*** KNOWN PROBLEMS:\n\t* CPU-profiling may crash on x86_64 (64-bit) systems.  See the README\n\t* Profiling/heap-checking may deadlock on x86_64 systems.  See README\n\nWed Jun 14 15:11:14 2006  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 0.8 release\n\t* Experimental support for remote profiling added to pprof (many)\n\t* Fixed race condition in ProfileData::FlushTable (etune)\n\t* Better support for weird /proc maps (maxim, mec)\n\t* Fix heap-checker interaction with gdb (markus)\n\t* Better 64-bit support in pprof (aruns)\n\t* Reduce scavenging cost in tcmalloc by capping NumMoveSize (sanjay)\n\t* Cast syscall(SYS_mmap); works on more 64-bit systems now (menage)\n\t* Document the text output of pprof! (csilvers)\n\t* Better compiler support for no-THREADS and for old compilers (csilvers)\n\t* Make libunwind the default stack unwinder for x86-64 (aruns)\n\t* Somehow the COPYING file got erased.  Regenerate it (csilvers)\n\nThu Apr 13 20:59:09 2006  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 0.7 release\n\t* Major rewrite of thread introspection for new kernels (markus)\n\t* Major rewrite of heap-checker to use new thread tools (maxim)\n\t* Add proper support for following data in thread registers (maxim)\n\t* Syscall support for older kernels, including _syscall6 (markus)\n\t* Support PIC mode (markus, mbland, iant)\n\t* Better support for running in non-threaded contexts (csilvers)\n\nFri Jan 27 14:04:27 2006  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 0.6 release\n\t* More sophisticated stacktrace usage, possibly using libunwind (aruns)\n\t* Update pprof to handle 64-bit profiles (dehnert)\n\t* Fix GetStackTrace to correctly return top stackframe (sanjay)\n\t* Add ANSI compliance for new and new[], including new_handler (jkearney)\n\t* More accuracy by reading ELF files directly rather than objdump (mec)\n\t* Add readline support for pprof (addi)\n\t* Add #includes for PPC (csilvers)\n\t* New PC-detection routine for ibook powerpc (asbestoshead)\n\t* Vastly improved tcmalloc unittest (csilvers)\n\t* Move documentation from /usr/doc to /usr/share/doc\n\nMon Nov 14 17:28:59 2005  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 0.5 release\n\t* Add va_start/va_end calls around vsnprintf() (csilvers)\n\t* Write our own __syscall_return(), since it's not defined\n\t  consistently on all 64-bit linux distros (markus)\n\nWed Oct 26 15:19:16 2005  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 0.4 release\n\t* Decrease fragmentation in tcmalloc (lefevere)\n\t* Support for ARM in some of the thread-specific code (markus)\n\t* Turn off heap-checker for statically-linked binaries, which\n\t  cause error leak reports now (etune)\n\t* Many pprof improvements, including a command-line interface (jeff)\n\t* CPU profiling now automatically affects all threads in linux 2.6.\n\t  (Kernel bugs break CPU profiling and threads in linux 2.4 a bit.)\n\t  ProfilerEnable() and ProfilerDisable() are deprecated.  (sanjay)\n\t* tcmalloc now correctly intercepts memalign (m3b, maxim)\n\t* Syntax fix: added missing va_end()s.  Helps non-gcc compiling (etune)\n\t* Fixed a few coredumper bugs: race condition after PTRACE_DETACH,\n\t  ignore non-aligned stackframe pointers (markus, menage)\n\t* 64-bit cleanup, especially for spinlock code (etune) and mmap (sanjay)\n\t* Better support for finding threads in linux (markus)\n\t* tcmalloc now tracks those stack traces that allocate memory (sanjay)\n\t* Work around a weird setspecific problem (sanjay)\n\t* Fix tcmalloc overflow problems when an alloc is close to 2G/4G (sanjay)\n\nFri Jun 24 18:02:26 2005  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 0.3 release\n\t* Add missing errno include for one of the unittests (csilvers)\n\t* Reduce tcmalloc startup memory from 5M to 256K (sanjay)\n\t* Add support for mallopt() and mallinfo (sanjay)\n\t* Improve stacktrace's performance on some 64-bit systems (etune)\n\t* Improve the stacktrace unittest (etune)\n\nTue May 31 08:14:38 2005  Google Inc. <opensource@google.com>\n\n\t* google-perftools: version 0.2 release\n\t* Use mmap2() instead of mmap(), to map more memory (menage)\n\t* Do correct pthread-local checking in heap-checker! (maxim)\n\t* Avoid overflow on 64-bit machines in pprof (sanjay)\n\t* Add a few more GetPC() functions, including for AMD (csilvers)\n\t* Better method for overriding pthread functions (menage)\n\t* (Hacky) fix to avoid overwriting profile files after fork() (csilvers)\n\t* Crashing bugfix involving dumping heaps on small-stack threads (tudor)\n\t* Allow library versions with letters at the end (csilvers)\n\t* Config fixes for systems that don't define PATH_MAX (csilvers)\n\t* Confix fixes so we no longer need config.h after install (csilvers)\n\t* Fix to pprof to correctly read very big cpu profiles (csilvers)\n\t* Fix to pprof to deal with new commandline flags in modern gv's\n\t* Better error reporting when we can't access /proc/maps (etune)\n\t* Get rid of the libc-preallocate code (which could crash on some\n\t  systems); no longer needed with local-threads fix (csilvers)\n\nTue Feb 8 09:57:17 2005  Google Inc. <opensource@google.com>\n\n\t* google-perftools: initial release:\n\t  The google-perftools package contains some utilities to improve\n\t  and analyze the performance of C++ programs.  This includes an\n\t  optimized thread-caching malloc() and cpu and heap profiling\n\t  utilities.\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 20.353515625,
          "content": "Copyright 1994, 1995, 1996, 1999, 2000, 2001, 2002 Free Software\nFoundation, Inc.\n\n   This file is free documentation; the Free Software Foundation gives\nunlimited permission to copy, distribute and modify it.\n\n\nPerftools-Specific Install Notes\n================================\n\nSee generic autotool-provided installation notes at the\nend. Immediately below you can see gperftools-specific details.\n\n*** Building from source repository\n\nAs of 2.1 gperftools does not have configure and other autotools\nproducts checked into it's source repository. This is common practice\nfor projects using autotools.\n\nNOTE: Source releases (.tar.gz that you download from\nhttps://github.com/gperftools/gperftools/releases) still have all\nrequired files just as before. Nothing has changed w.r.t. building\nfrom .tar.gz releases.\n\nBut, in order to build gperftools checked out from subversion\nrepository you need to have autoconf, automake and libtool\ninstalled. And before running ./configure you have to generate it (and\na bunch of other files) by running ./autogen.sh script. That script\nwill take care of calling correct autotools programs in correct order.\n\nIf you're maintainer then it's business as usual too. Just run make\ndist (or, preferably, make distcheck) and it'll produce .tar.gz or\n.tar.bz2 with all autotools magic already included. So that users can\nbuild our software without having autotools.\n\n\n*** Stacktrace capturing details\n\nA number of gperftools facilities capture stack traces. And\noccasionally this happens in 'tricky' locations, like in SIGPROF\nhandler. So some platforms and library versions occasionally cause\ntroubles (crashes or hangs, or truncated stack traces).\n\nSo we do provide several implementations that our users are able to\nselect at runtime. Pass TCMALLOC_STACKTRACE_METHOD_VERBOSE=t as\nenvironment variable to ./stacktrace_unittest to see options.\n\n* frame-pointer-based stacktracing is fully supported on x86 (all 3\n  kinds: i386, x32 and x86-64 are suppored), aarch64 and riscv. But\n  all modern architectures and ABIs by default build code without\n  frame pointers (even on i386). So in order to get anything useful\n  out of this option, you need to build your code with frame\n  pointers. It adds some performance overhead (usually people quote\n  order of 2%-3%, but it can really vary based on workloads). Also it\n  is worth mentioning, that it is fairly common for various asm\n  routines not to have frame pointers, so you'll have somewhat\n  imperfect profiles out of typical asm bits like memcpy. This stack\n  trace capuring method is also fastest (like 2-3 orders of magnitude\n  faster), which will matter when stacktrace capturing is done a lot\n  (e.g. heap profiler).\n\n* libgcc-based stacktracing works particularly great on modern\n  GNU/Linux systems with glibc 2.34 or later and libgcc from gcc 12 or\n  later. Thanks to usage of dl_find_object API introduced in recent\n  glibc-s this implementation seems to be truly async-signal safe and\n  it is reasonably fast too. On Linux and other ELF platforms it uses\n  eh_frame facility (which is very similar to dwarf unwind info). It\n  was originally introduced for exception handling. On most modern\n  platforms this unwind info is automatically added by compilers. On\n  others you might need to add -fexceptions and/or\n  -fasynchrnous-unwind-tables to your compiler flags. To make this\n  option default, pass --enable-libgcc-unwinder-by-default to\n  configure. When used without dl_find_object it will occasionally\n  deadlock especially when used in cpuprofiler.\n\n* libunwind is another supported mechanism and is default when\n  available. It also depends on eh_frame stuff (or dwarf or some\n  arm-specific thingy when available). When using it, be sure to use\n  latest available libunwind version. As with libgcc some people\n  occasionally had trouble with it on codes with broken or missing\n  unwind info. If you encounter something like that, first make sure\n  to file tickets against your compiler vender. Second, libunwind has\n  configure option to check accesses more thoroughly, so consider\n  that.\n\n* many systems provide backtrace() function either as part of their\n  libc or in -lexecinfo. On most systems, including GNU/Linux, it is\n  not built by default, so pass --enable-stacktrace-via-backtrace to\n  configure to enable it. Occasionally this implementation will call\n  malloc when capturing backtrace, but we should automagically handle\n  it via our \"emergency malloc\" facility which is now built by default\n  on most systems (but it currently doesn't handle being used by\n  cpuprofiler).\n\n\n*** TCMALLOC LARGE PAGES: TRADING TIME FOR SPACE\n\nYou can set a compiler directive that makes tcmalloc faster, at the\ncost of using more space (due to internal fragmentation).\n\nInternally, tcmalloc divides its memory into \"pages.\"  The default\npage size is chosen to minimize memory use by reducing fragmentation.\nThe cost is that keeping track of these pages can cost tcmalloc time.\nWe've added a new flag to tcmalloc that enables a larger page size.\nIn general, this will increase the memory needs of applications using\ntcmalloc.  However, in many cases it will speed up the applications\nas well, particularly if they allocate and free a lot of memory. We've\nseen average speedups of 3-5% on Google applications.\n\nTo build libtcmalloc with large pages you need to use the\n--with-tcmalloc-pagesize=ARG configure flag, e.g.:\n\n   ./configure <other flags> --with-tcmalloc-pagesize=32\n\nThe ARG argument can be 4, 8, 16, 32, 64, 128 or 256 which sets the\ninternal page size to 4K, 8K, 16K, 32K, 64K, 128K and 256K respectively.\nThe default is 8K.\n\n\n*** SMALL TCMALLOC CACHES: TRADING SPACE FOR TIME\n\nYou can set a compiler directive that makes tcmalloc use less memory\nfor overhead, at the cost of some time.\n\nInternally, tcmalloc keeps information about some of its internal data\nstructures in a cache.  This speeds memory operations that need to\naccess this internal data.  We've added a new, experimental flag to\ntcmalloc that reduces the size of this cache, decresaing the memory\nneeds of applications using tcmalloc.\n\nThis feature is still very experimental; it's not even a configure\nflag yet.  To build libtcmalloc with smaller internal caches, run\n\n   ./configure <normal flags> CXXFLAGS=-DTCMALLOC_SMALL_BUT_SLOW\n\n(or add -DTCMALLOC_SMALL_BUT_SLOW to your existing CXXFLAGS argument).\n\n\n*** TCMALLOC AND DLOPEN\n\nTo improve performance, we use the \"initial exec\" model of Thread\nLocal Storage in tcmalloc.  The price for this is the library will not\nwork correctly if it is loaded via dlopen().  This should not be a\nproblem, since loading a malloc-replacement library via dlopen is\nasking for trouble in any case: some data will be allocated with one\nmalloc, some with another.\n\n\n*** COMPILING ON NON-LINUX SYSTEMS\n\nWe regularly build and test on typical modern GNU/Linux systems. You\nshould expect all tests to pass on modern Linux distros and x86,\naarch64 and riscv machines. Other machine types may fail some tests,\nbut you should expect at least malloc to be fully functional.\n\nPerftools has been tested on the following non-Linux systems:\n   Various recent versions of FreeBSD (x86-64 mostly)\n   Recent version of NetBSD (x86-64)\n   Recent versions of OSX (aarch64, x86 and ppc hasn't been tested for some time)\n   Solaris 10 (x86_64), but not recently\n   Windows using both MSVC (starting from MSVC 2015 and later) and mingw toolchains\n     Windows XP and other obsolete versions have not been tested recently\n   Windows XP, Cygwin 5.1 (x86), but not recently\n\nPortions of gperftools work on those other systems.  The basic\nmemory-allocation library, tcmalloc_minimal, works on all systems.\nThe cpu-profiler also works fairly widely.  However, the heap-profiler\nand heap-checker are not yet as widely supported.  Heap checker is now\ndeprecated. In general, the 'configure' script will detect what OS you\nare building for, and only build the components that work on that OS.\n\nNote that tcmalloc_minimal is perfectly usable as a malloc/new\nreplacement, so it is possible to use tcmalloc on all the systems\nabove, by linking in libtcmalloc_minimal.\n\n** Solaris 10 x86: (note, this is fairly old)\n\n   I've only tested using the GNU C++ compiler, not the Sun C++\n   compiler.  Using g++ requires setting the PATH appropriately when\n   configuring.\n\n   % PATH=${PATH}:/usr/sfw/bin/:/usr/ccs/bin ./configure\n   % PATH=${PATH}:/usr/sfw/bin/:/usr/ccs/bin make [...]\n\n   Again, the binaries and libraries that successfully build are\n   exactly the same as for FreeBSD.  (However, while libprofiler.so can\n   be used to generate profiles, pprof is not very successful at\n   reading them -- necessary helper programs like nm don't seem\n   to be installed by default on Solaris, or perhaps are only\n   installed as part of the Sun C++ compiler package.)  See that\n   section for a list of binaries, and instructions on building them.\n\n** Windows  (MSVC, Cygwin, and MinGW):\n\n   Work on Windows is rather preliminary: only tcmalloc_minimal is\n   supported.\n\n   This Windows functionality is also available using MinGW and Msys,\n   In this case, you can use the regular './configure && make'\n   process.  'make install' should also work.  The Makefile will limit\n   itself to those libraries and binaries that work on windows.\n\n** AIX (as of 2021)\n\n   I've tested using the IBM XL and IBM Open XL Compilers. The\n   minimum requirement for IBM XL is V16 which includes C++11\n   support. IBM XL and gcc are not ABI compatible. If you would\n   like to use the library with a gcc built executable then the\n   library must also be built with gcc. To use the library with\n   and IBM XL built binary then it follows that the library must\n   also be built with IBM XL.\n\n   Both 32-bit and 64-bit builds have been tested.\n\n   To do a 32-bit IBM XL build:\n     % ./configure CC=\"xlclang\" CXX=\"xlclang++\" AR=\"ar\"\n           RANLIB=\"ranlib\" NM=\"nm\"\n   To do a 64-bit IBM XL build:\n     % ./configure CC=\"xlclang -q64\" CXX=\"xlclang++ -q64\"\n          AR=\"ar -X64\" RANLIB=\"ranlib -X64\" NM=\"nm -X64\"\n\n   Add your favorite optimization levels via CFLAGS and CXXFLAGS.\n\n   If you link to the shared library but it may not work as you\n   expect. Allocations and deallocations that occur from within\n   the Standard C and C++ libraries will not be redirected the\n   tcmalloc library.\n\n   The recommended method is to use the AIX User-defined malloc\n   replacement as documented by IBM. This replaces the default\n   AIX memory subsystem with a user defined memory subsystem.\n\n   The AIX user defined memory subsystem specifies that the 32-\n   and 64- bit objects must be placed in an archive with the\n   32-bit shared object named mem32.o and the 64-bit shared\n   object named mem64.o.\n\n   It is recommended to make combined 32_64 bit archive by\n   doing a 64-bit build, then copy the shared library to mem64.o\n   add mem64.o the archive, then do a 32-bit build\n   copy the shared library to mem32.o and add it to the same\n   combined archive.\n\n   For eg) perform a 64-bit build then:\n     % cp libtcmalloc_minimal.so.4 mem64.o\n     % ar -X32_64 -r libtmalloc_minimal.a mem64.o\n\n     Followed by a 32-bit build:\n     % cp libtcmalloc_minimal.so.4 mem32.o\n     % ar -X32_64 -r libtmalloc_minimal.a mem32.o\n\n   The final archive should contain both mem32.o and mem64.o\n\n   To use the library you are expected have the library location\n   in your LIBPATH or LD_LIBRARY_PATH followed by exporting the\n   environment variable MALLOCTYPE=user:libtcmalloc_minimal.a to\n   enable the new user defined memory subsystem.\n\n   I recommend using:\n     % MALLOCTYPE=user:libtcmalloc_minimal.a <user-exectuable>\n   to minimize the impact of replacing the memory subsystem.  Once\n   the subsystem is replaced it is used for all commands issued from\n   the terminal.\n\n\nBasic Installation\n==================\n\n   These are generic installation instructions.\n\n   The `configure' shell script attempts to guess correct values for\nvarious system-dependent variables used during compilation.  It uses\nthose values to create a `Makefile' in each directory of the package.\nIt may also create one or more `.h' files containing system-dependent\ndefinitions.  Finally, it creates a shell script `config.status' that\nyou can run in the future to recreate the current configuration, and a\nfile `config.log' containing compiler output (useful mainly for\ndebugging `configure').\n\n   It can also use an optional file (typically called `config.cache'\nand enabled with `--cache-file=config.cache' or simply `-C') that saves\nthe results of its tests to speed up reconfiguring.  (Caching is\ndisabled by default to prevent problems with accidental use of stale\ncache files.)\n\n   If you need to do unusual things to compile the package, please try\nto figure out how `configure' could check whether to do them, and mail\ndiffs or instructions to the address given in the `README' so they can\nbe considered for the next release.  If you are using the cache, and at\nsome point `config.cache' contains results you don't want to keep, you\nmay remove or edit it.\n\n   The file `configure.ac' (or `configure.in') is used to create\n`configure' by a program called `autoconf'.  You only need\n`configure.ac' if you want to change it or regenerate `configure' using\na newer version of `autoconf'.\n\nThe simplest way to compile this package is:\n\n  1. `cd' to the directory containing the package's source code and type\n     `./configure' to configure the package for your system.  If you're\n     using `csh' on an old version of System V, you might need to type\n     `sh ./configure' instead to prevent `csh' from trying to execute\n     `configure' itself.\n\n     Running `configure' takes awhile.  While running, it prints some\n     messages telling which features it is checking for.\n\n  2. Type `make' to compile the package.\n\n  3. Optionally, type `make check' to run any self-tests that come with\n     the package.\n\n  4. Type `make install' to install the programs and any data files and\n     documentation.\n\n  5. You can remove the program binaries and object files from the\n     source code directory by typing `make clean'.  To also remove the\n     files that `configure' created (so you can compile the package for\n     a different kind of computer), type `make distclean'.  There is\n     also a `make maintainer-clean' target, but that is intended mainly\n     for the package's developers.  If you use it, you may have to get\n     all sorts of other programs in order to regenerate files that came\n     with the distribution.\n\nCompilers and Options\n=====================\n\n   Some systems require unusual options for compilation or linking that\nthe `configure' script does not know about.  Run `./configure --help'\nfor details on some of the pertinent environment variables.\n\n   You can give `configure' initial values for configuration parameters\nby setting variables in the command line or in the environment.  Here\nis an example:\n\n     ./configure CC=c89 CFLAGS=-O2 LIBS=-lposix\n\n   *Note Defining Variables::, for more details.\n\nCompiling For Multiple Architectures\n====================================\n\n   You can compile the package for more than one kind of computer at the\nsame time, by placing the object files for each architecture in their\nown directory.  To do this, you must use a version of `make' that\nsupports the `VPATH' variable, such as GNU `make'.  `cd' to the\ndirectory where you want the object files and executables to go and run\nthe `configure' script.  `configure' automatically checks for the\nsource code in the directory that `configure' is in and in `..'.\n\n   If you have to use a `make' that does not support the `VPATH'\nvariable, you have to compile the package for one architecture at a\ntime in the source code directory.  After you have installed the\npackage for one architecture, use `make distclean' before reconfiguring\nfor another architecture.\n\nInstallation Names\n==================\n\n   By default, `make install' will install the package's files in\n`/usr/local/bin', `/usr/local/man', etc.  You can specify an\ninstallation prefix other than `/usr/local' by giving `configure' the\noption `--prefix=PATH'.\n\n   You can specify separate installation prefixes for\narchitecture-specific files and architecture-independent files.  If you\ngive `configure' the option `--exec-prefix=PATH', the package will use\nPATH as the prefix for installing programs and libraries.\nDocumentation and other data files will still use the regular prefix.\n\n   In addition, if you use an unusual directory layout you can give\noptions like `--bindir=PATH' to specify different values for particular\nkinds of files.  Run `configure --help' for a list of the directories\nyou can set and what kinds of files go in them.\n\n   If the package supports it, you can cause programs to be installed\nwith an extra prefix or suffix on their names by giving `configure' the\noption `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.\n\nOptional Features\n=================\n\n   Some packages pay attention to `--enable-FEATURE' options to\n`configure', where FEATURE indicates an optional part of the package.\nThey may also pay attention to `--with-PACKAGE' options, where PACKAGE\nis something like `gnu-as' or `x' (for the X Window System).  The\n`README' should mention any `--enable-' and `--with-' options that the\npackage recognizes.\n\n   For packages that use the X Window System, `configure' can usually\nfind the X include and library files automatically, but if it doesn't,\nyou can use the `configure' options `--x-includes=DIR' and\n`--x-libraries=DIR' to specify their locations.\n\nSpecifying the System Type\n==========================\n\n   There may be some features `configure' cannot figure out\nautomatically, but needs to determine by the type of machine the package\nwill run on.  Usually, assuming the package is built to be run on the\n_same_ architectures, `configure' can figure that out, but if it prints\na message saying it cannot guess the machine type, give it the\n`--build=TYPE' option.  TYPE can either be a short name for the system\ntype, such as `sun4', or a canonical name which has the form:\n\n     CPU-COMPANY-SYSTEM\n\nwhere SYSTEM can have one of these forms:\n\n     OS KERNEL-OS\n\n   See the file `config.sub' for the possible values of each field.  If\n`config.sub' isn't included in this package, then this package doesn't\nneed to know the machine type.\n\n   If you are _building_ compiler tools for cross-compiling, you should\nuse the `--target=TYPE' option to select the type of system they will\nproduce code for.\n\n   If you want to _use_ a cross compiler, that generates code for a\nplatform different from the build platform, you should specify the\n\"host\" platform (i.e., that on which the generated programs will\neventually be run) with `--host=TYPE'.\n\nSharing Defaults\n================\n\n   If you want to set default values for `configure' scripts to share,\nyou can create a site shell script called `config.site' that gives\ndefault values for variables like `CC', `cache_file', and `prefix'.\n`configure' looks for `PREFIX/share/config.site' if it exists, then\n`PREFIX/etc/config.site' if it exists.  Or, you can set the\n`CONFIG_SITE' environment variable to the location of the site script.\nA warning: not all `configure' scripts look for a site script.\n\nDefining Variables\n==================\n\n   Variables not defined in a site shell script can be set in the\nenvironment passed to `configure'.  However, some packages may run\nconfigure again during the build, and the customized values of these\nvariables may be lost.  In order to avoid this problem, you should set\nthem in the `configure' command line, using `VAR=value'.  For example:\n\n     ./configure CC=/usr/local2/bin/gcc\n\nwill cause the specified gcc to be used as the C compiler (unless it is\noverridden in the site shell script).\n\n`configure' Invocation\n======================\n\n   `configure' recognizes the following options to control how it\noperates.\n\n`--help'\n`-h'\n     Print a summary of the options to `configure', and exit.\n\n`--version'\n`-V'\n     Print the version of Autoconf used to generate the `configure'\n     script, and exit.\n\n`--cache-file=FILE'\n     Enable the cache: use and save the results of the tests in FILE,\n     traditionally `config.cache'.  FILE defaults to `/dev/null' to\n     disable caching.\n\n`--config-cache'\n`-C'\n     Alias for `--cache-file=config.cache'.\n\n`--quiet'\n`--silent'\n`-q'\n     Do not print messages saying which checks are being made.  To\n     suppress all normal output, redirect it to `/dev/null' (any error\n     messages will still be shown).\n\n`--srcdir=DIR'\n     Look for the package's source code in directory DIR.  Usually\n     `configure' can determine that directory automatically.\n\n`configure' also accepts some other, not widely useful, options.  Run\n`configure --help' for more details.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 39,
          "content": "## Process this file with automake to produce Makefile.in\n\n# Note: for every library we create, we're explicit about what symbols\n# we export.  In order to avoid complications with C++ mangling, we always\n# use the regexp for of specifying symbols.\n\n# Make sure that when we re-make ./configure, we get the macros we need\nACLOCAL_AMFLAGS = -I m4\nAUTOMAKE_OPTIONS = subdir-objects\n\n# This is so we can #include <gperftools/foo>\nAM_CPPFLAGS = -I$(top_srcdir)/src -I$(top_builddir)/src\n\nif !WITH_STACK_TRACE\nAM_CPPFLAGS += -DNO_TCMALLOC_SAMPLES\nendif !WITH_STACK_TRACE\n\n# This is mostly based on configure options\nAM_CXXFLAGS = $(PTHREAD_CFLAGS)\n\n# These are good warnings to turn on by default.\nif GCC\nAM_CXXFLAGS += -Wall -Wwrite-strings -Woverloaded-virtual \\\n               -Wno-sign-compare\nendif GCC\n\nif HAVE_SIZED_DEALLOCATION\nAM_CXXFLAGS += -fsized-deallocation\nendif HAVE_SIZED_DEALLOCATION\n\nif ENABLE_W_THREAD_SAFETY\nAM_CXXFLAGS += -Wthread-safety\nendif ENABLE_W_THREAD_SAFETY\n\n# The -no-undefined flag allows libtool to generate shared libraries for\n# Cygwin and MinGW.\nAM_LDFLAGS = -no-undefined $(NANOSLEEP_LIBS) $(PTHREAD_LIBS)\n\n# respect --enable-frame-pointers regardless of architecture\nif ENABLE_FRAME_POINTERS\nAM_CXXFLAGS += -fno-omit-frame-pointer -DFORCED_FRAME_POINTERS\n\nelse !ENABLE_FRAME_POINTERS\n\nif ENABLE_FP_FLAGS\nAM_CXXFLAGS += -fno-omit-frame-pointer -momit-leaf-frame-pointer\nendif ENABLE_FP_FLAGS\n\nendif !ENABLE_FRAME_POINTERS\n\n# For windows systems (at least, mingw), we need to tell all our\n# tests to link in libtcmalloc using -u.  This is because libtcmalloc\n# accomplishes its tasks via patching, leaving no work for the linker\n# to identify, so the linker will ignore libtcmalloc by default unless\n# we explicitly create a dependency via -u.\nif MINGW\nTCMALLOC_FLAGS = -Wl,-u__tcmalloc\nelse\nTCMALLOC_FLAGS =\nendif !MINGW\n\nperftoolsincludedir = $(includedir)/gperftools\n# The .h files you want to install (that is, .h files that people\n# who install this package can include in their own applications.)\n# We'll add to this later, on a library-by-library basis\nperftoolsinclude_HEADERS =\n# tcmalloc.h is a special case, because it's a .h.in file\nnodist_perftoolsinclude_HEADERS = src/gperftools/tcmalloc.h\nnoinst_HEADERS = src/gperftools/tcmalloc.h.in\n\n# This is for HTML and other documentation you want to install.  Add\n# your documentation files (in doc/) in addition to these top-level\n# boilerplate files.  We'll add to this later, on a library-by-library\n# basis\ndist_doc_DATA = AUTHORS COPYING INSTALL NEWS README README_windows.txt \\\n                ChangeLog.old\n\n# The libraries (.so's) you want to install\n# We'll add to this later, on a library-by-library basis\nlib_LTLIBRARIES =\n# This is for 'convenience libraries' -- basically just a container for sources\nnoinst_LTLIBRARIES =\n\n# unittests you want to run when people type 'make check'.\n# Note: tests cannot take any arguments!\nTESTS =\n# TESTS_ENVIRONMENT sets environment variables for when you run unittest.\n# We always get \"srcdir\" set for free.\n# We'll add to this later, on a library-by-library basis.\nTESTS_ENVIRONMENT =\n# All script tests should be added here\nnoinst_SCRIPTS =\n# If your test calls another program that, like the test itself, shouldn't\n# be installed, add it here.  (Stuff in TESTS is automatically added later).\nnoinst_PROGRAMS =\n\n# Binaries we might build that should be installed\nbin_PROGRAMS =\n\n# This is my own var, used for extra libraries I make that I need installed\nEXTRA_INSTALL =\n\n## vvvv RULES TO MAKE THE LIBRARIES, BINARIES, AND UNITTESTS\n\ndist_doc_DATA += docs/index.html docs/designstyle.css\n\n\n### ------- various support library routines\n\n# Having set of common helpers helps with unit testing various \"guts\"\nnoinst_LTLIBRARIES += libcommon.la\nlibcommon_la_SOURCES = src/base/logging.cc \\\n                       src/base/generic_writer.cc \\\n                       src/base/sysinfo.cc \\\n                       src/base/proc_maps_iterator.cc \\\n                       src/base/dynamic_annotations.cc \\\n                       src/base/spinlock.cc \\\n                       src/base/spinlock_internal.cc\n\nnoinst_LTLIBRARIES += liblow_level_alloc.la\nliblow_level_alloc_la_SOURCES = src/base/low_level_alloc.cc\n\nif MINGW\nlibcommon_la_SOURCES += src/windows/port.cc \\\n                        src/windows/ia32_modrm_map.cc \\\n                        src/windows/ia32_opcode_map.cc \\\n                        src/windows/mini_disassembler.cc \\\n                        src/windows/preamble_patcher.cc \\\n                        src/windows/preamble_patcher_with_stub.cc\n\n# windows bits need some extra libraries\nAM_LDFLAGS += -lpsapi -lsynchronization -lshlwapi\n\n# patch_functions.cc #includes tcmalloc.cc, so no need to link it in.\nTCMALLOC_CC = src/windows/patch_functions.cc\nSYSTEM_ALLOC_CC = src/windows/system-alloc.cc\n\nelse !MINGW\n\nTCMALLOC_CC = src/tcmalloc.cc\nSYSTEM_ALLOC_CC = src/system-alloc.cc\n\nendif !MINGW\n\n# On MSVC, we need couple more tests.\nWINDOWS_EXTRA = src/windows/preamble_patcher_test.cc \\\n                src/windows/shortproc.asm \\\n                src/windows/auto_testing_hook.h\n\n### Unittests\n\nnoinst_LTLIBRARIES += libgtest.la\nlibgtest_la_SOURCES = vendor/googletest/googletest/src/gtest_main.cc \\\n vendor/googletest/googletest/src/gtest-assertion-result.cc \\\n vendor/googletest/googletest/src/gtest-death-test.cc \\\n vendor/googletest/googletest/src/gtest-filepath.cc \\\n vendor/googletest/googletest/src/gtest-matchers.cc \\\n vendor/googletest/googletest/src/gtest-port.cc \\\n vendor/googletest/googletest/src/gtest-printers.cc \\\n vendor/googletest/googletest/src/gtest-test-part.cc \\\n vendor/googletest/googletest/src/gtest-typed-test.cc \\\n vendor/googletest/googletest/src/gtest.cc\n\nlibgtest_la_CPPFLAGS = -I$(top_srcdir)/vendor/googletest/googletest/include \\\n -I$(top_srcdir)/vendor/googletest/googletest/ $(AM_CPPFLAGS)\nlibgtest_la_LIBADD = $(REGEX_LIBS)\n\ngtest_CPPFLAGS = -I$(top_srcdir)/vendor/googletest/googletest/include $(AM_CPPFLAGS)\n\n# Note, we skip this test on mingw (and windows in general). It uses\n# unsetenv, which is not available on win32.\nif !MINGW\nTESTS += unique_path_unittest\nunique_path_unittest_SOURCES = src/tests/unique_path_unittest.cc\nunique_path_unittest_LDFLAGS = $(PTHREAD_CFLAGS) $(AM_LDFLAGS)\nunique_path_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\nunique_path_unittest_LDADD = libcommon.la libgtest.la\nendif !MINGW\n\nTESTS += generic_writer_test\ngeneric_writer_test_SOURCES = src/tests/generic_writer_test.cc\ngeneric_writer_test_CPPFLAGS = $(gtest_CPPFLAGS)\ngeneric_writer_test_LDADD = libcommon.la libgtest.la\n\nTESTS += proc_maps_iterator_test\nproc_maps_iterator_test_SOURCES = src/tests/proc_maps_iterator_test.cc\nproc_maps_iterator_test_CPPFLAGS = $(gtest_CPPFLAGS)\nproc_maps_iterator_test_LDADD = libcommon.la libgtest.la\n\nif WITH_HEAP_PROFILER_OR_CHECKER\nTESTS += low_level_alloc_unittest\nlow_level_alloc_unittest_SOURCES = src/tests/low_level_alloc_unittest.cc\n# By default, MallocHook takes stack traces for use by the heap-checker.\n# We don't need that functionality here, so we turn it off to reduce deps.\nlow_level_alloc_unittest_CXXFLAGS = -DNO_TCMALLOC_SAMPLES $(AM_CXXFLAGS)\nlow_level_alloc_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\nlow_level_alloc_unittest_LDADD = liblow_level_alloc.la libcommon.la libgtest.la\nendif WITH_HEAP_PROFILER_OR_CHECKER\n\n### ------- stack trace\n\nif WITH_STACK_TRACE\n\n### The header files we use.  We divide into categories based on directory\n\nperftoolsinclude_HEADERS += src/gperftools/stacktrace.h\n\n### Making the library\nnoinst_LTLIBRARIES += libstacktrace.la\nlibstacktrace_la_SOURCES = src/stacktrace.cc \\\n                           src/base/elf_mem_image.cc \\\n                           src/base/vdso_support.cc\nlibstacktrace_la_LIBADD = $(UNWIND_LIBS)\n\n### Unittests\nTESTS += stacktrace_unittest\nstacktrace_unittest_SOURCES = src/tests/stacktrace_unittest.cc \\\n                              $(libstacktrace_la_SOURCES)\nstacktrace_unittest_CXXFLAGS = $(AM_CXXFLAGS) -DSTACKTRACE_IS_TESTED\nstacktrace_unittest_LDADD = $(libstacktrace_la_LIBADD) $(STACKTRACE_UNITTEST_LIBS) libcommon.la\n# nice to have. Allows glibc's backtrace_symbols to work.\nstacktrace_unittest_LDFLAGS = -export-dynamic\n\nTESTS += check_address_test\ncheck_address_test_SOURCES = src/tests/check_address_test.cc\ncheck_address_test_CPPFLAGS = $(gtest_CPPFLAGS)\ncheck_address_test_LDADD = libcommon.la libgtest.la\n\n### Documentation\ndist_doc_DATA +=\n\nendif WITH_STACK_TRACE\n\n### ------- pprof\n\n# If we are not compiling with stacktrace support, pprof is worthless\nif WITH_STACK_TRACE\n\nbin_SCRIPTS = pprof-symbolize\n\npprof-symbolize : $(top_srcdir)/src/pprof\n\tcp -p $(top_srcdir)/src/pprof $@\n\n### Unittests\n\n# Let unittests find pprof if they need to run it\nTESTS_ENVIRONMENT += PPROF_PATH=$(top_srcdir)/src/pprof\n\nif INSTALL_PPROF\nbin_SCRIPTS += src/pprof\ndist_man_MANS = docs/pprof.1\ndist_doc_DATA += docs/pprof_remote_servers.html\nendif INSTALL_PPROF\n\n### Documentation\n\nendif WITH_STACK_TRACE\n\n### ------- tcmalloc_minimal (thread-caching malloc)\n\nperftoolsinclude_HEADERS += src/gperftools/malloc_hook.h \\\n                            src/gperftools/malloc_hook_c.h \\\n                            src/gperftools/malloc_extension.h \\\n                            src/gperftools/malloc_extension_c.h \\\n                            src/gperftools/nallocx.h\n\n### Making the library\n\nMINIMAL_MALLOC_SRC = src/common.cc \\\n                     src/internal_logging.cc \\\n                     $(SYSTEM_ALLOC_CC) \\\n                     src/memfs_malloc.cc \\\n                     src/safe_strerror.cc \\\n                     src/central_freelist.cc \\\n                     src/page_heap.cc \\\n                     src/sampler.cc \\\n                     src/span.cc \\\n                     src/stack_trace_table.cc \\\n                     src/static_vars.cc \\\n                     src/thread_cache.cc \\\n                     src/thread_cache_ptr.cc \\\n                     src/malloc_hook.cc \\\n                     src/malloc_extension.cc\n\nlib_LTLIBRARIES += libtcmalloc_minimal.la\nlibtcmalloc_minimal_la_SOURCES = $(TCMALLOC_CC) $(MINIMAL_MALLOC_SRC)\n\nlibtcmalloc_minimal_la_CXXFLAGS = -DNO_TCMALLOC_SAMPLES \\\n                                  -DNDEBUG $(AM_CXXFLAGS)\n# -version-info gets passed to libtool\nlibtcmalloc_minimal_la_LDFLAGS = -version-info @TCMALLOC_SO_VERSION@ $(AM_LDFLAGS)\nlibtcmalloc_minimal_la_LIBADD = libcommon.la\n\n### ------- unit tests for various internal modules of tcmalloc\n\nTESTS += addressmap_unittest\naddressmap_unittest_SOURCES = src/tests/addressmap_unittest.cc\naddressmap_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\naddressmap_unittest_LDADD = libcommon.la libgtest.la\n\nTESTS += packed_cache_test\npacked_cache_test_SOURCES = src/tests/packed-cache_test.cc src/internal_logging.cc\npacked_cache_test_CPPFLAGS = $(gtest_CPPFLAGS)\npacked_cache_test_LDADD = libcommon.la libgtest.la\n\nTESTS += safe_strerror_test\nsafe_strerror_test_SOURCES = src/tests/safe_strerror_test.cc \\\n                             src/safe_strerror.cc\nsafe_strerror_test_CPPFLAGS = $(gtest_CPPFLAGS)\nsafe_strerror_test_LDADD = libcommon.la libgtest.la\n\nTESTS += cleanup_test\ncleanup_test_SOURCES = src/tests/cleanup_test.cc\ncleanup_test_CPPFLAGS = $(gtest_CPPFLAGS)\ncleanup_test_LDADD = libgtest.la\n\nTESTS += function_ref_test\nfunction_ref_test_SOURCES = src/tests/function_ref_test.cc\nfunction_ref_test_CPPFLAGS = $(gtest_CPPFLAGS)\nfunction_ref_test_LDADD = libgtest.la\n\nTESTS += trivialre_test\ntrivialre_test_SOURCES = benchmark/trivialre_test.cc\ntrivialre_test_CPPFLAGS = $(gtest_CPPFLAGS)\ntrivialre_test_LDADD = libgtest.la\n\nTESTS += pagemap_unittest\npagemap_unittest_SOURCES = src/tests/pagemap_unittest.cc \\\n                           src/internal_logging.cc\npagemap_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\npagemap_unittest_LDADD = libcommon.la libgtest.la\n\n# note, it is not so great that page heap testing requires bringing\n# almost entirety of tcmalloc (short of tcmalloc.cc), but it is what\n# we have.\nTESTS += page_heap_test\npage_heap_test_SOURCES = src/tests/page_heap_test.cc \\\n                         $(libtcmalloc_minimal_la_SOURCES)\npage_heap_test_CXXFLAGS = -DNO_TCMALLOC_SAMPLES $(AM_CXXFLAGS)\npage_heap_test_CPPFLAGS = $(gtest_CPPFLAGS)\npage_heap_test_LDADD = libcommon.la libgtest.la\n\n# note, it is not so great that stack_trace_table testing requires\n# bringing almost entirety of tcmalloc (short of tcmalloc.cc), but it\n# is what we have.\nTESTS += stack_trace_table_test\nstack_trace_table_test_SOURCES = src/tests/stack_trace_table_test.cc \\\n                                 src/stack_trace_table.cc src/internal_logging.cc\nstack_trace_table_test_CPPFLAGS = $(gtest_CPPFLAGS)\nstack_trace_table_test_CXXFLAGS = -DSTACK_TRACE_TABLE_IS_TESTED $(AM_CXXFLAGS)\nstack_trace_table_test_LDADD = libcommon.la libgtest.la\n\nTESTS += malloc_hook_test\nmalloc_hook_test_SOURCES = src/tests/malloc_hook_test.cc \\\n                           src/tests/testutil.cc \\\n                           src/malloc_hook.cc\nmalloc_hook_test_CXXFLAGS = -DNO_TCMALLOC_SAMPLES $(AM_CXXFLAGS)\nmalloc_hook_test_CPPFLAGS = $(gtest_CPPFLAGS)\nmalloc_hook_test_LDADD = libcommon.la libgtest.la\n\nTESTS += sampler_test\nsampler_test_SOURCES = src/tests/sampler_test.cc \\\n                       src/sampler.cc\nsampler_test_CPPFLAGS = $(gtest_CPPFLAGS)\nsampler_test_LDADD = libcommon.la libgtest.la\n\n### Unittests for libtcmalloc_minimal.la\n\nTESTS += tcmalloc_minimal_unittest\ntcmalloc_minimal_unittest_SOURCES = src/tests/tcmalloc_unittest.cc \\\n                                    src/tests/testutil.cc\ntcmalloc_minimal_unittest_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\ntcmalloc_minimal_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\ntcmalloc_minimal_unittest_LDADD = libtcmalloc_minimal.la libgtest.la\n\n# lets make sure we exerice ASSERTs in at least in statically linked\n# configuration\nTESTS += tcm_min_asserts_unittest\ntcm_min_asserts_unittest_SOURCES = src/tests/tcmalloc_unittest.cc \\\n                                   src/tests/testutil.cc \\\n                                   $(libtcmalloc_minimal_la_SOURCES)\ntcm_min_asserts_unittest_CXXFLAGS = -DNO_TCMALLOC_SAMPLES \\\n                                    $(AM_CXXFLAGS)\ntcm_min_asserts_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\ntcm_min_asserts_unittest_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\ntcm_min_asserts_unittest_LDADD = libcommon.la libgtest.la\n\nTESTS += tcmalloc_minimal_large_unittest\ntcmalloc_minimal_large_unittest_SOURCES = src/tests/tcmalloc_large_unittest.cc\ntcmalloc_minimal_large_unittest_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\ntcmalloc_minimal_large_unittest_LDADD = libtcmalloc_minimal.la\n\nTESTS += tcmalloc_minimal_large_heap_fragmentation_unittest\ntcmalloc_minimal_large_heap_fragmentation_unittest_SOURCES = src/tests/large_heap_fragmentation_unittest.cc\ntcmalloc_minimal_large_heap_fragmentation_unittest_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\ntcmalloc_minimal_large_heap_fragmentation_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\ntcmalloc_minimal_large_heap_fragmentation_unittest_LDADD = libtcmalloc_minimal.la libgtest.la\n\nif !MINGW\nTESTS += system_alloc_unittest\nsystem_alloc_unittest_SOURCES = src/tests/system-alloc_unittest.cc\nsystem_alloc_unittest_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\nsystem_alloc_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\nsystem_alloc_unittest_LDADD = libtcmalloc_minimal.la libgtest.la\nendif !MINGW\n\nTESTS += frag_unittest\nfrag_unittest_SOURCES = src/tests/frag_unittest.cc\nfrag_unittest_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\nfrag_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\nfrag_unittest_LDADD = libtcmalloc_minimal.la libgtest.la\n\nTESTS += markidle_unittest\nmarkidle_unittest_SOURCES = src/tests/markidle_unittest.cc\nmarkidle_unittest_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\nmarkidle_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\nmarkidle_unittest_LDADD = libtcmalloc_minimal.la libgtest.la\n\nTESTS += current_allocated_bytes_test\ncurrent_allocated_bytes_test_SOURCES = src/tests/current_allocated_bytes_test.cc\ncurrent_allocated_bytes_test_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\ncurrent_allocated_bytes_test_CPPFLAGS = $(gtest_CPPFLAGS)\ncurrent_allocated_bytes_test_LDADD = libtcmalloc_minimal.la libgtest.la\n\nTESTS += malloc_extension_test\nmalloc_extension_test_SOURCES = src/tests/malloc_extension_test.cc\nmalloc_extension_test_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\nmalloc_extension_test_CPPFLAGS = $(gtest_CPPFLAGS)\nmalloc_extension_test_LDADD = libtcmalloc_minimal.la libgtest.la\n\nTESTS += malloc_extension_c_test\nmalloc_extension_c_test_SOURCES = src/tests/malloc_extension_c_test.cc\nmalloc_extension_c_test_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\nmalloc_extension_c_test_CPPFLAGS = $(gtest_CPPFLAGS)\nmalloc_extension_c_test_LDADD = libtcmalloc_minimal.la libgtest.la\n\nif !MINGW\nif !OSX\nTESTS += memalign_unittest\nmemalign_unittest_SOURCES = src/tests/memalign_unittest.cc \\\n                            src/tests/testutil.cc\nmemalign_unittest_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\nmemalign_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\nmemalign_unittest_LDADD = libtcmalloc_minimal.la libgtest.la\nendif !OSX\nendif !MINGW\n\nTESTS += realloc_unittest\nrealloc_unittest_SOURCES = src/tests/realloc_unittest.cc\nrealloc_unittest_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\nrealloc_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\nrealloc_unittest_LDADD = libtcmalloc_minimal.la libgtest.la\n\nTESTS += thread_dealloc_unittest\nthread_dealloc_unittest_SOURCES = src/tests/thread_dealloc_unittest.cc \\\n                                  src/tests/testutil.cc\nthread_dealloc_unittest_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\nthread_dealloc_unittest_LDADD = libtcmalloc_minimal.la\n\nTESTS += min_per_thread_cache_size_test\nmin_per_thread_cache_size_test_SOURCES = src/tests/min_per_thread_cache_size_test.cc\nmin_per_thread_cache_size_test_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\nmin_per_thread_cache_size_test_CPPFLAGS = $(gtest_CPPFLAGS)\nmin_per_thread_cache_size_test_LDADD = libtcmalloc_minimal.la libgtest.la\n\n### Documentation\ndist_doc_DATA += docs/tcmalloc.html \\\n                 docs/overview.gif \\\n                 docs/pageheap.gif \\\n                 docs/spanmap.gif \\\n                 docs/threadheap.gif \\\n                 docs/t-test1.times.txt \\\n                 docs/tcmalloc-opspercpusec.vs.threads.1024.bytes.png \t\\\n                 docs/tcmalloc-opspercpusec.vs.threads.128.bytes.png \t\\\n                 docs/tcmalloc-opspercpusec.vs.threads.131072.bytes.png \t\\\n                 docs/tcmalloc-opspercpusec.vs.threads.16384.bytes.png \t\\\n                 docs/tcmalloc-opspercpusec.vs.threads.2048.bytes.png \t\\\n                 docs/tcmalloc-opspercpusec.vs.threads.256.bytes.png \t\\\n                 docs/tcmalloc-opspercpusec.vs.threads.32768.bytes.png \t\\\n                 docs/tcmalloc-opspercpusec.vs.threads.4096.bytes.png \t\\\n                 docs/tcmalloc-opspercpusec.vs.threads.512.bytes.png \t\\\n                 docs/tcmalloc-opspercpusec.vs.threads.64.bytes.png \t\\\n                 docs/tcmalloc-opspercpusec.vs.threads.65536.bytes.png \t\\\n                 docs/tcmalloc-opspercpusec.vs.threads.8192.bytes.png \t\\\n                 docs/tcmalloc-opspersec.vs.size.1.threads.png \t\t\\\n                 docs/tcmalloc-opspersec.vs.size.12.threads.png \t\t\\\n                 docs/tcmalloc-opspersec.vs.size.16.threads.png \t\t\\\n                 docs/tcmalloc-opspersec.vs.size.2.threads.png \t\t\\\n                 docs/tcmalloc-opspersec.vs.size.20.threads.png \t\t\\\n                 docs/tcmalloc-opspersec.vs.size.3.threads.png \t\t\\\n                 docs/tcmalloc-opspersec.vs.size.4.threads.png \t\t\\\n                 docs/tcmalloc-opspersec.vs.size.5.threads.png \t\t\\\n                 docs/tcmalloc-opspersec.vs.size.8.threads.png\n\n# I don't know how to say \"distribute the .dot files but don't install them\";\n# noinst doesn't seem to work with data.  I separate them out anyway, in case\n# one day we figure it out.  Regardless, installing the dot files isn't the\n# end of the world.\ndist_doc_DATA += docs/overview.dot \\\n                 docs/pageheap.dot \\\n                 docs/spanmap.dot \\\n                 docs/threadheap.dot\n\n\n### ------- tcmalloc_minimal_debug (thread-caching malloc with debugallocation)\n\nif WITH_DEBUGALLOC\n\nnoinst_LTLIBRARIES += libbacktrace.la\nlibbacktrace_la_SOURCES = vendor/libbacktrace-integration/file-format.c \\\n                          vendor/libbacktrace/dwarf.c \\\n                          vendor/libbacktrace/fileline.c \\\n                          vendor/libbacktrace/posix.c \\\n                          vendor/libbacktrace/sort.c \\\n                          vendor/libbacktrace/state.c \\\n                          vendor/libbacktrace/read.c\n# note, we're not including our \"usual\" project-wide AM_CPPFLAGS here\nlibbacktrace_la_CPPFLAGS = -I$(top_srcdir)/vendor/libbacktrace-integration \\\n                           -I$(top_srcdir)/vendor/libbacktrace\n\n\nnoinst_LTLIBRARIES += libsymbolize.la\nlibsymbolize_la_SOURCES = src/symbolize.cc vendor/libbacktrace-integration/backtrace-alloc.cc\nlibsymbolize_la_LIBADD = libbacktrace.la\n\nlib_LTLIBRARIES += libtcmalloc_minimal_debug.la\nlibtcmalloc_minimal_debug_la_SOURCES = src/debugallocation.cc \\\n                                       $(MINIMAL_MALLOC_SRC)\nlibtcmalloc_minimal_debug_la_CXXFLAGS = $(libtcmalloc_minimal_la_CXXFLAGS)\nlibtcmalloc_minimal_debug_la_LDFLAGS = $(libtcmalloc_minimal_la_LDFLAGS)\nlibtcmalloc_minimal_debug_la_LIBADD = libsymbolize.la liblow_level_alloc.la $(libtcmalloc_minimal_la_LIBADD)\n\n### Unittests\n\nTESTS += tcmalloc_minimal_debug_unittest\ntcmalloc_minimal_debug_unittest_SOURCES = $(tcmalloc_minimal_unittest_SOURCES)\ntcmalloc_minimal_debug_unittest_LDFLAGS = $(tcmalloc_minimal_unittest_LDFLAGS)\ntcmalloc_minimal_debug_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\ntcmalloc_minimal_debug_unittest_LDADD = libtcmalloc_minimal_debug.la libgtest.la\n\nTESTS += malloc_extension_debug_test\nmalloc_extension_debug_test_SOURCES = $(malloc_extension_test_SOURCES)\nmalloc_extension_debug_test_CXXFLAGS = $(malloc_extension_test_CXXFLAGS)\nmalloc_extension_debug_test_LDFLAGS = $(malloc_extension_test_LDFLAGS)\nmalloc_extension_debug_test_CPPFLAGS = $(gtest_CPPFLAGS)\nmalloc_extension_debug_test_LDADD = libtcmalloc_minimal_debug.la libgtest.la\n\nif !MINGW\nif !OSX\nTESTS += memalign_debug_unittest\nmemalign_debug_unittest_SOURCES = $(memalign_unittest_SOURCES)\nmemalign_debug_unittest_CXXFLAGS = $(memalign_unittest_CXXFLAGS)\nmemalign_debug_unittest_LDFLAGS = $(memalign_unittest_LDFLAGS)\nmemalign_debug_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\nmemalign_debug_unittest_LDADD = libtcmalloc_minimal_debug.la libgtest.la\nendif !OSX\nendif !MINGW\n\nTESTS += realloc_debug_unittest\nrealloc_debug_unittest_SOURCES = $(realloc_unittest_SOURCES)\nrealloc_debug_unittest_CXXFLAGS = $(realloc_unittest_CXXFLAGS)\nrealloc_debug_unittest_LDFLAGS = $(realloc_unittest_LDFLAGS)\nrealloc_debug_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\nrealloc_debug_unittest_LDADD = libtcmalloc_minimal_debug.la libgtest.la\n\n# debugallocation_test checks that we print a proper stacktrace when\n# debug-allocs fail, so we can't run it if we don't have stacktrace info.\nif WITH_STACK_TRACE\n\nTESTS += debugallocation_test\ndebugallocation_test_SOURCES = src/tests/debugallocation_test.cc\ndebugallocation_test_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\ndebugallocation_test_CPPFLAGS = $(gtest_CPPFLAGS)\ndebugallocation_test_LDADD = libtcmalloc_debug.la libgtest.la\nendif WITH_STACK_TRACE\n\nendif WITH_DEBUGALLOC\n\nif !MINGW\nnoinst_LTLIBRARIES += librun_benchmark.la\nlibrun_benchmark_la_SOURCES = \\\n\tbenchmark/run_benchmark.cc\n\nnoinst_PROGRAMS += malloc_bench malloc_bench_shared \\\n\tbinary_trees binary_trees_shared\n\nmalloc_bench_SOURCES = benchmark/malloc_bench.cc\nmalloc_bench_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\nif ENABLE_STATIC\nmalloc_bench_LDFLAGS += -static\nendif ENABLE_STATIC\nmalloc_bench_LDADD = librun_benchmark.la libtcmalloc_minimal.la\n\nmalloc_bench_shared_SOURCES = benchmark/malloc_bench.cc\nmalloc_bench_shared_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\nmalloc_bench_shared_LDADD = librun_benchmark.la libtcmalloc_minimal.la\n\nif WITH_HEAP_PROFILER_OR_CHECKER\n\nnoinst_PROGRAMS += malloc_bench_shared_full\nmalloc_bench_shared_full_SOURCES = benchmark/malloc_bench.cc\nmalloc_bench_shared_full_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\nmalloc_bench_shared_full_LDADD = librun_benchmark.la libtcmalloc.la\n\nnoinst_PROGRAMS += unwind_bench\nunwind_bench_SOURCES = benchmark/unwind_bench.cc\nunwind_bench_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\nunwind_bench_LDADD = librun_benchmark.la libtcmalloc.la\n\nendif WITH_HEAP_PROFILER_OR_CHECKER\n\nbinary_trees_SOURCES = benchmark/binary_trees.cc\nbinary_trees_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\nif ENABLE_STATIC\nbinary_trees_LDFLAGS += -static\nendif ENABLE_STATIC\nbinary_trees_LDADD = libtcmalloc_minimal.la\n\nbinary_trees_shared_SOURCES = benchmark/binary_trees.cc\nbinary_trees_shared_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\nbinary_trees_shared_LDADD = libtcmalloc_minimal.la\nendif !MINGW\n\n### ------- tcmalloc (thread-caching malloc + heap profiler)\n\nif WITH_HEAP_PROFILER_OR_CHECKER\n\nperftoolsinclude_HEADERS += src/gperftools/heap-profiler.h \\\n                            src/gperftools/heap-checker.h\n\nif BUILD_EMERGENCY_MALLOC\nEMERGENCY_MALLOC_CC = src/emergency_malloc.cc\nEMERGENCY_MALLOC_DEFINE = -DENABLE_EMERGENCY_MALLOC\nelse !BUILD_EMERGENCY_MALLOC\nEMERGENCY_MALLOC_CC =\nEMERGENCY_MALLOC_DEFINE =\nendif !BUILD_EMERGENCY_MALLOC\n\n### Making the library\n\nFULL_MALLOC_SRC = $(MINIMAL_MALLOC_SRC) \\\n                  src/heap-profile-table.cc \\\n                  src/heap-profiler.cc \\\n                  $(EMERGENCY_MALLOC_CC) \\\n                  src/malloc_backtrace.cc \\\n                  src/heap-checker-stub.cc\n\nlib_LTLIBRARIES += libtcmalloc.la\nlibtcmalloc_la_SOURCES = $(TCMALLOC_CC) $(FULL_MALLOC_SRC)\nlibtcmalloc_la_CXXFLAGS = -DNDEBUG $(AM_CXXFLAGS) \\\n                          $(EMERGENCY_MALLOC_DEFINE)\nlibtcmalloc_la_LDFLAGS = -version-info @TCMALLOC_SO_VERSION@ $(AM_LDFLAGS)\nlibtcmalloc_la_LIBADD = libstacktrace.la liblow_level_alloc.la libcommon.la\n\n### Unittests\n\nTESTS += tcmalloc_unittest\ntcmalloc_unittest_SOURCES = src/tests/tcmalloc_unittest.cc \\\n                            src/tests/testutil.cc\ntcmalloc_unittest_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\ntcmalloc_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\ntcmalloc_unittest_LDADD = libtcmalloc.la libgtest.la\n\nTESTS += tcm_asserts_unittest\ntcm_asserts_unittest_SOURCES = src/tests/tcmalloc_unittest.cc \\\n                               src/tests/testutil.cc \\\n                               $(libtcmalloc_la_SOURCES)\n# same cxxflags as libtcmalloc.la but without NDEBUG\ntcm_asserts_unittest_CXXFLAGS = $(AM_CXXFLAGS) \\\n                                $(EMERGENCY_MALLOC_DEFINE)\ntcm_asserts_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\ntcm_asserts_unittest_LDADD = libstacktrace.la liblow_level_alloc.la libcommon.la libgtest.la\n\n# This makes sure it's safe to link in both tcmalloc and\n# tcmalloc_minimal.  (One would never do this on purpose, but perhaps\n# by accident...)  When we can compile libprofiler, we also link it in\n# to make sure that works too.  NOTE: On OS X, it's *not* safe to\n# link both in (we end up with two copies of every global var, and\n# the code tends to pick one arbitrarily), so don't run the test there.\n# (We define these outside the 'if' because they're reused below.)\ntcmalloc_both_unittest_srcs = src/tests/tcmalloc_unittest.cc \\\n                              src/tests/testutil.h src/tests/testutil.cc\ntcmalloc_both_unittest_lflags = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\ntcmalloc_both_unittest_ladd = libtcmalloc.la libtcmalloc_minimal.la libgtest.la\nif WITH_CPU_PROFILER\ntcmalloc_both_unittest_ladd += libprofiler.la\nendif WITH_CPU_PROFILER\n\nif !OSX\nTESTS += tcmalloc_both_unittest\ntcmalloc_both_unittest_SOURCES = $(tcmalloc_both_unittest_srcs)\ntcmalloc_both_unittest_LDFLAGS = $(tcmalloc_both_unittest_lflags)\ntcmalloc_both_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\ntcmalloc_both_unittest_LDADD = $(tcmalloc_both_unittest_ladd)\nendif !OSX\n\nTESTS += tcmalloc_large_unittest\ntcmalloc_large_unittest_SOURCES = src/tests/tcmalloc_large_unittest.cc\ntcmalloc_large_unittest_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\ntcmalloc_large_unittest_LDADD = libtcmalloc.la $(PTHREAD_LIBS)\n\nTESTS += tcmalloc_large_heap_fragmentation_unittest\ntcmalloc_large_heap_fragmentation_unittest_SOURCES = src/tests/large_heap_fragmentation_unittest.cc\ntcmalloc_large_heap_fragmentation_unittest_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\ntcmalloc_large_heap_fragmentation_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\ntcmalloc_large_heap_fragmentation_unittest_LDADD = libtcmalloc.la libgtest.la\n\n# These unittests often need to run binaries.  They're in the current dir\nTESTS_ENVIRONMENT += BINDIR=.\n\nTESTS += heap_checker_stub_test\nheap_checker_stub_test_SOURCES = src/tests/heap-checker-stub-test.cc\nheap_checker_stub_test_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\nheap_checker_stub_test_LDADD = libtcmalloc.la\n\nTESTS += sampling_test\nsampling_test_SOURCES = src/tests/sampling_test.cc\nsampling_test_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\nsampling_test_CPPFLAGS = $(AM_CPPFLAGS) \"-DPPROF_PATH=$(top_srcdir)/src/pprof\"\nsampling_test_LDADD = libtcmalloc.la $(REGEX_LIBS)\n\nendif WITH_HEAP_PROFILER_OR_CHECKER\n\nif WITH_HEAP_PROFILER\n\nTESTS += heap-profiler_unittest.sh$(EXEEXT)\nheap_profiler_unittest_sh_SOURCES = src/tests/heap-profiler_unittest.sh\nnoinst_SCRIPTS += $(heap_profiler_unittest_sh_SOURCES)\nheap-profiler_unittest.sh$(EXEEXT): $(top_srcdir)/$(heap_profiler_unittest_sh_SOURCES) \\\n                                    heap-profiler_unittest\n\trm -f $@\n\tcp -p $(top_srcdir)/$(heap_profiler_unittest_sh_SOURCES) $@\n\n# These are sub-programs used by heap-profiler_unittest.sh\nnoinst_PROGRAMS += heap-profiler_unittest\nheap_profiler_unittest_SOURCES = src/tests/heap-profiler_unittest.cc\nheap_profiler_unittest_LDFLAGS = $(TCMALLOC_FLAGS) $(AM_LDFLAGS)\nheap_profiler_unittest_LDADD = libtcmalloc.la\n\nendif WITH_HEAP_PROFILER\n\n### Documentation (above and beyond tcmalloc_minimal documentation)\nif WITH_HEAP_PROFILER\ndist_doc_DATA += docs/heapprofile.html docs/heap-example1.png\nendif WITH_HEAP_PROFILER\n\n### ------- tcmalloc with debugallocation\n\nif WITH_DEBUGALLOC\nif WITH_HEAP_PROFILER_OR_CHECKER\n\nlib_LTLIBRARIES += libtcmalloc_debug.la\nlibtcmalloc_debug_la_SOURCES = src/debugallocation.cc $(FULL_MALLOC_SRC)\nlibtcmalloc_debug_la_CXXFLAGS = $(libtcmalloc_la_CXXFLAGS)\nlibtcmalloc_debug_la_LDFLAGS = $(libtcmalloc_la_LDFLAGS)\nlibtcmalloc_debug_la_LIBADD = libsymbolize.la $(libtcmalloc_la_LIBADD)\n\n### Unittests\n\nTESTS += tcmalloc_debug_unittest\ntcmalloc_debug_unittest_SOURCES = $(tcmalloc_unittest_SOURCES)\ntcmalloc_debug_unittest_LDFLAGS = $(tcmalloc_unittest_LDFLAGS)\ntcmalloc_debug_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\ntcmalloc_debug_unittest_LDADD = libtcmalloc_debug.la libgtest.la\n\nTESTS += sampling_debug_test\nsampling_debug_test_SOURCES = $(sampling_test_SOURCES)\nsampling_debug_test_CXXFLAGS = $(sampling_test_CXXFLAGS)\nsampling_debug_test_CPPFLAGS = $(sampling_test_CPPFLAGS)\nsampling_debug_test_LDFLAGS = $(sampling_test_LDFLAGS)\nsampling_debug_test_LDADD = libtcmalloc_debug.la $(REGEX_LIBS)\n\nendif WITH_HEAP_PROFILER_OR_CHECKER\n\nif WITH_HEAP_PROFILER\n\nTESTS += heap-profiler_debug_unittest.sh$(EXEEXT)\nheap_profiler_debug_unittest_sh_SOURCES = src/tests/heap-profiler_unittest.sh\nheap-profiler_debug_unittest.sh$(EXEEXT): $(top_srcdir)/$(heap_profiler_unittest_sh_SOURCES) \\\n                                    heap-profiler_debug_unittest\n\trm -f $@\n\tcp -p $(top_srcdir)/$(heap_profiler_unittest_sh_SOURCES) $@\n\n# These are sub-programs used by heap-profiler_debug_unittest.sh\nnoinst_PROGRAMS += heap-profiler_debug_unittest\nheap_profiler_debug_unittest_SOURCES = $(heap_profiler_unittest_SOURCES)\nheap_profiler_debug_unittest_CXXFLAGS = $(heap_profiler_unittest_CXXFLAGS)\nheap_profiler_debug_unittest_LDFLAGS = $(heap_profiler_unittest_LDFLAGS)\nheap_profiler_debug_unittest_LDADD = libtcmalloc_debug.la\n\nendif WITH_HEAP_PROFILER\n\nendif WITH_DEBUGALLOC\n\n\n### ------- CPU profiler\n\nif WITH_CPU_PROFILER\n\nperftoolsinclude_HEADERS += src/gperftools/profiler.h\n\n### Making the library\nlib_LTLIBRARIES += libprofiler.la\nlibprofiler_la_SOURCES = src/profiler.cc \\\n                         src/profile-handler.cc \\\n                         src/profiledata.cc\nlibprofiler_la_LIBADD = libstacktrace.la libcommon.la\n# We have to include ProfileData for profiledata_unittest\nCPU_PROFILER_SYMBOLS = '(ProfilerStart|ProfilerStartWithOptions|ProfilerStop|ProfilerFlush|ProfilerEnable|ProfilerDisable|ProfilingIsEnabledForAllThreads|ProfilerRegisterThread|ProfilerGetCurrentState|ProfilerState|ProfileData|ProfileHandler|ProfilerGetStackTrace)'\nlibprofiler_la_LDFLAGS = -export-symbols-regex $(CPU_PROFILER_SYMBOLS) \\\n                         -version-info @PROFILER_SO_VERSION@\n\n### Unittests\nTESTS += getpc_test\ngetpc_test_SOURCES = src/tests/getpc_test.cc src/getpc.h\n\nTESTS += profiledata_unittest\nprofiledata_unittest_SOURCES = src/tests/profiledata_unittest.cc src/profiledata.cc\nprofiledata_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\nprofiledata_unittest_LDADD = libstacktrace.la libcommon.la libgtest.la\n\nTESTS += profile_handler_unittest\nprofile_handler_unittest_SOURCES = src/tests/profile-handler_unittest.cc src/profile-handler.cc\nprofile_handler_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\nprofile_handler_unittest_LDADD = libstacktrace.la libcommon.la libgtest.la\n\nTESTS += profiler_unittest.sh$(EXEEXT)\nprofiler_unittest_sh_SOURCES = src/tests/profiler_unittest.sh\nnoinst_SCRIPTS += $(profiler_unittest_sh_SOURCES)\nprofiler_unittest.sh$(EXEEXT): $(top_srcdir)/$(profiler_unittest_sh_SOURCES) \\\n                               profiler1_unittest profiler2_unittest \\\n                               profiler3_unittest profiler4_unittest\n\trm -f $@\n\tcp -p $(top_srcdir)/$(profiler_unittest_sh_SOURCES) $@\n\n# These are sub-programs used by profiler_unittest.sh\nnoinst_PROGRAMS += profiler1_unittest profiler2_unittest profiler3_unittest \\\n                   profiler4_unittest\nPROFILER_UNITTEST_SRCS = src/tests/profiler_unittest.cc \\\n                         src/tests/testutil.cc\nprofiler1_unittest_SOURCES = $(PROFILER_UNITTEST_SRCS)\nprofiler1_unittest_CXXFLAGS = -g -DNO_THREADS $(AM_CXXFLAGS)\nprofiler1_unittest_LDADD = libprofiler.la\nprofiler2_unittest_SOURCES = $(PROFILER_UNITTEST_SRCS)\nprofiler2_unittest_CXXFLAGS = -g -DNO_THREADS $(AM_CXXFLAGS)\nprofiler2_unittest_LDADD = -lstacktrace -lprofiler\n# We depend on -lprofiler but haven't yet said how to build it.  Do so now.\nprofiler2_unittest_DEPENDENCIES = libprofiler.la\nprofiler3_unittest_SOURCES = $(PROFILER_UNITTEST_SRCS)\nprofiler3_unittest_CXXFLAGS = -g $(AM_CXXFLAGS)\nprofiler3_unittest_LDADD = libprofiler.la\nprofiler4_unittest_SOURCES = $(PROFILER_UNITTEST_SRCS)\nprofiler4_unittest_CXXFLAGS = -g $(AM_CXXFLAGS)\nprofiler4_unittest_LDADD = -lstacktrace -lprofiler\n# We depend on -lprofiler but haven't yet said how to build it.  Do so now.\nprofiler4_unittest_DEPENDENCIES = libprofiler.la\n\n\n### Documentation\ndist_doc_DATA += docs/cpuprofile.html \\\n                 docs/cpuprofile-fileformat.html \\\n                 docs/pprof-test-big.gif \\\n                 docs/pprof-test.gif \\\n                 docs/pprof-vsnprintf-big.gif \\\n                 docs/pprof-vsnprintf.gif\n\nendif WITH_CPU_PROFILER\n\n\n### ------- CPU and heap profiler, in one!\n\n# Ideally, folks who wanted to use both tcmalloc and libprofiler,\n# could just link them both into their application.  But while this\n# works fine for .so files, it does not for .a files.  The easiest way\n# around this -- and I've tried a bunch of the hard ways -- is to just\n# to create another set of libraries that has both functionality in it.\n\nif WITH_HEAP_PROFILER_OR_CHECKER\nif WITH_CPU_PROFILER\n\nlib_LTLIBRARIES += libtcmalloc_and_profiler.la\nlibtcmalloc_and_profiler_la_SOURCES = $(libtcmalloc_la_SOURCES) $(libprofiler_la_SOURCES)\nlibtcmalloc_and_profiler_la_CXXFLAGS = $(libtcmalloc_la_CXXFLAGS) $(libprofiler_la_CXXFLAGS)\n# Since this library is meant to be used as a .a, I don't worry as much\n# about .so versioning.  I just give the libtcmalloc version number.\nlibtcmalloc_and_profiler_la_LDFLAGS = -version-info @TCMALLOC_AND_PROFILER_SO_VERSION@ \\\n                                      $(AM_LDFLAGS)\nlibtcmalloc_and_profiler_la_LIBADD = $(libtcmalloc_la_LIBADD)\n\nTESTS += tcmalloc_and_profiler_unittest\ntcmalloc_and_profiler_unittest_SOURCES = $(tcmalloc_both_unittest_srcs)\ntcmalloc_and_profiler_unittest_LDFLAGS = $(tcmalloc_both_unittest_lflags)\ntcmalloc_and_profiler_unittest_CPPFLAGS = $(gtest_CPPFLAGS)\ntcmalloc_and_profiler_unittest_LDADD = libtcmalloc_and_profiler.la libgtest.la\n\nendif WITH_CPU_PROFILER\nendif WITH_HEAP_PROFILER_OR_CHECKER\n\n## ^^^^ END OF RULES TO MAKE YOUR LIBRARIES, BINARIES, AND UNITTESTS\n\n# This should always include $(TESTS), but may also include other\n# binaries that you compile but don't want automatically installed.\n# We'll add to this later, on a library-by-library basis\nnoinst_PROGRAMS += $(TESTS)\n\n# http://linux.die.net/man/1/pkg-config, http://pkg-config.freedesktop.org/wiki\npkgconfigdir = $(libdir)/pkgconfig\npkgconfig_DATA = libtcmalloc_minimal.pc\nif WITH_DEBUGALLOC\npkgconfig_DATA += libtcmalloc_minimal_debug.pc\nendif WITH_DEBUGALLOC\n\nif WITH_HEAP_PROFILER_OR_CHECKER\npkgconfig_DATA += libtcmalloc.pc\nif WITH_DEBUGALLOC\npkgconfig_DATA += libtcmalloc_debug.pc\nendif WITH_DEBUGALLOC\nendif WITH_HEAP_PROFILER_OR_CHECKER\n\nif WITH_CPU_PROFILER\npkgconfig_DATA += libprofiler.pc\nendif WITH_CPU_PROFILER\nCLEANFILES = $(pkgconfig_DATA)\n\nlibtcmalloc.pc: Makefile\n\techo 'prefix=$(prefix)' > \"$@\".tmp\n\techo 'exec_prefix='`echo '$(exec_prefix)' | sed 's@^$(prefix)@$${prefix}@'` >> \"$@\".tmp\n\techo 'libdir='`echo '$(libdir)' | sed 's@^$(exec_prefix)@$${exec_prefix}@'` >> \"$@\".tmp\n\techo 'includedir='`echo '$(includedir)' | sed 's@^$(prefix)@$${prefix}@'` >> \"$@\".tmp\n\techo '' >> \"$@\".tmp\n\techo 'Name: $(PACKAGE)' >> \"$@\".tmp\n\techo 'Version: $(VERSION)' >> \"$@\".tmp\n\techo 'Description: Performance tools for C++' >> \"$@\".tmp\n\techo 'URL: https://github.com/gperftools/gperftools' >> \"$@\".tmp\n\techo 'Requires:' >> \"$@\".tmp\n\techo 'Libs: -L$${libdir} -ltcmalloc' >> \"$@\".tmp\n\techo 'Libs.private: $(PTHREAD_CFLAGS) $(PTHREAD_LIBS)' >> \"$@\".tmp\n\techo 'Cflags: -I$${includedir}' >> \"$@\".tmp\n\tmv -f \"$@\".tmp \"$@\"\n\nlibtcmalloc_minimal.pc: libtcmalloc.pc\n\tcat libtcmalloc.pc | sed s/-ltcmalloc/-ltcmalloc_minimal/ > \"$@\"\n\nlibtcmalloc_debug.pc: libtcmalloc.pc\n\tcat libtcmalloc.pc | sed s/-ltcmalloc/-ltcmalloc_debug/ > \"$@\"\n\nlibtcmalloc_minimal_debug.pc: libtcmalloc.pc\n\tcat libtcmalloc.pc | sed s/-ltcmalloc/-ltcmalloc_minimal_debug/ > \"$@\"\n\nlibprofiler.pc: libtcmalloc.pc\n\tcat libtcmalloc.pc | sed s/-ltcmalloc/-lprofiler/ > \"$@\"\n\n$(top_distdir)/ChangeLog:\n\tif test ! -f $(top_srcdir)/ChangeLog ; \\\n\t  then git --git-dir=$(top_srcdir)/.git --work-tree=$(top_srcdir) \\\n\t        log --stat -M -C --name-status --no-color \\\n\t       | fmt --split-only >$(top_distdir)/ChangeLog; \\\n\t  else cp $(top_srcdir)/ChangeLog $(top_distdir)/ChangeLog; fi\n\nEXTRA_DIST = $(SCRIPTS) \\\n             src/windows/get_mangled_names.cc src/windows/override_functions.cc \\\n             src/windows/CMakeLists.txt \\\n             docs/pprof.see_also $(WINDOWS_EXTRA) \\\n             gperftools.sln vsprojects vendor \\\n             $(top_srcdir)/src/*h $(top_srcdir)/src/base/*h \\\n             $(top_srcdir)/benchmark/*h \\\n             $(top_srcdir)/src/tests/*h \\\n             $(top_srcdir)/src/windows/*h $(top_srcdir)/src/gperftools/*h \\\n             CMakeLists.txt cmake\n\n# Windows wants write permission to .vcxproj files and maybe even sln files.\ndist-hook: $(top_distdir)/ChangeLog\n\ttest -e \"$(distdir)/vsprojects\" \\\n\t   && chmod -R u+w $(distdir)/*.sln $(distdir)/vsprojects/\n\trm -rf $(distdir)/vendor/googletest/googletest/src/.deps\n\trm -rf $(distdir)/vendor/libbacktrace/.deps\n\trm -rf $(distdir)/vendor/libbacktrace-integration/.deps\n\trm -f $(distdir)/src/config.h $(distdir)/src/gperftools/tcmalloc.h\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 56.306640625,
          "content": "== 25 September 2024\n\ngperftools 2.16 is out!\n\nOnly minor fixes have been made since RC release. See NEWS entry for\nRC release for actual set of changes.\n\n== 16 September 2024\n\ngperftools 2.16rc is out!\n\nThis release doesn't have major fixes or big headline features, but it\nhas quite a lot of internal modernizations and cleanups. By the number\nof commits, 2.16 is going to be our biggest release ever.\n\nThis release's main focus was making our code and building\ninfrastructure simpler, more straightforward, more portable, and more\nmodern.\n\nPlease note that the gperftools 2.16 release will be the last release\nwith the heap leak checker included. The time has come to drop this\nfeature entirely. All users should migrate to relevant gcc/clang\nsanitizers.\n\nHere are the most notable changes:\n\n* we've upgraded our C++ standard to C++ 17. Some fraction of our code\n  base was modernized.\n\n* We've integrated (vendored copy of) GoogleTest, and most tests now\n  use it. GoogleTest has helped us eliminate some legacy code and\n  reduce the number of tests that use shell scripts.\n\n* There are no more unnecessary wrappers around mutexes and threads\n  for unit tests. We now use C++ standard mutexes and threads in our\n  tests.\n\n* We've done the bulk of the work necessary to enable hidden\n  visibility. The most significant change is that tests no longer\n  reach into libtcmalloc's guts. We use a special TestingPortal\n  interface instead. We now offer the --enable-hidden-visibility\n  configure option, which does what it says. But please note that\n  hidden visibility is off by default for now.\n\n* autotools build was significantly refactored, modernized and\n  simplified.\n\n* The cmake build has also been radically simplified. The previous\n  version attempted to duplicate the same complexity that we had in\n  the autotools build and did not do it very well. More tests now pass\n  under cmake. But please note that cmake support is still not\n  entirely functional, and we're not yet able to promise anything\n  about it.\n\n* Thread-local storage access and emergency malloc integration have\n  been reworked. We now support emergency malloc even on systems with\n  emutls and similarly \"bad\" TLS support. As a result, backtracing is\n  now more reliable (e.g., on QNX).\n\n* OSX operator new/delete performance has been improved. OSX's malloc\n  performance is badly compromised by its support of malloc zones, so\n  we cannot help much (the same applies to much of our competition\n  among memory allocators). But the C++ new/delete API doesn't have to\n  integrate with this stuff, so we now directly replace those\n  functions for a sizeable speedup. Note that OSX performance is still\n  not on par with other \"prime tier\" OSes due to its lack of efficient\n  TLS support.\n\n* Long deprecated google/ headers have been deleted (use, e.g.,\n  \"gperftools/tcmalloc.h\" instead)\n\n* All clang builds now use -Wthread-safety and actually check\n  thread-safety declarations\n\n* Our code has stopped being incompatible with _TIME_BITS=64 on modern\n  GNU Linux systems (relevant only for 32-bit systems)\n\n* OpenSolaris build has been verified and fixed when needed\n\nThanks to the following people for code contributions:\n\n* Github user oPiZiL (build fix for gcc 7.5)\n\n* Github user zhangdexin (qnx fixes)\n\n* Ishant Goyal (support for configuring minimal per-thread cache size)\n\n* Lennox Ho (several build fixes and several fixes around Windows support)\n\n* Olivier Langlois\n\n* Sergey Fedorovhas (another fix for building gperftools on old PPC\n  OSX computers)\n\n* Xiang.Lin (several OSX fixes)\n\n* Yikai Zhao (aarch64 generic_fp stack frame validation)\n\nYou can find the list of all GitHub issues fixes in this release here:\n\nhttps://github.com/gperftools/gperftools/issues?q=label%3Afixed-in-2.16+is%3Aclosed\n\n== 5 Jan 2024\ngperftools 2.15 is out!\n\nThis release has the following bug fixes:\n\n* Xiaowei Wang has pointed out the pthread linking issue on cmake on\n  older glibcs (where -pthread is not implicit). See\n  https://github.com/gperftools/gperftools/pull/1473 for more details.\n\n* Mikael Simberg and Tom \"spot\" Callaway have pointed out the missing\n  symbols issue when linking PPC or i386\n  builds. https://github.com/gperftools/gperftools/issues/1474 has all\n  the details.\n\nHuge thanks to all contributors!\n\n== 31 Dec 2023\ngperftools 2.14 is out!\n\nThis release has the following set of notable changes:\n\n* Roman Geissler has contributed a fix to nasty initialization bug\n  introduced in 2.13 (see github issue #1452 for one example where it\n  fails).\n\n* spinlock delay support now has proper windows support. Instead of\n  simply sleeping, it uses WaitOnAddress (which is basically windows\n  equivalent of futexes). This improvement was contributed by Lennox\n  Ho.\n\n* we now have basic QNX support (basic malloc + heap profiler)\n  championed by Xiang.Lin. Thanks! Do note, however, that QNX doesn't\n  provide SIGPROF ticks, so there will be no cpu profiler support on\n  this OS.\n\n* Yikai Zhao has contributed several fixes to important corner cases\n  of generic_fp stacktrace method.\n\n* several people have contributed various improvements to our cmake\n  build: Lennox Ho, Sergey Fedorov, Mateusz Jakub Fila. But do note\n  that cmake build is still incomplete and best-effort.\n\n* Julian Schroeder have fixed generic_fp incompatibility with ARM\n  pointer auth.\n\n* Mateusz Jakub Fila has contributed implementation of mallocinfo2\n  function (64-bit version of mallinfo).\n\n* Lennox Ho has updated C malloc extension shims to include\n  {Set,Get}MemoryReleaseRate.\n\n* Lennox Ho has contributed the ability to disable malloc functions\n  patching on windows when TCMALLOC_DISABLE_REPLACEMENT=1 environment\n  variable is set.\n\n* User poljak181 has contributed a fix to infinite recursion in some\n  cases of malloc hooks (or user-replaced operator new) and\n  MallocExtension::instance().\n\n* Sergey Fedorov has contributed a fix to use MAP_ANON on some older\n  OSes without MAP_ANONYMOUS.\n\n* the way we detect working ucontext->pc extraction method was\n  reworked and is now fully compile-time as opposed to\n  config-time. This means no more duplication and mismatches between\n  autoconf and cmake bits in this area.\n\nList of relevant tickets can be seen online at:\nhttps://github.com/gperftools/gperftools/issues?q=label%3Afixed-in-2.14+\n\n== 11 Sep 2023\ngperftools 2.13 is out!\n\nThis release includes a few minor fixes:\n\n* Ivan Dlugos has fixed some issues with cmake and config.h defines.\n\n* 32-bit builds no longer require 64-bit atomics (which we wrongly\n  introduced in 2.11 and which broke builds on some 32-bit\n  architectures).\n\n* generic_fp backtracing method now uses robust address probing\n  method. The previous approach had occasional false positives, which\n  caused occasional rare crashes.\n\n* In some cases, MSVC generated TrivialOnce machine code that\n  deadlocked programs on startup. The issue is now fixed.\n\n== 24 Aug 2023\ngperftools 2.12 is out!\n\nBrett T. Warden contributed one significant fix. After a change in the\nprevious release, we installed broken pkg-config files. Brett noticed\nand fixed that. Huge thanks!\n\n== 14 Aug 2023\ngperftools 2.11 is out!\n\nFew minor fixes since rc couple weeks ago. Plus couple notable\ncontributions:\n\n* Artem Polyakov has contributed auto-detection of several MPI systems\n  w.r.t. filenames used by HEAPPROFILE and CPUPROFILE environment\n  variables. Also, we now support HEAPPROFILE_USE_PID and\n  CPUPROFILE_USE_PID environment variables that force profile\n  filenames to have pid appended. Which will be useful for some\n  programs that fork for parallelism. See\n  https://github.com/gperftools/gperftools/pull/1263 for details.\n\n* Ken Raffenetti has extended MPI detection mentioned above with\n  detection of MPICH system.\n\nThanks a lot!\n\n== 31 July 2023\ngperftools 2.11rc is out!\n\nMost notable change is that Linux/aarch64 and Linux/riscv are now\nfully supported. That is, all unit tests pass on those architectures\n(previously the heap leak checker was broken).\n\nAlso notable is that heap leak checker support is officially\ndeprecated as of this release. All bug fixes from now are on a best\neffort basis. For clarity we also declare that it is only expected to\nwork (for some definition of work) on Linux/x86 (all kinds),\nLinux/aarch64, Linux/arm, Linux/ppc (untested as of this writing) and\nLinux/mips (untested as well). While some functionality worked in the\npast on BSDs, it was never fully functional; and will never be. We\nstrongly recommend everyone to switch to asan and friends.\n\nFor major internal changes it is also worth mentioning that we now\nfully switched to C++-11 std::atomic. All custom OS- and arch-specific\natomic bits have been removed at last.\n\nAnother notable change is that mmap and sbrk hooks facility is now\nno-op. We keep API and ABI for formal compatibility, but the calls to\nadd mmap/sbrk hooks do nothing and return an error (whenever possible\nas part of API). There seem to be no users of it anyways, and mmap\nreplacement API that is part of that facility really screwed up 64-bit\noffsets on (some/most) 32-bit systems. Internally for heap profiler\nand heap checker we have a new, but non-public API (see mmap_hook.h).\n\nMost tests now pass on NetBSD x86-64 (I tested on version 9.2). And\nonly one that fails is new stacktrace test for stacktraces from signal\nhandler (so there could be some imperfections for cpu profiles).\n\nWe don't warn people away from the libgcc stacktrace capturing method\nanymore. In fact users on most recent glibc-s are advised to use it\n(pass --enable-libgcc-unwinder-by-default). This is thanks to the\ndl_find_object API offered by glibc which allows this implementation\nto be fully async-signal-safe. Modern Linux distros should from now on\nbuild their gperftools package with this enabled (other than those\nbuilt on top of musl).\n\ngeneric_fp and generic_fp_unsafe stacktrace capturing methods have\nbeen expanded for more architectures and even some basic non-Linux\nsupport. We have completely removed old x86-specific frame pointer\nstacktrace implementation in favor of those 2. _unsafe one should be\nroughly equivalent to the old x86 method. And 'safe' one is\nrecommended as a new default for those who want FP-based\nstacktracing. Safe implementation robustly checks memory before\naccessing it, preventing unlikely, but not impossible crashes when\nframe pointers are bogus.\n\nOn platforms that support it, we now build gperftools with\n\"-fno-omit-frame-pointer -momit-leaf-frame-pointer\". This makes\ngperftools mostly frame-pointer-ful, but without performance hit in\nplaces that matter (this is how Google builds their binaries\nBTW). That should cover gcc (at least) on x86, aarch64 and\nriscv. Intention for this change is to make distro-shipped\nlibtcmalloc.so compatible with frame-pointer stacktrace capturing (for\nthose who still do heap profiling, for example). Of course, passing\n--enable-frame-pointers still gives you full frame pointers (i.e. even\nfor leaf functions).\n\nThere is now support for detecting actual page size at\nruntime. tcmalloc will now allocate memory in units of this page\nsize. It particularly helps on arms with 64k pages to return memory\nback to the kernel. But it is somewhat controversial, because it\neffectively bumps tcmalloc logical page size on those machines\npotentially increasing fragmentation. In any case, there is now a new\nenvironment variable TCMALLOC_OVERRIDE_PAGESIZE allowing people to\noverride this check. I.e. to either reduce effective page size down to\ntcmalloc's logical page size or to increase it.\n\nMallocExtension::MarkThreadTemporarilyIdle has been changed to be\nidentical to MarkThreadIdle. MarkThreadTemporarilyIdle is believed to\nbe unused, anyways. See issue #880 for details.\n\nThere are a whole bunch of smaller fixes. Many of those smaller fixes\nhad no associated ticket, but some had. People are advised to see here\nfor list of notable tickets closed in this release:\nhttps://github.com/gperftools/gperftools/issues?q=label%3Afixed-in-2.11+\n\nSome of those tickets are quite notable (fixes for rare deadlocks in\ncpu profiler ProfilerStop or while capturing heap growth stacktraces\n(aka growthz)).\n\nHere is list of notable contributions:\n\n* Chris Cambly has contributed initial support for AIX\n\n* Ali Saidi has contributed SpinlockPause implementation for aarch64\n\n* Henrik Reinstädtler has contributed fix for cpuprofiler on aarch64\n  OSX\n\n* Gabriel Marin has backported Chromium's commit for always sanity\n  checking large frees\n\n* User zhangyiru has contributed a fix to report the number of leaked\n  bytes as size_t instead of (usually 32-bit) int.\n\n* Sergey Fedorov has contributed some fix for building on older\n  ppc-based OSX-es\n\n* User tigeran has removed unused using declaration\n\nHuge thanks to all contributors.\n\n== 30 May 2022 ==\ngperftools 2.10 is out!\n\nHere are notable changes:\n\n* Matt T. Proud contributed documentation fix to call Go programming\n  language by it's true name instead of golang.\n\n* Robert Scott contributed debugallocator feature to use readable\n  (PROT_READ) fence pages. This is activated by\n  TCMALLOC_PAGE_FENCE_READABLE environment veriable.\n\n* User stdpain contributed fix for cmake detection of libunwind.\n\n* Natale Patriciello contributed fix for OSX Monterey support.\n\n* Volodymyr Nikolaichuk contributed support for returning memory back\n  to OS by using mmap with MAP_FIXED and PROT_NONE. It is off by\n  default and enabled by preprocessor define:\n  FREE_MMAP_PROT_NONE. This should help OSes that don't support\n  Linux-style madvise MADV_DONTNEED or BSD-style MADV_FREE.\n\n* Jingyun Hua has contributed basic support for LoongArch.\n\n* Github issue #1338 of failing to build on some recent musl versions\n  has been fixed.\n\n* Github issue #1321 of failing to ship cmake bits with .tar.gz\n  archive has been fixed.\n\n== 2 March 2021 ==\ngperftools 2.9.1 is out!\n\nMinor fixes landed since previous release:\n\n* OSX builds new prefer backtrace() and have somewhat working heap\n  sampling.\n\n* Incorrect assertion failure was fixed that crashed tcmalloc if\n  assertions were on and sized delete was used. More details in github\n  issue #1254.\n\n== 21 February 2021 ==\ngperftools 2.9 is out!\n\nFew more changes landed compared to rc:\n\n* Venkatesh Srinivas has contributed thread-safety annotations\n  support.\n\n* couple more unit test bugs that caused tcmalloc_unittest to fail on\n  recent clang has been fixed.\n\n* usage of unsupportable linux_syscall_support.h has been removed from\n  few places. Building with --disable-heap-checker now completely\n  avoids it. Expect complete death of this header in next major\n  release.\n\n== 14 February 2021 ==\ngperftools 2.9rc is out!\n\nHere are notable changes:\n\n* Jarno Rajahalme has contributed fix for crashing bug in syscalls\n  support for aarch64.\n\n* User SSE4 has contributed basic support for Elbrus 2000 architecture\n  (!)\n\n* Venkatesh Srinivas has contributed cleanup to atomic ops.\n\n* Đoàn Trần Công Danh has fixed cpu profiler compilation on musl.\n\n* there is now better backtracing support for aarch64 and\n  riscv. x86-64 with frame pointers now also defaults to this new\n  \"generic\" frame pointer backtracer.\n\n* emergency malloc is now enabled by default. Fixes hang on musl when\n  libgcc backtracer is enabled.\n\n* bunch of legacy config tests has been removed\n\n== 20 December 2020 ==\ngperftools 2.8.1 is out!\n\nHere are notable changes:\n\n* previous release contained change to release memory without page\n  heap lock, but this change had at least one bug that caused to\n  crashes and corruption when running under aggressive decommit mode\n  (this is not default). While we check for other bugs, this feature\n  was reverted. See github issue #1204 and issue #1227.\n\n* stack traces depth captured by gperftools is now up to 254 levels\n  deep. Thanks to Kerrick Staley for this small but useful tweak.\n\n* Levon Ter-Grigoryan has contributed small fix for compiler warning.\n\n* Grant Henke has contributed updated detection of program counter\n  register for OS X on arm64.\n\n* Tim Gates has contributed small typo fix.\n\n* Steve Langasek has contributed basic build fixes for riscv64 (!).\n\n* Isaac Hier and okhowang have contributed premiliminary port of build\n  infrastructure to cmake. This works, but it is very premiliminary.\n  Autotools-based build is the only officially supported build for\n  now.\n\n== 6 July 2020 ==\ngperftools 2.8 is out!\n\nHere are notable changes:\n\n* ProfilerGetStackTrace is now officially supported API for\n  libprofiler. Contributed by Kirill Müller.\n\n* Build failures on mingw were fixed. This fixed issue #1108.\n\n* Build failure of page_heap_test on MSVC was fixed.\n\n* Ryan Macnak contributed fix for compiling linux syscall support on\n  i386 and recent GCCs. This fixed issue #1076.\n\n* test failures caused by new gcc 10 optimizations were fixed. Same\n  change also fixed tests on clang.\n\n== 8 Mar 2020 ==\ngperftools 2.8rc is out!\n\nHere are notable changes:\n\n* building code now requires c++11 or later. Bundled MSVC project was\n  converted to Visual Studio 2015.\n\n* User obones contributed fix for windows x64 TLS callbacks. This\n  fixed leak of thread caches on thread exists in 64-bit windows.\n\n* releasing memory back to kernel is now made with page heap lock\n  dropped.\n\n* HoluWu contributed fix for correct malloc patching on debug builds\n  on windows. This configuration previously crashed.\n\n* Romain Geissler contributed fix for tls access during early tls\n  initialization on dlopen.\n\n* large allocation reports are now silenced by default. Since not all\n  programs want their stderr polluted by those messages. Contributed\n  by Junhao Li.\n\n* HolyWu contributed improvements to MSVC project files. Notably,\n  there is now project for \"overriding\" version of tcmalloc.\n\n* MS-specific _recalloc is now correctly zeroing only malloced\n  part. This fix was contributed by HolyWu.\n\n* Brian Silverman contributed correctness fix to sampler_test.\n\n* Gabriel Marin ported few fixes from chromium's fork. As part of\n  those fixes, we reduced number of static initializers (forbidden in\n  chromium). Also we now syscalls via syscall function instead of\n  reimplementing direct way to make syscalls on each platform.\n\n* Brian Silverman fixed flakiness in page heap test.\n\n* There is now configure flag to skip installing perl pprof, since\n  external golang pprof is much superior. --disable-deprecated-pprof\n  is the flag.\n\n* Fabric Fontaine contributed fixes to drop use of nonstandard\n  __off64_t type.\n\n* Fabrice Fontaine contributed build fix to check for presence of\n  nonstandard __sbrk functions. It is only used by mmap hooks code and\n  (rightfully) not available on musl.\n\n* Fabrice Fontaine contributed build fix around mmap64 macro and\n  function conflict in same cases.\n\n* there is now configure time option to enable aggressive decommit by\n  default. Contributed by Laurent\n  Stacul. --enable-aggressive-decommit-by-default is the flag.\n\n* Tulio Magno Quites Machado Filho contributed build fixes for ppc\n  around ucontext access.\n\n* User pkubaj contributed couple build fixes for FreeBSD/ppc.\n\n* configure now always assumes we have mmap. This fixes configure\n  failures on some linux guests inside virtualbox. This fixed issue\n  #1008.\n\n* User shipujin contributed syscall support fixes for mips64 (big and\n  little endian).\n\n* Henrik Edin contributed configurable support for wide range of\n  malloc page sizes. 4K, 8K, 16K, 32K, 64K, 128K and 256K are now\n  supported via existing --with-tcmalloc-pagesize flag to configure.\n\n* Jon Kohler added overheads fields to per-size-class textual\n  stats. Stats that are available via\n  MallocExtension::instance()->GetStats().\n\n* tcmalloc can now avoid fallback from memfs to default sys\n  allocator. TCMALLOC_MEMFS_DISABLE_FALLBACK switches this on. This\n  was contributed by Jon Kohler.\n\n* Ilya Leoshkevich fixed mmap syscall support on s390.\n\n* Todd Lipcon contributed small build warning fix.\n\n* User prehistoricpenguin contributed misc source file mode fixes (we\n  still had few few c++ files marked executable).\n\n* User invalid_ms_user contributed fix for typo.\n\n* Jakub Wilk contributed typos fixes.\n\n== 29 Apr 2018 ==\ngperftools 2.7 is out!\n\nFew people contributed minor, but important fixes since rc.\n\nChanges:\n\n* bug in span stats printing introduced by new scalable page heap\n  change was fixed.\n\n* Christoph Müllner has contributed couple warnings fixes and initial\n  support for aarch64_ilp32 architecture.\n\n* Ben Dang contributed documentation fix for heap checker.\n\n* Fabrice Fontaine contributed fixed for linking benchmarks with\n  --disable-static.\n\n* Holy Wu has added sized deallocation unit tests.\n\n* Holy Wu has enabled support of sized deallocation (c++14) on recent\n  MSVC.\n\n* Holy Wu has fixed MSVC build in WIN32_OVERRIDE_ALLOCATORS mode. This\n  closed issue #716.\n\n* Holy Wu has contributed cleanup of config.h used on windows.\n\n* Mao Huang has contributed couple simple tcmalloc changes from\n  chromium code base. Making our tcmalloc forks a tiny bit closer.\n\n* issue #946 that caused compilation failures on some Linux clang\n  installations has been fixed. Much thanks to github user htuch for\n  helping to diagnose issue and proposing a fix.\n\n* Tulio Magno Quites Machado Filho has contributed build-time fix for\n  PPC (for problem introduced in one of commits since RC).\n\n== 18 Mar 2018 ==\ngperftools 2.7rc is out!\n\nChanges:\n\n* Most notable change in this release is that very large allocations\n  (>1MiB) are now handled be O(log n) implementation. This is\n  contributed by Todd Lipcon based on earlier work by Aliaksei\n  Kandratsenka and James Golick. Special thanks to Alexey Serbin for\n  contributing OSX fix for that commit.\n\n* detection of sized deallocation support is improved. Which should\n  fix another set of issues building on OSX. Much thanks to Alexey\n  Serbin for reporting the issue, suggesting a fix and verifying it.\n\n* Todd Lipcon made a change to extend page heaps freelists to 1 MiB\n  (up from 1MiB - 8KiB). This may help a little for some workloads.\n\n* Ishan Arora contributed typo fix to docs\n\n== 9 Dec 2017 ==\ngperftools 2.6.3 is out!\n\nJust two fixes were made in this release:\n\n* Stephan Zuercher has contributed a build fix for some recent XCode\n  versions. See issue #942 for more details.\n\n* assertion failure on some windows builds introduced by 2.6.2 was\n  fixed. Thanks to github user nkeemik for reporting it and testing\n  fix. See issue #944 for more details.\n\n== 30 Nov 2017 ==\ngperftools 2.6.2 is out!\n\nMost notable change is recently added support for C++17 over-aligned\nallocation operators contributed by Andrey Semashev. I've extended his\nimplemention to have roughly same performance as malloc/new. This\nrelease also has native support for C11 aligned_alloc.\n\nRest is mostly bug fixes:\n\n* Jianbo Yang has contributed a fix for potentially severe data race\n  introduced by malloc fast-path work in gperftools 2.6. This race\n  could cause occasional violation of total thread cache size\n  constraint. See issue #929 for more details.\n\n* Correct behavior in out-of-memory condition in fast-path cases was\n  restored. This was another bug introduced by fast-path optimization\n  in gperftools 2.6 which caused operator new to silently return NULL\n  instead of doing correct C++ OOM handling (calling new_handler and\n  throwing bad_alloc).\n\n* Khem Raj has contributed couple build fixes for newer glibcs (ucontext_t vs\n  struct ucontext and loff_t definition)\n\n* Piotr Sikora has contributed build fix for OSX (not building unwind\n  benchmark). This was issue #910 (thanks to Yuriy Solovyov for\n  reporting it).\n\n* Dorin Lazăr has contributed fix for compiler warning\n\n* issue #912 (occasional deadlocking calling getenv too early on\n  windows) was fixed. Thanks to github user shangcangriluo for\n  reporting it.\n\n* Couple earlier lsan-related commits still causing occasional issues\n  linking on OSX has been reverted. See issue #901.\n\n* Volodimir Krylov has contributed GetProgramInvocationName for FreeBSD\n\n* changsu lee has contributed couple minor correctness fixes (missing\n  va_end() and missing free() call in rarely executed Symbolize path)\n\n* Andrew C. Morrow has contributed some more page heap stats. See issue\n  #935.\n\n* some cases of built-time warnings from various gcc/clang versions\n  about throw() declarations have been fixes.\n\n== 9 July 2017 ==\n\ngperftools 2.6.1 is out! This is mostly bug-fixes release.\n\n* issue #901: build issue on OSX introduced in last-time commit in 2.6\n  was fixed (contributed by Francis Ricci)\n\n* tcmalloc_minimal now works on 32-bit ABI of mips64. This is issue\n  #845. Much thanks to Adhemerval Zanella and github user mtone.\n\n* Romain Geissler contributed build fix for -std=c++17. This is pull\n  request #897.\n\n* As part of fixing issue #904, tcmalloc atfork handler is now\n  installed early. This should fix slight chance of hitting deadlocks\n  at fork in some cases.\n\n== 4 July 2017 ==\n\ngperftools 2.6 is out!\n\n* Kim Gräsman contributed documentation update for HEAPPROFILESIGNAL\n  environment variable\n\n* KernelMaker contributed fix for population of min_object_size field\n  returned by MallocExtension::GetFreeListSizes\n\n* commit 8c3dc52fcfe0 \"issue-654: [pprof] handle split text segments\"\n  was reverted. Some OSX users reported issues with this commit. Given\n  our pprof implementation is strongly deprecated it is best to drop\n  recently introduced features rather than breaking it badly.\n\n* Francis Ricci contributed improvement for interaction with leak\n  sanitizer.\n\n== 22 May 2017 ==\n\ngperftools 2.6rc4 is out!\n\nDynamic sized delete is disabled by default again. There is no hope of\nit working with eager dynamic symbols resolution (-z now linker\nflag). More details in\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1452813\n\n== 21 May 2017 ==\n\ngperftools 2.6rc3 is out!\n\ngperftools compilation on older systems (e.g. rhel 5) was fixed. This\nwas originally reported in github issue #888.\n\n== 14 May 2017 ==\n\ngperftools 2.6rc2 is out!\n\nJust 2 small fixes on top of 2.6rc. Particularly, Rajalakshmi\nSrinivasaraghavan contributed build fix for ppc32.\n\n== 14 May 2017 ==\n\ngperftools 2.6rc is out!\n\nHighlights of this release are performance work on malloc fast-path\nand support for more modern visual studio runtimes, and deprecation of\nbundled pprof. Another significant performance-affecting changes are\nreverting central free list transfer batch size back to 32 and\ndisabling of aggressive decommit mode by default.\n\nNote, while we still ship perl implementation of pprof, everyone is\nstrongly advised to use golang reimplementation of pprof from\nhttps://github.com/google/pprof.\n\nHere are notable changes in more details (and see ChangeLog for full\ndetails):\n\n* a bunch of performance tweaks to tcmalloc fast-path were\n  merged. This speeds up critical path of tcmalloc by few tens of\n  %. Well tuned and allocation-heavy programs should see substantial\n  performance boost (should apply to all modern elf platforms). This\n  is based on Google-internal tcmalloc changes for fast-path (with\n  obvious exception of lacking per-cpu mode, of course). Original\n  changes were made by Aliaksei Kandratsenka. And Andrew Hunter,\n  Dmitry Vyukov and Sanjay Ghemawat contributed with reviews and\n  discussions.\n\n* Architectures with 48 bits address space (x86-64 and aarch64) now\n  use faster 2 level page map. This was ported from Google-internal\n  change by Sanjay Ghemawat.\n\n* Default value of TCMALLOC_TRANSFER_NUM_OBJ was returned back to\n  32. Larger values have been found to hurt certain programs (but help\n  some other benchmarks). Value can still be tweaked at run time via\n  environment variable.\n\n* tcmalloc aggressive decommit mode is now disabled by default\n  again. It was found to degrade performance of certain tensorflow\n  benchmarks. Users who prefer smaller heap over small performance win\n  can still set environment variable TCMALLOC_AGGRESSIVE_DECOMMIT=t.\n\n* runtime switchable sized delete support has be fixed and re-enabled\n  (on GNU/Linux). Programs that use C++ 14 or later that use sized\n  delete can again be sped up by setting environment variable\n  TCMALLOC_ENABLE_SIZED_DELETE=t. Support for enabling sized\n  deallication support at compile-time is still present, of course.\n\n* tcmalloc now explicitly avoids use of MADV_FREE on Linux, unless\n  TCMALLOC_USE_MADV_FREE is defined at compile time. This is because\n  performance impact of MADV_FREE is not well known. Original issue\n  #780 raised by Mathias Stearn.\n\n* issue #786 with occasional deadlocks in stack trace capturing via\n  libunwind was fixed. It was originally reported as Ceph issue:\n  http://tracker.ceph.com/issues/13522\n\n* ChangeLog is now automatically generated from git log. Old ChangeLog\n  is now ChangeLog.old.\n\n* tcmalloc now provides implementation of nallocx. Function was\n  originally introduced by jemalloc and can be used to return real\n  allocation size given allocation request size. This is ported from\n  Google-internal tcmalloc change contributed by Dmitry Vyukov.\n\n* issue #843 which made tcmalloc crash when used with erlang runtime\n  was fixed.\n\n* issue #839 which caused tcmalloc's aggressive decommit mode to\n  degrade performance in some corner cases was fixed.\n\n* Bryan Chan contributed support for 31-bit s390.\n\n* Brian Silverman contributed compilation fix for 32-bit ARMs\n\n* Issue #817 that was causing tcmalloc to fail on windows 10 and\n  later, as well as on recent msvc was fixed. We now patch _free_base\n  as well.\n\n* a bunch of minor documentaion/typos fixes by: Mike Gaffney\n  <mike@uberu.com>, iivlev <iivlev@productengine.com>, savefromgoogle\n  <savefromgoogle@users.noreply.github.com>, John McDole\n  <jtmcdole@gmail.com>, zmertens <zmertens@asu.edu>, Kirill Müller\n  <krlmlr@mailbox.org>, Eugene <n.eugene536@gmail.com>, Ola Olsson\n  <ola1olsson@gmail.com>, Mostyn Bramley-Moore <mostynb@opera.com>\n\n* Tulio Magno Quites Machado Filho has contributed removal of\n  deprecated glibc malloc hooks.\n\n* Issue #827 that caused intercepting malloc on osx 10.12 to fail was\n  fixed, by copying fix made by Mike Hommey to jemalloc. Much thanks\n  to Koichi Shiraishi and David Ribeiro Alves for reporting it and\n  testing fix.\n\n* Aman Gupta and Kenton Varda contributed minor fixes to pprof (but\n  note again that pprof is deprecated)\n\n* Ryan Macnak contributed compilation fix for aarch64\n\n* Francis Ricci has fixed unaligned memory access in debug allocator\n\n* TCMALLOC_PAGE_FENCE_NEVER_RECLAIM now actually works thanks to\n  contribution by Andrew Morrow.\n\n== 12 Mar 2016 ==\n\ngperftools 2.5 is out!\n\nJust single bugfix was merged after rc2. Which was fix for issue #777.\n\n== 5 Mar 2016 ==\n\ngperftools 2.5rc2 is out!\n\nNew release contains just few commits on top of first release\ncandidate. One of them is build fix for Visual Studio. Another\nsignificant change is that dynamic sized delete is now disabled by\ndefault. It turned out that IFUNC relocations are not supporting our\nadvanced use case on all platforms and in all cases.\n\n== 21 Feb 2016 ==\n\ngperftools 2.5rc is out!\n\nHere are major changes since 2.4:\n\n* we've moved to github!\n\n* Bryan Chan has contributed s390x support\n\n* stacktrace capturing via libgcc's _Unwind_Backtrace was implemented\n  (for architectures with missing or broken libunwind).\n\n* \"emergency malloc\" was implemented. Which unbreaks recursive calls\n  to malloc/free from stacktrace capturing functions (such us glib'c\n  backtrace() or libunwind on arm). It is enabled by\n  --enable-emergency-malloc configure flag or by default on arm when\n  --enable-stacktrace-via-backtrace is given. It is another fix for a\n  number common issues people had on platforms with missing or broken\n  libunwind.\n\n* C++14 sized-deallocation is now supported (on gcc 5 and recent\n  clangs). It is off by default and can be enabled at configure time\n  via --enable-sized-delete. On GNU/Linux it can also be enabled at\n  run-time by either TCMALLOC_ENABLE_SIZED_DELETE environment variable\n  or by defining tcmalloc_sized_delete_enabled function which should\n  return 1 to enable it.\n\n* we've lowered default value of transfer batch size to 512. Previous\n  value (bumped up in 2.1) was too high and caused performance\n  regression for some users. 512 should still give us performance\n  boost for workloads that need higher transfer batch size while not\n  penalizing other workloads too much.\n\n* Brian Silverman's patch finally stopped arming profiling timer\n  unless profiling is started.\n\n* Andrew Morrow has contributed support for obtaining cache size of the\n  current thread and softer idling (for use in MongoDB).\n\n* we've implemented few minor performance improvements, particularly\n  on malloc fast-path.\n\nA number of smaller fixes were made. Many of them were contributed:\n\n* issue that caused spurious profiler_unittest.sh failures was fixed.\n\n* Jonathan Lambrechts contributed improved callgrind format support to\n  pprof.\n\n* Matt Cross contributed better support for debug symbols in separate\n  files to pprof.\n\n* Matt Cross contributed support for printing collapsed stack frame\n  from pprof aimed at producing flame graphs.\n\n* Angus Gratton has contributed documentation fix mentioning that on\n  windows only tcmalloc_minimal is supported.\n\n* Anton Samokhvalov has made tcmalloc use mi_force_{un,}lock on OSX\n  instead of pthread_atfork. Which apparently fixes forking\n  issues tcmalloc had on OSX.\n\n* Milton Chiang has contributed support for building 32-bit gperftools\n  on arm8.\n\n* Patrick LoPresti has contributed support for specifying alternative\n  profiling signal via CPUPROFILE_TIMER_SIGNAL environment variable.\n\n* Paolo Bonzini has contributed support configuring filename for\n  sending malloc tracing output via TCMALLOC_TRACE_FILE environment\n  variable.\n\n* user spotrh has enabled use of futex on arm.\n\n* user mitchblank has contributed better declaration for arg-less\n  profiler functions.\n\n* Tom Conerly contributed proper freeing of memory allocated in\n  HeapProfileTable::FillOrderedProfile on error paths.\n\n* user fdeweerdt has contributed curl arguments handling fix in pprof\n\n* Frederik Mellbin fixed tcmalloc's idea of mangled new and delete\n  symbols on windows x64\n\n* Dair Grant has contributed cacheline alignment for ThreadCache\n  objects\n\n* Fredrik Mellbin has contributed updated windows/config.h for Visual\n  Studio 2015 and other windows fixes.\n\n* we're not linking libpthread to libtcmalloc_minimal anymore. Instead\n  libtcmalloc_minimal links to pthread symbols weakly. As a result\n  single-threaded programs remain single-threaded when linking to or\n  preloading libtcmalloc_minimal.so.\n\n* Boris Sazonov has contributed mips compilation fix and printf misue\n  in pprof.\n\n* Adhemerval Zanella has contributed alignment fixes for statically\n  allocated variables.\n\n* Jens Rosenboom has contributed fixes for heap-profiler_unittest.sh\n\n* gshirishfree has contributed better description for GetStats method.\n\n* cyshi has contributed spinlock pause fix.\n\n* Chris Mayo has contributed --docdir argument support for configure.\n\n* Duncan Sands has contributed fix for function aliases.\n\n* Simon Que contributed better include for malloc_hook_c.h\n\n* user wmamrak contributed struct timespec fix for Visual Studio 2015.\n\n* user ssubotin contributed typo in PrintAvailability code.\n\n\n== 10 Jan 2015 ==\n\ngperftools 2.4 is out! The code is exactly same as 2.4rc.\n\n== 28 Dec 2014 ==\n\ngperftools 2.4rc is out!\n\nHere are changes since 2.3:\n\n* enabled aggressive decommit option by default. It was found to\n  significantly improve memory fragmentation with negligible impact on\n  performance. (Thanks to investigation work performed by Adhemerval\n  Zanella)\n\n* added ./configure flags for tcmalloc pagesize and tcmalloc\n  allocation alignment. Larger page sizes have been reported to\n  improve performance occasionally. (Patch by Raphael Moreira Zinsly)\n\n* sped-up hot-path of malloc/free. By about 5% on static library and\n  about 10% on shared library. Mainly due to more efficient checking\n  of malloc hooks.\n\n* improved stacktrace capturing in cpu profiler (due to issue found by\n  Arun Sharma). As part of that issue pprof's handling of cpu profiles\n  was also improved.\n\n== 7 Dec 2014 ==\n\ngperftools 2.3 is out!\n\nHere are changes since 2.3rc:\n\n* (issue 658) correctly close socketpair fds on failure (patch by glider)\n\n* libunwind integration can be disabled at configure time (patch by\n  Raphael Moreira Zinsly)\n\n* libunwind integration is disabled by default for ppc64 (patch by\n  Raphael Moreira Zinsly)\n\n* libunwind integration is force-disabled for OSX. It was not used by\n  default anyways. Fixes compilation issue I saw.\n\n== 2 Nov 2014 ==\n\ngperftools 2.3rc is out!\n\nMost small improvements in this release were made to pprof tool.\n\nNew experimental Linux-only (for now) cpu profiling mode is a notable\nbig improvement.\n\nHere are notable changes since 2.2.1:\n\n* (issue-631) fixed debugallocation miscompilation on mmap-less\n  platforms (courtesy of user iamxujian)\n\n* (issue-630) reference to wrong PROFILE (vs. correct CPUPROFILE)\n  environment variable was fixed (courtesy of WenSheng He)\n\n* pprof now has option to display stack traces in output for heap\n  checker (courtesy of Michael Pasieka)\n\n* (issue-636) pprof web command now works on mingw\n\n* (issue-635) pprof now handles library paths that contain spaces\n  (courtesy of user mich...@sebesbefut.com)\n\n* (issue-637) pprof now has an option to not strip template arguments\n  (patch by jiakai)\n\n* (issue-644) possible out-of-bounds access in GetenvBeforeMain was\n  fixed (thanks to user abyss.7)\n\n* (issue-641) pprof now has an option --show_addresses (thanks to user\n  yurivict). New option prints instruction address in addition to\n  function name in stack traces\n\n* (issue-646) pprof now works around some issues of addr2line\n  reportedly when DWARF v4 format is used (patch by Adam McNeeney)\n\n* (issue-645) heap profiler exit message now includes remaining memory\n  allocated info (patch by user yurivict)\n\n* pprof code that finds location of /proc/<pid>/maps in cpu profile\n  files is now fixed (patch by Ricardo M. Correia)\n\n* (issue-654) pprof now handles \"split text segments\" feature of\n  Chromium for Android. (patch by simonb)\n\n* (issue-655) potential deadlock on windows caused by early call to\n  getenv in malloc initialization code was fixed (bug reported and fix\n  proposed by user zndmitry)\n\n* incorrect detection of arm 6zk instruction set support\n  (-mcpu=arm1176jzf-s) was fixed. (Reported by pedronavf on old\n  issue-493)\n\n* new cpu profiling mode on Linux is now implemented. It sets up\n  separate profiling timers for separate threads. Which improves\n  accuracy of profiling on Linux a lot. It is off by default. And is\n  enabled if both librt.f is loaded and CPUPROFILE_PER_THREAD_TIMERS\n  environment variable is set. But note that all threads need to be\n  registered via ProfilerRegisterThread.\n\n== 21 Jun 2014 ==\n\ngperftools 2.2.1 is out!\n\nHere's list of fixes:\n\n* issue-626 was closed. Which fixes initialization statically linked\n  tcmalloc.\n\n* issue 628 was closed. It adds missing header file into source\n  tarball. This fixes for compilation on PPC Linux.\n\n== 3 May 2014 ==\n\ngperftools 2.2 is out!\n\nHere are notable changes since 2.2rc:\n\n* issue 620 (crash on windows when c runtime dll is reloaded) was\n  fixed\n\n== 19 Apr 2014 ==\n\ngperftools 2.2rc is out!\n\nHere are notable changes since 2.1:\n\n* a number of fixes for a number compilers and platforms. Notably\n  Visual Studio 2013, recent mingw with c++ threads and some OSX\n  fixes.\n\n* we now have mips and mips64 support! (courtesy of Jovan Zelincevic,\n  Jean Lee, user xiaoyur347 and others)\n\n* we now have aarch64 (aka arm64) support! (contributed by Riku\n  Voipio)\n\n* there's now support for ppc64-le (by Raphael Moreira Zinsly and\n  Adhemerval Zanella)\n\n* there's now some support of uclibc (contributed by user xiaoyur347)\n\n* google/ headers will now give you deprecation warning. They are\n  deprecated since 2.0\n\n* there's now new api: tc_malloc_skip_new_handler (ported from chromium\n  fork)\n\n* issue-557: added support for dumping heap profile via signal (by\n  Jean Lee)\n\n* issue-567: Petr Hosek contributed SysAllocator support for windows\n\n* Joonsoo Kim contributed several speedups for central freelist code\n\n* TCMALLOC_MAX_TOTAL_THREAD_CACHE_BYTES environment variable now works\n\n* configure scripts are now using AM_MAINTAINER_MODE. It'll only\n  affect folks who modify source from .tar.gz and want automake to\n  automatically rebuild Makefile-s. See automake documentation for\n  that.\n\n* issue-586: detect main executable even if PIE is active (based on\n  patch by user themastermind1). Notably, it fixes profiler use with\n  ruby.\n\n* there is now support for switching backtrace capturing method at\n  runtime (via TCMALLOC_STACKTRACE_METHOD and\n  TCMALLOC_STACKTRACE_METHOD_VERBOSE environment variables)\n\n* there is new backtrace capturing method using -finstrument-functions\n  prologues contributed by user xiaoyur347\n\n* few cases of crashes/deadlocks in profiler were addressed. See\n  (famous) issue-66, issue-547 and issue-579.\n\n* issue-464 (memory corruption in debugalloc's realloc after\n  memallign) is now fixed\n\n* tcmalloc is now able to release memory back to OS on windows\n  (issue-489). The code was ported from chromium fork (by a number of\n  authors).\n\n* Together with issue-489 we ported chromium's \"aggressive decommit\"\n  mode. In this mode (settable via malloc extension and via\n  environment variable TCMALLOC_AGGRESSIVE_DECOMMIT), free pages are\n  returned back to OS immediately.\n\n* MallocExtension::instance() is now faster (based on patch by\n  Adhemerval Zanella)\n\n* issue-610 (hangs on windows in multibyte locales) is now fixed\n\nThe following people helped with ideas or patches (based on git log,\nsome contributions purely in bugtracker might be missing): Andrew\nC. Morrow, yurivict, Wang YanQing, Thomas Klausner,\ndavide.italiano@10gen.com, Dai MIKURUBE, Joon-Sung Um, Jovan\nZelincevic, Jean Lee, Petr Hosek, Ben Avison, drussel, Joonsoo Kim,\nHannes Weisbach, xiaoyur347, Riku Voipio, Adhemerval Zanella, Raphael\nMoreira Zinsly\n\n== 30 July 2013 ==\n\ngperftools 2.1 is out!\n\nJust few fixes where merged after rc. Most notably:\n\n* Some fixes for debug allocation on POWER/Linux\n\n== 20 July 2013 ==\n\ngperftools 2.1rc is out!\n\nAs a result of more than a year of contributions we're ready for 2.1\nrelease.\n\nBut before making that step I'd like to create RC and make sure people\nhave chance to test it.\n\nHere are notable changes since 2.0:\n\n* fixes for building on newer platforms. Notably, there's now initial\n  support for x32 ABI (--enable-minimal only at this time))\n\n* new getNumericProperty stats for cache sizes\n\n* added HEAP_PROFILER_TIME_INTERVAL variable (see documentation)\n\n* added environment variable to control heap size (TCMALLOC_HEAP_LIMIT_MB)\n\n* added environment variable to disable release of memory back to OS\n  (TCMALLOC_DISABLE_MEMORY_RELEASE)\n\n* cpu profiler can now be switched on and off by sending it a signal\n  (specified in CPUPROFILESIGNAL)\n\n* (issue 491) fixed race-ful spinlock wake-ups\n\n* (issue 496) added some support for fork-ing of process that is using\n  tcmalloc\n\n* (issue 368) improved memory fragmentation when large chunks of\n  memory are allocated/freed\n\n== 03 February 2012 ==\n\nI've just released gperftools 2.0\n\nThe `google-perftools` project has been renamed to `gperftools`.  I\n(csilvers) am stepping down as maintainer, to be replaced by\nDavid Chappelle.  Welcome to the team, David!  David has been an\nan active contributor to perftools in the past -- in fact, he's the\nonly person other than me that already has commit status.  I am\npleased to have him take over as maintainer.\n\nI have both renamed the project (the Google Code site renamed a few\nweeks ago), and bumped the major version number up to 2, to reflect\nthe new community ownership of the project.  Almost all the\n[http://gperftools.googlecode.com/svn/tags/gperftools-2.0/ChangeLog changes]\nare related to the renaming.\n\nThe main functional change from google-perftools 1.10 is that\nI've renamed the `google/` include-directory to be `gperftools/`\ninstead.  New code should `#include <gperftools/tcmalloc.h>`/etc.\n(Most users of perftools don't need any perftools-specific includes at\nall, so this is mostly directed to \"power users.\")  I've kept the old\nnames around as forwarding headers to the new, so `#include\n<google/tcmalloc.h>` will continue to work.\n\n(The other functional change which I snuck in is getting rid of some\nbash-isms in one of the unittest driver scripts, so it could run on\nSolaris.)\n\nNote that some internal names still contain the text `google`, such as\nthe `google_malloc` internal linker section.  I think that's a\ntrickier transition, and can happen in a future release (if at all).\n\n\n=== 31 January 2012 ===\n\nI've just released perftools 1.10\n\nThere is an API-incompatible change: several of the methods in the\n`MallocExtension` class have changed from taking a `void*` to taking a\n`const void*`.  You should not be affected by this API change\nunless you've written your own custom malloc extension that derives\nfrom `MallocExtension`, but since it is a user-visible change, I have\nupped the `.so` version number for this release.\n\nThis release focuses on improvements to linux-syscall-support.h,\nincluding ARM and PPC fixups and general cleanups.  I hope this will\nmagically fix an array of bugs people have been seeing.\n\nThere is also exciting news on the porting front, with support for\npatching win64 assembly contributed by IBM Canada!  This is an\nimportant step -- perhaps the most difficult -- to getting perftools\nto work on 64-bit windows using the patching technique (it doesn't\naffect the libc-modification technique).  `premable_patcher_test` has\nbeen added to help test these changes; it is meant to compile under\nx86_64, and won't work under win32.\n\nFor the full list of changes, including improved `HEAP_PROFILE_MMAP`\nsupport, see the\n[http://gperftools.googlecode.com/svn/tags/google-perftools-1.10/ChangeLog ChangeLog].\n\n\n=== 24 January 2011 ===\n\nThe `google-perftools` Google Code page has been renamed to\n`gperftools`, in preparation for the project being renamed to\n`gperftools`.  In the coming weeks, I'll be stepping down as\nmaintainer for the perftools project, and as part of that Google is\nrelinquishing ownership of the project; it will now be entirely\ncommunity run.  The name change reflects that shift.  The 'g' in\n'gperftools' stands for 'great'. :-)\n\n=== 23 December 2011 ===\n\nI've just released perftools 1.9.1\n\nI missed including a file in the tarball, that is needed to compile on\nARM.  If you are not compiling on ARM, or have successfully compiled\nperftools 1.9, there is no need to upgrade.\n\n\n=== 22 December 2011 ===\n\nI've just released perftools 1.9\n\nThis change has a slew of improvements, from better ARM and freebsd\nsupport, to improved performance by moving some code outside of locks,\nto better pprof reporting of code with overloaded functions.\n\nThe full list of changes is in the\n[http://google-perftools.googlecode.com/svn/tags/google-perftools-1.9/ChangeLog ChangeLog].\n\n\n=== 26 August 2011 ===\n\nI've just released perftools 1.8.3\n\nThe star-crossed 1.8 series continues; in 1.8.1, I had accidentally\nremoved some code that was needed for FreeBSD.  (Without this code\nmany apps would crash at startup.)  This release re-adds that code.\nIf you are not on FreeBSD, or are using FreeBSD with perftools 1.8 or\nearlier, there is no need to upgrade.\n\n=== 11 August 2011 ===\n\nI've just released perftools 1.8.2\n\nI was incorrectly calculating the patch-level in the configuration\nstep, meaning the TC_VERSION_PATCH #define in tcmalloc.h was wrong.\nSince the testing framework checks for this, it was failing.  Now it\nshould work again.  This time, I was careful to re-run my tests after\nupping the version number. :-)\n\nIf you don't care about the TC_VERSION_PATCH #define, there's no\nreason to upgrae.\n\n=== 26 July 2011 ===\n\nI've just released perftools 1.8.1\n\nI was missing an #include that caused the build to break under some\ncompilers, especially newer gcc's, that wanted it.  This only affects\npeople who build from source, so only the .tar.gz file is updated from\nperftools 1.8.  If you didn't have any problems compiling perftools\n1.8, there's no reason to upgrade.\n\n=== 15 July 2011 ===\n\nI've just released perftools 1.8\n\nOf the many changes in this release, a good number pertain to porting.\nI've revamped OS X support to use the malloc-zone framework; it should\nnow Just Work to link in tcmalloc, without needing\n`DYLD_FORCE_FLAT_NAMESPACE` or the like.  (This is a pretty major\nchange, so please feel free to report feedback at\ngoogle-perftools@googlegroups.com.)  64-bit Windows support is also\nimproved, as is ARM support, and the hooks are in place to improve\nFreeBSD support as well.\n\nOn the other hand, I'm seeing hanging tests on Cygwin.  I see the same\nhanging even with (the old) perftools 1.7, so I'm guessing this is\neither a problem specific to my Cygwin installation, or nobody is\ntrying to use perftools under Cygwin.  If you can reproduce the\nproblem, and even better have a solution, you can report it at\ngoogle-perftools@googlegroups.com.\n\nInternal changes include several performance and space-saving tweaks.\nOne is user-visible (but in \"stealth mode\", and otherwise\nundocumented): you can compile with `-DTCMALLOC_SMALL_BUT_SLOW`.  In\nthis mode, tcmalloc will use less memory overhead, at the cost of\nrunning (likely not noticeably) slower.\n\nThere are many other changes as well, too numerous to recount here,\nbut present in the\n[http://google-perftools.googlecode.com/svn/tags/google-perftools-1.8/ChangeLog ChangeLog].\n\n\n=== 7 February 2011 ===\n\nThanks to endlessr..., who\n[http://code.google.com/p/google-perftools/issues/detail?id=307 identified]\nwhy some tests were failing under MSVC 10 in release mode.  It does not look\nlike these failures point toward any problem with tcmalloc itself; rather, the\nproblem is with the test, which made some assumptions that broke under the\nsome aggressive optimizations used in MSVC 10.  I'll fix the test, but in\nthe meantime, feel free to use perftools even when compiled under MSVC\n10.\n\n=== 4 February 2011 ===\n\nI've just released perftools 1.7\n\nI apologize for the delay since the last release; so many great new\npatches and bugfixes kept coming in (and are still coming in; I also\napologize to those folks who have to slip until the next release).  I\npicked this arbitrary time to make a cut.\n\nAmong the many new features in this release is a multi-megabyte\nreduction in the amount of tcmalloc overhead uder x86_64, improved\nperformance in the case of contention, and many many bugfixes,\nespecially architecture-specific bugfixes.  See the\n[http://google-perftools.googlecode.com/svn/tags/google-perftools-1.7/ChangeLog ChangeLog]\nfor full details.\n\nOne architecture-specific change of note is added comments in the\n[http://google-perftools.googlecode.com/svn/tags/perftools-1.7/README README]\nfor using tcmalloc under OS X.  I'm trying to get my head around the\nexact behavior of the OS X linker, and hope to have more improvements\nfor the next release, but I hope these notes help folks who have been\nhaving trouble with tcmalloc on OS X.\n\n*Windows users*: I've heard reports that some unittests fail on\nWindows when compiled with MSVC 10 in Release mode.  All tests pass in\nDebug mode.  I've not heard of any problems with earlier versions of\nMSVC.  I don't know if this is a problem with the runtime patching (so\nthe static patching discussed in README_windows.txt will still work),\na problem with perftools more generally, or a bug in MSVC 10.  Anyone\nwith windows expertise that can debug this, I'd be glad to hear from!\n\n\n=== 5 August 2010 ===\n\nI've just released perftools 1.6\n\nThis version also has a large number of minor changes, including\nsupport for `malloc_usable_size()` as a glibc-compatible alias to\n`malloc_size()`, the addition of SVG-based output to `pprof`, and\nexperimental support for tcmalloc large pages, which may speed up\ntcmalloc at the cost of greater memory use.  To use tcmalloc large\npages, see the\n[http://google-perftools.googlecode.com/svn/tags/perftools-1.6/INSTALL\nINSTALL file]; for all changes, see the\n[http://google-perftools.googlecode.com/svn/tags/perftools-1.6/ChangeLog\nChangeLog].\n\nOS X NOTE: improvements in the profiler unittest have turned up an OS\nX issue: in multithreaded programs, it seems that OS X often delivers\nthe profiling signal (from sigitimer()) to the main thread, even when\nit's sleeping, rather than spawned threads that are doing actual work.\nIf anyone knows details of how OS X handles SIGPROF events (from\nsetitimer) in threaded programs, and has insight into this problem,\nplease send mail to google-perftools@googlegroups.com.\n\nTo see if you're affected by this, look for profiling time that pprof\nattributes to `___semwait_signal`.  This is work being done in other\nthreads, that is being attributed to sleeping-time in the main thread.\n\n\n=== 20 January 2010 ===\n\nI've just released perftools 1.5\n\nThis version has a slew of changes, leading to somewhat faster\nperformance and improvements in portability.  It adds features like\n`ITIMER_REAL` support to the cpu profiler, and `tc_set_new_mode` to\nmimic the windows function of the same name.  Full details are in the\n[http://google-perftools.googlecode.com/svn/tags/perftools-1.5/ChangeLog\nChangeLog].\n\n\n=== 11 September 2009 ===\n\nI've just released perftools 1.4\n\nThe major change this release is the addition of a debugging malloc\nlibrary!  If you link with `libtcmalloc_debug.so` instead of\n`libtcmalloc.so` (and likewise for the `minimal` variants) you'll get\na debugging malloc, which will catch double-frees, writes to freed\ndata, `free`/`delete` and `delete`/`delete[]` mismatches, and even\n(optionally) writes past the end of an allocated block.\n\nWe plan to do more with this library in the future, including\nsupporting it on Windows, and adding the ability to use the debugging\nlibrary with your default malloc in addition to using it with\ntcmalloc.\n\nThere are also the usual complement of bug fixes, documented in the\nChangeLog, and a few minor user-tunable knobs added to components like\nthe system allocator.\n\n\n=== 9 June 2009 ===\n\nI've just released perftools 1.3\n\nLike 1.2, this has a variety of bug fixes, especially related to the\nWindows build.  One of my bugfixes is to undo the weird `ld -r` fix to\n`.a` files that I introduced in perftools 1.2: it caused problems on\ntoo many platforms.  I've reverted back to normal `.a` files.  To work\naround the original problem that prompted the `ld -r` fix, I now\nprovide `libtcmalloc_and_profiler.a`, for folks who want to link in\nboth.\n\nThe most interesting API change is that I now not only override\n`malloc`/`free`/etc, I also expose them via a unique set of symbols:\n`tc_malloc`/`tc_free`/etc.  This enables clients to write their own\nmemory wrappers that use tcmalloc:\n{{{\n   void* malloc(size_t size) { void* r = tc_malloc(size); Log(r); return r; }\n}}}\n\n\n=== 17 April 2009 ===\n\nI've just released perftools 1.2.\n\nThis is mostly a bugfix release.  The major change is internal: I have\na new system for creating packages, which allows me to create 64-bit\npackages.  (I still don't do that for perftools, because there is\nstill no great 64-bit solution, with libunwind still giving problems\nand --disable-frame-pointers not practical in every environment.)\n\nAnother interesting change involves Windows: a\n[http://code.google.com/p/google-perftools/issues/detail?id=126 new\npatch] allows users to choose to override malloc/free/etc on Windows\nrather than patching, as is done now.  This can be used to create\ncustom CRTs.\n\nMy fix for this\n[http://groups.google.com/group/google-perftools/browse_thread/thread/1ff9b50043090d9d/a59210c4206f2060?lnk=gst&q=dynamic#a59210c4206f2060\nbug involving static linking] ended up being to make libtcmalloc.a and\nlibperftools.a a big .o file, rather than a true `ar` archive.  This\nshould not yield any problems in practice -- in fact, it should be\nbetter, since the heap profiler, leak checker, and cpu profiler will\nnow all work even with the static libraries -- but if you find it\ndoes, please file a bug report.\n\nFinally, the profile_handler_unittest provided in the perftools\ntestsuite (new in this release) is failing on FreeBSD.  The end-to-end\ntest that uses the profile-handler is passing, so I suspect the\nproblem may be with the test, not the perftools code itself.  However,\nI do not know enough about how itimers work on FreeBSD to be able to\ndebug it.  If you can figure it out, please let me know!\n\n=== 11 March 2009 ===\n\nI've just released perftools 1.1!\n\nIt has many changes since perftools 1.0 including\n\n  * Faster performance due to dynamically sized thread caches\n  * Better heap-sampling for more realistic profiles\n  * Improved support on Windows (MSVC 7.1 and cygwin)\n  * Better stacktraces in linux (using VDSO)\n  * Many bug fixes and feature requests\n\nNote: if you use the CPU-profiler with applications that fork without\ndoing an exec right afterwards, please see the README.  Recent testing\nhas shown that profiles are unreliable in that case.  The problem has\nexisted since the first release of perftools.  We expect to have a fix\nfor perftools 1.2.  For more details, see\n[http://code.google.com/p/google-perftools/issues/detail?id=105 issue 105].\n\nEveryone who uses perftools 1.0 is encouraged to upgrade to perftools\n1.1.  If you see any problems with the new release, please file a bug\nreport at http://code.google.com/p/google-perftools/issues/list.\n\nEnjoy!\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 7.548828125,
          "content": "gperftools\n----------\n(originally Google Performance Tools)\n\nThe fastest malloc we’ve seen; works particularly well with threads\nand STL. Also: thread-friendly heap-checker, heap-profiler, and\ncpu-profiler.\n\n\nOVERVIEW\n---------\n\ngperftools is a collection of a high-performance multi-threaded\nmalloc() implementation, plus some pretty nifty performance analysis\ntools.\n\ngperftools is distributed under the terms of the BSD License. Join our\nmailing list at gperftools@googlegroups.com for updates:\nhttps://groups.google.com/forum/#!forum/gperftools\n\ngperftools was original home for pprof program. But do note that\noriginal pprof (which is still included with gperftools) is now\ndeprecated in favor of Go version at https://github.com/google/pprof\n\n\nTCMALLOC\n--------\nJust link in -ltcmalloc or -ltcmalloc_minimal to get the advantages of\ntcmalloc -- a replacement for malloc and new.  See below for some\nenvironment variables you can use with tcmalloc, as well.\n\ntcmalloc functionality is available on all systems we've tested; see\nINSTALL for more details.  See README_windows.txt for instructions on\nusing tcmalloc on Windows.\n\nwhen compiling.  gcc makes some optimizations assuming it is using its\nown, built-in malloc; that assumption obviously isn't true with\ntcmalloc.  In practice, we haven't seen any problems with this, but\nthe expected risk is highest for users who register their own malloc\nhooks with tcmalloc (using gperftools/malloc_hook.h).  The risk is\nlowest for folks who use tcmalloc_minimal (or, of course, who pass in\nthe above flags :-) ).\n\n\nHEAP PROFILER\n-------------\nSee docs/heapprofile.html for information about how to use tcmalloc's\nheap profiler and analyze its output.\n\nAs a quick-start, do the following after installing this package:\n\n1) Link your executable with -ltcmalloc\n2) Run your executable with the HEAPPROFILE environment var set:\n     $ HEAPPROFILE=/tmp/heapprof <path/to/binary> [binary args]\n3) Run pprof to analyze the heap usage\n     $ pprof <path/to/binary> /tmp/heapprof.0045.heap  # run 'ls' to see options\n     $ pprof --gv <path/to/binary> /tmp/heapprof.0045.heap\n\nYou can also use LD_PRELOAD to heap-profile an executable that you\ndidn't compile.\n\nThere are other environment variables, besides HEAPPROFILE, you can\nset to adjust the heap-profiler behavior; c.f. \"ENVIRONMENT VARIABLES\"\nbelow.\n\nThe heap profiler is available on all unix-based systems we've tested;\nsee INSTALL for more details.  It is not currently available on Windows.\n\n\nHEAP CHECKER\n------------\n\nPlease note that as of gperftools-2.11 this is deprecated. You should\nconsider asan and other sanitizers instead.\n\nSee docs/heap_checker.html for information about how to use tcmalloc's\nheap checker.\n\nIn order to catch all heap leaks, tcmalloc must be linked *last* into\nyour executable.  The heap checker may mischaracterize some memory\naccesses in libraries listed after it on the link line.  For instance,\nit may report these libraries as leaking memory when they're not.\n(See the source code for more details.)\n\nHere's a quick-start for how to use:\n\nAs a quick-start, do the following after installing this package:\n\n1) Link your executable with -ltcmalloc\n2) Run your executable with the HEAPCHECK environment var set:\n     $ HEAPCHECK=1 <path/to/binary> [binary args]\n\nOther values for HEAPCHECK: normal (equivalent to \"1\"), strict, draconian\n\nYou can also use LD_PRELOAD to heap-check an executable that you\ndidn't compile.\n\nThe heap checker is only available on Linux at this time; see INSTALL\nfor more details.\n\n\nCPU PROFILER\n------------\nSee docs/cpuprofile.html for information about how to use the CPU\nprofiler and analyze its output.\n\nAs a quick-start, do the following after installing this package:\n\n1) Link your executable with -lprofiler\n2) Run your executable with the CPUPROFILE environment var set:\n     $ CPUPROFILE=/tmp/prof.out <path/to/binary> [binary args]\n3) Run pprof to analyze the CPU usage\n     $ pprof <path/to/binary> /tmp/prof.out      # -pg-like text output\n     $ pprof --gv <path/to/binary> /tmp/prof.out # really cool graphical output\n\nThere are other environment variables, besides CPUPROFILE, you can set\nto adjust the cpu-profiler behavior; cf \"ENVIRONMENT VARIABLES\" below.\n\nThe CPU profiler is available on all unix-based systems we've tested;\nsee INSTALL for more details.  It is not currently available on Windows.\n\nNOTE: CPU profiling doesn't work after fork (unless you immediately\n      do an exec()-like call afterwards).  Furthermore, if you do\n      fork, and the child calls exit(), it may corrupt the profile\n      data.  You can use _exit() to work around this.  We hope to have\n      a fix for both problems in the next release of perftools\n      (hopefully perftools 1.2).\n\n\nEVERYTHING IN ONE\n-----------------\nIf you want the CPU profiler, heap profiler, and heap leak-checker to\nall be available for your application, you can do:\n   gcc -o myapp ... -lprofiler -ltcmalloc\n\nHowever, if you have a reason to use the static versions of the\nlibrary, this two-library linking won't work:\n   gcc -o myapp ... /usr/lib/libprofiler.a /usr/lib/libtcmalloc.a  # errors!\n\nInstead, use the special libtcmalloc_and_profiler library, which we\nmake for just this purpose:\n   gcc -o myapp ... /usr/lib/libtcmalloc_and_profiler.a\n\n\nCONFIGURATION OPTIONS\n---------------------\nFor advanced users, there are several flags you can pass to\n'./configure' that tweak tcmalloc performance.  (These are in addition\nto the environment variables you can set at runtime to affect\ntcmalloc, described below.)  See the INSTALL file for details.\n\n\nENVIRONMENT VARIABLES\n---------------------\nThe cpu profiler, heap checker, and heap profiler will lie dormant,\nusing no memory or CPU, until you turn them on.  (Thus, there's no\nharm in linking -lprofiler into every application, and also -ltcmalloc\nassuming you're ok using the non-libc malloc library.)\n\nThe easiest way to turn them on is by setting the appropriate\nenvironment variables.  We have several variables that let you\nenable/disable features as well as tweak parameters.\n\nHere are some of the most important variables:\n\nHEAPPROFILE=<pre> -- turns on heap profiling and dumps data using this prefix\nHEAPCHECK=<type>  -- turns on heap checking with strictness 'type'\nCPUPROFILE=<file> -- turns on cpu profiling and dumps data to this file.\nPROFILESELECTED=1 -- if set, cpu-profiler will only profile regions of code\n                     surrounded with ProfilerEnable()/ProfilerDisable().\nCPUPROFILE_FREQUENCY=x-- how many interrupts/second the cpu-profiler samples.\n\nPERFTOOLS_VERBOSE=<level> -- the higher level, the more messages malloc emits\nMALLOCSTATS=<level>    -- prints memory-use stats at program-exit\n\nFor a full list of variables, see the documentation pages:\n   docs/cpuprofile.html\n   docs/heapprofile.html\n   docs/heap_checker.html\n\nSee also TCMALLOC_STACKTRACE_METHOD_VERBOSE and\nTCMALLOC_STACKTRACE_METHOD environment variables briefly documented in\nour INSTALL file and on our wiki page at:\nhttps://github.com/gperftools/gperftools/wiki/gperftools'-stacktrace-capturing-methods-and-their-issues\n\n\nCOMPILING ON NON-LINUX SYSTEMS\n------------------------------\n\nPerftools was developed and tested on x86, aarch64 and riscv Linux\nsystems, and it works in its full generality only on those systems.\n\nHowever, we've successfully ported much of the tcmalloc library to\nFreeBSD, Solaris x86 (not tested recently though), and Mac OS X\n(aarch64; x86 and ppc have not been tested recently); and we've ported\nthe basic functionality in tcmalloc_minimal to Windows.  See INSTALL\nfor details.  See README_windows.txt for details on the Windows port.\n\n\n---\nOriginally written: 17 May 2011\nLast refreshed: 10 Aug 2023\n"
        },
        {
          "name": "README_windows.txt",
          "type": "blob",
          "size": 4.40234375,
          "content": "--- COMPILING\r\n\r\nThis project has begun being ported to Windows, only tcmalloc_minimal\r\nis supported at this time.  A working solution file exists in this\r\ndirectory:\r\n    gperftools.sln\r\n\r\nYou can load this solution file into Visual Studio 2015 or\r\nlater -- in the latter case, it will automatically convert the files\r\nto the latest format for you.\r\n\r\nWhen you build the solution, it will create a number of unittests,\r\nwhich you can run by hand (or, more easily, under the Visual Studio\r\ndebugger) to make sure everything is working properly on your system.\r\nThe binaries will end up in a directory called \"debug\" or \"release\" in\r\nthe top-level directory (next to the .sln file).\r\n\r\nI don't know very much about how to install DLLs on Windows, so you'll\r\nhave to figure out that part for yourself.  If you choose to just\r\nre-use the existing .sln, make sure you set the IncludeDir's\r\nappropriately!  Look at the properties for libtcmalloc_minimal.dll.\r\n\r\nNote that these systems are set to build in Debug mode by default.\r\nYou may want to change them to Release mode.\r\n\r\nTo use tcmalloc_minimal in your own projects, you should only need to\r\nbuild the dll and install it someplace, so you can link it into\r\nfurther binaries.  To use the dll, you need to add the following to\r\nthe linker line of your executable:\r\n   \"libtcmalloc_minimal.lib\" /INCLUDE:\"__tcmalloc\"\r\n\r\nHere is how to accomplish this in Visual Studio 2015:\r\n\r\n1) Have your executable depend on the tcmalloc library by selecting\r\n   \"Project Dependencies...\" from the \"Project\" menu.  Your executable\r\n   should depend on \"libtcmalloc_minimal\".\r\n\r\n2) Have your executable depend on a tcmalloc symbol -- this is\r\n   necessary so the linker doesn't \"optimize out\" the libtcmalloc\r\n   dependency -- by right-clicking on your executable's project (in\r\n   the solution explorer), selecting Properties from the pull-down\r\n   menu, then selecting \"Configuration Properties\" -> \"Linker\" ->\r\n   \"Input\".  Then, in the \"Force Symbol References\" field, enter the\r\n   text \"__tcmalloc\" (without the quotes).  Be sure to do this for both\r\n   debug and release modes!\r\n\r\nYou can also link tcmalloc code in statically -- see the example\r\nproject tcmalloc_minimal_unittest-static, which does this.  For this\r\nto work, you'll need to add \"/D PERFTOOLS_DLL_DECL=\" to the compile\r\nline of every perftools .cc file.  You do not need to depend on the\r\ntcmalloc symbol in this case (that is, you don't need to do either\r\nstep 1 or step 2 from above).\r\n\r\nAn alternative to all the above is to statically link your application\r\nwith libc, and then replace its malloc with tcmalloc.  This allows you\r\nto just build and link your program normally; the tcmalloc support\r\ncomes in a post-processing step.  This is more reliable than the above\r\ntechnique (which depends on run-time patching, which is inherently\r\nfragile), though more work to set up.  For details, see\r\n   https://groups.google.com/group/google-perftools/browse_thread/thread/41cd3710af85e57b\r\n\r\n\r\n--- THE HEAP-PROFILER\r\n\r\nThe heap-profiler has had a preliminary port to Windows but does not\r\nbuild on Windows by default.  It has not been well tested, and\r\nprobably does not work at all when Frame Pointer Optimization (FPO) is\r\nenabled -- that is, in release mode.  The other features of perftools,\r\nsuch as the cpu-profiler and leak-checker, have not yet been ported to\r\nWindows at all.\r\n\r\n\r\n--- ISSUES\r\n\r\nNOTE ON _MSIZE and _RECALLOC: The tcmalloc version of _msize returns\r\nthe size of the region tcmalloc allocated for you -- which is at least\r\nas many bytes you asked for, but may be more.  (btw, these *are* bytes\r\nyou own, even if you didn't ask for all of them, so it's correct code\r\nto access all of them if you want.)  Unfortunately, the Windows CRT\r\n_recalloc() routine assumes that _msize returns exactly as many bytes\r\nas were requested.  As a result, _recalloc() may not zero out new\r\nbytes correctly.  IT'S SAFEST NOT TO USE _RECALLOC WITH TCMALLOC.\r\n_recalloc() is a tricky routine to use in any case (it's not safe to\r\nuse with realloc, for instance).\r\n\r\n\r\nI have little experience with Windows programming, so there may be\r\nbetter ways to set this up than I've done!  If you run across any\r\nproblems, please post to the google-perftools Google Group, or report\r\nthem on the gperftools Google Code site:\r\n   http://groups.google.com/group/google-perftools\r\n   http://code.google.com/p/gperftools/issues/list\r\n\r\n-- craig\r\n-- updated by alk on 31 July 2023\r\n\r\nLast modified: 31 July 2023\r\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.2265625,
          "content": "#!/bin/sh\n\nautoreconf -i\n\necho \"patching m4/libtool.m4: See https://github.com/gperftools/gperftools/issues/1429#issuecomment-1794976863\"\n\n(set -x; patch --forward -t --reject-file=- m4/libtool.m4 m4/libtool.patch && autoreconf -i)\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 21.9052734375,
          "content": "## Process this file with autoconf to produce configure.\n## In general, the safest way to proceed is to run ./autogen.sh\n\n# make sure we're interpreted by some minimal autoconf\nAC_PREREQ([2.69])\n\nAC_INIT([gperftools],[2.16],[gperftools@googlegroups.com])\n# Update this value for every release!  (A:B:C will map to foo.so.(A-C).C.B)\n# http://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html\nTCMALLOC_SO_VERSION=9:18:5\nPROFILER_SO_VERSION=5:13:5\nTCMALLOC_AND_PROFILER_SO_VERSION=10:13:6\n\nAC_SUBST(TCMALLOC_SO_VERSION)\nAC_SUBST(PROFILER_SO_VERSION)\nAC_SUBST(TCMALLOC_AND_PROFILER_SO_VERSION)\n\n# The argument here is just something that should be in the current directory\n# (for sanity checking)\nAC_CONFIG_SRCDIR(README)\nAC_CONFIG_MACRO_DIR([m4])\nAC_CANONICAL_HOST\nAM_INIT_AUTOMAKE([dist-zip foreign tar-ustar nostdinc])\nAC_CONFIG_HEADERS([src/config.h])\n\nAM_MAINTAINER_MODE()\n# Export the version information (for tc_version and friends)\nTC_VERSION_MAJOR=`expr \"$PACKAGE_VERSION\" : '\\([[0-9]]*\\)'`\nTC_VERSION_MINOR=`expr \"$PACKAGE_VERSION\" : '[[0-9]]*\\.\\([[0-9]]*\\)'`\nTC_VERSION_PATCH=`expr \"$PACKAGE_VERSION\" : '[[0-9]]*\\.[[0-9]]*\\(.*\\)$'`\nAC_SUBST(TC_VERSION_MAJOR)\nAC_SUBST(TC_VERSION_MINOR)\nAC_SUBST(TC_VERSION_PATCH)\nAC_SUBST(PACKAGE_STRING)\n\n# The user can choose not to compile in the heap-profiler, , or the\n# cpu-profiler.  There's also the possibility for a 'fully minimal'\n# compile, which leaves out the stacktrace code as well.  By default,\n# we include all of these that the target system supports.\ndefault_enable_cpu_profiler=yes\ndefault_enable_heap_profiler=yes\ndefault_enable_debugalloc=yes\ndefault_enable_minimal=no\ndefault_tcmalloc_alignment=16\nneed_nanosleep=yes   # Used later, to decide if to run ACX_NANOSLEEP\ncase \"$host\" in\n   *-mingw*) default_enable_minimal=yes; default_enable_debugalloc=no;\n             need_nanosleep=no;;\n   *-cygwin*) default_enable_cpu_profiler=no;;\nesac\n\n# Currently only backtrace works on s390 and OSX.\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM(, [\n#if !defined(__s390__) && !defined(__APPLE__)\n#error not s390 and not osx\n#endif\nreturn 1\n])],\n                  [default_enable_libunwind=no\n                   default_enable_backtrace=yes],\n                  [default_enable_libunwind=yes\n                   default_enable_backtrace=no])\n\n# Disable libunwind linking on ppc64 by default.\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM(, [return __PPC64__])],\n                  [default_enable_libunwind=no\n                   default_tcmalloc_pagesize=64],\n                  [default_enable_libunwind=yes\n                   default_tcmalloc_pagesize=8])\n\nAC_ARG_ENABLE([cpu-profiler],\n              [AS_HELP_STRING([--disable-cpu-profiler],\n                              [do not build the cpu profiler])],\n              [],\n              [enable_cpu_profiler=\"$default_enable_cpu_profiler\"])\nAC_ARG_ENABLE([heap-profiler],\n              [AS_HELP_STRING([--disable-heap-profiler],\n                              [do not build the heap profiler])],\n              [],\n              [enable_heap_profiler=\"$default_enable_heap_profiler\"])\nAC_ARG_ENABLE([debugalloc],\n              [AS_HELP_STRING([--disable-debugalloc],\n                              [do not build versions of libs with debugalloc])],\n              [],\n              [enable_debugalloc=\"$default_enable_debugalloc\"])\nAC_ARG_ENABLE([minimal],\n              [AS_HELP_STRING([--enable-minimal],\n                              [build only tcmalloc-minimal (and maybe tcmalloc-minimal-debug)])],\n              [],\n              [enable_minimal=\"$default_enable_minimal\"])\nif test \"$enable_minimal\" = yes; then\n  enable_cpu_profiler=no\n  enable_heap_profiler=no\nfi\nAC_ARG_ENABLE([stacktrace-via-backtrace],\n              [AS_HELP_STRING([--enable-stacktrace-via-backtrace],\n                              [enable use of backtrace() for stacktrace capturing (may deadlock)])],\n              [enable_backtrace=yes],\n              [enable_backtrace=\"$default_enable_backtrace\"])\nAC_ARG_ENABLE([libgcc-unwinder-by-default],\n              [AS_HELP_STRING([--enable-libgcc-unwinder-by-default],\n                              [prefer libgcc's _Unwind_Backtrace as default stacktrace capturing method])],\n              [enable_libgcc_by_default=yes],\n              [enable_libgcc_by_default=no])\nAS_IF([test \"x$enable_libgcc_by_default\" = xyes],\n      [AC_DEFINE(PREFER_LIBGCC_UNWINDER, 1, [if libgcc stacktrace method should be default])])\nAC_ARG_ENABLE([libunwind],\n              [AS_HELP_STRING([--enable-libunwind],\n                              [enable libunwind linking])],\n              [],\n              [enable_libunwind=\"$default_enable_libunwind\"])\nAC_ARG_WITH([tcmalloc-pagesize],\n            [AS_HELP_STRING([--with-tcmalloc-pagesize],\n                            [Set the tcmalloc internal page size to 4K, 8K, 16K, 32K, 64K, 128K or 256K])],\n            [],\n            [with_tcmalloc_pagesize=$default_tcmalloc_pagesize])\nAC_ARG_WITH([tcmalloc-alignment],\n            [AS_HELP_STRING([--with-tcmalloc-alignment],\n                            [Set the tcmalloc allocation alignment to 8 or 16 bytes])],\n            [],\n            [with_tcmalloc_alignment=$default_tcmalloc_alignment])\n\ncase \"$with_tcmalloc_pagesize\" in\n  4)\n       AC_DEFINE(TCMALLOC_PAGE_SIZE_SHIFT, 12);;\n  8)\n       #Default tcmalloc page size.\n       ;;\n  16)\n       AC_DEFINE(TCMALLOC_PAGE_SIZE_SHIFT, 14);;\n  32)\n       AC_DEFINE(TCMALLOC_PAGE_SIZE_SHIFT, 15);;\n  64)\n       AC_DEFINE(TCMALLOC_PAGE_SIZE_SHIFT, 16);;\n  128)\n       AC_DEFINE(TCMALLOC_PAGE_SIZE_SHIFT, 17);;\n  256)\n       AC_DEFINE(TCMALLOC_PAGE_SIZE_SHIFT, 18,\n                 [Define internal page size for tcmalloc as number of left bitshift]);;\n  *)\n       AC_MSG_WARN([${with_tcmalloc_pagesize}K size not supported, using default tcmalloc page size.])\nesac\ncase \"$with_tcmalloc_alignment\" in\n  8)\n       AC_DEFINE(TCMALLOC_ALIGN_8BYTES, 1,\n                 [Define 8 bytes of allocation alignment for tcmalloc]);;\n  16)\n       #Default tcmalloc allocation alignment.\n       ;;\n  *)\n       AC_MSG_WARN([${with_tcmalloc_alignment} bytes not supported, using default tcmalloc allocation alignment.])\nesac\n\n# Checks for programs.\nAC_PROG_CXX\nAC_PROG_CC\nAC_LANG([C++])\nAM_CONDITIONAL(GCC, test \"$GCC\" = yes)   # let the Makefile know if we're gcc\n\nAX_CXX_COMPILE_STDCXX(17, ext, mandatory)\n\nLT_INIT\n\n# Lets try enable frame pointers to enable simpler stacktrace\n# capturing methods, but keep performace for critical bits with\n# -momit-leaf-frame-pointer. However, we should be conservative so\n# that we don't disable leaf frame pointers on whatever architectures\n# that have them enabled by default.\nAC_CACHE_CHECK(\n  [compiler and target supports -fno-omit-frame-pointer -momit-leaf-frame-pointer],\n  [ac_cv_frame_pointer_cflags],\n  [OLD_CXXFLAGS=\"$CXXFLAGS\"\n   CXXFLAGS=\"$CXXFLAGS -fno-omit-frame-pointer -momit-leaf-frame-pointer\"\n   AC_COMPILE_IFELSE(\n     [AC_LANG_PROGRAM(\n#if !(__i386__ || __x86_64__ || __riscv || __aarch64__)\n#error unsupported arch\n#endif\n     )],\n     [ac_cv_frame_pointer_cflags=yes],\n     [ac_cv_frame_pointer_cflags=no])\n   CXXFLAGS=\"$OLD_CXXFLAGS\"])\nAM_CONDITIONAL(ENABLE_FP_FLAGS, [test \"x$ac_cv_frame_pointer_cflags\" = \"xyes\"])\n\n# Clang-only (so far?) -Wthread-safety is a useful thing. We want.\nAC_CACHE_CHECK(\n  [compiler and target supports -Wthread-safety],\n  [ac_cv_w_thread_safety],\n  [OLD_CXXFLAGS=\"$CXXFLAGS\"\n   CXXFLAGS=\"$CXXFLAGS -Wthread-safety\"\n   AC_COMPILE_IFELSE(\n     [AC_LANG_PROGRAM([], [])],\n     [ac_cv_w_thread_safety=yes],\n     [ac_cv_w_thread_safety=no])\n   CXXFLAGS=\"$OLD_CXXFLAGS\"])\nAM_CONDITIONAL(ENABLE_W_THREAD_SAFETY, [test \"x$ac_cv_w_thread_safety\" = \"xyes\"])\n\nAX_C___ATTRIBUTE__\n\nAC_MSG_CHECKING(for __attribute__((aligned(N))) on functions)\nAC_CACHE_VAL(ac_cv___attribute__aligned_fn, [\n  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <stdlib.h>\n     void foo(void) __attribute__((aligned(128)));\n     void foo(void) { exit(1); }]], [[]])],[ac_cv___attribute__aligned_fn=yes],[ac_cv___attribute__aligned_fn=no\n  ])])\nif test \"$ac_cv___attribute__aligned_fn\" = \"yes\"; then\n  AC_DEFINE(HAVE___ATTRIBUTE__ALIGNED_FN, 1, [define if your compiler supports alignment of functions])\nfi\nAC_MSG_RESULT($ac_cv___attribute__aligned_fn)\n\n\n# TODO(csilvers): we could remove a lot when WITH_CPU_PROFILER etc is \"no\".\nAC_CHECK_TYPES([struct mallinfo],,, [#include <malloc.h>])\nAC_CHECK_TYPES([struct mallinfo2],,, [#include <malloc.h>])\nAC_CHECK_FUNCS(sbrk)            # for tcmalloc to get memory\nAC_CHECK_FUNCS(geteuid)         # for turning off services when run as root\nAC_CHECK_HEADERS(features.h)    # for vdso_support.h, __GLIBC__ macros\nAC_CHECK_HEADERS(malloc.h)      # some systems define stuff there, others not\nAC_CHECK_HEADERS(glob.h)        # for heap-profile-table (cleaning up profiles)\nAC_CHECK_HEADERS(execinfo.h)    # for stacktrace\nAC_CHECK_HEADERS(sched.h)       # for being nice in our spinlock code\nAC_CHECK_HEADERS(sys/syscall.h)\nAC_CHECK_HEADERS(fcntl.h)       # for tcmalloc_unittest\nAC_CHECK_HEADERS(sys/cdefs.h)   # Where glibc defines __THROW\n\nAC_CHECK_HEADERS(sys/ucontext.h)\nAC_CHECK_HEADERS(ucontext.h)\nAC_CHECK_HEADERS(cygwin/signal.h)        # ucontext on cywgin\nAC_CHECK_HEADERS(asm/ptrace.h)           # get ptrace macros, e.g. PT_NIP\n\nREGEX_LIBS=\n# \"sufficiently unix\" systems need regexec for unit tests\nif test \"x$need_nanosleep\" = xyes; then\n  save_LIBS=\"$LIBS\"\n  LIBS=\"$REGEX_LIBS\"\n  # QNX needs -lregex; but lets test just in case\n  AC_SEARCH_LIBS([regexec], [regex], [], [AC_MSG_ERROR([failed to locate regexec() (used for tests)])])\n  REGEX_LIBS=\"$LIBS\"\n  LIBS=\"$save_LIBS\"\nfi\nAC_SUBST(REGEX_LIBS)\n\n# We override a lot of memory allocation routines, not all of which are\n# standard.  For those the system doesn't declare, we'll declare ourselves.\nAC_CHECK_DECLS([cfree,\n                posix_memalign,\n                memalign,\n                valloc,\n                pvalloc],,,\n               [#define _XOPEN_SOURCE 600\n                #define _QNX_SOURCE 1\n                #include <stdlib.h>\n                #include <malloc.h>])\n\nif test \"$ac_cv_type_struct_mallinfo\" = yes; then\n  AC_SUBST(ac_cv_have_struct_mallinfo, 1)   # gperftools/tcmalloc.h needs this\nelse\n  AC_SUBST(ac_cv_have_struct_mallinfo, 0)\nfi\n\nif test \"$ac_cv_type_struct_mallinfo2\" = yes; then\n  AC_SUBST(ac_cv_have_struct_mallinfo2, 1)   # gperftools/tcmalloc.h needs this\nelse\n  AC_SUBST(ac_cv_have_struct_mallinfo2, 0)\nfi\n\n# We hardcode HAVE_MMAP to 1. There are no interesting systems anymore\n# without functional mmap. And our windows (except mingw) builds\n# aren't using autoconf. So we keep HAVE_MMAP define, but only to\n# distingush windows and rest.\ncase \"$host\" in\n   *-mingw*) default_emergency_malloc=no;;\n   *) default_emergency_malloc=yes\n      AC_DEFINE(HAVE_MMAP, 1, [Define to 1 if you have a working `mmap' system call.])\nesac\n\n# We want to access the \"PC\" (Program Counter) register from a struct\n# ucontext.  Every system has its own way of doing that. But in case\n# we're dealing with unknown system, we have to check if GetPC\n# actually works. But don't bother if we're not doing cpu-profiling.\nif test \"$enable_cpu_profiler\" = yes; then\n  OLD_CXXFLAGS=\"$CXXFLAGS\"\n  CXXFLAGS=\"$CXXFLAGS -I$srcdir/src\"\n  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include \"getpc.h\"]], [GetPC({})])],\n                    [],\n                    [AC_MSG_WARN(Could not find the PC.  Will not try to compile libprofiler...)\n                     enable_cpu_profiler=no])\n  CXXFLAGS=\"$OLD_CXXFLAGS\"\nfi\n\n# Some tests test the behavior of .so files, and only make sense for dynamic.\nAM_CONDITIONAL(ENABLE_STATIC, test \"$enable_static\" = yes)\n\n# We want to link in libunwind if it is enabled and exists.\nUNWIND_LIBS=\nif test \"$enable_libunwind\" = yes; then\n  AC_CHECK_HEADERS([libunwind.h],\n                   [AC_CHECK_LIB(unwind, backtrace,\n                     [UNWIND_LIBS=-lunwind\n                      AC_DEFINE([USE_LIBUNWIND], [1], [libunwind.h was found and is working])\n                      will_use_libunwind=yes])])\nfi\nAC_SUBST(UNWIND_LIBS)\n\nAC_ARG_ENABLE(frame_pointers,\n              AS_HELP_STRING([--enable-frame-pointers],\n                             [Add -fno-omit-frame-pointer to compile flags]),\n\t      , enable_frame_pointers=no)\nAM_CONDITIONAL(ENABLE_FRAME_POINTERS, test \"$enable_frame_pointers\" = yes)\n\nAC_ARG_ENABLE([deprecated-pprof],\n              [AS_HELP_STRING([--disable-deprecated-pprof],\n                [do not install old deprecated and unmaintained bundled pprof\n(see github.com/google/pprof for supported version)])],\n              [enable_pprof=\"$enableval\"],\n              [enable_pprof=yes])\n\nAM_CONDITIONAL(INSTALL_PPROF,\n               [test \"x$enable_pprof\" = xyes])\n\nAC_ARG_ENABLE([dynamic-sized-delete-support],\n              [AS_HELP_STRING([--enable-dynamic-sized-delete-support],\n                [try to build run-time switch for sized delete operator])],\n              [enable_dyn_sized_delete=\"$enableval\"],\n              [enable_dyn_sized_delete=no])\n\nAS_IF([test \"x$enable_dyn_sized_delete\" = xyes],\n      [AC_DEFINE([ENABLE_DYNAMIC_SIZED_DELETE], 1,\n                 [Build runtime detection for sized delete])])\n\nAC_ARG_ENABLE([sized-delete],\n              [AS_HELP_STRING([--enable-sized-delete],\n                              [build sized delete operator])],\n              [enable_sized_delete=\"$enableval\"],\n              [enable_sized_delete=\"no\"])\nAS_IF([test \"x$enable_sized_delete\" = xyes],\n        [AC_DEFINE([ENABLE_SIZED_DELETE], 1, [Build sized deletion operators])\n         AC_MSG_NOTICE([Will build sized deallocation operators])],\n      [AS_IF([test \"x$enable_dyn_sized_delete\" = xyes],\n             [AC_MSG_NOTICE([Will build dynamically detected sized deallocation operators])],\n             [AC_MSG_NOTICE([Will build sized deallocation operators that ignore size])])])\n\nAC_CACHE_CHECK([if C++ compiler supports -fsized-deallocation],\n               [perftools_cv_sized_deallocation_result],\n               [OLD_CXXFLAGS=\"$CXXFLAGS\"\n                CXXFLAGS=\"$CXXFLAGS -fsized-deallocation\"\n                AC_LINK_IFELSE([AC_LANG_PROGRAM(\n                    [[#include <new>\n#include <stddef.h>]],\n                    [[static void (* volatile ptr)(void *, size_t) = ::operator delete; (*ptr)(0, 256);]])],\n                 perftools_cv_sized_deallocation_result=yes,\n                 perftools_cv_sized_deallocation_result=no)\n                CXXFLAGS=\"$OLD_CXXFLAGS\"])\n\nAM_CONDITIONAL(HAVE_SIZED_DEALLOCATION,\n               test \"$perftools_cv_sized_deallocation_result\" = yes)\n\nAC_CACHE_CHECK([if target has _Unwind_Backtrace],\n               [perftools_cv_have_unwind_backtrace],\n               [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n                    [[#include <unwind.h>\n#if defined(__APPLE__) || defined(__FreeBSD__)\n#error OSX and FreeBSD _Unwind_Backtrace recurses back to malloc\n#endif\n]],\n                    [[&_Unwind_Backtrace]])],\n                 [perftools_cv_have_unwind_backtrace=yes],\n                 [perftools_cv_have_unwind_backtrace=no])])\nAS_IF([test \"x$perftools_cv_have_unwind_backtrace\" = xyes],\n      [AC_DEFINE(HAVE_UNWIND_BACKTRACE, 1, [Whether <unwind.h> contains _Unwind_Backtrace])])\n\nAS_IF([test \"x$will_use_libunwind\" = xyes],\n      [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(, [return __arm__])],\n                         [default_emergency_malloc=yes])])\n\nAC_ARG_ENABLE([emergency-malloc],\n              [AS_HELP_STRING([--enable-emergency-malloc],\n                              [build emergency malloc feature])],\n              [enable_emergency_malloc=\"$enableval\"],\n              [enable_emergency_malloc=\"$default_emergency_malloc\"])\n\nAM_CONDITIONAL(BUILD_EMERGENCY_MALLOC, [test \"x$enable_emergency_malloc\" = xyes])\n\n# Also make sure we get standard PRI... definitions, even with glibc.\n# We have to use AH_VERBATIM because we need the #ifdef guard (gcc buglet)\nAH_VERBATIM([__STDC_FORMAT_MACROS],\n            [/* C99 says: define this to get the PRI... macros from stdint.h */\n#ifndef __STDC_FORMAT_MACROS\n# define __STDC_FORMAT_MACROS 1\n#endif])\n\n# Check if __environ is available (for GetenvBeforeMain)\nAC_MSG_CHECKING([for __environ])\nAC_LINK_IFELSE([AC_LANG_PROGRAM([#include <unistd.h>],\n                                [char **env = __environ])],\n               [AC_DEFINE(HAVE___ENVIRON, 1,\n                          [Define to 1 if compiler supports __environ])\n                AC_MSG_RESULT([yes])],\n               [AC_MSG_RESULT([no])])\n\nAC_CACHE_CHECK([if target has functional __cxa_demangle],\n               [perftools_cv_have_cxa_demangle],\n               [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n                    [[#include <cxxabi.h>]],\n                    [[&__cxxabiv1::__cxa_demangle]])],\n                  [perftools_cv_have_cxa_demangle=yes],\n                  [perftools_cv_have_cxa_demangle=no])])\nAS_IF([test \"x$perftools_cv_have_cxa_demangle\" = xyes],\n      [AC_DEFINE(HAVE_CXA_DEMANGLE, 1, [Whether <cxxabi.h> contains __cxxabiv1::__cxa_demangle])])\n\n# Nanosleep requires extra libraries on some architectures (solaris).\n# This sets NANOSLEEP_LIBS.  nanosleep doesn't exist on mingw, which\n# is fine for us because we don't compile libspinlock, which uses it.\nif test \"$need_nanosleep\" = yes; then\n  ACX_NANOSLEEP\n  AC_SUBST(NANOSLEEP_LIBS)\nfi\n\n# In fact, a lot of the code in this directory depends on pthreads\nAX_PTHREAD\n\n# Figure out where libc has program_invocation_name\nAC_PROGRAM_INVOCATION_NAME\n\ndnl only very recent mingw has sleep and nanosleep\ncase \"$host\" in\n   *-mingw*)\n     AC_CHECK_DECLS([sleep], [], [], [#include <unistd.h>])\n     AC_CHECK_DECLS([nanosleep], [], [], [#include <time.h>])\n   ;;\nesac\n\nif test \"x$enable_backtrace\" = xyes; then\n  AC_CHECK_DECLS([backtrace], [], [], [#include <execinfo.h>])\n  save_LIBS=$LIBS\n  LIBS=$UNWIND_LIBS\n  AC_SEARCH_LIBS([backtrace], [execinfo])\n  UNWIND_LIBS=$LIBS\n  LIBS=$save_LIBS\nfi\n\nSTACKTRACE_UNITTEST_LIBS=\nAS_IF([test \"x$ac_cv_header_execinfo_h\" = xyes],\n  AS_IF([test \"x$enable_cpu_profiler\" = xyes -o \"x$enable_heap_profiler\" = xyes],\n    [AC_CHECK_DECLS([backtrace_symbols], [], [], [#include <execinfo.h>\n                                                  ])\n     save_LIBS=$LIBS\n     LIBS=\n     AC_SEARCH_LIBS([backtrace_symbols], [execinfo])\n     STACKTRACE_UNITTEST_LIBS=$LIBS\n     LIBS=$save_LIBS]))\nAC_SUBST(STACKTRACE_UNITTEST_LIBS)\n\nAC_ARG_ENABLE([hidden-visibility],\n              [AS_HELP_STRING([--enable-hidden-visibility],\n                              [build libraries with -fvisibility=hidden])],\n              [enable_visibility=yes],\n              [enable_visibility=no])\n\nAC_DEFINE([PERFTOOLS_DLL_DECL], [], [dllexport or attribute visibility])\n\nAS_IF([test \"x$enable_visibility\" = xyes],\n  [AC_DEFINE([PERFTOOLS_DLL_DECL], [__attribute((visibility(\"default\")))], [])\n   CXXFLAGS=\"-fvisibility=hidden $CXXFLAGS\"])\n\n# In theory, config.h files shouldn't need a header guard.\n# Now there were historical reasons for doing so\n#   https://github.com/gperftools/gperftools/issues/248\n# but these days we are keeping it mostly for consistency and safety.\nAH_TOP([\n#ifndef GPERFTOOLS_CONFIG_H_\n#define GPERFTOOLS_CONFIG_H_\n])\n\n# MinGW uses autoconf, but also needs the windows shim routines\n# (since it doesn't have its own support for, say, pthreads).\n# This requires us to #include a special header file, and also to\n# link in some windows versions of .o's instead of the unix versions.\n#\n# Also, manually mark systems where we have to be careful how early\n# we run pthreads.  TODO(csilvers): turn this into an autoconf check.\nAH_BOTTOM([\n#ifdef WIN32\n// TODO(csilvers): include windows/port.h in every relevant source file instead?\n#include \"windows/port.h\"\n#endif\n\n#endif  /* #ifndef GPERFTOOLS_CONFIG_H_ */\n])\nAM_CONDITIONAL(MINGW, expr $host : '.*-mingw' >/dev/null 2>&1)\nAM_CONDITIONAL(OSX, expr $host : '.*-apple-darwin.*' >/dev/null 2>&1)\n\n# Export the --enable flags we set above.  We do this at the end so\n# other configure rules can enable or disable targets based on what\n# they find.\nAM_CONDITIONAL(WITH_CPU_PROFILER, test \"$enable_cpu_profiler\" = yes)\nAM_CONDITIONAL(WITH_HEAP_PROFILER, test \"$enable_heap_profiler\" = yes)\nAM_CONDITIONAL(WITH_DEBUGALLOC, test \"$enable_debugalloc\" = yes)\n# We make tcmalloc.so if either heap-profiler or heap-checker is asked for.\n# TODO/FIXME\nAM_CONDITIONAL(WITH_HEAP_PROFILER_OR_CHECKER,\n               test \"$enable_heap_profiler\" = yes)\n# If we don't use any profilers, we don't need stack traces (or pprof)\nAM_CONDITIONAL(WITH_STACK_TRACE, test \"$enable_cpu_profiler\" = yes -o \\\n                                      \"$enable_heap_profiler\" = yes)\n\nhave_linux_sigev_thread_id=no\nAC_MSG_CHECKING([for Linux SIGEV_THREAD_ID])\nAC_COMPILE_IFELSE(\n        [AC_LANG_PROGRAM([[#include <signal.h>\n                           #include <time.h>]],\n                         [[return SIGEV_THREAD_ID || CLOCK_THREAD_CPUTIME_ID || __linux;]])],\n        [AC_DEFINE(HAVE_LINUX_SIGEV_THREAD_ID, 1,\n                  [Define if this is Linux that has SIGEV_THREAD_ID])\n         have_linux_sigev_thread_id=yes\n         AC_MSG_RESULT([yes])],\n        [AC_MSG_RESULT([no])])\n\n# Disable large allocation report by default.\nAC_ARG_ENABLE([large-alloc-report],\n              [AS_HELP_STRING([--enable-large-alloc-report],\n                              [report very large allocations to stderr])],\n              [enable_large_alloc_report=\"$enableval\"],\n              [enable_large_alloc_report=no])\nAS_IF([test \"x$enable_large_alloc_report\" = xyes],\n      [AC_DEFINE([ENABLE_LARGE_ALLOC_REPORT], 1, [report large allocation])])\n\n# Enable aggressive decommit by default\nAC_ARG_ENABLE([aggressive-decommit-by-default],\n              [AS_HELP_STRING([--enable-aggressive-decommit-by-default],\n                              [enable aggressive decommit by default])],\n              [enable_aggressive_decommit_by_default=\"$enableval\"],\n              [enable_aggressive_decommit_by_default=no])\nAS_IF([test \"x$enable_aggressive_decommit_by_default\" = xyes],\n      [AC_DEFINE([ENABLE_AGGRESSIVE_DECOMMIT_BY_DEFAULT],\n                 1,\n                 [enable aggressive decommit by default])])\n\n# Write generated configuration file\n# NOTE: vsprojects/gperftools/tcmalloc.h is checked in\nAC_CONFIG_FILES([Makefile\n                 src/gperftools/tcmalloc.h\n                 vsprojects/include/gperftools/tcmalloc.h:src/gperftools/tcmalloc.h.in\n                 ])\nAC_OUTPUT\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gperftools.sln",
          "type": "blob",
          "size": 25.1962890625,
          "content": "Microsoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio 14\r\nVisualStudioVersion = 14.0.25420.1\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libtcmalloc_minimal\", \"vsprojects\\libtcmalloc_minimal\\libtcmalloc_minimal.vcxproj\", \"{55E2B3AE-3CA1-4DB6-97F7-0A044D6F446F}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"tcmalloc_minimal_unittest\", \"vsprojects\\tcmalloc_minimal_unittest\\tcmalloc_minimal_unittest.vcxproj\", \"{7CC73D97-C057-43A6-82EF-E6B567488D02}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"tcmalloc_minimal_large_unittest\", \"vsprojects\\tcmalloc_minimal_large\\tcmalloc_minimal_large_unittest.vcxproj\", \"{2D8B9599-C74C-4298-B723-6CF6077563E3}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"addressmap_unittest\", \"vsprojects\\addressmap_unittest\\addressmap_unittest.vcxproj\", \"{32EECEB6-7D18-477E-BC7A-30CE98457A88}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"frag_unittest\", \"vsprojects\\frag_unittest\\frag_unittest.vcxproj\", \"{24754725-DE0D-4214-8979-324247AAD78E}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"low_level_alloc_unittest\", \"vsprojects\\low_level_alloc_unittest\\low_level_alloc_unittest.vcxproj\", \"{A765198D-5305-4AB0-9A21-A0CD8201EB2A}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"malloc_hook_test\", \"vsprojects\\malloc_hook_test\\malloc_hook_test.vcxproj\", \"{3765198D-AA05-4AB0-9A21-A0CD8201EB2A}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"malloc_extension_test\", \"vsprojects\\malloc_extension_test\\malloc_extension_test.vcxproj\", \"{3765198D-5305-4AB0-9A21-A0CD8201EB2A}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"markidle_unittest\", \"vsprojects\\markidle_unittest\\markidle_unittest.vcxproj\", \"{4AF7E21D-9D0A-410C-A7DB-7D21DA5166C0}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"current_allocated_bytes_test\", \"vsprojects\\current_allocated_bytes_test\\current_allocated_bytes_test.vcxproj\", \"{4AFFF21D-9D0A-410C-A7DB-7D21DA5166C0}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"packed-cache_test\", \"vsprojects\\packed-cache_test\\packed-cache_test.vcxproj\", \"{605D3CED-B530-424E-B7D2-2A31F14FD570}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"pagemap_unittest\", \"vsprojects\\pagemap_unittest\\pagemap_unittest.vcxproj\", \"{9765198D-5305-4AB0-9A21-A0CD8201EB2A}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"page_heap_test\", \"vsprojects\\page_heap_test\\page_heap_test.vcxproj\", \"{9765198D-5305-4AB0-9A21-A0CD8201EB2B}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"realloc_unittest\", \"vsprojects\\realloc_unittest\\realloc_unittest.vcxproj\", \"{4765198D-5305-4AB0-9A21-A0CD8201EB2A}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"sampler_test\", \"vsprojects\\sampler_test\\sampler_test.vcxproj\", \"{B765198D-5305-4AB0-9A21-A0CD8201EB2A}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"stack_trace_table_test\", \"vsprojects\\stack_trace_table_test\\stack_trace_table_test.vcxproj\", \"{A4754725-DE0D-4214-8979-324247AAD78E}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"thread_dealloc_unittest\", \"vsprojects\\thread_dealloc_unittest\\thread_dealloc_unittest.vcxproj\", \"{6CFFBD0F-09E3-4282-A711-0564451FDF74}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"preamble_patcher_test\", \"vsprojects\\preamble_patcher_test\\preamble_patcher_test.vcxproj\", \"{5765198D-5305-4AB0-9A21-A0CD8201EB2A}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"system-alloc_unittest\", \"vsprojects\\system-alloc_unittest\\system-alloc_unittest.vcxproj\", \"{387F753A-0312-4A7B-A1D6-B2795E832E96}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"gtest\", \"vsprojects\\gtest\\gtest.vcxproj\", \"{0496DF42-D7AD-46B6-B10C-C57A07E89B0D}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|x64 = Debug|x64\r\n\t\tDebug|x86 = Debug|x86\r\n\t\tRelease-Override|x64 = Release-Override|x64\r\n\t\tRelease-Override|x86 = Release-Override|x86\r\n\t\tRelease-Patch|x64 = Release-Patch|x64\r\n\t\tRelease-Patch|x86 = Release-Patch|x86\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{55E2B3AE-3CA1-4DB6-97F7-0A044D6F446F}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{55E2B3AE-3CA1-4DB6-97F7-0A044D6F446F}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{55E2B3AE-3CA1-4DB6-97F7-0A044D6F446F}.Debug|x86.ActiveCfg = Debug|Win32\r\n\t\t{55E2B3AE-3CA1-4DB6-97F7-0A044D6F446F}.Debug|x86.Build.0 = Debug|Win32\r\n\t\t{55E2B3AE-3CA1-4DB6-97F7-0A044D6F446F}.Release-Override|x64.ActiveCfg = Release-Override|x64\r\n\t\t{55E2B3AE-3CA1-4DB6-97F7-0A044D6F446F}.Release-Override|x64.Build.0 = Release-Override|x64\r\n\t\t{55E2B3AE-3CA1-4DB6-97F7-0A044D6F446F}.Release-Override|x86.ActiveCfg = Release-Override|Win32\r\n\t\t{55E2B3AE-3CA1-4DB6-97F7-0A044D6F446F}.Release-Override|x86.Build.0 = Release-Override|Win32\r\n\t\t{55E2B3AE-3CA1-4DB6-97F7-0A044D6F446F}.Release-Patch|x64.ActiveCfg = Release-Patch|x64\r\n\t\t{55E2B3AE-3CA1-4DB6-97F7-0A044D6F446F}.Release-Patch|x64.Build.0 = Release-Patch|x64\r\n\t\t{55E2B3AE-3CA1-4DB6-97F7-0A044D6F446F}.Release-Patch|x86.ActiveCfg = Release-Patch|Win32\r\n\t\t{55E2B3AE-3CA1-4DB6-97F7-0A044D6F446F}.Release-Patch|x86.Build.0 = Release-Patch|Win32\r\n\t\t{7CC73D97-C057-43A6-82EF-E6B567488D02}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{7CC73D97-C057-43A6-82EF-E6B567488D02}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{7CC73D97-C057-43A6-82EF-E6B567488D02}.Debug|x86.ActiveCfg = Debug|Win32\r\n\t\t{7CC73D97-C057-43A6-82EF-E6B567488D02}.Debug|x86.Build.0 = Debug|Win32\r\n\t\t{7CC73D97-C057-43A6-82EF-E6B567488D02}.Release-Override|x64.ActiveCfg = Release-Override|x64\r\n\t\t{7CC73D97-C057-43A6-82EF-E6B567488D02}.Release-Override|x64.Build.0 = Release-Override|x64\r\n\t\t{7CC73D97-C057-43A6-82EF-E6B567488D02}.Release-Override|x86.ActiveCfg = Release-Override|Win32\r\n\t\t{7CC73D97-C057-43A6-82EF-E6B567488D02}.Release-Override|x86.Build.0 = Release-Override|Win32\r\n\t\t{7CC73D97-C057-43A6-82EF-E6B567488D02}.Release-Patch|x64.ActiveCfg = Release-Patch|x64\r\n\t\t{7CC73D97-C057-43A6-82EF-E6B567488D02}.Release-Patch|x64.Build.0 = Release-Patch|x64\r\n\t\t{7CC73D97-C057-43A6-82EF-E6B567488D02}.Release-Patch|x86.ActiveCfg = Release-Patch|Win32\r\n\t\t{7CC73D97-C057-43A6-82EF-E6B567488D02}.Release-Patch|x86.Build.0 = Release-Patch|Win32\r\n\t\t{2D8B9599-C74C-4298-B723-6CF6077563E3}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{2D8B9599-C74C-4298-B723-6CF6077563E3}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{2D8B9599-C74C-4298-B723-6CF6077563E3}.Debug|x86.ActiveCfg = Debug|Win32\r\n\t\t{2D8B9599-C74C-4298-B723-6CF6077563E3}.Debug|x86.Build.0 = Debug|Win32\r\n\t\t{2D8B9599-C74C-4298-B723-6CF6077563E3}.Release-Override|x64.ActiveCfg = Release-Override|x64\r\n\t\t{2D8B9599-C74C-4298-B723-6CF6077563E3}.Release-Override|x64.Build.0 = Release-Override|x64\r\n\t\t{2D8B9599-C74C-4298-B723-6CF6077563E3}.Release-Override|x86.ActiveCfg = Release-Override|Win32\r\n\t\t{2D8B9599-C74C-4298-B723-6CF6077563E3}.Release-Override|x86.Build.0 = Release-Override|Win32\r\n\t\t{2D8B9599-C74C-4298-B723-6CF6077563E3}.Release-Patch|x64.ActiveCfg = Release-Patch|x64\r\n\t\t{2D8B9599-C74C-4298-B723-6CF6077563E3}.Release-Patch|x64.Build.0 = Release-Patch|x64\r\n\t\t{2D8B9599-C74C-4298-B723-6CF6077563E3}.Release-Patch|x86.ActiveCfg = Release-Patch|Win32\r\n\t\t{2D8B9599-C74C-4298-B723-6CF6077563E3}.Release-Patch|x86.Build.0 = Release-Patch|Win32\r\n\t\t{32EECEB6-7D18-477E-BC7A-30CE98457A88}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{32EECEB6-7D18-477E-BC7A-30CE98457A88}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{32EECEB6-7D18-477E-BC7A-30CE98457A88}.Debug|x86.ActiveCfg = Debug|Win32\r\n\t\t{32EECEB6-7D18-477E-BC7A-30CE98457A88}.Debug|x86.Build.0 = Debug|Win32\r\n\t\t{32EECEB6-7D18-477E-BC7A-30CE98457A88}.Release-Override|x64.ActiveCfg = Release-Override|x64\r\n\t\t{32EECEB6-7D18-477E-BC7A-30CE98457A88}.Release-Override|x64.Build.0 = Release-Override|x64\r\n\t\t{32EECEB6-7D18-477E-BC7A-30CE98457A88}.Release-Override|x86.ActiveCfg = Release-Override|Win32\r\n\t\t{32EECEB6-7D18-477E-BC7A-30CE98457A88}.Release-Override|x86.Build.0 = Release-Override|Win32\r\n\t\t{32EECEB6-7D18-477E-BC7A-30CE98457A88}.Release-Patch|x64.ActiveCfg = Release-Patch|x64\r\n\t\t{32EECEB6-7D18-477E-BC7A-30CE98457A88}.Release-Patch|x64.Build.0 = Release-Patch|x64\r\n\t\t{32EECEB6-7D18-477E-BC7A-30CE98457A88}.Release-Patch|x86.ActiveCfg = Release-Patch|Win32\r\n\t\t{32EECEB6-7D18-477E-BC7A-30CE98457A88}.Release-Patch|x86.Build.0 = Release-Patch|Win32\r\n\t\t{24754725-DE0D-4214-8979-324247AAD78E}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{24754725-DE0D-4214-8979-324247AAD78E}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{24754725-DE0D-4214-8979-324247AAD78E}.Debug|x86.ActiveCfg = Debug|Win32\r\n\t\t{24754725-DE0D-4214-8979-324247AAD78E}.Debug|x86.Build.0 = Debug|Win32\r\n\t\t{24754725-DE0D-4214-8979-324247AAD78E}.Release-Override|x64.ActiveCfg = Release-Override|x64\r\n\t\t{24754725-DE0D-4214-8979-324247AAD78E}.Release-Override|x64.Build.0 = Release-Override|x64\r\n\t\t{24754725-DE0D-4214-8979-324247AAD78E}.Release-Override|x86.ActiveCfg = Release-Override|Win32\r\n\t\t{24754725-DE0D-4214-8979-324247AAD78E}.Release-Override|x86.Build.0 = Release-Override|Win32\r\n\t\t{24754725-DE0D-4214-8979-324247AAD78E}.Release-Patch|x64.ActiveCfg = Release-Patch|x64\r\n\t\t{24754725-DE0D-4214-8979-324247AAD78E}.Release-Patch|x64.Build.0 = Release-Patch|x64\r\n\t\t{24754725-DE0D-4214-8979-324247AAD78E}.Release-Patch|x86.ActiveCfg = Release-Patch|Win32\r\n\t\t{24754725-DE0D-4214-8979-324247AAD78E}.Release-Patch|x86.Build.0 = Release-Patch|Win32\r\n\t\t{A765198D-5305-4AB0-9A21-A0CD8201EB2A}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{A765198D-5305-4AB0-9A21-A0CD8201EB2A}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{A765198D-5305-4AB0-9A21-A0CD8201EB2A}.Debug|x86.ActiveCfg = Debug|Win32\r\n\t\t{A765198D-5305-4AB0-9A21-A0CD8201EB2A}.Debug|x86.Build.0 = Debug|Win32\r\n\t\t{A765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Override|x64.ActiveCfg = Release-Override|x64\r\n\t\t{A765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Override|x64.Build.0 = Release-Override|x64\r\n\t\t{A765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Override|x86.ActiveCfg = Release-Override|Win32\r\n\t\t{A765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Override|x86.Build.0 = Release-Override|Win32\r\n\t\t{A765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x64.ActiveCfg = Release-Patch|x64\r\n\t\t{A765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x64.Build.0 = Release-Patch|x64\r\n\t\t{A765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x86.ActiveCfg = Release-Patch|Win32\r\n\t\t{A765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x86.Build.0 = Release-Patch|Win32\r\n\t\t{3765198D-AA05-4AB0-9A21-A0CD8201EB2A}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{3765198D-AA05-4AB0-9A21-A0CD8201EB2A}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{3765198D-AA05-4AB0-9A21-A0CD8201EB2A}.Debug|x86.ActiveCfg = Debug|Win32\r\n\t\t{3765198D-AA05-4AB0-9A21-A0CD8201EB2A}.Debug|x86.Build.0 = Debug|Win32\r\n\t\t{3765198D-AA05-4AB0-9A21-A0CD8201EB2A}.Release-Override|x64.ActiveCfg = Release-Override|x64\r\n\t\t{3765198D-AA05-4AB0-9A21-A0CD8201EB2A}.Release-Override|x64.Build.0 = Release-Override|x64\r\n\t\t{3765198D-AA05-4AB0-9A21-A0CD8201EB2A}.Release-Override|x86.ActiveCfg = Release-Override|Win32\r\n\t\t{3765198D-AA05-4AB0-9A21-A0CD8201EB2A}.Release-Override|x86.Build.0 = Release-Override|Win32\r\n\t\t{3765198D-AA05-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x64.ActiveCfg = Release-Patch|x64\r\n\t\t{3765198D-AA05-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x64.Build.0 = Release-Patch|x64\r\n\t\t{3765198D-AA05-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x86.ActiveCfg = Release-Patch|Win32\r\n\t\t{3765198D-AA05-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x86.Build.0 = Release-Patch|Win32\r\n\t\t{3765198D-5305-4AB0-9A21-A0CD8201EB2A}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{3765198D-5305-4AB0-9A21-A0CD8201EB2A}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{3765198D-5305-4AB0-9A21-A0CD8201EB2A}.Debug|x86.ActiveCfg = Debug|Win32\r\n\t\t{3765198D-5305-4AB0-9A21-A0CD8201EB2A}.Debug|x86.Build.0 = Debug|Win32\r\n\t\t{3765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Override|x64.ActiveCfg = Release-Override|x64\r\n\t\t{3765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Override|x64.Build.0 = Release-Override|x64\r\n\t\t{3765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Override|x86.ActiveCfg = Release-Override|Win32\r\n\t\t{3765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Override|x86.Build.0 = Release-Override|Win32\r\n\t\t{3765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x64.ActiveCfg = Release-Patch|x64\r\n\t\t{3765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x64.Build.0 = Release-Patch|x64\r\n\t\t{3765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x86.ActiveCfg = Release-Patch|Win32\r\n\t\t{3765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x86.Build.0 = Release-Patch|Win32\r\n\t\t{4AF7E21D-9D0A-410C-A7DB-7D21DA5166C0}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{4AF7E21D-9D0A-410C-A7DB-7D21DA5166C0}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{4AF7E21D-9D0A-410C-A7DB-7D21DA5166C0}.Debug|x86.ActiveCfg = Debug|Win32\r\n\t\t{4AF7E21D-9D0A-410C-A7DB-7D21DA5166C0}.Debug|x86.Build.0 = Debug|Win32\r\n\t\t{4AF7E21D-9D0A-410C-A7DB-7D21DA5166C0}.Release-Override|x64.ActiveCfg = Release-Override|x64\r\n\t\t{4AF7E21D-9D0A-410C-A7DB-7D21DA5166C0}.Release-Override|x64.Build.0 = Release-Override|x64\r\n\t\t{4AF7E21D-9D0A-410C-A7DB-7D21DA5166C0}.Release-Override|x86.ActiveCfg = Release-Override|Win32\r\n\t\t{4AF7E21D-9D0A-410C-A7DB-7D21DA5166C0}.Release-Override|x86.Build.0 = Release-Override|Win32\r\n\t\t{4AF7E21D-9D0A-410C-A7DB-7D21DA5166C0}.Release-Patch|x64.ActiveCfg = Release-Patch|x64\r\n\t\t{4AF7E21D-9D0A-410C-A7DB-7D21DA5166C0}.Release-Patch|x64.Build.0 = Release-Patch|x64\r\n\t\t{4AF7E21D-9D0A-410C-A7DB-7D21DA5166C0}.Release-Patch|x86.ActiveCfg = Release-Patch|Win32\r\n\t\t{4AF7E21D-9D0A-410C-A7DB-7D21DA5166C0}.Release-Patch|x86.Build.0 = Release-Patch|Win32\r\n\t\t{4AFFF21D-9D0A-410C-A7DB-7D21DA5166C0}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{4AFFF21D-9D0A-410C-A7DB-7D21DA5166C0}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{4AFFF21D-9D0A-410C-A7DB-7D21DA5166C0}.Debug|x86.ActiveCfg = Debug|Win32\r\n\t\t{4AFFF21D-9D0A-410C-A7DB-7D21DA5166C0}.Debug|x86.Build.0 = Debug|Win32\r\n\t\t{4AFFF21D-9D0A-410C-A7DB-7D21DA5166C0}.Release-Override|x64.ActiveCfg = Release-Override|x64\r\n\t\t{4AFFF21D-9D0A-410C-A7DB-7D21DA5166C0}.Release-Override|x64.Build.0 = Release-Override|x64\r\n\t\t{4AFFF21D-9D0A-410C-A7DB-7D21DA5166C0}.Release-Override|x86.ActiveCfg = Release-Override|Win32\r\n\t\t{4AFFF21D-9D0A-410C-A7DB-7D21DA5166C0}.Release-Override|x86.Build.0 = Release-Override|Win32\r\n\t\t{4AFFF21D-9D0A-410C-A7DB-7D21DA5166C0}.Release-Patch|x64.ActiveCfg = Release-Patch|x64\r\n\t\t{4AFFF21D-9D0A-410C-A7DB-7D21DA5166C0}.Release-Patch|x64.Build.0 = Release-Patch|x64\r\n\t\t{4AFFF21D-9D0A-410C-A7DB-7D21DA5166C0}.Release-Patch|x86.ActiveCfg = Release-Patch|Win32\r\n\t\t{4AFFF21D-9D0A-410C-A7DB-7D21DA5166C0}.Release-Patch|x86.Build.0 = Release-Patch|Win32\r\n\t\t{605D3CED-B530-424E-B7D2-2A31F14FD570}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{605D3CED-B530-424E-B7D2-2A31F14FD570}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{605D3CED-B530-424E-B7D2-2A31F14FD570}.Debug|x86.ActiveCfg = Debug|Win32\r\n\t\t{605D3CED-B530-424E-B7D2-2A31F14FD570}.Debug|x86.Build.0 = Debug|Win32\r\n\t\t{605D3CED-B530-424E-B7D2-2A31F14FD570}.Release-Override|x64.ActiveCfg = Release-Override|x64\r\n\t\t{605D3CED-B530-424E-B7D2-2A31F14FD570}.Release-Override|x64.Build.0 = Release-Override|x64\r\n\t\t{605D3CED-B530-424E-B7D2-2A31F14FD570}.Release-Override|x86.ActiveCfg = Release-Override|Win32\r\n\t\t{605D3CED-B530-424E-B7D2-2A31F14FD570}.Release-Override|x86.Build.0 = Release-Override|Win32\r\n\t\t{605D3CED-B530-424E-B7D2-2A31F14FD570}.Release-Patch|x64.ActiveCfg = Release-Patch|x64\r\n\t\t{605D3CED-B530-424E-B7D2-2A31F14FD570}.Release-Patch|x64.Build.0 = Release-Patch|x64\r\n\t\t{605D3CED-B530-424E-B7D2-2A31F14FD570}.Release-Patch|x86.ActiveCfg = Release-Patch|Win32\r\n\t\t{605D3CED-B530-424E-B7D2-2A31F14FD570}.Release-Patch|x86.Build.0 = Release-Patch|Win32\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2A}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2A}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2A}.Debug|x86.ActiveCfg = Debug|Win32\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2A}.Debug|x86.Build.0 = Debug|Win32\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Override|x64.ActiveCfg = Release-Override|x64\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Override|x64.Build.0 = Release-Override|x64\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Override|x86.ActiveCfg = Release-Override|Win32\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Override|x86.Build.0 = Release-Override|Win32\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x64.ActiveCfg = Release-Patch|x64\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x64.Build.0 = Release-Patch|x64\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x86.ActiveCfg = Release-Patch|Win32\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x86.Build.0 = Release-Patch|Win32\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2B}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2B}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2B}.Debug|x86.ActiveCfg = Debug|Win32\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2B}.Debug|x86.Build.0 = Debug|Win32\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2B}.Release-Override|x64.ActiveCfg = Release-Override|x64\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2B}.Release-Override|x64.Build.0 = Release-Override|x64\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2B}.Release-Override|x86.ActiveCfg = Release-Override|Win32\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2B}.Release-Override|x86.Build.0 = Release-Override|Win32\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2B}.Release-Patch|x64.ActiveCfg = Release-Patch|x64\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2B}.Release-Patch|x64.Build.0 = Release-Patch|x64\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2B}.Release-Patch|x86.ActiveCfg = Release-Patch|Win32\r\n\t\t{9765198D-5305-4AB0-9A21-A0CD8201EB2B}.Release-Patch|x86.Build.0 = Release-Patch|Win32\r\n\t\t{4765198D-5305-4AB0-9A21-A0CD8201EB2A}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{4765198D-5305-4AB0-9A21-A0CD8201EB2A}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{4765198D-5305-4AB0-9A21-A0CD8201EB2A}.Debug|x86.ActiveCfg = Debug|Win32\r\n\t\t{4765198D-5305-4AB0-9A21-A0CD8201EB2A}.Debug|x86.Build.0 = Debug|Win32\r\n\t\t{4765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Override|x64.ActiveCfg = Release-Override|x64\r\n\t\t{4765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Override|x64.Build.0 = Release-Override|x64\r\n\t\t{4765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Override|x86.ActiveCfg = Release-Override|Win32\r\n\t\t{4765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Override|x86.Build.0 = Release-Override|Win32\r\n\t\t{4765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x64.ActiveCfg = Release-Patch|x64\r\n\t\t{4765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x64.Build.0 = Release-Patch|x64\r\n\t\t{4765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x86.ActiveCfg = Release-Patch|Win32\r\n\t\t{4765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x86.Build.0 = Release-Patch|Win32\r\n\t\t{B765198D-5305-4AB0-9A21-A0CD8201EB2A}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{B765198D-5305-4AB0-9A21-A0CD8201EB2A}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{B765198D-5305-4AB0-9A21-A0CD8201EB2A}.Debug|x86.ActiveCfg = Debug|Win32\r\n\t\t{B765198D-5305-4AB0-9A21-A0CD8201EB2A}.Debug|x86.Build.0 = Debug|Win32\r\n\t\t{B765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Override|x64.ActiveCfg = Release-Override|x64\r\n\t\t{B765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Override|x64.Build.0 = Release-Override|x64\r\n\t\t{B765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Override|x86.ActiveCfg = Release-Override|Win32\r\n\t\t{B765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Override|x86.Build.0 = Release-Override|Win32\r\n\t\t{B765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x64.ActiveCfg = Release-Patch|x64\r\n\t\t{B765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x64.Build.0 = Release-Patch|x64\r\n\t\t{B765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x86.ActiveCfg = Release-Patch|Win32\r\n\t\t{B765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x86.Build.0 = Release-Patch|Win32\r\n\t\t{A4754725-DE0D-4214-8979-324247AAD78E}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{A4754725-DE0D-4214-8979-324247AAD78E}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{A4754725-DE0D-4214-8979-324247AAD78E}.Debug|x86.ActiveCfg = Debug|Win32\r\n\t\t{A4754725-DE0D-4214-8979-324247AAD78E}.Debug|x86.Build.0 = Debug|Win32\r\n\t\t{A4754725-DE0D-4214-8979-324247AAD78E}.Release-Override|x64.ActiveCfg = Release-Override|x64\r\n\t\t{A4754725-DE0D-4214-8979-324247AAD78E}.Release-Override|x64.Build.0 = Release-Override|x64\r\n\t\t{A4754725-DE0D-4214-8979-324247AAD78E}.Release-Override|x86.ActiveCfg = Release-Override|Win32\r\n\t\t{A4754725-DE0D-4214-8979-324247AAD78E}.Release-Override|x86.Build.0 = Release-Override|Win32\r\n\t\t{A4754725-DE0D-4214-8979-324247AAD78E}.Release-Patch|x64.ActiveCfg = Release-Patch|x64\r\n\t\t{A4754725-DE0D-4214-8979-324247AAD78E}.Release-Patch|x64.Build.0 = Release-Patch|x64\r\n\t\t{A4754725-DE0D-4214-8979-324247AAD78E}.Release-Patch|x86.ActiveCfg = Release-Patch|Win32\r\n\t\t{A4754725-DE0D-4214-8979-324247AAD78E}.Release-Patch|x86.Build.0 = Release-Patch|Win32\r\n\t\t{6CFFBD0F-09E3-4282-A711-0564451FDF74}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{6CFFBD0F-09E3-4282-A711-0564451FDF74}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{6CFFBD0F-09E3-4282-A711-0564451FDF74}.Debug|x86.ActiveCfg = Debug|Win32\r\n\t\t{6CFFBD0F-09E3-4282-A711-0564451FDF74}.Debug|x86.Build.0 = Debug|Win32\r\n\t\t{6CFFBD0F-09E3-4282-A711-0564451FDF74}.Release-Override|x64.ActiveCfg = Release-Override|x64\r\n\t\t{6CFFBD0F-09E3-4282-A711-0564451FDF74}.Release-Override|x64.Build.0 = Release-Override|x64\r\n\t\t{6CFFBD0F-09E3-4282-A711-0564451FDF74}.Release-Override|x86.ActiveCfg = Release-Override|Win32\r\n\t\t{6CFFBD0F-09E3-4282-A711-0564451FDF74}.Release-Override|x86.Build.0 = Release-Override|Win32\r\n\t\t{6CFFBD0F-09E3-4282-A711-0564451FDF74}.Release-Patch|x64.ActiveCfg = Release-Patch|x64\r\n\t\t{6CFFBD0F-09E3-4282-A711-0564451FDF74}.Release-Patch|x64.Build.0 = Release-Patch|x64\r\n\t\t{6CFFBD0F-09E3-4282-A711-0564451FDF74}.Release-Patch|x86.ActiveCfg = Release-Patch|Win32\r\n\t\t{6CFFBD0F-09E3-4282-A711-0564451FDF74}.Release-Patch|x86.Build.0 = Release-Patch|Win32\r\n\t\t{5765198D-5305-4AB0-9A21-A0CD8201EB2A}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{5765198D-5305-4AB0-9A21-A0CD8201EB2A}.Debug|x86.ActiveCfg = Debug|Win32\r\n\t\t{5765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Override|x64.ActiveCfg = Release-Override|x64\r\n\t\t{5765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Override|x86.ActiveCfg = Release-Override|Win32\r\n\t\t{5765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x64.ActiveCfg = Release-Patch|x64\r\n\t\t{5765198D-5305-4AB0-9A21-A0CD8201EB2A}.Release-Patch|x86.ActiveCfg = Release-Patch|Win32\r\n\t\t{81CA712E-90B8-4AE5-9E89-5B436578D6DA}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{81CA712E-90B8-4AE5-9E89-5B436578D6DA}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{81CA712E-90B8-4AE5-9E89-5B436578D6DA}.Debug|x86.ActiveCfg = Debug|Win32\r\n\t\t{81CA712E-90B8-4AE5-9E89-5B436578D6DA}.Debug|x86.Build.0 = Debug|Win32\r\n\t\t{81CA712E-90B8-4AE5-9E89-5B436578D6DA}.Release-Override|x64.ActiveCfg = Release-Override|x64\r\n\t\t{81CA712E-90B8-4AE5-9E89-5B436578D6DA}.Release-Override|x64.Build.0 = Release-Override|x64\r\n\t\t{81CA712E-90B8-4AE5-9E89-5B436578D6DA}.Release-Override|x86.ActiveCfg = Release-Override|Win32\r\n\t\t{81CA712E-90B8-4AE5-9E89-5B436578D6DA}.Release-Override|x86.Build.0 = Release-Override|Win32\r\n\t\t{81CA712E-90B8-4AE5-9E89-5B436578D6DA}.Release-Patch|x64.ActiveCfg = Release-Patch|x64\r\n\t\t{81CA712E-90B8-4AE5-9E89-5B436578D6DA}.Release-Patch|x64.Build.0 = Release-Patch|x64\r\n\t\t{81CA712E-90B8-4AE5-9E89-5B436578D6DA}.Release-Patch|x86.ActiveCfg = Release-Patch|Win32\r\n\t\t{81CA712E-90B8-4AE5-9E89-5B436578D6DA}.Release-Patch|x86.Build.0 = Release-Patch|Win32\r\n\t\t{3A559C75-FD26-4300-B86B-165FD43EE1CE}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{3A559C75-FD26-4300-B86B-165FD43EE1CE}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{3A559C75-FD26-4300-B86B-165FD43EE1CE}.Debug|x86.ActiveCfg = Debug|Win32\r\n\t\t{3A559C75-FD26-4300-B86B-165FD43EE1CE}.Debug|x86.Build.0 = Debug|Win32\r\n\t\t{3A559C75-FD26-4300-B86B-165FD43EE1CE}.Release-Override|x64.ActiveCfg = Release-Override|x64\r\n\t\t{3A559C75-FD26-4300-B86B-165FD43EE1CE}.Release-Override|x64.Build.0 = Release-Override|x64\r\n\t\t{3A559C75-FD26-4300-B86B-165FD43EE1CE}.Release-Override|x86.ActiveCfg = Release-Override|Win32\r\n\t\t{3A559C75-FD26-4300-B86B-165FD43EE1CE}.Release-Override|x86.Build.0 = Release-Override|Win32\r\n\t\t{3A559C75-FD26-4300-B86B-165FD43EE1CE}.Release-Patch|x64.ActiveCfg = Release-Patch|x64\r\n\t\t{3A559C75-FD26-4300-B86B-165FD43EE1CE}.Release-Patch|x64.Build.0 = Release-Patch|x64\r\n\t\t{3A559C75-FD26-4300-B86B-165FD43EE1CE}.Release-Patch|x86.ActiveCfg = Release-Patch|Win32\r\n\t\t{3A559C75-FD26-4300-B86B-165FD43EE1CE}.Release-Patch|x86.Build.0 = Release-Patch|Win32\r\n\t\t{387F753A-0312-4A7B-A1D6-B2795E832E96}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{387F753A-0312-4A7B-A1D6-B2795E832E96}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{387F753A-0312-4A7B-A1D6-B2795E832E96}.Debug|x86.ActiveCfg = Debug|Win32\r\n\t\t{387F753A-0312-4A7B-A1D6-B2795E832E96}.Debug|x86.Build.0 = Debug|Win32\r\n\t\t{387F753A-0312-4A7B-A1D6-B2795E832E96}.Release-Override|x64.ActiveCfg = Release-Override|x64\r\n\t\t{387F753A-0312-4A7B-A1D6-B2795E832E96}.Release-Override|x64.Build.0 = Release-Override|x64\r\n\t\t{387F753A-0312-4A7B-A1D6-B2795E832E96}.Release-Override|x86.ActiveCfg = Release-Override|Win32\r\n\t\t{387F753A-0312-4A7B-A1D6-B2795E832E96}.Release-Override|x86.Build.0 = Release-Override|Win32\r\n\t\t{387F753A-0312-4A7B-A1D6-B2795E832E96}.Release-Patch|x64.ActiveCfg = Release-Patch|x64\r\n\t\t{387F753A-0312-4A7B-A1D6-B2795E832E96}.Release-Patch|x64.Build.0 = Release-Patch|x64\r\n\t\t{387F753A-0312-4A7B-A1D6-B2795E832E96}.Release-Patch|x86.ActiveCfg = Release-Patch|Win32\r\n\t\t{387F753A-0312-4A7B-A1D6-B2795E832E96}.Release-Patch|x86.Build.0 = Release-Patch|Win32\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        },
        {
          "name": "vsprojects",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}