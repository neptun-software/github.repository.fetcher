{
  "metadata": {
    "timestamp": 1736566221466,
    "page": 232,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "flashlight/flashlight",
      "stars": 5316,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.5166015625,
          "content": "---\nAccessModifierOffset: -1\nAlignAfterOpenBracket: AlwaysBreak\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlinesLeft: true\nAlignOperands:   false\nAlignTrailingComments: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: false\nBinPackParameters: false\nBraceWrapping:\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: false\nColumnLimit:     80\nCommentPragmas:  '^ IWYU pragma:'\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nForEachMacros:   [ FOR_EACH, FOR_EACH_R, FOR_EACH_RANGE, ]\nIncludeCategories:\n  - Regex:           '^<.*\\.h(pp)?>'\n    Priority:        1\n  - Regex:           '^<.*'\n    Priority:        2\n  - Regex:           '.*'\n    Priority:        3\nIndentCaseLabels: true\nIndentPPDirectives: None\nIndentWidth:     2\nIndentWrappedFunctionNames: false\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: false\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\nReflowComments:  true\nSortIncludes:    true\nSpaceAfterCStyleCast: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Cpp11\nTabWidth:        8\nUseTab:          Never\n...\n"
        },
        {
          "name": ".docker",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.109375,
          "content": "# Ignore everything\n**\n\n# Allow files and directories\n!/bindings/**\n!/cmake/**\n!/flashlight/**\n!/CMakeLists.txt\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4560546875,
          "content": "# Build\nbuild\nrelease\ndebug\n*.so\n\n# FB\nfb\nTARGETS\n\n# Conan\nconanbuildinfo*\nconan.lock\narrayfire\nconaninfo*\ngraph_info.json\n\n# Python bindings\n__pycache__/\n*$py.class\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n*.egg-info/\n.installed.cfg\n*.egg\nwheels/\n\n# Coverage\n*.info\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n*.dylib\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Dev environment\n.vscode\n.vs\nCMakeSettings.json\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.3994140625,
          "content": "# .readthedocs.yml for flashlight\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\n# Build documentation with Sphinx\nsphinx:\n  configuration: docs/source/conf.py\n\n# Python version and requirements for build\npython:\n  install:\n    - requirements: docs/requirements.txt\n"
        },
        {
          "name": "CITATION",
          "type": "blob",
          "size": 0.4619140625,
          "content": "@misc{kahn2022flashlight,\n      title={Flashlight: Enabling Innovation in Tools for Machine Learning},\n      author={Jacob Kahn and Vineel Pratap and Tatiana Likhomanenko and Qiantong Xu and Awni Hannun and Jeff Cai and Paden Tomasello and Ann Lee and Edouard Grave and Gilad Avidov and Benoit Steiner and Vitaliy Liptchinsky and Gabriel Synnaeve and Ronan Collobert},\n      year={2022},\n      eprint={2201.12465},\n      archivePrefix={arXiv},\n      primaryClass={cs.LG}\n}\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 4.7958984375,
          "content": "cmake_minimum_required(VERSION 3.16)\n\nproject(flashlight LANGUAGES CXX C VERSION 0.4.0)\n\ninclude(CTest)\ninclude(CMakeDependentOption)\n\n# ----------------------------- Setup -----------------------------\nfind_program(CCACHE_PROGRAM ccache)\nif(CCACHE_PROGRAM)\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE \"${CCACHE_PROGRAM}\")\nendif()\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n# The CUDA standard is still C++14 to enable interopability with\n# slightly older and still well-supported versions of CUDA/nvcc\n# (e.g. CUDA < 11). This will be bumped to 17 once CUDA 11 is\n# required.\nset(CMAKE_CUDA_STANDARD 14)\nset(CMAKE_CUDA_STANDARD_REQUIRED ON)\n\n# Default directories for installation\nset(FL_INSTALL_INC_DIR \"include\" CACHE PATH \"Install path for headers\")\nset(FL_INSTALL_INC_DIR_HEADER_LOC ${FL_INSTALL_INC_DIR}/flashlight)\nset(FL_INSTALL_LIB_DIR \"lib\" CACHE PATH \"Install path for libraries\")\nset(FL_INSTALL_BIN_DIR \"bin\" CACHE PATH \"Install path for binaries\")\n# Other assets\nset(FL_INSTALL_ASSETS_BASE_DIR \"share/flashlight\")\nset(FL_INSTALL_CMAKE_DIR \"${FL_INSTALL_ASSETS_BASE_DIR}/cmake\" CACHE PATH \"Install path for CMake files\")\nset(FL_INSTALL_EXAMPLES_DIR \"${FL_INSTALL_ASSETS_BASE_DIR}/examples\" CACHE PATH \"Install path for example files\")\nset(FL_INSTALL_DOC_DIR \"${FL_INSTALL_ASSETS_BASE_DIR}/doc\" CACHE PATH \"Install path for documentation\")\n\ninclude(CheckCXXCompilerFlag)\n# All libraries should have their symbols exported so plugins can lazily\n# symbols from any of them\ncheck_cxx_compiler_flag(\"-rdynamic\" COMPILER_SUPPORTS_RDYNAMIC)\nif(${COMPILER_SUPPORTS_RDYNAMIC})\n  message(STATUS \"-rdynamic supported.\")\n  set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -rdynamic\")\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -rdynamic\")\nelse()\n  if (NOT WIN32) # Windows operates with explicit dll exports\n    message(WARNING\n      \"This compiler doesn't support dynamic symbol exports. \"\n      \"Plugin functionality likely won't work.\")\n  endif()\nendif()\nset(FL_BUILD_PLUGIN ${COMPILER_SUPPORTS_RDYNAMIC})\n\n# ]------ The library target for the Flashlight core\nadd_library(flashlight)\n\n# We haven't [yet] polluted Flashlight with explicit dllexport annotations\nif (MSVC)\n  target_compile_options(flashlight PUBLIC $<$<NOT:$<COMPILE_LANGUAGE:CUDA>>:/bigobj>)\nendif()\nif (WIN32)\n  target_compile_definitions(flashlight PUBLIC _USE_MATH_DEFINES NOMINMAX)\nendif()\n\ninclude(InternalUtils)\n\n# ----------------------------- Configuration -----------------------------\n\noption(FL_BUILD_TESTS \"Build tests\" ON)\noption(FL_CODE_COVERAGE \"Enable coverage reporting\" OFF)\noption(FL_BUILD_EXAMPLES \"Build examples\" ON)\noption(FL_BUILD_EXPERIMENTAL \"Build internal experimental components\" OFF)\noption(FL_BUILD_SCRIPTS \"Build internal scripts for wav2letter++\" OFF)\noption(FL_BUILD_RECIPES \"Build recipes\" ON)\noption(FL_BUILD_STANDALONE \"Build standalone installation\" ON)\n\nif (FL_BUILD_TESTS)\n  enable_testing()\n  include(TestUtils)\nendif()\n\n# External project configuration\noption(FL_TEXT_REQUIRE_KENLM \"Require KenLM in the Flashlight text build\" OFF)\n\n# List of installable targets\nset(INSTALLABLE_TARGETS)\n\nset(FL_ROOT_DIR ${PROJECT_SOURCE_DIR}/flashlight)\nset(FL_BUILD_BINARY_OUTPUT_DIR \"${CMAKE_CURRENT_BINARY_DIR}/bin\")\n\n# ]--- Backend Options\n# TODO: change these to FL_BACKEND_* to be consistent with preproc\noption(FL_USE_CUDA   \"Build CUDA support for Flashlight backends\" OFF)\noption(FL_USE_CPU    \"Build CPU support for Flashlight backends\"  OFF)\noption(FL_USE_OPENCL \"Build OpenCL support for Flashlight backends\" OFF)\noption(FL_USE_MKL    \"Build MKL support for Flashlight backends\" OFF)\n\n# --------------------------- Core ---------------------------\n# Internal includes are implicitly defined as <flashlight...>\ntarget_include_directories(\n  flashlight\n  PUBLIC\n  $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>\n)\n\nset(FL_CORE_DIR \"${FL_ROOT_DIR}/fl\")\ninclude(${FL_CORE_DIR}/CMakeLists.txt)\nlist(APPEND INSTALLABLE_TARGETS flashlight)\n# flashlight core components keep their relative paths with respect to project\nsetup_install_headers(${FL_CORE_DIR} ${FL_INSTALL_INC_DIR_HEADER_LOC})\n# FL_USE_* variables are set in flashlight/fl/tensor/CMakeLists.txt based on\n# backend registration\ntarget_compile_definitions(flashlight\n  PUBLIC\n  FL_BACKEND_CPU=$<BOOL:${FL_USE_CPU}>\n  FL_BACKEND_CUDA=$<BOOL:${FL_USE_CUDA}>\n  FL_BUILD_PROFILING=$<BOOL:${FL_BUILD_PROFILING}>\n  FL_COMPILE_LIBRARY=$<BOOL:${BUILD_SHARED_LIBS}>\n  PRIVATE\n  FL_DLL\n  )\n\nif (FL_CODE_COVERAGE)\n  add_coverage_to_target(TARGET flashlight)\nendif()\n\n# --------------------------- pkg/app ---------------------------\ninclude(${FL_ROOT_DIR}/pkg/CMakeLists.txt)\ninclude(${FL_ROOT_DIR}/app/CMakeLists.txt)\n\n# --------------------------- Cleanup ---------------------------\nsetup_install_targets(INSTALL_TARGETS ${INSTALLABLE_TARGETS})\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.27734375,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at <opensource-conduct@fb.com>. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.306640625,
          "content": "# Contributing to flashlight\nflashlight is still under development; we appreciate any contributions.\n\n## Pull Requests\nWe actively welcome your pull requests.\n\n1. Fork the repo and create your branch from `master`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update [and build](docs/README.md) the documentation (to check correctness - don't submit built documentation).\n4. Ensure the test suite passes.\n5. Make sure your code lints and run `clang-format` given the provided configuration.\n6. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n\n## Contributor License Agreement (\"CLA\")\nAll contributors must sign the CLA for their pull requests to be eligible for merge. One only needs to do this once to contribute to any of Facebook's open source projects.\n\nYou can find the CLA [here](https://code.facebook.com/cla).\n\n## Issues\nWe use [GitHub issues](https://github.com/flashlight/flashlight/issues) to track public bugs. When filing, a bug, please make sure your description is clear and include sufficient instructions to reproduce the issue (for instance, your OS, compiler version, and selected backend).\n\n## License\nBy contributing to flashlight, you agree that your contributions will be licensed\nunder the LICENSE file in the root directory of this source tree.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0634765625,
          "content": "\nMIT License\n\nCopyright (c) Meta Platforms, Inc. and affiliates.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 24.0791015625,
          "content": "[![CircleCI](https://circleci.com/gh/flashlight/flashlight.svg?style=shield)](https://app.circleci.com/pipelines/github/flashlight/flashlight)\n[![Documentation Status](https://img.shields.io/readthedocs/fl.svg)](https://fl.readthedocs.io/en/latest/)\n[![Docker Image Build Status](https://img.shields.io/github/workflow/status/flashlight/flashlight/Publish%20Docker%20images?label=docker%20image%20build)](https://hub.docker.com/r/flml/flashlight/tags)\n[![Join the chat at https://gitter.im/flashlight-ml/community](https://img.shields.io/gitter/room/flashlight-ml/community)](https://gitter.im/flashlight-ml/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![codecov](https://codecov.io/gh/flashlight/flashlight/branch/master/graph/badge.svg?token=rBp4AilMc0)](https://codecov.io/gh/flashlight/flashlight)\n\n[![Docker Image for CUDA backend](https://img.shields.io/docker/image-size/flml/flashlight/cuda-latest?label=docker%20%28cuda%29&logo=docker)](https://hub.docker.com/r/flml/flashlight/tags?page=1&ordering=last_updated&name=cuda-latest)\n[![Docker Image for CPU backend](https://img.shields.io/docker/image-size/flml/flashlight/cpu-latest?label=docker%20%28cpu%29&logo=docker)](https://hub.docker.com/r/flml/flashlight/tags?page=1&ordering=last_updated&name=cpu-latest)\n\n[![Install CUDA backend with vcpkg](https://img.shields.io/badge/dynamic/json?color=orange&label=get%20%28cuda%29&query=name&url=https%3A%2F%2Fraw.githubusercontent.com%2Fmicrosoft%2Fvcpkg%2Fmaster%2Fports%2Fflashlight-cuda%2Fvcpkg.json&prefix=vcpkg%20install%20)](https://vcpkg.info/port/flashlight-cuda)\n[![Install CPU backend with vcpkg](https://img.shields.io/badge/dynamic/json?color=orange&label=get%20%28cpu%29&query=name&url=https%3A%2F%2Fraw.githubusercontent.com%2Fmicrosoft%2Fvcpkg%2Fmaster%2Fports%2Fflashlight-cpu%2Fvcpkg.json&prefix=vcpkg%20install%20)](https://vcpkg.info/port/flashlight-cpu)\n\n\nFlashlight is a fast, flexible machine learning library written entirely in C++\nfrom the Facebook AI Research and the creators of Torch, TensorFlow, Eigen and\nDeep Speech. Its core features include:\n- **Total internal modifiability** including [internal APIs for tensor computation](flashlight/fl/tensor/README.md).\n- **A small footprint**, with the core clocking in at under 10 MB and 20k lines of C++.\n- **High-performance defaults** featuring just-in-time kernel compilation with modern C++ via the [*ArrayFire*](https://github.com/arrayfire/arrayfire)\ntensor library.\n- An emphasis on efficiency and scale.\n\nNative support in C++ and simple extensibility makes Flashlight a powerful research framework that enables fast iteration on new experimental setups and algorithms with little unopinionation and without sacrificing performance. In a single repository, Flashlight provides [apps](https://github.com/flashlight/flashlight/tree/master/flashlight/app) for research across multiple domains:\n- [Automatic speech recognition](https://github.com/flashlight/flashlight/tree/master/flashlight/app/asr) (formerly [wav2letter](https://github.com/flashlight/wav2letter/) project) — [Documentation](flashlight/app/asr) | [Tutorial](flashlight/app/asr/tutorial)\n- [Image classification](flashlight/app/imgclass)\n- [Object detection](flashlight/app/objdet)\n- [Language modeling](flashlight/app/lm)\n\n### Project Layout\n\nFlashlight is broken down into a few parts:\n- [**`flashlight/lib`**](flashlight/lib) contains kernels and standalone utilities for audio processing and more.\n- [**`flashlight/fl`**](flashlight/fl) is the core tensor interface and neural network library using the [ArrayFire](https://github.com/arrayfire/arrayfire) tensor library by default.\n- [**`flashlight/pkg`**](flashlight/pkg) are domain packages for speech, vision, and text built on the core.\n- [**`flashlight/app`**](flashlight/app) are applications of the core library to machine learning across domains.\n\n## Quickstart\n\nFirst, [build and install Flashlight](#building-and-installing) and [link it to your own project](#building-your-own-project-with-flashlight).\n\n[`Sequential`](https://fl.readthedocs.io/en/latest/modules.html#sequential) forms a sequence of Flashlight [`Module`](https://fl.readthedocs.io/en/latest/modules.html#module)s for chaining computation.\n\n<details><summary>Implementing a simple convnet is easy.</summary>\n\n```c++\n#include <flashlight/fl/flashlight.h>\n\nSequential model;\n\nmodel.add(View(fl::Shape({IM_DIM, IM_DIM, 1, -1})));\nmodel.add(Conv2D(\n    1 /* input channels */,\n    32 /* output channels */,\n    5 /* kernel width */,\n    5 /* kernel height */,\n    1 /* stride x */,\n    1 /* stride y */,\n    PaddingMode::SAME; /* padding mode */,\n    PaddingMode::SAME; /* padding mode */));\nmodel.add(ReLU());\nmodel.add(Pool2D(\n    2 /* kernel width */,\n    2 /* kernel height */,\n    2 /* stride x */,\n    2 /* stride y */));\nmodel.add(Conv2D(32, 64, 5, 5, 1, 1, PaddingMode::SAME, PaddingMode::SAME));\nmodel.add(ReLU());\nmodel.add(Pool2D(2, 2, 2, 2));\nmodel.add(View(fl::Shape({7 * 7 * 64, -1})));\nmodel.add(Linear(7 * 7 * 64, 1024));\nmodel.add(ReLU());\nmodel.add(Dropout(0.5));\nmodel.add(Linear(1024, 10));\nmodel.add(LogSoftmax());\n```\n\nPerforming forward and backward computation is straightforwards:\n```c++\nauto output = model.forward(input);\nauto loss = categoricalCrossEntropy(output, target);\nloss.backward();\n```\n\n</details>\n\nSee the [MNIST example](https://fl.readthedocs.io/en/latest/mnist.html) for a full tutorial including a training loop and dataset abstractions.\n\n[`Variable`](https://fl.readthedocs.io/en/latest/variable.html) is a tape-based abstraction that wraps [Flashlight tensors](https://github.com/flashlight/flashlight/blob/main/flashlight/fl/tensor/TensorBase.h). Tape-based [Automatic differentiation in Flashlight](https://fl.readthedocs.io/en/latest/autograd.html) is simple and works as you'd expect.\n\n<details><summary>Autograd Example</summary>\n\n```c++\nauto A = Variable(fl::rand({1000, 1000}), true /* calcGrad */);\nauto B = 2.0 * A;\nauto C = 1.0 + B;\nauto D = log(C);\nD.backward(); // populates A.grad() along with gradients for B, C, and D.\n```\n\n</details>\n\n## Building and Installing\n[**Install with `vcpkg`**](#library-installation-with-vcpkg) | [**With Docker**](#building-and-running-flashlight-with-docker) | [**From Source**](#building-from-source) | [**From Source with `vcpkg`**](#from-source-build-with-vcpkg) | [**Build Your Project with Flashlight**](#building-your-own-project-with-flashlight)\n\n### Requirements\nAt minimum, compilation requires:\n- A C++ compiler with good C++17 support (e.g. gcc/g++ >= 7)\n- [CMake](https://cmake.org/) — version 3.10 or later, and ``make``\n- A Linux-based operating system.\n\nSee the [full dependency](#dependencies) list for more details if [building from source](#building-from-source).\n\nInstructions for building/installing Python bindings [can be found here](bindings/python/README.md).\n\n### Flashlight Build Setups\n\nFlashlight can be broken down into several components as [described above](#project-layout). Each component can be incrementally built by specifying the correct [build options](#build-options).\n\nThere are two ways to work with Flashlight:\n1. **As an installed library** that you link to with your own project. This is best for building standalone applications dependent on Flashlight.\n2. **With in-source development** where the Flashlight project source is changed and rebuilt. This is best if customizing/hacking the core framework or the Flashlight-provided [app binaries](flashlight/app).\n\nFlashlight can be built in one of two ways:\n1. [**With `vcpkg`**](#installing-flashlight-with-vcpkg), a [C++ package manager](https://github.com/microsoft/vcpkg).\n2. [**From source**](#building-from-source) by installing dependencies as needed.\n\n### Installing Flashlight with `vcpkg`\n#### Library Installation with `vcpkg`\n\nFlashlight is most-easily built and installed with `vcpkg`. Both the CUDA and CPU backends are supported with `vcpkg`. For either backend, first install [Intel MKL](https://software.intel.com/content/www/us/en/develop/tools/oneapi/base-toolkit/download.html). For the CUDA backend, install [`CUDA` >= 9.2](https://developer.nvidia.com/cuda-downloads), [`cuDNN`](https://docs.nvidia.com/deeplearning/cudnn/install-guide/index.html), and [`NCCL`](https://docs.nvidia.com/deeplearning/nccl/install-guide/index.html). Then, after [installing `vcpkg`](https://github.com/microsoft/vcpkg#getting-started), install the libraries and core with:\n```shell\n./vcpkg/vcpkg install flashlight-cuda # CUDA backend, OR\n./vcpkg/vcpkg install flashlight-cpu  # CPU backend\n```\nTo install [Flashlight apps](flashlight/app), check the features available for installation by running `./vcpkg search flashlight-cuda` or `./vcpkg search flashlight-cpu`. Each app is a \"feature\": for example, `./vcpkg install flashlight-cuda[asr]` installs the ASR app with the CUDA backend.\n\nBelow is the currently-supported list of features (for each of [`flashlight-cuda`](https://vcpkg.info/port/flashlight-cuda) and [`flashlight-cpu`](https://vcpkg.info/port/flashlight-cpu)):\n```\nflashlight-{cuda/cpu}[lib]      # Flashlight libraries\nflashlight-{cuda/cpu}[nn]       # Flashlight neural net library\nflashlight-{cuda/cpu}[asr]      # Flashlight speech recognition app\nflashlight-{cuda/cpu}[lm]       # Flashlight language modeling app\nflashlight-{cuda/cpu}[imgclass] # Flashlight image classification app\n```\n\nFlashlight [app binaries](flashlight/app) are also built for the selected features and are installed into the `vcpkg` install tree's `tools` directory.\n\n[Integrating Flashlight into your own project](#with-a-vcpkg-flashlight-installation) with is simple using `vcpkg`'s [CMake toolchain integration](https://vcpkg.readthedocs.io/en/latest/examples/installing-and-using-packages/#cmake).\n\n#### From-Source Build with `vcpkg`\n\nFirst, install the dependencies for your backend of choice using `vcpkg` (click to expand the below):\n\n<details><summary>Installing CUDA Backend Dependencies with vcpkg</summary>\n\nTo build the Flashlight CUDA backend from source using dependencies installed with `vcpkg`, install [`CUDA` >= 9.2](https://developer.nvidia.com/cuda-downloads), [`cuDNN`](https://docs.nvidia.com/deeplearning/cudnn/install-guide/index.html), [`NCCL`](https://docs.nvidia.com/deeplearning/nccl/install-guide/index.html), and [Intel MKL](https://software.intel.com/content/www/us/en/develop/tools/oneapi/base-toolkit/download.html), then build the rest of the dependencies for the CUDA backend based on which Flashlight features you'd like to build:\n```shell\n./vcpkg install \\\n    cuda intel-mkl fftw3 cub kenlm                \\ # if building flashlight libraries\n    arrayfire[cuda] cudnn nccl openmpi cereal stb \\ # if building the flashlight neural net library\n    gflags glog                                   \\ # if building any flashlight apps\n    libsndfile                                    \\ # if building the flashlight asr app\n    gtest                                           # optional, if building tests\n```\n</details>\n\n<details><summary>Installing CPU Backend Dependencies with vcpkg</summary>\n\nTo build the Flashlight CPU backend from source using dependencies installed with `vcpkg`, install [Intel MKL](https://software.intel.com/content/www/us/en/develop/tools/oneapi/base-toolkit/download.html), then build the rest of the dependencies for the CPU backend based on which Flashlight features you'd like to build:\n```shell\n./vcpkg install \\\n    intel-mkl fftw3 kenlm                              \\ # for flashlight libraries\n    arrayfire[cpu] gloo[mpi] openmpi onednn cereal stb \\ # for the flashlight neural net library\n    gflags glog                                        \\ # for the flashlight runtime pkg (any flashlight apps using it)\n    libsndfile                                         \\ # for the flashlight speech pkg\n    gtest                                                # optional, for tests\n```\n\n</details>\n\n##### Build Using the `vcpkg` Toolchain File\nTo build Flashlight from source with these dependencies, clone the repository:\n```shell\ngit clone https://github.com/flashlight/flashlight.git && cd flashlight\nmkdir -p build && cd build\n```\nThen, build from source using `vcpkg`'s [CMake toolchain](https://github.com/microsoft/vcpkg/blob/master/docs/users/integration.md#cmake-toolchain-file-recommended-for-open-source-cmake-projects):\n```shell\ncmake .. \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DFL_BUILD_ARRAYFIRE=ON \\\n    -DCMAKE_TOOLCHAIN_FILE=[path to your vcpkg clone]/scripts/buildsystems/vcpkg.cmake\nmake -j$(nproc)\nmake install -j$(nproc) # only if you want to install Flashlight for external use\n```\nTo build a subset of Flashlight's features, see the [build options](#build-options) below.\n\n### Building from Source\nTo build from source, first install the below [dependencies](#dependencies). Most are available with your system's local package manager.\n\nSome dependencies marked below are downloaded and installed automatically if not found on the local system. `FL_BUILD_STANDALONE` determines this behavior — if disabled, dependencies won't be downloaded and built when building Flashlight.\n\n**Once all dependencies are installed**, clone the repository:\n```shell\ngit clone https://github.com/flashlight/flashlight.git && cd flashlight\nmkdir -p build && cd build\n```\nThen build all Flashlight components with:\n```\ncmake .. -DCMAKE_BUILD_TYPE=Release -DFL_BUILD_ARRAYFIRE=ON [...build options]\nmake -j$(nproc)\nmake install\n```\nSetting the `MKLROOT` environment variable (`export MKLROOT=/opt/intel/oneapi/mkl/latest` or `export MKLROOT=/opt/intel/mkl` on most Linux-based systems) can help CMake find Intel MKL if not initially found.\n\nTo build a smaller subset of Flashlight features/apps, see the [build options](#build-options) below for a complete list of options.\n\nTo install Flashlight in a custom directory, use CMake's [`CMAKE_INSTALL_PREFIX`](https://cmake.org/cmake/help/v3.10/variable/CMAKE_INSTALL_PREFIX.html) argument. Flashlight libraries can be built as shared libraries using CMake's [`BUILD_SHARED_LIBS`](https://cmake.org/cmake/help/v3.10/variable/BUILD_SHARED_LIBS.html) argument.\n\nFlashlight uses modern CMake and `IMPORTED` targets for most dependencies. If a dependency isn't found, passing `-D<package>_DIR` to your `cmake` command or exporting `<package>_DIR` as an environment variable equal to the path to `<package>Config.cmake` can help locate dependencies on your system. See [the documentation](https://cmake.org/cmake/help/v3.10/command/find_package.html) for more details. If CMake is failing to locate a package, check to see if a corresponding [issue](https://github.com/flashlight/flashlight/issues) has already been created before creating your own.\n\n#### Minimal setup on macOS\n\nOn MacOS, ArrayFire can be installed with homebrew and the Flashlight core can be built as follows:\n\n```\nbrew install arrayfire\ncmake .. \\\n      -DFL_ARRAYFIRE_USE_OPENCL=ON \\\n      -DFL_USE_ONEDNN=OFF \\\n      -DFL_BUILD_TESTS=OFF \\\n      -DFL_BUILD_EXAMPLES=OFF \\\n      -DFL_BUILD_SCRIPTS=OFF \\\n      -DFL_BUILD_DISTRIBUTED=OFF\nmake -j$(nproc)\n```\n\n#### Dependencies\n\nDependencies marked with `*` are automatically downloaded and built from source if not found on the system. Setting `FL_BUILD_STANDALONE` to `OFF` disables this behavior.\n\nDependencies marked with `^` are required if building with distributed training enabled (`FL_BUILD_DISTRIBUTED` — see the [build options](#build-options) below). Distributed training is required for all apps.\n\nDependencies marked with `†` are installable via `vcpkg`. See the [instructions for installing those dependencies](#from-source-build-with-vcpkg) above for doing a Flashlight from-source build.\n\n<table>\n<thead>\n  <tr>\n    <th>Component</th>\n    <th>Backend</th>\n    <th>Dependencies</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td rowspan=\"2\">libraries</td>\n    <td>CUDA</td>\n    <td><a href=\"https://developer.nvidia.com/cuda-downloads\">CUDA</a> &gt;= 9.2, <a href=\"https://github.com/nvidia/cub\">CUB</a>*† (if CUDA &lt; 11)</td>\n  </tr>\n  <tr>\n    <td>CPU</td>\n    <td>A BLAS library (<a href=\"https://software.intel.com/content/www/us/en/develop/tools/oneapi/base-toolkit/download.html\">Intel MKL</a> &gt;= 2018, OpenBLAS†, etc)</td>\n  </tr>\n  <tr>\n    <td rowspan=\"3\">core</td>\n    <td>Any</td>\n    <td><a href=\"https://github.com/arrayfire/arrayfire#installation\">ArrayFire</a> &gt;= 3.7.3†, an MPI library^(<a href=\"https://www.open-mpi.org/\">OpenMPI</a>†, etc),&nbsp;&nbsp;<a href=\"https://github.com/USCiLab/cereal\">cereal</a>*† &gt;= 1.3.0, <a href=\"https://github.com/nothings/stb\">stb</a>*†</td>\n  </tr>\n  <tr>\n    <td>CUDA</td>\n    <td><a href=\"https://developer.nvidia.com/cuda-downloads\">CUDA</a> &gt;= 9.2, <a href=\"https://developer.nvidia.com/nccl\">NCCL</a>^, <a href=\"https://developer.nvidia.com/cuDNN\">cuDNN</a></td>\n  </tr>\n  <tr>\n    <td>CPU</td>\n    <td><a href=\"https://github.com/oneapi-src/oneDNN\">oneDNN</a>† &gt;= 2.5.2, <a href=\"https://github.com/facebookincubator/gloo\">gloo</a> (<a href=\"https://github.com/facebookincubator/gloo/blob/01e2c2660cd43963ce1fe3e21220ac01f07d9a4b/docs/rendezvous.md#using-mpi\">with MPI</a>)*^†</td>\n  </tr>\n  <tr>\n    <td>app: all </td>\n    <td>Any</td>\n    <td><a href=\"https://github.com/google/glog\">Google Glog</a>†, <a href=\"https://github.com/gflags/gflags\">Gflags</a>†</td>\n  </tr>\n  <tr>\n    <td>app: asr</td>\n    <td>Any</td>\n    <td><a href=\"https://github.com/libsndfile/libsndfile\">libsndfile</a>*† &gt;= 10.0.28, a BLAS library (<a href=\"https://software.intel.com/content/www/us/en/develop/tools/oneapi/base-toolkit/download.html\">Intel MKL</a> &gt;= 2018, OpenBLAS†, etc), <a href=\"https://github.com/flashlight/text\">flashlight/text</a>*</td>\n  </tr>\n  <tr>\n    <td>app: imgclass</td>\n    <td>Any</td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>app: imgclass</td>\n    <td>Any</td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>app: lm</td>\n    <td>Any</td>\n    <td><a href=\"https://github.com/flashlight/text\">flashlight/text</a>*</td>\n  </tr>\n  <tr>\n    <td>tests</td>\n    <td>Any</td>\n    <td><a href=\"https://github.com/google/googletest\">Google Test (gtest, with gmock)</a>*† &gt;= 1.10.0</td>\n  </tr>\n</tbody>\n</table>\n\n#### Build Options\nThe Flashlight CMake build accepts the following build options (prefixed with `-D` when running CMake from the command line):\n\n<table>\n<thead>\n  <tr>\n    <th>Name</th>\n    <th>Options</th>\n    <th>Default Value</th>\n    <th>Description</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td rowspan=\"2\">FL_BUILD_ARRAYFIRE</td>\n    <td>ON, OFF</td>\n    <td>ON</td>\n    <td>Build Flashlight with the ArrayFire backend.</td>\n  </tr>\n  <tr>\n    <td>ON, OFF</td>\n    <td>ON</td>\n    <td>Downloads/builds some dependencies if not found.</td>\n  </tr>\n  <tr>\n    <td rowspan=\"3\">FL_BUILD_LIBRARIES</td>\n    <td>ON, OFF</td>\n    <td>ON</td>\n    <td>Build the Flashlight libraries.</td>\n  </tr>\n  <tr>\n    <td>ON, OFF</td>\n    <td>ON</td>\n    <td>Build the Flashlight neural net library.</td>\n  </tr>\n  <tr>\n    <td>ON, OFF</td>\n    <td>ON</td>\n    <td>Build with distributed training; required for apps.</td>\n  </tr>\n  <tr>\n    <td>FL_BUILD_CONTRIB</td>\n    <td>ON, OFF</td>\n    <td>ON</td>\n    <td>Build contrib APIs subject to breaking changes.</td>\n  </tr>\n  <tr>\n    <td>FL_BUILD_APPS</td>\n    <td>ON, OFF</td>\n    <td>ON</td>\n    <td>Build applications (see below).</td>\n  </tr>\n  <tr>\n    <td>FL_BUILD_APP_ASR</td>\n    <td>ON, OFF</td>\n    <td>ON</td>\n    <td>Build the automatic speech recognition application.</td>\n  </tr>\n  <tr>\n    <td>FL_BUILD_APP_IMGCLASS</td>\n    <td>ON, OFF</td>\n    <td>ON</td>\n    <td>Build the image classification application.</td>\n  </tr>\n  <tr>\n    <td>FL_BUILD_APP_LM</td>\n    <td>ON, OFF</td>\n    <td>ON</td>\n    <td>Build the language modeling application.</td>\n  </tr>\n  <tr>\n    <td>FL_BUILD_APP_ASR_TOOLS</td>\n    <td>ON, OFF</td>\n    <td>ON</td>\n    <td>Build automatic speech recognition app tools.</td>\n  </tr>\n  <tr>\n    <td>FL_BUILD_TESTS</td>\n    <td>ON, OFF</td>\n    <td>ON</td>\n    <td>Build tests.</td>\n  </tr>\n  <tr>\n    <td>FL_BUILD_EXAMPLES</td>\n    <td>ON, OFF</td>\n    <td>ON</td>\n    <td>Build examples.</td>\n  </tr>\n  <tr>\n    <td>FL_BUILD_EXPERIMENTAL</td>\n    <td>ON, OFF</td>\n    <td>OFF</td>\n    <td>Build experimental components.</td>\n  </tr>\n  <tr>\n    <td>CMAKE_BUILD_TYPE</td>\n    <td>See <a href=\"https://cmake.org/cmake/help/v3.10/variable/CMAKE_BUILD_TYPE.html\">docs</a>.</td>\n    <td>Debug</td>\n    <td>See the <a href=\"https://cmake.org/cmake/help/v3.10/variable/CMAKE_BUILD_TYPE.html\">CMake documentation</a>.</td>\n  </tr>\n  <tr>\n    <td>CMAKE_INSTALL_PREFIX</td>\n    <td>[Directory]</td>\n    <td>See <a href=\"https://cmake.org/cmake/help/v3.10/variable/CMAKE_INSTALL_PREFIX.html\">docs</a>.</td>\n    <td>See the <a href=\"https://cmake.org/cmake/help/v3.10/variable/CMAKE_INSTALL_PREFIX.html\">CMake documentation</a>.</td>\n  </tr>\n</tbody>\n</table>\n\n### Building Your Own Project with Flashlight\nFlashlight is most-easily linked to using CMake. Flashlight exports the following CMake targets when installed:\n- `flashlight::flashlight` — contains flashlight libraries as well as the flashlight core autograd and neural network library.\n- `flashlight::fl_pkg_runtime` — contains flashlight core as well as common utilities for training (logging / flags / distributed utils).\n- `flashlight::fl_pkg_vision` — contains flashlight core as well as common utilities for vision pipelines.\n- `flashlight::fl_pkg_text` — contains flashlight core as well as common utilities for dealing with text data.\n- `flashlight::fl_pkg_speech` — contains flashlight core as well as common utilities for dealing with speech data.\n- `flashlight::fl_pkg_halide` — contains flashlight core and extentions to easily interface with halide.\n\nGiven a simple `project.cpp` file that includes and links to Flashlight:\n```c++\n#include <iostream>\n\n#include <flashlight/fl/flashlight.h>\n\nint main() {\n  fl::init();\n  fl::Variable v(fl::full({1}, 1.), true);\n  auto result = v + 10;\n  std::cout << \"Tensor value is \" << result.tensor() << std::endl; // 11.000\n  return 0;\n}\n```\n\nThe following CMake configuration links Flashlight and sets include directories:\n\n```cmake\ncmake_minimum_required(VERSION 3.10)\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nadd_executable(myProject project.cpp)\n\nfind_package(flashlight CONFIG REQUIRED)\ntarget_link_libraries(myProject PRIVATE flashlight::flashlight)\n```\n\n#### With a `vcpkg` Flashlight Installation\n\nIf you installed Flashlight with `vcpkg`, the above CMake configuration for `myProject` can be built by running:\n```shell\ncd project && mkdir build && cd build\ncmake .. \\\n  -DCMAKE_TOOLCHAIN_FILE=[path to vcpkg clone]/scripts/buildsystems/vcpkg.cmake \\\n  -DCMAKE_BUILD_TYPE=Release\nmake -j$(nproc)\n```\n\n#### With a From-Source Flashlight Installation\n\nIf using a from-source installation of Flashlight, Flashlight will be found automatically by CMake:\n```shell\ncd project && mkdir build && cd build\ncmake .. -DCMAKE_BUILD_TYPE=Release\nmake -j$(nproc)\n```\nIf Flashlight is installed in a custom location using a `CMAKE_INSTALL_PREFIX`, passing `-Dflashlight_DIR=[install prefix]/share/flashlight/cmake` as an argument to your `cmake` command can help CMake find Flashlight.\n\n### Building and Running Flashlight with Docker\nFlashlight and its dependencies can also be built with the provided Dockerfiles; see the accompanying [Docker documentation](.docker) for more information.\n\n### Contributing and Contact\nContact: vineelkpratap@fb.com, awni@fb.com, jacobkahn@fb.com, qiantong@fb.com, antares@fb.com, padentomasello@fb.com,\njcai@fb.com,  gab@fb.com, vitaliy888@fb.com, locronan@fb.com\n\nFlashlight is being very actively developed. See\n[CONTRIBUTING](CONTRIBUTING.md) for more on how to help out.\n\n#### Acknowledgments\nSome of Flashlight's code is derived from\n[arrayfire-ml](https://github.com/arrayfire/arrayfire-ml/).\n\n## Citing\nYou can cite [Flashlight](https://arxiv.org/abs/2201.12465) using:\n```\n@misc{kahn2022flashlight,\n      title={Flashlight: Enabling Innovation in Tools for Machine Learning},\n      author={Jacob Kahn and Vineel Pratap and Tatiana Likhomanenko and Qiantong Xu and Awni Hannun and Jeff Cai and Paden Tomasello and Ann Lee and Edouard Grave and Gilad Avidov and Benoit Steiner and Vitaliy Liptchinsky and Gabriel Synnaeve and Ronan Collobert},\n      year={2022},\n      eprint={2201.12465},\n      archivePrefix={arXiv},\n      primaryClass={cs.LG}\n}\n```\n\n## License\nFlashlight is under an MIT license. See [LICENSE](LICENSE) for more information.\n"
        },
        {
          "name": "bindings",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.0859375,
          "content": "comment: false\ncoverage:\n  status:\n    project:\n      default:\n        threshold: 0.25%\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "flashlight",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.svg",
          "type": "blob",
          "size": 4.072265625,
          "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1082.09 397.84\"><defs><style>.cls-1{fill:#d27805;}.cls-2{fill:#ffde89;}.cls-3{fill:#fac83c;}.cls-4{fill:#f5b400;}</style></defs><g id=\"Layer_9\" data-name=\"Layer 9\"><path class=\"cls-1\" d=\"M331,251.3V149.1h72.71v14.6H346.43v30.08H394.1v14.6H346.43V251.3Z\"/><path class=\"cls-1\" d=\"M418.84,251.3V144.72h14.6V251.3Z\"/><path class=\"cls-1\" d=\"M474.46,252.76q-11.54,0-17.92-5.95t-6.39-15.66A20.87,20.87,0,0,1,457.34,215q7.2-6.5,23-6.5h19.86v-.22q0-18.39-16.94-18.39a25.39,25.39,0,0,0-11.93,2.55,20.72,20.72,0,0,0-7.85,7.16l-10-8.11a31.22,31.22,0,0,1,12.3-11.09,37.76,37.76,0,0,1,17.34-3.87h1.6q13.44,0,21.61,7.74t8.18,23.14V251.3h-14V239.4a28.76,28.76,0,0,1-10.88,9.89A32.18,32.18,0,0,1,474.46,252.76Zm3.21-13q8.47,0,14.09-3.84a23.16,23.16,0,0,0,8.4-10.4V220H480.89q-8.62,0-12.31,2.74a8.77,8.77,0,0,0-3.68,7.41Q464.9,239.78,477.67,239.77Z\"/><path class=\"cls-1\" d=\"M561,253.05q-11,0-19-3.57a33.7,33.7,0,0,1-13.29-10.66l9.93-9.13q7.89,10.59,22.19,10.59h1.46q7.23,0,11.21-2.23a7,7,0,0,0,4-6.46,7.36,7.36,0,0,0-2.59-5.77q-2.6-2.25-9.46-3.65L553,219.55q-21.75-4.53-21.76-20.3a19.92,19.92,0,0,1,8-16.46q8-6.24,21.1-6.24h1.6q18.69,0,28.69,13.87l-9.92,8.25a22.51,22.51,0,0,0-8.51-7.19,24.66,24.66,0,0,0-10.4-2.16h-1.46a21.52,21.52,0,0,0-10.55,2.27,7,7,0,0,0-4,6.42,5.9,5.9,0,0,0,2.52,5q2.52,1.86,8.5,3.18l14.6,3.14q9.42,2,15,7.26T592,230.72a20,20,0,0,1-7.48,16q-7.49,6.31-21.87,6.31Z\"/><path class=\"cls-1\" d=\"M608.27,251.3V144.72h14.6v45.77a30.69,30.69,0,0,1,10-10.22,26,26,0,0,1,14-3.72h1.6q12.63,0,19.27,8.54t6.65,24V251.3h-14.6V210.86q0-20.73-15-20.73h-1.46a18.49,18.49,0,0,0-12.67,4.6,27.8,27.8,0,0,0-7.77,11.6v45Z\"/><path class=\"cls-1\" d=\"M694.63,251.3V144.72h14.6V251.3Z\"/><path class=\"cls-1\" d=\"M738.19,165.31a9.27,9.27,0,0,1-7.05-2.74,10.73,10.73,0,0,1,0-14,10.59,10.59,0,0,1,14.13,0,10.86,10.86,0,0,1,0,14A9.25,9.25,0,0,1,738.19,165.31Zm-7.3,86v-73h14.6v73Z\"/><path class=\"cls-1\" d=\"M793,229.26a43.08,43.08,0,0,1-9.63-1q-2.92,3.28-2.92,6.06,0,5.47,8.54,5.48h17.23q12.63,0,19.31,5t6.68,14.39q0,11.67-10.55,18.1t-29.61,6.42q-16.05,0-24.82-4.78t-8.75-13.83q0-11.1,14.08-17.38a12.39,12.39,0,0,1-4.08-9.34q0-6.93,6.2-13.58-11.9-7.08-11.9-21.9,0-11.75,8-19.05t22.22-7.3h1.32a40.15,40.15,0,0,1,9.67,1.09,31.18,31.18,0,0,1,8,3.14q4.32-8.31,15.41-8.32a31.34,31.34,0,0,1,5.69.59v11.89a23.17,23.17,0,0,0-3.65-.73c-1-.09-1.9-.14-2.63-.14q-5.48,0-8.1,2.26a24.56,24.56,0,0,1,5.84,16.57q0,11.68-8,19t-22.23,7.34Zm-20.22,33q0,9.5,20.59,9.49,12,0,18.25-3.21t6.28-8.54q0-7.89-13.29-7.89H784.94c-.58,0-1.17,0-1.75-.07a18.8,18.8,0,0,0-7.63,4.2A8.23,8.23,0,0,0,772.82,262.25Zm20.3-45h1.17q7.8,0,12-3.91a15,15,0,0,0,0-20.8q-4.2-3.9-12-3.91h-1.17q-7.82,0-12,3.91a15,15,0,0,0,0,20.8Q785.31,217.21,793.12,217.21Z\"/><path class=\"cls-1\" d=\"M846.54,251.3V144.72h14.6v45.77a30.76,30.76,0,0,1,10-10.22,26.08,26.08,0,0,1,14-3.72h1.61q12.63,0,19.27,8.54t6.65,24V251.3h-14.6V210.86q0-20.73-15-20.73h-1.46a18.47,18.47,0,0,0-12.67,4.6,27.8,27.8,0,0,0-7.77,11.6v45Z\"/><path class=\"cls-1\" d=\"M962.83,252.25q-13,0-19.79-6.57t-6.79-20.22V191H922V178.3h14.3V156.55h14.6V178.3h24.6V191h-24.6v32.49q0,8.61,3.58,12T965,238.82a57.14,57.14,0,0,0,6-.29q2.65-.3,5.51-.73v12.77a58.44,58.44,0,0,1-6.57,1.21A56.69,56.69,0,0,1,962.83,252.25Z\"/><path class=\"cls-2\" d=\"M133.43,152.71c-18.28-16.63,10.35-38.55,22.93-19.67,18.25,24.58,60.21,80.54,63.36,84.06,6.9,7.72-2.41,16-8.5,10.16C185.41,202.41,159.59,177.45,133.43,152.71Z\"/><path class=\"cls-3\" d=\"M234,213.58c-12.67-25.74-26.08-51.24-39.43-76.73-11.77-20.33,22.51-34,27.86-11,2.34,8.32,18,63.67,23.82,82.9C248.74,217.17,238.76,222.32,234,213.58Z\"/><circle class=\"cls-1\" cx=\"248.8\" cy=\"259.34\" r=\"22.02\"/><path class=\"cls-3\" d=\"M202.28,248.82c-27.7-8-55.27-15.84-83-23.44-22.9-5.25-9.53-39.64,10.95-27.88,7.68,4,57.5,29.69,75.85,38.54C214.83,240.27,210.08,250.91,202.28,248.82Z\"/><path class=\"cls-4\" d=\"M150.36,258.39c9.47.87,46.75,4.85,49.7,5.23,7.48,1,7.57,11.14.77,12.26-17,2.81-33.2,5.06-50.37,7.33C132.22,285.63,130.24,256.65,150.36,258.39Z\"/><path class=\"cls-4\" d=\"M274.33,157.17c-.77,9.48-4.34,46.8-4.69,49.75-.89,7.5-11.06,7.69-12.26.91-3-17-5.42-33.15-7.87-50.29C246.9,139.32,275.85,137,274.33,157.17Z\"/></g></svg>"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}