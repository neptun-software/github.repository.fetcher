{
  "metadata": {
    "timestamp": 1736566155490,
    "page": 164,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/GSL",
      "stars": 6276,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.7578125,
          "content": "ColumnLimit: 100\n\nUseTab: Never\nIndentWidth: 4\nAccessModifierOffset: -4\nNamespaceIndentation: Inner\n\nBreakBeforeBraces: Custom\nBraceWrapping:\n  AfterNamespace: true\n  AfterEnum: true\n  AfterStruct: true\n  AfterClass: true\n  SplitEmptyFunction: false\n  AfterControlStatement: true\n  AfterFunction: true\n  AfterUnion: true\n  BeforeElse: true\n\n\nAlwaysBreakTemplateDeclarations: true\nBreakConstructorInitializersBeforeComma: true\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nAllowShortBlocksOnASingleLine: true\nAllowShortFunctionsOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: true\nAllowShortLoopsOnASingleLine: true\n\nPointerAlignment: Left\nAlignConsecutiveAssignments: false\nAlignTrailingComments: true\n\nSpaceAfterCStyleCast: true\nCommentPragmas: '^ NO-FORMAT:'\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.03515625,
          "content": "include/gsl/* linguist-language=C++\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1728515625,
          "content": "CMakeFiles\nbuild\ntests/CMakeFiles\ntests/Debug\n*.opensdf\n*.sdf\ntests/*tests.dir\n*.vcxproj\n*.vcxproj.filters\n*.sln\n*.tlog\nTesting/Temporary/*.*\nCMakeCache.txt\n*.suo\n.vs/\n.vscode/\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.7373046875,
          "content": "cmake_minimum_required(VERSION 3.14...3.16)\n\nproject(GSL VERSION 4.1.0 LANGUAGES CXX)\n\nadd_library(GSL INTERFACE)\nadd_library(Microsoft.GSL::GSL ALIAS GSL)\n\n# https://cmake.org/cmake/help/latest/variable/PROJECT_IS_TOP_LEVEL.html\nstring(COMPARE EQUAL ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_SOURCE_DIR} PROJECT_IS_TOP_LEVEL)\n\noption(GSL_INSTALL \"Generate and install GSL target\" ${PROJECT_IS_TOP_LEVEL})\noption(GSL_TEST \"Build and perform GSL tests\" ${PROJECT_IS_TOP_LEVEL})\n\n# The implementation generally assumes a platform that implements C++14 support\ntarget_compile_features(GSL INTERFACE \"cxx_std_14\")\n\n# Setup include directory\nadd_subdirectory(include)\n\ntarget_sources(GSL INTERFACE $<BUILD_INTERFACE:${GSL_SOURCE_DIR}/GSL.natvis>)\n\nif (GSL_TEST)\n    enable_testing()\n    add_subdirectory(tests)\nendif()\n\nif (GSL_INSTALL)\n    include(GNUInstallDirs)\n    include(CMakePackageConfigHelpers)\n\n    install(DIRECTORY \"${PROJECT_SOURCE_DIR}/include/gsl\" DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n\n    set(export_name \"Microsoft.GSLConfig\")\n    set(namespace \"Microsoft.GSL::\")\n    set(cmake_files_install_dir ${CMAKE_INSTALL_DATADIR}/cmake/Microsoft.GSL)\n\n    install(TARGETS GSL EXPORT ${export_name} INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n    install(EXPORT ${export_name} NAMESPACE ${namespace} DESTINATION ${cmake_files_install_dir})\n    export(TARGETS GSL NAMESPACE ${namespace} FILE ${export_name}.cmake)\n\n    set(gls_config_version \"${CMAKE_CURRENT_BINARY_DIR}/Microsoft.GSLConfigVersion.cmake\")\n\n    write_basic_package_version_file(${gls_config_version} COMPATIBILITY SameMajorVersion ARCH_INDEPENDENT)\n\n    install(FILES ${gls_config_version} DESTINATION ${cmake_files_install_dir})\n\n    install(FILES GSL.natvis DESTINATION ${cmake_files_install_dir})\nendif()\n"
        },
        {
          "name": "CMakeSettings.json",
          "type": "blob",
          "size": 0.5322265625,
          "content": "{\n  \"configurations\": [\n    {\n      \"name\": \"x64-Debug\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Debug\",\n      \"inheritEnvironments\": [\n        \"msvc_x64_x64\"\n      ],\n      \"buildRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\build\\\\${name}\",\n      \"installRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"-DGSL_CXX_STANDARD=17\",\n      \"buildCommandArgs\": \"-v\",\n      \"ctestCommandArgs\": \"\",\n      \"codeAnalysisRuleset\": \"CppCoreCheckRules.ruleset\"\n    }\n  ]\n}"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.955078125,
          "content": "## Contributing to the Guidelines Support Library\n\nThe Guidelines Support Library (GSL) contains functions and types that are suggested for use by the\n[C++ Core Guidelines](https://github.com/isocpp/CppCoreGuidelines). GSL design changes are made only as a result of modifications to the Guidelines. \n\nGSL is accepting contributions that improve or refine any of the types in this library as well as ports to other platforms. Changes should have an issue \ntracking the suggestion that has been approved by the maintainers. Your pull request should include a link to the bug that you are fixing. If you've submitted \na PR, please post a comment in the associated issue to avoid duplication of effort.\n\n## Legal\nYou will need to complete a Contributor License Agreement (CLA). Briefly, this agreement testifies that you are granting us and the community permission to \nuse the submitted change according to the terms of the project's license, and that the work being submitted is under appropriate copyright.\n\nPlease submit a Contributor License Agreement (CLA) before submitting a pull request. You may visit https://cla.microsoft.com to sign digitally.\n\n## Housekeeping\nYour pull request should: \n\n* Include a description of what your change intends to do\n* Be a child commit of a reasonably recent commit in the **main** branch \n    * Requests need not be a single commit, but should be a linear sequence of commits (i.e. no merge commits in your PR)\n* It is desirable, but not necessary, for the tests to pass at each commit. Please see [README.md](./README.md) for instructions to build the test suite. \n* Have clear commit messages \n    * e.g. \"Fix issue\", \"Add tests for type\", etc.\n* Include appropriate tests \n    * Tests should include reasonable permutations of the target fix/change\n    * Include baseline changes with your change\n    * All changed code must have 100% code coverage\n* To avoid line ending issues, set `autocrlf = input` and `whitespace = cr-at-eol` in your git configuration\n"
        },
        {
          "name": "GSL.natvis",
          "type": "blob",
          "size": 1.1318359375,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- \n    This will make GitHub and some editors recognize this code as XML: \n    vim: syntax=xml\n-->\n<AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n    <!-- These types are from the util header. -->\n    <Type Name=\"gsl::final_action&lt;*&gt;\">\n        <DisplayString>{{ invoke = {invoke_}, action = {f_} }}</DisplayString>\n        <Expand>\n            <Item Name=\"[invoke]\">invoke_</Item>\n            <Item Name=\"[callback]\">f_</Item>\n        </Expand>\n    </Type>\n\n  <!-- These types are from the span header. -->\n  <Type Name=\"gsl::span&lt;*, *&gt;\">\n        <DisplayString>{{ extent = {storage_.size_} }}</DisplayString>\n        <Expand>\n            <ArrayItems>\n                <Size>storage_.size_</Size>\n                <ValuePointer>storage_.data_</ValuePointer>\n            </ArrayItems>\n        </Expand>\n    </Type>\n\n    <!-- These types are from the pointers header. -->\n    <Type Name=\"gsl::not_null&lt;*&gt;\">\n        <!-- We can always dereference this since it's an invariant. -->\n        <DisplayString>value = {*ptr_}</DisplayString>\n    </Type>\n</AutoVisualizer>  \n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1298828125,
          "content": "Copyright (c) 2015 Microsoft Corporation. All rights reserved. \n \nThis code is licensed under the MIT License (MIT). \n\nPermission is hereby granted, free of charge, to any person obtaining a copy \nof this software and associated documentation files (the \"Software\"), to deal \nin the Software without restriction, including without limitation the rights \nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \nof the Software, and to permit persons to whom the Software is furnished to do \nso, subject to the following conditions: \n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software. \n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN \nTHE SOFTWARE. \n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.310546875,
          "content": "# GSL: Guidelines Support Library\n[![CI](https://github.com/Microsoft/GSL/actions/workflows/compilers.yml/badge.svg)](https://github.com/microsoft/GSL/actions/workflows/compilers.yml?query=branch%3Amain)\n[![vcpkg](https://img.shields.io/vcpkg/v/ms-gsl)](https://vcpkg.io/en/package/ms-gsl)\n\nThe Guidelines Support Library (GSL) contains functions and types that are suggested for use by the\n[C++ Core Guidelines](https://github.com/isocpp/CppCoreGuidelines) maintained by the [Standard C++ Foundation](https://isocpp.org).\nThis repo contains Microsoft's implementation of GSL.\n\nThe entire implementation is provided inline in the headers under the [gsl](./include/gsl) directory. The implementation generally assumes a platform that implements C++14 support.\n\nWhile some types have been broken out into their own headers (e.g. [gsl/span](./include/gsl/span)),\nit is simplest to just include [gsl/gsl](./include/gsl/gsl) and gain access to the entire library.\n\n> NOTE: We encourage contributions that improve or refine any of the types in this library as well as ports to\nother platforms. Please see [CONTRIBUTING.md](./CONTRIBUTING.md) for more information about contributing.\n\n# Project Code of Conduct\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n# Usage of Third Party Libraries\nThis project makes use of the [Google Test](https://github.com/google/googletest) testing library. Please see the [ThirdPartyNotices.txt](./ThirdPartyNotices.txt) file for details regarding the licensing of Google Test.\n\n# Supported features\n## Microsoft GSL implements the following from the C++ Core Guidelines:\n\nFeature                                                                  | Supported? | Description\n-------------------------------------------------------------------------|:----------:|-------------\n[**1. Views**][cg-views]                                                 |            |\n[owner](docs/headers.md#user-content-H-pointers-owner)                   | &#x2611;   | An alias for a raw pointer\n[not_null](docs/headers.md#user-content-H-pointers-not_null)             | &#x2611;   | Restricts a pointer/smart pointer to hold non-null values\n[span](docs/headers.md#user-content-H-span-span)                         | &#x2611;   | A view over a contiguous sequence of memory. Based on the standardized version of `std::span`, however `gsl::span` enforces bounds checking.\nspan_p                                                                   | &#x2610;   | Spans a range starting from a pointer to the first place for which the predicate is true\n[basic_zstring](docs/headers.md#user-content-H-zstring)                  | &#x2611;   | A pointer to a C-string (zero-terminated array) with a templated char type\n[zstring](docs/headers.md#user-content-H-zstring)                        | &#x2611;   | An alias to `basic_zstring` with dynamic extent and a char type of `char`\n[czstring](docs/headers.md#user-content-H-zstring)                       | &#x2611;   | An alias to `basic_zstring` with dynamic extent and a char type of `const char`\n[wzstring](docs/headers.md#user-content-H-zstring)                       | &#x2611;   | An alias to `basic_zstring` with dynamic extent and a char type of `wchar_t`\n[cwzstring](docs/headers.md#user-content-H-zstring)                      | &#x2611;   | An alias to `basic_zstring` with dynamic extent and a char type of `const wchar_t`\n[u16zstring](docs/headers.md#user-content-H-zstring)                     | &#x2611;   | An alias to `basic_zstring` with dynamic extent and a char type of `char16_t`\n[cu16zstring](docs/headers.md#user-content-H-zstring)                    | &#x2611;   | An alias to `basic_zstring` with dynamic extent and a char type of `const char16_t`\n[u32zstring](docs/headers.md#user-content-H-zstring)                     | &#x2611;   | An alias to `basic_zstring` with dynamic extent and a char type of `char32_t`\n[cu32zstring](docs/headers.md#user-content-H-zstring)                    | &#x2611;   | An alias to `basic_zstring` with dynamic extent and a char type of `const char32_t`\n[**2. Owners**][cg-owners]                                               |            |\n[unique_ptr](docs/headers.md#user-content-H-pointers-unique_ptr)         | &#x2611;   | An alias to `std::unique_ptr`\n[shared_ptr](docs/headers.md#user-content-H-pointers-shared_ptr)         | &#x2611;   | An alias to `std::shared_ptr`\nstack_array                                                              | &#x2610;   | A stack-allocated array\ndyn_array                                                                | &#x2610;   | A heap-allocated array\n[**3. Assertions**][cg-assertions]                                       |            |\n[Expects](docs/headers.md#user-content-H-assert-expects)                 | &#x2611;   | A precondition assertion; on failure it terminates\n[Ensures](docs/headers.md#user-content-H-assert-ensures)                 | &#x2611;   | A postcondition assertion; on failure it terminates\n[**4. Utilities**][cg-utilities]                                         |            |\nmove_owner                                                               | &#x2610;   | A helper function that moves one `owner` to the other\n[byte](docs/headers.md#user-content-H-byte-byte)                         | &#x2611;   | Either an alias to `std::byte` or a byte type\n[final_action](docs/headers.md#user-content-H-util-final_action)         | &#x2611;   | A RAII style class that invokes a functor on its destruction\n[finally](docs/headers.md#user-content-H-util-finally)                   | &#x2611;   | A helper function instantiating [final_action](docs/headers.md#user-content-H-util-final_action)\n[GSL_SUPPRESS](docs/headers.md#user-content-H-assert-gsl_suppress)       | &#x2611;   | A macro that takes an argument and turns it into `[[gsl::suppress(x)]]` or `[[gsl::suppress(\"x\")]]`\n[[implicit]]                                                             | &#x2610;   | A \"marker\" to put on single-argument constructors to explicitly make them non-explicit\n[index](docs/headers.md#user-content-H-util-index)                       | &#x2611;   | A type to use for all container and array indexing (currently an alias for `std::ptrdiff_t`)\njoining_thread                                                           | &#x2610;   | A RAII style version of `std::thread` that joins\n[narrow](docs/headers.md#user-content-H-narrow-narrow)                   | &#x2611;   | A checked version of `narrow_cast`; it can throw [narrowing_error](docs/headers.md#user-content-H-narrow-narrowing_error)\n[narrow_cast](docs/headers.md#user-content-H-util-narrow_cast)           | &#x2611;   | A narrowing cast for values and a synonym for `static_cast`\n[narrowing_error](docs/headers.md#user-content-H-narrow-narrowing_error) | &#x2611;   | A custom exception type thrown by [narrow](docs/headers.md#user-content-H-narrow-narrow)\n[**5. Concepts**][cg-concepts]                                           | &#x2610;   |\n\n## The following features do not exist in or have been removed from the C++ Core Guidelines:\nFeature                            | Supported? | Description\n-----------------------------------|:----------:|-------------\n[strict_not_null](docs/headers.md#user-content-H-pointers-strict_not_null) | &#x2611;   | A stricter version of [not_null](docs/headers.md#user-content-H-pointers-not_null) with explicit constructors\nmulti_span                         | &#x2610;   | Deprecated. Multi-dimensional span.\nstrided_span                       | &#x2610;   | Deprecated. Support for this type has been discontinued.\nbasic_string_span                  | &#x2610;   | Deprecated. Like `span` but for strings with a templated char type\nstring_span                        | &#x2610;   | Deprecated. An alias to `basic_string_span` with a char type of `char`\ncstring_span                       | &#x2610;   | Deprecated. An alias to `basic_string_span` with a char type of `const char`\nwstring_span                       | &#x2610;   | Deprecated. An alias to `basic_string_span` with a char type of `wchar_t`\ncwstring_span                      | &#x2610;   | Deprecated. An alias to `basic_string_span` with a char type of `const wchar_t`\nu16string_span                     | &#x2610;   | Deprecated. An alias to `basic_string_span` with a char type of `char16_t`\ncu16string_span                    | &#x2610;   | Deprecated. An alias to `basic_string_span` with a char type of `const char16_t`\nu32string_span                     | &#x2610;   | Deprecated. An alias to `basic_string_span` with a char type of `char32_t`\ncu32string_span                    | &#x2610;   | Deprecated. An alias to `basic_string_span` with a char type of `const char32_t`\n\nThis is based on [CppCoreGuidelines semi-specification](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#gsl-guidelines-support-library).\n\n[cg-views]: https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#gslview-views\n[cg-owners]: https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#gslowner-ownership-pointers\n[cg-assertions]: https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#gslassert-assertions\n[cg-utilities]: https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#gslutil-utilities\n[cg-concepts]: https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#gslconcept-concepts\n\n# Quick Start\n## Supported Compilers / Toolsets\nThe GSL officially supports recent major versions of Visual Studio with both MSVC and LLVM, GCC, Clang, and XCode with Apple-Clang.\nFor each of these major versions, the GSL officially supports C++14, C++17, C++20, and C++23 (when supported by the compiler).\nBelow is a table showing the versions currently being tested (also see [.github/workflows/compilers.yml](the workflow).)\n\nCompiler |Toolset Versions Currently Tested\n:------- |--:\n GCC | 12, 13, 14\n XCode | 14.3.1, 15.4\n Clang | 16, 17, 18\n Visual Studio with MSVC | VS2019, VS2022 \n Visual Studio with LLVM | VS2019, VS2022\n\n---\nIf you successfully port GSL to another platform, we would love to hear from you!\n- Submit an issue specifying the platform and target.\n- Consider contributing your changes by filing a pull request with any necessary changes.\n- If at all possible, add a CI/CD step and add the button to the table below!\n\nTarget | CI/CD Status\n:------- | -----------:\niOS | [![CI_iOS](https://github.com/microsoft/GSL/workflows/CI_iOS/badge.svg?branch=main)](https://github.com/microsoft/GSL/actions/workflows/ios.yml?query=branch%3Amain)\nAndroid | [![CI_Android](https://github.com/microsoft/GSL/workflows/CI_Android/badge.svg?branch=main)](https://github.com/microsoft/GSL/actions/workflows/android.yml?query=branch%3Amain)\n\nNote: These CI/CD steps are run with each pull request, however failures in them are non-blocking.\n\n## Building the tests\nTo build the tests, you will require the following:\n\n* [CMake](http://cmake.org), version 3.14 or later to be installed and in your PATH.\n\nThese steps assume the source code of this repository has been cloned into a directory named `c:\\GSL`.\n\n1. Create a directory to contain the build outputs for a particular architecture (we name it `c:\\GSL\\build-x86` in this example).\n\n        cd GSL\n        md build-x86\n        cd build-x86\n\n2. Configure CMake to use the compiler of your choice (you can see a list by running `cmake --help`).\n\n        cmake -G \"Visual Studio 15 2017\" c:\\GSL\n\n3. Build the test suite (in this case, in the Debug configuration, Release is another good choice).\n\n        cmake --build . --config Debug\n\n4. Run the test suite.\n\n        ctest -C Debug\n\nAll tests should pass - indicating your platform is fully supported and you are ready to use the GSL types!\n\n## Building GSL - Using vcpkg\n\nYou can download and install GSL using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    vcpkg install ms-gsl\n\nThe GSL port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n## Using the libraries\nAs the types are entirely implemented inline in headers, there are no linking requirements.\n\nYou can copy the [gsl](./include/gsl) directory into your source tree so it is available\nto your compiler, then include the appropriate headers in your program.\n\nAlternatively set your compiler's *include path* flag to point to the GSL development folder (`c:\\GSL\\include` in the example above) or installation folder (after running the install). Eg.\n\nMSVC++\n\n    /I c:\\GSL\\include\n\nGCC/clang\n\n    -I$HOME/dev/GSL/include\n\nInclude the library using:\n\n    #include <gsl/gsl>\n\n## Usage in CMake\n\nThe library provides a Config file for CMake, once installed it can be found via `find_package`.\n\nWhich, when successful, will add library target called `Microsoft.GSL::GSL` which you can use via the usual\n`target_link_libraries` mechanism.\n\n```cmake\nfind_package(Microsoft.GSL CONFIG REQUIRED)\n\ntarget_link_libraries(foobar PRIVATE Microsoft.GSL::GSL)\n```\n\n### FetchContent\n\nIf you are using CMake version 3.11+ you can use the official [FetchContent module](https://cmake.org/cmake/help/latest/module/FetchContent.html).\nThis allows you to easily incorporate GSL into your project.\n\n```cmake\n# NOTE: This example uses CMake version 3.14 (FetchContent_MakeAvailable).\n# Since it streamlines the FetchContent process\ncmake_minimum_required(VERSION 3.14)\n\ninclude(FetchContent)\n\nFetchContent_Declare(GSL\n    GIT_REPOSITORY \"https://github.com/microsoft/GSL\"\n    GIT_TAG \"v4.1.0\"\n    GIT_SHALLOW ON\n)\n\nFetchContent_MakeAvailable(GSL)\n\ntarget_link_libraries(foobar PRIVATE Microsoft.GSL::GSL)\n```\n\n## Debugging visualization support\n\nFor Visual Studio users, the file [GSL.natvis](./GSL.natvis) in the root directory of the repository can be added to your project if you would like more helpful visualization of GSL types in the Visual Studio debugger than would be offered by default.\n\n## See Also\n\nFor information on [Microsoft Gray Systems Lab (GSL)](https://aka.ms/gsl) of applied data management and system research see <https://aka.ms/gsl>.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.6923828125,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.7 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/opensource/security/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/opensource/security/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/opensource/security/pgpkey).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://aka.ms/opensource/security/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/opensource/security/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/opensource/security/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n"
        },
        {
          "name": "ThirdPartyNotices.txt",
          "type": "blob",
          "size": 1.974609375,
          "content": "\nTHIRD-PARTY SOFTWARE NOTICES AND INFORMATION\nDo Not Translate or Localize\n\nGSL: Guidelines Support Library incorporates third party material from the projects listed below.\n\n-------------------------------------------------------------------------------\nSoftware: Google Test\nOwner: Google Inc.\nSource URL: github.com/google/googletest\nLicense: BSD 3 - Clause\nText:\n    Copyright 2008, Google Inc.\n    All rights reserved.\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are\n    met:\n\n        * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n        * Redistributions in binary form must reproduce the above\n    copyright notice, this list of conditions and the following disclaimer\n    in the documentation and/or other materials provided with the\n    distribution.\n        * Neither the name of Google Inc. nor the names of its\n    contributors may be used to endorse or promote products derived from\n    this software without specific prior written permission.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n    \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n    OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-------------------------------------------------------------------------------\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}