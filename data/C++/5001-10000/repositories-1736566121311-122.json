{
  "metadata": {
    "timestamp": 1736566121311,
    "page": 122,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Alexays/Waybar",
      "stars": 7016,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.080078125,
          "content": "---\nBasedOnStyle: Google\nAlignConsecutiveDeclarations: false\nColumnLimit: 100\n...\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 1.3642578125,
          "content": "Checks: >\n  -*,\n  bugprone-*\n  misc-*,\n  modernize-*,\n  performance-*,\n  portability-*,\n  readability-*,\n  -fuchsia-trailing-return,\n  -readability-magic-numbers,\n  -modernize-use-nodiscard,\n  -modernize-use-trailing-return-type,\n  -readability-braces-around-statements,\n  -readability-redundant-access-specifiers,\n  -readability-redundant-member-init,\n  -readability-redundant-string-init,\n  -readability-identifier-length\n# CheckOptions:\n#   - { key: readability-identifier-naming.NamespaceCase,          value: lower_case }\n#   - { key: readability-identifier-naming.ClassCase,              value: CamelCase  }\n#   - { key: readability-identifier-naming.StructCase,             value: CamelCase  }\n#   - { key: readability-identifier-naming.FunctionCase,           value: camelBack  }\n#   - { key: readability-identifier-naming.VariableCase,           value: camelBack  }\n#   - { key: readability-identifier-naming.PrivateMemberCase,      value: camelBack  }\n#   - { key: readability-identifier-naming.PrivateMemberSuffix,    value: _          }\n#   - { key: readability-identifier-naming.EnumCase,               value: CamelCase  }\n#   - { key: readability-identifier-naming.EnumConstantCase,       value: UPPER_CASE }\n#   - { key: readability-identifier-naming.GlobalConstantCase,     value: UPPER_CASE }\n#   - { key: readability-identifier-naming.StaticConstantCase,     value: UPPER_CASE }\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3046875,
          "content": "# EditorConfig configuration for Waybar\n# http://EditorConfig.org\n\n# Top-most EditorConfig file\nroot = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\ncharset = utf-8\n\n[*.{build,css}]\nindent_style = space\nindent_size = 4\n\n[*.{hpp,cpp}]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".envrc",
          "type": "blob",
          "size": 0.009765625,
          "content": "use flake\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4189453125,
          "content": ".DS_Store\n*~\nvgcore.*\n/.vscode\n/.idea\n/.cache\n*.swp\npackagecache\n/subprojects/**/\n/build*\n/dist\n/meson.egg-info\n\n# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n/.direnv/\n\n# Nix\nresult\nresult-*\n\n.ccls-cache\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.103515625,
          "content": "[submodule \"package/archlinux\"]\n\tpath = package/archlinux\n\turl = https://aur.archlinux.org/waybar-git.git\n"
        },
        {
          "name": "Dockerfiles",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0361328125,
          "content": "MIT License\n\nCopyright (c) 2025 Alex\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.3955078125,
          "content": ".PHONY: build build-debug run clean default install\n\ndefault: build\n\nbuild:\n\tmeson setup build\n\tninja -C build\n\nbuild-debug:\n\tmeson setup build --buildtype=debug\n\tninja -C build\n\ninstall: build\n\tninja -C build install\n\nrun: build\n\t./build/waybar\n\ndebug-run: build-debug\n\t./build/waybar --log-level debug\n\ntest:\n\tmeson test -C build --no-rebuild --verbose --suite waybar\n.PHONY: test\n\nclean:\n\trm -rf build\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.09765625,
          "content": "# Waybar [![Licence](https://img.shields.io/badge/License-MIT-yellow.svg)](LICENSE) [![Paypal Donate](https://img.shields.io/badge/Donate-Paypal-2244dd.svg)](https://paypal.me/ARouillard)<br>![Waybar](https://raw.githubusercontent.com/alexays/waybar/master/preview-2.png)\n\n> Highly customizable Wayland bar for Sway and Wlroots based compositors.<br>\n> Available in [all major distributions](https://github.com/Alexays/Waybar/wiki/Installation)<br>\n> *Waybar [examples](https://github.com/Alexays/Waybar/wiki/Examples)*\n\n#### Current features\n- Sway (Workspaces, Binding mode, Focused window name)\n- River (Mapping mode, Tags, Focused window name)\n- Hyprland (Window Icons, Workspaces, Focused window name)\n- Niri (Workspaces, Focused window name, Language)\n- DWL (Tags, Focused window name) [requires dwl ipc patch](https://github.com/djpohly/dwl/wiki/ipc)\n- Tray [#21](https://github.com/Alexays/Waybar/issues/21)\n- Local time\n- Battery\n- UPower\n- Power profiles daemon\n- Network\n- Bluetooth\n- Pulseaudio\n- Privacy Info\n- Wireplumber\n- Disk\n- Memory\n- Cpu load average\n- Temperature\n- MPD\n- Custom scripts\n- Custom image\n- Multiple output configuration\n- And many more customizations\n\n#### Configuration and Styling\n\n[See the wiki for more details](https://github.com/Alexays/Waybar/wiki).\n\n### Installation\n\nWaybar is available from a number of Linux distributions:\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/waybar.svg?columns=3&header=Waybar%20Downstream%20Packaging)](https://repology.org/project/waybar/versions)\n\nAn Ubuntu PPA with more recent versions is available\n[here](https://launchpad.net/~nschloe/+archive/ubuntu/waybar).\n\n\n#### Building from source\n\n```bash\n$ git clone https://github.com/Alexays/Waybar\n$ cd Waybar\n$ meson setup build\n$ ninja -C build\n$ ./build/waybar\n# If you want to install it\n$ ninja -C build install\n$ waybar\n```\n\n**Dependencies**\n\n```\ngtkmm3\njsoncpp\nlibsigc++\nfmt\nwayland\nchrono-date\nspdlog\nlibgtk-3-dev [gtk-layer-shell]\ngobject-introspection [gtk-layer-shell]\nlibgirepository1.0-dev [gtk-layer-shell]\nlibpulse [Pulseaudio module]\nlibnl [Network module]\nlibappindicator-gtk3 [Tray module]\nlibdbusmenu-gtk3 [Tray module]\nlibmpdclient [MPD module]\nlibsndio [sndio module]\nlibevdev [KeyboardState module]\nxkbregistry\nupower [UPower battery module]\n```\n\n**Build dependencies**\n\n```\ncmake\nmeson\nscdoc\nwayland-protocols\n```\n\nOn Ubuntu, you can install all the relevant dependencies using this command (tested with 19.10 and 20.04):\n\n```\nsudo apt install \\\n  clang-tidy \\\n  gobject-introspection \\\n  libdbusmenu-gtk3-dev \\\n  libevdev-dev \\\n  libfmt-dev \\\n  libgirepository1.0-dev \\\n  libgtk-3-dev \\\n  libgtkmm-3.0-dev \\\n  libinput-dev \\\n  libjsoncpp-dev \\\n  libmpdclient-dev \\\n  libnl-3-dev \\\n  libnl-genl-3-dev \\\n  libpulse-dev \\\n  libsigc++-2.0-dev \\\n  libspdlog-dev \\\n  libwayland-dev \\\n  scdoc \\\n  upower \\\n  libxkbregistry-dev\n```\n\n\nContributions welcome!<br>\nHave fun :)<br>\nThe style guidelines are [Google's](https://google.github.io/styleguide/cppguide.html)\n\n## License\n\nWaybar is licensed under the MIT license. [See LICENSE for more information](https://github.com/Alexays/Waybar/blob/master/LICENSE).\n"
        },
        {
          "name": "default.nix",
          "type": "blob",
          "size": 0.2978515625,
          "content": "(import\n  (\n    let lock = builtins.fromJSON (builtins.readFile ./flake.lock); in\n    fetchTarball {\n      url = \"https://github.com/edolstra/flake-compat/archive/${lock.nodes.flake-compat.locked.rev}.tar.gz\";\n      sha256 = lock.nodes.flake-compat.locked.narHash;\n    }\n  )\n  { src = ./.; }\n).defaultNix\n"
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 1.029296875,
          "content": "{\n  \"nodes\": {\n    \"flake-compat\": {\n      \"flake\": false,\n      \"locked\": {\n        \"lastModified\": 1733328505,\n        \"narHash\": \"sha256-NeCCThCEP3eCl2l/+27kNNK7QrwZB1IJCrXfrbv5oqU=\",\n        \"owner\": \"edolstra\",\n        \"repo\": \"flake-compat\",\n        \"rev\": \"ff81ac966bb2cae68946d5ed5fc4994f96d0ffec\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"edolstra\",\n        \"repo\": \"flake-compat\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1735471104,\n        \"narHash\": \"sha256-0q9NGQySwDQc7RhAV2ukfnu7Gxa5/ybJ2ANT8DQrQrs=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"88195a94f390381c6afcdaa933c2f6ff93959cb4\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixos-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-compat\": \"flake-compat\",\n        \"nixpkgs\": \"nixpkgs\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 2.2958984375,
          "content": "{\n  description = \"Highly customizable Wayland bar for Sway and Wlroots based compositors\";\n\n  inputs = {\n    nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";\n    flake-compat = {\n      url = \"github:edolstra/flake-compat\";\n      flake = false;\n    };\n  };\n\n  outputs = { self, nixpkgs, ... }:\n    let\n      inherit (nixpkgs) lib;\n      genSystems = func: lib.genAttrs [\n        \"x86_64-linux\"\n        \"aarch64-linux\"\n      ]\n        (system: func (import nixpkgs {\n          inherit system;\n          overlays = with self.overlays; [\n            waybar\n          ];\n        }));\n\n      mkDate = longDate: (lib.concatStringsSep \"-\" [\n        (builtins.substring 0 4 longDate)\n        (builtins.substring 4 2 longDate)\n        (builtins.substring 6 2 longDate)\n      ]);\n    in\n    {\n      devShells = genSystems\n        (pkgs:\n          {\n            default =\n              pkgs.mkShell\n                {\n                  name = \"waybar-shell\";\n\n                  # inherit attributes from upstream nixpkgs derivation\n                  inherit (pkgs.waybar) buildInputs depsBuildBuild depsBuildBuildPropagated depsBuildTarget\n                    depsBuildTargetPropagated depsHostHost depsHostHostPropagated depsTargetTarget\n                    depsTargetTargetPropagated propagatedBuildInputs propagatedNativeBuildInputs strictDeps;\n\n                  # overrides for local development\n                  nativeBuildInputs = pkgs.waybar.nativeBuildInputs ++ (with pkgs; [\n                    clang-tools\n                    gdb\n                  ]);\n                };\n          });\n\n      overlays = {\n        default = self.overlays.waybar;\n        waybar = final: prev: {\n          waybar = final.callPackage ./nix/default.nix {\n            waybar = prev.waybar;\n            # take the first \"version: '...'\" from meson.build\n            version =\n              (builtins.head (builtins.split \"'\"\n                (builtins.elemAt\n                  (builtins.split \" version: '\" (builtins.readFile ./meson.build))\n                  2)))\n              + \"+date=\" + (mkDate (self.lastModifiedDate or \"19700101\")) + \"_\" + (self.shortRev or \"dirty\");\n          };\n        };\n      };\n\n      packages = genSystems (pkgs: {\n        default = self.packages.${pkgs.stdenv.hostPlatform.system}.waybar;\n        inherit (pkgs) waybar;\n      });\n    };\n}\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 18.3564453125,
          "content": "project(\n    'waybar', 'cpp', 'c',\n    version: '0.11.0',\n    license: 'MIT',\n    meson_version: '>= 0.59.0',\n    default_options : [\n        'cpp_std=c++20',\n        'buildtype=release',\n        'default_library=static'\n    ],\n)\n\ncompiler = meson.get_compiler('cpp')\n\ncpp_args = []\ncpp_link_args = []\n\nif get_option('libcxx')\n    cpp_args += ['-stdlib=libc++']\n    cpp_link_args += ['-stdlib=libc++', '-lc++abi']\nendif\n\nif compiler.has_link_argument('-lc++fs')\n    cpp_link_args += ['-lc++fs']\nelif compiler.has_link_argument('-lstdc++fs')\n    cpp_link_args += ['-lstdc++fs']\nendif\n\ngit = find_program('git', native: true, required: false)\n\nif not git.found()\n    add_project_arguments('-DVERSION=\"@0@\"'.format(meson.project_version()), language: 'cpp')\nelse\n    git_path = run_command(git, 'rev-parse', '--show-toplevel', check: false).stdout().strip()\n    if meson.project_source_root() == git_path\n        git_commit_hash = run_command(git, 'describe', '--always', '--tags', check: false).stdout().strip()\n        git_branch = run_command(git, 'rev-parse', '--abbrev-ref', 'HEAD', check: false).stdout().strip()\n        version = '\"@0@ (branch \\'@1@\\')\"'.format(git_commit_hash, git_branch)\n        add_project_arguments('-DVERSION=@0@'.format(version), language: 'cpp')\n    else\n        add_project_arguments('-DVERSION=\"@0@\"'.format(meson.project_version()), language: 'cpp')\n    endif\nendif\n\ncode = '''\n#include <langinfo.h>\n#include <locale.h>\nint main(int argc, char** argv) {\n    locale_t locale = newlocale(LC_ALL, \"en_US.UTF-8\", nullptr);\n    char* str;\n    str = nl_langinfo_l(_NL_TIME_WEEK_1STDAY, locale);\n    str = nl_langinfo_l(_NL_TIME_FIRST_WEEKDAY, locale);\n    freelocale(locale);\n    return 0;\n}\n'''\nif compiler.links(code, name : 'nl_langinfo with _NL_TIME_WEEK_1STDAY, _NL_TIME_FIRST_WEEKDAY')\n    add_project_arguments('-DHAVE_LANGINFO_1STDAY', language: 'cpp')\nendif\n\nadd_global_arguments(cpp_args, language : 'cpp')\nadd_global_link_arguments(cpp_link_args, language : 'cpp')\n\nis_linux = host_machine.system() == 'linux'\nis_dragonfly = host_machine.system() == 'dragonfly'\nis_freebsd = host_machine.system() == 'freebsd'\nis_netbsd = host_machine.system() == 'netbsd'\nis_openbsd = host_machine.system() == 'openbsd'\n\nthread_dep = dependency('threads')\nfmt = dependency('fmt', version : ['>=8.1.1'], fallback : ['fmt', 'fmt_dep'])\nspdlog = dependency('spdlog', version : ['>=1.10.0'], fallback : ['spdlog', 'spdlog_dep'], default_options : ['external_fmt=enabled', 'std_format=disabled', 'tests=disabled'])\nwayland_client = dependency('wayland-client')\nwayland_cursor = dependency('wayland-cursor')\nwayland_protos = dependency('wayland-protocols')\ngtkmm = dependency('gtkmm-3.0', version : ['>=3.22.0'])\ndbusmenu_gtk = dependency('dbusmenu-gtk3-0.4', required: get_option('dbusmenu-gtk'))\ngiounix = dependency('gio-unix-2.0')\njsoncpp = dependency('jsoncpp', version : ['>=1.9.2'], fallback : ['jsoncpp', 'jsoncpp_dep'])\nsigcpp = dependency('sigc++-2.0')\nlibinotify = dependency('libinotify', required: false)\nlibepoll = dependency('epoll-shim', required: false)\nlibinput = dependency('libinput', required: get_option('libinput'))\nlibnl = dependency('libnl-3.0', required: get_option('libnl'))\nlibnlgen = dependency('libnl-genl-3.0', required: get_option('libnl'))\nupower_glib = dependency('upower-glib', required: get_option('upower_glib'))\npipewire = dependency('libpipewire-0.3', required: get_option('pipewire'))\nplayerctl = dependency('playerctl', version : ['>=2.0.0'], required: get_option('mpris'))\nlibpulse = dependency('libpulse', required: get_option('pulseaudio'))\nlibudev = dependency('libudev', required: get_option('libudev'))\nlibevdev = dependency('libevdev', required: get_option('libevdev'))\nlibmpdclient = dependency('libmpdclient', required: get_option('mpd'))\nxkbregistry = dependency('xkbregistry')\nlibjack = dependency('jack', required: get_option('jack'))\nlibwireplumber = dependency('wireplumber-0.5', required: get_option('wireplumber'))\n\nlibsndio = compiler.find_library('sndio', required: get_option('sndio'))\nif libsndio.found()\n    if not compiler.has_function('sioctl_open', prefix: '#include <sndio.h>', dependencies: libsndio)\n        if get_option('sndio').enabled()\n            error('libsndio is too old, required >=1.7.0')\n        else\n            warning('libsndio is too old, required >=1.7.0')\n            libsndio = dependency('', required: false)\n        endif\n    endif\nendif\n\ngtk_layer_shell = dependency('gtk-layer-shell-0', version: ['>=0.9.0'],\n        default_options: ['introspection=false', 'vapi=false'],\n        fallback: ['gtk-layer-shell', 'gtk_layer_shell'])\nsystemd = dependency('systemd', required: get_option('systemd'))\n\ncpp_lib_chrono = compiler.compute_int('__cpp_lib_chrono', prefix : '#include <chrono>')\nhave_chrono_timezones = cpp_lib_chrono >= 201611\n\nif have_chrono_timezones\n   code = '''\n#include <chrono>\nusing namespace std::chrono;\nint main(int argc, char** argv) {\n   const time_zone* tz;\n   return 0;\n}\n'''\n   if not compiler.links(code)\n      have_chrono_timezones = false\n   endif\nendif\n\nif have_chrono_timezones\n  tz_dep = declare_dependency()\nelse\n  tz_dep = dependency('date',\n      required: false,\n      default_options : [ 'use_system_tzdb=true' ],\n      modules : [ 'date::date', 'date::date-tz' ],\n      fallback: [ 'date', 'tz_dep' ])\nendif\n\nprefix = get_option('prefix')\nsysconfdir = get_option('sysconfdir')\nconf_data = configuration_data()\nconf_data.set('prefix', prefix)\n\nadd_project_arguments('-DSYSCONFDIR=\"@0@\"'.format(prefix / sysconfdir), language : 'cpp')\n\nif systemd.found()\n  user_units_dir = systemd.get_variable(pkgconfig: 'systemduserunitdir')\n\n  configure_file(\n    configuration: conf_data,\n    input: './resources/waybar.service.in',\n    output: '@BASENAME@',\n    install_dir: user_units_dir\n  )\nendif\n\nsrc_files = files(\n    'src/factory.cpp',\n    'src/AModule.cpp',\n    'src/ALabel.cpp',\n    'src/AIconLabel.cpp',\n    'src/AAppIconLabel.cpp',\n    'src/modules/custom.cpp',\n    'src/modules/disk.cpp',\n    'src/modules/idle_inhibitor.cpp',\n    'src/modules/image.cpp',\n    'src/modules/load.cpp',\n    'src/modules/temperature.cpp',\n    'src/modules/user.cpp',\n    'src/ASlider.cpp',\n    'src/main.cpp',\n    'src/bar.cpp',\n    'src/client.cpp',\n    'src/config.cpp',\n    'src/group.cpp',\n    'src/util/portal.cpp',\n    'src/util/enum.cpp',\n    'src/util/prepare_for_sleep.cpp',\n    'src/util/ustring_clen.cpp',\n    'src/util/sanitize_str.cpp',\n    'src/util/rewrite_string.cpp',\n    'src/util/gtk_icon.cpp',\n    'src/util/regex_collection.cpp',\n    'src/util/css_reload_helper.cpp'\n)\n\nman_files = files(\n    'man/waybar-custom.5.scd',\n    'man/waybar-disk.5.scd',\n    'man/waybar-idle-inhibitor.5.scd',\n    'man/waybar-image.5.scd',\n    'man/waybar-states.5.scd',\n    'man/waybar-menu.5.scd',\n    'man/waybar-temperature.5.scd',\n)\n\ninc_dirs = ['include']\n\nif is_linux\n    add_project_arguments('-DHAVE_CPU_LINUX', language: 'cpp')\n    add_project_arguments('-DHAVE_MEMORY_LINUX', language: 'cpp')\n    add_project_arguments('-DHAVE_SYSTEMD_MONITOR', language: 'cpp')\n    src_files += files(\n        'src/modules/battery.cpp',\n        'src/modules/bluetooth.cpp',\n        'src/modules/cffi.cpp',\n        'src/modules/cpu.cpp',\n        'src/modules/cpu_frequency/common.cpp',\n        'src/modules/cpu_frequency/linux.cpp',\n        'src/modules/cpu_usage/common.cpp',\n        'src/modules/cpu_usage/linux.cpp',\n        'src/modules/memory/common.cpp',\n        'src/modules/memory/linux.cpp',\n        'src/modules/power_profiles_daemon.cpp',\n        'src/modules/systemd_failed_units.cpp',\n    )\n    man_files += files(\n        'man/waybar-battery.5.scd',\n        'man/waybar-bluetooth.5.scd',\n        'man/waybar-cffi.5.scd',\n        'man/waybar-cpu.5.scd',\n        'man/waybar-memory.5.scd',\n        'man/waybar-systemd-failed-units.5.scd',\n        'man/waybar-power-profiles-daemon.5.scd',\n    )\nelif is_dragonfly or is_freebsd or is_netbsd or is_openbsd\n    add_project_arguments('-DHAVE_CPU_BSD', language: 'cpp')\n    add_project_arguments('-DHAVE_MEMORY_BSD', language: 'cpp')\n    src_files += files(\n        'src/modules/cffi.cpp',\n        'src/modules/cpu.cpp',\n        'src/modules/cpu_frequency/bsd.cpp',\n        'src/modules/cpu_frequency/common.cpp',\n        'src/modules/cpu_usage/bsd.cpp',\n        'src/modules/cpu_usage/common.cpp',\n        'src/modules/memory/bsd.cpp',\n        'src/modules/memory/common.cpp',\n    )\n    man_files += files(\n        'man/waybar-cffi.5.scd',\n        'man/waybar-cpu.5.scd',\n        'man/waybar-memory.5.scd',\n    )\n    if is_freebsd\n        src_files += files('src/modules/battery.cpp')\n        man_files += files('man/waybar-battery.5.scd')\n    endif\nendif\n\nif true\n    add_project_arguments('-DHAVE_SWAY', language: 'cpp')\n    src_files += files(\n        'src/modules/sway/ipc/client.cpp',\n        'src/modules/sway/bar.cpp',\n        'src/modules/sway/mode.cpp',\n        'src/modules/sway/language.cpp',\n        'src/modules/sway/window.cpp',\n        'src/modules/sway/workspaces.cpp',\n        'src/modules/sway/scratchpad.cpp'\n    )\n    man_files += files(\n        'man/waybar-sway-language.5.scd',\n        'man/waybar-sway-mode.5.scd',\n        'man/waybar-sway-scratchpad.5.scd',\n        'man/waybar-sway-window.5.scd',\n        'man/waybar-sway-workspaces.5.scd',\n    )\nendif\n\nif true\n    add_project_arguments('-DHAVE_WLR_TASKBAR', language: 'cpp')\n    src_files += files('src/modules/wlr/taskbar.cpp')\n    man_files += files('man/waybar-wlr-taskbar.5.scd')\nendif\n\nif true\n    add_project_arguments('-DHAVE_RIVER', language: 'cpp')\n    src_files += files(\n        'src/modules/river/layout.cpp',\n        'src/modules/river/mode.cpp',\n        'src/modules/river/tags.cpp',\n        'src/modules/river/window.cpp',\n    )\n    man_files += files(\n        'man/waybar-river-layout.5.scd',\n        'man/waybar-river-mode.5.scd',\n        'man/waybar-river-tags.5.scd',\n        'man/waybar-river-window.5.scd',\n    )\nendif\n\nif true\n    add_project_arguments('-DHAVE_DWL', language: 'cpp')\n    src_files += files('src/modules/dwl/tags.cpp')\n    src_files += files('src/modules/dwl/window.cpp')\n    man_files += files('man/waybar-dwl-tags.5.scd')\n    man_files += files('man/waybar-dwl-window.5.scd')\nendif\n\nif true\n    add_project_arguments('-DHAVE_HYPRLAND', language: 'cpp')\n    src_files += files(\n        'src/modules/hyprland/backend.cpp',\n        'src/modules/hyprland/language.cpp',\n        'src/modules/hyprland/submap.cpp',\n        'src/modules/hyprland/window.cpp',\n        'src/modules/hyprland/workspace.cpp',\n        'src/modules/hyprland/workspaces.cpp',\n        'src/modules/hyprland/windowcreationpayload.cpp',\n    )\n    man_files += files(\n        'man/waybar-hyprland-language.5.scd',\n        'man/waybar-hyprland-submap.5.scd',\n        'man/waybar-hyprland-window.5.scd',\n        'man/waybar-hyprland-workspaces.5.scd',\n    )\nendif\n\nif get_option('niri')\n    add_project_arguments('-DHAVE_NIRI', language: 'cpp')\n    src_files += files(\n        'src/modules/niri/backend.cpp',\n        'src/modules/niri/language.cpp',\n        'src/modules/niri/window.cpp',\n        'src/modules/niri/workspaces.cpp',\n    )\n    man_files += files(\n        'man/waybar-niri-language.5.scd',\n        'man/waybar-niri-window.5.scd',\n        'man/waybar-niri-workspaces.5.scd',\n    )\nendif\n\nif libnl.found() and libnlgen.found()\n    add_project_arguments('-DHAVE_LIBNL', language: 'cpp')\n    src_files += files('src/modules/network.cpp')\n    man_files += files('man/waybar-network.5.scd')\nendif\n\nif not get_option('logind').disabled()\n    add_project_arguments('-DHAVE_GAMEMODE', '-DHAVE_LOGIND_INHIBITOR', language: 'cpp')\n    src_files += files(\n        'src/modules/gamemode.cpp',\n        'src/modules/inhibitor.cpp',\n    )\n    man_files += files(\n        'man/waybar-gamemode.5.scd',\n        'man/waybar-inhibitor.5.scd',\n    )\nendif\n\nif (upower_glib.found() and not get_option('logind').disabled())\n    add_project_arguments('-DHAVE_UPOWER', language: 'cpp')\n    src_files += files('src/modules/upower.cpp')\n    man_files += files('man/waybar-upower.5.scd')\nendif\n\n\nif pipewire.found()\n    add_project_arguments('-DHAVE_PIPEWIRE', language: 'cpp')\n    src_files += files(\n        'src/modules/privacy/privacy.cpp',\n        'src/modules/privacy/privacy_item.cpp',\n        'src/util/pipewire/pipewire_backend.cpp',\n        'src/util/pipewire/privacy_node_info.cpp',\n    )\n    man_files += files('man/waybar-privacy.5.scd')\nendif\n\nif playerctl.found()\n    add_project_arguments('-DHAVE_MPRIS', language: 'cpp')\n    src_files += files('src/modules/mpris/mpris.cpp')\n    man_files += files('man/waybar-mpris.5.scd')\nendif\n\nif libpulse.found()\n    add_project_arguments('-DHAVE_LIBPULSE', language: 'cpp')\n    src_files += files(\n        'src/modules/pulseaudio.cpp',\n        'src/modules/pulseaudio_slider.cpp',\n        'src/util/audio_backend.cpp',\n    )\n    man_files += files(\n        'man/waybar-pulseaudio.5.scd',\n        'man/waybar-pulseaudio-slider.5.scd',\n    )\nendif\n\nif libjack.found()\n    add_project_arguments('-DHAVE_LIBJACK', language: 'cpp')\n    src_files += files('src/modules/jack.cpp')\n    man_files += files('man/waybar-jack.5.scd')\nendif\n\nif libwireplumber.found()\n    add_project_arguments('-DHAVE_LIBWIREPLUMBER', language: 'cpp')\n    src_files += files('src/modules/wireplumber.cpp')\n    man_files += files('man/waybar-wireplumber.5.scd')\nendif\n\nif dbusmenu_gtk.found()\n    add_project_arguments('-DHAVE_DBUSMENU', language: 'cpp')\n    src_files += files(\n        'src/modules/sni/tray.cpp',\n        'src/modules/sni/watcher.cpp',\n        'src/modules/sni/host.cpp',\n        'src/modules/sni/item.cpp'\n    )\n    man_files += files(\n        'man/waybar-tray.5.scd',\n    )\nendif\n\nif libudev.found() and (is_linux or libepoll.found())\n    add_project_arguments('-DHAVE_LIBUDEV', language: 'cpp')\n    src_files += files(\n        'src/modules/backlight.cpp',\n        'src/modules/backlight_slider.cpp',\n        'src/util/backlight_backend.cpp',\n    )\n    man_files += files(\n        'man/waybar-backlight.5.scd',\n        'man/waybar-backlight-slider.5.scd',\n    )\nendif\n\nif libevdev.found() and (is_linux or libepoll.found()) and libinput.found() and (is_linux or libinotify.found())\n    add_project_arguments('-DHAVE_LIBEVDEV', language: 'cpp')\n    add_project_arguments('-DHAVE_LIBINPUT', language: 'cpp')\n    src_files += files('src/modules/keyboard_state.cpp')\n    man_files += files('man/waybar-keyboard-state.5.scd')\nendif\n\nif libmpdclient.found()\n    add_project_arguments('-DHAVE_LIBMPDCLIENT', language: 'cpp')\n    src_files += files(\n        'src/modules/mpd/mpd.cpp',\n        'src/modules/mpd/state.cpp',\n    )\n    man_files += files(\n        'man/waybar-mpd.5.scd',\n    )\nendif\n\nif libsndio.found()\n    add_project_arguments('-DHAVE_LIBSNDIO', language: 'cpp')\n    src_files += files('src/modules/sndio.cpp')\n    man_files += files('man/waybar-sndio.5.scd')\nendif\n\nif get_option('rfkill').enabled() and is_linux\n    add_project_arguments('-DWANT_RFKILL', language: 'cpp')\n    src_files += files(\n        'src/util/rfkill.cpp'\n    )\nendif\n\nif have_chrono_timezones\n    add_project_arguments('-DHAVE_CHRONO_TIMEZONES', language: 'cpp')\n    src_files += files('src/modules/clock.cpp')\n    man_files += files('man/waybar-clock.5.scd')\nelif tz_dep.found()\n    add_project_arguments('-DHAVE_LIBDATE', language: 'cpp')\n    src_files += files('src/modules/clock.cpp')\n    man_files += files('man/waybar-clock.5.scd')\nelse\n    src_files += files('src/modules/simpleclock.cpp')\n    man_files += files('man/waybar-clock.5.scd')\nendif\n\nif get_option('experimental')\n    add_project_arguments('-DHAVE_WLR_WORKSPACES', language: 'cpp')\n    src_files += files(\n        'src/modules/wlr/workspace_manager.cpp',\n        'src/modules/wlr/workspace_manager_binding.cpp',\n    )\n    man_files += files(\n        'man/waybar-wlr-workspaces.5.scd',\n    )\nendif\n\ncava = dependency('cava',\n                  version : '>=0.10.3',\n                  required: get_option('cava'),\n                  fallback : ['cava', 'cava_dep'],\n                  not_found_message: 'cava is not found. Building waybar without cava')\n\nif cava.found()\n   add_project_arguments('-DHAVE_LIBCAVA', language: 'cpp')\n   src_files += files('src/modules/cava.cpp')\n   man_files += files('man/waybar-cava.5.scd')\nendif\n\nsubdir('protocol')\n\napp_resources = []\nsubdir('resources/icons')\n\nexecutable(\n    'waybar',\n    [src_files, app_resources],\n    dependencies: [\n        thread_dep,\n        client_protos,\n        wayland_client,\n        fmt,\n        spdlog,\n        sigcpp,\n        jsoncpp,\n        wayland_cursor,\n        gtkmm,\n        dbusmenu_gtk,\n        giounix,\n        libinput,\n        libnl,\n        libnlgen,\n        upower_glib,\n        pipewire,\n        playerctl,\n        libpulse,\n        libjack,\n        libwireplumber,\n        libudev,\n        libinotify,\n        libepoll,\n        libmpdclient,\n        libevdev,\n        gtk_layer_shell,\n        libsndio,\n        tz_dep,\n\t\txkbregistry,\n        cava\n    ],\n    include_directories: inc_dirs,\n    install: true,\n)\n\ninstall_data(\n    'resources/config.jsonc',\n    'resources/style.css',\n    install_dir: sysconfdir / 'xdg/waybar'\n)\n\nscdoc = dependency('scdoc', version: '>=1.9.2', native: true, required: get_option('man-pages'))\n\nif scdoc.found()\n    man_files += configure_file(\n        input: 'man/waybar.5.scd.in',\n        output: 'waybar.5.scd',\n        configuration: {\n            'sysconfdir': prefix / sysconfdir\n        }\n    )\n\n    man_files += configure_file(\n        input: 'man/waybar-styles.5.scd.in',\n        output: 'waybar-styles.5.scd',\n        configuration: {\n            'sysconfdir': prefix / sysconfdir\n        }\n    )\n\n    fs = import('fs')\n    mandir = get_option('mandir')\n    foreach file : man_files\n        basename = fs.name(file)\n\n        topic = basename.split('.')[-3]\n        section = basename.split('.')[-2]\n        output = '@0@.@1@'.format(topic, section)\n\n        custom_target(\n            output,\n            input: file,\n            output: output,\n            command: scdoc.get_variable('scdoc'),\n            feed: true,\n            capture: true,\n            install: true,\n            install_dir: '@0@/man@1@'.format(mandir, section)\n        )\n    endforeach\nendif\n\ncatch2 = dependency(\n    'catch2',\n    default_options: [ 'tests=false' ],\n    fallback: ['catch2', 'catch2_dep'],\n    required: get_option('tests'),\n)\nif catch2.found()\n    subdir('test')\nendif\n\nclangtidy = find_program('clang-tidy', required: false)\n\nif clangtidy.found()\n    run_target(\n        'tidy',\n        command: [\n            clangtidy,\n            '-checks=*,-fuchsia-default-arguments',\n            '-p', meson.project_build_root()\n        ] + src_files)\nendif\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 2.1162109375,
          "content": "option('libcxx', type : 'boolean', value : false, description : 'Build with Clang\\'s libc++ instead of libstdc++ on Linux.')\noption('libinput', type: 'feature', value: 'auto', description: 'Enable libinput support for libinput related features')\noption('libnl', type: 'feature', value: 'auto', description: 'Enable libnl support for network related features')\noption('libudev', type: 'feature', value: 'auto', description: 'Enable libudev support for udev related features')\noption('libevdev', type: 'feature', value: 'auto', description: 'Enable libevdev support for evdev related features')\noption('pulseaudio', type: 'feature', value: 'auto', description: 'Enable support for pulseaudio')\noption('upower_glib', type: 'feature', value: 'auto', description: 'Enable support for upower')\noption('pipewire', type: 'feature', value: 'auto', description: 'Enable support for pipewire')\noption('mpris', type: 'feature', value: 'auto', description: 'Enable support for mpris')\noption('systemd', type: 'feature', value: 'auto', description: 'Install systemd user service unit')\noption('dbusmenu-gtk', type: 'feature', value: 'auto', description: 'Enable support for tray')\noption('man-pages', type: 'feature', value: 'auto', description: 'Generate and install man pages')\noption('mpd', type: 'feature', value: 'auto', description: 'Enable support for the Music Player Daemon')\noption('rfkill', type: 'feature', value: 'auto', description: 'Enable support for RFKILL')\noption('sndio', type: 'feature', value: 'auto', description: 'Enable support for sndio')\noption('logind', type: 'feature', value: 'auto', description: 'Enable support for logind')\noption('tests', type: 'feature', value: 'auto', description: 'Enable tests')\noption('experimental', type : 'boolean', value : false, description: 'Enable experimental features')\noption('jack', type: 'feature', value: 'auto', description: 'Enable support for JACK')\noption('wireplumber', type: 'feature', value: 'auto', description: 'Enable support for WirePlumber')\noption('cava', type: 'feature', value: 'auto', description: 'Enable support for Cava')\noption('niri', type: 'boolean', description: 'Enable support for niri')\n"
        },
        {
          "name": "nix",
          "type": "tree",
          "content": null
        },
        {
          "name": "package",
          "type": "tree",
          "content": null
        },
        {
          "name": "preview-2.png",
          "type": "blob",
          "size": 5.3076171875,
          "content": null
        },
        {
          "name": "preview.png",
          "type": "blob",
          "size": 22.099609375,
          "content": null
        },
        {
          "name": "protocol",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "subprojects",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}