{
  "metadata": {
    "timestamp": 1736566054361,
    "page": 40,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "WasmEdge/WasmEdge",
      "stars": 8726,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".CurrentChangelog.md",
          "type": "blob",
          "size": 2.7978515625,
          "content": "### 0.14.1 (2024-09-16)\n\nFeatures:\n\n* Supported LLVM 17.0.6.\n* Bumpped `spdlog` to `v1.13.0`.\n* Bumpped `fmt` to `11.0.2`.\n* Bumpped `simdjson` to `v3.10.0`.\n* Bumpped `googletest` to `1.15.2`.\n* [WASI-NN] ggml backend:\n  * Bump llama.cpp to b3651.\n  * Static link `libggml` and `libllama`.\n  * Refined the CMake to support multiple backends of WASI-NN with ggml backend.\n  * Supported compute single in RPC mode.\n* [WASI-NN] Added support for whisper.cpp backend.\n* [WASI-NN] Added support for piper backend.\n* [WASI-NN] Added support for ChatTTS backend.\n* [WASI-NN] Added support for Burn.rs backend.\n  * Supported `squeezenet` and `whisper` models.\n* [Plugin] Supported `wasmedge_stablediffusion` plug-in.\n  * Enabled CUBLAS.\n  * Enabled metal support on MacOS.\n* [Plugin] Moved `wasi_logging` into built-in plug-in.\n  * Instead of installing `wasi_logging` plug-in shared library, developers can find and get this plug-in after calling `WasmEdge_PluginLoadWithDefaultPaths()` API.\n  * In the WasmEdge CLI tools, the built-in plug-ins will automatically be loaded.\n* [Proposal] Initial support for instantiation phase of component model.\n  * Due to the breaking change of API, bump the plug-in `API_VERSION` to `3`.\n* [Proposal] Supported WASM Relaxed-SIMD proposal.\n  * Added the `WasmEdge_Proposal_RelaxSIMD` for the configuration in WasmEdge C API.\n  * Users can use the `--enable-relaxed-simd` to enable the proposal in `wasmedge` and `wasmedgec` tools.\n\nFixed issues:\n\n* Fixed warnings on GCC-14.\n* Fixed the `fmt` related header inclusion for error logging.\n* Fixed WASI test error in Windows.\n* Fixed version checking in source tarball.\n* Fixed version detection issue when building from source.\n* Fixed the visibility of internal symbols.\n* [Loader] Fixed alignment checking in loading immediates for memory instructions.\n* [Runtime] Fixed allocation issue when configured the limited memory page size.\n* Used `fmt::format` instead of string stream in error logging.\n\nTests:\n\n* Added WASI test suites on Windows.\n\nKnown issues:\n\n* Universal WASM format failed on macOS platforms.\n  * In the current status, the universal WASM format output of the AOT compiler with the `O1` or upper optimizations on MacOS platforms will cause a bus error during execution.\n  * We are trying to fix this issue. For a working around, please use the `--optimize=0` to set the compiler optimization level to `O0` in `wasmedgec` CLI.\n\nThank all the contributors who made this release possible!\n\nBiswapriyo Nath, Elmira, Faidon Liambotis, Fusaaaann, Han-Wen Tsao, Jun Zhang, Kefu Chai, Lîm Tsú-thuàn, Michael Morris, PeterD1524, Shen-Ta Hsieh, Shreyas Atre, Sylveon, Yi Huang, Yi-Ying He, alabulei1, dm4, grorge, hydai, junxiangMu, vincent\n\nIf you want to build from source, please use WasmEdge-0.14.1-src.tar.gz instead of the zip or tarball provided by GitHub directly.\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.033203125,
          "content": "BasedOnStyle: LLVM\nIndentWidth: 2\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 0.794921875,
          "content": "Checks: '-*,clang-diagnostic-*,llvm-*,misc-*,-misc-unused-parameters,-misc-non-private-member-variables-in-classes,readability-identifier-naming'\nCheckOptions:\n  - key:             readability-identifier-naming.ClassCase\n    value:           CamelCase\n  - key:             readability-identifier-naming.EnumCase\n    value:           CamelCase\n  - key:             readability-identifier-naming.FunctionCase\n    value:           camelBack\n  - key:             readability-identifier-naming.MemberCase\n    value:           CamelCase\n  - key:             readability-identifier-naming.ParameterCase\n    value:           CamelCase\n  - key:             readability-identifier-naming.UnionCase\n    value:           CamelCase\n  - key:             readability-identifier-naming.VariableCase\n    value:           CamelCase\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.013671875,
          "content": "/build\n/debug\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 1.251953125,
          "content": "root = true\n\n[**.{patch}]\ncharset = utf-8\nend_of_line = lf\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\n\n[**.{c,cc,cpp,mm,h,hpp,ipp,in,cmake,S,rs,sh,toml,wat,witx,txt,spdx,patch}]\ncharset = utf-8\nend_of_line = lf\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[**.md]\ncharset = utf-8\nend_of_line = lf\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = false\n\n[**/Dockerfile.*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[**/.{clang-tidy,clang-format,editorconfig,gitignore,dockerignore,lgtm.yml,gitlab-ci.yml}]\ncharset = utf-8\nend_of_line = lf\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[**/.*.md]\ncharset = utf-8\nend_of_line = lf\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = false\n\n[binfmt/*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[**/{LICENSE,SHA256SUM}]\ncharset = utf-8\nend_of_line = lf\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".gitattribute",
          "type": "blob",
          "size": 0.0361328125,
          "content": "* text=auto\n*.wasm -text\n*.png -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.3486328125,
          "content": "#==============================================================================#\n# This file specifies intentionally untracked files that git should ignore.\n# See: http://www.kernel.org/pub/software/scm/git/docs/gitignore.html\n#\n# This file is intentionally different from the output of `git svn show-ignore`,\n# as most of those are useless.\n#==============================================================================#\n\n#==============================================================================#\n# File extensions to be ignored anywhere in the tree.\n#==============================================================================#\n# Temp files created by most text editors.\n*~\n# Merge files created by git.\n*.orig\n# Byte compiled python modules.\n*.pyc\n# vim swap files\n.*.sw?\n.sw?\n#OS X specific files.\n.DS_store\n\n# Nested build directory\n/build\n# Nix's output\nresult\n\n#==============================================================================#\n# Explicit files to ignore (only matches one).\n#==============================================================================#\n# Various tag programs\n/tags\n/TAGS\n/GPATH\n/GRTAGS\n/GSYMS\n/GTAGS\n.gitusers\nautom4te.cache\ncscope.files\ncscope.out\nautoconf/aclocal.m4\nautoconf/autom4te.cache\n/compile_commands.json\n# Visual Studio built-in CMake configuration\n/CMakeSettings.json\n# CLion project configuration\n/.idea\n# (Rust) Cargo lockfile, not published with libraries.\nCargo.lock\nbindings/rust/target\nbindings/rust/wasmedge-sdk/target\nbindings/rust/wasmedge-sys/target\nbindings/rust/wasmedge-sdk/examples/wasi_print_env/target\n\n#==============================================================================#\n# Directories to ignore (do not add trailing '/'s, they skip symlinks).\n#==============================================================================#\n# External projects that are tracked independently.\nprojects/*\n!projects/*.*\n!projects/Makefile\nruntimes/*\n!runtimes/*.*\n# Sphinx build tree, if building in-source dir.\ndocs/_build\n# VS2017 and VSCode config files.\n.vscode\n.vs\n# clangd index\n.clangd\n.cache\n\n.direnv\n.envrc\n\nbindings/rust/wasmedge-sys/examples/.ipynb_checkpoints/*\n.DS_Store\n\nnode_modules/\n\n# intelliJ IDEA\n**/.idea/*\n**.iml\n## Gradle\n**/.gradle/*\n**/build\n\n# cmake caches\n**/cmake-build-debug\n**/cmake-build-debug-remote-host\n**/cmake-build-release\n\n# generated jni files\nbindings/java/wasmedge-java/wasmedge-jni/jni/*.h\n"
        },
        {
          "name": ".gitvote.yml",
          "type": "blob",
          "size": 3.744140625,
          "content": "# GitVote configuration file\n#\nautomation:\n  enabled: false\n  rules:\n    - patterns: []\n      profile: default\n\nprofiles:\n  default:\n    # Voting duration (required)\n    #\n    # How long the vote will be open\n    #\n    # Units supported (can be combined as in 1hour 30mins):\n    #\n    #   minutes | minute | mins | min | m\n    #   hours   | hour   | hrs  | hrs | h\n    #   days    | day    | d\n    #   weeks   | week   | w\n    #\n    duration: 5d\n\n    # Pass threshold (required)\n    #\n    # Percentage of votes in favor required to pass the vote\n    #\n    # The percentage is calculated based on the number of votes in favor and the\n    # number of allowed voters (see allowed_voters field below for more details).\n    pass_threshold: 75\n\n    # Allowed voters (optional)\n    #\n    # List of GitHub teams and users who have binding votes\n    #\n    # If no teams or users are provided, all repository collaborators will be\n    # allowed to vote. For organization-owned repositories, the list of\n    # collaborators includes outside collaborators, organization members that\n    # are direct collaborators, organization members with access through team\n    # memberships, organization members with access through default organization\n    # permissions, and organization owners.\n    #\n    # By default, teams' members with the maintainer role are allowed to vote\n    # as well. By using the `exclude_team_maintainers` option, it's possible to\n    # modify this behavior so that only teams' members with the member role are\n    # considered allowed voters. Please note that this option only applies to\n    # the teams explicitly listed in `allowed_voters/teams`.\n    #\n    # Teams names must be provided without the organization prefix.\n    #\n    # allowed_voters:\n    #   teams:\n    #     - team1\n    #   users:\n    #     - cynthia-sg\n    #     - tegioz\n    #   exclude_team_maintainers: false\n    #\n    # We grant the voters to the existing WasmEdge maintainers.\n    allowed_voters:\n      teams: []\n      users:\n        - hydai\n        - ibmibmibm\n        - q82419\n        - juntao\n\n    # Periodic status check\n    # \n    # GitVote allows checking the status of a vote in progress manually by\n    # calling the /check-vote command. The periodic status check option makes\n    # it possible to automate the execution of status checks periodically. The\n    # vote status will be published to the corresponding issue or pull request,\n    # the same way as if the /check-vote command would have been called\n    # manually.\n    #\n    # When this option is enabled, while the vote is open, a status check will\n    # be run automatically using the frequency configured. Please note that the\n    # hard limit of one status check per day still applies, so if the command\n    # has been called manually the automatic periodic run may be delayed.\n    # Automatic status checks won't be run if the vote will be closed within\n    # the next hour.\n    #\n    # Units supported:\n    #\n    #   - day / days\n    #   - week / weeks\n    #\n    # As an example, using a value of \"5 days\" would mean that 5 days after the\n    # vote was created, and every 5 days after that, an automatic status check\n    # will be run.\n    #\n    # periodic_status_check: \"5 days\"\n    #\n    periodic_status_check: \"5 days\"\n\n    # Close on passing\n    # \n    # By default, votes remain open for the configured duration. Sometimes,\n    # specially on votes that stay open for a long time, it may be preferable\n    # to close a vote automatically once the passing threshold has been met.\n    # The close on passing feature makes this possible. Open votes where this\n    # feature has been enabled will be checked once daily and, if GitVote\n    # detects that the vote has passed, it will automatically close it.\n    # \n    # close_on_passing: true\n    #\n    close_on_passing: false\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 10.96875,
          "content": "# SPDX-License-Identifier: Apache-2.0\n# SPDX-FileCopyrightText: 2019-2024 Second State INC\n\ncmake_minimum_required(VERSION 3.18)\ncmake_policy(SET CMP0091 NEW)\nif (CMAKE_VERSION VERSION_GREATER_EQUAL \"3.24.0\")\n  cmake_policy(SET CMP0135 NEW)\nendif()\nproject(WasmEdge LANGUAGES CXX C)\n\n# CMake build type.\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE RelWithDebInfo)\nendif()\n\n# Overwrite it if you want to use static MSVC runtime library.\nset(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreadedDLL\")\n\n# WasmEdge CAPI and so versions.\nset(WASMEDGE_CAPI_VERSION \"0.1.0\" CACHE STRING \"WasmEdge C API library version\")\nset(WASMEDGE_CAPI_SOVERSION \"0\" CACHE STRING \"WasmEdge C API library soversion\")\nset(WASMEDGE_WASI_NN_VERSION \"0.1.7\" CACHE STRING \"WasmEdge WASI-NN library version\")\nset(WASMEDGE_WASI_NN_SOVERSION \"0\" CACHE STRING \"WasmEdge WASI-NN library soversion\")\n\n# Set cpack package version.\nfind_program(GIT_CMD git)\n# Assuming the git command is not found and .git folder is not available.\nset(GIT_VERSION_NOT_FOUND 1)\nif(GIT_CMD AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/.git\")\n  execute_process(COMMAND\n    ${GIT_CMD} describe --match \"[0-9].[0-9]*\" --tag\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n    OUTPUT_VARIABLE CPACK_PACKAGE_VERSION\n    RESULT_VARIABLE GIT_VERSION_NOT_FOUND\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\nendif()\nif(GIT_VERSION_NOT_FOUND AND NOT GIT_VERSION_NOT_FOUND EQUAL 0)\n  set(CPACK_PACKAGE_VERSION \"0.0.0-unreleased\")\nendif()\n\n# Overwrite version information once there is a VERSION file.\nif(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/VERSION\")\n  file(READ \"${CMAKE_CURRENT_SOURCE_DIR}/VERSION\" LOCAL_VERSION)\n  set(CPACK_PACKAGE_VERSION ${LOCAL_VERSION})\n  unset(LOCAL_VERSION)\nendif()\n\n# Add the CMake module path.\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/cmake\")\n\n# Export compile commands.\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\n# Find threads and filesystem.\nset(THREADS_PREFER_PTHREAD_FLAG ON)\nfind_package(Filesystem REQUIRED Final Experimental)\nfind_package(Threads REQUIRED)\n\n# List of WasmEdge options\noption(WASMEDGE_BUILD_TESTS \"Generate build targets for the wasmedge unit tests.\" OFF)\noption(WASMEDGE_BUILD_COVERAGE \"Generate coverage report. Require WASMEDGE_BUILD_TESTS.\" OFF)\noption(WASMEDGE_BUILD_SHARED_LIB \"Generate the WasmEdge shared library.\" ON)\noption(WASMEDGE_BUILD_STATIC_LIB \"Generate the WasmEdge static library.\" OFF)\noption(WASMEDGE_BUILD_TOOLS \"Generate wasmedge and wasmedgec tools. Depend on and will build the WasmEdge shared library.\" ON)\noption(WASMEDGE_BUILD_FUZZING \"Generate fuzzing test tools. Couldn't build with wasmedge tools and unit tests.\" OFF)\noption(WASMEDGE_BUILD_PLUGINS \"Generate plugins.\" ON)\noption(WASMEDGE_BUILD_EXAMPLE \"Generate examples.\" OFF)\noption(WASMEDGE_BUILD_WASI_NN_RPC \"Generate WASI-NN RPC.\" OFF)\noption(WASMEDGE_USE_LLVM \"Enable WasmEdge LLVM-based compilation runtime.\" ON)\nif(WASMEDGE_BUILD_AOT_RUNTIME)\n  message(WARNING \"WASMEDGE_BUILD_AOT_RUNTIME option was renamed to WASMEDGE_USE_LLVM.\")\n  set(WASMEDGE_USE_LLVM \"${WASMEDGE_BUILD_AOT_RUNTIME}\" CACHE STRING \"Enable WasmEdge LLVM-based compilation runtime.\")\n  unset(WASMEDGE_BUILD_AOT_RUNTIME CACHE)\nendif()\noption(WASMEDGE_USE_CXX11_ABI \"Enable cxx11 abi when building WasmEdge.\" ON)\noption(WASMEDGE_FORCE_DISABLE_LTO \"Forcefully disable link time optimization when linking even in Release/RelWithDeb build.\" OFF)\noption(WASMEDGE_LINK_LLVM_STATIC \"Statically link the LLVM library into the WasmEdge tools and libraries.\" OFF)\noption(WASMEDGE_LINK_TOOLS_STATIC \"Statically link the wasmedge and wasmedgec tools. Will forcefully link the LLVM library statically.\" OFF)\noption(WASMEDGE_ENABLE_UB_SANITIZER \"Enable undefined behavior sanitizer.\" OFF)\noption(WASMEDGE_DISABLE_LIBTINFO \"Disable linking against libtinfo when linking LLVM.\" OFF)\n\n# Options about plug-ins.\n#   WASI plug-in: WASI-Crypto proposal.\noption(WASMEDGE_PLUGIN_WASI_CRYPTO \"Enable and build WasmEdge wasi-crypto plugin.\" OFF)\n#   WASI plug-in: WASI-Http proposal.\noption(WASMEDGE_PLUGIN_WASI_HTTP \"Enable and build WasmEdge wasi-http plugin.\" OFF)\n#   WASI plug-in: WASI-Logging proposal.\n#     Note: WASMEDGE_PLUGIN_WASI_LOGGING is not used until the new plug-in mechanism ready in 0.15.0.\noption(WASMEDGE_PLUGIN_WASI_LOGGING \"Enable and build WasmEdge wasi-logging plugin.\" ON)\n#   WASI plug-in: WASI-NN proposal with backends.\nset(WASMEDGE_PLUGIN_WASI_NN_BACKEND \"\" CACHE STRING \"Enable and build WasmEdge Wasi-NN plugin with backends.\")\noption(WASMEDGE_PLUGIN_WASI_NN_GGML_LLAMA_NATIVE \"Enable LLAMA_NATIVE(AVX/AVX2/FMA) in the WASI-NN GGML backend.\" ON)\noption(WASMEDGE_PLUGIN_WASI_NN_GGML_LLAMA_BLAS \"Enable LLAMA_BLAS in the WASI-NN GGML backend.\" OFF)\noption(WASMEDGE_PLUGIN_WASI_NN_GGML_LLAMA_CUBLAS \"Enable LLAMA_CUBLAS in the WASI-NN GGML backend.\" OFF)\noption(WASMEDGE_PLUGIN_WASI_NN_GGML_LLAMA_METAL \"Enable LLAMA_METAL in the WASI-NN GGML backend. Available on MacOS arm64 only.\" ON)\noption(WASMEDGE_PLUGIN_WASI_NN_WHISPER_METAL \"Enable GGML_METAL in the WASI-NN WHISPER backend. Available on MacOS arm64 only.\" ON)\noption(WASMEDGE_PLUGIN_WASI_NN_WHISPER_CUDA \"Enable GGML_CUDA in the WASI-NN WHISPER backend.\" OFF)\n#   WASI plug-in: WASI-Poll proposal.\noption(WASMEDGE_PLUGIN_WASI_POLL \"Enable and build WasmEdge wasi-poll plugin.\" OFF)\n#   WasmEdge plug-in: wasm-bpf.\noption(WASMEDGE_PLUGIN_WASM_BPF \"Enable and build WasmEdge wasm-bpf plugin.\" OFF)\n#   WasmEdge plug-in: ffmpeg.\noption(WASMEDGE_PLUGIN_FFMPEG \"Enable and build WasmEdge ffmpeg plugin.\" OFF)\n#   WasmEdge plug-in: Image.\noption(WASMEDGE_PLUGIN_IMAGE \"Enable and build WasmEdge image plugin.\" OFF)\n#   WasmEdge plug-in: LLMC.\noption(WASMEDGE_PLUGIN_LLMC \"Enable and build WasmEdge LLMC plugin.\" OFF)\n#   WasmEdge plug-in: OCR.\noption(WASMEDGE_PLUGIN_OCR \"Enable and build WasmEdge OCR plugin.\" OFF)\n#   WasmEdge plug-in: OpenCV-mini.\noption(WASMEDGE_PLUGIN_OPENCVMINI \"Enable and build WasmEdge opencvmini plugin.\" OFF)\n#   WasmEdge plug-in: Process.\noption(WASMEDGE_PLUGIN_PROCESS \"Enable and build WasmEdge process plugin.\" OFF)\n#   WasmEdge plug-in: Stable-diffusion.\noption(WASMEDGE_PLUGIN_STABLEDIFFUSION \"Enable and build WasmEdge stable-diffusion plugin.\" OFF)\noption(WASMEDGE_PLUGIN_STABLEDIFFUSION_CUDA \"Enable CUDA in the stable-diffusion plugin.\" OFF)\noption(WASMEDGE_PLUGIN_STABLEDIFFUSION_METAL \"Enable Metal in the stable-diffusion plugin.\" OFF)\noption(WASMEDGE_PLUGIN_STABLEDIFFUSION_OPENMP \"Enable OpenMP in the stable-diffusion plugin.\" OFF)\n#   WasmEdge plug-in: TensorFlow.\noption(WASMEDGE_PLUGIN_TENSORFLOW \"Enable and build WasmEdge TensorFlow plugin.\" OFF)\n#   WasmEdge plug-in: TensorFlow-Lite.\noption(WASMEDGE_PLUGIN_TENSORFLOWLITE \"Enable and build WasmEdge TensorFlow-Lite plugin.\" OFF)\n#   WasmEdge plug-in: zlib.\noption(WASMEDGE_PLUGIN_ZLIB \"Enable and build WasmEdge zlib plugin.\" OFF)\n\n# Fuzzing and tools and tests are exclusive.\nif(WASMEDGE_BUILD_TOOLS AND WASMEDGE_BUILD_FUZZING)\n  message(FATAL_ERROR \"wasmedge tool and fuzzing tool are exclusive options.\")\nendif()\nif(WASMEDGE_BUILD_TESTS AND WASMEDGE_BUILD_FUZZING)\n  message(FATAL_ERROR \"unit tests and fuzzing tool are exclusive options.\")\nendif()\n\n# Static library will forcefully turn off the LTO.\nif(WASMEDGE_BUILD_STATIC_LIB)\n  set(WASMEDGE_FORCE_DISABLE_LTO ON)\nendif()\n\n# WasmEdge tool options.\nif(WASMEDGE_BUILD_TOOLS)\n  if(WASMEDGE_LINK_TOOLS_STATIC)\n    # Static tools will link LLVM statically.\n    set(WASMEDGE_LINK_LLVM_STATIC ON)\n    # Tools will forcefully turn on the static library building.\n    set(WASMEDGE_BUILD_STATIC_LIB ON)\n    if(WASMEDGE_BUILD_PLUGINS)\n      message(WARNING \"For tuning on the WASMEDGE_LINK_TOOLS_STATIC option, the plugins will not work.\")\n    endif()\n  else()\n    # Tools will forcefully turn on the shared library building.\n    set(WASMEDGE_BUILD_SHARED_LIB ON)\n  endif()\nendif()\n\nif(WASMEDGE_BUILD_WASI_NN_RPC)\n  # * Homebrew: grpc\n  # * Debian, Ubuntu: libgrpc-dev, libgrpc++-dev\n  find_package(PkgConfig)\n  if(PkgConfig_FOUND)\n    pkg_check_modules(gRPCPP grpc++)\n  endif()\n  # Do not check find_package(gRPC), because libgrpc-dev for Ubuntu 22.04 does not contain cmake files.\n  # https://packages.ubuntu.com/search?keywords=libgrpc-dev\n  # Do not check find_package(protobuf), because libprotobuf-dev for Ubuntu does not contain cmake files.\n  # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1027876\n  if(gRPCPP_FOUND AND WASMEDGE_BUILD_SHARED_LIB)\n    message(STATUS \"If you see an error related to gRPC or protobuf, try setting WASMEDGE_BUILD_WASI_NN_RPC to OFF.\")\n  endif()\n  if(WASMEDGE_BUILD_WASI_NN_RPC AND NOT WASMEDGE_BUILD_SHARED_LIB)\n    message(FATAL_ERROR \"WASMEDGE_BUILD_WASI_NN_RPC depends on WASMEDGE_BUILD_SHARED_LIB.\")\n  endif()\nendif()\n\nset(WASMEDGE_BUILD_PACKAGE \"DEB;RPM\" CACHE STRING \"Package generate types\")\nset(CPACK_PROJECT_CONFIG_FILE ${CMAKE_CURRENT_SOURCE_DIR}/cmake/cpack_config.cmake)\n\nif(WASMEDGE_BUILD_COVERAGE)\n  set(GCOVR_ADDITIONAL_ARGS \"--exclude-unreachable-branches;--exclude-throw-branches\")\n  include(CodeCoverage)\n  append_coverage_compiler_flags()\nendif()\n\ninclude(FetchContent)\ninclude(Helper)\ninclude(GNUInstallDirs)\n\nset(CPACK_PACKAGE_VENDOR Second State LLC)\nset(CPACK_PACKAGE_FILE_NAME \"${CMAKE_PROJECT_NAME}-${CPACK_PACKAGE_VERSION}-${CMAKE_SYSTEM_NAME}\")\nset(CPACK_STRIP_FILES ON)\nset(CPACK_PACKAGE_CONTACT \"Shen-Ta Hsieh <beststeve@secondstate.io>\")\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"High performance WebAssembly Virtual Machine\")\nset(CPACK_ARCHIVE_COMPONENT_INSTALL ON)\nset(CPACK_ARCHIVE_WASMEDGE_FILE_NAME \"${CPACK_PACKAGE_FILE_NAME}\")\nset(CPACK_RPM_COMPONENT_INSTALL ON)\nset(CPACK_RPM_MAIN_COMPONENT \"WasmEdge\")\nset(CPACK_RPM_PACKAGE_LICENSE \"Apache 2.0\")\nset(CPACK_DEB_COMPONENT_INSTALL ON)\nset(CPACK_DEBIAN_WASMEDGE_PACKAGE_NAME wasmedge)\nset(CPACK_DEBIAN_FILE_NAME DEB-DEFAULT)\nset(CPACK_DEBIAN_COMPRESSION_TYPE xz)\nset(CPACK_DEBIAN_PACKAGE_HOMEPAGE \"https://github.com/WasmEdge/WasmEdge/\")\nset(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)\nset(CPACK_DEBIAN_PACKAGE_CONTROL_STRICT_PERMISSION ON)\nset(CPACK_GENERATOR \"${WASMEDGE_BUILD_PACKAGE}\")\nset(CPACK_PACKAGE_DESCRIPTION \"WasmEdge is a high performance, extensible, and hardware optimized WebAssembly Virtual Machine for cloud, AI, and blockchain applications.\")\nif(\"${CMAKE_SOURCE_DIR}\" STREQUAL \"${CMAKE_CURRENT_SOURCE_DIR}\")\n  # If WasmEdge is the top project, only pack the WasmEdge component.\n  set(CPACK_COMPONENTS_ALL \"WasmEdge\")\nendif()\n\nadd_subdirectory(include)\nadd_subdirectory(lib)\nif(WASMEDGE_BUILD_PLUGINS AND (WASMEDGE_BUILD_STATIC_LIB OR WASMEDGE_BUILD_SHARED_LIB))\n  # Plug-ins should depend on the WasmEdge library.\n  if(WASMEDGE_BUILD_STATIC_LIB AND NOT WASMEDGE_BUILD_SHARED_LIB)\n    # Link to the static library if only the WasmEdge static library is built.\n    # If the WasmEdge shared library is built, the plug-ins will link to the shared library.\n    set(WASMEDGE_LINK_PLUGINS_STATIC ON)\n  endif()\n  add_subdirectory(plugins)\nendif()\nadd_subdirectory(thirdparty)\nif(WASMEDGE_BUILD_TOOLS OR WASMEDGE_BUILD_FUZZING)\n  add_subdirectory(tools)\nendif()\nif(WASMEDGE_BUILD_TESTS)\n  include(CTest)\n  add_subdirectory(test)\nendif()\nif(WASMEDGE_BUILD_EXAMPLE)\n  add_subdirectory(examples/plugin/get-string)\nendif()\n\ninclude(CPack)\ninclude(CPackComponent)\n"
        },
        {
          "name": "Changelog.md",
          "type": "blob",
          "size": 117.6025390625,
          "content": "### 0.14.1 (2024-09-16)\n\nFeatures:\n\n* Supported LLVM 17.0.6.\n* Bumpped `spdlog` to `v1.13.0`.\n* Bumpped `fmt` to `11.0.2`.\n* Bumpped `simdjson` to `v3.10.0`.\n* Bumpped `googletest` to `1.15.2`.\n* [WASI-NN] ggml backend:\n  * Bump llama.cpp to b3651.\n  * Static link `libggml` and `libllama`.\n  * Refined the CMake to support multiple backends of WASI-NN with ggml backend.\n  * Supported compute single in RPC mode.\n* [WASI-NN] Added support for whisper.cpp backend.\n* [WASI-NN] Added support for piper backend.\n* [WASI-NN] Added support for ChatTTS backend.\n* [WASI-NN] Added support for Burn.rs backend.\n  * Supported `squeezenet` and `whisper` models.\n* [Plugin] Supported `wasmedge_stablediffusion` plug-in.\n  * Enabled CUBLAS.\n  * Enabled metal support on MacOS.\n* [Plugin] Moved `wasi_logging` into built-in plug-in.\n  * Instead of installing `wasi_logging` plug-in shared library, developers can find and get this plug-in after calling `WasmEdge_PluginLoadWithDefaultPaths()` API.\n  * In the WasmEdge CLI tools, the built-in plug-ins will automatically be loaded.\n* [Proposal] Initial support for instantiation phase of component model.\n  * Due to the breaking change of API, bump the plug-in `API_VERSION` to `3`.\n* [Proposal] Supported WASM Relaxed-SIMD proposal.\n  * Added the `WasmEdge_Proposal_RelaxSIMD` for the configuration in WasmEdge C API.\n  * Users can use the `--enable-relaxed-simd` to enable the proposal in `wasmedge` and `wasmedgec` tools.\n\nFixed issues:\n\n* Fixed warnings on GCC-14.\n* Fixed the `fmt` related header inclusion for error logging.\n* Fixed WASI test error in Windows.\n* Fixed version checking in source tarball.\n* Fixed version detection issue when building from source.\n* Fixed the visibility of internal symbols.\n* [Loader] Fixed alignment checking in loading immediates for memory instructions.\n* [Runtime] Fixed allocation issue when configured the limited memory page size.\n* Used `fmt::format` instead of string stream in error logging.\n\nTests:\n\n* Added WASI test suites on Windows.\n\nKnown issues:\n\n* Universal WASM format failed on macOS platforms.\n  * In the current status, the universal WASM format output of the AOT compiler with the `O1` or upper optimizations on MacOS platforms will cause a bus error during execution.\n  * We are trying to fix this issue. For a working around, please use the `--optimize=0` to set the compiler optimization level to `O0` in `wasmedgec` CLI.\n\nThank all the contributors who made this release possible!\n\nBiswapriyo Nath, Elmira, Faidon Liambotis, Fusaaaann, Han-Wen Tsao, Jun Zhang, Kefu Chai, Lîm Tsú-thuàn, Michael Morris, PeterD1524, Shen-Ta Hsieh, Shreyas Atre, Sylveon, Yi Huang, Yi-Ying He, alabulei1, dm4, grorge, hydai, junxiangMu, vincent\n\nIf you want to build from source, please use WasmEdge-0.14.1-src.tar.gz instead of the zip or tarball provided by GitHub directly.\n\n### 0.14.0 (2024-05-22)\n\nBreaking changes:\n\n* [Version]: Bump the version of the WasmEdge shared library.\n  * Due to the breaking change of API, bump the `SOVERSION` to `0.1.0`.\n  * Due to the breaking change of API, bump the plug-in `API_VERSION` to `3`.\n* [C API]: Changes for applying Typed Function References Proposal.\n  * New `WasmEdge_ValType` structure for replacing `enum WasmEdge_ValType`.\n    * Merge the `enum WasmEdge_ValType` and `enum WasmEdge_RefType` into the `enum WasmEdge_TypeCode`.\n  * Refactored the error code. The error code number may different from previous versions.\n    * Extend the error code to 2 bytes.\n  * Updated the related APIs for using `enum WasmEdge_ValType` as parameters.\n    * `WasmEdge_FunctionTypeCreate()`\n    * `WasmEdge_FunctionTypeGetParameters()`\n    * `WasmEdge_FunctionTypeGetReturns()`\n    * `WasmEdge_TableTypeCreate()`\n    * `WasmEdge_TableTypeGetRefType()`\n    * `WasmEdge_GlobalTypeCreate()`\n    * `WasmEdge_GlobalTypeGetValType()`\n  * Removed `WasmEdge_ValueGenNullRef()` API.\n  * Due to non-defaultable values after this proposal, the following APIs return the result instead of void.\n    * `WasmEdge_GlobalInstanceSetValue()`\n  * Introduced the `WasmEdge_Bytes` structure.\n    * This structure is for packaging the `uint8_t` buffers. The old `FromBuffer` related APIs will be replaced by the corresponding APIs in the future versions.\n    * `WasmEdge_CompilerCompileFromBytes()` API has the same function as `WasmEdge_CompilerCompileFromBuffer()` and will replace it in the future.\n    * `WasmEdge_LoaderParseFromBytes()` API has the same function as `WasmEdge_LoaderParseFromBuffer()` and will replace it in the future.\n    * `WasmEdge_VMRegisterModuleFromBytes()` API has the same function as `WasmEdge_VMRegisterModuleFromBuffer()` and will replace it in the future.\n    * `WasmEdge_VMRunWasmFromBytes()` API has the same function as `WasmEdge_VMRunWasmFromBuffer()` and will replace it in the future.\n    * `WasmEdge_VMAsyncRunWasmFromBytes()` API has the same function as `WasmEdge_VMAsyncRunWasmFromBuffer()` and will replace it in the future.\n    * `WasmEdge_VMLoadWasmFromBytes()` API has the same function as `WasmEdge_VMLoadWasmFromBuffer()` and will replace it in the future.\n  * New APIs for WASM Exception-Handling proposal.\n    * Added the `WasmEdge_TagTypeContext` struct.\n    * Added the `WasmEdge_TagInstanceContext` struct.\n    * Added the `WasmEdge_TagTypeGetFunctionType()` API for retrieving the function type from a tag type.\n    * Added the `WasmEdge_ImportTypeGetTagType()` API for retrieving the tag type from an import type.\n    * Added the `WasmEdge_ExportTypeGetTagType()` API for retrieving the tag type from an export type.\n    * Added the `WasmEdge_ModuleInstanceFindTag()` API for finding an exported tag instance from a module instance.\n    * Added the `WasmEdge_ModuleInstanceListTagLength()` and `WasmEdge_ModuleInstanceListTag()` APIs for listing the exported tag instances of a module instance.\n* Refactored the `OpCode` mechanism for speeding up and supporting WASM multi-bytes instruction OpCodes.\n\nFeatures:\n\n* Bumpped `spdlog` to `v1.13.0`.\n* Bumpped `simdjson` to `v3.9.1`.\n* [Proposal]: Apply new propoals.\n  * Supported WASM Typed Function References proposal.\n    * Added the `WasmEdge_Proposal_FunctionReferences` for the configuration in WasmEdge C API.\n    * Users can use the `--enable-function-reference` to enable the proposal in `wasmedge` and `wasmedgec` tools.\n  * Supported WASM GC proposal (interpreter only).\n    * Added the `WasmEdge_Proposal_GC` for the configuration in WasmEdge C API.\n    * Users can use the `--enable-gc` to enable the proposal in `wasmedge` and `wasmedgec` tools.\n  * Supported WASM Exception-Handling proposal (interpreter only).\n    * Added the `WasmEdge_Proposal_ExceptionHandling` for the configuration in WasmEdge C API.\n    * Users can use the `--enable-exception-handling` to enable the proposal in `wasmedge` and `wasmedgec` tools.\n    * This proposal supports old deprecated `try`, `catch`, and `catch_all` instructions, and will remove them in the future version.\n  * Component Model proposal (experimental, loader phase only).\n    * Added the `WasmEdge_Proposal_Component` for the configuration in WasmEdge C API.\n    * Users can use the `--enable-component` to enable the proposal in `wasmedge` tool.\n* [JIT]: Support LLVM JIT.\n* [C API]: New C API for supporting the new proposals.\n  * `WasmEdge_ValType` related APIs can help developers to generate or compare value types.\n    * `WasmEdge_ValTypeGenI32()` (replacing `WasmEdge_ValType_I32`)\n    * `WasmEdge_ValTypeGenI64()` (replacing `WasmEdge_ValType_I64`)\n    * `WasmEdge_ValTypeGenF32()` (replacing `WasmEdge_ValType_F32`)\n    * `WasmEdge_ValTypeGenF64()` (replacing `WasmEdge_ValType_F64`)\n    * `WasmEdge_ValTypeGenV128()` (replacing `WasmEdge_ValType_V128`)\n    * `WasmEdge_ValTypeGenFuncRef()` (replacing `WasmEdge_ValType_FuncRef`)\n    * `WasmEdge_ValTypeGenExternRef()` (replacing `WasmEdge_ValType_ExternRef`)\n    * `WasmEdge_ValTypeIsEqual()`\n    * `WasmEdge_ValTypeIsI32()`\n    * `WasmEdge_ValTypeIsI64()`\n    * `WasmEdge_ValTypeIsF32()`\n    * `WasmEdge_ValTypeIsF64()`\n    * `WasmEdge_ValTypeIsV128()`\n    * `WasmEdge_ValTypeIsFuncRef()`\n    * `WasmEdge_ValTypeIsExternRef()`\n    * `WasmEdge_ValTypeIsRef()`\n    * `WasmEdge_ValTypeIsRefNull()`\n  * `WasmEdge_Bytes` related APIs can help developers to control the buffers.\n    * `WasmEdge_BytesCreate()`\n    * `WasmEdge_BytesWrap()`\n    * `WasmEdge_BytesDelete()`\n  * `WasmEdge_TableInstanceCreateWithInit()` to create a table instance with non-defaultable elements with assigning the initial value.\n* [Serializer]: Supported WASM module serialization (experimental).\n  * This is the API-level feature. Developers can use the `WasmEdge_LoaderSerializeASTModule()` API to serialize a loaded WASM module into bytes.\n* [Tools]: Print the plug-in versions when using the `--version` option.\n* [Installer]: Enabled `ggml-blas` and `rustls` plugin supporting (#3032) (#3108).\n* [WASI-NN] ggml backend:\n  * Bump llama.cpp to b2963.\n  * Support llama.cpp options:\n    * `threads`: the thread number for inference.\n    * `temp`: set temperature for inference.\n    * `repeat-penalty`: set repeat penalty for inference.\n    * `top-p`: set top-p for inference.\n    * `grammar`: set grammar syntax for inference.\n    * `main-gpu`: set the main GPU for inference.\n    * `tensor-split`: set the tensor split for inference.\n  * Add `enable-debug-log` option to show more debug information.\n  * Default enable Metal on macOS.\n  * Introduce `load_by_name_with_config()` to load model with metadata.\n  * Introduce single token inference by `compute_single`, `get_output_single`, and `fini_single`\n  * Introduce `unload()` function to release the model.\n  * Add some llama errors to WASI-NN.\n    * `EndOfSequence`: returned when encounter `<EOS>` token on single token inferece.\n    * `ContextFull`: returned when the context is full.\n    * `PromptTooLong`: returned when the input size is too large.\n    * `ModelNotFound`: returned when the model is not found.\n  * Support Llava and Gemma inference.\n    * Add `mmproj` option to set the projection model.\n    * Add `image` option to set the image.\n  * Improve logging mechanism.\n  * Show the version of `llama.cpp` in the metadata.\n  * Support Phi-3-Mini model.\n  * Support embedding generation.\n  * Support Windows build.\n* [Plugin] Initial support for `wasmedge_ffmpeg` plug-in.\n* [Plugin] Updated `wasi-logging` plug-in for supporting logging into file.\n\nFixed issues:\n\n* Fixed some API document in the API header.\n* [Executor]: Minor fixes.\n  * Fixed integer overflow on `memGrow` boundary check.\n  * Refined the slice copy in table instances.\n  * Cleaned the unused bits of WASM return values to avoid security issues.\n* [WASI]: Minor fixes.\n  * Fixed the function signature matching for WASI imports when backwarding supporting older version. (#3073)\n  * Fixed large timestamp causing overflow (#3106).\n  * Handle HUP only events.\n  * Checking same file descriptor for `fd_renumber` (#3040).\n  * Fixed `path_unlink_file` for trailing slash path.\n  * Fixed `path_readlink` for not following symbolic link issue.\n  * Fixed `path_open` for checking `O_TRUNC` rights.\n  * Fixed `path_open` for removing path relative rights on file.\n  * Fixed `fd_allocate` return error value.\n  * Checking `path_symlink` for creating a symlink to an absolute path.\n  * Checking `fd_prestat_dir_name` buffer size.\n  * Checking `filestat_set_times` for invalid flags.\n  * Checking validation of file descriptor in `socket_accept` (#3041).\n* Fixed duplicated loading of the same plug-in.\n* Fixed option toggle for `wasmedge_process` plug-in.\n* Fixed the plug-in searching path on Windows.\n\nTests:\n\n* Updated the WASM spec tests to the date 2024/02/17.\n* Updated the spec tests for the Exception Handling proposal.\n* Added the spec tests for the Typed Function Reference proposal.\n* Added the spec tests for the GC proposal.\n\nKnown issues:\n\n* Universal WASM format failed on macOS platforms.\n  * In the current status, the universal WASM format output of the AOT compiler with the `O1` or upper optimizations on MacOS platforms will cause a bus error during execution.\n  * We are trying to fix this issue. For a working around, please use the `--optimize=0` to set the compiler optimization level to `O0` in `wasmedgec` CLI.\n\nThank all the contributors who made this release possible!\n\nAbhinandan Udupa, Akihiro Suda, Charlie chan, Dhruv Jain, Draco, Harry Chiang, Hrushikesh, Ikko Eltociear Ashimine, Khagan (Khan) Karimov, LFsWang, LO, CHIN-HAO, Little Willy, Lîm Tsú-thuàn, Meenu Yadav, Omkar Acharekar, Saiyam Pathak, Sarrah Bastawala, Shen-Ta Hsieh, Shreyas Atre, Sylveon, Yage Hu, Yi Huang, Yi-Ying He, alabulei1, am009, dm4, hetvishastri, hugo-syn, hydai, redismongo, richzw, tannal, vincent, zhumeme\n\nIf you want to build from source, please use WasmEdge-0.14.0-src.tar.gz instead of the zip or tarball provided by GitHub directly.\n\n### 0.13.5 (2023-11-03)\n\nFeatures:\n\n* [Component] share loading entry for component and module (#2945)\n  * Initial support for the component model proposal.\n  * This PR allows WasmEdge to recognize the component and module format.\n* [WASI-NN] ggml backend:\n  * Provide options for enabling OpenBLAS, Metal, and cuBLAS.\n  * Bump llama.cpp to b1383\n  * Build thirdparty/ggml only when the ggml backend is enabled.\n  * Enable the ggml plugin on the macOS platform.\n  * Introduce `AUTO` detection. Wasm application will no longer need to specify the hardware spec (e.g., CPU or GPU). It will auto-detect by the runtime.\n  * Unified the preload options with case-insensitive matching\n  * Introduce `metadata` for setting the ggml options.\n    * The following options are supported:\n      * `enable-log`: `true` to enable logging. (default: `false`)\n      * `stream-stdout`: `true` to print the inferred tokens in the streaming mode to standard output. (default: `false`)\n      * `ctx-size`: Set the context size the same as the `--ctx-size` parameter in llama.cpp. (default: `512`)\n      * `n-predict`: Set the number of tokens to predict, the same as the `--n-predict` parameter in llama.cpp. (default: `512`)\n      * `n-gpu-layers`: Set the number of layers to store in VRAM, the same as the `--n-gpu-layers` parameter in llama.cpp. (default: `0`)\n      * `reverse-prompt`: Set the token pattern at which you want to halt the generation. Similar to the `--reverse-prompt` parameter in llama.cpp. (default: `\"\"`)\n      * `batch-size`: Set the number of batch sizes for prompt processing, the same as the `--batch-size` parameter in llama.cpp. (default: `512`)\n  * Notice: Because of the limitation of the WASI-NN proposal, there is no way to set the metadata during the loading process. The current workaround will re-load the model when `n_gpu_layers` is set to a non-zero value.\n  * Installer: Support WASI-NN ggml plugin on both macOS Intel model (CPU only) and macOS Apple Silicon model. (#2882)\n* [Java Bindings] provide platform-specific jni and jar for Java bindings (#2980)\n* [C API]:\n  * Provide getData API for FunctionInstance (#2937)\n  * Add the API to set WASI-NN preloads. (#2827)\n* [Plugin]:\n  * [zlib]:\n    * initial support of the zlib plugin (#2562)\n    * With a simple building guide and basic working examples\n* [MSVC] Support MSVC for building WasmEdge\n* [AOT] Support LLVM 17\n\nFixed issues:\n\n* [Installer]: Double quote the strings to prevent splitting in env file (#2994)\n* [AOT]:\n  * Validate AOT section header fields\n  * Add invariant attribute for memory and global pointer\n* [C API]:\n  * Fix the wrong logic of getting types from exports.\n* [Example] Fix get-string with the latest C++ internal getSpan API. Fixes #2887 (#2929)\n* [CI] install llvm@16 to fix macOS build (#2878)\n\nMisc:\n\n* [Example] Update wit-bindgen version from 0.7.0 to 0.11.0 (#2770)\n\nThank all the contributors who made this release possible!\n\ndm4, hydai, Lîm Tsú-thuàn, Meenu Yadav, michael1017, proohit, Saikat Dey, Shen-Ta Hsieh, Shreyas Atre, Wang Jikai, Wck-iipi, YiYing He\n\nIf you want to build from source, please use WasmEdge-0.13.5-src.tar.gz instead of the zip or tarball provided by GitHub directly.\n\n### 0.13.4 (2023-09-05)\n\nFeatures:\n\n* [C API] Provide API for registering the Pre- and Post- host functions\n  * Pre host function will be triggered before calling every host function\n  * Post host function will be triggered after calling every host function\n* [CI] Update llvm-windows from 13.0.3 to 16.0.6\n  * WasmEdge supports multiple LLVM version, users can choose whatever they want.\n  * This change is for CI.\n* [CI] build alpine static libraries (#2699)\n  * This provides pre-built static libraries using musl-libc on alpine.\n* [Plugin] add wasmedge\\_rustls\\_plugin (#2762)\n* [Plugin] implement opencvmini `rectangle` and `cvtColor` (#2705)\n* [Test] Migrating spec test from RapidJSON to SIMDJSON (#2659)\n* [WASI Socket] AF\\_UNIX Support (#2216)\n  * This is disable by default.\n  * How to enable this feature:\n    * CLI: Use `--allow-af-unix`.\n    * C API: Use `WasmEdge\\_ConfigureSetAllowAFUNIX`.\n* [WASI-NN] Add ggml backend for llama (#2763)\n  * Integrate llama.cpp as a new WASI-NN backend.\n* [WASI-NN] Add load\\_by\\_name implementation into wasi-nn plugin (#2742)\n  * Support named\\_model feature.\n* [WASI-NN] Added support for Tuple Type Output Tensors in Pytorch Backend (#2564)\n\nFixed issues:\n\n* [AOT] Fix fallback case of `compileVectorExtAddPairwise`. (#2736)\n* [AOT] Fix the neontbl1 codegen error on macOS (#2738)\n* [Runtime] fix memory.init oob. issue #2743  (#2758)\n* [Runtime] fix table.init oob. issue #2744 (#2756)\n* [System] Remove \"inline\" from Fault::emitFault (#2695) (#2720)\n* [Test] Use std::filesystem::u8path instead of a `const char*` Path (#2706)\n* [Utils] Installer: Fix checking of shell paths (#2752)\n* [Utils] Installer: Formatting and Better source message (#2721)\n* [WASI] Avoid undefined function `FindHolderBase::reset`\n* [WASI] itimerspec with 0 timeout will disarm timer, +1 to workaround (#2730)\n\nThank all the contributors that made this release possible!\n\nAdithya Krishna, Divyanshu Gupta, Faidon Liambotis, Jorge Prendes, LFsWang, Lev Veyde, Lîm Tsú-thuàn, Sarrah Bastawala, Shen-Ta Hsieh, Shreyas Atre, Vedant R. Nimje, Yi-Ying He, alabulei1, am009, dm4, erxiaozhou, hydai, vincent, zzz\n\nIf you want to build from source, please use WasmEdge-0.13.4-src.tar.gz instead of the zip or tarball provided by GitHub directly.\n\n### 0.13.3 (2023-07-25)\n\nThis is a bugfix release.\n\nFeatures:\n\n* [CMake] Add a flag to disable libtinfo (#2676)\n* [Plugin] Implement OpenCV-mini (#2648)\n* [CI] Build wasmedge on Nix (#2674)\n\nFixed issues:\n\n* WASI Socket: Remove unused fds before closing them. (#2675), part of #2662\n\nKnown issues:\n\n* Universal WASM format failed on macOS platforms.\n  * In the current status, the universal WASM format output of the AOT compiler with the `O1` or upper optimizations on MacOS platforms will cause a bus error during execution.\n  * We are trying to fix this issue. For a working around, please use the `--optimize=0` to set the compiler optimization level to `O0` in `wasmedgec` CLI.\n* WasmEdge CLI failed on Windows 10 issue.\n  * Please refer to [here for the workaround](https://github.com/WasmEdge/WasmEdge/issues/1559) if the `msvcp140.dll is missing` occurs.\n\nThank all the contributors that made this release possible!\n\nLîm Tsú-thuàn, Tricster, Tyler Rockwood\n\nIf you want to build from source, please use WasmEdge-0.13.3-src.tar.gz instead of the zip or tarball provided by GitHub directly.\n\n### 0.13.2 (2023-07-21)\n\nThis is a bugfix release.\n\nFeatures:\n\n* Provide static library on `x86_64` and `aarch64` Linux (#2666)\n* Provide `wasm_bpf` plugins in the release assets (#2610)\n* WASI-NN: Updating install script for OpenVino 2023.0.0 version (#2636)\n* Installer: Add new tags support for wasmedge-tensorflow (#2608)\n* Fuss: Use own implement of `BoyerMooreHorspoolSearcher` (#2657)\n\nFixed issues:\n\n* WASI Socket: Fix blocking when multiple requests have the same fds. (#2662)\n* Utils: devtoolset-11 is not available on manylinux2014 aarch64, downgrade to devtoolset-10 (#2663)\n\nKnown issues:\n\n* Universal WASM format failed on macOS platforms.\n  * In the current status, the universal WASM format output of the AOT compiler with the `O1` or upper optimizations on MacOS platforms will cause a bus error during execution.\n  * We are trying to fix this issue. For a working around, please use the `--optimize=0` to set the compiler optimization level to `O0` in `wasmedgec` CLI.\n* WasmEdge CLI failed on Windows 10 issue.\n  * Please refer to [here for the workaround](https://github.com/WasmEdge/WasmEdge/issues/1559) if the `msvcp140.dll is missing` occurs.\n\nThank all the contributors that made this release possible!\n\nDivyanshu Gupta, Faidon Liambotis, hydai, Jorge Prendes, Officeyutong, Shen-Ta Hsieh, Shreyas Atre, Tricster, YiYing He\n\nIf you want to build from source, please use WasmEdge-0.13.2-src.tar.gz instead of the zip or tarball provided by GitHub directly.\n\n### 0.13.1 (2023-07-06)\n\nThis is a bugfix release.\n\nFixed issues:\n\n* Rollback the WasmEdge WASI Socket behavior of V1 functions.\n  * Related functions: `getlocaladdr`, and `getpeeraddr`\n  * Reason:\n    * The address type should be INET4(0) and INET6(1).\n    * This regrasion is introduced in [#2557](https://github.com/WasmEdge/WasmEdge/pull/2557).\n    * However, the original values of the previous version (< 0.13.0): INET4(4) and INET6(6).\n    * To avoid this incompatible behavior, we choose to keep the old behavior.\n\nKnown issues:\n\n* Universal WASM format failed on macOS platforms.\n  * In the current status, the universal WASM format output of the AOT compiler with the `O1` or upper optimizations on MacOS platforms will cause a bus error during execution.\n  * We are trying to fix this issue. For a working around, please use the `--optimize=0` to set the compiler optimization level to `O0` in `wasmedgec` CLI.\n* WasmEdge CLI failed on Windows 10 issue.\n  * Please refer to [here for the workaround](https://github.com/WasmEdge/WasmEdge/issues/1559) if the `msvcp140.dll is missing` occurs.\n\nThank all the contributors that made this release possible!\n\nIf you want to build from source, please use WasmEdge-0.13.1-src.tar.gz instead of the zip or tarball provided by GitHub directly.\n\n### 0.13.0 (2023-06-30)\n\nFeatures:\n\n* Updated the WasmEdge shared library.\n  * Due to the breaking change of API, bump the `SOVERSION` to `0.0.3`.\n* Unified the `wasmedge` CLI tool.\n  * Supported the subcommand `run` and `compile` for the `wasmedge` CLI.\n  * Users now can use the command `wasmedge run [ARGS]` to drive the original `wasmedge` tool.\n  * Users now can use the command `wasmedge compile [ARGS]` to drive the original `wasmedgec` AOT compiler tool.\n* Made WasmEdge on `armv7l` great again.\n* Bumpped `spdlog` to `v1.11.0`.\n  * Refactored the logs to use the `fmt` for formatting.\n* Bumpped `blake3` to `1.3.3`.\n* Added the CMake option `WASMEDGE_ENABLE_UB_SANITIZER` to enable the undefined behavior sanitizer.\n* Deprecated the `wasmedge_httpsreq` plug-in.\n* Migrated the WasmEdge extensions into plug-ins.\n  * Migrated the [WasmEdge-image](https://github.com/second-state/WasmEdge-image) into the `wasmedge_image` plug-in.\n  * Migrated the [WasmEdge-tensorflow](https://github.com/second-state/WasmEdge-tensorflow) into the `wasmedge_tensorflow` and `wasmedge_tensorflowlite` plug-ins.\n  * Supported `manylinux2014_x86_64`, `manylinux2014_aarch64`, `darwin_x86_64`, and `darwin_arm64` platforms for the above plug-ins.\n* Introduced the `wasi_logging` plug-in.\n* Added GPU support for WASI-NN PyTorch backend.\n* New APIs for containing data into module instances when in creation.\n  * Added the `WasmEdge_ModuleInstanceCreateWithData()` API for creating a module instance with data and its finalizer callback function pointer.\n  * Added the `WasmEdge_ModuleInstanceGetHostData()` API for accessing the host data set into the module instance.\n* Supported the async invocation with executor.\n  * Added the `WasmEdge_ExecutorAsyncInvoke()` API for invoking a WASM function asynchronously.\n* Added helper functions for Windows CLI.\n  * Added the `WasmEdge_Driver_ArgvCreate()` and `WasmEdge_Driver_ArgvDelete()` APIs to convert UTF-16 arguments to UTF-8.\n  * Added the `WasmEdge_Driver_SetConsoleOutputCPtoUTF8()` API to set the output code page to UTF-8.\n* Added the unified tool API.\n  * Added the `WasmEdge_Driver_UniTool()` API to trigger the WasmEdge CLI tool with command line arguments.\n\nFixed issues:\n\n* Fixed the WasmEdge C API static library linking command for `llvm-ar-14`.\n* Fixed the undefined behavior issues in Loader and Validator.\n* Fixed the WASI issues.\n  * Denied the absolute path accessing.\n  * Opened directories with `__WASI_OFLAGS_DIRECTORY` flag.\n  * Don't use `O_PATH` unless flag is exactly `__WASI_OFLAGS_DIRECTORY`.\n  * Removed seeking rights on directories.\n  * Fixed checking wrong rights in `path_open`.\n  * Allowed renumbering and closing preopened `fd`.\n  * Disallowed accessing parent directory through `..`.\n  * Don't write null pointer at end of args/envs pointer array.\n  * Don't write first entry when buffer size is zero.\n  * Removed unused VFS objects.\n  * Fixed the `fd_readdir`.\n  * Corrected the readonly inheriting right.\n* Fixed plug-in issues.\n  * Fixed the error enumeration in WASI-NN.\n  * Fixed the error messages of tensor type in WASI-NN Tensorflow-Lite backend.\n  * Handled the model data ownership in WASI-NN Tensorflow-Lite backend.\n  * Returned error with the following cases in WASI-Crypto, because OpenSSL 3.0 didn't implement context duplication for `aes-gcm` and `chacha20`.\n\nRefactor:\n\n* Moved the Windows API definitions to `include/system/winapi.h`.\n* Dropped the `boost` dependency.\n  * Replaced the `boost` endian detection by the macros.\n  * Used the `std::boyer_moore_horspool_searcher` instead.\n* Refactored the functions for accessing slides on memory instances.\n* Moved the `WasmEdge::VM::Async` class to the `include/common` for supporting async invocation in executor.\n* Refactored the WASI host functions.\n  * Removed duplicate codes on `poll_oneoff` with `edge-trigger` configuration.\n  * Refactored Poller interface for reusing the same objects.\n  * Supported absolute time flags for `poll_oneoff` on MacOS.\n  * Used static vector to speedup CI.\n  * Refactored the internal APIs of wasi-socket.\n* Refactored the WASI-NN plug-in source.\n  * Refined the WASI-NN dependency linking in CMake.\n  * Separated the source files for different backends.\n\nDocumentations:\n\n* Moved and published the WasmEdge document to <https://wasmedge.org/docs/>.\n* Removed all WASM binary files in the source tree.\n\nTests:\n\n* Updated the WASM spec tests to the date 2023/05/11.\n* Added the plug-in unit tests and CI for Linux and MacOS platforms.\n* Added new test cases of `cxx20::expected`.\n\nKnown issues:\n\n* Universal WASM format failed on macOS platforms.\n  * In the current status, the universal WASM format output of the AOT compiler with the `O1` or upper optimizations on MacOS platforms will cause a bus error during execution.\n  * We are trying to fix this issue. For a working around, please use the `--optimize=0` to set the compiler optimization level to `O0` in `wasmedgec` CLI.\n* WasmEdge CLI failed on Windows 10 issue.\n  * Please refer to [here for the workaround](https://github.com/WasmEdge/WasmEdge/issues/1559) if the `msvcp140.dll is missing` occurs.\n\nThank all the contributors that made this release possible!\n\nAdithya Krishna, Chris O'Hara, Edward Chen, Louis Tu, Lîm Tsú-thuàn, Maurizio Pillitu, Officeyutong, Shen-Ta Hsieh, Shreyas Atre, Tricster, Tyler Rockwood, Xin Liu, YiYing He, Yu Xingzi, alabulei1, hydai, michael1017, vincent, yanghaku\n\nIf you want to build from source, please use WasmEdge-0.13.0-src.tar.gz instead of the zip or tarball provided by GitHub directly.\n\n### 0.12.1 (2023-05-12)\n\nThis is a hotfix release.\n\nFixed issues:\n\n* WASI:\n  * fix rights of pre-open fd cannot write and fix read-only flag parse (#2458)\n* WASI Socket:\n  * Workaround: reduce the address family size for the old API\n  * fix sock opt & add BINDTODEVICE (#2454)\n* MacOS\n  * Use OpenSSL 3.0 on MacOS when building the plugins.\n  * Update the visibility of plugin functions.\n  * Fix AOT Error on MacOS; fix #2427\n    * Change enumerate attributes value to zero\n    * Change import helper function to private linkage to hide symbols\n    * Detect OS version\n  * Fix building with statically linked LLVM-15 on MacOS.\n  * cmake: quote WASMEDGE_LLVM_LINK_LIBS_NAME variable in order to fix arm64-osx AOT build (#2443)\n* Windows:\n  * Fix missing msvcp140.dll issue (#2455)\n  * Revert #2455 temporarily. Use `CMAKE_MSVC_RUNTIME_LIBRARY` instead of `MSVC_RUNTIME_LIBRARY`.\n* Rust Binding:\n  * Introduce `fiber-for-wasmedge` (#2468). The Rust binding relies on fiber for some features. Because the runwasi project supports both wasmtime and wasmedge, the wasmtime-fiber with different versions will make the compilation complex. To avoid this, we forked wasmtime-fiber as fiber-for-wasmedge.\n  * Add a second phase mechanism to load plugins after the VM has already been built. (#2469)\n* Documents:\n  * Fix the naming of the AOT wasm file.\n  * Add wasmedgec use cases for a slim container.\n  * Add the Kwasm document.\n  * Fix HostFunction with data example (#2441)\n\nKnown issues:\n\n* Universal WASM format failed on macOS platforms.\n  * In the current status, the universal WASM format output of the AOT compiler with the `O1` or upper optimizations on MacOS platforms will cause a bus error during execution.\n  * We are trying to fix this issue. For a working around, please use the `--optimize=0` to set the compiler optimization level to `O0` in `wasmedgec` CLI.\n* WasmEdge CLI failed on Windows 10 issue.\n  * Please refer to [here for the workaround](https://github.com/WasmEdge/WasmEdge/issues/1559) if the `msvcp140.dll is missing` occurs.\n\nThank all the contributors that made this release possible!\n\nLeonid Pospelov, Shen-Ta Hsieh, Tyler Rockwood, Xin Liu, YiYing He, dm4, hydai, vincent, yanghaku, zzz\n\nIf you want to build from source, please use WasmEdge-0.12.1-src.tar.gz instead of the zip or tarball provided by GitHub directly.\n\n### 0.12.0 (2023-04-24)\n\nBreaking changes:\n\n* Updated the WasmEdge shared library.\n  * Due to the breaking change of API, bump the `SOVERSION` to `0.0.2`.\n* WasmEdge C API changes.\n  * Removed the `WasmEdge_HostRegistration` members and the corresponding module creation APIs to standardize the plug-in module creation.\n    * Please refer to the [documentation](https://wasmedge.org/book/en/sdk/c/0.11.2/upgrade_to_0.12.0.html) for how to upgrade.\n    * Removed the `WasmEdge_HostRegistration_WasiNN` enum and the `WasmEdge_ModuleInstanceCreateWasiNN()` API.\n    * Removed the `WasmEdge_HostRegistration_WasiCrypto_Common` enum and the `WasmEdge_ModuleInstanceCreateWasiCryptoCommon()` API.\n    * Removed the `WasmEdge_HostRegistration_WasiCrypto_AsymmetricCommon` enum and the `WasmEdge_ModuleInstanceCreateWasiCryptoAsymmetricCommon()` API.\n    * Removed the `WasmEdge_HostRegistration_WasiCrypto_Kx` enum and the `WasmEdge_ModuleInstanceCreateWasiCryptoKx()` API.\n    * Removed the `WasmEdge_HostRegistration_WasiCrypto_Signatures` enum and the `WasmEdge_ModuleInstanceCreateWasiCryptoSignatures()` API.\n    * Removed the `WasmEdge_HostRegistration_WasiCrypto_Symmetric` enum and the `WasmEdge_ModuleInstanceCreateWasiCryptoSymmetric()` API.\n    * Removed the `WasmEdge_HostRegistration_WasmEdge_Process` enum and the `WasmEdge_ModuleInstanceCreateWasmEdgeProcess()` API.\n* Changed the `WasmEdge_VMCleanup()` behavior.\n  * After calling this API, the registered modules except the WASI and plug-ins will all be cleaned.\n* Standaloned the `WasmEdge-Process` plug-in.\n  * After this version, users should use the installer to install the `WasmEdge-Process` plug-in.\n\nFeatures:\n\n* Introduced the `Plugin` context and related APIs.\n  * Added the `WasmEdge_PluginContext` struct.\n  * Added the `WasmEdge_PluginLoadFromPath()` API for loading a plug-in from a specific path.\n  * Added the `WasmEdge_PluginListPluginsLength()` and `WasmEdge_PluginListPlugins()` APIs for getting the loaded plug-in names.\n  * Added the `WasmEdge_PluginFind()` API for retrieving a loaded plug-in by its name.\n  * Added the `WasmEdge_PluginGetPluginName()` API for retrieving the plug-in name.\n  * Added the `WasmEdge_PluginListModuleLength()` and `WasmEdge_PluginListModule()` APIs for listing the module names of a plug-in.\n  * Added the `WasmEdge_PluginCreateModule()` API for creating the specific module instance in a plug-in by its name.\n* Introduced the multiple WASI socket API implementation.\n  * The `sock_accept()` is compatible with the WASI spec.\n  * The V2 socket implementation is using a larger socket address data structures. With this, we can start to supporting `AF_UINX`\n* Added the `VM` APIs.\n  * Added the `WasmEdge_VMGetRegisteredModule()` API for retrieving a registered module by its name.\n  * Added the `WasmEdge_VMListRegisteredModuleLength()` and `WasmEdge_VMListRegisteredModule()` APIs for listing the registered module names.\n* Introduced the python version WasmEdge installer.\n* Added the `wasm_bpf` plug-in.\n* Enabled the read-only WASI filesystem.\n  * Users can add the `--dir guest_path:host_path:readonly` option in WasmEdge CLI to assign the read-only configuration.\n* Updated the ABI of the `wasi_ephemeral_sock`.\n  * Added the output port of the `sock_recv_from`.\n  * Updated the API of `sock_getlocaladdr`.\n  * Unified the socket address size to 128-bit.\n* Allowed the multiple VM instances.\n* Supported using `libtool` to archive the WasmEdge static library.\n* Supported LLVM 15.0.7.\n\nFixed issues:\n\n* Fixed WASI issues.\n  * Fixed the leaking information about the host STDIN, STDOUT, and STDERR after getting the `filestat`.\n  * Fixed the lookup of symbolic link at `path_filestat_set_times`.\n  * Fixed `open` for the wchar path issue on windows.\n  * Fixed the rights of `path_open`.\n* Fixed WASI-NN issues.\n  * Fixed the definition of `wasi_nn::TensorType` to prevent from comparing with dirty data.\n* Fixed WASI-Crypto issues.\n  * Fixed the `keypair_generate` for rsa-pss.\n  * Fixed the `keypair_import` read pem as pkcs8.\n* Fixed WASI-Socket issues.\n  * Fixed the buffer size of `sock_getpeeraddr`.\n* Fixed the lost intrinsics table in AOT mode when using the WasmEdge C API.\n* Fixed the registration failed of WasmEdge plug-in through the C API.\n* Fixed the implementation in `threads` proposal.\n  * Fixed the error in `atomic.notify` and `atomic.wait` instructions.\n  * Fixed the decoding of `atomic.fence` instruction.\n  * Corrected the error message of waiting on unshared memory.\n* Handle canonical and arithmetical `NaN` in `runMaxOp()` and `runMinOp()`.\n\nRefactor:\n\n* Refactored the implementation of number loading in the file manager.\n  * Supported `s33` and `sn` loading and decoding.\n* Refactored the `WasmEdge::ValType`.\n  * Removed the `WasmEdge::ValType::None`.\n  * Used the flag in `WasmEdge::BlockType` for supporting the type index.\n  * Removed the `WasmEdge::Validator::VType` and used the `WasmEdge::ValType` instead.\n\nKnown issues:\n\n* Universal WASM format failed on MacOS platforms.\n  * In current status, the universal WASM format output of the AOT compiler with the `O1` or upper optimizations on MacOS platforms will cause bus error when execution.\n  * We are trying to fix this issue. For working around, please use the `--optimize=0` to set the compiler optimization level to `O0` in `wasmedgec` CLI.\n* WasmEdge CLI failed on Windows 10 issue.\n  * Please refer to [here for the workaround](https://github.com/WasmEdge/WasmEdge/issues/1559) if the `msvcp140.dll is missing` occurs.\n* Plug-in linking on MacOS platforms.\n  * The plug-in on MacOS platforms will cause symbol not found when dynamic linking.\n  * We are trying to fix this issue. For working around, please implement the host modules instead of plug-ins.\n\nDocumentations:\n\n* Fixed various typos.\n* Updated the C API documents.\n* Added the [WasmEdge installer guide](https://wasmedge.org/book/en/contribute/installer.html).\n* Updated the [Android NDK example](https://wasmedge.org/book/en/contribute/build_from_src/android/ndk.html).\n* Added the [static library linking guide](https://wasmedge.org/book/en/sdk/c/library.html#link-with-wasmedge-static-library).\n* Added the [WasmEdge plug-in implementation guide](https://wasmedge.org/book/en/develop_plugin/c.html).\n\nTests:\n\n* Updated the WASM spec tests to the date 2022/12/15.\n* Added the plug-in unit tests on Linux platforms.\n\nThank all the contributors that made this release possible!\n\nAbhinandan Udupa, Achille, Afshan Ahmed Khan, Daniel Golding, DarumaDocker, Draco, Harry Chiang, Justin Echternach, Kenvi Zhu, LFsWang, Leonid Pospelov, Lîm Tsú-thuàn, MediosZ, O3Ol, Officeyutong, Puelloc, Rafael Fernández López, Shen-Ta Hsieh, Shreyas Atre, Sylveon, Tatsuyuki Kobayashi, Vishv Salvi, Xin Liu, Xiongsheng Wang, YiYing He, alabulei1, dm4, hydai, jeongkyu, little-willy, michael1017, shun murakami, xxchan, 云微\n\nIf you want to build from source, please use WasmEdge-0.12.0-src.tar.gz instead of the zip or tarball provided by GitHub directly.\n\n### 0.11.2 (2022-11-03)\n\nFeatures:\n\n* Added the new WasmEdge C API.\n  * Added the `WasmEdge_ConfigureSetForceInterpreter()` API to set the force interpreter mode.\n  * Added the `WasmEdge_ConfigureIsForceInterpreter()` API to check the force interpreter mode in configurations.\n  * Added the `WasmEdge_LogOff()` API to turn off the logging.\n  * Due to introducing the new APIs, bump the `SOVERSION` to `0.0.1`.\n* Added the additional hint messages if import not found when in instantiation.\n* Added the forcibly interpreter execution mode in WasmEdge CLI.\n  * Users can use the `--force-interpreter` option in the `wasmedge` tool to forcibly execute WASM files (includes the AOT compiled WASM files) in interpreter mode.\n* Supported WASI-NN plug-in with TensorFlow-Lite backend on Ubuntu 20.04 x86_64.\n  * Users can refer to the [WASI-NN document](https://wasmedge.org/book/en/write_wasm/rust/wasinn.html) for the information.\n  * For building with enabling WASI-NN with TensorFlow-Lite backend, please add the `-DWASMEDGE_PLUGIN_WASI_NN_BACKEND=\"TensorFlowLite\"` in `cmake`.\n* Bump the `fmt` format of logging to `9.0.0`.\n* Added the new experimental edge-triggered epoll API `epollOneoff` in the WASI component.\n\nFixed issues:\n\n* Detected the valid `_start` function of the WasmEdge CLI command mode.\n  * For the invalid `_start` function, the WasmEdge CLI will execute that function in the reactor mode.\n* Fixed the non-English WasmEdge CLI arguments error on Windows.\n* Fixed the AOT compiler issues.\n  * Fixed the operand of `frintn` on `arm64` platforms.\n  * Corrected the `unreachable` status to record on every control stacks.\n* Refined the Loader performance.\n  * Capped the maximum local counts to 67108864 (2^26).\n  * Rejected wrong data when loading the universal WASM.\n  * Rejected the unreasonable long vector sizes.\n* Fixed the lost `std` namespace in the `experimental::expected`.\n* Fixed the repeatedly compilation of universal WASM format.\n  * If users use the `wasmedgec` tool to compile the universal WASM file, the AOT compiled WASM data will be appended into the output.\n  * In the cases of duplicated AOT compiled universal WASM file which has more than 1 section of AOT compiled WASM data, the WasmEdge runtime will use the latest appended one when execution.\n* Hidden the local symbols of the WasmEdge shared library.\n* Loaded the default plug-in path from the path related to the WasmEdge shared library.\n  * This only fixed on the MacOS and Linux platforms now.\n* Updated the minimum CMake required version on Android.\n\nKnown issues:\n\n* Universal WASM format failed on MacOS platforms.\n  * In current status, the universal WASM format output of the AOT compiler with the `O1` or upper optimizations on MacOS platforms will cause bus error when execution.\n  * We are trying to fix this issue. For working around, please use the `--optimize=0` to set the compiler optimization level to `O0` in `wasmedgec` CLI.\n* WasmEdge CLI failed on Windows 10 issue.\n  * Please refer to [here for the workaround](https://github.com/WasmEdge/WasmEdge/issues/1559) if the `msvcp140.dll is missing` occurs.\n* Plug-in linking on MacOS platforms.\n  * The plug-in on MacOS platforms will cause symbol not found when dynamic linking.\n  * We are trying to fix this issue. For working around, please implement the host modules instead of plug-ins.\n\nDocumentations:\n\n* Updated the [WasmEdge-Go document](https://wasmedge.org/book/en/sdk/go/ref.html) to `v0.11.0`.\n\nTests:\n\n* Added the WASI-NN TensorFlow-Lite backend unit test.\n* Added the new C API unit tests.\n* Applied more fuzz tests for WasmEdge CLI.\n\nThank all the contributors that made this release possible!\n\nAbhinandan Udupa, Gustavo Ye, HangedFish, Harry Chiang, Hiroaki Nakamura, Kenvi Zhu, LFsWang, MediosZ, Shen-Ta Hsieh, Shreyas Atre, Xin Liu, YiYing He, abhinandanudupa, dm4, he11c, hydai, vincent, yyy1000, zhlhahaha\n\nIf you want to build from source, please use WasmEdge-0.11.2-src.tar.gz instead of the zip or tarball provided by GitHub directly.\n\n### 0.11.1 (2022-10-03)\n\nFeatures:\n\n* Supported WASI-NN plug-in with PyTorch backend on Ubuntu 20.04 x86_64.\n  * Users can refer to the [WASI-NN document](https://wasmedge.org/book/en/write_wasm/rust/wasinn.html) for the information.\n  * For building with enabling WASI-NN with PyTorch backend, please add the `-DWASMEDGE_PLUGIN_WASI_NN_BACKEND=\"PyTorch\"` in `cmake`.\n* Updated the WASI-Crypto proposal and supported OpenSSL 3.0.\n* Supported LLVM 15.\n* Added the plug-in C API.\n* Extended WasmEdge CLI.\n  * Allow the optimization level assignment in `wasmedgec` tool.\n  * Supported the `v128` value type printing in `wasmedge` tool.\n* Released Ubuntu 20.04 version with statically linked LLVM.\n\nFixed issues:\n\n* Fixed the `private` members into the `protected` in the module instance class.\n* Fixed the type mismatch for IntrinsicsTable initialization statement in the AOT compiler.\n\nKnown issues:\n\n* Universal WASM format failed on MacOS platforms.\n  * In current status, the universal WASM format output of the AOT compiler with the `O1` or upper optimizations on MacOS platforms will cause bus error when execution.\n  * We are trying to fix this issue. For working around, please use the `--optimize=0` to set the compiler optimization level to `O0` in `wasmedgec` CLI.\n* WasmEdge CLI failed on Windows 10 issue.\n  * Please refer to [here for the workaround](https://github.com/WasmEdge/WasmEdge/issues/1559) if the `msvcp140.dll is missing` occurs.\n* Plug-in linking on MacOS platforms.\n  * The plug-in on MacOS platforms will cause symbol not found when dynamic linking.\n  * We are trying to fix this issue. For working around, please implement the host modules instead of plug-ins.\n\nDocumentations:\n\n* Refactored the [WasmEdge book](https://wasmedge.org/book/en/).\n\nTests:\n\n* Added the WASI-NN PyTorch backend unit test.\n* Added fuzzing tests for WasmEdge CLI.\n\nThank all the contributors that made this release possible!\n\nDarumaDocker, Faidon Liambotis, Gustavo Ye, LFsWang, MediosZ, Michael Yuan, Shen-Ta Hsieh, Tricster, Xin Liu, Yeongju Kang, YiYing He, Zhou Zhou, hydai, jeeeerrrpop, sonder-joker, vincent\n\nIf you want to build from source, please use WasmEdge-0.11.1-src.tar.gz instead of the zip or tarball provided by GitHub directly.\n\n### 0.11.0 (2022-08-31)\n\nBreaking changes:\n\n* WasmEdge C API changes.\n  * Refactored the host function definition to export the calling frame.\n    * The first parameter of `WasmEdge_HostFunc_t` is replaced by `const WasmEdge_CallingFrameContext *`.\n    * The first parameter of `WasmEdge_WrapFunc_t` is replaced by `const WasmEdge_CallingFrameContext *`.\n  * Extended the content of `WasmEdge_Result`.\n  * Added the const qualifier of some APIs.\n    * Added the const qualifier of the first parameter of `WasmEdge_StoreFindModule()`.\n    * Added the const qualifier of the first parameter of `WasmEdge_AsyncWait()`.\n    * Added the const qualifier of the first parameter of `WasmEdge_AsyncWaitFor()`.\n    * Added the const qualifier of the first parameter of `WasmEdge_AsyncGetReturnsLength()`.\n    * Added the const qualifier of the first parameter of `WasmEdge_AsyncGet()`.\n    * Added the const qualifier of the first parameter of `WasmEdge_VMGetFunctionType()`.\n    * Added the const qualifier of the first parameter of `WasmEdge_VMGetFunctionTypeRegistered()`.\n    * Added the const qualifier of the first parameter of `WasmEdge_VMGetFunctionListLength()`.\n    * Added the const qualifier of the first parameter of `WasmEdge_VMGetFunctionList()`.\n    * Added the const qualifier of the first parameter of `WasmEdge_VMGetImportModuleContext()`.\n  * Renamed the plugin API.\n    * Renamed `WasmEdge_Plugin_loadWithDefaultPluginPaths()` to `WasmEdge_PluginLoadWithDefaultPaths()`.\n* Dropped the manylinux1 and manylinux2010 support. Please refer to the [deprecation notice](https://github.com/WasmEdge/WasmEdge/discussions/1780).\n* Standardize the SONAME and SOVERSION for WasmEdge C API\n  * The name of the library is changed to `libwasmedge.so`, `libwasmedge.dyld`, and `wasmedge.dll`.\n  * Users should change the linker flag from `lwasmedge_c` to `lwasmedge`.\n  * The initialized SONAME is set to `libwasmedge.so.0`.\n  * The initialized SOVERSION is set to `libwasmedge.so.0.0.0`.\n\nFeatures:\n\n* Updated CMake options of WasmEdge project.\n  * Added `WASMEDGE_LINK_LLVM_STATIC` option to link the LLVM statically into WasmEdge shared library or tools.\n  * Removed the `WASMEDGE_BUILD_STATIC_TOOLS` option and replaced by the `WASMEDGE_LINK_TOOLS_STATIC` option.\n  * For details, please refer to the [documentation](https://wasmedge.org/book/en/extend/build.html#building-options).\n  * After this version, our releases on MacOS platforms will link the LLVM library statically to reduce the installation of LLVM from Homebrew for the users.\n* Supported the user-defined error code for host functions.\n  * The 24-bit size user-defined error code is supported (smaller than 16777216).\n  * Developers can use the `WasmEdge_ResultGen()` API to generate the result and return.\n* Exported the `CallingFrame` instead of the memory instance in host functions.\n  * New `WasmEdge_CallingFrameContext` struct.\n  * Developers can use `WasmEdge_CallingFrameGetModuleInstance()` API to get the module instance of current top frame in calling stack in host function body.\n  * Developers can use `WasmEdge_CallingFrameGetMemoryInstance()` API to get the memory instance by index in host function body.\n    * To quickly upgrade from the previous WasmEdge versions, developer can use the `WasmEdge_CallingFrameGetMemoryInstance(Context, 0)` to get the same memory instance of the previous host function definition.\n  * Developers can use `WasmEdge_CallingFrameGetExecutor()` API to get the executor context in host function body.\n* Extended the `WasmEdge_Result` struct to support user defined error codes of host functions.\n  * Added `WasmEdge_ResultGen()` API to generate the `WasmEdge_Result` struct of user defined error code.\n  * Added `WasmEdge_ResultGetCategory()` API to get the error code category.\n* Added a new API for looking up the native handler from a given WASI mapped Fd/Handler.\n  * Added `WasmEdge_ModuleInstanceWASIGetNativeHandler` to get the native handler.\n* Added a new API for compiling a given WASM byte array.\n  * Added `WasmEdge_CompilerCompileFromBuffer` to compile from buffer.\n* Added `httpsreq` plugin on Linux platforms.\n\nFixed issues:\n\n* Fixed the binary format loading.\n  * Fixed the error of immediate loading of const instructions in debug mode.\n  * Updated the `memarg` of memory instructions for the multiple memories proposal changes.\n* Fixed the AOT issues.\n  * Fixed the missed mask of shift operands.\n  * Fixed the fallback case of vector instructions if the `SSE4.1` is not supported on the x86_64 platforms or the `NEON` is not supported on the aarch64 platforms.\n  * Fixed the `sdk_version` of `lld` warning on MacOS with LLVM 14.\n* Fixed the unexpected error message when execution.\n  * Refined the terminated case to prevent from printing the unexpected error message.\n* Refined the symbols of output WasmEdge shared libraries.\n  * Removed the weak symbol of WasmEdge plugins.\n  * Hide the `lld` symbols of WasmEdge shared library.\n* Fixed the release packaging.\n  * Fixed the lost of statically linking LLVM into WasmEdge shared library.\n  * Fixed the lost of files when packaging on Windows.\n\nRefactor:\n\n* Reorganized the CI workflows to reuse the similar jobs.\n* Refactored the enum related headers.\n  * Separated the C and C++ enum definition headers.\n  * Not to package the C++ related headers.\n* Updated the WASI and plugin host functions for the API change.\n\nKnown issues:\n\n* Universal WASM format failed on MacOS platforms.\n  * In current status, the universal WASM format output of the AOT compiler with the `O1` or upper optimizations on MacOS platforms will cause bus error when execution.\n  * We are trying to fix this issue. For working around, please use the shared library format output of the AOT mode, or set the compiler optimization level to `O0` in WasmEdge C API.\n  * Developers can specify the extension name as `.dylib` on MacOS for the shared library format output when using `wasmedgec` tool.\n* WasmEdge CLI failed on Windows 10 issue.\n  * Please refer to [here for the workaround](https://github.com/WasmEdge/WasmEdge/issues/1559) if the `msvcp140.dll is missing` occurs.\n* Plug-in linking on MacOS platforms.\n  * The plug-in on MacOS platforms will cause symbol not found when dynamic linking.\n  * We are trying to fix this issue. For working around, please implement the host modules instead of plug-ins.\n\nDocumentations:\n\n* Updated the [WasmEdge build options documentation](https://wasmedge.org/book/en/extend/build.html#building-options).\n* Updated the [WasmEdge C API documentation](https://wasmedge.org/book/en/embed/c/ref.html) for the breaking change.\n  * For upgrading from `0.10.1` to `0.11.0`, please refer to [the document](https://wasmedge.org/book/en/embed/c/0.10.1/upgrade_to_0.11.0.html).\n  * For the old API of `0.10.1`, please refer to [the document](https://wasmedge.org/book/en/embed/c/0.10.1/ref.html).\n\nTests:\n\n* Updated the spec tests to the date `20220712`.\n* Updated the test suite of the multiple memories proposal.\n* Updated the plugin tests for the host function API breaking change.\n\nThank all the contributors that made this release possible!\n\nCheng-En Lee, Chih-Hsuan Yen, Galden, GreyBalloonYU, HeZean, Michael Yuan, Shen-Ta Hsieh, Xin Liu, Yi Huang, Yi-Ying He, Zhenghao Lu, Zhou Zhou, dm4, hydai\n\nIf you want to build from source, please use WasmEdge-0.11.0-src.tar.gz instead of the zip or tarball provided by GitHub directly.\n\n### 0.10.1 (2022-07-28)\n\nFeatures:\n\n* Supported WASI-NN plug-in with OpenVINO backend on Ubuntu 20.04 x86_64.\n  * Users can refer to the [standard extension status](https://wasmedge.org/book/en/intro/standard.html) for the information.\n  * For building with enabling WASI-NN with OpenVINO backend, please add the `-DWASMEDGE_PLUGIN_WASI_NN_BACKEND=\"OpenVINO\"` in `cmake`.\n* Supported WASI-crypto plug-in on Ubuntu 20.04 x86_64, manylinux2014 x86_64, and manylinux2014 aarch64.\n  * Users can refer to the [standard extension status](https://wasmedge.org/book/en/intro/standard.html) for the information.\n  * For building with enabling WASI-crypto with OpenSSL 1.1, please add the `-DWASMEDGE_PLUGIN_WASI_CRYPTO=ON` in `cmake`.\n* Added the static tool building option.\n  * By default, WasmEdge tools will depend on the WasmEdge shared library.\n  * Developers can add the `-DWASMEDGE_BUILD_STATIC_LIB=On` and `-DWASMEDGE_BUILD_STATIC_TOOLS=On` to build the stand-alone WasmEdge CLI tools.\n* Exported the components of `WasmEdge_VMContext` in WasmEdge C API.\n  * Added the `WasmEdge_VMGetLoaderContext` API for retrieving the `WasmEdge_LoaderContext` in VM.\n  * Added the `WasmEdge_VMGetValidatorContext` API for retrieving the `WasmEdge_ValidatorContext` in VM.\n  * Added the `WasmEdge_VMGetExecutorContext` API for retrieving the `WasmEdge_ExecutorContext` in VM.\n* Added the API for CLI tools.\n  * Developers can use the `WasmEdge_Driver_Compiler` API to trigger the WasmEdge AOT compiler tool.\n  * Developers can use the `WasmEdge_Driver_Tool` API to trigger the WasmEdge runtime tool.\n* Supported the WASM `threads` proposal.\n  * Added the `WasmEdge_Proposal_Threads` for the configuration in WasmEdge C API.\n  * Users can use the `--enable-threads` to enable the proposal in `wasmedge` and `wasmedgec` tools.\n* Supported LLVM 14 on MacOS.\n  * Used the new `macho` in lld on LLVM-14 envronment.\n  * Bumpped IWYU to 0.18 to be compatible with LLVM 14 on MacOS.\n* Bumpped the MacOS x86_64 build to MacOS 11.\n\nFixed issues:\n\n* Fixed the universal WASM format failed on MacOS platforms.\n  * Developers can specify the extension name as `.wasm` on MacOS as the universal WASM format output of the AOT compiler to enable the AOT mode.\n* Fixed the WasmEdge C API static library on MacOS with LLVM 14.\n  * The WasmEdge C API static library is in experimental and not guaranteed. The shared library is recommended.\n* Reduced the branch miss when instantiating AOT-compiled WASM.\n\nRefactor:\n\n* Moved the code of WasmEdge CLI tools into `WasmEdge::Driver`.\n* Moved the plugin tests into the `test/plugins` folder.\n\nKnown issues:\n\n* WasmEdge CLI failed on Windows 10 issue.\n  * Please refer to [here for the workaround](https://github.com/WasmEdge/WasmEdge/issues/1559) if the `msvcp140.dll is missing` occurs.\n* Plug-in linking on MacOS platforms.\n  * The plug-in on MacOS platforms will cause symbol not found when dynamic linking.\n  * We are trying to fix this issue. For working around, please implement the host modules instead of plug-ins.\n\nDocumentations:\n\n* Added the [documentation for WASI-NN supporting on WasmEdge](https://wasmedge.org/book/en/dev/rust/wasinn.html).\n\nTests:\n\n* Added the spec tests for the `threads` proposal.\n* Added the WASI-NN unit tests.\n\nThank all the contributors that made this release possible!\n\nAbhinandan Udupa, Chris Ho, Faidon Liambotis, Frank Lin, Jianbai Ye, Kevin O'Neal, LFsWang, Lokesh Mandvekar, Michael Yuan, O3Ol, RichardAH, Shen-Ta Hsieh, Shreyas Atre, Sylveon, Tricster, William Wen, 罗泽轩, Xin Liu, Yi Huang, Yi-Ying He, Yixing Jia, Yukang, abhinandanudupa, alabulei1, dm4, eat4toast, eee4017, hydai, sonder-joker, spacewander, swartz-k, yale\n\nIf you want to build from source, please use WasmEdge-0.10.1-src.tar.gz instead of the zip or tarball provided by GitHub directly.\n\n### 0.10.0 (2022-05-26)\n\nBreaking changes:\n\n* WasmEdge C API changes.\n  * Merged the `WasmEdge_ImportObjectContext` into the `WasmEdge_ModuleInstanceContext`.\n    * `WasmEdge_ImportObjectCreate()` is changed to `WasmEdge_ModuleInstanceCreate()`.\n    * `WasmEdge_ImportObjectDelete()` is changed to `WasmEdge_ModuleInstanceDelete()`.\n    * `WasmEdge_ImportObjectAddFunction()` is changed to `WasmEdge_ModuleInstanceAddFunction()`.\n    * `WasmEdge_ImportObjectAddTable()` is changed to `WasmEdge_ModuleInstanceAddTable()`.\n    * `WasmEdge_ImportObjectAddMemory()` is changed to `WasmEdge_ModuleInstanceAddMemory()`.\n    * `WasmEdge_ImportObjectAddGlobal()` is changed to `WasmEdge_ModuleInstanceAddGlobal()`.\n    * `WasmEdge_ImportObjectCreateWASI()` is changed to `WasmEdge_ModuleInstanceCreateWASI()`.\n    * `WasmEdge_ImportObjectCreateWasmEdgeProcess()` is changed to `WasmEdge_ModuleInstanceCreateWasmEdgeProcess()`.\n    * `WasmEdge_ImportObjectInitWASI()` is changed to `WasmEdge_ModuleInstanceInitWASI()`.\n    * `WasmEdge_ImportObjectInitWasmEdgeProcess()` is changed to `WasmEdge_ModuleInstanceInitWasmEdgeProcess()`.\n  * Used the pointer to `WasmEdge_FunctionInstanceContext` instead of the index in the `FuncRef` value type.\n    * `WasmEdge_ValueGenFuncRef()` is changed to use the `const WasmEdge_FunctionInstanceContext *` as it's argument.\n    * `WasmEdge_ValueGetFuncRef()` is changed to return the `const WasmEdge_FunctionInstanceContext *`.\n  * Moved the functions of `WasmEdge_StoreContext` to the `WasmEdge_ModuleInstanceContext`.\n    * `WasmEdge_StoreListFunctionLength()` and `WasmEdge_StoreListFunctionRegisteredLength()` is replaced by `WasmEdge_ModuleInstanceListFunctionLength()`.\n    * `WasmEdge_StoreListTableLength()` and `WasmEdge_StoreListTableRegisteredLength()` is replaced by `WasmEdge_ModuleInstanceListTableLength()`.\n    * `WasmEdge_StoreListMemoryLength()` and `WasmEdge_StoreListMemoryRegisteredLength()` is replaced by `WasmEdge_ModuleInstanceListMemoryLength()`.\n    * `WasmEdge_StoreListGlobalLength()` and `WasmEdge_StoreListGlobalRegisteredLength()` is replaced by `WasmEdge_ModuleInstanceListGlobalLength()`.\n    * `WasmEdge_StoreListFunction()` and `WasmEdge_StoreListFunctionRegistered()` is replaced by `WasmEdge_ModuleInstanceListFunction()`.\n    * `WasmEdge_StoreListTable()` and `WasmEdge_StoreListTableRegistered()` is replaced by `WasmEdge_ModuleInstanceListTable()`.\n    * `WasmEdge_StoreListMemory()` and `WasmEdge_StoreListMemoryRegistered()` is replaced by `WasmEdge_ModuleInstanceListMemory()`.\n    * `WasmEdge_StoreListGlobal()` and `WasmEdge_StoreListGlobalRegistered()` is replaced by `WasmEdge_ModuleInstanceListGlobal()`.\n    * `WasmEdge_StoreFindFunction()` and `WasmEdge_StoreFindFunctionRegistered()` is replaced by `WasmEdge_ModuleInstanceFindFunction()`.\n    * `WasmEdge_StoreFindTable()` and `WasmEdge_StoreFindTableRegistered()` is replaced by `WasmEdge_ModuleInstanceFindTable()`.\n    * `WasmEdge_StoreFindMemory()` and `WasmEdge_StoreFindMemoryRegistered()` is replaced by `WasmEdge_ModuleInstanceFindMemory()`.\n    * `WasmEdge_StoreFindGlobal()` and `WasmEdge_StoreFindGlobalRegistered()` is replaced by `WasmEdge_ModuleInstanceFindGlobal()`.\n  * Updated the `WasmEdge_VMContext` APIs.\n    * Added the `WasmEdge_VMGetActiveModule()`.\n    * `WasmEdge_VMGetImportModuleContext()` is changed to return the `WasmEdge_FunctionInstanceContext *`.\n    * `WasmEdge_VMRegisterModuleFromImport()` is changed to use the `const WasmEdge_ModuleInstanceContext *` as it's argument.\n  * For upgrading from `0.9.1` to `0.10.0`, please refer to [the document](https://wasmedge.org/book/en/embed/c/0.9.1/upgrade_to_0.10.0.html).\n\nFeatures:\n\n* Supported LLVM 14.\n* Supported the WASM `tail-call` proposal.\n  * Added the `WasmEdge_Proposal_TailCall` for the configuration in WasmEdge C API.\n  * Users can use the `--enable-tail-call` to enable the proposal in `wasmedge` and `wasmedgec` tools.\n* Supported the WASM `extended-const` proposal.\n  * Added the `WasmEdge_Proposal_ExtendedConst` for the configuration in WasmEdge C API.\n  * Users can use the `--enable-extended-const` to enable the proposal in `wasmedge` and `wasmedgec` tools.\n* Supported thread-safe in `WasmEdge_VMContext`, `WasmEdge_ConfigureContext`, `WasmEdge_ModuleInstanceContext`, and `WasmEdge_StoreContext` APIs.\n* Supported the gas limit in AOT mode.\n* New supporting of the wasi-socket proposal.\n  * Supported `send_to`.\n  * Supported `resv_from`.\n* Plugin support\n  * Add loadable plugin support.\n  * Move `wasmedge_process` to a loadable plugin.\n\nFixed issues:\n\n* Fixed wasi-socket proposal issues.\n  * Fixed wasi-socket on MacOS.\n  * Fixed error when calling `poll_oneoff` with the same `fd` twice.\n  * Fixed error when calling `fd_close` on socket.\n  * Forged zero-terminated string for `::getaddrinfo`.\n  * Checked the socket options enumeration for valid value.\n* Fixed the statistics enable/disable routine.\n* Fixed the output format by the file extension name detection on multiple platforms.\n\nKnown issues:\n\n* Universal WASM format failed on MacOS platforms.\n  * In current status, the universal WASM format output of the AOT compiler on MacOS platforms will cause bus error when execution.\n  * We are trying to fix this issue. For working around, please use the shared library format output of the AOT mode.\n  * Developers can specify the extension name as `.dylib` on MacOS, `.so` on Linux, and `.dll` on Windows for the shared library format output of the AOT compiler.\n\nRefactor:\n\n* Supported multi-thread execution.\n  * Changed the `StackManager` in `Executor` as thread local to support the multi-thread.\n  * Used atomic operations for cost measuring.\n  * Supported multi-thread timer.\n* Refactored the enumerations.\n  * Replaced the `std::unordered_map` of the enumeration strings with `DenseMap` and `SpareMap`.\n  * Merged the both C and C++ enumeration definitions into the `enum.inc` file.\n  * Updated the `ErrCode` enumeration for the newest spec tests.\n* Refactored the code architecture for supporting `tail-call` proposal.\n  * Split the `call_indirect` execution routine in compiler into AOT and interpreter path.\n  * Updated the pop frame mechanism in the `StackManager`.\n  * Updated the enter function mechanism.\n* Refined the file manager in `Loader`.\n  * Supported the offset seeking in file and buffer.\n  * Skipped the instructions parsing in AOT mode for better loading performance.\n* Refined the branch mechanism in the `StackManager` for better performance in the interpreter mode.\n  * Pre-calculated the stack offset for branch in the validation phase.\n  * Removed the label stack in the `StackManager` and used the pre-calculated data for branch.\n  * Removed the dummy frame mechanism in the `StackManager`.\n* Supplied the pointer-based retrieving mechanism in the `StoreManager` and `ModuleInstance`.\n  * Removed the address mechanism for instances in the `StoreManager`.\n  * Added the unsafe getter functions for the instances.\n* Refactored the `StoreManager`, `ModuleInstance`, and `Executor`.\n  * Used the `ModuleInstance`-based resource management instead of `StoreManager`-based.\n  * Moved the ownership of instances from the `StoreManager` into the `ModuleInstance`.\n  * Merged the `ImportObject` into the `ModuleInstance`.\n  * Invoking functions by `FunctionInstance` rather than the function name in `Executor`.\n\nDocumentations:\n\n* Updated the [WasmEdge C API documentation](https://wasmedge.org/book/en/embed/c/ref.html) for the breaking change.\n  * For upgrading from `0.9.1` to `0.10.0`, please refer to [the document](https://wasmedge.org/book/en/embed/c/0.9.1/upgrade_to_0.10.0.html).\n  * For the old API of `0.9.1`, please refer to [the document](https://wasmedge.org/book/en/embed/c/0.9.1/ref.html).\n* Updated the [WasmEdge GO documentation](https://wasmedge.org/book/en/embed/go/ref.html) for the breaking change.\n  * For upgrading from `v0.9.2` to `v0.10.0`, please refer to [the document](https://wasmedge.org/book/en/embed/go/0.9.1/upgrade_to_0.10.0.html).\n  * For the old API of `v0.9.2`, please refer to [the document](https://wasmedge.org/book/en/embed/go/0.9.1/ref.html).\n\nTests:\n\n* Updated the spec tests to the date `20220504`.\n* Added the spec tests for the `tail-call` proposal.\n* Added the spec tests for the `extended-const` proposal.\n* Added the mixed invocation tests between interpreter mode and AOT mode WASM functions.\n* Added the thread-safe and multi-thread execution tests.\n* Added wasi-socket tests for `poll_oneoff`, `send_to`, and `recv_from`.\n\nThank all the contributors that made this release possible!\n\n朱亚光, Abhinandan Udupa, Ang Lee, Binbin Zhang, Chin Zhi Wei, DarumaDocker, Elon Cheng, FlyingOnion, Hanged Fish, Herschel Wang, JIAN ZHONG, JcJinChen, Jeremy, JessesChou, JieDing, Kodalien, Kunshuai Zhu, LFsWang, LaingKe, MediosZ, Michael Yuan, Nicholas Zhan, 华德禹, O3Ol, Rui Li, Shen-Ta Hsieh, Shreyas Atre, Sylveon, TheLightRunner, Vaniot, Vinson, 罗泽轩, Xin Liu, Yi Huang, YiYing He, YoungLH, abhinandanudupa, border1px, dm4, eat4toast, hydai, jerbmarx, luckyJ-nj, meoww-bot, mydreamer4134, situ2001, tpmccallum, treeplus, wangyuan249, yale, 王琦\n\nIf you want to build from source, please use WasmEdge-0.10.0-src.tar.gz instead of the zip or tarball provided by GitHub directly.\n\n### 0.9.1 (2022-02-10)\n\nFeatures:\n\n* WASI\n  * Added the `sock_getsockopt`, `sock_setsockopt`, `sock_getlocaladdr`, `sock_getpeeraddr`, and `sock_getaddrinfo` host functions for the WASI socket proposal.\n* Supported the interruptible execution.\n  * Added the `WasmEdge_Async` struct in WasmEdge C API for the asynchronous execution.\n    * Added the `WasmEdge_AsyncWait` API for waiting an asynchronous execution.\n    * Added the `WasmEdge_AsyncWaitFor` API for waiting an asynchronous execution with timeout.\n    * Added the `WasmEdge_AsyncCancel` API for canceling an asynchronous execution.\n    * Added the `WasmEdge_AsyncGetReturnsLength` API for waiting and getting the return value length of asynchronous execution.\n    * Added the `WasmEdge_AsyncGet` API for waiting and getting the asynchronous execution results.\n    * Added the `WasmEdge_AsyncDelete` API for destroying the `WasmEdge_Async` object.\n  * Added the asynchronous mode execution APIs.\n    * Added the `WasmEdge_VMAsyncRunWasmFromFile` API for executing WASM from a file asynchronously.\n    * Added the `WasmEdge_VMAsyncRunWasmFromBuffer` API for executing WASM from a buffer asynchronously.\n    * Added the `WasmEdge_VMAsyncRunWasmFromASTModule` API for executing WASM from an `WasmEdge_ASTModuleContext` asynchronously.\n    * Added the `WasmEdge_VMAsyncExecute` API for invoking a WASM function asynchronously.\n    * Added the `WasmEdge_VMAsyncExecuteRegistered` API for invoking a registered WASM function asynchronously.\n  * Added the option for timeout settings of the AOT compiler.\n    * Added the `WasmEdge_ConfigureCompilerSetInterruptible` API for setting the interruptibility of the AOT compiler.\n    * Added the `WasmEdge_ConfigureCompilerIsInterruptible` API for getting the interruptibility of the AOT compiler.\n* Supported the WASM `multi-memories` proposal.\n  * Added the `WasmEdge_Proposal_MultiMemories` for the configuration in WasmEdge C API.\n  * Users can use the `--enable-multi-memory` to enable the proposal in `wasmedge` and `wasmedgec` tools.\n* Enabled the gas limitation of the `wasmedge` CLI.\n  * Users can use the `--gas-limit` to assign the limitation of costs.\n* Beautified and colorized the WasmEdge CLI help information.\n\nFixed issues:\n\n* Fixed the memory leak in function instances.\n* Reduced the memory usage of the instruction class.\n* Fixed the return value of the `fread` and `fwrite` WASI functions on Windows.\n\nRefactor:\n\n* Used `assumingUnreachable` instead of `__builtin_unreachable` to help the compiler to generate better codes.\n* Updated the order of the members in the proposal enumeration.\n* Refactored the instruction class for reducing the memory usage.\n  * Refactored the `WasmEdge::BlockType` into a struct.\n  * Categorized the members of the instruction class into a union.\n\nDocumentations:\n\n* Added the [build-on-Windows-10](docs/build_on_windows.md) documentation.\n* Added the [Reference Book](https://wasmedge.org/book/en/).\n* Updated the [Release process](ReleaseProcess.md).\n\nTests:\n\n* Handled the tests for the 32-bit platforms.\n* Added the spec tests for the `multi-memories` proposal.\n* Added the test cases for `getaddrinfo` host function.\n* Added the interruptible execution tests.\n* Added the unit tests of async APIs.\n\nMisc:\n\n* Updated the `blake3` library to `1.2.0`.\n* Added the copyright text.\n* Fixed the coding style of the comments.\n* Added the Windows installer release CI.\n* Added the aarch64 Android support based on r23b.\n* Added the Android example for WasmEdge C API.\n\nThank all the contributors that made this release possible!\n\n2021, Antonio Yang, AvengerMoJo, Hanged Fish, Harinath Nampally, KernelErr, Michael Yuan, MileyFu, O3Ol, Saksham Sharma, Shen-Ta Hsieh(BestSteve), Shreyas Atre, SonOfMagic, Stephan Renatus, Sven Pfennig, Vaughn Dice, Xin Liu, Yi, Yi-Ying He, Yukang Chen, ZefengYu, ZhengX, alabulei1, alittlehorse, baiyutang, 董哲, hydai, javadoors, majinghe, meoww-bot, pasico, peterbi, villanel, wangshishuo, wangyuan249, wby, wolfishLamb, 王琦\n\nIf you want to build from source, please use WasmEdge-0.9.1-src.tar.gz instead of the zip or tarball provided by GitHub directly.\n\n### 0.9.0 (2021-12-09)\n\nBreaking changes:\n\n* Turned on the `SIMD` proposal by default.\n  * The `WasmEdge_ConfigureContext` will turn on the `SIMD` proposal automatically.\n  * Users can use the `--disable-simd` to disable the `SIMD` proposal in `wasmedge` and `wasmedgec`.\n* For better performance, the Statistics module is disabled by default.\n  * To enable instruction counting, please use `--enable-instruction-count`.\n  * To enable gas measuring, please use `--enable-gas-measuring`.\n  * To enable time  measuring, please use `--enable-time-measuring`.\n  * For the convenience, use `--enable-all-statistics` will enable all available statistics options.\n* `wasmedgec` AOT compiler tool behavior changes.\n  * For the output file name with extension `.so`, `wasmedgec` will output the AOT compiled WASM in shared library format.\n  * For the output file name with extension `.wasm` or other cases, `wasmedgec` will output the WASM file with adding the AOT compiled binary in custom sections. `wasmedge` runtime will run in AOT mode when it executes the output WASM file.\n* Modulized the API Headers.\n  * Moved the API header into the `wasmedge` folder. Developers should include the `wasmedge/wasmedge.h` for using the WasmEdge shared library after installation.\n  * Moved the enumeration definitions into `enum_errcode.h`, `enum_types.h`, and `enum_configure.h` in the `wasmedge` folder.\n  * Added the `201402L` C++ standard checking if developer includes the headers with a C++ compiler.\n* Adjusted the error code names.\n  * Please refer to the [ErrCode enum](https://github.com/WasmEdge/WasmEdge/blob/master/include/common/enum_errcode.h) definition.\n* Renamed the `Interpreter` into `Executor`.\n  * Renamed the `Interpreter` namespace into `Executor`.\n  * Moved the headers and sources in the `Interpreter` folder into `Executor` folder.\n  * Renamed the `Interpreter` APIs and listed below.\n* WasmEdge C API changes.\n  * Updated the host function related APIs.\n    * Deleted the data object column in the creation function of `ImportObject` context.\n    * Merged the `HostFunctionContext` into `FunctionInstanceContext`.\n      * Deleted the `WasmEdge_HostFunctionContext` object. Please use the `WasmEdge_FunctionInstanceContext` object instead.\n      * Deleted the `WasmEdge_HostFunctionCreate` function. Please use the `WasmEdge_FunctionInstanceCreate` function instead.\n      * Deleted the `WasmEdge_HostFunctionCreateBinding` function. Please use the `WasmEdge_FunctionInstanceCreateBinding` function instead.\n      * Deleted the `WasmEdge_HostFunctionDelete` function. Please use the `WasmEdge_FunctionInstanceDelete` function instead.\n      * Deleted the `WasmEdge_ImportObjectAddHostFunction` function. Please use the `WasmEdge_ImportObjectAddFunction` function instead.\n    * Added the data object column in the creation function of `FunctionInstance` context.\n    * Instead of the unified data object of the host functions in the same import object before, the data objects are independent in every host function now.\n  * Added the WASM types contexts.\n    * Added the `WasmEdge_TableTypeContext`, which is used for table instances creation.\n    * Added the `WasmEdge_MemoryTypeContext`, which is used for memory instances creation.\n    * Added the `WasmEdge_GlobalTypeContext`, which is used for global instances creation.\n    * Added the member getter functions of the above contexts.\n  * Updated the instances creation APIs.\n    * Used `WasmEdge_TableTypeContext` for table instances creation.\n      * Removed `WasmEdge_TableInstanceGetRefType` API.\n      * Developers can use the `WasmEdge_TableInstanceGetTableType` API to get the table type instead.\n    * Used `WasmEdge_MemoryTypeContext` for memory instances creation.\n      * Added `WasmEdge_MemoryInstanceGetMemoryType` API.\n    * Used `WasmEdge_GlobalTypeContext` for global instances creation.\n      * Removed `WasmEdge_GlobalInstanceGetValType` and `WasmEdge_GlobalInstanceGetMutability` API.\n      * Developers can use the `WasmEdge_GlobalInstanceGetGlobalType` API to get the global type instead.\n  * Refactored for the objects' life cycle to reduce copying.\n    * Developers should NOT destroy the `WasmEdge_FunctionTypeContext` objects returned from `WasmEdge_VMGetFunctionList`, `WasmEdge_VMGetFunctionType`, and `WasmEdge_VMGetFunctionTypeRegistered` functions.\n    * Developers should NOT destroy the `WasmEdge_String` objects returned from `WasmEdge_StoreListFunction`, `WasmEdge_StoreListFunctionRegistered`, `WasmEdge_StoreListTable`, `WasmEdge_StoreListTableRegistered`, `WasmEdge_StoreListMemory`, `WasmEdge_StoreListMemoryRegistered`, `WasmEdge_StoreListGlobal`, `WasmEdge_StoreListGlobalRegistered`, `WasmEdge_StoreListModule`, and `WasmEdge_VMGetFunctionList` functions.\n  * Renamed the `Interpreter` related APIs.\n    * Replaced `WasmEdge_InterpreterContext` struct with `WasmEdge_ExecutorContext` struct.\n    * Replaced `WasmEdge_InterpreterCreate` function with `WasmEdge_ExecutorCreate` function.\n    * Replaced `WasmEdge_InterpreterInstantiate` function with `WasmEdge_ExecutorInstantiate` function.\n    * Replaced `WasmEdge_InterpreterRegisterImport` function with `WasmEdge_ExecutorRegisterImport` function.\n    * Replaced `WasmEdge_InterpreterRegisterModule` function with `WasmEdge_ExecutorRegisterModule` function.\n    * Replaced `WasmEdge_InterpreterInvoke` function with `WasmEdge_ExecutorInvoke` function.\n    * Replaced `WasmEdge_InterpreterInvokeRegistered` function with `WasmEdge_ExecutorInvokeRegistered` function.\n    * Replaced `WasmEdge_InterpreterDelete` function with `WasmEdge_ExecutorDelete` function.\n  * Refactored for statistics options\n    * Renamed `WasmEdge_ConfigureCompilerSetInstructionCounting` to `WasmEdge_ConfigureStatisticsSetInstructionCounting`.\n    * Renamed `WasmEdge_ConfigureCompilerSetCostMeasuring` to `WasmEdge_ConfigureStatisticsSetCostMeasuring`.\n    * Renamed `WasmEdge_ConfigureCompilerSetTimeMeasuring` to `WasmEdge_ConfigureStatisticsSetTimeMeasuring`.\n    * Renamed `WasmEdge_ConfigureCompilerGetInstructionCounting` to `WasmEdge_ConfigureStatisticsGetInstructionCounting`.\n    * Renamed `WasmEdge_ConfigureCompilerGetCostMeasuring` to `WasmEdge_ConfigureStatisticsGetCostMeasuring`.\n    * Renamed `WasmEdge_ConfigureCompilerGetTimeMeasuring` to `WasmEdge_ConfigureStatisticsGetTimeMeasuring`.\n  * Simplified the WASI creation and initialization APIs.\n    * Removed the `Dirs` and `DirLen` parameters in the `WasmEdge_ImportObjectCreateWASI`.\n    * Removed the `Dirs` and `DirLen` parameters in the `WasmEdge_ImportObjectInitWASI`.\n\nFeatures:\n\n* Applied the old WebAssembly proposals options (All turned on by default).\n  * Developers can use the `disable-import-export-mut-globals` to disable the Import/Export mutable globals proposal in `wasmedge` and `wasmedgec`.\n  * Developers can use the `disable-non-trap-float-to-int` to disable the Non-trapping float-to-int conversions proposal in `wasmedge` and `wasmedgec`.\n  * Developers can use the `disable-sign-extension-operators` to disable the Sign-extension operators proposal in `wasmedge` and `wasmedgec`.\n  * Developers can use the `disable-multi-value` to disable the Multi-value proposal in `wasmedge` and `wasmedgec`.\n* New WasmEdge C API for listing imports and exports from AST module contexts.\n  * Developers can query the `ImportTypeContext` and `ExportTypeContext` from the `ASTModuleContext`.\n  * New object `WasmEdge_ImportTypeContext`.\n  * New object `WasmEdge_ExportTypeContext`.\n  * New AST module context functions to query the import and export types.\n    * `WasmEdge_ASTModuleListImportsLength` function can query the imports list length from an AST module context.\n    * `WasmEdge_ASTModuleListExportsLength` function can query the exports list length from an AST module context.\n    * `WasmEdge_ASTModuleListImports` function can list all import types of an AST module context.\n    * `WasmEdge_ASTModuleListExports` function can list all export types of an AST module context.\n  * New import type context functions to query data.\n    * `WasmEdge_ImportTypeGetExternalType` function can get the external type of an import type context.\n    * `WasmEdge_ImportTypeGetModuleName` function can get the import module name.\n    * `WasmEdge_ImportTypeGetExternalName` function can get the import external name.\n    * `WasmEdge_ImportTypeGetFunctionType` function can get the function type of an import type context.\n    * `WasmEdge_ImportTypeGetTableType` function can get the table type of an import type context.\n    * `WasmEdge_ImportTypeGetMemoryType` function can get the memory type of an import type context.\n    * `WasmEdge_ImportTypeGetGlobalType` function can get the global type of an import type context.\n  * New export type context functions to query data.\n    * `WasmEdge_ExportTypeGetExternalType` function can get the external type of an export type context.\n    * `WasmEdge_ExportTypeGetExternalName` function can get the export external name.\n    * `WasmEdge_ExportTypeGetFunctionType` function can get the function type of an export type context.\n    * `WasmEdge_ExportTypeGetTableType` function can get the table type of an export type context.\n    * `WasmEdge_ExportTypeGetMemoryType` function can get the memory type of an export type context.\n    * `WasmEdge_ExportTypeGetGlobalType` function can get the global type of an export type context.\n  * For more details of the usages of imports and exports, please refer to the [C API documentation](https://github.com/WasmEdge/WasmEdge/blob/master/docs/c_api.md).\n* Exported the WasmEdge C API for getting exit code from WASI.\n  * `WasmEdge_ImportObjectWASIGetExitCode` function can get the exit code from WASI after execution.\n* Exported the WasmEdge C API for AOT compiler related configurations.\n  * `WasmEdge_ConfigureCompilerSetOutputFormat` function can set the AOT compiler output format.\n  * `WasmEdge_ConfigureCompilerGetOutputFormat` function can get the AOT compiler output format.\n  * `WasmEdge_ConfigureCompilerSetGenericBinary` function can set the option of AOT compiler generic binary output.\n  * `WasmEdge_ConfigureCompilerIsGenericBinary` function can get the option of AOT compiler generic binary output.\n* Provided install and uninstall script for installing/uninstalling  WasmEdge on linux(amd64 and aarch64) and macos(amd64 and arm64).\n* Supported compiling WebAssembly into a new WebAssembly file with a packed binary section.\n* Supported the automatically pre-open mapping with the path name in WASI.\n\nFixed issues:\n\n* Refined the WasmEdge C API behaviors.\n  * Handle the edge cases of `WasmEdge_String` creation.\n* Fixed the instruction iteration exception in interpreter mode.\n  * Forcely added the capacity of instruction vector to prevent from connection of instruction vectors in different function instances.\n* Fixed the loader of AOT mode WASM.\n  * Checked the file header instead of file name extension when loading from file.\n  * Showed the error message when loading AOT compiled WASM from buffer. For AOT mode, please use the universal WASM binary.\n  * Fixed the zero address used in AOT mode in load manager.\n  * Fixed the loading failed for the AOT compiled WASM without intrinsics table.\n* Fixed the `VM` creation issue.\n  * Added the loss of intrinsics table setting when creating a VM instance.\n* Fixed wasi-socket issues.\n  * Support wasi-socket on MacOS.\n  * Remove the port parameter from `sock_accept`.\n\nRefactor:\n\n* Refined headers inclusion in all files.\n* Refactor the common headers.\n  * Removed the unnecessary `genNullRef()`.\n  * Merged the building environment-related definitions into `common`.\n  * Merged the `common/values.h` into `common/types.h`.\n  * Separated all enumeration definitions.\n* Refactored the AST nodes.\n  * Simplified the AST nodes definitions into header-only classes.\n  * Moved the binary loading functions into `loader`.\n  * Updated the `validator`, `executor`, `runtime`, `api`, and `vm` for the AST node changes.\n* Refactored the runtime objects.\n  * Used `AST::FunctionType`, `AST::TableType`, `AST::MemoryType`, and `AST::GlobalType` for instance creation and member handling.\n  * Removed `Runtime::Instance::FType` and used `AST::FunctionType` instead.\n  * Added routines to push function instances into import objects.\n  * Removed the exported map getter in `StoreManager`. Used the getter from `ModuleInstance` instead.\n  * Added the module name mapping in `StoreManager`.\n* Refactored the VM class.\n  * Returned the reference to function type instead of copying when getting the function list.\n  * Returned the vector of return value and value type pair when execution.\n* Updated the include path for rust binding due to the API headers refactoring.\n\nDocumentations:\n\n* Updated the `wasmedge` commands in the [Run](https://github.com/WasmEdge/WasmEdge/blob/master/docs/run.md) and [SIMD documentation](https://github.com/WasmEdge/WasmEdge/blob/master/docs/simd.md)\n* Updated the examples in the [C API documentation](https://github.com/WasmEdge/WasmEdge/blob/master/docs/c_api.md).\n* Updated the examples in the [host function documentation](https://github.com/WasmEdge/WasmEdge/blob/master/docs/host_function.md).\n* Updated the examples in the [external reference documentation](https://github.com/WasmEdge/WasmEdge/blob/master/docs/externref.md).\n\nBindings:\n\n* Move rust crate from root path to `bindings/rust`.\n\nTests:\n\n* Updated the core test suite to the newest WASM spec.\n* Updated and fixed the value comparison in core tests.\n* Added `ErrInfo` unit tests.\n* Added instruction tests for turning on/off the old proposals.\n* Moved and updated the `AST` unit tests into `loader`.\n* Moved and updated the `Interpreter` tests into `Executor` folder.\n* Added the unit tests for new APIs.\n* Applied the WasmEdge C API in the `ExternRef` tests.\n\nMisc:\n\n* Enabled GitHub CodeSpaces\n* Added `assuming` for `assert` checking to help compiler to generate better codes.\n\nThank all the contributors that made this release possible!\n\n2021, actly, alabulei1, Alex, Antonio Yang, Ashutosh Sharma, Avinal Kumar, blackanger, Chojan Shang, dm4, eee4017, fossabot, hydai, Jayita Pramanik, Kenvi Zhu, luishsu, LuisHsu, MaazKhan711635, Michael Yuan, MileyFu, Nick Hynes, O3Ol, Peter Chang, robnanarivo, Shen-Ta Hsieh, Shreyas Atre, slidoooor, Sylveon, Timothy McCallum, Vikas S Shetty, vincent, Xin Liu, Yi Huang, yiying, YiYing He, Yona, Yukang, 牟展佑\n\nIf you want to build from source, please use WasmEdge-0.9.0-src.tar.gz instead of the zip or tarball provided by GitHub directly.\n\n### 0.8.2 (2021-08-25)\n\nFeatures:\n\n* WASI:\n  * Supported WASI on macOS(Intel & M1).\n  * Supported WASI on Windows 10.\n  * Supported WASI Socket functions on Linux.\n* C API:\n  * Supported 32-bit environment.\n  * Added the static library target `libwasmedge_c.a` (`OFF` by default).\n  * Added the `ErrCode` to C declarations.\n  * Added the API about converting `WasmEdge_String` to C string.\n  * Added the API to get data pointer from the `WasmEdge_MemoryInstanceContext`.\n* AOT:\n  * Added `--generic-binary` to generate generic binaries and disable using host features.\n* Multi platforms:\n  * Enabled Ubuntu 20.04 x86\\_64 build.\n  * Enabled Ubuntu 21.04 x86\\_64 build.\n  * Enabled manylinux2014 aarch64 build.\n  * Enabled Ubuntu 21.04 arm32 build.\n* Rust supports:\n  * Added the `wasmedge-sys` and `wasmedge-rs` crates.\n  * Added the wrapper types to rust.\n* Removed binfmt support.\n\nFixed issues:\n\n* Ensured every platform defines is defined.\n* Disabled blake3 AVX512 support on old platforms.\n* Avoided vector ternary operator in AOT, which is unsupported by clang on mac.\n* The preopen should be `--dir guest_path:host_path`.\n* Fixed usused variables error in API libraries when AOT build is disabled.\n* Fixed the WASI function signature error.\n  * `wasi_snapshot_preview1::path_read_link`\n    * Fixed the signature error with the lost read size output.\n    * Added the `Out` comments for parameters with receiving outputs.\n  * `wasi_snapshot_preview1::path_filestat_set_times`\n    * Corrected the time signature to the `u64`.\n\nMisc:\n\n* Changed all CMake global properties to target specified properties.\n  * Added namespace to all cmake options.\n* Added the CMake option `WASMEDGE_FORCE_DISABLE_LTO` to forcibly disable link time optimization (`OFF` by default).\n  * WasmEdge project enables LTO by default in Release/RelWithDeb build. If you would like to disable the LTO forcibly, please turn on the `WASMEDGE_FORCE_DISABLE_LTO` option.\n* Installed `dpkg-dev` in docker images to enable `dpkg-shlibdeps` when creating the deb release.\n\nRefactor:\n\n* Refactored the WASI VFS architecture.\n* Simplified the memory indexing in validator.\n* Renamed the file names in interpreter.\n* Replaced the instances when registering host instances with existing names.\n\nDocumentations:\n\n* Added the [Quick Start Javascript](https://github.com/WasmEdge/WasmEdge/blob/master/docs/run_javascript.md) document.\n* Added the [Use Cases](https://github.com/WasmEdge/WasmEdge/blob/master/docs/use_cases.md) document.\n* Fixed the wrong `printf` type in the C API document.\n\nTests:\n\n* Added wasi-test for testing basic WASI interface\n* Added C API unit tests.\n  * Added the `WasmEdge_String` copy tests.\n  * Added the `WasmEdge_MemoryInstanceContext` get data pointer tests.\n* Removed unnecessary Wagon and Ethereum tests.\n\n### 0.8.1 (2021-06-18)\n\nFeatures:\n\n* Exported new functions in C API to import the `wasmedge_process` module.\n  * `WasmEdge_ImportObjectCreateWasmEdgeProcess()` can create and initialize the `wasmedge_process` import object.\n  * `WasmEdge_ImportObjectInitWasmEdgeProcess()` can initialize the given `wasmedge_process` import object.\n* Exported new AOT compiler configuration setting C APIs.\n  * Users can set the options about AOT optimization level, dump IR, and instruction counting and cost measuring in execution after compilation to the AOT compiler through C APIs.\n* Updated error codes according to the [newest test suite of WebAssembly](https://github.com/WebAssembly/spec/tree/master/test/core).\n  * Applied the correct error message when trapping in the loading phase.\n* Implemented the UTF-8 decoding in file manager.\n* Implemented the basic name section parsing in custom sections.\n* Added memory-mapped file helper, `MMap` for Linux.\n  * Used `mmap` with `MAP_NORESERVE` for overcommited allocation.\n  * Used `MMap` for file loading.\n  * Merged `FileMgr` variants into one class.\n\nFixed issues:\n\n* Applied the UTF-8 decoding.\n  * Check the UTF-8 validation in custom sections, export sections, and import sections.\n* Detected the redundant sections in modules.\n  * Fixed this issue hence the sections rather than the custom section should be unique.\n* Corrected the logging of data offset in the file while trap occurred in the loading phase.\n  * Updated to the correct offset according to the refactored file manager.\n\nRefactor:\n\n* Updated manylinux\\* dockerfiles.\n  * Upgraded gcc to `11.1.0`.\n  * Upgraded llvm to `11.1.0`.\n  * Upgraded boost to `1.76`.\n  * Moved environment variables to Dockerfile.\n  * Used helper scripts to build.\n* Moved the options of the AOT compiler into the `Configure` class.\n* Refactor the file manager for supporting the `Unexpected end` loading malformed test cases.\n  * Added the `setSectionSize` function to specify the reading boundary before the end of the file.\n* Adjusted build scripts.\n  * Set job pools for ninja generator.\n  * Checked for newer compilers in `std::filesystem`.\n  * Adjusted library dependency.\n\nDocumentations:\n\n* Updated the [WasmEdge ecosystem](https://github.com/WasmEdge/WasmEdge/blob/master/docs/ecosystem.md) document.\n  * Renamed the `SSVM` related projects into `WasmEdge`.\n\nTools:\n\n* Updated the `wasmedgec` AOT compiler tool for API changes of the `Configure`.\n\nTests:\n\n* Turn on the `assert_malformed` tests for WASM binary in spec tests.\n  * Apply the interpreter tests.\n  * Apply the AOT tests.\n  * Apply the API tests.\n* Updated the API unit tests for the new `Configure` APIs.\n* Updated the AST and loader unit tests.\n  * Added test cases of file manager to raise the coverage.\n  * Added test cases of every AST node to raise the coverage.\n\n### 0.8.0 (2021-05-13)\n\nBreaking changes:\n\n* Renamed this project to `WasmEdge` (formerly `ssvm`).\n  * The tool `wasmedge` is the WebAssembly runtime (formerly `ssvm`).\n  * The tool `wasmedgec` is the WebAssembly AOT compiler (formerly `ssvmc`).\n* Renamed the CMake options.\n  * Option `BUILD_AOT_RUNTIME` (formerly `SSVM_DISABLE_AOT_RUNTIME` and `OFF` by default), which is `ON` by default, is for enabling the compilation of the ahead-of-Time compiler.\n* Turned on the `reference-types` and `bulk-memory-operations` proposals by default in tools.\n  * Users can use the `disable-bulk-memory` to disable the `bulk-memory-operations` proposal in `wasmedge` and `wasmedgec`.\n  * Users can use the `disable-reference-types` to disable the `reference-types` proposal in `wasmedge` and `wasmedgec`.\n\nFeatures:\n\n* Added `WasmEdge` C API and shared library.\n  * Developers can include the `wasmedge.h` and link the `libwasmedge_c.so` for compiling and running `WASM`.\n  * Add CMake option `BUILD_SHARED_LIB` to enable compiling the shared library (`ON` by default).\n  * The APIs about the ahead-of-time compiler will always return failed if the CMake option `BUILD_AOT_RUNTIME` is set as `OFF`.\n* Added `common/version.h`: define the package version from `cmake`.\n* Updated `Configure`.\n  * Turned on the `reference-types` and `bulk-memory-operations` proposals by default.\n  * Supports memory page limitation for limiting the largest available pages in memory instances.\n* Added a function in `Log` to enable the debug logging level.\n* Added global options with subcommands into `PO`.\n* Added an API into `StoreManager` to list the registered module names.\n* Added an API into `TableInstance` to grow table with `ref.null`.\n* Updated `SIMD` implementation with the newest [SIMD proposal](https://github.com/webassembly/simd).\n* Supported `AOT` compile cache.\n  * Added `blake3` hash calculator to calculate hash for caching files.\n* Added an API into `VM` for loading `WASM` module from `AST::Module`.\n\nFixed issues:\n\n* Adjusted and fixed cmake issues.\n  * Used `CMAKE_CURRENT_SOURCE_DIR` in this project for supporting to be as a submodule.\n  * Assigned a default version number (`0.0.0-unreleased`) when getting the version from git describe failed.\n  * Fixed `boost` include variable names.\n* Fixed `WASI` `poll_oneoff`.\n  * Allow `SIGINT` and `SIGTERM` while waiting for the file descriptor and check `SIGTERM` after `epoll`.\n* Rearranged variables for CPU feature detection in `AOT` compiler.\n* Fixed `Validator` errors.\n  * Fixed the error in `br_table` for pushing wrong types into validation stack.\n  * Fixed the error in `global_set` for iterating illegal indices.\n* Fixed `Interpreter` errors.\n  * Fixed the failed case that not returned the errors except `ErrCode::ExecutionFailed` when invoking the host functions.\n  * Not to return success when the `ErrCode::Terminated` occurs.\n* Fixed the unmapping size in the destructor of `MemoryInstance`.\n\nRefactor:\n\n* Merged the `CostTable` class into `Statistics`.\n  * Simplified the API for getting and setting cost table.\n  * Initialized the costs for every instruction as `1` by default.\n* Merged the `Proposal` and `HostRegistration` configurations into `Configure`.\n  * Adjusted the `Proposal` order.\n* Applied the copy of `Configure` in `Loader`, `Validator`, `Interpreter`, and `VM` instead of passing by reference.\n* Refactored the functions in the `StoreManager`.\n  * Updated the templates of functions to register instances.\n  * Forwarded the parameters to reduce moving.\n* Refactored and used the `std::variant` to save space in `FunctionInstance`.\n* Applied function parameter type checking when invoking a wasm function in `Interpreter`.\n* Set the module instantiation as the anonymous active module in `Interpreter`.\n* Added the `const` quantifier in `get` and `load` data functions of `MemoryInstance`.\n\nDocumentations:\n\n* Added [release process](https://github.com/WasmEdge/WasmEdge/blob/master/ReleaseProcess.md) document.\n* Added [contributing](https://github.com/WasmEdge/WasmEdge/blob/master/docs/CONTRIBUTING.md) document.\n* Added [code of conduct](https://github.com/WasmEdge/WasmEdge/blob/master/docs/code_of_conduct.md) document.\n* Added [roadmap](https://github.com/WasmEdge/WasmEdge/blob/master/docs/roadmap.md) document.\n* Updated [external references](https://github.com/WasmEdge/WasmEdge/blob/master/docs/externref.md) document for the VM API changes.\n* Updated the [WasmEdge ecosystem](https://github.com/WasmEdge/WasmEdge/blob/master/docs/ecosystem.md) document.\n* Added scripts to generate witx documents.\n  * Cherry-pick `wasi_ephemeral_sock` APIs from `wasi_snapshot_preview1`.\n\nTools:\n\n* `wasmedge`: WebAssembly runtime (formerly `ssvm`)\n  * Turned on the `bulk-memory-operations` and `reference-types` proposals by default.\n    * Users can use the `disable-bulk-memory` to disable the `bulk-memory-operations` proposal.\n    * Users can use the `disable-reference-types` to disable the `reference-types` proposal.\n  * Updated for the `vm` API changes.\n  * Return the exit code in command mode in forced terminated occurs in `WASI`.\n* `wasmedgec`: WebAssembly AOT compiler (formerly `ssvmc`)\n  * Turned on the `bulk-memory-operations` and `reference-types` proposals by default.\n    * Users can use the `disable-bulk-memory` to disable the `bulk-memory-operations` proposal when compiling.\n    * Users can use the `disable-reference-types` to disable the `reference-types` proposal when compiling.\n\nTests:\n\n* Added AOT cache tests.\n* Added memory page size limit tests.\n* Updated the WASM spec tests.\n  * Updated [WasmEdge-unittest](https://github.com/second-state/WasmEdge-unittest) and check out the newest test suites.\n    * Updated the `SIMD` test data.\n    * For the `WasmEdge 0.8.0`, we use the `wasm-dev-0.8.0` tag for the core tests and the `SIMD` proposal tests.\n  * Adjusted the code architecture for core testing.\n    * Combined the duplicated functions into the `SpecTest` class.\n    * Split out the `spectest` host function definitions for importing repeatedly.\n* Added `WasmEdge` C API tests.\n  * Added unit tests for APIs in the `WasmEdge` shared library.\n  * Applied WASM core tests for the `WasmEdge` shared library in both using `Interpreter` APIs and `VM` APIs.\n\n### 0.7.3 (2021-01-22)\n\nFeatures:\n\n* Updated the `easylogging++` to v9.97.0.\n  * Disabled the file logging.\n* Initial supported the `WASI` host functions for old system (CentOS 6).\n  * Updated the `WASI` subscription insterface.\n  * Used `pipe` for old `GLIBC`.\n* Added supporting of subcommand in `PO`.\n* Provided options to toggle white lists of `ssvm_process` in `ssvm` tool.\n  * `--allow-command COMMAND` to add a command into white list in `ssvm_process` host functions.\n  * `--allow-command-all` to allow all commands in `ssvm_process` host functions.\n* Added the documentation of [SSVM ecosystem](https://github.com/second-state/SSVM/blob/master/docs/ecosystem.md).\n\nFixed issues:\n\n* Fixed the loading issues in `file manager`.\n  * Refined performance and added error handling in `readBytes`.\n  * Fixed `LEB128` and `ULEB128` decoding and error codes.\n* Fixed security issues of executing commands in `ssvm_process` host functions.\n  * Managed a white list for command execution.\n\nRefactor:\n\n* Used vector of instance instead of `std::unique_ptr` in AST nodes.\n* Merged all instruction node classes.\n  * Added `OpCode::Else` instruction.\n  * Serialized the instruction sequences. Move out the block body of `If`, `Block`, and `Loop` instructions.\n* Applied the proposal configuration checking in the loader phase.\n  * Moved the `OpCode` and value type validation of proposal configuration checking to loader phase.\n  * Fixed the logging message.\n  * Added helper functions to clean codes of logging.\n* Refactored the validator for instruction serialization.\n  * Removed the duplicated proposal configuration checking done at the loader phase.\n  * Serialized the instruction iterating when validating.\n* Refactored the `Label` in `stack manager`.\n  * `Label` will record the `from` instruction iterator that causes entering this label.\n  * Removed the `next` instruction getter in `stack manager`.\n* Refactored the instruction iterating mechanism in `interpreter`.\n  * Used the `program counter` to iterate and execute the instructions.\n  * Merged all switch cases of `OpCode`.\n* Moved out `AOT` related proxy codes and helper functions in `interpreter` to dependent files.\n\nTools:\n\n* Added `binfmt` supporting for `WASM` interpreter.\n  * Please use the tool `tools/ssvm/ssvm-static` with the same arguments as `ssvm`.\n* Provided `manylinux*` support for legacy operatoring systems\n  * `manylinux1` is based on CentOS 5.9\n  * `manylinux2010` is based on CentOS 6\n  * `manylinux2014` is based on CentOS 7\n\nTests:\n\n* Updated file manager tests for `LEB128` and `ULEB128` decoding.\n* Updated AST tests for refactored AST nodes.\n* Updated instruction tests for refactored instruction nodes.\n* Added `PO` tests.\n* Added `ssvm_process` tests.\n\n### 0.7.2 (2020-12-17)\n\nFeatures:\n\n* Added a cmake option to toggle the compilation of `ssvm` and `ssvmr` tools.\n  * This option is `ON` in default.\n  * `cmake -DBUILD_TOOLS=Off` to disable the compilation of `tools/ssvm` folder when building.\n* Applied the [Fixed-width SIMD](https://github.com/webassembly/simd) proposal.\n  * Please refer to the [SIMD document](https://github.com/second-state/SSVM/blob/master/docs/simd.md) for more details.\n* Provided options to toggle proposals for the compiler and runtime.\n  * `--enable-bulk-memory` to enable bulk-memory operations proposal.\n  * `--enable-reference-types` to enable reference types proposal.\n  * `--enable-simd` to enable SIMD proposal.\n  * `--enable-all` to enable all supported proposals.\n* Supported `roundeven` intrinsic in LLVM 11.\n\nFixed issues:\n\n* Used `std::filesystem::path` for all paths.\n* Interpreter\n  * Fixed `call_indirect` table index checking in the validation phase.\n  * Removed redundant `reinterpret_cast` in interpreter.\n* AOT compiler\n  * Forced unalignment in load and store instructions in AOT.\n  * Not to report error in `terminated` case.\n* WASI\n  * Updated size of `linkcount` to `u64`.\n\nRefactor:\n\n* Added `uint128_t` into `SSVM::ValVariant`.\n  * Added number type `v128`.\n* Added `SSVM::RefVariant` for 64bit-width reference variant.\n* Refactor AOT for better performance.\n  * Added code attribute in AOT to speed up normal execution.\n  * Rewrote element-wise boolean operators.\n  * Used vector type in stack and function for better code generation.\n  * Rewrite `trunc` instructions for readability.\n\nTools:\n\n* Deprecated `ssvmr` tool, since the functionalities are the same as `ssvm` tool.\n  * Please use the tool `tools/ssvm/ssvm` with the same arguments.\n* Combined the tools folder. All tools in `tools/ssvm-aot` are moved into `tools/ssvm` now.\n\nTests:\n\n* Added Wasi test cases.\n  * Added test cases for `args` functions.\n  * Added test cases for `environ` functions.\n  * Added test cases for `clock` functions.\n  * Added test cases for `proc_exit` and `random_get`.\n* Updated test suites and categorized them into proposals.\n  * Added SIMD proposal test suite.\n  * [Official test suite](https://github.com/WebAssembly/testsuite)\n  * [SSVM unit test in proposals](https://github.com/second-state/ssvm-unittest/tree/wasm-core)\n\n### 0.7.1 (2020-11-06)\n\nFeatures:\n\n* Applied the [reference types and bulk memory operations](https://webassembly.github.io/reference-types/core/) proposal for AOT.\n* Support LLVM 11.\n\nRefactor:\n\n* Refactor symbols in AOT.\n  * Removed the symbols in instances.\n  * Added intrinsics table for dynamic linking when running a compiled wasm.\n* Merged the program counter into `stack manager`.\n* Added back the `OpCode::End` instruction.\n* Refactored the validator workflow of checking expressions.\n* Used `std::bitset` for VM configuration.\n* Used `std::array` for cost table storage.\n* Combined `include/support` into `include/common`.\n  * Merged `support/castng.h` into `common/types.h`.\n  * Merged `Measurement` into `Statistics`.\n  * Renamed `support/time.h` into `common/timer.h`. Used standard steady clock instead.\n  * Renamed `common/ast.h` into `common/astdef.h`.\n  * Moved `common/ast/` to `ast/`.\n  * Removed the `SSVM::Support` namespace.\n\nTests:\n\n* Applied new test suite of the reference types and bulk memory operation proposal for AOT.\n\n### 0.7.0 (2020-10-16)\n\nFeatures:\n\n* Applied the [reference types and bulk memory operations](https://webassembly.github.io/reference-types/core/) proposal.\n  * Added the definition of reference types.\n    * Added helper functions for function index to `funcref` conversions.\n    * Added helper functions for reference to `externref` conversions.\n  * Added the following new instructions.\n    * Reference instructions:\n      * ref.null\n      * ref.is_null\n      * ref.func\n    * Table instructions:\n      * table.get\n      * table.set\n      * table.init\n      * elem.drop\n      * table.copy\n      * table.grow\n      * table.size\n      * table.fill\n    * Memory instructions:\n      * memory.init\n      * data.drop\n      * memory.copy\n      * memory.fill\n    * Parametric instructions:\n      * select t\n  * Updated implementation of the following instructions.\n    * call_indirect\n    * select\n  * Applied the new definition of `data count section`, `data segment`, and `element segment`.\n  * Applied validation for `data segment` and `element segment`.\n  * Added the `data instance` and `element instance`.\n  * Applied the new instantiation flow.\n\nRefactor:\n\n* Completed the enumeration value checking in the loading phase.\n* Updated the value type definition.\n  * `ValType` is updated to include `NumType` and `RefType`.\n  * `NumType` is updated to include `i32`, `i64`, `f32`, and `f64`.\n  * `RefType` is updated to include `funcref` and `externref`, which replaced the `ElemType`.\n* Updated error codes according to the test suite for the reference types proposal.\n* Extended validation context for recording `datas`, `elements`, and `refs`.\n* Updated runtime structures.\n  * Fixed minimum pages definition in `memory instance`.\n  * Applied new definitions of `table instance`.\n  * Extended `module instance` for placing `data instance` and `element instance`.\n  * Extended `store` for owning `data instance` and `element instance`.\n* Updated template typename aliasing in `interpreter`.\n\nTests:\n\n* Applied new test suite for the proposal.\n  * [Official test suite](https://github.com/WebAssembly/reference-types/tree/master/test/core)\n  * [SSVM unit test for reference types](https://github.com/second-state/ssvm-unittest/tree/wasm-ref-types)\n* Supported `funcref` and `externref` types parameters in core tests.\n* Added `externref` tests for testing object binding and samples.\n  * Please see the [document](https://github.com/second-state/SSVM/blob/master/docs/externref.md) for detail.\n\n### 0.6.9 (2020-10-16)\n\nFeatures:\n\n* Added gas and instruction count measurement in AOT.\n\n### 0.6.8 (2020-10-05)\n\nFeatures:\n\n* Supported loop parameters in AOT.\n* Added optimization level settings in the AOT compiler.\n\nRefactor:\n\n* Applied page based allocation in `memory instance`, instead of preserving 4G at once.\n\nFixed Issues:\n\n* Fixed error marking stdin, stdout, and stderr file descriptor as pre-opened when initializing WASI environment.\n* Fixed `ssvm_process` error handling when execution commands.\n  * Print error message when command not found or permission denied.\n  * Fixed casting of return codes.\n\nTests:\n\n* Split the core test to helper class for supporting AOT core tests in the future.\n\n### 0.6.7 (2020-09-09)\n\nThis is a bug-fix release for the ssvm_process component.\n\nFixed Issues:\n\n* Handle the large size writing to pipe in `ssvm_process`.\n\n### 0.6.6 (2020-09-02)\n\nFeatures:\n\n* Add option for dumping LLVM IR in `ssvmc`.\n* Add `SSVM_Process` configuration.\n  * VM with this option will import `ssvm_process` host modules.\n  * `ssvm_process` host functions are SSVM extension for executing commands.\n  * This host module is to support wasm compiled from rust with [`rust_process_interface_library` crate.](https://github.com/second-state/rust_process_interface_library).\n* Turn on `SSVM_Process` configuration in both `ssvmr` and `ssvm`.\n\nRefactor:\n\n* Apply `mprotect` memory boundary checking in `memory instance`.\n\nFixed Issues:\n\n* Prevent undefined behavior on shift operations in interpreter and file manager.\n\n### 0.6.5 (2020-08-21)\n\nFeatures:\n\n* Support WebAssembly reactor mode in both `ssvmr` and `ssvm`.\n\nRefactor:\n\n* Use `vector` instead of `deque` in `Validator`.\n\nFixed Issues:\n\n* Fixed cost table to support 2-byte instructions.\n* Resolved warnings about signed and unsigned comparing.\n* Fixed printing error about hex strings in error messages.\n* Corrected memory boundary logging in error messages.\n* Ignore `SIGINT` when `ssvm` is forced interrupted.\n\nTests:\n\n* Add ssvm-aot tests.\n\nTools:\n\n* Updated `ssvm` interpreter.\n  * `ssvm` provides interpreter mode of executing wasm.\n  * The usage of `ssvm` is the same as `ssvmr`.\n  * Added `STATIC_BUILD` mode for linking std::filesystem statically.\n\n### 0.6.4 (2020-07-30)\n\nThis is a bug-fix release for the warnings.\n\nFixed Issues:\n\n* Resolved warnings with compilation flag `-Wall`.\n* Add `-Wall` flag in CMakeFile.\n\nRefactor:\n\n* Refactored instruction classes for supporting 2-byte instructions.\n* Refined corresponding switch cases in validator, interpreter, and AOT.\n\n### 0.6.3 (2020-07-23)\n\nThis is a bug-fix release for the wasi component.\n\nFixed Issues:\n\n* Change the fd number remap mechanism from static offset to dynamic map.\n\n### 0.6.2 (2020-07-22)\n\nFeatures:\n\n* New target support:\n  * Add aarch64 target support for both ssvm-interpreter and ssvm-aot tools.\n* Wasm spec 1.1 support:\n  * Implement `multi-value return` proposal.\n  * Implement `signed extension` and `saturated convert` instructions.\n    * i32.extend8_s\n    * i32.extend16_s\n    * i64.extend8_s\n    * i64.extend16_s\n    * i64.extend32_s\n    * i32.trunc_sat_f32_s\n    * i32.trunc_sat_f32_u\n    * i32.trunc_sat_f64_s\n    * i32.trunc_sat_f64_u\n    * i64.trunc_sat_f32_s\n    * i64.trunc_sat_f32_u\n    * i64.trunc_sat_f64_s\n    * i64.trunc_sat_f64_u\n* Wasm spec test suites support:\n  * Add [ssvm-unittest](https://github.com/second-state/ssvm-unittest) toolkit for integrating wasm spec test suites.\n  * Enable `assert_invalid` tests\n* Wasi support:\n  * Enable environ variables support:\n    * add `--env` option for environment variables.\n    * allow developers to append more environment variables from a given env list, e.g. `PATH=/usr/bin`, `SHELL=ZSH`.\n  * Enable preopens support:\n    * add `--dir` option for preopens directories.\n    * allow developers to append more preopens directories from a given dir list, e.g. `/sandbox:/real/path`, `/sandbox2:/real/path2`.\n* New Statistics API:\n  * With statistics class, developers can get the following information after each execution:\n    * Total execution time in `us`. (= `Wasm instruction execution time` + `Host function execution time`)\n    * Wasm instruction execution time in `us`.\n    * Host function execution time in `us`. A host function can be a evmc function like `evmc::storage_get`, a wasi function like `random_get`, or any customized host function.\n    * Instruction count. (Total executed instructions in the previous round.)\n    * Total gas cost. (Execution cost by applying ethereum-flavored wasm cost table.)\n    * Instruction per second.\n* Validator:\n  * Support Wasm 1.1 instructions validation.\n  * Support blocktype check which is used in multi-value return proposal.\n* Logging system:\n  * Support 2-byte instructions.\n\nRefactor:\n\n* Remove redundant std::move in return statements.\n\nFixed Issues:\n\n* Fix std::filesystem link issue in ssvm-aot tool.\n* Fix `-Wreorder` warnings in errinfo.h\n* Fix several implementation errors in wasi functions.\n\nTools:\n\n* CI: Update base image from Ubuntu 18.04 to Ubuntu 20.04\n\n### 0.6.1 (2020-06-24)\n\nFeatures:\n\n* Error Logging System\n  * Add information structures to print information when an error occurs.\n  * Apply error logging in every phase.\n\nRefactor:\n\n* Internal tuple span mechanism\n  * Apply C++20 `span` features instead of `std::vector &`.\n* Internal string passing mechanism\n  * Apply C++17 `std::string_view` for passing strings.\n* Move enumeration definitions\n  * Add string mapping of types, instructions, and AST nodes.\n  * Move enumerations to SSVM top scope.\n* Memory instance passing in host functions\n  * Pass pointer instead of reference of memory instance to allow `nullptr`.\n\nFixed Issues:\n\n* Instantiation Phase\n  * Fixed boundary checking bugs when initializing data sections.\n* Function invocation\n  * Add dummy frame when invoking function from VM.\n\n### 0.6.0 (2020-06-08)\n\nFeatures:\n\n* Building System\n  * Add CMake option `SSVM_DISABLE_AOT_RUNTIME` to disable building ahead of time compilation mode.\n* Wasm AST\n  * Add support of multiple partitions of sections in wasm module.\n* AOT\n  * Add SSVM-AOT tools.\n\nTools:\n\n* SSVM-AOT\n  * Enable to compile and run separately.\n  * Enable to run compiled module and normal module with the interpreter.\n\nRefactor:\n\n* Internal tuple span mechanism\n  * Apply C++20 `span` features in host functions.\n* Internal error handling mechanism\n  * Apply non-exception version of `expected`.\n* Refine CMake files\n  * Update file copying macro in `CMakeFile` to support recursively copying.\n  * Refine include paths and dependencies in every static library.\n  * Modularize static libraries to be included as submodules easier.\n* Interpreter\n  * Use function address in `Store` for invoking instead of the exported function name.\n  * Support invocation of a host function.\n* Host functions\n  * Return `Expect` instead of `ErrCode` in host functions.\n  * Return function return values in `Expect` class rather than in function parameter.\n* New VM APIs\n  * Add routine to invoke a function of registered and named module in `Store`.\n  * Removed old `executor` and use `interpreter` instead.\n  * Renamed `ExpVM` to `VM` and removed the old one.\n  * Apply new `VM` to all tools.\n* AOT\n  * Integrated into new VM API and HostFunctions\n  * Generate minimum machine code for `nearestint` instructions.\n\nFixed Issues:\n\n* Loader\n  * Add checking Wasm header and version when loading.\n* Validation\n  * Fix `export section` checking to support `\"\"` function name.\n  * Fix type transforming when function invocation and return.\n* Runtime Data Structure\n  * Fix the wrong table resizing when initialization in `table instance`.\n* Interpreter\n  * Instantiation\n    * Fix instantiation steps of `data` and `element sections`.\n    * Check `memory` and `table instances` boundary according to Wasm spec.\n    * Not to replace data in `memory` and `table instances` until all checkings were done.\n  * Engine\n    * Fix wrong arity assignment in `loop` instruction.\n    * Fix wrong answer issue in `trunc` and `clz` instructions.\n    * Fix logic of `div` instruction in both integer and floating-point inputs.\n    * Fix wrong handling of `NaN` operand in `min` and `max` instructions.\n    * Add dummy frame before function invocation according to Wasm spec.\n    * Add memory boundary checking when loading value in `memory` instructions.\n* AOT\n  * Fix wrong handling of the minimum operand in `mod` instructions.\n  * Fix wrong handling of `NaN` operand in `min` and `max` instructions.\n\nTests:\n\n* Remove `ssvm-evmc` tests.\n* (Experimental) Add unit tests for C++ `span` feature.\n\nDeprecated:\n\n* SSVM-Proxy is removed.\n* SSVM-EVMC is removed.\n  * [SSVM-EVMC](https://github.com/second-state/ssvm-evmc) is separated from this project as an independent repository.\n\n### 0.5.1 (2020-04-09)\n\nSSVM 0.5.1 is a bug-fix release from 0.5.0.\n\n* Issues:\n  * Set correct reset timing of the interpreter.\n  * Fix data copying in table instance in the instantiation phase.\n  * Fix label popping in stack manager.\n\n### 0.5.0 (2020-04-01)\n\nFeatures:\n\n* Ethereum environment interface\n  * Implemented all EEI functions.\n  * For more details, please refer to [Ewasm functions design document](docs/evm/design_document.md)\n* Validation\n  * Completed validations for wasm sections.\n  * Completed checkings in const expressions.\n* Runtime Wasm module registering\n  * WASM modules can be registered into `Store` for importing.\n  * Host modules, which may contain host functions and `global`s, can be registered into `Store`.\n* (Experimental) New VM APIs\n  * New VM is refactoring from legacy’s VM and provides a rapidly running process for WASM.\n  * Export `Store` for external access.\n* Node.js addon\n  * Integrate SSVM with Node.js Addon API.\n  * [SSVM Node.js addon](https://github.com/second-state/ssvm-napi) is separated from this project as an independent repository.\n\nRefactor:\n\n* Code structure layout\n  * Create `common` namespace for cross-component data structures and type definitions.\n  * Extract AST structures from ast to `common`.\n  * Extract duplicate enumerations to `common`.\n  * Collects all error code classes into `common`.\n* Internal error handling mechanism\n  * Apply C++ p0323r9 `expected` features\n  * Add several helper functions for wrapping return values with error code.\n* Wasm loader\n  * Simplify workflow.\n  * Take a wasm input and return an `AST` object directly.\n* Wasm validator\n  * Simplify workflow.\n  * Take an `AST` object and return the results.\n  * Rename `validator/vm` to `formchecker`.\n* Refine runtime data structure\n  * Extract `instance`s, `host function`s, `stack manager`, and `store manager` classes to `runtime` folder.\n  * Extract `frame`, `label`, and `value` entry classes into `stack manager`.\n  * Delete redundant checks in `stack manager`. All of these checks are verified in the validation stage.\n  * Add `ImportObj` class for handling the host modules registration.\n* Interpreter\n  * Create `interpreter` namespace.\n  * Extract `executor` class to `interpreter`.\n  * Add instantiation methods for registering host modules.\n* Host functions\n  * Create `host` namespace.\n  * Extract `EEI`, `Wasi-core`, and `ONNC` host functions to `host`.\n  * Make host functions construction in host modules.\n  * Extract `host environment`s from `environment manager` to respective `host module`s.\n* Refactoring from legacy VM.\n  * Simplify workflow. Provide two approaches for invoking a wasm function.\n    * All-in-one way: Calling `runWasmFile` can instantiate and invoke a wasm function directly.\n    * Step-by-step way: Calling `loadWasm`, `validate`, `instantiate`, `execute` sequentially can make developers control the workflow manually.\n  * External access APIs\n    * Access `export`ed wasm functions.\n    * Export `Store`.\n    * Export measurement data class including instruction counter, timer, and cost meter.\n  * Provide registration API for wasm modules and host modules.\n  * Extract `host environment`s of `EEI` and `Wasi-core` into respective `host module`s.\n  * Apply experimental VM to `ssvm-proxy` and `ssvm-evmc` tools.\n\nTools:\n\n* Remove unused ssvm-evm\n  * `ssvm-evm` is replaced by `ssvm-evmc`.\n* (Experimental) Add sub-project `ssvm-aot`\n  * `ssvm-aot` provides ahead-of-time(AOT) compilation mechanism for general wasm applications.\n\nTests:\n\n* Remove redundant `ssvm-evm` tests.\n* (Experimental) Add integration tests for `ssvm-aot`.\n* (Experimental) Add unit tests for C++ `expected` feature.\n* Move `AST` tests to the test top folder.\n\nFixed issues:\n\n* Ethereum Environment Interface\n  * Fix function signatures.\n  * Return `fail` instead of `revert` when the execution state is `out of gas`.\n  * Handle memory edge case when loading and storing from memory instance.\n  * Add missing check for evmc flags.\n  * Set running code to evmc environment.\n* Complete import matching when instantiation in the interpreter.\n* Fix lost of validation when importing `global`s.\n\n### 0.4.0 (2020-01-17)\n\nFeatures:\n\n* Ethereum environment interface implementation\n  * Add EVMC library.\n  * [Ewasm functions implemented](docs/evm/design_document.md)\n  * Update gas costs of Ewasm functions.\n\nRefactor:\n\n* Host functions:\n  * Use the template to generate wasm function type of host function body.\n  * Move function module name and function name to host function class.\n\nTools:\n\n* Sub-project EVM with evmc\n  * SSVM-EVMC integrates EVMC and Ethereum Environment Interface(EEI).\n  * SSVM-EVMC is a shared library for EVMC-compatible clients.\n\nTests:\n\n* ERC20 contracts for SSVM-EVMC\n  * Create an example VM for testing.\n  * Test the following functionalities of ERC20 contracts:\n    * Deploy ERC20 contract\n    * Check balance\n    * Check total supply\n    * Transfer\n    * Approve\n    * Check allowance\n\n### 0.3.2 (2020-01-09)\n\nFixed issues:\n\n* Handle empty length of memory in `vm_snapshot`.\n* Correct error message when execution failed in SSVM proxy mode.\n\n### 0.3.1 (2020-01-07)\n\nFixed issues:\n\n* Change the naming style of JSON format in SSVM proxy mode\n  * Use snake case for the keys of JSON files instead\n* Change the arguments and return value formats.\n  * Add `argument_types` and `return_types` in input JSON format.\n* Expand home directory path\n  * Accept ~ in the file path\n\n### 0.3.0 (2019-12-27)\n\nFeatures:\n\n* WebAssembly Validation\n  * Implement the Wasm Validation mechanism. SSVM will validate wasm modules before execution.\n* Snapshot and restore execution state\n  * SSVM provides restore mechanism from the previous execution state.\n  * SSVM provides a snapshot mechanism to dump the current execution state.\n* [JSON interface Spec](docs/ssvm-proxy/design_document.md)\n  * Initialize and set up SSVM via input JSON format.\n  * Retrieve execution results via output JSON format.\n\nTools:\n\n* Sub-project RPC service proxy mode\n  * SSVM-PROXY is a component of [SSVMRPC service](https://github.com/second-state/SSVMRPC).\n  * SSVM-PROXY can archive current execution states and serialize these data into output JSON format.\n  * SSVM-PROXY can restore previous program states from input JSON format.\n\n### 0.2.0 (2019-12-18)\n\nFeatures:\n\n* Native Cost Metering\n  * SSVM provides CostTab for each instruction including Wasm, Wasi, Ewasm.\n  * With this feature, users can set the cost limit for measuring the execution cost.\n* Built-in performance timer\n  * TimeRecord collects execution time for the performance analysis.\n  * TimeRecord supports multiple timers.\n  * SSVM also provides Wasi timer API for developers to customize TimeRecord.\n* Multiple Virtual Machine Environment\n  * Wasm mode: Support general Wasm program.\n  * Wasi mode: In addition to Wasm mode, this mode contains basic Wasi functions like print.\n  * QITC mode: In addition to Wasi mode, this mode is designed for ONNC runtime to execute AI models by leveraging Qualcomm Hexagon SDK.\n  * Ewasm mode: In addition to Wasm mode, this mode is designed for Ethereum flavor WebAssembly.\n* Start functions enhancement\n  * Support start function assignment. This makes users invoke an exported function with a given function name.\n  * Support start function arguments and return value. This makes users can insert arguments and retrieve result after execution.\n* Simple statistics output\n  * Dump total execution time and instruction per second for benchmarking.\n  * Print used gas costs for Ewasm mode.\n  * Print storage and return values.\n\nTools:\n\n* Sub-project Qualcomm Innovate in Taiwan Challenge(a.k.a QITC) 2019\n  * SSVM-QITC enables AI model execution by integrating [ONNC](https://github.com/ONNC/onnc) runtime and Qualcomm Hexagon SDK.\n  * With this tool, users can run AI model inference within a WebAssembly Virtual Machine.\n* Sub-project Ethereum\n  * SSVM-EVM integrates the Ethereum Environment Interface(EEI) as a WebAssembly extension.\n  * With this tool, users can run blockchain applications, which are compiled into Ewasm bytecodes.\n* Sub-project General Wasi Support\n  * SSVM tool provides basic Wasi functions support, such as print function.\n\n### 0.1.0 (2019-11-29)\n\nFeatures:\n\n* Lexer: Support full wasm bytecode format\n* AST: Be able to load a wasm module\n* Instantiate: Support wasm module instantiation\n\nRuntime:\n\n* Support Wasi-core functions\n* Support Ewasm functions\n\nTest:\n\n* Support ERC20 token contracts\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSE.spdx",
          "type": "blob",
          "size": 1.9013671875,
          "content": "## This file states the license of this package and possibly its subpackages\n## in machine and human readable format. The PackageName refers to the package\n## whose license is defined by PackageLicenseConcluded.\n## For more information about this file format visit the SPDX website at\n## https://spdx.org\n\nSPDXVersion: SPDX-2.1\nDataLicense: CC0-1.0\nSPDXID: SPDXRef-DOCUMENT\nDocumentNamespace: https://wasmedge.org/\nDocumentName: LICENSE.spdx\n\nCreator: Organization: Second State INC (contact@secondstate.io)\n\n## Package Information\nPackageName: wasmedge\nSPDXID: SPDXRef-wasmedge\nPackageOriginator: Organization: Second State INC (contact@secondstate.io)\nPackageLicenseDeclared: Apache-2.0\nFilesAnalyzed: false\n\nPackageName: blake3\nSPDXID: SPDXRef-blake3\nPackageFileName: ./thirdparty/blake3\nPackageHomePage: https://github.com/BLAKE3-team/BLAKE3\nPackageOriginator: Samuel Neves and Jack O'Connor\nPackageLicenseDeclared: Apache-2.0\nFilesAnalyzed: false\n\nPackageName: wasi-cpp-header\nSPDXID: SPDXRef-wasi-cpp-header\nPackageFileName: ./utils/wasi-cpp-header\nPackageOriginator: Organization: Second State INC (contact@secondstate.io)\nPackageLicenseDeclared: Apache-2.0\n\nPackageName: llama.cpp\nSPDXID: SPDXRef-llama.cpp\nPackageFileName: ./plugins/wasi_nn/CMakeLists.txt\nPackageHomePage: https://github.com/ggerganov/llama.cpp\nPackageOriginator: Georgi Gerganov\nPackageLicenseDeclared: MIT\nPackageDownloadLocation: git://github.com/ggerganov/llama.cpp.git\n\nPackageName: cpr\nSPDXID: SPDXRef-cpr\nPackageFileName: ./plugins/wasi_http/CMakeLists.txt\nPackageHomePage: https://github.com/libcpr/cpr\nPackageOriginator: Huu Nguyen\nPackageLicenseDeclared: MIT\nPackageDownloadLocation: git@github.com:libcpr/cpr.git\n\n## Relationships\nRelationship: SPDXRef-wasmedge CONTAINS SPDXRef-blake3\nRelationship: SPDXRef-wasmedge CONTAINS SPDXRef-wasi-cpp-header\nRelationship: SPDXRef-wasmedge CONTAINS SPDXRef-llama.cpp\nRelationship: SPDXRef-wasmedge CONTAINS SPDXRef-cpr\n"
        },
        {
          "name": "README-ja.md",
          "type": "blob",
          "size": 9.728515625,
          "content": "<div align=\"right\">\n\n  [Readme in English](README.md) | [中文](README-zh.md) | [正體中文](README-zh-TW.md)\n\n</div>\n\n<div align=\"center\">\n\n![WasmEdge Logo](/docs/wasmedge-runtime-logo.png)\n\n# [🤩 WasmEdge は、ご自身のデバイスで LLM を実行する最も簡単で早い方法です。 🤩](https://www.secondstate.io/articles/wasm-runtime-agi/)\n\nWasmEdge は軽量、高性能、拡張可能な WebAssembly ランタイムです。現在、[最速の Wasm VM](https://ieeexplore.ieee.org/document/9214403) になります。WasmEdge は、[CNCF](https://www.cncf.io/) が主催する公式サンドボックスプロジェクトでです。その[ユースケース](https://wasmedge.org/book/en/use_cases.html)には、モダンなウェブアプリケーションアーキテクチャ(Isomorphic & Jamstack　アプリケーション)、エッジクラウド上のマイクロサービス、サーバーレス　SaaS API、組み込み機能、スマートコントラクト、スマートデバイスなどが含まれます。\n\n![build](https://github.com/WasmEdge/WasmEdge/workflows/build/badge.svg)\n[![codecov](https://codecov.io/gh/WasmEdge/WasmEdge/branch/master/graph/badge.svg)](https://codecov.io/gh/WasmEdge/WasmEdge)\n[![CodeQL](https://github.com/WasmEdge/WasmEdge/actions/workflows/codeql-analysis.yml/badge.svg)](https://github.com/WasmEdge/WasmEdge/actions/workflows/codeql-analysis.yml)\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2FWasmEdge%2FWasmEdge.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2FWasmEdge%2FWasmEdge?ref=badge_shield)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/5059/badge)](https://bestpractices.coreinfrastructure.org/projects/5059)\n\n</div>\n\n# クイックスタートガイド\n\n🚀 WasmEdge の[インストール](https://wasmedge.org/docs/start/install) \\\n🤖 WasmEdge への[ビルド](https://wasmedge.org/docs/category/build-wasmedge-from-source)と[コントリビュート](https://wasmedge.org/docs/contribute/) \\\n⌨️ CLIまたは[Docker](https://wasmedge.org/docs/start/getting-started/quick_start_docker)からスタンドアロンのWasmプログラムまたは[JavaScriptプログラム](https://wasmedge.org/docs/category/develop-wasm-apps-in-javascript)を[実行](https://wasmedge.org/docs/category/running-with-wasmedge) \\\n🔌 [Go](https://wasmedge.org/docs/category/go-sdk-for-embedding-wasmedge)、[Rust](https://wasmedge.org/docs/category/rust-sdk-for-embedding-wasmedge)、[C](https://wasmedge.org/docs/category/c-sdk-for-embedding-wasmedge)アプリにWasm関数を組み込みます \\\n🛠 [Kubernetes](https://wasmedge.org/docs/category/deploy-wasmedge-apps-in-kubernetes)、[データストリーミングフレームワーク](https://wasmedge.org/docs/embed/use-case/yomo)、[ブロックチェーン](https://medium.com/ethereum-on-steroids/running-ethereum-smart-contracts-in-a-substrate-blockchain-56fbc27fc95a)を使用してWasmランタイムを管理し、オーケストレーションする \\\n📚 **[公式ドキュメントをチェック](https://wasmedge.org/docs/)**\n\n# イントロ\n\nWasmEdge ランタイムは、含まれる WebAssembly バイトコードプログラムに対して、明確に定義された実行サンドボックスを提供します。ランタイムは、オペレーティングシステムリソース（ファイルシステム、ソケット、環境変数、プロセスなど）とメモリ空間の分離と保護を提供します。WasmEdge の最も重要なユースケースは、ソフトウェア製品（SaaS、Software-Defined Vehicle、エッジノード、あるいはブロックチェーンノードなど）のプラグインとして、ユーザー定義コードやコミュニティ貢献コードを安全に実行することになります。これにより、サードパーティの開発者、ベンダー、サプライヤー、コミュニティメンバーがソフトウェア製品を拡張し、カスタマイズすることが可能になります。**[詳細はこちら](https://wasmedge.org/docs/contribute/users)**\n\n## パフォーマンス\n\n* [A Lightweight Design for Highperformance Serverless Computing](https://arxiv.org/abs/2010.07115)、IEEE Software に掲載、Jan 2021。[https://arxiv.org/abs/2010.07115](https://arxiv.org/abs/2010.07115)\n* [Performance Analysis for Arm vs. x86 CPUs in the Cloud](https://www.infoq.com/articles/arm-vs-x86-cloud-performance/)、infoQ.com に掲載、2021年1月。[https://www.infoq.com/articles/arm-vs-x86-cloud-performance/](https://www.infoq.com/articles/arm-vs-x86-cloud-performance/)\n* [WasmEdge is the fastest WebAssembly Runtime in Suborbital Reactr test suite](https://blog.suborbital.dev/suborbital-wasmedge)、2021年12月\n\n## 機能\n\nWasmEdge は、C/C++、Rust、Swift、AssemblyScript、または Kotlin のソースコードからコンパイルされた標準的な WebAssembly バイトコードプログラムを実行できます。サードパーティの ES6、CJS、NPM モジュールを含む [JavaScript](https://wasmedge.org/docs/category/develop-wasm-apps-in-javascript) を、安全、高速、軽量、ポータブル、コンテナ化されたサンドボックスで実行します。また、これらの言語の混合（例えば、[JavaScript API を実装するために Rust を使用する](https://wasmedge.org/docs/develop/javascript/rust)）、[Fetch](https://wasmedge.org/docs/develop/javascript/networking#fetch-client)API、エッジサーバー上の[サーバーサイドレンダリング(SSR)](https://wasmedge.org/docs/develop/javascript/ssr)機能もサポートしています。\n\nWasmEdge は、[すべての標準的な WebAssembly 機能と多くの提案されている拡張機能](https://wasmedge.org/docs/start/wasmedge/extensions/proposals)をサポートしています。また、クラウドネイティブやエッジコンピューティングの用途に合わせた拡張機能も多数サポートしています（[WasmEdge ネットワークソケット](https://wasmedge.org/docs/category/socket-networking)、[Postgres および MySQL ベースのデータベースドライバ](https://wasmedge.org/docs/category/database-drivers)、[WasmEdge AI 拡張機能](https://wasmedge.org/docs/category/ai-inference)など）。\n\n **WasmEdge の[テクニカルハイライト](https://wasmedge.org/docs/start/wasmedge/features)についてはこちらをご覧ください。**\n\n## インテグレーションと管理\n\nWasmEdge とそれに含まれる wasm プログラムは、新規プロセスとして [CLI](https://wasmedge.org/docs/category/running-with-wasmedge) から起動することも、既存プロセスから起動することもできます。既存のプロセス（例えば、実行中の [Go](https://wasmedge.org/docs/category/go-sdk-for-embedding-wasmedge) や [Rust](https://wasmedge.org/docs/category/rust-sdk-for-embedding-wasmedge) プログラムから起動した場合、WasmEdge は単に関数としてプロセス内で実行されます。現在のところ、WasmEdge はまだスレッドセーフではありません。独自のアプリケーションやクラウドネイティブフレームワークで WasmEdge を使用するには、以下のガイドを参照してください。\n\n* [WasmEdge をホストアプリケーションに組み込む](https://wasmedge.org/docs/embed/overview)\n* [コンテナツールを使用した WasmEdge インスタンスのオーケストレーションと管理](https://wasmedge.org/docs/category/deploy-wasmedge-apps-in-kubernetes)\n* [WasmEdge アプリを Dapr マイクロサービスとして実行する](https://wasmedge.org/docs/develop/rust/dapr)\n\n# コミュニティ\n\n## コントリビュート\n\nWasmEdge プロジェクトにコントリビュートしたい場合は、[CONTRIBUTING](https://wasmedge.org/docs/contribute/overview) ドキュメントを参照してください。アイデアをお探しなら、[\"help wanted\" issues](https://github.com/WasmEdge/WasmEdge/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22)をチェックしてください！\n\n## ロードマップ\n\n[プロジェクトロードマップ](https://github.com/WasmEdge/WasmEdge/blob/master/docs/ROADMAP.md)で、WasmEdge の今後の機能と計画をご確認ください。\n\n## コンタクト\n\nご質問がある場合は、関連プロジェクトの GitHub issue を開くか、以下のチャンネルにご参加ください:\n\n* メーリングリスト: [WasmEdge@googlegroups.com](https://groups.google.com/g/wasmedge/) にメールを送信\n* Discord: [WasmEdge Discord サーバー](https://discord.gg/h4KDyB8XTt)に参加してください！\n* Slack: [CNCF Slack](https://slack.cncf.io/) の #WasmEdge チャンネルに参加する。\n* Twitter: [Twitter](https://twitter.com/realwasmedge) で @realwasmedge をフォローする。\n\n## 採用者\n\nプロジェクトで WasmEdge を使用している[採用者リスト](https://wasmedge.org/docs/contribute/users/)をご覧ください。\n\n## コミュニティミーティング\n\n月に一度、コミュニティミーティングを開催し、新機能の紹介や新しいユースケースのデモ、質疑応答などを行います。どなたでもご参加いただけます！\n\n時間: 毎月第1火曜日午後11時（香港時間）／午前7時（太平洋標準時）。\n\n[パブリックミーティングのアジェンダ／ノート](https://docs.google.com/document/d/1iFlVl7R97Lze4RDykzElJGDjjWYDlkI8Rhf8g4dQ5Rk/edit#) | [Zoom リンク](https://us06web.zoom.us/j/89156807241?pwd=VHl5VW5BbmY2eUtTYkY0Zm9yUHRRdz09)\n\n# ライセンス\n\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2FWasmEdge%2FWasmEdge.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2FWasmEdge%2FWasmEdge?ref=badge_large)\n"
        },
        {
          "name": "README-zh-TW.md",
          "type": "blob",
          "size": 6.7392578125,
          "content": "<div align=\"right\">\n\n  [Readme in English](README.md) | [中文文档](README-zh.md) | [日本語で読む](README-ja.md)\n\n</div>\n\n<div align=\"center\">\n  \n![WasmEdge Logo](/docs/wasmedge-runtime-logo.png)\n\nWasmEdge （前名為 SSVM ） 是為邊緣運算最佳化的輕量級、高性能、可擴充的 WebAssembly (Wasm) 虛擬機器，可運用在雲端原生、邊緣運算、去中心化的應用程式。 WasmEdge 現今是目前市面上 [最快的 Wasm 虛擬機器之一](https://ieeexplore.ieee.org/document/9214403)。 WasmEdge 是由 [CNCF](https://www.cncf.io/) （Cloud Native Computing Foundation ，雲端原生運算基金會）託管的官方沙箱項目之一。其[使用情境](https://wasmedge.org/docs/zh-tw/start/usage/use-cases)包含 serverless apps 、嵌入式函數、微型服務、智慧合約和 IoT 裝置。\n\n![build](https://github.com/WasmEdge/WasmEdge/workflows/build/badge.svg)\n[![Total alerts](https://img.shields.io/lgtm/alerts/g/WasmEdge/WasmEdge.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/WasmEdge/WasmEdge/alerts/)\n[![Language grade: C/C++](https://img.shields.io/lgtm/grade/cpp/g/WasmEdge/WasmEdge.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/WasmEdge/WasmEdge/context:cpp)\n[![codecov](https://codecov.io/gh/WasmEdge/WasmEdge/branch/master/graph/badge.svg)](https://codecov.io/gh/WasmEdge/WasmEdge)\n[![CodeQL](https://github.com/WasmEdge/WasmEdge/actions/workflows/codeql-analysis.yml/badge.svg)](https://github.com/WasmEdge/WasmEdge/actions/workflows/codeql-analysis.yml)\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2FWasmEdge%2FWasmEdge.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2FWasmEdge%2FWasmEdge?ref=badge_shield)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/5059/badge)](https://bestpractices.coreinfrastructure.org/projects/5059)\n  \n</div>\n\n# 快速開始指引\n\n🚀 [安装](https://wasmedge.org/docs/zh-tw/start/install) WasmEdge\\\n🤖 [編譯](https://wasmedge.org/docs/zh-tw/category/build-wasmedge-from-source) 並[貢獻](https://wasmedge.org/docs/zh-tw/contribute/) WasmEdge\\\n⌨️ [從 CLI 執行](https://wasmedge.org/docs/zh-tw/category/running-with-wasmedge)一個獨立的 Wasm 程式或 [JavaScript 程式](https://wasmedge.org/docs/zh-tw/category/develop-wasm-apps-in-javascript) \\\n🔌 在 [Node.js](https://github.com/second-state/wasm-learning/tree/master/ssvm/file-example) 、 [Go 語言](https://wasmedge.org/docs/zh-tw/category/go-sdk-for-embedding-wasmedge)、或是 [Rust 應用程式](https://www.secondstate.io/articles/getting-started-with-rust-function/)嵌入 Wasm 函式 \\\n🛠 使用 [Docker 工具](https://www.secondstate.io/articles/manage-webassembly-apps-in-wasmedge-using-docker-tools/)、[即時資料流框架](https://www.secondstate.io/articles/yomo-wasmedge-real-time-data-streams/), 和 [區塊鏈](https://medium.com/ethereum-on-steroids/running-ethereum-smart-contracts-in-a-substrate-blockchain-56fbc27fc95a) 管理和編排 Wasm runtimes\n\n# 簡介\n\nWasmEdge 為其執行的 Wasm bytecode 程式提供了一個有良好定義的沙箱。這個專案的 Runtime 為作業系統資源（例如：檔案系統、 Sockets 、環境變數、程序）和記憶體空間提供獨立性與保護。 WasmEdge 的最重要應用領域是在軟體產品（例如：SaaS 、汽車作業系統、邊緣節點，甚至區塊鏈節點）中安全地執行使用者自定義或者經由社群貢獻的程式碼。它使第三方開發者、軟體供應商和社群成員能夠擴充和客製化應用軟體。\n\n<div align=\"center\">\n  \n**檢視 WasmEdge 的[使用情境](https://wasmedge.org/docs/zh-tw/contribute/users)。**\n\n</div>\n\n## 效能\n\n* 論文：[高效能 Serverless 計算的輕量級設計](https://arxiv.org/abs/2010.07115)，發表於 IEEE Software ，2021年1月。 [https://arxiv.org/abs/2010.07115](https://arxiv.org/abs/2010.07115)\n* 文章：[Performance Analysis for Arm vs. x86 CPUs in the Cloud](https://www.infoq.com/articles/arm-vs-x86-cloud-performance/)，發表於 infoQ.com ，2021年1月。 [https://www.infoq.com/articles/arm-vs-x86-cloud-performance/](https://www.infoq.com/articles/arm-vs-x86-cloud-performance/)\n\n## 特性\n\nWasmEdge 可以執行從 C/C++ 、 Rust 、 Swift 、 AssemblyScript 或 Kotlin 原始碼編譯的標準 WebAssembly bytecode 應用程式，也可以透過嵌入式 [QuickJS 引擎](https://github.com/second-state/wasmedge-quickjs)[執行 JavaScript](https://wasmedge.org/docs/zh-tw/category/develop-wasm-apps-in-javascript)。 WasmEdge 支援所有標準的 WebAssembly 特性和擴充提案，還支援許多為了原生雲端運算與邊緣運算量身定制的擴充（例如： [WasmEdge Tensorflow 擴充](https://www.secondstate.io/articles/wasi-tensorflow/)）。\n\n* [WebAssembly 標準擴充](docs/extensions.md#webassembly-standard-extensions)\n* [WasmEdge 擴充](docs/extensions.md#wasmedge-extensions)\n\nWebAssembly 的 WasmEdge 擴充通常作為 Rust SDK 或 [JavaScript APIs](docs/run_javascript.md) 提供給開發者。\n\n## 集成\n\nWasmEdge 及其執行的 Wasm 應用程式可以作為新應用程序或以現有的程序從 CLI 啟動。如果從現有程序啟動（例如，從正在執行的 [Node.js](https://www.secondstate.io/articles/getting-started-with-rust-function/) 、 [Golang](https://github.com/second-state/wasmedge-go) 或 [Rust](https://github.com/WasmEdge/WasmEdge/tree/master/bindings/rust) 程序）， WasmEdge 將簡單地作為一個函式在程序內運行。目前， WasmEdge 還不是執行緒安全的。如您想在自己的應用程式或者原生雲端框架中使用 WasmEdge ，請參考以下指南。\n\n* [在應用程式中嵌入 WasmEdge](https://wasmedge.org/docs/zh-tw/embed/overview)\n* [使用容器工具管理和編排 WasmEdge 實例](https://wasmedge.org/docs/zh-tw/category/deploy-wasmedge-apps-in-kubernetes)\n* [從 WasmEdge 呼叫原生 host 函式](docs/integrations.md#call-native-host-functions-from-wasmedge)\n\n## 社群\n\n### 貢獻\n\n如果您想為 WasmEdge 專案做出貢獻，請參閱我們的 [CONTRIBUTING](https://wasmedge.org/docs/contribute/overview/) 文件瞭解詳情。 想要獲得靈感，可查看 [需求清單](https://github.com/WasmEdge/WasmEdge/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22)。\n\n### 聯繫\n\n如有任何疑問，請隨時在相關項目上提出 GitHub issue ，或：\n\n* 電子郵件：發送郵件至 [WasmEdge@googlegroups.com](https://groups.google.com/g/wasmedge/)\n* Slack ：加入 #WasmEdge 群組： [CNCF Slack](https://slack.cncf.io/)\n* 推特：在 [Twitter](https://twitter.com/realwasmedge) 跟隨 @realwasmedge\n\n## License\n\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2FWasmEdge%2FWasmEdge.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2FWasmEdge%2FWasmEdge?ref=badge_large)\n"
        },
        {
          "name": "README-zh.md",
          "type": "blob",
          "size": 6.615234375,
          "content": "<div align=\"right\">\n\n  [Readme in English](README.md) | [正體中文文件](README-zh-TW.md) | [日本語で読む](README-ja.md)\n\n</div>\n\n<div align=\"center\">\n  \n![WasmEdge Logo](/docs/wasmedge-runtime-logo.png)\n\nWasmEdge (之前名为 SSVM) 是为边缘计算优化的轻量级、高性能、可扩展的 WebAssembly (Wasm) 虚拟机，可用于云原生、边缘和去中心化的应用。WasmEdge 是目前市场上 [最快的 Wasm 虚拟机](https://ieeexplore.ieee.org/document/9214403)。WasmEdge 是由 [CNCF](https://www.cncf.io/) (Cloud Native Computing Foundation 云原生计算基金会)托管的官方沙箱项目。其[应用场景](https://wasmedge.org/docs/zh/start/usage/use-cases)包括 serverless apps, 嵌入式函数、微服务、智能合约和 IoT 设备。\n\n![build](https://github.com/WasmEdge/WasmEdge/workflows/build/badge.svg)\n[![Total alerts](https://img.shields.io/lgtm/alerts/g/WasmEdge/WasmEdge.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/WasmEdge/WasmEdge/alerts/)\n[![Language grade: C/C++](https://img.shields.io/lgtm/grade/cpp/g/WasmEdge/WasmEdge.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/WasmEdge/WasmEdge/context:cpp)\n[![codecov](https://codecov.io/gh/WasmEdge/WasmEdge/branch/master/graph/badge.svg)](https://codecov.io/gh/WasmEdge/WasmEdge)\n[![CodeQL](https://github.com/WasmEdge/WasmEdge/actions/workflows/codeql-analysis.yml/badge.svg)](https://github.com/WasmEdge/WasmEdge/actions/workflows/codeql-analysis.yml)\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2FWasmEdge%2FWasmEdge.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2FWasmEdge%2FWasmEdge?ref=badge_shield)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/5059/badge)](https://bestpractices.coreinfrastructure.org/projects/5059)\n  \n</div>\n  \n# 快速开始指引\n\n🚀 [安装](https://wasmedge.org/docs/zh/start/install) WasmEdge\\\n🤖 [Build](https://wasmedge.org/docs/zh/category/build-wasmedge-from-source) 并[贡献](https://wasmedge.org/docs/zh/contribute/)给 WasmEdge\\\n⌨️  [从 CLI 跑](https://wasmedge.org/docs/zh/category/running-with-wasmedge)一个独立的 Wasm 程序或 [JavaScript 程序](https://wasmedge.org/docs/zh/category/develop-wasm-apps-in-javascript) \\\n🔌 [嵌入一个 Wasm 函数](https://www.secondstate.io/articles/getting-started-with-rust-function/)在你的[Node.js](https://github.com/second-state/wasm-learning/tree/master/ssvm/file-example)， [Go语言](https://wasmedge.org/docs/zh/category/go-sdk-for-embedding-wasmedge)或 Rust 应用里 \\\n🛠 使用 [Docker 工具](https://www.secondstate.io/articles/manage-webassembly-apps-in-wasmedge-using-docker-tools/)、[数据流框架](https://www.secondstate.io/articles/yomo-wasmedge-real-time-data-streams/), 和 [区块链](https://medium.com/ethereum-on-steroids/running-ethereum-smart-contracts-in-a-substrate-blockchain-56fbc27fc95a) 管理和编排 Wasm runtimes\n\n# 介绍\n\nWasmEdge Runtime为其执行的 Wasm 字节码程序提供了一个有良好定义的执行沙箱。本 Runtime 为操作系统资源（例如，文件系统、sockets、环境变量、进程）和内存空间提供隔离和保护。 WasmEdge 最重要的用例是作为软件产品（例如，SaaS、软件定义的汽车、边缘节点，甚至区块链节点）中的插件安全地执行用户定义或社区贡献的代码。 它使第三方开发者、软件供应商和社区成员能够扩展和定制软件产品。\n\n<div align=\"center\">\n  \n**查看 WasmEdge 的[应用场景](https://wasmedge.org/docs/zh/contribute/users)。**\n\n</div>\n\n## 性能\n\n* 论文：[高性能 Serverless 计算的轻量级设计](https://arxiv.org/abs/2010.07115)，发布于 IEEE Software, 2021年1月。 [https://arxiv.org/abs/2010.07115](https://arxiv.org/abs/2010.07115)\n* 文章：[Performance Analysis for Arm vs. x86 CPUs in the Cloud](https://www.infoq.com/articles/arm-vs-x86-cloud-performance/)，发布于 infoQ.com, 2021年1月。 [https://www.infoq.com/articles/arm-vs-x86-cloud-performance/](https://www.infoq.com/articles/arm-vs-x86-cloud-performance/)\n\n## 特性\n\nWasmEdge 可以运行从 C/C++、Rust、Swift、AssemblyScript 或 Kotlin 源代码编译的标准 WebAssembly 字节码程序。 它还通过嵌入式 [QuickJS 引擎](https://github.com/second-state/wasmedge-quickjs)[运行 JavaScript](https://wasmedge.org/docs/zh/category/develop-wasm-apps-in-javascript)。 WasmEdge 支持所有标准的 WebAssembly 特性和提议的扩展。 它还支持许多为云原生和边缘计算用途量身定制的扩展（例如，[WasmEdge Tensorflow 扩展](https://www.secondstate.io/articles/wasi-tensorflow/)）。\n\n* [WebAssembly 标准扩展](docs/extensions.md#webassembly-standard-extensions)\n* [WasmEdge 扩展](docs/extensions.md#wasmedge-extensions)\n\nWebAssembly 的 WasmEdge 扩展通常作为 Rust SDK 或 [JavaScript APIs](docs/run_javascript.md) 提供给开发者。\n\n## 集成\n\nWasmEdge 及其包含的 wasm 程序可以作为新进程或从现有进程从 CLI 启动。 如果从现有进程（例如，从正在运行的 [Node.js](https://www.secondstate.io/articles/getting-started-with-rust-function/) 或 [Go](https://www.secondstate.io/articles/extend-golang-app-with-webassembly-rust/) 或 [Rust](https://github.com/WasmEdge/WasmEdge/tree/master/bindings/rust) 程序）启动，WasmEdge 将简单地作为函数在进程内运行。 目前，WasmEdge 还不是线程安全的。 为了在您自己的应用程序或云原生框架中使 WasmEdge，请参考以下指南。\n\n* [将 WasmEdge 嵌入 host 应用](https://wasmedge.org/docs/zh/embed/overview)\n* [使用容器工具管理和编排 Wasm 实例](https://wasmedge.org/docs/zh/category/deploy-wasmedge-apps-in-kubernetes)\n* [从 WasmEdge 调用原生 host 程序](docs/integrations.md#call-native-host-functions-from-wasmedge)\n\n## 社区\n\n### 贡献\n\n如果您想为 WasmEdge 项目做出贡献，请参阅我们的 [CONTRIBUTING](https://wasmedge.org/docs/zh-tw/contribute/overview) 文档了解详情。 想要获得灵感，可查看[需求清单](https://github.com/WasmEdge/WasmEdge/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22)!\n\n### 联系\n\n如有任何疑问，请随时在相关项目上提 GitHub issue，或加入下列频道：\n\n* 邮件清单：发送邮件至 [WasmEdge@googlegroups.com](https://groups.google.com/g/wasmedge/)\n* Slack: 加入 #WasmEdge 组群： [CNCF Slack](https://slack.cncf.io/)\n* 推特：在[Twitter](https://twitter.com/realwasmedge)关注 @realwasmedge\n\n## License\n\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2FWasmEdge%2FWasmEdge.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2FWasmEdge%2FWasmEdge?ref=badge_large)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.9453125,
          "content": "<div align=\"right\">\n\n  [中文](README-zh.md) | [正體中文](README-zh-TW.md) | [日本語で読む](README-ja.md)\n\n</div>\n\n<div align=\"center\">\n  \n![WasmEdge Logo](/docs/wasmedge-runtime-logo.png)\n\n# [🤩 WasmEdge is the easiest and fastest way to run LLMs on your own devices. 🤩](https://www.secondstate.io/articles/wasm-runtime-agi/)\n\nWasmEdge is a lightweight, high-performance, and extensible WebAssembly runtime. It is [the fastest Wasm VM](https://ieeexplore.ieee.org/document/9214403) today. WasmEdge is an official sandbox project hosted by the [CNCF](https://www.cncf.io/). Its [use cases](https://wasmedge.org/book/en/use_cases.html) include modern web application architectures (Isomorphic & Jamstack applications), microservices on the edge cloud, serverless SaaS APIs, embedded functions, smart contracts, and smart devices.\n\n![build](https://github.com/WasmEdge/WasmEdge/actions/workflows/build.yml/badge.svg)\n[![codecov](https://codecov.io/gh/WasmEdge/WasmEdge/branch/master/graph/badge.svg)](https://codecov.io/gh/WasmEdge/WasmEdge)\n[![CodeQL](https://github.com/WasmEdge/WasmEdge/actions/workflows/codeql-analysis.yml/badge.svg)](https://github.com/WasmEdge/WasmEdge/actions/workflows/codeql-analysis.yml)\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2FWasmEdge%2FWasmEdge.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2FWasmEdge%2FWasmEdge?ref=badge_shield)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/5059/badge)](https://bestpractices.coreinfrastructure.org/projects/5059)\n\n</div>\n\n# Quick start guides\n\n🚀 [Install](https://wasmedge.org/docs/start/install) WasmEdge \\\n🤖 [Build](https://wasmedge.org/docs/category/build-wasmedge-from-source) and [contribute to](https://wasmedge.org/docs/contribute/) WasmEdge \\\n⌨️ [Run](https://wasmedge.org/docs/category/running-with-wasmedge) a standalone Wasm program or a [JavaScript program](https://wasmedge.org/docs/category/develop-wasm-apps-in-javascript) from CLI or [Docker](https://wasmedge.org/docs/start/getting-started/quick_start_docker) \\\n🔌 Embed a Wasm function in your [Go](https://wasmedge.org/docs/category/go-sdk-for-embedding-wasmedge), [Rust](https://wasmedge.org/docs/category/rust-sdk-for-embedding-wasmedge), or [C](https://wasmedge.org/docs/category/c-sdk-for-embedding-wasmedge) app \\\n🛠 Manage and orchestrate Wasm runtimes using [Kubernetes](https://wasmedge.org/docs/category/deploy-wasmedge-apps-in-kubernetes), [data streaming frameworks](https://wasmedge.org/docs/embed/use-case/yomo), and [blockchains](https://medium.com/ethereum-on-steroids/running-ethereum-smart-contracts-in-a-substrate-blockchain-56fbc27fc95a) \\\n📚 **[Check out our official documentation](https://wasmedge.org/docs/)**\n\n# Introduction\n\nThe WasmEdge Runtime provides a well-defined execution sandbox for its contained WebAssembly bytecode program. The runtime offers isolation and protection for operating system resources (e.g., file system, sockets, environment variables, processes) and memory space. The most important use case for WasmEdge is to safely execute user-defined or community-contributed code as plug-ins in a software product (e.g., SaaS, software-defined vehicles, edge nodes, or even blockchain nodes). It enables third-party developers, vendors, suppliers, and community members to extend and customize the software product. **[Learn more here](https://wasmedge.org/docs/contribute/users)**\n\n## Performance\n\n* [A Lightweight Design for High-performance Serverless Computing](https://arxiv.org/abs/2010.07115), published on IEEE Software, Jan 2021. [https://arxiv.org/abs/2010.07115](https://arxiv.org/abs/2010.07115)\n* [Performance Analysis for Arm vs. x86 CPUs in the Cloud](https://www.infoq.com/articles/arm-vs-x86-cloud-performance/), published on infoQ.com, Jan 2021. [https://www.infoq.com/articles/arm-vs-x86-cloud-performance/](https://www.infoq.com/articles/arm-vs-x86-cloud-performance/)\n* [WasmEdge is the fastest WebAssembly Runtime in Suborbital Reactr test suite](https://blog.suborbital.dev/suborbital-wasmedge), Dec 2021\n\n## Features\n\nWasmEdge can run standard WebAssembly bytecode programs compiled from C/C++, Rust, Swift, AssemblyScript, or Kotlin source code. It [runs JavaScript](https://wasmedge.org/docs/category/develop-wasm-apps-in-javascript), including 3rd party ES6, CJS, and NPM modules, in a secure, fast, lightweight, portable, and containerized sandbox. It also supports mixing of those languages (e.g., to [use Rust to implement a JavaScript API](https://wasmedge.org/docs/develop/javascript/rust)), the [Fetch](https://wasmedge.org/docs/develop/javascript/networking#fetch-client) API, and [Server-side Rendering (SSR)](https://wasmedge.org/docs/develop/javascript/ssr) functions on edge servers.\n\nWasmEdge supports [all standard WebAssembly features and many proposed extensions](https://wasmedge.org/docs/start/wasmedge/extensions/proposals). It also supports a number of extensions tailored for cloud-native and edge computing uses (e.g., the [WasmEdge network sockets](https://wasmedge.org/docs/category/socket-networking),[Postgres and MySQL-based database driver](https://wasmedge.org/docs/category/database-drivers), and the [WasmEdge AI extension](https://wasmedge.org/docs/category/ai-inference)).\n\n **Learn more about [technical highlights](https://wasmedge.org/docs/start/wasmedge/features) of WasmEdge.**\n\n## Integrations and management\n\nWasmEdge and its contained wasm program can be started from the [CLI](https://wasmedge.org/docs/category/running-with-wasmedge) as a new process, or from an existing process. If started from an existing process (e.g., from a running [Go](https://wasmedge.org/docs/category/go-sdk-for-embedding-wasmedge) or [Rust](https://wasmedge.org/docs/category/rust-sdk-for-embedding-wasmedge) program), WasmEdge will simply run inside the process as a function. Currently, WasmEdge is not yet thread-safe. In order to use WasmEdge in your own application or cloud-native frameworks, please refer to the guides below.\n\n* [Embed WasmEdge into a host application](https://wasmedge.org/docs/embed/overview)\n* [Orchestrate and manage WasmEdge instances using container tools](https://wasmedge.org/docs/category/deploy-wasmedge-apps-in-kubernetes)\n* [Run a WasmEdge app as a Dapr microservice](https://wasmedge.org/docs/develop/rust/dapr)\n\n# Community\n\n## Contributing\n\nIf you would like to contribute to the WasmEdge project, please refer to our [CONTRIBUTING](https://wasmedge.org/docs/contribute/overview) document for details. If you are looking for ideas, checkout our [\"help wanted\" issues](https://github.com/WasmEdge/WasmEdge/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22)!\n\n## Roadmap\n\nCheck out our [project roadmap](https://github.com/WasmEdge/WasmEdge/blob/master/docs/ROADMAP.md) to see the upcoming features and plans for WasmEdge.\n\n## Contact\n\nIf you have any questions, feel free to open a GitHub issue on a related project or to join the following channels:\n\n* Mailing list: Send an email to [WasmEdge@googlegroups.com](https://groups.google.com/g/wasmedge/)\n* Discord: Join the [WasmEdge Discord server](https://discord.gg/h4KDyB8XTt)!\n* Slack: Join the #WasmEdge channel on the [CNCF Slack](https://slack.cncf.io/)\n* X (formerly Twitter): Follow @realwasmedge on [X](https://x.com/realwasmedge)\n\n## Adopters\n\nCheck out our [list of Adopters](https://wasmedge.org/docs/contribute/users/) who are using WasmEdge in their projects.\n\n## Community Meeting\n\nWe host a monthly community meeting to showcase new features, demo new use cases, and a Q&A part. Everyone is welcome!\n\nTime: The first Tuesday of each month at 11PM Hong Kong Time/ 7AM PST.\n\n[Public meeting agenda/notes](https://docs.google.com/document/d/1iFlVl7R97Lze4RDykzElJGDjjWYDlkI8Rhf8g4dQ5Rk/edit#) | [Zoom link](https://us06web.zoom.us/j/89156807241?pwd=VHl5VW5BbmY2eUtTYkY0Zm9yUHRRdz09)\n\n# License\n\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2FWasmEdge%2FWasmEdge.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2FWasmEdge%2FWasmEdge?ref=badge_large)\n"
        },
        {
          "name": "SECURITY-INSIGHTS.yml",
          "type": "blob",
          "size": 2.1357421875,
          "content": "header:\n  schema-version: 0.13.4\n  last-updated: '2023-09-05'\n  last-reviewed: '2023-09-05'\n  expiration-date: '2024-09-05T01:00:00.000Z'\n  project-url: https://github.com/WasmEdge/WasmEdge\n  project-release: '0.13.4'\nproject-lifecycle:\n  status: active\n  roadmap: https://github.com/WasmEdge/WasmEdge/blob/master/docs/ROADMAP.md\n  bug-fixes-only: false\n  core-maintainers:\n  - github:juntao\n  - github:hydai\n  - github:q82419\n  - github:ibmibmibm\ncontribution-policy:\n  accepts-pull-requests: true\n  accepts-automated-pull-requests: true\n  automated-tools-list:\n  - automated-tool: misc linters\n    action: denied\n    path:\n    - .github/linters\n  code-of-conduct: https://github.com/WasmEdge/WasmEdge/blob/master/docs/CODE_OF_CONDUCT.md\ndocumentation:\n- https://github.com/WasmEdge/WasmEdge/blob/master/README.md\ndistribution-points:\n- https://github.com/WasmEdge/WasmEdge/releases\nsecurity-artifacts:\n  threat-model:\n    threat-model-created: true\n    evidence-url:\n    - https://github.com/WasmEdge/WasmEdge/blob/master/SECURITY.md\nsecurity-testing:\n- tool-type: sca\n  tool-name: Dependabot\n  tool-version: latest\n  integration:\n    ad-hoc: false\n    ci: true\n    before-release: true\n  comment: |\n    Dependabot is enabled for this repo.\n- tool-type: sca\n  tool-name: Google OSS Fuzz\n  tool-version: latest\n  tool-url: https://github.com/google/oss-fuzz/tree/master/projects/wasmedge\n  integration:\n    ad-hoc: false\n    ci: true\n    before-release: true\nsecurity-contacts:\n- type: email\n  value: security@secondstate.io\nvulnerability-reporting:\n  accepts-vulnerability-reports: true\n  security-policy: https://github.com/WasmEdge/WasmEdge/blob/master/SECURITY.md\n  email-contact: security@secondstate.io\n  comment: |\n    You will receive an acknowledgement mail within 24 hours. After that, we will give a detailed response about the subsequent process within 48 hours.\ndependencies:\n  third-party-packages: true\n  dependencies-lists:\n  - https://github.com/WasmEdge/WasmEdge/tree/master/thirdparty\n  env-dependencies-policy:\n    policy-url: https://github.com/WasmEdge/WasmEdge/blob/master/SECURITY.md\n    comment: |\n      You will receive an acknowledgement mail within 24 hours\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.109375,
          "content": "# Security policy\n\n## Security bulletins\n\nFor information regarding the security of WasmEdge please join:\n\n* Mailing List <wasmedge@googlegroup.com>\n\n## Reporting a vulnerability\n\nPlease use the below process to report a vulnerability to WasmEdge:\n\nEmail:\n\n1. Send email to <wasmedge-security@lists.cncf.io>\n    * Emails should contain:\n        * description of the problem\n        * precise and detailed steps (include screenshots) that created the\n          problem\n        * the affected version(s)\n        * any possible mitigations, if known\n1. You will receive a reply from one of the maintainers within 24 hours\n   acknowledging receipt of the email. After that, we will give a detailed\n   response about the subsequent process within 48 hours.\n1. Please do not submit security vulnerabilities directly as Github Issues.\n\nWeb:\n\n1. Please visit [GitHub Seuciry Advisory of WasmEdge](https://github.com/WasmEdge/WasmEdge/security/advisories/new)\n   * You will receive a confirmation email upon submission\n\nWasmEdge follows a **`90 days` disclosure timeline**. Refer to our [embargo policy](./docs/embargo-policy.md) for more information.\n\n## Disclosure policy\n\nFor known public security vulnerabilities, we will disclose the disclosure as soon as possible after receiving the report. Vulnerabilities discovered for the first time will be disclosed in accordance with the following process:\n\n* The received security vulnerability report shall be handed over to the security team for follow-up coordination and repair work.\n* After the vulnerability is confirmed, we will create a draft Security Advisory on Github that lists the details of the vulnerability.\n* Invite related personnel to discuss about the fix.\n* Fork the temporary private repository on Github, and collaborate to fix the vulnerability.\n* After the fix code is merged into all supported versions, the vulnerability will be publicly posted in the GitHub Advisory Database.\n\n## Supported Versions\n\nInformation regarding supported versions of WasmEdge are in the below table:\n\n| Version | Supported |\n| ------- | --------- |\n| 0.14.1  | :white_check_mark: |\n| 0.13.5  | :white_check_mark: |\n"
        },
        {
          "name": "bindings",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 1.458984375,
          "content": "{\n  \"nodes\": {\n    \"flake-utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1726560853,\n        \"narHash\": \"sha256-X6rJYSESBVr3hBoH0WbKE5KvhPU5bloyZ2L4K60/fPQ=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"c1dfcf08411b08f6b8615f7d8971a2bfa81d5e8a\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1728909085,\n        \"narHash\": \"sha256-WLxED18lodtQiayIPDE5zwAfkPJSjHJ35UhZ8h3cJUg=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"c0b1da36f7c34a7146501f684e9ebdf15d2bebf8\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixos-24.05\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils\",\n        \"nixpkgs\": \"nixpkgs\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 1.4189453125,
          "content": "{\n  inputs = {\n    nixpkgs.url = \"github:NixOS/nixpkgs/nixos-24.05\";\n    flake-utils.url = \"github:numtide/flake-utils\";\n  };\n\n  outputs = { self, nixpkgs, flake-utils }:\n    flake-utils.lib.eachDefaultSystem (system:\n      let\n        pkgs = import nixpkgs { inherit system; };\n        llvmPackages = pkgs.llvmPackages_18;\n\n        wasmedge_buildInputs = with pkgs; [\n          cmake\n          llvmPackages.clang-unwrapped\n          llvmPackages.lld\n          llvmPackages.llvm\n          openssl\n          pkg-config\n          libxml2\n          spdlog\n        ] ++ pkgs.lib.optionals (system == \"x86_64-darwin\" || system == \"aarch64-darwin\") [\n          pkgs.darwin.apple_sdk.frameworks.Foundation\n        ];\n        wasmedge = pkgs.stdenv.mkDerivation {\n          name = \"wasmedge\";\n          version = \"0.14.0\";\n          src = ./.;\n\n          buildInputs = wasmedge_buildInputs;\n          cmakeFlags = [\n            \"-DCMAKE_BUILD_TYPE=Debug\"\n            \"-DWASMEDGE_BUILD_PLUGINS=OFF\"\n            \"-DWASMEDGE_BUILD_TESTS=OFF\"\n            \"-DWASMEDGE_USE_LLVM=ON\"\n          ];\n        };\n      in with pkgs; rec {\n        packages = { wasmedge = wasmedge; };\n        packages.default = packages.wasmedge;\n        devShells.default = mkShell {\n          buildInputs = [\n            wasmedge\n            ninja\n            gcovr\n          ] ++ wasmedge_buildInputs;\n\n          LIBCLANG_PATH = \"${llvmPackages.libclang.lib}/lib\";\n        };\n      });\n}\n"
        },
        {
          "name": "fossa-deps.yml",
          "type": "blob",
          "size": 0.39453125,
          "content": "remote-dependencies:\n  - name: \"GoogleTest\"\n    version: \"1.11.0\"\n    url: \"https://github.com/google/googletest/archive/refs/tags/release-1.11.0.tar.gz\"\n    metadata:\n      homepage: \"https://github.com/google/googletest\"\n  - name: \"spdlog\"\n    version: \"1.9.1\"\n    url: \"https://github.com/gabime/spdlog/archive/refs/tags/v1.9.1.tar.gz\"\n    metadata:\n      homepage: \"https://github.com/gabime/spdlog\"\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "thirdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}