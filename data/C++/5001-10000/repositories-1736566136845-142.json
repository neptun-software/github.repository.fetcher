{
  "metadata": {
    "timestamp": 1736566136845,
    "page": 142,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "libcpr/cpr",
      "stars": 6672,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.7587890625,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  Google\nAccessModifierOffset: -2\nAlignAfterOpenBracket: true\nAlignEscapedNewlinesLeft: true\nAlignOperands: true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Empty\nAlwaysBreakAfterDefinitionReturnType: false\nAlwaysBreakTemplateDeclarations: true\nAlwaysBreakBeforeMultilineStrings: true\nBreakBeforeBinaryOperators: None\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBinPackParameters: true\nBinPackArguments: true\nColumnLimit: 500\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 8\nDerivePointerAlignment: false\nExperimentalAutoDetectBinPacking: false\nIndentCaseLabels: true\nIndentWrappedFunctionNames: false\nIndentFunctionDeclarationAfterType: false\nMaxEmptyLinesToKeep: 2\nKeepEmptyLinesAtTheStartOfBlocks: false\nNamespaceIndentation: None\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakString: 1000\nPenaltyBreakFirstLessLess: 120\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\nSpacesBeforeTrailingComments: 1\nCpp11BracedListStyle: true\nStandard:        Auto\nIndentWidth:     4\nTabWidth:        8\nUseTab:          Never\nBreakBeforeBraces: Attach\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nSpacesInAngles:  false\nSpaceInEmptyParentheses: false\nSpacesInCStyleCastParentheses: false\nSpaceAfterCStyleCast: true\nSpacesInContainerLiterals: true\nSpaceBeforeAssignmentOperators: true\nContinuationIndentWidth: 8\nCommentPragmas:  '^ IWYU pragma:'\nSpaceBeforeParens: ControlStatements\n...\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 1.34375,
          "content": "---\nChecks: '*,\n-cppcoreguidelines-pro-type-static-cast-downcast,\n-fuchsia-default-arguments-calls,\n-fuchsia-default-arguments,\n-fuchsia-default-arguments-declarations,\n-fuchsia-overloaded-operator,\n-fuchsia-statically-constructed-objects,\n-hicpp-use-auto,\n-modernize-use-auto,\n-modernize-use-trailing-return-type,\n-readability-implicit-bool-conversion,\n-readability-const-return-type,\n-google-runtime-references,\n-misc-non-private-member-variables-in-classes,\n-llvm-include-order,\n-cppcoreguidelines-non-private-member-variables-in-classes,\n-cppcoreguidelines-pro-type-vararg,\n-hicpp-vararg,\n-cppcoreguidelines-owning-memory,\n-llvmlibc-callee-namespace,\n-cppcoreguidelines-pro-bounds-array-to-pointer-decay,\n-hicpp-no-array-decay,\n-modernize-pass-by-value,\n-cppcoreguidelines-pro-bounds-constant-array-index,\n-hicpp-signed-bitwise,\n-llvmlibc-implementation-in-namespace,\n-llvmlibc-restrict-system-libc-headers,\n-readability-function-cognitive-complexity,\n-readability-identifier-length,\n-altera-unroll-loops,\n-altera-id-dependent-backward-branch,\n-bugprone-easily-swappable-parameters,\n-modernize-return-braced-init-list,\n-cppcoreguidelines-avoid-magic-numbers,\n-readability-magic-numbers,\n-cppcoreguidelines-avoid-do-while,\n-llvmlibc-inline-function-decl,\n-altera-struct-pack-align,\n-boost-use-ranges\n'\nWarningsAsErrors: '*'\nHeaderFilterRegex: 'src/*.hpp'\nFormatStyle: file\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6123046875,
          "content": "# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# CMake\nCMakeCache.txt\nCMakeFiles\nMakefile\ncmake_install.cmake\ninstall_manifest.txt\n\n# Custom\nbuild/\n!nuget/build\n\n# Jekyll stuff\n_includes/\n_site/\n\n# Vim\n.ycm_extra_conf.py*\n*.swp\n\n# VSCode\n.vscode/*\n!.vscode/tasks.json\n.vs/\n!.vs/tasks.json\n\n# clangd\n.cache/\n\n# compilation database\n# used in various editor configurations, such as vim & YcM\ncompile_commands.json\n\n# macOS\n.DS_Store\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 19.6572265625,
          "content": "cmake_minimum_required(VERSION 3.15)\nproject(cpr VERSION 1.11.1 LANGUAGES CXX)\n\nmath(EXPR cpr_VERSION_NUM \"${cpr_VERSION_MAJOR} * 0x10000 + ${cpr_VERSION_MINOR} * 0x100 + ${cpr_VERSION_PATCH}\" OUTPUT_FORMAT HEXADECIMAL)\nconfigure_file(\"${cpr_SOURCE_DIR}/cmake/cprver.h.in\" \"${cpr_BINARY_DIR}/cpr_generated_includes/cpr/cprver.h\")\n\n# Only change the folder behaviour if cpr is not a subproject\nif(${CMAKE_PROJECT_NAME} STREQUAL ${PROJECT_NAME})\n    set_property(GLOBAL PROPERTY USE_FOLDERS ON)\n    set_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER \"CMake\")\n    set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)\n    set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib)\nelse()\n    # Check required c++ standard of parent project\n    if(CMAKE_CXX_STANDARD)\n        set(PARENT_CXX_STANDARD ${CMAKE_CXX_STANDARD})\n        message(STATUS \"CXX standard of parent project: ${PARENT_CXX_STANDARD}\")\n    endif()\nendif()\n\n# Avoid the dll boilerplate code for windows\nset(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)\n\nif (PARENT_CXX_STANDARD)\n    # Don't set CMAKE_CXX_STANDARD if it is already set by parent project\n    if (PARENT_CXX_STANDARD LESS 17)\n        message(FATAL_ERROR \"cpr ${cpr_VERSION} does not support ${PARENT_CXX_STANDARD}. Please use cpr <= 1.9.x\")\n    endif()\nelse()\n    # Set standard version if not already set by potential parent project\n    set(CMAKE_CXX_STANDARD 17)\nendif()\n\nmessage(STATUS \"CXX standard: ${CMAKE_CXX_STANDARD}\")\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nset(CPR_LIBRARIES cpr CACHE INTERNAL \"\")\n\nmacro(cpr_option OPTION_NAME OPTION_TEXT OPTION_DEFAULT)\n    option(${OPTION_NAME} ${OPTION_TEXT} ${OPTION_DEFAULT})\n    if(DEFINED ENV{${OPTION_NAME}})\n        # Allow overriding the option through an environment variable\n        set(${OPTION_NAME} $ENV{${OPTION_NAME}})\n    endif()\n    if(${OPTION_NAME})\n        add_definitions(-D${OPTION_NAME})\n    endif()\n    message(STATUS \"  ${OPTION_NAME}: ${${OPTION_NAME}}\")\nendmacro()\n\nmessage(STATUS \"C++ Requests CMake Options\")\nmessage(STATUS \"=======================================================\")\ncpr_option(CPR_GENERATE_COVERAGE \"Set to ON to generate coverage reports.\" OFF)\ncpr_option(CPR_CURL_NOSIGNAL \"Set to ON to disable use of signals in libcurl.\" OFF)\ncpr_option(CURL_VERBOSE_LOGGING \"Curl verbose logging during building curl\" OFF)\ncpr_option(CPR_USE_SYSTEM_GTEST \"If ON, this project will look in the system paths for an installed gtest library. If none is found it will use the built-in one.\" OFF)\ncpr_option(CPR_USE_SYSTEM_CURL \"If enabled we will use the curl lib already installed on this system.\" OFF)\ncpr_option(CPR_ENABLE_CURL_HTTP_ONLY \"If enabled we will only use the HTTP/HTTPS protocols from CURL. If disabled, all the CURL protocols are enabled. This is useful if your project uses libcurl and you need support for other CURL features e.g. sending emails.\" ON)\ncpr_option(CPR_ENABLE_SSL \"Enables or disables the SSL backend. Required to perform HTTPS requests.\" ON)\ncpr_option(CPR_FORCE_OPENSSL_BACKEND \"Force to use the OpenSSL backend. If CPR_FORCE_OPENSSL_BACKEND, CPR_FORCE_DARWINSSL_BACKEND, CPR_FORCE_MBEDTLS_BACKEND, and CPR_FORCE_WINSSL_BACKEND are set to to OFF, cpr will try to automatically detect the best available SSL backend (WinSSL - Windows, OpenSSL - Linux, DarwinSSL - Mac ...).\" OFF)\ncpr_option(CPR_FORCE_WINSSL_BACKEND \"Force to use the WinSSL backend. If CPR_FORCE_OPENSSL_BACKEND, CPR_FORCE_DARWINSSL_BACKEND, CPR_FORCE_MBEDTLS_BACKEND, and CPR_FORCE_WINSSL_BACKEND are set to to OFF, cpr will try to automatically detect the best available SSL backend (WinSSL - Windows, OpenSSL - Linux, DarwinSSL - Mac ...).\" OFF)\ncpr_option(CPR_FORCE_DARWINSSL_BACKEND \"Force to use the DarwinSSL backend. If CPR_FORCE_OPENSSL_BACKEND, CPR_FORCE_DARWINSSL_BACKEND, CPR_FORCE_MBEDTLS_BACKEND, and CPR_FORCE_WINSSL_BACKEND are set to to OFF, cpr will try to automatically detect the best available SSL backend (WinSSL - Windows, OpenSSL - Linux, DarwinSSL - Mac ...).\" OFF)\ncpr_option(CPR_FORCE_MBEDTLS_BACKEND \"Force to use the Mbed TLS backend. If CPR_FORCE_OPENSSL_BACKEND, CPR_FORCE_DARWINSSL_BACKEND, CPR_FORCE_MBEDTLS_BACKEND, and CPR_FORCE_WINSSL_BACKEND are set to to OFF, cpr will try to automatically detect the best available SSL backend (WinSSL - Windows, OpenSSL - Linux, DarwinSSL - Mac ...).\" OFF)\ncpr_option(CPR_ENABLE_LINTING \"Set to ON to enable clang linting.\" OFF)\ncpr_option(CPR_ENABLE_CPPCHECK \"Set to ON to enable Cppcheck static analysis. Requires CPR_BUILD_TESTS and CPR_BUILD_TESTS_SSL to be OFF to prevent checking google tests source code.\" OFF)\ncpr_option(CPR_BUILD_TESTS \"Set to ON to build cpr tests.\" OFF)\ncpr_option(CPR_BUILD_TESTS_SSL \"Set to ON to build cpr ssl tests\" ${CPR_BUILD_TESTS})\ncpr_option(CPR_BUILD_TESTS_PROXY \"Set to ON to build proxy tests. They fail in case there is no valid proxy server available in proxy_tests.cpp\" OFF)\ncpr_option(CPR_BUILD_VERSION_OUTPUT_ONLY \"Set to ON to only export the version into 'build/version.txt' and exit\" OFF)\ncpr_option(CPR_SKIP_CA_BUNDLE_SEARCH \"Skip searching for Certificate Authority certs. Turn ON for systems like iOS where file access is restricted and prevents https from working.\" OFF)\ncpr_option(CPR_USE_BOOST_FILESYSTEM \"Set to ON to use the Boost.Filesystem library. This is useful, on, e.g., Apple platforms, where std::filesystem may not always be available when targeting older OS versions.\" OFF)\ncpr_option(CPR_DEBUG_SANITIZER_FLAG_THREAD \"Enables the ThreadSanitizer for debug builds.\" OFF)\ncpr_option(CPR_DEBUG_SANITIZER_FLAG_ADDR \"Enables the AddressSanitizer for debug builds.\" OFF)\ncpr_option(CPR_DEBUG_SANITIZER_FLAG_LEAK \"Enables the LeakSanitizer for debug builds.\" OFF)\ncpr_option(CPR_DEBUG_SANITIZER_FLAG_UB \"Enables the UndefinedBehaviorSanitizer for debug builds.\" OFF)\ncpr_option(CPR_DEBUG_SANITIZER_FLAG_ALL \"Enables all sanitizers for debug builds except the ThreadSanitizer since it is incompatible with the other sanitizers.\" OFF)\nmessage(STATUS \"=======================================================\")\n\n# Save the project version as txt file for deb and NuGet builds\nif(CPR_BUILD_VERSION_OUTPUT_ONLY)\n    message(STATUS \"Printing version and exiting...\")\n    file(WRITE \"${CMAKE_BINARY_DIR}/version.txt\" \"${PROJECT_VERSION}\")\n    return()\nendif()\n\nif (CPR_FORCE_USE_SYSTEM_CURL)\n    message(WARNING \"The variable CPR_FORCE_USE_SYSTEM_CURL is deprecated, please use CPR_USE_SYSTEM_CURL instead\")\n    set(CPR_USE_SYSTEM_CURL ${CPR_FORCE_USE_SYSTEM_CURL})\nendif()\n\ninclude(GNUInstallDirs)\ninclude(FetchContent)\ninclude(cmake/code_coverage.cmake)\ninclude(cmake/sanitizer.cmake)\ninclude(cmake/clear_variable.cmake)\n\n# So CMake can find FindMbedTLS.cmake\nset(CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake;${CMAKE_MODULE_PATH}\")\n\n# Linting\nif(CPR_ENABLE_LINTING)\n    include(cmake/clang-tidy.cmake)\nendif()\n\n# Cppcheck\nif(CPR_ENABLE_CPPCHECK)\n    if(CPR_BUILD_TESTS OR CPR_BUILD_TESTS_SSL)\n        message(FATAL_ERROR \"Cppcheck is incompatible with building tests. Make sure to disable CPR_ENABLE_CPPCHECK or disable tests by setting CPR_BUILD_TESTS and CPR_BUILD_TESTS_SSL to OFF. This is because Cppcheck would try to check the google tests source code and then fail. \")\n    endif()\n    include(cmake/cppcheck.cmake)\nendif()\n\n# SSL\nif(CPR_ENABLE_SSL)\n    if(CPR_FORCE_OPENSSL_BACKEND OR CPR_FORCE_WINSSL_BACKEND OR CPR_FORCE_DARWINSSL_BACKEND OR CPR_FORCE_MBEDTLS_BACKEND)\n        message(STATUS \"Disabled SSL backend auto detect since either CPR_FORCE_OPENSSL_BACKEND, CPR_FORCE_DARWINSSL_BACKEND, CPR_FORCE_MBEDTLS_BACKEND, or CPR_FORCE_WINSSL_BACKEND is enabled.\")\n        set(DETECT_SSL_BACKEND OFF CACHE INTERNAL \"\" FORCE)\n    else()\n        message(STATUS \"Automatically detecting SSL backend.\")\n        set(DETECT_SSL_BACKEND ON CACHE INTERNAL \"\" FORCE)\n    endif()\n\n    if(CPR_FORCE_WINSSL_BACKEND AND (NOT WIN32))\n        message(FATAL_ERROR \"WinSSL is only available on Windows! Use either OpenSSL (CPR_FORCE_OPENSSL_BACKEND) or DarwinSSL (CPR_FORCE_DARWINSSL_BACKEND) instead.\")\n    endif()\n\n    if(DETECT_SSL_BACKEND)\n        message(STATUS \"Detecting SSL backend...\")\n        if(WIN32)\n            message(STATUS \"SSL auto detect: Using WinSSL.\")\n            set(SSL_BACKEND_USED \"WinSSL\")\n        elseif(APPLE)\n            message(STATUS \"SSL auto detect: Using DarwinSSL.\")\n            set(CPR_BUILD_TESTS_SSL OFF)\n            set(SSL_BACKEND_USED \"DarwinSSL\")\n        else()\n            find_package(OpenSSL)\n            if(OPENSSL_FOUND)\n                message(STATUS \"SSL auto detect: Using OpenSSL.\")\n                set(SSL_BACKEND_USED \"OpenSSL\")\n            else()\n                find_package(MbedTLS)\n                if(MBEDTLS_FOUND)\n                    set(SSL_BACKEND_USED \"MbedTLS\")\n                else()\n                    message(FATAL_ERROR \"No valid SSL backend found! Please install OpenSSL, Mbed TLS or disable SSL by setting CPR_ENABLE_SSL to OFF.\")\n                endif()\n            endif()\n        endif()\n    else()\n        if(CPR_FORCE_OPENSSL_BACKEND)\n            find_package(OpenSSL)\n            if(OPENSSL_FOUND)\n                message(STATUS \"Using OpenSSL.\")\n                set(SSL_BACKEND_USED \"OpenSSL\")\n            else()\n                message(FATAL_ERROR \"CPR_FORCE_OPENSSL_BACKEND enabled but we were not able to find OpenSSL!\")\n            endif()\n        elseif(CPR_FORCE_WINSSL_BACKEND)\n            message(STATUS \"Using WinSSL.\")\n            set(SSL_BACKEND_USED \"WinSSL\")\n        elseif(CPR_FORCE_DARWINSSL_BACKEND)\n            message(STATUS \"Using DarwinSSL.\")\n            set(CPR_BUILD_TESTS_SSL OFF)\n            set(SSL_BACKEND_USED \"DarwinSSL\")\n        elseif(CPR_FORCE_MBEDTLS_BACKEND)\n            message(STATUS \"Using Mbed TLS.\")\n            set(CPR_BUILD_TESTS_SSL OFF)\n            set(SSL_BACKEND_USED \"MbedTLS\")\n        endif()\n    endif()\nendif()\n\nif(SSL_BACKEND_USED STREQUAL \"OpenSSL\")\n# Fix missing OpenSSL includes for Windows since in 'ssl_ctx.cpp' we include OpenSSL directly\nfind_package(OpenSSL REQUIRED)\n    add_compile_definitions(OPENSSL_BACKEND_USED)\nendif()\n\n# Curl configuration\nif(CPR_USE_SYSTEM_CURL)\n    if(CPR_ENABLE_SSL)\n        find_package(CURL COMPONENTS HTTP HTTPS)\n        if(CURL_FOUND)\n            message(STATUS \"Curl ${CURL_VERSION_STRING} found on this system.\")\n\n            # To be able to load certificates under Windows when using OpenSSL:\n            if(CMAKE_USE_OPENSSL AND WIN32 AND (NOT (CURL_VERSION_STRING VERSION_GREATER_EQUAL \"7.71.0\")))\n                message(FATAL_ERROR \"Your system curl version (${CURL_VERSION_STRING}) is too old to support OpenSSL on Windows which requires curl >= 7.71.0. Update your curl version, use WinSSL, disable SSL or use the built-in version of curl.\")\n            endif()\n        else()\n            find_package(CURL COMPONENTS HTTP)\n            if(CURL_FOUND)\n                message(FATAL_ERROR \"Curl found on this system but WITHOUT HTTPS/SSL support. Either disable SSL by setting CPR_ENABLE_SSL to OFF or use the built-in version of curl by setting CPR_USE_SYSTEM_CURL to OFF.\")\n            else()\n                message(FATAL_ERROR \"Curl not found on this system. To use the built-in version set CPR_USE_SYSTEM_CURL to OFF.\")\n            endif()\n        endif()\n    else()\n        find_package(CURL COMPONENTS HTTP)\n        if(CURL_FOUND)\n            message(STATUS \"Curl found on this system.\")\n        else()\n            message(FATAL_ERROR \"Curl not found on this system. To use the built-in version set CPR_USE_SYSTEM_CURL to OFF.\")\n        endif()\n    endif()\n\n    # Check for the minimum supported curl version \n    if(NOT (CURL_VERSION_STRING VERSION_GREATER_EQUAL \"7.64.0\"))\n        message(FATAL_ERROR \"Your system curl version (${CURL_VERSION_STRING}) is too old! curl >= 7.64.0 is required. Update your curl version, or use the build in curl version e.g. via `cmake .. -DCPR_USE_SYSTEM_CURL=OFF` during CMake configure.\")\n    endif()\nelse()\n    message(STATUS \"Configuring built-in curl...\")\n\n    # ZLIB is optional for curl\n    # to disable it:\n    # * from command line:\n    #     -DCURL_ZLIB=OFF\n    # * from CMake script:\n    if (CURL_ZLIB OR CURL_ZLIB STREQUAL AUTO OR NOT DEFINED CACHE{CURL_ZLIB})\n        include(cmake/zlib_external.cmake)\n    endif()\n\n    if (CPR_ENABLE_CURL_HTTP_ONLY)\n        # We only need HTTP (and HTTPS) support:\n        set(HTTP_ONLY ON CACHE INTERNAL \"\" FORCE)\n    endif()\n    set(BUILD_CURL_EXE OFF CACHE INTERNAL \"\" FORCE)\n    set(BUILD_TESTING OFF)\n\n    if (CURL_VERBOSE_LOGGING)\n        message(STATUS \"Enabled curl debug features\")\n        set(ENABLE_DEBUG ON CACHE INTERNAL \"\" FORCE)\n    endif()\n\n    if (CPR_ENABLE_SSL)\n        set(CURL_ENABLE_SSL ON CACHE INTERNAL \"\" FORCE)\n        if(ANDROID)\n            set(CURL_CA_PATH \"/system/etc/security/cacerts\" CACHE INTERNAL \"\")\n        elseif(CPR_SKIP_CA_BUNDLE_SEARCH)\n            set(CURL_CA_PATH \"none\" CACHE INTERNAL \"\")\n        else()\n            set(CURL_CA_PATH \"auto\" CACHE INTERNAL \"\")\n        endif()\n\n        if(CPR_SKIP_CA_BUNDLE_SEARCH)\n            set(CURL_CA_BUNDLE \"none\" CACHE INTERNAL \"\")\n        elseif(NOT DEFINED CURL_CA_BUNDLE)\n            set(CURL_CA_BUNDLE \"auto\" CACHE INTERNAL \"\")\n        endif()\n\n        if(SSL_BACKEND_USED STREQUAL \"WinSSL\")\n            set(CURL_USE_SCHANNEL ON CACHE INTERNAL \"\" FORCE)\n            set(CURL_WINDOWS_SSPI ON CACHE INTERNAL \"\" FORCE)\n        endif()\n\n        if(SSL_BACKEND_USED STREQUAL \"OpenSSL\")\n            set(CURL_USE_OPENSSL ON CACHE INTERNAL \"\" FORCE)\n        endif()\n\n        if(SSL_BACKEND_USED STREQUAL \"DarwinSSL\")\n            set(CURL_USE_SECTRANSP ON CACHE INTERNAL \"\" FORCE)\n        endif()\n\n        if(SSL_BACKEND_USED STREQUAL \"MbedTLS\")\n            set(CURL_USE_MBEDTLS ON CACHE INTERNAL \"\" FORCE)\n        endif()\n\n        message(STATUS \"Enabled curl SSL\")\n    else()\n        set(CURL_ENABLE_SSL OFF CACHE INTERNAL \"\" FORCE)\n\n        set(CURL_CA_PATH \"none\" CACHE INTERNAL \"\" FORCE)\n        set(CURL_USE_SCHANNEL OFF CACHE INTERNAL \"\" FORCE)\n        set(CURL_WINDOWS_SSPI OFF CACHE INTERNAL \"\" FORCE)\n        set(CURL_USE_OPENSSL OFF CACHE INTERNAL \"\" FORCE)\n        set(CURL_USE_SECTRANSP OFF CACHE INTERNAL \"\" FORCE)\n        set(CURL_USE_MBEDTLS OFF CACHE INTERNAL \"\" FORCE)\n        message(STATUS \"Disabled curl SSL\")\n    endif()\n    # Disable linting for curl\n    clear_variable(DESTINATION CMAKE_CXX_CLANG_TIDY BACKUP CMAKE_CXX_CLANG_TIDY_BKP)\n\n    if (CMAKE_VERSION VERSION_GREATER_EQUAL \"3.24.0\")\n        cmake_policy(SET CMP0135 NEW)\n    endif()\n    FetchContent_Declare(curl\n                         URL                    https://github.com/curl/curl/releases/download/curl-8_10_1/curl-8.10.1.tar.xz\n                         URL_HASH               SHA256=73a4b0e99596a09fa5924a4fb7e4b995a85fda0d18a2c02ab9cf134bebce04ee # the file hash for curl-8.10.1.tar.xz\n                         USES_TERMINAL_DOWNLOAD TRUE)   # <---- This is needed only for Ninja to show download progress\n    FetchContent_MakeAvailable(curl)\n\n    restore_variable(DESTINATION CMAKE_CXX_CLANG_TIDY BACKUP CMAKE_CXX_CLANG_TIDY_BKP)\nendif()\n\n# Depending on which version of libcurl we are using the CMake target is called differently\nif(TARGET libcurl)\n    # Old curl CMake target name\n    set(CURL_LIB libcurl)\nelse()\n    # New curl CMake target name\n    set(CURL_LIB CURL::libcurl)\nendif()\n\n# GTest configuration\nif(CPR_BUILD_TESTS)\n    if(CPR_USE_SYSTEM_GTEST)\n        find_package(GTest)\n    endif()\n    if(NOT CPR_USE_SYSTEM_GTEST OR NOT GTEST_FOUND)\n        message(STATUS \"Not using system gtest, using built-in googletest project instead.\")\n        if(MSVC)\n            # By default, GTest compiles on Windows in CRT static linkage mode. We use this\n            # variable to force it into using the CRT in dynamic linkage (DLL), just as CPR\n            # does.\n            set(gtest_force_shared_crt ON CACHE BOOL \"Force gtest to use the shared c runtime\")\n        endif()\n\n        # Disable linting for google test\n        clear_variable(DESTINATION CMAKE_CXX_CLANG_TIDY BACKUP CMAKE_CXX_CLANG_TIDY_BKP)\n\n        FetchContent_Declare(googletest\n                             URL                    https://github.com/google/googletest/archive/refs/tags/v1.14.0.tar.gz\n                             URL_HASH               SHA256=8ad598c73ad796e0d8280b082cebd82a630d73e73cd3c70057938a6501bba5d7 # the file hash for release-1.14.0.tar.gz\n                             USES_TERMINAL_DOWNLOAD TRUE)   # <---- This is needed only for Ninja to show download progress\n        FetchContent_MakeAvailable(googletest)\n\n        restore_variable(DESTINATION CMAKE_CXX_CLANG_TIDY BACKUP CMAKE_CXX_CLANG_TIDY_BKP)\n        \n        add_library(gtest_int INTERFACE)\n        target_link_libraries(gtest_int INTERFACE gtest)\n        target_include_directories(gtest_int INTERFACE ${googletest_SOURCE_DIR}/include)\n\n        add_library(GTest::GTest ALIAS gtest_int)\n       \n        # Group under the \"tests/gtest\" project folder in IDEs such as Visual Studio.\n    set_property(TARGET gtest PROPERTY FOLDER \"tests/gtest\")\n    set_property(TARGET gtest_main PROPERTY FOLDER \"tests/gtest\")\n    endif()\nendif()\n\n\n# Mongoose configuration\nif(CPR_BUILD_TESTS)\n    message(STATUS \"Building mongoose project for test support.\")\n\n    if(CPR_BUILD_TESTS_SSL)\n        if(NOT CPR_ENABLE_SSL)\n            message(FATAL_ERROR \"OpenSSL is required to build SSL test but CPR_ENABLE_SSL is disabled. Either set CPR_ENABLE_SSL to ON or disable CPR_BUILD_TESTS_SSL.\")\n        endif()\n\n        if(NOT(SSL_BACKEND_USED STREQUAL \"OpenSSL\"))\n            message(FATAL_ERROR \"OpenSSL is required for SSL test, but it seams like OpenSSL is not being used as SSL backend. Either set CPR_BUILD_TESTS_SSL to OFF or set CPR_FORCE_OPENSSL_BACKEND to ON and try again.\")\n        endif()\n\n        set(ENABLE_SSL_TESTS ON CACHE INTERNAL \"\")\n    else()\n        set(ENABLE_SSL_TESTS OFF CACHE INTERNAL \"\")\n    endif()\n\n    # Disable linting for mongoose\n    clear_variable(DESTINATION CMAKE_CXX_CLANG_TIDY BACKUP CMAKE_CXX_CLANG_TIDY_BKP)\n\n    FetchContent_Declare(mongoose \n                         URL                    https://github.com/cesanta/mongoose/archive/7.7.tar.gz\n                         URL_HASH               SHA256=4e5733dae31c3a81156af63ca9aa3a6b9b736547f21f23c3ab2f8e3f1ecc16c0 # the hash for 7.7.tar.gz\n                         USES_TERMINAL_DOWNLOAD TRUE)   # <---- This is needed only for Ninja to show download progress\n    # We can not use FetchContent_MakeAvailable, since we need to patch mongoose to use CMake\n    if (NOT mongoose_POPULATED)\n        FetchContent_POPULATE(mongoose)\n\n        file(INSTALL cmake/mongoose.CMakeLists.txt DESTINATION ${mongoose_SOURCE_DIR})\n        file(RENAME ${mongoose_SOURCE_DIR}/mongoose.CMakeLists.txt ${mongoose_SOURCE_DIR}/CMakeLists.txt)\n        add_subdirectory(${mongoose_SOURCE_DIR} ${mongoose_BINARY_DIR})\n\n    endif()\n    # Group under the \"external\" project folder in IDEs such as Visual Studio.\n    set_property(TARGET mongoose PROPERTY FOLDER \"external\")\n    restore_variable(DESTINATION CMAKE_CXX_CLANG_TIDY BACKUP CMAKE_CXX_CLANG_TIDY_BKP)\nendif()\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"MSVC\")\nelse()\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wextra -Wpedantic -Werror\")\n    if (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n        # Disable C++98 compatibility support in clang: https://github.com/libcpr/cpr/issues/927\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-nonportable-system-include-path -Wno-exit-time-destructors -Wno-undef -Wno-global-constructors -Wno-switch-enum -Wno-old-style-cast -Wno-covered-switch-default -Wno-undefined-func-template\")\n    endif()\nendif()\n\nadd_subdirectory(cpr)\nadd_subdirectory(include)\n\nif(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND CPR_BUILD_TESTS)\n    # Disable linting for tests since they are currently not up to the standard\n    clear_variable(DESTINATION CMAKE_CXX_CLANG_TIDY BACKUP CMAKE_CXX_CLANG_TIDY_BKP)\n    enable_testing()\n    add_subdirectory(test)\n    restore_variable(DESTINATION CMAKE_CXX_CLANG_TIDY BACKUP CMAKE_CXX_CLANG_TIDY_BKP)\nendif()\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.0927734375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\ncc@libcpr.org.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.2216796875,
          "content": "# Contributing to C++ Requests\n\nPlease fork this repository and contribute back using [pull requests](https://github.com/whoshuu/cpr/pulls). Features can be requested using [issues](https://github.com/whoshuu/cpr/issues). All code, comments, and critiques are greatly appreciated.\n\n## Formatting\n\nTo avoid unproductive debates on formatting, this project uses `clang-format` to ensure a consistent style across all source files. Currently, `clang-format` 3.8 is the version of `clang-format` we use. The format file can be found [here](https://github.com/whoshuu/cpr/blob/master/.clang-format). To install `clang-format` on Ubuntu, run this:\n\n```\napt-get install clang-format-3.8\n```\n\nTo install `clang-format` on OS X, run this:\n\n```\nbrew install clang-format\n```\n\nNote that `brew` might install a later version of `clang-format`, but it should be mostly compatible with what's run on the Travis servers.\n\nTo run `clang-format` on every source file, run this in the root directory:\n\n```\n./format-check.sh\n```\n\nThis should indicate which files need formatting and also show a diff of the requested changes. More specific usage instructions can be found on the official [LLVM website](http://releases.llvm.org/3.8.0/tools/clang/docs/ClangFormat.html).\n"
        },
        {
          "name": "CppCheckSuppressions.txt",
          "type": "blob",
          "size": 0.05859375,
          "content": "noExplicitConstructor\nConfigurationNotChecked\npassedByValue\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.2001953125,
          "content": "This license applies to everything except the contents of the \"test\"\ndirectory and its subdirectories.\n\nMIT License\n\nCopyright (c) 2017-2021 Huu Nguyen\nCopyright (c) 2022 libcpr and many other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.044921875,
          "content": "# C++ Requests: Curl for People <img align=\"right\" height=\"40\" src=\"http://i.imgur.com/d9Xtyts.png\">\n\n[![Documentation](https://img.shields.io/badge/docs-online-informational?style=flat&link=https://docs.libcpr.org/)](https://docs.libcpr.org/)\n![CI](https://github.com/libcpr/cpr/workflows/CI/badge.svg)\n[![Gitter](https://badges.gitter.im/libcpr/community.svg)](https://gitter.im/libcpr/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n## Announcements\n\n* This project is being maintained by [Fabian Sauter](https://github.com/com8) and [Kilian Traub](https://github.com/KingKili).\n* For quick help, and discussion libcpr also offers a [gitter](https://gitter.im/libcpr/community?utm_source=share-link&utm_medium=link&utm_campaign=share-link) chat.\n\n## Supported Releases\n| Release  | Min. C++ Standard | Status | Notes |\n|----------|-------------------|--------|-------|\n| master   | `cpp17` | ![alt text][preview] | |\n| 1.11.x   | `cpp17` | ![alt text][supported] | |\n| 1.10.x   | `cpp17` | ![alt text][unsupported] | |\n| 1.9.x    | `cpp11` | ![alt text][supported] | Supported until 01.01.2025 |\n| <= 1.8.x | `cpp11` | ![alt text][unsupported] | |\n\n[unsupported]: https://img.shields.io/badge/-unsupported-red \"unsupported\"\n[supported]: https://img.shields.io/badge/-supported-green \"supported\"\n[preview]: https://img.shields.io/badge/-preview-orange \"preview\"\n\n## TLDR\n\nC++ Requests is a simple wrapper around [libcurl](http://curl.haxx.se/libcurl) inspired by the excellent [Python Requests](https://github.com/kennethreitz/requests) project.\n\nDespite its name, libcurl's easy interface is anything but, and making mistakes, misusing it is a common source of error and frustration. Using the more expressive language facilities of `C++17` (or `C++11` in case you use cpr < 1.10.0), this library captures the essence of making network calls into a few concise idioms.\n\nHere's a quick GET request:\n\n```c++\n#include <cpr/cpr.h>\n\nint main(int argc, char** argv) {\n    cpr::Response r = cpr::Get(cpr::Url{\"https://api.github.com/repos/whoshuu/cpr/contributors\"},\n                      cpr::Authentication{\"user\", \"pass\", cpr::AuthMode::BASIC},\n                      cpr::Parameters{{\"anon\", \"true\"}, {\"key\", \"value\"}});\n    r.status_code;                  // 200\n    r.header[\"content-type\"];       // application/json; charset=utf-8\n    r.text;                         // JSON text string\n    return 0;\n}\n```\n\nAnd here's [less functional, more complicated code, without cpr](https://gist.github.com/whoshuu/2dc858b8730079602044).\n\n## Documentation\n\n[![Documentation](https://img.shields.io/badge/docs-online-informational?style=for-the-badge&link=https://docs.libcpr.org/)](https://docs.libcpr.org/)  \nYou can find the latest documentation [here](https://docs.libcpr.org/). It's a work in progress, but it should give you a better idea of how to use the library than the [tests](https://github.com/libcpr/cpr/tree/master/test) currently do.\n\n## Features\n\nC++ Requests currently supports:\n\n* Custom headers\n* URL-encoded parameters\n* URL-encoded POST values\n* Multipart form POST upload\n* File POST upload\n* Basic authentication\n* Bearer authentication\n* Digest authentication\n* NTLM authentication\n* Connection and request timeout specification\n* Timeout for low speed connection\n* Asynchronous requests\n* :cookie: support!\n* Proxy support\n* Callback interfaces\n* PUT methods\n* DELETE methods\n* HEAD methods\n* OPTIONS methods\n* PATCH methods\n* Thread Safe access to [libCurl](https://curl.haxx.se/libcurl/c/threadsafe.html)\n* OpenSSL and WinSSL support for HTTPS requests\n\n## Planned\n\nFor a quick overview about the planned features, have a look at the next [Milestones](https://github.com/libcpr/cpr/milestones).\n\n## Usage\n\n### CMake\n\n#### fetch_content:\nIf you already have a CMake project you need to integrate C++ Requests with, the primary way is to use `fetch_content`.\nAdd the following to your `CMakeLists.txt`.\n\n\n```cmake\ninclude(FetchContent)\nFetchContent_Declare(cpr GIT_REPOSITORY https://github.com/libcpr/cpr.git\n                         GIT_TAG dec9422db3af470641f8b0d90e4b451c4daebf64) # Replace with your desired git commit from: https://github.com/libcpr/cpr/releases\nFetchContent_MakeAvailable(cpr)\n```\n\nThis will produce the target `cpr::cpr` which you can link against the typical way:\n\n```cmake\ntarget_link_libraries(your_target_name PRIVATE cpr::cpr)\n```\n\nThat should do it!\nThere's no need to handle `libcurl` yourself. All dependencies are taken care of for you.\nAll of this can be found in an example [**here**](https://github.com/libcpr/example-cmake-fetch-content).\n\n#### find_package():\nIf you prefer not to use `fetch_content`, you can download, build, and install the library and then use CMake `find_package()` function to integrate it into a project.\n\n**Note:** this feature is feasible only if CPR_USE_SYSTEM_CURL is set. (see [#645](https://github.com/libcpr/cpr/pull/645))\n```Bash\ngit clone https://github.com/libcpr/cpr.git\ncd cpr && mkdir build && cd build\ncmake .. -DCPR_USE_SYSTEM_CURL=ON\ncmake --build . --parallel\nsudo cmake --install .\n```\n#### Build Static Library\nAs an alternative if you want to switch between a static or shared version of cpr use ['-DBUILD_SHARED_LIBS=ON/OFF'](https://cmake.org/cmake/help/latest/variable/BUILD_SHARED_LIBS.html).\n```Bash\ngit clone https://github.com/libcpr/cpr.git\ncd cpr && mkdir build && cd build\ncmake .. -DCPR_USE_SYSTEM_CURL=ON -DBUILD_SHARED_LIBS=OFF\ncmake --build . --parallel\nsudo cmake --install .\n```\n\nIn your `CMakeLists.txt`:\n```cmake\nfind_package(cpr REQUIRED)\nadd_executable(your_target_name your_target_name.cpp)\ntarget_link_libraries(your_target_name PRIVATE cpr::cpr)\n```\n\n#### Tests\n`cpr` provides a bunch of tests that can be executed via the following commands.\n```Bash\ngit clone https://github.com/libcpr/cpr.git\ncd cpr && mkdir build && cd build\ncmake .. -DCPR_BUILD_TESTS=ON # There are other test related options like 'CPR_BUILD_TESTS_SSL' and 'CPR_BUILD_TESTS_PROXY'\ncmake --build . --parallel\nctest -VV # -VV is optional since it enables verbose output\n```\n\n### Bazel\n\nPlease refer to [hedronvision/bazel-make-cc-https-easy](https://github.com/hedronvision/bazel-make-cc-https-easy).\n\n### Packages for Linux Distributions\n\nAlternatively, you may install a package specific to your Linux distribution. Since so few distributions currently have a package for cpr, most users will not be able to run your program with this approach.\n\nCurrently, we are aware of packages for the following distributions:\n\n* [Arch Linux (AUR)](https://aur.archlinux.org/packages/cpr)\n* [Fedora Linux](https://src.fedoraproject.org/rpms/cpr)\n\nIf there's no package for your distribution, try making one! If you do, and it is added to your distribution's repositories, please submit a pull request to add it to the list above. However, please only do this if you plan to actively maintain the package.\n\n### NuGet Package\n\nFor Windows, there is also a libcpr NuGet package available. Currently, x86 and x64 builds are supported with release and debug configuration.\n\nThe package can be found here: [NuGet.org](https://www.nuget.org/packages/libcpr/)\n\n### Port for macOS\n\nOn macOS you may install cpr via [MacPorts.org](https://ports.macports.org/port/cpr) (arm64, x86_64, powerpc)\n\n### FreeBSD Port\n\nOn FreeBSD, you can issue `pkg install cpr` or use the Ports tree to install it.\n\n## Requirements\n\nThe only explicit requirements are:\n\n* a `C++17` compatible compiler such as Clang or GCC. The minimum required version of GCC is unknown, so if anyone has trouble building this library with a specific version of GCC, do let us know\n* in case you only have a `C++11` compatible compiler available, all versions below cpr 1.9.x are for you. The 1.10.0 release of cpr switches to `C++17` as a requirement.\n* If you would like to perform https requests `OpenSSL` and its development libraries are required.\n* If you do not use the built-in version of [curl](https://github.com/curl/curl) but instead use your systems version, make sure you use a version `>= 7.64.0`. Lower versions are not supported. This means you need Debian `>= 10` or Ubuntu `>= 20.04 LTS`.\n\n## Building cpr - Using vcpkg\n\nYou can download and install cpr using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n```Bash\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n./vcpkg integrate install\n./vcpkg install cpr\n```\nThe `cpr` port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n## Building cpr - Using Conan\n\nYou can download and install `cpr` using the [Conan](https://conan.io/) package manager. Setup your CMakeLists.txt (see [Conan documentation](https://docs.conan.io/en/latest/integrations/build_system.html) on how to use MSBuild, Meson and others).\nAn example can be found [**here**](https://github.com/libcpr/example-cmake-conan).\n\nThe `cpr` package in Conan is kept up to date by Conan contributors. If the version is out of date, please [create an issue or pull request](https://github.com/conan-io/conan-center-index) on the `conan-center-index` repository.\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "cpr-config.cmake",
          "type": "blob",
          "size": 0.8818359375,
          "content": "# - C++ Requests, Curl for People\n# This module is a libcurl wrapper written in modern C++.\n# It provides an easy, intuitive, and efficient interface to\n# a host of networking methods.\n#\n# Finding this module will define the following variables:\n#  CPR_FOUND - True if the core library has been found\n#  CPR_LIBRARIES - Path to the core library archive\n#  CPR_INCLUDE_DIRS - Path to the include directories. Gives access\n#                     to cpr.h, which must be included in every\n#                     file that uses this interface\n\nfind_path(CPR_INCLUDE_DIR\n          NAMES cpr.h)\n\nfind_library(CPR_LIBRARY\n             NAMES cpr\n             HINTS ${CPR_LIBRARY_ROOT})\n\ninclude(FindPackageHandleStandardArgs)\nfind_package_handle_standard_args(CPR REQUIRED_VARS CPR_LIBRARY CPR_INCLUDE_DIR)\n\nif(CPR_FOUND)\n    set(CPR_LIBRARIES ${CPR_LIBRARY})\n    set(CPR_INCLUDE_DIRS ${CPR_INCLUDE_DIR})\nendif()\n"
        },
        {
          "name": "cpr",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "nuget",
          "type": "tree",
          "content": null
        },
        {
          "name": "package-build",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}