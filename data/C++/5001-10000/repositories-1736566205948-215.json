{
  "metadata": {
    "timestamp": 1736566205948,
    "page": 215,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cisco/openh264",
      "stars": 5618,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.81640625,
          "content": "# Object files\n*.o\n*.obj\n*.res\n\n# Dependency files\n*.d\n\n# orig files generated by astyle\n*.orig\n\n# Libraries\n*.lib\n*.a\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\nh264dec\nh264enc\ncodec_unittest\n\n# Other files generated by the MSVC compiler\n*.exp\n*.pdb\n*.map\n\n# Executables built by the MSVC project files\nbin\n\n# External source\ngtest\ngmp-api\n\n# Output files from example commands\ntestbin/test_vd_1d.264\ntestbin/test_vd_1d.yuv\ntestbin/test_vd_rc.264\ntestbin/test_vd_rc.yuv\ntestbin/test.264\ntestbin/test.yuv\n\n# iOS output files\ncodec/build/iOS/common/build/\ncodec/build/iOS/dec/welsdec/build/\n\n# pkg-config file\n*.pc\n\n# editor files\n*~\n\n# android gradle integration – regenerated when the project is opened in Android Studio\n/.idea/\n/.gradle/\n/gradle/\n/gradlew.bat\n/local.properties\n"
        },
        {
          "name": ".reviewboardrc",
          "type": "blob",
          "size": 0.0771484375,
          "content": "REVIEWBOARD_URL = 'https://rbcommons.com/s/OpenH264/'\nREPOSITORY = 'OpenH264'\n\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.2294921875,
          "content": "language: cpp\ndist: xenial\n\ncompiler:\n  - g++\n  - clang\n\nbefore_install:\n  - sudo apt-get update -qq\n  - sudo apt-get install -qq nasm g++-multilib gcc-multilib libc6-dev-i386 python3-pip python3-setuptools\n  - sudo python3 -m pip install meson==0.50.1 ninja\n\ninstall:\n  - make gmp-bootstrap\n  - make gtest-bootstrap\n  - meson builddir\n  - ninja -C builddir -v\n\nbefore_script:\n  - WorkingDir=`pwd`\n  - cd test/encoder_binary_comparison\n  - ./run_PrepareAllTestData.sh 64\n  - cd ${WorkingDir}\n\nenv:\n  - TASK=UnitTest;      TestParameter=\"\"\n  - TASK=BinaryCompare; TestParameter=BA_MW_D.264\n  - TASK=BinaryCompare; TestParameter=Zhling_1280x720.264\n  - TASK=BinaryCompare; TestParameter=Adobe_PDF_sample_a_1024x768_50Frms.264\nmatrix:\n  exclude:\n    - compiler: clang\n      env: TASK=BinaryCompare; TestParameter=BA_MW_D.264\n    - compiler: clang\n      env: TASK=BinaryCompare; TestParameter=Zhling_1280x720.264\n    - compiler: clang\n      env: TASK=BinaryCompare; TestParameter=Adobe_PDF_sample_a_1024x768_50Frms.264\nscript:\n  -  echo \"currrent test is for ${TASK}\"\n  -  echo \"test parameter is ${TestParameter}\"\n  -  ./run_Test.sh ${TASK}  ${TestParameter}\n  -  if [ ${TASK} == \"UnitTest\" ]; then echo \"Running meson test suite\"; meson test -C builddir -v; fi\n"
        },
        {
          "name": "CODING_STYLE",
          "type": "blob",
          "size": 0.2509765625,
          "content": "Code Guidelines\n\nTry to follow the style of the existing code.\n\nPlease do not add tabs, trailing whitespace, or Windows-style line endings (CRLF).\n\nThe C++ code was pretty-printed with astyle on 05/01/2014 using the configuration found in build/astyle.cfg\n\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 0.583984375,
          "content": "﻿# Contributors to the OpenH264 project\n\nPatrick Ai\nSijia Chen\nZhaoZheng Chu\nPaley Du\nMartin Ettl\nAndreas Gal\nXu Guang\nLicai Guo\nYi Guo\nHorace Huang\nSteven Huang\nEthan Hugg\nCullen Jennings\nZhaofeng Jia\nDerrick Jin\nJesse Li\nJifei Li\nKai Li\nKarina Li\nMatt Li\nXiang Li\nBourne Ling\nAlex Liu\nWayne Liu\nVarun Patil\nEric Rescorla\nAdam Roach\nSawyer Shan\nSiping Tao\nMartin Storsjö\nBrion Vibber\nJames Wang\nJuanny Wang\nZhiliang Wang\nHervé Willems\nGregory J Wolfe\nKatherine Wu\nGuang Xu\nJeffery Xu\nGang Yang\nLi Yao\nJiessie Zhang\nRory Zhang\nVolvet Zhang\nLing Zhu\nJames Zhu\nDong Zhang\nHaibo Zhu\nHuade Shi\n\n\n\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.2646484375,
          "content": "Copyright (c) 2013, Cisco Systems\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, this\n  list of conditions and the following disclaimer in the documentation and/or\n  other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 13.5107421875,
          "content": "SRC_PATH=$(word 1, $(dir $(MAKEFILE_LIST)))\nvpath %.c $(SRC_PATH)\nvpath %.cc $(SRC_PATH)\nvpath %.cpp $(SRC_PATH)\nvpath %.asm $(SRC_PATH)\nvpath %.S $(SRC_PATH)\nvpath %.rc $(SRC_PATH)\nvpath %.pc.in $(SRC_PATH)\n\nOS=$(shell uname | tr A-Z a-z | tr -d \\\\-0-9. | sed -E 's/^(net|open|free)bsd/bsd/')\nARCH=$(shell uname -m)\nLIBPREFIX=lib\nLIBSUFFIX=a\nCCAS=$(CC)\nCXX_O=-o $@\nCXX_LINK_O=-o $@\nAR_OPTS=cr $@\nLINK_LOCAL_DIR=-L.\nLINK_LIB=-l$(1)\nCFLAGS_OPT=-O3\nCFLAGS_DEBUG=-g\nBUILDTYPE=Release\nV=Yes\nPREFIX=/usr/local\nSHARED=-shared\nOBJ=o\nDESTDIR=\nLIBDIR_NAME=lib\nSHAREDLIB_DIR=$(PREFIX)/lib\nPROJECT_NAME=openh264\nMODULE_NAME=gmpopenh264\nGMP_API_BRANCH=Firefox135\nGTEST_VER=release-1.8.1\nCCASFLAGS=$(CFLAGS)\nSTATIC_LDFLAGS=-lstdc++\nSTRIP ?= strip\nUSE_STACK_PROTECTOR = Yes\nUSE_LOW_VERSION_NDK=No\nUSE_ANT=No\n\nSHAREDLIB_MAJORVERSION=7\nFULL_VERSION := 2.5.0\n\nifeq (,$(wildcard $(SRC_PATH)gmp-api))\nHAVE_GMP_API=No\nelse\nHAVE_GMP_API=Yes\nendif\n\nifeq (,$(wildcard $(SRC_PATH)gtest))\nHAVE_GTEST=No\nelse\nHAVE_GTEST=Yes\nendif\n\n# Configurations\nifeq ($(BUILDTYPE), Release)\nCFLAGS += $(CFLAGS_OPT)\nCFLAGS += -DNDEBUG\nUSE_ASM = Yes\nifeq ($(DEBUGSYMBOLS), True)\nCFLAGS += -g\nCXXFLAGS += -g\nDEBUGSYMBOLS_TAG := _debug_symbols\nPROCESS_FILES := True\nendif\nelse\nCFLAGS += $(CFLAGS_DEBUG)\nUSE_ASM = No\nendif\n\nifeq ($(USE_ASAN), Yes)\nCFLAGS += -fsanitize=address\nLDFLAGS += -fsanitize=address\nendif\n\nSTRIP_FLAGS := -S\nifeq (linux, $((OS)))\nSTRIP_FLAGS := -g\nendif\n\n# Make sure the all target is the first one\nall: libraries binaries\n\nifeq (android, $(OS))\nUSE_LOW_VERSION_NDK = $(shell $(SRC_PATH)build/ndk-version-check.sh $(NDKROOT))\nifeq (Yes, $(USE_LOW_VERSION_NDK))\nUSE_ANT = Yes\ninclude $(SRC_PATH)build/platform-android-r18b.mk\nelse\ninclude $(SRC_PATH)build/platform-android.mk\nendif\nelse\ninclude $(SRC_PATH)build/platform-$(OS).mk\nendif\n\nMODULE := $(LIBPREFIX)$(MODULE_NAME).$(SHAREDLIBSUFFIX)\n\nCFLAGS += -DGENERATED_VERSION_HEADER\nLDFLAGS +=\n\nifeq (Yes, $(GCOV))\nCFLAGS += -fprofile-arcs -ftest-coverage\nLDFLAGS += -lgcov\nendif\n\n#### No user-serviceable parts below this line\nifneq ($(V),Yes)\n    QUIET_CXX  = @printf \"CXX\\t$@\\n\";\n    QUIET_CC   = @printf \"CC\\t$@\\n\";\n    QUIET_CCAS = @printf \"CCAS\\t$@\\n\";\n    QUIET_ASM  = @printf \"ASM\\t$@\\n\";\n    QUIET_AR   = @printf \"AR\\t$@\\n\";\n    QUIET_RC   = @printf \"RC\\t$@\\n\";\n    QUIET      = @\nendif\n\n\nINCLUDES += -I$(SRC_PATH)codec/api/wels -I$(SRC_PATH)codec/common/inc -Icodec/common/inc\n\nDECODER_INCLUDES += \\\n    -I$(SRC_PATH)codec/decoder/core/inc \\\n    -I$(SRC_PATH)codec/decoder/plus/inc\n\nENCODER_INCLUDES += \\\n    -I$(SRC_PATH)codec/encoder/core/inc \\\n    -I$(SRC_PATH)codec/encoder/plus/inc \\\n    -I$(SRC_PATH)codec/processing/interface\n\nPROCESSING_INCLUDES += \\\n    -I$(SRC_PATH)codec/processing/interface \\\n    -I$(SRC_PATH)codec/processing/src/common \\\n    -I$(SRC_PATH)codec/processing/src/adaptivequantization \\\n    -I$(SRC_PATH)codec/processing/src/downsample \\\n    -I$(SRC_PATH)codec/processing/src/scrolldetection \\\n    -I$(SRC_PATH)codec/processing/src/vaacalc\n\nGTEST_INCLUDES += \\\n    -I$(SRC_PATH)gtest/googletest \\\n    -I$(SRC_PATH)gtest/googletest/include\n\nCODEC_UNITTEST_INCLUDES += \\\n    -I$(SRC_PATH)gtest/googletest/include \\\n    -I$(SRC_PATH)codec/common/inc \\\n    -I$(SRC_PATH)test\n\nCONSOLE_COMMON_INCLUDES += \\\n    -I$(SRC_PATH)codec/console/common/inc\n\nH264DEC_INCLUDES += $(DECODER_INCLUDES) $(CONSOLE_COMMON_INCLUDES) -I$(SRC_PATH)codec/console/dec/inc\nH264DEC_LDFLAGS = $(LINK_LOCAL_DIR) $(call LINK_LIB,decoder) $(call LINK_LIB,common) $(call LINK_LIB,console_common)\nH264DEC_DEPS = $(LIBPREFIX)decoder.$(LIBSUFFIX) $(LIBPREFIX)common.$(LIBSUFFIX) $(LIBPREFIX)console_common.$(LIBSUFFIX)\n\nH264ENC_INCLUDES += $(ENCODER_INCLUDES) $(CONSOLE_COMMON_INCLUDES) -I$(SRC_PATH)codec/console/enc/inc\nH264ENC_LDFLAGS = $(LINK_LOCAL_DIR) $(call LINK_LIB,encoder) $(call LINK_LIB,processing) $(call LINK_LIB,common) $(call LINK_LIB,console_common)\nH264ENC_DEPS = $(LIBPREFIX)encoder.$(LIBSUFFIX) $(LIBPREFIX)processing.$(LIBSUFFIX) $(LIBPREFIX)common.$(LIBSUFFIX) $(LIBPREFIX)console_common.$(LIBSUFFIX)\n\nCODEC_UNITTEST_LDFLAGS = $(LINK_LOCAL_DIR) $(call LINK_LIB,gtest) $(call LINK_LIB,decoder) $(call LINK_LIB,encoder) $(call LINK_LIB,processing) $(call LINK_LIB,common) $(CODEC_UNITTEST_LDFLAGS_SUFFIX)\nCODEC_UNITTEST_DEPS = $(LIBPREFIX)gtest.$(LIBSUFFIX) $(LIBPREFIX)decoder.$(LIBSUFFIX) $(LIBPREFIX)encoder.$(LIBSUFFIX) $(LIBPREFIX)processing.$(LIBSUFFIX) $(LIBPREFIX)common.$(LIBSUFFIX)\nDECODER_UNITTEST_INCLUDES += $(CODEC_UNITTEST_INCLUDES) $(DECODER_INCLUDES)\nENCODER_UNITTEST_INCLUDES += $(CODEC_UNITTEST_INCLUDES) $(ENCODER_INCLUDES)\nPROCESSING_UNITTEST_INCLUDES += $(CODEC_UNITTEST_INCLUDES) $(PROCESSING_INCLUDES)\nAPI_TEST_INCLUDES += $(CODEC_UNITTEST_INCLUDES)\nCOMMON_UNITTEST_INCLUDES += $(CODEC_UNITTEST_INCLUDES)\nMODULE_INCLUDES += -I$(SRC_PATH)gmp-api\n\nDECODER_UNITTEST_CFLAGS += $(CODEC_UNITTEST_CFLAGS)\nENCODER_UNITTEST_CFLAGS += $(CODEC_UNITTEST_CFLAGS)\nPROCESSING_UNITTEST_CFLAGS += $(CODEC_UNITTEST_CFLAGS)\nAPI_TEST_CFLAGS += $(CODEC_UNITTEST_CFLAGS)\nCOMMON_UNITTEST_CFLAGS += $(CODEC_UNITTEST_CFLAGS)\n\n.PHONY: test gtest-bootstrap clean $(PROJECT_NAME).pc $(PROJECT_NAME)-static.pc\n\ngenerate-version:\n\t$(QUIET)sh $(SRC_PATH)codec/common/generate_version.sh $(SRC_PATH)\n\ncodec/decoder/plus/src/welsDecoderExt.$(OBJ): | generate-version\ncodec/encoder/plus/src/welsEncoderExt.$(OBJ): | generate-version\n\nclean:\nifeq (android,$(OS))\nclean: clean_Android\nendif\n\t$(QUIET)rm -f $(OBJS) $(OBJS:.$(OBJ)=.d) $(OBJS:.$(OBJ)=.obj) $(LIBRARIES) $(BINARIES) *.lib *.a *.dylib *.dll *.so *.so.* *.exe *.pdb *.exp *.pc *.res *.map $(SRC_PATH)codec/common/inc/version_gen.h\n\ngmp-bootstrap:\n\tif [ ! -d gmp-api ] ; then git clone https://github.com/mozilla/gmp-api gmp-api ; fi\n\tcd gmp-api && git fetch origin && git checkout $(GMP_API_BRANCH)\n\ngtest-bootstrap:\n\tif [ ! -d gtest ] ; then git clone https://github.com/google/googletest.git gtest && \\\n       cd gtest && git checkout -b $(GTEST_VER) $(GTEST_VER) ; fi\n\nifeq ($(HAVE_GTEST),Yes)\n\nifneq (android,$(OS))\nifneq (ios,$(OS))\nifneq (msvc-wp,$(OS))\nBUILD_UT_EXE=Yes\nendif\nendif\nendif\n\ntest: codec_unittest$(EXEEXT)\nifeq ($(BUILD_UT_EXE), Yes)\n\t./codec_unittest\nendif\n\nelse\ntest:\n\t@echo \"./gtest: No such file or directory.\"\n\t@echo \"You do not have gtest. Run make gtest-bootstrap to get gtest\"\nendif\n\ninclude $(SRC_PATH)codec/common/targets.mk\ninclude $(SRC_PATH)codec/decoder/targets.mk\ninclude $(SRC_PATH)codec/encoder/targets.mk\ninclude $(SRC_PATH)codec/processing/targets.mk\n\nifeq ($(HAVE_GMP_API),Yes)\ninclude $(SRC_PATH)module/targets.mk\nendif\n\nifneq (android, $(OS))\nifneq (ios, $(OS))\nifneq (msvc-wp, $(OS))\ninclude $(SRC_PATH)codec/console/dec/targets.mk\ninclude $(SRC_PATH)codec/console/enc/targets.mk\ninclude $(SRC_PATH)codec/console/common/targets.mk\nendif\nendif\nendif\n\nlibraries: $(LIBPREFIX)$(PROJECT_NAME).$(LIBSUFFIX)\n\n# No point in building dylib for ios\nifneq (ios, $(OS))\nlibraries: $(LIBPREFIX)$(PROJECT_NAME).$(SHAREDLIBSUFFIX)\nendif\n\nLIBRARIES += $(LIBPREFIX)$(PROJECT_NAME).$(LIBSUFFIX) $(LIBPREFIX)$(PROJECT_NAME).$(SHAREDLIBSUFFIXFULLVER)\n\n$(LIBPREFIX)$(PROJECT_NAME).$(LIBSUFFIX): $(ENCODER_OBJS) $(DECODER_OBJS) $(PROCESSING_OBJS) $(COMMON_OBJS)\n\t$(QUIET)rm -f $@\n\t$(QUIET_AR)$(AR) $(AR_OPTS) $+\nifeq (True, $(PROCESS_FILES))\n\tcp $@ $(LIBPREFIX)$(PROJECT_NAME)$(DEBUGSYMBOLS_TAG).$(LIBSUFFIX)\n\t$(STRIP) $(STRIP_FLAGS) $@ -o $@\nendif\n\n$(LIBPREFIX)$(PROJECT_NAME).$(SHAREDLIBSUFFIXFULLVER): $(ENCODER_OBJS) $(DECODER_OBJS) $(PROCESSING_OBJS) $(COMMON_OBJS)\n\t$(QUIET)rm -f $@\n\t$(QUIET_CXX)$(CXX) $(SHARED) $(CXX_LINK_O) $+ $(LDFLAGS) $(SHLDFLAGS)\nifeq (True, $(PROCESS_FILES))\n\tcp $@ $(LIBPREFIX)$(PROJECT_NAME)$(DEBUGSYMBOLS_TAG).$(SHAREDLIBSUFFIXFULLVER)\n\t$(STRIP) $(STRIP_FLAGS) $@ -o $@\nendif\n\nifneq ($(SHAREDLIBSUFFIXFULLVER),$(SHAREDLIBSUFFIX))\n$(LIBPREFIX)$(PROJECT_NAME).$(SHAREDLIBSUFFIX): $(LIBPREFIX)$(PROJECT_NAME).$(SHAREDLIBSUFFIXFULLVER)\n\t$(QUIET)ln -sfn $+ $(LIBPREFIX)$(PROJECT_NAME).$(SHAREDLIBSUFFIXMAJORVER)\n\t$(QUIET)ln -sfn $(LIBPREFIX)$(PROJECT_NAME).$(SHAREDLIBSUFFIXMAJORVER) $@\nifeq (True, $(PROCESS_FILES))\n\t$(QUIET)ln -sfn $(LIBPREFIX)$(PROJECT_NAME)$(DEBUGSYMBOLS_TAG).$(SHAREDLIBSUFFIXFULLVER) $(LIBPREFIX)$(PROJECT_NAME)$(DEBUGSYMBOLS_TAG).$(SHAREDLIBSUFFIXMAJORVER)\n\t$(QUIET)ln -sfn $(LIBPREFIX)$(PROJECT_NAME)$(DEBUGSYMBOLS_TAG).$(SHAREDLIBSUFFIXMAJORVER) $(LIBPREFIX)$(PROJECT_NAME)$(DEBUGSYMBOLS_TAG).$(SHAREDLIBSUFFIX)\nendif\nendif\n\nifeq ($(HAVE_GMP_API),Yes)\nplugin: $(MODULE)\nLIBRARIES += $(LIBPREFIX)$(MODULE_NAME).$(SHAREDLIBSUFFIXFULLVER)\nelse\nplugin:\n\t@echo \"./gmp-api: No such file or directory.\"\n\t@echo \"You do not have gmp-api.  Run make gmp-bootstrap to get the gmp-api headers.\"\nendif\n\necho-plugin-name:\n\t@echo $(MODULE)\n\n$(LIBPREFIX)$(MODULE_NAME).$(SHAREDLIBSUFFIXFULLVER): $(MODULE_OBJS) $(ENCODER_OBJS) $(DECODER_OBJS) $(PROCESSING_OBJS) $(COMMON_OBJS)\n\t$(QUIET)rm -f $@\n\t$(QUIET_CXX)$(CXX) $(SHARED) $(CXX_LINK_O) $+ $(LDFLAGS) $(SHLDFLAGS) $(MODULE_LDFLAGS)\nifeq (True, $(PROCESS_FILES))\n\tcp $@ $(LIBPREFIX)$(MODULE_NAME)$(DEBUGSYMBOLS_TAG).$(SHAREDLIBSUFFIXFULLVER)\n\t$(STRIP) $(STRIP_FLAGS) $@ -o $@\nendif\n\nifneq ($(SHAREDLIBSUFFIXFULLVER),$(SHAREDLIBSUFFIX))\n$(MODULE): $(LIBPREFIX)$(MODULE_NAME).$(SHAREDLIBSUFFIXFULLVER)\n\t$(QUIET)ln -sfn $+ $(LIBPREFIX)$(MODULE_NAME).$(SHAREDLIBSUFFIXMAJORVER)\n\t$(QUIET)ln -sfn $(LIBPREFIX)$(MODULE_NAME).$(SHAREDLIBSUFFIXMAJORVER) $@\nifeq (True, $(PROCESS_FILES))\n\t$(QUIET)ln -sfn $(LIBPREFIX)$(MODULE_NAME)$(DEBUGSYMBOLS_TAG).$(SHAREDLIBSUFFIXFULLVER) $(LIBPREFIX)$(MODULE_NAME)$(DEBUGSYMBOLS_TAG).$(SHAREDLIBSUFFIXMAJORVER)\n\t$(QUIET)ln -sfn $(LIBPREFIX)$(MODULE_NAME)$(DEBUGSYMBOLS_TAG).$(SHAREDLIBSUFFIXMAJORVER) $(LIBPREFIX)$(MODULE_NAME)$(DEBUGSYMBOLS_TAG).$(SHAREDLIBSUFFIX)\nendif\nendif\n\n$(PROJECT_NAME).pc: $(PROJECT_NAME).pc.in\n\t@sed -e 's;@prefix@;$(PREFIX);' -e 's;@libdir@;$(PREFIX)/lib;' -e 's;@VERSION@;$(FULL_VERSION);' -e 's;@LIBS@;;' -e 's;@LIBS_PRIVATE@;$(STATIC_LDFLAGS);' < $< > $@\n\n$(PROJECT_NAME)-static.pc: $(PROJECT_NAME).pc.in\n\t@sed -e 's;@prefix@;$(PREFIX);' -e 's;@libdir@;$(PREFIX)/lib;' -e 's;@VERSION@;$(FULL_VERSION);' -e 's;@LIBS@;$(STATIC_LDFLAGS);' -e 's;@LIBS_PRIVATE@;;' < $< > $@\n\ninstall-headers:\n\tmkdir -p $(DESTDIR)$(PREFIX)/include/wels\n\tinstall -m 644 $(SRC_PATH)/codec/api/wels/codec*.h $(DESTDIR)$(PREFIX)/include/wels\n\ninstall-static-lib: $(LIBPREFIX)$(PROJECT_NAME).$(LIBSUFFIX) install-headers\n\tmkdir -p $(DESTDIR)$(PREFIX)/$(LIBDIR_NAME)\n\tinstall -m 644 $(LIBPREFIX)$(PROJECT_NAME).$(LIBSUFFIX) $(DESTDIR)$(PREFIX)/$(LIBDIR_NAME)\n\ninstall-static: install-static-lib $(PROJECT_NAME)-static.pc\n\tmkdir -p $(DESTDIR)$(PREFIX)/$(LIBDIR_NAME)/pkgconfig\n\tinstall -m 644 $(PROJECT_NAME)-static.pc $(DESTDIR)$(PREFIX)/$(LIBDIR_NAME)/pkgconfig/$(PROJECT_NAME).pc\n\ninstall-shared: $(LIBPREFIX)$(PROJECT_NAME).$(SHAREDLIBSUFFIX) install-headers $(PROJECT_NAME).pc\n\tmkdir -p $(DESTDIR)$(SHAREDLIB_DIR)\n\tinstall -m 755 $(LIBPREFIX)$(PROJECT_NAME).$(SHAREDLIBSUFFIXFULLVER) $(DESTDIR)$(SHAREDLIB_DIR)\n\tif [ \"$(SHAREDLIBSUFFIXFULLVER)\" != \"$(SHAREDLIBSUFFIX)\" ]; then \\\n\t  cp -a $(LIBPREFIX)$(PROJECT_NAME).$(SHAREDLIBSUFFIXMAJORVER) $(DESTDIR)$(SHAREDLIB_DIR) ; \\\n\t  cp -a $(LIBPREFIX)$(PROJECT_NAME).$(SHAREDLIBSUFFIX) $(DESTDIR)$(SHAREDLIB_DIR) ; \\\n\tfi\n\tmkdir -p $(DESTDIR)$(PREFIX)/$(LIBDIR_NAME)/pkgconfig\n\tinstall -m 644 $(PROJECT_NAME).pc $(DESTDIR)$(PREFIX)/$(LIBDIR_NAME)/pkgconfig\nifneq ($(EXTRA_LIBRARY),)\n\tinstall -m 644 $(EXTRA_LIBRARY) $(DESTDIR)$(PREFIX)/$(LIBDIR_NAME)\nendif\n\ninstall: install-static-lib install-shared\n\t@:\n\nifneq ($(HAVE_GTEST),Yes)\nbinaries:\n\t@:\nelse\ninclude $(SRC_PATH)build/gtest-targets.mk\ninclude $(SRC_PATH)test/api/targets.mk\ninclude $(SRC_PATH)test/decoder/targets.mk\ninclude $(SRC_PATH)test/encoder/targets.mk\ninclude $(SRC_PATH)test/processing/targets.mk\ninclude $(SRC_PATH)test/common/targets.mk\n\nLIBRARIES += $(LIBPREFIX)ut.$(LIBSUFFIX)\n$(LIBPREFIX)ut.$(LIBSUFFIX): $(DECODER_UNITTEST_OBJS) $(ENCODER_UNITTEST_OBJS) $(PROCESSING_UNITTEST_OBJS) $(COMMON_UNITTEST_OBJS) $(API_TEST_OBJS)\n\t$(QUIET)rm -f $@\n\t$(QUIET_AR)$(AR) $(AR_OPTS) $+\n\n\nLIBRARIES +=$(LIBPREFIX)ut.$(SHAREDLIBSUFFIX)\n$(LIBPREFIX)ut.$(SHAREDLIBSUFFIX): $(DECODER_UNITTEST_OBJS) $(ENCODER_UNITTEST_OBJS) $(PROCESSING_UNITTEST_OBJS) $(API_TEST_OBJS) $(COMMON_UNITTEST_OBJS) $(CODEC_UNITTEST_DEPS)\n\t$(QUIET)rm -f $@\n\t$(QUIET_CXX)$(CXX) $(SHARED) $(CXX_LINK_O) $+ $(LDFLAGS) $(UTSHLDFLAGS) $(CODEC_UNITTEST_LDFLAGS)\n\nbinaries: codec_unittest$(EXEEXT)\nBINARIES += codec_unittest$(EXEEXT)\n\nifeq ($(BUILD_UT_EXE), Yes)\n# Build a normal command line executable\ncodec_unittest$(EXEEXT): $(DECODER_UNITTEST_OBJS) $(ENCODER_UNITTEST_OBJS) $(PROCESSING_UNITTEST_OBJS) $(API_TEST_OBJS) $(COMMON_UNITTEST_OBJS) $(CODEC_UNITTEST_DEPS) | res\n\t$(QUIET)rm -f $@\n\t$(QUIET_CXX)$(CXX) $(CXX_LINK_O) $+ $(CODEC_UNITTEST_LDFLAGS) $(LDFLAGS)\n\nres:\n\t$(QUIET)if [ ! -e res ]; then ln -s $(SRC_PATH)res .; fi\nelse\n\n# Build the unit test suite into a library that is included in a project file\nifeq (ios,$(OS))\ncodec_unittest$(EXEEXT): $(LIBPREFIX)ut.$(LIBSUFFIX) $(LIBPREFIX)gtest.$(LIBSUFFIX) $(LIBPREFIX)$(PROJECT_NAME).$(LIBSUFFIX)\nelse\ncodec_unittest$(EXEEXT): $(LIBPREFIX)ut.$(SHAREDLIBSUFFIX)\nendif\n\nifeq (android,$(OS))\nifeq (./,$(SRC_PATH))\ncodec_unittest$(EXEEXT):\nifeq ($(USE_ANT), Yes)\n\tcd ./test/build/android && $(NDKROOT)/ndk-build -B APP_ABI=$(APP_ABI) && android update project -t $(TARGET) -p . && ant debug\nelse\n\t$(NDK_BUILD) -C test/build/android -B\n\t./gradlew unittest:assembleDebug\nendif\n\nclean_Android: clean_Android_ut\nclean_Android_ut:\nifeq ($(USE_ANT), Yes)\n\t-cd ./test/build/android && $(NDKROOT)/ndk-build APP_ABI=$(APP_ABI) clean && ant clean\nelse\n\t-$(NDK_BUILD) -C test/build/android -B clean\n\t-./gradlew unittest:clean\nendif\n\nendif\nendif\n\nendif\nendif\n\n-include $(OBJS:.$(OBJ)=.d)\n\nOBJDIRS = $(sort $(dir $(OBJS)))\n\n$(OBJDIRS):\n\t$(QUIET)mkdir -p $@\n\n$(OBJS): | $(OBJDIRS)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.697265625,
          "content": "OpenH264\n========\nOpenH264 is a codec library which supports H.264 encoding and decoding. It is suitable for use in real time applications such as WebRTC. See http://www.openh264.org/ for more details.\n\nEncoder Features\n----------------\n- Constrained Baseline Profile up to Level 5.2 (Max frame size is 36864 macro-blocks)\n- Arbitrary resolution, not constrained to multiples of 16x16\n- Rate control with adaptive quantization, or constant quantization\n- Slice options: 1 slice per frame, N slices per frame, N macroblocks per slice, or N bytes per slice\n- Multiple threads automatically used for multiple slices\n- Temporal scalability up to 4 layers in a dyadic hierarchy\n- Simulcast AVC up to 4 resolutions from a single input\n- Spatial simulcast up to 4 resolutions from a single input\n- Long Term Reference (LTR) frames\n- Memory Management Control Operation (MMCO)\n- Reference picture list modification\n- Single reference frame for inter prediction\n- Multiple reference frames when using LTR and/or 3-4 temporal layers\n- Periodic and on-demand Instantaneous Decoder Refresh (IDR) frame insertion\n- Dynamic changes to bit rate, frame rate, and resolution\n- Annex B byte stream output\n- YUV 4:2:0 planar input\n\nDecoder Features\n----------------\n- Constrained Baseline Profile up to Level 5.2 (Max frame size is 36864 macro-blocks)\n- Arbitrary resolution, not constrained to multiples of 16x16\n- Single thread for all slices\n- Long Term Reference (LTR) frames\n- Memory Management Control Operation (MMCO)\n- Reference picture list modification\n- Multiple reference frames when specified in Sequence Parameter Set (SPS)\n- Annex B byte stream input\n- YUV 4:2:0 planar output\n\nOS Support\n----------\n- Windows 64-bit and 32-bit\n- Mac OS X 64-bit and 32-bit\n- Mac OS X ARM64\n- Linux 64-bit and 32-bit\n- Android 64-bit and 32-bit\n- iOS 64-bit and 32-bit\n- Windows Phone 32-bit\n\nArchitectures verified to be working\n----------\n- ppc64el\n\nProcessor Support\n-----------------\n- Intel x86 optionally with MMX/SSE (no AVX yet, help is welcome)\n- ARMv7 optionally with NEON, AArch64 optionally with NEON\n- Any architecture using C/C++ fallback functions\n\nBuilding the Library\n--------------------\nNASM needed to be installed for assembly code: workable version 2.10.06 or above, NASM can be downloaded from http://www.nasm.us/.\nFor Mac OSX 64-bit NASM needed to be below version 2.11.08 as NASM 2.11.08 will introduce error when using RIP-relative addresses in Mac OSX 64-bit\n\nTo build the arm assembly for Windows Phone, gas-preprocessor is required. It can be downloaded from git://git.libav.org/gas-preprocessor.git\n\nFor Android Builds\n------------------\nTo build for android platform, You need to install android sdk and ndk. You also need to export `**ANDROID_SDK**/tools` to PATH. On Linux, this can be done by\n\n    export PATH=**ANDROID_SDK**/tools:$PATH\n\nThe codec and demo can be built by\n\n    make OS=android NDKROOT=**ANDROID_NDK** TARGET=**ANDROID_TARGET**\n\nValid `**ANDROID_TARGET**` can be found in `**ANDROID_SDK**/platforms`, such as `android-12`.\nYou can also set `ARCH`, `NDKLEVEL` according to your device and NDK version.\n`ARCH` specifies the architecture of android device. Currently `arm`, `arm64`, `x86` and `x86_64` are supported, the default is `arm`. (`mips` and `mips64` can also be used, but there's no specific optimization for those architectures.)\n`NDKLEVEL` specifies android api level, the default is 12. Available possibilities can be found in `**ANDROID_NDK**/platforms`, such as `android-21` (strip away the `android-` prefix).\n\nBy default these commands build for the `armeabi-v7a` ABI. To build for the other android\nABIs, add `ARCH=arm64`, `ARCH=x86`, `ARCH=x86_64`, `ARCH=mips` or `ARCH=mips64`.\nTo build for the older `armeabi` ABI (which has armv5te as baseline), add `APP_ABI=armeabi` (`ARCH=arm` is implicit).\nTo build for 64-bit ABI, such as `arm64`, explicitly set `NDKLEVEL` to 21 or higher.\n\nFor iOS Builds\n--------------\nYou can build the libraries and demo applications using xcode project files\nlocated in `codec/build/iOS/dec` and `codec/build/iOS/enc`.\n\nYou can also build the libraries (but not the demo applications) using the\nmake based build system from the command line. Build with\n\n    make OS=ios ARCH=**ARCH**\n\nValid values for `**ARCH**` are the normal iOS architecture names such as\n`armv7`, `armv7s`, `arm64`, and `i386` and `x86_64` for the simulator.\nAnother settable iOS specific parameter\nis `SDK_MIN`, specifying the minimum deployment target for the built library.\nFor other details on building using make on the command line, see\n'For All Platforms' below.\n\nFor Linux Builds\n--------------\n\nYou can build the libraries (but not the demo applications) using the\nmake based build system from the command line. Build with\n\n    make OS=linux ARCH=**ARCH**\n\n You can set `ARCH` according to your linux device .\n`ARCH` specifies the architecture of the device. Currently `arm`, `arm64`, `x86` and `x86_64` are supported   \n\n NOTICE:\n \tIf your computer is x86 architecture, for build the libnary which be used on arm/aarch64 machine, you may need to use cross-compiler, for example:\n \t\tmake OS=linux CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ ARCH=arm64\n   \t\t or\n    \tmake OS=linux CC=arm-linux-gnueabi-gcc CXX=arm-linux-gnueabi-g++ ARCH=arm\n\n\nFor Windows Builds\n------------------\n\n\"make\" must be installed. It is recommended to install the Cygwin and \"make\" must be selected to be included in the installation. After the installation, please add the Cygwin bin path to your PATH.\n\nopenh264/build/AutoBuildForWindows.bat is provided to help compile the libraries on Windows platform.  \nUsage of the .bat script:  \n\n    `AutoBuildForWindows.bat Win32-Release-ASM` for x86 Release build  \n    `AutoBuildForWindows.bat Win64-Release-ASM` for x86_64 Release build  \n    `AutoBuildForWindows.bat ARM64-Release-ASM` for arm64 release build  \nfor more usage, please refer to the .bat script help.  \n\nFor All Platforms\n-------------------\n\nUsing make\n----------\n\nFrom the main project directory:\n- `make` for automatically detecting architecture and building accordingly\n- `make ARCH=i386` for x86 32-bit builds\n- `make ARCH=x86_64` for x86 64-bit builds\n- `make ARCH=arm64` for arm64 Mac 64-bit builds\n- `make V=No` for a silent build (not showing the actual compiler commands)\n- `make DEBUGSYMBOLS=True` for two libraries, one is normal libraries, another one is removed the debugging symbol table entries (those created by the -g option)\n\nThe command line programs `h264enc` and `h264dec` will appear in the main project directory.\n\nA shell script to run the command-line apps is in `testbin/CmdLineExample.sh`\n\nUsage information can be found in `testbin/CmdLineReadMe`\n\nUsing meson\n-----------\n\nMeson build definitions have been added, and are known to work on Linux\nand Windows, for x86 and x86 64-bit.\n\nSee <http://mesonbuild.com/Installing.html> for instructions on how to\ninstall meson, then:\n\n``` shell\nmeson setup builddir\nninja -C builddir\n```\n\nRun the tests with:\n\n``` shell\nmeson test -C builddir -v\n```\n\nInstall with:\n\n``` shell\nninja -C builddir install\n```\n\nUsing the Source\n----------------\n- `codec` - encoder, decoder, console (test app), build (makefile, vcproj)\n- `build` - scripts for Makefile build system\n- `test` - GTest unittest files\n- `testbin` - autobuild scripts, test app config files\n- `res` - yuv and bitstream test files\n\nKnown Issues\n------------\nSee the issue tracker on https://github.com/cisco/openh264/issues\n- Encoder errors when resolution exceeds 3840x2160\n- Encoder errors when compressed frame size exceeds half uncompressed size\n- Decoder errors when compressed frame size exceeds 1MB\n- Encoder RC requires frame skipping to be enabled to hit the target bitrate,\n  if frame skipping is disabled the target bitrate may be exceeded\n\nLicense\n-------\nBSD, see `LICENSE` file for details.\n"
        },
        {
          "name": "RELEASES",
          "type": "blob",
          "size": 20.6982421875,
          "content": "\nReleases\n-----------\nv2.5.0\n------\n- Fix some multi-thread decoding issues\n- Remove unused pSpatialLayer variable in DetermineTemporalSettings\n- Change picOrderCnt to 2\n- Fix cross compile from darwin arm64 to x86_64\n- Fix deadlock at the end of decoding\n- Fix frame-decode errors\n- Fix build with meson on riscv64\n- Enable pac bti support\n- Fix a bug in decoding H.264 streams encoded by Apple HWA encoder\n\nv2.4.1\n------\n- Fix off by one regression in decoder\n- Add security policy\n- Fix glitches that sometimes happen near the scene changes\n\nv2.4.0\n------\n- Add LoongArch SIMD\n- Support Android NDK r20 (also r21)\n- Support using gradle to build Android demo and unittest\n- Bug fixes\n\nv2.3.1\n------\n- update SHAREDLIB_MAJORVERSION value in Makefile\n\nv2.3.0\n------\n- Decoder bug fix to correct the B-frame order in some case\n- Fixes to avoid hanging for multi-thread decoding\n- Some Enhancements and fixes for rate control\n- Assembly optimization for loongson platform\n- Some minor bug fixes\n\nv2.2.0\n------\n- Add support for B-slice error concealment\n- Thread decoding support for multi-slice frame\n- SIMD optimization for loongson platform\n- Support the arm64 compilation on Windows and MacOS platform\n- Some Bug fixes for B-frame decoding\n- Some minor bug fixes\n\nv2.1.1\n------\n- release x86 and x64 libraries for android platform\n- release arm and arm64 libraries for linux platform\n- Bug fixes\n\nv2.1.0\n------\n- Experimentally support for multi-thread decoding(default disabled,and may result in random problems if enabled)\n- Assembly optimization for loongson platform\n- Update meson version to 5\n- Some minor bug fixes\n\nv2.0.0\n------\n- B-frame decoding support for Main and High Profile with two test cases\n- Add support for loongson(https://en.wikipedia.org/wiki/Loongson) platform\n- Add clang support for arm/arm64/x86 for NDK version over 17\n- Enable stack protector\n- Add some test cases\n- Avoid using C++/CX code for threads for Windows Phone/Windows Store/UWP\n- Remove extra visual studio projects for the decoder\n- Remove check for working compiler in NDK\n- Bug fixes\n\nv1.8.0\n------\n- Add meson build for Linux/Windows platform\n- Disable background detection for screen route\n- Add a workaround for Visual Studio 2013 C++ x64 compiler bug on AVX2. That bug will cause crash and has been fixed in Visual Studio 2014\n- Change the default profile from baseline to high if user does not set it and CABAC is specified\n- Skip frames that are marked as IDR due to scene change and simultaneously marked as skip frame to reduce bit rate\n- Refine threshold calculation algorithms for rate control in lower frame rate to get better effect\n- Encoder return with a specific return value instead of uninitialize encoder when input resolution is invalid\n- Refine strategy on level change to avoid frequent IDR. Encoder will not be reset if level is changed to a smaller one\n- Support to set the min and max QP values on screen content mode\n- Fix a memory issue that may cause encoder crash when temporal layer change\n- Corrected some statistics information\n- Refine error concealment algorithms to improve user experience\n- Support to get information about current output picture is reference picture or not on decoder side\n- Bug fix for decoder when 8x8 prediction mode is enabled on the input bitstream\n- Enable NEON for ChromeOS devices\n- Support for Fuchsia operating systerm\n- Support for building arm64 with MSVC\n- Remove some warnings when building with MSVC\n- Fix clang compiler error when building arm assembly funtions\n- Bug fixes for unit test\n\nv1.7.0\n------\n- Changed SPS/PPS strategy option name,See enum ENCODER_OPTION\n- Changed NAL size length parameter from static array to pointer to support more NALs.See struct SParserBsInfo\n- Changed semaphores to condition variables on apple platform\n- Changed version update mechanism as Major.Minor.patch,like 1.7.0\n- Supported to force IDR independently for each layer in simulcast AVC case.See API ForceIntraFrame()\n- Supported LTR request independently for each layer in simulcast AVC case.See struct SLTRRecoverRequest and SLTRMarkingFeedback\n- Supported to set sample aspect ratio in VUI on encoder side. See struct SSpatialLayerConfig\n- Supported to set profile and level, changed the default level as 4.1 if the user doesn’t set it. See enum ELevelIdc\n- Supported to get profile and level info on decoder side.See enum DECODER_OPTION\n- Supported for enable/disable AVX2 build option. Build option: HAVE_AVX2\n- Supported to set decoder statistics log interval, Add DECODER_OPTION_STATISTICS_LOG_INTERVAL.See DECODER_OPTION.\n- Supported for AU delimiter NAL on decoder side. AU delimiter refers to section 7.3.2.4\n- Supported for x86 PIC assembly and build option. Build option: ENABLEPIC. git issues:#2263 #2534\n- Supported for Cygwin x86_64 build\n- Supported to get sample aspect ratio by GetOption on decoder. Add option: DECODER_OPTION_GET_SAR_INFO\n- Set constraint_set4_flag constraint_set5_flag to align to CHP definition in latest H264 standard\n- Improved VUI support on decoder side\n- Improved decoder statistics info output\n- Refined the return value when failed in memory allocation\n- Added SSSE3 motion compensation routines\n- Added AVX2 motion compensation routines\n- Optimization on some of SSE2/MMX functions\n- Refactor rate control for RC_BUFFERBASED_MODE and RC_QUALITY_MODE mode\n- Added more unit tests for random resolution input,slice mode switch,profile/level setting\n- Refined logs\n- Bug fixes for 4:0:0 format support on decoder\n- Bug fixes for complexity calculation for screen content mode\n- Bug fixes for loadbalancing turn on, git issue:#2618\n- Bug fixes for parser subsps, scalling list, parser longer bitstream\n\nv1.6.0\n------\n- Adjusted the encoder API structures\n- Removed the unused data format in decoder API\n- Encoder support of simulcast AVC\n- Added support of video signal type present information\n- Added support of encoder load-balancing\n- Improved encoder multi-threads, rate control and down-sampling\n- Fixed the frame size constraint in encoder\n- Bug fixes for rate control, multi-threading, simulcasting in encoder\n- Bug fixes for interface call, return value check, memory leak in decoder\n- Bug fixes for UT and statistic information\n- Bug fixes for assembly code\n- Remove the unused and redundant code\n- Improvements on UT, memory allocation failed protection, error-protection in decoder, input parameters checking in encoder, assembly for AVX2 support, assembly code performance, logging and documentation\n- Correct some typos in source code and documents\n\nv1.5.3\n------\n- Bug fixes for GMP Plugin\n\nv1.5.2\n------\n- Fix GMP Plugin causing the Browser crash on Android\n\nv1.5.1\n------\n- Bug fixes for GMP Plugin\n\nv1.5.0\n------\n- Correct a typo in codec return value (github issue#2046, cmUnkonwReason -> cmUnknownReason)\n- Added Codec demo and auto build script for WP8\n- Decoder support of 'Constrained High Profile' of H.264\n- Encoder support of CABAC of H.264\n- Encoder support of input frame rate 60\n- Improved syntax of gaps_in_frame_num_value_allowed_flag in encoder\n- Improved memory usage for multi-threading in encoder\n- Added VUI info for base layer in encoder\n- Added encoder interface to get external setting of iMaxQp and iMinQp for rate control\n- Bug fixes for Rate Control, multi-threading and simulcasting in encoder\n- Bug fixes for NoDelay API, ParseOnly functions, error-concealment off functiond and error-detection in decoder\n- Bug fixes for UT\n- Fixes to avoid valgrind warnings, potential crash and calculation overflow\n- Merged files for decoder/encoder and remove unused files\n- Improvements on build scripts, UT, error-protection in decoder, input param checking in encoder, assembly for 64bit support, downsampling, logging and documentation\n\nNote:\n'Constrained High Profile' = 'Constrained Baseline Profile' plus:\n- CABAC\n- Intra 8x8 mode support\n- 8x8 transform\n- QP scaling matrices\n- QP per chroma component\n- Mono 4:0:0 (experimental)\n- Weighted prediction\n\nv1.4.0\n------\n- Decoder new interface of DecodeFrameNoDelay\n- Added new encoder and decoder statistics\n- Added option for generating pdb in windows builds\n- Added new rate control mode (RC_TIMESTAMP_MODE) for inconstant frame rate input\n- Added new Sps/Pps strategies for real-time video\n— Added support for simulcast avc\n- Improvements in code structure, assembly, input parameter checking, logging, UT and comments\n- In gmp-openh264, return decoder error correctly and other fixes\n- Decoder bug fixes when for Error Concealment disabled\n- Bug fixes for ParseOnly functions\n- Bug fixes for encoding large frame size (>32767MBs)\n- Fixes to avoid valgrind warnings, potential crash and calculation overflow\n\n-----------\nv1.3.1\n------\n- Fixed and enhanced protection to avoid crash when reading lossy bitstreams\n- Adjust the default mode of Error Concealment used by gmp-openh264\n\n-----------\nv1.3.0\n------\n- Removed manual API document, now using wiki: https://github.com/cisco/openh264/wiki (0af48e5 for v1.3.0)\n- Added API version in API header files\n- Added pkg-config file\n- Added decoder support of parsing only (bParseOnly) for only parsing bit stream but not decoding\n- Added timestamp and max nal size in gmp-openh264.cpp when calling encoding\n- Added timestamp info in decoder input and return structure\n- Added support of level 9 in decoder\n- Added total length of the encoded frame in encoder return structure\n- Added SetOption(ENCODER_OPTION_SVC_ENCODE_PARAM_BASE,&base) for encoder\n- Set constraint set 0 and 1 flags for non-scalable\n- Improved error concealment algorithms and provide more modes of error-concealment\n- Improved rate control algorithms and reference selection algorithms for screen content encoding \n- Added encoder and decoder statistics interface\n- Improved input parameter checking and logging\n- Bug fixes, warning reductions, and test improvements\n\n-----------\nv1.2.0\n------\n- Add and modify encoder APIs related to rate control and screen content encoding\n- Remove PauseFrame in encoder APIs\n- Improve rate control and compression ratio for screen content encoding\n- Improve error concealment algorithm\n- Improve validation of input parameters\n- Add ARM64 assembly\n- bug fixes\n\n-----------\nv1.1.0\n------\n- Modify some APIs (see API doc for detail)\n- Improve the compression ratio of screen content encoding\n- ARM64 assembly support for most of core functions in encoder & decoder\n- Modify error concealment logic to always return decoding error info until IDR picture comes\n- fix some bugs\n\n\nBinaries\n-----------\nThese binary releases are distributed under this license:\nhttp://www.openh264.org/BINARY_LICENSE.txt\n\nv2.3.0\nhttp://ciscobinary.openh264.org/libopenh264-2.3.0-android-arm.6.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.3.0-android-arm64.6.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.3.0-android-x86.6.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.3.0-android-x64.6.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.3.0-ios.a.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.3.0-linux32.6.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.3.0-linux64.6.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.3.0-linux-arm.6.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.3.0-linux-arm64.6.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.3.0-mac-arm64.6.dylib.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.3.0-mac-x64.6.dylib.bz2\nhttp://ciscobinary.openh264.org/openh264-2.3.0-win32.dll.bz2\nhttp://ciscobinary.openh264.org/openh264-2.3.0-win64.dll.bz2\n\nv2.2.0\nhttp://ciscobinary.openh264.org/libopenh264-2.2.0-android-arm.6.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.2.0-android-arm64.6.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.2.0-android-x86.6.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.2.0-android-x64.6.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.2.0-ios.a.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.2.0-linux32.6.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.2.0-linux64.6.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.2.0-linux-arm.6.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.2.0-linux-arm64.6.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.2.0-osx-arm64.6.dylib.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.2.0-osx-x64.6.dylib.bz2\nhttp://ciscobinary.openh264.org/openh264-2.2.0-win32.dll.bz2\nhttp://ciscobinary.openh264.org/openh264-2.2.0-win64.dll.bz2\n\nv2.1.1\nhttp://ciscobinary.openh264.org/libopenh264-2.1.1-android-arm.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.1-android-arm.so.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.1-android-arm64.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.1-android-arm64.so.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.1-android-x86.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.1-android-x86.so.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.1-android-x64.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.1-android-x64.so.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.1-ios.a.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.1-ios.a.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.1-linux32.6.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.1-linux32.6.so.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.1-linux64.6.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.1-linux64.6.so.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.1-linux-arm.6.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.1-linux-arm.6.so.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.1-linux-arm64.6.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.1-linux-arm64.6.so.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.1-osx32.6.dylib.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.1-osx64.6.dylib.bz2\nhttp://ciscobinary.openh264.org/openh264-2.1.1-win32.dll.bz2\nhttp://ciscobinary.openh264.org/openh264-2.1.1-win64.dll.bz2\n\nv2.1.0\nhttp://ciscobinary.openh264.org/libopenh264-2.1.0-android-arm.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.0-android-arm.so.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.0-android-arm64.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.0-android-arm64.so.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.0-ios.a.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.0-ios.a.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.0-linux32.5.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.0-linux32.5.so.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.0-linux64.5.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.0-linux64.5.so.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.0-osx32.5.dylib.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.1.0-osx64.5.dylib.bz2\nhttp://ciscobinary.openh264.org/openh264-2.1.0-win32.dll.bz2\nhttp://ciscobinary.openh264.org/openh264-2.1.0-win64.dll.bz2\n\nv2.0.0\n------\nhttp://ciscobinary.openh264.org/libopenh264-2.0.0-android.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.0.0-android.so.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.0.0-ios.a.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.0.0-ios.a.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.0.0-linux32.5.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.0.0-linux32.5.so.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.0.0-linux64.5.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.0.0-linux64.5.so.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.0.0-osx32.5.dylib.bz2\nhttp://ciscobinary.openh264.org/libopenh264-2.0.0-osx64.5.dylib.bz2\nhttp://ciscobinary.openh264.org/openh264-2.0.0-win32.dll.bz2\nhttp://ciscobinary.openh264.org/openh264-2.0.0-win64.dll.bz2\n\nv1.8.0\n------\nhttp://ciscobinary.openh264.org/libopenh264-1.8.0-android19.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.8.0-android19.so.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.8.0-ios.a.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.8.0-ios.a.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.8.0-linux32.4.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.8.0-linux32.4.so.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.8.0-linux64.4.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.8.0-linux64.4.so.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.8.0-osx32.4.dylib.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.8.0-osx64.4.dylib.bz2\nhttp://ciscobinary.openh264.org/openh264-1.8.0-win32.dll.bz2\nhttp://ciscobinary.openh264.org/openh264-1.8.0-win64.dll.bz2\n\nv1.7.0\n------\nhttp://ciscobinary.openh264.org/libopenh264-1.7.0-android19.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.7.0-android19.so.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.7.0-ios.a.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.7.0-ios.a.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.7.0-linux32.4.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.7.0-linux32.4.so.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.7.0-linux64.4.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.7.0-linux64.4.so.sig.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.7.0-osx32.4.dylib.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.7.0-osx64.4.dylib.bz2\nhttp://ciscobinary.openh264.org/openh264-1.7.0-win32.dll.bz2\nhttp://ciscobinary.openh264.org/openh264-1.7.0-win64.dll.bz2\n\nv1.6.0\n------\nhttp://ciscobinary.openh264.org/libopenh264-1.6.0-android19.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.6.0-ios.a.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.6.0-linux32.3.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.6.0-linux64.3.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.6.0-osx32.3.dylib.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.6.0-osx64.3.dylib.bz2\nhttp://ciscobinary.openh264.org/openh264-1.6.0-win32msvc.dll.bz2\nhttp://ciscobinary.openh264.org/openh264-1.6.0-win64msvc.dll.bz2\n\nv1.5.0\n------\nhttp://ciscobinary.openh264.org/libopenh264-1.5.0-android19.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.5.0-ios.a.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.5.0-linux32.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.5.0-linux64.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.5.0-osx32.dylib.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.5.0-osx64.dylib.bz2\nhttp://ciscobinary.openh264.org/openh264-1.5.0-win32msvc.dll.bz2\nhttp://ciscobinary.openh264.org/openh264-1.5.0-win64msvc.dll.bz2\n\nv1.4.0\n------\nhttp://ciscobinary.openh264.org/libopenh264-1.4.0-android19.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.4.0-linux32.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.4.0-linux64.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.4.0-osx32.dylib.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.4.0-osx64.dylib.bz2\nhttp://ciscobinary.openh264.org/openh264-1.4.0-win32msvc.dll.bz2\nhttp://ciscobinary.openh264.org/openh264-1.4.0-win64msvc.dll.bz2\n\nv1.3.1\n------\nhttp://ciscobinary.openh264.org/libopenh264-1.3.1-android19.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.3.1-linux32.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.3.1-linux64.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.3.1-osx32.dylib.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.3.1-osx64.dylib.bz2\nhttp://ciscobinary.openh264.org/openh264-1.3.1-win32msvc.dll.bz2\nhttp://ciscobinary.openh264.org/openh264-1.3.1-win64msvc.dll.bz2\n\nv1.3.0\n------\nhttp://ciscobinary.openh264.org/libopenh264-1.3.0-android19.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.3.0-linux32.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.3.0-linux64.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.3.0-osx32.dylib.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.3.0-osx64.dylib.bz2\nhttp://ciscobinary.openh264.org/openh264-1.3.0-win32msvc.dll.bz2\nhttp://ciscobinary.openh264.org/openh264-1.3.0-win64msvc.dll.bz2\n\nv1.2.0\n------\nhttp://ciscobinary.openh264.org/libopenh264-1.2.0-android19.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.2.0-linux32.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.2.0-linux64.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.2.0-osx32.dylib.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.2.0-osx64.dylib.bz2\nhttp://ciscobinary.openh264.org/openh264-1.2.0-win32msvc.dll.bz2\nhttp://ciscobinary.openh264.org/openh264-1.2.0-win64msvc.dll.bz2\n\nv1.1.0\n------\nhttp://ciscobinary.openh264.org/libopenh264-1.1.0-android19.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.1.0-linux32.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.1.0-linux64.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.1.0-osx32.dylib.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.1.0-osx64.dylib.bz2\nhttp://ciscobinary.openh264.org/openh264-1.1.0-win32msvc.dll.bz2\nhttp://ciscobinary.openh264.org/openh264-1.1.0-win64msvc.dll.bz2\n\nv1.0.0\n------\n\nhttp://ciscobinary.openh264.org/libopenh264-1.0.0-android19.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.0.0-linux32.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.0.0-linux64.so.bz2\nhttp://ciscobinary.openh264.org/libopenh264-1.0.0-osx64.dylib.bz2\nhttp://ciscobinary.openh264.org/openh264-1.0.0-win32msvc.dll.bz2\nhttp://ciscobinary.openh264.org/openh264-1.0.0-win64msvc.dll.bz2\n\n\n\n\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.626953125,
          "content": "# Security Policy\n\nIf you have discovered a security vulnerability in this project, please report it\nprivately. **Do not disclose it as a public issue.** This gives us time to work with you\nto fix the issue before public exposure, reducing the chance that the exploit will be\nused before a patch is released.\n\nYou may submit the report as an email to benzzhan@cisco.com.\n\nPlease provide the following information in your report:\n\n- A description of the vulnerability and its impact\n- How to reproduce the issue\n\nThis project is maintained on a reasonable-effort basis. As such, please give us 90 days to\nwork on a fix before public exposure.\n"
        },
        {
          "name": "autotest",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.5625,
          "content": "buildscript {\n    repositories {\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.5.3'\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n    }\n}\n\napply plugin: 'idea'\n\nidea.module {\n    excludeDirs -= file(\"build\")\n    excludeDirs += file(\".idea\")\n    excludeDirs += file(\"gradle\")\n    sourceDirs += file(\"build\")\n    sourceDirs += file(\"codec\")\n    testSourceDirs += file(\"test\")\n    testSourceDirs += file(\"autotest\")\n    resourceDirs += file(\"res\")\n    resourceDirs += file(\"docs\")\n}"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "code-coverage.sh",
          "type": "blob",
          "size": 0.1630859375,
          "content": "#!/bin/sh\nlcov -b . -d . -c -o tmp.info\nlcov -e tmp.info \\*/codec/\\* -o gcov.info\nmkdir -p code-coverage\ngenhtml gcov.info -o ./code-coverage\nrm -f tmp.info gcov.info\n"
        },
        {
          "name": "codec",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gmpopenh264.info",
          "type": "blob",
          "size": 0.11328125,
          "content": "Name: gmpopenh264\nDescription: GMP Plugin for OpenH264.\nVersion: 2.5.0\nAPIs: encode-video[h264], decode-video[h264]\n"
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.171875,
          "content": "#!/usr/bin/env sh\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=$(save \"$@\")\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\n# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\nif [ \"$(uname)\" = \"Darwin\" ] && [ \"$HOME\" = \"$PWD\" ]; then\n  cd \"$(dirname \"$0\")\"\nfi\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 7.2236328125,
          "content": "project('openh264', ['c', 'cpp'],\n  version : '2.5.0',\n  meson_version : '>= 0.52',\n  default_options : [ 'warning_level=1',\n                      'buildtype=debugoptimized' ])\n\nmajor_version = '7'\n\ncpp = meson.get_compiler('cpp')\n\ninc = include_directories([\n  join_paths('codec', 'api', 'wels'),\n  join_paths('codec', 'common', 'inc'),\n])\n\nprocessing_inc = include_directories([\n  join_paths('codec', 'processing', 'interface'),\n  join_paths('codec', 'processing', 'src', 'common'),\n  join_paths('codec', 'processing', 'src', 'adaptivequantization'),\n  join_paths('codec', 'processing', 'src', 'downsample'),\n  join_paths('codec', 'processing', 'src', 'scrolldetection'),\n  join_paths('codec', 'processing', 'src', 'vaacalc'),\n])\n\nconsole_common_inc = include_directories([\n  join_paths('codec', 'console', 'common', 'inc')\n])\n\ndecoder_inc = include_directories([\n  join_paths('codec', 'decoder', 'core', 'inc'),\n  join_paths('codec', 'decoder', 'plus', 'inc'),\n])\n\nencoder_inc = include_directories([\n  join_paths('codec', 'encoder', 'core', 'inc'),\n  join_paths('codec', 'encoder', 'plus', 'inc'),\n])\n\nsystem = host_machine.system()\ncpu_family = host_machine.cpu_family()\n\nsupported_arguments = cpp.get_supported_arguments([\n  '-Wno-non-virtual-dtor',\n  '-Wunused-but-set-variable',\n  '-Wno-strict-aliasing'])\n\nadd_project_arguments(supported_arguments, language: 'cpp')\n\ndeps = [dependency('threads')]\nc_args = []\ncpp_args = []\nasm_args = []\nasm_inc = []\ncasm_inc = []\ncpp_lib = '-lstdc++'\n\nlibm_dep = cpp.find_library('m', required : false)\ndeps += [libm_dep]\n\nif ['linux', 'android', 'ios', 'darwin'].contains(system)\n  asm_format32 = 'elf'\n  asm_format64 = 'elf64'\n  if ['ios', 'darwin'].contains(system)\n    asm_format32 = 'macho32'\n    asm_format64 = 'macho64'\n  endif\n  if cpu_family == 'x86'\n    asm_format = asm_format32\n    asm_args += ['-DX86_32', '-DHAVE_AVX2']\n    add_project_arguments('-DHAVE_AVX2', language: 'cpp')\n    add_project_arguments('-DHAVE_AVX2', '-DX86_ASM', '-DX86_32_ASM', language: 'c')\n    asm_inc = join_paths(meson.current_source_dir(), 'codec', 'common', 'x86', '')\n  elif cpu_family == 'x86_64'\n    asm_format = asm_format64\n    asm_args += ['-DUNIX64', '-DHAVE_AVX2']\n    add_project_arguments('-DHAVE_AVX2', language: 'cpp')\n    add_project_arguments('-DHAVE_AVX2', '-DX86_ASM', language: 'c')\n    asm_inc = join_paths(meson.current_source_dir(), 'codec', 'common', 'x86', '')\n  elif cpu_family == 'arm'\n    asm_format = asm_format32\n    add_project_arguments('-DHAVE_NEON', language: 'c')\n    add_project_arguments('-DHAVE_NEON', language: 'c')\n    casm_inc = include_directories(join_paths('codec', 'common', 'arm'))\n  elif cpu_family == 'aarch64'\n    asm_format = asm_format64\n    add_project_arguments('-DHAVE_NEON_AARCH64', language: 'c')\n    add_project_arguments('-DHAVE_NEON_AARCH64', language: 'cpp')\n    casm_inc = include_directories(join_paths('codec', 'common', 'arm64'))\n  elif cpu_family == 'loongarch32'\n    asm_format = asm_format32\n    add_project_arguments('-mlsx', '-DHAVE_LSX', '-mlasx', '-DHAVE_LASX', language: 'c')\n    add_project_arguments('-DHAVE_LSX', '-DHAVE_LASX', language: 'cpp')\n    casm_inc = include_directories(join_paths('codec', 'common', 'loongarch'))\n  elif cpu_family == 'loongarch64'\n    asm_format = asm_format64\n    add_project_arguments('-mlsx', '-DHAVE_LSX', '-mlasx', '-DHAVE_LASX', language: 'c')\n    add_project_arguments('-DHAVE_LSX', '-DHAVE_LASX', language: 'cpp')\n    casm_inc = include_directories(join_paths('codec', 'common', 'loongarch'))\n  elif cpu_family == 'riscv64'\n    # We don't have riscv64-specific optimization for now.\n    asm_format = asm_format64\n  elif cpu_family == 'ppc'\n    # We don't have powerpc-specific optimization for now.\n    asm_format = asm_format32\n  elif cpu_family == 'ppc64'\n    # We don't have powerpc64-specific optimization for now.\n    asm_format = asm_format64\n  else\n    error('FIXME: unhandled CPU family @0@ for @1@'.format(cpu_family, system))\n  endif\n\n  if ['ios', 'darwin', 'android'].contains(system)\n    cpp_lib = '-lc++'\n  endif\nelif system == 'windows'\n  if cpu_family == 'x86'\n    asm_format = 'win32'\n    asm_args += ['-DPREFIX', '-DX86_32']\n    asm_inc = join_paths(meson.current_source_dir(), 'codec', 'common', 'x86', '')\n  elif cpu_family == 'x86_64'\n    asm_format = 'win64'\n    asm_args += ['-DWIN64']\n    asm_inc = join_paths(meson.current_source_dir(), 'codec', 'common', 'x86', '')\n  elif cpu_family == 'arm'\n    if cpp.get_argument_syntax() == 'msvc'\n      asm_format = 'armasm'\n      asm_args += ['-nologo', '-DHAVE_NEON', '-ignore', '4509']\n      asm_cmds = ['armasm']\n    else\n      asm_format = 'clang'\n      asm_args += ['-DHAVE_NEON', '-mimplicit-it=always']\n      asm_cmds = cpp.cmd_array()\n    endif\n    asm_inc = join_paths(meson.current_source_dir(), 'codec', 'common', 'arm', '')\n  elif cpu_family == 'aarch64'\n    asm_format = 'armasm'\n    asm_args += ['-nologo', '-DHAVE_NEON_AARCH64']\n    asm_inc = join_paths(meson.current_source_dir(), 'codec', 'common', 'arm64', '')\n  else\n    error('FIXME: unhandled CPU family @0@ for Windows'.format(cpu_family))\n  endif\nelse\n  error('FIXME: Unhandled system @0@'.format(system))\nendif\n\nuse_asm_gen = false\nif cpu_family in ['x86', 'x86_64']\n  nasm = find_program('nasm')\n\n  use_asm_gen = true\n  asm_gen = generator(nasm,\n    output : '@BASENAME@.o',\n    arguments : [\n      '-f', asm_format,\n      '-i', asm_inc,\n      '@INPUT@',\n      '-o', '@OUTPUT@'] + asm_args)\nelif system == 'windows'\n  if  cpu_family == 'arm'\n    # For ARM, gas-preprocessor is needed for converting the asm to be\n    # buildable as thumb even with Clang.\n    use_asm_gen = true\n    gasprep = find_program('gas-preprocessor.pl')\n    asm_gen = generator(gasprep,\n      output : '@BASENAME@.obj',\n      arguments : [\n        '-as-type', asm_format,\n        '-force-thumb',\n        '--'\n        ] + asm_cmds + [\n        '-I' + asm_inc] + asm_args + [\n        '@INPUT@',\n        '-c', '-o', '@OUTPUT@'])\n  elif cpu_family == 'aarch64'\n    # For ARM64, Clang can build the assembly as-is without needing to use\n    # either gas-preprocessor or armasm64.\n    if cpp.get_argument_syntax() == 'msvc' and (cpp.get_id() != 'clang-cl' or meson.version().version_compare('<0.58.0'))\n      use_asm_gen = true\n      gasprep = find_program('gas-preprocessor.pl')\n      asm_gen = generator(gasprep,\n        output : '@BASENAME@.obj',\n        arguments : [\n          '-as-type', asm_format,\n          '-arch', 'aarch64',\n          '--',\n          'armasm64',\n          '-I' + asm_inc] + asm_args + [\n          '@INPUT@',\n          '-c', '-o', '@OUTPUT@'])\n    endif\n  else\n    # Windows only supports x86, x86_64, arm, arm64\n    error('unreachable code')\n  endif\nendif\n\nsubdir ('codec')\nsubdir ('test')\n\nlibopenh264 = library('openh264',\n  link_whole: [libcommon, libprocessing, libencoder, libdecoder],\n  install: true,\n  soversion: major_version,\n  version: meson.project_version(),\n  vs_module_defs: 'openh264.def',\n  dependencies: deps)\n\nopenh264_dep = declare_dependency(\n  link_with: libopenh264,\n  include_directories: include_directories('codec/api'),\n  dependencies: deps)\n\npkg = import('pkgconfig')\npkg.generate(libopenh264,\n  description: 'OpenH264 is a codec library which supports H.264 encoding ' +\n               'and decoding. It is suitable for use in real time ' +\n               'applications such as WebRTC.',\n)\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 0.0625,
          "content": "option('tests', type : 'feature', value : 'auto', yield : true)\n"
        },
        {
          "name": "module",
          "type": "tree",
          "content": null
        },
        {
          "name": "openh264.def",
          "type": "blob",
          "size": 0.150390625,
          "content": "EXPORTS\n    WelsCreateDecoder\n    WelsDestroyDecoder\n    WelsCreateSVCEncoder\n    WelsDestroySVCEncoder\n    WelsGetCodecVersion\n    WelsGetCodecVersionEx\n"
        },
        {
          "name": "openh264.pc.in",
          "type": "blob",
          "size": 0.3271484375,
          "content": "prefix=@prefix@\nlibdir=@libdir@\nincludedir=${prefix}/include\n\nName: OpenH264\nDescription: OpenH264 is a codec library which supports H.264 encoding and decoding. It is suitable for use in real time applications such as WebRTC.\nVersion: @VERSION@\nLibs: -L${libdir} -lopenh264 @LIBS@\nLibs.private: @LIBS_PRIVATE@\nCflags: -I${includedir}\n"
        },
        {
          "name": "openh264.rc",
          "type": "blob",
          "size": 1.650390625,
          "content": "\n#define APSTUDIO_READONLY_SYMBOLS\n/////////////////////////////////////////////////////////////////////////////\n//\n// Generated from the TEXTINCLUDE 2 resource.\n//\n#include \"windows.h\"\n\n/////////////////////////////////////////////////////////////////////////////\n#undef APSTUDIO_READONLY_SYMBOLS\n\n/////////////////////////////////////////////////////////////////////////////\n// English (U.S.) resources\n\n#if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_ENU)\n#ifdef _WIN32\nLANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US\n#pragma code_page(1252)\n#endif //_WIN32\n\n/////////////////////////////////////////////////////////////////////////////\n//\n// Version\n//\n\nVS_VERSION_INFO VERSIONINFO\n FILEVERSION 2,5,0,2411\n PRODUCTVERSION 2,5,0,2411\n FILEFLAGSMASK 0x3fL\n#ifdef _DEBUG\n FILEFLAGS 0x1L\n#else\n FILEFLAGS 0x0L\n#endif\n FILEOS 0x40004L\n FILETYPE 0x2L\n FILESUBTYPE 0x0L\nBEGIN\n    BLOCK \"StringFileInfo\"\n    BEGIN\n        BLOCK \"040904b0\"\n        BEGIN\n            VALUE \"Comments\", \"Cisco OpenH264 codec\"\n            VALUE \"CompanyName\", \"Cisco Systems Inc.\"\n            VALUE \"FileDescription\", \"Cisco OpenH264 codec\"\n            VALUE \"FileVersion\", \"2.5.0.2411\"\n            VALUE \"InternalName\", \"openh264.dll\"\n            VALUE \"LegalCopyright\", \"© 2011-2015 Cisco and/or its affiliates. All rights reserved.\"\n            VALUE \"OriginalFilename\", \"openh264.dll\"\n            VALUE \"ProductName\", \"Cisco OpenH264 codec\"\n            VALUE \"ProductVersion\", \"2.5.0.2411\"\n        END\n    END\n    BLOCK \"VarFileInfo\"\n    BEGIN\n        VALUE \"Translation\", 0x409, 1200\n    END\nEND\n\n#endif    // English (U.S.) resources\n/////////////////////////////////////////////////////////////////////////////\n"
        },
        {
          "name": "openh264.rc.template",
          "type": "blob",
          "size": 1.740234375,
          "content": "\n#define APSTUDIO_READONLY_SYMBOLS\n/////////////////////////////////////////////////////////////////////////////\n//\n// Generated from the TEXTINCLUDE 2 resource.\n//\n#include \"windows.h\"\n\n/////////////////////////////////////////////////////////////////////////////\n#undef APSTUDIO_READONLY_SYMBOLS\n\n/////////////////////////////////////////////////////////////////////////////\n// English (U.S.) resources\n\n#if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_ENU)\n#ifdef _WIN32\nLANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US\n#pragma code_page(1252)\n#endif //_WIN32\n\n/////////////////////////////////////////////////////////////////////////////\n//\n// Version\n//\n\nVS_VERSION_INFO VERSIONINFO\n FILEVERSION $MAJOR,$MINOR,$REVISION,$RESERVED\n PRODUCTVERSION $MAJOR,$MINOR,$REVISION,$RESERVED\n FILEFLAGSMASK 0x3fL\n#ifdef _DEBUG\n FILEFLAGS 0x1L\n#else\n FILEFLAGS 0x0L\n#endif\n FILEOS 0x40004L\n FILETYPE 0x2L\n FILESUBTYPE 0x0L\nBEGIN\n    BLOCK \"StringFileInfo\"\n    BEGIN\n        BLOCK \"040904b0\"\n        BEGIN\n            VALUE \"Comments\", \"Cisco OpenH264 codec\"\n            VALUE \"CompanyName\", \"Cisco Systems Inc.\"\n            VALUE \"FileDescription\", \"Cisco OpenH264 codec\"\n            VALUE \"FileVersion\", \"$MAJOR.$MINOR.$REVISION.$RESERVED\"\n            VALUE \"InternalName\", \"openh264.dll\"\n            VALUE \"LegalCopyright\", \"© 2011-2015 Cisco and/or its affiliates. All rights reserved.\"\n            VALUE \"OriginalFilename\", \"openh264.dll\"\n            VALUE \"ProductName\", \"Cisco OpenH264 codec\"\n            VALUE \"ProductVersion\", \"$MAJOR.$MINOR.$REVISION.$RESERVED\"\n        END\n    END\n    BLOCK \"VarFileInfo\"\n    BEGIN\n        VALUE \"Translation\", 0x409, 1200\n    END\nEND\n\n#endif    // English (U.S.) resources\n/////////////////////////////////////////////////////////////////////////////\n"
        },
        {
          "name": "res",
          "type": "tree",
          "content": null
        },
        {
          "name": "run_Test.sh",
          "type": "blob",
          "size": 2.6708984375,
          "content": "#!/bin/bash\n#**********************************************************************************\n#    This script is for test on travis.Currently there are 5 jobs running on\n#    travis in parallel status which are listed as below:\n#        1.Unit test with gcc compiler;\n#        2.Unit test with clang compiler;\n#        3.Binary comparison test for test bit stream A;\n#        4.Binary comparison test for test bit stream B;\n#        5.Binary comparison test for test bit stream C.\n#    For binary comparison test,before running all test cases, it need to prepare\n#    the test space.On travis,as those parallel jobs are running on different VMs,\n#    so each job need to prepare for its test space for itself.\n#\n#   --usage:\n#             ./runTest.sh  UnitTest\n#         or  ./runTest.sh  BinaryCompare  ${TestBitStreamName}\n#\n# date:  10/06/2014 Created\n#**********************************************************************************\n#usage: runInputParamCheck  ${TestType}  ${TestBitStream}\nrunInputParamCheck()\n{\n  local ParameterFlag=\"\"\n  if [  $# -eq 1 -a   \"$1\" = \"UnitTest\" ]\n  then\n    let \"ParameterFlag=0\"\n  elif [  $# -eq 2 -a   \"$1\" = \"BinaryCompare\" ]\n  then\n    let \"ParameterFlag=0\"\n  else\n    let \"ParameterFlag=1\"\n  fi\n  return ${ParameterFlag}\n}\n#usage: runUnitTest\nrunUnitTest()\n{\n  CFLAGS=-Werror make -B ENABLE64BIT=Yes BUILDTYPE=Release all plugin test\n  CFLAGS=-Werror make -B ENABLE64BIT=Yes BUILDTYPE=Debug   all plugin test\n  CFLAGS=-Werror make -B ENABLE64BIT=No  BUILDTYPE=Release all plugin test\n  CFLAGS=-Werror make -B ENABLE64BIT=No  BUILDTYPE=Debug   all plugin test\n  return $?\n}\n#usage: runBinaryTest $TestBitStream\nrunBinaryTest()\n{\n  if [ ! $# -eq 2  ]\n  then\n    echo \"usage: runPrepareAndBinaryTest  \\$TestBitStream\"\n    exit 1\n  fi\n  local TestBitStream=$1\n  local TestType=$2\n  local WorkingDir=`pwd`\n  local BinaryTestDir=\"test/encoder_binary_comparison\"\n  cd ${WorkingDir}\n  echo \"\"\n  echo \" binary compare test, test bit stream is ${TestBitStream}\"\n  echo \"\"\n  ${BinaryTestDir}/run_OneBitStream.sh  ${TestBitStream} ${TestType}\n  return $?\n}\n#usage:runMain  ${TestType}  ${TestBitStream}\nrunMain()\n{\n  local TestType=$1\n  local TestBitStream=$2\n  runInputParamCheck  ${TestType}  ${TestBitStream}\n  if [  ! $?  -eq 0  ]\n  then\n    echo \"usage:     ./runTest.sh  UnitTest  \\${PrepareFlag}\"\n    echo \"       or  ./runTest.sh  BinaryCompare  \\${TestBitStreamName} \\${PrepareFlag} \"\n    exit 1\n  fi\n  if [ \"${TestType}\"  = \"UnitTest\"  ]\n  then\n    set -e\n    runUnitTest\n    return $?\n  fi\n  if [  \"${TestType}\"  = \"BinaryCompare\" ]\n  then\n    set -e\n    runBinaryTest ${TestBitStream} TravisTest\n    return $?\n  fi\n}\nTestType=$1\nTestBitStream=$2\nrunMain  ${TestType}  ${TestBitStream}\n\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.2451171875,
          "content": "include ':test-dec', ':test-enc', ':unittest'\nproject(':test-dec').projectDir = new File('codec/build/android/dec')\nproject(':test-enc').projectDir = new File('codec/build/android/enc')\nproject(':unittest').projectDir = new File('test/build/android')\n"
        },
        {
          "name": "subprojects",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "testbin",
          "type": "tree",
          "content": null
        },
        {
          "name": "ut.def",
          "type": "blob",
          "size": 0.0234375,
          "content": "EXPORTS\n    CodecUtMain\n"
        }
      ]
    }
  ]
}