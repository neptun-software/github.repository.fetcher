{
  "metadata": {
    "timestamp": 1736566038817,
    "page": 22,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/benchmark",
      "stars": 9180,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.072265625,
          "content": "---\nLanguage:        Cpp\nBasedOnStyle:  Google\nPointerAlignment: Left\n...\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 0.2158203125,
          "content": "---\nChecks:          'clang-analyzer-*,readability-redundant-*,performance-*'\nWarningsAsErrors: 'clang-analyzer-*,readability-redundant-*,performance-*'\nHeaderFilterRegex: '.*'\nFormatStyle:     none\nUser:            user\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7626953125,
          "content": "*.a\n*.so\n*.so.?*\n*.dll\n*.exe\n*.dylib\n*.cmake\n!/cmake/*.cmake\n!/test/AssemblyTests.cmake\n*~\n*.swp\n*.pyc\n__pycache__\n.DS_Store\n\n# lcov\n*.lcov\n/lcov\n\n# cmake files.\n/Testing\nCMakeCache.txt\nCMakeFiles/\ncmake_install.cmake\n\n# makefiles.\nMakefile\n\n# in-source build.\nbin/\nlib/\n/test/*_test\n\n# exuberant ctags.\ntags\n\n# YouCompleteMe configuration.\n.ycm_extra_conf.pyc\n\n# ninja generated files.\n.ninja_deps\n.ninja_log\nbuild.ninja\ninstall_manifest.txt\nrules.ninja\n\n# bazel output symlinks.\nbazel-*\nMODULE.bazel.lock\n\n# out-of-source build top-level folders.\nbuild/\n_build/\nbuild*/\n\n# in-source dependencies\n/googletest/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\nCMakeSettings.json\n\n# Visual Studio Code cache/options directory\n.vscode/\n\n# Python build stuff\ndist/\n*.egg-info*\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.51171875,
          "content": "repos:\n  -   repo: https://github.com/keith/pre-commit-buildifier\n      rev: 7.3.1\n      hooks:\n      -   id: buildifier\n      -   id: buildifier-lint\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.13.0\n    hooks:\n      - id: mypy\n        types_or: [ python, pyi ]\n        args: [ \"--ignore-missing-imports\", \"--scripts-are-modules\" ]\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.7.2\n    hooks:\n      - id: ruff\n        args: [ --fix, --exit-non-zero-on-fix ]\n      - id: ruff-format\n"
        },
        {
          "name": ".ycm_extra_conf.py",
          "type": "blob",
          "size": 3.828125,
          "content": "import os\n\nimport ycm_core\n\n# These are the compilation flags that will be used in case there's no\n# compilation database set (by default, one is not set).\n# CHANGE THIS LIST OF FLAGS. YES, THIS IS THE DROID YOU HAVE BEEN LOOKING FOR.\nflags = [\n    \"-Wall\",\n    \"-Werror\",\n    \"-pedantic-errors\",\n    \"-std=c++0x\",\n    \"-fno-strict-aliasing\",\n    \"-O3\",\n    \"-DNDEBUG\",\n    # ...and the same thing goes for the magic -x option which specifies the\n    # language that the files to be compiled are written in. This is mostly\n    # relevant for c++ headers.\n    # For a C project, you would set this to 'c' instead of 'c++'.\n    \"-x\",\n    \"c++\",\n    \"-I\",\n    \"include\",\n    \"-isystem\",\n    \"/usr/include\",\n    \"-isystem\",\n    \"/usr/local/include\",\n]\n\n\n# Set this to the absolute path to the folder (NOT the file!) containing the\n# compile_commands.json file to use that instead of 'flags'. See here for\n# more details: http://clang.llvm.org/docs/JSONCompilationDatabase.html\n#\n# Most projects will NOT need to set this to anything; you can just change the\n# 'flags' list of compilation flags. Notice that YCM itself uses that approach.\ncompilation_database_folder = \"\"\n\nif os.path.exists(compilation_database_folder):\n    database = ycm_core.CompilationDatabase(compilation_database_folder)\nelse:\n    database = None\n\nSOURCE_EXTENSIONS = [\".cc\"]\n\n\ndef DirectoryOfThisScript():\n    return os.path.dirname(os.path.abspath(__file__))\n\n\ndef MakeRelativePathsInFlagsAbsolute(flags, working_directory):\n    if not working_directory:\n        return list(flags)\n    new_flags = []\n    make_next_absolute = False\n    path_flags = [\"-isystem\", \"-I\", \"-iquote\", \"--sysroot=\"]\n    for flag in flags:\n        new_flag = flag\n\n        if make_next_absolute:\n            make_next_absolute = False\n            if not flag.startswith(\"/\"):\n                new_flag = os.path.join(working_directory, flag)\n\n        for path_flag in path_flags:\n            if flag == path_flag:\n                make_next_absolute = True\n                break\n\n            if flag.startswith(path_flag):\n                path = flag[len(path_flag) :]\n                new_flag = path_flag + os.path.join(working_directory, path)\n                break\n\n        if new_flag:\n            new_flags.append(new_flag)\n    return new_flags\n\n\ndef IsHeaderFile(filename):\n    extension = os.path.splitext(filename)[1]\n    return extension in [\".h\", \".hxx\", \".hpp\", \".hh\"]\n\n\ndef GetCompilationInfoForFile(filename):\n    # The compilation_commands.json file generated by CMake does not have entries\n    # for header files. So we do our best by asking the db for flags for a\n    # corresponding source file, if any. If one exists, the flags for that file\n    # should be good enough.\n    if IsHeaderFile(filename):\n        basename = os.path.splitext(filename)[0]\n        for extension in SOURCE_EXTENSIONS:\n            replacement_file = basename + extension\n            if os.path.exists(replacement_file):\n                compilation_info = database.GetCompilationInfoForFile(\n                    replacement_file\n                )\n                if compilation_info.compiler_flags_:\n                    return compilation_info\n        return None\n    return database.GetCompilationInfoForFile(filename)\n\n\ndef FlagsForFile(filename, **kwargs):\n    if database:\n        # Bear in mind that compilation_info.compiler_flags_ does NOT return a\n        # python list, but a \"list-like\" StringVec object\n        compilation_info = GetCompilationInfoForFile(filename)\n        if not compilation_info:\n            return None\n\n        final_flags = MakeRelativePathsInFlagsAbsolute(\n            compilation_info.compiler_flags_,\n            compilation_info.compiler_working_dir_,\n        )\n    else:\n        relative_to = DirectoryOfThisScript()\n        final_flags = MakeRelativePathsInFlagsAbsolute(flags, relative_to)\n\n    return {\"flags\": final_flags, \"do_cache\": True}\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 2.61328125,
          "content": "# This is the official list of benchmark authors for copyright purposes.\n# This file is distinct from the CONTRIBUTORS files.\n# See the latter for an explanation.\n#\n# Names should be added to this file as:\n#\tName or Organization <email address>\n# The email address is not required for organizations.\n#\n# Please keep the list sorted.\n\nAlbert Pretorius <pretoalb@gmail.com>\nAlex Steele <steeleal123@gmail.com>\nAndriy Berestovskyy <berestovskyy@gmail.com>\nArne Beer <arne@twobeer.de>\nCarto\nCezary Skrzyński <czars1988@gmail.com>\nChristian Wassermann <christian_wassermann@web.de>\nChristopher Seymour <chris.j.seymour@hotmail.com>\nColin Braley <braley.colin@gmail.com>\nDaniel Harvey <danielharvey458@gmail.com>\nDavid Coeurjolly <david.coeurjolly@liris.cnrs.fr>\nDeniz Evrenci <denizevrenci@gmail.com>\nDirac Research \nDominik Czarnota <dominik.b.czarnota@gmail.com>\nDominik Korman <kormandominik@gmail.com>\nDonald Aingworth <donalds_junk_mail@yahoo.com>\nEric Backus <eric_backus@alum.mit.edu>\nEric Fiselier <eric@efcs.ca>\nEugene Zhuk <eugene.zhuk@gmail.com>\nEvgeny Safronov <division494@gmail.com>\nFabien Pichot <pichot.fabien@gmail.com>\nFederico Ficarelli <federico.ficarelli@gmail.com>\nFelix Homann <linuxaudio@showlabor.de>\nGergely Meszaros <maetveis@gmail.com>\nGergő Szitár <szitar.gergo@gmail.com>\nGoogle Inc.\nHenrique Bucher <hbucher@gmail.com>\nInternational Business Machines Corporation\nIsmael Jimenez Martinez <ismael.jimenez.martinez@gmail.com>\nJern-Kuan Leong <jernkuan@gmail.com>\nJianXiong Zhou <zhoujianxiong2@gmail.com>\nJoao Paulo Magalhaes <joaoppmagalhaes@gmail.com>\nJordan Williams <jwillikers@protonmail.com>\nJussi Knuuttila <jussi.knuuttila@gmail.com>\nKaito Udagawa <umireon@gmail.com>\nKishan Kumar <kumar.kishan@outlook.com>\nLei Xu <eddyxu@gmail.com>\nMarcel Jacobse <mjacobse@uni-bremen.de>\nMatt Clarkson <mattyclarkson@gmail.com>\nMaxim Vafin <maxvafin@gmail.com>\nMike Apodaca <gatorfax@gmail.com>\nMin-Yih Hsu <yihshyng223@gmail.com>\nMongoDB Inc.\nNick Hutchinson <nshutchinson@gmail.com>\nNorman Heino <norman.heino@gmail.com>\nOleksandr Sochka <sasha.sochka@gmail.com>\nOri Livneh <ori.livneh@gmail.com>\nPaul Redmond <paul.redmond@gmail.com>\nRadoslav Yovchev <radoslav.tm@gmail.com>\nRaghu Raja <raghu@enfabrica.net>\nRainer Orth <ro@cebitec.uni-bielefeld.de>\nRoman Lebedev <lebedev.ri@gmail.com>\nSayan Bhattacharjee <aero.sayan@gmail.com>\nShapr3D <google-contributors@shapr3d.com>\nShuo Chen <chenshuo@chenshuo.com>\nStaffan Tjernstrom <staffantj@gmail.com>\nSteinar H. Gunderson <sgunderson@bigfoot.com>\nStripe, Inc.\nTobias Schmidt <tobias.schmidt@in.tum.de>\nYixuan Qiu <yixuanq@gmail.com>\nYusuke Suzuki <utatane.tea@gmail.com>\nZbigniew Skowron <zbychs@gmail.com>\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 2.3134765625,
          "content": "licenses([\"notice\"])\n\nCOPTS = [\n    \"-pedantic\",\n    \"-pedantic-errors\",\n    \"-std=c++17\",\n    \"-Wall\",\n    \"-Wconversion\",\n    \"-Wextra\",\n    \"-Wshadow\",\n    #    \"-Wshorten-64-to-32\",\n    \"-Wfloat-equal\",\n    \"-fstrict-aliasing\",\n    ## assert() are used a lot in tests upstream, which may be optimised out leading to\n    ## unused-variable warning.\n    \"-Wno-unused-variable\",\n    \"-Werror=old-style-cast\",\n]\n\nconfig_setting(\n    name = \"windows\",\n    constraint_values = [\"@platforms//os:windows\"],\n    visibility = [\":__subpackages__\"],\n)\n\nconfig_setting(\n    name = \"perfcounters\",\n    define_values = {\n        \"pfm\": \"1\",\n    },\n    visibility = [\":__subpackages__\"],\n)\n\ncc_library(\n    name = \"benchmark\",\n    srcs = glob(\n        [\n            \"src/*.cc\",\n            \"src/*.h\",\n        ],\n        exclude = [\"src/benchmark_main.cc\"],\n    ),\n    hdrs = [\n        \"include/benchmark/benchmark.h\",\n        \"include/benchmark/export.h\",\n    ],\n    copts = select({\n        \":windows\": [],\n        \"//conditions:default\": COPTS,\n    }),\n    defines = [\n        \"BENCHMARK_STATIC_DEFINE\",\n        \"BENCHMARK_VERSION=\\\\\\\"\" + (module_version() if module_version() != None else \"\") + \"\\\\\\\"\",\n    ] + select({\n        \":perfcounters\": [\"HAVE_LIBPFM\"],\n        \"//conditions:default\": [],\n    }),\n    includes = [\"include\"],\n    linkopts = select({\n        \":windows\": [\"-DEFAULTLIB:shlwapi.lib\"],\n        \"//conditions:default\": [\"-pthread\"],\n    }),\n    # Only static linking is allowed; no .so will be produced.\n    # Using `defines` (i.e. not `local_defines`) means that no\n    # dependent rules need to bother about defining the macro.\n    linkstatic = True,\n    local_defines = [\n        # Turn on Large-file Support\n        \"_FILE_OFFSET_BITS=64\",\n        \"_LARGEFILE64_SOURCE\",\n        \"_LARGEFILE_SOURCE\",\n    ],\n    visibility = [\"//visibility:public\"],\n    deps = select({\n        \":perfcounters\": [\"@libpfm\"],\n        \"//conditions:default\": [],\n    }),\n)\n\ncc_library(\n    name = \"benchmark_main\",\n    srcs = [\"src/benchmark_main.cc\"],\n    hdrs = [\n        \"include/benchmark/benchmark.h\",\n        \"include/benchmark/export.h\",\n    ],\n    includes = [\"include\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\":benchmark\"],\n)\n\ncc_library(\n    name = \"benchmark_internal_headers\",\n    hdrs = glob([\"src/*.h\"]),\n    visibility = [\"//test:__pkg__\"],\n)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 14.259765625,
          "content": "# Require CMake 3.10. If available, use the policies up to CMake 3.22.\ncmake_minimum_required (VERSION 3.13...3.22)\n\nproject (benchmark VERSION 1.9.1 LANGUAGES CXX)\n\noption(BENCHMARK_ENABLE_TESTING \"Enable testing of the benchmark library.\" ON)\noption(BENCHMARK_ENABLE_EXCEPTIONS \"Enable the use of exceptions in the benchmark library.\" ON)\noption(BENCHMARK_ENABLE_LTO \"Enable link time optimisation of the benchmark library.\" OFF)\noption(BENCHMARK_USE_LIBCXX \"Build and test using libc++ as the standard library.\" OFF)\noption(BENCHMARK_ENABLE_WERROR \"Build Release candidates with -Werror.\" ON)\noption(BENCHMARK_FORCE_WERROR \"Build Release candidates with -Werror regardless of compiler issues.\" OFF)\n\nif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"PGI\")\n  # PGC++ maybe reporting false positives.\n  set(BENCHMARK_ENABLE_WERROR OFF)\nendif()\nif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"NVHPC\")\n  set(BENCHMARK_ENABLE_WERROR OFF)\nendif()\nif(BENCHMARK_FORCE_WERROR)\n  set(BENCHMARK_ENABLE_WERROR ON)\nendif(BENCHMARK_FORCE_WERROR)\n\nif(NOT (MSVC OR CMAKE_CXX_SIMULATE_ID STREQUAL \"MSVC\"))\n  option(BENCHMARK_BUILD_32_BITS \"Build a 32 bit version of the library.\" OFF)\nelse()\n  set(BENCHMARK_BUILD_32_BITS OFF CACHE BOOL \"Build a 32 bit version of the library - unsupported when using MSVC)\" FORCE)\nendif()\noption(BENCHMARK_ENABLE_INSTALL \"Enable installation of benchmark. (Projects embedding benchmark may want to turn this OFF.)\" ON)\noption(BENCHMARK_ENABLE_DOXYGEN \"Build documentation with Doxygen.\" OFF)\noption(BENCHMARK_INSTALL_DOCS \"Enable installation of documentation.\" ON)\n\n# Allow unmet dependencies to be met using CMake's ExternalProject mechanics, which\n# may require downloading the source code.\noption(BENCHMARK_DOWNLOAD_DEPENDENCIES \"Allow the downloading and in-tree building of unmet dependencies\" OFF)\n\n# This option can be used to disable building and running unit tests which depend on gtest\n# in cases where it is not possible to build or find a valid version of gtest.\noption(BENCHMARK_ENABLE_GTEST_TESTS \"Enable building the unit tests which depend on gtest\" ON)\noption(BENCHMARK_USE_BUNDLED_GTEST \"Use bundled GoogleTest. If disabled, the find_package(GTest) will be used.\" ON)\n\noption(BENCHMARK_ENABLE_LIBPFM \"Enable performance counters provided by libpfm\" OFF)\n\n# Export only public symbols\nset(CMAKE_CXX_VISIBILITY_PRESET hidden)\nset(CMAKE_VISIBILITY_INLINES_HIDDEN ON)\n\nif(CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n    # As of CMake 3.18, CMAKE_SYSTEM_PROCESSOR is not set properly for MSVC and\n    # cross-compilation (e.g. Host=x86_64, target=aarch64) requires using the\n    # undocumented, but working variable.\n    # See https://gitlab.kitware.com/cmake/cmake/-/issues/15170\n    set(CMAKE_SYSTEM_PROCESSOR ${MSVC_CXX_ARCHITECTURE_ID})\n    if(${CMAKE_SYSTEM_PROCESSOR} MATCHES \"ARM\")\n      set(CMAKE_CROSSCOMPILING TRUE)\n    endif()\nendif()\n\nset(ENABLE_ASSEMBLY_TESTS_DEFAULT OFF)\nfunction(should_enable_assembly_tests)\n  if(CMAKE_BUILD_TYPE)\n    string(TOLOWER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_LOWER)\n    if (${CMAKE_BUILD_TYPE_LOWER} MATCHES \"coverage\")\n      # FIXME: The --coverage flag needs to be removed when building assembly\n      # tests for this to work.\n      return()\n    endif()\n  endif()\n  if (MSVC OR CMAKE_CXX_SIMULATE_ID STREQUAL \"MSVC\")\n    return()\n  elseif(NOT CMAKE_SYSTEM_PROCESSOR MATCHES \"x86_64\")\n    return()\n  elseif(NOT CMAKE_SIZEOF_VOID_P EQUAL 8)\n    # FIXME: Make these work on 32 bit builds\n    return()\n  elseif(BENCHMARK_BUILD_32_BITS)\n     # FIXME: Make these work on 32 bit builds\n    return()\n  endif()\n  find_program(LLVM_FILECHECK_EXE FileCheck)\n  if (LLVM_FILECHECK_EXE)\n    set(LLVM_FILECHECK_EXE \"${LLVM_FILECHECK_EXE}\" CACHE PATH \"llvm filecheck\" FORCE)\n    message(STATUS \"LLVM FileCheck Found: ${LLVM_FILECHECK_EXE}\")\n  else()\n    message(STATUS \"Failed to find LLVM FileCheck\")\n    return()\n  endif()\n  set(ENABLE_ASSEMBLY_TESTS_DEFAULT ON PARENT_SCOPE)\nendfunction()\nshould_enable_assembly_tests()\n\n# This option disables the building and running of the assembly verification tests\noption(BENCHMARK_ENABLE_ASSEMBLY_TESTS \"Enable building and running the assembly tests\"\n    ${ENABLE_ASSEMBLY_TESTS_DEFAULT})\n\n# Make sure we can import out CMake functions\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules\")\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n\n\n# Read the git tags to determine the project version\ninclude(GetGitVersion)\nget_git_version(GIT_VERSION)\n\n# If no git version can be determined, use the version\n# from the project() command\nif (\"${GIT_VERSION}\" STREQUAL \"v0.0.0\")\n  set(VERSION \"v${benchmark_VERSION}\")\nelse()\n  set(VERSION \"${GIT_VERSION}\")\nendif()\n\n# Normalize version: drop \"v\" prefix, replace first \"-\" with \".\",\n# drop everything after second \"-\" (including said \"-\").\nstring(STRIP ${VERSION} VERSION)\nif(VERSION MATCHES v[^-]*-)\n   string(REGEX REPLACE \"v([^-]*)-([0-9]+)-.*\" \"\\\\1.\\\\2\"  NORMALIZED_VERSION ${VERSION})\nelse()\n   string(REGEX REPLACE \"v(.*)\" \"\\\\1\" NORMALIZED_VERSION ${VERSION})\nendif()\n\n# Tell the user what versions we are using\nmessage(STATUS \"Google Benchmark version: ${VERSION}, normalized to ${NORMALIZED_VERSION}\")\n\n# The version of the libraries\nset(GENERIC_LIB_VERSION ${NORMALIZED_VERSION})\nstring(SUBSTRING ${NORMALIZED_VERSION} 0 1 GENERIC_LIB_SOVERSION)\n\n# Import our CMake modules\ninclude(AddCXXCompilerFlag)\ninclude(CheckCXXCompilerFlag)\ninclude(CheckLibraryExists)\ninclude(CXXFeatureCheck)\n\ncheck_library_exists(rt shm_open \"\" HAVE_LIB_RT)\n\nif (BENCHMARK_BUILD_32_BITS)\n  add_required_cxx_compiler_flag(-m32)\nendif()\n\nset(BENCHMARK_CXX_STANDARD 17)\n\nset(CMAKE_CXX_STANDARD ${BENCHMARK_CXX_STANDARD})\nset(CMAKE_CXX_STANDARD_REQUIRED YES)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nif (MSVC)\n  # Turn compiler warnings up to 11\n  string(REGEX REPLACE \"[-/]W[1-4]\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /W4\")\n\n  # MP flag only applies to cl, not cl frontends to other compilers (e.g. clang-cl, icx-cl etc)\n  if(CMAKE_CXX_COMPILER_ID MATCHES MSVC)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /MP\")\n  endif()\n  add_definitions(-D_CRT_SECURE_NO_WARNINGS)\n\n  if(BENCHMARK_ENABLE_WERROR)\n      add_cxx_compiler_flag(-WX)\n  endif()\n\n  if (NOT BENCHMARK_ENABLE_EXCEPTIONS)\n    add_cxx_compiler_flag(-EHs-)\n    add_cxx_compiler_flag(-EHa-)\n    add_definitions(-D_HAS_EXCEPTIONS=0)\n  endif()\n  # Link time optimisation\n  if (BENCHMARK_ENABLE_LTO)\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /GL\")\n    set(CMAKE_STATIC_LINKER_FLAGS_RELEASE \"${CMAKE_STATIC_LINKER_FLAGS_RELEASE} /LTCG\")\n    set(CMAKE_SHARED_LINKER_FLAGS_RELEASE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /LTCG\")\n    set(CMAKE_EXE_LINKER_FLAGS_RELEASE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTCG\")\n\n    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /GL\")\n    string(REGEX REPLACE \"[-/]INCREMENTAL\" \"/INCREMENTAL:NO\" CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO \"${CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO}\")\n    set(CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO \"${CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO} /LTCG\")\n    string(REGEX REPLACE \"[-/]INCREMENTAL\" \"/INCREMENTAL:NO\" CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO \"${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO}\")\n    set(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO \"${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO} /LTCG\")\n    string(REGEX REPLACE \"[-/]INCREMENTAL\" \"/INCREMENTAL:NO\" CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO \"${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO}\")\n    set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO \"${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} /LTCG\")\n\n    set(CMAKE_CXX_FLAGS_MINSIZEREL \"${CMAKE_CXX_FLAGS_MINSIZEREL} /GL\")\n    set(CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL \"${CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL} /LTCG\")\n    set(CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL \"${CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL} /LTCG\")\n    set(CMAKE_EXE_LINKER_FLAGS_MINSIZEREL \"${CMAKE_EXE_LINKER_FLAGS_MINSIZEREL} /LTCG\")\n  endif()\nelse()\n  # Turn on Large-file Support\n  add_definitions(-D_FILE_OFFSET_BITS=64)\n  add_definitions(-D_LARGEFILE64_SOURCE)\n  add_definitions(-D_LARGEFILE_SOURCE)\n  # Turn compiler warnings up to 11\n  add_cxx_compiler_flag(-Wall)\n  add_cxx_compiler_flag(-Wextra)\n  add_cxx_compiler_flag(-Wshadow)\n  add_cxx_compiler_flag(-Wfloat-equal)\n  add_cxx_compiler_flag(-Wold-style-cast)\n  add_cxx_compiler_flag(-Wconversion)\n  if(BENCHMARK_ENABLE_WERROR)\n      add_cxx_compiler_flag(-Werror)\n  endif()\n  if (NOT BENCHMARK_ENABLE_TESTING)\n    # Disable warning when compiling tests as gtest does not use 'override'.\n    add_cxx_compiler_flag(-Wsuggest-override)\n  endif()\n  add_cxx_compiler_flag(-pedantic)\n  add_cxx_compiler_flag(-pedantic-errors)\n  add_cxx_compiler_flag(-Wshorten-64-to-32)\n  add_cxx_compiler_flag(-fstrict-aliasing)\n  # Disable warnings regarding deprecated parts of the library while building\n  # and testing those parts of the library.\n  add_cxx_compiler_flag(-Wno-deprecated-declarations)\n  if (CMAKE_CXX_COMPILER_ID STREQUAL \"Intel\" OR CMAKE_CXX_COMPILER_ID STREQUAL \"IntelLLVM\")\n    # Intel silently ignores '-Wno-deprecated-declarations',\n    # warning no. 1786 must be explicitly disabled.\n    # See #631 for rationale.\n    add_cxx_compiler_flag(-wd1786)\n    add_cxx_compiler_flag(-fno-finite-math-only)\n  endif()\n  # Disable deprecation warnings for release builds (when -Werror is enabled).\n  if(BENCHMARK_ENABLE_WERROR)\n      add_cxx_compiler_flag(-Wno-deprecated)\n  endif()\n  if (NOT BENCHMARK_ENABLE_EXCEPTIONS)\n    add_cxx_compiler_flag(-fno-exceptions)\n  endif()\n\n  if (HAVE_CXX_FLAG_FSTRICT_ALIASING)\n    if (NOT CMAKE_CXX_COMPILER_ID STREQUAL \"Intel\" AND NOT CMAKE_CXX_COMPILER_ID STREQUAL \"IntelLLVM\") #ICC17u2: Many false positives for Wstrict-aliasing\n      add_cxx_compiler_flag(-Wstrict-aliasing)\n    endif()\n  endif()\n  # ICC17u2: overloaded virtual function \"benchmark::Fixture::SetUp\" is only partially overridden\n  # (because of deprecated overload)\n  add_cxx_compiler_flag(-wd654)\n  add_cxx_compiler_flag(-Wthread-safety)\n  if (HAVE_CXX_FLAG_WTHREAD_SAFETY)\n    cxx_feature_check(THREAD_SAFETY_ATTRIBUTES \"-DINCLUDE_DIRECTORIES=${PROJECT_SOURCE_DIR}/include\")\n  endif()\n\n  # On most UNIX like platforms g++ and clang++ define _GNU_SOURCE as a\n  # predefined macro, which turns on all of the wonderful libc extensions.\n  # However g++ doesn't do this in Cygwin so we have to define it ourselves\n  # since we depend on GNU/POSIX/BSD extensions.\n  if (CYGWIN)\n    add_definitions(-D_GNU_SOURCE=1)\n  endif()\n\n  if (QNXNTO)\n    add_definitions(-D_QNX_SOURCE)\n  endif()\n\n  # Link time optimisation\n  if (BENCHMARK_ENABLE_LTO)\n    add_cxx_compiler_flag(-flto)\n    add_cxx_compiler_flag(-Wno-lto-type-mismatch)\n    if (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n      find_program(GCC_AR gcc-ar)\n      if (GCC_AR)\n        set(CMAKE_AR ${GCC_AR})\n      endif()\n      find_program(GCC_RANLIB gcc-ranlib)\n      if (GCC_RANLIB)\n        set(CMAKE_RANLIB ${GCC_RANLIB})\n      endif()\n    elseif(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n      include(llvm-toolchain)\n    endif()\n  endif()\n\n  # Coverage build type\n  set(BENCHMARK_CXX_FLAGS_COVERAGE \"${CMAKE_CXX_FLAGS_DEBUG}\"\n    CACHE STRING \"Flags used by the C++ compiler during coverage builds.\"\n    FORCE)\n  set(BENCHMARK_EXE_LINKER_FLAGS_COVERAGE \"${CMAKE_EXE_LINKER_FLAGS_DEBUG}\"\n    CACHE STRING \"Flags used for linking binaries during coverage builds.\"\n    FORCE)\n  set(BENCHMARK_SHARED_LINKER_FLAGS_COVERAGE \"${CMAKE_SHARED_LINKER_FLAGS_DEBUG}\"\n    CACHE STRING \"Flags used by the shared libraries linker during coverage builds.\"\n    FORCE)\n  mark_as_advanced(\n    BENCHMARK_CXX_FLAGS_COVERAGE\n    BENCHMARK_EXE_LINKER_FLAGS_COVERAGE\n    BENCHMARK_SHARED_LINKER_FLAGS_COVERAGE)\n  set(CMAKE_BUILD_TYPE \"${CMAKE_BUILD_TYPE}\" CACHE STRING\n    \"Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel Coverage.\")\n  add_cxx_compiler_flag(--coverage COVERAGE)\nendif()\n\nif (BENCHMARK_USE_LIBCXX)\n  if (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n    add_cxx_compiler_flag(-stdlib=libc++)\n  elseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\" OR\n          \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Intel\" OR\n          \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"IntelLLVM\")\n    add_cxx_compiler_flag(-nostdinc++)\n    message(WARNING \"libc++ header path must be manually specified using CMAKE_CXX_FLAGS\")\n    # Adding -nodefaultlibs directly to CMAKE_<TYPE>_LINKER_FLAGS will break\n    # configuration checks such as 'find_package(Threads)'\n    list(APPEND BENCHMARK_CXX_LINKER_FLAGS -nodefaultlibs)\n    # -lc++ cannot be added directly to CMAKE_<TYPE>_LINKER_FLAGS because\n    # linker flags appear before all linker inputs and -lc++ must appear after.\n    list(APPEND BENCHMARK_CXX_LIBRARIES c++)\n  else()\n    message(FATAL_ERROR \"-DBENCHMARK_USE_LIBCXX:BOOL=ON is not supported for compiler\")\n  endif()\nendif(BENCHMARK_USE_LIBCXX)\n\nset(EXTRA_CXX_FLAGS \"\")\nif (WIN32 AND \"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n  # Clang on Windows fails to compile the regex feature check under C++11\n  set(EXTRA_CXX_FLAGS \"-DCMAKE_CXX_STANDARD=14\")\nendif()\n\n# C++ feature checks\n# Determine the correct regular expression engine to use\ncxx_feature_check(STD_REGEX ${EXTRA_CXX_FLAGS})\ncxx_feature_check(GNU_POSIX_REGEX ${EXTRA_CXX_FLAGS})\ncxx_feature_check(POSIX_REGEX ${EXTRA_CXX_FLAGS})\nif(NOT HAVE_STD_REGEX AND NOT HAVE_GNU_POSIX_REGEX AND NOT HAVE_POSIX_REGEX)\n  message(FATAL_ERROR \"Failed to determine the source files for the regular expression backend\")\nendif()\nif (NOT BENCHMARK_ENABLE_EXCEPTIONS AND HAVE_STD_REGEX\n        AND NOT HAVE_GNU_POSIX_REGEX AND NOT HAVE_POSIX_REGEX)\n  message(WARNING \"Using std::regex with exceptions disabled is not fully supported\")\nendif()\n\ncxx_feature_check(STEADY_CLOCK)\n# Ensure we have pthreads\nset(THREADS_PREFER_PTHREAD_FLAG ON)\nfind_package(Threads REQUIRED)\ncxx_feature_check(PTHREAD_AFFINITY)\n\nif (BENCHMARK_ENABLE_LIBPFM)\n  find_package(PFM REQUIRED)\nendif()\n\n# Set up directories\ninclude_directories(${PROJECT_SOURCE_DIR}/include)\n\n# Build the targets\nadd_subdirectory(src)\n\nif (BENCHMARK_ENABLE_TESTING)\n  enable_testing()\n  if (BENCHMARK_ENABLE_GTEST_TESTS AND\n      NOT (TARGET gtest AND TARGET gtest_main AND\n           TARGET gmock AND TARGET gmock_main))\n    if (BENCHMARK_USE_BUNDLED_GTEST)\n      include(GoogleTest)\n    else()\n      find_package(GTest CONFIG REQUIRED)\n      add_library(gtest ALIAS GTest::gtest)\n      add_library(gtest_main ALIAS GTest::gtest_main)\n      add_library(gmock ALIAS GTest::gmock)\n      add_library(gmock_main ALIAS GTest::gmock_main)\n    endif()\n  endif()\n  add_subdirectory(test)\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.4267578125,
          "content": "# How to contribute #\n\nWe'd love to accept your patches and contributions to this project.  There are\na just a few small guidelines you need to follow.\n\n\n## Contributor License Agreement ##\n\nContributions to any Google project must be accompanied by a Contributor\nLicense Agreement.  This is not a copyright **assignment**, it simply gives\nGoogle permission to use and redistribute your contributions as part of the\nproject.\n\n  * If you are an individual writing original source code and you're sure you\n    own the intellectual property, then you'll need to sign an [individual\n    CLA][].\n\n  * If you work for a company that wants to allow you to contribute your work,\n    then you'll need to sign a [corporate CLA][].\n\nYou generally only need to submit a CLA once, so if you've already submitted\none (even if it was for a different project), you probably don't need to do it\nagain.\n\n[individual CLA]: https://developers.google.com/open-source/cla/individual\n[corporate CLA]: https://developers.google.com/open-source/cla/corporate\n\nOnce your CLA is submitted (or if you already submitted one for\nanother Google project), make a commit adding yourself to the\n[AUTHORS][] and [CONTRIBUTORS][] files. This commit can be part\nof your first [pull request][].\n\n[AUTHORS]: AUTHORS\n[CONTRIBUTORS]: CONTRIBUTORS\n\n\n## Submitting a patch ##\n\n  1. It's generally best to start by opening a new issue describing the bug or\n     feature you're intending to fix.  Even if you think it's relatively minor,\n     it's helpful to know what people are working on.  Mention in the initial\n     issue that you are planning to work on that bug or feature so that it can\n     be assigned to you.\n\n  1. Follow the normal process of [forking][] the project, and setup a new\n     branch to work in.  It's important that each group of changes be done in\n     separate branches in order to ensure that a pull request only includes the\n     commits related to that bug or feature.\n\n  1. Do your best to have [well-formed commit messages][] for each change.\n     This provides consistency throughout the project, and ensures that commit\n     messages are able to be formatted properly by various git tools.\n\n  1. Finally, push the commits to your fork and submit a [pull request][].\n\n[forking]: https://help.github.com/articles/fork-a-repo\n[well-formed commit messages]: http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\n[pull request]: https://help.github.com/articles/creating-a-pull-request\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 3.84765625,
          "content": "# People who have agreed to one of the CLAs and can contribute patches.\n# The AUTHORS file lists the copyright holders; this file\n# lists people.  For example, Google employees are listed here\n# but not in AUTHORS, because Google holds the copyright.\n#\n# Names should be added to this file only after verifying that\n# the individual or the individual's organization has agreed to\n# the appropriate Contributor License Agreement, found here:\n#\n# https://developers.google.com/open-source/cla/individual\n# https://developers.google.com/open-source/cla/corporate\n#\n# The agreement for individuals can be filled out on the web.\n#\n# When adding J Random Contributor's name to this file,\n# either J's name or J's organization's name should be\n# added to the AUTHORS file, depending on whether the\n# individual or corporate CLA was used.\n#\n# Names should be added to this file as:\n#     Name <email address>\n#\n# Please keep the list sorted.\n\nAbhina Sreeskantharajan <abhina.sreeskantharajan@ibm.com>\nAlbert Pretorius <pretoalb@gmail.com>\nAlex Steele <steelal123@gmail.com>\nAndriy Berestovskyy <berestovskyy@gmail.com>\nArne Beer <arne@twobeer.de>\nBátor Tallér <bator.taller@shapr3d.com>\nBilly Robert O'Neal III <billy.oneal@gmail.com> <bion@microsoft.com>\nCezary Skrzyński <czars1988@gmail.com>\nChris Kennelly <ckennelly@google.com> <ckennelly@ckennelly.com>\nChristian Wassermann <christian_wassermann@web.de>\nChristopher Seymour <chris.j.seymour@hotmail.com>\nColin Braley <braley.colin@gmail.com>\nCyrille Faucheux <cyrille.faucheux@gmail.com>\nDaniel Harvey <danielharvey458@gmail.com>\nDavid Coeurjolly <david.coeurjolly@liris.cnrs.fr>\nDeniz Evrenci <denizevrenci@gmail.com>\nDominic Hamon <dma@stripysock.com> <dominic@google.com>\nDominik Czarnota <dominik.b.czarnota@gmail.com>\nDominik Korman <kormandominik@gmail.com>\nDonald Aingworth <donalds_junk_mail@yahoo.com>\nDoug Evans <xdje42@gmail.com>\nEric Backus <eric_backus@alum.mit.edu>\nEric Fiselier <eric@efcs.ca>\nEugene Zhuk <eugene.zhuk@gmail.com>\nEvgeny Safronov <division494@gmail.com>\nFabien Pichot <pichot.fabien@gmail.com>\nFanbo Meng <fanbo.meng@ibm.com>\nFederico Ficarelli <federico.ficarelli@gmail.com>\nFelix Homann <linuxaudio@showlabor.de>\nGeoffrey Martin-Noble <gcmn@google.com> <gmngeoffrey@gmail.com>\nGergely Meszaros <maetveis@gmail.com>\nGergő Szitár <szitar.gergo@gmail.com>\nHannes Hauswedell <h2@fsfe.org>\nHenrique Bucher <hbucher@gmail.com>\nIsmael Jimenez Martinez <ismael.jimenez.martinez@gmail.com>\nIakov Sergeev <yahontu@gmail.com>\nJern-Kuan Leong <jernkuan@gmail.com>\nJianXiong Zhou <zhoujianxiong2@gmail.com>\nJoao Paulo Magalhaes <joaoppmagalhaes@gmail.com>\nJohn Millikin <jmillikin@stripe.com>\nJordan Williams <jwillikers@protonmail.com>\nJussi Knuuttila <jussi.knuuttila@gmail.com>\nKaito Udagawa <umireon@gmail.com>\nKai Wolf <kai.wolf@gmail.com>\nKishan Kumar <kumar.kishan@outlook.com>\nLei Xu <eddyxu@gmail.com>\nMarcel Jacobse <mjacobse@uni-bremen.de>\nMatt Clarkson <mattyclarkson@gmail.com>\nMaxim Vafin <maxvafin@gmail.com>\nMike Apodaca <gatorfax@gmail.com>\nMin-Yih Hsu <yihshyng223@gmail.com>\nNick Hutchinson <nshutchinson@gmail.com>\nNorman Heino <norman.heino@gmail.com>\nOleksandr Sochka <sasha.sochka@gmail.com>\nOri Livneh <ori.livneh@gmail.com>\nPascal Leroy <phl@google.com>\nPaul Redmond <paul.redmond@gmail.com>\nPierre Phaneuf <pphaneuf@google.com>\nRadoslav Yovchev <radoslav.tm@gmail.com>\nRaghu Raja <raghu@enfabrica.net>\nRainer Orth <ro@cebitec.uni-bielefeld.de>\nRaul Marin <rmrodriguez@cartodb.com>\nRay Glover <ray.glover@uk.ibm.com>\nRobert Guo <robert.guo@mongodb.com>\nRoman Lebedev <lebedev.ri@gmail.com>\nSayan Bhattacharjee <aero.sayan@gmail.com>\nShuo Chen <chenshuo@chenshuo.com>\nSteven Wan <wan.yu@ibm.com>\nTobias Schmidt <tobias.schmidt@in.tum.de>\nTobias Ulvgård <tobias.ulvgard@dirac.se>\nTom Madams <tom.ej.madams@gmail.com> <tmadams@google.com>\nYixuan Qiu <yixuanq@gmail.com>\nYusuke Suzuki <utatane.tea@gmail.com>\nZbigniew Skowron <zbychs@gmail.com>\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 1.470703125,
          "content": "module(\n    name = \"google_benchmark\",\n    version = \"1.9.1\",\n)\n\nbazel_dep(name = \"bazel_skylib\", version = \"1.7.1\")\nbazel_dep(name = \"platforms\", version = \"0.0.10\")\nbazel_dep(name = \"rules_foreign_cc\", version = \"0.10.1\")\nbazel_dep(name = \"rules_cc\", version = \"0.0.9\")\n\nbazel_dep(name = \"rules_python\", version = \"0.37.0\", dev_dependency = True)\nbazel_dep(name = \"googletest\", version = \"1.14.0\", dev_dependency = True, repo_name = \"com_google_googletest\")\n\nbazel_dep(name = \"libpfm\", version = \"4.11.0\")\n\n# Register a toolchain for Python 3.9 to be able to build numpy. Python\n# versions >=3.10 are problematic.\n# A second reason for this is to be able to build Python hermetically instead\n# of relying on the changing default version from rules_python.\n\npython = use_extension(\"@rules_python//python/extensions:python.bzl\", \"python\", dev_dependency = True)\npython.toolchain(python_version = \"3.8\")\npython.toolchain(python_version = \"3.9\")\npython.toolchain(python_version = \"3.10\")\npython.toolchain(python_version = \"3.11\")\npython.toolchain(\n    is_default = True,\n    python_version = \"3.12\",\n)\npython.toolchain(python_version = \"3.13\")\n\npip = use_extension(\"@rules_python//python/extensions:pip.bzl\", \"pip\", dev_dependency = True)\npip.parse(\n    hub_name = \"tools_pip_deps\",\n    python_version = \"3.9\",\n    requirements_lock = \"//tools:requirements.txt\",\n)\nuse_repo(pip, \"tools_pip_deps\")\n\n# -- bazel_dep definitions -- #\n\nbazel_dep(name = \"nanobind_bazel\", version = \"2.2.0\", dev_dependency = True)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.728515625,
          "content": "# Benchmark\n\n[![build-and-test](https://github.com/google/benchmark/workflows/build-and-test/badge.svg)](https://github.com/google/benchmark/actions?query=workflow%3Abuild-and-test)\n[![bazel](https://github.com/google/benchmark/actions/workflows/bazel.yml/badge.svg)](https://github.com/google/benchmark/actions/workflows/bazel.yml)\n[![pylint](https://github.com/google/benchmark/workflows/pylint/badge.svg)](https://github.com/google/benchmark/actions?query=workflow%3Apylint)\n[![test-bindings](https://github.com/google/benchmark/workflows/test-bindings/badge.svg)](https://github.com/google/benchmark/actions?query=workflow%3Atest-bindings)\n[![Coverage Status](https://coveralls.io/repos/google/benchmark/badge.svg)](https://coveralls.io/r/google/benchmark)\n\n[![Discord](https://discordapp.com/api/guilds/1125694995928719494/widget.png?style=shield)](https://discord.gg/cz7UX7wKC2)\n\nA library to benchmark code snippets, similar to unit tests. Example:\n\n```c++\n#include <benchmark/benchmark.h>\n\nstatic void BM_SomeFunction(benchmark::State& state) {\n  // Perform setup here\n  for (auto _ : state) {\n    // This code gets timed\n    SomeFunction();\n  }\n}\n// Register the function as a benchmark\nBENCHMARK(BM_SomeFunction);\n// Run the benchmark\nBENCHMARK_MAIN();\n```\n\n## Getting Started\n\nTo get started, see [Requirements](#requirements) and\n[Installation](#installation). See [Usage](#usage) for a full example and the\n[User Guide](docs/user_guide.md) for a more comprehensive feature overview.\n\nIt may also help to read the [Google Test documentation](https://github.com/google/googletest/blob/main/docs/primer.md)\nas some of the structural aspects of the APIs are similar.\n\n## Resources\n\n[Discussion group](https://groups.google.com/d/forum/benchmark-discuss)\n\nIRC channels:\n* [libera](https://libera.chat) #benchmark\n\n[Additional Tooling Documentation](docs/tools.md)\n\n[Assembly Testing Documentation](docs/AssemblyTests.md)\n\n[Building and installing Python bindings](docs/python_bindings.md)\n\n## Requirements\n\nThe library can be used with C++03. However, it requires C++14 to build,\nincluding compiler and standard library support.\n\n_See [dependencies.md](docs/dependencies.md) for more details regarding supported\ncompilers and standards._\n\nIf you have need for a particular compiler to be supported, patches are very welcome.\n\nSee [Platform-Specific Build Instructions](docs/platform_specific_build_instructions.md).\n\n## Installation\n\nThis describes the installation process using cmake. As pre-requisites, you'll\nneed git and cmake installed.\n\n_See [dependencies.md](docs/dependencies.md) for more details regarding supported\nversions of build tools._\n\n```bash\n# Check out the library.\n$ git clone https://github.com/google/benchmark.git\n# Go to the library root directory\n$ cd benchmark\n# Make a build directory to place the build output.\n$ cmake -E make_directory \"build\"\n# Generate build system files with cmake, and download any dependencies.\n$ cmake -E chdir \"build\" cmake -DBENCHMARK_DOWNLOAD_DEPENDENCIES=on -DCMAKE_BUILD_TYPE=Release ../\n# or, starting with CMake 3.13, use a simpler form:\n# cmake -DBENCHMARK_DOWNLOAD_DEPENDENCIES=on -DCMAKE_BUILD_TYPE=Release -S . -B \"build\"\n# Build the library.\n$ cmake --build \"build\" --config Release\n```\nThis builds the `benchmark` and `benchmark_main` libraries and tests.\nOn a unix system, the build directory should now look something like this:\n\n```\n/benchmark\n  /build\n    /src\n      /libbenchmark.a\n      /libbenchmark_main.a\n    /test\n      ...\n```\n\nNext, you can run the tests to check the build.\n\n```bash\n$ cmake -E chdir \"build\" ctest --build-config Release\n```\n\nIf you want to install the library globally, also run:\n\n```\nsudo cmake --build \"build\" --config Release --target install\n```\n\nNote that Google Benchmark requires Google Test to build and run the tests. This\ndependency can be provided two ways:\n\n* Checkout the Google Test sources into `benchmark/googletest`.\n* Otherwise, if `-DBENCHMARK_DOWNLOAD_DEPENDENCIES=ON` is specified during\n  configuration as above, the library will automatically download and build\n  any required dependencies.\n\nIf you do not wish to build and run the tests, add `-DBENCHMARK_ENABLE_GTEST_TESTS=OFF`\nto `CMAKE_ARGS`.\n\n### Debug vs Release\n\nBy default, benchmark builds as a debug library. You will see a warning in the\noutput when this is the case. To build it as a release library instead, add\n`-DCMAKE_BUILD_TYPE=Release` when generating the build system files, as shown\nabove. The use of `--config Release` in build commands is needed to properly\nsupport multi-configuration tools (like Visual Studio for example) and can be\nskipped for other build systems (like Makefile).\n\nTo enable link-time optimisation, also add `-DBENCHMARK_ENABLE_LTO=true` when\ngenerating the build system files.\n\nIf you are using gcc, you might need to set `GCC_AR` and `GCC_RANLIB` cmake\ncache variables, if autodetection fails.\n\nIf you are using clang, you may need to set `LLVMAR_EXECUTABLE`,\n`LLVMNM_EXECUTABLE` and `LLVMRANLIB_EXECUTABLE` cmake cache variables.\n\nTo enable sanitizer checks (eg., `asan` and `tsan`), add:\n```\n -DCMAKE_C_FLAGS=\"-g -O2 -fno-omit-frame-pointer -fsanitize=address -fsanitize=thread -fno-sanitize-recover=all\"\n -DCMAKE_CXX_FLAGS=\"-g -O2 -fno-omit-frame-pointer -fsanitize=address -fsanitize=thread -fno-sanitize-recover=all \"  \n```\n\n### Stable and Experimental Library Versions\n\nThe main branch contains the latest stable version of the benchmarking library;\nthe API of which can be considered largely stable, with source breaking changes\nbeing made only upon the release of a new major version.\n\nNewer, experimental, features are implemented and tested on the\n[`v2` branch](https://github.com/google/benchmark/tree/v2). Users who wish\nto use, test, and provide feedback on the new features are encouraged to try\nthis branch. However, this branch provides no stability guarantees and reserves\nthe right to change and break the API at any time.\n\n## Usage\n\n### Basic usage\n\nDefine a function that executes the code to measure, register it as a benchmark\nfunction using the `BENCHMARK` macro, and ensure an appropriate `main` function\nis available:\n\n```c++\n#include <benchmark/benchmark.h>\n\nstatic void BM_StringCreation(benchmark::State& state) {\n  for (auto _ : state)\n    std::string empty_string;\n}\n// Register the function as a benchmark\nBENCHMARK(BM_StringCreation);\n\n// Define another benchmark\nstatic void BM_StringCopy(benchmark::State& state) {\n  std::string x = \"hello\";\n  for (auto _ : state)\n    std::string copy(x);\n}\nBENCHMARK(BM_StringCopy);\n\nBENCHMARK_MAIN();\n```\n\nTo run the benchmark, compile and link against the `benchmark` library\n(libbenchmark.a/.so). If you followed the build steps above, this library will \nbe under the build directory you created.\n\n```bash\n# Example on linux after running the build steps above. Assumes the\n# `benchmark` and `build` directories are under the current directory.\n$ g++ mybenchmark.cc -std=c++11 -isystem benchmark/include \\\n  -Lbenchmark/build/src -lbenchmark -lpthread -o mybenchmark\n```\n\nAlternatively, link against the `benchmark_main` library and remove\n`BENCHMARK_MAIN();` above to get the same behavior.\n\nThe compiled executable will run all benchmarks by default. Pass the `--help`\nflag for option information or see the [User Guide](docs/user_guide.md).\n\n### Usage with CMake\n\nIf using CMake, it is recommended to link against the project-provided\n`benchmark::benchmark` and `benchmark::benchmark_main` targets using\n`target_link_libraries`.\nIt is possible to use ```find_package``` to import an installed version of the\nlibrary.\n```cmake\nfind_package(benchmark REQUIRED)\n```\nAlternatively, ```add_subdirectory``` will incorporate the library directly in\nto one's CMake project.\n```cmake\nadd_subdirectory(benchmark)\n```\nEither way, link to the library as follows.\n```cmake\ntarget_link_libraries(MyTarget benchmark::benchmark)\n```\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 0.5390625,
          "content": "workspace(name = \"com_github_google_benchmark\")\n\nload(\"//:bazel/benchmark_deps.bzl\", \"benchmark_deps\")\n\nbenchmark_deps()\n\nload(\"@rules_foreign_cc//foreign_cc:repositories.bzl\", \"rules_foreign_cc_dependencies\")\n\nrules_foreign_cc_dependencies()\n\nload(\"@rules_python//python:repositories.bzl\", \"py_repositories\")\n\npy_repositories()\n\nload(\"@rules_python//python:pip.bzl\", \"pip_parse\")\n\npip_parse(\n    name = \"tools_pip_deps\",\n    requirements_lock = \"//tools:requirements.txt\",\n)\n\nload(\"@tools_pip_deps//:requirements.bzl\", \"install_deps\")\n\ninstall_deps()\n"
        },
        {
          "name": "WORKSPACE.bzlmod",
          "type": "blob",
          "size": 0.095703125,
          "content": "# This file marks the root of the Bazel workspace.\n# See MODULE.bazel for dependencies and setup.\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.0419921875,
          "content": "theme: jekyll-theme-midnight\nmarkdown: GFM\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.236328125,
          "content": "version: '{build}'\n\nimage: Visual Studio 2017\n\nconfiguration:\n  - Debug\n  - Release\n\nenvironment:\n  matrix:\n    - compiler: msvc-15-seh\n      generator: \"Visual Studio 15 2017\"\n\n    - compiler: msvc-15-seh\n      generator: \"Visual Studio 15 2017 Win64\"\n\n    - compiler: msvc-14-seh\n      generator: \"Visual Studio 14 2015\"\n\n    - compiler: msvc-14-seh\n      generator: \"Visual Studio 14 2015 Win64\"\n\n    - compiler: gcc-5.3.0-posix\n      generator: \"MinGW Makefiles\"\n      cxx_path: 'C:\\mingw-w64\\i686-5.3.0-posix-dwarf-rt_v4-rev0\\mingw32\\bin'\n      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015\n\nmatrix:\n  fast_finish: true\n\ninstall:\n  # git bash conflicts with MinGW makefiles\n  - if \"%generator%\"==\"MinGW Makefiles\" (set \"PATH=%PATH:C:\\Program Files\\Git\\usr\\bin;=%\")\n  - if not \"%cxx_path%\"==\"\" (set \"PATH=%PATH%;%cxx_path%\")\n\nbuild_script:\n  - md _build -Force\n  - cd _build\n  - echo %configuration%\n  - cmake -G \"%generator%\" \"-DCMAKE_BUILD_TYPE=%configuration%\" -DBENCHMARK_DOWNLOAD_DEPENDENCIES=ON ..\n  - cmake --build . --config %configuration%\n\ntest_script:\n  - ctest --build-config %configuration% --timeout 300 --output-on-failure\n\nartifacts:\n  - path: '_build/CMakeFiles/*.log'\n    name: logs\n  - path: '_build/Testing/**/*.xml'\n    name: test_results\n"
        },
        {
          "name": "bazel",
          "type": "tree",
          "content": null
        },
        {
          "name": "bindings",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.9697265625,
          "content": "[build-system]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"google_benchmark\"\ndescription = \"A library to benchmark code snippets.\"\nrequires-python = \">=3.10\"\nlicense = { file = \"LICENSE\" }\nkeywords = [\"benchmark\"]\n\nauthors = [{ name = \"Google\", email = \"benchmark-discuss@googlegroups.com\" }]\n\nclassifiers = [\n    \"Development Status :: 4 - Beta\",\n    \"Intended Audience :: Developers\",\n    \"Intended Audience :: Science/Research\",\n    \"License :: OSI Approved :: Apache Software License\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Topic :: Software Development :: Testing\",\n    \"Topic :: System :: Benchmark\",\n]\n\ndynamic = [\"readme\", \"version\"]\n\ndependencies = [\"absl-py>=0.7.1\"]\n\n[project.optional-dependencies]\ndev = [\"pre-commit>=3.3.3\"]\n\n[project.urls]\nHomepage = \"https://github.com/google/benchmark\"\nDocumentation = \"https://github.com/google/benchmark/tree/main/docs\"\nRepository = \"https://github.com/google/benchmark.git\"\nDiscord = \"https://discord.gg/cz7UX7wKC2\"\n\n[tool.setuptools]\npackage-dir = { \"\" = \"bindings/python\" }\nzip-safe = false\n\n[tool.setuptools.packages.find]\nwhere = [\"bindings/python\"]\n\n[tool.setuptools.dynamic]\nreadme = { file = \"README.md\", content-type = \"text/markdown\" }\nversion = { attr = \"google_benchmark.__version__\" }\n\n[tool.mypy]\ncheck_untyped_defs = true\ndisallow_incomplete_defs = true\npretty = true\npython_version = \"3.11\"\nstrict_optional = false\nwarn_unreachable = true\n\n[[tool.mypy.overrides]]\nmodule = [\"yaml\"]\nignore_missing_imports = true\n\n[tool.ruff]\n# explicitly tell ruff the source directory to correctly identify first-party package.\nsrc = [\"bindings/python\"]\n\nline-length = 80\ntarget-version = \"py311\"\n\n[tool.ruff.lint]\n# Enable pycodestyle (`E`, `W`), Pyflakes (`F`), and isort (`I`) codes by default.\nselect = [\"E\", \"F\", \"I\", \"W\"]\nignore = [\n    \"E501\", # line too long\n]\n\n[tool.ruff.lint.isort]\ncombine-as-imports = true\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 5.6484375,
          "content": "import contextlib\nimport os\nimport platform\nimport re\nimport shutil\nimport sys\nfrom pathlib import Path\nfrom typing import Any, Generator\n\nimport setuptools\nfrom setuptools.command import build_ext\n\nIS_WINDOWS = platform.system() == \"Windows\"\nIS_MAC = platform.system() == \"Darwin\"\nIS_LINUX = platform.system() == \"Linux\"\n\n# hardcoded SABI-related options. Requires that each Python interpreter\n# (hermetic or not) participating is of the same major-minor version.\npy_limited_api = sys.version_info >= (3, 12)\noptions = {\"bdist_wheel\": {\"py_limited_api\": \"cp312\"}} if py_limited_api else {}\n\n\ndef is_cibuildwheel() -> bool:\n    return os.getenv(\"CIBUILDWHEEL\") is not None\n\n\n@contextlib.contextmanager\ndef _maybe_patch_toolchains() -> Generator[None, None, None]:\n    \"\"\"\n    Patch rules_python toolchains to ignore root user error\n    when run in a Docker container on Linux in cibuildwheel.\n    \"\"\"\n\n    def fmt_toolchain_args(matchobj):\n        suffix = \"ignore_root_user_error = True\"\n        callargs = matchobj.group(1)\n        # toolchain def is broken over multiple lines\n        if callargs.endswith(\"\\n\"):\n            callargs = callargs + \"    \" + suffix + \",\\n\"\n        # toolchain def is on one line.\n        else:\n            callargs = callargs + \", \" + suffix\n        return \"python.toolchain(\" + callargs + \")\"\n\n    CIBW_LINUX = is_cibuildwheel() and IS_LINUX\n    module_bazel = Path(\"MODULE.bazel\")\n    content: str = module_bazel.read_text()\n    try:\n        if CIBW_LINUX:\n            module_bazel.write_text(\n                re.sub(\n                    r\"python.toolchain\\(([\\w\\\"\\s,.=]*)\\)\",\n                    fmt_toolchain_args,\n                    content,\n                )\n            )\n        yield\n    finally:\n        if CIBW_LINUX:\n            module_bazel.write_text(content)\n\n\nclass BazelExtension(setuptools.Extension):\n    \"\"\"A C/C++ extension that is defined as a Bazel BUILD target.\"\"\"\n\n    def __init__(self, name: str, bazel_target: str, **kwargs: Any):\n        super().__init__(name=name, sources=[], **kwargs)\n\n        self.bazel_target = bazel_target\n        stripped_target = bazel_target.split(\"//\")[-1]\n        self.relpath, self.target_name = stripped_target.split(\":\")\n\n\nclass BuildBazelExtension(build_ext.build_ext):\n    \"\"\"A command that runs Bazel to build a C/C++ extension.\"\"\"\n\n    def run(self):\n        for ext in self.extensions:\n            self.bazel_build(ext)\n        # explicitly call `bazel shutdown` for graceful exit\n        self.spawn([\"bazel\", \"shutdown\"])\n\n    def copy_extensions_to_source(self):\n        \"\"\"\n        Copy generated extensions into the source tree.\n        This is done in the ``bazel_build`` method, so it's not necessary to\n        do again in the `build_ext` base class.\n        \"\"\"\n        pass\n\n    def bazel_build(self, ext: BazelExtension) -> None:\n        \"\"\"Runs the bazel build to create the package.\"\"\"\n        temp_path = Path(self.build_temp)\n\n        # We round to the minor version, which makes rules_python\n        # look up the latest available patch version internally.\n        python_version = \"{0}.{1}\".format(*sys.version_info[:2])\n\n        bazel_argv = [\n            \"bazel\",\n            \"run\",\n            ext.bazel_target,\n            f\"--symlink_prefix={temp_path / 'bazel-'}\",\n            f\"--compilation_mode={'dbg' if self.debug else 'opt'}\",\n            # C++17 is required by nanobind\n            f\"--cxxopt={'/std:c++17' if IS_WINDOWS else '-std=c++17'}\",\n            f\"--@rules_python//python/config_settings:python_version={python_version}\",\n        ]\n\n        if ext.py_limited_api:\n            bazel_argv += [\"--@nanobind_bazel//:py-limited-api=cp312\"]\n\n        if IS_WINDOWS:\n            # Link with python*.lib.\n            for library_dir in self.library_dirs:\n                bazel_argv.append(\"--linkopt=/LIBPATH:\" + library_dir)\n        elif IS_MAC:\n            # C++17 needs macOS 10.14 at minimum\n            bazel_argv.append(\"--macos_minimum_os=10.14\")\n\n        with _maybe_patch_toolchains():\n            self.spawn(bazel_argv)\n\n        if IS_WINDOWS:\n            suffix = \".pyd\"\n        else:\n            suffix = \".abi3.so\" if ext.py_limited_api else \".so\"\n\n        # copy the Bazel build artifacts into setuptools' libdir,\n        # from where the wheel is built.\n        pkgname = \"google_benchmark\"\n        pythonroot = Path(\"bindings\") / \"python\" / \"google_benchmark\"\n        srcdir = temp_path / \"bazel-bin\" / pythonroot\n        libdir = Path(self.build_lib) / pkgname\n        for root, dirs, files in os.walk(srcdir, topdown=True):\n            # exclude runfiles directories and children.\n            dirs[:] = [d for d in dirs if \"runfiles\" not in d]\n\n            for f in files:\n                fp = Path(f)\n                should_copy = False\n                # we do not want the bare .so file included\n                # when building for ABI3, so we require a\n                # full and exact match on the file extension.\n                if \"\".join(fp.suffixes) == suffix:\n                    should_copy = True\n                elif fp.suffix == \".pyi\":\n                    should_copy = True\n                elif Path(root) == srcdir and f == \"py.typed\":\n                    # copy py.typed, but only at the package root.\n                    should_copy = True\n\n                if should_copy:\n                    shutil.copyfile(root / fp, libdir / fp)\n\n\nsetuptools.setup(\n    cmdclass=dict(build_ext=BuildBazelExtension),\n    package_data={\"google_benchmark\": [\"py.typed\", \"*.pyi\"]},\n    ext_modules=[\n        BazelExtension(\n            name=\"google_benchmark._benchmark\",\n            bazel_target=\"//bindings/python/google_benchmark:benchmark_stubgen\",\n            py_limited_api=py_limited_api,\n        )\n    ],\n    options=options,\n)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}