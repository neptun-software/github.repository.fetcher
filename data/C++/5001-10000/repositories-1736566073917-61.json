{
  "metadata": {
    "timestamp": 1736566073917,
    "page": 61,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "diasurgical/devilutionX",
      "stars": 8232,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 1.228515625,
          "content": "root = true\r\n\r\n[*]\r\nindent_style = tab\r\nend_of_line = crlf\r\ncharset = utf-8\r\ntrim_trailing_whitespace = true\r\ninsert_final_newline = true\r\n\r\n[*.{c++,cc,cpp,cppm,cxx,h,h++,hh,hpp,hxx,inl,ipp,ixx,tlh,tli}]\r\n# Visual C++ Code Style settings\r\ncpp_generate_documentation_comments = doxygen_slash_star\r\n\r\n[*.java]\r\nend_of_line = lf\r\n\r\n[*.pot]\r\nend_of_line = lf\r\n\r\n[*.po]\r\nend_of_line = lf\r\n\r\n[*.lua]\r\nindent_style = space\r\nindent_size = 2\r\nend_of_line = lf\r\n\r\n[*.py]\r\nindent_style = space\r\nindent_size = 4\r\nend_of_line = lf\r\n\r\n[*.rb]\r\nend_of_line = lf\r\n\r\n[*.yml]\r\nindent_style = space\r\nend_of_line = lf\r\n\r\n[*.sh]\r\nend_of_line = lf\r\n\r\n[*.xml]\r\nend_of_line = lf\r\n\r\n[.clang-format]\r\nend_of_line = lf\r\n\r\n[.gitignore]\r\nend_of_line = lf\r\n\r\n[*.cmake]\r\nindent_style = space\r\nindent_size = 2\r\n\r\n[*.desktop]\r\nend_of_line = lf\r\n\r\n[*.md]\r\nindent_style = space\r\nindent_size = 2\r\nend_of_line = lf\r\n\r\n[*.txt]\r\nend_of_line = crlf\r\n\r\n[*.tsv]\r\ntrim_trailing_whitespace = false\r\n\r\n[*.plist]\r\nend_of_line = lf\r\n\r\n[AppRun]\r\nend_of_line = lf\r\n\r\n[{CMakeLists.txt,CMakeSettings.json}]\r\nindent_style = space\r\nindent_size = 2\r\nend_of_line = crlf\r\n\r\n[control]\r\nend_of_line = lf\r\n\r\n[devilutionx.spec]\r\nend_of_line = lf\r\n\r\n[Dockerfile]\r\nend_of_line = lf\r\n\r\n[ASSETS_VERSION]\r\nend_of_line = lf\r\n"
        },
        {
          "name": ".gdbinit",
          "type": "blob",
          "size": 0.0439453125,
          "content": "source tools/gdb/devilution_gdb/__init__.py\r\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.046875,
          "content": "# Do not let git change line endings.\r\n* -text\r\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 7.67578125,
          "content": "# Generated by VC++ 6 builds\n/vc60.idb\n*.asm\n*.idb\n\n# macOS\n.DS_Store\n\n# CodeLite\n.CodeLite\n*.project\n*.workspace\n\n# Devilution Comparer\ndevilution-comparer\ncomparer-config.toml\n\n#ignore cmake cache\n/build-*/\n.vscode/tasks.json\n\n# Extra files in the source distribution (see make_src_dist.py)\n/dist/\n\n*.appimage\n*.AppImage\n\n# ELF object file, shared library and object archive.\n*.o\n*.so\n*.a\n\n# PE shared library and associated files.\n*.lib\n*.exp\n*.dll\n\n# PE executable.\n*.exe\n\n# GCC dependency file.\n*.d\n\n# Resource file.\n*.res\n\n# Created by https://www.gitignore.io/api/visualstudio\n\n### VisualStudio ###\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\nWinDebug/\nWinRel/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Vim swap files\n*.swp\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n# except for a top-level .cache directory (clangd uses /.cache/clangd for temporary files)\n/.cache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# macOS\n.DS_Store\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output\nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n### VisualStudio Patch ###\n# By default, sensitive information, such as encrypted password\n# should be stored in the .pubxml.user file.\n*.pubxml.user\n\n# End of https://www.gitignore.io/api/visualstudio\n\n# Created by https://www.gitignore.io/api/xcode\n# Edit at https://www.gitignore.io/?templates=xcode\n\n### Visual Code\n/.vscode\n\n### Xcode ###\n# Xcode\n#\n# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore\n\n## User settings\nxcuserdata/\n\n## compatibility with Xcode 8 and earlier (ignoring not required starting Xcode 9)\n*.xcscmblueprint\n*.xccheckout\n\n## compatibility with Xcode 3 and earlier (ignoring not required starting Xcode 4)\nbuild/\nDerivedData/\n*.moved-aside\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\n\n### Xcode Patch ###\n*.xcodeproj/*\n!*.xcodeproj/project.pbxproj\n!*.xcodeproj/xcshareddata/\n!*.xcworkspace/contents.xcworkspacedata\n/*.gcno\n**/xcshareddata/WorkspaceSettings.xcsettings\n\n/libs\n\n# End of https://www.gitignore.io/api/xcode\n\n# Don't accidently commit the diabdat.mpq or any other MPQ files\n*.mpq\n\n### Nintendo Switch ###\nexefs/main\n/out/isenseconfig/CPI-Debug\n\n/docs/html/\n\n# ddraw wrapper configuration file\nddraw_settings.ini\nBrewfile.lock.json\n.vscode/settings.json\n\n# GPerf heap profile dumps\n*.heap\n*.mo\n\n# UWP copied assets\nuwp-project/Assets/data\nuwp-project/Assets/fonts\nuwp-project/Assets/gendata\nuwp-project/Assets/ui_art\n!uwp-project/devilutionX_TemporaryKey.pfx\n/.s390x-ccache/\n"
        },
        {
          "name": ".lldbinit",
          "type": "blob",
          "size": 0.1943359375,
          "content": "script topsrcdir = topsrcdir if \"topsrcdir\" in locals() else os.getcwd()\r\nscript sys.path.append(os.path.join(topsrcdir, \"tools/lldb\"))\r\nscript import devilution_lldb\r\nscript devilution_lldb.init()\r\n"
        },
        {
          "name": "3rdParty",
          "type": "tree",
          "content": null
        },
        {
          "name": "Brewfile",
          "type": "blob",
          "size": 0.1171875,
          "content": "brew \"cmake\"\r\nbrew \"fmt\"\r\nbrew \"sdl2\"\r\nbrew \"libsodium\"\r\nbrew \"pkg-config\"\r\nbrew \"googletest\"\r\nbrew \"google-benchmark\"\r\n"
        },
        {
          "name": "CMake",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 25.2587890625,
          "content": "cmake_minimum_required(VERSION 3.15)\r\n\r\nforeach(_policy CMP0111 CMP0126 CMP0135)\r\n  if(POLICY ${_policy})\r\n    cmake_policy(SET ${_policy} NEW)\r\n    set(CMAKE_POLICY_DEFAULT_${_policy} NEW)\r\n  endif()\r\nendforeach()\r\n\r\n# Projects added via `add_subdirectory` or `FetchContent` may have a lower\r\n# `cmake_minimum_required` than we set here. Set policies that we require\r\n# to their new value so that they still apply.\r\nset(CMAKE_POLICY_DEFAULT_CMP0069 NEW)\r\nset(CMAKE_POLICY_DEFAULT_CMP0077 NEW)\r\n\r\nif(IS_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/dist\")\r\n  message(\"-- Detected a source distribution with the required FetchContent dependencies and devilutionx.mpq included\")\r\n  set(SRC_DIST ON)\r\n  add_subdirectory(dist)\r\nendif()\r\n\r\nif(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})\r\n  message(WARNING [[In-source build detected, please eg. create a new directory and use `cmake ..`]])\r\nendif()\r\n\r\ninclude(CMakeDependentOption)\r\n\r\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/CMake\")\r\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/CMake/finders\")\r\ninclude(functions/genex)\r\n\r\n# Options required by `VcPkgManifestFeatures`, which must be included before the `project` call.\r\noption(USE_SDL1 \"Use SDL1.2 instead of SDL2\" OFF)\r\noption(NONET \"Disable network support\" OFF)\r\ncmake_dependent_option(PACKET_ENCRYPTION \"Encrypt network packets\" ON \"NOT NONET\" OFF)\r\n# The gettext[tools] package takes a very long time to install\r\nif(CMAKE_TOOLCHAIN_FILE MATCHES \"vcpkg.cmake$\")\r\n  option(USE_GETTEXT_FROM_VCPKG \"Add vcpkg dependency for gettext[tools] for compiling translations\" OFF)\r\nendif()\r\noption(BUILD_TESTING \"Build tests.\" ON)\r\n\r\n# These must be included after the options above but before the `project` call.\r\ninclude(VcPkgManifestFeatures)\r\n\r\n# Set up the `project` before the rest of the options so that:\r\n#\r\n# 1. Properties such as `TARGET_SUPPORTS_SHARED_LIBS` are defined.\r\n# 2. Toolchain file is evaluated, required for `Platforms.cmake`,\r\n#    which can override the options.\r\nfile(STRINGS \"VERSION\" VERSION_STR)\r\nif(NOT \"${VERSION_STR}\" STREQUAL \"\")\r\n  string(REGEX MATCH \"([0-9]+\\\\.[0-9]+\\\\.[0-9]+).*\" VERSION_PREFIX ${VERSION_STR})\r\n  set(VERSION_NUM ${CMAKE_MATCH_1})\r\nendif()\r\n\r\nif(NOT VERSION_SUFFIX)\r\n  # For versions with a suffix, e.g. \"1.5.0-dev\", include\r\n  # the build type and the git hash.\r\n  set(VERSION_SUFFIX \"-$<CONFIG>\")\r\n  if(VERSION_PREFIX MATCHES \"-\")\r\n    if(NOT GIT_COMMIT_HASH)\r\n      include(functions/git)\r\n      get_git_commit_hash(GIT_COMMIT_HASH)\r\n    endif()\r\n    if(GIT_COMMIT_HASH)\r\n      set(VERSION_SUFFIX \"${VERSION_SUFFIX}-${GIT_COMMIT_HASH}\")\r\n    endif()\r\n  else()\r\n    # For versions without a suffix, e.g. \"1.5.0\" rather than \"1.5.0-dev\",\r\n    # only include the build type if it is a debug build.\r\n    set(VERSION_SUFFIX \"$<$<CONFIG:Debug>:$<CONFIG>>\")\r\n  endif()\r\nendif()\r\n\r\nproject(DevilutionX\r\n  VERSION ${VERSION_NUM}\r\n  LANGUAGES C CXX)\r\nset(PROJECT_VERSION_WITH_SUFFIX \"${VERSION_PREFIX}${VERSION_SUFFIX}\")\r\n\r\n# Platform definitions can override options and we want `cmake_dependent_option` to see the effects.\r\n# Note that a few options are still defined before this because they're needed by `VcPkgManifestFeatures.cmake`.\r\ninclude(Platforms)\r\n\r\n# This built-in CMake module adds a BUILD_TESTING option (ON by default).\r\n# Must be included in the top-level `CMakeLists.txt` after calling `project`.\r\n# Because we must include `VcPkgManifestFeatures` before the `project` call,\r\n# we add a BUILD_TESTING option ourselves above as well.\r\ninclude(CTest)\r\n\r\n# Debugging / profiling options\r\nDEBUG_OPTION(ASAN \"Enable address sanitizer\")\r\nDEBUG_OPTION(UBSAN \"Enable undefined behaviour sanitizer\")\r\noption(TSAN \"Enable thread sanitizer (not compatible with ASAN=ON)\" OFF)\r\nDEBUG_OPTION(DEBUG \"Enable debug mode in engine\")\r\noption(GPERF \"Build with GPerfTools profiler\" OFF)\r\ncmake_dependent_option(GPERF_HEAP_FIRST_GAME_ITERATION \"Save heap profile of the first game iteration\" OFF \"GPERF\" OFF)\r\noption(ENABLE_CODECOVERAGE \"Instrument code for code coverage (only enabled with BUILD_TESTING)\" OFF)\r\n\r\n# Packaging options\r\nRELEASE_OPTION(CPACK \"Configure CPack\")\r\noption(MACOSX_STANDALONE_APP_BUNDLE \"Generate a portable app bundle to use on other devices (requires sudo)\" OFF)\r\noption(WIN_NSIS \"Generate an NSIS installer\" OFF)\r\n\r\n# Network options\r\ncmake_dependent_option(DISABLE_TCP \"Disable TCP multiplayer option\" OFF \"NOT NONET\" ON)\r\ncmake_dependent_option(DISABLE_ZERO_TIER \"Disable ZeroTier multiplayer option\" OFF \"NOT NONET\" ON)\r\n\r\n# Graphics options\r\nif(NOT USE_SDL1)\r\n  set(DEVILUTIONX_DISPLAY_TEXTURE_FORMAT \"SDL_PIXELFORMAT_RGB888\" CACHE STRING \"Texture format for DevilutionX textures when using the GPU renderer\")\r\n  mark_as_advanced(DEVILUTIONX_DISPLAY_TEXTURE_FORMAT)\r\nendif()\r\n\r\nif(USE_SDL1)\r\n  # SDL_image in SDL1 does not support PNG, making PCX the only option.\r\n  set(DEVILUTIONX_SCREENSHOT_FORMAT \"DEVILUTIONX_SCREENSHOT_FORMAT_PCX\")\r\nelse()\r\n  set(DEVILUTIONX_SCREENSHOT_FORMAT \"DEVILUTIONX_SCREENSHOT_FORMAT_PNG\" CACHE STRING \"Screenshot format\")\r\n  set_property(CACHE DEVILUTIONX_SCREENSHOT_FORMAT PROPERTY STRINGS \"DEVILUTIONX_SCREENSHOT_FORMAT_PNG;DEVILUTIONX_SCREENSHOT_FORMAT_PCX\")\r\n  mark_as_advanced(DEVILUTIONX_SCREENSHOT_FORMAT)\r\nendif()\r\n\r\n# Sound options\r\noption(NOSOUND \"Disable sound support\" OFF)\r\noption(DEVILUTIONX_RESAMPLER_SPEEX \"Build with Speex resampler\" ON)\r\ncmake_dependent_option(DEVILUTIONX_RESAMPLER_SDL \"Build with SDL resampler\" ON \"NOT USE_SDL1\" OFF)\r\nif(DEVILUTIONX_RESAMPLER_SPEEX)\r\n  list(APPEND _resamplers Speex)\r\nendif()\r\nif(DEVILUTIONX_RESAMPLER_SDL)\r\n  list(APPEND _resamplers SDL)\r\nendif()\r\nlist(GET _resamplers 0 _default_resampler)\r\nset(DEVILUTIONX_DEFAULT_RESAMPLER ${_default_resampler} CACHE STRING \"Default resampler\")\r\nset_property(CACHE DEVILUTIONX_DEFAULT_RESAMPLER PROPERTY STRINGS ${_resamplers})\r\n\r\n# Optimization / link options\r\noption(DISABLE_LTO \"Disable link-time optimization (by default enabled in release mode)\" OFF)\r\noption(PIE \"Generate position-independent code\" OFF)\r\ncmake_dependent_option(DEVILUTIONX_DISABLE_RTTI \"Disable RTTI\" ON \"NONET\" OFF)\r\ncmake_dependent_option(DEVILUTIONX_DISABLE_EXCEPTIONS \"Disable exceptions\" ON \"DISABLE_ZERO_TIER\" OFF)\r\nRELEASE_OPTION(DEVILUTIONX_STATIC_CXX_STDLIB \"Link C++ standard library statically (if available)\")\r\noption(DEVILUTIONX_PROFILE_GENERATE \"Build a binary that generates the profile for PGO\" OFF)\r\noption(DEVILUTIONX_PROFILE_USE \"Build with PGO using the given profile file\" OFF)\r\nset(DEVILUTIONX_PROFILE_DIR \"\" CACHE STRING \"Directory where the profile is stored\")\r\n\r\ninclude(MoldLinker)\r\n\r\n# Memory / performance trade-off options\r\noption(UNPACKED_MPQS \"Expect MPQs to be unpacked and the data converted with devilutionx-mpq-tools\" OFF)\r\noption(UNPACKED_SAVES \"Uses unpacked save files instead of MPQ .sv/.hsv files\" OFF)\r\noption(DISABLE_STREAMING_MUSIC \"Disable streaming music (to work around broken platform implementations)\" OFF)\r\nmark_as_advanced(DISABLE_STREAMING_MUSIC)\r\noption(DISABLE_STREAMING_SOUNDS \"Disable streaming sounds (to work around broken platform implementations)\" OFF)\r\nmark_as_advanced(DISABLE_STREAMING_SOUNDS)\r\nset(STREAM_ALL_AUDIO_MIN_FILE_SIZE \"\" CACHE STRING \"If set, stream all the audio files larger than this size\")\r\nmark_as_advanced(STREAM_ALL_AUDIO_MIN_FILE_SIZE)\r\noption(DEVILUTIONX_PALETTE_TRANSPARENCY_BLACK_16_LUT \"Whether to use a lookup table for transparency blending with black. This improves performance of blending transparent black overlays, such as quest dialog background, at the cost of 128 KiB of RAM.\" ON)\r\nmark_as_advanced(DEVILUTIONX_PALETTE_TRANSPARENCY_BLACK_16_LUT)\r\n\r\n# Additional features\r\noption(DISABLE_DEMOMODE \"Disable demo mode support\" OFF)\r\noption(DISCORD_INTEGRATION \"Build with Discord SDK for rich presence support\" OFF)\r\noption(SCREEN_READER_INTEGRATION \"Build with screen reader support\" OFF)\r\nmark_as_advanced(SCREEN_READER_INTEGRATION)\r\n\r\n# If both UNPACKED_MPQS and UNPACKED_SAVES are enabled, we completely remove MPQ support.\r\nif(UNPACKED_MPQS AND UNPACKED_SAVES)\r\n  set(SUPPORTS_MPQ OFF)\r\nelse()\r\n  set(SUPPORTS_MPQ ON)\r\nendif()\r\n\r\n# By default, devilutionx.mpq is built only if smpq is installed and MPQ support is enabled.\r\nif(SUPPORTS_MPQ AND NOT UNPACKED_MPQS)\r\n  if(NOT DEFINED BUILD_ASSETS_MPQ AND NOT SRC_DIST)\r\n    find_program(SMPQ smpq)\r\n  elseif(BUILD_ASSETS_MPQ)\r\n    find_program(SMPQ smpq REQUIRED)\r\n  endif()\r\n  if(SMPQ)\r\n    set(_has_smpq ON)\r\n  else()\r\n    set(_has_smpq OFF)\r\n  endif()\r\n  option(BUILD_ASSETS_MPQ \"If true, assets are packaged into devilutionx.mpq.\" ${_has_smpq})\r\nelse()\r\n  set(BUILD_ASSETS_MPQS OFF)\r\nendif()\r\n\r\n# === Option overrides ===\r\n# TSAN is not compatible with ASAN.\r\nif(TSAN)\r\n  set(ASAN OFF)\r\nendif()\r\n\r\nif(MSVC AND NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\" AND NOT DISABLE_LTO)\r\n  # Work around MSVC + CMake bug when LTO is enabled.\r\n  # See https://github.com/diasurgical/devilutionX/issues/3778\r\n  # and https://gitlab.kitware.com/cmake/cmake/-/issues/23035\r\n  set(BUILD_TESTING OFF)\r\nendif()\r\n\r\n# Note: `CMAKE_CROSSCOMPILING` is only available after the `project` call.\r\nif(CMAKE_CROSSCOMPILING)\r\n  set(BUILD_TESTING OFF)\r\nendif()\r\n\r\nif(DISABLE_DEMOMODE)\r\n  # Testing requires demomode.\r\n  set(BUILD_TESTING OFF)\r\nendif()\r\n\r\nif(BUILD_TESTING)\r\n  # When tests are enabled, we build a shared devilutionx_so library, which needs to be PIC to link.\r\n  set(PIE ON)\r\nendif()\r\n\r\n# Recalculate the dependent options that are defined before `include(Platforms)`:\r\nif(NONET)\r\n  # PACKET_ENCRYPTION is defined before `Platforms.cmake` is included.\r\n  # This means that if a `Platforms.cmake` sets NONET to OFF, PACKET_ENCRYPTION will not automatically\r\n  # reflect that.\r\n  set(PACKET_ENCRYPTION OFF)\r\nendif()\r\n# === End of option overrides ===\r\n\r\nif(PIE)\r\n  set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)\r\nendif()\r\n\r\nfind_program(CCACHE_PROGRAM ccache)\r\nif(CCACHE_PROGRAM)\r\n  set(CMAKE_C_COMPILER_LAUNCHER \"${CCACHE_PROGRAM}\")\r\n  set(CMAKE_CXX_COMPILER_LAUNCHER \"${CCACHE_PROGRAM}\")\r\nendif()\r\n\r\nif(DEVILUTIONX_DISABLE_RTTI)\r\n  if(CMAKE_CXX_COMPILER_ID MATCHES \"GNU|Clang\")\r\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-rtti\")\r\n  elseif(MSVC)\r\n    string(REGEX REPLACE \"/GR\" \"/GR-\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\r\n  endif()\r\nendif()\r\n\r\nif(DEVILUTIONX_DISABLE_EXCEPTIONS)\r\n  if(CMAKE_CXX_COMPILER_ID MATCHES \"GNU|Clang\")\r\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-exceptions\")\r\n  elseif(MSVC)\r\n    string(REGEX REPLACE \"/EHsc\" \"/EHs-c-\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\r\n  endif()\r\nendif()\r\n\r\n# Remove unused symbols in non-debug mode.\r\n# This is useful even with LTO (-84 KiB with MinSizeRel).\r\n#\r\n# PS4 toolchain crashes in `create-fself` when linking with these flags, so we exclude it:\r\n# https://github.com/PacBrew/ps4-openorbis/issues/8\r\nif(CMAKE_CXX_COMPILER_ID MATCHES \"GNU|Clang\" AND NOT PS4)\r\n  add_compile_options(\"$<$<NOT:$<CONFIG:Debug>>:-ffunction-sections;-fdata-sections>\")\r\n  if(APPLE)\r\n    add_link_options(\"$<$<NOT:$<CONFIG:Debug>>:LINKER:-dead_strip>\")\r\n  else()\r\n    add_link_options(\"$<$<NOT:$<CONFIG:Debug>>:LINKER:--gc-sections,--as-needed>\")\r\n  endif()\r\nendif()\r\n\r\nif(CMAKE_CXX_COMPILER_ID MATCHES \"GNU\")\r\n  # -fipa-pta and -fdevirtualize-at-ltrans improve performance.\r\n  add_compile_options(\"$<$<NOT:$<CONFIG:Debug>>:-fipa-pta;-fdevirtualize-at-ltrans>\")\r\nendif()\r\n\r\nif(CMAKE_CXX_COMPILER_ID MATCHES \"GNU|Clang\")\r\n  add_compile_options(\"$<$<BOOL:${DEVILUTIONX_PROFILE_GENERATE}>:-fprofile-generate>\")\r\n  add_link_options(\"$<$<BOOL:${DEVILUTIONX_PROFILE_GENERATE}>:-fprofile-generate>\")\r\n  add_compile_options(\"$<$<BOOL:${DEVILUTIONX_PROFILE_USE}>:-fprofile-use>\")\r\n  add_link_options(\"$<$<BOOL:${DEVILUTIONX_PROFILE_USE}>:-fprofile-use>\")\r\n  add_compile_options(\"$<$<BOOL:${DEVILUTIONX_PROFILE_DIR}>:-fprofile-dir=${DEVILUTIONX_PROFILE_DIR};-fprofile-prefix-path=${CMAKE_CURRENT_BINARY_DIR}>\")\r\n  add_link_options(\"$<$<BOOL:${DEVILUTIONX_PROFILE_DIR}>:-fprofile-dir=${DEVILUTIONX_PROFILE_DIR};-fprofile-prefix-path=${CMAKE_CURRENT_BINARY_DIR}>\")\r\nendif()\r\n\r\nif(CMAKE_CXX_COMPILER_ID MATCHES \"MSVC\")\r\n  # u8path() function is deprecated but there is no sensible alternative and it might even get un-deprecated.\r\n  add_definitions(-D_SILENCE_CXX20_U8PATH_DEPRECATION_WARNING)\r\nendif()\r\n\r\n# Not a genexp because CMake doesn't support it\r\n# https://gitlab.kitware.com/cmake/cmake/-/issues/20546\r\nif(NOT DISABLE_LTO)\r\n  # LTO if supported:\r\n  include(CheckIPOSupported)\r\n  check_ipo_supported(RESULT is_ipo_supported OUTPUT lto_error)\r\n  if(is_ipo_supported)\r\n    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE ON)\r\n    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELWITHDEBINFO ON)\r\n    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_MINSIZEREL ON)\r\n  endif()\r\nendif()\r\n\r\nif(GPERF)\r\n  set(DEVILUTIONX_STATIC_CXX_STDLIB OFF)\r\n\r\n  if(GPERF_HEAP_FIRST_GAME_ITERATION)\r\n    set(GPERF_HEAP_MAIN ON)\r\n  endif()\r\n\r\n  # Compile with information about file and line numbers for everything\r\n  # even in non-Debug build types.\r\n  if(CMAKE_CXX_COMPILER_ID MATCHES \"GNU\")\r\n    add_compile_options(\"$<$<NOT:$<CONFIG:Debug>>:-g2>\")\r\n  elseif(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\r\n    # Use the more size-efficient `-gmlt` option on clang.\r\n    add_compile_options(\"$<$<NOT:$<CONFIG:Debug>>:-gmlt>\")\r\n  endif()\r\nendif()\r\n\r\nset(CMAKE_CXX_STANDARD 20)\r\nset(CMAKE_CXX_EXTENSIONS OFF)\r\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\r\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON) # for clang-tidy\r\nset(CMAKE_THREAD_PREFER_PTHREAD ON)\r\nset(THREADS_PREFER_PTHREAD_FLAG ON)\r\nfind_package(Threads REQUIRED)\r\n\r\n# Dependencies must be included after Platforms.\r\ninclude(Dependencies)\r\n\r\nadd_subdirectory(Source)\r\n\r\nset(BIN_TARGET devilutionx)\r\nif(NINTENDO_3DS)\r\n  set(BIN_TARGET ${BIN_TARGET}.elf)\r\nendif()\r\n\r\nif(ANDROID)\r\n  add_library(${BIN_TARGET} SHARED Source/main.cpp)\r\nelseif(UWP_LIB)\r\n  set(BIN_TARGET libdevilutionx)\r\nelse()\r\n  add_executable(${BIN_TARGET}\r\n    WIN32\r\n    MACOSX_BUNDLE\r\n    Source/main.cpp\r\n    Packaging/windows/devilutionx.exe.manifest\r\n    Packaging/windows/devilutionx.rc\r\n    Packaging/apple/LaunchScreen.storyboard)\r\n\r\n    if(CMAKE_STRIP AND NOT DEVILUTIONX_DISABLE_STRIP)\r\n      add_custom_command(\r\n        TARGET ${BIN_TARGET} POST_BUILD\r\n        DEPENDS ${BIN_TARGET}\r\n        COMMAND $<$<OR:$<CONFIG:Release>,$<CONFIG:MinSizeRel>>:${CMAKE_STRIP}>\r\n        ARGS $<TARGET_FILE:${BIN_TARGET}>)\r\n    endif()\r\nendif()\r\n\r\nif(NOT UWP_LIB)\r\n  target_link_dependencies(${BIN_TARGET} PRIVATE libdevilutionx)\r\nendif()\r\n\r\nif(GPERF)\r\n  target_link_libraries(${BIN_TARGET} PUBLIC ${GPERFTOOLS_LIBRARIES})\r\nendif()\r\n\r\n# Must be included after `BIN_TARGET` and `libdevilutionx` are defined.\r\ninclude(Assets)\r\n\r\nif(EMSCRIPTEN)\r\n  target_link_options(${BIN_TARGET} PRIVATE --preload-file assets)\r\nendif()\r\n\r\nif(NOT USE_SDL1 AND NOT UWP_LIB)\r\n  target_link_libraries(${BIN_TARGET} PUBLIC ${SDL2_MAIN})\r\nendif()\r\n\r\nif(BUILD_TESTING)\r\n  add_subdirectory(test)\r\nendif()\r\n\r\ninclude(functions/set_relative_file_macro)\r\nset_relative_file_macro(${BIN_TARGET})\r\n\r\nif(APPLE)\r\n  set(MACOSX_BUNDLE_GUI_IDENTIFIER com.diasurgical.devilutionx)\r\n  set(MACOSX_BUNDLE_COPYRIGHT Unlicense)\r\n  set(MACOSX_BUNDLE_BUNDLE_NAME devilutionx)\r\n  set(MACOSX_BUNDLE_DISPLAY_NAME DevilutionX)\r\n  set(MACOSX_BUNDLE_INFO_STRING ${PROJECT_VERSION})\r\n  set(MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION})\r\n  set(MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION})\r\n  set(MACOSX_BUNDLE_LONG_VERSION_STRING \"Version ${PROJECT_VERSION}\")\r\n  if(IOS)\r\n    set(MACOSX_BUNDLE_REQUIRED_PLATFORM IPhoneOS)\r\n    set_target_properties(${BIN_TARGET} PROPERTIES XCODE_ATTRIBUTE_TARGETED_DEVICE_FAMILY \"1,2\")\r\n    set(CMAKE_OSX_DEPLOYMENT_TARGET \"9.0\")\r\n  elseif(DARWIN_MAJOR_VERSION GREATER_EQUAL 17)\r\n    set(MACOSX_BUNDLE_REQUIRED_PLATFORM Carbon)\r\n    set(CMAKE_OSX_DEPLOYMENT_TARGET \"10.13.0\")\r\n  endif()\r\n  if(DARWIN_MAJOR_VERSION VERSION_LESS 9)\r\n    # Finder on OSX Tiger can only handle icns files with up to 128x128 icons.\r\n    set(_icon_file AppIcon_128)\r\n  else()\r\n    set(_icon_file AppIcon)\r\n  endif()\r\n  target_sources(${BIN_TARGET} PRIVATE \"Packaging/apple/${_icon_file}.icns\")\r\n  set_source_files_properties(\"./Packaging/apple/${_icon_file}.icns\" PROPERTIES MACOSX_PACKAGE_LOCATION Resources)\r\n  set_target_properties(${BIN_TARGET} PROPERTIES MACOSX_BUNDLE_ICON_FILE \"${_icon_file}.icns\")\r\n  set_target_properties(${BIN_TARGET} PROPERTIES MACOSX_BUNDLE_INFO_PLIST \"${CMAKE_CURRENT_SOURCE_DIR}/Packaging/apple/Info.plist\")\r\n\r\n  install (TARGETS ${BIN_TARGET} DESTINATION ./)\r\n\r\n  if(MACOSX_STANDALONE_APP_BUNDLE)\r\n      install(CODE \"\r\n        include(BundleUtilities)\r\n        fixup_bundle(${CMAKE_BINARY_DIR}/${MACOSX_BUNDLE_BUNDLE_NAME}.app \\\"\\\" \\\"\\\")\r\n        \"\r\n        COMPONENT Runtime)\r\n  endif()\r\n\r\n  find_library(COREFOUNDATION_LIBRARY CoreFoundation)\r\n  if(COREFOUNDATION_LIBRARY)\r\n    target_link_libraries(libdevilutionx PUBLIC \"${COREFOUNDATION_LIBRARY}\")\r\n    target_compile_definitions(libdevilutionx PRIVATE USE_COREFOUNDATION)\r\n  endif()\r\n\r\n  set(MACOSX_BUNDLE_LONG_VERSION_STRING \"Version ${PROJECT_VERSION}\")\r\n  set(CPACK On)\r\nendif()\r\n\r\nif(NINTENDO_SWITCH)\r\n  nx_generate_nacp (${BIN_TARGET}.nacp\r\n    NAME    \"DevilutionX\"\r\n    AUTHOR  \"Devilution Team\"\r\n    VERSION \"${PROJECT_VERSION}\"\r\n  )\r\n\r\n  file(MAKE_DIRECTORY \"${DEVILUTIONX_ASSETS_OUTPUT_DIRECTORY}\")\r\n  nx_create_nro(${BIN_TARGET}\r\n    NACP  ${BIN_TARGET}.nacp\r\n    ICON  \"${PROJECT_SOURCE_DIR}/Packaging/switch/icon.jpg\"\r\n    ROMFS ${DEVILUTIONX_ASSETS_OUTPUT_DIRECTORY}\r\n  )\r\nendif()\r\n\r\nif(VITA)\r\n  set(VITA_APP_NAME \"devilutionX\")\r\n  set(VITA_TITLEID  \"DVLX00001\")\r\n  set(VITA_VERSION  \"01.00\")\r\n  set(VITA_MKSFOEX_FLAGS \"${VITA_MKSFOEX_FLAGS} -d PARENTAL_LEVEL=1\")\r\n  set(VITA_MKSFOEX_FLAGS \"${VITA_MKSFOEX_FLAGS} -d ATTRIBUTE2=12\")\r\n  vita_create_self(devilutionx.self devilutionx UNSAFE)\r\n  if(BUILD_ASSETS_MPQ OR SRC_DIST)\r\n    vita_create_vpk(devilutionx.vpk ${VITA_TITLEID} devilutionx.self\r\n      VERSION ${VITA_VERSION}\r\n      NAME ${VITA_APP_NAME}\r\n      FILE Packaging/vita/sce_sys sce_sys\r\n      FILE ${DEVILUTIONX_MPQ} devilutionx.mpq\r\n    )\r\n  else()\r\n    vita_create_vpk(devilutionx.vpk ${VITA_TITLEID} devilutionx.self\r\n      VERSION ${VITA_VERSION}\r\n      NAME ${VITA_APP_NAME}\r\n      FILE Packaging/vita/sce_sys sce_sys\r\n      FILE assets assets\r\n      ${VITA_TRANSLATIONS_LIST}\r\n    )\r\n  endif()\r\n\r\nendif()\r\n\r\nif(PS4)\r\n  add_custom_command(\r\n    TARGET devilutionx_mpq POST_BUILD\r\n    COMMAND ${CMAKE_COMMAND} -E copy ${DEVILUTIONX_MPQ} \"${PROJECT_SOURCE_DIR}/Packaging/ps4/\")\r\n  add_self(${BIN_TARGET})\r\n  add_pkg(${BIN_TARGET} \"${PROJECT_SOURCE_DIR}/Packaging/ps4\"\r\n    \"DVLX00001\" \"DevilutionX\" \"${PROJECT_VERSION}\")\r\nendif()\r\n\r\nif(NINTENDO_3DS)\r\n  set(APP_TITLE       \"DevilutionX\")\r\n  set(APP_DESCRIPTION \"DevilutionX port for 3DS\")\r\n  set(APP_AUTHOR      \"Diasurgical Team\")\r\n  set(APP_ICON        \"${PROJECT_SOURCE_DIR}/Packaging/ctr/icon.png\")\r\n  set(APP_BANNER      \"${PROJECT_SOURCE_DIR}/Packaging/ctr/banner.png\")\r\n  set(APP_AUDIO       \"${CMAKE_BINARY_DIR}/banner_audio.wav\")\r\n  set(APP_RSF         \"${PROJECT_SOURCE_DIR}/Packaging/ctr/template.rsf\")\r\n  set(APP_VERSION ${PROJECT_VERSION})\r\n\r\n  find_program(FFMPEG ffmpeg)\r\n  if(FFMPEG)\r\n    add_custom_command(OUTPUT ${APP_AUDIO}\r\n      COMMAND ${FFMPEG} -y -ss 3.3 -t 3 -i \"${PROJECT_SOURCE_DIR}/Packaging/resources/shareware-startup.wav\" -af \"afade=t=in:st=0:d=0.1,afade=t=out:st=2.9:d=0.1\" ${APP_AUDIO}\r\n      DEPENDS ${PROJECT_SOURCE_DIR}/Packaging/resources/shareware-startup.wav\r\n      VERBATIM)\r\n  else()\r\n    add_custom_command(OUTPUT ${APP_AUDIO}\r\n      COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/Packaging/ctr/audio_silent.wav ${APP_AUDIO}\r\n      DEPENDS ${PROJECT_SOURCE_DIR}/Packaging/ctr/audio_silent.wav\r\n      VERBATIM)\r\n  endif()\r\n\r\n  include(Tools3DS)\r\n  add_3dsx_target(${BIN_TARGET})\r\n  add_cia_target(${BIN_TARGET} ${APP_RSF} ${APP_BANNER} ${APP_AUDIO})\r\nendif()\r\n\r\nif(NXDK)\r\n  target_link_libraries(${BIN_TARGET} PRIVATE \"${NXDK_DIR}/lib/libnxdk_automount_d.lib\")\r\n  target_link_options(${BIN_TARGET} PRIVATE \"-include:_automount_d_drive\")\r\n\r\n  set(_nxdk_pkg_dir \"${CMAKE_BINARY_DIR}/pkg\")\r\n  set(_xbe_path \"${_nxdk_pkg_dir}/default.xbe\")\r\n  add_custom_command(\r\n    OUTPUT \"${_xbe_path}\"\r\n    COMMAND \"${CMAKE_COMMAND}\" -E make_directory \"${_nxdk_pkg_dir}\"\r\n    COMMAND \"${NXDK_DIR}/tools/cxbe/cxbe\" \"-OUT:${_xbe_path}\" -TITLE:DevilutionX \"-Logo:${PROJECT_SOURCE_DIR}/Packaging/xbox_nxdk/xbe_logo.pgm\" \"${CMAKE_BINARY_DIR}/${BIN_TARGET}.exe\"\r\n    DEPENDS \"${BIN_TARGET}\"\r\n  )\r\n  add_custom_target(nxdk_xbe DEPENDS \"${_xbe_path}\")\r\nendif()\r\n\r\nif(CPACK AND (APPLE OR BUILD_ASSETS_MPQ OR SRC_DIST))\r\n  if(WIN32)\r\n    if(CMAKE_CXX_COMPILER_ID MATCHES \"MSVC\")\r\n      set(SDL2_WIN32_DLLS_DIR \"${CMAKE_BINARY_DIR}\")\r\n    else()\r\n      set(SDL2_WIN32_DLLS_DIR \"${SDL2_EXEC_PREFIX}/bin\")\r\n    endif()\r\n    set(SDL2_WIN32_LICENSES_DIR \"${PROJECT_SOURCE_DIR}/Packaging/resources\")\r\n\r\n    file(GLOB SDL2_WIN32_ALL_DLLS\r\n      LIST_DIRECTORIES false\r\n      \"${SDL2_WIN32_DLLS_DIR}/*.dll\")\r\n    file(GLOB SDL2_WIN32_ALL_LICENSES\r\n      LIST_DIRECTORIES false\r\n      \"${SDL2_WIN32_LICENSES_DIR}/LICENSE*.txt\"\r\n      \"${SDL2_WIN32_LICENSES_DIR}/README*.txt\")\r\n\r\n    set(CPACK_PACKAGE_NAME ${project_name})\r\n    if(WIN_NSIS)\r\n      set(CPACK_PACKAGE_FILE_NAME \"${PROJECT_NAME}_${PROJECT_VERSION}_Installer\")\r\n      set(CPACK_GENERATOR \"NSIS\")\r\n      set(CPACK_PACKAGE_INSTALL_DIRECTORY \"${PROJECT_NAME}\")\r\n      set(CPACK_NSIS_MUI_ICON \"${PROJECT_SOURCE_DIR}/Packaging/windows/icon.ico\")\r\n      set(CPACK_NSIS_MUI_UNIICON \"${PROJECT_SOURCE_DIR}/Packaging/windows/icon.ico\")\r\n      set(CPACK_RESOURCE_FILE_LICENSE \"${PROJECT_SOURCE_DIR}/LICENSE.md\")\r\n      set(CPACK_NSIS_EXECUTABLES_DIRECTORY \".\")\r\n      set(CPACK_PACKAGE_EXECUTABLES \"devilutionx\" \"DevilutionX\")\r\n      set(CPACK_NSIS_MUI_FINISHPAGE_RUN \"${BIN_TARGET}\")\r\n    else()\r\n      set(CPACK_PACKAGE_FILE_NAME \"devilutionx\")\r\n      set(CPACK_GENERATOR \"ZIP\")\r\n    endif()\r\n    set(CPACK_STRIP_FILES TRUE)\r\n    install(TARGETS ${BIN_TARGET} DESTINATION .)\r\n    install(FILES \"${PROJECT_SOURCE_DIR}/Packaging/windows/README.txt\"\r\n      DESTINATION \".\"\r\n    )\r\n    install(FILES \"${DEVILUTIONX_MPQ}\"\r\n      DESTINATION \".\"\r\n    )\r\n\r\n    foreach(_SDL2_WIN32_DLL_PATH ${SDL2_WIN32_ALL_DLLS} ${WIN32_INSTALL_DLLS})\r\n      install(FILES \"${_SDL2_WIN32_DLL_PATH}\"\r\n        DESTINATION \".\"\r\n      )\r\n    endforeach()\r\n\r\n    foreach(_SDL2_WIN32_LICENSE_PATH ${SDL2_WIN32_ALL_LICENSES})\r\n      install(FILES \"${_SDL2_WIN32_LICENSE_PATH}\"\r\n        DESTINATION \"LICENSE\"\r\n      )\r\n    endforeach()\r\n\r\n    if(DISCORD_SHARED_LIB)\r\n      install(FILES \"${DISCORD_SHARED_LIB}\"\r\n        DESTINATION \".\"\r\n      )\r\n    endif()\r\n\r\n    if(SCREEN_READER_INTEGRATION)\r\n      install(FILES \"${Tolk_BINARY_DIR}/libTolk.dll\"\r\n        DESTINATION \".\"\r\n      )\r\n    endif()\r\n\r\n  elseif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\r\n    string(TOLOWER ${PROJECT_NAME} project_name)\r\n    set(CPACK_PACKAGE_NAME ${project_name})\r\n    set(CPACK_GENERATOR \"7Z\")\r\n    # Common *nix files\r\n    set(CPACK_STRIP_FILES TRUE)\r\n    install(TARGETS ${BIN_TARGET} DESTINATION bin)\r\n    set(desktop_file \"${PROJECT_SOURCE_DIR}/Packaging/nix/${project_name}.desktop\")\r\n    set(desktop_file_hellfire \"${PROJECT_SOURCE_DIR}/Packaging/nix/${project_name}-hellfire.desktop\")\r\n\r\n    find_program(DFI desktop-file-install)\r\n    if(DFI)\r\n      execute_process(COMMAND ${DFI} --dir=${CMAKE_BINARY_DIR} ${desktop_file})\r\n      set(desktop_file \"${CMAKE_BINARY_DIR}/${project_name}.desktop\")\r\n      execute_process(COMMAND ${DFI} --dir=${CMAKE_BINARY_DIR} ${desktop_file_hellfire})\r\n      set(desktop_file_hellfire \"${CMAKE_BINARY_DIR}/${project_name}-hellfire.desktop\")\r\n    endif()\r\n\r\n    install(FILES \"${desktop_file}\"\r\n      DESTINATION \"share/applications\"\r\n    )\r\n    install(FILES \"${desktop_file_hellfire}\"\r\n      DESTINATION \"share/applications\"\r\n    )\r\n    install(FILES \"${PROJECT_SOURCE_DIR}/Packaging/nix/README.txt\"\r\n      DESTINATION \"share/diasurgical/${project_name}\"\r\n    )\r\n    install(FILES \"${DEVILUTIONX_MPQ}\"\r\n      DESTINATION \"share/diasurgical/${project_name}\"\r\n    )\r\n    install(FILES \"${PROJECT_SOURCE_DIR}/Packaging/resources/icon.png\"\r\n      DESTINATION \"share/icons/hicolor/512x512/apps\"\r\n      RENAME \"${project_name}.png\"\r\n    )\r\n    install(FILES \"${PROJECT_SOURCE_DIR}/Packaging/resources/hellfire.png\"\r\n      DESTINATION \"share/icons/hicolor/512x512/apps\"\r\n      RENAME \"${project_name}-hellfire.png\"\r\n    )\r\n    install(FILES \"${PROJECT_SOURCE_DIR}/Packaging/nix/devilutionx.metainfo.xml\"\r\n      DESTINATION \"share/metainfo\"\r\n      RENAME \"${project_name}.metainfo.xml\"\r\n    )\r\n    if(DISCORD_SHARED_LIB)\r\n      install(FILES \"${DISCORD_SHARED_LIB}\" DESTINATION \"lib\")\r\n    endif()\r\n\r\n    # -G DEB\r\n    set(CPACK_PACKAGE_CONTACT \"anders@jenbo.dk\")\r\n    if(USE_SDL1)\r\n    set(CPACK_DEBIAN_PACKAGE_DEPENDS \"libsdl1.2debian\")\r\n    else()\r\n    set(CPACK_DEBIAN_PACKAGE_DEPENDS \"libsdl2-2.0-0, libsdl2-image-2.0-0\")\r\n    endif()\r\n    set(CPACK_DEBIAN_FILE_NAME DEB-DEFAULT)\r\n\r\n    # -G RPM\r\n    set(CPACK_RPM_FILE_NAME RPM-DEFAULT)\r\n\r\n    find_program(RPMBUILD rpmbuild)\r\n    if(RPMBUILD)\r\n      list(APPEND CPACK_GENERATOR \"RPM\")\r\n    endif()\r\n    find_program(DPKG dpkg)\r\n    if(DPKG)\r\n      list(APPEND CPACK_GENERATOR \"DEB\")\r\n    endif()\r\n\r\n  elseif(APPLE)\r\n    set(CPACK_PACKAGE_FILE_NAME \"devilutionx\")\r\n    set(CPACK_DMG_DISABLE_APPLICATIONS_SYMLINK \"ON\")\r\n    set(CPACK_STRIP_FILES TRUE)\r\n    set(CPACK_GENERATOR \"DragNDrop\")\r\n  endif()\r\n\r\n  set(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\r\n  set(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})\r\n  set(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH})\r\n  include(CPack)\r\nendif()\r\n\r\nresolve_target_link_dependencies()\r\nif(UWP_LIB)\r\n  get_target_property(_linked_objects libdevilutionx LINKED_OBJECTS)\r\n  target_sources(libdevilutionx PRIVATE ${_linked_objects})\r\nendif()\r\n"
        },
        {
          "name": "CMakeSettings.json",
          "type": "blob",
          "size": 4.6904296875,
          "content": "{\r\n  \"configurations\": [\r\n    {\r\n      \"name\": \"x64-Debug\",\r\n      \"generator\": \"Ninja\",\r\n      \"configurationType\": \"Debug\",\r\n      \"buildRoot\": \"${workspaceRoot}\\\\build\\\\${name}\",\r\n      \"installRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\install\\\\${name}\",\r\n      \"inheritEnvironments\": [ \"msvc_x64\" ],\r\n      \"intelliSenseMode\": \"windows-msvc-x64\",\r\n      \"enableClangTidyCodeAnalysis\": true,\r\n      \"variables\": [\r\n        {\r\n          \"name\": \"DISCORD_INTEGRATION\",\r\n          \"value\": \"True\",\r\n          \"type\": \"BOOL\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"x64-Debug-Translations\",\r\n      \"generator\": \"Ninja\",\r\n      \"configurationType\": \"Debug\",\r\n      \"buildRoot\": \"${workspaceRoot}\\\\build\\\\${name}\",\r\n      \"installRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\install\\\\${name}\",\r\n      \"inheritEnvironments\": [ \"msvc_x64\" ],\r\n      \"intelliSenseMode\": \"windows-msvc-x64\",\r\n      \"enableClangTidyCodeAnalysis\": true,\r\n      \"variables\": [\r\n        {\r\n          \"name\": \"DISCORD_INTEGRATION\",\r\n          \"value\": \"True\",\r\n          \"type\": \"BOOL\"\r\n        },\r\n        {\r\n          \"name\": \"USE_GETTEXT_FROM_VCPKG\",\r\n          \"value\": \"True\",\r\n          \"type\": \"BOOL\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"x64-Debug-SDL1\",\r\n      \"generator\": \"Ninja\",\r\n      \"configurationType\": \"Debug\",\r\n      \"buildRoot\": \"${workspaceRoot}\\\\build\\\\${name}\",\r\n      \"installRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\install\\\\${name}\",\r\n      \"inheritEnvironments\": [ \"msvc_x64\" ],\r\n      \"intelliSenseMode\": \"windows-msvc-x64\",\r\n      \"cmakeCommandArgs\": \"-DUSE_SDL1=ON\",\r\n      \"enableClangTidyCodeAnalysis\": true,\r\n      \"variables\": [\r\n        {\r\n          \"name\": \"DISCORD_INTEGRATION\",\r\n          \"value\": \"True\",\r\n          \"type\": \"BOOL\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"x64-Release\",\r\n      \"generator\": \"Ninja\",\r\n      \"configurationType\": \"Release\",\r\n      \"buildRoot\": \"${workspaceRoot}\\\\build\\\\${name}\",\r\n      \"installRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\install\\\\${name}\",\r\n      \"cmakeCommandArgs\": \"-DCPACK=ON\",\r\n      \"inheritEnvironments\": [ \"msvc_x64\" ],\r\n      \"intelliSenseMode\": \"windows-msvc-x64\",\r\n      \"enableClangTidyCodeAnalysis\": true,\r\n      \"variables\": [\r\n        {\r\n          \"name\": \"DISCORD_INTEGRATION\",\r\n          \"value\": \"True\",\r\n          \"type\": \"BOOL\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"x64-RelWithDebInfo\",\r\n      \"generator\": \"Ninja\",\r\n      \"configurationType\": \"RelWithDebInfo\",\r\n      \"buildRoot\": \"${workspaceRoot}\\\\build\\\\${name}\",\r\n      \"installRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\install\\\\${name}\",\r\n      \"cmakeCommandArgs\": \"-DCPACK=ON\",\r\n      \"inheritEnvironments\": [ \"msvc_x64\" ],\r\n      \"intelliSenseMode\": \"windows-msvc-x64\",\r\n      \"enableClangTidyCodeAnalysis\": true,\r\n      \"variables\": [\r\n        {\r\n          \"name\": \"DISCORD_INTEGRATION\",\r\n          \"value\": \"True\",\r\n          \"type\": \"BOOL\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"x86-Debug\",\r\n      \"generator\": \"Ninja\",\r\n      \"configurationType\": \"Debug\",\r\n      \"buildRoot\": \"${workspaceRoot}\\\\build\\\\${name}\",\r\n      \"installRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\install\\\\${name}\",\r\n      \"inheritEnvironments\": [ \"msvc_x86\" ],\r\n      \"intelliSenseMode\": \"windows-msvc-x86\",\r\n      \"enableClangTidyCodeAnalysis\": true,\r\n      \"variables\": [\r\n        {\r\n          \"name\": \"DISCORD_INTEGRATION\",\r\n          \"value\": \"True\",\r\n          \"type\": \"BOOL\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"x86-Release\",\r\n      \"generator\": \"Ninja\",\r\n      \"configurationType\": \"Release\",\r\n      \"buildRoot\": \"${workspaceRoot}\\\\build\\\\${name}\",\r\n      \"installRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\install\\\\${name}\",\r\n      \"cmakeCommandArgs\": \"-DCPACK=ON\",\r\n      \"inheritEnvironments\": [ \"msvc_x86\" ],\r\n      \"intelliSenseMode\": \"windows-msvc-x86\",\r\n      \"enableClangTidyCodeAnalysis\": true,\r\n      \"variables\": [\r\n        {\r\n          \"name\": \"DISCORD_INTEGRATION\",\r\n          \"value\": \"True\",\r\n          \"type\": \"BOOL\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"x64-Debug-WSL-GCC\",\r\n      \"generator\": \"Ninja\",\r\n      \"configurationType\": \"Debug\",\r\n      \"buildRoot\": \"${workspaceRoot}\\\\build\\\\${name}\",\r\n      \"installRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\install\\\\${name}\",\r\n      \"cmakeExecutable\": \"cmake\",\r\n      \"cmakeCommandArgs\": \"\",\r\n      \"buildCommandArgs\": \"\",\r\n      \"ctestCommandArgs\": \"\",\r\n      \"inheritEnvironments\": [ \"linux_x64\" ],\r\n      \"wslPath\": \"${defaultWSLPath}\",\r\n      \"variables\": [\r\n        {\r\n          \"name\": \"DISCORD_INTEGRATION\",\r\n          \"value\": \"True\",\r\n          \"type\": \"BOOL\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.1025390625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\ncontact@diasurgical.org.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 3.5439453125,
          "content": "# Sustainable Use License\n\nVersion 1.0\n\n## Acceptance\n\nBy using the software, you agree to all of the terms and conditions below.\n\n## Copyright License\n\nThe licensor grants you a non-exclusive, royalty-free, worldwide, non-sublicensable, non-transferable license to use, copy, distribute, make available, and prepare derivative works of the software, in each case subject to the limitations below.\n\n## Limitations\n\nYou may use or modify the software only for your own internal business purposes or for non-commercial or personal use.\nYou may distribute the software or provide it to others only if you do so free of charge for non-commercial purposes.\nYou may not alter, remove, or obscure any licensing, copyright, or other notices of the licensor in the software. Any use of the licensor’s trademarks is subject to applicable law.\n\n## Patents\n\nThe licensor grants you a license, under any patent claims the licensor can license, or becomes able to license, to make, have made, use, sell, offer for sale, import and have imported the software, in each case subject to the limitations and conditions in this license. This license does not cover any patent claims that you cause to be infringed by modifications or additions to the software. If you or your company make any written claim that the software infringes or contributes to infringement of any patent, your patent license for the software granted under these terms ends immediately. If your company makes such a claim, your patent license ends immediately for work on behalf of your company.\n\n## Notices\n\nYou must ensure that anyone who gets a copy of any part of the software from you also gets a copy of these terms.\nIf you modify the software, you must include in any modified copies of the software a prominent notice stating that you have modified the software.\n\n## No Other Rights\n\nThese terms do not imply any licenses other than those expressly granted in these terms.\n\n## Termination\n\nIf you use the software in violation of these terms, such use is not licensed, and your license will automatically terminate. If the licensor provides you with a notice of your violation, and you cease all violation of this license no later than 30 days after you receive that notice, your license will be reinstated retroactively. However, if you violate these terms after such reinstatement, any additional violation of these terms will cause your license to terminate automatically and permanently.\n\n## No Liability\n\nAs far as the law allows, the software comes as is, without any warranty or condition, and the licensor will not be liable to you for any damages arising out of these terms or the use or nature of the software, under any kind of legal claim.\n\n## Definitions\n\nThe “licensor” is the entity offering these terms.\n\nThe “software” is the software the licensor makes available under these terms, including any portion of it.\n\n“You” refers to the individual or entity agreeing to these terms.\n\n“Your company” is any legal entity, sole proprietorship, or other kind of organization that you work for, plus all organizations that have control over, are under the control of, or are under common control with that organization. Control means ownership of substantially all the assets of an entity, or the power to direct its management and policies by vote, contract, or otherwise. Control can be direct or indirect.\n\n“Your license” is the license granted to you for the software under these terms.\n\n“Use” means anything you do with the software requiring your license.\n\n“Trademark” means trademarks, service marks, and similar rights.\n"
        },
        {
          "name": "Packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.7578125,
          "content": "<p align=\"center\">\n<img width=\"554\" src=\"https://user-images.githubusercontent.com/204594/113575181-c946a400-961d-11eb-8347-a8829fa3830c.png\">\n</p>\n\n---\n\n[![Discord Channel](https://img.shields.io/discord/518540764754608128?color=%237289DA&logo=discord&logoColor=%23FFFFFF)](https://discord.gg/devilutionx)\n[![Downloads](https://img.shields.io/github/downloads/diasurgical/devilutionX/total.svg)](https://github.com/diasurgical/devilutionX/releases/latest)\n[![Codecov](https://codecov.io/gh/diasurgical/devilutionX/branch/master/graph/badge.svg)](https://codecov.io/gh/diasurgical/devilutionX)\n\n<p align=\"center\">\n<img width=\"838\" src=\"https://github.com/user-attachments/assets/db6e94b1-a98b-413d-a109-1fb77dda34bd\">\n</p>\n\n<sub>*(The health-bar and XP-bar are off by default but can be enabled in the [game settings](https://github.com/diasurgical/devilutionX/wiki/DevilutionX-diablo.ini-configuration-guide). Widescreen can also be disabled if preferred.)*</sub>\n\n# What is DevilutionX\n\nDevilutionX is a port of Diablo and Hellfire that strives to make it simple to run the game while providing engine improvements, bug fixes, and some optional quality of life features.\n\nCheck out the [manual](https://github.com/diasurgical/devilutionX/wiki) for available features and how to take advantage of them.\n\nFor a full list of changes, see our [changelog](docs/CHANGELOG.md).\n\n# How to Install\n\nNote: You'll need access to the data from the original game. If you don't have an original CD, you can [buy Diablo from GoG.com](https://www.gog.com/game/diablo) or Battle.net. Alternatively, you can use `spawn.mpq` from the [shareware](https://github.com/diasurgical/devilutionx-assets/releases/latest/download/spawn.mpq) [[2]](http://ftp.blizzard.com/pub/demos/diablosw.exe) version, in place of `DIABDAT.MPQ`, to play the shareware portion of the game.\n\nDownload the latest [DevilutionX release](https://github.com/diasurgical/devilutionX/releases/latest) and extract the contents to a location of your choosing or [build from source](#building-from-source).\n\n- Copy `DIABDAT.MPQ` from the CD or Diablo installation (or [extract it from the GoG installer](https://github.com/diasurgical/devilutionX/wiki/Extracting-MPQs-from-the-GoG-installer)) to the DevilutionX folder.\n- To run the Diablo: Hellfire expansion, you will also need to copy `hellfire.mpq`, `hfmonk.mpq`, `hfmusic.mpq`, and `hfvoice.mpq`.\n\nFor more detailed instructions: [Installation Instructions](./docs/installing.md).\n\n# Contributing\n\nWe are always looking for more people to help with [coding](docs/CONTRIBUTING.md), [documentation](https://github.com/diasurgical/devilutionX/wiki), [testing the latest builds](#test-builds), spreading the word, or simply just hanging out on our [Discord server](https://discord.gg/devilutionx).\n\n# Mods\n\nWe hope to provide a good starting point for mods. In addition to the full Devilution source code, we also provide modding tools. Check out the list of known [mods based on DevilutionX](https://github.com/diasurgical/devilutionX/wiki/Mods).\n\n# Test Builds\n\nIf you want to help test the latest development version (make sure to back up your files, as these may contain bugs), you can fetch the test build artifact from one of the build servers:\n\n*Note: You must be logged into GitHub to download the attachments!*\n\n[![Linux x86_64](https://github.com/diasurgical/devilutionX/actions/workflows/Linux_x86_64.yml/badge.svg)](https://github.com/diasurgical/devilutionX/actions/workflows/Linux_x86_64.yml?query=branch%3Amaster)\n[![Linux AArch64](https://github.com/diasurgical/devilutionX/actions/workflows/Linux_aarch64.yml/badge.svg)](https://github.com/diasurgical/devilutionX/actions/workflows/Linux_aarch64.yml?query=branch%3Amaster)\n[![Linux x86](https://github.com/diasurgical/devilutionX/actions/workflows/Linux_x86.yml/badge.svg)](https://github.com/diasurgical/devilutionX/actions/workflows/Linux_x86.yml?query=branch%3Amaster)\n[![Linux x86_64 SDL1](https://github.com/diasurgical/devilutionX/actions/workflows/Linux_x86_64_SDL1.yml/badge.svg)](https://github.com/diasurgical/devilutionX/actions/workflows/Linux_x86_64_SDL1.yml?query=branch%3Amaster)\n[![macOS x86_64](https://github.com/diasurgical/devilutionX/actions/workflows/macOS_x86_64.yml/badge.svg)](https://github.com/diasurgical/devilutionX/actions/workflows/macOS_x86_64.yml?query=branch%3Amaster)\n[![Windows MSVC x64](https://github.com/diasurgical/devilutionX/actions/workflows/Windows_MSVC_x64.yml/badge.svg)](https://github.com/diasurgical/devilutionX/actions/workflows/Windows_MSVC_x64.yml?query=branch%3Amaster)\n[![Windows MinGW x64](https://github.com/diasurgical/devilutionX/actions/workflows/Windows_MinGW_x64.yml/badge.svg)](https://github.com/diasurgical/devilutionX/actions/workflows/Windows_MinGW_x64.yml?query=branch%3Amaster)\n[![Windows MinGW x86](https://github.com/diasurgical/devilutionX/actions/workflows/Windows_MinGW_x86.yml/badge.svg)](https://github.com/diasurgical/devilutionX/actions/workflows/Windows_MinGW_x86.yml?query=branch%3Amaster)\n[![Android](https://github.com/diasurgical/devilutionX/actions/workflows/Android.yml/badge.svg)](https://github.com/diasurgical/devilutionX/actions/workflows/Android.yml?query=branch%3Amaster)\n[![iOS](https://github.com/diasurgical/devilutionX/actions/workflows/iOS.yml/badge.svg)](https://github.com/diasurgical/devilutionX/actions/workflows/iOS.yml?query=branch%3Amaster)\n[![PS4](https://github.com/diasurgical/devilutionX/actions/workflows/PS4.yml/badge.svg)](https://github.com/diasurgical/devilutionX/actions/workflows/PS4.yml?query=branch%3Amaster)\n[![Original Xbox](https://github.com/diasurgical/devilutionX/actions/workflows/xbox_nxdk.yml/badge.svg)](https://github.com/diasurgical/devilutionX/actions/workflows/xbox_nxdk.yml?query=branch%3Amaster)\n[![Xbox One/Series](https://github.com/diasurgical/devilutionX/actions/workflows/xbox_one.yml/badge.svg)](https://github.com/diasurgical/devilutionX/actions/workflows/xbox_one.yml?query=branch%3Amaster)\n[![Nintendo Switch](https://github.com/diasurgical/devilutionX/actions/workflows/switch.yml/badge.svg)](https://github.com/diasurgical/devilutionX/actions/workflows/switch.yml)\n[![Sony PlayStation Vita](https://github.com/diasurgical/devilutionX/actions/workflows/vita.yml/badge.svg)](https://github.com/diasurgical/devilutionX/actions/workflows/vita.yml)\n[![Nintendo 3DS](https://github.com/diasurgical/devilutionX/actions/workflows/3ds.yml/badge.svg)](https://github.com/diasurgical/devilutionX/actions/workflows/3ds.yml)\n[![Amiga M68K](https://github.com/diasurgical/devilutionX/actions/workflows/amiga-m68k.yml/badge.svg)](https://github.com/diasurgical/devilutionX/actions/workflows/amiga-m68k.yml)\n\n# Building from Source\n\nWant to compile the program by yourself? Great! Simply follow the [build instructions](./docs/building.md).\n\n# Credits\n\n- The original Devilution project: [Devilution](https://github.com/diasurgical/devilution#credits)\n- [Everyone](https://github.com/diasurgical/devilutionX/graphs/contributors) who worked on Devilution/DevilutionX\n- [Nikolay Popov](https://www.instagram.com/nikolaypopovz/) for UI and graphics\n- [WiAParker](https://wiaparker.pl/projekty/diablo-hellfire/) for the Polish voice pack\n- And thanks to all who support the project, report bugs, and help spread the word ❤️\n\n# Legal\n\nDevilutionX is made publicly available and released under the Sustainable Use License (see [LICENSE](LICENSE.md)).\n\nThe source code in this repository is for non-commercial use only. If you use the source code, you may not charge others for access to it or any derivative work thereof.\n\nDiablo® - Copyright © 1996 Blizzard Entertainment, Inc. All rights reserved. Diablo and Blizzard Entertainment are trademarks or registered trademarks of Blizzard Entertainment, Inc. in the U.S. and/or other countries.\n\nDevilutionX and any of its maintainers are in no way associated with or endorsed by Blizzard Entertainment®.\n"
        },
        {
          "name": "Source",
          "type": "tree",
          "content": null
        },
        {
          "name": "Translations",
          "type": "tree",
          "content": null
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0107421875,
          "content": "1.6.0-dev\r\n"
        },
        {
          "name": "android-project",
          "type": "tree",
          "content": null
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.2861328125,
          "content": "codecov:\n  require_ci_to_pass: no\n  notify:\n    wait_for_ci: no\ncomment: no\ncoverage:\n  range: \"45...85\"\n  status:\n    project:\n      default:\n        target: 0%\n        threshold: 0.02%\n    patch: no\nignore:\n  - \"3rdParty\"\n  - \"test\"\nflag_management:\n  default_rules:\n    carryforward: false\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "doxygen.config",
          "type": "blob",
          "size": 1.107421875,
          "content": "PROJECT_NAME           = \"Devilution\"\nPROJECT_BRIEF          = \"Diablo devolved - magic behind the 1996 computer game\"\nUSE_MDFILE_AS_MAINPAGE = ./README.md\nOUTPUT_DIRECTORY       = docs\nINPUT                  = ./ ./Source ./docs\nINPUT_ENCODING         = UTF-8\nFILE_PATTERNS          = *.c \\\n                         *.cpp \\\n                         *.h \\\n                         *.inc \\\n                         *.hpp \\\n                         *.md\nRECURSIVE              = YES\nEXCLUDE                = ./build ./3rdParty ./CMake ./cmake-build-debug\n\nGENERATE_LATEX         = NO\nWARNINGS               = YES\nSOURCE_BROWSER         = YES\nJAVADOC_AUTOBRIEF      = YES\nOPTIMIZE_OUTPUT_FOR_C  = YES\nSEPARATE_MEMBER_PAGES  = YES\nDOT_IMAGE_FORMAT       = svg\nINTERACTIVE_SVG        = YES\nHTML_COLORSTYLE_HUE    = 0\nHTML_COLORSTYLE_SAT    = 125\nHTML_COLORSTYLE_GAMMA  = 200\n\n# Call graphces alows logical navigation of the docs\nCALL_GRAPH             = YES\nCALLER_GRAPH           = YES\n\n# Not all files are documented yet\nEXTRACT_ALL            = YES\nEXTRACT_PRIVATE        = YES\nEXTRACT_STATIC         = YES\nEXTRACT_ANON_NSPACES   = YES\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "uwp-project",
          "type": "tree",
          "content": null
        },
        {
          "name": "vcpkg.json",
          "type": "blob",
          "size": 0.7763671875,
          "content": "{\r\n\t\"name\": \"devilutionx\",\r\n\t\"version-string\": \"1.4.0\",\r\n\t\"dependencies\": [\r\n\t\t\"fmt\",\r\n\t\t\"bzip2\",\r\n\t\t\"lua\"\r\n\t],\r\n\t\"builtin-baseline\": \"80d54ff62d528339c626a6fbc3489a7f25956ade\",\r\n\t\"features\": {\r\n\t\t\"sdl1\": {\r\n\t\t\t\"description\": \"Use SDL1.2 instead of SDL2\",\r\n\t\t\t\"dependencies\": [ \"sdl1\", \"libpng\" ]\r\n\t\t},\r\n\t\t\"sdl2\": {\r\n\t\t\t\"description\": \"Use SDL2\",\r\n\t\t\t\"dependencies\": [ \"sdl2\", \"sdl2-image\" ]\r\n\t\t},\r\n\t\t\"encryption\": {\r\n\t\t\t\"description\": \"Build libsodium for packet encryption\",\r\n\t\t\t\"dependencies\": [ \"libsodium\" ]\r\n\t\t},\r\n\t\t\"translations\": {\r\n\t\t\t\"description\": \"Build translation files\",\r\n\t\t\t\"dependencies\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"gettext\",\r\n\t\t\t\t\t\"features\": [ \"tools\" ]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t\"tests\": {\r\n\t\t\t\"description\": \"Build tests\",\r\n\t\t\t\"dependencies\": [ \"gtest\", \"benchmark\" ]\r\n\t\t}\r\n\t}\r\n}\r\n"
        }
      ]
    }
  ]
}