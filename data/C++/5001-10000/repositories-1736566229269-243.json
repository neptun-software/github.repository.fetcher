{
  "metadata": {
    "timestamp": 1736566229269,
    "page": 243,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jbeder/yaml-cpp",
      "stars": 5261,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bazelignore",
          "type": "blob",
          "size": 0.017578125,
          "content": "test/gtest-1.11.0\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.357421875,
          "content": "---\n# BasedOnStyle:  Google\nAccessModifierOffset: -1\nConstructorInitializerIndentWidth: 4\nAlignEscapedNewlinesLeft: true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakTemplateDeclarations: true\nAlwaysBreakBeforeMultilineStrings: true\nBreakBeforeBinaryOperators: false\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBinPackParameters: true\nColumnLimit:     80\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nDerivePointerBinding: true\nExperimentalAutoDetectBinPacking: false\nIndentCaseLabels: true\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCSpaceBeforeProtocolList: false\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 60\nPenaltyBreakString: 1000\nPenaltyBreakFirstLessLess: 120\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerBindsToType: true\nSpacesBeforeTrailingComments: 2\nCpp11BracedListStyle: true\nStandard:        Cpp11\nIndentWidth:     2\nTabWidth:        8\nUseTab:          Never\nBreakBeforeBraces: Attach\nIndentFunctionDeclarationAfterType: true\nSpacesInParentheses: false\nSpacesInAngles:  false\nSpaceInEmptyParentheses: false\nSpacesInCStyleCastParentheses: false\nSpaceAfterControlStatementKeyword: true\nSpaceBeforeAssignmentOperators: true\nContinuationIndentWidth: 4\n...\n\n"
        },
        {
          "name": ".codedocs",
          "type": "blob",
          "size": 1.865234375,
          "content": "# CodeDocs.xyz Configuration File\n\n# Optional project name, if left empty the GitHub repository name will be used.\nPROJECT_NAME =\n\n# One or more directories and files that contain example code to be included.\nEXAMPLE_PATH =\n\n# One or more directories and files to exclude from documentation generation.\n# Use relative paths with respect to the repository root directory.\nEXCLUDE = test/gtest-1.8.0/\n\n# One or more wildcard patterns to exclude files and directories from document\n# generation.\nEXCLUDE_PATTERNS =\n\n# One or more symbols to exclude from document generation. Symbols can be\n# namespaces, classes, or functions.\nEXCLUDE_SYMBOLS =\n\n# Override the default parser (language) used for each file extension.\nEXTENSION_MAPPING =\n\n# Set the wildcard patterns used to filter out the source-files.\n# If left blank the default is:\n# *.c, *.cc, *.cxx, *.cpp, *.c++, *.java, *.ii, *.ixx, *.ipp, *.i++, *.inl,\n# *.idl, *.ddl, *.odl, *.h, *.hh, *.hxx, *.hpp, *.h++, *.cs, *.d, *.php,\n# *.php4, *.php5, *.phtml, *.inc, *.m, *.markdown, *.md, *.mm, *.dox, *.py,\n# *.f90, *.f, *.for, *.tcl, *.vhd, *.vhdl, *.ucf, *.qsf, *.as and *.js.\nFILE_PATTERNS =\n\n# Hide undocumented class members.\nHIDE_UNDOC_MEMBERS =\n\n# Hide undocumented classes.\nHIDE_UNDOC_CLASSES =\n\n# Specify a markdown page whose contents should be used as the main page\n# (index.html). This will override a page marked as \\mainpage. For example, a\n# README.md file usually serves as a useful main page.\nUSE_MDFILE_AS_MAINPAGE = README.md\n\n# Specify external repository to link documentation with.\n# This is similar to Doxygen's TAGFILES option, but will automatically link to\n# tags of other repositories already using CodeDocs. List each repository to\n# link with by giving its location in the form of owner/repository.\n# For example:\n#   TAGLINKS = doxygen/doxygen CodeDocs/osg\n# Note: these repositories must already be built on CodeDocs.\nTAGLINKS =\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.021484375,
          "content": "build/\n/tags\n/bazel-*\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 0.560546875,
          "content": "yaml_cpp_defines = select({\n    # On Windows, ensure static linking is used.\n    \"@platforms//os:windows\": [\"YAML_CPP_STATIC_DEFINE\", \"YAML_CPP_NO_CONTRIB\"],\n    \"//conditions:default\": [],\n})\n\ncc_library(\n    name = \"yaml-cpp_internal\",\n    visibility = [\"//:__subpackages__\"],\n    strip_include_prefix = \"src\",\n    hdrs = glob([\"src/**/*.h\"]),\n)\n\ncc_library(\n    name = \"yaml-cpp\",\n    visibility = [\"//visibility:public\"],\n    includes = [\"include\"],\n    hdrs = glob([\"include/**/*.h\"]),\n    srcs = glob([\"src/**/*.cpp\", \"src/**/*.h\"]),\n    defines = yaml_cpp_defines,\n)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 7.052734375,
          "content": "# 3.5 is actually available almost everywhere, but this a good minimum.\n# 3.14 as the upper policy limit avoids CMake deprecation warnings.\ncmake_minimum_required(VERSION 3.4...3.14)\n\n# enable MSVC_RUNTIME_LIBRARY target property\n# see https://cmake.org/cmake/help/latest/policy/CMP0091.html\nif(POLICY CMP0091)\n  cmake_policy(SET CMP0091 NEW)\nendif()\n\nproject(YAML_CPP VERSION 0.8.0 LANGUAGES CXX)\n\nset(YAML_CPP_MAIN_PROJECT OFF)\nif(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)\n  set(YAML_CPP_MAIN_PROJECT ON)\nendif()\n\ninclude(CMakePackageConfigHelpers)\ninclude(CMakeDependentOption)\ninclude(CheckCXXCompilerFlag)\ninclude(GNUInstallDirs)\ninclude(CTest)\n\noption(YAML_CPP_BUILD_CONTRIB \"Enable yaml-cpp contrib in library\" ON)\noption(YAML_CPP_BUILD_TOOLS \"Enable parse tools\" ON)\noption(YAML_BUILD_SHARED_LIBS \"Build yaml-cpp shared library\" ${BUILD_SHARED_LIBS})\noption(YAML_CPP_INSTALL \"Enable generation of yaml-cpp install targets\" ${YAML_CPP_MAIN_PROJECT})\noption(YAML_CPP_FORMAT_SOURCE \"Format source\" ${YAML_CPP_MAIN_PROJECT})\noption(YAML_CPP_DISABLE_UNINSTALL  \"Disable uninstallation of yaml-cpp\" OFF)\noption(YAML_USE_SYSTEM_GTEST \"Use system googletest if found\" OFF)\noption(YAML_ENABLE_PIC \"Use Position-Independent Code \" ON)\n\ncmake_dependent_option(YAML_CPP_BUILD_TESTS\n  \"Enable yaml-cpp tests\" OFF\n  \"BUILD_TESTING;YAML_CPP_MAIN_PROJECT\" OFF)\ncmake_dependent_option(YAML_MSVC_SHARED_RT\n  \"MSVC: Build yaml-cpp with shared runtime libs (/MD)\" ON\n  \"CMAKE_SYSTEM_NAME MATCHES Windows\" OFF)\nset(YAML_CPP_INSTALL_CMAKEDIR \"${CMAKE_INSTALL_LIBDIR}/cmake/yaml-cpp\"\n  CACHE STRING \"Path to install the CMake package to\")\n \nif (YAML_CPP_FORMAT_SOURCE)\n    find_program(YAML_CPP_CLANG_FORMAT_EXE NAMES clang-format)\nendif()\n\nif (YAML_BUILD_SHARED_LIBS)\n  set(yaml-cpp-type SHARED)\n  set(yaml-cpp-label-postfix \"shared\")\nelse()\n  set(yaml-cpp-type STATIC)\n  set(yaml-cpp-label-postfix \"static\")\nendif()\n\nset(build-shared $<BOOL:${YAML_BUILD_SHARED_LIBS}>)\nset(build-windows-dll $<AND:$<BOOL:${CMAKE_HOST_WIN32}>,${build-shared}>)\nset(not-msvc $<NOT:$<CXX_COMPILER_ID:MSVC>>)\nset(msvc-shared_rt $<BOOL:${YAML_MSVC_SHARED_RT}>)\n\nif (NOT DEFINED CMAKE_MSVC_RUNTIME_LIBRARY)\n  set(CMAKE_MSVC_RUNTIME_LIBRARY\n    MultiThreaded$<$<CONFIG:Debug>:Debug>$<${msvc-shared_rt}:DLL>)\nendif()\n\nset(contrib-pattern \"src/contrib/*.cpp\")\nset(src-pattern \"src/*.cpp\")\nif (CMAKE_VERSION VERSION_GREATER 3.12)\n  list(INSERT contrib-pattern 0 CONFIGURE_DEPENDS)\n  list(INSERT src-pattern 0 CONFIGURE_DEPENDS)\nendif()\n\nfile(GLOB yaml-cpp-contrib-sources ${contrib-pattern})\nfile(GLOB yaml-cpp-sources ${src-pattern})\n\nset(msvc-rt $<TARGET_PROPERTY:MSVC_RUNTIME_LIBRARY>)\n\nset(msvc-rt-mtd-static $<STREQUAL:${msvc-rt},MultiThreadedDebug>)\nset(msvc-rt-mt-static $<STREQUAL:${msvc-rt},MultiThreaded>)\n\nset(msvc-rt-mtd-dll $<STREQUAL:${msvc-rt},MultiThreadedDebugDLL>)\nset(msvc-rt-mt-dll $<STREQUAL:${msvc-rt},MultiThreadedDLL>)\n\nset(backport-msvc-runtime $<VERSION_LESS:${CMAKE_VERSION},3.15>)\n\nadd_library(yaml-cpp ${yaml-cpp-type} \"\")\nadd_library(yaml-cpp::yaml-cpp ALIAS yaml-cpp)\n\nset_property(TARGET yaml-cpp\n  PROPERTY\n    MSVC_RUNTIME_LIBRARY ${CMAKE_MSVC_RUNTIME_LIBRARY})\nset_property(TARGET yaml-cpp\n  PROPERTY\n    CXX_STANDARD_REQUIRED ON)\n\nif (NOT YAML_BUILD_SHARED_LIBS)\n      set_property(TARGET yaml-cpp PROPERTY POSITION_INDEPENDENT_CODE ${YAML_ENABLE_PIC})\nendif()\n\ntarget_include_directories(yaml-cpp\n  PUBLIC\n    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>\n    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\n  PRIVATE\n    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/src>)\n\nif (NOT DEFINED CMAKE_CXX_STANDARD)\n  set_target_properties(yaml-cpp\n    PROPERTIES\n      CXX_STANDARD 11)\nendif()\n\nif(YAML_CPP_MAIN_PROJECT)\n  target_compile_options(yaml-cpp\n    PRIVATE\n      $<${not-msvc}:-Wall -Wextra -Wshadow -Weffc++ -Wno-long-long>\n      $<${not-msvc}:-pedantic -pedantic-errors>)\nendif()\n\ntarget_compile_options(yaml-cpp\n  PRIVATE\n    $<$<AND:${backport-msvc-runtime},${msvc-rt-mtd-static}>:-MTd>\n    $<$<AND:${backport-msvc-runtime},${msvc-rt-mt-static}>:-MT>\n    $<$<AND:${backport-msvc-runtime},${msvc-rt-mtd-dll}>:-MDd>\n    $<$<AND:${backport-msvc-runtime},${msvc-rt-mt-dll}>:-MD>\n\n    # /wd4127 = disable warning C4127 \"conditional expression is constant\"\n    # http://msdn.microsoft.com/en-us/library/6t66728h.aspx\n    # /wd4355 = disable warning C4355 \"'this' : used in base member initializer list\n    # http://msdn.microsoft.com/en-us/library/3c594ae3.aspx\n    $<$<CXX_COMPILER_ID:MSVC>:/W3 /wd4127 /wd4355>)\n\ntarget_compile_definitions(yaml-cpp\n  PUBLIC\n    $<$<NOT:$<BOOL:${YAML_BUILD_SHARED_LIBS}>>:YAML_CPP_STATIC_DEFINE>\n  PRIVATE\n    $<${build-windows-dll}:${PROJECT_NAME}_DLL>\n    $<$<NOT:$<BOOL:${YAML_CPP_BUILD_CONTRIB}>>:YAML_CPP_NO_CONTRIB>)\n\ntarget_sources(yaml-cpp\n  PRIVATE\n    $<$<BOOL:${YAML_CPP_BUILD_CONTRIB}>:${yaml-cpp-contrib-sources}>\n    ${yaml-cpp-sources})\n\nif (NOT DEFINED CMAKE_DEBUG_POSTFIX)\n  set(CMAKE_DEBUG_POSTFIX \"d\")\nendif()\n\nset_target_properties(yaml-cpp PROPERTIES\n  VERSION \"${PROJECT_VERSION}\"\n  SOVERSION \"${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}\"\n  PROJECT_LABEL \"yaml-cpp ${yaml-cpp-label-postfix}\"\n  DEBUG_POSTFIX \"${CMAKE_DEBUG_POSTFIX}\")\n\nset(EXPORT_TARGETS yaml-cpp::yaml-cpp)\nconfigure_package_config_file(\n  \"${PROJECT_SOURCE_DIR}/yaml-cpp-config.cmake.in\"\n  \"${PROJECT_BINARY_DIR}/yaml-cpp-config.cmake\"\n  INSTALL_DESTINATION \"${YAML_CPP_INSTALL_CMAKEDIR}\"\n  PATH_VARS CMAKE_INSTALL_INCLUDEDIR CMAKE_INSTALL_LIBDIR)\nunset(EXPORT_TARGETS)\n\nwrite_basic_package_version_file(\n  \"${PROJECT_BINARY_DIR}/yaml-cpp-config-version.cmake\"\n  COMPATIBILITY AnyNewerVersion)\n\nconfigure_file(yaml-cpp.pc.in yaml-cpp.pc @ONLY)\n\nif (YAML_CPP_INSTALL)\n  install(TARGETS yaml-cpp\n    EXPORT yaml-cpp-targets\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})\n  install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/\n    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n                FILES_MATCHING PATTERN \"*.h\")\n  install(EXPORT yaml-cpp-targets\n    NAMESPACE yaml-cpp::\n    DESTINATION \"${YAML_CPP_INSTALL_CMAKEDIR}\")\n  install(FILES\n      \"${PROJECT_BINARY_DIR}/yaml-cpp-config.cmake\"\n      \"${PROJECT_BINARY_DIR}/yaml-cpp-config-version.cmake\"\n    DESTINATION \"${YAML_CPP_INSTALL_CMAKEDIR}\")\n  install(FILES \"${PROJECT_BINARY_DIR}/yaml-cpp.pc\"\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)\nendif()\n\nif(YAML_CPP_BUILD_TESTS)\n  add_subdirectory(test)\nendif()\n\nif(YAML_CPP_BUILD_TOOLS)\n  add_subdirectory(util)\nendif()\n\nif (YAML_CPP_FORMAT_SOURCE AND YAML_CPP_CLANG_FORMAT_EXE)\n  add_custom_target(format\n    COMMAND clang-format --style=file -i $<TARGET_PROPERTY:yaml-cpp,SOURCES>\n    COMMAND_EXPAND_LISTS\n    COMMENT \"Running clang-format\"\n    WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}\"\n    VERBATIM)\nendif()\n\n# uninstall target\nif(YAML_CPP_INSTALL AND NOT YAML_CPP_DISABLE_UNINSTALL AND NOT TARGET uninstall)\n  configure_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\"\n    IMMEDIATE @ONLY)\n\n  add_custom_target(uninstall\n    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.48046875,
          "content": "# Style\n\nThis project is formatted with [clang-format][fmt] using the style file at the root of the repository. Please run clang-format before sending a pull request.\n\nIn general, try to follow the style of surrounding code. We mostly follow the [Google C++ style guide][cpp-style].\n\nCommit messages should be in the imperative mood, as described in the [Git contributing file][git-contrib]:\n\n> Describe your changes in imperative mood, e.g. \"make xyzzy do frotz\"\n> instead of \"[This patch] makes xyzzy do frotz\" or \"[I] changed xyzzy\n> to do frotz\", as if you are giving orders to the codebase to change\n> its behaviour.\n\n[fmt]: http://clang.llvm.org/docs/ClangFormat.html\n[cpp-style]: https://google.github.io/styleguide/cppguide.html\n[git-contrib]: http://git.kernel.org/cgit/git/git.git/tree/Documentation/SubmittingPatches?id=HEAD\n\n# Tests\n\nPlease verify the tests pass by configuring CMake with `-D YAML_CPP_BUILD_TESTS=ON` and running the target `test/yaml-cpp-tests`.\n\nIf you are adding functionality, add tests accordingly. Note that the \"spec tests\" are reserved for examples directly from the YAML spec, so if you have new examples, put them in other test files.\n\n# Pull request process\n\nEvery pull request undergoes a code review. Unfortunately, github's code review process isn't great, but we'll manage. During the code review, if you make changes, add new commits to the pull request for each change. Once the code review is complete, rebase against the master branch and squash into a single commit.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0361328125,
          "content": "Copyright (c) 2008-2015 Jesse Beder.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 0.3369140625,
          "content": "\"\"\"\nyaml-cpp is a YAML parser and emitter in c++ matching the YAML specification.\n\"\"\"\n\nmodule(\n    name = \"yaml-cpp\",\n    compatibility_level = 1,\n    version = \"0.8.0\",\n)\n\nbazel_dep(name = \"platforms\", version = \"0.0.7\")\nbazel_dep(name = \"rules_cc\", version = \"0.0.8\")\n\nbazel_dep(name = \"googletest\", version = \"1.14.0\", dev_dependency = True)\n"
        },
        {
          "name": "MODULE.bazel.lock",
          "type": "blob",
          "size": 9.84765625,
          "content": "{\n  \"lockFileVersion\": 11,\n  \"registryFileHashes\": {\n    \"https://bcr.bazel.build/bazel_registry.json\": \"8a28e4aff06ee60aed2a8c281907fb8bcbf3b753c91fb5a5c57da3215d5b3497\",\n    \"https://bcr.bazel.build/modules/abseil-cpp/20210324.2/MODULE.bazel\": \"7cd0312e064fde87c8d1cd79ba06c876bd23630c83466e9500321be55c96ace2\",\n    \"https://bcr.bazel.build/modules/abseil-cpp/20211102.0/MODULE.bazel\": \"70390338f7a5106231d20620712f7cccb659cd0e9d073d1991c038eb9fc57589\",\n    \"https://bcr.bazel.build/modules/abseil-cpp/20230125.1/MODULE.bazel\": \"89047429cb0207707b2dface14ba7f8df85273d484c2572755be4bab7ce9c3a0\",\n    \"https://bcr.bazel.build/modules/abseil-cpp/20230125.1/source.json\": \"06cc0842d241da0c5edc755edb3c7d0d008d304330e57ecf2d6449fb0b633a82\",\n    \"https://bcr.bazel.build/modules/apple_support/1.5.0/MODULE.bazel\": \"50341a62efbc483e8a2a6aec30994a58749bd7b885e18dd96aa8c33031e558ef\",\n    \"https://bcr.bazel.build/modules/apple_support/1.5.0/source.json\": \"eb98a7627c0bc486b57f598ad8da50f6625d974c8f723e9ea71bd39f709c9862\",\n    \"https://bcr.bazel.build/modules/bazel_features/1.11.0/MODULE.bazel\": \"f9382337dd5a474c3b7d334c2f83e50b6eaedc284253334cf823044a26de03e8\",\n    \"https://bcr.bazel.build/modules/bazel_features/1.11.0/source.json\": \"c9320aa53cd1c441d24bd6b716da087ad7e4ff0d9742a9884587596edfe53015\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.0.3/MODULE.bazel\": \"bcb0fd896384802d1ad283b4e4eb4d718eebd8cb820b0a2c3a347fb971afd9d8\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.2.1/MODULE.bazel\": \"f35baf9da0efe45fa3da1696ae906eea3d615ad41e2e3def4aeb4e8bc0ef9a7a\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.3.0/MODULE.bazel\": \"20228b92868bf5cfc41bda7afc8a8ba2a543201851de39d990ec957b513579c5\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.4.1/MODULE.bazel\": \"a0dcb779424be33100dcae821e9e27e4f2901d9dfd5333efe5ac6a8d7ab75e1d\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.6.1/MODULE.bazel\": \"8fdee2dbaace6c252131c00e1de4b165dc65af02ea278476187765e1a617b917\",\n    \"https://bcr.bazel.build/modules/bazel_skylib/1.6.1/source.json\": \"082ed5f9837901fada8c68c2f3ddc958bb22b6d654f71dd73f3df30d45d4b749\",\n    \"https://bcr.bazel.build/modules/buildozer/7.1.2/MODULE.bazel\": \"2e8dd40ede9c454042645fd8d8d0cd1527966aa5c919de86661e62953cd73d84\",\n    \"https://bcr.bazel.build/modules/buildozer/7.1.2/source.json\": \"c9028a501d2db85793a6996205c8de120944f50a0d570438fcae0457a5f9d1f8\",\n    \"https://bcr.bazel.build/modules/googletest/1.11.0/MODULE.bazel\": \"3a83f095183f66345ca86aa13c58b59f9f94a2f81999c093d4eeaa2d262d12f4\",\n    \"https://bcr.bazel.build/modules/googletest/1.14.0/MODULE.bazel\": \"cfbcbf3e6eac06ef9d85900f64424708cc08687d1b527f0ef65aa7517af8118f\",\n    \"https://bcr.bazel.build/modules/googletest/1.14.0/source.json\": \"2478949479000fdd7de9a3d0107ba2c85bb5f961c3ecb1aa448f52549ce310b5\",\n    \"https://bcr.bazel.build/modules/platforms/0.0.4/MODULE.bazel\": \"9b328e31ee156f53f3c416a64f8491f7eb731742655a47c9eec4703a71644aee\",\n    \"https://bcr.bazel.build/modules/platforms/0.0.5/MODULE.bazel\": \"5733b54ea419d5eaf7997054bb55f6a1d0b5ff8aedf0176fef9eea44f3acda37\",\n    \"https://bcr.bazel.build/modules/platforms/0.0.6/MODULE.bazel\": \"ad6eeef431dc52aefd2d77ed20a4b353f8ebf0f4ecdd26a807d2da5aa8cd0615\",\n    \"https://bcr.bazel.build/modules/platforms/0.0.7/MODULE.bazel\": \"72fd4a0ede9ee5c021f6a8dd92b503e089f46c227ba2813ff183b71616034814\",\n    \"https://bcr.bazel.build/modules/platforms/0.0.9/MODULE.bazel\": \"4a87a60c927b56ddd67db50c89acaa62f4ce2a1d2149ccb63ffd871d5ce29ebc\",\n    \"https://bcr.bazel.build/modules/platforms/0.0.9/source.json\": \"cd74d854bf16a9e002fb2ca7b1a421f4403cda29f824a765acd3a8c56f8d43e6\",\n    \"https://bcr.bazel.build/modules/protobuf/21.7/MODULE.bazel\": \"a5a29bb89544f9b97edce05642fac225a808b5b7be74038ea3640fae2f8e66a7\",\n    \"https://bcr.bazel.build/modules/protobuf/21.7/source.json\": \"bbe500720421e582ff2d18b0802464205138c06056f443184de39fbb8187b09b\",\n    \"https://bcr.bazel.build/modules/protobuf/3.19.0/MODULE.bazel\": \"6b5fbb433f760a99a22b18b6850ed5784ef0e9928a72668b66e4d7ccd47db9b0\",\n    \"https://bcr.bazel.build/modules/protobuf/3.19.6/MODULE.bazel\": \"9233edc5e1f2ee276a60de3eaa47ac4132302ef9643238f23128fea53ea12858\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.0.1/MODULE.bazel\": \"cb2aa0747f84c6c3a78dad4e2049c154f08ab9d166b1273835a8174940365647\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.0.2/MODULE.bazel\": \"6915987c90970493ab97393024c156ea8fb9f3bea953b2f3ec05c34f19b5695c\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.0.6/MODULE.bazel\": \"abf360251023dfe3efcef65ab9d56beefa8394d4176dd29529750e1c57eaa33f\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.0.8/MODULE.bazel\": \"964c85c82cfeb6f3855e6a07054fdb159aced38e99a5eecf7bce9d53990afa3e\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.0.9/MODULE.bazel\": \"836e76439f354b89afe6a911a7adf59a6b2518fafb174483ad78a2a2fde7b1c5\",\n    \"https://bcr.bazel.build/modules/rules_cc/0.0.9/source.json\": \"1f1ba6fea244b616de4a554a0f4983c91a9301640c8fe0dd1d410254115c8430\",\n    \"https://bcr.bazel.build/modules/rules_java/4.0.0/MODULE.bazel\": \"5a78a7ae82cd1a33cef56dc578c7d2a46ed0dca12643ee45edbb8417899e6f74\",\n    \"https://bcr.bazel.build/modules/rules_java/7.6.5/MODULE.bazel\": \"481164be5e02e4cab6e77a36927683263be56b7e36fef918b458d7a8a1ebadb1\",\n    \"https://bcr.bazel.build/modules/rules_java/7.6.5/source.json\": \"a805b889531d1690e3c72a7a7e47a870d00323186a9904b36af83aa3d053ee8d\",\n    \"https://bcr.bazel.build/modules/rules_jvm_external/4.4.2/MODULE.bazel\": \"a56b85e418c83eb1839819f0b515c431010160383306d13ec21959ac412d2fe7\",\n    \"https://bcr.bazel.build/modules/rules_jvm_external/4.4.2/source.json\": \"a075731e1b46bc8425098512d038d416e966ab19684a10a34f4741295642fc35\",\n    \"https://bcr.bazel.build/modules/rules_license/0.0.3/MODULE.bazel\": \"627e9ab0247f7d1e05736b59dbb1b6871373de5ad31c3011880b4133cafd4bd0\",\n    \"https://bcr.bazel.build/modules/rules_license/0.0.7/MODULE.bazel\": \"088fbeb0b6a419005b89cf93fe62d9517c0a2b8bb56af3244af65ecfe37e7d5d\",\n    \"https://bcr.bazel.build/modules/rules_license/0.0.7/source.json\": \"355cc5737a0f294e560d52b1b7a6492d4fff2caf0bef1a315df5a298fca2d34a\",\n    \"https://bcr.bazel.build/modules/rules_pkg/0.7.0/MODULE.bazel\": \"df99f03fc7934a4737122518bb87e667e62d780b610910f0447665a7e2be62dc\",\n    \"https://bcr.bazel.build/modules/rules_pkg/0.7.0/source.json\": \"c2557066e0c0342223ba592510ad3d812d4963b9024831f7f66fd0584dd8c66c\",\n    \"https://bcr.bazel.build/modules/rules_proto/4.0.0/MODULE.bazel\": \"a7a7b6ce9bee418c1a760b3d84f83a299ad6952f9903c67f19e4edd964894e06\",\n    \"https://bcr.bazel.build/modules/rules_proto/5.3.0-21.7/MODULE.bazel\": \"e8dff86b0971688790ae75528fe1813f71809b5afd57facb44dad9e8eca631b7\",\n    \"https://bcr.bazel.build/modules/rules_proto/5.3.0-21.7/source.json\": \"d57902c052424dfda0e71646cb12668d39c4620ee0544294d9d941e7d12bc3a9\",\n    \"https://bcr.bazel.build/modules/rules_python/0.10.2/MODULE.bazel\": \"cc82bc96f2997baa545ab3ce73f196d040ffb8756fd2d66125a530031cd90e5f\",\n    \"https://bcr.bazel.build/modules/rules_python/0.22.1/MODULE.bazel\": \"26114f0c0b5e93018c0c066d6673f1a2c3737c7e90af95eff30cfee38d0bbac7\",\n    \"https://bcr.bazel.build/modules/rules_python/0.22.1/source.json\": \"57226905e783bae7c37c2dd662be078728e48fa28ee4324a7eabcafb5a43d014\",\n    \"https://bcr.bazel.build/modules/rules_python/0.4.0/MODULE.bazel\": \"9208ee05fd48bf09ac60ed269791cf17fb343db56c8226a720fbb1cdf467166c\",\n    \"https://bcr.bazel.build/modules/stardoc/0.5.1/MODULE.bazel\": \"1a05d92974d0c122f5ccf09291442580317cdd859f07a8655f1db9a60374f9f8\",\n    \"https://bcr.bazel.build/modules/stardoc/0.5.1/source.json\": \"a96f95e02123320aa015b956f29c00cb818fa891ef823d55148e1a362caacf29\",\n    \"https://bcr.bazel.build/modules/upb/0.0.0-20220923-a547704/MODULE.bazel\": \"7298990c00040a0e2f121f6c32544bab27d4452f80d9ce51349b1a28f3005c43\",\n    \"https://bcr.bazel.build/modules/upb/0.0.0-20220923-a547704/source.json\": \"f1ef7d3f9e0e26d4b23d1c39b5f5de71f584dd7d1b4ef83d9bbba6ec7a6a6459\",\n    \"https://bcr.bazel.build/modules/zlib/1.2.11/MODULE.bazel\": \"07b389abc85fdbca459b69e2ec656ae5622873af3f845e1c9d80fe179f3effa0\",\n    \"https://bcr.bazel.build/modules/zlib/1.2.12/MODULE.bazel\": \"3b1a8834ada2a883674be8cbd36ede1b6ec481477ada359cd2d3ddc562340b27\",\n    \"https://bcr.bazel.build/modules/zlib/1.3.1.bcr.3/MODULE.bazel\": \"af322bc08976524477c79d1e45e241b6efbeb918c497e8840b8ab116802dda79\",\n    \"https://bcr.bazel.build/modules/zlib/1.3.1.bcr.3/source.json\": \"2be409ac3c7601245958cd4fcdff4288be79ed23bd690b4b951f500d54ee6e7d\"\n  },\n  \"selectedYankedVersions\": {},\n  \"moduleExtensions\": {\n    \"@@apple_support~//crosstool:setup.bzl%apple_cc_configure_extension\": {\n      \"general\": {\n        \"bzlTransitiveDigest\": \"PjIds3feoYE8SGbbIq2SFTZy3zmxeO2tQevJZNDo7iY=\",\n        \"usagesDigest\": \"+hz7IHWN6A1oVJJWNDB6yZRG+RYhF76wAYItpAeIUIg=\",\n        \"recordedFileInputs\": {},\n        \"recordedDirentsInputs\": {},\n        \"envVariables\": {},\n        \"generatedRepoSpecs\": {\n          \"local_config_apple_cc_toolchains\": {\n            \"bzlFile\": \"@@apple_support~//crosstool:setup.bzl\",\n            \"ruleClassName\": \"_apple_cc_autoconf_toolchains\",\n            \"attributes\": {}\n          },\n          \"local_config_apple_cc\": {\n            \"bzlFile\": \"@@apple_support~//crosstool:setup.bzl\",\n            \"ruleClassName\": \"_apple_cc_autoconf\",\n            \"attributes\": {}\n          }\n        },\n        \"recordedRepoMappingEntries\": [\n          [\n            \"apple_support~\",\n            \"bazel_tools\",\n            \"bazel_tools\"\n          ]\n        ]\n      }\n    },\n    \"@@platforms//host:extension.bzl%host_platform\": {\n      \"general\": {\n        \"bzlTransitiveDigest\": \"xelQcPZH8+tmuOHVjL9vDxMnnQNMlwj0SlvgoqBkm4U=\",\n        \"usagesDigest\": \"pCYpDQmqMbmiiPI1p2Kd3VLm5T48rRAht5WdW0X2GlA=\",\n        \"recordedFileInputs\": {},\n        \"recordedDirentsInputs\": {},\n        \"envVariables\": {},\n        \"generatedRepoSpecs\": {\n          \"host_platform\": {\n            \"bzlFile\": \"@@platforms//host:extension.bzl\",\n            \"ruleClassName\": \"host_platform_repo\",\n            \"attributes\": {}\n          }\n        },\n        \"recordedRepoMappingEntries\": []\n      }\n    }\n  }\n}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.900390625,
          "content": "# yaml-cpp ![Build Status](https://github.com/jbeder/yaml-cpp/actions/workflows/build.yml/badge.svg) [![Documentation](https://codedocs.xyz/jbeder/yaml-cpp.svg)](https://codedocs.xyz/jbeder/yaml-cpp/)\n\n`yaml-cpp` is a [YAML](http://www.yaml.org/) parser and emitter in C++ matching the [YAML 1.2 spec](http://www.yaml.org/spec/1.2/spec.html).\n\n## Usage\n\nSee [Tutorial](https://github.com/jbeder/yaml-cpp/wiki/Tutorial) and [How to Emit YAML](https://github.com/jbeder/yaml-cpp/wiki/How-To-Emit-YAML) for reference. For the old API (until 0.5.0), see [How To Parse A Document](https://github.com/jbeder/yaml-cpp/wiki/How-To-Parse-A-Document-(Old-API)).\n\n## Any Problems?\n\nIf you find a bug, post an [issue](https://github.com/jbeder/yaml-cpp/issues)! If you have questions about how to use yaml-cpp, please post it on http://stackoverflow.com and tag it [`yaml-cpp`](http://stackoverflow.com/questions/tagged/yaml-cpp).\n\n## How to Build\n\n`yaml-cpp` uses [CMake](http://www.cmake.org) to support cross-platform building. Install [CMake](http://www.cmake.org) _(Resources -> Download)_ before proceeding. The basic steps to build are:\n\n**Note:** If you don't use the provided installer for your platform, make sure that you add `CMake`'s bin folder to your path.\n\n#### 1. Navigate into the source directory, create build folder and run `CMake`:\n\n```sh\nmkdir build\ncd build\ncmake [-G generator] [-DYAML_BUILD_SHARED_LIBS=on|OFF] ..\n```\n\n  * The `generator` option is the build system you'd like to use. Run `cmake` without arguments to see a full list of available generators.\n    * On Windows, you might use \"Visual Studio 12 2013\" (VS 2013 32-bits), or \"Visual Studio 14 2015 Win64\" (VS 2015 64-bits).\n    * On OS X, you might use \"Xcode\".\n    * On a UNIX-like system, omit the option (for a Makefile).\n\n  * `yaml-cpp` builds a static library by default, you may want to build a shared library by specifying `-DYAML_BUILD_SHARED_LIBS=ON`.\n\n  * [Debug mode of the GNU standard C++\n    library](https://gcc.gnu.org/onlinedocs/libstdc++/manual/debug_mode.html)\n    can be used when both `yaml-cpp` and client code is compiled with the\n    `_GLIBCXX_DEBUG` flag (e.g. by calling CMake with `-D\n    CMAKE_CXX_FLAGS_DEBUG='-g -D_GLIBCXX_DEBUG'` option).\n\n    Note that for `yaml-cpp` unit tests to run successfully, the _GoogleTest_\n    library also must be built with this flag, i.e. the system one cannot be\n    used (the _YAML_USE_SYSTEM_GTEST_ CMake option must be _OFF_, which is the\n    default).\n\n  * For more options on customizing the build, see the [CMakeLists.txt](https://github.com/jbeder/yaml-cpp/blob/master/CMakeLists.txt) file.\n\n#### 2. Build it!\n  * The command you'll need to run depends on the generator you chose earlier.\n\n**Note:** To clean up, just remove the `build` directory.\n\n## How to Integrate it within your project using CMake\n\nYou can use for example FetchContent :\n\n```cmake\ninclude(FetchContent)\n\nFetchContent_Declare(\n  yaml-cpp\n  GIT_REPOSITORY https://github.com/jbeder/yaml-cpp.git\n  GIT_TAG <tag_name> # Can be a tag (yaml-cpp-x.x.x), a commit hash, or a branch name (master)\n)\nFetchContent_MakeAvailable(yaml-cpp)\n\ntarget_link_libraries(YOUR_LIBRARY PUBLIC yaml-cpp::yaml-cpp) # The library or executable that require yaml-cpp library\n```\n\n## Recent Releases\n\n[yaml-cpp 0.7.0](https://github.com/jbeder/yaml-cpp/releases/tag/yaml-cpp-0.7.0) released!\n\n[yaml-cpp 0.3.0](https://github.com/jbeder/yaml-cpp/releases/tag/release-0.3.0) is still available if you want the old API.\n\n**The old API will stop receiving bugfixes in 2026.** The 0.3.x versions provide the old API, and 0.5.x and above all provide the new API.\n\n# API Documentation \n\nThe autogenerated API reference is hosted on [CodeDocs](https://codedocs.xyz/jbeder/yaml-cpp/index.html)\n\n# Third Party Integrations\n\nThe following projects are not officially supported:\n\n- [Qt wrapper](https://gist.github.com/brcha/d392b2fe5f1e427cc8a6)\n- [UnrealEngine Wrapper](https://github.com/jwindgassen/UnrealYAML)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.65625,
          "content": "# Security Policy\n\n## Supported Versions\n\nSecurity updates are applied only to the latest release.\n\n## Reporting a Vulnerability\n\nIf you have discovered a security vulnerability in this project, please report it privately. **Do not disclose it as a public issue.** This gives us time to work with you to fix the issue before public exposure, reducing the chance that the exploit will be used before a patch is released.\n\nPlease disclose it at [security advisory](https://github.com/jbeder/yaml-cpp/security/advisories/new).\n\nThis project is maintained by a team of volunteers on a reasonable-effort basis. As such, vulnerabilities will be disclosed in a best effort base.\n"
        },
        {
          "name": "cmake_uninstall.cmake.in",
          "type": "blob",
          "size": 0.83203125,
          "content": "if(NOT EXISTS \"@CMAKE_BINARY_DIR@/install_manifest.txt\")\n  message(FATAL_ERROR \"Cannot find install manifest: @CMAKE_BINARY_DIR@/install_manifest.txt\")\nendif()\n\nfile(READ \"@CMAKE_BINARY_DIR@/install_manifest.txt\" files)\nstring(REGEX REPLACE \"\\n\" \";\" files \"${files}\")\nforeach(file ${files})\n  message(STATUS \"Uninstalling $ENV{DESTDIR}${file}\")\n  if(IS_SYMLINK \"$ENV{DESTDIR}${file}\" OR EXISTS \"$ENV{DESTDIR}${file}\")\n    exec_program(\n      \"@CMAKE_COMMAND@\" ARGS \"-E remove \\\"$ENV{DESTDIR}${file}\\\"\"\n      OUTPUT_VARIABLE rm_out\n      RETURN_VALUE rm_retval\n      )\n    if(NOT \"${rm_retval}\" STREQUAL 0)\n      message(FATAL_ERROR \"Problem when removing $ENV{DESTDIR}${file}\")\n    endif()\n  else(IS_SYMLINK \"$ENV{DESTDIR}${file}\" OR EXISTS \"$ENV{DESTDIR}${file}\")\n    message(STATUS \"File $ENV{DESTDIR}${file} does not exist.\")\n  endif()\nendforeach()\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.txt",
          "type": "blob",
          "size": 0.6376953125,
          "content": "*** With CMake ***\n\nyaml-cpp uses CMake to support cross-platform building. In a UNIX-like system, the basic steps to build are:\n\n1. Download and install CMake (if you don't have root privileges, just install to a local directory, like ~/bin)\n\n2. From the source directory, run:\n\nmkdir build\ncd build\ncmake ..\n\nand then the usual\n\nmake\nmake install\n\n3. To clean up, just remove the 'build' directory.\n\n*** Without CMake ***\n\nIf you don't want to use CMake, just add all .cpp files to a makefile. yaml-cpp does not need any special build settings, so no 'configure' file is necessary.\n\n(Note: this is pretty tedious. It's sooo much easier to use CMake.)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        },
        {
          "name": "yaml-cpp-config.cmake.in",
          "type": "blob",
          "size": 1.3173828125,
          "content": "# - Config file for the yaml-cpp package\n# It defines the following variables\n#  YAML_CPP_INCLUDE_DIR       - include directory\n#  YAML_CPP_LIBRARY_DIR       - directory containing libraries\n#  YAML_CPP_SHARED_LIBS_BUILT - whether we have built shared libraries or not\n#  YAML_CPP_LIBRARIES         - libraries to link against\n\n@PACKAGE_INIT@\n\nset_and_check(YAML_CPP_INCLUDE_DIR \"@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@\")\nset_and_check(YAML_CPP_LIBRARY_DIR \"@PACKAGE_CMAKE_INSTALL_LIBDIR@\")\n\n# Are we building shared libraries?\nset(YAML_CPP_SHARED_LIBS_BUILT @YAML_BUILD_SHARED_LIBS@)\n\n# Our library dependencies (contains definitions for IMPORTED targets)\ninclude(\"${CMAKE_CURRENT_LIST_DIR}/yaml-cpp-targets.cmake\")\n\n# These are IMPORTED targets created by yaml-cpp-targets.cmake\nset(YAML_CPP_LIBRARIES \"@EXPORT_TARGETS@\")\n\n# Protect against multiple inclusion, which would fail when already imported targets are added once more.\nif(NOT TARGET yaml-cpp)\n  add_library(yaml-cpp INTERFACE IMPORTED) \n  target_link_libraries(yaml-cpp INTERFACE yaml-cpp::yaml-cpp) \n  if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.17)\n    set_target_properties(yaml-cpp PROPERTIES \n      DEPRECATION \"The target yaml-cpp is deprecated and will be removed in version 0.10.0. Use the yaml-cpp::yaml-cpp target instead.\"\n    )\n  endif()\nendif()\n\ncheck_required_components(yaml-cpp)\n"
        },
        {
          "name": "yaml-cpp.pc.in",
          "type": "blob",
          "size": 0.27734375,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nexec_prefix=${prefix}\nincludedir=@CMAKE_INSTALL_FULL_INCLUDEDIR@\nlibdir=@CMAKE_INSTALL_FULL_LIBDIR@\n\nName: Yaml-cpp\nDescription: A YAML parser and emitter for C++\nVersion: @YAML_CPP_VERSION@\nRequires:\nLibs: -L${libdir} -lyaml-cpp\nCflags: -I${includedir}\n"
        }
      ]
    }
  ]
}