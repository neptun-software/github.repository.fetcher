{
  "metadata": {
    "timestamp": 1736566243590,
    "page": 258,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Neargye/magic_enum",
      "stars": 5102,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bazelignore",
          "type": "blob",
          "size": 0.02734375,
          "content": ".git\n.github\ntest\ndoc\ncmake\n"
        },
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 0.1962890625,
          "content": "common --enable_bzlmod\nbuild --enable_platform_specific_config\nbuild --enable_runfiles\nbuild --incompatible_strict_action_env\n\ncommon:ci --announce_rc\ntest:ci --test_output=errors\nbuild:ci --curses=no\n"
        },
        {
          "name": ".bazelversion",
          "type": "blob",
          "size": 0.005859375,
          "content": "6.3.2\n"
        },
        {
          "name": ".cmake-format",
          "type": "blob",
          "size": 1.193359375,
          "content": "format:\n  tab_size: 2\n  line_width: 100\n  dangle_parens: true\n\nparse:\n  additional_commands:\n    cpmaddpackage:\n      pargs:\n        nargs: '*'\n        flags: []\n      spelling: CPMAddPackage\n      kwargs: &cpmaddpackagekwargs\n        NAME: 1\n        FORCE: 1\n        VERSION: 1\n        GIT_TAG: 1\n        DOWNLOAD_ONLY: 1\n        GITHUB_REPOSITORY: 1\n        GITLAB_REPOSITORY: 1\n        GIT_REPOSITORY: 1\n        SVN_REPOSITORY: 1\n        SVN_REVISION: 1\n        SOURCE_DIR: 1\n        DOWNLOAD_COMMAND: 1\n        FIND_PACKAGE_ARGUMENTS: 1\n        NO_CACHE: 1\n        GIT_SHALLOW: 1\n        URL: 1\n        URL_HASH: 1\n        URL_MD5: 1\n        DOWNLOAD_NAME: 1\n        DOWNLOAD_NO_EXTRACT: 1\n        HTTP_USERNAME: 1\n        HTTP_PASSWORD: 1\n        OPTIONS: +\n    cpmfindpackage:\n      pargs:\n        nargs: '*'\n        flags: []\n      spelling: CPMFindPackage\n      kwargs: *cpmaddpackagekwargs\n    packageproject:\n      pargs:\n        nargs: '*'\n        flags: []\n      spelling: packageProject\n      kwargs:\n        NAME: 1\n        VERSION: 1\n        NAMESPACE: 1\n        INCLUDE_DIR: 1\n        INCLUDE_DESTINATION: 1\n        BINARY_DIR: 1\n        COMPATIBILITY: 1\n        VERSION_HEADER: 1\n        DEPENDENCIES: +\n\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.08984375,
          "content": "build*/\n.cache/\n.git/\n.github/\ncompile_commands.json\n.dockerignore\nDockerfile\ninstall_dir/\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.572265625,
          "content": "build*/\ncmake_build*/\ninstall_dir/\n.vscode/\n.vs/\n\n### C++ gitignore ###\n# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n### CMake gitignore ###\nCMakeLists.txt.user\nCMakeCache.txt\nCMakeFiles\nCMakeScripts\nTesting\nMakefile\ncmake_install.cmake\ninstall_manifest.txt\ncompile_commands.json\nCTestTestfile.cmake\n_deps\n\n### Bazel build artifacts ###\n/bazel-*\n/test/bazel-*\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 0.2138671875,
          "content": "licenses([\"notice\"])\n\nexports_files([\"LICENSE\"])\n\npackage(default_visibility = [\"//visibility:public\"])\n\ncc_library(\n    name = \"magic_enum\",\n    hdrs = glob([\"include/magic_enum/*.hpp\"]),\n    includes = [\"include\"],\n)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 5.1005859375,
          "content": "cmake_minimum_required(VERSION 3.14)\n\nproject(\n  magic_enum\n  VERSION \"0.9.7\"\n  HOMEPAGE_URL \"https://github.com/Neargye/magic_enum\"\n  DESCRIPTION\n    \"A library that provides static reflection for enums, work with any enum type without any macro or boilerplate code.\"\n  LANGUAGES CXX\n)\nset(CPACK_PACKAGE_VENDOR \"Daniil Goncharov\")\n\ninclude(GNUInstallDirs)\n\nset(ADDITIONAL_MODULES_DIR \"${CMAKE_CURRENT_LIST_DIR}/cmake\")\nlist(APPEND CMAKE_MODULE_PATH \"${ADDITIONAL_MODULES_DIR}\")\n\nif(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)\n  set(IS_TOPLEVEL_PROJECT TRUE)\nelse()\n  set(IS_TOPLEVEL_PROJECT FALSE)\nendif()\n\noption(MAGIC_ENUM_OPT_BUILD_EXAMPLES \"Build magic_enum examples\" ${IS_TOPLEVEL_PROJECT})\noption(MAGIC_ENUM_OPT_BUILD_TESTS \"Build and perform magic_enum tests\" ${IS_TOPLEVEL_PROJECT})\noption(MAGIC_ENUM_OPT_INSTALL \"Generate and install magic_enum target\" ${IS_TOPLEVEL_PROJECT})\noption(MAGIC_ENUM_OPT_INSTALL_PACKAGE_XML \"Include package.xml when installing\"\n       ${MAGIC_ENUM_OPT_INSTALL}\n)\noption(MAGIC_ENUM_OPT_TEST_INSTALLED_VERSION \"When configuring tests, try use\na local magic_enum.\" NO\n)\noption(MAGIC_ENUM_OPT_TEST_INSTALLED_VERSION_PKGCONFIG \"When configuring tests, try use\na local magic_enum via pkgconfig\" NO\n)\n\nif(${MAGIC_ENUM_OPT_TEST_INSTALLED_VERSION} OR ${MAGIC_ENUM_OPT_TEST_INSTALLED_VERSION_PKGCONFIG})\n  add_subdirectory(test)\n  return()\nendif()\n\nset(INCLUDES \"${CMAKE_CURRENT_SOURCE_DIR}/include/magic_enum\")\nset(EXPORT_NAMESPACE \"${PROJECT_NAME}::\")\n\nadd_library(${PROJECT_NAME} INTERFACE)\nadd_library(${EXPORT_NAMESPACE}${PROJECT_NAME} ALIAS ${PROJECT_NAME})\ntarget_include_directories(\n  ${PROJECT_NAME} INTERFACE $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>\n  $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\n)\n\nif(MAGIC_ENUM_OPT_BUILD_EXAMPLES)\n  add_subdirectory(example)\nendif()\n\nif(MAGIC_ENUM_OPT_BUILD_TESTS)\n  enable_testing()\n  add_subdirectory(test)\nendif()\n\nif(MAGIC_ENUM_OPT_INSTALL)\n  list(APPEND CMAKE_MODULE_PATH \"${ADDITIONAL_MODULES_DIR}/GenPkgConfig\")\n  include(GenPkgConfig)\n  include(CPackComponent)\n  include(CMakePackageConfigHelpers)\n\n  install(\n    TARGETS \"${PROJECT_NAME}\"\n    EXPORT ${PROJECT_NAME}\n    INCLUDES\n    DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\"\n    # COMPONENT \"${SDK_COMPONENT_NAME}\" # component is not allowed for\n    # includes!\n    # Headers are installed separately! Includes only marks the headers for\n    # export\n  )\n\n  if(NOT DEFINED PROJECT_INCLUDE_HEADER_PATTERN)\n    set(PROJECT_INCLUDE_HEADER_PATTERN \"*\")\n  endif()\n\n  install(\n    DIRECTORY ${PROJECT_SOURCE_DIR}/include/${PROJECT_NAME}\n    DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\"\n    FILES_MATCHING\n    PATTERN \"${PROJECT_INCLUDE_HEADER_PATTERN}\"\n  )\n\n  set(CPACK_PACKAGE_NAME \"${PROJECT_NAME}\")\n  set(CPACK_PACKAGE_DESCRIPTION \"${PROJECT_DESCRIPTION}\")\n  set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE \"all\")\n  set(CPACK_DEBIAN_PACKAGE_NAME \"libmagicenum-dev\")\n  set(CPACK_RPM_PACKAGE_NAME \"libmagicenum-devel\")\n  set(CPACK_PACKAGE_HOMEPAGE_URL \"${PROJECT_HOMEPAGE_URL}\")\n  set(CPACK_PACKAGE_MAINTAINER \"${CPACK_PACKAGE_VENDOR}\")\n  set(CPACK_DEBIAN_PACKAGE_DEPENDS \"\")\n  set(CPACK_DEBIAN_PACKAGE_MAINTAINER \"${CPACK_PACKAGE_MAINTAINER}\")\n  set(CPACK_PACKAGE_MAINTAINER \"${CPACK_PACKAGE_VENDOR}\")\n  set(CPACK_DEB_COMPONENT_INSTALL ON)\n  set(CPACK_RPM_COMPONENT_INSTALL ON)\n  set(CPACK_NSIS_COMPONENT_INSTALL ON)\n  set(CPACK_DEBIAN_COMPRESSION_TYPE \"xz\")\n\n  set(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE\")\n  set(CPACK_RESOURCE_FILE_README \"${CMAKE_CURRENT_SOURCE_DIR}/README.md\")\n\n  set(CMAKE_CONFIG_FILE_BASENAME \"${PROJECT_NAME}Config.cmake\")\n  set(CMAKE_EXPORT_FILE_BASENAME \"${PROJECT_NAME}Export.cmake\")\n  set(CMAKE_CONFIG_VERSION_FILE_BASENAME \"${PROJECT_NAME}ConfigVersion.cmake\")\n  set(CMAKE_CONFIG_VERSION_FILE_NAME\n      \"${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CONFIG_VERSION_FILE_BASENAME}\"\n  )\n\n  export(\n    TARGETS \"${PROJECT_NAME}\"\n    NAMESPACE \"${EXPORT_NAMESPACE}\"\n    FILE \"${CMAKE_EXPORT_FILE_BASENAME}\"\n    EXPORT_LINK_INTERFACE_LIBRARIES\n  )\n\n  install(\n    EXPORT \"${PROJECT_NAME}\"\n    FILE \"${CMAKE_CONFIG_FILE_BASENAME}\"\n    NAMESPACE \"${EXPORT_NAMESPACE}\"\n    DESTINATION \"${CMAKE_INSTALL_DATAROOTDIR}/cmake/${PROJECT_NAME}\"\n  )\n\n  write_basic_package_version_file(\n    \"${CMAKE_CONFIG_VERSION_FILE_NAME}\"\n    # VERSION \"100500.100500.100500\"  # any version of same bitness suits. CMake cannot compare to\n    # infinity, so use a large number we expect to be greater than any future version\n    VERSION ${_VERSION}\n    COMPATIBILITY AnyNewerVersion ARCH_INDEPENDENT\n  )\n  install(FILES \"${CMAKE_CONFIG_VERSION_FILE_NAME}\"\n          DESTINATION \"${CMAKE_INSTALL_DATAROOTDIR}/cmake/${PROJECT_NAME}\"\n  )\n\n  configure_pkg_config_file(\n    \"${PROJECT_NAME}\"\n    NAME\n    \"${PROJECT_NAME}\"\n    VERSION\n    \"${PROJECT_VERSION}\"\n    DESCRIPTION\n    \"${CPACK_PACKAGE_DESCRIPTION}\"\n    URL\n    \"${CPACK_PACKAGE_HOMEPAGE_URL}\"\n    INSTALL_LIB_DIR\n    \"${CMAKE_INSTALL_DATAROOTDIR}\"\n    INSTALL_INCLUDE_DIR\n    \"${CMAKE_INSTALL_INCLUDEDIR}\"\n  )\n\n  if(MAGIC_ENUM_OPT_INSTALL_PACKAGE_XML)\n    install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/package.xml\n            DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}\n    )\n  endif()\n\n  include(CPack)\nendif()\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 2.28125,
          "content": "FROM gentoo/stage3:latest\n\nRUN echo \"Updating Gentoo index registry...\"\nRUN emerge-webrsync\n\n\nRUN echo \"Setting up package manager\"\n# Allow emerge newer versions of cmake. We need it because vcpkg wants it.\nRUN echo \"dev-build/cmake ~amd64\" >> /etc/portage/package.accept_keywords/unmask\n# # Get some packages as binaries and don't compile them. Actually, it allows to not compile only zip :(\n# RUN rm -rf /etc/portage/binrepos.conf/*\n# RUN echo -e \"[binhost]\\npriority = 9999\\nsync-uri = https://gentoo.osuosl.org/experimental/amd64/binpkg/default/linux/17.1/x86-64/\" >> /etc/portage/binrepos.conf/osuosl.conf\n# RUN cat /etc/portage/binrepos.conf/*\n# Arguments that going to be added automatically to `emerge` command. `man emerge` in help. Or read https://wiki.gentoo.org/wiki/Binary_package_guide/en#Installing_binary_packages .\n# RUN echo 'EMERGE_DEFAULT_OPTS=\"${EMERGE_DEFAULT_OPTS} --binpkg-respect-use=y --getbinpkg=y --verbose --verbose-conflicts \"' >> /etc/portage/make.conf\n\nRUN echo \"Installing dependencies...\"\n\nRUN emerge --quiet --verbose --tree --verbose-conflicts --jobs=2 dev-vcs/git dev-build/cmake zip\n\n# RUN echo \"Installing vcpkg...\"\n# RUN git clone https://github.com/Microsoft/vcpkg.git && \\\n# \t\t./vcpkg/bootstrap-vcpkg.sh -disableMetrics \n#\n# COPY ./vcpkg.json ./vcpkg.json\n#\n# RUN echo \"Installing dependencies using vcpkg\"\n# RUN ./vcpkg/vcpkg install\n\nWORKDIR /backend\n\nRUN echo \"Copy sources of the project\"\nCOPY . .\nRUN ls -lah\n\n# expected to be mounted at runtime as volume.\n# COPY resources/ ./resources/ \n\n\nRUN echo \"Configuring project...\"\nRUN cmake -S ./ -B ./build --log-level DEBUG\n\n\n# RUN echo \"Building project...\"\n# RUN cmake --build ./build --parallel $(nproc) --verbose\n\nRUN echo \"really installing\"\nRUN cmake --install ./build\n\nRUN echo \"checking cmake-cmake\"\nRUN cmake -S. -B build2 -DMAGIC_ENUM_OPT_TEST_INSTALLED_VERSION=1 --log-level=DEBUG\nRUN cmake --build build2 -j $(nproc) --verbose\n\nRUN echo \"checking pkgconfig-cmake\"\nRUN cat \"/usr/local/share/pkgconfig/magic_enum.pc\"\nRUN cmake -S. -B build3 -DMAGIC_ENUM_OPT_TEST_INSTALLED_VERSION_PKGCONFIG=1 --log-level=DEBUG\nRUN cmake --build build3 -j $(nproc) --verbose\n\n\n\n# RUN echo \"what's with linking?\"\n# RUN ls -lahR /usr/local/lib64  \n# RUN lddtree /usr/local/lib64/libArby.so\n# RUN lddtree /usr/local/bin/Arby\n\n# CMD ./build/Backend\n\n\n\n\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "MIT License\n\nCopyright (c) 2019 - 2024 Daniil Goncharov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 0.0849609375,
          "content": "module(\n    name = \"magic_enum\",\n    version = \"0.9.7\",\n    compatibility_level = 0,\n)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.216796875,
          "content": "[![Github releases](https://img.shields.io/github/release/Neargye/magic_enum.svg)](https://github.com/Neargye/magic_enum/releases)\n[![Conan package](https://img.shields.io/badge/Conan-package-blueviolet)](https://conan.io/center/recipes/magic_enum)\n[![Vcpkg package](https://img.shields.io/badge/Vcpkg-package-blueviolet)](https://github.com/microsoft/vcpkg/tree/master/ports/magic-enum)\n[![Build2 package](https://img.shields.io/badge/Build2-package-blueviolet)](https://www.cppget.org/magic_enum?q=magic_enum)\n[![Meson wrap](https://img.shields.io/badge/Meson-wrap-blueviolet)](https://github.com/mesonbuild/wrapdb/blob/master/subprojects/magic_enum.wrap)\n[![License](https://img.shields.io/github/license/Neargye/magic_enum.svg)](LICENSE)\n[![Compiler explorer](https://img.shields.io/badge/compiler_explorer-online-blue.svg)](https://godbolt.org/z/feqcPa5G6)\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/Neargye/magic_enum/badge)](https://securityscorecards.dev/viewer/?uri=github.com/Neargye/magic_enum)\n[![Stand With Ukraine](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/badges/StandWithUkraine.svg)](https://stand-with-ukraine.pp.ua)\n\n# Magic Enum C++\n\nHeader-only C++17 library provides static reflection for enums, work with any enum type without any macro or boilerplate code.\n\nIf you like this project, please consider donating to one of the funds that help victims of the war in Ukraine: https://u24.gov.ua.\n\n## Documentation\n\n* [Reference](doc/reference.md)\n* [Limitations](doc/limitations.md)\n* [Integration](#Integration)\n\n## [Features & Examples](example/)\n\n* Basic\n\n  ```cpp\n  #include <magic_enum/magic_enum.hpp>\n  #include <iostream>\n\n  enum class Color : { RED = -10, BLUE = 0, GREEN = 10 };\n\n  int main() {\n    Color c1 = Color::RED;\n    std::cout << magic_enum::enum_name(c1) << std::endl; // RED\n    return 0;\n  }\n  ```\n\n* Enum value to string\n\n  ```cpp\n  Color color = Color::RED;\n  auto color_name = magic_enum::enum_name(color);\n  // color_name -> \"RED\"\n  ```\n\n* String to enum value\n\n  ```cpp\n  std::string color_name{\"GREEN\"};\n  auto color = magic_enum::enum_cast<Color>(color_name);\n  if (color.has_value()) {\n    // color.value() -> Color::GREEN\n  }\n\n  // case insensitive enum_cast\n  auto color = magic_enum::enum_cast<Color>(value, magic_enum::case_insensitive);\n\n  // enum_cast with BinaryPredicate\n  auto color = magic_enum::enum_cast<Color>(value, [](char lhs, char rhs) { return std::tolower(lhs) == std::tolower(rhs); }\n\n  // enum_cast with default\n  auto color_or_default = magic_enum::enum_cast<Color>(value).value_or(Color::NONE);\n  ```\n\n* Integer to enum value\n\n  ```cpp\n  int color_integer = 2;\n  auto color = magic_enum::enum_cast<Color>(color_integer);\n  if (color.has_value()) {\n    // color.value() -> Color::BLUE\n  }\n\n  auto color_or_default = magic_enum::enum_cast<Color>(value).value_or(Color::NONE);\n  ```\n\n* Indexed access to enum value\n\n  ```cpp\n  std::size_t i = 0;\n  Color color = magic_enum::enum_value<Color>(i);\n  // color -> Color::RED\n  ```\n\n* Enum value sequence\n\n  ```cpp\n  constexpr auto colors = magic_enum::enum_values<Color>();\n  // colors -> {Color::RED, Color::BLUE, Color::GREEN}\n  // colors[0] -> Color::RED\n  ```\n\n* Number of enum elements\n\n  ```cpp\n  constexpr std::size_t color_count = magic_enum::enum_count<Color>();\n  // color_count -> 3\n  ```\n\n* Enum value to integer\n\n  ```cpp\n  Color color = Color::RED;\n  auto color_integer = magic_enum::enum_integer(color); // or magic_enum::enum_underlying(color);\n  // color_integer -> 1\n  ```\n\n* Enum names sequence\n\n  ```cpp\n  constexpr auto color_names = magic_enum::enum_names<Color>();\n  // color_names -> {\"RED\", \"BLUE\", \"GREEN\"}\n  // color_names[0] -> \"RED\"\n  ```\n\n* Enum entries sequence\n\n  ```cpp\n  constexpr auto color_entries = magic_enum::enum_entries<Color>();\n  // color_entries -> {{Color::RED, \"RED\"}, {Color::BLUE, \"BLUE\"}, {Color::GREEN, \"GREEN\"}}\n  // color_entries[0].first -> Color::RED\n  // color_entries[0].second -> \"RED\"\n  ```\n\n* Enum fusion for multi-level switch/case statements\n\n  ```cpp\n  switch (magic_enum::enum_fuse(color, direction).value()) {\n    case magic_enum::enum_fuse(Color::RED, Directions::Up).value(): // ...\n    case magic_enum::enum_fuse(Color::BLUE, Directions::Down).value(): // ...\n  // ...\n  }\n  ```\n\n* Enum switch runtime value as constexpr constant\n  ```cpp\n  Color color = Color::RED;\n  magic_enum::enum_switch([] (auto val) {\n    constexpr Color c_color = val;\n    // ...\n  }, color);\n  ```\n\n* Enum iterate for each enum as constexpr constant\n  ```cpp\n  magic_enum::enum_for_each<Color>([] (auto val) {\n    constexpr Color c_color = val;\n    // ...\n  });\n  ```\n\n* Check if enum contains\n\n  ```cpp\n  magic_enum::enum_contains(Color::GREEN); // -> true\n  magic_enum::enum_contains<Color>(2); // -> true\n  magic_enum::enum_contains<Color>(123); // -> false\n  magic_enum::enum_contains<Color>(\"GREEN\"); // -> true\n  magic_enum::enum_contains<Color>(\"fda\"); // -> false\n  ```\n\n* Enum index in sequence\n\n  ```cpp\n  constexpr auto color_index = magic_enum::enum_index(Color::BLUE);\n  // color_index.value() -> 1\n  // color_index.has_value() -> true\n  ```\n\n* Functions for flags\n\n  ```cpp\n  enum Directions : std::uint64_t {\n    Left = 1,\n    Down = 2,\n    Up = 4,\n    Right = 8,\n  };\n  template <>\n  struct magic_enum::customize::enum_range<Directions> {\n    static constexpr bool is_flags = true;\n  };\n\n  magic_enum::enum_flags_name(Directions::Up | Directions::Right); // -> \"Directions::Up|Directions::Right\"\n  magic_enum::enum_flags_contains(Directions::Up | Directions::Right); // -> true\n  magic_enum::enum_flags_cast(3); // -> \"Directions::Left|Directions::Down\"\n  ```\n\n* Enum type name\n\n  ```cpp\n  Color color = Color::RED;\n  auto type_name = magic_enum::enum_type_name<decltype(color)>();\n  // type_name -> \"Color\"\n  ```\n\n* IOstream operator for enum\n\n  ```cpp\n  using magic_enum::iostream_operators::operator<<; // out-of-the-box ostream operators for enums.\n  Color color = Color::BLUE;\n  std::cout << color << std::endl; // \"BLUE\"\n  ```\n\n  ```cpp\n  using magic_enum::iostream_operators::operator>>; // out-of-the-box istream operators for enums.\n  Color color;\n  std::cin >> color;\n  ```\n\n* Bitwise operator for enum\n\n  ```cpp\n  enum class Flags { A = 1 << 0, B = 1 << 1, C = 1 << 2, D = 1 << 3 };\n  using namespace magic_enum::bitwise_operators; // out-of-the-box bitwise operators for enums.\n  // Support operators: ~, |, &, ^, |=, &=, ^=.\n  Flags flags = Flags::A | Flags::B & ~Flags::C;\n  ```\n\n* Checks whether type is an [Unscoped enumeration](https://en.cppreference.com/w/cpp/language/enum#Unscoped_enumeration).\n\n  ```cpp\n  enum color { red, green, blue };\n  enum class direction { left, right };\n\n  magic_enum::is_unscoped_enum<color>::value -> true\n  magic_enum::is_unscoped_enum<direction>::value -> false\n  magic_enum::is_unscoped_enum<int>::value -> false\n\n  // Helper variable template.\n  magic_enum::is_unscoped_enum_v<color> -> true\n  ```\n\n* Checks whether type is an [Scoped enumeration](https://en.cppreference.com/w/cpp/language/enum#Scoped_enumerations).\n\n  ```cpp\n  enum color { red, green, blue };\n  enum class direction { left, right };\n\n  magic_enum::is_scoped_enum<color>::value -> false\n  magic_enum::is_scoped_enum<direction>::value -> true\n  magic_enum::is_scoped_enum<int>::value -> false\n\n  // Helper variable template.\n  magic_enum::is_scoped_enum_v<direction> -> true\n  ```\n\n* Static storage enum variable to string\n  This version is much lighter on the compile times and is not restricted to the enum_range [limitation](doc/limitations.md).\n\n  ```cpp\n  constexpr Color color = Color::BLUE;\n  constexpr auto color_name = magic_enum::enum_name<color>();\n  // color_name -> \"BLUE\"\n  ```\n\n* `containers::array` array container for enums.\n\n  ```cpp\n  magic_enum::containers::array<Color, RGB> color_rgb_array {};\n  color_rgb_array[Color::RED] = {255, 0, 0};\n  color_rgb_array[Color::GREEN] = {0, 255, 0};\n  color_rgb_array[Color::BLUE] = {0, 0, 255};\n  magic_enum::containers::get<Color::BLUE>(color_rgb_array) // -> RGB{0, 0, 255}\n  ```\n\n* `containers::bitset` bitset container for enums.\n\n  ```cpp\n  constexpr magic_enum::containers::bitset<Color> color_bitset_red_green {Color::RED|Color::GREEN};\n  bool all = color_bitset_red_green.all();\n  // all -> false\n  // Color::BLUE is missing\n  bool test = color_bitset_red_green.test(Color::RED);\n  // test -> true\n  ```\n\n* `containers::set` set container for enums.\n\n  ```cpp\n  auto color_set = magic_enum::containers::set<Color>();\n  bool empty = color_set.empty();\n  // empty -> true\n  color_set.insert(Color::GREEN);\n  color_set.insert(Color::BLUE);\n  color_set.insert(Color::RED);\n  std::size_t size = color_set.size();\n  // size -> 3\n  ```\n\n* Improved UB-free \"SFINAE-friendly\" [underlying_type](https://en.cppreference.com/w/cpp/types/underlying_type).\n\n  ```cpp\n  magic_enum::underlying_type<color>::type -> int\n\n  // Helper types.\n  magic_enum::underlying_type_t<Direction> -> int\n  ```\n## Remarks\n\n* `magic_enum` does not pretend to be a silver bullet for reflection for enums, it was originally designed for small enum.\n\n* Before use, read the [limitations](doc/limitations.md) of functionality.\n\n## Integration\n\n* You should add the required file [magic_enum.hpp](include/magic_enum/magic_enum.hpp), and optionally other headers from [include dir](include/) or [release archive](https://github.com/Neargye/magic_enum/releases/latest). Alternatively, you can build the library with CMake.\n\n* If you are using [vcpkg](https://github.com/Microsoft/vcpkg/) on your project for external dependencies, then you can use the [magic-enum package](https://github.com/microsoft/vcpkg/tree/master/ports/magic-enum).\n\n* If you are using [Conan](https://www.conan.io/) to manage your dependencies, merely add `magic_enum/x.y.z` to your conan's requires, where `x.y.z` is the release version you want to use.\n\n* If you are using [Build2](https://build2.org/) to build and manage your dependencies, add `depends: magic_enum ^x.y.z` to the manifest file where `x.y.z` is the release version you want to use. You can then import the target using `magic_enum%lib{magic_enum}`.\n\n* Alternatively, you can use something like [CPM](https://github.com/TheLartians/CPM) which is based on CMake's `Fetch_Content` module.\n\n  ```cmake\n  CPMAddPackage(\n      NAME magic_enum\n      GITHUB_REPOSITORY Neargye/magic_enum\n      GIT_TAG x.y.z # Where `x.y.z` is the release version you want to use.\n  )\n  ```\n\n* Bazel is also supported, simply add to your WORKSPACE file:\n\n  ```\n  http_archive(\n      name = \"magic_enum\",\n      strip_prefix = \"magic_enum-<commit>\",\n      urls = [\"https://github.com/Neargye/magic_enum/archive/<commit>.zip\"],\n  )\n  ```\n\n  To use bazel inside the repository it's possible to do:\n\n  ```\n  bazel build //...\n  bazel test //...\n  bazel run //example\n  ```\n\n  (Note that you must use a supported compiler or specify it with `export CC= <compiler>`.)\n\n* If you are using [Ros](https://www.ros.org/), you can include this package by adding `<depend>magic_enum</depend>` to your package.xml and include this package in your workspace. In your CMakeLists.txt add the following:\n  ```cmake\n  find_package(magic_enum CONFIG REQUIRED)\n  ...\n  target_link_libraries(your_executable magic_enum::magic_enum)\n  ```\n\n## Compiler compatibility\n\n* Clang/LLVM >= 5\n* MSVC++ >= 14.11 / Visual Studio >= 2017\n* Xcode >= 10\n* GCC >= 9\n* MinGW >= 9\n\n## Licensed under the [MIT License](LICENSE)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.6591796875,
          "content": "# Security Policy\n\n## Supported Versions\n\nSecurity updates are applied only to the latest release.\n\n## Reporting a Vulnerability\n\nIf you have discovered a security vulnerability in this project, please report it privately. **Do not disclose it as a public issue.** This gives us time to work with you to fix the issue before public exposure, reducing the chance that the exploit will be used before a patch is released.\n\nPlease disclose it at [security advisory](https://github.com/Neargye/magic_enum/security/advisories/new).\n\nThis project is maintained by a team of volunteers on a reasonable-effort basis. As such, vulnerabilities will be disclosed in a best effort base.\n"
        },
        {
          "name": "WORKSPACE.bazel",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 0.7958984375,
          "content": "project(\n    'magic_enum', ['cpp'],\n    default_options: ['cpp_std=c++17'],\n    version: '0.9.7',\n)\n\nmagic_enum_include = include_directories('include')\n\nmagic_enum_args = []\n\nif get_option('hash')\n    magic_enum_args += '-DMAGIC_ENUM_ENABLE_HASH'\nendif\n\nmagic_enum_dep = declare_dependency(\n    include_directories: magic_enum_include,\n    compile_args: magic_enum_args,\n)\n\n# install header and pkg-config file\ninstall_subdir('include/magic_enum', install_dir: get_option('includedir'))\npkg = import('pkgconfig')\npkg.generate(\n  name: 'magic_enum',\n  description: 'A library that provides static reflection for enums, work with any enum type without any macro or boilerplate code.',\n  url: 'https://github.com/Neargye/magic_enum',\n  extra_cflags: magic_enum_args,\n)\n\nif get_option('test')\n    subdir('test')\nendif\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 0.25,
          "content": "option(\n    'test',\n    type : 'boolean',\n    value : true,\n    description : 'Build and run tests'\n)\n\noption(\n    'hash',\n    type : 'boolean',\n    value : false,\n    description : 'Do hashing at build time - longer build times, but O(1) string lookup'\n)\n"
        },
        {
          "name": "module",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.xml",
          "type": "blob",
          "size": 0.7099609375,
          "content": "<?xml version=\"1.0\"?>\n<?xml-model href=\"http://download.ros.org/schema/package_format2.xsd\" schematypens=\"http://www.w3.org/2001/XMLSchema\"?>\n\n<!-- A package.xml in the root of a cmake projects allows it to be built using catkin or colcon (the ROS build system) -->\n\n<package format=\"2\">\n  <name>magic_enum</name>\n  <version>0.9.7</version>\n  <description>\n    Static reflection for enums (to string, from string, iteration) for modern C++,\n    work with any enum type without any macro or boilerplate code\n  </description>\n\n  <maintainer email=\"neargye@gmail.com\">Neargye</maintainer>\n  <license>MIT</license>\n\n  <buildtool_depend>cmake</buildtool_depend>\n\n  <export>\n    <build_type>cmake</build_type>\n  </export>\n</package>\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_installed_version.bash",
          "type": "blob",
          "size": 0.6025390625,
          "content": "#!/bin/bash\nrm -rf ./build\nrm -rf ./build2\nrm -rf ./build3\nrm -rf ./install_dir/\ncmake -S . -B ./build -DCMAKE_BUILD_TYPE=Release --log-level=DEBUG -DCMAKE_INSTALL_PREFIX=install_dir\ncmake --build ./build -j$(nproc)\ncmake --install ./build/ --prefix ./install_dir\nCMAKE_PREFIX_PATH=\"./install_dir\" cmake -S. -Bbuild2 -DMAGIC_ENUM_OPT_TEST_INSTALLED_VERSION=1 --log-level=DEBUG\ncmake --build build2 --config Debug -j$(nproc) --verbose \nCMAKE_PREFIX_PATH=\"./install_dir\" cmake -S. -Bbuild3 -DMAGIC_ENUM_OPT_TEST_INSTALLED_VERSION_PKGCONFIG=1 --log-level=DEBUG\ncmake --build build3 --config Debug -j$(nproc) --verbose \n\n"
        }
      ]
    }
  ]
}