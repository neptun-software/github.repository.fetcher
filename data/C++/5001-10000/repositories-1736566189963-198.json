{
  "metadata": {
    "timestamp": 1736566189963,
    "page": 198,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "firebase/firebase-ios-sdk",
      "stars": 5867,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".allstar",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.2578125,
          "content": "BasedOnStyle: Google\nColumnLimit: 100\nBinPackParameters: false\nAllowAllParametersOfDeclarationOnNextLine: true\nObjCSpaceBeforeProtocolList: true\nSpacesInContainerLiterals: true\nPointerAlignment: Right\nAllowShortFunctionsOnASingleLine: None\nIncludeBlocks: Preserve\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.568359375,
          "content": "# See https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties\n# for all available properties.\n\n# Top-most EditorConfig file for the firebase-ios-sdk repo.\nroot = true\n\n# Defaults for all files\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n# ObjC and Swift files\n# See https://developer.apple.com/documentation/xcode-release-notes/xcode-16-release-notes#New-Features-in-Xcode-16-Beta\n# for the subset of properties supported by Xcode.\n[*.{h,m,mm,swift}]\nindent_style = space\nindent_size = 2\nmax_line_length = 100\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.466796875,
          "content": "FirebaseAuth/Tests/SampleSwift/AuthenticationExample/SwiftApplication.plist\nFirebaseAuth/Tests/SampleSwift/ObjCApiTests/AuthCredentials.h\nFirebaseAuth/Tests/SampleSwift/GoogleService-Info_multi.plist\nFirebaseAuth/Tests/SampleSwift/GoogleService-Info.plist\nFirebaseAuth/Tests/SampleSwift/Sample.entitlements\nFirebaseAuth/Tests/SampleSwift/SwiftApiTests/Credentials.swift\n\nFirebaseDatabase/Tests/Resources/GoogleService-Info.plist\n\nFirebaseRemoteConfig/Tests/Sample/GoogleService-Info.plist\nFirebaseRemoteConfigSwift/Apps/SwiftUISample/SwiftUISample/GoogleService-Info.plist\n\n# Firebase Sessions test app and integration tests GoogleService-Info.plist\nFirebaseSessions/**/GoogleService-Info.plist\n\n# FirebaseStorage integration tests GoogleService-Info.plist\nFirebaseStorage/Tests/Integration/Resources/GoogleService-Info.plist\n\n# FirebaseInstallations integration tests GoogleService-Info.plist\nFirebaseInstallations/Source/Tests/Resources/GoogleService-Info.plist\n\n# FirebaseMessaging integration tests GoogleService-Info.plist\nFirebaseMessaging/Tests/IntegrationTests/Resources/GoogleService-Info.plist\n# FirebaseMessaging test app GoogleService-Info.plist\nFirebaseMessaging/Apps/Shared/GoogleService-Info.plist\nFirebaseMessaging/Apps/AdvancedSample/SampleWatchWatchKitExtension/GoogleService-Info.plist\nFirebaseMessaging/Apps/AdvancedSample/AppClips/GoogleService-Info.plist\nFirebaseMessaging/Apps/SampleStandaloneWatchApp/SampleStandaloneWatchAppWatchApp/GoogleService-Info.plist\n\n# Credentials for Firebase Storage Integration Tests\nFirebaseStorage/Tests/ObjCIntegration/Credentials.h\nFirebaseStorage/Tests/Integration/Credentials.swift\n\n# FirebaseMLModelDownloader integration tests GoogleService-Info.plist\nFirebaseMLModelDownloader/Tests/Integration/Resources/GoogleService-Info.plist\nFirebaseMLModelDownloader/Apps/Sample/**/GoogleService-Info.plist\n\n# FirebasePerformance dev test App and integration tests GoogleService-Info.plist\nFirebasePerformance/**/GoogleService-Info.plist\n\nSecrets.tar\n\n# OS X\n.DS_Store\n\n# Xcode\nbuild/\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata/\n*.xccheckout\nprofile\n*.moved-aside\nDerivedData\n*.hmap\n*.ipa\n\n# Swift Package Manager\nPackage.resolved\n**/.build\nReleaseTooling/.swiftpm\nReleaseTooling/Packages\nReleaseTooling/*.xcodeproj\nReleaseTooling/Package.resolved\nscripts/code_coverage_report/*/Package.resolved\nscripts/code_coverage_report/*/.build\n\n# Bad sorts get generated if the package .xcscheme is not regenerated.\n# Anything committed to xcshareddata gets propagated to clients. (#8167)\n.swiftpm/xcode/xcshareddata/\n\n# Mint package manager\nMint\n\n# IntelliJ\n.idea\n\n# Vim\n*.swo\n*.swp\n*~\n\n# Bundler\n/.bundle\n/vendor\n\nCarthage\n# Cocoapods recommends against adding the Pods directory to your .gitignore. See\n# http://guides.cocoapods.org/using/using-cocoapods.html#should-i-ignore-the-pods-directory-in-source-control\n\n# Since Firebase is building libraries, not apps, we should not check in Pods.\n# Pods are only used in the Examples and tests and doing a 'pod install' better\n# matches our customers' environments.\n#\n# Note: if you ignore the Pods directory, make sure to uncomment\n# `pod install` in .travis.yml\n#\nPods/\nPodfile.lock\n*.xcworkspace\n\n# CMake\n.downloads\nDebug\nRelease\nNinja\n\n# CLion\n/cmake-build-debug\n/cmake-build-release\n\n# Python\n*.pyc\n\n# Visual Studio\n/.vs\n\n# Visual Studio Code\n/.vscode\n\n# clangd support file\ncompile_commands.json\n\n# CocoaPods generate\ngen/\n\n# b/111916494\ndefault.profraw\n\n# Firestore emulator\ncloud-firestore-emulator.log\ncloud-firestore-emulator.pid\n\n# Let Gemfiles in CocoaPodsIntegrationTest float to catch issues asap\nCocoaPodsIntegrationTest/**/Gemfile.lock\nCocoaPodsIntegrationTest/Gemfile\nCocoaPodsIntegrationTest/Podfile\n\n# In-app messaging integration tests\nFirebaseInAppMessaging/Tests/Integration/FunctionalTestApp/GoogleService-Info.plist\nFirebaseInAppMessaging/Tests/Integration/FunctionalTestApp/App/InAppMessaging-Example-iOS/AppDelegate.m\n\n# FIRAppCheckTestApp\nFirebaseAppCheck/Apps/FIRAppCheckTestApp/FIRAppCheckTestApp/GoogleService-Info.plist\nFirebaseAppCheck/Apps/AppCheckCustomProvideApp/AppCheckCustomProvideApp/GoogleService-Info.plist\n\n# FirestoreSample\n/Example/FirestoreSample/FirestoreSample/GoogleService-Info.plist\n/Example/FirestoreSample/ui-debug.log\n/Example/FirestoreSample/firestore-debug.log\n/Example/FirestoreSample/firebase-debug.log\n\n# generated Terraform docs\n.terraform/*\n.terraform.lock.hcl\n*.tfstate\n*.tfstate.*\n\n# FirebaseVertexAI test data\nvertexai-sdk-test-data\n"
        },
        {
          "name": ".opensource",
          "type": "tree",
          "content": null
        },
        {
          "name": ".ruby-version",
          "type": "blob",
          "size": 0.0087890625,
          "content": "ruby-2.7\n"
        },
        {
          "name": ".spi.yml",
          "type": "blob",
          "size": 0.1162109375,
          "content": "version: 1\nexternal_links:\n  documentation: \"https://firebase.google.com/docs/ios/setup\"\nmetadata:\n  authors: \"Google\"\n"
        },
        {
          "name": ".swiftformat",
          "type": "blob",
          "size": 0.3642578125,
          "content": "# Formatting Options - Mimic Google style\n--indent 2\n--maxwidth 100\n--wrapparameters afterfirst\n\n# Disabled Rules\n\n# Too many of our swift files have simplistic examples. While technically\n# it's correct to remove the unused argument labels, it makes our examples\n# look wrong.\n--disable unusedArguments\n\n# We prefer trailing braces.\n--disable wrapMultilineStatementBraces\n"
        },
        {
          "name": "CMAKE.md",
          "type": "blob",
          "size": 3.380859375,
          "content": "# Building with CMake\n\nSome portions of this repository are portable beyond iOS and can be built using\nCMake.\n\n## Dependencies\n\nYou need:\n\n  * A C++11 compiler\n  * CMake 3.9\n  * Ninja (optional)\n  * CocoaPods (macOS-only)\n\nFor dependencies:\n\n  * Go\n  * Perl\n  * Yasm (Windows-only)\n\n\n### macOS\n\nYou need [Xcode](https://developer.apple.com/xcode/), which you can get from\nthe Mac App Store.\n\nYou can get other development tools via [homebrew](https://brew.sh). Adjust as\nneeded for other package managers.\n\n```bash\nbrew install cmake\nbrew install golang\nbrew install ccache     # optional\nbrew install ninja      # optional\ngem install cocoapods   # may need sudo\n```\n\nNote that CocoaPods is only needed for its ruby library, no Podfiles actually\nneed to be set up and no `pod install` is required for the CMake build.\n\n\n### Ubuntu\n\nIf you're on a relatively recent Linux, the system-provided CMake may be\nsufficient.\n\n```bash\nsudo apt-get install build-essential\nsudo apt-get install cmake\nsudo apt-get install ccache       # optional\nsudo apt-get install ninja-build  # optional\n\nsudo apt-get install golang\n```\n\n### Windows\n\nYou need [Visual Studio](https://visualstudio.microsoft.com/vs/). The 2017\nCommunity edition building for x64 gets regular testing. We're working on\nsupport for Visual Studio 2015.\n\nAn easy way to get development tools is via [Chocolatey](https://chocolatey.org/).\n\n```cmd\nchoco install git\nchoco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'\nchoco install ninja\n\n# Build scripts use bash and python\nchoco install msys2\n\n# Required for building gRPC and its dependencies\nchoco install activeperl\nchoco install golang\nchoco install nasm\n\n# Optional: can speed up builds\nchoco install openssl\n```\n\n## Building\n\nCMake builds out-of source, so create a separate build directory for the target\nyou want to work on.\n\nThe first time you build, it will download all dependencies of the project so\nit might take a while.\n\n\n### Basic build\n\nThe basic shape of the build is to:\n  * create and enter the build tree\n  * run CMake to prepare the build tree\n  * build sources\n  * run tests\n\nOn most systems that looks like this:\n\n```bash\nmkdir build\ncd build\ncmake ..\ncmake --build .\ncmake --build . --target test\n```\n\n### Useful flags to pass to CMake\n\nStandard CMake flags:\n\n  * `-G Ninja` -- build with Ninja instead of the default.\n  * `-DCMAKE_BUILD_TYPE=Release` -- optimized build\n\nDependencies:\n\n  * `-DOPENSSL_ROOT_DIR=path/to/openssl` -- where to find a pre-built OpenSSL,\n    if you prefer that over the default BoringSSL. See `FindOpenSSL.cmake` in\n    your CMake distribution.\n  * `-DZLIB_ROOT=path/to/zlib` -- where to find a pre-built zlib, if you prefer\n    that. See `FindZLIB.cmake` in your CMake distribution.\n\nFirebase-specific goodies:\n\n  * `-DFIREBASE_DOWNLOAD_DIR:PATH=.downloads` -- put downloaded files outside\n    the build tree.\n  * `-DWITH_ASAN=ON` -- enable the address sanitizer (Clang, GCC)\n  * `-DWITH_TSAN=ON` -- enable the thread sanitizer (Clang, GCC)\n  * `-DWITH_UBSAN=ON` -- enable the undefined behavior sanitizer (Clang, GCC)\n\nFor example:\n\nOn Mac or Linux:\n```bash\ncmake -H. -Bbuild -G Ninja -DFIREBASE_DOWNLOAD_DIR:PATH=$HOME/.downloads\ncd build\nninja && ninja test\n```\n\nOn Windows:\n```cmd\nmkdir %USERPROFILE%\\AppData\\LocalLow\\CMake\ncmake -H. -Bbuild -G Ninja ^\n    -DFIREBASE_DOWNLOAD_DIR:PATH=%USERPROFILE%\\AppData\\LocalLow\\CMake ^\n    -DOPENSSL_ROOT_DIR:Path=\"c:\\Program Files\\OpenSSL-Win64\"\n```\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 8.5419921875,
          "content": "# Copyright 2017 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Superbuild for Firebase\n\ncmake_minimum_required(VERSION 3.5.1)\n\n# Disallow mixing keyword and non-keyword forms of target_link_libraries\nif(POLICY CMP0023)\n  cmake_policy(SET CMP0023 NEW)\nendif()\n\n# Report AppleClang separately from Clang. Their version numbers are different.\n# https://cmake.org/cmake/help/v3.0/policy/CMP0025.html\nif(POLICY CMP0025)\n  cmake_policy(SET CMP0025 NEW)\nendif()\n\n# Enable rpath by default\nif(POLICY CMP0042)\n  cmake_policy(SET CMP0042 NEW)\nendif()\n\n# Generate Ninja phony rules for unknown dependencies in the build tree and\n# don't complain about doing so. Our dependencies aren't good about declaring\n# BYPRODUCTS and we mix them all into a single superbuild so we can't enable\n# this policy until all dependencies are capable of doing so.\nif(POLICY CMP0058)\n  cmake_policy(SET CMP0058 OLD)\nendif()\n\n# Enable the ccache compilation cache, if available.\nfind_program(CCACHE_PROGRAM ccache)\nif(CCACHE_PROGRAM)\n  message(STATUS \"Found ccache: ${CCACHE_PROGRAM}\")\n  set(CMAKE_C_COMPILER_LAUNCHER   \"${CCACHE_PROGRAM}\")\n  set(CMAKE_CXX_COMPILER_LAUNCHER \"${CCACHE_PROGRAM}\")\nendif()\n\n# Defer enabling any languages.\nproject(firebase NONE)\n\nif(WIN32)\n  # On Windows, prefer cl over gcc if both are available. By default most of\n  # the CMake generators prefer gcc, even on Windows.\n  set(CMAKE_GENERATOR_CC cl)\nendif()\n\nenable_language(C)\nenable_language(CXX)\n\nset(\n  FIREBASE_LD_EXECUTABLE\n  \"\"\n  CACHE\n  STRING\n  \"The filename of the C/C++ linker to use. \\\n    For example, the default linker for clang and gcc is ld. \\\n    Using a fast linker, like mold (https://github.com/rui314/mold), \\\n    could be useful during development to reduce build/test cycle times.\"\n)\n\nif(NOT (\"${FIREBASE_LD_EXECUTABLE}\" STREQUAL \"\"))\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fuse-ld=${FIREBASE_LD_EXECUTABLE}\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fuse-ld=${FIREBASE_LD_EXECUTABLE}\")\nendif()\n\noption(\n  FIREBASE_IOS_BUILD_BENCHMARKS\n  \"Enable building of C++ and Objective-C benchmarks for this project\"\n  OFF\n)\n\noption(\n  FIREBASE_IOS_BUILD_TESTS\n  \"Enable building of C++ and Objective-C tests for this project\"\n  ON\n)\n\nlist(INSERT CMAKE_MODULE_PATH 0 ${PROJECT_SOURCE_DIR}/cmake)\ninclude(compiler_setup)\ninclude(sanitizer_options)\ninclude(fuzzing_options)\n\n# rules depend on properties and options set above\ninclude(external_rules)\ninclude(podspec_rules)\ninclude(cc_rules)\n\n\nset(FIREBASE_SOURCE_DIR ${PROJECT_SOURCE_DIR})\nset(FIREBASE_BINARY_DIR ${PROJECT_BINARY_DIR})\nset(FIREBASE_INSTALL_DIR ${PROJECT_BINARY_DIR}/opt)\n\nset(\n  FIREBASE_DOWNLOAD_DIR\n  ${PROJECT_BINARY_DIR}/downloads\n  CACHE PATH \"Where to store downloaded files\"\n)\n\nset(\n  FIREBASE_EXTERNAL_SOURCE_DIR\n  ${FIREBASE_BINARY_DIR}/external/src\n  CACHE PATH \"Root directory of source code of the external dependencies\"\n)\n\ndownload_external_sources()\n\n\n# Googletest\nif(FIREBASE_IOS_BUILD_TESTS)\n  set(gtest_force_shared_crt ON CACHE BOOL \"Use shared run-time\")\n  add_external_subdirectory(googletest)\n  firebase_ios_add_alias(GTest::GTest gtest)\n  firebase_ios_add_alias(GTest::Main gtest_main)\n  firebase_ios_add_alias(GMock::GMock gmock)\nendif()\n\n\n# Benchmark\nif(FIREBASE_IOS_BUILD_BENCHMARKS)\n  set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL \"Firestore disabled\")\n  set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL \"Firestore disabled\")\n  set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL \"Firestore disabled\")\n  set(BENCHMARK_ENABLE_GTEST_TESTS OFF CACHE BOOL \"Firestore disabled\")\n\n  if(IOS)\n    # benchmark uses CMake's try_run, which doesn't work out of the box when\n    # compiling for iOS.\n    set(HAVE_STD_REGEX ON CACHE BOOL \"iOS has std::regex\")\n    set(HAVE_POSIX_REGEX ON CACHE BOOL \"iOS has POSIX regex.h\")\n    set(HAVE_STEADY_CLOCK ON CACHE BOOL \"iOS has std::chrono::steady_clock\")\n  endif()\n\n  add_external_subdirectory(benchmark)\nendif()\n\n\n# gRPC\n\n# Force disable Abseil's tests, which don't compile under VS2017.\nset(ABSL_RUN_TESTS OFF CACHE BOOL \"Disable Abseil tests\" FORCE)\n\n# libcurl and c-ares conflict in their usage of this variable. Prevent\n# libcurl's setting of this variable from affecting the c-ares build that's\n# pulled in indirectly via gRPC.\nunset(RANDOM_FILE CACHE)\n\nset(CARES_INSTALL OFF CACHE BOOL \"Disabled\")\n\nset(protobuf_BUILD_TESTS OFF CACHE BOOL \"Disabled\")\n# See https://github.com/protocolbuffers/protobuf/issues/12185#issuecomment-1887892723\nset(protobuf_INSTALL OFF)\nset(utf8_range_ENABLE_INSTALL OFF)\n\nif(IOS OR ANDROID)\n  # C-Ares includes a number of example binaries (e.g. `ahost`) that fail to\n  # build when compiling for non-host targets.\n  set(gRPC_CARES_PROVIDER none CACHE STRING \"Don't use C-Ares\")\n\n  # protoc needs to be built for the host to be able to invoke it during the\n  # build.\n  set(protobuf_BUILD_PROTOC_BINARIES OFF CACHE BOOL \"Disabled\")\nendif()\n\nif(ANDROID OR IOS)\n  set(OPENSSL_FOUND FALSE)\nelse()\n  find_package(OpenSSL QUIET)\nendif()\n\nif(OPENSSL_FOUND)\n  set(gRPC_SSL_PROVIDER package CACHE STRING \"Use external OpenSSL\")\nelse()\n  set(BORINGSSL_ROOT_DIR ${FIREBASE_EXTERNAL_SOURCE_DIR}/boringssl/src)\nendif()\n\nfind_package(ZLIB QUIET)\nif(ZLIB_FOUND)\n  set(gRPC_ZLIB_PROVIDER package CACHE STRING \"Use external ZLIB\")\nelse()\n  set(ZLIB_ROOT_DIR ${FIREBASE_EXTERNAL_SOURCE_DIR}/zlib)\nendif()\n\nfind_package(re2 QUIET)\nif(RE2_FOUND)\n  set(gRPC_RE2_PROVIDER package CACHE STRING \"Use external re2\")\nelse()\n  set(RE2_ROOT_DIR ${FIREBASE_EXTERNAL_SOURCE_DIR}/re2)\nendif()\n\nset(gRPC_BUILD_TESTS OFF CACHE BOOL \"Disable gRPC tests\")\nset(gRPC_BUILD_CODEGEN OFF CACHE BOOL \"Disable gRPC codegen\")\nset(gRPC_BUILD_CSHARP_EXT OFF CACHE BOOL \"Disable gRPC C# extensions\")\nset(gRPC_INSTALL OFF CACHE BOOL \"Disable gRPC installation\")\n\nset(ABSL_ROOT_DIR ${FIREBASE_EXTERNAL_SOURCE_DIR}/abseil-cpp)\nset(CARES_ROOT_DIR ${FIREBASE_EXTERNAL_SOURCE_DIR}/cares)\nset(PROTOBUF_ROOT_DIR ${FIREBASE_EXTERNAL_SOURCE_DIR}/protobuf)\n\nadd_external_subdirectory(grpc)\n\n# Fix up targets included by boringssl (ver: b9232f9e27e5668bc0414879dcdedb2a59ea75f2)\n# We might be able to remove this with newer versions.\nif(CXX_CLANG)\n  if(TARGET crypto)\n    target_compile_options(\n      crypto PRIVATE\n      -Wno-unused-but-set-variable\n    )\n  endif()\nendif()\n\nif(MSVC)\n  # Disable warnings about unsafe use of std::copy\n  target_compile_definitions(\n    absl_strings PUBLIC\n    _SCL_SECURE_NO_WARNINGS=1\n  )\nendif()\n\nif(NOT OPENSSL_FOUND)\n  # Not using outboard OpenSSL so set up BoringSSL to look like it.\n  firebase_ios_add_alias(OpenSSL::Crypto crypto)\n  target_include_directories(\n    crypto INTERFACE\n    $<BUILD_INTERFACE:${FIREBASE_EXTERNAL_SOURCE_DIR}/boringssl/src/include>\n  )\n\n  firebase_ios_add_alias(OpenSSL::SSL ssl)\n  target_include_directories(\n    ssl INTERFACE\n    $<BUILD_INTERFACE:${FIREBASE_EXTERNAL_SOURCE_DIR}/boringssl/src/include>\n  )\nendif()\n\nif(NOT ZLIB_FOUND)\n  target_include_directories(\n    zlibstatic INTERFACE\n    $<BUILD_INTERFACE:${FIREBASE_EXTERNAL_SOURCE_DIR}/grpc/third_party/zlib>\n  )\nendif()\n\n\n# Snappy\nset(SNAPPY_BUILD_TESTS OFF CACHE BOOL \"Firestore disabled\")\nset(SNAPPY_BUILD_BENCHMARKS OFF CACHE BOOL \"Firestore disabled\")\nadd_external_subdirectory(snappy)\nfirebase_ios_add_alias(Snappy::Snappy snappy)\n\n# LevelDB\nset(LEVELDB_BUILD_TESTS OFF CACHE BOOL \"Firestore disabled\")\nset(LEVELDB_BUILD_BENCHMARKS OFF CACHE BOOL \"Firestore disabled\")\nset(LEVELDB_INSTALL OFF CACHE BOOL \"Firestore disabled\")\nadd_external_subdirectory(leveldb)\nfirebase_ios_add_alias(LevelDB::LevelDB leveldb)\n\n\n# nanopb\nset(nanopb_BUILD_GENERATOR ON CACHE BOOL \"Enable the nanopb generator\")\nset(nanopb_MSVC_STATIC_RUNTIME OFF CACHE BOOL \"Link static runtime libraries\")\nadd_external_subdirectory(nanopb)\n\ntarget_compile_definitions(\n  protobuf-nanopb-static PUBLIC\n  -DPB_FIELD_32BIT -DPB_ENABLE_MALLOC -DPB_NO_PACKED_STRUCTS=1\n)\n\n# Enable #include <nanopb/pb.h>\ntarget_include_directories(\n  protobuf-nanopb-static INTERFACE\n  $<BUILD_INTERFACE:${FIREBASE_EXTERNAL_SOURCE_DIR}/nanopb>\n)\n\n# XCTest\nif(APPLE)\n  find_package(XCTest)\nendif()\n\n\nif(FIREBASE_IOS_BUILD_TESTS)\n  enable_testing()\nendif()\n\nadd_subdirectory(FirebaseAppCheck/Interop)\nadd_subdirectory(FirebaseCore)\nadd_subdirectory(Firestore)\nadd_subdirectory(FirebaseAuth/Interop)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 4.4052734375,
          "content": "# Firebase Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of\nexperience, education, socio-economic status, nationality, personal appearance,\nrace, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n*   Using welcoming and inclusive language\n*   Being respectful of differing viewpoints and experiences\n*   Gracefully accepting constructive criticism\n*   Focusing on what is best for the community\n*   Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n*   The use of sexualized language or imagery and unwelcome sexual attention or\n    advances\n*   Trolling, insulting/derogatory comments, and personal or political attacks\n*   Public or private harassment\n*   Publishing others' private information, such as a physical or electronic\n    address, without explicit permission\n*   Other conduct which could reasonably be considered inappropriate in a\n    professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, or to ban temporarily or permanently any\ncontributor for other behaviors that they deem inappropriate, threatening,\noffensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\nThis Code of Conduct also applies outside the project spaces when the Project\nSteward has a reasonable belief that an individual's behavior may have a\nnegative impact on the project or its community.\n\n## Conflict Resolution\n\nWe do not believe that all conflict is bad; healthy debate and disagreement\noften yield positive results. However, it is never okay to be disrespectful or\nto engage in behavior that violates the project’s code of conduct.\n\nIf you see someone violating the code of conduct, you are encouraged to address\nthe behavior directly with those involved. Many issues can be resolved quickly\nand easily, and this gives people more control over the outcome of their\ndispute. If you are unable to resolve the matter for any reason, or if the\nbehavior is threatening or harassing, report it. We are dedicated to providing\nan environment where participants feel welcome and safe.\n\nReports should be directed to Paul Beusterien(paulbeusterien@google.com), the\nProject Steward for the Firebase iOS SDK. It is the Project Steward’s duty to\nreceive and address reported violations of the code of conduct. They will then\nwork with a committee consisting of representatives from the Open Source\nPrograms Office and the Google Open Source Strategy team. If for any reason you\nare uncomfortable reaching out the Project Steward, please email\nopensource@google.com.\n\nWe will investigate every complaint, but you may not receive a direct response.\nWe will use our discretion in determining when and how to follow up on reported\nincidents, which may range from not taking action to permanent expulsion from\nthe project and project-sponsored spaces. We will notify the accused of the\nreport and provide them an opportunity to discuss it before any action is taken.\nThe identity of the reporter will be omitted from the details of the report\nsupplied to the accused. In potentially harmful situations, such as ongoing\nharassment or threats to anyone's safety, we may take action without notice.\n\n## Attribution\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4,\navailable at\nhttps://www.contributor-covenant.org/version/1/4/code-of-conduct.html"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 18.8193359375,
          "content": "# Contributing to Firebase\n\nThank you for your interest in contributing and welcome to the\nFirebase community! 🔥\n\nThis guide describes the many ways to contribute to Firebase and\noutlines the preferred workflow for Firebase development.\n\n## Contents\n\n* [Reporting a bug](#reporting-a-bug)\n* [Making a feature request](#making-a-feature-request)\n* [Starting a discussion](#starting-a-discussion)\n* [Contributing code](#contributing-code)\n\n- [Development Guide](#development-guide) <!-- List intentionally starts dash -->\n    <!-- * [Touring the codebase](#touring-the-codebase) -->\n  * [Getting started](#getting-started)\n  * [Developing](#developing)\n  * [Debugging](#debugging)\n  * [Testing](#testing)\n  * [Opening a pull request](#opening-a-pull-request)\n\n* [Contributor License Agreement](#contributor-license-agreement)\n* [Code of Conduct](#code-of-conduct)\n* [License](#license)\n\n----\n<!-- Ways to contribute -->\n\n## [Reporting a bug][bug]\n\nTo report a bug, fill out a new issue [here][bug]. The pre-populated form\nshould be filled out accordingly to provide others with useful information\nregarding the discovered bug. In most cases, a [minimal reproducible\nexample] is very helpful in allowing us to quickly reproduce the bug and\nwork on a fix.\n\n## [Making a feature request][feature-request]\n\nFeature requests should ideally be clear and concise (i.e. _Add Sign in with\nApple support_). If the feature request is more specific, describe it by\nproviding a use case that is not achievable with existing Firebase APIs and\ninclude an API proposal that would make the use case possible.\nThe proposed API change does not need to be very detailed.\n\nTo make a feature request, fill out a new feature request\nform [here][feature-request].\n\nFor large or ambiguous requests, such as significant breaking changes or use\ncases that require multiple new features, consider instead starting a\n[Pitch][pitch-discussions] to discuss and flush out ideas with the Firebase\ncommunity.\n\n## [Starting a discussion][new-discussion]\n\nWe are using [GitHub discussions][discussions-docs] as a collaborative space\nwhere developers can discuss questions and proposals regarding Firebase. For\nlarge proposals, start a [Pitch][pitch-discussions] to discuss\nideas with the community.\n\nView the [Firebase discussions][discussions] or start one\n[here][new-discussion].\n\n## Contributing code\n\nBefore starting work on a contribution, it's important to allow the Firebase\ncommunity an opportunity to discuss your proposal. First, check to see if your\nproposal has appeared in an [existing issue]'s discussion. If it has\nnot, create a [new issue] and use it to describe and explain your idea. The\nFirebase team is happy to provide feedback and advice for how to best\nimplement your proposal.\n\n> ### Need some inspiration?\n>\n> Check out issues marked as:\n>\n> <!-- > TODO: Add good first issue label & contributing project board. -->\n> * [`help wanted`][help-wanted]\n> * [`type: feature request`][feature-requests]\n>\n> Additionally, have a look at the [Roadmap] to see Firebase's\n> longer term goals. There are many opportunities to get involved!\n\n### API Review\n\nPlease note that changes or additions to public APIs require an internal API\nreview from the Firebase team. Contributions involving such changes will\nrequire additional time to allow for an internal API review to be scheduled and\nthoroughly conducted. We appreciate your patience while we review your amazing\ncontributions!\n\n### Breaking Changes\n\nFirebase's release schedule is designed to reduce the amount of breaking\nchanges that developers have to deal  with. Ideally, breaking changes should\nbe avoided when making a contribution.\n\n### Using GitHub pull requests\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Refer to [GitHub Help] for\nmore information on using pull requests. If you're ready to open a pull request,\ncheck that you have completed all of the steps outlined in\nthe [Opening a pull request](#opening-a-pull-request) section.\n\n----\n<!-- Development Guide -->\n\n## Development Guide\n\nThe majority of the remaining portion of this guide is dedicated to detailing\nthe preferred workflow for Firebase development.\n\n<!-- ### Touring the codebase -->\n<!-- TODO: Provide a graphic of key areas of the codebase. -->\n\n### Getting started\n\nTo develop Firebase software, **install**:\n\n* [Xcode] (v12.2 or later) (for Googlers, visit [go/xcode](go/xcode)) to\n  download.\n* <details>\n  <summary>Code styling tools: <b>clang-format</b>, <b>swiftformat</b> and\n   <b>mint</b></summary>\n\n   <!-- The above line is intentionally left blank. -->\n   Firebase use's a style script that requires [clang-format] and [mint]. [mint]\n   installs [swiftformat] for Swift styling.\n\n   To install [clang-format] and [mint] using [Homebrew]:\n\n    ```console\n    brew install clang-format@19\n    brew install mint\n    ```\n\n  </details>\n\n<details>\n<summary><b>Next</b>, clone the Firebase repo.</summary>\n\n<!-- The above line is intentionally left blank. -->\n* Clone via [HTTPS][github-clone-https]\n\n  ```console\n  git clone https://github.com/firebase/firebase-ios-sdk.git\n  ```\n\n* Or via [SSH][github-clone-ssh]\n\n  ```console\n  git clone git@github.com:firebase/firebase-ios-sdk.git\n  ```\n\n</details>\n<br> <!-- This new line is for styling purposes. -->\n\nOnce the necessary tools have been installed and the project has been cloned,\ncontinue on to the preferred\n[development workflow](#developing).\n\n### Developing\n\nThe workflow for library development is different from application\ndevelopment. For Firebase development, we develop using the same tools we\nuse to distribute Firebase. Instructions for developing with\n[Swift Package Manager](#swift-package-manager) and [CocoaPods](#cocoapods)\nare as follows:\n\n#### **[Swift Package Manager]**\n\n[Swift Package Manager] is built into Xcode and makes it simple to develop\nprojects with multiple dependencies.\n\nTo develop using SwiftPM, open the `Package.swift` file in your cloned\nFirebase copy (or `open Package.swift` from the command line) and select a\nlibrary scheme to build and develop that library.\n\nTo learn more about running tests with Swift Package Manager, visit the\n[Testing](#testing) section.\n\n<!-- SwiftPM troubleshooting -->\n<!-- TODO: Common issues and fixes like resolve dependencies & reset cache. -->\n\n#### **[CocoaPods]**\n\n[CocoaPods] is another popular dependency manager used in Apple development.\nFirebase supports development with CocoaPods 1.12.0 (or later). If you choose to\ndevelop using CocoaPods, it's recommend to use\n[`cocoapods-generate`][cocoapods-generate], a plugin that generates a\n[workspace] from a [podspec]. This plugin allows you to quickly generate a\ndevelopment workspace using any library's podspec. All of the podspecs for\nFirebase's libraries are located in the repo's root directory.\n\n#### Installation\n\n* **[CocoaPods]**\n  <!-- This line is intentionally left blank. -->\n  To check if your machine has CocoaPods installed, run `pod --version` in\n  terminal. If the command fails with a `command not found` error, then you'll\n  need to install CocoaPods.\n\n  To install, please refer to CocoaPods's [Getting Started][cocoapods-install] guide.\n\n* **[cocoapods-generate]**\n  <!-- This line is intentionally left blank. -->\n  Please see [cocoapods-generate] for instructions on how to install.\n\n#### Developing with CocoaPods\n\nWith **CocoaPods** and **cocoapods-generate** installed, the `pod gen` command\nmakes it easy to develop specific Firebase libraries.\n\n```console\npod gen Firebase{name here}.podspec --local-sources=./ --auto-open --platforms=ios\n```\n\n* If the CocoaPods cache is out of date, you may need to run\n  `pod repo update` before the `pod gen` command.\n* Set the `--platforms` option to `macos` or `tvos` to develop on those\n   platforms. Since 10.2, Xcode does not properly handle multi-platform\n   CocoaPods workspaces.\n\n<details>\n<summary><i>Developing for Mac Catalyst?</i></summary>\n\n<!-- The above line is intentionally left blank. -->\nTo develop for [Mac Catalyst], there are a few additional steps to configure\nthe project.\n\n1. Run `pod gen {name here}.podspec --local-sources=./ --auto-open --platforms=ios`\n2. Check the **Mac** box in the host app's **Build Settings**\n3. Sign the host app in the **Signing & Capabilities** tab\n4. Navigate to **Pods** in the **Project Manager**\n5. Add **Signing** to the **host app** and **unit test** targets\n6. Select the **Unit-unit** scheme\n7. **Run** it to build and test\n\n**Alternatively**, disable signing in each target:\n\n1. Go to **Build Settings** tab\n2. Click **+**\n3. Select **Add User-Defined Setting**\n4. Add `CODE_SIGNING_REQUIRED` setting with a value of `NO`\n\n</details>\n<br> <!-- This new line is for styling purposes. -->\n\n<!-- #### **Sample Apps** -->\n\n#### **Style Guide**\n\nThis code in this repo is styled in accordance to `swiftformat` and\n`clang-format` conventions.\n\n#### Styling your code\n\nThe [./scripts/style.sh] script makes it easy to style your\ncode during development. Running the style script on the folder you worked in is\nthe most efficient way to only format your changes changes.\n\nFor example, if your changes were done in `FirebaseStorage/Sources/`:\n\n```console\n./scripts/style.sh FirebaseStorage/Sources/\n```\n\nAlternatively, the script can be work on branch names or filenames.\n\n```console\n ./scripts/style.sh fix-storage-bug\n```\n\n```console\n./scripts/style.sh FirebaseStorage/Sources/Storage.swift\n```\n\n<details>\n<summary>More details on using the <b>style.sh</b> script</summary>\n\n<!-- The above line is intentionally left blank. -->\n\n```bash\n# Usage:\n# ./scripts/style.sh [branch-name | filenames]\n#\n# With no arguments, formats all eligible files in the repo\n# Pass a branch name to format all eligible files changed since that branch\n# Pass a specific file or directory name to format just files found there\n#\n# Commonly\n# ./scripts/style.sh your_branch\n```\n\n</details>\n\nIf your PR is failing CI due to style issues please use\nthe style script accordingly. If the style script is not working, ensure you\nhave installed the necessary code styling tools outlined in the\n[Getting Started](#getting-started) section.\n\n#### Apple development style guides and resources\n\nRefer to the following resources when writing Swift or Objective-C code.\n\n* Swift\n  * [Google's Swift Style Guide][google-swift-style]\n  * [Swift's API Design Guidelines][swift-api-design-guide]\n* Objective-C\n  * [Google's Objective-C Style Guide][google-objc-style]\n  * [Apple's Coding Guidelines for Cocoa][coding-guidelines-for-cocoa]\n\n#### **An example Git workflow**\n\nThis is a general overview of what the Git workflow may look like, from start to\nfinish, when contributing code to Firebase.\nThe below snippet is purely for reference purposes and is used to demonstrate\nwhat the workflow may look like, from start to finish.\n<details>\n<summary>View the workflow</summary>\n\n<!-- The above line is intentionally left blank. -->\nFor developers without write access, you'll need to create a fork of Firebase\ninstead of a branch. Learn more about forking a repo [here][github-forks].\n\n```console\n# Update your local main\ngit checkout main\ngit pull\n\n# Create a development branch\ngit checkout -b my_feature_or_bug_fix\n\n# Code, commit, repeat\ngit commit -m \"a helpful commit message\"\n\n# Push your local branch to the remote\ngit push --set-upstream origin my_feature_or_bug_fix\n\n# Open a pull request on github.com\n\n# Resolve review feedback on opened PR\ngit commit -m \"implemented suggestion\"\ngit push\n\n# Once your PR has been reviewed and all feedback addressed, it\n# will be approved and merged by a project member. 🎉\n```\n\n</details>\n<br> <!-- This new line is for styling purposes. -->\n\n### Debugging\n\nXcode ships with many debugging tools. Learn more about debugging in\nXcode by watching [WWDC sessions][wwdc-sessions] about debugging and\nviewing the [documentation][xcode-debugging].\n\n### Testing\n\nTests are an essential part to building Firebase. Many of the tests\nfor Firebase run as part of our continuous integration (CI) setup with\n[GitHub Actions].\n\n* _Fixing a bug?_ Add a test to catch potential regressions in\n  the future.\n* _Adding a new feature?_ Add tests to test the new or\n  modified APIs. In addition, highlight the new API by providing\n  snippets of how it is used in the API's corresponding issue or\n  PR. These snippets will be linked to the release notes so other\n  developers can see how the API is used. If more context is\n  required to demonstrate the API, reach out to a project member\n  about creating an example project to do so.\n\nOftentimes, tests can be useful in understanding how a particular API works.\nKeep this in mind while adding tests as they can serve as an additional tool for\ndemonstrating how an API should be used.\n\n_Using [Swift Package Manager](#swift-package-manager)?_\n\n1. To enable schemes for [testing](#testing): run `./scripts/setup_spm_tests.sh`\n2. Then in Xcode, choose a scheme to build a library or run a test suite.\n3. Choose a target platform by selecting the run destination along with\n   the scheme.\n\n> _At this time, not all test schemes are configured to run when using_\n_Swift Package Manager._\n\nOnce a [development workspace](developing) has been set up and a testing scheme\nselected, tests can be run by clicking the \"play\" arrow in the project\nnavigation bar or by using the `⌘U` keyboard shortcut.\n\n<!-- #### Unit Tests -->\n<!-- TODO: Provide resources for model Swift & ObjC unit tests. -->\n\n<!-- #### Integration Tests -->\n<!-- TODO: Provide resources for model Swift & ObjC integration tests. -->\n\n<!-- #### Swift API Build Tests -->\n<!-- TODO: Provide resources for model Swift API build tests. -->\n\n#### Viewing Code Coverage\n\nWhen creating tests, it's helpful to verify that certain codepaths are indeed\ngetting tested. Xcode has a built-in code coverage tool that makes it easy to\nknow what codepaths are run. To enable it, navigate\nfrom `Product → Scheme ➞ Edit Scheme` or use the `⌥⌘U` keyboard shortcut\nto show the current testing scheme. Enable code coverage by selecting\nthe **Options** tab and checking the **Code Coverage** box.\n\n<!-- TODO: Insert GIF of enabling code coverage. -->\n\nThe Firebase repo contains a code coverage report tool. To learn more, view\nthe [code coverage report documentation][code-cov-report-docs].\n\n### Opening a pull request\n\nBefore opening a pull request (PR), ensure that your contribution meets the\nfollowing criteria:\n\n1. A descriptive PR description has been written that explains the\n   purpose of this contribution.\n2. The committed code has been styled in accordance with this repo's style\n   guidelines.\n3. A CHANGELOG has been updated to reflect the PR's associated changes.\n4. Unit and/or integration tests have been added or updatde to test and\n   validate the contribution's changes.\n5. Refer to the\n   [Contributor License Agreement](#contributor-license-agreement) section below\n   to sign a CLA.\n\n<!-- TODO: Add picture of opening a PR. -->\n\n<!-- #### Addressing Continuous Integration (CI) failures -->\n\n<!-- #### Resolving feedback -->\n\n----\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement (CLA). You (or your employer) retain the copyright to your\ncontribution, this simply gives us permission to use and redistribute your\ncontributions as part of the project. Head over to the\n[Google CLA dashboard][google-cla-dashboard]\nto sign a new one or to see your current agreements on file.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code of Conduct\n\nWe aim to foster a community of learning and kindness at Firebase. By\nparticipating, you are expected to have reviewed and agreed to\nour [Code of Conduct].\n\n## License\n\nFor more information about the license used for this project, please refer to\n[LICENSE].\n\n<!-- ---------------------------------- -->\n<!-- Identifiers, in alphabetical order -->\n[bug]: https://github.com/firebase/firebase-ios-sdk/issues/new?assignees=&labels=&template=bug_report.md\n[clang-format]: https://clang.llvm.org/docs/ClangFormat.html\n[CocoaPods]: https://cocoapods.org/about\n[cocoapods-generate]: https://github.com/square/cocoapods-generate\n[cocoapods-install]: https://guides.cocoapods.org/using/getting-started.html#getting-started\n[coding-guidelines-for-cocoa]: https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html\n[discussions]: https://github.com/firebase/firebase-ios-sdk/discussions\n[discussions-docs]: https://docs.github.com/en/discussions\n[existing issue]: https://github.com/firebase/firebase-ios-sdk/issues\n[feature-request]: https://github.com/firebase/firebase-ios-sdk/issues/new?assignees=&labels=type%3A+feature+request&template=feature_request.md\n[feature-requests]: https://github.com/firebase/firebase-ios-sdk/issues?q=is%3Aopen+is%3Aissue+label%3A%22type%3A+feature+request%22\n[GitHub Actions]: https://docs.github.com/en/actions\n[GitHub Help]: https://help.github.com/articles/about-pull-requests/\n[github-clone-https]: https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls\n[github-clone-ssh]: https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories#cloning-with-ssh-urls\n[github-forks]: https://docs.github.com/en/get-started/quickstart/fork-a-repo\n[good-first-issue]: https://github.com/firebase/firebase-ios-sdk/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22\n[google-cla-dashboard]: https://cla.developers.google.com\n[google-objc-style]: https://google.github.io/styleguide/objcguide.html\n[google-swift-style]: https://google.github.io/swift/\n[help-wanted]: https://github.com/firebase/firebase-ios-sdk/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22\n[Homebrew]: https://brew.sh/\n[new-discussion]: https://github.com/firebase/firebase-ios-sdk/discussions/new\n[new issue]: https://github.com/firebase/firebase-ios-sdk/issues/new/choose\n[Mac Catalyst]: https://developer.apple.com/mac-catalyst/\n[minimal reproducible example]: https://stackoverflow.com/help/minimal-reproducible-example\n[mint]: https://github.com/yonaskolb/Mint\n[pitch-discussions]: https://github.com/firebase/firebase-ios-sdk/discussions/categories/pitches\n[podspec]: https://guides.cocoapods.org/making/specs-and-specs-repo.html\n[swift-api-design-guide]: https://swift.org/documentation/api-design-guidelines/\n[Swift Package Manager]: https://swift.org/package-manager/\n[workspace]: https://developer.apple.com/library/archive/featuredarticles/XcodeConcepts/Concept-Workspace.html\n[wwdc-sessions]: https://developer.apple.com/videos/\n[Xcode]: https://developer.apple.com/xcode/\n[xcode-debugging]: https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/debugging_with_xcode/chapters/debugging_tools.html\n\n<!-- File/Code Identifiers, in alphabetical order -->\n[Code of Conduct]: ./CODE_OF_CONDUCT.md\n[code-cov-report-docs]: scripts/code_coverage_report/README.md\n[LICENSE]: ./LICENSE\n[Roadmap]: ./ROADMAP.md\n[./scripts/style.sh]: ./scripts/style.sh\n"
        },
        {
          "name": "Carthage.md",
          "type": "blob",
          "size": 6.0595703125,
          "content": "# Firebase Carthage\n\n## Context\n\nThis page introduces and provides instructions for an **experimental** Firebase\n[Carthage](https://github.com/Carthage/Carthage) distribution. Based on\nfeedback and usage, the Firebase team may decide to [make the Carthage\ndistribution official](https://github.com/firebase/firebase-ios-sdk/issues/1862).\n\nPlease [let us know](https://github.com/firebase/firebase-ios-sdk/issues) if you\nhave suggestions or questions.\n\n## Carthage Installation\n\n[Homebrew](http://brew.sh/) is one way to install Carthage.\n\n```bash\n$ brew update\n$ brew install carthage\n```\n\nSee the\n[Carthage page](https://github.com/Carthage/Carthage#installing-carthage) for\nmore details and additional installation methods.\n\n## Carthage Usage\n\n- Create a Cartfile with a **subset** of the following components - choosing the\nFirebase components that you want to include in your app. Note that\n**FirebaseAnalyticsBinary** must always be included.\n\n```\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseABTestingBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseAdMobBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseAnalyticsBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseAppCheckBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseAppDistributionBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseAuthBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseCrashlyticsBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseDatabaseBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseDynamicLinksBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseFirestoreBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseFunctionsBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseGoogleSignInBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseInAppMessagingBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseMLModelDownloaderBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseMessagingBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebasePerformanceBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseRemoteConfigBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseStorageBinary.json\"\n```\n- Run `carthage update`\n- Use Finder to open `Carthage/Build`.\n- Copy the contents into the top level of your Xcode project and make sure\n    they're added to the right build target(s).\n    - To disable AdId support, do not copy\n   `GoogleAppMeasurementIdentitySupport.xcframework`.\n    - If the app does not use any Firebase Swift specific APIs, you do not need\n   to copy any xcframeworks whose name includes \"Swift\".\n- Add `$(OTHER_LDFLAGS) -ObjC` flag to \"Other Linker Flags\" in \"Build Settings\".\n- Make sure that the build target(s) includes your project's `GoogleService-Info.plist`\n ([how to download config file](https://support.google.com/firebase/answer/7015592))\n- [Delete Firebase.framework from the Link Binary With Libraries Build Phase](https://github.com/firebase/firebase-ios-sdk/issues/911#issuecomment-372455235).\n- If you're including a Firebase component that has resources, copy its bundles\n    into the Xcode project and make sure they're added to the\n    `Copy Bundle Resources` Build Phase.\n\n- Please note that you shouldn't add any of the Firebase frameworks to the Carthage build phase\n (`copy-frameworks`). The frameworks contain static libraries that are linked at build time.\n\n- Some additional libraries/frameworks may be needed depending on which Firebase frameworks you\n use, for example: libc++.tbd, sqlite3.tbd, StoreKit.framework, etc. For more information,\n [go here](https://github.com/firebase/firebase-ios-sdk/issues/9#issuecomment-387947163).\n\n- If you see Swift symbol linkage errors, you may need to add a dummy `.swift` file to the project\n  to resolve.\n\n- For Crashlytics, do the following steps to automatically upload your app's symbols so your app's crashes are symbolicated:\n    - Download\n     [upload-symbols](https://github.com/firebase/firebase-ios-sdk/raw/main/Crashlytics/upload-symbols)\n     and [run](https://github.com/firebase/firebase-ios-sdk/raw/main/Crashlytics/run).\n     Note: please see the [discussion](https://github.com/firebase/firebase-ios-sdk/issues/4720#issuecomment-577213858)\n     for details why it has to be done manually.\n    - Put these in the directory where your `.xcodeproj` file lives, eg. `scripts/run` and `scripts/upload-symbols`\n    - Make sure that the files are executable - `chmod +x scripts/run scripts/upload-symbols`\n    - Open your project in Xcode, then select its project file in the left navigator.\n    - From the **Select a project or target** dropdown, select your main build target.\n    - Select the **Build Phases** tab, then click \"+\" add > **New Run Script Phase**.\n    - Paste the following into your new Run Script, replacing \"scripts\" with whatever you named your folder: `\"${PROJECT_DIR}/scripts/run\"`\n    - Add the following dependencies as **Input Files** to the Run Script:\n       - `${DWARF_DSYM_FOLDER_PATH}/${DWARF_DSYM_FILE_NAME}/Contents/Resources/DWARF/${TARGET_NAME}`\n       - `${BUILT_PRODUCTS_DIR}/${INFOPLIST_PATH}`\n\n## Versioning\n\nAll Firebase components share the same version.\nMixing and matching components with different versions may cause linker errors.\n\n## Static Frameworks\n\nNote that the Firebase frameworks in the distribution include static libraries.\nWhile it is fine to link these into apps, it will generally not work to depend\non them from wrapper dynamic frameworks.\n\n## Acknowledgements\n\nThanks to the Firebase community for encouraging this implementation including\nthose who have made this the most updated\n[firebase-ios-sdk](https://github.com/firebase/firebase-ios-sdk)\n[issue](https://github.com/firebase/firebase-ios-sdk/issues/9).\n\nThanks also to those who have already done Firebase Carthage implementations,\nsuch as https://github.com/soheilbm/Firebase.\n"
        },
        {
          "name": "CoreOnly",
          "type": "tree",
          "content": null
        },
        {
          "name": "Crashlytics",
          "type": "tree",
          "content": null
        },
        {
          "name": "Dangerfile",
          "type": "blob",
          "size": 8.21484375,
          "content": "### Helper functions\n\n# Determine if any of the files were changed or deleted.\n# Taken from samdmarshall/danger\ndef didModify(files_array)\n  files_array.each do |file_name|\n    if git.modified_files.include?(file_name) ||\n       git.deleted_files.include?(file_name)\n      return true\n    end\n  end\n  return false\nend\n\n# Determine if there are changes in files matching any of the\n# path patterns provided.\ndef hasChangesIn(paths)\n  path_array = Array(paths)\n  path_array.each do |dir|\n    if !git.modified_files.grep(/#{dir}/).empty?\n      return true\n    end\n  end\n  return false\nend\n\n# Determine if any new files were added to paths matching any of the\n# path patterns provided.\ndef hasAdditionsIn(paths)\n  path_array = Array(paths)\n  path_array.each do |dir|\n    if !git.added_files.grep(/#{dir}/).empty?\n      return true\n    end\n  end\n  return false\nend\n\n# Adds the provided labels to the current PR.\ndef addLabels(label_array)\n  issue_number = github.pr_json[\"number\"]\n  repo_name = \"firebase/firebase-ios-sdk\"\n  github.api.add_labels_to_an_issue(repo_name, issue_number, label_array)\nend\n\n# Returns a list of all labels for a given PR. PRs that touch\n# multiple directories may have multiple labels.\ndef labelsForModifiedFiles()\n  labels = []\n  labels.push(\"api: analytics\") if @has_analytics_changes\n  labels.push(\"api: abtesting\") if @has_abtesting_changes\n  labels.push(\"api: appcheck\") if @has_appcheck_changes\n  labels.push(\"api: appdistribution\") if @has_appdistribution_changes\n  labels.push(\"api: auth\") if @has_auth_changes\n  labels.push(\"api: core\") if @has_core_changes\n  labels.push(\"api: crashlytics\") if @has_crashlytics_changes\n  labels.push(\"api: database\") if @has_database_changes\n  labels.push(\"api: dynamiclinks\") if @has_dynamiclinks_changes\n  labels.push(\"api: firestore\") if @has_firestore_changes\n  labels.push(\"api: functions\") if @has_functions_changes\n  labels.push(\"api: inappmessaging\") if @has_inappmessaging_changes\n  labels.push(\"api: installations\") if @has_installations_changes\n  labels.push(\"api: messaging\") if @has_messaging_changes\n  labels.push(\"api: performance\") if @has_performance_changes\n  labels.push(\"api: remoteconfig\") if @has_remoteconfig_changes\n  labels.push(\"api: storage\") if @has_storage_changes\n  labels.push(\"api: vertexai\") if @has_vertexai_changes\n  labels.push(\"release-tooling\") if @has_releasetooling_changes\n  labels.push(\"public-api-change\") if @has_api_changes\n  return labels\nend\n\n### Definitions\n\n# Label for any change that shouldn't have an accompanying CHANGELOG entry,\n# including all changes that do not affect the compiled binary (i.e. script\n# changes, test-only changes)\ndeclared_trivial = github.pr_body.include? \"#no-changelog\"\n\n# Whether or not there are pending changes to any changelog file.\nhas_changelog_changes = hasChangesIn([\"CHANGELOG\"])\n\n# Whether or not the LICENSE file has been modified or deleted.\nhas_license_changes = didModify([\"LICENSE\"])\n\n# A list of published Firebase products.\n@product_list = [\n  \"ABTesting\",\n  \"AppCheck\",\n  \"AppDistribution\",\n  \"Analytics\",\n  \"Authentication\",\n  \"Core\",\n  \"Crashlytics\",\n  \"Database\",\n  \"DynamicLinks\",\n  \"Firestore\",\n  \"Functions\",\n  \"InAppMessaging\",\n  \"Installations\",\n  \"Messaging\",\n  \"Performance\",\n  \"RemoteConfig\",\n  \"Storage\",\n  \"VertexAI\"\n]\n\n## Product directories\n@has_analytics_changes = hasChangesIn([\n  \"FirebaseAnalyticsOnDeviceConversionWrapper\",\n  \"FirebaseAnalyticsWithoutAdIdSupportWrapper\",\n  \"FirebaseAnalyticsWrapper\"\n]) || didModify([\n  \"FirebaseAnalytics.podspec\",\n  \"FirebaseAnalyticsOnDeviceConversion.podspec\",\n  \"GoogleAppMeasurement.podspec\",\n  \"GoogleAppMeasurementOnDeviceConversion.podspec\"\n])\n@has_abtesting_changes = hasChangesIn(\"FirebaseABTesting\")\n@has_abtesting_api_changes = hasChangesIn(\"FirebaseABTesting/Sources/Public/\")\n@has_appcheck_changes = hasChangesIn(\"FirebaseAppCheck\")\n@has_appcheck_api_changes = hasChangesIn(\"FirebaseAppCheck/Sources/Public/\")\n@has_appdistribution_changes = hasChangesIn(\"FirebaseAppDistribution\")\n@has_appdistribution_api_changes = hasChangesIn(\"FirebaseAppDistribution/Sources/Public\")\n@has_auth_changes = hasChangesIn(\"FirebaseAuth\")\n@has_auth_api_changes = hasChangesIn(\"FirebaseAuth/Sources/Public/\")\n@has_core_changes = hasChangesIn([\n  \"FirebaseCore\",\n  \"CoreOnly/\"])\n@has_core_api_changes = hasChangesIn(\"FirebaseCore/Sources/Public/\")\n@has_crashlytics_changes = hasChangesIn(\"Crashlytics\")\n@has_crashlytics_api_changes = hasChangesIn(\"Crashlytics/Crashlytics/Public/\")\n@has_database_changes = hasChangesIn(\"FirebaseDatabase\")\n@has_database_api_changes = hasChangesIn(\"FirebaseDatabase/Sources/Public/\")\n@has_dynamiclinks_changes = hasChangesIn(\"FirebaseDynamicLinks\")\n@has_dynamiclinks_api_changes = hasChangesIn(\"FirebaseDynamicLinks/Sources/Public/\")\n@has_firestore_changes = hasChangesIn([\"Firestore/\", \"FirebaseFirestore.podspec\"])\n@has_firestore_api_changes = hasChangesIn(\"Firestore/Source/Public/\")\n@has_functions_changes = hasChangesIn([\"FirebaseFunctions\"])\n@has_functions_api_changes = hasChangesIn(\"FirebaseFunctions/Sources/Public/\")\n@has_inappmessaging_changes = hasChangesIn([\"FirebaseInAppMessaging\"])\n@has_inappmessaging_api_changes = hasChangesIn([\"FirebaseInAppMessaging/Sources/Public/\"])\n@has_installations_changes = hasChangesIn(\"FirebaseInstallations\")\n@has_installations_api_changes = hasChangesIn(\"FirebaseInstallations/Source/Library/Public/\")\n@has_messaging_changes = hasChangesIn(\"FirebaseMessaging\")\n@has_messaging_api_changes = hasChangesIn(\"FirebaseMessaging/Sources/Public/\")\n@has_performance_changes = hasChangesIn(\"FirebasePerformance\")\n@has_performance_api_changes = hasChangesIn(\"FirebasePerformance/Sources/Public/\")\n@has_remoteconfig_changes = hasChangesIn(\"FirebaseRemoteConfig\")\n@has_remoteconfig_api_changes = hasChangesIn(\"FirebaseRemoteConfig/Sources/Public/\")\n@has_storage_changes = hasChangesIn(\"FirebaseStorage\")\n@has_vertexai_changes = hasChangesIn(\"FirebaseVertexAI\")\n\n@has_releasetooling_changes = hasChangesIn(\"ReleaseTooling/\")\n@has_public_additions = hasAdditionsIn(\"Public/\")\n\n@has_umbrella_changes =\n    @product_list.reduce(false) { |accum, product| accum || hasChangesIn(\"Firebase#{product}.h\") }\n\n# Convenient flag for all API changes.\n@has_api_changes = @has_abtesting_api_changes ||\n                     @has_appcheck_api_changes ||\n                     @has_auth_api_changes ||\n                     @has_appdistribution_api_changes ||\n                     @has_core_api_changes ||\n                     @has_crashlytics_api_changes ||\n                     @has_database_api_changes ||\n                     @has_dynamiclinks_api_changes ||\n                     @has_firestore_api_changes ||\n                     @has_functions_api_changes ||\n                     @has_inappmessaging_api_changes ||\n                     @has_installations_api_changes ||\n                     @has_messaging_api_changes ||\n                     @has_performance_api_changes ||\n                     @has_remoteconfig_api_changes ||\n                     @has_storage_api_changes ||\n                     @has_gdt_api_changes\n\n# A FileList containing ObjC, ObjC++ or C++ changes.\nsdk_changes = (git.modified_files +\n               git.added_files +\n               git.deleted_files).select do |line|\n  line.end_with?(\".h\") ||\n    line.end_with?(\".m\") ||\n    line.end_with?(\".mm\") ||\n    line.end_with?(\".cc\") ||\n    line.end_with?(\".swift\")\nend\n\n# Whether or not the PR has modified SDK source files.\nhas_sdk_changes = !sdk_changes.empty?\n\n### Actions\n\n# Warn if a changelog is left out on a non-trivial PR that has modified\n# SDK source files (podspec, markdown, etc changes are excluded).\nif has_sdk_changes\n  if !has_changelog_changes && !declared_trivial\n    warning = \"Did you forget to add a changelog entry? (Add #no-changelog\"\\\n      \" to the PR description to silence this warning.)\"\n    warn(warning)\n  end\nend\n\n# Warn if a new public header file is added but no umbrella header changes\n# are detected. Prevents regression of #10301\nif @has_public_additions && !@has_umbrella_changes\n  error = \"New public headers were added, \"\\\n      \"did you remember to add them to the umbrella header?\"\n  warn(error)\nend\n\n# Error on license edits\nfail(\"LICENSE changes are explicitly disallowed.\") if has_license_changes\n\n# Label PRs based on diff files\nsuggested_labels = labelsForModifiedFiles()\nif !suggested_labels.empty?\n  addLabels(suggested_labels)\nend\n"
        },
        {
          "name": "Example",
          "type": "tree",
          "content": null
        },
        {
          "name": "Firebase.podspec",
          "type": "blob",
          "size": 7.0244140625,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'Firebase'\n  s.version          = '11.7.0'\n  s.summary          = 'Firebase'\n\n  s.description      = <<-DESC\nSimplify your app development, grow your user base, and monetize more effectively with Firebase.\n                       DESC\n\n  s.homepage         = 'https://firebase.google.com'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n\n  s.preserve_paths = [\n    \"CoreOnly/CHANGELOG.md\",\n    \"CoreOnly/NOTICES\",\n    \"CoreOnly/README.md\"\n  ]\n  s.social_media_url = 'https://twitter.com/Firebase'\n  s.ios.deployment_target = '12.0'\n  s.osx.deployment_target = '10.15'\n  s.tvos.deployment_target = '13.0'\n\n  s.cocoapods_version = '>= 1.12.0'\n\n  s.swift_version = '5.9'\n\n  s.default_subspec = 'Core'\n\n  s.subspec 'Core' do |ss|\n    ss.ios.deployment_target = '12.0'\n    ss.osx.deployment_target = '10.15'\n    ss.tvos.deployment_target = '13.0'\n    ss.ios.dependency 'FirebaseAnalytics', '~> 11.7.0'\n    ss.osx.dependency 'FirebaseAnalytics', '~> 11.7.0'\n    ss.tvos.dependency 'FirebaseAnalytics', '~> 11.7.0'\n    ss.dependency 'Firebase/CoreOnly'\n  end\n\n  s.subspec 'CoreOnly' do |ss|\n    ss.dependency 'FirebaseCore', '~> 11.7.0'\n    ss.source_files = 'CoreOnly/Sources/Firebase.h'\n    ss.preserve_paths = 'CoreOnly/Sources/module.modulemap'\n    if ENV['FIREBASE_POD_REPO_FOR_DEV_POD'] then\n      ss.user_target_xcconfig = {\n        'HEADER_SEARCH_PATHS' => \"$(inherited) \\\"\" + ENV['FIREBASE_POD_REPO_FOR_DEV_POD'] + \"/CoreOnly/Sources\\\"\"\n      }\n    else\n      ss.user_target_xcconfig = {\n        'HEADER_SEARCH_PATHS' => \"$(inherited) ${PODS_ROOT}/Firebase/CoreOnly/Sources\"\n      }\n    end\n    ss.ios.deployment_target = '12.0'\n    ss.osx.deployment_target = '10.15'\n    ss.tvos.deployment_target = '13.0'\n    ss.watchos.deployment_target = '7.0'\n  end\n\n  s.subspec 'Analytics' do |ss|\n    ss.ios.deployment_target = '12.0'\n    ss.osx.deployment_target = '10.15'\n    ss.tvos.deployment_target = '13.0'\n    ss.dependency 'Firebase/Core'\n  end\n\n  s.subspec 'AnalyticsWithAdIdSupport' do |ss|\n    ss.ios.deployment_target = '12.0'\n    ss.osx.deployment_target = '10.15'\n    ss.tvos.deployment_target = '13.0'\n    ss.dependency 'Firebase/Core'\n  end\n\n  s.subspec 'AnalyticsWithoutAdIdSupport' do |ss|\n    ss.ios.deployment_target = '12.0'\n    ss.osx.deployment_target = '10.15'\n    ss.tvos.deployment_target = '13.0'\n    ss.dependency 'FirebaseAnalytics/WithoutAdIdSupport', '~> 11.7.0'\n    ss.dependency 'Firebase/CoreOnly'\n  end\n\n  s.subspec 'ABTesting' do |ss|\n    ss.dependency 'Firebase/CoreOnly'\n    ss.dependency 'FirebaseABTesting', '~> 11.7.0'\n    # Standard platforms PLUS watchOS.\n    ss.ios.deployment_target = '13.0'\n    ss.osx.deployment_target = '10.15'\n    ss.tvos.deployment_target = '13.0'\n    ss.watchos.deployment_target = '7.0'\n  end\n\n  s.subspec 'AppDistribution' do |ss|\n    ss.dependency 'Firebase/CoreOnly'\n    ss.ios.dependency 'FirebaseAppDistribution', '~> 11.7.0-beta'\n    ss.ios.deployment_target = '13.0'\n  end\n\n  s.subspec 'AppCheck' do |ss|\n    ss.dependency 'Firebase/CoreOnly'\n    ss.dependency 'FirebaseAppCheck', '~> 11.7.0'\n    ss.ios.deployment_target = '13.0'\n    ss.osx.deployment_target = '10.15'\n    ss.tvos.deployment_target = '13.0'\n    ss.watchos.deployment_target = '7.0'\n  end\n\n  s.subspec 'Auth' do |ss|\n    ss.dependency 'Firebase/CoreOnly'\n    ss.dependency 'FirebaseAuth', '~> 11.7.0'\n    # Standard platforms PLUS watchOS.\n    ss.ios.deployment_target = '13.0'\n    ss.osx.deployment_target = '10.15'\n    ss.tvos.deployment_target = '13.0'\n    ss.watchos.deployment_target = '7.0'\n  end\n\n  s.subspec 'Crashlytics' do |ss|\n    ss.dependency 'Firebase/CoreOnly'\n    ss.dependency 'FirebaseCrashlytics', '~> 11.7.0'\n    # Standard platforms PLUS watchOS.\n    ss.ios.deployment_target = '12.0'\n    ss.osx.deployment_target = '10.15'\n    ss.tvos.deployment_target = '13.0'\n    ss.watchos.deployment_target = '7.0'\n  end\n\n  s.subspec 'Database' do |ss|\n    ss.dependency 'Firebase/CoreOnly'\n    ss.dependency 'FirebaseDatabase', '~> 11.7.0'\n    # Standard platforms PLUS watchOS 7.\n    ss.ios.deployment_target = '13.0'\n    ss.osx.deployment_target = '10.15'\n    ss.tvos.deployment_target = '13.0'\n    ss.watchos.deployment_target = '7.0'\n  end\n\n  s.subspec 'DynamicLinks' do |ss|\n    ss.dependency 'Firebase/CoreOnly'\n    ss.ios.dependency 'FirebaseDynamicLinks', '~> 11.7.0'\n    ss.ios.deployment_target = '13.0'\n  end\n\n  s.subspec 'Firestore' do |ss|\n    ss.dependency 'Firebase/CoreOnly'\n    ss.dependency 'FirebaseFirestore', '~> 11.7.0'\n    ss.ios.deployment_target = '13.0'\n    ss.osx.deployment_target = '10.15'\n    ss.tvos.deployment_target = '13.0'\n  end\n\n  s.subspec 'Functions' do |ss|\n    ss.dependency 'Firebase/CoreOnly'\n    ss.dependency 'FirebaseFunctions', '~> 11.7.0'\n    # Standard platforms PLUS watchOS.\n    ss.ios.deployment_target = '13.0'\n    ss.osx.deployment_target = '10.15'\n    ss.tvos.deployment_target = '13.0'\n    ss.watchos.deployment_target = '7.0'\n  end\n\n  s.subspec 'InAppMessaging' do |ss|\n    ss.dependency 'Firebase/CoreOnly'\n    ss.ios.dependency 'FirebaseInAppMessaging', '~> 11.7.0-beta'\n    ss.tvos.dependency 'FirebaseInAppMessaging', '~> 11.7.0-beta'\n    ss.ios.deployment_target = '13.0'\n    ss.tvos.deployment_target = '13.0'\n  end\n\n  s.subspec 'Installations' do |ss|\n    ss.dependency 'Firebase/CoreOnly'\n    ss.dependency 'FirebaseInstallations', '~> 11.7.0'\n  end\n\n  s.subspec 'Messaging' do |ss|\n    ss.dependency 'Firebase/CoreOnly'\n    ss.dependency 'FirebaseMessaging', '~> 11.7.0'\n    # Standard platforms PLUS watchOS.\n    ss.ios.deployment_target = '13.0'\n    ss.osx.deployment_target = '10.15'\n    ss.tvos.deployment_target = '13.0'\n    ss.watchos.deployment_target = '7.0'\n  end\n\n  s.subspec 'MLModelDownloader' do |ss|\n    ss.dependency 'Firebase/CoreOnly'\n    ss.dependency 'FirebaseMLModelDownloader', '~> 11.7.0-beta'\n    # Standard platforms PLUS watchOS.\n    ss.ios.deployment_target = '13.0'\n    ss.osx.deployment_target = '10.15'\n    ss.tvos.deployment_target = '13.0'\n    ss.watchos.deployment_target = '7.0'\n  end\n\n  s.subspec 'Performance' do |ss|\n    ss.dependency 'Firebase/CoreOnly'\n    ss.ios.dependency 'FirebasePerformance', '~> 11.7.0'\n    ss.tvos.dependency 'FirebasePerformance', '~> 11.7.0'\n    ss.ios.deployment_target = '13.0'\n    ss.tvos.deployment_target = '13.0'\n  end\n\n  s.subspec 'RemoteConfig' do |ss|\n    ss.dependency 'Firebase/CoreOnly'\n    ss.dependency 'FirebaseRemoteConfig', '~> 11.7.0'\n    # Standard platforms PLUS watchOS.\n    ss.ios.deployment_target = '13.0'\n    ss.osx.deployment_target = '10.15'\n    ss.tvos.deployment_target = '13.0'\n    ss.watchos.deployment_target = '7.0'\n  end\n\n  s.subspec 'Storage' do |ss|\n    ss.dependency 'Firebase/CoreOnly'\n    ss.dependency 'FirebaseStorage', '~> 11.7.0'\n    # Standard platforms PLUS watchOS.\n    ss.ios.deployment_target = '13.0'\n    ss.osx.deployment_target = '10.15'\n    ss.tvos.deployment_target = '13.0'\n    ss.watchos.deployment_target = '7.0'\n  end\n\nend\n"
        },
        {
          "name": "FirebaseABTesting.podspec",
          "type": "blob",
          "size": 2.314453125,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseABTesting'\n  s.version          = '11.7.0'\n  s.summary          = 'Firebase ABTesting'\n\n  s.description      = <<-DESC\nA/B testing is a Firebase service that lets you run experiments across users of\nyour mobile apps. It lets you learn how well one or more changes to\nyour app work with a smaller set of users before you roll out changes to all\nusers. You can run experiments to find the most effective ways to use\nFirebase Cloud Messaging and Firebase Remote Config in your app.\n                       DESC\n\n  s.homepage         = 'https://firebase.google.com'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n\n  s.social_media_url = 'https://twitter.com/Firebase'\n\n  ios_deployment_target = '13.0'\n  osx_deployment_target = '10.15'\n  tvos_deployment_target = '13.0'\n  watchos_deployment_target = '7.0'\n\n  s.ios.deployment_target = ios_deployment_target\n  s.osx.deployment_target = osx_deployment_target\n  s.tvos.deployment_target = tvos_deployment_target\n  s.watchos.deployment_target = watchos_deployment_target\n\n  s.cocoapods_version = '>= 1.12.0'\n  s.prefix_header_file = false\n\n  s.swift_version = '5.9'\n\n  base_dir = \"FirebaseABTesting/Sources/\"\n  s.source_files = [\n    base_dir + '**/*.[mh]',\n   'Interop/Analytics/Public/*.h',\n   'FirebaseCore/Extension/*.h',\n  ]\n  s.resource_bundles = {\n    \"#{s.module_name}_Privacy\" => 'FirebaseABTesting/Sources/Resources/PrivacyInfo.xcprivacy'\n  }\n  s.requires_arc = base_dir + '*.m'\n  s.public_header_files = base_dir + 'Public/FirebaseABTesting/*.h'\n  s.pod_target_xcconfig = {\n    'GCC_C_LANGUAGE_STANDARD' => 'c99',\n    'HEADER_SEARCH_PATHS' => '\"${PODS_TARGET_SRCROOT}\"'\n  }\n  s.dependency 'FirebaseCore', '~> 11.7.0'\n\n  s.test_spec 'unit' do |unit_tests|\n    unit_tests.scheme = { :code_coverage => true }\n    unit_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => '10.15',\n      :tvos => tvos_deployment_target\n    }\n    unit_tests.source_files = 'FirebaseABTesting/Tests/Unit/**/*.[mh]'\n    unit_tests.resources = 'FirebaseABTesting/Tests/Unit/Resources/*.txt'\n    unit_tests.requires_app_host = true\n    unit_tests.dependency 'OCMock'\n  end\nend\n"
        },
        {
          "name": "FirebaseABTesting",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseAnalytics.podspec",
          "type": "blob",
          "size": 1.7060546875,
          "content": "Pod::Spec.new do |s|\n    s.name             = 'FirebaseAnalytics'\n    s.version          = '11.7.0'\n    s.summary          = 'Firebase Analytics for iOS'\n\n    s.description      = <<-DESC\n    Firebase Analytics is a free, out-of-the-box analytics solution that\n    inspires actionable insights based on app usage and user engagement.\n    DESC\n\n    s.homepage         = 'https://firebase.google.com/features/analytics/'\n    s.license          = { :type => 'Copyright', :text => 'Copyright 2022 Google' }\n    s.authors          = 'Google, Inc.'\n\n    s.source           = {\n        :http => 'https://dl.google.com/firebase/ios/analytics/f18d9810c6c5311c/FirebaseAnalytics-11.7.0.tar.gz'\n    }\n\n    s.cocoapods_version = '>= 1.12.0'\n    s.swift_version     = '5.9'\n\n    s.ios.deployment_target  = '12.0'\n    s.osx.deployment_target  = '10.15'\n    s.tvos.deployment_target = '13.0'\n\n    s.libraries  = 'c++', 'sqlite3', 'z'\n    s.frameworks = 'StoreKit'\n\n    s.dependency 'FirebaseCore', '~> 11.7.0'\n    s.dependency 'FirebaseInstallations', '~> 11.0'\n    s.dependency 'GoogleUtilities/AppDelegateSwizzler', '~> 8.0'\n    s.dependency 'GoogleUtilities/MethodSwizzler', '~> 8.0'\n    s.dependency 'GoogleUtilities/NSData+zlib', '~> 8.0'\n    s.dependency 'GoogleUtilities/Network', '~> 8.0'\n    s.dependency 'nanopb', '~> 3.30910.0'\n\n    s.default_subspecs = 'AdIdSupport'\n\n    s.subspec 'AdIdSupport' do |ss|\n        ss.dependency 'GoogleAppMeasurement', '11.7.0'\n        ss.vendored_frameworks = 'Frameworks/FirebaseAnalytics.xcframework'\n    end\n\n    s.subspec 'WithoutAdIdSupport' do |ss|\n        ss.dependency 'GoogleAppMeasurement/WithoutAdIdSupport', '11.7.0'\n        ss.vendored_frameworks = 'Frameworks/FirebaseAnalytics.xcframework'\n    end\n\nend\n"
        },
        {
          "name": "FirebaseAnalytics",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseAnalyticsOnDeviceConversion.podspec",
          "type": "blob",
          "size": 1.0537109375,
          "content": "Pod::Spec.new do |s|\n    s.name             = 'FirebaseAnalyticsOnDeviceConversion'\n    s.version          = '11.7.0'\n    s.summary          = 'On device conversion measurement plugin for FirebaseAnalytics. Not intended for direct use.'\n\n    s.description      = <<-DESC\n    On device conversion measurement plugin for FirebaseAnalytics. This pod does not expose any headers and isn't intended for direct use, but rather as a plugin of FirebaseAnalytics.\n                         DESC\n\n    s.homepage         = 'https://firebase.google.com/features/analytics/'\n    s.license          = { :type => 'Copyright', :text => 'Copyright 2022 Google' }\n    s.authors          = 'Google, Inc.'\n\n    s.source           = {\n      :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n      :tag => 'CocoaPods-' + s.version.to_s\n    }\n\n    s.cocoapods_version = '>= 1.12.0'\n\n    s.dependency 'GoogleAppMeasurementOnDeviceConversion', '11.7.0'\n\n    s.static_framework = true\n\n    s.ios.deployment_target = '12.0'\n\n    s.source_files = 'FirebaseAnalyticsOnDeviceConversionWrapper/*'\nend\n"
        },
        {
          "name": "FirebaseAnalyticsOnDeviceConversionWrapper",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseAnalyticsWithoutAdIdSupportWrapper",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseAnalyticsWrapper",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseAppCheck.podspec",
          "type": "blob",
          "size": 2.923828125,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseAppCheck'\n  s.version          = '11.7.0'\n  s.summary          = 'Firebase App Check SDK.'\n\n  s.description      = <<-DESC\n  Firebase SDK for anti-abuse compatibility.\n                       DESC\n\n  s.homepage         = 'https://firebase.google.com'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n  s.social_media_url = 'https://twitter.com/Firebase'\n\n  ios_deployment_target = '13.0'\n  osx_deployment_target = '10.15'\n  tvos_deployment_target = '13.0'\n  watchos_deployment_target = '7.0'\n\n  s.swift_version = '5.9'\n\n  s.ios.deployment_target = ios_deployment_target\n  s.osx.deployment_target = osx_deployment_target\n  s.tvos.deployment_target = tvos_deployment_target\n  s.watchos.deployment_target = watchos_deployment_target\n\n  s.cocoapods_version = '>= 1.12.0'\n  s.prefix_header_file = false\n\n  base_dir = \"FirebaseAppCheck/\"\n\n  s.source_files = [\n    base_dir + 'Sources/**/*.[mh]',\n    'FirebaseCore/Extension/*.h',\n  ]\n  s.public_header_files = base_dir + 'Sources/Public/FirebaseAppCheck/*.h'\n\n  s.ios.weak_framework = 'DeviceCheck'\n  s.osx.weak_framework = 'DeviceCheck'\n  s.tvos.weak_framework = 'DeviceCheck'\n\n  s.dependency 'AppCheckCore', '~> 11.0'\n  s.dependency 'FirebaseAppCheckInterop', '~> 11.0'\n  s.dependency 'FirebaseCore', '~> 11.7.0'\n  s.dependency 'GoogleUtilities/Environment', '~> 8.0'\n  s.dependency 'GoogleUtilities/UserDefaults', '~> 8.0'\n\n  s.pod_target_xcconfig = {\n    'GCC_C_LANGUAGE_STANDARD' => 'c99',\n    'HEADER_SEARCH_PATHS' => '\"${PODS_TARGET_SRCROOT}\"'\n  }\n\n  s.test_spec 'unit' do |unit_tests|\n    unit_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target\n    }\n    unit_tests.source_files = [\n      base_dir + 'Tests/Unit/**/*.[mh]',\n      'SharedTestUtilities/AppCheckFake/*',\n      'SharedTestUtilities/AppCheckBackoffWrapperFake/*',\n      'SharedTestUtilities/Date/*',\n      'SharedTestUtilities/URLSession/*',\n    ]\n\n    unit_tests.resources = base_dir + 'Tests/Unit/Fixture/**/*'\n    unit_tests.dependency 'OCMock'\n    unit_tests.requires_app_host = true\n  end\n\n  s.test_spec 'integration' do |integration_tests|\n    integration_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target\n    }\n    integration_tests.source_files = [\n      base_dir + 'Tests/Integration/**/*.swift',\n    ]\n    integration_tests.requires_app_host = true\n  end\n\n  s.test_spec 'swift-unit' do |swift_unit_tests|\n    swift_unit_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target\n    }\n    swift_unit_tests.source_files = [\n      base_dir + 'Tests/Unit/Swift/**/*.swift',\n    ]\n  end\n\nend\n"
        },
        {
          "name": "FirebaseAppCheck",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseAppCheckInterop.podspec",
          "type": "blob",
          "size": 1.9150390625,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseAppCheckInterop'\n  s.version          = '11.7.0'\n  s.summary          = 'Interfaces that allow other Firebase SDKs to use AppCheck functionality.'\n\n  s.description      = <<-DESC\n  Not for public use.\n  A set of protocols that other Firebase SDKs can use to interoperate with FirebaseAppCheck in a safe\n  and reliable manner.\n                       DESC\n\n  s.homepage         = 'https://firebase.google.com'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  # NOTE that these should not be used externally, this is for Firebase pods to depend on each\n  # other.\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n  s.social_media_url = 'https://twitter.com/Firebase'\n\n  ios_deployment_target = '13.0'\n  osx_deployment_target = '10.15'\n  tvos_deployment_target = '13.0'\n  watchos_deployment_target = '7.0'\n\n  s.ios.deployment_target = ios_deployment_target\n  s.osx.deployment_target = osx_deployment_target\n  s.tvos.deployment_target = tvos_deployment_target\n  s.watchos.deployment_target = watchos_deployment_target\n\n  s.source_files = 'FirebaseAppCheck/Interop/**/*.[hm]'\n  s.public_header_files = 'FirebaseAppCheck/Interop/Public/FirebaseAppCheckInterop/*.h'\n\n  s.test_spec 'objc-unit' do |unit_tests|\n    unit_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target\n    }\n    unit_tests.source_files = [\n      'FirebaseAppCheck/Tests/Interop/ObjC/**/*.[hm]',\n    ]\n  end\n\n  s.test_spec 'swift-unit' do |swift_unit_tests|\n    swift_unit_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target\n    }\n    swift_unit_tests.source_files = [\n      'FirebaseAppCheck/Tests/Interop/Swift/**/*.swift',\n    ]\n  end\nend\n"
        },
        {
          "name": "FirebaseAppDistribution.podspec",
          "type": "blob",
          "size": 1.669921875,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseAppDistribution'\n  s.version          = '11.7.0-beta'\n  s.summary          = 'App Distribution for Firebase iOS SDK.'\n\n  s.description      = <<-DESC\niOS SDK for App Distribution for Firebase.\n                       DESC\n\n  s.homepage         = 'https://developers.google.com/'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n\n  s.ios.deployment_target = '13.0'\n\n  s.swift_version = '5.9'\n\n  s.cocoapods_version = '>= 1.12.0'\n  s.prefix_header_file = false\n\n  base_dir = \"FirebaseAppDistribution/Sources/\"\n  s.source_files = [\n    base_dir + '**/*.{c,h,m,mm}',\n    'FirebaseCore/Extension/*.h',\n    'FirebaseInstallations/Source/Library/Private/*.h',\n  ]\n  s.public_header_files = base_dir + 'Public/FirebaseAppDistribution/*.h'\n\n  s.dependency 'FirebaseCore', '~> 11.7.0'\n  s.dependency 'GoogleUtilities/AppDelegateSwizzler', '~> 8.0'\n  s.dependency 'GoogleUtilities/UserDefaults', '~> 8.0'\n  s.dependency 'FirebaseInstallations', '~> 11.0'\n\n  s.pod_target_xcconfig = {\n    'GCC_C_LANGUAGE_STANDARD' => 'c99',\n    'HEADER_SEARCH_PATHS' => '\"${PODS_TARGET_SRCROOT}\"'\n  }\n\n  s.test_spec 'unit' do |unit_tests|\n   unit_tests.scheme = { :code_coverage => true }\n   unit_tests.source_files = [\n     'FirebaseAppDistribution/Tests/Unit*/*.[mh]',\n     'FirebaseAppDistribution/Tests/Unit/Swift*/*.swift',\n   ]\n   unit_tests.requires_app_host = true\n   unit_tests.resources = 'FirebaseAppDistribution/Tests/Unit/Resources/*'\n   unit_tests.dependency 'OCMock'\n  end\n\nend\n"
        },
        {
          "name": "FirebaseAppDistribution",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseAppDistributionInternal",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseAuth.podspec",
          "type": "blob",
          "size": 2.9228515625,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseAuth'\n  s.version          = '11.7.0'\n  s.summary          = 'Apple platform client for Firebase Authentication'\n\n  s.description      = <<-DESC\nFirebase Authentication allows you to manage your own account system without any backend code. It\nsupports email and password accounts, as well as several 3rd party authentication mechanisms.\n                       DESC\n\n  s.homepage         = 'https://firebase.google.com'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n\n  s.social_media_url = 'https://twitter.com/Firebase'\n\n  ios_deployment_target = '13.0'\n  osx_deployment_target = '10.15'\n  tvos_deployment_target = '13.0'\n  watchos_deployment_target = '7.0'\n\n  s.swift_version = '5.9'\n\n  s.ios.deployment_target = ios_deployment_target\n  s.osx.deployment_target = osx_deployment_target\n  s.tvos.deployment_target = tvos_deployment_target\n  s.watchos.deployment_target = watchos_deployment_target\n\n  s.cocoapods_version = '>= 1.12.0'\n  s.prefix_header_file = false\n\n  source = 'FirebaseAuth/Sources/'\n  s.source_files = [\n    source + 'Swift/**/*.swift',\n    source + 'ObjC/**/*.m', # Implementations for deprecated global symbols\n    source + 'Public/FirebaseAuth/*.h'\n  ]\n  s.public_header_files = source + 'Public/FirebaseAuth/*.h'\n  s.resource_bundles = {\n    \"#{s.module_name}_Privacy\" => 'FirebaseAuth/Sources/Resources/PrivacyInfo.xcprivacy'\n  }\n  s.preserve_paths = [\n    'FirebaseAuth/README.md',\n    'FirebaseAuth/CHANGELOG.md'\n  ]\n  s.pod_target_xcconfig = {\n    'GCC_C_LANGUAGE_STANDARD' => 'c99',\n    # The second path is to find FirebaseAuth-Swift.h from a pod gen project\n    'HEADER_SEARCH_PATHS' => '\"${PODS_TARGET_SRCROOT}\" \"${OBJECT_FILE_DIR_normal}/${NATIVE_ARCH_ACTUAL}\"',\n    'OTHER_SWIFT_FLAGS' => \"$(inherited) #{ENV.key?('FIREBASE_CI') ? '-D FIREBASE_CI -warnings-as-errors' : ''}\"\n  }\n  s.framework = 'Security'\n  s.ios.framework = 'SafariServices'\n  s.dependency 'FirebaseAuthInterop', '~> 11.0'\n  s.dependency 'FirebaseAppCheckInterop', '~> 11.0'\n  s.dependency 'FirebaseCore', '~> 11.7.0'\n  s.dependency 'FirebaseCoreExtension', '~> 11.7.0'\n  s.dependency 'GoogleUtilities/AppDelegateSwizzler', '~> 8.0'\n  s.dependency 'GoogleUtilities/Environment', '~> 8.0'\n  s.dependency 'GTMSessionFetcher/Core', '>= 3.4', '< 5.0'\n  s.ios.dependency 'RecaptchaInterop', '~> 100.0'\n  s.test_spec 'unit' do |unit_tests|\n    unit_tests.scheme = { :code_coverage => true }\n    # Unit tests can't run on watchOS.\n    unit_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target\n    }\n    unit_tests.source_files = 'FirebaseAuth/Tests/Unit*/**/*.{m,h,swift}'\n    # app_host is needed for tests with keychain\n    unit_tests.requires_app_host = true\n  end\nend\n"
        },
        {
          "name": "FirebaseAuth",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseAuthInterop.podspec",
          "type": "blob",
          "size": 1.107421875,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseAuthInterop'\n  s.version          = '11.7.0'\n  s.summary          = 'Interfaces that allow other Firebase SDKs to use Auth functionality.'\n\n  s.description      = <<-DESC\n  Not for public use.\n  A set of protocols that other Firebase SDKs can use to interoperate with FirebaseAuth in a safe\n  and reliable manner.\n                       DESC\n\n  s.homepage         = 'https://firebase.google.com'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  # NOTE that these should not be used externally, this is for Firebase pods to depend on each\n  # other.\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n  s.social_media_url = 'https://twitter.com/Firebase'\n  s.ios.deployment_target = '13.0'\n  s.osx.deployment_target = '10.15'\n  s.tvos.deployment_target = '13.0'\n  s.watchos.deployment_target = '7.0'\n\n  s.source_files = 'FirebaseAuth/Interop/**/*.[hm]'\n  s.public_header_files = 'FirebaseAuth/Interop/Public/FirebaseAuthInterop/*.h'\nend\n"
        },
        {
          "name": "FirebaseAuthTestingSupport.podspec",
          "type": "blob",
          "size": 1.65625,
          "content": "Pod::Spec.new do |s|\n  s.name                    = 'FirebaseAuthTestingSupport'\n  s.version                 = '2.0.0'\n  s.summary                 = 'Firebase SDKs testing support types and utilities.'\n\n  s.description      = <<-DESC\n  Type declarations and utilities needed for unit testing of the code dependent on Firebase SDKs.\n  This podspec is for internal testing only and should not be published.\n                       DESC\n\n  s.homepage                = 'https://developers.google.com/'\n  s.license                 = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors                 = 'Google, Inc.'\n\n  s.source                  = {\n    :git => 'https://github.com/Firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n\n  ios_deployment_target = '13.0'\n  osx_deployment_target = '10.15'\n  tvos_deployment_target = '13.0'\n  watchos_deployment_target = '7.0'\n\n  s.swift_version = '5.9'\n\n  s.ios.deployment_target = ios_deployment_target\n  s.osx.deployment_target = osx_deployment_target\n  s.tvos.deployment_target = tvos_deployment_target\n  s.watchos.deployment_target = watchos_deployment_target\n\n  s.cocoapods_version       = '>= 1.12.0'\n  s.prefix_header_file      = false\n  s.requires_arc            = true\n\n  base_dir = 'FirebaseTestingSupport/Auth/'\n\n  s.source_files = [\n    base_dir + 'Sources/**/*.swift',\n  ]\n\n  s.dependency 'FirebaseAuth', '~> 11.0'\n\n  s.test_spec 'unit' do |unit_tests|\n    unit_tests.scheme = { :code_coverage => true }\n    unit_tests.platforms = {:ios => ios_deployment_target, :osx => osx_deployment_target, :tvos => tvos_deployment_target}\n    unit_tests.source_files = [\n      base_dir + 'Tests/**/*.swift'\n    ]\n  end\nend\n"
        },
        {
          "name": "FirebaseCombineSwift.podspec",
          "type": "blob",
          "size": 3.8232421875,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseCombineSwift'\n  s.version          = '11.7.0'\n  s.summary          = 'Swift extensions with Combine support for Firebase'\n\n  s.description      = <<-DESC\nFirebase Combine is only supported with Swift Package Manager. This podspec is\nfor internal testing only. It should not be published.\n                       DESC\n\n  s.homepage         = 'https://firebase.google.com'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n\n  s.social_media_url = 'https://twitter.com/Firebase'\n\n  s.swift_version       = '5.9'\n\n  ios_deployment_target = '13.0'\n  osx_deployment_target = '10.15'\n  tvos_deployment_target = '13.0'\n  watchos_deployment_target = '7.0'\n\n  s.ios.deployment_target = ios_deployment_target\n  s.osx.deployment_target = osx_deployment_target\n  s.tvos.deployment_target = tvos_deployment_target\n  s.watchos.deployment_target = watchos_deployment_target\n\n  s.cocoapods_version = '>= 1.12.0'\n  s.prefix_header_file = false\n\n  source = 'FirebaseCombineSwift/Sources/'\n  s.exclude_files = [\n    source + 'Core/**/*.swift',\n  ]\n  s.source_files = [\n    source + '**/*.swift',\n    source + '**/*.m',\n  ]\n  s.public_header_files = [\n    source + '**/*.h',\n  ]\n\n  s.framework = 'Foundation'\n  s.ios.framework = 'UIKit'\n  s.osx.framework = 'AppKit'\n  s.tvos.framework = 'UIKit'\n\n  s.dependency 'FirebaseCore', '~> 11.7.0'\n  s.dependency 'FirebaseAuth', '~> 11.0'\n  s.dependency 'FirebaseFunctions', '~> 11.0'\n  s.dependency 'FirebaseFirestore', '~> 11.0'\n  s.dependency 'FirebaseStorage', '~> 11.0'\n\n  s.pod_target_xcconfig = {\n    'HEADER_SEARCH_PATHS' => '\"${PODS_TARGET_SRCROOT}\"',\n  }\n\n  s.test_spec 'unit' do |unit_tests|\n    unit_tests.scheme = { :code_coverage => true }\n    unit_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target\n    }\n    #TODO: Auth unit tests need to be ported from depending on ObjC internal implementation.\n    unit_tests.source_files = [\n      'FirebaseCombineSwift/Tests/Unit/Firestore/*.swift',\n      'FirebaseCombineSwift/Tests/Unit/Storage/*.swift',\n      'FirebaseCombineSwift/Tests/Unit/**/*.h',\n      'FirebaseCombineSwift/Tests/Unit/Credentials.swift',\n      'FirebaseCombineSwift/Tests/Unit/FirebaseApp+Tests.swift',\n      'SharedTestUtilities/FIROptionsMock.[mh]',\n      'SharedTestUtilities/FIRComponentTestUtilities.[mh]',\n    ]\n    unit_tests.exclude_files = 'FirebaseCombineSwift/Tests/Unit/**/*Template.swift'\n    unit_tests.requires_app_host = true\n    unit_tests.pod_target_xcconfig = {\n      'SWIFT_OBJC_BRIDGING_HEADER' => '$(PODS_TARGET_SRCROOT)/FirebaseCombineSwift/Tests/Unit/FirebaseCombine-unit-Bridging-Header.h'\n    }\n    unit_tests.dependency 'OCMock'\n    unit_tests.dependency 'FirebaseAuthTestingSupport'\n    unit_tests.dependency 'FirebaseFirestoreTestingSupport'\n  end\n\n  s.test_spec 'integration' do |int_tests|\n    int_tests.scheme = { :code_coverage => true }\n    int_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target\n    }\n    int_tests.source_files = [\n      'FirebaseCombineSwift/Tests/Integration/Storage/StorageIntegration.swift',\n      'FirebaseStorage/Tests/Integration/Credentials.swift'\n    ]\n    int_tests.requires_app_host = true\n    # Resources are shared with FirebaseStorage's integration tests.\n    int_tests.resources = 'FirebaseStorage/Tests/Integration/Resources/1mb.dat',\n                          'FirebaseStorage/Tests/Integration/Resources/GoogleService-Info.plist',\n                          'FirebaseStorage/Tests/Integration/Resources/HomeImprovement.numbers'\n    int_tests.dependency 'FirebaseAuth', '~> 11.0'\n  end\nend\n"
        },
        {
          "name": "FirebaseCombineSwift",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseCore.podspec",
          "type": "blob",
          "size": 3.3310546875,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseCore'\n  s.version          = '11.7.0'\n  s.summary          = 'Firebase Core'\n\n  s.description      = <<-DESC\nFirebase Core includes FIRApp and FIROptions which provide central configuration for other Firebase services.\n                       DESC\n\n  s.homepage         = 'https://firebase.google.com'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n\n  s.social_media_url = 'https://twitter.com/Firebase'\n\n  ios_deployment_target = '12.0'\n  osx_deployment_target = '10.15'\n  tvos_deployment_target = '13.0'\n  watchos_deployment_target = '7.0'\n\n  s.ios.deployment_target = ios_deployment_target\n  s.osx.deployment_target = osx_deployment_target\n  s.tvos.deployment_target = tvos_deployment_target\n  s.watchos.deployment_target = watchos_deployment_target\n\n  s.cocoapods_version = '>= 1.12.0'\n  s.prefix_header_file = false\n\n  s.source_files = [\n    'FirebaseCore/Sources/**/*.[mh]',\n    'FirebaseCore/Extension/*.h'\n  ]\n\n  s.resource_bundles = {\n    \"#{s.module_name}_Privacy\" => 'FirebaseCore/Sources/Resources/PrivacyInfo.xcprivacy'\n  }\n\n  s.swift_version = '5.9'\n\n  s.public_header_files = 'FirebaseCore/Sources/Public/FirebaseCore/*.h'\n\n  s.framework = 'Foundation'\n  s.ios.framework = 'UIKit'\n  s.osx.framework = 'AppKit'\n  s.tvos.framework = 'UIKit'\n  s.watchos.framework = 'WatchKit'\n\n  # Remember to also update version in `cmake/external/GoogleUtilities.cmake`\n  s.dependency 'GoogleUtilities/Environment', '~> 8.0'\n  s.dependency 'GoogleUtilities/Logger', '~> 8.0'\n  s.dependency 'FirebaseCoreInternal', '~> 11.7.0'\n\n  s.pod_target_xcconfig = {\n    'GCC_C_LANGUAGE_STANDARD' => 'c99',\n    'GCC_PREPROCESSOR_DEFINITIONS' => 'Firebase_VERSION=' + s.version.to_s,\n    'HEADER_SEARCH_PATHS' => '\"${PODS_TARGET_SRCROOT}\"',\n    'OTHER_CFLAGS' => '-fno-autolink'\n  }\n\n  s.test_spec 'unit' do |unit_tests|\n    unit_tests.scheme = { :code_coverage => true }\n    unit_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => '10.15',\n      :tvos => tvos_deployment_target\n    }\n    unit_tests.source_files = [\n      'FirebaseCore/Tests/Unit/**/*.[mh]',\n      'SharedTestUtilities/FIROptionsMock.[mh]',\n    ]\n\n    unit_tests.requires_app_host = true\n    unit_tests.dependency 'OCMock'\n    unit_tests.resources = 'FirebaseCore/Tests/Unit/Resources/GoogleService-Info.plist'\n  end\n\n  s.test_spec 'swift-unit' do |swift_unit_tests|\n    swift_unit_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target\n    }\n    swift_unit_tests.source_files = [\n      'FirebaseCore/Tests/SwiftUnit/**/*.swift',\n      'FirebaseCore/Tests/SwiftUnit/**/*.h',\n      'FirebaseCore/Tests/SwiftUnit/SwiftTestingUtilities/*',\n      'SharedTestUtilities/ExceptionCatcher.[mh]',\n      'SharedTestUtilities/FIROptionsMock.[mh]',\n    ]\n    swift_unit_tests.pod_target_xcconfig = {\n      'SWIFT_OBJC_BRIDGING_HEADER' => '$(PODS_TARGET_SRCROOT)/FirebaseCore/Tests/SwiftUnit/FirebaseCore-unit-Bridging-Header.h'\n    }\n    swift_unit_tests.requires_app_host = true\n    swift_unit_tests.dependency 'OCMock'\n    swift_unit_tests.resources = 'FirebaseCore/Tests/Unit/Resources/GoogleService-Info.plist'\n  end\nend\n"
        },
        {
          "name": "FirebaseCore",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseCoreExtension.podspec",
          "type": "blob",
          "size": 1.259765625,
          "content": "Pod::Spec.new do |s|\n    s.name             = 'FirebaseCoreExtension'\n    s.version          = '11.7.0'\n    s.summary          = 'Extended FirebaseCore APIs for Firebase product SDKs'\n\n    s.description      = <<-DESC\n    Not for public use.\n    Common FirebaseCore APIs for use in Firebase product SDKs.\n    When depending on `FirebaseCoreExtension`, also depend on `FirebaseCore` to\n    avoid potential linker issues.\n                         DESC\n\n    s.homepage         = 'https://firebase.google.com'\n    s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n    s.authors          = 'Google, Inc.'\n\n    s.source           = {\n      :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n      :tag => 'CocoaPods-' + s.version.to_s\n    }\n    s.social_media_url = 'https://twitter.com/Firebase'\n\n    s.swift_version = '5.9'\n\n    s.ios.deployment_target = '12.0'\n    s.osx.deployment_target = '10.15'\n    s.tvos.deployment_target = '13.0'\n    s.watchos.deployment_target = '7.0'\n\n    s.source_files = 'FirebaseCore/Extension/*.[hm]'\n    s.public_header_files = 'FirebaseCore/Extension/*.h'\n\n    s.resource_bundles = {\n      \"#{s.module_name}_Privacy\" => 'FirebaseCore/Extension/Resources/PrivacyInfo.xcprivacy'\n    }\n\n    s.dependency 'FirebaseCore', '~> 11.7.0'\n  end\n"
        },
        {
          "name": "FirebaseCoreInternal.podspec",
          "type": "blob",
          "size": 2.05078125,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseCoreInternal'\n  s.version          = '11.7.0'\n  s.summary          = 'APIs for internal FirebaseCore usage.'\n\n  s.description      = <<-DESC\n  Not for public use.\n  Common APIs for internal FirebaseCore usage.\n                       DESC\n\n  s.homepage         = 'https://firebase.google.com'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n  s.social_media_url = 'https://twitter.com/Firebase'\n\n  ios_deployment_target = '12.0'\n  osx_deployment_target = '10.15'\n  tvos_deployment_target = '13.0'\n  watchos_deployment_target = '7.0'\n\n  s.ios.deployment_target = ios_deployment_target\n  s.osx.deployment_target = osx_deployment_target\n  s.tvos.deployment_target = tvos_deployment_target\n  s.watchos.deployment_target = watchos_deployment_target\n\n  s.source_files = [\n    'FirebaseCore/Internal/Sources/**/*.swift'\n  ]\n\n  s.resource_bundles = {\n    \"#{s.module_name}_Privacy\" => 'FirebaseCore/Internal/Sources/Resources/PrivacyInfo.xcprivacy'\n  }\n\n  s.swift_version = '5.9'\n\n  s.dependency 'GoogleUtilities/NSData+zlib', '~> 8.0'\n\n  s.test_spec 'Unit' do |unit_tests|\n    unit_tests.scheme = { :code_coverage => true }\n    unit_tests.platforms = {\n      :ios => '13.0',\n      :osx => '10.15',\n      :tvos => '13.0'\n    }\n    unit_tests.source_files = [\n      'FirebaseCore/Internal/Tests/Unit/**/*.swift',\n      'FirebaseCore/Internal/Tests/Common/**/*.swift',\n    ]\n    unit_tests.requires_app_host = true\n  end\n\n  s.test_spec 'Integration' do |int_tests|\n    int_tests.scheme = { :code_coverage => true }\n    int_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target\n    }\n\n    int_tests.source_files = [\n      'FirebaseCore/Internal/Tests/Integration/**/*.swift',\n      'FirebaseCore/Internal/Tests/Common/**/*.swift',\n    ]\n    int_tests.requires_app_host = true\n  end\nend\n"
        },
        {
          "name": "FirebaseCrashlytics.podspec",
          "type": "blob",
          "size": 4.60546875,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseCrashlytics'\n  s.version          = '11.7.0'\n  s.summary          = 'Best and lightest-weight crash reporting for mobile, desktop and tvOS.'\n  s.description      = 'Firebase Crashlytics helps you track, prioritize, and fix stability issues that erode app quality.'\n  s.homepage         = 'https://firebase.google.com/'\n  s.license          = { :type => 'Apache-2.0', :file => 'Crashlytics/LICENSE' }\n  s.authors          = 'Google, Inc.'\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n\n  ios_deployment_target = '12.0'\n  osx_deployment_target = '10.15'\n  tvos_deployment_target = '13.0'\n  watchos_deployment_target = '7.0'\n\n  s.swift_version = '5.9'\n\n  s.ios.deployment_target = ios_deployment_target\n  s.osx.deployment_target = osx_deployment_target\n  s.tvos.deployment_target = tvos_deployment_target\n  s.watchos.deployment_target = watchos_deployment_target\n\n  s.cocoapods_version = '>= 1.12.0'\n  s.prefix_header_file = false\n\n  s.source_files = [\n    'Crashlytics/Crashlytics/**/*.{c,h,m,mm,swift}',\n    'Crashlytics/Protogen/**/*.{c,h,m,mm}',\n    'Crashlytics/Shared/**/*.{c,h,m,mm}',\n    'Crashlytics/third_party/**/*.{c,h,m,mm}',\n    'FirebaseCore/Extension/*.h',\n    'FirebaseInstallations/Source/Library/Private/*.h',\n    'Interop/Analytics/Public/*.h',\n  ]\n\n  s.resource_bundles = {\n    \"#{s.module_name}_Privacy\" => 'Crashlytics/Resources/PrivacyInfo.xcprivacy'\n  }\n\n  s.public_header_files = [\n    'Crashlytics/Crashlytics/Public/FirebaseCrashlytics/*.h'\n  ]\n\n  s.preserve_paths = [\n    'Crashlytics/README.md',\n    'run',\n    'upload-symbols',\n    'CrashlyticsInputFiles.xcfilelist',\n  ]\n\n  # Ensure the run script and upload-symbols are callable via\n  # ${PODS_ROOT}/FirebaseCrashlytics/<name>\n  s.prepare_command = <<-PREPARE_COMMAND_END\n    cp -f ./Crashlytics/run ./run\n    cp -f ./Crashlytics/upload-symbols ./upload-symbols\n    cp -f ./Crashlytics/CrashlyticsInputFiles.xcfilelist ./CrashlyticsInputFiles.xcfilelist\n  PREPARE_COMMAND_END\n\n  s.dependency 'FirebaseCore', '~> 11.7.0'\n  s.dependency 'FirebaseInstallations', '~> 11.0'\n  s.dependency 'FirebaseSessions', '~> 11.0'\n  s.dependency 'FirebaseRemoteConfigInterop', '~> 11.0'\n  s.dependency 'PromisesObjC', '~> 2.4'\n  s.dependency 'GoogleDataTransport', '~> 10.0'\n  s.dependency 'GoogleUtilities/Environment', '~> 8.0'\n  s.dependency 'nanopb', '~> 3.30910.0'\n\n  s.libraries = 'c++', 'z'\n  s.ios.frameworks = 'Security', 'SystemConfiguration'\n  s.macos.frameworks = 'Security', 'SystemConfiguration'\n  s.osx.frameworks = 'Security', 'SystemConfiguration'\n  s.watchos.frameworks = 'Security'\n\n  s.ios.pod_target_xcconfig = {\n    'GCC_C_LANGUAGE_STANDARD' => 'c99',\n    'GCC_PREPROCESSOR_DEFINITIONS' =>\n      'CLS_SDK_NAME=\"Crashlytics iOS SDK\" ' +\n      # For nanopb:\n      'PB_FIELD_32BIT=1 PB_NO_PACKED_STRUCTS=1 PB_ENABLE_MALLOC=1',\n    'HEADER_SEARCH_PATHS' => '\"${PODS_TARGET_SRCROOT}\"',\n  }\n\n  s.osx.pod_target_xcconfig = {\n    'GCC_C_LANGUAGE_STANDARD' => 'c99',\n    'GCC_PREPROCESSOR_DEFINITIONS' =>\n      'CLS_SDK_NAME=\"Crashlytics Mac SDK\" ' +\n      # For nanopb:\n      'PB_FIELD_32BIT=1 PB_NO_PACKED_STRUCTS=1 PB_ENABLE_MALLOC=1',\n    'HEADER_SEARCH_PATHS' => '\"${PODS_TARGET_SRCROOT}\"',\n  }\n\n  s.tvos.pod_target_xcconfig = {\n    'GCC_C_LANGUAGE_STANDARD' => 'c99',\n    'GCC_PREPROCESSOR_DEFINITIONS' =>\n      'CLS_SDK_NAME=\"Crashlytics tvOS SDK\" ' +\n      # For nanopb:\n      'PB_FIELD_32BIT=1 PB_NO_PACKED_STRUCTS=1 PB_ENABLE_MALLOC=1',\n    'HEADER_SEARCH_PATHS' => '\"${PODS_TARGET_SRCROOT}\"',\n  }\n\n  s.watchos.pod_target_xcconfig = {\n    'GCC_C_LANGUAGE_STANDARD' => 'c99',\n    'GCC_PREPROCESSOR_DEFINITIONS' =>\n      'CLS_SDK_NAME=\"Crashlytics watchOS SDK\" ' +\n      # For nanopb:\n      'PB_FIELD_32BIT=1 PB_NO_PACKED_STRUCTS=1 PB_ENABLE_MALLOC=1',\n    'OTHER_LD_FLAGS' => '$(inherited) -sectcreate __TEXT __info_plist',\n    'HEADER_SEARCH_PATHS' => '\"${PODS_TARGET_SRCROOT}\"',\n  }\n\n  s.test_spec 'unit' do |unit_tests|\n    unit_tests.scheme = { :code_coverage => true }\n    # Unit tests can't run on watchOS.\n    unit_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => '10.15',\n      :tvos => tvos_deployment_target\n    }\n    unit_tests.source_files = 'Crashlytics/UnitTests/*.[mh]',\n                              'Crashlytics/UnitTests/*/*.[mh]',\n                              'Crashlytics/UnitTestsSwift/*.swift'\n    unit_tests.resources = 'Crashlytics/UnitTests/Data/*',\n                           'Crashlytics/UnitTests/*.clsrecord',\n                           'Crashlytics/UnitTests/FIRCLSMachO/machO_data/*'\n    unit_tests.requires_app_host = true\n  end\nend\n"
        },
        {
          "name": "FirebaseDatabase.podspec",
          "type": "blob",
          "size": 3.6630859375,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseDatabase'\n  s.version          = '11.7.0'\n  s.summary          = 'Firebase Realtime Database'\n\n  s.description      = <<-DESC\nSimplify your iOS development, grow your user base, and monetize more effectively with Firebase.\n                       DESC\n\n  s.homepage         = 'https://firebase.google.com'\n  s.license          = { :type => 'Apache-2.0', :file => 'FirebaseDatabase/LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n  s.social_media_url = 'https://twitter.com/Firebase'\n\n  ios_deployment_target = '13.0'\n  osx_deployment_target = '10.15'\n  tvos_deployment_target = '13.0'\n  watchos_deployment_target = '7.0'\n\n  s.swift_version = '5.9'\n\n  s.ios.deployment_target = ios_deployment_target\n  s.osx.deployment_target = osx_deployment_target\n  s.tvos.deployment_target = tvos_deployment_target\n  s.watchos.deployment_target = watchos_deployment_target\n\n  s.cocoapods_version = '>= 1.12.0'\n  s.prefix_header_file = false\n\n  base_dir = \"FirebaseDatabase/Sources/\"\n  s.source_files = [\n    base_dir + '**/*.[mh]',\n    base_dir + 'third_party/Wrap-leveldb/APLevelDB.mm',\n    'FirebaseDatabase/Swift/Sources/**/*.swift',\n    'FirebaseAuth/Interop/**/*.h',\n    'FirebaseCore/Extension/*.h',\n  ]\n  s.public_header_files = base_dir + 'Public/FirebaseDatabase/*.h'\n  s.libraries = ['c++', 'icucore']\n  s.ios.frameworks = 'CFNetwork', 'Security', 'SystemConfiguration'\n  s.tvos.frameworks = 'CFNetwork', 'Security', 'SystemConfiguration'\n  s.macos.frameworks = 'CFNetwork', 'Security', 'SystemConfiguration'\n  s.watchos.frameworks = 'CFNetwork', 'Security', 'WatchKit'\n  s.dependency 'leveldb-library', '~> 1.22'\n  s.dependency 'FirebaseCore', '~> 11.7.0'\n  s.dependency 'FirebaseAppCheckInterop', '~> 11.0'\n  s.dependency 'FirebaseSharedSwift', '~> 11.0'\n  s.dependency 'GoogleUtilities/UserDefaults', '~> 8.0'\n  s.pod_target_xcconfig = {\n    'GCC_C_LANGUAGE_STANDARD' => 'c99',\n    'HEADER_SEARCH_PATHS' => '\"${PODS_TARGET_SRCROOT}\"'\n  }\n\n  s.test_spec 'unit' do |unit_tests|\n    unit_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target\n    }\n    unit_tests.scheme = { :code_coverage => true }\n    unit_tests.source_files = [\n      'FirebaseDatabase/Tests/Unit/*.[mh]',\n      'FirebaseDatabase/Tests/Unit/Swift/*',\n      'FirebaseDatabase/Tests/Helpers/*.[mh]',\n      'SharedTestUtilities/AppCheckFake/*.[mh]',\n      'SharedTestUtilities/FIRAuthInteropFake.[mh]',\n      'SharedTestUtilities/FIRComponentTestUtilities.[mh]',\n      'SharedTestUtilities/FIROptionsMock.[mh]',\n    ]\n    unit_tests.dependency 'FirebaseAppCheckInterop', '~> 11.0'\n    unit_tests.dependency 'OCMock'\n    unit_tests.resources = 'FirebaseDatabase/Tests/Resources/syncPointSpec.json',\n                           'FirebaseDatabase/Tests/Resources/GoogleService-Info.plist'\n  end\n\n  s.test_spec 'integration' do |int_tests|\n    int_tests.platforms = {:ios => ios_deployment_target, :osx => osx_deployment_target, :tvos => tvos_deployment_target}\n    int_tests.scheme = { :code_coverage => true }\n    int_tests.requires_app_host = true\n    int_tests.source_files = [\n      'FirebaseDatabase/Tests/Integration/*.[mh]',\n      'FirebaseDatabase/Tests/Helpers/*.[mh]',\n      'SharedTestUtilities/AppCheckFake/*.[mh]',\n      'SharedTestUtilities/FIRAuthInteropFake.[mh]',\n      'SharedTestUtilities/FIRComponentTestUtilities.[mh]',\n      'SharedTestUtilities/FIROptionsMock.[mh]',\n    ]\n    int_tests.dependency 'OCMock'\n    int_tests.resources = 'FirebaseDatabase/Tests/Resources/GoogleService-Info.plist'\n  end\nend\n"
        },
        {
          "name": "FirebaseDatabase",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseDynamicLinks.podspec",
          "type": "blob",
          "size": 2.08203125,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseDynamicLinks'\n  s.version          = '11.7.0'\n  s.summary          = 'Firebase Dynamic Links'\n\n  s.description      = <<-DESC\nFirebase Dynamic Links are deep links that enhance user experience and increase engagement by retaining context post-install, across platforms.\n                       DESC\n\n  s.homepage         = 'https://firebase.google.com'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n  s.social_media_url = 'https://twitter.com/Firebase'\n  s.ios.deployment_target = '13.0'\n\n  s.swift_version = '5.9'\n\n  s.cocoapods_version = '>= 1.12.0'\n  s.prefix_header_file = false\n\n  s.source_files = [\n    'FirebaseDynamicLinks/Sources/**/*.[mh]',\n    'Interop/Analytics/Public/*.h',\n    'FirebaseCore/Extension/*.h',\n  ]\n  s.public_header_files = 'FirebaseDynamicLinks/Sources/Public/FirebaseDynamicLinks/*.h'\n  s.resource_bundles = {\n    \"#{s.module_name}_Privacy\" => 'FirebaseDynamicLinks/Sources/Resources/PrivacyInfo.xcprivacy'\n  }\n  s.frameworks = 'QuartzCore'\n  s.weak_framework = 'WebKit'\n  s.dependency 'FirebaseCore', '~> 11.7.0'\n\n  s.pod_target_xcconfig = {\n    'GCC_C_LANGUAGE_STANDARD' => 'c99',\n    'GCC_PREPROCESSOR_DEFINITIONS' => 'FIRDynamicLinks3P GIN_SCION_LOGGING',\n    'HEADER_SEARCH_PATHS' => '\"${PODS_TARGET_SRCROOT}\"'\n  }\n\n  s.test_spec 'unit' do |unit_tests|\n    unit_tests.scheme = { :code_coverage => true }\n    unit_tests.source_files = [\n      'FirebaseDynamicLinks/Tests/Unit/*.[mh]',\n    ]\n    unit_tests.requires_app_host = true\n    unit_tests.resources = 'FirebaseDynamicLinks/Tests/Unit/GoogleService-Info.plist',\n                           # Supply plist for custom domain testing.\n                           'FirebaseDynamicLinks/Tests/Unit/DL-Info.plist'\n    unit_tests.dependency 'OCMock'\n    unit_tests.dependency 'GoogleUtilities/MethodSwizzler', '~> 8.0'\n    unit_tests.dependency 'GoogleUtilities/SwizzlerTestHelpers', '~> 8.0'\n  end\nend\n"
        },
        {
          "name": "FirebaseDynamicLinks",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseFirestore.podspec",
          "type": "blob",
          "size": 1.3955078125,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseFirestore'\n  s.version          = '11.7.0'\n  s.summary          = 'Google Cloud Firestore'\n  s.description      = <<-DESC\nGoogle Cloud Firestore is a NoSQL document database built for automatic scaling, high performance, and ease of application development.\n                       DESC\n  s.homepage         = 'https://developers.google.com/'\n  s.license          = { :type => 'Apache-2.0', :file => 'Firestore/LICENSE' }\n  s.authors          = 'Google, Inc.'\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n\n  s.ios.deployment_target = '13.0'\n  s.osx.deployment_target = '10.15'\n  s.tvos.deployment_target = '13.0'\n\n  s.swift_version = '5.9'\n\n  s.weak_framework = 'FirebaseFirestoreInternal'\n\n  s.cocoapods_version = '>= 1.12.0'\n  s.prefix_header_file = false\n\n  s.public_header_files = 'FirebaseFirestoreInternal/**/*.h'\n\n  s.requires_arc            = true\n  s.source_files = [\n    'FirebaseFirestoreInternal/**/*.[mh]',\n    'Firestore/Swift/Source/**/*.swift',\n  ]\n  s.resource_bundles = {\n    \"#{s.module_name}_Privacy\" => 'Firestore/Swift/Source/Resources/PrivacyInfo.xcprivacy'\n  }\n\n  s.dependency 'FirebaseCore', '~> 11.7.0'\n  s.dependency 'FirebaseCoreExtension', '~> 11.7.0'\n  s.dependency 'FirebaseFirestoreInternal', '11.7.0'\n  s.dependency 'FirebaseSharedSwift', '~> 11.0'\n\nend\n"
        },
        {
          "name": "FirebaseFirestoreInternal.podspec",
          "type": "blob",
          "size": 5.1748046875,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseFirestoreInternal'\n  s.version          = '11.7.0'\n  s.summary          = 'Google Cloud Firestore'\n\n  s.description      = <<-DESC\nGoogle Cloud Firestore is a NoSQL document database built for automatic scaling, high performance, and ease of application development.\n                       DESC\n\n  s.homepage         = 'https://developers.google.com/'\n  s.license          = { :type => 'Apache-2.0', :file => 'Firestore/LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n\n  s.ios.deployment_target = '13.0'\n  s.osx.deployment_target = '10.15'\n  s.tvos.deployment_target = '13.0'\n\n  s.swift_version = '5.9'\n\n  s.cocoapods_version = '>= 1.12.0'\n  s.prefix_header_file = false\n\n  # Header files that constitute the interface to this module. Only Objective-C\n  # headers belong here, since FirebaseFirestore is primarily an Objective-C\n  # framework.\n  s.public_header_files = 'Firestore/Source/Public/FirebaseFirestore/*.h'\n\n  # source_files contains most of the header and source files for the project.\n  # This includes files named in `public_header_files`.\n  #\n  # Each header in this list must be globally unique, even within customer\n  # projects. This generally means that only Objective-C Headers with a `FIR`\n  # or `FST` prefix can be in `source_files`. Non-public C++ headers that have\n  # no filename prefix must be in `preserve_paths`. See\n  # https://github.com/firebase/firebase-ios-sdk/issues/4035 for more details.\n  #\n  # Note: headers from FirebaseCore can be in this list because while they're\n  # not globally unique, each copy will be the same. It doesn't matter which\n  # version wins in the global header map. The benefit of keeping them here is\n  # that \"quick open\" by filename in Xcode will continue to work.\n  s.source_files = [\n    'FirebaseCore/Extension/*.h',\n    'FirebaseCore/Sources/FIROptionsInternal.h',\n    'Firestore/Source/Public/FirebaseFirestore/*.h',\n    'Firestore/Source/**/*.{m,mm}',\n    'Firestore/Protos/nanopb/**/*.cc',\n    'Firestore/core/include/**/*.{cc,mm}',\n    'Firestore/core/src/**/*.{cc,mm}',\n    'FirebaseAuth/Interop/**/*.h',\n  ]\n\n  # Internal headers that aren't necessarily globally unique. Most C++ internal\n  # headers should be here to avoid polluting the global header map with\n  # unprefixed filenames.\n  #\n  # These filenames won't be available in Xcode's \"quick open\" but the types\n  # inside these files will be available.\n  s.preserve_paths = [\n    'Firestore/Source/API/*.h',\n    'Firestore/Source/Core/*.h',\n    'Firestore/Source/Local/*.h',\n    'Firestore/Source/Remote/*.h',\n    'Firestore/Source/Util/*.h',\n    'Firestore/Protos/nanopb/**/*.h',\n    'Firestore/core/include/**/*.h',\n    'Firestore/core/src/**/*.h',\n    'Firestore/third_party/nlohmann_json/json.hpp',\n  ]\n  s.requires_arc = [\n    'Firestore/Source/**/*',\n    'Firestore/core/src/**/*.mm',\n  ]\n\n  # Exclude alternate implementations for other platforms. These types depend\n  # upon link-time substitution, and there's no provision within CocoaPods for\n  # selecting files dynamically.\n  s.exclude_files = [\n    'Firestore/core/src/api/input_validation_std.cc',\n    'Firestore/core/src/remote/connectivity_monitor_noop.cc',\n    'Firestore/core/src/util/filesystem_win.cc',\n    'Firestore/core/src/util/hard_assert_stdio.cc',\n    'Firestore/core/src/util/log_stdio.cc',\n    'Firestore/core/src/util/secure_random_openssl.cc'\n  ]\n\n  s.resource_bundles = {\n    \"#{s.module_name}_Privacy\" => 'Firestore/Source/Resources/PrivacyInfo.xcprivacy'\n  }\n\n  s.dependency 'FirebaseAppCheckInterop', '~> 11.0'\n  s.dependency 'FirebaseCore', '~> 11.7.0'\n\n  abseil_version = '~> 1.20240116.1'\n  s.dependency 'abseil/algorithm', abseil_version\n  s.dependency 'abseil/base', abseil_version\n  s.dependency 'abseil/container/flat_hash_map', abseil_version\n  s.dependency 'abseil/memory', abseil_version\n  s.dependency 'abseil/meta', abseil_version\n  s.dependency 'abseil/strings/strings', abseil_version\n  s.dependency 'abseil/time', abseil_version\n  s.dependency 'abseil/types', abseil_version\n\n  s.dependency 'gRPC-Core', '~> 1.65.0'\n  s.dependency 'gRPC-C++', '~> 1.65.0'\n  s.dependency 'leveldb-library', '~> 1.22'\n  s.dependency 'nanopb', '~> 3.30910.0'\n\n  s.ios.frameworks = 'SystemConfiguration', 'UIKit'\n  s.osx.frameworks = 'SystemConfiguration'\n  s.tvos.frameworks = 'SystemConfiguration', 'UIKit'\n\n  s.library = 'c++'\n  s.pod_target_xcconfig = {\n    'CLANG_CXX_LANGUAGE_STANDARD' => 'c++14',\n    'CLANG_CXX_LIBRARY' => 'libc++',\n    'GCC_C_LANGUAGE_STANDARD' => 'c99',\n    'GCC_PREPROCESSOR_DEFINITIONS' =>\n      \"FIRFirestore_VERSION=#{s.version} \" +\n      # The nanopb pod sets these defs, so we must too. (We *do* require 16bit\n      # (or larger) fields, so we'd have to set at least PB_FIELD_16BIT\n      # anyways.)\n      'PB_FIELD_32BIT=1 PB_NO_PACKED_STRUCTS=1 PB_ENABLE_MALLOC=1',\n    'HEADER_SEARCH_PATHS' =>\n      '\"${PODS_TARGET_SRCROOT}\" ' +\n      '\"${PODS_TARGET_SRCROOT}/Firestore/Source/Public\" ' +\n      '\"${PODS_ROOT}/nanopb\" ' +\n      '\"${PODS_TARGET_SRCROOT}/Firestore/Protos/nanopb\"'\n  }\n\n  s.compiler_flags = '$(inherited) -Wreorder -Werror=reorder -Wno-comma'\nend\n"
        },
        {
          "name": "FirebaseFirestoreInternal",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseFirestoreTestingSupport.podspec",
          "type": "blob",
          "size": 1.9306640625,
          "content": "Pod::Spec.new do |s|\n  s.name                    = 'FirebaseFirestoreTestingSupport'\n  s.version                 = '1.0.0'\n  s.summary                 = 'Firebase SDKs testing support types and utilities.'\n\n  s.description      = <<-DESC\n  Type declarations and utilities needed for unit testing of the code dependent on Firebase SDKs.\n  This podspec is for internal testing only and should not be published.\n                       DESC\n\n  s.homepage                = 'https://developers.google.com/'\n  s.license                 = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors                 = 'Google, Inc.'\n\n  s.source                  = {\n    :git => 'https://github.com/Firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n\n  ios_deployment_target = '13.0'\n  osx_deployment_target = '10.15'\n  tvos_deployment_target = '13.0'\n  watchos_deployment_target = '7.0'\n\n  s.swift_version = '5.9'\n\n  s.ios.deployment_target = ios_deployment_target\n  s.osx.deployment_target = osx_deployment_target\n  s.tvos.deployment_target = tvos_deployment_target\n  s.watchos.deployment_target = watchos_deployment_target\n\n  s.cocoapods_version       = '>= 1.12.0'\n  s.prefix_header_file      = false\n  s.requires_arc            = true\n\n  base_dir = 'FirebaseTestingSupport/Firestore/'\n\n  s.source_files = [\n    base_dir + 'Sources/**/*.{m,mm,h}',\n    'Firestore/Source/API/*\\+Internal.h'\n  ]\n\n  s.public_header_files = base_dir + '**/*.h'\n\n  s.dependency 'FirebaseFirestore', '~> 11.0'\n\n  s.pod_target_xcconfig = {\n    'GCC_C_LANGUAGE_STANDARD' => 'c99',\n    'OTHER_CFLAGS' => '-fno-autolink',\n    'HEADER_SEARCH_PATHS' =>\n      '\"${PODS_TARGET_SRCROOT}\" '\n  }\n\n  s.test_spec 'unit' do |unit_tests|\n    unit_tests.scheme = { :code_coverage => true }\n    unit_tests.platforms = {:ios => ios_deployment_target, :osx => osx_deployment_target, :tvos => tvos_deployment_target}\n    unit_tests.source_files = [\n      base_dir + 'Tests/**/*.swift'\n    ]\n  end\nend\n"
        },
        {
          "name": "FirebaseFunctions.podspec",
          "type": "blob",
          "size": 1.98828125,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseFunctions'\n  s.version          = '11.7.0'\n  s.summary          = 'Cloud Functions for Firebase'\n\n  s.description      = <<-DESC\nCloud Functions for Firebase.\n                       DESC\n\n  s.homepage         = 'https://developers.google.com/'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  s.source           = {\n    :git => 'https://github.com/Firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n\n  s.swift_version    = '5.9'\n\n  ios_deployment_target = '13.0'\n  osx_deployment_target = '10.15'\n  tvos_deployment_target = '13.0'\n  watchos_deployment_target = '7.0'\n\n  s.ios.deployment_target = ios_deployment_target\n  s.osx.deployment_target = osx_deployment_target\n  s.tvos.deployment_target = tvos_deployment_target\n  s.watchos.deployment_target = watchos_deployment_target\n\n  s.cocoapods_version = '>= 1.12.0'\n  s.prefix_header_file = false\n\n  s.source_files = [\n    'FirebaseFunctions/Sources/**/*.swift',\n  ]\n\n  s.dependency 'FirebaseCore', '~> 11.7.0'\n  s.dependency 'FirebaseCoreExtension', '~> 11.7.0'\n  s.dependency 'FirebaseAppCheckInterop', '~> 11.0'\n  s.dependency 'FirebaseAuthInterop', '~> 11.0'\n  s.dependency 'FirebaseMessagingInterop', '~> 11.0'\n  s.dependency 'FirebaseSharedSwift', '~> 11.0'\n  s.dependency 'GTMSessionFetcher/Core', '>= 3.4', '< 5.0'\n\n  s.test_spec 'objc' do |objc_tests|\n    objc_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => '10.15',\n      :tvos => tvos_deployment_target\n    }\n    objc_tests.source_files = [\n      'FirebaseFunctions/Tests/ObjCIntegration/ObjC*'\n    ]\n    objc_tests.requires_app_host = true\n  end\n\n  s.test_spec 'integration' do |int_tests|\n    int_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target\n    }\n    int_tests.source_files = 'FirebaseFunctions/Tests/Integration/*.swift'\n    int_tests.requires_app_host = true\n  end\nend\n"
        },
        {
          "name": "FirebaseFunctions",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseInAppMessaging.podspec",
          "type": "blob",
          "size": 3.48046875,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseInAppMessaging'\n  s.version          = '11.7.0-beta'\n  s.summary          = 'Firebase In-App Messaging for iOS'\n\n  s.description      = <<-DESC\nFirebaseInAppMessaging is the headless component of Firebase In-App Messaging on iOS client side.\nSee more product details at https://firebase.google.com/products/in-app-messaging/ about Firebase In-App Messaging.\n                       DESC\n\n  s.homepage         = 'https://firebase.google.com'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n  s.social_media_url = 'https://twitter.com/Firebase'\n  s.ios.deployment_target = '13.0'\n  s.tvos.deployment_target = '13.0'\n\n  s.swift_version = '5.9'\n\n  s.cocoapods_version = '>= 1.12.0'\n  s.prefix_header_file = false\n\n  base_dir = \"FirebaseInAppMessaging/\"\n  s.ios.source_files = [\n    base_dir + \"Sources/*.[cmh]\",\n\t  base_dir + \"Sources/Analytics/**/*.[cmh]\",\n\t  base_dir + \"Sources/Data/**/*.[cmh]\",\n\t  base_dir + \"Sources/DefaultUI/**/*.[cmh]\",\n\t  base_dir + \"Sources/DisplayTrigger/**/*.[cmh]\",\n\t  base_dir + \"Sources/Flows/**/*.[cmh]\",\n\t  base_dir + \"Sources/Private/**/*.[cmh]\",\n\t  base_dir + \"Sources/Public/**/*.[cmh]\",\n\t  base_dir + \"Sources/RenderingObjects/**/*.[cmh]\",\n\t  base_dir + \"Sources/Runtime/**/*.[cmh]\",\n\t  base_dir + \"Sources/Util/**/*.[cmh]\",\n    base_dir + \"Swift/Source/**/*.swift\",\n    'Interop/Analytics/Public/*.h',\n    'FirebaseABTesting/Sources/Private/*.h',\n    'FirebaseCore/Extension/*.h',\n    'FirebaseInstallations/Source/Library/Private/*.h',\n  ]\n\n  s.tvos.source_files = [\n    base_dir + \"Sources/*.[cmh]\",\n\t  base_dir + \"Sources/Analytics/**/*.[cmh]\",\n\t  base_dir + \"Sources/Data/**/*.[cmh]\",\n\t  base_dir + \"Sources/DisplayTrigger/**/*.[cmh]\",\n\t  base_dir + \"Sources/Flows/**/*.[cmh]\",\n\t  base_dir + \"Sources/Private/**/*.[cmh]\",\n\t  base_dir + \"Sources/Public/**/*.[cmh]\",\n\t  base_dir + \"Sources/RenderingObjects/**/*.[cmh]\",\n\t  base_dir + \"Sources/Runtime/**/*.[cmh]\",\n\t  base_dir + \"Sources/Util/**/*.[cmh]\",\n    base_dir + \"Swift/Source/**/*.swift\",\n    'Interop/Analytics/Public/*.h',\n    'FirebaseABTesting/Sources/Private/*.h',\n    'FirebaseCore/Extension/*.h',\n    'FirebaseInstallations/Source/Library/Private/*.h',\n  ]\n\n  s.public_header_files = base_dir + 'Sources/Public/FirebaseInAppMessaging/*.h'\n\n  s.ios.resource_bundles = {\n    'InAppMessagingDisplayResources' => [\n       base_dir + 'iOS/Resources/*.{storyboard,png}',\n     ]\n  }\n\n  s.pod_target_xcconfig = {\n    'GCC_PREPROCESSOR_DEFINITIONS' =>\n      '$(inherited) ' +\n      'PB_FIELD_32BIT=1 PB_NO_PACKED_STRUCTS=1 PB_ENABLE_MALLOC=1',\n    'HEADER_SEARCH_PATHS' => '\"${PODS_TARGET_SRCROOT}\"'\n  }\n\n  s.framework = 'UIKit'\n\n  s.dependency 'FirebaseCore', '~> 11.7.0'\n  s.dependency 'FirebaseInstallations', '~> 11.0'\n  s.dependency 'FirebaseABTesting', '~> 11.0'\n  s.dependency 'GoogleUtilities/Environment', '~> 8.0'\n  s.dependency 'GoogleUtilities/UserDefaults', '~> 8.0'\n  s.dependency 'nanopb', '~> 3.30910.0'\n\n  s.test_spec 'unit' do |unit_tests|\n      unit_tests.scheme = { :code_coverage => true }\n      unit_tests.source_files = [\n        'FirebaseInAppMessaging/Tests/Unit/*.[mh]',\n        'FirebaseInAppMessaging/Swift/Tests/Unit/*.swift'\n      ]\n      unit_tests.resources = 'FirebaseInAppMessaging/Tests/Unit/*.txt'\n      unit_tests.requires_app_host = true\n      unit_tests.dependency 'OCMock'\n   end\nend\n"
        },
        {
          "name": "FirebaseInAppMessaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseInstallations.podspec",
          "type": "blob",
          "size": 3.1259765625,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseInstallations'\n  s.version          = '11.7.0'\n  s.summary          = 'Firebase Installations'\n\n  s.description      = <<-DESC\n  Firebase Installations.\n                       DESC\n\n  s.homepage         = 'https://firebase.google.com'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n  s.social_media_url = 'https://twitter.com/Firebase'\n\n  ios_deployment_target = '12.0'\n  osx_deployment_target = '10.15'\n  tvos_deployment_target = '13.0'\n  watchos_deployment_target = '7.0'\n\n  s.swift_version = '5.9'\n\n  s.ios.deployment_target = ios_deployment_target\n  s.osx.deployment_target = osx_deployment_target\n  s.tvos.deployment_target = tvos_deployment_target\n  s.watchos.deployment_target = watchos_deployment_target\n\n  s.cocoapods_version = '>= 1.12.0'\n  s.prefix_header_file = false\n\n  base_dir = \"FirebaseInstallations/Source/\"\n  s.source_files = [\n    base_dir + 'Library/**/*.[mh]',\n    'FirebaseCore/Extension/*.h',\n  ]\n  s.public_header_files = [\n    base_dir + 'Library/Public/FirebaseInstallations/*.h',\n  ]\n  s.resource_bundles = {\n    \"#{s.module_name}_Privacy\" => 'FirebaseInstallations/Source/Library/Resources/PrivacyInfo.xcprivacy'\n  }\n\n  s.framework = 'Security'\n  s.dependency 'FirebaseCore', '~> 11.7.0'\n  s.dependency 'PromisesObjC', '~> 2.4'\n  s.dependency 'GoogleUtilities/Environment', '~> 8.0'\n  s.dependency 'GoogleUtilities/UserDefaults', '~> 8.0'\n\n  preprocessor_definitions = ''\n  s.pod_target_xcconfig = {\n    'GCC_C_LANGUAGE_STANDARD' => 'c99',\n    'GCC_PREPROCESSOR_DEFINITIONS' => preprocessor_definitions,\n    'HEADER_SEARCH_PATHS' => '\"${PODS_TARGET_SRCROOT}\"'\n  }\n\n  s.test_spec 'unit' do |unit_tests|\n    unit_tests.scheme = { :code_coverage => true }\n    unit_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => '10.15',\n      :tvos => tvos_deployment_target\n    }\n    unit_tests.source_files = base_dir + 'Tests/Unit/*.[mh]',\n                              base_dir + 'Tests/Utils/*.[mh]',\n                              base_dir + 'Tests/Unit/Swift/*'\n    unit_tests.resources = base_dir + 'Tests/Fixture/**/*'\n    unit_tests.requires_app_host = true\n    unit_tests.dependency 'OCMock'\n\n    if ENV['FIS_IID_MIGRATION_TESTING'] && ENV['FIS_IID_MIGRATION_TESTING'] == '1' then\n      unit_tests.source_files += base_dir + 'Tests/Unit/IIDStoreTests/*.[mh]'\n    end\n  end\n\n  s.test_spec 'integration' do |int_tests|\n    int_tests.scheme = { :code_coverage => true }\n    int_tests.platforms = {:ios => '10.0', :osx => '10.15', :tvos => '11.0'}\n    int_tests.source_files = base_dir + 'Tests/Integration/**/*.[mh]'\n    int_tests.resources = base_dir + 'Tests/Resources/**/*'\n    if ENV['FIS_INTEGRATION_TESTS_REQUIRED'] && ENV['FIS_INTEGRATION_TESTS_REQUIRED'] == '1' then\n      int_tests.pod_target_xcconfig = {\n      'GCC_PREPROCESSOR_DEFINITIONS' =>\n        'FIR_INSTALLATIONS_INTEGRATION_TESTS_REQUIRED=1'\n      }\n    end\n    int_tests.requires_app_host = true\n    int_tests.dependency 'OCMock'\n  end\nend\n"
        },
        {
          "name": "FirebaseInstallations",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseMLModelDownloader.podspec",
          "type": "blob",
          "size": 2.40234375,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseMLModelDownloader'\n  s.version          = '11.7.0-beta'\n  s.summary          = 'Firebase ML Model Downloader'\n\n  s.description      = <<-DESC\n  This is the new ML Model Downloader CocoaPod.\n                       DESC\n\n  s.homepage         = 'https://firebase.google.com'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n  s.social_media_url = 'https://twitter.com/Firebase'\n  s.swift_version = '5.9'\n\n  ios_deployment_target = '13.0'\n  osx_deployment_target = '10.15'\n  tvos_deployment_target = '13.0'\n  watchos_deployment_target = '7.0'\n\n  s.ios.deployment_target = ios_deployment_target\n  s.osx.deployment_target = osx_deployment_target\n  s.tvos.deployment_target = tvos_deployment_target\n  s.watchos.deployment_target = watchos_deployment_target\n\n  s.cocoapods_version = '>= 1.12.0'\n  s.prefix_header_file = false\n\n  s.source_files = [\n    'FirebaseMLModelDownloader/Sources/**/*.swift',\n  ]\n\n  s.framework = 'Foundation'\n  s.dependency 'FirebaseCore', '~> 11.7.0'\n  s.dependency 'FirebaseCoreExtension', '~> 11.7.0'\n  s.dependency 'FirebaseInstallations', '~> 11.0'\n  s.dependency 'GoogleDataTransport', '~> 10.0'\n  s.dependency 'GoogleUtilities/UserDefaults', '~> 8.0'\n  s.dependency 'SwiftProtobuf', '~> 1.19'\n\n  s.pod_target_xcconfig = {\n    'GCC_C_LANGUAGE_STANDARD' => 'c99',\n    'GCC_PREPROCESSOR_DEFINITIONS' => 'FIRMLModelDownloader_VERSION=' + s.version.to_s,\n    'OTHER_CFLAGS' => '-fno-autolink',\n  }\n\n  s.test_spec 'unit' do |unit_tests|\n    unit_tests.scheme = { :code_coverage => true }\n    unit_tests.platforms = {:ios => ios_deployment_target, :osx => osx_deployment_target, :tvos => tvos_deployment_target}\n    unit_tests.source_files = 'FirebaseMLModelDownloader/Tests/Unit/**/*.swift'\n    unit_tests.requires_app_host = true\n  end\n\n  s.test_spec 'integration' do |int_tests|\n    int_tests.scheme = { :code_coverage => true }\n    int_tests.platforms = {:ios => ios_deployment_target, :osx => osx_deployment_target, :tvos => tvos_deployment_target}\n    int_tests.source_files = 'FirebaseMLModelDownloader/Tests/Integration/**/*.swift'\n    int_tests.resources = 'FirebaseMLModelDownloader/Tests/Integration/Resources/GoogleService-Info.plist'\n    int_tests.requires_app_host = true\n  end\nend\n"
        },
        {
          "name": "FirebaseMLModelDownloader",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseMessaging.podspec",
          "type": "blob",
          "size": 3.6728515625,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseMessaging'\n  s.version          = '11.7.0'\n  s.summary          = 'Firebase Messaging'\n\n  s.description      = <<-DESC\nFirebase Messaging is a service that allows you to send data from your server to your users'\niOS device, and also to receive messages from devices on the same connection. The service handles\nall aspects of queueing of messages and delivery to the target application running on the target\ndevice, and it is completely free.\n                       DESC\n\n  s.homepage         = 'https://firebase.google.com'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n  s.social_media_url = 'https://twitter.com/Firebase'\n\n  ios_deployment_target = '13.0'\n  osx_deployment_target = '10.15'\n  tvos_deployment_target = '13.0'\n  watchos_deployment_target = '7.0'\n\n  s.swift_version = '5.9'\n\n  s.ios.deployment_target = ios_deployment_target\n  s.osx.deployment_target = osx_deployment_target\n  s.tvos.deployment_target = tvos_deployment_target\n  s.watchos.deployment_target = watchos_deployment_target\n\n  s.cocoapods_version = '>= 1.12.0'\n  s.prefix_header_file = false\n\n  base_dir = \"FirebaseMessaging/\"\n  s.source_files = [\n    base_dir + 'Sources/**/*.{c,m,h}',\n    base_dir + 'Sources/Protogen/nanopb/*.h',\n    base_dir + 'Interop/*.h',\n    'Interop/Analytics/Public/*.h',\n    'FirebaseCore/Extension/*.h',\n    'FirebaseInstallations/Source/Library/Private/*.h',\n  ]\n  s.public_header_files = base_dir + 'Sources/Public/FirebaseMessaging/*.h'\n  s.resource_bundles = {\n    \"#{s.module_name}_Privacy\" => 'FirebaseMessaging/Sources/Resources/PrivacyInfo.xcprivacy'\n  }\n  s.library = 'sqlite3'\n  s.pod_target_xcconfig = {\n    'GCC_C_LANGUAGE_STANDARD' => 'c99',\n    'GCC_PREPROCESSOR_DEFINITIONS' =>\n      # for nanopb:\n      'PB_FIELD_32BIT=1 PB_NO_PACKED_STRUCTS=1 PB_ENABLE_MALLOC=1',\n    # Unit tests do library imports using repo-root relative paths.\n    'HEADER_SEARCH_PATHS' => '\"${PODS_TARGET_SRCROOT}\"',\n  }\n  s.ios.framework = 'SystemConfiguration'\n  s.tvos.framework = 'SystemConfiguration'\n  s.osx.framework = 'SystemConfiguration'\n  s.weak_framework = 'UserNotifications'\n  s.dependency 'FirebaseInstallations', '~> 11.0'\n  s.dependency 'FirebaseCore', '~> 11.7.0'\n  s.dependency 'GoogleUtilities/AppDelegateSwizzler', '~> 8.0'\n  s.dependency 'GoogleUtilities/Reachability', '~> 8.0'\n  s.dependency 'GoogleUtilities/Environment', '~> 8.0'\n  s.dependency 'GoogleUtilities/UserDefaults', '~> 8.0'\n  s.dependency 'GoogleDataTransport', '~> 10.0'\n  s.dependency 'nanopb', '~> 3.30910.0'\n\n  s.test_spec 'unit' do |unit_tests|\n    unit_tests.scheme = { :code_coverage => true }\n    unit_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target\n    }\n    unit_tests.source_files = [\n      'FirebaseMessaging/Tests/UnitTests*/*.{m,h,swift}',\n      'SharedTestUtilities/URLSession/*.[mh]',\n    ]\n    unit_tests.requires_app_host = true\n    unit_tests.pod_target_xcconfig = {\n     'CLANG_ENABLE_OBJC_WEAK' => 'YES'\n    }\n    unit_tests.dependency 'OCMock'\n  end\n\n  s.test_spec 'integration' do |int_tests|\n    int_tests.scheme = { :code_coverage => true }\n    int_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target\n    }\n    int_tests.source_files = 'FirebaseMessaging/Tests/IntegrationTests/*.swift'\n    int_tests.requires_app_host = true\n    int_tests.resources = 'FirebaseMessaging/Tests/IntegrationTests/Resources/GoogleService-Info.plist'\n  end\nend\n"
        },
        {
          "name": "FirebaseMessaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseMessagingInterop.podspec",
          "type": "blob",
          "size": 1.1025390625,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseMessagingInterop'\n  s.version          = '11.7.0'\n  s.summary          = 'Interfaces that allow other Firebase SDKs to use Messaging functionality.'\n\n  s.description      = <<-DESC\n  Not for public use.\n  A set of protocols that other Firebase SDKs can use to interoperate with FirebaseMessaging in a safe\n  and reliable manner.\n                       DESC\n\n  s.homepage         = 'https://firebase.google.com'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  # NOTE that these should not be used externally, this is for Firebase pods to depend on each\n  # other.\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n  s.social_media_url = 'https://twitter.com/Firebase'\n  s.ios.deployment_target = '13.0'\n  s.osx.deployment_target = '10.15'\n  s.tvos.deployment_target = '13.0'\n  s.watchos.deployment_target = '7.0'\n\n  s.source_files = 'FirebaseMessaging/Interop/*.[hm]'\n  s.public_header_files = 'FirebaseMessaging/Interop/*.h'\nend\n"
        },
        {
          "name": "FirebasePerformance.podspec",
          "type": "blob",
          "size": 4.2314453125,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebasePerformance'\n  s.version          = '11.7.0'\n  s.summary          = 'Firebase Performance'\n\n  s.description      = <<-DESC\nFirebase Performance library to measure performance of Mobile and Web Apps.\n                       DESC\n\n  s.homepage         = 'https://firebase.google.com'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n  s.social_media_url = 'https://twitter.com/Firebase'\n\n  ios_deployment_target = '13.0'\n  tvos_deployment_target = '13.0'\n\n  s.swift_version = '5.9'\n\n  s.ios.deployment_target = ios_deployment_target\n  s.tvos.deployment_target = tvos_deployment_target\n\n  s.cocoapods_version = '>= 1.12.0'\n  s.prefix_header_file = false\n\n  base_dir = \"FirebasePerformance/\"\n  s.source_files = [\n    base_dir + 'Sources/**/*.[cmh]',\n    'FirebaseCore/Extension/*.h',\n    'FirebaseInstallations/Source/Library/Private/*.h',\n    'FirebaseRemoteConfig/Sources/Private/*.h',\n  ]\n\n  s.requires_arc = [\n    base_dir + 'Sources/**/*.[mh]',\n    base_dir + 'Public/**/*.h',\n  ]\n\n  s.public_header_files = base_dir + 'Sources/Public/FirebasePerformance/*.h'\n\n  preprocessor_definitions = 'FIRPerformance_LIB_VERSION=' + String(s.version)\n  preprocessor_definitions += ' PB_FIELD_32BIT=1 PB_NO_PACKED_STRUCTS=1 PB_ENABLE_MALLOC=1'\n  if ENV['FPR_UNSWIZZLE_AVAILABLE'] && ENV['FPR_UNSWIZZLE_AVAILABLE'] == '1' then\n    preprocessor_definitions += ' UNSWIZZLE_AVAILABLE=1'\n  end\n\n  s.pod_target_xcconfig = {\n    'GCC_C_LANGUAGE_STANDARD' => 'c99',\n    'GCC_PREPROCESSOR_DEFINITIONS' => preprocessor_definitions,\n    # Unit tests do library imports using repo-root relative paths.\n    'HEADER_SEARCH_PATHS' => '\"${PODS_TARGET_SRCROOT}\"',\n  }\n\n  s.ios.framework = 'CoreTelephony'\n  s.framework = 'QuartzCore'\n  s.framework = 'SystemConfiguration'\n  s.dependency 'FirebaseCore', '~> 11.7.0'\n  s.dependency 'FirebaseInstallations', '~> 11.0'\n  s.dependency 'FirebaseRemoteConfig', '~> 11.0'\n  s.dependency 'FirebaseSessions', '~> 11.0'\n  s.dependency 'GoogleDataTransport', '~> 10.0'\n  s.dependency 'GoogleUtilities/Environment', '~> 8.0'\n  s.dependency 'GoogleUtilities/MethodSwizzler', '~> 8.0'\n  s.dependency 'GoogleUtilities/UserDefaults', '~> 8.0'\n  s.dependency 'nanopb', '~> 3.30910.0'\n\n  s.test_spec 'unit' do |unit_tests|\n    unit_tests.platforms = {:ios => ios_deployment_target, :tvos => tvos_deployment_target}\n    unit_tests.scheme = { :code_coverage => true }\n    unit_tests.source_files = [\n      'FirebasePerformance/Tests/Unit/**/*.{m,h,plist}',\n      'SharedTestUtilities/*.[hm]',\n    ]\n    unit_tests.resources = ['FirebasePerformance/Tests/Unit/Server/*File']\n    unit_tests.requires_arc = true\n    unit_tests.requires_app_host = true\n    unit_tests.pod_target_xcconfig = {\n     'CLANG_ENABLE_OBJC_WEAK' => 'YES',\n    }\n    unit_tests.info_plist = {\n      'FPRTestingDummyFeature' => true,\n      'FPRScreenTracesForContainerVC' => true,\n      'FPRDelegateSwizzling' => true,\n      'FPRNSURLConnection' => true,\n      'FPRScreenTracesSwizzling' => true,\n      'FPRScreenTraces' => false,\n    }\n\n    unit_tests.dependency 'GoogleUtilities/SwizzlerTestHelpers'\n    unit_tests.dependency 'OCMock'\n    unit_tests.dependency 'GCDWebServer'\n  end\n\n  s.app_spec 'TestApp' do |app_spec|\n    app_spec.platforms = {:ios => ios_deployment_target, :tvos => tvos_deployment_target}\n    app_spec.source_files = ['FirebasePerformance/Tests/TestApp/Source/**/*.{m,h}']\n    ios_resources = ['FirebasePerformance/Tests/TestApp/Resources/*.*']\n    if ENV['FPR_AUTOPUSH_ENV'] && ENV['FPR_AUTOPUSH_ENV'] == '1' then\n      ios_resources += ['FirebasePerformance/Tests/TestApp/Plists/Autopush/**/*.plist']\n      app_spec.info_plist = {\n        'CFBundleIdentifier' => 'com.google.FIRPerfTestAppAutopush'\n      }\n      app_spec.scheme = {\n        :environment_variables => { \"FPR_AUTOPUSH_ENV\" => \"1\" }\n      }\n    else\n      ios_resources += ['FirebasePerformance/Tests/TestApp/Plists/Prod/**/*.plist']\n      app_spec.info_plist = {\n        'CFBundleIdentifier' => 'com.google.FIRPerfTestApp'\n      }\n    end\n    app_spec.ios.resources = ios_resources\n    app_spec.requires_arc = true\n  end\n\nend\n"
        },
        {
          "name": "FirebasePerformance",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseRemoteConfig.podspec",
          "type": "blob",
          "size": 6.23828125,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseRemoteConfig'\n  s.version          = '11.7.0'\n  s.summary          = 'Firebase Remote Config'\n\n  s.description      = <<-DESC\nFirebase Remote Config is a cloud service that lets you change the\nappearance and behavior of your app without requiring users to download an\napp update.\n                       DESC\n\n  s.homepage         = 'https://firebase.google.com'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n  s.social_media_url = 'https://twitter.com/Firebase'\n  ios_deployment_target = '13.0'\n  osx_deployment_target = '10.15'\n  tvos_deployment_target = '13.0'\n  watchos_deployment_target = '7.0'\n\n  s.swift_version = '5.9'\n\n  s.ios.deployment_target = ios_deployment_target\n  s.osx.deployment_target = osx_deployment_target\n  s.tvos.deployment_target = tvos_deployment_target\n  s.watchos.deployment_target = watchos_deployment_target\n\n  s.cocoapods_version = '>= 1.12.0'\n  s.prefix_header_file = false\n\n  base_dir = \"FirebaseRemoteConfig/Sources/\"\n  s.source_files = [\n    base_dir + '**/*.[mh]',\n    'Interop/Analytics/Public/*.h',\n    'FirebaseABTesting/Sources/Private/*.h',\n    'FirebaseCore/Extension/*.h',\n    'FirebaseInstallations/Source/Library/Private/*.h',\n    'FirebaseRemoteConfig/Swift/**/*.swift',\n  ]\n  s.public_header_files = base_dir + 'Public/FirebaseRemoteConfig/*.h'\n  s.resource_bundles = {\n    \"#{s.module_name}_Privacy\" => 'FirebaseRemoteConfig/Swift/Resources/PrivacyInfo.xcprivacy'\n  }\n  s.pod_target_xcconfig = {\n    'GCC_C_LANGUAGE_STANDARD' => 'c99',\n    'HEADER_SEARCH_PATHS' => '\"${PODS_TARGET_SRCROOT}\"'\n  }\n  s.dependency 'FirebaseABTesting', '~> 11.0'\n  s.dependency 'FirebaseSharedSwift', '~> 11.0'\n  s.dependency 'FirebaseCore', '~> 11.7.0'\n  s.dependency 'FirebaseInstallations', '~> 11.0'\n  s.dependency 'GoogleUtilities/Environment', '~> 8.0'\n  s.dependency 'GoogleUtilities/NSData+zlib', '~> 8.0'\n  s.dependency 'FirebaseRemoteConfigInterop', '~> 11.0'\n\n  s.test_spec 'unit' do |unit_tests|\n    unit_tests.scheme = { :code_coverage => true }\n    unit_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target\n    }\n    # TODO(dmandar) - Update or delete the commented files.\n    unit_tests.source_files =\n        'FirebaseRemoteConfig/Tests/Unit/FIRRemoteConfigComponentTest.m',\n        'FirebaseRemoteConfig/Tests/Unit/RCNConfigContentTest.m',\n        'FirebaseRemoteConfig/Tests/Unit/RCNConfigDBManagerTest.m',\n#        'FirebaseRemoteConfig/Tests/Unit/RCNConfigSettingsTest.m',\n#        'FirebaseRemoteConfig/Tests/Unit/RCNConfigTest.m',\n        'FirebaseRemoteConfig/Tests/Unit/RCNConfigExperimentTest.m',\n        'FirebaseRemoteConfig/Tests/Unit/RCNConfigValueTest.m',\n        'FirebaseRemoteConfig/Tests/Unit/RCNPersonalizationTest.m',\n#        'FirebaseRemoteConfig/Tests/Unit/RCNRemoteConfig+FIRAppTest.m',\n        'FirebaseRemoteConfig/Tests/Unit/RCNRemoteConfigTest.m',\n#        'FirebaseRemoteConfig/Tests/Unit/RCNThrottlingTests.m',\n        'FirebaseRemoteConfig/Tests/Unit/RCNTestUtilities.m',\n        'FirebaseRemoteConfig/Tests/Unit/RCNUserDefaultsManagerTests.m',\n        'FirebaseRemoteConfig/Tests/Unit/RCNTestUtilities.h',\n        'FirebaseRemoteConfig/Tests/Unit/RCNInstanceIDTest.m',\n        'FirebaseRemoteConfig/Tests/SwiftUnit/*.swift'\n    # Supply plist custom plist testing.\n    unit_tests.resources =\n        'FirebaseRemoteConfig/Tests/Unit/Defaults-testInfo.plist',\n        'FirebaseRemoteConfig/Tests/Unit/SecondApp-GoogleService-Info.plist',\n        'FirebaseRemoteConfig/Tests/Unit/TestABTPayload.txt'\n    unit_tests.requires_app_host = true\n    unit_tests.dependency 'OCMock'\n    unit_tests.requires_arc = true\n  end\n\n  # Run Swift API tests on a real backend.\n  s.test_spec 'swift-api-tests' do |swift_api|\n    swift_api.scheme = { :code_coverage => true }\n    swift_api.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target\n    }\n    swift_api.source_files = ['FirebaseRemoteConfig/Tests/Swift/SwiftAPI/*.swift',\n                              'FirebaseRemoteConfig/Tests/Swift/FakeUtils/*.swift',\n                              'FirebaseRemoteConfig/Tests/Swift/ObjC/*.[hm]',\n                             ]\n    # Excludes tests that cannot be include in API tests because it requires fetch remote values from\n    # a real console but only one test can be run without polluting other tests' remote values.\n    swift_api.exclude_files = ['FirebaseRemoteConfig/Tests/Swift/SwiftAPI/PropertyWrapperTests.swift']\n    swift_api.resources = 'FirebaseRemoteConfig/Tests/Swift/Defaults-testInfo.plist'\n    swift_api.requires_app_host = true\n    swift_api.pod_target_xcconfig = {\n      'SWIFT_OBJC_BRIDGING_HEADER' => '$(PODS_TARGET_SRCROOT)/FirebaseRemoteConfig/Tests/Swift/ObjC/Bridging-Header.h',\n      'OTHER_SWIFT_FLAGS' => \"$(inherited) #{ENV.key?('USE_REAL_CONSOLE') ? '-D USE_REAL_CONSOLE' : ''}\",\n      'HEADER_SEARCH_PATHS' => '\"${PODS_TARGET_SRCROOT}\"'\n    }\n    swift_api.dependency 'OCMock'\n  end\n\n  # Run Swift API tests and tests requiring console changes on a Fake Console.\n  s.test_spec 'fake-console-tests' do |fake_console|\n    fake_console.scheme = { :code_coverage => true }\n    fake_console.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target\n    }\n    fake_console.source_files = ['FirebaseRemoteConfig/Tests/Swift/SwiftAPI/*.swift',\n                                 'FirebaseRemoteConfig/Tests/Swift/FakeUtils/*.swift',\n                                 'FirebaseRemoteConfig/Tests/Swift/FakeConsole/*.swift',\n                                 'FirebaseRemoteConfig/Tests/Swift/ObjC/*.[hm]',\n                                ]\n    fake_console.resources = 'FirebaseRemoteConfig/Tests/Swift/Defaults-testInfo.plist'\n    fake_console.requires_app_host = true\n    fake_console.pod_target_xcconfig = {\n      'SWIFT_OBJC_BRIDGING_HEADER' => '$(PODS_TARGET_SRCROOT)/FirebaseRemoteConfig/Tests/Swift/ObjC/Bridging-Header.h',\n      'HEADER_SEARCH_PATHS' => '\"${PODS_TARGET_SRCROOT}\"'\n    }\n    fake_console.dependency 'OCMock'\n  end\n\nend\n"
        },
        {
          "name": "FirebaseRemoteConfig",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseRemoteConfigInterop.podspec",
          "type": "blob",
          "size": 1.2080078125,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseRemoteConfigInterop'\n  s.version          = '11.7.0'\n  s.summary          = 'Interfaces that allow other Firebase SDKs to use Remote Config functionality.'\n\n  s.description      = <<-DESC\n  Not for public use.\n  A set of protocols that other Firebase SDKs can use to interoperate with FirebaseRemoteConfig in a safe\n  and reliable manner.\n                       DESC\n\n  s.homepage         = 'https://firebase.google.com'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  # NOTE that these should not be used externally, this is for Firebase pods to depend on each\n  # other.\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n\n  s.swift_version = '5.9'\n  s.cocoapods_version = '>= 1.12.0'\n  s.prefix_header_file = false\n\n  s.social_media_url = 'https://twitter.com/Firebase'\n\n  # The ios deployment target must support Crashlytics.\n  s.ios.deployment_target = '12.0'\n  s.osx.deployment_target = '10.15'\n  s.tvos.deployment_target = '13.0'\n  s.watchos.deployment_target = '7.0'\n\n  s.source_files = 'FirebaseRemoteConfig/Interop/*.swift'\nend\n"
        },
        {
          "name": "FirebaseRemoteConfigSwift",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseSessions.podspec",
          "type": "blob",
          "size": 2.3232421875,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseSessions'\n  s.version          = '11.7.0'\n  s.summary          = 'Firebase Sessions'\n\n  s.description      = <<-DESC\n  Not for public use.\n  SDK for sending events for Firebase App Quality Sessions.\n                       DESC\n\n  s.homepage         = 'https://firebase.google.com'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n  s.social_media_url = 'https://twitter.com/Firebase'\n\n  ios_deployment_target = '12.0'\n  osx_deployment_target = '10.15'\n  tvos_deployment_target = '13.0'\n  watchos_deployment_target = '7.0'\n\n  s.swift_version = '5.9'\n\n  s.ios.deployment_target = ios_deployment_target\n  s.osx.deployment_target = osx_deployment_target\n  s.tvos.deployment_target = tvos_deployment_target\n  s.watchos.deployment_target = watchos_deployment_target\n\n  s.cocoapods_version = '>= 1.12.0'\n  s.prefix_header_file = false\n\n  base_dir = \"FirebaseSessions/\"\n  s.source_files = [\n    base_dir + 'Sources/**/*.{swift}',\n    base_dir + 'SourcesObjC/**/*.{c,h,m,mm}',\n  ]\n\n  s.dependency 'FirebaseCore', '~> 11.7.0'\n  s.dependency 'FirebaseCoreExtension', '~> 11.7.0'\n  s.dependency 'FirebaseInstallations', '~> 11.0'\n  s.dependency 'GoogleDataTransport', '~> 10.0'\n  s.dependency 'GoogleUtilities/Environment', '~> 8.0'\n  s.dependency 'GoogleUtilities/UserDefaults', '~> 8.0'\n  s.dependency 'nanopb', '~> 3.30910.0'\n  s.dependency 'PromisesSwift', '~> 2.1'\n\n  s.pod_target_xcconfig = {\n    'GCC_C_LANGUAGE_STANDARD' => 'c99',\n    'HEADER_SEARCH_PATHS' => '\"${PODS_TARGET_SRCROOT}\"',\n    'GCC_PREPROCESSOR_DEFINITIONS' =>\n      # For nanopb:\n      'PB_FIELD_32BIT=1 PB_NO_PACKED_STRUCTS=1 PB_ENABLE_MALLOC=1',\n  }\n\n  s.test_spec 'unit' do |unit_tests|\n    unit_tests.scheme = { :code_coverage => true }\n    unit_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target,\n      # https://github.com/CocoaPods/CocoaPods/issues/8283\n      # :watchos => watchos_deployment_target,\n    }\n    unit_tests.source_files = base_dir + 'Tests/Unit/**/*.swift'\n    unit_tests.resources = base_dir + 'Tests/Fixtures/**/*'\n    unit_tests.requires_app_host = true\n  end\nend\n"
        },
        {
          "name": "FirebaseSessions",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseSharedSwift.podspec",
          "type": "blob",
          "size": 1.5283203125,
          "content": "Pod::Spec.new do |s|\n  s.name                    = 'FirebaseSharedSwift'\n  s.version                 = '11.7.0'\n  s.summary                 = 'Shared Swift Extensions for Firebase'\n\n  s.description      = <<-DESC\nThis pod provides capabilities like Codable support that is shared by multiple\nFirebase products. FirebaseSharedSwift is not supported for non-Firebase usage.\n                       DESC\n\n\n  s.homepage                = 'https://developers.google.com/'\n  s.license                 = { :type => 'Apache-2.0', :file => 'FirebaseSharedSwift/LICENSE' }\n  s.authors                 = 'Google, Inc.'\n\n  s.source                  = {\n    :git => 'https://github.com/Firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n\n  s.swift_version           = '5.9'\n\n  ios_deployment_target = '13.0'\n  osx_deployment_target = '10.15'\n  tvos_deployment_target = '13.0'\n  watchos_deployment_target = '7.0'\n\n  s.ios.deployment_target = ios_deployment_target\n  s.osx.deployment_target = osx_deployment_target\n  s.tvos.deployment_target = tvos_deployment_target\n  s.watchos.deployment_target = watchos_deployment_target\n\n  s.cocoapods_version       = '>= 1.12.0'\n  s.prefix_header_file      = false\n\n  s.source_files = [\n    'FirebaseSharedSwift/Sources/**/*.swift',\n  ]\n\n  s.test_spec 'unit' do |unit_tests|\n    unit_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target\n    }\n    unit_tests.source_files = [\n      'FirebaseSharedSwift/Tests/**/*.swift',\n    ]\n  end\nend\n"
        },
        {
          "name": "FirebaseSharedSwift",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseStorage.podspec",
          "type": "blob",
          "size": 3.220703125,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseStorage'\n  s.version          = '11.7.0'\n  s.summary          = 'Firebase Storage'\n\n  s.description      = <<-DESC\nFirebase Storage provides robust, secure file uploads and downloads from Firebase SDKs, powered by Google Cloud Storage.\n                       DESC\n\n  s.homepage         = 'https://firebase.google.com'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n  s.social_media_url = 'https://twitter.com/Firebase'\n\n  ios_deployment_target = '13.0'\n  osx_deployment_target = '10.15'\n  tvos_deployment_target = '13.0'\n  watchos_deployment_target = '7.0'\n\n  s.ios.deployment_target = ios_deployment_target\n  s.osx.deployment_target = osx_deployment_target\n  s.tvos.deployment_target = tvos_deployment_target\n  s.watchos.deployment_target = watchos_deployment_target\n\n  s.swift_version = '5.9'\n\n  s.cocoapods_version = '>= 1.12.0'\n  s.prefix_header_file = false\n\n  s.source_files = [\n    'FirebaseStorage/Sources/**/*.swift',\n    'FirebaseStorage/Typedefs/*.h',\n  ]\n\n  s.dependency 'FirebaseAppCheckInterop', '~> 11.0'\n  s.dependency 'FirebaseAuthInterop', '~> 11.0'\n  s.dependency 'FirebaseCore', '~> 11.7.0'\n  s.dependency 'FirebaseCoreExtension', '~> 11.7.0'\n  s.dependency 'GTMSessionFetcher/Core', '>= 3.4', '< 5.0'\n  s.dependency 'GoogleUtilities/Environment', '~> 8.0'\n\n  s.test_spec 'ObjCIntegration' do |objc_tests|\n    objc_tests.scheme = { :code_coverage => true }\n    objc_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target\n    }\n    objc_tests.source_files = [\n      'FirebaseStorage/Tests/ObjCIntegration/*.{m,mm}',\n    ]\n    objc_tests.requires_app_host = true\n    objc_tests.resources = 'FirebaseStorage/Tests/Integration/Resources/1mb.dat',\n                          'FirebaseStorage/Tests/Integration/Resources/GoogleService-Info.plist'\n    objc_tests.dependency 'FirebaseAuth', '~> 11.0'\n    objc_tests.pod_target_xcconfig = {\n      'HEADER_SEARCH_PATHS' => '\"${PODS_TARGET_SRCROOT}\"'\n    }\n  end\n\n  s.test_spec 'unit' do |unit_tests|\n    unit_tests.scheme = { :code_coverage => true }\n    unit_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target\n    }\n    unit_tests.source_files = 'FirebaseStorage/Tests/Unit/StorageAPITests.swift'\n    unit_tests.requires_app_host = true\n  end\n\n  s.test_spec 'integration' do |int_tests|\n    int_tests.scheme = { :code_coverage => true }\n    int_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target\n    }\n    int_tests.source_files = 'FirebaseStorage/Tests/Integration/*.swift'\n    int_tests.requires_app_host = true\n    int_tests.resources = 'FirebaseStorage/Tests/Integration/Resources/1mb.dat',\n                          'FirebaseStorage/Tests/Integration/Resources/GoogleService-Info.plist',\n                          'FirebaseStorage/Tests/Integration/Resources/HomeImprovement.numbers'\n    int_tests.dependency 'FirebaseAuth', '~> 11.0'\n  end\nend\n"
        },
        {
          "name": "FirebaseStorage",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseTestingSupport",
          "type": "tree",
          "content": null
        },
        {
          "name": "FirebaseVertexAI.podspec",
          "type": "blob",
          "size": 1.990234375,
          "content": "Pod::Spec.new do |s|\n  s.name             = 'FirebaseVertexAI'\n  s.version          = '11.7.0'\n  s.summary          = 'Vertex AI in Firebase SDK'\n\n  s.description      = <<-DESC\nBuild AI-powered apps and features with the Gemini API using the Vertex AI in\nFirebase SDK.\n                       DESC\n\n  s.homepage         = 'https://firebase.google.com'\n  s.license          = { :type => 'Apache-2.0', :file => 'LICENSE' }\n  s.authors          = 'Google, Inc.'\n\n  s.source           = {\n    :git => 'https://github.com/firebase/firebase-ios-sdk.git',\n    :tag => 'CocoaPods-' + s.version.to_s\n  }\n\n  s.social_media_url = 'https://twitter.com/Firebase'\n\n  ios_deployment_target = '15.0'\n  osx_deployment_target = '12.0'\n  tvos_deployment_target = '15.0'\n  watchos_deployment_target = '8.0'\n\n  s.ios.deployment_target = ios_deployment_target\n  s.osx.deployment_target = osx_deployment_target\n  s.tvos.deployment_target = tvos_deployment_target\n  s.watchos.deployment_target = watchos_deployment_target\n\n  s.cocoapods_version = '>= 1.12.0'\n  s.prefix_header_file = false\n\n  s.source_files = [\n    'FirebaseVertexAI/Sources/**/*.swift',\n  ]\n\n  s.swift_version = '5.9'\n\n  s.framework = 'Foundation'\n  s.ios.framework = 'UIKit'\n  s.osx.framework = 'AppKit'\n  s.tvos.framework = 'UIKit'\n  s.watchos.framework = 'WatchKit'\n\n  s.dependency 'FirebaseAppCheckInterop', '~> 11.4'\n  s.dependency 'FirebaseAuthInterop', '~> 11.4'\n  s.dependency 'FirebaseCore', '~> 11.7.0'\n  s.dependency 'FirebaseCoreExtension', '~> 11.7.0'\n\n  s.test_spec 'unit' do |unit_tests|\n    unit_tests_dir = 'FirebaseVertexAI/Tests/Unit/'\n    unit_tests.scheme = { :code_coverage => true }\n    unit_tests.platforms = {\n      :ios => ios_deployment_target,\n      :osx => osx_deployment_target,\n      :tvos => tvos_deployment_target\n    }\n    unit_tests.source_files = [\n      unit_tests_dir + '**/*.swift',\n    ]\n    unit_tests.resources = [\n      unit_tests_dir + 'vertexai-sdk-test-data/mock-responses/**/*.{txt,json}',\n      unit_tests_dir + 'Resources/**/*',\n    ]\n  end\nend\n"
        },
        {
          "name": "FirebaseVertexAI",
          "type": "tree",
          "content": null
        },
        {
          "name": "Firestore",
          "type": "tree",
          "content": null
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.8701171875,
          "content": "# To update, change version below, run bundle install, test,\n# commit Gemfile and Gemfile.lock.\nsource 'https://rubygems.org'\n\n# To test CocoaPods pre-releases, update to a relevant commit or tag like below\n# cocoapods-core and xcodeproj may or may not also need tags. For additional\n# testing, enable the cron jobs with a global search and replace from your\n# favorite editor. See https://github.com/firebase/firebase-ios-sdk/pull/8498\n# for examples.\n\n# gem 'cocoapods', git: \"https://github.com/CocoaPods/CocoaPods.git\", ref: \"9cebcde577f56aa26f27d8aa501b51fdd4d6abdb\"\n# gem 'cocoapods-core', git: \"https://github.com/CocoaPods/Core.git\", ref: \"f7cf05720eab935d7d50e35224d263952176fb53\"\n# gem 'xcodeproj', git: \"https://github.com/CocoaPods/Xcodeproj.git\", ref: \"eeccae7275645753cbaf45d96fc4b23e4b8b3b9f\"\n\ngem 'cocoapods', '1.16.2'\ngem 'cocoapods-generate', '2.2.5'\ngem 'danger', '8.4.5'\n"
        },
        {
          "name": "Gemfile.lock",
          "type": "blob",
          "size": 4.5185546875,
          "content": "GEM\n  remote: https://rubygems.org/\n  specs:\n    CFPropertyList (3.0.7)\n      base64\n      nkf\n      rexml\n    activesupport (7.1.5)\n      base64\n      benchmark (>= 0.3)\n      bigdecimal\n      concurrent-ruby (~> 1.0, >= 1.0.2)\n      connection_pool (>= 2.2.5)\n      drb\n      i18n (>= 1.6, < 2)\n      logger (>= 1.4.2)\n      minitest (>= 5.1)\n      mutex_m\n      securerandom (>= 0.3)\n      tzinfo (~> 2.0)\n    addressable (2.8.7)\n      public_suffix (>= 2.0.2, < 7.0)\n    algoliasearch (1.27.5)\n      httpclient (~> 2.8, >= 2.8.3)\n      json (>= 1.5.1)\n    atomos (0.1.3)\n    base64 (0.2.0)\n    benchmark (0.3.0)\n    bigdecimal (3.1.8)\n    claide (1.1.0)\n    claide-plugins (0.9.2)\n      cork\n      nap\n      open4 (~> 1.3)\n    cocoapods (1.16.2)\n      addressable (~> 2.8)\n      claide (>= 1.0.2, < 2.0)\n      cocoapods-core (= 1.16.2)\n      cocoapods-deintegrate (>= 1.0.3, < 2.0)\n      cocoapods-downloader (>= 2.1, < 3.0)\n      cocoapods-plugins (>= 1.0.0, < 2.0)\n      cocoapods-search (>= 1.0.0, < 2.0)\n      cocoapods-trunk (>= 1.6.0, < 2.0)\n      cocoapods-try (>= 1.1.0, < 2.0)\n      colored2 (~> 3.1)\n      escape (~> 0.0.4)\n      fourflusher (>= 2.3.0, < 3.0)\n      gh_inspector (~> 1.0)\n      molinillo (~> 0.8.0)\n      nap (~> 1.0)\n      ruby-macho (>= 2.3.0, < 3.0)\n      xcodeproj (>= 1.27.0, < 2.0)\n    cocoapods-core (1.16.2)\n      activesupport (>= 5.0, < 8)\n      addressable (~> 2.8)\n      algoliasearch (~> 1.0)\n      concurrent-ruby (~> 1.1)\n      fuzzy_match (~> 2.0.4)\n      nap (~> 1.0)\n      netrc (~> 0.11)\n      public_suffix (~> 4.0)\n      typhoeus (~> 1.0)\n    cocoapods-deintegrate (1.0.5)\n    cocoapods-disable-podfile-validations (0.2.0)\n    cocoapods-downloader (2.1)\n    cocoapods-generate (2.2.5)\n      cocoapods-disable-podfile-validations (>= 0.1.1, < 0.3.0)\n    cocoapods-plugins (1.0.0)\n      nap\n    cocoapods-search (1.0.1)\n    cocoapods-trunk (1.6.0)\n      nap (>= 0.8, < 2.0)\n      netrc (~> 0.11)\n    cocoapods-try (1.2.0)\n    colored2 (3.1.2)\n    concurrent-ruby (1.3.4)\n    connection_pool (2.4.1)\n    cork (0.3.0)\n      colored2 (~> 3.1)\n    danger (8.4.5)\n      claide (~> 1.0)\n      claide-plugins (>= 0.9.2)\n      colored2 (~> 3.1)\n      cork (~> 0.1)\n      faraday (>= 0.9.0, < 2.0)\n      faraday-http-cache (~> 2.0)\n      git (~> 1.7)\n      kramdown (~> 2.3)\n      kramdown-parser-gfm (~> 1.0)\n      no_proxy_fix\n      octokit (~> 4.7)\n      terminal-table (>= 1, < 4)\n    drb (2.2.1)\n    escape (0.0.4)\n    ethon (0.16.0)\n      ffi (>= 1.15.0)\n    faraday (1.10.3)\n      faraday-em_http (~> 1.0)\n      faraday-em_synchrony (~> 1.0)\n      faraday-excon (~> 1.1)\n      faraday-httpclient (~> 1.0)\n      faraday-multipart (~> 1.0)\n      faraday-net_http (~> 1.0)\n      faraday-net_http_persistent (~> 1.0)\n      faraday-patron (~> 1.0)\n      faraday-rack (~> 1.0)\n      faraday-retry (~> 1.0)\n      ruby2_keywords (>= 0.0.4)\n    faraday-em_http (1.0.0)\n    faraday-em_synchrony (1.0.0)\n    faraday-excon (1.1.0)\n    faraday-http-cache (2.5.1)\n      faraday (>= 0.8)\n    faraday-httpclient (1.0.1)\n    faraday-multipart (1.0.4)\n      multipart-post (~> 2)\n    faraday-net_http (1.0.2)\n    faraday-net_http_persistent (1.2.0)\n    faraday-patron (1.0.0)\n    faraday-rack (1.0.0)\n    faraday-retry (1.0.3)\n    ffi (1.17.0)\n    fourflusher (2.3.1)\n    fuzzy_match (2.0.4)\n    gh_inspector (1.1.3)\n    git (1.19.1)\n      addressable (~> 2.8)\n      rchardet (~> 1.8)\n    httpclient (2.8.3)\n    i18n (1.14.6)\n      concurrent-ruby (~> 1.0)\n    json (2.7.5)\n    kramdown (2.4.0)\n      rexml\n    kramdown-parser-gfm (1.1.0)\n      kramdown (~> 2.0)\n    logger (1.6.1)\n    minitest (5.25.1)\n    molinillo (0.8.0)\n    multipart-post (2.4.1)\n    mutex_m (0.2.0)\n    nanaimo (0.4.0)\n    nap (1.1.0)\n    netrc (0.11.0)\n    nkf (0.2.0)\n    no_proxy_fix (0.1.2)\n    octokit (4.25.1)\n      faraday (>= 1, < 3)\n      sawyer (~> 0.9)\n    open4 (1.3.4)\n    public_suffix (4.0.7)\n    rchardet (1.8.0)\n    rexml (3.3.9)\n    ruby-macho (2.5.1)\n    ruby2_keywords (0.0.5)\n    sawyer (0.9.2)\n      addressable (>= 2.3.5)\n      faraday (>= 0.17.3, < 3)\n    securerandom (0.3.1)\n    terminal-table (3.0.2)\n      unicode-display_width (>= 1.1.1, < 3)\n    typhoeus (1.4.1)\n      ethon (>= 0.9.0)\n    tzinfo (2.0.6)\n      concurrent-ruby (~> 1.0)\n    unicode-display_width (2.5.0)\n    xcodeproj (1.27.0)\n      CFPropertyList (>= 2.3.3, < 4.0)\n      atomos (~> 0.1.3)\n      claide (>= 1.0.2, < 2.0)\n      colored2 (~> 3.1)\n      nanaimo (~> 0.4.0)\n      rexml (>= 3.3.6, < 4.0)\n\nPLATFORMS\n  ruby\n\nDEPENDENCIES\n  cocoapods (= 1.16.2)\n  cocoapods-generate (= 2.2.5)\n  danger (= 8.4.5)\n\nBUNDLED WITH\n   2.1.4\n"
        },
        {
          "name": "GoogleAppMeasurement.podspec",
          "type": "blob",
          "size": 1.6484375,
          "content": "Pod::Spec.new do |s|\n    s.name             = 'GoogleAppMeasurement'\n    s.version          = '11.7.0'\n    s.summary          = 'Shared measurement methods for Google libraries. Not intended for direct use.'\n\n    s.description      = <<-DESC\n    Measurement methods that are shared between\n    Google libraries. This pod does not expose\n    any headers and isn't intended for direct\n    use, but rather as a dependency of some\n    Google libraries.\n    DESC\n\n    s.homepage         = 'https://developers.google.com/ios'\n    s.license          = { :type => 'Copyright', :text => 'Copyright 2022 Google' }\n    s.authors          = 'Google, Inc.'\n\n    s.source           = {\n        :http => 'https://dl.google.com/firebase/ios/analytics/0effb46af2c7d935/GoogleAppMeasurement-11.7.0.tar.gz'\n    }\n\n    s.cocoapods_version = '>= 1.12.0'\n\n    s.ios.deployment_target  = '12.0'\n    s.osx.deployment_target  = '10.15'\n    s.tvos.deployment_target = '13.0'\n\n    s.libraries  = 'c++', 'sqlite3', 'z'\n    s.frameworks = 'StoreKit'\n\n    s.dependency 'GoogleUtilities/AppDelegateSwizzler', '~> 8.0'\n    s.dependency 'GoogleUtilities/MethodSwizzler', '~> 8.0'\n    s.dependency 'GoogleUtilities/NSData+zlib', '~> 8.0'\n    s.dependency 'GoogleUtilities/Network', '~> 8.0'\n    s.dependency 'nanopb', '~> 3.30910.0'\n\n    s.default_subspecs = 'AdIdSupport'\n\n    s.subspec 'AdIdSupport' do |ss|\n        ss.dependency 'GoogleAppMeasurement/WithoutAdIdSupport', '11.7.0'\n        ss.vendored_frameworks = 'Frameworks/GoogleAppMeasurementIdentitySupport.xcframework'\n    end\n\n    s.subspec 'WithoutAdIdSupport' do |ss|\n        ss.vendored_frameworks = 'Frameworks/GoogleAppMeasurement.xcframework'\n    end\n\nend\n"
        },
        {
          "name": "GoogleAppMeasurementOnDeviceConversion.podspec",
          "type": "blob",
          "size": 1.0498046875,
          "content": "Pod::Spec.new do |s|\n    s.name             = 'GoogleAppMeasurementOnDeviceConversion'\n    s.version          = '11.7.0'\n    s.summary          = <<-SUMMARY\n    On device conversion measurement plugin for Google App Measurement. Not\n    intended for direct use.\n    SUMMARY\n\n    s.description      = <<-DESC\n    On device conversion measurement plugin for Google App Measurement. This\n    pod does not expose any headers and isn't intended for direct use, but\n    rather as a plugin of Google App Measurement.\n    DESC\n\n    s.homepage         = 'https://developers.google.com/ios'\n    s.license          = { :type => 'Copyright', :text => 'Copyright 2022 Google' }\n    s.authors          = 'Google, Inc.'\n\n    s.source           = {\n        :http => 'https://dl.google.com/firebase/ios/analytics/389dbfe755c6df2f/GoogleAppMeasurementOnDeviceConversion-11.0.0.tar.gz'\n    }\n\n    s.cocoapods_version = '>= 1.12.0'\n\n    s.ios.deployment_target  = '12.0'\n\n    s.libraries  = 'c++'\n\n    s.vendored_frameworks = 'Frameworks/GoogleAppMeasurementOnDeviceConversion.xcframework'\nend\n\n"
        },
        {
          "name": "GoogleDataTransport",
          "type": "tree",
          "content": null
        },
        {
          "name": "HeadersImports.md",
          "type": "blob",
          "size": 4.9072265625,
          "content": "# Headers and Imports\n\n## Introduction\n\nFollow this set of guidelines when creating header files and importing them. The\nguidelines are designed to support a wide range of build systems and usage scenarios.\n\nIn this document, the term `library` refers to a buildable package. In CocoaPods, it's a CocoaPod.\nIn Swift Package Manager, it's a library target.\n\n## Header File Types and Locations - For Header File Creators\n\n* *Public Headers* - Headers that define the library's API. They should be located in\n  `FirebaseFoo/Sources/Public/FirebaseFoo`. Any additions require a minor version update. Any\n  changes or deletions require a major version update.\n\n* *Public Umbrella Header* - A single header that includes the full library's public API located at\n  `FirebaseFoo/Sources/Public/FirebaseFoo/FirebaseFoo.h`.\n\n* *Private Headers* - Headers that are available to other libraries in the repo, but are not part\n  of the public API. These should be located in `FirebaseFoo/Sources/Private`.\n  [Xcode](https://stackoverflow.com/a/8016333). They should be accessed with a repo-relative\n  import. For CocoaPods, do not use the `private_headers` attribute. Instead include them in both\n  the provider and client's `source_files` attribute.\n\n* *Interop Headers* - A special kind of private header that defines an interface to another library.\n  Details in [Firebase Component System docs](Interop/FirebaseComponentSystem.md).\n\n* *Private Umbrella Header* - A single header that includes the library's public API plus any APIs\n  provided for other libraries in the repo. Any package manager complexity should be localized to\n  this umbrella header.\n\n* *Library Internal Headers* - Headers that are only used by the enclosing library. These headers\n  should be located among the source files. [Xcode](https://stackoverflow.com/a/8016333) refers to\n  these as \"Project Headers\".\n\n* *Library C++ Internal Headers* - In CocoaPods, C++ internal headers should not be included\n  in the `source_files` attribute. Instead, they should be defined with the `preserve_paths`\n  attribute to avoid filename collisions in the generated Xcode workspace. C++ does not assume\n  a global header map, so if filenames are qualified at all, it's generally by directory, not a\n  filename prefix like in Objective-C.\n\n## Imports - For Header File Consumers\n\n* *Headers within the Library* - Use a repo-relative path for all of the header types above.\n  * *Exception* - Public header imports from other public headers should do an unqualified\n  import like `#import \"publicHeader.h\"` to avoid public module collisions.\n\n* *Private Headers from other Libraries* - Import a private umbrella header like\n  `FirebaseCore/Extension/FIRebaseCoreInternal.h`. For CocoaPods, these files should be\n  added to the podspec in the `source_files` attribute like:\n```\n  s.source_files = [ 'FirebaseFoo/Sources/**/*.[mh]'\n                     'FirebaseAuth/Interop/*.h',\n                     'FirebaseCore/Internal/*.h',\n                   ]\n```\n\n* *Headers from an external dependency* - Do a module import for Swift Package Manager and an\n  umbrella header import otherwise, like:\n```\n#if SWIFT_PACKAGE\n@import GTMSessionFetcherCore;\n#else\n#import <GTMSessionFetcher/GTMSessionFetcher.h>\n#endif\n```\n\n## Additional Background\n\nHere is some additional detail that should give deeper insight onto the above guidelines.\n\n### Build Systems\n\nWe support building with CocoaPods, cmake, internal Google build system, and Swift Package\nManager (in development). Using repo-relative headers is a key enabler since it allows all headers\nto be found with a single path specifier no matter what the build system.\n\n#### CocoaPods Build Systems\nCocoaPods itself has a range of options that impact the functionality of header imports.\n\nThe `use_frameworks!` option enables `@import {module-name}`. CocoaPods creates a directory structure\nsuch that `#import <pod-name/header>` works whether or not frameworks are built.\n\nCocoaPods builds a different directory structure for a `Development Pods` install versus an install\nfrom a published podspec. This can hide errors resulting from header search path pointing outside\nof a particular pod's sources.\n\n\n### \"Internal\" versus \"Private\"\n\n\"Internal\" and \"Private\" are often used interchangeably since\n[Xcode](https://stackoverflow.com/a/8016333) and CocoaPods usage is\ninconsistent with expectations of C++ developers. \"Private\" headers are available to clients\nvia an explicit import. \"Internal\" or \"Project\" headers are only available to their enclosing\nlibrary. Many file names in this repo include \"Private\" or \"Internal\" do not comply. Always\ncheck the build definition to see how the file is used.\n\n### Public Header Location Explanation\n\nCocoaPods flattens all headers specified in the podspec and makes them available via\n`#import \"FirebaseFoo/Header.h\"`. Swift Package Manager does not flatten. Therefore, the\ndirectory structure described above allows clients to import headers from either package manager\nwithout `#if` checks.\n"
        },
        {
          "name": "IntegrationTesting",
          "type": "tree",
          "content": null
        },
        {
          "name": "Interop",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Mintfile",
          "type": "blob",
          "size": 0.03125,
          "content": "nicklockwood/SwiftFormat@0.54.0\n"
        },
        {
          "name": "Package.swift",
          "type": "blob",
          "size": 48.609375,
          "content": "// swift-tools-version:5.9\n// The swift-tools-version declares the minimum version of Swift required to\n// build this package.\n\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport class Foundation.ProcessInfo\nimport PackageDescription\n\nlet firebaseVersion = \"11.7.0\"\n\nlet package = Package(\n  name: \"Firebase\",\n  platforms: [.iOS(.v12), .macCatalyst(.v13), .macOS(.v10_15), .tvOS(.v13), .watchOS(.v7)],\n  products: [\n    .library(\n      name: \"FirebaseAnalytics\",\n      targets: [\"FirebaseAnalyticsTarget\"]\n    ),\n    // Adding this library to your project is enough for it to take effect. The module\n    // does not need to be imported into any source files.\n    .library(\n      name: \"FirebaseAnalyticsWithoutAdIdSupport\",\n      targets: [\"FirebaseAnalyticsWithoutAdIdSupportTarget\"]\n    ),\n    // Adding this library to your project is enough for it to take effect. The module\n    // does not need to be imported into any source files.\n    .library(\n      name: \"FirebaseAnalyticsOnDeviceConversion\",\n      targets: [\"FirebaseAnalyticsOnDeviceConversionTarget\"]\n    ),\n    .library(\n      name: \"FirebaseAuth\",\n      targets: [\"FirebaseAuth\"]\n    ),\n    .library(\n      name: \"FirebaseAppCheck\",\n      targets: [\"FirebaseAppCheck\"]\n    ),\n    .library(\n      name: \"FirebaseAppDistribution-Beta\",\n      targets: [\"FirebaseAppDistributionTarget\"]\n    ),\n    .library(\n      name: \"FirebaseAuthCombine-Community\",\n      targets: [\"FirebaseAuthCombineSwift\"]\n    ),\n    .library(\n      name: \"FirebaseFirestoreCombine-Community\",\n      targets: [\"FirebaseFirestoreCombineSwift\"]\n    ),\n    .library(\n      name: \"FirebaseFunctionsCombine-Community\",\n      targets: [\"FirebaseFunctionsCombineSwift\"]\n    ),\n    .library(\n      name: \"FirebaseStorageCombine-Community\",\n      targets: [\"FirebaseStorageCombineSwift\"]\n    ),\n    .library(\n      name: \"FirebaseCore\",\n      targets: [\"FirebaseCore\"]\n    ),\n    .library(\n      name: \"FirebaseCrashlytics\",\n      targets: [\"FirebaseCrashlytics\"]\n    ),\n    .library(\n      name: \"FirebaseDatabase\",\n      targets: [\"FirebaseDatabase\"]\n    ),\n    .library(\n      name: \"FirebaseDynamicLinks\",\n      targets: [\"FirebaseDynamicLinksTarget\"]\n    ),\n    .library(\n      name: \"FirebaseFirestore\",\n      targets: [\"FirebaseFirestoreTarget\"]\n    ),\n    .library(\n      name: \"FirebaseFunctions\",\n      targets: [\"FirebaseFunctions\"]\n    ),\n    .library(\n      name: \"FirebaseInAppMessaging-Beta\",\n      targets: [\"FirebaseInAppMessagingTarget\"]\n    ),\n    .library(\n      name: \"FirebaseInstallations\",\n      targets: [\"FirebaseInstallations\"]\n    ),\n    .library(\n      name: \"FirebaseMessaging\",\n      targets: [\"FirebaseMessaging\"]\n    ),\n    .library(\n      name: \"FirebaseMLModelDownloader\",\n      targets: [\"FirebaseMLModelDownloader\"]\n    ),\n    .library(\n      name: \"FirebasePerformance\",\n      targets: [\"FirebasePerformanceTarget\"]\n    ),\n    .library(\n      name: \"FirebaseRemoteConfig\",\n      targets: [\"FirebaseRemoteConfig\"]\n    ),\n    .library(\n      name: \"FirebaseStorage\",\n      targets: [\"FirebaseStorage\"]\n    ),\n    .library(\n      name: \"FirebaseVertexAI\",\n      targets: [\"FirebaseVertexAI\"]\n    ),\n  ],\n  dependencies: [\n    .package(\n      url: \"https://github.com/google/promises.git\",\n      \"2.4.0\" ..< \"3.0.0\"\n    ),\n    .package(\n      url: \"https://github.com/apple/swift-protobuf.git\",\n      \"1.19.0\" ..< \"2.0.0\"\n    ),\n    googleAppMeasurementDependency(),\n    .package(\n      url: \"https://github.com/google/GoogleDataTransport.git\",\n      \"10.0.0\" ..< \"11.0.0\"\n    ),\n    .package(\n      url: \"https://github.com/google/GoogleUtilities.git\",\n      \"8.0.0\" ..< \"9.0.0\"\n    ),\n    .package(\n      url: \"https://github.com/google/gtm-session-fetcher.git\",\n      \"3.4.1\" ..< \"5.0.0\"\n    ),\n    .package(\n      url: \"https://github.com/firebase/nanopb.git\",\n      \"2.30910.0\" ..< \"2.30911.0\"\n    ),\n    abseilDependency(),\n    grpcDependency(),\n    .package(\n      url: \"https://github.com/erikdoe/ocmock.git\",\n      revision: \"2c0bfd373289f4a7716db5d6db471640f91a6507\"\n    ),\n    .package(\n      url: \"https://github.com/firebase/leveldb.git\",\n      \"1.22.2\" ..< \"1.23.0\"\n    ),\n    .package(\n      url: \"https://github.com/SlaunchaMan/GCDWebServer.git\",\n      revision: \"935e2736044e71e5341663c3cc9a335ba6867a2b\"\n    ),\n    .package(\n      url: \"https://github.com/google/interop-ios-for-google-sdks.git\",\n      \"100.0.0\" ..< \"101.0.0\"\n    ),\n    .package(url: \"https://github.com/google/app-check.git\",\n             \"11.0.1\" ..< \"12.0.0\"),\n  ],\n  targets: [\n    .target(\n      name: \"Firebase\",\n      path: \"CoreOnly/Sources\",\n      publicHeadersPath: \"./\"\n    ),\n    .target(\n      name: \"FirebaseCore\",\n      dependencies: [\n        \"Firebase\",\n        \"FirebaseCoreInternal\",\n        .product(name: \"GULEnvironment\", package: \"GoogleUtilities\"),\n        .product(name: \"GULLogger\", package: \"GoogleUtilities\"),\n      ],\n      path: \"FirebaseCore/Sources\",\n      resources: [.process(\"Resources/PrivacyInfo.xcprivacy\")],\n      publicHeadersPath: \"Public\",\n      cSettings: [\n        .headerSearchPath(\"../..\"),\n        .define(\"Firebase_VERSION\", to: firebaseVersion),\n        // TODO: - Add support for cflags cSetting so that we can set the -fno-autolink option\n      ],\n      linkerSettings: [\n        .linkedFramework(\"UIKit\", .when(platforms: [.iOS, .macCatalyst, .tvOS])),\n        .linkedFramework(\"AppKit\", .when(platforms: [.macOS])),\n      ]\n    ),\n    .testTarget(\n      name: \"CoreUnit\",\n      dependencies: [\n        \"FirebaseCore\",\n        \"SharedTestUtilities\",\n        .product(name: \"OCMock\", package: \"ocmock\"),\n      ],\n      path: \"FirebaseCore/Tests/Unit\",\n      exclude: [\"Resources/GoogleService-Info.plist\"],\n      cSettings: [\n        .headerSearchPath(\"../../..\"),\n      ]\n    ),\n\n    // MARK: - Firebase Core Extension\n\n    // Extension of FirebaseCore for consuming by Swift product SDKs.\n    // When depending on `FirebaseCoreExtension`, also depend on `FirebaseCore`\n    // to avoid potential linker issues.\n    .target(\n      name: \"FirebaseCoreExtension\",\n      path: \"FirebaseCore/Extension\",\n      resources: [.process(\"Resources/PrivacyInfo.xcprivacy\")],\n      publicHeadersPath: \".\",\n      cSettings: [\n        .headerSearchPath(\"../../\"),\n      ]\n    ),\n\n    // MARK: - Firebase Core Internal\n\n    // Shared collection of APIs for internal FirebaseCore usage.\n    .target(\n      name: \"FirebaseCoreInternal\",\n      dependencies: [\n        .product(name: \"GULNSData\", package: \"GoogleUtilities\"),\n      ],\n      path: \"FirebaseCore/Internal/Sources\",\n      resources: [.process(\"Resources/PrivacyInfo.xcprivacy\")]\n    ),\n    .testTarget(\n      name: \"FirebaseCoreInternalTests\",\n      dependencies: [\n        \"FirebaseCoreInternal\",\n      ],\n      path: \"FirebaseCore/Internal/Tests\"\n    ),\n\n    .target(\n      name: \"FirebaseABTesting\",\n      dependencies: [\"FirebaseCore\"],\n      path: \"FirebaseABTesting/Sources\",\n      resources: [.process(\"Resources/PrivacyInfo.xcprivacy\")],\n      publicHeadersPath: \"Public\",\n      cSettings: [\n        .headerSearchPath(\"../../\"),\n      ]\n    ),\n    .testTarget(\n      name: \"ABTestingUnit\",\n      dependencies: [\"FirebaseABTesting\", .product(name: \"OCMock\", package: \"ocmock\")],\n      path: \"FirebaseABTesting/Tests/Unit\",\n      resources: [.process(\"Resources\")],\n      cSettings: [\n        .headerSearchPath(\"../../..\"),\n      ]\n    ),\n\n    .target(\n      name: \"FirebaseAnalyticsTarget\",\n      dependencies: [.target(name: \"FirebaseAnalyticsWrapper\",\n                             condition: .when(platforms: [.iOS, .macCatalyst, .macOS, .tvOS]))],\n      path: \"SwiftPM-PlatformExclude/FirebaseAnalyticsWrap\"\n    ),\n\n    .target(\n      name: \"FirebaseAnalyticsWrapper\",\n      dependencies: [\n        .target(\n          name: \"FirebaseAnalytics\",\n          condition: .when(platforms: [.iOS, .macCatalyst, .macOS, .tvOS])\n        ),\n        .product(name: \"GoogleAppMeasurement\",\n                 package: \"GoogleAppMeasurement\",\n                 condition: .when(platforms: [.iOS, .macCatalyst, .macOS, .tvOS])),\n        \"FirebaseCore\",\n        \"FirebaseInstallations\",\n        .product(name: \"GULAppDelegateSwizzler\", package: \"GoogleUtilities\"),\n        .product(name: \"GULMethodSwizzler\", package: \"GoogleUtilities\"),\n        .product(name: \"GULNSData\", package: \"GoogleUtilities\"),\n        .product(name: \"GULNetwork\", package: \"GoogleUtilities\"),\n        .product(name: \"nanopb\", package: \"nanopb\"),\n      ],\n      path: \"FirebaseAnalyticsWrapper\",\n      linkerSettings: [\n        .linkedLibrary(\"sqlite3\"),\n        .linkedLibrary(\"c++\"),\n        .linkedLibrary(\"z\"),\n        .linkedFramework(\"StoreKit\"),\n      ]\n    ),\n    .binaryTarget(\n      name: \"FirebaseAnalytics\",\n      url: \"https://dl.google.com/firebase/ios/swiftpm/11.7.0/FirebaseAnalytics.zip\",\n      checksum: \"ce1f4aba4f9e831f06eb77a4cbaf0bd021e0859197ee3100c5035b7037074793\"\n    ),\n    .testTarget(\n      name: \"AnalyticsSwiftUnit\",\n      dependencies: [\"FirebaseAnalyticsTarget\"],\n      path: \"FirebaseAnalytics/Tests/SwiftUnit\"\n    ),\n    .testTarget(\n      name: \"AnalyticsObjCAPI\",\n      dependencies: [\"FirebaseAnalyticsTarget\"],\n      path: \"FirebaseAnalytics/Tests/ObjCAPI\"\n    ),\n\n    .target(\n      name: \"FirebaseAnalyticsWithoutAdIdSupportTarget\",\n      dependencies: [.target(name: \"FirebaseAnalyticsWithoutAdIdSupportWrapper\",\n                             condition: .when(platforms: [.iOS, .macCatalyst, .macOS, .tvOS]))],\n      path: \"SwiftPM-PlatformExclude/FirebaseAnalyticsWithoutAdIdSupportWrap\"\n    ),\n    .target(\n      name: \"FirebaseAnalyticsWithoutAdIdSupportWrapper\",\n      dependencies: [\n        .target(\n          name: \"FirebaseAnalytics\",\n          condition: .when(platforms: [.iOS, .macCatalyst, .macOS, .tvOS])\n        ),\n        .product(name: \"GoogleAppMeasurementWithoutAdIdSupport\",\n                 package: \"GoogleAppMeasurement\",\n                 condition: .when(platforms: [.iOS, .macCatalyst, .macOS, .tvOS])),\n        \"FirebaseCore\",\n        \"FirebaseInstallations\",\n        .product(name: \"GULAppDelegateSwizzler\", package: \"GoogleUtilities\"),\n        .product(name: \"GULMethodSwizzler\", package: \"GoogleUtilities\"),\n        .product(name: \"GULNSData\", package: \"GoogleUtilities\"),\n        .product(name: \"GULNetwork\", package: \"GoogleUtilities\"),\n        .product(name: \"nanopb\", package: \"nanopb\"),\n      ],\n      path: \"FirebaseAnalyticsWithoutAdIdSupportWrapper\",\n      linkerSettings: [\n        .linkedLibrary(\"sqlite3\"),\n        .linkedLibrary(\"c++\"),\n        .linkedLibrary(\"z\"),\n        .linkedFramework(\"StoreKit\"),\n      ]\n    ),\n\n    .target(\n      name: \"FirebaseAnalyticsOnDeviceConversionTarget\",\n      dependencies: [\n        .product(name: \"GoogleAppMeasurementOnDeviceConversion\",\n                 package: \"GoogleAppMeasurement\",\n                 condition: .when(platforms: [.iOS])),\n      ],\n      path: \"FirebaseAnalyticsOnDeviceConversionWrapper\",\n      linkerSettings: [\n        .linkedLibrary(\"c++\"),\n      ]\n    ),\n\n    .target(\n      name: \"FirebaseAppDistributionTarget\",\n      dependencies: [.target(name: \"FirebaseAppDistribution\",\n                             condition: .when(platforms: [.iOS]))],\n      path: \"SwiftPM-PlatformExclude/FirebaseAppDistributionWrap\"\n    ),\n    .target(\n      name: \"FirebaseAppDistribution\",\n      dependencies: [\n        \"FirebaseCore\",\n        \"FirebaseInstallations\",\n        .product(name: \"GULAppDelegateSwizzler\", package: \"GoogleUtilities\"),\n        .product(name: \"GULUserDefaults\", package: \"GoogleUtilities\"),\n      ],\n      path: \"FirebaseAppDistribution/Sources\",\n      publicHeadersPath: \"Public\",\n      cSettings: [\n        .headerSearchPath(\"../../\"),\n      ]\n    ),\n    .testTarget(\n      name: \"AppDistributionUnit\",\n      dependencies: [\"FirebaseAppDistribution\", .product(name: \"OCMock\", package: \"ocmock\")],\n      path: \"FirebaseAppDistribution/Tests/Unit\",\n      exclude: [\"Swift/\"],\n      resources: [.process(\"Resources\")],\n      cSettings: [\n        .headerSearchPath(\"../../..\"),\n      ]\n    ),\n    .testTarget(\n      name: \"AppDistributionUnitSwift\",\n      dependencies: [\"FirebaseAppDistribution\"],\n      path: \"FirebaseAppDistribution/Tests/Unit/Swift\",\n      cSettings: [\n        .headerSearchPath(\"../../../..\"),\n      ]\n    ),\n\n    .target(\n      name: \"FirebaseAuth\",\n      dependencies: [\n        \"FirebaseAppCheckInterop\",\n        \"FirebaseAuthInterop\",\n        \"FirebaseAuthInternal\",\n        \"FirebaseCore\",\n        \"FirebaseCoreExtension\",\n        .product(name: \"GULAppDelegateSwizzler\", package: \"GoogleUtilities\"),\n        .product(name: \"GULEnvironment\", package: \"GoogleUtilities\"),\n        .product(name: \"GTMSessionFetcherCore\", package: \"gtm-session-fetcher\"),\n      ],\n      path: \"FirebaseAuth/Sources\",\n      exclude: [\n        \"ObjC\", \"Public\",\n      ],\n      resources: [.process(\"Resources/PrivacyInfo.xcprivacy\")],\n      swiftSettings: Context.environment[\"FIREBASE_CI\"] != nil ? [.define(\"FIREBASE_CI\")] : [],\n      linkerSettings: [\n        .linkedFramework(\"Security\"),\n        .linkedFramework(\"SafariServices\", .when(platforms: [.iOS])),\n      ]\n    ),\n    .target(\n      name: \"FirebaseAuthInternal\",\n      dependencies: [\n        .product(name: \"RecaptchaInterop\", package: \"interop-ios-for-google-sdks\"),\n      ],\n      path: \"FirebaseAuth/Sources\",\n      exclude: [\n        \"Swift\", \"Resources\",\n      ],\n      publicHeadersPath: \"Public\",\n      cSettings: [\n        .headerSearchPath(\"../../\"),\n      ]\n    ),\n    // Internal headers only for consuming from Swift.\n    .target(\n      name: \"FirebaseAuthInterop\",\n      path: \"FirebaseAuth/Interop\",\n      exclude: [\n        \"CMakeLists.txt\",\n      ],\n      publicHeadersPath: \"Public\",\n      cSettings: [\n        .headerSearchPath(\"../../\"),\n      ]\n    ),\n    .testTarget(\n      name: \"AuthUnit\",\n      dependencies: [\n        \"FirebaseAuth\",\n      ],\n      path: \"FirebaseAuth/Tests/Unit\",\n      exclude: [\n        // TODO: these tests rely on a non-zero UIApplication.shared. They run from CocoaPods.\n        \"PhoneAuthProviderTests.swift\",\n        \"AuthNotificationManagerTests.swift\",\n        // TODO: The following tests run in CocoaPods only, until mixed language or separate target.\n        \"ObjCAPITests.m\",\n        \"ObjCGlobalTests.m\",\n        \"FIROAuthProviderTests.m\",\n      ]\n    ),\n    .target(\n      name: \"FirebaseAuthCombineSwift\",\n      dependencies: [\"FirebaseAuth\"],\n      path: \"FirebaseCombineSwift/Sources/Auth\"\n    ),\n    .target(\n      name: \"FirebaseFirestoreCombineSwift\",\n      dependencies: [\n        \"FirebaseFirestoreTarget\",\n      ],\n      path: \"FirebaseCombineSwift/Sources/Firestore\"\n    ),\n    .target(\n      name: \"FirebaseStorageCombineSwift\",\n      dependencies: [\n        \"FirebaseStorage\",\n      ],\n      path: \"FirebaseCombineSwift/Sources/Storage\"\n    ),\n    .target(\n      name: \"FirebaseCrashlytics\",\n      dependencies: [\n        \"FirebaseCore\",\n        \"FirebaseInstallations\",\n        \"FirebaseSessions\",\n        \"FirebaseRemoteConfigInterop\",\n        \"FirebaseCrashlyticsSwift\",\n        .product(name: \"GoogleDataTransport\", package: \"GoogleDataTransport\"),\n        .product(name: \"GULEnvironment\", package: \"GoogleUtilities\"),\n        .product(name: \"FBLPromises\", package: \"Promises\"),\n        .product(name: \"nanopb\", package: \"nanopb\"),\n      ],\n      path: \"Crashlytics\",\n      exclude: [\n        \"run\",\n        \"CHANGELOG.md\",\n        \"LICENSE\",\n        \"README.md\",\n        \"ProtoSupport/\",\n        \"UnitTests/\",\n        \"generate_project.sh\",\n        \"upload-symbols\",\n        \"CrashlyticsInputFiles.xcfilelist\",\n        \"third_party/libunwind/LICENSE\",\n        \"Crashlytics/Rollouts/\",\n      ],\n      sources: [\n        \"Crashlytics/\",\n        \"Protogen/\",\n        \"Shared/\",\n        \"third_party/libunwind/dwarf.h\",\n      ],\n      resources: [.process(\"Resources/PrivacyInfo.xcprivacy\")],\n      publicHeadersPath: \"Crashlytics/Public\",\n      cSettings: [\n        .headerSearchPath(\"..\"),\n        .define(\"DISPLAY_VERSION\", to: firebaseVersion),\n        .define(\"CLS_SDK_NAME\", to: \"Crashlytics iOS SDK\", .when(platforms: [.iOS])),\n        .define(\n          \"CLS_SDK_NAME\",\n          to: \"Crashlytics macOS SDK\",\n          .when(platforms: [.macOS, .macCatalyst])\n        ),\n        .define(\"CLS_SDK_NAME\", to: \"Crashlytics tvOS SDK\", .when(platforms: [.tvOS])),\n        .define(\"CLS_SDK_NAME\", to: \"Crashlytics watchOS SDK\", .when(platforms: [.watchOS])),\n        .define(\"PB_FIELD_32BIT\", to: \"1\"),\n        .define(\"PB_NO_PACKED_STRUCTS\", to: \"1\"),\n        .define(\"PB_ENABLE_MALLOC\", to: \"1\"),\n      ],\n      linkerSettings: [\n        .linkedFramework(\"Security\"),\n        .linkedFramework(\"SystemConfiguration\", .when(platforms: [.iOS, .macOS, .tvOS])),\n      ]\n    ),\n    .target(\n      name: \"FirebaseCrashlyticsSwift\",\n      dependencies: [\"FirebaseRemoteConfigInterop\"],\n      path: \"Crashlytics\",\n      sources: [\n        \"Crashlytics/Rollouts/\",\n      ]\n    ),\n    .testTarget(\n      name: \"FirebaseCrashlyticsSwiftUnit\",\n      dependencies: [\"FirebaseCrashlyticsSwift\"],\n      path: \"Crashlytics/UnitTestsSwift/\"\n    ),\n    .testTarget(\n      name: \"FirebaseCrashlyticsUnit\",\n      dependencies: [\"FirebaseCrashlytics\", .product(name: \"OCMock\", package: \"ocmock\")],\n      path: \"Crashlytics/UnitTests\",\n      resources: [\n        .copy(\"FIRCLSMachO/machO_data\"),\n        .copy(\"Data\"),\n      ],\n      cSettings: [\n        .headerSearchPath(\"../..\"),\n        .define(\"DISPLAY_VERSION\", to: firebaseVersion),\n        .define(\"CLS_SDK_NAME\", to: \"Crashlytics iOS SDK\", .when(platforms: [.iOS])),\n        .define(\n          \"CLS_SDK_NAME\",\n          to: \"Crashlytics macOS SDK\",\n          .when(platforms: [.macOS, .macCatalyst])\n        ),\n        .define(\"CLS_SDK_NAME\", to: \"Crashlytics tvOS SDK\", .when(platforms: [.tvOS])),\n        .define(\"CLS_SDK_NAME\", to: \"Crashlytics watchOS SDK\", .when(platforms: [.watchOS])),\n      ]\n    ),\n    .target(\n      name: \"FirebaseDatabaseInternal\",\n      dependencies: [\n        \"FirebaseAppCheckInterop\",\n        \"FirebaseCore\",\n        \"leveldb\",\n        .product(name: \"GULUserDefaults\", package: \"GoogleUtilities\"),\n      ],\n      path: \"FirebaseDatabase/Sources\",\n      exclude: [\n        \"third_party/Wrap-leveldb/LICENSE\",\n        \"third_party/FImmutableSortedDictionary/LICENSE\",\n      ],\n      publicHeadersPath: \"Public\",\n      cSettings: [\n        .headerSearchPath(\"../../\"),\n      ],\n      linkerSettings: [\n        .linkedFramework(\"CFNetwork\"),\n        .linkedFramework(\"Security\"),\n        .linkedFramework(\"SystemConfiguration\", .when(platforms: [.iOS, .macOS, .tvOS])),\n        .linkedFramework(\"WatchKit\", .when(platforms: [.watchOS])),\n      ]\n    ),\n    .testTarget(\n      name: \"DatabaseUnit\",\n      dependencies: [\n        \"FirebaseDatabase\",\n        \"SharedTestUtilities\",\n        .product(name: \"OCMock\", package: \"ocmock\"),\n      ],\n      path: \"FirebaseDatabase/Tests/\",\n      exclude: [\n        // Disable Swift tests as mixed targets are not supported (Xcode 12.4).\n        \"Unit/Swift\",\n        \"Integration/\",\n      ],\n      resources: [.process(\"Resources\")],\n      cSettings: [\n        .headerSearchPath(\"../..\"),\n      ]\n    ),\n    .testTarget(\n      name: \"DatabaseUnitSwift\",\n      dependencies: [\"FirebaseDatabase\"],\n      path: \"FirebaseDatabase/Tests/Unit/Swift\",\n      cSettings: [\n        .headerSearchPath(\"../..\"),\n      ]\n    ),\n    .target(\n      name: \"FirebaseDatabase\",\n      dependencies: [\"FirebaseDatabaseInternal\", \"FirebaseSharedSwift\"],\n      path: \"FirebaseDatabase/Swift/Sources\"\n    ),\n    .target(\n      name: \"FirebaseSharedSwift\",\n      path: \"FirebaseSharedSwift/Sources\",\n      exclude: [\n        \"third_party/FirebaseDataEncoder/LICENSE\",\n        \"third_party/FirebaseDataEncoder/METADATA\",\n      ]\n    ),\n    .testTarget(\n      name: \"FirebaseSharedSwiftTests\",\n      dependencies: [\"FirebaseSharedSwift\"],\n      path: \"FirebaseSharedSwift/Tests/\"\n    ),\n    .target(\n      name: \"FirebaseDynamicLinksTarget\",\n      dependencies: [.target(name: \"FirebaseDynamicLinks\",\n                             condition: .when(platforms: [.iOS]))],\n      path: \"SwiftPM-PlatformExclude/FirebaseDynamicLinksWrap\"\n    ),\n\n    .target(\n      name: \"FirebaseDynamicLinks\",\n      dependencies: [\"FirebaseCore\"],\n      path: \"FirebaseDynamicLinks/Sources\",\n      resources: [.process(\"Resources/PrivacyInfo.xcprivacy\")],\n      publicHeadersPath: \"Public\",\n      cSettings: [\n        .headerSearchPath(\"../../\"),\n        .define(\"FIRDynamicLinks3P\", to: \"1\"),\n        .define(\"GIN_SCION_LOGGING\", to: \"1\"),\n      ],\n      linkerSettings: [\n        .linkedFramework(\"QuartzCore\"),\n      ]\n    ),\n\n    firestoreWrapperTarget(),\n\n    // MARK: - Firebase Functions\n\n    .target(\n      name: \"FirebaseFunctions\",\n      dependencies: [\n        \"FirebaseAppCheckInterop\",\n        \"FirebaseAuthInterop\",\n        \"FirebaseCore\",\n        \"FirebaseCoreExtension\",\n        \"FirebaseMessagingInterop\",\n        \"FirebaseSharedSwift\",\n        .product(name: \"GTMSessionFetcherCore\", package: \"gtm-session-fetcher\"),\n      ],\n      path: \"FirebaseFunctions/Sources\"\n    ),\n    .testTarget(\n      name: \"FirebaseFunctionsUnit\",\n      dependencies: [\"FirebaseFunctions\",\n                     \"FirebaseAppCheckInterop\",\n                     \"FirebaseAuthInterop\",\n                     \"FirebaseMessagingInterop\",\n                     \"SharedTestUtilities\"],\n      path: \"FirebaseFunctions/Tests/Unit\",\n      cSettings: [\n        .headerSearchPath(\"../../../\"),\n      ]\n    ),\n    .testTarget(\n      name: \"FirebaseFunctionsIntegration\",\n      dependencies: [\"FirebaseFunctions\",\n                     \"SharedTestUtilities\"],\n      path: \"FirebaseFunctions/Tests/Integration\"\n    ),\n    .testTarget(\n      name: \"FirebaseFunctionsObjCIntegration\",\n      dependencies: [\"FirebaseFunctions\",\n                     \"SharedTestUtilities\"],\n      path: \"FirebaseFunctions/Tests/ObjCIntegration\",\n      // See https://forums.swift.org/t/importing-swift-libraries-from-objective-c/56730\n      exclude: [\n        \"ObjCPPAPITests.mm\",\n      ],\n      cSettings: [\n        .headerSearchPath(\"../../..\"),\n      ]\n    ),\n    .target(\n      name: \"FirebaseFunctionsCombineSwift\",\n      dependencies: [\"FirebaseFunctions\"],\n      path: \"FirebaseCombineSwift/Sources/Functions\"\n    ),\n    .testTarget(\n      name: \"FunctionsCombineUnit\",\n      dependencies: [\"FirebaseFunctionsCombineSwift\",\n                     \"SharedTestUtilities\"],\n      path: \"FirebaseFunctions/Tests/CombineUnit\"\n    ),\n\n    // MARK: - Firebase In App Messaging\n\n    .target(\n      name: \"FirebaseInAppMessagingTarget\",\n      dependencies: [\n        .target(name: \"FirebaseInAppMessaging\", condition: .when(platforms: [.iOS, .tvOS])),\n      ],\n      path: \"SwiftPM-PlatformExclude/FirebaseInAppMessagingWrap\"\n    ),\n\n    .target(\n      name: \"FirebaseInAppMessagingInternal\",\n      dependencies: [\n        \"FirebaseCore\",\n        \"FirebaseInstallations\",\n        \"FirebaseABTesting\",\n        .product(name: \"GULEnvironment\", package: \"GoogleUtilities\"),\n        .product(name: \"GULUserDefaults\", package: \"GoogleUtilities\"),\n        .product(name: \"nanopb\", package: \"nanopb\"),\n        .target(name: \"FirebaseInAppMessaging_iOS\", condition: .when(platforms: [.iOS])),\n      ],\n      path: \"FirebaseInAppMessaging/Sources\",\n      exclude: [\n        \"DefaultUI/CHANGELOG.md\",\n        \"DefaultUI/README.md\",\n      ],\n      publicHeadersPath: \"Public\",\n      cSettings: [\n        .headerSearchPath(\"../../\"),\n        .define(\"PB_FIELD_32BIT\", to: \"1\"),\n        .define(\"PB_NO_PACKED_STRUCTS\", to: \"1\"),\n        .define(\"PB_ENABLE_MALLOC\", to: \"1\"),\n      ]\n    ),\n\n    .target(\n      name: \"FirebaseInAppMessaging_iOS\",\n      path: \"FirebaseInAppMessaging/iOS\",\n      resources: [.process(\"Resources\")]\n    ),\n\n    .target(\n      name: \"FirebaseInAppMessaging\",\n      dependencies: [\"FirebaseInAppMessagingInternal\"],\n      path: \"FirebaseInAppMessaging/Swift/Source\"\n    ),\n\n    .target(\n      name: \"FirebaseInstallations\",\n      dependencies: [\n        \"FirebaseCore\",\n        .product(name: \"FBLPromises\", package: \"Promises\"),\n        .product(name: \"GULEnvironment\", package: \"GoogleUtilities\"),\n        .product(name: \"GULUserDefaults\", package: \"GoogleUtilities\"),\n      ],\n      path: \"FirebaseInstallations/Source/Library\",\n      resources: [.process(\"Resources/PrivacyInfo.xcprivacy\")],\n      publicHeadersPath: \"Public\",\n      cSettings: [\n        .headerSearchPath(\"../../../\"),\n      ],\n      linkerSettings: [\n        .linkedFramework(\"Security\"),\n      ]\n    ),\n\n    .target(\n      name: \"FirebaseMLModelDownloader\",\n      dependencies: [\n        \"FirebaseCore\",\n        \"FirebaseCoreExtension\",\n        \"FirebaseInstallations\",\n        .product(name: \"GoogleDataTransport\", package: \"GoogleDataTransport\"),\n        .product(name: \"GULUserDefaults\", package: \"GoogleUtilities\"),\n        .product(name: \"SwiftProtobuf\", package: \"swift-protobuf\"),\n      ],\n      path: \"FirebaseMLModelDownloader/Sources\",\n      exclude: [\n        \"proto/firebase_ml_log_sdk.proto\",\n      ],\n      cSettings: [\n        .define(\"FIRMLModelDownloader_VERSION\", to: firebaseVersion),\n      ]\n    ),\n    .testTarget(\n      name: \"FirebaseMLModelDownloaderUnit\",\n      dependencies: [\"FirebaseMLModelDownloader\"],\n      path: \"FirebaseMLModelDownloader/Tests/Unit\"\n    ),\n\n    .target(\n      name: \"FirebaseMessaging\",\n      dependencies: [\n        \"FirebaseCore\",\n        \"FirebaseInstallations\",\n        .product(name: \"GULAppDelegateSwizzler\", package: \"GoogleUtilities\"),\n        .product(name: \"GULEnvironment\", package: \"GoogleUtilities\"),\n        .product(name: \"GULReachability\", package: \"GoogleUtilities\"),\n        .product(name: \"GULUserDefaults\", package: \"GoogleUtilities\"),\n        .product(name: \"GoogleDataTransport\", package: \"GoogleDataTransport\"),\n        .product(name: \"nanopb\", package: \"nanopb\"),\n      ],\n      path: \"FirebaseMessaging/Sources\",\n      resources: [.process(\"Resources/PrivacyInfo.xcprivacy\")],\n      publicHeadersPath: \"Public\",\n      cSettings: [\n        .headerSearchPath(\"../../\"),\n        .define(\"PB_FIELD_32BIT\", to: \"1\"),\n        .define(\"PB_NO_PACKED_STRUCTS\", to: \"1\"),\n        .define(\"PB_ENABLE_MALLOC\", to: \"1\"),\n      ],\n      linkerSettings: [\n        .linkedFramework(\"SystemConfiguration\", .when(platforms: [.iOS, .macOS, .tvOS])),\n      ]\n    ),\n    // Internal headers only for consuming from Swift.\n    .target(\n      name: \"FirebaseMessagingInterop\",\n      path: \"FirebaseMessaging/Interop\",\n      publicHeadersPath: \".\",\n      cSettings: [\n        .headerSearchPath(\"../../\"),\n      ]\n    ),\n    .testTarget(\n      name: \"MessagingUnit\",\n      dependencies: [\n        \"FirebaseMessaging\",\n        \"SharedTestUtilities\",\n        .product(name: \"OCMock\", package: \"ocmock\"),\n      ],\n      path: \"FirebaseMessaging/Tests/UnitTests\",\n      exclude: [\n        \"FIRMessagingContextManagerServiceTest.m\", // TODO: Adapt its NSBundle usage to SPM.\n      ],\n      cSettings: [\n        .headerSearchPath(\"../../..\"),\n      ]\n    ),\n\n    .target(\n      name: \"FirebasePerformanceTarget\",\n      dependencies: [.target(name: \"FirebasePerformance\",\n                             condition: .when(platforms: [.iOS, .tvOS, .visionOS]))],\n      path: \"SwiftPM-PlatformExclude/FirebasePerformanceWrap\"\n    ),\n    .target(\n      name: \"FirebasePerformance\",\n      dependencies: [\n        \"FirebaseCore\",\n        \"FirebaseInstallations\",\n        // Performance depends on the Obj-C target of FirebaseRemoteConfig to\n        // avoid including Swift code from the `FirebaseRemoteConfig` target\n        // that is unneeded.\n        \"FirebaseRemoteConfigInternal\",\n        \"FirebaseSessions\",\n        .product(name: \"GoogleDataTransport\", package: \"GoogleDataTransport\"),\n        .product(name: \"GULEnvironment\", package: \"GoogleUtilities\"),\n        .product(name: \"GULMethodSwizzler\", package: \"GoogleUtilities\"),\n        .product(name: \"GULUserDefaults\", package: \"GoogleUtilities\"),\n        .product(name: \"nanopb\", package: \"nanopb\"),\n      ],\n      path: \"FirebasePerformance/Sources\",\n      publicHeadersPath: \"Public\",\n      cSettings: [\n        .headerSearchPath(\"../../\"),\n        .define(\"PB_FIELD_32BIT\", to: \"1\"),\n        .define(\"PB_NO_PACKED_STRUCTS\", to: \"1\"),\n        .define(\"PB_ENABLE_MALLOC\", to: \"1\"),\n        .define(\"FIRPerformance_LIB_VERSION\", to: firebaseVersion),\n      ],\n      linkerSettings: [\n        .linkedFramework(\"MobileCoreServices\", .when(platforms: [.iOS, .tvOS])),\n        .linkedFramework(\"QuartzCore\", .when(platforms: [.iOS, .tvOS])),\n      ]\n    ),\n    .testTarget(\n      name: \"PerformanceUnit\",\n      dependencies: [\n        \"FirebasePerformanceTarget\",\n        \"SharedTestUtilities\",\n        \"GCDWebServer\",\n        .product(name: \"OCMock\", package: \"ocmock\"),\n      ],\n      path: \"FirebasePerformance/Tests/Unit\",\n      resources: [\n        .process(\"FPRURLFilterTests-Info.plist\"),\n        .process(\"Server/smallDownloadFile\"),\n        .process(\"Server/bigDownloadFile\"),\n      ],\n      cSettings: [\n        .headerSearchPath(\"../../..\"),\n        .define(\"PB_FIELD_32BIT\", to: \"1\"),\n        .define(\"PB_NO_PACKED_STRUCTS\", to: \"1\"),\n        .define(\"PB_ENABLE_MALLOC\", to: \"1\"),\n      ]\n    ),\n\n    .target(\n      name: \"SharedTestUtilities\",\n      dependencies: [\"FirebaseCore\",\n                     \"FirebaseAppCheckInterop\",\n                     \"FirebaseAuthInterop\",\n                     \"FirebaseMessagingInterop\",\n                     \"GoogleDataTransport\",\n                     .product(name: \"OCMock\", package: \"ocmock\")],\n      path: \"SharedTestUtilities\",\n      publicHeadersPath: \"./\",\n      cSettings: [\n        .headerSearchPath(\"../\"),\n      ]\n    ),\n\n    // MARK: - Firebase Remote Config\n\n    .target(\n      name: \"FirebaseRemoteConfigInternal\",\n      dependencies: [\n        \"FirebaseCore\",\n        \"FirebaseABTesting\",\n        \"FirebaseInstallations\",\n        \"FirebaseRemoteConfigInterop\",\n        .product(name: \"GULNSData\", package: \"GoogleUtilities\"),\n      ],\n      path: \"FirebaseRemoteConfig/Sources\",\n      publicHeadersPath: \"Public\",\n      cSettings: [\n        .headerSearchPath(\"../../\"),\n      ]\n    ),\n    .testTarget(\n      name: \"RemoteConfigUnit\",\n      dependencies: [\"FirebaseRemoteConfigInternal\", .product(name: \"OCMock\", package: \"ocmock\")],\n      path: \"FirebaseRemoteConfig/Tests/Unit\",\n      exclude: [\n        // Need to be evaluated/ported to RC V2.\n        \"RCNConfigAnalyticsTest.m\",\n        \"RCNConfigSettingsTest.m\",\n        \"RCNConfigTest.m\",\n        \"RCNRemoteConfig+FIRAppTest.m\",\n        \"RCNThrottlingTests.m\",\n      ],\n      resources: [\n        .process(\"SecondApp-GoogleService-Info.plist\"),\n        .process(\"Defaults-testInfo.plist\"),\n        .process(\"TestABTPayload.txt\"),\n      ],\n      cSettings: [\n        .headerSearchPath(\"../../..\"),\n      ]\n    ),\n    .testTarget(\n      name: \"RemoteConfigSwiftUnit\",\n      dependencies: [\"FirebaseRemoteConfigInternal\"],\n      path: \"FirebaseRemoteConfig/Tests/SwiftUnit\",\n      cSettings: [\n        .headerSearchPath(\"../../..\"),\n      ]\n    ),\n    .target(\n      name: \"FirebaseRemoteConfig\",\n      dependencies: [\n        \"FirebaseRemoteConfigInternal\",\n        \"FirebaseSharedSwift\",\n      ],\n      path: \"FirebaseRemoteConfig/Swift\",\n      resources: [.process(\"Resources/PrivacyInfo.xcprivacy\")]\n    ),\n    .testTarget(\n      name: \"RemoteConfigFakeConsole\",\n      dependencies: [\"FirebaseRemoteConfig\",\n                     \"RemoteConfigFakeConsoleObjC\"],\n      path: \"FirebaseRemoteConfig/Tests/Swift\",\n      exclude: [\n        \"AccessToken.json\",\n        \"README.md\",\n        \"ObjC/\",\n      ],\n      resources: [\n        .process(\"Defaults-testInfo.plist\"),\n      ],\n      cSettings: [\n        .headerSearchPath(\"../../../\"),\n      ]\n    ),\n    .target(\n      name: \"RemoteConfigFakeConsoleObjC\",\n      dependencies: [.product(name: \"OCMock\", package: \"ocmock\")],\n      path: \"FirebaseRemoteConfig/Tests/Swift/ObjC\",\n      publicHeadersPath: \".\",\n      cSettings: [\n        .headerSearchPath(\"../../../../\"),\n      ]\n    ),\n    // Internal headers only for consuming from other SDK.\n    .target(\n      name: \"FirebaseRemoteConfigInterop\",\n      path: \"FirebaseRemoteConfig/Interop\",\n      publicHeadersPath: \".\",\n      cSettings: [\n        .headerSearchPath(\"../../\"),\n      ]\n    ),\n\n    // MARK: - Firebase Sessions\n\n    .target(\n      name: \"FirebaseSessions\",\n      dependencies: [\n        \"FirebaseCore\",\n        \"FirebaseInstallations\",\n        \"FirebaseCoreExtension\",\n        \"FirebaseSessionsObjC\",\n        .product(name: \"Promises\", package: \"Promises\"),\n        .product(name: \"GoogleDataTransport\", package: \"GoogleDataTransport\"),\n        .product(name: \"GULEnvironment\", package: \"GoogleUtilities\"),\n        .product(name: \"GULUserDefaults\", package: \"GoogleUtilities\"),\n      ],\n      path: \"FirebaseSessions/Sources\",\n      cSettings: [\n        .headerSearchPath(\"..\"),\n        .define(\"DISPLAY_VERSION\", to: firebaseVersion),\n        .define(\"PB_FIELD_32BIT\", to: \"1\"),\n        .define(\"PB_NO_PACKED_STRUCTS\", to: \"1\"),\n        .define(\"PB_ENABLE_MALLOC\", to: \"1\"),\n      ],\n      linkerSettings: [\n        .linkedFramework(\"Security\"),\n        .linkedFramework(\n          \"SystemConfiguration\",\n          .when(platforms: [.iOS, .macCatalyst, .macOS, .tvOS])\n        ),\n      ]\n    ),\n    // The Sessions SDK is Swift-first with Objective-C code to support\n    // nanopb. Because Swift Package Manager doesn't support mixed\n    // language targets, the ObjC code has been extracted out into\n    // a separate target.\n    .target(\n      name: \"FirebaseSessionsObjC\",\n      dependencies: [\n        \"FirebaseCore\",\n        \"FirebaseCoreExtension\",\n        .product(name: \"GULEnvironment\", package: \"GoogleUtilities\"),\n        .product(name: \"nanopb\", package: \"nanopb\"),\n      ],\n      path: \"FirebaseSessions\",\n      exclude: [\n        \"README.md\",\n        \"Sources/\",\n        \"Tests/\",\n        \"ProtoSupport/\",\n        \"generate_project.sh\",\n        \"generate_protos.sh\",\n        \"generate_testapp.sh\",\n      ],\n      publicHeadersPath: \"SourcesObjC\",\n      cSettings: [\n        .headerSearchPath(\"..\"),\n        .define(\"DISPLAY_VERSION\", to: firebaseVersion),\n        .define(\"PB_FIELD_32BIT\", to: \"1\"),\n        .define(\"PB_NO_PACKED_STRUCTS\", to: \"1\"),\n        .define(\"PB_ENABLE_MALLOC\", to: \"1\"),\n      ],\n      linkerSettings: [\n        .linkedFramework(\"Security\"),\n        .linkedFramework(\n          \"SystemConfiguration\",\n          .when(platforms: [.iOS, .macCatalyst, .macOS, .tvOS])\n        ),\n      ]\n    ),\n    .testTarget(\n      name: \"FirebaseSessionsUnit\",\n      dependencies: [\"FirebaseSessions\"],\n      path: \"FirebaseSessions/Tests/Unit\"\n    ),\n\n    // MARK: - Firebase Storage\n\n    .target(\n      name: \"FirebaseStorage\",\n      dependencies: [\n        \"FirebaseAppCheckInterop\",\n        \"FirebaseAuthInterop\",\n        \"FirebaseCore\",\n        \"FirebaseCoreExtension\",\n        .product(name: \"GTMSessionFetcherCore\", package: \"gtm-session-fetcher\"),\n        .product(name: \"GULEnvironment\", package: \"GoogleUtilities\"),\n      ],\n      path: \"FirebaseStorage/Sources\"\n    ),\n    .testTarget(\n      name: \"FirebaseStorageUnit\",\n      dependencies: [\"FirebaseStorage\",\n                     \"SharedTestUtilities\"],\n      path: \"FirebaseStorage/Tests/Unit\",\n      cSettings: [\n        .headerSearchPath(\"../../../\"),\n      ]\n    ),\n    .testTarget(\n      name: \"StorageObjCIntegration\",\n      dependencies: [\"FirebaseStorage\"],\n      path: \"FirebaseStorage/Tests/ObjCIntegration\",\n      exclude: [\n        // See https://forums.swift.org/t/importing-swift-libraries-from-objective-c/56730\n        \"FIRStorageIntegrationTests.m\",\n        \"ObjCPPAPITests.mm\",\n        \"Credentials.h\",\n      ],\n      cSettings: [\n        .headerSearchPath(\"../../..\"),\n      ]\n    ),\n    .testTarget(\n      name: \"swift-test\",\n      dependencies: [\n        \"Firebase\",\n        \"FirebaseAuth\",\n        \"FirebaseAppCheck\",\n        \"FirebaseABTesting\",\n        \"FirebaseAnalytics\",\n        .target(name: \"FirebaseAppDistribution\",\n                condition: .when(platforms: [.iOS])),\n        \"FirebaseAuthCombineSwift\",\n        \"FirebaseFirestoreCombineSwift\",\n        \"FirebaseFunctionsCombineSwift\",\n        \"FirebaseStorageCombineSwift\",\n        \"FirebaseCrashlytics\",\n        \"FirebaseCore\",\n        \"FirebaseDatabase\",\n        \"FirebaseDynamicLinks\",\n        \"FirebaseFirestoreTarget\",\n        \"FirebaseFunctions\",\n        .target(name: \"FirebaseInAppMessaging\",\n                condition: .when(platforms: [.iOS, .tvOS])),\n        \"FirebaseInstallations\",\n        \"FirebaseMessaging\",\n        .target(name: \"FirebasePerformance\",\n                condition: .when(platforms: [.iOS, .tvOS])),\n        \"FirebaseRemoteConfig\",\n        \"FirebaseSessions\",\n        \"FirebaseStorage\",\n        .product(name: \"nanopb\", package: \"nanopb\"),\n      ],\n      path: \"SwiftPMTests/swift-test\"\n    ),\n    .testTarget(\n      name: \"analytics-import-test\",\n      dependencies: [\n        \"FirebaseAnalyticsWrapper\",\n        \"Firebase\",\n      ],\n      path: \"SwiftPMTests/analytics-import-test\"\n    ),\n    .testTarget(\n      name: \"objc-import-test\",\n      dependencies: [\n        \"Firebase\",\n        \"FirebaseAuth\",\n        \"FirebaseABTesting\",\n        \"FirebaseAppCheck\",\n        .target(name: \"FirebaseAppDistribution\",\n                condition: .when(platforms: [.iOS])),\n        \"FirebaseCrashlytics\",\n        \"FirebaseCore\",\n        \"FirebaseDatabase\",\n        \"FirebaseDynamicLinks\",\n        \"FirebaseFirestoreTarget\",\n        \"FirebaseFunctions\",\n        .target(name: \"FirebaseInAppMessaging\",\n                condition: .when(platforms: [.iOS, .tvOS])),\n        \"FirebaseInstallations\",\n        \"FirebaseMessaging\",\n        .target(name: \"FirebasePerformance\",\n                condition: .when(platforms: [.iOS, .tvOS])),\n        \"FirebaseRemoteConfig\",\n        \"FirebaseStorage\",\n      ],\n      path: \"SwiftPMTests/objc-import-test\"\n    ),\n    .testTarget(\n      name: \"version-test\",\n      dependencies: [\n        \"FirebaseCore\",\n      ],\n      path: \"SwiftPMTests/version-test\",\n      cSettings: [\n        .define(\"FIR_VERSION\", to: firebaseVersion),\n      ]\n    ),\n\n    // MARK: - Firebase App Check\n\n    .target(name: \"FirebaseAppCheck\",\n            dependencies: [\n              \"FirebaseAppCheckInterop\",\n              \"FirebaseCore\",\n              .product(name: \"AppCheckCore\", package: \"app-check\"),\n              .product(name: \"GULEnvironment\", package: \"GoogleUtilities\"),\n              .product(name: \"GULUserDefaults\", package: \"GoogleUtilities\"),\n            ],\n            path: \"FirebaseAppCheck/Sources\",\n            publicHeadersPath: \"Public\",\n            cSettings: [\n              .headerSearchPath(\"../..\"),\n            ],\n            linkerSettings: [\n              .linkedFramework(\n                \"DeviceCheck\",\n                .when(platforms: [.iOS, .macCatalyst, .macOS, .tvOS])\n              ),\n            ]),\n    // Internal headers only for consuming from Swift.\n    .target(\n      name: \"FirebaseAppCheckInterop\",\n      path: \"FirebaseAppCheck/Interop\",\n      exclude: [\n        \"CMakeLists.txt\",\n      ],\n      publicHeadersPath: \"Public\",\n      cSettings: [\n        .headerSearchPath(\"../../\"),\n      ]\n    ),\n    .testTarget(\n      name: \"FirebaseAppCheckUnit\",\n      dependencies: [\n        \"FirebaseAppCheck\",\n        \"SharedTestUtilities\",\n        .product(name: \"OCMock\", package: \"ocmock\"),\n      ],\n      path: \"FirebaseAppCheck/Tests/Unit\",\n      exclude: [\n        // Swift tests are in the target `FirebaseAppCheckUnitSwift` since mixed language targets\n        // are not supported (as of Xcode 15.0).\n        \"Swift\",\n      ],\n      cSettings: [\n        .headerSearchPath(\"../../..\"),\n      ]\n    ),\n    .testTarget(\n      name: \"FirebaseAppCheckUnitSwift\",\n      dependencies: [\"FirebaseAppCheck\"],\n      path: \"FirebaseAppCheck/Tests/Unit/Swift\"\n    ),\n\n    // MARK: Testing support\n\n    .target(\n      name: \"FirebaseFirestoreTestingSupport\",\n      dependencies: [\"FirebaseFirestoreTarget\"],\n      path: \"FirebaseTestingSupport/Firestore/Sources\",\n      publicHeadersPath: \"./\",\n      cSettings: [\n        .headerSearchPath(\"../../..\"),\n        .headerSearchPath(\"../../../Firestore/Source/Public/FirebaseFirestore\"),\n      ]\n    ),\n    .testTarget(\n      name: \"FirestoreTestingSupportTests\",\n      dependencies: [\"FirebaseFirestoreTestingSupport\"],\n      path: \"FirebaseTestingSupport/Firestore/Tests\",\n      cSettings: [\n        .headerSearchPath(\"../../..\"),\n      ]\n    ),\n\n    // MARK: - Firebase Vertex AI\n\n    .target(\n      name: \"FirebaseVertexAI\",\n      dependencies: [\n        \"FirebaseAppCheckInterop\",\n        \"FirebaseAuthInterop\",\n        \"FirebaseCore\",\n        \"FirebaseCoreExtension\",\n      ],\n      path: \"FirebaseVertexAI/Sources\"\n    ),\n    .testTarget(\n      name: \"FirebaseVertexAIUnit\",\n      dependencies: [\"FirebaseVertexAI\"],\n      path: \"FirebaseVertexAI/Tests/Unit\",\n      resources: [\n        .process(\"vertexai-sdk-test-data/mock-responses\"),\n        .process(\"Resources\"),\n      ],\n      cSettings: [\n        .headerSearchPath(\"../../../\"),\n      ]\n    ),\n  ] + firestoreTargets(),\n  cLanguageStandard: .c99,\n  cxxLanguageStandard: CXXLanguageStandard.gnucxx14\n)\n\n// MARK: - Helper Functions\n\nfunc googleAppMeasurementDependency() -> Package.Dependency {\n  let appMeasurementURL = \"https://github.com/google/GoogleAppMeasurement.git\"\n\n  // Point SPM CI to the tip of main of https://github.com/google/GoogleAppMeasurement so that the\n  // release process can defer publishing the GoogleAppMeasurement tag until after testing.\n  if ProcessInfo.processInfo.environment[\"FIREBASECI_USE_LATEST_GOOGLEAPPMEASUREMENT\"] != nil {\n    return .package(url: appMeasurementURL, branch: \"main\")\n  }\n\n  return .package(url: appMeasurementURL, exact: \"11.7.0\")\n}\n\nfunc abseilDependency() -> Package.Dependency {\n  let packageInfo: (url: String, range: Range<Version>)\n\n  // If building Firestore from source, abseil will need to be built as source\n  // as the headers in the binary version of abseil are unusable.\n  if ProcessInfo.processInfo.environment[\"FIREBASE_SOURCE_FIRESTORE\"] != nil {\n    packageInfo = (\n      \"https://github.com/firebase/abseil-cpp-SwiftPM.git\",\n      \"0.20240116.1\" ..< \"0.20240117.0\"\n    )\n  } else {\n    packageInfo = (\n      \"https://github.com/google/abseil-cpp-binary.git\",\n      \"1.2024011602.0\" ..< \"1.2024011700.0\"\n    )\n  }\n\n  return .package(url: packageInfo.url, packageInfo.range)\n}\n\nfunc grpcDependency() -> Package.Dependency {\n  let packageInfo: (url: String, range: Range<Version>)\n\n  // If building Firestore from source, abseil will need to be built as source\n  // as the headers in the binary version of abseil are unusable.\n  if ProcessInfo.processInfo.environment[\"FIREBASE_SOURCE_FIRESTORE\"] != nil {\n    packageInfo = (\"https://github.com/grpc/grpc-ios.git\", \"1.65.0\" ..< \"1.66.0\")\n  } else {\n    packageInfo = (\"https://github.com/google/grpc-binary.git\", \"1.65.1\" ..< \"1.66.0\")\n  }\n\n  return .package(url: packageInfo.url, packageInfo.range)\n}\n\nfunc firestoreWrapperTarget() -> Target {\n  if ProcessInfo.processInfo.environment[\"FIREBASE_SOURCE_FIRESTORE\"] != nil {\n    return .target(\n      name: \"FirebaseFirestoreTarget\",\n      dependencies: [.target(name: \"FirebaseFirestore\",\n                             condition: .when(platforms: [.iOS, .tvOS, .macOS, .visionOS]))],\n      path: \"SwiftPM-PlatformExclude/FirebaseFirestoreWrap\"\n    )\n  }\n\n  return .target(\n    name: \"FirebaseFirestoreTarget\",\n    dependencies: [.target(name: \"FirebaseFirestore\",\n                           condition: .when(platforms: [.iOS, .tvOS, .macOS, .macCatalyst]))],\n    path: \"SwiftPM-PlatformExclude/FirebaseFirestoreWrap\",\n    cSettings: [.define(\"FIREBASE_BINARY_FIRESTORE\", to: \"1\")]\n  )\n}\n\nfunc firestoreTargets() -> [Target] {\n  if ProcessInfo.processInfo.environment[\"FIREBASE_SOURCE_FIRESTORE\"] != nil {\n    return [\n      .target(\n        name: \"FirebaseFirestoreInternalWrapper\",\n        dependencies: [\n          \"FirebaseAppCheckInterop\",\n          \"FirebaseCore\",\n          \"leveldb\",\n          .product(name: \"nanopb\", package: \"nanopb\"),\n          .product(name: \"abseil\", package: \"abseil-cpp-SwiftPM\"),\n          .product(name: \"gRPC-cpp\", package: \"grpc-ios\"),\n        ],\n        path: \"Firestore\",\n        exclude: [\n          \"CHANGELOG.md\",\n          \"CMakeLists.txt\",\n          \"Example/\",\n          \"LICENSE\",\n          \"Protos/CMakeLists.txt\",\n          \"Protos/Podfile\",\n          \"Protos/README.md\",\n          \"Protos/build_protos.py\",\n          \"Protos/cpp/\",\n          \"Protos/lib/\",\n          \"Protos/nanopb_cpp_generator.py\",\n          \"Protos/protos/\",\n          \"README.md\",\n          \"Source/CMakeLists.txt\",\n          \"Swift/\",\n          \"core/CMakeLists.txt\",\n          \"core/src/util/config_detected.h.in\",\n          \"core/test/\",\n          \"fuzzing/\",\n          \"test.sh\",\n          // Swift PM doesn't recognize hpp files, so we're relying on search paths\n          // to find third_party/nlohmann_json/json.hpp.\n          \"third_party/\",\n\n          // Exclude alternate implementations for other platforms\n          \"core/src/remote/connectivity_monitor_noop.cc\",\n          \"core/src/util/filesystem_win.cc\",\n          \"core/src/util/log_stdio.cc\",\n          \"core/src/util/secure_random_openssl.cc\",\n        ],\n        sources: [\n          \"Source/\",\n          \"Protos/nanopb/\",\n          \"core/include/\",\n          \"core/src\",\n        ],\n        publicHeadersPath: \"Source/Public\",\n        cSettings: [\n          .headerSearchPath(\"../\"),\n          .headerSearchPath(\"Source/Public/FirebaseFirestore\"),\n          .headerSearchPath(\"Protos/nanopb\"),\n          .define(\"PB_FIELD_32BIT\", to: \"1\"),\n          .define(\"PB_NO_PACKED_STRUCTS\", to: \"1\"),\n          .define(\"PB_ENABLE_MALLOC\", to: \"1\"),\n          .define(\"FIRFirestore_VERSION\", to: firebaseVersion),\n        ],\n        linkerSettings: [\n          .linkedFramework(\n            \"SystemConfiguration\",\n            .when(platforms: [.iOS, .macOS, .tvOS, .visionOS])\n          ),\n          .linkedFramework(\"UIKit\", .when(platforms: [.iOS, .tvOS, .visionOS])),\n          .linkedLibrary(\"c++\"),\n        ]\n      ),\n      .target(\n        name: \"FirebaseFirestore\",\n        dependencies: [\n          \"FirebaseCore\",\n          \"FirebaseCoreExtension\",\n          \"FirebaseFirestoreInternalWrapper\",\n          \"FirebaseSharedSwift\",\n        ],\n        path: \"Firestore\",\n        exclude: [\n          \"CHANGELOG.md\",\n          \"CMakeLists.txt\",\n          \"Example/\",\n          \"LICENSE\",\n          \"Protos/\",\n          \"README.md\",\n          \"Source/\",\n          \"core/\",\n          \"fuzzing/\",\n          \"test.sh\",\n          \"Swift/CHANGELOG.md\",\n          \"Swift/Tests/\",\n          \"third_party/nlohmann_json\",\n        ],\n        sources: [\n          \"Swift/Source/\",\n        ],\n        resources: [.process(\"Source/Resources/PrivacyInfo.xcprivacy\")]\n      ),\n    ]\n  }\n\n  let firestoreInternalTarget: Target = {\n    if ProcessInfo.processInfo.environment[\"FIREBASECI_USE_LOCAL_FIRESTORE_ZIP\"] != nil {\n      // This is set when running `scripts/check_firestore_symbols.sh`.\n      return .binaryTarget(\n        name: \"FirebaseFirestoreInternal\",\n        // The `xcframework` should be moved to the root of the repo.\n        path: \"FirebaseFirestoreInternal.xcframework\"\n      )\n    } else {\n      return .binaryTarget(\n        name: \"FirebaseFirestoreInternal\",\n        url: \"https://dl.google.com/firebase/ios/bin/firestore/11.7.0/rc0/FirebaseFirestoreInternal.zip\",\n        checksum: \"08dd8be97322a1c35bdde315376921d145b5c9dd9bb91bbdbb933380556f24f9\"\n      )\n    }\n  }()\n\n  return [\n    .target(\n      name: \"FirebaseFirestore\",\n      dependencies: [\n        .target(\n          name: \"FirebaseFirestoreInternalWrapper\",\n          condition: .when(platforms: [.iOS, .macCatalyst, .tvOS, .macOS])\n        ),\n        .product(\n          name: \"abseil\",\n          package: \"abseil-cpp-binary\",\n          condition: .when(platforms: [.iOS, .macCatalyst, .tvOS, .macOS])\n        ),\n        .product(\n          name: \"gRPC-C++\",\n          package: \"grpc-binary\",\n          condition: .when(platforms: [.iOS, .macCatalyst, .tvOS, .macOS])\n        ),\n        .product(name: \"nanopb\", package: \"nanopb\"),\n        \"FirebaseAppCheckInterop\",\n        \"FirebaseCore\",\n        \"FirebaseCoreExtension\",\n        \"leveldb\",\n        \"FirebaseSharedSwift\",\n      ],\n      path: \"Firestore/Swift/Source\",\n      resources: [.process(\"Resources/PrivacyInfo.xcprivacy\")],\n      linkerSettings: [\n        .linkedFramework(\"SystemConfiguration\", .when(platforms: [.iOS, .macOS, .tvOS])),\n        .linkedFramework(\"UIKit\", .when(platforms: [.iOS, .tvOS])),\n        .linkedLibrary(\"c++\"),\n      ]\n    ),\n    .target(\n      name: \"FirebaseFirestoreInternalWrapper\",\n      dependencies: [.target(\n        name: \"FirebaseFirestoreInternal\",\n        condition: .when(platforms: [.iOS, .macCatalyst, .tvOS, .macOS])\n      )],\n      path: \"FirebaseFirestoreInternal\",\n      publicHeadersPath: \".\"\n    ),\n    firestoreInternalTarget,\n  ]\n}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.2822265625,
          "content": "<p align=\"center\">\n  <a href=\"https://cocoapods.org/pods/Firebase\">\n    <img src=\"https://img.shields.io/github/v/release/Firebase/firebase-ios-sdk?style=flat&label=CocoaPods\"/>\n  </a>\n  <a href=\"https://swiftpackageindex.com/firebase/firebase-ios-sdk\">\n    <img src=\"https://img.shields.io/github/v/release/Firebase/firebase-ios-sdk?style=flat&label=Swift%20Package%20Index&color=red\"/>\n  </a>\n  <a href=\"https://cocoapods.org/pods/Firebase\">\n    <img src=\"https://img.shields.io/github/license/Firebase/firebase-ios-sdk?style=flat\"/>\n  </a><br/>\n  <a href=\"https://swiftpackageindex.com/firebase/firebase-ios-sdk\">\n    <img src=\"https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Ffirebase%2Ffirebase-ios-sdk%2Fbadge%3Ftype%3Dplatforms\"/>\n  </a>\n  <a href=\"https://swiftpackageindex.com/firebase/firebase-ios-sdk\">\n    <img src=\"https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Ffirebase%2Ffirebase-ios-sdk%2Fbadge%3Ftype%3Dswift-versions\"/>\n  </a>\n</p>\n\n# Firebase Apple Open Source Development\n\nThis repository contains the source code for all Apple platform Firebase SDKs except FirebaseAnalytics.\n\nFirebase is an app development platform with tools to help you build, grow, and\nmonetize your app. More information about Firebase can be found on the\n[official Firebase website](https://firebase.google.com).\n\n## Installation\n\nSee the subsections below for details about the different installation methods. Where\navailable, it's recommended to install any libraries with a `Swift` suffix to get the\nbest experience when writing your app in Swift.\n\n1. [Standard pod install](#standard-pod-install)\n2. [Swift Package Manager](#swift-package-manager)\n3. [Installing from the GitHub repo](#installing-from-github)\n4. [Experimental Carthage](#carthage-ios-only)\n\n### Standard pod install\n\nFor instructions on the standard pod install, visit:\n[https://firebase.google.com/docs/ios/setup](https://firebase.google.com/docs/ios/setup).\n\n### Swift Package Manager\n\nInstructions for [Swift Package Manager](https://swift.org/package-manager/) support can be\nfound in the [SwiftPackageManager.md](SwiftPackageManager.md) Markdown file.\n\n### Installing from GitHub\n\nThese instructions can be used to access the Firebase repo at other branches,\ntags, or commits.\n\n#### Background\n\nSee [the Podfile Syntax Reference](https://guides.cocoapods.org/syntax/podfile.html#pod)\nfor instructions and options about overriding pod source locations.\n\n#### Accessing Firebase Source Snapshots\n\nAll official releases are tagged in this repo and available via CocoaPods. To access a local\nsource snapshot or unreleased branch, use Podfile directives like the following:\n\nTo access FirebaseFirestore via a branch:\n```ruby\npod 'FirebaseCore', :git => 'https://github.com/firebase/firebase-ios-sdk.git', :branch => 'main'\npod 'FirebaseFirestore', :git => 'https://github.com/firebase/firebase-ios-sdk.git', :branch => 'main'\n```\n\nTo access FirebaseMessaging via a checked-out version of the firebase-ios-sdk repo:\n```ruby\npod 'FirebaseCore', :path => '/path/to/firebase-ios-sdk'\npod 'FirebaseMessaging', :path => '/path/to/firebase-ios-sdk'\n```\n\n### Carthage (iOS only)\n\nInstructions for the experimental Carthage distribution can be found at\n[Carthage.md](Carthage.md).\n\n### Using Firebase from a Framework or a library\n\nFor details on using Firebase from a Framework or a library, refer to [firebase_in_libraries.md](docs/firebase_in_libraries.md).\n\n## Development\n\nTo develop Firebase software in this repository, ensure that you have at least\nthe following software:\n\n* Xcode 15.2 (or later)\n\nCocoaPods is still the canonical way to develop, but much of the repo now supports\ndevelopment with Swift Package Manager.\n\n### CocoaPods\n\nInstall the following:\n* CocoaPods 1.12.0 (or later)\n* [CocoaPods generate](https://github.com/square/cocoapods-generate)\n\nFor the pod that you want to develop:\n\n```ruby\npod gen Firebase{name here}.podspec --local-sources=./ --auto-open --platforms=ios\n```\n\nNote: If the CocoaPods cache is out of date, you may need to run\n`pod repo update` before the `pod gen` command.\n\nNote: Set the `--platforms` option to `macos` or `tvos` to develop/test for\nthose platforms. Since 10.2, Xcode does not properly handle multi-platform\nCocoaPods workspaces.\n\nFirestore has a self-contained Xcode project. See\n[Firestore/README](Firestore/README.md) Markdown file.\n\n#### Development for Catalyst\n* `pod gen {name here}.podspec --local-sources=./ --auto-open --platforms=ios`\n* Check the Mac box in the App-iOS Build Settings\n* Sign the App in the Settings Signing & Capabilities tab\n* Click Pods in the Project Manager\n* Add Signing to the iOS host app and unit test targets\n* Select the Unit-unit scheme\n* Run it to build and test\n\nAlternatively, disable signing in each target:\n* Go to Build Settings tab\n* Click `+`\n* Select `Add User-Defined Setting`\n* Add `CODE_SIGNING_REQUIRED` setting with a value of `NO`\n\n### Swift Package Manager\n* To enable test schemes: `./scripts/setup_spm_tests.sh`\n* `open Package.swift` or double click `Package.swift` in Finder.\n* Xcode will open the project\n  * Choose a scheme for a library to build or test suite to run\n  * Choose a target platform by selecting the run destination along with the scheme\n\n### Adding a New Firebase Pod\n\nRefer to [AddNewPod](docs/AddNewPod.md) Markdown file for details.\n\n### Managing Headers and Imports\n\nFor information about managing headers and imports, see [HeadersImports](HeadersImports.md) Markdown file.\n\n### Code Formatting\n\nTo ensure that the code is formatted consistently, run the script\n[./scripts/check.sh](https://github.com/firebase/firebase-ios-sdk/blob/main/scripts/check.sh)\nbefore creating a pull request (PR).\n\nGitHub Actions will verify that any code changes are done in a style-compliant\nway. Install `clang-format` and `mint`:\n\n```console\nbrew install clang-format@19\nbrew install mint\n```\n\n### Running Unit Tests\n\nSelect a scheme and press Command-u to build a component and run its unit tests.\n\n### Running Sample Apps\nTo run the sample apps and integration tests, you'll need a valid\n`GoogleService-Info.plist\n` file. The Firebase Xcode project contains dummy plist\nfiles without real values, but they can be replaced with real plist files. To get your own\n`GoogleService-Info.plist` files:\n\n1. Go to the [Firebase Console](https://console.firebase.google.com/)\n2. Create a new Firebase project, if you don't already have one\n3. For each sample app you want to test, create a new Firebase app with the sample app's bundle\nidentifier (e.g., `com.google.Database-Example`)\n4. Download the resulting `GoogleService-Info.plist` and add it to the Xcode project.\n\n### Coverage Report Generation\n\nFor coverage report generation instructions, see [scripts/code_coverage_report/README](scripts/code_coverage_report/README.md) Markdown file.\n\n## Specific Component Instructions\nSee the sections below for any special instructions for those components.\n\n### Firebase Auth\n\nFor specific Firebase Auth development, refer to the [Auth Sample README](FirebaseAuth/Tests/Sample/README.md) for instructions about\nbuilding and running the FirebaseAuth pod along with various samples and tests.\n\n### Firebase Database\n\nThe Firebase Database Integration tests can be run against a locally running Database Emulator\nor against a production instance.\n\nTo run against a local emulator instance, invoke `./scripts/run_database_emulator.sh start` before\nrunning the integration test.\n\nTo run against a production instance, provide a valid `GoogleServices-Info.plist` and copy it to\n`FirebaseDatabase/Tests/Resources/GoogleService-Info.plist`. Your Security Rule must be set to\n[public](https://firebase.google.com/docs/database/security/quickstart) while your tests are\nrunning.\n\n### Firebase Dynamic Links\n\nFirebase Dynamic Links is **deprecated** and should not be used in new projects. The service will shut down on August 25, 2025.\n\nPlease see our [Dynamic Links Deprecation FAQ documentation](https://firebase.google.com/support/dynamic-links-faq) for more guidance.\n\n### Firebase Performance Monitoring\n\nFor specific Firebase Performance Monitoring development, see\n[the Performance README](FirebasePerformance/README.md) for instructions about building the SDK\nand [the Performance TestApp README](FirebasePerformance/Tests/TestApp/README.md) for instructions about\nintegrating Performance with the dev test App.\n\n### Firebase Storage\n\nTo run the Storage Integration tests, follow the instructions in\n[StorageIntegration.swift](FirebaseStorage/Tests/Integration/StorageIntegration.swift).\n\n#### Push Notifications\n\nPush notifications can only be delivered to specially provisioned App IDs in the developer portal.\nIn order to test receiving push notifications, you will need to:\n\n1. Change the bundle identifier of the sample app to something you own in your Apple Developer\naccount and enable that App ID for push notifications.\n2. You'll also need to\n[upload your APNs Provider Authentication Key or certificate to the\nFirebase Console](https://firebase.google.com/docs/cloud-messaging/ios/certs)\nat **Project Settings > Cloud Messaging > [Your Firebase App]**.\n3. Ensure your iOS device is added to your Apple Developer portal as a test device.\n\n#### iOS Simulator\n\nThe iOS Simulator cannot register for remote notifications and will not receive push notifications.\nTo receive push notifications, follow the steps above and run the app on a physical device.\n\n### Vertex AI for Firebase\n\nSee the [Vertex AI for Firebase README](FirebaseVertexAI#development) for\ninstructions about building and testing the SDK.\n\n## Building with Firebase on Apple platforms\n\nFirebase provides official beta support for macOS, Catalyst, and tvOS. visionOS and watchOS\nare community supported. Thanks to community contributions for many of the multi-platform PRs.\n\nAt this time, most of Firebase's products are available across Apple platforms. There are still\na few gaps, especially on visionOS and watchOS. For details about the current support matrix, see\n[this chart](https://firebase.google.com/docs/ios/learn-more#firebase_library_support_by_platform)\nin Firebase's documentation.\n\n### visionOS\n\nWhere supported, visionOS works as expected with the exception of Firestore via Swift Package\nManager where it is required to use the source distribution.\n\nTo enable the Firestore source distribution, quit Xcode and open the desired\nproject from the command line with the `FIREBASE_SOURCE_FIRESTORE` environment\nvariable: `open --env FIREBASE_SOURCE_FIRESTORE /path/to/project.xcodeproj`.\nTo go back to using the binary distribution of Firestore, quit Xcode and open\nXcode like normal, without the environment variable.\n\n### watchOS\nThanks to contributions from the community, many of Firebase SDKs now compile, run unit tests, and\nwork on watchOS. See the [Independent Watch App Sample](Example/watchOSSample).\n\nKeep in mind that watchOS is not officially supported by Firebase. While we can catch basic unit\ntest issues with GitHub Actions, there may be some changes where the SDK no longer works as expected\non watchOS. If you encounter this, please\n[file an issue](https://github.com/firebase/firebase-ios-sdk/issues).\n\nDuring app setup in the console, you may get to a step that mentions something like \"Checking if the\napp has communicated with our servers\". This relies on Analytics and will not work on watchOS.\n**It's safe to ignore the message and continue**, the rest of the SDKs will work as expected.\n\n#### Additional Crashlytics Notes\n* watchOS has limited support. Due to watchOS restrictions, mach exceptions and signal crashes are\nnot recorded. (Crashes in SwiftUI are generated as mach exceptions, so will not be recorded)\n\n## Combine\nThanks to contributions from the community, _FirebaseCombineSwift_ contains support for Apple's Combine\nframework. This module is currently under development and not yet supported for use in production\nenvironments. For more details, please refer to the [docs](FirebaseCombineSwift/README.md).\n\n## Roadmap\n\nSee [Roadmap](ROADMAP.md) for more about the Firebase Apple SDK Open Source\nplans and directions.\n\n## Contributing\n\nSee [Contributing](CONTRIBUTING.md) for more information on contributing to the Firebase\nApple SDK.\n\n## License\n\nThe contents of this repository are licensed under the\n[Apache License, version 2.0](http://www.apache.org/licenses/LICENSE-2.0).\n\nYour use of Firebase is governed by the\n[Terms of Service for Firebase Services](https://firebase.google.com/terms/).\n"
        },
        {
          "name": "ROADMAP.md",
          "type": "blob",
          "size": 1.41796875,
          "content": "# Firebase Apple SDK Roadmap\n\n## Contributing\n\nThis is a longer roadmap than we can implement internally and we very\nmuch welcome community contributions.\n\nSee the information about Development setup [here](README.md#Development) and\n[Contributing](CONTRIBUTING.md) for more information on the mechanics of\ncontributing to the Firebase iOS SDK.\n\n## Modernization - More Swifty\n\nWe're continuing a long term journey to migrate from Objective-C to Swift.\n\n## Product Improvements\n\n- [Issues marked with help-wanted tag](https://github.com/firebase/firebase-ios-sdk/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22+)\n- [Pitches](https://github.com/firebase/firebase-ios-sdk/discussions/categories/pitches)\nPropose and discuss ideas for Firebase improvements.\n- [Feature requests](https://github.com/firebase/firebase-ios-sdk/issues?q=is%3Aissue+is%3Aopen+label%3A%22type%3A+feature+request%22)\n- [All open issues](https://github.com/firebase/firebase-ios-sdk/issues)\n\nIndicate your interest in contributing to a bug fix or feature request with a\ncomment. If you would like someone else to solve it, add a thumbs-up.\n\nIf you don't see the feature you're looking for, please add a\n[Feature Request](https://github.com/firebase/firebase-ios-sdk/issues/new/choose).\n\n## Improving the contributor experience\n\nPlease help others to be contributors by filing issues and adding PRs to ease\nthe learning curve to develop, test, and contribute to this repo.\n"
        },
        {
          "name": "ReleaseTooling",
          "type": "tree",
          "content": null
        },
        {
          "name": "Rome.md",
          "type": "blob",
          "size": 3.2900390625,
          "content": "# Firebase Rome\n\n## Context\n\nThis page introduces and provides instructions for using Firebase via a\n[Rome](https://github.com/CocoaPods/Rome) distribution. Based on\nfeedback and usage, the Firebase team may decide to make the Rome\nsupport official.\n\nPlease [let us know](https://github.com/firebase/firebase-ios-sdk/issues) if you\nhave suggestions or questions.\n\n## Introduction\n\nUnlike regular CocoaPods, Rome does not touch the Xcode project file. It\ninstalls and builds all of the frameworks and leaves the project integration to\nyou.\n\nAs a result, with Rome, the installed frameworks are all binary whether the\nCocoaPod itself was source or binary.\n\nIn comparison to Carthage, Rome supports subspecs. Therefore, you can install\nexactly the right frameworks customized for your requirements.\n\n## Rome Installation\n\n```bash\n$ gem install cocoapods-rome\n```\n\n## Firebase Installation\n\nPrefix a Podfile with the following:\n```\nplugin 'cocoapods-rome',\n    dsym: false,\n    configuration: 'Release'\n```\nThen do the following steps:\n\n1. Delete any Firebase pods that you don't need\n1. Run `pod install`\n1. With the Finder `open Rome`\n1. Make sure you have an Xcode project open in Xcode.\n1. In Xcode, hit `⌘-1` to open the Project Navigator pane. It will open on\n   left side of the Xcode window if it wasn't already open.\n1. Drag each framework from the Finder window into Project\n   Navigator pane. In the dialog box that appears, make sure the target you\n   want the framework to be added to has a checkmark next to it, and that\n   you've selected \"Copy items if needed\".\n1. Find the dynamic frameworks: In a shell type:\n   `file Rome/*/* | grep universal | grep dynamic`\n1. Drag each dynamic framework to the \"Embed Frameworks\" section on the\n   Xcode Build Target's \"General\" page.\n1. If you're using FirebaseInAppMessaging, find the resources needed:\n   `ls -ld Pods/*/Resources/*`. More details on this below.\n1. Drag all of those resources into the Project Navigator, just\n   like the frameworks, again making sure that the target you want to add these\n   resources to has a checkmark next to it, and that you've selected \"Copy items\n   if needed\".\n1. Add the -ObjC flag to \"Other Linker Settings\":\n  a. In your project settings, open the Settings panel for your target\n  b. Go to the Build Settings tab and find the \"Other Linker Flags\" setting\n     in the Linking section.\n  c. Double-click the setting, click the '+' button, and add \"-ObjC\" (without\n     quotes)\n1. Add Firebase.h and module support:\n  a. In your project settings, open the Settings panel for your target\n  b. Go to the Build Settings tab and find the \"User Header Search Paths\"\n     setting in the Search Paths section.\n  c. Double-click the setting, click the '+' button, and add\n     `Pods/Firebase/CoreOnly/Sources`\n1. Make sure that the build target(s) includes your project's\n   `GoogleService-Info.plist`\n   ([how to download config file](https://support.google.com/firebase/answer/7015592)).\n1. You're done! Compile your target and start using Firebase.\n\n## Firebase Resource Details\n- If you're including a Firebase component that has resources, copy its bundles\n    into the Xcode project and make sure they're added to the\n    `Copy Bundle Resources` Build Phase :\n    - For InAppMessaging:\n        - ./Rome/FirebaseInAppMessaging.framework/InAppMessagingDisplayResources.bundle\n"
        },
        {
          "name": "SharedTestUtilities",
          "type": "tree",
          "content": null
        },
        {
          "name": "SwiftPM-PlatformExclude",
          "type": "tree",
          "content": null
        },
        {
          "name": "SwiftPMTests",
          "type": "tree",
          "content": null
        },
        {
          "name": "SwiftPackageManager.md",
          "type": "blob",
          "size": 3.3095703125,
          "content": "# Swift Package Manager for Firebase\n\n## Requirements\n\n- Requires Xcode 15.2 or above\n- Analytics requires clients to add `-ObjC` linker option.\n- See [Package.swift](Package.swift) for supported platform versions.\n\n## Limitations\n\n- Product availability varies by platform. See [the chart on this page](https://firebase.google.com/docs/ios/learn-more#firebase_library_support_by_platform)\n  for information on product availability for each platform.\n\n## Installation\n\n> If you've previously used CocoaPods, remove them from the project with `pod deintegrate`.\n\n### Installing from Xcode\n\nAdd a package by selecting `File` → `Add Packages…` in Xcode’s menu bar.\n\n<img src=\"docs/resources/swiftpm_step1.png\">\n\n---\n\nSearch for the Firebase Apple SDK using the repo's URL:\n```console\nhttps://github.com/firebase/firebase-ios-sdk.git\n```\n\nNext, set the **Dependency Rule** to be `Up to Next Major Version`.\n\nThen, select **Add Package**.\n\n<img src=\"docs/resources/swiftpm_step2.png\">\n\n---\n\nChoose the Firebase products that you want installed in your app.\n\n<img src=\"docs/resources/swiftpm_step3.png\">\n\n---\n\nIf you've installed **FirebaseAnalytics**, add the `-ObjC` option to `Other Linker Flags`\nin the `Build Settings` tab.\n\n<img src=\"docs/resources/swiftpm_step4.png\">\n\n---\n\nIf you're using FirebaseCrashlytics, you can use\n`${BUILD_DIR%/Build/*}/SourcePackages/checkouts/firebase-ios-sdk/Crashlytics/run`\nas the run script that allows Xcode to upload your project's dSYM files.\n\nAnother option is to use the\n[upload-symbols](https://github.com/firebase/firebase-ios-sdk/raw/main/Crashlytics/upload-symbols)\nscript. Place it in the directory where your `.xcodeproj` file lives,\neg. `scripts/upload-symbols`, and make sure that the file is executable:\n`chmod +x scripts/upload-symbols`.\nThis script can be used to manually upload dSYM files (for usage notes and\nadditional instructions, run with the `--help` parameter).\n\nIf you're getting `error: Could not get GOOGLE_APP_ID in Google Services file from build environment` on the Crashlytics run script step and you're using Xcode 15 and specifically `User Script Sandboxing = YES`, make sure to include all input files referenced [here](https://github.com/firebase/firebase-ios-sdk/pull/11463) in the Crashlytics run script.\n\n---\n\n### Alternatively, add Firebase to a `Package.swift` manifest\n\nTo integrate via a `Package.swift` manifest instead of Xcode, you can add\nFirebase to the dependencies array of your package:\n\n```swift\ndependencies: [\n  .package(\n    name: \"Firebase\",\n    url: \"https://github.com/firebase/firebase-ios-sdk.git\",\n    .upToNextMajor(from: \"10.4.0\")\n  ),\n\n  // Any other dependencies you have...\n],\n```\n\nThen, in any target that depends on a Firebase product, add it to the `dependencies`\narray of that target:\n\n```swift\n.target(\n  name: \"MyTargetName\",\n  dependencies: [\n    // The product(s) you want (e.g. FirebaseAuth).\n    .product(name: \"FirebaseAuth\", package: \"Firebase\"),\n  ]\n),\n```\n\n## Questions and Issues\n\nPlease provide any feedback via a [GitHub\nIssue](https://github.com/firebase/firebase-ios-sdk/issues/new?template=bug_report.md).\n\nSee current open Swift Package Manager issues\n[here]([https://github.com/firebase/firebase-ios-sdk/labels/Swift%20Package%20Manager](https://github.com/firebase/firebase-ios-sdk/issues?q=is%3Aopen+label%3A%22Swift+Package+Manager%22+sort%3Acomments-desc)).\n"
        },
        {
          "name": "SymbolCollisionTest",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.572265625,
          "content": "[pycodestyle]\n# Several checks are disabled because they're incompatible with Google python\n# style.\n#\n# See https://pycodestyle.readthedocs.io/en/latest/intro.html#error-codes for\n# more details.\nignore =\n    # Google python style indents by two, not four. This trips a number of\n    # rules:\n    E111,E114,E129,\n\n    # W504 enforces that line breaks are after binary operators.\n    # W503 enforces the opposite. Disable it.\n    W503\n\nmax-line-length=80\n\n[flake8]\n# Same list as above\nignore = E111,E114,E129,W503\nmax-line-length=80\nexclude = .git,.idea,__pycache__,scripts/cpplint.py\n"
        }
      ]
    }
  ]
}