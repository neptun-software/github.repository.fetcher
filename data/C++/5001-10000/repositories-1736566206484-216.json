{
  "metadata": {
    "timestamp": 1736566206484,
    "page": 216,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hsutter/cppfront",
      "stars": 5613,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 0.548828125,
          "content": "Checks: 'performance-*, modernize-*, misc-*, -misc-definitions-in-headers, -misc-non-private-member-variables-in-classes, -misc-no-recursion, -misc-include-cleaner, -misc-use-anonymous-namespace, -modernize-use-trailing-return-type, -modernize-use-nodiscard, -modernize-use-emplace, -modernize-loop-convert, -modernize-pass-by-value, -modernize-use-equals-delete, -modernize-use-equals-default, -modernize-use-override, -modernize-avoid-c-arrays, -modernize-raw-string-literal, -modernize-concat-nested-namespaces, -performance-inefficient-string-concatenation'\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.126953125,
          "content": "* text=auto\n\n# Text files to always be normalized and converted to native line endings on checkout\n*.output text\n*.execution text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.373046875,
          "content": "\n*.vcxproj\n*.filters\n*.recipe\n*.user\n*.ilk\n*.log\n*.enc\n*.tlog\n*.idb\n*.obj\n*.ifc\n*.pdb\n*.suo\n*.db\n*.ipch\n*.sln\n*.txt\n*.db-shm\n*.db-wal\n*.opendb\n*.vsidx\n*.lock\n.editorconfig\n*.xml\n*.sarif\n*.bin\n*.exe\nsource/gen_version.bat\nbuild*/\nvenv/*\n*.ifc\n\n# Visual Studio cache directory\n.vs/\n\n# VSCode workspace directory\n.vscode/\nbuildh2.bat\ngen_version.bat\nmkdocs_serve.sh\nexperimental/a.out\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.3525390625,
          "content": "cff-version: 1.2.0\nmessage: >-\n  If you use this software, please cite it using the\n  metadata from this file.\ntype: software\ntitle: cppfront\nauthors:\n  - given-names: Herb\n    family-names: Sutter\nrepository-code: 'https://github.com/hsutter/cppfront'\nabstract: A personal experimental C++ Syntax 2 -> Syntax 1 compiler\nlicense: Apache-2.0 WITH LLVM-exception\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.60546875,
          "content": "# cppfront\n\nThis project is an experimental C++ Syntax 2 -> Syntax 1 transpiler, copyright (c) Herb Sutter &#x2022; See [License](LICENSE)\n\n[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg)](CODE_OF_CONDUCT.md)\n\n\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nadmin at isocpp.org.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.7177734375,
          "content": "\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant  the rights to use your contribution. A sample of the CLA is below.\n\nWhen you submit a pull request, a CLA bot or human will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided. You will only need to do this once for all your contributions to cppfront.\n\n## Cppfront Contribution License Agreement (Sample)\n\nA sample can be found here: [Cppfront CLA 2024-10 - sample.pdf](docs/Cppfront CLA 2024-10 - sample.pdf)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 12.65234375,
          "content": "\nCopyright 2022-2024 Herb Sutter\nSPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\nCppfront is under the Apache License v2.0 with LLVM Exception:\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n---- LLVM Exceptions to the Apache 2.0 License ----\n\nAs an exception, if, as a result of your compiling your source code, portions\nof this Software are embedded into an Object form of such source code, you\nmay redistribute such embedded portions in such Object form without complying\nwith the conditions of Sections 4(a), 4(b) and 4(d) of the License.\n\nIn addition, if you combine or link compiled forms of this Software with\nsoftware that is licensed under the GPLv2 (\"Combined Software\") and if a\ncourt of competent jurisdiction determines that the patent provision (Section\n3), the indemnity provision (Section 9) or other Section of the License\nconflicts with the conditions of the GPLv2, you may retroactively and\nprospectively choose to deem waived or otherwise exclude such Section(s) of\nthe License, but only in their entirety and only with respect to the Combined\nSoftware.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.947265625,
          "content": "# cppfront\n\nCopyright (c) Herb Sutter &#x2022; See [License](LICENSE)\n\n<a href=\"https://hsutter.github.io/cppfront/welcome/hello-world/\"><img width=\"410\" src=\"https://github.com/hsutter/cppfront/assets/1801526/1e160e93-f966-4aee-8377-9f9f3982a95f\"></a><br>\n[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg)](CODE_OF_CONDUCT.md)\n[![Build (clang, gcc, vs)](https://github.com/hsutter/cppfront/actions/workflows/build-cppfront.yaml/badge.svg)](https://github.com/hsutter/cppfront/actions/workflows/build-cppfront.yaml)\n\nCppfront is a compiler from an experimental C++ 'syntax 2' (Cpp2) to today's 'syntax 1' (Cpp1), to prove out some concepts, share some ideas, and prototype features that can also be proposed for evolving today's C++.\n\n## Documentation: [available here](https://hsutter.github.io/cppfront/)\n\n## What's different about this project?\n\nIn short, it aims to help evolve C++ itself, not to be a \"C++ successor.\"\n\n**What it isn't.** Cpp2 is not a successor or alternate language with its own divergent or incompatible ecosystem. For example, it does not have its own nonstandard incompatible modules/concepts/etc. that compete with the Standard C++ features; it does not replace your Standard C++ compiler or other tools; and it does not require any changes to your Standard C++ compiler or standard library or other libraries or tools to keep fully using all of them.\n\n**What it is.** Cpp2 aims to be another \"skin\" for C++ itself, just a simpler and safer way to write ordinary C++ types/functions/objects, and a faster way to experiment with proposals for future new Standard C++ features in a simpler compiler and syntax flavor. It seamlessly uses Standard C++ modules and concepts requirements and other features, and it works with all existing C++20 or higher compilers and libraries and tools right out of the box with no changes required to use them all seamlessly and directly with zero overhead.\n\nFor more, see [What is Cpp2?](https://hsutter.github.io/cppfront/#what-is-cpp2).\n\n## Acknowledgments\n\nScores of people have given valuable feedback and many are listed below, but I especially want to thank Joe Duffy, Anders Hejlsberg, Bjarne Stroustrup, Andrew Sutton, Tim Sweeney, and Mads Torgersen for their insights and valuable feedback on this work over the years — especially when they disagreed with me. I'd also like to thank Dave Abrahams, Andrei Alexandrescu, Walter Bright, Lee Howes, Chris McKinsey, Scott Meyers, Gor Nishanov, Andrew Pardoe, Sean Parent, Jared Parsons, David Sankel, Nathan Sidwell, JC van Winkel, and Ville Voutilainen for broad feedback on the design.\n\nMany more people are listed below for their help with specific parts of the design and those proposals/prototypes. I apologize for the names I have forgotten.\n\n## Further information\n\nTo learn more, please see:\n\n- [**👀 The documentation 👀**](https://hsutter.github.io/cppfront/)\n- [My CppCon 2022 talk, \"Can C++ be 10x simpler and safer ...?\"](https://www.youtube.com/watch?v=ELeZAKCN4tY)\n- [My CppCon 2023 talk, \"Cooperative C++ Evolution: Toward a TypeScript for C++\"](https://www.youtube.com/watch?v=8U3hl8XMm8c)\n- [Update on cppfront at ACCU 2024](https://www.youtube.com/watch?v=EB7yR-1317k&t=3866s)\n- [This repo's wiki](https://github.com/hsutter/cppfront/wiki)\n- The list of papers and talks below\n\n### Papers and talks derived from this work (presented in current syntax as contributions toward ISO C++'s evolution itself)\n\nHere are the ISO C++ papers and CppCon conference talks I've given since 2015 that have been derived from this work, in the order that I brought each piece forward. Most of the details in the materials below are still current with only incremental updates, apart from the specific syntax of course.\n\n#### 2015: Lifetime safety\n\n- [**CppCon 2015**: \"Writing good C++14... _by default_\"](https://youtu.be/hEx5DNLWGgA) particularly [from 29:00 onward](https://youtu.be/hEx5DNLWGgA?t=1757) shows the Lifetime analysis with live demos in a Visual Studio prototype.\n- [**CppCon 2018**: \"Thoughts on a more powerful _and_ simpler C++ (#5 of N)](https://youtu.be/80BZxujhY38):\n    - [The section starting at 18:00](https://youtu.be/80BZxujhY38?t=1097) is an update on the Lifetime status with live demos in a Clang prototype.\n    - [The final part starting at 1:28:00](https://youtu.be/80BZxujhY38?t=5307) shows the Lifetime and Metaclasses proposals working hand-in-hand. This is one of the few places before cppfront where the same compiler has contained prototypes of multiple 'syntax 2'-derived features so I could show how they build on each other when used together.\n- [**C++ Core Guidelines**: Lifetime safety profile](https://github.com/isocpp/CppCoreGuidelines/blob/master/docs/Lifetime.pdf) is this static analysis adopted by the C++ Core Guidelines.\n- [**P1179**: Lifetime Safety: Preventing common dangling](https://wg21.link/p1179) is the same analysis in the WG 21 paper list.\n\nThis is not yet implemented in cppfront. Implementations are shipping in Visual Studio and in CLion, and initial parts have been upstreamed in Clang. I want to especially thank Matthias Gehre, Gabor Horvath, Neil MacIntosh, and Kyle Reed for their help in implementing the Lifetime static analysis design in Visual Studio and a Clang fork. Thanks also to the following for their input and feedback on the specification: Andrei Alexandrescu, Steve Carroll, Pavel Curtis, Gabriel Dos Reis, Joe Duffy, Daniel Frampton, Anna Gringauze, Chris Hawblitzel, Nicolai Josuttis, Ellie Kornstaedt, Aaron Lahman, Ryan McDougall, Nathan Myers, Gor Nishanov, Andrew Pardoe, Jared Parsons, Dave Sielaff, Richard Smith, Jim Springfield, and Bjarne Stroustrup.\n\n#### 2016: Garbage-collected memory arena\n\n- [**CppCon 2016**: \"Leak-freedom in C++... _by default_\"](https://www.youtube.com/watch?v=JfmTagWcqoE) particularly [from 59:00 onward](https://youtu.be/JfmTagWcqoE?t=3558) where I show the strawman prototype I wrote of a tracing garbage-collection memory arena.\n- [**Github.com/hsutter/gcpp**: \"gcpp: Deferred and unordered destruction\"](https://github.com/hsutter/gcpp) is the GitHub prototype I wrote.\n\nThis is not yet implemented in cppfront. I welcome a real GC expert to collaborate with on bringing this forward to become a \"real\" usable tracing GC memory arena that C++ code can opt into, with real C++ zero-overhead costing (don't pay anything if you don't do a `gc.new`, and if you do use it then have the costs be proportional to the number of `gc.new` allocations).\n\n### 2017: Spaceship operator for comparisons, `<=>`\n\n- [**CppCon 2017 (just the intro, first 6 minutes)**: \"Meta: Thoughts on generative C++\"](https://www.youtube.com/watch?v=4AfRAVcThyA).\n- [**P0515**: Consistent comparison](https://wg21.link/p0515) is the proposal in today's syntax that I proposed, and was adopted, for C++20.\n\nThis is part of ISO C++20 and C++23, except only for chained comparisons which is implemented in cppfront. Thank you again to everyone who helped land this in the Standard in C++20 and improve it in C++23, including especially Walter Brown, Lawrence Crowl, Cameron DaCamara, Gabriel Dos Reis, Jens Maurer, Barry Revzin, Richard Smith, and David Stone.\n\n#### 2017: Reflection, generation, and metaclasses\n\n- [**ACCU 2017**: \"Thoughts on metaclasses\"](https://www.youtube.com/watch?v=6nsyX37nsRs) is the first talk I gave about this.\n- [**CppCon 2017**: \"Meta: Thoughts on generative C++\"](https://www.youtube.com/watch?v=4AfRAVcThyA) from after the intro, [from 6:00 onward](https://youtu.be/4AfRAVcThyA?t=393).\n- [**CppCon 2018**: \"Thoughts on a more powerful _and_ simpler C++ (\"Simplifying C++\" #5 of N)](https://youtu.be/80BZxujhY38):\n    - [The section starting at 51:00](https://youtu.be/80BZxujhY38?t=1097) is an update on the Metaclasses status with live demos in a Clang prototype.\n    - (repeating the Lifetime section bullet above) [The final part starting at 1:28](https://youtu.be/80BZxujhY38?t=5307) shows the Lifetime and Metaclasses proposals working hand-in-hand. This is one of the few places before cppfront where the same compiler has contained prototypes of multiple 'syntax 2'-derived features so I could show how they build on each other when used together.\n- [**P0707**: Metaclass functions: Generative C++](https://wg21.link/p0707) is the paper I brought to the ISO C++ committee.\n\nThis is mostly implemented in cppfront, except for the ability to write your own metafunctions (that's coming). Thanks again to Andrew Sutton and his colleagues Wyatt Childers and Jennifer Yao for their help in implementing the Clang-based prototypes of this proposal, and everyone else who contributed feedback on the design including Louis Brandy, Chandler Carruth, Casey Carter, Matúš Chochlík, Lawrence Crowl, Pavel Curtis, Louis Dionne, Gabriel Dos Reis, Joe Duffy, Kenny Kerr, Nicolai Josuttis, Aaron Lahman, Scott Meyers, Axel Naumann, Gor Nishanov, Stephan T. Lavavej, Andrew Pardoe, Sean Parent, Jared Parsons, David Sankel, Richard Smith, Jeff Snyder, Mike Spertus, Mads Torgersen, Daveed Vandevoorde, Tony Van Eerd, JC van Winkel, Ville Voutilainen, and Titus Winters, and many more WG 21 / SG 7 participants.\n\n#### 2018: Updates to Lifetime and Metaclasses (see above)\n\n#### 2019: Zero-overhead deterministic exceptions: Throwing values\n\n- [**ACCU 2019**: \"De-fragmenting C++: Making exceptions more affordable and usable](https://www.youtube.com/watch?v=os7cqJ5qlzo).\n- [**CppCon 2019**: \"De-fragmenting C++: Making exceptions and RTTI more affordable and usable (\"Simplifying C++\" #6 of N)](https://www.youtube.com/watch?v=ARYP83yNAWk).\n- [**P0709**: Zero-overhead deterministic exceptions: Throwing values](https://wg21.link/p0709).\n\nThis is not yet implemented in cppfront.\n\n#### 2020: Parameter passing\n\n- **ACCU autumn 2019**: \"Quantifying accidental complexity: An empirical look at teaching and using C++\" was my first public talk about this, but a \"beta\" version that was not recorded; you can find the description [here](https://accu.org/conf-previous/2019_autumn/sessions/#XQuantifyingAccidentalComplexityAnEmpiricalLookatTeachingandUsingC).\n- [**CppCon 2020**: \"Quantifying accidental complexity: An empirical look at teaching and using C++\"](https://www.youtube.com/watch?v=6lurOCdaj0Y):\n    - The first half of the talk is about how to be rigorous and actually measure that we're making improvements, including to measure the percentage of today's C++ guidance that is about parameter passing and initialization.\n    - The second half of the talk is about `in`, `inout`, `out`, `move`, and `forward`.\n- [**d0708**: \"Parameter passing -> guaranteed unified initialization and value setting](https://github.com/hsutter/708/blob/main/708.pdf) goes into additional detail I didn't have time for in the talk.\n- [**Github.com/hsutter/708**](https://github.com/hsutter/708) is a repo with the paper and demo examples as used in the talk.\n- [**P2064**: \"Assumptions\"](https://wg21.link/p2064) is also related to this 'syntax 2' work, because this work includes a contracts design, and assumptions ought to be separate from that. This paper was making the technical argument why assumptions and assertions (contracts) are different things.\n\nThis is implemented in cppfront, including the unified `operator=` for user-defined types. Thanks to Andrew Sutton for an initial Clang-based implementation.\n\n#### 2020: \"Bridge to NewThingia\"\n\nIn 2020 I also started socializing the ideas of:\n\n- _How do you answer \"why is your thing different when others that look like it have all failed\"?_\n- _What does it take to be adoptable, including to enable incremental adoption?_\n\nI had specifically in mind a major C++ evolution's success when many attempts to make C or C++ safer have failed, and the importance of seamless compatibility. The talk was \"Bridge to NewThingia,\" presented at:\n\n- [**DevAroundTheSun**: \"Bridge to Newthingia\"](https://herbsutter.com/2020/06/14/talk-video-available-bridge-to-newthingia-devaroundthesun/), an initial 26-minute version.\n- [**C++ on Sea**: \"Bridge to NewThingia\"](https://www.youtube.com/watch?v=BF3qw1ObUyo) which especially [at the end starting near 48:00](https://youtu.be/BF3qw1ObUyo?t=2883) had a slide that directly tackled the \"C++ major evolution\" scenario, and laid out what I think it would take to have credible answers to the key questions.\n\n#### 2021: `is`, `as`, and pattern matching\n\n- [**CppCon 2021**: \"Extending and simplifying C++: Thoughts on pattern matching using `is` and `as`\"](https://www.youtube.com/watch?v=raB_289NxBk).\n- [**P2392**: Pattern matching using `is` and `as`](https://wg21.link/p2392) is the ISO C++ committee paper.\n\nThis is mostly implemented in cppfront. There is support for `is`, `as`, and basic `inspect` expressions.\n\n#### 2022: CppCon 2022 talk and cppfront\n\n- [**CppCon 2022: \"Can C++ be 10x simpler and safer ...?\"**](https://www.youtube.com/watch?v=ELeZAKCN4tY)\n- This repo.\n\n# Epilog: 2016 roadmap diagram\n\nFinally, here is a roadmap diagram I made in 2016 that is still recognizably a roadmap of Cpp2's design approach, although a few additions like `<=>` came later. I think this is important to show design decisions are related and support each other, so that they are not a gaggle of point fixes but a coordinated refactoring of C++ into a smaller number of regular and combinable features. As Bjarne Stroustrup put it in the _ACM History of Programming Languages III_ (among other places):\n\n> \"**10% the size of C++** in definition and similar in front-end compiler size. ... **Most of the simplification would come from generalization.**\" (B. Stroustrup, ACM HOPL-III, 2007; emphasis added)\n\n\n![image](https://user-images.githubusercontent.com/1801526/189503047-0b0a4f0f-c5e7-42b2-a17d-37d80bef3970.png)\n\nI haven't updated this roadmap diagram since 2016, but it shows many of the talks and papers that have come since then from this work, and it's still a pretty up-to-date roadmap of the major parts of Cpp2. As of spring 2023, cppfront implements most of this roadmap.\n\nI hope you enjoy reading about this personal experiment, and I hope that it might at least start a conversation about what could be possible _**within C++**_'s own evolution to make C++ 10x simpler, safer, and more toolable.\n\n"
        },
        {
          "name": "build_h2.bat",
          "type": "blob",
          "size": 0.0908203125,
          "content": "@echo off\ncd source\ncppfront reflect.h2 -verb\ncd ..\\include\ncppfront cpp2regex.h2 -verb\ncd..\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "experimental",
          "type": "tree",
          "content": null
        },
        {
          "name": "gen_build.bat",
          "type": "blob",
          "size": 0.1015625,
          "content": "@echo off\ncppfront -_gen_build > source\\build.info\n@echo Build stamp updated to:\ntype source\\build.info\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 3.0185546875,
          "content": "# To view the documentation locally on your machine, use the following steps\n#\n# Clone the GitHub cppfront repo locally, then on the command line:\n#\n#   cd /github/cppfront\n#   python -m venv venv\n#   source venv/bin/activate\n#   pip install mkdocs-material\n#   mkdocs new .\n#   mkdocs serve\n#\n# The last command should eventually print something like\n#   Serving on http://127.0.0.1:8000/\n# and you can open that URL in a local brower. If you are locally editing\n# the documentation, leave the server process running and the browser\n# pages will auto-reload as you save edits.\n#\nsite_name: \"Cpp2 and cppfront — An experimental 'C++ syntax 2' and its first compiler\"\ntheme:\n  name: material\n  features:\n    - navigation.sections\n    - navigation.expand\n    - navigation.instant\n    - navigation.instant.preview\n    - navigation.top\n    - search.suggest\n    - search.highlight\n    - content.tabs.link\n    - content.code.annotate\n    - content.code.annotation\n    - content.code.copy\n    - content.footnote.tooltips\n  language: en\n  palette:\n    - scheme: default\n      toggle:\n        icon: material/toggle-switch-off-outline\n        name: Switch to dark mode\n      primary: teal\n      accent: purple\n    - scheme: slate\n      toggle:\n        icon: material/toggle-switch\n        name: switch to light mode\n        primary: teal\n        accent: lime\n\nextra_css:\n  - stylesheets/extra.css\n\nnav:\n  - 'Welcome & getting started':\n    - 'Overview: What are Cpp2 and cppfront? How do I get and build cppfront?': welcome/overview.md\n    - 'Hello, world!': welcome/hello-world.md\n    - 'Adding cppfront to your existing C++ project': welcome/integration.md\n  - 'Cpp2 reference':\n    - 'Common concepts': cpp2/common.md\n    - 'Expressions': cpp2/expressions.md\n    - 'Declarations and aliases': cpp2/declarations.md\n    - 'Objects, initialization, and memory': cpp2/objects.md\n    - 'Functions, branches, and loops': cpp2/functions.md\n    - 'Contracts': cpp2/contracts.md\n    - 'Types and inheritance': cpp2/types.md\n    - 'Metafunctions and reflection': cpp2/metafunctions.md\n    - 'Namespaces': cpp2/namespaces.md\n    - 'Safety and \"unchecked\"': cpp2/safety.md\n    # - 'Modules': cpp2/modules.md\n  - 'Cppfront reference':\n    - 'Using Cpp1 (today''s syntax) and Cpp2 in the same source file': cppfront/mixed.md\n    - 'Cppfront command line options': cppfront/options.md\n  - 'Notes and supplemental topics':\n    - '@regex status: Regular expression features': notes/regex_status.md\n\nmarkdown_extensions:\n  - pymdownx.highlight:\n      anchor_linenums: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - admonition\n  - pymdownx.arithmatex:\n      generic: true\n  - footnotes\n  - pymdownx.details\n  - pymdownx.superfences:\n      custom_fences:\n        - name: mermaid\n          class: mermaid\n          format: !!python/name:pymdownx.superfences.fence_code_format\n  - pymdownx.mark\n  - attr_list\n\ncopyright: |\n  &copy <a href=\"https://github.com/hsutter\" target=\"_blank\" rel=\"noopener\">Herb Sutter</a> &bull; <a href=\"https://github.com/hsutter/cppfront/blob/main/LICENSE\">cppfront license </a>\n"
        },
        {
          "name": "passthrough-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "regression-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "source",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}