{
  "metadata": {
    "timestamp": 1736566225983,
    "page": 239,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wjakob/instant-meshes",
      "stars": 5273,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 0.923828125,
          "content": "version: 1.0.{build}\nos: Visual Studio 2015\ntest: off\nclone_folder: C:\\projects\\InstantMeshes\nbranches:\n  only:\n    - master\ninstall:\n  - git submodule update --init --recursive\n  - cinstall: python\nbuild_script:\n  - echo Running cmake...\n  - cd c:\\projects\\InstantMeshes\n  - cmake -G \"Visual Studio 14 2015 Win64\"\n  - set MSBuildLogger=\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n  - set MSBuildOptions=/v:m /p:Configuration=Release /logger:%MSBuildLogger%\n  - msbuild %MSBuildOptions% InstantMeshes.sln\n  - cd Release\n  - 7z a ../instant-meshes-windows.zip \"Instant Meshes.exe\"\n  - cd ..\n  - appveyor PushArtifact instant-meshes-windows.zip -FileName instant-meshes-windows.zip\ndeploy:\n  provider: S3\n  region: eu-central-1\n  access_key_id: AKIAJRIZYZRNQUXO7WZA\n  secret_access_key:\n    secure: Vy3I/MR5NtWDTXLbHcUzS6cwCSKZa/M8JYQZwHrip7cVW50Aez239OeqpC2je9yd\n  bucket: instant-meshes\n  set_public: true\n  folder: Release\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.216796875,
          "content": "Makefile\n*.cmake\n.DS_Store\next_build\nbuild\nRelease\nDebug\nCMakeCache.txt\nCMakeFiles\n.ninja_deps\n.ninja_log\nrules.ninja\nbuild.ninja\nInstant Meshes.app\nresources.cpp\nresources.h\nim\ndatasets\n.vs\n*.vcxproj\n*.filters\n*.sdf\n*.sln"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.38671875,
          "content": "[submodule \"ext/nanogui\"]\n\tpath = ext/nanogui\n\turl = https://github.com/wjakob/nanogui\n[submodule \"ext/pcg32\"]\n\tpath = ext/pcg32\n\turl = https://github.com/wjakob/pcg32\n[submodule \"ext/dset\"]\n\tpath = ext/dset\n\turl = https://github.com/wjakob/dset\n[submodule \"ext/tbb\"]\n\tpath = ext/tbb\n\turl = https://github.com/wjakob/tbb\n[submodule \"ext/pss\"]\n\tpath = ext/pss\n\turl = https://github.com/wjakob/pss\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.142578125,
          "content": "language: cpp\ndist: trusty\nsudo: false\ndeploy:\n  provider: s3\n  bucket: instant-meshes\n  region: eu-central-1\n  skip_cleanup: true\n  access_key_id: $AWS_ACCESS_KEY_ID\n  secret_access_key: $AWS_SECRET_ACCESS_KEY\n  acl: public_read\n  local_dir: build\nmatrix:\n  include:\n    - os: linux\n      compiler: gcc-4.8.1\n      script:\n        - git submodule update --init --recursive\n        - CXXFLAGS=\"-mno-rtm\" cmake -DNANOGUI_USE_GLAD=ON -DCMAKE_CXX_COMPILER=g++-4.8\n        - make -j 2\n        - mkdir build\n        - zip -r build/instant-meshes-linux.zip \"Instant Meshes\"\n      addons:\n        apt:\n          sources:\n            - ubuntu-toolchain-r-test\n            - kubuntu-backports\n          packages:\n            - g++-4.8\n            - libglu1-mesa-dev\n            - libxxf86vm-dev \n            - libxrandr-dev\n            - libxinerama-dev\n            - libxcursor-dev\n            - libxi-dev\n            - cmake\n            - binutils\n    - os: osx\n      compiler: clang\n      script:\n        - git submodule update --init --recursive\n        - cmake .\n        - make -j 2\n        - mkdir build\n        - zip -r build/instant-meshes-macos.zip \"Instant Meshes.app\"\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 7.7666015625,
          "content": "cmake_minimum_required (VERSION 2.8.3)\nproject(InstantMeshes)\n\noption(INSTANT_MESHES_DEV_MODE \"Instant meshes developer mode\" OFF)\n\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  message(STATUS \"Setting build type to 'Release' as none was specified.\")\n  set(CMAKE_BUILD_TYPE Release CACHE STRING \"Choose the type of build.\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug\" \"Release\"\n    \"MinSizeRel\" \"RelWithDebInfo\")\nendif()\nstring(TOUPPER \"${CMAKE_BUILD_TYPE}\" U_CMAKE_BUILD_TYPE)\n\nif(NOT IS_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/ext/nanogui/ext/glfw\")\n  message(FATAL_ERROR \"The Instant Meshes dependency repositories (NanoGUI, GLFW, etc.) are missing! \"\n    \"You probably did not clone the project with --recursive. It is possible to recover \"\n    \"by calling \\\"git submodule update --init --recursive\\\"\")\nendif()\n\n# Enable folders for projects in Visual Studio\nif (CMAKE_GENERATOR MATCHES \"Visual Studio\")\n  set_property(GLOBAL PROPERTY USE_FOLDERS ON)\nendif()\n\n# Sanitize build environment for static build with C++11\nif (MSVC)\n  add_definitions (/D \"_CRT_SECURE_NO_WARNINGS\")\n  add_definitions (/D \"__TBB_NO_IMPLICIT_LINKAGE\")\n\n  # Parallel build on MSVC (all targets)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /MP\")\n\n  if (NOT CMAKE_SIZEOF_VOID_P EQUAL 8)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /arch:SSE2\")\n\n    # Disable Eigen vectorization for Windows 32 bit builds (issues with unaligned access segfaults)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /DEIGEN_DONT_ALIGN\")\n  endif()\n\n  # Static build\n  set(CompilerFlags\n        CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE\n        CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO\n        CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE\n        CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO)\n  foreach(CompilerFlag ${CompilerFlags})\n    string(REPLACE \"/MD\" \"/MT\" ${CompilerFlag} \"${${CompilerFlag}}\")\n  endforeach()\nelseif(APPLE)\n  # Try to auto-detect a suitable SDK\n  # Commented out for now -- causes a too new SDK to be selected on AppVeyor\n  #execute_process(COMMAND bash -c \"xcodebuild -version -sdk | grep MacOSX | grep Path | head -n 1 | cut -f 2 -d ' '\" OUTPUT_VARIABLE CMAKE_OSX_SYSROOT)\n  #string(REGEX REPLACE \"(\\r?\\n)+$\" \"\" CMAKE_OSX_SYSROOT \"${CMAKE_OSX_SYSROOT}\")\n  #string(REGEX REPLACE \"^.*X([0-9.]*).sdk$\" \"\\\\1\" CMAKE_OSX_DEPLOYMENT_TARGET \"${CMAKE_OSX_SYSROOT}\")\nendif()\n\n# Enable C++11 mode on GCC / Clang\nif (CMAKE_CXX_COMPILER_ID MATCHES \"GNU\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=gnu++11\")\nelseif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\nendif()\n\n# Build NanoGUI\nset(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL \" \" FORCE)\nset(NANOGUI_BUILD_SHARED  OFF CACHE BOOL \" \" FORCE)\nset(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL \" \" FORCE)\nadd_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/ext/nanogui ext_build/nanogui)\nset_property(TARGET nanogui glfw glfw_objects bin2c PROPERTY FOLDER \"dependencies\")\n\n# Build TBB\nset(TBB_BUILD_STATIC ON CACHE BOOL \" \" FORCE)\nset(TBB_BUILD_SHARED OFF CACHE BOOL \" \" FORCE)\nset(TBB_BUILD_TBBMALLOC OFF CACHE BOOL \" \" FORCE)\nset(TBB_BUILD_TBBMALLOC_PROXY OFF CACHE BOOL \" \" FORCE)\nset(TBB_BUILD_TESTS OFF CACHE BOOL \" \" FORCE)\n\nadd_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/ext/tbb ext_build/tbb)\nset_property(TARGET tbb_static tbb_def_files PROPERTY FOLDER \"dependencies\")\n\n# Compile instant meshes with various compiler warnings turned on\nif(MSVC)\n  if(CMAKE_CXX_FLAGS MATCHES \"/W[0-4]\")\n    string(REGEX REPLACE \"/W[0-4]\" \"/W4\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n  else()\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /W4\")\n  endif()\nelseif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" OR CMAKE_CXX_COMPILER_ID MATCHES \"GNU\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-unused-parameter\")\n  if (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-gnu-anonymous-struct -Wno-c99-extensions -Wno-nested-anon-types\")\n  endif()\nendif()\n\n# Header file directories of dependency libraries\ninclude_directories(\n  # NanoGUI\n  ${CMAKE_CURRENT_SOURCE_DIR}/ext/nanogui/include\n  # NanoGUI dependencies (Eigen, GLFW, NanoVG, GLAD?)\n  ${NANOGUI_EXTRA_INCS}\n  # Intel Thread Building Blocks\n  ${CMAKE_CURRENT_SOURCE_DIR}/ext/tbb/include\n  # Disjoint set data structure\n  ${CMAKE_CURRENT_SOURCE_DIR}/ext/dset\n  # Parallel stable sort\n  ${CMAKE_CURRENT_SOURCE_DIR}/ext/pss\n  # Pseudorandom number generator\n  ${CMAKE_CURRENT_SOURCE_DIR}/ext/pcg32\n  # RPLY mesh I/O library\n  ${CMAKE_CURRENT_SOURCE_DIR}/ext/rply\n  # Half precision type\n  ${CMAKE_CURRENT_SOURCE_DIR}/ext/half\n  # Resource file\n  ${CMAKE_CURRENT_BINARY_DIR}\n)\n\n# Run bin2c on resource files\nset(PNG_FILES\n  ${CMAKE_CURRENT_SOURCE_DIR}/resources/comb.png\n  ${CMAKE_CURRENT_SOURCE_DIR}/resources/delete_stroke.png\n  ${CMAKE_CURRENT_SOURCE_DIR}/resources/loadmesh.png\n  ${CMAKE_CURRENT_SOURCE_DIR}/resources/scare.png\n  ${CMAKE_CURRENT_SOURCE_DIR}/resources/sing_dir.png\n  ${CMAKE_CURRENT_SOURCE_DIR}/resources/sing_pos.png\n  ${CMAKE_CURRENT_SOURCE_DIR}/resources/instantmeshes.png)\nfile(GLOB FRAG_FILES \"${CMAKE_CURRENT_SOURCE_DIR}/resources/*.frag\")\nfile(GLOB VERT_FILES \"${CMAKE_CURRENT_SOURCE_DIR}/resources/*.vert\")\nfile(GLOB GEO_FILES  \"${CMAKE_CURRENT_SOURCE_DIR}/resources/*.geo\")\nset(IM_RESOURCES ${PNG_FILES} ${FRAG_FILES} ${VERT_FILES} ${GEO_FILES})\n\nadd_custom_command(\n  OUTPUT resources.cpp\n  COMMAND bin2c ARGS resources.cpp resources.h ${IM_RESOURCES}\n  DEPENDS bin2c ${IM_RESOURCES}\n  COMMENT \"Running bin2c\"\n  PRE_BUILD VERBATIM)\n\nif (INSTANT_MESHES_DEV_MODE)\n  add_definitions(-DDEV_MODE)\nendif()\n\n# Resource file (icons etc.)\nset(EXTRA_SOURCE \"\")\nif (APPLE)\n  set(EXTRA_SOURCE \"${CMAKE_CURRENT_SOURCE_DIR}/resources/im.icns\")\nelseif(WIN32)\n  set(EXTRA_SOURCE \"${CMAKE_CURRENT_SOURCE_DIR}/resources/im.rc\")\nendif()\n\nadd_executable(InstantMeshes MACOSX_BUNDLE\n  resources.cpp\n  src/glutil.h src/glutil.cpp\n  src/widgets.h src/widgets.cpp\n  src/aabb.h\n  src/main.cpp src/common.h\n  src/meshio.h src/meshio.cpp\n  src/normal.h src/normal.cpp\n  src/adjacency.h src/adjacency.cpp\n  src/meshstats.h src/meshstats.cpp\n  src/hierarchy.h src/hierarchy.cpp\n  src/extract.h src/extract.cpp\n  src/viewer.h src/viewer.cpp\n  src/field.h src/field.cpp\n  src/bvh.h src/bvh.cpp\n  src/subdivide.h src/subdivide.cpp\n  src/reorder.h src/reorder.cpp\n  src/serializer.h src/serializer.cpp\n  src/batch.h src/batch.cpp\n  src/smoothcurve.h src/smoothcurve.cpp\n  src/cleanup.h src/cleanup.cpp\n  src/dedge.h src/dedge.cpp\n  ext/rply/rply.c\n  ${EXTRA_SOURCE})\n\nadd_definitions(${NANOGUI_EXTRA_DEFS})\ntarget_link_libraries(InstantMeshes tbb_static nanogui ${NANOGUI_EXTRA_LIBS})\n\nset_target_properties(InstantMeshes PROPERTIES OUTPUT_NAME \"Instant Meshes\")\n\nif (WIN32)\n  # Quench some warnings on MSVC\n  if (MSVC)\n    set_source_files_properties(ext/rply/rply.c PROPERTIES COMPILE_FLAGS \"/wd4127\")\n  endif()\nelseif (APPLE)\n  # Build an application bundle on OSX\n  set_target_properties(InstantMeshes PROPERTIES MACOSX_BUNDLE_BUNDLE_NAME \"Instant Meshes\")\n  set_target_properties(InstantMeshes PROPERTIES MACOSX_BUNDLE_BUNDLE_GUI_IDENTIFIER \"com.im.InstantMeshes\")\n  set_target_properties(InstantMeshes PROPERTIES MACOSX_BUNDLE_ICON_FILE im.icns)\n  set_target_properties(InstantMeshes PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/resources/MacOSXBundleInfo.plist.in)\n  set_source_files_properties(resources/im.icns PROPERTIES MACOSX_PACKAGE_LOCATION \"Resources\")\nelse()\n  # Insulate from a few types of ABI changes by statically linking against libgcc and libstdc++\n  set_target_properties(InstantMeshes PROPERTIES LINK_FLAGS \"-static-libgcc\")\n  #set_target_properties(InstantMeshes PROPERTIES LINK_FLAGS \"-static-libgcc -static-libstdc++\")\nendif()\n\nif (UNIX AND NOT ${U_CMAKE_BUILD_TYPE} MATCHES DEBUG)\n  add_custom_command(TARGET InstantMeshes POST_BUILD COMMAND strip $<TARGET_FILE:InstantMeshes>)\nendif()\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 2.1728515625,
          "content": "Copyright (c) 2015 Wenzel Jakob, Daniele Panozzo, Marco Tarini,\nand Olga Sorkine-Hornung. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nYou are under no obligation whatsoever to provide any bug fixes, patches, or\nupgrades to the features, functionality or performance of the source code\n(\"Enhancements\") to anyone; however, if you choose to make your Enhancements\navailable either publicly, or directly to the authors of this software, without\nimposing a separate written license agreement for such Enhancements, then you\nhereby grant the following license: a non-exclusive, royalty-free perpetual\nlicense to install, use, modify, prepare derivative works, incorporate into\nother computer software, distribute, and sublicense such enhancements or\nderivative works thereof, in binary and source code form.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.6630859375,
          "content": "# Instant Meshes\n[![Build Status](https://travis-ci.org/wjakob/instant-meshes.svg?branch=master)](https://travis-ci.org/wjakob/instant-meshes)\n[![Build status](https://ci.appveyor.com/api/projects/status/dm4kqxhin5uxiey0/branch/master?svg=true)](https://ci.appveyor.com/project/wjakob/instant-meshes/branch/master)\n\n<img width=\"170\" height=\"166\" src=\"https://github.com/wjakob/instant-meshes/raw/master/resources/icon.png\">\n\nThis repository contains the interactive meshing software developed as part of the publication\n\n> **Instant Field-Aligned Meshes**<br/>\n> Wenzel Jakob, Marco Tarini, Daniele Panozzo, Olga Sorkine-Hornung<br/>\n> In *ACM Transactions on Graphics (Proceedings of SIGGRAPH Asia 2015)*<br/>\n> [PDF](http://igl.ethz.ch/projects/instant-meshes/instant-meshes-SA-2015-jakob-et-al.pdf),\n> [Video](https://www.youtube.com/watch?v=U6wtw6W4x3I),\n> [Project page](http://igl.ethz.ch/projects/instant-meshes/)\n\n\n##### In commercial software\n\nSince version 10.2, Modo uses the Instant Meshes algorithm to implement its\nautomatic retopology feature. An interview discussing this technique and more\nrecent projects is available [here](https://www.foundry.com/trends/design-visualisation/mitsuba-renderer-instant-meshes).\n\n## Screenshot\n\n![Instant Meshes logo](https://github.com/wjakob/instant-meshes/raw/master/resources/screenshot.jpg)\n\n## Pre-compiled binaries\n\nThe following binaries (Intel, 64 bit) are automatically generated from the latest GitHub revision.\n\n> [Microsoft Windows](https://instant-meshes.s3.eu-central-1.amazonaws.com/Release/instant-meshes-windows.zip)<br/>\n> [Mac OS X](https://instant-meshes.s3.eu-central-1.amazonaws.com/instant-meshes-macos.zip)<br/>\n> [Linux](https://instant-meshes.s3.eu-central-1.amazonaws.com/instant-meshes-linux.zip)\n\nPlease also fetch the following dataset ZIP file and extract it so that the\n``datasets`` folder is in the same directory as ``Instant Meshes``, ``Instant Meshes.app``,\nor ``Instant Meshes.exe``.\n\n> [Datasets](https://instant-meshes.s3.eu-central-1.amazonaws.com/instant-meshes-datasets.zip)\n\nNote: On Linux, Instant Meshes relies on the program ``zenity``, which must be installed.\n\n## Compiling\n\nCompiling from scratch requires CMake and a recent version of XCode on Mac,\nVisual Studio 2015 on Windows, and GCC on Linux. \n\nOn MacOS, compiling should be as simple as\n\n    git clone --recursive https://github.com/wjakob/instant-meshes\n    cd instant-meshes\n    cmake .\n    make -j 4\n\nTo build on Linux, please install the prerequisites ``libxrandr-dev``,\n``libxinerama-dev``, ``libxcursor-dev``, and ``libxi-dev`` and then use the\nsame sequence of commands shown above for MacOS.\n\nOn Windows, open the generated file ``InstantMeshes.sln`` after step 3 and proceed building as usual from within Visual Studio.\n\n## Usage\n\nTo get started, launch the binary and select a dataset using the \"Open mesh\" button on the top left (the application must be located in the same directory as the 'datasets' folder, otherwise the panel will be empty).\n\nThe standard workflow is to solve for an orientation field (first blue button) and a position field (second blue button) in sequence, after which the 'Export mesh' button becomes active. Many user interface elements display a descriptive message when hovering the mouse cursor above for a second.\n\nA range of additional information about the input mesh, the computed fields,\nand the output mesh can be visualized using the check boxes accessible via the\n'Advanced' panel.\n\nClicking the left mouse button and dragging rotates the object; right-dragging\n(or shift+left-dragging) translates, and the mouse wheel zooms. The fields can also be manipulated using brush tools that are accessible by clicking the first icon in each 'Tool' row.\n"
        },
        {
          "name": "ext",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}