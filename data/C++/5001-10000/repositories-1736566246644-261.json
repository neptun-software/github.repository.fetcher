{
  "metadata": {
    "timestamp": 1736566246644,
    "page": 261,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cuberite/cuberite",
      "stars": 5075,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.8623046875,
          "content": "# Not the exact style guide but enough for basic clang-tidy fix-its\nLanguage: Cpp\nBasedOnStyle: LLVM\n\nAlignAfterOpenBracket: AlwaysBreak\nBreakConstructorInitializers: AfterColon\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nPointerAlignment: Middle\nSortIncludes: false\nSpacesBeforeTrailingComments: 2\nUseTab: Always\nMaxEmptyLinesToKeep: 5\n\nTabWidth: 4\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nIndentWidth: 4\nIndentCaseLabels: true\n\nBreakBeforeBraces: Custom\nBraceWrapping:\n  AfterClass: true\n  AfterControlStatement: true\n  AfterEnum: true\n  AfterExternBlock: true\n  AfterFunction: true\n  AfterNamespace: true\n  AfterStruct: true\n  AfterUnion: true\n  BeforeCatch: true\n  BeforeElse: true\n  IndentBraces: false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n\n# Always include globals first\nIncludeCategories:\n  - Regex: 'Globals.h'\n    Priority: -1\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 1.0830078125,
          "content": "Checks: >-\n  -*,\n  readability-identifier-naming,\n  readability-redundant-string-cstr,\n  readability-redundant-string-init,\n  readability-simplify-boolean-expr,\n  performance-unnecessary-value-param,\n  performance-unnecessary-copy-initialization,\n  performance-for-range-copy,\n  performance-implicit-conversion-in-loop,\nCheckOptions:\n- key:             readability-identifier-naming.PrivateMemberPrefix\n  value:           'm_'\n- key:             readability-identifier-naming.ClassConstantCase\n  value:           aNy_CasE\n# an empty *Prefix needs a *Case to work\n- key:             readability-identifier-naming.ClassConstantPrefix\n  value:           ''\n#- key:             readability-identifier-naming.PrivateMemberCase\n#  value:           CamelCase\n#- key:             readability-identifier-naming.FunctionCase\n#  value:           CamelCase\n#- key:             readability-identifier-naming.EnumCase\n#  value:           camelBack\n\n- key: performance-unnecessary-value-param.AllowedTypes\n  value: 'cEntityEffect;cNoise'\nWarningsAsErrors: '*'\nHeaderFilterRegex: '/cuberite/src/\\.?[^\\.]'\nFormatStyle: 'file'\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1103515625,
          "content": "\nroot = true\n\n[*]\ncharset = utf-8\nindent_style = tab\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1982421875,
          "content": "# Set the *.data files to be checked out as binary files.\n# Used for the HTTP test data files, they need to have the CRLF line endings\n# even on Linux, because they're HTTP protocol dumps.\n*.data binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.5654296875,
          "content": "build/\nbuild*/\nnbproject/\nipch/\nWin32/\nMCServer\nServer/Cuberite\nServer/buildinfo\nServer/CONTRIBUTORS\nServer/LICENSE\nServer/Licenses\nServer/itemblacklist\nTools/MCADefrag/MCADefrag\nTools/ProtoProxy/ProtoProxy\nTesting/\nChunkWorxSave.ini\ndoxy/\n.vscode/\nProfiling\nSymbols\ncloc-ignored.txt\ncloc.xml\ncloc.xsl\n*.ncb\n*.user\n*.suo\n*.sqlite\n/EveryNight.cmd\n/UploadLuaAPI.cmd\nGPUCache\nAllFiles.lst\nGPUCache\n\n# IDE Stuff\n## Sublime Text\n*.sublime-*\n## emacs\n*.*~\n*~\n*.orig\n## CLion\n.idea\n## Eclipse\n.cproject\n.project\n*.cbp\n## KDevelop\n*.kdev*\n## Vim\n.cache/\n\n# world inside source\nChunkWorx.ini\ngroups.ini\nitems.ini\nmonsters.ini\nsettings.ini\nterrain.ini\nusers.ini\nwebadmin.ini\nworld.ini\ncrafting.txt\nmotd.txt\nlogs\nplayers\nworld\nworld_nether\n\n# cmake stuff\nCMakeFiles/\ncmake_install.cmake\nCMakeCache.txt\nCTestTestfile.cmake\nMakefile\n\n*.a\n*.d\n*.so\ntests/*/*-exe\nCMakeCache.txt\nCMakeFiles\nMakefile\ncmake_install.cmake\ninstall_mainfest.txt\nsrc/Cuberite\nlib/tolua++/tolua\nsrc/Bindings/Bindings.*\nsrc/Bindings/BindingDependencies.txt\nCuberite.dir/\nsrc/AllFiles.lst\n\n# win32 cmake stuff\n*.vcxproj\n*.vcproj\n*.vcxproj.filters\n*.opensdf\n*.sdf\n*.sln\n*.VC.opendb\n*.VC.db\n*.idb\n.vs/\n\n# cmake output folders and files\nZERO_CHECK.dir/\nDebug/\nDebugProfile/\nRelease/\nReleaseProfile/\n*.dir/\nCPackConfig.cmake\nCPackSourceConfig.cmake\ncmake-build-*\n\n# APIDump-generated status files:\nServer/cuberite_api.lua\nServer/official_undocumented.lua\nServer/NewlyUndocumented.lua\nServer/.luacheckrc\ncompile_commands.json\n\n# compile.sh folder\nbuild-cuberite\n\n# clang-tidy\ntidy-build\nrun-clang-tidy.py\n\n# ctags output\ntags\n\n# mac things\n.DS_Store\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.994140625,
          "content": "[submodule \"Server/Plugins/Core\"]\n\tpath = Server/Plugins/Core\n\turl = https://github.com/cuberite/Core.git\n[submodule \"Server/Plugins/ProtectionAreas\"]\n\tpath = Server/Plugins/ProtectionAreas\n\turl = https://github.com/cuberite/ProtectionAreas.git\n[submodule \"Server/Plugins/ChatLog\"]\n\tpath = Server/Plugins/ChatLog\n\turl = https://github.com/cuberite/ChatLog.git\n[submodule \"lib/mbedtls\"]\n\tpath = lib/mbedtls\n\turl = https://github.com/cuberite/polarssl.git\n\tignore = dirty\n[submodule \"lib/SQLiteCpp\"]\n\tpath = lib/SQLiteCpp\n\turl = https://github.com/cuberite/SQLiteCpp.git\n\tignore = dirty\n[submodule \"lib/libevent\"]\n\tpath = lib/libevent\n\turl = https://github.com/cuberite/libevent.git\n\tignore = dirty\n[submodule \"lib/jsoncpp\"]\n\tpath = lib/jsoncpp\n\turl = https://github.com/open-source-parsers/jsoncpp.git\n\tignore = dirty\n[submodule \"lib/TCLAP\"]\n\tpath = lib/TCLAP\n\turl = https://github.com/cuberite/TCLAP.git\n\tignore = dirty\n[submodule \"lib/cmake-coverage\"]\n\tpath = lib/cmake-coverage\n\turl = https://github.com/cuberite/cmake-coverage.git\n\tignore = dirty\n[submodule \"lib/expat\"]\n\tpath = lib/expat\n\turl = https://github.com/cuberite/expat.git\n\tignore = dirty\n[submodule \"lib/lua\"]\n\tpath = lib/lua\n\turl = https://github.com/cuberite/lua.git\n\tignore = dirty\n[submodule \"lib/luaexpat\"]\n\tpath = lib/luaexpat\n\turl = https://github.com/cuberite/luaexpat.git\n\tignore = dirty\n[submodule \"lib/luaproxy\"]\n\tpath = lib/luaproxy\n\turl = https://github.com/cuberite/luaproxy.git\n\tignore = dirty\n[submodule \"lib/sqlite\"]\n\tpath = lib/sqlite\n\turl = https://github.com/cuberite/sqlite.git\n\tignore = dirty\n[submodule \"lib/tolua++\"]\n\tpath = lib/tolua++\n\turl = https://github.com/cuberite/toluapp.git\n\tignore = dirty\n[submodule \"lib/fmt\"]\n\tpath = lib/fmt\n\turl = https://github.com/fmtlib/fmt.git\n\tignore = dirty\n[submodule \"Tools/BlockTypePaletteGenerator/lib/lunajson\"]\n\tpath = Tools/BlockTypePaletteGenerator/lib/lunajson\n\turl = https://github.com/grafi-tt/lunajson.git\n[submodule \"lib/libdeflate\"]\n\tpath = lib/libdeflate\n\turl = https://github.com/cuberite/libdeflate\n"
        },
        {
          "name": "BACKERS",
          "type": "blob",
          "size": 0.3798828125,
          "content": "Thanks to the following people for supporting the Cuberite project with a donation:\n\n - Alvin\n - Anonymous\n - chrobione\n - DrMasik\n - Fllamber\n - JimSVMI83\n - Lordake\n - ltdTM\n - Phillip Inman\n - PureTryOut\n - Robert Cringely\n - spekdrum\n - SphinxC0re\n - TooAngel\n - Utking\n - VaiN474\n\nIf you enjoy Cuberite, feel free to donate to the project on Liberapay:\nhttps://liberapay.com/Cuberite\n"
        },
        {
          "name": "CMake",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.87109375,
          "content": "# This is the top-level CMakeLists.txt file for the Cuberite project\n#\n# Use CMake to generate the build files for your platform\n\ncmake_minimum_required (VERSION 3.13)\ncmake_policy(VERSION 3.13...3.17.2)\nproject(\n\tCuberite\n\tDESCRIPTION \"A lightweight, fast and extensible game server for Minecraft\"\n\tHOMEPAGE_URL \"https://cuberite.org\"\n\tLANGUAGES C CXX\n)\n\noption(BUILD_TOOLS \"Sets up additional executables to be built along with the server\" OFF)\noption(BUILD_UNSTABLE_TOOLS \"Sets up yet more executables to be built, these can be broken and generally are obsolete\" OFF)\noption(NO_NATIVE_OPTIMIZATION \"Disables CPU-specific optimisations for the current machine, allows use on other CPUs of the same platform\" OFF)\noption(PRECOMPILE_HEADERS \"Enable precompiled headers for faster builds\" ON)\noption(SELF_TEST \"Enables testing code to be built\" OFF)\noption(UNITY_BUILDS \"Enables source aggregation for faster builds\" ON)\noption(WHOLE_PROGRAM_OPTIMISATION \"Enables link time optimisation for Release\" ON)\n\ninclude(\"CMake/AddDependencies.cmake\")\ninclude(\"CMake/Fixups.cmake\")\ninclude(\"CMake/GenerateBindings.cmake\")\ninclude(\"CMake/GroupSources.cmake\")\ninclude(\"SetFlags.cmake\")\n\n# Add build timestamp and details:\ninclude(\"CMake/StampBuild.cmake\")\n\n# We need C++17 features:\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\n# Static CRT:\nset(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\n\n# TODO: set_build_stamp()\nset_global_flags()\nbuild_dependencies()\n\nadd_executable(${CMAKE_PROJECT_NAME})\nadd_subdirectory(src)\n\nset_exe_flags(${CMAKE_PROJECT_NAME})\nlink_dependencies(${CMAKE_PROJECT_NAME})\n\n# Set the startup project to Cuberite, and the debugger dir:\nset_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT ${CMAKE_PROJECT_NAME})\nset_target_properties(${CMAKE_PROJECT_NAME} PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}/Server\")\n\n# Enable PCH and jumbo builds on supporting CMake:\nif (CMAKE_VERSION VERSION_GREATER_EQUAL \"3.16\")\n\tif (PRECOMPILE_HEADERS)\n\t\ttarget_precompile_headers(${CMAKE_PROJECT_NAME} PRIVATE src/Globals.h)\n\tendif()\n\n\tset_target_properties(${CMAKE_PROJECT_NAME} PROPERTIES UNITY_BUILD ${UNITY_BUILDS})\nelse()\n\tmessage(WARNING \"Precompiled headers for FASTER BUILDS not enabled, upgrade to CMake 3.16 or newer!\")\nendif()\n\n# Selectively disable warnings in the level where the target is created:\nif(CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n\t# Generated file has old-style casts, missing prototypes, and deprecated declarations\n\tset_source_files_properties(\"${PROJECT_SOURCE_DIR}/src/Bindings/Bindings.cpp\" PROPERTIES COMPILE_OPTIONS -Wno-everything)\n\n\t# File failed to follow NHS guidelines on handwashing and has not maintained good hygiene\n\tset_source_files_properties(\"${PROJECT_SOURCE_DIR}/src/IniFile.cpp\" PROPERTIES COMPILE_OPTIONS -Wno-header-hygiene)\nelseif (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n\tset_source_files_properties(\"${PROJECT_SOURCE_DIR}/src/Bindings/Bindings.cpp\" PROPERTIES COMPILE_OPTIONS -w)\nendif()\n\nif(BUILD_TOOLS)\n\tmessage(STATUS \"Building tools\")\n\tadd_subdirectory(Tools/GrownBiomeGenVisualiser/)\n\tadd_subdirectory(Tools/MCADefrag/)\n\tadd_subdirectory(Tools/NoiseSpeedTest/)\n\tadd_subdirectory(Tools/ProtoProxy/)\nendif()\n\nif(BUILD_UNSTABLE_TOOLS)\n\tmessage(STATUS \"Building unstable tools\")\n\tadd_subdirectory(Tools/GeneratorPerformanceTest/)\nendif()\n\n# Self Test Mode enables extra checks at startup\nif(SELF_TEST)\n\tmessage(STATUS \"Tests enabled\")\n\tenable_testing()\n\tadd_subdirectory(tests)\nendif()\n\n# The need for speed (in Release):\nif(WHOLE_PROGRAM_OPTIMISATION)\n    include(CheckIPOSupported)\n    check_ipo_supported(RESULT IPO_SUPPORTED OUTPUT IPO_CHECK_OUTPUT)\n    if(IPO_SUPPORTED)\n        set_property(TARGET ${CMAKE_PROJECT_NAME} PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)\n    else()\n        message(WARNING \"IPO is not supported: ${IPO_CHECK_OUTPUT}\")\n    endif()\nendif()\n\nemit_fixups()\ngroup_sources()\nenable_bindings_generation()\n"
        },
        {
          "name": "COMPILING.md",
          "type": "blob",
          "size": 14.5244140625,
          "content": "Compiling Cuberite\n==================\n\nTo compile Cuberite from source, you need the following set of software:\n\n - CMake\n - Platform-specific make tool (Windows would be MSVC, Linux/macOS GNU make, etc.)\n - C compiler\n - Modern C++17 capable compiler and linker\n\nTo contribute code, you also need a Git client.\n\nWindows\n-------\n\nWe use Microsoft Visual Studio for Windows compilation. It is possible to use other toolchains, but we don't test against them and they aren't supported. Visual Studio 2017 Community and above are being actively used for development.\n\nYou can find download links for VS2019 Community [here][1].\n\nNext, you need to download and install [CMake][2]. You should download a full installation package, so that the installer will set everything up for you (especially the paths).\n\nTo contribute your changes to the source back to the repository, you need a Git client. Options are:\n\n - [Git for Windows][3]\n - [GitHub Desktop][4]\n - [TortoiseGit][5]\n\nAlternatively, if you want only to compile the source, without contributing, you can [download the sources in a ZIP file directly from GitHub][6].\n\nIf you're using Git to get the source, use the following command to set up the local workspace correctly:\n\n```\ngit clone --recursive https://github.com/cuberite/cuberite.git\n```\n\nNow that you have the source, it's time to prepare the project files for your favorite compiler. Open a command window in the folder with the source and type in:\n```\nmkdir build\ncd build\ncmake ..\n```\nThis creates a `build` folder where the build will take place, then runs CMake, which will auto-detect your Visual Studio version and produce the appropriate project and solution files.\n\nFinally, open the newly created file, `Cuberite.sln`, in your Visual Studio.\n\nIf you want to run Cuberite from within VS, you need to first make sure that it will be run with the correct home folder. Normally this happens automatically, but for some Visual Studio versions the process doesn't stick. Right-click on the Cuberite project in the Solution Explorer tool window, and select Properties. In the dialog, navigate to Configuration properties -> Debugging in the tree on the left, then make sure the value `Working Directory` is set to `../Server`. If you don't do this, the server won't be able to find crafting recipes, item names or plugins.\n\n### Release Configuration\n\nTo make Visual Studio produce the version with the best performance, you will need to select a Release configuration. Go to menu Build -> Configuration Manager, and in the opened dialog, change the top left combo box (Active solution configuration) to Release. Close the dialog and build the solution. The resulting executable is called `Cuberite.exe` in the `Server` folder.\n\n### Debug Configuration\n\nIn order to tinker with the code, you'll more than likely need to use the debugging features of your IDE. To make them the easiest to use, you should switch to the Debug configuration - this provides the highest level of information while debugging, for the price of the executable being 2 - 10 times slower. Go to menu Build -> Configuration Manager, and in the opened dialog, change the top left combo box (Active solution configuration) to Debug. Close the dialog and build the solution. The resulting executable is called `Cuberite_debug.exe` in the `Server` folder.\n\nmacOS\n-----\n\n - Install git from its [website][7] or homebrew: `brew install git`.\n\n - Install Xcode (commandline tools are recommended) from the App Store or [the website][8].\n\n - Install CMake from its [website][9] or homebrew: `brew install cmake`.\n\nCuberite requires Xcode 11.3 or newer.\n\n### Getting the Source\n\n```\ngit clone --recursive https://github.com/cuberite/cuberite.git\n```\n\n### Building\n\nFollow the instructions at [CMake on Unix-based platforms](#cmake-on-unix-based-platforms), using Xcode as cmake's generator. If no generator is specified, CMake will use the Makefile generator, in which case you must build with the `make` command.\n\nAfter doing so, run the command `xcodebuild lib/polarssl/POLARSSL.xcodeproj` in the build directory, in order to build polarssl, a library that is required by Cuberite. Lastly, run the command `xcodebuild` to build Cuberite. Optionally, you may open the project files for polarssl and then Cuberite in Xcode and build there.\n\n\nLinux, FreeBSD etc.\n-------------------\n\nInstall git, make, cmake and clang (or gcc), using your platform's package manager. Debian/Ubuntu:\n\n```\nsudo apt-get install git make cmake clang\n```\nEnsure that you have modern C++ compiler and linker (Clang 7.0+, GCC 7.4+, or VS 2017+).\nCuberite also requires CMake 3.13 or newer.  You might find that your distribution\ndefaults are too out of date, in which case you may need to add a new `apt` source,\nor download directly from the projects' websites:\n\n - [Clang][Clang-download]\n - [CMake][2]\n\n### Getting the Source\n\n```\ngit clone --recursive https://github.com/cuberite/cuberite.git\n```\n\n### Building\n\nRun the following commands to build Cuberite:\n\n```\nmkdir Release\ncd Release\ncmake -DCMAKE_BUILD_TYPE=RELEASE ..\nmake -j`nproc`\n```\n\nThis will build Cuberite in release mode, which is better for almost all cases. For more `cmake` options, or for building in debug mode, see [CMake on Unix-based platforms](#cmake-on-unix-based-platforms).\n\nAndroid\n-------\n\nIt is required that users obtain the latest copies of:\n\n - [The Android Native Development Kit (NDK)][10]\n - [Lua (download a binary)][11]\n\nWindows users may optionally install the [Ninja build system][12] for improved build speeds.\n\n### Getting the Source\n\n```\ngit clone --recursive https://github.com/cuberite/cuberite.git\n```\n\n### Configuration\n\nFrom the `android` subdirectory:\n\n```\ncmake . -DCMAKE_SYSTEM_NAME=Android -DCMAKE_SYSTEM_VERSION=16 -DCMAKE_BUILD_TYPE=Release -DCMAKE_ANDROID_ARCH_ABI=armeabi -DCMAKE_ANDROID_NDK=\"\"\n```\nwhere `CMAKE_ANDROID_NDK` should be the absolute path to where the Android NDK is installed.\n\n#### Generators to Use\n\nOn Linux, the default Make is suggested. No additional parameters are required for this option.\n\nWindows users may make use of Visual Studio to compile for Android, but CMake requires the presence of Nvidia CodeWorks/Nsight Tegra, which can be a hassle to install.\n\nThe easiest generator to use seems to be the NDK-bundled Make, to be specified:\n * `-G \"MinGW Makefiles\" -DCMAKE_MAKE_PROGRAM=\"\"`\nwhere `CMAKE_MAKE_PROGRAM` should be the absolute path to the `make` program, found under the `prebuilt/windows-*/bin` subdirectory in the NDK folder.\n\nThe next easiest generator is Ninja, which additionally offers multithreaded builds, to be specified:\n * `-G \"Ninja\"`\n\n#### Additional ABI Options\n\nFor additional ABI options, visit: https://cmake.org/cmake/help/latest/variable/CMAKE_ANDROID_ARCH_ABI.html\n\nPlease note that certain ABIs require specific [API levels](#api-level-requirements).\n\n#### API Level Requirements\n\nThe minimum API level is 16 in the verbatim copy of this folder, due to the inclusion of position independent compilation. Additonally, API level 21 or higher is needed for 64 bit ABIs as earlier versions have no support for this architecture.\n\nTo lower these requirements to run on very old devices, it is necessary to select a compatible ABI, and disable position independent code generation.\n\n### Building\n\nFrom the `android` subdirectory:\n\n```\ncmake --build .\n```\n\nIf the build succeeded, an Android-launchable binary will have been generated under the `Server` directory. However, since this directory does not have any supporting files, they must be copied from the parent folder's `Server` directory.\n\nTo use it in the official Android app, compress the aforementioned `Server` directory into a Zip file, and transfer it to the phone on which the app is installed.\n\n#### Using the Compile Script on Linux\n\nLinux users are entitled to use the compile script, which provides some easy to use options and also contains instructions for using the binaries in the official Android app.\n\nWhen running the compile script, make sure to have the necessary build tools installed and run the compile script as following:\n\n```\nNDK=\"path/to/ndk/root\" CMAKE=\"path/to/cmake/executable\" android/compile.sh <abi|all|clean>\n```\n\nThe NDK variable must be set to the path to the NDK root, CMAKE to a call of the cmake binary used for compiling. If the cmake binary is in the PATH, a simple `CMAKE=cmake` is enough. As last parameter you either have to enter a correct ABI (see https://cmake.org/cmake/help/latest/variable/CMAKE_ANDROID_ARCH_ABI.html) or either all or clean. Clean will cause the script to remove the android-build directory, all will compile and zip all Cuberite for all 7 ABIs and create a zip archive of the android/Server direcory for use in the official Android app. If you are unsure which ABI is required for your phone, open the official Android app and navigate to \"Settings\" and \"Install\". It will show you the required ABI. Additional parameters may be given through environment variables, namely TYPE=\"\" as Release or Debug (defaults to Release) and THREADS=\"4\" as the number of threads used for compilation (defaults to 4).\n\n### Running the Executables on a Device\n\nNote the locations to which the Zip files were transferred. Open the official Android app, and select \"Settings\", then \"Install\", and finally select the Zip files.\n\nCuberite for Android is now ready to use.\n\nCMake on Unix-based platforms\n-----------------------------\n\n### Release Mode\n\nRelease mode is preferred for almost all cases, it has much better speed and less console spam. However, if you are developing Cuberite actively, debug mode might be better.\n\nAssuming you are in the Cuberite folder created in the initial setup step, you need to run these commands:\n\n```\nmkdir Release\ncd Release\ncmake -DCMAKE_BUILD_TYPE=RELEASE ..\n```\n\nNOTE: CMake can generate project files for many different programs, such as Xcode, eclipse, and ninja. To use a different generator, first type `cmake --help`, and at the end, cmake will output the different generators that are available. To specify one, add `-G` followed by the name of the generator, in the `cmake` command. Note that the name is case-sensitive.\n\nThe executable will be built in the `cuberite/Server` folder and will be named `Cuberite`.\n\n### Debug Mode\n\nDebug mode is useful if you want more debugging information about Cuberite while it's running or if you want to use a debugger like GDB to debug issues and crashes.\n\nAssuming you are in the Cuberite folder created in the Getting the sources step, you need to run these commands:\n\n```\nmkdir Debug\ncd Debug\ncmake -DCMAKE_BUILD_TYPE=DEBUG ..\n```\n\nNOTE: CMake can generate project files for many different programs, such as Xcode, eclipse, and ninja. To use a different generator, first type `cmake --help`, and at the end, cmake will output the different generators that are available. To specify one, add `-G` followed by the name of the generator, in the `cmake` command. Note that the name is case-sensitive.\n\nThe executable will be built in the `cuberite/Server` folder and will be named `Cuberite_debug`.\n\n### 32 Bit Mode Switch\n\nThis is useful if you want to compile Cuberite on an x64 (64-bit Intel) machine but want to use on an x86 (32-bit Intel) machine. This switch can be used with debug or release mode. Simply add:\n\n    -DFORCE_32=1\n\nto your cmake command and 32 bit will be forced.\n\n### Compiling for Another Computer of the Same Architecture\n\nWhen cross-compiling for another computer of the same architecture it is important to set the NO_NATIVE_OPTIMIZATION flag. This tells the compiler not to optimise for your machine. This switch can be used with debug or release mode. To enable, simply add:\n\n    -DNO_NATIVE_OPTIMIZATION=1\n\nto your cmake command.\n\n### List of All Build Flags\n\nCuberite's build process supports a large number of flags for customising the builds. Use these flags by adding `-DFlag_name=Value` to the cmake configuration command. For example to enable test generation using the `SELF_TEST` flag add: `-DSELF_TEST=ON`\n\n###### BUILD_TOOLS\nAdds the Cuberite tools to the build. At the moment only MCADefrag and ProtoProxy are added. Define as ON to enable. Define as OFF to disable.\n\n###### BUILD_UNSTABLE_TOOLS\nAdds tools that are not working yet to the build. Currently this is only the Generator Performance Test. Used for developing these tools. Define as ON to enable. Define as OFF to disable.\n\n###### SELF_TEST\nEnables generation of tests and self-test startup code. Tests can be run with ctest and with makefiles make test. Define as ON to enable. Define as OFF to disable.\n\n###### FORCE_32\nForces the build to use 32 bit builds on *nix systems. Define as ON to enable. Define as OFF to disable.\n\n###### NO_NATIVE_OPTIMIZATION\nDisables optimizations for the build host. This is important when building on a different machine from the one you will run Cuberite on as the build machine may support instructions the final machine does not. This flag only has any effect on linux. Define as ON to enable. Define as OFF to disable.\n\n###### DISABLE_SYSTEM_LUA\nDisables use of the system lua, uses a compiled version instead. Useful if compiling on a system that doesn't already have lua installed. This option is incompatible with cross-compilation.\n\n###### UNITY_BUILDS\nControls use of unity builds, an optimisation that improves compile times at the expense of system compatibility and error message utility. Some systems may need to have this disabled in order to compile properly. Unity builds are only supported on CMake versions >= 3.16, if you have an old version unity builds will always be disabled and this flag has no effect.\n\n###### PRECOMPILE_HEADERS\nControls use of precompiled headers, an optimisation that improves compile times at the expense of system compatibility. Some systems may need to have this disabled in order to compile properly. Precompiled headers are only supported on CMake versions >= 3.16, if you have an old version precompiled headers will always be disabled and this flag has no effect.\n\n###### WHOLE_PROGRAM_OPTIMISATION\nControls use of link time optimisation (LTO), which slightly improves the generated binary file at the expense of compilation speed and system compatibility. Some systems may need to have this disabled in order to compile properly.\n\n\n[1]: https://www.visualstudio.com/downloads/\n[2]: https://cmake.org/download/\n[3]: https://git-for-windows.github.io/\n[4]: https://desktop.github.com/\n[5]: https://tortoisegit.org/\n[6]: https://github.com/cuberite/cuberite/archive/master.zip\n[7]: https://git-scm.com/\n[8]: https://developer.apple.com/downloads\n[9]: https://cmake.org/\n[10]: https://developer.android.com/ndk/downloads/index.html\n[11]: https://www.lua.org/download.html\n[12]: https://github.com/ninja-build/ninja/releases\n[clang-download]: https://releases.llvm.org/download.html\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.1689453125,
          "content": "How to Contribute to Cuberite\n=============================\n\nThank you for your interest in Cuberite. Contributing to Cuberite is easy, just fork the project on GitHub, make your changes and submit a pull request to get your code merged. That's all there is to it.\nCheck out [GETTING-STARTED.md][1] for more information about setting up the development environment for Cuberite, finding issues to work on, etc...\n\nIf you are new to open source and/or GitHub, or just aren't sure about some details in the contribution process, here's a tutorial to get you started:\n[How to Contribute to an Open Source Project on GitHub][2]\n\nCode Conventions\n----------------\n\nWhen contributing, you must follow our code conventions. Otherwise, CI builds will automatically fail and your PR will not be merged until the non-conforming code is fixed. Due to this, we strongly advise you to run `src/CheckBasicStyle.lua` before committing, it will perform various code style checks and warn you if your code does not conform to our conventions. `CheckBasicStyle.lua` can be configured to run automatically before every commit via a pre-commit hook, **this is highly recommended**. There are instructions on how to achieve this at the bottom of this file.\n\nHere are the conventions:\n\n - We use C++17.\n - Please use **tabs for indentation and spaces for alignment**. This means that if it's at line start, it's a tab; if it's in the middle of a line, it's a space.\n - All functions in all classes need documenting comments on what they do and what behavior they follow, use doxy-comments formatted as `/** Description */`. Do not use asterisks on additional lines in multi-line comments.\n - Use spaces after the comment markers: `// Comment` instead of `//Comment`. A comment must be prefixed with two spaces if it's on the same line with code:\n   - `SomeFunction()<Space><Space>//<Space>Note the two spaces prefixed to me and the space after the slashes.`\n - All variable names and function names use CamelCase style, with the exception of single letter variables.  \n   - `ThisIsAProperFunction()` `This_is_bad()` `this_is_bad()` `GoodVariableName` `badVariableName`.\n - All private member variables start with `m_`, function parameters start with `a_`, class names start with `c`.\n   - `class cMonster { int m_Health; int DecreaseHealth(int a_Amount); }`\n - Put spaces after commas. `Vector3d(1, 2, 3)` instead of `Vector3d(1,2,3)`\n - Put spaces before and after every operator, except unary operators.\n   - `a = b + c;`\n   - `if (a == b)`\n   - `++itr`\n - Keep individual functions spaced out by 5 empty lines, this enhances readability and makes navigation in the source file easier.\n - Add those extra parentheses to conditions, especially in C++:\n   - `if ((a == 1) && ((b == 2) || (c == 3)))` instead of ambiguous `if (a == 1 && b == 2 || c == 3)`\n   - This helps prevent mistakes such as `if (a & 1 == 0)`\n - Alpha-sort stuff that makes sense alpha-sorting—long lists of similar items etc.\n - White space is free, so use it freely.\n   - \"freely\" as in \"plentifully\", not \"arbitrarily\".\n - All `case` statements inside a `switch` need an extra indent.\n - Each and every control statement deserves its braces. This helps maintainability later on when the file is edited, lines added or removed - the control logic doesn't break so easily.\n   - The only exception: a `switch` statement with all `case` statements being a single short statement is allowed to use the short brace-less form.\n   - These two rules really mean that indent is governed by braces.\n - Function parameters that are coordinates should be passed using an appropriate storage container, and not as three separate arguments.\n   - e.g. for a block position, Vector3i. For an entity position, Vector3d. For a chunk coordinate, cChunkCoords.\n   - For a 3-dimensional box of blocks, use cCuboid. For an axis-aligned bounding box, use cBoundingBox.\n - Parameters smaller than 4 elements (e.g. Vector3, cChunkCoords) should be passed by value. All other parameters should be passed by const reference, where applicable.\n   - `Foo(Vector3d a_Param1, const cCuboid & a_Param2)`\n   - See the discussion in issue #3853\n - Use the provided wrappers for OS stuff:\n   - Threading is done by inheriting from `cIsThread`, thread synchronization through `cCriticalSection` and `cEvent`, file access and filesystem operations through the `cFile` class, high-precision timing through `cStopwatch`\n - No magic numbers, use named constants:\n   - `E_ITEM_XXX`, `E_BLOCK_XXX` and `E_META_XXX` for items and blocks.\n   - `cEntity::etXXX` for entity types, `cMonster::mtXXX` for mob types.\n   - `dimNether`, `dimOverworld` and `dimEnd` for world dimension.\n   - `gmSurvival`, `gmCreative`, `gmAdventure` for game modes.\n   - `wSunny`, `wRain`, `wThunderstorm` for weather.\n   - `cChunkDef::Width`, `cChunkDef::Height` for chunk dimensions (C++).\n   - etc.\n - Instead of checking for a specific value, use an `IsXXX` function, if available:\n   - `cPlayer:IsGameModeCreative()` instead of` (cPlayer:GetGameMode() == gmCreative)` (the player can also inherit the gamemode from the world, which the value-d condition doesn't catch).\n - All `#include` directives are specified relative to the root source directory.\n - Add an empty last line in all source files (GCC and Git can complain otherwise).\n\nPre-commit Hook\n---------------\nWhen contributing, the code conventions above *must* be followed. Otherwise, the CI builds will automatically fail and your PR will not be merged until the non-conforming code is fixed. It is highly recommended to set up a pre-commit hook which will check your code style before every commit. Here is how to do that:\n\n - Clone the repository as usual.\n - Go to your `<clone location>/.git/hooks` folder, create a text file named \"pre-commit\" there with the following contents:\n\n```\n#!/bin/sh\nsrc/CheckBasicStyle.lua 1>&2 -g\n```\n\n - If on Linux/Unix, you need to give the newly created file an execute permission: `chmod +x .git/hooks/pre-commit`\n - Lua must be installed.\n - You're done. Now, `src/CheckBasicStyle.lua` will check the changed files before every commit. If a problem is found, it will point you to that problem and will cancel the commit.\n\nNote that the check script is not smart enough to catch everything, so not having any warnings does not necessarily imply that you followed the conventions fully. The other humans working on this will perform more checks before merging.\n\nGithub-related conventions\n--------------------------\nThe following rules are not strictly enforced, but if you follow them, you will make it easier for us to review your changes.\n - Use good short title for your PRs. `Store Health as float` is good, `Fix #4024` is not good.\n - If a PR fixes an issue, mention it in the PR description, but **not** in the commits themselves. Typically, we add the line `Fixes #007` to the bottom of the PR description, this makes Github link the PR to the issue, auto-close the issue when the PR is merged, and also is included in the merge message.\n - Focus on one thing only. Each PR should avoid making unrelated changes - those makes the history more difficult to understand later on, and they make the review a headache.\n - Feel free to rebase, amend or otherwise manipulate the commits in the PR (of course, as long as you're the only one working on the PR). We mostly squash-merge PRs, so your internal commit structure will not be important in the end.\n - If the PR is about one change, but it makes sense to keep the change broken into several commits, make sure each such commit is compilable, encapsulated, and possibly add a note to the PR description so that we consider this.\n\t\nCopyright\n---------\n\nYour must either place your work in the public domain or licensed it under the Apache License 2.0, and if so you must add yourself to the contributors file to show that you accept the publication of your work under the license.\n\n**PLUGINS ONLY**: If your plugin is not licensed under the Apache License 2.0, then it must be compatible and marked as such. This is only valid for the plugins included within the Cuberite source; plugins developed on separate repositories can use whatever license they want.\n\n[1]: https://github.com/cuberite/cuberite/blob/master/GETTING-STARTED.md\n[2]: https://egghead.io/courses/how-to-contribute-to-an-open-source-project-on-github\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 1.791015625,
          "content": "This file contains all known copyright holders of this software, as far as is\npractically possible to ascertain.\n\nIf you contribute to this software you must add yourself to this file, to\nindicate your agreement to license your contributions according to the license\nas provided in the LICENSE file.\n\n12xx12\n9caihezi\nAirOne01\nAltenius\nanguslmm (Angus McLean)\nashquarky\nBasedDoge (Donated AlchemistVillage prefabs)\nbearbin (Alexander Harkness)\nbeeduck\nbibo38\nbirkett (Anthony Birkett)\nBond_009\nchangyongGuo\nCocosushi6\nCoolPuppyKid\nDarkoGNU\nderouinw\ndImrich (Damian Imrich)\nDiusrex\nDuralex\ndyexlzc\nEarboxer (Zach DeCook)\nFakeTruth (founder)\nfeyokorenhof\nGareth Nelson\nGefaketHD\nGriezn (Seppe Degryse)\nHaoTNN\nhavel06 (Michal Havlíček)\nhle0\nHowaner\nion232 (Arran Ireland)\njan64\njasperarmstrong\njclever77 (Jon Clever)\nJK2K\nkevinr (Kevin Riggle)\nkeyboard\nKingCol13\nLapayo\nlinnemannr (Reid Linnemann)\nLittleBigBug (Ethan Jones)\nlkolbly\nLogicParrot\nLuksor\nM10360\nmarmot21\nMasy98\nmathiascode\nmaxluchterhand1\nMaxwellScroggs\nmborland\nmBornand\nmcfadyeni\nMeMuXin\nmgueydan\nMikeHunsinger\nmjagdis (Mike Jagdis)\nMorritz (TJ)\nmorsmordere (Anzhelika Iugai)\nmtilden\nnesco\nNiLSPACE (formerly STR_Warrior)\nnpresley0506\np-mcgowan\nPersson-dev\nplan1231\npokechu22\nProjectBM\npwnOrbitals\nRodarg\nRorkh\nrs2k\nSamJBarney\nSchwertspize\nSeadragon91 (Lukas Pioch)\nsleirsgoevy (Sergey Lisov)\nSofapriester\nsolvictor\nSpekdrum (Pablo Beltran)\nSphinxC0re\nSpongecade (Updated wiki links)\nsteve-nzr\nstructinf (xdot)\nsweetgiorni\nSuperEwald\nSxw1212\nTaugeshtu\nTheHyper45\ntheophriene\ntigerw (Tiger Wang)\ntonibm19\ntonitch (Debucquoy Anthony)\nTooAngel\ntympaniplayer (Nate Palmer)\nUltraCoderRU\nWarmist\nWebFreak001\nwilliamhatcher (Helped with API documentation updates and bug fixes)\nworktycho\nXenoxis\nxoft (Mattes Dolak/madmaxoft on GH)\nYeeeeezus (Donated AlchemistVillage prefabs)\n"
        },
        {
          "name": "CheckLua.cmake",
          "type": "blob",
          "size": 0.5595703125,
          "content": "# CheckLua.cmake\n\n# Checks whether the Lua standalone interpreter is installed on the host system\n# If found, sets HAS_LUA_INTERPRETER to 1 and LUA_INTERPRETER_VERSION to the version reported (\"5.1\" etc.)\n# If not found, unsets HAS_LUA_INTERPRETER\n\n\n\n\nexecute_process(\n\tCOMMAND lua -e \"io.stdout:write(string.match(_VERSION, '%d+%.%d+'))\"\n\tRESULT_VARIABLE LUA_EXECUTED\n\tOUTPUT_VARIABLE LUA_INTERPRETER_VERSION\n)\n\nif (\"${LUA_EXECUTED}\" STREQUAL \"0\")\n\tset(HAS_LUA_INTERPRETER 1)\nelse()\n\tunset(HAS_LUA_INTERPRETER)\n\tunset(LUA_INTERPRETER_VERSION)\nendif()\n\nunset(LUA_EXECUTED)\n"
        },
        {
          "name": "Doxyfile",
          "type": "blob",
          "size": 76.310546875,
          "content": "# Doxyfile 1.8.1.2\n\n# This file describes the settings to be used by the documentation system\n# doxygen (www.doxygen.org) for a project\n#\n# All text after a hash (#) is considered a comment and will be ignored\n# The format is:\n#       TAG = value [value, ...]\n# For lists items can also be appended using:\n#       TAG += value [value, ...]\n# Values that contain spaces should be placed between quotes (\" \")\n\n#---------------------------------------------------------------------------\n# Project related configuration options\n#---------------------------------------------------------------------------\n\n# This tag specifies the encoding used for all characters in the config file\n# that follow. The default is UTF-8 which is also the encoding used for all\n# text before the first occurrence of this tag. Doxygen uses libiconv (or the\n# iconv built into libc) for the transcoding. See\n# https://www.gnu.org/software/libiconv for the list of possible encodings.\n\nDOXYFILE_ENCODING      = UTF-8\n\n# The PROJECT_NAME tag is a single word (or sequence of words) that should\n# identify the project. Note that if you do not use Doxywizard you need\n# to put quotes around the project name if it contains spaces.\n\nPROJECT_NAME           = Cuberite\n\n# The PROJECT_NUMBER tag can be used to enter a project or revision number.\n# This could be handy for archiving the generated documentation or\n# if some version control system is used.\n\nPROJECT_NUMBER         =\n\n# Using the PROJECT_BRIEF tag one can provide an optional one line description\n# for a project that appears at the top of each page and should give viewer\n# a quick idea about the purpose of the project. Keep the description short.\n\nPROJECT_BRIEF          = \"A lightweight, fast and extensible game server for Minecraft\"\n\n# With the PROJECT_LOGO tag one can specify an logo or icon that is\n# included in the documentation. The maximum height of the logo should not\n# exceed 55 pixels and the maximum width should not exceed 200 pixels.\n# Doxygen will copy the logo to the output directory.\n\nPROJECT_LOGO           = Server/favicon.png\n\n# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute)\n# base path where the generated documentation will be put.\n# If a relative path is entered, it will be relative to the location\n# where doxygen was started. If left blank the current directory will be used.\n\nOUTPUT_DIRECTORY       = doxy\n\n# If the CREATE_SUBDIRS tag is set to YES, then doxygen will create\n# 4096 sub-directories (in 2 levels) under the output directory of each output\n# format and will distribute the generated files over these directories.\n# Enabling this option can be useful when feeding doxygen a huge amount of\n# source files, where putting all generated files in the same directory would\n# otherwise cause performance problems for the file system.\n\nCREATE_SUBDIRS         = YES\n\n# The OUTPUT_LANGUAGE tag is used to specify the language in which all\n# documentation generated by doxygen is written. Doxygen will use this\n# information to generate all constant output in the proper language.\n# The default language is English, other supported languages are:\n# Afrikaans, Arabic, Brazilian, Catalan, Chinese, Chinese-Traditional,\n# Croatian, Czech, Danish, Dutch, Esperanto, Farsi, Finnish, French, German,\n# Greek, Hungarian, Italian, Japanese, Japanese-en (Japanese with English\n# messages), Korean, Korean-en, Lithuanian, Norwegian, Macedonian, Persian,\n# Polish, Portuguese, Romanian, Russian, Serbian, Serbian-Cyrillic, Slovak,\n# Slovene, Spanish, Swedish, Ukrainian, and Vietnamese.\n\nOUTPUT_LANGUAGE        = English\n\n# If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will\n# include brief member descriptions after the members that are listed in\n# the file and class documentation (similar to JavaDoc).\n# Set to NO to disable this.\n\nBRIEF_MEMBER_DESC      = YES\n\n# If the REPEAT_BRIEF tag is set to YES (the default) Doxygen will prepend\n# the brief description of a member or function before the detailed description.\n# Note: if both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the\n# brief descriptions will be completely suppressed.\n\nREPEAT_BRIEF           = YES\n\n# This tag implements a quasi-intelligent brief description abbreviator\n# that is used to form the text in various listings. Each string\n# in this list, if found as the leading text of the brief description, will be\n# stripped from the text and the result after processing the whole list, is\n# used as the annotated text. Otherwise, the brief description is used as-is.\n# If left blank, the following values are used (\"$name\" is automatically\n# replaced with the name of the entity): \"The $name class\" \"The $name widget\"\n# \"The $name file\" \"is\" \"provides\" \"specifies\" \"contains\"\n# \"represents\" \"a\" \"an\" \"the\"\n\nABBREVIATE_BRIEF       = \"The $name class\" \\\n                         \"The $name widget\" \\\n                         \"The $name file\" \\\n                         is \\\n                         provides \\\n                         specifies \\\n                         contains \\\n                         represents \\\n                         a \\\n                         an \\\n                         the\n\n# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then\n# Doxygen will generate a detailed section even if there is only a brief\n# description.\n\nALWAYS_DETAILED_SEC    = NO\n\n# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all\n# inherited members of a class in the documentation of that class as if those\n# members were ordinary class members. Constructors, destructors and assignment\n# operators of the base classes will not be shown.\n\nINLINE_INHERITED_MEMB  = NO\n\n# If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full\n# path before files name in the file list and in the header files. If set\n# to NO the shortest path that makes the file name unique will be used.\n\nFULL_PATH_NAMES        = YES\n\n# If the FULL_PATH_NAMES tag is set to YES then the STRIP_FROM_PATH tag\n# can be used to strip a user-defined part of the path. Stripping is\n# only done if one of the specified strings matches the left-hand part of\n# the path. The tag can be used to show relative paths in the file list.\n# If left blank the directory from which doxygen is run is used as the\n# path to strip.\n\nSTRIP_FROM_PATH        =\n\n# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of\n# the path mentioned in the documentation of a class, which tells\n# the reader which header file to include in order to use a class.\n# If left blank only the name of the header file containing the class\n# definition is used. Otherwise one should specify the include paths that\n# are normally passed to the compiler using the -I flag.\n\nSTRIP_FROM_INC_PATH    =\n\n# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter\n# (but less readable) file names. This can be useful if your file system\n# doesn't support long names like on DOS, Mac, or CD-ROM.\n\nSHORT_NAMES            = YES\n\n# If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen\n# will interpret the first line (until the first dot) of a JavaDoc-style\n# comment as the brief description. If set to NO, the JavaDoc\n# comments will behave just like regular Qt-style comments\n# (thus requiring an explicit @brief command for a brief description.)\n\nJAVADOC_AUTOBRIEF      = YES\n\n# If the QT_AUTOBRIEF tag is set to YES then Doxygen will\n# interpret the first line (until the first dot) of a Qt-style\n# comment as the brief description. If set to NO, the comments\n# will behave just like regular Qt-style comments (thus requiring\n# an explicit \\brief command for a brief description.)\n\nQT_AUTOBRIEF           = YES\n\n# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make Doxygen\n# treat a multi-line C++ special comment block (i.e. a block of //! or ///\n# comments) as a brief description. This used to be the default behaviour.\n# The new default is to treat a multi-line C++ comment block as a detailed\n# description. Set this tag to YES if you prefer the old behaviour instead.\n\nMULTILINE_CPP_IS_BRIEF = NO\n\n# If the INHERIT_DOCS tag is set to YES (the default) then an undocumented\n# member inherits the documentation from any documented member that it\n# re-implements.\n\nINHERIT_DOCS           = YES\n\n# If the SEPARATE_MEMBER_PAGES tag is set to YES, then doxygen will produce\n# a new page for each member. If set to NO, the documentation of a member will\n# be part of the file/class/namespace that contains it.\n\nSEPARATE_MEMBER_PAGES  = NO\n\n# The TAB_SIZE tag can be used to set the number of spaces in a tab.\n# Doxygen uses this value to replace tabs by spaces in code fragments.\n\nTAB_SIZE               = 4\n\n# This tag can be used to specify a number of aliases that acts\n# as commands in the documentation. An alias has the form \"name=value\".\n# For example adding \"sideeffect=\\par Side Effects:\\n\" will allow you to\n# put the command \\sideeffect (or @sideeffect) in the documentation, which\n# will result in a user-defined paragraph with heading \"Side Effects:\".\n# You can put \\n's in the value part of an alias to insert newlines.\n\nALIASES                =\n\n# This tag can be used to specify a number of word-keyword mappings (TCL only).\n# A mapping has the form \"name=value\". For example adding\n# \"class=itcl::class\" will allow you to use the command class in the\n# itcl::class meaning.\n\nTCL_SUBST              =\n\n# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C\n# sources only. Doxygen will then generate output that is more tailored for C.\n# For instance, some of the names that are used will be different. The list\n# of all members will be omitted, etc.\n\nOPTIMIZE_OUTPUT_FOR_C  = NO\n\n# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java\n# sources only. Doxygen will then generate output that is more tailored for\n# Java. For instance, namespaces will be presented as packages, qualified\n# scopes will look different, etc.\n\nOPTIMIZE_OUTPUT_JAVA   = NO\n\n# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran\n# sources only. Doxygen will then generate output that is more tailored for\n# Fortran.\n\nOPTIMIZE_FOR_FORTRAN   = NO\n\n# Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL\n# sources. Doxygen will then generate output that is tailored for\n# VHDL.\n\nOPTIMIZE_OUTPUT_VHDL   = NO\n\n# Doxygen selects the parser to use depending on the extension of the files it\n# parses. With this tag you can assign which parser to use for a given extension.\n# Doxygen has a built-in mapping, but you can override or extend it using this\n# tag. The format is ext=language, where ext is a file extension, and language\n# is one of the parsers supported by doxygen: IDL, Java, Javascript, CSharp, C,\n# C++, D, PHP, Objective-C, Python, Fortran, VHDL, C, C++. For instance to make\n# doxygen treat .inc files as Fortran files (default is PHP), and .f files as C\n# (default is Fortran), use: inc=Fortran f=C. Note that for custom extensions\n# you also need to set FILE_PATTERNS otherwise the files are not read by doxygen.\n\nEXTENSION_MAPPING      =\n\n# If MARKDOWN_SUPPORT is enabled (the default) then doxygen pre-processes all\n# comments according to the Markdown format, which allows for more readable\n# documentation. See https://daringfireball.net/projects/markdown/ for details.\n# The output of markdown processing is further processed by doxygen, so you\n# can mix doxygen, HTML, and XML commands with Markdown formatting.\n# Disable only in case of backward compatibilities issues.\n\nMARKDOWN_SUPPORT       = YES\n\n# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want\n# to include (a tag file for) the STL sources as input, then you should\n# set this tag to YES in order to let doxygen match functions declarations and\n# definitions whose arguments contain STL classes (e.g. func(std::string); v.s.\n# func(std::string) {}). This also makes the inheritance and collaboration\n# diagrams that involve STL classes more complete and accurate.\n\nBUILTIN_STL_SUPPORT    = NO\n\n# If you use Microsoft's C++/CLI language, you should set this option to YES to\n# enable parsing support.\n\nCPP_CLI_SUPPORT        = NO\n\n# Set the SIP_SUPPORT tag to YES if your project consists of sip sources only.\n# Doxygen will parse them like normal C++ but will assume all classes use public\n# instead of private inheritance when no explicit protection keyword is present.\n\nSIP_SUPPORT            = NO\n\n# For Microsoft's IDL there are propget and propput attributes to indicate getter\n# and setter methods for a property. Setting this option to YES (the default)\n# will make doxygen replace the get and set methods by a property in the\n# documentation. This will only work if the methods are indeed getting or\n# setting a simple type. If this is not the case, or you want to show the\n# methods anyway, you should set this option to NO.\n\nIDL_PROPERTY_SUPPORT   = YES\n\n# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC\n# tag is set to YES, then doxygen will reuse the documentation of the first\n# member in the group (if any) for the other members of the group. By default\n# all members of a group must be documented explicitly.\n\nDISTRIBUTE_GROUP_DOC   = NO\n\n# Set the SUBGROUPING tag to YES (the default) to allow class member groups of\n# the same type (for instance a group of public functions) to be put as a\n# subgroup of that type (e.g. under the Public Functions section). Set it to\n# NO to prevent subgrouping. Alternatively, this can be done per class using\n# the \\nosubgrouping command.\n\nSUBGROUPING            = YES\n\n# When the INLINE_GROUPED_CLASSES tag is set to YES, classes, structs and\n# unions are shown inside the group in which they are included (e.g. using\n# @ingroup) instead of on a separate page (for HTML and Man pages) or\n# section (for LaTeX and RTF).\n\nINLINE_GROUPED_CLASSES = NO\n\n# When the INLINE_SIMPLE_STRUCTS tag is set to YES, structs, classes, and\n# unions with only public data fields will be shown inline in the documentation\n# of the scope in which they are defined (i.e. file, namespace, or group\n# documentation), provided this scope is documented. If set to NO (the default),\n# structs, classes, and unions are shown on a separate page (for HTML and Man\n# pages) or section (for LaTeX and RTF).\n\nINLINE_SIMPLE_STRUCTS  = NO\n\n# When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum\n# is documented as struct, union, or enum with the name of the typedef. So\n# typedef struct TypeS {} TypeT, will appear in the documentation as a struct\n# with name TypeT. When disabled the typedef will appear as a member of a file,\n# namespace, or class. And the struct will be named TypeS. This can typically\n# be useful for C code in case the coding convention dictates that all compound\n# types are typedef'ed and only the typedef is referenced, never the tag name.\n\nTYPEDEF_HIDES_STRUCT   = NO\n\n# The SYMBOL_CACHE_SIZE determines the size of the internal cache use to\n# determine which symbols to keep in memory and which to flush to disk.\n# When the cache is full, less often used symbols will be written to disk.\n# For small to medium size projects (<1000 input files) the default value is\n# probably good enough. For larger projects a too small cache size can cause\n# doxygen to be busy swapping symbols to and from disk most of the time\n# causing a significant performance penalty.\n# If the system has enough physical memory increasing the cache will improve the\n# performance by keeping more symbols in memory. Note that the value works on\n# a logarithmic scale so increasing the size by one will roughly double the\n# memory usage. The cache size is given by this formula:\n# 2^(16+SYMBOL_CACHE_SIZE). The valid range is 0..9, the default is 0,\n# corresponding to a cache size of 2^16 = 65536 symbols.\n\nSYMBOL_CACHE_SIZE      = 0\n\n# Similar to the SYMBOL_CACHE_SIZE the size of the symbol lookup cache can be\n# set using LOOKUP_CACHE_SIZE. This cache is used to resolve symbols given\n# their name and scope. Since this can be an expensive process and often the\n# same symbol appear multiple times in the code, doxygen keeps a cache of\n# pre-resolved symbols. If the cache is too small doxygen will become slower.\n# If the cache is too large, memory is wasted. The cache size is given by this\n# formula: 2^(16+LOOKUP_CACHE_SIZE). The valid range is 0..9, the default is 0,\n# corresponding to a cache size of 2^16 = 65536 symbols.\n\nLOOKUP_CACHE_SIZE      = 0\n\n#---------------------------------------------------------------------------\n# Build related configuration options\n#---------------------------------------------------------------------------\n\n# If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in\n# documentation are documented, even if no documentation was available.\n# Private class members and static file members will be hidden unless\n# the EXTRACT_PRIVATE and EXTRACT_STATIC tags are set to YES\n\nEXTRACT_ALL            = YES\n\n# If the EXTRACT_PRIVATE tag is set to YES all private members of a class\n# will be included in the documentation.\n\nEXTRACT_PRIVATE        = YES\n\n# If the EXTRACT_PACKAGE tag is set to YES all members with package or internal\n# scope will be included in the documentation.\n\nEXTRACT_PACKAGE        = NO\n\n# If the EXTRACT_STATIC tag is set to YES all static members of a file\n# will be included in the documentation.\n\nEXTRACT_STATIC         = YES\n\n# If the EXTRACT_LOCAL_CLASSES tag is set to YES classes (and structs)\n# defined locally in source files will be included in the documentation.\n# If set to NO only classes defined in header files are included.\n\nEXTRACT_LOCAL_CLASSES  = YES\n\n# This flag is only useful for Objective-C code. When set to YES local\n# methods, which are defined in the implementation section but not in\n# the interface are included in the documentation.\n# If set to NO (the default) only methods in the interface are included.\n\nEXTRACT_LOCAL_METHODS  = NO\n\n# If this flag is set to YES, the members of anonymous namespaces will be\n# extracted and appear in the documentation as a namespace called\n# 'anonymous_namespace{file}', where file will be replaced with the base\n# name of the file that contains the anonymous namespace. By default\n# anonymous namespaces are hidden.\n\nEXTRACT_ANON_NSPACES   = NO\n\n# If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all\n# undocumented members of documented classes, files or namespaces.\n# If set to NO (the default) these members will be included in the\n# various overviews, but no documentation section is generated.\n# This option has no effect if EXTRACT_ALL is enabled.\n\nHIDE_UNDOC_MEMBERS     = NO\n\n# If the HIDE_UNDOC_CLASSES tag is set to YES, Doxygen will hide all\n# undocumented classes that are normally visible in the class hierarchy.\n# If set to NO (the default) these classes will be included in the various\n# overviews. This option has no effect if EXTRACT_ALL is enabled.\n\nHIDE_UNDOC_CLASSES     = NO\n\n# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, Doxygen will hide all\n# friend (class|struct|union) declarations.\n# If set to NO (the default) these declarations will be included in the\n# documentation.\n\nHIDE_FRIEND_COMPOUNDS  = NO\n\n# If the HIDE_IN_BODY_DOCS tag is set to YES, Doxygen will hide any\n# documentation blocks found inside the body of a function.\n# If set to NO (the default) these blocks will be appended to the\n# function's detailed documentation block.\n\nHIDE_IN_BODY_DOCS      = NO\n\n# The INTERNAL_DOCS tag determines if documentation\n# that is typed after a \\internal command is included. If the tag is set\n# to NO (the default) then the documentation will be excluded.\n# Set it to YES to include the internal documentation.\n\nINTERNAL_DOCS          = NO\n\n# If the CASE_SENSE_NAMES tag is set to NO then Doxygen will only generate\n# file names in lower-case letters. If set to YES upper-case letters are also\n# allowed. This is useful if you have classes or files whose names only differ\n# in case and if your file system supports case sensitive file names. Windows\n# and Mac users are advised to set this option to NO.\n\nCASE_SENSE_NAMES       = NO\n\n# If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen\n# will show members with their full class and namespace scopes in the\n# documentation. If set to YES the scope will be hidden.\n\nHIDE_SCOPE_NAMES       = NO\n\n# If the SHOW_INCLUDE_FILES tag is set to YES (the default) then Doxygen\n# will put a list of the files that are included by a file in the documentation\n# of that file.\n\nSHOW_INCLUDE_FILES     = YES\n\n# If the FORCE_LOCAL_INCLUDES tag is set to YES then Doxygen\n# will list include files with double quotes in the documentation\n# rather than with sharp brackets.\n\nFORCE_LOCAL_INCLUDES   = NO\n\n# If the INLINE_INFO tag is set to YES (the default) then a tag [inline]\n# is inserted in the documentation for inline members.\n\nINLINE_INFO            = YES\n\n# If the SORT_MEMBER_DOCS tag is set to YES (the default) then doxygen\n# will sort the (detailed) documentation of file and class members\n# alphabetically by member name. If set to NO the members will appear in\n# declaration order.\n\nSORT_MEMBER_DOCS       = YES\n\n# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the\n# brief documentation of file, namespace and class members alphabetically\n# by member name. If set to NO (the default) the members will appear in\n# declaration order.\n\nSORT_BRIEF_DOCS        = YES\n\n# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen\n# will sort the (brief and detailed) documentation of class members so that\n# constructors and destructors are listed first. If set to NO (the default)\n# the constructors will appear in the respective orders defined by\n# SORT_MEMBER_DOCS and SORT_BRIEF_DOCS.\n# This tag will be ignored for brief docs if SORT_BRIEF_DOCS is set to NO\n# and ignored for detailed docs if SORT_MEMBER_DOCS is set to NO.\n\nSORT_MEMBERS_CTORS_1ST = NO\n\n# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the\n# hierarchy of group names into alphabetical order. If set to NO (the default)\n# the group names will appear in their defined order.\n\nSORT_GROUP_NAMES       = NO\n\n# If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be\n# sorted by fully-qualified names, including namespaces. If set to\n# NO (the default), the class list will be sorted only by class name,\n# not including the namespace part.\n# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES.\n# Note: This option applies only to the class list, not to the\n# alphabetical list.\n\nSORT_BY_SCOPE_NAME     = NO\n\n# If the STRICT_PROTO_MATCHING option is enabled and doxygen fails to\n# do proper type resolution of all parameters of a function it will reject a\n# match between the prototype and the implementation of a member function even\n# if there is only one candidate or it is obvious which candidate to choose\n# by doing a simple string match. By disabling STRICT_PROTO_MATCHING doxygen\n# will still accept a match between prototype and implementation in such cases.\n\nSTRICT_PROTO_MATCHING  = NO\n\n# The GENERATE_TODOLIST tag can be used to enable (YES) or\n# disable (NO) the todo list. This list is created by putting \\todo\n# commands in the documentation.\n\nGENERATE_TODOLIST      = YES\n\n# The GENERATE_TESTLIST tag can be used to enable (YES) or\n# disable (NO) the test list. This list is created by putting \\test\n# commands in the documentation.\n\nGENERATE_TESTLIST      = YES\n\n# The GENERATE_BUGLIST tag can be used to enable (YES) or\n# disable (NO) the bug list. This list is created by putting \\bug\n# commands in the documentation.\n\nGENERATE_BUGLIST       = YES\n\n# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or\n# disable (NO) the deprecated list. This list is created by putting\n# \\deprecated commands in the documentation.\n\nGENERATE_DEPRECATEDLIST= YES\n\n# The ENABLED_SECTIONS tag can be used to enable conditional\n# documentation sections, marked by \\if sectionname ... \\endif.\n\nENABLED_SECTIONS       =\n\n# The MAX_INITIALIZER_LINES tag determines the maximum number of lines\n# the initial value of a variable or macro consists of for it to appear in\n# the documentation. If the initializer consists of more lines than specified\n# here it will be hidden. Use a value of 0 to hide initializers completely.\n# The appearance of the initializer of individual variables and macros in the\n# documentation can be controlled using \\showinitializer or \\hideinitializer\n# command in the documentation regardless of this setting.\n\nMAX_INITIALIZER_LINES  = 30\n\n# Set the SHOW_USED_FILES tag to NO to disable the list of files generated\n# at the bottom of the documentation of classes and structs. If set to YES the\n# list will mention the files that were used to generate the documentation.\n\nSHOW_USED_FILES        = YES\n\n# Set the SHOW_FILES tag to NO to disable the generation of the Files page.\n# This will remove the Files entry from the Quick Index and from the\n# Folder Tree View (if specified). The default is YES.\n\nSHOW_FILES             = YES\n\n# Set the SHOW_NAMESPACES tag to NO to disable the generation of the\n# Namespaces page.  This will remove the Namespaces entry from the Quick Index\n# and from the Folder Tree View (if specified). The default is YES.\n\nSHOW_NAMESPACES        = YES\n\n# The FILE_VERSION_FILTER tag can be used to specify a program or script that\n# doxygen should invoke to get the current version for each file (typically from\n# the version control system). Doxygen will invoke the program by executing (via\n# popen()) the command <command> <input-file>, where <command> is the value of\n# the FILE_VERSION_FILTER tag, and <input-file> is the name of an input file\n# provided by doxygen. Whatever the program writes to standard output\n# is used as the file version. See the manual for examples.\n\nFILE_VERSION_FILTER    =\n\n# The LAYOUT_FILE tag can be used to specify a layout file which will be parsed\n# by doxygen. The layout file controls the global structure of the generated\n# output files in an output format independent way. To create the layout file\n# that represents doxygen's defaults, run doxygen with the -l option.\n# You can optionally specify a file name after the option, if omitted\n# DoxygenLayout.xml will be used as the name of the layout file.\n\nLAYOUT_FILE            =\n\n# The CITE_BIB_FILES tag can be used to specify one or more bib files\n# containing the references data. This must be a list of .bib files. The\n# .bib extension is automatically appended if omitted. Using this command\n# requires the bibtex tool to be installed. See also\n# https://en.wikipedia.org/wiki/BibTeX for more info. For LaTeX the style\n# of the bibliography can be controlled using LATEX_BIB_STYLE. To use this\n# feature you need bibtex and perl available in the search path.\n\nCITE_BIB_FILES         =\n\n#---------------------------------------------------------------------------\n# configuration options related to warning and progress messages\n#---------------------------------------------------------------------------\n\n# The QUIET tag can be used to turn on/off the messages that are generated\n# by doxygen. Possible values are YES and NO. If left blank NO is used.\n\nQUIET                  = NO\n\n# The WARNINGS tag can be used to turn on/off the warning messages that are\n# generated by doxygen. Possible values are YES and NO. If left blank\n# NO is used.\n\nWARNINGS               = YES\n\n# If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate warnings\n# for undocumented members. If EXTRACT_ALL is set to YES then this flag will\n# automatically be disabled.\n\nWARN_IF_UNDOCUMENTED   = YES\n\n# If WARN_IF_DOC_ERROR is set to YES, doxygen will generate warnings for\n# potential errors in the documentation, such as not documenting some\n# parameters in a documented function, or documenting parameters that\n# don't exist or using markup commands wrongly.\n\nWARN_IF_DOC_ERROR      = YES\n\n# The WARN_NO_PARAMDOC option can be enabled to get warnings for\n# functions that are documented, but have no documentation for their parameters\n# or return value. If set to NO (the default) doxygen will only warn about\n# wrong or incomplete parameter documentation, but not about the absence of\n# documentation.\n\nWARN_NO_PARAMDOC       = NO\n\n# The WARN_FORMAT tag determines the format of the warning messages that\n# doxygen can produce. The string should contain the $file, $line, and $text\n# tags, which will be replaced by the file and line number from which the\n# warning originated and the warning text. Optionally the format may contain\n# $version, which will be replaced by the version of the file (if it could\n# be obtained via FILE_VERSION_FILTER)\n\nWARN_FORMAT            = \"$file:$line: $text\"\n\n# The WARN_LOGFILE tag can be used to specify a file to which warning\n# and error messages should be written. If left blank the output is written\n# to stderr.\n\nWARN_LOGFILE           =\n\n#---------------------------------------------------------------------------\n# configuration options related to the input files\n#---------------------------------------------------------------------------\n\n# The INPUT tag can be used to specify the files and/or directories that contain\n# documented source files. You may enter file names like \"myfile.cpp\" or\n# directories like \"/usr/src/myproject\". Separate the files or directories\n# with spaces.\n\nINPUT                  = src\n\n# This tag can be used to specify the character encoding of the source files\n# that doxygen parses. Internally doxygen uses the UTF-8 encoding, which is\n# also the default input encoding. Doxygen uses libiconv (or the iconv built\n# into libc) for the transcoding. See https://www.gnu.org/software/libiconv for\n# the list of possible encodings.\n\nINPUT_ENCODING         = UTF-8\n\n# If the value of the INPUT tag contains directories, you can use the\n# FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp\n# and *.h) to filter out the source-files in the directories. If left\n# blank the following patterns are tested:\n# *.c *.cc *.cxx *.cpp *.c++ *.d *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh\n# *.hxx *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.dox *.py\n# *.f90 *.f *.for *.vhd *.vhdl\n\nFILE_PATTERNS          = *.c \\\n                         *.cc \\\n                         *.cxx \\\n                         *.cpp \\\n                         *.c++ \\\n                         *.d \\\n                         *.java \\\n                         *.ii \\\n                         *.ixx \\\n                         *.ipp \\\n                         *.i++ \\\n                         *.inl \\\n                         *.h \\\n                         *.hh \\\n                         *.hxx \\\n                         *.hpp \\\n                         *.h++ \\\n                         *.idl \\\n                         *.odl \\\n                         *.cs \\\n                         *.php \\\n                         *.php3 \\\n                         *.inc \\\n                         *.m \\\n                         *.markdown \\\n                         *.md \\\n                         *.mm \\\n                         *.dox \\\n                         *.py \\\n                         *.f90 \\\n                         *.f \\\n                         *.for \\\n                         *.vhd \\\n                         *.vhdl\n\n# The RECURSIVE tag can be used to turn specify whether or not subdirectories\n# should be searched for input files as well. Possible values are YES and NO.\n# If left blank NO is used.\n\nRECURSIVE              = YES\n\n# The EXCLUDE tag can be used to specify files and/or directories that should be\n# excluded from the INPUT source files. This way you can easily exclude a\n# subdirectory from a directory tree whose root is specified with the INPUT tag.\n# Note that relative paths are relative to the directory from which doxygen is\n# run.\n\nEXCLUDE                = source/SQLite \\\n                         source/squirrelbindings\n\n# The EXCLUDE_SYMLINKS tag can be used to select whether or not files or\n# directories that are symbolic links (a Unix file system feature) are excluded\n# from the input.\n\nEXCLUDE_SYMLINKS       = NO\n\n# If the value of the INPUT tag contains directories, you can use the\n# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude\n# certain files from those directories. Note that the wildcards are matched\n# against the file with absolute path, so to exclude all test directories\n# for example use the pattern */test/*\n\nEXCLUDE_PATTERNS       = *StackWalker.* \\\n                         *LeakFinder.* \\\n                         *Bindings.* \\\n                         *ManualBindings.*\n\n# The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names\n# (namespaces, classes, functions, etc.) that should be excluded from the\n# output. The symbol name can be a fully qualified name, a word, or if the\n# wildcard * is used, a substring. Examples: ANamespace, AClass,\n# AClass::ANamespace, ANamespace::*Test\n\nEXCLUDE_SYMBOLS        = _* \\\n                         __* \\\n                         abstract\n\n# The EXAMPLE_PATH tag can be used to specify one or more files or\n# directories that contain example code fragments that are included (see\n# the \\include command).\n\nEXAMPLE_PATH           =\n\n# If the value of the EXAMPLE_PATH tag contains directories, you can use the\n# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp\n# and *.h) to filter out the source-files in the directories. If left\n# blank all files are included.\n\nEXAMPLE_PATTERNS       = *\n\n# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be\n# searched for input files to be used with the \\include or \\dontinclude\n# commands irrespective of the value of the RECURSIVE tag.\n# Possible values are YES and NO. If left blank NO is used.\n\nEXAMPLE_RECURSIVE      = NO\n\n# The IMAGE_PATH tag can be used to specify one or more files or\n# directories that contain image that are included in the documentation (see\n# the \\image command).\n\nIMAGE_PATH             =\n\n# The INPUT_FILTER tag can be used to specify a program that doxygen should\n# invoke to filter for each input file. Doxygen will invoke the filter program\n# by executing (via popen()) the command <filter> <input-file>, where <filter>\n# is the value of the INPUT_FILTER tag, and <input-file> is the name of an\n# input file. Doxygen will then use the output that the filter program writes\n# to standard output.  If FILTER_PATTERNS is specified, this tag will be\n# ignored.\n\nINPUT_FILTER           =\n\n# The FILTER_PATTERNS tag can be used to specify filters on a per file pattern\n# basis.  Doxygen will compare the file name with each pattern and apply the\n# filter if there is a match.  The filters are a list of the form:\n# pattern=filter (like *.cpp=my_cpp_filter). See INPUT_FILTER for further\n# info on how filters are used. If FILTER_PATTERNS is empty or if\n# non of the patterns match the file name, INPUT_FILTER is applied.\n\nFILTER_PATTERNS        =\n\n# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using\n# INPUT_FILTER) will be used to filter the input files when producing source\n# files to browse (i.e. when SOURCE_BROWSER is set to YES).\n\nFILTER_SOURCE_FILES    = NO\n\n# The FILTER_SOURCE_PATTERNS tag can be used to specify source filters per file\n# pattern. A pattern will override the setting for FILTER_PATTERN (if any)\n# and it is also possible to disable source filtering for a specific pattern\n# using *.ext= (so without naming a filter). This option only has effect when\n# FILTER_SOURCE_FILES is enabled.\n\nFILTER_SOURCE_PATTERNS =\n\n#---------------------------------------------------------------------------\n# configuration options related to source browsing\n#---------------------------------------------------------------------------\n\n# If the SOURCE_BROWSER tag is set to YES then a list of source files will\n# be generated. Documented entities will be cross-referenced with these sources.\n# Note: To get rid of all source code in the generated output, make sure also\n# VERBATIM_HEADERS is set to NO.\n\nSOURCE_BROWSER         = YES\n\n# Setting the INLINE_SOURCES tag to YES will include the body\n# of functions and classes directly in the documentation.\n\nINLINE_SOURCES         = NO\n\n# Setting the STRIP_CODE_COMMENTS tag to YES (the default) will instruct\n# doxygen to hide any special comment blocks from generated source code\n# fragments. Normal C, C++ and Fortran comments will always remain visible.\n\nSTRIP_CODE_COMMENTS    = YES\n\n# If the REFERENCED_BY_RELATION tag is set to YES\n# then for each documented function all documented\n# functions referencing it will be listed.\n\nREFERENCED_BY_RELATION = NO\n\n# If the REFERENCES_RELATION tag is set to YES\n# then for each documented function all documented entities\n# called/used by that function will be listed.\n\nREFERENCES_RELATION    = NO\n\n# If the REFERENCES_LINK_SOURCE tag is set to YES (the default)\n# and SOURCE_BROWSER tag is set to YES, then the hyperlinks from\n# functions in REFERENCES_RELATION and REFERENCED_BY_RELATION lists will\n# link to the source code.  Otherwise they will link to the documentation.\n\nREFERENCES_LINK_SOURCE = YES\n\n# If the USE_HTAGS tag is set to YES then the references to source code\n# will point to the HTML generated by the htags(1) tool instead of doxygen\n# built-in source browser. The htags tool is part of GNU's global source\n# tagging system (see https://www.gnu.org/software/global/global.html). You\n# will need version 4.8.6 or higher.\n\nUSE_HTAGS              = NO\n\n# If the VERBATIM_HEADERS tag is set to YES (the default) then Doxygen\n# will generate a verbatim copy of the header file for each class for\n# which an include is specified. Set to NO to disable this.\n\nVERBATIM_HEADERS       = YES\n\n#---------------------------------------------------------------------------\n# configuration options related to the alphabetical class index\n#---------------------------------------------------------------------------\n\n# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index\n# of all compounds will be generated. Enable this if the project\n# contains a lot of classes, structs, unions or interfaces.\n\nALPHABETICAL_INDEX     = YES\n\n# If the alphabetical index is enabled (see ALPHABETICAL_INDEX) then\n# the COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns\n# in which this list will be split (can be a number in the range [1..20])\n\nCOLS_IN_ALPHA_INDEX    = 5\n\n# In case all classes in a project start with a common prefix, all\n# classes will be put under the same header in the alphabetical index.\n# The IGNORE_PREFIX tag can be used to specify one or more prefixes that\n# should be ignored while generating the index headers.\n\nIGNORE_PREFIX          = c\n\n#---------------------------------------------------------------------------\n# configuration options related to the HTML output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_HTML tag is set to YES (the default) Doxygen will\n# generate HTML output.\n\nGENERATE_HTML          = YES\n\n# The HTML_OUTPUT tag is used to specify where the HTML docs will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `html' will be used as the default path.\n\nHTML_OUTPUT            = html\n\n# The HTML_FILE_EXTENSION tag can be used to specify the file extension for\n# each generated HTML page (for example: .htm,.php,.asp). If it is left blank\n# doxygen will generate files with .html extension.\n\nHTML_FILE_EXTENSION    = .html\n\n# The HTML_HEADER tag can be used to specify a personal HTML header for\n# each generated HTML page. If it is left blank doxygen will generate a\n# standard header. Note that when using a custom header you are responsible\n# for the proper inclusion of any scripts and style sheets that doxygen\n# needs, which is dependent on the configuration options used.\n# It is advised to generate a default header using \"doxygen -w html\n# header.html footer.html stylesheet.css YourConfigFile\" and then modify\n# that header. Note that the header is subject to change so you typically\n# have to redo this when upgrading to a newer version of doxygen or when\n# changing the value of configuration settings such as GENERATE_TREEVIEW!\n\nHTML_HEADER            =\n\n# The HTML_FOOTER tag can be used to specify a personal HTML footer for\n# each generated HTML page. If it is left blank doxygen will generate a\n# standard footer.\n\nHTML_FOOTER            =\n\n# The HTML_STYLESHEET tag can be used to specify a user-defined cascading\n# style sheet that is used by each HTML page. It can be used to\n# fine-tune the look of the HTML output. If the tag is left blank doxygen\n# will generate a default style sheet. Note that doxygen will try to copy\n# the style sheet file to the HTML output directory, so don't put your own\n# style sheet in the HTML output directory as well, or it will be erased!\n\nHTML_STYLESHEET        =\n\n# The HTML_EXTRA_FILES tag can be used to specify one or more extra images or\n# other source files which should be copied to the HTML output directory. Note\n# that these files will be copied to the base HTML output directory. Use the\n# $relpath$ marker in the HTML_HEADER and/or HTML_FOOTER files to load these\n# files. In the HTML_STYLESHEET file, use the file name only. Also note that\n# the files will be copied as-is; there are no commands or markers available.\n\nHTML_EXTRA_FILES       =\n\n# The HTML_COLORSTYLE_HUE tag controls the color of the HTML output.\n# Doxygen will adjust the colors in the style sheet and background images\n# according to this color. Hue is specified as an angle on a colorwheel,\n# see https://en.wikipedia.org/wiki/Hue for more information.\n# For instance the value 0 represents red, 60 is yellow, 120 is green,\n# 180 is cyan, 240 is blue, 300 purple, and 360 is red again.\n# The allowed range is 0 to 359.\n\nHTML_COLORSTYLE_HUE    = 220\n\n# The HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of\n# the colors in the HTML output. For a value of 0 the output will use\n# grayscales only. A value of 255 will produce the most vivid colors.\n\nHTML_COLORSTYLE_SAT    = 100\n\n# The HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to\n# the luminance component of the colors in the HTML output. Values below\n# 100 gradually make the output lighter, whereas values above 100 make\n# the output darker. The value divided by 100 is the actual gamma applied,\n# so 80 represents a gamma of 0.8, The value 220 represents a gamma of 2.2,\n# and 100 does not change the gamma.\n\nHTML_COLORSTYLE_GAMMA  = 80\n\n# If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML\n# page will contain the date and time when the page was generated. Setting\n# this to NO can help when comparing the output of multiple runs.\n\nHTML_TIMESTAMP         = YES\n\n# If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML\n# documentation will contain sections that can be hidden and shown after the\n# page has loaded.\n\nHTML_DYNAMIC_SECTIONS  = NO\n\n# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of\n# entries shown in the various tree structured indices initially; the user\n# can expand and collapse entries dynamically later on. Doxygen will expand\n# the tree to such a level that at most the specified number of entries are\n# visible (unless a fully collapsed tree already exceeds this amount).\n# So setting the number of entries 1 will produce a full collapsed tree by\n# default. 0 is a special value representing an infinite number of entries\n# and will result in a full expanded tree by default.\n\nHTML_INDEX_NUM_ENTRIES = 100\n\n# If the GENERATE_DOCSET tag is set to YES, additional index files\n# will be generated that can be used as input for Apple's Xcode 3\n# integrated development environment, introduced with OSX 10.5 (Leopard).\n# To create a documentation set, doxygen will generate a Makefile in the\n# HTML output directory. Running make will produce the docset in that\n# directory and running \"make install\" will install the docset in\n# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find\n# it at startup.\n# See https://developer.apple.com/tools/creatingdocsetswithdoxygen.html\n# for more information.\n\nGENERATE_DOCSET        = NO\n\n# When GENERATE_DOCSET tag is set to YES, this tag determines the name of the\n# feed. A documentation feed provides an umbrella under which multiple\n# documentation sets from a single provider (such as a company or product suite)\n# can be grouped.\n\nDOCSET_FEEDNAME        = \"Doxygen generated docs\"\n\n# When GENERATE_DOCSET tag is set to YES, this tag specifies a string that\n# should uniquely identify the documentation set bundle. This should be a\n# reverse domain-name style string, e.g. com.mycompany.MyDocSet. Doxygen\n# will append .docset to the name.\n\nDOCSET_BUNDLE_ID       = org.doxygen.Project\n\n# When GENERATE_PUBLISHER_ID tag specifies a string that should uniquely identify\n# the documentation publisher. This should be a reverse domain-name style\n# string, e.g. com.mycompany.MyDocSet.documentation.\n\nDOCSET_PUBLISHER_ID    = org.doxygen.Publisher\n\n# The GENERATE_PUBLISHER_NAME tag identifies the documentation publisher.\n\nDOCSET_PUBLISHER_NAME  = Publisher\n\n# If the GENERATE_HTMLHELP tag is set to YES, additional index files\n# will be generated that can be used as input for tools like the\n# Microsoft HTML help workshop to generate a compiled HTML help file (.chm)\n# of the generated HTML documentation.\n\nGENERATE_HTMLHELP      = NO\n\n# If the GENERATE_HTMLHELP tag is set to YES, the CHM_FILE tag can\n# be used to specify the file name of the resulting .chm file. You\n# can add a path in front of the file if the result should not be\n# written to the html output directory.\n\nCHM_FILE               =\n\n# If the GENERATE_HTMLHELP tag is set to YES, the HHC_LOCATION tag can\n# be used to specify the location (absolute path including file name) of\n# the HTML help compiler (hhc.exe). If non-empty doxygen will try to run\n# the HTML help compiler on the generated index.hhp.\n\nHHC_LOCATION           =\n\n# If the GENERATE_HTMLHELP tag is set to YES, the GENERATE_CHI flag\n# controls if a separate .chi index file is generated (YES) or that\n# it should be included in the master .chm file (NO).\n\nGENERATE_CHI           = NO\n\n# If the GENERATE_HTMLHELP tag is set to YES, the CHM_INDEX_ENCODING\n# is used to encode HtmlHelp index (hhk), content (hhc) and project file\n# content.\n\nCHM_INDEX_ENCODING     =\n\n# If the GENERATE_HTMLHELP tag is set to YES, the BINARY_TOC flag\n# controls whether a binary table of contents is generated (YES) or a\n# normal table of contents (NO) in the .chm file.\n\nBINARY_TOC             = NO\n\n# The TOC_EXPAND flag can be set to YES to add extra items for group members\n# to the contents of the HTML help documentation and to the tree view.\n\nTOC_EXPAND             = NO\n\n# If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and\n# QHP_VIRTUAL_FOLDER are set, an additional index file will be generated\n# that can be used as input for Qt's qhelpgenerator to generate a\n# Qt Compressed Help (.qch) of the generated HTML documentation.\n\nGENERATE_QHP           = NO\n\n# If the QHG_LOCATION tag is specified, the QCH_FILE tag can\n# be used to specify the file name of the resulting .qch file.\n# The path specified is relative to the HTML output folder.\n\nQCH_FILE               =\n\n# The QHP_NAMESPACE tag specifies the namespace to use when generating\n# Qt Help Project output. For more information please see\n# https://doc.qt.io/qt-5/qthelpproject.html#namespace\n\nQHP_NAMESPACE          = org.doxygen.Project\n\n# The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating\n# Qt Help Project output. For more information please see\n# https://doc.qt.io/qt-5/qthelpproject.html#virtual-folders\n\nQHP_VIRTUAL_FOLDER     = doc\n\n# If QHP_CUST_FILTER_NAME is set, it specifies the name of a custom filter to\n# add. For more information please see\n# https://doc.qt.io/qt-5/qthelpproject.html#custom-filters\n\nQHP_CUST_FILTER_NAME   =\n\n# The QHP_CUST_FILT_ATTRS tag specifies the list of the attributes of the\n# custom filter to add. For more information please see\n# <a href=\"https://doc.qt.io/qt-5/qthelpproject.html#custom-filters\">\n# Qt Help Project / Custom Filters</a>.\n\nQHP_CUST_FILTER_ATTRS  =\n\n# The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this\n# project's\n# filter section matches.\n# <a href=\"https://doc.qt.io/qt-5/qthelpproject.html#filter-attributes\">\n# Qt Help Project / Filter Attributes</a>.\n\nQHP_SECT_FILTER_ATTRS  =\n\n# If the GENERATE_QHP tag is set to YES, the QHG_LOCATION tag can\n# be used to specify the location of Qt's qhelpgenerator.\n# If non-empty doxygen will try to run qhelpgenerator on the generated\n# .qhp file.\n\nQHG_LOCATION           =\n\n# If the GENERATE_ECLIPSEHELP tag is set to YES, additional index files\n# will be generated, which together with the HTML files, form an Eclipse help\n# plugin. To install this plugin and make it available under the help contents\n# menu in Eclipse, the contents of the directory containing the HTML and XML\n# files needs to be copied into the plugins directory of eclipse. The name of\n# the directory within the plugins directory should be the same as\n# the ECLIPSE_DOC_ID value. After copying Eclipse needs to be restarted before\n# the help appears.\n\nGENERATE_ECLIPSEHELP   = NO\n\n# A unique identifier for the eclipse help plugin. When installing the plugin\n# the directory name containing the HTML and XML files should also have\n# this name.\n\nECLIPSE_DOC_ID         = org.doxygen.Project\n\n# The DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs)\n# at top of each HTML page. The value NO (the default) enables the index and\n# the value YES disables it. Since the tabs have the same information as the\n# navigation tree you can set this option to NO if you already set\n# GENERATE_TREEVIEW to YES.\n\nDISABLE_INDEX          = NO\n\n# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index\n# structure should be generated to display hierarchical information.\n# If the tag value is set to YES, a side panel will be generated\n# containing a tree-like index structure (just like the one that\n# is generated for HTML Help). For this to work a browser that supports\n# JavaScript, DHTML, CSS and frames is required (i.e. any modern browser).\n# Windows users are probably better off using the HTML help feature.\n# Since the tree basically has the same information as the tab index you\n# could consider to set DISABLE_INDEX to NO when enabling this option.\n\nGENERATE_TREEVIEW      = NO\n\n# The ENUM_VALUES_PER_LINE tag can be used to set the number of enum values\n# (range [0,1..20]) that doxygen will group on one line in the generated HTML\n# documentation. Note that a value of 0 will completely suppress the enum\n# values from appearing in the overview section.\n\nENUM_VALUES_PER_LINE   = 4\n\n# If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be\n# used to set the initial width (in pixels) of the frame in which the tree\n# is shown.\n\nTREEVIEW_WIDTH         = 250\n\n# When the EXT_LINKS_IN_WINDOW option is set to YES doxygen will open\n# links to external symbols imported via tag files in a separate window.\n\nEXT_LINKS_IN_WINDOW    = NO\n\n# Use this tag to change the font size of Latex formulas included\n# as images in the HTML documentation. The default is 10. Note that\n# when you change the font size after a successful doxygen run you need\n# to manually remove any form_*.png images from the HTML output directory\n# to force them to be regenerated.\n\nFORMULA_FONTSIZE       = 10\n\n# Use the FORMULA_TRANPARENT tag to determine whether or not the images\n# generated for formulas are transparent PNGs. Transparent PNGs are\n# not supported properly for IE 6.0, but are supported on all modern browsers.\n# Note that when changing this option you need to delete any form_*.png files\n# in the HTML output before the changes have effect.\n\nFORMULA_TRANSPARENT    = YES\n\n# Enable the USE_MATHJAX option to render LaTeX formulas using MathJax\n# (see https://www.mathjax.org) which uses client side Javascript for the\n# rendering instead of using prerendered bitmaps. Use this if you do not\n# have LaTeX installed or if you want to formulas look prettier in the HTML\n# output. When enabled you may also need to install MathJax separately and\n# configure the path to it using the MATHJAX_RELPATH option.\n\nUSE_MATHJAX            = NO\n\n# When MathJax is enabled you need to specify the location relative to the\n# HTML output directory using the MATHJAX_RELPATH option. The destination\n# directory should contain the MathJax.js script. For instance, if the mathjax\n# directory is located at the same level as the HTML output directory, then\n# MATHJAX_RELPATH should be ../mathjax. The default value points to\n# the MathJax Content Delivery Network so you can quickly see the result without\n# installing MathJax.  However, it is strongly recommended to install a local\n# copy of MathJax from https://www.mathjax.org before deployment.\n\nMATHJAX_RELPATH        = https://cdn.mathjax.org/mathjax/latest\n\n# The MATHJAX_EXTENSIONS tag can be used to specify one or MathJax extension\n# names that should be enabled during MathJax rendering.\n\nMATHJAX_EXTENSIONS     =\n\n# When the SEARCHENGINE tag is enabled doxygen will generate a search box\n# for the HTML output. The underlying search engine uses javascript\n# and DHTML and should work on any modern browser. Note that when using\n# HTML help (GENERATE_HTMLHELP), Qt help (GENERATE_QHP), or docsets\n# (GENERATE_DOCSET) there is already a search function so this one should\n# typically be disabled. For large projects the javascript based search engine\n# can be slow, then enabling SERVER_BASED_SEARCH may provide a better solution.\n\nSEARCHENGINE           = NO\n\n# When the SERVER_BASED_SEARCH tag is enabled the search engine will be\n# implemented using a PHP enabled web server instead of at the web client\n# using Javascript. Doxygen will generate the search PHP script and index\n# file to put on the web server. The advantage of the server\n# based approach is that it scales better to large projects and allows\n# full text search. The disadvantages are that it is more difficult to setup\n# and does not have live searching capabilities.\n\nSERVER_BASED_SEARCH    = NO\n\n#---------------------------------------------------------------------------\n# configuration options related to the LaTeX output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_LATEX tag is set to YES (the default) Doxygen will\n# generate Latex output.\n\nGENERATE_LATEX         = NO\n\n# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `latex' will be used as the default path.\n\nLATEX_OUTPUT           = latex\n\n# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be\n# invoked. If left blank `latex' will be used as the default command name.\n# Note that when enabling USE_PDFLATEX this option is only used for\n# generating bitmaps for formulas in the HTML output, but not in the\n# Makefile that is written to the output directory.\n\nLATEX_CMD_NAME         = latex\n\n# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to\n# generate index for LaTeX. If left blank `makeindex' will be used as the\n# default command name.\n\nMAKEINDEX_CMD_NAME     = makeindex\n\n# If the COMPACT_LATEX tag is set to YES Doxygen generates more compact\n# LaTeX documents. This may be useful for small projects and may help to\n# save some trees in general.\n\nCOMPACT_LATEX          = NO\n\n# The PAPER_TYPE tag can be used to set the paper type that is used\n# by the printer. Possible values are: a4, letter, legal and\n# executive. If left blank a4wide will be used.\n\nPAPER_TYPE             = a4\n\n# The EXTRA_PACKAGES tag can be to specify one or more names of LaTeX\n# packages that should be included in the LaTeX output.\n\nEXTRA_PACKAGES         =\n\n# The LATEX_HEADER tag can be used to specify a personal LaTeX header for\n# the generated latex document. The header should contain everything until\n# the first chapter. If it is left blank doxygen will generate a\n# standard header. Notice: only use this tag if you know what you are doing!\n\nLATEX_HEADER           =\n\n# The LATEX_FOOTER tag can be used to specify a personal LaTeX footer for\n# the generated latex document. The footer should contain everything after\n# the last chapter. If it is left blank doxygen will generate a\n# standard footer. Notice: only use this tag if you know what you are doing!\n\nLATEX_FOOTER           =\n\n# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated\n# is prepared for conversion to pdf (using ps2pdf). The pdf file will\n# contain links (just like the HTML output) instead of page references\n# This makes the output suitable for online browsing using a pdf viewer.\n\nPDF_HYPERLINKS         = YES\n\n# If the USE_PDFLATEX tag is set to YES, pdflatex will be used instead of\n# plain latex in the generated Makefile. Set this option to YES to get a\n# higher quality PDF documentation.\n\nUSE_PDFLATEX           = YES\n\n# If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \\\\batchmode.\n# command to the generated LaTeX files. This will instruct LaTeX to keep\n# running if errors occur, instead of asking the user for help.\n# This option is also used when generating formulas in HTML.\n\nLATEX_BATCHMODE        = NO\n\n# If LATEX_HIDE_INDICES is set to YES then doxygen will not\n# include the index chapters (such as File Index, Compound Index, etc.)\n# in the output.\n\nLATEX_HIDE_INDICES     = NO\n\n# If LATEX_SOURCE_CODE is set to YES then doxygen will include\n# source code with syntax highlighting in the LaTeX output.\n# Note that which sources are shown also depends on other settings\n# such as SOURCE_BROWSER.\n\nLATEX_SOURCE_CODE      = NO\n\n# The LATEX_BIB_STYLE tag can be used to specify the style to use for the\n# bibliography, e.g. plainnat, or ieeetr. The default style is \"plain\". See\n# https://en.wikipedia.org/wiki/BibTeX for more info.\n\nLATEX_BIB_STYLE        = plain\n\n#---------------------------------------------------------------------------\n# configuration options related to the RTF output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_RTF tag is set to YES Doxygen will generate RTF output\n# The RTF output is optimized for Word 97 and may not look very pretty with\n# other RTF readers or editors.\n\nGENERATE_RTF           = NO\n\n# The RTF_OUTPUT tag is used to specify where the RTF docs will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `rtf' will be used as the default path.\n\nRTF_OUTPUT             = rtf\n\n# If the COMPACT_RTF tag is set to YES Doxygen generates more compact\n# RTF documents. This may be useful for small projects and may help to\n# save some trees in general.\n\nCOMPACT_RTF            = NO\n\n# If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated\n# will contain hyperlink fields. The RTF file will\n# contain links (just like the HTML output) instead of page references.\n# This makes the output suitable for online browsing using WORD or other\n# programs which support those fields.\n# Note: wordpad (write) and others do not support links.\n\nRTF_HYPERLINKS         = NO\n\n# Load style sheet definitions from file. Syntax is similar to doxygen's\n# config file, i.e. a series of assignments. You only have to provide\n# replacements, missing definitions are set to their default value.\n\nRTF_STYLESHEET_FILE    =\n\n# Set optional variables used in the generation of an rtf document.\n# Syntax is similar to doxygen's config file.\n\nRTF_EXTENSIONS_FILE    =\n\n#---------------------------------------------------------------------------\n# configuration options related to the man page output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_MAN tag is set to YES (the default) Doxygen will\n# generate man pages\n\nGENERATE_MAN           = NO\n\n# The MAN_OUTPUT tag is used to specify where the man pages will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `man' will be used as the default path.\n\nMAN_OUTPUT             = man\n\n# The MAN_EXTENSION tag determines the extension that is added to\n# the generated man pages (default is the subroutine's section .3)\n\nMAN_EXTENSION          = .3\n\n# If the MAN_LINKS tag is set to YES and Doxygen generates man output,\n# then it will generate one additional man file for each entity\n# documented in the real man page(s). These additional files\n# only source the real man page, but without them the man command\n# would be unable to find the correct page. The default is NO.\n\nMAN_LINKS              = NO\n\n#---------------------------------------------------------------------------\n# configuration options related to the XML output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_XML tag is set to YES Doxygen will\n# generate an XML file that captures the structure of\n# the code including all documentation.\n\nGENERATE_XML           = NO\n\n# The XML_OUTPUT tag is used to specify where the XML pages will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `xml' will be used as the default path.\n\nXML_OUTPUT             = xml\n\n# The XML_SCHEMA tag can be used to specify an XML schema,\n# which can be used by a validating XML parser to check the\n# syntax of the XML files.\n\nXML_SCHEMA             =\n\n# The XML_DTD tag can be used to specify an XML DTD,\n# which can be used by a validating XML parser to check the\n# syntax of the XML files.\n\nXML_DTD                =\n\n# If the XML_PROGRAMLISTING tag is set to YES Doxygen will\n# dump the program listings (including syntax highlighting\n# and cross-referencing information) to the XML output. Note that\n# enabling this will significantly increase the size of the XML output.\n\nXML_PROGRAMLISTING     = YES\n\n#---------------------------------------------------------------------------\n# configuration options for the AutoGen Definitions output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_AUTOGEN_DEF tag is set to YES Doxygen will\n# generate an AutoGen Definitions (see autogen.sf.net) file\n# that captures the structure of the code including all\n# documentation. Note that this feature is still experimental\n# and incomplete at the moment.\n\nGENERATE_AUTOGEN_DEF   = NO\n\n#---------------------------------------------------------------------------\n# configuration options related to the Perl module output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_PERLMOD tag is set to YES Doxygen will\n# generate a Perl module file that captures the structure of\n# the code including all documentation. Note that this\n# feature is still experimental and incomplete at the\n# moment.\n\nGENERATE_PERLMOD       = NO\n\n# If the PERLMOD_LATEX tag is set to YES Doxygen will generate\n# the necessary Makefile rules, Perl scripts and LaTeX code to be able\n# to generate PDF and DVI output from the Perl module output.\n\nPERLMOD_LATEX          = NO\n\n# If the PERLMOD_PRETTY tag is set to YES the Perl module output will be\n# nicely formatted so it can be parsed by a human reader.  This is useful\n# if you want to understand what is going on.  On the other hand, if this\n# tag is set to NO the size of the Perl module output will be much smaller\n# and Perl will parse it just the same.\n\nPERLMOD_PRETTY         = YES\n\n# The names of the make variables in the generated doxyrules.make file\n# are prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX.\n# This is useful so different doxyrules.make files included by the same\n# Makefile don't overwrite each other's variables.\n\nPERLMOD_MAKEVAR_PREFIX =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the preprocessor\n#---------------------------------------------------------------------------\n\n# If the ENABLE_PREPROCESSING tag is set to YES (the default) Doxygen will\n# evaluate all C-preprocessor directives found in the sources and include\n# files.\n\nENABLE_PREPROCESSING   = YES\n\n# If the MACRO_EXPANSION tag is set to YES Doxygen will expand all macro\n# names in the source code. If set to NO (the default) only conditional\n# compilation will be performed. Macro expansion can be done in a controlled\n# way by setting EXPAND_ONLY_PREDEF to YES.\n\nMACRO_EXPANSION        = NO\n\n# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES\n# then the macro expansion is limited to the macros specified with the\n# PREDEFINED and EXPAND_AS_DEFINED tags.\n\nEXPAND_ONLY_PREDEF     = NO\n\n# If the SEARCH_INCLUDES tag is set to YES (the default) the includes files\n# pointed to by INCLUDE_PATH will be searched when a #include is found.\n\nSEARCH_INCLUDES        = YES\n\n# The INCLUDE_PATH tag can be used to specify one or more directories that\n# contain include files that are not input files but should be processed by\n# the preprocessor.\n\nINCLUDE_PATH           =\n\n# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard\n# patterns (like *.h and *.hpp) to filter out the header-files in the\n# directories. If left blank, the patterns specified with FILE_PATTERNS will\n# be used.\n\nINCLUDE_FILE_PATTERNS  =\n\n# The PREDEFINED tag can be used to specify one or more macro names that\n# are defined before the preprocessor is started (similar to the -D option of\n# gcc). The argument of the tag is a list of macros of the form: name\n# or name=definition (no spaces). If the definition and the = are\n# omitted =1 is assumed. To prevent a macro definition from being\n# undefined via #undef or recursively expanded use the := operator\n# instead of the = operator.\n\nPREDEFINED             =\n\n# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then\n# this tag can be used to specify a list of macro names that should be expanded.\n# The macro definition that is found in the sources will be used.\n# Use the PREDEFINED tag if you want to use a different macro definition that\n# overrules the definition found in the source code.\n\nEXPAND_AS_DEFINED      =\n\n# If the SKIP_FUNCTION_MACROS tag is set to YES (the default) then\n# doxygen's preprocessor will remove all references to function-like macros\n# that are alone on a line, have an all uppercase name, and do not end with a\n# semicolon, because these will confuse the parser if not removed.\n\nSKIP_FUNCTION_MACROS   = YES\n\n#---------------------------------------------------------------------------\n# Configuration::additions related to external references\n#---------------------------------------------------------------------------\n\n# The TAGFILES option can be used to specify one or more tagfiles. For each\n# tag file the location of the external documentation should be added. The\n# format of a tag file without this location is as follows:\n#   TAGFILES = file1 file2 ...\n# Adding location for the tag files is done as follows:\n#   TAGFILES = file1=loc1 \"file2 = loc2\" ...\n# where \"loc1\" and \"loc2\" can be relative or absolute paths\n# or URLs. Note that each tag file must have a unique name (where the name does\n# NOT include the path). If a tag file is not located in the directory in which\n# doxygen is run, you must also specify the path to the tagfile here.\n\nTAGFILES               =\n\n# When a file name is specified after GENERATE_TAGFILE, doxygen will create\n# a tag file that is based on the input files it reads.\n\nGENERATE_TAGFILE       =\n\n# If the ALLEXTERNALS tag is set to YES all external classes will be listed\n# in the class index. If set to NO only the inherited external classes\n# will be listed.\n\nALLEXTERNALS           = NO\n\n# If the EXTERNAL_GROUPS tag is set to YES all external groups will be listed\n# in the modules index. If set to NO, only the current project's groups will\n# be listed.\n\nEXTERNAL_GROUPS        = YES\n\n# The PERL_PATH should be the absolute path and name of the perl script\n# interpreter (i.e. the result of `which perl').\n\nPERL_PATH              = /usr/bin/perl\n\n#---------------------------------------------------------------------------\n# Configuration options related to the dot tool\n#---------------------------------------------------------------------------\n\n# If the CLASS_DIAGRAMS tag is set to YES (the default) Doxygen will\n# generate a inheritance diagram (in HTML, RTF and LaTeX) for classes with base\n# or super classes. Setting the tag to NO turns the diagrams off. Note that\n# this option also works with HAVE_DOT disabled, but it is recommended to\n# install and use dot, since it yields more powerful graphs.\n\nCLASS_DIAGRAMS         = YES\n\n# You can define message sequence charts within doxygen comments using the \\msc\n# command. Doxygen will then run the mscgen tool (see\n# http://www.mcternan.me.uk/mscgen/) to produce the chart and insert it in the\n# documentation. The MSCGEN_PATH tag allows you to specify the directory where\n# the mscgen tool resides. If left empty the tool is assumed to be found in the\n# default search path.\n\nMSCGEN_PATH            =\n\n# If set to YES, the inheritance and collaboration graphs will hide\n# inheritance and usage relations if the target is undocumented\n# or is not a class.\n\nHIDE_UNDOC_RELATIONS   = YES\n\n# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is\n# available from the path. This tool is part of Graphviz, a graph visualization\n# toolkit from AT&T and Lucent Bell Labs. The other options in this section\n# have no effect if this option is set to NO (the default)\n\nHAVE_DOT               = YES\n\n# The DOT_NUM_THREADS specifies the number of dot invocations doxygen is\n# allowed to run in parallel. When set to 0 (the default) doxygen will\n# base this on the number of processors available in the system. You can set it\n# explicitly to a value larger than 0 to get control over the balance\n# between CPU load and processing speed.\n\nDOT_NUM_THREADS        = 12\n\n# By default doxygen will use the Helvetica font for all dot files that\n# doxygen generates. When you want a differently looking font you can specify\n# the font name using DOT_FONTNAME. You need to make sure dot is able to find\n# the font, which can be done by putting it in a standard location or by setting\n# the DOTFONTPATH environment variable or by setting DOT_FONTPATH to the\n# directory containing the font.\n\nDOT_FONTNAME           = Helvetica\n\n# The DOT_FONTSIZE tag can be used to set the size of the font of dot graphs.\n# The default size is 10pt.\n\nDOT_FONTSIZE           = 10\n\n# By default doxygen will tell dot to use the Helvetica font.\n# If you specify a different font using DOT_FONTNAME you can use DOT_FONTPATH to\n# set the path where dot can find it.\n\nDOT_FONTPATH           =\n\n# If the CLASS_GRAPH and HAVE_DOT tags are set to YES then doxygen\n# will generate a graph for each documented class showing the direct and\n# indirect inheritance relations. Setting this tag to YES will force the\n# CLASS_DIAGRAMS tag to NO.\n\nCLASS_GRAPH            = YES\n\n# If the COLLABORATION_GRAPH and HAVE_DOT tags are set to YES then doxygen\n# will generate a graph for each documented class showing the direct and\n# indirect implementation dependencies (inheritance, containment, and\n# class references variables) of the class with other documented classes.\n\nCOLLABORATION_GRAPH    = YES\n\n# If the GROUP_GRAPHS and HAVE_DOT tags are set to YES then doxygen\n# will generate a graph for groups, showing the direct groups dependencies\n\nGROUP_GRAPHS           = YES\n\n# If the UML_LOOK tag is set to YES doxygen will generate inheritance and\n# collaboration diagrams in a style similar to the OMG's Unified Modeling\n# Language.\n\nUML_LOOK               = NO\n\n# If the UML_LOOK tag is enabled, the fields and methods are shown inside\n# the class node. If there are many fields or methods and many nodes the\n# graph may become too big to be useful. The UML_LIMIT_NUM_FIELDS\n# threshold limits the number of items for each type to make the size more\n# managable. Set this to 0 for no limit. Note that the threshold may be\n# exceeded by 50% before the limit is enforced.\n\nUML_LIMIT_NUM_FIELDS   = 10\n\n# If set to YES, the inheritance and collaboration graphs will show the\n# relations between templates and their instances.\n\nTEMPLATE_RELATIONS     = NO\n\n# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDE_GRAPH, and HAVE_DOT\n# tags are set to YES then doxygen will generate a graph for each documented\n# file showing the direct and indirect include dependencies of the file with\n# other documented files.\n\nINCLUDE_GRAPH          = YES\n\n# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDED_BY_GRAPH, and\n# HAVE_DOT tags are set to YES then doxygen will generate a graph for each\n# documented header file showing the documented files that directly or\n# indirectly include this file.\n\nINCLUDED_BY_GRAPH      = YES\n\n# If the CALL_GRAPH and HAVE_DOT options are set to YES then\n# doxygen will generate a call dependency graph for every global function\n# or class method. Note that enabling this option will significantly increase\n# the time of a run. So in most cases it will be better to enable call graphs\n# for selected functions only using the \\callgraph command.\n\nCALL_GRAPH             = NO\n\n# If the CALLER_GRAPH and HAVE_DOT tags are set to YES then\n# doxygen will generate a caller dependency graph for every global function\n# or class method. Note that enabling this option will significantly increase\n# the time of a run. So in most cases it will be better to enable caller\n# graphs for selected functions only using the \\callergraph command.\n\nCALLER_GRAPH           = NO\n\n# If the GRAPHICAL_HIERARCHY and HAVE_DOT tags are set to YES then doxygen\n# will generate a graphical hierarchy of all classes instead of a textual one.\n\nGRAPHICAL_HIERARCHY    = YES\n\n# If the DIRECTORY_GRAPH and HAVE_DOT tags are set to YES\n# then doxygen will show the dependencies a directory has on other directories\n# in a graphical way. The dependency relations are determined by the #include\n# relations between the files in the directories.\n\nDIRECTORY_GRAPH        = YES\n\n# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images\n# generated by dot. Possible values are svg, png, jpg, or gif.\n# If left blank png will be used. If you choose svg you need to set\n# HTML_FILE_EXTENSION to xhtml in order to make the SVG files\n# visible in IE 9+ (other browsers do not have this requirement).\n\nDOT_IMAGE_FORMAT       = png\n\n# If DOT_IMAGE_FORMAT is set to svg, then this option can be set to YES to\n# enable generation of interactive SVG images that allow zooming and panning.\n# Note that this requires a modern browser other than Internet Explorer.\n# Tested and working are Firefox, Chrome, Safari, and Opera. For IE 9+ you\n# need to set HTML_FILE_EXTENSION to xhtml in order to make the SVG files\n# visible. Older versions of IE do not have SVG support.\n\nINTERACTIVE_SVG        = NO\n\n# The tag DOT_PATH can be used to specify the path where the dot tool can be\n# found. If left blank, it is assumed the dot tool can be found in the path.\n\nDOT_PATH               =\n\n# The DOTFILE_DIRS tag can be used to specify one or more directories that\n# contain dot files that are included in the documentation (see the\n# \\dotfile command).\n\nDOTFILE_DIRS           =\n\n# The MSCFILE_DIRS tag can be used to specify one or more directories that\n# contain msc files that are included in the documentation (see the\n# \\mscfile command).\n\nMSCFILE_DIRS           =\n\n# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of\n# nodes that will be shown in the graph. If the number of nodes in a graph\n# becomes larger than this value, doxygen will truncate the graph, which is\n# visualized by representing a node as a red box. Note that doxygen if the\n# number of direct children of the root node in a graph is already larger than\n# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note\n# that the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.\n\nDOT_GRAPH_MAX_NODES    = 500\n\n# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the\n# graphs generated by dot. A depth value of 3 means that only nodes reachable\n# from the root by following a path via at most 3 edges will be shown. Nodes\n# that lay further from the root node will be omitted. Note that setting this\n# option to 1 or 2 may greatly reduce the computation time needed for large\n# code bases. Also note that the size of a graph can be further restricted by\n# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.\n\nMAX_DOT_GRAPH_DEPTH    = 0\n\n# Set the DOT_TRANSPARENT tag to YES to generate images with a transparent\n# background. This is disabled by default, because dot on Windows does not\n# seem to support this out of the box. Warning: Depending on the platform used,\n# enabling this option may lead to badly anti-aliased labels on the edges of\n# a graph (i.e. they become hard to read).\n\nDOT_TRANSPARENT        = NO\n\n# Set the DOT_MULTI_TARGETS tag to YES allow dot to generate multiple output\n# files in one run (i.e. multiple -o and -T options on the command line). This\n# makes dot run faster, but since only newer versions of dot (>1.8.10)\n# support this, this feature is disabled by default.\n\nDOT_MULTI_TARGETS      = YES\n\n# If the GENERATE_LEGEND tag is set to YES (the default) Doxygen will\n# generate a legend page explaining the meaning of the various boxes and\n# arrows in the dot generated graphs.\n\nGENERATE_LEGEND        = YES\n\n# If the DOT_CLEANUP tag is set to YES (the default) Doxygen will\n# remove the intermediate dot files that are used to generate\n# the various graphs.\n\nDOT_CLEANUP            = YES\n"
        },
        {
          "name": "GETTING-STARTED.md",
          "type": "blob",
          "size": 6.6630859375,
          "content": "Getting Started\n===============\n\nHello! Thanks for wanting to work on this project :smile:, and I hope that this file will help you somewhat in getting all set up and running. I'll go through the basics of getting the project environment set up, the code organization and style, and general development practices. I'll also show you some good issues to start off working on to get yourself familiarised with the code.\n\nNote that this document is about contributing code for Cuberite.\n\n - If you are looking for usage instructions, see the [User's Manual][1] instead.\n - If you would like to help but you are not a programmer, you can still help with testing! Please see the [TESTING.md][2] file.\n\nMinecraft Basics\n----------------\n\nIf you don't play Minecraft or don't have a great knowledge of the basic systems, you should get to know them. The [Minecraft Wiki][3] is quite useful for this task, although some youtubers are also fairly good at teaching the basics and just playing is quite good too. It is possible to contribute without knowing minecraft in detail though, or even owning a license.\n\nI'd say that the important topics are:\n\n - Different types of blocks and how they act.\n - Mobs, what they do and how.\n - Redstone, pistons, and automation.\n - Farming.\n - Fighting, health and the hunger system.\n\nUseful Resources\n----------------\n\n - [Minecraft Wiki](https://minecraft.wiki/w/Minecraft_Wiki)\n - [Minecraft Protocol Wiki](http://wiki.vg/Main_Page)\n - [Lua API Documentation](https://api.cuberite.org/)\n - [Visual Studio Community Edition Download](https://www.visualstudio.com/downloads/)\n\nSetting up a Dev Environment\n============================\n\nRequirements\n------------\n\n### Linux/BSD/Solaris/macOS\n\nYou'll need the basic C++ build tools:\n\n - gcc (or clang or another C compiler)\n - g++ (or clang++ or another C++ compiler)\n - make\n\nYou'll also need CMake to generate the makefile to build from.\n\n### Windows\n\nIf you use Windows, your best bet is the Microsoft Visual Studio, available as a free download in the Community edition from Microsoft. You'll also need CMake to generate the project files.\n\nSetting up the Repo\n-------------------\n\nNext, you'll need to set up the repo. You should make a fork and work on that, then create a Pull Request so that we can review and merge your code. After you've \"earned\" an honorable status, we'll give you write access to the repository, so that you can work on branches in the main repo here (still use PRs though, they're great tools for review and discussion).\n\nOnce you've cloned, you need to pull down the submodules:\n\n    git submodule init\n    git submodule update\n\nAfter that they should come down automatically when you pull but it's not bad to refresh every once in a while.\n\nRepo Arrangement\n----------------\n\nThe Cuberite repo has recently been rearranged for better code separation and other things, but basically it's split into a few areas:\n\n - `src`  \n   This holds all of the Cuberite source code, and is where most development takes place.  \n   It's split into logical areas for blocks, the protocol handling and other things.\n - `lib`  \n   This holds all the 3rd party libraries for Cuberite. You basically don't need to touch these, just make sure they are present (git submodules)\n - `Server`  \n   This contains the default plugins and environment to actually run the server. This folder's contents are linked into the executable output folder for each build flavor. In the `Plugins` folder there are the default plugins. The config files are also stored here. Config files with `.example.ini` on the end are generated by the server or source control and should be left alone, instead you should copy them to a file without the `example` in the name which will be prioritised over the generated ones.\n\nCode Style\n----------\n\nYou should follow the code style guidelines in [CONTRIBUTING.md][4], as well as other C++ best practices.\n\nNote that there is a script file, $/src/CheckBasicStyle.lua, that can check some common violations of the coding style. You should run this file to check your code regularly. This script is run during the integration builds and if it fails, the build will fail. Note that you need Lua installed in order to run this script. It is recommended to set this up as a pre-commit hook and doing so is covered in CONTRIBUTING.md.\n\nHow to Build\n------------\n\n### Linux/BSD/Solaris/macOS\n\nFollow the instructions in [COMPILING.md][5]. You probably want to build in debug mode (when you're developing) for console alerts and debugging capability, even though it's much slower for everyday use.\n\nBasically, the process is:\n\n    cmake . -DCMAKE_BUILD_TYPE=DEBUG && make\n\n### Windows\n\nYou need to first generate a solution file by executing CMake. At the top-level folder of the repository:\n```\nmkdir VS2017-x64\ncd VS2017-x64\ncmake -DBUILD_TOOLS=1 -DSELF_TEST=1 ..\n```\nThen just open the solution file in MSVC and build. Note that the first time after generating the solution, you will need to do extra setup in order to be able to fully debug in MSVC:\n\n - Set the startup project to Cuberite: right-click the Cuberite project in the Solution Explorer and choose \"Set as Startup Project\".\n - Set the debugging folder: right-click the Cuberite project in the Solution Explorer, choose \"Properties\". In the dialog, browse to \"Configuration Properties\" -> \"Debugging\" and set \"Working Directory\" to \"../Server\".\n\nHow to Run\n----------\n\nThe server can be run (on *nix) by a simple `./Cuberite` in the `Server` directory. On first run it will generate the world and start a server on the default port (configurable in `settings.ini`) so you can connect in Minecraft via `localhost`.\n\nWhere to Get Started\n--------------------\n\nIssues that should be easy to get started with are tagged as [easy][6] in GitHub issues.\n\nOther good places to get started are:\n\n - Cleaning up some of the compiler warnings. Check [our CI][7] for a list of them.\n - Writing some plugins: They are written in lua, with excellent API documentation available via [APIDump][8]. The [Core plugin][9] should also help quite a bit here.\n\nSpecial Things\n--------------\n - Make yourself familiar with the community. Visit the forums: https://forum.cuberite.org/\n - Ask questions as much as you like, we're here to help :smiley:\n\n[1]: https://book.cuberite.org/\n[2]: https://github.com/cuberite/cuberite/blob/master/TESTING.md\n[3]: https://minecraft.wiki/w/Minecraft_Wiki\n[4]: https://github.com/cuberite/cuberite/blob/master/CONTRIBUTING.md\n[5]: https://github.com/cuberite/cuberite/blob/master/COMPILING.md\n[6]: https://github.com/cuberite/cuberite/issues?q=is%3Aopen+is%3Aissue+label%3Aeffort%2Feasy\n[7]: https://builds.cuberite.org/job/cuberite/job/master/lastSuccessfulBuild/console\n[8]: https://api.cuberite.org/\n[9]: https://github.com/cuberite/Core\n"
        },
        {
          "name": "Jenkinsfile",
          "type": "blob",
          "size": 1.9619140625,
          "content": "pipeline {\n    options {\n      timeout(time: 1, unit: 'HOURS') \n    }\n    agent {\n        docker 'cuberite/docker-ci/minimal:latest'\n    }\n    stages {\n        stage(\"Prepare\") {\n            steps {\n                sh 'git submodule update --init'\n            }\n        }\n        stage(\"Check\") {\n            parallel {\n                stage(\"CheckBasicStyle\") {\n                    steps {\n                        dir(\"src\") {\n                            sh 'find . -name \\\\*.cpp -or -name \\\\*.h > AllFiles.lst'\n                            sh 'lua CheckBasicStyle.lua'\n                            sh 'cd Bindings && lua CheckBindingsDependencies.lua'\n                        }\n                    }\n                }\n                stage(\"clang-tidy\") {\n                    steps {\n                        sh './clang-tidy.sh -j 4'\n                    }\n                }\n            }\n        }\n        stage(\"Build\") {\n            parallel {\n                stage(\"gcc\") {\n                    environment {\n                        CI_CUBERITE_BUILD_TYPE = 'Release'\n                        CI_JOB_NUMBER = \"{$env.BUILD_ID}\"\n                        CC = \"gcc\"\n                        CXX = \"g++\"\n                    }\n                    steps {\n                        sh 'bash ./cibuild.sh'\n                    }\n                }\n                stage(\"clang\") {\n                    environment {\n                        CI_CUBERITE_BUILD_TYPE = 'Debug'\n                        CI_JOB_NUMBER = \"{$env.BUILD_ID}\"\n                        CC = \"clang\"\n                        CXX = \"clang++\"\n                    }\n                    steps {\n                        sh 'bash ./cibuild.sh'\n                    }\n                }\n            }\n        }\n\t\tstage(\"Artifacts\") {\n\t\t\twhen {\n\t\t\t\tbranch 'master'\n\t\t\t}\n            steps {\n                archiveArtifacts artifacts: 'gcc_Release/Server/.luacheckrc'\n            }\n        }\n    }\n    post {\n        always {\n            cleanWs()\n        }\n    }\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.3681640625,
          "content": "Cuberite: A lightweight, fast and extensible game server for Minecraft\nwww:      https://cuberite.org\n\nCopyright 2011-2025 Cuberite Contributors\n\nA full list of known copyright holders can be found in the CONTRIBUTORS file\nto be distributed with all copies of this software.\n\n------\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.728515625,
          "content": "# Cuberite\n\n[![Jenkins Build Status](https://img.shields.io/jenkins/build?jobUrl=https%3A%2F%2Fbuilds.cuberite.org%2Fjob%2Fcuberite%2Fjob%2Fmaster&label=Jenkins)](https://builds.cuberite.org/job/cuberite/job/master/)\n[![AppVeyor Build Status](https://img.shields.io/appveyor/ci/cuberite/cuberite/master.svg?label=AppVeyor)](https://ci.appveyor.com/project/cuberite/cuberite)\n\nCuberite is a Minecraft-compatible multiplayer game server that is written in C++ and designed to be efficient with memory and CPU, as well as having a flexible Lua Plugin API. Cuberite is compatible with the Java Edition Minecraft client.\n\nCuberite runs on Windows, *nix and Android operating systems. This includes Android phones and tablets as well as Raspberry Pis; support for small embedded devices is experimental.\n\nCurrently we support Release 1.8 - 1.12.2 Minecraft protocol versions.\n\nSubscribe to [the newsletter][1] for important updates and project news.\n\n## Installation\n\nThere are several ways to obtain Cuberite.\n\n### Binaries\n\n- The easiest method is downloading for Windows or Linux from the [website][2].\n- You can use the EasyInstall script for Linux and macOS, which automatically downloads the correct binary. The script is described below.\n\n#### The EasyInstall script\n\nThis script will download the correct binary from the project site.\n\n    curl -sSfL https://download.cuberite.org | sh\n\n### Compiling\n\n- You can compile automatically for Linux, macOS and FreeBSD with the `compile.sh` script. The script is described below.\n- You can also compile manually. See [COMPILING.md][4].\n\nCompiling may provide better performance (1.5-3x as fast) and it supports more operating systems.\n\n#### The compile.sh script\n\nThis script downloads the source code and compiles it. The script is smart enough to notify you of missing dependencies and instructing you on how to install them. The script doesn't work for Windows.\n\nUsing curl:\n\n    sh -c \"$(curl -sSfL -o - https://compile.cuberite.org)\"\n\nOr using wget:\n\n    sh -c \"$(wget -O - https://compile.cuberite.org)\"\n\n### Hosted services\n\n- Hosted Cuberite is available via [Gamocosm][5].\n\n## Contributing\n\nCuberite is licensed under the Apache License V2, and we welcome anybody to fork and submit a Pull Request back with their changes, and if you want to join as a permanent member we can add you to the team.\n\nCuberite is developed in C++ and Lua. To contribute code, please check out [GETTING-STARTED.md][6] and [CONTRIBUTING.md][7] for more details.\n\nPlugins are written in Lua. You can contribute by developing plugins and submitting them to the [plugin repository][8] or the [forum][9]. Please check out our [plugin introduction guide][10] for more info.\n\nIf you are not a programmer, you can help by testing Cuberite and reporting bugs. See [TESTING.md][11] for details.\n\nYou can also help with documentation by contributing to the [User's Manual][12].\n\n## Other Stuff\n\nFor other stuff, check out the [homepage][13], the [Users' Manual][14], the [forums][15], and the [Plugin API][16].\n\nSupport the Cuberite development team on [Liberapay][17]\n\n[1]: https://cuberite.org/news/#subscribe\n[2]: https://cuberite.org/\n[4]: https://github.com/cuberite/cuberite/blob/master/COMPILING.md\n[5]: https://gamocosm.com/\n[6]: https://github.com/cuberite/cuberite/blob/master/GETTING-STARTED.md\n[7]: https://github.com/cuberite/cuberite/blob/master/CONTRIBUTING.md\n[8]: https://plugins.cuberite.org/\n[9]: https://forum.cuberite.org/forum-2.html\n[10]: https://api.cuberite.org/Writing-a-Cuberite-plugin.html\n[11]: https://github.com/cuberite/cuberite/blob/master/TESTING.md\n[12]: https://github.com/cuberite/users-manual\n[13]: https://cuberite.org/\n[14]: https://book.cuberite.org/\n[15]: https://forum.cuberite.org/\n[16]: https://api.cuberite.org/\n[17]: https://liberapay.com/Cuberite\n"
        },
        {
          "name": "Server",
          "type": "tree",
          "content": null
        },
        {
          "name": "SetFlags.cmake",
          "type": "blob",
          "size": 6.9345703125,
          "content": "macro (add_flags_lnk FLAGS)\n\tset(CMAKE_EXE_LINKER_FLAGS             \"${CMAKE_EXE_LINKER_FLAGS}             ${FLAGS}\")\n\tset(CMAKE_EXE_LINKER_FLAGS_DEBUG       \"${CMAKE_EXE_LINKER_FLAGS_DEBUG}       ${FLAGS}\")\n\tset(CMAKE_EXE_LINKER_FLAGS_COVERAGE    \"${CMAKE_EXE_LINKER_FLAGS_COVERAGE}    ${FLAGS}\")\n\tset(CMAKE_EXE_LINKER_FLAGS_RELEASE     \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}     ${FLAGS}\")\n\tset(CMAKE_SHARED_LINKER_FLAGS          \"${CMAKE_SHARED_LINKER_FLAGS}          ${FLAGS}\")\n\tset(CMAKE_SHARED_LINKER_FLAGS_DEBUG    \"${CMAKE_SHARED_LINKER_FLAGS_DEBUG}    ${FLAGS}\")\n\tset(CMAKE_SHARED_LINKER_FLAGS_COVERAGE \"${CMAKE_SHARED_LINKER_FLAGS_COVERAGE} ${FLAGS}\")\n\tset(CMAKE_SHARED_LINKER_FLAGS_RELEASE  \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}  ${FLAGS}\")\n\tset(CMAKE_MODULE_LINKER_FLAGS          \"${CMAKE_MODULE_LINKER_FLAGS}          ${FLAGS}\")\n\tset(CMAKE_MODULE_LINKER_FLAGS_DEBUG    \"${CMAKE_MODULE_LINKER_FLAGS_DEBUG}    ${FLAGS}\")\n\tset(CMAKE_MODULE_LINKER_FLAGS_COVERAGE \"${CMAKE_MODULE_LINKER_FLAGS_COVERAGE} ${FLAGS}\")\n\tset(CMAKE_MODULE_LINKER_FLAGS_RELEASE  \"${CMAKE_MODULE_LINKER_FLAGS_RELEASE}  ${FLAGS}\")\nendmacro()\n\nmacro(add_flags_cxx FLAGS)\n\tset(CMAKE_CXX_FLAGS          \"${CMAKE_CXX_FLAGS} ${FLAGS}\")\n\tset(CMAKE_C_FLAGS            \"${CMAKE_C_FLAGS}   ${FLAGS}\")\nendmacro()\n\nmacro(enable_profile)\n\t# Declare the flags used for profiling builds:\n\tif (MSVC)\n\t\tset (CXX_PROFILING \"/Zi\")\n\t\tset (LNK_PROFILING \"/PROFILE /DEBUG\")\n\telse()\n\t\tset (CXX_PROFILING \"-pg\")\n\t\tset (LNK_PROFILING \"-pg\")\n\tendif()\n\n\n\t# Declare the profiling configurations:\n\tSET(CMAKE_CXX_FLAGS_DEBUGPROFILE\n\t\t\"${CMAKE_CXX_FLAGS_DEBUG} ${CXX_PROFILING}\"\n\t\tCACHE STRING \"Flags used by the C++ compiler during profile builds.\"\n\t\tFORCE )\n\tSET(CMAKE_C_FLAGS_DEBUGPROFILE\n\t\t\"${CMAKE_C_FLAGS_DEBUG} ${CXX_PROFILING}\"\n\t\tCACHE STRING \"Flags used by the C compiler during profile builds.\"\n\t\tFORCE )\n\tSET(CMAKE_EXE_LINKER_FLAGS_DEBUGPROFILE\n\t\t\"${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${LNK_PROFILING}\"\n\t\tCACHE STRING \"Flags used for linking binaries during profile builds.\"\n\t\tFORCE )\n\tSET(CMAKE_SHARED_LINKER_FLAGS_DEBUGPROFILE\n\t\t\"${CMAKE_SHARED_LINKER_FLAGS_DEBUG} ${LNK_PROFILING}\"\n\t\tCACHE STRING \"Flags used by the shared libraries linker during profile builds.\"\n\t\tFORCE )\n\tMARK_AS_ADVANCED(\n\t\tCMAKE_CXX_FLAGS_DEBUGPROFILE\n\t\tCMAKE_C_FLAGS_DEBUGPROFILE\n\t\tCMAKE_EXE_LINKER_FLAGS_DEBUGPROFILE\n\t\tCMAKE_SHARED_LINKER_FLAGS_DEBUGPROFILE )\n\n\tSET(CMAKE_CXX_FLAGS_RELEASEPROFILE\n\t\t\"${CMAKE_CXX_FLAGS_RELEASE} ${CXX_PROFILING}\"\n\t\tCACHE STRING \"Flags used by the C++ compiler during profile builds.\"\n\t\tFORCE )\n\tSET(CMAKE_C_FLAGS_RELEASEPROFILE\n\t\t\"${CMAKE_C_FLAGS_RELEASE} ${CXX_PROFILING}\"\n\t\tCACHE STRING \"Flags used by the C compiler during profile builds.\"\n\t\tFORCE )\n\tSET(CMAKE_EXE_LINKER_FLAGS_RELEASEPROFILE\n\t\t\"${CMAKE_EXE_LINKER_FLAGS_RELEASE} ${LNK_PROFILING}\"\n\t\tCACHE STRING \"Flags used for linking binaries during profile builds.\"\n\t\tFORCE )\n\tSET(CMAKE_SHARED_LINKER_FLAGS_RELEASEPROFILE\n\t\t\"${CMAKE_SHARED_LINKER_FLAGS_RELEASE} ${LNK_PROFILING}\"\n\t\tCACHE STRING \"Flags used by the shared libraries linker during profile builds.\"\n\t\tFORCE )\n\tMARK_AS_ADVANCED(\n\t\tCMAKE_CXX_FLAGS_RELEASEPROFILE\n\t\tCMAKE_C_FLAGS_RELEASEPROFILE\n\t\tCMAKE_EXE_LINKER_FLAGS_RELEASEPROFILE\n\t\tCMAKE_SHARED_LINKER_FLAGS_RELEASEPROFILE )\n\t# The configuration types need to be set after their respective c/cxx/linker flags and before the project directive\n\tif(MSVC)\n\t\tset(CMAKE_CONFIGURATION_TYPES \"Debug;Release;DebugProfile;ReleaseProfile\" CACHE STRING \"\" FORCE)\n\telse()\n\t\tset(CMAKE_CONFIGURATION_TYPES \"Debug;Release;DebugProfile;ReleaseProfile;Coverage\" CACHE STRING \"\" FORCE)\n\tendif()\nendmacro()\n\nfunction(set_global_flags)\n\tif(MSVC)\n\t\t# Make build use multiple threads under MSVC:\n\t\tadd_compile_options(/MP)\n\n\t\t# Make build use Unicode:\n\t\tadd_compile_definitions(UNICODE _UNICODE)\n\n\t\t# Turn off CRT warnings:\n\t\tadd_compile_definitions(_CRT_SECURE_NO_WARNINGS)\n\n\t\treturn ()\n\tendif()\n\n\t# Allow for a forced 32-bit build under 64-bit OS:\n\tif (FORCE_32)\n\t\tadd_compile_options(-m32)\n\t\tadd_link_options(-m32)\n\tendif()\n\n\t# https://en.wikipedia.org/wiki/Uname\n\t# https://gcc.gnu.org/onlinedocs/gcc/index.html\n\t# Have the compiler generate code specifically targeted at the current machine on Linux:\n\tif(NOT NO_NATIVE_OPTIMIZATION AND NOT CMAKE_CROSSCOMPILING)\n\t\tstring(TOLOWER ${CMAKE_SYSTEM_PROCESSOR} SYSTEM_PROCESSOR)\n\t\tif (SYSTEM_PROCESSOR MATCHES \"^(i386|i686|x86|amd64|mips)\")\n\t\t\tmessage(STATUS \"Optimising for this machine (march=native)\")\n\t\t\tadd_compile_options(-march=native)\n\t\telseif (SYSTEM_PROCESSOR MATCHES \"^(arm|aarch|powerpc|ppc|sparc|alpha)\")\n\t\t\tmessage(STATUS \"Optimising for this machine (mcpu=native)\")\n\t\t\tadd_compile_options(-mcpu=native)\n\t\tendif()\n\tendif()\nendfunction()\n\nfunction(set_exe_flags TARGET)\n\tif (MSVC)\n\t\t# TODO: Warnings as errors\n\t\ttarget_compile_options(\n\t\t\t${TARGET} PRIVATE\n\n\t\t\t# Warnings level 4:\n\t\t\t/W4\n\n\t\t\t# Excessive amount of logspam (Unreferenced formal parameter), disable for now:\n\t\t\t/wd4100\n\t\t)\n\t\treturn ()\n\tendif()\n\n\ttarget_compile_options(\n\t\t${TARGET} PRIVATE\n\n\t\t# We use a signed char (fixes #640 on RasPi)\n\t\t# TODO: specify this in code, not a compile flag:\n\t\t-fsigned-char\n\n\t\t# We support non-IEEE 754 FPUs so can make no guarantees about error:\n\t\t-ffast-math\n\n\t\t# All warnings:\n\t\t-Wall -Wextra\n\n\t\t# Excessive amount of logspam, disable for now:\n\t\t-Wno-unused-parameter\n\t)\n\n\tif(CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n\t\ttarget_compile_options(\n\t\t\t${TARGET} PRIVATE\n\n\t\t\t# TODO: actually fix the warnings instead of disabling them\n\t\t\t# or at least disable on a file-level basis:\n\t\t\t-Wno-missing-noreturn -Wno-padded -Wno-implicit-fallthrough\n\t\t\t-Wno-double-promotion\n\n\t\t\t# This is a pretty useless warning, we've already got -Wswitch which is what we need:\n\t\t\t-Wno-switch-enum\n\n\t\t\t# Weverything with Clang exceptions:\n\t\t\t-Weverything -Wno-exit-time-destructors -Wno-error=disabled-macro-expansion -Wno-weak-vtables\n\t\t\t-Wno-string-conversion -Wno-c++98-compat-pedantic -Wno-c++2a-compat-pedantic -Wno-documentation\n\t\t\t-Wno-documentation-unknown-command -Wno-reserved-id-macro -Wno-error=unused-command-line-argument\n\t\t)\n\n\t\t# Werror only for debug builds\n\t\tif(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n\t\t\ttarget_compile_options(\n\t\t\t\t${TARGET} PRIVATE\n\n\t\t\t\t# Warnings-as-errors only on Clang for now:\n\t\t\t\t-Werror\n\t\t\t)\n\t\tendif()\n\n\t\tif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 7 AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 13)\n\t\t\ttarget_compile_options(\n\t\t\t\t${TARGET} PRIVATE\n\n\t\t\t\t# We aren't using C++11:\n\t\t\t\t-Wno-return-std-move-in-c++11\n\t\t\t)\n\t\tendif()\n\n\t\tif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 10)\n\t\t\ttarget_compile_options(\n\t\t\t\t${TARGET} PRIVATE\n\n\t\t\t\t# int to float conversions happen a lot, not worth fixing all warnings:\n\t\t\t\t-Wno-implicit-int-float-conversion\n\t\t\t)\n\t\tendif()\n\n\t\tif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 13)\n\t\t\ttarget_compile_options(\n\t\t\t\t${TARGET} PRIVATE\n\n\t\t\t\t# TODO: fix\n\t\t\t\t-Wno-reserved-identifier\n\t\t\t)\n\t\tendif()\n\t\tif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 16)\n\t\t\ttarget_compile_options(\n\t\t\t\t${TARGET} PRIVATE\n\t\t\t\t-Wno-unsafe-buffer-usage\n\t\t\t)\n\t\tendif()\n\tendif()\nendfunction()\n"
        },
        {
          "name": "TESTING.md",
          "type": "blob",
          "size": 1.6787109375,
          "content": "Contributing by Testing Cuberite\n================================\n\nYou can help us even if you are not a programmer! This document explains how.\nIf you would like to help with coding instead, see [GETTING-STARTED.md][1] and [CONTRIBUTING.md][2].\n\nHere are things you can help with without being a programmer:\n - Run and test Cuberite. Report issues, bugs, crashes, and stacktraces at the [issue tracker][3]. This is best done in debug mode.\n - Test unmerged versions (known as branches or Pull Requests) which are marked with the [ingame-testing-needed][4] label. \n   Note that code marked with `ingame-testing-needed` is not always available, and sometimes the above list will be empty.\n\nPlease use the issue tracker search feature and make sure your issue has not been reported before!\n\nObtaining Debug Builds\n----------------------\n\nWhen testing Cuberite, debug builds are preferred because they output detailed info about the problem that had occurred at the server console.\nCurrently, we do not provide debug builds. You will have to compile Cuberite yourself to obtain them. See the compilation instructions.\nYou can also test with regular builds.\n\nTesting Unmerged Pull Requests\n------------------------------\n\nTo test unmerged branches, pick one from the ingame-testing-needed list, and follow the download instructions.\nIf you are familiar with git, you can also fetch and compile the unmerged branch instead.\n\n[1]: https://github.com/cuberite/cuberite/blob/master/GETTING-STARTED.md\n[2]: https://github.com/cuberite/cuberite/blob/master/CONTRIBUTING.md\n[3]: https://github.com/cuberite/cuberite/issues\n[4]: https://github.com/cuberite/cuberite/pulls?q=is%3Aopen+is%3Apr+label%3Astatus%2Fingame-testing-needed\n"
        },
        {
          "name": "Tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "app.yml",
          "type": "blob",
          "size": 0.2158203125,
          "content": "name: Cuberite\nimage: ubuntu-15-04-x64\nconfig:\n  #cloud-config\n  packages:\n    - git\n  runcmd:\n    - cd /tmp && git clone https://github.com/cuberite/cuberite-ocean.git\n    - cd /tmp/cuberite-ocean && ./initialinstall.sh\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 2.0048828125,
          "content": "version: 1.0.{build}\nclone_depth: 50\n\nimage:\n- Visual Studio 2019\n- Visual Studio 2017\n\nbranches:\n  only:\n    - master\n\n# Set up environment variables for build info\nenvironment:\n  CUBERITE_BUILD_SERIES_NAME: AppVeyor\n  CUBERITE_BUILD_ID: \"%APPVEYOR_BUILD_NUMBER%\"\n  CUBERITE_BUILD_DATETIME: \"%APPVEYOR_REPO_COMMIT_TIMESTAMP%\"\n\n  matrix:\n  - job_name: Windows-x64-Debug\n    configuration: Debug\n    BUILD_DIR: Debug x64\n\n  - job_name: Windows-x86\n    configuration: Release\n    BUILD_DIR: Release x86\n\n  - job_name: Windows-x64\n    configuration: Release\n    BUILD_DIR: Release x64\n\nmatrix:\n  exclude:\n    - image: Visual Studio 2017\n      configuration: Release\n    - image: Visual Studio 2019\n      configuration: Debug\n\nbuild:\n  project: '%BUILD_DIR%\\Cuberite.sln'\n  parallel: true\n  verbosity: minimal\n\npull_requests:\n  do_not_increment_build_number: true\n\ninstall:\n- git submodule update --init\n- if not exist \"%BUILD_DIR%\" mkdir \"%BUILD_DIR%\"\n- cd \"%BUILD_DIR%\"\n\nfor:\n##############################\n# Windows 64-bit debug build #\n##############################\n-\n  matrix:\n    only:\n      - job_name: Windows-x64-Debug\n\n  before_build:\n  # TODO: re-add -DSELF_TEST=YES -DBUILD_TOOLS=YES once PCH for tools enabled (too slow otherwise)\n  - cmake -G \"Visual Studio 15 2017\" -DSELF_TEST=No -DBUILD_TOOLS=No ..\n\n################################\n# Windows 32-bit release build #\n################################\n-\n  matrix:\n    only:\n      - job_name: Windows-x86\n\n  before_build:\n  - cmake -G \"Visual Studio 16 2019\" -A \"Win32\" ..\n\n################################\n# Windows 64-bit release build #\n################################\n-\n  matrix:\n    only:\n      - job_name: Windows-x64\n\n  before_build:\n  - cmake -G \"Visual Studio 16 2019\" -A \"x64\" ..\n\n###########################################\n# Cache for speeding up subsequent builds #\n###########################################\ncache:\n  - '%BUILD_DIR%\\CMakeCache.txt'\n\n#####################\n# Package artifacts #\n#####################\nafter_build:\n- cd Server\n- Install\\PackWindowsExecutables.cmd\n"
        },
        {
          "name": "cibuild.sh",
          "type": "blob",
          "size": 1.8017578125,
          "content": "#!/usr/bin/env bash\n\nset -e\n\nexport CUBERITE_BUILD_SERIES_NAME=\"CI $CC $CI_CUBERITE_BUILD_TYPE\"\nexport CUBERITE_BUILD_ID=$CI_JOB_NUMBER\nexport CUBERITE_BUILD_DATETIME=`date`\n\n# Use ccache if available\nif [ `which ccache` ]; then\n\t# Re-run compile on pre-processed sources on cache miss\n\t# \"It's slower actually, but clang builds fail without it.\"\n\texport CCACHE_CPP2=true\n\n\t# Tell CMake of ccache's existence\n\tCACHE_ARGS=\"-DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache\"\n\n\techo \"Using ccache installed at $(which ccache)\"\n\tccache --max-size=1G\n\tccache --zero-stats\nfi\n\nworkdir=\"$CC\"_\"$CI_CUBERITE_BUILD_TYPE\"\nmkdir \"$workdir\"\ncd \"$workdir\"\n\n# Work around a Clang + ccache issue with failing builds by disabling\n# precompiled headers. Turn off LTO for faster build speeds\ncmake .. -DCMAKE_BUILD_TYPE=${CI_CUBERITE_BUILD_TYPE} \\\n        -DBUILD_TOOLS=Yes \\\n        -DPRECOMPILE_HEADERS=No \\\n        -DSELF_TEST=Yes \\\n        -DUNITY_BUILDS=${CI_CUBERITE_UNITY_BUILDS-Yes} \\\n        -DWHOLE_PROGRAM_OPTIMISATION=No \\\n        ${CACHE_ARGS};\n\necho \"Building...\"\ncmake --build . --parallel 3;\n\nif [ `which ccache` ]; then\n\techo \"Built with ccache, outputting cache stats...\"\n\tccache --show-stats --verbose\nfi\n\necho \"Testing...\"\nctest --output-on-failure --parallel 2;\n\ncd Server/;\ntouch apiCheckFailed.flag\nif [ \"$CI_CUBERITE_BUILD_TYPE\" != \"COVERAGE\" ]; then\n\t./Cuberite <<- EOF\n\t\tload APIDump\n\t\tapi\n\t\tapicheck\n\t\trestart\n\t\tstop\n\tEOF\n\tif [ -f ./NewlyUndocumented.lua ]; then\n\t\techo \"ERROR: Newly undocumented API symbols found:\"\n\t\tcat ./NewlyUndocumented.lua\n\t\texit 1\n\tfi\n\tif [ -f ./DuplicateDocs.txt ]; then\n\t\techo \"ERROR: API documentation has duplicate symbol warnings:\"\n\t\tcat ./DuplicateDocs.txt\n\t\texit 1\n\tfi\n\tif [ -f ./apiCheckFailed.flag ]; then\n\t\techo \"ERROR: API check has failed with an unknown error\"\n\t\texit 1\n\tfi\nfi\n"
        },
        {
          "name": "clang-tidy.sh",
          "type": "blob",
          "size": 0.8310546875,
          "content": "#!/bin/sh\n\nset -e\n\nLOCALSTRING=\"local\"\n\nif [ \"$3\" = \"$LOCALSTRING\" ]; then\n  REGEX=\"/cuberite/src/\\.?[^\\.]\"\nelse\n  REGEX=\"cuberite_[^/\\.]+/src/\\.?[^\\.]\"\nfi\n\nFIXES_FILE=\"tidy-fixes.yaml\"\nARGS=\"-header-filter $REGEX -quiet -export-fixes $FIXES_FILE $* $REGEX\"\n\n# Generate the compilation database\nmkdir -p tidy-build\ncd tidy-build\n\n# Disable precompiled headers since they aren't generated during linting which causes an error\n# Disable unity builds since clang-tidy needs the full list of compiled files to check each one\ncmake --target Cuberite -DCMAKE_EXPORT_COMPILE_COMMANDS=Yes -DPRECOMPILE_HEADERS=No -DUNITY_BUILDS=No ..\n\n# Ensure LuaState_Typedefs.inc has been generated\n(cd ../src/Bindings && lua BindingsProcessor.lua)\n\nif run-clang-tidy $ARGS; then\n\techo \"clang-tidy: No violations found\"\nelse\n\techo \"clang-tidy: Found violations\"\n\texit 1\nfi\n"
        },
        {
          "name": "cloc-exclude.txt",
          "type": "blob",
          "size": 0.1162109375,
          "content": "lib\nTools\nTests\nsrc/Bindings/docs\nsrc/Bindings/Bindings.cpp\nsrc/Bindings/Bindings.h\ndoxy\ndev-docs\nServer\nInstall\nbuild\n"
        },
        {
          "name": "compile.sh",
          "type": "blob",
          "size": 14.37890625,
          "content": "#!/bin/sh\n#|| goto :windows_detected\n{ # put the whole thing in a block so as not to behave weirdly if interrupted\nset -e\n\n# Global variables:\n# CHOICE_BUILDTYPE  - Either \"Release\" or \"Debug\".\n# CHOICE_THREADS    - A numerical value, the amount of threads to be used for the make command.\n# CHOICE_BRANCH     - The branch to use. Currently locked on \"master\".\n# STATE_INTERACTIVE - 1 If we're running interactively. 0 otherwise.\n# STATE_NEW         - Whether this is the first run. If 1, then no GIT repo exists yet. 0 otherwise.\n\n# Constants:\nDEFAULT_BUILDTYPE=\"Release\" # Other options: \"Debug\"\nDEFAULT_BRANCH=\"master\"     # Other options: None currently\nDEFAULT_THREADS=1\n\n# Constants not modifiable through command line:\nUPSTREAM_REPO=\"origin\"\nUPSTREAM_LINK=\"https://github.com/cuberite/cuberite.git\"\n\n#=================== Error functions ===================\n\n\nerrorCompile ()\n{\n\techo\n\techoInt \"-----------------\"\n\techo \"Compilation failed. Failed command:\"\n\techo \"$@\"\n\texit 1\n}\n\nerrorGit ()\n{\n\techo\n\techoInt \"-----------------\"\n\techo \"Code fetch failed. (Check your network connection). Failed command:\"\n\techo \"$@\"\n\texit 2\n}\n\nerrorDependencies ()\n{\n\t# The error messages are complex and OS-dependant, and are printed in the dependencies section before this is called.\n\texit 3\n}\n\nerrorArguments ()\n{\n\techo \"Usage: ./compile.sh [options]\"\n\techo \"Compiles Cuberite. Updates the GIT repository if needed, and downloads it if it does not exist.\"\n\techo \"Runs interactively, unless one or more options are specified.\"\n\techo\n\techo \"options:\"\n\techo \"  -m  The compilation mode. Either \\\"Release\\\" or \\\"Debug\\\". Defaults to \\\"$DEFAULT_BUILDTYPE\\\"\"\n\techo '  -t  The number of threads to use for compiling'\n\techo \"      If unspecified, a default of $DEFAULT_THREADS threads is used. The special value AUTO attempts to set the number of\"\n\techo '      compilation threads equal to the number of CPU threads.'\n\techo '  -b  The branch to compile. (Currently unused and pinned to MASTER)'\n\techo '  -n yes: Prevent interactive mode. Unnecessary in combination with other arguments.'\n\techo '          Use without any other argument to build with the default settings.'\n\techo '  -d yes: Dry run. Print the chosen settings and exit'\n\techo\n\techo \"Usage examples:\"\n\techo \"  ./compile.sh\"\n\techo \"  ./compile.sh -m Debug\"\n\techo \"  ./compile.sh -m Release -t 2\"\n\techo\n\techo \"Return codes: (non 0 returns are accompanied by useful stderr info)\"\n\techo \"0 - Success              - Success! Code was updated and compiled\"\n\techo \"1 - Compilation failed   - cmake, make, or source code issue\"\n\techo \"2 - Code fetch failed    - Network issue or, far more rarely, a git issue\"\n\techo \"3 - Dependencies missing - Some compilation tools are missing\"\n\techo \"4 - Bad arguments        - Bad commandline arguments were passed\"\n\techo \"5 - Bad user input       - Invalid user input in interactive mode\"\n\techo \"6 - other                - An error not listed above\"\n\texit 4\n}\n\nerrorInput ()\n{\n\techo\n\techoInt \"-----------------\"\n\techo \"Unrecognized user input\"\n\techo \"$@\"\n\texit 5\n}\n\nerrorOther ()\n{\n\techo\n\techoInt \"-----------------\"\n\techo \"$@\"\n\texit 6\n}\n\n\n#=================== Echo functions ===================\n\n\nechoInt () # echo only if interactive mode.\n{\n\tif [ $STATE_INTERACTIVE -eq 1 ]; then\n\t\techo \"$1\"\n\tfi\n}\n\nechoErr () # Echo to stderr.\n{\n\techo \"$1\" 1>&2\n}\n\n\n#=================== Commandline Parsing ===================\n\n\nSTATE_INTERACTIVE=1 # Interactive, unless one or more command line options are passed.\nwhile getopts \":m:t:b:d:n:\" name; do\n\tvalue=$OPTARG\n\tSTATE_INTERACTIVE=0\n\tcase \"$name\" in\n\tm)\n\t\tif [ ! -z \"$CHOICE_BUILDTYPE\" ]; then errorArguments; fi # Argument duplication.\n\t\tif [ \"$value\" = \"Debug\" ] || [ \"$value\" = \"Release\" ]; then\n\t\t\tCHOICE_BUILDTYPE=\"$value\"\n\t\telse\n\t\t\terrorArguments\n\t\tfi\n\t;;\n\tt)\n\t\tif [ ! -z \"$CHOICE_THREADS\" ]; then errorArguments; fi # Argument duplication.\n\t\tif [ \"$value\" -gt 0 ] 2>/dev/null || [ \"$value\" = \"AUTO\" ]; then # If a positive integer or the special value \"AUTO\".\n\t\t\tCHOICE_THREADS=\"$value\"\n\t\telse\n\t\t\terrorArguments\n\t\tfi\n\t;;\n\tb)\n\t\tif [ ! -z \"$CHOICE_BRANCH\" ]; then errorArguments; fi # Argument duplication.\n\t\tCHOICE_BRANCH=1 # Only used for dupe checking, overridden below.\n\t\techoErr \"Warning: The -b option is currently unused, it was ignored\"\n\t;;\n\td)\n\t\tif [ ! -z \"$DRY_RUN\" ]; then errorArguments; fi # Argument duplication.\n\t\tDRY_RUN=\"yes\"\n\t;;\n\tn)\n\t\tif [ \"$dummy\" = \"1\" ]; then errorArguments; fi # Argument duplication.\n\t\tdummy=1 # we just want to disable interactive mode, passing an argument already did this. No need to do anything.\n\t;;\n\t*)\n\t\terrorArguments\n\t;;\n\tesac\ndone\n\nif [ -z \"$DRY_RUN\" ]; then DRY_RUN=\"no\"; fi\n\n#=================== Dependency checks and greeting ===================\n\n\n# Do we already have a repo?\ncheckCuberiteDir ()\n{\n\t[ -d .git ] && [ -f easyinstall.sh ] && [ -f src/BlockArea.cpp ] # A good enough indicator that we're in the Cuberite git repo.\n}\n\nSTATE_NEW=1\nif checkCuberiteDir; then # Check if we're in the Cuberite directory...\n\tSTATE_NEW=0\nelif [ -d cuberite ]; then # If there's a directory named \"cuberite\"...\n\tcd cuberite\n\tif checkCuberiteDir; then # Check if we're in the Cuberite directory...\n\t\tSTATE_NEW=0\n\telse\n\t\terrorOther \"A directory is named 'cuberite' which has no Cuberite assets exists. Please run the script elsewhere or move/delete that directory.\"\n\tfi\n\nfi\n\nif [ $STATE_NEW -eq 0 ]; then\n\techoInt \"Cuberite repository detected. This should make the process faster, especially if you compiled before.\"\nfi\n\n# Echo: Greetings.\nechoInt \"\n\nHello, this script will download and compile Cuberite.\nOn subsequent runs, it will update Cuberite.\nThe compilation and download will occur in the current directory.\nIf you're updating, you should run: <Path to Cuberite>/compile.sh\nCompiling from source takes time, but it usually generates faster\nexecutables. If you prefer ready-to-use binaries or if you want\nmore info, please visit:  https://cuberite.org/\"\n\ndoDependencyCheck()\n{\n\tMISSING_PACKAGES=\"\"\n\n\t# Most distros have the following default compiler names.\n\tGCC_EXE_NAME=\"g++\"\n\tCLANG_EXE_NAME=\"clang\"\n\tCOMPILER_PACKAGE_NAME=\"gcc g++\"\n\n\t# Most distros have the following package and executable names.\n\t# Left side: Executable Name, Right side: Package Name. Note that this is SPACE delimited now, unlike in the past.\n\tPROGRAMS='git git\n\tmake make\n\tcmake cmake'\n\n\t# If any OS deviates from the defaults, we detect the OS here, and change PROGRAMS, COMPILER_PACKAGE_NAME, etc. as needed.\n\n\t# Fedora, CentOS, RHEL, Mageia, openSUSE, Mandriva.\n\tif (rpm --help > /dev/null 2> /dev/null); then\n\t\tCOMPILER_PACKAGE_NAME=\"gcc-c++\"\n\tfi\n\n\t# Make sure at least one compiler exists.\n\tGCC_EXISTS=0\n\tCLANG_EXISTS=0\n\t$GCC_EXE_NAME --help > /dev/null 2> /dev/null && GCC_EXISTS=1\n\t$CLANG_EXE_NAME --help > /dev/null 2> /dev/null && CLANG_EXISTS=1\n\tif [ \"$GCC_EXISTS\" -eq 0 ] && [ \"$CLANG_EXISTS\" -eq 0 ]; then\n\t\tMISSING_PACKAGES=\" $COMPILER_PACKAGE_NAME\"\n\tfi\n\n\t# Depdendency check.\n\tcheckPackages ()\n\t{\n\t\techo \"$PROGRAMS\" | while read line; do\n\t\t\tEXE_NAME=`echo \"$line\" | cut -f 1 -d \" \"`\n\t\t\tPACKAGE_NAME=`echo \"$line\" | cut -f 2 -d \" \"`\n\t\t\tcommand -v $EXE_NAME > /dev/null 2> /dev/null || printf %s \" $PACKAGE_NAME\"\n\t\tdone\n\t}\n\tMISSING_PACKAGES=\"$MISSING_PACKAGES`checkPackages`\"\n\tmissingDepsExit ()\n\t{\n\t\tif [ \"$1\" != \"\" ]; then\n\t\t\techoErr \"You can install the missing depndencies via:\"\n\t\t\techoErr \"$1\"\n\t\tfi\n\t\techoErr\n\t\techoErr \"Please install the dependencies, then come back.\"\n\t\techoErr\n\t\terrorDependencies\n\t}\n\n\tif [ \"$MISSING_PACKAGES\" != \"\" ]; then\n\t\techoInt\n\t\techoInt \"-----------------\"\n\t\techoErr \"You have missing compilation dependencies:\"\n\t\techoErr $MISSING_PACKAGES\n\t\techoErr\n\n\t\t# apt-get guide.\n\t\tapt-get --help > /dev/null 2> /dev/null && \\\n\t\tmissingDepsExit \"apt-get install$MISSING_PACKAGES\"\n\n\t\t# dnf guide.\n\t\tdnf --help > /dev/null 2> /dev/null && \\\n\t\tmissingDepsExit \"dnf install$MISSING_PACKAGES\"\n\n\t\t# zypper guide.\n\t\tzypper --help > /dev/null 2> /dev/null && \\\n\t\tmissingDepsExit \"zypper install$MISSING_PACKAGES\"\n\n\t\t# pacman guide.\n\t\tpacman --help > /dev/null 2> /dev/null && \\\n\t\tmissingDepsExit \"pacman -S$MISSING_PACKAGES\"\n\n\t\t# urpmi guide.\n\t\turpmi --help > /dev/null 2> /dev/null && \\\n\t\tmissingDepsExit \"urpmi$MISSING_PACKAGES\"\n\n\t\tmissingDepsExit \"\"\n\tfi\n}\ndoDependencyCheck\n\n\n#=================== Choice: Branch (Currently unused and simply skipped) ===================\n\n\n# Bypass Branch choice and choose master. Because it's the only branch right now.\nCHOICE_BRANCH=$DEFAULT_BRANCH\n\n### Inactive code start. ###\ninactiveCode ()\n{\n\necho \"\nYou can choose between 3 branches:\n* (S)Stable:   Choose the stable branch if you want the most\n               reliable server.\n\n* (T)Testing:  The testing branch is less stable,\n               but using it and reporting bugs helps us a lot!\n\n* (D)Dev:      The least stable of the three. (Master branch)\n               Choose the development branch if you want to try new,\n               bleeding-edge features.\n\"\n\n\nprintf %s \"Choose the branch (s/t/d): \"\nread CHOICE_BRANCH\ncase $CHOICE_BRANCH in\n\ts|S)\n\t\terrorOther \"We don't have a stable branch yet, please use testing, sorry.\"\n\t\t;;\n\tt|T)\n\t\tCHOICE_BRANCH=\"testing\"\n\t\t;;\n\td|D)\n\t\tCHOICE_BRANCH=\"master\"\n\t\t;;\n\t*)\n\t\terrorInput\n\t\t;;\nesac\n\n}\n### Inactive code end. ###\n\n\n#=================== Choice: Compile mode ===================\n\n\nif [ $STATE_INTERACTIVE -eq 1 ]; then\n\techo \"\n\tChoose compile mode:\n\t* (R)Release: Compiles normally.\n\t\t      Generates the fastest build.\n\n\t* (D)Debug:   Compiles in debug mode.\n\t\t      Makes your console and crashes more verbose.\n\t\t      A bit slower than Release mode. If you plan to help\n\t\t      development by reporting bugs, this is preferred.\n\n\t\"\n\n\tprintf %s \"Choose compile mode: (r/d) (Default: \\\"$DEFAULT_BUILDTYPE\\\"): \"\n\tread CHOICE_BUILDTYPE\n\tcase $CHOICE_BUILDTYPE in\n\t\td|D)\n\t\t\tCHOICE_BUILDTYPE=\"Debug\"\n\t\t\t;;\n\t\tr|N)\n\t\t\tCHOICE_BUILDTYPE=\"Release\"\n\t\t\t;;\n\tesac\nfi\n\nif [ -z \"$CHOICE_BUILDTYPE\" ]; then # No buildtype specified.\n\tCHOICE_BUILDTYPE=\"$DEFAULT_BUILDTYPE\"\nfi\n\n\n#=================== Choice: Thread amount ===================\n\n\n\nnumberOfThreads()\n{\n\tKERNEL=`uname -s`\n\n\tif [ \"$KERNEL\" = \"Linux\" ] || [ \"$KERNEL\" = \"Darwin\" ]; then\n\t\techo `getconf _NPROCESSORS_ONLN`\n\telif [ \"$KERNEL\" = \"FreeBSD\" ]; then\n\t\techo `getconf NPROCESSORS_ONLN`\n\telse\n\t\techo \"unknown\"\n\tfi\n}\n\nCPU_THREAD_COUNT=`numberOfThreads`\n\nif [ $STATE_INTERACTIVE -eq 1 ]; then\n\techo \"\"\n\techo \"Choose the number of compilation threads.\"\n\n\tif [ \"$CPU_THREAD_COUNT\" = \"unknown\" ]; then\n\t\techo \"Could not detect the number of CPU threads.\"\n\telif [ \"$CPU_THREAD_COUNT\" -eq 1 ]; then\n\t\techo \"You have 1 thread.\"\n\telse\n\t\techo \"You have $CPU_THREAD_COUNT CPU threads.\"\n\tfi\n\n\techo \"If you have enough RAM, it is wise to choose your CPU's thread count. \"\n\techo \"Otherwise choose lower. Old Raspberry Pis should choose 1. If in doubt, choose 1.\"\n\tprintf %s \"Please enter the number of compilation threads to use (Default: $DEFAULT_THREADS): \"\n\tread CHOICE_THREADS\nfi\n\nif [ -z \"$CHOICE_THREADS\" ] 2> /dev/null; then\n\tCHOICE_THREADS=\"$DEFAULT_THREADS\"\nelif [ \"$CHOICE_THREADS\" = \"AUTO\" ] 2> /dev/null; then\n\tif [ $CPU_THREAD_COUNT = \"unknown\" ]; then\n\t\tCHOICE_THREADS=\"$DEFAULT_THREADS\"\n\t\techo \"WARNING: could not detect number of threads. Using the default ($DEFAULT_THREADS) .\" >&2\n\telse\n\t\tCHOICE_THREADS=\"$CPU_THREAD_COUNT\"\n\tfi\nelif [ \"$CHOICE_THREADS\" -lt 0 ] 2> /dev/null; then\n\terrorInput\nfi\n\n#=================== Print settings summary  ===================\n\n\nif [ \"$STATE_NEW\" = 1 ]; then\n\tpreviousCompilation=\"Not detected. We are assuming this is the first compile.sh run.\"\nelse\n\tpreviousCompilation=\"Detected. This should make fetching and compiling faster.\"\nfi\n\nTHREAD_WARNING=\"\"\nif [ \"$CPU_THREAD_COUNT\" != \"unknown\" ] && [ \"$CPU_THREAD_COUNT\" -lt \"$CHOICE_THREADS\" ]; then\n\tTHREAD_WARNING=\" - Warning: More threads assigned than there are CPU threads.\"\nfi\n\necho \"\"\nechoInt \"#### Settings Summary ####\"\necho \"Build Type:           \" \"$CHOICE_BUILDTYPE\"\necho \"Branch:               \" \"$CHOICE_BRANCH\" \"(Currently the only choice)\"\necho \"Compilation threads:  \" \"$CHOICE_THREADS$THREAD_WARNING\"\necho \"CPU Threads:          \" \"$CPU_THREAD_COUNT\"\necho \"Previous compilation: \" \"$previousCompilation\"\necho \"Upstream Link:        \" \"$UPSTREAM_LINK\"\necho \"Upstream Repo:        \" \"$UPSTREAM_REPO\"\n\nif [ \"$DRY_RUN\" = \"yes\" ]; then\n\techo \"This is a dry run. Exiting now.\"\n\texit 0;\nfi\n\n# Ask the user's permission to connect to the net.\nif [ $STATE_INTERACTIVE -eq 1 ]; then\n\techo\n\techo \"After pressing ENTER, the script will connect to $UPSTREAM_LINK\"\n\techo \"to check for updates and/or fetch code. It will then compile your program.\"\n\techo \"If you compiled before, make sure you're in the proper directory and that \\\"Previous compilation\\\" is detected.\"\n\tprintf $s \"Press ENTER to continue... \"\n\tread dummy\nfi\n\n\n#=================== Code download / update via git ===================\n\n\nechoInt\nechoInt \" --- Downloading Cuberite's source code from the $CHOICE_BRANCH branch...\"\n\n\nif [ $STATE_NEW -eq 1 ]; then\n\t# Git: Clone.\n\techo \" --- Looks like your first run, cloning the whole code...\"\n\tgit clone  --depth 1 \"$UPSTREAM_LINK\" -b \"$CHOICE_BRANCH\" || errorGit \"git clone  --depth 1 $UPSTREAM_LINK -b $CHOICE_BRANCH\"\n\tcd cuberite\nelse\n\t# Git: Fetch.\n\techo \" --- Updating the $CHOICE_BRANCH branch...\"\n\tgit fetch \"$UPSTREAM_REPO\" \"$CHOICE_BRANCH\" || errorGit \"git fetch $UPSTREAM_REPO $CHOICE_BRANCH\"\n\tgit checkout \"$CHOICE_BRANCH\" || errorGit \"git checkout $CHOICE_BRANCH\"\n\tgit merge \"$UPSTREAM_REPO\"/\"$CHOICE_BRANCH\" || errorGit \"git merge $UPSTREAM_REPO/$CHOICE_BRANCH\"\nfi\n\n# Git: Submodules.\necho \" --- Updating submodules...\"\ngit submodule sync\ngit submodule update --init\n\n\n#=================== Compilation via cmake and make ===================\n\n\n# Cmake.\necho \" --- Running cmake...\"\nif [ ! -d build-cuberite ]; then mkdir build-cuberite; fi\ncd build-cuberite\ncmake .. -DCMAKE_BUILD_TYPE=\"$CHOICE_BUILDTYPE\" || errorCompile \"cmake .. -DCMAKE_BUILD_TYPE=$CHOICE_BUILDTYPE\"\n\n\n# Make.\necho \" --- Compiling...\"\nmake -j \"$CHOICE_THREADS\" || errorCompile \"make -j $CHOICE_THREADS\"\necho\n\n\n#=================== Print success message ===================\n\n\ncd Server\necho\necho \"-----------------\"\necho \"Compilation done!\"\necho\necho \"Cuberite awaits you at:\"\necho \"$PWD/Cuberite\"\n\ncd ../..\necho \"\nYou can always update Cuberite by executing:\n$PWD/compile.sh\n\nEnjoy :)\"\nexit 0\n\n\n#=================== Windows fallback ===================\n\n\n# Called via hack in line 2.\n:windows_detected\n@echo off\ncls\necho This script is not available for Windows yet, sorry.\necho You can still download the Windows binaries from: https://cuberite.org/\necho You can also manually compile for Windows. See: https://github.com/cuberite/cuberite\nrem windows_exit\ngoto :EOF\n}\n"
        },
        {
          "name": "dev-docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "easyinstall.sh",
          "type": "blob",
          "size": 1.439453125,
          "content": "#!/bin/sh\n\n{\n# NOTE: compile.sh looks for this file in order to determine if this is the Cuberite folder.\n# Please modify compile.sh if you want to rename or remove this file.\n# This file was chosen arbitrarily and it is a good enough indicator that we are in the Cuberite folder.\n\nset -e\n\nKERNEL=$(uname -s)\n\necho \"Identifying kernel: $KERNEL\"\n\nif [ \"$KERNEL\" = \"Linux\" ]; then\n\tPLATFORM=$(uname -m)\n\n\techo \"Identifying platform: $PLATFORM\"\n\n\tcase $PLATFORM in\n\t\t\"i686\") DOWNLOADURL=\"https://download.cuberite.org/linux-i686/Cuberite.tar.gz\" ;;\n\t\t\"x86_64\") DOWNLOADURL=\"https://download.cuberite.org/linux-x86_64/Cuberite.tar.gz\" ;;\n\t\t# Assume that all arm devices are a raspi for now.\n\t\tarm*) DOWNLOADURL=\"https://download.cuberite.org/linux-armhf-raspbian/Cuberite.tar.gz\" ;;\n\t\t# Allow install on Raspberry Pi 4 Ubuntu x64 (AArch64) using the ARM builds.\n\t\t\"aarch64\") DOWNLOADURL=\"https://download.cuberite.org/linux-aarch64/Cuberite.tar.gz\"\n\tesac\nelif [ \"$KERNEL\" = \"Darwin\" ]; then\n\t# All Darwins we care about are x86_64\n\tDOWNLOADURL=\"https://download.cuberite.org/darwin-x86_64/Cuberite.tar.gz\"\n#elif [ \"$KERNEL\" = \"FreeBSD\" ]; then\n#\tDOWNLOADURL=\"https://builds.cuberite.org/job/Cuberite%20FreeBSD%20x64%20Master/lastSuccessfulBuild/artifact/Cuberite.tar.gz\"\nelse\n\techo \"Unsupported kernel.\"\n\texit 1\nfi\n\necho \"Downloading precompiled binaries.\"\ncurl -Ls $DOWNLOADURL | tar -xzf -\necho \"Done.\"\n\necho \"Cuberite is now installed, run using 'cd Server; ./Cuberite'.\"\n\n}\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "nightlybuild.sh",
          "type": "blob",
          "size": 1.77734375,
          "content": "#!/usr/bin/env bash\n\nset -ex\n\n# Parse arguments.\nwhile [[ $# -gt 1 ]]\ndo\nkey=\"$1\"\ncase $key in\n    -s|--server-name)\n    SERVERNAME=\"$2\"\n    shift\n    ;;\n    -t|--target)\n    TARGET=\"$2\"\n    shift\n    ;;\n    -c|--compiler)\n    CCOMP=\"$2\"\n    shift\n    ;;\n    -cxx|--cxx-compiler)\n    CXXCOMP=\"$2\"\n    shift\n    ;;\n    -m|--compile-mode)\n    COMPILEMODE=\"-DCMAKE_BUILD_TYPE=$2\"\n    shift\n    ;;\n    -n|--build-number)\n    BUILDID=\"$2\"\n    shift\n    ;;\n    -p|--toolchain-file)\n    TOOLCHAINFILE=\"-DCMAKE_TOOLCHAIN_FILE=$2\"\n    shift\n    ;;\n    -b|--branch)\n    BRANCH=\"$2\"\n    shift\n    ;;\n    -32|--force-32)\n    FORCE32=\"-DFORCE_32=$2\"\n    shift\n    ;;\n    *)\n    ;;\nesac\nshift\ndone\n\ngit submodule update --init\n\n# Set up build information.\nexport CUBERITE_BUILD_SERIES_NAME=\"$SERVERNAME $TARGET $COMPILEMODE ($BRANCH)\"\nexport CUBERITE_BUILD_ID=\"$BUILDID\"\nexport CUBERITE_BUILD_DATETIME=\"`date`\"\n\nif [ -x \"$(command -v ccache)\" ]\nthen\n\texport CCACHE_CPP2=true\n\tCACHE_ARGS=\"-DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache\"\nfi\n\n# Build\nCXX=$CXXCOMP CC=$CCOMP cmake . -DNO_NATIVE_OPTIMIZATION=1 ${CACHE_ARGS} ${TOOLCHAINFILE} ${COMPILEMODE} ${FORCE32}\nmake -j 4\n\n\n# Package Server\necho Cuberite \"$CUBERITE_BUILD_SERIES_NAME-$CUBERITE_BUILD_ID\\n$BUILD_URL\" > Server/buildinfo.txt\n\n# h: dereference (archive file/folder instead of symlink)\n# z: gzip (compress)\n# c: create\n# v: verbose\n# T: files-from (list of server files accepted for release archives)\n# f: file (output file location)\npushd Server\ntar -hzcv --exclude .git -T Install/UnixExecutables.list -f ../Cuberite.tar.gz\npopd\nsha1sum Cuberite.tar.gz > Cuberite.tar.gz.sha1\n\n# Package ProtoProxy\n# This tool is very out of date, uncomment when it's being worked on again\n# pushd Tools/ProtoProxy\n# sha1sum ProtoProxy > ProtoProxy.sha1\n# popd\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "stats.cmd",
          "type": "blob",
          "size": 0.140625,
          "content": "cloc --by-file-by-lang --exclude-dir=lib --exclude-list-file=cloc-exclude.txt --xml --xsl=1 --report-file=cloc.xml --ignored=cloc-ignored.txt .\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}