{
  "metadata": {
    "timestamp": 1736566184654,
    "page": 193,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "halide/Halide",
      "stars": 5945,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.076171875,
          "content": "---\nAccessModifierOffset: -4\nAlignEscapedNewlines: Left\nAlignTrailingComments:\n  Kind: Always\n  OverEmptyLines: 0\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: Empty\nAllowShortFunctionsOnASingleLine: None\nAllowShortIfStatementsOnASingleLine: Always\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakBeforeMultilineStrings: false\nBinPackParameters: true\nBreakAfterReturnType: Automatic\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeTernaryOperators: false\nBreakConstructorInitializers: BeforeColon\nBreakTemplateDeclarations: Yes\nColumnLimit: 0\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nIndentCaseLabels: false\nIndentWidth: 4\nIndentWrappedFunctionNames: false\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nPackConstructorInitializers: BinPack\nPointerAlignment: Right\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpacesBeforeTrailingComments: 2\nSpacesInAngles: Never\nSpacesInParens: Never\nStandard: c++17\nTabWidth: 8\nUseTab: Never\n...\n"
        },
        {
          "name": ".clang-format-ignore",
          "type": "blob",
          "size": 0.3955078125,
          "content": "# .clang-format-ignore\n./bin\n./build\n./cmake_build\n./cmake_build_static\n./cmake_build_shared\n./distrib\n./doc\n./include\n./lib\n# Our tutorials have special formatting: skip them\n./tutorial\n# hexagon_remote/bin/src is also special\n./src/runtime/hexagon_remote/bin/src\n# mini_webgpu.h is copied from upstream with some local mods\n./src/runtime/mini_webgpu.h\n./dependencies/spirv\n./dependencies/vulkan\n*.fbs.h\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 7.673828125,
          "content": "# TODO: some of the blocklisted bugprone checks can/should be re-enabled\n# one at a time (with careful code fixes made as necessary).\n\n---\nChecks: >\n    -*,\n\n    # For reasons that aren't clear, clang-tidy-16 will apparently\n    # ignore disable-check requests if they were already enabled\n    # by a glob, so we will individually enumerate all the ones we want (or don't want).\n    # bugprone-*,\n    bugprone-argument-comment,\n    bugprone-assert-side-effect,\n    -bugprone-assignment-in-if-condition,\n    bugprone-bad-signal-to-kill-thread,\n    bugprone-bool-pointer-implicit-conversion,\n    -bugprone-branch-clone,\n    bugprone-copy-constructor-init,\n    bugprone-dangling-handle,\n    bugprone-dynamic-static-initializers,\n    -bugprone-easily-swappable-parameters,\n    -bugprone-empty-catch,\n    -bugprone-exception-escape,\n    bugprone-fold-init-type,\n    bugprone-forward-declaration-namespace,\n    bugprone-forwarding-reference-overload,\n    -bugprone-implicit-widening-of-multiplication-result,\n    bugprone-inaccurate-erase,\n    bugprone-incorrect-roundings,\n    bugprone-infinite-loop,\n    -bugprone-integer-division,\n    bugprone-lambda-function-name,\n    bugprone-macro-parentheses,\n    bugprone-macro-repeated-side-effects,\n    bugprone-misplaced-operator-in-strlen-in-alloc,\n    bugprone-misplaced-pointer-arithmetic-in-alloc,\n    bugprone-misplaced-widening-cast,\n    bugprone-move-forwarding-reference,\n    bugprone-multiple-new-in-one-expression,\n    bugprone-multiple-statement-macro,\n    -bugprone-narrowing-conversions,\n    bugprone-non-zero-enum-to-bool-conversion,\n    bugprone-no-escape,\n    bugprone-not-null-terminated-result,\n    bugprone-parent-virtual-call,\n    bugprone-posix-return,\n    bugprone-redundant-branch-condition,\n    -bugprone-reserved-identifier,\n    bugprone-shared-ptr-array-mismatch,\n    bugprone-signal-handler,\n    -bugprone-signed-char-misuse,\n    bugprone-sizeof-container,\n    bugprone-sizeof-expression,\n    bugprone-spuriously-wake-up-functions,\n    bugprone-standalone-empty,\n    bugprone-string-constructor,\n    bugprone-string-integer-assignment,\n    bugprone-string-literal-with-embedded-nul,\n    bugprone-stringview-nullptr,\n    bugprone-suspicious-enum-usage,\n    bugprone-suspicious-include,\n    bugprone-suspicious-memory-comparison,\n    bugprone-suspicious-memset-usage,\n    bugprone-suspicious-missing-comma,\n    bugprone-suspicious-realloc-usage,\n    bugprone-suspicious-semicolon,\n    bugprone-suspicious-string-compare,\n    bugprone-swapped-arguments,\n    bugprone-switch-missing-default-case,\n    bugprone-terminating-continue,\n    bugprone-throw-keyword-missing,\n    bugprone-too-small-loop-variable,\n    -bugprone-unchecked-optional-access, # Too many false-positives\n    bugprone-undefined-memory-manipulation,\n    bugprone-undelegated-constructor,\n    bugprone-unhandled-exception-at-new,\n    bugprone-unhandled-self-assignment,\n    bugprone-unique-ptr-array-mismatch,\n    bugprone-unsafe-functions,\n    bugprone-unused-raii,\n    bugprone-unused-return-value,\n    bugprone-use-after-move,\n    bugprone-virtual-near-miss,\n\n    clang-diagnostic-shadow-field,\n\n    cppcoreguidelines-avoid-capturing-lambda-coroutines,\n    cppcoreguidelines-misleading-capture-default-by-value,\n    -cppcoreguidelines-missing-std-forward,  # TODO: consider enabling\n    cppcoreguidelines-rvalue-reference-param-not-moved,\n\n    misc-confusable-identifiers,\n    -misc-const-correctness,\n    misc-definitions-in-headers,\n    misc-header-include-cycle,\n    -misc-include-cleaner,\n    misc-misleading-bidirectional,\n    misc-misleading-identifier,\n    misc-misplaced-const,\n    misc-new-delete-overloads,\n    -misc-no-recursion,\n    misc-non-copyable-objects,\n    -misc-non-private-member-variables-in-classes,\n    misc-redundant-expression,\n    misc-static-assert,\n    misc-throw-by-value-catch-by-reference,\n    -misc-unconventional-assign-operator,\n    misc-uniqueptr-reset-release,\n    misc-unused-alias-decls,\n    -misc-unused-parameters,\n    misc-unused-using-decls,\n    misc-use-anonymous-namespace,\n\n    -modernize-avoid-bind,\n    -modernize-avoid-c-arrays,\n    -modernize-concat-nested-namespaces,\n    modernize-deprecated-headers,\n    -modernize-deprecated-ios-base-aliases,\n    -modernize-loop-convert,\n    -modernize-macro-to-enum,\n    modernize-make-shared,\n    modernize-make-unique,\n    -modernize-pass-by-value,\n    -modernize-raw-string-literal,\n    modernize-redundant-void-arg,\n    -modernize-replace-auto-ptr,\n    -modernize-replace-disallow-copy-and-assign-macro,\n    -modernize-replace-random-shuffle,\n    -modernize-return-braced-init-list,\n    -modernize-shrink-to-fit,\n    -modernize-type-traits,\n    -modernize-unary-static-assert,\n    -modernize-use-auto,\n    modernize-use-bool-literals,\n    modernize-use-default-member-init,\n    modernize-use-emplace,\n    modernize-use-equals-default,\n    modernize-use-equals-delete,\n    -modernize-use-nodiscard,\n    -modernize-use-noexcept,\n    modernize-use-nullptr,\n    modernize-use-override,\n    -modernize-use-std-print,\n    -modernize-use-trailing-return-type,\n    -modernize-use-transparent-functors,\n    -modernize-use-uncaught-exceptions,\n    -modernize-use-using,\n\n    performance-avoid-endl,\n    performance-faster-string-find,\n    performance-for-range-copy,\n    performance-implicit-conversion-in-loop,\n    performance-inefficient-algorithm,\n    -performance-inefficient-string-concatenation,\n    -performance-inefficient-vector-operation,\n    performance-move-const-arg,\n    performance-move-constructor-init,\n    performance-no-automatic-move,\n    -performance-no-int-to-ptr,\n    performance-noexcept-destructor,\n    performance-noexcept-move-constructor,\n    performance-noexcept-swap,\n    performance-trivially-destructible,\n    performance-type-promotion-in-math-fn,\n    performance-unnecessary-copy-initialization,\n    performance-unnecessary-value-param,\n\n    readability-avoid-const-params-in-decls,\n    -readability-avoid-unconditional-preprocessor-if,\n    readability-braces-around-statements,\n    readability-const-return-type,\n    -readability-container-contains,\n    -readability-container-data-pointer,\n    readability-container-size-empty,\n    -readability-convert-member-functions-to-static,\n    -readability-delete-null-pointer,\n    -readability-duplicate-include,\n    -readability-else-after-return,\n    -readability-function-cognitive-complexity,\n    -readability-function-size,\n    -readability-identifier-length,\n    -readability-identifier-naming,\n    -readability-implicit-bool-conversion,\n    -readability-inconsistent-declaration-parameter-name,\n    -readability-isolate-declaration,\n    -readability-magic-numbers,\n    -readability-make-member-function-const,\n    -readability-misleading-indentation,\n    readability-misplaced-array-index,\n    -readability-named-parameter,\n    -readability-non-const-parameter,\n    -readability-operators-representation,\n    readability-qualified-auto,\n    readability-redundant-access-specifiers,\n    readability-redundant-control-flow,\n    -readability-redundant-declaration,\n    readability-redundant-function-ptr-dereference,\n    -readability-redundant-member-init,\n    readability-redundant-preprocessor,\n    readability-redundant-smartptr-get,\n    readability-redundant-string-cstr,\n    -readability-redundant-string-init,\n    -readability-simplify-boolean-expr,\n    readability-simplify-subscript-expr,\n    readability-static-accessed-through-instance,\n    readability-static-definition-in-anonymous-namespace,\n    -readability-string-compare,\n    -readability-suspicious-call-argument,\n    -readability-uniqueptr-delete-release,\n    -readability-uppercase-literal-suffix,\n    -readability-use-anyofallof,\n\nWarningsAsErrors: '*'\nHeaderFilterRegex: '.*'\nFormatStyle: 'file'\nCheckOptions:\n    - key:   modernize-use-default-member-init.UseAssignment\n      value: 1\n...\n"
        },
        {
          "name": ".git_archival.txt",
          "type": "blob",
          "size": 0.099609375,
          "content": "node: $Format:%H$\nnode-date: $Format:%cI$\ndescribe-name: $Format:%(describe:tags=true,match=*[0-9]*)$\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4091796875,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\n* text=auto\n\n# Explicitly declare text files you want to always be normalized and converted\n# to native line endings on checkout.\n*.cpp text\n*.c text\n*.h text\n\n# Denote all files that are truly binary and should not be modified.\n*.png binary\n*.jpg binary\n*.tiff binary\n\n# Freeze version information in git archives\n.git_archival.txt export-subst\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.9521484375,
          "content": "# NOTE: one can debug these rules with the following commands:\n#\n# $ git clean -ffdx\n# $ find . -not -path './.git/*' | git check-ignore --stdin --no-index\n#\n# The first command will delete all files that are ignored by Git (be warned!).\n# The second command will print all files that are checked in, but _would be_\n# ignored under the rules in this file. Such files should either be explicitly\n# added to the exclusions at the bottom of this file, or the rule excluding them\n# should be refined.\n\n################################################################################\n## Exclude files without extensions\n\n*\n!*.*\n!*/\n\n################################################################################\n## Halide-specific exclusions\n\n# Images only allowed in apps and directories named \"images\"\n*.png\n!apps/**/*.png\n!**/images/**/*.png\n\n# Pre-trained weights only allowed in autoscheduler directories\n*.weights\n!src/autoschedulers/**/*.weights\n\n################################################################################\n## Halide-specific build artifacts\n\n# Apps\napps/*/*.def\napps/*/*.ptx\napps/*/*.sass\napps/*/*out*.png\napps/*/filter\napps/*/passes.txt\napps/HelloAndroidGL/jni/halide_gl_filter.h\n\n# Autoschedulers\n**/src/autoschedulers/adams2019/baseline.cpp\n**/src/autoschedulers/adams2019/cost_model.h\n**/src/autoschedulers/adams2019/demo.h\n**/src/autoschedulers/adams2019/included_schedule_file.h\n**/src/autoschedulers/adams2019/train_cost_model.h\n**/src/autoschedulers/li2018/demo_gradient.h\n\n# CMake configuration\nHalide-*-deps.cmake\n\n# Distribution headers\n**/include/Halide*.h\n**/include/wasm-rt*.h\n\n# Generator executables\n*.generator\n\n# Generator outputs\n*.bc\n*.featurization\n*.halide_compiler_log\n*.halide_generated.cpp\n*.ll\n*.py.cpp\n*.pytorch.h\n*.registration.cpp\n*.s\n*.schedule.h\n*.stmt\n*.stmt.html\n*.stub.h\n\n# Linker scripts\npy_*.ldscript*\n\n# Runtime modules\n_initmod*.cpp\n\n# Tests\n**/python_bindings/correctness/generators/*.h\n**/test/generator/*.h\ncompile_log.txt\nstderr.txt\nstdout.txt\n\n# Tutorials\n**/tutorial/auto_schedule_false.h\n**/tutorial/auto_schedule_true.h\n**/tutorial/brighten_either.h\n**/tutorial/brighten_interleaved.h\n**/tutorial/brighten_planar.h\n**/tutorial/brighten_specialized.h\n**/tutorial/lesson_10_halide.h\n**/tutorial/my_first_generator_win32.h\n**/tutorial/my_first_generator.h\n**/tutorial/my_second_generator_1.h\n**/tutorial/my_second_generator_2.h\n**/tutorial/my_second_generator_3.h\n\n# Tutorial images that were copied to the install tree\n**/tutorial/images/\n!tutorial/images/\n\n################################################################################\n## Common build artifacts\n\n# Directories\nbin/\ndistrib/\nlib/\nlib64/\nshare/\n\n# Binaries\n*.a\n*.cubin\n*.dll\n*.dylib\n*.exe\n*.lib\n*.o\n*.obj\n*.so\n*.so.*\na.out\n\n# Compiler intermediates / debugging info\n*.[ip]db\n*.[pg]ch\n*.d\n*.dSYM\n\n# Package files\n*.deb\n*.tar.gz\n*.tgz\n*.zip\n\n################################################################################\n## Temporary and swap files\n\ntemp/\ntmp/\n\n.*.swp\n.\\#*\n.DS_Store\n*.log\n*.tmp\n*.txt.user*\n*~\n\\#*\\#\n\n################################################################################\n## Python\n\n# Common virtual environment directory names\n.venv/\nvenv/\n\n# Python binary caches\n__pycache__\n*.py[cod]\n\n# Python package build artifacts\n*.egg-info/\n*.whl\nMANIFEST.in\ndist/\n\n################################################################################\n## CMake\n\n# User-specific configuration files\nCMakeUserPresets.json\n\n# Common build directory names\nbuild*/\ncmake[-_]build*/\n\n# Generated config files\n*-config-version.cmake\n*-config.cmake\n*Config.cmake\n*ConfigVersion.cmake\n\n# Build directory contents\n_deps/\n.cmake/\ncmake_install.cmake\nCMakeCache.txt\nCMakeFiles/\ncompile_commands.json\nCPack*.cmake\nCTest*.cmake\nCTest*.txt\ninstall_manifest.txt\n\n# Ninja files\n*.ninja*\n\n# Package managers\nvcpkg_installed/\n\n################################################################################\n## IDE directories and metadata\n\n# Visual Studio\n.vs/\nout/\n\nCMakeSettings.json\n\n# XCode\n*.xcworkspacedata\ntools/objc/*.mobileprovision\ntools/objc/BUILD\nxcuserdata\n\n# CLion\n.idea/\n\n# VSCode\n.vscode/\n\n# TextMate\n.tm_properties\n\n# Sublime Text\n.tags\n.tags_sorted_by_file\n*.sublime-*\n\n# Vim\n.clang_complete\n\n# NeoVim + clangd\n.cache\n\n# Emacs\ntags\nTAGS\n\n################################################################################\n## Halide-specific rule overrides\n\n# Allow particular extension-less files\n!gradlew\n!Makefile\n!packaging/ubuntu/changelog\n!packaging/ubuntu/copyright\n!packaging/ubuntu/triggers\n\n# Allow XCode PCHs in the HelloiOS app\n!apps/HelloiOS/**/*-Prefix.pch\n\n# Allow the runtime to have handwritten LLVM modules\n!src/runtime/*.ll\n\n# Allow precompiled Nvidia bitcode\n!src/runtime/nvidia_libdevice_bitcode/*.bc\n\n# Anything goes in the hexagon_remote binaries\n!src/runtime/hexagon_remote/**/*\n\n# TODO: should this be checked in?\n!src/autoschedulers/adams2019/included_schedule_file.schedule.h\n\n# TODO: these should become .cmake.in\n!packaging/common/HalideConfig.cmake\n!packaging/common/HalideHelpersConfig.cmake\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".lldbinit",
          "type": "blob",
          "size": 0.04296875,
          "content": "command script import ./tools/lldbhalide.py\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 11.5458984375,
          "content": "cmake_minimum_required(VERSION 3.28)\n\noption(Halide_USE_FETCHCONTENT \"When Halide is top-level, use FetchContent for build-time dependencies.\" ON)\nif (Halide_USE_FETCHCONTENT)\n    list(APPEND CMAKE_PROJECT_TOP_LEVEL_INCLUDES \"${CMAKE_CURRENT_LIST_DIR}/cmake/dependencies.cmake\")\nendif ()\n\n# TODO: remove this after updating build bots.\nif (NOT DEFINED VCPKG_OVERLAY_PORTS)\n    set(VCPKG_OVERLAY_PORTS \"${CMAKE_CURRENT_LIST_DIR}/cmake/vcpkg\")\nendif ()\n\n# TODO: remove this after updating build bots.\nif (NOT DEFINED VCPKG_MANIFEST_FEATURES)\n    set(VCPKG_MANIFEST_FEATURES developer)\nendif ()\n\nproject(Halide\n        VERSION 20.0.0\n        DESCRIPTION \"Halide compiler and libraries\"\n        HOMEPAGE_URL \"https://halide-lang.org\")\n\nenable_testing()\n\n##\n# Disable find_package(Halide) inside the build\n##\n\nfile(CONFIGURE OUTPUT \"${CMAKE_FIND_PACKAGE_REDIRECTS_DIR}/HalideConfig.cmake\"\n     CONTENT [[set(Halide_FOUND 1)\n               set(Halide_VERSION @Halide_VERSION@)]])\n\nfile(CONFIGURE OUTPUT \"${CMAKE_FIND_PACKAGE_REDIRECTS_DIR}/HalideHelpersConfig.cmake\"\n     CONTENT \"set(HalideHelpers_FOUND 1)\\n\")\n\n##\n# Set up project-wide properties\n##\n\n# Import useful standard modules\ninclude(CheckCXXSymbolExists)\n\n# Make our custom helpers available throughout the project via include().\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/cmake)\ninclude(BundleStatic)\ninclude(HalideFeatures)\ninclude(HalideGeneratorHelpers)\ninclude(HalidePackageConfigHelpers)\n\n# Build Halide as a shared lib by default, but still honor command-line settings.\noption(BUILD_SHARED_LIBS \"Build shared libraries\" ON)\n\n# Warn if the user did not set a build type and is using a single-configuration generator.\nget_property(IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif (NOT IS_MULTI_CONFIG AND NOT DEFINED CMAKE_BUILD_TYPE)\n    message(WARNING \"Single-configuration generators require CMAKE_BUILD_TYPE to be set.\")\nendif ()\n\n# Windows has file name length restrictions and lacks an RPATH mechanism.\n# We work around this by setting a path max and putting all exes / dlls in\n# the same output directory.\nif (CMAKE_SYSTEM_NAME MATCHES \"Windows\")\n    set(CMAKE_OBJECT_PATH_MAX 260)\n    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/bin\")\n\n    message(STATUS \"Windows: setting CMAKE_OBJECT_PATH_MAX to ${CMAKE_OBJECT_PATH_MAX}\")\nendif ()\n\n# Export all symbols on Windows to match GCC/Clang behavior on Linux/macOS\nset(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)\n\n# Require standard C++17\nset(CMAKE_CXX_STANDARD 17 CACHE STRING \"The C++ standard to use. Halide requires 17 or higher.\")\noption(CMAKE_CXX_STANDARD_REQUIRED \"When enabled, the value of CMAKE_CXX_STANDARD is a requirement.\" ON)\noption(CMAKE_CXX_EXTENSIONS \"When enabled, compiler-specific language extensions are enabled (e.g. -std=gnu++17)\" OFF)\n\nif (CMAKE_CXX_STANDARD LESS 17)\n    message(FATAL_ERROR \"Halide requires C++17 or newer but CMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}\")\nendif ()\n\n# Build Halide with ccache if the package is present and the user requested it\nHalide_feature(Halide_CCACHE_BUILD \"Build with CCache as best configured for Halide\" OFF ADVANCED)\nif (Halide_CCACHE_BUILD)\n    find_program(CCACHE_PROGRAM ccache REQUIRED)\n\n    set(Halide_CCACHE_PARAMS\n        CCACHE_CPP2=yes\n        CCACHE_HASHDIR=yes\n        CCACHE_SLOPPINESS=pch_defines,time_macros,include_file_mtime,include_file_ctime\n        CACHE STRING \"Parameters to pass through to ccache\")\n    mark_as_advanced(Halide_CCACHE_PARAMS)\n\n    set(CMAKE_C_COMPILER_LAUNCHER ${CMAKE_COMMAND} -E env ${Halide_CCACHE_PARAMS} ${CCACHE_PROGRAM})\n    set(CMAKE_CXX_COMPILER_LAUNCHER ${CMAKE_COMMAND} -E env ${Halide_CCACHE_PARAMS} ${CCACHE_PROGRAM})\n\n    # Per https://ccache.dev/manual/latest.html#_precompiled_headers,\n    # we must set -fno-pch-timestamp when using Clang + CCache + PCH\n    if (CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n        string(APPEND CMAKE_C_FLAGS \" -Xclang -fno-pch-timestamp\")\n    endif ()\n    if (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n        string(APPEND CMAKE_CXX_FLAGS \" -Xclang -fno-pch-timestamp\")\n    endif ()\nendif ()\n\n# Detect whether or not ASAN is enabled. Don't cache the result to ensure this\n# check happens every time we reconfigure.\nunset(Halide_ASAN_ENABLED CACHE)\ncheck_cxx_symbol_exists(HALIDE_INTERNAL_USING_ASAN \"${Halide_SOURCE_DIR}/src/Util.h\" Halide_ASAN_ENABLED)\n\nif (Halide_ASAN_ENABLED)\n    set(Halide_ANY_SANITIZERS_ENABLED 1)\nelse ()\n    set(Halide_ANY_SANITIZERS_ENABLED 0)\nendif ()\n\n# Helper function to set C++ compiler warnings in a sane way\nfunction(set_halide_compiler_warnings NAME)\n    target_compile_options(\n        ${NAME}\n        PRIVATE\n        $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Wall>\n\n        # variable length arrays in C++ are a Clang extension, we don't want to use them\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Wvla-extension>\n\n        $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Wcast-qual>\n        $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Wignored-qualifiers>\n        $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Woverloaded-virtual>\n        $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Wimplicit-fallthrough>\n\n        $<$<CXX_COMPILER_ID:GNU>:-Wsuggest-override>\n\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Winconsistent-missing-destructor-override>\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Winconsistent-missing-override>\n        $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Wdeprecated-declarations>\n\n        $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Wno-double-promotion>\n        $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Wno-float-conversion>\n        $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Wno-float-equal>\n        $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Wno-missing-field-initializers>\n        $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Wno-old-style-cast>\n        $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Wno-shadow>\n        $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Wno-sign-conversion>\n        $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Wno-switch-enum>\n        $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Wno-undef>\n        $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Wno-unused-function>\n        $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Wno-unused-macros>\n        $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Wno-unused-parameter>\n\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Wno-c++98-compat-pedantic>\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Wno-c++98-compat>\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Wno-cast-align>\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Wno-comma>\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Wno-covered-switch-default>\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Wno-documentation-unknown-command>\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Wno-documentation>\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Wno-exit-time-destructors>\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Wno-global-constructors>\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Wno-implicit-float-conversion>\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Wno-implicit-int-conversion>\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Wno-implicit-int-float-conversion>\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Wno-missing-prototypes>\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Wno-nonportable-system-include-path>\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Wno-reserved-id-macro>\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Wno-shadow-field-in-constructor>\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Wno-shadow-field>\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Wno-shorten-64-to-32>\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Wno-undefined-func-template>\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Wno-unused-member-function>\n        $<$<CXX_COMPILER_ID:Clang,AppleClang>:-Wno-unused-template>\n\n        $<$<CXX_COMPILER_ID:MSVC>:/W3>\n        $<$<CXX_COMPILER_ID:MSVC>:/wd4018>  # 4018: disable \"signed/unsigned mismatch\"\n        $<$<CXX_COMPILER_ID:MSVC>:/wd4141>  # 4141: 'inline' used more than once\n        $<$<CXX_COMPILER_ID:MSVC>:/wd4146>  # 4146: unary minus applied to unsigned type\n        $<$<CXX_COMPILER_ID:MSVC>:/wd4244>  # 4244: conversion, possible loss of data\n        $<$<CXX_COMPILER_ID:MSVC>:/wd4267>  # 4267: conversion from 'size_t' to 'int', possible loss of data\n        $<$<CXX_COMPILER_ID:MSVC>:/wd4291>  # 4291: No matching operator delete found\n        $<$<CXX_COMPILER_ID:MSVC>:/wd4503>  # 4503: disable \"decorated name length exceeded, name was truncated\"\n        $<$<CXX_COMPILER_ID:MSVC>:/wd4800>  # 4800: forcing value to bool 'true' or 'false' (performance warning)\n\n        # No: enable deprecation warnings\n        # $<$<CXX_COMPILER_ID:MSVC>:/wd4996>  # 4996: compiler encountered deprecated declaration\n    )\nendfunction()\n\n\n##\n# Import dependencies\n##\n\n## Threads\noption(THREADS_PREFER_PTHREAD_FLAG \"When enabled, prefer to use the -pthread flag to explicit linking\" ON)\nfind_package(Threads REQUIRED)\n\n## LLVM\nfind_package(Halide_LLVM 18...20 REQUIRED\n             COMPONENTS WebAssembly X86\n             OPTIONAL_COMPONENTS AArch64 ARM Hexagon NVPTX PowerPC RISCV)\n\n_Halide_pkgdep(Halide_LLVM PACKAGE_VARS Halide_LLVM_SHARED_LIBS)\n\n## Image formats\n\n# This changes how find_xxx() commands work; the default is to find frameworks before\n# standard libraries or headers, but this can be a problem on systems that have Mono\n# installed, as it has a framework with the libjpeg and libpng  headers present -- so\n# CMake finds the headers from Mono but the libraries from Homebrew, and hilarity ensues.\n# Setting this to \"last\" means we always try the standard libraries before the frameworks.\nset(CMAKE_FIND_FRAMEWORK LAST)\n\n# TODO: these really belong in tools/, but CMake has a weird bug with $<TARGET_NAME_IF_EXISTS:...>\n# https://gitlab.kitware.com/cmake/cmake/-/issues/25033\nfind_package(JPEG)\nfind_package(PNG)\n\n##\n# Optional features. These settings are defined early so that subdirectories see a consistent view\n\nHalide_feature(Halide_BUNDLE_STATIC \"Bundle Halide's static dependencies\" OFF ADVANCED\n               DEPENDS NOT BUILD_SHARED_LIBS)\n\nHalide_feature(Halide_ENABLE_EXCEPTIONS \"Enable exceptions in Halide\" ON)\nHalide_feature(Halide_ENABLE_RTTI \"Enable RTTI in Halide\" ON\n               DEPENDS LLVM_ENABLE_RTTI)\nHalide_feature(Halide_BUNDLE_STATIC \"Bundle Halide's static dependencies\" OFF ADVANCED\n               DEPENDS NOT BUILD_SHARED_LIBS)\n\nHalide_feature(WITH_AUTOSCHEDULERS \"Build the Halide autoschedulers\" ON\n               DEPENDS BUILD_SHARED_LIBS)\nHalide_feature(WITH_DOCS \"Halide's Doxygen documentation\" OFF)\nHalide_feature(WITH_PACKAGING \"Halide's CMake package install rules\" TOP_LEVEL)\nHalide_feature(WITH_PYTHON_BINDINGS \"Halide's native Python module (not the whole pip package)\" ON\n               DEPENDS Halide_ENABLE_EXCEPTIONS AND Halide_ENABLE_RTTI)\nHalide_feature(WITH_SERIALIZATION \"Include experimental Serialization/Deserialization code\" ON)\nHalide_feature(WITH_SERIALIZATION_JIT_ROUNDTRIP_TESTING\n               \"Intercepting JIT compilation with a serialization roundtrip, for test only\"\n               OFF ADVANCED\n               DEPENDS WITH_SERIALIZATION)\nHalide_feature(WITH_TESTS \"Halide's unit test suite\" TOP_LEVEL)\nHalide_feature(WITH_TUTORIALS \"Halide's tutorial code\" TOP_LEVEL)\nHalide_feature(WITH_UTILS \"Optional utility programs for Halide, including HalideTraceViz\" TOP_LEVEL)\n\n\n##\n# Add source directories\n\nadd_subdirectory(src)\nadd_subdirectory(tools)\n\nif (WITH_TESTS)\n    add_subdirectory(test)\nendif ()\n\nif (WITH_PYTHON_BINDINGS)\n    add_subdirectory(python_bindings)\nendif ()\n\nif (WITH_TUTORIALS)\n    add_subdirectory(tutorial)\nendif ()\n\nif (WITH_DOCS)\n    add_subdirectory(doc)\nendif ()\n\nif (WITH_UTILS)\n    add_subdirectory(util)\nendif ()\n\nif (WITH_PACKAGING)\n    add_subdirectory(packaging)\nendif ()\n"
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 9.150390625,
          "content": "{\n  \"version\": 6,\n  \"cmakeMinimumRequired\": {\n    \"major\": 3,\n    \"minor\": 28,\n    \"patch\": 0\n  },\n  \"configurePresets\": [\n    {\n      \"name\": \"base\",\n      \"hidden\": true,\n      \"binaryDir\": \"build/${presetName}\",\n      \"installDir\": \"install/${presetName}\"\n    },\n    {\n      \"name\": \"ci\",\n      \"hidden\": true,\n      \"inherits\": \"base\",\n      \"toolchainFile\": \"${sourceDir}/cmake/toolchain.${presetName}.cmake\",\n      \"cacheVariables\": {\n        \"CMAKE_BUILD_TYPE\": \"RelWithDebInfo\",\n        \"Halide_LLVM_SHARED_LIBS\": false\n      }\n    },\n    {\n      \"name\": \"vcpkg\",\n      \"inherits\": \"base\",\n      \"displayName\": \"vcpkg deps\",\n      \"description\": \"Build dependencies (with Halide exclusions) with vcpkg\",\n      \"toolchainFile\": \"$env{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake\",\n      \"cacheVariables\": {\n        \"VCPKG_MANIFEST_FEATURES\": \"developer\",\n        \"VCPKG_OVERLAY_PORTS\": \"${sourceDir}/cmake/vcpkg\",\n        \"Halide_USE_FETCHCONTENT\": false\n      }\n    },\n    {\n      \"name\": \"vcpkg-full\",\n      \"inherits\": \"vcpkg\",\n      \"displayName\": \"vcpkg deps (all dependencies)\",\n      \"description\": \"Build ALL dependencies with vcpkg\",\n      \"cacheVariables\": {\n        \"VCPKG_OVERLAY_PORTS\": \"\"\n      }\n    },\n    {\n      \"name\": \"vs2022\",\n      \"hidden\": true,\n      \"inherits\": [\n        \"vcpkg\"\n      ],\n      \"condition\": {\n        \"type\": \"equals\",\n        \"lhs\": \"${hostSystemName}\",\n        \"rhs\": \"Windows\"\n      },\n      \"generator\": \"Visual Studio 17 2022\",\n      \"toolset\": \"host=x64\"\n    },\n    {\n      \"name\": \"debug\",\n      \"inherits\": \"base\",\n      \"displayName\": \"Debug\",\n      \"description\": \"Debug build with no special settings\",\n      \"cacheVariables\": {\n        \"CMAKE_BUILD_TYPE\": \"Debug\"\n      }\n    },\n    {\n      \"name\": \"release\",\n      \"inherits\": \"base\",\n      \"displayName\": \"Release\",\n      \"description\": \"Release build with no special settings\",\n      \"cacheVariables\": {\n        \"CMAKE_BUILD_TYPE\": \"Release\"\n      }\n    },\n    {\n      \"name\": \"debug-vcpkg\",\n      \"inherits\": [\n        \"debug\",\n        \"vcpkg\"\n      ],\n      \"displayName\": \"Debug (vcpkg)\",\n      \"description\": \"Debug build for a single-config generator, vcpkg dependencies\"\n    },\n    {\n      \"name\": \"release-vcpkg\",\n      \"inherits\": [\n        \"release\",\n        \"vcpkg\"\n      ],\n      \"displayName\": \"Release (vcpkg)\",\n      \"description\": \"Release build for a single-config generator, vcpkg dependencies\"\n    },\n    {\n      \"name\": \"debug-vcpkg-full\",\n      \"inherits\": [\n        \"debug\",\n        \"vcpkg-full\"\n      ],\n      \"displayName\": \"Debug (vcpkg-full)\",\n      \"description\": \"Debug build for a single-config generator, vcpkg-full dependencies\"\n    },\n    {\n      \"name\": \"release-vcpkg-full\",\n      \"inherits\": [\n        \"release\",\n        \"vcpkg-full\"\n      ],\n      \"displayName\": \"Release (vcpkg-full)\",\n      \"description\": \"Release build for a single-config generator, vcpkg-full dependencies\"\n    },\n    {\n      \"name\": \"win32\",\n      \"inherits\": \"vs2022\",\n      \"displayName\": \"Win32 (Visual Studio)\",\n      \"description\": \"Visual Studio-based Win32 build with vcpkg dependencies.\",\n      \"architecture\": \"Win32\"\n    },\n    {\n      \"name\": \"win64\",\n      \"inherits\": \"vs2022\",\n      \"displayName\": \"Win64 (Visual Studio)\",\n      \"description\": \"Visual Studio-based x64 build with vcpkg dependencies.\",\n      \"architecture\": \"x64\"\n    },\n    {\n      \"name\": \"win32-vcpkg-full\",\n      \"inherits\": [\n        \"vcpkg-full\",\n        \"vs2022\"\n      ],\n      \"displayName\": \"Win32 (Visual Studio/vcpkg-full)\",\n      \"description\": \"Visual Studio-based Win32 build with vcpkg-full dependencies.\",\n      \"architecture\": \"Win32\"\n    },\n    {\n      \"name\": \"win64-vcpkg-full\",\n      \"inherits\": [\n        \"vcpkg-full\",\n        \"vs2022\"\n      ],\n      \"displayName\": \"Win64 (Visual Studio/vcpkg-full)\",\n      \"description\": \"Visual Studio-based x64 build with vcpkg-full dependencies.\",\n      \"architecture\": \"x64\"\n    },\n    {\n      \"name\": \"macOS\",\n      \"displayName\": \"macOS (Apple Clang)\",\n      \"description\": \"macOS build using Apple Clang and Homebrew LLVM\",\n      \"generator\": \"Ninja\",\n      \"inherits\": \"release\",\n      \"condition\": {\n        \"type\": \"equals\",\n        \"lhs\": \"${hostSystemName}\",\n        \"rhs\": \"Darwin\"\n      },\n      \"cacheVariables\": {\n        \"CMAKE_PREFIX_PATH\": \"/opt/homebrew;/opt/homebrew/opt/llvm;/opt/homebrew/opt/jpeg\"\n      }\n    },\n    {\n      \"name\": \"macOS-vcpkg\",\n      \"inherits\": [\n        \"macOS\",\n        \"vcpkg\"\n      ],\n      \"displayName\": \"macOS (vcpkg)\",\n      \"description\": \"macOS build with vcpkg dependencies\",\n      \"cacheVariables\": {\n        \"CMAKE_PREFIX_PATH\": \"/opt/homebrew/opt/llvm\"\n      }\n    },\n    {\n      \"name\": \"macOS-vcpkg-full\",\n      \"inherits\": [\n        \"macOS\",\n        \"vcpkg-full\"\n      ],\n      \"displayName\": \"macOS (vcpkg-full)\",\n      \"description\": \"macOS build with vcpkg-full dependencies\",\n      \"cacheVariables\": {\n        \"CMAKE_PREFIX_PATH\": \"\"\n      }\n    },\n    {\n      \"name\": \"package\",\n      \"hidden\": true,\n      \"cacheVariables\": {\n        \"CMAKE_BUILD_TYPE\": \"Release\",\n        \"LLVM_DIR\": \"$env{LLVM_DIR}\",\n        \"Clang_DIR\": \"$env{Clang_DIR}\",\n        \"LLD_DIR\": \"$env{LLD_DIR}\",\n        \"WITH_TESTS\": \"NO\",\n        \"WITH_TUTORIALS\": \"NO\",\n        \"WITH_DOCS\": \"YES\",\n        \"WITH_UTILS\": \"YES\",\n        \"WITH_PYTHON_BINDINGS\": \"NO\",\n        \"CMAKE_INSTALL_DATADIR\": \"share/Halide\"\n      }\n    },\n    {\n      \"name\": \"package-windows\",\n      \"inherits\": [\n        \"package\",\n        \"vs2022\"\n      ],\n      \"displayName\": \"Package ZIP for Windows\",\n      \"description\": \"Build for packaging Windows shared libraries.\",\n      \"binaryDir\": \"${sourceDir}/build\",\n      \"cacheVariables\": {\n        \"BUILD_SHARED_LIBS\": \"YES\",\n        \"CMAKE_INSTALL_BINDIR\": \"bin/$<CONFIG>\",\n        \"CMAKE_INSTALL_LIBDIR\": \"lib/$<CONFIG>\",\n        \"Halide_INSTALL_CMAKEDIR\": \"lib/cmake/Halide\",\n        \"Halide_INSTALL_HELPERSDIR\": \"lib/cmake/HalideHelpers\"\n      }\n    },\n    {\n      \"name\": \"package-unix-shared\",\n      \"inherits\": \"package\",\n      \"displayName\": \"Package UNIX shared libs\",\n      \"description\": \"Build for packaging UNIX shared libraries.\",\n      \"binaryDir\": \"shared-Release\",\n      \"cacheVariables\": {\n        \"BUILD_SHARED_LIBS\": \"YES\"\n      }\n    },\n    {\n      \"name\": \"package-unix-static\",\n      \"inherits\": \"package\",\n      \"displayName\": \"Package UNIX static libs\",\n      \"description\": \"Build for packaging UNIX static libraries.\",\n      \"binaryDir\": \"static-Release\",\n      \"cacheVariables\": {\n        \"BUILD_SHARED_LIBS\": \"NO\",\n        \"Halide_BUNDLE_STATIC\": \"YES\"\n      }\n    },\n    {\n      \"name\": \"linux-x64-asan\",\n      \"inherits\": \"ci\",\n      \"displayName\": \"ASAN (Linux x64)\",\n      \"description\": \"Build everything with ASAN enabled\",\n      \"cacheVariables\": {\n        \"LLVM_ROOT\": \"$penv{LLVM_ROOT}\"\n      }\n    },\n    {\n      \"name\": \"linux-x64-fuzzer\",\n      \"inherits\": \"ci\",\n      \"displayName\": \"Fuzzer (Linux x64)\",\n      \"description\": \"Build everything with fuzzing enabled\",\n      \"cacheVariables\": {\n        \"LLVM_ROOT\": \"$penv{LLVM_ROOT}\",\n        \"WITH_TUTORIALS\": \"NO\",\n        \"WITH_UTILS\": \"NO\",\n        \"WITH_PYTHON_BINDINGS\": \"NO\",\n        \"WITH_TESTS\": \"YES\",\n        \"WITH_TEST_AUTO_SCHEDULE\": \"NO\",\n        \"WITH_TEST_CORRECTNESS\": \"NO\",\n        \"WITH_TEST_ERROR\": \"NO\",\n        \"WITH_TEST_WARNING\": \"NO\",\n        \"WITH_TEST_PERFORMANCE\": \"NO\",\n        \"WITH_TEST_RUNTIME\": \"NO\",\n        \"WITH_TEST_GENERATOR\": \"NO\",\n        \"WITH_TEST_FUZZ\": \"YES\",\n        \"BUILD_SHARED_LIBS\": \"NO\"\n      }\n    }\n  ],\n  \"buildPresets\": [\n    {\n      \"name\": \"debug\",\n      \"configurePreset\": \"debug\",\n      \"displayName\": \"Debug\",\n      \"description\": \"Debug build with no special settings\"\n    },\n    {\n      \"name\": \"release\",\n      \"configurePreset\": \"release\",\n      \"displayName\": \"Release\",\n      \"description\": \"Release build with no special settings\"\n    },\n    {\n      \"name\": \"linux-x64-asan\",\n      \"configurePreset\": \"linux-x64-asan\",\n      \"displayName\": \"ASAN (Linux x64)\",\n      \"description\": \"Build everything with ASAN enabled\"\n    },\n    {\n      \"name\": \"linux-x64-fuzzer\",\n      \"configurePreset\": \"linux-x64-fuzzer\",\n      \"displayName\": \"Fuzzing (Linux x64)\",\n      \"description\": \"Build everything with fuzzing enabled\"\n    }\n  ],\n  \"testPresets\": [\n    {\n      \"name\": \"debug\",\n      \"configurePreset\": \"debug\",\n      \"displayName\": \"Debug\",\n      \"description\": \"Test everything with Debug build\",\n      \"output\": {\n        \"outputOnFailure\": true\n      }\n    },\n    {\n      \"name\": \"release\",\n      \"configurePreset\": \"release\",\n      \"displayName\": \"Release\",\n      \"description\": \"Test everything with Release build\",\n      \"output\": {\n        \"outputOnFailure\": true\n      }\n    },\n    {\n      \"name\": \"linux-x64-asan\",\n      \"configurePreset\": \"linux-x64-asan\",\n      \"displayName\": \"ASAN (Linux x64)\",\n      \"description\": \"Test everything with ASAN enabled\",\n      \"environment\": {\n        \"ASAN_OPTIONS\": \"detect_leaks=0:detect_container_overflow=0\"\n      },\n      \"output\": {\n        \"outputOnFailure\": true\n      }\n    },\n    {\n      \"name\": \"linux-x64-fuzzer\",\n      \"configurePreset\": \"linux-x64-fuzzer\",\n      \"displayName\": \"Fuzzing (Linux x64)\",\n      \"description\": \"Test everything with fuzzing enabled\",\n      \"output\": {\n        \"outputOnFailure\": true\n      }\n    }\n  ]\n}\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.4765625,
          "content": "The Halide community has always worked to be a welcoming and respectful\ncommunity, and we want to ensure that doesn’t change as we grow and evolve. To\nthat end, we have a few ground rules that we ask people to adhere to:\n\n- **Be friendly and patient.**\n\n- **Be welcoming.** We strive to be a community that welcomes and supports\n  people of all backgrounds and identities. This includes, but is not limited to\n  members of any race, ethnicity, culture, national origin, colour, immigration\n  status, social and economic class, educational level, sex, sexual orientation,\n  gender identity and expression, age, size, family status, political belief,\n  religion, and mental and physical ability.\n\n- **Be considerate.** Your work will be used by other people, and you in turn\n  will depend on the work of others. Any decision you take will affect users and\n  colleagues, and you should take those consequences into account when making\n  decisions. Remember that we're a world-wide community, so you might not be\n  communicating in someone else's primary language.\n\n- **Be respectful.** Not all of us will agree all the time, but disagreement is\n  no excuse for poor behavior and poor manners. We might all experience some\n  frustration now and then, but we cannot allow that frustration to turn into a\n  personal attack. It’s important to remember that a community where people feel\n  uncomfortable or threatened is not a productive one. Members of the Halide\n  community should be respectful when dealing with other members as well as with\n  people outside the Halide community.\n\n- **Be careful in the words that you choose.** We are a community of\n  professionals, and we conduct ourselves professionally. Be kind to others. Do\n  not insult or put down other participants. Harassment and other exclusionary\n  behavior aren't acceptable. This includes, but is not limited to:\n\n  - Violent threats or language directed against another person.\n  - Discriminatory jokes and language.\n  - Posting sexually explicit or violent material.\n  - Posting (or threatening to post) other people's personally identifying\n    information (\"doxing\").\n  - Personal insults, especially those using racist or sexist terms.\n  - Unwelcome sexual attention.\n  - Advocating for, or encouraging, any of the above behavior.\n  - Repeated harassment of others. In general, if someone asks you to stop, then\n    stop.\n\n- **When we disagree, try to understand why.** Disagreements, both social and\n  technical, happen all the time and Halide is no exception. It is important\n  that we resolve disagreements and differing views constructively. Being unable\n  to understand why someone holds a viewpoint doesn't mean that they’re wrong.\n  Don’t forget that it is human to err and blaming each other doesn't get us\n  anywhere. Instead, focus on helping to resolve issues and learning from\n  mistakes.\n\n- **Give credit where it's due.** If you use code or ideas from other people,\n  projects, or publications, say so. Add a comment in the source code at the\n  point where the idea is used. If adapting code, this requirement is above and\n  beyond any requirements placed on you by the license of the original code. We\n  all like recognition for our work. To that end...\n\n**Acknowledgements.** This code of conduct is a mix of\n[LLVM's](https://llvm.org/docs/CodeOfConduct.html) and\n[Django's](https://www.djangoproject.com/conduct/), which both ultimately derive\nfrom the code of conduct from the\n[Speak Up!](http://web.archive.org/web/20141109123859/http://speakup.io/coc.html)\nproject.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 14.3720703125,
          "content": "Copyright (c) 2012-2020 MIT CSAIL, Google, Facebook, Adobe, NVIDIA CORPORATION, and other contributors.\n\nDeveloped by:\n\n  The Halide team\n  http://halide-lang.org\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n-----\n\napps/bgu is Copyright 2016 Google Inc. and is Licensed under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except in compliance\nwith the License.\n\nApache License\n\nVersion 2.0, January 2004\n\nhttp://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and\ndistribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the\ncopyright owner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other\nentities that control, are controlled by, or are under common control with\nthat entity. For the purposes of this definition, \"control\" means (i) the\npower, direct or indirect, to cause the direction or management of such\nentity, whether by contract or otherwise, or (ii) ownership of fifty percent\n(50%) or more of the outstanding shares, or (iii) beneficial ownership of such\nentity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising\npermissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation source, and\nconfiguration files.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or\ntranslation of a Source form, including but not limited to compiled object\ncode, generated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form,\nmade available under the License, as indicated by a copyright notice that is\nincluded in or attached to the work (an example is provided in the Appendix\nbelow).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that\nis based on (or derived from) the Work and for which the editorial revisions,\nannotations, elaborations, or other modifications represent, as a whole, an\noriginal work of authorship. For the purposes of this License, Derivative\nWorks shall not include works that remain separable from, or merely link (or\nbind by name) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original\nversion of the Work and any modifications or additions to that Work or\nDerivative Works thereof, that is intentionally submitted to Licensor for\ninclusion in the Work by the copyright owner or by an individual or Legal\nEntity authorized to submit on behalf of the copyright owner. For the purposes\nof this definition, \"submitted\" means any form of electronic, verbal, or\nwritten communication sent to the Licensor or its representatives, including\nbut not limited to communication on electronic mailing lists, source code\ncontrol systems, and issue tracking systems that are managed by, or on behalf\nof, the Licensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise designated\nin writing by the copyright owner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf\nof whom a Contribution has been received by Licensor and subsequently\nincorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n\n(a) You must give any other recipients of the Work or Derivative Works a copy\nof this License; and\n\n(b) You must cause any modified files to carry prominent notices stating that\nYou changed the files; and\n\n(c) You must retain, in the Source form of any Derivative Works that You\ndistribute, all copyright, patent, trademark, and attribution notices from the\nSource form of the Work, excluding those notices that do not pertain to any\npart of the Derivative Works; and\n\n(d) If the Work includes a \"NOTICE\" text file as part of its distribution,\nthen any Derivative Works that You distribute must include a readable copy of\nthe attribution notices contained within such NOTICE file, excluding those\nnotices that do not pertain to any part of the Derivative Works, in at least\none of the following places: within a NOTICE text file distributed as part of\nthe Derivative Works; within the Source form or documentation, if provided\nalong with the Derivative Works; or, within a display generated by the\nDerivative Works, if and wherever such third-party notices normally appear.\nThe contents of the NOTICE file are for informational purposes only and do not\nmodify the License. You may add Your own attribution notices within Derivative\nWorks that You distribute, alongside or as an addendum to the NOTICE text from\nthe Work, provided that such additional attribution notices cannot be\nconstrued as modifying the License.\n\nYou may add Your own copyright statement to Your modifications and may provide\nadditional or different license terms and conditions for use, reproduction, or\ndistribution of Your modifications, or for any such Derivative Works as a\nwhole, provided Your use, reproduction, and distribution of the Work otherwise\ncomplies with the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\n-----\n\napps/support/cmdline.h is Copyright (c) 2009, Hideyuki Tanaka and is licensed\nunder the BSD 3-Clause license.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n* Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n* Neither the name of the <organization> nor the\nnames of its contributors may be used to endorse or promote products\nderived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY <copyright holder> ''AS IS'' AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL <copyright holder> BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n----\n\ndependencies/spirv is Copyright (c) 2014-2018 The Khronos Group Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and/or associated documentation files (the \"Materials\"),\nto deal in the Materials without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Materials, and to permit persons to whom the\nMaterials are furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Materials.\n\nMODIFICATIONS TO THIS FILE MAY MEAN IT NO LONGER ACCURATELY REFLECTS KHRONOS\nSTANDARDS. THE UNMODIFIED, NORMATIVE VERSIONS OF KHRONOS SPECIFICATIONS AND\nHEADER INFORMATION ARE LOCATED AT https://www.khronos.org/registry/\n\nTHE MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM,OUT OF OR IN CONNECTION WITH THE MATERIALS OR THE USE OR OTHER DEALINGS\nIN THE MATERIALS.\n\n\n----\n\ndependencies/vulkan is Copyright (c) 2014-2017 The Khronos Group Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n----\n\napps/linear_algebra/include/cblas.h is licensed under the BLAS license.\n\nThe reference BLAS is a freely-available software package. It is available from\nnetlib via anonymous ftp and the World Wide Web. Thus, it can be included in\ncommercial software packages (and has been). We only ask that proper credit be\ngiven to the authors.\n\nLike all software, it is copyrighted. It is not trademarked, but we do ask the\nfollowing:\n\nIf you modify the source for these routines we ask that you change the name of\nthe routine and comment the changes made to the original.\n\nWe will gladly answer any questions regarding the software. If a modification is\ndone, however, it is the responsibility of the person who modified the routine\nto provide support.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 103.763671875,
          "content": "# 'make' builds libHalide.a, the internal test suite, and runs the internal test suite\n# 'make run_tests' builds and runs all the end-to-end tests in the test subdirectory\n# 'make {error,performance}_foo' builds and runs test/{...}/foo.cpp for any\n#     c_source file in the corresponding subdirectory of the test folder\n# 'make correctness_foo' builds and runs test/correctness/foo.cpp for any\n#     c_source file in the correctness/ subdirectory of the test folder\n# 'make test_apps' checks some of the apps build and run (but does not check their output)\n# 'make time_compilation_tests' records the compile time for each test module into a csv file.\n#     For correctness and performance tests this include halide build time and run time. For\n#     the tests in test/generator/ this times only the halide build time.\n\n# Disable built-in makefile rules for all apps to avoid pointless file-system\n# scanning and general weirdness resulting from implicit rules.\nMAKEFLAGS += --no-builtin-rules\n.SUFFIXES:\n\nUNAME = $(shell uname)\n\nifeq ($(OS), Windows_NT)\n    $(error Halide no longer supports the MinGW environment. Please use MSVC through CMake instead.)\nelse\n    # let's assume \"normal\" UNIX such as linux\n    COMMON_LD_FLAGS=$(LDFLAGS) -ldl -lpthread -lz\n    FPIC=-fPIC\nifeq ($(UNAME), Darwin)\n    SHARED_EXT=dylib\nelse\n    SHARED_EXT=so\nendif\nendif\n\n# We want to build Halide plugins as .so on all posixy systems, including OSX.\n# This is called out as a named var to make it clear that the use\n# is deliberate, not an accident.\nPLUGIN_EXT=so\n\nifeq ($(UNAME), Darwin)\n  # Anything that we us install_name_tool on needs these linker flags\n  # to ensure there is enough padding for install_name_tool to use\n  INSTALL_NAME_TOOL_LD_FLAGS=-Wl,-headerpad_max_install_names\nelse\n  INSTALL_NAME_TOOL_LD_FLAGS=\nendif\n\nifeq ($(UNAME), Darwin)\ndefine alwayslink\n\t-Wl,-force_load,$(1)\nendef\nelse\ndefine alwayslink\n\t-Wl,--whole-archive $(1) -Wl,-no-whole-archive\nendef\nendif\n\nSHELL = bash\nCXX ?= g++\nPREFIX ?= /usr/local\nLLVM_CONFIG ?= llvm-config\nLLVM_COMPONENTS= $(shell $(LLVM_CONFIG) --components)\nLLVM_VERSION = $(shell $(LLVM_CONFIG) --version | sed 's/\\([0-9][0-9]*\\)\\.\\([0-9]\\).*/\\1.\\2/')\n\nLLVM_FULL_VERSION = $(shell $(LLVM_CONFIG) --version)\nLLVM_BINDIR = $(shell $(LLVM_CONFIG) --bindir | sed -e 's/\\\\/\\//g' -e 's/\\([a-zA-Z]\\):/\\/\\1/g')\nLLVM_LIBDIR = $(shell $(LLVM_CONFIG) --libdir | sed -e 's/\\\\/\\//g' -e 's/\\([a-zA-Z]\\):/\\/\\1/g')\n# Apparently there is no llvm_config flag to get canonical paths to tools,\n# so we'll just construct one relative to --src-root and hope that is stable everywhere.\nLLVM_SYSTEM_LIBS=$(shell ${LLVM_CONFIG} --system-libs --link-static | sed -e 's/[\\/&]/\\\\&/g' | sed 's/-llibxml2.tbd/-lxml2/')\nLLVM_AS = $(LLVM_BINDIR)/llvm-as\nLLVM_NM = $(LLVM_BINDIR)/llvm-nm\n# Note, removing -D_GLIBCXX_ASSERTIONS is a workaround for https://reviews.llvm.org/D142279\nLLVM_CXX_FLAGS = -std=c++17  $(filter-out -O% -g -fomit-frame-pointer -pedantic -W% -W, $(shell $(LLVM_CONFIG) --cxxflags | sed -e 's/ -D_GLIBCXX_ASSERTIONS / /g' -e 's/\\\\/\\//g' -e 's/\\([a-zA-Z]\\):/\\/\\1/g;s/-D/ -D/g;s/-O/ -O/;s/c++14/c++17/g'))\nOPTIMIZE ?= -O3\nOPTIMIZE_FOR_BUILD_TIME ?= -O0\n\nCLANG ?= $(LLVM_BINDIR)/clang\nCLANG_VERSION = $(shell $(CLANG) --version)\n\nSANITIZER_FLAGS ?=\n\n# TODO: this is suboptimal hackery; we should really add the relevant\n# support libs for the sanitizer(s) as weak symbols in Codegen_LLVM.\n# (Note also that, in general, most Sanitizers work most reliably with an all-Clang\n# build system.)\n\nifneq (,$(findstring tsan,$(HL_TARGET)$(HL_JIT_TARGET)))\n\n# Note that attempting to use TSAN with the JIT can produce false positives\n# if libHalide is not also compiled with TSAN enabled; we tack the relevant\n# flag onto OPTIMIZE here, but that's really only effective if you ensure\n# to do a clean build before testing. (In general, most of the Sanitizers\n# only work well when used in a completely clean environment.)\nOPTIMIZE += -fsanitize=thread\nSANITIZER_FLAGS += -fsanitize=thread\n\nendif\n\nifneq (,$(findstring asan,$(HL_TARGET)$(HL_JIT_TARGET)))\nOPTIMIZE += -fsanitize=address\nSANITIZER_FLAGS += -fsanitize=address\nendif\n\nCOMMON_LD_FLAGS += $(SANITIZER_FLAGS)\n\nLLVM_VERSION_TIMES_10 = $(shell $(LLVM_CONFIG) --version | sed 's/\\([0-9][0-9]*\\)\\.\\([0-9]\\).*/\\1\\2/')\n\nLLVM_CXX_FLAGS += -DLLVM_VERSION=$(LLVM_VERSION_TIMES_10)\n\n# All WITH_* flags are either empty or not-empty. They do not behave\n# like true/false values in most languages.  To turn one off, either\n# edit this file, add \"WITH_FOO=\" (no assigned value) to the make\n# line, or define an environment variable WITH_FOO that has an empty\n# value.\nWITH_X86 ?= $(findstring x86, $(LLVM_COMPONENTS))\nWITH_ARM ?= $(findstring arm, $(LLVM_COMPONENTS))\nWITH_HEXAGON ?= $(findstring hexagon, $(LLVM_COMPONENTS))\nWITH_RISCV ?= $(findstring riscv, $(LLVM_COMPONENTS))\nWITH_AARCH64 ?= $(findstring aarch64, $(LLVM_COMPONENTS))\nWITH_POWERPC ?= $(findstring powerpc, $(LLVM_COMPONENTS))\nWITH_NVPTX ?= $(findstring nvptx, $(LLVM_COMPONENTS))\nWITH_WEBASSEMBLY ?= $(findstring webassembly, $(LLVM_COMPONENTS))\nWITH_OPENCL ?= not-empty\nWITH_METAL ?= not-empty\nWITH_D3D12 ?= not-empty\nWITH_VULKAN ?= not-empty\nWITH_SPIRV ?= not-empty\nWITH_WEBGPU ?= not-empty\nWITH_EXCEPTIONS ?=\nWITH_LLVM_INSIDE_SHARED_LIBHALIDE ?= not-empty\n\n\n# If HL_TARGET or HL_JIT_TARGET aren't set, use host\nHL_TARGET ?= host\nHL_JIT_TARGET ?= host\n\nX86_CXX_FLAGS=$(if $(WITH_X86), -DWITH_X86, )\nX86_LLVM_CONFIG_LIB=$(if $(WITH_X86), x86, )\n\nARM_CXX_FLAGS=$(if $(WITH_ARM), -DWITH_ARM, )\nARM_LLVM_CONFIG_LIB=$(if $(WITH_ARM), arm, )\n\nPOWERPC_CXX_FLAGS=$(if $(WITH_POWERPC), -DWITH_POWERPC, )\nPOWERPC_LLVM_CONFIG_LIB=$(if $(WITH_POWERPC), powerpc, )\n\nPTX_CXX_FLAGS=$(if $(WITH_NVPTX), -DWITH_NVPTX, )\nPTX_LLVM_CONFIG_LIB=$(if $(WITH_NVPTX), nvptx, )\nPTX_DEVICE_INITIAL_MODULES=$(if $(WITH_NVPTX), libdevice.compute_20.10.bc libdevice.compute_30.10.bc libdevice.compute_35.10.bc, )\n\nOPENCL_CXX_FLAGS=$(if $(WITH_OPENCL), -DWITH_OPENCL, )\nOPENCL_LLVM_CONFIG_LIB=$(if $(WITH_OPENCL), , )\n\nMETAL_CXX_FLAGS=$(if $(WITH_METAL), -DWITH_METAL, )\nMETAL_LLVM_CONFIG_LIB=$(if $(WITH_METAL), , )\n\nD3D12_CXX_FLAGS=$(if $(WITH_D3D12), -DWITH_D3D12, )\nD3D12_LLVM_CONFIG_LIB=$(if $(WITH_D3D12), , )\n\nWEBGPU_CXX_FLAGS=$(if $(WITH_WEBGPU), -DWITH_WEBGPU, )\n\nAARCH64_CXX_FLAGS=$(if $(WITH_AARCH64), -DWITH_AARCH64, )\nAARCH64_LLVM_CONFIG_LIB=$(if $(WITH_AARCH64), aarch64, )\n\nRISCV_CXX_FLAGS=$(if $(WITH_RISCV), -DWITH_RISCV, )\nRISCV_LLVM_CONFIG_LIB=$(if $(WITH_RISCV), riscv, )\n\nEXCEPTIONS_CXX_FLAGS=$(if $(WITH_EXCEPTIONS), -DHALIDE_WITH_EXCEPTIONS -fexceptions, )\n\nHEXAGON_CXX_FLAGS=$(if $(WITH_HEXAGON), -DWITH_HEXAGON, )\nHEXAGON_LLVM_CONFIG_LIB=$(if $(WITH_HEXAGON), hexagon, )\n\nSPIRV_CXX_FLAGS=$(if $(WITH_SPIRV), -DWITH_SPIRV -isystem $(ROOT_DIR)/dependencies/spirv/include, )\nSPIRV_LLVM_CONFIG_LIB=$(if $(WITH_SPIRV), , )\n\nVULKAN_CXX_FLAGS=$(if $(WITH_VULKAN), -DWITH_VULKAN -isystem $(ROOT_DIR)/dependencies/vulkan/include, )\nVULKAN_LLVM_CONFIG_LIB=$(if $(WITH_VULKAN), , )\n\nWEBASSEMBLY_CXX_FLAGS=$(if $(WITH_WEBASSEMBLY), -DWITH_WEBASSEMBLY, )\nWEBASSEMBLY_LLVM_CONFIG_LIB=$(if $(WITH_WEBASSEMBLY), webassembly, )\n\nLLVM_HAS_NO_RTTI = $(findstring -fno-rtti, $(LLVM_CXX_FLAGS))\nWITH_RTTI ?= $(if $(LLVM_HAS_NO_RTTI),, not-empty)\nRTTI_CXX_FLAGS=$(if $(WITH_RTTI), , -fno-rtti )\n\nCXX_VERSION = $(shell $(CXX) --version | head -n1)\nCXX_WARNING_FLAGS = -Wall -Werror -Wno-unused-function -Wcast-qual -Wignored-qualifiers -Wno-comment -Wsign-compare -Wno-unknown-warning-option -Wno-psabi -Wno-mismatched-new-delete -Wimplicit-fallthrough\nifneq (,$(findstring g++,$(CXX_VERSION)))\nGCC_MAJOR_VERSION := $(shell $(CXX) -dumpfullversion -dumpversion | cut -f1 -d.)\nGCC_MINOR_VERSION := $(shell $(CXX) -dumpfullversion -dumpversion | cut -f2 -d.)\nifeq (1,$(shell expr $(GCC_MAJOR_VERSION) \\> 5 \\| $(GCC_MAJOR_VERSION) = 5 \\& $(GCC_MINOR_VERSION) \\>= 1))\nCXX_WARNING_FLAGS += -Wsuggest-override\nendif\nendif\n\nifneq (,$(findstring clang,$(CXX_VERSION)))\nLLVM_CXX_FLAGS_LIBCPP := $(findstring -stdlib=libc++, $(LLVM_CXX_FLAGS))\nendif\n\nCXX_FLAGS = $(CXXFLAGS) $(CXX_WARNING_FLAGS) $(RTTI_CXX_FLAGS) -Woverloaded-virtual $(FPIC) $(OPTIMIZE) -fno-omit-frame-pointer -DCOMPILING_HALIDE\nCXX_FLAGS += $(LLVM_CXX_FLAGS)\nCXX_FLAGS += $(PTX_CXX_FLAGS)\nCXX_FLAGS += $(ARM_CXX_FLAGS)\nCXX_FLAGS += $(HEXAGON_CXX_FLAGS)\nCXX_FLAGS += $(AARCH64_CXX_FLAGS)\nCXX_FLAGS += $(X86_CXX_FLAGS)\nCXX_FLAGS += $(OPENCL_CXX_FLAGS)\nCXX_FLAGS += $(METAL_CXX_FLAGS)\nCXX_FLAGS += $(D3D12_CXX_FLAGS)\nCXX_FLAGS += $(WEBGPU_CXX_FLAGS)\nCXX_FLAGS += $(POWERPC_CXX_FLAGS)\nCXX_FLAGS += $(EXCEPTIONS_CXX_FLAGS)\nCXX_FLAGS += $(RISCV_CXX_FLAGS)\nCXX_FLAGS += $(SPIRV_CXX_FLAGS)\nCXX_FLAGS += $(VULKAN_CXX_FLAGS)\nCXX_FLAGS += $(WEBASSEMBLY_CXX_FLAGS)\n\n# Serialization requires flatc and flatbuffers.h\n# On ubuntu, this requires packages flatbuffers-compiler and libflatbuffers-dev\nifneq (,$(shell which flatc))\nCXX_FLAGS += -DWITH_SERIALIZATION -I $(BUILD_DIR) -I $(shell which flatc | sed 's/bin.flatc/include/')\nendif\n\n# This is required on some hosts like powerpc64le-linux-gnu because we may build\n# everything with -fno-exceptions.  Without -funwind-tables, libHalide.so fails\n# to propagate exceptions and causes a test failure.\nCXX_FLAGS += -funwind-tables\n\nprint-%:\n\t@echo '$*=$($*)'\n\nLLVM_STATIC_LIBFILES = \\\n\tbitwriter \\\n\tbitreader \\\n\tlinker \\\n\tipo \\\n\tpasses \\\n\torcjit \\\n\t$(X86_LLVM_CONFIG_LIB) \\\n\t$(ARM_LLVM_CONFIG_LIB) \\\n\t$(OPENCL_LLVM_CONFIG_LIB) \\\n\t$(METAL_LLVM_CONFIG_LIB) \\\n\t$(PTX_LLVM_CONFIG_LIB) \\\n\t$(AARCH64_LLVM_CONFIG_LIB) \\\n\t$(POWERPC_LLVM_CONFIG_LIB) \\\n\t$(HEXAGON_LLVM_CONFIG_LIB) \\\n\t$(SPIRV_LLVM_CONFIG_LIB) \\\n\t$(VULKAN_LLVM_CONFIG_LIB) \\\n\t$(WEBASSEMBLY_LLVM_CONFIG_LIB) \\\n\t$(RISCV_LLVM_CONFIG_LIB)\n\nLLVM_STATIC_LIBS = -L $(LLVM_LIBDIR) $(shell $(LLVM_CONFIG) --link-static --libfiles $(LLVM_STATIC_LIBFILES) | sed -e 's/\\\\/\\//g' -e 's/\\([a-zA-Z]\\):/\\/\\1/g')\n\n# Add a rpath to the llvm used for linking, in case multiple llvms are\n# installed. Bakes a path on the build system into the .so, so don't\n# use this config for distributions.\nLLVM_SHARED_LIBS = -Wl,-rpath=$(LLVM_LIBDIR) -L $(LLVM_LIBDIR) -lLLVM\n\nLLVM_LIBS_FOR_SHARED_LIBHALIDE=$(if $(WITH_LLVM_INSIDE_SHARED_LIBHALIDE),$(LLVM_STATIC_LIBS),$(LLVM_SHARED_LIBS))\n\nTUTORIAL_CXX_FLAGS ?= -std=c++17 -g -fno-omit-frame-pointer $(RTTI_CXX_FLAGS) -I $(ROOT_DIR)/tools $(SANITIZER_FLAGS) $(LLVM_CXX_FLAGS_LIBCPP) $(EXCEPTIONS_CXX_FLAGS)\n# The tutorials contain example code with warnings that we don't want\n# to be flagged as errors, so the test flags are the tutorial flags\n# plus our warning flags.\n# Also allow tests, via conditional compilation, to use the entire\n# capability of the CPU being compiled on via -march=native. This\n# presumes tests are run on the same machine they are compiled on.\nTEST_CXX_FLAGS ?= $(TUTORIAL_CXX_FLAGS) $(CXX_WARNING_FLAGS)\nTEST_LD_FLAGS = -L$(BIN_DIR) -lHalide $(COMMON_LD_FLAGS)\n\n# In the tests, some of our expectations change depending on the llvm version\nTEST_CXX_FLAGS += -DLLVM_VERSION=$(LLVM_VERSION_TIMES_10)\n\n# In the tests, default to exporting no symbols that aren't explicitly exported\nTEST_CXX_FLAGS += -fvisibility=hidden -fvisibility-inlines-hidden\n\n# gcc 4.8 fires a bogus warning on old versions of png.h\nifneq (,$(findstring g++,$(CXX_VERSION)))\nifneq (,$(findstring 4.8,$(CXX_VERSION)))\nTEST_CXX_FLAGS += -Wno-literal-suffix\nendif\nendif\n\nifeq ($(UNAME), Linux)\nTEST_LD_FLAGS += -rdynamic -Wl,--rpath=$(CURDIR)/$(BIN_DIR)\nendif\n\nifeq ($(WITH_LLVM_INSIDE_SHARED_LIBHALIDE), )\nTEST_LD_FLAGS += -Wl,--rpath=$(LLVM_LIBDIR)\nendif\n\nifneq ($(WITH_NVPTX), )\nifneq (,$(findstring ptx,$(HL_TARGET)))\nTEST_CUDA = 1\nendif\nifneq (,$(findstring cuda,$(HL_TARGET)))\nTEST_CUDA = 1\nendif\nendif\n\nifneq ($(WITH_OPENCL), )\nifneq (,$(findstring opencl,$(HL_TARGET)))\nTEST_OPENCL = 1\nendif\nendif\n\nifneq ($(WITH_METAL), )\nifneq (,$(findstring metal,$(HL_TARGET)))\nTEST_METAL = 1\nendif\nendif\n\nifneq ($(WITH_VULKAN), )\nifneq (,$(findstring vulkan,$(HL_TARGET)))\nTEST_VULKAN = 1\nendif\nendif\n\nifeq ($(UNAME), Linux)\nifneq ($(TEST_CUDA), )\nCUDA_LD_FLAGS ?= -L/usr/lib/nvidia-current -lcuda\nendif\nifneq ($(TEST_OPENCL), )\nOPENCL_LD_FLAGS ?= -lOpenCL\nendif\nHOST_OS=linux\nendif\n\nifeq ($(UNAME), Darwin)\n# Someone with an osx box with cuda installed please fix the line below\nifneq ($(TEST_CUDA), )\nCUDA_LD_FLAGS ?= -L/usr/local/cuda/lib -lcuda\nendif\nifneq ($(TEST_OPENCL), )\nOPENCL_LD_FLAGS ?= -framework OpenCL\nendif\nifneq ($(TEST_METAL), )\nMETAL_LD_FLAGS ?= -framework Metal -framework Foundation\nendif\nHOST_OS=os_x\nendif\n\nifneq ($(TEST_OPENCL), )\nTEST_CXX_FLAGS += -DTEST_OPENCL\nendif\n\nifneq ($(TEST_VULKAN), )\nTEST_CXX_FLAGS += -DTEST_VULKAN\nendif\n\nifneq ($(TEST_METAL), )\n# Using Metal APIs requires writing Objective-C++ (or Swift). Add ObjC++\n# to allow tests to create and destroy Metal contexts, etc. This requires\n# tests to be valid Objective-C++, e.g. avoiding using the identifier \"id\"\n# in certain ways. In practice this is not enough of a problem to justify\n# the work to limit which files are compiled this way.\nTEST_CXX_FLAGS += -DTEST_METAL -ObjC++ -Werror,-Wunused-command-line-argument\nendif\n\nifneq ($(TEST_CUDA), )\nTEST_CXX_FLAGS += -DTEST_CUDA\nTEST_CXX_FLAGS += -I/usr/local/cuda/include\nendif\n\n# Compiling the tutorials requires libpng\nLIBPNG_LIBS_DEFAULT = $(shell libpng-config --ldflags)\nLIBPNG_CXX_FLAGS ?= $(shell libpng-config --cflags)\n# Workaround for libpng-config pointing to 64-bit versions on linux even when we're building for 32-bit\nifneq (,$(findstring -m32,$(CXX)))\nifneq (,$(findstring x86_64,$(LIBPNG_LIBS_DEFAULT)))\nLIBPNG_LIBS ?= -lpng\nendif\nendif\nLIBPNG_LIBS ?= $(LIBPNG_LIBS_DEFAULT)\n\n# Workaround brew Cellar path for libpng-config output.\nLIBJPEG_LINKER_PATH ?= $(shell echo $(LIBPNG_LIBS_DEFAULT) | sed -e'/-L.*[/][Cc]ellar[/]libpng/!d;s=\\(.*\\)/[Cc]ellar/libpng/.*=\\1/lib=')\nLIBJPEG_LIBS ?= $(LIBJPEG_LINKER_PATH) -ljpeg\n\n# There's no libjpeg-config, unfortunately. We should look for\n# jpeglib.h one directory level up from png.h . Also handle\n# Mac OS brew installs where libpng-config returns paths\n# into the PNG cellar.\nLIBPNG_INCLUDE_DIRS = $(filter -I%,$(LIBPNG_CXX_FLAGS))\nLIBJPEG_CXX_FLAGS ?= $(shell echo $(LIBPNG_INCLUDE_DIRS) | sed -e'/[Cc]ellar[/]libpng/!s=\\(.*\\)=\\1/..=;s=\\(.*\\)/[Cc]ellar/libpng/.*=\\1/include=')\n\nIMAGE_IO_LIBS = $(LIBPNG_LIBS) $(LIBJPEG_LIBS)\nIMAGE_IO_CXX_FLAGS = $(LIBPNG_CXX_FLAGS) $(LIBJPEG_CXX_FLAGS)\n\n# We're building into the current directory $(CURDIR). Find the Halide\n# repo root directory (the location of the makefile)\nTHIS_MAKEFILE = $(realpath $(filter %Makefile, $(MAKEFILE_LIST)))\nROOT_DIR = $(strip $(shell dirname $(THIS_MAKEFILE)))\nSRC_DIR  = $(ROOT_DIR)/src\n\nTARGET=$(if $(HL_TARGET),$(HL_TARGET),host)\n\n# The following directories are all relative to the output directory (i.e. $(CURDIR), not $(SRC_DIR))\nLIB_DIR     = lib\nBIN_DIR     = bin\nDISTRIB_DIR = distrib\nINCLUDE_DIR = include\nSHARE_DIR   = share\nDOC_DIR     = $(SHARE_DIR)/doc/Halide\nBUILD_DIR   = $(BIN_DIR)/build\nFILTERS_DIR = $(BIN_DIR)/$(TARGET)/build\nTMP_DIR     = $(BUILD_DIR)/tmp\nHEXAGON_RUNTIME_LIBS_DIR = src/runtime/hexagon_remote/bin\nHEXAGON_RUNTIME_LIBS = \\\n  $(HEXAGON_RUNTIME_LIBS_DIR)/arm-32-android/libhalide_hexagon_host.so \\\n  $(HEXAGON_RUNTIME_LIBS_DIR)/arm-64-android/libhalide_hexagon_host.so \\\n  $(HEXAGON_RUNTIME_LIBS_DIR)/host/libhalide_hexagon_host.so \\\n  $(HEXAGON_RUNTIME_LIBS_DIR)/v65/hexagon_sim_remote \\\n  $(HEXAGON_RUNTIME_LIBS_DIR)/v65/libhalide_hexagon_remote_skel.so \\\n  $(HEXAGON_RUNTIME_LIBS_DIR)/v65/signed_by_debug/libhalide_hexagon_remote_skel.so\n\n# Keep this list sorted in alphabetical order.\nSOURCE_FILES = \\\n  AbstractGenerator.cpp \\\n  AddAtomicMutex.cpp \\\n  AddImageChecks.cpp \\\n  AddParameterChecks.cpp \\\n  AddSplitFactorChecks.cpp \\\n  AlignLoads.cpp \\\n  AllocationBoundsInference.cpp \\\n  ApplySplit.cpp \\\n  Argument.cpp \\\n  AssociativeOpsTable.cpp \\\n  Associativity.cpp \\\n  AsyncProducers.cpp \\\n  AutoScheduleUtils.cpp \\\n  BoundaryConditions.cpp \\\n  Bounds.cpp \\\n  BoundsInference.cpp \\\n  BoundConstantExtentLoops.cpp \\\n  BoundSmallAllocations.cpp \\\n  Buffer.cpp \\\n  Callable.cpp \\\n  CanonicalizeGPUVars.cpp \\\n  Closure.cpp \\\n  ClampUnsafeAccesses.cpp \\\n  CodeGen_ARM.cpp \\\n  CodeGen_C.cpp \\\n  CodeGen_D3D12Compute_Dev.cpp \\\n  CodeGen_GPU_Dev.cpp \\\n  CodeGen_Hexagon.cpp \\\n  CodeGen_Internal.cpp \\\n  CodeGen_LLVM.cpp \\\n  CodeGen_Metal_Dev.cpp \\\n  CodeGen_OpenCL_Dev.cpp \\\n  CodeGen_Vulkan_Dev.cpp \\\n  CodeGen_Posix.cpp \\\n  CodeGen_PowerPC.cpp \\\n  CodeGen_PTX_Dev.cpp \\\n  CodeGen_PyTorch.cpp \\\n  CodeGen_RISCV.cpp \\\n  CodeGen_WebAssembly.cpp \\\n  CodeGen_WebGPU_Dev.cpp \\\n  CodeGen_X86.cpp \\\n  CompilerLogger.cpp \\\n  ConstantBounds.cpp \\\n  ConstantInterval.cpp \\\n  CPlusPlusMangle.cpp \\\n  CSE.cpp \\\n  Debug.cpp \\\n  DebugArguments.cpp \\\n  DebugToFile.cpp \\\n  Definition.cpp \\\n  Deinterleave.cpp \\\n  Derivative.cpp \\\n  DerivativeUtils.cpp \\\n  Deserialization.cpp \\\n  DeviceArgument.cpp \\\n  DeviceInterface.cpp \\\n  Dimension.cpp \\\n  DistributeShifts.cpp \\\n  EarlyFree.cpp \\\n  Elf.cpp \\\n  EliminateBoolVectors.cpp \\\n  EmulateFloat16Math.cpp \\\n  Error.cpp \\\n  Expr.cpp \\\n  ExtractTileOperations.cpp \\\n  FastIntegerDivide.cpp \\\n  FindCalls.cpp \\\n  FindIntrinsics.cpp \\\n  FlattenNestedRamps.cpp \\\n  Float16.cpp \\\n  Func.cpp \\\n  Function.cpp \\\n  FuseGPUThreadLoops.cpp \\\n  FuzzFloatStores.cpp \\\n  Generator.cpp \\\n  HexagonOffload.cpp \\\n  HexagonOptimize.cpp \\\n  ImageParam.cpp \\\n  InferArguments.cpp \\\n  InjectHostDevBufferCopies.cpp \\\n  Inline.cpp \\\n  InlineReductions.cpp \\\n  IntegerDivisionTable.cpp \\\n  Interval.cpp \\\n  IR.cpp \\\n  IREquality.cpp \\\n  IRMatch.cpp \\\n  IRMutator.cpp \\\n  IROperator.cpp \\\n  IRPrinter.cpp \\\n  IRVisitor.cpp \\\n  JITModule.cpp \\\n  Lambda.cpp \\\n  Lerp.cpp \\\n  LICM.cpp \\\n  LLVM_Output.cpp \\\n  LLVM_Runtime_Linker.cpp \\\n  LoopCarry.cpp \\\n  Lower.cpp \\\n  LowerParallelTasks.cpp \\\n  LowerWarpShuffles.cpp \\\n  Memoization.cpp \\\n  Module.cpp \\\n  ModulusRemainder.cpp \\\n  Monotonic.cpp \\\n  ObjectInstanceRegistry.cpp \\\n  OffloadGPULoops.cpp \\\n  OptimizeShuffles.cpp \\\n  OutputImageParam.cpp \\\n  ParallelRVar.cpp \\\n  Parameter.cpp \\\n  PartitionLoops.cpp \\\n  Pipeline.cpp \\\n  Prefetch.cpp \\\n  PrintLoopNest.cpp \\\n  Profiling.cpp \\\n  PurifyIndexMath.cpp \\\n  PythonExtensionGen.cpp \\\n  Qualify.cpp \\\n  Random.cpp \\\n  RDom.cpp \\\n  Realization.cpp \\\n  RealizationOrder.cpp \\\n  RebaseLoopsToZero.cpp \\\n  Reduction.cpp \\\n  RegionCosts.cpp \\\n  RemoveDeadAllocations.cpp \\\n  RemoveExternLoops.cpp \\\n  RemoveUndef.cpp \\\n  Schedule.cpp \\\n  ScheduleFunctions.cpp \\\n  SelectGPUAPI.cpp \\\n  Serialization.cpp \\\n  Simplify.cpp \\\n  Simplify_Add.cpp \\\n  Simplify_And.cpp \\\n  Simplify_Call.cpp \\\n  Simplify_Cast.cpp \\\n  Simplify_Reinterpret.cpp \\\n  Simplify_Div.cpp \\\n  Simplify_EQ.cpp \\\n  Simplify_Exprs.cpp \\\n  Simplify_Let.cpp \\\n  Simplify_LT.cpp \\\n  Simplify_Max.cpp \\\n  Simplify_Min.cpp \\\n  Simplify_Mod.cpp \\\n  Simplify_Mul.cpp \\\n  Simplify_Not.cpp \\\n  Simplify_Or.cpp \\\n  Simplify_Select.cpp \\\n  Simplify_Shuffle.cpp \\\n  Simplify_Stmts.cpp \\\n  Simplify_Sub.cpp \\\n  SimplifyCorrelatedDifferences.cpp \\\n  SimplifySpecializations.cpp \\\n  SkipStages.cpp \\\n  SlidingWindow.cpp \\\n  Solve.cpp \\\n  SpirvIR.cpp \\\n  SplitTuples.cpp \\\n  StageStridedLoads.cpp \\\n  StmtToHTML.cpp \\\n  StorageFlattening.cpp \\\n  StorageFolding.cpp \\\n  StrictifyFloat.cpp \\\n  StripAsserts.cpp \\\n  Substitute.cpp \\\n  Target.cpp \\\n  TargetQueryOps.cpp \\\n  Tracing.cpp \\\n  TrimNoOps.cpp \\\n  Tuple.cpp \\\n  Type.cpp \\\n  UnifyDuplicateLets.cpp \\\n  UniquifyVariableNames.cpp \\\n  UnpackBuffers.cpp \\\n  UnrollLoops.cpp \\\n  UnsafePromises.cpp \\\n  Util.cpp \\\n  Var.cpp \\\n  VectorizeLoops.cpp \\\n  WasmExecutor.cpp \\\n  WrapCalls.cpp\n\n C_TEMPLATE_FILES = \\\n   CodeGen_C_prologue \\\n   CodeGen_C_vectors\n\nHTML_TEMPLATE_FILES = \\\n   StmtToHTML_dependencies.html \\\n   StmtToHTML.js \\\n   StmtToHTML.css\n\n# The externally-visible header files that go into making Halide.h.\n# Don't include anything here that includes llvm headers.\n# Also *don't* include anything that's only used internally (eg SpirvIR.h).\n# Keep this list sorted in alphabetical order.\nHEADER_FILES = \\\n  AbstractGenerator.h \\\n  AddAtomicMutex.h \\\n  AddImageChecks.h \\\n  AddParameterChecks.h \\\n  AddSplitFactorChecks.h \\\n  AlignLoads.h \\\n  AllocationBoundsInference.h \\\n  ApplySplit.h \\\n  Argument.h \\\n  AssociativeOpsTable.h \\\n  Associativity.h \\\n  AsyncProducers.h \\\n  AutoScheduleUtils.h \\\n  BoundaryConditions.h \\\n  Bounds.h \\\n  BoundsInference.h \\\n  BoundConstantExtentLoops.h \\\n  BoundSmallAllocations.h \\\n  Buffer.h \\\n  Callable.h \\\n  CanonicalizeGPUVars.h \\\n  ClampUnsafeAccesses.h \\\n  Closure.h \\\n  CodeGen_C.h \\\n  CodeGen_D3D12Compute_Dev.h \\\n  CodeGen_GPU_Dev.h \\\n  CodeGen_Internal.h \\\n  CodeGen_LLVM.h \\\n  CodeGen_Metal_Dev.h \\\n  CodeGen_OpenCL_Dev.h \\\n  CodeGen_Vulkan_Dev.h \\\n  CodeGen_Posix.h \\\n  CodeGen_PTX_Dev.h \\\n  CodeGen_PyTorch.h \\\n  CodeGen_Targets.h \\\n  CodeGen_WebGPU_Dev.h \\\n  CompilerLogger.h \\\n  ConciseCasts.h \\\n  CPlusPlusMangle.h \\\n  ConstantBounds.h \\\n  ConstantInterval.h \\\n  CSE.h \\\n  Debug.h \\\n  DebugArguments.h \\\n  DebugToFile.h \\\n  Definition.h \\\n  Deinterleave.h \\\n  Derivative.h \\\n  DerivativeUtils.h \\\n  Deserialization.h \\\n  DeviceAPI.h \\\n  DeviceArgument.h \\\n  DeviceInterface.h \\\n  Dimension.h \\\n  DistributeShifts.h \\\n  EarlyFree.h \\\n  Elf.h \\\n  EliminateBoolVectors.h \\\n  EmulateFloat16Math.h \\\n  Error.h \\\n  Expr.h \\\n  ExprUsesVar.h \\\n  Extern.h \\\n  ExternFuncArgument.h \\\n  ExtractTileOperations.h \\\n  FastIntegerDivide.h \\\n  FindCalls.h \\\n  FindIntrinsics.h \\\n  FlattenNestedRamps.h \\\n  Float16.h \\\n  Func.h \\\n  Function.h \\\n  FunctionPtr.h \\\n  FuseGPUThreadLoops.h \\\n  FuzzFloatStores.h \\\n  Generator.h \\\n  HexagonOffload.h \\\n  HexagonOptimize.h \\\n  ImageParam.h \\\n  InferArguments.h \\\n  InjectHostDevBufferCopies.h \\\n  Inline.h \\\n  InlineReductions.h \\\n  IntegerDivisionTable.h \\\n  Interval.h \\\n  IntrusivePtr.h \\\n  IR.h \\\n  IREquality.h \\\n  IRMatch.h \\\n  IRMutator.h \\\n  IROperator.h \\\n  IRPrinter.h \\\n  IRVisitor.h \\\n  WasmExecutor.h \\\n  JITModule.h \\\n  Lambda.h \\\n  Lerp.h \\\n  LICM.h \\\n  LLVM_Output.h \\\n  LLVM_Runtime_Linker.h \\\n  LoopCarry.h \\\n  Lower.h \\\n  LowerParallelTasks.h \\\n  LowerWarpShuffles.h \\\n  MainPage.h \\\n  Memoization.h \\\n  Module.h \\\n  ModulusRemainder.h \\\n  Monotonic.h \\\n  ObjectInstanceRegistry.h \\\n  OffloadGPULoops.h \\\n  OptimizeShuffles.h \\\n  OutputImageParam.h \\\n  ParallelRVar.h \\\n  Param.h \\\n  Parameter.h \\\n  PartitionLoops.h \\\n  Pipeline.h \\\n  Prefetch.h \\\n  Profiling.h \\\n  PurifyIndexMath.h \\\n  PythonExtensionGen.h \\\n  Qualify.h \\\n  Random.h \\\n  Realization.h \\\n  RDom.h \\\n  RealizationOrder.h \\\n  RebaseLoopsToZero.h \\\n  Reduction.h \\\n  RegionCosts.h \\\n  RemoveDeadAllocations.h \\\n  RemoveExternLoops.h \\\n  RemoveUndef.h \\\n  runtime/HalideBuffer.h \\\n  runtime/HalideRuntime.h \\\n  Schedule.h \\\n  ScheduleFunctions.h \\\n  Scope.h \\\n  SelectGPUAPI.h \\\n  Serialization.h \\\n  Simplify.h \\\n  SimplifyCorrelatedDifferences.h \\\n  SimplifySpecializations.h \\\n  SkipStages.h \\\n  SlidingWindow.h \\\n  Solve.h \\\n  SplitTuples.h \\\n  StageStridedLoads.h \\\n  StmtToHTML.h \\\n  StorageFlattening.h \\\n  StorageFolding.h \\\n  StrictifyFloat.h \\\n  StripAsserts.h \\\n  Substitute.h \\\n  Target.h \\\n  TargetQueryOps.h \\\n  Tracing.h \\\n  TrimNoOps.h \\\n  Tuple.h \\\n  Type.h \\\n  UnifyDuplicateLets.h \\\n  UniquifyVariableNames.h \\\n  UnpackBuffers.h \\\n  UnrollLoops.h \\\n  UnsafePromises.h \\\n  Util.h \\\n  Var.h \\\n  VectorizeLoops.h \\\n  WrapCalls.h\n\nOBJECTS = $(SOURCE_FILES:%.cpp=$(BUILD_DIR)/%.o)\nHEADERS = $(HEADER_FILES:%.h=$(SRC_DIR)/%.h)\n\nRUNTIME_CPP_COMPONENTS = \\\n  aarch64_cpu_features \\\n  alignment_128 \\\n  alignment_32 \\\n  alignment_64 \\\n  allocation_cache \\\n  android_clock \\\n  android_host_cpu_count \\\n  android_io \\\n  arm_cpu_features \\\n  cache \\\n  can_use_target \\\n  cuda \\\n  destructors \\\n  device_interface \\\n  errors \\\n  fake_get_symbol \\\n  fake_thread_pool \\\n  float16_t \\\n  fopen \\\n  fopen_lfs \\\n  force_include_types \\\n  fuchsia_clock \\\n  fuchsia_host_cpu_count \\\n  fuchsia_yield \\\n  gpu_device_selection \\\n  halide_buffer_t \\\n  hexagon_cache_allocator \\\n  hexagon_cpu_features \\\n  hexagon_dma \\\n  hexagon_dma_pool \\\n  hexagon_host \\\n  ios_io \\\n  linux_aarch64_cpu_features \\\n  linux_arm_cpu_features \\\n  linux_clock \\\n  linux_host_cpu_count \\\n  linux_yield \\\n  metal \\\n  metal_objc_arm \\\n  metal_objc_x86 \\\n  module_aot_ref_count \\\n  module_jit_ref_count \\\n  msan \\\n  msan_stubs \\\n  opencl \\\n  osx_aarch64_cpu_features \\\n  osx_arm_cpu_features \\\n  osx_clock \\\n  osx_get_symbol \\\n  osx_host_cpu_count \\\n  osx_yield \\\n  posix_aligned_alloc \\\n  posix_allocator \\\n  posix_clock \\\n  posix_error_handler \\\n  posix_get_symbol \\\n  posix_io \\\n  posix_print \\\n  posix_threads \\\n  posix_threads_tsan \\\n  posix_timer_profiler \\\n  powerpc_cpu_features \\\n  prefetch \\\n  profiler \\\n  profiler_inlined \\\n  pseudostack \\\n  qurt_allocator \\\n  qurt_hvx \\\n  qurt_hvx_vtcm \\\n  qurt_threads \\\n  qurt_threads_tsan \\\n  qurt_yield \\\n  riscv_cpu_features \\\n  runtime_api \\\n  timer_profiler \\\n  to_string \\\n  trace_helper \\\n  tracing \\\n  wasm_cpu_features \\\n  webgpu_dawn \\\n  webgpu_emscripten \\\n  windows_aarch64_cpu_features_arm \\\n  windows_clock \\\n  windows_cuda \\\n  windows_d3d12compute_arm \\\n  windows_d3d12compute_x86 \\\n  windows_get_symbol \\\n  windows_io \\\n  windows_opencl \\\n  windows_profiler \\\n  windows_threads \\\n  windows_threads_tsan \\\n  windows_vulkan \\\n  windows_yield \\\n  write_debug_image \\\n  vulkan \\\n  x86_cpu_features \\\n\nRUNTIME_LL_COMPONENTS = \\\n  aarch64 \\\n  arm \\\n  arm_no_neon \\\n  hvx_128 \\\n  posix_math \\\n  powerpc \\\n  ptx_dev \\\n  wasm_math \\\n  win32_math \\\n  x86 \\\n  x86_amx \\\n  x86_avx \\\n  x86_avx2 \\\n  x86_avx512 \\\n  x86_sse41\n\nRUNTIME_EXPORTED_INCLUDES = $(INCLUDE_DIR)/HalideRuntime.h \\\n                            $(INCLUDE_DIR)/HalideRuntimeD3D12Compute.h \\\n                            $(INCLUDE_DIR)/HalideRuntimeCuda.h \\\n                            $(INCLUDE_DIR)/HalideRuntimeHexagonDma.h \\\n                            $(INCLUDE_DIR)/HalideRuntimeHexagonHost.h \\\n                            $(INCLUDE_DIR)/HalideRuntimeOpenCL.h \\\n                            $(INCLUDE_DIR)/HalideRuntimeMetal.h\t\\\n                            $(INCLUDE_DIR)/HalideRuntimeQurt.h \\\n                            $(INCLUDE_DIR)/HalideRuntimeVulkan.h \\\n                            $(INCLUDE_DIR)/HalideRuntimeWebGPU.h \\\n                            $(INCLUDE_DIR)/HalideBuffer.h \\\n                            $(INCLUDE_DIR)/HalidePyTorchHelpers.h \\\n                            $(INCLUDE_DIR)/HalidePyTorchCudaHelpers.h\n\nINITIAL_MODULES = $(RUNTIME_CPP_COMPONENTS:%=$(BUILD_DIR)/initmod.%_32.o) \\\n                  $(RUNTIME_CPP_COMPONENTS:%=$(BUILD_DIR)/initmod.%_64.o) \\\n                  $(RUNTIME_CPP_COMPONENTS:%=$(BUILD_DIR)/initmod.%_32_debug.o) \\\n                  $(RUNTIME_CPP_COMPONENTS:%=$(BUILD_DIR)/initmod.%_64_debug.o) \\\n                  $(RUNTIME_EXPORTED_INCLUDES:$(INCLUDE_DIR)/%.h=$(BUILD_DIR)/initmod.%_h.o) \\\n                  $(C_TEMPLATE_FILES:%=$(BUILD_DIR)/c_template.%.o) \\\n                  $(HTML_TEMPLATE_FILES:%=$(BUILD_DIR)/html_template.%.o) \\\n                  $(BUILD_DIR)/initmod.inlined_c.o \\\n                  $(RUNTIME_LL_COMPONENTS:%=$(BUILD_DIR)/initmod.%_ll.o) \\\n                  $(PTX_DEVICE_INITIAL_MODULES:libdevice.%.bc=$(BUILD_DIR)/initmod_ptx.%_ll.o)\n\nTEST_DEPS = $(BIN_DIR)/libHalide.$(SHARED_EXT) $(INCLUDE_DIR)/Halide.h $(RUNTIME_EXPORTED_INCLUDES)\nifneq (,$(WITH_EXCEPTIONS))\n# The tests will link libHalide, but also the object file that\n# installs a global exception handler.\nTEST_DEPS += $(BUILD_DIR)/terminate_handler.o\nTEST_LD_FLAGS += $(BUILD_DIR)/terminate_handler.o\nendif\n\n# Add the Hexagon simulator to the rpath on Linux. (Not supported elsewhere, so no else cases.)\nifeq ($(UNAME), Linux)\nifneq (,$(WITH_HEXAGON))\nifneq (,$(HL_HEXAGON_TOOLS))\nTEST_LD_FLAGS += -Wl,--rpath=$(ROOT_DIR)/src/runtime/hexagon_remote/bin/host\nTEST_LD_FLAGS += -Wl,--rpath=$(HL_HEXAGON_TOOLS)/lib/iss\nendif\nendif\nendif\n\n.PHONY: all\nall: distrib test_internal\n\n# Depending on which linker we're using,\n# we need a different invocation to get the\n# linker map file.\nifeq ($(UNAME), Darwin)\n    MAP_FLAGS= -Wl,-map -Wl,$(BUILD_DIR)/llvm_objects/list.all\nelse\n    MAP_FLAGS= -Wl,-Map=$(BUILD_DIR)/llvm_objects/list.all\nendif\n\n$(BUILD_DIR)/llvm_objects/list: $(OBJECTS) $(INITIAL_MODULES)\n\t# Determine the relevant object files from llvm with a dummy\n\t# compilation. Passing -map to the linker gets it to list, as\n\t# part of the linker map file, the object files in which archives it uses to\n\t# resolve symbols. We only care about the libLLVM ones, which we will filter below.\n\t@mkdir -p $(@D)\n\t$(CXX) -o /dev/null -shared $(MAP_FLAGS) $(OBJECTS) $(INITIAL_MODULES) $(LLVM_STATIC_LIBS) $(LLVM_SYSTEM_LIBS) $(COMMON_LD_FLAGS) > /dev/null\n\t# if the list has changed since the previous build, or there\n\t# is no list from a previous build, then delete any old object\n\t# files and re-extract the required object files\n\tcd $(BUILD_DIR)/llvm_objects; \\\n\tcat list.all | LANG=C sed -n 's/^[^\\/]*\\(\\/[^ ()]*libLLVM.*[.]a\\)[^a-zA-Z]*\\([^ ()]*[.]o\\).*$$/\\1 \\2/p' | sort | uniq > list.new; \\\n\trm list.all; \\\n\tif cmp -s list.new list; \\\n\tthen \\\n\techo \"No changes in LLVM deps\"; \\\n\ttouch list; \\\n\telse \\\n\trm -f llvm_*.o*; \\\n\tcat list.new | sed = | sed \"N;s/\\n /\\n/;s/\\([0-9]*\\)\\n\\([^ ]*\\) \\([^ ]*\\)/ar x \\2 \\3; mv \\3 llvm_\\1_\\3/\" | bash - ; \\\n\tmv list.new list; \\\n\tfi\n\n$(LIB_DIR)/libHalide.a: $(OBJECTS) $(INITIAL_MODULES) $(BUILD_DIR)/llvm_objects/list\n\t# Archive together all the halide and llvm object files\n\t@mkdir -p $(@D)\n\t@rm -f $(LIB_DIR)/libHalide.a\n\tar q $(LIB_DIR)/libHalide.a $(OBJECTS) $(INITIAL_MODULES) $(BUILD_DIR)/llvm_objects/llvm_*.o*\n\tranlib $(LIB_DIR)/libHalide.a\n\nifeq ($(UNAME), Linux)\nLIBHALIDE_SONAME_FLAGS=-Wl,-soname,libHalide.so\nelse\nLIBHALIDE_SONAME_FLAGS=\nendif\n\nifeq ($(UNAME), Linux)\nLIBHALIDE_EXPORTS=-Wl,--version-script=$(ROOT_DIR)/src/exported_symbols.ldscript\nelse\nLIBHALIDE_EXPORTS=-Wl,-exported_symbols_list $(ROOT_DIR)/src/exported_symbols.osx\nendif\n\n$(BIN_DIR)/libHalide.$(SHARED_EXT): $(OBJECTS) $(INITIAL_MODULES)\n\t@mkdir -p $(@D)\n\t$(CXX) -shared $(LIBHALIDE_EXPORTS) $(OBJECTS) $(INITIAL_MODULES) $(LLVM_LIBS_FOR_SHARED_LIBHALIDE) $(LLVM_SYSTEM_LIBS) $(COMMON_LD_FLAGS) $(INSTALL_NAME_TOOL_LD_FLAGS) $(LIBHALIDE_SONAME_FLAGS) -o $(BIN_DIR)/libHalide.$(SHARED_EXT)\nifeq ($(UNAME), Darwin)\n\tinstall_name_tool -id $(CURDIR)/$(BIN_DIR)/libHalide.$(SHARED_EXT) $(BIN_DIR)/libHalide.$(SHARED_EXT)\nendif\n\n$(INCLUDE_DIR)/Halide.h: $(SRC_DIR)/../LICENSE.txt $(HEADERS) $(BIN_DIR)/build_halide_h\n\t@mkdir -p $(@D)\n\t$(BIN_DIR)/build_halide_h $(SRC_DIR)/../LICENSE.txt $(HEADERS) > $(INCLUDE_DIR)/Halide.h\n\t# Also generate a precompiled version in the same folder so that anything compiled with a compatible set of flags can use it\n\t@mkdir -p $(INCLUDE_DIR)/Halide.h.gch\n\t$(CXX) -std=c++17 $(TEST_CXX_FLAGS) -I$(ROOT_DIR) $(OPTIMIZE) -x c++-header $(INCLUDE_DIR)/Halide.h -o $(INCLUDE_DIR)/Halide.h.gch/Halide.default.gch\n\t$(CXX) -std=c++17 $(TEST_CXX_FLAGS) -I$(ROOT_DIR) $(OPTIMIZE_FOR_BUILD_TIME) -x c++-header $(INCLUDE_DIR)/Halide.h -o $(INCLUDE_DIR)/Halide.h.gch/Halide.test.gch\n\n$(INCLUDE_DIR)/HalideRuntime%: $(SRC_DIR)/runtime/HalideRuntime%\n\techo Copying $<\n\t@mkdir -p $(@D)\n\tcp $< $(INCLUDE_DIR)/\n\n$(INCLUDE_DIR)/HalideBuffer.h: $(SRC_DIR)/runtime/HalideBuffer.h\n\techo Copying $<\n\t@mkdir -p $(@D)\n\tcp $< $(INCLUDE_DIR)/\n\n$(INCLUDE_DIR)/HalidePyTorchHelpers.h: $(SRC_DIR)/runtime/HalidePyTorchHelpers.h\n\techo Copying $<\n\t@mkdir -p $(@D)\n\tcp $< $(INCLUDE_DIR)/\n\n$(INCLUDE_DIR)/HalidePyTorchCudaHelpers.h: $(SRC_DIR)/runtime/HalidePyTorchCudaHelpers.h\n\techo Copying $<\n\t@mkdir -p $(@D)\n\tcp $< $(INCLUDE_DIR)/\n\n$(BIN_DIR)/build_halide_h: $(ROOT_DIR)/tools/build_halide_h.cpp\n\t@-mkdir -p $(@D)\n\t$(CXX) -std=c++17 $< -o $@\n\n-include $(OBJECTS:.o=.d)\n-include $(INITIAL_MODULES:.o=.d)\n\n.SECONDARY:\n\n# Compile generic 32- or 64-bit code\n# Don't be fooled: these are just generic 32/64-bit targets for our purposes here\nRUNTIME_TRIPLE_32 = \"i386-unknown-unknown-unknown\"\nRUNTIME_TRIPLE_64 = \"x86_64-unknown-unknown-unknown\"\n\n# Windows requires special handling.  The generic windows_* modules must have -fpic elided\n# and (for 64 bit) must set wchar to be 2 bytes.  The windows_*_x86 and windows_*_arm\n# modules need to interact with specific calling conventions related to D3D12.\n#\n# TODO(marcos): generic code won't hold for ARM32... If ARM32 support becomes necessary,\n# all windows-related runtime modules will have to be wrapped in windows_*_arm.cpp files\n# for now, generic Windows 32bit code just assumes x86 (i386)\nRUNTIME_TRIPLE_WIN_X86_32 = \"i386-unknown-windows-unknown\"\nRUNTIME_TRIPLE_WIN_X86_64 = \"x86_64-unknown-windows-unknown\"\nRUNTIME_TRIPLE_WIN_ARM_32 = \"arm-unknown-windows-unknown\"\nRUNTIME_TRIPLE_WIN_ARM_64 = \"aarch64-unknown-windows-unknown\"\n# TODO: was le64 here, not sure if this is correct or not\nRUNTIME_TRIPLE_WIN_GENERIC_64 = \"x86_64-unknown-windows-unknown\"\n\nRUNTIME_TRIPLE_WEBGPU_32 = \"wasm32-unknown-unknown-unknown\"\nRUNTIME_TRIPLE_WEBGPU_64 = \"wasm64-unknown-unknown-unknown\"\n\n# `-fno-threadsafe-statics` is very important here (note that it allows us to use a 'modern' C++\n# standard but still skip threadsafe guards for static initialization in our runtime code)\n#\n# `-fno-rtti` is necessary to allow us to use classes with virtual functions in the runtime code\nRUNTIME_CXX_FLAGS = \\\n    -O3 \\\n    -std=c++17 \\\n    -ffreestanding \\\n    -fno-blocks \\\n    -fno-exceptions \\\n    -fno-unwind-tables \\\n    -fno-vectorize \\\n    -fno-threadsafe-statics \\\n    -fno-rtti \\\n    -fno-jump-tables \\\n    -Wall \\\n    -Wcast-qual \\\n    -Werror \\\n    -Wignored-qualifiers \\\n    -Wno-comment \\\n    -Wno-psabi \\\n    -Wno-unknown-warning-option \\\n    -Wno-unused-function \\\n    -Wvla \\\n    -Wsign-compare \\\n    -Wno-sync-alignment \\\n    -isystem $(ROOT_DIR)/dependencies/vulkan/include\n\n$(BUILD_DIR)/initmod.windows_%_x86_32.ll: $(SRC_DIR)/runtime/windows_%_x86.cpp\n\t@mkdir -p $(@D)\n\t$(CLANG) $(CXX_WARNING_FLAGS) $(RUNTIME_CXX_FLAGS) -m32 -target $(RUNTIME_TRIPLE_WIN_X86_32) -DCOMPILING_HALIDE_RUNTIME -DBITS_32 -emit-llvm -S $(SRC_DIR)/runtime/windows_$*_x86.cpp -o $@ -MMD -MP -MF $(BUILD_DIR)/initmod.windows_$*_x86_32.d\n\n$(BUILD_DIR)/initmod.windows_%_x86_64.ll: $(SRC_DIR)/runtime/windows_%_x86.cpp\n\t@mkdir -p $(@D)\n\t$(CLANG) $(CXX_WARNING_FLAGS) $(RUNTIME_CXX_FLAGS) -m64 -target $(RUNTIME_TRIPLE_WIN_X86_64) -DCOMPILING_HALIDE_RUNTIME -DBITS_64 -emit-llvm -S $(SRC_DIR)/runtime/windows_$*_x86.cpp -o $@ -MMD -MP -MF $(BUILD_DIR)/initmod.windows_$*_x86_64.d\n\n$(BUILD_DIR)/initmod.windows_%_arm_32.ll: $(SRC_DIR)/runtime/windows_%_arm.cpp\n\t@mkdir -p $(@D)\n\t$(CLANG) $(CXX_WARNING_FLAGS) $(RUNTIME_CXX_FLAGS) -m32 -target $(RUNTIME_TRIPLE_WIN_ARM_32) -DCOMPILING_HALIDE_RUNTIME -DBITS_32 -emit-llvm -S $(SRC_DIR)/runtime/windows_$*_arm.cpp -o $@ -MMD -MP -MF $(BUILD_DIR)/initmod.windows_$*_arm_32.d\n\n$(BUILD_DIR)/initmod.windows_%_arm_64.ll: $(SRC_DIR)/runtime/windows_%_arm.cpp\n\t@mkdir -p $(@D)\n\t$(CLANG) $(CXX_WARNING_FLAGS) $(RUNTIME_CXX_FLAGS) -m64 -target $(RUNTIME_TRIPLE_WIN_ARM_64) -DCOMPILING_HALIDE_RUNTIME -DBITS_64 -emit-llvm -S $(SRC_DIR)/runtime/windows_$*_arm.cpp -o $@ -MMD -MP -MF $(BUILD_DIR)/initmod.windows_$*_arm_64.d\n\n$(BUILD_DIR)/initmod.windows_%_32.ll: $(SRC_DIR)/runtime/windows_%.cpp\n\t@mkdir -p $(@D)\n\t$(CLANG) $(CXX_WARNING_FLAGS) $(RUNTIME_CXX_FLAGS) -m32 -target $(RUNTIME_TRIPLE_WIN_X86_32) -DCOMPILING_HALIDE_RUNTIME -DBITS_32 -emit-llvm -S $(SRC_DIR)/runtime/windows_$*.cpp -o $@ -MMD -MP -MF $(BUILD_DIR)/initmod.windows_$*_32.d\n\n$(BUILD_DIR)/initmod.windows_%_64.ll: $(SRC_DIR)/runtime/windows_%.cpp\n\t@mkdir -p $(@D)\n\t$(CLANG) $(CXX_WARNING_FLAGS) $(RUNTIME_CXX_FLAGS) -m64 -target $(RUNTIME_TRIPLE_WIN_GENERIC_64) -fshort-wchar -DCOMPILING_HALIDE_RUNTIME -DBITS_64 -emit-llvm -S $(SRC_DIR)/runtime/windows_$*.cpp -o $@ -MMD -MP -MF $(BUILD_DIR)/initmod.windows_$*_64.d\n\n$(BUILD_DIR)/initmod.webgpu_%_32.ll: $(SRC_DIR)/runtime/webgpu_%.cpp\n\t@mkdir -p $(@D)\n\t$(CLANG) $(CXX_WARNING_FLAGS) $(RUNTIME_CXX_FLAGS) -m32 -target $(RUNTIME_TRIPLE_WEBGPU_32) -DCOMPILING_HALIDE_RUNTIME -DBITS_32 -emit-llvm -S $(SRC_DIR)/runtime/webgpu_$*.cpp -o $@ -MMD -MP -MF $(BUILD_DIR)/initmod.webgpu_$*_32.d\n\n$(BUILD_DIR)/initmod.webgpu_%_64.ll: $(SRC_DIR)/runtime/webgpu_%.cpp\n\t@mkdir -p $(@D)\n\t$(CLANG) $(CXX_WARNING_FLAGS) $(RUNTIME_CXX_FLAGS) -m64 -target $(RUNTIME_TRIPLE_WEBGPU_64) -DCOMPILING_HALIDE_RUNTIME -DBITS_64 -emit-llvm -S $(SRC_DIR)/runtime/webgpu_$*.cpp -o $@ -MMD -MP -MF $(BUILD_DIR)/initmod.webgpu_$*_64.d\n\n$(BUILD_DIR)/initmod.webgpu_%_32_debug.ll: $(SRC_DIR)/runtime/webgpu_%.cpp\n\t@mkdir -p $(@D)\n\t$(CLANG) $(CXX_WARNING_FLAGS) -g -DDEBUG_RUNTIME $(RUNTIME_CXX_FLAGS) -m32 -target $(RUNTIME_TRIPLE_WEBGPU_32) -DCOMPILING_HALIDE_RUNTIME -DBITS_32 -emit-llvm -S $(SRC_DIR)/runtime/webgpu_$*.cpp -o $@ -MMD -MP -MF $(BUILD_DIR)/initmod.webgpu_$*_32_debug.d\n\n$(BUILD_DIR)/initmod.webgpu_%_64_debug.ll: $(SRC_DIR)/runtime/webgpu_%.cpp\n\t@mkdir -p $(@D)\n\t$(CLANG) $(CXX_WARNING_FLAGS) -g -DDEBUG_RUNTIME $(RUNTIME_CXX_FLAGS) -m64 -target $(RUNTIME_TRIPLE_WEBGPU_64) -DCOMPILING_HALIDE_RUNTIME -DBITS_64 -emit-llvm -S $(SRC_DIR)/runtime/webgpu_$*.cpp -o $@ -MMD -MP -MF $(BUILD_DIR)/initmod.webgpu_$*_64_debug.d\n\n$(BUILD_DIR)/initmod.%_64.ll: $(SRC_DIR)/runtime/%.cpp\n\t@mkdir -p $(@D)\n\t$(CLANG) $(CXX_WARNING_FLAGS) $(RUNTIME_CXX_FLAGS) -fpic -m64 -target $(RUNTIME_TRIPLE_64) -DCOMPILING_HALIDE_RUNTIME -DBITS_64 -emit-llvm -S $(SRC_DIR)/runtime/$*.cpp -o $@ -MMD -MP -MF $(BUILD_DIR)/initmod.$*_64.d\n\n$(BUILD_DIR)/initmod.%_32.ll: $(SRC_DIR)/runtime/%.cpp\n\t@mkdir -p $(@D)\n\t$(CLANG) $(CXX_WARNING_FLAGS) $(RUNTIME_CXX_FLAGS) -fpic -m32 -target $(RUNTIME_TRIPLE_32) -DCOMPILING_HALIDE_RUNTIME -DBITS_32 -emit-llvm -S $(SRC_DIR)/runtime/$*.cpp -o $@ -MMD -MP -MF $(BUILD_DIR)/initmod.$*_32.d\n\n$(BUILD_DIR)/initmod.windows_%_x86_32_debug.ll: $(SRC_DIR)/runtime/windows_%_x86.cpp\n\t@mkdir -p $(@D)\n\t$(CLANG) $(CXX_WARNING_FLAGS) -g -DDEBUG_RUNTIME $(RUNTIME_CXX_FLAGS) -m32 -target $(RUNTIME_TRIPLE_WIN_X86_32) -DCOMPILING_HALIDE_RUNTIME -DBITS_32 -emit-llvm -S $(SRC_DIR)/runtime/windows_$*_x86.cpp -o $@ -MMD -MP -MF $(BUILD_DIR)/initmod.windows_$*_x86_32_debug.d\n\n$(BUILD_DIR)/initmod.windows_%_x86_64_debug.ll: $(SRC_DIR)/runtime/windows_%_x86.cpp\n\t@mkdir -p $(@D)\n\t$(CLANG) $(CXX_WARNING_FLAGS) -g -DDEBUG_RUNTIME $(RUNTIME_CXX_FLAGS) -m64 -target $(RUNTIME_TRIPLE_WIN_X86_64) -DCOMPILING_HALIDE_RUNTIME -DBITS_64 -emit-llvm -S $(SRC_DIR)/runtime/windows_$*_x86.cpp -o $@ -MMD -MP -MF $(BUILD_DIR)/initmod.windows_$*_x86_64_debug.d\n\n$(BUILD_DIR)/initmod.windows_%_arm_32_debug.ll: $(SRC_DIR)/runtime/windows_%_arm.cpp\n\t@mkdir -p $(@D)\n\t$(CLANG) $(CXX_WARNING_FLAGS) -g -DDEBUG_RUNTIME $(RUNTIME_CXX_FLAGS) -m32 -target $(RUNTIME_TRIPLE_WIN_ARM_32) -DCOMPILING_HALIDE_RUNTIME -DBITS_32 -emit-llvm -S $(SRC_DIR)/runtime/windows_$*_arm.cpp -o $@ -MMD -MP -MF $(BUILD_DIR)/initmod.windows_$*_arm_32_debug.d\n\n$(BUILD_DIR)/initmod.windows_%_arm_64_debug.ll: $(SRC_DIR)/runtime/windows_%_arm.cpp\n\t@mkdir -p $(@D)\n\t$(CLANG) $(CXX_WARNING_FLAGS) -g -DDEBUG_RUNTIME $(RUNTIME_CXX_FLAGS) -m64 -target $(RUNTIME_TRIPLE_WIN_ARM_64) -DCOMPILING_HALIDE_RUNTIME -DBITS_64 -emit-llvm -S $(SRC_DIR)/runtime/windows_$*_arm.cpp -o $@ -MMD -MP -MF $(BUILD_DIR)/initmod.windows_$*_arm_64_debug.d\n\n$(BUILD_DIR)/initmod.windows_%_64_debug.ll: $(SRC_DIR)/runtime/windows_%.cpp\n\t@mkdir -p $(@D)\n\t$(CLANG) $(CXX_WARNING_FLAGS) -g -DDEBUG_RUNTIME $(RUNTIME_CXX_FLAGS) -m64 -target $(RUNTIME_TRIPLE_WIN_GENERIC_64) -DCOMPILING_HALIDE_RUNTIME -DBITS_64 -emit-llvm -S $(SRC_DIR)/runtime/windows_$*.cpp -o $@ -MMD -MP -MF $(BUILD_DIR)/initmod.windows_$*_64_debug.d\n\n$(BUILD_DIR)/initmod.%_64_debug.ll: $(SRC_DIR)/runtime/%.cpp\n\t@mkdir -p $(@D)\n\t$(CLANG) $(CXX_WARNING_FLAGS) -g -DDEBUG_RUNTIME $(RUNTIME_CXX_FLAGS) -fpic -m64 -target  $(RUNTIME_TRIPLE_64) -DCOMPILING_HALIDE_RUNTIME -DBITS_64 -emit-llvm -S $(SRC_DIR)/runtime/$*.cpp -o $@ -MMD -MP -MF $(BUILD_DIR)/initmod.$*_64_debug.d\n\n$(BUILD_DIR)/initmod.windows_%_32_debug.ll: $(SRC_DIR)/runtime/windows_%.cpp\n\t@mkdir -p $(@D)\n\t$(CLANG) $(CXX_WARNING_FLAGS) -g -DDEBUG_RUNTIME $(RUNTIME_CXX_FLAGS) -m32 -target $(RUNTIME_TRIPLE_WIN_X86_32) -DCOMPILING_HALIDE_RUNTIME -DBITS_32 -emit-llvm -S $(SRC_DIR)/runtime/windows_$*.cpp -o $@ -MMD -MP -MF $(BUILD_DIR)/initmod.windows_$*_32_debug.d\n\n$(BUILD_DIR)/initmod.%_32_debug.ll: $(SRC_DIR)/runtime/%.cpp\n\t@mkdir -p $(@D)\n\t$(CLANG) $(CXX_WARNING_FLAGS) -g -DDEBUG_RUNTIME -O3 $(RUNTIME_CXX_FLAGS) -fpic -m32 -target $(RUNTIME_TRIPLE_32) -DCOMPILING_HALIDE_RUNTIME -DBITS_32 -emit-llvm -S $(SRC_DIR)/runtime/$*.cpp -o $@ -MMD -MP -MF $(BUILD_DIR)/initmod.$*_32_debug.d\n\n$(BUILD_DIR)/initmod.%_ll.ll: $(SRC_DIR)/runtime/%.ll\n\t@mkdir -p $(@D)\n\tcp $(SRC_DIR)/runtime/$*.ll $(BUILD_DIR)/initmod.$*_ll.ll\n\n$(BUILD_DIR)/initmod.%.bc: $(BUILD_DIR)/initmod.%.ll\n\t$(LLVM_AS) $(BUILD_DIR)/initmod.$*.ll -o $(BUILD_DIR)/initmod.$*.bc\n\n$(BUILD_DIR)/initmod.%.cpp: $(BIN_DIR)/binary2cpp $(BUILD_DIR)/initmod.%.bc\n\t./$(BIN_DIR)/binary2cpp halide_internal_initmod_$* < $(BUILD_DIR)/initmod.$*.bc > $@\n\n$(BUILD_DIR)/initmod.%_h.cpp: $(BIN_DIR)/binary2cpp $(SRC_DIR)/runtime/%.h\n\t./$(BIN_DIR)/binary2cpp halide_internal_runtime_header_$*_h < $(SRC_DIR)/runtime/$*.h > $@\n\n# Any c in the runtime that must be inlined needs to be copy-pasted into the output for the C backend.\n$(BUILD_DIR)/initmod.inlined_c.cpp: $(BIN_DIR)/binary2cpp $(SRC_DIR)/runtime/halide_buffer_t.cpp\n\t./$(BIN_DIR)/binary2cpp halide_internal_initmod_inlined_c < $(SRC_DIR)/runtime/halide_buffer_t.cpp > $@\n\n$(BUILD_DIR)/initmod_ptx.%_ll.cpp: $(BIN_DIR)/binary2cpp $(SRC_DIR)/runtime/nvidia_libdevice_bitcode/libdevice.%.bc\n\t./$(BIN_DIR)/binary2cpp halide_internal_initmod_ptx_$(basename $*)_ll < $(SRC_DIR)/runtime/nvidia_libdevice_bitcode/libdevice.$*.bc > $@\n\n$(BUILD_DIR)/c_template.%.cpp: $(BIN_DIR)/binary2cpp $(SRC_DIR)/%.template.cpp\n\t./$(BIN_DIR)/binary2cpp halide_c_template_$* < $(SRC_DIR)/$*.template.cpp > $@\n\n$(BUILD_DIR)/html_template.%.cpp: $(BIN_DIR)/binary2cpp $(SRC_DIR)/irvisualizer/html_template_%\n\t./$(BIN_DIR)/binary2cpp halide_html_template_$(subst .,_,$*) < $(SRC_DIR)/irvisualizer/html_template_$* > $@\n\n$(BIN_DIR)/binary2cpp: $(ROOT_DIR)/tools/binary2cpp.cpp\n\t@mkdir -p $(@D)\n\t$(CXX) $< -o $@\n\n$(BIN_DIR)/regexp_replace: $(ROOT_DIR)/tools/regexp_replace.cpp\n\t@mkdir -p $(@D)\n\t$(CXX) -std=c++11 $< -o $@\n\n$(BUILD_DIR)/initmod_ptx.%_ll.o: $(BUILD_DIR)/initmod_ptx.%_ll.cpp\n\t$(CXX) -c $< -o $@ -MMD -MP -MF $(BUILD_DIR)/$*.d -MT $(BUILD_DIR)/$*.o\n\n$(BUILD_DIR)/initmod.%.o: $(BUILD_DIR)/initmod.%.cpp\n\t$(CXX) -c $< -o $@ -MMD -MP -MF $(BUILD_DIR)/$*.d -MT $(BUILD_DIR)/$*.o\n\n$(BUILD_DIR)/c_template.%.o: $(BUILD_DIR)/c_template.%.cpp\n\t$(CXX) -c $< -o $@ -MMD -MP -MF $(BUILD_DIR)/$*.d -MT $(BUILD_DIR)/$*.o\n\n$(BUILD_DIR)/html_template.%.o: $(BUILD_DIR)/html_template.%.cpp\n\t$(CXX) -c $< -o $@ -MMD -MP -MF $(BUILD_DIR)/$*.d -MT $(BUILD_DIR)/$*.o\n\n$(BUILD_DIR)/%.o: $(SRC_DIR)/%.cpp\n\t@mkdir -p $(@D)\n\t$(CXX) $(CXX_FLAGS) -c $< -o $@ -MMD -MP -MF $(BUILD_DIR)/$*.d -MT $(BUILD_DIR)/$*.o\n\n$(BUILD_DIR)/Simplify_%.o: $(SRC_DIR)/Simplify_%.cpp $(SRC_DIR)/Simplify_Internal.h\n\t@mkdir -p $(@D)\n\t$(CXX) $(CXX_FLAGS) -c $< -o $@ -MMD -MP -MF $(BUILD_DIR)/Simplify_$*.d -MT $@\n\n$(BUILD_DIR)/terminate_handler.o: $(ROOT_DIR)/test/common/terminate_handler.cpp\n\t@mkdir -p $(@D)\n\t$(CXX) $(CXX_FLAGS) -c $< -o $@ -MMD -MP -MF $(BUILD_DIR)/$*.d -MT $(BUILD_DIR)/$*.o\n\n.PHONY: clean\nclean:\n\trm -rf $(LIB_DIR)\n\trm -rf $(BIN_DIR)\n\trm -rf $(BUILD_DIR)\n\trm -rf $(TMP_DIR)\n\trm -rf $(FILTERS_DIR)\n\trm -rf $(INCLUDE_DIR)\n\trm -rf $(SHARE_DIR)\n\trm -rf $(DISTRIB_DIR)\n\trm -rf $(ROOT_DIR)/apps/*/bin\n\nCORRECTNESS_TESTS = $(shell ls $(ROOT_DIR)/test/correctness/*.cpp) $(shell ls $(ROOT_DIR)/test/correctness/*.c)\nPERFORMANCE_TESTS = $(shell ls $(ROOT_DIR)/test/performance/*.cpp)\nERROR_TESTS = $(shell ls $(ROOT_DIR)/test/error/*.cpp)\nWARNING_TESTS = $(shell ls $(ROOT_DIR)/test/warning/*.cpp)\nRUNTIME_TESTS = $(shell ls $(ROOT_DIR)/test/runtime/*.cpp)\nGENERATOR_EXTERNAL_TESTS := $(shell ls $(ROOT_DIR)/test/generator/*test.cpp)\nGENERATOR_EXTERNAL_TEST_GENERATOR := $(shell ls $(ROOT_DIR)/test/generator/*_generator.cpp)\nTUTORIALS = $(filter-out %_generate.cpp, $(shell ls $(ROOT_DIR)/tutorial/*.cpp))\nMULLAPUDI2016_TESTS = $(shell ls $(ROOT_DIR)/test/autoschedulers/mullapudi2016/*.cpp)\nLI2018_TESTS = $(shell ls $(ROOT_DIR)/test/autoschedulers/li2018/test.cpp)\nADAMS2019_TESTS = $(shell ls $(ROOT_DIR)/test/autoschedulers/adams2019/test.cpp)\n\ntest_correctness: $(CORRECTNESS_TESTS:$(ROOT_DIR)/test/correctness/%.cpp=quiet_correctness_%) $(CORRECTNESS_TESTS:$(ROOT_DIR)/test/correctness/%.c=quiet_correctness_%)\ntest_performance: $(PERFORMANCE_TESTS:$(ROOT_DIR)/test/performance/%.cpp=performance_%)\ntest_error: $(ERROR_TESTS:$(ROOT_DIR)/test/error/%.cpp=error_%)\ntest_warning: $(WARNING_TESTS:$(ROOT_DIR)/test/warning/%.cpp=warning_%)\ntest_runtime: $(RUNTIME_TESTS:$(ROOT_DIR)/test/runtime/%.cpp=runtime_%)\ntest_tutorial: $(TUTORIALS:$(ROOT_DIR)/tutorial/%.cpp=tutorial_%)\ntest_valgrind: $(CORRECTNESS_TESTS:$(ROOT_DIR)/test/correctness/%.cpp=valgrind_%)\ntest_avx512: $(CORRECTNESS_TESTS:$(ROOT_DIR)/test/correctness/%.cpp=avx512_%)\ntest_autoschedulers: test_mullapudi2016 test_li2018 test_adams2019\ntest_auto_schedule: test_autoschedulers\n\n.PHONY: test_correctness_multi_gpu\ntest_correctness_multi_gpu: correctness_gpu_multi_device\n\n# There are 3 types of tests for generators:\n# 1) Externally-written aot-based tests\n# 2) Externally-written aot-based tests (compiled using C++ backend)\n# 3) Externally-written JIT-based tests\nGENERATOR_AOT_TESTS = $(GENERATOR_EXTERNAL_TESTS:$(ROOT_DIR)/test/generator/%_aottest.cpp=generator_aot_%)\nGENERATOR_AOTCPP_TESTS = $(GENERATOR_EXTERNAL_TESTS:$(ROOT_DIR)/test/generator/%_aottest.cpp=generator_aotcpp_%)\nGENERATOR_JIT_TESTS = $(GENERATOR_EXTERNAL_TESTS:$(ROOT_DIR)/test/generator/%_jittest.cpp=generator_jit_%)\n\n# multitarget test doesn't make any sense for the CPP backend; just skip it.\nGENERATOR_AOTCPP_TESTS := $(filter-out generator_aotcpp_multitarget,$(GENERATOR_AOTCPP_TESTS))\n\n# Note that many of the AOT-CPP tests are broken right now;\n# remove AOT-CPP tests that don't (yet) work for C++ backend\n# (each tagged with the *known* blocking issue(s))\n\n# sanitizercoverage relies on LLVM-specific hooks, so it will never work with the C backend\nGENERATOR_AOTCPP_TESTS := $(filter-out generator_aotcpp_sanitizercoverage,$(GENERATOR_AOTCPP_TESTS))\n\n# https://github.com/halide/Halide/issues/2084 (only if opencl enabled))\n#GENERATOR_AOTCPP_TESTS := $(filter-out generator_aotcpp_cleanup_on_error,$(GENERATOR_AOTCPP_TESTS))\n\n# https://github.com/halide/Halide/issues/7273\nGENERATOR_AOTCPP_TESTS := $(filter-out generator_aotcpp_msan,$(GENERATOR_AOTCPP_TESTS))\n\n# https://github.com/halide/Halide/issues/7272\nGENERATOR_AOTCPP_TESTS := $(filter-out generator_aotcpp_memory_profiler_mandelbrot,$(GENERATOR_AOTCPP_TESTS))\n\n# https://github.com/halide/Halide/issues/4916\nGENERATOR_AOTCPP_TESTS := $(filter-out generator_aotcpp_stubtest,$(GENERATOR_AOTCPP_TESTS))\nGENERATOR_AOTCPP_TESTS := $(filter-out generator_aotcpp_stubuser,$(GENERATOR_AOTCPP_TESTS))\n\n# Build requirements are finicky, testing non-C++ backend is good enough here\nGENERATOR_AOTCPP_TESTS := $(filter-out generator_aotcpp_gpu_multi_context_threaded,$(GENERATOR_AOTCPP_TESTS))\n\ntest_aotcpp_generator: $(GENERATOR_AOTCPP_TESTS)\n\n# This is just a test to ensure than RunGen builds and links for a critical mass of Generators;\n# not all will work directly (e.g. due to missing define_externs at link time), so we disable\n# those known to be broken for plausible reasons.\nGENERATOR_BUILD_RUNGEN_TESTS = $(GENERATOR_EXTERNAL_TEST_GENERATOR:$(ROOT_DIR)/test/generator/%_generator.cpp=$(FILTERS_DIR)/%.rungen)\nGENERATOR_BUILD_RUNGEN_TESTS := $(filter-out $(FILTERS_DIR)/async_parallel.rungen,$(GENERATOR_BUILD_RUNGEN_TESTS))\nGENERATOR_BUILD_RUNGEN_TESTS := $(filter-out $(FILTERS_DIR)/cxx_mangling_define_extern.rungen,$(GENERATOR_BUILD_RUNGEN_TESTS))\nGENERATOR_BUILD_RUNGEN_TESTS := $(filter-out $(FILTERS_DIR)/define_extern_opencl.rungen,$(GENERATOR_BUILD_RUNGEN_TESTS))\nGENERATOR_BUILD_RUNGEN_TESTS := $(filter-out $(FILTERS_DIR)/msan.rungen,$(GENERATOR_BUILD_RUNGEN_TESTS))\nGENERATOR_BUILD_RUNGEN_TESTS := $(filter-out $(FILTERS_DIR)/sanitizercoverage.rungen,$(GENERATOR_BUILD_RUNGEN_TESTS))\nGENERATOR_BUILD_RUNGEN_TESTS := $(filter-out $(FILTERS_DIR)/multitarget.rungen,$(GENERATOR_BUILD_RUNGEN_TESTS))\nGENERATOR_BUILD_RUNGEN_TESTS := $(filter-out $(FILTERS_DIR)/nested_externs.rungen,$(GENERATOR_BUILD_RUNGEN_TESTS))\nGENERATOR_BUILD_RUNGEN_TESTS := $(filter-out $(FILTERS_DIR)/tiled_blur.rungen,$(GENERATOR_BUILD_RUNGEN_TESTS))\nGENERATOR_BUILD_RUNGEN_TESTS := $(filter-out $(FILTERS_DIR)/extern_output.rungen,$(GENERATOR_BUILD_RUNGEN_TESTS))\nGENERATOR_BUILD_RUNGEN_TESTS := $(filter-out $(FILTERS_DIR)/gpu_multi_context_threaded.rungen,$(GENERATOR_BUILD_RUNGEN_TESTS))\nGENERATOR_BUILD_RUNGEN_TESTS := $(GENERATOR_BUILD_RUNGEN_TESTS) \\\n\t$(FILTERS_DIR)/multi_rungen \\\n\t$(FILTERS_DIR)/multi_rungen2 \\\n\t$(FILTERS_DIR)/rungen_test \\\n\t$(FILTERS_DIR)/registration_test\n\ntest_rungen: $(GENERATOR_BUILD_RUNGEN_TESTS)\n\t$(FILTERS_DIR)/rungen_test\n\t$(FILTERS_DIR)/registration_test\n\ntest_generator: $(GENERATOR_AOT_TESTS) $(GENERATOR_AOTCPP_TESTS) $(GENERATOR_JIT_TESTS) $(GENERATOR_BUILD_RUNGEN_TESTS)\n\t$(FILTERS_DIR)/rungen_test\n\t$(FILTERS_DIR)/registration_test\n\nALL_TESTS = test_internal test_correctness test_error test_tutorial test_warning test_runtime test_generator\n\n# These targets perform timings of each test. For most tests this includes Halide JIT compile times, and run times.\n# For generator tests they time the compile time only. The times are recorded in CSV files.\ntime_compilation_correctness: init_time_compilation_correctness $(CORRECTNESS_TESTS:$(ROOT_DIR)/test/correctness/%.cpp=time_compilation_test_%)\ntime_compilation_performance: init_time_compilation_performance $(PERFORMANCE_TESTS:$(ROOT_DIR)/test/performance/%.cpp=time_compilation_performance_%)\ntime_compilation_generator: init_time_compilation_generator $(GENERATOR_TESTS:$(ROOT_DIR)/test/generator/%_aottest.cpp=time_compilation_generator_%)\n\ninit_time_compilation_%:\n\techo \"TEST,User (s),System (s),Real\" > $(@:init_time_compilation_%=compile_times_%.csv)\n\nTIME_COMPILATION ?= /usr/bin/time -a -f \"$@,%U,%S,%E\" -o\n\nrun_tests: $(ALL_TESTS)\n\tmake -f $(THIS_MAKEFILE) test_performance test_autoschedulers\n\n.PHONY: build_tests\nbuild_tests: $(CORRECTNESS_TESTS:$(ROOT_DIR)/test/correctness/%.cpp=$(BIN_DIR)/correctness_%) \\\n\t$(PERFORMANCE_TESTS:$(ROOT_DIR)/test/performance/%.cpp=$(BIN_DIR)/performance_%) \\\n\t$(ERROR_TESTS:$(ROOT_DIR)/test/error/%.cpp=$(BIN_DIR)/error_%) \\\n\t$(WARNING_TESTS:$(ROOT_DIR)/test/warning/%.cpp=$(BIN_DIR)/warning_%) \\\n\t$(RUNTIME_TESTS:$(ROOT_DIR)/test/runtime/%.cpp=$(BIN_DIR)/runtime_%) \\\n\t$(GENERATOR_EXTERNAL_TESTS:$(ROOT_DIR)/test/generator/%_aottest.cpp=$(BIN_DIR)/$(TARGET)/generator_aot_%) \\\n\t$(GENERATOR_EXTERNAL_TESTS:$(ROOT_DIR)/test/generator/%_jittest.cpp=$(BIN_DIR)/generator_jit_%) \\\n\t$(MULLAPUDI2016_TESTS:$(ROOT_DIR)/test/autoschedulers/mullapudi2016/%.cpp=$(BIN_DIR)/mullapudi2016_%) \\\n\t$(LI2018_TESTS:$(ROOT_DIR)/test/autoschedulers/li2018/%.cpp=$(BIN_DIR)/li2018_%) \\\n\t$(ADAMS2019_TESTS:$(ROOT_DIR)/test/autoschedulers/adams2019/%.cpp=$(BIN_DIR)/adams2019_%)\n\nclean_generator:\n\trm -rf $(BIN_DIR)/*.generator\n\trm -rf $(BIN_DIR)/*/runtime.a\n\trm -rf $(FILTERS_DIR)\n\trm -rf $(BIN_DIR)/*/generator_*\n\trm -rf $(BUILD_DIR)/*_generator.o\n\trm -f $(BUILD_DIR)/GenGen.o\n\trm -f $(BUILD_DIR)/RunGenMain.o\n\ntime_compilation_tests: time_compilation_correctness time_compilation_performance time_compilation_generator\n\n# These are just aliases to the autoscheduler plugins to make Generator rules & deps a little terser\nBIN_ADAMS2019=$(BIN_DIR)/libautoschedule_adams2019.$(PLUGIN_EXT)\nBIN_LI2018=$(BIN_DIR)/libautoschedule_li2018.$(PLUGIN_EXT)\nBIN_MULLAPUDI2016=$(BIN_DIR)/libautoschedule_mullapudi2016.$(PLUGIN_EXT)\n\n$(BUILD_DIR)/GenGen.o: $(ROOT_DIR)/tools/GenGen.cpp $(INCLUDE_DIR)/Halide.h\n\t@mkdir -p $(@D)\n\t$(CXX) -c $< $(TEST_CXX_FLAGS) -I$(INCLUDE_DIR) -o $@\n\n# Make an empty generator for generating runtimes.\n$(BIN_DIR)/runtime.generator: $(BUILD_DIR)/GenGen.o $(BIN_DIR)/libHalide.$(SHARED_EXT)\n\t@mkdir -p $(@D)\n\t$(CXX) $< $(TEST_LD_FLAGS) -o $@\n\n# Generate a standalone runtime for a given target string\n$(BIN_DIR)/%/runtime.a: $(BIN_DIR)/runtime.generator\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -r runtime -o $(CURDIR)/$(BIN_DIR)/$* target=$*\n\n$(BIN_DIR)/test_internal: $(ROOT_DIR)/test/internal.cpp $(TEST_DEPS)\n\t@mkdir -p $(@D)\n\t$(CXX) $(TEST_CXX_FLAGS) $< -I$(SRC_DIR) $(TEST_LD_FLAGS) -o $@\n\nifneq (,$(shell which flatc))\n$(BUILD_DIR)/Deserialization.o : $(BUILD_DIR)/halide_ir.fbs.h\n$(BUILD_DIR)/Serialization.o : $(BUILD_DIR)/halide_ir.fbs.h\nendif\n\n# Generated header for serialization/deserialization\n$(BUILD_DIR)/halide_ir.fbs.h: $(SRC_DIR)/halide_ir.fbs\n\t@mkdir -p $(@D)\n\tflatc --cpp --cpp-std C++17 --no-union-value-namespacing --keep-prefix --filename-suffix \".fbs\" -o $(BUILD_DIR) $^\n\n# Correctness test that link against libHalide\n$(BIN_DIR)/correctness_%: $(ROOT_DIR)/test/correctness/%.cpp $(TEST_DEPS)\n\t@mkdir -p $(@D)\n\t$(CXX) $(TEST_CXX_FLAGS) -I$(ROOT_DIR)/src/runtime -I$(ROOT_DIR)/test/common $(OPTIMIZE_FOR_BUILD_TIME) $< -I$(INCLUDE_DIR) $(TEST_LD_FLAGS) -o $@\n\n# Correctness tests that do NOT link against libHalide\n$(BIN_DIR)/correctness_plain_c_includes: $(ROOT_DIR)/test/correctness/plain_c_includes.c $(RUNTIME_EXPORTED_INCLUDES)\n\t$(CXX) -x c -Wall -Werror -I$(ROOT_DIR)/src/runtime $(OPTIMIZE_FOR_BUILD_TIME) $< -I$(ROOT_DIR)/src/runtime -o $@\n\n# Note that this test must *not* link in either libHalide, or a Halide runtime;\n# this test should be usable without either.\n$(BIN_DIR)/correctness_halide_buffer: $(ROOT_DIR)/test/correctness/halide_buffer.cpp $(INCLUDE_DIR)/HalideBuffer.h $(RUNTIME_EXPORTED_INCLUDES)\n\t$(CXX) $(TEST_CXX_FLAGS) $(OPTIMIZE_FOR_BUILD_TIME) $< -I$(INCLUDE_DIR) -o $@\n\n# The image_io test additionally needs to link to libpng and\n# libjpeg.\n$(BIN_DIR)/correctness_image_io: $(ROOT_DIR)/test/correctness/image_io.cpp $(TEST_DEPS)\n\t$(CXX) $(TEST_CXX_FLAGS) $(IMAGE_IO_CXX_FLAGS) -I$(ROOT_DIR)/src/runtime -I$(ROOT_DIR)/test/common $(OPTIMIZE_FOR_BUILD_TIME) $< -I$(INCLUDE_DIR) $(TEST_LD_FLAGS) $(IMAGE_IO_LIBS) -o $@\n\n# OpenCL runtime correctness test requires runtime.a to be linked.\n$(BIN_DIR)/$(TARGET)/correctness_opencl_runtime: $(ROOT_DIR)/test/correctness/opencl_runtime.cpp $(RUNTIME_EXPORTED_INCLUDES) $(BIN_DIR)/$(TARGET)/runtime.a\n\t@mkdir -p $(@D)\n\t$(CXX) $(BIN_DIR)/$(TARGET)/runtime.a $(TEST_CXX_FLAGS) -I$(ROOT_DIR)/src/runtime $(OPTIMIZE_FOR_BUILD_TIME) $< -I$(INCLUDE_DIR) $(TEST_LD_FLAGS) -o $@\n\n$(BIN_DIR)/performance_%: $(ROOT_DIR)/test/performance/%.cpp $(TEST_DEPS)\n\t$(CXX) $(TEST_CXX_FLAGS) $(OPTIMIZE) $< -I$(INCLUDE_DIR) -I$(ROOT_DIR)/src/runtime -I$(ROOT_DIR)/test/common $(TEST_LD_FLAGS) -o $@\n\n# Error tests that link against libHalide\n$(BIN_DIR)/error_%: $(ROOT_DIR)/test/error/%.cpp $(TEST_DEPS)\n\t$(CXX) $(TEST_CXX_FLAGS) -I$(ROOT_DIR)/src/runtime -I$(ROOT_DIR)/test/common $(OPTIMIZE_FOR_BUILD_TIME) $< -I$(INCLUDE_DIR) $(TEST_LD_FLAGS) -o $@\n\n$(BIN_DIR)/warning_%: $(ROOT_DIR)/test/warning/%.cpp $(TEST_DEPS)\n\t$(CXX) $(TEST_CXX_FLAGS) -I$(ROOT_DIR)/test/common $(OPTIMIZE_FOR_BUILD_TIME) $< -I$(INCLUDE_DIR) $(TEST_LD_FLAGS) -o $@\n\n# Runtime tests that test internals\nRUNTIME_TESTS_CXXFLAGS = -fno-rtti -fno-exceptions -fno-threadsafe-statics -Wno-builtin-declaration-mismatch -DCOMPILING_HALIDE_RUNTIME -DCOMPILING_HALIDE_RUNTIME_TESTS\n\n$(BIN_DIR)/runtime_internal_common.o: $(ROOT_DIR)/test/runtime/common.cpp $(ROOT_DIR)/test/runtime/common.h\n\t@mkdir -p $(@D)\n\t$(CXX) $(TEST_CXX_FLAGS) $(RUNTIME_TESTS_CXXFLAGS) -I$(ROOT_DIR)/test/runtime -I$(ROOT_DIR)/src/runtime $(OPTIMIZE_FOR_BUILD_TIME) -c $< -o $@\n\n$(BIN_DIR)/runtime_internal_msan_stubs.o: $(ROOT_DIR)/src/runtime/msan_stubs.cpp\n\t@mkdir -p $(@D)\n\t$(CXX) $(TEST_CXX_FLAGS) $(RUNTIME_TESTS_CXXFLAGS) -I$(ROOT_DIR)/test/runtime -I$(ROOT_DIR)/src/runtime $(OPTIMIZE_FOR_BUILD_TIME) -c $< -o $@\n\n$(BIN_DIR)/runtime_internal_to_string.o: $(ROOT_DIR)/src/runtime/to_string.cpp\n\t@mkdir -p $(@D)\n\t$(CXX) $(TEST_CXX_FLAGS) $(RUNTIME_TESTS_CXXFLAGS) -I$(ROOT_DIR)/test/runtime -I$(ROOT_DIR)/src/runtime $(OPTIMIZE_FOR_BUILD_TIME) -c $< -o $@\n\n$(BIN_DIR)/runtime_common:\n\t@mkdir -p $(@D)\n\ttouch $@\n\n$(BIN_DIR)/runtime_%: $(ROOT_DIR)/test/runtime/%.cpp $(BIN_DIR)/runtime_internal_common.o $(BIN_DIR)/runtime_internal_msan_stubs.o $(BIN_DIR)/runtime_internal_to_string.o\n\t@mkdir -p $(@D)\n\t$(CXX) $(TEST_CXX_FLAGS) $(RUNTIME_TESTS_CXXFLAGS) -I$(ROOT_DIR)/test/runtime -I$(ROOT_DIR)/src/runtime $(OPTIMIZE_FOR_BUILD_TIME) $^ $(COMMON_LD_FLAGS) -o $@\n\n# Auto schedule tests that link against libHalide\n$(BIN_DIR)/mullapudi2016_%: $(ROOT_DIR)/test/autoschedulers/mullapudi2016/%.cpp $(TEST_DEPS)\n\t$(CXX) $(TEST_CXX_FLAGS) $(OPTIMIZE_FOR_BUILD_TIME) $< -I$(INCLUDE_DIR) $(TEST_LD_FLAGS) -o $@\n\n$(BIN_DIR)/li2018_%: $(ROOT_DIR)/test/autoschedulers/li2018/%.cpp $(TEST_DEPS)\n\t$(CXX) $(TEST_CXX_FLAGS) $(OPTIMIZE_FOR_BUILD_TIME) $< -I$(INCLUDE_DIR) $(TEST_LD_FLAGS) -o $@\n\n$(BIN_DIR)/adams2019_%: $(ROOT_DIR)/test/autoschedulers/adams2019/%.cpp $(TEST_DEPS)\n\t$(CXX) $(TEST_CXX_FLAGS) $(OPTIMIZE_FOR_BUILD_TIME) $< -I$(INCLUDE_DIR) $(TEST_LD_FLAGS) -o $@\n\n# TODO(srj): this doesn't auto-delete, why not?\n.INTERMEDIATE: $(BIN_DIR)/%.generator\n\n# By default, %.generator is produced by building %_generator.cpp\n# Note that the rule includes all _generator.cpp files, so that generator with define_extern\n# usage can just add deps later.\n$(BUILD_DIR)/%_generator.o: $(ROOT_DIR)/test/generator/%_generator.cpp $(INCLUDE_DIR)/Halide.h\n\t@mkdir -p $(@D)\n\t$(CXX) $(TEST_CXX_FLAGS) -I$(INCLUDE_DIR) -I$(CURDIR)/$(FILTERS_DIR) -c $< -o $@\n\n$(BIN_DIR)/%.generator: $(BUILD_DIR)/GenGen.o $(TEST_DEPS) $(BUILD_DIR)/%_generator.o\n\t@mkdir -p $(@D)\n\t$(CXX) $(filter %.cpp %.o %.a,$^) $(TEST_LD_FLAGS) -o $@\n\nNAME_MANGLING_TARGET=$(NON_EMPTY_TARGET)-c_plus_plus_name_mangling\n\nGEN_AOT_OUTPUTS=-e static_library,c_header,c_source,registration\n\n# By default, %.a/.h are produced by executing %.generator. Runtimes are not included in these.\n# (We explicitly also generate .cpp output here as well, as additional test surface for the C++ backend.)\n$(FILTERS_DIR)/%.a: $(BIN_DIR)/%.generator\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g $* $(GEN_AOT_OUTPUTS) -o $(CURDIR)/$(FILTERS_DIR) target=$(TARGET)-no_runtime\n\n$(FILTERS_DIR)/%.h: $(FILTERS_DIR)/%.a\n\t@echo $@ produced implicitly by $^\n\n$(FILTERS_DIR)/%.halide_generated.cpp: $(FILTERS_DIR)/%.a\n\t@echo $@ produced implicitly by $^\n\n$(FILTERS_DIR)/%.registration.cpp: $(FILTERS_DIR)/%.a\n\t@echo $@ produced implicitly by $^\n\n$(FILTERS_DIR)/%.stub.h: $(BIN_DIR)/%.generator\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g $* -n $* -o $(CURDIR)/$(FILTERS_DIR) -e cpp_stub\n\n$(FILTERS_DIR)/cxx_mangling_externs.o: $(ROOT_DIR)/test/generator/cxx_mangling_externs.cpp\n\t@mkdir -p $(@D)\n\t$(CXX) $(GEN_AOT_CXX_FLAGS) -c $(filter-out %.h,$^) $(GEN_AOT_INCLUDES) -o $@\n\n# If we want to use a Generator with custom GeneratorParams, we need to write\n# custom rules: to pass the GeneratorParams, and to give a unique function and file name.\n$(FILTERS_DIR)/cxx_mangling.a: $(BIN_DIR)/cxx_mangling.generator $(FILTERS_DIR)/cxx_mangling_externs.o\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g cxx_mangling $(GEN_AOT_OUTPUTS),function_info_header -o $(CURDIR)/$(FILTERS_DIR) target=$(TARGET)-no_runtime-c_plus_plus_name_mangling -f \"HalideTest::AnotherNamespace::cxx_mangling\"\n\t$(ROOT_DIR)/tools/makelib.sh $@ $@ $(FILTERS_DIR)/cxx_mangling_externs.o\n\nifneq ($(TEST_CUDA), )\n# Also build with a gpu target to ensure that the GPU-Host generation\n# code handles name mangling properly. (Note that we don't need to\n# run this code, just check for link errors.)\n$(FILTERS_DIR)/cxx_mangling_gpu.a: $(BIN_DIR)/cxx_mangling.generator $(FILTERS_DIR)/cxx_mangling_externs.o\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g cxx_mangling $(GEN_AOT_OUTPUTS) -o $(CURDIR)/$(FILTERS_DIR) target=$(TARGET)-no_runtime-c_plus_plus_name_mangling-cuda-cuda_capability_30 -f \"HalideTest::cxx_mangling_gpu\"\n\t$(ROOT_DIR)/tools/makelib.sh $@ $@ $(FILTERS_DIR)/cxx_mangling_externs.o\nendif\n\n$(FILTERS_DIR)/cxx_mangling_define_extern_externs.o: $(ROOT_DIR)/test/generator/cxx_mangling_define_extern_externs.cpp $(FILTERS_DIR)/cxx_mangling.h\n\t@mkdir -p $(@D)\n\t$(CXX) $(GEN_AOT_CXX_FLAGS) -c $(filter-out %.h,$^) $(GEN_AOT_INCLUDES) -o $@\n\n$(FILTERS_DIR)/cxx_mangling_define_extern.a: $(BIN_DIR)/cxx_mangling_define_extern.generator $(FILTERS_DIR)/cxx_mangling_define_extern_externs.o\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g cxx_mangling_define_extern $(GEN_AOT_OUTPUTS) -o $(CURDIR)/$(FILTERS_DIR) target=$(TARGET)-no_runtime-c_plus_plus_name_mangling-user_context -f \"HalideTest::cxx_mangling_define_extern\"\n\t$(ROOT_DIR)/tools/makelib.sh $@ $@  $(FILTERS_DIR)/cxx_mangling_define_extern_externs.o\n\n# pyramid needs a custom arg.\n$(FILTERS_DIR)/pyramid.a: $(BIN_DIR)/pyramid.generator\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g pyramid -f pyramid $(GEN_AOT_OUTPUTS) -o $(CURDIR)/$(FILTERS_DIR) target=$(TARGET)-no_runtime levels=10\n\n$(FILTERS_DIR)/string_param.a: $(BIN_DIR)/string_param.generator\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g string_param -f string_param  $(GEN_AOT_OUTPUTS) -o $(CURDIR)/$(FILTERS_DIR) target=$(TARGET)-no_runtime rpn_expr=\"5 y * x +\"\n\n# memory_profiler_mandelbrot need profiler set\n$(FILTERS_DIR)/memory_profiler_mandelbrot.a: $(BIN_DIR)/memory_profiler_mandelbrot.generator\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g memory_profiler_mandelbrot -f memory_profiler_mandelbrot $(GEN_AOT_OUTPUTS) -o $(CURDIR)/$(FILTERS_DIR) target=$(TARGET)-no_runtime-profile\n\n$(FILTERS_DIR)/alias_with_offset_42.a: $(BIN_DIR)/alias.generator\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g alias_with_offset_42 -f alias_with_offset_42 $(GEN_AOT_OUTPUTS) -o $(CURDIR)/$(FILTERS_DIR) target=$(TARGET)-no_runtime\n\n$(FILTERS_DIR)/alias_Adams2019.a: $(BIN_DIR)/alias.generator autoschedulers\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g alias_Adams2019 -f alias_Adams2019 $(GEN_AOT_OUTPUTS) -o $(CURDIR)/$(FILTERS_DIR) target=$(TARGET)-no_runtime -p $(BIN_ADAMS2019)\n\n$(FILTERS_DIR)/alias_Li2018.a: $(BIN_DIR)/alias.generator autoschedulers\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g alias_Li2018 -f alias_Li2018 $(GEN_AOT_OUTPUTS) -o $(CURDIR)/$(FILTERS_DIR) target=$(TARGET)-no_runtime -p $(BIN_LI2018)\n\n$(FILTERS_DIR)/alias_Mullapudi2016.a: $(BIN_DIR)/alias.generator autoschedulers\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g alias_Mullapudi2016 -f alias_Mullapudi2016 $(GEN_AOT_OUTPUTS) -o $(CURDIR)/$(FILTERS_DIR) target=$(TARGET)-no_runtime -p $(BIN_MULLAPUDI2016)\n\nMETADATA_TESTER_GENERATOR_ARGS=\\\n\tinput.type=uint8 input.dim=3 \\\n\tdim_only_input_buffer.type=uint8 \\\n\tuntyped_input_buffer.type=uint8 untyped_input_buffer.dim=3 \\\n\toutput.type=float32,float32 output.dim=3 \\\n\tinput_not_nod.type=uint8 input_not_nod.dim=3 \\\n\tinput_nod.dim=3 \\\n\tinput_not.type=uint8 \\\n\tarray_input.size=2 \\\n\tarray_i8.size=2 \\\n\tarray_i16.size=2 \\\n\tarray_i32.size=2 \\\n\tarray_h.size=2 \\\n\tbuffer_array_input2.dim=3 \\\n\tbuffer_array_input3.type=float32 \\\n\tbuffer_array_input4.dim=3 \\\n\tbuffer_array_input4.type=float32 \\\n\tbuffer_array_input5.size=2 \\\n\tbuffer_array_input6.size=2 \\\n\tbuffer_array_input6.dim=3 \\\n\tbuffer_array_input7.size=2 \\\n\tbuffer_array_input7.type=float32 \\\n\tbuffer_array_input8.size=2 \\\n\tbuffer_array_input8.dim=3 \\\n\tbuffer_array_input8.type=float32 \\\n\tbuffer_f16_untyped.type=float16 \\\n\tuntyped_scalar_input.type=uint8 \\\n\tarray_outputs.size=2 \\\n\tarray_outputs7.size=2 \\\n\tarray_outputs8.size=2 \\\n\tarray_outputs9.size=2\n\n# metadata_tester is built with and without user-context.\n# Also note that metadata_tester (but not metadata_tester_ucon) is built as \"multitarget\" to verify that\n# the metadata names are correctly emitted.\n$(FILTERS_DIR)/metadata_tester.a: $(BIN_DIR)/metadata_tester.generator\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g metadata_tester -f metadata_tester -e static_library,c_header,registration,function_info_header -o $(CURDIR)/$(FILTERS_DIR) target=$(TARGET)-no_runtime,$(TARGET)-no_runtime-no_bounds_query $(METADATA_TESTER_GENERATOR_ARGS)\n\n# c_source output doesn't work properly with multitarget output\n$(FILTERS_DIR)/metadata_tester.halide_generated.cpp: $(BIN_DIR)/metadata_tester.generator\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g metadata_tester -f metadata_tester -e c_source -o $(CURDIR)/$(FILTERS_DIR) target=$(TARGET)-no_runtime $(METADATA_TESTER_GENERATOR_ARGS)\n\n$(FILTERS_DIR)/metadata_tester_ucon.a: $(BIN_DIR)/metadata_tester.generator\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g metadata_tester -f metadata_tester_ucon $(GEN_AOT_OUTPUTS),function_info_header -o $(CURDIR)/$(FILTERS_DIR) target=$(TARGET)-user_context-no_runtime $(METADATA_TESTER_GENERATOR_ARGS)\n\n$(BIN_DIR)/$(TARGET)/generator_aot_metadata_tester: $(FILTERS_DIR)/metadata_tester_ucon.a\n\n$(BIN_DIR)/$(TARGET)/generator_aotcpp_metadata_tester: $(FILTERS_DIR)/metadata_tester_ucon.halide_generated.cpp\n\n$(FILTERS_DIR)/multitarget.a: $(BIN_DIR)/multitarget.generator\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g multitarget -f \"HalideTest::multitarget\" $(GEN_AOT_OUTPUTS) -o $(CURDIR)/$(FILTERS_DIR) \\\n\t\ttarget=$(TARGET)-no_bounds_query-no_runtime-c_plus_plus_name_mangling,$(TARGET)-no_runtime-c_plus_plus_name_mangling  \\\n\t\t-e assembly,bitcode,c_source,c_header,stmt_html,static_library,stmt\n\n$(FILTERS_DIR)/msan.a: $(BIN_DIR)/msan.generator\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g msan -f msan $(GEN_AOT_OUTPUTS) -o $(CURDIR)/$(FILTERS_DIR) target=$(TARGET)-msan\n\n$(FILTERS_DIR)/sanitizercoverage.a: $(BIN_DIR)/sanitizercoverage.generator\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g sanitizercoverage -f sanitizercoverage $(GEN_AOT_OUTPUTS) -o $(CURDIR)/$(FILTERS_DIR) target=$(TARGET)-sanitizer_coverage\n\n# user_context needs to be generated with user_context as the first argument to its calls\n$(FILTERS_DIR)/user_context.a: $(BIN_DIR)/user_context.generator\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g user_context $(GEN_AOT_OUTPUTS) -o $(CURDIR)/$(FILTERS_DIR) target=$(TARGET)-no_runtime-user_context\n\n# ditto for user_context_insanity\n$(FILTERS_DIR)/user_context_insanity.a: $(BIN_DIR)/user_context_insanity.generator\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g user_context_insanity $(GEN_AOT_OUTPUTS) -o $(CURDIR)/$(FILTERS_DIR) target=$(TARGET)-no_runtime-user_context\n\n# ditto for async_parallel\n$(FILTERS_DIR)/async_parallel.a: $(BIN_DIR)/async_parallel.generator\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g async_parallel $(GEN_AOT_OUTPUTS) -o $(CURDIR)/$(FILTERS_DIR) target=$(TARGET)-no_runtime-user_context\n\n# Some .generators have additional dependencies (usually due to define_extern usage).\n# These typically require two extra dependencies:\n# (1) Ensuring the extra _generator.cpp is built into the .generator.\n# (2) Ensuring the extra .a is linked into the final output.\n\n# TODO(srj): we really want to say \"anything that depends on tiled_blur.a also depends on blur2x2.a\";\n# is there a way to specify that in Make?\n$(BIN_DIR)/$(TARGET)/generator_aot_tiled_blur: $(FILTERS_DIR)/blur2x2.a\nifneq ($(TEST_CUDA), )\n$(BIN_DIR)/$(TARGET)/generator_aot_cxx_mangling: $(FILTERS_DIR)/cxx_mangling_gpu.a\nendif\n$(BIN_DIR)/$(TARGET)/generator_aot_cxx_mangling_define_extern: $(FILTERS_DIR)/cxx_mangling.a\n\n$(BIN_DIR)/$(TARGET)/generator_aotcpp_tiled_blur: $(FILTERS_DIR)/blur2x2.halide_generated.cpp\nifneq ($(TEST_CUDA), )\n$(BIN_DIR)/$(TARGET)/generator_aotcpp_cxx_mangling: $(FILTERS_DIR)/cxx_mangling_gpu.halide_generated.cpp\nendif\n$(BIN_DIR)/$(TARGET)/generator_aotcpp_cxx_mangling: $(FILTERS_DIR)/cxx_mangling_externs.o\n$(BIN_DIR)/$(TARGET)/generator_aotcpp_cxx_mangling_define_extern: $(FILTERS_DIR)/cxx_mangling.halide_generated.cpp $(FILTERS_DIR)/cxx_mangling_externs.o $(FILTERS_DIR)/cxx_mangling_define_extern_externs.o\n\n$(BUILD_DIR)/stubuser_generator.o: $(FILTERS_DIR)/stubtest.stub.h $(FILTERS_DIR)/configure.stub.h\n$(BIN_DIR)/stubuser.generator: $(BUILD_DIR)/stubtest_generator.o $(BUILD_DIR)/configure_generator.o\n\n# stubtest has input and output funcs with undefined types and array sizes; this is fine for stub\n# usage (the types can be inferred), but for AOT compilation, we must make the types\n# concrete via generator args.\nSTUBTEST_GENERATOR_ARGS=\\\n\tuntyped_buffer_input.type=uint8 untyped_buffer_input.dim=3 \\\n\tsimple_input.type=float32 \\\n\tarray_input.type=float32 array_input.size=2 \\\n\tint_arg.size=2 \\\n\ttuple_output.type=float32,float32 \\\n\tvectorize=true\n\n$(FILTERS_DIR)/stubtest.a: $(BIN_DIR)/stubtest.generator\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g stubtest -f stubtest $(GEN_AOT_OUTPUTS) -o $(CURDIR)/$(FILTERS_DIR) target=$(TARGET)-no_runtime $(STUBTEST_GENERATOR_ARGS)\n\n$(FILTERS_DIR)/stubuser_auto.a: $(BIN_DIR)/stubuser.generator $(BIN_MULLAPUDI2016)\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g stubuser $(GEN_AOT_OUTPUTS) -o $(CURDIR)/$(FILTERS_DIR) -f stubuser_auto target=$(TARGET)-no_runtime autoscheduler=Mullapudi2016 -p $(BIN_MULLAPUDI2016)\n\n$(FILTERS_DIR)/autograd_grad.a: $(BIN_DIR)/autograd.generator $(BIN_MULLAPUDI2016)\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g autograd $(GEN_AOT_OUTPUTS) -o $(CURDIR)/$(FILTERS_DIR) -f autograd_grad target=$(TARGET)-no_runtime autoscheduler=Mullapudi2016 -d 1 -p $(BIN_MULLAPUDI2016)\n\n# Usually, it's considered best practice to have one Generator per\n# .cpp file, with the generator-name and filename matching;\n# nested_externs_generators.cpp is a counterexample, and thus requires\n# some special casing to get right.  First, make a special rule to\n# build each of the Generators in nested_externs_generator.cpp (which\n# all have the form nested_externs_*).\n$(FILTERS_DIR)/nested_externs_%.a: $(BIN_DIR)/nested_externs.generator\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g nested_externs_$* $(GEN_AOT_OUTPUTS) -o $(CURDIR)/$(FILTERS_DIR) target=$(TARGET)-no_runtime-user_context-c_plus_plus_name_mangling\n\n# Similarly, gpu_multi needs two different kernels to test compilation caching.\n# Also requies user-context.\n$(FILTERS_DIR)/gpu_multi_context_threaded_%.a: $(BIN_DIR)/gpu_multi_context_threaded.generator\n\t@mkdir -p $(@D)\n\t$(CURDIR)/$< -g gpu_multi_context_threaded_$* $(GEN_AOT_OUTPUTS) -o $(CURDIR)/$(FILTERS_DIR) target=$(TARGET)-no_runtime-user_context\n\nGEN_AOT_CXX_FLAGS=$(TEST_CXX_FLAGS) -Wno-unknown-pragmas -Wno-unused-variable\nGEN_AOT_INCLUDES=-I$(INCLUDE_DIR) -I$(FILTERS_DIR) -I$(ROOT_DIR)/src/runtime -I$(ROOT_DIR)/test/common -I $(ROOT_DIR)/apps/support -I $(SRC_DIR)/runtime -I$(ROOT_DIR)/tools\nGEN_AOT_LD_FLAGS=$(COMMON_LD_FLAGS)\n\nifneq ($(TEST_METAL), )\n# Unlike cuda and opencl, which dynamically go find the appropriate symbols, metal requires actual linking.\nGEN_AOT_LD_FLAGS+=$(METAL_LD_FLAGS)\nendif\n\n# By default, %_aottest.cpp depends on $(FILTERS_DIR)/%.a/.h (but not libHalide).\n$(BIN_DIR)/$(TARGET)/generator_aot_%: $(ROOT_DIR)/test/generator/%_aottest.cpp $(FILTERS_DIR)/%.a $(FILTERS_DIR)/%.h $(RUNTIME_EXPORTED_INCLUDES) $(BIN_DIR)/$(TARGET)/runtime.a\n\t@mkdir -p $(@D)\n\t$(CXX) $(GEN_AOT_CXX_FLAGS) $(filter %.cpp %.o %.a,$^) $(GEN_AOT_INCLUDES) $(GEN_AOT_LD_FLAGS) -o $@\n\n# Also make AOT testing targets that depends on the .cpp output (rather than .a).\n$(BIN_DIR)/$(TARGET)/generator_aotcpp_%: $(ROOT_DIR)/test/generator/%_aottest.cpp $(FILTERS_DIR)/%.halide_generated.cpp $(FILTERS_DIR)/%.h $(RUNTIME_EXPORTED_INCLUDES) $(BIN_DIR)/$(TARGET)/runtime.a\n\t@mkdir -p $(@D)\n\t$(CXX) $(GEN_AOT_CXX_FLAGS) $(filter %.cpp %.o %.a,$^) $(OPTIMIZE) $(GEN_AOT_INCLUDES) $(GEN_AOT_LD_FLAGS) -o $@\n\n# MSAN test doesn't use the standard runtime\n$(BIN_DIR)/$(TARGET)/generator_aot_msan: $(ROOT_DIR)/test/generator/msan_aottest.cpp $(FILTERS_DIR)/msan.a $(FILTERS_DIR)/msan.h $(RUNTIME_EXPORTED_INCLUDES)\n\t@mkdir -p $(@D)\n\t$(CXX) $(GEN_AOT_CXX_FLAGS) $(filter-out %.h,$^) $(GEN_AOT_INCLUDES) $(GEN_AOT_LD_FLAGS) -o $@\n\n# SanitizerCoverage test doesn't use the standard runtime\n$(BIN_DIR)/$(TARGET)/generator_aot_sanitizercoverage: $(ROOT_DIR)/test/generator/sanitizercoverage_aottest.cpp $(FILTERS_DIR)/sanitizercoverage.a $(FILTERS_DIR)/sanitizercoverage.h $(RUNTIME_EXPORTED_INCLUDES)\n\t@mkdir -p $(@D)\n\t$(CXX) $(GEN_AOT_CXX_FLAGS) $(filter-out %.h,$^) $(GEN_AOT_INCLUDES) $(GEN_AOT_LD_FLAGS) -o $@\n\n# SanitizerCoverage test will never work with C++ backend\n$(BIN_DIR)/$(TARGET)/generator_aotcpp_sanitizercoverage: $(ROOT_DIR)/test/generator/sanitizercoverage_aottest.cpp\n\t@mkdir -p $(@D)\n\techo \"SanitizerCoverage test will never work with C++ backend\"\n\texit 1\n\n# alias has additional deps to link in\n$(BIN_DIR)/$(TARGET)/generator_aot_alias: $(ROOT_DIR)/test/generator/alias_aottest.cpp $(FILTERS_DIR)/alias.a $(FILTERS_DIR)/alias_with_offset_42.a $(FILTERS_DIR)/alias_Adams2019.a $(FILTERS_DIR)/alias_Li2018.a $(FILTERS_DIR)/alias_Mullapudi2016.a  $(RUNTIME_EXPORTED_INCLUDES) $(BIN_DIR)/$(TARGET)/runtime.a\n\t@mkdir -p $(@D)\n\t$(CXX) $(GEN_AOT_CXX_FLAGS) $(filter %.cpp %.o %.a,$^) $(GEN_AOT_INCLUDES) $(GEN_AOT_LD_FLAGS) -o $@\n\n$(BIN_DIR)/$(TARGET)/generator_aotcpp_alias: $(ROOT_DIR)/test/generator/alias_aottest.cpp $(FILTERS_DIR)/alias.halide_generated.cpp $(FILTERS_DIR)/alias_with_offset_42.halide_generated.cpp $(FILTERS_DIR)/alias_Adams2019.halide_generated.cpp $(FILTERS_DIR)/alias_Li2018.halide_generated.cpp $(FILTERS_DIR)/alias_Mullapudi2016.halide_generated.cpp  $(RUNTIME_EXPORTED_INCLUDES) $(BIN_DIR)/$(TARGET)/runtime.a\n\t@mkdir -p $(@D)\n\t$(CXX) $(GEN_AOT_CXX_FLAGS) $(filter %.cpp %.o %.a,$^) $(GEN_AOT_INCLUDES) $(GEN_AOT_LD_FLAGS) -o $@\n\n# autograd has additional deps to link in\n$(BIN_DIR)/$(TARGET)/generator_aot_autograd: $(ROOT_DIR)/test/generator/autograd_aottest.cpp $(FILTERS_DIR)/autograd.a $(FILTERS_DIR)/autograd_grad.a $(RUNTIME_EXPORTED_INCLUDES) $(BIN_DIR)/$(TARGET)/runtime.a\n\t@mkdir -p $(@D)\n\t$(CXX) $(GEN_AOT_CXX_FLAGS) $(filter %.cpp %.o %.a,$^) $(GEN_AOT_INCLUDES) $(GEN_AOT_LD_FLAGS) -o $@\n\n$(BIN_DIR)/$(TARGET)/generator_aotcpp_autograd: $(ROOT_DIR)/test/generator/autograd_aottest.cpp $(FILTERS_DIR)/autograd.halide_generated.cpp $(FILTERS_DIR)/autograd_grad.halide_generated.cpp $(RUNTIME_EXPORTED_INCLUDES) $(BIN_DIR)/$(TARGET)/runtime.a\n\t@mkdir -p $(@D)\n\t$(CXX) $(GEN_AOT_CXX_FLAGS) $(filter %.cpp %.o %.a,$^) $(GEN_AOT_INCLUDES) $(GEN_AOT_LD_FLAGS) -o $@\n\n# nested_externs has additional deps to link in\n$(BIN_DIR)/$(TARGET)/generator_aot_nested_externs: $(ROOT_DIR)/test/generator/nested_externs_aottest.cpp $(FILTERS_DIR)/nested_externs_root.a $(FILTERS_DIR)/nested_externs_inner.a $(FILTERS_DIR)/nested_externs_combine.a $(FILTERS_DIR)/nested_externs_leaf.a $(RUNTIME_EXPORTED_INCLUDES) $(BIN_DIR)/$(TARGET)/runtime.a\n\t@mkdir -p $(@D)\n\t$(CXX) $(GEN_AOT_CXX_FLAGS) $(filter %.cpp %.o %.a,$^) $(GEN_AOT_INCLUDES) $(GEN_AOT_LD_FLAGS) -o $@\n\n$(BIN_DIR)/$(TARGET)/generator_aotcpp_nested_externs: $(ROOT_DIR)/test/generator/nested_externs_aottest.cpp $(FILTERS_DIR)/nested_externs_root.halide_generated.cpp $(FILTERS_DIR)/nested_externs_inner.halide_generated.cpp $(FILTERS_DIR)/nested_externs_combine.halide_generated.cpp $(FILTERS_DIR)/nested_externs_leaf.halide_generated.cpp $(RUNTIME_EXPORTED_INCLUDES) $(BIN_DIR)/$(TARGET)/runtime.a\n\t@mkdir -p $(@D)\n\t$(CXX) $(GEN_AOT_CXX_FLAGS) $(filter %.cpp %.o %.a,$^) $(GEN_AOT_INCLUDES) $(GEN_AOT_LD_FLAGS) -o $@\n\n# The gpu object lifetime test needs the debug runtime\n$(BIN_DIR)/$(TARGET)/generator_aot_gpu_object_lifetime: $(ROOT_DIR)/test/generator/gpu_object_lifetime_aottest.cpp $(FILTERS_DIR)/gpu_object_lifetime.a $(FILTERS_DIR)/gpu_object_lifetime.h $(RUNTIME_EXPORTED_INCLUDES) $(BIN_DIR)/$(TARGET)-debug/runtime.a\n\t@mkdir -p $(@D)\n\t$(CXX) $(GEN_AOT_CXX_FLAGS) $(filter %.cpp %.o %.a,$^) $(GEN_AOT_INCLUDES) $(GEN_AOT_LD_FLAGS) $(TEST_LD_FLAGS) -o $@\n\n# acquire_release explicitly uses CUDA/OpenCL APIs, so link those here.\n$(BIN_DIR)/$(TARGET)/generator_aot_acquire_release: $(ROOT_DIR)/test/generator/acquire_release_aottest.cpp $(FILTERS_DIR)/acquire_release.a $(FILTERS_DIR)/acquire_release.h $(RUNTIME_EXPORTED_INCLUDES) $(BIN_DIR)/$(TARGET)/runtime.a\n\t@mkdir -p $(@D)\n\t$(CXX) $(GEN_AOT_CXX_FLAGS) $(filter %.cpp %.o %.a,$^) $(GEN_AOT_INCLUDES) $(GEN_AOT_LD_FLAGS) $(OPENCL_LD_FLAGS) $(CUDA_LD_FLAGS) -o $@\n\n$(BIN_DIR)/$(TARGET)/generator_aotcpp_acquire_release: $(ROOT_DIR)/test/generator/acquire_release_aottest.cpp $(FILTERS_DIR)/acquire_release.halide_generated.cpp $(FILTERS_DIR)/acquire_release.h $(RUNTIME_EXPORTED_INCLUDES) $(BIN_DIR)/$(TARGET)/runtime.a\n\t@mkdir -p $(@D)\n\t$(CXX) $(GEN_AOT_CXX_FLAGS) $(filter %.cpp %.o %.a,$^) $(GEN_AOT_INCLUDES) $(GEN_AOT_LD_FLAGS) $(OPENCL_LD_FLAGS) $(CUDA_LD_FLAGS) -o $@\n\n# define_extern_opencl explicitly uses OpenCL APIs, so link those here.\n$(BIN_DIR)/$(TARGET)/generator_aot_define_extern_opencl: $(ROOT_DIR)/test/generator/define_extern_opencl_aottest.cpp $(FILTERS_DIR)/define_extern_opencl.a $(FILTERS_DIR)/define_extern_opencl.h $(RUNTIME_EXPORTED_INCLUDES) $(BIN_DIR)/$(TARGET)/runtime.a\n\t@mkdir -p $(@D)\n\t$(CXX) $(GEN_AOT_CXX_FLAGS) $(filter %.cpp %.o %.a,$^) $(GEN_AOT_INCLUDES) $(GEN_AOT_LD_FLAGS) $(OPENCL_LD_FLAGS) -o $@\n\n$(BIN_DIR)/$(TARGET)/generator_aotcpp_define_extern_opencl: $(ROOT_DIR)/test/generator/define_extern_opencl_aottest.cpp $(FILTERS_DIR)/define_extern_opencl.halide_generated.cpp $(FILTERS_DIR)/define_extern_opencl.h $(RUNTIME_EXPORTED_INCLUDES) $(BIN_DIR)/$(TARGET)/runtime.a\n\t@mkdir -p $(@D)\n\t$(CXX) $(GEN_AOT_CXX_FLAGS) $(filter %.cpp %.o %.a,$^) $(GEN_AOT_INCLUDES) $(GEN_AOT_LD_FLAGS) $(OPENCL_LD_FLAGS) -o $@\n\n# By default, %_jittest.cpp depends on libHalide, plus the stubs for the Generator. These are external tests that use the JIT.\n$(BIN_DIR)/generator_jit_%: $(ROOT_DIR)/test/generator/%_jittest.cpp $(TEST_DEPS) $(FILTERS_DIR)/%.stub.h $(BUILD_DIR)/%_generator.o\n\t@mkdir -p $(@D)\n\t$(CXX) -g $(TEST_CXX_FLAGS) $(filter %.cpp %.o %.a,$^) -I$(INCLUDE_DIR) -I$(FILTERS_DIR) -I $(ROOT_DIR)/apps/support $(TEST_LD_FLAGS) -o $@\n\n# stubuser is run with autoscheduling too\n$(BIN_DIR)/$(TARGET)/generator_aot_stubuser: $(ROOT_DIR)/test/generator/stubuser_aottest.cpp $(FILTERS_DIR)/stubuser.a $(FILTERS_DIR)/stubuser.h $(FILTERS_DIR)/stubuser_auto.a $(FILTERS_DIR)/stubuser_auto.h $(RUNTIME_EXPORTED_INCLUDES) $(BIN_DIR)/$(TARGET)/runtime.a\n\t@mkdir -p $(@D)\n\t$(CXX) $(GEN_AOT_CXX_FLAGS) $(filter %.cpp %.o %.a,$^) $(GEN_AOT_INCLUDES) $(GEN_AOT_LD_FLAGS) -o $@\n\n# generator_aot_multitarget is run multiple times, with different env vars.\ngenerator_aot_multitarget: $(BIN_DIR)/$(TARGET)/generator_aot_multitarget\n\t@mkdir -p $(@D)\n\tHL_MULTITARGET_TEST_USE_NOBOUNDSQUERY_FEATURE=0 $(CURDIR)/$<\n\tHL_MULTITARGET_TEST_USE_NOBOUNDSQUERY_FEATURE=1 $(CURDIR)/$<\n\t@-echo\n\n# gpu_multi_context_threaded has additional deps to link in\n$(BIN_DIR)/$(TARGET)/generator_aot_gpu_multi_context_threaded: $(ROOT_DIR)/test/generator/gpu_multi_context_threaded_aottest.cpp \\\n\t                                                       $(FILTERS_DIR)/gpu_multi_context_threaded_add.a \\\n\t                                                       $(FILTERS_DIR)/gpu_multi_context_threaded_mul.a \\\n\t                                                       $(RUNTIME_EXPORTED_INCLUDES) $(BIN_DIR)/$(TARGET)/runtime.a\n\t@mkdir -p $(@D)\n\t$(CXX) $(GEN_AOT_CXX_FLAGS) $(filter %.cpp %.o %.a,$^) $(GEN_AOT_INCLUDES) $(GEN_AOT_LD_FLAGS) $(OPENCL_LD_FLAGS) $(CUDA_LD_FLAGS) -o $@\n\n$(BIN_DIR)/$(TARGET)/generator_aotcpp_gpu_multi_context_threaded: $(ROOT_DIR)/test/generator/gpu_multi_context_threaded_aottest.cpp \\\n\t                                                          $(FILTERS_DIR)/gpu_multi_context_threaded_add.halide_generated.cpp \\\n\t                                                          $(FILTERS_DIR)/gpu_multi_context_threaded_mul.halide_generated.cpp \\\n\t                                                          $(RUNTIME_EXPORTED_INCLUDES) $(BIN_DIR)/$(TARGET)/runtime.a\n\t@mkdir -p $(@D)\n\t$(CXX) $(GEN_AOT_CXX_FLAGS) $(filter %.cpp %.o %.a,$^) $(GEN_AOT_INCLUDES) $(GEN_AOT_LD_FLAGS) $(OPENCL_LD_FLAGS) $(CUDA_LD_FLAGS) -o $@\n\n# nested externs doesn't actually contain a generator named\n# \"nested_externs\", and has no internal tests in any case.\ntest_generator_nested_externs:\n\t@echo \"Skipping\"\n\n# gpu_multi actually contain a generator named\n# \"gpu_multi\", and has no internal tests in any case.\ntest_generator_gpu_multi:\n\t@echo \"Skipping\"\n\n# gpu_multi_context_threaded actually contain a generator named\n# \"gpu_multi\", and has no internal tests in any case.\ntest_generator_gpu_multi_context_threaded:\n\t@echo \"Skipping\"\n\n$(BUILD_DIR)/RunGenMain.o: $(ROOT_DIR)/tools/RunGenMain.cpp $(RUNTIME_EXPORTED_INCLUDES) $(ROOT_DIR)/tools/RunGen.h\n\t@mkdir -p $(@D)\n\t$(CXX) -c $< $(filter-out -g, $(TEST_CXX_FLAGS)) $(OPTIMIZE) -Os $(IMAGE_IO_CXX_FLAGS) -I$(INCLUDE_DIR) -I $(SRC_DIR)/runtime -I$(ROOT_DIR)/tools -o $@\n\n$(FILTERS_DIR)/%.registration.o: $(FILTERS_DIR)/%.registration.cpp\n\t@mkdir -p $(@D)\n\t$(CXX) -c $< $(TEST_CXX_FLAGS) -o $@\n\n$(FILTERS_DIR)/%.rungen: $(BUILD_DIR)/RunGenMain.o $(BIN_DIR)/$(TARGET)/runtime.a $(FILTERS_DIR)/%.registration.o $(FILTERS_DIR)/%.a\n\t@mkdir -p $(@D)\n\t$(CXX) -std=c++17 -I$(FILTERS_DIR) \\\n\t\t$(BUILD_DIR)/RunGenMain.o \\\n\t\t$(BIN_DIR)/$(TARGET)/runtime.a \\\n\t\t$(call alwayslink,$(FILTERS_DIR)/$*.registration.o) \\\n\t\t$(FILTERS_DIR)/$*.a \\\n\t\t$(GEN_AOT_LD_FLAGS) $(IMAGE_IO_LIBS) -o $@\n\nRUNARGS ?=\n\n$(FILTERS_DIR)/%.run: $(FILTERS_DIR)/%.rungen\n\t$(CURDIR)/$< $(RUNARGS)\n\t@-echo\n\n$(FILTERS_DIR)/%.registration_extra.o: $(FILTERS_DIR)/%.registration.cpp\n\t@mkdir -p $(@D)\n\t$(CXX) -c $< $(TEST_CXX_FLAGS) -DHALIDE_REGISTER_EXTRA_KEY_VALUE_PAIRS_FUNC=halide_register_extra_key_value_pairs_$* -o $@\n\n# Test the registration mechanism, independent of RunGen.\n# Note that this depends on the registration_extra.o (rather than registration.o)\n# because it compiles with HALIDE_REGISTER_EXTRA_KEY_VALUE_PAIRS_FUNC defined.\n$(FILTERS_DIR)/registration_test: $(ROOT_DIR)/test/generator/registration_test.cpp \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t $(BIN_DIR)/$(TARGET)/runtime.a \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t $(FILTERS_DIR)/blur2x2.registration_extra.o $(FILTERS_DIR)/blur2x2.a \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t $(FILTERS_DIR)/cxx_mangling.registration_extra.o $(FILTERS_DIR)/cxx_mangling.a \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t $(FILTERS_DIR)/pyramid.registration_extra.o $(FILTERS_DIR)/pyramid.a\n\t@mkdir -p $(@D)\n\t$(CXX) $(GEN_AOT_CXX_FLAGS) $(GEN_AOT_INCLUDES) \\\n\t\t\t$(ROOT_DIR)/test/generator/registration_test.cpp \\\n\t\t\t$(FILTERS_DIR)/blur2x2.registration_extra.o \\\n\t\t\t$(FILTERS_DIR)/cxx_mangling.registration_extra.o \\\n\t\t\t$(FILTERS_DIR)/pyramid.registration_extra.o \\\n\t\t\t$(FILTERS_DIR)/blur2x2.a \\\n\t\t\t$(FILTERS_DIR)/cxx_mangling.a \\\n\t\t\t$(FILTERS_DIR)/pyramid.a \\\n      $(BIN_DIR)/$(TARGET)/runtime.a \\\n\t\t\t$(GEN_AOT_LD_FLAGS) $(IMAGE_IO_LIBS) -o $@\n\n# Test RunGen itself\n$(FILTERS_DIR)/rungen_test: $(ROOT_DIR)/test/generator/rungen_test.cpp \\\n\t\t\t\t\t\t\t$(BIN_DIR)/$(TARGET)/runtime.a \\\n\t\t\t\t\t\t\t$(FILTERS_DIR)/example.registration.o \\\n\t\t\t\t\t\t\t$(FILTERS_DIR)/example.a\n\t@mkdir -p $(@D)\n\t$(CXX) $(GEN_AOT_CXX_FLAGS) $(IMAGE_IO_CXX_FLAGS) $(GEN_AOT_INCLUDES) \\\n\t\t\t$(ROOT_DIR)/test/generator/rungen_test.cpp \\\n\t\t\t$(BIN_DIR)/$(TARGET)/runtime.a \\\n\t\t\t$(call alwayslink,$(FILTERS_DIR)/example.registration.o) \\\n\t\t\t$(FILTERS_DIR)/example.a \\\n\t\t\t$(GEN_AOT_LD_FLAGS) $(IMAGE_IO_LIBS) -o $@\n\n# Test linking multiple filters into a single RunGen instance\n$(FILTERS_DIR)/multi_rungen: $(BUILD_DIR)/RunGenMain.o $(BIN_DIR)/$(TARGET)/runtime.a \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t $(FILTERS_DIR)/blur2x2.registration.o $(FILTERS_DIR)/blur2x2.a \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t $(FILTERS_DIR)/cxx_mangling.registration.o $(FILTERS_DIR)/cxx_mangling.a \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t $(FILTERS_DIR)/pyramid.registration.o $(FILTERS_DIR)/pyramid.a\n\t@mkdir -p $(@D)\n\t$(CXX) -std=c++17 -I$(FILTERS_DIR) \\\n\t\t\t$(BUILD_DIR)/RunGenMain.o \\\n\t\t\t$(BIN_DIR)/$(TARGET)/runtime.a \\\n\t\t\t$(call alwayslink,$(FILTERS_DIR)/blur2x2.registration.o) \\\n\t\t\t$(call alwayslink,$(FILTERS_DIR)/cxx_mangling.registration.o) \\\n\t\t\t$(call alwayslink,$(FILTERS_DIR)/pyramid.registration.o) \\\n\t\t\t$(FILTERS_DIR)/blur2x2.a \\\n\t\t\t$(FILTERS_DIR)/cxx_mangling.a \\\n\t\t\t$(FILTERS_DIR)/pyramid.a \\\n\t\t\t$(GEN_AOT_LD_FLAGS) $(IMAGE_IO_LIBS) -o $@\n\n# Test concatenating multiple registration files as well, which should also work\n$(FILTERS_DIR)/multi_rungen2.registration.cpp: $(FILTERS_DIR)/blur2x2.registration.cpp $(FILTERS_DIR)/cxx_mangling.registration.cpp $(FILTERS_DIR)/pyramid.registration.cpp\n\tcat $^ > $@\n\n$(FILTERS_DIR)/multi_rungen2: $(BUILD_DIR)/RunGenMain.o $(BIN_DIR)/$(TARGET)/runtime.a \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t $(FILTERS_DIR)/multi_rungen2.registration.cpp \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t $(FILTERS_DIR)/blur2x2.a \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t $(FILTERS_DIR)/cxx_mangling.a \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t $(FILTERS_DIR)/pyramid.a\n\t@mkdir -p $(@D)\n\t$(CXX) -std=c++17 -I$(FILTERS_DIR) $^ $(GEN_AOT_LD_FLAGS) $(IMAGE_IO_LIBS) -o $@\n\n$(BIN_DIR)/tutorial_%: $(ROOT_DIR)/tutorial/%.cpp $(TEST_DEPS)\n\t@ if [[ $@ == *_run ]]; then \\\n\t\texport TUTORIAL=$* ;\\\n\t\texport LESSON=`echo $${TUTORIAL} | cut -b1-9`; \\\n\t\tmake -f $(THIS_MAKEFILE) tutorial_$${TUTORIAL/run/generate}; \\\n\t\t$(CXX) $(TUTORIAL_CXX_FLAGS) $(IMAGE_IO_CXX_FLAGS) $(OPTIMIZE_FOR_BUILD_TIME) $< \\\n\t\t-I$(TMP_DIR) -I$(INCLUDE_DIR) $(TMP_DIR)/$${LESSON}_*.a $(GEN_AOT_LD_FLAGS) $(IMAGE_IO_LIBS) -lz -o $@; \\\n\telse \\\n\t\t$(CXX) $(TUTORIAL_CXX_FLAGS) $(IMAGE_IO_CXX_FLAGS) $(OPTIMIZE_FOR_BUILD_TIME) $< \\\n\t\t-I$(INCLUDE_DIR) -I$(ROOT_DIR)/tools $(TEST_LD_FLAGS) $(IMAGE_IO_LIBS) -o $@;\\\n\tfi\n\n$(BIN_DIR)/tutorial_lesson_15_generators: $(ROOT_DIR)/tutorial/lesson_15_generators.cpp $(TEST_DEPS) $(BUILD_DIR)/GenGen.o\n\t$(CXX) $(TUTORIAL_CXX_FLAGS) $(IMAGE_IO_CXX_FLAGS) $(OPTIMIZE_FOR_BUILD_TIME) $< $(BUILD_DIR)/GenGen.o \\\n\t-I$(INCLUDE_DIR) $(TEST_LD_FLAGS) $(IMAGE_IO_LIBS) -o $@\n\ntutorial_lesson_15_generators: $(ROOT_DIR)/tutorial/lesson_15_generators_usage.sh $(BIN_DIR)/tutorial_lesson_15_generators\n\t@-mkdir -p $(TMP_DIR)\n\tcp $(BIN_DIR)/tutorial_lesson_15_generators $(TMP_DIR)/lesson_15_generate; \\\n\tcd $(TMP_DIR); \\\n\tPATH=\"$${PATH}:$(CURDIR)/$(BIN_DIR)\" source $(ROOT_DIR)/tutorial/lesson_15_generators_usage.sh\n\t@-echo\n\n$(BIN_DIR)/tutorial_lesson_16_rgb_generate: $(ROOT_DIR)/tutorial/lesson_16_rgb_generate.cpp $(TEST_DEPS) $(BUILD_DIR)/GenGen.o\n\t$(CXX) $(TUTORIAL_CXX_FLAGS) $(IMAGE_IO_CXX_FLAGS) $(OPTIMIZE_FOR_BUILD_TIME) $< $(BUILD_DIR)/GenGen.o \\\n\t-I$(INCLUDE_DIR) $(TEST_LD_FLAGS) $(IMAGE_IO_LIBS) -o $@\n\n$(BIN_DIR)/tutorial_lesson_16_rgb_run: $(ROOT_DIR)/tutorial/lesson_16_rgb_run.cpp $(BIN_DIR)/tutorial_lesson_16_rgb_generate\n\t@-mkdir -p $(TMP_DIR)\n\t# Run the generator\n\t$(BIN_DIR)/tutorial_lesson_16_rgb_generate -g brighten -o $(TMP_DIR) -f brighten_planar      target=host layout=planar\n\t$(BIN_DIR)/tutorial_lesson_16_rgb_generate -g brighten -o $(TMP_DIR) -f brighten_interleaved target=host-no_runtime layout=interleaved\n\t$(BIN_DIR)/tutorial_lesson_16_rgb_generate -g brighten -o $(TMP_DIR) -f brighten_either      target=host-no_runtime layout=either\n\t$(BIN_DIR)/tutorial_lesson_16_rgb_generate -g brighten -o $(TMP_DIR) -f brighten_specialized target=host-no_runtime layout=specialized\n\t# Compile the runner\n\t$(CXX) $(TUTORIAL_CXX_FLAGS) $(IMAGE_IO_CXX_FLAGS) $(OPTIMIZE_FOR_BUILD_TIME) $< \\\n\t-I$(INCLUDE_DIR) -L$(BIN_DIR) -I $(TMP_DIR) $(TMP_DIR)/brighten_*.a \\\n        -lHalide $(TEST_LD_FLAGS) $(COMMON_LD_FLAGS) $(IMAGE_IO_LIBS) -o $@\n\t@-echo\n\n$(BIN_DIR)/tutorial_lesson_21_auto_scheduler_generate: $(ROOT_DIR)/tutorial/lesson_21_auto_scheduler_generate.cpp $(TEST_DEPS) $(BUILD_DIR)/GenGen.o\n\t$(CXX) $(TUTORIAL_CXX_FLAGS) $(IMAGE_IO_CXX_FLAGS) $(OPTIMIZE_FOR_BUILD_TIME) $< $(BUILD_DIR)/GenGen.o \\\n\t-I$(INCLUDE_DIR) $(TEST_LD_FLAGS) $(IMAGE_IO_LIBS) -o $@\n\n# The values are:\n# - the maximum level of parallelism available,\n# - the size of the last-level cache (in bytes),\n# - the ratio between the cost of a miss at the last level cache and the cost\n#   of arithmetic on the target architecture\n# ...in that order.\nLESSON_21_AUTOSCHEDULER_PARAMS=\\\n    autoscheduler=Mullapudi2016 \\\n    autoscheduler.parallelism=32 \\\n    autoscheduler.last_level_cache_size=16777216 \\\n    autoscheduler.balance=40\n\n$(BIN_DIR)/tutorial_lesson_21_auto_scheduler_run: $(ROOT_DIR)/tutorial/lesson_21_auto_scheduler_run.cpp $(BIN_DIR)/tutorial_lesson_21_auto_scheduler_generate $(BIN_MULLAPUDI2016)\n\t@-mkdir -p $(TMP_DIR)\n\t# Run the generator\n\t$(BIN_DIR)/tutorial_lesson_21_auto_scheduler_generate -g auto_schedule_gen -o $(TMP_DIR) -e static_library,c_header,schedule -f auto_schedule_false target=host\n\t$(BIN_DIR)/tutorial_lesson_21_auto_scheduler_generate -g auto_schedule_gen -o $(TMP_DIR) -e static_library,c_header,schedule -f auto_schedule_true  target=host-no_runtime $(LESSON_21_AUTOSCHEDULER_PARAMS) -p $(BIN_MULLAPUDI2016)\n\t# Compile the runner\n\t$(CXX) $(TUTORIAL_CXX_FLAGS) $(IMAGE_IO_CXX_FLAGS) $(OPTIMIZE_FOR_BUILD_TIME) $< \\\n\t-I$(INCLUDE_DIR) -L$(BIN_DIR) -I $(TMP_DIR) $(TMP_DIR)/auto_schedule_*.a \\\n        -lHalide $(TEST_LD_FLAGS) $(COMMON_LD_FLAGS) $(IMAGE_IO_LIBS) -o $@\n\t@-echo\n\ntest_internal: $(BIN_DIR)/test_internal\n\t@-mkdir -p $(TMP_DIR)\n\tcd $(TMP_DIR) ; $(CURDIR)/$<\n\t@-echo\n\ncorrectness_%: $(BIN_DIR)/correctness_%\n\t@-mkdir -p $(TMP_DIR)\n\tcd $(TMP_DIR) ; $(CURDIR)/$<\n\t@-echo\n\ncorrectness_opencl_runtime: $(BIN_DIR)/$(TARGET)/correctness_opencl_runtime\n\t@-mkdir -p $(TMP_DIR)\n\tcd $(TMP_DIR) ; $(CURDIR)/$<\n\t@-echo\n\nquiet_correctness_%: $(BIN_DIR)/correctness_%\n\t@-mkdir -p $(TMP_DIR)\n\t@cd $(TMP_DIR) ; ( $(CURDIR)/$< 2>stderr_$*.txt > stdout_$*.txt && echo -n . ) || ( echo ; echo FAILED TEST: $* ; cat stdout_$*.txt stderr_$*.txt ; false )\n\nvalgrind_%: $(BIN_DIR)/correctness_%\n\t@-mkdir -p $(TMP_DIR)\n\tcd $(TMP_DIR) ; valgrind --error-exitcode=-1 $(CURDIR)/$<\n\t@-echo\n\n# Use Intel SDE to emulate an avx 512 processor.\navx512_%: $(BIN_DIR)/correctness_%\n\t@-mkdir -p $(TMP_DIR)\n\tcd $(TMP_DIR) ; sde -cnl -- $(CURDIR)/$<\n\tcd $(TMP_DIR) ; sde -knl -- $(CURDIR)/$<\n\t@-echo\n\n# This test is *supposed* to do an out-of-bounds read, so skip it when testing under valgrind\nvalgrind_tracing_stack: $(BIN_DIR)/correctness_tracing_stack\n\t@-mkdir -p $(TMP_DIR)\n\tcd $(TMP_DIR) ; $(CURDIR)/$(BIN_DIR)/correctness_tracing_stack\n\t@-echo\n\nperformance_%: $(BIN_DIR)/performance_%\n\t@-mkdir -p $(TMP_DIR)\n\tcd $(TMP_DIR) ; $(CURDIR)/$<\n\t@-echo\n\nerror_%: $(BIN_DIR)/error_%\n\t@-mkdir -p $(TMP_DIR)\n\tcd $(TMP_DIR) ; $(CURDIR)/$< 2>&1 | egrep --q \"terminating with uncaught exception|terminating due to uncaught exception|^terminate called|^Error|Assertion.*failed\"\n\t@-echo\n\nwarning_%: $(BIN_DIR)/warning_%\n\t@-mkdir -p $(TMP_DIR)\n\tcd $(TMP_DIR) ; $(CURDIR)/$< 2>&1 | egrep --q \"^Warning\"\n\t@-echo\n\nruntime_common:\n\t# nothing\n\nruntime_%: $(BIN_DIR)/runtime_%\n\t@-mkdir -p $(TMP_DIR)\n\tcd $(TMP_DIR) ; $(CURDIR)/$<\n\t@-echo\n\ngenerator_jit_%: $(BIN_DIR)/generator_jit_%\n\t@-mkdir -p $(TMP_DIR)\n\tcd $(TMP_DIR) ; $(CURDIR)/$<\n\t@-echo\n\ngenerator_aot_%: $(BIN_DIR)/$(TARGET)/generator_aot_%\n\t@-mkdir -p $(TMP_DIR)\n\tcd $(TMP_DIR) ; $(CURDIR)/$<\n\t@-echo\n\ngenerator_aotcpp_%: $(BIN_DIR)/$(TARGET)/generator_aotcpp_%\n\t@-mkdir -p $(TMP_DIR)\n\tcd $(TMP_DIR) ; $(CURDIR)/$<\n\t@-echo\n\n$(TMP_DIR)/images/%.png: $(ROOT_DIR)/tutorial/images/%.png\n\t@-mkdir -p $(TMP_DIR)/images\n\tcp $< $(TMP_DIR)/images/\n\ntutorial_%: $(BIN_DIR)/tutorial_% $(TMP_DIR)/images/rgb.png $(TMP_DIR)/images/gray.png\n\t@-mkdir -p $(TMP_DIR)\n\tcd $(TMP_DIR) ; $(CURDIR)/$<\n\t@-echo\n\n# Skip the serialization tutorial, if we didn't build -DWITH_SERIALIZATION\nifeq (,$(shell which flatc))\ntutorial_lesson_23_serialization:\n\t@echo \"Skipping tutorial lesson 23 (serialization not enabled) ...\"\nendif\n\ntest_mullapudi2016: $(MULLAPUDI2016_TESTS:$(ROOT_DIR)/test/autoschedulers/mullapudi2016/%.cpp=mullapudi2016_%)\n\nmullapudi2016_%: $(BIN_DIR)/mullapudi2016_% $(BIN_MULLAPUDI2016)\n\t@-mkdir -p $(TMP_DIR)\n\tcd $(TMP_DIR) ; $(CURDIR)/$< $(realpath $(BIN_MULLAPUDI2016))\n\t@-echo\n\ntest_li2018: $(LI2018_TESTS:$(ROOT_DIR)/test/autoschedulers/li2018/%.cpp=li2018_%)\n\nli2018_%: $(BIN_DIR)/li2018_% $(BIN_LI2018)\n\t@-mkdir -p $(TMP_DIR)\n\tcd $(TMP_DIR) ; $(CURDIR)/$< $(realpath $(BIN_LI2018))\n\t@-echo\n\ntest_adams2019: $(ADAMS2019_TESTS:$(ROOT_DIR)/test/autoschedulers/adams2019/%.cpp=adams2019_%)\n\nadams2019_test: $(BIN_DIR)/adams2019_test $(BIN_ADAMS2019) $(SRC_DIR)/autoschedulers/adams2019/baseline.weights\n\t@-mkdir -p $(TMP_DIR)\n\tcd $(TMP_DIR) ; $(CURDIR)/$< $(realpath $(BIN_ADAMS2019)) $(realpath $(SRC_DIR)/autoschedulers/adams2019/baseline.weights)\n\t@-echo\n\ntime_compilation_test_%: $(BIN_DIR)/test_%\n\t$(TIME_COMPILATION) compile_times_correctness.csv make -f $(THIS_MAKEFILE) $(@:time_compilation_test_%=test_%)\n\ntime_compilation_performance_%: $(BIN_DIR)/performance_%\n\t$(TIME_COMPILATION) compile_times_performance.csv make -f $(THIS_MAKEFILE) $(@:time_compilation_performance_%=performance_%)\n\ntime_compilation_generator_%: $(BIN_DIR)/%.generator\n\t$(TIME_COMPILATION) compile_times_generator.csv make -f $(THIS_MAKEFILE) $(@:time_compilation_generator_%=$(FILTERS_DIR)/%.a)\n\nTEST_APPS=\\\n\tbilateral_grid \\\n\tbgu \\\n\tblur \\\n\tc_backend \\\n\tcamera_pipe \\\n\tconv_layer \\\n\tfft \\\n\thist \\\n\tinterpolate \\\n\tlens_blur \\\n\tlinear_algebra \\\n\tlocal_laplacian \\\n\tmax_filter \\\n\tnl_means \\\n\tonnx \\\n\tresize \\\n\tresnet_50 \\\n\tstencil_chain \\\n\twavelet\n\nTEST_APPS_DEPS=$(TEST_APPS:%=%_test_app)\nBUILD_APPS_DEPS=$(TEST_APPS:%=%_build_app)\n\n$(BUILD_APPS_DEPS): distrib\n\t@echo Building app $(@:%_build_app=%) for ${HL_TARGET}...\n\t@$(MAKE) -C $(ROOT_DIR)/apps/$(@:%_build_app=%) build \\\n\t\tHALIDE_DISTRIB_PATH=$(CURDIR)/$(DISTRIB_DIR) \\\n\t\tBIN_DIR=$(CURDIR)/$(BIN_DIR)/apps/$(@:%_build_app=%)/bin \\\n\t\tHL_TARGET=$(HL_TARGET) \\\n\t\t|| exit 1 ; \\\n\n$(TEST_APPS_DEPS): distrib\n\t@echo Testing app $(@:%_test_app=%) for ${HL_TARGET}...\n\t@$(MAKE) -C $(ROOT_DIR)/apps/$(@:%_test_app=%) test \\\n\t\tHALIDE_DISTRIB_PATH=$(CURDIR)/$(DISTRIB_DIR) \\\n\t\tBIN_DIR=$(CURDIR)/$(BIN_DIR)/apps/$(@:%_test_app=%)/bin \\\n\t\tHL_TARGET=$(HL_TARGET) \\\n\t\t|| exit 1 ; \\\n\n.PHONY: test_apps build_apps $(BUILD_APPS_DEPS)\nbuild_apps: $(BUILD_APPS_DEPS)\n\ntest_apps: $(BUILD_APPS_DEPS)\n\t$(MAKE) -f $(THIS_MAKEFILE) -j1 $(TEST_APPS_DEPS)\n\nbuild_hannk: distrib\n\t@echo Building apps/hannk for ${HL_TARGET}...\n\t@$(MAKE) -C $(ROOT_DIR)/apps/hannk build \\\n\t\tHALIDE_DISTRIB_PATH=$(CURDIR)/$(DISTRIB_DIR) \\\n\t\tBIN_DIR=$(CURDIR)/$(BIN_DIR)/apps/hannk/bin \\\n\t\tHL_TARGET=$(HL_TARGET) \\\n\t\t|| exit 1 ; \\\n\ntest_hannk: build_hannk\n\t@echo Testing apps/hannk for ${HL_TARGET}...\n\t@$(MAKE) -C $(ROOT_DIR)/apps/hannk test \\\n\t\tHALIDE_DISTRIB_PATH=$(CURDIR)/$(DISTRIB_DIR) \\\n\t\tBIN_DIR=$(CURDIR)/$(BIN_DIR)/apps/hannk/bin \\\n\t\tHL_TARGET=$(HL_TARGET) \\\n\t\t|| exit 1 ; \\\n\nBENCHMARK_APPS=\\\n\tbilateral_grid \\\n\tcamera_pipe \\\n\tlens_blur \\\n\tlocal_laplacian \\\n\tnl_means \\\n\tstencil_chain\n\n$(BENCHMARK_APPS): distrib\n\t@echo Building $@ for ${HL_TARGET}...\n\t@$(MAKE) -C $(ROOT_DIR)/apps/$@ \\\n\t\t$(CURDIR)/$(BIN_DIR)/apps/$@/bin/$(HL_TARGET)/$@.rungen \\\n\t\tHALIDE_DISTRIB_PATH=$(CURDIR)/$(DISTRIB_DIR) \\\n\t\tBIN_DIR=$(CURDIR)/$(BIN_DIR)/apps/$@/bin \\\n\t\tHL_TARGET=$(HL_TARGET) \\\n\t\t> /dev/null \\\n\t\t|| exit 1\n\n.PHONY: benchmark_apps $(BENCHMARK_APPS)\nbenchmark_apps: $(BENCHMARK_APPS)\n\t@for APP in $(BENCHMARK_APPS); do \\\n\t\techo ;\\\n\t\techo Benchmarking $${APP} for ${HL_TARGET}... ; \\\n\t\tmake -C $(ROOT_DIR)/apps/$${APP} \\\n\t\t\t$${APP}.benchmark \\\n\t\t\tHALIDE_DISTRIB_PATH=$(CURDIR)/$(DISTRIB_DIR) \\\n\t\t\tBIN_DIR=$(CURDIR)/$(BIN_DIR)/apps/$${APP}/bin \\\n\t\t\tHL_TARGET=$(HL_TARGET) \\\n\t\t\t|| exit 1 ; \\\n\tdone\n\nifneq ($(WITH_RTTI), )\nifneq ($(LLVM_HAS_NO_RTTI), )\nelse\nRTTI_OK=yes # Enabled in Halide and LLVM\nendif\nelse\nRTTI_OK=yes # Enabled in LLVM but not in Halide\nendif\n\nifneq ($(RTTI_OK), )\n$(BUILD_DIR)/rtti_ok:\n\tmkdir -p $(BUILD_DIR)\n\ttouch $(BUILD_DIR)/rtti_ok\nelse\n$(BUILD_DIR)/rtti_ok:\n\t@echo \"Can't enable RTTI - llvm was compiled without it.\"\n\t@echo \"LLVM c++ flags: \" $(LLVM_CXX_FLAGS)\n\t@exit 1\nendif\n\ninstall: $(LIB_DIR)/libHalide.a $(BIN_DIR)/libHalide.$(SHARED_EXT) $(INCLUDE_DIR)/Halide.h $(RUNTIME_EXPORTED_INCLUDES)\n\tmkdir -p $(PREFIX)/include $(PREFIX)/bin $(PREFIX)/lib $(PREFIX)/share/halide/tutorial/images $(PREFIX)/share/halide/tools $(PREFIX)/share/halide/tutorial/figures\n\tcp $(LIB_DIR)/libHalide.a $(BIN_DIR)/libHalide.$(SHARED_EXT) $(PREFIX)/lib\n\tcp $(INCLUDE_DIR)/Halide.h $(PREFIX)/include\n\tcp $(INCLUDE_DIR)/HalideBuffer.h $(PREFIX)/include\n\tcp $(INCLUDE_DIR)/HalideRuntim*.h $(PREFIX)/include\n\tcp $(ROOT_DIR)/tutorial/images/*.png $(PREFIX)/share/halide/tutorial/images\n\tcp $(ROOT_DIR)/tutorial/figures/*.gif $(PREFIX)/share/halide/tutorial/figures\n\tcp $(ROOT_DIR)/tutorial/figures/*.jpg $(PREFIX)/share/halide/tutorial/figures\n\tcp $(ROOT_DIR)/tutorial/figures/*.mp4 $(PREFIX)/share/halide/tutorial/figures\n\tcp $(ROOT_DIR)/tutorial/*.cpp $(PREFIX)/share/halide/tutorial\n\tcp $(ROOT_DIR)/tutorial/*.h $(PREFIX)/share/halide/tutorial\n\tcp $(ROOT_DIR)/tutorial/*.sh $(PREFIX)/share/halide/tutorial\n\tcp $(ROOT_DIR)/tools/GenGen.cpp $(PREFIX)/share/halide/tools\n\tcp $(ROOT_DIR)/tools/RunGen.h $(PREFIX)/share/halide/tools\n\tcp $(ROOT_DIR)/tools/RunGenMain.cpp $(PREFIX)/share/halide/tools\n\tcp $(ROOT_DIR)/tools/halide_image.h $(PREFIX)/share/halide/tools\n\tcp $(ROOT_DIR)/tools/halide_image_io.h $(PREFIX)/share/halide/tools\n\tcp $(ROOT_DIR)/tools/halide_image_info.h $(PREFIX)/share/halide/tools\n\tcp $(ROOT_DIR)/tools/halide_malloc_trace.h $(PREFIX)/share/halide/tools\n\tcp $(ROOT_DIR)/tools/halide_thread_pool.h $(PREFIX)/share/halide/tools\nifeq ($(UNAME), Darwin)\n\tinstall_name_tool -id $(PREFIX)/lib/libHalide.$(SHARED_EXT) $(PREFIX)/lib/libHalide.$(SHARED_EXT)\nendif\n\n# This is a specialized 'install' for users who need Hexagon support libraries as well.\ninstall_qc: install $(HEXAGON_RUNTIME_LIBS)\n\tmkdir -p $(PREFIX)/bin $(PREFIX)/tools $(PREFIX)/support\n\tmkdir -p $(PREFIX)/lib/arm-32-android\n\tmkdir -p $(PREFIX)/lib/arm-64-android\n\tmkdir -p $(PREFIX)/lib/adsp/arm-32-android\n\tmkdir -p $(PREFIX)/lib/adsp/arm-64-android\n\tmkdir -p $(PREFIX)/lib/cdsp/arm-32-android\n\tmkdir -p $(PREFIX)/lib/cdsp/arm-64-android\n\tmkdir -p $(PREFIX)/lib/host\n\tmkdir -p $(PREFIX)/lib/v65\n\tcp $(HEXAGON_RUNTIME_LIBS_DIR)/arm-32-android/* $(PREFIX)/lib/arm-32-android\n\tcp $(HEXAGON_RUNTIME_LIBS_DIR)/arm-64-android/* $(PREFIX)/lib/arm-64-android\n\tcp $(HEXAGON_RUNTIME_LIBS_DIR)/cdsp/arm-32-android/* $(PREFIX)/lib/cdsp/arm-32-android\n\tcp $(HEXAGON_RUNTIME_LIBS_DIR)/cdsp/arm-64-android/* $(PREFIX)/lib/cdsp/arm-64-android\n\tcp $(HEXAGON_RUNTIME_LIBS_DIR)/adsp/arm-32-android/* $(PREFIX)/lib/adsp/arm-32-android\n\tcp $(HEXAGON_RUNTIME_LIBS_DIR)/adsp/arm-64-android/* $(PREFIX)/lib/adsp/arm-64-android\n\tcp $(HEXAGON_RUNTIME_LIBS_DIR)/host/* $(PREFIX)/lib/host\n\tcp -r $(HEXAGON_RUNTIME_LIBS_DIR)/v65/* $(PREFIX)/lib/v65\n\tln -sf ../share/halide/tools/GenGen.cpp $(PREFIX)/tools/GenGen.cpp\n\tln -sf ../lib/v65/hexagon_sim_remote $(PREFIX)/bin/hexagon_sim_remote\n\tln -sf v65/libsim_qurt.a $(PREFIX)/lib/libsim_qurt.a\n\tln -sf v65/libhalide_hexagon_remote_skel.so $(PREFIX)/lib/libhalide_hexagon_remote_skel.so\n\n# We need to capture the system libraries that we'll need to link\n# against, so that downstream consumers of our build rules don't\n# have to guess what's necessary on their system; call\n# llvm-config and capture the result in config files that\n# we include in our distribution.\nHALIDE_RTTI_RAW=$(if $(WITH_RTTI),1,0)\n\n$(BUILD_DIR)/halide_config.%: $(ROOT_DIR)/tools/halide_config.%.tpl\n\t@mkdir -p $(@D)\n\tcat $< | sed -e 's/@HALIDE_SYSTEM_LIBS_RAW@/${LLVM_SYSTEM_LIBS}/g' \\\n\t       | sed -e 's/@HALIDE_RTTI_RAW@/${HALIDE_RTTI_RAW}/g' \\\n\t       | sed -e 's;@HALIDE_LLVM_CXX_FLAGS_RAW@;${LLVM_CXX_FLAGS};g' > $@\n\n\n$(DISTRIB_DIR)/lib/libHalide.$(SHARED_EXT): \\\n\t\t\t   $(LIB_DIR)/libHalide.a \\\n\t       \t\t   $(BIN_DIR)/libHalide.$(SHARED_EXT) \\\n                           $(INCLUDE_DIR)/Halide.h \\\n                           $(RUNTIME_EXPORTED_INCLUDES) \\\n                           $(ROOT_DIR)/README*.md \\\n                           $(BUILD_DIR)/halide_config.make\n\trm -rf $(DISTRIB_DIR)\n\tmkdir -p $(DISTRIB_DIR)/include \\\n\t         $(DISTRIB_DIR)/bin \\\n\t         $(DISTRIB_DIR)/lib \\\n\t         $(DISTRIB_DIR)/tutorial \\\n\t         $(DISTRIB_DIR)/tutorial/images \\\n\t         $(DISTRIB_DIR)/tools \\\n\t         $(DISTRIB_DIR)/tutorial/figures\n\tcp $(BIN_DIR)/libHalide.$(SHARED_EXT) $(DISTRIB_DIR)/lib\n\tcp $(LIB_DIR)/libHalide.a $(DISTRIB_DIR)/lib\n\tcp $(INCLUDE_DIR)/Halide.h $(DISTRIB_DIR)/include\n\tcp $(INCLUDE_DIR)/HalideBuffer.h $(DISTRIB_DIR)/include\n\tcp $(INCLUDE_DIR)/HalideRuntim*.h $(DISTRIB_DIR)/include\n\tcp $(INCLUDE_DIR)/HalidePyTorch*.h $(DISTRIB_DIR)/include\n\tcp $(ROOT_DIR)/tutorial/images/*.png $(DISTRIB_DIR)/tutorial/images\n\tcp $(ROOT_DIR)/tutorial/figures/*.gif $(DISTRIB_DIR)/tutorial/figures\n\tcp $(ROOT_DIR)/tutorial/figures/*.jpg $(DISTRIB_DIR)/tutorial/figures\n\tcp $(ROOT_DIR)/tutorial/figures/*.mp4 $(DISTRIB_DIR)/tutorial/figures\n\tcp $(ROOT_DIR)/tutorial/*.cpp $(DISTRIB_DIR)/tutorial\n\tcp $(ROOT_DIR)/tutorial/*.h $(DISTRIB_DIR)/tutorial\n\tcp $(ROOT_DIR)/tutorial/*.sh $(DISTRIB_DIR)/tutorial\n\tcp $(ROOT_DIR)/tools/GenGen.cpp $(DISTRIB_DIR)/tools\n\tcp $(ROOT_DIR)/tools/RunGen.h $(DISTRIB_DIR)/tools\n\tcp $(ROOT_DIR)/tools/RunGenMain.cpp $(DISTRIB_DIR)/tools\n\tcp $(ROOT_DIR)/tools/halide_benchmark.h $(DISTRIB_DIR)/tools\n\tcp $(ROOT_DIR)/tools/halide_image.h $(DISTRIB_DIR)/tools\n\tcp $(ROOT_DIR)/tools/halide_image_io.h $(DISTRIB_DIR)/tools\n\tcp $(ROOT_DIR)/tools/halide_image_info.h $(DISTRIB_DIR)/tools\n\tcp $(ROOT_DIR)/tools/halide_malloc_trace.h $(DISTRIB_DIR)/tools\n\tcp $(ROOT_DIR)/tools/halide_thread_pool.h $(DISTRIB_DIR)/tools\n\tcp $(ROOT_DIR)/tools/halide_trace_config.h $(DISTRIB_DIR)/tools\n\tcp $(ROOT_DIR)/README*.md $(DISTRIB_DIR)\n\tcp $(BUILD_DIR)/halide_config.* $(DISTRIB_DIR)\nifeq ($(UNAME), Darwin)\n\tinstall_name_tool -id @rpath/libHalide.$(SHARED_EXT) $(DISTRIB_DIR)/lib/libHalide.$(SHARED_EXT)\nendif\n\n$(BIN_DIR)/libautoschedule_%.$(PLUGIN_EXT): $(DISTRIB_DIR)/lib/libHalide.$(SHARED_EXT)\n\t$(MAKE) -f $(SRC_DIR)/autoschedulers/$*/Makefile $@ HALIDE_DISTRIB_PATH=$(CURDIR)/$(DISTRIB_DIR)\nifeq ($(UNAME), Darwin)\n\tinstall_name_tool -id @rpath/$(@F) $(CURDIR)/$@\nendif\n\n\n$(DISTRIB_DIR)/lib/libautoschedule_%.$(PLUGIN_EXT): $(BIN_DIR)/libautoschedule_%.$(PLUGIN_EXT)\n\t@mkdir -p $(@D)\n\tcp $< $(DISTRIB_DIR)/lib\nifeq ($(UNAME), Darwin)\n\tinstall_name_tool -id @rpath/$(@F) $(CURDIR)/$@\nendif\n\n# Build some common tools\n$(DISTRIB_DIR)/bin/featurization_to_sample $(DISTRIB_DIR)/bin/get_host_target: $(DISTRIB_DIR)/lib/libHalide.$(SHARED_EXT)\n\t@mkdir -p $(@D)\n\t$(MAKE) -f $(SRC_DIR)/autoschedulers/common/Makefile $(BIN_DIR)/featurization_to_sample $(BIN_DIR)/get_host_target HALIDE_DISTRIB_PATH=$(CURDIR)/$(DISTRIB_DIR)\n\tfor TOOL in featurization_to_sample get_host_target; do \\\n\t\tcp $(BIN_DIR)/$${TOOL} $(DISTRIB_DIR)/bin/;  \\\n\tdone\n\n# Adams2019 also includes autotuning tools\n$(DISTRIB_DIR)/lib/libautoschedule_adams2019.$(PLUGIN_EXT): $(BIN_DIR)/libautoschedule_adams2019.$(PLUGIN_EXT)\n\t@mkdir -p $(@D)\n\t$(MAKE) -f $(SRC_DIR)/autoschedulers/adams2019/Makefile $(BIN_DIR)/adams2019_retrain_cost_model $(BIN_DIR)/adams2019_weightsdir_to_weightsfile HALIDE_DISTRIB_PATH=$(CURDIR)/$(DISTRIB_DIR)\n\tcp $< $(DISTRIB_DIR)/lib/\n\tfor TOOL in adams2019_retrain_cost_model adams2019_weightsdir_to_weightsfile; do \\\n\t\tcp $(BIN_DIR)/$${TOOL} $(DISTRIB_DIR)/bin/;  \\\n\tdone\n\tcp $(SRC_DIR)/autoschedulers/adams2019/adams2019_autotune_loop.sh $(DISTRIB_DIR)/tools/\nifeq ($(UNAME), Darwin)\n\tinstall_name_tool -id @rpath/$(@F) $(CURDIR)/$@\nendif\n\nautoschedulers: \\\n$(DISTRIB_DIR)/lib/libautoschedule_mullapudi2016.$(PLUGIN_EXT) \\\n$(DISTRIB_DIR)/lib/libautoschedule_li2018.$(PLUGIN_EXT) \\\n$(DISTRIB_DIR)/lib/libautoschedule_adams2019.$(PLUGIN_EXT) \\\n$(DISTRIB_DIR)/bin/featurization_to_sample \\\n$(DISTRIB_DIR)/bin/get_host_target\n\n.PHONY: distrib\ndistrib: $(DISTRIB_DIR)/lib/libHalide.$(SHARED_EXT) autoschedulers\n\n$(DISTRIB_DIR)/halide.tgz: distrib\n\tln -sf $(DISTRIB_DIR) halide\n\ttar -czf $(BUILD_DIR)/halide.tgz \\\n\t\thalide/bin \\\n\t\thalide/lib \\\n\t\thalide/include \\\n\t\thalide/tools \\\n\t\thalide/tutorial \\\n\t\thalide/README*.md \\\n\t\thalide/halide_config.*\n\trm -rf halide\n\tmv $(BUILD_DIR)/halide.tgz $(DISTRIB_DIR)/halide.tgz\n\n$(BIN_DIR)/HalideTraceViz: $(ROOT_DIR)/util/HalideTraceViz.cpp $(INCLUDE_DIR)/HalideRuntime.h $(ROOT_DIR)/tools/halide_image_io.h $(ROOT_DIR)/tools/halide_trace_config.h\n\t$(CXX) $(OPTIMIZE) -std=c++17 $(filter %.cpp,$^) -I$(INCLUDE_DIR) -I$(ROOT_DIR)/tools -L$(BIN_DIR) -o $@\n\n$(BIN_DIR)/HalideTraceDump: $(ROOT_DIR)/util/HalideTraceDump.cpp $(ROOT_DIR)/util/HalideTraceUtils.cpp $(INCLUDE_DIR)/HalideRuntime.h $(ROOT_DIR)/tools/halide_image_io.h\n\t$(CXX) $(OPTIMIZE) -std=c++17 $(filter %.cpp,$^) -I$(INCLUDE_DIR) -I$(ROOT_DIR)/tools -I$(ROOT_DIR)/src/runtime -L$(BIN_DIR) $(IMAGE_IO_CXX_FLAGS) $(IMAGE_IO_LIBS) -o $@\n\n# Note: you must have CLANG_FORMAT_LLVM_INSTALL_DIR set for this rule to work.\n# Let's default to the Ubuntu install location.\nCLANG_FORMAT_LLVM_INSTALL_DIR ?= /usr/lib/llvm-12\n\n.PHONY: format\nformat:\n\t@CLANG_FORMAT_LLVM_INSTALL_DIR=$(CLANG_FORMAT_LLVM_INSTALL_DIR) ${ROOT_DIR}/run-clang-format.sh\n\n# Note: you must have CLANG_TIDY_LLVM_INSTALL_DIR set for these rules to work.\n# Let's default to the Ubuntu install location.\nCLANG_TIDY_LLVM_INSTALL_DIR ?= /usr/lib/llvm-12\n\n.PHONY: clang-tidy\nclang-tidy:\n\t@CLANG_TIDY_LLVM_INSTALL_DIR=$(CLANG_TIDY_LLVM_INSTALL_DIR) ${ROOT_DIR}/run-clang-tidy.sh\n\n.PHONY: clang-tidy-fix\nclang-tidy-fix:\n\t@CLANG_TIDY_LLVM_INSTALL_DIR=$(CLANG_TIDY_LLVM_INSTALL_DIR) ${ROOT_DIR}/run-clang-tidy.sh -fix\n\n# Build the documentation. Be sure to keep this synchronized with doc/CMakeLists.txt\n# if you choose to edit it.\n\n# Copy ROOT_DIR to keep the following Doxyfile closer to CMake\nHalide_SOURCE_DIR=${ROOT_DIR}\n\ndefine Doxyfile\n# Keep the following in sync with doc/CMakeLists.txt\nALPHABETICAL_INDEX     = NO\nBUILTIN_STL_SUPPORT    = YES\nCASE_SENSE_NAMES       = NO\nCLASS_DIAGRAMS         = NO\nDISTRIBUTE_GROUP_DOC   = YES\nEXAMPLE_PATH           = \"${Halide_SOURCE_DIR}/tutorial\"\nEXCLUDE                = bin\nEXCLUDE_PATTERNS       = README.md\nEXTRACT_ALL            = YES\nEXTRACT_LOCAL_CLASSES  = NO\nFILE_PATTERNS          = *.h *.md\nGENERATE_TREEVIEW      = YES\nHIDE_FRIEND_COMPOUNDS  = YES\nHIDE_IN_BODY_DOCS      = YES\nHIDE_UNDOC_CLASSES     = YES\nHIDE_UNDOC_MEMBERS     = YES\nJAVADOC_AUTOBRIEF      = YES\nMARKDOWN_ID_STYLE      = GITHUB\nQT_AUTOBRIEF           = YES\nQUIET                  = YES\nRECURSIVE              = YES\nREFERENCED_BY_RELATION = YES\nREFERENCES_RELATION    = YES\nSORT_BY_SCOPE_NAME     = YES\nSORT_MEMBER_DOCS       = NO\nSOURCE_BROWSER         = YES\nSTRIP_CODE_COMMENTS    = NO\n\n# Makefile-specific options\nGENERATE_LATEX         = NO\nHAVE_DOT               = NO\nHTML_OUTPUT            = .\nINPUT                  = \"${Halide_SOURCE_DIR}/doc\" \"${Halide_SOURCE_DIR}/src\" \"${Halide_SOURCE_DIR}/test\"\nOUTPUT_DIRECTORY       = ${DOC_DIR}\nPROJECT_NAME           = Halide\nendef\n\n# Make the above Doxyfile variable available to the doc target.\nexport Doxyfile\n\n.PHONY: doc\ndoc:\n\t@-mkdir -p $(TMP_DIR)\n\techo \"$$Doxyfile\" > $(TMP_DIR)/Doxyfile\n\t@-mkdir -p ${DOC_DIR}\n\tdoxygen $(TMP_DIR)/Doxyfile\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.9716796875,
          "content": "# Halide\n\nHalide is a programming language designed to make it easier to write\nhigh-performance image and array processing code on modern machines. Halide\ncurrently targets:\n\n- CPU architectures: X86, ARM, Hexagon, PowerPC, RISC-V\n- Operating systems: Linux, Windows, macOS, Android, iOS, Qualcomm QuRT\n- GPU Compute APIs: CUDA, OpenCL, Apple Metal, Microsoft Direct X 12, Vulkan\n\nRather than being a standalone programming language, Halide is embedded in C++.\nThis means you write C++ code that builds an in-memory representation of a\nHalide pipeline using Halide's C++ API. You can then compile this representation\nto an object file, or JIT-compile it and run it in the same process. Halide also\nprovides a Python binding that provides full support for writing Halide embedded\nin Python without C++.\n\nHalide requires C++17 (or later) to use.\n\nFor more detail about what Halide is, see https://halide-lang.org.\n\nFor API documentation see https://halide-lang.org/docs.\n\nFor some example code, read through the tutorials online\nat https://halide-lang.org/tutorials. The corresponding code is in the\n`tutorials/` directory. Larger examples are in the `apps/` directory.\n\nIf you've acquired a full source distribution and want to build Halide, see the\n[notes below](#building-halide).\n\n# Getting Halide\n\n## Pip\n\nAs of Halide 19.0.0, we provide binary wheels on PyPI. Halide provides bindings\nfor C++ and Python. Even if you only intend to use Halide from C++, pip may be\nthe easiest way to get a binary build of Halide.\n\nFull releases may be installed with `pip` like so:\n\n```shell\n$ pip install halide\n```\n\nEvery commit to `main` is published to Test PyPI as a development version and\nthese may be installed with a few extra flags:\n\n```shell\n$ pip install halide --pre --extra-index-url https://test.pypi.org/simple\n```\n\nCurrently, we provide wheels for: Windows x86-64, macOS x86-64, macOS arm64, and\nLinux x86-64. The Linux wheels are built for manylinux_2_28, which makes them\nbroadly compatible (Debian 10, Ubuntu 18.10, Fedora 29).\n\n*For C++ usage of the pip package:* On Linux and macOS, CMake's `find_package`\ncommand should find Halide as long as you're in the same virtual environment you\ninstalled it in. On Windows, you will need to add the virtual environment root\ndirectory to `CMAKE_PREFIX_PATH`. This can be done by running\n`set CMAKE_PREFIX_PATH=%VIRTUAL_ENV%` in `cmd`.\n\nOther build systems can find the Halide root path by running `python -c \n\"import halide; print(halide.install_dir())\"`.\n\n## Homebrew\n\nAlternatively, if you use macOS, you can install Halide via\n[Homebrew](https://brew.sh/) like so:\n\n```\n$ brew install halide\n```\n\n## Binary tarballs\n\nThe latest version of Halide can always be found on GitHub\nat https://github.com/halide/Halide/releases\n\nWe provide binary releases for many popular platforms and architectures,\nincluding 32/64-bit x86 Windows, 64-bit x86/ARM macOS, and 32/64-bit x86/ARM\nUbuntu Linux.\n\nThe macOS releases are built using XCode's command-line tools with Apple Clang\n500.2.76. This means that we link against libc++ instead of libstdc++. You may\nneed to adjust compiler options accordingly if you're using an older XCode which\ndoes not default to libc++.\n\nWe use a recent Ubuntu LTS to build the Linux releases; if your distribution is\ntoo old, it might not have the requisite glibc. \n\nNightly builds of Halide and the LLVM versions we use in CI are also available\nat https://buildbot.halide-lang.org/\n\n## Vcpkg\n\nIf you use [vcpkg](https://github.com/microsoft/vcpkg) to manage dependencies,\nyou can install Halide via:\n\n```\n$ vcpkg install halide:x64-windows # or x64-linux/x64-osx\n```\n\nOne caveat: vcpkg installs only the minimum Halide backends required to compile\ncode for the active platform. If you want to include all the backends, you\nshould install `halide[target-all]:x64-windows` instead. Note that since this\nwill build LLVM, it will take a _lot_ of disk space (up to 100GB).\n\n## Other package managers\n\nWe are interested in bringing Halide to other popular package managers and Linux\ndistribution repositories! We track the status of various distributions of\nHalide [in this GitHub issue](https://github.com/halide/Halide/issues/4660). If\nyou have experience publishing packages we would be happy to work with you!\n\n# Building Halide\n\n## Platform Support\n\nThere are two sets of platform requirements relevant to Halide: those required\nto run the compiler library in either JIT or AOT mode, and those required to run\nthe _binary outputs_ of the AOT compiler.\n\nThese are the **tested** host toolchain and platform combinations for building\nand running the Halide compiler library.\n\n| Compiler   | Version      | OS                     | Architectures |\n|------------|--------------|------------------------|---------------|\n| GCC        | 9.5          | Ubuntu Linux 20.04 LTS | x86, x64      |\n| GCC        | 11.4         | Ubuntu Linux 22.04 LTS | ARM32, ARM64  |\n| MSVC       | 2022 (19.37) | Windows 11 (22631)     | x86, x64      |\n| AppleClang | 15.0.0       | macOS 14.4.1           | x64           |\n| AppleClang | 14.0.0       | macOS 14.6             | ARM64         |\n\nSome users have successfully built Halide for Linux using Clang 9.0.0+, for\nWindows using ClangCL 11.0.0+, and for Windows ARM64 by cross-compiling with\nMSVC. We do not actively test these scenarios, however, so your mileage may\nvary.\n\nBeyond these, we are willing to support (by accepting PRs for) platform and\ntoolchain combinations that still receive _active, first-party, public support_\nfrom their original vendors. For instance, at time of writing, this excludes\nWindows 7 and includes Ubuntu 18.04 LTS.\n\nCompiled AOT pipelines are expected to have much broader platform support. The\nbinaries use the C ABI, and we expect any compliant C compiler to be able to use\nthe generated headers correctly. The C++ bindings currently require C++17. If\nyou discover a compatibility problem with a generated pipeline, please open an\nissue.\n\n## Acquiring LLVM\n\nAt any point in time, building Halide requires either the latest stable version\nof LLVM, the previous stable version of LLVM, or trunk. At the time of writing,\nthis means versions 20, 19, and 18 are supported, but 17 is not.\n\nIt is simplest to get a binary release of LLVM on macOS by using\n[Homebrew](https://brew.sh). Just run `brew install llvm`. On Debian flavors of\nLinux, the [LLVM APT repo](https://apt.llvm.org) is best; use the provided\ninstallation script. We know of no suitable official binary releases for\nWindows, however the ones we use in CI can usually be found at\nhttps://buildbot.halide-lang.org, along with tarballs for our other tested\nplatforms. See [the section on Windows](#windows) below for further advice.\n\nIf your OS does not have packages for LLVM, or you want more control over the\nconfiguration, you can build it yourself. First check it out from GitHub:\n\n```shell\n$ git clone --depth 1 --branch llvmorg-19.1.5 https://github.com/llvm/llvm-project.git\n```\n\n(LLVM 19.1.5 is the most recent released LLVM at the time of writing. For\ncurrent trunk, use `main` instead)\n\nThen build it like so:\n\n```shell\n$ cmake -G Ninja -S llvm-project/llvm -B build \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DLLVM_ENABLE_PROJECTS=\"clang;lld;clang-tools-extra\" \\\n        -DLLVM_ENABLE_RUNTIMES=compiler-rt \\\n        -DLLVM_TARGETS_TO_BUILD=\"WebAssembly;X86;AArch64;ARM;Hexagon;NVPTX;PowerPC;RISCV\" \\\n        -DLLVM_ENABLE_ASSERTIONS=ON \\\n        -DLLVM_ENABLE_EH=ON \\\n        -DLLVM_ENABLE_RTTI=ON \\\n        -DLLVM_ENABLE_HTTPLIB=OFF \\\n        -DLLVM_ENABLE_LIBEDIT=OFF \\\n        -DLLVM_ENABLE_LIBXML2=OFF \\\n        -DLLVM_ENABLE_TERMINFO=OFF \\\n        -DLLVM_ENABLE_ZLIB=OFF \\\n        -DLLVM_ENABLE_ZSTD=OFF \\\n        -DLLVM_BUILD_32_BITS=OFF\n$ cmake --build build\n$ cmake --install build --prefix llvm-install\n```\n\nThis will produce a working LLVM installation in `$PWD/llvm-install`. We refer\nto this path as `LLVM_ROOT` later. **Do not confuse this installation tree with\nthe build tree!**\n\nLLVM takes a long time to build, so the above command uses Ninja to maximize\nparallelism. If you choose to omit `-G Ninja`, Makefiles will be generated\ninstead. In this case, enable parallelism with `cmake --build build -j NNN`\nwhere `NNN` is the number of parallel jobs, i.e. the number of CPUs you have.\n\nNote that you _must_ add `clang` and `lld` to `LLVM_ENABLE_PROJECTS` and\n`WebAssembly` and `X86` _must_ be included in `LLVM_TARGETS_TO_BUILD`.\n`LLVM_ENABLE_RUNTIMES=compiler-rt` is only required to build the fuzz tests, and\n`clang-tools-extra` is only necessary if you plan to contribute code to Halide\n(so that you can run `clang-tidy` on your pull requests). You can disable\nexception handling (EH) and RTTI if you don't want the Python bindings. We\nrecommend enabling the full set to simplify builds during development.\n\n## Building Halide with CMake\n\nThis is discussed in greater detail in [BuildingHalideWithCMake.md]. CMake\nversion 3.28+ is required to build Halide.\n\n[BuildingHalideWithCMake.md]: doc/BuildingHalideWithCMake.md\n\n### MacOS and Linux\n\nFollow the above instructions to build LLVM or acquire a suitable binary\nrelease. Then change directory to the Halide repository and run:\n\n```shell\n$ cmake -G Ninja  -S . -B build -DCMAKE_BUILD_TYPE=Release -DHalide_LLVM_ROOT=$LLVM_ROOT\n$ cmake --build build\n```\n\nSetting `-DHalide_LLVM_ROOT` is not required if you have a suitable system-wide\nversion installed. However, if you have multiple LLVMs installed, it can pick\nbetween them.\n\n### Windows\n\nWe suggest building with Visual Studio 2022. Your mileage may vary with earlier\nversions. Be sure to install the \"C++ CMake tools for Windows\" in the Visual\nStudio installer. For older versions of Visual Studio, do not install the CMake\ntools, but instead acquire CMake and Ninja from their respective project\nwebsites.\n\nThese instructions start from the `D:` drive. We assume this git repo is cloned\nto `D:\\Halide`. We also assume that your shell environment is set up correctly.\nFor a 64-bit build, run:\n\n```\nD:\\> \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\" x64\n```\n\nFor a 32-bit build, run:\n\n```\nD:\\> \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\" x64_x86\n```\n\n#### Managing dependencies with vcpkg\n\nThe best way to get compatible dependencies on Windows is to use\n[vcpkg](https://github.com/Microsoft/vcpkg). Install it like so:\n\n```\nD:\\> git clone https://github.com/Microsoft/vcpkg.git\nD:\\> cd vcpkg\nD:\\vcpkg> .\\bootstrap-vcpkg.bat -disableMetrics\n...\nCMake projects should use: \"-DCMAKE_TOOLCHAIN_FILE=D:/vcpkg/scripts/buildsystems/vcpkg.cmake\"\n```\n\nWhen using the toolchain file, vcpkg will automatically build all the necessary\ndependencies. However, as stated above, be aware that acquiring LLVM this way\nmay use over 100 GB of disk space for its build trees and take a very long time\nto build. You can manually delete the build trees afterward, but vcpkg will not\ndo this automatically.\n\nSee [BuildingHalideWithCMake.md](./doc/BuildingHalideWithCMake.md#vcpkg-presets)\nfor directions to use Vcpkg for everything _except_ LLVM.\n\n#### Building Halide\n\nCreate a separate build tree and call CMake with vcpkg's toolchain. This will\nbuild in either 32-bit or 64-bit depending on the environment script (`vcvars`)\nthat was run earlier.\n\n```\nD:\\Halide> cmake -G Ninja -S . -B build ^\n                 --toolchain D:/vcpkg/scripts/buildsystems/vcpkg.cmake ^\n                 -DCMAKE_BUILD_TYPE=Release\n```\n\nThen run the build with:\n\n```\nD:\\Halide> cmake --build build\n```\n\nTo run all the tests:\n\n```\nD:\\Halide> ctest --test-dir build --output-on-failure\n```\n\nSubsets of the tests can be selected with `-L` and include `correctness`,\n`generator`, `error`, and the other directory names under `tests/`.\n\n#### Building LLVM (optional)\n\nFollow these steps if you want to build LLVM yourself. First, download LLVM's\nsources (these instructions use the 19.1.5 release).\n\n```\nD:\\> git clone --depth 1 --branch llvm-org-19.1.5 https://github.com/llvm/llvm-project.git\n```\n\nAs above, run `vcvarsall.bat` to pick between x86 and x64. Then configure LLVM\nwith the following command (for 32-bit, set `-DLLVM_BUILD_32_BITS=ON` instead):\n\n```\nD:\\> cmake -G Ninja -S llvm-project\\llvm -B build ^\n           -DCMAKE_BUILD_TYPE=Release ^\n           -DLLVM_ENABLE_PROJECTS=clang;lld;clang-tools-extra ^\n           -DLLVM_ENABLE_RUNTIMES=compiler-rt ^\n           -DLLVM_TARGETS_TO_BUILD=WebAssembly;X86;AArch64;ARM;Hexagon;NVPTX;PowerPC;RISCV ^\n           -DLLVM_ENABLE_ASSERTIONS=ON ^\n           -DLLVM_ENABLE_EH=ON ^\n           -DLLVM_ENABLE_RTTI=ON ^\n           -DLLVM_ENABLE_HTTPLIB=OFF ^\n           -DLLVM_ENABLE_LIBEDIT=OFF ^\n           -DLLVM_ENABLE_LIBXML2=OFF ^\n           -DLLVM_ENABLE_TERMINFO=OFF ^\n           -DLLVM_ENABLE_ZLIB=OFF ^\n           -DLLVM_ENABLE_ZSTD=OFF ^\n           -DLLVM_BUILD_32_BITS=OFF\n```\n\n**MSBuild:** If you want to build LLVM with MSBuild instead of Ninja, use\n`-G \"Visual Studio 17 2022\" -Thost=x64 -A x64` or\n`-G \"Visual Studio 17 2022\" -Thost=x64 -A Win32` in place of `-G Ninja`.\n\nFinally, run the build and install to a local directory:\n\n```\nD:\\> cmake --build build --config Release\nD:\\> cmake --install build --prefix llvm-install\n```\n\nYou can substitute `Debug` for `Release` in the above `cmake` commands if you\nwant a debug build.\n\nTo use this with Halide, but still allow vcpkg to manage other dependencies, you\nmust add two flags to Halide's CMake configure command line. First, disable LLVM\nwith `-DVCPKG_OVERLAY_PORTS=cmake/vcpkg`. Second, point CMake to our newly built\nHalide with `-DHalide_LLVM_ROOT=D:/llvm-install`.\n\n#### If all else fails...\n\nDo what the buildbots do: https://buildbot.halide-lang.org/master/#/builders\n\nIf the row that best matches your system is red, then maybe things aren't just\nbroken for you. If it's green, then you can click through to the latest build\nand see the commands that the build bots run. Open a step (\"Configure Halide\" is\nuseful) and look at the \"stdio\" logs in the viewer. These logs contain the full\ncommands that were run, as well as the environment variables they were run with.\n\n## Building Halide with make\n\n> [!WARNING]\n> We do not provide support for the Makefile. Feel free to use it, but if\n> anything goes wrong, switch to the CMake build. Note also that the Makefile\n> cannot build the Python bindings or produce install packages.\n\n*TL;DR*: Have LLVM 17 (or greater) installed and run `make` in the root\ndirectory of the repository (where this README is).\n\nBy default, `make` will use the `llvm-config` tool found in the `PATH`. If you\nwant to use a different LLVM, such as a custom-built one following the\ninstructions above, set the following environment variable:\n\n```shell\n$ export LLVM_CONFIG=\"$LLVM_ROOT/bin/llvm-config\"\n```\n\nNow you should be able to just run `make` in the root directory of the Halide\nsource tree. `make run_tests` will run the JIT test suite, and `make test_apps`\nwill make sure all the apps compile and run (but won't check their output).\n\nWhen building the tests, you can set the AOT compilation target with the \n`HL_TARGET` environment variable.\n\n### Building Halide out-of-tree with make\n\nIf you wish to build Halide in a separate directory, you can do that like so:\n\n```shell\n$ cd ..\n$ mkdir halide_build\n$ cd halide_build\n$ make -f ../Halide/Makefile\n```\n\n# Some useful environment variables\n\n`HL_JIT_TARGET=...` will set Halide's JIT compilation target.\n\n`HL_DEBUG_CODEGEN=1` will print out pseudocode for what Halide is compiling.\nHigher numbers will print more detail.\n\n`HL_NUM_THREADS=...` specifies the number of threads to create for the thread\npool. When the async scheduling directive is used, more threads than this number\nmay be required and thus allocated. A maximum of 256 threads is allowed. (By\ndefault, the number of cores on the host is used.)\n\n`HL_TRACE_FILE=...` specifies a binary target file to dump tracing data into\n(ignored unless at least one `trace_` feature is enabled in the target). The\noutput can be parsed programmatically by starting from the code in\n`utils/HalideTraceViz.cpp`.\n\n# Further references\n\nWe have more documentation in `doc/`, the following links might be helpful:\n\n| Document                                      | Description                                                               |\n|-----------------------------------------------|---------------------------------------------------------------------------|\n| [CMake build](doc/BuildingHalideWithCMake.md) | How to configure and build Halide using CMake.                            |\n| [CMake package](doc/HalideCMakePackage.md)    | How to use the Halide CMake package to build your code.                   |\n| [Hexagon](doc/Hexagon.md)                     | How to use the Hexagon backend.                                           |\n| [Python](doc/Python.md)                       | Documentation for the Python bindings.                                    |\n| [RunGen](doc/RunGen.md)                       | How to use the RunGen interface to run and benchmark arbitrary pipelines. |\n| [Vulkan](doc/Vulkan.md)                       | How to use the Halide Vulkan backend (BETA)                               |\n| [WebAssembly](doc/WebAssembly.md)             | How to use the WebAssembly backend and how to use V8 in place of wabt.    |\n| [WebGPU](doc/WebGPU.md)                       | How to run WebGPU pipelines (BETA)                                        |\n\nThe following links are of greater interest to developers wishing to contribute\ncode to Halide:\n\n| Document                                 | Description                                                                                                   |\n|------------------------------------------|---------------------------------------------------------------------------------------------------------------|\n| [CMake developer](doc/CodeStyleCMake.md) | Guidelines for authoring new CMake code.                                                                      |\n| [FuzzTesting](doc/FuzzTesting.md)        | Information about fuzz testing the Halide compiler (rather than pipelines). Intended for internal developers. |\n| [Testing](doc/Testing.md)                | Information about our test organization and debugging tips. Intended for internal developers.                 |\n"
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "dependencies",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 4.31640625,
          "content": "[build-system]\nrequires = [\n    \"scikit-build-core==0.10.5\",\n    \"pybind11==2.10.4\",\n]\nbuild-backend = \"scikit_build_core.build\"\n\n[project]\nname = \"halide\"\nauthors = [{ name = \"The Halide team\", email = \"halide-dev@lists.csail.mit.edu\" }]\nmaintainers = [{ name = \"Alex Reinking\", email = \"areinking@adobe.com\" }]\ndescription = \"Halide is a programming language designed to make it easier to write high-performance image and array processing code.\"\nlicense = { file = \"LICENSE.txt\" }\nreadme = \"./packaging/pip/README.md\"\nrequires-python = \">=3.8\"\ndependencies = [\n    \"numpy\",\n    \"imageio\",\n]\ndynamic = ['version']\nkeywords = [\n    \"array\",\n    \"compiler\",\n    \"domain-specific language\",\n    \"dsl\",\n    \"gpu\",\n    \"hexagon\",\n    \"image processing\",\n    \"machine learning\",\n    \"performance\",\n    \"programming language\",\n]\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Environment :: GPU\",\n    \"Environment :: GPU :: NVIDIA CUDA\",\n    \"Environment :: WebAssembly\",\n    \"Intended Audience :: Developers\",\n    \"Intended Audience :: Science/Research\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Natural Language :: English\",\n    \"Operating System :: MacOS\",\n    \"Operating System :: Microsoft :: Windows\",\n    \"Operating System :: POSIX\",\n    \"Programming Language :: C++\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3.13\",\n    \"Programming Language :: Python :: Implementation :: CPython\",\n    \"Topic :: Multimedia :: Graphics\",\n    \"Topic :: Scientific/Engineering\",\n    \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n    \"Topic :: Scientific/Engineering :: Image Processing\",\n    \"Topic :: Software Development :: Code Generators\",\n    \"Topic :: Software Development :: Compilers\",\n    \"Topic :: Software Development :: Libraries\",\n]\n\n[project.urls]\nHomepage = \"https://halide-lang.org\"\nDocumentation = \"https://github.com/halide/Halide/blob/main/doc/Python.md\"\n\"Documentation (C++)\" = \"https://halide-lang.org/docs\"\nIssues = \"https://github.com/halide/Halide/issues\"\nRepository = \"https://github.com/halide/Halide.git\"\n\n[tool.scikit-build]\ncmake.version = \">=3.28\"\nwheel.install-dir = \"halide\"\nsdist.include = [\"dependencies/\"]\nsdist.exclude = [\".github/\", \"apps/\", \"test/\", \"tutorial/\"]\nmetadata.version.provider = \"scikit_build_core.metadata.setuptools_scm\"\n\n[tool.scikit-build.cmake.define]\nCMAKE_DISABLE_FIND_PACKAGE_JPEG = true\nCMAKE_DISABLE_FIND_PACKAGE_PNG = true\nHalide_ENABLE_EXCEPTIONS = true\nHalide_ENABLE_RTTI = true\nHalide_INSTALL_PYTHONDIR = \".\"\nHalide_USE_FETCHCONTENT = false\nHalide_WASM_BACKEND = \"wabt\"\nWITH_PYTHON_BINDINGS = true\nWITH_TESTS = false\nWITH_TUTORIALS = false\n\n##\n# Don't version libHalide.so/dylib -- wheels are zip files that do\n# not understand symbolic links. Including version information here\n# causes the final wheel to have three copies of our library. Not good.\nHalide_VERSION_OVERRIDE = \"\"\nHalide_SOVERSION_OVERRIDE = \"\"\n\n[[tool.scikit-build.overrides]]\nif.platform-system = \"^win32\"\ninherit.cmake.define = \"append\"\ncmake.define.Halide_WASM_BACKEND = \"OFF\"\n\n[tool.tbump]\ngithub_url = \"https://github.com/halide/Halide/\"\n\n[tool.tbump.version]\ncurrent = \"20.0.0\"\nregex = '(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)'\n\n[tool.tbump.git]\nmessage_template = \"Bump version to {new_version}\"\ntag_template = \"v{new_version}.dev0\"\n\n[[tool.tbump.file]]\nsrc = \"CMakeLists.txt\"\nsearch = \"VERSION {current_version}\"\n\n[[tool.tbump.file]]\nsrc = \"python_bindings/CMakeLists.txt\"\nsearch = \"VERSION {current_version}\"\n\n[[tool.tbump.file]]\nsrc = \"vcpkg.json\"\n\n[[tool.tbump.file]]\nsrc = \"src/runtime/HalideRuntime.h\"\nversion_template = \"{major}\"\nsearch = \"#define HALIDE_VERSION_MAJOR {current_version}\"\n\n[[tool.tbump.file]]\nsrc = \"src/runtime/HalideRuntime.h\"\nversion_template = \"{minor}\"\nsearch = \"#define HALIDE_VERSION_MINOR {current_version}\"\n\n[[tool.tbump.file]]\nsrc = \"src/runtime/HalideRuntime.h\"\nversion_template = \"{patch}\"\nsearch = \"#define HALIDE_VERSION_PATCH {current_version}\"\n\n# Must be last table in file since pip.yml appends to it\n# See: https://github.com/pypa/setuptools-scm/issues/455\n[tool.setuptools_scm]\n"
        },
        {
          "name": "python_bindings",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.1259765625,
          "content": "build\ncmake>=3.28\nimageio\nninja\nnumpy\npillow\npybind11==2.10.4\nscikit-build-core==0.10.5\nscipy\nsetuptools>=43\ntbump==6.11.0\nwheel\n"
        },
        {
          "name": "run-clang-format.sh",
          "type": "blob",
          "size": 2.5107421875,
          "content": "#!/bin/bash\n\nset -e\n\nROOT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" >/dev/null 2>&1 && pwd)\"\n\n##\n\nEXPECTED_VERSION=19\n\n##\n\nusage() { echo -e \"Usage: $0 [-c]\" 1>&2; exit 1; }\n\n# Fix the formatting in-place\nMODE_FLAGS=(-i --sort-includes)\n\nwhile getopts \"c\" o; do\n    case \"${o}\" in\n    c)\n        # Only check the files and print formatting errors\n        MODE_FLAGS=(--dry-run -Werror)\n        ;;\n    *)\n        usage\n        ;;\n    esac\ndone\nshift $((OPTIND - 1))\n\nif [[ \"${MODE_FLAGS[*]}\" =~ \"-i\" ]]; then\n    if ! git diff-files --quiet --ignore-submodules; then\n        echo -e \"\\033[0;31m\" # RED\n        echo \"WARNING: There are still uncommited changes in your working tree.\"\n        echo \"         Reverting this formatting action will be difficult.\"\n        echo -e \"\\033[0m\" # RESET\n        git diff-files --ignore-submodules\n        echo\n        read -p \"Do you wish to continue (Y/N)? \" -r\n        if ! [[ $REPLY =~ ^[Yy]$ ]]; then\n            exit\n        fi\n    fi\nfi\n\n# We are currently standardized on using LLVM/Clang19 for this script.\n# Note that this is totally independent of the version of LLVM that you\n# are using to build Halide itself. If you don't have LLVM19 installed,\n# you can usually install what you need easily via:\n#\n# sudo apt-get install llvm-19 clang-19 libclang-19-dev clang-tidy-19\n# export CLANG_FORMAT_LLVM_INSTALL_DIR=/usr/lib/llvm-19\n#\n# On macOS:\n#\n# brew install llvm@19\n# export CLANG_FORMAT_LLVM_INSTALL_DIR=/opt/homebrew/opt/llvm@19\n\nif [ -z \"$CLANG_FORMAT_LLVM_INSTALL_DIR\" ]; then\n    echo \"CLANG_FORMAT_LLVM_INSTALL_DIR must point to an LLVM installation dir for this script.\"\n    exit 1\nfi\n\necho \"CLANG_FORMAT_LLVM_INSTALL_DIR=${CLANG_FORMAT_LLVM_INSTALL_DIR}\"\n\nCLANG_FORMAT=\"${CLANG_FORMAT_LLVM_INSTALL_DIR}/bin/clang-format\"\n\nVERSION=$(\"${CLANG_FORMAT}\" --version)\nif [[ ${VERSION} =~ .*version\\ $EXPECTED_VERSION.* ]]; then\n    echo \"clang-format version $EXPECTED_VERSION found.\"\nelse\n    echo \"CLANG_FORMAT_LLVM_INSTALL_DIR must point to an LLVM $EXPECTED_VERSION install!\"\n    exit 1\nfi\n\n# Note that we specifically exclude files starting with . in order\n# to avoid finding emacs backup files\nfind \"${ROOT_DIR}/apps\" \\\n     \"${ROOT_DIR}/src\" \\\n     \"${ROOT_DIR}/tools\" \\\n     \"${ROOT_DIR}/test\" \\\n     \"${ROOT_DIR}/util\" \\\n     \"${ROOT_DIR}/python_bindings\" \\\n     -not -path \"${ROOT_DIR}/src/runtime/hexagon_remote/bin/src/*\" \\\n     \\( -name \"*.cpp\" -o -name \"*.h\" -o -name \"*.c\" \\) -and -not -wholename \"*/.*\" \\\n     -print0 | xargs -0 \"${CLANG_FORMAT}\" \"${MODE_FLAGS[@]}\" -style=file\n\nexit \"${PIPESTATUS[1]}\"\n"
        },
        {
          "name": "run-clang-tidy.sh",
          "type": "blob",
          "size": 4.5126953125,
          "content": "#!/bin/bash\n\nset -e\n\nROOT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" >/dev/null 2>&1 && pwd )\"\n\nusage() { echo \"Usage: $0 [-j MAX_PROCESS_COUNT] [-f]\" 1>&2; exit 1; }\n\nget_thread_count () {\n  ([ -x \"$(command -v nproc)\" ] && nproc) ||\n  ([ -x \"$(command -v sysctl)\" ] && sysctl -n hw.physicalcpu)\n}\n\nif [ \"$(uname)\" == \"Darwin\" ]; then\n  patch_file () { sed -i '' -E \"$@\"; }\nelse\n  patch_file () { sed -i -E \"$@\"; }\nfi\n\nJ=$(get_thread_count)\nFIX=\n\nwhile getopts \":j:f\" o; do\n    case \"${o}\" in\n        j)\n            J=\"${OPTARG}\"\n            [[ \"${J}\" =~ ^[0-9]+$ ]] || ( echo \"-j requires an integer argument\"; usage )\n            ;;\n        f)\n            FIX=\"-fix\"\n            ;;\n        *)\n            usage\n            ;;\n    esac\ndone\nshift $((OPTIND-1))\n\necho \"Using ${J} processes.\"\nif [ -n \"${FIX}\" ]; then\n    echo \"Operating in -fix mode!\"\nfi\n\n# We are currently standardized on using LLVM/Clang 19 for this script.\n# Note that this is totally independent of the version of LLVM that you\n# are using to build Halide itself. If you don't have LLVM19 installed,\n# you can usually install what you need easily via:\n#\n# sudo apt-get install llvm-19 clang-19 libclang-19-dev clang-tidy-19\n# export CLANG_TIDY_LLVM_INSTALL_DIR=/usr/lib/llvm-19\n#\n# On macOS:\n#\n# brew install llvm@19\n# export CLANG_TIDY_LLVM_INSTALL_DIR=/opt/homebrew/opt/llvm@19\n\nif [ -z \"$CLANG_TIDY_LLVM_INSTALL_DIR\" ]; then\n  echo \"CLANG_TIDY_LLVM_INSTALL_DIR must point to an LLVM installation dir for this script.\"\n  exit\nfi\n\necho \"CLANG_TIDY_LLVM_INSTALL_DIR = ${CLANG_TIDY_LLVM_INSTALL_DIR}\"\n\nVERSION=$(\"${CLANG_TIDY_LLVM_INSTALL_DIR}/bin/clang-tidy\" --version)\nif [[ ${VERSION} =~ .*version\\ 19.* ]]\nthen\n    echo \"clang-tidy version 19 found.\"\nelse\n    echo \"CLANG_TIDY_LLVM_INSTALL_DIR must point to an LLVM 19 install!\"\n    exit 1\nfi\n\n\n# Use a temp folder for the CMake stuff here, so it's fresh & correct every time\nCLANG_TIDY_BUILD_DIR=$(mktemp -d)\necho \"CLANG_TIDY_BUILD_DIR = ${CLANG_TIDY_BUILD_DIR}\"\n\n# Specify Halide_LLVM_SHARED_LIBS=ON because some installers may provide only that.\necho Building compile_commands.json...\ncmake -G Ninja -S \"${ROOT_DIR}\" -B \"${CLANG_TIDY_BUILD_DIR}\" -Wno-dev \\\n      -DCMAKE_C_COMPILER=\"${CLANG_TIDY_LLVM_INSTALL_DIR}/bin/clang\" \\\n      -DCMAKE_CXX_COMPILER=\"${CLANG_TIDY_LLVM_INSTALL_DIR}/bin/clang++\" \\\n      -DCMAKE_BUILD_TYPE=Debug \\\n      -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \\\n      -DHalide_CLANG_TIDY_BUILD=ON \\\n      -DHalide_LLVM_ROOT=\"${CLANG_TIDY_LLVM_INSTALL_DIR}\" \\\n      > /dev/null\n\n[ -a \"${CLANG_TIDY_BUILD_DIR}/compile_commands.json\" ]\n\n# We need to remove -arch flags where -target flags also exist. These break our fake runtime compilation steps on macOS\necho Patching compile_commands.json...\npatch_file '/-target/ s/-arch *[^ ]+//' \"${CLANG_TIDY_BUILD_DIR}/compile_commands.json\"\n\n# We must populate the includes directory to check things outside of src/\necho Building HalideIncludes...\ncmake --build \"${CLANG_TIDY_BUILD_DIR}\" -j \"${J}\" --target HalideIncludes\n\necho Building flatbuffer stuff...\ncmake --build \"${CLANG_TIDY_BUILD_DIR}\" -j \"${J}\" --target generate_fb_header\n\nRUN_CLANG_TIDY=${CLANG_TIDY_LLVM_INSTALL_DIR}/bin/run-clang-tidy\n\n# We deliberately skip apps/ and test/ for now, as the compile commands won't include\n# generated headers files from Generators.\n#\n# Skip DefaultCostModel.cpp as it relies on cost_model.h.\n# Skip GenGen.cpp and RunGenMain.cpp as they bring clang-tidy to its knees,\n# for reasons that aren't entirely clear yet.\necho Finding targets...\nCLANG_TIDY_TARGETS=$(find \\\n     \"${ROOT_DIR}/src\" \\\n     \"${ROOT_DIR}/python_bindings\" \\\n     \"${ROOT_DIR}/tools\" \\\n     \"${ROOT_DIR}/util\" \\\n     \\( -name \"*.cpp\" -o -name \"*.h\" -o -name \"*.c\" \\) -and -not -wholename \"*/.*\" \\\n     ! -name DefaultCostModel.cpp \\\n     ! -name GenGen.cpp \\\n     ! -name RunGenMain.cpp)\n\n# clang-tidy doesn't have a sane way to exclude third-party headers (e.g. pybind11),\n# so we will instead build an include filter\nCLANG_TIDY_HEADER_FILTER=\".*/src/.*|.*/python_bindings/.*|.*/tools/.*|.*/util/.*\"\n\necho Running clang-tidy...\n${RUN_CLANG_TIDY} \\\n    ${FIX} \\\n    -j \"${J}\" \\\n    -header-filter=\"${CLANG_TIDY_HEADER_FILTER}\" \\\n    -quiet \\\n    -p \"${CLANG_TIDY_BUILD_DIR}\" \\\n    -clang-tidy-binary \"${CLANG_TIDY_LLVM_INSTALL_DIR}/bin/clang-tidy\" \\\n    -clang-apply-replacements-binary \"${CLANG_TIDY_LLVM_INSTALL_DIR}/bin/clang-apply-replacements\" \\\n    ${CLANG_TIDY_TARGETS} \\\n    2>&1 | grep -v \"warnings generated\" | sed \"s|.*/||\"\n\nRESULT=${PIPESTATUS[0]}\n\necho \"run-clang-tidy finished with status ${RESULT}\"\n\nrm -rf \"${CLANG_TIDY_BUILD_DIR}\"\n\nexit \"${RESULT}\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "tutorial",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        },
        {
          "name": "vcpkg.json",
          "type": "blob",
          "size": 4.732421875,
          "content": "{\n  \"name\": \"halide\",\n  \"version\": \"20.0.0\",\n  \"description\": \"Halide is a programming language designed to make it easier to write high-performance image and array processing code on modern machines.\",\n  \"homepage\": \"https://github.com/halide/Halide\",\n  \"license\": \"MIT\",\n  \"supports\": \"!uwp\",\n  \"builtin-baseline\": \"d567b667adba0e72c5c3931ddbe745b66aa34b73\",\n  \"default-features\": [\n    \"jit\",\n    \"serialization\"\n  ],\n  \"dependencies\": [\n    {\n      \"name\": \"llvm\",\n      \"default-features\": false,\n      \"features\": [\n        \"clang\",\n        \"enable-eh\",\n        \"enable-rtti\",\n        \"lld\",\n        \"target-webassembly\",\n        \"target-x86\",\n        \"tools\"\n      ]\n    },\n    \"spirv-headers\",\n    \"vulkan-headers\"\n  ],\n  \"features\": {\n    \"developer\": {\n      \"description\": \"Include all Halide features to facilitate development\",\n      \"dependencies\": [\n        {\n          \"name\": \"halide\",\n          \"default-features\": false,\n          \"features\": [\n            \"python-bindings\",\n            \"serialization\",\n            \"target-all\",\n            \"tests\",\n            \"wasm-executor\"\n          ]\n        },\n        {\n          \"name\": \"llvm\",\n          \"default-features\": false,\n          \"features\": [\n            \"clang-tools-extra\",\n            \"enable-assertions\"\n          ]\n        }\n      ]\n    },\n    \"jit\": {\n      \"description\": \"Include targets needed to compile for the library architecture\",\n      \"dependencies\": [\n        {\n          \"name\": \"halide\",\n          \"default-features\": false,\n          \"features\": [\n            \"target-arm\"\n          ],\n          \"platform\": \"arm32\"\n        },\n        {\n          \"name\": \"halide\",\n          \"default-features\": false,\n          \"features\": [\n            \"target-aarch64\"\n          ],\n          \"platform\": \"arm64\"\n        },\n        {\n          \"name\": \"halide\",\n          \"default-features\": false,\n          \"features\": [\n            \"target-all\"\n          ],\n          \"platform\": \"!x86 & !x64 & !arm\"\n        }\n      ]\n    },\n    \"python-bindings\": {\n      \"description\": \"Halide's native Python module (not the whole pip package)\",\n      \"dependencies\": [\n        \"pybind11\"\n      ]\n    },\n    \"serialization\": {\n      \"description\": \"Include experimental Serialization/Deserialization code\",\n      \"dependencies\": [\n        \"flatbuffers\"\n      ]\n    },\n    \"target-aarch64\": {\n      \"description\": \"Include AArch64 target\",\n      \"dependencies\": [\n        {\n          \"name\": \"llvm\",\n          \"default-features\": false,\n          \"features\": [\n            \"target-aarch64\"\n          ]\n        }\n      ]\n    },\n    \"target-all\": {\n      \"description\": \"Include all targets\",\n      \"dependencies\": [\n        {\n          \"name\": \"halide\",\n          \"default-features\": false,\n          \"features\": [\n            \"target-aarch64\",\n            \"target-arm\",\n            \"target-hexagon\",\n            \"target-powerpc\",\n            \"target-riscv\"\n          ]\n        }\n      ]\n    },\n    \"target-arm\": {\n      \"description\": \"Include ARM target\",\n      \"dependencies\": [\n        {\n          \"name\": \"llvm\",\n          \"default-features\": false,\n          \"features\": [\n            \"target-arm\"\n          ]\n        }\n      ]\n    },\n    \"target-hexagon\": {\n      \"description\": \"Include Hexagon target\",\n      \"dependencies\": [\n        {\n          \"name\": \"llvm\",\n          \"default-features\": false,\n          \"features\": [\n            \"target-hexagon\"\n          ]\n        }\n      ]\n    },\n    \"target-nvptx\": {\n      \"description\": \"Include NVPTX target\",\n      \"dependencies\": [\n        {\n          \"name\": \"llvm\",\n          \"default-features\": false,\n          \"features\": [\n            \"target-nvptx\"\n          ]\n        }\n      ]\n    },\n    \"target-powerpc\": {\n      \"description\": \"Include PowerPC target\",\n      \"dependencies\": [\n        {\n          \"name\": \"llvm\",\n          \"default-features\": false,\n          \"features\": [\n            \"target-powerpc\"\n          ]\n        }\n      ]\n    },\n    \"target-riscv\": {\n      \"description\": \"Include RISCV target\",\n      \"dependencies\": [\n        {\n          \"name\": \"llvm\",\n          \"default-features\": false,\n          \"features\": [\n            \"target-riscv\"\n          ]\n        }\n      ]\n    },\n    \"tests\": {\n      \"description\": \"Include dependencies needed for testing Halide\",\n      \"dependencies\": [\n        {\n          \"name\": \"cuda\",\n          \"platform\": \"(windows & x64 & !uwp & !xbox) | (linux & x64) | (linux & arm64)\"\n        },\n        \"eigen3\",\n        \"libjpeg-turbo\",\n        \"libpng\",\n        \"openblas\",\n        {\n          \"name\": \"opencl\",\n          \"platform\": \"(windows & x64 & !uwp & !xbox) | (linux & x64) | (linux & arm64)\"\n        }\n      ]\n    },\n    \"wasm-executor\": {\n      \"description\": \"Include built-in WASM executor\",\n      \"dependencies\": [\n        \"wabt\"\n      ]\n    }\n  }\n}\n"
        }
      ]
    }
  ]
}