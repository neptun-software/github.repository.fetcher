{
  "metadata": {
    "timestamp": 1736566127943,
    "page": 131,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "juce-framework/JUCE",
      "stars": 6794,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 0.93359375,
          "content": "Checks: >\n    -clang-analyzer-cplusplus.NewDeleteLeaks,\n    -clang-analyzer-optin.performance.Padding,\n    -clang-analyzer-security.FloatLoopCounter,\n    -clang-analyzer-security.insecureAPI.strcpy,\n    modernize-concat-nested-namespaces,\n\nWarningsAsErrors: '*'\n\n# No negative lookahead available here, which makes things difficult.\n#\n# We want checks to run on JUCE files included from the JUCE modules. We can\n# restrict these to files named `juce_.*`.\n#\n# We also want checks to run on any files inlcuded from the examples or extras\n# directories. However, some include paths generated by the Android Studio build\n# system look like:\n#\n#   ~/JUCE/examples/DemoRunner/Builds/Android/app/../../../../../modules/juce_box2d/box2d/Collision/b2CollideEdge.cpp\n#\n# Since we can only opt-in to paths, we restrict the maximum depth of the path\n# past examples/extras.\nHeaderFilterRegex: '(.*\\/modules\\/juce_.*juce_[^\\/]*$)|(\\/(examples|extras)(\\/[^\\/]*){1,7}$)'\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.1005859375,
          "content": "._*\r\n*.mode1v3\r\n*.pbxuser\r\n*.perspectivev3\r\n*.user\r\n*.ncb\r\n*.suo\r\n*.ilk\r\n*.pch\r\n*.pdb\r\n*.dep\r\n*.idb\r\n*.manifest\r\n*.manifest.res\r\n*.o\r\n*.d\r\n*.sdf\r\n*.opensdf\r\n*.VC.db\r\n*.VC.opendb\r\nxcuserdata\r\n*.xccheckout\r\n*.xcscmblueprint\r\n*.xcscheme\r\ncontents.xcworkspacedata\r\n.DS_Store\r\n.svn\r\n.deps\r\n.dirstamp\r\nprofile\r\n**/MacOSX/build\r\n**/iOS/build\r\n**/IDEWorkspaceChecks.plist\r\n**/Linux/build\r\n**/LinuxMakefile/build\r\n**/VisualStudio[0-9]*/Win32\r\n**/VisualStudio[0-9]*/x64\r\n**/Builds/x64\r\n**/.vs\r\n**/CodeBlocks/bin\r\n**/CodeBlocks/obj\r\n**/CodeBlocks/*.depend\r\n**/CodeBlocks/*.layout\r\n**/Builds/Android/.gradle\r\n**/Builds/Android/.idea\r\n**/Builds/Android/build\r\n**/Builds/Android/**/*.iml\r\n**/Builds/Android/local.properties\r\n**/Builds/Android/app/build\r\n**/Builds/Android/app/.externalNativeBuild\r\n**/Builds/Android/app/.cxx\r\n**/Builds/Android/lib/build\r\n**/Builds/Android/lib/.externalNativeBuild\r\n**/Builds/MacOSX/**/Index\r\n**/Builds/MacOSX/**/Intermediates.noindex\r\n**/doxygen/doc\r\n**/doxygen/build\r\n**/.idea\r\nextras/Projucer/JUCECompileEngine.dylib\r\n\r\n.idea\r\n**/cmake-build*\r\n\r\n.vscode\r\n/build\r\n\r\nCMakeUserPresets.json\r\n.editorconfig\r\n\r\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 0.1416015625,
          "content": "variables:\n  REF: &REF master\n\ninclude:\n  - project: juce-repos/JUCE-utils\n    file: /CI/gitlab-ci.yml\n    ref: *REF\n    inputs:\n      ref: *REF\n"
        },
        {
          "name": "BREAKING_CHANGES.md",
          "type": "blob",
          "size": 131.3759765625,
          "content": "# JUCE breaking changes\n\n# Version 8.0.5\n\n## Change\n\nHeaderItemComponent::getIdealSize no longer applies modifiers to the result\ndirectly. Instead, these changes have been moved to the respective LookAndFeel\nmethods, enabling better customization.\n\n**Possible Issues**\n\nCode that overrides LookAndFeel::getIdealPopupMenuItemSize and relied on the\nprevious modifiers applied in HeaderItemComponent::getIdealSize may now behave\ndifferently.\n\n**Workaround**\n\nReview any overrides of LookAndFeel::getIdealPopupMenuItemSize and apply the\nnecessary adjustments to account for any missing modifiers or changes in\nbehavior.\n\n**Rationale**\n\nThe previous approach did not allow users to customize the applied modifiers\nthrough the LookAndFeel class. Moving this logic to LookAndFeel methods ensures\nconsistent and flexible customization.\n\n\n## Change\n\nThe behavior of AudioTransportSource::hasStreamFinished has been updated to\ncorrectly return true when the stream has finished.\n\n**Possible Issues**\n\nThis change may affect any code that relied on the previous behavior, where the\nmethod never returned true.\n\n**Workaround**\n\nReview and update any code that depends on hasStreamFinished or any registered\nChangeListeners that respond to stream completion.\n\n**Rationale**\n\nThe previous behavior, where hasStreamFinished never returned true, was\nincorrect. This update ensures the method works as intended.\n\n\n## Change\n\nAudioProcessor::TrackProperties now uses std::optional.\n\n**Possible Issues**\n\nCode that accessed TrackProperties properties directly will no longer compile.\n\n**Workaround**\n\nUse std::optional::has_value() to check if a property is set. Or Access the\nproperty value safely using std::optional::value() or operator*.\n\n**Rationale**\n\nPreviously, it was not possible to distinguish whether a TrackProperty was\nexplicitly set or if the default value was being used.\n\n\n## Change\n\nSupport for Arm32 in Projucer has been removed for Windows targets.\n\n**Possible Issues**\n\nProjucer projects targeting Arm32 on Windows will no longer be able to select\nthat option.\n\n**Workaround**\n\nSelect Arm64 or Arm64EC instead of Arm32, and port any 32-bit specific code to\n64-bit.\n\n**Rationale**\n\n32-bit Arm support has been deprecated in current versions of Windows 11.\n\n\n# Version 8.0.4\n\n## Change\n\nThe Javascript implementation has been moved into a independent juce module.\n\n**Possible Issues**\n\nAny existing use of JavascriptEngine, JSCursor, or JSObject will fail to\ncompile.\n\n**Workaround**\n\nAdd the new juce_javascript module to the project.\n\n**Rationale**\n\nThe Javascript implementation increases compilation times while being required\nby only a select number of projects.\n\n\n## Change\n\nThe return type for VST3ClientExtensions::getCompatibleClasses() has changed\nfrom a String to an array of 16 bytes.\n\n**Possible Issues**\n\nAny inherited classes overriding this method might fail to compile.\n\n**Workaround**\n\nEither explicitly switch to creating a 16-byte std::array or use\nVST3ClientExtensions::toInterfaceId() to convert a string to a 16-byte array.\n\n**Rationale**\n\nAs part of adding functionality to support migrating parameter IDs from\ncompatible plugins it was useful to switch to a safer type for representing\nVST3 interface IDs that closer matches the VST3 SDK types.\n\n\n## Change\n\nThe VBlankAttachment class' inheritance from the ComponentPeer::VBlankListener\nand ComponentListener classes has been made private.\n\n**Possible Issues**\n\nExternal code that calls VBlankAttachment::onVBlank or\nVBlankAttachment::componentParentHierarchyChanged will fail to compile.\n\n**Workaround**\n\nThere is no workaround.\n\n**Rationale**\n\nMaking the inheritance public originally was an oversight. The overriden\nfunctions are meant to be called only by the ComponentPeer and Component objects\nthat the VBlankAttachment instance registers itself with. External code calling\nthese functions undermines the correct behaviour of the VBlankAttachment class.\n\n\n## Change\n\nThe signature of VBlankListener::onVBlank() was changed to\nVBlankListener::onVBlank (double), with the addition of a timestamp parameter\nthat corresponds to the time at which the next frame will be displayed.\n\n**Possible Issues**\n\nCode that overrides VBlankListener::onVBlank() will fail to compile.\n\n**Workaround**\n\nAdd a double parameter to the function overriding VBlankListener::onVBlank().\nThe behaviour will be unchanged if this new parameter is then ignored.\n\n**Rationale**\n\nA timestamp parameter has been missing from the VBlank callback since its\naddition. The new parameter allows all VBlankListeners to synchronise the\ncontent of their draw calls to the same frame timestamp.\n\n\n# Version 8.0.2\n\n## Change\n\nFont::getStringWidth and Font::getStringWidthFloat have been deprecated.\nFont::getGlyphPositions has been removed.\n\n**Possible Issues**\n\nCode that uses these functions will raise warnings at compile time, or fail\nto build.\n\n**Workaround**\n\nUse GlyphArrangement::getStringWidth or TextLayout::getStringWidth to find the\nwidth of a string taking font-fallback and shaping into account.\n\nTo find individual glyph positions, lay out the string using GlyphArrangement\nor TextLayout, then use the positions provided by\nGlyphArrangement::PositionedGlyph and/or TextLayout::Glyph.\n\n**Rationale**\n\nThe results of the old Font member functions computed their results assuming\nthat ligatures and other font features would not be used when rendering the\nstring. The functions would also substitute missing characters with the Font's\nnotdef/tofu glyph instead of using a fallback font.\n\nUsing GlyphArrangement or TextLayout will use a sophisticated text shaping\nalgorithm to lay out the string, with support for font fallback.\n\n\n## Change\n\nThe constructors of the WebSliderRelay, WebToggleButtonRelay and\nWebComboBoxRelay classes were changed and they no longer accept a reference\nparameter to a WebBrowserComponent object.\n\n**Possible Issues**\n\nCode that uses these classes will fail to compile.\n\n**Workaround**\n\nOmit the WebBrowserComponent parameter when constructing the relay objects.\n\n**Rationale**\n\nThe relay classes use a new underlying mechanism to obtain a pointer to the\nWebBrowserComponent object. When calling the\nWebBrowserComponent::Options::withOptionsFrom() function with the relay as a\nparameter, the corresponding WebBrowserComponent object will notify the relay\nabout its creation and destruction.\n\nThis avoids the anti-pattern where the relay class required a reference to a\nyet uninitialised WebBrowserComponent object.\n\n\n## Change\n\nThe coefficients of LadderFilter::Mode::BPF12 have been changed, causing a\nslight change in the filter's transfer function.\n\n**Possible Issues**\n\nCode that uses the LadderFilter in BPF12 mode may produce different output\nsamples.\n\n**Workaround**\n\nThere is no workaround. If you need this functionality, please let us know\nabout your use case. In the meantime, you may be able to copy the old class\ninto your own project/module and use it that way.\n\n**Rationale**\n\nThe LadderFilter implementation follows the paper Valimaki (2006): Oscillator\nand Filter Algorithms for Virtual Analog Synthesis. The BPF12 mode coefficients\nhowever contained a typo compared to the paper, making the BPF12 mode incorrect.\n\n\n# Version 8.0.1\n\n## Change\n\nAll member functions of DynamicObject other than clone() and writeAsJSON() have\nbeen made non-virtual.\n\n**Possible Issues**\n\nClasses that override these functions will fail to compile.\n\n**Workaround**\n\nInstead of overriding hasMethod() and invokeMethod(), call setMethod() to\nadd new member functions.\n\nInstead of overriding getProperty() to return a custom property, add that\nproperty using setProperty().\n\n**Rationale**\n\nAllowing the implementations of these functions to be changed may cause derived\ntypes to accidentally break the invariants of the DynamicObject type.\nSpecifically, the results of hasMethod() and hasProperty() must be consistent\nwith the result of getProperties(). Additiionally, calling getProperty() should\nreturn the same var as fetching the property through getProperties(), and\ncalling invokeMethod() should behave the same way as retrieving and invoking a\nNativeFunction via getProperties().\n\nMore concretely, the new QuickJS-based Javascript engine requires that all\nmethods/properties are declared explicitly, which cannot be mapped to the more\nopen-ended invokeMethod() API taking an arbitrary method name. Making\ninvokeMethod() non-virtual forces users to add methods with setMethod() instead\nof overriding invokeMethod(), which is more compatible with QuickJS.\n\n\n## Change\n\nThe default JSON encoding has changed from ASCII escape sequences to UTF-8.\n\n**Possible Issues**\n\nJSON text exchanged with a non-standard compliant parser expecting ASCII\nencoding, may fail to parse UTF-8 encoded JSON files. Reliance on the raw JSON\nencoded string literal, for example for file comparison, Base64 encoding, or any\nencryption, may result in false negatives for JSON data containing the same data\nbetween versions of JUCE.\n\nNote: JSON files that only ever encoded ASCII text will NOT be effected.\n\n**Workaround**\n\nUse the `JSON::writeToStream()` or `JSON::toString()` functions that take a\n`FormatOptions` parameter and call `withEncoding (JSON::Encoding::ascii)` on the\n`FormatOptions` object.\n\n**Rationale**\n\nRFC 8259 states\n\n> JSON text exchanged between systems that are not part of a closed ecosystem\nMUST be encoded using UTF-8 [RFC3629].\n>\n> Previous specifications of JSON have not required the use of UTF-8 when\ntransmitting JSON text.  However, the vast majority of JSON-based software\nimplementations have chosen to use the UTF-8 encoding, to the extent that it is\nthe only encoding that achieves interoperability.\n\nFor this reason UTF-8 encoding has better interoperability than ASCII escape\nsequences.\n\n\n## Change\n\nThe ASCII and Unicode BEL character (U+0007) escape sequence has changed in the\nJSON encoder from \"\\a\" to \"\\u0007\".\n\n**Possible Issues**\n\nReliance on the raw JSON encoded string literal, for example for file comparison,\nbase-64 encoding, or any encryption, may result in false negatives for JSON data\ncontaining a BEL character between versions of JUCE.\n\n**Workaround**\n\nUse string replace, for example call `replace (\"\\\\u007\", \"\\\\a\")` on the\nresulting JSON string to match older versions of JUCE.\n\n**Rationale**\n\nThe JSON specification does not state that the BEL character can be escaped\nusing \"\\a\". Therefore other JSON parsers incorrectly read this character when\nthey encounter it.\n\n\n## Change\n\nThe LowLevelGraphicsPostscriptRenderer has been removed.\n\n**Possible Issues**\n\nCode that uses this class will no longer compile.\n\n**Workaround**\n\nThere is no workaround. If you need this functionality, please let us know\nabout your use case. In the meantime, you may be able to copy the old classes\ninto your own project/module and use them that way.\n\n**Rationale**\n\nWe are not aware of any projects using this functionality. This renderer was\nnot as fully-featured as any of the other renderers, so it's likely that users\nwould have filed issue reports if they were using this feature.\n\n\n## Change\n\nSupport for the MinGW toolchain has been removed.\n\n**Possible Issues**\n\nMinGW can no longer be used to build JUCE.\n\n**Workaround**\n\nOn Windows, use an alternative compiler such as Clang or MSVC.\n\nCross-compiling for Windows from Linux is not supported, and there is no\nworkaround for this use case.\n\n**Rationale**\n\nThe MinGW provides a poor user experience, with very long build times and\nmissing features. The high maintenance cost, both in terms of developer time,\nand continuous integration bandwidth (both of which could provide more value\nelsewhere), means that continued support for MinGW is difficult to justify.\n\n\n## Change\n\nThe GUI Editor has been removed from the Projucer.\n\n**Possible Issues**\n\nThe Projucer can no longer be used to visually edit JUCE Components.\n\n**Workaround**\n\nThere is no workaround.\n\n**Rationale**\n\nThis feature has been deprecated, without receiving bugfixes or maintenance,\nfor a long time.\n\n\n## Change\n\nThe Visual Studio 2017 exporter has been removed from the Projucer.\n\n**Possible Issues**\n\nIt will no longer be possible to generate Visual Studio 2017 projects using the\nProjucer.\n\n**Workaround**\n\nUse a different exporter, such as the exporter for Visual Studio 2019 or 2022.\n\n**Rationale**\n\nSince JUCE 8, the minimum build requirement has been Visual Studio 2019. This\nminimum requirement allows JUCE to use modern C++ features, along with modern\nWindows platform features.\n\n\n## Change\n\nThe Code::Blocks exporter has been removed from the Projucer.\n\n**Possible Issues**\n\nIt will no longer be possible to generate Code::Blocks projects using the\nProjucer.\n\n**Workaround**\n\nUse a different exporter, such as the Makefile exporter on Linux, or one of the\nVisual Studio exporters on Windows.\n\n**Rationale**\n\nThe Code::Blocks IDE does not seem to be actively maintained. Other projects\nare dropping support, with the Code::Blocks generator deprecated in CMake 3.27.\nAdditionally, the Code::Blocks exporter did not provide a good user experience,\nespecially for new users on Windows, as it defaulted to using the MinGW\ntoolchain. This toolchain tends to be slow to build and link, and is not fully\nsupported by JUCE, missing support for some audio and video backends, and\nplugin formats.\n\n\n## Change\n\nThe tab width when rendering text with the GlyphArrangement and TextLayout\nclasses now equals the width of a space. Previously it equaled the width of a\ntofu character used for missing glyphs.\n\n**Possible Issues**\n\nUser interfaces using the GlyphArrangement and TextLayout classes directly to\nrender text containing tabs will look differently. The TextEditor and\nCodeEditorComponent classes have special logic for replacing the tabs prior to\nrendering, and consequently, these are not affected.\n\n**Workaround**\n\nReplace the tab characters prior to rendering and substitute them with the\nrequired number of non-breaking spaces.\n\n**Rationale**\n\nSince the Unicode related revamping of JUCE's text rendering classes, tab\ncharacters would raise assertions and would be rendered with the tofu glyph.\nThis change visually treats tab characters as non-breaking spaces. Since the\nJUCE 7 behaviour of using the tofu glyph's width was not a conscious decision,\nbut rather a side effect of ignoring unresolved glyphs, using a default width\nof one space is more reasonable.\n\n\n# Version 8.0.0\n\n## Change\n\nThe virtual functions ResizableWindow::getBorderThickness() and\nResizableWindow::getContentComponentBorder() are now const.\n\n**Possible Issues**\n\nClasses overriding these functions will fail to compile.\n\n**Workaround**\n\nAdd 'const' to overriding functions.\n\n**Rationale**\n\nOmitting 'const' from these functions implies that they may change the state of\nthe ResizableWindow, which would be unexpected behaviour for getter functions.\nIt also means that the functions cannot be called from const member functions,\nwhich limits their usefulness.\n\n\n## Change\n\nAs part of the Unicode upgrades TextLayout codepaths have been unified across\nall platforms. As a consequence the behaviour of TextLayout on Apple platforms\nwill now be different in two regards:\n- With certain fonts, line spacing will now be different.\n- The AttributedString option WordWrap::byChar will no longer have an effect,\n  just like it didn't have an effect on non-Apple platforms previously. Wrapping\n  will now always happen on word boundaries.\n\nFurthermore, the JUCE_USE_DIRECTWRITE compiler flag will no longer have any\neffect.\n\n**Possible Issues**\n\nUser interfaces using TextLayout and the WordWrap::byChar option will have their\nappearance altered on Apple platforms. The line spacing will be different for\ncertain fonts.\n\n**Workaround**\n\nThere is no workaround.\n\n**Rationale**\n\nThe new, unified codepath has better support for Unicode text in general. The\nfont fallback mechanism, which previously was only available using the removed\ncodepaths is now an integral part of the new approach. By removing the\nalternative codepaths, text layout and line spacing has become more consistent\nacross the platforms.\n\n\n## Change\n\nAs part of the Unicode upgrades the vertical alignment logic of TextLayout has\nbeen altered. Lines containing text written in multiple different fonts will\nnow have their baselines aligned. Additionally, using the\nJustification::verticallyCentred or Justification::bottom flags may now result\nin the text being positioned slightly differently.\n\n**Possible Issues**\n\nUser interfaces using TextLayout with texts drawn using multiple fonts will now\nhave their look changed.\n\n**Workaround**\n\nThere is no workaround.\n\n**Rationale**\n\nThe old implementation had incosistent vertical alignment behaviour. Depending\non what exact fonts the first line of text happened to use, the bottom alignment\nwould sometimes produce unnecessary padding on the bottom. With certain text and\nFont combinations the text would be drawn beyond the bottom boundary even though\nthere was free space above the text.\n\nThe same amount of incorrect vertical offset, that was calculated for bottom\nalignment, was also present when using centred, it just wasn't as apparent.\n\nNot having the baselines aligned between different fonts resulted in generally\ndispleasing visuals.\n\n\n## Change\n\nThe virtual functions LowLevelGraphicsContext::drawGlyph() and drawTextLayout()\nhave been removed.\n\n**Possible Issues**\n\nClasses overriding these functions will fail to compile.\n\n**Workaround**\n\nReplace drawGlyph() with drawGlyphs(), which draws several glyphs at once.\nRemove implementations of drawTextLayout().\n\n**Rationale**\n\nOn Windows and macOS, drawing several glyphs at once is faster than drawing\nglyphs one-at-a-time. The new API is more general, and allows for more\nperformant text rendering.\n\n\n## Change\n\nJUCE widgets now query the LookAndFeel to determine the TypefaceMetricsKind to\nuse. By default, the LookAndFeel will specify the \"portable\" metrics kind,\nwhich may change the size of text in JUCE widgets, depending on the font and\nplatform.\n\n**Possible Issues**\n\nUsing \"portable\" metrics may cause text to render at a different scale when\ncompared to the old \"legacy\" metrics.\n\n**Workaround**\n\nIf you want to restore the old metrics, e.g. to maintain the same text scaling\nin an existing app, you can override LookAndFeel::getDefaultMetricsKind() on\neach LookAndFeel in your application, to return the \"legacy\" metrics kind.\n\n**Rationale**\n\nUsing portable font metrics streamlines the development experience when working\non applications that must run on multiple platforms. Using portable metrics by\ndefault means that new projects will benefit from this improved cross-platform\nbehaviour from the outset.\n\n\n## Change\n\nSignatures of several Typeface member functions have been updated to accept a\nnew TypefaceMetricsKind argument. The getAscent(), getDescent(), and\ngetHeightToPointsFactor() members have been replaced by getMetrics(), which\nreturns the same metrics information all at once.\n\nFont instances now store a metrics kind internally. Calls to Font::getAscent()\nand other functions that query font metrics will always use the Font's stored\nmetrics kind. Calls to Font::operator== will take the metrics kinds into\naccount, so two fonts that differ only in their stored metrics kind will\nbe considered non-equal.\n\n**Possible Issues**\n\nCode that calls any of the affected Typeface functions will fail to compile.\nCode that compares Font instances may behave differently if the compared font\ninstances use mismatched metrics kinds.\n\n**Workaround**\n\nSpecify the kind of metrics you require when calling Typeface member functions.\nCall getMetrics() instead of the old individual getters for metrics. Review\ncalls to Font::operator==, especially where comparing against a\ndefault-constructed Font.\n\n**Rationale**\n\nUntil now, the same font data could produce different results from\nTypeface::getAscent() et al. depending on the platform. The updated interfaces\nallow the user to choose between the old-style non-portable metrics (to avoid\nlayout changes in existing projects), and portable metrics (more suitable for\nnew or cross-platform projects).\nMost users will fetch metrics from Font objects rather than from the Typeface.\nFont will continue to return non-portable metrics when constructed using the\nold (deprecated) constructors. Portable metrics can be enabled by switching to\nthe new Font constructor that takes a FontOptions argument. See the\ndocumentation for TypefaceMetricsKind for more details.\n\n\n## Change\n\nTypeface::getOutlineForGlyph now returns void instead of bool.\n\n**Possible Issues**\n\nCode that checks the result of this function will fail to compile.\n\n**Workaround**\n\nOmit any checks against the result of this function.\n\n**Rationale**\n\nThis function can no longer fail. It may still output an empty path if the\nrequested glyph isn't present in the typeface.\n\n\n## Change\n\nCustomTypeface has been removed.\n\n**Possible Issues**\n\nCode that interacts with CustomTypeface will fail to compile.\n\n**Workaround**\n\nThere is currently no workaround. If you were using CustomTypeface to\nimplement typeface fallback, there is a new API,\nFont::findSuitableFontForText, that you can use to locate fonts capable\nof rendering given strings.\n\n**Rationale**\n\nThe CustomTypeface class is difficult/impossible to support with the new\nHarfBuzz Typeface implementation. New support for automatic font fallback\nwill be introduced in JUCE 8, and this will obviate much of the need for\nCustomTypeface.\n\n\n## Change\n\nThe Android implementations of Typeface::getStringWidth(), getGlyphPositions(),\nand getEdgeTableForGlyph() have been updated to return correctly-normalised\nresults. The effect of this change is to change (in practice, slightly reduce)\nthe size at which many fonts will render on Android.\n\n**Possible Issues**\n\nThe scale of some text on Android may change.\n\n**Workaround**\n\nFor font sizes specified in 'JUCE units' by passing a value to the Font\nconstructor or to Font::setHeight, instead pass the same size to\nFont::withPointHeight and use the returned Font object.\n\n**Rationale**\n\nThe behaviour of the Typeface member functions did not match the documented\nbehaviour, or the behaviour on other platforms. This could make it difficult to\ncreate interfaces that rendered as expected on multiple platforms.\n\nThe upcoming unicode support work will unify much of the font-handling and\ntext-shaping machinery in JUCE. Ensuring that all platforms have consistent\nbehaviour before and after the unicode upgrade will make it easier to implement\nand verify those changes.\n\n\n## Change\n\nThe JavascriptEngine::callFunctionObject() function has been removed.\n\n**Possible Issues**\n\nProjects that used the removed function will fail to compile.\n\n**Workaround**\n\nUse the JSObjectCursor::invokeMethod() function to call functions beyond the\nroot scope.\n\n**Rationale**\n\nThe JavascriptEngine's underlying implementation has been changed, and the\nDynamicObject type is no longer used for the internal implementation of the\nengine. The JSObjectCursor class provides a way to navigate the Javascript\nobject graph without depending on the type of the engine's internal\nimplementation.\n\n\n## Change\n\nThe JavascriptEngine::getRootObjectProperties() function returns its result by\nvalue instead of const reference.\n\n**Possible Issues**\n\nProjects that captured the returned value by reference and depended on it being\nvalid for more than the current function's scope may stop working correctly.\n\n**Workaround**\n\nIf the return value is used beyond the calling function's scope it must be\nstored in a value.\n\n**Rationale**\n\nThe JavascriptEngine's underlying implementation has been changed, and the\nNamedValueSet type is no longer used in its internal representation. Hence a new\nNamedValueSet object is created during the getRootObjectProperties() function\ncall.\n\n\n## Change\n\nJavascriptEngine::evaluate() will now return a void variant if the passed in\ncode successfully evaluates to void, and only return an undefined variant if\nan error occurred during evaluation. The previous implementation would return\nvar::undefined() in both cases.\n\n**Possible Issues**\n\nProjects that depended on the returned value of JavascriptEngine::evaluate() to\nbe undefined even during successful evaluation may fail to work correctly.\n\n**Workaround**\n\nCode paths that depend on an undefined variant to be returned should be checked\nif they aren't used exclusively to determine evaluation failure. In failed\ncases the JavascriptEngine::evaluate() function will continue to return\nvar::undefined().\n\n**Rationale**\n\nWhen a Javascript expression successfully evaluates to void, and when it fails\nevaluation due to timeout or syntax errors are distinctly different situations\nand this should be reflected on the value returned.\n\n\n## Change\n\nThe old JavascriptEngine internals have been entirely replaced by a new\nimplementation wrapping the QuickJS engine.\n\n**Possible Issues**\n\nCode that previously successfully evaluated using JavascriptEngine::evaluate()\nor JavascriptEngine::execute(), could now fail due to the rules applied by the\nnew, much more standards compliant engine. One example is object literals\ne.g. { a: 'foo', b: 42, c: {} }. When evaluated this way the new engine will\nassume that this is a code block and fail.\n\n**Workaround**\n\nWhen calling JavascriptEngine::evaluate() or JavascriptEngine::execute() the\ncode may have to be updated to ensure that it's correct according to the\nJavascript language specification and in the context of that evaluation. Object\nliterals standing on their own for example should be wrapped in parentheses\ne.g. ({ a: 'foo', b: 42, c: {} }).\n\n**Rationale**\n\nThe new implementation uses a fully featured, performant, standards compliant\nJavascript engine, which is a significant upgrade.\n\n\n## Change\n\nThe `WebBrowserComponent::pageAboutToLoad()` function on Android now only\nreceives callbacks for entire page navigation events, as opposed to every\nresource fetch operation. Returning `false` from the function now prevents\nthis operation from taking any effect, as opposed to producing potentially\nvisible error messages.\n\n**Possible Issues**\n\nCode that previously depended on the ability to allow or fail resource\nrequests on Android may fail to work correctly.\n\n**Workaround**\n\nNavigating to webpages can still be prevented by returning `false` from this\nfunction, similarly to other platforms.\n\nResource requests sent to the domain returned by\n`WebBrowserComponent::getResourceProviderRoot()` can be served or rejected by\nusing the `WebBrowserComponent::ResourceProvider` feature.\n\nResource requests sent to other domains can not be controlled on Android\nanymore.\n\n**Rationale**\n\nPrior to this change there was no way to reject a page load operation without\nany visible effect, like there was on the other platforms. The fine grained per\nresource control was not possible on other platforms. This change makes the\nAndroid implementation more consistent with the other platforms.\n\n\n## Change\n\nThe minimum supported compilers and deployment targets have been updated, with\nthe new minimums listed in the top level [README](README.md).\n\nMinGW is no longer supported.\n\n**Possible Issues**\n\nYou may no longer be able to build JUCE projects or continue targeting older\nplatforms.\n\n**Workaround**\n\nIf you cannot build your project, update your build machine to a more modern\noperating system and compiler.\n\nThere is no workaround to target platforms that predate the new minimum\ndeployment targets.\n\n**Rationale**\n\nNew features of JUCE require both more modern compilers and deployment targets.\n\nThe amount of investment MinGW support requires is unsustainable.\n\n\n## Change\n\nThe [JUCE End User Licence Agreement](https://juce.com/legal/juce-8-licence/)\nhas been updated and all JUCE modules are now dual-licensed under the AGPLv3 and\nthe JUCE licence. Previously the juce_audio_basics, juce_audio_devices,\njuce_core and juce_events modules were licensed under the ISC licence.\n\nPlease read the End User Licence Agreement for full details.\n\n**Possible Issues**\n\nThere may be new restrictions on how you can use JUCE.\n\n**Workaround**\n\nN/A\n\n**Rationale**\n\nThe new JUCE End User Licence Agreement is much easier to understand, and has a\nmuch more generous personal tier. The move from ISC to AGPLv3/JUCE simplifies\nthe licensing situation and encourages the creation of more open source software\nwithout impacting personal use of the JUCE framework.\n\n\n# Version 7.0.12\n\n## Change\n\nThe function AudioChannelSet::create9point0point4, along with variants for\n9.1.4, 9.0.6, and 9.1.6, used to correspond to VST3 layouts k90_4, k91_4,\nk90_6, and k91_6 respectively. These functions now correspond to k90_4_W,\nk91_4_W, k90_6_W, and k91_6_W respectively.\n\n**Possible Issues**\n\nVST3 plugins that used these AudioChannelSet layouts to specify initial bus\nlayouts, or to validate layouts in isBusesLayoutSupported, will now behave\ndifferently.\n\nFor example, if the host wants to check whether the k90_4 layout is supported,\npreviously isBusesLayoutSupported() would have received the layout created by\ncreate9point0point4(), but will now receive the layout created by\ncreate9point0point4ITU().\n\n**Workaround**\n\nIf you already have special-case handling for specific surround layouts,\ne.g. to enable or disable them in isBusesLayoutSupported(), you may need to\nadd cases to handle the new AudioChannelSet::create*ITU() layout variants.\n\n**Rationale**\n\nPreviously, the VST3 SDK only contained ITU higher-order surround layouts, but\nthe higher-order layouts specified in JUCE used Atmos speaker positions rather\nthan ITU speaker positions. This meant that JUCE had to remap speaker layouts\nbetween Atmos/ITU formats when communicating with VST3 plugins. This was\nconfusing, as it required that the meaning of some channels was changed during\nthe conversion.\n\nIn newer versions of the VST3 SDK, new \"wide\" left and right speaker\ndefinitions are available, allowing both ITU and Atmos surround layouts to be\nrepresented. The change in JUCE surfaces this distinction to the user, allowing\nthem to determine e.g. whether the host has requested an ITU or an Atmos\nlayout, and to handle these cases separately if necessary.\n\n\n# Version 7.0.10\n\n## Change\n\nThe signatures of some member functions of ci::Device have been changed:\n- sendPropertyGetInquiry\n- sendPropertySetInquiry\n\nThe signature of ci::PropertyHost::sendSubscriptionUpdate has also changed.\n\nThe following member functions of ci::Device have been replaced with new\nalternatives:\n- sendPropertySubscriptionStart\n- sendPropertySubscriptionEnd\n- getOngoingSubscriptionsForMuid\n- countOngoingPropertyTransactions\n\nThe enum field PropertyExchangeResult::Error::invalidPayload has been removed.\n\n**Possible Issues**\n\nCode that uses any of these symbols will fail to compile until it is updated.\n\n**Workaround**\n\nDevice::sendPropertyGetInquiry, Device::sendPropertySetInquiry, and\nPropertyHost::sendSubscriptionUpdate all now return an optional RequestKey\ninstead of an ErasedScopeGuard. Requests started via any of these functions may\nbe cancelled by the request's RequestKey to the new function\nDevice::abortPropertyRequest. The returned RequestKey may be null, indicating a\nfailure to send the request.\n\ncountOngoingPropertyTransactions has been replaced by getOngoingRequests,\nwhich returns the RequestKeys of all ongoing requests. To find the number of\ntransactions, use the size of the returned container.\n\nsendPropertySubscriptionStart has been replaced by beginSubscription.\nsendPropertySubscriptionEnd has been replaced by endSubscription.\nThe new functions no longer take callbacks. Instead, to receive notifications\nwhen a subscription starts or ends, override\nDeviceListener::propertySubscriptionChanged.\n\ngetOngoingSubscriptionsForMuid is replaced by multiple functions.\ngetOngoingSubscriptions returns SubscriptionKeys for all of the subscriptions\ncurrently in progress, which may be filtered based on SubscriptionKey::getMuid.\nThe subscribeId assigned to a particular SubscriptionKey can be found using\ngetSubscribeIdForKey, and the subscribed resource can be found using\ngetResourceForKey.\n\nIt's possible that the initial call to beginSubscription may not be able to\nstart the subscription, e.g. if the remote device is busy and request a retry.\nIn this case, the request is cached. If you use subscriptions, then you\nshould call sendPendingMessages periodically to flush any messages that may\nneed to be retried.\n\nThere is no need to check for the invalidPayload error when processing\nproperty exchange results.\n\n**Rationale**\n\nKeeping track of subscriptions is quite involved, as the initial request to\nbegin a subscription might not be accepted straight away. The device may not\ninitially have enough vacant slots to send the request, or responder might\nrequest a retry if it is too busy to process the request. The ci::Device now\ncaches requests when necessary, allowing them to be retried in the future.\nThis functionality couldn't be implemented without modifying the old interface.\n\nReplacing ErasedScopeGuards with Keys makes lifetime handling a bit easier.\nIt's no longer necessary to store or manually release scope guards for requests\nthat don't need to be cancelled. The new Key types are also a bit more\ntypesafe, and allow for simple queries of the transaction that created the key.\n\n\n## Change\n\nThe ListenerList::Iterator class has been removed.\n\n**Possible Issues**\n\nAny code directly referencing the ListenerList::Iterator will fail to compile.\n\n**Workaround**\n\nIn most cases there should be a public member function that does the required\njob, for example, call, add, remove, or clear. In other cases you can access the\nraw array of listeners to iterate through them by calling getListeners().\n\n**Rationale**\n\nIterating through the listeners using the ListenerList::Iterator could in a\nnumber of cases lead to surprising results and undefined behavior.\n\n\n## Change\n\nThe background colour of the Toolbar::CustomisationDialog has been changed from\nwhite to a new, customisable value, that matches Toolbar::backgroundColourId by\ndefault.\n\n**Possible Issues**\n\nUser interfaces that use Toolbar::CustomisationDialog will render differently.\n\n**Workaround**\n\nYou can customise the new colour using LookAndFeel::setColour() using\nToolbar::customisationDialogBackgroundColourId.\n\n**Rationale**\n\nPreviously there was no way to customise the dialog's background colour and the\nfixed white colour was inappropriate for most user interfaces.\n\n\n## Change\n\nProfileHost::enableProfile and ProfileHost::disableProfile have been combined\ninto a single function, ProfileHost::setProfileEnablement.\n\n**Possible Issues**\n\nCode that calls this function will fail to compile until it is updated.\n\n**Workaround**\n\nTo enable a profile, call setProfileEnablement with a positive number of\nchannels. To disable a profile, call setProfileEnablement with zero channels.\n\n**Rationale**\n\nThe new API is simpler, more compact, and more consistent, as it now mirrors\nthe signature of Device::sendProfileEnablement.\n\n\n## Change\n\nOpenGLContext::getRenderingScale() has been changed to include the effects of\nAffineTransforms on all platforms.\n\n**Possible Issues**\n\nApplications that use OpenGLContext::getRenderingScale() and also have scaling\ntransformations that affect the context component's size may render incorrectly.\n\n**Workaround**\n\nAdjust rendering code by dividing the reported scale with the user specified\ntransformation scale, if necessary.\n\n**Rationale**\n\nThe previous implementation resulted in inconsistent behaviour between Windows\nand the other platforms. The main intended use-case for getRenderingScale() is\nto help determine the number of physical pixels covered by the context\ncomponent. Since plugin windows will often use AffineTransforms to set up the\ncorrect rendering scale, it makes sense to include these in the result of\ngetRenderingScale().\n\n\n## Change\n\nComponents that have setMouseClickGrabsKeyboardFocus() set to false will not\naccept or propagate keyboard focus to parent components due to a mouse click\nevent. This is now true even if the mouse click event happens in a child\ncomponent with setMouseClickGrabsKeyboardFocus (true) and\nsetWantsKeyboardFocus (false).\n\n**Possible Issues**\n\nComponents that rely on child components propagating keyboard focus from a\nmouse click, when those child components have setMouseClickGrabsKeyboardFocus()\nset to false, will no longer grab keyboard focus.\n\n**Workaround**\n\nAdd a MouseListener to the component receiving the click and override the\nmouseDown() method in the listener. In the mouseDown() method call\nComponent::grabKeyboardFocus() for the component that should be focused.\n\n**Rationale**\n\nThe intent of setMouseClickGrabsKeyboardFocus (false) is to reject focus changes\ncoming from mouse clicks even if the component is otherwise capable of receiving\nkeyboard focus.\n\nThe previous behaviour could result in surprising focus changes when a child\ncomponent was clicked. This manifested in the focus seemingly disappearing when\na PopupMenu item added to a component was clicked.\n\n\n## Change\n\nThe NodeID argument to AudioProcessorGraph::addNode() has been changed to take\na std::optional<NodeID>.\n\n**Possible Issues**\n\nThe behavior of any code calling AudioProcessorGraph::addNode(), that explicitly\npasses a default constructed NodeID or a NodeID constructed with a value of 0,\nwill change. Previously these values would have been treated as a null value\nresulting in the actual NodeID being automatically determined. These will now\nbe treated as requests for an explicit value.\n\n**Workaround**\n\nEither remove the explicit NodeID argument and rely on the default argument or\npass a std::nullopt instead.\n\n**Rationale**\n\nThe previous version prevented users from specifying a NodeID of 0 and resulted\nin unexpected behavior.\n\n\n## Change\n\nThe signature of DynamicObject::writeAsJSON() has been changed to accept a\nmore extensible JSON::FormatOptions argument.\n\n**Possible Issues**\n\nCode that overrides or calls this function will fail to compile.\n\n**Workaround**\n\nUpdate the signatures of overriding functions. Use FormatOptions::getIndentLevel()\nand FormatOptions::getMaxDecimalPlaces() as necessary. To find whether the output\nshould be multi-line, compare the result of FormatOptions::getSpacing() with\nJSON::Spacing::multiLine.\n\nCallers of the function can construct the new argument type using the old\narguments accordingly\n\n```\nJSON::FormatOptions{}.withIndentLevel (indentLevel)\n                     .withSpacing (allOnOneLine ? JSON::Spacing::singleLine\n                                                : JSON::Spacing::multiLine)\n                     .withMaxDecimalPlaces (maximumDecimalPlaces);\n```\n\n**Rationale**\n\nThe previous signature made it impossible to add new formatting options. Now,\nif we need to add further options in the future, these can be added to the\nFormatOptions type, which will not be a breaking change.\n\n\n# Version 7.0.9\n\n## Change\n\nCachedValue::operator==() will now emit floating point comparison warnings if\nthey are enabled for the project.\n\n**Possible Issues**\n\nCode using this function to compare floating point values may fail to compile\ndue to the warnings.\n\n**Workaround**\n\nRather than using CachedValue::operator==() for floating point types, use the\nexactlyEqual() or approximatelyEqual() functions in combination with\nCachedValue::get().\n\n**Rationale**\n\nThe JUCE Framework now offers the free-standing exactlyEqual() and\napproximatelyEqual() functions to clearly express the desired semantics when\ncomparing floating point values. These functions are intended to eliminate\nthe ambiguity in code-bases regarding these types. However, when such a value\nis wrapped in a CachedValue the corresponding warning was suppressed until now,\nmaking such efforts incomplete.\n\n\n# Version 7.0.8\n\n## Change\n\nDynamicObject::clone now returns unique_ptr<DynamicObject> instead of\nReferenceCountedObjectPtr<DynamicObject>.\n\n**Possible Issues**\n\nOverrides of this function using the old signature will fail to compile.\nThe result of this function may need to be manually converted to a\nReferenceCountedObjectPtr.\n\n**Workaround**\n\nUpdate overrides to use the new signature.\nIf necessary, manually construct a ReferenceCountedObjectPtr at call sites.\n\n**Rationale**\n\nIt's easy to safely upgrade a unique_ptr to a shared/refcounted pointer.\nHowever, it's not so easy to convert safely in the opposite direction.\nGenerally, returning unique_ptrs rather than refcounted pointers leads to more\nflexible APIs.\n\n\n# Version 7.0.7\n\n## Change\n\nThe minimum supported CMake version is now 3.22.\n\n**Possible Issues**\n\nIt will no longer be possible to configure JUCE projects with CMake versions\nbetween 3.15 and 3.21 inclusive.\n\n**Workaround**\n\nNo workaround is available. Newer versions of CMake can be obtained from the\nofficial download page, or through system package managers.\n\n**Rationale**\n\nMoving to CMake 3.22 improves consistency with the Projucer's Android exporter,\nwhich already requires CMake 3.22. It also allows us to make use of the\nXCODE_EMBED_APP_EXTENSIONS property (introduced in CMake 3.21), fixing an\nissue when archiving AUv3 plugins.\n\n\n# Version 7.0.6\n\n## Change\n\nThread::wait and WaitableEvent::wait now take a double rather than an int to\nindicate the number of milliseconds to wait.\n\n**Possible Issues**\n\nCalls to either wait function may trigger warnings.\n\n**Workaround**\n\nExplicitly cast the value to double.\n\n**Rationale**\n\nChanging to double allows sub-millisecond waits which was important for\nsupporting changes to the HighResolutionTimer.\n\n\n## Change\n\nRealtimeOptions member workDurationMs was replaced by three optional member\nvariables in RealtimeOptions, and all RealtimeOptions member variables were\nmarked private.\n\n**Possible Issues**\n\nTrying to construct a RealtimeOptions object with one or two values, or access\nany of its member variables, will no longer compile.\n\n**Workaround**\n\nUse the withMember functions to construct the object, and the getter functions\nto access the member variable values.\n\n**Rationale**\n\nThe new approach improves the flexibility for users to specify realtime thread\noptions on macOS/iOS and improves the flexibility for the API to evolve without\nintroducing further breaking changes.\n\n\n## Change\n\nJUCE module compilation files with a platform suffix are now checked case\ninsensitively for CMake builds.\n\n**Possible Issues**\n\nIf a JUCE module compilation file ends in a specific platform suffix but does\nnot match the case for the string previously checked by the CMake\nimplementation, it may have compiled for all platforms. Now, it will only\ncompile for the platform specified by the suffix.\n\n**Workaround**\n\nIn most cases this was probably a bug, in other cases rename the file to remove\nthe platform suffix.\n\n**Rationale**\n\nThis change improves consistency between the Projucer and CMake integrations.\n\n\n## Change\n\nAn undocumented feature that allowed JUCE module compilation files to compile\nfor a specific platform or subset of platforms by declaring the platform name\nfollowed by an underscore, was removed.\n\n**Possible Issues**\n\nIf a JUCE module compilation file contains a matching platform suffix followed\nby an underscore and is loaded by the Projucer it will no longer compile for\njust that platform.\n\n**Workaround**\n\nUse the suffix of the name only. If the undocumented feature was used to select\nmultiple platforms, make multiple separate files for each of the required\nplatforms.\n\n**Rationale**\n\nThis change improves consistency between the Projucer and CMake integrations.\nGiven the functionality was undocumented, the ease of a workaround, and the\nadded complexity required for CMake support, the functionality was removed.\n\n\n## Change\n\nUnique device IDs on iOS now use the OS provided 'identifierForVendor'.\nOnlineUnlockStatus has been updated to handle the iOS edge-case where a device\nID query might return an empty String.\n\n**Possible Issues**\n\nThe License checks using InAppPurchases, getLocalMachineIDs(), and\ngetUniqueDeviceID() may return an empty String if iOS 'is not ready'. This can\noccur for example if the device has restarted but has not yet been unlocked.\n\n**Workaround**\n\nInAppPurchase has been updated to handle this and propagate the error\naccordingly. The relevant methods have been updated to return a Result object\nthat can be queried for additional information on failure.\n\n**Rationale**\n\nApple have introduced restrictions on device identification rendering our\nprevious methods unsuitable.\n\n\n## Change\n\nAudioProcessor::getAAXPluginIDForMainBusConfig() has been deprecated.\n\n**Possible Issues**\n\nAny AudioProcessor overriding this method will fail to compile.\n\n**Workaround**\n\n- Create an object which inherits from AAXClientExtensions.\n- In the object override and implement getPluginIDForMainBusConfig().\n- In the AudioProcessor override getAAXClientExtensions() and return a pointer\n  to the object.\n\n**Rationale**\n\nAdditional AAX specific functionality was required in the audio processor.\nRather than continuing to grow and expand the AudioProcessor class with format\nspecific functionality, separating this concern into a new class allows for\ngreater expansion for those that need it without burdening those that don't.\nMoving this function into this class improves consistency both with the new\nfunctionality and with similar functionality for the VST2 and VST3 formats.\n\n\n## Change\n\nUnique device IDs on Windows have been updated to use a more reliable SMBIOS\nparser. The SystemStats::getUniqueDeviceID function now returns new IDs using\nthis improved parser. Additionally, a new function,\nSystemStats::getMachineIdentifiers, has been introduced to aggregate all ID\nsources. It is recommended to use this new function to verify any IDs.\n\n**Possible Issues**\n\nThe SystemStats::getUniqueDeviceID function will return a different ID for the\nsame machine due to the updated parser.\n\n**Workaround**\n\nFor code that previously relied on SystemStats::getUniqueDeviceID, it is advised\nto switch to using SystemStats::getMachineIdentifiers() instead.\n\n**Rationale**\n\nThis update ensures the generation of more stable and reliable unique device\nIDs, while also maintaining backward compatibility with the previous ID\ngeneration methods.\n\n\n## Change\n\nThe Grid layout algorithm has been slightly altered to provide more consistent\nbehaviour. The new approach guarantees that dimensions specified using the\nabsolute Px quantity will always be correctly rounded when applied to the\ninteger dimensions of Components.\n\n**Possible Issues**\n\nComponents laid out using Grid can observe a size or position change of +/- 1px\nalong each dimension compared with the result of the previous algorithm.\n\n**Workaround**\n\nIf the Grid based graphical layout is sensitive to changes of +/- 1px, then the\nUI layout code may have to be adjusted to the new algorithm.\n\n**Rationale**\n\nThe old Grid layout algorithm could exhibit surprising and difficult to control\nsingle pixel artifacts, where an item with a specified absolute size of\ne.g. 100px could end up with a layout size of 101px. The new approach\nguarantees that such items will have a layout size exactly as specified, and\nthis new behaviour is also in line with CSS behaviour in browsers. The new\napproach makes necessary corrections easier as adding 1px to the size of an\nitem with absolute dimensions is guaranteed to translate into an observable 1px\nincrease in the layout size.\n\n\n## Change\n\nThe k91_4 and k90_4 VST3 layouts are now mapped to the canonical JUCE 9.1.4 and\n9.0.4 AudioChannelSets. This has a different ChannelType layout than the\nAudioChannelSet previously used with such VST3 SpeakerArrangements.\n\n**Possible Issues**\n\nVST3 plugins that were prepared to work with the k91_4 and k90_4\nSpeakerArrangements may now have incorrect channel mapping. The channels\npreviously accessible through ChannelType::left and right are now accessible\nthrough ChannelType::wideLeft and wideRight, and channels previously accessible\nthrough ChannelType::leftCentre and rightCentre are now accessible through\nChannelType::left and right.\n\n**Workaround**\n\nCode that accesses the channels that correspond to the VST3 Speakers kSpeakerL,\nkSpeakerR, kSpeakerLc and kSpeakerRc needs to be updated. These channels are now\naccessible respectively through ChannelTypes wideLeft, wideRight, left and\nright. Previously they were accessible respectively through left, right,\nleftCentre and rightCentre.\n\n**Rationale**\n\nThis change allows developers to handle the 9.1.4 and 9.0.4 surround layouts\nwith one codepath across all plugin formats. Previously the\nAudioChannelSet::create9point1point4() and create9point0point4() layouts would\nonly be used in CoreAudio and AAX, but a different AudioChannelSet would be used\nin VST3 even though they were functionally equivalent.\n\n\n## Change\n\nThe signatures of the ContentSharer member functions have been updated. The\nContentSharer class itself is no longer a singleton.\n\n**Possible Issues**\n\nProjects that use the old signatures will not build until they are updated.\n\n**Workaround**\n\nInstead of calling content sharer functions through a singleton instance, e.g.\n    ContentSharer::getInstance()->shareText (...);\ncall the static member functions directly:\n    ScopedMessageBox messageBox = ContentSharer::shareTextScoped (...);\nThe new functions return a ScopedMessageBox instance. On iOS, the content\nsharer will only remain open for as long as the ScopedMessageBox remains alive.\nOn Android, this functionality will be added as/when the native APIs allow.\n\n**Rationale**\n\nThe new signatures are safer and easier to use. The ScopedMessageBox also\nallows content sharers to be dismissed programmatically, which wasn't\npreviously possible.\n\n\n## Change\n\nThe minimum supported AAX library version has been bumped to 2.4.0 and the\nlibrary is now built automatically while building an AAX plugin. The\nJucePlugin_AAXLibs_path preprocessor definition is no longer defined in AAX\nplugin builds.\n\n**Possible Issues**\n\nProjects that use the JucePlugin_AAXLibs_path definition may no longer build\ncorrectly. Projects that reference an AAX library version earlier than 2.4.0\nwill fail to build.\n\n**Workaround**\n\nYou must download an AAX library distribution with a version of at least 2.4.0.\nUse the definition JucePlugin_Build_AAX to check whether the AAX format is\nenabled at build time.\n\n**Rationale**\n\nThe JUCE framework now requires features only present in version 2.4.0 of the\nAAX library. The build change removes steps from the build process, and ensures\nthat the same compiler flags are used across the entire project.\n\n\n## Change\n\nThe implementation of ColourGradient::createLookupTable has been updated to use\nnon-premultiplied colours.\n\n**Possible Issues**\n\nPrograms that draw transparent gradients using the OpenGL or software\nrenderers, or that use lookup tables generated from transparent gradients for\nother purposes, may now produce different results.\n\n**Workaround**\n\nFor gradients to render the same as they did previously, transparent colour\nstops should be un-premultiplied. For colours with an alpha component of 0, it\nmay be necessary to specify appropriate RGB components.\n\n**Rationale**\n\nPreviously, transparent gradients rendered using CoreGraphics looked different\nto the same gradients drawn using OpenGL or the software renderer. This change\nupdates the OpenGL and software renderers, so that they produce the same\nresults as CoreGraphics.\n\n\n## Change\n\nProjucer-generated MSVC projects now build VST3s as bundles, rather than as\nsingle DLL files.\n\n**Possible Issues**\n\nBuild workflows that expect the VST3 to be a single DLL may break.\n\n**Workaround**\n\nAny post-build scripts that expect to copy or move the built VST3 should be\nupdated so that the entire bundle directory is copied/moved. The DLL itself\ncan still be located and extracted from within the generated bundle if\nnecessary.\n\n**Rationale**\n\nDistributing VST3s as single files was deprecated in VST3 v3.6.10. JUCE's CMake\nscripts already produce VST3s as bundles, so this change increases consistency\nbetween the two build systems.\n\n\n# Version 7.0.3\n\n## Change\n\nThe default macOS and iOS deployment targets set by the Projucer have been\nincreased to macOS 10.13 and iOS 11 respectively.\n\n**Possible Issues**\n\nProjects using the Projucer's default minimum deployment target will have their\nminimum deployment target increased.\n\n**Workaround**\n\nIf you need a lower minimum deployment target then you must set this in the\nProjucer's Xcode build configuration settings.\n\n**Rationale**\n\nXcode 14 no longer supports deployment targets lower than macOS 10.13 and iOS\n11.\n\n\n## Change\n\nThe ARA SDK expected by JUCE has been updated to version 2.2.0.\n\n**Possible Issues**\n\nBuilds using earlier versions of the ARA SDK will fail to compile.\n\n**Workaround**\n\nThe ARA SDK configured in JUCE must be updated to version 2.2.0.\n\n**Rationale**\n\n# Version 2.2.0 is the latest official release of the ARA SDK.\n\n\n## Change\n\nThe Thread::startThread (int) and Thread::setPriority (int) methods have been\nremoved. A new Thread priority API has been introduced.\n\n**Possible Issues**\n\nCode will fail to compile.\n\n**Workaround**\n\nRather than using an integer thread priority you must instead use a value from\nthe Thread::Priority enum. Thread::setPriority and Thread::getPriority should\nonly be called from the target thread. To start a Thread with a realtime\nperformance profile you must call startRealtimeThread.\n\n**Rationale**\n\nOperating systems are moving away from a specific thread priority and towards\nmore granular control over which types of cores can be used and things like\npower throttling options. In particular, it is no longer possible to map a 0-10\ninteger to a meaningful performance range on macOS ARM using the pthread\ninterface. Using a more modern interface grants us access to more runtime\noptions, but also changes how we can work with threads. The two most\nsignificant changes are that we cannot mix operations using the new and old\ninterfaces, and that changing a priority using the new interface can only be\ndone on the currently running thread.\n\n\n## Change\n\nThe constructor of WebBrowserComponent now requires passing in an instance of\na new Options class instead of a single option boolean. The\nWindowsWebView2WebBrowserComponent class was removed.\n\n**Possible Issues**\n\nCode using the WebBrowserComponent's boolean parameter to indicate if a\nwebpage should be unloaded when the component is hidden, will now fail to\ncompile. Additionally, any code using the WindowsWebView2WebBrowserComponent\nclass will fail to compile. Code relying on the default value of the\nWebBrowserComponent's constructor are not affected.\n\n**Workaround**\n\nInstead of passing in a single boolean to the WebBrowserComponent's\nconstructor you should now set this option via tha\nWebBrowserComponent::Options::withKeepPageLoadedWhenBrowserIsHidden method.\n\nIf you were previously using WindowsWebView2WebBrowserComponent to indicate to\nJUCE that you prefer JUCE to use Windows' Webview2 browser backend, you now do\nthis by setting the WebBrowserComponent::Options::withBackend method. The\nWebView2Preferences can now be modified with the methods in\nWebBrowserComponent::Options::WinWebView2.\n\n**Rationale**\n\nThe old API made adding further options to the WebBrowserComponent cumbersome\nespecially as the WindowsWebView2WebBrowserComponent already had a parameter\nvery similar to the above Options class, whereas the base class did not use\nsuch a parameter. Furthermore, using an option to specify the preferred\nbrowser backend is more intuitive then requiring the user to derive from a\nspecial class, especially if additional browser backends are added in the\nfuture.\n\n\n## Change\n\nThe function AudioIODeviceCallback::audioDeviceIOCallback() was removed.\n\n**Possible Issues**\n\nCode overriding audioDeviceIOCallback() will fail to compile.\n\n**Workaround**\n\nAffected classes should override the audioDeviceIOCallbackWithContext() function\ninstead.\n\n**Rationale**\n\nThe audioDeviceIOCallbackWithContext() function fulfills the same role as\naudioDeviceIOCallback(), it just has an extra parameter. Hence the\naudioDeviceIOCallback() function was superfluous.\n\n\n## Change\n\nThe type representing multi-channel audio data has been changed from T** to\nT* const*. Affected classes are AudioIODeviceCallback, AudioBuffer and\nAudioFormatReader.\n\n**Possible Issues**\n\nCode overriding the affected AudioIODeviceCallback and AudioFormatReader\nfunctions will fail to compile. Code that interacts with the return value of\nAudioBuffer::getArrayOfReadPointers() and AudioBuffer::getArrayOfWritePointers()\nmay fail to compile.\n\n**Workaround**\n\nFunctions overriding the affected AudioIODeviceCallback and AudioFormatReader\nmembers will need to be changed to confirm to the new signature. Type\ndeclarations related to getArrayOfReadPointers() and getArrayOfWritePointers()\nof AudioBuffer may have to be adjusted.\n\n**Rationale**\n\nWhile the previous signature permitted it, changing the channel pointers by the\npreviously used types was already being considered illegal. The earlier type\nhowever prevented passing T** values to parameters with type const T**. In some\nplaces this necessitated the usage of const_cast. The new signature can bind to\nT** values and the awkward casting can be avoided.\n\n\n## Change\n\nThe minimum supported C++ standard is now C++17 and the oldest supported\ncompilers on Linux are now GCC 7.0 and Clang 6.0.\n\n**Possible Issues**\n\nOlder compilers will no longer be able to compile JUCE.\n\n**Workaround**\n\nNo workaround is available.\n\n**Rationale**\n\nThis compiler upgrade will allow the use of C++17 within the framework.\n\n\n## Change\n\nResource forks are no longer generated for Audio Unit plug-ins.\n\n**Possible Issues**\n\nNew builds of JUCE Audio Units may no longer load in old hosts that use the\nComponent Manager to discover plug-ins.\n\n**Workaround**\n\nNo workaround is available.\n\n**Rationale**\n\nThe Component Manager is deprecated in macOS 10.8 and later, so the majority of\nhosts have now implemented support for the new plist-based discovery mechanism.\nThe new AudioUnitSDK (https://github.com/apple/AudioUnitSDK) provided by Apple\nto replace the old Core Audio Utility Classes no longer includes the files\nrequired to generate resource forks.\n\n\n## Change\n\nPreviously, the AudioProcessorGraph would call processBlockBypassed on any\nprocessor for which setBypassed had previously been called. Now, the\nAudioProcessorGraph will now only call processBlockBypassed if those processors\ndo not have dedicated bypass parameters.\n\n**Possible Issues**\n\nProcessors with non-functional bypass parameters may not bypass in the same way\nas before.\n\n**Workaround**\n\nFor each AudioProcessor owned by a Graph, ensure that either: the processor has\na working bypass parameter that correctly affects the output of processBlock();\nor, the processor has no bypass parameter, in which case processBlockBypassed()\nwill be called as before.\n\n**Rationale**\n\nThe documentation for AudioProcessor::getBypassParameter() states that if this\nfunction returns non-null, then processBlockBypassed() should never be called,\nbut the AudioProcessorGraph was breaking this rule. Calling\nprocessBlockBypassed() on AudioProcessors with bypass parameters is likely to\nresult in incorrect or unexpected output if this function is not overridden.\nThe new behaviour obeys the contract set out in the AudioProcessor\ndocumentation.\n\n\n# Version 7.0.2\n\n## Change\n\nThe Matrix3D (Vector3D<Type> vector) constructor has been replaced with an\nexplicit static Matrix3D fromTranslation (Vector3D<Type> vector) function, and a\nbug in the behaviour of the multipication operator that reversed the order of\noperations has been addressed.\n\n**Possible Issues**\n\nCode using the old constructor will not compile. Code that relied upon the order\nof multiplication operations will return different results.\n\n**Workaround**\n\nCode that was using the old constructor must use the new static function. Code\nthat relied on the order of multiplication operations will need to have the\norder of the arguments reversed. With the old code A * B was returning BA rather\nthan AB.\n\n**Rationale**\n\nPreviously a matrix multipled by a vector would return a matrix, rather than a\nvector, as the multiplied-by vector would be automatically converted into a\nmatrix during the operation. Removing the converting constructor makes\neverything much more explicit and there is no confusion about dimensionality.\nThe current multiplication routine also included a bug where A * B resulted in\nBA rather than AB, which needed to be addressed.\n\n\n# Version 7.0.0\n\n## Change\n\nAudioProcessor::getHostTimeNs() and AudioProcessor::setHostTimeNanos() have\nbeen removed.\n\n**Possible Issues**\n\nCode that used these functions will no longer compile.\n\n**Workaround**\n\nSet and get the system time corresponding to the current audio callback using\nthe new functions AudioPlayHead::PositionInfo::getHostTimeNs() and\nAudioPlayHead::PositionInfo::setHostTimeNs().\n\n**Rationale**\n\nThis change consolidates callback-related timing information into the\nPositionInfo type, improving the consistency of the AudioProcessor and\nAudioPlayHead APIs.\n\n\n## Change\n\nAudioPlayHead::getCurrentPosition() has been deprecated and replaced with\nAudioPlayHead::getPosition().\n\n**Possible Issues**\n\nHosts that implemented custom playhead types may no longer compile. Plugins\nthat used host-provided timing information may trigger deprecation warnings\nwhen building.\n\n**Workaround**\n\nClasses that derive from AudioPlayHead must now override getPosition() instead\nof getCurrentPosition(). Code that used to use the playhead's\nCurrentPositionInfo must switch to using the new PositionInfo type.\n\n**Rationale**\n\nNot all hosts and plugin formats are capable of providing the full complement\nof timing information contained in the old CurrentPositionInfo class.\nPreviously, in the case that some information could not be provided, fallback\nvalues would be used instead, but it was not possible for clients to distinguish\nbetween \"real\" values set explicitly by the host, and \"fallback\" values set by\na plugin wrapper. The new PositionInfo type keeps track of which members have\nbeen explicitly set, so clients can implement their own fallback behaviour.\nThe new PositionInfo type also includes a new \"barCount\" member, which is\ncurrently only used by the LV2 host and client.\n\n\n## Change\n\nThe optional JUCE_COREGRAPHICS_RENDER_WITH_MULTIPLE_PAINT_CALLS preprocessor\nflag will now use a new Metal layer renderer when running on macOS 10.14 or\nlater. The minimum requirements for building macOS and iOS software are now\nmacOS 10.13.6 and Xcode 10.1.\n\n**Possible Issues**\n\nPreviously enabling JUCE_COREGRAPHICS_RENDER_WITH_MULTIPLE_PAINT_CALLS had no\nnegative effect on performance. Now it may slow rendering down.\n\n**Workaround**\n\nDisable JUCE_COREGRAPHICS_RENDER_WITH_MULTIPLE_PAINT_CALLS.\n\n**Rationale**\n\nJUCE_COREGRAPHICS_RENDER_WITH_MULTIPLE_PAINT_CALLS has been ineffective when\nrunning on macOS 10.13 or later. Enabling this flag, and hence using the new\nMetal layer renderer when running on macOS 10.14, restores the previous\nbehaviour and fixes problems where Core Graphics will render much larger\nregions than necessary. However, the new renderer will may be slower than the\nrecently introduced default of asynchronous Core Graphics rendering, depending\non the regions that Core Graphcis is redrawing. Whether\nJUCE_COREGRAPHICS_RENDER_WITH_MULTIPLE_PAINT_CALLS improves or degrades\nperformance is specific to an application.\n\n\n## Change\n\nThe optional JUCE_COREGRAPHICS_DRAW_ASYNC preprocessor flag has been removed\nand asynchronous Core Graphics rendering is now the default. The helper\nfunction setComponentAsyncLayerBackedViewDisabled has also been removed.\n\n**Possible Issues**\n\nComponents that were previously using setComponentAsyncLayerBackedViewDisabled\nto conditionally opt out of asynchronous Core Graphics rendering will no longer\nbe able to do so.\n\n**Workaround**\n\nTo opt out of asynchronous Core Graphics rendering the\nwindowRequiresSynchronousCoreGraphicsRendering ComponentPeer style flag can be\nused when adding a component to the desktop.\n\n**Rationale**\n\nAsynchronous Core Graphics rendering provides a substantial performance\nbenefit. Asynchronous rendering is a property of a Peer, rather than a\nComponent, so a Peer style flag to conditionally opt out of asynchronous\nrendering is more appropriate.\n\n\n## Change\n\nConstructors of AudioParameterBool, AudioParameterChoice, AudioParameterFloat,\nAudioParameterInt, and AudioProcessorParameterWithID have been deprecated and\nreplaced with new constructors taking an 'Attributes' argument.\n\n**Possible Issues**\n\nThe compiler may issue a deprecation warning upon encountering usages of the\nold constructors.\n\n**Workaround**\n\nUpdate code to pass an 'Attributes' instance instead. Example usages of the new\nconstructors are given in the constructor documentation, and in the plugin\nexample projects.\n\n**Rationale**\n\nParameter types have many different properties. Setting a non-default property\nusing the old constructors required explicitly setting other normally-defaulted\nproperties, which was redundant. The new Attributes types allow non-default\nproperties to be set in isolation.\n\n\n# Version 6.1.6\n\n## Change\n\nUnhandled mouse wheel and magnify events will now be passed to the closest\nenclosing enabled ancestor component.\n\n**Possible Issues**\n\nComponents that previously blocked mouse wheel events when in a disabled state\nmay no longer block the events as expected.\n\n**Workaround**\n\nIf a component should explicitly prevent events from propagating when disabled,\nit should override mouseWheelMove() and mouseMagnify() to do nothing when the\ncomponent is disabled.\n\n**Rationale**\n\nPreviously, unhandled wheel events would be passed to the parent component,\nbut only if the parent was enabled. This meant that scrolling on a component\nnested inside a disabled component would have no effect by default. This\nbehaviour was not intuitive.\n\n\n## Change\n\nThe invalidPressure, invalidOrientation, invalidRotation, invalidTiltX and\ninvalidTiltY members of MouseInputSource have been deprecated.\n\n**Possible Issues**\n\nDeprecation warnings will be seen when compiling code which uses these members\nand eventually builds will fail when they are later removed from the API.\n\n**Workaround**\n\nUse the equivalent defaultPressure, defaultOrientation, defaultRotation,\ndefaultTiltX and defaultTiltY members of MouseInputSource.\n\n**Rationale**\n\nThe deprecated members represent valid values and the isPressureValid() etc.\nfunctions return true when using them. This could be a source of confusion and\nmay be inviting programming errors. The new names are in line with the ongoing\npractice of using these values to provide a neutral default in the absence of\nactual OS provided values.\n\n\n## Change\n\nPlugin wrappers will no longer call processBlockBypassed() if the wrapped\nAudioProcessor returns a parameter from getBypassParameter().\n\n**Possible Issues**\n\nPlugins that used to depend on processBlockBypassed() being called may no\nlonger correctly enter a bypassed state.\n\n**Workaround**\n\nAudioProcessors that implement getBypassParameter() must check the current\nvalue of the bypass parameter on each call to processBlock(), and bypass\nprocessing as appropriate. When switching between bypassed and non-bypassed\nstates, the plugin must use some sort of ramping or smoothing to avoid\ndiscontinuities in the output. If the plugin introduces latency when not\nbypassed, the plugin must delay its output when in bypassed mode so that the\noverall latency does not change when enabling/disabling bypass.\n\n**Rationale**\n\nThe documentation for AudioProcessor::getBypassParameter() says\n> if this method returns a non-null value, you should never call\n  processBlockBypassed but use the returned parameter to control the bypass\n  state instead.\nSome plugin wrappers were not following this rule. After this change, the\nbehaviour of all plugin wrappers is consistent with the documented behaviour.\n\n\n## Change\n\nThe ComponentPeer::getFrameSize() function has been deprecated on Linux.\n\n**Possible Issues**\n\nDeprecation warnings will be seen when compiling code which uses this function\nand eventually builds will fail when it is later removed from the API.\n\n**Workaround**\n\nUse the ComponentPeer::getFrameSizeIfPresent() function. The new function returns\nan OptionalBorderSize object. Use operator bool() to determine if the border size\nis valid, then access the value using operator*() only if it is.\n\n**Rationale**\n\nThe XWindow system cannot return a valid border size immediately after window\ncreation. ComponentPeer::getFrameSize() returns a default constructed\nBorderSize<int> instance in such cases that corresponds to a frame size of\nzero. That however can be a valid value, and needs to be treated differently\nfrom the situation when the frame size is not yet available.\n\n\n## Change\n\nThe return type of XWindowSystem::getBorderSize() was changed to\nComponentPeer::OptionalBorderSize.\n\n**Possible Issues**\n\nUser code that uses XWindowSystem::getBorderSize() will fail to build.\n\n**Workaround**\n\nUse operator bool() to determine the validity of the new return value and\naccess the contained value using operator*().\n\n**Rationale**\n\nThe XWindow system cannot immediately report the correct border size after\nwindow creation. The underlying X11 calls will signal whether querying the\nborder size was successful, but there was no way to forward this information\nthrough XWindowSystem::getBorderSize() until this change.\n\n\n# Version 6.1.5\n\n## Change\n\nXWindowSystemUtilities::XSettings now has a private constructor.\n\n**Possible Issues**\n\nUser code that uses XSettings::XSettings() will fail to build.\n\n**Workaround**\n\nUse the XSettings::createXSettings() factory function.\n\n**Rationale**\n\nThe XSETTINGS facility is not available on all Linux distributions and the old\nconstructor would fail on such systems, potentially crashing the application.\nThe factory function will return nullptr in such situations instead.\n\n\n# Version 6.1.3\n\n## Change\n\nThe format specific structs of ExtensionsVisitor now return pointers to forward\ndeclared types instead of `void*`. For this purpose the `struct AEffect;`\nforward declaration was placed inside the global namespace.\n\n**Possible Issues**\n\nUser code that includes the VST headers inside a namespace may fail to build,\nbecause the forward declared type can collide with the contents of `aeffect.h`.\n\n**Workaround**\n\nThe collision can be avoided by placing a `struct AEffect;` forward declaration\nin the same namespace where the VST headers are included. The forward\ndeclaration must come before the inclusion.\n\n**Rationale**\n\nUsing the forward declared types eliminates the need for error prone casting\nat the site where the ExtensionsVisitor facility is used.\n\n\n## Change\n\nListBox::createSnapshotOfRows now returns ScaledImage instead of Image.\n\n**Possible Issues**\n\nUser code that overrides this function will fail to build.\n\n**Workaround**\n\nTo emulate the old behaviour, simply wrap the Image that was previous returned\ninto a ScaledImage and return that instead.\n\n**Rationale**\n\nReturning a ScaledImage allows the overriding function to specify the scale\nat which the image should be drawn. Returning an oversampled image will provide\nsmoother-looking results on high resolution displays.\n\n\n## Change\n\nAudioFrameRate::frameRate is now a class type instead of an enum.\n\n**Possible Issues**\n\nCode that read the old enum value will not compile.\n\n**Workaround**\n\nCall frameRate.getType() to fetch the old enum type. Alternatively, use the new\ngetBaseRate(), isDrop(), isPullDown(), and getEffectiveRate() functions. The\nnew functions provide a more accurate description of the host's frame rate.\n\n**Rationale**\n\nThe old enum-based interface was not flexible enough to describe all the frame\nrates that might be reported by a plugin host.\n\n\n## Change\n\nFlexItem::alignSelf now defaults to \"autoAlign\" rather than \"stretch\".\n\n**Possible Issues**\n\nFlexBox layouts will be different in cases where FlexBox::alignItems is set to\na value other than \"stretch\". This is because each FlexItem will now default\nto using the FlexBox's alignItems value. Layouts that explicitly set\nFlexItem::alignSelf on each item will not be affected.\n\n**Workaround**\n\nTo restore the previous layout behaviour, set FlexItem::alignSelf to \"stretch\"\non all FlexItems that would otherwise use the default value for alignSelf.\n\n**Rationale**\n\nThe new behaviour more closely matches the behaviour of CSS FlexBox\nimplementations. In CSS, \"align-self\" has an initial value of \"auto\", which\ncomputes to the parent's \"align-items\" value.\n\n\n## Change\n\nFunctions on AudioPluginInstance that can add parameters have been made\nprivate.\n\n**Possible Issues**\n\nCode implementing custom plugin formats may stop building if it calls these\nfunctions.\n\n**Workaround**\n\nWhen implementing custom plugin formats, ensure that the plugin parameters\nderive from AudioPluginInstance::HostedParameter and then use\naddHostedParameter, addHostedParameterGroup or setHostedParameterTree to add\nthe parameters to the plugin instance.\n\n**Rationale**\n\nIn a plugin host, it is very important to be able to uniquely identify\nparameters across different versions of the same plugin. To make this possible,\nwe needed to introduce a way of retrieving a unique ID for each parameter,\nwhich is now possible using the HostedParameter class. However, we also needed\nto enforce that all AudioPluginInstances can only have parameters which are of\nthe type HostedParameter, which required hiding the old functions.\n\n\n# Version 6.1.0\n\n## Change\n\njuce::gl::loadFunctions() no longer loads extension functions.\n\n**Possible Issues**\n\nCode that depended on extension functions being loaded automatically may cease\nto function correctly.\n\n**Workaround**\n\nExtension functions can now be loaded using juce::gl::loadExtensions().\n\n**Rationale**\n\nThere are a great number of extension functions, and on some systems these can\nbe slow to load (i.e. a second or so). Projects that do not require these\nextension functions should not have to pay for this unnecessary overhead. Now,\nonly core functions will be loaded by default, and extensions can be loaded\nexplicitly in projects that require such functionality.\n\n\n## Change\n\nThread::setPriority() will no longer set a realtime scheduling policy for all\nthreads with non-zero priorities on POSIX systems.\n\n**Possible Issues**\n\nThreads that implicitly relied on using a realtime policy will no longer\nrequest a realtime policy if their priority is 7 or lower.\n\n**Workaround**\n\nFor threads that require a realtime policy on POSIX systems, request a priority\nof 8 or higher by calling Thread::setPriority() or\nThread::setCurrentThreadPriority().\n\n**Rationale**\n\nBy default, new Thread instances have a priority of 5. Previously, non-zero\npriorities corresponded to realtime scheduling policies, meaning that new\nThreads would use the realtime scheduling policy unless they explicitly\nrequested a priority of 0. However, most threads do not and should not require\nrealtime scheduling. Setting a realtime policy on all newly-created threads may\ndegrade performance, as multiple realtime threads will end up fighting for\nlimited resources.\n\n\n## Change\n\nThe JUCE_GLSL_VERSION preprocessor definition has been removed.\n\n**Possible Issues**\n\nCode which used this definition will no longer compile.\n\n**Workaround**\n\nUse OpenGLHelpers::getGLSLVersionString to retrieve a version string which is\nconsistent with the capabilities of the current OpenGL context.\n\n**Rationale**\n\nA compile-time version string is not very useful, as OpenGL versions and\ncapabilities can change at runtime. Replacing this macro with a function allows\nquerying the capabilities of the current context at runtime.\n\n\n## Change\n\nThe minimum supported CMake version is now 3.15.\n\n**Possible Issues**\n\nIt will no longer be possible to configure JUCE projects with CMake versions\nbetween 3.12 and 3.14 inclusive.\n\n**Workaround**\n\nNo workaround is available.\n\n**Rationale**\n\nMoving to 3.15 allows us to use target_link_directories and\ntarget_link_options, which were introduced in 3.13, which in turn allows us to\nprovide support for bundled precompiled libraries in modules. Plugins already\nrequired CMake 3.15, so this change just brings other target types in line with\nthe requirements for plugins.\n\n\n## Change\n\nThe default value of JUCE_MODAL_LOOPS_PERMITTED has been changed from 1 to 0.\n\n**Possible Issues**\n\nWith JUCE_MODAL_LOOPS_PERMITTED set to 0 code that previously relied upon modal\nloops will need to be rewritten to use asynchronous versions of the modal\nfunctions. There is no non-modal alternative to\nAlterWindow::showNativeDialogBox and the previously modal behaviour of the\nMultiDocumentPanel destructor has changed.\n\n**Workaround**\n\nSet JUCE_MODAL_LOOPS_PERMITTED back to 1.\n\n**Rationale**\n\nModal operations are a frequent source of problems, particularly when used in\nplug-ins. On Android modal loops are not possible, so people wanting to target\nAndroid often have an unwelcome surprise when then have to rewrite what they\nassumed to be platform independent code. Changing the default addresses these\nproblems.\n\n\n## Change\n\nThe minimum supported C++ standard is now C++14 and the oldest supported\ncompilers on macOS and Linux are now Xcode 9.2, GCC 5.0 and Clang 3.4.\n\n**Possible Issues**\n\nOlder compilers will no longer be able to compile JUCE. People using Xcode 8.5\non OS X 10.11 will need to update the operating system to OS X 10.12 to be able\nto use Xcode 9.2.\n\n**Workaround**\n\nNo workaround is available.\n\n**Rationale**\n\nThis compiler upgrade will allow the use of C++14 within the framework.\n\n\n## Change\n\nPlatform GL headers are no longer included in juce_opengl.h\n\n**Possible Issues**\n\nProjects depending on symbols declared in these headers may fail to build.\n\n**Workaround**\n\nThe old platform-supplied headers have been replaced with a new juce_gl.h\nheader which is generated using the XML registry files supplied by Khronos.\nThis custom header declares GL symbols in the juce::gl namespace. If your code\nonly needs to be JUCE-compatible, you can explicitly qualify each name with\n`juce::gl::`. If you need your code to build with different extension-loader\nlibraries (GLEW, GL3W etc.) you can make all GL symbols visible without\nadditional qualification with `using namespace juce::gl`.\n\n**Rationale**\n\nUsing our own GL headers allows us to generate platform-independent headers\nwhich include symbols for all specified OpenGL versions and extensions. Note\nthat although the function signatures exist, they may not resolve to a function\nat runtime. If your code uses commands from an extension or recent GL version,\nyou should check each function pointer against `nullptr` before attempting to\nuse it. To avoid repeatedly checking, you could query a subset of functions\nafter calling gl::loadFunctions() and cache the results. Supplying custom GL\nheaders also allows us to use C++ techniques (namespaces, references), making\nthe headers safer than the platform-defined headers. Platform headers are\ngenerally written in C, and export a significant portion of their symbols as\npreprocessor definitions.\n\n\n## Change\n\nThe functions `getComponentAsyncLayerBackedViewDisabled`\nand `setComponentAsyncLayerBackedViewDisabled` were moved into the juce\nnamespace.\n\n**Possible Issues**\n\nCode that declares these functions may fail to link.\n\n**Workaround**\n\nMove declarations of these functions into the juce namespace.\n\n**Rationale**\n\nAlthough the names of these functions are unlikely to collide with functions\nfrom other libraries, we can make such collisions much more unlikely by keeping\nJUCE code in the juce namespace.\n\n\n## Change\n\nThe `juce_blocks_basics` module was removed.\n\n**Possible Issues**\n\nProjects depending on `juce_blocks_basics` will not build.\n\n**Workaround**\n\nThe BLOCKS API is now located in a separate repository:\nhttps://github.com/WeAreROLI/roli_blocks_basics\nProjects which used to depend on `juce_blocks_basics` can use\n`roli_blocks_basics` instead.\n\n**Rationale**\n\nROLI is no longer involved with the development of JUCE. Therefore, development\non the BLOCKS API has been moved out of the JUCE repository, and to a new\nrepository managed by ROLI.\n\n\n## Change\n\nThe live build functionality of the Projucer has been removed.\n\n**Possible Issues**\n\nYou will no longer be able to use live build in the Projucer.\n\n**Workaround**\n\nNone.\n\n**Rationale**\n\nKeeping the live build compatible with the latest compilers on all our\nsupported platforms is a very substantial maintenance burden, but very few\npeople are using this feature of the Projucer. Removing the live build will\nsimplify the code and our release process.\n\n\n## Change\n\n`Component::createFocusTraverser()` has been renamed to\n`Component::createKeyboardFocusTraverser()` and now returns a `std::unique_ptr`\ninstead of a raw pointer. `Component::createFocusTraverser()` is a new method\nfor controlling basic focus traversal and not keyboard focus traversal.\n\n**Possible Issues**\n\nDerived Components that override the old method will no longer compile.\n\n**Workaround**\n\nOverride the new method. Be careful to override\n`createKeyboardFocusTraverser()` and not `createFocusTraverser()` to ensure\nthat the behaviour is the same.\n\n**Rationale**\n\nThe ownership of this method is now clearer as the previous code relied on the\ncaller deleting the object. The name has changed to accommodate the new\n`Component::createFocusTraverser()` method that returns an object for\ndetermining basic focus traversal, of which keyboard focus is generally a\nsubset.\n\n\n## Change\n\nPluginDescription::uid has been deprecated and replaced with a new 'uniqueId'\ndata member.\n\n**Possible Issues**\n\nCode using the old data member will need to be updated in order to compile.\n\n**Workaround**\n\nCode that used to use 'uid' to identify plugins should switch to using\n'uniqueId', with some caveats - see \"Rationale\" for details.\n\n**Rationale**\n\nThe 'uniqueId' member has the benefit of being consistent for\na given VST3 across Windows, macOS, and Linux. However, the value of the\nuniqueId may differ from the value of the old uid on some platforms. The value\nof the old 'uid' member can now be found in the 'deprecatedUid' member, which\nshould allow clients to implement logic such as checking a saved uid against\nthe new uniqueId, and falling back to the deprecatedUid. This should allow\nhosts to gracefully upgrade from the old uid values to the new values.\n\n\n# Version 6.0.8\n\n## Change\n\nCalling AudioProcessorEditor::setResizeLimits() will no longer implicitly add a\nResizableCornerComponent to the editor if it has not already been set as\nresizable.\n\n**Possible Issues**\n\nCode which previously relied on calling this method to set up the corner\nresizer will no longer work.\n\n**Workaround**\n\nExplicitly call AudioProcessorEditor::setResizable() with the second argument\nset to true to enable the corner resizer.\n\n**Rationale**\n\nThe previous behaviour was undocumented and potentially confusing. There is now\na single method to control the behaviour of the editor's corner resizer to\navoid any ambiguity.\n\n\n## Change\n\nThe implementations of `getValue` and `setValue` in `AUInstanceParameter` now\nproperly take the ranges of discrete parameters into account.\n\n**Possible Issues**\n\nThis issue affects JUCE Audio Unit hosts. Automation data previously saved for\na discrete parameter with a non-zero minimum value may not set the parameter to\nthe same values as previous JUCE versions. Note that previously, `getValue` on\na hosted discrete parameter may have returned out-of-range values, and\n`setValue` may have only mapped to a portion of the parameter range. As a\nresult, automation recorded for affected parameters was likely already behaving\nunexpectedly.\n\n**Workaround**\n\nThere is no workaround.\n\n**Rationale**\n\nThe old behaviour was incorrect, and was causing issues in plugin validators\nand other hosts. Hosts expect `getValue` to return a normalised parameter\nvalue. If this function returns an out-of-range value (including Inf and NaN)\nthis is likely to break assumptions made by the host, leading to crashes,\ncorrupted project data, or other defects.\n\n\n## Change\n\nAudioProcessorListener::audioProcessorChanged gained a new parameter describing\nthe nature of any change.\n\n**Possible Issues**\n\nCode using the old function signature will not build until updated to use\nthe new signature.\n\n**Workaround**\n\nListeners should add the new parameter to any overrides of\naudioProcessorChanged.\n\n**Rationale**\n\nThe new function signature means that wrappers can be smarter about the\nrequests that they make to hosts whenever some aspect of the processor changes.\nIn particular, plugin wrappers can now distinguish between changes to latency,\nparameter attributes, and the current program. This means that hosts will no\nlonger assume parameters have changed when `setLatencySamples` is called.\n\n\n## Change\n\nCharacterFunctions::readDoubleValue now returns values consistent with other\nC++ number parsing libraries. Parsing values smaller than the minimum number\nrepresentable in a double will return (+/-)0.0 and parsing values larger than\nthe maximum number representable in a double will return (+/-)inf.\n\n**Possible Issues**\n\nCode reading very large or very small numbers may receive values of 0.0 and inf\nrather than nan.\n\n**Workaround**\n\nWhere you may be using std::isnan to check the validity of the result you can\ninstead use std::isfinite.\n\n**Rationale**\n\nThe new behaviour is consistent with other string parsing libraries.\n\n\n# Version 6.0.6\n\n## Change\n\nThe name of `OperatingSystemType::MacOSX_11_0` was changed to\n`OperatingSystemType::MacOS_11`.\n\n**Possible Issues**\n\nCode using the old name will not build until it is updated to use the new name.\n\n**Workaround**\n\nUpdate code using the old name to use the new name instead.\n\n**Rationale**\n\nNewer versions of macOS have dropped the \"X\" naming. Minor version updates are\nalso less significant now than they were for the X-series.\n\n\n## Change\n\nXcode projects generated using the Projucer will now use the \"New Build System\"\ninstead of the \"Legacy Build System\" by default.\n\n**Possible Issues**\n\nXcode 10.0 - 10.2 has some known issues when using the new build system such as\nJUCE modules not rebuilding correctly when modified, issue and file navigation\nnot working, and breakpoints not being reliably set or hit.\n\n**Workaround**\n\nIf you are using an affected version of Xcode then you can enable the \"Use\nLegacy Build System\" setting in the Projucer Xcode exporter to go back to the\nprevious behaviour.\n\n**Rationale**\n\nThe legacy build system has issues building arm64 binaries for Apple silicon\nand will eventually be removed altogether.\n\n\n# Version 6.0.5\n\n## Change\n\nNew pure virtual methods accepting `PopupMenu::Options` arguments have been\nadded to `PopupMenu::LookAndFeelMethods`.\n\n**Possible Issues**\n\nClasses derived from `PopupMenu::LookAndFeelMethods`, such as custom\nLookAndFeel classes, will not compile unless these pure virtual methods are\nimplemented.\n\n**Workaround**\n\nThe old LookAndFeel methods still exist, so if the new Options parameter is not\nuseful in your application, your implementation of\n`PopupMenu::LookAndFeelMethods` can simply forward to the old methods. For\nexample, your implementation of `drawPopupMenuBackgroundWithOptions` can\ninternally call your existing `drawPopupMenuBackground` implementation.\n\n**Rationale**\n\nAllowing the LookAndFeelMethods to access the popup menu's options allows for\nmore flexible styling. For example, a theme may wish to query the menu's target\ncomponent or parent for colours to use.\n\n\n## Change\n\nA typo in the JUCEUtils CMake script that caused the wrong manufacturer code to\nbe set in the compile definitions for a plugin was fixed.\n\n**Possible Issues**\n\nThe manufacturer code for plugins built under CMake with this version of JUCE\nwill differ from the manufacturer code that was generated previously.\n\n**Workaround**\n\nIf you have released plugins that used the old, incorrect manufacturer code and\nwish to continue using this code for backwards compatibility, add the following\nto your `juce_add_plugin` call:\n\n    USE_LEGACY_COMPATIBILITY_PLUGIN_CODE TRUE\n\nIn most cases, this should not be necessary, and we recommend using the fixed\nbehaviour.\n\n**Rationale**\n\nThis change ensures that the manufacturer codes used by CMake projects match\nthe codes that would be generated by the Projucer, improving compatibility\nwhen transitioning from the Projucer to CMake.\n\n\n# Version 6.0.2\n\n## Change\n\nThe JUCE_WASAPI_EXCLUSIVE flag has been removed from juce_audio_devices and all\navailable WASAPI audio device modes (shared, shared low latency and exclusive)\nare available by default when JUCE_WASAPI is enabled. The\nAudioIODeviceType::createAudioIODeviceType_WASAPI() method which takes a single\nboolean argument has also been deprecated in favour of a new method which takes\na WASAPIDeviceMode enum.\n\n**Possible Issues**\n\nCode that relied on the JUCE_WASAPI_EXCLUSIVE flag to disable WASAPI exclusive\nmode will no longer work.\n\n**Workaround**\n\nOverride the AudioDeviceManager::createAudioDeviceTypes() method to omit the\nWASAPI exclusive mode device if you do not want it to be available.\n\n**Rationale**\n\nJUCE now supports shared low latency WASAPI audio devices via the AudioClient3\ninterface and instead of adding an additional compile time config flag to\nenable this functionality, which adds complexity to the build process when not\nusing the Projucer, JUCE makes all WASAPI device modes available by default.\n\n\n## Change\n\nThe fields representing Mac OS X 10.4 to 10.6 inclusive have been removed from\nthe `OperatingSystemType` enum.\n\n**Possible Issues**\n\nCode that uses these fields will fail to build.\n\n**Workaround**\n\nRemove references to these fields from user code.\n\n**Rationale**\n\nJUCE is not supported on Mac OS X versions lower than 10.7, so it is a given\nthat `getOperatingSystemType` will always return an OS version greater than or\nequal to 10.7. Code that changes behaviours depending on the OS version can\nassume that this version is at least 10.7.\n\n\n## Change\n\nThe JUCE_DISABLE_COREGRAPHICS_FONT_SMOOTHING flag in juce_graphics is no\nlonger used on iOS.\n\n**Possible Issues**\n\nProjects with this flag enabled may render differently on iOS.\n\n**Workaround**\n\nThere is no workaround.\n\n**Rationale**\n\nWhen using a cached image to render Components with `setBufferedToImage (true)`\nthe result now matches the default behaviour on iOS where fonts are not\nsmoothed.\n\n\n## Change\n\nSpace, return and escape key events on the native macOS menu bar are no longer\npassed to the currently focused JUCE Component.\n\n**Possible Issues**\n\nCode relying on receiving these keyboard events will no longer work.\n\n**Workaround**\n\nThere is no workaround.\n\n**Rationale**\n\nIt should be possible for users with a keyboard or assistive device to navigate\nthe menu, invoking the currently highlighted menu item with the space or return\nkey and dismissing the menu with the escape key. These key events should not be\npassed to the application and doing so interferes with the accessibility of\nJUCE apps. Only passing these events to the native macOS menu means that JUCE\napps behave as expected for users.\n\n\n# Version 6.0.0\n\n## Change\n\nThe Convolution class interface was changed:\n- `loadImpulseResponse` member functions now take `enum class` parameters\n  instead of `bool`.\n- `copyAndLoadImpulseResponseFromBlock` and\n  `copyAndLoadImpulseResponseFromBuffer` were replaced by a new\n  `loadImpulseResponse` overload.\n\n**Possible Issues**\n\nCode using the old interface will no longer compile, and will need to be\nupdated.\n\n**Workaround**\n\nCode that was previously loading impulse responses from binary data or from\nfiles can substitute old `bool` parameters with the newer `enum class`\nequivalents. Code that was previously passing buffers or blocks will need\nreworking so that the Convolution instance can take ownership of the buffer\ncontaining the impulse response.\n\n**Rationale**\n\nThe newer `enum class` parameters make user code much more readable, e.g.\n`loadImpulseResponse (file, Stereo::yes, Trim::yes, 0, Normalise::yes)` rather\nthan `loadImpulseResponse (file, true, true, 0, true);`. By taking ownership of\nthe passed buffer, the Convolution can avoid preallocating a large internal\nbuffer, reducing memory usage when short impulse responses are used. Changing\nthe ownership semantics of the buffer also makes it easier for users to avoid\ncopies/allocations on the audio thread, and gives more flexibility to the\nimplementation to run initialisation tasks on a background thread.\n\n\n## Change\n\nAll references to ROLI Ltd. (ROLI) have been changed to Raw Material Software\nLimited.\n\n**Possible Issues**\n\nExisting projects, particularly Android, may need to be resaved by the Projucer\nand have the old build artefacts deleted before they will build.\n\n**Workaround**\n\nIn Android projects any explicit mention of paths with the from \"com.roli.*\"\nshould be changed to the form \"com.rmsl.*\".\n\n**Rationale**\n\nThis change reflects the change in ownership from ROLI to RMSL.\n\n\n## Change\n\nThe Windows DPI handling in the VST wrapper and hosting code has been\nrefactored to be more stable.\n\n**Possible Issues**\n\nThe new code uses a top-level AffineTransform to scale the JUCE editor window\ninstead of native methods. Therefore any AudioProcessorEditors which have their\nown AffineTransform applied will no longer work correctly.\n\n**Workaround**\n\nIf you are using an AffineTransform to scale the entire plug-in window then\nconsider putting the component you want to transform in a child of\nthe editor and transform that instead. Alternatively, if you don't need a\nseparate scale factor for each plug-in instance you can use\nDesktop::setGlobalScaleFactor().\n\n**Rationale**\n\nThe old code had some bugs when using OpenGL and when moving between monitors\nwith different scale factors. The new code should fix these and DPI-aware\nplug-ins will scale correctly.\n\n\n## Change\n\nRelative Xcode subproject paths specified in the Projucer are now relative to\nthe build directory rather than the project directory.\n\n**Possible Issues**\n\nAfter being re-saved in the Projucer existing Xcode projects will fail to find\nany subprojects specified using a relative path.\n\n**Workaround**\n\nUpdate the subproject path in the Projucer.\n\n**Rationale**\n\nMost other Xcode specific paths are specified relative to the build directory.\nThis change brings the Xcode subproject path in line with the rest of the\nconfiguration.\n\n\n# Version 5.4.6\n\n## Change\n\nAudioProcessorValueTreeState::getRawParameterValue now returns a\nstd::atomic<float>* instead of a float*.\n\n**Possible Issues**\n\nExisting code which explicitly mentions the type of the returned value, or\ninteracts with the dereferenced float in ways unsupported by the std::atomic\nwrapper, will fail to compile. Certain evaluation-reordering compiler\noptimisations may no longer be possible.\n\n**Workaround**\n\nUpdate your code to deal with a std::atomic<float>* instead of a float*.\n\n**Rationale**\n\nReturning a std::atomic<float>* allows the JUCE framework to have much stronger\nguarantees about thread safety.\n\n\n## Change\n\nRemoved a workaround from the ASIOAudioIODevice::getOutputLatencyInSamples()\nand ASIOAudioIODevice::getInputLatencyInSamples() methods which was adding an\narbitrary amount to the reported latencies to compensate for dodgy, old\ndrivers.\n\n**Possible Issues**\n\nCode which relied on these altered values may now behave differently.\n\n**Workaround**\n\nUpdate your code to deal with the new, correct values reported from the drivers\ndirectly.\n\n**Rationale**\n\nJUCE will now return the latency values as reported by the drivers without\nadding anything to them. The workaround was for old drivers and the current\ndrivers should report the correct values without the need for the workaround.\n\n\n## Change\n\nThe default behaviour of the AU and AUv3 plug-in wrappers is now to call\nget/setStateInformation instead of get/setProgramStateInformation.\n\n**Possible Issues**\n\nAudioProcessor subclasses which have overridden the default implementations of\nget/setProgramStateInformation (which simply call through to\nget/setStateInformation) may be unable to load previously saved state; state\npreviously saved via a call to getProgramStateInformation will be presented to\nsetStateInformation.\n\n**Workaround**\n\nEnable the JUCE_AU_WRAPPERS_SAVE_PROGRAM_STATES configuration option in the\njuce_audio_plugin_client module to preserve backwards compatibility if\nrequired.\n\n**Rationale**\n\nWhen using overridden get/setProgramStateInformation methods the previous\nbehaviour of the AU and AUv3 wrappers does not correctly save and restore\nstate.\n\n\n# Version 5.4.5\n\n## Change\n\nThe alignment of text rendered on macOS using CoreGraphics may have shifted\nslightly, depending on the font you have used. The default macOS font has\nshifted downwards.\n\n**Possible Issues**\n\nMeticulously aligned text components of a GUI may now be misaligned.\n\n**Workaround**\n\nUse a custom LookAndFeel to change the location where text is drawn, or use a\ndifferent font that matches the previous alignment of your original font.\n\n**Rationale**\n\nThis was an unintentional change resulting from moving away from a deprecated\nmacOS text API. The new alignment is consistent with other rendering engines\n(web browsers and text editors) and the software renderer.\n\n\n## Change\n\nThe JUCEApplicationBase::backButtonPressed() method now returns a bool to\nindicate whether the back event was handled or not.\n\n**Possible Issues**\n\nApplications which override this method will fail to compile.\n\n**Workaround**\n\nYou will need to update your code to return a bool indicating whether the back\nevent was handled or not.\n\n**Rationale**\n\nThe back button behaviour on Android was previously broken as it would not do\nanything. The new code will correctly call finish() on the Activity when the\nback button is pressed but this method now allows the user to override this to\nimplement their own custom navigation behaviour by returning true to indicate\nthat it has been handled.\n\n\n## Change\n\nThe AudioBlock class has been refactored and some of the method names have\nchanged. Additionally the `const` behaviour now mirrors that of `std::span`,\nwith the `const`-ness of the contained data decoupled from the `const`-ness of\nthe container.\n\n**Possible Issues**\n\nCode using the old method names or violating `const`-correctness will fail to\ncompile.\n\n**Workaround**\n\nYou will need to update your code to use the new method names and select an\nappropriate `const`-ness for the AudioBlock and the data it references.\n\n**Rationale**\n\nThe names of some of the methods in the AudioBlock class were ambiguous,\nparticularly when chaining methods involving references to other blocks. The\ninteraction between the `const`-ness of the AudioBlock and the `const`-ness of\nthe referenced data was also ambiguous and has now been standardised to the\nsame behaviour as other non-owning data views like `std::span`.\n\n\n# Version 5.4.4\n\n## Change\n\nThe Visual Studio 2013 exporter has been removed from the Projucer and we will\nno longer maintain backwards compatibility with Visual Studio 2013 in JUCE.\n\n**Possible Issues**\n\nIt is no longer possible to create Visual Studio 2013 projects from the\nProjucer or compile JUCE-based software using Visual Studio 2013.\n\n**Workaround**\n\nIf you are using Visual Studio 2013 to build your projects you will need to\nupdate to a more modern version of Visual Studio.\n\n**Rationale**\n\nOf all the platforms JUCE supports Visual Studio 2013 was holding us back the\nmost in terms of C++ features we would like to use more broadly across the\ncodebase. It is still possible to target older versions of Windows with more\nmodern versions of Visual Studio. Until recently the AAX SDK was distributed as\na Visual Studio 2013 project, but this is now provided as a Visual Studio 2017\nproject.\n\n\n## Change\n\nJUCE is moving towards using C++11 pointer container types instead of passing\nraw pointers as arguments and return values.\n\n**Possible Issues**\n\nYou will need to change your code to pass std::unique_ptr into and out of\nvarious functions across JUCE's API.\n\n**Workaround**\n\nNone\n\n**Rationale**\n\nIndicating ownership through the transfer of smart pointer types has been part\nof mainstream C++ for a long time and this change enforces memory safety by\ndefault in most situations.\n\n\n## Change\n\nSystemTrayIconComponent::setIconImage now takes two arguments, rather than one.\nThe new argument is a template image for use on macOS where all non-transparent\nregions will render in a monochrome colour determined dynamically by the\noperating system.\n\n**Possible Issues**\n\nYou will now need to provide two images to display a SystemTrayIconComponent\nand the SystemTrayIconComponent will have a different appearance on macOS.\n\n**Workaround**\n\nIf you are not targeting macOS then you can provide an empty image, `{}`, for\nthe second argument. If you are targeting macOS then you will likely need to\ndesign a new monochrome icon.\n\n**Rationale**\n\nThe introduction of \"Dark Mode\" in macOS 10.14 means that menu bar icons must\nsupport several different colours and highlight modes to retain the same\nappearance as the native Apple icons. Doing this correctly without delegating\nthe behaviour to the operating system is extremely cumbersome, and the APIs we\nwere previously using to interact with menu bar items have been deprecated.\n\n\n## Change\n\nThe AudioBlock class now differentiates between const and non-const data.\n\n**Possible Issues**\n\nThe return type of the getInputBlock() method of the ProcessContextReplacing\nand ProcessContextNonReplacing classes has changed from AudioBlock<X> to\nAudioBlock<const X>.\n\n**Workaround**\n\nFor ProcessContextReplacing you should use getOutputBlock() instead of\ngetInputBlock(). For ProcessContextNonReplacing attempting to modify the input\nblock is very likely an error.\n\n**Rationale**\n\nThis change makes the intent of the code much clearer and means that we can\nremove some const_cast operations.\n\n\n## Change\n\nThe formatting of floating point numbers written to XML and JSON files has\nchanged.\n\nNote that there is no change in precision - the XML and JSON files containing\nthe new format numbers will parse in exactly the same way, it is only the\nstring representation that has changed.\n\n**Possible Issues**\n\nIf you rely upon exactly reproducing XML or JSON files then the new files may\nbe different.\n\n**Workaround**\n\nUpdate any reference XML or JSON files to use the new format.\n\n**Rationale**\n\nThe new format retains full precision, provides a human friendly representation\nof values near 1, and uses scientific notation for small and large numbers.\nThis prevents needless file size bloat from numbers like 0.00000000000000001.\n\n\n# Version 5.4.3\n\n## Change\n\nThe global user module path setting in the Projucer can now only contain a\nsingle path.\n\n**Possible Issues**\n\nProjects that previously relied on using multiple global user module paths\nseparated by a semicolon will fail to find these modules after re-saving.\n\n**Workaround**\n\nReplace the multiple paths with a single global user module path.\n\n**Rationale**\n\nUsing multiple global user module paths did not work when saving a project\nwhich exported to different OSes. Only allowing a single path will prevent this\nfrom silently causing issues.\n\n\n# Version 5.4.2\n\n## Change\n\nThe return type of Block::getBlockAreaWithinLayout() has been changed from\nRectangle to a simpler BlockArea struct.\n\n**Possible Issues**\n\nClasses that derive from Block and implement this pure virtual method will no\nlonger compile due to a change in the function signature.\n\n**Workaround**\n\nUpdate the method to return a BlockArea struct and update code that calls\ngetBlockAreaWithinLayout to handle a BlockArea instead of a Rectangle.\n\n**Rationale**\n\nThe juce_blocks_basics is ISC licensed and therefore cannot depend on the\nGPL/Commercial licensed juce_graphics module that contains Rectangle.\n\n\n## Change\n\nRenaming and deletion of open file handles on Windows is now possible using the\nFILE_SHARE_DELETE flag.\n\n**Possible Issues**\n\nPrevious code that relied on open files not being able to be renamed or deleted\non Windows may fail.\n\n**Workaround**\n\nNo workaround.\n\n**Rationale**\n\nThis unifies the behaviour across OSes as POSIX systems already allow this.\n\n\n## Change\n\nMultiple changes to low-level, non-public JNI and Android APIs.\n\n**Possible Issues**\n\nIf you were using any non-public, low-level JNI macros, calling java code or\nreceiving JNI callbacks, then your code will probably no longer work. See the\nforum for further details.\n\n**Workaround**\n\nSee the forum for further details.\n\n**Rationale**\n\nSee the forum for further details.\n\n\n## Change\n\nThe minimum Android version for a JUCE app is now Android 4.1\n\n**Possible Issues**\n\nYour app may not run on very old versions of Android  (less than 0.5% of the\ndevices).\n\n**Workaround**\n\nThere is no workaround.\n\n**Rationale**\n\nLess than 0.5% of all devices in the world run versions of Android older than\nAndroid 4.1. In the interest of keeping JUCE code clean and lean, we must\ndeprecate support for very old Android versions from time to time.\n\n\n# Version 5.4.0\n\n## Change\n\nThe use of WinRT MIDI functions has been disabled by default for any version\nof Windows 10 before 1809 (October 2018 Update).\n\n**Possible Issues**\n\nIf you were previously using WinRT MIDI functions on older versions of Windows\nthen the new behaviour is to revert to the old Win32 MIDI API.\n\n**Workaround**\n\nSet the preprocessor macro JUCE_FORCE_WINRT_MIDI=1 (in addition to the\npreviously selected JUCE_USE_WINRT_MIDI=1) to allow the use of the WinRT API on\nolder versions of Windows.\n\n**Rationale**\n\nUntil now JUCE's support for the Windows 10 WinRT MIDI API was experimental,\ndue to longstanding issues within the API itself. These issues have been\naddressed in the Windows 10 1809 (October 2018 Update) release.\n\n\n## Change\n\nThe VST2 SDK embedded within JUCE has been removed.\n\n**Possible Issues**\n\n1. Building or hosting VST2 plug-ins requires header files from the VST2 SDK,\n   which is no longer part of JUCE.\n2. Building a VST2-compatible VST3 plug-in (the previous default behaviour in\n   JUCE) requires header files from the VST2 SDK, which is no longer part of\n   JUCE.\n\n**Workaround**\n\n1. The VST2 SDK can be obtained from the vstsdk3610_11_06_2018_build_37 (or\n   older) VST3 SDK or JUCE version 5.3.2. You should put the VST2 SDK in your\n   header search paths or use the \"VST (Legacy) SDK Folder\" fields in the\n   Projucer.\n2. For new plug-in projects where you will be releasing both a VST2 and VST3\n   version, and you want the VST3 plug-in to replace the VST2 plug-in in\n   hosts that support it, then you should enable the JUCE_VST3_CAN_REPLACE_VST2\n   option.\n3. When a new JUCE plug-in project is created the value of\n   JUCE_VST3_CAN_REPLACE_VST2 will be set to zero.\n\n**Rationale**\n\nDistributing VST2 plug-ins requires a VST2 license from Steinberg. Following\nSteinberg's removal of the VST2 SDK from their public SDKs we are also removing\nthe VST2 SDK from the JUCE codebase.\n\n\n## Change\n\nThe AudioProcessorValueTreeState::createAndAddParameter function has been\ndeprecated.\n\n**Possible Issues**\n\nDeprecation warnings will be seen when compiling code which uses this function\nand eventually builds will fail when it is later removed from the API.\n\n**Workaround**\n\nPrevious calls to\n\ncreateAndAddParameter (paramID, paramName, ...);\n\ncan be directly replaced with\n\nusing Parameter = AudioProcessorValueTreeState::Parameter;\ncreateAndAddParameter (std::make_unique<Parameter> (paramID, paramName, ...));\n\nbut an even better approach is to use the new AudioProcessorValueTreeState\nconstructor where you can pass both RangedAudioParameters and\nAudioProcessorParameterGroups of RangedAudioParameters to the\nAudioProcessorValueTreeState and initialise the ValueTree simultaneously.\n\n**Rationale**\n\nThe new createAndAddParameter method is much more flexible and enables any\nparameter types derived from RangedAudioParameter to be managed by the\nAudioProcessorValueTreeState.\n\n\n## Change\n\nThe Projucer's per-exporter Android SDK/NDK path options have been removed.\n\n**Possible Issues**\n\nProjects that previously used these fields may no longer build.\n\n**Workaround**\n\nUse the Projucer's global paths settings to point to these directories, either\nby opening the \"Projucer/File->Global Paths...\" menu item or using the\n\"--set-global-search-path\" command-line option.\n\n**Rationale**\n\nHaving multiple places where the paths could be set was confusing and could\ncause unexpected mismatches.\n\n\n## Change\n\nSystemStats::getDeviceDescription() will now return the device code on iOS e.g.\n\"iPhone7, 2\" for an iPhone 6 instead of just \"iPhone\".\n\n**Possible Issues**\n\nCode that previously relied on this method returning either explicitly \"iPhone\"\nor \"iPad\" may no longer work.\n\n**Workaround**\n\nModify this code to handle the new device code string e.g. by changing:\nSystemStats::getDeviceDescription() == \"iPhone\";\nto\nSystemStats::getDeviceDescription().contains (\"iPhone\");.\n\n**Rationale**\n\nThe exact device model can now be deduced from this information instead of just\nthe device family.\n\n\n## Change\n\nDragAndDropContainer::performExternalDragDropOfFiles() and\n::performExternalDragDropOfText() are now asynchronous on Windows.\n\n**Possible Issues**\n\nCode that previously relied on these operations being synchronous and blocking\nuntil completion will no longer work as the methods will return immediately and\nrun asynchronously.\n\n**Workaround**\n\nUse the callback argument that has been added to these methods to register a\nlambda that will be called when the operation has been completed.\n\n**Rationale**\n\nThe behaviour of these methods is now consistent across all platforms and the\nmethod no longer blocks the message thread on Windows.\n\n\n## Change\n\nAudioProcessor::getTailLengthSeconds can now return infinity for\nVST/VST3/AU/AUv3.\n\n**Possible Issues**\n\nIf you are using the result of getTailLengthSeconds to allocate a buffer in\nyour host, then your host will now likely crash when loading a plug-in with an\ninfinite tail time.\n\n**Workaround**\n\nRewrite your code to not use the result of getTailLengthSeconds directly to\nallocate a buffer.\n\n**Rationale**\n\nBefore this change there was no way for a JUCE plug-in to report an infinite\ntail time.\n\n\n# Version 5.3.2\n\n## Change\n\nThe behaviour of an UndoManager used by an AudioProcessorValueTreeState has\nbeen improved.\n\n**Possible Issues**\n\nIf your plug-in contains an UndoManager used by an AudioProcessorValueTreeState\nand relies upon the old behaviour of the UndoManager then it is possible that\nthe new behaviour is no longer appropriate for your use case.\n\n**Workaround**\n\nUse an external UndoManager to reproduce the old behaviour manually.\n\n**Rationale**\n\nThis change fixes a few bugs in the behaviour of an UndoManager used by an\nAudioProcessorValueTreeState.\n\n\n## Change\n\nJUCE no longer supports OS X deployment targets earlier than 10.7.\n\n**Possible Issues**\n\nIf you were previously targeting OS X 10.5 or 10.6 you will no longer be able\nto build JUCE-based products compatible with those platforms.\n\n**Workaround**\n\nNone. With the appropriate JUCE licence you may be able to backport new JUCE\nfeatures, but there will be no official support for this.\n\n**Rationale**\n\nIncreasing the minimum supported OS X version allows the JUCE codebase to make\nuse of the more modern C++ features found in the 10.7 standard library, which\nin turn will increase thread and memory safety.\n\n\n# Version 5.3.0\n\n## Change\n\nThe JUCE examples have been cleaned up, modernised and converted into PIPs\n(Projucer Instant Projects). The JUCE Demo has been removed and replaced by the\nDemoRunner application and larger projects such as the Audio Plugin Host and\nthe Network Graphics Demo have been moved into the extras directory.\n\n**Possible Issues**\n\n1. Due to the large number of changes that have occurred in the JUCE Git\n   repository, pulling this version may result in a messy folder structure with\n   empty directories that have been removed.\n2. The JUCE Demo project is no longer in the JUCE repository.\n3. The Audio Plugin Host project has moved from the examples directory to the\n   extras directory.\n\n**Workaround**\n\n1. Run a Git clean command (git clean -xdf) in your JUCE directory to remove\n   all untracked files, directories and build products.\n2. The new DemoRunner application, located in extras/DemoRunner, can be used to\n   preview all the JUCE examples and see the code side-by-side.\n3. Change any file paths that depended on the plugin host project being located\n   in the examples directory to use the extras directory instead.\n\n**Rationale**\n\nThe JUCE examples had inconsistent naming, coding styles and the projects and\nbuild products took up a large amount of space in the repository. Replacing\nthem with PIPs reduces the file size and allows us to categorise the examples\nbetter, as well as cleaning up the code.\n\n\n## Change\n\nWhen hosting plug-ins all AudioProcessor methods of managing parameters that\ntake a parameter index as an argument have been deprecated.\n\n**Possible Issues**\n\nA single assertion will be fired in debug builds on the first use of a\ndeprecated function.\n\n**Workaround**\n\nWhen hosting plug-ins you should use the AudioProcessor::getParameters() method\nand interact with parameters via the returned array of\nAudioProcessorParameters. For a short-term fix you can also continue past the\nassertion in your debugger, or temporarily modify the JUCE source code to\nremove it.\n\n**Rationale**\n\nGiven the structure of JUCE's API it is impossible to deprecate these functions\nusing only compile-time messages. Therefore a single assertion, which can be\nsafely ignored, serves to indicate that these functions should no longer be\nused. The move away from the AudioProcessor methods both improves the interface\nto that class and makes ongoing development work much easier.\n\n\n## Change\n\nThis InAppPurchases class is now a JUCE Singleton. This means that you need\nto get an instance via InAppPurchases::getInstance(), instead of storing a\nInAppPurchases object yourself.\n\n**Possible Issues**\n\nAny code using InAppPurchases needs to be updated to retrieve a singleton\npointer to InAppPurchases.\n\n**Workaround**\n\nInstead of holding a InAppPurchase member yourself, you should get an instance\nvia InAppPurchases::getInstance(), e.g.\n\ninstead of:\n\nInAppPurchases iap;\niap.purchaseProduct (...);\n\ncall:\n\nInAppPurchases::getInstance()->purchaseProduct (...);\n\n**Rationale**\n\nThis change was required to fix an issue on Android where on failed transaction\na listener would not get called.\n\n\n## Change\n\nJUCE's MPE classes have been updated to reflect the official specification\nrecently approved by the MIDI Manufacturers Association (MMA).\n\n**Possible Issues**\n\nThe most significant changes have occurred in the MPEZoneLayout classes and\nprograms using the higher level MPE classes such as MPEInstrument,\nMPESynthesiser, MPESynthesiserBase and MPESynthesiserVoice should be\nunaffected.\n\nPreviously, any MIDI channel from 1 - 15 could be selected to be the master\nchannel of an MPE zone, with a specified number of member channels ascending\nfrom the master channel + 1. However, in the new specification this has been\nsimplified so that a device only has a lower and/or an upper zone, where the\nlower zone has master channel 1 and assigns new member channels ascending from\nchannel 2 and the upper zone has master channel 16 and assigns new member\nchannels descending from channel 15.\n\n**Workaround**\n\nUse the MPEZoneLayout::setLowerZone() and MPEZoneLayout::setUpperZone() methods\nto set zone layouts.\n\nAny UI that allows users to select and set zones on an MPE instrument should\nalso be updated to reflect the specification changes.\n\n**Rationale**\n\nThe MPE classes in JUCE are out of date and should be updated to reflect the\nnew, official MPE standard.\n\n\n# Version 5.2.1\n\n## Change\n\nCalling JUCEApplicationBase::quit() on Android will now really quit the app,\nrather than just placing it in background. Starting with API level 21 (Android\n5.0), the app will not appear in recent apps list after calling quit(). Prior\nto API 21, the app will still appear in recent app lists but when a user\nchooses the app, a new instance of the app will be started.\n\n**Possible Issues**\n\nAny code calling JUCEApplicationBase::quit() to place the app in background\nwill close the app instead.\n\n**Workaround**\n\nUse Process::hide().\n\n**Rationale**\n\nThe old behaviour JUCEApplicationBase::quit() was confusing JUCE code, as a new\ninstance of JUCE app was attempted to be created, while the older instance was\nstill running in background. This would result in assertions when starting a\nsecond instance.\n\n\n## Change\n\nOn Windows, release builds will now link to the dynamic C++ runtime by default\n\n**Possible Issues**\n\nIf you are creating a new .jucer project, then your plug-in will now link to\nthe dynamic C++ runtime by default, which means that you MUST ensure that the\nC++ runtime libraries exist on your customer's computers.\n\n**Workaround**\n\nIf you are only targeting Windows 10, then the C++ runtime is now part of the\nsystem core components and will always exist on the computers of your customers\n(just like kernel332.dll, for example). If you are targeting Windows versions\nbetween Vista and Windows 10, then you should build your plug-in with the\nlatest updated version of VS2015 or later, which ensures that it's linked to\nthe universal runtime. Universal runtime is part of the system's core libraries\non Windows 10 and on Windows versions Vista to 8.1, it will be available on\nyour customer's computers via Windows Update. Unfortunately, if your customer\nhas just installed Windows 8.1 to Vista on a fresh computer, then there is a\nchance that the update mechanism for the universal runtime hasn't triggered yet\nand your plug-in may still fail. Your installer should prompt the user to\ninstall all the Windows updates in this case or you can deploy the universal\nruntime as a redistributable with your installer. If you are targeting earlier\nversions of Windows then you should always include the runtime as a\nredistributable with your plug-in's installer. Alternatively, you can change\nthe runtime linking to static (however, see 'Rationale' section).\n\n**Rationale**\n\nIn a recent update to Windows 10, Microsoft has limited the number of fiber\nlocal storage (FLS) slots per process. Effectively, this limits how many\nplug-ins with static runtime linkage can be loaded into a DAW. In the worst\ncase, this limits the total number of plug-ins to a maximum of 64 plug-ins.\nThere is no workaround for DAW vendors and the only solution is to push plug-in\nvendors to use the dynamic runtime. To help with this, JUCE has decided to make\ndynamic runtime linkage the default in JUCE.\n\n\n## Change\n\nAudioProcessorGraph interface has changed in a number of ways - Node objects\nare now reference counted, there are different accessor methods to iterate\nthem, and misc other small improvements to the API\n\n**Possible Issues**\n\nThe changes won't cause any silent errors in user code, but will require some\nmanual refactoring\n\n**Workaround**\n\nJust find equivalent new methods to replace existing code.\n\n**Rationale**\n\nThe graph class was extremely old and creaky, and these changes is the start of\nan improvement process that should eventually result in it being broken down\ninto fundamental graph building block classes for use in other contexts.\n\n\n# Version 5.2.0\n\n## Change\n\nViewport now enables \"scroll on drag\" mode by default on Android and iOS.\n\n**Possible Issues**\n\nAny code relying on \"scroll on drag\" mode being turned off by default, should\ndisable it manually.\n\n**Workaround**\n\nNone.\n\n**Rationale**\n\nIt is expected on mobile devices to be able to scroll a list by just a drag,\nrather than using a dedicated scrollbar. The scrollbar is still available\nthough if needed.\n\n\n## Change\n\nThe previous setting of Android exporter \"Custom manifest xml elements\"\ncreating child nodes of <application> element has been replaced by \"Custom\nmanifest XML content\" setting that allows to specify the content of the entire\nmanifest instead.  Any previously values of the old setting will be used in the\nnew setting by default, and they will need changing as mentioned in Workaround.\nThe custom content will be merged with the content auto-generated by Projucer.\nAny custom elements or custom attributes will override the ones set by\nProjucer. Projucer will also automatically add any missing and required\nelements and attributes.\n\n**Possible Issues**\n\nIf a Projucer project used \"Custom manifest xml elements\" field, the value will\nno longer be compatible with the project generated in the latest Projucer\nversion. The solution is very simple and quick though, as mentioned in the\nWorkaround section.\n\n**Workaround**\n\nFor any elements previously used, simply embed them explicitly in\n<manifest><application> elements, for example instead of:\n\n<meta-data android:name=\"paramId1\" android:value=\"paramValue1\"/>\n<meta-data android:name=\"paramId2\" android:value=\"paramValue2\"/>\n\nsimply write:\n\n<manifest>\n<application>\n<meta-data android:name=\"paramId1\" android:value=\"paramValue1\"/>\n<meta-data android:name=\"paramId2\" android:value=\"paramValue2\"/>\n</application>\n</manifest>\n\n**Rationale**\n\nTo maintain the high level of flexibility of generated Android projects and to\navoid creating fields in Projucer for every possible future parameter, it is\nsimpler to allow to set up the required parameters manually. This way it is not\nonly possible to add any custom elements but it is also possible to override\nthe default attributes assigned by Projucer for the required elements. For\ninstance, if the default value of <supports-screens> element is not\nsatisfactory because you want a support for x-large screens only, simply set\n\"Custom manifest XML content\" to:\n\n<manifest>\n<supports-screens android:xlargeScreens=\"true\"/>\n</manifest>\n\n\n# Version 5.1.2\n\n## Change\n\nThe method used to classify AudioUnit, VST3 and AAX plug-in parameters as\neither continuous or discrete has changed, and AudioUnit and AudioUnit v3\nparameters are marked as high precision by default.\n\n**Possible Issues**\n\nPlug-ins: DAW projects with automation data written by an AudioUnit, AudioUnit\nv3 VST3 or AAX plug-in built with JUCE version 5.1.1 or earlier may load\nincorrectly when opened by an AudioUnit, AudioUnit v3, VST3 or AAX plug-in\nbuilt with JUCE version 5.1.2 and later.\n\nHosts: The AudioPluginInstance::getParameterNumSteps method now returns correct\nvalues for AU and VST3 plug-ins.\n\n**Workaround**\n\nPlug-ins: Enable JUCE_FORCE_LEGACY_PARAMETER_AUTOMATION_TYPE in the\njuce_audio_plugin_client module config page in the Projucer.\n\nHosts: Use AudioPluginInstance::getDefaultNumParameterSteps as the number of\nsteps for all parameters.\n\n**Rationale**\n\nThe old system for presenting plug-in parameters to a host as either continuous\nor discrete is inconsistent between plug-in types and lacks sufficient\nflexibility. This change harmonises the behaviour and allows individual\nparameters to be marked as continuous or discrete. If AudioUnit and AudioUnit\nv3 parameters are not marked as high precision then hosts like Logic Pro only\noffer a limited number of parameter values, which again produces different\nbehaviour for different plug-in types.\n\n\n## Change\n\nA new FrameRateType fps23976 has been added to AudioPlayHead,\n\n**Possible Issues**\n\nPreviously JUCE would report the FrameRateType fps24 for both 24 and 23.976\nfps. If your code uses switch statements (or similar) to handle all possible\nframe rate types, then this change may cause it to fall through.\n\n**Workaround**\n\nAdd fps23976 to your switch statement and handle it appropriately.\n\n**Rationale**\n\nJUCE should be able to handle all popular frame rate codes but was missing\nsupport for 23.976.\n\n\n## Change\n\nThe String (bool) constructor and operator<< (String&, bool) have been\nexplicitly deleted.\n\n**Possible Issues**\n\nPrevious code which relied on an implicit bool to int type conversion to\nproduce a String will not compile.\n\n**Workaround**\n\nCast your bool to an integer to generate a string representation of it.\n\n**Rationale**\n\nLetting things implicitly convert to bool to produce a String opens the door to\nall kinds of nasty type conversion edge cases. Furthermore, before this change,\nMacOS would automatically convert bools to ints but this wouldn't occur on\ndifferent platform. Now the behaviour is consistent across all operating\nsystems supported by JUCE.\n\n\n## Change\n\nThe writeAsJSON virtual method of the DynamicObject class requires an\nadditional parameter, maximumDecimalPlaces, to specify the maximum precision of\nfloating point numbers.\n\n**Possible Issues**\n\nClasses which inherit from DynamicObject and override this method will need to\nupdate their method signature.\n\n**Workaround**\n\nYour custom DynamicObject class can choose to ignore the additional parameter\nif you don't wish to support this behaviour.\n\n**Rationale**\n\nWhen serialising the results of calculations to JSON the rounding of floating\npoint numbers can result in numbers with 17 significant figures where only a\nfew are required. This change to DynamicObject is required to support\ntruncating those numbers.\n\n\n# Version 5.1.0\n\n## Change\n\nThe JUCE_COMPILER_SUPPORTS_LAMBDAS preprocessor macro has been removed.\n\n**Possible Issues**\n\nIf your project is using JUCE_COMPILER_SUPPORTS_LAMBDAS in your source code\nthen it will likely evaluate to \"false\" and you could end up unnecessarily\nusing code paths which avoid lambda functions.\n\n**Workaround**\n\nRemove the usage of JUCE_COMPILER_SUPPORTS_LAMBDAS from your code.\n\n**Rationale**\n\nLambda functions are now available on all platforms that JUCE supports.\n\n\n## Change\n\nThe option to set the C++ language standard is now located in the project\nsettings instead of the build configuration settings.\n\n**Possible Issues**\n\nProjects that had a specific version of the C++ language standard set for\nexporter build configurations will instead use the default (C++11) when\nre-saving with the new Projucer.\n\n**Workaround**\n\nChange the \"C++ Language Standard\" setting in the main project settings to the\nrequired version - the Projucer will add this value to the exported project as\na compiler flag when saving exporters.\n\n**Rationale**\n\nHaving a different C++ language standard option for each build configuration\nwas unnecessary and was not fully implemented for all exporters. Changing it to\na per-project settings means that the preference will propagate to all\nexporters and only needs to be set in one place.\n\n\n## Change\n\nPopupMenus now scale according to the AffineTransform and scaling factor of\ntheir target components.\n\n**Possible Issues**\n\nDevelopers who have manually scaled their PopupMenus to fit the scaling factor\nof the parent UI will now have the scaling applied two times in a row.\n\n**Workaround**\n\n1. Do not apply your own manual scaling to make your popups match the UI\n   scaling\n\nor\n\n2. Override the Look&Feel method\n   PopupMenu::LookAndFeelMethods::shouldPopupMenuScaleWithTargetComponent and\n   return false. See\n   https://github.com/juce-framework/JUCE/blob/c288c94c2914af20f36c03ca9c5401fcb555e4e9/modules/juce_gui_basics/menus/juce_PopupMenu.h#725\n\n**Rationale**\n\nPreviously, PopupMenus would not scale if the GUI of the target component (or\nany of its parents) were scaled. The only way to scale PopupMenus was via the\nglobal scaling factor. This had several drawbacks as the global scaling factor\nwould scale everything. This was especially problematic in plug-in editors.\n\n\n## Change\n\nRemoved the setSecurityFlags() method from the Windows implementation of\nWebInputStream as it disabled HTTPS security features.\n\n**Possible Issues**\n\nAny code previously relying on connections to insecure webpages succeeding will\nno longer work.\n\n**Workaround**\n\nCheck network connectivity on Windows and re-write any code that relied on\ninsecure connections.\n\n**Rationale**\n\nThe previous behaviour resulted in network connections on Windows having all\nthe HTTPS security features disabled, exposing users to network attacks. HTTPS\nconnections on Windows are now secure and will fail when connecting to an\ninsecure web address.\n\n\n## Change\n\nPointer arithmetic on a pointer will have the same result regardless if it is\nwrapped in JUCE's Atomic class or not.\n\n**Possible Issues**\n\nAny code using pointer arithmetic on Atomic<T*> will now have a different\nresult leading to undefined behaviour or crashes.\n\n**Workaround**\n\nRe-write your code in a way that it does not depend on your pointer being\nwrapped in JUCE's Atomic or not. See rationale.\n\n**Rationale**\n\nBefore this change, pointer arithmetic with JUCE's Atomic type would yield\nconfusing results. For example, the following code would assert before this\nchange:\n\nint* a; Atomic<int*> b;\n\njassert (++a == ++b);\n\nPointer a in the above code would be advanced by sizeof(int) whereas the JUCE's\nAtomic always advances it's underlying pointer by a single byte. The same is\ntrue for operator+=/operator-= and operator--. The difference in behaviour is\nconfusing and unintuitive. Furthermore, this aligns JUCE's Atomic type with\nstd::atomic.\n\n\n# Version 4.3.1\n\n## Change\n\nJUCE has changed the way native VST3/AudioUnit parameter ids are calculated.\n\n**Possible Issues**\n\nDAW projects with automation data written by an AudioUnit or VST3 plug-in built\nwith pre JUCE 4.3.1 versions will load incorrectly when opened by an AudioUnit\nor VST3 built with JUCE versions 4.3.1 and later. Plug-ins using\nJUCE_FORCE_USE_LEGACY_PARAM_IDS are not affected.\n\n**Workaround**\n\nDisable JUCE_USE_STUDIO_ONE_COMPATIBLE_PARAMETERS in the\njuce_audio_plugin_client module config page in the Projucer. For new plug-ins,\nbe sure to use the default value for this property.\n\n**Rationale**\n\nJUCE needs to convert between its own JUCE parameter id format (strings) to the\nnative parameter id formats of the various plug-in backends. For VST3 and\nAudioUnits, JUCE uses a hash function to generate a numeric id. However, some\nVST3/AudioUnit hosts (specifically Studio One) have a bug that ignore any\nparameters that have a negative parameter id. Therefore, the hash function for\nVST3/AudioUnits needed to be changed to only return positive-valued hashes.\n\n\n# Version 4.3.0\n\n## Change\n\nA revised multi-bus API was released which supersedes the previously flawed\nmulti-bus API - JUCE versions 4.0.0 - 4.2.4 (inclusive).\n\n**Possible Issues**\n\nIf you have developed a plug-in with JUCE versions 4.0.0 - 4.2.4 (inclusive),\nthen you will need to update your plug-in to the new multi-bus API. Pre JUCE\n4.0.0 plug-ins are not affected apart from other breaking changes listed in\nthis document.\n\n**Workaround**\n\nNone.\n\n**Rationale**\n\nA flawed multi-bus API was introduced with JUCE versions 4.0.0 up until version\n4.2.4 (inclusive) which was not API compatible with pre JUCE 4 plug-ins. JUCE\n4.3.0 releases a revised multi-bus API which restores pre JUCE 4 API\ncompatibility. However, the new multi-bus API is not compatible with the flawed\nmulti-bus API (JUCE version 4.0.0 - 4.2.4).\n\n\n## Change\n\nJUCE now generates the AAX plug-in bus layout configuration id independent from\nthe position as it appears in the Projucer’s legacy \"Channel layout\nconfiguration\" field.\n\n**Possible Issues**\n\nProTools projects generated with a < 4.3.0 JUCE versions of your plug-in, may\nload the incorrect bus configuration when upgrading your plug-in to >= 4.3.0\nversions of JUCE.\n\n**Workaround**\n\nImplement AudioProcessor’s getAAXPluginIDForMainBusConfig callback to manually\noverride which AAX plug-in id is associated to a specific bus layout of your\nplug-in. This workaround is only necessary if you have released your plug-in\nbuilt with a version previous to JUCE 4.3.0.\n\n**Rationale**\n\nThe new multi-bus API offers more features, flexibility and accuracy in\nspecifying bus layouts which cannot be expressed by the Projucer’s legacy\n\"Channel layout configuration\" field. The native plug-in format backends use\nthe new multi-bus callback APIs to negotiate channel layouts with the host -\nincluding the AAX plug-in ids assigned to specific bus layouts. With the\ncallback API, there is no notion of an order in which the channel\nconfigurations appear - as was the case with the legacy \"Channel layout\nconfiguration\" field - and therefore cannot be used to generate the AAX plug-in\nid. To remain backward compatible to pre JUCE 4.0.0 plug-ins, JUCE does\ntransparently convert the legacy \"Channel layout configuration\" field to the\nnew callback based multi-bus API, but this does not take the order into account\nin which the channel configurations appear in the legacy \"Channel layout\nconfiguration\" field.\n\n\n# Version 4.2.1\n\n## Change\n\nJUCE now uses the paramID property used in AudioProcessorParameterWithID to\nuniquely identify parameters to the host.\n\n**Possible Issues**\n\nDAW projects with automation data written by an audio plug-in built with pre\nJUCE 4.2.1 will load incorrectly when opened by an audio plug-in built with\nJUCE 4.2.1 and later.\n\n**Workaround**\n\nEnable JUCE_FORCE_USE_LEGACY_PARAM_IDS in the juce_audio_plugin_client module config\npage in the Projucer. For new plug-ins, be sure to disable this property.\n\n**Rationale**\n\nEach parameter of the AudioProcessor has an id associated so that the plug-in’s\nhost can uniquely identify parameters. The id has a different data-type for\ndifferent plug-in types (for example VST uses integers, AAX uses string\nidentifiers). Before 4.2.1, JUCE generated the parameter id by using the index\nof the parameter, i.e. the first parameter had id zero, the second parameter\nhad id one, etc. This caused problems for certain plug-in types where JUCE\nneeds to add internal parameters to the plug-in (for example VST3 requires the\nbypass control to be a parameter - so JUCE automatically creates this parameter\nfor you in the VST3 backend). This causes subtle problems if a parameter is\nadded to an update of an already published plug-in. The new parameter’s id\nwould be identical to the id of the bypass parameter in old versions of your\nplug-in, causing seemingly random plug-in bypass behaviour when user’s upgrade\ntheir plug-in.\n\nMost plug-in backends differentiate between a parameter’s id an index, so this\ndistinction was adopted starting with JUCE 4.2.1 by deriving the parameter’s\nunique id from the paramID property of AudioProcessorParameterWithID class.\n"
        },
        {
          "name": "CHANGE_LIST.md",
          "type": "blob",
          "size": 32.7451171875,
          "content": "# Major JUCE features and updates\r\n\r\nThis file lists the more notable headline features. For more detailed info\r\nabout changes and bugfixes please see the git log and BREAKING_CHANGES.md.\r\n\r\n## Version 8.0.6\r\n\r\n  - Changed a Visual Studio toolchain error into a warning \r\n\r\n## Version 8.0.5\r\n\r\n  - Added Windows Arm support\r\n  - Added support for local notifications\r\n  - Added passthrough compiler options to juceaide\r\n  - Added support for VST3 parameter migrations\r\n  - Fixed some Windows mouse events and window dragging behaviour\r\n  - Added Ranges functionality\r\n  - Added VST2 and VST3 MIDI note names\r\n\r\n## Version 8.0.4\r\n\r\n  - Simplified singleton creation\r\n  - Fixed some Javascript and C++ interoperability issues\r\n  - Added exact passthrough of MIDI CC timestamps\r\n  - Switched to obtaining MIDI plug-in properties at runtime\r\n  - Improved Windows Arm CMake support\r\n  - Improved ShapedText\r\n  - Fixed some issues with Windows DLL builds\r\n  - Add system-provided timestamps to VBlankAttachment and animations\r\n  - Fixed some iOS deprecation warnings\r\n  - Updated embedded CHOC version\r\n  - Updated embedded Oboe version\r\n  - Moved the JavaScript implementation into a separate module\r\n\r\n## Version 8.0.3\r\n\r\n  - Updated the AAX SDK to 2.8.0\r\n  - Fixed multiple Direct2D drawing issues\r\n  - Fixed buffer size and sample rate selection on iOS 18\r\n\r\n## Version 8.0.2\r\n\r\n  - Fixed some issues handling large images in Direct2D\r\n  - Enabled rounded window corners in Windows 11\r\n  - Fixed some compiler warnings in Xcode 16\r\n  - Improved macOS and Android GU rendering performance\r\n  - Added support for C++20 and C++23\r\n  - Fixed a Windows mouse response issue\r\n  - Updated the VST3 SDK to 3.7.12\r\n\r\n## Version 8.0.1\r\n\r\n  - Fixed some issues with text layout\r\n  - Removed source code for unsupported platforms\r\n  - Fixed some Direct2D issues\r\n  - Update the embedded version of harfbuzz\r\n  - Added more surround formats\r\n\r\n## Version 8.0.0\r\n\r\n  - Added a new Direct2D renderer\r\n  - Added support for WebView based UIs\r\n  - Added consistent unicode support across platforms\r\n  - Added a new animation module\r\n  - Bundled the AAX SDK\r\n\r\n## Version 7.0.12\r\n\r\n  - Fixed an issue with timers in Pro Tools\r\n  - Fixed an issue with Projucer Xcode code signing\r\n\r\n## Version 7.0.11\r\n\r\n  - Fixed an issue with paths containing a tilde in Xcode\r\n  - Multiple fixes for plug-in deployment and code signing in Xcode\r\n  - Fixed an issue painting an empty RectangleList\r\n  - Improved the performance of TreeView rendering\r\n\r\n## Version 7.0.10\r\n\r\n  - Fixed multiple issues selecting devices in AudioDeviceSelector\r\n  - Updated the bundled Oboe version\r\n  - Fixed multiple issues with Timer\r\n  - Updated the bundled version of FLAC\r\n  - Added configuration options for sockets\r\n  - Added new JSON::Formatter\r\n  - Added support for Xcode 15.1\r\n  - Update OpenGL compatibility headers\r\n  - Added ChildProcessManager\r\n  - Fixed multiple MIDI-CI issues\r\n\r\n## Version 7.0.9\r\n\r\n  - Added MIDI-CI support\r\n  - Added enumerate utility function\r\n  - Fixed a macOS/iOS CMake signing issue\r\n\r\n## Version 7.0.8\r\n\r\n  - Added macOS/iOS AudioWorkgroup support\r\n  - Added Xcode 15, macOS Sonoma and LLVM 17 compatibility\r\n  - Added serialisation tools\r\n  - Fixed some VST3 manifest generation issues\r\n  - Fixed a MessageManager locking bug\r\n  - Fixed GCC 7 VST3 support\r\n  - Fixed some SVG scaling issues\r\n\r\n## Version 7.0.7\r\n\r\n  - Fixed some macOS 14.0 deprecations\r\n  - Fixed some issues with VST3 manifest generation\r\n  - Fixed a Metal layer rendering issue\r\n  - Fixed an issue setting realtime thread priorities\r\n  - Fixed a crash in VirtualDesktopWatcher\r\n  - Fixed an AUv3 bundling problem\r\n\r\n## Version 7.0.6\r\n\r\n  - Added support for VST3 bundles and moduleinfo.json\r\n  - Improved message box dismissal\r\n  - Improved WebView support\r\n  - Updated to the latest VST3 and AAX SDKs\r\n  - Fixed some Metal layer rendering issues\r\n  - Improved ambisonic support\r\n  - Improved machine ID support\r\n  - Improved the HighResolutionTimer implementation\r\n\r\n## Version 7.0.5\r\n\r\n  - Fixed Windows 7 compatibility\r\n  - Fixed dark mode notifications on macOS\r\n  - Improved the performance of AudioProcessorGraph\r\n\r\n## Version 7.0.4\r\n\r\n  - Improved Metal device handling\r\n  - Adopted more C++17 features\r\n  - Improved input handling on macOS and iOS\r\n  - Fixed a GUI display issue on Linux\r\n  - Fixed some compiler warnings\r\n\r\n## Version 7.0.3\r\n\r\n  - Added a unique machine ID\r\n  - Added new threading classes\r\n  - Improved the performance of multiple OpenGL contexts\r\n  - Refactored AudioProcessorGraph\r\n  - Improved AudioDeviceManager sample rate handling\r\n  - Fixed Studio One drawing performance\r\n  - Updated the FLAC library\r\n\r\n## Version 7.0.2\r\n\r\n  - Fixed accessibility table navigation\r\n  - Fixed Android file access on older APIs\r\n  - Improved Linux VST3 threading\r\n  - Improved ARA integration\r\n\r\n## Version 7.0.1\r\n\r\n  - Fixed some Xcode and MSVC compiler warnings\r\n  - Improved VST3 bus configuration and channel handling\r\n  - Fixed some Metal layer rendering bugs\r\n\r\n## Version 7.0.0\r\n\r\n  - Added Audio Random Access (ARA) SDK support\r\n  - Added support for authoring and hosting LV2 plug-ins\r\n  - Added a default renderer for macOS and iOS\r\n  - Added new macOS and iOS rendering options\r\n  - Added hardware synchronised drawing on Windows, macOS and iOS\r\n  - Updated the Android billing and file access APIs\r\n  - Revamped AudioPlayHead functionality\r\n  - Improved accessibility support\r\n\r\n## Version 6.1.6\r\n\r\n  - Improved the handling of AU multichannel layouts\r\n  - Added JUCE_NODISCARD to builder-patten functions\r\n  - Added recursion options to DirectoryIterator\r\n  - Unified the loading of OpenGL 3.2 core profiles\r\n  - Improved macOS full-screen behaviour with non-native titlebars\r\n\r\n## Version 6.1.5\r\n\r\n  - Improved the accessibility framework\r\n  - Added handling of non-Latin virtual key codes on macOS\r\n  - Improved X11 compatibility\r\n  - Updated the iOS in-app purchases workflow\r\n  - Improved macOS windowing behaviour\r\n  - Improved MinGW-w64 compatibility\r\n  - Added an MPEKeyboardComponent class\r\n\r\n## Version 6.1.4\r\n\r\n  - Restored Projucer project saving behavior\r\n  - Fixed a CGImage memory access violation on Monterey\r\n  - Improved macOS thread priority management\r\n\r\n## Version 6.1.3\r\n\r\n  - Added support for Visual Studio 2022 to the Projucer\r\n  - Added support for creating OpenGL 3.2 contexts on Windows\r\n  - Added support for plugin hosts to easily retrieve stable parameter IDs\r\n  - Added high-resolution image support to DragAndDropContainer\r\n  - Added support for a wider range of frame-rates in plugins and hosts\r\n  - Made Font and TypefaceCache threadsafe, to allow font rendering on background threads\r\n  - Improved FlexBox compatibility with the CSS FlexBox specification\r\n  - Improved macOS 12 compatibility, including OpenGL and FileChooser fixes\r\n  - Improved accessibility support\r\n\r\n## Version 6.1.2\r\n\r\n  - Fixed an OpenGL display refresh rate issue on macOS\r\n  - Improved the scaling behaviour of hosted VST3 plug-ins\r\n  - Improved accessibility support\r\n\r\n## Version 6.1.1\r\n\r\n  - Fixed a CMake installation issue\r\n  - Improved parameter value loading after plug-in restarts\r\n  - Fixed some problems with multi-line text layouts\r\n  - Added a fallback for modal native message boxes on Windows\r\n  - Fixed an issue setting OpenGL repaint events\r\n  - Improved accessibility support\r\n\r\n## Version 6.1.0\r\n\r\n  - Added accessibility support\r\n  - Enabled use of VST3 plug-in extensions\r\n  - Improved OpenGL function loading\r\n  - Updated to C++14\r\n  - Added support for macOS Monterey and iOS 15\r\n  - Added async versions of all modal functions\r\n  - Fixed some VST3 threading issues\r\n  - Added cross-platform-compatible VST3 UID hash\r\n  - Improved MinGW compatibility\r\n  - Fixed some issues with BufferingAudioReader\r\n  - Improved TextEditor repainting\r\n  - Added support for larger ASIO buffers\r\n  - Updated Android Oboe to 1.6.1\r\n  - Improved modal dismissing\r\n  - Improved assertion handling on macOS ARM\r\n\r\n## Version 6.0.8\r\n\r\n  - Fixed a macOS graphics invalidation region issue\r\n  - Improved the handling of modal dialog dismissal\r\n  - Fixed audio glitching in CoreAudio before microphone permission is granted\r\n  - Improved AUv3 resizing and initialisation\r\n  - Fixed some string to double conversions\r\n  - Improved iOS split view behaviour\r\n  - Added Display::safeAreaInserts\r\n  - Improved assertion behaviour on macOS ARM\r\n  - Multiple resizing and display scaling fixes\r\n  - Added more information to audioProcessorChanged callbacks\r\n  - Fixed some DSP convolution issues\r\n  - Added host detection on macOS ARM\r\n\r\n## Version 6.0.7\r\n\r\n  - Fixed a macOS drawing issue\r\n  - Updated the DemoRunner bundle ID\r\n\r\n## Version 6.0.6\r\n\r\n  - Moved to the new CoreMIDI API on supported platforms\r\n  - Added support for the \"New Build System\" in Xcode\r\n  - Made the audio format readers more robust\r\n  - Improved the HiResTimer implementation\r\n  - Fixed a VST3 program parameter issue\r\n  - Updated to Oboe 1.5 on Android\r\n\r\n## Version 6.0.5\r\n\r\n  - Added more support for styling PopupMenus\r\n  - Fixed some race conditions in the IPC and name named pipe classes\r\n  - Implemented multiple FileChooser improvements\r\n  - Added compatibility with the latest Android SDK\r\n  - Prevented CoreAudio glitches before accepting audio access permissions\r\n  - Made reading MIDI and audio files more robust\r\n\r\n## Version 6.0.4\r\n\r\n  - Improved the Projucer update mechanism\r\n  - Fixed an AUv3 parameter normalisation issue\r\n  - Fixed WASAPI exclusive mode sample rate selection bug\r\n  - Fixed a Linux build issue when omitting ALSA\r\n\r\n## Version 6.0.3\r\n\r\n  - Fixed version numbers in project files\r\n\r\n## Version 6.0.2\r\n\r\n  - Added support for macOS 11 and arm64\r\n  - Added Windows IAudioClient3 support for low latency audio drivers\r\n  - Added Windows and macOS precompiled header support in the Projucer\r\n  - Improved accessibility support in the macOS menu bar\r\n  - Fixed VST3 hosting for plug-ins requiring persistent DLL loads\r\n  - Updated macOS camera capture API\r\n  - Improved resave diffs in Projucer project files\r\n  - Fixed some Linux JACK issues\r\n\r\n## Version 6.0.1\r\n\r\n  - Fixed a bug in the Projucer GUI editor causing existing code to be overwritten\r\n  - Updated Android Oboe to 1.4.2\r\n  - Bumped default Android Studio gradle and plugin versions to the latest\r\n  - Fixed some Android Oboe and OpenSL issues\r\n  - Fixed some Doxygen parsing issues\r\n  - Fixed MIDI input/output bus enablement in VST3 plug-ins\r\n  - Improved Windows Clang compatibility\r\n  - Fixed GCC 4.8 and 5.0 compatibility\r\n  - Fixed some VST3 build errors and warnings on Linux\r\n  - Fixed dynamically loaded X11 library names on Linux\r\n  - Fixed Projucer CLion exporter generated CMakeLists.txt\r\n  - Fixed drag and drop for non-DPI aware plug-ins on Windows\r\n\r\n## Version 6.0.0\r\n\r\n  - Added support for building JUCE projects with CMake\r\n  - Revamped the DSP module\r\n  - Added VST3 support on Linux\r\n  - Added support for the latest webview components on macOS/iOS and Windows\r\n  - Removed the sign-in requirement, app reporting and analytics from the Projucer\r\n  - Added support for running headlessly on Linux\r\n  - Bundled Oboe source in JUCE and made it the default audio device on Android\r\n  - Various Oboe stability improvements\r\n  - Various Projucer UI improvements\r\n  - Added HWNDComponent for embedding native HWNDs on Windows\r\n  - Added support for all camera names on macOS\r\n  - Added support for building with Clang on Windows\r\n  - Modified MidiMessageCollector to preallocate storage\r\n  - Modified AudioProcessorGraph to allow extracting nodes\r\n  - Refactored the APVTS parameter attachment classes and added a new ParameterAttachment class\r\n  - Added IPP FFT implementation\r\n  - Added all example plugins as internal nodes in AudioPluginHost project\r\n  - Removed JuceHeader requirement from Projucer projects\r\n  - Added support for legacy CC output events\r\n  - Added MidiBuffer::Iterator class compatible with C++11 range-for\r\n  - Added RangedDirectoryIterator class compatible with C++11 range-for\r\n  - Provided range-for comaptibility for String class\r\n  - Windows and Linux hiDPI scaling improvements\r\n  - Various bug-fixes, improvements and documentation updates\r\n\r\n## Version 5.4.7\r\n\r\n  - Fixed a macOS focus bug causing Components to not receive mouse events\r\n  - Fixed a potential NullPointerException in the Android IAP code\r\n  - Fixed an entitlements file generation bug in the Projucer\r\n  - Send VST2 audioMasterUpdateDisplay opcode on the message thread to fix some hosts not updating\r\n  - Fixed some build errors and warnings when using Clang on Windows\r\n  - Changed the default architecture specified in Linux Makefiles generated by the Projucer\r\n\r\n## Version 5.4.6\r\n\r\n  - Fixed compatibility with macOS versions below 10.11\r\n  - Multiple thread safety improvements\r\n  - Added dynamic parameter and parameter group names\r\n  - Updated to the latest Android In-App Purchases API\r\n  - Improvements to the Windows message queue under high load\r\n  - Replaced WaitableEvent internals with std::condition_variable\r\n  - Fixed some macOS text alignment issues\r\n\r\n## Version 5.4.5\r\n\r\n  - Improved message queue performance on Linux\r\n  - Added missing lifecycle callbacks on Android Q\r\n  - Refactored the AudioBlock class\r\n  - Fixed APVTS parameter update recursion\r\n  - Updated Bela code to support latest release\r\n  - Fixed issues drawing italicised text on macOS\r\n  - Fixed broken back button behaviour on Android\r\n  - Added Bluetooth permissions settings needed for iOS 13.0+ to the Projucer\r\n  - Replaced select() calls with poll()\r\n  - Various bug-fixes, improvements and documentation updates\r\n\r\n## Version 5.4.4\r\n\r\n  - Improvements to floating point number printing\r\n  - Faster plug-in parameter indexing\r\n  - Added support for persisting attachements to MIDI devices\r\n  - Refactored Linux event loop handling\r\n  - Multiple C++ modernisation improvements to the API\r\n  - Added support for macOS 10.15 and iOS 13\r\n  - Added support for Visual Studio 2019\r\n  - Removed support for Visual Studio 2013\r\n\r\n## Version 5.4.3\r\n\r\n  - Added a Visual Studio 2019 exporter to the Projucer\r\n  - Added options to configure macOS Hardened Runtime in the Projucer\r\n  - Fixed a potential memory corruption when drawing on macOS/iOS\r\n  - Fixed file drag and drop for Windows 8\r\n  - Multiple DSP module enhancements\r\n  - Various bug-fixes, improvements and documentation updates\r\n\r\n## Version 5.4.2\r\n\r\n  - Restructured the low-level Android native code\r\n  - Added an ADSR envelope class\r\n  - AudioProcessorValueTreeState performance improvements\r\n  - Improved Xcode 10 support\r\n  - Improved VST3 hosting\r\n  - Windows hiDPI scaling enhancements\r\n\r\n## Version 5.4.1\r\n\r\n  - Fixed a VST2 compilation error in VS2013\r\n  - Fixed some live-build compilation errors in the Projucer\r\n  - Fixed a bug in the Oversampling class\r\n  - Made MPESynthesiserVoice::noteOnTime public\r\n  - Fixed some bugs in the Unity plug-in wrapper\r\n  - Fixed some VS2015 compiler errors\r\n\r\n## Version 5.4.0\r\n\r\n  - macOS Mojave and iOS 12 support\r\n  - Windows hiDPI support\r\n  - Unity native plug-in support\r\n  - Microsoft BLE MIDI support\r\n  - Plug-in parameter groups\r\n  - Support for production-ready Android OBOE\r\n  - Video playback support on Android and iOS\r\n  - AudioProcessorValueTreeState improvements\r\n  - Support for Android Studio 3.2\r\n  - Various bug-fixes, improvements and documentation updates\r\n\r\n## Version 5.3.2\r\n\r\n  - Removed the OSX 10.5 and 10.6 deployment target options from the Projucer and enabled more C++11 features across all platforms\r\n  - Replaced all usage of ScopedPointer with std::unique_ptr\r\n  - Added camera support for iOS and Android\r\n  - Fixed some issues using an UndoManager with an AudioProcessorValueTreeState\r\n  - Added MIDI input to IAA plug-ins\r\n  - Made multiple calls to MidiInput::openDevice share the same underlying win32 MIDI handle\r\n  - Added a config flag to juce_audio_processors for enabling LADSPA plugin hosting and enabled it in the AudioPluginHost\r\n  - Added a \"plug-in can do\" callback to the VSTCallbackHandler interface\r\n  - Fixed various undefined behavior in SIMDRegister\r\n  - Added the methods AudioBlock::copyTo/AudioBlock::copyFrom which facilitate copying to/from an AudioBuffer\r\n  - Added a lambda callback to OpenGLGraphicsContextCustomShader to allow custom set-up when the shader is activated\r\n  - Fixed a bug causing an unintentional menu item highlight disco party when using a popup menu in a plug-in's UI\r\n  - Marked as deprecated: String::empty, var::null, File::nonexistent, ValueTree::invalid and other problematic statically-initialised null values\r\n\r\n## Version 5.3.1\r\n\r\n  - Add Android and iOS support to AudioPluginHost\r\n  - Added support for Bela in the form of an AudioIODeviceType\r\n  - Add bypass support to both hosting and plug-in client code\r\n  - Added an isBoolean flag to APVTS parameters\r\n  - Re-worked plug-in wrappers to all use new parameter system via LegacyAudioParameter wrapper class\r\n  - Fixed an issue where opening the same midi device twice would cause a crash on Windows\r\n  - Deprecated MouseInputSource::hasMouseMovedSignificantlySincePressed() and replaced with more descriptive methods\r\n  - Added support for relative or special path symbolic links when compressing/uncompressing zip archives and creating/reading files\r\n  - Ensured that File::replaceInternal does not fail with ACL errors on Windows\r\n  - Merged-in some Ogg-Vorbis security fixes\r\n  - Fixed a bug which would prevent a SystemTrayIconComponent from creating a native popup window on macOS\r\n  - Various Android and iOS fixes\r\n  - Added a \"PIP Creator\" utility tool to the Projucer\r\n  - Added options for setting plugin categories and characteristics with MultiChoicePropertyComponent in the Projucer\r\n  - Fixed a Projucer bug where the OSX base SDK version was not being set\r\n  - Added a command-line option to use LF as linefeeds rather than CRLF in the Projucer cleanup tools\r\n  - Multiple documentation updates\r\n\r\n## Version 5.3.0\r\n\r\n  - Added support for Android OBOE (developer preview)\r\n  - Updated JUCE's MPE classes to comply with the new MMA-adopted specification\r\n  - Multiple documentation updates\r\n  - Restructured the examples and extras directories and updated all JUCE examples\r\n  - Multiple hosted parameter improvements\r\n  - Overhauled the GenericAudioProcessorEditor\r\n  - Added support for a subset of the Cockos VST extensions\r\n  - Added support for loading VST3 preset files\r\n  - Added boolean AudioProcessorParameters\r\n  - Added thread safe methods for getting and setting the AudioProcessorValueTreeState state\r\n  - Added customisable MacOS icons\r\n\r\n## Version 5.2.1\r\n\r\n  - Added native content sharing support for iOS and Android\r\n  - Added iOS and Android native file chooser support\r\n  - Implemented WebBrowserComponent on Android\r\n  - Added SystemStats::getDeviceManufacturer()\r\n  - Ensured that JUCE will always use the high-performance audio path on Android if the device supports it\r\n  - Added memory warning callbacks on iOS\r\n  - Refactored iOSAudioDevice to support multi-channel audio devices and improve the handling of sample rate changes from other apps\r\n  - Added SidePanel and BurgerMenu component classes\r\n  - Added PushNotifications support on OSX\r\n  - Added support for VST3 SDK 3.6.8\r\n  - Added support for loading VST3 preset files\r\n  - Added higher-order ambisonics support\r\n  - Added thread safe methods for getting and setting the AudioProcessorValueTreeState state\r\n  - Cleanup and refactoring work on the AudioProcessorGraph and the audio plugin host demo\r\n  - Changed the default language standard for new projects from C++11 to C++14 and set all JUCE projects to use C++14\r\n  - Made the ScopedPointer interface more compatible with std::unique_ptr\r\n  - Changed Windows projects to use dynamic runtime linking by default\r\n  - Added lambda callbacks to ListenerList, Slider, Button, Label, ComboBox and TextEditor\r\n  - Fixed the live-build engine on Windows\r\n  - Multiple DSP module fixes and features\r\n  - Multiple threading and undefined behaviour fixes and improvements\r\n  - Various graphics optimisations\r\n  - Multiple Projucer UI and UX improvements\r\n  - Various documentation tweaks and fixes\r\n\r\n## Version 5.2.0\r\n\r\n  - Added a CMake exporter to the Projucer\r\n  - JUCE analytics module\r\n  - Added support for push notifications on iOS and Android\r\n  - Added in-app purchase support for macOS\r\n  - Added a plugin binary copy step to the Visual Studio exporter\r\n  - Added an option to set the debug information format in the Visual Studio exporter\r\n  - Added a link-time optimisation option to all exporters\r\n  - Added support for adding asm files to Android projects\r\n  - Improved the reliability of the Projucer's live-build engine\r\n  - Added support for AUv2 Midi Effect plug-in hosting\r\n  - Added support for Atmos 7.0.2 and 7.1.2 Surround formats\r\n  - Added support for the OGG sub-format inside a WAV file\r\n  - Added support for querying the audio hardware on how many overruns/underruns occurred\r\n  - Implement Process::hide on mobile platforms\r\n  - Added support for multi-touch drag and drop\r\n  - Improved the performance of 3D rendering when multiple OpenGL contexts are used at the same time\r\n  - Tweaked the rate at which EdgeTable grows its internal storage, to improve performance rendering large and complex paths\r\n\r\n## Version 5.1.2\r\n\r\n  - Fixed multiple plugin-resizing bugs\r\n  - Added support for AUv3 MIDI and screen size negotiation\r\n  - Added support for Xcode 9 and iOS 11\r\n  - Added an In-App Purchases module\r\n  - Added backwards compatible constexpr support\r\n  - Standalone plug-in improvements\r\n  - Better .jucer file change monitoring in the Projucer\r\n  - Increased the speed of AU parameter lookup\r\n  - Improved the Android thread management when dealing with web requests\r\n  - Better denormal support\r\n  - Plug-in parameters can be explicitly marked as continuous or discrete\r\n  - Multiple documentation updates\r\n\r\n## Version 5.1.1\r\n\r\n  - Fixed Windows live build engine on Visual Studio 2017\r\n  - Fixed a compiler error in juce_MathFunctions.h in Visual Studio 2013\r\n  - Fixed a potential crash when using the ProcessorDuplicator\r\n  - Fixed a compiler-error in Filter::IIR\r\n  - Fixed an issue where the WavFileFormatWriter could not create files with discrete channels\r\n  - Fixed an issue where a window which is beneath a hidden window would not receive any clicks on Linux\r\n  - Altered the format of BREAKING-CHANGES.txt to display better on GitHub\r\n  - Projucer: Fixed an issue in exporter tilde expansion\r\n  - Fixed compiler errors when building the DSP module with a static version of FFTW\r\n  - Fixed an audio glitch when bypassing the convolution engine\r\n  - Fixed an issue where a JUCE VST2 would not correctly report that it supports resizing of it’s plugin editor\r\n  - Various documentation tweaks and fixes\r\n\r\n## Version 5.1.0\r\n\r\n  - Release of the JUCE DSP module\r\n  - Multichannel audio readers and writers\r\n  - Plugin editor Hi-DPI scaling support\r\n  - Major improvements to Projucer module search paths\r\n  - Added Projucer support for iOS app groups\r\n  - Added support for AVFoundation and deprecated the use of Quicktime\r\n  - Added a new real-time audio thread priority for Android\r\n  - Various Projucer UI fixes\r\n  - Various documentation fixes\r\n  - Various minor improvements and bug fixes\r\n\r\n## Version 5.0.2\r\n\r\n  - Improved project save speed in the Projucer\r\n  - Added option to save individual exporters in the Projucer\r\n  - Added the ability to create custom colour schemes for the Projucer’s code editor\r\n  - Minor fixes to JUCE’s SVG parser\r\n  - Various bug fixes in the way JUCE handles Hi-DPI monitors\r\n  - Improved code browsing in Visual Studio Exports\r\n  - Improved the handling of audio device buffer size changes on iOS\r\n  - Fixed bug in the Win32 FileChooser dialog when selecting a nonexistent root drive\r\n  - Fixed a Projucer crash when saving projects with no targets\r\n  - Fixed a bug where Projucer generated Makefiles would not trigger a recompilation when header files had changed\r\n  - The standalone plugin target is now compatible with effect plug-ins\r\n  - Fixed an issue where it was not possible to use the live build engine on plugin projects\r\n  - Improved the way the Projucer’s live-build engine searches for platform headers on Windows\r\n  - Fixed an issue where the Projucer would complain about not having internet even if the user had a license\r\n  - Fixed a use-after-free in the AUv3 wrapper\r\n  - Fixed an issue where the channel layout would not be reported correctly in the AUv3 wrapper\r\n  - Fixed a potential memory overrun issue when hosting VST2 plugins with more than eight channels\r\n  - Fixed a problem with the Mac main menu bar showing menus in the wrong position\r\n  - Various Projucer UI fixes\r\n  - Various documentation fixes\r\n  - Various minor improvements and bug fixes\r\n\r\n## Version 5.0.1\r\n\r\n  - Fixed Windows live build engine on Visual Studio 2017\r\n  - Fixed memory-leak in Projucer live build engine\r\n  - Fixed an issue where you could not paste your redeem serial number with Cmd+V on macOS\r\n  - Fixed an issue where the Projucer would crash on linux due to missing symbols in WebKit\r\n  - Minor Projucer UI improvements\r\n  - Various minor improvements and bug fixes\r\n\r\n## Version 5.0.0\r\n\r\n  - New licensing model\r\n  - Projucer UI/UX overhaul\r\n  - New look and feel (version 4)\r\n  - New standalone plug-in format\r\n  - Added support for Visual Studio 2017\r\n  - Added support for VST3 SDK 3.6.7\r\n  - Added support for Apple Inter-App Audio on iOS\r\n  - Various Android stability and performance improvements\r\n  - Added support for non-experimental gradle plug-in versions >= 2.2 and Android Studio 2.3\r\n  - Added support for closed-source third-party modules\r\n  - Added support for Windows 10 Bluetooth LE MIDI devices\r\n  - Modernised JUCE codebase to use C++11/14 features\r\n  - Added support for Linux embedded platforms\r\n  - Added support for WebBrowserComponent on Linux\r\n  - Added support for IPv6\r\n  - Various minor improvements and bug fixes\r\n  - Various documentation improvements\r\n\r\n## Version 4.3.1\r\n\r\n  - Added support for iOS download tasks\r\n  - Added support for AAX plug-in meters\r\n  - Added support for dynamically disabling/enabling sidechains in ProTools\r\n  - Re-introduced support for VST3 plug-ins reporting which VST2 plug-in they can replace\r\n  - Added withRightX and withBottomY methods to Rectangle\r\n  - Added support for windows 10 on screen keyboard\r\n  - Added move semantics to AudioBuffer\r\n  - Added colour coding scheme to module icons in the Projucer to indicate which type of license a module uses\r\n  - Removed all deprecation warnings for macOS Sierra\r\n  - Fixed multiple touch, pen and mouse input related bugs on Windows\r\n  - Added submenu support to ComboBoxes and simplified the usage of ComboBoxes\r\n  - Various minor improvements and bug fixes\r\n  - Various documentation improvements\r\n\r\n## Version 4.3.0\r\n\r\n  - Added API and examples for ROLI Blocks\r\n  - Multiple Projucer live-build UI and diagnostics improvements\r\n  - JUCE now supports hosting multi-bus plug-ins\r\n  - BufferingAudioSource now supports pre-buffering (useful for offline processing)\r\n  - Added microphone permissions switch to Projucer for iOS targets\r\n  - Standalone wrappers now correctly save and restore midi settings\r\n  - Various performance improvements to BigInteger\r\n  - Fixed various FlexBox bugs\r\n  - Added a workaround for the broken “Open Recent…” menu on os x\r\n  - Various minor improvements and bug fixes\r\n  - Various documentation improvements\r\n\r\n## Version 4.2.4\r\n\r\n  - Pre-release of live build engine on Windows\r\n  - Added FlexBox layout engine\r\n  - Removed dependency on external Steinberg SDK when building and/or hosting VST2 plug-ins\r\n  - Added support for MIDI network sessions in the iOS simulator\r\n  - Added support for symmetric skew to Slider, NormalisableRange and SliderPropertyComponent\r\n  - Projucer now asks the user what to do when it detects that the .jucer file was modified outside of the Projucer\r\n  - Improved support for Windows 10 touch devices\r\n  - Added begin/end iterator methods for ValueTree, for handy range-based-for loops over its children\r\n  - Added support for recent mingw-w64 compilers\r\n  - Added useful proportional Rectangle utility methods\r\n  - Significantly improved the performance of BigInteger\r\n  - Added support for expiring licenses to juce_tracktion_marketplace\r\n  - Added support for retina mouse cursors on OS X\r\n  - Added a new low-quality mode for the CameraDevice\r\n  - Added pkg-config support for Linux\r\n  - Projucer will now wrap your AAX plug-in in the bundle format expected Pro Tools on Windows\r\n  - Multiple bug-fixes for AudioUnit parameter ids\r\n  - Fixed a bug where AlertWindows weren’t always on top\r\n  - Multiple fixes for web InputStreams\r\n  - Various improvements to the live build engine\r\n  - Various minor improvements and bug fixes\r\n  - Various documentation improvements\r\n\r\n## Version 4.2.3\r\n\r\n  - Various VST3 improvements: resizing VST3 windows, plug-in compatibility issues\r\n  - Use NSURLSession on newer OS X versions\r\n  - Add compatibility for VST 3 SDK update 3.6.6\r\n  - Miscellaneous fixes and improvements\r\n\r\n## Version 4.2.1\r\n\r\n  - New class CachedValue, for providing easy and efficient access to ValueTree properties\r\n  - Reduced audio plug-in binary sizes on OS X and added symbol-stripping option\r\n  - Miscellaneous fixes and improvements\r\n\r\n## Version 4.2\r\n\r\n  - Added support for AudioUnit v3 on OS X and iOS\r\n  - Simplified the JUCE module format. Removed the json module definition files, and made\r\n    it easier to manually add modules to projects. The format is fully described in the\r\n    document juce/modules/JUCE Module Format.txt\r\n  - iOS project support: added custom resource folders, custom xcassets, app capabilities,\r\n    and screen orientation settings.\r\n  - Deleted the Introjucer.. But don't panic! All of its functionality is now supplied by a\r\n    more open-source version of the Projucer. By refactoring the closed-source LLVM compilation\r\n    code into a DLL, we've been able to unify the Introjucer and Projucer into a single\r\n    open-source project. This will allow everyone to compile the Projucer's IDE themselves, and\r\n    having just one app instead of two will make things a lot less confusing!\r\n\r\n## Version  4.1\r\n\r\n  - Added multi-bus support for audio plug-in clients\r\n  - Added support for MIDI effect plug-ins (AU and AAX).\r\n  - Added new example: Network Graphics Demo\r\n\r\n## Version 4.0.3\r\n\r\n  - Added MPE (Multidimensional Polyphonic Expression) classes\r\n  - Added full support for generating and parsing Midi RPN/NRPN messages\r\n  - Made the LinearSmoothedValue class public\r\n  - Miscellaneous fixes and minor improvements\r\n\r\n## Version 4.0.2\r\n\r\n  - Miscellaneous fixes and house-keeping\r\n\r\n## Version 4.0.1\r\n\r\n  - Initial release of the Projucer!\r\n  - Full OSC support!\r\n  - Android Studio exporting from the Introjucer\r\n  - Android-M pro-audio low-latency i/o support\r\n  - Bluetooth MIDI device support on iOS and Android\r\n  - AudioSampleBuffer refactored into a templated class AudioBuffer, to allow\r\n    32 or 64 bit float support\r\n  - Audio plugin and hosting now supports 64-bit data\r\n  - Support for force-touch and pen pressure on iOS and Windows\r\n  - Added easy sound-file playing methods to AudioDeviceManager\r\n  - Many updates to Introjucer\r\n  - Many new tutorials and examples\r\n\r\n## Version 3.3.0\r\n\r\n  - New functions for Base64 conversion\r\n  - New command-line options in the introjucer for trimming whitespace and\r\n    replacing tabs in source files\r\n\r\n## Version 3.2.0\r\n\r\n  - Major OpenGL performance/stability improvements\r\n  - Performance improvements to FloatVectorOperations math functions\r\n  - New FloatVectorOperations: abs, min, max, addWithMultiply, clip\r\n  - Midi channel pressure support\r\n  - New example projects ComponentTutorialExample, SimpleFFTExample,\r\n    PluckedStringsDemo\r\n  - New class ValueTreeSynchroniser, for remote-syncing multiple\r\n    ValueTrees\r\n  - HTTPS/SSL support on Linux\r\n  - Added methods for degrees to radians conversions\r\n  - Added Neon instruction set support for Android targets\r\n  - JUCE ValueTree performance improvements\r\n  - Linux and Android multi-monitor HiDPI support\r\n  - Support the “display=none” attribute in SVG files\r\n  - Support for text elements in SVG files\r\n  - Added Whirlpool hash class to the cryptography module\r\n  - Various improvements for parameter automation in VST, VST-3,\r\n    AudioUnits and AAX\r\n  - Various improvements to JUCE Synthesiser\r\n  - Linux Code::Blocks project support\r\n  - Multicast support\r\n  - Add support to generate project version numbers from project git tags\r\n  - Various updates to example projects\r\n  - Stability improvements to re-order and resize code of plug-in windows\r\n  - Support for external third-party native libraries on Android\r\n  - Introjucer’s auto-update now displays release notes\r\n  - Various Introjucer usability improvements\r\n  - Support for in-memory fonts on Android\r\n  - New FFT class\r\n  - WASAPI exclusive mode support\r\n  - More C++11 feature support macros\r\n  - Performance improvements to XML parsing\r\n  - Add compatibility for AAX SDK 2.2.0\r\n  - Added parameters to the ValueTree::Listener::valueTreeChildRemoved()\r\n    and valueTreeChildOrderChanged() methods to include more info about\r\n    exactly what changed\r\n  - Over 400 minor changes, bug-fixes, documentation improvements, etc.\r\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 8.642578125,
          "content": "# ==============================================================================\r\n#\r\n#  This file is part of the JUCE framework.\r\n#  Copyright (c) Raw Material Software Limited\r\n#\r\n#  JUCE is an open source framework subject to commercial or open source\r\n#  licensing.\r\n#\r\n#  By downloading, installing, or using the JUCE framework, or combining the\r\n#  JUCE framework with any other source code, object code, content or any other\r\n#  copyrightable work, you agree to the terms of the JUCE End User Licence\r\n#  Agreement, and all incorporated terms including the JUCE Privacy Policy and\r\n#  the JUCE Website Terms of Service, as applicable, which will bind you. If you\r\n#  do not agree to the terms of these agreements, we will not license the JUCE\r\n#  framework to you, and you must discontinue the installation or download\r\n#  process and cease use of the JUCE framework.\r\n#\r\n#  JUCE End User Licence Agreement: https://juce.com/legal/juce-8-licence/\r\n#  JUCE Privacy Policy: https://juce.com/juce-privacy-policy\r\n#  JUCE Website Terms of Service: https://juce.com/juce-website-terms-of-service/\r\n#\r\n#  Or:\r\n#\r\n#  You may also use this code under the terms of the AGPLv3:\r\n#  https://www.gnu.org/licenses/agpl-3.0.en.html\r\n#\r\n#  THE JUCE FRAMEWORK IS PROVIDED \"AS IS\" WITHOUT ANY WARRANTY, AND ALL\r\n#  WARRANTIES, WHETHER EXPRESSED OR IMPLIED, INCLUDING WARRANTY OF\r\n#  MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.\r\n#\r\n# ==============================================================================\r\n\r\ncmake_minimum_required(VERSION 3.22)\r\n\r\nproject(JUCE VERSION 8.0.6 LANGUAGES C CXX)\r\n\r\ninclude(CMakeDependentOption)\r\n\r\nset_property(GLOBAL PROPERTY USE_FOLDERS YES)\r\n\r\nset(JUCE_MODULES_DIR \"${JUCE_SOURCE_DIR}/modules\" CACHE INTERNAL\r\n    \"The path to JUCE modules\")\r\n\r\n# This option will disable most of the JUCE helper functions and tools. This option exists to\r\n# facilitate existing CMake builds which handle things like bundle creation, icons, plists, and\r\n# binary data independently of JUCE. This option is not recommended - use at your own risk!\r\n\r\noption(JUCE_MODULES_ONLY \"Only configure the JUCE modules\" OFF)\r\n\r\ninclude(extras/Build/CMake/JUCEModuleSupport.cmake)\r\n\r\n# This option controls whether dummy targets are added to the build, where these targets contain all\r\n# of the source files for each JUCE module. If you're planning to use an IDE and want to be able to\r\n# browse all of JUCE's source files, this may be useful. However, it will increase the size of\r\n# generated IDE projects and might slow down configuration a bit. If you enable this, you should\r\n# probably also add `set_property(GLOBAL PROPERTY USE_FOLDERS YES)` to your top level CMakeLists,\r\n# otherwise the module sources will be added directly to the top level of the project, instead of in\r\n# a nice 'Modules' subfolder.\r\n\r\ncmake_dependent_option(JUCE_ENABLE_MODULE_SOURCE_GROUPS\r\n    \"Show all module sources in IDE projects\" OFF\r\n    \"NOT JUCE_MODULES_ONLY\" OFF)\r\n\r\nadd_subdirectory(modules)\r\n\r\nif(JUCE_MODULES_ONLY)\r\n    return()\r\nendif()\r\n\r\ninclude(extras/Build/CMake/JUCEUtils.cmake)\r\n\r\nset_directory_properties(PROPERTIES\r\n    JUCE_COMPANY_NAME       \"JUCE\"\r\n    JUCE_COMPANY_WEBSITE    \"https://juce.com\"\r\n    JUCE_COMPANY_EMAIL      \"info@juce.com\"\r\n    JUCE_COMPANY_COPYRIGHT  \"Copyright (c) - Raw Material Software Limited\")\r\n\r\noption(JUCE_COPY_PLUGIN_AFTER_BUILD\r\n    \"Whether or not plugins should be installed to the system after building\" OFF)\r\nset_property(GLOBAL PROPERTY JUCE_COPY_PLUGIN_AFTER_BUILD ${JUCE_COPY_PLUGIN_AFTER_BUILD})\r\n\r\nset(CMAKE_CXX_EXTENSIONS FALSE)\r\n\r\njuce_disable_default_flags()\r\n\r\nadd_subdirectory(extras/Build)\r\n\r\n# If you want to build the JUCE examples with VST2/AAX/ARA support, you'll need to make the\r\n# VST2/AAX/ARA headers visible to the juce_audio_processors module. You can either set the paths on\r\n# the command line, (e.g. -DJUCE_GLOBAL_AAX_SDK_PATH=/path/to/sdk) if you're just building the JUCE\r\n# examples, or you can call the `juce_set_*_sdk_path` functions in your own CMakeLists after\r\n# importing JUCE.\r\n\r\nif(JUCE_GLOBAL_AAX_SDK_PATH)\r\n    juce_set_aax_sdk_path(\"${JUCE_GLOBAL_AAX_SDK_PATH}\")\r\nendif()\r\n\r\nif(JUCE_GLOBAL_VST2_SDK_PATH)\r\n    juce_set_vst2_sdk_path(\"${JUCE_GLOBAL_VST2_SDK_PATH}\")\r\nendif()\r\n\r\n# The ARA_SDK path should point to the \"Umbrella installer\" ARA_SDK directory.\r\n# The directory can be obtained by recursively cloning https://github.com/Celemony/ARA_SDK and\r\n# checking out the tag releases/2.1.0.\r\nif(JUCE_GLOBAL_ARA_SDK_PATH)\r\n    juce_set_ara_sdk_path(\"${JUCE_GLOBAL_ARA_SDK_PATH}\")\r\nendif()\r\n\r\n# We don't build anything other than the juceaide by default, because we want to keep configuration\r\n# speedy and the number of targets low. If you want to add targets for the extra projects and\r\n# example PIPs (there's a lot of them!), specify -DJUCE_BUILD_EXAMPLES=ON and/or\r\n# -DJUCE_BUILD_EXTRAS=ON when initially generating your build tree.\r\n\r\noption(JUCE_BUILD_EXTRAS \"Add build targets for the Projucer and other tools\" OFF)\r\n\r\nif(JUCE_BUILD_EXTRAS)\r\n    add_subdirectory(extras)\r\nendif()\r\n\r\noption(JUCE_BUILD_EXAMPLES \"Add build targets for the DemoRunner and PIPs\" OFF)\r\n\r\nif(JUCE_BUILD_EXAMPLES)\r\n    add_subdirectory(examples)\r\nendif()\r\n\r\nstring(CONCAT webview2_option_message \"Location that overrides the default directory where our \"\r\n                                      \"FindWebView2 script is looking for the \"\r\n                                      \"*Microsoft.Web.WebView2* directory\")\r\n\r\noption(JUCE_WEBVIEW2_PACKAGE_LOCATION ${webview2_option_message} \"\")\r\n\r\n# ==================================================================================================\r\n# Install configuration\r\n\r\ninclude(CMakePackageConfigHelpers)\r\nwrite_basic_package_version_file(\"${JUCE_BINARY_DIR}/JUCEConfigVersion.cmake\"\r\n    VERSION ${JUCE_VERSION}\r\n    COMPATIBILITY ExactVersion)\r\n\r\nset(JUCE_INSTALL_DESTINATION \"lib/cmake/JUCE-${JUCE_VERSION}\" CACHE STRING\r\n    \"The location, relative to the install prefix, where the JUCE config file will be installed\")\r\n\r\nset(JUCE_MODULE_PATH \"include/JUCE-${JUCE_VERSION}/modules\")\r\nset(UTILS_INSTALL_DIR \"${JUCE_INSTALL_DESTINATION}\")\r\nset(JUCEAIDE_PATH \"${JUCE_TOOL_INSTALL_DIR}/${JUCE_JUCEAIDE_NAME}\")\r\nconfigure_package_config_file(\"${JUCE_CMAKE_UTILS_DIR}/JUCEConfig.cmake.in\"\r\n    \"${JUCE_BINARY_DIR}/JUCEConfig.cmake\"\r\n    PATH_VARS UTILS_INSTALL_DIR JUCEAIDE_PATH JUCE_MODULE_PATH\r\n    INSTALL_DESTINATION \"${JUCE_INSTALL_DESTINATION}\")\r\n\r\nset(JUCE_MODULE_PATH \"${JUCE_MODULES_DIR}\")\r\nset(UTILS_INSTALL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/extras/Build/CMake\")\r\nget_target_property(JUCEAIDE_PATH juceaide IMPORTED_LOCATION)\r\nconfigure_package_config_file(\"${JUCE_CMAKE_UTILS_DIR}/JUCEConfig.cmake.in\"\r\n    \"${JUCE_BINARY_DIR}/JUCEExportConfig.cmake\"\r\n    PATH_VARS UTILS_INSTALL_DIR JUCEAIDE_PATH JUCE_MODULE_PATH\r\n    INSTALL_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}\"\r\n    INSTALL_DESTINATION \"${CMAKE_CURRENT_BINARY_DIR}\")\r\n\r\ninstall(FILES \"${JUCE_BINARY_DIR}/JUCEConfigVersion.cmake\"\r\n              \"${JUCE_BINARY_DIR}/JUCEConfig.cmake\"\r\n              \"${JUCE_CMAKE_UTILS_DIR}/JUCECheckAtomic.cmake\"\r\n              \"${JUCE_CMAKE_UTILS_DIR}/JUCEHelperTargets.cmake\"\r\n              \"${JUCE_CMAKE_UTILS_DIR}/JUCEModuleSupport.cmake\"\r\n              \"${JUCE_CMAKE_UTILS_DIR}/JUCEUtils.cmake\"\r\n              \"${JUCE_CMAKE_UTILS_DIR}/JuceLV2Defines.h.in\"\r\n              \"${JUCE_CMAKE_UTILS_DIR}/LaunchScreen.storyboard\"\r\n              \"${JUCE_CMAKE_UTILS_DIR}/PIPAudioProcessor.cpp.in\"\r\n              \"${JUCE_CMAKE_UTILS_DIR}/PIPAudioProcessorWithARA.cpp.in\"\r\n              \"${JUCE_CMAKE_UTILS_DIR}/PIPComponent.cpp.in\"\r\n              \"${JUCE_CMAKE_UTILS_DIR}/PIPConsole.cpp.in\"\r\n              \"${JUCE_CMAKE_UTILS_DIR}/RecentFilesMenuTemplate.nib\"\r\n              \"${JUCE_CMAKE_UTILS_DIR}/UnityPluginGUIScript.cs.in\"\r\n              \"${JUCE_CMAKE_UTILS_DIR}/checkBundleSigning.cmake\"\r\n              \"${JUCE_CMAKE_UTILS_DIR}/copyDir.cmake\"\r\n              \"${JUCE_CMAKE_UTILS_DIR}/juce_runtime_arch_detection.cpp\"\r\n              \"${JUCE_CMAKE_UTILS_DIR}/juce_LinuxSubprocessHelper.cpp\"\r\n        DESTINATION \"${JUCE_INSTALL_DESTINATION}\")\r\n\r\nif((\"${CMAKE_SOURCE_DIR}\" STREQUAL \"${JUCE_SOURCE_DIR}\") AND (NOT JUCE_BUILD_HELPER_TOOLS))\r\n    _juce_add_lv2_manifest_helper_target()\r\n\r\n    if(TARGET juce_lv2_helper)\r\n        install(TARGETS juce_lv2_helper EXPORT LV2_HELPER DESTINATION \"bin/JUCE-${JUCE_VERSION}\")\r\n        install(EXPORT LV2_HELPER NAMESPACE juce:: DESTINATION \"${JUCE_INSTALL_DESTINATION}\")\r\n    endif()\r\n\r\n    _juce_add_vst3_manifest_helper_target()\r\n\r\n    if(TARGET juce_vst3_helper)\r\n        install(TARGETS juce_vst3_helper EXPORT VST3_HELPER DESTINATION \"bin/JUCE-${JUCE_VERSION}\")\r\n        install(EXPORT VST3_HELPER NAMESPACE juce:: DESTINATION \"${JUCE_INSTALL_DESTINATION}\")\r\n    endif()\r\nendif()\r\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.373046875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\n[info@juce.com](mailto:info@juce.com).\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 4.6982421875,
          "content": "# The JUCE Framework\n\nThe JUCE Framework is an open source framework licensed under a combination of\nopen source and commercial licences.\n\nThe JUCE Framework modules are dual-licensed under the\n[AGPLv3](https://www.gnu.org/licenses/agpl-3.0.en.html) and the commercial [JUCE\nlicence](https://juce.com/legal/juce-8-licence/).\n\n## The JUCE Licence\n\nIf you are not licensing the JUCE Framework modules under the\n[AGPLv3](https://www.gnu.org/licenses/agpl-3.0.en.html) then by downloading,\ninstalling, or using the JUCE Framework, or combining the JUCE Framework with\nany other source code, object code, content or any other copyrightable work, you\nagree to the terms of the the [JUCE 8 End User Licence\nAgreement](https://juce.com/legal/juce-8-licence/), and all incorporated terms\nincluding the [JUCE Privacy Policy](https://juce.com/legal/juce-privacy-policy/)\nand the [JUCE Website Terms of\nService](https://juce.com/legal/juce-website-terms-of-service/), as applicable,\nwhich will bind you. If you do not agree to the terms of this Agreement, we will\nnot license the JUCE Framework to you, and you must discontinue the installation\nor download process and cease use of the JUCE Framework.\n\nTHE JUCE FRAMEWORK IS PROVIDED \"AS IS\" WITHOUT ANY WARRANTY, AND ALL WARRANTIES,\nWHETHER EXPRESSED OR IMPLIED, INCLUDING WARRANTY OF MERCHANTABILITY OR FITNESS\nFOR A PARTICULAR PURPOSE, ARE DISCLAIMED.\n\nFor more information, visit the [JUCE website](https://juce.com).\n\nFull licence terms:\n- [JUCE 8 End User Licence Agreement](https://juce.com/legal/juce-8-licence/)\n- [JUCE Privacy Policy](https://juce.com/legal/juce-privacy-policy/)\n- [JUCE Website Terms of Service](https://juce.com/legal/juce-website-terms-of-service/)\n\n## The JUCE Framework Dependencies\n\nThe JUCE modules contain the following dependencies:\n- [AudioUnitSDK](modules/juce_audio_plugin_client/AU/AudioUnitSDK/) ([Apache 2.0](modules/juce_audio_plugin_client/AU/AudioUnitSDK/LICENSE.txt))\n- [Oboe](modules/juce_audio_devices/native/oboe/) ([Apache 2.0](modules/juce_audio_devices/native/oboe/LICENSE))\n- [FLAC](modules/juce_audio_formats/codecs/flac/) ([BSD](modules/juce_audio_formats/codecs/flac/Flac%20Licence.txt))\n- [GLEW](modules/juce_opengl/opengl/juce_gl.h) ([BSD](modules/juce_opengl/opengl/juce_gl.h)), including [Mesa](modules/juce_opengl/opengl/juce_gl.h) ([MIT](modules/juce_opengl/opengl/juce_gl.h)) and [Khronos](modules/juce_opengl/opengl/juce_gl.h) ([MIT](modules/juce_opengl/opengl/juce_gl.h))\n- [Ogg Vorbis](modules/juce_audio_formats/codecs/oggvorbis/) ([BSD](modules/juce_audio_formats/codecs/oggvorbis/Ogg%20Vorbis%20Licence.txt))\n- [jpeglib](modules/juce_graphics/image_formats/jpglib/) ([Independent JPEG Group License](modules/juce_graphics/image_formats/jpglib/README))\n- [CHOC](modules/juce_javascript/choc/) ([ISC](modules/juce_javascript/choc/LICENSE.md)), including [QuickJS](modules/juce_javascript/choc/javascript/choc_javascript_QuickJS.h) ([MIT](modules/juce_javascript/choc/javascript/choc_javascript_QuickJS.h))\n- [LV2](modules/juce_audio_processors/format_types/LV2_SDK/) ([ISC](modules/juce_audio_processors/format_types/LV2_SDK/lv2/COPYING))\n- [pslextensions](modules/juce_audio_processors/format_types/pslextensions/ipslcontextinfo.h) ([Public domain](modules/juce_audio_processors/format_types/pslextensions/ipslcontextinfo.h))\n- [AAX](modules/juce_audio_plugin_client/AAX/SDK/) ([Proprietary Avid AAX License/GPLv3](modules/juce_audio_plugin_client/AAX/SDK/LICENSE.txt))\n- [VST3](modules/juce_audio_processors/format_types/VST3_SDK/) ([Proprietary Steinberg VST3 License/GPLv3](modules/juce_audio_processors/format_types/VST3_SDK/LICENSE.txt))\n- [Box2D](modules/juce_box2d/box2d/) ([zlib](modules/juce_box2d/box2d/Box2D.h))\n- [pnglib](modules/juce_graphics/image_formats/pnglib/) ([zlib](modules/juce_graphics/image_formats/pnglib/LICENSE))\n- [zlib](modules/juce_core/zip/zlib/) ([zlib](modules/juce_core/zip/zlib/README))\n- [HarfBuzz](modules/juce_graphics/fonts/harfbuzz/) ([Old MIT](modules/juce_graphics/fonts/harfbuzz/COPYING))\n- [SheenBidi](modules/juce_graphics/unicode/sheenbidi/) ([Apache](modules/juce_graphics/unicode/sheenbidi/LICENSE))\n\nThe JUCE examples are licensed under the terms of the\n[ISC license](http://www.isc.org/downloads/software-support-policy/isc-license/).\n\nDependencies in the examples:\n- [reaper-sdk](examples/Plugins/extern/) ([zlib](examples/Plugins/extern/LICENSE.md))\n\nDependencies in the bundled applications:\n- [Projucer icons](extras/Projucer/Source/Utility/UI/jucer_Icons.cpp) ([MIT](extras/Projucer/Source/Utility/UI/jucer_Icons.cpp))\n\nDependencies in the build system:\n- [Android Gradle](examples/DemoRunner/Builds/Android/gradle/wrapper/LICENSE-for-gradlewrapper.txt) ([Apache 2.0](examples/DemoRunner/Builds/Android/gradle/wrapper/LICENSE-for-gradlewrapper.txt))\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.1376953125,
          "content": "![alt text](https://assets.juce.com/juce/JUCE_banner_github.png \"JUCE\")\n\nJUCE is an open-source cross-platform C++ application framework for creating\ndesktop and mobile applications, including VST, VST3, AU, AUv3, AAX and LV2\naudio plug-ins and plug-in hosts. JUCE can be easily integrated with existing\nprojects via CMake, or can be used as a project generation tool via the\n[Projucer](#the-projucer), which supports exporting projects for Xcode (macOS\nand iOS), Visual Studio, Android Studio, and Linux Makefiles as well as\ncontaining a source code editor.\n\n## Getting Started\n\nThe JUCE repository contains a\n[master](https://github.com/juce-framework/JUCE/tree/master) and\n[develop](https://github.com/juce-framework/JUCE/tree/develop) branch. The\ndevelop branch contains the latest bug fixes and features and is periodically\nmerged into the master branch in stable [tagged\nreleases](https://github.com/juce-framework/JUCE/releases) (the latest release\ncontaining pre-built binaries can be also downloaded from the [JUCE\nwebsite](https://juce.com/get-juce)).\n\nJUCE projects can be managed with either the Projucer (JUCE's own\nproject-configuration tool) or with CMake.\n\n### The Projucer\n\nThe repository doesn't contain a pre-built Projucer so you will need to build it\nfor your platform - Xcode, Visual Studio and Linux Makefile projects are located\nin [extras/Projucer/Builds](/extras/Projucer/Builds) (the minimum system\nrequirements are listed in the [minimum system\nrequirements](#minimum-system-requirements) section below). The Projucer can\nthen be used to create new JUCE projects, view tutorials and run examples. It is\nalso possible to include the JUCE modules source code in an existing project\ndirectly, or build them into a static or dynamic library which can be linked\ninto a project.\n\nFor further help getting started, please refer to the JUCE\n[documentation](https://juce.com/learn/documentation) and\n[tutorials](https://juce.com/learn/tutorials).\n\n### CMake\n\nVersion 3.22 or higher is required. To use CMake, you will need to install it,\neither from your system package manager or from the [official download\npage](https://cmake.org/download/). For comprehensive documentation on JUCE's\nCMake API, see the [JUCE CMake documentation](/docs/CMake%20API.md). For\nexamples which may be useful as starting points for new CMake projects, see the\n[CMake examples directory](/examples/CMake).\n\n#### Building Examples\n\nTo use CMake to build the examples and extras bundled with JUCE, simply clone\nJUCE and then run the following commands, replacing \"DemoRunner\" with the name\nof the target you wish to build.\n\n    cd /path/to/JUCE\n    cmake . -B cmake-build -DJUCE_BUILD_EXAMPLES=ON -DJUCE_BUILD_EXTRAS=ON\n    cmake --build cmake-build --target DemoRunner\n\n## Minimum System Requirements\n\n#### Building JUCE Projects\n\n- __C++ Standard__: 17\n- __macOS/iOS__: Xcode 12.4 (Intel macOS 10.15.4, Apple Silicon macOS 11.0)\n- __Windows__: Visual Studio 2019 (Windows 10)\n- __Linux__: g++ 7.0 or Clang 6.0 (for a full list of dependencies, see\n[here](/docs/Linux%20Dependencies.md)).\n- __Android__: Android Studio (NDK 26) on Windows, macOS or Linux\n\n#### Deployment Targets\n\n- __macOS__: macOS 10.11 (x86_64, Arm64)\n- __Windows__: Windows 10 (x86_64, x86, Arm64, Arm64EC)\n- __Linux__: Mainstream Linux distributions (x86_64, Arm64/aarch64, (32 bit Arm systems like armv7 should work but are not regularly tested))\n- __iOS__: iOS 12 (Arm64, Arm64e, x86_64 (Simulator))\n- __Android__: Android 5 - Lollipop (API Level 21) (arm64-v8a, armeabi-v7a, x86_64, x86)\n\n## Contributing\n\nPlease see our [contribution guidelines](.github/contributing.md).\n\n## Licensing\n\nSee [LICENSE.md](LICENSE.md) for licensing and dependency information.\n\n## AAX Plug-Ins\n\nAAX plug-ins need to be digitally signed using PACE Anti-Piracy's signing tools\nbefore they will run in commercially available versions of Pro Tools. These\ntools are provided free of charge by Avid. Before obtaining the signing tools,\nyou will need to use a special build of Pro Tools, called Pro Tools Developer,\nto test your unsigned plug-ins. The steps to obtain Pro Tools Developer are:\n\n1. Sign up as an AAX Developer [here](https://developer.avid.com/aax/).\n2. Request a Pro Tools Developer Bundle activation code by sending an email to\n   [devauth@avid.com](mailto:devauth@avid.com).\n3. Download the latest Pro Tools Developer build from your Avid Developer\n   account.\n\nWhen your plug-ins have been tested and debugged in Pro Tools Developer, and you\nare ready to digitally sign them, please send an email to\n[audiosdk@avid.com](mailto:audiosdk@avid.com) with the subject \"PACE Eden\nSigning Tools Request\". You need to include an overview of each plug-in along\nwith a screen recording showing the plug-in running in Pro Tools Developer, with\naudio if possible.\n\nPlease also include the following information:\n\n- Company name\n- Admin full name\n- Telephone number\n\nOnce the request is submitted, PACE Anti-Piracy will contact you directly with\ninformation about signing your plug-ins. When the plug-ins have been signed, you\nare free to sell and distribute them. If you are interested in selling your\nplug-ins on the Avid Marketplace, please send an email to\n[audiosdk@avid.com](mailto:audiosdk@avid.com).\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}