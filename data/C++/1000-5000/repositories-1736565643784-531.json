{
  "metadata": {
    "timestamp": 1736565643784,
    "page": 531,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "BrunoLevy/learn-fpga",
      "stars": 2642,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.349609375,
          "content": "*~\n*.o\n*.a\n*.exe\n*.elf\n*.asc\n*.bin\n*.bit\n*.json\n*.svf\n*.timings\n*_out.config\n*.000\n*.hex\n*.vvp\n*.dfu\n*.rpt\n*.blif\n*.list\nFemtoRV/FIRMWARE/firmware.txt\nFemtoRV/FIRMWARE/TOOLCHAIN/\nFemtoRV/FIRMWARE/TOOLS/firmware_words\nFemtoRV/RTL/CONFIGS/my_config.v\nFemtoRV/femtosoc.txt\nFemtoRV/FIRMWARE/config.mk\nFemtoRV/TOOLS/environment.yml\nFemtoRV/TOOLS/requirements.txt\n"
        },
        {
          "name": "Attic",
          "type": "tree",
          "content": null
        },
        {
          "name": "Basic",
          "type": "tree",
          "content": null
        },
        {
          "name": "FemtoRV",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.482421875,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2020, Bruno Levy\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "LiteX",
          "type": "tree",
          "content": null
        },
        {
          "name": "Notes",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.3935546875,
          "content": "# learn-fpga \n_Learning FPGA, yosys, nextpnr, and RISC-V_ \n\nMission statement: create teaching material for FPGAs, processor design and RISC-V, using around $40 per students.\n\n![](FemtoRV/TUTORIALS/Images/IceStick_hello.gif)\n\nFemtoRV: a minimalistic RISC-V CPU\n----------------------------------- \n[FemtoRV](FemtoRV/README.md) is a minimalistic RISC-V design, with\neasy-to-read Verilog sources directly written from the RISC-V specification. \nThe most elementary version (quark), an RV32I core, weights 400 lines of VERILOG\n(documented version), and 100 lines if you remove the comments. There\nare also more elaborate versions, the biggest one (petitbateau) is an RV32IMFC\ncore. The repository also includes a companion SoC, with\ndrivers for an UART, a led matrix, a small OLED display, SPI RAM and\nSDCard. Its most basic configuration fits on the Lattice IceStick (<\n1280 LUTs). It can be used for teaching processor design and RISC-V\nprogramming.\n\n\nPlaying with LiteX: plug-and-play system to assemble SOCs\n---------------------------------------------------------\nThe repository includes [LiteX examples](LiteX/README.md).\nThe [LiteX](https://github.com/enjoy-digital/litex) framework \nis a well designed and an easy-to-use framework to create SoCs. \nIt lets you create a SoC by assembling components (processor, \nSDRAM controller, SDCard controller, USB, ...) in Python.\nFemtoRV is directly supported by LiteX (that directly downloads\nit from this repository when selected as the SoC's processor). \n\nFrom Blinky to RISC-V\n---------------------\nIn [Episode I](https://github.com/BrunoLevy/learn-fpga/blob/master/FemtoRV/TUTORIALS/FROM_BLINKER_TO_RISCV/README.md),\nyou will learn to build your own RISC-V processor, step by step,\nstarting from the simplest design (that blinks a LED), to a fully\nfunctional RISC-V core that can compute and display graphics.\n\nIn [Episode II](https://github.com/BrunoLevy/learn-fpga/blob/master/FemtoRV/TUTORIALS/FROM_BLINKER_TO_RISCV/PIPELINE.md),\nyou will learn how to design a pipelined processor.\n\nLinks - Other FPGA resources\n----------------------------\n- [TinyPrograms](https://github.com/BrunoLevy/TinyPrograms) Tiny yet interesting C programs to play with your softcore\n- [LiteX](https://github.com/enjoy-digital/litex) Framework in Amaranth (Python-based HDL) to build SOCs\n- [Silice](https://github.com/sylefeb/Silice) A new HDL by my friend Sylvain Lefebvre\n- [FuseSOC](https://github.com/olofk/fusesoc) and [Edalize](https://github.com/olofk/edalize), package manager and abstraction of FPGA tools\n- [PipelineC](https://github.com/JulianKemmerer/PipelineC) Transform a C program into a pipelined specialized core !\n- [ultraembedded](https://github.com/ultraembedded/) Amazing resources, [FatIOLib](https://github.com/ultraembedded/fat_io_lib),[ExactStep](https://github.com/ultraembedded/exactstep)...\n- [picoRV](https://github.com/YosysHQ/picorv32) by Claire Wolf, my principal source of inspiration\n- [VexRiscV](https://github.com/SpinalHDL/VexRiscv) and [NaxRiscV](https://github.com/SpinalHDL/NaxRiscv), performant and configurable pipelined and OoO cores, by Charles Papon, in SpinalHDL\n- [SERV](https://github.com/olofk/serv) the tiniest RiscV core, with a bit-serial ALU\n- [DarkRiscV](https://github.com/darklife/darkriscv) a simple pipelined core (written in one night according to the legend)\n- [kianRiscV](https://github.com/splinedrive/kianRiscV) a simple yet complete Linux-capable core + soc\n- [TinySys](https://github.com/ecilasun/tinysys/wiki) not that tiny SOC and OS\n- [Will Green's project F](https://github.com/projf/projf-explore) tutorials with nice graphics effects\n- [fpga4fun](https://www.fpga4fun.com/) learned there how to create VGA graphics\n- [CoreScore](https://corescore.store/) how many cores can you fit on a FPGA ?\n\nBasic: more basic things I wrote during May 2020 - June 2020  \n------------------------------------------------------------\nFiles are [here](https://github.com/BrunoLevy/learn-fpga/tree/master/Basic).\nThis includes:\n- Blinker: the \"hello world\" program\n- LedMatrix: play with a 8x8 let matrix, driven by a MAX7219 IC. \n- OLed: play with a SSD1351 OLed display, driven by a 4-wire SPI protocol.\n- Serial: access the included USB-virtual UART pins\n- LedTerminal: display scrolling messages on the LED matrix, obtained from the USB virtual UART\n- FOMU: simple examples for the \"FPGA in a USB dongle\", including the FrankenVGA experiment !\n- ULX3S HDMI: simple self-contained heavily commented HDMI example."
        },
        {
          "name": "Tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}