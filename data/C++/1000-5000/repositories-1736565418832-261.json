{
  "metadata": {
    "timestamp": 1736565418832,
    "page": 261,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ctubio/Krypto-trading-bot",
      "stars": 3438,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.076171875,
          "content": "/*\n!/doc\n!/etc\n!/src\n!/test\n!/COPYING\n!/LICENSE\n!/Makefile\n!/README.md\n!/.git*"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.052734375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2017 Carles Tubio\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.8037109375,
          "content": "Internet Systems Consortium (ISC) license\n=========================================\n\nCopyright (c) `2015`, `Michael Grosner`\n\nPermission to use, copy, modify, and/or distribute this software for any purpose\nwith or without fee is hereby granted, provided that the above copyright notice\nand this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\nTORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\nTHIS SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 17.2802734375,
          "content": "K         ?= K.sh\nMAJOR      = 0\nMINOR      = 7\nPATCH      = 0\nBUILD      = 55\n\nOBLIGATORY = DISCLAIMER: This is strict non-violent software: \\n$\\\n             if you hurt other living creatures, please stop; \\n$\\\n             otherwise remove all copies of the software now.\n\nPERMISSIVE = This is free software: the UI and quoting engine are open source, \\n$\\\n             feel free to hack both as you need.                               \\n$\\\n             This is non-free software: built-in gateway exchange integrations \\n$\\\n             are licensed by/under the law of my grandma (since last century), \\n$\\\n             feel free to crack all as you need.\n\nSOURCE    := $(filter-out trading-bot,$(notdir $(wildcard src/bin/*))) trading-bot\nCARCH      = x86_64-linux-gnu        \\\n             arm-linux-gnueabihf     \\\n             aarch64-linux-gnu       \\\n             x86_64-apple-darwin23.5 \\\n             x86_64-w64-mingw32\n\nCHOST     ?= $(or $(findstring $(shell test -n \"`command -v g++`\" && g++ -dumpmachine), \\\n                $(CARCH)),$(subst build-,,$(firstword $(wildcard build-*))))\n\nKHOST     := $(shell echo $(CHOST)                               \\\n               | sed 's/-\\([a-z_0-9]*\\)-\\(linux\\)$$/-\\2-\\1/'     \\\n               | sed 's/\\([a-z_0-9]*\\)-\\([a-z_0-9]*\\)-.*/\\2-\\1/' \\\n               | sed 's/^w64/win64/'                             )\nKBUILD    := build-$(KHOST)\nKHOME     := $(if ${SYSTEMROOT},$(word 1,$(subst :, ,${SYSTEMROOT})):/,$(if \\\n               $(findstring $(CHOST),$(lastword $(CARCH))),C:/,/var/lib/))K\n\nERR        = *** K require g++ v12 or greater, but it was not found.\nHINT      := consider a symlink at /usr/bin/$(CHOST)-g++ pointing to your g++ executable\nTPUT       = $(if $(shell echo $${TERM}),$(shell tput $(1)))\nSTEP       = $(call TPUT,setaf 2)$(call TPUT,setab 0)Building $(1)..$(call TPUT,sgr0)\nSUDO       = $(shell test -n \"`command -v sudo`\" && echo sudo)\n\nKARGS     := -std=c++23 -O3 -pthread                     \\\n  -D'K_CHOST=\"$(KHOST)\"' -D'K_SOURCE=\"K-$(KSRC)\"'        \\\n  -D'K_BUILD=\"v$(MAJOR).$(MINOR).$(PATCH)+$(BUILD)\"'     \\\n  -D'K_STAMP=\"$(shell date \"+%Y-%m-%d %H:%M:%S\")\"'       \\\n  -D'K_HOME=\"$(KHOME)\"' -D'K_HEAD=\"$(shell               \\\n    git rev-parse HEAD 2>/dev/null || echo HEAD          \\\n  )\"' -I$(KBUILD)/include                                \\\n  $(addprefix $(KBUILD)/lib/,                            \\\n    K-$(KHOST).a                                         \\\n    libcurl.a libssl.a libcrypto.a libz.a libsqlite3.a   \\\n    cacert_embed.o                                       \\\n  )                                                      \\\n  $(wildcard $(addprefix $(KBUILD)/lib/,                 \\\n    K-$(KSRC)-client.o                                   \\\n    libuv.a                                              \\\n  ))                                                     \\\n  $(addprefix -include , $(realpath                      \\\n     $(addprefix src/bin/$(KSRC)/$(KSRC).,               \\\n      $(addsuffix .S, disk)                              \\\n      $(addsuffix .h, ansi)                              \\\n    )                                                    \\\n    $(addprefix src/lib/Krypto.ninja-,                   \\\n      $(addsuffix .S, disk)                              \\\n      $(addsuffix .h, lang data apis bots)               \\\n  )))                                                    \\\n  -D'DEBUG_FRAMEWORK=\"Krypto.ninja-test.h\"'              \\\n  -D'DEBUG_SCENARIOS=<$(or                               \\\n    $(realpath src/bin/$(KSRC)/$(KSRC).test.h),          \\\n    /dev/null                                            \\\n  )>'                                                    \\\n  -D'using_Makefile(x)=<$(abspath                        \\\n    src/bin/$(KSRC)                                      \\\n  )/using_\\#\\#x>'                                        \\\n  -D'using_data=$(KSRC).data.h'                          \\\n  -D'using_main=$(KSRC).main.h'                          \\\n-D'OBLIGATORY_analpaper_SOFTWARE_LICENSE=\"$(OBLIGATORY)\"'\\\n-D'PERMISSIVE_analpaper_SOFTWARE_LICENSE=\"$(PERMISSIVE)\"'\n\nall K: $(SOURCE)\n\nhlep hepl help:\n\t#                                                  #\n\t# Available commands inside K top level directory: #\n\t#  make help         - show this help              #\n\t#                                                  #\n\t#  make              - compile K sources           #\n\t#  make K            - compile K sources           #\n\t#  KALL=1 make K     - compile K sources           #\n\t#  make +portfolios  - compile K sources           #\n\t#  make hello-world  - compile K sources           #\n\t#  make scaling-bot  - compile K sources           #\n\t#  make stable--bot  - compile K sources           #\n\t#  make trading-bot  - compile K sources           #\n\t#                                                  #\n\t#  make lib          - compile K dependencies      #\n\t#  KALL=1 make lib   - compile K dependencies      #\n\t#  make packages     - provide K dependencies      #\n\t#  make install      - install K application       #\n\t#  make docker       - install K application       #\n\t#  make reinstall    - upgrade K application       #\n\t#  make doc          - compile K documentation     #\n\t#  make test         - run tests                   #\n\t#  make test-c       - run static tests            #\n\t#                                                  #\n\t#  make list         - show K instances            #\n\t#  make start        - start K instance            #\n\t#  make startall     - start K instances           #\n\t#  make stop         - stop K instance             #\n\t#  make stopall      - stop K instances            #\n\t#  make restart      - restart K instance          #\n\t#  make restartall   - restart K instances         #\n\t#                                                  #\n\t#  make diff         - show commits and versions   #\n\t#  make changelog    - show commits                #\n\t#  make upgrade      - show commits and reinstall  #\n\t#                                                  #\n\t#  make download     - download K src precompiled  #\n\t#  make clean        - remove external src files   #\n\t#  KALL=1 make clean - remove external src files   #\n\t#  make uninstall    - remove /usr/local/bin/K-*   #\n\t#                                                  #\n\ndoc test:\n\t@$(MAKE) -sC $@ KHOME=$(KHOME)\n\nclean check lib:\nifdef KALL\n\tunset KALL $(foreach chost,$(CARCH),&& $(MAKE) $@ CHOST=$(chost))\nelse\n\t$(if $(shell ver=\"`$(CHOST)-g++ -dumpversion | cut -d'-' -f1`\" && test $${ver%%.*} -lt 12 && echo 1),$(warning $(ERR));$(error $(HINT)))\n\t@$(MAKE) -C src/lib $@ CHOST=$(CHOST) KHOST=$(KHOST) KHOME=$(KHOME)\nendif\n\n$(SOURCE):\n\t$(info $(call STEP,$@))\n\t$(MAKE) $(shell ! test -d src/bin/$@/$@.client || echo client) src KSRC=$@\n\nclient: src/bin/$(KSRC)/$(KSRC).client\n\t$(info $(call STEP,$(KSRC) $@))\n\t$(MAKE) -C src/lib/Krypto.ninja-client KHOME=$(KHOME) KCLIENT=$(realpath $<)\n\t$(foreach chost,$(CARCH), \\\n\t  build=build-$(shell echo $(chost) | sed 's/-\\([a-z_0-9]*\\)-\\(linux\\)$$/-\\2-\\1/' | sed 's/\\([a-z_0-9]*\\)-\\([a-z_0-9]*\\)-.*/\\2-\\1/' | sed 's/^w64/win64/') \\\n\t  && ! test -d $${build} || (rm -rf $${build}/var/client && cp -R $(KHOME)/client $${build}/var/client \\\n\t  && $(MAKE) client.o CHOST=$(chost) chost=$(shell test -n \"`command -v $(chost)-g++`\" && echo $(chost)- || :) \\\n\t  && rm -rf $${build}/var/client) \\\n\t;)\n\trm -rf $(KHOME)/client\n\nclient.o: src/bin/$(KSRC)/$(KSRC).disk.S\n\t$(chost)g++ -Wa,-I,$(KBUILD)/var/client,-I,src/lib/Krypto.ninja-client \\\n\t  -include $^ -c src/lib/Krypto.ninja-disk.S -o $(KBUILD)/lib/K-$(KSRC)-$@\n\nsrc: src/lib/Krypto.ninja-main.cxx src/bin/$(KSRC)/$(KSRC).main.h\nifdef KALL\n\tunset KALL $(foreach chost,$(CARCH),&& $(MAKE) $@ CHOST=$(chost))\nelse\n\t$(info $(call STEP,$(KSRC) $@ $(CHOST)))\n\t$(if $(shell ver=\"`$(CHOST)-g++ -dumpversion | cut -d'-' -f1`\" && test $${ver%%.*} -lt 12 && echo 1),$(warning $(ERR));$(error $(HINT)))\n\t@$(CHOST)-g++ --version\n\t@mkdir -p $(KBUILD)/bin\n\t$(MAKE) $(if $(findstring darwin,$(CHOST)),Darwin,$(if $(findstring mingw32,$(CHOST)),Win32,$(shell uname -s))) CHOST=$(CHOST)\n\t@chmod +x $(KBUILD)/bin/K-$(KSRC)*\n\t@$(if $(findstring $(CHOST),$(firstword $(CARCH))),$(MAKE) system_install -s)\nendif\n\nLinux: src/lib/Krypto.ninja-main.cxx src/bin/$(KSRC)/$(KSRC).main.h\nifdef GITHUB_ACTIONS\n\t@unset GITHUB_ACTIONS && $(MAKE) KCOV=\"--coverage\" $@\nelse ifdef KUNITS\n\t@unset KUNITS && $(MAKE) KTEST=\"$(KCOV) -DCATCH_CONFIG_FAST_COMPILE test/unit_testing_framework.cxx\" $@\nelse ifndef KTEST\n\t@$(MAKE) KTEST=\"-DNDEBUG\" $@\nelse\n\t$(CHOST)-g++ -s $(KTEST) -o $(KBUILD)/bin/K-$(KSRC) \\\n\t  -static-libstdc++ -static-libgcc -rdynamic        \\\n\t  $< $(KARGS) -z execstack -ldl -Wall -Wextra -Wno-psabi\nendif\n\nDarwin: src/lib/Krypto.ninja-main.cxx src/bin/$(KSRC)/$(KSRC).main.h\n\t$(CHOST)-g++ -s -DNDEBUG -o $(KBUILD)/bin/K-$(KSRC) -fvisibility=hidden -fvisibility-inlines-hidden \\\n\t  -msse4.1 -maes -mpclmul -mmacosx-version-min=10.13 -nostartfiles -rdynamic                        \\\n\t  $< $(KARGS) -ldl -framework SystemConfiguration -framework CoreFoundation\n\nWin32: src/lib/Krypto.ninja-main.cxx src/bin/$(KSRC)/$(KSRC).main.h\n\t$(CHOST)-g++-posix -s -DNDEBUG -o $(KBUILD)/bin/K-$(KSRC).exe   \\\n\t  -DCURL_STATICLIB -DSIGUSR1=SIGABRT -DSIGPIPE=SIGABRT          \\\n\t  $< $(KARGS) -static -lstdc++ -lgcc -lole32 -lbcrypt -lcrypt32 \\\n\t   -lpsapi -luserenv -liphlpapi -lwldap32 -lws2_32 -ldbghelp\n\ndownload:\n\tcurl -L https://github.com/ctubio/Krypto-trading-bot/releases/download/$(MAJOR).$(MINOR).x/K-$(MAJOR).$(MINOR).$(PATCH).$(BUILD)-$(KHOST).tar.gz | tar xz\n\t@$(MAKE) system_install -s\n\t@test -n \"`ls *.sh 2>/dev/null`\" || (cp etc/K.sh.dist K.sh && chmod +x K.sh && echo && echo NEW CONFIG FILE created at: && LS_COLORS=\"ex=40;92\" CLICOLOR=\"Yes\" ls $(shell ls --color > /dev/null 2>&1 && echo --color) -lah K.sh && echo)\n\npackages:\n\t@test -n \"`command -v apt-get`\" && sudo apt-get -y install g++ build-essential automake autoconf libtool libxml2 libxml2-dev zlib1g-dev python curl gzip screen doxygen graphviz \\\n\t|| (test -n \"`command -v yum`\" && sudo yum -y install gcc-c++ automake autoconf libtool libxml2 libxml2-devel python curl gzip screen) \\\n\t|| (test -n \"`command -v brew`\" && (xcode-select --install || :) && (brew install automake autoconf libxml2 zlib python curl gzip screen proctools doxygen graphviz || brew upgrade || :)) \\\n\t|| (test -n \"`command -v pacman`\" && $(SUDO) pacman --noconfirm -S --needed base-devel libxml2 zlib curl python gzip)\n\nuninstall:\n\t@$(foreach bin,$(addprefix /usr/local/bin/,$(notdir $(wildcard $(KBUILD)/bin/K-*))), $(SUDO) rm -v $(bin);)\n\nsystem_install:\n\t$(info Checking if sudo           is allowed at /usr/local/bin.. $(shell $(SUDO) mkdir -p /usr/local/bin && $(SUDO) ls -ld /usr/local/bin > /dev/null 2>&1 && echo OK || echo ERROR))\n\t$(info Checking if /usr/local/bin is already in your PATH..      $(if $(shell echo $$PATH | grep /usr/local/bin),OK))\n\t$(if $(shell echo $$PATH | grep /usr/local/bin),,$(info $(subst ..,,$(subst Building ,,$(call STEP,Warning! you MUST add /usr/local/bin to your PATH!)))))\n\t$(info )\n\t$(info List of installed K binaries:)\n\t@$(SUDO) cp -f $(wildcard $(KBUILD)/bin/K-$(KSRC)*) /usr/local/bin\n\t@LS_COLORS=\"ex=40;92\" CLICOLOR=\"Yes\" ls $(shell ls --color > /dev/null 2>&1 && echo --color) -lah $(addprefix /usr/local/bin/,$(notdir $(wildcard $(KBUILD)/bin/K-$(KSRC)*)))\n\t@echo\n\t@$(SUDO) mkdir -p $(KHOME)\n\t@$(SUDO) chown $(shell id -u) $(KHOME)\n\ninstall:\n\t@seq `expr $${COLUMNS:-21} / 2` | sed 's/.*/=/' | xargs echo                                                             \\\n\t&& echo \" _  __\"                                                                                                         \\\n\t&& echo \"| |/ /  v$(MAJOR).$(MINOR).$(PATCH)+$(BUILD)\"                                                                   \\\n\t&& echo \"| ' /\" && echo \"| . \\\\   Select your (beloved) architecture\"                                                    \\\n\t&& echo \"|_|\\\\_\\\\  to download pre-compiled binaries:\" && echo                                                           \\\n\t&& echo $(CARCH) | tr ' ' \"\\n\" | cat -n && echo && echo \"(Hint! uname says \\\"`uname -sm`\\\")\" && echo                     \\\n\t&& read -p \"[$(shell seq -s \\\\ `echo $(CARCH) | wc -w`)]: \" chost && (test -n \"`echo $(CARCH) | cut -d ' ' -f$${chost}`\" \\\n\t&& ($(MAKE) download CHOST=`echo $(CARCH) | cut -d ' ' -f$${chost}`) || (echo && echo Unknown option selected.. abort.))\n\ndocker: download\n\t@sed -i \"/Usage/,+$(shell expr `cat K.sh | wc -l` - 16)d\" K.sh\n\nreinstall:\n\t@test -d .git && ((test -n \"`git diff`\" && (echo && echo !!Local changes will be lost!! press CTRL-C to abort. && echo && sleep 5) || :) \\\n\t&& git fetch && git merge FETCH_HEAD || (git reset FETCH_HEAD && git checkout .)) || curl -O krypto.ninja/Makefile\n\t@$(MAKE) install\n\t@echo && echo ..done! Please restart any running instance.\n\nscreen-help:\n\t$(if $(shell test -z \"`command -v screen`\" && echo 1),$(warning Please install screen using the package manager of your system.);$(error screen command not found))\n\nlist: screen-help\n\t@screen -list || :\n\nrestartall:\n\t@$(MAKE) stopall -s\n\t@sleep 3\n\t@$(MAKE) startall -s\n\t@$(MAKE) list -s\n\nstopall:\n\tls -1 *.sh | cut -d / -f2 | cut -d \\* -f1 | grep -v ^_ | xargs -I % $(MAKE) K=% stop -s\n\nstartall:\n\tls -1 *.sh | cut -d / -f2 | cut -d \\* -f1 | grep -v ^_ | xargs -I % sh -c 'sleep 2;$(MAKE) K=% start -s'\n\t@$(MAKE) list -s\n\nrestart:\n\t@$(MAKE) stop -s\n\t@sleep 3\n\t@$(MAKE) start -s\n\t@$(MAKE) list -s\n\nstop: screen-help\n\t@screen -XS $(K) quit && echo STOP $(K) DONE || :\n\nstart: screen-help\n\t@test -n \"`screen -list | grep \"\\.$(K)\t(\"`\"         \\\n\t&& (echo $(K) is already running.. && screen -list)  \\\n\t|| (screen -dmS $(K) ./$(K) && echo START $(K) DONE)\n\nscreen: screen-help\n\t@test -n \"`screen -list | grep \"\\.$(K)\t(\"`\" && (    \\\n\techo Detach screen hotkey: holding CTRL hit A then D \\\n\t&& sleep 2 && screen -r $(K)) || screen -list || :\n\ndiff: .git\n\t@_() { echo $$2 $$3 version: `git rev-parse $$1`; }; git remote update && _ @ Local running && _ @{u} Latest remote\n\t@$(MAKE) changelog -s\n\nupgrade: .git diff\n\t@_() { git rev-parse $$1; }; test `_ @` != `_ @{u}` && $(MAKE) reinstall || :\n\nchangelog: .git\n\t@_() { echo `git rev-parse $$1`; }; echo && git --no-pager log --graph --oneline @..@{u} && test `_ @` != `_ @{u}` || echo No need to upgrade, both versions are equal.\n\ntest-c:\nifndef KSRC\n\t@$(foreach src,$(SOURCE),$(MAKE) -s $@ KSRC=$(src);)\nelse\n\t@pvs-studio-analyzer credentials PVS-Studio Free FREE-FREE-FREE-FREE > /dev/null 2>&1\n\t@pvs-studio-analyzer analyze -e src/bin/$(KSRC)/$(KSRC).test.h -e src/lib/Krypto.ninja-test.h -e $(KBUILD)/include --source-file test/static_code_analysis.cxx --cl-params $(KARGS) test/static_code_analysis.cxx 2> /dev/null && \\\n\t  (echo $(KSRC) `plog-converter -a GA:1,2 -t tasklist -o report.tasks PVS-Studio.log | tail -n+8 | sed '/Total messages/d'` && cat report.tasks | sed '/Help: The documentation/d' && rm report.tasks) || :\n\t-@egrep ₿     src test -lR | xargs -r sed -i 's/₿/u20BF/g'\n\t-@clang-tidy -header-filter=$(realpath src) -checks='modernize-*, -modernize-use-trailing-return-type, -modernize-use-nodiscard, -clang-diagnostic-unknown-warning-option, -modernize-avoid-c-arrays, -modernize-return-braced-init-list' test/static_code_analysis.cxx -- $(subst ++23,++20,$(KARGS)) 2> /dev/null\n\t-@egrep u20BF src test -lR | xargs -r sed -i 's/u20BF/₿/g'\n\t@rm -f PVS-Studio.log > /dev/null 2>&1\nendif\n\npush:\n\t@date=`date` && (git diff || :) && git status && read -p \"KMOD: \" KMOD \\\n\t&& git add . && git commit -S -m \"$${KMOD}\"                            \\\n\t&& ((KALL=1 $(MAKE) K release && git push) || git reset HEAD^1)        \\\n\t&& echo \"\\007\" && echo $${date} && date\n\nMAJOR:\n\t@sed -i \"s/^\\(MAJOR *=\\).*$$/\\1 $(shell expr $(MAJOR) + 1)/\" Makefile\n\t@sed -i \"s/^\\(MINOR *=\\).*$$/\\1 0/\"                          Makefile\n\t@sed -i \"s/^\\(PATCH *=\\).*$$/\\1 0/\"                          Makefile\n\t@sed -i \"s/^\\(BUILD *=\\).*$$/\\1 0/\"                          Makefile\n\t@$(MAKE) push\n\nMINOR:\n\t@sed -i \"s/^\\(MINOR *=\\).*$$/\\1 $(shell expr $(MINOR) + 1)/\" Makefile\n\t@sed -i \"s/^\\(PATCH *=\\).*$$/\\1 0/\"                          Makefile\n\t@sed -i \"s/^\\(BUILD *=\\).*$$/\\1 0/\"                          Makefile\n\t@$(MAKE) push\n\nPATCH:\n\t@sed -i \"s/^\\(PATCH *=\\).*$$/\\1 $(shell expr $(PATCH) + 1)/\" Makefile\n\t@sed -i \"s/^\\(BUILD *=\\).*$$/\\1 0/\"                          Makefile\n\t@$(MAKE) push\n\nBUILD:\n\t@sed -i \"s/^\\(BUILD *=\\).*$$/\\1 $(shell expr $(BUILD) + 1)/\" Makefile\n\t@$(MAKE) push\n\nrelease:\nifdef KALL\n\tunset KALL $(foreach chost,$(CARCH),&& $(MAKE) $@ CHOST=$(chost))\nelse ifndef KTARGZ\n\t@$(MAKE) KTARGZ=\"K-$(MAJOR).$(MINOR).$(PATCH).$(BUILD)-$(KHOST).tar.gz\" $@\nelse\n\t@tar -cvzf $(KTARGZ) $(KBUILD)/bin/K-* $(KBUILD)/lib/K-* LICENSE COPYING README.md Makefile doc etc test src                  \\\n\t&& curl -s -n -H \"Content-Type:application/octet-stream\" -H \"Authorization: token ${KRELEASE}\"                                \\\n\t--data-binary \"@$(PWD)/$(KTARGZ)\" \"https://uploads.github.com/repos/ctubio/Krypto-trading-bot/releases/$(shell curl -s        \\\n\thttps://api.github.com/repos/ctubio/Krypto-trading-bot/releases/latest | grep id | head -n1 | cut -d ' ' -f4 | cut -d ',' -f1 \\\n\t)/assets?name=$(KTARGZ)\" && rm -v $(KTARGZ)\nendif\n\nmd5: src\n\tfind src/lib -type f -exec md5sum \"{}\" + > src/lib.md5\n\nasandwich:\n\t@test \"`whoami`\" = \"root\" && echo OK || echo make it yourself!\n\n.PHONY: all K $(SOURCE) hlep hepl help doc test src client client.o clean check lib download screen-help list screen start stop restart startall stopall restartall packages system_install uninstall install docker reinstall diff upgrade changelog test-c push MAJOR MINOR PATCH BUILD release md5 asandwich\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 27.0556640625,
          "content": "<img align=\"left\" src=\"https://user-images.githubusercontent.com/1634027/36237231-e611590e-11fa-11e8-8486-6675078501dc.jpg\" /><p align=\"right\">self reminder:<br><b>patience is the mother of science</b></p><br><a href=\"http://ciutatrefugi.barcelona/en/welcome-barcelona\">\\*\\*\\* REFUGEES WELCOME! \\*\\*\\*</a><br/>&thinsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"http://missingmigrants.iom.int/\">\\*\\*\\* FATAL ROUTES? \\*\\*\\*</a>\n<br clear=\"left\">\n\n[![Release](https://img.shields.io/github/release/ctubio/Krypto-trading-bot.svg)](https://github.com/ctubio/Krypto-trading-bot/releases)\n[![Platform](https://img.shields.io/badge/platform-unix--like-111111.svg)](https://www.gnu.org/)\n[![g0t0 Counter](https://tinyurl.com/g0t0search)](https://tinyurl.com/g0t0docs)\n[![Code Size](https://img.shields.io/github/languages/code-size/ctubio/Krypto-trading-bot.svg)](https://github.com/ctubio/Krypto-trading-bot)\n[![Software License](https://img.shields.io/badge/license-ISC-551a8b.svg)](https://raw.githubusercontent.com/ctubio/Krypto-trading-bot/master/LICENSE)\n[![Software License](https://img.shields.io/badge/license-MIT-551a8b.svg)](https://raw.githubusercontent.com/ctubio/Krypto-trading-bot/master/COPYING)\n\n[`K`](https://github.com/ctubio/Krypto-trading-bot) is a family of (very customizable) very low latency [market making](https://github.com/ctubio/Krypto-trading-bot/blob/master/doc/MANUAL.md#what-is-market-making) trading bots with a fully featured [web interface](https://github.com/ctubio/Krypto-trading-bot#web-ui).<br />It can place or cancel orders on [compatible exchanges](https://github.com/ctubio/Krypto-trading-bot#compatible-exchanges) in less than a few milliseconds per order on a decent machine.\n\nIf you don't want to configure or hardcode your own trading strategies in your own machine,<br />\nyou can fund liquidity pools of automated market makers at [tinyman.org](https://tinyman.org/) (or at any other defi out there),<br />just remember:\n- <b><ins>never write on any defi website your private keys</ins></b> (you have to sign transactions, not to share your wallet keys)\n- <b><ins>never tell anyone on any chat your private keys</ins></b> (if you have questions, use a public forum and reject impostors)\n\n### <img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f4be.png\" height=\"64\" width=\"64\"  align=\"middle\" /> Latest version at https://github.com/ctubio/Krypto-trading-bot <img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f51e.png\" height=\"64\" width=\"64\" align=\"middle\" /> <img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f4b8.png\" height=\"64\" width=\"64\" align=\"middle\" />\n\n[![Build Status](https://github.com/ctubio/Krypto-trading-bot/workflows/test/badge.svg)](https://github.com/ctubio/Krypto-trading-bot/actions)\n[![Coverage Status](https://img.shields.io/coveralls/ctubio/Krypto-trading-bot/master.svg)](https://coveralls.io/r/ctubio/Krypto-trading-bot?branch=master)\n[![Quality Status](https://img.shields.io/badge/review-clang--tidy%20+%20pvs-4cc61e.svg)](https://www.codacy.com/gh/ctubio/Krypto-trading-bot/dashboard)\n[![Open Issues](https://img.shields.io/github/issues/ctubio/Krypto-trading-bot.svg)](https://github.com/ctubio/Krypto-trading-bot/issues)\n[![Last Commit](https://img.shields.io/github/last-commit/ctubio/Krypto-trading-bot.svg)](https://github.com/ctubio/Krypto-trading-bot)\n[![Downloads Last Releases](https://img.shields.io/github/downloads/ctubio/Krypto-trading-bot/total.svg?label=downloads%20last%20releases)](https://github.com/ctubio/Krypto-trading-bot)\n\nOur bots run on unix-like systems. Persistence is achieved through a built-in server-less SQLite C++ interface.<br>Data transfers are directly done from your machine to the exchange using the latest CURL and OpenSSL versions.<br>Installation in a dedicated [Debian](https://cdimage.debian.org/cdimage/release/current/), [Raspberry](https://www.raspberrypi.com/software/), [Red Hat](https://developers.redhat.com/products/rhel/download), [CentOS](https://www.centos.org/download/) or macOS instance without Docker is recommended.\n\nThe web UI is compatible with most web browsers/resolutions, but Brave or Firefox at 1600px are recommended.<br />Doesn't require configuration of any web server (unless installed behind your own reverse proxy).\n\n<details><summary><b>K-trading-bot</b> <sup>(web UI + CLI)</sup></summary>\nto control a fully configurable high frequency trading engine, with all features suggested by the community:<br />\n\n![trading-bot UI Preview](https://user-images.githubusercontent.com/1634027/44740469-d5c7ff00-aafa-11e8-9252-73b9c1283adb.png)\n</details>\n\n<details><summary><b>K-+portfolios</b> <sup>(web UI + CLI)</sup></summary>\nto show all balances from one exchange, with buttons to create, edit or cancel orders and links to go to markets:<br />\n\n![+portfolios UI Preview](https://github.com/user-attachments/assets/e0e3ce7d-3388-45a9-a559-4ba239a9e880)\n</details>\n\n<details><summary><b>K-hello-world</b> <sup>(CLI)</sup></summary>\nto print the current value of a given currency to stdout:<br />\n\n<pre>\n _________________________________________\n/ Hello, WORLD!                           \\\n|                                         |\n\\ pssst.. 1.00000000 BTC = 56683.49 EUR.  /\n -----------------------------------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n</pre>\n</details>\n\n<details><summary><b>K-scaling-bot, K-stable--bot</b> <sup>(CLI)</sup></summary>\nto easy mod and start developing a new custom bot.\n</details>\n\n### Compatible Exchanges\n\nAll currency pairs are supported (use `--list` argument to see all currently tradable pairs on a given exchange).\n\n<table><tbody><tr><td></td><td align=\"center\"><b>under maintenance</b></td><td colspan=\"2\" align=\"center\" nowrap><b>under development or abandoned</b></td></tr><tr><td align=\"center\"><b>Spot Trading</b></td><td nowrap><a href=\"https://www.coinbase.com/en-es/advanced-trade\">Coinbase</a> <sub>(<a href=\"https://help.coinbase.com/en/coinbase/trading-and-funding/advanced-trade/advanced-trade-fees\">fees</a>)</sub><br> &#10239; <i>REST + 2 WebSockets</i><br><br><a href=\"https://www.binance.com/\">Binance</a> <sub>(<a href=\"https://www.binance.com/en/fee/schedule\">fees</a>)</sub><br><a href=\"https://www.binance.us/\">Binance.US</a> <sub>(<a href=\"https://www.binance.us/fees\">fees</a>)</sub><br> &#10239; <i>REST + 1 WebSocket</i><br><br><a href=\"https://www.bitmex.com/\">BitMEX</a> <sub>(<a href=\"https://www.bitmex.com/wallet/fees/derivatives\">fees</a>)</sub><br> &#10239; <i>REST + 1 WebSocket</i></td><td nowrap><a href=\"https://www.kraken.com/\">Kraken</a> <sub>(<a href=\"https://www.kraken.com/features/fee-schedule\">fees</a>)</sub><br> &#10239; <i>REST + 2 WebSockets</i><br><br><a href=\"https://www.kucoin.com/\">KuCoin</a> <sub>(<a href=\"https://www.kucoin.com/vip/level\">fees</a>)</sub><br> &#10239; <i>REST + 1 WebSocket</i><br><br><a href=\"https://www.bitfinex.com/\">Bitfinex</a> <sub>(<a href=\"https://www.bitfinex.com/fees\">fees</a>)</sub><br><a href=\"https://www.ethfinex.com/\">Ethfinex</a> <sub>(<a href=\"https://www.ethfinex.com/fees\">fees</a>)</sub><br> &#10239; <i>REST + 1 WebSocket</i></td><td nowrap><a href=\"https://www.gate.io/\">Gate.io</a> <sub>(<a href=\"https://www.gate.io/fee\">fees</a>)</sub><br> &#10239; <i>REST + 1 WebSocket</i><br><br><a href=\"https://hitbtc.com/\">HitBTC</a> <sub>(<a href=\"https://hitbtc.com/fee-tier\">fees</a>)</sub><br><a href=\"https://bequant.io/\">Bequant</a> <sub>(<a href=\"https://bequant.io/fees-and-limits\">fees</a>)</sub><br> &#10239; <i>REST + 2 WebSockets</i><br><br><a href=\"https://www.poloniex.com/\">Poloniex</a> <sub>(<a href=\"https://poloniex.com/fees/\">fees</a>)</sub><br> &#10239; <i>REST + 1 WebSocket</i></td></tr><tr><td align=\"center\"><b>Margin Trading</b></td><td nowrap><i>none</i></td><td colspan=\"2\" nowrap><i>none</i></td></tr></tbody></table>\n\nIf you ask me, [<img height=\"20px\" src=\"https://github.com/user-attachments/assets/e84f2708-d29a-423d-a702-42c87a8ffe5b\">](https://advanced.coinbase.com/join/KAME9XG) is the best and most secure by far, so here is my [referral link](https://advanced.coinbase.com/join/KAME9XG) for both of us to enjoy.\n\nIn case you are looking for referral links to other exchanges, feel free to post a [new issue](https://github.com/ctubio/Krypto-trading-bot/issues/new?title=Referral%20link%20for%20%5Bexchange%5D) asking to other active users.\n\n## README\n- Documentation\n  - [README](#readme)\n  - [MANUAL](https://github.com/ctubio/Krypto-trading-bot/blob/master/doc/MANUAL.md)\n- Installation\n  - [Docker Installation](#docker-installation)\n  - [Windows Installation](#windows-installation)\n  - [Manual GIT Installation](#manual-git-installation)\n  - [Manual ZIP Installation](#manual-zip-installation)\n  - [Configuration After Manual Installation](#configuration-after-manual-installation)\n  - [Upgrade to the latest commit](#upgrade-to-the-latest-commit)\n  - [Multiple instances party time](#multiple-instances-party-time)\n- Information\n  - [Compatible Exchanges](#compatible-exchanges)\n  - [Application Usage](#application-usage)\n  - [Web UI](#web-ui)\n  - [Databases](#databases)\n  - [Charts](#charts)\n  - [Cloud Hosting](#cloud-hosting)\n- Development\n  - [Build notes](#build-notes)\n  - [Changelogs](#changelog)\n- Humans and Milk Mammals\n  - [Unlock](#unlock)\n  - [Donations](#donations)\n  - [General Discussion](#general-discussion)\n  - [Very Special Thanks](#very-special-thanks-to)\n  - [Help](#help)\n  - [Issues](#issues)\n\n### Docker Installation\n\nSee [etc/Dockerfile](https://github.com/ctubio/Krypto-trading-bot/tree/master/etc#dockerfile) file.\n\n### Windows Installation\n\nBefore starting with a manual installation, ensure your target machine has Windows 7 or greater and [MSYS2](https://www.msys2.org/) installed.\n\nUse MSYS2 Terminal to install `make` (with command `pacman -S make`), then proceed as usual with the installation.\n\n### Manual GIT Installation\n\n0. Ensure you agree to install collaborative non-free software (see [Unlock](#unlock) section).\n\n1. Ensure your target machine has `git` and `make` installed.\n\n2. Download it wherever you want (feel free to customize the suggested folder name K) and execute the installer:\n```\n $ git clone ssh://git@github.com/ctubio/Krypto-trading-bot K\n $ cd K\n $ make install\n```\n\n3. Open and edit the config file `K.sh` in your favorite text editor:\n```\n $ vim K.sh\n```\n\nTo upgrade anytime see [Upgrade to the latest commit](#upgrade-to-the-latest-commit) section.\n\n### Manual ZIP Installation\n\n0. Ensure you agree to install collaborative non-free software (see [Unlock](#unlock) section).\n\n1. Ensure your target machine has `curl` and `make` installed.\n\n2. Download it wherever you want (feel free to customize the suggested folder name K) and execute the installer:\n```\n $ mkdir K\n $ cd K\n $ curl -O krypto.ninja/Makefile\n $ make install\n```\n\n3. Open and edit the config file `K.sh` in your favorite text editor:\n```\n $ vim K.sh\n```\n\nTo upgrade anytime to the latest release just run `make reinstall`.\n\n### Configuration After Manual Installation\n\nSee [etc/K.sh.dist](https://github.com/ctubio/Krypto-trading-bot/blob/master/etc/K.sh.dist) file or better your own copy of `K.sh` file located in the top level path.\n\nIt just contains a few variables with examples. The very end of the file contains the code that starts the bot.\n\nOnce your config file is ready, you can execute it to start the bot:\n```\n $ ./K.sh\n```\n\nAlternatively use `make start` to run `K.sh` in the background using [screen](https://kb.iu.edu/d/acuy) (to see the output, attach the screen with `make screen` [or run all at once with `make start screen`]).\n\nFeel free to run `make stop` or `make restart` anytime, and don't forget to [read the fucking manual](https://github.com/ctubio/Krypto-trading-bot/blob/master/doc/MANUAL.md).\n\nTroubleshooting:\n\n * If there is no wallet data on a given exchange, double-check the currency symbols with `--list` argument.\n\n Optional:\n\n * See at least once `./K.sh --help` to trade or `make help` to develop.\n\n * Use your own HTTP Basic Authentication credentials with `--user` and `--pass` arguments.\n\n * Use your own SSL certificate with `--ssl-crt` and `--ssl-key` arguments.<br>Otherwise, the insecure built-in certificate is fully featured, but you may need to authorise it in your browser.<br>If you want to generate your own certificate see [SSL for internal usage](https://www.akadia.com/services/ssh_test_certificate.html).<br>In case you really want to use plain HTTP, use `--without-ssl` argument.\n\n### Upgrade to the latest commit\n\nIf you upgrade while having any instance running in the background, you will need to manually restart it using `make restart` or `make restartall` to start using the latest version.\n\n#### Upgrade under Manual ZIP Installation:\n\nPlease run `make reinstall` to download the upgraded source and executable files.\n\n#### Upgrade under Manual GIT Installation:\n\nFeel free anytime to check if there are new upgrades with `make diff`.\n\nOnce you decide that it is time to upgrade, execute `make upgrade` (or directly `make reinstall` to skip the validation of new commits).\n\nIf you only use `git` to pull the latest source files from the remote branch, you will still need to upgrade or recompile your executable files.\n\nTo not upgrade but instead recompile your own modified source files, use `make lib K` or just `make` (see [Build notes](#build-notes)).\n\n### Multiple instances party time\n\nPlease note, an \"instance\" is in fact a `*.sh` config file; using a single machine with a single installation, you can run as many instances as `*.sh` files you have (limited by the available free RAM).\n\nYou can list the current running instances with `make list`.\n\nIf you haven't defined a config file, `make start`, `make screen`, `make stop` and `make restart` will use the default config file `K.sh`.\n\nTo run multiple instances using a collection of config files:\n\n1. Create a new config file with `cp etc/K.sh.dist X.sh && chmod +x X.sh` (use `X.sh` or any name but keep `.sh` extension).\n\n2. Edit the new config file `vim X.sh`\n\n3. Run the new instance with `./X.sh` or to run in the background, use `K=X.sh make start`. To attach to the new instance's screen, use `K=X.sh make screen`. To stop the new instance, use `K=X.sh make stop` and to restart it, use `K=X.sh make restart`. The environment variable `K` specifies the filename of the config file that you want to use.\n\n4. Open in the web browser the different pages of the ports of the different running instances, or display the UI of all instances together in a single page using the MATRYOSHKA link in the footer (that can be predefined using the optional argument `--matryoshka=URL`).\n\nAfter multiple config files are setup, to control them all together instead of one by one, the commands `make startall`, `make stopall` and `make restartall` are also available, just remember that config files with a filename starting with underscore symbol \"_\" will be skipped.\n\n### Application Usage\n\n1. Open your web browser to connect to port `3000` (or your configured port number) of the machine running K. Using `localhost` or one of the public or private IPs of your machine (if you're running on Docker, use the IP address returned by `boot2docker ip`).\n\n2. Read up on how to use K and market making in the [manual](https://github.com/ctubio/Krypto-trading-bot/blob/master/doc/MANUAL.md).\n\n3. Use the web UI to change the quoting parameters. Click the big \"BTC/USD\" button to start making markets. Click it again to stop. When the button is green, the bot is actively placing orders.\n\n### Web UI\n\nOnce `K` is up and running, visit port `3000` (or your configured port number) to access the UI (i.e. [https://localhost:3000](https://localhost:3000)). There are inputs for quoting parameters, grids to display market orders, market trades, your trades, your order history, your positions, and a big button with the currency pair you are trading. When you're ready, click that button green to begin sending out quotes. The UI uses angularjs hydrated with websockets observed with reactivexjs.\n\n### Databases\n\nEach currency pair of each exchange will use a different sqlite database file with [WAL mode](https://www.sqlite.org/wal.html) enabled.\n\nAll database files are located at `/var/lib/K/db/K-*.db*`, outside the download folder to survive wild `rm -rf path/to/K` or reinstalls.\n\nYou can copy any group of `*.db*` files to another machine when migrating or as a backup.\n\nIf a database does not exist, the application will create it on boot; otherwise, it will use the existing one.\n\nTo explore each database you can use https://github.com/sqlitebrowser/sqlitebrowser or a similar tool.\n\nTo set a different database filename or to set an [in-memory database](https://sqlite.org/inmemorydb.html), use `--database=FILE` argument (see `--help`).\n\nEven if using an in-memory database, the quoting parameters are always loaded from and saved into the file database.\n\n### Charts\n\nThe metrics are not saved anywhere, it is just UI data collected with a visibility retention of `n` hours (where `n` is the value of `profit` quoting parameter), to display over time:\n\n * Market Fair Value with High and Low Prices\n * Trades Complete\n * Target Position for BTC currency (TBP)\n * Target Position for Fiat currency\n * STDEV and EWMA values for Quote Protection and APR\n * Amount available in wallet for buy\n * Amount held in open trades for buy\n * Amount available in wallet for sell\n * Amount held in open trades for sell\n * Total amount available and held at both sides in BTC currency\n * Total amount available and held at both sides in Fiat currency\n\n### Cloud Hosting\n\nIf you ask me, [<img height=\"20px\" src=\"https://user-images.githubusercontent.com/1634027/29756933-3e64c62e-8ba8-11e7-916a-3b0ae1481a52.png\">](https://www.dreamhost.com/r.cgi?475987/cloud/) is a very nice web hosting company (awesome support team, awesome servers). Feel free to use this referral link to get a discount subtracted from my referral earnings (i'm a user since 2008).\n\n### Build notes\n\nMake sure your build machine has [node](https://nodejs.org/en/download/package-manager/) installed, also ensure `make lib` provides all dependencies without errors.\n\nTo rebuild the application, see `make help` and choose a target (just `make` may be what you are looking for).\n\nTest units are executed before the application exits, only if the application was compiled with `KUNITS=1 make`.\n\nOtherwise, just `make` without the environment var `KUNITS` produces an application that simply exits on exit.\n\nA quick test runner therefore is `./K.sh --version` or the alias `make test` or all at once with `KUNITS=1 make K test`.\n\nTo pipe the output to stdout, execute the application in the foreground with `--naked` argument.\n\nFor more information consider to follow the *white rabbit*, but its dangerous to go alone, take this:\n\nc sandbox: [wandbox.org](https://wandbox.org)\n\njs sandbox: [jsfiddle.net](https://jsfiddle.net)\n\nws sandbox: [app.gosandy.io](https://app.gosandy.io/)\n\n<details><summary><a id=\"changelog\"><b>Release v0.7.x Changelog</b></a></summary>\n\nUpdated Coinbase integration to Advanced Trade API.\n\n</details>\n\n<details><summary><b>Release v0.6.x Changelog</b></summary>\n\nAdded Hello World bot, Portfolios bot, Scaling bot and Stable bot.\n\nAdded Binance, Kraken, KuCoin, Gate.io and BitMEX API.\n\n</details>\n\n<details><summary><b>Release v0.5.x Changelog</b></summary>\n\nUpdated exchange integrations as simple libcurl wrappers.\n\n</details>\n\n<details><summary><b>Release v0.4.x Changelog</b></summary>\n\nAdded main KryptoNinja class derived from all other classes and ready to be extended.\n\nAdded C++ OOP everywhere.\n\nAdded test units.\n\nAdded --interface=IP argument to bind outgoing traffic to a specific network interface.\n\nAdded Ethfinex ~~and FCoin~~ API.\n\nAdded build-in document root to stop reading files from disk.\n\nAdded build chain for win32.\n\n~~Updated OKEx websocket to binary data.~~\n\nAdded build chain for OSX v10.13.\n</details>\n\n<details><summary><b>Release v0.3.x Changelog</b></summary>\n\nUpdated HitBTC API v2.\n\nAdded ZIP installation steps for non-git-lovers.\n\nAdded HamelinRat quoting mode and Trend safety thanks to b-seite and serzhiio contributions.\n\nAdded command-line arguments.\n\nUpdated quoting engine and gateways without nodejs.\n\nAdded Makefile to replace npm scripts.\n\n~~Added PNG files as configuration files.~~\n\nAdded built-in C++ WWW Server to replace expressjs and socketio.\n\nAdded built-in SQLite C++ interface to replace external mongodb server.\n\nAdded Poloniex API.\n</details>\n\n<details><summary><b>Release v0.2.x Changelog</b></summary>\n\nUpdated application name to K because of Kira.\n\nAdded nodejs7, typescript2, angular4 and reactivexjs.\n\nAdded cleanup of bandwidth, source code, dependencies and installation steps.\n\nAdded many quoting parameters thanks to Camille92 genius suggestions.\n\nAdded support for multiple instances/config files with nested matryoshka UI.\n\nAdded npm scripts, david-dm, travis-ci, coveralls and codacy.\n\nAdded historical charts to replace grafana.\n\nAdded C++ math functions.\n\nUpdated OKCoin API (since https://www.okcoin.com/t-354.html).\n\nUpdated Bitfinex API v2.\n\nAdded Coinbase FIX API.\n\n~~Added Korbit API.~~\n\nAdded new quoting styles PingPong, Boomerang, AK-47.\n\nAdded cleanup of database records, memory usage and log recording.\n\nAdded audio notices, realtime wallet display, and grafana integration.\n\nAdded https, dark theme and new UI elements.\n\nAdded a bit of love to Kira.\n</details>\n\n<details><summary><b>Release v0.1.0 Changelog</b></summary>\n\nsee the upstream project [michaelgrosner/tribeca](https://github.com/michaelgrosner/tribeca).\n</details>\n\n### Unlock\n\nThe bot is unlocked for collaborators and contributors (feel free to make acceptable Pull Requests for already opened issues or for anything you consider useful, and let me know the BTC Payment Address for the bot that you wish to unlock in the description of the PR, and I will credit it for you).\n\nWhile locked, the orderbook will be in realtime 121 seconds, and later it will be updated only once every 121 seconds.\n\nAnonymous users can also unlock any API Key by paying 0.00121000 BTC to the address displayed on exit.\n\nOnce unlocked you may use different bots or currency pairs or reinstall on a different machine with the same unlocked API Key. However, if you want to use more than one exchange, you will need to pay again to unlock the API Key for each exchange.\n\nOtherwise if you choose to not support further development by ctubio, just keep running some old commit and do not upgrade (any commit prior to v0.3.0 was completely unlocked).\n\nPlease don't open issues asking how much % less the bot generates with `--free-version`; it is relative to your trading strategy, the market conditions, and the bot's performance.\n\n### Donations\n\nnope, this project doesn't have maintenance costs. but you can donate to your favorite developer today!<br>(or tomorrow!)\n\nor see the upstream project [michaelgrosner/tribeca](https://github.com/michaelgrosner/tribeca).\n\nor donate your time with programming or financial suggestions in the IRC channel [#krypto.ninja](https://kiwiirc.com/client/irc.libera.chat:6697/?theme=cli#krypto.ninja) at irc.libera.chat on port 6697 (SSL), or 6667 (plain); or feel free to make any question, but questions technically are not donations.\n\n### General Discussion\n\n[IRC](https://kiwiirc.com/client/irc.libera.chat:6697/?theme=cli#krypto.ninja) is awesome!\n\nBut if you dislike it.. consider to join the [discord server](https://discord.gg/jAX7GEzcWD). Or you can DM [ctubio on reddit](https://www.reddit.com/user/ctubio) privately.\n\nOtherwise, here on GitHub, just create a [new discussion](https://github.com/ctubio/Krypto-trading-bot/discussions) permanently readable by everybody.\n\n### Very Special Thanks to:\n\n- https://github.com/michaelgrosner/tribeca (https://github.com/michaelgrosner)\n- https://curl.haxx.se (https://github.com/bagder)\n- https://github.com/michaelgrosner/tribeca (https://github.com/michaelgrosner)\n- https://github.com/uNetworking (https://github.com/alexhultman)\n- https://github.com/michaelgrosner/tribeca (https://github.com/michaelgrosner)\n- https://nlohmann.github.io/json (https://github.com/nlohmann)\n- https://github.com/michaelgrosner/tribeca (https://github.com/michaelgrosner)\n- http://invisible-island.net\n- https://github.com/michaelgrosner/tribeca (https://github.com/michaelgrosner)\n- https://www.sqlite.org\n- https://github.com/michaelgrosner/tribeca (https://github.com/michaelgrosner)\n- but Most Special Thanks goes to [your mother](https://youtu.be/YDafHsyyTNk).\n\n### Help\n\nIf you need installation or usage support, please create a [new discussion](https://github.com/ctubio/Krypto-trading-bot/discussions/new).\n\n### Issues\n\nTo request new features open a [new issue](https://github.com/ctubio/Krypto-trading-bot/issues/new?title=Feature%20request) and explain your improvement as you consider.\n\nTo report errors open a [new issue](https://github.com/ctubio/Krypto-trading-bot/issues/new?title=Error%20report) only after collecting all possible relevant log messages.\n\nPull Requests are welcome, but adhere to the Contributor License Agreement:\n- Your biological and technological distinctiveness will be added to our own. Resistance is futile.\n\n### like yesterday, since 0day and ∞\n\n![bcn](https://user-images.githubusercontent.com/1634027/29495722-1d924018-85c5-11e7-8d61-d83f5716ae9e.jpg)\n\n#### every new day we sing:\n\n<p>If love is so nice, tell me why are you so sad?<br>If love is so nice, tell me, oh tell me why are you hurt so bad?<br>One Love! get ready!</p>\n<p>Now feel this drumbeat as it beats within,<br>playin' a riddim, resisting against the system:</p>\n\n - https://youtu.be/g--fsK6aLf8\n - https://youtu.be/BncXzyjdREc\n - https://youtu.be/uEqxj58g6To\n - https://youtu.be/SS9DJX8gTKk\n - https://youtu.be/vu6WXLQT5r8\n - https://youtu.be/e8ULyjcSukM\n - https://youtu.be/Rom4qWtEkMA\n - https://youtu.be/InNk4Z-BGc8\n - https://youtu.be/xPg_e_3cK-E\n - https://youtu.be/KKpcQIfIAi8\n - https://youtu.be/pZAmer0EmMQ\n - https://youtu.be/50aXt1ctmUU\n - https://youtu.be/vofff0Ei3kk\n - https://youtu.be/4Ois3zB7SJ4\n - https://youtu.be/_wGDcWD1E1A\n - https://youtu.be/VOgFZfRVaww\n - https://youtu.be/1iZdJNH3Z1o\n - https://youtu.be/_e5hvHL2WTg\n - https://youtu.be/jQhtEYfax5c\n - add your song here (please open a [new issue](https://github.com/ctubio/Krypto-trading-bot/issues/new?title=Today,%20I%20sing) to share your link)\n<p align=\"center\"><img src=\"https://user-images.githubusercontent.com/1634027/32134633-642bb47a-bbf1-11e7-809c-f2d4d57678e0.jpg\" />\n<br /><br />\nWe have already enough policemen,<br />if you like adventures choose to be a <a href=\"https://youtu.be/pT_GM35fM7I\">brave firefighter</a>.\n<br /><br /><br /><br /><br />\n<img src=\"https://user-images.githubusercontent.com/1634027/32695988-22681724-c76b-11e7-8557-7f2b15b2686b.jpg\" />\n<br /><br /><br /><br />Violence <a href=\"https://www.cnvc.org/about/purpose-of-nvc\">should not</a> be the answer to those who<br />are <a href=\"https://novact.org/en/\">asking for</a> freedom.<br /><br /><br /><br /><br />\n<img src=\"https://user-images.githubusercontent.com/1634027/29746351-7478d556-8ad7-11e7-8b27-445eefa8f960.jpg\" />\n<br /><br /><br /><br /><br />\n<a href=\"https://hits.seeyoufarm.com\"><img src=\"https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Fctubio%2FKrypto-trading-bot%2FREADME.md&count_bg=%2379C83D&title_bg=%23555555&icon=known.svg&icon_color=%2306FF18&title=page+views&edge_flat=false\"/></a></p>\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}