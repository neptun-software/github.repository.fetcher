{
  "metadata": {
    "timestamp": 1736565862962,
    "page": 814,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "strasdat/Sophus",
      "stars": 2108,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.5205078125,
          "content": "Language:        Cpp\n# BasedOnStyle:  Google\nAccessModifierOffset: -1\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlinesLeft: true\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: true\nAllowShortLoopsOnASingleLine: true\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nColumnLimit:     80\nCommentPragmas:  '^ IWYU pragma:'\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: true\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nForEachMacros:   [ foreach, Q_FOREACH, BOOST_FOREACH ]\nIncludeCategories:\n  - Regex:           '^<.*\\.h>'\n    Priority:        1\n  - Regex:           '^<.*'\n    Priority:        2\n  - Regex:           '.*'\n    Priority:        3\nIndentCaseLabels: true\nIndentWidth:     2\nIndentWrappedFunctionNames: false\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: false\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\nReflowComments:  true\nSortIncludes:    true\nSpaceAfterCStyleCast: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Auto\nTabWidth:        8\nUseTab:          Never\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.052734375,
          "content": "build\nCMakeLists.txt.user\n*.pyc\n.vscode/settings.json\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.2783203125,
          "content": "repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.1.0\n    hooks:\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n        exclude: (thirdparty/.*)|(SOPHUS_VERSION)|(.txt)$\n      - id: check-yaml\n        args: [\"--unsafe\"]\n      - id: check-json\n  - repo: https://github.com/pre-commit/mirrors-clang-format\n    rev: v14.0.0\n    hooks:\n      - id: clang-format\n        exclude: (sympy/.*)\n        types_or: [file]\n        files: .*(\\.hpp|\\.cpp|\\.h\\.glsl|\\.proto)$\n  - repo: https://github.com/pre-commit/mirrors-prettier\n    rev: v2.7.1\n    hooks:\n      - id: prettier\n        files: ^.*\\/ts\\/.*\\.(css|htm|html|js|json|jsx|less|md|scss|toml|ts|tsx|xml|yaml|yml)$\n  - repo: https://github.com/cheshirekow/cmake-format-precommit\n    rev: v0.6.10\n    hooks:\n      - id: cmake-format\n      # lint does not pass\n      #- id: cmake-lint\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    # Ruff version.\n    rev: v0.4.8\n    hooks:\n      # Run the linter.\n      - id: ruff\n        args: [ --fix ]\n        exclude: (sophus_pybind-stubs/.*)\n      # Run the formatter.\n      - id: ruff-format\n  - repo: https://github.com/codespell-project/codespell\n    rev: v2.1.0\n    hooks:\n      - id: codespell\n        args:\n          - --ignore-words-list\n          - \"te,tring,crate\"\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 5.43359375,
          "content": "cmake_minimum_required(VERSION 3.24)\n\nfile(READ \"SOPHUS_VERSION\" SOPHUS_VERSION)\nproject(Sophus VERSION ${SOPHUS_VERSION})\n\ninclude(CMakePackageConfigHelpers)\ninclude(GNUInstallDirs)\n\n# Determine if sophus is built as a subproject (using add_subdirectory) or if it\n# is the master project.\nif(NOT DEFINED SOPHUS_MASTER_PROJECT)\n  set(SOPHUS_MASTER_PROJECT OFF)\n  if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)\n    set(SOPHUS_MASTER_PROJECT ON)\n    message(STATUS \"CMake version: ${CMAKE_VERSION}\")\n  endif()\nendif()\n\noption(SOPHUS_INSTALL \"Generate the install target.\" ${SOPHUS_MASTER_PROJECT})\n\nif(SOPHUS_MASTER_PROJECT)\n  # Release by default Turn on Debug with \"-DCMAKE_BUILD_TYPE=Debug\"\n  if(NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE RelWithDebInfo)\n  endif()\n\n  set(CMAKE_CXX_STANDARD 17)\n\n  set(CMAKE_COMPILE_WARNING_AS_ERROR Off)\n\n  # Set compiler specific settings (FixMe: Should not cmake do this for us\n  # automatically?)\n  if(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n    add_compile_options(-Wall -Wextra -Wno-deprecated-register\n                        -Qunused-arguments -fcolor-diagnostics)\n  elseif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n    add_compile_options(-Wall -Wextra -Wno-deprecated-declarations\n                        -ftemplate-backtrace-limit=0 -Wno-array-bounds)\n  elseif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"MSVC\")\n    add_compile_options(/bigobj /wd4305 /wd4244 /MP)\n    add_compile_definitions(_USE_MATH_DEFINES)\n  endif()\n\n  # Add local path for finding packages, set the local version first\n  list(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake_modules\")\nendif()\n\n# Find public dependencies if targets are not yet defined. (Targets might be for\n# example defined by a parent project including Sophus via `add_subdirectory`.)\n\nif(NOT TARGET Eigen3::Eigen)\n  find_package(Eigen3 3.4.0 REQUIRED)\nendif()\n\n# Define interface library target\nadd_library(sophus INTERFACE)\nadd_library(Sophus::Sophus ALIAS sophus)\n\nset(SOPHUS_HEADER_FILES\n    sophus/average.hpp\n    sophus/cartesian.hpp\n    sophus/ceres_manifold.hpp\n    sophus/ceres_typetraits.hpp\n    sophus/common.hpp\n    sophus/geometry.hpp\n    sophus/interpolate.hpp\n    sophus/interpolate_details.hpp\n    sophus/num_diff.hpp\n    sophus/rotation_matrix.hpp\n    sophus/rxso2.hpp\n    sophus/rxso3.hpp\n    sophus/se2.hpp\n    sophus/se3.hpp\n    sophus/sim2.hpp\n    sophus/sim3.hpp\n    sophus/sim_details.hpp\n    sophus/so2.hpp\n    sophus/so3.hpp\n    sophus/spline.hpp\n    sophus/types.hpp)\n\nset(SOPHUS_OTHER_FILES sophus/test_macros.hpp)\n\nif(MSVC)\n  # Define common math constants if we compile with MSVC\n  target_compile_definitions(sophus INTERFACE _USE_MATH_DEFINES)\nendif(MSVC)\n\n# Add Eigen interface dependency, depending on available cmake info\nif(TARGET Eigen3::Eigen)\n  target_link_libraries(sophus INTERFACE Eigen3::Eigen)\n  set(Eigen3_DEPENDENCY \"find_dependency (Eigen3 ${Eigen3_VERSION})\")\nelse()\n  target_include_directories(sophus SYSTEM INTERFACE ${EIGEN3_INCLUDE_DIR})\nendif()\n\n# Associate target with include directory\ntarget_include_directories(\n  sophus INTERFACE \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>\"\n                   \"$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\")\n\n# Add sources as custom target so that they are shown in IDE's\nadd_custom_target(other SOURCES ${SOPHUS_OTHER_FILES} ${SOPHUS_HEADER_FILES})\n\n# Create 'test' make target using ctest\noption(BUILD_SOPHUS_TESTS \"Build tests.\" ON)\nif(BUILD_SOPHUS_TESTS)\n  enable_testing()\n  add_subdirectory(test)\nendif()\n\n# Build python sophus bindings\noption(BUILD_PYTHON_BINDINGS \"Build python sophus bindings.\" OFF)\nif(BUILD_PYTHON_BINDINGS)\n  if(NOT TARGET fmt::fmt)\n    find_package(fmt REQUIRED)\n  endif()\n  include(FetchContent)\n  FetchContent_Declare(\n    pybind11\n    GIT_REPOSITORY https://github.com/pybind/pybind11.git\n    GIT_TAG master)\n  FetchContent_MakeAvailable(pybind11)\n\n  add_subdirectory(${pybind11_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR}/pybind)\n  pybind11_add_module(sophus_pybind\n                      ${CMAKE_CURRENT_SOURCE_DIR}/sophus_pybind/bindings.cpp)\n  target_link_libraries(sophus_pybind PUBLIC sophus fmt::fmt)\nendif(BUILD_PYTHON_BINDINGS)\n\nif(SOPHUS_INSTALL)\n  # Export package for use from the build tree\n  set(SOPHUS_CMAKE_EXPORT_DIR ${CMAKE_INSTALL_DATADIR}/sophus/cmake)\n\n  set_target_properties(sophus PROPERTIES EXPORT_NAME Sophus)\n\n  install(TARGETS sophus EXPORT SophusTargets)\n  install(\n    EXPORT SophusTargets\n    NAMESPACE Sophus::\n    DESTINATION ${SOPHUS_CMAKE_EXPORT_DIR})\n\n  export(\n    TARGETS sophus\n    NAMESPACE Sophus::\n    FILE SophusTargets.cmake)\n  export(PACKAGE Sophus)\n\n  configure_package_config_file(\n    SophusConfig.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/SophusConfig.cmake\n    INSTALL_DESTINATION ${SOPHUS_CMAKE_EXPORT_DIR}\n    NO_CHECK_REQUIRED_COMPONENTS_MACRO)\n\n  # Remove architecture dependence. Sophus is a header-only library.\n  set(TEMP_SIZEOF_VOID_P ${CMAKE_SIZEOF_VOID_P})\n  unset(CMAKE_SIZEOF_VOID_P)\n\n  # Write version to file\n  write_basic_package_version_file(\n    SophusConfigVersion.cmake\n    VERSION ${PROJECT_VERSION}\n    COMPATIBILITY SameMajorVersion)\n\n  # Recover architecture dependence\n  set(CMAKE_SIZEOF_VOID_P ${TEMP_SIZEOF_VOID_P})\n\n  # Install cmake targets\n  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/SophusConfig.cmake\n                ${CMAKE_CURRENT_BINARY_DIR}/SophusConfigVersion.cmake\n          DESTINATION ${SOPHUS_CMAKE_EXPORT_DIR})\n\n  # Install header files\n  install(FILES ${SOPHUS_HEADER_FILES}\n          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/sophus)\nendif()\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0703125,
          "content": "Copyright 2011-2017 Hauke Strasdat\n          2012-2017 Steven Lovegrove\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights  to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.708984375,
          "content": "<div align=\"center\">\n\n<a href=\"https://github.com/strasdat/Sophus/actions/workflows/main.yml\">\n  <img src=\"https://github.com/strasdat/Sophus/actions/workflows/main.yml/badge.svg\"\n       alt=\"Build CI Badge\"/>\n</a>\n<a href=\"https://github.com/strasdat/Sophus/actions/workflows/pybind.yml\">\n<img src=\"https://github.com/strasdat/Sophus/actions/workflows/pybind.yml/badge.svg\"\n       alt=\"PyBind CI Badge\"/>\n</a>\n<a href=\"https://github.com/strasdat/Sophus/actions/workflows/sympy.yml\">\n<img src=\"https://github.com/strasdat/Sophus/actions/workflows/sympy.yml/badge.svg\"\n       alt=\"Sympy CI Badge\"/>\n</a>\n<a href=\"https://github.com/strasdat/Sophus/blob/sophus2/LICENSE.txt\">\n  <img src=\"https://img.shields.io/github/license/elangosundar/awesome-README-templates?color=2b9348\"\n       alt=\"License Badge\"/>\n</a>\n\n</div>\n\n<h1 align=\"center\"> Sophus </h1>\n\n<p align=\"center\">\n  <i> 2d and 3d Lie Groups for Computer Vision and Robotics </i>\n</p>\n\nThis is a c++ implementation of Lie groups commonly used for 2d and 3d\ngeometric problems (i.e. for Computer Vision or Robotics applications).\nAmong others, this package includes the special orthogonal groups SO(2) and\nSO(3) to present rotations in 2d and 3d as well as the special Euclidean group\nSE(2) and SE(3) to represent isometries also known as rigid body transformations\n(i.e. rotations and translations) in 2d and 3d.\n\n## Status\n\n\n*Sophus (aka Sophus 1) is in maintenance mode. As of June 2024, there is no\nplane to add new larger features and future PRs will likely be limited to bug\nfixes, small improvements and toolchain updates.*\n\nHowever, next incarnations of Sophus are under development:\n\n\n - sophus2 is the next c++ iteration of Sophus and is a complete rewrite.\n   In addition to the Lie groups, it includes a more geometric concepts\n   such unit vector, splines, image classes, camera models and more.\n\n   It is currently hosted as part of the [farm-ng-core repository](https://github.com/farm-ng/farm-ng-core/tree/cygnet-dev)\n   and has likely only a few community users. While the code itself is in a good shape, there are\n   no good build instructions yet. Hopefully, this will change in the near future.\n\n\n - sophus-rs is a Rust version of Sophus. Similar to sophus2, it includes a more geometric concepts\n   such unit vector, splines, image classes, camera models and more. Also it includes an early and\n   experimental version of non-linear least squares optimization library (similar to Ceres, g2o,\n   etc.).\n\n   sophus-rs has likely only a few community users so far, but should be easy to build and\n   experiment with - of course being written in Rust.\n\n   https://github.com/sophus-vision/sophus-rs\n\n   https://crates.io/crates/sophus\n\n\n\nHow to build Sophus from source\n-------------------------------\n\nSophus requires a C++17 compiler (though older versions build with C++14).\n\nSophus is tested on Linux and macOS. It also worked on Windows in the past, however there is\ncurrently no CI for Windows, so it might require some smaller patches to build on Windows.\n\nThere are no comprehensive build instructions but inspecting the install [scripts](scripts/)\nas well as the [main.yml](.github/workflows/main.yml) file should give you a good idea how to\nbuild the required dependencies.\n\nInstalling Sophus through vcpkg\n-------------------------------\n\nYou can build and install Sophus using [vcpkg](https://github.com/Microsoft/vcpkg/) dependency manager::\n\n```\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n./vcpkg integrate install\n./vcpkg install sophus\n```\n\nThe Sophus port in vcpkg is kept up to date by Microsoft team members and community contributors.\nIf the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg)\non the vcpkg repository.\n"
        },
        {
          "name": "SOPHUS_VERSION",
          "type": "blob",
          "size": 0.005859375,
          "content": "1.24.6"
        },
        {
          "name": "Sophus.code-workspace",
          "type": "blob",
          "size": 1.3193359375,
          "content": "{\n\t\"folders\": [\n\t\t{\n\t\t\t\"path\": \".\"\n\t\t}\n\t],\n\t\"settings\": {\n\t\t\"files.associations\": {\n\t\t\t\"type_traits\": \"cpp\",\n\t\t\t\"array\": \"cpp\",\n\t\t\t\"optional\": \"cpp\",\n\t\t\t\"atomic\": \"cpp\",\n\t\t\t\"bit\": \"cpp\",\n\t\t\t\"*.tcc\": \"cpp\",\n\t\t\t\"cctype\": \"cpp\",\n\t\t\t\"chrono\": \"cpp\",\n\t\t\t\"clocale\": \"cpp\",\n\t\t\t\"cmath\": \"cpp\",\n\t\t\t\"compare\": \"cpp\",\n\t\t\t\"complex\": \"cpp\",\n\t\t\t\"concepts\": \"cpp\",\n\t\t\t\"cstdarg\": \"cpp\",\n\t\t\t\"cstddef\": \"cpp\",\n\t\t\t\"cstdint\": \"cpp\",\n\t\t\t\"cstdio\": \"cpp\",\n\t\t\t\"cstdlib\": \"cpp\",\n\t\t\t\"cstring\": \"cpp\",\n\t\t\t\"ctime\": \"cpp\",\n\t\t\t\"cwchar\": \"cpp\",\n\t\t\t\"cwctype\": \"cpp\",\n\t\t\t\"deque\": \"cpp\",\n\t\t\t\"list\": \"cpp\",\n\t\t\t\"map\": \"cpp\",\n\t\t\t\"set\": \"cpp\",\n\t\t\t\"string\": \"cpp\",\n\t\t\t\"unordered_map\": \"cpp\",\n\t\t\t\"unordered_set\": \"cpp\",\n\t\t\t\"vector\": \"cpp\",\n\t\t\t\"exception\": \"cpp\",\n\t\t\t\"algorithm\": \"cpp\",\n\t\t\t\"functional\": \"cpp\",\n\t\t\t\"iterator\": \"cpp\",\n\t\t\t\"memory\": \"cpp\",\n\t\t\t\"memory_resource\": \"cpp\",\n\t\t\t\"numeric\": \"cpp\",\n\t\t\t\"random\": \"cpp\",\n\t\t\t\"ratio\": \"cpp\",\n\t\t\t\"string_view\": \"cpp\",\n\t\t\t\"system_error\": \"cpp\",\n\t\t\t\"tuple\": \"cpp\",\n\t\t\t\"utility\": \"cpp\",\n\t\t\t\"initializer_list\": \"cpp\",\n\t\t\t\"iosfwd\": \"cpp\",\n\t\t\t\"iostream\": \"cpp\",\n\t\t\t\"istream\": \"cpp\",\n\t\t\t\"limits\": \"cpp\",\n\t\t\t\"new\": \"cpp\",\n\t\t\t\"numbers\": \"cpp\",\n\t\t\t\"ostream\": \"cpp\",\n\t\t\t\"semaphore\": \"cpp\",\n\t\t\t\"sstream\": \"cpp\",\n\t\t\t\"stdexcept\": \"cpp\",\n\t\t\t\"stop_token\": \"cpp\",\n\t\t\t\"streambuf\": \"cpp\",\n\t\t\t\"thread\": \"cpp\",\n\t\t\t\"cinttypes\": \"cpp\",\n\t\t\t\"typeinfo\": \"cpp\"\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "SophusConfig.cmake.in",
          "type": "blob",
          "size": 0.1279296875,
          "content": "@PACKAGE_INIT@\n\ninclude (CMakeFindDependencyMacro)\n\n@Eigen3_DEPENDENCY@\n\ninclude (\"${CMAKE_CURRENT_LIST_DIR}/SophusTargets.cmake\")\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "generate_stubs.py",
          "type": "blob",
          "size": 0.2041015625,
          "content": "import subprocess\n\nsubprocess.run(\n    \"pybind11-stubgen sophus_pybind -o sophus_pybind-stubs/\",\n    shell=True,\n    check=True,\n)\n\nsubprocess.run(\"touch sophus_pybind-stubs/py.typed\", shell=True, check=True)\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 5.83984375,
          "content": "import os\nimport re\nfrom pathlib import Path\nimport subprocess\nimport sys\n\nfrom setuptools import Extension, find_packages, setup\nfrom setuptools.command.build_ext import build_ext\n\nROOT_DIR = os.path.dirname(os.path.abspath(__file__))\n\n# Convert distutils Windows platform specifiers to CMake -A arguments\nPLAT_TO_CMAKE = {\n    \"win32\": \"Win32\",\n    \"win-amd64\": \"x64\",\n    \"win-arm32\": \"ARM\",\n    \"win-arm64\": \"ARM64\",\n}\n\n\n# A CMakeExtension needs a sourcedir instead of a file list.\n# The name must be the _single_ output extension from the CMake build.\n# If you need multiple extensions, see scikit-build.\nclass CMakeExtension(Extension):\n    def __init__(self, name, sourcedir=\"\"):\n        Extension.__init__(self, name, sources=[])\n        self.sourcedir = os.path.abspath(sourcedir)\n\n\nclass CMakeBuild(build_ext):\n    def build_extension(self, ext):\n        extdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.name)))\n\n        # required for auto-detection & inclusion of auxiliary \"native\" libs\n        if not extdir.endswith(os.path.sep):\n            extdir += os.path.sep\n\n        debug = int(os.environ.get(\"DEBUG\", 0)) if self.debug is None else self.debug\n        cfg = \"Debug\" if debug else \"Release\"\n\n        # CMake lets you override the generator - we need to check this.\n        # Can be set with Conda-Build, for example.\n        cmake_generator = os.environ.get(\"CMAKE_GENERATOR\", \"\")\n\n        cmake_args = [\n            \"-DBUILD_PYTHON_BINDINGS=ON\",\n            \"-DBUILD_SOPHUS_TESTS=OFF\",\n        ]\n        build_args = []\n        # Adding CMake arguments set as environment variable\n        # (needed e.g. to build for ARM OSx on conda-forge)\n        if \"CMAKE_ARGS\" in os.environ:\n            cmake_args += [item for item in os.environ[\"CMAKE_ARGS\"].split(\" \") if item]\n\n        if \"PYTHONPATH\" in os.environ and \"pip-build-env\" in os.environ[\"PYTHONPATH\"]:\n            del os.environ[\"PYTHONPATH\"]\n\n        if self.compiler.compiler_type != \"msvc\":\n            # Using Ninja-build since it a) is available as a wheel and b)\n            # multithreaded automatically. MSVC would require all variables be\n            # exported for Ninja to pick it up, which is a little tricky to do.\n            # Users can override the generator with CMAKE_GENERATOR in CMake\n            # 3.15+.\n            if not cmake_generator:\n                try:\n                    import ninja  # noqa: F401\n\n                    cmake_args += [\"-GNinja\"]\n                except ImportError:\n                    pass\n\n        else:\n            # Single config generators are handled \"normally\"\n            single_config = any(x in cmake_generator for x in {\"NMake\", \"Ninja\"})\n\n            # CMake allows an arch-in-generator style for backward compatibility\n            contains_arch = any(x in cmake_generator for x in {\"ARM\", \"Win64\"})\n\n            # Specify the arch if using MSVC generator, but only if it doesn't\n            # contain a backward-compatibility arch spec already in the\n            # generator name.\n            if not single_config and not contains_arch:\n                cmake_args += [\"-A\", PLAT_TO_CMAKE[self.plat_name]]\n\n            # Multi-config generators have a different way to specify configs\n            if not single_config:\n                cmake_args += [\n                    f\"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY_{cfg.upper()}={extdir}\"\n                ]\n                build_args += [\"--config\", cfg]\n\n        if sys.platform.startswith(\"darwin\"):\n            # Cross-compile support for macOS - respect ARCHFLAGS if set\n            archs = re.findall(r\"-arch (\\S+)\", os.environ.get(\"ARCHFLAGS\", \"\"))\n            if archs:\n                cmake_args += [\"-DCMAKE_OSX_ARCHITECTURES={}\".format(\";\".join(archs))]\n\n        # Set CMAKE_BUILD_PARALLEL_LEVEL to control the parallel build level\n        # across all generators.\n        if \"CMAKE_BUILD_PARALLEL_LEVEL\" not in os.environ:\n            # self.parallel is a Python 3 only way to set parallel jobs by hand\n            # using -j in the build_ext call, not supported by pip or PyPA-build.\n            if hasattr(self, \"parallel\") and self.parallel:\n                # CMake 3.12+ only.\n                build_args += [f\"-j{self.parallel}\"]\n\n        if not os.path.exists(self.build_temp):\n            os.makedirs(self.build_temp)\n\n        if not os.path.exists(self.build_lib):\n            os.makedirs(self.build_lib)\n\n        subprocess.check_call(\n            [\"cmake\", ext.sourcedir] + cmake_args, cwd=self.build_temp\n        )\n        subprocess.check_call(\n            [\"cmake\", \"--build\", \".\"] + build_args, cwd=self.build_temp\n        )\n\n        # copy stubs files from sophus_pybind-stubs to lib folder to be installed\n        subprocess.run(\n            f\"cp sophus_pybind-stubs/*.pyi {self.build_lib}\",\n            shell=True,\n            check=True,\n        )\n        subprocess.run(\n            f\"cp sophus_pybind-stubs/*.typed {self.build_lib}\",\n            shell=True,\n            check=True,\n        )\n        # copy .so file to lib\n        subprocess.run(\n            f\"cp {self.build_temp}/*.so {self.build_lib}/\",\n            shell=True,\n            check=True,\n        )\n\n\ndef main():\n    # The information here can also be placed in setup.cfg - better separation of\n    # logic and declaration, and simpler if you include description/version in a file.\n    setup(\n        name=\"sophus_pybind\",\n        version=Path(\"SOPHUS_VERSION\").read_text(),\n        description=\"Sophus python API\",\n        long_description=\"Python API for sophus library\",\n        url=\"https://github.com/strasdat/sophus\",\n        ext_modules=[CMakeExtension(\"sophus_pybind\", sourcedir=ROOT_DIR)],\n        author=\"Cheng Peng, David Caruso\",\n        cmdclass={\"build_ext\": CMakeBuild},\n        zip_safe=False,\n        python_requires=\">=3.6\",\n        install_requires=[\"numpy\"],\n        packages=find_packages(),\n        license=\"Apache-2.0\",\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "sophus",
          "type": "tree",
          "content": null
        },
        {
          "name": "sophus_pybind-stubs",
          "type": "tree",
          "content": null
        },
        {
          "name": "sophus_pybind",
          "type": "tree",
          "content": null
        },
        {
          "name": "sympy",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}