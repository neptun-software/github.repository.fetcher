{
  "metadata": {
    "timestamp": 1736565260948,
    "page": 65,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "defold/defold",
      "stars": 4547,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.412109375,
          "content": "---\nLanguage:        Cpp\nBasedOnStyle:  LLVM\nAccessModifierOffset: 0\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations:\n  Enabled: true\n  AcrossEmptyLines: true\nAlignEscapedNewlines: DontAlign\nAlignOperands:   false\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: MultiLine\nBinPackArguments: false\nBinPackParameters: false\nBraceWrapping:\n  AfterClass:      true\n  AfterControlStatement: true\n  AfterEnum:       true\n  AfterFunction:   true\n  AfterNamespace:  true\n  AfterObjCDeclaration: true\n  AfterStruct:     true\n  AfterUnion:      true\n  AfterExternBlock: true\n  BeforeCatch:     true\n  BeforeElse:      true\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Custom\nBreakBeforeInheritanceComma: false\nBreakInheritanceList: BeforeComma\nBreakBeforeTernaryOperators: false\nBreakConstructorInitializersBeforeComma: true\nBreakConstructorInitializers: BeforeComma\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     0\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 0\nCpp11BracedListStyle: false\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeBlocks:   Preserve\nIncludeCategories:\n  - Regex:           '^\"(llvm|llvm-c|clang|clang-c)/'\n    Priority:        2\n  - Regex:           '^(<|\"(gtest|gmock|isl|json)/)'\n    Priority:        3\n  - Regex:           '.*'\n    Priority:        1\nIncludeIsMainRegex: '(Test)?$'\nIndentCaseLabels: true\nIndentPPDirectives: None\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: All\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerAlignment: Left\nReflowComments:  true\nSortIncludes:    false\nSortUsingDeclarations: false\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCpp11BracedList: true\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Cpp11\nStatementMacros:\n  - Q_UNUSED\n  - QT_REQUIRE_VERSION\nTabWidth:        4\nUseTab:          Never\n...\n\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.037109375,
          "content": "*.dae binary\n\n# Defold Protocol Buffer Text Files\n*.animationset linguist-language=Protocol-Buffer-Text-Format\n*.atlas linguist-language=Protocol-Buffer-Text-Format\n*.camera linguist-language=Protocol-Buffer-Text-Format\n*.collection linguist-language=Protocol-Buffer-Text-Format\n*.collectionfactory linguist-language=Protocol-Buffer-Text-Format\n*.collectionproxy linguist-language=Protocol-Buffer-Text-Format\n*.collisionobject linguist-language=Protocol-Buffer-Text-Format\n*.cubemap linguist-language=Protocol-Buffer-Text-Format\n*.display_profiles linguist-language=Protocol-Buffer-Text-Format\n*.factory linguist-language=Protocol-Buffer-Text-Format\n*.font linguist-language=Protocol-Buffer-Text-Format\n*.gamepads linguist-language=Protocol-Buffer-Text-Format\n*.go linguist-language=Protocol-Buffer-Text-Format\n*.gui linguist-language=Protocol-Buffer-Text-Format\n*.input_binding linguist-language=Protocol-Buffer-Text-Format\n*.label linguist-language=Protocol-Buffer-Text-Format\n*.material linguist-language=Protocol-Buffer-Text-Format\n*.mesh linguist-language=Protocol-Buffer-Text-Format\n*.model linguist-language=Protocol-Buffer-Text-Format\n*.particlefx linguist-language=Protocol-Buffer-Text-Format\n*.render linguist-language=Protocol-Buffer-Text-Format\n*.sound linguist-language=Protocol-Buffer-Text-Format\n*.sprite linguist-language=Protocol-Buffer-Text-Format\n*.spinemodel linguist-language=Protocol-Buffer-Text-Format\n*.spinescene linguist-language=Protocol-Buffer-Text-Format\n*.texture_profiles linguist-language=Protocol-Buffer-Text-Format\n*.tilemap linguist-language=Protocol-Buffer-Text-Format\n*.tilesource linguist-language=Protocol-Buffer-Text-Format\n\n# Defold YAML Files\n*.appmanifest linguist-language=YAML\n*.manifest linguist-language=YAML\n*.script_api linguist-language=YAML\n\n# Defold JSON Files\n*.buffer linguist-language=JSON\n\n# Defold GLSL Shaders\n*.fp linguist-language=GLSL\n*.vp linguist-language=GLSL\n\n# Defold Lua Files\n*.editor_script linguist-language=Lua\n*.render_script linguist-language=Lua\n*.script linguist-language=Lua\n*.gui_script linguist-language=Lua\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.533203125,
          "content": "/.metadata\n/tmp\n.DS_Store\n.lock-wscript\n.lock-waf*\n/share/ext/build\n/share/ext/download\n/share/ext/tremolo/tmp/\n/share/ext/protobuf/tmp/\n/share/ext/protobuf/cross_tmp/\n/share/extender/build\n/go/pkg\n/go/bin\n\n.cache\n.dcache\n.java\n.oracle*\n.bash*\n*.pyc\n\n/.ccache\n*.iml\n*.apidoc_\nengine/.clang_complete\n/.vscode\n.npm\n/**/.project\n/**/.gradle\n\n# When opening the folder through certain IDE's (e.g. VSCode)\nscripts/android-v4/.classpath\nscripts/android-v4/.gradle/\nscripts/android-v4/.project\nscripts/android-v4/.settings/\nscripts/android-v4/build/\n\n# IntelliJ\neditor/.gradle/\n\n# Clang compilation databse\ncompile_commands.json\n\n# eastwood\neditor/.eastwood\neditor/eastwood-warnings.txt\n\n# This file is generated when starting editor in dev mode and when bundling\neditor/resources/sorted_clojure_ns_list.edn\nci/env.sh\n\ncom.dynamo.cr/com.dynamo.cr.bob.test/test/build\ncom.dynamo.cr/com.dynamo.cr.bob.test/src/com/dynamo/bob/archive/EngineVersion.java\ncom.dynamo.cr/extensions/**/build\n\n/local_sdks\nengine/**/build/\nexternal/**/build/\neditor/resources/splash.css\neditor/.calva/output-window/output.calva-repl\neditor/.lsp/sqlite.db\n\n#build_external\n/packages/bullet-2.77/\n/packages/lib/\n\n#build bob\n/com.dynamo.cr/com.dynamo.cr.bob/src/com/dynamo/bob/pipeline/antlr/**/*.interp\n/com.dynamo.cr/com.dynamo.cr.bob/src/com/dynamo/bob/pipeline/antlr/**/*.tokens\n/com.dynamo.cr/com.dynamo.cr.bob/libexec/**/lipo*\n/com.dynamo.cr/com.dynamo.cr.bob/lib/**/OpenAL*\n/com.dynamo.cr/com.dynamo.cr.bob/lib/**/wrap_oal*\n/com.dynamo.cr/out/\n/com.dynamo.cr/com.dynamo.cr.bob.test/test/proj/build/\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2890625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at conduct@defold.se. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "COMPLYING_WITH_LICENSES.md",
          "type": "blob",
          "size": 4.6416015625,
          "content": "# Complying with licenses\n\nDefold is created and distributed under the developer-friendly Defold License. The Defold License is derived from the popular Apache 2.0 license. The license in its entirety can be [read here](/LICENSE.txt) with additional information to help you understand the [difference from the standard Apache 2.0 license here](https://defold.com/license/).\n\nDefold itself contains software written by third parties. Some of the software is used in the Defold editor and command line tools ([learn more](/TOOLS_LICENSES.md)) and some of the software is used in the Defold engine. The software included in the Defold engine will be included in the games and applications created using Defold and require the inclusion of their respective license in derivative work.\n\n**If you use Defold to create games and applications it is your responsibility to include the required licenses in your work.**\n\n\n## How to include required licenses in your work\n\nSome ways in which you can include required licenses in your work:\n\n* Show the license and notice at the end of a credits screen if your application has one\n* Show the license and notice from a dedicated license screen or popup in your application\n* Print the license and notice to an output log when your application starts\n* Put the license and notice in a text file and include it with the distribution of your application\n* Put the license and notice in a printed manual included with your application\n\n\n## Required license inclusion\n\nThe following software has licenses which require inclusion of their respective license in derivative work:\n\n  * Defold License 1.0\n    * [Defold](/NOTICE)\n  * Apache 2.0\n    * [mbedTLS](/licenses/NOTICE-mbedtls) - Used when doing HTTPS requests or creating SSL sockets. Included in all builds of Defold.\n    * [Basis Universal](/licenses/NOTICE-basisuniversal) - Used when compressing textures.\n    * [Remotery](/licenses/NOTICE-remotery) - Used during development of your game. Not included in the release builds of Defold.\n  * MIT\n    * [jctest](/licenses/NOTICE-jctest) - Used when running unit tests in the engine. Not included in any builds.\n    * [Lua](/licenses/NOTICE-lua) - Used in HTML5 builds.\n    * [LuaCJson](/licenses/NOTICE-luacjson) - Used for encoding lua tables to JSON. Used on all platforms.\n    * [LuaJIT](/licenses/NOTICE-luajit) - Used on all platforms except HTML5.\n    * [LuaSocket](/licenses/NOTICE-luasocket) - Used for socket communication from Lua. Included on all platforms.\n    * [microsoft_craziness.h](/licenses/NOTICE-microsoft_craziness) - Used when running unit tests in the engine. Not included in any builds.\n    * [XHR2](/licenses/NOTICE-xhr2) - Used in HTML5 builds.\n    * [xxtea-c](/licenses/NOTICE-xxtea) - Used internally in the engine to obfuscate/encode Lua source code. Included in all builds of Defold.\n    * [cgltf](/licenses/NOTICE-cgltf) - Used when loading models in glTF format. Included in all builds.\n    * [lipo](https://github.com/konoui/lipo) - Used when building bundles for macOS and iOS. Included in all Editor/bob.jar builds.\n    * [miniz](https://github.com/richgel999/miniz) - Rich Geldrich\n    * [zip](https://github.com/kuba--/zip) - Kuba Podgórski\n  * Simplified BSD license (2-clause license)\n    * [LZ4](/licenses/NOTICE-lz4) - Used internally by the engine to read game archives. Included in all builds.\n  * BSD 2.0 license (3-clause license)\n    * [vpx/vp8](/licenses/NOTICE-vpx-vp8) - Used by the game play recorder. Only included in debug builds by default, but can be added [using an app manifest](https://defold.com/manuals/project-settings/#app-manifest).\n    * [Tremolo](/licenses/NOTICE-tremolo) - Used for decoding of Ogg sound files. Not used on Nintendo Switch, Win32 or HTML5. Included in all builds, but can be excluded [using an app manifest](https://defold.com/manuals/project-settings/#app-manifest)\n    * [Sony Vector Math library](/licenses/NOTICE-vecmath) - Used internally by the engine. Included in all builds.\n  * LGPL 2.0\n    * [OpenAL](/licenses/NOTICE-openal) - Used for sound playback on all platforms except Android. Can be excluded [using an app manifest](https://defold.com/manuals/project-settings/#app-manifest)\n\n\n## Optional license inclusion\n\nThe following third party software has licenses which does not require inclusion of their respective license in derivative work:\n\n  * Public Domain\n    * stb_image - Sean Barrett\n    * stb_vorbis - Sean Barrett\n  * ZLib\n    * zlib - Jean-loup Gailly and Mark Adler\n    * Box2D - Erin Catto\n    * Bullet Physics - Erwin Coumans\n    * GLFW - Marcus Geelnard, Camilla Löwy\n    * bindgen (Sokol) - Andre Weissflog\n\nNOTE: The Zlib license encourages attribution but does not require inclusion of the license.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 10.83984375,
          "content": "# Contribution Guidelines\nThank you for visiting the Defold open source contribution guidelines. We invite you to help make Defold an even better product! You don't even have to be a coder to contribute! You can contribute in the following ways:\n\n* Improve the documentation\n* Suggest new features\n* Fix bugs\n* Implement new features\n\nBefore you start contributing we would like to ask you to familiarise yourself with our contribution guidelines and our code of conduct. Following these guidelines will make the contribution process a lot smoother and faster.\n\nThanks! ♥\n\n/ The Defold Foundation and the Defold development team\n\n## Code of conduct\nWe ask of all contributors, project members and users to follow our [Code of Conduct](CODE_OF_CONDUCT.md) to create an open and welcoming environment. We will remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to our Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that we deem inappropriate, threatening, offensive, or harmful.\n\n## Documentation\nThe Defold manuals and examples are hosted in a [separate repository](https://github.com/defold/doc). Please pay it a visit if you wish to help improve our documentation! We need help to fix typos, update images and to write or improve tutorials and manuals.\n\nNote that the API reference is generated from the source code of the Defold engine. If you wish to submit improvements to the API reference it should be done as Pull Requests (see below).\n\n## Feature requests\nWe value your ideas on how to improve Defold! You can submit feature requests to our public issue tracker using the [Feature Request template](https://github.com/defold/defold/issues/new?assignees=&labels=feature+request&template=feature_request.md&title=). Some guidelines:\n\n* Please [search already submitted feature requests](https://github.com/defold/defold/labels/feature_request) before submitting your feature request. Maybe someone has already suggested the same thing or something only slightly different?\n  * If there is an already submitted feature request we appreciate if you add additional information instead of creating a new feature request.\n  * We will close any duplicate feature requests.\n* If you do submit a new Feature Request it is important that you fill in all fields marked as required.\n  * We will not be able to consider a new Feature Request until all required fields are filled in.\n  * Never submit more than one Feature Request in a single GitHub issue.\n\n\n## Bug reports\nBugs should be reported to our public issue tracker using the [Bug Report template](https://github.com/defold/defold/issues/new?assignees=&labels=bug&template=bug_report.md&title=). Some guidelines:\n\n* Please [search already reported bug reports](https://github.com/defold/defold/labels/bug) before reporting a bug.\n  * If there is an already existing bug report we appreciate if you add additional information to the existing bug report instead of creating a new one.\n  * We will close duplicate bug reports.\n* If you do create a new Bug Report it is important that you fill in all fields marked as required.\n  * We will not be able to consider a new Bug Report until all required fields are filled in.\n  * Never submit more than one Bug Report in a single GitHub issue.\n\n\n## Pull requests\nSubmit Pull Requests (PRs) to contribute to the Defold engine and/or editor source code. PRs can introduce new features, fix bugs or improve on our API reference. PRs for new features and bug fixes must follow these guidelines:\n\n* Never submit a PR that does more than one thing.\n* Make sure to follow the [Best practices for code contributions](#best-practices-for-code-contributions).\n* You must sign our Contributor License Agreement (CLA) as part of submitting the PR.\n  * The CLA ensures that you are entitled to contribute the code/documentation/translation to the project you’re contributing to and are willing to have it used in distributions and derivative works.\n  * The process of digitally signing the CLA is integrated into the PR flow on GitHub.\n* Always reference existing issues covered by the PR.\n* Individual commits should have informative commit messages.\n* For new code or changes to existing code:\n  * Should be covered by tests (unit, integration or system tests).\n    * All tests must pass CI before a Pull Request is approved and can be merged.\n  * Must follow the defined coding style.\n    * Use the .clang_format file for engine code.\n  * Should if possible be tested on all target platforms (preferably on physical hardware).\n    * Please note in the PR on which platforms the change has been tested.\n* All pull requests should be made to `defold:dev` by default. However, if your pull request *only* touches the editor and you want it to reach users as quickly as possible, it can be made towards the `defold:editor-dev` branch instead. Users will receive an editor update as soon as a change is merged into `defold:editor-dev`, so this should be done with care. The editor uses the latest stable release of the runtime, so any change that touches the runtime, the Bob command-line build tool, or makes a change to the file formats *must* be made towards the `defold:dev` branch, even if it contains mostly editor changes.\n* Pull requests should be given descriptive names: Issue-1234-Changed-the-flux-capacitor-to-use-uranium\n  * Make sure to [link the issue to the pull request](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword)\n\n\n### New features\nIf you want to add new functionality there are several additional steps that must be taken before you can submit a PR:\n\n* New functionality must be well designed and useful to not only your own project.\n  * For game engine code there is always the option to create a native extension and share it via the Asset Portal if the functionality is specific to a certain type of project or in other ways not suitable for inclusion in the engine.\n* You should start by creating a Feature Request if one isn't already created.\n  * Write a Feature Design post (in the GitHub issue) to discuss the proposed solution.\n  * The Feature Design should discuss the pros and cons of different solutions and it should document why a decision is made to implement the feature in a certain way.\n  * Any new API that is introduced should be well designed and future proof as we always try to avoid introducing breaking changes.\n    * New engine functionality that breaks existing functionality should be avoided at all costs.\n\n\n### API reference\nThe API reference is automatically extracted from the source code as a separate build step. There are no additional considerations to be made for PRs to the documentation besides paying attention to the grammar and making sure that the changes correct and/or clarify existing documentation.\n\n\n## Best practices for code contributions\nWhen discussing bug fixes, new features or changes to existing features it is very important to think about both the problem and the solution.\n\nYou should always start by asking yourself:\n\n*\"What is the problem that I am trying to solve?\"*\n\nand follow up with:\n\n*\"What is the least complex and most straight forward solution?\"*\n\nMost contributions start with a Problem and result in a Solution. When discussing Problems and Solutions there are a few best practices to consider.\n\n(These practices are inspired by the excellent [\"Best practice for engine contributors\"](https://docs.godotengine.org/en/latest/community/contributing/best_practices_for_engine_contributors.html) document in Godot)\n\n\n### The Problem must comes first\nMany developers enjoy the creative process of building systems and frameworks just for the sake of creating something. While this in itself can be both fun and rewarding it is something to pay attention to when working on a game engine. Every line of code you add will increase the build time, the complexity and the size of the code base, all of which are things you want to avoid in a game engine (or actually in all software).\n\nBest practice: *\"Never add code that doesn't solve an actual problem.\"*\n\nWhen contributing to Defold we want the Problem to come first, not the Solution.\n\n\n### Solutions should solve existing Problems\nWhile it can sometimes be good to plan ahead and try to anticipate Problems down the road it can also lead to speculation and Solutions that are larger than they actually need to be.\n\nBest practice: *\"Only solve problems that exist right now\"*\n\nWhen contributing to Defold we want the Solution to solve a Problem that exists now.\n\n\n### Solutions should solve frequent or complex Problems\nThe reason game developers use game engines instead of creating games completely from scratch is that game engines provide Solutions to complex and frequent Problems. This allows game developers to focus on creating games instead of solving technology problems. Game engines exist to solve Problems, but game engines can not solve all Problems. Some Problems require Solutions that have more to do with the game than with the engine and some Problems are easy to solve and can be left for the developer or a third party library to solve.\n\nBest practice: *\"Do not try to solve all problems. Focus on frequent or complex problems.\"*\n\nWhen contributing to Defold we want to provide Solutions to Problems that game developers encounter frequently or Problems that are complex and hard to solve.\n\n\n### Create one Solution per Problem\nIt may be tempting to try and come up with a clever Solution to solve many Problems at once. What usually happens is that these kinds of Solutions end up a lot more complex than Solutions that focus on solving a single Problem. It will also make it easier to reason about and review a change if it provides a Solution to a single Problem. Not to mention if the code needs to be refactored in the future!\n\nBest practice: *\"A solution should solve a single problem\"*\n\nWhen contributing to Defold we want each change to represent the Solution to a single Problem.\n\n\n### Solutions should solve engine Problems\nGame developers are faced with many different kinds of problems when developing games. Some are obviously game related, like how to best code the enemy behaviour or how to present the player inventory. Some Problems are not as obvious, like how to do pathfinding efficiently or how to create a scrolling list of UI elements. It is tempting to expect these kinds of Problems to be solved by the engine, and some game engines go down that route and provide Solutions to fairly high-level Problems. The design philosophy in Defold is to not solve these Problems but instead provide low-level building blocks that can be used to create Solutions for high-level Problems.\n\nBest practice: *\"Solutions should provide low-level building blocks to solve high-level problems\"*\n\nWhen contributing to Defold we want low-level Solutions that give game developers the functionality to solve high-level Problems on their own.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 9.7431640625,
          "content": "Defold License\nVersion 1.0, May 2020\nhttps://www.defold.com/opensource\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and\ndistribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright\nowner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities\nthat control, are controlled by, or are under common control with that entity.\nFor the purposes of this definition, \"control\" means (i) the power, direct or\nindirect, to cause the direction or management of such entity, whether by\ncontract or otherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising\npermissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including\nbut not limited to software source code, documentation source, and\nconfiguration files.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or\ntranslation of a Source form, including but not limited to compiled object\ncode, generated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form,\nmade available under the License, as indicated by a copyright notice that is\nincluded in or attached to the work (an example is provided in the Appendix\nbelow).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that\nis based on (or derived from) the Work and for which the editorial revisions,\nannotations, elaborations, or other modifications represent, as a whole, an\noriginal work of authorship. For the purposes of this License, Derivative Works\nshall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of, the Work\nand Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original\nversion of the Work and any modifications or additions to that Work or\nDerivative Works thereof, that is intentionally submitted to Licensor for\ninclusion in the Work by the copyright owner or by an individual or Legal\nEntity authorized to submit on behalf of the copyright owner. For the purposes\nof this definition, \"submitted\" means any form of electronic, verbal, or\nwritten communication sent to the Licensor or its representatives, including\nbut not limited to communication on electronic mailing lists, source code\ncontrol systems, and issue tracking systems that are managed by, or on behalf\nof, the Licensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise designated in\nwriting by the copyright owner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf\nof whom a Contribution has been received by Licensor and subsequently\nincorporated within the Work.\n\n“Game Engine Product” shall mean software used for video game development. This\nincludes both the content authoring software and the software used to show the\ncreated content.\n\n2. Grant of Copyright License. Subject to the terms and conditions of this\nLicense, each Contributor hereby grants to You a perpetual, worldwide,\nnon-exclusive, no-charge, royalty-free, irrevocable copyright license to\nreproduce, prepare Derivative Works of, publicly display, publicly perform,\nsublicense, and distribute the Work and such Derivative Works in Source or\nObject form.\n\n3. Grant of Patent License. Subject to the terms and conditions of this\nLicense, each Contributor hereby grants to You a perpetual, worldwide,\nnon-exclusive, no-charge, royalty-free, irrevocable (except as stated in this\nsection) patent license to make, have made, use, offer to sell, sell, import,\nand otherwise transfer the Work, where such license applies only to those\npatent claims licensable by such Contributor that are necessarily infringed by\ntheir Contribution(s) alone or by combination of their Contribution(s) with the\nWork to which such Contribution(s) was submitted. If You institute patent\nlitigation against any entity (including a cross-claim or counterclaim in a\nlawsuit) alleging that the Work or a Contribution incorporated within the Work\nconstitutes direct or contributory patent infringement, then any patent\nlicenses granted to You under this License for that Work shall terminate as of\nthe date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the Work or\nDerivative Works thereof in any medium, with or without modifications, and in\nSource or Object form, provided that You meet the following conditions:\n\na) You do not sell or otherwise commercialise the Work or Derivative Works as a\nGame Engine Product; and\n\nb) You must give any other recipients of the Work or Derivative Works a copy of\nthis License; and\n\nc) You must cause any modified files to carry prominent notices stating that\nYou changed the files; and\n\nd) You must retain, in the Source form of any Derivative Works that You\ndistribute, all copyright, patent, trademark, and attribution notices from the\nSource form of the Work, excluding those notices that do not pertain to any\npart of the Derivative Works; and\n\ne) If the Work includes a \"NOTICE\" text file as part of its distribution, then\nany Derivative Works that You distribute must include a readable copy of the\nattribution notices contained within such NOTICE file, excluding those notices\nthat do not pertain to any part of the Derivative Works, in at least one of the\nfollowing places: within a NOTICE text file distributed as part of the\nDerivative Works; within the Source form or documentation, if provided along\nwith the Derivative Works; or, within a display generated by the Derivative\nWorks, if and wherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and do not modify the\nLicense. You may add Your own attribution notices within Derivative Works that\nYou distribute, alongside or as an addendum to the NOTICE text from the Work,\nprovided that such additional attribution notices cannot be construed as\nmodifying the License.\n\nYou may add Your own copyright statement to Your modifications and may provide\nadditional or different license terms and conditions for use, reproduction, or\ndistribution of Your modifications, or for any such Derivative Works as a\nwhole, provided Your use, reproduction, and distribution of the Work otherwise\ncomplies with the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise, any\nContribution intentionally submitted for inclusion in the Work by You to the\nLicensor shall be under the terms and conditions of this License, without any\nadditional terms or conditions. Notwithstanding the above, nothing herein shall\nsupersede or modify the terms of any separate license agreement you may have\nexecuted with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade names,\ntrademarks, service marks, or product names of the Licensor, except as required\nfor reasonable and customary use in describing the origin of the Work and\nreproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or agreed to in\nwriting, Licensor provides the Work (and each Contributor provides its\nContributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied, including, without limitation, any warranties\nor conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any risks\nassociated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory, whether in\ntort (including negligence), contract, or otherwise, unless required by\napplicable law (such as deliberate and grossly negligent acts) or agreed to in\nwriting, shall any Contributor be liable to You for damages, including any\ndirect, indirect, special, incidental, or consequential damages of any\ncharacter arising as a result of this License or out of the use or inability to\nuse the Work (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all other commercial\ndamages or losses), even if such Contributor has been advised of the\npossibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing the Work or\nDerivative Works thereof, You may choose to offer, and charge a fee for,\nacceptance of support, warranty, indemnity, or other liability obligations\nand/or rights consistent with this License. However, in accepting such\nobligations, You may act only on Your own behalf and on Your sole\nresponsibility, not on behalf of any other Contributor, and only if You agree\nto indemnify, defend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason of your\naccepting any such warranty or additional liability.\n\n\n\nCopyright 2020 The Defold Foundation\n\nLicensed under the Defold License version 1.0 (the \"License\"); you may not use\nthis file except in compliance with the License.\n\nYou may obtain a copy of the License, together with FAQs at\n\nhttps://www.defold.com/license\n\nUnless required by applicable law or agreed to in writing, software distributed\nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\nCONDITIONS OF ANY KIND, either express or implied. See the License for the\nspecific language governing permissions and limitations under the License.\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.55859375,
          "content": "Copyright 2020 The Defold Foundation\n\nLicensed under the Defold License version 1.0 (the \"License\"); you may not use\nthis file except in compliance with the License.\n\nYou may obtain a copy of the License, together with FAQs at:\n\t\nhttps://www.defold.com/opensource\n\t\nUnless required by applicable law or agreed to in writing, software distributed\nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\nCONDITIONS OF ANY KIND, either express or implied. See the License for the\nspecific language governing permissions and limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.6513671875,
          "content": "![CI - Main](https://github.com/defold/defold/workflows/CI%20-%20Main/badge.svg)\n![CI - Editor Only](https://github.com/defold/defold/workflows/CI%20-%20Editor%20Only/badge.svg)\n![CI - Engine nightly](https://github.com/defold/defold/workflows/CI%20-%20Engine%20nightly/badge.svg)\n\n[![Join the chat at https://discord.gg/cHBde7J](https://img.shields.io/discord/250018174974689280?color=%237289DA&label=defold&logo=discord&logoColor=white)](https://discord.gg/cHBde7J)\n\n# Defold\n\nRepository for the Defold engine, editor and command line tools.\n\n## Supported by\n[![](https://defold.com/images/logo/others/melsoft-black.png)](https://melsoft-games.com/)\n![](https://defold.com/images/spacer32.png)\n[![](https://defold.com/images/logo/others/rive-black.png)](https://www.rive.app)\n![](https://defold.com/images/spacer32.png)\n[![](https://defold.com/images/logo/others/poki-black.png)](https://www.poki.com)\n![](https://defold.com/images/spacer32.png)\n[![](https://defold.com/images/logo/others/op-games-color.png)](https://www.opgames.org)\n![](https://defold.com/images/spacer32.png)\n[![](https://defold.com/images/logo/others/heroiclabs-blue.png)](https://www.heroiclabs.com)\n![](https://defold.com/images/spacer32.png)\n[![](https://defold.com/images/logo/others/king-color.png)](https://king.com/)\n\n## Folder Structure\n\n* **build_tools** - Build configuration and build tools used by build scripts\n* **ci** - Continuous integration files for GitHub CI ([more info](README_CI.md))\n* **com.dynamo.cr** - Bob\n* **engine** - Engine\n* **editor** - Editor\n* **packages** - External packages\n* **scripts** - Build and utility scripts\n* **share** - Misc shared stuff used by other tools. Waf build-scripts, valgrind suppression files, etc.\n\n## Setup and Build\n\n### Setup Engine\n\nFollow the [setup guide](README_SETUP.md) to install all of the tools needed to build the Defold engine.\n\n### Build Engine\n\nFollow the [build instructions](README_BUILD.md) to build the engine and command line tools.\n\n### Setup, Build and Run Editor\n\nFollow the [instructions](editor/README.md) in the editor folder.\n\n## Engine Overview\n\nAn overview of the engine architecture and additional engine information can be [viewed here](./engine/docs/README.md).\n\n### Platform Specifics\n\n* [iOS](README_IOS.md)\n* [Android](README_ANDROID.md)\n* [HTML5/Emscripten](README_EMSCRIPTEN.md)\n\n## Releasing a new version\n\nThe release process is documented [here](RELEASE.md).\n\n## Complying with licenses\n\nA full list of third party software licenses along with information on how to give attribution and include the licenses in your game can be found in the [COMPLYING WITH LICENSES](/COMPLYING_WITH_LICENSES.md) document in the Defold repository on GitHub.\n"
        },
        {
          "name": "README_ANDROID.md",
          "type": "blob",
          "size": 13.8701171875,
          "content": "# Android\n\n## Installation\n\n### Android SDK/NDK\n\n#### For contributors\n\nThe Android Studio installation will be automatically picked up from the default installation\n\n* macOS - `~/Library/android/sdk`\n* Windows - `%LOCALAPPDATA%/Android/Sdk`\n\nor by specifying the `ANDROID_HOME` environment variable.\n\n#### For the maintainers\n\n_This is mainly for the Defold team and their CI_\n\nWhen building the engine, the build system tries to find the sdk in this order:\n\n* `$DYNAMO_HOME/ext/SDKs/android-sdk`\n\n#### Android Studio\n\nFor the easiest build setup, you can install [Android Studio](https://developer.android.com/studio)\nOnce installed, you need to also install the NDK.\nOpen \"Settings\" -> \"Languages & Frameworks\" -> \"Android SDK\". From the \"SDK Tools\" tab choose \"NDK (Side by side)\".\n\nThe build system will find the most recent build tools and NDK versions.\nHowever, the minimum API target numbers are fixed, and are specified our [sdk.py](./build_tools/sdk.py)\n\n#### Version specific builds\n\nThis step isn't required if you have Android Studio installed.\nIt is mainly for the Defold team and the build server setup.\n\n**Note that the SDK version numbers aren't the same as the Api Level numbers!**\n\n* Download SDK Tools 24.3.4 (or later) from here: [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html)\n\nNOTE: Newer versions of the SDK Tools come shipped with the new `sdkmanager` command line tool and not the old Android SDK Manager. The contents of the tools folder is also slightly different with an `sdklib-x.y.z.jar` instead of an `sdklib.jar` (as referenced by `waf_dynamo.py`). Older versions of the SDK Tools can be downloaded at the following URLs:\n\n* http://dl-ssl.google.com/android/repository/tools_r[rev]-windows.zip\n* http://dl-ssl.google.com/android/repository/tools_r[rev]-linux.zip\n* http://dl-ssl.google.com/android/repository/tools_r[rev]-macosx.zip\n\nWhere [rev] corresponds to an SDK Tools revision, e.g. 23.0.2. The process of installation would be to create an `android-sdk` folder, unzip the downloaded SDK Tools into a `tools` folder inside `android-sdk` and then run the Android SDK Manager:\n\n    cd android-sdk/tools\n    ./android\n\nInstall the platform tools and build tools for a version matching what is defined in `waf_dynamo.py` (currently 23.0.2).\n\n* Put the SDK in **~/android/android-sdk**\n* The Android NDK is managed as a package and automatically installed via install_ext from the `build.py` script\n\nInstaller+GUI installation of those tools are a bit tricky, so it's recommended doing it via command line\nHere are some commands to help out with the process:\n\n    mkdir ~/android\n    cd ~/android\n\n    # Supported: macosx,linux,windows\n    PLATFORM=macosx\n    # The sdkmanager tool is provided in the Android SDK Tools package (25.2.3 and higher) and is located in android_sdk/tools/bin/ https://developer.android.com/studio/command-line/sdkmanager .\n    TOOL_VERSION=25.2.3\n    wget https://dl.google.com/android/repository/tools_r$TOOL_VERSION-$PLATFORM.zip\n    tar xvf tools_r$TOOL_VERSION-$PLATFORM.zip\n    mkdir android-sdk\n    mv tools android-sdk/tools\n\n    # You can list all the packages contained (not just the latest versions)\n    # and see their aliases (e.g. \"tools\")\n    ./android-sdk/tools/bin/sdkmanager --verbose --list --include_obsolete\n\n    # you can use some aliases to install them\n    # Note the API level version: E.g. \"android-23\"\n    ./android-sdk/tools/bin/sdkmanager --verbose \"tools\" \"platform-tools\" \"extras;android;m2repository\" \"platforms;android-23\" \"build-tools;23.0.2\"\n\nAfter installing the SDK check that the PATH env variable contains the path to the android sdk. If not, add it manually.\n\n**Note** Newer version have the suffixes \".bin\" or \".exe\" as they are now installers.\nSimply use that as the suffix, and and extract with **7z**\n\n* How to launch the [Android Tool](http://developer.android.com/sdk/installing/adding-packages.html) manually\n\n\n## General\n\nBy convention we currently have a weak reference to struct android\\_app \\* called g\\_AndroidApp.\ng\\_AndroidApp is set by glfw and used by dlib. This is more or less a circular dependency. See sys.cpp and android_init.c.\nLife-cycle support should probably be moved to dlib at some point.\n\n### Android Resources and R.java\n\nLong story short. Static resources on Android are referred by an integer identifier. These identifiers are generated to a file R.java.\nThe id:s generated are conceptually a serial number and with no guarantees about uniqueness. Due to this limitations **all** identifiers\nmust be generated when the final application is built. As a consequence all resources must be available and it's not possible to package\nlibrary resources in a jar. Moreover, one identical *R.java* must be generated for every package/library linked with the final application.\n\nThis is a known limitation on Android.\n\n**NOTE:** Never ever package compiled **R*.class-files** with third party libraries as it doesn't work in general.\n\n**NOTE2:** android_native_app_glue.c from the NDK has been modified to fix a back+virtual keyboard bug in OS 4.1 and 4.2, the modified version is in the glfw source.\n\n### Android testing\n\nCopy executable (or directory) with\n\n    # adb push <DIR_OR_DIR> /data/local/tmp\n\nWhen copying directories append directory name to destination path. It's otherwise skipped\n\nRun exec with:\n\n    # adb shell /data/local/tmp/....\n\nFor interactive shell run \"adb shell\"\n\n\n### Caveats\n\nIf the app is started programmatically, the life cycle behaves differently. Deactivating the app and then activating it by clicking on it results in a new\ncreate message being sent (onCreate/android_main). The normal case is for the app to continue through e.g. onStart.\n\n### Android debugging\n\nThere are two alternatives to debug native code on Android;\n\n1. through the `ndk-gdb` script available in the Android NDK\n2. starting a `gdbserver` and connecting manually\n\nThe first option is the preferred and easiest solution, but due to bugs with certain Android versions `ndk-gdb` does not always work. ([Android 4.2.2 and 4.3 are known to have issues.](http://visualgdb.com/KB/?ProblemID=nopkg))\n\n#### Using ndk-gdb\n* Go to the build directory for the engine subsystem, `engine/engine/build/default/src/dmengine.android/`\n* This directory includes the debug app APK, `dmengine.apk` and has a structure that `ndk-gdb` understands.\n* Install (`adb install dmengine.apk`) and launch the application.\n* Run `ndk-gdb` from Android NDK; `$DYNAMO_HOME/ext/SDKs/android-ndk-<version>/ndk-gdb --start`\n\nIf you are having problems with `ndk-gdb` try running it with `--verbose` for troubleshooting. If you encounter the error below it might be easier to go with the `gdbserver` solution.\n\n    ERROR: Could not extract package's data directory. Are you sure that\n        your installed application is debuggable?\n\n#### Using gdbserver\nYou need to have a executable binary of `gdbserver` available on the device. There are ways to transfer such binary (`adb put gdbserver ...`) to device, and then setting it executable (`adb shell \"chmod +x ...\"`), but the easiest way is to just rely on the `gdbserver` bundled together with `dmengine.apk`.\n\nTo get debug symbols you will need to download the system libraries from the device, like this:\n\n    $ mkdir system_libs\n    $ cd system_libs\n    $ adb pull /system/lib\n    $ cd ..\n    $ mkdir vendor_libs\n    $ cd vendor_libs\n    $ adb pull /vendor/lib\n    $ cd ..\n    $ adb pull /system/bin/linker\n\nOnce you have an executable gdbserver on the device, and have downloaded the system libraries, do the following:\n\n    $ adb pull /system/bin/app_process\nThis fetches the `app_process` binary from the Android device to your machine which you will need when starting `gdb` later on.\n\n    $ adb forward tcp:5039 tcp:5039\nThis forwards the port 5039 from the Android device to your local machine.\n\nStart your application on the device and find its PID (for example via `adb logcat | grep \"ENGINE\"`).\n\n    $ adb shell \"run-as <your-app-package-name> /data/data/com.defold.dmengine/lib/gdbserver :5039 --attach <PID>\"\nThis will start the gdbserver (which in this case is located inside dmengine.apk) on port 5039 and attach to the running process id.\n\nNext you will need to start a local gdb instance and connect to the gdbserver. The correct gdb binaries are located in the Android NDK:\n\n    $ $DYNAMO_HOME/ext/SDKs/android-ndk-<version>/toolchains/arm-linux-androideabi-4.6/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-gdb app_process\n    ...\n    (gdb) target remote :5039\n    ...\n    (gdb) set solib-search-path ./system_libs/:<path-to-dir-with-libdmengine.so>\n    ...\n    (gdb) continue\n\nThis will connect to your locally forwarded port, thus connecting to the gdbserver on device. Then you specify where the libraries can be found, which will give you symbols for easier debugging. Finally you continue the execution (it will be paused when you first connect).\n\n### Life-cycle and GLFW\n\nNDK uses a separate thread which runs the game, separate from the Android UI thread.\n\nThe main life cycle (LC) of an android app is controlled by the following events, received on the game thread:\n\n* `_glfwPreMain(struct* android_app)`, corresponds to create\n* APP_CMD_START, (visible)\n* APP_CMD_RESUME\n* APP_CMD_GAINED_FOCUS\n* APP_CMD_LOST_FOCUS\n* APP_CMD_PAUSE\n* APP_CMD_STOP, (invisible)\n* APP_CMD_SAVE_STATE\n* APP_CMD_DESTROY\n\nAfter APP_CMD_PAUSE, the process might be killed by the OS without APP_CMD_DESTROY being received.\n\nWindow life cycle (LC), controls the window (app_activity->window) and might happen at any point while the app is visible:\n\n* APP_CMD_INIT_WINDOW\n* APP_CMD_TERM_WINDOW\n\nSpecifics of exactly when they are received depend on manufacturer, OS version etc.\n\nThe graphics resources used are divided into Context and Surface:\n\n* Context\n  * EGLDisplay display\n  * EGLContext context\n  * EGLConfig config\n* Surface\n  * EGLSurface surface\n\nGLFW functions called by the engine are:\n\n* `_glfwPlatformInit` (Context creation)\n* `_glfwPlatformOpenWindow` (Surface creation)\n* `_glfwPlatformCloseWindow` (Surface destruction)\n* `_glfwPlatformTerminate` (implicit Context destruction)\n\nSome implementation details to note:\n\n* `_glfwPreMain` pumps the LC commands until the window has been created (APP_CMD_INIT_WINDOW) before proceeding to boot the app (engine-main).\n  This should be possible to streamline so that content loading can start faster.\n* The engine continues to pump the LC commands as a part of polling for input (glfw)\n* OpenWindow is the first time when the window dimensions are known, which controls screen orientation.\n* The glfw window is considered open (`_glfwWin.opened`) from APP_CMD_INIT_WINDOW until APP_CMD_DESTROY, which is app termination\n* The glfw window is considered iconified (`_glfwWin.iconified`) when not visible to user, which stops buffer swapping and controls poll timeouts\n* Between CloseWindow and OpenWindow the GL context is temp-stored in memory (ordinary struct is memset to 0 by glfw in CloseWindow)\n* When rebooting the engine (when using the dev app), essentially means CloseWindow followed by OpenWindow.\n* APP_CMD_TERM_WINDOW might do Context destruction before `_glfwPlatformTerminate`, depending on which happens first\n* `_glfwPlatformTerminate` pumps the LC commands until the Context has been destroyed\n\n### Pulling APKs from device\n\nE.g. when an APK produces a crash, backing it up is always a good idea before you attempt to fix it.\n\n## Determine package name:\n  adb shell pm list packages\n## Get the path on device:\n  adb shell pm path <package-name>\n## Pull the APK to local disk\n  adb pull <package-path>\n\n\n## Upgrading SDK (i.e. API LEVEL)\n\nIn essence, updating the \"sdk\" means to update the supported api level.\nThis is done by updating the `defold/packages/android-<android version>-<arch>.tar.gz` etc\n\nSome relevant links:\n\n- https://developer.android.com/guide/topics/manifest/uses-sdk-element.html\n- https://developer.android.com/about/versions\n- https://developer.android.com/tools/support-library/index.html\n\n### AAPT Binaries\n\nWe ship Android \"aapt\" (Android Asset Packaging Tool) binaries for all platforms that the editor runs on. When upgrading the Android SDK, these needs to be copied from the Android SDK directory into `com.dynamo.cr/com.dynamo.cr.bob/libexec/<PLATFORM>/`. Currently the Linux `aapt` binary is dynamically linked against a version of `libc++.so` that comes with the Android SDK. This forces us to also copy this library into `com.dynamo.cr/com.dynamo.cr.bob/libexec/x86_64-linux/lib/`.\n\n### Creating the android tar ball\n\nCreating a new android package is straight forward:\n\n    APILEVEL=34\n    mkdir -p sdkpack_android\n    cd sdkpack_android\n    mkdir -p share/java\n    cp ../tmp/dynamo_home/ext/SDKs/android-sdk/platforms/android-$APILEVEL/android.jar share/java\n    ./../scripts/mobile/android_jar_reduce_size.sh share/java/android.jar\n    tar -cvzf android-$APILEVEL-armv7-android.tar.gz share\n    tar -cvzf android-$APILEVEL-arm64-android.tar.gz share\n    cp android-$APILEVEL-armv7-android.tar.gz ../packages\n    cp android-$APILEVEL-arm64-android.tar.gz ../packages\n\n\n### Update build script\n\nUpdate the reference to the tar ball in `<defold>/scripts/build.py`\n\n    PACKAGES_ANDROID=\"... android-34 ...\".split()\n\nFind and update all `ANDROID_BUILD_TOOLS_VERSION`, `ANDROID_TARGET_API_LEVEL` and `ANDROID_PLATFORM` in the `defold` project folder.\n\n`ANDROID_BUILD_TOOLS_VERSION` maybe found here:\n![Screenshot 2022-04-05 at 10 28 15](https://user-images.githubusercontent.com/2209596/161712727-f52f3616-1965-454b-87ef-f1f6bca1c037.jpg)\n\n### Update Dockerfile\n\nUpdate Android environment variables in [the extender's Dockerfile](https://github.com/defold/extender/blob/2960a454940bc4d2629af721e9dc48c60c4ed432/server/docker-base/Dockerfile#L207).\n\n\n### Reinstall and rebuild\n\n    $ ./scripts/build.py distclean\n    $ ./scripts/build.py install_sdk --platform=arm64-android\n    $ ./scripts/build.py install_ext --platform=arm64-android\n    $ ./scripts/build.py build_engine --platform=arm64-android --skip-docs --skip-codesign --skip-tests\n\n## Energy Consumption\n\n      adb shell dumpsys cpuinfo\n"
        },
        {
          "name": "README_BUILD.md",
          "type": "blob",
          "size": 7.96484375,
          "content": "# Build Engine\n\nDefold uses the Python based build system [Waf](https://waf.io/). Most of the interaction is done through the `build.py` script but it is also possible to use Waf directly.\n\n## IMPORTANT PREREQUISITE - SETUP!\n\nMake sure you have followed the [setup guide](/README_SETUP.md) before attempting to build the engine. If you do not install all of the required software from the setup guide your attempts to build the engine will likely fail.\n\n## IMPORTANT PREREQUISITE - PLATFORM SDKs!\n\nOur build setup can find the installation of the platform SDK's for the common platforms.\n\nSee the setup for the [Platform SDK](./README_SETUP.md#platform-sdk)\n\n<details><summary>Locally installed platform sdks</summary><p>\n\n### Using local installation\n\nOur build setup can find the installation of the platform SDK's for the common platforms.\nSee [Platform SDK](./README_SETUP.md#platform-sdk)\n\nIf you have these tools installed, you can skip the `./scripts/build.py install_sdk` step altogether.\n\nSince support for locally installed SDK's is in progress, some platforms still _do_ require the `--install_sdk` step, and thus requires you to have the prepackaged sdk's available.\n\n### Prepackaged SDKs\n\nThis step is currently needed for HTML5.\n\nDue to licensing restrictions **the SDKs are not distributed with Defold**. You need to provide these from a URL accessible by your local machine so that `build.py` and the `install_ext` command can download and unpack them.\n\n__In order to simplify this process we provide scripts to download and package the SDKs__ [Read more about this process here](/scripts/package/README.md).\n\nThe path to the SDKs can either be passed to `build.py` using the `--package-path` option or by setting the `DM_PACKAGES_URL` environment variable.\n\n</p></details>\n\n## Standard workflow\n\nThe standard workflow when building the engine is the following:\n\n1. Setup environment\n2. Install platform specific libraries and SDKs\n3. Build the engine\n\nWhen working on a new feature or fixing a bug you start by first building the engine once as described above. You then proceed to develop your feature or fix the bug and rebuild and test changes until satisfied. When you do a rebuild you can speed things up by only building the parts that have changed.\n\n## Build examples\n\nTo give an quick overview of the steps required.\n(The following paragraphs will explain in more detail what each step does.)\n\nThe `--platform=` is implied in these examples, as it defaults to the host platform (x86_64-win32, x86_64-linux, x86_64-macos or arm64-macos)\n\nOnce per session:\n```\n$ ./scripts/build.py shell          # creates the shell. No need for \"--platform\"\n```\n\nOnce per platform to be built\n```\n$ ./scripts/build.py install_ext    # extracts packages\n$ ./scripts/build.py check_sdk      # checks that it finds the platform SDK\n```\n\nBuild full engine, docs, bob light, tests + running the tests\n\n    $ ./scripts/build.py build_engine\n\nBuild full engine, but without: docs, bob light, tests, skipping the tests (for a significant speedup)\n\n    $ ./scripts/build.py build_engine --skip-docs --skip-bob-light --skip-tests -- --skip-build-tests\n\nRebuild a single library, and then relink the dmengine executable. No tests are run. The fastest option while iterating on a feature.\n\n    $ ./scripts/submodule x86_64-win32 gamesys\n\n\nYou can also specify the platform explicitly:\n```\n$ ./scripts/build.py install_ext --platform=arm64-android\n$ ./scripts/build.py check_sdk --platform=arm64-android\n$ ./scripts/build.py build_engine --platform=arm64-android\n```\n\n### Platforms\n\n*In the instructions below, the `--platform` argument to `build.py` will default to the host platform if not specified.*\n\nThe following platforms are supported:\n\n* `x86_64-linux`\n* `x86_64-macos`\n* `arm64-macos`\n* `win32`\n* `x86_64-win32`\n* `x86_64-ios`\n* `arm64-ios`\n* `armv7-android`\n* `arm64-android`\n* `js-web`\n* `wasm-web`\n\n### STEP 1 - Setup environment\n\nStart by setting up the build environment:\n\n```sh\n$ ./scripts/build.py shell\n```\n\nThis will start a new shell with all of the required environment variables set (`DYNAMO_HOME` etc).\n\n### STEP 2 - Install packages\n\nNext thing you need to do is to install external packages:\n\nInstall for the current host platform (e.g x86_64-win32)\n```sh\n$ ./scripts/build.py install_ext\n```\n\nOr for another target platform\n```sh\n$ ./scripts/build.py install_ext --platform=arm64-android\n```\n\nIt is important that you provide the `--platform` if you target a platform other than the host platform.\nWith host platform, we mean any of the `x86_64-win32`, `x86_64-macos`, `arm64-macos` or `x86_64-linux`.\n\nWhen the `install_ext` command has finished you will find the external packages and any downloaded SDKs in `${DYNAMO_HOME}/ext`.\n\n**IMPORTANT!**\nYou need to rerun the `install_ext` command for each target platform, as different packages and SDKs are installed.\n\n#### Installing packages\nThe `install_ext` command starts by installing external packages, mostly pre-built libraries for each supported platform, found in the `./packages` folder. External packages are things such as Bullet and Protocol Buffers (a.k.a. protobuf).\n\nThis step also installs some Python dependencies:\n\n* `boto` - For interacting with AWS. Installed from wheel package in `packages/`.\n* `markdown` - Used when generating script API docs. Installed from wheel package in `packages/`.\n* `protobuf` - Installed from wheel package in `packages/`\n* `Pygments` - For use by the `CodeHilite` extension used by `markdown` in `script_doc.py`. Installed from wheel package in `packages/`.\n* `requests` - Installed using pip\n* `pyaml` - Installed using pip\n\n### Step 3 - Installing SDKs\n\nNOTE: As mentioned above, you may skip this step if your host OS and target OS is in the supported list of platforms that can use the local (host) installations of sdks.\n(Most likely, it is)\nSee [Platform SDK](./README_SETUP.md#platform-sdk)\n\n<details><summary>Install sdk</summary><p>\n\nSee [./README_SETUP.md]()\n\nThe `install_sdk`command will install SDKs (build tools etc) such as the Android SDK when building for Android or the Emscripten SDK for HTML5.\n\nIf you wish to build for any other platform, you will need to install an sdk package where the build system can find it.\n\nNext thing you need to do is to install external packages:\n\n```sh\n$ ./scripts/build.py install_sdk --platform=... --package-path=...\n```\n\nYou could also set the package path in an environment variable `DM_PACKAGES_URL`:\n\n```sh\n$ DM_PACKAGES_URL=https://my.url ./scripts/build.py install_sdk --platform=...\n```\n\n</p></details>\n\n\n### STEP 4 - Build the engine\n\nWith the setup and installation done you're ready to build the engine:\n\n```sh\n$ ./scripts/build.py build_engine --platform=...\n```\n\nThis will build the engine and run all unit tests. In order to speed up the process you can skip running the tests:\n\n```sh\n$ ./scripts/build.py build_engine --platform=... --skip-tests -- --skip-build-tests\n```\n\nAnything after `--` is passed directly as arguments to Waf. The built engine ends up in `./tmp/dynamo_home/bin/%platform%`.\n\n---\n\n## Rebuilding the engine\n\nWhen you are working on a specific part of the engine there is no need to rebuild the whole thing to test your changes. You can use Waf directly to build and test your changes (see Unit tests below for more information about running tests):\n\n```sh\n$ cd engine/dlib\n$ waf\n```\n\nAnd you have the commands `clean`,  `build`, `install`.\nALso some common options `--opt-level=<opt_level>`, `--skip-tests` or `--target=<artifact>`\n\nYou can also use rebuild a specific part of the engine and create a new executable:\n\n```sh\n# Rebuild dlib and sound modules and create a new executable\n$ ./scripts/submodule.sh x86_64-macos dlib sound\n```\n\n---\n\n## Unit tests\n\nUnit tests are run automatically when invoking waf if not `--skip-tests` is specified. A typically workflow when working on a single test is to run:\n\n```sh\n$ waf --skip-tests && ./build/default/.../test_xxx\n```\n\nWith the flag `--test-filter=` it's possible to run a single test in the suite, see [jctest documentation](https://jcash.github.io/jctest/api/03-runtime/#command-line-options)\n"
        },
        {
          "name": "README_CI.md",
          "type": "blob",
          "size": 1.984375,
          "content": "# Continuous Integration\n\nCI is based on [GitHub Actions](https://github.com/features/actions). Current and old jobs can be seen on the [Actions page](https://github.com/defold/defold/actions) of the main Defold repository.\n\nThe Defold CI jobs are divided into three main categories, each represented by a separate GitHub Actions Workflow:\n\n* [Editor Only](/.github/workflows/editor-only.yml) - Builds editor feature branches (branches starting with `DEFEDIT-`)\n* [Main](/.github/workflows/main-ci.yml) - Builds and tests changes to all other branches. The workflow varies slightly depending on the type of branch being built (dev, beta, master or a feature branch).\n* [Engine Nightly](/.github/workflows/engine-nightly.yml) - Runs Address Sanitizer (ASAN) and Valgrind nightly to detect leaks and other problems. This is done on the `dev` branch.\n\nThe workflow files listed above sets up the jobs and distributes them to multiple workers to build, test and release the engine and/or editor. The bulk of the work is done in the [ci.py](/ci/ci.py) script.\n\n## How to trigger builds manually\n\nYou can use the `ci/trigger-build.py` script to manually trigger a build using the `Main` workflow:\n\n```\n./ci/trigger-build.py --token=<personal_access_token> --branch=9a32ac5e9513e8aff669cf4cbe4334aeec2fbf8e --skip-engine --skip-sdk --skip-bob\n```\n\nAvailable options are:\n\n```\n$ ./ci/trigger-build.py --help                                                                   \nusage: trigger-build.py [-h] [--token TOKEN] [--action ACTION]\n                        [--branch BRANCH] [--skip-engine] [--skip-sdk]\n                        [--skip-bob] [--skip-editor]\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --token TOKEN    GitHub API personal access token\n  --action ACTION  The trigger action\n  --branch BRANCH  The branch to build\n  --skip-engine    Skip building the engine\n  --skip-sdk       Skip building the Defold SDK\n  --skip-bob       Skip building bob\n  --skip-editor    Skip building the editor\n```\n"
        },
        {
          "name": "README_DEBUGGING.md",
          "type": "blob",
          "size": 3.17578125,
          "content": "# Debugging\n\n## Get the _crash / .dmp files\n\n### Android\n\nThe adb output says where it is located (different location on different devices)\n\nIf the app is [debuggable](), you can get the crash log like so:\n\n\t$ adb shell \"run-as com.defold.adtest sh -c 'cat /data/data/com.defold.adtest/files/_crash'\" > ./_crash\n\nIf the device has `su`, you can try these commands (The device likely has to be rooted):\n\n\t$ adb pull /data/data/com.defold.examples/files/_crash ./_crash\n\nIf those fail, try the [Device File Explorer](https://developer.android.com/studio/debug/device-file-explorer) in Android Studio.\n\n\n### iOS\n\n## Get engine version and SHA1 from binary\n\n### Android\n\n\t$ objdump -s -j .rodata blossom_45_0_1/lib/armeabi-v7a/libblossom_blast_saga.so | grep -e \"1\\.2\\.\"\n\nLook for \"1.2.XXX\", which is usually the first string, followed by the SHA1\n\n### iOS + OSX\n\n    $ strings test.app/test | grep -e \"1\\.2\\.[0-9]+\"\n\n\n### Get engine SHA1\n\niOS + OSX:\n\n    $ strings pewpew/Payload/Pewpew.app/Pewpew | grep -E \"^[0-9a-f]{40}\"\n\n\n## Symbolicate crashes\n\n\n### Android\n\n1. Download the engine:\n\n\t$ wget http://d.defold.com/archive/<sha1>/engine/armv7-android/dmengine.apk\n\n1. Alternatively, get it from your build folder\n\n\t$ ls <project>/build/<platform>/[lib]dmengine[.exe|.so]\n\n1. Unzip to a folder:\n\n\t$ unzip dmengine.apk -d dmengine_1_2_105\n\n1. Find the callstack address\n\n\tE.g. in the non symbolicated callstack on Crash Analytics, it could look like this\n\n\t`#00 pc 00257224 libblossom_blast_saga.so`\n\n\tWhere *00257224* is the address\n\n1. Resolve the address\n\n```\n    # 32 bit\n    $ arm-linux-androideabi-addr2line -C -f -e dmengine_1_2_105/lib/armeabi-v7a/libdmengine.so <address>\n\n    # 64 bit\n    $ aarch64-linux-android-addr2line -C -f -e build/default/extension-push/extension-push.apk.symbols/lib/arm64-v8a/libextensionpush.so <address>\n```\n\n### iOS\n\n1. Download the symbols (.dSYM)\n\n1. If you're not using Native Extensions, download the vanilla symbols:\n\n\t$ wget http://d.defold.com/archive/<sha1>/engine/arm64-ios/dmengine.dSYM\n\n1. If you are using Native Extensions, the server can provide those for you (pass \"--with-symbols\" to bob.jar)\n\n\t$ unzip <project>/build/arm64-ios/build.zip\n\n\tit will produce a Contents/Resources/DWARF/dmengine\n\n1. Symbolicate using load address\n\n\tFor some reason, simply putting the address from the callstack doesn't work (i.e. load address 0x0)\n\n\t$ atos -arch arm64 -o Contents/Resources/DWARF/dmengine 0x1492c4\n\n\tNeither does specifying the load address directly\n\n\t$ atos -arch arm64 -o MyApp.dSYM/Contents/Resources/DWARF/MyApp -l0x100000000 0x1492c4\n\n\tAdding the load address to the address works:\n\n\t$ atos -arch arm64 -o MyApp.dSYM/Contents/Resources/DWARF/MyApp 0x1001492c4\n\tdmCrash::OnCrash(int) (in MyApp) (backtrace_execinfo.cpp:27)\n\n### macOS\n\nSame as iOS, except you don't need to specify the <arch>\n\n#### Other tools\n\nUUID:\n\n\t# Check the UUID of an executable\n\t$ dwarfdump --uuid dmengine\n\t# Check the UUID of the debug symbols\n\t$ dwarfdump --uuid dmengine.dSYM/Contents/Resources/DWARF/dmengine\n\n\n### HTML5\n\n1. Download the engine:\n\n\t$ wget http://d.defold.com/archive/<sha1>/engine/armv7-android/dmengine.js\n\n1. Download the symbols\n\n\t$ ... dmengine.js.symbols\n\n1. Match the callstack with the symbols\n"
        },
        {
          "name": "README_DOCS.md",
          "type": "blob",
          "size": 9.791015625,
          "content": "# Defold API documentation\n\nThe Defold API documentation is generated from source file comments, similar to Doxygen but uses a proprietary python tool to generate json and sdoc files that the Editor and website uses for rendering documentation and provide completion.\n\n## Markdown support\n\nThe documentation formatter accepts Markdown with a few extensions:\n\nFenced codeblocks\n: Denote with three backticks. The first one can contain a language specifier for syntax coloring:\n\n    ```\n    function init(self)\n        local pos = go.get(\"player\", \"position\")\n    end\n    ```\n\n    ```lua\n    function init(self)\n        local pos = go.get(\"player\", \"position\")\n    end\n    ```\n\nTable support\n: Tables can be written simply:\n\n```\nFirst Header   | Second Header\n-------------- | -------------\nCell 1 content | Content from cell 2\nAnother row    | Cell 2 second row\n```\n\nDefinition lists\n: This is such a list with definition terms and description pairs. These are used to list function parameters.\n\n```\nterm 1\n: Description for term 1\n\nterm 2:\n: Description for term 2\n```\n\nType information\n: Type denotations for parameters and return values are written with special syntax to allow them to be rendered clearly. The type text is arbitrary, but for consistency, use the following forms:\n\n```\n[type:object]\n[type:vector3]\n[type:vector4]\n[type:vector]\n[type:quaternion]\n[type:url]\n[type:hash]\n[type:boolean]\n[type:table]\n[type:number]\n[type:string]\n[type:constant]\n\n// Multiple types possible\n[type:string|hash|url]\n\n// Function signature\n[type:function(self, transaction, error)]\n```\n\nIcons\n: Icons can be included in the documents to call attention to some text, indicate a platform specific note etc.\n\n```\n[icon:attention]\n[icon:ios]\n[icon:android]\n[icon:macos]\n[icon:linux]\n[icon:windows]\n[icon:google]\n[icon:amazon]\n```\n\nReferences\n: Cross references can be created by the following forms:\n\n```\n// Expands to a link to \"get_id\" in the current document\n[ref:get_id]\n\n// Expands to a link to \"get_id\" in the \"go\" document\n[ref:go.get_id]\n```\n\nCustom span classes\n: Generic forms `[name:text]` that does not match \"icon\", \"type\" or \"ref\" are expanded to span elements with class `name`:\n\n```\n// Expands to <span class=\"mark\">READ ONLY</span>\n[mark:READ ONLY]\n```\n\n## Documentation formatting\n\nDocumentation comments are denoted by comments in the following format, a standard multiline C/C++ comment with an appended hash character:\n\n```\n/*#\n *\n */\n```\n\nAn API document usually consists of a series of doc comments, each one containing documentation for a function, a @message, a @property, a @variable or the @document itself.\n\nThe first line of the comment contains a one line BRIEF of what the comment is about and subsequent lines up to the first type tag (denoted by '@' + the type name) should contain a DESCRIPTION. These blocks of text are processed by Markdown and can thus contain either markdown syntax or plain HTML.\n\n```\n/*# this is the one line concise brief of this doc comment\n * Here follows a description of the doc comment. This could span any number of\n * lines and should in general describe the functionality or use of the function,\n * message, variable or property in question.\n *\n * - Here is a bulleted list\n * - With a set of things that make this doc comment nice\n * - And easy to understand\n *\n * @some_valid_type\n * @name some name\n */\n```\n\nAll doc comment types require a @name tag which is used to set a name for the doc comment. This is typically the name of the function, variable or property.\n\n## The @document tag\n\nSince the documentation for a specific namespace (component or feature) might span several files, a documentation information doc comment should be added to each file.\n\nThe @document comment should contain a brief, a description, what @namespace the documentation belongs to (so it can be grouped with documentation from other files) as well as a @name:\n\n```\n/*# MyFeature API documentation\n *\n * Functions and constants for interacting with MyFeature APIs.\n *\n * @document\n * @name MyFeature\n * @namespace myfeature\n */\n```\n\n## Functions\n\nThere is no function tag. If the doc comment does not contain any of the other valid type tags, the type is implicitly set to function.\n\n```\n/*# decode JSON from a string to a lua-table\n * Decode a string of JSON data into a Lua table.\n * A Lua error is raised for syntax errors.\n *\n * @name json.decode\n * @param json [type:string] json data\n * @return data [type:table] decoded json\n *\n */\n```\n\n## The @message, @variable and @property tags\n\nUse these tags to denote doc comments for messages:\n\n```\n/*# applies a force on a collision object\n * Post this message to a collision-object-component to apply the specified force on the collision object.\n * The collision object must be dynamic.\n *\n * @message\n * @name apply_force\n * @param force [type:vector3] the force to be applied on the collision object, measured in Newton\n * @param position [type:vector3] the position where the force should be applied\n * @examples\n *\n * Assuming the instance of the script has a collision-object-component with id \"co\":\n *\n * ```lua\n * -- apply a force of 1 Newton towards world-x at the center of the game object instance\n * msg.post(\"#co\", \"apply_force\", {force = vmath.vector3(1, 0, 0), position = go.get_world_position()})\n * ```\n */\n```\n\nand for variables/constants:\n\n```\n/*# RGB image type\n *\n * @name image.TYPE_RGB\n * @variable\n */\n```\n\nFor properties, the type of the property is written first in the brief.\n\n```\n/*# [type:vector3] game object position\n *\n * The position of the game object.\n * The type of the property is vector3.\n *\n * @name position\n * @property\n *\n * @examples\n *\n * How to query a game object's position, either as a vector3 or selecting a specific dimension:\n *\n * ```lua\n * function init(self)\n *   -- get position from \"player\"\n *   local pos = go.get(\"player\", \"position\")\n *   local posx = go.get(\"player\", \"position.x\")\n *   -- do something useful\n *   assert(pos.x == posx)\n * end\n * ```\n */\n```\n\n## The @param tag\n\nFor functions and messages, the @param tag is used to denote the parameters the function or message takes. Each parameter starts with the @param tag, followed by a string of characters that make out the name of the parameter, a whitespace and then the documentation for the parameter which runs until the next @tag or end of the doc comment.\n\n```\n * @param name_of_parameter documentation of the parameter. This documentation can\n * run for several lines up until the next @tag.\n * @param another_parameter documentation of the second parameter.\n```\n\nOptional parameters are written with the name surrounded by square brackets:\n\n```\n * @param [optional_parameter] documentation of the parameter\n```\n\nType information for parameters are by convention written first in the documentation:\n\n```\n * @param parameter_name [type:some_type] documentation of the parameter\n```\n\nAlso by convention definition lists are used to lay out the details of function argument signatures, like callback functions. The type of each function argument is written first in the definition description:\n\n```\n/*# set transaction listener\n *\n * Set the callback function to receive transaction events.\n *\n * @name iap.set_listener\n * @param listener [type:function(self, transaction, error)] listener callback function\n *\n * `self`\n * : [type:object] The current object.\n *\n * `transaction`\n * : [type:table] a table describing the transaction. The table contains the following fields:\n *\n * - `ident`: product identifier\n * - `state`: transaction state\n * - `date`: transaction date\n * - `original_trans`: original transaction (only set when state == TRANS_STATE_RESTORED)\n * - `trans_ident` : transaction identifier (only set when state == TRANS_STATE_RESTORED, TRANS_STATE_UNVERIFIED or TRANS_STATE_PURCHASED)\n * - `request_id`: transaction request id. (only if receipt is set and for transactions when used in the iap.buy call parameters)\n * - `receipt`: receipt (only set when state == TRANS_STATE_PURCHASED or TRANS_STATE_UNVERIFIED)\n *\n * `error`\n * : [type:table] a table containing any error information. The error parameter is `nil` on success.\n *\n */\n```\n\n## The @return tag\n\nThe @return tag is used identically as the @param tag. Each return value starts with the @return tag, followed by a string of characters that make out the name of the parameter, a whitespace and then the documentation for the value which runs until the next @tag or end of the doc comment.\nThe return value is named to allow for clearer description of multiple return values.\n\n```\n * @return rms_left [type:number] RMS value for left channel\n * @return rms_right [type:number] RMS value for right channel\n```\n\n## The @examples tag\n\nThis tag gathers documentation for example usages. The documentation runs up to the next valid @tag or to the end of the doc comment.\n\n```\n * @examples\n *\n * How to start a simple color animation, where the node fades in to white during 0.5 seconds:\n *\n * ```lua\n * gui.set_color(node, vmath.vector4(0, 0, 0, 0)) -- node is fully transparent\n * gui.animate(node, gui.PROP_COLOR, vmath.vector4(1, 1, 1, 1), gui.EASING_INOUTQUAD, 0.5) -- start animation\n * ```\n *\n * How to start a sequenced animation where the node fades in to white during 0.5 seconds, stays visible for 2 seconds and then fades out:\n *\n * ```lua\n * local function on_animation_done(self, node)\n *     -- fade out node, but wait 2 seconds before the animation starts\n *     gui.animate(node, gui.PROP_COLOR, vmath.vector4(0, 0, 0, 0), gui.EASING_OUTQUAD, 0.5, 2.0)\n * end\n *\n * function init(self)\n *     -- fetch the node we want to animate\n *     local my_node = gui.get_node(\"my_node\")\n *     -- node is initially set to fully transparent\n *     gui.set_color(my_node, vmath.vector4(0, 0, 0, 0))\n *     -- animate the node immediately and call on_animation_done when the animation has completed\n *     gui.animate(my_node, gui.PROP_COLOR, vmath.vector4(1, 1, 1, 1), gui.EASING_INOUTQUAD, 0.5, 0.0, on_animation_done)\n * end\n * ```\n```\n"
        },
        {
          "name": "README_EMSCRIPTEN.md",
          "type": "blob",
          "size": 7.4580078125,
          "content": "# Emscripten\n\n**TODO**\n\n* Run all tests\n* In particular (LuaTableTest, Table01) and setjmp\n* Profiler (disable http-server)\n* Non-release (disable engine-service)\n* Verify that exceptions are disabled\n* Alignments. Alignment to natural boundary is required for emscripten. uint16_t to 2, uint32_t to 4, etc\n  However, unaligned loads/stores of floats seems to be valid though.\n* Create a node.js package with uvrun for all platforms (osx, linux and windows)\n\n## Updating emscripten version\n\nNote: This information is based on the latest update (3.1.55 -> 3.1.65)\n\n* update the `EMSCRIPTEN_VERSION_STR` in `scripts/build.py`\n* package_emscripten:\n  - update the `VERSION` to the new version\n  - run the script `./script/package/package_emscripten.sh` on both OSX (x86_64 and arm64) and linux (x86_64) (tested on ubuntu 22.x)\n  - copy the artifact(s) from the `local_sdk` folder to the s3-bucket `defold-packages`\n* run `./scripts/build.py install_ems` to get the latest sdk for your host platform\n* build protobuf for js-web and wasm-web (ubuntu/linux) and copy into the `defold/packages` folder\n* build bullet3d for js-web and wasm-web (ubuntu/linux)\n  - `./scripts/build.py build_external --platform=js-web`\n  - `./scripts/build.py build_external --platform=wasm-web`\n  - these are automatically copied to packages\n* building:\n  - refresh the shell (`exit` + subsequent `scripts/build.py shell`)\n  - make sure `$EMSCRIPTEN` points to the updated version\n    - occasionally there has been issues with `fastcomp` vs `upstream` in the path so make sure the folder from the env variable exists\n\n## Create SDK Packages (DEPRECATED?)\n\n* Download [emsdk_portable](http://kripken.github.io/emscripten-site/docs/getting_started/downloads.html)\n* Compile on 32-bit Linux\n* Run `emsdk update` and `emsdk install`\n* On Linux first remove the following directories\n  - `emsdk_portable/clang/fastcomp/src`\n  - Everything **apart** from `emsdk_portable/clang/fastcomp/build_master_32/bin`\n  - Strip debug information from files in `emsdk_portable/clang/fastcomp/build_master_32/bin`\n* Create a tarball of the package\n* Upload packages to s3-bucket `defold-packages`\n\nIn order to run on 64-bit Ubuntu install the following packages `lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6`\n\n## Installation\n\nTo install the emscripten tools, invoke 'build.py install_ems'.\n\nEmscripten creates a configuration file in your home directory (~/.emscripten).Should you wish to change branches to one\nin which a different version of these tools is used then call 'build.py activate_ems' after doing so. This will cause the .emscripten file to be updated.\n\nEmscripten also relies upon python2 being on your path. You may find that this is not the case (which python2), it should be sufficient to create a symbolic link to\nthe python binary in order to solve this problem.\n\nwaf_dynamo contains changes relating to emscripten. The simplest way to collect these changes is to run 'build_ext'\n\n    > scripts/build.py install_ext\n\nBuilding for js-web requires installation of the emscripten tools. This is a slow process, so not included in install_ext, instead run install_ems:\n\n    > scripts/build.py install_ems\n\nAs of 1.22.0, the emscripten tools emit separate *.js.mem memory initialisation files by default, rather than embedding this data directly into files.\nThis is more efficient than storing this data as text within the javascript files, however it does add to a new set of files to include in the build process.\nShould you wish to manually update the contents of the editor's engine files (com.dynamo.cr.engine/engine/js-web) then remember to include these items in those\nthat you copy. Build scripts have been updated to move these items to the expected location under *DYNAMO HOME* (bin/js-web), as has the copy_dmengine.sh script.\n\n## Running Headless Builds\n\nIn order to run headless builds of the engine, take the following steps:\n\n* Ensure that you have installed the [xhr2 node module](https://www.npmjs.org/package/xhr2)\n* Select or create a folder in which to run your test\n* Copy dmengine_headless.js, dmengine_headless.js.mem, game.darc and game.projectc into your folder\n* Run dmengine_headless.js with node.js\n\nSince game.darc and game.projectc are not platform specific, you may copy these from any project bundle built with the same engine version that you wish to\ntest against.\n\nWhen running headless builds, you may also find it useful to install [node-inspector](https://github.com/node-inspector/node-inspector). Note that it operates on\nport 8080 by default, so either close your Defold tools or change this port when running such builds.\n\nTo get working keyboard support (until our own glfw is used or glfw is gone):\n- In ~/local/emscripten/src/library\\_glfw.js, on row after glfwLoadTextureImage2D: ..., add:\nglfwShowKeyboard: function(show) {},\n\nTo use network functionality during development (or until cross origin support is added to QA servers):\n- google-chrome --disable-web-security\n- firefox requires a http proxy which adds the CORS headers to the web server response, and also a modification in the engine is required.\n\nSetting up Corsproxy with defold:\nTo install and run the corsproxy on your network interface of choice for example 172.16.11.23:\n```sh\nsudo npm install -g corsproxy\ncorsproxy 172.16.11.23\n```\n\nThen, the engine needs a patch to change all XHR:s:\n- remove the line engine/script/src/script_http_js.cpp:\n```\nxhr.open(UTF8ToString(method), UTF8ToString(url), true);\n```\n- and add\n```\nvar str_url = UTF8ToString(url);\nstr_url = str_url.replace(\"http://\", \"http://172.16.11.23:9292/\");\nstr_url = str_url.replace(\"https://\", \"http://172.16.11.23:9292/\");\nxhr.open(UTF8ToString(method), str_url, true);\n```\n\nFor faster builds, change in scripts/build.py -O3 to -O1 in CCFLAGS, CXXFLAGS and LINKFLAGS\nTo profile in the browser, add -g2 to CCFLAGS, CXXFLAGS and LINKFLAGS. This will cause function names and whitespaces to remain in the js file but also increases the size of the file.\n\nSome flags that is useful for emscripten projects would be to have:\n-s ERROR_ON_UNDEFINED_SYMBOLS=1\n'-fno-rtti'. Can't be used at the moment as gtest requires it, but it would be nice to have enabled\n\n## Debugging\n\nEmscripten have several useful features for debugging, and it's really good to read their article about debugging in full (https://kripken.github.io/emscripten-site/docs/porting/Debugging.html). For general debugging it's good to read up on JavaScript maps which will be generated by emscripten if you compile with `-gsource-map`. JavaScript maps will allow the browser to translate the minified JavaScript into C/C++ file and line information so you can actually place breakpoints and watch variables from the real source code.\n\nTo debug memory and alignment issues the following parameters should be added both to `CCFLAGS`/`CXXFLAGS` and `LINKFLAGS` in `waf_dynamo.py` for the web target. It is important to note that this will decrease runtime performance, and significantly increase compile time, therefore it should only be used when debugging these kinds of issues.\n\n- `-gsource-map` should be **added** to build with additional debug symbols.\n- `-s ASSERTIONS=1` should be **added** explicitly since they are otherwise turned off by optimizations.\n- `-s SAFE_HEAP=1` should be **added** to enable additional memory access checks.\n- `-s STACK_OVERFLOW_CHECK=2` should be **added** to enable additional stack checks.\n- `-s AGGRESSIVE_VARIABLE_ELIMINATION=1` should be **removed**, otherwise errors might be ignored.\n- `-s DISABLE_EXCEPTION_CATCHING=1` should be **removed**, otherwise errors might be ignored.\n"
        },
        {
          "name": "README_IOS.md",
          "type": "blob",
          "size": 4.5966796875,
          "content": "# iOS\n\n## Setup\n\n### Install XCode\n* Install from AppStore (if not already installed)\n* Start XCode\n* When asked, enable “Developer mode” on your mac\n* In Preferences -> Accounts\n    ** Add a new account, use your Apple ID\n    ** You should now see the account and that its team membership\n* You also need to set up a Provisioning Profile. This is done in Xcode->Preferences->Accounts. Double-click and a window should appear with IDs in the top half and Provisioning Profiles in the bottom half. Select the profile you want (e.g. \"`iOS Team Provision Profile: *`\"). Use the downloaded profile when deploying to an iOS device.\n\nAfter installation of XCode (and each update!) you need to create a symbolic link to iOS sdk:\n\n    $ sudo ln -s /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS10.3.sdk\n\n\n\n## iOS Debugging\n\n### Setup XCode project\n\n* Make sure that you build with **--disable-ccache**. Otherwise lldb can't set breakpoints (all pending). The reason is currently unknown. The --disable-ccache option is available in waf and in build.py.\n* Create a new empty iOS project (Other/Empty)\n* Create a new scheme with Product -> Scheme -> New Scheme...\n* Select executable (dmengine.app)\n* Make sure that debugger is lldb. Otherwise debuginfo is not found for static libraries when compiled with clang for unknown reason\n\nSee also: [Attaching to Process](http://stackoverflow.com/questions/9721830/attach-debugger-to-ios-app-after-launch)\n\n\n### ios-deploy\n\nGood tool for iOS deployment / debugging (lldb): [ios-deploy](https://github.com/phonegap/ios-deploy)\n\n    $ ios-deploy --bundle test.ipa\n\nor\n\n\t$ ios-deploy --debug --bundle test.app\n\n### QuickLook plugin for .ipa and .mobileprovision\n\nIt's often required to peek inside the permissions of a package or mobile provisioning file.\nFor this you can install [ProvisionQL](https://github.com/ealeksandrov/ProvisionQL)\n\n        $ brew cask install provisionql\n\n## iOS Crashdumps\n\nFrom: [http://stackoverflow.com/a/13576028](http://stackoverflow.com/a/13576028)\n\n    symbol address = slide + stack address - load address\n\n* The slide value is the value of vmaddr in LC_SEGMENT cmd (Mostly this is 0x1000). Run the following to get it:\n\n    `$ otool -arch ARCHITECTURE -l \"APP_BUNDLE/APP_EXECUTABLE\" | grep -B 3 -A 8 -m 2 \"__TEXT\"`\n\n    Replace ARCHITECTURE with the actual architecture the crash report shows, e.g. armv7. Replace APP_BUNDLE/APP_EXECUTABLE with the path to the actual executable.\n\n* The stack address is the hex value from the crash report.\n\n* The load address can be is the first address showing in the Binary Images section at the very front of the line which contains your executable. (Usually the first entry).\n\n\n## Update SDK\n\nBoth iPhoneOS + macOS SDK's use the same steps to update.\n\n### Check what's been updated\n\nTo make sure you know what's been changed, you can check this page: https://developer.apple.com/library/content/releasenotes/General/WhatsNewIniOS/Introduction/Introduction.html#//apple_ref/doc\n\nFrom XCode 9.+ and onwards, you'll see the added/modified/deprecated items here: https://developer.apple.com/documentation?changes=latest_major\n\n### Download latest stable XCode\n\n    https://developer.apple.com/download/more/\n\n### Package SDK (iPhone, iPhone Simulator, MacOS, Xcode toolchain)\n\nSee the script under `scripts/package`\n\n#### How to test locally on the engine build:\n\n    $ tar -xvf iPhoneOS11.2.sdk.tar.gz -C $DYNAMO_HOME/ext/SDKs\n    $ tar -xvf XcodeToolchain9.2.sdk.tar.gz -C $DYNAMO_HOME/ext/SDKs\n    $ tar -xvf MacOSX10.12.sdk.tar.gz -C $DYNAMO_HOME/ext/SDKs\n\n### Build.py\n\nUpdate the sdk version(s).\nIn ```install_ext```, update the commands if needed.\n\n### waf_dynamo.py\n\nUpdate the sdk version(s) at the top of the file\n\n### Native Extension\n\n#### Dockerfile\n\nOpen ```extender/server/docker-base/Dockerfile```\n\nMake sure you unpack the package with the correct version number!\nHere, the package is downloaded and extracted to 'iPhoneOSXxx.sdk',\nmaking sure that the contained library has a version number!\n\n    NOTE: If it doesn't have a version number, it will bug out in subtle ways (E.g. the device orientation events won't fire properly)\n\n    RUN \\\n      wget -q -O - ${DM_PACKAGES_URL}/iPhoneOS11.2.sdk.tar.gz | tar xz -C /opt\n\n### Defold SDK (build.yml)\n\nAlso, you should update the list of `allowedLibs` in the `defold/share/extender/build.yml` for both iOS and OSX. The easiest way to do that is to use the `defold/share/extender/find_libs_apple.sh` (after running `./scripts/build.py install_ext` to download the packages to `$DYNAMO_HOME`)\n"
        },
        {
          "name": "README_SETUP.md",
          "type": "blob",
          "size": 11.7802734375,
          "content": "# Setup Engine\n\n(Setup instructions for the editor [here](/editor/README.md)).\n\n## Required Software\n\n### Platform SDK\n\nTo make contributions easier, we detect local installations of the common platform SDK's:\n\n* macOS + iOS: [XCode](https://apps.apple.com/us/app/xcode/id497799835)\n* Linux: [Clang++](https://apt.llvm.org/)\n* Windows: [Visual Studio Community 2022](https://visualstudio.microsoft.com/vs/older-downloads/)\n  * We also require Clang:\n    * In Visual Studio Installer, under Individual components, select *C++ Clang Compiler for Windows* and *MSBuild support for LLVM (clang-cl) toolset*.\n    * Add clang to your PATH. For a default installation, the path to add will likely be C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\Llvm\\bin\n* Android: [Android Studio](https://developer.android.com/studio)\n\nFor consoles, we refer to each vendor's installation notes.\n\n### Package managers\n\n<details><summary>Windows...</summary><p>\n\n* [Chocolatey](https://chocolatey.org/docs/installation) - Chocolatey is a package installer that will help install various helper tools such as python, ripgrep etc.\n\nOpen a Command (cmd.exe) as administator and run:\n\n```sh\n@\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"\n```\n\nOnce this is done, you can install new packages which are added to the PATH, by running:\n\n```sh\nchoco install <package_name>\n```\n</p></details>\n\n### Required Software - Java JDK 21\n\nDownload and install the latest JDK 21 (21.0.5 or later) release from either of these locations:\n\n* [Adoptium/Temurin](https://github.com/adoptium/temurin21-binaries/releases) - The Adoptium Working Group promotes and supports high-quality runtimes and associated technology for use across the Java ecosystem\n* [Microsoft OpenJDK builds](https://docs.microsoft.com/en-us/java/openjdk/download#openjdk-21) - The Microsoft Build of OpenJDK is a no-cost distribution of OpenJDK that's open source and available for free for anyone to deploy anywhere\n\n\n<details><summary>Windows...</summary><p>\n\nOr install using Chocolatey:\n\n```sh\nchoco install temurin21\n```\n\n*With choco, the install path is something like /c/Program\\ Files/OpenJDK/openjdk-21.0.5_11*\n</p></details>\n\n<details><summary>Linux...</summary><p>\n  \nOr install from apt-get:\n\n```\n> sudo apt install openjdk-21-jdk\n```\n</p></details>\n\nWhen Java is installed you may also add need to add java to your PATH and export JAVA_HOME:\n\n```sh\n> nano ~/.bashrc\n\nexport JAVA_HOME=<JAVA_INSTALL_PATH>\nexport PATH=$JAVA_HOME/bin:$PATH\n```\n\nVerify that Java is installed and working:\n\n```sh\n> javac -version\n```\n\n\n### Required Software - Python 3\n\nYou need a 64 bit Python 3 version (x86_64) to build the engine and tools. The latest tested on all platforms is Python 3.10.5.\n\n* Install via https://www.python.org/downloads/release/python-3105/\n\n<details><summary>macOS...</summary><p>\n  \nOnce Python has been installed you also need install certificates (for https requests):\n\n```sh\n> /Applications/Python\\ 3.10/Install\\ Certificates.command\n```\n</p></details>\n\n<details><summary>Windows...</summary><p>\n\nOr install using Chocolatey:\n\n```sh\nchoco install python\n```\n</p></details>\n\n<details><summary>Linux...</summary><p>\n  \nYou also need `easy_install` to install additional packages.\n</p></details>\n\n\n\n### Required Software - DotNet 9\n\n(optional)\n\n*NOTE* The DotNet 9 preview currently only supports macOS platform\n\nIn order to build and test the csharp languange bindings locally, you need to install DotNet.\n\n<details><summary>Install...</summary><p>\n\nThere are a few ways to install the DotNet sdk:\n\n* Install via https://dotnet.microsoft.com/en-us/download/dotnet/9.0\n* Install via your package manager\n  * macOS: `brew install dotnet-sdk@preview`\n  * Windows: `choco install dotnet --pre`\n\n* Install via [dotnet-install.sh](https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script):\n\nBash:\n```sh\n> ./dotnet-install.sh --channel 9.0 --quality preview\n```\n\nPowerShell (Windows):\n```sh\n> ./dotnet-install.ps1 -Channel 9.0 -Quality preview\n```\n</p></details>\n\n### Required Software\n\n<details><summary>macOS...</summary><p>\n\n#### XCode\n\nwe use [XCode](https://apps.apple.com/us/app/xcode/id497799835) for building and debugging macOS + iOS targets.\n\n</p></details>\n\n<details><summary>Windows...</summary><p>\n\n#### Visual C++ 2022 Community\n\n[Download](https://visualstudio.microsoft.com/vs/older-downloads/) the Community version or use the Professional or Enterprise version if you have the proper licence. When installing, select the \"Desktop Development with C++\" workload. There is also an optional 3rd party git client.\nAlso, make sure to install the \"clang++\" compiler as well.\n\n#### Terminal\n\nhttps://aka.ms/terminal\n\nThe `git-bash` setup can also install a setup for the Windows Terminal app.\n\nThis terminal has the tool `winget` to install some packages.\n\n#### Git Bash\n\nThis installs both Git as well as a Terminal addon to allow you to use a *nix like bash terminal,\nmaking it much easier to build Defold through.\n\nDownload: [Git For Windows](https://gitforwindows.org)\n\n#### Git\n\nThis is not needed if you've installed `git-bash`\n\nYou need to [download](https://git-scm.com/download/win) a command line version of Git.\n\nDuring install, select the option to not do any CR/LF conversion.\n\nYou most likely want to set up working with ssh keys as well.\n\n### SSH Keys\n\n#### Using Git Gui\n\n- Run Git GUI\n- Help > Show SSH Key\n- If you don't have an SSH Key, press Generate Key\n- Add the public key to your Github profile\n- You might need to run `start-ssh-agent` (in `C:\\Program Files\\Git\\cmd`)\n\n\n#### Command line\n\nAlternatively, you can easily create your own key from command line:\n\n```sh\n$ ssh-keygen -t ed25519 -C \"your_email@example.com\"\n# Copy the contents of the public file\n$ cat ~/.ssh/id_ed25519.pub\n# Add the public key to your Github profile (under the Setting tab on your github user profile)\n# Test your new key:\n$ ssh -T git@github.com\n```\n\nNow you should be able to clone the defold repo from a command prompt:\n\n```sh\n> git clone git@github.com:defold/defold.git\n```\n\nIf this won't work, you can try cloning using Github Desktop.\n</p></details>\n\n<details><summary>Linux...</summary><p>\n\n#### Additional tools\n\nYou need additional files and tools to be able to build and work with Defold on Linux:\n\n**Development files**\n* **libxi-dev** - X11 Input extension library\n* **libxext-dev** - X11 Miscellaneous extensions library\n* **x11proto-xext-dev** - X11 various extension wire protocol\n* **freeglut3-dev** - OpenGL Utility Toolkit development files\n* **libglu1-mesa-dev** + libgl1-mesa-dev + mesa-common-dev - Mesa OpenGL development files\n* **libcurl4-openssl-dev** - Development files and documentation for libcurl\n* **uuid-dev** - Universally Unique ID library\n* **libopenal-dev** - Software implementation of the OpenAL audio API\n* **libncurses5** -  Needed by clang\n\n**Tools**\n* **build-essential** - Compilers\n* **rpm** - package manager for RPM\n* **git** - Fast, scalable, distributed revision control system\n* **curl** - Command line tool for transferring data with URL syntax\n* **autoconf** - Automatic configure script builder\n* **libtool** - Generic library support script\n* **automake** - Tool for generating GNU Standards-compliant Makefiles\n* **cmake** - Cross-platform, open-source make system\n* **tofrodos** - Converts DOS <-> Unix text files\n* **valgrind** - Instrumentation framework for building dynamic analysis tools\n\nDownload and install using `apt-get`:\n\n```sh\n> sudo apt-get install -y --no-install-recommends libssl-dev openssl libtool autoconf automake build-essential uuid-dev libxi-dev libopenal-dev libgl1-mesa-dev libglw1-mesa-dev freeglut3-dev libncurses5\n```\n</p></details>\n\n---\n\n## Optional Software\n\nIt is recommended but not required that you install the following software:\n\n<details><summary>macOS...</summary><p>\n\n* **wget** + **curl** - for downloading packages (used for downloading packages in different scripts)\n* **7z** - for extracting packages (archives and binaries)\n* **ccache** - for faster compilations of source code (optional)\n* **cmake** for easier building of external projects\n* **patch** for easier patching on windows (when building external projects)\n* **ripgrep** for faster search\n* **dos2unix** tool to convert line endings of certain source files (e.g. when building files in `share/ext`)\n\nQuick and easy install:\n\n```sh\n> brew install wget curl p7zip ccache ripgrep dos2unix\n```\n\nConfigure `ccache` by running ([source](https://ccache.samba.org/manual.html))\n\n```sh\n> /usr/local/bin/ccache --max-size=5G\n```\n</p></details>\n\n<details><summary>Windows...</summary><p>\n\n* **wget** + **curl** - for downloading packages (used for downloading packages in different scripts)\n* **7z** - for extracting packages (archives and binaries)\n* **ccache** - for faster compilations of source code (optional)\n* **cmake** for easier building of external projects\n* **patch** for easier patching on windows (when building external projects)\n\nQuick and easy install:\n\n```sh\n> pip install cmake patch\n```\n\nConfigure `ccache` by running ([source](https://ccache.samba.org/manual.html))\n\n```sh\n> /usr/local/bin/ccache --max-size=5G\n```\n\n* [ripgrep](https://github.com/BurntSushi/ripgrep) - A very fast text search program (command line)\n\nOpen a Command (cmd.exe) as administrator and run:\n\n`choco install ripgrep`\n</p></details>\n\n<details><summary>Linux...</summary><p>\n\n* **wget** + **curl** - for downloading packages (used for downloading packages in different scripts)\n* **7z** - for extracting packages (archives and binaries)\n* **ccache** - for faster compilations of source code (optional)\n* **cmake** for easier building of external projects\n* **patch** for easier patching on windows (when building external projects)\n* **snapd** for installing snap packages\n* **ripgrep** for faster search\n\nQuick and easy install:\n\n```sh\n> sudo apt-get install wget curl p7zip ccache\n```\n\nConfigure `ccache` by running ([source](https://ccache.samba.org/manual.html))\n\n```sh\n> ccache --max-size=5G\n```\n\nInstall snapd package manager:\n\n```sh\n> sudo apt install snapd\n```\n\nInstall ripgrep:\n\n```sh\n> sudo snap install ripgrep --classic\n```\n</p></details>\n\n---\n\n## Optional Setup\n\n### Optional Setup - Command Prompt\n\nIt's useful to modify your command prompt to show the status of the repo you're in.\nE.g. it makes it easier to keep the git branches apart.\n\nYou do this by editing the `PS1` variable. Put it in the recommended config for your system (e.g. `.profile` or `.bashrc`)\nHere's a very small improvement on the default prompt, whic shows you the time of the last command, as well as the current git branch name and its status:\n\n```sh\ngit_branch() {\n    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/(\\1)/'\n}\nacolor() {\n  [[ -n $(git status --porcelain=v2 2>/dev/null) ]] && echo 31 || echo 33\n}\nexport PS1='\\t \\[\\033[32m\\]\\w\\[\\033[$(acolor)m\\] $(git_branch)\\[\\033[00m\\] $ '\n```\n---\n\n## WSL (Windows Subsystem for Linux)\n\n<details><summary>Linux...</summary><p>\n\nIt is possible to build Linux targets using WSL 1.\n\nInstall relevant packages (git, java, python, clang etc) using `./scripts/linux/install_wsl_packages.sh`.\nIf also updates your `~/.bashrc` with updated paths.\n\n### Git clone into a mounted folder\n\nIn order to get the proper username of your files, we need to setup WSL for this.\nOtherwise the git clone won't work in a mounted C: drive folder.\n\nOpen (or create) the config file:\n```\nsudo nano /etc/wsl.conf\n```\n\nAdd these lines:\n```\n[automount]\noptions = \"metadata\"\n```\n\nAnd restart your WSL session\n\n\n### X11\n\nThe script also sets the `DISPLAY=localhost:0.0` which allows you to connect to a local X server.\n\nA popular choice is [VCXSRV](https://sourceforge.net/projects/vcxsrv/)\n</p></details>\n"
        },
        {
          "name": "RELEASE.md",
          "type": "blob",
          "size": 6.7333984375,
          "content": "# Release guide\n\n## Release branches/channels\n* Alpha - git branch: dev\n* Beta - git branch: beta\n* Stable - git branch: master\n\n## Alpha\nThe alpha channel is automatically released for every successful push to dev.\n\n## Beta\n\n* If there is a pending Native Extension server change, [publish the stage server](https://github.com/defold/extender/blob/dev/README.md#releasing-stage-server), which updates https://build-stage.defold.com.\n\n1. Merge `editor-dev` into `dev`\n\n        $ git checkout editor-dev\n        $ git pull\n        $ git checkout dev\n        $ git pull\n        $ git merge editor-dev\n        $ git push\n\n1. Merge `dev` into `beta`\n\n        $ git checkout beta\n        $ git pull\n        $ git merge dev\n        $ git push\n\n    Beta channel is automatically released for every successful push to beta.\n\n1. Collect release notes using `python scripts/releasenotes_github_projectv2.py` and post on [forum.defold.com](https://forum.defold.com/c/releasenotes)\nand add the \"BETA\" tag to the headline\n\n* Note: The release notes script requires a github access token to work correctly (https://github.com/settings/tokens). If the token is incorrect, you will likely get an error saying 'Unable to find GitHub project for version x.x.x'. Create a \"classic\" github token and add permissions to read projects. If the script still fails, you might need more permissions.\n\n### Update private repos\n\n1. Also update the beta for the console platforms\n\n        $ cd defold-platform\n        $ git checkout dev\n        $ git pull\n\n        $ git checkout beta\n        $ git pull\n        $ git merge dev\n        $ git fetch upstream\n        $ git merge upstream/beta\n        $ git push\n\n## Stable\n\n1. If there is a pending Native Extension server change, [publish the production server](https://github.com/defold/extender#releasing), which updates https://build.defold.com\n\n1. Switch to master branch, merge from beta:\n\n        $ git checkout master\n        $ git pull\n        $ git merge beta\n\n1. Push master!\n\n        $ git push\n\n    This will trigger a build of the engines and editors for stable.\n    Make a note of the release sha1 (the latest commit to the master branch on GitHub)\n\n    * The build will be tagged and published to S3 and to [GitHub Releases](https://github.com/defold/defold/releases)\n\n    * The refdoc will be updated in the [defold.github.io](https://github.com/defold/defold.github.io) repo\n\n1. Merge `master` into `editor-dev`:\n\n        $ git checkout editor-dev\n        $ git pull\n        $ git merge master -m \"Merged master into editor-dev\"\n        $ git push\n\n    After a successful build, the editors are published under the stable engine tag in [GitHub Releases](https://github.com/defold/defold/releases)\n\n1. Merge `editor-dev` into `dev`:\n\n        $ cd defold\n        $ git checkout dev\n        $ git pull\n        $ git merge editor-dev -m \"Merged editor-dev into dev\"\n\n1. Bump version:\n\n        $ ./scripts/build.py bump\n        $ git diff\n        $ git add VERSION\n        $ git commit -m \"Bumped version to X.Y.Z\"\n        $ git push\n\n1. Repost the releasenotes on the [forum](https://forum.defold.com/) and remove the \"BETA\" part from the headline\n\n### Update private repos\n\n1. Update the master branch for the console platforms\n\n        $ cd defold-platform\n        $ git checkout beta\n        $ git pull\n        $ git checkout master\n        $ git pull\n        $ git merge beta\n\n        $ git fetch upstream\n        $ git merge upstream/master\n        $ git push\n\n\n1. Update the dev branch for the console platforms\n\n        $ cd defold-platform\n        $ git checkout master\n        $ git pull\n        $ git checkout dev\n        $ git pull\n        $ git merge master\n        $ git fetch upstream\n        $ git merge upstream/dev\n        $ git push\n\n\n## Release to Steam\n\nDeploying a release to Steam requires the Steam command line tool `steamcmd`. Authentication is performed using Multi-Factor Authentication (MFA) through Steam Guard.\n\n### Setup\n\nFor manual release to Steam:\n\n1. Install `steamcmd` on your local machine. You can either install using `brew install steamcmd` or by [downloading from Valve](https://partner.steamgames.com/doc/sdk/uploading#1) and adding `tools/ContentBuilder/builder_osx/steamcmd` to your path.\n\n1. Try to login with `steamcmd +login <username> <password> +quit`, which may prompt for the MFA code. If so, type in the MFA code that was emailed to the account's email address.\n\n1. Validate that the MFA process is complete by running `steamcmd +login <username> +quit` again. It should not ask for the MFA code again.\n\n\nFor automated release on CI (NOT ENABLED YET):\n\n1. After running `steamcmd` a `config.vdf` file will be created. The location varies depending on operating system. On macOS the file is located in `~/Library/Application Support/Steam/config`. \n\n1. Use `cat config.vdf | base64 > config_base64.txt` to encode the file. Copy the contents of `config_base64.txt` to the GitHub Secret `STEAM_CONFIG_VDF`.\n\n\nNOTE: If when running the action you recieve another MFA code via email, run `steamcmd +set_steam_guard_code <code>` on your local machine and repeat the `config.vdf` encoding and replace secret `STEAM_CONFIG_VDF` with its contents.\n\n\n## Manual release\n\n1. Run `release_to_steam` command:\n\n        $ ./scripts/build.py --version=1.4.8 release_to_steam\n\n1. Wait until command completes.\n\n1. Set build live (see below).\n\n\n## Automated release (NOT ENABLED YET)\n\n1. Commit code to master\n\n1. Wait for CI.\n\n1. Set build live (see below).\n\n\n## Set build live\n\nWhen the build has been uploaded it needs to be set live:\n\n1. Login to [https://partner.steamgames.com](https://partner.steamgames.com)\n\n1. Open build list for Defold: [https://partner.steamgames.com/apps/builds/1365760](https://partner.steamgames.com/apps/builds/1365760)\n\n1. Find your upload in the list and change the value in the `Set build live on branch` to `default`\n\n1. Update the Steam Community page with the release notes. Create a new post with the relase notes [using this link](https://steamcommunity.com/games/1365760/partnerevents/edit/). Write something like:\n\n```\nDefold 1.4.1 has been released\nThis new version can be downloaded by opening Defold and allowing the editor to self-update.\n\nAll releases can be downloaded at: https://github.com/defold/defold/releases\nOfficial forum thread with complete update notes: https://forum.defold.com/t/defold-1-4-1-has-been-released/72246\n```\n\n1. Announce the Stable release in other channels:\n\n* Twitter (https://x.com/defold)\n* LinkedIn (https://www.linkedin.com/company/53400322/admin/page-posts/published/?share=true)\n* Discord (usually done by Amel)\n* Telegram (usually done by Alexey)\n* WebGameDev Discord Native Engines channel (https://discord.com/channels/1032873609280106566/1052862658954670120)\n* Poki Discord (https://discord.com/channels/466173880751357963/940949540012433488)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.314453125,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nIf you have found a security vulnerability in any of the software or services we provide, please do not create an issue on the GitHub issue tracker as it will be visible publicly. Instead we would greatly appreciate if you would let us know by emailing security@defold.se.\n"
        },
        {
          "name": "TOOLS_LICENSES.md",
          "type": "blob",
          "size": 1.56640625,
          "content": "# Tools licenses\n\nThe Defold editor and command line tools are created and distributed under the developer-friendly Defold License. The Defold License is derived from the popular Apache 2.0 license. The license in its entirety can be [read here](/license.txt) with additional information to help you understand the [difference from the standard Apache 2.0 license here](https://defold.com/license/).\n\n[Learn how to comply with the required licenses in the games and applications you create using Defold](/COMPLYING_WITH_LICENSES.md).\n\nThe Defold editor and command line tools contains software written by third parties. Below is a list of software used by the editor and command line tools:\n\n## Software and licenses\n\nThe following software is used by the Defold editor and command line tools:\n\n  * BSD 2.0 license (3-clause license)\n    * [ANTLR](/licenses/NOTICE-antlr) - Used by the command line tools when parsing Lua files.\n    * [libogg](/licenses/NOTICE-libogg) - Used by the command line tools when validating `ogg` files.\n    * [Oggz](/licenses/NOTICE-oggz) - Used by the command line tools when validating `ogg` files.\n  * MIT\n    * [flame-chart-js](/licenses/NOTICE-flame-chart-js) - Used for producing bob.jar time profiling report\n    * [DataTables](/licenses/NOTICE-datatable) - Used for producing bob.jar time profiling report\n  * EPL 1.0\n    * [IconExe](/licenses/NOTICE-iconexe) - Used for replacing icons bundled in the .exe from bob.jar\n  * Apache 2.0\n    * [bundletool-all.jar](/licenses/NOTICE-bundletool) - Used by the command line tools when creating an Android App Bundle or APK.\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0048828125,
          "content": "1.9.7"
        },
        {
          "name": "apply_license.py",
          "type": "blob",
          "size": 6.9912109375,
          "content": "#!/usr/bin/env python3\n# Copyright 2020-2023 The Defold Foundation\n# Copyright 2014-2020 King\n# Copyright 2009-2014 Ragnar Svensson, Christian Murray\n# Licensed under the Defold License version 1.0 (the \"License\"); you may not use\n# this file except in compliance with the License.\n#\n# You may obtain a copy of the License, together with FAQs at\n# https://www.defold.com/license\n#\n# Unless required by applicable law or agreed to in writing, software distributed\n# under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n# CONDITIONS OF ANY KIND, either express or implied. See the License for the\n# specific language governing permissions and limitations under the License.\n\n\nimport os\nimport time\nimport re\nimport subprocess\n\nRE_LICENSE = r\"(.*?\\n?\\r?)[/#;-]?[/#;-]\\sCopyright .* The Defold Foundation.*specific language governing permissions and limitations under the License.(.*)\"\n\nYEAR = str(time.localtime().tm_year)\nLICENSE = ('''Copyright 2020-%s The Defold Foundation\nCopyright 2014-2020 King\nCopyright 2009-2014 Ragnar Svensson, Christian Murray\nLicensed under the Defold License version 1.0 (the \"License\"); you may not use\nthis file except in compliance with the License.\n\nYou may obtain a copy of the License, together with FAQs at\nhttps://www.defold.com/license\n\nUnless required by applicable law or agreed to in writing, software distributed\nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\nCONDITIONS OF ANY KIND, either express or implied. See the License for the\nspecific language governing permissions and limitations under the License.''') % YEAR\n\ndef license(comment):\n    return \"\\n\".join([comment + line for line in LICENSE.split(\"\\n\")])\n\n# map extensions to strings with the commented license\next_to_license = {\n    \".h\":             license(\"// \"),\n    \".c\":             license(\"// \"),\n    \".cpp\":           license(\"// \"),\n    \".inl\":           license(\"// \"),\n    \".m\":             license(\"// \"),\n    \".mm\":            license(\"// \"),\n    \".java\":          license(\"// \"),\n    \".sh\":            license(\"# \"),\n    \".py\":            license(\"# \"),\n    \".clj\":           license(\";; \"),\n    \".lua\":           license(\"-- \"),\n    \".script\":        license(\"-- \"),\n    \".gui_script\":    license(\"-- \"),\n    \".render_script\": license(\"-- \"),\n}\n\nexcluded_files = [\n    \"apply_license.py\",\n    \"engine/ddf/src/ddfc.py\",\n    \"engine/engine/contents/builtins/edn.lua\",\n    \"engine/engine/contents/builtins/mobdebug.lua\",\n    \"editor/bundle-resources/_defold/debugger/start.lua\",\n    \"com.dynamo.cr/com.dynamo.cr.bob.test/src/com/dynamo/bob/pipeline/test_props.lua\",\n    \"com.dynamo.cr/com.dynamo.cr.bob.test/src/com/dynamo/bob/pipeline/test_props_url.lua\",\n    \"com.dynamo.cr/com.dynamo.cr.bob.test/src/com/dynamo/bob/pipeline/test_props_number.lua\",\n    \"com.dynamo.cr/com.dynamo.cr.bob.test/src/com/dynamo/bob/pipeline/test_props_hash.lua\",\n    \"com.dynamo.cr/com.dynamo.cr.bob.test/src/com/dynamo/bob/pipeline/test_props_vec3.lua\",\n    \"com.dynamo.cr/com.dynamo.cr.bob.test/src/com/dynamo/bob/pipeline/test_props_vec4.lua\",\n    \"com.dynamo.cr/com.dynamo.cr.bob.test/src/com/dynamo/bob/pipeline/test_props_quat.lua\",\n    \"com.dynamo.cr/com.dynamo.cr.bob.test/src/com/dynamo/bob/pipeline/test_props_bool.lua\",\n    \"com.dynamo.cr/com.dynamo.cr.bob.test/src/com/dynamo/bob/pipeline/test_props_material.lua\",\n    \"editor/resources/templates/template.script\",\n    \"editor/resources/templates/template.gui_script\",\n    \"editor/resources/templates/template.render_script\",\n    \"editor/resources/templates/template.lua\",\n    \"engine/resource/src/test/empty.script\",\n    \"engine/resource/src/test/archive_data/file5.script\",\n    \"engine/resource/src/test/archive_data/liveupdate.file6.script\",\n    \"engine/liveupdate/src/ringbuffer.h\",\n    \"engine/dlib/src/remotery/lib/Remotery.c\",\n    \"engine/dlib/src/remotery/lib/RemoteryMetal.mm\",\n]\n\nexcluded_paths = [\n    \"./.git\",\n    \"./.github\",\n    \"./external\",\n    \"./engine/dlib/src/basis/encoder\",\n    \"./engine/dlib/src/basis/transcoder\",\n    \"./engine/dlib/src/dlib/jsmn\",\n    \"./engine/dlib/src/lz4\",\n    \"./engine/dlib/src/mbedtls\",\n    \"./engine/dlib/src/stb\",\n    \"./engine/dlib/src/jc\",\n    \"./engine/dlib/src/zlib\",\n    \"./engine/dlib/src/zip\",\n    \"./engine/glfw/tests\",\n    \"./engine/glfw/examples\",\n    \"./engine/lua\",\n    \"./engine/jni/scripts/external\",\n    \"./engine/physics/src/box2d\",\n    \"./engine/sound/src/stb_vorbis\",\n    \"./engine/script/src/bitop\",\n    \"./engine/script/src/luasocket\",\n    \"./com.dynamo.cr/com.dynamo.cr.bob/src/org/jagatoo\",\n]\n\ndryrun = False\n\n\ndef match_patterns(s, patterns):\n    for pattern in patterns:\n        if pattern in s:\n            return True\n    return False\n\ndef skip_path(path):\n    return match_patterns(path, excluded_paths)\n\ndef skip_filename(filepath):\n    return match_patterns(filepath, excluded_files)\n\ndef has_defold_license(s):\n    return re.search(RE_LICENSE, s[0:2000], flags=re.DOTALL) is not None\n\ndef has_other_license(s):\n    return (\"Copyright\" in s or \"License\" in s) and not (\"The Defold Foundation\" in s)\n\ndef get_license_for_file(filepath):\n    ext = os.path.splitext(filepath)[1]\n    if not ext in ext_to_license:\n        return None\n    return ext_to_license[ext]\n\ndef apply_license(license, contents):\n    # Preserve shebang\n    if contents.startswith(\"#!\"):\n        firstline = contents.partition('\\n')[0]\n        contents = contents.replace(firstline, \"\")\n        license = firstline + \"\\n\" + license\n    return license  + \"\\n\\n\" + contents\n\ndef check_ignored(path):\n    return subprocess.call(['git', 'check-ignore', '-q', path]) == 0\n\n\n\ndef process_file(filepath):\n    # skip ignored files\n    if skip_filename(filepath) or check_ignored(filepath):\n        return\n\n    license = get_license_for_file(filepath)\n    if not license:\n        return\n\n    with open(filepath, \"rb+\") as f:\n        contents = f.read().decode('utf-8')\n\n        # Some other license in the file\n        if has_other_license(contents):\n            return;\n\n        # Already applied the Defold License?\n        # Remove it and reapply if file has been modified after license year\n        if has_defold_license(contents):\n            contents = re.sub(RE_LICENSE, r\"\\1\" + license + r\"\\2\", contents, flags=re.DOTALL)\n            print(\"Updated: \" + filepath)\n        else:\n            contents = apply_license(license, contents)\n            print(\"Applied: \" + filepath)\n\n        if not dryrun:\n            f.seek(0)\n            f.write(contents.encode('utf-8'))\n            f.truncate()\n\n\nif __name__ == \"__main__\":\n    for root, dirs, files in os.walk(\".\", topdown=True):\n        # exclude dirs to avoid traversing them at all\n        # with topdown set to True we can make in place modifications of dirs to\n        # have os.walk() skip directories\n        dirs[:] = [ d for d in dirs if not skip_path(os.path.join(root, d)) and not check_ignored(os.path.join(root, d)) ]\n\n        for file in files:\n            process_file(os.path.join(root, file))\n\n    print(\"NOTE! Manually update ddfc.py, editor/bundle-resources/Info.plist, editor/resources/splash.fxml and editor/resources/about.fxml!\")\n"
        },
        {
          "name": "build_tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "com.dynamo.cr",
          "type": "tree",
          "content": null
        },
        {
          "name": "defold-robot",
          "type": "tree",
          "content": null
        },
        {
          "name": "editor",
          "type": "tree",
          "content": null
        },
        {
          "name": "engine",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "share",
          "type": "tree",
          "content": null
        },
        {
          "name": "trigger",
          "type": "blob",
          "size": 0.0078125,
          "content": "trigger\n"
        }
      ]
    }
  ]
}