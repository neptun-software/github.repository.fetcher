{
  "metadata": {
    "timestamp": 1736565569348,
    "page": 440,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Kobzol/hardware-effects",
      "stars": 2865,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0166015625,
          "content": "cmake-*\ntodo.txt\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.9912109375,
          "content": "\n# Created by https://www.gitignore.io/api/c++,clion\n\n### C++ ###\n# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n### CLion ###\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n# User-specific stuff\n.idea/**/workspace.xml\n.idea/**/tasks.xml\n.idea/**/usage.statistics.xml\n.idea/**/dictionaries\n.idea/**/shelf\n\n# Generated files\n.idea/**/contentModel.xml\n\n# Sensitive or high-churn files\n.idea/**/dataSources/\n.idea/**/dataSources.ids\n.idea/**/dataSources.local.xml\n.idea/**/sqlDataSources.xml\n.idea/**/dynamic.xml\n.idea/**/uiDesigner.xml\n.idea/**/dbnavigator.xml\n\n# Gradle\n.idea/**/gradle.xml\n.idea/**/libraries\n\n# Gradle and Maven with auto-import\n# When using Gradle or Maven with auto-import, you should exclude module files,\n# since they will be recreated, and may cause churn.  Uncomment if using\n# auto-import.\n# .idea/modules.xml\n# .idea/*.iml\n# .idea/modules\n.idea/\n\n# CMake\ncmake-build-*/\nbuild/\n\n# Mongo Explorer plugin\n.idea/**/mongoSettings.xml\n\n# File-based project format\n*.iws\n\n# IntelliJ\nout/\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Cursive Clojure plugin\n.idea/replstate.xml\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n\n# Editor-based Rest Client\n.idea/httpRequests\n\n# Android studio 3.1+ serialized cache file\n.idea/caches/build_file_checksums.ser\n\n### CLion Patch ###\n# Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721\n\n# *.iml\n# modules.xml\n# .idea/misc.xml\n# *.ipr\n\n# Sonarlint plugin\n.idea/sonarlint\n\n\n# End of https://www.gitignore.io/api/c++,clion\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.216796875,
          "content": "language: cpp\n\nmatrix:\n  include:\n  - os: linux\n    addons:\n      apt:\n        sources:\n        - ubuntu-toolchain-r-test\n        packages:\n        - g++-4.9\n    env:\n    - MATRIX_EVAL=\"CC=gcc-4.9 && CXX=g++-4.9\"\n\n  - os: linux\n    addons:\n      apt:\n        sources:\n        - ubuntu-toolchain-r-test\n        packages:\n        - g++-5\n    env:\n    - MATRIX_EVAL=\"CC=gcc-5 && CXX=g++-5\"\n\n  - os: linux\n    addons:\n      apt:\n        sources:\n        - ubuntu-toolchain-r-test\n        packages:\n        - g++-6\n    env:\n    - MATRIX_EVAL=\"CC=gcc-6 && CXX=g++-6\"\n\n  - os: linux\n    addons:\n      apt:\n        sources:\n        - ubuntu-toolchain-r-test\n        packages:\n        - g++-7\n    env:\n    - MATRIX_EVAL=\"CC=gcc-7 && CXX=g++-7\"\n\n  - os: linux\n    addons:\n      apt:\n        sources:\n        - llvm-toolchain-trusty-4.0\n        packages:\n        - clang-4.0\n    env:\n    - MATRIX_EVAL=\"CC=clang-4.0 && CXX=clang++-4.0\"\n\n  - os: linux\n    addons:\n      apt:\n        sources:\n        - llvm-toolchain-trusty-5.0\n        packages:\n        - clang-5.0\n    env:\n    - MATRIX_EVAL=\"CC=clang-5.0 && CXX=clang++-5.0\"\n\nbefore_install:\n- eval \"${MATRIX_EVAL}\"\n\nscript:\n  - mkdir build\n  - cd build\n  - cmake -DCMAKE_BUILD_TYPE=Release ..\n  - make -j\n"
        },
        {
          "name": "4k-aliasing",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.681640625,
          "content": "cmake_minimum_required(VERSION 2.8)\nproject(hardware-effects)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -g -Wall -Wextra -pedantic\")\n\nadd_subdirectory(4k-aliasing)\nadd_subdirectory(bandwidth-saturation)\nadd_subdirectory(branch-misprediction)\nadd_subdirectory(cache-conflicts)\nadd_subdirectory(cache-hierarchy-bandwidth)\nadd_subdirectory(cache-memory-bound)\nadd_subdirectory(data-dependency)\nadd_subdirectory(dram-refresh)\nadd_subdirectory(false-sharing)\nadd_subdirectory(floating-point)\nadd_subdirectory(hardware-store-elimination)\nadd_subdirectory(misaligned-access)\nadd_subdirectory(prefetching)\nadd_subdirectory(write-combining)\nadd_subdirectory(store-buffer-capacity)\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.3203125,
          "content": "FROM ubuntu:bionic\n\nRUN apt-get update && apt-get install -y --no-install-recommends build-essential cmake python3-pip\n\nWORKDIR /hardware-effects\nCOPY requirements.txt requirements.txt\nRUN pip3 install -r requirements.txt\n\nCOPY . .\nRUN mkdir build && \\\n    cd build && \\\n    cmake -DCMAKE_BUILD_TYPE=Release .. && \\\n    make -j\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.033203125,
          "content": "Copyright (c) 2018 Jakub BerÃ¡nek\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.9384765625,
          "content": "# Hardware effects\nThis repository demonstrates various hardware effects that can degrade application performance\nin surprising ways and that may be very hard to explain without knowledge of the low-level CPU and OS architecture.\nFor each effect I try to create a proof of concept program that is as small as possible so that it can\nbe understood easily.\n\nYou can check out my [talk](https://www.youtube.com/watch?v=ICKIMHCw--Y) about hardware effects from the Meeting C++ 2019 conference.\n\nRelated repository with GPU hardware effects: https://github.com/kobzol/hardware-effects-gpu\n\nThose effects obviously depend heavily on your CPU microarchitecture and model,\nso the demonstration programs may not showcase the slowdown on your CPU, but I try to make\nthem as general as I can. That said, the examples are targeting x86-64 processors (Intel and AMD)\nand may not make sense on other CPU architectures. I focus on effects that should be observable on\ncommodity (desktop/notebook) hardware, so I don't include things like NUMA effects here\n(although in a few years they might be common even in personal computers). The code is mainly tested on Linux.\n\nCurrently the following effects are demonstrated:\n\n- 4k aliasing\n- bandwidth saturation\n- branch misprediction\n- branch target misprediction\n- cache conflicts\n- cache/memory hierarchy bandwidth\n- data dependencies\n- denormal floating point numbers\n- DRAM refresh interval\n- false sharing\n- hardware prefetching\n- hardware store elimination\n- memory-bound program\n- misaligned accesses\n- non-temporal stores\n- software prefetching\n- store buffer capacity\n- write combining\n\nEvery example directory has a README that explains the individual effects.\n\nIsolating those hardware effects can be very tricky, so it's possible that some of the\nexamples are actually demonstrating something entirely else (or nothing at all :) ).\nIf you have a better explanation of what is happening, please let me know in the issues.\nIdeally the code should be written in assembly, however that would lower its readability.\nI wrote it in C++ in a way that (hopefully) forces the compiler to emit the instructions that I want (even with -O3).\n\n### Benchmarking\n\nFor all benchmarks I recommend to turn off frequency scaling, hyper-threading, Turbo mode, address space randomization and\nother stuff that can increase noise. I'm using the following commands:\n```bash\n$ sudo bash -c \"echo 0 > /proc/sys/kernel/randomize_va_space\"           # address randomization\n$ sudo bash -c \"echo 1 > /sys/devices/system/cpu/intel_pstate/no_turbo\" # Turbo mode\n$ sudo bash -c \"echo 0 > /sys/devices/system/cpu/cpuX/online\"           # hyper-threading\n$ ...                                                                   # for all hyper-threading CPUs\n$ sudo cpupower frequency-set --governor performance                    # frequency scaling\n```\n\nYou can find more tips [here](https://llvm.org/docs/Benchmarking.html).\n\n### Build\n```bash\n$ mkdir build\n$ cd build\n$ cmake -DCMAKE_BUILD_TYPE=Release ..\n$ make -j\n```\n\nIf you want to use the benchmark scripts (written in Python 3), you should\nalso install the Python dependencies:\n```bash\n$ pip install -r requirements.txt\n```\n\n### Docker\nYou can download a prebuilt image:\n```bash\n$ docker pull kobzol/hardware-effects\n```\nor build it yourself:\n```bash\n$ docker build -t hardware-effects .\n```\n\nThen run it:\n```bash\n# interactive run\n$ docker run --rm -it hardware-effects\n\n# directly launch a program\n$ docker run hardware-effects build/branch-misprediction/branch-misprediction 1\n```\n\n### License\nMIT\n\n### Resources\n- https://software.intel.com/en-us/download/intel-64-and-ia-32-architectures-optimization-reference-manual\n- https://akkadia.org/drepper/cpumemory.pdf\n- http://igoro.com/archive/gallery-of-processor-cache-effects/\n- https://mechanical-sympathy.blogspot.com\n- https://manybutfinite.com/category/software-illustrated/\n- https://randomascii.wordpress.com/\n- https://www.agner.org/optimize/\n- https://software.intel.com/en-us/articles/intel-sdm#combined\n"
        },
        {
          "name": "bandwidth-saturation",
          "type": "tree",
          "content": null
        },
        {
          "name": "branch-misprediction",
          "type": "tree",
          "content": null
        },
        {
          "name": "cache-conflicts",
          "type": "tree",
          "content": null
        },
        {
          "name": "cache-hierarchy-bandwidth",
          "type": "tree",
          "content": null
        },
        {
          "name": "cache-memory-bound",
          "type": "tree",
          "content": null
        },
        {
          "name": "data-dependency",
          "type": "tree",
          "content": null
        },
        {
          "name": "dram-refresh",
          "type": "tree",
          "content": null
        },
        {
          "name": "false-sharing",
          "type": "tree",
          "content": null
        },
        {
          "name": "floating-point",
          "type": "tree",
          "content": null
        },
        {
          "name": "hardware-store-elimination",
          "type": "tree",
          "content": null
        },
        {
          "name": "misaligned-access",
          "type": "tree",
          "content": null
        },
        {
          "name": "prefetching",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.046875,
          "content": "pandas==1.0.0\nseaborn==0.10.1\nmatplotlib==3.0.2\n"
        },
        {
          "name": "store-buffer-capacity",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils.py",
          "type": "blob",
          "size": 1.74609375,
          "content": "import itertools\nimport os\nimport platform\nimport subprocess\nimport sys\nfrom collections import defaultdict\n\nimport __main__\nimport pandas\n\n\ndef get_executable():\n    return os.path.realpath(sys.argv[1])\n\n\ndef get_args(executable, parameters, pin_to_cpu):\n    args = []\n\n    if pin_to_cpu:\n        if platform.system() == \"Windows\":\n            args += [\"start\", \"/affinity\", \"0x1\"]\n        elif platform.system() == \"Linux\":\n            args += [\"taskset\", \"0x1\"]\n\n    args.append(executable)\n    args += (str(p) for p in parameters)\n\n    return args\n\n\ndef run_repeatable(executable, repeat, parameters, pin_to_cpu):\n    args = get_args(executable, parameters, pin_to_cpu)\n\n    for i in range(repeat):\n        res = subprocess.run(args,\n                             stdout=subprocess.PIPE,\n                             stderr=subprocess.PIPE)\n        yield res.stderr.decode().strip()\n\n\ndef benchmark(input_data, pin_to_cpu=False, repeat=5, y_axis=\"Time\"):\n    if len(sys.argv) < 2:\n        print(\"Usage: python3 {} <path-to-executable>\".format(__main__.__file__))\n        exit(1)\n\n    executable = get_executable()\n\n    keys = [d[0] for d in input_data]\n    inputs = itertools.product(*[d[1] for d in input_data])\n\n    rows = defaultdict(lambda: [])\n\n    for values in inputs:\n        times = [float(res) for res in run_repeatable(executable, repeat, values, pin_to_cpu)]\n        average = sum(times) / len(times)\n\n        data = [\"{}: {}\".format(key, average) for (key, average) in zip(keys, values)]\n        data.append(\"{}: {}\".format(y_axis, average))\n\n        print(\", \".join(data))\n\n        for time in times:\n            rows[y_axis].append(time)\n            for (index, key) in enumerate(keys):\n                rows[key].append(values[index])\n\n    return pandas.DataFrame(rows)\n"
        },
        {
          "name": "write-combining",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}