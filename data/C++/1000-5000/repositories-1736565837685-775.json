{
  "metadata": {
    "timestamp": 1736565837685,
    "page": 775,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "crownengine/crown",
      "stars": 2170,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4375,
          "content": "root = true\n\n[*]\nend_of_line = lf\nindent_size = 4\nindent_style = tab\ninsert_final_newline = true\nmax_line_length = 100\ntrim_trailing_whitespace = true\n\n[*.md]\nmax_line_length = 80\ntrim_trailing_whitespace = false\n\n[LICENSE*]\nindent_style = space\n\n[*.ui]\nindent_size = 2\nindent_style = space\n\n[*.xml]\nindent_size = 2\nindent_style = space\n\n[*.yml]\nindent_size = 2\nindent_style = space\n\n[*.rst]\nindent_size = 4\nindent_style = tab\nmax_line_length = 80\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.517578125,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\n* text=auto\n\n*.c    eol=lf\n*.cpp  eol=lf\n*.h    eol=lf\n*.hpp  eol=lf\n*.sc   eol=lf\n*.sh   eol=lf\n*.m    eol=lf\n*.mm   eol=lf\n*.md   eol=lf\n*.lua  eol=lf\n*.mk   eol=lf\n*.rb   eol=lf\n*.py   eol=lf\n*.java eol=lf\n*.vala eol=lf\n*.rst  eol=lf\n*.yml  eol=lf\n.gitattributes eol=lf\nmakefile eol=lf\n\n*.sln     text eol=crlf\n*.vcproj  text eof=crlf\n*.vcxproj text eof=crlf\n*.bat     text eol=crlf\n\n*.so  binary\n*.dll binary\n*.exe binary\n*.png binary\n*.tga binary\n*.dds binary\n*.ktx binary\n*.pvr binary\n*.wav binary\n*.ogg binary\n\n/samples/*.config           eol=lf linguist-language=json\n/samples/*.font             eol=lf linguist-language=json\n/samples/*.level            eol=lf linguist-language=json\n/samples/*.material         eol=lf linguist-language=json\n/samples/*.mesh             eol=lf linguist-language=json\n/samples/*.package          eol=lf linguist-language=json\n/samples/*.physics_config   eol=lf linguist-language=json\n/samples/*.physics          eol=lf linguist-language=json\n/samples/*.shader           eol=lf linguist-language=json\n/samples/*.sound            eol=lf linguist-language=json\n/samples/*.sprite_animation eol=lf linguist-language=json\n/samples/*.sprite           eol=lf linguist-language=json\n/samples/*.texture          eol=lf linguist-language=json\n/samples/*.unit             eol=lf linguist-language=json\n\n3rdparty/**                     linguist-vendored\ndocs/**                         linguist-vendored\ntools/level_editor/resources/** linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.193359375,
          "content": "# Ignore build directory\n/build\n\n# Ignore Python stuff\n__pycache__\n\n/samples/*_android\n/samples/*_linux\n/samples/*_windows\n\n# Ignore BGFX build directories\n3rdparty/bgfx/.build\n3rdparty/bimg/.build\n"
        },
        {
          "name": "3rdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.232421875,
          "content": "The Crown Runtime is released under:\n\n    SPDX-License-Identifier: MIT\n\nThe Crown Tools are released under:\n\n    SPDX-License-Identifier: GPL-3.0-or-later\n\nTo see the full list of licenses that may also apply see:\n\n    docs/copyright.rst\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.9482421875,
          "content": "<p align=\"left\">\n  <a title=\"Build Status\" href=\"https://github.com/crownengine/crown/actions?query=workflow%3Abuild_and_test\"><img alt=\"build_and_test status\" src=\"https://img.shields.io/github/actions/workflow/status/crownengine/crown/main.yml?branch=master&longCache=true&style=flat-square&label=build&logo=github\"></a>\n  <a title=\"Join our Discord\" href=\"https://discord.gg/invite/CeXVWCT\"><img src=\"https://img.shields.io/discord/572468149358690314?color=5865F2&label=Discord&logo=discord&logoColor=white&style=flat-square\"></a>\n  <a title=\"Follow Crown on X\" href=\"https://x.com/crown_engine\"><img src=\"https://img.shields.io/twitter/follow/crown_engine?style=flat-square&logo=x&logoColor=white\"></a>\n</p>\n\nCrown Engine\n============\n\n[Crown](https://docs.crownengine.org/html/latest/introduction.html) is a complete and cross-platform game engine designed for flexibility, performance, and fast-iterations.\n\n## Download\n  * [Prebuilt Binaries](https://crownengine.org/download)\n  \n## Development\n  * User Manual ([latest](https://docs.crownengine.org/html/latest) or [unstable](https://docs.crownengine.org/html/master))\n  * [Developer Manual](https://docs.crownengine.org/html/master/hackers)\n  * [Building from Source](https://docs.crownengine.org/html/master/hackers/building.html) \n\n## Screenshots\n\n### [Editor](https://github.com/crownengine/crown/tree/master/tools/level_editor)\n\n![level-editor](https://raw.githubusercontent.com/crownengine/crown/master/docs/shots/level-editor.png)\n\n### [Examples](https://github.com/crownengine/crown/tree/master/samples)\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/crownengine/crown/master/docs/shots/01-physics.png\"   width=\"272px\" title=\"01-physics\"/>\n<img src=\"https://raw.githubusercontent.com/crownengine/crown/master/docs/shots/02-animation.png\" width=\"272px\" title=\"02-animation\"/>\n<img src=\"https://raw.githubusercontent.com/crownengine/crown/master/docs/shots/03-joypad.png\"    width=\"272px\" title=\"03-joypad\"/>\n</p>\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "exporters",
          "type": "tree",
          "content": null
        },
        {
          "name": "makefile",
          "type": "blob",
          "size": 14.33984375,
          "content": "#\n# Copyright (c) 2012-2025 Daniele Bartolini et al.\n# SPDX-License-Identifier: MIT\n#\n\nUNAME := $(shell uname)\nifeq ($(UNAME), $(filter $(UNAME), Linux))\n\tOS=linux\n\tEXE_PREFIX=./\n\tEXE_SUFFIX=\nelse\nifeq ($(UNAME), $(filter $(UNAME), windows32))\n\tOS=windows\n\tEXE_PREFIX=\n\tEXE_SUFFIX=.exe\n\tARG_PREFIX=/\n\tMKDIR=mkdir\nelse\n\tOS=windows\n\tEXE_PREFIX=\n\tEXE_SUFFIX=.exe\n\tARG_PREFIX=//\n\tMKDIR=mkdir -p\nendif\nendif\n\nGENIE=scripts/genie/bin/$(OS)/genie\nMAKE_JOBS=1\n\n# LuaJIT\nNDKABI=$(ANDROID_NDK_ABI)\nNDKDIR=$(ANDROID_NDK_ROOT)\nNDKBIN=$(NDKDIR)/toolchains/llvm/prebuilt/linux-x86_64/bin\nNDKCROSS=$(NDKBIN)/arm-linux-androideabi-\nNDKCC=$(NDKBIN)/armv7a-linux-androideabi$(NDKABI)-clang\nNDKCROSS64=$(NDKBIN)/aarch64-linux-android-\nNDKCC64=$(NDKBIN)/aarch64-linux-android$(NDKABI)-clang\n\nbuild/android-arm/bin/libluajit.a:\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C 3rdparty/luajit/src HOST_CC=\"gcc -m32\" CROSS=$(NDKCROSS) STATIC_CC=$(NDKCC) DYNAMIC_CC=\"$(NDKCC) -fPIC\" TARGET_LD=$(NDKCC)\n\t-@install -m775 -D 3rdparty/luajit/src/libluajit.a $@\n\t-@\"$(MAKE)\" -j$(MAKE_JOBS) -R -C 3rdparty/luajit/src clean\n\nbuild/android-arm64/bin/libluajit.a:\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C 3rdparty/luajit/src CROSS=$(NDKCROSS64) STATIC_CC=$(NDKCC64) DYNAMIC_CC=\"$(NDKCC64) -fPIC\" TARGET_LD=$(NDKCC64)\n\t-@install -m775 -D 3rdparty/luajit/src/libluajit.a $@\n\t-@\"$(MAKE)\" -j$(MAKE_JOBS) -R -C 3rdparty/luajit/src clean\n\nbuild/linux32/bin/luajit:\n\t$(MAKE) -j$(MAKE_JOBS) -R -C 3rdparty/luajit/src CC=\"gcc -m32\" CCOPT=\"-O2 -fomit-frame-pointer -msse2\" TARGET_SYS=Linux BUILDMODE=static\n\t-@install -m775 -D 3rdparty/luajit/src/luajit $@\n\t-@cp -r 3rdparty/luajit/src/jit build/linux32/bin\n\t-@$(MAKE) -j$(MAKE_JOBS) -R -C 3rdparty/luajit/src clean\nbuild/linux64/bin/luajit:\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C 3rdparty/luajit/src CC=\"gcc -m64\" CCOPT=\"-O2 -fomit-frame-pointer -msse2\" TARGET_SYS=Linux BUILDMODE=static\n\t-@install -m775 -D 3rdparty/luajit/src/luajit $@\n\t-@install -m664 -D 3rdparty/luajit/src/libluajit.a build/linux64/bin/libluajit.a\n\t-@cp -r 3rdparty/luajit/src/jit build/linux64/bin\n\t-@\"$(MAKE)\" -j$(MAKE_JOBS) -R -C 3rdparty/luajit/src clean\n\nbuild/mingw64/bin/luajit.exe:\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C 3rdparty/luajit/src CC=\"$(MINGW)/bin/x86_64-w64-mingw32-gcc -m64\" CCOPT=\"-O2 -fomit-frame-pointer -msse2\" TARGET_SYS=Windows BUILDMODE=static\n\t-@install -m775 -D 3rdparty/luajit/src/luajit.exe $@\n\t-@install -m664 -D 3rdparty/luajit/src/libluajit.a build/mingw64/bin/libluajit.a\n\t-@cp -r 3rdparty/luajit/src/jit build/mingw64/bin\n\t-@\"$(MAKE)\" -j$(MAKE_JOBS) -R -C 3rdparty/luajit/src clean\n\t-@rm 3rdparty/luajit/src/host/buildvm.exe\n\t-@rm 3rdparty/luajit/src/host/minilua.exe\n\nbuild/windows64/bin/luajit.exe:\n\tcd \"3rdparty/luajit/src\" && .\\\\msvcbuild.bat\n\t-@install -m775 -D 3rdparty/luajit/src/luajit.exe $@\n\t-@install -m664 -D 3rdparty/luajit/src/lua51.dll build/windows64/bin/lua51.dll\n\t-@install -m664 -D 3rdparty/luajit/src/lua51.lib build/windows64/bin/lua51.lib\n\t-@cp -r 3rdparty/luajit/src/jit build/windows64/bin\n\t-@rm -f 3rdparty/luajit/src/buildvm.*\n\t-@rm -f 3rdparty/luajit/src/jit/vmdef.lua\n\t-@rm -f 3rdparty/luajit/src/lua51.*\n\t-@rm -f 3rdparty/luajit/src/luajit.exe\n\t-@rm -f 3rdparty/luajit/src/luajit.exp\n\t-@rm -f 3rdparty/luajit/src/luajit.lib\n\t-@rm -f 3rdparty/luajit/src/minilua.*\n\nbuild/linux32/bin/luac: \\\n\tbuild/projects/linux\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/linux luac config=release32\n\t-@install -m775 -D $@-release $@\n\nbuild/mingw32/bin/luac: \\\n\tbuild/projects/mingw32\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/mingw luac config=release32\n\t-@install -m775 -D $@-release $@\n\nbuild/linux64/bin/texturec: \\\n\tbuild/projects/linux\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C 3rdparty/bimg/.build/projects/gmake-linux config=release64 texturec\n\t-@install -m775 -D 3rdparty/bimg/.build/linux64_gcc/bin/texturecRelease $@\nbuild/linux64/bin/shaderc: \\\n\tbuild/projects/linux\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C 3rdparty/bgfx/.build/projects/gmake-linux config=release64 shaderc\n\t-@install -m775 -D 3rdparty/bgfx/.build/linux64_gcc/bin/shadercRelease $@\n\nbuild/mingw64/bin/texturec.exe: \\\n\tbuild/projects/mingw\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C 3rdparty/bimg/.build/projects/gmake-mingw-gcc config=release64 texturec\n\t-@install -m775 -D 3rdparty/bimg/.build/win64_mingw-gcc/bin/texturecRelease.exe $@\nbuild/mingw64/bin/shaderc.exe: \\\n\tbuild/projects/mingw\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C 3rdparty/bgfx/.build/projects/gmake-mingw-gcc config=release64 shaderc\n\t-@install -m775 -D 3rdparty/bgfx/.build/win64_mingw-gcc/bin/shadercRelease.exe $@\n\nbuild/windows64/bin/texturec.exe: \\\n\tbuild/projects/vs2019\n\tdevenv.com 3rdparty/bimg/.build/projects/vs2019/bimg.sln $(ARG_PREFIX)Build \"Release|x64\" $(ARG_PREFIX)Project texturec.vcxproj\n\t-@install -m775 -D 3rdparty/bimg/.build/win64_vs2019/bin/texturecRelease.exe $@\nbuild/windows64/bin/shaderc.exe: \\\n\tbuild/projects/vs2019\n\tdevenv.com 3rdparty/bgfx/.build/projects/vs2019/bgfx.sln $(ARG_PREFIX)Build \"Release|x64\" $(ARG_PREFIX)Project shaderc.vcxproj\n\t-@install -m775 -D 3rdparty/bgfx/.build/win64_vs2019/bin/shadercRelease.exe $@\n\nbuild/projects/android-arm:\n\t$(GENIE) --gfxapi=gles3 --compiler=android-arm gmake\nandroid-arm-debug:             \\\n\tbuild/projects/android-arm \\\n\tbuild/android-arm/bin/libluajit.a\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/android-arm crown config=debug\nandroid-arm-development:       \\\n\tbuild/projects/android-arm \\\n\tbuild/android-arm/bin/libluajit.a\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/android-arm crown config=development\nandroid-arm-release:           \\\n\tbuild/projects/android-arm \\\n\tbuild/android-arm/bin/libluajit.a\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/android-arm crown config=release\nandroid-arm:                \\\n\tandroid-arm-debug       \\\n\tandroid-arm-development \\\n\tandroid-arm-release\n\nbuild/projects/android-arm64:\n\t$(GENIE) --gfxapi=gles3 --file=scripts/genie.lua --compiler=android-arm64 gmake\nandroid-arm64-debug:             \\\n\tbuild/projects/android-arm64 \\\n\tbuild/android-arm64/bin/libluajit.a\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/android-arm64 crown config=debug\nandroid-arm64-development:       \\\n\tbuild/projects/android-arm64 \\\n\tbuild/android-arm64/bin/libluajit.a\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/android-arm64 crown config=development\nandroid-arm64-release:           \\\n\tbuild/projects/android-arm64 \\\n\tbuild/android-arm64/bin/libluajit.a\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/android-arm64 crown config=release\nandroid-arm64:                \\\n\tandroid-arm64-debug       \\\n\tandroid-arm64-development \\\n\tandroid-arm64-release\n\nbuild/projects/linux:\n\t$(GENIE) --file=3rdparty/bgfx/scripts/genie.lua --with-tools --gcc=linux-gcc gmake\n\t$(GENIE) --file=3rdparty/bimg/scripts/genie.lua --with-tools --gcc=linux-gcc gmake\n\t$(GENIE) --gfxapi=gl32 --with-tools --compiler=linux-gcc gmake\nlinux-debug64:           \\\n\tbuild/projects/linux \\\n\tbuild/linux64/bin/luajit\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/linux crown config=debug64\nlinux-development64:     \\\n\tbuild/projects/linux \\\n\tbuild/linux64/bin/luajit\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/linux crown config=development64\nlinux-release64:         \\\n\tbuild/projects/linux \\\n\tbuild/linux64/bin/luajit\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/linux crown config=release64\nlinux:                  \\\n\tlinux-debug64       \\\n\tlinux-development64 \\\n\tlinux-release64\n\nbuild/projects/wasm:\n\t$(GENIE) --no-luajit --gfxapi=gles3 --compiler=wasm gmake\nwasm-debug: \\\n\tbuild/projects/wasm\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/wasm crown config=debug\nwasm-development: \\\n\tbuild/projects/wasm\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/wasm crown config=development\nwasm-release: \\\n\tbuild/projects/wasm\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/wasm crown config=release\nwasm:                \\\n\twasm-debug       \\\n\twasm-development \\\n\twasm-release\n\nbuild/projects/mingw32:\n\t$(GENIE) --gfxapi=d3d11 --with-tools --compiler=mingw-gcc --with-32bit-compiler gmake\nbuild/projects/mingw:\n\t$(GENIE) --file=3rdparty/bgfx/scripts/genie.lua --with-tools --gcc=mingw-gcc gmake\n\t$(GENIE) --file=3rdparty/bimg/scripts/genie.lua --with-tools --gcc=mingw-gcc gmake\n\t$(GENIE) --gfxapi=d3d11 --with-tools --compiler=mingw-gcc gmake\nmingw-debug64:           \\\n\tbuild/projects/mingw \\\n\tbuild/mingw64/bin/luajit.exe\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/mingw crown config=debug64\nmingw-development64:     \\\n\tbuild/projects/mingw \\\n\tbuild/mingw64/bin/luajit.exe\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/mingw crown config=development64\nmingw-release64:         \\\n\tbuild/projects/mingw \\\n\tbuild/mingw64/bin/luajit.exe\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/mingw crown config=release64\nmingw:                  \\\n\tmingw-debug64       \\\n\tmingw-development64 \\\n\tmingw-release64\n\nbuild/projects/vs2019:\n\t$(GENIE) --file=3rdparty/bgfx/scripts/genie.lua --with-tools vs2019\n\t$(GENIE) --file=3rdparty/bimg/scripts/genie.lua --with-tools vs2019\n\t$(GENIE) --gfxapi=d3d11 --with-tools --no-editor vs2019\nwindows-debug64:          \\\n\tbuild/projects/vs2019 \\\n\tbuild/windows64/bin/luajit.exe\n\tdevenv.com build/projects/vs2019/crown.sln $(ARG_PREFIX)Build \"debug|x64\" $(ARG_PREFIX)Project crown\nwindows-development64:    \\\n\tbuild/projects/vs2019 \\\n\tbuild/windows64/bin/luajit.exe\n\tdevenv.com build/projects/vs2019/crown.sln $(ARG_PREFIX)Build \"development|x64\" $(ARG_PREFIX)Project crown\nwindows-release64:        \\\n\tbuild/projects/vs2019 \\\n\tbuild/windows64/bin/luajit.exe\n\tdevenv.com build/projects/vs2019/crown.sln $(ARG_PREFIX)Build \"release|x64\" $(ARG_PREFIX)Project crown\n\ncrown-editor-theme:\n\tcd tools/level_editor/resources/theme/Adwaita && ./parse-sass.sh\n\tcd tools/level_editor/resources && ./generate-resources.sh > resources.gresource.xml\n\ncrown-editor-linux-debug64: \\\n\tbuild/projects/linux\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/linux crown-editor config=debug64\ncrown-editor-linux-release64: \\\n\tbuild/projects/linux\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/linux crown-editor config=release64\n\ncrown-editor-mingw-debug64: \\\n\tbuild/projects/mingw\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/mingw crown-editor config=debug64\ncrown-editor-mingw-release64: \\\n\tbuild/projects/mingw\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/mingw crown-editor config=release64\n\ncrown-launcher-linux-debug64: \\\n\tbuild/projects/linux\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/linux crown-launcher config=debug64\ncrown-launcher-linux-release64: \\\n\tbuild/projects/linux\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/linux crown-launcher config=release64\n\ncrown-launcher-mingw-debug64: \\\n\tbuild/projects/mingw\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/mingw crown-launcher config=debug64\ncrown-launcher-mingw-release64: \\\n\tbuild/projects/mingw\n\t\"$(MAKE)\" -j$(MAKE_JOBS) -R -C build/projects/mingw crown-launcher config=release64\n\ntools-linux-release32:       \\\n\tbuild/linux32/bin/luajit \\\n\tbuild/linux32/bin/luac\ntools-linux-debug64:           \\\n\tbuild/linux64/bin/texturec \\\n\tbuild/linux64/bin/shaderc  \\\n\tlinux-debug64              \\\n\tcrown-editor-linux-debug64\ntools-linux-release64:         \\\n\tbuild/linux64/bin/texturec \\\n\tbuild/linux64/bin/shaderc  \\\n\tlinux-development64        \\\n\tcrown-editor-linux-release64\n\ntools-windows-debug64:               \\\n\tbuild/windows64/bin/texturec.exe \\\n\tbuild/windows64/bin/shaderc.exe  \\\n\twindows-debug64\ntools-windows-release64:             \\\n\tbuild/windows64/bin/texturec.exe \\\n\tbuild/windows64/bin/shaderc.exe  \\\n\twindows-development64\n\ntools-mingw-release32: \\\n\tbuild/mingw32/bin/luac\ntools-mingw-debug64:               \\\n\tbuild/mingw64/bin/texturec.exe \\\n\tbuild/mingw64/bin/shaderc.exe  \\\n\tmingw-debug64                  \\\n\tcrown-editor-mingw-debug64\ntools-mingw-release64:             \\\n\tbuild/mingw64/bin/texturec.exe \\\n\tbuild/mingw64/bin/shaderc.exe  \\\n\tmingw-development64            \\\n\tcrown-editor-mingw-release64\n\n.PHONY: docs\ndocs:\n\t\"$(MAKE)\" -C docs/ html\n\nSAMPLES_PLATFORM=$(OS)\n\n.PHONY: 00-empty\n00-empty: $(OS)-development64 tools-$(OS)-release64\n\tcd build/$(OS)64/bin && $(EXE_PREFIX)crown-development$(EXE_SUFFIX) --source-dir $(realpath samples/$@) --map-source-dir core $(realpath samples) --compile --platform $(SAMPLES_PLATFORM)\n.PHONY: 01-physics\n01-physics: $(OS)-development64 tools-$(OS)-release64\n\tcd build/$(OS)64/bin && $(EXE_PREFIX)crown-development$(EXE_SUFFIX) --source-dir $(realpath samples/$@) --map-source-dir core $(realpath samples) --compile --platform $(SAMPLES_PLATFORM)\n.PHONY: 02-animation\n02-animation: $(OS)-development64 tools-$(OS)-release64\n\tcd build/$(OS)64/bin && $(EXE_PREFIX)crown-development$(EXE_SUFFIX) --source-dir $(realpath samples/$@) --map-source-dir core $(realpath samples) --compile --platform $(SAMPLES_PLATFORM)\n.PHONY: 03-joypad\n03-joypad: $(OS)-development64 tools-$(OS)-release64\n\tcd build/$(OS)64/bin && $(EXE_PREFIX)crown-development$(EXE_SUFFIX) --source-dir $(realpath samples/$@) --map-source-dir core $(realpath samples) --compile --platform $(SAMPLES_PLATFORM)\n\n.PHONY: samples\nsamples: 00-empty 01-physics 02-animation 03-joypad\n\n.PHONY: run-00-empty\nrun-00-empty: 00-empty\n\tcd build/$(OS)64/bin && $(EXE_PREFIX)crown-development$(EXE_SUFFIX) --data-dir $(realpath samples/$<_$(OS))\n.PHONY: run-01-physics\nrun-01-physics: 01-physics\n\tcd build/$(OS)64/bin && $(EXE_PREFIX)crown-development$(EXE_SUFFIX) --data-dir $(realpath samples/$<_$(OS))\n.PHONY: run-02-animation\nrun-02-animation: 02-animation\n\tcd build/$(OS)64/bin && $(EXE_PREFIX)crown-development$(EXE_SUFFIX) --data-dir $(realpath samples/$<_$(OS))\n.PHONY: run-03-joypad\nrun-03-joypad: 03-joypad\n\tcd build/$(OS)64/bin && $(EXE_PREFIX)crown-development$(EXE_SUFFIX) --data-dir $(realpath samples/$<_$(OS))\n\n.PHONY: clean-samples\nclean-samples:\n\t-@rm -rf samples/00-empty_*\n\t-@rm -rf samples/01-physics_*\n\t-@rm -rf samples/02-animation_*\n\t-@rm -rf samples/03-joypad_*\n\n.PHONY: codespell\ncodespell:\n\t@codespell docs src tools \\\n\t\t--ignore-words=scripts/codespell-dictionary.txt \\\n\t\t--skip \"*.ttf.h,*.png,docs/_themes,tools/level_editor/resources/theme/Adwaita\" \\\n\t\t-q4 # 4: omit warnings about automatic fixes that were disabled in the dictionary.\n\n.PHONY: cppcheck\ncppcheck:\n\t@cppcheck src \\\n\t\t--includes-file=scripts/cppcheck/includes.txt \\\n\t\t--suppressions-list=scripts/cppcheck/suppressions.txt \\\n\t\t--enable=all \\\n\t\t--quiet \\\n\t\t--force # Check all configurations.\n\n.PHONY: format-sources\nformat-sources:\n\t@scripts/uncrustify/format-all.sh -j $(MAKE_JOBS) --enable-tools\n\n.PHONY: clean\nclean: clean-samples\n\t@echo Cleaning...\nifeq ($(OS), linux)\n\t-@\"$(MAKE)\" -R -C 3rdparty/luajit/src clean -s\nendif\n\t-@rm -rf 3rdparty/bgfx/.build\n\t-@rm -rf 3rdparty/bimg/.build\n\t-@rm -rf build\n"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}