{
  "metadata": {
    "timestamp": 1736565746144,
    "page": 667,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "simbody/simbody",
      "stars": 2355,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.4169921875,
          "content": "# -*- yaml -*-\n\n# This file determines clang-format's style settings; for details, refer to\n# http://clang.llvm.org/docs/ClangFormatStyleOptions.html\n\nBasedOnStyle:  Google\nIndentWidth: 4\n\nLanguage: Cpp\n\n# Force pointers to the type for C++.\nDerivePointerAlignment: false\nPointerAlignment: Left\n\n# Compress functions onto a single line (when they fit) iff they are defined\n# inline (inside a of class) or are empty.\nAllowShortFunctionsOnASingleLine: Inline\n\n# Compress lambdas onto a single line iff they are empty.\nAllowShortLambdasOnASingleLine: Empty\n\n# Specify the #include statement order.  This implements the order mandated by\n# the Google C++ Style Guide: related header, C headers, C++ headers, library\n# headers, and finally the project headers.\n#\n# To obtain updated lists of system headers used in the below expressions, see:\n# http://stackoverflow.com/questions/2027991/list-of-standard-header-files-in-c-and-c/2029106#2029106.\nIncludeCategories:\n  # Spacers used by drake/tools/formatter.py.\n  - Regex:    '^<clang-format-priority-15>$'\n    Priority: 15\n  - Regex:    '^<clang-format-priority-25>$'\n    Priority: 25\n  - Regex:    '^<clang-format-priority-35>$'\n    Priority: 35\n  - Regex:    '^<clang-format-priority-45>$'\n    Priority: 45\n  # C system headers.  The header_dependency_test.py contains a copy of this\n  # list; be sure to update that test anytime this list changes.\n  - Regex:    '^[<\"](aio|arpa/inet|assert|complex|cpio|ctype|curses|dirent|dlfcn|errno|fcntl|fenv|float|fmtmsg|fnmatch|ftw|glob|grp|iconv|inttypes|iso646|langinfo|libgen|limits|locale|math|monetary|mqueue|ndbm|netdb|net/if|netinet/in|netinet/tcp|nl_types|poll|pthread|pwd|regex|sched|search|semaphore|setjmp|signal|spawn|stdalign|stdarg|stdatomic|stdbool|stddef|stdint|stdio|stdlib|stdnoreturn|string|strings|stropts|sys/ipc|syslog|sys/mman|sys/msg|sys/resource|sys/select|sys/sem|sys/shm|sys/socket|sys/stat|sys/statvfs|sys/time|sys/times|sys/types|sys/uio|sys/un|sys/utsname|sys/wait|tar|term|termios|tgmath|threads|time|trace|uchar|ulimit|uncntrl|unistd|utime|utmpx|wchar|wctype|wordexp)\\.h[\">]$'\n    Priority: 20\n  # C++ system headers (as of C++23).  The header_dependency_test.py contains a\n  # copy of this list; be sure to update that test anytime this list changes.\n  - Regex:    '^[<\"](algorithm|any|array|atomic|barrier|bit|bitset|cassert|ccomplex|cctype|cerrno|cfenv|cfloat|charconv|chrono|cinttypes|ciso646|climits|clocale|cmath|codecvt|compare|complex|concepts|condition_variable|coroutine|csetjmp|csignal|cstdalign|cstdarg|cstdbool|cstddef|cstdint|cstdio|cstdlib|cstring|ctgmath|ctime|cuchar|cwchar|cwctype|deque|exception|execution|expected|filesystem|flat_map|flat_set|format|forward_list|fstream|functional|future|generator|initializer_list|iomanip|ios|iosfwd|iostream|istream|iterator|latch|limits|list|locale|map|mdspan|memory|memory_resource|mutex|new|numbers|numeric|optional|ostream|print|queue|random|ranges|ratio|regex|scoped_allocator|semaphore|set|shared_mutex|source_location|span|spanstream|sstream|stack|stacktrace|stdexcept|stdfloat|stop_token|streambuf|string|string_view|strstream|syncstream|system_error|thread|tuple|type_traits|typeindex|typeinfo|unordered_map|unordered_set|utility|valarray|variant|vector|version)[\">]$'\n    Priority: 30\n  # Other libraries' h files (with angles).\n  - Regex:    '^<'\n    Priority: 40\n  # Your project's h files.\n  - Regex:    '^\"drake'\n    Priority: 50\n  # Other libraries' h files (with quotes).\n  - Regex:    '^\"'\n    Priority: 40\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4716796875,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n*.sln    merge=union\n*.csproj merge=union\n*.vbproj merge=union\n*.fsproj merge=union\n*.dbproj merge=union\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3779296875,
          "content": "# Debian packaging output.\ndebian/libsimbody-dev\ndebian/libsimbody-doc\ndebian/libsimbody3.3\ndebian/libsimbody3.3-dbg\ndebian/tmp\ndebian/files\ndebian/*log\ndebian/*debhelper\ndebian/*substvars\n# The build for debian ends up in a directory like obj-x86_64-linux-gnu.\nobj-*\n# Editor backup files.\n# vim\n.*.swp\n.*.swo\n# gedit\n*~\n# CLion\n/cmake-build-*\n.idea/\n/out/\n/.vs/\n/CMakeUserPresets.json\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 17.8046875,
          "content": "Simbody Changelog and Release Notes\n===================================\n\nThis is not a comprehensive list of changes but rather a hand-curated collection of the more notable ones. For a comprehensive history, see the [Simbody GitHub repo](https://github.com/simbody/simbody). You can use the release dates below to find all the PRs and issues that were included in a particular release. \n\n**Heads up**: Simbody 3.5 was the last release that will build with C++03 (patch builds with version numbers like 3.5.1, will work too). For 3.6 and above we will permit Simbody developers to use C++11, restricted to the subset that is currently supported on all our platforms. Since the C++03 and C++11 ABIs are not compatible, code that uses Simbody 3.6 will also have to be built with C++11. Time to move up, if you haven't already!\n\n3.8 (in development)\n--------------------\n\n3.7 (December 2019)\n-------------------\n* The new SmoothSphereHalfSpaceForce provides a continuous and differentiable\n  contact model, ideal for use with gradient-based optimization algorithms (PR\n  #667).\n* Fixed a memory issue with CPodes (PR #642).\n* Created a CMake variable to control whether docs are installed (PR #655).\n* Fixed a bug with calculating constraint acceleration errors (PR #670).\n* Fixed Pathname::getThisExecutablePath() for FreeBSD (PR #672).\n* Fixed scaling issue of simbody-visualizer on macOS 10.15 Catalina. Now,\n  simbody-visualizer is an app bundle (simbody-visualizer.app) on Mac (PR #676).\n\n3.6.1 (11 June 2018)\n--------------------\n* Fixed bug wherein a program may crash when using the visualizer if the\n  visualizer window was closed manually (PR #633).\n\n3.6 (21 February 2018)\n----------------------\n* Forced GCC to be at least 4.9.0, so that new C++11 features like regular\n  expressions can be used (PR #485).\n* Minimum Ubuntu version supported 14.04 LTS (Trusty), with a [manual update of GCC](http://askubuntu.com/questions/466651/how-do-i-use-the-latest-gcc-on-ubuntu-14-04).\n* Recommended minimum Ubuntu version : 15.04 (Vivid), that is shipped with GCC 4.9.2.\n* Added mixin classes `ResetOnCopy<T>` and `ReinitOnCopy<T>` to force default\n  construction or reinitialization of data members on copy construction or copy\n  assignment, without requiring a user written copy constructor and copy\n  assignment operator just to get those reinitializations done.\n* Added clone() method to `SimTK::Function_` base class and implemented it for\n  Simbody-defined concrete Function classes. Made concrete Function members\n  non-const to permit assignment, and modified Function_<T>::Step to allow\n  changing its parameters after construction.\n* Added C++11 features to the `SimTK::Array_` container including `std::initializer_list` construction, move construction, move assignment, and `emplace` methods.\n* Prevented copy construction of `Array_<T>` from `Array_<T2>` unless T2 is *implicitly*\n  convertible to T. Previously this was allowed if there was any conversion possible\n  even if it was explicit. Array_ was being too relaxed about this, causing hidden \n  copies to occur. \n* Added CloneOnWritePtr smart pointer (acts like ClonePtr but with deferred cloning).\n* Updated ClonePtr and ReferencePtr APIs to follow C++11 standard smart pointer\n  terminology. This required deprecating some existing methods and operators, so\n  you can expect to get annoying warnings until you switch to the new API. \n* Possible BREAKING CHANGE: ClonePtr's operator==() previously delegated\n  to the managed object; now it just operates on the managed pointer as is done \n  in other smart pointers. Consequently now only a clone() method is required for a type\n  to be contained in a ClonePtr; previously it had to support comparison also.\n* Make doxygen run silently so errors will be easier to see.\n* Added new methods to `Pathname` class for interpreting pathnames against a specified working directory instead\nof the current working directory (thanks to Carmichael Ong). See [Issue #264](https://github.com/simbody/simbody/issues/264) and [PR #307](https://github.com/simbody/simbody/pull/307). \n* Added the ability to parallelize forces, robustness/performance improvements\nto ParallelExecutor, mutex state lock.\n[PR #414](https://github.com/simbody/simbody/pull/414).\n* Added move constructor and move assignment to State (very fast).\n* Added \"stage version\" counters for time, q, u, and z that are incremented\n  whenever one of these changes.\n* Separated time-independent position and kinematics calculations so that \n  they are not invalidated by a time change. These can also be initiated\n  explicitly with new methods `realizePositionKinematics()` and\n  `realizeVelocityKinematics()`. They are invalidated by a change to q or\n  to u, respectively. \n* Modified floating point-to-String conversions to use lossless number of \n  digits by default. An attempt to use the default type-to-String conversion \n  when no stream insertion operator is available is now a runtime rather than\n  compile time error. [PR #459](https://github.com/simbody/simbody/pull/459).\n* Upgraded `SimTK::Xml` from class to namespace; local classes like `Xml::Element`\n  were promoted to namespace level within Xml. This was necessary to untangle\n  Array_ and Xml classes which can be mutually dependent. This change is backwards\n  compatible for those following the recommended use of the previously-available\n  `Xml::Document` typedef instead of Xml directly. Otherwise you will have to change\n  uses of `SimTK::Xml` to `SimTK::Xml::Document`. Also any `using SimTK::Xml;`\n  must be removed or replaced with `using namespace SimTK::Xml` or\n  `using SimTK::Xml::Document` depending on the intent. \n  [PR #460](https://github.com/simbody/simbody/pull/460)\n* Improved `NiceTypeName<T>::namestr()` to produce a canonicalized name that is\n  the same on all platforms (with a few exceptions). Added `xmlstr()` method to\n  make an XML-friendly modification of `namestr()` that replaces angle brackets\n  with curly braces. Added a new regression test to verify that the names come\n  out right. [PR #461](https://github.com/simbody/simbody/pull/461)\n* Added helper class IteratorRange to use range-based for loops with a pair of\n  iterators. [PR#467](https://github.com/simbody/simbody/pull/467)\n* Added the method `State::isConsistent()` to compare two states\n  [PR #469](https://github.com/simbody/simbody/pull/469).\n* Started using RPATH on OSX so that users need not set `DYLD_LIBRARY_PATH` to\n  run `simbody-visualizer` or the example executables, regardless of where you\n  install Simbody.\n* Improved the ability to find the simbody-visualizer executable when Simbody\n  is installed in non-standard locations or if the Simbody installation is\n  relocated (even to different computers). This enhancement is only for\n  non-Windows operating systems.\n* Fixed a bug when compiling on macOS (OSX) with SDK MacOSX10.12.sdk, related\n  to the POSIX function `clock_gettime()`.\n  [Issue #523](https://github.com/simbody/simbody/issues/523),\n  [PR #524](https://github.com/simbody/simbody/pull/524)\n* Replaced usages of pthreads with C++11 classes. Removed the following classes:\n    - ThreadLocal\n    - AtomicInteger\n* Deprecated some badly-named methods in MobilizedBody::Translation\n  [Issue #604](https://github.com/simbody/simbody/issues/604)\n* Removed support for `long double`. \n  [PR #597](https://github.com/simbody/simbody/pull/597)\n* Fixed a bug in `MultibodyGraphMaker` where massless bodies were handled\n  incorrectly.\n  [PR #592](https://github.com/simbody/simbody/pull/592) and \n  [PR #594](https://github.com/simbody/simbody/pull/594).\n* Moved Ipopt into the namespace `SimTKIpopt` to avoid duplicate symbols when\n  combining Simbody with an independent Ipopt.\n* Fixed a bug where RowVectors could not be constructed with 0 elements.\n* CMake: Downstream projects no longer need to use `include_directories()`.\n* CMAES: You can now specify a different initial step size (standard deviation)\n  for each variable. [PR #540](https://github.com/simbody/simbody/pull/540)\n* SimbodyMatterSubsystem now provides a function for the error in\n  acceleration-level constraint equations.\n  [PR #517](https://github.com/simbody/simbody/pull/517)\n* The visualizer now supports lazily loading mesh geometry from a file.\n  [PR #475](https://github.com/simbody/simbody/pull/475)\n* Simbody can now be built with MinGW on Windows.\n  [PR #441](https://github.com/simbody/simbody/pull/441)\n\n\n3.5.3 (15 June 2015)\n-------------------\nThis is the release that shipped with OpenSim 3.3.\n* Small changes to allow compilation with Visual Studio 2015 (PRs [#395](https://github.com/simbody/simbody/pull/395) and [#396](https://github.com/simbody/simbody/pull/396)).\n* Fixed a problem with SpatialInertia::shift() with non-zero COM offset, see issue [#334](https://github.com/simbody/simbody/issues/334). This also affected calcCompositeBodyInertias(). These are not commonly used.\n* Fixed a problem with VectorIterator which could unnecessary copying, possibly affecting mesh handling performance. See issue [#349](https://github.com/simbody/simbody/issues/349). \n\n\n3.5.2 (15 May 2015)\n-------------------\nSame as 3.5.1 except on 64 bit Windows which has a patched version of Lapack that\naddresses an error handling problem that caused trouble for some OpenSim users.\nThis is a patch to Lapack 3.4.2 (64 bit) to fix the bug discussed in [Issue #177](https://github.com/simbody/simbody/issues/177) and [PR #342](https://github.com/simbody/simbody/pull/342).\nThere were two functions where convergence failures incorrectly caused an abort (XERBLA in Lapack-speak). See discussion on Lapack forum:\nhttp://icl.cs.utk.edu/lapack-forum/viewtopic.php?f=13&t=4586\nThis Lapack DLL is binary compatible with the previous one, same functions and ordinals.\n\n\n3.5.1 (31 Dec 2014)\n-------------------\nThis patch release fixed an installation problem but is otherwise identical to 3.5.\n### Bugs fixed\n* Fixed a Mac installation problem reported [here](https://github.com/osrf/homebrew-simulation/issues/33).\nSee [PR #321](https://github.com/simbody/simbody/pull/321). Probably affects Linux too; we think it is due to a change in CMake behavior, noticed with CMake 3.1 but could have happened earlier.\n* Updated Travis-CI script to attempt installation to catch these problems earlier. See [PR #322](https://github.com/simbody/simbody/pull/322).\n\n\n3.5 (18 Dec 2014)\n-----------------\nThis release focused primarily on infrastructure for and prototyping of rigid contact and impact, and the development of examples showing how to perform task space control using Simbody. These two projects were supported by our DARPA research subcontract with Open Source Robotics Foundation, and were integrated with Gazebo. Further development for rigid contact is required for smooth integration into Simbody; this is planned for Simbody 4.0 and only the bravest among you should attempt to use rigid contact before then. The task space control examples `TaskSpaceControl-UR10` and `TaskSpaceControl-Atlas` can be found in the Simbody examples directory.\n\nChris Dembia integrated Nikolaus Hansen's [Covariant Matrix Adaptation Evolution Strategy](https://www.lri.fr/~hansen/cmaesintro.html) (CMA-ES) global optimizer into Simbody's existing Optimizer class framework, and implemented a multithreading capability for it. This is ready to use and we would like feedback. \n\nThere were numerous smaller improvements to Simbody since the previous release, in build and installation, documentation, performance, bug fixes, and small enhancements. There are no known incompatibilities with previous release 3.4.1 and we highly recommend that you upgrade.\n\n### New features\n* Added Task Space control examples (pr #237 #238) (work supported by OSRF)\n* Added IMU (orientation) tracking assembly condition for IK (pr #239)\n* Added STL file reader to PolygonalMesh class (issue #57, pr #176)\n* Added CMA-ES global optimizer with multithreading support (pr #249 #253 #267 #268)\n* Initial rigid contact support (pr #137). Includes a collection of new unilateral constraints and a specialized solver. Not yet well integrated into Simbody overall. (work supported by OSRF)\n* Implemented PLUS method impact handling (issue #115 #205, pr #226) (work supported by OSRF)\n\n### Bugs fixed\n* Fixed bug in orientation of non-camera-facing text in visualizer (issue #214, pr #215)\n* Fixed bug in mesh triangulation (issue #198, pr #199)\n* Fixed Assembler bugs; could sometimes make initial solution worse or report spurious failure (issue #164 #167, pr #165 #168)\n* Fixed Debug visualizer name to have \"_d\" (issue #5)\n\n### Misc. improvements\n* Improved regression test timing framework to make it useful for multithreaded tests (pr #265)\n* Much nicer Doxygen for Rotation class (issue #183)\n* Reorganized Simbody example programs (pr #238)\n* Added HalfSpace-ConvexImplicitSurface contact tracker (issue #232, pr #233)\n* Added methods for principal curvatures and directions on arbitrary implicit surface (pr #231)\n* Added missing calcContactPatch() functionality for Hertz contacts (pr #224)\n* Added Brick ContactGeometry shape (pr #218)\n* Added several new bilateral constraints useful as the basis for unilateral constraints in rigid contact: Constraint::PointOnPlaneContact, SphereOnPlaneContact, SphereOnSphereContact,  LineOnLineContact (edge/edge) (pr #137 #169)\n* Improved constraint performance for several basic constraints (pr #137)\n* Moved install instructions to README.md where they can be kept up to date (pr #144 and others)\n* Replaced distance constraint equations to use length rather than length^2 (issue #3). This improves scaling when distance constraint is combined with other constraints.\n* Numerous improvements to build, install, documentation, and performance.\n* Added CONTRIBUTING.md file explaining ways to contribute to the Simbody project.\n\n\n3.4.1 (31 Mar 2014)\n-------------------\n\nThis is primarily a release for improving our build and install process to comply with Debian's requirements. Thanks to José Rivero and Steve Peters at Open Source Robotics Foundation, and Chris Dembia at Stanford for the bulk of this effort.\n\n* Fixed `SimbodyMatterSubsystem::getTotalCentrifugalForces()` (issue #112, pr #116).\n* Many changes to build and install, mostly affecting Linux and OSX. Should now conform better to standards on those platforms and in general be better and finding its dependencies. (pr #114 #118 #120 #121 #122 #127 #130 #131 #133, issue #48 #68 #92 #113) \n* Started using the -Werror flag (treat warnings as errors) in Travis builds to ensure that we are warning-free. (issue #128, pr #129 #131)\n* Compile with C++11 enabled by default. However, the code will still build in C++03. (pr #123, #126)\n\n\n3.3.1 (21 Jan 2014)\n-------------------\nThis is the first release built for use in Open Source Robotic Foundation's Gazebo robot simulator and is also the version of Simbody that ships with OpenSim 3.2. It incorporates many fixes and enhancements prompted by the integration effort with OSRF, and a new Debian package builder for smooth incorporation into the Gazebo build.\n\n* Improved matrix/vector documentation and reorganized source to break up large files (pr #70 #76 #77 #78 #87)\n* Improved Force::Gravity to make it more flexible and avoid NaNs (pr #33)\n* Fix multiplyByMInv() to be usable in forces and controllers; now only requires state to be realized to position stage. (issue #29, pr #31)\n* Make MobilizedBody::lock() and lockAt() method immediately modify the state (issue #20, pr #23)\n* Added Debian/Ubuntu package building (pr #24 #32 #52 #58 #59 #64)\n* Improved TestMultibodyPerformance timing information (pr #22)\n* Fixed bug in MobilizedBody::isSameMobilizedBody() (issue #15, pr #16)\n* Started using Travis-CI for continuous integration testing (pr #25)\n* Improved DecorativeGeometry classes (issue #34, pr #35 #61)\n* Improved installation, esp. Linux and OSX (issue #38 #65 #101, pr #64 #91 #102 #107)\n* Added uninstall (issue #104, pr #106)\n* Visualizer name changed to \"simbody-visualizer\" (issue #27, pr #53)\n* Added torque-limited motor examples\n* Added ability to lock/unlock mobilizers and disble/enable Motion objects on the fly, for flexible mixed forward/inverse dynamics\n* Re-engineered Force::Gravity for speed and run time flexibility (for Gazebo)\n* Extended Force::Gravity to support gravity compensation controllers\n* Allow runtime changes to MobilityLinear{Spring,Damper} (for Gazebo)\n* Added Theo Jansen Strandbeest example\n* Ported some Gazebo regression tests to Simbody's regression suite.\n* Added dirent.h support on Windows (for directory searching)\n* Many bug fixes, doxygen improvements, and small performance improvements\n* Added Semi-Explicit Euler integrators, with and without error control (for Gazebo)\n* Added O(n) methods for task space Jacobians\n\n\n3.1 (22 Apr 2013)\n-----------------\nThis is the Simbody release that shipped with OpenSim 3.1 and contains the initial\nwork done with Open Source Robotics Foundation for the Gazebo simulator. The source was managed on Subversion, although its code and history were transferred to GitHub. The source zip is available on the GitHub release page [here](https://github.com/simbody/simbody/releases/tag/Simbody-3.1).\n\n* Added MobilityLinearStop for joint stops (for Gazebo)\n* Added Simbody example for reading Gazebo sdf files \n* Added MultibodyGraphMaker to map bodies and joints to mobilizers and constraints (for Gazebo)\n* Added a variety of prototype implementations of unilateral contact as adhoc tests\n* Added some pre-built mesh types to PolygonalMesh (for Gazebo)\n* Modified Force::Gravity to allow excluded bodies (needed by Gazebo)\n* Added DiscreteForces and MobilityDiscreteForces elements for Gazebo\n* Added Measure::Delay for time-delay of input signal\n* Added scissor-lift example to show behavior on highly constrained mechanisms\n* Added RK2 integrator\n* Modified Gimbal mobilizer to use Euler angle derivatives as generalized speeds\n* Added Bushing (6 dof) mobilizer parameterized like Gimbal\n* Added methods for calculating geodesics over smooth contact geometry\n* Added infrastructure for fast cable wrapping and some prototypes\n* Many small performance improvements and bug fixes\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 27.224609375,
          "content": "#-------------------------------------------------------------------------------\n# Simbody\n#\n# This is the master CMake file that coordinates\n# the build of Simbody. There are four steps:\n#    (1) Get files needed for particular platform\n#    (2) Build SimTKcommon library\n#    (3) Build SimTKmath library\n#    (4) Build SimTKsimbody library\n#    (5) Build examples\n#\n#-------------------------------------------------------------------------------\ncmake_minimum_required(VERSION 3.12)\ncmake_policy(SET CMP0048 NEW)\n\nproject(Simbody VERSION 3.8.0)\n\n## List of Simbody build configuration options:\n#-------------------------------------------------------------------------------\noption(BUILD_DYNAMIC_LIBRARIES\n    \"Build dynamic (shared) Simbody libraries.\"\n    ON)\n\noption(BUILD_STATIC_LIBRARIES\n    \"Build static Simbody libraries.\"\n    OFF)\n\nif(NOT BUILD_DYNAMIC_LIBRARIES AND NOT BUILD_STATIC_LIBRARIES)\n    message(FATAL_ERROR\n        \"BUILD_DYNAMIC_LIBRARIES and BUILD_STATIC_LIBRARIES \"\n        \"are both set to FALSE. No compilation is possible!\")\nendif()\n\noption(BUILD_VISUALIZER\n    \"Build and install the Simbody visualizer.\"\n    ON)\n\noption(BUILD_EXAMPLES\n    \"Build and install Simbody examples.\"\n    ON)\n\noption(INSTALL_DOCS\n\"Build and install Simbody documentation.\"\nON)\n\n# Caution: this variable is automatically created by the CMake\n# enable_testing() command, but we'll take it over here for\n# our own purposes too.\nset(BUILD_TESTING ON CACHE BOOL\n    \"Control building of Simbody test programs.\n    To actually build tests, one\n    or both of BUILD_TESTS_AND_EXAMPLES_STATIC and\n    BUILD_TESTS_AND_EXAMPLES_SHARED must be ON.\")\n\nset(BUILD_USING_NAMESPACE \"\" CACHE STRING\n    \"Add a prefix to library filenames. (e.g. `BUILD_USING_NAMESPACE=ns_` would \\\nproduce libraries like 'libns_SimTKmath.so' on Unix).\")\nmark_as_advanced(BUILD_USING_NAMESPACE)\n\noption(BUILD_UNVERSIONED_LIBRARIES\n    \"Build a set of Simbody libraries without a version suffix (e.g. library names like 'libSimTKMath.so')\"\n    ON)\nmark_as_advanced(BUILD_UNVERSIONED_LIBRARIES)\n\noption(BUILD_VERSIONED_LIBRARIES\n    \"Build a set of Simbody libraries with a version suffix (e.g. library names like 'libSimTKMath_3.8.so')\"\n    OFF)\nmark_as_advanced(BUILD_VERSIONED_LIBRARIES)\n\ninclude(CMakeDependentOption)\n\ncmake_dependent_option(BUILD_TESTS_AND_EXAMPLES_STATIC\n    \"Statically link tests and examples against static Simbody libraries.\\\nStatic linking increases the build time and uses more storage than dynamic \\\nlinking. However, statically-linked tests may be easier to debug on Windows \\\nthan dynamically-linked tests.\"\n    ON \"BUILD_STATIC_LIBRARIES\" OFF\n)\nmark_as_advanced(BUILD_TESTS_AND_EXAMPLES_STATIC)\n\ncmake_dependent_option(BUILD_TESTS_AND_EXAMPLES_SHARED\n    \"Dynamically link tests and examples against shared Simbody libraries.\\\nDynamic linking has faster build times and uses less storage than static \\\nlinking.\"\n    ON \"BUILD_DYNAMIC_LIBRARIES\" OFF\n)\nmark_as_advanced(BUILD_TESTS_AND_EXAMPLES_SHARED)\n\nif(BUILD_TESTING AND NOT (BUILD_TESTS_AND_EXAMPLES_STATIC OR\n        BUILD_TESTS_AND_EXAMPLES_SHARED))\n    message(SEND_ERROR\n        \"Requested build configuration is invalid! BUILD_TESTING is set to ON, \"\n        \"but no tests will be built because dynamic and statically-linked tests \"\n        \"are disabled. (BUILD_TESTS_AND_EXAMPLES_SHARED and \"\n        \"BUILD_TESTS_AND_EXAMPLES_STATIC have been manually set to OFF)\")\nendif()\n\nif(BUILD_EXAMPLES AND NOT (BUILD_TESTS_AND_EXAMPLES_STATIC OR\n        BUILD_TESTS_AND_EXAMPLES_SHARED))\n    message(SEND_ERROR\n        \"Requested build configuration is invalid! BUILD_EXAMPLES is set to ON, \"\n        \"but no examples will be built because dynamic and statically-linked examples \"\n        \"are disabled. (BUILD_TESTS_AND_EXAMPLES_SHARED and \"\n        \"BUILD_TESTS_AND_EXAMPLES_STATIC have been manually set to OFF)\")\nendif()\n\noption(SIMBODY_COVERAGE\n    \"Generate code coverage files to assess test coverage (ignored for MSVC compilers)\"\n    OFF)\nmark_as_advanced(SIMBODY_COVERAGE)\n\noption(WINDOWS_USE_EXTERNAL_LIBS\n    \"Link against system BLAS/LAPACK on Windows. When set to OFF/FALSE (default), Simbody \\\nwill use vendored BLAS/LAPACK libraries.\"\n    OFF)\nmark_as_advanced(WINDOWS_USE_EXTERNAL_LIBS)\n\n# Ultimately, BUILD_USING_OTHER_LAPACK is given to target_link_libraries;\n# see https://cmake.org/cmake/help/latest/command/target_link_libraries.html#overview\n# for a more complete description of different valid incantations for BUILD_USING_OTHER_LAPACK\nset(BUILD_USING_OTHER_LAPACK \"\" CACHE STRING\n    \"Use non-default BLAS/LAPACK libraries. List library names (no extensions) \\\nseparated by semicolons (full paths or paths that are on the (DY)LD_LIBRARY_PATH \\\n(UNIX) or PATH (Windows)). (e.g. BUILD_USING_OTHER_LAPACK='mkl_intel_c_dll;\\\nmkl_sequential_dll;mkl_core_dll' to use Intel MKL on Windows).\")\nmark_as_advanced(BUILD_USING_OTHER_LAPACK)\n\n# Check compiler version\nif(MSVC)\n    if(MSVC_VERSION LESS 1800 OR MSVC_VERSION EQUAL 1800)\n        message(FATAL_ERROR \"\\nMSVC does not support C++ 2011 features, for \"\n                            \"example 'constexpr'. Update to at least MSVC 2015 \"\n                            \"or use a MinGW version on Windows.\\nLook at the \"\n                            \"README.md for more information.\\nIf you have the\"\n                            \" 'Visual C++ Compiler Nov 2013 CTP (CTP_Nov2013)'\"\n                            \" comment this test and configure normally.\")\n    endif()\n    if(SIMBODY_COVERAGE)\n        message(FATAL_ERROR \"Code coverage is not possible with MSVC.\")\n    endif()\nelseif(${CMAKE_CXX_COMPILER_ID} MATCHES \"GNU\")\n    set(SIMBODY_REQUIRED_GCC_VERSION 4.9.0)\n    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS ${SIMBODY_REQUIRED_GCC_VERSION})\n        message(FATAL_ERROR \"GNU GCC/G++ version is too old to compile Simbody.\\n\"\n                            \"Simbody requires at least version : \"\n                            \"${SIMBODY_REQUIRED_GCC_VERSION}\")\n    endif()\nelseif(${CMAKE_CXX_COMPILER_ID} MATCHES \"Clang\")\n    set(SIMBODY_REQUIRED_CLANG_VERSION 3.4)\n    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS ${SIMBODY_REQUIRED_CLANG_VERSION})\n        message(FATAL_ERROR \"Clang version is too old to compile Simbody.\\n\"\n                            \"Simbody requires at least version : \"\n                            \"${SIMBODY_REQUIRED_CLANG_VERSION}\")\n    endif()\nendif()\n\nset(CMAKE_C_STANDARD 11)\nset(CMAKE_C_STANDARD_REQUIRED TRUE)\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED TRUE)\n\nset(SIMBODY_COPYRIGHT_YEARS \"2005-20\")\n\n# underbar separated list of dotted authors, no spaces or commas\nset(SIMBODY_AUTHORS \"Michael.Sherman_Peter.Eastman\")\n\nset(SIMBODY_SONAME_VERSION\n    \"${Simbody_VERSION_MAJOR}.${Simbody_VERSION_MINOR}\"\n    CACHE INTERNAL\n    \"Soname version; appended to names of shared libs\"\n    )\n\n# At this point CMake will have set CMAKE_INSTALL_PREFIX to /usr/local on Linux\n# or appropriate ProgramFiles directory on Windows, for example\n# C:/Program Files/Simbody, C:/Program Files (x86)/Simbody, or the local\n# language equivalent.\n\nif(WIN32)\n    set(CMAKE_INSTALL_DOCDIR doc CACHE PATH \"documentation root (DATAROOTDIR/doc/PROJECT_NAME)\")\nelse()\n    # Redefine DOCDIR to use the project name in lowercase to avoid\n    # problems with some platforms: NTFS on Win, XFS or JFS variants\n    set(CMAKE_INSTALL_DOCDIR share/doc/simbody CACHE PATH \"documentation root (DATAROOTDIR/doc/PROJECT_NAME)\")\nendif()\n\n# Include GNUInstallDirs to get canonical paths\ninclude(GNUInstallDirs)\n\nset(BUILD_BINARY_DIR ${CMAKE_BINARY_DIR}\n    CACHE PATH\n    \"The Simbody build (not the install) puts all the libraries and executables together here (with /Release, etc. appended on some platforms).\")\n\n# Make everything go in the same binary directory. (These are CMake-defined\n# variables.)\n# TODO: \"EXECUTABLE_OUTPUT_PATH\" and \"LIBRARY_OUTPUT_PATH\" have been superseded;\n# its unclear if these need to be updated to the replacements\nset(EXECUTABLE_OUTPUT_PATH ${BUILD_BINARY_DIR})\nset(LIBRARY_OUTPUT_PATH ${BUILD_BINARY_DIR})\n\n# If CMAKE_INSTALL_PREFIX is /usr/local, then the LIBDIR should necessarily be\n# lib/. Sometimes (on Linux), LIBDIR is something like x86_64-linux-gnu. The\n# linker will search /usr/lib/x86_64-linux-gnu (this path is in\n# /etc/ld.so.conf.d), but it will NOT search /usr/local/lib/x86-64-linux-gnu.\n# HOWEVER, it WILL search /usr/local/lib. So that Linux users needn't modify\n# their LD_LIBRARY_PATH if installing to /usr/local, we force the LIBDIR to be\n# lib/.\n# Note: CMake 3.0 fixes this issue. When we move to CMake 3.0, we can\n# remove this if-statement. See issue #151.\nif(\"${CMAKE_INSTALL_PREFIX}\" STREQUAL \"/usr/local\" OR\n        \"${CMAKE_INSTALL_PREFIX}\" STREQUAL \"/usr/local/\")\n    # Overwrite both of these variables; we use both of them.\n    set(CMAKE_INSTALL_LIBDIR \"lib\")\n    set(CMAKE_INSTALL_FULL_LIBDIR\n        \"${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}\")\nendif()\n\n# Ensure that debug libraries have \"_d\" appended to their names.\nset(CMAKE_DEBUG_POSTFIX \"_d\")\n\n#\n# These are the names of all the libraries we may generate. These are\n# target names so can be used to specify dependencies of one library\n# on another. (In Debug mode the actual targets will have \"_d\" appended.)\n#\n\nset(NS)\nif(BUILD_USING_NAMESPACE)\n    set(NS \"${BUILD_USING_NAMESPACE}_\")\nendif()\n# This is the suffix if we're building and depending on versioned libraries.\nset(VN \"_${Simbody_VERSION}\")\n\nset(SimTKSIMBODY_LIBRARY_NAME ${NS}SimTKsimbody CACHE INTERNAL\n    \"Base name of the SimTKsimbody library\"\n    )\nset(SimTKMATH_LIBRARY_NAME ${NS}SimTKmath CACHE INTERNAL\n    \"Base name of the SimTKmath library\"\n    )\nset(SimTKCOMMON_LIBRARY_NAME ${NS}SimTKcommon CACHE INTERNAL\n    \"Base name of the SimTKcommon library\"\n    )\n\n\nset(SimTKCOMMON_SHARED_LIBRARY ${SimTKCOMMON_LIBRARY_NAME})\nset(SimTKCOMMON_STATIC_LIBRARY ${SimTKCOMMON_LIBRARY_NAME}_static)\n\nset(SimTKCOMMON_LIBRARY_NAME_VN ${NS}SimTKcommon${VN})\nset(SimTKCOMMON_SHARED_LIBRARY_VN ${SimTKCOMMON_LIBRARY_NAME_VN})\nset(SimTKCOMMON_STATIC_LIBRARY_VN ${SimTKCOMMON_LIBRARY_NAME_VN}_static)\n\nset(SimTKMATH_SHARED_LIBRARY ${SimTKMATH_LIBRARY_NAME})\nset(SimTKMATH_STATIC_LIBRARY ${SimTKMATH_LIBRARY_NAME}_static)\n\nset(SimTKMATH_LIBRARY_NAME_VN ${NS}SimTKmath${VN})\nset(SimTKMATH_SHARED_LIBRARY_VN ${SimTKMATH_LIBRARY_NAME_VN})\nset(SimTKMATH_STATIC_LIBRARY_VN ${SimTKMATH_LIBRARY_NAME_VN}_static)\n\nset(SimTKSIMBODY_SHARED_LIBRARY ${SimTKSIMBODY_LIBRARY_NAME})\nset(SimTKSIMBODY_STATIC_LIBRARY ${SimTKSIMBODY_LIBRARY_NAME}_static)\n\nset(SimTKSIMBODY_LIBRARY_NAME_VN ${NS}SimTKsimbody${VN})\nset(SimTKSIMBODY_SHARED_LIBRARY_VN ${SimTKSIMBODY_LIBRARY_NAME_VN})\nset(SimTKSIMBODY_STATIC_LIBRARY_VN ${SimTKSIMBODY_LIBRARY_NAME_VN}_static)\n\n\n# In addition to the platform name we need to know the Application Binary\n# Interface (ABI) we're building for. Currently that is either x86, meaning\n# 32 bit Intel instruction set, or x64 for 64 bit Intel instruction set.\n\nif(${CMAKE_SIZEOF_VOID_P} EQUAL 8)\n    set(PLATFORM_ABI x64)\nelse()\n    set(PLATFORM_ABI x86)\nendif()\n\n\nif(NOT MSVC AND NOT XCODE AND NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING\n        \"Debug, RelWithDebInfo (recommended), or Release build\"\n        )\nendif()\n\n\n## Choose the maximum level of x86 instruction set that the compiler is\n## allowed to use.\n## Was using sse2 but changed to let the compilers choose. Most will\n## probably use sse2 or later by default.\n## On 64 bit MSVC 2013, the default is sse2 and the argument\n## isn't recognized so don't specify it.\nif(CMAKE_CL_64)\n    set(default_build_inst_set)\nelse()\n    set(default_build_inst_set)\nendif()\n\n## This can be set to a different value by the person running CMake.\nset(BUILD_INST_SET \"\"\n    CACHE STRING\n    \"CPU instruction level compiler is permitted to use (default: let compiler decide).\")\nmark_as_advanced( BUILD_INST_SET )\n\nif(BUILD_INST_SET)\n    set(inst_set_to_use ${BUILD_INST_SET})\nelse()\n    set(inst_set_to_use ${default_build_inst_set})\nendif()\n\n# RPATH\n# -----\nset(SIMBODY_USE_INSTALL_RPATH FALSE)\nif(UNIX)\n    # CMake 2.8.12 introduced the ability to set RPATH for shared libraries on\n    # OSX. This helps executables find the libraries they depend on without\n    # having to set the DYLD_LIBRARY_PATH environment variable.\n\n    # Consider a library libfoo.dyld and an executable bar.\n    # On OSX, libraries have an \"install name\" that, when linking, is copied\n    # into the target (e.g., bar). The \"install name\" can be the full path to\n    # libfoo.dylib, in which case bar will have no trouble finding libfoo.dylib\n    # at runtime (since it has the full path to it). This doesn't work if you\n    # want to be able to relocate your project. Therefore, it's possible to use\n    # special tokens in the \"install name\" that are evaluated separately. The\n    # token \"@exectuable_path\" is evaluated (at run time) to the full path of\n    # the exectuable (e.g., bar) that is trying to load libfoo.dylib. An even\n    # more flexible token is \"@rpath\", which is evaluated to a path (called\n    # RPATH) that can be baked into the executable just after compiling or any\n    # time before running the executable (using the executable\n    # \"install_name_tool\"). The RPATH stored in executables can also contain\n    # \"@executable_path\", etc. On Linux, rather than \"@executable_path\", we \n    # must use \"$ORIGIN\" to find the location of the executable.\n\n    if(APPLE)\n        # This variable gets used when configuring the Info.plist for\n        # simbody-visualizer.app; see cmake/MacOSXBundleInfo.plist.in.\n        set(MACOSX_BUNDLE_HIGH_RESOLUTION_CAPABLE \"false\")\n\n        # Set the install name of libraries to contain \"@rpath\".\n        # This allows clients of our libraries to point to them however they wish.\n        set(CMAKE_MACOSX_RPATH ON)\n    endif() \n\n    # We only need to set RPATH in executables if the libraries are installed\n    # into directories that are not already searched by the linker.\n    list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES\n        \"${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}\" isSystemDir)\n    # CMake sets isSystemDir to -1 if the lib dir is NOT a system lib dir.\n    if(\"${isSystemDir}\" STREQUAL \"-1\")\n        # This variable is used later on to toggle if RPATH should be set for\n        # specific targets.\n        set(SIMBODY_USE_INSTALL_RPATH TRUE)\n    endif()\nendif()\n\n\n## When building in any of the Release modes, tell gcc/clang to use\n## not-quite most agressive optimization.  Here we\n## are specifying *all* of the Release flags, overriding CMake's defaults.\n## Watch out for optimizer bugs in particular gcc versions!\n\nif(${CMAKE_CXX_COMPILER_ID} MATCHES \"GNU\" OR\n   ${CMAKE_CXX_COMPILER_ID} MATCHES \"Clang\")\n\n    if(inst_set_to_use)\n        string(TOLOWER ${inst_set_to_use} GCC_INST_SET)\n        set(GCC_INST_SET \"-m${GCC_INST_SET}\")\n    else()\n        set(GCC_INST_SET)\n    endif()\n\n    # Unrolling fixed-count loops was a useful optimization for Simmatrix\n    # in earlier gcc versions.\n    # Doesn't have a big effect for current compiler crop and may be\n    # pushing our luck with optimizer bugs. So let the compilers decide\n    # how to handle loops instead.\n    ##set(GCC_OPT_ENABLE \"-funroll-loops\")\n\n    # If you know of optimization bugs that affect Simbody in particular\n    # gcc versions, this is the place to turn off those optimizations.\n    set(GCC_OPT_DISABLE)\n\n    # C++\n    set(BUILD_CXX_FLAGS_DEBUG          \"-g ${GCC_INST_SET}\")\n    set(BUILD_CXX_FLAGS_RELEASE\n      \"-DNDEBUG -O2 ${GCC_OPT_ENABLE} ${GCC_OPT_DISABLE} ${GCC_INST_SET}\")\n    set(BUILD_CXX_FLAGS_RELWITHDEBINFO\n    \"-DNDEBUG -O2 -g ${GCC_OPT_ENABLE} ${GCC_OPT_DISABLE} ${GCC_INST_SET}\")\n    set(BUILD_CXX_FLAGS_MINSIZEREL     \"-DNDEBUG -Os ${GCC_INST_SET}\")\n\n    # C\n    set(BUILD_C_FLAGS_DEBUG            \"-g ${GCC_INST_SET}\")\n    set(BUILD_C_FLAGS_RELEASE\n      \"-DNDEBUG -O2 ${GCC_OPT_ENABLE} ${GCC_OPT_DISABLE} ${GCC_INST_SET}\")\n    set(BUILD_C_FLAGS_RELWITHDEBINFO\n    \"-DNDEBUG -O2 -g ${GCC_OPT_ENABLE} ${GCC_OPT_DISABLE} ${GCC_INST_SET}\")\n    set(BUILD_C_FLAGS_MINSIZEREL       \"-DNDEBUG -Os ${GCC_INST_SET}\")\n\n    # C++\n    set(CMAKE_CXX_FLAGS_DEBUG ${BUILD_CXX_FLAGS_DEBUG}\n        CACHE STRING \"Control using BUILD_CXX\" FORCE)\n    set(CMAKE_CXX_FLAGS_RELEASE ${BUILD_CXX_FLAGS_RELEASE}\n        CACHE STRING \"Control using BUILD_CXX\" FORCE)\n    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO ${BUILD_CXX_FLAGS_RELWITHDEBINFO}\n        CACHE STRING \"Control using BUILD_CXX\" FORCE)\n    set(CMAKE_CXX_FLAGS_MINSIZEREL ${BUILD_CXX_FLAGS_MINSIZEREL}\n        CACHE STRING \"Control using BUILD_CXX\" FORCE)\n\n    # C\n    set(CMAKE_C_FLAGS_DEBUG ${BUILD_C_FLAGS_DEBUG}\n        CACHE STRING \"Control using BUILD_CXX\" FORCE)\n    set(CMAKE_C_FLAGS_RELEASE ${BUILD_C_FLAGS_RELEASE}\n        CACHE STRING \"Control using BUILD_CXX\" FORCE)\n    set(CMAKE_C_FLAGS_RELWITHDEBINFO ${BUILD_C_FLAGS_RELWITHDEBINFO}\n        CACHE STRING \"Control using BUILD_CXX\" FORCE)\n    set(CMAKE_C_FLAGS_MINSIZEREL ${BUILD_C_FLAGS_MINSIZEREL}\n        CACHE STRING \"Control using BUILD_CXX\" FORCE)\n\n    set(CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\" ${CMAKE_MODULE_PATH})\n    if(SIMBODY_COVERAGE)\n        find_package(codecov)\n    endif()\nelseif(MSVC)\n## Caution: can't use CMAKE_CXX_COMPILER_ID MATCHES MSVC here because\n## \"MSVC\" is a predefined CMAKE variable and will get expanded to 1 or 0\n\n    ## When building in any of the Release modes, tell VC++ cl compiler to use\n    ## intrinsics (i.e. sqrt instruction rather than sqrt subroutine) with\n    ## flag /Oi.\n    if(inst_set_to_use)\n        string(TOUPPER ${inst_set_to_use} CL_INST_SET)\n        set(CL_INST_SET \"/arch:${CL_INST_SET}\")\n    else()\n        set(CL_INST_SET)\n    endif()\n\n    ## C++\n    set(BUILD_CXX_FLAGS_DEBUG\n    \"/D _DEBUG /MDd /Od /Ob0 /RTC1 /Zi /GS- ${CL_INST_SET}\") \n    set(BUILD_CXX_FLAGS_RELEASE\n    \"/D NDEBUG /MD  /O2 /Ob2 /Oi /GS- ${CL_INST_SET}\")\n    set(BUILD_CXX_FLAGS_RELWITHDEBINFO\n    \"/D NDEBUG /MD  /O2 /Ob2 /Oi /Zi /GS- ${CL_INST_SET}\")\n    set(BUILD_CXX_FLAGS_MINSIZEREL\n    \"/D NDEBUG /MD  /O1 /Ob1 /Oi /GS- ${CL_INST_SET}\")\n\n    ## C\n    set(BUILD_C_FLAGS_DEBUG\n    \"/D _DEBUG /MDd /Od /Ob0 /RTC1 /Zi /GS- ${CL_INST_SET}\")\n    set(BUILD_C_FLAGS_RELEASE\n    \"/D NDEBUG /MD  /O2 /Ob2 /Oi /GS- ${CL_INST_SET}\")\n    set(BUILD_C_FLAGS_RELWITHDEBINFO\n    \"/D NDEBUG /MD  /O2 /Ob2 /Oi /Zi /GS- ${CL_INST_SET}\")\n    set(BUILD_C_FLAGS_MINSIZEREL\n    \"/D NDEBUG /MD  /O1 /Ob1 /Oi /GS- ${CL_INST_SET}\")\n\n    ## C++\n    set(CMAKE_CXX_FLAGS_DEBUG \"${BUILD_CXX_FLAGS_DEBUG} ${CMAKE_CXX_FLAGS_DEBUG}\"\n        CACHE STRING \"Control using BUILD_CXX\" FORCE)\n    set(CMAKE_CXX_FLAGS_RELEASE \"${BUILD_CXX_FLAGS_RELEASE} ${CMAKE_CXX_FLAGS_RELEASE}\"\n        CACHE STRING \"Control using BUILD_CXX\" FORCE)\n    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${BUILD_CXX_FLAGS_RELWITHDEBINFO} ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\"\n        CACHE STRING \"Control using BUILD_CXX\" FORCE)\n    set(CMAKE_CXX_FLAGS_MINSIZEREL \"${BUILD_CXX_FLAGS_MINSIZEREL} ${CMAKE_CXX_FLAGS_MINSIZEREL}\"\n        CACHE STRING \"Control using BUILD_CXX\" FORCE)\n\n    ## C\n    set(CMAKE_C_FLAGS_DEBUG \"${BUILD_C_FLAGS_DEBUG} ${CMAKE_C_FLAGS_DEBUG}\"\n        CACHE STRING \"Control using BUILD_CXX\" FORCE)\n    set(CMAKE_C_FLAGS_RELEASE \"${BUILD_C_FLAGS_RELEASE} ${CMAKE_C_FLAGS_RELEASE}\"\n        CACHE STRING \"Control using BUILD_CXX\" FORCE)\n    set(CMAKE_C_FLAGS_RELWITHDEBINFO \"${BUILD_C_FLAGS_RELWITHDEBINFO} ${CMAKE_C_FLAGS_RELWITHDEBINFO}\"\n        CACHE STRING \"Control using BUILD_CXX\" FORCE)\n    set(CMAKE_C_FLAGS_MINSIZEREL \"${BUILD_C_FLAGS_MINSIZEREL} ${CMAKE_C_FLAGS_MINSIZEREL}\"\n        CACHE STRING \"Control using BUILD_CXX\" FORCE)\n\nendif()\n\n# Collect up information about the version of the simbody library we're building\n# and make it available to the code so it can be built into the binaries.\nadd_compile_definitions(\n   SimTK_SIMBODY_COPYRIGHT_YEARS=\"${SIMBODY_COPYRIGHT_YEARS}\"\n   SimTK_SIMBODY_AUTHORS=\"${SIMBODY_AUTHORS}\"\n)\n\n#\n# Allow automated build and dashboard.\n#\n\nif(BUILD_TESTING)\n    include(CTest) # automatically calls enable_testing()\n    ## When in Debug mode and running valgrind, some of the test\n    ## cases take longer than the default 1500 seconds.\n    set(CTEST_TESTING_TIMEOUT 7200)\nendif()\n\n# These are used in Doxyfile.in and SimbodyConfig.cmake.in.\nset(SIMBODY_INSTALL_DOXYGENDIR   \"${CMAKE_INSTALL_DOCDIR}/api\")\nset(SIMBODY_DOXYGEN_TAGFILE_NAME \"SimbodyDoxygenTagfile\")\nif( INSTALL_DOCS )\n    add_subdirectory(doc)\nendif()\n\n# Specify where visualizer should be installed. This needs to be in the\n# root CMakeLists.txt so the cmake config file can see this value.\n#\n# Also specify where include files are installed.\nif(WIN32)\n    # Install visualizer to bin, since it needs to be co-located with dll's\n    set(SIMBODY_VISUALIZER_REL_INSTALL_DIR ${CMAKE_INSTALL_BINDIR})\n    # Install include files into base include folder since it's a sandbox\n    set(SIMBODY_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_INCLUDEDIR})\nelse()\n    # Visualizer is not intended to be a user executable. Proper place is\n    # inside the lib directory\n    set(SIMBODY_VISUALIZER_REL_INSTALL_DIR ${CMAKE_INSTALL_LIBEXECDIR}/simbody)\n    # Install include files in simbody subfolder to avoid polluting the\n    # global build folder\n    set(SIMBODY_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_INCLUDEDIR}/simbody)\nendif()\nset(SIMBODY_VISUALIZER_INSTALL_DIR\n    ${CMAKE_INSTALL_PREFIX}/${SIMBODY_VISUALIZER_REL_INSTALL_DIR})\n\n# Each of these returns a list of API include directories for\n# use by the later builds.\nadd_custom_target(PlatformFiles ALL)\nadd_subdirectory( Platform )\n# PLATFORM_INCLUDE_DIRECTORIES now set; 'blas' and 'lapack' targets defined on Windows\n\nif(BUILD_USING_OTHER_LAPACK)\n    set(LAPACK_BEING_USED ${BUILD_USING_OTHER_LAPACK} CACHE INTERNAL\n        \"The BLAS/LAPACK libraries that will be linked against by the Simbody libraries.\")\n\n    message(CHECK_START \"Trying to compile with requested BLAS/LAPACK libraries\")\nelse()\n    # Determine which math libraries to use for this platform.\n    # Intel MKL: mkl_intel_c_dll;mkl_sequential_dll;mkl_core_dll\n    set(BUILD_USING_OTHER_LAPACK \"\" CACHE STRING\n    \"If you have your own Lapack and Blas, put libraries here, separated by semicolons (full paths or paths that are on the (DY)LD_LIBRARY_PATH (UNIX) or PATH (Windows)). See LAPACK_BEING_USED to see what's actually being used.\")\n    if(WIN32 AND NOT WINDOWS_USE_EXTERNAL_LIBS)\n        set(LAPACK_PLATFORM_DEFAULT lapack;blas)\n    else()\n        find_package(BLAS) # defines IMPORTED target BLAS::BLAS\n        find_package(LAPACK) # defines IMPORTED target LAPACK::LAPACK\n        if(BLAS_FOUND AND LAPACK_FOUND)\n            set(LAPACK_PLATFORM_DEFAULT BLAS::BLAS LAPACK::LAPACK)\n        else()\n            message(WARNING \"Could not find blas/lapack\")\n        endif()\n    endif()\n    set(LAPACK_BEING_USED ${LAPACK_PLATFORM_DEFAULT} CACHE INTERNAL\n        \"The BLAS/LAPACK libraries that will be linked against by the Simbody libraries.\")\n    message(CHECK_START \"Trying to compile with system BLAS/LAPACK libraries\")\nendif()\n\n\n# Try to link against the requested BLAS/LAPACK libraries\nset(CMAKE_TRY_COMPILE_TARGET_TYPE EXECUTABLE)\nfile(WRITE ${CMAKE_CURRENT_BINARY_DIR}/lapack_test.c\n\"\\\n#include \\\"SimTKlapack.h\\\"\nint main () {\nint n = 2;\nint stride = 1;\nfloat x[] = {1.0, 1.0};\nfloat y[] = {2.0, 3.0};\n\nfloat d = sdot_(&n, x, &stride, y, &stride);\n\nreturn !(d == 5.0); // return zero if sdot_ worked\n}\n\")\n\ntry_compile(OTHER_LAPACK_FUNCTIONAL ${CMAKE_CURRENT_BINARY_DIR}\n    SOURCES ${CMAKE_CURRENT_BINARY_DIR}/lapack_test.c\n    CMAKE_FLAGS -DINCLUDE_DIRECTORIES=${CMAKE_CURRENT_SOURCE_DIR}/SimTKcommon/include\n    OUTPUT_VARIABLE BLAS_TRYCOMPILE_LOG\n    LINK_LIBRARIES ${LAPACK_BEING_USED})\nif(OTHER_LAPACK_FUNCTIONAL)\n    message(CHECK_PASS \"success.\")\n    message(STATUS \"Using BLAS/LAPACK libraries ${LAPACK_BEING_USED}\")\nelse()\n    message(CHECK_FAIL \"failed.\")\n    message(AUTHOR_WARNING ${BLAS_TRYCOMPILE_LOG})\n    message(FATAL_ERROR \"Failed to compile using the BLAS/LAPACK libraries ${LAPACK_BEING_USED}.\n        If BUILD_USING_OTHER_LAPACK was given; check that it was set correctly.\")\n\nendif()\n\nif(UNIX)\n    if(NOT APPLE)\n        set(REALTIME_LIB rt)\n        # We do not use pthreads directly anymore, but on Linux, C++11 threads\n        # are implemented with pthreads, and we must link to it.\n        set(PTHREAD_LIB pthread)\n    endif()\n    set(MATH_LIBRARY m)\n    set(DL_LIBRARY dl)\nendif()\n\nset(MATH_LIBS_TO_USE    ${LAPACK_BEING_USED} ${PTHREAD_LIB}\n                        ${REALTIME_LIB} ${DL_LIBRARY} ${MATH_LIBRARY})\nset(MATH_LIBS_TO_USE_VN ${MATH_LIBS_TO_USE})\n\n\nadd_subdirectory( SimTKcommon )\n# SimTKCOMMON_INCLUDE_DIRECTORIES now set\nadd_subdirectory( SimTKmath )\n# SimTKMATH_INCLUDE_DIRECTORIES now set\nadd_subdirectory( Simbody )\n# SimTKSIMBODY_INCLUDE_DIRECTORIES now set(but not used)\n# GUI_NAME now set\n\nif( BUILD_EXAMPLES )\n    add_subdirectory( examples )\nendif()\n\nif( INSTALL_DOCS )\n    file(GLOB TOPLEVEL_DOCS LICENSE.txt *.md doc/*.pdf doc/*.md)\n    install(FILES ${TOPLEVEL_DOCS} DESTINATION ${CMAKE_INSTALL_DOCDIR})\nendif()\n\n# Add uninstall target\nconfigure_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake\"\n    IMMEDIATE @ONLY)\nadd_custom_target(uninstall\n    \"${CMAKE_COMMAND}\" -P \"${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake\")\n\n# Make the cmake config files\nset(PKG_NAME ${PROJECT_NAME})\nset(PKG_LIBRARIES\n    ${SimTKSIMBODY_LIBRARY_NAME}\n    ${SimTKMATH_LIBRARY_NAME}\n    ${SimTKCOMMON_LIBRARY_NAME}\n    )\n\nif(WIN32)\n    set(SIMBODY_CMAKE_DIR cmake)\nelseif(UNIX)\n    set(SIMBODY_CMAKE_DIR ${CMAKE_INSTALL_LIBDIR}/cmake/simbody/)\nendif()\n\n# Configure SimbodyConfig.cmake in a way that allows the installation to be\n# relocatable.\ninclude(CMakePackageConfigHelpers)\nconfigure_package_config_file(\n    ${CMAKE_SOURCE_DIR}/cmake/SimbodyConfig.cmake.in\n    ${CMAKE_CURRENT_BINARY_DIR}/cmake/SimbodyConfigForInstall.cmake\n    INSTALL_DESTINATION \"${SIMBODY_CMAKE_DIR}\"\n    PATH_VARS # Variables to edit in the SimbodyConfig.cmake.in.\n        CMAKE_INSTALL_PREFIX\n        SIMBODY_INCLUDE_INSTALL_DIR\n        CMAKE_INSTALL_LIBDIR\n        CMAKE_INSTALL_BINDIR\n        SIMBODY_VISUALIZER_INSTALL_DIR\n        SIMBODY_INSTALL_DOXYGENDIR\n    )\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/cmake/SimbodyConfigForInstall.cmake\n        DESTINATION ${SIMBODY_CMAKE_DIR}\n        RENAME SimbodyConfig.cmake)\n\n# Create a file that allows clients to Simbody to ensure they have the version\n# of Simbody they want.\ninclude(CMakePackageConfigHelpers)\nwrite_basic_package_version_file(\n    ${CMAKE_CURRENT_BINARY_DIR}/cmake/SimbodyConfigVersion.cmake\n    VERSION \"${SIMBODY_VERSION}\"\n    COMPATIBILITY SameMajorVersion)\n\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/cmake/SimbodyConfigVersion.cmake\n        DESTINATION ${SIMBODY_CMAKE_DIR})\n\ninstall(EXPORT SimbodyTargets DESTINATION\n        \"${SIMBODY_CMAKE_DIR}\") #optionally: COMPONENT dev\n\n# Install a sample CMakeLists.txt that uses SimbodyConfig.cmake.\ninstall(FILES ${CMAKE_SOURCE_DIR}/cmake/SampleCMakeLists.txt\n        DESTINATION ${SIMBODY_CMAKE_DIR})\n\n# Make the pkgconfig file: select the proper flags depending on the platform\nif(WIN32)\n    if(${PLATFORM_ABI} MATCHES \"x64\")\n        # win 64 bits\n        set(PKGCONFIG_PLATFORM_LIBS \"-lliblapack -llibblas\")\n    else()\n        set(PKGCONFIG_PLATFORM_LIBS \"-lliblapack -llibblas\")\n    endif()\nelseif(APPLE)\n    set(PKGCONFIG_PLATFORM_LIBS     \"-llapack -lblas -ldl\")\nelse()\n    set(PKGCONFIG_PLATFORM_LIBS     \"-llapack -lblas -lpthread -lrt -ldl -lm\")\nendif()\n\nconfigure_file(${CMAKE_SOURCE_DIR}/cmake/pkgconfig/simbody.pc.in\n    ${CMAKE_CURRENT_BINARY_DIR}/cmake/pkgconfig/simbody.pc @ONLY)\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/cmake/pkgconfig/simbody.pc\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig/)\n"
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 11.6611328125,
          "content": "{\n    \"version\": 3,\n    \"configurePresets\": [\n        {\n            \"hidden\": true,\n            \"name\": \"linux\",\n            \"condition\": {\n                \"type\": \"equals\",\n                \"lhs\": \"${hostSystemName}\",\n                \"rhs\": \"Linux\"\n            }\n        },\n        {\n            \"hidden\": true,\n            \"name\": \"windows\",\n            \"condition\": {\n                \"type\": \"equals\",\n                \"lhs\": \"${hostSystemName}\",\n                \"rhs\": \"Windows\"\n            },\n            \"generator\": \"Visual Studio 17 2022\",\n            \"architecture\": {\n                \"value\": \"x64\"\n            }\n        },\n        {\n            \"hidden\": true,\n            \"name\": \"macos\",\n            \"condition\": {\n                \"type\": \"equals\",\n                \"lhs\": \"${hostSystemName}\",\n                \"rhs\": \"Darwin\"\n            },\n            \"cacheVariables\": {\n                \"CMAKE_OSX_DEPLOYMENT_TARGET\": \"10.10\"\n            }\n        },\n        {\n            \"hidden\": true,\n            \"name\": \"release\",\n            \"cacheVariables\": {\n                \"CMAKE_BUILD_TYPE\": \"Release\"\n            }\n        },\n        {\n            \"hidden\": true,\n            \"name\": \"relwithdebinfo\",\n            \"cacheVariables\": {\n                \"CMAKE_BUILD_TYPE\": \"RelWithDebInfo\"\n            }\n        },\n        {\n            \"hidden\": true,\n            \"name\": \"debug\",\n            \"cacheVariables\": {\n                \"SIMBODY_COVERAGE\": true,\n                \"CMAKE_BUILD_TYPE\": \"Debug\"\n            }\n        },\n        {\n            \"hidden\": true,\n            \"name\": \"clang\",\n            \"cacheVariables\": {\n                \"CMAKE_C_COMPILER\": \"clang\",\n                \"CMAKE_CXX_COMPILER\": \"clang++\"\n            }\n        },\n        {\n            \"hidden\": true,\n            \"name\": \"gcc\",\n            \"cacheVariables\": {\n                \"CMAKE_C_COMPILER\": \"gcc\",\n                \"CMAKE_CXX_COMPILER\": \"g++\"\n            }\n        },\n        {\n            \"hidden\": true,\n            \"name\": \"base\",\n            \"displayName\": \"Base configuration\",\n            \"description\": \"Sets basic build configuration for all presets\",\n            \"binaryDir\": \"${sourceDir}/out/build/${presetName}\",\n            \"installDir\": \"${sourceDir}/out/install/${presetName}\",\n            \"inherits\": \"release\",\n            \"cacheVariables\": {\n                \"BLA_VENDOR\": \"Generic\"\n            },\n            \"warnings\": {\n                \"dev\": true,\n                \"deprecated\": true\n            }\n        },\n        {\n            \"name\": \"default\",\n            \"displayName\": \"Default build configuration\",\n            \"description\": \"The right build configuration for most users\",\n            \"inherits\": \"base\",\n            \"cacheVariables\": {\n                \"BUILD_TESTING\": false,\n                \"CMAKE_COMPILE_WARNING_AS_ERROR\": false\n            },\n            \"warnings\": {\n                \"dev\": false,\n                \"deprecated\": false\n            }\n        },\n        {\n            \"name\": \"msvc-default\",\n            \"displayName\": \"Default MSVC build configuration\",\n            \"description\": \"The right MSVC build configuration for most users\",\n            \"inherits\": [\n                \"base\",\n                \"windows\"\n            ],\n            \"cacheVariables\": {\n                \"BUILD_TESTING\": false,\n                \"CMAKE_COMPILE_WARNING_AS_ERROR\": false\n            },\n            \"environment\": {\n                \"CXXFLAGS\": \"/w\"\n            },\n            \"warnings\": {\n                \"dev\": false,\n                \"deprecated\": false\n            }\n        },\n        {\n            \"name\": \"dev-default\",\n            \"displayName\": \"Default build configuration for devs\",\n            \"description\": \"The right build configuration for most developers\",\n            \"inherits\": [\n                \"base\",\n                \"relwithdebinfo\"\n            ],\n            \"environment\": {\n                \"CXXFLAGS\": \"-Wall\"\n            }\n        },\n        {\n            \"name\": \"msvc-dev-default\",\n            \"displayName\": \"Default MSVC build configuration for devs\",\n            \"description\": \"The right MSVC build configuration for most developers\",\n            \"inherits\": [\n                \"base\",\n                \"windows\",\n                \"relwithdebinfo\"\n            ],\n            \"environment\": {\n                \"CXXFLAGS\": \"/WX\"\n            }\n        },\n        {\n            \"name\": \"ci-msvc-windows-release\",\n            \"displayName\": \"Windows CI default\",\n            \"description\": \"Default CI configuration for Windows (MSVC, Release)\",\n            \"inherits\": [\n                \"msvc-dev-default\",\n                \"windows\",\n                \"release\"\n            ]\n        },\n        {\n            \"name\": \"ci-make-macos-release\",\n            \"displayName\": \"MacOS CI default\",\n            \"description\": \"Default CI configuration for MacOS (Make, Clang, Release)\",\n            \"inherits\": [\n                \"base\",\n                \"macos\",\n                \"release\"\n            ],\n            \"environment\": {\n                \"CXXFLAGS\": \"-Werror\"\n            }\n        },\n        {\n            \"hidden\": true,\n            \"name\": \"ci-linux\",\n            \"inherits\": [\n                \"base\",\n                \"linux\"\n            ],\n            \"environment\": {\n                \"CXXFLAGS\": \"-Werror\"\n            }\n        },\n        {\n            \"name\": \"ci-make-clang-linux-release\",\n            \"displayName\": \"Configure Linux CI (Make, Clang, Release)\",\n            \"description\": \"CI configuration for Linux (Make, Clang, Release)\",\n            \"inherits\": [\n                \"ci-linux\",\n                \"clang\"\n            ]\n        },\n        {\n            \"name\": \"ci-make-clang-linux-debug\",\n            \"displayName\": \"Configure Linux CI (Make, Clang, Debug)\",\n            \"description\": \"CI configuration for Linux (Make, Clang, Debug)\",\n            \"inherits\": [\n                \"clang\",\n                \"ci-linux\",\n                \"debug\"\n            ]\n        },\n        {\n            \"name\": \"ci-make-gcc-linux-release\",\n            \"displayName\": \"Configure Linux CI (Make, GCC, Release)\",\n            \"description\": \"CI configuration for Linux (Make, GCC, Release)\",\n            \"inherits\": [\n                \"ci-linux\",\n                \"gcc\"\n            ]\n        },\n        {\n            \"name\": \"ci-make-gcc-linux-debug\",\n            \"displayName\": \"Configure Linux CI (Make, GCC, Debug)\",\n            \"description\": \"CI configuration for Linux (Make, GCC, Debug)\",\n            \"inherits\": [\n                \"gcc\",\n                \"ci-linux\",\n                \"debug\"\n            ]\n        }\n    ],\n    \"buildPresets\": [\n        {\n            \"hidden\": true,\n            \"name\": \"linux\",\n            \"condition\": {\n                \"type\": \"equals\",\n                \"lhs\": \"${hostSystemName}\",\n                \"rhs\": \"Linux\"\n            }\n        },\n        {\n            \"hidden\": true,\n            \"name\": \"windows\",\n            \"condition\": {\n                \"type\": \"equals\",\n                \"lhs\": \"${hostSystemName}\",\n                \"rhs\": \"Windows\"\n            }\n        },\n        {\n            \"hidden\": true,\n            \"name\": \"macos\",\n            \"condition\": {\n                \"type\": \"equals\",\n                \"lhs\": \"${hostSystemName}\",\n                \"rhs\": \"Darwin\"\n            }\n        },\n        {\n            \"name\": \"default\",\n            \"configurePreset\": \"default\"\n        },\n        {\n            \"name\": \"dev-default\",\n            \"configurePreset\": \"dev-default\"\n        },\n        {\n            \"name\": \"msvc-default\",\n            \"configurePreset\": \"msvc-default\",\n            \"inherits\": \"windows\",\n            \"configuration\": \"Release\"\n        },\n        {\n            \"name\": \"msvc-dev-default\",\n            \"configurePreset\": \"msvc-dev-default\",\n            \"inherits\": \"windows\",\n            \"configuration\": \"RelWithDebInfo\"\n        },\n        {\n            \"name\": \"ci-msvc-windows-release\",\n            \"configurePreset\": \"ci-msvc-windows-release\",\n            \"inherits\": \"windows\",\n            \"configuration\": \"Release\"\n        },\n        {\n            \"name\": \"ci-make-macos-release\",\n            \"configurePreset\": \"ci-make-macos-release\",\n            \"inherits\": \"macos\"\n        },\n        {\n            \"name\": \"ci-make-clang-linux-release\",\n            \"configurePreset\": \"ci-make-clang-linux-release\",\n            \"inherits\": [\n                \"linux\"\n            ]\n        },\n        {\n            \"name\": \"ci-make-clang-linux-debug\",\n            \"configurePreset\": \"ci-make-clang-linux-debug\",\n            \"inherits\": [\n                \"linux\"\n            ]\n        },\n        {\n            \"name\": \"ci-make-gcc-linux-release\",\n            \"configurePreset\": \"ci-make-gcc-linux-release\",\n            \"inherits\": [\n                \"linux\"\n            ]\n        },\n        {\n            \"name\": \"ci-make-gcc-linux-debug\",\n            \"configurePreset\": \"ci-make-gcc-linux-debug\",\n            \"inherits\": [\n                \"linux\"\n            ]\n        }\n    ],\n    \"testPresets\": [\n        {\n            \"hidden\": true,\n            \"name\": \"base\",\n            \"execution\": {\n                \"noTestsAction\": \"error\",\n                \"scheduleRandom\": true\n            },\n            \"output\": {\n                \"outputOnFailure\": true\n            }\n        },\n        {\n            \"hidden\": true,\n            \"name\": \"linux\",\n            \"condition\": {\n                \"type\": \"equals\",\n                \"lhs\": \"${hostSystemName}\",\n                \"rhs\": \"Linux\"\n            }\n        },\n        {\n            \"hidden\": true,\n            \"name\": \"windows\",\n            \"condition\": {\n                \"type\": \"equals\",\n                \"lhs\": \"${hostSystemName}\",\n                \"rhs\": \"Windows\"\n            }\n        },\n        {\n            \"hidden\": true,\n            \"name\": \"macos\",\n            \"condition\": {\n                \"type\": \"equals\",\n                \"lhs\": \"${hostSystemName}\",\n                \"rhs\": \"Darwin\"\n            }\n        },\n        {\n            \"name\": \"default\",\n            \"configurePreset\": \"default\",\n            \"inherits\": [\n                \"base\"\n            ]\n        },\n        {\n            \"name\": \"dev-default\",\n            \"configurePreset\": \"dev-default\",\n            \"inherits\": [\n                \"base\"\n            ]\n        },\n        {\n            \"name\": \"msvc-dev-default\",\n            \"configurePreset\": \"msvc-dev-default\",\n            \"inherits\": [\n                \"base\",\n                \"windows\"\n            ]\n        },\n        {\n            \"name\": \"ci-msvc-windows-release\",\n            \"configurePreset\": \"ci-msvc-windows-release\",\n            \"inherits\": [\n                \"base\",\n                \"windows\"\n            ],\n            \"configuration\": \"Release\"\n        },\n        {\n            \"name\": \"ci-make-macos-release\",\n            \"configurePreset\": \"ci-make-macos-release\",\n            \"inherits\": [\n                \"base\",\n                \"macos\"\n            ]\n        },\n        {\n            \"name\": \"ci-make-clang-linux-release\",\n            \"configurePreset\": \"ci-make-clang-linux-release\",\n            \"inherits\": [\n                \"base\",\n                \"linux\"\n            ]\n        },\n        {\n            \"name\": \"ci-make-clang-linux-debug\",\n            \"configurePreset\": \"ci-make-clang-linux-debug\",\n            \"inherits\": [\n                \"base\",\n                \"linux\"\n            ]\n        },\n        {\n            \"name\": \"ci-make-gcc-linux-release\",\n            \"configurePreset\": \"ci-make-gcc-linux-release\",\n            \"inherits\": [\n                \"base\",\n                \"linux\"\n            ]\n        },\n        {\n            \"name\": \"ci-make-gcc-linux-debug\",\n            \"configurePreset\": \"ci-make-gcc-linux-debug\",\n            \"inherits\": [\n                \"base\",\n                \"linux\"\n            ]\n        }\n    ]\n}\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 34.55859375,
          "content": "Contributing to Simbody\n=======================\nSimbody is a community resource and we encourage you to contribute in whatever way you can -- for example: new code, bug fixes, test cases, and examples; documentation improvements and typo fixes; bug reports, feature requests, ideas and discussion topics; and user forum questions and answers. We appreciate contributions and our development team is collaborative and constructive -- don't be shy! \n\n**Important note:** Simbody is an open source project licensed under extremely flexible terms intended to encourage use by *anyone*, for *any purpose*. When you make a contribution to the Simbody project, **you are agreeing** to do so under those same terms. The details are [below](#contributor-license-agreement); if you aren't comfortable with those terms, we're still friends but you shouldn't contribute. \n\nContents:\n- [Ways to Contribute](#ways-to-contribute)\n- [Submitting Pull Requests](#submitting-pull-requests-prs)\n- [Coding Conventions](#coding-conventions)\n- [List of Contributors](#list-of-contributors)\n- [Contributor License Agreement](#contributor-license-agreement)\n\n\nWays to contribute\n------------------\nThere are lots of ways to contribute to the Simbody project, and people with widely varying skill sets can make meaningful contributions. Please don't think your contribution has to be momentous to be appreciated. See a typo? Tell us about it or fix it! Here are some contribution ideas:\n\n- Use Simbody and let us know how you're using it by posting to the [Simbody user forum](https://simtk.org/forums/viewforum.php?f=47).  \n- Ask and/or answer questions on the forum.\n- File bug reports, documentation problems, feature requests, and developer discussion topics using the GitHub [Issue tracker](https://github.com/simbody/simbody/issues).\n- Submit GitHub Pull Requests providing new features, examples, or bug fixes to code or documentation (see below).\n- If our hard work has helped you with yours, please considering acknowledging your use of Simbody and encourage others to do so. Please cite this paper:\n\n    Michael A. Sherman, Ajay Seth, Scott L. Delp, Simbody: multibody dynamics for biomedical research, *Procedia IUTAM* 2:241-261 (2011) http://dx.doi.org/10.1016/j.piutam.2011.04.023\n\n\nSubmitting Pull Requests (PRs)\n------------------------------\nPlease don't surprise us with big out-of-the-blue PRs. If you want to work on an existing Issue, post a comment to that effect in the Issue. That way you can engage in discussion with others to coordinate your work with theirs and avoid duplication, to see what people think of the approach you have planned, and so on. If there is not yet a relevant Issue in place, a great way to start is by creating one, and then engaging in an Issue conversation.\n\nThe main (upstream) repository (repo) for Simbody is the `simbody` repo in the `simbody` organization on GitHub; that is, https://github.com/simbody/simbody. The general idea is that you will work in your own copy of that repo on GitHub (called a *fork*) and then submit a PR requesting to merge a branch in your fork into a branch in the upstream repo.\n\n### Mechanics of submitting a PR\nThis is a very abbreviated description of the process. If you are new to Git and Github you will need to look at some of the great GitHub tutorials, starting with GitHub Bootcamp [here](https://github.com).\n\nBelow we'll assume your GitHub account is `yourid`.\n\n1. **Create your own fork** `yourid/simbody` of the `simbody/simbody` repo on GitHub. Use the `Fork` button [here](https://github.com/simbody/simbody).\n2. **Clone your repo** `yourid/simbody` onto your local machine. (It is possible to work directly on your GitHub fork using GitHub's browser interface, but this is inadvisable except for small, safe documentation changes.)\n3. **Create a branch** like `something-feature` for your new feature or `fix-something-issue123` for a bug fix (we're not fussy about branch names; they are just temporary).\n4. **Commit the new code** or documentation to the `something-feature` branch.\n5. **Test and debug** your changes locally. Be sure to build at least occasionally in Debug mode -- it will run very slowly but you get much more error checking that way.\n6. **Push** now-debugged `something-feature` branch up to `yourid/simbody` fork on GitHub.\n7. **Create the PR**. Go to the `simbody/simbody` repo, click Pull Requests, and create a new PR. Specify `simbody/simbody master` as the base (destination) branch and `yourid/simbody something-feature` as the head (source) branch. Provide a description and reference the corresponding Issue(s). If there are particular people whose attention you want to draw to the PR, use \"at mentions\" like `@someone` in your PR description.\n8. **Check the build status**. Your PR submission will trigger our continuous integration builds on Travis (for Linux and OS-X) and AppVeyor (for Windows). GitHub provides a status message at the bottom of the PR's Conversation page allowing you to track build progress. Make sure the build succeeds on all platforms, and if not click the `Details` button and fix the problem if you can, or else ask for help. \n9. **Engage in discussion** with Simbody maintainers who will review your changes and make comments. \n10. **Make changes**. In most cases discussions and build problems will require you to make some changes to your submission. That is very easy to do because a PR is a *reference* to your branch, not a copy. So you just make the changes to the `something-feature` (or whatever) branch on your local clone, and then push those changes back to the same branch in your `yourid/simbody` fork on GitHub. The changes will immediately start building and you can return to discussing them in the same PR.\n\nEventually your PR will be merged (good) or closed unmerged by a Simbody maintainer, but always after an open discussion.   \n\nCoding Conventions\n------------------\nThe coding conventions below are meant to apply to new code. If you are submitting code that includes large pieces of pre-existing open source code, that code will have its own conventions. Please *do not* reformat that code to use our coding conventions because (a) that is just busy work, and (b) the code is then difficult to compare with or update from the original source.\n\nMany differences in programming technique fall into the realm of personal aesthetics (style) where one approach is not inherently better than another. It is our intent to be as accommodating as possible in this regard so that you can express yourself comfortably. However, we don't think it's a good idea to mix incompatible styles within the same or closely related source modules. That makes the software increasingly hard to read and understand over time. And it's ugly. So we ask that modifications to existing software be made in the original style of that software as much as possible, or be converted to a consistent style. We are more concerned about uniformity in the user-visible API than in internal implementation code.\n\nExisting Simbody code does not perfectly follow these conventions and we appreciate Issues pointing out problems, and especially PRs that correct our earlier slip-ups.\n\n- [Basic requirements](#basic-requirements)\n    - [Write new code in C++](#write-new-code-in-c)\n    - [Keep line width to 80 characters](#keep-line-width-to-80-characters)\n    - [Do not use tabs to indent; use 4 spaces](#do-not-use-tabs-to-indent-use-4-spaces)\n    - [Use English and a spell checker](#use-english-and-a-spell-checker)\n    - [Provide Doxygen comments](#provide-doxygen-comments)\n    - [Code should be `const` correct](#code-should-be-const-correct)\n    - [Objects should be thread safe](#objects-should-be-thread-safe)\n- [Naming conventions](#naming-conventions)\n    - [Types: classes and structs, typedefs, enums](#types-classes-and-structs-typedefs-enums)\n    - [Constants](#constants)\n    - [Functions and methods](#functions-and-methods)\n    - [Variables](#variables)\n    - [Preprocessor macros](#preprocessor-macros)\n    - [Namespaces](#namespaces)\n    - [Header guards](#header-guards)\n    - [Calendar dates](#calendar-dates)\n- [C++ tips and style guide](#c-tips-and-style-guide)\n    - [Public class members come first](#public-class-members-come-first)\n    - [Use anonymous namespaces](#use-anonymous-namespaces)\n    - [Don't waste lines on curly braces](#dont-waste-lines-on-curly-braces)\n    - [`throw` and `return` are not functions](#throw-and-return-are-not-functions)\n    - [Prefer *pre*-increment and *pre*-decrement operators](#prefer-pre-increment-and-pre-decrement-operators)\n    - [Place pointer and reference symbols with the type](#place-pointer-and-reference-symbols-with-the-type)\n    - [Avoid spaces that don't improve readability](#avoid-spaces-that-dont-improve-readability)\n    - [Make assignment operators safe for self-assignment](#make-assignment-operators-safe-for-self-assignment)\n\n\n### Basic requirements\n\n#### Write new code in C++\nNew code for Simbody should be written in C++. In Simbody 3.6 and later this can be C++11; before that it must be limited to C++03. Submissions including pre-existing open source code may be in other languages providing you can get them through our build system cleanly; we already have C and some assembly code in Simbody. However, any user-exposed API must be in C++ even if the internals are not.\n\n#### Keep line width to 80 characters\nLine widths should be no longer than **80** characters. The reason for this is that it permits multiple files to be laid out side-by-side during editing, which is *really* useful. At 80 characters you can get three windows on a modest-sized monitor, using a font that is readable even by adults.\n\nIt is best to use a \"guide line\" (a vertical line that marks column 80 while you edit) so that you can see where the limit is. If you are using Visual Studio, there is a very nice Editor Guidelines Extension available [here](https://visualstudiogallery.msdn.microsoft.com/da227a0b-0e31-4a11-8f6b-3a149cf2e459). If you don't have built-in guide lines available, note that the last line of the copyright block at the top of every Simbody source file is 80 characters wide.\n\nPlease don't interpret this to mean we like short lines. On the contrary it is nice to see as much code as reasonably possible on the screen at once, so don't stretch out your code vertically unnecessarily; and don't waste horizontal space where it doesn't help readability. Long comment blocks in particular should have lines as wide as possible. Just don't go over 80.\n\n#### Do not use tabs to indent; use 4 spaces\nThere *must not* be any tabs in your code; our build system will reject them. They will look great to you, but in other viewers people will see your code as randomly formatted.\nPlease be sure that your code editor is set to replace tabs with four spaces. You should never allow tab characters to get into your code.\n\nYour preferred editor almost certainly has settings to replace tabs with\nspaces. For example, if you use Visual Studio, go to `Tools:Options:Text\nEditor:C/C++:Tabs`, set `tab size=4` and `indent size=4`, and check the `Insert\nspaces` button. In `vi` or `vim` use `set tabstop=4` and `set expandtab`.\n\nMost editors can also help you clean up a file that already has tabs in it. In\nVisual Studio, go to `Edit:Advanced:Untabify` to untabify the current\nfile; or `Find & Replace` with regular expressions turned on, using `\\t` to\nrepresent a tab, to untabify your entire project/solution. On UNIX in general, see the `expand` shell command.\nIn `vi` or `vim`, use:\n\n```\n:1,$s/\\t/    /g\n```\n\n#### Use English and a spell checker\nSimbody has users and contributors from around the world. However, there is much to be gained by choosing a single natural language for a project, and English is the obvious choice for us. Any submitted code must be understandable by English speakers, with English comments, error messages, and documentation. As one practical consequence, this means Simbody code can use `char` rather than `wchar_t` (wide characters) and embedded English text to be displayed at run time is acceptable and need not be sequestered into separate files to facilitate translation. Simbody contributors thus do not need to be familiar with techniques for internationalization.\n\nPlease use correct spelling and punctuation, *especially* in comments that will become part of the Doxygen API documentation. It is tedious for reviewers to correct your spelling -- a spell checker is your friend and ours here. We know spelling and grammatical errors will creep in, but the fewer the better. If you are not a native English speaker, please just do your best -- we'll help.\n\n#### Provide Doxygen comments\nSome programmers think comments interfere with the pure beauty of their code; we are not among them. We would like to be able to understand your code, and especially appreciate useful things like citations to book sections or papers we can read that explain the theory. As usual though, we are much more concerned about the user-facing API than the internals. We use Doxygen to generate the API documentation from the code. We expect basic class documentation, and at least something for each publicly-visible member, using Doxygen-style comments which you can easily learn just by looking at existing code. Be sure to build the `doxygen` target (or `make doxygen`) if your code has a user-facing API and take a look at the results to make sure they are formatted well and make sense.\n\nYou can format your comments in any reasonable style (consistent within a source module, please). However, we would like to suggest that you forgo the old C-style comments where every line begins with ` * ` (space, asterisk, space). Since comments are almost universally colorized now in every viewer, you don't need the asterisks to make them stand out. And that wastes three characters on every line out of the limited budget we allow. Consider formatting like this:\n```cpp\n/** This is the doxygen brief description. This is the rest of the documentation \nand when you get to the final line you can just wrap up on the same line. */\nvoid theMethodYouAreDocumenting();\n```\n(The double asterisk is one way to signal a Doxygen comment.) That is compact and just as readable (when colorized) as this:\n```cpp\n/**\n * This is the doxygen brief description. This is the rest of the documentation \n * and when you get to the final line you will feel obligated to eat up one \n * more line.\n */ \nvoid theMethodYouAreDocumenting();\n```\nWhen you have short Doxygen comments to make about dozens of methods in a class, those two extra lines per method significantly reduce the amount of code you can squeeze onto one screen. The comments are harder to reformat also. The generated Doxygen documentation is identical either way.\n\n#### Code should be `const` correct\nOne of the best features of C++ is the ability to write a method signature so that the compiler can guarantee that an argument or data member will not be modified. This is specified using the `const` keyword. A program which uses `const` wherever it is appropriate, and propagates constness throughout, is called \"const correct.\" It is messy to take a non-const correct program and make it const correct later; that should be designed in from the start.\n\nIn addition to catching many otherwise difficult-to-find or worse, unnoticed, bugs const correctness can have a direct impact on performance. A large data structure which must not be modified can be passed by reference (i.e., by address) safely to a black-box routine that declares that argument `const`. Conscientious programmers who would otherwise copy the data to ensure its integrity do not need to do so in that case, providing a large savings in memory use and often in run time performance.\nAll Simbody software which is written in C++, or provides a C++ interface, must be const correct. We highly recommend this strategy for all programmers. It works.\n\n#### Objects should be thread safe\nSimbody libraries are supposed to be thread safe and new code should not violate that promise. But, that does not mean you have to write parallelized code that uses multiple threads (although you can if you want and you know how). What it does mean is that your code should not prevent *other* Simbody users from writing multithreaded programs that use Simbody. That is, if each of several simultaneously-executing threads allocates its own, non-shared object of one of your classes, those threads will not interfere with each other. \n\nIn practice, that means you must (a) avoid using global variables, and (b) think carefully about using static variables. Basically this means whatever you write should be wrapped up in a class, and you should use class data members for communication among the methods of your class rather than global variables.\n\nIf you are worried about thread safety, mention it in the relevant Issue or PR; we'll be happy to discuss it with you.\n\n### Naming conventions\nWe do not believe it is helpful to attempt to encode type information into symbol names (for example, beginning pointer names with a `p`). Much of the need for such conventions has passed with the wide availability of IDEs offering language-sensitive code browsing and debugging, such as that provided by Visual Studio or Eclipse. We do not use name prefix characters to provide information that can easily be obtained while browsing code or debugging. We trust programmers to add appropriate conventions in their own code when those conventions are necessary locally for clarity or convenience, and to explain them in nearby comments.\n\nWe prefer consistency with existing precedent over our own conventions whenever appropriate. For example, C++ containers like `std::vector` define standard names like `const_iterator` so if you are building a container intended to be compatible with one of those you should follow the existing precedent rather than use the Simbody convention which would have been `ConstIterator`.\n\n#### Types: classes and structs, typedefs, enums\nType names should be nouns or noun phrases, using the `UpperCamelCase` naming convention. There should be no underscores in the names. Some examples:\n```cpp\nSystem\nSimbodyMatterSubsystem\n```\n\n#### Constants\nWe reserve the ugly `ALL_CAPS_CONVENTION` for preprocessor macros both to discourage their use and to signal the type-unsafe loophole being employed. In particular, we discourage the use of preprocessor macros for constants and use a different, less violent convention for type-safe constants.\n\nFor constants defined within the language, using `enum` or `const`, use `UpperCamelCase` (same convention as for classes).\n```cpp\nenum Color {\n    Red,\n    Blue,\n    LightPink\n};\nstatic const Color AttentionColor = Red;\n```\n\n#### Functions and methods\nNames should begin with a verb and use the `lowerCamelCase` convention.\n\n```cpp\ngetBodyVelocity()\nsetDefaultLength()\n```\n\nWe have some conventional starting verbs and you should use the same ones when they apply, and avoid them if your methods are doing something different:\n\n   verb   | meaning\n----------|---------\n`get`     | Return a const reference to something that has already been computed.\n`set`     | Change the value of some internal quantity; may cause invalidation of dependent computations. \n`upd`     | (update) Return a writable reference to some internal variable. May cause invalidation of dependent computations.\n`find`    | Perform a small calculation (e.g., find the distance between two points) and return the result without changing anything else.\n`calc`    | (calculate) Perform an expensive calculation and return the result. Does not cause any other changes.\n`realize` | Initiate state-dependent computations and cache results internally; no result returned.\n`adopt`   | Take over ownership of a passed-in heap-allocated object.\n\n#### Variables\nUse generally descriptive noun phrases, expressed in `lowerCamelCase` (same as for methods).\nSpell things out unless there is a good reason to abbreviate, and in that case abbreviate consistently.\n```cpp\nfileName\nnextAvailableSlot\n```\nFollow other appropriate conventions in contexts where they improve readability: for example, you may prefer `x,y,z` for coordinates, `A` for a matrix, and `i,j,k` for indices.\n\nWe do not require that you give data members a distinguishing prefix. However, it is often helpful to do so in complicated classes, in which case the prefix should be `m_`, prepended to names that otherwise follow the above convention. Do not use an initial underscore alone.\n```cpp\nm_fileName\nm_nextAvailableSlot\n```\nPlease do not use any other prefix conventions; many exist and none are widely agreed upon so they are not helpful to a mixed audience of readers.\n\n#### Preprocessor macros\nAll caps, words separated by underscores. When these appear in interfaces they must be prefixed with a distinctive prefix to keep them from colliding with other symbols. Use an all-caps version of the associated name space when possible. The names of all macros from Simbody software are prefixed with `SimTK_`.\n\n```cpp\nSimTK_DEBUG\nMYMODULE_UGLY_MACRO\n```\n\n#### Namespaces\nShort, cryptic, low probability of having the same name as someone else’s namespace. We reserve namespaces containing `SimTK` and `Simbody` (in any combination of upper/lowercase) for user-visible Simbody code.\n```cpp\nstd::\nSimTK::\n```\nIn contexts where you can't use C++ namespaces, such as preprocessor macro names and external C functions, use a unique prefix like `SimTK_` or `mymodule_` in place of an actual namespace.\n\n#### Header Guards\nHeader guards are preprocessor defines that surround every header file to prevent it from being included multiple times. Simbody header guards should be written like this:\n\n```cpp\n#ifndef SimTK_MODULE_SOME_CLASS_NAME_H_\n#define SimTK_MODULE_SOME_CLASS_NAME_H_\n   // ... stuff ...\n#endif // SimTK_MODULE_SOME_CLASS_NAME_H_\n```\nThe initial `SimTK_` should always be there; it is serving as a namespace to avoid collisions with other code. If you are using some other namespace, replace `SimTK_` with yours. `MODULE` should be replaced by something defining a major grouping of code within Simbody; its purpose is to avoid collisions with other Simbody modules. Then `SOME_CLASS_NAME` is replaced by an uglified version of the main class defined by this header file. Some headers aren't associated with a class (like `common.h`); you can use the file name or something else descriptive instead. The final `_H_` is just there to keep us out of trouble.\n\n**Note:** Embedded and trailing underscores (`_`) are allowed in C++ names, but the C++ standard forbids user symbols that begin with an underscore or contain two adjacent underscores. (Those are reserved for use by the language system itself, such as for variable names inside the C++ standard header files.) \n\n#### Calendar dates\nThe need for date and time stamps arises frequently enough, and causes enough trouble, that we want to state some general preferences here, although not specific requirements for any particular situation. Maybe this goes without saying, but just go ahead and use four digits for the year! Let’s not go through that again. Compact date stamps such as those appearing in file names and source comments should have the form yyyymmdd, e.g. 20060322 which has the distinct advantage of being sortable, with the most significant part first. Code that formats friendly dates for user consumption should avoid ambiguous formats like 7/5/2005 (July 5 in the U.S. and May 7 in Europe). Instead, use July 5, 2005 or 5 July 2005 or 2005-May-07, for example.\nFor binary time stamps generated programmatically, please give careful thought to time zone independence.\n\n\n### C++ tips and style guide\n\nThis section collects tips for staying out of trouble in C++, and documents some of our stylistic preferences. These are not in any particular order. Please feel free to propose more.\n\n#### Public class members come first\nDon’t make people look at your dirty laundry in order to use your classes. Start with the basic constructors (and copy assignment in C++). Then put important likely-to-be-used methods first, relegating obscure bookkeeping stuff to the end.\n\nAvoid public data members; use inline accessors instead. Even protected data members should be viewed suspiciously, especially if you expect people other than yourself to be deriving classes from yours. Occasionally this seems silly, especially for simple \"plain old data\" (POD) classes as described in the C++ standard. In that case you should at least put your public data members at the beginning of your class declaration so that they appear as part of the public interface rather than buried with the private stuff at the end.\n\n#### Use anonymous namespaces\nIf you define classes or external functions in C++ source, even if they appear nowhere else, those names will be exported at link time and may conflict with other names. If that's intentional, make sure the names are in the `SimTK` namespace or begin with `SimTK_`. If not, you should surround the declaration with an anonymous namespace:\n```cpp\nnamespace {\n    // declarations that are private to this source file\n}\n``` \nThat prevents the symbols from being exported and you can use any names for them that you want.\n\nFor functions you can achieve the same thing by declaring them `static` (which you must do if your code is in C) but anonymous namespaces in C++ are much more powerful.\n\n\n#### Don't waste lines on curly braces\nWe do not like to see a lot of content-free lines using up vertical space in code and consequently prefer the style sometimes called \"the one true brace\" over conventions which attempt to align all paired braces. Here are some examples:\n```cpp\n    if (a <= b) {\n        // some code\n    } else {\n        // some more\n    }\n    int myFunction() {\n        // function body begins here\n    }\n    class MyClass {\n    public:\n        // public members\n    };\n```\nWhen there is only a single statement within a control structure, there is no need for braces and we prefer that they not be used since that saves space. *Indentation* is the primary means for conveying code structure to human readers, so it matters a lot more that the indentation is right than where the braces are.\n\nFor small inline functions whose entire definition can be fit on one line (typical for \"accessors\"), we are happy to see them defined like this:\n```cpp\n    const Thing& getSomething() const {return m_thing;}\n    void setSomething(const Thing& thing) {m_thing=thing;}\n```\nMany programmers think those are immoral; if that's you, feel free to use more lines. But we're glad to get these little methods over with and fully understandable with very little screen real estate.\n\n#### Throw and return are not functions\nIn C++ `throw` and `return` are not functions. It is misleading to enclose their arguments in parentheses. That is, you should write `return x;` not `return(x);`. A parenthesized expression is not treated the same as a function argument list. For example `f(a,b)` and `return(a,b)` mean very different things -- the former is a 2-argument function call; the latter is an invocation of the rarely-used \"comma operator\".\n\n#### *Pre*fer *pre*-increment and *pre*-decrement operators\nOperators for both pre-increment (`++i`) and post-increment (`i++`) are available in C++. If you don’t look at the result, they are logically equivalent. For simple types they are physically equivalent too. But for complicated types (like iterators), the pre-increment operators are much cheaper computationally, because they don’t require separate storage for saving the previous result. Therefore you should get in the habit of using pre-increment (or pre-decrement) in all your loops:\n\n```cpp\nfor (int i; i < limit; ++i) /* <-- YES*/ \nfor (int i; i < limit; i++) /* <-- NO */ \n```\n\nThis will prevent you from using the wrong operator in the expensive cases, which are not always obvious. Of course in cases where you actually need the pre- or post-value for something, you should use the appropriate operator. \n\n#### Place pointer and reference symbols with the type\nReferences and pointers create new types. That is `T`, `T*`, and `T&` are three distinct types. You can tell because you can make `typedef`s like this:\n\n```cpp\ntypedef T  SameAsT; \ntypedef T* PointerToT;\ntypedef T& ReferenceToT;\n \n// and then declare\n \nSameAsT      t1,      t2;      // both are type T\nPointerToT   tptr1,   tptr2;   // both are type T* \nReferenceToT tref1=a, tref2=b; // both are type T&\n```\n\nTherefore you should place the `*` and `&` next to the type, not the variable, because logically they are part of the type. Unfortunately, the C language had a bug in its syntax which has been inherited by C++. A line like `char* a,b;` is treated like `char* a; char b;` rather than `char* a; char* b;`, but if you write `typedef char* CharPtr;` then `CharPtr a,b;` declares both to be pointers. There is no perfect solution because the language is broken. However, there is no problem in argument lists (since each variable has to have its own type). So we recommend that you simply avoid the misleading multiple-declaration form when using pointers or references. Just use separate declarations or a `typedef`. Then always put the `*` and `&` with the type where they belong. Here are right and wrong examples for argument lists:\n\n```cpp\nf(int I, string& name, char* something) /* <-- YES*/ \nf(int I, string &name, char *something) /* <-- NO */ \n```\n\n#### Avoid spaces that don't improve readability\nAdd spaces where they improve clarity, otherwise leave them out. In particular, parentheses do a fine job of surrounding `if` and `for` conditions and do not require further setting off with spaces. On the other hand, operators within those conditions are sometimes hard to spot and worth setting apart. For example, we prefer the more-compact versions below:\n```cpp\n    if (nextItem <= minItemSoFar)    /* <-- YES*/ \n    if ( nextItem <= minItemSoFar )  /* <-- NO */ \n\n    for (int i=0; i < length; ++i)   /* <-- YES*/ \n    for ( int i=0; i < length; ++i ) /* <-- NO */ \n```\nYou only get 80 characters per line; make them count!\n\n#### Make assignment operators safe for self-assignment\nYou should let the compiler automatically generate the copy constructor and copy assignment operator for your classes whenever possible. But sometimes you have to write one. Here is the basic template for copy assignment:\n\n```cpp\nMyClass& operator=(const MyClass& source) {\n    if (&source != this) {\n        // copy stuff from source to this\n    }\n    return *this;\n} \n```\n\nA common mistake is to leave out the `if`. Since the \"copy stuff\" part often begins by deleting the contents of \"this\", a self assignment like a=a will fail without those lines; that is always supposed to work (and does for all the built-in and standard library types). Of course no one intentionally does that kind of assignment, but they occur anyway in general code since you don’t always know where the source comes from.\n\nIf the \"copy stuff\" part consists only of assignments that work for self assignment, then you can get away without the test, but unless you’ve thought it through carefully you should just get in the habit of putting in the test.\n\n\n\nList of Contributors\n--------------------\nThis is an attempt at a complete contributor list; please submit a PR or file an Issue if you or someone else is missing, or to improve your contributions entry.\n\nReal name           | GitHub Id     | Contributions/expertise\n--------------------|---------------|-------------------------\nMichael Sherman     |@sherm1        |Lead developer; multibody dynamics\nPeter Eastman       |@peastman      |Much early Simbody development; visualizer\nChris Dembia        |@chrisdembia   |Build, task space control, CMA optimizer, bug fixes & documentation\nThomas Uchida       |@tkuchida      |Rigid impact theory & code; documentation\nCarmichael Ong      |@carmichaelong |Pathname deconstruction with specified working directory\nThomas Lau          |@thomasklau    |Force Parallelization\nIan Stavness        |@stavness      |Computational geometry\nAndreas Scholz      |@AndreasScholz |Computational geometry\nJosé Rivero         |@j-rivero      |Build, especially for Debian\nSteven Peters       |@scpeters      |Build and VectorIterator improvements\nJohn Hsu            |@hsu           |Bug fixes; iterative solver & contact theory\nNate Koenig         |@nkoenig       |Bug fix\nAyman Habib         |@aymanhab      |Bug fixes; visualization, SWIG improvements\nAjay Seth           |@aseth1        |Mobilizer theory and code\nJack Wang           |@jmwang        |Bug fixes; visualization improvements\nTim Dorn            |@twdorn        |Bug fixes\nApoorva Rajagopal   |@apoorvar      |Xcode build fixes\nKevin Xu            |@kevunix       |Build fix\nAntoine Falisse     |@antoinefalisse|Memory issues for Matrix; smooth contact\nGil Serrancoli      |@gilserrancoli |Smooth contact\nGuillaume Jacquenot |@Gjacquenot    |Build instructions for MinGW\nThomas Beutlich     |@tbeu          |Fix many typos and spelling errors\nJulien Nabet        |@serval2412    |Code style & safety improvements\nElena Ceseracciu    |@elen4         |Improved dependency resolution\nKevin He            |@kingchurch    |Bug fixes\nYuri Victorovich    |@yurivict      |Improved support for FreeBSD\nMartin Gejke        |@mgejke        |Bug fixes\nPaul Mitiguy        |@mitiguy       |Rotation class; dynamics\nMatthew Millard     |@mjhmilla      |Bicubic spline\nJack Middleton      |               |Numerical methods\nChristopher Bruns   |@cmbruns-hhmi  |Molmodel\nRandy Radmer        |               |Molmodel\nCharles Schwieters  |               |Provided initial multibody code\nAbhinandan Jain     |               |Underlying spatial algebra formulation\nIsaac Newton        |               |F=ma, calculus, etc.\nJason Blum          |@jjblum        |Vis bug fix\n\nContributor License Agreement\n-----------------------------\nSimbody is licensed under the very permissive [Apache 2.0 license](http://www.apache.org/licenses/LICENSE-2.0). Simbody users are not required to follow our noble egalitarian principles, nor to share their profits with us, nor even to acknowledge us (though they often do). When you make a contribution in any of the ways described above, you are agreeing to allow your contribution to be used under the same terms, adding no additional restrictions to the Simbody project nor requirements on Simbody users. \n\nSpecifically, by contributing you are agreeing to the following terms:\n\n  1. The code, text, or images you submit are your original work (you own and retain the copyright) or you otherwise have the right to submit the work.\n  2. You grant the Simbody project, developers, and users a nonexclusive, irrevocable license to use your submission and any necessary intellectual property, under terms of the Apache 2.0 license.\n  3. No part of your contribution is covered by a viral (\"copyleft\") license like GPL or LGPL.\n  4. You are capable of granting these rights for the contribution.\n\nIf your contribution contains others' open source code licensed under Apache 2.0 or other non-viral license like BSD, MIT, or ZLib, it is probably fine. But be sure to mention that in the Pull Request you submit so we can discuss it. \n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 10.0322265625,
          "content": "Apache License\nVersion 2.0, January 2004\nhttp://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and\ndistribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright\nowner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities\nthat control, are controlled by, or are under common control with that entity.\nFor the purposes of this definition, \"control\" means (i) the power, direct or\nindirect, to cause the direction or management of such entity, whether by\ncontract or otherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising\npermissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including\nbut not limited to software source code, documentation source, and configuration\nfiles.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or\ntranslation of a Source form, including but not limited to compiled object code,\ngenerated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made\navailable under the License, as indicated by a copyright notice that is included\nin or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that\nis based on (or derived from) the Work and for which the editorial revisions,\nannotations, elaborations, or other modifications represent, as a whole, an\noriginal work of authorship. For the purposes of this License, Derivative Works\nshall not include works that remain separable from, or merely link (or bind by\nname) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version\nof the Work and any modifications or additions to that Work or Derivative Works\nthereof, that is intentionally submitted to Licensor for inclusion in the Work\nby the copyright owner or by an individual or Legal Entity authorized to submit\non behalf of the copyright owner. For the purposes of this definition,\n\"submitted\" means any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems, and\nissue tracking systems that are managed by, or on behalf of, the Licensor for\nthe purpose of discussing and improving the Work, but excluding communication\nthat is conspicuously marked or otherwise designated in writing by the copyright\nowner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf\nof whom a Contribution has been received by Licensor and subsequently\nincorporated within the Work.\n\n2. Grant of Copyright License.\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable copyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the Work and such\nDerivative Works in Source or Object form.\n\n3. Grant of Patent License.\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable (except as stated in this section) patent license to make, have\nmade, use, offer to sell, sell, import, and otherwise transfer the Work, where\nsuch license applies only to those patent claims licensable by such Contributor\nthat are necessarily infringed by their Contribution(s) alone or by combination\nof their Contribution(s) with the Work to which such Contribution(s) was\nsubmitted. If You institute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work or a\nContribution incorporated within the Work constitutes direct or contributory\npatent infringement, then any patent licenses granted to You under this License\nfor that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution.\n\nYou may reproduce and distribute copies of the Work or Derivative Works thereof\nin any medium, with or without modifications, and in Source or Object form,\nprovided that You meet the following conditions:\n\nYou must give any other recipients of the Work or Derivative Works a copy of\nthis License; and\nYou must cause any modified files to carry prominent notices stating that You\nchanged the files; and\nYou must retain, in the Source form of any Derivative Works that You distribute,\nall copyright, patent, trademark, and attribution notices from the Source form\nof the Work, excluding those notices that do not pertain to any part of the\nDerivative Works; and\nIf the Work includes a \"NOTICE\" text file as part of its distribution, then any\nDerivative Works that You distribute must include a readable copy of the\nattribution notices contained within such NOTICE file, excluding those notices\nthat do not pertain to any part of the Derivative Works, in at least one of the\nfollowing places: within a NOTICE text file distributed as part of the\nDerivative Works; within the Source form or documentation, if provided along\nwith the Derivative Works; or, within a display generated by the Derivative\nWorks, if and wherever such third-party notices normally appear. The contents of\nthe NOTICE file are for informational purposes only and do not modify the\nLicense. You may add Your own attribution notices within Derivative Works that\nYou distribute, alongside or as an addendum to the NOTICE text from the Work,\nprovided that such additional attribution notices cannot be construed as\nmodifying the License.\nYou may add Your own copyright statement to Your modifications and may provide\nadditional or different license terms and conditions for use, reproduction, or\ndistribution of Your modifications, or for any such Derivative Works as a whole,\nprovided Your use, reproduction, and distribution of the Work otherwise complies\nwith the conditions stated in this License.\n\n5. Submission of Contributions.\n\nUnless You explicitly state otherwise, any Contribution intentionally submitted\nfor inclusion in the Work by You to the Licensor shall be under the terms and\nconditions of this License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify the terms of\nany separate license agreement you may have executed with Licensor regarding\nsuch Contributions.\n\n6. Trademarks.\n\nThis License does not grant permission to use the trade names, trademarks,\nservice marks, or product names of the Licensor, except as required for\nreasonable and customary use in describing the origin of the Work and\nreproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty.\n\nUnless required by applicable law or agreed to in writing, Licensor provides the\nWork (and each Contributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,\nincluding, without limitation, any warranties or conditions of TITLE,\nNON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are\nsolely responsible for determining the appropriateness of using or\nredistributing the Work and assume any risks associated with Your exercise of\npermissions under this License.\n\n8. Limitation of Liability.\n\nIn no event and under no legal theory, whether in tort (including negligence),\ncontract, or otherwise, unless required by applicable law (such as deliberate\nand grossly negligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special, incidental,\nor consequential damages of any character arising as a result of this License or\nout of the use or inability to use the Work (including but not limited to\ndamages for loss of goodwill, work stoppage, computer failure or malfunction, or\nany and all other commercial damages or losses), even if such Contributor has\nbeen advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability.\n\nWhile redistributing the Work or Derivative Works thereof, You may choose to\noffer, and charge a fee for, acceptance of support, warranty, indemnity, or\nother liability obligations and/or rights consistent with this License. However,\nin accepting such obligations, You may act only on Your own behalf and on Your\nsole responsibility, not on behalf of any other Contributor, and only if You\nagree to indemnify, defend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason of your\naccepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work\n\nTo apply the Apache License to your work, attach the following boilerplate\nnotice, with the fields enclosed by brackets \"[]\" replaced with your own\nidentifying information. (Don't include the brackets!) The text should be\nenclosed in the appropriate comment syntax for the file format. We also\nrecommend that a file or class name and description of purpose be included on\nthe same \"printed page\" as the copyright notice for easier identification within\nthird-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Platform",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 38.5107421875,
          "content": "Simbody [![CI](https://github.com/simbody/simbody/actions/workflows/continuous_integration.yml/badge.svg)](https://github.com/simbody/simbody/actions/workflows/continuous_integration.yml) [![Appveyor][buildstatus_image_appveyor]][appveyorci] [![Codecov][buildstatus_image_codecov]][codecovci]\n=======\n\nSimbody is a high-performance, open-source toolkit for science- and\nengineering-quality simulation of articulated mechanisms, including\nbiomechanical structures such as human and animal skeletons,\nmechanical systems like robots, vehicles, and machines, and anything\nelse that can be described as a set of rigid bodies interconnected\nby joints, influenced by forces and motions, and restricted by\nconstraints. Simbody includes a multibody dynamics library for\nmodeling motion in [generalized/internal coordinates in O(n) time][thy].\nThis is sometimes called a Featherstone-style physics engine.\n\nSimbody provides a C++ API that is used to build domain-specific applications;\nit is not a standalone application itself. For example, it is used by\nbiomechanists in [OpenSim](http://opensim.stanford.edu), by roboticists in\n[Gazebo](http://gazebosim.org), and for biomolecular research in\n[MacroMoleculeBuilder (MMB)](https://simtk.org/home/rnatoolbox). Here's an\nartful simulation of several RNA molecules containing thousands of bodies,\nperformed with MMB by [Samuel Flores][flores]:\n\n[![Sam Flores' Simbody RNA simulation][rna]][simbios]\n\nRead more about Simbody at the [Simbody homepage](https://simtk.org/home/simbody).\n\n\nSimple example: a double pendulum\n---------------------------------\nHere's some code to simulate and visualize a 2-link chain:\n\n```cpp\n#include \"Simbody.h\"\nusing namespace SimTK;\nint main() {\n    // Define the system.\n    MultibodySystem system;\n    SimbodyMatterSubsystem matter(system);\n    GeneralForceSubsystem forces(system);\n    Force::Gravity gravity(forces, matter, -YAxis, 9.8);\n\n    // Describe mass and visualization properties for a generic body.\n    Body::Rigid bodyInfo(MassProperties(1.0, Vec3(0), UnitInertia(1)));\n    bodyInfo.addDecoration(Transform(), DecorativeSphere(0.1));\n\n    // Create the moving (mobilized) bodies of the pendulum.\n    MobilizedBody::Pin pendulum1(matter.Ground(), Transform(Vec3(0)),\n            bodyInfo, Transform(Vec3(0, 1, 0)));\n    MobilizedBody::Pin pendulum2(pendulum1, Transform(Vec3(0)),\n            bodyInfo, Transform(Vec3(0, 1, 0)));\n\n    // Set up visualization.\n    system.setUseUniformBackground(true);\n    Visualizer viz(system);\n    system.addEventReporter(new Visualizer::Reporter(viz, 0.01));\n\n    // Initialize the system and state.\n    State state = system.realizeTopology();\n    pendulum2.setRate(state, 5.0);\n\n    // Simulate for 20 seconds.\n    RungeKuttaMersonIntegrator integ(system);\n    TimeStepper ts(system, integ);\n    ts.initialize(state);\n    ts.stepTo(20.0);\n}\n```\n\n![Double-pendulum simulation in Simbody][doublePendulum]\n\nSee [Simbody's User Guide][user] for a step-by-step explanation of this\nexample.\n\n\nFeatures\n--------\n- Wide variety of joint, constraint, and force types; easily user-extended.\n- Forward, inverse, and mixed dynamics. Motion driven by forces or\n  prescribed motion.\n- Contact (Hertz, Hunt and Crossley models).\n- Gradient descent, interior point, and global (CMA) optimizers.\n- A variety of numerical integrators with error control.\n- Visualizer, using OpenGL\n\n\nYou want to...\n--------------\n* **[install Simbody](#installing)**.\n* [use Simbody in your own program][user].\n* [view API documentation](https://simbody.github.io).\n* [learn the theory behind Simbody](https://github.com/simbody/simbody/raw/master/Simbody/doc/SimbodyTheoryManual.pdf).\n* [extend Simbody](https://github.com/simbody/simbody/raw/master/Simbody/doc/SimbodyAdvancedProgrammingGuide.pdf).\n* [**get support** at the Simbody Forum](https://simtk.org/forums/viewforum.php?f=47).\n* [report a bug or suggest a feature](https://github.com/simbody/simbody/issues/new).\n\n---\n\n\nDependencies\n------------\n\nSimbody depends on the following:\n\n* cross-platform building: [CMake](http://www.cmake.org/cmake/resources/software.html) 3.12 or later.\n* compiler: [Visual Studio](http://www.visualstudio.com) 2015, 2017, or 2019 (Windows only), [gcc](http://gcc.gnu.org/) 4.9.0 or later (typically on Linux), [Clang](http://clang.llvm.org/) 3.4 or later, or Apple Clang (Xcode) 8 or later.\n* linear algebra: [LAPACK](http://www.netlib.org/lapack/) 3.6.0 or later and [BLAS](http://www.netlib.org/blas/)\n* visualization (optional): [FreeGLUT](http://freeglut.sourceforge.net/), [Xi and Xmu](http://www.x.org/wiki/)\n* API documentation (optional): [Doxygen](http://www.stack.nl/~dimitri/doxygen/) 1.8.6 or later; we recommend at least 1.8.8.\n\n\nUsing Simbody\n-------------\n\n* **Creating your own Simbody-using project with CMake** To get started with\n  your own Simbody-using project, check out the\n  [cmake/SampleCMakeLists.txt](cmake/SampleCMakeLists.txt) file.\n\n\nInstalling\n----------\n\nSimbody works on Windows, Mac, and Linux. For each operating system, you can use a package manager or build from source. In this file, we provide instructions for 6 different ways of installing Simbody:\n\n1. [**Windows**](#windows-using-visual-studio): build from source using Microsoft Visual Studio.\n2. [**Linux or Mac (make)**](#linux-or-mac-using-make): build from source using gcc or Clang with make.\n3. [**Mac (Homebrew)**](#mac-and-homebrew): automated build/install with Homebrew.\n4. [**Ubuntu/Debian**](#ubuntu-and-apt-get): install pre-built binaries with apt-get.\n5. [**FreeBSD**](#freebsd): install pre-built binaries with pkg.\n6. [**Windows using MinGW**](#windows-using-mingw): build from source using MinGW.\n7. [**Windows/Mac/Linux**](#windows-mac-and-linux-using-conda): install pre-built binaries with the Conda package manager.\n8. [**Install using vcpkg**](#installing-simbody(vcpkg)): download and install simbody using the vcpkg dependency manager\n\nIf you use Linux, check [Repology](https://repology.org/project/simbody/versions) to see if your distribution provides a package for Simbody.\n\nThese are not the only ways to install Simbody, however. For example, on a Mac, you could use CMake and Xcode.\n\n#### C++11 and gcc/Clang\n\nSimbody 3.6 and later uses C++11 features (the `-std=c++11` flag). Simbody 3.3\nand earlier use only C++03 features, and Simbody 3.4 and 3.5 can use either\nC++03 or C++11; see the `SIMBODY_STANDARD_11` CMake variable in these versions.\nNote that if you want to use the C++11 flag in your own project, Simbody must\nhave been compiled with the C++11 flag as well.\n\n\nWindows using Visual Studio\n---------------------------\n\n#### Get the dependencies\n\nAll needed library dependencies are provided with the Simbody installation on Windows, including linear algebra and visualization dependencies.\n\n1. Download and install [Microsoft Visual Studio](http://www.visualstudio.com), version [2015](https://www.visualstudio.com/vs/older-downloads/), 2017, or 2019. The Community edition is free and sufficient. \n  * 2015: By default, Visual Studio 2015 does not provide C++ support; when installing, be sure to select *Custom*, and check *Programming Languages > Visual C++ > Common Tools for Visual C++ 2015*. If you have already installed Visual Studio without C++ support, simply re-run the installer and select *Modify*.\n  * 2017 and later: In the installer, select the *Desktop development with C++* workload.\n  * Any other C++ code you plan to use with Simbody should be compiled with the\n    same compiler as used for Simbody.\n2. Download and install [CMake](http://www.cmake.org/download), version 3.12 or higher.\n3. (optional) If you want to build API documentation, download and install Doxygen, version 1.8.8 or higher.\n\n#### Download the Simbody source code\n\n* Method 1: Download the source code from https://github.com/simbody/simbody/releases. Look for the highest-numbered release, click on the .zip button, and unzip it on your computer. We'll assume you unzipped the source code into `C:/Simbody-source`.\n* Method 2: Clone the git repository.\n    1. Get git. There are many options:\n\n       * [Git for Windows](http://gitforwindows.org/) (most advanced),\n       * [TortoiseGit](https://tortoisegit.org/download/) (intermediate; good for TortoiseSVN users),\n       * [GitHub Desktop](https://desktop.github.com/) (easiest).\n\n    2. Clone the github repository into `C:/Simbody-source`. Run the following in a Git Bash / Git Shell, or find a way to run the equivalent commands in a GUI client:\n\n            $ git clone https://github.com/simbody/simbody.git C:/Simbody-source\n            $ git checkout Simbody-3.7\n\n    3. In the last line above, we assumed you want to build a released version.\n       Feel free to change the version you want to build.\n       If you want to build the latest development version (\"bleeding edge\") of\n       Simbody off the `master` branch, you can omit the `checkout` line.\n\n       To see the set of releases and checkout a specific version, you can use\n       the following commands:\n\n            $ git tag\n            $ git checkout Simbody-X.Y.Z\n\n#### Configure and generate project files\n\n1. Open CMake.\n2. In the field **Where is the source code**, specify `C:/Simbody-source`.\n3. In the field **Where to build the binaries**, specify something like `C:/Simbody-build`, just not inside your source directory. This is *not* where we will install Simbody; see below.\n4. Click the **Configure** button.\n    1. When prompted to select a *generator*, in the dropdown for *Optional platform for generator*, choose **x64** to build 64-bit binaries or leave blank to build 32-bit binaries. In older versions of CMake, select a generator ending with **Win64** to build 64-bit binaries (e.g., **Visual Studio 14 2015 Win64** or **Visual Studio 15 2017 Win64**), or select one *without* **Win64** to build 32-bit binaries (e.g., **Visual Studio 14 2015** or **Visual Studio 15 2017**).\n    2. Click **Finish**.\n5. Where do you want to install Simbody on your computer? Set this by changing the `CMAKE_INSTALL_PREFIX` variable. We'll assume you set it to `C:/Simbody`. If you choose a different installation location, make sure to use *yours* where we use `C:/Simbody` below.\n6. Play around with the other build options:\n    * `BUILD_EXAMPLES` to see what Simbody can do. On by default.\n    * `BUILD_TESTING` to ensure your Simbody works correctly. On by default.\n    * `BUILD_VISUALIZER` to be able to watch your system move about! If building remotely, you could turn this off. On by default.\n    * `BUILD_DYNAMIC_LIBRARIES` builds the three libraries as dynamic libraries. On by default. Unless you know what you're doing, leave this one on.\n    * `BUILD_STATIC_LIBRARIES` builds the three libraries as static libraries, whose names will end with `_static`. Off by default. You must activate either `BUILD_DYNAMIC_LIBRARIES`, `BUILD_STATIC_LIBRARIES`, or both.\n    * `BUILD_TESTS_AND_EXAMPLES_STATIC` if static libraries, and tests or examples are being built, creates statically-linked tests/examples. Can take a while to build, and it is unlikely you'll use the statically-linked libraries.\n    * `BUILD_TESTS_AND_EXAMPLES_SHARED` if tests or examples are being built, creates dynamically-linked tests/examples. Unless you know what you're doing, leave this one on.\n7. Click the **Configure** button again. Then, click **Generate** to make Visual Studio project files.\n\n#### Build and install\n\n1. Open `C:/Simbody-build/Simbody.sln` in Visual Studio.\n2. Select your desired *Solution configuration* from the drop-down at the top.\n    * **Debug**: debugger symbols; no optimizations (more than 10x slower). Library and visualizer names end with `_d`.\n    * **RelWithDebInfo**: debugger symbols; optimized. This is the configuration we recommend.\n    * **Release**: no debugger symbols; optimized. Generated libraries and executables are smaller but not faster than RelWithDebInfo.\n    * **MinSizeRel**: minimum size; optimized. May be slower than RelWithDebInfo or Release.\n\n    You at least want optimized libraries (all configurations but Debug are optimized), but you\n    can have Debug libraries coexist with them. To do this, go through the full\n    installation process twice, once for each configuration.\n3. Build the project **ALL_BUILD** by right-clicking it and selecting **Build**.\n4. Run the tests by right-clicking **RUN_TESTS** and selecting **Build**. Make sure all tests pass. You can use **RUN_TESTS_PARALLEL** for a faster test run if you have multiple cores.\n5. (Optional) Build the project **doxygen** to get API documentation generated from your Simbody source. You will get some warnings if your doxygen version is earlier than Doxygen 1.8.8; upgrade if you can.\n6. Install Simbody by right-clicking **INSTALL** and selecting **Build**.\n\n#### Play around with examples\n\nWithin your build in Visual Studio (not the installation):\n\n1. Make sure your configuration is set to a release configuration (e.g., RelWithDebInfo).\n2. Right click on one of the targets whose name begins with `Example -` and select **Select as Startup Project**.\n3. Type **Ctrl-F5** to start the program.\n\n#### Set environment variables and test the installation\n\nIf you are only building Simbody to use it with OpenSim, you can skip this section.\n\n1. Allow executables to find Simbody libraries (.dll's) by adding the Simbody `bin/` directory to your `PATH` environment variable.\n    1. In the Start menu (Windows 7 or 10) or screen (Windows 8), search `environment`.\n    2. Select **Edit the system environment variables**.\n    3. Click **Environment Variables...**.\n    4. Under **System variables**, click **Path**, then click **Edit**.\n    5. Add `C:/Simbody/bin;` to the front of the text field. Don't forget the semicolon!\n2. Allow Simbody and other projects (e.g., OpenSim) to find Simbody. In the same Environment Variables window:\n    1. Under **User variables for...**, click **New...**.\n    2. For **Variable name**, type `SIMBODY_HOME`.\n    3. For **Variable value**, type `C:/Simbody`.\n3. Changes only take effect in newly-opened windows. Close any Windows Explorer or Command Prompt windows.\n4. Test your installation by navigating to `C:/Simbody/examples/bin` and running `SimbodyInstallTest.exe` or `SimbodyInstallTestNoViz.exe`.\n\n**Note**: Example binaries are *not* installed for Debug configurations. They are present in the build environment, however, so you can run them from there. They will run *very* slowly!\n\n#### Layout of installation\n\nHow is your Simbody installation organized?\n\n* `bin/` the visualizer and shared libraries (.dll's,  used at runtime).\n* `doc/` a few manuals, as well as API docs (`SimbodyAPI.html`).\n* `examples/`\n    * `src/` the source code for the examples.\n    * `bin/` the examples, compiled into executables; run them! (Not installed for Debug builds.)\n* `include/` the header (.h) files; necessary for projects that use Simbody.\n* `lib/` \"import\" libraries, used during linking.\n* `cmake/` CMake files that are useful for projects that use Simbody.\n\n\nLinux or Mac using make\n-----------------------\n\nThese instructions are for building Simbody from source on either a Mac or on\nUbuntu.\n\n#### Check the compiler version\n\nSimbody uses recent C++ features, that require a modern compiler.\nBefore installing Simbody, check your compiler version with commands like that:\n\n- `g++ --version`\n- `clang++ --version`\n\nIn case your compiler is not supported, you can upgrade your compiler.\n\n##### Upgrading GCC to 4.9 on Ubuntu 14.04\n\nHere are some instructions to upgrade GCC on a Ubuntu 14.04 distribution.\n\n    $ sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n    $ sudo apt-get update\n    $ sudo apt-get install gcc-4.9 g++-4.9\n\nIf one wants to set `gcc-4.9` and `g++-4.9` as the default compilers, run the following command\n\n    $ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 60 --slave /usr/bin/g++ g++ /usr/bin/g++-4.9\n\nRemember that when having several compilers, CMake flags\n`CMAKE_C_COMPILER` and `CMAKE_CXX_COMPILER` can be used\nto select the ones desired. For example, Simbody can be\nconfigured with the following flags:\n\n    $ cmake -DCMAKE_C_COMPILER=gcc-4.9 -DCMAKE_CXX_COMPILER=g++-4.9\n\n#### Get dependencies\n\nOn a Mac, the Xcode developer package gives LAPACK and BLAS to you via the Accelerate\nframework. Mac's come with the visualization dependencies.\n\nOn Ubuntu, we need to get the dependencies ourselves. Open a terminal and run the following commands.\n\n1. Get the necessary dependencies: `$ sudo apt-get install cmake liblapack-dev`.\n2. If you want to use the CMake GUI, install `cmake-qt-gui`.\n3. For visualization (optional): `$ sudo apt-get install freeglut3-dev libxi-dev libxmu-dev`.\n4. For API documentation (optional): `$ sudo apt-get install doxygen`.\n\nLAPACK version 3.6.0 and higher may be required for some applications (OpenSim).\nLAPACK can be downloaded from [http://www.netlib.org/lapack/](http://www.netlib.org/lapack/),\nand compiled using the following method. It is sufficient to set `LD_LIBRARY_PATH` to your LAPACK install prefix\nand build Simbody using the `-DBUILD_USING_OTHER_LAPACK:PATH=/path/to/liblapack.so` option in cmake.\n```{bash}\ncmake ../lapack-3.6.0 -DCMAKE_INSTALL_PREFIX=/path/to/new/lapack/ -DCMAKE_BUILD_TYPE=RELEASE -DBUILD_SHARED_LIBS=ON\nmake\nmake install\n```\n\n#### Get the Simbody source code\n\nThere are two ways to get the source code.\n\n* Method 1: Download the source code from https://github.com/simbody/simbody/releases.\n  Look for the highest-numbered release, click on the .zip button, and unzip it on your computer.\n  We'll assume you unzipped the source code into `~/simbody-source`.\n* Method 2: Clone the git repository.\n    1. Get git.\n        * Mac: You might have it already, especially if you have Xcode, which\n          is free in the App Store. If not, one method is to install\n          [Homebrew](http://brew.sh/) and run `brew install git` in a\n          terminal.\n        * Ubuntu: run `sudo apt-get install git` in a terminal.\n    2. Clone the github repository into `~/simbody-source`.\n\n            $ git clone https://github.com/simbody/simbody.git ~/simbody-source\n            $ git checkout Simbody-3.7\n\n    3. In the last line above, we assumed you want to build a released version.\n       Feel free to change the version you want to build.\n       If you want to build the latest development version (\"bleeding edge\") of\n       Simbody off the `master` branch, you can omit the `checkout` line.\n\n       To see the set of releases and checkout a specific version, you can use\n       the following commands:\n\n            $ git tag\n            $ git checkout Simbody-X.Y.Z\n\n#### Configure and generate Makefiles\n\n1. Create a directory in which we'll build Simbody. We'll assume you choose `~/simbody-build`. Don't choose a location inside `~/simbody-source`.\n\n        $ mkdir ~/simbody-build\n        $ cd ~/simbody-build\n\n2. Configure your Simbody build with CMake. We'll use the `cmake` command but you could also use the interactive tools `ccmake` or `cmake-gui`. You have a few configuration options to play with here.\n\n    * If you don't want to fuss with any options, run:\n\n            $ cmake ~/simbody-source\n\n    * Where do you want to install Simbody? By default, it is installed to `/usr/local/`. That's a great default option, especially if you think you'll only use one version of Simbody at a time. You can change this via the `CMAKE_INSTALL_PREFIX` variable. Let's choose `~/simbody`:\n\n            $ cmake ~/simbody-source -DCMAKE_INSTALL_PREFIX=~/simbody\n\n    * Do you want the libraries to be optimized for speed, or to contain debugger symbols? You can change this via the `CMAKE_BUILD_TYPE` variable. There are 4 options:\n        - **Debug**: debugger symbols; no optimizations (more than 10x slower). Library and visualizer names end with `_d`.\n        - **RelWithDebInfo**: debugger symbols; optimized. This is the configuration we recommend.\n        - **Release**: no debugger symbols; optimized. Generated libraries and executables are smaller but not faster than RelWithDebInfo.\n        - **MinSizeRel**: minimum size; optimized. May be slower than RelWithDebInfo or Release.\n\n        You at least want optimized libraries (all configurations but Debug are optimized),\n        but you can have Debug libraries coexist with them. To do this, go through\n        the full installation process twice, once for each configuration. It is\n        typical to use a different build directory for each build type (e.g.,\n        `~/simbody-build-debug` and `~/simbody-build-release`).\n\n    * There are a few other variables you might want to play with:\n        * `BUILD_EXAMPLES` to see what Simbody can do. On by default.\n        * `BUILD_TESTING` to ensure your Simbody works\n          correctly. On by default.\n        * `BUILD_VISUALIZER` to be able to watch your system\n          move about! If building on a cluster, you could turn this off. On by\n          default.\n        * `BUILD_DYNAMIC_LIBRARIES` builds the three libraries as dynamic libraries. On by default.\n        * `BUILD_STATIC_LIBRARIES` builds the three libraries as static libraries, whose names will end with `_static`.\n        * `BUILD_TESTS_AND_EXAMPLES_STATIC` if tests or examples are being built, creates statically-linked tests/examples. Can take a while to build, and it is unlikely you'll use the statically-linked libraries.\n        * `BUILD_TESTS_AND_EXAMPLES_SHARED` if tests or examples are being built, creates dynamically-linked tests/examples. Unless you know what you're doing, leave this one on.\n\n        You can combine all these options. Here's another example:\n\n            $ cmake ~/simbody-source -DCMAKE_INSTALL_PREFIX=~/simbody -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_VISUALIZER=off\n\n#### Build and install\n\n1. Build the API documentation. This is optional, and you can only do this if\n   you have Doxygen. You will get warnings if your doxygen installation is a version older than Doxygen 1.8.8.\n\n        $ make doxygen\n\n2. Compile. Use the `-jn` flag to build using `n` processor cores. For example:\n\n        $ make -j8\n\n3. Run the tests.\n\n        $ ctest -j8\n\n4. Install. If you chose `CMAKE_INSTALL_PREFIX` to be a location which requires sudo access to write to (like `/usr/local/`, prepend this command with a `sudo `.\n\n        $ make -j8 install\n\nJust so you know, you can also uninstall (delete all files that CMake placed into `CMAKE_INSTALL_PREFIX`) if you're in `~/simbody-build`.\n\n    $ make uninstall\n\n\n#### Play around with examples\n\nFrom your build directory, you can run Simbody's example programs. For instance, try:\n\n        $ ./ExamplePendulum\n\n\n#### Set environment variables and test the installation\n\nIf you are only building Simbody to use it with OpenSim, you can skip this section.\n\n1. Allow executables to find Simbody libraries (.dylib's or so's) by adding the\n   Simbody lib directory to your linker path. On Mac, most users can skip\n   this step.\n    * If your `CMAKE_INSTALL_PREFIX` is `/usr/local/`, run:\n\n            $ sudo ldconfig\n\n    * If your `CMAKE_INSTALL_PREFIX` is neither `/usr/` nor `/usr/local/` (e.g., `~/simbody`'):\n        * Mac:\n\n                $ echo 'export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:~/simbody/lib' >> ~/.bash_profile\n        * Ubuntu:\n\n                $ echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/simbody/lib/x86_64-linux-gnu' >> ~/.bashrc\n        These commands add a line to a configuration file that is loaded every\n        time you open a new terminal. If using Ubuntu, you may need to replace\n        `x86_64-linux-gnu` with the appropriate directory on your computer.\n2. Allow Simbody and other projects (e.g., OpenSim) to find Simbody. Make sure to replace `~/simbody` with your `CMAKE_INSTALL_PREFIX`.\n    * Mac:\n\n            $ echo 'export SIMBODY_HOME=~/simbody' >> ~/.bash_profile\n    * Ubuntu:\n\n            $ echo 'export SIMBODY_HOME=~/simbody' >> ~/.bashrc\n3. Open a new terminal.\n4. Test your installation:\n\n        $ cd ~/simbody/share/doc/simbody/examples/bin\n        $ ./SimbodyInstallTest # or ./SimbodyInstallTestNoViz\n\n#### Layout of installation\n\nThe installation creates the following directories in `CMAKE_INSTALL_PREFIX`. The directory `[x86_64-linux-gnu]` only exists if you did NOT install to `/usr/local/` and varies by platform. Even in that case, the name of your directory may be different.\n\n* `include/simbody/` the header (.h) files; necessary for projects that use Simbody.\n* `lib/[x86_64-linux-gnu]/` shared libraries (.dylib's or .so's).\n    * `cmake/simbody/` CMake files that are useful for projects that use Simbody.\n    * `pkgconfig/` pkg-config files useful for projects that use Simbody.\n    * `simbody/examples/` the examples, compiled into executables; run them! (Not installed for Debug builds.)\n* `libexec/simbody/` the `simbody-visualizer` executable.\n* `share/doc/simbody/` a few manuals, as well as API docs (`SimbodyAPI.html`).\n    * `examples/src` source code for the examples.\n    * `examples/bin` symbolic link to the runnable examples.\n\n\nMac and Homebrew\n----------------\n\nIf using a Mac and Homebrew, the dependencies are taken care of for you.\n\n#### Install\n\n1. Install [Homebrew](http://brew.sh/).\n2. Open a terminal.\n3. Add the Open Source Robotics Foundation's list of repositories to Homebrew:\n    ```\n    $ brew tap osrf/simulation\n    ```\n\n2. Install the latest release of Simbody.\n    ```\n    $ brew install simbody\n    ```\n    To install from the master branch instead, append ` --HEAD` to the command above.\n\n#### Where is Simbody installed?\n\nSimbody is now installed to `/usr/local/Cellar/simbody/<version>/`,\nwhere `<version>` is either the version number (e.g., `3.6.1`),\nor `HEAD` if you specified `--HEAD` above.\n\nSome directories are symlinked (symbolically linked) to `/usr/local/`, which is where your system typically expects to find executables, shared libraries (.dylib's), headers (.h's), etc. The following directories from the Simbody installation are symlinked:\n\n* `include/simbody   -> /usr/local/include/simbody`\n* `lib               -> /usr/local/lib`\n* `share/doc/simbody -> /usr/local/share/doc/simbody`\n\n#### Layout of installation\n\nWhat's in the `/usr/local/Cellar/simbody/<version>/` directory?\n\n* `include/simbody/` the header (.h) files; necessary for projects that use Simbody.\n* `lib/` shared libraries (.dylib's), used at runtime.\n    * `cmake/simbody/` CMake files that are useful for projects that use Simbody.\n    * `pkgconfig/` pkg-config files useful for projects that use Simbody.\n    * `simbody/examples/` the examples, compiled into executables; run them! (Not installed for Debug builds.)\n* `libexec/simbody/` the `simbody-visualizer` executable.\n* `share/doc/simbody/` a few manuals, as well as API docs (`SimbodyAPI.html`).\n    * `examples/src` source code for the examples.\n    * `examples/bin` symbolic link to executable examples.\n\nUbuntu and apt-get\n------------------\n\nStarting with Ubuntu 15.04, Simbody is available in the Ubuntu (and Debian) repositories. You can see a list of all simbody packages for all Ubuntu versions at the [Ubuntu Packages website](http://packages.ubuntu.com/search?keywords=simbody&searchon=names&suite=all&section=all). The latest version of Simbody is usually not available in the Ubuntu repositories; the process for getting a new version of Simbody into the Ubuntu repositories could take up to a year.\n\n#### Install\n\n1. Open a terminal and run the following command:\n\n        $ sudo apt-get install libsimbody-dev simbody-doc\n\n#### Layout of installation\n\nSimbody is installed into the `usr/` directory.  The directory\n`[x86_64-linux-gnu]` varies by platform.\n\n* `usr/include/simbody/` the header (.h) files; necessary for projects that use Simbody.\n* `usr/lib/[x86_64-linux-gnu]` shared libraries (.so's).\n    * `cmake/simbody/` CMake files that are useful for projects that use Simbody.\n    * `pkgconfig/` pkg-config files useful for projects that use Simbody.\n* `usr/libexec/simbody/` the `simbody-visualizer` executable.\n* `usr/share/doc/simbody/` a few manuals, as well as API docs (`SimbodyAPI.html`).\n    * `examples/src` source code for the examples.\n    * `examples/bin` symbolic link to executable examples.\n\nFreeBSD and pkg\n---------------\n\nSimbody is available via the FreeBSD package repository.\n\n#### Install\n\n1. Open a terminal and run the following command:\n\n        $ sudo pkg install simbody\n\nWindows using MinGW\n-------------------\n\nWarning: The [MinGW](http://sourceforge.net/projects/mingw-w64/)\ngeneration and build is experimental!\n\nThis build is still experimental, because of :\n\n* the various MinGW versions available (Thread model, exception mechanism)\n* the compiled libraries Simbody depends on (Blas, Lapack and optionnaly glut).\n\nBelow are three sections that gives a list of supported versions, command line\ninstructions, and reasons why is it not so obvious to use MinGW.\n\n#### Supported MinGW versions\n\nIf you do not want to go into details, you need a MinGW version with :\n\n* a Posix thread model and Dwarf exception mechanism on a 32 bit computer\n* a Posix thread model and SJLJ exception mechanism on a 64 bit computer\n\nOther versions are supported with additional configurations.\n\nThe table below lists the various versions of MinGW versions tested:\n\n|   | OS      | Thread | Exception | Comment                                                             | URL                                           |\n| - | ------- | ------ | --------- | ------------------------------------------------------------------- | --------------------------------------------- |\n| 1 | 64 Bits | Posix  | SJLJ      | All features supported, all binary included (Recommended version)   | [MinGW64 GCC 5.2.0][mingw_520_64_posix_sjlj]  |\n| 2 | 64 Bits | Posix  | SEH       | Needs to be linked against user's Blas and Lapack                   | [MinGW64 GCC 5.2.0][mingw_520_64_posix_seh]   |\n| 3 | 32 Bits | Posix  | Dwarf     | No visualization, all binary included                               | [MinGW64 GCC 5.2.0][mingw_520_32_posix_dwarf] |\n| 4 | 32 Bits | Posix  | SJLJ      | No visualization, needs to be linked against user's Blas and Lapack | [MinGW64 GCC 5.2.0][mingw_520_32_posix_sjlj]  |\n\nWe recommend to use the first configuration where all features are supported and\ndoes not need additional libraries to compile and run.\nThe URL allows to download directly this version.\nThe second version needs to be linked against user's Blas and Lapack\n(A CLI example is given below).\nBlas and Lapack sources can be downloaded from\n[netlib](http://www.netlib.org/lapack/lapack-3.5.0.tgz).\nFor the 3rd and 4th versions that run that target a 32 bit behaviour,\nvisualization is not possible for the time being.\n(It is due to a compile and link problem with `glut`).\nMoreover for the 4th one, one needs to provide Blas and Lapack libraries.\n\nPlease note that only Posix version of MinGW are supported.\n\nIf your version is not supported, CMake will detect it while configuring and stops.\n\n#### Instructions\n\nBelow are some examples of command line instructions for various cases.\nIt is assumed you are running commands from a build directory, that can access Simbody source with a command `cd ..\\simbody`.\n\nIt is recommended to specify with the installation directory with flag `CMAKE_INSTALL_PREFIX`\n(e.g. `-DCMAKE_INSTALL_PREFIX=\"C:\\Program Files\\Simbody\"`).\nIf not used, the installation directory will be `C:\\Program Files (x86)\\Simbody`\non a 64 bit computer. This might be confusing since it is the 32 bit installation location.\n\nExample of instructions where one uses Blas and Lapack libraries provided (to be used in a Windows terminal, where MinGW is in the PATH):\n\n    rem CMake configuration\n    cmake ..\\simbody -G \"MinGW Makefiles\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=\"C:\\Program Files\\Simbody\"\n    rem Compilation\n    mingw32-make\n    rem Test\n    mingw32-make test\n    rem Installation\n    mingw32-make install\n\nExample of instructions where one uses Blas and Lapack libraries provided (to be used in a Windows terminal, where MinGW is NOT in the PATH):\n\n    rem Variable and path definition\n    set CMAKE=\"C:\\Program Files\\CMake\\bin\\cmake.exe\"\n    set MinGWDir=C:\\Program Files\\mingw-w64\\i686-5.2.0-posix-sjlj-rt_v4-rev0\\mingw32\n    set PATH=%MinGWDir%\\bin;%MinGWDir%\\i686-w64-mingw32\\lib\n    rem CMake configuration\n    %CMAKE% ..\\simbody -G\"MinGW Makefiles\" -DCMAKE_BUILD_TYPE=Release ^\n     -DCMAKE_INSTALL_PREFIX=\"C:\\Program Files\\Simbody\" ^\n     -DCMAKE_C_COMPILER:PATH=\"%MinGWDir%\\bin\\gcc.exe\" ^\n     -DCMAKE_CXX_COMPILER:PATH=\"%MinGWDir%\\bin\\g++.exe\" ^\n     -DCMAKE_MAKE_PROGRAM:PATH=\"%MinGWDir%\\bin\\mingw32-make.exe\"\n    rem Compilation\n    mingw32-make\n    rem Test\n    mingw32-make test\n    rem Installation\n    mingw32-make install\n\nExample of instructions where one uses Blas and Lapack libraries provided (to be used in a MSYS terminal with MinGW in the PATH):\n\n    # CMake configuration\n    cmake ../simbody -G \"MSYS Makefiles\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=\"C:\\Program Files\\Simbody\"\n    # Compilation\n    make\n    # Test\n    make test\n    # Installation\n    make install\n\nExample of instructions where one provides our own Blas and Lapack libraries (to be used in a MSYS terminal with MinGW in the PATH):\n\n    # CMake configuration\n    cmake ../simbody -G\"MSYS Makefiles\" -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=\"C:\\Program Files\\Simbody\" \\\n    -DCMAKE_C_COMPILER:PATH=\"C:\\Program Files\\mingw-w64\\i686-5.2.0-posix-sjlj-rt_v4-rev0\\mingw32\\bin\\gcc.exe\" \\\n    -DCMAKE_CXX_COMPILER:PATH=\"C:\\Program Files\\mingw-w64\\i686-5.2.0-posix-sjlj-rt_v4-rev0\\mingw32\\bin\\g++.exe\" \\\n    -DBUILD_USING_OTHER_LAPACK:PATH=\"C:\\Program Files\\lapack-3.5.0\\bin\\liblapack.dll;C:\\Program Files\\lapack-3.5.0\\bin\\libblas.dll\"\n    make\n    # Test\n    make test\n    # Installation\n    make install\n\n\n#### MinGW details\n\nThis paragraph explains the reason why one can not use any MinGW version.\n\nMinGW is available with two thread models :\n\n* Win32 thread model\n* Posix thread model\n\nOne has to use the Posix thread model, since all thread functionalities (e.g. `std:mutex`) are not implemented.\n\nTo ease building on Windows, Simbody provides compiled libraries for Blas and Lapack :\n\n* On Windows 32 Bits, these were compiled with a Dwarf exception mechanism,\n* On Windows 64 Bits, these were compiled with a SJLJ exception mechanism.\n\nIf one chooses a MinGW compilation, we need to respect this exception mechanism.\nA program can not rely on both mechanisms.\nThis means that if we want to use the compiled libraries, our MinGW installation should\nhave the same exception mechanism.\nOtherwise, we need to provide our own Blas and Lapack libraries.\n\nTo see which exception mechanism is used, user can look at dlls located in the `bin` directory of MinGW.\nThe name of mechanism is present in the file `libgcc_XXXX.dll`, where `XXXX` can be `dw`, `seh` or `sjlj`.\nFor some MinGW versions, this information is also available by looking at the result of `gcc --version`.\n\nCMake will check the version of your MinGW, and if the exception mechanism is different,\nthen the configuration stops because of this difference.\nIf one provides Blas and Lapack libraries with the CMake variable `BUILD_USING_OTHER_LAPACK`,\ncompilation with MinGW is always possible.\n\nWindows, Mac, and Linux Using Conda\n-----------------------------------\n\n[Conda](http://conda.pydata.org) is a cross platform package manager that can\nbe used to install Simbody on Windows, Mac, or Linux. To install Simbody using\nConda you must first install\n[Miniconda](http://conda.pydata.org/miniconda.html) or\n[Anaconda](https://www.continuum.io/downloads). Either of these will provide\nthe `conda` command which can be invoked at the command line to install Simbody\nfrom the [Conda Forge](https://conda-forge.github.io/) channel as follows:\n\n```\n$ conda install -c conda-forge simbody\n```\n\nThis command will install Simbody (both the libraries and headers) into\nthe Miniconda or Anaconda installation directory as per the standard layout for\neach of the operating systems described above. The Conda Forge Simbody recipe\ncan be found in Conda Forge's [feedstock\nrepository](https://github.com/conda-forge/simbody-feedstock).\n\nInstalling simbody(vcpkg)\n-------------------------\n\nYou can download and install simbody using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    ./vcpkg install simbody\n\nThe simbody port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\nAcknowledgments\n---------------\nWe are grateful for past and continuing support for Simbody's development in Stanford's Bioengineering department through the following grants:\n\n- NIH U54 GM072970 (Simulation of Biological Structures)\n- NIH U54 EB020405 (Mobilize Center)\n- NIH R24 HD065690 (Simulation in Rehabilitation Research)\n- OSRF subcontract 12-006 to DARPA HR0011-12-C-0111 (Robotics Challenge)\n\nProf. Scott Delp is the Principal Investigator on these grants and Simbody is used extensively in Scott's [Neuromuscular Biomechanics Lab](https://nmbl.stanford.edu) as the basis for the [OpenSim](http://opensim.stanford.edu) biomechanical simulation software application for medical research.\n\n\n\n[buildstatus_image_travis]: https://travis-ci.org/simbody/simbody.svg?branch=master\n[travisci]: https://travis-ci.org/simbody/simbody\n[buildstatus_image_appveyor]: https://ci.appveyor.com/api/projects/status/2dua0qna2m85fts2/branch/master?svg=true\n[appveyorci]: https://ci.appveyor.com/project/opensim-org/simbody/branch/master\n[buildstatus_image_codecov]: https://codecov.io/gh/simbody/simbody/branch/master/graph/badge.svg\n[codecovci]: https://codecov.io/gh/simbody/simbody\n[user]: https://github.com/simbody/simbody/raw/master/Simbody/doc/SimbodyAndMolmodelUserGuide.pdf\n[rna]: doc/images/simbios_11000_body_RNA.gif\n[simbios]: http://simbios.stanford.edu/\n[doublePendulum]: doc/images/doublePendulum.gif\n[thy]: https://github.com/simbody/simbody/raw/master/Simbody/doc/SimbodyTheoryManual.pdf\n[flores]: http://xray.bmc.uu.se/flores/Home.html\n[buildwin]: https://github.com/simbody/simbody/raw/master/doc/HowToBuildSimbodyFromSource_Windows.pdf\n[buildunix]: https://github.com/simbody/simbody/raw/master/doc/HowToBuildSimbodyFromSource_MacLinux.pdf\n[mingw_520_64_posix_sjlj]: http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/5.2.0/threads-posix/sjlj/x86_64-5.2.0-release-posix-sjlj-rt_v4-rev0.7z/download\n[mingw_520_64_posix_seh]: http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/5.2.0/threads-posix/seh/x86_64-5.2.0-release-posix-seh-rt_v4-rev0.7z/download\n[mingw_520_32_posix_dwarf]: http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/5.2.0/threads-posix/dwarf/i686-5.2.0-release-posix-dwarf-rt_v4-rev0.7z/download\n[mingw_520_32_posix_sjlj]: http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/5.2.0/threads-posix/sjlj/i686-5.2.0-release-posix-sjlj-rt_v4-rev0.7z/download\n"
        },
        {
          "name": "SimTKcommon",
          "type": "tree",
          "content": null
        },
        {
          "name": "SimTKmath",
          "type": "tree",
          "content": null
        },
        {
          "name": "Simbody",
          "type": "tree",
          "content": null
        },
        {
          "name": "SimbodyMainpage.h",
          "type": "blob",
          "size": 11.04296875,
          "content": "#ifndef SimTK_SIMBODY_DOXYGEN_MAINPAGE_H_\n#define SimTK_SIMBODY_DOXYGEN_MAINPAGE_H_\n\n\n/** @file\nThis \"header\" file is actually just the source for Simbody's Doxygen\nMainpage, the first page that a user sees when entering the Doxygen-\ngenerated API documentation. This is not actually included as part of the\nSimbody source and it is not installed with Simbody. **/\n\n\n// This is so Doxygen can locate the symbols we mention.\nnamespace SimTK {\n\n/** @mainpage  Simbody&tm; API Reference Documentation\n\n<h2>What is Simbody?</h2>\nSimbody is a high-performance, industrial-grade open source C++ library\nproviding sophisticated treatment of articulated multibody systems with special\nattention to the needs of biomedical simulation. It is useful for predictive\ndynamic simulations of diverse biological systems such as neuromuscular\nbiomechanical models (<a href=http://opensim.stanford.edu>OpenSim</a>) \nand coarse-grained biomolecular modeling \n(<a href=https://simtk.org/home/rnatoolbox>MacroModelBuilder</a>). \nIt is also well\nsuited to related simulation domains such as robot simulation and control\n(<a href=http://gazebosim.org>Gazebo</a>), and \"soft\" real time applications \nlike interactive scientific simulation, virtual worlds, and games.\n\n@image html isaac.png \"Our hero, Sir Isaac Newton\"\n\nSimbody uses an internal coordinate, recursive formulation of the equations of\nmotion, providing computation of system dynamics to machine precision with\nO(n) computational complexity for n joint degrees of freedom (similar to a \nFeatherstone formulation). Arbitrary adjoined\nconstraints, contact modeling, and advanced numerical methods provide fast,\nrobust simulation for any mechanical or biomechanical system from machines and\nvehicles to human skeletons and macromolecules.\n\nSimbody is part of the %SimTK biosimulation toolkit originating from Simbios,\nthe NIH National Center for Physics-Based Simulation of Biological Structures\nat Stanford, initially funded under the NIH Roadmap for Medical Research, grant\nU54 GM072970. Related tools include\n- OpenSim (http://opensim.stanford.edu and https://simtk.org/home/opensim),\na freely available software system for building, exchanging, and analyzing\nmusuloskeletal models and dynamic simulations of movement. Includes both a\ngraphical user interface and an API; automatically constructs Simbody\nmodels from high-level description.\n- OpenMM (https://simtk.org/home/openmm), a GPU-accelerated high-performance\nnumerical library for efficient calculation of molecular force fields.\n\nSimbody is hosted on the <a href=https://simtk.org>SimTK.org</a> biosimulation \ncommunity site, at https://simtk.org/home/simbody and is a community resource \navailable for unrestricted academic, commercial, government, and personal use. \nThe source code is maintained on <a href=https://github.com>GitHub</a>, \nat https://github.com/simbody.\n\nSimbody was conceived and initially implemented by Michael Sherman (Sherm),\nwith substantial contributions from Peter Eastman, both of the Simbios Center\nat Stanford. Many others have contributed to the software, support, and\ndocumentation and we invite community contributions; please \nsee \n<a href=https://github.com/simbody/simbody/blob/master/CONTRIBUTING.md>CONTRIBUTING.md</a>\n(also available in the \\c doc subdirectory of your Simbody installation).\n\n<h2>Getting started with Simbody</h2>\nYou are looking at the main page for the reference documentation of the Simbody\nAPI. This documentation was generated by Doxygen directly from the Simbody\nsource code as annotated by the original programmers so it is both accurate and\ncomprehensive. As you will quickly realize if you look around, this is a large\nsystem providing a great deal of functionality. It is, however, very easy to\nuse if you know where to begin -- and this reference documentation is most\ndefinitely \\e not the place to start if you want to learn how to use\nSimbody. Instead, start with\n<a href=https://github.com/simbody/simbody/blob/master/README.md>README.md</a>\nand the tutorials in the Simbody User's Guide (in the \\c doc subdirectory of \nyour Simbody installation). There is also a collection of working example \nprograms that come with the Simbody installation (in the \n<tt>Simbody/examples</tt> directory on Windows or \n<tt>share/doc/simbody/examples</tt> on Linux or OSX). Both source\nand ready-to-execute binaries of the examples are installed. If you have\nspecific questions, or success stories to share, use the  \n<a href=https://simtk.org/forums/viewforum.php?f=47>Simbody Forum</a>\non SimTK.org.\nYou can file bug reports and make feature requests using the\n<a href=https://github.com/simbody/simbody/issues>Simbody Issue Tracker</a>\non GitHub.\n\n<h2>How to use this documentation</h2>\nIf you know the name of the class, method, or other symbol for which you want\ninformation, you can enter it into the search box above and click directly to\nthe documentation for that symbol. You can also enter words or partial symbols\nand get a list of names that include your search key. Unfortunately Doxygen\ndoes not currently provide a full-text search capability. Another approach is\nto select the Classes tab to get an alphabetical listing of all the class\nnames, and there is a tab below that providing a class hierarchy view. Here is\nan abbreviated list of important classes, all in the SimTK:: namespace:\n- MobilizedBody: combination of a Body and the inboard joint\nconnecting it to the multibody tree, which we call a \"mobilizer\". Base class\nfor specific mobilizer types of which there are many predefined; extensible.\n- Force: base class for a selection of built-in force types; easily\nextensible to model your own force elements.\n- Constraint: base class for a selection of built-in constraint types;\nextensible.\n- Motion: prescribed motions permitting mixed forward/inverse dynamics;\nmore efficient than the equivalent %Constraint. Built-ins plus\nextendability.\n- Measure_: general state-dependent computational block.\n- System, Subsystem, State: basic infrastructure objects.\n- MultibodySystem, SimbodyMatterSubsystem, GeneralForceSubsystem,\nContactTrackerSubsystem, CompliantContactSubsystem: commonly used\ncomponents.\n- Integrator, TimeStepper, Assembler, Optimizer: solvers.\n- Many utility classes (see tutorials, example programs, Doxygen Modules tab),\nincluding Rotation_, Transform_, Quaternion_,\nVector_, Vec, @ref SimTK::SpatialVec \"SpatialVec\", Xml, and many more.\n- Matrix and vector classes and capabilities are discussed in the module \n@ref MatVecUtilities \"Matrix and Vector Utilities\".\n\nFor an overview of Simbody, read this paper:\n<a href=\"https://simtk.org/docman/view.php/47/1589/Sherman-2011-SethDelp-Simbody-ProcediaIUTAM-v2-p241.pdf\">\nMichael A. Sherman, Ajay Seth, Scott L. Delp, \"Simbody: multibody\ndynamics for biomedical research,\" <i>Procedia IUTAM</i> 2:241-261 (2011)</a>\n\n<h2>License</h2>\nWe encourage the broadest possible use of Simbody for any purpose by using\nthe extremely permissive Apache 2.0 License. We would appreciate some\nacknowledgement if our work has been helpful in yours, but our license does not\nrequire that. For more information see our\n\\ref simbody_license_page \"license page\". **/\n\n} // namespace SimTK\n\n/** @page simbody_license_page  Simbody&tm; Copyright and License\n<h2>Copyright and license</h2>\nThis license, based on the maximally-permissive Apache 2.0 License, defines the \nterms under which we offer Simbody.\n@verbatim\n * -------------------------------------------------------------------------- *\n *                                 Simbody(tm)                                *\n * -------------------------------------------------------------------------- *\n * This is part of the SimTK biosimulation toolkit originating from           *\n * Simbios, the NIH National Center for Physics-Based Simulation of           *\n * Biological Structures at Stanford, funded under the NIH Roadmap for        *\n * Medical Research, grant U54 GM072970. See https://simtk.org/home/simbody.  *\n *                                                                            *\n * Please cite:                                                               *\n *   Michael A. Sherman, Ajay Seth, Scott L. Delp, Simbody: multibody         *\n *   dynamics for biomedical research, Procedia IUTAM 2:241-261 (2011)        *\n *   http://dx.doi.org/10.1016/j.piutam.2011.04.023                           *\n *                                                                            *\n * Portions copyright (c) 2005-14 Stanford University and the Authors.        *\n *                                                                            *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may    *\n * not use this file except in compliance with the License. You may obtain a  *\n * copy of the License at http://www.apache.org/licenses/LICENSE-2.0.         *\n *                                                                            *\n * Unless required by applicable law or agreed to in writing, software        *\n * distributed under the License is distributed on an \"AS IS\" BASIS,          *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\n * See the License for the specific language governing permissions and        *\n * limitations under the License.                                             *\n * -------------------------------------------------------------------------- *\n@endverbatim\n\n<h2>What's with that \"TM\" in Simbody&tm;?</h2>\nThat symbol does not mean anything commercial. It is just to let you know that \nwe claim a trademark on the name \"Simbody\"\nso you may not use that name except to refer to our software as we distribute\nit. The license permits you to make any kind of derivative work, or to use\nall or part of Simbody code in any way you like, but you can't call the\nresulting work \"Simbody\" without our agreement. We make that restriction \nbecause we don't want any confusion to exist about what is, and what is not, \nthe Simbody project that we support and carefully maintain. But ... if you want \nto make improvements to Simbody we would love to have your open source\ncontributions to put into the main Simbody source tree, in which case they \n\\e would be included under the Simbody name. See \n<a href=https://github.com/simbody/simbody/blob/master/CONTRIBUTING.md>CONTRIBUTING.md</a>\nfor information about how to contribute.\n\n<h2>How to acknowledge us</h2>\nOur license does not \\e require that you acknowledge us, but we and our \nsponsors would be grateful if you did anyway! If our hard work has helped you\nwith yours, please throw us a bone and mention on your \"About\" page and in\nyour documentation that you are using Simbody from \nhttps://simtk.org/home/simbody. Where appropriate, please cite this paper:\n\n\\par\nMichael A. Sherman, Ajay Seth, Scott L. Delp, Simbody: multibody\ndynamics for biomedical research, <i>Procedia IUTAM</i> 2:241-261 (2011)\nhttp://dx.doi.org/10.1016/j.piutam.2011.04.023\n\nWe would be particularly grateful if you mention that Simbody is primarily\nfunded by NIH Roadmap grant U54 GM072970. We appreciate that support very\nmuch, and the NIH appreciates knowing that its funds are having an impact,\nparticularly on medical research and human health.\n**/\n\n#endif // SimTK_SIMBODY_DOXYGEN_MAINPAGE_H_\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}