{
  "metadata": {
    "timestamp": 1736565377778,
    "page": 212,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dpilger26/NumCpp",
      "stars": 3632,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 4.3251953125,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  NumCpp\nAccessModifierOffset: -4\nAlignAfterOpenBracket: Align\nAlignArrayOfStructures: None\nAlignConsecutiveMacros: true\nAlignConsecutiveAssignments: true\nAlignConsecutiveBitFields: None\nAlignConsecutiveDeclarations: true\nAlignEscapedNewlines: Left\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllArgumentsOnNextLine: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortEnumsOnASingleLine: true\nAllowShortBlocksOnASingleLine: Empty\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortLambdasOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: false\nBinPackParameters: false\nBraceWrapping:\n  AfterCaseLabel:  true\n  AfterClass:      true\n  AfterControlStatement: Always\n  AfterEnum:       true\n  AfterFunction:   true\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     true\n  AfterUnion:      true\n  AfterExternBlock: true\n  BeforeCatch:     true\n  BeforeElse:      true\n  BeforeLambdaBody: false\n  BeforeWhile:     true\n  IndentBraces:    false\n  SplitEmptyFunction: false\n  SplitEmptyRecord: false\n  SplitEmptyNamespace: false\nBreakBeforeBinaryOperators: None\nBreakBeforeConceptDeclarations: true\nBreakBeforeBraces: Allman\nBreakBeforeInheritanceComma: false\nBreakInheritanceList: AfterColon\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: AfterColon\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit: 120\nCommentPragmas:  '^ NumCpp pragma:'\nQualifierAlignment: Leave\nCompactNamespaces: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: false\nDeriveLineEnding: true\nDerivePointerAlignment: true\nDisableFormat:   false\nEmptyLineAfterAccessModifier: Never\nEmptyLineBeforeAccessModifier: Always\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nPackConstructorInitializers: Never\nIncludeBlocks:   Regroup\nIncludeCategories:\n  - Regex:           '^\"NumCpp/'\n    Priority:        4\n    SortPriority:    0\n  - Regex:           '^\"boost/'\n    Priority:        3\n    SortPriority:    0\n  - Regex:           '^<'\n    Priority:        2\n    SortPriority:    0\n  - Regex:           '.*'\n    Priority:        1\n    SortPriority:    0\nIncludeIsMainRegex: '$'\nIncludeIsMainSourceRegex: ''\nIndentAccessModifiers: false\nIndentCaseLabels: true\nIndentCaseBlocks: false\nIndentGotoLabels: true\nIndentPPDirectives: None\nIndentExternBlock: AfterExternBlock\nIndentRequires:  true\nIndentWidth:     4\nIndentWrappedFunctionNames: true\nInsertTrailingCommas: None\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nLambdaBodyIndentation: Signature\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: All\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 4\nObjCSpaceAfterProperty: true\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakOpenParenthesis: 0\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPenaltyIndentedWhitespace: 0\nPointerAlignment: Left\nReferenceAlignment: Pointer\nReflowComments:  true\nSeparateDefinitionBlocks: Always\nSortIncludes:    CaseSensitive\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCaseColon: false\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceAroundPointerQualifiers: Default\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyBlock: true\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInConditionalStatement: false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nSpaceBeforeSquareBrackets: false\nStandard:        Latest\nTabWidth:        4\nStandard:        c++17\nUseCRLF:         false\nUseTab:          Never\n...\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 1.466796875,
          "content": "Checks: >\n  clang-analyzer-*,\n  # cppcoreguidelines-*,\n  # bugprone-*,\n  # -bugprone-easily-swappable-parameters,\n  google-readability-*,\n  modernize-*,\n  -modernize-use-trailing-return-type,\n\n# Turn all the warnings from the checks above into errors.\nWarningsAsErrors: \"*\"\n\nCheckOptions:\n  - { key: readability-identifier-naming.NamespaceCase, value: lower_case }\n  - { key: readability-identifier-naming.ClassCase, value: CamelCase }\n  - { key: readability-identifier-naming.ClassMethodCase, value: camelBack }\n  - { key: readability-identifier-naming.StructCase, value: CamelCase }\n  - {\n      key: readability-identifier-naming.TemplateParameterCase,\n      value: CamelCase,\n    }\n  - { key: readability-identifier-naming.FunctionCase, value: camelBack }\n  - { key: readability-identifier-naming.VariableCase, value: camelBack }\n  - { key: readability-identifier-naming.PrivateMemberSuffix, value: _ }\n  - { key: readability-identifier-naming.ProtectedMemberSuffix, value: _ }\n  - {\n      key: readability-identifier-naming.MacroDefinitionCase,\n      value: UPPER_CASE,\n    }\n  - { key: readability-identifier-naming.EnumConstantCase, value: UPPER_CASE }\n  - {\n      key: readability-identifier-naming.ConstexprVariableCase,\n      value: UPPER_CASE,\n    }\n  - { key: readability-identifier-naming.GlobalConstantCase, value: UPPER_CASE }\n  - { key: readability-identifier-naming.MemberConstantCase, value: UPPER_CASE }\n  - { key: readability-identifier-naming.StaticConstantCase, value: UPPER_CASE }"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.208984375,
          "content": "\r\n.vs/\r\n.vscode/\r\n.VSCodeCounter/\r\n.idea/\r\n.pytest_cache/\r\n__pycache__/\r\n.settings/\r\n.project/\r\n*.prefs\r\n*.tmp\r\n*.filters\r\n*.user\r\n*.directory\r\n*build/\r\n*buildVS/\r\n*bin/\r\n*lib/\r\n*.exp\r\n*.lib\r\n*.pyd\r\n*.so\r\n\r\n*.tar\r\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 8.1796875,
          "content": "cmake_minimum_required(VERSION 3.14...3.99)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/cmake\")\ninclude(NumCppTools)\nnumcpp_find_version_file(\"\" NUMCPP_VERSION_FILE)\nmessage(STATUS \"Found version file: ${NUMCPP_VERSION_FILE}\")\nnumcpp_read_version(\"${NUMCPP_VERSION_FILE}\" \"\" VERSION_STRING)\n\nproject(\"NumCpp\"\n    VERSION \"${VERSION_STRING}\"\n    DESCRIPTION \"A Templatized Header Only C++ Implementation of the Python NumPy Library\"\n    HOMEPAGE_URL \"https://github.com/dpilger26/NumCpp\"\n    LANGUAGES CXX\n)\n\nenable_testing()\n\nmessage(STATUS \"Building ${PROJECT_NAME} version ${VERSION_STRING}\")\n\nif(NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE Release)\nendif()\n\nif(NOT CMAKE_CXX_STANDARD)\n    set(CMAKE_CXX_STANDARD 17)\nendif()\nset(CMAKE_CXX_STANDARD_REQUIRED On)\nmessage(STATUS \"Compiling with C++ standard: ${CMAKE_CXX_STANDARD}\")\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON CACHE INTERNAL \"\") # works\n\noption(BUILD_ALL \"Build All targets\" OFF)\noption(BUILD_DOCS \"Build the doxygen documentation\" OFF)\noption(BUILD_TESTS \"Build the unit tests\" OFF)\noption(BUILD_MULTIPLE_TEST \"Build the multiple translation unit test\" OFF)\noption(BUILD_CPPCHECK_TEST \"Build the cppcheck test\" OFF)\noption(BUILD_EXAMPLE_ALL \"Build all of the examples\" OFF)\noption(BUILD_EXAMPLE_GAUSS_NEWTON_NLLS \"Build the Gauss-Newton NLLS example\" OFF)\noption(BUILD_EXAMPLE_INTERFACE_WITH_EIGEN \"Build the Interface with Eigen example\" OFF)\noption(BUILD_EXAMPLE_INTERFACE_WITH_OPENCV \"Build the Interface with OpenCV example\" OFF)\noption(BUILD_EXAMPLE_README \"Build the README example\" OFF)\n\noption(NUMCPP_NO_USE_BOOST \"Don't use the boost libraries\" OFF)\noption(NUMCPP_USE_MULTITHREAD \"Enable multithreading\" OFF)\n\nif(BUILD_ALL)\n    set(BUILD_DOCS ON)\n    set(BUILD_TESTS ON)\n    set(BUILD_MULTIPLE_TEST ON)\n    set(BUILD_CPPCHECK_TEST ON)\n    set(BUILD_EXAMPLE_ALL ON)\nendif()\n\nif(BUILD_EXAMPLE_ALL)\n    set(BUILD_EXAMPLE_GAUSS_NEWTON_NLLS ON)\n    set(BUILD_EXAMPLE_INTERFACE_WITH_EIGEN ON)\n    set(BUILD_EXAMPLE_INTERFACE_WITH_OPENCV ON)\n    set(BUILD_EXAMPLE_README ON)\nendif()\n\nset(ALL_INTERFACE_TARGET compile_definitions)\nadd_library(${ALL_INTERFACE_TARGET} INTERFACE)\n\ntarget_compile_definitions(${ALL_INTERFACE_TARGET} INTERFACE $<$<CXX_COMPILER_ID:MSVC>:NOMINMAX>)\n\nif(NUMCPP_NO_USE_BOOST)\n    target_compile_definitions(${ALL_INTERFACE_TARGET} INTERFACE -DNUMCPP_NO_USE_BOOST)\nelse()\n    find_package(Boost 1.68.0 REQUIRED \n        COMPONENTS \n        date_time\n        log \n        log_setup\n    )\n    set(Boost_USE_STATIC_LIBS ON)\n    target_link_libraries(${ALL_INTERFACE_TARGET} INTERFACE \n        Boost::boost\n        Boost::date_time\n        Boost::log\n        Boost::log_setup\n    )\nendif()\n\nif(NUMCPP_USE_MULTITHREAD)\n    if (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\" OR CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n        find_package(TBB REQUIRED)\n    endif()\n    target_link_libraries(${ALL_INTERFACE_TARGET} INTERFACE \n        $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:TBB::tbb>\n    )\n    target_compile_definitions(${ALL_INTERFACE_TARGET} INTERFACE -DNUMCPP_USE_MULTITHREAD)\nendif()\n\ntarget_compile_options(${ALL_INTERFACE_TARGET} INTERFACE\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-W>\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-Wall>\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-Wextra>\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-Werror>\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-Wdouble-promotion>\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-Wunused>\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-Wshadow>\n  # $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-Wconversion>\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-Wpedantic>\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-pedantic-errors>\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-Wcast-align>\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-Wcast-qual>\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-Wfloat-equal>\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-Wformat=2>\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-Wmissing-include-dirs>\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-Wpointer-arith>\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-Wredundant-decls>\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-Wsequence-point>\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-Wswitch>\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-Wundef>\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-Wunreachable-code>\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-Wunused-but-set-parameter>\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-Wwrite-strings>\n  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:GNU>>:-Wunused-parameter>\n  $<$<CXX_COMPILER_ID:MSVC>:/W4>\n  $<$<CXX_COMPILER_ID:MSVC>:/Zi>\n  $<$<CXX_COMPILER_ID:MSVC>:/sdl>\n  $<$<CXX_COMPILER_ID:MSVC>:/MP>\n  $<$<CXX_COMPILER_ID:MSVC>:/Gy>\n  $<$<AND:$<CXX_COMPILER_ID:MSVC>,$<CONFIG:Release>>:/Oi>\n  $<$<AND:$<CXX_COMPILER_ID:MSVC>,$<CONFIG:Release>>:/Ot>\n  $<$<AND:$<CXX_COMPILER_ID:MSVC>,$<CONFIG:Release>>:/GL>\n)\n\ntarget_link_options(${ALL_INTERFACE_TARGET} INTERFACE\n  $<$<AND:$<CXX_COMPILER_ID:MSVC>,$<CONFIG:Release>>:/LTCG>\n)\n\nget_filename_component(NUMCPP_INCLUDES ./include ABSOLUTE)\nset(OUTPUT_BINARY_DIR ${PROJECT_SOURCE_DIR}/bin/$<0:>)\n\nif (BUILD_TESTS OR BUILD_MULTIPLE_TEST OR BUILD_CPPCHECK_TEST) \n    add_subdirectory(test)\nendif()\n\nadd_subdirectory(examples)\n\nadd_library(${PROJECT_NAME} INTERFACE)\nadd_library(${PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})\n\nif(NOT PROJECT_IS_TOP_LEVEL)\n    set(WARNING_GUARD SYSTEM)\nendif()\n\ninclude(GNUInstallDirs)\ntarget_include_directories(${PROJECT_NAME} ${WARNING_GUARD} INTERFACE \n    $<BUILD_INTERFACE:${${PROJECT_NAME}_SOURCE_DIR}/include>\n    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\n)\n\ntarget_compile_features(${PROJECT_NAME} INTERFACE $<INSTALL_INTERFACE:cxx_std_17>)\n\nif (BUILD_DOCS)\n    set(-Wno-dev)\n    message(STATUS \"Configuring Doxygen docs\")\n    find_package(Doxygen QUIET)\n    if(DOXYGEN_FOUND)\n        if (CMAKE_BUILD_TYPE MATCHES \"^[Rr]elease\")\n            message(\"Doxygen build started\")\n\n            set(DOXYFILE_IN ${CMAKE_CURRENT_SOURCE_DIR}/docs/doxygen/Doxyfile.in)\n            set(DOXYFILE_OUT ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)\n\n            configure_file(${DOXYFILE_IN} ${DOXYFILE_OUT} @ONLY)\n\n            add_custom_target( docs\n                COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYFILE_OUT}\n                WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n                COMMENT \"Generating API documentation with Doxygen\"\n                VERBATIM )\n        endif()\n    else(DOXYGEN_FOUND)\n        message(WARNING \"Doxygen needs to be installed to generate the doxygen documentation\")\n    endif(DOXYGEN_FOUND)\nendif(BUILD_DOCS)\n\ninstall(TARGETS ${PROJECT_NAME}\n    EXPORT ${PROJECT_NAME}_Targets\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n)\n\nadd_custom_target(format\n    COMMAND clang-format -i -style=file:${CMAKE_CURRENT_SOURCE_DIR}/.clang-format `git ls-files *.hpp`\n    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})\n\nadd_custom_target(tidy COMMAND run-clang-tidy -p ${CMAKE_BINARY_DIR} -extra-arg=-std=c++${CMAKE_CXX_STANDARD})\n\ninclude(CMakePackageConfigHelpers)\nwrite_basic_package_version_file(\"${PROJECT_NAME}ConfigVersion.cmake\"\n                                 VERSION ${PROJECT_VERSION}\n                                 COMPATIBILITY SameMajorVersion)\n\nconfigure_package_config_file(\n    \"${PROJECT_SOURCE_DIR}/cmake/${PROJECT_NAME}Config.cmake.in\"\n    \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\"\n    INSTALL_DESTINATION\n    ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/cmake\n)\n\ninstall(EXPORT ${PROJECT_NAME}_Targets\n    FILE ${PROJECT_NAME}Targets.cmake\n    NAMESPACE ${PROJECT_NAME}::\n    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/cmake\n)\n\ninstall(FILES \n    \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\"   \n    \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\"\n    DESTINATION \n    ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/cmake\n)\n\ninstall(DIRECTORY ${PROJECT_SOURCE_DIR}/include/ DESTINATION include)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2724609375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at dpilger26@gmail.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.0009765625,
          "content": "\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "MIT License\n\nCopyright (C) 2018-2023 David Pilger\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.34765625,
          "content": "﻿![NumCpp logo](https://github.com/dpilger26/NumCpp/raw/master/docs/logo/NumCppLogo.png)\n\n[![GitHub watchers](https://img.shields.io/github/watchers/dpilger26/NumCpp.svg?style=social&label=Watch&maxAge=2592000)](https://GitHub.com/dpilger26/NumCpp/watchers/)\n[![GitHub stars](https://img.shields.io/github/stars/dpilger26/NumCpp.svg?style=social&label=Star&maxAge=2592000)](https://GitHub.com/dpilger26/NumCpp/stargazers/)\n[![GitHub forks](https://img.shields.io/github/forks/dpilger26/NumCpp.svg?style=social&label=Fork&maxAge=2592000)](https://GitHub.com/dpilger26/NumCpp/network/)\n\n![Build status](https://github.com/dpilger26/NumCpp/actions/workflows/Tests.yml/badge.svg)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/ea24c08d892e4beebd46cfca260823c1)](https://app.codacy.com/manual/dpilger26/NumCpp?utm_source=github.com&utm_medium=referral&utm_content=dpilger26/NumCpp&utm_campaign=Badge_Grade_Dashboard)\n[![Awesome](https://awesome.re/badge.svg)](https://awesome.re)\n[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/donate/?hosted_button_id=JDFK4DUMJJWYY)\n\n# NumCpp: A Templatized Header Only C++ Implementation of the [Python NumPy Library](http://www.numpy.org)\n\n## Author: David Pilger <dpilger26@gmail.com>\n\n## Version: ![GitHub tag (latest by date)](https://img.shields.io/github/tag-date/dpilger26/NumCpp.svg?color=blue&label=Official%20Release&style=popout)\n\n## License [![MIT license](https://img.shields.io/badge/License-MIT-blue.svg)](https://lbesson.mit-license.org/)\n\n## Testing\n\n**C++ Standards:**  \n[![C++17](https://img.shields.io/badge/C%2B%2B-17-blue.svg)](https://isocpp.org/std/the-standard)\n[![C++20](https://img.shields.io/badge/C%2B%2B-20-blue.svg)](https://isocpp.org/std/the-standard)\n[![C++23](https://img.shields.io/badge/C%2B%2B-23-blue.svg)](https://isocpp.org/std/the-standard)\n\n**Compilers:**  \nVisual Studio: 2022  \nGNU: 13.3, 14.2  \nClang: 18, 19  \n\n**Boost Versions:**  \n1.73+\n\n## [Documentation](https://dpilger26.github.io/NumCpp)\n\n## [GitHub](https://github.com/dpilger26/NumCpp)\n\n[![Star History Chart](https://api.star-history.com/svg?repos=dpilger26/NumCpp&type=Date)](https://star-history.com/#dpilger26/NumCpp&Date)\n\n## [Installation](https://github.com/dpilger26/NumCpp/tree/master/docs/markdown/Installation.md)\n\n## [Building](https://github.com/dpilger26/NumCpp/tree/master/docs/markdown/Building.md)\n\n## [Release Notes](https://github.com/dpilger26/NumCpp/tree/master/docs/markdown/ReleaseNotes.md)\n\n## From NumPy To NumCpp – A Quick Start Guide\n\nThis quick start guide is meant as a very brief overview of some of the things\nthat can be done with **NumCpp**.  For a full breakdown of everything available\nin the **NumCpp** library please visit the [Full Documentation](https://dpilger26.github.io/NumCpp).\n\n### CONTAINERS\n\nThe main data structure in **NumCpp** is the `NdArray`.  It is inherently a 2D array class, with 1D arrays being implemented as 1xN arrays.  There is also a `DataCube` class that is provided as a convenience container for storing an array of 2D `NdArray`s, but it has limited usefulness past a simple container.\n\n|                  **NumPy**                   |                      **NumCpp**                       |\n| :------------------------------------------: | :---------------------------------------------------: |\n| ```a = np.array([[1, 2], [3, 4], [5, 6]])``` | ```nc::NdArray<int> a = { {1, 2}, {3, 4}, {5, 6} }``` |\n|           ```a.reshape([2, 3])```            |                 ```a.reshape(2, 3)```                 |\n|          ```a.astype(np.double)```           |               ```a.astype<double>()```                |\n\n### INITIALIZERS\n\nMany initializer functions are provided that return `NdArray`s for common needs.\n\n|          **NumPy**          |                       **NumCpp**                       |\n| :-------------------------: | :----------------------------------------------------: |\n| ```np.linspace(1, 10, 5)``` |          ```nc::linspace<dtype>(1, 10, 5)```           |\n|    ```np.arange(3, 7)```    |             ```nc::arange<dtype>(3, 7)```              |\n|       ```np.eye(4)```       |                ```nc::eye<dtype>(4)```                 |\n|   ```np.zeros([3, 4])```    |              ```nc::zeros<dtype>(3, 4)```              |\n|                             |          ```nc::NdArray<dtype>(3, 4) a = 0```          |\n|    ```np.ones([3, 4])```    |              ```nc::ones<dtype>(3, 4)```               |\n|                             |          ```nc::NdArray<dtype>(3, 4) a = 1```          |\n|    ```np.nans([3, 4])```    |                  ```nc::nans(3, 4)```                  |\n|                             | ```nc::NdArray<double>(3, 4) a = nc::constants::nan``` |\n|   ```np.empty([3, 4])```    |              ```nc::empty<dtype>(3, 4)```              |\n|                             |            ```nc::NdArray<dtype>(3, 4) a```            |\n\n### SLICING/BROADCASTING\n\n**NumCpp** offers **NumPy** style slicing and broadcasting.\n\n|     **NumPy**      |                **NumCpp**                 |\n| :----------------: | :---------------------------------------: |\n|   ```a[2, 3]```    |               ```a(2, 3)```               |\n| ```a[2:5, 5:8]```  | ```a(nc::Slice(2, 5), nc::Slice(5, 8))``` |\n|                    |          ```a({2, 5}, {5, 8})```          |\n|   ```a[:, 7]```    |          ```a(a.rSlice(), 7)```           |\n|   ```a[a > 5]```   |              ```a[a > 5]```               |\n| ```a[a > 5] = 0``` |         ```a.putMask(a > 5, 0)```         |\n\n### RANDOM\n\nThe random module provides simple ways to create random arrays.\n\n|               **NumPy**                |                       **NumCpp**                       |\n| :------------------------------------: | :----------------------------------------------------: |\n|       ```np.random.seed(666)```        |              ```nc::random::seed(666)```               |\n|      ```np.random.randn(3, 4)```       |    ```nc::random::randN<double>(nc::Shape(3, 4))```    |\n|                                        |        ```nc::random::randN<double>({3, 4})```         |\n| ```np.random.randint(0, 10, [3, 4])``` | ```nc::random::randInt<int>(nc::Shape(3, 4), 0, 10)``` |\n|                                        |     ```nc::random::randInt<int>({3, 4}, 0, 10)```      |\n|       ```np.random.rand(3, 4)```       |     ```nc::random::rand<double>(nc::Shape(3,4))```     |\n|                                        |         ```nc::random::rand<double>({3, 4})```         |\n|      ```np.random.choice(a, 3)```      |             ```nc::random::choice(a, 3)```             |\n\n### CONCATENATION\n\nMany ways to concatenate `NdArray` are available.\n\n|             **NumPy**             |                **NumCpp**                 |\n| :-------------------------------: | :---------------------------------------: |\n| ```np.stack([a, b, c], axis=0)``` | ```nc::stack({a, b, c}, nc::Axis::ROW)``` |\n|    ```np.vstack([a, b, c])```     |        ```nc::vstack({a, b, c})```        |\n|    ```np.hstack([a, b, c])```     |        ```nc::hstack({a, b, c})```        |\n|   ```np.append(a, b, axis=1)```   |   ```nc::append(a, b, nc::Axis::COL)```   |\n\n### DIAGONAL, TRIANGULAR, AND FLIP\n\nThe following return new `NdArray`s.\n\n|        **NumPy**         |            **NumCpp**            |\n| :----------------------: | :------------------------------: |\n|   ```np.diagonal(a)```   |      ```nc::diagonal(a)```       |\n|     ```np.triu(a)```     |        ```nc::triu(a)```         |\n|     ```np.tril(a)```     |        ```nc::tril(a)```         |\n| ```np.flip(a, axis=0)``` | ```nc::flip(a, nc::Axis::ROW)``` |\n|    ```np.flipud(a)```    |       ```nc::flipud(a)```        |\n|    ```np.fliplr(a)```    |       ```nc::fliplr(a)```        |\n\n### ITERATION\n\n**NumCpp** follows the idioms of the C++ STL providing iterator pairs to iterate on arrays in different fashions.\n\n|      **NumPy**       |                     **NumCpp**                     |\n| :------------------: | :------------------------------------------------: |\n| ```for value in a``` | ```for(auto it = a.begin(); it < a.end(); ++it)``` |\n|                      |             ```for(auto& value : a)```             |\n\n### LOGICAL\n\nLogical FUNCTIONS in **NumCpp** behave the same as **NumPy**.\n\n|          **NumPy**          |          **NumCpp**          |\n| :-------------------------: | :--------------------------: |\n| ```np.where(a > 5, a, b)``` | ```nc::where(a > 5, a, b)``` |\n|       ```np.any(a)```       |       ```nc::any(a)```       |\n|       ```np.all(a)```       |       ```nc::all(a)```       |\n| ```np.logical_and(a, b)```  | ```nc::logical_and(a, b)```  |\n|  ```np.logical_or(a, b)```  |  ```nc::logical_or(a, b)```  |\n|   ```np.isclose(a, b)```    |   ```nc::isclose(a, b)```    |\n|   ```np.allclose(a, b)```   |   ```nc::allclose(a, b)```   |\n\n### COMPARISONS\n\n|            **NumPy**             |                **NumCpp**                |\n| :------------------------------: | :--------------------------------------: |\n|       ```np.equal(a, b)```       |          ```nc::equal(a, b)```           |\n|                                  |               ```a == b```               |\n|     ```np.not_equal(a, b)```     |        ```nc::not_equal(a, b)```         |\n|                                  |               ```a != b```               |\n| ```rows, cols = np.nonzero(a)``` | ```auto [rows, cols] = nc::nonzero(a)``` |\n\n### MINIMUM, MAXIMUM, SORTING\n\n|          **NumPy**          |             **NumCpp**              |\n| :-------------------------: | :---------------------------------: |\n|       ```np.min(a)```       |          ```nc::min(a)```           |\n|       ```np.max(a)```       |          ```nc::max(a)```           |\n|     ```np.argmin(a)```      |         ```nc::argmin(a)```         |\n|     ```np.argmax(a)```      |         ```nc::argmax(a)```         |\n|  ```np.sort(a, axis=0)```   |  ```nc::sort(a, nc::Axis::ROW)```   |\n| ```np.argsort(a, axis=1)``` | ```nc::argsort(a, nc::Axis::COL)``` |\n|     ```np.unique(a)```      |         ```nc::unique(a)```         |\n|  ```np.setdiff1d(a, b)```   |      ```nc::setdiff1d(a, b)```      |\n|      ```np.diff(a)```       |          ```nc::diff(a)```          |\n\n### REDUCERS\n\nReducers accumulate values of `NdArray`s along specified axes. When no axis is specified, values are accumulated along all axes.\n\n|             **NumPy**             |                **NumCpp**                 |\n| :-------------------------------: | :---------------------------------------: |\n|          ```np.sum(a)```          |             ```nc::sum(a)```              |\n|      ```np.sum(a, axis=0)```      |      ```nc::sum(a, nc::Axis::ROW)```      |\n|         ```np.prod(a)```          |             ```nc::prod(a)```             |\n|     ```np.prod(a, axis=0)```      |     ```nc::prod(a, nc::Axis::ROW)```      |\n|         ```np.mean(a)```          |             ```nc::mean(a)```             |\n|     ```np.mean(a, axis=0)```      |     ```nc::mean(a, nc::Axis::ROW)```      |\n|     ```np.count_nonzero(a)```     |        ```nc::count_nonzero(a)```         |\n| ```np.count_nonzero(a, axis=0)``` | ```nc::count_nonzero(a, nc::Axis::ROW)``` |\n\n### I/O\n\nPrint and file output methods.  All **NumCpp** classes support a `print()` method and `<<` stream operators.\n\n|               **NumPy**               |                **NumCpp**                 |\n| :-----------------------------------: | :---------------------------------------: |\n|            ```print(a)```             |              ```a.print()```              |\n|                                       |           ```std::cout << a```            |\n|  ```a.tofile(filename, sep=’\\n’)```   |      ```a.tofile(filename, '\\n')```       |\n| ```np.fromfile(filename, sep=’\\n’)``` | ```nc::fromfile<dtype>(filename, '\\n')``` |\n|      ```np.dump(a, filename)```       |        ```nc::dump(a, filename)```        |\n|        ```np.load(filename)```        |      ```nc::load<dtype>(filename)```      |\n\n### MATHEMATICAL FUNCTIONS\n\n**NumCpp** universal functions are provided for a large set number of mathematical functions.\n\n#### BASIC FUNCTIONS\n\n|         **NumPy**          |         **NumCpp**          |\n| :------------------------: | :-------------------------: |\n|      ```np.abs(a)```       |      ```nc::abs(a)```       |\n|      ```np.sign(a)```      |      ```nc::sign(a)```      |\n|  ```np.remainder(a, b)```  |  ```nc::remainder(a, b)```  |\n|   ```np.clip(a, 3, 8)```   |   ```nc::clip(a, 3, 8)```   |\n| ```np.interp(x, xp, fp)``` | ```nc::interp(x, xp, fp)``` |\n\n#### EXPONENTIAL FUNCTIONS\n\n|     **NumPy**     |     **NumCpp**     |\n| :---------------: | :----------------: |\n|  ```np.exp(a)```  |  ```nc::exp(a)```  |\n| ```np.expm1(a)``` | ```nc::expm1(a)``` |\n|  ```np.log(a)```  |  ```nc::log(a)```  |\n| ```np.log1p(a)``` | ```nc::log1p(a)``` |\n\n#### POWER FUNCTIONS\n\n|      **NumPy**       |      **NumCpp**       |\n| :------------------: | :-------------------: |\n| ```np.power(a, 4)``` | ```nc::power(a, 4)``` |\n|   ```np.sqrt(a)```   |   ```nc::sqrt(a)```   |\n|  ```np.square(a)```  |  ```nc::square(a)```  |\n|   ```np.cbrt(a)```   |   ```nc::cbrt(a)```   |\n\n#### TRIGONOMETRIC FUNCTIONS\n\n|    **NumPy**    |    **NumCpp**    |\n| :-------------: | :--------------: |\n| ```np.sin(a)``` | ```nc::sin(a)``` |\n| ```np.cos(a)``` | ```nc::cos(a)``` |\n| ```np.tan(a)``` | ```nc::tan(a)``` |\n\n#### HYPERBOLIC FUNCTIONS\n\n|    **NumPy**     |    **NumCpp**     |\n| :--------------: | :---------------: |\n| ```np.sinh(a)``` | ```nc::sinh(a)``` |\n| ```np.cosh(a)``` | ```nc::cosh(a)``` |\n| ```np.tanh(a)``` | ```nc::tanh(a)``` |\n\n#### CLASSIFICATION FUNCTIONS\n\n|     **NumPy**     |     **NumCpp**     |\n| :---------------: | :----------------: |\n| ```np.isnan(a)``` | ```nc::isnan(a)``` |\n| ```np.isinf(a)``` | ```nc::isinf(a)``` |\n\n#### LINEAR ALGEBRA\n\n|             **NumPy**              |               **NumCpp**               |\n| :--------------------------------: | :------------------------------------: |\n|      ```np.linalg.norm(a)```       |           ```nc::norm(a)```            |\n|         ```np.dot(a, b)```         |          ```nc::dot(a, b)```           |\n|       ```np.linalg.det(a)```       |        ```nc::linalg::det(a)```        |\n|       ```np.linalg.inv(a)```       |        ```nc::linalg::inv(a)```        |\n|    ```np.linalg.lstsq(a, b)```     |     ```nc::linalg::lstsq(a, b)```      |\n| ```np.linalg.matrix_power(a, 3)``` |  ```nc::linalg::matrix_power(a, 3)```  |\n| ```Np.linalg.multi_dot(a, b, c)``` | ```nc::linalg::multi_dot({a, b, c})``` |\n|       ```np.linalg.svd(a)```       |        ```nc::linalg::svd(a)```        |\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.025390625,
          "content": "theme: jekyll-theme-hacker"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "develop",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "static_analysis",
          "type": "tree",
          "content": null
        },
        {
          "name": "suppressions.txt",
          "type": "blob",
          "size": 0.03515625,
          "content": "shadowFunction\nnoExplicitConstructor"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}