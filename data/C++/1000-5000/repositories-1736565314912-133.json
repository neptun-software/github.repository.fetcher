{
  "metadata": {
    "timestamp": 1736565314912,
    "page": 133,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "baidu/braft",
      "stars": 4030,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4052734375,
          "content": "# Ignore all files without extension.\n# If you need to git-add a file without extension, add -f\n*\n!*.*\n!*/\n\n*.o\n*.a\n*.log\n*.pb.cc\n*.pb.h\n*.prof\n*.so\n*.out\n/runtime\n/output\n/test/output\n\n# Ignore hidden files\n.*\n*.swp\n\n# Ignore CMake files\nCMakeCache.txt\nCMakeFiles\nCMakeScripts\nTesting\ncmake_install.cmake\ninstall_manifest.txt\ncompile_commands.json\nCTestTestfile.cmake\n/build\n/third-party\n\n# Github aciton\n!.github\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.15625,
          "content": "language: cpp\n\nsudo: required\n\ncompiler:\n- clang\n- gcc\n\nenv:\n- PURPOSE=compile\n- PURPOSE=unittest\n- PURPOSE=compile-with-bazel\n\nbefore_install:\n- wget --no-clobber https://github.com/bazelbuild/bazel/releases/download/0.25.2/bazel_0.25.2-linux-x86_64.deb\n- sudo dpkg -i bazel_0.25.2-linux-x86_64.deb\n\ninstall:\n- sudo apt-get install -qq realpath libgflags-dev libprotobuf-dev libprotoc-dev protobuf-compiler libleveldb-dev libgoogle-perftools-dev\n- sudo apt-get install libgtest-dev && cd /usr/src/gtest && sudo env \"PATH=$PATH\" cmake . && sudo make && sudo mv libgtest* /usr/lib/ && cd -\n- sudo apt-get install -y gdb\n- if [[ \"$PURPOSE\" != \"compile-with-bazel\" ]]; then git clone https://github.com/brpc/brpc.git && mkdir -p brpc/bld && cd brpc/bld && cmake .. && make -j4 && sudo make install && cd - ; fi\n\nbefore_script:\n- ulimit -c unlimited -S\n\nscript:\n- if [[ \"$PURPOSE\" == \"compile-with-bazel\" ]]; then bazel build -c opt --copt -DHAVE_ZLIB=1 //...  ; fi\n- sh build_in_travis_ci.sh\n\nafter_failure:\n- COREFILE=$(find . -maxdepth 1 -name \"core*\" | head -n 1)\n- if [[ -f \"$COREFILE\" ]]; then gdb -c \"$COREFILE\" example -ex \"thread apply all bt\" -ex \"set pagination 0\" -batch; fi\n\n"
        },
        {
          "name": "BUILD",
          "type": "blob",
          "size": 1.3310546875,
          "content": "licenses([\"notice\"])\n\nexports_files([\"LICENSE\"])\n\nload(\":bazel/braft.bzl\", \"braft_proto_library\")\n\ncc_library(\n    name = \"braft\",\n    srcs = glob([\n        \"src/braft/*.cpp\",\n    ]),\n    hdrs = glob([\n        \"src/braft/*.h\",\n    ]),\n    includes = [\n        \"src\",\n    ],\n    defines = [],\n    copts = [\n        \"-DGFLAGS=gflags\",\n        \"-DOS_LINUX\",\n        \"-DSNAPPY\",\n        \"-DHAVE_SSE42\",\n        \"-DNDEBUG\",\n        \"-D__STDC_FORMAT_MACROS\",\n        \"-fno-omit-frame-pointer\",\n        \"-momit-leaf-frame-pointer\",\n        \"-msse4.2\",\n        \"-pthread\",\n        \"-Wsign-compare\",\n        \"-Wno-unused-parameter\",\n        \"-Wno-unused-variable\",\n        \"-Woverloaded-virtual\",\n        \"-Wnon-virtual-dtor\",\n        \"-Wno-missing-field-initializers\",\n        \"-std=c++11\",\n        \"-DGFLAGS_NS=google\",\n    ],\n    linkopts = [\n        \"-lm\",\n        \"-lpthread\",\n    ],\n    deps = [\n        \"@com_github_brpc_brpc//:brpc\",\n        \"@com_github_gflags_gflags//:gflags\",\n        \"@com_github_google_glog//:glog\",\n        \"@com_google_protobuf//:protobuf\",        \n        \"@zlib//:zlib\",\n        \":cc_braft_internal_proto\",\n    ],\n    visibility = [\"//visibility:public\"],\n)\n\nbraft_proto_library(\n    name = \"cc_braft_internal_proto\",\n    srcs = glob([\n        \"src/braft/*.proto\",\n    ]),\n    include = \"src\",\n    visibility = [\"//visibility:public\"],\n)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 7.5888671875,
          "content": "cmake_minimum_required(VERSION 2.8.10)\nproject(braft C CXX)\n\nSET(CPACK_GENERATOR \"DEB\")\nSET(CPACK_DEBIAN_PACKAGE_MAINTAINER \"braft authors\") #required\n\nINCLUDE(CPack)\n\n#option(EXAMPLE_LINK_SO \"Whether examples are linked dynamically\" OFF)\noption(BRPC_WITH_GLOG \"With glog\" OFF)\noption(WITH_DEBUG_SYMBOLS \"With debug symbols\" ON)\n\nset(WITH_GLOG_VAL \"0\")\nif(BRPC_WITH_GLOG)\n    set(WITH_GLOG_VAL \"1\")\nendif()\n\nif(WITH_DEBUG_SYMBOLS)\n    set(DEBUG_SYMBOL \"-g\")\nendif()\n\nset(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)\n\ninclude(FindThreads)\ninclude(FindProtobuf)\n\nif(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    # require at least gcc 4.8\n    if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.8)\n        message(FATAL_ERROR \"GCC is too old, please install a newer version supporting C++11\")\n    endif()\n    if(NOT (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7.0))\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-aligned-new\")\n    endif()\nelseif(CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n    # require at least clang 3.3\n    if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.3)\n        message(FATAL_ERROR \"Clang is too old, please install a newer version supporting C++11\")\n    endif()\nelse()\n    message(WARNING \"You are using an unsupported compiler! Compilation has only been tested with Clang and GCC.\")\nendif()\n\nfind_path(LEVELDB_INCLUDE_PATH NAMES leveldb/db.h)\nfind_library(LEVELDB_LIB NAMES leveldb)\nif ((NOT LEVELDB_INCLUDE_PATH) OR (NOT LEVELDB_LIB))\n    message(FATAL_ERROR \"Fail to find leveldb\")\nendif()\n\nfind_path(GFLAGS_INCLUDE_PATH NAMES gflags/gflags.h)\nfind_library(GFLAGS_LIB NAMES gflags)\nif ((NOT GFLAGS_INCLUDE_PATH) OR (NOT GFLAGS_LIB))\n    message(FATAL_ERROR \"Fail to find gflags\")\nendif()\n\nif(BRPC_WITH_GLOG)\n    find_path(GLOG_INCLUDE_PATH NAMES glog/logging.h)\n    find_library(GLOG_LIB NAMES glog)\n    if((NOT GLOG_INCLUDE_PATH) OR (NOT GLOG_LIB))\n        message(FATAL_ERROR \"Fail to find glog\")\n    endif()\n    include_directories(${GLOG_INCLUDE_PATH})\nendif()\n\nif(LEVELDB_WITH_SNAPPY)\n    find_library(SNAPPY_LIB NAMES snappy)\nendif()\n\nfind_path(BRPC_INCLUDE_PATH NAMES brpc/server.h)\nfind_library(BRPC_LIB NAMES libbrpc.a brpc)\nif ((NOT BRPC_INCLUDE_PATH) OR (NOT BRPC_LIB))\n    message(FATAL_ERROR \"Fail to find brpc\")\nendif()\n\nif (NOT PROTOBUF_PROTOC_EXECUTABLE)\n    get_filename_component(PROTO_LIB_DIR ${PROTOBUF_LIBRARY} DIRECTORY)\n    set (PROTOBUF_PROTOC_EXECUTABLE \"${PROTO_LIB_DIR}/../bin/protoc\")\nendif()\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n    set(OPENSSL_ROOT_DIR\n        \"/usr/local/opt/openssl\"    # Homebrew installed OpenSSL\n        )\nendif()\n\ninclude(FindOpenSSL)\n\ninclude_directories(\n        ${GFLAGS_INCLUDE_PATH}\n        ${PROTOBUF_INCLUDE_DIRS}\n        ${LEVELDB_INCLUDE_PATH}\n        ${BRPC_INCLUDE_PATH}\n        ${OPENSSL_INCLUDE_DIR}\n        )\n\nif(BRPC_WITH_GLOG)\n    set(DYNAMIC_LIB\n        ${BRPC_LIB}\n        ${GFLAGS_LIB}\n        ${GLOG_LIB}\n        ${PROTOBUF_LIBRARY}\n        ${LEVELDB_LIB}\n        ${CMAKE_THREAD_LIBS_INIT}\n        ${OPENSSL_LIBRARIES}\n        ${OPENSSL_CRYPTO_LIBRARY}\n        dl\n        z\n        )\nelse()\n    set(DYNAMIC_LIB\n        ${BRPC_LIB}\n        ${GFLAGS_LIB}\n        ${PROTOBUF_LIBRARY}\n        ${LEVELDB_LIB}\n        ${CMAKE_THREAD_LIBS_INIT}\n        ${OPENSSL_LIBRARIES}\n        ${OPENSSL_CRYPTO_LIBRARY}\n        dl\n        z\n\t)\nendif()\n\nif(LEVELDB_WITH_SNAPPY)\n    set(DYNAMIC_LIB ${DYNAMIC_LIB}\n        ${SNAPPY_LIB}\n\t)\nendif()\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n    set(DYNAMIC_LIB ${DYNAMIC_LIB}\n        pthread\n        \"-framework CoreFoundation\"\n        \"-framework CoreGraphics\"\n        \"-framework CoreData\"\n        \"-framework CoreText\"\n        \"-framework Security\"\n        \"-framework Foundation\"\n        \"-Wl,-U,_MallocExtension_ReleaseFreeMemory\"\n        \"-Wl,-U,_ProfilerStart\"\n        \"-Wl,-U,_ProfilerStop\"\n        )\nelse()\n    set(DYNAMIC_LIB ${DYNAMIC_LIB}\n        rt\n        )\nendif()\n\n# for *.so\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/output/lib)\n# for *.a\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/output/lib)\n\nfile(GLOB BRAFT_PROTOS \"${CMAKE_CURRENT_SOURCE_DIR}/src/braft/*.proto\")\nforeach(PROTO ${BRAFT_PROTOS})\n    get_filename_component(PROTO_WE ${PROTO} NAME_WE)\n    list(APPEND PROTO_SRCS \"${CMAKE_CURRENT_BINARY_DIR}/braft/${PROTO_WE}.pb.cc\")\n    execute_process(\n        COMMAND ${PROTOBUF_PROTOC_EXECUTABLE} ${PROTO_FLAGS}\n        --cpp_out=${CMAKE_CURRENT_BINARY_DIR}\n        --proto_path=${PROTOBUF_INCLUDE_DIR}\n        --proto_path=${CMAKE_CURRENT_SOURCE_DIR}/src\n        --proto_path=${CMAKE_CURRENT_SOURCE_DIR}/src/braft/ ${PROTO}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        ERROR_VARIABLE PROTO_ERROR\n        RESULT_VARIABLE PROTO_RESULT\n    )\n    if (${PROTO_RESULT} EQUAL 0) \n    else ()\n        message (FATAL_ERROR \"Fail to generate cpp of ${PROTO} : ${PROTO_ERROR}\")\n    endif()\nendforeach()\n\nfile(GLOB_RECURSE BRAFT_SOURCES \"${CMAKE_CURRENT_SOURCE_DIR}/src/braft/*.cpp\")\nset(SOURCES\n    ${BRAFT_SOURCES}\n    ${PROTO_SRCS}\n    )\n\ninclude_directories(\n    ${CMAKE_CURRENT_SOURCE_DIR}/src\n    ${CMAKE_CURRENT_BINARY_DIR}\n)\n\nexecute_process(\n    COMMAND bash -c \"grep \\\"namespace [_A-Za-z0-9]\\\\+ {\\\" ${GFLAGS_INCLUDE_PATH}/gflags/gflags_declare.h | head -1 | awk '{print $2}' | tr -d '\\n'\"\n    OUTPUT_VARIABLE GFLAGS_NS\n)\nif(${GFLAGS_NS} STREQUAL \"GFLAGS_NAMESPACE\")\n    execute_process(\n        COMMAND bash -c \"grep \\\"#define GFLAGS_NAMESPACE [_A-Za-z0-9]\\\\+\\\" ${GFLAGS_INCLUDE_PATH}/gflags/gflags_declare.h | head -1 | awk '{print $3}' | tr -d '\\n'\"\n        OUTPUT_VARIABLE GFLAGS_NS\n    )\nendif()\n\nexecute_process(\n    COMMAND bash -c \"git rev-parse --short HEAD | tr -d '\\n'\"\n    OUTPUT_VARIABLE BRAFT_REVISION\n)\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n    include(CheckFunctionExists)\n    CHECK_FUNCTION_EXISTS(clock_gettime HAVE_CLOCK_GETTIME)\n    if(NOT HAVE_CLOCK_GETTIME)\n        set(DEFINE_CLOCK_GETTIME \"-DNO_CLOCK_GETTIME_IN_MAC\")\n    endif()\nendif()\n\nset(CMAKE_CPP_FLAGS \"${DEFINE_CLOCK_GETTIME} -DBRPC_WITH_GLOG=${WITH_GLOG_VAL} -DGFLAGS_NS=${GFLAGS_NS}\")\nset(CMAKE_CPP_FLAGS \"${CMAKE_CPP_FLAGS} -DBTHREAD_USE_FAST_PTHREAD_MUTEX -D__const__=__unused__ -D_GNU_SOURCE -DUSE_SYMBOLIZE -DNO_TCMALLOC -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS -DBRAFT_REVISION=\\\\\\\"${BRAFT_REVISION}\\\\\\\" -D__STRICT_ANSI__\")\nset(CMAKE_CPP_FLAGS \"${CMAKE_CPP_FLAGS} ${DEBUG_SYMBOL}\")\nif(CMAKE_SYSTEM_PROCESSOR MATCHES \"(x86)|(X86)|(amd64)|(AMD64)\")\n    set(CMAKE_CPP_FLAGS \"${CMAKE_CPP_FLAGS} -msse4 -msse4.2\")\nendif()\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${CMAKE_CPP_FLAGS} -O2 -pipe -Wall -W -fPIC -fstrict-aliasing -Wno-invalid-offsetof -Wno-unused-parameter -Wno-reserved-user-defined-literal -fno-omit-frame-pointer\")\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${CMAKE_CPP_FLAGS} -O2 -pipe -Wall -W -fPIC -fstrict-aliasing -Wno-unused-parameter -fno-omit-frame-pointer\")\n\nmacro(use_cxx11)\nif(CMAKE_VERSION VERSION_LESS \"3.1.3\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\nelse()\n    set(CMAKE_CXX_STANDARD 11)\n    set(CMAKE_CXX_STANDARD_REQUIRED ON)\nendif()\nendmacro(use_cxx11)\n\nuse_cxx11()\n\nadd_subdirectory(src)\nif(BUILD_UNIT_TESTS)\n    add_subdirectory(test)\nendif()\nadd_subdirectory(tools)\n\nfile(COPY ${CMAKE_CURRENT_BINARY_DIR}/braft/\n        DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/output/include/braft/\n        FILES_MATCHING \n        PATTERN \"*.h\"\n        PATTERN \"*.hpp\"\n        )\nfile(COPY ${CMAKE_CURRENT_SOURCE_DIR}/src/\n        DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/output/include/\n        FILES_MATCHING\n        PATTERN \"*.h\"\n        PATTERN \"*.hpp\"\n        )\ninstall(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/output/include/\n        DESTINATION include\n        FILES_MATCHING\n        PATTERN \"*.h\"\n        PATTERN \"*.hpp\"\n        )\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.935546875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.32421875,
          "content": "[![Build Status](https://travis-ci.org/baidu/braft.svg?branch=master)](https://travis-ci.org/baidu/braft)\n\n---\n\n# Overview\nAn industrial-grade C++ implementation of [RAFT consensus algorithm](https://raft.github.io/) and [replicated state machine](https://en.wikipedia.org/wiki/State_machine_replication) based on [brpc](https://github.com/brpc/brpc). braft is designed and implemented for scenarios demanding for high workload and low overhead of latency, with the consideration for easy-to-understand concepts so that engineers inside Baidu can build their own distributed systems individually and correctly.\n\nIt's widely used inside Baidu to build highly-available systems, such as:\n* Storage systems: Key-Value, Block, Object, File ...\n* SQL storages: HA MySQL cluster, distributed transactions, NewSQL systems ...\n* Meta services: Various master modules, Lock services ...\n\n# Getting Started\n\n* Build [brpc](https://github.com/brpc/brpc/blob/master/docs/cn/getting_started.md) which is the main dependency of braft.\n\n* Compile braft with cmake\n  \n  ```shell\n  $ mkdir bld && cd bld && cmake .. && make\n  ```\n\n* Play braft with [examples](./example).\n\n* Installing from vcpkg\n  \n  You can download and install `braft` using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n  ```sh\n  git clone https://github.com/Microsoft/vcpkg.git\n  cd vcpkg\n  ./bootstrap-vcpkg.sh\n  ./vcpkg integrate install\n  ./vcpkg install braft\n  ```\n  The `braft` port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull   request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n# Docs\n\n* Read [overview](./docs/cn/overview.md) to know what you can do with braft.\n* Read [benchmark](./docs/cn/benchmark.md) to have a quick view about performance of braft\n* [Build Service based on braft](./docs/cn/server.md)\n* [Access Service based on braft](./docs/cn/client.md)\n* [Cli tools](./docs/cn/cli.md)\n* [Replication Model](./docs/cn/replication.md)\n* Consensus protocol:\n  * [RAFT](./docs/cn/raft_protocol.md)\n  * [Paxos](./docs/cn/paxos_protocol.md)\n  * [ZAB](./docs/cn/zab_protocol.md)\n  * [QJM](./docs/cn/qjm.md)\n\n# Discussion\n\n* Add Weixin id ***zhengpf__87*** or ***xiongk_2049*** with a verification message '**braft**', then you will be invited into the discussion group. \n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 2.1962890625,
          "content": "workspace(name = \"com_github_brpc_braft\")\n\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\nhttp_archive(\n    name = \"com_google_googletest\",\n    strip_prefix = \"googletest-0fe96607d85cf3a25ac40da369db62bbee2939a5\",\n    url = \"https://github.com/google/googletest/archive/0fe96607d85cf3a25ac40da369db62bbee2939a5.tar.gz\",\n)\n\nbind(\n    name = \"gtest\",\n    actual = \"@com_google_googletest//:gtest\",\n)\n\nhttp_archive(\n    name = \"com_google_protobuf\",\n    strip_prefix = \"protobuf-3.6.1.3\",\n    sha256 = \"9510dd2afc29e7245e9e884336f848c8a6600a14ae726adb6befdb4f786f0be2\",\n    type = \"zip\",\n    url = \"https://github.com/protocolbuffers/protobuf/archive/v3.6.1.3.zip\",\n)\n\nhttp_archive(\n    name = \"com_github_gflags_gflags\",\n    strip_prefix = \"gflags-46f73f88b18aee341538c0dfc22b1710a6abedef\",\n    url = \"https://github.com/gflags/gflags/archive/46f73f88b18aee341538c0dfc22b1710a6abedef.tar.gz\",\n)\n\nbind(\n    name = \"gflags\",\n    actual = \"@com_github_gflags_gflags//:gflags\",\n)\n\nhttp_archive(\n    name = \"com_github_google_glog\",\n    build_file = \"//:glog.BUILD\",\n    strip_prefix = \"glog-a6a166db069520dbbd653c97c2e5b12e08a8bb26\",\n    url = \"https://github.com/google/glog/archive/a6a166db069520dbbd653c97c2e5b12e08a8bb26.tar.gz\"\n)\n\nbind(\n    name = \"glog\",\n    actual = \"@com_github_google_glog//:glog\",\n)\n\nhttp_archive(\n    name = \"com_github_google_leveldb\",\n    build_file = \"//:leveldb.BUILD\",\n    strip_prefix = \"leveldb-a53934a3ae1244679f812d998a4f16f2c7f309a6\",\n    url = \"https://github.com/google/leveldb/archive/a53934a3ae1244679f812d998a4f16f2c7f309a6.tar.gz\"\n)\n\nhttp_archive(\n    name = \"com_github_brpc_brpc\",\n    sha256 = \"58a06997ae07c1654979fb8356884481ab9803b60de04c1b341d986e2b62220d\",\n    strip_prefix = \"brpc-1.1.0\",\n    url = \"https://github.com/apache/incubator-brpc/archive/refs/tags/1.1.0.tar.gz\"\n)\n\nbind(\n    name = \"brpc\",\n    actual = \"@com_github_brpc_brpc//:brpc\",\n)\n\nbind(\n    name = \"butil\",\n    actual = \"@com_github_brpc_brpc//:butil\",\n)\n\nnew_local_repository(\n    name = \"openssl\",\n    path = \"/usr\",\n    build_file = \"//:openssl.BUILD\",\n)\n\nbind(\n    name = \"ssl\",\n    actual = \"@openssl//:ssl\"\n)\n\nnew_local_repository(\n    name = \"zlib\",\n    build_file = \"//:zlib.BUILD\",\n    path = \"/usr\",\n)\n"
        },
        {
          "name": "bazel",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "build_in_travis_ci.sh",
          "type": "blob",
          "size": 0.7265625,
          "content": "if [ -z \"$PURPOSE\" ]; then\n    echo \"PURPOSE must be set\"\n    exit 1\nfi\nif [ -z \"$CXX\" ]; then\n    echo \"CXX must be set\"\n    exit 1\nfi\nif [ -z \"$CC\" ]; then\n    echo \"CC must be set\"\n    exit 1\nfi\n\nruncmd(){\n    eval $@\n    [[ $? != 0 ]] && {\n        exit 1\n    }\n    return 0\n}\n\necho \"build combination: PURPOSE=$PURPOSE CXX=$CXX CC=$CC\"\n\nrm -rf bld && mkdir bld && cd bld\nif [ \"$PURPOSE\" = \"compile\" ]; then\n    if ! cmake ..; then\n        echo \"Fail to generate Makefile by cmake\"\n        exit 1\n    fi\n    make -j4\nelif [ \"$PURPOSE\" = \"unittest\" ]; then\n    if ! cmake -DBUILD_UNIT_TESTS=ON ..; then\n        echo \"Fail to generate Makefile by cmake\"\n        exit 1\n    fi\n    make -j4 && cd test && sh ../../test/run_tests.sh && cd ../\nfi\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "glog.BUILD",
          "type": "blob",
          "size": 3.9873046875,
          "content": "licenses([\"notice\"])\n\ncc_library(\n    name = \"glog\",\n    srcs = [\n        \"src/base/commandlineflags.h\",\n        \"src/base/googleinit.h\",\n        \"src/demangle.cc\",\n        \"src/logging.cc\",\n        \"src/raw_logging.cc\",\n        \"src/symbolize.cc\",\n        \"src/utilities.cc\",\n        \"src/vlog_is_on.cc\",\n    ],\n    hdrs = [\n        \"raw_logging_h\",\n        \"src/base/mutex.h\",\n        \"src/demangle.h\",\n        \"src/symbolize.h\",\n        \"src/utilities.h\",\n        \"src/glog/log_severity.h\",\n        \":config_h\",\n        \":logging_h\",\n        \":stl_logging_h\",\n        \":vlog_is_on_h\",\n    ],\n    copts = [\n        # Disable warnings that exists in glog\n        \"-Wno-sign-compare\",\n        \"-Wno-unused-local-typedefs\",\n        # Inject google namespace as \"google\"\n        \"-D_START_GOOGLE_NAMESPACE_='namespace google {'\",\n        \"-D_END_GOOGLE_NAMESPACE_='}'\",\n        \"-DGOOGLE_NAMESPACE='google'\",\n        # Allows src/base/mutex.h to include pthread.h.\n        \"-DHAVE_PTHREAD\",\n        # Allows src/logging.cc to determine the host name.\n        \"-DHAVE_SYS_UTSNAME_H\",\n        # System header files enabler for src/utilities.cc\n        # Enable system calls from syscall.h\n        \"-DHAVE_SYS_SYSCALL_H\",\n        # Enable system calls from sys/time.h\n        \"-DHAVE_SYS_TIME_H\",\n        \"-DHAVE_STDINT_H\",\n        \"-DHAVE_STRING_H\",\n        # For logging.cc\n        \"-DHAVE_PREAD\",\n        \"-DHAVE_FCNTL\",\n        \"-DHAVE_SYS_TYPES_H\",\n        # Allows syslog support\n        \"-DHAVE_SYSLOG_H\",\n        # GFlags\n        \"-isystem $(GENDIR)/external/com_github_gflags_gflags/\",\n        \"-DHAVE_LIB_GFLAGS\",\n        # Necessary for creating soft links of log files\n        \"-DHAVE_UNISTD_H\",\n    ],\n    includes = [\n        \".\",\n        \"src\",\n    ],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \"//external:gflags\",\n    ],\n)\n\n# Below are the generation rules that generates the necessary header\n# files for glog. Originally they are generated by CMAKE\n# configure_file() command, which replaces certain template\n# placeholders in the .in files with provided values.\n\n# gen_sh is a bash script that provides the values for generated\n# header files. Under the hood it is just a wrapper over sed.\ngenrule(\n    name = \"gen_sh\",\n    outs = [\n        \"gen.sh\",\n    ],\n    cmd = \"\"\"\ncat > $@ <<\"EOF\"\n#! /bin/sh\nsed -e 's/@ac_cv_have_unistd_h@/1/g' \\\n    -e 's/@ac_cv_have_stdint_h@/1/g' \\\n    -e 's/@ac_cv_have_systypes_h@/1/g' \\\n    -e 's/@ac_cv_have_libgflags_h@/1/g' \\\n    -e 's/@ac_cv_have_uint16_t@/1/g' \\\n    -e 's/@ac_cv_have___builtin_expect@/1/g' \\\n    -e 's/@ac_cv_have_.*@/0/g' \\\n    -e 's/@ac_google_start_namespace@/namespace google {/g' \\\n    -e 's/@ac_google_end_namespace@/}/g' \\\n    -e 's/@ac_google_namespace@/google/g' \\\n    -e 's/@ac_cv___attribute___noinline@/__attribute__((noinline))/g' \\\n    -e 's/@ac_cv___attribute___noreturn@/__attribute__((noreturn))/g' \\\n    -e 's/@ac_cv___attribute___printf_4_5@/__attribute__((__format__ (__printf__, 4, 5)))/g'\nEOF\"\"\",\n)\n\ngenrule(\n    name = \"config_h\",\n    srcs = [\n        \"src/config.h.cmake.in\",\n    ],\n    outs = [\n        \"config.h\",\n    ],\n    cmd = \"awk '{ gsub(/^#cmakedefine/, \\\"//cmakedefine\\\"); print; }' $(<) > $(@)\",\n)\n\ngenrule(\n    name = \"logging_h\",\n    srcs = [\n        \"src/glog/logging.h.in\",\n    ],\n    outs = [\n        \"glog/logging.h\",\n    ],\n    cmd = \"$(location :gen_sh) < $(<) > $(@)\",\n    tools = [\":gen_sh\"],\n)\n\ngenrule(\n    name = \"raw_logging_h\",\n    srcs = [\n        \"src/glog/raw_logging.h.in\",\n    ],\n    outs = [\n        \"glog/raw_logging.h\",\n    ],\n    cmd = \"$(location :gen_sh) < $(<) > $(@)\",\n    tools = [\":gen_sh\"],\n)\n\ngenrule(\n    name = \"stl_logging_h\",\n    srcs = [\n        \"src/glog/stl_logging.h.in\",\n    ],\n    outs = [\n        \"glog/stl_logging.h\",\n    ],\n    cmd = \"$(location :gen_sh) < $(<) > $(@)\",\n    tools = [\":gen_sh\"],\n)\n\ngenrule(\n    name = \"vlog_is_on_h\",\n    srcs = [\n        \"src/glog/vlog_is_on.h.in\",\n    ],\n    outs = [\n        \"glog/vlog_is_on.h\",\n    ],\n    cmd = \"$(location :gen_sh) < $(<) > $(@)\",\n    tools = [\":gen_sh\"],\n)\n"
        },
        {
          "name": "jepsen",
          "type": "tree",
          "content": null
        },
        {
          "name": "leveldb.BUILD",
          "type": "blob",
          "size": 1.927734375,
          "content": "package(default_visibility = [\"//visibility:public\"])\n\n\nconfig_setting(\n    name = \"darwin\",\n    values = {\"cpu\": \"darwin\"},\n    visibility = [\"//visibility:public\"],\n)\n\nSOURCES = [\"db/builder.cc\",\n         \"db/c.cc\",\n         \"db/dbformat.cc\",\n         \"db/db_impl.cc\",\n         \"db/db_iter.cc\",\n         \"db/dumpfile.cc\",\n         \"db/filename.cc\",\n         \"db/log_reader.cc\",\n         \"db/log_writer.cc\",\n         \"db/memtable.cc\",\n         \"db/repair.cc\",\n         \"db/table_cache.cc\",\n         \"db/version_edit.cc\",\n         \"db/version_set.cc\",\n         \"db/write_batch.cc\",\n         \"table/block_builder.cc\",\n         \"table/block.cc\",\n         \"table/filter_block.cc\",\n         \"table/format.cc\",\n         \"table/iterator.cc\",\n         \"table/merger.cc\",\n         \"table/table_builder.cc\",\n         \"table/table.cc\",\n         \"table/two_level_iterator.cc\",\n         \"util/arena.cc\",\n         \"util/bloom.cc\",\n         \"util/cache.cc\",\n         \"util/coding.cc\",\n         \"util/comparator.cc\",\n         \"util/crc32c.cc\",\n         \"util/env.cc\",\n         \"util/env_posix.cc\",\n         \"util/filter_policy.cc\",\n         \"util/hash.cc\",\n         \"util/histogram.cc\",\n         \"util/logging.cc\",\n         \"util/options.cc\",\n         \"util/status.cc\",\n         \"port/port_posix.cc\",\n         \"port/port_posix_sse.cc\",\n         \"helpers/memenv/memenv.cc\",\n    ]\n\ncc_library(\n    name = \"leveldb\",\n    srcs = SOURCES,\n    hdrs = glob([ \n        \"helpers/memenv/*.h\",\n        \"util/*.h\",\n        \"port/*.h\",\n        \"port/win/*.h\",\n        \"table/*.h\",\n        \"db/*.h\",\n        \"include/leveldb/*.h\"\n    ],\n    exclude = [\n            \"**/*test.*\",\n    ]),\n    includes = [\n        \"include/\",\n    ],\n    copts = [\n        \"-fno-builtin-memcmp\",\n        \"-DLEVELDB_PLATFORM_POSIX=1\",\n        \"-DLEVELDB_ATOMIC_PRESENT\",\n    ],\n    defines = [\n        \"LEVELDB_PLATFORM_POSIX\",\n    ] + select({\n        \":darwin\": [\"OS_MACOSX\"],\n        \"//conditions:default\": [],\n    }),\n)"
        },
        {
          "name": "openssl.BUILD",
          "type": "blob",
          "size": 0.80859375,
          "content": "package(\n    default_visibility=[\"//visibility:public\"]\n)\n\nconfig_setting(\n    name = \"macos\",\n    values = {\n        \"cpu\": \"darwin\",\n    },\n    visibility = [\"//visibility:private\"],\n)\n\ncc_library(\n    name = \"crypto\",\n    srcs = select({\n        \":macos\": [\"lib/libcrypto.dylib\"],\n        \"//conditions:default\": []\n    }),\n    linkopts = select({\n        \":macos\" : [],\n        \"//conditions:default\": [\"-lcrypto\"],\n    }),\n)\n\ncc_library(\n    name = \"ssl\",\n    hdrs = select({\n        \":macos\": glob([\"include/openssl/*.h\"]),\n        \"//conditions:default\": []\n    }),\n    srcs = select ({\n        \":macos\": [\"lib/libssl.dylib\"],\n        \"//conditions:default\": []\n    }),\n    includes = [\"include\"],\n    linkopts = select({\n        \":macos\" : [],\n        \"//conditions:default\": [\"-lssl\"],\n    }),\n    deps = [\":crypto\"]\n)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "zlib.BUILD",
          "type": "blob",
          "size": 0.11328125,
          "content": "package(\n    default_visibility=[\"//visibility:public\"]\n)\n\ncc_library(\n    name = \"zlib\",\n    linkopts = [\"-lz\"],\n)\n"
        }
      ]
    }
  ]
}