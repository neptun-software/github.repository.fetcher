{
  "metadata": {
    "timestamp": 1736565293548,
    "page": 110,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spaceandtimelabs/blitzar",
      "stars": 4241,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 2.9091796875,
          "content": "build --experimental_cc_implementation_deps\n\nbuild --copt -fPIC\nbuild --cxxopt -std=c++2b\nbuild --linkopt=-lm\n\nbuild --flag_alias=enable_cuda=@rules_cuda//cuda:enable\nbuild --flag_alias=cuda_archs=@rules_cuda//cuda:archs\nbuild --flag_alias=cuda_compiler=@rules_cuda//cuda:compiler\nbuild --flag_alias=cuda_copts=@rules_cuda//cuda:copts\nbuild --flag_alias=cuda_host_copts=@rules_cuda//cuda:host_copts\nbuild --flag_alias=cuda_runtime=@rules_cuda//cuda:runtime\n\nbuild --@rules_cuda//cuda:archs=compute_70:compute_70,sm_70\nbuild --@rules_cuda//cuda:runtime=@local_cuda//:cuda_runtime_static\n\nbuild --enable_cuda=True\n\n# Use --config=clang to build with clang instead of gcc and nvcc.\nbuild:clang --repo_env=CC=clang\nbuild:clang --@rules_cuda//cuda:compiler=clang\nbuild:clang --action_env CC=/usr/bin/clang-18\nbuild:clang --action_env CXX=/usr/bin/clang++-18\nbuild --@rules_cuda//cuda:copts=-std=c++2b\nbuild --@rules_cuda//cuda:host_copts=-std=c++2b\nbuild --config=clang\n\n\n# Add options from\n#   https://stackoverflow.com/a/57733619\nbuild:asan --strip=never\nbuild:asan --copt -DADDRESS_SANITIZER\nbuild:asan --copt -fno-omit-frame-pointer\nbuild:asan --copt -fsanitize=address\n\nbuild:asan --@rules_cuda//cuda:host_copts=-DADDRESS_SANITIZER\nbuild:asan --@rules_cuda//cuda:host_copts=-D_LIBCPP_HAS_NO_ASAN\nbuild:asan --@rules_cuda//cuda:host_copts=-fno-omit-frame-pointer\nbuild:asan --@rules_cuda//cuda:host_copts=-fsanitize=address\nbuild:asan --@rules_cuda//cuda:copts=-DADDRESS_SANITIZER\nbuild:asan --@rules_cuda//cuda:copts=-D_LIBCPP_HAS_NO_ASAN\nbuild:asan --@rules_cuda//cuda:copts=-fno-omit-frame-pointer\nbuild:asan --@rules_cuda//cuda:copts=-fsanitize=address\n\nbuild:asan --linkopt -fsanitize=address\nbuild:asan --linkopt -fuse-ld=lld\nbuild:asan --linkopt -rtlib=compiler-rt\n\n# work around for https://github.com/google/sanitizers/issues/856\nbuild:asan --linkopt -no-pie\n\n# For asan to work with cuda, we need to add this option\n# See https://github.com/google/sanitizers/issues/629#issuecomment-161357276\nrun:asan --action_env=ASAN_OPTIONS=protect_shadow_gap=0:detect_container_overflow=0\ntest:asan --action_env=ASAN_OPTIONS=protect_shadow_gap=0:detect_container_overflow=0\n\n# Hack to add suppressions for libcuda\n# See https://github.com/bazelbuild/bazel/issues/3216\n#     https://stackoverflow.com/a/74297943\nbuild:asan --workspace_status_command=./ci/lsan_hack.sh\nrun:asan --action_env=LSAN_OPTIONS=suppressions=/tmp/sxt-blitzar-lsan.supp\ntest:asan --action_env=LSAN_OPTIONS=suppressions=/tmp/sxt-blitzar-lsan.supp\n\n# For machines with many cpu cores available, we could not compile\n# the code. Many times (not always) the following error was launched:\n# `ptxas /tmp/tmpfxt_00000017_00000000-0, line 1; fatal : Missing .version...`\n# See https://github.com/bazelbuild/bazel/issues/14410#issuecomment-997843606\n# for more information.\n# To fix the problem, we added the following line:\nbuild --sandbox_add_mount_pair=.:/tmp\nbuild --spawn_strategy local\n\ntest --test_output=errors\n"
        },
        {
          "name": ".bazelversion",
          "type": "blob",
          "size": 0.005859375,
          "content": "7.1.2\n"
        },
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.1748046875,
          "content": "---\r\nLanguage:        Cpp\r\nAccessModifierOffset: -2\r\nColumnLimit: 100\r\nDerivePointerAlignment: false\r\nPointerAlignment: Left\r\nSortIncludes: true\r\nFixNamespaceComments: true\r\n...\r\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6435546875,
          "content": "# Ignore all bazel-* symlinks. There is no full list since this can change\n# based on the name of the directory bazel is cloned into.bazel-*\n/bazel-*\n\n# Ignore benchmark results\n.results*/\n\n# Ignore semantic-release files\n.env\n.npmrc\nnode_modules/\n\n# Ignore artifact files\n*.so\n*.zip\n*.tar\ndist/\n\n# Ignore vscode files\n.vscode/\n\n# Ignore rust files\nrust/blitzar-sys/target\nrust/blitzar-sys/Cargo.lock\nrust/blitzar-sys/*.so*\nrust/blitzar-sys/src/bindings.rs\n\n# Ignore benchmark files\n*.pdf\n*.tar.gz\n*.dot\ncallgrind.out.*\n.results/\n.proof_results/\n*.data\nvgcore.*\n\n# Ignore python files\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 19.33203125,
          "content": "# Contributing to blitzar [![semantic-release: conventional-commits](https://img.shields.io/badge/semantic--release-conventional--commits-blueviolet)](https://github.com/semantic-release/semantic-release)\n\nThe following guideline is heavily based on the [Angular Project](https://github.com/angular/angular/blob/main/CONTRIBUTING.md) guideline. As a contributor, here are the guidelines we would like you to follow:\n\n - [Notice](#notice)\n - [Style Guidelines](#style)\n - [Submission Guidelines](#submit)\n   - [Submitting a Pull Request (PR)](#submit-pr)\n   - [Addressing review feedback](#address-review)\n   - [Updating the commit message](#updating-commit-message)\n   - [After your pull request is merged](#after-pr-merged)\n - [Coding Rules](#rules)\n - [Commit Message Guidelines](#commit-guidelines)\n   - [Commit Message Format](#commit)\n   - [Commit Message Header](#commit-message-header)\n     - [Type](#type)\n     - [Summary](#summary)\n   - [Commit Message Body](#commit-message-body)\n   - [Commit Message Footer](#commit-message-footer)\n   - [Revert Commits](#revert)\n   - [Commit Examples](#commit-examples)\n   - [Automatic Semantic Release](#semantic-release)\n\n## <a name=\"notice\"></a> Notice\n\nWhen you contribute code, you affirm that the contribution is your original work and that you license the work to the project under the project's open source license. Whether or not you state this explicitly, by submitting any copyrighted material via pull request, email, or other means you agree to license the material under the project's open source license and warrant that you have the legal authority to do so.\n\n## <a name=\"style\"></a> Style Guidelines\n\nSee [style guide](STYLE.md)\n\n## <a name=\"submit\"></a> Submission Guidelines\n\nThis project is built using the [Bazel build system](https://bazel.build/start):\n\n```shell\nbazel build //...\n```\n\nThe general flow you can follow when implementing a new feature/bugfix/docs/test is:\n\n1. Create a GitHub issue to keep track of the task you are implementing.\n \nThe most relevant fields in the issue are: `assignees`, `projects`, `milestone`, `development`, and `description`. Those fields are not mandatory, but they may help in the future to easily fetch information related to a specific feature, such as the time it took from implementation until completeness, and which PRs are associated with which feature (many PRs can be related to a single feature/issue).\n\n2. From the created issue panel, use the `main` branch to generate a new branch that will be tied with the issue. In this case, when a Pull Request tied with the branch is merged, the issue will be automatically closed.\n\n3. As a convention, you can append the related problem you are trying to solve to the branch name. \n\n```\nfeat/compute-commitments-PROOF-<issue key number>\n```\n\n```\nfix/compute-commitments-PROOF-<issue key number>\n```\n\n```\ndocs/compute-commitments-PROOF-<issue key number>\n```\n\n```\nci/set-up-environment-PROOF-<issue key number>\n```\n\n4. Whenever you are done implementing the modifications in your branch, make a Pull Request to merge your changes into the main branch. Try to always assign someone to review your Pull Request. Since we are using an automatic release process to version our code, you should follow a strict pattern in your commit messages (below for more descriptions). It is advised that you name your Pull Request according to our semantic release rules, given that the commit message is automatically the same as the Pull Request title. For instance, name the PR as \"feat: add hadamard product\" and do not name the PR as \"Adding hadamard product\". Always test your code locally before any pull request is submitted.\n\n5. In the case of many commit messages to your branch, force the Pull Request to merge as a squashed merge.\n\n6. After the merge is done, delete your branch from the repository and check that the related issue was indeed closed.\n\n### <a name=\"submit-pr\"></a> Submitting a Pull Request (PR)\n\nBefore you submit your Pull Request (PR) consider the following guidelines:\n\n1. Make your changes in a new git branch:\n\n   In case you haven't generated a new branch yet, use the following command to create a new branch from the main:\n     ```shell\n     git checkout -b my-feature-branch main\n     ```\n\n  Otherwise, only checkout your branch:\n\n    ```shell\n     git checkout my-feature-branch\n     ```\n\n2. Create your patch, **including appropriate test cases**.\n\n3. Follow our [Coding Rules](#rules).\n\n4. Run the entire test suite to ensure tests are passing.\n\n    ```shell\n    bazel test //...\n    ```\n\n5. When applicable, implement benchmarks to assess the code performance:\n\n    ```shell\n    bazel run -c opt //benchmark/multi_exp1:benchmark -- cpu 100 10000 0\n    ```\n\n    ```shell\n    bazel run -c opt //benchmark/multi_exp1:benchmark -- gpu 100 10000 0\n    ```\n\n    For automatic benchmark and spreadsheet generation, check these readme files: [multi-commitment-readme](benchmark/multi_commitment/README.md) and [multiprod1-readme](benchmark/multiprod1/README.md).\n\n6. Commit your changes using a descriptive commit message that follows our [commit message conventions](#commit).\n   Adherence to these conventions is necessary because release notes are automatically generated from these messages.\n\n     ```shell\n     git add <modified files>\n     git commit\n     ```\n\n    Note: Only add relevant files. Avoid adding blob files, as they frequently waste storage resources. \n\n7.  Push your branch to GitHub:\n\n    ```shell\n    git push origin my-feature-branch\n    ```\n\n8.  In GitHub, send a pull request to `blitzar:main`.\n\n### <a name=\"address-review\"></a> Addressing review feedback\n\nIf we ask for changes via code reviews then:\n\n1. Make the required updates to the code.\n\n2. Re-run the entire test suite to ensure tests are still passing.\n\n    ```shell\n    bazel test //...\n    ```\n\n3. Create a fixup commit and push to your GitHub repository (this will update your Pull Request):\n\n    ```shell\n    # Create a fixup commit to fix up the last commit on the branch:\n    git commit --all --fixup HEAD\n    git push\n    ```\n\n    or\n\n    ```shell\n    # Create a fixup commit to fix up commit with SHA <COMMIT_SHA>:\n    git commit --fixup <SHA>\n    ```\n\n    For more info on working with fixup commits see [here](https://github.com/angular/angular/blob/main/docs/FIXUP_COMMITS.md).\n\n### <a name=\"updating-commit-message\"></a> Updating the commit message\n\nA reviewer might often suggest changes to a commit message (for example, to add more context for a change or adhere to our [commit message guidelines](#commit)).\nIn order to update the commit message of the last commit on your branch:\n\n1. Check out your branch:\n\n    ```shell\n    git checkout my-fix-branch\n    ```\n\n2. Amend the last commit and modify the commit message:\n\n    ```shell\n    git commit --amend\n    ```\n\n3. Push to your GitHub repository:\n\n    ```shell\n    git push --force-with-lease\n    ```\n\nNOTE: If you need to update the commit message of an earlier commit, you can use `git rebase` in interactive mode. See the [git docs](https://git-scm.com/docs/git-rebase#_interactive_mode) for more details.\n\n\n### <a name=\"after-pr-merged\"></a> After your pull request is merged\n\nAfter your pull request is merged, you can safely delete your branch and pull the changes from the main (upstream) repository:\n\n* Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:\n\n    ```shell\n    git push origin --delete my-fix-branch\n    ```\n\n* Check out the main branch:\n\n    ```shell\n    git checkout main -f\n    ```\n\n* Delete the local branch:\n\n    ```shell\n    git branch -D my-fix-branch\n    ```\n\n* Update your local `main` with the latest upstream version:\n\n    ```shell\n    git pull --ff upstream main\n    ```\n\n## <a name=\"rules\"></a> Coding Rules\nTo ensure consistency throughout the source code, keep these rules in mind as you are working:\n\n* All features or bug fixes **must be tested** by one or more specs (unit-tests). \n* All public API methods **must be documented**. We follow the rust documentation style (see [here](https://doc.rust-lang.org/cargo/commands/cargo-doc.html)).\n\n## <a name=\"commit-guidelines\"></a> Commit Message Guidelines\n\n### <a name=\"semantic-version\"></a> Semantic Versioning\n\nTo version our code, we follow an **automatic semantic versioning** given by the [Semantic Versioning](https://semver.org/) scheme, which establishes that the version is given by **\"MAJOR.MINOR.PATCH\"** number, which is updated as:\n\n1. Increase the **MAJOR** version when you make incompatible API changes.\n2. Increase the **MINOR** version when you add functionality in a backwards compatible manner.\n3. Increase the **PATCH** version when you make backwards compatible bug fixes.\n\nFor instance: \"1.1.3\" is a program that is in the first major and minor version and the third patch version. When an incompatible change is done to the public API, then this version is updated to \"2.0.0\". If a backward compatible feature is added later, the version is updated to \"2.1.0\".\n\n### <a name=\"commit\"></a> Commit Message Format\n\n*This specification is inspired by and supersedes the\n[Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/).*\n\nWe have very precise rules over how our Git commit messages must be formatted.\nThis format leads to **easier to read commit history** and also smooths our **automatic semantic versioning**.\n\nEach commit message consists of a **header**, a **body**, and a **footer**.\n\n```\n<header>\n<BLANK LINE>\n<optional body>\n<BLANK LINE>\n<optional footer>\n```\n\nThe `header` is mandatory and must conform to the [Commit Message Header](#commit-header) format.\n\nThe `body` is optional for all commits.\nWhen the body is present it must conform to the [Commit Message Body](#commit-body) format.\n\nThe `footer` is optional. The [Commit Message Footer](#commit-footer) format describes what the footer is used for and the structure it must have.\n\n\n#### <a name=\"commit-header\"></a>Commit Message Header\n\n```\n<type>: <short summary> ( PROOF-<jira issue key number> )\n  │           │                         |\n  |           |                         └─⫸ The JIRA issue key number associated with the commit message.\n  |           |                           \n  |           |\n  │           └─⫸ Summary in present tense. Not capitalized. No period at the end.\n  │\n  │\n  └─⫸ Commit Type: feat|feat!|fix|fix!|perf|perf!|refactor|refactor!|test|bench|build|ci|docs|style|chore\n```\n\nBoth `<type>` and `<summary>` fields are mandatory. `Type` must always be followed by a `:`, a space, then the `summary`. Optionally, you can add a `!` before the `:` so that the release analyzer can be aware of a breaking change, thus allowing the bump of the major version.\n\n#### <a name=\"type\"></a> Type\n\nMust be one of the following:\n\n* **feat**: a commit of the type feat introduces a new feature to the codebase (this correlates with MINOR in Semantic Versioning).\n* **feat!**: a commit of the type feat introduces a new feature to the codebase and introduces breaking changes (this correlates with MAJOR in Semantic Versioning).\n* **fix**: a commit of the type fix patches a bug in your codebase (this correlates with PATCH in Semantic Versioning).\n* **fix!**: a commit of the type fix a bug in your codebase and introduces breaking changes (this correlates with MAJOR in Semantic Versioning).\n* **perf**: A code change that improves performance (this correlates with a PATCH in Semantic Versioning).\n* **perf!**: A code change that improves performance and introduces breaking changes (this correlates with MAJOR in Semantic Versioning).\n* **refactor**: A code change that neither fixes a bug nor adds a feature (this correlates with a PATCH in Semantic Versioning).\n* **refactor!**: A code change that neither fixes a bug nor adds a feature and introduces breaking changes (this correlates with MAJOR in Semantic Versioning).\n* **test**: Adding missing tests or correcting existing tests\n* **bench**: Adding missing benchmarks or correcting existing benchmarks (this does not correlate with any semantic versioning update).\n* **build**: Changes that affect the build system or external dependencies (this correlates with a PATCH in Semantic Versioning).\n* **ci**: Changes to our CI configuration files and scripts.\n* **docs**: Documentation only changes (this correlates with a PATCH in Semantic Versioning).\n* **style**: Feature and updates related to styling (this does not correlate with any semantic versioning update).\n* **chore**: Regular code maintenance (this does not correlate with any semantic versioning update).\n\nTry to not fill your commit with many unrelated changes to your code, as it makes the process of review more difficult. For instance, if you add a feature and tests to validate your feature, try to commit your code as two messages, one for the feature implementation (\"feat: add feature x\") and another for the test addition (\"test: add tests to validate feature x\").\n\n#### <a name=\"summary\"></a>Summary\n\nUse the summary field to provide a succinct description of the change (less than 80 characters):\n\n* use the imperative, present tense: \"change\", not \"changing\", nor \"changed\", and nor \"changes\"\n* don't capitalize the first letter\n* no dot (.) at the end\n\n### <a name=\"commit-body\"></a>Commit Message Body\n\nJust as in the summary, use the imperative, present tense: \"fix\", not \"fixed\", nor \"fixes\", neither \"fixing\".\n\nExplain the motivation for the change in the commit message body. This commit message should explain _why_ you are making the change.\nYou can include a comparison of the previous behavior with the new behavior in order to illustrate the impact of the change.\n\n### <a name=\"commit-footer\"></a>Commit Message Footer\n\nThe footer can contain information about breaking changes and deprecations and is also the place to reference GitHub issues and other PRs that this commit closes or is related to. For example:\n\n```\n<feat | perf | fix>: <change summary>\n<BLANK LINE>\n<breaking change description + migration instructions>\n<BLANK LINE>\nBREAKING CHANGE: Fixes #<issue number>\n```\n\nBreaking Change section must always be at the message footer.\n\n### <a name=\"revert\"></a>Revert commits\n\nIf the commit reverts a previous commit, it should begin with `revert: `, followed by the header of the reverted commit.\n\nThe content of the commit message body should contain:\n\n- information about the SHA of the commit being reverted in the following format: `This reverts commit <SHA>`,\n- a clear description of the reason for reverting the commit message.\n\n## <a name=\"commit-examples\"></a>Commit Examples\n\n### Commit message with ! to draw attention to breaking change\n\n```\nfeat!: send an email to the customer when a product is shipped\n```\n\n### Commit message with both ! and BREAKING CHANGE footer\n\n```\nchore!: drop support for Node 6\n\nBREAKING CHANGE: use JavaScript features not available in Node 6.\n```\n\n### Commit message with description and breaking change in the footer\n\n```\nfeat: allow provided config object to extend other configs\n\nBREAKING CHANGE: `extends` key in config file is now used for extending other config files\n```\n\n### Commit message with no body\n\n```\ndocs: correct spelling of CHANGELOG\n```\n\n### Commit message for a fix using an (optional) issue number.\n\n```\nfix: minor typos in code\n\nsee the issue for details on the typos fixed\n\nfixes issue #12\n```\n\n## <a name=\"semantic-release\"></a>Automatic Semantic - Release Process\n\nWe are using a node semantic-release tool to automatically trigger our release process. As shown below, this tool inspects the commitment message to decide if the release should be triggered and which type of release should be triggered:\n\n| Type     | Message                                                                                                                                                                                       | Release Type                                                                                                  |\n| -------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| ci       | ci:                                                                                                                                                                                           | No Release                                                                                                    |\n| docs     | docs:                                                                                                                                                                                         | No Release                                                                                                    |\n| refactor | refactor:                                                                                                                                                                                     | No Release                                                                                                    |\n| test     | test: add new unit tests to gpu commitment module                                                                                                                                             | No Release                                                                                                    |\n| build    | build:                                                                                                                                                                                        | Fix Release (Patch)                                                                                                    |\n| perf      | perf: speedup gpu commitment by 3x                                                                                                                                    | Fix Release (Patch)                                                                                           |\n| fix      | fix: stop graphite breaking when too much pressure applied                                                                                                                                    | Fix Release (Patch)                                                                                           |\n| feat     | feat: graphiteWidth' option                                                                                                                                                                   | Feature Release (Minor)                                                                                       |\n| feat     | feat: add graphiteWidth option<br><br><body> The default graphite width of 10mm is always used for performance reasons.<br><br>BREAKING CHANGE: The graphiteWidth option has been added. | Breaking Release (Major)<br><br>(Note that the BREAKING CHANGE:<br>token must be in the footer of the commit) |\n| perf     | perf: remove graphiteWidth option<br><br><body> The default graphite width of 10mm is always used for performance reasons.<br><br>BREAKING CHANGE: The graphiteWidth option has been removed. | Breaking Release (Major)<br><br>(Note that the BREAKING CHANGE:<br>token must be in the footer of the commit) |\n\nCheck the [Semantic-Release](https://github.com/semantic-release/semantic-release) link for more info. Ps: to update the above rules, check the [package.json](package.json) file, in the `release -> plugins -> @semantic-release/commit-analyzer -> releaseRules` section.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.517578125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   Copyright 2023 Space and Time Labs, Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 0.3896484375,
          "content": "###############################################################################\n# Bazel now uses Bzlmod by default to manage external dependencies.\n# Please consider migrating your external dependencies from WORKSPACE to MODULE.bazel.\n#\n# For more details, please check https://github.com/bazelbuild/bazel/issues/18958\n###############################################################################\n"
        },
        {
          "name": "MODULE.bazel.lock",
          "type": "blob",
          "size": 141.71484375,
          "content": "{\n  \"lockFileVersion\": 6,\n  \"moduleFileHash\": \"0e3e315145ac7ee7a4e0ac825e1c5e03c068ec1254dd42c3caaecb27e921dc4d\",\n  \"flags\": {\n    \"cmdRegistries\": [\n      \"https://bcr.bazel.build/\"\n    ],\n    \"cmdModuleOverrides\": {},\n    \"allowedYankedVersions\": [],\n    \"envVarAllowedYankedVersions\": \"\",\n    \"ignoreDevDependency\": false,\n    \"directDependenciesMode\": \"WARNING\",\n    \"compatibilityMode\": \"ERROR\"\n  },\n  \"localOverrideHashes\": {\n    \"bazel_tools\": \"1ae69322ac3823527337acf02016e8ee95813d8d356f47060255b8956fa642f0\"\n  },\n  \"moduleDepGraph\": {\n    \"<root>\": {\n      \"name\": \"\",\n      \"version\": \"\",\n      \"key\": \"<root>\",\n      \"repoName\": \"\",\n      \"executionPlatformsToRegister\": [],\n      \"toolchainsToRegister\": [],\n      \"extensionUsages\": [],\n      \"deps\": {\n        \"bazel_tools\": \"bazel_tools@_\",\n        \"local_config_platform\": \"local_config_platform@_\"\n      }\n    },\n    \"bazel_tools@_\": {\n      \"name\": \"bazel_tools\",\n      \"version\": \"\",\n      \"key\": \"bazel_tools@_\",\n      \"repoName\": \"bazel_tools\",\n      \"executionPlatformsToRegister\": [],\n      \"toolchainsToRegister\": [\n        \"@local_config_cc_toolchains//:all\",\n        \"@local_config_sh//:local_sh_toolchain\"\n      ],\n      \"extensionUsages\": [\n        {\n          \"extensionBzlFile\": \"@bazel_tools//tools/cpp:cc_configure.bzl\",\n          \"extensionName\": \"cc_configure_extension\",\n          \"usingModule\": \"bazel_tools@_\",\n          \"location\": {\n            \"file\": \"@@bazel_tools//:MODULE.bazel\",\n            \"line\": 18,\n            \"column\": 29\n          },\n          \"imports\": {\n            \"local_config_cc\": \"local_config_cc\",\n            \"local_config_cc_toolchains\": \"local_config_cc_toolchains\"\n          },\n          \"devImports\": [],\n          \"tags\": [],\n          \"hasDevUseExtension\": false,\n          \"hasNonDevUseExtension\": true\n        },\n        {\n          \"extensionBzlFile\": \"@bazel_tools//tools/osx:xcode_configure.bzl\",\n          \"extensionName\": \"xcode_configure_extension\",\n          \"usingModule\": \"bazel_tools@_\",\n          \"location\": {\n            \"file\": \"@@bazel_tools//:MODULE.bazel\",\n            \"line\": 22,\n            \"column\": 32\n          },\n          \"imports\": {\n            \"local_config_xcode\": \"local_config_xcode\"\n          },\n          \"devImports\": [],\n          \"tags\": [],\n          \"hasDevUseExtension\": false,\n          \"hasNonDevUseExtension\": true\n        },\n        {\n          \"extensionBzlFile\": \"@rules_java//java:extensions.bzl\",\n          \"extensionName\": \"toolchains\",\n          \"usingModule\": \"bazel_tools@_\",\n          \"location\": {\n            \"file\": \"@@bazel_tools//:MODULE.bazel\",\n            \"line\": 25,\n            \"column\": 32\n          },\n          \"imports\": {\n            \"local_jdk\": \"local_jdk\",\n            \"remote_java_tools\": \"remote_java_tools\",\n            \"remote_java_tools_linux\": \"remote_java_tools_linux\",\n            \"remote_java_tools_windows\": \"remote_java_tools_windows\",\n            \"remote_java_tools_darwin_x86_64\": \"remote_java_tools_darwin_x86_64\",\n            \"remote_java_tools_darwin_arm64\": \"remote_java_tools_darwin_arm64\"\n          },\n          \"devImports\": [],\n          \"tags\": [],\n          \"hasDevUseExtension\": false,\n          \"hasNonDevUseExtension\": true\n        },\n        {\n          \"extensionBzlFile\": \"@bazel_tools//tools/sh:sh_configure.bzl\",\n          \"extensionName\": \"sh_configure_extension\",\n          \"usingModule\": \"bazel_tools@_\",\n          \"location\": {\n            \"file\": \"@@bazel_tools//:MODULE.bazel\",\n            \"line\": 36,\n            \"column\": 39\n          },\n          \"imports\": {\n            \"local_config_sh\": \"local_config_sh\"\n          },\n          \"devImports\": [],\n          \"tags\": [],\n          \"hasDevUseExtension\": false,\n          \"hasNonDevUseExtension\": true\n        },\n        {\n          \"extensionBzlFile\": \"@bazel_tools//tools/test:extensions.bzl\",\n          \"extensionName\": \"remote_coverage_tools_extension\",\n          \"usingModule\": \"bazel_tools@_\",\n          \"location\": {\n            \"file\": \"@@bazel_tools//:MODULE.bazel\",\n            \"line\": 40,\n            \"column\": 48\n          },\n          \"imports\": {\n            \"remote_coverage_tools\": \"remote_coverage_tools\"\n          },\n          \"devImports\": [],\n          \"tags\": [],\n          \"hasDevUseExtension\": false,\n          \"hasNonDevUseExtension\": true\n        },\n        {\n          \"extensionBzlFile\": \"@bazel_tools//tools/android:android_extensions.bzl\",\n          \"extensionName\": \"remote_android_tools_extensions\",\n          \"usingModule\": \"bazel_tools@_\",\n          \"location\": {\n            \"file\": \"@@bazel_tools//:MODULE.bazel\",\n            \"line\": 43,\n            \"column\": 42\n          },\n          \"imports\": {\n            \"android_gmaven_r8\": \"android_gmaven_r8\",\n            \"android_tools\": \"android_tools\"\n          },\n          \"devImports\": [],\n          \"tags\": [],\n          \"hasDevUseExtension\": false,\n          \"hasNonDevUseExtension\": true\n        },\n        {\n          \"extensionBzlFile\": \"@buildozer//:buildozer_binary.bzl\",\n          \"extensionName\": \"buildozer_binary\",\n          \"usingModule\": \"bazel_tools@_\",\n          \"location\": {\n            \"file\": \"@@bazel_tools//:MODULE.bazel\",\n            \"line\": 47,\n            \"column\": 33\n          },\n          \"imports\": {\n            \"buildozer_binary\": \"buildozer_binary\"\n          },\n          \"devImports\": [],\n          \"tags\": [],\n          \"hasDevUseExtension\": false,\n          \"hasNonDevUseExtension\": true\n        }\n      ],\n      \"deps\": {\n        \"rules_cc\": \"rules_cc@0.0.9\",\n        \"rules_java\": \"rules_java@7.4.0\",\n        \"rules_license\": \"rules_license@0.0.7\",\n        \"rules_proto\": \"rules_proto@5.3.0-21.7\",\n        \"rules_python\": \"rules_python@0.22.1\",\n        \"buildozer\": \"buildozer@6.4.0.2\",\n        \"platforms\": \"platforms@0.0.7\",\n        \"com_google_protobuf\": \"protobuf@21.7\",\n        \"zlib\": \"zlib@1.3\",\n        \"build_bazel_apple_support\": \"apple_support@1.5.0\",\n        \"local_config_platform\": \"local_config_platform@_\"\n      }\n    },\n    \"local_config_platform@_\": {\n      \"name\": \"local_config_platform\",\n      \"version\": \"\",\n      \"key\": \"local_config_platform@_\",\n      \"repoName\": \"local_config_platform\",\n      \"executionPlatformsToRegister\": [],\n      \"toolchainsToRegister\": [],\n      \"extensionUsages\": [],\n      \"deps\": {\n        \"platforms\": \"platforms@0.0.7\",\n        \"bazel_tools\": \"bazel_tools@_\"\n      }\n    },\n    \"rules_cc@0.0.9\": {\n      \"name\": \"rules_cc\",\n      \"version\": \"0.0.9\",\n      \"key\": \"rules_cc@0.0.9\",\n      \"repoName\": \"rules_cc\",\n      \"executionPlatformsToRegister\": [],\n      \"toolchainsToRegister\": [\n        \"@local_config_cc_toolchains//:all\"\n      ],\n      \"extensionUsages\": [\n        {\n          \"extensionBzlFile\": \"@bazel_tools//tools/cpp:cc_configure.bzl\",\n          \"extensionName\": \"cc_configure_extension\",\n          \"usingModule\": \"rules_cc@0.0.9\",\n          \"location\": {\n            \"file\": \"https://bcr.bazel.build/modules/rules_cc/0.0.9/MODULE.bazel\",\n            \"line\": 9,\n            \"column\": 29\n          },\n          \"imports\": {\n            \"local_config_cc_toolchains\": \"local_config_cc_toolchains\"\n          },\n          \"devImports\": [],\n          \"tags\": [],\n          \"hasDevUseExtension\": false,\n          \"hasNonDevUseExtension\": true\n        }\n      ],\n      \"deps\": {\n        \"platforms\": \"platforms@0.0.7\",\n        \"bazel_tools\": \"bazel_tools@_\",\n        \"local_config_platform\": \"local_config_platform@_\"\n      },\n      \"repoSpec\": {\n        \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n        \"ruleClassName\": \"http_archive\",\n        \"attributes\": {\n          \"urls\": [\n            \"https://github.com/bazelbuild/rules_cc/releases/download/0.0.9/rules_cc-0.0.9.tar.gz\"\n          ],\n          \"integrity\": \"sha256-IDeHW5pEVtzkp50RKorohbvEqtlo5lh9ym5k86CQDN8=\",\n          \"strip_prefix\": \"rules_cc-0.0.9\",\n          \"remote_patches\": {\n            \"https://bcr.bazel.build/modules/rules_cc/0.0.9/patches/module_dot_bazel_version.patch\": \"sha256-mM+qzOI0SgAdaJBlWOSMwMPKpaA9b7R37Hj/tp5bb4g=\"\n          },\n          \"remote_patch_strip\": 0\n        }\n      }\n    },\n    \"rules_java@7.4.0\": {\n      \"name\": \"rules_java\",\n      \"version\": \"7.4.0\",\n      \"key\": \"rules_java@7.4.0\",\n      \"repoName\": \"rules_java\",\n      \"executionPlatformsToRegister\": [],\n      \"toolchainsToRegister\": [\n        \"//toolchains:all\",\n        \"@local_jdk//:runtime_toolchain_definition\",\n        \"@local_jdk//:bootstrap_runtime_toolchain_definition\",\n        \"@remotejdk11_linux_toolchain_config_repo//:all\",\n        \"@remotejdk11_linux_aarch64_toolchain_config_repo//:all\",\n        \"@remotejdk11_linux_ppc64le_toolchain_config_repo//:all\",\n        \"@remotejdk11_linux_s390x_toolchain_config_repo//:all\",\n        \"@remotejdk11_macos_toolchain_config_repo//:all\",\n        \"@remotejdk11_macos_aarch64_toolchain_config_repo//:all\",\n        \"@remotejdk11_win_toolchain_config_repo//:all\",\n        \"@remotejdk11_win_arm64_toolchain_config_repo//:all\",\n        \"@remotejdk17_linux_toolchain_config_repo//:all\",\n        \"@remotejdk17_linux_aarch64_toolchain_config_repo//:all\",\n        \"@remotejdk17_linux_ppc64le_toolchain_config_repo//:all\",\n        \"@remotejdk17_linux_s390x_toolchain_config_repo//:all\",\n        \"@remotejdk17_macos_toolchain_config_repo//:all\",\n        \"@remotejdk17_macos_aarch64_toolchain_config_repo//:all\",\n        \"@remotejdk17_win_toolchain_config_repo//:all\",\n        \"@remotejdk17_win_arm64_toolchain_config_repo//:all\",\n        \"@remotejdk21_linux_toolchain_config_repo//:all\",\n        \"@remotejdk21_linux_aarch64_toolchain_config_repo//:all\",\n        \"@remotejdk21_macos_toolchain_config_repo//:all\",\n        \"@remotejdk21_macos_aarch64_toolchain_config_repo//:all\",\n        \"@remotejdk21_win_toolchain_config_repo//:all\"\n      ],\n      \"extensionUsages\": [\n        {\n          \"extensionBzlFile\": \"@rules_java//java:extensions.bzl\",\n          \"extensionName\": \"toolchains\",\n          \"usingModule\": \"rules_java@7.4.0\",\n          \"location\": {\n            \"file\": \"https://bcr.bazel.build/modules/rules_java/7.4.0/MODULE.bazel\",\n            \"line\": 19,\n            \"column\": 27\n          },\n          \"imports\": {\n            \"remote_java_tools\": \"remote_java_tools\",\n            \"remote_java_tools_linux\": \"remote_java_tools_linux\",\n            \"remote_java_tools_windows\": \"remote_java_tools_windows\",\n            \"remote_java_tools_darwin_x86_64\": \"remote_java_tools_darwin_x86_64\",\n            \"remote_java_tools_darwin_arm64\": \"remote_java_tools_darwin_arm64\",\n            \"local_jdk\": \"local_jdk\",\n            \"remotejdk11_linux_toolchain_config_repo\": \"remotejdk11_linux_toolchain_config_repo\",\n            \"remotejdk11_linux_aarch64_toolchain_config_repo\": \"remotejdk11_linux_aarch64_toolchain_config_repo\",\n            \"remotejdk11_linux_ppc64le_toolchain_config_repo\": \"remotejdk11_linux_ppc64le_toolchain_config_repo\",\n            \"remotejdk11_linux_s390x_toolchain_config_repo\": \"remotejdk11_linux_s390x_toolchain_config_repo\",\n            \"remotejdk11_macos_toolchain_config_repo\": \"remotejdk11_macos_toolchain_config_repo\",\n            \"remotejdk11_macos_aarch64_toolchain_config_repo\": \"remotejdk11_macos_aarch64_toolchain_config_repo\",\n            \"remotejdk11_win_toolchain_config_repo\": \"remotejdk11_win_toolchain_config_repo\",\n            \"remotejdk11_win_arm64_toolchain_config_repo\": \"remotejdk11_win_arm64_toolchain_config_repo\",\n            \"remotejdk17_linux_toolchain_config_repo\": \"remotejdk17_linux_toolchain_config_repo\",\n            \"remotejdk17_linux_aarch64_toolchain_config_repo\": \"remotejdk17_linux_aarch64_toolchain_config_repo\",\n            \"remotejdk17_linux_ppc64le_toolchain_config_repo\": \"remotejdk17_linux_ppc64le_toolchain_config_repo\",\n            \"remotejdk17_linux_s390x_toolchain_config_repo\": \"remotejdk17_linux_s390x_toolchain_config_repo\",\n            \"remotejdk17_macos_toolchain_config_repo\": \"remotejdk17_macos_toolchain_config_repo\",\n            \"remotejdk17_macos_aarch64_toolchain_config_repo\": \"remotejdk17_macos_aarch64_toolchain_config_repo\",\n            \"remotejdk17_win_toolchain_config_repo\": \"remotejdk17_win_toolchain_config_repo\",\n            \"remotejdk17_win_arm64_toolchain_config_repo\": \"remotejdk17_win_arm64_toolchain_config_repo\",\n            \"remotejdk21_linux_toolchain_config_repo\": \"remotejdk21_linux_toolchain_config_repo\",\n            \"remotejdk21_linux_aarch64_toolchain_config_repo\": \"remotejdk21_linux_aarch64_toolchain_config_repo\",\n            \"remotejdk21_macos_toolchain_config_repo\": \"remotejdk21_macos_toolchain_config_repo\",\n            \"remotejdk21_macos_aarch64_toolchain_config_repo\": \"remotejdk21_macos_aarch64_toolchain_config_repo\",\n            \"remotejdk21_win_toolchain_config_repo\": \"remotejdk21_win_toolchain_config_repo\"\n          },\n          \"devImports\": [],\n          \"tags\": [],\n          \"hasDevUseExtension\": false,\n          \"hasNonDevUseExtension\": true\n        }\n      ],\n      \"deps\": {\n        \"platforms\": \"platforms@0.0.7\",\n        \"rules_cc\": \"rules_cc@0.0.9\",\n        \"bazel_skylib\": \"bazel_skylib@1.3.0\",\n        \"rules_proto\": \"rules_proto@5.3.0-21.7\",\n        \"rules_license\": \"rules_license@0.0.7\",\n        \"bazel_tools\": \"bazel_tools@_\",\n        \"local_config_platform\": \"local_config_platform@_\"\n      },\n      \"repoSpec\": {\n        \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n        \"ruleClassName\": \"http_archive\",\n        \"attributes\": {\n          \"urls\": [\n            \"https://github.com/bazelbuild/rules_java/releases/download/7.4.0/rules_java-7.4.0.tar.gz\"\n          ],\n          \"integrity\": \"sha256-l27wi0nJKXQfIBeQ5Z44B8cq2B9CjIvJU82+/1/tFes=\",\n          \"strip_prefix\": \"\",\n          \"remote_patches\": {},\n          \"remote_patch_strip\": 0\n        }\n      }\n    },\n    \"rules_license@0.0.7\": {\n      \"name\": \"rules_license\",\n      \"version\": \"0.0.7\",\n      \"key\": \"rules_license@0.0.7\",\n      \"repoName\": \"rules_license\",\n      \"executionPlatformsToRegister\": [],\n      \"toolchainsToRegister\": [],\n      \"extensionUsages\": [],\n      \"deps\": {\n        \"bazel_tools\": \"bazel_tools@_\",\n        \"local_config_platform\": \"local_config_platform@_\"\n      },\n      \"repoSpec\": {\n        \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n        \"ruleClassName\": \"http_archive\",\n        \"attributes\": {\n          \"urls\": [\n            \"https://github.com/bazelbuild/rules_license/releases/download/0.0.7/rules_license-0.0.7.tar.gz\"\n          ],\n          \"integrity\": \"sha256-RTHezLkTY5ww5cdRKgVNXYdWmNrrddjPkPKEN1/nw2A=\",\n          \"strip_prefix\": \"\",\n          \"remote_patches\": {},\n          \"remote_patch_strip\": 0\n        }\n      }\n    },\n    \"rules_proto@5.3.0-21.7\": {\n      \"name\": \"rules_proto\",\n      \"version\": \"5.3.0-21.7\",\n      \"key\": \"rules_proto@5.3.0-21.7\",\n      \"repoName\": \"rules_proto\",\n      \"executionPlatformsToRegister\": [],\n      \"toolchainsToRegister\": [],\n      \"extensionUsages\": [],\n      \"deps\": {\n        \"bazel_skylib\": \"bazel_skylib@1.3.0\",\n        \"com_google_protobuf\": \"protobuf@21.7\",\n        \"rules_cc\": \"rules_cc@0.0.9\",\n        \"bazel_tools\": \"bazel_tools@_\",\n        \"local_config_platform\": \"local_config_platform@_\"\n      },\n      \"repoSpec\": {\n        \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n        \"ruleClassName\": \"http_archive\",\n        \"attributes\": {\n          \"urls\": [\n            \"https://github.com/bazelbuild/rules_proto/archive/refs/tags/5.3.0-21.7.tar.gz\"\n          ],\n          \"integrity\": \"sha256-3D+yBqLLNEG0heseQjFlsjEjWh6psDG0Qzz3vB+kYN0=\",\n          \"strip_prefix\": \"rules_proto-5.3.0-21.7\",\n          \"remote_patches\": {},\n          \"remote_patch_strip\": 0\n        }\n      }\n    },\n    \"rules_python@0.22.1\": {\n      \"name\": \"rules_python\",\n      \"version\": \"0.22.1\",\n      \"key\": \"rules_python@0.22.1\",\n      \"repoName\": \"rules_python\",\n      \"executionPlatformsToRegister\": [],\n      \"toolchainsToRegister\": [\n        \"@bazel_tools//tools/python:autodetecting_toolchain\"\n      ],\n      \"extensionUsages\": [\n        {\n          \"extensionBzlFile\": \"@rules_python//python/extensions/private:internal_deps.bzl\",\n          \"extensionName\": \"internal_deps\",\n          \"usingModule\": \"rules_python@0.22.1\",\n          \"location\": {\n            \"file\": \"https://bcr.bazel.build/modules/rules_python/0.22.1/MODULE.bazel\",\n            \"line\": 14,\n            \"column\": 30\n          },\n          \"imports\": {\n            \"pypi__build\": \"pypi__build\",\n            \"pypi__click\": \"pypi__click\",\n            \"pypi__colorama\": \"pypi__colorama\",\n            \"pypi__importlib_metadata\": \"pypi__importlib_metadata\",\n            \"pypi__installer\": \"pypi__installer\",\n            \"pypi__more_itertools\": \"pypi__more_itertools\",\n            \"pypi__packaging\": \"pypi__packaging\",\n            \"pypi__pep517\": \"pypi__pep517\",\n            \"pypi__pip\": \"pypi__pip\",\n            \"pypi__pip_tools\": \"pypi__pip_tools\",\n            \"pypi__setuptools\": \"pypi__setuptools\",\n            \"pypi__tomli\": \"pypi__tomli\",\n            \"pypi__wheel\": \"pypi__wheel\",\n            \"pypi__zipp\": \"pypi__zipp\",\n            \"pypi__coverage_cp310_aarch64-apple-darwin\": \"pypi__coverage_cp310_aarch64-apple-darwin\",\n            \"pypi__coverage_cp310_aarch64-unknown-linux-gnu\": \"pypi__coverage_cp310_aarch64-unknown-linux-gnu\",\n            \"pypi__coverage_cp310_x86_64-apple-darwin\": \"pypi__coverage_cp310_x86_64-apple-darwin\",\n            \"pypi__coverage_cp310_x86_64-unknown-linux-gnu\": \"pypi__coverage_cp310_x86_64-unknown-linux-gnu\",\n            \"pypi__coverage_cp311_aarch64-unknown-linux-gnu\": \"pypi__coverage_cp311_aarch64-unknown-linux-gnu\",\n            \"pypi__coverage_cp311_x86_64-apple-darwin\": \"pypi__coverage_cp311_x86_64-apple-darwin\",\n            \"pypi__coverage_cp311_x86_64-unknown-linux-gnu\": \"pypi__coverage_cp311_x86_64-unknown-linux-gnu\",\n            \"pypi__coverage_cp38_aarch64-apple-darwin\": \"pypi__coverage_cp38_aarch64-apple-darwin\",\n            \"pypi__coverage_cp38_aarch64-unknown-linux-gnu\": \"pypi__coverage_cp38_aarch64-unknown-linux-gnu\",\n            \"pypi__coverage_cp38_x86_64-apple-darwin\": \"pypi__coverage_cp38_x86_64-apple-darwin\",\n            \"pypi__coverage_cp38_x86_64-unknown-linux-gnu\": \"pypi__coverage_cp38_x86_64-unknown-linux-gnu\",\n            \"pypi__coverage_cp39_aarch64-apple-darwin\": \"pypi__coverage_cp39_aarch64-apple-darwin\",\n            \"pypi__coverage_cp39_aarch64-unknown-linux-gnu\": \"pypi__coverage_cp39_aarch64-unknown-linux-gnu\",\n            \"pypi__coverage_cp39_x86_64-apple-darwin\": \"pypi__coverage_cp39_x86_64-apple-darwin\",\n            \"pypi__coverage_cp39_x86_64-unknown-linux-gnu\": \"pypi__coverage_cp39_x86_64-unknown-linux-gnu\"\n          },\n          \"devImports\": [],\n          \"tags\": [\n            {\n              \"tagName\": \"install\",\n              \"attributeValues\": {},\n              \"devDependency\": false,\n              \"location\": {\n                \"file\": \"https://bcr.bazel.build/modules/rules_python/0.22.1/MODULE.bazel\",\n                \"line\": 15,\n                \"column\": 22\n              }\n            }\n          ],\n          \"hasDevUseExtension\": false,\n          \"hasNonDevUseExtension\": true\n        },\n        {\n          \"extensionBzlFile\": \"@rules_python//python/extensions:python.bzl\",\n          \"extensionName\": \"python\",\n          \"usingModule\": \"rules_python@0.22.1\",\n          \"location\": {\n            \"file\": \"https://bcr.bazel.build/modules/rules_python/0.22.1/MODULE.bazel\",\n            \"line\": 50,\n            \"column\": 23\n          },\n          \"imports\": {\n            \"pythons_hub\": \"pythons_hub\"\n          },\n          \"devImports\": [],\n          \"tags\": [],\n          \"hasDevUseExtension\": false,\n          \"hasNonDevUseExtension\": true\n        }\n      ],\n      \"deps\": {\n        \"platforms\": \"platforms@0.0.7\",\n        \"bazel_skylib\": \"bazel_skylib@1.3.0\",\n        \"rules_proto\": \"rules_proto@5.3.0-21.7\",\n        \"com_google_protobuf\": \"protobuf@21.7\",\n        \"bazel_tools\": \"bazel_tools@_\",\n        \"local_config_platform\": \"local_config_platform@_\"\n      },\n      \"repoSpec\": {\n        \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n        \"ruleClassName\": \"http_archive\",\n        \"attributes\": {\n          \"urls\": [\n            \"https://github.com/bazelbuild/rules_python/releases/download/0.22.1/rules_python-0.22.1.tar.gz\"\n          ],\n          \"integrity\": \"sha256-pWQP3dS+sD6MH95e1xYMC6a9R359BIZhwwwGk2om/WM=\",\n          \"strip_prefix\": \"rules_python-0.22.1\",\n          \"remote_patches\": {\n            \"https://bcr.bazel.build/modules/rules_python/0.22.1/patches/module_dot_bazel_version.patch\": \"sha256-3+VLDH9gYDzNI4eOW7mABC/LKxh1xqF6NhacLbNTucs=\"\n          },\n          \"remote_patch_strip\": 1\n        }\n      }\n    },\n    \"buildozer@6.4.0.2\": {\n      \"name\": \"buildozer\",\n      \"version\": \"6.4.0.2\",\n      \"key\": \"buildozer@6.4.0.2\",\n      \"repoName\": \"buildozer\",\n      \"executionPlatformsToRegister\": [],\n      \"toolchainsToRegister\": [],\n      \"extensionUsages\": [\n        {\n          \"extensionBzlFile\": \"@buildozer//:buildozer_binary.bzl\",\n          \"extensionName\": \"buildozer_binary\",\n          \"usingModule\": \"buildozer@6.4.0.2\",\n          \"location\": {\n            \"file\": \"https://bcr.bazel.build/modules/buildozer/6.4.0.2/MODULE.bazel\",\n            \"line\": 7,\n            \"column\": 33\n          },\n          \"imports\": {\n            \"buildozer_binary\": \"buildozer_binary\"\n          },\n          \"devImports\": [],\n          \"tags\": [\n            {\n              \"tagName\": \"buildozer\",\n              \"attributeValues\": {\n                \"sha256\": {\n                  \"darwin-amd64\": \"d29e347ecd6b5673d72cb1a8de05bf1b06178dd229ff5eb67fad5100c840cc8e\",\n                  \"darwin-arm64\": \"9b9e71bdbec5e7223871e913b65d12f6d8fa026684daf991f00e52ed36a6978d\",\n                  \"linux-amd64\": \"8dfd6345da4e9042daa738d7fdf34f699c5dfce4632f7207956fceedd8494119\",\n                  \"linux-arm64\": \"6559558fded658c8fa7432a9d011f7c4dcbac6b738feae73d2d5c352e5f605fa\",\n                  \"windows-amd64\": \"e7f05bf847f7c3689dd28926460ce6e1097ae97380ac8e6ae7147b7b706ba19b\"\n                },\n                \"version\": \"6.4.0\"\n              },\n              \"devDependency\": false,\n              \"location\": {\n                \"file\": \"https://bcr.bazel.build/modules/buildozer/6.4.0.2/MODULE.bazel\",\n                \"line\": 8,\n                \"column\": 27\n              }\n            }\n          ],\n          \"hasDevUseExtension\": false,\n          \"hasNonDevUseExtension\": true\n        }\n      ],\n      \"deps\": {\n        \"bazel_tools\": \"bazel_tools@_\",\n        \"local_config_platform\": \"local_config_platform@_\"\n      },\n      \"repoSpec\": {\n        \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n        \"ruleClassName\": \"http_archive\",\n        \"attributes\": {\n          \"urls\": [\n            \"https://github.com/fmeum/buildozer/releases/download/v6.4.0.2/buildozer-v6.4.0.2.tar.gz\"\n          ],\n          \"integrity\": \"sha256-k7tFKQMR2AygxpmZfH0yEPnQmF3efFgD9rBPkj+Yz/8=\",\n          \"strip_prefix\": \"buildozer-6.4.0.2\",\n          \"remote_patches\": {\n            \"https://bcr.bazel.build/modules/buildozer/6.4.0.2/patches/module_dot_bazel_version.patch\": \"sha256-gKANF2HMilj7bWmuXs4lbBIAAansuWC4IhWGB/CerjU=\"\n          },\n          \"remote_patch_strip\": 1\n        }\n      }\n    },\n    \"platforms@0.0.7\": {\n      \"name\": \"platforms\",\n      \"version\": \"0.0.7\",\n      \"key\": \"platforms@0.0.7\",\n      \"repoName\": \"platforms\",\n      \"executionPlatformsToRegister\": [],\n      \"toolchainsToRegister\": [],\n      \"extensionUsages\": [],\n      \"deps\": {\n        \"rules_license\": \"rules_license@0.0.7\",\n        \"bazel_tools\": \"bazel_tools@_\",\n        \"local_config_platform\": \"local_config_platform@_\"\n      },\n      \"repoSpec\": {\n        \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n        \"ruleClassName\": \"http_archive\",\n        \"attributes\": {\n          \"urls\": [\n            \"https://github.com/bazelbuild/platforms/releases/download/0.0.7/platforms-0.0.7.tar.gz\"\n          ],\n          \"integrity\": \"sha256-OlYcmee9vpFzqmU/1Xn+hJ8djWc5V4CrR3Cx84FDHVE=\",\n          \"strip_prefix\": \"\",\n          \"remote_patches\": {},\n          \"remote_patch_strip\": 0\n        }\n      }\n    },\n    \"protobuf@21.7\": {\n      \"name\": \"protobuf\",\n      \"version\": \"21.7\",\n      \"key\": \"protobuf@21.7\",\n      \"repoName\": \"protobuf\",\n      \"executionPlatformsToRegister\": [],\n      \"toolchainsToRegister\": [],\n      \"extensionUsages\": [\n        {\n          \"extensionBzlFile\": \"@rules_jvm_external//:extensions.bzl\",\n          \"extensionName\": \"maven\",\n          \"usingModule\": \"protobuf@21.7\",\n          \"location\": {\n            \"file\": \"https://bcr.bazel.build/modules/protobuf/21.7/MODULE.bazel\",\n            \"line\": 22,\n            \"column\": 22\n          },\n          \"imports\": {\n            \"maven\": \"maven\"\n          },\n          \"devImports\": [],\n          \"tags\": [\n            {\n              \"tagName\": \"install\",\n              \"attributeValues\": {\n                \"name\": \"maven\",\n                \"artifacts\": [\n                  \"com.google.code.findbugs:jsr305:3.0.2\",\n                  \"com.google.code.gson:gson:2.8.9\",\n                  \"com.google.errorprone:error_prone_annotations:2.3.2\",\n                  \"com.google.j2objc:j2objc-annotations:1.3\",\n                  \"com.google.guava:guava:31.1-jre\",\n                  \"com.google.guava:guava-testlib:31.1-jre\",\n                  \"com.google.truth:truth:1.1.2\",\n                  \"junit:junit:4.13.2\",\n                  \"org.mockito:mockito-core:4.3.1\"\n                ]\n              },\n              \"devDependency\": false,\n              \"location\": {\n                \"file\": \"https://bcr.bazel.build/modules/protobuf/21.7/MODULE.bazel\",\n                \"line\": 24,\n                \"column\": 14\n              }\n            }\n          ],\n          \"hasDevUseExtension\": false,\n          \"hasNonDevUseExtension\": true\n        }\n      ],\n      \"deps\": {\n        \"bazel_skylib\": \"bazel_skylib@1.3.0\",\n        \"rules_python\": \"rules_python@0.22.1\",\n        \"rules_cc\": \"rules_cc@0.0.9\",\n        \"rules_proto\": \"rules_proto@5.3.0-21.7\",\n        \"rules_java\": \"rules_java@7.4.0\",\n        \"rules_pkg\": \"rules_pkg@0.7.0\",\n        \"com_google_abseil\": \"abseil-cpp@20211102.0\",\n        \"zlib\": \"zlib@1.3\",\n        \"upb\": \"upb@0.0.0-20220923-a547704\",\n        \"rules_jvm_external\": \"rules_jvm_external@4.4.2\",\n        \"com_google_googletest\": \"googletest@1.11.0\",\n        \"bazel_tools\": \"bazel_tools@_\",\n        \"local_config_platform\": \"local_config_platform@_\"\n      },\n      \"repoSpec\": {\n        \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n        \"ruleClassName\": \"http_archive\",\n        \"attributes\": {\n          \"urls\": [\n            \"https://github.com/protocolbuffers/protobuf/releases/download/v21.7/protobuf-all-21.7.zip\"\n          ],\n          \"integrity\": \"sha256-VJOiH17T/FAuZv7GuUScBqVRztYwAvpIkDxA36jeeko=\",\n          \"strip_prefix\": \"protobuf-21.7\",\n          \"remote_patches\": {\n            \"https://bcr.bazel.build/modules/protobuf/21.7/patches/add_module_dot_bazel.patch\": \"sha256-q3V2+eq0v2XF0z8z+V+QF4cynD6JvHI1y3kI/+rzl5s=\",\n            \"https://bcr.bazel.build/modules/protobuf/21.7/patches/add_module_dot_bazel_for_examples.patch\": \"sha256-O7YP6s3lo/1opUiO0jqXYORNHdZ/2q3hjz1QGy8QdIU=\",\n            \"https://bcr.bazel.build/modules/protobuf/21.7/patches/relative_repo_names.patch\": \"sha256-RK9RjW8T5UJNG7flIrnFiNE9vKwWB+8uWWtJqXYT0w4=\",\n            \"https://bcr.bazel.build/modules/protobuf/21.7/patches/add_missing_files.patch\": \"sha256-Hyne4DG2u5bXcWHNxNMirA2QFAe/2Cl8oMm1XJdkQIY=\"\n          },\n          \"remote_patch_strip\": 1\n        }\n      }\n    },\n    \"zlib@1.3\": {\n      \"name\": \"zlib\",\n      \"version\": \"1.3\",\n      \"key\": \"zlib@1.3\",\n      \"repoName\": \"zlib\",\n      \"executionPlatformsToRegister\": [],\n      \"toolchainsToRegister\": [],\n      \"extensionUsages\": [],\n      \"deps\": {\n        \"platforms\": \"platforms@0.0.7\",\n        \"rules_cc\": \"rules_cc@0.0.9\",\n        \"bazel_tools\": \"bazel_tools@_\",\n        \"local_config_platform\": \"local_config_platform@_\"\n      },\n      \"repoSpec\": {\n        \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n        \"ruleClassName\": \"http_archive\",\n        \"attributes\": {\n          \"urls\": [\n            \"https://github.com/madler/zlib/releases/download/v1.3/zlib-1.3.tar.gz\"\n          ],\n          \"integrity\": \"sha256-/wukwpIBPbwnUws6geH5qBPNOd4Byl4Pi/NVcC76WT4=\",\n          \"strip_prefix\": \"zlib-1.3\",\n          \"remote_patches\": {\n            \"https://bcr.bazel.build/modules/zlib/1.3/patches/add_build_file.patch\": \"sha256-Ei+FYaaOo7A3jTKunMEodTI0Uw5NXQyZEcboMC8JskY=\",\n            \"https://bcr.bazel.build/modules/zlib/1.3/patches/module_dot_bazel.patch\": \"sha256-fPWLM+2xaF/kuy+kZc1YTfW6hNjrkG400Ho7gckuyJk=\"\n          },\n          \"remote_patch_strip\": 0\n        }\n      }\n    },\n    \"apple_support@1.5.0\": {\n      \"name\": \"apple_support\",\n      \"version\": \"1.5.0\",\n      \"key\": \"apple_support@1.5.0\",\n      \"repoName\": \"build_bazel_apple_support\",\n      \"executionPlatformsToRegister\": [],\n      \"toolchainsToRegister\": [\n        \"@local_config_apple_cc_toolchains//:all\"\n      ],\n      \"extensionUsages\": [\n        {\n          \"extensionBzlFile\": \"@build_bazel_apple_support//crosstool:setup.bzl\",\n          \"extensionName\": \"apple_cc_configure_extension\",\n          \"usingModule\": \"apple_support@1.5.0\",\n          \"location\": {\n            \"file\": \"https://bcr.bazel.build/modules/apple_support/1.5.0/MODULE.bazel\",\n            \"line\": 17,\n            \"column\": 35\n          },\n          \"imports\": {\n            \"local_config_apple_cc\": \"local_config_apple_cc\",\n            \"local_config_apple_cc_toolchains\": \"local_config_apple_cc_toolchains\"\n          },\n          \"devImports\": [],\n          \"tags\": [],\n          \"hasDevUseExtension\": false,\n          \"hasNonDevUseExtension\": true\n        }\n      ],\n      \"deps\": {\n        \"bazel_skylib\": \"bazel_skylib@1.3.0\",\n        \"platforms\": \"platforms@0.0.7\",\n        \"bazel_tools\": \"bazel_tools@_\",\n        \"local_config_platform\": \"local_config_platform@_\"\n      },\n      \"repoSpec\": {\n        \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n        \"ruleClassName\": \"http_archive\",\n        \"attributes\": {\n          \"urls\": [\n            \"https://github.com/bazelbuild/apple_support/releases/download/1.5.0/apple_support.1.5.0.tar.gz\"\n          ],\n          \"integrity\": \"sha256-miM41vja0yRPgj8txghKA+TQ+7J8qJLclw5okNW0gYQ=\",\n          \"strip_prefix\": \"\",\n          \"remote_patches\": {},\n          \"remote_patch_strip\": 0\n        }\n      }\n    },\n    \"bazel_skylib@1.3.0\": {\n      \"name\": \"bazel_skylib\",\n      \"version\": \"1.3.0\",\n      \"key\": \"bazel_skylib@1.3.0\",\n      \"repoName\": \"bazel_skylib\",\n      \"executionPlatformsToRegister\": [],\n      \"toolchainsToRegister\": [\n        \"//toolchains/unittest:cmd_toolchain\",\n        \"//toolchains/unittest:bash_toolchain\"\n      ],\n      \"extensionUsages\": [],\n      \"deps\": {\n        \"platforms\": \"platforms@0.0.7\",\n        \"bazel_tools\": \"bazel_tools@_\",\n        \"local_config_platform\": \"local_config_platform@_\"\n      },\n      \"repoSpec\": {\n        \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n        \"ruleClassName\": \"http_archive\",\n        \"attributes\": {\n          \"urls\": [\n            \"https://github.com/bazelbuild/bazel-skylib/releases/download/1.3.0/bazel-skylib-1.3.0.tar.gz\"\n          ],\n          \"integrity\": \"sha256-dNVE2W9KW7Yw1GXKi7z+Ix41lOWq5X4e2/F6brPKJQY=\",\n          \"strip_prefix\": \"\",\n          \"remote_patches\": {},\n          \"remote_patch_strip\": 0\n        }\n      }\n    },\n    \"rules_pkg@0.7.0\": {\n      \"name\": \"rules_pkg\",\n      \"version\": \"0.7.0\",\n      \"key\": \"rules_pkg@0.7.0\",\n      \"repoName\": \"rules_pkg\",\n      \"executionPlatformsToRegister\": [],\n      \"toolchainsToRegister\": [],\n      \"extensionUsages\": [],\n      \"deps\": {\n        \"rules_python\": \"rules_python@0.22.1\",\n        \"bazel_skylib\": \"bazel_skylib@1.3.0\",\n        \"rules_license\": \"rules_license@0.0.7\",\n        \"bazel_tools\": \"bazel_tools@_\",\n        \"local_config_platform\": \"local_config_platform@_\"\n      },\n      \"repoSpec\": {\n        \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n        \"ruleClassName\": \"http_archive\",\n        \"attributes\": {\n          \"urls\": [\n            \"https://github.com/bazelbuild/rules_pkg/releases/download/0.7.0/rules_pkg-0.7.0.tar.gz\"\n          ],\n          \"integrity\": \"sha256-iimOgydi7aGDBZfWT+fbWBeKqEzVkm121bdE1lWJQcI=\",\n          \"strip_prefix\": \"\",\n          \"remote_patches\": {\n            \"https://bcr.bazel.build/modules/rules_pkg/0.7.0/patches/module_dot_bazel.patch\": \"sha256-4OaEPZwYF6iC71ZTDg6MJ7LLqX7ZA0/kK4mT+4xKqiE=\"\n          },\n          \"remote_patch_strip\": 0\n        }\n      }\n    },\n    \"abseil-cpp@20211102.0\": {\n      \"name\": \"abseil-cpp\",\n      \"version\": \"20211102.0\",\n      \"key\": \"abseil-cpp@20211102.0\",\n      \"repoName\": \"abseil-cpp\",\n      \"executionPlatformsToRegister\": [],\n      \"toolchainsToRegister\": [],\n      \"extensionUsages\": [],\n      \"deps\": {\n        \"rules_cc\": \"rules_cc@0.0.9\",\n        \"platforms\": \"platforms@0.0.7\",\n        \"bazel_tools\": \"bazel_tools@_\",\n        \"local_config_platform\": \"local_config_platform@_\"\n      },\n      \"repoSpec\": {\n        \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n        \"ruleClassName\": \"http_archive\",\n        \"attributes\": {\n          \"urls\": [\n            \"https://github.com/abseil/abseil-cpp/archive/refs/tags/20211102.0.tar.gz\"\n          ],\n          \"integrity\": \"sha256-3PcbnLqNwMqZQMSzFqDHlr6Pq0KwcLtrfKtitI8OZsQ=\",\n          \"strip_prefix\": \"abseil-cpp-20211102.0\",\n          \"remote_patches\": {\n            \"https://bcr.bazel.build/modules/abseil-cpp/20211102.0/patches/module_dot_bazel.patch\": \"sha256-4izqopgGCey4jVZzl/w3M2GVPNohjh2B5TmbThZNvPY=\"\n          },\n          \"remote_patch_strip\": 0\n        }\n      }\n    },\n    \"upb@0.0.0-20220923-a547704\": {\n      \"name\": \"upb\",\n      \"version\": \"0.0.0-20220923-a547704\",\n      \"key\": \"upb@0.0.0-20220923-a547704\",\n      \"repoName\": \"upb\",\n      \"executionPlatformsToRegister\": [],\n      \"toolchainsToRegister\": [],\n      \"extensionUsages\": [],\n      \"deps\": {\n        \"bazel_skylib\": \"bazel_skylib@1.3.0\",\n        \"rules_proto\": \"rules_proto@5.3.0-21.7\",\n        \"com_google_protobuf\": \"protobuf@21.7\",\n        \"com_google_absl\": \"abseil-cpp@20211102.0\",\n        \"platforms\": \"platforms@0.0.7\",\n        \"bazel_tools\": \"bazel_tools@_\",\n        \"local_config_platform\": \"local_config_platform@_\"\n      },\n      \"repoSpec\": {\n        \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n        \"ruleClassName\": \"http_archive\",\n        \"attributes\": {\n          \"urls\": [\n            \"https://github.com/protocolbuffers/upb/archive/a5477045acaa34586420942098f5fecd3570f577.tar.gz\"\n          ],\n          \"integrity\": \"sha256-z39x6v+QskwaKLSWRan/A6mmwecTQpHOcJActj5zZLU=\",\n          \"strip_prefix\": \"upb-a5477045acaa34586420942098f5fecd3570f577\",\n          \"remote_patches\": {\n            \"https://bcr.bazel.build/modules/upb/0.0.0-20220923-a547704/patches/module_dot_bazel.patch\": \"sha256-wH4mNS6ZYy+8uC0HoAft/c7SDsq2Kxf+J8dUakXhaB0=\"\n          },\n          \"remote_patch_strip\": 0\n        }\n      }\n    },\n    \"rules_jvm_external@4.4.2\": {\n      \"name\": \"rules_jvm_external\",\n      \"version\": \"4.4.2\",\n      \"key\": \"rules_jvm_external@4.4.2\",\n      \"repoName\": \"rules_jvm_external\",\n      \"executionPlatformsToRegister\": [],\n      \"toolchainsToRegister\": [],\n      \"extensionUsages\": [\n        {\n          \"extensionBzlFile\": \"@rules_jvm_external//:non-module-deps.bzl\",\n          \"extensionName\": \"non_module_deps\",\n          \"usingModule\": \"rules_jvm_external@4.4.2\",\n          \"location\": {\n            \"file\": \"https://bcr.bazel.build/modules/rules_jvm_external/4.4.2/MODULE.bazel\",\n            \"line\": 9,\n            \"column\": 32\n          },\n          \"imports\": {\n            \"io_bazel_rules_kotlin\": \"io_bazel_rules_kotlin\"\n          },\n          \"devImports\": [],\n          \"tags\": [],\n          \"hasDevUseExtension\": false,\n          \"hasNonDevUseExtension\": true\n        },\n        {\n          \"extensionBzlFile\": \"@rules_jvm_external//:extensions.bzl\",\n          \"extensionName\": \"maven\",\n          \"usingModule\": \"rules_jvm_external@4.4.2\",\n          \"location\": {\n            \"file\": \"https://bcr.bazel.build/modules/rules_jvm_external/4.4.2/MODULE.bazel\",\n            \"line\": 16,\n            \"column\": 22\n          },\n          \"imports\": {\n            \"rules_jvm_external_deps\": \"rules_jvm_external_deps\"\n          },\n          \"devImports\": [],\n          \"tags\": [\n            {\n              \"tagName\": \"install\",\n              \"attributeValues\": {\n                \"name\": \"rules_jvm_external_deps\",\n                \"artifacts\": [\n                  \"com.google.cloud:google-cloud-core:1.93.10\",\n                  \"com.google.cloud:google-cloud-storage:1.113.4\",\n                  \"com.google.code.gson:gson:2.9.0\",\n                  \"org.apache.maven:maven-artifact:3.8.6\",\n                  \"software.amazon.awssdk:s3:2.17.183\"\n                ],\n                \"lock_file\": \"@rules_jvm_external//:rules_jvm_external_deps_install.json\"\n              },\n              \"devDependency\": false,\n              \"location\": {\n                \"file\": \"https://bcr.bazel.build/modules/rules_jvm_external/4.4.2/MODULE.bazel\",\n                \"line\": 18,\n                \"column\": 14\n              }\n            }\n          ],\n          \"hasDevUseExtension\": false,\n          \"hasNonDevUseExtension\": true\n        }\n      ],\n      \"deps\": {\n        \"bazel_skylib\": \"bazel_skylib@1.3.0\",\n        \"io_bazel_stardoc\": \"stardoc@0.5.1\",\n        \"bazel_tools\": \"bazel_tools@_\",\n        \"local_config_platform\": \"local_config_platform@_\"\n      },\n      \"repoSpec\": {\n        \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n        \"ruleClassName\": \"http_archive\",\n        \"attributes\": {\n          \"urls\": [\n            \"https://github.com/bazelbuild/rules_jvm_external/archive/refs/tags/4.4.2.zip\"\n          ],\n          \"integrity\": \"sha256-c1YC9QgT6y6pPKP15DsZWb2AshO4NqB6YqKddXZwt3s=\",\n          \"strip_prefix\": \"rules_jvm_external-4.4.2\",\n          \"remote_patches\": {},\n          \"remote_patch_strip\": 0\n        }\n      }\n    },\n    \"googletest@1.11.0\": {\n      \"name\": \"googletest\",\n      \"version\": \"1.11.0\",\n      \"key\": \"googletest@1.11.0\",\n      \"repoName\": \"googletest\",\n      \"executionPlatformsToRegister\": [],\n      \"toolchainsToRegister\": [],\n      \"extensionUsages\": [],\n      \"deps\": {\n        \"com_google_absl\": \"abseil-cpp@20211102.0\",\n        \"platforms\": \"platforms@0.0.7\",\n        \"rules_cc\": \"rules_cc@0.0.9\",\n        \"bazel_tools\": \"bazel_tools@_\",\n        \"local_config_platform\": \"local_config_platform@_\"\n      },\n      \"repoSpec\": {\n        \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n        \"ruleClassName\": \"http_archive\",\n        \"attributes\": {\n          \"urls\": [\n            \"https://github.com/google/googletest/archive/refs/tags/release-1.11.0.tar.gz\"\n          ],\n          \"integrity\": \"sha256-tIcL8SH/d5W6INILzdhie44Ijy0dqymaAxwQNO3ck9U=\",\n          \"strip_prefix\": \"googletest-release-1.11.0\",\n          \"remote_patches\": {\n            \"https://bcr.bazel.build/modules/googletest/1.11.0/patches/module_dot_bazel.patch\": \"sha256-HuahEdI/n8KCI071sN3CEziX+7qP/Ec77IWayYunLP0=\"\n          },\n          \"remote_patch_strip\": 0\n        }\n      }\n    },\n    \"stardoc@0.5.1\": {\n      \"name\": \"stardoc\",\n      \"version\": \"0.5.1\",\n      \"key\": \"stardoc@0.5.1\",\n      \"repoName\": \"stardoc\",\n      \"executionPlatformsToRegister\": [],\n      \"toolchainsToRegister\": [],\n      \"extensionUsages\": [],\n      \"deps\": {\n        \"bazel_skylib\": \"bazel_skylib@1.3.0\",\n        \"rules_java\": \"rules_java@7.4.0\",\n        \"bazel_tools\": \"bazel_tools@_\",\n        \"local_config_platform\": \"local_config_platform@_\"\n      },\n      \"repoSpec\": {\n        \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n        \"ruleClassName\": \"http_archive\",\n        \"attributes\": {\n          \"urls\": [\n            \"https://github.com/bazelbuild/stardoc/releases/download/0.5.1/stardoc-0.5.1.tar.gz\"\n          ],\n          \"integrity\": \"sha256-qoFNrgrEALurLoiB+ZFcb0fElmS/CHxAmhX5BDjSwj4=\",\n          \"strip_prefix\": \"\",\n          \"remote_patches\": {\n            \"https://bcr.bazel.build/modules/stardoc/0.5.1/patches/module_dot_bazel.patch\": \"sha256-UAULCuTpJE7SG0YrR9XLjMfxMRmbP+za3uW9ONZ5rjI=\"\n          },\n          \"remote_patch_strip\": 0\n        }\n      }\n    }\n  },\n  \"moduleExtensions\": {\n    \"@@apple_support~//crosstool:setup.bzl%apple_cc_configure_extension\": {\n      \"general\": {\n        \"bzlTransitiveDigest\": \"pMLFCYaRPkgXPQ8vtuNkMfiHfPmRBy6QJfnid4sWfv0=\",\n        \"recordedFileInputs\": {},\n        \"recordedDirentsInputs\": {},\n        \"envVariables\": {},\n        \"generatedRepoSpecs\": {\n          \"local_config_apple_cc\": {\n            \"bzlFile\": \"@@apple_support~//crosstool:setup.bzl\",\n            \"ruleClassName\": \"_apple_cc_autoconf\",\n            \"attributes\": {}\n          },\n          \"local_config_apple_cc_toolchains\": {\n            \"bzlFile\": \"@@apple_support~//crosstool:setup.bzl\",\n            \"ruleClassName\": \"_apple_cc_autoconf_toolchains\",\n            \"attributes\": {}\n          }\n        },\n        \"recordedRepoMappingEntries\": [\n          [\n            \"apple_support~\",\n            \"bazel_tools\",\n            \"bazel_tools\"\n          ]\n        ]\n      }\n    },\n    \"@@bazel_tools//tools/cpp:cc_configure.bzl%cc_configure_extension\": {\n      \"general\": {\n        \"bzlTransitiveDigest\": \"PHpT2yqMGms2U4L3E/aZ+WcQalmZWm+ILdP3yiLsDhA=\",\n        \"recordedFileInputs\": {},\n        \"recordedDirentsInputs\": {},\n        \"envVariables\": {},\n        \"generatedRepoSpecs\": {\n          \"local_config_cc\": {\n            \"bzlFile\": \"@@bazel_tools//tools/cpp:cc_configure.bzl\",\n            \"ruleClassName\": \"cc_autoconf\",\n            \"attributes\": {}\n          },\n          \"local_config_cc_toolchains\": {\n            \"bzlFile\": \"@@bazel_tools//tools/cpp:cc_configure.bzl\",\n            \"ruleClassName\": \"cc_autoconf_toolchains\",\n            \"attributes\": {}\n          }\n        },\n        \"recordedRepoMappingEntries\": [\n          [\n            \"bazel_tools\",\n            \"bazel_tools\",\n            \"bazel_tools\"\n          ]\n        ]\n      }\n    },\n    \"@@bazel_tools//tools/osx:xcode_configure.bzl%xcode_configure_extension\": {\n      \"general\": {\n        \"bzlTransitiveDigest\": \"Qh2bWTU6QW6wkrd87qrU4YeY+SG37Nvw3A0PR4Y0L2Y=\",\n        \"recordedFileInputs\": {},\n        \"recordedDirentsInputs\": {},\n        \"envVariables\": {},\n        \"generatedRepoSpecs\": {\n          \"local_config_xcode\": {\n            \"bzlFile\": \"@@bazel_tools//tools/osx:xcode_configure.bzl\",\n            \"ruleClassName\": \"xcode_autoconf\",\n            \"attributes\": {\n              \"xcode_locator\": \"@bazel_tools//tools/osx:xcode_locator.m\",\n              \"remote_xcode\": \"\"\n            }\n          }\n        },\n        \"recordedRepoMappingEntries\": []\n      }\n    },\n    \"@@bazel_tools//tools/sh:sh_configure.bzl%sh_configure_extension\": {\n      \"general\": {\n        \"bzlTransitiveDigest\": \"hp4NgmNjEg5+xgvzfh6L83bt9/aiiWETuNpwNuF1MSU=\",\n        \"recordedFileInputs\": {},\n        \"recordedDirentsInputs\": {},\n        \"envVariables\": {},\n        \"generatedRepoSpecs\": {\n          \"local_config_sh\": {\n            \"bzlFile\": \"@@bazel_tools//tools/sh:sh_configure.bzl\",\n            \"ruleClassName\": \"sh_config\",\n            \"attributes\": {}\n          }\n        },\n        \"recordedRepoMappingEntries\": []\n      }\n    },\n    \"@@rules_java~//java:extensions.bzl%toolchains\": {\n      \"general\": {\n        \"bzlTransitiveDigest\": \"0N5b5J9fUzo0sgvH4F3kIEaeXunz4Wy2/UtSFV/eXUY=\",\n        \"recordedFileInputs\": {},\n        \"recordedDirentsInputs\": {},\n        \"envVariables\": {},\n        \"generatedRepoSpecs\": {\n          \"remotejdk21_linux_toolchain_config_repo\": {\n            \"bzlFile\": \"@@rules_java~//toolchains:remote_java_repository.bzl\",\n            \"ruleClassName\": \"_toolchain_config\",\n            \"attributes\": {\n              \"build_file\": \"\\nconfig_setting(\\n    name = \\\"prefix_version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"remotejdk_21\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nconfig_setting(\\n    name = \\\"version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"21\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nalias(\\n    name = \\\"version_or_prefix_version_setting\\\",\\n    actual = select({\\n        \\\":version_setting\\\": \\\":version_setting\\\",\\n        \\\"//conditions:default\\\": \\\":prefix_version_setting\\\",\\n    }),\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\ntoolchain(\\n    name = \\\"toolchain\\\",\\n    target_compatible_with = [\\\"@platforms//os:linux\\\", \\\"@platforms//cpu:x86_64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk21_linux//:jdk\\\",\\n)\\ntoolchain(\\n    name = \\\"bootstrap_runtime_toolchain\\\",\\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\\n    # the same configuration, this constraint will not result in toolchain resolution failures.\\n    exec_compatible_with = [\\\"@platforms//os:linux\\\", \\\"@platforms//cpu:x86_64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk21_linux//:jdk\\\",\\n)\\n\"\n            }\n          },\n          \"remotejdk17_linux_s390x_toolchain_config_repo\": {\n            \"bzlFile\": \"@@rules_java~//toolchains:remote_java_repository.bzl\",\n            \"ruleClassName\": \"_toolchain_config\",\n            \"attributes\": {\n              \"build_file\": \"\\nconfig_setting(\\n    name = \\\"prefix_version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"remotejdk_17\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nconfig_setting(\\n    name = \\\"version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"17\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nalias(\\n    name = \\\"version_or_prefix_version_setting\\\",\\n    actual = select({\\n        \\\":version_setting\\\": \\\":version_setting\\\",\\n        \\\"//conditions:default\\\": \\\":prefix_version_setting\\\",\\n    }),\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\ntoolchain(\\n    name = \\\"toolchain\\\",\\n    target_compatible_with = [\\\"@platforms//os:linux\\\", \\\"@platforms//cpu:s390x\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk17_linux_s390x//:jdk\\\",\\n)\\ntoolchain(\\n    name = \\\"bootstrap_runtime_toolchain\\\",\\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\\n    # the same configuration, this constraint will not result in toolchain resolution failures.\\n    exec_compatible_with = [\\\"@platforms//os:linux\\\", \\\"@platforms//cpu:s390x\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk17_linux_s390x//:jdk\\\",\\n)\\n\"\n            }\n          },\n          \"remotejdk17_macos_toolchain_config_repo\": {\n            \"bzlFile\": \"@@rules_java~//toolchains:remote_java_repository.bzl\",\n            \"ruleClassName\": \"_toolchain_config\",\n            \"attributes\": {\n              \"build_file\": \"\\nconfig_setting(\\n    name = \\\"prefix_version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"remotejdk_17\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nconfig_setting(\\n    name = \\\"version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"17\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nalias(\\n    name = \\\"version_or_prefix_version_setting\\\",\\n    actual = select({\\n        \\\":version_setting\\\": \\\":version_setting\\\",\\n        \\\"//conditions:default\\\": \\\":prefix_version_setting\\\",\\n    }),\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\ntoolchain(\\n    name = \\\"toolchain\\\",\\n    target_compatible_with = [\\\"@platforms//os:macos\\\", \\\"@platforms//cpu:x86_64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk17_macos//:jdk\\\",\\n)\\ntoolchain(\\n    name = \\\"bootstrap_runtime_toolchain\\\",\\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\\n    # the same configuration, this constraint will not result in toolchain resolution failures.\\n    exec_compatible_with = [\\\"@platforms//os:macos\\\", \\\"@platforms//cpu:x86_64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk17_macos//:jdk\\\",\\n)\\n\"\n            }\n          },\n          \"remotejdk21_macos_aarch64_toolchain_config_repo\": {\n            \"bzlFile\": \"@@rules_java~//toolchains:remote_java_repository.bzl\",\n            \"ruleClassName\": \"_toolchain_config\",\n            \"attributes\": {\n              \"build_file\": \"\\nconfig_setting(\\n    name = \\\"prefix_version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"remotejdk_21\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nconfig_setting(\\n    name = \\\"version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"21\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nalias(\\n    name = \\\"version_or_prefix_version_setting\\\",\\n    actual = select({\\n        \\\":version_setting\\\": \\\":version_setting\\\",\\n        \\\"//conditions:default\\\": \\\":prefix_version_setting\\\",\\n    }),\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\ntoolchain(\\n    name = \\\"toolchain\\\",\\n    target_compatible_with = [\\\"@platforms//os:macos\\\", \\\"@platforms//cpu:aarch64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk21_macos_aarch64//:jdk\\\",\\n)\\ntoolchain(\\n    name = \\\"bootstrap_runtime_toolchain\\\",\\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\\n    # the same configuration, this constraint will not result in toolchain resolution failures.\\n    exec_compatible_with = [\\\"@platforms//os:macos\\\", \\\"@platforms//cpu:aarch64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk21_macos_aarch64//:jdk\\\",\\n)\\n\"\n            }\n          },\n          \"remotejdk17_linux_aarch64_toolchain_config_repo\": {\n            \"bzlFile\": \"@@rules_java~//toolchains:remote_java_repository.bzl\",\n            \"ruleClassName\": \"_toolchain_config\",\n            \"attributes\": {\n              \"build_file\": \"\\nconfig_setting(\\n    name = \\\"prefix_version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"remotejdk_17\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nconfig_setting(\\n    name = \\\"version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"17\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nalias(\\n    name = \\\"version_or_prefix_version_setting\\\",\\n    actual = select({\\n        \\\":version_setting\\\": \\\":version_setting\\\",\\n        \\\"//conditions:default\\\": \\\":prefix_version_setting\\\",\\n    }),\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\ntoolchain(\\n    name = \\\"toolchain\\\",\\n    target_compatible_with = [\\\"@platforms//os:linux\\\", \\\"@platforms//cpu:aarch64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk17_linux_aarch64//:jdk\\\",\\n)\\ntoolchain(\\n    name = \\\"bootstrap_runtime_toolchain\\\",\\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\\n    # the same configuration, this constraint will not result in toolchain resolution failures.\\n    exec_compatible_with = [\\\"@platforms//os:linux\\\", \\\"@platforms//cpu:aarch64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk17_linux_aarch64//:jdk\\\",\\n)\\n\"\n            }\n          },\n          \"remotejdk21_macos_aarch64\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"build_file_content\": \"load(\\\"@rules_java//java:defs.bzl\\\", \\\"java_runtime\\\")\\n\\npackage(default_visibility = [\\\"//visibility:public\\\"])\\n\\nexports_files([\\\"WORKSPACE\\\", \\\"BUILD.bazel\\\"])\\n\\nfilegroup(\\n    name = \\\"jre\\\",\\n    srcs = glob(\\n        [\\n            \\\"jre/bin/**\\\",\\n            \\\"jre/lib/**\\\",\\n        ],\\n        allow_empty = True,\\n        # In some configurations, Java browser plugin is considered harmful and\\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\\n        # so do not include it in JRE on Windows.\\n        exclude = [\\\"jre/bin/plugin2/**\\\"],\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-bin\\\",\\n    srcs = glob(\\n        [\\\"bin/**\\\"],\\n        # The JDK on Windows sometimes contains a directory called\\n        # \\\"%systemroot%\\\", which is not a valid label.\\n        exclude = [\\\"**/*%*/**\\\"],\\n    ),\\n)\\n\\n# This folder holds security policies.\\nfilegroup(\\n    name = \\\"jdk-conf\\\",\\n    srcs = glob(\\n        [\\\"conf/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-include\\\",\\n    srcs = glob(\\n        [\\\"include/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-lib\\\",\\n    srcs = glob(\\n        [\\\"lib/**\\\", \\\"release\\\"],\\n        allow_empty = True,\\n        exclude = [\\n            \\\"lib/missioncontrol/**\\\",\\n            \\\"lib/visualvm/**\\\",\\n        ],\\n    ),\\n)\\n\\njava_runtime(\\n    name = \\\"jdk\\\",\\n    srcs = [\\n        \\\":jdk-bin\\\",\\n        \\\":jdk-conf\\\",\\n        \\\":jdk-include\\\",\\n        \\\":jdk-lib\\\",\\n        \\\":jre\\\",\\n    ],\\n    # Provide the 'java` binary explicitly so that the correct path is used by\\n    # Bazel even when the host platform differs from the execution platform.\\n    # Exactly one of the two globs will be empty depending on the host platform.\\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\\n    # glob will fail without allow_empty = True, even if the overall result is\\n    # non-empty.\\n    java = glob([\\\"bin/java.exe\\\", \\\"bin/java\\\"], allow_empty = True)[0],\\n    version = 21,\\n)\\n\",\n              \"sha256\": \"e8260516de8b60661422a725f1df2c36ef888f6fb35393566b00e7325db3d04e\",\n              \"strip_prefix\": \"zulu21.32.17-ca-jdk21.0.2-macosx_aarch64\",\n              \"urls\": [\n                \"https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.32.17-ca-jdk21.0.2-macosx_aarch64.tar.gz\",\n                \"https://cdn.azul.com/zulu/bin/zulu21.32.17-ca-jdk21.0.2-macosx_aarch64.tar.gz\"\n              ]\n            }\n          },\n          \"remotejdk17_linux_toolchain_config_repo\": {\n            \"bzlFile\": \"@@rules_java~//toolchains:remote_java_repository.bzl\",\n            \"ruleClassName\": \"_toolchain_config\",\n            \"attributes\": {\n              \"build_file\": \"\\nconfig_setting(\\n    name = \\\"prefix_version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"remotejdk_17\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nconfig_setting(\\n    name = \\\"version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"17\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nalias(\\n    name = \\\"version_or_prefix_version_setting\\\",\\n    actual = select({\\n        \\\":version_setting\\\": \\\":version_setting\\\",\\n        \\\"//conditions:default\\\": \\\":prefix_version_setting\\\",\\n    }),\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\ntoolchain(\\n    name = \\\"toolchain\\\",\\n    target_compatible_with = [\\\"@platforms//os:linux\\\", \\\"@platforms//cpu:x86_64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk17_linux//:jdk\\\",\\n)\\ntoolchain(\\n    name = \\\"bootstrap_runtime_toolchain\\\",\\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\\n    # the same configuration, this constraint will not result in toolchain resolution failures.\\n    exec_compatible_with = [\\\"@platforms//os:linux\\\", \\\"@platforms//cpu:x86_64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk17_linux//:jdk\\\",\\n)\\n\"\n            }\n          },\n          \"remotejdk17_macos_aarch64\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"build_file_content\": \"load(\\\"@rules_java//java:defs.bzl\\\", \\\"java_runtime\\\")\\n\\npackage(default_visibility = [\\\"//visibility:public\\\"])\\n\\nexports_files([\\\"WORKSPACE\\\", \\\"BUILD.bazel\\\"])\\n\\nfilegroup(\\n    name = \\\"jre\\\",\\n    srcs = glob(\\n        [\\n            \\\"jre/bin/**\\\",\\n            \\\"jre/lib/**\\\",\\n        ],\\n        allow_empty = True,\\n        # In some configurations, Java browser plugin is considered harmful and\\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\\n        # so do not include it in JRE on Windows.\\n        exclude = [\\\"jre/bin/plugin2/**\\\"],\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-bin\\\",\\n    srcs = glob(\\n        [\\\"bin/**\\\"],\\n        # The JDK on Windows sometimes contains a directory called\\n        # \\\"%systemroot%\\\", which is not a valid label.\\n        exclude = [\\\"**/*%*/**\\\"],\\n    ),\\n)\\n\\n# This folder holds security policies.\\nfilegroup(\\n    name = \\\"jdk-conf\\\",\\n    srcs = glob(\\n        [\\\"conf/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-include\\\",\\n    srcs = glob(\\n        [\\\"include/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-lib\\\",\\n    srcs = glob(\\n        [\\\"lib/**\\\", \\\"release\\\"],\\n        allow_empty = True,\\n        exclude = [\\n            \\\"lib/missioncontrol/**\\\",\\n            \\\"lib/visualvm/**\\\",\\n        ],\\n    ),\\n)\\n\\njava_runtime(\\n    name = \\\"jdk\\\",\\n    srcs = [\\n        \\\":jdk-bin\\\",\\n        \\\":jdk-conf\\\",\\n        \\\":jdk-include\\\",\\n        \\\":jdk-lib\\\",\\n        \\\":jre\\\",\\n    ],\\n    # Provide the 'java` binary explicitly so that the correct path is used by\\n    # Bazel even when the host platform differs from the execution platform.\\n    # Exactly one of the two globs will be empty depending on the host platform.\\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\\n    # glob will fail without allow_empty = True, even if the overall result is\\n    # non-empty.\\n    java = glob([\\\"bin/java.exe\\\", \\\"bin/java\\\"], allow_empty = True)[0],\\n    version = 17,\\n)\\n\",\n              \"sha256\": \"314b04568ec0ae9b36ba03c9cbd42adc9e1265f74678923b19297d66eb84dcca\",\n              \"strip_prefix\": \"zulu17.44.53-ca-jdk17.0.8.1-macosx_aarch64\",\n              \"urls\": [\n                \"https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_aarch64.tar.gz\",\n                \"https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_aarch64.tar.gz\"\n              ]\n            }\n          },\n          \"remote_java_tools_windows\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"sha256\": \"fe2f88169696d6c6fc6e90ba61bb46be7d0ae3693cbafdf336041bf56679e8d1\",\n              \"urls\": [\n                \"https://mirror.bazel.build/bazel_java_tools/releases/java/v13.4/java_tools_windows-v13.4.zip\",\n                \"https://github.com/bazelbuild/java_tools/releases/download/java_v13.4/java_tools_windows-v13.4.zip\"\n              ]\n            }\n          },\n          \"remotejdk11_win\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"build_file_content\": \"load(\\\"@rules_java//java:defs.bzl\\\", \\\"java_runtime\\\")\\n\\npackage(default_visibility = [\\\"//visibility:public\\\"])\\n\\nexports_files([\\\"WORKSPACE\\\", \\\"BUILD.bazel\\\"])\\n\\nfilegroup(\\n    name = \\\"jre\\\",\\n    srcs = glob(\\n        [\\n            \\\"jre/bin/**\\\",\\n            \\\"jre/lib/**\\\",\\n        ],\\n        allow_empty = True,\\n        # In some configurations, Java browser plugin is considered harmful and\\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\\n        # so do not include it in JRE on Windows.\\n        exclude = [\\\"jre/bin/plugin2/**\\\"],\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-bin\\\",\\n    srcs = glob(\\n        [\\\"bin/**\\\"],\\n        # The JDK on Windows sometimes contains a directory called\\n        # \\\"%systemroot%\\\", which is not a valid label.\\n        exclude = [\\\"**/*%*/**\\\"],\\n    ),\\n)\\n\\n# This folder holds security policies.\\nfilegroup(\\n    name = \\\"jdk-conf\\\",\\n    srcs = glob(\\n        [\\\"conf/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-include\\\",\\n    srcs = glob(\\n        [\\\"include/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-lib\\\",\\n    srcs = glob(\\n        [\\\"lib/**\\\", \\\"release\\\"],\\n        allow_empty = True,\\n        exclude = [\\n            \\\"lib/missioncontrol/**\\\",\\n            \\\"lib/visualvm/**\\\",\\n        ],\\n    ),\\n)\\n\\njava_runtime(\\n    name = \\\"jdk\\\",\\n    srcs = [\\n        \\\":jdk-bin\\\",\\n        \\\":jdk-conf\\\",\\n        \\\":jdk-include\\\",\\n        \\\":jdk-lib\\\",\\n        \\\":jre\\\",\\n    ],\\n    # Provide the 'java` binary explicitly so that the correct path is used by\\n    # Bazel even when the host platform differs from the execution platform.\\n    # Exactly one of the two globs will be empty depending on the host platform.\\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\\n    # glob will fail without allow_empty = True, even if the overall result is\\n    # non-empty.\\n    java = glob([\\\"bin/java.exe\\\", \\\"bin/java\\\"], allow_empty = True)[0],\\n    version = 11,\\n)\\n\",\n              \"sha256\": \"43408193ce2fa0862819495b5ae8541085b95660153f2adcf91a52d3a1710e83\",\n              \"strip_prefix\": \"zulu11.66.15-ca-jdk11.0.20-win_x64\",\n              \"urls\": [\n                \"https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-win_x64.zip\",\n                \"https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-win_x64.zip\"\n              ]\n            }\n          },\n          \"remotejdk11_win_toolchain_config_repo\": {\n            \"bzlFile\": \"@@rules_java~//toolchains:remote_java_repository.bzl\",\n            \"ruleClassName\": \"_toolchain_config\",\n            \"attributes\": {\n              \"build_file\": \"\\nconfig_setting(\\n    name = \\\"prefix_version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"remotejdk_11\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nconfig_setting(\\n    name = \\\"version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"11\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nalias(\\n    name = \\\"version_or_prefix_version_setting\\\",\\n    actual = select({\\n        \\\":version_setting\\\": \\\":version_setting\\\",\\n        \\\"//conditions:default\\\": \\\":prefix_version_setting\\\",\\n    }),\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\ntoolchain(\\n    name = \\\"toolchain\\\",\\n    target_compatible_with = [\\\"@platforms//os:windows\\\", \\\"@platforms//cpu:x86_64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk11_win//:jdk\\\",\\n)\\ntoolchain(\\n    name = \\\"bootstrap_runtime_toolchain\\\",\\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\\n    # the same configuration, this constraint will not result in toolchain resolution failures.\\n    exec_compatible_with = [\\\"@platforms//os:windows\\\", \\\"@platforms//cpu:x86_64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk11_win//:jdk\\\",\\n)\\n\"\n            }\n          },\n          \"remotejdk11_linux_aarch64\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"build_file_content\": \"load(\\\"@rules_java//java:defs.bzl\\\", \\\"java_runtime\\\")\\n\\npackage(default_visibility = [\\\"//visibility:public\\\"])\\n\\nexports_files([\\\"WORKSPACE\\\", \\\"BUILD.bazel\\\"])\\n\\nfilegroup(\\n    name = \\\"jre\\\",\\n    srcs = glob(\\n        [\\n            \\\"jre/bin/**\\\",\\n            \\\"jre/lib/**\\\",\\n        ],\\n        allow_empty = True,\\n        # In some configurations, Java browser plugin is considered harmful and\\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\\n        # so do not include it in JRE on Windows.\\n        exclude = [\\\"jre/bin/plugin2/**\\\"],\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-bin\\\",\\n    srcs = glob(\\n        [\\\"bin/**\\\"],\\n        # The JDK on Windows sometimes contains a directory called\\n        # \\\"%systemroot%\\\", which is not a valid label.\\n        exclude = [\\\"**/*%*/**\\\"],\\n    ),\\n)\\n\\n# This folder holds security policies.\\nfilegroup(\\n    name = \\\"jdk-conf\\\",\\n    srcs = glob(\\n        [\\\"conf/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-include\\\",\\n    srcs = glob(\\n        [\\\"include/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-lib\\\",\\n    srcs = glob(\\n        [\\\"lib/**\\\", \\\"release\\\"],\\n        allow_empty = True,\\n        exclude = [\\n            \\\"lib/missioncontrol/**\\\",\\n            \\\"lib/visualvm/**\\\",\\n        ],\\n    ),\\n)\\n\\njava_runtime(\\n    name = \\\"jdk\\\",\\n    srcs = [\\n        \\\":jdk-bin\\\",\\n        \\\":jdk-conf\\\",\\n        \\\":jdk-include\\\",\\n        \\\":jdk-lib\\\",\\n        \\\":jre\\\",\\n    ],\\n    # Provide the 'java` binary explicitly so that the correct path is used by\\n    # Bazel even when the host platform differs from the execution platform.\\n    # Exactly one of the two globs will be empty depending on the host platform.\\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\\n    # glob will fail without allow_empty = True, even if the overall result is\\n    # non-empty.\\n    java = glob([\\\"bin/java.exe\\\", \\\"bin/java\\\"], allow_empty = True)[0],\\n    version = 11,\\n)\\n\",\n              \"sha256\": \"54174439f2b3fddd11f1048c397fe7bb45d4c9d66d452d6889b013d04d21c4de\",\n              \"strip_prefix\": \"zulu11.66.15-ca-jdk11.0.20-linux_aarch64\",\n              \"urls\": [\n                \"https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_aarch64.tar.gz\",\n                \"https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_aarch64.tar.gz\"\n              ]\n            }\n          },\n          \"remotejdk17_linux\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"build_file_content\": \"load(\\\"@rules_java//java:defs.bzl\\\", \\\"java_runtime\\\")\\n\\npackage(default_visibility = [\\\"//visibility:public\\\"])\\n\\nexports_files([\\\"WORKSPACE\\\", \\\"BUILD.bazel\\\"])\\n\\nfilegroup(\\n    name = \\\"jre\\\",\\n    srcs = glob(\\n        [\\n            \\\"jre/bin/**\\\",\\n            \\\"jre/lib/**\\\",\\n        ],\\n        allow_empty = True,\\n        # In some configurations, Java browser plugin is considered harmful and\\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\\n        # so do not include it in JRE on Windows.\\n        exclude = [\\\"jre/bin/plugin2/**\\\"],\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-bin\\\",\\n    srcs = glob(\\n        [\\\"bin/**\\\"],\\n        # The JDK on Windows sometimes contains a directory called\\n        # \\\"%systemroot%\\\", which is not a valid label.\\n        exclude = [\\\"**/*%*/**\\\"],\\n    ),\\n)\\n\\n# This folder holds security policies.\\nfilegroup(\\n    name = \\\"jdk-conf\\\",\\n    srcs = glob(\\n        [\\\"conf/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-include\\\",\\n    srcs = glob(\\n        [\\\"include/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-lib\\\",\\n    srcs = glob(\\n        [\\\"lib/**\\\", \\\"release\\\"],\\n        allow_empty = True,\\n        exclude = [\\n            \\\"lib/missioncontrol/**\\\",\\n            \\\"lib/visualvm/**\\\",\\n        ],\\n    ),\\n)\\n\\njava_runtime(\\n    name = \\\"jdk\\\",\\n    srcs = [\\n        \\\":jdk-bin\\\",\\n        \\\":jdk-conf\\\",\\n        \\\":jdk-include\\\",\\n        \\\":jdk-lib\\\",\\n        \\\":jre\\\",\\n    ],\\n    # Provide the 'java` binary explicitly so that the correct path is used by\\n    # Bazel even when the host platform differs from the execution platform.\\n    # Exactly one of the two globs will be empty depending on the host platform.\\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\\n    # glob will fail without allow_empty = True, even if the overall result is\\n    # non-empty.\\n    java = glob([\\\"bin/java.exe\\\", \\\"bin/java\\\"], allow_empty = True)[0],\\n    version = 17,\\n)\\n\",\n              \"sha256\": \"b9482f2304a1a68a614dfacddcf29569a72f0fac32e6c74f83dc1b9a157b8340\",\n              \"strip_prefix\": \"zulu17.44.53-ca-jdk17.0.8.1-linux_x64\",\n              \"urls\": [\n                \"https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_x64.tar.gz\",\n                \"https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_x64.tar.gz\"\n              ]\n            }\n          },\n          \"remotejdk11_linux_s390x_toolchain_config_repo\": {\n            \"bzlFile\": \"@@rules_java~//toolchains:remote_java_repository.bzl\",\n            \"ruleClassName\": \"_toolchain_config\",\n            \"attributes\": {\n              \"build_file\": \"\\nconfig_setting(\\n    name = \\\"prefix_version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"remotejdk_11\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nconfig_setting(\\n    name = \\\"version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"11\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nalias(\\n    name = \\\"version_or_prefix_version_setting\\\",\\n    actual = select({\\n        \\\":version_setting\\\": \\\":version_setting\\\",\\n        \\\"//conditions:default\\\": \\\":prefix_version_setting\\\",\\n    }),\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\ntoolchain(\\n    name = \\\"toolchain\\\",\\n    target_compatible_with = [\\\"@platforms//os:linux\\\", \\\"@platforms//cpu:s390x\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk11_linux_s390x//:jdk\\\",\\n)\\ntoolchain(\\n    name = \\\"bootstrap_runtime_toolchain\\\",\\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\\n    # the same configuration, this constraint will not result in toolchain resolution failures.\\n    exec_compatible_with = [\\\"@platforms//os:linux\\\", \\\"@platforms//cpu:s390x\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk11_linux_s390x//:jdk\\\",\\n)\\n\"\n            }\n          },\n          \"remotejdk11_linux_toolchain_config_repo\": {\n            \"bzlFile\": \"@@rules_java~//toolchains:remote_java_repository.bzl\",\n            \"ruleClassName\": \"_toolchain_config\",\n            \"attributes\": {\n              \"build_file\": \"\\nconfig_setting(\\n    name = \\\"prefix_version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"remotejdk_11\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nconfig_setting(\\n    name = \\\"version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"11\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nalias(\\n    name = \\\"version_or_prefix_version_setting\\\",\\n    actual = select({\\n        \\\":version_setting\\\": \\\":version_setting\\\",\\n        \\\"//conditions:default\\\": \\\":prefix_version_setting\\\",\\n    }),\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\ntoolchain(\\n    name = \\\"toolchain\\\",\\n    target_compatible_with = [\\\"@platforms//os:linux\\\", \\\"@platforms//cpu:x86_64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk11_linux//:jdk\\\",\\n)\\ntoolchain(\\n    name = \\\"bootstrap_runtime_toolchain\\\",\\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\\n    # the same configuration, this constraint will not result in toolchain resolution failures.\\n    exec_compatible_with = [\\\"@platforms//os:linux\\\", \\\"@platforms//cpu:x86_64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk11_linux//:jdk\\\",\\n)\\n\"\n            }\n          },\n          \"remotejdk11_macos\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"build_file_content\": \"load(\\\"@rules_java//java:defs.bzl\\\", \\\"java_runtime\\\")\\n\\npackage(default_visibility = [\\\"//visibility:public\\\"])\\n\\nexports_files([\\\"WORKSPACE\\\", \\\"BUILD.bazel\\\"])\\n\\nfilegroup(\\n    name = \\\"jre\\\",\\n    srcs = glob(\\n        [\\n            \\\"jre/bin/**\\\",\\n            \\\"jre/lib/**\\\",\\n        ],\\n        allow_empty = True,\\n        # In some configurations, Java browser plugin is considered harmful and\\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\\n        # so do not include it in JRE on Windows.\\n        exclude = [\\\"jre/bin/plugin2/**\\\"],\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-bin\\\",\\n    srcs = glob(\\n        [\\\"bin/**\\\"],\\n        # The JDK on Windows sometimes contains a directory called\\n        # \\\"%systemroot%\\\", which is not a valid label.\\n        exclude = [\\\"**/*%*/**\\\"],\\n    ),\\n)\\n\\n# This folder holds security policies.\\nfilegroup(\\n    name = \\\"jdk-conf\\\",\\n    srcs = glob(\\n        [\\\"conf/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-include\\\",\\n    srcs = glob(\\n        [\\\"include/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-lib\\\",\\n    srcs = glob(\\n        [\\\"lib/**\\\", \\\"release\\\"],\\n        allow_empty = True,\\n        exclude = [\\n            \\\"lib/missioncontrol/**\\\",\\n            \\\"lib/visualvm/**\\\",\\n        ],\\n    ),\\n)\\n\\njava_runtime(\\n    name = \\\"jdk\\\",\\n    srcs = [\\n        \\\":jdk-bin\\\",\\n        \\\":jdk-conf\\\",\\n        \\\":jdk-include\\\",\\n        \\\":jdk-lib\\\",\\n        \\\":jre\\\",\\n    ],\\n    # Provide the 'java` binary explicitly so that the correct path is used by\\n    # Bazel even when the host platform differs from the execution platform.\\n    # Exactly one of the two globs will be empty depending on the host platform.\\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\\n    # glob will fail without allow_empty = True, even if the overall result is\\n    # non-empty.\\n    java = glob([\\\"bin/java.exe\\\", \\\"bin/java\\\"], allow_empty = True)[0],\\n    version = 11,\\n)\\n\",\n              \"sha256\": \"bcaab11cfe586fae7583c6d9d311c64384354fb2638eb9a012eca4c3f1a1d9fd\",\n              \"strip_prefix\": \"zulu11.66.15-ca-jdk11.0.20-macosx_x64\",\n              \"urls\": [\n                \"https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-macosx_x64.tar.gz\",\n                \"https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-macosx_x64.tar.gz\"\n              ]\n            }\n          },\n          \"remotejdk11_win_arm64\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"build_file_content\": \"load(\\\"@rules_java//java:defs.bzl\\\", \\\"java_runtime\\\")\\n\\npackage(default_visibility = [\\\"//visibility:public\\\"])\\n\\nexports_files([\\\"WORKSPACE\\\", \\\"BUILD.bazel\\\"])\\n\\nfilegroup(\\n    name = \\\"jre\\\",\\n    srcs = glob(\\n        [\\n            \\\"jre/bin/**\\\",\\n            \\\"jre/lib/**\\\",\\n        ],\\n        allow_empty = True,\\n        # In some configurations, Java browser plugin is considered harmful and\\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\\n        # so do not include it in JRE on Windows.\\n        exclude = [\\\"jre/bin/plugin2/**\\\"],\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-bin\\\",\\n    srcs = glob(\\n        [\\\"bin/**\\\"],\\n        # The JDK on Windows sometimes contains a directory called\\n        # \\\"%systemroot%\\\", which is not a valid label.\\n        exclude = [\\\"**/*%*/**\\\"],\\n    ),\\n)\\n\\n# This folder holds security policies.\\nfilegroup(\\n    name = \\\"jdk-conf\\\",\\n    srcs = glob(\\n        [\\\"conf/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-include\\\",\\n    srcs = glob(\\n        [\\\"include/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-lib\\\",\\n    srcs = glob(\\n        [\\\"lib/**\\\", \\\"release\\\"],\\n        allow_empty = True,\\n        exclude = [\\n            \\\"lib/missioncontrol/**\\\",\\n            \\\"lib/visualvm/**\\\",\\n        ],\\n    ),\\n)\\n\\njava_runtime(\\n    name = \\\"jdk\\\",\\n    srcs = [\\n        \\\":jdk-bin\\\",\\n        \\\":jdk-conf\\\",\\n        \\\":jdk-include\\\",\\n        \\\":jdk-lib\\\",\\n        \\\":jre\\\",\\n    ],\\n    # Provide the 'java` binary explicitly so that the correct path is used by\\n    # Bazel even when the host platform differs from the execution platform.\\n    # Exactly one of the two globs will be empty depending on the host platform.\\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\\n    # glob will fail without allow_empty = True, even if the overall result is\\n    # non-empty.\\n    java = glob([\\\"bin/java.exe\\\", \\\"bin/java\\\"], allow_empty = True)[0],\\n    version = 11,\\n)\\n\",\n              \"sha256\": \"b8a28e6e767d90acf793ea6f5bed0bb595ba0ba5ebdf8b99f395266161e53ec2\",\n              \"strip_prefix\": \"jdk-11.0.13+8\",\n              \"urls\": [\n                \"https://mirror.bazel.build/aka.ms/download-jdk/microsoft-jdk-11.0.13.8.1-windows-aarch64.zip\"\n              ]\n            }\n          },\n          \"remotejdk17_macos\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"build_file_content\": \"load(\\\"@rules_java//java:defs.bzl\\\", \\\"java_runtime\\\")\\n\\npackage(default_visibility = [\\\"//visibility:public\\\"])\\n\\nexports_files([\\\"WORKSPACE\\\", \\\"BUILD.bazel\\\"])\\n\\nfilegroup(\\n    name = \\\"jre\\\",\\n    srcs = glob(\\n        [\\n            \\\"jre/bin/**\\\",\\n            \\\"jre/lib/**\\\",\\n        ],\\n        allow_empty = True,\\n        # In some configurations, Java browser plugin is considered harmful and\\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\\n        # so do not include it in JRE on Windows.\\n        exclude = [\\\"jre/bin/plugin2/**\\\"],\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-bin\\\",\\n    srcs = glob(\\n        [\\\"bin/**\\\"],\\n        # The JDK on Windows sometimes contains a directory called\\n        # \\\"%systemroot%\\\", which is not a valid label.\\n        exclude = [\\\"**/*%*/**\\\"],\\n    ),\\n)\\n\\n# This folder holds security policies.\\nfilegroup(\\n    name = \\\"jdk-conf\\\",\\n    srcs = glob(\\n        [\\\"conf/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-include\\\",\\n    srcs = glob(\\n        [\\\"include/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-lib\\\",\\n    srcs = glob(\\n        [\\\"lib/**\\\", \\\"release\\\"],\\n        allow_empty = True,\\n        exclude = [\\n            \\\"lib/missioncontrol/**\\\",\\n            \\\"lib/visualvm/**\\\",\\n        ],\\n    ),\\n)\\n\\njava_runtime(\\n    name = \\\"jdk\\\",\\n    srcs = [\\n        \\\":jdk-bin\\\",\\n        \\\":jdk-conf\\\",\\n        \\\":jdk-include\\\",\\n        \\\":jdk-lib\\\",\\n        \\\":jre\\\",\\n    ],\\n    # Provide the 'java` binary explicitly so that the correct path is used by\\n    # Bazel even when the host platform differs from the execution platform.\\n    # Exactly one of the two globs will be empty depending on the host platform.\\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\\n    # glob will fail without allow_empty = True, even if the overall result is\\n    # non-empty.\\n    java = glob([\\\"bin/java.exe\\\", \\\"bin/java\\\"], allow_empty = True)[0],\\n    version = 17,\\n)\\n\",\n              \"sha256\": \"640453e8afe8ffe0fb4dceb4535fb50db9c283c64665eebb0ba68b19e65f4b1f\",\n              \"strip_prefix\": \"zulu17.44.53-ca-jdk17.0.8.1-macosx_x64\",\n              \"urls\": [\n                \"https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_x64.tar.gz\",\n                \"https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_x64.tar.gz\"\n              ]\n            }\n          },\n          \"remotejdk21_macos\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"build_file_content\": \"load(\\\"@rules_java//java:defs.bzl\\\", \\\"java_runtime\\\")\\n\\npackage(default_visibility = [\\\"//visibility:public\\\"])\\n\\nexports_files([\\\"WORKSPACE\\\", \\\"BUILD.bazel\\\"])\\n\\nfilegroup(\\n    name = \\\"jre\\\",\\n    srcs = glob(\\n        [\\n            \\\"jre/bin/**\\\",\\n            \\\"jre/lib/**\\\",\\n        ],\\n        allow_empty = True,\\n        # In some configurations, Java browser plugin is considered harmful and\\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\\n        # so do not include it in JRE on Windows.\\n        exclude = [\\\"jre/bin/plugin2/**\\\"],\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-bin\\\",\\n    srcs = glob(\\n        [\\\"bin/**\\\"],\\n        # The JDK on Windows sometimes contains a directory called\\n        # \\\"%systemroot%\\\", which is not a valid label.\\n        exclude = [\\\"**/*%*/**\\\"],\\n    ),\\n)\\n\\n# This folder holds security policies.\\nfilegroup(\\n    name = \\\"jdk-conf\\\",\\n    srcs = glob(\\n        [\\\"conf/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-include\\\",\\n    srcs = glob(\\n        [\\\"include/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-lib\\\",\\n    srcs = glob(\\n        [\\\"lib/**\\\", \\\"release\\\"],\\n        allow_empty = True,\\n        exclude = [\\n            \\\"lib/missioncontrol/**\\\",\\n            \\\"lib/visualvm/**\\\",\\n        ],\\n    ),\\n)\\n\\njava_runtime(\\n    name = \\\"jdk\\\",\\n    srcs = [\\n        \\\":jdk-bin\\\",\\n        \\\":jdk-conf\\\",\\n        \\\":jdk-include\\\",\\n        \\\":jdk-lib\\\",\\n        \\\":jre\\\",\\n    ],\\n    # Provide the 'java` binary explicitly so that the correct path is used by\\n    # Bazel even when the host platform differs from the execution platform.\\n    # Exactly one of the two globs will be empty depending on the host platform.\\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\\n    # glob will fail without allow_empty = True, even if the overall result is\\n    # non-empty.\\n    java = glob([\\\"bin/java.exe\\\", \\\"bin/java\\\"], allow_empty = True)[0],\\n    version = 21,\\n)\\n\",\n              \"sha256\": \"3ad8fe288eb57d975c2786ae453a036aa46e47ab2ac3d81538ebae2a54d3c025\",\n              \"strip_prefix\": \"zulu21.32.17-ca-jdk21.0.2-macosx_x64\",\n              \"urls\": [\n                \"https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.32.17-ca-jdk21.0.2-macosx_x64.tar.gz\",\n                \"https://cdn.azul.com/zulu/bin/zulu21.32.17-ca-jdk21.0.2-macosx_x64.tar.gz\"\n              ]\n            }\n          },\n          \"remotejdk21_macos_toolchain_config_repo\": {\n            \"bzlFile\": \"@@rules_java~//toolchains:remote_java_repository.bzl\",\n            \"ruleClassName\": \"_toolchain_config\",\n            \"attributes\": {\n              \"build_file\": \"\\nconfig_setting(\\n    name = \\\"prefix_version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"remotejdk_21\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nconfig_setting(\\n    name = \\\"version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"21\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nalias(\\n    name = \\\"version_or_prefix_version_setting\\\",\\n    actual = select({\\n        \\\":version_setting\\\": \\\":version_setting\\\",\\n        \\\"//conditions:default\\\": \\\":prefix_version_setting\\\",\\n    }),\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\ntoolchain(\\n    name = \\\"toolchain\\\",\\n    target_compatible_with = [\\\"@platforms//os:macos\\\", \\\"@platforms//cpu:x86_64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk21_macos//:jdk\\\",\\n)\\ntoolchain(\\n    name = \\\"bootstrap_runtime_toolchain\\\",\\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\\n    # the same configuration, this constraint will not result in toolchain resolution failures.\\n    exec_compatible_with = [\\\"@platforms//os:macos\\\", \\\"@platforms//cpu:x86_64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk21_macos//:jdk\\\",\\n)\\n\"\n            }\n          },\n          \"remotejdk17_macos_aarch64_toolchain_config_repo\": {\n            \"bzlFile\": \"@@rules_java~//toolchains:remote_java_repository.bzl\",\n            \"ruleClassName\": \"_toolchain_config\",\n            \"attributes\": {\n              \"build_file\": \"\\nconfig_setting(\\n    name = \\\"prefix_version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"remotejdk_17\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nconfig_setting(\\n    name = \\\"version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"17\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nalias(\\n    name = \\\"version_or_prefix_version_setting\\\",\\n    actual = select({\\n        \\\":version_setting\\\": \\\":version_setting\\\",\\n        \\\"//conditions:default\\\": \\\":prefix_version_setting\\\",\\n    }),\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\ntoolchain(\\n    name = \\\"toolchain\\\",\\n    target_compatible_with = [\\\"@platforms//os:macos\\\", \\\"@platforms//cpu:aarch64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk17_macos_aarch64//:jdk\\\",\\n)\\ntoolchain(\\n    name = \\\"bootstrap_runtime_toolchain\\\",\\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\\n    # the same configuration, this constraint will not result in toolchain resolution failures.\\n    exec_compatible_with = [\\\"@platforms//os:macos\\\", \\\"@platforms//cpu:aarch64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk17_macos_aarch64//:jdk\\\",\\n)\\n\"\n            }\n          },\n          \"remotejdk17_win\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"build_file_content\": \"load(\\\"@rules_java//java:defs.bzl\\\", \\\"java_runtime\\\")\\n\\npackage(default_visibility = [\\\"//visibility:public\\\"])\\n\\nexports_files([\\\"WORKSPACE\\\", \\\"BUILD.bazel\\\"])\\n\\nfilegroup(\\n    name = \\\"jre\\\",\\n    srcs = glob(\\n        [\\n            \\\"jre/bin/**\\\",\\n            \\\"jre/lib/**\\\",\\n        ],\\n        allow_empty = True,\\n        # In some configurations, Java browser plugin is considered harmful and\\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\\n        # so do not include it in JRE on Windows.\\n        exclude = [\\\"jre/bin/plugin2/**\\\"],\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-bin\\\",\\n    srcs = glob(\\n        [\\\"bin/**\\\"],\\n        # The JDK on Windows sometimes contains a directory called\\n        # \\\"%systemroot%\\\", which is not a valid label.\\n        exclude = [\\\"**/*%*/**\\\"],\\n    ),\\n)\\n\\n# This folder holds security policies.\\nfilegroup(\\n    name = \\\"jdk-conf\\\",\\n    srcs = glob(\\n        [\\\"conf/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-include\\\",\\n    srcs = glob(\\n        [\\\"include/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-lib\\\",\\n    srcs = glob(\\n        [\\\"lib/**\\\", \\\"release\\\"],\\n        allow_empty = True,\\n        exclude = [\\n            \\\"lib/missioncontrol/**\\\",\\n            \\\"lib/visualvm/**\\\",\\n        ],\\n    ),\\n)\\n\\njava_runtime(\\n    name = \\\"jdk\\\",\\n    srcs = [\\n        \\\":jdk-bin\\\",\\n        \\\":jdk-conf\\\",\\n        \\\":jdk-include\\\",\\n        \\\":jdk-lib\\\",\\n        \\\":jre\\\",\\n    ],\\n    # Provide the 'java` binary explicitly so that the correct path is used by\\n    # Bazel even when the host platform differs from the execution platform.\\n    # Exactly one of the two globs will be empty depending on the host platform.\\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\\n    # glob will fail without allow_empty = True, even if the overall result is\\n    # non-empty.\\n    java = glob([\\\"bin/java.exe\\\", \\\"bin/java\\\"], allow_empty = True)[0],\\n    version = 17,\\n)\\n\",\n              \"sha256\": \"192f2afca57701de6ec496234f7e45d971bf623ff66b8ee4a5c81582054e5637\",\n              \"strip_prefix\": \"zulu17.44.53-ca-jdk17.0.8.1-win_x64\",\n              \"urls\": [\n                \"https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_x64.zip\",\n                \"https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_x64.zip\"\n              ]\n            }\n          },\n          \"remotejdk11_macos_aarch64_toolchain_config_repo\": {\n            \"bzlFile\": \"@@rules_java~//toolchains:remote_java_repository.bzl\",\n            \"ruleClassName\": \"_toolchain_config\",\n            \"attributes\": {\n              \"build_file\": \"\\nconfig_setting(\\n    name = \\\"prefix_version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"remotejdk_11\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nconfig_setting(\\n    name = \\\"version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"11\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nalias(\\n    name = \\\"version_or_prefix_version_setting\\\",\\n    actual = select({\\n        \\\":version_setting\\\": \\\":version_setting\\\",\\n        \\\"//conditions:default\\\": \\\":prefix_version_setting\\\",\\n    }),\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\ntoolchain(\\n    name = \\\"toolchain\\\",\\n    target_compatible_with = [\\\"@platforms//os:macos\\\", \\\"@platforms//cpu:aarch64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk11_macos_aarch64//:jdk\\\",\\n)\\ntoolchain(\\n    name = \\\"bootstrap_runtime_toolchain\\\",\\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\\n    # the same configuration, this constraint will not result in toolchain resolution failures.\\n    exec_compatible_with = [\\\"@platforms//os:macos\\\", \\\"@platforms//cpu:aarch64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk11_macos_aarch64//:jdk\\\",\\n)\\n\"\n            }\n          },\n          \"remotejdk11_linux_ppc64le_toolchain_config_repo\": {\n            \"bzlFile\": \"@@rules_java~//toolchains:remote_java_repository.bzl\",\n            \"ruleClassName\": \"_toolchain_config\",\n            \"attributes\": {\n              \"build_file\": \"\\nconfig_setting(\\n    name = \\\"prefix_version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"remotejdk_11\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nconfig_setting(\\n    name = \\\"version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"11\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nalias(\\n    name = \\\"version_or_prefix_version_setting\\\",\\n    actual = select({\\n        \\\":version_setting\\\": \\\":version_setting\\\",\\n        \\\"//conditions:default\\\": \\\":prefix_version_setting\\\",\\n    }),\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\ntoolchain(\\n    name = \\\"toolchain\\\",\\n    target_compatible_with = [\\\"@platforms//os:linux\\\", \\\"@platforms//cpu:ppc\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk11_linux_ppc64le//:jdk\\\",\\n)\\ntoolchain(\\n    name = \\\"bootstrap_runtime_toolchain\\\",\\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\\n    # the same configuration, this constraint will not result in toolchain resolution failures.\\n    exec_compatible_with = [\\\"@platforms//os:linux\\\", \\\"@platforms//cpu:ppc\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk11_linux_ppc64le//:jdk\\\",\\n)\\n\"\n            }\n          },\n          \"remotejdk21_linux\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"build_file_content\": \"load(\\\"@rules_java//java:defs.bzl\\\", \\\"java_runtime\\\")\\n\\npackage(default_visibility = [\\\"//visibility:public\\\"])\\n\\nexports_files([\\\"WORKSPACE\\\", \\\"BUILD.bazel\\\"])\\n\\nfilegroup(\\n    name = \\\"jre\\\",\\n    srcs = glob(\\n        [\\n            \\\"jre/bin/**\\\",\\n            \\\"jre/lib/**\\\",\\n        ],\\n        allow_empty = True,\\n        # In some configurations, Java browser plugin is considered harmful and\\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\\n        # so do not include it in JRE on Windows.\\n        exclude = [\\\"jre/bin/plugin2/**\\\"],\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-bin\\\",\\n    srcs = glob(\\n        [\\\"bin/**\\\"],\\n        # The JDK on Windows sometimes contains a directory called\\n        # \\\"%systemroot%\\\", which is not a valid label.\\n        exclude = [\\\"**/*%*/**\\\"],\\n    ),\\n)\\n\\n# This folder holds security policies.\\nfilegroup(\\n    name = \\\"jdk-conf\\\",\\n    srcs = glob(\\n        [\\\"conf/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-include\\\",\\n    srcs = glob(\\n        [\\\"include/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-lib\\\",\\n    srcs = glob(\\n        [\\\"lib/**\\\", \\\"release\\\"],\\n        allow_empty = True,\\n        exclude = [\\n            \\\"lib/missioncontrol/**\\\",\\n            \\\"lib/visualvm/**\\\",\\n        ],\\n    ),\\n)\\n\\njava_runtime(\\n    name = \\\"jdk\\\",\\n    srcs = [\\n        \\\":jdk-bin\\\",\\n        \\\":jdk-conf\\\",\\n        \\\":jdk-include\\\",\\n        \\\":jdk-lib\\\",\\n        \\\":jre\\\",\\n    ],\\n    # Provide the 'java` binary explicitly so that the correct path is used by\\n    # Bazel even when the host platform differs from the execution platform.\\n    # Exactly one of the two globs will be empty depending on the host platform.\\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\\n    # glob will fail without allow_empty = True, even if the overall result is\\n    # non-empty.\\n    java = glob([\\\"bin/java.exe\\\", \\\"bin/java\\\"], allow_empty = True)[0],\\n    version = 21,\\n)\\n\",\n              \"sha256\": \"5ad730fbee6bb49bfff10bf39e84392e728d89103d3474a7e5def0fd134b300a\",\n              \"strip_prefix\": \"zulu21.32.17-ca-jdk21.0.2-linux_x64\",\n              \"urls\": [\n                \"https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.32.17-ca-jdk21.0.2-linux_x64.tar.gz\",\n                \"https://cdn.azul.com/zulu/bin/zulu21.32.17-ca-jdk21.0.2-linux_x64.tar.gz\"\n              ]\n            }\n          },\n          \"remote_java_tools_linux\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"sha256\": \"ba10f09a138cf185d04cbc807d67a3da42ab13d618c5d1ce20d776e199c33a39\",\n              \"urls\": [\n                \"https://mirror.bazel.build/bazel_java_tools/releases/java/v13.4/java_tools_linux-v13.4.zip\",\n                \"https://github.com/bazelbuild/java_tools/releases/download/java_v13.4/java_tools_linux-v13.4.zip\"\n              ]\n            }\n          },\n          \"remotejdk21_win\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"build_file_content\": \"load(\\\"@rules_java//java:defs.bzl\\\", \\\"java_runtime\\\")\\n\\npackage(default_visibility = [\\\"//visibility:public\\\"])\\n\\nexports_files([\\\"WORKSPACE\\\", \\\"BUILD.bazel\\\"])\\n\\nfilegroup(\\n    name = \\\"jre\\\",\\n    srcs = glob(\\n        [\\n            \\\"jre/bin/**\\\",\\n            \\\"jre/lib/**\\\",\\n        ],\\n        allow_empty = True,\\n        # In some configurations, Java browser plugin is considered harmful and\\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\\n        # so do not include it in JRE on Windows.\\n        exclude = [\\\"jre/bin/plugin2/**\\\"],\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-bin\\\",\\n    srcs = glob(\\n        [\\\"bin/**\\\"],\\n        # The JDK on Windows sometimes contains a directory called\\n        # \\\"%systemroot%\\\", which is not a valid label.\\n        exclude = [\\\"**/*%*/**\\\"],\\n    ),\\n)\\n\\n# This folder holds security policies.\\nfilegroup(\\n    name = \\\"jdk-conf\\\",\\n    srcs = glob(\\n        [\\\"conf/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-include\\\",\\n    srcs = glob(\\n        [\\\"include/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-lib\\\",\\n    srcs = glob(\\n        [\\\"lib/**\\\", \\\"release\\\"],\\n        allow_empty = True,\\n        exclude = [\\n            \\\"lib/missioncontrol/**\\\",\\n            \\\"lib/visualvm/**\\\",\\n        ],\\n    ),\\n)\\n\\njava_runtime(\\n    name = \\\"jdk\\\",\\n    srcs = [\\n        \\\":jdk-bin\\\",\\n        \\\":jdk-conf\\\",\\n        \\\":jdk-include\\\",\\n        \\\":jdk-lib\\\",\\n        \\\":jre\\\",\\n    ],\\n    # Provide the 'java` binary explicitly so that the correct path is used by\\n    # Bazel even when the host platform differs from the execution platform.\\n    # Exactly one of the two globs will be empty depending on the host platform.\\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\\n    # glob will fail without allow_empty = True, even if the overall result is\\n    # non-empty.\\n    java = glob([\\\"bin/java.exe\\\", \\\"bin/java\\\"], allow_empty = True)[0],\\n    version = 21,\\n)\\n\",\n              \"sha256\": \"f7cc15ca17295e69c907402dfe8db240db446e75d3b150da7bf67243cded93de\",\n              \"strip_prefix\": \"zulu21.32.17-ca-jdk21.0.2-win_x64\",\n              \"urls\": [\n                \"https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.32.17-ca-jdk21.0.2-win_x64.zip\",\n                \"https://cdn.azul.com/zulu/bin/zulu21.32.17-ca-jdk21.0.2-win_x64.zip\"\n              ]\n            }\n          },\n          \"remotejdk21_linux_aarch64\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"build_file_content\": \"load(\\\"@rules_java//java:defs.bzl\\\", \\\"java_runtime\\\")\\n\\npackage(default_visibility = [\\\"//visibility:public\\\"])\\n\\nexports_files([\\\"WORKSPACE\\\", \\\"BUILD.bazel\\\"])\\n\\nfilegroup(\\n    name = \\\"jre\\\",\\n    srcs = glob(\\n        [\\n            \\\"jre/bin/**\\\",\\n            \\\"jre/lib/**\\\",\\n        ],\\n        allow_empty = True,\\n        # In some configurations, Java browser plugin is considered harmful and\\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\\n        # so do not include it in JRE on Windows.\\n        exclude = [\\\"jre/bin/plugin2/**\\\"],\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-bin\\\",\\n    srcs = glob(\\n        [\\\"bin/**\\\"],\\n        # The JDK on Windows sometimes contains a directory called\\n        # \\\"%systemroot%\\\", which is not a valid label.\\n        exclude = [\\\"**/*%*/**\\\"],\\n    ),\\n)\\n\\n# This folder holds security policies.\\nfilegroup(\\n    name = \\\"jdk-conf\\\",\\n    srcs = glob(\\n        [\\\"conf/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-include\\\",\\n    srcs = glob(\\n        [\\\"include/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-lib\\\",\\n    srcs = glob(\\n        [\\\"lib/**\\\", \\\"release\\\"],\\n        allow_empty = True,\\n        exclude = [\\n            \\\"lib/missioncontrol/**\\\",\\n            \\\"lib/visualvm/**\\\",\\n        ],\\n    ),\\n)\\n\\njava_runtime(\\n    name = \\\"jdk\\\",\\n    srcs = [\\n        \\\":jdk-bin\\\",\\n        \\\":jdk-conf\\\",\\n        \\\":jdk-include\\\",\\n        \\\":jdk-lib\\\",\\n        \\\":jre\\\",\\n    ],\\n    # Provide the 'java` binary explicitly so that the correct path is used by\\n    # Bazel even when the host platform differs from the execution platform.\\n    # Exactly one of the two globs will be empty depending on the host platform.\\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\\n    # glob will fail without allow_empty = True, even if the overall result is\\n    # non-empty.\\n    java = glob([\\\"bin/java.exe\\\", \\\"bin/java\\\"], allow_empty = True)[0],\\n    version = 21,\\n)\\n\",\n              \"sha256\": \"ce7df1af5d44a9f455617c4b8891443fbe3e4b269c777d8b82ed66f77167cfe0\",\n              \"strip_prefix\": \"zulu21.32.17-ca-jdk21.0.2-linux_aarch64\",\n              \"urls\": [\n                \"https://cdn.azul.com/zulu/bin/zulu21.32.17-ca-jdk21.0.2-linux_aarch64.tar.gz\",\n                \"https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.32.17-ca-jdk21.0.2-linux_aarch64.tar.gz\"\n              ]\n            }\n          },\n          \"remotejdk11_linux_aarch64_toolchain_config_repo\": {\n            \"bzlFile\": \"@@rules_java~//toolchains:remote_java_repository.bzl\",\n            \"ruleClassName\": \"_toolchain_config\",\n            \"attributes\": {\n              \"build_file\": \"\\nconfig_setting(\\n    name = \\\"prefix_version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"remotejdk_11\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nconfig_setting(\\n    name = \\\"version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"11\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nalias(\\n    name = \\\"version_or_prefix_version_setting\\\",\\n    actual = select({\\n        \\\":version_setting\\\": \\\":version_setting\\\",\\n        \\\"//conditions:default\\\": \\\":prefix_version_setting\\\",\\n    }),\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\ntoolchain(\\n    name = \\\"toolchain\\\",\\n    target_compatible_with = [\\\"@platforms//os:linux\\\", \\\"@platforms//cpu:aarch64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk11_linux_aarch64//:jdk\\\",\\n)\\ntoolchain(\\n    name = \\\"bootstrap_runtime_toolchain\\\",\\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\\n    # the same configuration, this constraint will not result in toolchain resolution failures.\\n    exec_compatible_with = [\\\"@platforms//os:linux\\\", \\\"@platforms//cpu:aarch64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk11_linux_aarch64//:jdk\\\",\\n)\\n\"\n            }\n          },\n          \"remotejdk11_linux_s390x\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"build_file_content\": \"load(\\\"@rules_java//java:defs.bzl\\\", \\\"java_runtime\\\")\\n\\npackage(default_visibility = [\\\"//visibility:public\\\"])\\n\\nexports_files([\\\"WORKSPACE\\\", \\\"BUILD.bazel\\\"])\\n\\nfilegroup(\\n    name = \\\"jre\\\",\\n    srcs = glob(\\n        [\\n            \\\"jre/bin/**\\\",\\n            \\\"jre/lib/**\\\",\\n        ],\\n        allow_empty = True,\\n        # In some configurations, Java browser plugin is considered harmful and\\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\\n        # so do not include it in JRE on Windows.\\n        exclude = [\\\"jre/bin/plugin2/**\\\"],\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-bin\\\",\\n    srcs = glob(\\n        [\\\"bin/**\\\"],\\n        # The JDK on Windows sometimes contains a directory called\\n        # \\\"%systemroot%\\\", which is not a valid label.\\n        exclude = [\\\"**/*%*/**\\\"],\\n    ),\\n)\\n\\n# This folder holds security policies.\\nfilegroup(\\n    name = \\\"jdk-conf\\\",\\n    srcs = glob(\\n        [\\\"conf/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-include\\\",\\n    srcs = glob(\\n        [\\\"include/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-lib\\\",\\n    srcs = glob(\\n        [\\\"lib/**\\\", \\\"release\\\"],\\n        allow_empty = True,\\n        exclude = [\\n            \\\"lib/missioncontrol/**\\\",\\n            \\\"lib/visualvm/**\\\",\\n        ],\\n    ),\\n)\\n\\njava_runtime(\\n    name = \\\"jdk\\\",\\n    srcs = [\\n        \\\":jdk-bin\\\",\\n        \\\":jdk-conf\\\",\\n        \\\":jdk-include\\\",\\n        \\\":jdk-lib\\\",\\n        \\\":jre\\\",\\n    ],\\n    # Provide the 'java` binary explicitly so that the correct path is used by\\n    # Bazel even when the host platform differs from the execution platform.\\n    # Exactly one of the two globs will be empty depending on the host platform.\\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\\n    # glob will fail without allow_empty = True, even if the overall result is\\n    # non-empty.\\n    java = glob([\\\"bin/java.exe\\\", \\\"bin/java\\\"], allow_empty = True)[0],\\n    version = 11,\\n)\\n\",\n              \"sha256\": \"a58fc0361966af0a5d5a31a2d8a208e3c9bb0f54f345596fd80b99ea9a39788b\",\n              \"strip_prefix\": \"jdk-11.0.15+10\",\n              \"urls\": [\n                \"https://mirror.bazel.build/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_s390x_linux_hotspot_11.0.15_10.tar.gz\",\n                \"https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_s390x_linux_hotspot_11.0.15_10.tar.gz\"\n              ]\n            }\n          },\n          \"remotejdk17_linux_aarch64\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"build_file_content\": \"load(\\\"@rules_java//java:defs.bzl\\\", \\\"java_runtime\\\")\\n\\npackage(default_visibility = [\\\"//visibility:public\\\"])\\n\\nexports_files([\\\"WORKSPACE\\\", \\\"BUILD.bazel\\\"])\\n\\nfilegroup(\\n    name = \\\"jre\\\",\\n    srcs = glob(\\n        [\\n            \\\"jre/bin/**\\\",\\n            \\\"jre/lib/**\\\",\\n        ],\\n        allow_empty = True,\\n        # In some configurations, Java browser plugin is considered harmful and\\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\\n        # so do not include it in JRE on Windows.\\n        exclude = [\\\"jre/bin/plugin2/**\\\"],\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-bin\\\",\\n    srcs = glob(\\n        [\\\"bin/**\\\"],\\n        # The JDK on Windows sometimes contains a directory called\\n        # \\\"%systemroot%\\\", which is not a valid label.\\n        exclude = [\\\"**/*%*/**\\\"],\\n    ),\\n)\\n\\n# This folder holds security policies.\\nfilegroup(\\n    name = \\\"jdk-conf\\\",\\n    srcs = glob(\\n        [\\\"conf/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-include\\\",\\n    srcs = glob(\\n        [\\\"include/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-lib\\\",\\n    srcs = glob(\\n        [\\\"lib/**\\\", \\\"release\\\"],\\n        allow_empty = True,\\n        exclude = [\\n            \\\"lib/missioncontrol/**\\\",\\n            \\\"lib/visualvm/**\\\",\\n        ],\\n    ),\\n)\\n\\njava_runtime(\\n    name = \\\"jdk\\\",\\n    srcs = [\\n        \\\":jdk-bin\\\",\\n        \\\":jdk-conf\\\",\\n        \\\":jdk-include\\\",\\n        \\\":jdk-lib\\\",\\n        \\\":jre\\\",\\n    ],\\n    # Provide the 'java` binary explicitly so that the correct path is used by\\n    # Bazel even when the host platform differs from the execution platform.\\n    # Exactly one of the two globs will be empty depending on the host platform.\\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\\n    # glob will fail without allow_empty = True, even if the overall result is\\n    # non-empty.\\n    java = glob([\\\"bin/java.exe\\\", \\\"bin/java\\\"], allow_empty = True)[0],\\n    version = 17,\\n)\\n\",\n              \"sha256\": \"6531cef61e416d5a7b691555c8cf2bdff689201b8a001ff45ab6740062b44313\",\n              \"strip_prefix\": \"zulu17.44.53-ca-jdk17.0.8.1-linux_aarch64\",\n              \"urls\": [\n                \"https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_aarch64.tar.gz\",\n                \"https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_aarch64.tar.gz\"\n              ]\n            }\n          },\n          \"remotejdk17_win_arm64_toolchain_config_repo\": {\n            \"bzlFile\": \"@@rules_java~//toolchains:remote_java_repository.bzl\",\n            \"ruleClassName\": \"_toolchain_config\",\n            \"attributes\": {\n              \"build_file\": \"\\nconfig_setting(\\n    name = \\\"prefix_version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"remotejdk_17\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nconfig_setting(\\n    name = \\\"version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"17\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nalias(\\n    name = \\\"version_or_prefix_version_setting\\\",\\n    actual = select({\\n        \\\":version_setting\\\": \\\":version_setting\\\",\\n        \\\"//conditions:default\\\": \\\":prefix_version_setting\\\",\\n    }),\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\ntoolchain(\\n    name = \\\"toolchain\\\",\\n    target_compatible_with = [\\\"@platforms//os:windows\\\", \\\"@platforms//cpu:arm64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk17_win_arm64//:jdk\\\",\\n)\\ntoolchain(\\n    name = \\\"bootstrap_runtime_toolchain\\\",\\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\\n    # the same configuration, this constraint will not result in toolchain resolution failures.\\n    exec_compatible_with = [\\\"@platforms//os:windows\\\", \\\"@platforms//cpu:arm64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk17_win_arm64//:jdk\\\",\\n)\\n\"\n            }\n          },\n          \"remotejdk11_linux\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"build_file_content\": \"load(\\\"@rules_java//java:defs.bzl\\\", \\\"java_runtime\\\")\\n\\npackage(default_visibility = [\\\"//visibility:public\\\"])\\n\\nexports_files([\\\"WORKSPACE\\\", \\\"BUILD.bazel\\\"])\\n\\nfilegroup(\\n    name = \\\"jre\\\",\\n    srcs = glob(\\n        [\\n            \\\"jre/bin/**\\\",\\n            \\\"jre/lib/**\\\",\\n        ],\\n        allow_empty = True,\\n        # In some configurations, Java browser plugin is considered harmful and\\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\\n        # so do not include it in JRE on Windows.\\n        exclude = [\\\"jre/bin/plugin2/**\\\"],\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-bin\\\",\\n    srcs = glob(\\n        [\\\"bin/**\\\"],\\n        # The JDK on Windows sometimes contains a directory called\\n        # \\\"%systemroot%\\\", which is not a valid label.\\n        exclude = [\\\"**/*%*/**\\\"],\\n    ),\\n)\\n\\n# This folder holds security policies.\\nfilegroup(\\n    name = \\\"jdk-conf\\\",\\n    srcs = glob(\\n        [\\\"conf/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-include\\\",\\n    srcs = glob(\\n        [\\\"include/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-lib\\\",\\n    srcs = glob(\\n        [\\\"lib/**\\\", \\\"release\\\"],\\n        allow_empty = True,\\n        exclude = [\\n            \\\"lib/missioncontrol/**\\\",\\n            \\\"lib/visualvm/**\\\",\\n        ],\\n    ),\\n)\\n\\njava_runtime(\\n    name = \\\"jdk\\\",\\n    srcs = [\\n        \\\":jdk-bin\\\",\\n        \\\":jdk-conf\\\",\\n        \\\":jdk-include\\\",\\n        \\\":jdk-lib\\\",\\n        \\\":jre\\\",\\n    ],\\n    # Provide the 'java` binary explicitly so that the correct path is used by\\n    # Bazel even when the host platform differs from the execution platform.\\n    # Exactly one of the two globs will be empty depending on the host platform.\\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\\n    # glob will fail without allow_empty = True, even if the overall result is\\n    # non-empty.\\n    java = glob([\\\"bin/java.exe\\\", \\\"bin/java\\\"], allow_empty = True)[0],\\n    version = 11,\\n)\\n\",\n              \"sha256\": \"a34b404f87a08a61148b38e1416d837189e1df7a040d949e743633daf4695a3c\",\n              \"strip_prefix\": \"zulu11.66.15-ca-jdk11.0.20-linux_x64\",\n              \"urls\": [\n                \"https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_x64.tar.gz\",\n                \"https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_x64.tar.gz\"\n              ]\n            }\n          },\n          \"remotejdk11_macos_toolchain_config_repo\": {\n            \"bzlFile\": \"@@rules_java~//toolchains:remote_java_repository.bzl\",\n            \"ruleClassName\": \"_toolchain_config\",\n            \"attributes\": {\n              \"build_file\": \"\\nconfig_setting(\\n    name = \\\"prefix_version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"remotejdk_11\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nconfig_setting(\\n    name = \\\"version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"11\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nalias(\\n    name = \\\"version_or_prefix_version_setting\\\",\\n    actual = select({\\n        \\\":version_setting\\\": \\\":version_setting\\\",\\n        \\\"//conditions:default\\\": \\\":prefix_version_setting\\\",\\n    }),\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\ntoolchain(\\n    name = \\\"toolchain\\\",\\n    target_compatible_with = [\\\"@platforms//os:macos\\\", \\\"@platforms//cpu:x86_64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk11_macos//:jdk\\\",\\n)\\ntoolchain(\\n    name = \\\"bootstrap_runtime_toolchain\\\",\\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\\n    # the same configuration, this constraint will not result in toolchain resolution failures.\\n    exec_compatible_with = [\\\"@platforms//os:macos\\\", \\\"@platforms//cpu:x86_64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk11_macos//:jdk\\\",\\n)\\n\"\n            }\n          },\n          \"remotejdk17_linux_ppc64le_toolchain_config_repo\": {\n            \"bzlFile\": \"@@rules_java~//toolchains:remote_java_repository.bzl\",\n            \"ruleClassName\": \"_toolchain_config\",\n            \"attributes\": {\n              \"build_file\": \"\\nconfig_setting(\\n    name = \\\"prefix_version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"remotejdk_17\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nconfig_setting(\\n    name = \\\"version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"17\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nalias(\\n    name = \\\"version_or_prefix_version_setting\\\",\\n    actual = select({\\n        \\\":version_setting\\\": \\\":version_setting\\\",\\n        \\\"//conditions:default\\\": \\\":prefix_version_setting\\\",\\n    }),\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\ntoolchain(\\n    name = \\\"toolchain\\\",\\n    target_compatible_with = [\\\"@platforms//os:linux\\\", \\\"@platforms//cpu:ppc\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk17_linux_ppc64le//:jdk\\\",\\n)\\ntoolchain(\\n    name = \\\"bootstrap_runtime_toolchain\\\",\\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\\n    # the same configuration, this constraint will not result in toolchain resolution failures.\\n    exec_compatible_with = [\\\"@platforms//os:linux\\\", \\\"@platforms//cpu:ppc\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk17_linux_ppc64le//:jdk\\\",\\n)\\n\"\n            }\n          },\n          \"remotejdk17_win_arm64\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"build_file_content\": \"load(\\\"@rules_java//java:defs.bzl\\\", \\\"java_runtime\\\")\\n\\npackage(default_visibility = [\\\"//visibility:public\\\"])\\n\\nexports_files([\\\"WORKSPACE\\\", \\\"BUILD.bazel\\\"])\\n\\nfilegroup(\\n    name = \\\"jre\\\",\\n    srcs = glob(\\n        [\\n            \\\"jre/bin/**\\\",\\n            \\\"jre/lib/**\\\",\\n        ],\\n        allow_empty = True,\\n        # In some configurations, Java browser plugin is considered harmful and\\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\\n        # so do not include it in JRE on Windows.\\n        exclude = [\\\"jre/bin/plugin2/**\\\"],\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-bin\\\",\\n    srcs = glob(\\n        [\\\"bin/**\\\"],\\n        # The JDK on Windows sometimes contains a directory called\\n        # \\\"%systemroot%\\\", which is not a valid label.\\n        exclude = [\\\"**/*%*/**\\\"],\\n    ),\\n)\\n\\n# This folder holds security policies.\\nfilegroup(\\n    name = \\\"jdk-conf\\\",\\n    srcs = glob(\\n        [\\\"conf/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-include\\\",\\n    srcs = glob(\\n        [\\\"include/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-lib\\\",\\n    srcs = glob(\\n        [\\\"lib/**\\\", \\\"release\\\"],\\n        allow_empty = True,\\n        exclude = [\\n            \\\"lib/missioncontrol/**\\\",\\n            \\\"lib/visualvm/**\\\",\\n        ],\\n    ),\\n)\\n\\njava_runtime(\\n    name = \\\"jdk\\\",\\n    srcs = [\\n        \\\":jdk-bin\\\",\\n        \\\":jdk-conf\\\",\\n        \\\":jdk-include\\\",\\n        \\\":jdk-lib\\\",\\n        \\\":jre\\\",\\n    ],\\n    # Provide the 'java` binary explicitly so that the correct path is used by\\n    # Bazel even when the host platform differs from the execution platform.\\n    # Exactly one of the two globs will be empty depending on the host platform.\\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\\n    # glob will fail without allow_empty = True, even if the overall result is\\n    # non-empty.\\n    java = glob([\\\"bin/java.exe\\\", \\\"bin/java\\\"], allow_empty = True)[0],\\n    version = 17,\\n)\\n\",\n              \"sha256\": \"6802c99eae0d788e21f52d03cab2e2b3bf42bc334ca03cbf19f71eb70ee19f85\",\n              \"strip_prefix\": \"zulu17.44.53-ca-jdk17.0.8.1-win_aarch64\",\n              \"urls\": [\n                \"https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_aarch64.zip\",\n                \"https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_aarch64.zip\"\n              ]\n            }\n          },\n          \"remote_java_tools_darwin_arm64\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"sha256\": \"076a7e198ad077f8c7d997986ef5102427fae6bbfce7a7852d2e080ed8767528\",\n              \"urls\": [\n                \"https://mirror.bazel.build/bazel_java_tools/releases/java/v13.4/java_tools_darwin_arm64-v13.4.zip\",\n                \"https://github.com/bazelbuild/java_tools/releases/download/java_v13.4/java_tools_darwin_arm64-v13.4.zip\"\n              ]\n            }\n          },\n          \"remotejdk17_linux_ppc64le\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"build_file_content\": \"load(\\\"@rules_java//java:defs.bzl\\\", \\\"java_runtime\\\")\\n\\npackage(default_visibility = [\\\"//visibility:public\\\"])\\n\\nexports_files([\\\"WORKSPACE\\\", \\\"BUILD.bazel\\\"])\\n\\nfilegroup(\\n    name = \\\"jre\\\",\\n    srcs = glob(\\n        [\\n            \\\"jre/bin/**\\\",\\n            \\\"jre/lib/**\\\",\\n        ],\\n        allow_empty = True,\\n        # In some configurations, Java browser plugin is considered harmful and\\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\\n        # so do not include it in JRE on Windows.\\n        exclude = [\\\"jre/bin/plugin2/**\\\"],\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-bin\\\",\\n    srcs = glob(\\n        [\\\"bin/**\\\"],\\n        # The JDK on Windows sometimes contains a directory called\\n        # \\\"%systemroot%\\\", which is not a valid label.\\n        exclude = [\\\"**/*%*/**\\\"],\\n    ),\\n)\\n\\n# This folder holds security policies.\\nfilegroup(\\n    name = \\\"jdk-conf\\\",\\n    srcs = glob(\\n        [\\\"conf/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-include\\\",\\n    srcs = glob(\\n        [\\\"include/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-lib\\\",\\n    srcs = glob(\\n        [\\\"lib/**\\\", \\\"release\\\"],\\n        allow_empty = True,\\n        exclude = [\\n            \\\"lib/missioncontrol/**\\\",\\n            \\\"lib/visualvm/**\\\",\\n        ],\\n    ),\\n)\\n\\njava_runtime(\\n    name = \\\"jdk\\\",\\n    srcs = [\\n        \\\":jdk-bin\\\",\\n        \\\":jdk-conf\\\",\\n        \\\":jdk-include\\\",\\n        \\\":jdk-lib\\\",\\n        \\\":jre\\\",\\n    ],\\n    # Provide the 'java` binary explicitly so that the correct path is used by\\n    # Bazel even when the host platform differs from the execution platform.\\n    # Exactly one of the two globs will be empty depending on the host platform.\\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\\n    # glob will fail without allow_empty = True, even if the overall result is\\n    # non-empty.\\n    java = glob([\\\"bin/java.exe\\\", \\\"bin/java\\\"], allow_empty = True)[0],\\n    version = 17,\\n)\\n\",\n              \"sha256\": \"00a4c07603d0218cd678461b5b3b7e25b3253102da4022d31fc35907f21a2efd\",\n              \"strip_prefix\": \"jdk-17.0.8.1+1\",\n              \"urls\": [\n                \"https://mirror.bazel.build/github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_ppc64le_linux_hotspot_17.0.8.1_1.tar.gz\",\n                \"https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_ppc64le_linux_hotspot_17.0.8.1_1.tar.gz\"\n              ]\n            }\n          },\n          \"remotejdk21_linux_aarch64_toolchain_config_repo\": {\n            \"bzlFile\": \"@@rules_java~//toolchains:remote_java_repository.bzl\",\n            \"ruleClassName\": \"_toolchain_config\",\n            \"attributes\": {\n              \"build_file\": \"\\nconfig_setting(\\n    name = \\\"prefix_version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"remotejdk_21\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nconfig_setting(\\n    name = \\\"version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"21\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nalias(\\n    name = \\\"version_or_prefix_version_setting\\\",\\n    actual = select({\\n        \\\":version_setting\\\": \\\":version_setting\\\",\\n        \\\"//conditions:default\\\": \\\":prefix_version_setting\\\",\\n    }),\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\ntoolchain(\\n    name = \\\"toolchain\\\",\\n    target_compatible_with = [\\\"@platforms//os:linux\\\", \\\"@platforms//cpu:aarch64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk21_linux_aarch64//:jdk\\\",\\n)\\ntoolchain(\\n    name = \\\"bootstrap_runtime_toolchain\\\",\\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\\n    # the same configuration, this constraint will not result in toolchain resolution failures.\\n    exec_compatible_with = [\\\"@platforms//os:linux\\\", \\\"@platforms//cpu:aarch64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk21_linux_aarch64//:jdk\\\",\\n)\\n\"\n            }\n          },\n          \"remotejdk11_win_arm64_toolchain_config_repo\": {\n            \"bzlFile\": \"@@rules_java~//toolchains:remote_java_repository.bzl\",\n            \"ruleClassName\": \"_toolchain_config\",\n            \"attributes\": {\n              \"build_file\": \"\\nconfig_setting(\\n    name = \\\"prefix_version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"remotejdk_11\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nconfig_setting(\\n    name = \\\"version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"11\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nalias(\\n    name = \\\"version_or_prefix_version_setting\\\",\\n    actual = select({\\n        \\\":version_setting\\\": \\\":version_setting\\\",\\n        \\\"//conditions:default\\\": \\\":prefix_version_setting\\\",\\n    }),\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\ntoolchain(\\n    name = \\\"toolchain\\\",\\n    target_compatible_with = [\\\"@platforms//os:windows\\\", \\\"@platforms//cpu:arm64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk11_win_arm64//:jdk\\\",\\n)\\ntoolchain(\\n    name = \\\"bootstrap_runtime_toolchain\\\",\\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\\n    # the same configuration, this constraint will not result in toolchain resolution failures.\\n    exec_compatible_with = [\\\"@platforms//os:windows\\\", \\\"@platforms//cpu:arm64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk11_win_arm64//:jdk\\\",\\n)\\n\"\n            }\n          },\n          \"local_jdk\": {\n            \"bzlFile\": \"@@rules_java~//toolchains:local_java_repository.bzl\",\n            \"ruleClassName\": \"_local_java_repository_rule\",\n            \"attributes\": {\n              \"java_home\": \"\",\n              \"version\": \"\",\n              \"build_file_content\": \"load(\\\"@rules_java//java:defs.bzl\\\", \\\"java_runtime\\\")\\n\\npackage(default_visibility = [\\\"//visibility:public\\\"])\\n\\nexports_files([\\\"WORKSPACE\\\", \\\"BUILD.bazel\\\"])\\n\\nfilegroup(\\n    name = \\\"jre\\\",\\n    srcs = glob(\\n        [\\n            \\\"jre/bin/**\\\",\\n            \\\"jre/lib/**\\\",\\n        ],\\n        allow_empty = True,\\n        # In some configurations, Java browser plugin is considered harmful and\\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\\n        # so do not include it in JRE on Windows.\\n        exclude = [\\\"jre/bin/plugin2/**\\\"],\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-bin\\\",\\n    srcs = glob(\\n        [\\\"bin/**\\\"],\\n        # The JDK on Windows sometimes contains a directory called\\n        # \\\"%systemroot%\\\", which is not a valid label.\\n        exclude = [\\\"**/*%*/**\\\"],\\n    ),\\n)\\n\\n# This folder holds security policies.\\nfilegroup(\\n    name = \\\"jdk-conf\\\",\\n    srcs = glob(\\n        [\\\"conf/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-include\\\",\\n    srcs = glob(\\n        [\\\"include/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-lib\\\",\\n    srcs = glob(\\n        [\\\"lib/**\\\", \\\"release\\\"],\\n        allow_empty = True,\\n        exclude = [\\n            \\\"lib/missioncontrol/**\\\",\\n            \\\"lib/visualvm/**\\\",\\n        ],\\n    ),\\n)\\n\\njava_runtime(\\n    name = \\\"jdk\\\",\\n    srcs = [\\n        \\\":jdk-bin\\\",\\n        \\\":jdk-conf\\\",\\n        \\\":jdk-include\\\",\\n        \\\":jdk-lib\\\",\\n        \\\":jre\\\",\\n    ],\\n    # Provide the 'java` binary explicitly so that the correct path is used by\\n    # Bazel even when the host platform differs from the execution platform.\\n    # Exactly one of the two globs will be empty depending on the host platform.\\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\\n    # glob will fail without allow_empty = True, even if the overall result is\\n    # non-empty.\\n    java = glob([\\\"bin/java.exe\\\", \\\"bin/java\\\"], allow_empty = True)[0],\\n    version = {RUNTIME_VERSION},\\n)\\n\"\n            }\n          },\n          \"remote_java_tools_darwin_x86_64\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"sha256\": \"4523aec4d09c587091a2dae6f5c9bc6922c220f3b6030e5aba9c8f015913cc65\",\n              \"urls\": [\n                \"https://mirror.bazel.build/bazel_java_tools/releases/java/v13.4/java_tools_darwin_x86_64-v13.4.zip\",\n                \"https://github.com/bazelbuild/java_tools/releases/download/java_v13.4/java_tools_darwin_x86_64-v13.4.zip\"\n              ]\n            }\n          },\n          \"remote_java_tools\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"sha256\": \"e025fd260ac39b47c111f5212d64ec0d00d85dec16e49368aae82fc626a940cf\",\n              \"urls\": [\n                \"https://mirror.bazel.build/bazel_java_tools/releases/java/v13.4/java_tools-v13.4.zip\",\n                \"https://github.com/bazelbuild/java_tools/releases/download/java_v13.4/java_tools-v13.4.zip\"\n              ]\n            }\n          },\n          \"remotejdk17_linux_s390x\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"build_file_content\": \"load(\\\"@rules_java//java:defs.bzl\\\", \\\"java_runtime\\\")\\n\\npackage(default_visibility = [\\\"//visibility:public\\\"])\\n\\nexports_files([\\\"WORKSPACE\\\", \\\"BUILD.bazel\\\"])\\n\\nfilegroup(\\n    name = \\\"jre\\\",\\n    srcs = glob(\\n        [\\n            \\\"jre/bin/**\\\",\\n            \\\"jre/lib/**\\\",\\n        ],\\n        allow_empty = True,\\n        # In some configurations, Java browser plugin is considered harmful and\\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\\n        # so do not include it in JRE on Windows.\\n        exclude = [\\\"jre/bin/plugin2/**\\\"],\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-bin\\\",\\n    srcs = glob(\\n        [\\\"bin/**\\\"],\\n        # The JDK on Windows sometimes contains a directory called\\n        # \\\"%systemroot%\\\", which is not a valid label.\\n        exclude = [\\\"**/*%*/**\\\"],\\n    ),\\n)\\n\\n# This folder holds security policies.\\nfilegroup(\\n    name = \\\"jdk-conf\\\",\\n    srcs = glob(\\n        [\\\"conf/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-include\\\",\\n    srcs = glob(\\n        [\\\"include/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-lib\\\",\\n    srcs = glob(\\n        [\\\"lib/**\\\", \\\"release\\\"],\\n        allow_empty = True,\\n        exclude = [\\n            \\\"lib/missioncontrol/**\\\",\\n            \\\"lib/visualvm/**\\\",\\n        ],\\n    ),\\n)\\n\\njava_runtime(\\n    name = \\\"jdk\\\",\\n    srcs = [\\n        \\\":jdk-bin\\\",\\n        \\\":jdk-conf\\\",\\n        \\\":jdk-include\\\",\\n        \\\":jdk-lib\\\",\\n        \\\":jre\\\",\\n    ],\\n    # Provide the 'java` binary explicitly so that the correct path is used by\\n    # Bazel even when the host platform differs from the execution platform.\\n    # Exactly one of the two globs will be empty depending on the host platform.\\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\\n    # glob will fail without allow_empty = True, even if the overall result is\\n    # non-empty.\\n    java = glob([\\\"bin/java.exe\\\", \\\"bin/java\\\"], allow_empty = True)[0],\\n    version = 17,\\n)\\n\",\n              \"sha256\": \"ffacba69c6843d7ca70d572489d6cc7ab7ae52c60f0852cedf4cf0d248b6fc37\",\n              \"strip_prefix\": \"jdk-17.0.8.1+1\",\n              \"urls\": [\n                \"https://mirror.bazel.build/github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_s390x_linux_hotspot_17.0.8.1_1.tar.gz\",\n                \"https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_s390x_linux_hotspot_17.0.8.1_1.tar.gz\"\n              ]\n            }\n          },\n          \"remotejdk17_win_toolchain_config_repo\": {\n            \"bzlFile\": \"@@rules_java~//toolchains:remote_java_repository.bzl\",\n            \"ruleClassName\": \"_toolchain_config\",\n            \"attributes\": {\n              \"build_file\": \"\\nconfig_setting(\\n    name = \\\"prefix_version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"remotejdk_17\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nconfig_setting(\\n    name = \\\"version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"17\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nalias(\\n    name = \\\"version_or_prefix_version_setting\\\",\\n    actual = select({\\n        \\\":version_setting\\\": \\\":version_setting\\\",\\n        \\\"//conditions:default\\\": \\\":prefix_version_setting\\\",\\n    }),\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\ntoolchain(\\n    name = \\\"toolchain\\\",\\n    target_compatible_with = [\\\"@platforms//os:windows\\\", \\\"@platforms//cpu:x86_64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk17_win//:jdk\\\",\\n)\\ntoolchain(\\n    name = \\\"bootstrap_runtime_toolchain\\\",\\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\\n    # the same configuration, this constraint will not result in toolchain resolution failures.\\n    exec_compatible_with = [\\\"@platforms//os:windows\\\", \\\"@platforms//cpu:x86_64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk17_win//:jdk\\\",\\n)\\n\"\n            }\n          },\n          \"remotejdk11_linux_ppc64le\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"build_file_content\": \"load(\\\"@rules_java//java:defs.bzl\\\", \\\"java_runtime\\\")\\n\\npackage(default_visibility = [\\\"//visibility:public\\\"])\\n\\nexports_files([\\\"WORKSPACE\\\", \\\"BUILD.bazel\\\"])\\n\\nfilegroup(\\n    name = \\\"jre\\\",\\n    srcs = glob(\\n        [\\n            \\\"jre/bin/**\\\",\\n            \\\"jre/lib/**\\\",\\n        ],\\n        allow_empty = True,\\n        # In some configurations, Java browser plugin is considered harmful and\\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\\n        # so do not include it in JRE on Windows.\\n        exclude = [\\\"jre/bin/plugin2/**\\\"],\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-bin\\\",\\n    srcs = glob(\\n        [\\\"bin/**\\\"],\\n        # The JDK on Windows sometimes contains a directory called\\n        # \\\"%systemroot%\\\", which is not a valid label.\\n        exclude = [\\\"**/*%*/**\\\"],\\n    ),\\n)\\n\\n# This folder holds security policies.\\nfilegroup(\\n    name = \\\"jdk-conf\\\",\\n    srcs = glob(\\n        [\\\"conf/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-include\\\",\\n    srcs = glob(\\n        [\\\"include/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-lib\\\",\\n    srcs = glob(\\n        [\\\"lib/**\\\", \\\"release\\\"],\\n        allow_empty = True,\\n        exclude = [\\n            \\\"lib/missioncontrol/**\\\",\\n            \\\"lib/visualvm/**\\\",\\n        ],\\n    ),\\n)\\n\\njava_runtime(\\n    name = \\\"jdk\\\",\\n    srcs = [\\n        \\\":jdk-bin\\\",\\n        \\\":jdk-conf\\\",\\n        \\\":jdk-include\\\",\\n        \\\":jdk-lib\\\",\\n        \\\":jre\\\",\\n    ],\\n    # Provide the 'java` binary explicitly so that the correct path is used by\\n    # Bazel even when the host platform differs from the execution platform.\\n    # Exactly one of the two globs will be empty depending on the host platform.\\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\\n    # glob will fail without allow_empty = True, even if the overall result is\\n    # non-empty.\\n    java = glob([\\\"bin/java.exe\\\", \\\"bin/java\\\"], allow_empty = True)[0],\\n    version = 11,\\n)\\n\",\n              \"sha256\": \"a8fba686f6eb8ae1d1a9566821dbd5a85a1108b96ad857fdbac5c1e4649fc56f\",\n              \"strip_prefix\": \"jdk-11.0.15+10\",\n              \"urls\": [\n                \"https://mirror.bazel.build/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_ppc64le_linux_hotspot_11.0.15_10.tar.gz\",\n                \"https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_ppc64le_linux_hotspot_11.0.15_10.tar.gz\"\n              ]\n            }\n          },\n          \"remotejdk11_macos_aarch64\": {\n            \"bzlFile\": \"@@bazel_tools//tools/build_defs/repo:http.bzl\",\n            \"ruleClassName\": \"http_archive\",\n            \"attributes\": {\n              \"build_file_content\": \"load(\\\"@rules_java//java:defs.bzl\\\", \\\"java_runtime\\\")\\n\\npackage(default_visibility = [\\\"//visibility:public\\\"])\\n\\nexports_files([\\\"WORKSPACE\\\", \\\"BUILD.bazel\\\"])\\n\\nfilegroup(\\n    name = \\\"jre\\\",\\n    srcs = glob(\\n        [\\n            \\\"jre/bin/**\\\",\\n            \\\"jre/lib/**\\\",\\n        ],\\n        allow_empty = True,\\n        # In some configurations, Java browser plugin is considered harmful and\\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\\n        # so do not include it in JRE on Windows.\\n        exclude = [\\\"jre/bin/plugin2/**\\\"],\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-bin\\\",\\n    srcs = glob(\\n        [\\\"bin/**\\\"],\\n        # The JDK on Windows sometimes contains a directory called\\n        # \\\"%systemroot%\\\", which is not a valid label.\\n        exclude = [\\\"**/*%*/**\\\"],\\n    ),\\n)\\n\\n# This folder holds security policies.\\nfilegroup(\\n    name = \\\"jdk-conf\\\",\\n    srcs = glob(\\n        [\\\"conf/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-include\\\",\\n    srcs = glob(\\n        [\\\"include/**\\\"],\\n        allow_empty = True,\\n    ),\\n)\\n\\nfilegroup(\\n    name = \\\"jdk-lib\\\",\\n    srcs = glob(\\n        [\\\"lib/**\\\", \\\"release\\\"],\\n        allow_empty = True,\\n        exclude = [\\n            \\\"lib/missioncontrol/**\\\",\\n            \\\"lib/visualvm/**\\\",\\n        ],\\n    ),\\n)\\n\\njava_runtime(\\n    name = \\\"jdk\\\",\\n    srcs = [\\n        \\\":jdk-bin\\\",\\n        \\\":jdk-conf\\\",\\n        \\\":jdk-include\\\",\\n        \\\":jdk-lib\\\",\\n        \\\":jre\\\",\\n    ],\\n    # Provide the 'java` binary explicitly so that the correct path is used by\\n    # Bazel even when the host platform differs from the execution platform.\\n    # Exactly one of the two globs will be empty depending on the host platform.\\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\\n    # glob will fail without allow_empty = True, even if the overall result is\\n    # non-empty.\\n    java = glob([\\\"bin/java.exe\\\", \\\"bin/java\\\"], allow_empty = True)[0],\\n    version = 11,\\n)\\n\",\n              \"sha256\": \"7632bc29f8a4b7d492b93f3bc75a7b61630894db85d136456035ab2a24d38885\",\n              \"strip_prefix\": \"zulu11.66.15-ca-jdk11.0.20-macosx_aarch64\",\n              \"urls\": [\n                \"https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-macosx_aarch64.tar.gz\",\n                \"https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-macosx_aarch64.tar.gz\"\n              ]\n            }\n          },\n          \"remotejdk21_win_toolchain_config_repo\": {\n            \"bzlFile\": \"@@rules_java~//toolchains:remote_java_repository.bzl\",\n            \"ruleClassName\": \"_toolchain_config\",\n            \"attributes\": {\n              \"build_file\": \"\\nconfig_setting(\\n    name = \\\"prefix_version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"remotejdk_21\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nconfig_setting(\\n    name = \\\"version_setting\\\",\\n    values = {\\\"java_runtime_version\\\": \\\"21\\\"},\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\nalias(\\n    name = \\\"version_or_prefix_version_setting\\\",\\n    actual = select({\\n        \\\":version_setting\\\": \\\":version_setting\\\",\\n        \\\"//conditions:default\\\": \\\":prefix_version_setting\\\",\\n    }),\\n    visibility = [\\\"//visibility:private\\\"],\\n)\\ntoolchain(\\n    name = \\\"toolchain\\\",\\n    target_compatible_with = [\\\"@platforms//os:windows\\\", \\\"@platforms//cpu:x86_64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk21_win//:jdk\\\",\\n)\\ntoolchain(\\n    name = \\\"bootstrap_runtime_toolchain\\\",\\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\\n    # the same configuration, this constraint will not result in toolchain resolution failures.\\n    exec_compatible_with = [\\\"@platforms//os:windows\\\", \\\"@platforms//cpu:x86_64\\\"],\\n    target_settings = [\\\":version_or_prefix_version_setting\\\"],\\n    toolchain_type = \\\"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\\\",\\n    toolchain = \\\"@remotejdk21_win//:jdk\\\",\\n)\\n\"\n            }\n          }\n        },\n        \"recordedRepoMappingEntries\": [\n          [\n            \"rules_java~\",\n            \"bazel_tools\",\n            \"bazel_tools\"\n          ],\n          [\n            \"rules_java~\",\n            \"remote_java_tools\",\n            \"rules_java~~toolchains~remote_java_tools\"\n          ]\n        ]\n      }\n    }\n  }\n}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.6572265625,
          "content": "<div id=\"top\"></div>\n\n<!-- PROJECT LOGO -->\n<br />\n<div align=\"center\">\n\n<picture>\n  <source media=\"(prefers-color-scheme: dark)\" width=\"200px\" srcset=\"https://raw.githubusercontent.com/spaceandtimelabs/blitzar-rs/assets/logo_dark_background.png\">\n  <source media=\"(prefers-color-scheme: light)\" width=\"200px\" srcset=\"https://raw.githubusercontent.com/spaceandtimelabs/blitzar-rs/assets/logo_light_background.png\">\n  <img alt=\"Blitzar\" width=\"200px\" src=\"https://raw.githubusercontent.com/spaceandtimelabs/blitzar-rs/assets/logo_light_background.png\">\n</picture>\n\n<p align=\"center\">\n  <a href=\"https://github.com/spaceandtimelabs/blitzar/actions/workflows/release.yml\">\n    <img alt=\"Build State\" src=\"https://github.com/spaceandtimelabs/blitzar/actions/workflows/release.yml/badge.svg\">\n  </a>\n\n  <a href=\"https://twitter.com/intent/follow?screen_name=spaceandtimedb\">\n    <img alt=\"Twitter\" src=\"https://img.shields.io/twitter/follow/spaceandtimedb.svg?style=social&label=Follow\">\n  </a>\n\n  <a href=\"http://discord.gg/SpaceandTimeDB\">\n    <img alt=\"Discord Server\" src=\"https://img.shields.io/discord/953025874154893342?logo=discord\">\n  </a>\n\n  <a href=\"https://github.com/spaceandtimelabs/blitzar/blob/main/LICENSE\">\n    <img alt=\"License\" src=\"https://img.shields.io/badge/License-Apache_2.0-blue.svg\">\n    </a>\n  </a>\n\n  <a href=\"https://en.cppreference.com/w/cpp/20\">\n    <img alt=\"C++ Logo\" src=\"https://img.shields.io/badge/C%2B%2B-20-blue?style=flat&logo=c%2B%2B\">\n    </a>\n  </a>\n\n  <a href=\"https://www.linux.org/\">\n    <img alt=\"OS\" src=\"https://img.shields.io/badge/OS-Linux-blue?logo=linux\">\n    </a>\n  </a>\n\n  <a href=\"https://www.linux.org/\">\n    <img alt=\"CPU\" src=\"https://img.shields.io/badge/CPU-x86-red\">\n    </a>\n  </a>\n\n  <a href=\"https://developer.nvidia.com/cuda-downloads\">\n    <img alt=\"CUDA\" src=\"https://img.shields.io/badge/CUDA-12.6-green?style=flat&logo=nvidia\">\n    </a>\n  </a>\n\n  <p align=\"center\">\n    Space and Time C++ library for accelerating cryptographic zero-knowledge proofs algorithms on the CPU and GPU.\n    <br />\n    <a href=\"https://github.com/spaceandtimelabs/blitzar/issues\">Report Bug</a>\n    |\n    <a href=\"https://github.com/spaceandtimelabs/blitzar/issues\">Request a Feature</a>\n  </p>\n</div>\n\n#### Background\nBlitzar was created by the core cryptography team at [Space and Time](https://www.spaceandtime.io/) to accelerate Proof of SQL, a novel zero-knowledge proof for SQL operations. After surveying our options for a GPU acceleration framework, we realized that Proof of SQL needed something better… so we built Blitzar. Now, Proof of SQL runs with a 3.2 second proving time against a million-row table on a single GPU, and it’s only getting faster.\n\nWe’ve open-sourced Blitzar to provide the Web3 community with a faster and more\nrobust framework for building GPU-accelerated ZK proofs. We’re excited to open\nthe project to community contributions to expand the scope of Blitzar and lay\nthe foundation for the next wave of lightning fast ZK proofs.\n\n#### Overview\nBlitzar is a C++ library for accelerating cryptographic zero-knowledge proof algorithms on the CPU and GPU.\n> **Note**  \n> This repo contains the C++ implementation along with cbindings and a Rust sys-crate. If you are using Rust, use the crate from the companion [blitzar-rs](https://github.com/spaceandtimelabs/blitzar-rs) repo.\n\nThe library provides\n\n* Functions for doing group operations on [Curve-25519](https://en.wikipedia.org/wiki/Curve25519) and [Ristretto25519](https://ristretto.group/) elements.\n* An implementation of [Inner Product Argument Protocol](https://eprint.iacr.org/2017/1066.pdf) for producing and verifying a compact proof of the inner product of two vectors.\n* A sys-crate and bindings to make commitment computations usable from [Rust](https://github.com/spaceandtimelabs/blitzar-rs).\n\nThe library is adopted from code in [libsodium](https://github.com/jedisct1/libsodium) and extends libsodium's cryptographic functions to support CUDA so that they are usable on GPUs.\n\n**WARNING**: This project has not undergone a security audit and is NOT ready\nfor production use.\n\n#### Installation\nWe provide prebuilt binaries for glibc-based, x86-64 linux distributions.\n\nDependencies are statically linked and set to have internal linkage with [export maps](https://accu.org/journals/overload/15/79/wakeling_1372/) to ensure \nportability. The only run-time dependency to use GPU acceleration is an up-to-date GPU driver.\n\nFor most users, we recommend installing with cargo via [blitzar-rs](https://github.com/spaceandtimelabs/blitzar-rs).\n\nAlternatively, users that want to use the c api directly can download the shared library and header file from the github release.\n\n#### Computational Backends\nAlthough the primary goal of this library is to provide GPU acceleration for cryptographic ZK proof algorithms, the library also provides CPU support for the sake of testing. The following backends are supported:\n\n| Backend            | Implementation                                             | Target Hardware             |\n| :---               | :---                                                       | :---                        |\n| `cpu`             | Serial      | x86 capable CPUs |\n| `gpu`             | Parallel   | Nvidia CUDA capable GPUs\n\n\n## Cryptographic Primitives\n\n#### Multi-Scalar Multiplication (MSM) / Generalized Pedersen Commitment / Multiexponentiation\n\nBlitzar provides an implementation of Multi-Scalar Multiplication (i.e. generalized Pedersen commitments)\n\nLet $g_0\\ldots g_n\\in \\mathbb{G}$ be elements of a group (with prime order), and let $a_0\\ldots a_n\\in\\mathbb{F}$ be elements of the corresponding scalar field. (i.e. the field $\\mathbb{F}_p$ where $p$ is the order of the group.)\n\nThen, the Generalized Pedersen Commitment of the vector $\\mathbf{a}=(a_1,\\ldots, a_n)$ is\n```math\nP = a_1\\cdot g_1+\\cdots+ a_n\\cdot g_n\n```\n\nNote: we interchangeably use the terms \"multi-scalar multiplication\" and \"multiexponentiation\" to refer to the this operation because when the group is written additively, the operation is a multi-scalar multiplication, and when the group is written multiplicatively, the operation is a multiexponentiation.\n\nThe Blitzar implementation allows for computation of multiple, potentially different length, MSMs simultaneously. Additionally, either built-in, precomputed, generators $g_n$ can be used, or they can be provided as needed.\n\nCurrently, Blitzar supports Curve25519 as the group. We're always working to expand the curves that we support, so check back for updates.\n\n#### Inner Product Argument\n\nBlitzar provides a modified implementation of an inner product argument (e.g. [Bulletproofs](https://eprint.iacr.org/2017/1066.pdf) and [Halo2](https://zcash.github.io/halo2/background/pc-ipa.html)).\n\nGiven generators $g_1, \\ldots, g_n$; Pedersen commitment $P$; scalar $c$; and vectors \n$\\mathbf{a}=(a_1,\\ldots, a_n)$ and $\\mathbf{b}=(b_1,\\ldots, b_n)$;\nBlitzar's version of the inner product proof allows a Prover to establish that\n```math\n\\begin{aligned}\nP &= a_1\\cdot g_1+\\cdots+ a_n\\cdot g_n \\\\\nc &= \\langle \\mathbf{a}, \\mathbf{b} \\rangle = a_1\\cdot b_1+\\cdots+ a_n\\cdot b_n\n\\end{aligned}\n```\nwhere it is assumed that $\\boldsymbol{g}$, $\\boldsymbol{b}$, and $c$ are known to both the Prover\nand Verifier.\n\nThis version of the inner product argument can be used in the context of a broader protocol.\n\n#### Other Features to Come\n\nIf there is a particular feature that you would like to see, please [reach out](https://github.com/spaceandtimelabs/blitzar/issues). Blitzar is a community-first project, and we want to hear from you.\n\n## Performance ([associated commit hash](https://github.com/spaceandtimelabs/blitzar/commit/a03f80bae30546c0b02d7e968056e3473be3a851))\n\nBenchmarks are run against four different types of GPU:\n\n* [Nvidia 3060](https://www.nvidia.com/en-us/geforce/graphics-cards/30-series/rtx-3060-3060ti/)\n* [Nvidia T4 - Standard_NC4as_T4_v3](https://learn.microsoft.com/en-us/azure/virtual-machines/nct4-v3-series)\n* [Nvidia V100 - Standard_NC6s_v3](https://learn.microsoft.com/en-us/azure/virtual-machines/ncv3-series)\n* [Nvidia A100 - Standard_NC24ads_A100_v4](https://learn.microsoft.com/en-us/azure/virtual-machines/nc-a100-v4-series)\n\n<details open>\n<summary>Multi-Scalar Multiplication / Generalized Pedersen Commitment Results:</summary>\n\nThe subsequent outcomes are derived from the preceding benchmark execution of the pedersen commitment, during which the number of sequences, bytes per element, sequence length, and GPU type were varied.\n\n![Multiexponentiation Benchmarks](https://github.com/spaceandtimelabs/blitzar/blob/assets/benchmark/multiexponentiation_seconds.png)\n\n</details>\n\n<details open>\n<summary>Inner Product Argument Results:</summary>\n\nThe subsequent outcomes are derived from the preceding benchmark execution of the inner product, during which the number of elements and the type of GPU were changed.\n\n![Inner Product Benchmarks](https://github.com/spaceandtimelabs/blitzar/blob/assets/benchmark/innerprod_seconds.png)\n\n</details>\n\n\n\n## Getting Started\n\nSee the [example](./example) folder for some examples.\n\n### Prerequisites to build from source\n\n<details open>\n<summary>Build environment</summary>\n\nPrerequisites:\n* `x86_64` Linux instance.\n* Nix with flake support (check out [The Determinate Nix Installer](https://github.com/DeterminateSystems/nix-installer))\n* Nvidia GPU capable of running CUDA 12.6 code.\n\nFrom your terminal, run the following command in the root of the source directory to set\nup a build environment. \n```bash\nnix develop\n```\nNote: if this is the first time, it may take a while as we build a clang compiler from source.\n</details>\n\n## Usage\n\n<details open>\n<summary>Building and Testing the C++/CUDA code:</summary>\n\n```bash\nnix develop\n\n# build all the code assets\nbazel build //...\n\n# run all tests\nbazel test //...\n\n# run all memory sanitized tests\nbazel test --config=asan //...\n```\n\nNote: some tests will fail in case you don't have a GPU available.\n\n</details>\n\n<details open>\n<summary>Building and Testing the Rust Sys-Crate code:</summary>\n\n```bash\nnix develop\n\n# run the sys-crate tests\ncargo test --manifest-path rust/blitzar-sys/Cargo.toml\n```\n\nAlthough possible, this sys-crate is not meant to be used directly by Rust users. Instead, consider using the [blitzar-rs](https://github.com/spaceandtimelabs/blitzar-rs), which is a high-level wrapper around this sys-crate.\n\nNote: the shared library byproduct of the C++/CUDA code is automatically copied to the Rust sys-crate under the `rust/blitzar-sys/` directory.\n\n</details>\n\n## Add to your project\n\nYou can find release ready versions of this library under the [release page](https://github.com/spaceandtimelabs/blitzar/releases/). You can also build and test the library from source by following the instructions below.\n\n<details>\n\n<summary>C++ Project:</summary>\n\nSee the C++ example here: [example/cbindings1/main.cc](./example/cbindings1/main.cc). To run this example, execute:\n\n```bash\nnix develop\n\nbazel run //example/cbindings1:cbind1\n```\n\nAlternatively, compile this example code with g++:\n\n```bash\nnix develop\n\n# Build the shared library\nbazel build -c opt --config=portable_glibc //cbindings:libblitzar.so\n\n# Compile the C++ example code\ng++ example/cbindings1/main.cc -o main -I . -L bazel-bin/cbindings/ -lblitzar\n\n# Execute the example code\nLD_LIBRARY_PATH=$LD_LIBRARY_PATH:bazel-bin/cbindings/ ./main\n```\n</details>\n\n<details>\n\n<summary>Rust Project:</summary>\n\nSee the Rust example here: [rust/tests/src/main.rs](./rust/tests/src/main.rs). To run this example, execute:\n\n```bash\nnix develop\n\ncargo test --manifest-path rust/tests/Cargo.toml\n```\n\n</details>\n\n## Development Process\n\nThe main branch is regularly built and tested, being the only source of truth. [Tags](https://github.com/spaceandtimelabs/blitzar/tags) are created regularly from automated semantic release executions. \n\n#### Code format:\n\nThis repository follows some C++ formatting rules. To check if your modified code is compliant, run the following commands:\n\n```bash\nnix develop\n\n./tools/code_format/check_format.py check\n\n./tools/code_format/check_format.py fix\n```\n\n## Executing the Benchmarks:\n\n<details open>\n<summary>Generalized Pedersen Commitment (MSM):</summary>\n\n```bash\nnix develop\n\n# Usage: benchmark <cpu|gpu> <n> <num_samples> <num_commitments> <element_nbytes> <verbose>\n# - n: the size of the multiexponentiation vector (or the sequence length).\n# - num_samples: the number of times to run the benchmark.\n# - num_commitments: the number of commitments to generate.\n# - element_nbytes: the number of bytes of each element in the vector (exponent size).\n# - verbose: whether to print the results of each run.\nbazel run -c opt //benchmark/multi_commitment:benchmark -- gpu 1000 5 1 32 1\n```\n\n</details>\n\n<details open>\n<summary>Inner Product Argument:</summary>\n\n```bash\nnix develop\n\n# Usage: benchmark <cpu|gpu> <n> <num_samples>\n# - n: the size of the inner product vector (or the sequence length).\n# - num_samples: the number of times to run the benchmark.\nbazel run -c opt //benchmark/inner_product_proof:benchmark -- gpu 1000 5\n```\n\n</details>\n\n\n## Contributing\n\nWe're excited to open Blitzar to the community, but are not accepting community Pull Requests yet due to logistic reasons. However, feel free to contribute with any suggestion, idea, or bugfix on our [Issues](https://github.com/spaceandtimelabs/blitzar/issues) panel. Also, see [contribution guide](CONTRIBUTING.md).\n\n## Community & support\n\nJoin our [Discord server](https://discord.com/invite/SpaceandTimeDB) to ask questions, discuss features, and for general chat.\n\n## License\n\nThis project is released under the [Apache 2 License](LICENSE).\n  \n## Rust crate\n\nThis repo contains the C++ implementation along with cbindings and a Rust sys-crate. If you are using Rust, use the crate from the companion repo here: https://github.com/spaceandtimelabs/blitzar-rs.\n"
        },
        {
          "name": "STYLE.md",
          "type": "blob",
          "size": 4.9140625,
          "content": "## Organization\nThe project's structure largely follows the conventions from John Lakos' book \n\"Large Scale C++ Software Design\" ([1], [2]).\n\nAll library code belongs to a component; all components belong to a package;\nall packages belong to a package group; and there are no dependency cycles\nbetween components, packages, and package groups (§2.1 of [1]). For example,\n\n```\nsxt/base/iterator/counting_iterator.{h,cc,t.cc}\n```\nare the header, source, and unit tests for the component \"counting_iterator\". \"counting_iterator\"\nbelongs to the package \"iterator\", and \"iterator\" belongs to the package group \"base\".\n\nIf another component `sxt/multiexp/pippenger_multiprod/multiproduct` depends on\n`base/iterator/counting_iterator`, then no component in the package group \"base\"\ncan depend on a component in the package group \"multiexp\" as that would introduce\na cycle (§3.5 of [1], [3])\n\nAll packages are given a unique namespace. For example, all components within\nthe package `base/iterator` use the namespace \"basit\". The first three letters\nof a package namespace uniquely identify the package group (e.g. \"bas\"\nidentifies the package group \"base\"); following letters uniquely identify the\npackage within the package group (§2.10 of [1]). Package namespace names don't have to\nbe descriptive, but should be short and satisfy the uniqueness requirements.\n\n## Naming\nWe follow the C++ standard library naming convention. Class names, variables, \nfunctions, and concepts use [snake case](https://en.wikipedia.org/wiki/Snake_case).\n\nClass member names are suffixed with an underscore:\n```\nclass abc {\n private:\n   int x_;\n};\n```\n\nTemplate parameters use [camel case](https://en.wikipedia.org/wiki/Camel_case) with the\nfirst letter capitalized:\n```\ntemplate <class MyType>\nvoid f(MyType t) {\n    // ...\n}\n```\n\n## Error handling\nOur error handling guidelines are inspired by Envoy's style guide ([4]).\n\nError codes and exceptions should be used to handle normal control flow. Crashing is a valid\nerror handling strategy and should be used for errors not considered part of normal control flow\n([5]).\n\nTo make errors more explicit, we use noexcept for functions that either don't throw an exception or\nwould only throw exceptions outside of normal control flow (Item 14 of [6]). For example,\n\n```\nstd::vector<int> copy_and_sort(const std::vector<int>& xv) noexcept {\n  std::vector<int> res{xv.begin(), xv.end()};\n  std::sort(res.begin(), res.end());\n  return res;\n}\n```\ncopy_and_sort might throw std::bad_alloc and noexcept will cause the function to terminate; \nbut such an error would be outside of normal control flow, so termination is acceptable.\n\n## Memory Management\nWe make extensive use of RAII and allocator-aware containers to manage device memory and \nachieve certain host-side optimizations.\n\nSee [9], [10], and [11].\n\n## Futures and Promises\nIn order to get the most out of GPUs and eventually scale to using multiple GPUs, we use\nthe asynchronous versions of CUDA API functions.\n\nTo make writing async code easier, we adopt the future-promise design from\n[seastar.io](https://seastar.io/) ([12]) and use c++20 coroutines ([13]).\n\n## Testing\nWe try to follow the guidelines from Kevlin Henney's talk \"Structure and Interpretation of Test Cases\"\n([7], [8]).\n\nIn additional to checking correctness, tests also serve as documentation and\nshould be readable and describe code's behavior.\n\n## References\n1: John Lakos. 2019. [Large-scale C++ software design, Volume 1](https://www.amazon.com/Large-Scale-Architecture-Addison-Wesley-Professional-Computing/dp/0201717069/ref=sr_1_fkmr0_1?crid=1K4S108K8A8DU&keywords=large+scale+c%2B%2B+design+2nd&qid=1684861966&sprefix=large+scale+c%2B%2B+design+2nd%2Caps%2C162&sr=8-1-fkmr0&ufe=app_do%3Aamzn1.fos.006c50ae-5d4c-4777-9bc0-4513d670b6bc).\n\n2: John Lakos. [Overview of [1]](https://youtu.be/d3zMfMC8l5U).\n\n3: John Lakos. [Advanced Levelization Techniques](https://youtu.be/QjFpKJ8Xx78).\n\n4: https://github.com/envoyproxy/envoy/blob/main/STYLE.md#error-handling\n\n5: Matt Klein. [Crash early and crash often for more reliable software](https://medium.com/@mattklein123/crash-early-and-crash-often-for-more-reliable-software-597738dd21c5)\n\n6: Scott Meyers. [Effective Modern C++](https://www.amazon.com/Effective-Modern-Specific-Ways-Improve/dp/1491903996?asin=1491903996&revisionId=&format=4&depth=1).\n\n7: Kevlin Henney. [Structure and Interpretation of Test Cases](https://youtu.be/tWn8RA_DEic).\n\n8: Kevlin Henney. [Programming with GUTs](https://youtu.be/azoucC_fwzw).\n\n9: Pablo Halpern, John Lakos. [Value Proposition: Allocator-Aware (AA) Software](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2035r0.pdf).\n\n10: John Lakos. [Local ('Arena') Memory Allocators](https://youtu.be/nZNd5FjSquk).\n\n11: Pablo Halpern. [Allocators: The Good Parts](https://youtu.be/v3dz-AKOVL8).\n\n12: Avi Kivity. [Building efficient I/O intensive applications with Seastar](https://youtu.be/p8d28t4qCTY).\n\n13: Gor Nishanov. [C++ Coroutines: Under the covers](https://youtu.be/8C8NnE1Dg4A).\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 1.3623046875,
          "content": "workspace(name = \"dev_spaceandtime_blitzar\")\n\nload(\"@bazel_tools//tools/build_defs/repo:git.bzl\", \"git_repository\")\n\n# libbacktrace\ngit_repository(\n    name = \"com_github_ianlancetaylor_libbacktrace\",\n    build_file = \"//bazel/libbacktrace:libbacktrace.BUILD\",\n    commit = \"86885d1\",\n    remote = \"https://github.com/ianlancetaylor/libbacktrace\",\n)\n\n# spdlog\ngit_repository(\n    name = \"com_github_gabime_spdlog\",\n    build_file = \"//bazel:spdlog.BUILD\",\n    commit = \"5ebfc92\",\n    remote = \"https://github.com/gabime/spdlog\",\n)\n\n# catch2\ngit_repository(\n    name = \"com_github_catchorg_catch2\",\n    commit = \"53d0d91\",\n    remote = \"https://github.com/catchorg/Catch2\",\n)\n\n# boost\ngit_repository(\n    name = \"com_github_nelhage_rules_boost\",\n    commit = \"ff4fefd\",\n    # Patch build to add libbacktrace dependency.\n    # See https://github.com/nelhage/rules_boost/issues/534\n    patches = [\n        \"//bazel:stacktrace.patch\",\n    ],\n    remote = \"https://github.com/nelhage/rules_boost\",\n)\n\nload(\"@com_github_nelhage_rules_boost//:boost/boost.bzl\", \"boost_deps\")\n\nboost_deps()\n\n# rules_cuda\ngit_repository(\n    name = \"rules_cuda\",\n    commit = \"775ba0c\",\n    remote = \"https://github.com/bazel-contrib/rules_cuda\",\n)\n\nload(\"@rules_cuda//cuda:repositories.bzl\", \"register_detected_cuda_toolchains\", \"rules_cuda_dependencies\")\n\nrules_cuda_dependencies()\n\nregister_detected_cuda_toolchains()\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "bazel",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "cbindings",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 2.4228515625,
          "content": "{\n  \"nodes\": {\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1724819573,\n        \"narHash\": \"sha256-GnR7/ibgIH1vhoy8cYdmXE6iyZqKqFxQSVkFgosBh6w=\",\n        \"owner\": \"nixos\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"71e91c409d1e654808b2621f28a327acfdad8dc2\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nixos\",\n        \"ref\": \"nixos-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgsDrv\": {\n      \"locked\": {\n        \"lastModified\": 1724819573,\n        \"narHash\": \"sha256-GnR7/ibgIH1vhoy8cYdmXE6iyZqKqFxQSVkFgosBh6w=\",\n        \"owner\": \"nixos\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"71e91c409d1e654808b2621f28a327acfdad8dc2\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nixos\",\n        \"ref\": \"nixos-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgsGcc\": {\n      \"locked\": {\n        \"lastModified\": 1601061727,\n        \"narHash\": \"sha256-TRATNxmc1sovxMAgcUYQAowAR+wxF4ZFoOOF7A80WiU=\",\n        \"owner\": \"NixOs\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"3913f6a514fa3eb29e34af744cc97d0b0f93c35c\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nixos\",\n        \"ref\": \"nixos-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs_2\": {\n      \"locked\": {\n        \"lastModified\": 1718428119,\n        \"narHash\": \"sha256-WdWDpNaq6u1IPtxtYHHWpl5BmabtpmLnMAx0RdJ/vo8=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"e6cea36f83499eb4e9cd184c8a8e823296b50ad5\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixpkgs-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"nixpkgs\": \"nixpkgs\",\n        \"nixpkgsDrv\": \"nixpkgsDrv\",\n        \"nixpkgsGcc\": \"nixpkgsGcc\",\n        \"rust-overlay\": \"rust-overlay\"\n      }\n    },\n    \"rust-overlay\": {\n      \"inputs\": {\n        \"nixpkgs\": \"nixpkgs_2\"\n      },\n      \"locked\": {\n        \"lastModified\": 1724898214,\n        \"narHash\": \"sha256-4yMO9+Lsr3zqTf4clAGGag/bfNTmc/ITOXbJQcOEok4=\",\n        \"owner\": \"oxalica\",\n        \"repo\": \"rust-overlay\",\n        \"rev\": \"0bc2c784e3a6ce30a2ab1b9f47325ccbed13039f\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"oxalica\",\n        \"repo\": \"rust-overlay\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 1.556640625,
          "content": "{\n  description = \"blitzar build environment\";\n\n  inputs = {\n    nixpkgs.url = \"github:nixos/nixpkgs/nixos-unstable\";\n\n    # nixpkgsGcc is pinned to an older version of nixpkgs\n    # with glibc 2.31\n    # \n    # Linking against an older version of glibc allows us\n    # to produce a more portable binary\n    nixpkgsGcc.url = \"github:nixos/nixpkgs/nixos-unstable\";\n\n    # GPU drivers update frequently so we allow the version\n    # of nixpkgs used for drivers to vary independently so\n    # that we don't need to update everything else to get\n    # the latest drivers\n    nixpkgsDrv.url = \"github:nixos/nixpkgs/nixos-unstable\";\n\n    rust-overlay.url = \"github:oxalica/rust-overlay\";\n  };\n\n  outputs = { self, nixpkgs, nixpkgsDrv, nixpkgsGcc, rust-overlay, }:\n    let\n      system = \"x86_64-linux\";\n      pkgsDrv = import nixpkgsDrv {\n        inherit system;\n        config.allowUnfree = true;\n        config.cudaSupport = true;\n      };\n      pkgsGcc = import nixpkgsGcc {\n        inherit system;\n      };\n      driverOverlay = final: prev: {\n        cudaDrivers = pkgsDrv.linuxPackages.nvidia_x11;\n      };\n      gccOverlay = final: prev: {\n        portableGcc = pkgsGcc.gcc;\n      };\n      overlays = [\n        driverOverlay\n        gccOverlay\n        (import rust-overlay)\n      ];\n      pkgs = import nixpkgs {\n        inherit system overlays;\n        config.allowUnfree = true;\n        config.cudaSupport = true;\n      };\n      shell = import ./nix/shell.nix { inherit pkgs; };\n    in\n    {\n      formatter.${system} = pkgs.nixpkgs-fmt;\n      devShells.${system}.default = shell;\n\n    };\n}\n"
        },
        {
          "name": "nix",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.8251953125,
          "content": "{\n    \"name\": \"blitzar_sxt\",\n    \"version\": \"0.0.0-development\",\n    \"devDependencies\": {\n        \"conventional-changelog-conventionalcommits\": \"^5.0.0\",\n        \"semantic-release\": \"^21.0.2\"\n    },\n    \"release\": {\n        \"branches\": [\n            \"main\"\n        ],\n        \"plugins\": [\n            [\n                \"@semantic-release/commit-analyzer\",\n                {\n                    \"preset\": \"conventionalCommits\",\n                    \"releaseRules\": [\n                        {\n                            \"type\": \"build\",\n                            \"release\": \"patch\"\n                        }\n                    ],\n                    \"parserOpts\": {\n                        \"noteKeywords\": [\n                            \"BREAKING CHANGE\",\n                            \"BREAKING CHANGES\",\n                            \"BREAKING\"\n                        ]\n                    }\n                }\n            ],\n            \"@semantic-release/release-notes-generator\",\n            [\n                \"@semantic-release/exec\",\n                {\n                    \"prepareCmd\": \"bash ./ci/build.sh libblitzar-linux-x86_64.so ${nextRelease.version} --with-release\"\n                }\n            ],\n            [\n                \"@semantic-release/github\",\n                {\n                    \"assets\": [\n                        {\n                            \"path\": \"dist/*.h\"\n                        },\n                        {\n                            \"path\": \"dist/*.so*\"\n                        },\n                        {\n                            \"path\": \"dist/*.zip\"\n                        },\n                        {\n                            \"path\": \"dist/*.tar.gz\"\n                        }\n                    ]\n                }\n            ]\n        ]\n    },\n    \"dependencies\": {\n        \"@semantic-release/exec\": \"^6.0.3\"\n    }\n}\n"
        },
        {
          "name": "rust",
          "type": "tree",
          "content": null
        },
        {
          "name": "sxt",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}