{
  "metadata": {
    "timestamp": 1736565903845,
    "page": 867,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tensorflow/tflite-micro",
      "stars": 2011,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 2.798828125,
          "content": "# Copyright 2021 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n#\n# TFLM Bazel configuration file.\n\n# The semver-format version label embedded in build outputs when and where\n# stamping is used. Note TFLM does not currently publish semver-versioned\n# releases; however, this value is used where a version label is required, such\n# as in the Python distribution package.\nbuild --embed_label=0\n\n# Get stamp values from a script's output\nbuild --workspace_status_command=./tools/workspace_status.sh\n\n# TODO(b/315853820): Needed for Bazel 7.0, until migrated to bzlmod\nbuild --noenable_bzlmod\n\n# Use the following C++ standard\nbuild --cxxopt -std=c++17\n\n# Treat warnings as errors\nbuild --copt -Werror\n\n# Common options for --config=ci\nbuild:ci --action_env=CC=clang\nbuild:ci --action_env=CXX=clang++\nbuild:ci --curses=no \nbuild:ci --color=no \nbuild:ci --noshow_progress\nbuild:ci --noshow_loading_progress\nbuild:ci --show_timestamps\nbuild:ci --terminal_columns=0\nbuild:ci --verbose_failures\nbuild:ci --test_output=errors\n\n# When building with the address sanitizer\n# E.g., bazel build --config asan\nbuild:asan --action_env=CC=clang\nbuild:asan --action_env=CXX=clang++\nbuild:asan --strip=never\nbuild:asan --copt -fsanitize=address\nbuild:asan --copt -DADDRESS_SANITIZER\nbuild:asan --copt -g\nbuild:asan --copt -O3\nbuild:asan --copt -fno-omit-frame-pointer\nbuild:asan --linkopt -fsanitize=address\n\n# When building with the memory sanitizer\n# E.g., bazel build --config msan\nbuild:msan --action_env=CC=clang\nbuild:msan --action_env=CXX=clang++\nbuild:msan --strip=never\nbuild:msan --copt -fsanitize=memory\nbuild:msan --copt -DADDRESS_SANITIZER\nbuild:msan --copt -g\nbuild:msan --copt -O3\nbuild:msan --copt -fno-omit-frame-pointer\nbuild:msan --linkopt -fsanitize=memory\n\n# When building with the undefined behavior sanitizer\n# E.g., bazel build --config ubsan\nbuild:ubsan --action_env=CC=clang\nbuild:ubsan --action_env=CXX=clang++\nbuild:ubsan --strip=never\nbuild:ubsan --copt -fsanitize=undefined\nbuild:ubsan --copt -g\nbuild:ubsan --copt -O3\nbuild:ubsan --copt -fno-omit-frame-pointer\nbuild:ubsan --linkopt -fsanitize=undefined\nbuild:ubsan --linkopt -lubsan\n\n# Hooks for defining local configuration\ntry-import ../bazelrc.local\ntry-import bazelrc.local\n"
        },
        {
          "name": ".bazelversion",
          "type": "blob",
          "size": 0.005859375,
          "content": "7.0.0\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.12109375,
          "content": "# Run manually to reformat a file:\n# clang-format -i --style=file <file>\nBasedOnStyle: Google\nDerivePointerAlignment: false\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.65234375,
          "content": "# Define the project's code formatting styles\n#\n# https://editorconfig.org\n#\n# EditorConfig is a file format for defining coding styles. EditorConfig is\n# natively supported by VisualStudio, GitHub, Neovim, etc.\n\n[*]\n# Unix-style newlines and a newline ending in every file\nend_of_line = lf\ninsert_final_newline = true\n\n[*.{cc,h}]\n# https://google.github.io/styleguide/cppguide.html\nindent_style = space\nindent_size = 2\n\n[*.py]\n# https://google.github.io/styleguide/pyguide.html but 2-space indent\nindent_style = space\nindent_size = 2\n\n[WORKSPACE,BUILD,*.bzl]\n# https://bazel.build/build/style-guide\nindent_style = space\nindent_size = 4\n\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.251953125,
          "content": "/bazel-*\n/compile_commands.json\n*.swp\n.vscode/\n*audio_frontend*\n*google*\n*__pycache__*\nvenv\ngen\n\n# Ignore the directory in which `clangd` stores its local index.\n/.cache/\n\n# Ignore the `external` symlink added by `bazel-compile-commands-extractor`\n/external\n"
        },
        {
          "name": ".style.yapf",
          "type": "blob",
          "size": 0.0458984375,
          "content": "[style]\nbased_on_style = pep8\nindent_width = 2\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.33984375,
          "content": "# This is the list of Tensorflow's significant contributors.\n#\n# This does not necessarily list everyone who has contributed code,\n# especially since many employees of one corporation may be contributing.\n# To see the full list of contributors, see the revision history in\n# source control.\n\nGoogle LLC\nYuan Tang <terrytangyuan@gmail.com>\nArm Ltd\n\n"
        },
        {
          "name": "BUILD",
          "type": "blob",
          "size": 0.671875,
          "content": "load(\"@hedron_compile_commands//:refresh_compile_commands.bzl\", \"refresh_compile_commands\")\n\n# `bazel run` this target to generate compile_commands.json, which can be used\n# by various tools like editors and LSPs to provide features like intelligent\n# navigation and autocompletion based on the source graph and compiler commands.\nrefresh_compile_commands(\n    name = \"refresh_compile_commands\",\n    targets = [\"//...\"],\n)\n\nload(\"@bazel_skylib//rules:common_settings.bzl\", \"bool_flag\")\n\nbool_flag(\n    name = \"with_compression\",\n    build_setting_default = False,\n)\n\nconfig_setting(\n    name = \"with_compression_enabled\",\n    flag_values = {\n        \":with_compression\": \"True\",\n    },\n)\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.123046875,
          "content": "*          @tensorflow/micro\n\n/.github/  @advaitjain @rockyrhodes @suleshahid\n/ci/       @advaitjain @rockyrhodes @suleshahid\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 12.0029296875,
          "content": "<!--\nemi-automated TOC generation with instructions from\nhttps://github.com/ekalinin/github-markdown-toc#auto-insert-and-update-toc\n-->\n\n<!--ts-->\n* [How to Contribute](#how-to-contribute)\n   * [Contributor License Agreement](#contributor-license-agreement)\n   * [Community Guidelines](#community-guidelines)\n* [Code Contribution Guidelines](#code-contribution-guidelines)\n   * [General Pull Request Guidelines](#general-pull-request-guidelines)\n   * [Guidelines for Specific Contribution Categories](#guidelines-for-specific-contribution-categories)\n      * [Bug Fixes](#bug-fixes)\n      * [Reference Kernel Implementations](#reference-kernel-implementations)\n      * [Optimized Kernel Implementations](#optimized-kernel-implementations)\n      * [New Target / Platform / IDE / Examples](#new-target--platform--ide--examples)\n* [Development Environment](#development-environment)\n   * [Prerequisites](#prerequisites)\n   * [Recommendations](#recommendations)\n* [Development Workflow Notes](#development-workflow-notes)\n   * [Before submitting your PR](#before-submitting-your-pr)\n   * [During the PR review](#during-the-pr-review)\n   * [Reviewer notes](#reviewer-notes)\n   * [Python notes](#python-notes)\n* [Continuous Integration System](#continuous-integration-system)\n\n<!-- Added by: rkuester, at: Fri Dec 15 04:25:41 PM CST 2023 -->\n\n<!--te-->\n\n# How to Contribute\n\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement (CLA). You (or your employer) retain the copyright to your\ncontribution; this simply gives us permission to use and redistribute your\ncontributions as part of the project. Head over to\n<https://cla.developers.google.com/> to see your current agreements on file or\nto sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Community Guidelines\n\nThis project follows\n[Google's Open Source Community Guidelines](https://opensource.google/conduct/).\n\n# Code Contribution Guidelines\n\nWe provide some general guidelines with the goal of enabling community\ncontributions while still maintaining code health, maintainability, and\nconsistency in style.\n\nPlease note that while these guidelines may seem onerous to some developers,\nthey are derived from Google's software engineering best practices.\n\nBefore we describe project-specific guidelines, we recommend that external\ncontributors read these tips from the Google Testing Blog:\n\n*   [Code Health: Providing Context with Commit Messages and Bug Reports](https://testing.googleblog.com/2017/09/code-health-providing-context-with.html)\n*   [Code Health: Understanding Code In Review](https://testing.googleblog.com/2018/05/code-health-understanding-code-in-review.html)\n*   [Code Health: Too Many Comments on Your Code Reviews?](https://testing.googleblog.com/2017/06/code-health-too-many-comments-on-your.html)\n*   [Code Health: To Comment or Not to Comment?](https://testing.googleblog.com/2017/07/code-health-to-comment-or-not-to-comment.html)\n\nWe also recommend that contributors take a look at the\n[Tensorflow Contributing Guidelines](https://github.com/tensorflow/tensorflow/blob/master/CONTRIBUTING.md).\n\n## General Pull Request Guidelines\n\nWe strongly recommend that contributors:\n\n1.  Initiate a conversation with the TFLM team via a\n    [TF Lite Micro Github issue](https://github.com/tensorflow/tensorflow/issues/new?labels=comp%3Amicro&template=70-tflite-micro-issue.md)\n    as early as possible.\n\n    *   This enables us to give guidance on how to proceed, prevent duplicated\n        effort and also point to alternatives as well as context if we are not\n        able to accept a particular contribution at a given time.\n\n    *   Ideally, you should make an issue ***before*** starting to work on a\n        pull request and provide context on both what you want to contribute and\n        why.\n\n1.  Once step 1. is complete and it is determined that a PR from an external\n    contributor is the way to go, please follow these guidelines from\n    [Google's Engineering Practices documentation](https://google.github.io/eng-practices/):\n\n    *   [Send Small Pull Requests](https://google.github.io/eng-practices/review/developer/small-cls.html)\n\n        *   If a pull request is doing more than one thing, the reviewer will\n            request that it be broken up into two or more PRs.\n\n    *   [Write Good Pull Request Descriptions](https://google.github.io/eng-practices/review/developer/cl-descriptions.html)\n\n        *   We require that all PR descriptions link to the GitHub issue\n            created in step 1 via the text `BUG=#nn` on a line by itself [^1]. This\n            is enforced by CI.\n\n            [^1]: This despite GitHub having additional forms of\n            [linked references](https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/autolinked-references-and-urls).\n\n1.  Unit tests are critical to a healthy codebase. PRs without tests should be\n    the exception rather than the norm. And contributions to improve, simplify,\n    or make the unit tests more exhaustive are welcome! Please refer to\n    [this guideline](https://google.github.io/eng-practices/review/developer/small-cls.html#test_code)\n    on how test code and writing small PRs should be reconciled.\n\n## Guidelines for Specific Contribution Categories\n\nWe provide some additional guidelines for different categories of contributions.\n\n### Bug Fixes\n\nPull requests that fix bugs are always welcome and often uncontroversial, unless\nthere is a conflict between different requirements from the platform, or if\nfixing a bug needs a bigger architectural change.\n\n1.  Create a [Github issue](https://github.com/tensorflow/tflite-micro/issues/new/choose)\n    to determine the scope of the bug fix.\n1.  Send a PR (if that is determined to be the best path forward).\n1.  Bugfix PRs should be accompanied by a test case that fails prior to the fix\n    and passes with the fix. This validates that the fix works as expected, and\n    helps prevent future regressions.\n\n### Reference Kernel Implementations\n\nPull requests that port reference kernels from TF Lite Mobile to TF Lite Micro\nare welcome once we have context from the contributor on why the additional\nkernel is needed.\n\nPlease see the [reference kernel porting guide](tensorflow/lite/micro/docs/porting_reference_ops.md)\nfor more details of that process.\n\n### Optimized Kernel Implementations\nPlease see the [optimized kernel implementations guide](tensorflow/lite/micro/docs/optimized_kernel_implementations.md).\n\n### New Target / Platform / IDE / Examples\n\nPlease see the [new platform support guide](tensorflow/lite/micro/docs/new_platform_support.md)\nfor documentation on how to add TFLM support for your particular platform.\n\n# Development Environment\n\nWe support amd64-architecture development and testing on Ubuntu 22.04, although\nother OSes may work.\n\n## Prerequisites\n\nTFLM's primary build system is [Bazel](https://bazel.build). Add\n[Bazelisk](https://github.com/bazelbuild/bazelisk) as the `bazel` executable in\nyour PATH ([e.g., copy it to `/usr/local/bin/bazel`](ci/install_bazelisk.sh)) to\nautomatically download and run the correct Bazel version as specified in\n`//.bazelversion`.\n\n## Recommendations\n\nBelow are some tips that might be useful and improve the development experience.\n\n* Add the [Refined GitHub](https://github.com/sindresorhus/refined-github)\n  plugin to make the github experience even better.\n\n* Code search the [TfLite Micro codebase](https://sourcegraph.com/github.com/tensorflow/tflite-micro@main)\n  on Sourcegraph. And optionally install the [plugin that enables GitHub integration](https://docs.sourcegraph.com/integration/github#github-integration-with-sourcegraph).\n\n* Install\n  [Buildifier](https://github.com/bazelbuild/buildtools/blob/master/buildifier/README.md)\n  ([e.g.](ci/install_buildifier.sh)) to format Bazel BUILD and .bzl files.\n\n* Install the latest clang and clang-format. For example, [here](ci/Dockerfile.micro)\n  is the what we do for the TFLM continuous integration Docker container.\n\n* Get a copy of [cpplint](https://github.com/google/styleguide/tree/gh-pages/cpplint)\n  or install it:\n\n* Install Pillow.  For example, [here](ci/Dockerfile.micro) is what we do for\n  the TFLM continuous integration Docker container.\n\n  ```\n  pip install cpplint\n  ```\n\n* [yapf](https://github.com/google/yapf/) should be used for formatting Python\n  code. For example:\n\n  ```\n  pip install yapf\n  yapf log_parser.py -i'\n  ```\n\n* Add a git hook to check for code style etc. prior to creating a pull request:\n  ```\n  cp tensorflow/lite/micro/tools/dev_setup/pre-push.tflm .git/hooks/pre-push\n  ```\n\n# Development Workflow Notes\n\n## Before submitting your PR\n\n1.  Run in-place clang-format on all the files that are modified in your git\n    tree with\n\n    ```\n    clang-format -i -style=google `git ls-files -m | grep \"\\.cc\"`\n    clang-format -i -style=google `git ls-files -m | grep \"\\.h\"`\n    ```\n\n1.  Make sure your code is lint-free.\n\n    ```\n    cpplint `git ls-files -m`\n    ```\n\n1.  Run all the tests for x86, and any other platform that you are modifying.\n\n    ```\n    tensorflow/lite/micro/tools/ci_build/test_x86_default.sh\n    ```\n\n    Please check the READMEs in the optimized kernel directories for specific\n    instructions.\n\n1.  Sometimes, bugs are caught by the sanitizers that can go unnoticed\n    via the Makefile. To run a test with the different sanitizers, use the\n    following commands (replace `micro_interpreter_test` with the target that you\n    want to test:\n\n    ```\n    CC=clang bazel run --config=asan tensorflow/lite/micro:micro_interpreter_test\n    CC=clang bazel run --config=msan tensorflow/lite/micro:micro_interpreter_test\n    CC=clang bazel run --config=ubsan tensorflow/lite/micro:micro_interpreter_test\n    ```\n\n## During the PR review\n\n1.  Do not change the git version history.\n\n    *   Always merge upstream/main (***do not rebase***) and no force-pushes\n        please.\n\n    *   Having an extra merge commit is ok as the github review tool handles\n        that gracefully.\n\n    Assuming that you forked tensorflow and added a remote called upstream with:\n\n    ```\n    git remote add upstream https://github.com/tensorflow/tflite-micro.git\n    ```\n\n    Fetch the latest changes from upstream and merge into your local branch.\n\n    ```\n    git fetch upstream\n    git merge upstream/main\n    ```\n\n    In case of a merge conflict, resolve via:\n\n    ```\n    git mergetool\n\n    # Use your favorite diff tools (e.g. meld) to resolve the conflicts.\n\n    git add <files that were manually resolved>\n\n    git commit\n    ```\n\n1.  If a force push seems to be the only path forward, please stop and let your\n    PR reviewer know ***before*** force pushing. We will attempt to do the merge\n    for you. This will also help us better understand in what conditions a\n    force-push may be unavoidable.\n\n## Reviewer notes\n\n*   [GIthub CLI](https://cli.github.com) can be useful to quickly checkout a PR\n    to test locally.\n\n    `gh pr checkout <PR number>`\n\n*   Google engineers on the Tensorflow team will have the permissions to push\n    edits to most PRs. This can be useful to make some small fixes as a result\n    of errors due to internal checks that are not easily reproducible via\n    github.\n\n    One example of this is\n    [this comment](https://github.com/tensorflow/tensorflow/pull/38634#issuecomment-683190474).\n\n    And a sketch of the steps:\n\n    ```\n    git remote add <remote_name> git@github.com:<PR author>/tflite-micro.git\n    git fetch <remote_name>\n\n    git checkout -b <local-branch-name> <remote_name>/<PR branch name>\n\n    # make changes and commit to local branch\n\n    # push changes to remove branch\n\n    git push <remote_name> <PR branch name>\n\n    # remove the temp remote to clean up your git environment.\n\n    git remote rm <remote_name>\n    ```\n\n## Python notes\n\n*   [TFLM Python guide](docs/python.md)\n\n# Continuous Integration System\n  * Some [additional documentation](docs/continuous_integration.md) on the TFLM CI.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.798828125,
          "content": "<!--ts-->\n   * [TensorFlow Lite for Microcontrollers](#tensorflow-lite-for-microcontrollers)\n   * [Build Status](#build-status)\n      * [Official Builds](#official-builds)\n      * [Community Supported TFLM Examples](#community-supported-tflm-examples)\n      * [Community Supported Kernels and Unit Tests](#community-supported-kernels-and-unit-tests)\n   * [Contributing](#contributing)\n   * [Getting Help](#getting-help)\n   * [Additional Documentation](#additional-documentation)\n   * [RFCs](#rfcs)\n\n<!-- Added by: advaitjain, at: Mon 04 Oct 2021 11:23:57 AM PDT -->\n\n<!--te-->\n\n# TensorFlow Lite for Microcontrollers\n\nTensorFlow Lite for Microcontrollers is a port of TensorFlow Lite designed to\nrun machine learning models on DSPs, microcontrollers and other devices with\nlimited memory.\n\nAdditional Links:\n * [Tensorflow github repository](https://github.com/tensorflow/tensorflow/)\n * [TFLM at tensorflow.org](https://www.tensorflow.org/lite/microcontrollers)\n\n# Build Status\n\n * [GitHub Status](https://www.githubstatus.com/)\n\n## Official Builds\n\nBuild Type       |    Status     |\n-----------      | --------------|\nCI (Linux)       | [![CI](https://github.com/tensorflow/tflite-micro/actions/workflows/run_ci.yml/badge.svg)](https://github.com/tensorflow/tflite-micro/actions/workflows/run_ci.yml) |\nCode Sync        | [![Sync from Upstream TF](https://github.com/tensorflow/tflite-micro/actions/workflows/sync.yml/badge.svg)](https://github.com/tensorflow/tflite-micro/actions/workflows/sync.yml) |\n\n\n## Community Supported TFLM Examples\nThis table captures platforms that TFLM has been ported to. Please see\n[New Platform Support](tensorflow/lite/micro/docs/new_platform_support.md) for\nadditional documentation.\n\nPlatform      |    Status     |\n-----------     | --------------|\nArduino         | [![Arduino](https://github.com/tensorflow/tflite-micro-arduino-examples/actions/workflows/ci.yml/badge.svg)](https://github.com/tensorflow/tflite-micro-arduino-examples/actions/workflows/ci.yml) [![Antmicro](https://github.com/antmicro/tensorflow-arduino-examples/actions/workflows/test_examples.yml/badge.svg)](https://github.com/antmicro/tensorflow-arduino-examples/actions/workflows/test_examples.yml) |\n[Coral Dev Board Micro](https://coral.ai/products/dev-board-micro) | [TFLM + EdgeTPU Examples for Coral Dev Board Micro](https://github.com/google-coral/coralmicro) |\nEspressif Systems Dev Boards  | [![ESP Dev Boards](https://github.com/espressif/tflite-micro-esp-examples/actions/workflows/ci.yml/badge.svg)](https://github.com/espressif/tflite-micro-esp-examples/actions/workflows/ci.yml) |\nRenesas Boards | [TFLM Examples for Renesas Boards](https://github.com/renesas/tflite-micro-renesas) |\nSilicon Labs Dev Kits        | [TFLM Examples for Silicon Labs Dev Kits](https://github.com/SiliconLabs/tflite-micro-efr32-examples)\nSparkfun Edge   | [![Sparkfun Edge](https://github.com/advaitjain/tflite-micro-sparkfun-edge-examples/actions/workflows/ci.yml/badge.svg?event=schedule)](https://github.com/advaitjain/tflite-micro-sparkfun-edge-examples/actions/workflows/ci.yml)\nTexas Instruments Dev Boards | [![Texas Instruments Dev Boards](https://github.com/TexasInstruments/tensorflow-lite-micro-examples/actions/workflows/ci.yml/badge.svg?event=status)](https://github.com/TexasInstruments/tensorflow-lite-micro-examples/actions/workflows/ci.yml)\n\n\n## Community Supported Kernels and Unit Tests\nThis is a list of targets that have optimized kernel implementations and/or run\nthe TFLM unit tests using software emulation or instruction set simulators.\n\nBuild Type      |    Status     |\n-----------     | --------------|\nCortex-M        | [![Cortex-M](https://github.com/tensorflow/tflite-micro/actions/workflows/cortex_m.yml/badge.svg)](https://github.com/tensorflow/tflite-micro/actions/workflows/cortex_m.yml) |\nHexagon         | [![Hexagon](https://github.com/tensorflow/tflite-micro/actions/workflows/run_hexagon.yml/badge.svg)](https://github.com/tensorflow/tflite-micro/actions/workflows/run_hexagon.yml) |\nRISC-V          | [![RISC-V](https://github.com/tensorflow/tflite-micro/actions/workflows/riscv.yml/badge.svg)](https://github.com/tensorflow/tflite-micro/actions/workflows/riscv.yml) |\nXtensa          | [![Xtensa](https://github.com/tensorflow/tflite-micro/actions/workflows/run_xtensa.yml/badge.svg)](https://github.com/tensorflow/tflite-micro/actions/workflows/run_xtensa.yml) |\nGenerate Integration Test          | [![Generate Integration Test](https://github.com/tensorflow/tflite-micro/actions/workflows/generate_integration_tests.yml/badge.svg)](https://github.com/tensorflow/tflite-micro/actions/workflows/generate_integration_tests.yml) |\n\n\n# Contributing\nSee our [contribution documentation](CONTRIBUTING.md).\n\n# Getting Help\n\nA [Github issue](https://github.com/tensorflow/tflite-micro/issues/new/choose)\nshould be the primary method of getting in touch with the TensorFlow Lite Micro\n(TFLM) team.\n\nThe following resources may also be useful:\n\n1.  SIG Micro [email group](https://groups.google.com/a/tensorflow.org/g/micro)\n    and\n    [monthly meetings](http://doc/1YHq9rmhrOUdcZnrEnVCWvd87s2wQbq4z17HbeRl-DBc).\n\n1.  SIG Micro [gitter chat room](https://gitter.im/tensorflow/sig-micro).\n\n1. For questions that are not specific to TFLM, please consult the broader TensorFlow project, e.g.:\n   * Create a topic on the [TensorFlow Discourse forum](https://discuss.tensorflow.org)\n   * Send an email to the [TensorFlow Lite mailing list](https://groups.google.com/a/tensorflow.org/g/tflite)\n   * Create a [TensorFlow issue](https://github.com/tensorflow/tensorflow/issues/new/choose)\n   * Create a [Model Optimization Toolkit](https://github.com/tensorflow/model-optimization) issue\n\n# Additional Documentation\n\n * [Continuous Integration](docs/continuous_integration.md)\n * [Benchmarks](tensorflow/lite/micro/benchmarks/README.md)\n * [Profiling](tensorflow/lite/micro/docs/profiling.md)\n * [Memory Management](tensorflow/lite/micro/docs/memory_management.md)\n * [Logging](tensorflow/lite/micro/docs/logging.md)\n * [Porting Reference Kernels from TfLite to TFLM](tensorflow/lite/micro/docs/porting_reference_ops.md)\n * [Optimized Kernel Implementations](tensorflow/lite/micro/docs/optimized_kernel_implementations.md)\n * [New Platform Support](tensorflow/lite/micro/docs/new_platform_support.md)\n * Platform/IP support\n   * [Arm IP support](tensorflow/lite/micro/docs/arm.md)\n * [Software Emulation with Renode](tensorflow/lite/micro/docs/renode.md)\n * [Software Emulation with QEMU](tensorflow/lite/micro/docs/qemu.md)\n * [Python Dev Guide](docs/python.md)\n * [Automatically Generated Files](docs/automatically_generated_files.md)\n * [Python Interpreter Guide](python/tflite_micro/README.md)\n\n# RFCs\n\n1. [Pre-allocated tensors](tensorflow/lite/micro/docs/rfc/001_preallocated_tensors.md)\n1. [TensorFlow Lite for Microcontrollers Port of 16x8 Quantized Operators](tensorflow/lite/micro/docs/rfc/002_16x8_quantization_port.md)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.080078125,
          "content": "Please refer to: https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 3.6748046875,
          "content": "# Copyright 2021 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\nworkspace(name = \"tflite_micro\")\n\nload(\"//tensorflow:workspace.bzl\", \"workspace\")\n\nworkspace()\n\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\n# compile_commands.json generator\nhttp_archive(\n    name = \"hedron_compile_commands\",\n    sha256 = \"bacabfe758676fdc19e4bea7c4a3ac99c7e7378d259a9f1054d341c6a6b44ff6\",\n    strip_prefix = \"bazel-compile-commands-extractor-1266d6a25314d165ca78d0061d3399e909b7920e\",\n    url = \"https://github.com/hedronvision/bazel-compile-commands-extractor/archive/1266d6a25314d165ca78d0061d3399e909b7920e.tar.gz\",\n)\n\nload(\"@hedron_compile_commands//:workspace_setup.bzl\", \"hedron_compile_commands_setup\")\n\nhedron_compile_commands_setup()\n\n_rules_python_version = \"0.26.0\"\n\nhttp_archive(\n    name = \"rules_python\",\n    sha256 = \"9d04041ac92a0985e344235f5d946f71ac543f1b1565f2cdbc9a2aaee8adf55b\",\n    strip_prefix = \"rules_python-{}\".format(_rules_python_version),\n    url = \"https://github.com/bazelbuild/rules_python/archive/refs/tags/{}.tar.gz\".format(_rules_python_version),\n)\n\nload(\"@rules_python//python:repositories.bzl\", \"py_repositories\")\n\npy_repositories()\n\n# Read the Python package dependencies of the build environment. To modify\n# them, see //third_party:python_requirements.in.\nload(\"@rules_python//python:pip.bzl\", \"pip_parse\")\n\npip_parse(\n    name = \"tflm_pip_deps\",\n    requirements_lock = \"//third_party:python_requirements.txt\",\n)\n\n# Create repositories for each Python package dependency.\nload(\"@tflm_pip_deps//:requirements.bzl\", \"install_deps\", \"requirement\")\n\ninstall_deps()\n\nhttp_archive(\n    name = \"pybind11_bazel\",\n    sha256 = \"a185aa68c93b9f62c80fcb3aadc3c83c763854750dc3f38be1dadcb7be223837\",\n    strip_prefix = \"pybind11_bazel-faf56fb3df11287f26dbc66fdedf60a2fc2c6631\",\n    urls = [\"https://github.com/pybind/pybind11_bazel/archive/faf56fb3df11287f26dbc66fdedf60a2fc2c6631.zip\"],\n)\n\nhttp_archive(\n    name = \"pybind11\",\n    build_file = \"@pybind11_bazel//:pybind11.BUILD\",\n    sha256 = \"eacf582fa8f696227988d08cfc46121770823839fe9e301a20fbce67e7cd70ec\",\n    strip_prefix = \"pybind11-2.10.0\",\n    urls = [\"https://github.com/pybind/pybind11/archive/refs/tags/v2.10.0.tar.gz\"],\n)\n\nload(\"@pybind11_bazel//:python_configure.bzl\", \"python_configure\")\n\npython_configure(\n    name = \"local_config_python\",\n    python_version = \"3\",\n)\n\nload(\"//python:py_pkg_cc_deps.bzl\", \"py_pkg_cc_deps\")\n\npy_pkg_cc_deps(\n    name = \"numpy_cc_deps\",\n    includes = [\"numpy/_core/include\"],\n    pkg = requirement(\"numpy\"),\n)\n\npy_pkg_cc_deps(\n    name = \"tensorflow_cc_deps\",\n    includes = [\"tensorflow/include\"],\n    libs = [\"tensorflow/libtensorflow_framework.so.2\"],\n    pkg = requirement(\"tensorflow\"),\n)\n\n# Optimized kernel deps\nhttp_archive(\n    name = \"nnlib_hifi4\",\n    build_file = \"@tflite_micro//third_party/xtensa/nnlib_hifi4:nnlib_hifi4.BUILD\",\n    integrity = \"sha256-ulZ+uY4dRsbDUMZbZtD972eghclWQrqYRb0Y4Znfyyc=\",\n    strip_prefix = \"nnlib-hifi4-34f5f995f28d298ae2b6e2ba6e76c32a5cb34989\",\n    urls = [\"https://github.com/foss-xtensa/nnlib-hifi4/archive/34f5f995f28d298ae2b6e2ba6e76c32a5cb34989.zip\"],\n)\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "codegen",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "debugging_output.md",
          "type": "blob",
          "size": 2.650390625,
          "content": "# How to debug invalid output\n\nThe TFLM debugging output tools allow TFLM users to easily debug their models\nby providing a tool that will compare the intermediate  values(output of each OP/Kernel)\nfrom a model post invoke between the TFLM and TfLite. As well as a way to\ncompare intermediate values between TFLM x86 implementations and Optimized \nImplementations.\n\n## How to debug TFLM Interpreter output on embedded targets\n\nFirst you call a C++ binary that takes a TfLite model and returns a file that has\nrandom inputs and their corresponding output values for each layer of the model\nit was provided.\n\nThe second is you provide a TfLite model and file outputted by C++ binary above\nto a  python script. The script runs TFLM x86 inference comparison to the \nexpected output.\n\n## How to debug TFLM Python Interpreter output\n\nUsing a python script mentioned in the section above when only a TfLite model is\nprovided as input, the script generates random input and compares TFLM vs TfLite\ninference outputs for each layer of the model.\n\n## C++ Expected Layer by Layer Output Tool on TFLite Micro\n\nThis C++ binary allows you to pass in a TfLite model and returns a flatbuffer\nfile with input and the corresponding output values appended into it that can be\npassed into a python debugging tool which can compare those golden values vs\nthe x86 TFLM reference kernel implementation.\n\nThe C++ Tool/binary will write a debugging file to the path provide in\n2nd arg using the tflite_model provided in the 1st arg.\n\n##### Command bazel/blaze:\n\n```\n bazel run tensorflow/lite/micro/tools:layer_cc -- \\\n    </path/to/input_model.tflite>\n   </path/to/output.file_name>\n```\n\n##### How to Build using Makefile :\n\n```\nmake -f tensorflow/lite/micro/tools/make/Makefile layer_by_layer_output_tool -j24\n```\n\n## Python Layer by Layer Debugging Tool \n\nThe Python Tool/Script can first be used to compare TFLM vs Tflite outputs for\nrandom inputs by only providing a TfLite file.\n\n#### TfLite vs TFLM command:\n``` \n bazel run tensorflow/lite/micro/tools:layer_by_layer_debugger -- \\\n    --input_tflite_file=</path/to/my_model.tflite>\n```\n\nThe Python Tool/Script can also be used to compare TFLM's python x86 output\nvs expected output provided by the C++ Tool/binary.\n\n#### TFLM vs Expected Command:\n``` \n  bazel run tensorflow/lite/micro/tools:layer_by_layer_debugger -- \\\n    --input_tflite_file=</path/to/my_model.tflite> \\\n    --layer_by_layer_data_file=</path/to/my_debug_flatbuffer_file>\n```\n\n#### Optional Flags:\n ` --print_dump  `\nWhen this flag is set, it will print the TFLM output for each layer that is\ncompared.\n\n ` --rng`\nInteger random number seed for generating input data for comparisons against TFLite. (Default: 42)\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "signal",
          "type": "tree",
          "content": null
        },
        {
          "name": "tensorflow",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}