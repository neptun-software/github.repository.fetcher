{
  "metadata": {
    "timestamp": 1736565524351,
    "page": 397,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "facebook/igl",
      "stars": 2986,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.275390625,
          "content": "---\nAccessModifierOffset: -1\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines:  Left\n# AlingOperands: true # Unsupported\nAlignTrailingComments: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: false\nBinPackParameters: false\nBreakBeforeBinaryOperators: false\nBreakBeforeBraces: Attach\nBreakBeforeInheritanceComma: false\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializers: AfterColon\nBreakStringLiterals: true\nColumnLimit: 100\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 2\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nFixNamespaceComments: true\nIncludeBlocks: Preserve\nIndentCaseLabels: false\nIndentPPDirectives: None\nIndentWidth: 2\nIndentWrappedFunctionNames: false\nKeepEmptyLinesAtTheStartOfBlocks: false\n# LanguageKind: Cpp # Unsupported\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\n# ObjCBinPackProtocolList: Never # Unsupported\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: true\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 5\nPenaltyBreakBeforeFirstCallParameter: 10\nPenaltyBreakComment: 60\nPenaltyBreakFirstLessLess: 20\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\nQualifierAlignment: Left\nReflowComments: true\nSortIncludes: true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: false\nSpaceBeforeAssignmentOperators: true\n# SpaceBeforeCtorInitializerColon: false # Unsupported\n# SpaceBeforeInheritanceColon: false # Unsupported\nSpaceBeforeParens: ControlStatements\n# SpaceBeforeRangeBasedForLoopColon: true # Unsupported\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles: false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard: Cpp11\nTabWidth: 2\nUseTab: Never\n...\n"
        },
        {
          "name": ".cmake-format",
          "type": "blob",
          "size": 10.71875,
          "content": "{\n  \"_help_parse\": \"Options affecting listfile parsing\",\n  \"parse\": {\n    \"_help_additional_commands\": [\n      \"Specify structure for custom cmake functions\"\n    ],\n    \"additional_commands\": {\n      \"foo\": {\n        \"flags\": [\n          \"BAR\",\n          \"BAZ\"\n        ],\n        \"kwargs\": {\n          \"HEADERS\": \"*\",\n          \"SOURCES\": \"*\",\n          \"DEPENDS\": \"*\"\n        }\n      }\n    },\n    \"_help_override_spec\": [\n      \"Override configurations per-command where available\"\n    ],\n    \"override_spec\": {},\n    \"_help_vartags\": [\n      \"Specify variable tags.\"\n    ],\n    \"vartags\": [],\n    \"_help_proptags\": [\n      \"Specify property tags.\"\n    ],\n    \"proptags\": []\n  },\n  \"_help_format\": \"Options affecting formatting.\",\n  \"format\": {\n    \"_help_disable\": [\n      \"Disable formatting entirely, making cmake-format a no-op\"\n    ],\n    \"disable\": false,\n    \"_help_line_width\": [\n      \"How wide to allow formatted cmake files\"\n    ],\n    \"line_width\": 130,\n    \"_help_tab_size\": [\n      \"How many spaces to tab for indent\"\n    ],\n    \"tab_size\": 2,\n    \"_help_use_tabchars\": [\n      \"If true, lines are indented using tab characters (utf-8\",\n      \"0x09) instead of <tab_size> space characters (utf-8 0x20).\",\n      \"In cases where the layout would require a fractional tab\",\n      \"character, the behavior of the  fractional indentation is\",\n      \"governed by <fractional_tab_policy>\"\n    ],\n    \"use_tabchars\": false,\n    \"_help_fractional_tab_policy\": [\n      \"If <use_tabchars> is True, then the value of this variable\",\n      \"indicates how fractional indentions are handled during\",\n      \"whitespace replacement. If set to 'use-space', fractional\",\n      \"indentation is left as spaces (utf-8 0x20). If set to\",\n      \"`round-up` fractional indentation is replaced with a single\",\n      \"tab character (utf-8 0x09) effectively shifting the column\",\n      \"to the next tabstop\"\n    ],\n    \"fractional_tab_policy\": \"use-space\",\n    \"_help_max_subgroups_hwrap\": [\n      \"If an argument group contains more than this many sub-groups\",\n      \"(parg or kwarg groups) then force it to a vertical layout.\"\n    ],\n    \"max_subgroups_hwrap\": 8,\n    \"_help_max_pargs_hwrap\": [\n      \"If a positional argument group contains more than this many\",\n      \"arguments, then force it to a vertical layout.\"\n    ],\n    \"max_pargs_hwrap\": 8,\n    \"_help_max_rows_cmdline\": [\n      \"If a cmdline positional group consumes more than this many\",\n      \"lines without nesting, then invalidate the layout (and nest)\"\n    ],\n    \"max_rows_cmdline\": 2,\n    \"_help_separate_ctrl_name_with_space\": [\n      \"If true, separate flow control names from their parentheses\",\n      \"with a space\"\n    ],\n    \"separate_ctrl_name_with_space\": false,\n    \"_help_separate_fn_name_with_space\": [\n      \"If true, separate function names from parentheses with a\",\n      \"space\"\n    ],\n    \"separate_fn_name_with_space\": false,\n    \"_help_dangle_parens\": [\n      \"If a statement is wrapped to more than one line, than dangle\",\n      \"the closing parenthesis on its own line.\"\n    ],\n    \"dangle_parens\": false,\n    \"_help_dangle_align\": [\n      \"If the trailing parenthesis must be 'dangled' on its on\",\n      \"line, then align it to this reference: `prefix`: the start\",\n      \"of the statement,  `prefix-indent`: the start of the\",\n      \"statement, plus one indentation  level, `child`: align to\",\n      \"the column of the arguments\"\n    ],\n    \"dangle_align\": \"prefix\",\n    \"_help_min_prefix_chars\": [\n      \"If the statement spelling length (including space and\",\n      \"parenthesis) is smaller than this amount, then force reject\",\n      \"nested layouts.\"\n    ],\n    \"min_prefix_chars\": 4,\n    \"_help_max_prefix_chars\": [\n      \"If the statement spelling length (including space and\",\n      \"parenthesis) is larger than the tab width by more than this\",\n      \"amount, then force reject un-nested layouts.\"\n    ],\n    \"max_prefix_chars\": 10,\n    \"_help_max_lines_hwrap\": [\n      \"If a candidate layout is wrapped horizontally but it exceeds\",\n      \"this many lines, then reject the layout.\"\n    ],\n    \"max_lines_hwrap\": 2,\n    \"_help_line_ending\": [\n      \"What style line endings to use in the output.\"\n    ],\n    \"line_ending\": \"unix\",\n    \"_help_command_case\": [\n      \"Format command names consistently as 'lower' or 'upper' case\"\n    ],\n    \"command_case\": \"canonical\",\n    \"_help_keyword_case\": [\n      \"Format keywords consistently as 'lower' or 'upper' case\"\n    ],\n    \"keyword_case\": \"upper\",\n    \"_help_always_wrap\": [\n      \"A list of command names which should always be wrapped\"\n    ],\n    \"always_wrap\": [],\n    \"_help_enable_sort\": [\n      \"If true, the argument lists which are known to be sortable\",\n      \"will be sorted lexicographicall\"\n    ],\n    \"enable_sort\": true,\n    \"_help_autosort\": [\n      \"If true, the parsers may infer whether or not an argument\",\n      \"list is sortable (without annotation).\"\n    ],\n    \"autosort\": false,\n    \"_help_require_valid_layout\": [\n      \"By default, if cmake-format cannot successfully fit\",\n      \"everything into the desired linewidth it will apply the\",\n      \"last, most agressive attempt that it made. If this flag is\",\n      \"True, however, cmake-format will print error, exit with non-\",\n      \"zero status code, and write-out nothing\"\n    ],\n    \"require_valid_layout\": false,\n    \"_help_layout_passes\": [\n      \"A dictionary mapping layout nodes to a list of wrap\",\n      \"decisions. See the documentation for more information.\"\n    ],\n    \"layout_passes\": {}\n  },\n  \"_help_markup\": \"Options affecting comment reflow and formatting.\",\n  \"markup\": {\n    \"_help_bullet_char\": [\n      \"What character to use for bulleted lists\"\n    ],\n    \"bullet_char\": \"*\",\n    \"_help_enum_char\": [\n      \"What character to use as punctuation after numerals in an\",\n      \"enumerated list\"\n    ],\n    \"enum_char\": \".\",\n    \"_help_first_comment_is_literal\": [\n      \"If comment markup is enabled, don't reflow the first comment\",\n      \"block in each listfile. Use this to preserve formatting of\",\n      \"your copyright/license statements.\"\n    ],\n    \"first_comment_is_literal\": false,\n    \"_help_literal_comment_pattern\": [\n      \"If comment markup is enabled, don't reflow any comment block\",\n      \"which matches this (regex) pattern. Default is `None`\",\n      \"(disabled).\"\n    ],\n    \"literal_comment_pattern\": \".*\",\n    \"_help_fence_pattern\": [\n      \"Regular expression to match preformat fences in comments\",\n      \"default= ``r'^\\\\s*([`~]{3}[`~]*)(.*)$'``\"\n    ],\n    \"fence_pattern\": \"^\\\\s*([`~]{3}[`~]*)(.*)$\",\n    \"_help_ruler_pattern\": [\n      \"Regular expression to match rulers in comments default=\",\n      \"``r'^\\\\s*[^\\\\w\\\\s]{3}.*[^\\\\w\\\\s]{3}$'``\"\n    ],\n    \"ruler_pattern\": \"^\\\\s*[^\\\\w\\\\s]{3}.*[^\\\\w\\\\s]{3}$\",\n    \"_help_explicit_trailing_pattern\": [\n      \"If a comment line matches starts with this pattern then it\",\n      \"is explicitly a trailing comment for the preceeding\",\n      \"argument. Default is '#<'\"\n    ],\n    \"explicit_trailing_pattern\": \"#<\",\n    \"_help_hashruler_min_length\": [\n      \"If a comment line starts with at least this many consecutive\",\n      \"hash characters, then don't lstrip() them off. This allows\",\n      \"for lazy hash rulers where the first hash char is not\",\n      \"separated by space\"\n    ],\n    \"hashruler_min_length\": 10,\n    \"_help_canonicalize_hashrulers\": [\n      \"If true, then insert a space between the first hash char and\",\n      \"remaining hash chars in a hash ruler, and normalize its\",\n      \"length to fill the column\"\n    ],\n    \"canonicalize_hashrulers\": true,\n    \"_help_enable_markup\": [\n      \"enable comment markup parsing and reflow\"\n    ],\n    \"enable_markup\": true\n  },\n  \"_help_lint\": \"Options affecting the linter\",\n  \"lint\": {\n    \"_help_disabled_codes\": [\n      \"a list of lint codes to disable\"\n    ],\n    \"disabled_codes\": [],\n    \"_help_function_pattern\": [\n      \"regular expression pattern describing valid function names\"\n    ],\n    \"function_pattern\": \"[0-9a-z_]+\",\n    \"_help_macro_pattern\": [\n      \"regular expression pattern describing valid macro names\"\n    ],\n    \"macro_pattern\": \"[0-9A-Z_]+\",\n    \"_help_global_var_pattern\": [\n      \"regular expression pattern describing valid names for\",\n      \"variables with global (cache) scope\"\n    ],\n    \"global_var_pattern\": \"[A-Z][0-9A-Z_]+\",\n    \"_help_internal_var_pattern\": [\n      \"regular expression pattern describing valid names for\",\n      \"variables with global scope (but internal semantic)\"\n    ],\n    \"internal_var_pattern\": \"_[A-Z][0-9A-Z_]+\",\n    \"_help_local_var_pattern\": [\n      \"regular expression pattern describing valid names for\",\n      \"variables with local scope\"\n    ],\n    \"local_var_pattern\": \"[a-z][a-z0-9_]+\",\n    \"_help_private_var_pattern\": [\n      \"regular expression pattern describing valid names for\",\n      \"privatedirectory variables\"\n    ],\n    \"private_var_pattern\": \"_[0-9a-z_]+\",\n    \"_help_public_var_pattern\": [\n      \"regular expression pattern describing valid names for public\",\n      \"directory variables\"\n    ],\n    \"public_var_pattern\": \"[A-Z][0-9A-Z_]+\",\n    \"_help_argument_var_pattern\": [\n      \"regular expression pattern describing valid names for\",\n      \"function/macro arguments and loop variables.\"\n    ],\n    \"argument_var_pattern\": \"[a-z][a-z0-9_]+\",\n    \"_help_keyword_pattern\": [\n      \"regular expression pattern describing valid names for\",\n      \"keywords used in functions or macros\"\n    ],\n    \"keyword_pattern\": \"[A-Z][0-9A-Z_]+\",\n    \"_help_max_conditionals_custom_parser\": [\n      \"In the heuristic for C0201, how many conditionals to match\",\n      \"within a loop in before considering the loop a parser.\"\n    ],\n    \"max_conditionals_custom_parser\": 2,\n    \"_help_min_statement_spacing\": [\n      \"Require at least this many newlines between statements\"\n    ],\n    \"min_statement_spacing\": 1,\n    \"_help_max_statement_spacing\": [\n      \"Require no more than this many newlines between statements\"\n    ],\n    \"max_statement_spacing\": 2,\n    \"max_returns\": 6,\n    \"max_branches\": 12,\n    \"max_arguments\": 5,\n    \"max_localvars\": 15,\n    \"max_statements\": 50\n  },\n  \"_help_encode\": \"Options affecting file encoding\",\n  \"encode\": {\n    \"_help_emit_byteorder_mark\": [\n      \"If true, emit the unicode byte-order mark (BOM) at the start\",\n      \"of the file\"\n    ],\n    \"emit_byteorder_mark\": false,\n    \"_help_input_encoding\": [\n      \"Specify the encoding of the input file. Defaults to utf-8\"\n    ],\n    \"input_encoding\": \"utf-8\",\n    \"_help_output_encoding\": [\n      \"Specify the encoding of the output file. Defaults to utf-8.\",\n      \"Note that cmake only claims to support utf-8 so be careful\",\n      \"when using anything else\"\n    ],\n    \"output_encoding\": \"utf-8\"\n  },\n  \"_help_misc\": \"Miscellaneous configurations options.\",\n  \"misc\": {\n    \"_help_per_command\": [\n      \"A dictionary containing any per-command configuration\",\n      \"overrides. Currently only `command_case` is supported.\"\n    ],\n    \"per_command\": {}\n  }\n}\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 10.67578125,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\ncmake_minimum_required(VERSION 3.19)\n\nproject(\"IGL\" CXX C)\n\n# cmake-format: off\noption(IGL_WITH_SAMPLES   \"Enable sample demo apps\"            ON)\n\noption(IGL_WITH_OPENGL    \"Enable IGL/OpenGL\"                  ON)\noption(IGL_WITH_OPENGLES  \"Enable IGL/OpenGL ES\"              OFF)\noption(IGL_WITH_VULKAN    \"Enable IGL/Vulkan\"                  ON)\noption(IGL_WITH_METAL     \"Enable IGL/Metal\"                   ON)\noption(IGL_WITH_WEBGL     \"Enable IGL/WebGL\"                  OFF)\n\noption(IGL_WITH_IGLU      \"Enable IGLU utils\"                  ON)\noption(IGL_WITH_SHELL     \"Enable Shell utils\"                 ON)\noption(IGL_WITH_TESTS     \"Enable IGL tests (gtest)\"          OFF)\noption(IGL_WITH_TRACY     \"Enable Tracy profiler\"             OFF)\noption(IGL_WITH_TRACY_GPU \"Enable Tracy profiler for the GPU\" OFF)\noption(IGL_WITH_OPENXR    \"Enable OpenXR\"                     OFF)\noption(IGL_ENFORCE_LOGS   \"Enable logs in Release builds\"      ON)\n\noption(IGL_DEPLOY_DEPS    \"Deploy dependencies via CMake\"      ON)\n# cmake-format: on\n\nif(DEFINED ENV{VULKAN_SDK})\n  message(STATUS \"VULKAN_SDK=$ENV{VULKAN_SDK}\")\n  if(NOT EXISTS $ENV{VULKAN_SDK})\n    message(FATAL_ERROR \"$ENV{VULKAN_SDK} does not exist.\")\n  endif()\nendif()\n\nif(IOS)\n  if(IGL_WITH_OPENGL)\n    set(IGL_WITH_OPENGLES ON)\n  endif()\n  set(IGL_WITH_OPENGL OFF)\n  set(IGL_WITH_VULKAN OFF)\n  set(IGL_WITH_WEBGL OFF)\nendif()\n\nif(NOT APPLE)\n  set(IGL_WITH_METAL OFF)\nendif()\n\nif(ANDROID)\n  if(IGL_WITH_OPENGL)\n    set(IGL_WITH_OPENGLES ON)\n  endif()\n  set(IGL_WITH_OPENGL OFF)\n  set(IGL_WITH_VULKAN ON)\n  set(IGL_WITH_WEBGL OFF)\n  # disable for all targets due to warnings in third-party code\n  add_definitions(-Wno-nullability-completeness)\n  add_definitions(-Wno-deprecated-volatile)\nelseif(UNIX)\n  # disable for all targets due to warnings in third-party code\n  add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-Wno-volatile>)\n  add_definitions(-Wno-attributes)\nendif()\n\nif(EMSCRIPTEN)\n  if(IGL_WITH_OPENXR)\n    message(FATAL_ERROR \"OpenXR is not supported on Emscripten.\")\n  endif()\n  set(IGL_WITH_IGLU ON)\n  set(IGL_WITH_OPENGL OFF)\n  set(IGL_WITH_OPENGLES OFF)\n  set(IGL_WITH_VULKAN OFF)\n  set(IGL_WITH_WEBGL ON)\n  set(IGL_WITH_SHELL OFF) # shell doesn't supported yet\nendif()\n\ninclude(cmake/helpers.cmake)\n\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\n# cmake-format: off\nmessage(STATUS \"IGL_WITH_SAMPLES  = ${IGL_WITH_SAMPLES}\")\n\nmessage(STATUS \"IGL_WITH_OPENGL    = ${IGL_WITH_OPENGL}\")\nmessage(STATUS \"IGL_WITH_OPENGLES  = ${IGL_WITH_OPENGLES}\")\nmessage(STATUS \"IGL_WITH_VULKAN    = ${IGL_WITH_VULKAN}\")\nmessage(STATUS \"IGL_WITH_METAL     = ${IGL_WITH_METAL}\")\nmessage(STATUS \"IGL_WITH_WEBGL     = ${IGL_WITH_WEBGL}\")\n\nmessage(STATUS \"IGL_WITH_IGLU      = ${IGL_WITH_IGLU}\")\nmessage(STATUS \"IGL_WITH_SHELL     = ${IGL_WITH_SHELL}\")\nmessage(STATUS \"IGL_WITH_TESTS     = ${IGL_WITH_TESTS}\")\nmessage(STATUS \"IGL_WITH_TRACY     = ${IGL_WITH_TRACY}\")\nmessage(STATUS \"IGL_WITH_TRACY_GPU = ${IGL_WITH_TRACY_GPU}\")\nmessage(STATUS \"IGL_WITH_OPENXR    = ${IGL_WITH_OPENXR}\")\nmessage(STATUS \"IGL_ENFORCE_LOGS   = ${IGL_ENFORCE_LOGS}\")\n\nmessage(STATUS \"IGL_DEPLOY_DEPS    = ${IGL_DEPLOY_DEPS}\")\n# cmake-format: on\n\nif(APPLE)\n  if(IGL_WITH_OPENXR)\n    message(FATAL_ERROR \"OpenXR is not supported on Apple (yet).\")\n  endif()\n  if(NOT (IGL_WITH_OPENGL OR IGL_WITH_VULKAN OR IGL_WITH_OPENGLES OR IGL_WITH_METAL OR IGL_WITH_WEBGL))\n    message(FATAL_ERROR \"At least one rendering backend should be defined (OpenGL, Vulkan or Metal).\")\n  endif()\nelse()\n  if(NOT (IGL_WITH_OPENGL OR IGL_WITH_VULKAN OR IGL_WITH_OPENGLES OR IGL_WITH_WEBGL))\n    message(FATAL_ERROR \"At least one rendering backend should be defined (OpenGL or Vulkan).\")\n  endif()\nendif()\n\nif(IGL_WITH_SHELL AND (NOT IGL_WITH_IGLU))\n  message(FATAL_ERROR \"IGL_WITH_SHELL requires enabling IGL_WITH_IGLU.\")\nendif()\n\nif(APPLE)\n  enable_language(OBJC)\n  enable_language(OBJCXX)\nendif()\n\nif(NOT DEFINED CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE \"Debug\")\nendif()\n\nmessage(STATUS \"IGL generator : \" ${CMAKE_GENERATOR})\nmessage(STATUS \"IGL build type: \" ${CMAKE_BUILD_TYPE})\n\nset(IGL_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR})\nset(IGL_DEPS_CACHE_FILE \"${IGL_ROOT_DIR}/third-party/.bootstrap-deps.json\")\nfind_package(Python3 COMPONENTS Interpreter)\n\nmessage(STATUS \"IGL_ROOT_DIR = \" ${IGL_ROOT_DIR})\n\n# Enables multithreaded compilation and a conformant preprocessor on visual studio\nif(MSVC)\n  SET(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS} /MP\")\n  SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /MP\")\nendif()\n\nif(IGL_DEPLOY_DEPS)\n  # deploy dependencies during configuration\n  execute_process(COMMAND ${Python3_EXECUTABLE} deploy_deps.py WORKING_DIRECTORY ${IGL_ROOT_DIR} COMMAND_ERROR_IS_FATAL ANY)\n\n  if(NOT EXISTS ${IGL_DEPS_CACHE_FILE})\n    message(FATAL_ERROR \"Cannot deploy dependencies.\")\n  endif()\n\n  # regenerate dependencies when .bootstrap-deps.json is older than bootstrap-deps.json\n  add_custom_command(COMMAND ${Python3_EXECUTABLE} deploy_deps.py OUTPUT ${IGL_DEPS_CACHE_FILE}\n                     DEPENDS \"${IGL_ROOT_DIR}/third-party/bootstrap-deps.json\" WORKING_DIRECTORY ${IGL_ROOT_DIR})\n  add_custom_target(IGLDependencies DEPENDS ${IGL_DEPS_CACHE_FILE})\n\n  igl_set_folder(IGLDependencies \"IGL\")\nendif()\n\nif (NOT IGL_WITH_TRACY AND IGL_WITH_TRACY_GPU)\n  message(FATAL_ERROR \"IGL_WITH_TRACY must be enabled to use Tracy's GPU profiling\")\nendif()\n\n\nif(IGL_WITH_TRACY)\n  add_definitions(\"-DTRACY_ENABLE=1\")\n  add_subdirectory(third-party/deps/src/tracy)\n  igl_set_folder(TracyClient \"third-party\")\nendif()\n\nif(IGL_WITH_OPENXR)\n  add_subdirectory(third-party/deps/src/openxr-sdk)\n  igl_set_folder(openxr_loader \"third-party/OpenXR\")\nendif()\n\nadd_subdirectory(src/igl)\n\nif(IGL_WITH_TRACY)\n  target_compile_definitions(IGLLibrary PUBLIC \"IGL_WITH_TRACY=1\")\n  if(IGL_WITH_TRACY_GPU)\n    target_compile_definitions(IGLLibrary PUBLIC \"IGL_WITH_TRACY_GPU=1\")\n  endif()\nendif()\n\nif(IGL_DEPLOY_DEPS)\n  add_dependencies(IGLLibrary IGLDependencies)\nendif()\n\nif(IGL_ENFORCE_LOGS)\n  target_compile_definitions(IGLLibrary PUBLIC \"IGL_FORCE_ENABLE_LOGS=1\")\nendif()\n\nif(UNIX AND NOT APPLE AND NOT ANDROID AND NOT EMSCRIPTEN)\n  if(IGL_WITH_SAMPLES OR IGL_WITH_SHELL)\n    target_compile_definitions(IGLLibrary PUBLIC \"IGL_PLATFORM_LINUX_USE_EGL=0\")\n  else()\n    target_compile_definitions(IGLLibrary PUBLIC \"IGL_PLATFORM_LINUX_USE_EGL=1\")\n  endif()\nendif()\n\n# in the client code, use IGL_BACKEND_* macros instead of IGL_BACKEND_ENABLE_*\nif(IGL_WITH_OPENGL)\n  target_compile_definitions(IGLLibrary PUBLIC \"IGL_BACKEND_ENABLE_OPENGL=1\")\nendif()\nif(IGL_WITH_OPENGLES OR IGL_WITH_WEBGL)\n  target_compile_definitions(IGLLibrary PUBLIC \"IGL_BACKEND_ENABLE_OPENGL=1\")\nendif()\nif(IGL_WITH_VULKAN)\n  target_compile_definitions(IGLLibrary PUBLIC \"IGL_BACKEND_ENABLE_VULKAN=1\")\nendif()\nif(IGL_WITH_IGLU)\n  target_compile_definitions(IGLLibrary PUBLIC \"IGL_WITH_IGLU=1\")\nendif()\nif(APPLE AND IGL_WITH_METAL)\n  target_compile_definitions(IGLLibrary PUBLIC \"IGL_BACKEND_ENABLE_METAL=1\")\nendif()\n\ntarget_compile_definitions(IGLLibrary PUBLIC \"IGL_CMAKE_BUILD=1\")\n\ninclude_directories(.)\n\nif(IGL_WITH_IGLU OR IGL_WITH_SAMPLES)\n  add_library(IGLstb third-party/deps/patches/stb_impl/stb_image.c third-party/deps/patches/stb_impl/stb_image_resize.c\n                     third-party/deps/patches/stb_impl/stb_image_write.c)\n  target_include_directories(IGLstb PUBLIC \"third-party/deps/src/stb\")\n  target_include_directories(IGLstb PUBLIC \"third-party/deps/src\")\n  igl_set_folder(IGLstb \"IGL\")\nendif()\nif (IGL_WITH_IGLU)\n  include_directories(\"third-party/deps/src/imgui\")\n  add_subdirectory(IGLU)\n  if(IGL_WITH_SHELL)\n    include_directories(\"third-party/deps/src/stb\")\n    add_subdirectory(shell)\n  endif()\nendif()\n\nif(IGL_WITH_SAMPLES)\n  if (EMSCRIPTEN)\n    add_subdirectory(samples/wasm)\n  else()\n    include_directories(\"third-party/deps/src\")\n    include_directories(\"third-party/deps/src/bc7enc\")\n    include_directories(\"third-party/deps/src/gli\")\n    include_directories(\"third-party/deps/src/glm\")\n    include_directories(\"third-party/deps/src/stb\")\n    include_directories(\"third-party/deps/src/taskflow\")\n    include_directories(\"third-party/deps/src/3D-Graphics-Rendering-Cookbook\")\n    if(WIN32 OR (UNIX AND NOT APPLE AND NOT ANDROID))\n      # cmake-format: off\n      set(GLFW_BUILD_DOCS     OFF CACHE BOOL \"\")\n      set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL \"\")\n      set(GLFW_BUILD_TESTS    OFF CACHE BOOL \"\")\n      set(GLFW_INSTALL        OFF CACHE BOOL \"\")\n      set(GLFW_VULKAN_STATIC  OFF CACHE BOOL \"\")\n      # cmake-format: on\n      add_subdirectory(third-party/deps/src/glfw)\n      igl_set_folder(update_mappings \"third-party/GLFW3\")\n    endif()\n    if(UNIX AND NOT APPLE AND NOT ANDROID)\n      find_package(OpenGL REQUIRED)\n    endif()\n    add_subdirectory(third-party/deps/src/bc7enc)\n    igl_set_cxxstd(bc7enc 17)\n    add_subdirectory(third-party/deps/src/meshoptimizer)\n    add_subdirectory(third-party/deps/src/tinyobjloader)\n    igl_set_folder(bc7enc \"third-party\")\n    igl_set_folder(meshoptimizer \"third-party\")\n    igl_set_folder(tinyobjloader \"third-party/tinyobjloader\")\n    igl_set_folder(uninstall \"third-party/tinyobjloader\")\n    if(NOT APPLE AND NOT ANDROID)\n      add_subdirectory(samples/desktop)\n      igl_set_folder(glfw \"third-party/GLFW3\")\n    endif()\n  endif()\nendif()\n\nif (IGL_WITH_VULKAN OR IGL_WITH_IGLU OR IGL_WITH_SAMPLES)\n  add_subdirectory(third-party/deps/src/fmt \"fmt\")\n  igl_set_folder(fmt \"third-party\")\nendif()\n\nif (IGL_WITH_IGLU OR IGL_WITH_SAMPLES)\n  set(KTX_FEATURE_DOC OFF CACHE BOOL \"\")\n\n  if (NOT EMSCRIPTEN)\n    set(KTX_FEATURE_GL_UPLOAD OFF CACHE BOOL \"\")\n  endif()\n\n  set(KTX_FEATURE_JNI OFF CACHE BOOL \"\")\n  set(KTX_FEATURE_KTX1 ON CACHE BOOL \"\")\n  set(KTX_FEATURE_KTX2 ON CACHE BOOL \"\")\n  set(KTX_FEATURE_LOADTEST_APPS OFF CACHE BOOL \"\")\n  set(KTX_FEATURE_STATIC_LIBRARY ON CACHE BOOL \"\")\n  set(KTX_FEATURE_TESTS OFF CACHE BOOL \"\")\n  set(KTX_FEATURE_TOOLS OFF CACHE BOOL \"\")\n  set(KTX_FEATURE_VK_UPLOAD OFF CACHE BOOL \"\")\n  add_subdirectory(third-party/deps/src/ktx-software)\n  if(TARGET astcenc-avx2-static)\n    igl_set_folder(astcenc-avx2-static \"third-party/ktx-software\")\n  endif()\n  igl_set_folder(ktx \"third-party/ktx-software\")\n  igl_set_folder(ktx_read \"third-party/ktx-software\")\n  igl_set_folder(ktx_version \"third-party/ktx-software\")\n  igl_set_folder(obj_basisu_cbind \"third-party/ktx-software\")\n  igl_set_folder(objUtil \"third-party/ktx-software\")\nendif()\n\n\nif(IGL_WITH_TRACY)\n  target_link_libraries(IGLLibrary PUBLIC TracyClient)\nendif()\n\nif(IGL_WITH_OPENXR)\n  target_compile_definitions(IGLLibrary PUBLIC \"IGL_WITH_OPENXR=1\")\n  target_link_libraries(IGLLibrary PUBLIC OpenXR::openxr_loader)\n  target_include_directories(IGLLibrary PUBLIC \"${IGL_ROOT_DIR}/third-party/deps/src/openxr-sdk/include\")\nendif()\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.27734375,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at <opensource-conduct@fb.com>. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.93359375,
          "content": "# Contributing to IGL\nWe want to make contributing to this project as easy and transparent as\npossible.\n\n## Pull Requests\nWe actively welcome your pull requests. Here's the procedure to submit pull requests to IGL:\n\n1. Submit an issue describing your proposed changes.\n2. The repo owner will respond to your issue.\n3. If your proposed changes are accepted, fork the repo and develop & test your changes.\n4. If you've added code that should be tested, add tests (and ensure they do pass).\n5. Verify your changes work as expected on all relevant rendering backends, and also test them when any combination of backends is disabled using the `IGL_WITH_*` CMake options.\n6. If you've changed APIs, update the documentation.\n7. Make sure your code lints (run `clang-format` or use `.clang-format` in Visual Studio).\n8. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n9. Please respect `// @fb-only` comments and do not delete them!\n10. Open a pull request.\n\n## Dependencies\nOne of our design objectives is that IGL itself should have as few dependencies as possible.\nNo new third-party dependencies will be accepted unless they are absolutely critical to the core functionality of IGL.\n\n## Contributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\n\nComplete your CLA here: <https://code.facebook.com/cla>\n\n## Issues\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe\ndisclosure of security bugs. In those cases, please go through the process\noutlined on that page and do not file a public issue.\n\n## License\nBy contributing to igl, you agree that your contributions will be licensed\nunder the LICENSE file in the root directory of this source tree.\n"
        },
        {
          "name": "IGLU",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 3.052734375,
          "content": "MIT License\n\nCopyright (c) Meta Platforms, Inc. and affiliates.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n## Dependencies\n\n3D-Graphics-Rendering-Cookbook\nhttps://github.com/PacktPublishing/3D-Graphics-Rendering-Cookbook/blob/master/LICENSE\n\nAmazon Lumberyard Bistro\nhttps://developer.nvidia.com/orca/amazon-lumberyard-bistro\nhttps://casual-effects.com/data/\n\nbc7env\nhttps://github.com/richgel999/bc7enc/blob/master/LICENSE\n\nBig Buck Bunny - the Peach open movie project\nhttps://peach.blender.org/about/\n\nBootstrap\nhttps://github.com/corporateshark/bootstrapping/blob/master/LICENSE\n\nColor Checker\nhttps://en.wikipedia.org/wiki/File:Color_Checker.pdf\n\nDamaged Helmet\nhttps://github.com/KhronosGroup/glTF-Sample-Models/blob/master/2.0/DamagedHelmet/README.md\n\nEGL\nhttps://github.com/McNopper/EGL/blob/master/EGL/LICENCE.txt\n\nfmt\nhttps://github.com/fmtlib/fmt/blob/master/LICENSE.rst\n\nglew\nhttps://github.com/nigels-com/glew/blob/master/LICENSE.txt\n\nglfw\nhttps://github.com/glfw/glfw/blob/master/LICENSE.md\n\nglm\nhttps://github.com/g-truc/glm\n\nglslang\nhttps://github.com/KhronosGroup/glslang/blob/main/LICENSE.txt\n\ngoogletest\nhttps://github.com/google/googletest/blob/main/LICENSE\n\nimgui\nhttps://github.com/ocornut/imgui/blob/master/LICENSE.txt\n\nios-cmake\nhttps://github.com/leetal/ios-cmake/blob/master/LICENSE.md\n\nKTX-Software\nhttps://github.com/KhronosGroup/KTX-Software/blob/main/LICENSE.md\n\nLightweightVK\nhttps://github.com/corporateshark/lightweightvk/blob/main/LICENSE.md\n\nMeshoptimizer\nhttps://github.com/zeux/meshoptimizer/blob/master/LICENSE.md\n\nNanoVG\nhttps://github.com/memononen/nanovg/blob/master/LICENSE.txt\n\nSpark SL\nhttps://github.com/facebook/igl/releases/download/SparkSL/SparkSL.LICENSE\n\nstb\nhttps://github.com/nothings/stb/blob/master/LICENSE\n\ntaskflow\nhttps://github.com/taskflow/taskflow/blob/master/LICENSE\n\ntinyobjloader\nhttps://github.com/tinyobjloader/tinyobjloader/blob/release/LICENSE\n\ntracy\nhttps://github.com/wolfpld/tracy/blob/master/LICENSE\n\nvolk\nhttps://github.com/zeux/volk/blob/master/LICENSE.md\n\nVulkan Memory Allocator\nhttps://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/blob/master/LICENSE.txt\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.6640625,
          "content": "<div align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://github.com/facebook/igl/blob/main/.github/igl-full-color-white.svg?raw=true\">\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"https://github.com/facebook/igl/blob/main/.github/igl-full-color-black.svg?raw=true\">\n    <img alt=\"IGL Logo\" src=\".github/igl-full-color-black.svg\" width=\"500\">\n  </picture>\n\n  [![Build Status](https://github.com/facebook/igl/actions/workflows/c-cpp.yml/badge.svg)](https://github.com/facebook/igl/actions)\n\n</div>\n\nIntermediate Graphics Library (IGL) is a cross-platform library that commands the GPU. It encapsulates\ncommon GPU functionality with a low-level cross-platform interface. IGL is designed to support multiple\nbackends implemented on top of various graphics APIs (e.g. OpenGL, Metal and Vulkan) with a common interface.\n\nThere are a lot of good options for abstracting GPU API's; each making different trade-offs. We designed IGL around the following priorities:\n\n1. *Low-level, forward-looking API.* IGL embraces modern abstractions (command buffers, state containers, bindless, etc) and is designed to give more control than OpenGL's state machine API. As a result, IGL can have leaner backends for modern API's (e.g. Metal, Vulkan).\n2. *Minimal overhead for C++.* IGL supports new or existing native rendering code without overhead of language interop or the need for other language runtimes.\n3. *Reach + scale in production.* IGL has been globally battle-tested for broad device reliability (especially the long-tail of Android devices as well as Quest 2/3/Pro compatibility for OpenGL/Vulkan) *and* performance-tuned on our apps.\n\n## Supported rendering backends\n\n * Metal 2+\n * OpenGL 2.x (requires [GL_ARB_framebuffer_object](https://registry.khronos.org/OpenGL/extensions/ARB/ARB_framebuffer_object.txt))\n * OpenGL 3.1+\n * OpenGL ES 2.0+\n * Vulkan 1.1\n * WebGL 2.0\n\n## Supported platforms\n\n * Android\n * iOS\n * Linux\n * macOS\n * Windows\n * WebAssembly\n\n## API Support\n\n|                          | Windows                    | Linux                      | macOS                         | iOS                           | Android                            |\n| ------------------------ | -------------------------- | -------------------------- | ----------------------------- | ----------------------------- | ---------------------------------- |\n| Vulkan 1.1               | :heavy_check_mark:         | :heavy_check_mark:         | :heavy_check_mark: (MoltenVK) | :heavy_multiplication_x:      | :heavy_check_mark: (Quest 2/3/Pro) |\n| OpenGL ES 2.0 - 3.0      | :heavy_check_mark: (Angle) | :heavy_check_mark: (Angle) | :heavy_check_mark:            | :heavy_check_mark:            | :heavy_check_mark:                 |\n| OpenGL ES 3.1 - 3.2      | :heavy_check_mark: (Angle) | :heavy_check_mark: (Angle) | :heavy_multiplication_x:      | :heavy_multiplication_x:      | :heavy_check_mark:                 |\n| OpenGL 3.1 - 4.6         | :heavy_check_mark:         | :heavy_check_mark:         | :heavy_multiplication_x:      | :heavy_multiplication_x:      | :heavy_multiplication_x:           |\n| Metal 2                  | :heavy_multiplication_x:   | :heavy_multiplication_x:   | :heavy_check_mark:            | :heavy_check_mark:            | :heavy_multiplication_x:           |\n\n## Build\n\nBefore building, run the deployment scripts:\n\n```\npython3 deploy_content.py\npython3 deploy_deps.py\n\n```\n\nThese scripts download external third-party dependencies. Please check [Dependencies](./LICENSE.md) for the full list.\n\n* Windows\n\n```\ncd build\ncmake .. -G \"Visual Studio 17 2022\"\n```\n\n* Linux\n\n```\nsudo apt-get install clang xorg-dev libxinerama-dev libxcursor-dev libgles2-mesa-dev libegl1-mesa-dev libglfw3-dev libglew-dev libstdc++-12-dev\ncd build\ncmake .. -G \"Unix Makefiles\"\n```\n\n* macOS\n\n```\ncd build\ncmake .. -G \"Xcode\" -DIGL_WITH_VULKAN=OFF\n```\n\n* iOS\n\n```\ncd build\ncmake .. -G Xcode -DCMAKE_TOOLCHAIN_FILE=../third-party/deps/src/ios-cmake/ios.toolchain.cmake -DDEPLOYMENT_TARGET=13.0 -DPLATFORM=OS64\n```\n\n* Android\n\nThe Gradle project is located within the [build/android](./build/android/) folder.\n\n* WebAssembly\n\nPlease install [Emscripten](https://emscripten.org/docs/getting_started/downloads.html) and [Ninja](https://ninja-build.org/).\n\n```\ncd build\nemcmake cmake .. -G Ninja\ncmake --build .\n```\n\n## Screenshots\n\n![image](.github/screenshot01.png)\n\n![image](.github/screenshot02.png)\n\n## License\n\nIGL is released under the MIT license, see [LICENSE.md](./LICENSE.md) for the full text as well as third-party library\nacknowledgements. SparkSL Compiler is released under the SparkSL Compiler License, see [LICENSE](https://github.com/facebook/igl/releases/download/SparkSL/SparkSL.LICENSE) for full text.\n"
        },
        {
          "name": "ROADMAP.md",
          "type": "blob",
          "size": 1.70703125,
          "content": "We deeply appreciate and value the significance of Open Source projects. It is with great pleasure that we would like to share our admiration for your roadmap vision. Should you require additional ideas for areas in which we can contribute, we have prepared a selection that we believe will be of interest to you.\n\nOur plans encompass the following projects:\n\n## IGL Open Source effort:\n* Support SparkSL CLI tools to utilize SparkSL shaders in RenderSessions.\n* Develop new RenderSession examples.\n* Add OpenXR Android project.\n\n## IGL evolution:\n* Implement Queries support.\n* Develop a Synchronization primitives API (addressing dependencies between drawcalls, also known as framegraph).\n* Enable asynchronous loading of resources.\n* Provide a Multi-threading API.\n* Enhance sRGB support.\n* Finish MSAA (Multi-Sample Anti-Aliasing) support.\n* Ensure consistent instrumentation coverage.\n* Achieve consistent resource tracking coverage.\n\n\nFurthermore, we would like to present some ideas for potential supporters:\n\n## How you can help:\n\n* Assist with new API porting, such as DirectX, WebGPU, or any preferred platform of your choice.\n* Contribute to the creation of additional examples, elevating their quality and diversity.\n* Explore fancy projects involving web-based tools and integration with IDEs.\n* Collaborate on the development of an IGL command capture and playback system. Offer expertise in playback on varying backends, providing an added bonus to the functionality.\n\nWe firmly believe that by collaborating on these initiatives, we can collectively foster an environment of growth and advancement in the field of graphics development.\n\nThank you for considering our contributions and for the opportunity to be part of your vision.\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "deploy_content.py",
          "type": "blob",
          "size": 0.5263671875,
          "content": "#!/usr/bin/python3\n# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\n\nimport os\nimport sys\n\nfolder = \"third-party\"\nscript = os.path.join(folder, \"bootstrap.py\")\njson = os.path.join(folder, \"bootstrap-content.json\")\nbase = os.path.join(folder, \"content\")\n\ntry:\n    os.mkdir(base)\nexcept FileExistsError:\n    pass\n\nos.system(\n    '\"{}\" {} -b {} --bootstrap-file={}'.format(sys.executable, script, base, json)\n)\n"
        },
        {
          "name": "deploy_deps.py",
          "type": "blob",
          "size": 0.5,
          "content": "#!/usr/bin/python3\n# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\n\nimport os\nimport sys\n\nfolder = \"third-party\"\nscript = os.path.join(folder, \"bootstrap.py\")\njson = os.path.join(folder, \"bootstrap-deps.json\")\nbase = os.path.join(folder, \"deps\")\n\nos.system(\n    '\"{}\" {} -b {} --bootstrap-file={} --break-on-first-error'.format(\n        sys.executable, script, base, json\n    )\n)\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "getting-started.md",
          "type": "blob",
          "size": 2.1728515625,
          "content": "# Examples\n\n1) [Tiny](./samples/desktop/Tiny/Tiny.cpp)\n\nA basic example showing how to render a triangle.\n\n![image](.github/screenshot_Tiny.png)\n\n2) [Tiny_Mesh](./samples/desktop/Tiny/Tiny_Mesh.cpp)\n\nAn intermediate example showing how to render multiple textured meshes and ImGui integration.\n\n![image](.github/screenshot_TinyMesh.png)\n\n3) [Tiny_MeshLarge](./samples/desktop/Tiny/Tiny_MeshLarge.cpp)\n\nA complex example demonstrating most of IGL features and rendering the Lumberyard Bistro mesh. Learn how to draw the rest of the owl.\n\n![image](.github/screenshot01.png)\n\n# RenderSessions\n\nRenderSessions use iglshell functionality that provides platform abstraction and basic application functionality.\nWe provide some basic examples that you can use in your projects\n\n1)  [EmptySession](./shell/renderSessions/EmptySession.cpp)\n\nAn empty session. You can use it as a template for a new project\n\n![image](.github/screenshot_EmptySession.png)\n\n2)  [BasicFramebufferSession](./shell/renderSessions/BasicFramebufferSession.cpp)\n\nA basic session showing how to create a framebuffer\n\n![image](.github/screenshot_BasicFramebufferSession.png)\n\n3)  [HelloWorldSession](./shell/renderSessions/HelloWorldSession.cpp)\n\nA basic session showing how to render a triangle\n\n![image](.github/screenshot_HelloWorldSession.png)\n\n4)  [ColorSession](./shell/renderSessions/ColorSession.cpp)\n\nA basic session showing how to render a textured quad\n\n![image](.github/screenshot_ColorSession.png)\n\n5)  [ImguiSession](./shell/renderSessions/ImguiSession.cpp)\n\nA basic session showing how to use ImGUI with IGL\n\n![image](.github/screenshot_ImguiSession.png)\n\n6)  [MRTSession](./shell/renderSessions/MRTSession.cpp)\n\nA basic session showing how to use multiple render targets feature\n\n![image](.github/screenshot_MRTSession.png)\n\n7)  [Textured3DCubeSession](./shell/renderSessions/Textured3DCubeSession.cpp)\n\nA basic session showing how to use 3D textures\n\n![image](.github/screenshot_Textured3DCubeSession.png)\n\n8)  [TQMultiRenderPassSession](./shell/renderSessions/TQMultiRenderPassSession.cpp)\n\nA basic session showing how to use multiple render passes\n\n![image](.github/screenshot_TQMultiRenderPassSession.png)\n\nAnd many more sessions are coming!\n"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "shell",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "third-party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}