{
  "metadata": {
    "timestamp": 1736565845610,
    "page": 789,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jpcy/xatlas",
      "stars": 2142,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 0.27734375,
          "content": "os:\n  - Visual Studio 2022\n\nenvironment:\n  matrix:\n    - ACTION: vs2015\n    - ACTION: vs2017\n    - ACTION: vs2019\n    - ACTION: vs2022\n\nplatform:\n  - Win32\n  - x64\n    \nconfiguration:\n  - Release\n\ninstall:\n  - bin\\premake5.exe %ACTION%\n  \nbuild:\n  project: build\\$(ACTION)\\xatlas.sln\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.005859375,
          "content": "build\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0498046875,
          "content": "MIT License\n\nCopyright (c) 2018-2020 Jonathan Young\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.15234375,
          "content": "## xatlas\n\n[![Actions Status](https://github.com/jpcy/xatlas/workflows/build/badge.svg)](https://github.com/jpcy/xatlas/actions) [![Appveyor CI Build Status](https://ci.appveyor.com/api/projects/status/github/jpcy/xatlas?branch=master&svg=true)](https://ci.appveyor.com/project/jpcy/xatlas) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nxatlas is a small C++11 library with no external dependencies that generates unique texture coordinates suitable for baking lightmaps or texture painting.\n\nIt is an independent fork of [thekla_atlas](https://github.com/Thekla/thekla_atlas), used by [The Witness](https://en.wikipedia.org/wiki/The_Witness_(2016_video_game)).\n\n## Screenshots\n\n#### Example - [Cesium Milk Truck](https://github.com/KhronosGroup/glTF-Sample-Models)\n| Viewer | Random packing | Brute force packing |\n|---|---|---|\n| [![Viewer](https://user-images.githubusercontent.com/3744372/69908461-48cace80-143e-11ea-8b73-efea5a9f036e.png)](https://user-images.githubusercontent.com/3744372/69908460-48323800-143e-11ea-8b18-58087493c8e9.png) | ![Random packing](https://user-images.githubusercontent.com/3744372/68638607-d4db8b80-054d-11ea-8238-845d94789a2d.gif) | ![Brute force packing](https://user-images.githubusercontent.com/3744372/68638614-da38d600-054d-11ea-82d9-43e558c46d50.gif) |\n\n#### Example - [Godot Third Person Shooter demo](https://github.com/godotengine/tps-demo)\n[![Godot TPS](https://user-images.githubusercontent.com/3744372/69908463-48cace80-143e-11ea-8035-b669d1a455f6.png)](https://user-images.githubusercontent.com/3744372/69908462-48cace80-143e-11ea-8946-a2c596ec8028.png)\n\n#### [Graphite/Geogram](http://alice.loria.fr/index.php?option=com_content&view=article&id=22)\n![Graphite/Geogram](https://user-images.githubusercontent.com/19478253/69903392-c0deb900-1398-11ea-8a52-c211bc7803a9.gif)\n\n## How to use\n\n### Building\n\nPremake is used. For CMake support, see [here](https://github.com/cpp-pm/xatlas).\n\nIntegration into an existing build is simple, only `xatlas.cpp` and `xatlas.h` are required. They can be found in [source/xatlas](https://github.com/jpcy/xatlas/blob/master/source/xatlas)\n\n#### Windows\n\nRun `bin\\premake.bat`. Open `build\\vs2019\\xatlas.sln`.\n\nNote: change the build configuration to \"Release\". The default - \"Debug\" - severely degrades performance.\n\n#### Linux\n\nRequired packages: `libgl1-mesa-dev libgtk-3-dev xorg-dev`.\n\nInstall Premake version 5. Run `premake5 gmake`, `cd build/gmake`, `make`.\n\n### Bindings\n\n[Python](https://github.com/mworchel/xatlas-python)\n\n### Generate an atlas (simple API)\n\n1. Create an empty atlas with `xatlas::Create`.\n2. Add one or more meshes with `xatlas::AddMesh`.\n3. Call `xatlas::Generate`. Meshes are segmented into charts, which are parameterized and packed into an atlas.\n\nThe `xatlas::Atlas` instance created in the first step now contains the result: each input mesh added by `xatlas::AddMesh` has a corresponding new mesh with a UV channel. New meshes have more vertices (the UV channel adds seams), but the same number of indices.\n\nCleanup with `xatlas::Destroy`.\n\n[Example code here.](https://github.com/jpcy/xatlas/blob/master/source/examples/example.cpp)\n\n### Generate an atlas (tools/editor integration API)\n\nInstead of calling `xatlas::Generate`, the following functions can be called in sequence:\n\n1. `xatlas::ComputeCharts`: meshes are segmented into charts and parameterized.\n2. `xatlas::PackCharts`: charts are packed into one or more atlases.\n\nAll of these functions take a progress callback. Return false to cancel.\n\nYou can call any of these functions multiple times, followed by the proceeding functions, to re-generate the atlas. E.g. calling `xatlas::PackCharts` multiple times to tweak options like unit to texel scale and resolution.\n\nSee the [viewer](https://github.com/jpcy/xatlas/tree/master/source/examples/viewer) for example code.\n\n### Pack multiple atlases into a single atlas\n\n1. Create an empty atlas with `xatlas::Create`.\n2. Add one or more meshes with `xatlas::AddUvMesh`.\n3. Call `xatlas::PackCharts`.\n\n[Example code here.](https://github.com/jpcy/xatlas/blob/master/source/examples/example_uvmesh.cpp)\n\n## Technical information / related publications\n\n[Ignacio Castaño's blog post on thekla_atlas](http://www.ludicon.com/castano/blog/articles/lightmap-parameterization/)\n\nP. Sander, J. Snyder, S. Gortler, and H. Hoppe. [Texture Mapping Progressive Meshes](http://hhoppe.com/proj/tmpm/)\n\nK. Hormann, B. Lévy, and A. Sheffer. [Mesh Parameterization: Theory and Practice](http://alice.loria.fr/publications/papers/2007/SigCourseParam/param-course.pdf)\n\nP. Sander, Z. Wood, S. Gortler, J. Snyder, and H. Hoppe. [Multi-Chart Geometry Images](http://hhoppe.com/proj/mcgim/)\n\nD. Julius, V. Kraevoy, and A. Sheffer. [D-Charts: Quasi-Developable Mesh Segmentation](https://www.cs.ubc.ca/~vlady/dcharts/EG05.pdf)\n\nB. Lévy, S. Petitjean, N. Ray, and J. Maillot. [Least Squares Conformal Maps for Automatic Texture Atlas Generation](https://members.loria.fr/Bruno.Levy/papers/LSCM_SIGGRAPH_2002.pdf)\n\nO. Sorkine, D. Cohen-Or, R. Goldenthal, and D. Lischinski. [Bounded-distortion Piecewise Mesh Parameterization](https://igl.ethz.ch/projects/parameterization/BDPMP/index.php)\n\nY. O’Donnell. [Precomputed Global Illumination in Frostbite](https://media.contentapi.ea.com/content/dam/eacom/frostbite/files/gdc2018-precomputedgiobalilluminationinfrostbite.pdf)\n\n## Used by\n\n[ArmorPaint](https://armorpaint.org/index.html)\n\n[Bakery - GPU Lightmapper](https://assetstore.unity.com/packages/tools/level-design/bakery-gpu-lightmapper-122218)\n\n[DXR Ambient Occlusion Baking](https://github.com/Twinklebear/dxr-ao-bake) - A demo of ambient occlusion map baking using DXR inline ray tracing.\n\n[Filament](https://google.github.io/filament/)\n\n[Godot Engine](https://github.com/godotengine/godot)\n\n[Graphite/Geogram](http://alice.loria.fr/index.php?option=com_content&view=article&id=22)\n\n[Lightmaps - An OpenGL sample demonstrating path traced lightmap baking on the CPU with Embree](https://github.com/diharaw/Lightmaps)\n\n[redner](https://github.com/BachiLi/redner)\n\n[Skylicht Engine](https://github.com/skylicht-lab/skylicht-engine)\n\n[toy](https://github.com/hugoam/toy) / [two](https://github.com/hugoam/two)\n\n[UNIGINE](https://unigine.com/) - [video](https://www.youtube.com/watch?v=S0gR9T1tWPg)\n\n[Wicked Engine](https://github.com/turanszkij/WickedEngine)\n\n## Related projects\n\n[aobaker](https://github.com/prideout/aobaker) - Ambient occlusion baking. Uses [thekla_atlas](https://github.com/Thekla/thekla_atlas).\n\n[Lightmapper](https://github.com/ands/lightmapper) - Hemicube based lightmap baking. The example model texture coordinates were generated by [thekla_atlas](https://github.com/Thekla/thekla_atlas).\n\n[Microsoft's UVAtlas](https://github.com/Microsoft/UVAtlas) - isochart texture atlasing.\n\n[Ministry of Flat](http://www.quelsolaar.com/ministry_of_flat/) - Commercial automated UV unwrapper.\n\n[seamoptimizer](https://github.com/ands/seamoptimizer) - A C/C++ single-file library that minimizes the hard transition errors of disjoint edges in lightmaps.\n\n[simpleuv](https://github.com/huxingyi/simpleuv/) - Automatic UV Unwrapping Library for Dust3D.\n\n## Models used\n\n[Gazebo model](https://opengameart.org/content/gazebo-0) by Teh_Bucket\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "premake5.lua",
          "type": "blob",
          "size": 11.28125,
          "content": "newoption\n{\n\ttrigger = \"asan\",\n\tdescription = \"Enable Clang AddressSanitizer\"\n}\n\nnewoption\n{\n\ttrigger = \"msan\",\n\tdescription = \"Enable Clang MemorySanitizer\"\n}\n\nnewoption\n{\n\ttrigger = \"ubsan\",\n\tdescription = \"Enable Clang UndefinedBehaviorSanitizer\"\n}\n\ndofile(\"source/viewer/shaders.lua\")\n\nif _ACTION == nil then\n\treturn\nend\n\nlocal asanEnabled = false\nlocal msanEnabled = false\nlocal ubsanEnabled = false\nif _ACTION == \"gmake\" and _OPTIONS[\"cc\"] == \"clang\" then\n    if _OPTIONS[\"asan\"] then\n        asanEnabled = true\n    \tsanitizerEnabled = true\n    end\n\tif _OPTIONS[\"msan\"] then\n        msanEnabled = true\n    \tsanitizerEnabled = true\n    end\n    if _OPTIONS[\"ubsan\"] then\n        ubsanEnabled = true\n    \tsanitizerEnabled = true\n    end\nend\nlocal sanitizerEnabled = asanEnabled or msanEnabled or ubsanEnabled\n\nfunction sanitizer()\n\tif asanEnabled then\n\t\tbuildoptions { \"-fsanitize=address\" }\n\t\tlinkoptions { \"-fsanitize=address\" }\n\tend\n\tif msanEnabled then\n\t\tbuildoptions { \"-fsanitize=memory\" }\n\t\tlinkoptions { \"-fsanitize=memory\" }\n\tend\n    if ubsanEnabled then\n\t\tbuildoptions { \"-fsanitize=undefined\" }\n\t\tlinkoptions { \"-fsanitize=undefined\" }\n\tend\n    if sanitizerEnabled then\n\t\tbuildoptions { \"-fno-omit-frame-pointer\" }\n\tend\nend\n\nsolution \"xatlas\"\n\tconfigurations { \"Release\", \"Debug\" }\n\tif _OPTIONS[\"cc\"] ~= nil then\n\t\tlocation(path.join(\"build\", _ACTION) .. \"_\" .. _OPTIONS[\"cc\"])\n\telse\n\t\tlocation(path.join(\"build\", _ACTION))\n\tend\n\tplatforms { \"x86_64\", \"x86\" }\n\tstartproject \"viewer\"\n\tfilter \"platforms:x86\"\n\t\tarchitecture \"x86\"\n\tfilter \"platforms:x86_64\"\n\t\tarchitecture \"x86_64\"\n\tfilter \"configurations:Debug*\"\n\t\tdefines { \"_DEBUG\" }\n\t\toptimize \"Debug\"\n\t\tsymbols \"On\"\n\tfilter \"configurations:Release\"\n\t\tdefines \"NDEBUG\"\n\t\toptimize \"Full\"\n\tfilter {}\n\tif sanitizerEnabled then\n\t\toptimize \"Off\"\n\t\tsymbols \"On\"\n\tend\n\tsanitizer()\n\t\nlocal XATLAS_DIR = \"source/xatlas\"\n\t\t\nproject \"xatlas_static\"\n\tkind \"StaticLib\"\n\tlanguage \"C++\"\n\tcppdialect \"C++11\"\n\texceptionhandling \"Off\"\n\trtti \"Off\"\n\twarnings \"Extra\"\n\tenablewarnings { \"shadow\" }\n\tfiles { path.join(XATLAS_DIR, \"xatlas.*\") }\n\tsanitizer()\n\t\nproject \"xatlas\"\n\tkind \"SharedLib\"\n\tlanguage \"C++\"\n\tcppdialect \"C++11\"\n\texceptionhandling \"Off\"\n\trtti \"Off\"\n\twarnings \"Extra\"\n\tenablewarnings { \"shadow\" }\n\tdefines { \"XATLAS_C_API=1\", \"XATLAS_EXPORT_API=1\" }\n\tfiles { path.join(XATLAS_DIR, \"*.*\") }\n\tsanitizer()\n\t\nlocal THIRDPARTY_DIR = \"source/thirdparty\"\nlocal BGFX_DIR = path.join(THIRDPARTY_DIR, \"bgfx\")\nlocal BIMG_DIR = path.join(THIRDPARTY_DIR, \"bimg\")\nlocal BX_DIR = path.join(THIRDPARTY_DIR, \"bx\")\nlocal EIGEN_DIR = path.join(THIRDPARTY_DIR, \"eigen\")\nlocal EMBREE_DIR = path.join(THIRDPARTY_DIR, \"embree3\")\nlocal ENKITS_DIR = path.join(THIRDPARTY_DIR, \"enkiTS\")\nlocal GLFW_DIR = path.join(THIRDPARTY_DIR, \"glfw\")\nlocal IGL_DIR = path.join(THIRDPARTY_DIR, \"libigl\")\nlocal MIMALLOC_DIR = path.join(THIRDPARTY_DIR, \"mimalloc\")\nlocal NATIVEFILEDIALOG_DIR = path.join(THIRDPARTY_DIR, \"nativefiledialog\")\nlocal OIDN_DIR = path.join(THIRDPARTY_DIR, \"oidn\")\nlocal OPENFBX_DIR = path.join(THIRDPARTY_DIR, \"OpenFBX\")\n\nproject \"test\"\n\tkind \"ConsoleApp\"\n\tlanguage \"C++\"\n\tcppdialect \"C++11\"\n\texceptionhandling \"Off\"\n\trtti \"Off\"\n\twarnings \"Extra\"\n\tsanitizer()\n\tincludedirs { XATLAS_DIR, THIRDPARTY_DIR }\n\tfiles \"source/test/test.cpp\"\n\tlinks { \"tiny_obj_loader\", \"xatlas_static\" }\n\tfilter \"action:vs*\"\n\t\tfiles \"source/xatlas.natvis\"\n\tfilter \"system:linux\"\n\t\tlinks { \"pthread\" }\n\nproject \"viewer\"\n\tkind \"ConsoleApp\"\n\tlanguage \"C++\"\n\tcppdialect \"C++14\"\n\texceptionhandling \"Off\"\n\trtti \"Off\"\n\twarnings \"Extra\"\n\tsanitizer()\n\tfiles { \"source/viewer/*.*\", \"source/viewer/shaders/*.*\" }\n\tincludedirs\n\t{\n\t\tXATLAS_DIR,\n\t\tTHIRDPARTY_DIR,\n\t\tpath.join(BGFX_DIR, \"include\"),\n\t\tpath.join(BX_DIR, \"include\"),\n\t\tEIGEN_DIR,\n\t\tEMBREE_DIR,\n\t\tENKITS_DIR,\n\t\tpath.join(GLFW_DIR, \"include\"),\n\t\tpath.join(IGL_DIR, \"include\"),\n\t\tpath.join(MIMALLOC_DIR, \"include\"),\n\t\tpath.join(NATIVEFILEDIALOG_DIR, \"include\"),\n\t\tpath.join(OIDN_DIR, \"include\"),\n\t\tOPENFBX_DIR\n\t}\n\tlinks { \"bgfx\", \"bimg\", \"bx\", \"cgltf\", \"enkiTS\", \"glfw\", \"imgui\", \"mimalloc\", \"nativefiledialog\", \"objzero\", \"OpenFBX\", \"stb_image\", \"stb_image_resize\", \"xatlas_static\" }\n\tfilter \"system:windows\"\n\t\tlinks { \"bcrypt\", \"gdi32\", \"ole32\", \"psapi\", \"uuid\"}\n\tfilter \"system:linux\"\n\t\tlinks { \"dl\", \"GL\", \"gtk-3\", \"gobject-2.0\", \"glib-2.0\", \"pthread\", \"X11\", \"Xcursor\", \"Xinerama\", \"Xrandr\" }\n\tfilter \"action:vs*\"\n\t\tfiles \"source/xatlas.natvis\"\n\t\tincludedirs { path.join(BX_DIR, \"include/compat/msvc\") }\n\tfilter { \"system:windows\", \"action:gmake\" }\n\t\tincludedirs { path.join(BX_DIR, \"include/compat/mingw\") }\n\t\t\ngroup \"examples\"\nlocal EXAMPLES_DIR = \"source/examples\"\n\nproject \"example\"\n\tkind \"ConsoleApp\"\n\tlanguage \"C++\"\n\tcppdialect \"C++11\"\n\texceptionhandling \"Off\"\n\trtti \"Off\"\n\twarnings \"Extra\"\n\tsanitizer()\n\tfiles { path.join(EXAMPLES_DIR, \"example.cpp\") }\n\tincludedirs { XATLAS_DIR, THIRDPARTY_DIR }\n\tlinks { \"stb_image_write\", \"tiny_obj_loader\", \"xatlas_static\" }\n\tfilter \"action:vs*\"\n\t\tfiles \"source/xatlas.natvis\"\n\tfilter \"system:linux\"\n\t\tlinks { \"pthread\" }\n\t\t\nproject \"example_c99\"\n\tkind \"ConsoleApp\"\n\tlanguage \"C\"\n\tcdialect \"C99\"\n\twarnings \"Extra\"\n\tsanitizer()\n\tfiles { path.join(EXAMPLES_DIR, \"example_c99.c\") }\n\tincludedirs { XATLAS_DIR, THIRDPARTY_DIR }\n\tlinks { \"objzero\", \"xatlas\" }\n\tfilter \"system:linux\"\n\t\tlinks { \"m\", \"pthread\" }\n\t\t\nproject \"example_uvmesh\"\n\tkind \"ConsoleApp\"\n\tlanguage \"C++\"\n\tcppdialect \"C++11\"\n\texceptionhandling \"Off\"\n\trtti \"Off\"\n\twarnings \"Extra\"\n\tsanitizer()\n\tfiles { path.join(EXAMPLES_DIR, \"example_uvmesh.cpp\") }\n\tincludedirs { XATLAS_DIR, THIRDPARTY_DIR }\n\tlinks { \"stb_image_write\", \"tiny_obj_loader\", \"xatlas_static\" }\n\tfilter \"action:vs*\"\n\t\tfiles \"source/xatlas.natvis\"\n\tfilter \"system:linux\"\n\t\tlinks { \"pthread\" }\n\ngroup \"thirdparty\"\n\nproject \"bgfx\"\n\tkind \"StaticLib\"\n\tlanguage \"C++\"\n\tcppdialect \"C++14\"\n\texceptionhandling \"Off\"\n\trtti \"Off\"\n\tsanitizer()\n\tdefines\t{ \"__STDC_FORMAT_MACROS\" }\n\tfiles\n\t{\n\t\tpath.join(BGFX_DIR, \"include/bgfx/**.h\"),\n\t\tpath.join(BGFX_DIR, \"src/*.cpp\"),\n\t\tpath.join(BGFX_DIR, \"src/*.h\")\n\t}\n\texcludes\n\t{\n\t\tpath.join(BGFX_DIR, \"src/amalgamated.cpp\")\n\t}\n\tincludedirs\n\t{\n\t\tpath.join(BX_DIR, \"include\"),\n\t\tpath.join(BIMG_DIR, \"include\"),\n\t\tpath.join(BIMG_DIR, \"3rdparty\"),\n\t\tpath.join(BIMG_DIR, \"3rdparty/astc-codec/include\"),\n\t\tpath.join(BIMG_DIR, \"3rdparty/iqa/include\"),\n\t\tpath.join(BGFX_DIR, \"include\"),\n\t\tpath.join(BGFX_DIR, \"3rdparty\"),\n\t\tpath.join(BGFX_DIR, \"3rdparty/dxsdk/include\"),\n\t\tpath.join(BGFX_DIR, \"3rdparty/khronos\")\n\t}\n\tfilter \"configurations:Debug\"\n\t\tdefines \"BGFX_CONFIG_DEBUG=1\"\n\tfilter \"action:vs*\"\n\t\tdefines { \"_CRT_SECURE_NO_WARNINGS\" }\n\t\tincludedirs { path.join(BX_DIR, \"include/compat/msvc\") }\n\t\texcludes\n\t\t{\n\t\t\tpath.join(BGFX_DIR, \"src/glcontext_glx.cpp\"),\n\t\t\tpath.join(BGFX_DIR, \"src/glcontext_egl.cpp\")\n\t\t}\n\tfilter { \"system:windows\", \"action:gmake\" }\n\t\tincludedirs { path.join(BX_DIR, \"include/compat/mingw\") }\n\t\t\nproject \"bimg\"\n\tkind \"StaticLib\"\n\tlanguage \"C++\"\n\tcppdialect \"C++14\"\n\texceptionhandling \"Off\"\n\trtti \"Off\"\n\tsanitizer()\n\tdefines\n\t{\n\t\t\"BIMG_DECODE_ENABLE=0\"\n\t}\n\tfiles\n\t{\n\t\tpath.join(BIMG_DIR, \"include/bimg/*.h\"),\n\t\tpath.join(BIMG_DIR, \"src/*.cpp\"),\n\t\tpath.join(BIMG_DIR, \"src/*.h\")\n\t}\n\tincludedirs\n\t{\n\t\tpath.join(BX_DIR, \"include\"),\n\t\tpath.join(BIMG_DIR, \"include\")\n\t}\n\tfilter \"action:vs*\"\n\t\tdefines { \"_CRT_SECURE_NO_WARNINGS\" }\n\t\tincludedirs { path.join(BX_DIR, \"include/compat/msvc\") }\n\tfilter { \"system:windows\", \"action:gmake\" }\n\t\tincludedirs { path.join(BX_DIR, \"include/compat/mingw\") }\n\nproject \"bx\"\n\tkind \"StaticLib\"\n\tlanguage \"C++\"\n\tcppdialect \"C++14\"\n\texceptionhandling \"Off\"\n\trtti \"Off\"\n\tsanitizer()\n\tdefines\t{ \"__STDC_FORMAT_MACROS\" }\n\tfiles\n\t{\n\t\tpath.join(BX_DIR, \"include/bx/*.h\"),\n\t\tpath.join(BX_DIR, \"include/bx/inline/*.inl\"),\n\t\tpath.join(BX_DIR, \"include/tinystl/*.h\"),\n\t\tpath.join(BX_DIR, \"src/*.cpp\")\n\t}\n\texcludes\n\t{\n\t\tpath.join(BX_DIR, \"src/amalgamated.cpp\"),\n\t\tpath.join(BX_DIR, \"src/crtnone.cpp\")\n\t}\n\tincludedirs\n\t{\n\t\tpath.join(BX_DIR, \"3rdparty\"),\n\t\tpath.join(BX_DIR, \"include\")\n\t}\n\tfilter \"action:vs*\"\n\t\tdefines { \"_CRT_SECURE_NO_WARNINGS\" }\n\t\tincludedirs { path.join(BX_DIR, \"include/compat/msvc\") }\n\tfilter { \"system:windows\", \"action:gmake\" }\n\t\tincludedirs { path.join(BX_DIR, \"include/compat/mingw\") }\n\nproject \"cgltf\"\n\tkind \"StaticLib\"\n\tlanguage \"C\"\n\tsanitizer()\n\tfiles(path.join(THIRDPARTY_DIR, \"cgltf.*\"))\n\tfilter \"action:vs*\"\n\t\tdefines { \"_CRT_SECURE_NO_WARNINGS\" }\n\t\t\nproject \"enkiTS\"\n\tkind \"StaticLib\"\n\tlanguage \"C++\"\n\tcppdialect \"C++11\"\n\texceptionhandling \"Off\"\n\trtti \"Off\"\n\tsanitizer()\n\tfiles(path.join(ENKITS_DIR, \"*.*\"))\n\nproject \"glfw\"\n\tkind \"StaticLib\"\n\tlanguage \"C\"\n\tsanitizer()\n\tfiles\n\t{\n\t\tpath.join(GLFW_DIR, \"include/*.h\"),\n\t\tpath.join(GLFW_DIR, \"src/context.c\"),\n\t\tpath.join(GLFW_DIR, \"src/egl_context.c\"),\n\t\tpath.join(GLFW_DIR, \"src/init.c\"),\n\t\tpath.join(GLFW_DIR, \"src/input.c\"),\n\t\tpath.join(GLFW_DIR, \"src/monitor.c\"),\n\t\tpath.join(GLFW_DIR, \"src/osmesa_context.c\"),\n\t\tpath.join(GLFW_DIR, \"src/vulkan.c\"),\n\t\tpath.join(GLFW_DIR, \"src/window.c\"),\n\t}\n\tincludedirs { path.join(GLFW_DIR, \"include\") }\n\tfilter \"system:windows\"\n\t\tdefines \"_GLFW_WIN32\"\n\t\tfiles\n\t\t{\n\t\t\tpath.join(GLFW_DIR, \"src/win32_init.c\"),\n\t\t\tpath.join(GLFW_DIR, \"src/win32_joystick.c\"),\n\t\t\tpath.join(GLFW_DIR, \"src/win32_monitor.c\"),\n\t\t\tpath.join(GLFW_DIR, \"src/win32_thread.c\"),\n\t\t\tpath.join(GLFW_DIR, \"src/win32_time.c\"),\n\t\t\tpath.join(GLFW_DIR, \"src/win32_window.c\"),\n\t\t\tpath.join(GLFW_DIR, \"src/wgl_context.c\")\n\t\t}\n\tfilter \"system:linux\"\n\t\tdefines \"_GLFW_X11\"\n\t\tfiles\n\t\t{\n\t\t\tpath.join(GLFW_DIR, \"src/glx_context.c\"),\n\t\t\tpath.join(GLFW_DIR, \"src/linux*.c\"),\n\t\t\tpath.join(GLFW_DIR, \"src/posix*.c\"),\n\t\t\tpath.join(GLFW_DIR, \"src/x11*.c\"),\n\t\t\tpath.join(GLFW_DIR, \"src/xkb*.c\")\n\t\t}\n\tfilter \"action:vs*\"\n\t\tdefines { \"_CRT_SECURE_NO_WARNINGS\" }\n\tfilter {}\n\t\nproject \"imgui\"\n\tkind \"StaticLib\"\n\tlanguage \"C++\"\n\texceptionhandling \"Off\"\n\trtti \"Off\"\n\tsanitizer()\n\tfiles(path.join(THIRDPARTY_DIR, \"imgui/*.*\"))\n\t\nproject \"mimalloc\"\n\tkind \"StaticLib\"\n\tlanguage \"C\"\n\tsanitizer()\n\tincludedirs(path.join(MIMALLOC_DIR, \"include\"))\n\tfiles(path.join(MIMALLOC_DIR, \"src/*.*\"))\n\texcludes\n\t{\n\t\tpath.join(MIMALLOC_DIR, \"src/alloc-override*\"),\n\t\tpath.join(MIMALLOC_DIR, \"src/page-queue.c\"),\n\t\tpath.join(MIMALLOC_DIR, \"src/static.c\")\n\t}\n\t\nproject \"nativefiledialog\"\n\tkind \"StaticLib\"\n\tlanguage \"C++\"\n\texceptionhandling \"Off\"\n\trtti \"Off\"\n\tsanitizer()\n\tincludedirs(path.join(NATIVEFILEDIALOG_DIR, \"include\"))\n\tfiles(path.join(NATIVEFILEDIALOG_DIR, \"nfd_common.*\"))\n\tfilter \"system:windows\"\n\t\tfiles(path.join(NATIVEFILEDIALOG_DIR, \"nfd_win.cpp\"))\n\tfilter \"system:linux\"\n\t\tfiles(path.join(NATIVEFILEDIALOG_DIR, \"nfd_gtk.c\"))\n\t\tbuildoptions(os.outputof(\"pkg-config --cflags gtk+-3.0\"))\n\tfilter \"action:vs*\"\n\t\tdefines { \"_CRT_SECURE_NO_WARNINGS\" }\n\t\nproject \"objzero\"\n\tkind \"StaticLib\"\n\tlanguage \"C\"\n\tcdialect \"C99\"\n\tsanitizer()\n\tfiles(path.join(THIRDPARTY_DIR, \"objzero/objzero.*\"))\n\t\nproject \"OpenFBX\"\n\tkind \"StaticLib\"\n\tlanguage \"C++\"\n\tcppdialect \"C++14\"\n\texceptionhandling \"Off\"\n\trtti \"Off\"\n\tsanitizer()\n\tfiles(path.join(OPENFBX_DIR, \"*.*\"))\n\t\nproject \"stb_image\"\n\tkind \"StaticLib\"\n\tlanguage \"C\"\n\tsanitizer()\n\tfiles(path.join(THIRDPARTY_DIR, \"stb_image.*\"))\n\t\nproject \"stb_image_resize\"\n\tkind \"StaticLib\"\n\tlanguage \"C\"\n\tsanitizer()\n\tfiles(path.join(THIRDPARTY_DIR, \"stb_image_resize.*\"))\n\t\nproject \"stb_image_write\"\n\tkind \"StaticLib\"\n\tlanguage \"C\"\n\tsanitizer()\n\tfiles(path.join(THIRDPARTY_DIR, \"stb_image_write.*\"))\n\t\nproject \"tiny_obj_loader\"\n\tkind \"StaticLib\"\n\tlanguage \"C++\"\n\texceptionhandling \"Off\"\n\trtti \"Off\"\n\tsanitizer()\n\tfiles(path.join(THIRDPARTY_DIR, \"tiny_obj_loader.*\"))\n\n"
        },
        {
          "name": "source",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}