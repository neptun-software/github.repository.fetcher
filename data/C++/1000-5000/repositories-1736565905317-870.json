{
  "metadata": {
    "timestamp": 1736565905317,
    "page": 870,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "floooh/oryol",
      "stars": 2009,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.23828125,
          "content": ".DS_Store\n.vscode/\nbin/\nvagrant/.vagrant\ndoc/html\nbuild/*-*-*\nbuild/*/*-*-*\nbuild/*.json\nbuild/webpage\nsdks/\nconfigs/.selected\n*.txt.user\n*.swp\nCMakeLists.txt.user*\n.idea/\n#>fips\n# this area is managed by fips, do not edit\n.fips-*\n*.pyc\n#<fips\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.2734375,
          "content": "# force old non-container infrastructure, to see whether this\n# is the reason why the IO test hangs\nsudo:   true\ngit:\n  depth: 3\nlanguage: cpp\ncompiler: gcc\nos: \n  - osx\n  - linux\naddons:\n  apt:\n    sources:\n      - ubuntu-toolchain-r-test\n      - george-edison55-precise-backports # cmake 3.x\n    packages:\n      - cmake\n      - cmake-data\n      - gcc-4.8\n      - g++-4.8\n      - libglu1-mesa-dev\n      - xorg-dev\n      - libasound2-dev\n\ninstall:\n  - echo $TRAVIS_OS_NAME\n  # LINUX\n  - if [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 50; fi\n\nscript:\n  - echo $TRAVIS_OS_NAME\n  - cmake --version\n\n  # LINUX\n  - if [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then python fips set config linux-make-unittest; fi\n  - if [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then python fips clean all; fi\n  - if [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then python fips build; fi\n  - if [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then python fips make test; fi\n\n  # OSX\n  - if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then python fips set config oryol-osx-unittest-headless; fi\n  - if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then python fips clean all; fi\n  - if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then python fips make ALL_BUILD; fi\n  - if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then python fips make RUN_TESTS; fi\n\n"
        },
        {
          "name": ".vimrc",
          "type": "blob",
          "size": 0.3583984375,
          "content": "\"\n\" Local .vimrc for Oryol.\n\"\n\" Use a 'local-vim-rc' vim plugin like:\n\" https://github.com/MarcWeber/vim-addon-local-vimrc\n\" \n\"\n\n\" :Fips command maps to oryol python script\ncommand! -nargs=* Fips !python fips <args>\n\n\" override :make for compilation\nset makeprg=python\\ fips\\ make\n\n\" CtrlP ignore patterns\nlet g:ctrlp_custom_ignore = '.pyc\\|lib\\|bin\\|sdks\\|doc/html'\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.37109375,
          "content": "The following authors have all licensed their contributions to Oryol\nunder the licensing terms detailed in LICENSE.\n\n(Authors keep copyright of their contributions, of course; they just grant\na license to everyone to use it as detailed in LICENSE.)\n\nAndre 'Floh' Weissflog (floooh@gmail.com)\nBruce Mitchener (bruce.mitchener@gmail.com)\nMartin Gerhardy (martin.gerhardy@gmail.com)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.7978515625,
          "content": "#-------------------------------------------------------------------------------\r\n#\toryol cmake root file\r\n#\r\n#\tSee BUILD.md for details how to build oryol.\r\n#-------------------------------------------------------------------------------\r\ncmake_minimum_required(VERSION 2.8)\r\n\r\nget_filename_component(FIPS_ROOT_DIR \"../fips\" ABSOLUTE)\r\ninclude(\"${FIPS_ROOT_DIR}/cmake/fips.cmake\")\r\n\r\nfips_setup(PROJECT oryol)\r\nfips_include_directories(code)\r\nfips_include_directories(code/Modules)\r\nfips_ide_group(Modules)\r\nfips_add_subdirectory(code/Modules)\r\nif (ORYOL_SAMPLES)\r\n    fips_ide_group(Samples)\r\n    fips_include_directories(code/Samples)\r\n    # also find out-of-source generated headers\r\n    fips_include_directories(${CMAKE_BINARY_DIR}/code/Samples)\r\n    fips_add_subdirectory(code/Samples)\r\nendif()\r\nfips_finish()\r\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.056640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Andre Weissflog\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.3193359375,
          "content": "Please note that Oryol is currently not actively maintained and hasn't been for a long time, \nmy focus is currently on the Sokol headers and (from time to time) on the Chips emulator stuff.\n\n# Oryol\n \nA small, portable and extensible 3D coding framework written in C++:\n\n- simple [Orthodox C++](https://gist.github.com/bkaradzic/2e39896bc7d8c34e042b) coding style and APIs\n- extensible through external code modules living in git repositories\n- runs on OSX, Linux (incl RaspberryPi), Windows, iOS, Android, emscripten, from the same C++ source\n- renders through GL, GLES2, WebGL, Metal, D3D11 from same shader source\n- produces small executables (e.g. emscripten WebGL demos starting at around 100 Kbytes)\n- async data loading from web or disc \n\n### Build Status:\n\n|Platform|Build Status|\n|--------|------|\n|OSX + Linux (OpenGL)|[![Build Status](https://travis-ci.org/floooh/oryol.svg?branch=master)](https://travis-ci.org/floooh/oryol)|\n|Windows (OpenGL + D3D11)|[![Build status](https://ci.appveyor.com/api/projects/status/hn5sup2y532h64jg/branch/master?svg=true)](https://ci.appveyor.com/project/floooh/oryol/branch/master)|\n\n### Live Demos:\n\n- Oryol Core Samples: http://floooh.github.io/oryol/\n- Oryol Extension Samples: http://floooh.github.io/oryol-samples/\n- KC85 emulator: http://floooh.github.io/virtualkc/\n\n### How to Build (Quick'n'Dirty):\n\nYou need: cmake, python and your platform's default C/C++ development environment.\n\n```bash\n> mkdir projects\n> cd projects\n> git clone --depth 5 https://github.com/floooh/oryol\n> cd oryol\n> ./fips build\n> ./fips run Triangle\n```\n\nIn case of problems or for more detailed build info (e.g. how to work\nwith IDEs) see here: [How to Build](doc/BUILD.md)\n\n### Getting Started:\n\n* [What's New](doc/NEWS.md) (updated: 22-May-2017)\n* [How to Build](doc/BUILD.md)\n* [Design Manifesto](doc/DESIGN-MANIFESTO.md)\n* [10,000ft View](doc/OVERVIEW.md)\n* [Core Module](code/Modules/Core/README.md)\n* [IO Module](code/Modules/IO/README.md)\n* [Input Module](code/Modules/Input/README.md)\n* [Gfx Module](code/Modules/Gfx/README.md)\n* [Resource Module](code/Modules/Resource/README.md)\n* [HttpFS Module](code/Modules/HttpFS/README.md)\n* [LocalFS Module](code/Modules/LocalFS/README.md)\n\n### Useful Blog Posts:\n\n* [System Design Philosophy](http://floooh.github.io/2017/07/01/oryol-system-design.html)\n* [SPIRV-based Shader Pipeline](http://floooh.github.io/2017/05/15/oryol-spirv.html)\n* [WebGL2/RenderPass Merge](http://floooh.github.io/2017/04/04/oryol-webgl2-merge.html)\n* [About Webpage Integration (asm.js/wasm)](http://floooh.github.io/2017/02/22/emsc-html.html)\n* [Slimmer asm.js/wasm Applications](http://floooh.github.io/2016/08/27/asmjs-diet.html)\n* [2016 Spring Cleaning](http://floooh.github.io/2016/04/26/oryol-spring-cleaning.html)\n* [Tour of 3rd-party Code (2016)](http://floooh.github.io/2016/04/09/oryol-3rd-party-code.html)\n* [Gfx Module Changes (2016)](http://floooh.github.io/2016/03/10/oryol-gfx-changes.html)\n* [Tour of the Metal Renderer](http://floooh.github.io/2016/01/15/oryol-metal-tour.html)\n\n### Extension Modules:\n\n- Skeletal Animation System: https://github.com/floooh/oryol-animation\n- Dear Imgui integration: https://github.com/floooh/oryol-imgui\n- Nuklear UI integration: https://github.com/floooh/oryol-nuklear\n- TurboBadger UI integration: https://github.com/floooh/oryol-tbui\n- OpenAL based sound module: https://github.com/floooh/oryol-sound\n- SoLoud portable audio library: https://github.com/floooh/fips-soloud\n\nSee the [Oryol Extension Sample](http://floooh.github.io/oryol-samples/) webpage for more interesting 3rd-party library integrations.\n\n### Tools etc.:\n\n- Oryol Asset Tools (WIP): https://github.com/floooh/oryol-tools\n- Oryol Fileformat Definitions: https://github.com/floooh/oryol-fileformats\n\n### Standalone App Demo:\n\nA simple standalone app using Oryol: https://github.com/floooh/oryol-test-app\n\n### Videos \n\nPlease note that these videos use older versions of the Gfx module, details\nhave changed (and will continue to change at least until the Vulkan and DX12\nrenderer backends have been implemented).\n\n- Coding a triangle from scratch [OSX](http://www.youtube.com/watch?v=B5R0uE5IMZs), [Windows](http://www.youtube.com/watch?v=fcmOhvVd80o)\n- [Building a standalone app](https://www.youtube.com/watch?v=z8nwrGh2Zsc)\n- [Compiling and debugging in QtCreator and CLion](https://www.youtube.com/watch?v=Sp5TywYeNzE)\n\n#### Enjoy! ####\n\n\n\n\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.30078125,
          "content": "# https://ci.appveyor.com/project/floooh/oryol\n---\nbranches:\n    except:\n        - gh-pages\n\nclone_depth: 3 \n\n# just perform builds for now, don't run tests\nbuild_script:\n    - cmd: c:/Python36/python.exe fips build win64-vstudio-debug\n    - cmd: c:/Python36/python.exe fips build d3d11-win64-vstudio-debug\n\n"
        },
        {
          "name": "code",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "fips",
          "type": "blob",
          "size": 0.6201171875,
          "content": "#!/usr/bin/env python\n\"\"\"fips main entry\"\"\"\nimport os\nimport sys\nimport subprocess\nproj_path = os.path.dirname(os.path.abspath(__file__))\nfips_path = os.path.dirname(proj_path) + '/fips'\nif not os.path.isdir(fips_path) :\n    print(\"\\033[93m=== cloning fips build system to '{}':\\033[0m\".format(fips_path))\n    subprocess.call(['git', 'clone', 'https://github.com/floooh/fips.git', fips_path]) \nsys.path.insert(0,fips_path)\ntry :\n    from mod import fips\nexcept ImportError :\n    print(\"\\033[91m[ERROR]\\033[0m failed to initialize fips build system in '{}'\".format(proj_path)) \n    sys.exit(10)\nfips.run(fips_path, proj_path, sys.argv)\n"
        },
        {
          "name": "fips-files",
          "type": "tree",
          "content": null
        },
        {
          "name": "fips.cmd",
          "type": "blob",
          "size": 0.017578125,
          "content": "@python fips %*\n\n\n"
        },
        {
          "name": "fips.yml",
          "type": "blob",
          "size": 1.0693359375,
          "content": "#\n# oryol\n#\n---\nimports:\n    gliml:\n        git: https://github.com/floooh/gliml.git\n    fips-glm:\n        git: https://github.com/fips-libs/fips-glm.git\n    fips-unittestpp:\n        git: https://github.com/floooh/fips-unittestpp.git\n    fips-zlib:\n        git: https://github.com/fips-libs/fips-zlib.git\n    fips-glfw:\n        git: https://github.com/fips-libs/fips-glfw.git\n    fips-libcurl:\n        git: https://github.com/floooh/fips-libcurl.git\n    fips-remotery:\n        git: https://github.com/fips-libs/fips-remotery.git\n    fips-vld:\n        git: https://github.com/floooh/fips-vld.git\n\nexports:\n    header-dirs :\n        - code\n        - code/Modules\n    modules :\n        # engine modules\n        Core :          code/Modules/Core\n        IO :            code/Modules/IO\n        LocalFS :       code/Modules/LocalFS\n        HttpFS :        code/Modules/HttpFS\n        Gfx :           code/Modules/Gfx\n        Resource :      code/Modules/Resource\n        Assets :        code/Modules/Assets\n        Dbg :           code/Modules/Dbg\n        Input :         code/Modules/Input\n        \n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}