{
  "metadata": {
    "timestamp": 1736565781783,
    "page": 713,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "socketio/socket.io-client-cpp",
      "stars": 2281,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1328125,
          "content": "build/\n**/*.user\n\nCMakeCache.txt\nCMakeFiles/\nMakefile\ncmake_install.cmake\ninstall_manifest.txt\nlibsioclient.a\nsio_test\n.DS_Store\n.cache/"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2841796875,
          "content": "[submodule \"lib/websocketpp\"]\n\tpath = lib/websocketpp\n\turl = https://github.com/zaphoyd/websocketpp.git\n[submodule \"lib/rapidjson\"]\n\tpath = lib/rapidjson\n\turl = https://github.com/miloyip/rapidjson.git\n[submodule \"lib/asio\"]\n\tpath = lib/asio\n\turl = https://github.com/chriskohlhoff/asio.git\n"
        },
        {
          "name": "API.md",
          "type": "blob",
          "size": 5.9765625,
          "content": "## API\n### *Overview*\nThere're just 3 roles in this library - `socket`, `client` and `message`.\n\n`client` is for physical connection while `socket` is for \"namespace\" (which is like a logical channel), which means one `socket` paired with one namespace, and one `client` paired with one physical connection.\n\nSince a physical connection can have multiple namespaces (which is called multiplex), a `client` object may have multiple `socket` objects, each of which is bound to a distinct `namespace`.\n\nUse `client` to setup the connection to the server, manange the connection status, also session id for the connection.\n\nUse `socket` to send messages under namespace and receives messages in the namespace, also handle special types of message.\n\nThe `message` is just about the content you want to send, with text, binary or structured combinations.\n\n### *Socket*\n#### Constructors\nSockets are all managed by `client`, no public constructors.\n\nYou can get it's pointer by `client.socket(namespace)`.\n\n#### Event Emitter\n`void emit(std::string const& name, message::list const& msglist, std::function<void (message::ptr const&)> const& ack)`\n\nUniversal event emission interface, by applying implicit conversion magic, it is backward compatible with all previous `emit` interfaces.\n\n#### Event Bindings\n`void on(std::string const& event_name,event_listener const& func)`\n\n`void on(std::string const& event_name,event_listener_aux const& func)`\n\nBind a callback to specified event name. Same as `socket.on()` function in JS, `event_listener` is for full content event object, `event_listener_aux` is for convenience.\n\n`void off(std::string const& event_name)`\n\nUnbind the event callback with specified name.\n\n`void off_all()`\n\nClear all event bindings (not including the error listener).\n\n`void on_error(error_listener const& l)`\n\nBind the error handler for socket.io error messages.\n\n`void off_error()`\n\nUnbind the error handler.\n\n```C++\n//event object:\nclass event\n{\npublic:\n    const std::string& get_nsp() const;\n\n    const std::string& get_name() const;\n\n    const message::ptr& get_message() const;\n\n    bool need_ack() const;\n\n    void put_ack_message(message::ptr const& ack_message);\n\n    message::ptr const& get_ack_message() const;\n   ...\n};\n//event listener declare:\ntypedef std::function<void(const std::string& name,message::ptr const& message,bool need_ack, message::ptr& ack_message)> event_listener_aux;\n\ntypedef std::function<void(event& event)> event_listener;\n\ntypedef std::function<void(message::ptr const& message)> error_listener;\n\n```\n\n#### Connect and close socket\n`connect` will happen for existing `socket`s automatically when `client` have opened up the physical connection.\n\n`socket` opened with connected `client` will connect to its namespace immediately.\n\n`void close()`\n\nPositively disconnect from namespace.\n\n#### Get name of namespace\n`std::string const& get_namespace() const`\n\nGet current namespace name which the client is inside.\n\n### *Client*\n#### Constructors\n`client()` default constructor.\n\n#### Connection Listeners\n`void set_open_listener(con_listener const& l)`\n\nCall when websocket is open, especially means good connectivity.\n\n`void set_fail_listener(con_listener const& l)`\n\nCall when failed in connecting.\n\n`void set_close_listener(close_listener const& l)`\n\nCall when closed or drop. See `client::close_reason`\n\n```C++\n//connection listener declare:\nenum close_reason\n{\n    close_reason_normal,\n    close_reason_drop\n};\ntypedef std::function<void(void)> con_listener;\n\ntypedef std::function<void(close_reason const& reason)> close_listener;\n```\n#### Socket listeners\n`void set_socket_open_listener(socket_listener const& l)`\n\nSet listener for socket connect event, called when any sockets being ready to send message.\n\n`void set_socket_close_listener(socket_listener const& l)`\n\nSet listener for socket close event, called when any sockets being closed, afterward, corresponding `socket` object will be cleared from client.\n\n```C++\n    //socket_listener declare:\n    typedef std::function<void(std::string const& nsp)> socket_listener;\n```\n\n#### Connect and Close\n`void connect(const std::string& uri)`\n\nConnect to socket.io server, e.g., `client.connect(\"ws://localhost:3000\");`\n\n`void close()`\n\nClose the client, return immediately.\n\n`void sync_close()`\n\nClose the client, don't return until it is really closed.\n\n`bool opened() const`\n\nCheck if client's connection is opened.\n\n#### Transparent reconnecting\n`void set_reconnect_attempts(int attempts)`\n\nSet max reconnect attempts, set to 0 to disable transparent reconnecting.\n\n`void set_reconnect_delay(unsigned millis)`\n\nSet minimum delay for reconnecting, this is the delay for 1st reconnecting attempt,\nthen the delay duration grows by attempts made.\n\n`void set_reconnect_delay_max(unsigned millis)`\n\nSet maximum delay for reconnecting.\n\n`void set_reconnecting_listener(con_listener const& l)`\n\nSet listener for reconnecting is in process.\n\n`void set_reconnect_listener(reconnect_listener const& l)`\n\nSet listener for reconnecting event, called once a delayed connecting is scheduled.\n\n#### Logs\n`void set_logs_default()`\n\nConfigure logs to the default level (connect, disconnect, app)\n\n`void set_logs_quiet()`\n\nConfigure logs to the quiet level\n\n`void set_logs_verbose()`\n\nConfigure logs to the verbose level\n\n#### Namespace\n`socket::ptr socket(std::string const& nsp)`\n\nGet a pointer to a socket which is paired with the specified namespace.\n\n#### Session ID\n`std::string const& get_sessionid() const`\n\nGet socket.io session id.\n\n### *Message*\n`message` Base class of all message object.\n\n`int_message` message contains a 64-bit integer.\n\n`double_message` message contains a double.\n\n`string_message` message contains a string.\n\n`array_message` message contains a `vector<message::ptr>`.\n\n`object_message` message contains a `map<string,message::ptr>`.\n\n`message::ptr` pointer to `message` object, it will be one of its derived classes, judge by `message.get_flag()`.\n\nAll designated constructor of `message` objects is hidden, you need to create message and get the `message::ptr` by `[derived]_message:create()`.\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.18359375,
          "content": "# [2.1.0](https://github.com/socketio/socket.io-client-cpp/compare/2.0.0...2.1.0) (2021-10-12)\n\n\n### Bug Fixes\n\n* fix ASIO_STANDALONE release build trying to use boost::random ([#301](https://github.com/socketio/socket.io-client-cpp/issues/301)) ([168ce9d](https://github.com/socketio/socket.io-client-cpp/commit/168ce9d10b4ac667c43fe16b4cf530f6a3749235))\n* fix LOG call syntax ([#301](https://github.com/socketio/socket.io-client-cpp/issues/301)) ([c09221f](https://github.com/socketio/socket.io-client-cpp/commit/c09221f357effe1a5a0fc0e7d7902eba1ab0484d))\n\n\n### Features\n\n* support TLSv1.2 and newer ([#321](https://github.com/socketio/socket.io-client-cpp/issues/321)) ([7c60ba9](https://github.com/socketio/socket.io-client-cpp/commit/7c60ba9d1e5e58de57f127025bcf69f4baecd2b4))\n\n\n\n# [3.1.0](https://github.com/socketio/socket.io-client-cpp/compare/3.0.0...3.1.0) (2021-10-12)\n\n\n### Bug Fixes\n\n* lower the minimum CMake supported version ([b196fa7](https://github.com/socketio/socket.io-client-cpp/commit/b196fa7537cd3f7bed626ead873a7b71d1293c0d))\n* handle closing sockets upon on_fail events ([d1c73b7](https://github.com/socketio/socket.io-client-cpp/commit/d1c73b73a8f536da3d353eac2a560af9791b13e3))\n* resolve client_impl::ping LOG call syntax in debug builds ([e7de4eb](https://github.com/socketio/socket.io-client-cpp/commit/e7de4ebf64f4f49e18594a2c093c07beb963579a))\n\n\n### Features\n\n* allow resource path to be set in connection URI ([#134](https://github.com/socketio/socket.io-client-cpp/issues/134)) ([36a8cd4](https://github.com/socketio/socket.io-client-cpp/commit/36a8cd45272aa51f0f6ef27aa4744dbc6e8421f7))\n* add support for logging configuration ([1b42ce7](https://github.com/socketio/socket.io-client-cpp/commit/1b42ce738f4c3e260f79bcb143bfe6efcdce5709))\n* support TLSv1.2 and newer ([#321](https://github.com/socketio/socket.io-client-cpp/issues/321)) ([82d39a9](https://github.com/socketio/socket.io-client-cpp/commit/82d39a90ef118500a0329d214eec331db983bd74))\n\n\n\n# [3.0.0](https://github.com/socketio/socket.io-client-cpp/compare/2.0.0...3.0.0) (2021-01-09)\n\n\n### Features\n\n* add support for Socket.IO v3 ([ec4d540](https://github.com/socketio/socket.io-client-cpp/commit/ec4d540ad54593604ac2091e67ffc2a6d9a00db6))\n\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 5.3359375,
          "content": "cmake_minimum_required(VERSION 3.12...3.27)\n\nPROJECT(sioclient\n    VERSION 3.1.0\n)\n\noption(BUILD_SHARED_LIBS \"Build the shared library\" OFF)\noption(BUILD_UNIT_TESTS \"Builds unit tests target\" OFF)\noption(USE_SUBMODULES \"Use source in local submodules instead of system libraries\" ON)\noption(DISABLE_LOGGING \"Do not print logging messages\" OFF)\n\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(DEFAULT_BUILD_TYPE \"Release\")\n    message(STATUS \"Setting build type to '${DEFAULT_BUILD_TYPE}' as none was specified.\")\n    set(CMAKE_BUILD_TYPE \"${DEFAULT_BUILD_TYPE}\" CACHE STRING \"Choose the type of build.\" FORCE)\n\n    # Set the possible values of build type for cmake-gui\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\")\nendif()\n\n# Only do these if this is the main project, and not if it is included through add_subdirectory\nif(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)\n    # Testing only available if this is the main app\n    # Note this needs to be done in the main CMakeLists\n    # since it calls enable_testing, which must be in the\n    # main CMakeLists.\n    include(CTest)\nendif()\n\nadd_definitions(\n    # These will force ASIO to compile without Boost\n    -DBOOST_DATE_TIME_NO_LIB\n    -DBOOST_REGEX_NO_LIB\n    -DASIO_STANDALONE\n\n    # These will force sioclient to compile with C++11\n    -D_WEBSOCKETPP_CPP11_STL_\n    -D_WEBSOCKETPP_CPP11_FUNCTIONAL_\n    -D_WEBSOCKETPP_CPP11_TYPE_TRAITS_\n    -D_WEBSOCKETPP_CPP11_CHRONO_\n)\n\nif (DISABLE_LOGGING)\n    add_definitions(-DSIO_DISABLE_LOGGING)\nendif()\n\nset(ALL_SRC\n    \"src/sio_client.cpp\"\n    \"src/sio_socket.cpp\"\n    \"src/internal/sio_client_impl.cpp\"\n    \"src/internal/sio_packet.cpp\"\n)\nadd_library(sioclient ${ALL_SRC})\n\nif(USE_SUBMODULES)\n    set(MODULE_INCLUDE_DIRS\n        ${CMAKE_CURRENT_LIST_DIR}/lib/websocketpp\n        ${CMAKE_CURRENT_LIST_DIR}/lib/rapidjson/include\n        ${CMAKE_CURRENT_LIST_DIR}/lib/asio/asio/include\n    )\nelse()\n    find_package(websocketpp CONFIG REQUIRED)\n    find_package(asio CONFIG REQUIRED)\n    find_package(RapidJSON CONFIG REQUIRED)\n    target_link_libraries(sioclient PRIVATE websocketpp::websocketpp asio::asio rapidjson)\nendif()\n\ninclude(GNUInstallDirs)\n\ntarget_include_directories(sioclient\n    PUBLIC\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>\n    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\n    PRIVATE\n    ${MODULE_INCLUDE_DIRS}\n)\n\ntarget_compile_features(sioclient PUBLIC cxx_std_11)\n\nfind_package(Threads REQUIRED)\ntarget_link_libraries(sioclient PUBLIC Threads::Threads)\n\nif(BUILD_SHARED_LIBS)\n    set_target_properties(sioclient\n        PROPERTIES\n        SOVERSION ${PROJECT_VERSION_MAJOR}\n        VERSION ${PROJECT_VERSION}\n    )\nendif()\n\nlist(APPEND TARGET_LIBRARIES sioclient)\n\nfind_package(OpenSSL)\n\nif(OPENSSL_FOUND)\n    add_library(sioclient_tls ${ALL_SRC})\n    target_include_directories(sioclient_tls PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>\n        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\n        PRIVATE\n        ${MODULE_INCLUDE_DIRS}\n        ${OPENSSL_INCLUDE_DIR}\n    )\n\n    target_compile_features(sioclient_tls PUBLIC cxx_std_11)\n    target_link_libraries(sioclient_tls PRIVATE OpenSSL::SSL OpenSSL::Crypto)\n    if (NOT USE_SUBMODULES)\n        target_link_libraries(sioclient_tls PRIVATE websocketpp::websocketpp asio asio::asio rapidjson)\n    endif()\n\n    target_compile_definitions(sioclient_tls PRIVATE -DSIO_TLS)\n    target_link_libraries(sioclient_tls PUBLIC Threads::Threads)\n\n    if(BUILD_SHARED_LIBS)\n        set_target_properties(sioclient_tls\n            PROPERTIES\n            SOVERSION ${PROJECT_VERSION_MAJOR}\n            VERSION ${PROJECT_VERSION}\n        )\n    endif()\n\n    list(APPEND TARGET_LIBRARIES sioclient_tls)\nendif()\n\nexport(PACKAGE sioclient)\n\nfile(GLOB ALL_HEADERS ${CMAKE_CURRENT_LIST_DIR}/src/*.h)\ninstall(FILES ${ALL_HEADERS}\n    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n)\n\ninstall(TARGETS ${TARGET_LIBRARIES} EXPORT sioclientTargets\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n)\n\n# === generate a CMake Config File ===\ninclude(CMakePackageConfigHelpers)\nset(ConfigPackageLocation ${CMAKE_INSTALL_LIBDIR}/cmake/sioclient)\nstring(REGEX REPLACE \"([^;]+)\" \"find_dependency(\\\\1)\" _find_dependency_calls \"${_package_dependencies}\")\nstring(REPLACE \";\" \"\\n\" _find_dependency_calls \"${_find_dependency_calls}\")\n\nwrite_basic_package_version_file(\n    \"${CMAKE_CURRENT_BINARY_DIR}/sioclient/sioclientConfigVersion.cmake\"\n    VERSION ${sioclient_VERSION}\n    COMPATIBILITY AnyNewerVersion\n)\n\nexport(EXPORT sioclientTargets\n    FILE \"${CMAKE_CURRENT_BINARY_DIR}/sioclient/sioclientTargets.cmake\"\n    NAMESPACE sioclient::\n)\n\nconfigure_package_config_file(sioclientConfig.cmake.in\n    \"${CMAKE_CURRENT_BINARY_DIR}/sioclient/sioclientConfig.cmake\"\n    INSTALL_DESTINATION \"${ConfigPackageLocation}\"\n)\n\ninstall(EXPORT sioclientTargets\n    NAMESPACE\n    sioclient::\n    DESTINATION\n    ${ConfigPackageLocation}\n)\ninstall(\n    FILES\n    \"${CMAKE_CURRENT_BINARY_DIR}/sioclient/sioclientConfig.cmake\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/sioclient/sioclientConfigVersion.cmake\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/sioclient/sioclientTargets.cmake\"\n    DESTINATION\n    ${ConfigPackageLocation}\n)\n\nif((CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND BUILD_TESTING) OR BUILD_UNIT_TESTS)\n    add_subdirectory(test)\nendif()\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 2.072265625,
          "content": "## Install\n\n### With CMake\n1. Use `git clone --recurse-submodules https://github.com/socketio/socket.io-client-cpp.git` to clone your local repo.\n2. Run `cmake  ./`\n3. Run `make install`(if makefile generated) or open generated project (if project file generated) to build.\n4. Outputs is under `./build`, link with the all static libs under `./build/lib` and  include headers under `./build/include` in your client code where you want to use it.\n\n### Without CMake\n1. Use `git clone --recurse-submodules https://github.com/socketio/socket.io-client-cpp.git` to clone your local repo.\n2. Add `./lib/asio/asio/include`, `./lib/websocketpp` and `./lib/rapidjson/include` to headers search path.\n3. Include all files under `./src` in your project, add `sio_client.cpp`,`sio_socket.cpp`,`internal/sio_client_impl.cpp`, `internal/sio_packet.cpp` to source list.\n4. Add `BOOST_DATE_TIME_NO_LIB`, `BOOST_REGEX_NO_LIB`, `ASIO_STANDALONE`, `_WEBSOCKETPP_CPP11_STL_` and `_WEBSOCKETPP_CPP11_FUNCTIONAL_` to the preprocessor definitions\n5. Include `sio_client.h` in your client code where you want to use it.\n\n### With vcpkg\n\nYou can download and install the Socket.IO C++ client using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n```bash\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n./vcpkg integrate install\n./vcpkg install socket-io-client\n```\n\nThe Socket.IO client port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n### With Conan\n\nYou can install pre-built binaries for Socket.IO C++ client or build it from source using [Conan](https://conan.io/). Use the following command:\n\n```\nconan install --requires=\"sioclient/[*]\" --build=missing\n```\n\nThe Socket.IO client Conan recipe is kept up to date by Conan maintainers and community contributors.\nIf the version is out of date, please [create an issue or pull request](https://github.com/conan-io/conan-center-index) on the ConanCenterIndex repository.\n"
        },
        {
          "name": "INSTALL_IOS.md",
          "type": "blob",
          "size": 0.84765625,
          "content": "## iOS\n\n### Option 1: Create a static library\n\n1. Create a static library\n1. Copy the header files into xcode\n\nUse the static libraries generated by the example project [iOS example project](examples/iOS)\n\nCreate one for\n- release iphoneos\n- release simulator\n- debug iphoneos\n- debug simulator\n\nJoin the debug libraries and the release libraries with e.g.\n```\nlibtool -static -o libUniversalRelease.a Release-iphoneos/libsioclient.a Release-iphonesimulator/libsioclient.a\nlibtool -static -o libUniversalDebug.a Debug-iphoneos/libsioclient.a Debug-iphonesimulator/libsioclient.a\n```\n\n\n### Option 2: Manual integration\n\nUse this [shell](https://gist.github.com/melode11/a90114a2abf009ca22ea) to download and build boost completely automattically. It installs boost to `<shell folder>/prefix`.\n\nSee the [iOS example project](examples/iOS) for how to integrate the rest.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0390625,
          "content": "Copyright (c) 2015, Melo Yao\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to all conditions.\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.32421875,
          "content": "# Socket.IO C++ Client\n\n[![Build Status](https://github.com/socketio/socket.io-client-cpp/workflows/CI/badge.svg)](https://github.com/socketio/socket.io-client-cpp/actions)\n\nBy virtue of being written in C++, this client works in several different platforms. The [examples](https://github.com/socketio/socket.io-client-cpp/tree/master/examples) folder contains an iPhone, QT and Console example chat client! It depends on [websocket++](https://github.com/zaphoyd/websocketpp) and is inspired by [socket.io-clientpp](https://github.com/ebshimizu/socket.io-clientpp).\n\n[![Clients with iPhone, QT, Console and web](https://cldup.com/ukvVVZmvYV.png)](https://github.com/socketio/socket.io-client-cpp/tree/master/examples)\n\n## Compatibility table\n\n<table>\n  <tr>\n    <th rowspan=\"2\">C++ Client version</th>\n    <th colspan=\"2\">Socket.IO server version</th>\n  </tr>\n  <tr>\n    <td align=\"center\">1.x / 2.x</td>\n    <td align=\"center\">3.x / 4.x</td>\n  </tr>\n  <tr>\n    <td>2.x (<code>2.x</code> branch)</td>\n    <td align=\"center\">YES</td>\n    <td align=\"center\">YES, with <code><a href=\"https://socket.io/docs/v4/server-initialization/#allowEIO3\">allowEIO3: true</a></code></td>\n  </tr>\n  <tr>\n    <td>3.x (<code>master</code> branch)</td>\n    <td align=\"center\">NO</td>\n    <td align=\"center\">YES</td>\n  </tr>\n</table>\n\n## Features\n\n- 100% written in modern C++11\n- Binary support\n- Automatic JSON encoding\n- Multiplex support\n- Similar API to the Socket.IO JS client\n- Cross platform\n\nNote: Only the WebSocket transport is currently implemented (no fallback to HTTP long-polling)\n\n## Installation alternatives\n\n* [With CMAKE](./INSTALL.md#with-cmake)\n* [Without CMAKE](./INSTALL.md#without-cmake)\n* [With VCPKG](./INSTALL.md#with-vcpkg)\n* [With Conan](./INSTALL.md#with-conan)\n* [iOS and OS X](./INSTALL_IOS.md)\n * Option 1: Cocoapods\n * Option 2: Create a static library\n * Option 3: Manual integration\n\n\n## Quickstart\n\n** [Full overview of API can be seen here](./API.md) **\n\n\nThe APIs are similar to the JS client.\n\n#### Connect to a server\n```C++\nsio::client h;\nh.connect(\"http://127.0.0.1:3000\");\n```\n\n#### Emit an event\n\n```C++\n// emit event name only:\nh.socket()->emit(\"login\");\n\n// emit text\nh.socket()->emit(\"add user\", username);\n\n// emit binary\nchar buf[100];\nh.socket()->emit(\"add user\", std::make_shared<std::string>(buf,100));\n\n// emit message object with lambda ack handler\nh.socket()->emit(\"add user\", string_message::create(username), [&](message::list const& msg) {\n});\n\n// emit multiple arguments\nmessage::list li(\"sports\");\nli.push(string_message::create(\"economics\"));\nsocket->emit(\"categories\", li);\n```\nItems in `message::list` will be expanded in server side event callback function as function arguments.\n\n#### Bind an event\n\n##### Bind with function pointer\n```C++\nvoid OnMessage(sio::event &)\n{\n\n}\nh.socket()->on(\"new message\", &OnMessage);\n```\n\n##### Bind with lambda\n```C++\nh.socket()->on(\"login\", [&](sio::event& ev)\n{\n    //handle login message\n    //post to UI thread if any UI updating.\n});\n```\n\n##### Bind with member function\n```C++\nclass MessageHandler\n{\npublic:\n    void OnMessage(sio::event &);\n};\nMessageHandler mh;\nh.socket()->on(\"new message\",std::bind( &MessageHandler::OnMessage,&mh,std::placeholders::_1));\n```\n\n#### Using namespace\n```C++\nh.socket(\"/chat\")->emit(\"add user\", username);\n```\n** [Full overview of API can be seen here](./API.md) **\n\n## License\n\nMIT\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "sioclientConfig.cmake.in",
          "type": "blob",
          "size": 0.138671875,
          "content": "\r\n@PACKAGE_INIT@\r\n\r\ninclude(CMakeFindDependencyMacro)\r\n@_find_dependency_calls@\r\n\r\ninclude(\"${CMAKE_CURRENT_LIST_DIR}/sioclientTargets.cmake\")"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}