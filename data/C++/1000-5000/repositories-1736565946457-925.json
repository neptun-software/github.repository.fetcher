{
  "metadata": {
    "timestamp": 1736565946457,
    "page": 925,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "generalized-intelligence/GAAS",
      "stars": 1947,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.48828125,
          "content": "# Big files\n*.log\n*.bag\n\n# IDE project settings\n.idea/\n.vscode/\n.kdev4/\n*.kdev4\n\n# Build directories\nbuild/\nbin/\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n*.cfgc\n\n# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n*.so\n*.bag\n*.log\n\n"
        },
        {
          "name": "AUTHORS.md",
          "type": "blob",
          "size": 0.3505859375,
          "content": "# Most Active Contributors\n[<img src=\"https://s2.ax1x.com/2019/04/22/EktKD1.png\" width=\"160\">](https://github.com/bys1123)\n\n\n\n# The Earliest of All Early Adoptors\n[<img src=\"https://s2.ax1x.com/2019/04/22/EktMHx.png\" width=\"160\">](https://github.com/ElderWanng)[<img src=\"https://s2.ax1x.com/2019/04/22/EktlE6.png\" width=\"160\">](https://github.com/AlexisTM)\n\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.537109375,
          "content": "## 2019.04.23\n\n1. Modified coordinate frames for drone body frame and world frame according to rep-103 and rep-105. Using FLU for body frame and ENU for world reference frame.\n2. Modified reference frame figures used in tutorials part 1.\n\n\n## 2019.11.07\n\n1. Add Global_Optimization_Graph (GOG), tested on GPS + SLAM fusion with constant GPS or intermittent GPS (you need to mannually tune GPS covariance to gain a better performance in each case). Code refactoring is needed in the next few updates and large amount of field tests is also required. \n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.78125,
          "content": "# Contributing to GAAS\nWe love your input! We want to make contributing to this project as easy and transparent as possible, whether it's:\n\n- Reporting a bug\n- Discussing the current state of the code\n- Submitting a fix\n- Proposing new features\n- Helping others with their issues/questions\n- Implement an optimized algorithms for one of the features.\n\n## Report bugs using one of our pre-designed [issues template](https://github.com/briandk/transcriptase-atom/issues) \nThe templates help us to gather informations about what is causing a failure.\n\n## We Use [Github Flow](https://guides.github.com/introduction/flow/index.html), So All Code Changes Happen Through Pull Requests\nPull requests are the best way to propose changes to the codebase (we use [Github Flow](https://guides.github.com/introduction/flow/index.html)). We actively welcome your pull requests:\n\n0. Please ensure you are using the latest version of GAAS with all dependencies installed.\n1. Fork the repo and create your branch from `master`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the corresponding README.md.\n4. Ensure the test suite passes.\n5. Make sure your code lints.\n6. Issue that pull request!\n\nNOTE: If you have decided to change the API, please update the corresponding README.md with details of changes to the API, including new environment variables, the API itself, relevant file locations and container parameters. Communication between modules in the software is based on ROS. Each module can be replaced if needed. While replacing modules, the new module must have the same corresponding ROS topic/service pub sub. The project has provided a considerably more stable, but less optimized implementation. \n\n## Any contributions you make will be under the BSD 3-Clause\nIn short, when you submit code changes, your submissions are understood to be under the same [BSD 3-Clause](https://github.com/ninawrong/GAAS/blob/master/LICENSE) that covers the project. Feel free to contact the maintainers if that's a concern.\n\n## Pledge\n**We respect all developers who have put in efforts to make autonomous flight possible.**\n\n**We hereby promise that any issue, pull request and suggestions in any form will be treated seriously.**\n\n**Special thanks to all contributors and developers of the project, not only as an ode to your passion towards the project, but also as an ode to what mankind has always yearned.**\n\n---------\n# 为 GAAS 做贡献\n您愿意为 GAAS 做贡献真是太好了。我们希望将这个过程做得尽量简单、透明，你可以通过以下方式帮助我们：\n\n- 提交 Bug\n- 跟我们讨论现有代码的状况\n- 修补代码\n- 提交新的功能\n- 帮助他人解决他们遇到的问题\n- 为原有功能做性能提升\n\n## 通过我们预先设计好的[issues 模板](https://github.com/briandk/transcriptase-atom/issues)提交 Bug\n这个模板可以帮助我们更快速准确地定位问题所在的位置。\n\n## 我们使用 [Github Flow](https://guides.github.com/introduction/flow/index.html)对 GAAS 进行迭代, 因为所有代码更新都经过 Pull Request 流程\nPull requests 是管理代码变动最好的方法 (我们使用[Github Flow](https://guides.github.com/introduction/flow/index.html))。我们随时欢迎给我们提 PR：\n\n0. 确保您在使用最新版本的 GAAS，并已安装好所有依赖。\n1. Fork 代码并从 master 中创建一个 branch。\n2. 如果你添加了需要测试的代码，请提供测试脚本。\n3. 如果你更改了 API，请对相应的 README.md 做更新。\n4. 确保代码在您的机器上测试通过。\n5. 保持代码整洁。\n6. 提交 Pull Request\n\nNOTE：请确保更新对应模块的README，表述清楚**接口的变更**，新引入的全局变量/环境变量等对外部有影响的量，暴露的端口，文件路径和配置项。软件部分各个模块之间的通信使用 ROS 实现。每个模块皆可替换的。进行替换时，只需新模块实现原有对应的 ROS topic/service 的 pub sub 即可。项目中会提供一个较为可靠的实现，但可能不是最优的。我们欢迎开发者提供已有模块的更优实现。\n\n## 您做的所有贡献将受到 BSD 3-Clause 协议保护\n当您在提交代码的时候，您的代码将默认受到 [BSD 3-Clause](https://github.com/ninawrong/GAAS/blob/master/LICENSE)协议保护。BSD 3-Clause 也是 GAAS 项目整个项目的开源协议。如果您有任何问题，请联系 GAAS 管理员。\n\n## 项目宣言\n\n**我们尊重所有致力于为飞行器自动驾驶事业做出贡献的开发者。**\n\n**在此保证：你的 issue、pull request 或其他形式给出的建议会被严肃且详细的考虑。**\n\n**感谢一切为此项目做出有益建议和贡献的开发者。不只是为了赞美对项目的热情，而是对人类一直向往的想法所作的礼赞。**\n\n\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.482421875,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2020, cyanine-gi\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.0654296875,
          "content": "# GAAS: Towards L5 Autonomous Flying Cars, a Robust Framework Extends GAAS with Lidars!\n\n![Star](https://img.shields.io/github/stars/generalized-intelligence/gaas?style=flat-square)![fork](https://img.shields.io/github/forks/generalized-intelligence/gaas?style=flat-square)![watch](https://img.shields.io/github/watchers/generalized-intelligence/gaas?style=flat-square)![BSD-3](https://img.shields.io/github/license/generalized-intelligence/gaas?style=flat-square)![twitter](https://img.shields.io/twitter/follow/GAAS_dev?style=social)\n\n\n## About GAAS\n\n**GAAS is an open-source program designed for fully autonomous VTOL(a.k.a flying cars) and drones.** GAAS stands for Generalized Autonomy Aviation System. We hope to accelerate human use of the sky through the full autonomy of flying vehicles. This project started in 2016 as a hobby for two students. 2019 we open-source the project and hope to develop GAAS full time in the long term.\n\n**GAAS provides a fully autonomous flight platform based on lidar, HD-map relocalization, path planning, and other modules for aircraft.** In contrast to the autopilot technology previously available only for consumer-grade drones, GAAS aims for robust  fully autonomous flight for human-carrying, and can be easily combined with national air traffic control. At GAAS you can see many of the automotive-grade(AG) technologies that were previously only available in self-driving cars. The whole framework is coupled loosely so you can customize your own modules and easily add them to GAAS.\n\n## Previews:\n\n![image](https://github.com/cyanine-gi/GAAS_contrib/raw/main/algorithms/preview_imgs/gaas_algorithms_rviz_preview_20200401.png)\n\n![image](https://github.com/cyanine-gi/GAAS_contrib/raw/main/algorithms/preview_imgs/gaas_algorithms_astar_planning_preview_20210409.png)\n\n![image](https://github.com/cyanine-gi/GAAS_contrib/raw/main/algorithms/preview_imgs/gaas_algorithms_rqt_graph_20200401.png)\n\n![image](https://github.com/cyanine-gi/GAAS_contrib/raw/main/algorithms/preview_imgs/gaas_algorithms_dynamic_objects_and_replanning.png)\n\nA video has been uploaded to show the whole pipeline. You may need to download this [video](https://github.com/cyanine-gi/GAAS_contrib_resources/blob/main/demos/gaas_contrib_test1_20210419_compressed.mp4?raw=true).\n\n\n## Differences between GAAS deprecated and new GAAS:\n\nWe use lidars, as main sensor, rather than vision algorithms.\n\n\nGAAS deprecated is based on computer vision(CV), but fully vision-algorithms-based framework is not robust enough for autonomous flying.\n\nFor flying cars and large cargo drones, vision-based algorithms suffer from:\n\n1. Lack of robustness, especially at night or over-exposed conditions. When air vehicles are flying at high speed, the localization is not stable enough which may cause severe accidents(vital to large air vehicles).\n\n2. Computer vision is computationally expensive and does not easily run in real-time on mobile devices.\n\n3. The neural network-based approach is accident-prone in extreme scenarios, and the failures are not easily reproducible.\n\nThese problems are not allowed to occur in manned flight scenarios.\n\nTherefore, the introduction of LIDAR seems to be necessary at present. That's why we make new GAAS from scratch, and refactored all modules in cpp.\n\n## Build with:\n\n**Tested on OS: Ubuntu 18.04; PX4(for simulation only) 1.8.0.**\n\n### step<1> Check your network status\n\n    wget www.google.com\n\n### step<2> tools\n\n(optional) install **cuda 10.2** for all **gpu-based** algorithms, like icp_lidar_localization and the gpu version of ndt_localization.\n\nYou may need to **upgrade cmake to at least 3.13** for building package icp_lidar_localization.\n\n    sudo apt install vim bwm-ng htop tmux git net-tools cmake-gui iotop curl\n\n### step<3> docker(for simulation only)\n\n    curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\n\n    sudo usermod -aG docker [your username]\n\n    docker pull gaas/mavros-gazebo7-px4\n\n### step<4> ros_melodic\n\n    ./install_ros_melodic.sh\n\n### step<5> opencv 3.4.5\n\n    sudo apt install cmake-qt-gui\n    \n[Download opencv 3.4.5 and unzip]\n\n    cd opencv-3.4.5/\n    mkdir build&&cd build&&cmake-gui ..\n    \n[Configure your opencv cmake options in cmake-gui]\n    \n    make -j4&&sudo make install\n\n### step<6> glog\n\n    git clone https://github.com/google/glog.git\n    cd glog\n    git checkout -b v0.4.0\n    mkdir build&&cd build\n    cmake ..\n    make \n    sudo make install\n\n### step<7> pcl 1.8.0 build from source\n\n[Download pcl 1.8.0 and unzip]\n\n    cd pcl-1.8.0\n    mkdir build&&cd build&&cmake-gui ..\n\n[Configure your pcl cmake options in cmake-gui]\n\n    make -j4\n    sudo make install\n\n### step<8> (optional) upgrade your gazebo for simulation\n\n    cd GAAS/simulation\n    ./upgrade_gazebo.sh\n\n\n\n## Getting Started\n\nTo build the project, setup all dependencies, run:\n\n    ./build_all.sh\n\nTo run GAAS_contrib algorithms:\n\n    cd algorithms\n    ./run_gaas_contrib_algorithms.sh\n\nStart simulation (or play a rosbag instead):\n\n    cd simulation&&./scripts/prepare_simulation.sh\n    \nor:\n\n    rosbag play --clock [path_to_your_rosbag]\n\n**And checkout your L5 flying car demo in simulation environment!**\n\n## License\n\nGAAS is under BSD 3-Clause License.\n\n## Features\n\n1. Simulation env with 32 lines lidar and stereo cameras.\n\n2. Spinning lidar mapping and NDT matching localization.\n\nCheck out simulation/README.md to get more details of simulation env setup.\n\n## Roadmap:\n\n#### 1.  Gazebo simulation env construction, including spinning lidars and non-repetitive lidars and stereo cameras.\n\n(1). Livox Horizon + Forward Stereo Camera --Done.\n\n(2). Velodyne HDL-32 + Forward Stereo Camera --Done.\n\n#### 2. Accelerate compiling and deployment of GAAS.\n\n#### 3. Implement some LIDAR (mechanical/solid-state) based algorithms, and implement one key start in the simulation environment.\n\n## Checklist:\n\n(1). Lidar Points to Image Projection-- Done.\n\n(2). Euclidean Cluster Extraction. --Done.\n\n(3). Global Coordinate based HD-Map Building. --Done.\n\n(4). NDT Lidar Localization(CPU/Cuda) --Done.\n\n(5). Downsampling Node --Done.\n\n(6). A* Path Planner --Done.\n\n(7). Refactored px4 Offboard Commander --Done.\n\n(8). Dynamic Obstacles Generation and Replanning --Done.\n\n(9). Jetson AGX Xavier Adaptation --Done.\n\n(10). Interactive GUI Target Selector in HD-maps --Done.\n\n(11). Multiple Submaps Switching --TODO\n\n(12). IMU-Preintegration and High-Frequency Localization --Done.\n\n(13). VTOL Mode Switching --TODO.\n\n(14). Decentralized Robust Ground Control Station --TODO.\n\n(15). Generalized Flight Controller State Management --Done.\n\n(16). PX4 State Reporter --Done.\n\n(17). HUD Module --Done.\n\n(18). Cuda-based Multiple Lidar Pointclouds ICP Localization --Done.\n\n(19). Ground Points Removal Preprocessing --Done.\n\n(20). System State Surveillance Service --Done.\n\n(21). HTTP Server on Ground Control Station --TODO.\n\n(22). Multiple Spinning Lidar Support --Done.\n\n(23). Airsim Simulation Env Support --Done.\n\n## Current status:\n\nAdding logics for flight stage manager module. Including flight stage transfer service clients(triggered by mission config file) and servers(including localization module, flight control commander module and target navigation module.) \n"
        },
        {
          "name": "algorithms",
          "type": "tree",
          "content": null
        },
        {
          "name": "build_all.sh",
          "type": "blob",
          "size": 0.1611328125,
          "content": "# A simple and naive BVT :)\n\ncd algorithms&&catkin_make gaas_msgs_gencpp\ncd build&&cmake ../src&&make gaas_msgs_gencpp&&make -j8 && cd ../../simulation&&catkin_make\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "deprecated",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc_cn",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc_en",
          "type": "tree",
          "content": null
        },
        {
          "name": "simulation",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}