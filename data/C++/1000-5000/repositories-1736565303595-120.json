{
  "metadata": {
    "timestamp": 1736565303595,
    "page": 120,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ProjectPhysX/FluidX3D",
      "stars": 4148,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1650390625,
          "content": "src/OpenCL/** linguist-vendored\nsrc/X11/** linguist-vendored\nsrc/lodepng.* linguist-vendored\nsrc/kernel.cpp linguist-language=OpenCL\nsrc/setup.cpp linguist-documentation"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.041015625,
          "content": "bin/\ntemp/\nstl/\n.vs/\nFluidX3D.vcxproj.user"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.2734375,
          "content": "cff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n- family-names: \"Lehmann\"\n  given-names: \"Moritz\"\n  orcid: \"https://orcid.org/0000-0002-4652-8383\"\ntitle: \"FluidX3D\"\ndate-released: 2022-08-04\nurl: \"https://github.com/ProjectPhysX/FluidX3D\""
        },
        {
          "name": "DOCUMENTATION.md",
          "type": "blob",
          "size": 37.361328125,
          "content": "# FluidX3D Documentation - How to get started?\n\n## 0. Install GPU Drivers and OpenCL Runtime\n\n<details><summary>(click to expand section)</summary>\n\n- **Windows**\n  <details><summary>GPUs</summary>\n\n  - Download and install the [AMD](https://www.amd.com/en/support/download/drivers.html)/[Intel](https://www.intel.com/content/www/us/en/download/785597/intel-arc-iris-xe-graphics-windows.html)/[Nvidia](https://www.nvidia.com/Download/index.aspx) GPU Drivers, which contain the OpenCL Runtime.\n  - Reboot.\n\n  </details>\n  <details><summary>CPUs</summary>\n\n  - Download and install the [Intel CPU Runtime for OpenCL](https://www.intel.com/content/www/us/en/developer/articles/technical/intel-cpu-runtime-for-opencl-applications-with-sycl-support.html) (works for both AMD/Intel CPUs).\n  - Reboot.\n\n  </details>\n- **Linux**\n  <details><summary>AMD GPUs</summary>\n\n  - Download and install [AMD GPU Drivers](https://www.amd.com/en/support/linux-drivers), which contain the OpenCL Runtime, with:\n    ```bash\n    sudo apt update && sudo apt upgrade -y\n    sudo apt install -y g++ git make ocl-icd-libopencl1 ocl-icd-opencl-dev\n    mkdir -p ~/amdgpu\n    wget -P ~/amdgpu https://repo.radeon.com/amdgpu-install/6.2.3/ubuntu/noble/amdgpu-install_6.2.60203-1_all.deb\n    sudo apt install -y ~/amdgpu/amdgpu-install*.deb\n    sudo amdgpu-install -y --usecase=graphics,rocm,opencl --opencl=rocr\n    sudo usermod -a -G render,video $(whoami)\n    rm -r ~/amdgpu\n    sudo shutdown -r now\n    ```\n\n  </details>\n  <details><summary>Intel GPUs</summary>\n\n  - Intel GPU Drivers come already installed since Linux Kernel 6.2, but they don't contain the OpenCL Runtime.\n  - The the [OpenCL Runtime](https://github.com/intel/compute-runtime/releases) has to be installed separately with:\n    ```bash\n    sudo apt update && sudo apt upgrade -y\n    sudo apt install -y g++ git make ocl-icd-libopencl1 ocl-icd-opencl-dev intel-opencl-icd\n    sudo usermod -a -G render $(whoami)\n    sudo shutdown -r now\n    ```\n\n  </details>\n  <details><summary>Nvidia GPUs</summary>\n\n  - Download and install [Nvidia GPU Drivers](https://www.nvidia.com/Download/index.aspx), which contain the OpenCL Runtime, with:\n    ```bash\n    sudo apt update && sudo apt upgrade -y\n    sudo apt install -y g++ git make ocl-icd-libopencl1 ocl-icd-opencl-dev nvidia-driver-550\n    sudo shutdown -r now\n    ```\n\n  </details>\n  <details><summary>CPUs</summary>\n\n  - Option 1: Download and install the [oneAPI DPC++ Compiler](https://github.com/intel/llvm/releases?q=oneAPI+DPC%2B%2B+Compiler) and [oneTBB](https://github.com/oneapi-src/oneTBB/releases) with:\n    ```bash\n    export OCLV=\"2024.18.10.0.08_rel\"\n    export TBBV=\"2022.0.0\"\n    sudo apt update && sudo apt upgrade -y\n    sudo apt install -y g++ git make ocl-icd-libopencl1 ocl-icd-opencl-dev\n    sudo mkdir -p ~/cpurt /opt/intel/oclcpuexp_${OCLV} /etc/OpenCL/vendors /etc/ld.so.conf.d\n    sudo wget -P ~/cpurt https://github.com/intel/llvm/releases/download/2024-WW43/oclcpuexp-${OCLV}.tar.gz\n    sudo wget -P ~/cpurt https://github.com/oneapi-src/oneTBB/releases/download/v${TBBV}/oneapi-tbb-${TBBV}-lin.tgz\n    sudo tar -zxvf ~/cpurt/oclcpuexp-${OCLV}.tar.gz -C /opt/intel/oclcpuexp_${OCLV}\n    sudo tar -zxvf ~/cpurt/oneapi-tbb-${TBBV}-lin.tgz -C /opt/intel\n    echo /opt/intel/oclcpuexp_${OCLV}/x64/libintelocl.so | sudo tee /etc/OpenCL/vendors/intel_expcpu.icd\n    echo /opt/intel/oclcpuexp_${OCLV}/x64 | sudo tee /etc/ld.so.conf.d/libintelopenclexp.conf\n    sudo ln -sf /opt/intel/oneapi-tbb-${TBBV}/lib/intel64/gcc4.8/libtbb.so /opt/intel/oclcpuexp_${OCLV}/x64\n    sudo ln -sf /opt/intel/oneapi-tbb-${TBBV}/lib/intel64/gcc4.8/libtbbmalloc.so /opt/intel/oclcpuexp_${OCLV}/x64\n    sudo ln -sf /opt/intel/oneapi-tbb-${TBBV}/lib/intel64/gcc4.8/libtbb.so.12 /opt/intel/oclcpuexp_${OCLV}/x64\n    sudo ln -sf /opt/intel/oneapi-tbb-${TBBV}/lib/intel64/gcc4.8/libtbbmalloc.so.2 /opt/intel/oclcpuexp_${OCLV}/x64\n    sudo ldconfig -f /etc/ld.so.conf.d/libintelopenclexp.conf\n    sudo rm -r ~/cpurt\n    ```\n  - Option 2: Download and install [PoCL](https://portablecl.org/) with:\n    ```bash\n    sudo apt update && sudo apt upgrade -y\n    sudo apt install -y g++ git make ocl-icd-libopencl1 ocl-icd-opencl-dev pocl-opencl-icd\n    ```\n  </details>\n\n- **Android**\n  <details><summary>ARM GPUs</summary>\n\n  - Download the [Termux `.apk`](https://github.com/termux/termux-app/releases) and install it.\n  - In the Termux app, run:\n    ```bash\n    apt update && apt upgrade -y\n    apt install -y clang git make\n    ```\n\n  </details>\n\n</details>\n\n<br>\n\n## 1. Download FluidX3D\n- [Download](https://github.com/ProjectPhysX/FluidX3D/archive/refs/heads/master.zip) and unzip the source code, or clone with:\n  ```bash\n  git clone https://github.com/ProjectPhysX/FluidX3D.git && cd FluidX3D\n  ```\n- To update FluidX3D:\n  - Make a backup of your changes.\n  - Run:\n    ```bash\n    git stash\n    git pull origin master\n    git stash pop\n    ```\n\n<br>\n\n## 2. Compiling the Source Code\n- There is no \"installation\" of FluidX3D. Instead, you have to compile the source code yourself.\n- I have made this as easy as possible and this documentation will guide you through it. Nontheless, some basic programming experience with C++ would be good for the setup scripts.\n- First, compile the code as-is; this is the standard FP32 benchmark test case. By default, the fastest installed GPU will be selected automatically. Compile time is about 5 seconds.\n\n### Windows\n- Download and install [Visual Studio Community](https://visualstudio.microsoft.com/de/vs/community/). In Visual Studio Installer, add:\n  - Desktop development with C++\n  - MSVC v142\n  - Windows 10 SDK\n- Open [`FluidX3D.sln`](FluidX3D.sln) in [Visual Studio Community](https://visualstudio.microsoft.com/de/vs/community/).\n- Compile and run by clicking the <kbd>► Local Windows Debugger</kbd> button.\n- To select a specific GPU, open Windows CMD in the `FluidX3D` folder (type `cmd` in File Explorer in the directory field and press <kbd>Enter</kbd>), then run `bin\\FluidX3D.exe 0` to select device `0`. You can also select multiple GPUs with `bin\\FluidX3D.exe 0 1 3 6` if the setup is [configured as multi-GPU](#the-lbm-class).\n\n### Linux / macOS / Android\n- Compile and run with:\n  ```bash\n  chmod +x make.sh\n  ./make.sh\n  ```\n- Compiling requires [`g++`](https://gcc.gnu.org/) with `C++17`, which is supported since version `8` (check with `g++ --version`). If you have [`make`](https://www.gnu.org/software/make/) installed (check with `make --version`), compiling will will be faster using multiple CPU cores; otherwise compiling falls back to using a single CPU core.\n- To select a specific GPU, enter `./make.sh 0` to compile+run, or `bin/FluidX3D 0` to run on device `0`. You can also select multiple GPUs with `bin/FluidX3D 0 1 3 6` if the setup is [configured as multi-GPU](#the-lbm-class).\n- Operating system (Linux/macOS/Android) and X11 support (required for [`INTERACTIVE_GRAPHICS`](src/defines.hpp)) are detected automatically. In case problems arise, you can still manually select [`target=...`](make.sh#L13) in [`make.sh`](make.sh#L13).\n- On macOS and Android, [`INTERACTIVE_GRAPHICS`](src/defines.hpp) mode is not supported, as no X11 is available. You can still use [`INTERACTIVE_GRAPHICS_ASCII`](src/defines.hpp) though, or [render video](#video-rendering) to the hard drive with regular [`GRAPHICS`](src/defines.hpp) mode.\n\n<br>\n\n## 3. Go through Sample Setups\n- Now open [`src/setup.cpp`](src/setup.cpp). In here are all the sample setups, each one being a `void main_setup() {...}` function block written in C++. Uncomment one of them, maybe start top-to-bottom.\n- In the line where the `main_setup()` function starts, it says \"required extensions in defines.hpp:\", followed by a list of extensions in capital letters. Head over to [`src/defines.hpp`](src/defines.hpp) and comment out\n  ```c\n  //#define BENCHMARK\n  ```\n  with a `//`. Then, uncomment all of the extensions required for the setup by removing the `//` in front of the corresponding line.\n- Finally, [compile](#2-compiling-the-source-code) and run the setup with the <kbd>► Local Windows Debugger</kbd> button (Windows) or `./make.sh` (Linux/macOS/Android).\n- Once the interactive graphics window opens, press key <kbd>P</kbd> to start/pause the simulation, and press <kbd>H</kbd> to show the help menu for keyboard controls and visualization settings.\n- Go through some of the sample setups this way, get familiar with their code structure and test the graphics mode.\n\n<br>\n\n## 4. Keyboard/Mouse Controls for [`INTERACTIVE_GRAPHICS`](src/defines.hpp)/[`_ASCII`](src/defines.hpp)\n| Key                       | Function                                                                                                                           |\n| :-----------------------: | :--------------------------------------------------------------------------------------------------------------------------------- |\n|                           |                                                                                                                                    |\n| <kbd>P</kbd>              | start/pause the simulation                                                                                                         |\n| <kbd>H</kbd>              | show/hide help menu for keyboard controls and visualization settings                                                               |\n| <kbd>Esc</kbd><br><kbd>Alt</kbd>+<kbd>F4</kbd> | quit                                                                                                          |\n|                           |                                                                                                                                    |\n| <kbd>Mouse</kbd><br><kbd>I</kbd><br><kbd>J</kbd> <kbd>K</kbd> <kbd>L</kbd> | rotate camera                                                                     |\n| <kbd>Scrollwheel</kbd><br><kbd>+</kbd> <kbd>-</kbd> | zoom (centered camera mode) or camera movement speed (free camera mode)                                  |\n| <kbd>Mouseclick</kbd><br><kbd>U</kbd> | toggle rotation with <kbd>Mouse</kbd> and angle snap rotation with <kbd>I</kbd> <kbd>J</kbd> <kbd>K</kbd> <kbd>L</kbd> |\n| <kbd>F</kbd>              | toggle centered/free camera mode                                                                                                   |\n| <kbd>W</kbd><br><kbd>A</kbd> <kbd>S</kbd> <kbd>D</kbd><br><kbd>Space</kbd> <kbd>C</kbd> | move free camera                                                     |\n| <kbd>Y</kbd> <kbd>X</kbd> | adjust camera field of view                                                                                                        |\n| <kbd>R</kbd>              | toggle camera autorotation                                                                                                         |\n| <kbd>G</kbd>              | print current camera position/rotation in console as copy/paste command                                                            |\n| <kbd>V</kbd>              | toggle stereoscopic rendering for VR                                                                                               |\n| <kbd>B</kbd>              | toggle VR-goggles/3D-TV mode for stereoscopic rendering                                                                            |\n| <kbd>N</kbd> <kbd>M</kbd> | adjust eye distance for stereoscopic rendering                                                                                     |\n|                           |                                                                                                                                    |\n| <kbd>1</kbd>              | flag wireframe / solid surface (and force vectors on solid cells or surface pressure if the extension is used)                     |\n| <kbd>2</kbd>              | velocity field                                                                                                                     |\n| <kbd>3</kbd>              | streamlines                                                                                                                        |\n| <kbd>4</kbd>              | vorticity (velocity-colored Q-criterion isosurface)                                                                                |\n| <kbd>5</kbd>              | rasterized free surface                                                                                                            |\n| <kbd>6</kbd>              | raytraced free surface                                                                                                             |\n| <kbd>7</kbd>              | particles                                                                                                                          |\n| <kbd>T</kbd>              | toggle slice visualization mode                                                                                                    |\n| <kbd>Z</kbd>              | toggle field visualization mode                                                                                                    |\n| <kbd>Q</kbd> <kbd>E</kbd> | move slice in slice visualization mode                                                                                             |\n\n<br>\n\n## 5. Writing your own Setups\n\n### The LBM Class\n- For initializing the simulation box, use call\n  ```c\n  LBM lbm(Nx, Ny, Nz, nu, ...);\n  ```\n  constructor. `Nx`/`Ny`/`Nz` is the grid resolution and `nu` is the kinematic shear viscosity in [LBM units](#unit-conversion).\n- To use multiple GPUs, use\n  ```c\n  LBM lbm(Nx, Ny, Nz, Dx, Dy, Dz, nu, ...);\n  ```\n  with `Dx`/`Dy`/`Dz` indicating how many domains (GPUs) there are in each spatial direction. The product `Dx`×`Dy`×`Dz` is the total number of domains (GPUs).\n- As long as the `lbm` object is in scope, you can access the memory. As soon as it goes out of scope, all memory associated with the current simulation is freed again.\n- The grid resolution `Nx`/`Ny`/`Nz` ultimately determines the VRAM occupation. Quite often it's not obvious at which resolution you'll overshoot the VRAM capacity of the GPU(s). To aid with this, there is the function:\n  ```c\n  const uint3 lbm_N = resolution(float3(1.0f, 2.0f, 0.5f), 2000u);\n  ```\n  This takes as inputs the desired aspect ratio of the simulation box and the VRAM occupation in MB, and returns the grid resolution as a `uint3` with `.x`/`.y`/`.z` components. You can also directly feed the `uint3` into the LBM constructor as resolution:\n  ```c\n  LBM lbm(lbm_N, nu, ...);\n  ```\n\n### Unit Conversion\n- The LBM simulation uses a different unit system from SI units, where density `rho=1` and velocity `u≈0.001-0.1`, because floating-point arithmetic is most accurate close to `1`.\n- To ease unit conversion from SI to LBM units and back, there is the [`units.hpp`](src/units.hpp) struct. By calling\n  ```c\n  units.set_m_kg_s(lbm_length, lbm_velocity, lbm_density=1, si_length, si_velocity, si_density);\n  ```\n  the base unit conversion factors [m], [kg], [s] are calculated and stored in the `units` struct. Thereafter, any of the conversion functions from [`src/units.hpp`](src/units.hpp) can be used to go from SI to LBM units and back, such as `lbm_nu = units.nu(si_nu)` to convert the kinematic viscosity from SI to LBM units.\n- A good beginner example for this is the \"[aerodynamics of a cow](src/setup.cpp)\" setup.\n\n### Initial and Boundary Conditions\n- If not explicitly set, by default all cells have the default values `rho=1`, `u=0`, `flags=0`.\n- The initial/boundary conditions of single grid cells are set in a parallelized loop that iterates over the entire grid:\n  ```c\n  const uint Nx=lbm.get_Nx(), Ny=lbm.get_Ny(), Nz=lbm.get_Nz(); parallel_for(lbm.get_N(), [&](ulong n) { uint x=0u, y=0u, z=0u; lbm.coordinates(n, x, y, z);\n  \t// ...\n  });\n  ```\n  Within this loop, you can set the density, velocity and flags of each cell individually by assigning values to `lbm.rho[n]`, `lbm.u.x[n]`, `lbm.u.y[n]`, `lbm.u.z[n]` and `lbm.flags[n]`. The `n` here is the linearized 3D grid index, corresponding to an (`x`|`y`|`z`) position via the function `lbm.coordinates(n, x, y, z)`.\n- For example, to set solid walls at the left and right sides of the simulation box, write\n  ```c\n  if(y==0u||y==Ny-1u) lbm.flags[n] = TYPE_S;\n  ```\n  within the loop.\n- All box sides where no solid (`TYPE_S`) or other boundary type are set will remain periodic boundaries.\n- Primitive geometry, such as spheres, ellipsoids, cubes, cuboids, cylinders, codes, pipes, triangles, inclined planes, or toruses can be set with the functions from [`shapes.hpp`](src/shapes.hpp). Example to insert a cylinder:\n  ```c\n  if(cylinder(x, y, z, lbm.center(), float3(axis_x, axis_z, axis_z), radius) lbm.flags[n] = TYPE_S;\n  ```\n- The non-moving no-slip mid-grid bounce-back boundaries (`TYPE_S`) are always available without further extensions. \"No-slip bounce-back\" refers to the property that the flow velocity directly at the boundary is 0 (no-slip condition). \"Mid-grid\" refers to the boundary being located exactly in the middle between the boundary cells and adjacent fluid cells.\n- For inflow/outflow boundaries, you need to enable (uncomment) the [`EQUILIBRIUM_BOUNDARIES`](src/defines.hpp) extension. Then, for the specific inflow/outflow cells, set the flag `lbm.flags[n] = TYPE_E` and on the same cell specify either a density `lbm.rho[n]` unequal to `1` or a velocity `lbm.u.x[n]`/`lbm.u.y[n]`/`lbm.u.z[n]` unequal to `0`, or a combination of both. `TYPE_E` cells enforce the specified density/velocity value and absorb any incoming shockwaves.\n- For moving solid boundaries, you need to enable (uncomment) the [`MOVING_BOUNDARIES`](src/defines.hpp) extension. Then, for the specific solid cells, set the flag `lbm.flags[n] = TYPE_S` and on the same cell specify a velocity `lbm.u.x[n]`/`lbm.u.y[n]`/`lbm.u.z[n]` unequal to `0`. `TYPE_S` cells reflect any incoming shockwaves.\n- If strict mass conservation is required (for example flow through a linear pipe), use periodic boundaries (i.e. don't set any boundary type on the cells at these simulation box sides), and drive the flow with a volume force (equivalent to a pressure gradient). Therefore you need to enable (uncomment) the [`VOLUME_FORCE`](src/defines.hpp) extension, and in the [LBM constuctor](#the-lbm-class) set the force per volume (`fx`|`fy`|`fz`):\n  ```c\n  LBM lbm(Nx, Ny, Nz, nu, fx, fy, fz);\n  ```\n  These force per volume values should not exceed `0.001` in magnitude.\n\n### Running the Simulation\n- Call `lbm.run()` (without input parameter, it's infinite time steps) to initialize and execute the setup, or `lbm.run(time_steps)` to execute only a specific number of time steps.\n- If you have a [more complicated simulation loop](#video-rendering) where you periodically compute time steps and render images for a video or export data, don't forget to place an `lbm.run(0u)` before that loop. This copies the initial/boundary conditions from CPU RAM to GPU VRAM and initializes the simulation on the GPU, without computing a time step. Without initialization, there is no data in VRAM yet for rendering.\n\n### Loading .stl Files\n- For more complex geometries, you can load `.stl` triangle meshes and voxelize them to the Cartesian simulation grid on the GPU(s).\n- Create a `FluidX3D/stl/` folder next to the `FluidX3D/src/` folder and download the geometry from websites like [Thingiverse](https://www.thingiverse.com/), or create your own.\n- Only binary `.stl` files are supported. For conversion from other formats or for splitting composite geometries like helicopter hull and rotors, I recommend [Microsoft 3D Builder](https://apps.microsoft.com/store/detail/3d-builder/9WZDNCRFJ3T6) on Windows or [Blender](https://www.blender.org/) on Windows/Linux.\n- Load and voxelize simple `.stl` files directly with\n  ```c\n  lbm.voxelize_stl(get_exe_path()+\"../stl/mesh.stl\", center, rotation, size);\n  ```\n  This automatically repositions/rescales the mesh to the specified center. Use `lbm.center()` for the simulation box center, or add an offset with a `+float3(offset_x, offset_y, offset_z)`. You can generate and multiply together a rotation matrix like this (example: rotation around the z-axis by 180°, then around the x-axis by 90°):\n  ```c\n  float3x3 rotation = float3x3(float3(1, 0, 0), radians(90.0f))*float3x3(float3(0, 0, 1), radians(180.0f));\n  ```\n- To load composite geometries with several parts without automatic mesh repositioning/rescaling, use\n  ```c\n  Mesh* mesh_1 = read_stl(const string& path, const float scale=1.0f, const float3x3& rotation=float3x3(1.0f), const float3& offset=float3(0.0f)); // load mesh without automatic repositioning/rescaling\n  Mesh* mesh_2 = read_stl(const string& path, const float scale=1.0f, const float3x3& rotation=float3x3(1.0f), const float3& offset=float3(0.0f));\n  mesh_1->scale(const float scale); // manually scale meshes\n  mesh_2->scale(const float scale);\n  mesh_1->translate(const float3& translation); // manually reposition meshes\n  mesh_2->translate(const float3& translation);\n  lbm.voxelize_mesh_on_device(mesh_1); // voxelize meshes on GPU\n  lbm.voxelize_mesh_on_device(mesh_2);\n  \n  ```\n  to load the meshes from the `.stl` files, manually scale/reposition all parts of the mesh the same time, and finally voxelize them on the GPU.\n- To aid with repositioning the mesh, there is `lbm.center()` for the center of the simulation box, as well as the min/max bounding-box coordinates of the mesh `mesh->pmin`/`mesh->pmax`, each a `float3` with (`x`|`y`|`z`) components.\n- Rotating geometries have to be periodically revoxelized, about every 1-10 LBM time steps. In the main simulation loop in the [`main_setup()`](src/setup.cpp) function, first rotate the triangle mesh, then revoxelize on GPU, then compute a few LBM time steps:\n  ```c\n  const uint lbm_T = 100000u; // number of LBM time steps to simulate\n  const uint lbm_dt = 4u; // number of LBM time steps between each mesh revoxelization\n  lbm.run(0u); // initialize simulation\n  while(lbm.get_t()<lbm_T) { // main simulation loop\n  \tmesh->rotate(float3x3(float3(0, 0, 1), lbm_omega*(float)lbm_dt)); // rotate the triangle mesh\n  \tlbm.voxelize_mesh_on_device(mesh, TYPE_S, center, float3(0.0f), float3(0.0f, 0.0f, lbm_omega)); // revoxelize the rotated triangle mesh, provide the instantaneous angular velocity vector for moving boundaries\n  \tlbm.run(lbm_dt); // run lbm_dt LBM time steps\n  }\n  ```\n  Here `lbm_omega` is the angular velocity in radians per time step, `lbm_dt` is the number of simulated time steps between revoxelizations, and `float3(0.0f, 0.0f, lbm_omega)` is the instantaneous angular velocity as a vector along the axis of rotation. The largest displacement of the outermost cells should not exceed `1` cell between revoxelizations; set `lbm_omega = lbm_u/lbm_radius` accordingly.\n- Have a look at the \"[Cessna 172](src/setup.cpp)\" and \"[Bell 222](src/setup.cpp)\" setups for some examples.\n\n### Video Rendering\n- For video rendering, disable (comment out) [`INTERACTIVE_GRAPHICS`](src/defines.hpp) and [`INTERACTIVE_GRAPHICS_ASCII`](src/defines.hpp) and enable (uncomment) [`GRAPHICS`](src/defines.hpp) in [`src/defines.hpp`](src/defines.hpp).\n- Set the video resolution as [`GRAPHICS_FRAME_WIDTH`](src/defines.hpp)/[`GRAPHICS_FRAME_HEIGHT`](src/defines.hpp) and the background color as [`GRAPHICS_BACKGROUND_COLOR`](src/defines.hpp). You can also adjust the other [`GRAPHICS_...`](src/defines.hpp) options there, such as semi-transparent rendering mode, or adjust the color scale for velocity with [`GRAPHICS_U_MAX`](src/defines.hpp).\n- A basic loop for rendering video in the [`main_setup()`](src/setup.cpp) function looks like this:\n  ```c\n  lbm.graphics.visualization_modes = VIS_FLAG_LATTICE|VIS_Q_CRITERION; // set visualization modes, see all available visualization mode macros (VIZ_...) in defines.hpp\n  const uint lbm_T = 10000u; // number of LBM time steps to simulate\n  lbm.run(0u, lbm_T); // initialize simulation\n  while(lbm.get_t()<lbm_T) { // main simulation loop\n  \tif(lbm.graphics.next_frame(lbm_T, 25.0f)) { // render enough frames for 25 seconds of 60fps video\n  \t\tlbm.graphics.set_camera_free(float3(2.5f*(float)Nx, 0.0f*(float)Ny, 0.0f*(float)Nz), 0.0f, 0.0f, 50.0f); // set camera to position 1\n  \t\tlbm.graphics.write_frame(get_exe_path()+\"export/camera_1/\"); // export image from camera position 1\n  \t\tlbm.graphics.set_camera_centered(-40.0f, 20.0f, 78.0f, 1.25f); // set camera to position 2\n  \t\tlbm.graphics.write_frame(get_exe_path()+\"export/camera_2/\"); // export image from camera position 2\n  \t}\n  \tlbm.run(1u, lbm_T); // run 1 LBM time step\n  }\n  ```\n- To find suitable camera placement, run the simulation at low resolution in [`INTERACTIVE_GRAPHICS`](src/defines.hpp) mode, rotate/move the camera to the desired position, click the <kbd>Mouse</kbd> to disable mouse rotation, and press <kbd>G</kbd> to print the current camera settings as a copy-paste command in the console. <kbd>Alt</kbd>+<kbd>Tab</kbd> to the console and copy the camera placement command by selecting it with the mouse and right-clicking, then paste it into the [`main_setup()`](src/setup.cpp) function.\n- To fly the camera along a smooth path through a list of provided keyframe camera placements, use `catmull_rom` splines:\n  ```c\n  while(lbm.get_t()<=lbm_T) { // main simulation loop\n  \tif(lbm.graphics.next_frame(lbm_T, 30.0f)) {\n  \t\tconst float t = (float)lbm.get_t()/(float)lbm_T;\n  \t\tvector<float3> camera_positions = {\n  \t\t\tfloat3(-0.282220f*(float)Nx,  0.529221f*(float)Ny,  0.304399f*(float)Nz),\n  \t\t\tfloat3( 0.806921f*(float)Nx,  0.239912f*(float)Ny,  0.436880f*(float)Nz),\n  \t\t\tfloat3( 1.129724f*(float)Nx, -0.130721f*(float)Ny,  0.352759f*(float)Nz),\n  \t\t\tfloat3( 0.595601f*(float)Nx, -0.504690f*(float)Ny,  0.203096f*(float)Nz),\n  \t\t\tfloat3(-0.056776f*(float)Nx, -0.591919f*(float)Ny, -0.416467f*(float)Nz)\n  \t\t};\n  \t\tvector<float> camera_rx = {\n  \t\t\t 116.0f,\n  \t\t\t  25.4f,\n  \t\t\t -10.6f,\n  \t\t\t -45.6f,\n  \t\t\t -94.6f\n  \t\t};\n  \t\tvector<float> camera_ry = {\n  \t\t\t  26.0f,\n  \t\t\t  33.3f,\n  \t\t\t  20.3f,\n  \t\t\t  25.3f,\n  \t\t\t -16.7f\n  \t\t};\n  \t\tconst float camera_fov = 90.0f;\n  \t\tlbm.graphics.set_camera_free(catmull_rom(camera_positions, t), catmull_rom(camera_rx, t), catmull_rom(camera_ry, t), camera_fov);\n  \t\tlbm.graphics.write_frame(get_exe_path()+\"export/\");\n  \t}\n  \tlbm.run(1u, lbm_T);\n  }\n  ```\n- The visualization mode(s) can be specified as `lbm.graphics.visualization_modes` with the [`VIS_...`](src/defines.hpp) macros. You can also set the `lbm.graphics.slice_mode` (`0`=no slice, `1`=x, `2`=y, `3`=z, `4`=xz, `5`=xyz, `6`=yz, `7`=xy) and reposition the slices with `lbm.graphics.slice_x`/`lbm.graphics.slice_y`/`lbm.graphics.slice_z`.\n- Exported frames will automatically be assigned the current simulation time step in their name, in the format `bin/export/image-123456789.png`.\n- To convert the rendered `.png` images to video, use [FFmpeg](https://ffmpeg.org/):\n  ```bash\n  ffmpeg -framerate 60 -pattern_type glob -i \"export/*/image-*.png\" -c:v libx264 -pix_fmt yuv420p -b:v 24M \"video.mp4\"\n  ```\n\n### Data Export\n- At any point in time, you can export volumetric data as binary `.vtk` files with:\n  ```c\n  lbm.rho.write_device_to_vtk(); // density\n  lbm.u.write_device_to_vtk(); // velocity\n  lbm.flags.write_device_to_vtk(); // flags\n  lbm.F.write_device_to_vtk(); // force, only for FORCE_FIELD extension\n  lbm.phi.write_device_to_vtk(); // fill fraction, only for SURFACE extension\n  lbm.T.write_device_to_vtk(); // temperature, only for TEMPERATURE extension\n  lbm.write_mesh_to_vtk(const Mesh* mesh); // for exporting triangle meshes\n  ```\n- These functions first pull the data from the GPU(s) into CPU RAM, and then write it to the hard drive.\n- If [unit conversion](#unit-conversion) with `units.set_m_kg_s(...)` was specified, the data in exported `.vtk` files is automaticlally converted to SI units.\n- Exported files will automatically be assigned the current simulation time step in their name, in the format `bin/export/u-123456789.vtk`.\n- Be aware that these volumetric files can be gigantic in file size, tens of GigaByte for a single file.\n- You can view/evaluate the `.vtk` files for example in [ParaView](https://www.paraview.org/).\n- It is recommended to use the C++ functionality in the [`main_setup()`](src/setup.cpp) function directly to extract the data of interest and selectively only write that to the hard drive. Therefore, call `lbm.u.read_from_device()` to copy the data from the GPU(s) to CPU RAM, and then you can access it directly, for example\n  ```c\n  const float lbm_velocity_x = lbm.u.x[lbm.index(x, y, z)];\n  ```\n  to get the x-velocity at the position (`x`|`y`|`z`) in [LBM units](#unit-conversion).\n- To [convert the velocity from LBM to SI units](#unit-conversion), use\n  ```c\n  const float si_velocity_x = units.si_u(lbm_velocity_x);\n  ```\n  after having done [unit conversion](#unit-conversion) with `units.set_m_kg_s(...)`.\n- You can also export the `.stl` triangle meshes to binary `.vtk` files with:\n  ```c\n  lbm.write_mesh_to_vtk(const Mesh* mesh);\n  ```\n\n### Lift/Drag Forces\n- Enable (uncomment) the [`FORCE_FIELD`](src/defines.hpp) extension. This extension allows computing boundary forces on every solid cell (`TYPE_S`) individually, as well as placing an individual volume force on every fluid cell (not used here).\n- In the [`main_setup()`](src/setup.cpp) function's main simulation loop, alternatingly call:\n  ```c\n  lbm.run(lbm_dt); // run lbm_dt LBM time steps\n  lbm.calculate_force_on_boundaries(); // compute boundary forces on GPU on all solid cells (TYPE_S)\n  ```\n  The latter computes the boundary forces on the GPU into the `lbm.F` field in VRAM.\n- To copy `lbm.F` from GPU VRAM to CPU RAM, call:\n  ```c\n  lbm.F.read_from_device();\n  ```\n  You can then access the boundary forces at each individual cell with:\n  ```c\n  float lbm_force_x_n = lbm.F.x[lbm.index(x, y, z)];\n  ```\n- To sum over all the individual boundary cells that belong to the body, to get the total force on the body, first voxelize the body with\n  ```c\n  lbm.voxelize_mesh_on_device(mesh, TYPE_S|TYPE_X);\n  ```\n  with the additional `TYPE_X` flagging, and then call\n  ```c\n  const float3 lbm_force = lbm.calculate_force_on_object(TYPE_S|TYPE_X);\n  ```\n  to sum over all cells marked `TYPE_S|TYPE_X` that belong to the body. You can also use `TYPE_Y` for this.\n- Finally, [convert from LBM to SI units](#unit-conversion) with\n  ```c\n  const float si_force_x = units.si_F(lbm_force.x);\n  ```\n  after having done [unit conversion](#unit-conversion) with `units.set_m_kg_s(...)`.\n- See the \"Ahmed body\" setup for an example. Note that in the highly turbulent regime, computed body forces are too large by up to a factor 2, because even large resolution is not enough to fully capture the turbulent boundary layer. A wall function is needed, I'll scan literature on it.\n\n<br>\n\n## 6. Further LBM Extensions\nBy now you're already familiar with the [additional boundary types](#initial-and-boundary-conditions) through extensions [`VOLUME_FORCE`](src/defines.hpp), [`FORCE_FIELD`](src/defines.hpp), [`EQUILIBRIUM_BOUNDARIES`](src/defines.hpp), and [`MOVING_BOUNDARIES`](src/defines.hpp). The remaining available model extensions are briefly outlined here:\n\n### [`SURFACE`](src/defines.hpp) Extension\n- To simulate free water surfaces, enable (uncomment) the [`SURFACE`](src/defines.hpp) extension.\n- All cells then get 3 additional flags: `TYPE_F` (fluid), `TYPE_I` (interface), and `TYPE_G` (gas). Fluid cells are computed with regular LBM. Interface cells account for the extra surface tension forces, if the surface tension coefficient `sigma` is set greater than `0` in the [LBM constructor](#the-lbm-class); the interface is always 1 cell layer thick. Gas cells are not simulated at all and are essentially treated as vacuum.\n- If not set otherwise in the [initial conditions](#initial-and-boundary-conditions), all cells are initialized as `TYPE_G` by default. As initial conditions, set all cells that should be fluid to\n  ```c\n  lbm.flags[n] = TYPE_F;\n  ```\n  The interface layer will be automatically initialized during initialization with `lbm.run(0u)`.\n- Addidionally to the 3 flags, each cell also gets assigned a fill level `lbm.phi[n]`: `1` for fluid cells (`TYPE_F`), `]0,1[` for interface cells (`TYPE_I`), and `0` for gas cells (`TYPE_G`). You can set this fill level at initialization, additionally to the cell flag. Do not forget to set the cell flag. If `lbm.phi[n]` is not set manually, it will automatically be initialized such that all fluid cells get `phi=1`, all interface cells get `phi=0.5`, and all gas clls get `phi=0` assigned.\n- For a simple example, see the \"[dam break](src/setup.cpp)\" setup. A more advanced sample setup for free surfaces is the \"[raindrop impact](src/setup.cpp)\".\n\n### [`TEMPERATURE`](src/defines.hpp) Extension\n- With the [`TEMPERATURE`](src/defines.hpp) extension, FluidX3D can model thermal convection flows. This extension automatically also enables the [`VOLUME_FORCE`](src/defines.hpp) extension.\n- In the [LBM constructor](#the-lbm-class), you then need to set the volume force (`fx`|`fy`|`fz`), the thermal diffusion coefficient `alpha`, and the thermal expansion coefficient `beta`, all [in LBM units](#unit-conversion):\n  ```c\n  LBM lbm(Nx, Ny, Nz, nu, fx, fy, fz, 0.0f, alpha, beta); // the \"0.0f\" is for the surface tension coefficient sigma which is not used here and has to remain 0\n  ```\n- With the extension, each grid cell gets an additional temperature `lbm.T[n]` ([in LBM units](#unit-conversion)) assigned. The default temperature in LBM units is `1`.\n- To set temperature boundary conditions, use the flag `TYPE_T` and for the same cells assign a temperature unequal to `1`:\n  ```c\n  lbm.flags[n] = TYPE_T; // make the cell n a temperature boundary\n  lbm.T[n] = 1.2f; // set this temperature boundary hotter than average\n  ```\n- See the \"[Rayleigh-Benard convection](src/setup.cpp)\" and \"[thermal convection](src/setup.cpp)\" setups for two examples.\n\n### [`SUBGRID`](src/defines.hpp) Extension\n- Fluid flow is characterized by the Reynolds number<p align=\"center\"><i>Re</i> = <sup><i>x</i>·<i>u</i></sup>&#8725;<sub><i>nu</i></sub></p>with a characteristic length scale `x`, a characteristic velocity `u` and the kinematic shear viscosity `nu`. Larger length scale, larger velocity or smaller viscosity all mean larger Reynolds number.\n- The Reynolds number is a unit-less number. A low value <i>Re</i> < 2300 means laminar flow, a high value <i>Re</i> > 2900 means turbulent flow. In between is a transitional regime.\n- For very large Reynolds number <i>Re</i> > 100000, the LBM solver becomes [unstable](#7-suitable-parameters-and-simulation-instability), as tiny, very fast rotating vortices can be present in the flow field, and too fast velocity and shear rate makes the simulation blow up.\n- To tackle this problem, there is subgrid models that model vortices smaller than single grid cells. This works by increasing the effective vscosity where the shear rate is large and lots of small eddies are assumed to be present. Coincidentally, locations of high shear rate and low viscosity cause instability, so increasing effective viscosity there keeps the simulation stable.\n- The subgrid model in FLuidX3D is the Smagorinsky-Lilly model. You can enable it with the [`SUBGRID`](src/defines.hpp) extension.\n- There is no additional performance cost for this extension.\n\n### [`PARTICLES`](src/defines.hpp) Extension\n- By default, the LBM is a grid-based simulation, so there are no particles.\n- But the [`PARTICLES`](src/defines.hpp) extension allows to add particles to the simulation, either as passive tracers or as 2-way-coupled particles that can do floating/sedimentation.\n- For passive tracers, only enable the [`PARTICLES`](src/defines.hpp) extension, and in the [LBM constructor](#the-lbm-class) simply add the particle count:\n  ```c\n  LBM lbm(Nx, Ny, Nz, nu, 50000u); // this will create 50000 particles\n  ```\n- Then, in [initialization](#initial-and-boundary-conditions), make a loop over all particles (outside of the initialization loop that iterates over all grid cells):\n  ```c\n  uint seed = 42u;\n  for(ulong n=0ull; n<lbm.particles->length(); n++) {\n  \tlbm.particles->x[n] = random_symmetric(seed, 0.5f*lbm.size().x); // this will palce the particles randomly anywhere in the simulation box\n  \tlbm.particles->y[n] = random_symmetric(seed, 0.5f*lbm.size().y);\n  \tlbm.particles->z[n] = random_symmetric(seed, 0.5f*lbm.size().z);\n  }\n  ```\n- Note that the position (`0`|`0`|`0`) for particles corresponds to the simulation box center.\n- For 2-way-coupled particles, additionally enable the [`VOLUME_FORCE`](src/defines.hpp) and [`FORCE_FIELD`](src/defines.hpp) extensions, and in the [LBM constructor](#the-lbm-class) add the particle density ([in LBM units](#unit-conversion)) unequal to `1`:\n  ```c\n  LBM lbm(Nx, Ny, Nz, nu, 50000u, 1.2f); // this will create 50000 particles that are more dense than the fluid and will sink to the bottom\n  ```\n\n<br>\n\n## 7. Suitable Parameters and Simulation Instability\n- Sometimes in the velocity field or streamlines visualization, you will see fuzzyness, or something that looks like a rapidly growing white crystal, blowing up from a certain point and filling the entire simulation box. This is instability, i.e. when velocities turn `NaN` or `Inf`.\n- Often times, the cause of instability is an unfortunate choice of unsuitable parameters:\n  - too high/low density `rho` (ideally should be very close to `1` at all times)\n  - too high velocity `u` (must never exceed `0.57` anywhere in the box, ideally should be somewhere around `0.075`, but can be as small as `0.001`)\n  - too low kinematic shear viscosity `nu` (ideally close to `1/6`, becomes unstable when it's very very close to `0` (then enable the [`SUBGRID`](src/defines.hpp) extension), and should not exceed `3`)\n  - too high force per volume (`fx`|`fy`|`fz`) (should not exceed `0.001` in magnitude)\n  - too high surface tension coefficient `sigma` (should not exceed `0.1`)\n- The best parametrization for LBM simulations is an art in itself and needs some practice."
        },
        {
          "name": "FluidX3D.sln",
          "type": "blob",
          "size": 0.8818359375,
          "content": "﻿\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio Version 16\r\nVisualStudioVersion = 16.0.31729.503\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"FluidX3D\", \"FluidX3D.vcxproj\", \"{0ED9A517-40B5-43E1-95F5-A78F6D72B1E5}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tRelease|x64 = Release|x64\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{0ED9A517-40B5-43E1-95F5-A78F6D72B1E5}.Release|x64.ActiveCfg = Release|x64\r\n\t\t{0ED9A517-40B5-43E1-95F5-A78F6D72B1E5}.Release|x64.Build.0 = Release|x64\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {290665AA-63A3-4947-AAB0-553598640211}\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "FluidX3D.vcxproj",
          "type": "blob",
          "size": 4.318359375,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <ItemGroup Label=\"ProjectConfigurations\">\r\n    <ProjectConfiguration Include=\"Release|x64\">\r\n      <Configuration>Release</Configuration>\r\n      <Platform>x64</Platform>\r\n    </ProjectConfiguration>\r\n  </ItemGroup>\r\n  <PropertyGroup Label=\"Globals\">\r\n    <VCProjectVersion>15.0</VCProjectVersion>\r\n    <ProjectGuid>{0ED9A517-40B5-43E1-95F5-A78F6D72B1E5}</ProjectGuid>\r\n    <RootNamespace>FluidX3D</RootNamespace>\r\n    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>\r\n  </PropertyGroup>\r\n  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\r\n    <ConfigurationType>Application</ConfigurationType>\r\n    <UseDebugLibraries>false</UseDebugLibraries>\r\n    <PlatformToolset>v142</PlatformToolset>\r\n    <WholeProgramOptimization>true</WholeProgramOptimization>\r\n    <CharacterSet>MultiByte</CharacterSet>\r\n  </PropertyGroup>\r\n  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\r\n  <ImportGroup Label=\"ExtensionSettings\">\r\n  </ImportGroup>\r\n  <ImportGroup Label=\"Shared\">\r\n  </ImportGroup>\r\n  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\r\n    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\r\n  </ImportGroup>\r\n  <PropertyGroup Label=\"UserMacros\" />\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\r\n    <OutDir>$(SolutionDir)bin\\</OutDir>\r\n    <IntDir>$(SolutionDir)temp\\</IntDir>\r\n  </PropertyGroup>\r\n  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\r\n    <ClCompile>\r\n      <WarningLevel>Level3</WarningLevel>\r\n      <Optimization>MaxSpeed</Optimization>\r\n      <FunctionLevelLinking>true</FunctionLevelLinking>\r\n      <IntrinsicFunctions>true</IntrinsicFunctions>\r\n      <SDLCheck>true</SDLCheck>\r\n      <ConformanceMode>true</ConformanceMode>\r\n      <AdditionalIncludeDirectories>$(SolutionDir)src\\OpenCL\\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\r\n      <MultiProcessorCompilation>true</MultiProcessorCompilation>\r\n      <FavorSizeOrSpeed>Speed</FavorSizeOrSpeed>\r\n      <EnableParallelCodeGeneration>true</EnableParallelCodeGeneration>\r\n      <FloatingPointModel>Fast</FloatingPointModel>\r\n      <LanguageStandard>stdcpp17</LanguageStandard>\r\n      <DisableSpecificWarnings>26451;6386;%(DisableSpecificWarnings)</DisableSpecificWarnings>\r\n    </ClCompile>\r\n    <Link>\r\n      <SubSystem>Console</SubSystem>\r\n      <EnableCOMDATFolding>true</EnableCOMDATFolding>\r\n      <OptimizeReferences>true</OptimizeReferences>\r\n      <AdditionalLibraryDirectories>$(SolutionDir)src\\OpenCL\\lib</AdditionalLibraryDirectories>\r\n      <AdditionalDependencies>OpenCL.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\r\n    </Link>\r\n  </ItemDefinitionGroup>\r\n  <ItemGroup>\r\n    <ClCompile Include=\"src\\graphics.cpp\" />\r\n    <ClCompile Include=\"src\\info.cpp\" />\r\n    <ClCompile Include=\"src\\kernel.cpp\" />\r\n    <ClCompile Include=\"src\\lbm.cpp\" />\r\n    <ClCompile Include=\"src\\lodepng.cpp\" />\r\n    <ClCompile Include=\"src\\main.cpp\" />\r\n    <ClCompile Include=\"src\\setup.cpp\" />\r\n    <ClCompile Include=\"src\\shapes.cpp\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <ClInclude Include=\"src\\defines.hpp\" />\r\n    <ClInclude Include=\"src\\graphics.hpp\" />\r\n    <ClInclude Include=\"src\\info.hpp\" />\r\n    <ClInclude Include=\"src\\kernel.hpp\" />\r\n    <ClInclude Include=\"src\\lbm.hpp\" />\r\n    <ClInclude Include=\"src\\lodepng.hpp\" />\r\n    <ClInclude Include=\"src\\opencl.hpp\" />\r\n    <ClInclude Include=\"src\\setup.hpp\" />\r\n    <ClInclude Include=\"src\\shapes.hpp\" />\r\n    <ClInclude Include=\"src\\units.hpp\" />\r\n    <ClInclude Include=\"src\\utilities.hpp\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <ResourceCompile Include=\"src\\resource.rc\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Image Include=\"src\\icon.ico\" />\r\n  </ItemGroup>\r\n  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\r\n  <ImportGroup Label=\"ExtensionTargets\">\r\n  </ImportGroup>\r\n</Project>"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 2.841796875,
          "content": "Copyright (c) 2022-2024 Dr. Moritz Lehmann\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files, to use this software for public research, education or personal use, and to alter it and redistribute it freely, subject to the following restrictions:\n\n1. The [origin of this software](https://github.com/ProjectPhysX/FluidX3D) must not be misrepresented; you must not claim that you wrote the original software. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.\n2. Commercial use is not allowed. You may not sell this software, altered source versions, any part thereof or any of the rights granted to you under the license. You may not provide to third parties, for a fee or other consideration (including without limitation fees for hosting or consulting/support services related to the software), a product or service whose value derives from the functionality of this software, altered source versions or any part thereof, unless explicit permission is granted to you by the copyright owner.\n3. Military use is not allowed. You may not use this software, altered source versions or any part thereof for military research or any military or defense industry purposes, or within a military institution.\n4. You may not train AI models on the source code of this software, altered source versions or any part thereof.\n5. If binaries of altered source versions or data or results generated by altered source versions are published, the altered source code must be published as well.\n6. If scientific publications arise from this software or altered source versions, the articles [listed here](https://github.com/ProjectPhysX/FluidX3D#references) should be cited.\n7. This license notice may not be removed or altered from any source distribution.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nGerman [Act on Copyright and Related Rights](https://www.gesetze-im-internet.de/englisch_urhg/englisch_urhg.html) (Urheberrechtsgesetz - UrhG) - Copyright Act of 9 September 1965 (Federal Law Gazette I, p. 1273), as last amended by Article 25 of the Act of 23 June 2021 (Federal Law Gazette I, p. 1858) - applies, in particular also [§ 97 (2) UrhG](https://www.gesetze-im-internet.de/englisch_urhg/englisch_urhg.html#p0881). The name \"FluidX3D\" is protected by German Werktitelschutz, [§ 5 (3) MarkenG](https://www.gesetze-im-internet.de/markeng/__5.html)."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 118.2490234375,
          "content": "# FluidX3D\n\nThe fastest and most memory efficient lattice Boltzmann CFD software, running on all GPUs and CPUs via [OpenCL](https://github.com/ProjectPhysX/OpenCL-Wrapper \"OpenCL-Wrapper\"). Free for non-commercial use.\n\n<a href=\"https://youtu.be/-MkRBeQkLk8\"><img src=\"https://img.youtube.com/vi/o3TPN142HxM/maxresdefault.jpg\" width=\"50%\"></img></a><a href=\"https://youtu.be/oC6U1M0Fsug\"><img src=\"https://img.youtube.com/vi/oC6U1M0Fsug/maxresdefault.jpg\" width=\"50%\"></img></a><br>\n<a href=\"https://youtu.be/XOfXHgP4jnQ\"><img src=\"https://img.youtube.com/vi/XOfXHgP4jnQ/maxresdefault.jpg\" width=\"50%\"></img></a><a href=\"https://youtu.be/K5eKxzklXDA\"><img src=\"https://img.youtube.com/vi/K5eKxzklXDA/maxresdefault.jpg\" width=\"50%\"></img></a>\n(click on images to show videos on YouTube)\n\n<details><summary>Update History</summary>\n\n- [v1.0](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v1.0) (04.08.2022) [changes](https://github.com/ProjectPhysX/FluidX3D/commit/768073501af725e392a4b85885009e2fa6400e48) (public release)\n  - public release\n- [v1.1](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v1.1) (29.09.2022) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v1.0...v1.1) (GPU voxelization)\n  - added solid voxelization on GPU (slow algorithm)\n  - added tool to print current camera position (key <kbd>G</kbd>)\n  - minor bug fix (workaround for Intel iGPU driver bug with triangle rendering)\n- [v1.2](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v1.2) (24.10.2022) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v1.1...v1.2) (force/torque compuatation)\n  - added functions to compute force/torque on objects\n  - added function to translate Mesh\n  - added Stokes drag validation setup\n- [v1.3](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v1.3) (10.11.2022) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v1.2...v1.3) (minor bug fixes)\n  - added unit conversion functions for torque\n  - `FORCE_FIELD` and `VOLUME_FORCE` can now be used independently\n  - minor bug fix (workaround for AMD legacy driver bug with binary number literals)\n- [v1.4](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v1.4) (14.12.2022) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v1.3...v1.4) (Linux graphics)\n  - complete rewrite of C++ graphics library to minimize API dependencies\n  - added interactive graphics mode on Linux with X11\n  - fixed streamline visualization bug in 2D\n- [v2.0](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v2.0) (09.01.2023) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v1.4...v2.0) (multi-GPU upgrade)\n  - added (cross-vendor) multi-GPU support on a single node (PC/laptop/server)\n- [v2.1](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v2.1) (15.01.2023) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v2.0...v2.1) (fast voxelization)\n  - made solid voxelization on GPU lightning fast (new algorithm, from minutes to milliseconds)\n- [v2.2](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v2.0) (20.01.2023) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v2.1...v2.2) (velocity voxelization)\n  - added option to voxelize moving/rotating geometry on GPU, with automatic velocity initialization for each grid point based on center of rotation, linear velocity and rotational velocity\n  - cells that are converted from solid->fluid during re-voxelization now have their DDFs properly initialized\n  - added option to not auto-scale mesh during `read_stl(...)`, with negative `size` parameter\n  - added kernel for solid boundary rendering with marching-cubes\n- [v2.3](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v2.3) (30.01.2023) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v2.2...v2.3) (particles)\n  - added particles with immersed-boundary method (either passive or 2-way-coupled, only supported with single-GPU)\n  - minor optimization to GPU voxelization algorithm (workgroup threads outside mesh bounding-box return after ray-mesh intersections have been found)\n  - displayed GPU memory allocation size is now fully accurate\n  - fixed bug in `write_line()` function in `src/utilities.hpp`\n  - removed `.exe` file extension for Linux/macOS\n- [v2.4](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v2.4) (11.03.2023) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v2.3...v2.4) (UI improvements)\n  - added a help menu with key <kbd>H</kbd> that shows keyboard/mouse controls, visualization settings and simulation stats\n  - improvements to keyboard/mouse control (<kbd>+</kbd>/<kbd>-</kbd> for zoom, <kbd>mouseclick</kbd> frees/locks cursor)\n  - added suggestion of largest possible grid resolution if resolution is set larger than memory allows\n  - minor optimizations in multi-GPU communication (insignificant performance difference)\n  - fixed bug in temperature equilibrium function for temperature extension\n  - fixed erroneous double literal for Intel iGPUs in skybox color functions\n  - fixed bug in make.sh where multi-GPU device IDs would not get forwarded to the executable\n  - minor bug fixes in graphics engine (free cursor not centered during rotation, labels in VR mode)\n  - fixed bug in `LBM::voxelize_stl()` size parameter standard initialization\n- [v2.5](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v2.5) (11.04.2023) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v2.4...v2.5) (raytracing overhaul)\n  - implemented light absorption in fluid for raytracing graphics (no performance impact)\n  - improved raytracing framerate when camera is inside fluid\n  - fixed skybox pole flickering artifacts\n  - fixed bug where moving objects during re-voxelization would leave an erroneous trail of solid grid cells behind\n- [v2.6](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v2.6) (16.04.2023) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v2.5...v2.6) (Intel Arc patch)\n  - patched OpenCL issues of Intel Arc GPUs: now VRAM allocations >4GB are possible and correct VRAM capacity is reported\n- [v2.7](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v2.7) (29.05.2023) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v2.6...v2.7) (visualization upgrade)\n  - added slice visualization (key <kbd>2</kbd> / key <kbd>3</kbd> modes, then switch through slice modes with key <kbd>T</kbd>, move slice with keys <kbd>Q</kbd>/<kbd>E</kbd>)\n  - made flag wireframe / solid surface visualization kernels toggleable with key <kbd>1</kbd>\n  - added surface pressure visualization (key <kbd>1</kbd> when `FORCE_FIELD` is enabled and `lbm.calculate_force_on_boundaries();` is called)\n  - added binary `.vtk` export function for meshes with `lbm.write_mesh_to_vtk(Mesh* mesh);`\n  - added `time_step_multiplicator` for `integrate_particles()` function in PARTICLES extension\n  - made correction of wrong memory reporting on Intel Arc more robust\n  - fixed bug in `write_file()` template functions\n  - reverted back to separate `cl::Context` for each OpenCL device, as the shared Context otherwise would allocate extra VRAM on all other unused Nvidia GPUs\n  - removed Debug and x86 configurations from Visual Studio solution file (one less complication for compiling)\n  - fixed bug that particles could get too close to walls and get stuck, or leave the fluid phase (added boundary force)\n- [v2.8](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v2.8) (24.06.2023) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v2.7...v2.8) (documentation + polish)\n  - finally added more [documentation](DOCUMENTATION.md)\n  - cleaned up all sample setups in `setup.cpp` for more beginner-friendliness, and added required extensions in `defines.hpp` as comments to all setups\n  - improved loading of composite `.stl` geometries, by adding an option to omit automatic mesh repositioning, added more functionality to `Mesh` struct in `utilities.hpp`\n  - added `uint3 resolution(float3 box_aspect_ratio, uint memory)` function to compute simulation box resolution based on box aspect ratio and VRAM occupation in MB\n  - added `bool lbm.graphics.next_frame(...)` function to export images for a specified video length in the `main_setup` compute loop\n  - added `VIS_...` macros to ease setting visualization modes in headless graphics mode in `lbm.graphics.visualization_modes`\n  - simulation box dimensions are now automatically made equally divisible by domains for multi-GPU simulations\n  - fixed Info/Warning/Error message formatting for loading files and made Info/Warning/Error message labels colored\n  - added Ahmed body setup as an example on how body forces and drag coefficient are computed\n  - added Cessna 172 and Bell 222 setups to showcase loading composite .stl geometries and revoxelization of moving parts\n  - added optional semi-transparent rendering mode (`#define GRAPHICS_TRANSPARENCY 0.7f` in `defines.hpp`)\n  - fixed flickering of streamline visualization in interactive graphics\n  - improved smooth positioning of streamlines in slice mode\n  - fixed bug where `mass` and `massex` in `SURFACE` extension were also allocated in CPU RAM (not required)\n  - fixed bug in Q-criterion rendering of halo data in multi-GPU mode, reduced gap width between domains\n  - removed shared memory optimization from mesh voxelization kernel, as it crashes on Nvidia GPUs with new GPU drivers and is incompatible with old OpenCL 1.0 GPUs\n  - fixed raytracing attenuation color when no surface is at the simulation box walls with periodic boundaries\n- [v2.9](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v2.9) (31.07.2023) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v2.8...v2.9) (multithreading)\n  - added cross-platform `parallel_for` implementation in `utilities.hpp` using `std::threads`\n  - significantly (>4x) faster simulation startup with multithreaded geometry initialization and sanity checks\n  - faster `calculate_force_on_object()` and `calculate_torque_on_object()` functions with multithreading\n  - added total runtime and LBM runtime to `lbm.write_status()`\n  - fixed bug in voxelization ray direction for re-voxelizing rotating objects\n  - fixed bug in `Mesh::get_bounding_box_size()`\n  - fixed bug in `print_message()` function in `utilities.hpp`\n- [v2.10](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v2.10) (05.11.2023) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v2.9...v2.10) (frustrum culling)\n  - improved rasterization performance via frustrum culling when only part of the simulation box is visible\n  - improved switching between centered/free camera mode\n  - refactored OpenCL rendering library\n  - unit conversion factors are now automatically printed in console when `units.set_m_kg_s(...)` is used\n  - faster startup time for FluidX3D benchmark\n  - miner bug fix in `voxelize_mesh(...)` kernel\n  - fixed bug in `shading(...)`\n  - replaced slow (in multithreading) `std::rand()` function with standard C99 LCG\n  - more robust correction of wrong VRAM capacity reporting on Intel Arc GPUs\n  - fixed some minor compiler warnings\n- [v2.11](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v2.11) (07.12.2023) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v2.10...v2.11) (improved Linux graphics)\n  - interactive graphics on Linux are now in fullscreen mode too, fully matching Windows\n  - made CPU/GPU buffer initialization significantly faster with `std::fill` and `enqueueFillBuffer` (overall ~8% faster simulation startup)\n  - added operating system info to OpenCL device driver version printout\n  - fixed flickering with frustrum culling at very small field of view\n  - fixed bug where rendered/exported frame was not updated when `visualization_modes` changed\n- [v2.12](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v2.12) (18.01.2024) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v2.11...v2.12) (faster startup)\n  - ~3x faster source code compiling on Linux using multiple CPU cores if [`make`](https://www.gnu.org/software/make/) is installed\n  - significantly faster simulation initialization (~40% single-GPU, ~15% multi-GPU)\n  - minor bug fix in `Memory_Container::reset()` function\n- [v2.13](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v2.13) (11.02.2024) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v2.12...v2.13) (improved .vtk export)\n  - data in exported `.vtk` files is now automatically converted to SI units\n  - ~2x faster `.vtk` export with multithreading\n  - added unit conversion functions for `TEMPERATURE` extension\n  - fixed graphical artifacts with axis-aligned camera in raytracing\n  - fixed `get_exe_path()` for macOS\n  - fixed X11 multi-monitor issues on Linux\n  - workaround for Nvidia driver bug: `enqueueFillBuffer` is broken for large buffers on Nvidia GPUs\n  - fixed slow numeric drift issues caused by `-cl-fast-relaxed-math`\n  - fixed wrong Maximum Allocation Size reporting in `LBM::write_status()`\n  - fixed missing scaling of coordinates to SI units in `LBM::write_mesh_to_vtk()`\n- [v2.14](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v2.14) (03.03.2024) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v2.13...v2.14) (visualization upgrade)\n  - coloring can now be switched between velocity/density/temperature with key <kbd>Z</kbd>\n  - uniform improved color palettes for velocity/density/temperature visualization\n  - color scale with automatic unit conversion can now be shown with key <kbd>H</kbd>\n  - slice mode for field visualization now draws fully filled-in slices instead of only lines for velocity vectors\n  - shading in `VIS_FLAG_SURFACE` and `VIS_PHI_RASTERIZE` modes is smoother now\n  - `make.sh` now automatically detects operating system and X11 support on Linux and only runs FluidX3D if last compilation was successful\n  - fixed compiler warnings on Android\n  - fixed `make.sh` failing on some systems due to nonstandard interpreter path\n  - fixed that `make` would not compile with multiple cores on some systems\n- [v2.15](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v2.15) (09.04.2024) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v2.14...v2.15) (framerate boost)\n  - eliminated one frame memory copy and one clear frame operation in rendering chain, for 20-70% higher framerate on both Windows and Linux\n  - enabled `g++` compiler optimizations for faster startup and higher rendering framerate\n  - fixed bug in multithreaded sanity checks\n  - fixed wrong unit conversion for thermal expansion coefficient\n  - fixed density to pressure conversion in LBM units\n  - fixed bug that raytracing kernel could lock up simulation\n  - fixed minor visual artifacts with raytracing\n  - fixed that console sometimes was not cleared before `INTERACTIVE_GRAPHICS_ASCII` rendering starts\n- [v2.16](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v2.16) (02.05.2024) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v2.15...v2.16) (bug fixes)\n  - simplified 10% faster marching-cubes implementation with 1D interpolation on edges instead of 3D interpolation, allowing to get rid of edge table\n  - added faster, simplified marching-cubes variant for solid surface rendering where edges are always halfway between grid cells\n  - refactoring in OpenCL rendering kernels\n  - fixed that voxelization failed in Intel OpenCL CPU Runtime due to array out-of-bounds access\n  - fixed that voxelization did not always produce binary identical results in multi-GPU compared to single-GPU\n  - fixed that velocity voxelization failed for free surface simulations\n  - fixed terrible performance on ARM GPUs by macro-replacing fused-multiply-add (`fma`) with `a*b+c`\n  - fixed that <kbd>Y</kbd>/<kbd>Z</kbd> keys were incorrect for `QWERTY` keyboard layout in Linux\n  - fixed that free camera movement speed in help overlay was not updated in stationary image when scrolling\n  - fixed that cursor would sometimes flicker when scrolling on trackpads with Linux-X11 interactive graphics\n  - fixed flickering of interactive rendering with multi-GPU when camera is not moved\n  - fixed missing `XInitThreads()` call that could crash Linux interactive graphics on some systems\n  - fixed z-fighting between `graphics_rasterize_phi()` and `graphics_flags_mc()` kernels\n- [v2.17](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v2.17) (05.06.2024) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v2.16...v2.17) (unlimited domain resolution)\n  - domains are no longer limited to 4.29 billion (2³², 1624³) grid cells or 225 GB memory; if more are used, the OpenCL code will automatically compile with 64-bit indexing\n  - new, faster raytracing-based field visualization for single-GPU simulations\n  - added [GPU Driver and OpenCL Runtime installation instructions](DOCUMENTATION.md#0-install-gpu-drivers-and-opencl-runtime) to documentation\n  - refactored `INTERACTIVE_GRAPHICS_ASCII`\n  - fixed memory leak in destructors of `floatN`, `floatNxN`, `doubleN`, `doubleNxN` (all unused)\n  - made camera movement/rotation/zoom behavior independent of framerate\n  - fixed that `smart_device_selection()` would print a wrong warning if device reports 0 MHz clock speed\n- [v2.18](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v2.18) (21.07.2024) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v2.17...v2.18) (more bug fixes)\n  - added support for high refresh rate monitors on Linux\n  - more compact OpenCL Runtime installation scripts in Documentation\n  - driver/runtime installation instructions will now be printed to console if no OpenCL devices are available\n  - added domain information to `LBM::write_status()`\n  - added `LBM::index` function for `uint3` input parameter\n  - fixed that very large simulations sometimes wouldn't render properly by increasing maximum render distance from 10k to 2.1M\n  - fixed mouse input stuttering at high screen refresh rate on Linux\n  - fixed graphical artifacts in free surface raytracing on Intel CPU Runtime for OpenCL\n  - fixed runtime estimation printed in console for setups with multiple `lbm.run(...)` calls\n  - fixed density oscillations in sample setups (too large `lbm_u`)\n  - fixed minor graphical artifacts in `raytrace_phi()`\n  - fixed minor graphical artifacts in `ray_grid_traverse_sum()`\n  - fixed wrong printed time step count on raindrop sample setup\n- [v2.19](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v2.19) (07.09.2024) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v2.18...v2.19) (camera splines)\n  - the camera can now fly along a smooth path through a list of provided keyframe camera placements, [using Catmull-Rom splines](https://github.com/ProjectPhysX/FluidX3D/blob/master/DOCUMENTATION.md#video-rendering)\n  - more accurate remaining runtime estimation that includes time spent on rendering\n  - enabled FP16S memory compression by default\n  - printed camera placement using key <kbd>G</kbd> is now formatted for easier copy/paste\n  - added benchmark chart in Readme using mermaid gantt chart\n  - placed memory allocation info during simulation startup at better location\n  - fixed threading conflict between `INTERACTIVE_GRAPHICS` and `lbm.graphics.write_frame();`\n  - fixed maximum buffer allocation size limit for AMD GPUs and in Intel CPU Runtime for OpenCL\n  - fixed wrong `Re<Re_max` info printout for 2D simulations\n  - minor fix in `bandwidth_bytes_per_cell_device()`\n- [v3.0](https://github.com/ProjectPhysX/FluidX3D/releases/tag/v3.0) (16.11.2024) [changes](https://github.com/ProjectPhysX/FluidX3D/compare/v2.19...v3.0) (larger CPU/iGPU simulations)\n  - reduced memory footprint on CPUs and iGPU from 72 to 55 Bytes/cell (fused OpenCL host+device buffers for `rho`/`u`/`flags`), allowing 31% higher resolution in the same RAM capacity\n  - faster hardware-supported and faster fallback emulation atomic floating-point addition for `PARTICLES` extension\n  - hardened `calculate_f_eq()` against bad user input for `D2Q9`\n  - fixed velocity voxelization for overlapping geometry with different velocity\n  - fixed Remaining Time printout during paused simulation\n  - fixed CPU/GPU memory printout for CPU/iGPU simulations\n\n</details>\n\n\n\n## How to get started?\n\nRead the [FluidX3D Documentation](DOCUMENTATION.md)!\n\n\n\n## Compute Features - Getting the Memory Problem under Control\n\n- <details><summary><a name=\"cfd-model\"></a>CFD model: lattice Boltzmann method (LBM)</summary>\n\n  - streaming (part 2/2)<p align=\"center\"><i>f</i><sub>0</sub><sup>temp</sup>(<i>x</i>,<i>t</i>) = <i>f</i><sub>0</sub>(<i>x</i>, <i>t</i>)<br><i>f<sub>i</sub></i><sup>temp</sup>(<i>x</i>,<i>t</i>) = <i>f</i><sub>(<i>t</i>%2 ? <i>i</i> : (<i>i</i>%2 ? <i>i</i>+1 : <i>i</i>-1))</sub>(<i>i</i>%2 ? <i>x</i> : <i>x</i>-<i>e<sub>i</sub></i>, <i>t</i>) &nbsp; for &nbsp; <i>i</i> &isin; [1, <i>q</i>-1]</p>\n  - collision<p align=\"center\"><i>&rho;</i>(<i>x</i>,<i>t</i>) = (&Sigma;<sub><i>i</i></sub> <i>f<sub>i</sub></i><sup>temp</sup>(<i>x</i>,<i>t</i>)) + 1<br><br><i>u</i>(<i>x</i>,<i>t</i>) = <sup>1</sup>&#8725;<sub><i>&rho;</i>(<i>x</i>,<i>t</i>)</sub> &Sigma;<sub><i>i</i></sub> <i>c<sub>i</sub></i> <i>f<sub>i</sub></i><sup>temp</sup>(<i>x</i>,<i>t</i>)<br><br><i>f<sub>i</sub></i><sup>eq-shifted</sup>(<i>x</i>,<i>t</i>) = <i>w<sub>i</sub></i> <i>&rho;</i> · (<sup>(<i>u</i><sub>°</sub><i>c<sub>i</sub></i>)<sup>2</sup></sup>&#8725;<sub>(2<i>c</i><sup>4</sup>)</sub> - <sup>(<i>u</i><sub>°</sub><i>u</i>)</sup>&#8725;<sub>(2c<sup>2</sup>)</sub> + <sup>(<i>u</i><sub>°</sub><i>c<sub>i</sub></i>)</sup>&#8725;<sub><i>c</i><sup>2</sup></sub>) + <i>w<sub>i</sub></i> (<i>&rho;</i>-1)<br><br><i>f<sub>i</sub></i><sup>temp</sup>(<i>x</i>, <i>t</i>+&Delta;<i>t</i>) = <i>f<sub>i</sub></i><sup>temp</sup>(<i>x</i>,<i>t</i>) + <i>&Omega;<sub>i</sub></i>(<i>f<sub>i</sub></i><sup>temp</sup>(<i>x</i>,<i>t</i>), <i>f<sub>i</sub></i><sup>eq-shifted</sup>(<i>x</i>,<i>t</i>), <i>&tau;</i>)</p>\n  - streaming (part 1/2)<p align=\"center\"><i>f</i><sub>0</sub>(<i>x</i>, <i>t</i>+&Delta;<i>t</i>) = <i>f</i><sub>0</sub><sup>temp</sup>(<i>x</i>, <i>t</i>+&Delta;<i>t</i>)<br><i>f</i><sub>(<i>t</i>%2 ? (<i>i</i>%2 ? <i>i</i>+1 : <i>i</i>-1) : <i>i</i>)</sub>(<i>i</i>%2 ? <i>x</i>+<i>e<sub>i</sub></i> : <i>x</i>, <i>t</i>+&Delta;<i>t</i>) = <i>f<sub>i</sub></i><sup>temp</sup>(<i>x</i>, <i>t</i>+&Delta;<i>t</i>) &nbsp; for &nbsp; <i>i</i> &isin; [1, <i>q</i>-1]</p>\n  - <details><summary>variables and <a href=\"https://doi.org/10.15495/EPub_UBT_00005400\">notation</a></summary>\n\n    | variable             | SI units                            | defining equation                                   | description                                                                     |\n    | :------------------: | :---------------------------------: | :-------------------------------------------------: | :------------------------------------------------------------------------------ |\n    |                      |                                     |                                                     |                                                                                 |\n    | <i>x</i>             | m                                   | <i>x</i> = (x,y,z)<sup>T</sup>                      | 3D position in Cartesian coordinates                                            |\n    | <i>t</i>             | s                                   | -                                                   | time                                                                            |\n    | <i>&rho;</i>         | <sup>kg</sup>&#8725;<sub>m³</sub>   | <i>&rho;</i> = (&Sigma;<sub><i>i</i></sub> <i>f<sub>i</sub></i>)+1 | mass density of fluid                                            |\n    | <i>p</i>             | <sup>kg</sup>&#8725;<sub>m&nbsp;s²</sub> | <i>p</i> = <i>c</i>² <i>&rho;</i>              | pressure of fluid                                                               |\n    | <i>u</i> | <sup>m</sup>&#8725;<sub>s</sub> | <i>u</i> = <sup>1</sup>&#8725;<sub><i>&rho;</i></sub> &Sigma;<sub><i>i</i></sub> <i>c<sub>i</sub></i> <i>f<sub>i</sub></i> | velocity of fluid        |\n    | <i>&nu;</i>          | <sup>m²</sup>&#8725;<sub>s</sub>    | <i>&nu;</i> = <sup><i>&mu;</i></sup>&#8725;<sub><i>&rho;</i></sub> | kinematic shear viscosity of fluid                               |\n    | <i>&mu;</i>          | <sup>kg</sup>&#8725;<sub>m&nbsp;s</sub> | <i>&mu;</i> = <i>&rho;</i> <i>&nu;</i>          | dynamic viscosity of fluid                                                      |\n    |                      |                                     |                                                     |                                                                                 |\n    | <i>f<sub>i</sub></i> | <sup>kg</sup>&#8725;<sub>m³</sub>   | -                                                   | shifted density distribution functions (DDFs)                                   |\n    | &Delta;<i>x</i>      | m                                   | &Delta;<i>x</i> = 1                                 | lattice constant (in LBM units)                                                 |\n    | &Delta;<i>t</i>      | s                                   | &Delta;<i>t</i> = 1                                 | simulation time step (in LBM units)                                             |\n    | <i>c</i> | <sup>m</sup>&#8725;<sub>s</sub> | <i>c</i> = <sup>1</sup>&#8725;<sub>&radic;3</sub> <sup>&Delta;<i>x</i></sup>&#8725;<sub>&Delta;<i>t</i></sub> | lattice speed of sound (in LBM units) |\n    | <i>i</i>             | 1                                   | 0 &le; <i>i</i> < <i>q</i>                          | LBM streaming direction index                                                   |\n    | <i>q</i>             | 1                                   | <i>q</i> &isin; {&nbsp;9,15,19,27&nbsp;}            | number of LBM streaming directions                                              |\n    | <i>e<sub>i</sub></i> | m                                   | D2Q9 / D3Q15/19/27                                  | LBM streaming directions                                                        |\n    | <i>c<sub>i</sub></i> | <sup>m</sup>&#8725;<sub>s</sub>     | <i>c<sub>i</sub></i> = <sup><i>e<sub>i</sub></i></sup>&#8725;<sub>&Delta;<i>t</i></sub> | LBM streaming velocities                    |\n    | <i>w<sub>i</sub></i> | 1                                   | &Sigma;<sub><i>i</i></sub> <i>w<sub>i</sub></i> = 1 | LBM velocity set weights                                                        |\n    | <i>&Omega;<sub>i</sub></i> | <sup>kg</sup>&#8725;<sub>m³</sub> | SRT or TRT                                      | LBM collision operator                                                          |\n    | <i>&tau;</i>         | s                                  | <i>&tau;</i> = <sup><i>&nu;</i></sup>&#8725;<sub><i>c</i>²</sub> + <sup>&Delta;<i>t</i></sup>&#8725;<sub>2</sub> | LBM relaxation time |\n\n    </details>\n  - velocity sets: D2Q9, D3Q15, D3Q19 (default), D3Q27\n  - collision operators: single-relaxation-time (SRT/BGK) (default), two-relaxation-time (TRT)\n  - [DDF-shifting](https://www.researchgate.net/publication/362275548_Accuracy_and_performance_of_the_lattice_Boltzmann_method_with_64-bit_32-bit_and_customized_16-bit_number_formats) and other algebraic optimization to minimize round-off error\n\n  </details>\n\n<!-- markdown equations don't render properly in mobile browser\n  - streaming (part 2/2):\n$$j=0\\\\ \\textrm{for}\\\\ i=0$$\n$$j=t\\\\%2\\\\ ?\\\\ i\\\\ :\\\\ (i\\\\%2\\\\ ?\\\\ i+1\\\\ :\\\\ i-1)\\\\ \\textrm{for}\\\\ i\\in[1,q-1]$$\n$$f_i^\\textrm{temp}(\\vec{x},t)=f_j(i\\\\%2\\\\ ?\\\\ \\vec{x}\\\\ :\\\\ \\vec{x}-\\vec{e}_i,\\\\ t)$$\n  - collision:\n$$\\rho(\\vec{x},t)=\\left(\\sum_i f_i^\\textrm{temp}(\\vec{x},t)\\right)+1$$\n$$\\vec{u}(\\vec{x},t)=\\frac{1}{\\rho(\\vec{x},t)}\\sum_i\\vec{c}_i f_i^\\textrm{temp}(\\vec{x},t)$$\n$$f_i^\\textrm{eq-shifted}(\\vec{x},t)=w_i \\rho \\cdot\\left(\\frac{(\\vec{u} _{^{^\\circ}}\\vec{c}_i)^2}{2 c^4}-\\frac{\\vec{u} _{^{^\\circ}}\\vec{u}}{2 c^2}+\\frac{\\vec{u} _{^{^\\circ}}\\vec{c}_i}{c^2}\\right)+w_i (\\rho-1)$$\n$$f_i^\\textrm{temp}(\\vec{x},\\\\ t+\\Delta t)=f_i^\\textrm{temp}(\\vec{x},t)+\\Omega_i(f_i^\\textrm{temp}(\\vec{x},t),\\\\ f_i^\\textrm{eq-shifted}(\\vec{x},t),\\\\ \\tau)$$\n  - streaming (part 1/2):\n$$j=0\\\\ \\textrm{for}\\\\ i=0$$\n$$j=t\\\\%2\\\\ ?\\\\ (i\\\\%2\\\\ ?\\\\ i+1\\\\ :\\\\ i-1)\\\\ :\\\\ i\\\\ \\textrm{for}\\\\ i\\in[1,q-1]$$\n$$f_j(i\\\\%2\\\\ ?\\\\ \\vec{x}+\\vec{e}_i\\\\ :\\\\ \\vec{x},\\\\ t+\\Delta t)=f_i^\\textrm{temp}(\\vec{x},\\\\ t+\\Delta t)$$\n -->\n\n- <details><summary><a name=\"vram-footprint\"></a>optimized to minimize VRAM footprint to 1/6 of other LBM codes</summary>\n\n  - traditional LBM (D3Q19) with FP64 requires ~344 Bytes/cell<br>\n    - 🟧🟧🟧🟧🟧🟧🟧🟧🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟨🟨🟨🟨🟨🟨🟨🟨🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥<br>(density 🟧, velocity 🟦, flags 🟨, 2 copies of DDFs 🟩/🟥; each square = 1 Byte)\n    - allows for 3 Million cells per 1 GB VRAM\n  - FluidX3D (D3Q19) requires only 55 Bytes/cell with [Esoteric-Pull](https://doi.org/10.3390/computation10060092)+[FP16](https://www.researchgate.net/publication/362275548_Accuracy_and_performance_of_the_lattice_Boltzmann_method_with_64-bit_32-bit_and_customized_16-bit_number_formats)<br>\n    - 🟧🟧🟧🟧🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟨🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩<br>(density 🟧, velocity 🟦, flags 🟨, DDFs 🟩; each square = 1 Byte)\n    - allows for 19 Million cells per 1 GB VRAM\n    - in-place streaming with [Esoteric-Pull](https://doi.org/10.3390/computation10060092): eliminates redundant copy of density distribution functions (DDFs) in memory; almost cuts memory demand in half and slightly increases performance due to implicit bounce-back boundaries; offers optimal memory access patterns for single-cell in-place streaming\n    - [decoupled arithmetic precision (FP32) and memory precision (FP32 or FP16S or FP16C)](https://www.researchgate.net/publication/362275548_Accuracy_and_performance_of_the_lattice_Boltzmann_method_with_64-bit_32-bit_and_customized_16-bit_number_formats): all arithmetic is done in FP32 for compatibility on all hardware, but DDFs in memory can be compressed to FP16S or FP16C: almost cuts memory demand in half again and almost doubles performance, without impacting overall accuracy for most setups\n    - <details><summary>only 8 flag bits per lattice point (can be used independently / at the same time)</summary>\n\n      - `TYPE_S` (stationary or moving) solid boundaries\n      - `TYPE_E` equilibrium boundaries (inflow/outflow)\n      - `TYPE_T` temperature boundaries\n      - `TYPE_F` free surface (fluid)\n      - `TYPE_I` free surface (interface)\n      - `TYPE_G` free surface (gas)\n      - `TYPE_X` remaining for custom use or further extensions\n      - `TYPE_Y` remaining for custom use or further extensions\n\n      </details>\n  - large cost saving: comparison of maximum single-GPU grid resolution for D3Q19 LBM\n\n    | GPU&nbsp;VRAM&nbsp;capacity      | 1&nbsp;GB | 2&nbsp;GB | 3&nbsp;GB | 4&nbsp;GB | 6&nbsp;GB | 8&nbsp;GB | 10&nbsp;GB | 11&nbsp;GB | 12&nbsp;GB | 16&nbsp;GB | 20&nbsp;GB | 24&nbsp;GB | 32&nbsp;GB | 40&nbsp;GB | 48&nbsp;GB | 64&nbsp;GB | 80&nbsp;GB | 94&nbsp;GB | 128&nbsp;GB | 192&nbsp;GB | 256&nbsp;GB |\n    | :------------------------------- | --------: | --------: | --------: | --------: | --------: | --------: | ---------: | ---------: | ---------: | ---------: | ---------: | ---------: | ---------: | ---------: | ---------: | ---------: | ---------: | ---------: | ----------: | ----------: | ----------: |\n    | approximate&nbsp;GPU&nbsp;price  | $25<br>GT&nbsp;210 | $25<br>GTX&nbsp;950 | $12<br>GTX&nbsp;1060 | $50<br>GT&nbsp;730 | $35<br>GTX&nbsp;1060 | $70<br>RX&nbsp;470 | $500<br>RTX&nbsp;3080 | $240<br>GTX&nbsp;1080&nbsp;Ti | $75<br>Tesla&nbsp;M40 | $75<br>Instinct&nbsp;MI25 | $900<br>RX&nbsp;7900&nbsp;XT | $205<br>Tesla&nbsp;P40 | $600<br>Instinct&nbsp;MI60 | $5500<br>A100 | $2400<br>RTX&nbsp;8000 | $10k<br>Instinct&nbsp;MI210 | $11k<br>A100 | >$40k<br>H100&nbsp;NVL | ?<br>GPU&nbsp;Max&nbsp;1550 | ~$10k<br>MI300X | - |\n    | traditional&nbsp;LBM&nbsp;(FP64) |      144³ |      182³ |      208³ |      230³ |      262³ |      288³ |       312³ |       322³ |       330³ |       364³ |       392³ |       418³ |       460³ |       494³ |       526³ |       578³ |       624³ |       658³ |        730³ |        836³ |        920³ |\n    | FluidX3D&nbsp;(FP32/FP32)        |      224³ |      282³ |      322³ |      354³ |      406³ |      448³ |       482³ |       498³ |       512³ |       564³ |       608³ |       646³ |       710³ |       766³ |       814³ |       896³ |       966³ |      1018³ |       1130³ |       1292³ |       1422³ |\n    | FluidX3D&nbsp;(FP32/FP16)        |      266³ |      336³ |      384³ |      424³ |      484³ |      534³ |       574³ |       594³ |       610³ |       672³ |       724³ |       770³ |       848³ |       912³ |       970³ |      1068³ |      1150³ |      1214³ |       1346³ |       1540³ |       1624³ |\n\n  </details>\n- <details><summary><a name=\"multi-gpu\"></a>cross-vendor multi-GPU support on a single computer/server</summary>\n\n  - domain decomposition allows pooling VRAM from multiple GPUs for much larger grid resolution\n  - GPUs don't have to be identical (<a href=\"https://youtu.be/PscbxGVs52o\">not even from the same vendor</a>), but similar VRAM capacity/bandwidth is recommended\n  - domain communication architecture (simplified)\n    ```diff\n    ++   .-----------------------------------------------------------------.   ++\n    ++   |                              GPU 0                              |   ++\n    ++   |                          LBM Domain 0                           |   ++\n    ++   '-----------------------------------------------------------------'   ++\n    ++              |                 selective                /|\\             ++\n    ++             \\|/               in-VRAM copy               |              ++\n    ++        .-------------------------------------------------------.        ++\n    ++        |               GPU 0 - Transfer Buffer 0               |        ++\n    ++        '-------------------------------------------------------'        ++\n    !!                            |     PCIe     /|\\                           !!\n    !!                           \\|/    copy      |                            !!\n    @@        .-------------------------.   .-------------------------.        @@\n    @@        | CPU - Transfer Buffer 0 |   | CPU - Transfer Buffer 1 |        @@\n    @@        '-------------------------'\\ /'-------------------------'        @@\n    @@                           pointer  X   swap                             @@\n    @@        .-------------------------./ \\.-------------------------.        @@\n    @@        | CPU - Transfer Buffer 1 |   | CPU - Transfer Buffer 0 |        @@\n    @@        '-------------------------'   '-------------------------'        @@\n    !!                           /|\\    PCIe      |                            !!\n    !!                            |     copy     \\|/                           !!\n    ++        .-------------------------------------------------------.        ++\n    ++        |               GPU 1 - Transfer Buffer 1               |        ++\n    ++        '-------------------------------------------------------'        ++\n    ++             /|\\                selective                 |              ++\n    ++              |                in-VRAM copy              \\|/             ++\n    ++   .-----------------------------------------------------------------.   ++\n    ++   |                              GPU 1                              |   ++\n    ++   |                          LBM Domain 1                           |   ++\n    ++   '-----------------------------------------------------------------'   ++\n    ##                                    |                                    ##\n    ##                      domain synchronization barrier                     ##\n    ##                                    |                                    ##\n    ||   -------------------------------------------------------------> time   ||\n    ```\n  - domain communication architecture (detailed)\n    ```diff\n    ++   .-----------------------------------------------------------------.   ++\n    ++   |                              GPU 0                              |   ++\n    ++   |                          LBM Domain 0                           |   ++\n    ++   '-----------------------------------------------------------------'   ++\n    ++     |  selective in- /|\\  |  selective in- /|\\  |  selective in- /|\\    ++\n    ++    \\|/ VRAM copy (X)  |  \\|/ VRAM copy (Y)  |  \\|/ VRAM copy (Z)  |     ++\n    ++   .---------------------.---------------------.---------------------.   ++\n    ++   |    GPU 0 - TB 0X+   |    GPU 0 - TB 0Y+   |    GPU 0 - TB 0Z+   |   ++\n    ++   |    GPU 0 - TB 0X-   |    GPU 0 - TB 0Y-   |    GPU 0 - TB 0Z-   |   ++\n    ++   '---------------------'---------------------'---------------------'   ++\n    !!          | PCIe /|\\            | PCIe /|\\            | PCIe /|\\         !!\n    !!         \\|/ copy |            \\|/ copy |            \\|/ copy |          !!\n    @@   .---------. .---------.---------. .---------.---------. .---------.   @@\n    @@   | CPU 0X+ | | CPU 1X- | CPU 0Y+ | | CPU 3Y- | CPU 0Z+ | | CPU 5Z- |   @@\n    @@   | CPU 0X- | | CPU 2X+ | CPU 0Y- | | CPU 4Y+ | CPU 0Z- | | CPU 6Z+ |   @@\n    @@   '---------\\ /---------'---------\\ /---------'---------\\ /---------'   @@\n    @@      pointer X swap (X)    pointer X swap (Y)    pointer X swap (Z)     @@\n    @@   .---------/ \\---------.---------/ \\---------.---------/ \\---------.   @@\n    @@   | CPU 1X- | | CPU 0X+ | CPU 3Y- | | CPU 0Y+ | CPU 5Z- | | CPU 0Z+ |   @@\n    @@   | CPU 2X+ | | CPU 0X- | CPU 4Y+ | | CPU 0Y- | CPU 6Z+ | | CPU 0Z- |   @@\n    @@   '---------' '---------'---------' '---------'---------' '---------'   @@\n    !!         /|\\ PCIe |            /|\\ PCIe |            /|\\ PCIe |          !!\n    !!          | copy \\|/            | copy \\|/            | copy \\|/         !!\n    ++   .--------------------..---------------------..--------------------.   ++\n    ++   |   GPU 1 - TB 1X-   ||    GPU 3 - TB 3Y-   ||   GPU 5 - TB 5Z-   |   ++\n    ++   :====================::=====================::====================:   ++\n    ++   |   GPU 2 - TB 2X+   ||    GPU 4 - TB 4Y+   ||   GPU 6 - TB 6Z+   |   ++\n    ++   '--------------------''---------------------''--------------------'   ++\n    ++    /|\\ selective in-  |  /|\\ selective in-  |  /|\\ selective in-  |     ++\n    ++     |  VRAM copy (X) \\|/  |  VRAM copy (Y) \\|/  |  VRAM copy (Z) \\|/    ++\n    ++   .--------------------..---------------------..--------------------.   ++\n    ++   |        GPU 1       ||        GPU 3        ||        GPU 5       |   ++\n    ++   |    LBM Domain 1    ||    LBM Domain 3     ||    LBM Domain 5    |   ++\n    ++   :====================::=====================::====================:   ++\n    ++   |        GPU 2       ||        GPU 4        ||        GPU 6       |   ++\n    ++   |    LBM Domain 2    ||    LBM Domain 4     ||    LBM Domain 6    |   ++\n    ++   '--------------------''---------------------''--------------------'   ++\n    ##              |                     |                     |              ##\n    ##              |      domain synchronization barriers      |              ##\n    ##              |                     |                     |              ##\n    ||   -------------------------------------------------------------> time   ||\n    ```\n\n  </details>\n- <details><summary><a name=\"performance\"></a>peak performance on GPUs (datacenter/gaming/professional/laptop)</summary>\n\n  - [single-GPU/CPU benchmarks](#single-gpucpu-benchmarks)\n  - [multi-GPU benchmarks](#multi-gpu-benchmarks)\n\n  </details>\n- <details><summary><a name=\"extensions\"></a>powerful model extensions</summary>\n\n  - [boundary types](https://doi.org/10.15495/EPub_UBT_00005400)\n    - stationary mid-grid bounce-back boundaries (stationary solid boundaries)\n    - moving mid-grid bounce-back boundaries (moving solid boundaries)\n    - equilibrium boundaries (non-reflective inflow/outflow)\n    - temperature boundaries (fixed temperature)\n  - global force per volume (Guo forcing), can be modified on-the-fly\n  - local force per volume (force field)\n    - optional computation of forces from the fluid on solid boundaries\n  - state-of-the-art [free surface LBM](https://doi.org/10.3390/computation10060092) (FSLBM) implementation:\n    - [volume-of-fluid model](https://doi.org/10.15495/EPub_UBT_00005400)\n    - [fully analytic PLIC](https://doi.org/10.3390/computation10020021) for efficient curvature calculation\n    - improved mass conservation\n    - ultra efficient implementation with only [4 kernels](https://doi.org/10.3390/computation10060092) additionally to `stream_collide()` kernel\n  - thermal LBM to simulate thermal convection\n    - D3Q7 subgrid for thermal DDFs\n    - in-place streaming with [Esoteric-Pull](https://doi.org/10.3390/computation10060092) for thermal DDFs\n    - optional [FP16S or FP16C compression](https://www.researchgate.net/publication/362275548_Accuracy_and_performance_of_the_lattice_Boltzmann_method_with_64-bit_32-bit_and_customized_16-bit_number_formats) for thermal DDFs with [DDF-shifting](https://www.researchgate.net/publication/362275548_Accuracy_and_performance_of_the_lattice_Boltzmann_method_with_64-bit_32-bit_and_customized_16-bit_number_formats)\n  - Smagorinsky-Lilly subgrid turbulence LES model to keep simulations with very large Reynolds number stable\n    <p align=\"center\"><i>&Pi;<sub>&alpha;&beta;</sub></i> = &Sigma;<sub><i>i</i></sub> <i>e<sub>i&alpha;</sub></i> <i>e<sub>i&beta;</sub></i> (<i>f<sub>i</sub></i>   - <i>f<sub>i</sub></i><sup>eq-shifted</sup>)<br><br>Q = &Sigma;<sub><i>&alpha;&beta;</i></sub>   <i>&Pi;<sub>&alpha;&beta;</sub></i><sup>2</sup><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;______________________<br>&tau; = &frac12; (&tau;<sub>0</sub> + &radic; &tau;<sub>0</sub><sup>2</sup> + <sup>(16&radic;2)</sup>&#8725;<sub>(<i>3&pi;</i><sup>2</sup>)</sub> <sup>&radic;Q</sup>&#8725;<sub><i>&rho;</i></sub> )</p>\n  - particles with immersed-boundary method (either passive or 2-way-coupled, single-GPU only)\n\n  </details>\n\n\n\n## Solving the Visualization Problem\n\n- FluidX3D can do simulations so large that storing the volumetric data for later rendering becomes unmanageable (like 120GB for a single frame, hundreds of TeraByte for a video)\n- instead, FluidX3D allows [rendering raw simulation data directly in VRAM](https://www.researchgate.net/publication/360501260_Combined_scientific_CFD_simulation_and_interactive_raytracing_with_OpenCL), so no large volumetric files have to be exported to the hard disk (see my [technical talk](https://youtu.be/pD8JWAZ2f8o))\n- the rendering is so fast that it works interactively in real time for both rasterization and raytracing\n- rasterization and raytracing are done in OpenCL and work on all GPUs, even the ones without RTX/DXR raytracing cores or without any rendering hardware at all (like A100, MI200, ...)\n- if no monitor is available (like on a remote Linux server), there is an [ASCII rendering mode](https://youtu.be/pD8JWAZ2f8o&t=1456) to interactively visualize the simulation in the terminal (even in WSL and/or through SSH)\n- rendering is fully multi-GPU-parallelized via seamless domain decomposition rasterization\n- with interactive graphics mode disabled, image resolution can be as large as VRAM allows for (4K/8K/16K and above)\n- (interacitive) visualization modes:\n  - flag wireframe / solid surface (and force vectors on solid cells or surface pressure if the extension is used)\n  - velocity field (with slice mode)\n  - streamlines (with slice mode)\n  - velocity-colored Q-criterion isosurface\n  - rasterized free surface with [marching-cubes](http://paulbourke.net/geometry/polygonise/)\n  - [raytraced free surface](https://www.researchgate.net/publication/360501260_Combined_scientific_CFD_simulation_and_interactive_raytracing_with_OpenCL) with fast ray-grid traversal and marching-cubes, either 1-4 rays/pixel or 1-10 rays/pixel\n\n\n\n## Solving the Compatibility Problem\n\n- FluidX3D is written in OpenCL 1.2, so it runs on all hardware from all vendors (Nvidia, AMD, Intel, ...):\n  - world's fastest datacenter GPUs: MI300X, H100 (NVL), A100, MI200, MI100, V100(S), GPU Max 1100, ...\n  - gaming GPUs (desktop/laptop): Nvidia GeForce, AMD Radeon, Intel Arc\n  - professional/workstation GPUs: Nvidia Quadro, AMD Radeon Pro / FirePro, Intel Arc Pro\n  - integrated GPUs\n  - CPUs (requires [installation of Intel CPU Runtime for OpenCL](DOCUMENTATION.md#0-install-gpu-drivers-and-opencl-runtime))\n  - Intel Xeon Phi (requires [installation of Intel CPU Runtime for OpenCL](DOCUMENTATION.md#0-install-gpu-drivers-and-opencl-runtime))\n  - smartphone ARM GPUs\n- native cross-vendor multi-GPU implementation\n  - uses PCIe communication, so no SLI/Crossfire/NVLink/InfinityFabric required\n  - single-node parallelization, so no MPI installation required\n  - [GPUs don't even have to be from the same vendor](https://youtu.be/PscbxGVs52o), but similar memory capacity and bandwidth are recommended\n- works on [Windows](DOCUMENTATION.md#windows) and [Linux](DOCUMENTATION.md#linux--macos--android) with C++17, with limited support also for [macOS](DOCUMENTATION.md#linux--macos--android) and [Android](DOCUMENTATION.md#linux--macos--android)\n- supports [importing and voxelizing triangle meshes](DOCUMENTATION.md#loading-stl-files) from binary `.stl` files, with fast GPU voxelization\n- supports [exporting volumetric data](DOCUMENTATION.md#data-export) as binary `.vtk` files\n- supports [exporting triangle meshes](DOCUMENTATION.md#data-export) as binary `.vtk` files\n- supports [exporting rendered images](DOCUMENTATION.md#video-rendering) as `.png`/`.qoi`/`.bmp` files; encoding runs in parallel on the CPU while the simulation on GPU can continue without delay\n\n\n\n## Single-GPU/CPU Benchmarks\n\nHere are [performance benchmarks](https://doi.org/10.3390/computation10060092) on various hardware in MLUPs/s, or how many million lattice cells are updated per second. The settings used for the benchmark are D3Q19 SRT with no extensions enabled (only LBM with implicit mid-grid bounce-back boundaries) and the setup consists of an empty cubic box with sufficient size (typically 256³). Without extensions, a single lattice cell requires:\n- a memory capacity of 93 (FP32/FP32) or 55 (FP32/FP16) Bytes\n- a memory bandwidth of 153 (FP32/FP32) or 77 (FP32/FP16) Bytes per time step\n- 363 (FP32/FP32) or 406 (FP32/FP16S) or 1275 (FP32/FP16C) FLOPs per time step (FP32+INT32 operations counted combined)\n\nIn consequence, the arithmetic intensity of this implementation is 2.37 (FP32/FP32) or 5.27 (FP32/FP16S) or 16.56 (FP32/FP16C) FLOPs/Byte. So performance is only limited by memory bandwidth. The table in the left 3 columns shows the hardware specs as found in the data sheets (theoretical peak FP32 compute performance, memory capacity, theoretical peak memory bandwidth). The right 3 columns show the measured FluidX3D performance for FP32/FP32, FP32/FP16S, FP32/FP16C floating-point precision settings, with the ([roofline model](https://en.wikipedia.org/wiki/Roofline_model) efficiency) in round brackets, indicating how much % of theoretical peak memory bandwidth are being used.\n\nIf your GPU/CPU is not on the list yet, you can report your benchmarks [here](https://github.com/ProjectPhysX/FluidX3D/issues/8).\n\n```mermaid\ngantt\n\ntitle FluidX3D Performance [MLUPs/s] - FP32 arithmetic, (fastest of FP32/FP16S/FP16C) memory storage\ndateFormat X\naxisFormat %s\n%%{\n\tinit: {\n\t\t'theme': 'forest',\n\t\t'themeVariables': {\n\t\t\t'sectionBkgColor': '#99999999',\n\t\t\t'sectionBkgColor2': '#99999999',\n\t\t\t'altSectionBkgColor': '#00000000',\n\t\t\t'titleColor': '#7F7F7F',\n\t\t\t'textColor': '#7F7F7F',\n\t\t\t'taskTextColor': 'lightgray',\n\t\t\t'taskBorderColor': '#487E3A'\n\t\t}\n\t}\n}%%\n\nsection MI300X\n\t38207 :crit, 0, 38207\nsection MI250 (1 GCD)\n\t9030 :crit, 0, 9030\nsection MI210\n\t9547 :crit, 0, 9547\nsection MI100\n\t8542 :crit, 0, 8542\nsection MI60\n\t5111 :crit, 0, 5111\nsection Radeon VII\n\t7778 :crit, 0, 7778\nsection GPU Max 1100\n\t6209 :done, 0, 6209\nsection GH200 94GB GPU\n\t34689 : 0, 34689\nsection H100 NVL\n\t32613 : 0, 32613\nsection H100 PCIe\n\t20624 : 0, 20624\nsection A100 SXM4 80GB\n\t18448 : 0, 18448\nsection PG506-242/243\n\t15654 : 0, 15654\nsection A100 PCIe 80GB\n\t17896 : 0, 17896\nsection A100 SXM4 40GB\n\t16013 : 0, 16013\nsection A100 PCIe 40GB\n\t16035 : 0, 16035\nsection CMP 170HX\n\t12392 : 0, 12392\nsection A30\n\t9721 : 0, 9721\nsection V100 SXM2 32GB\n\t8947 : 0, 8947\nsection V100 PCIe 16GB\n\t10325 : 0, 10325\nsection GV100\n\t6641 : 0, 6641\nsection Titan V\n\t7253 : 0, 7253\nsection P100 PCIe 16GB\n\t5950 : 0, 5950\nsection P100 PCIe 12GB\n\t4141 : 0, 4141\nsection GTX TITAN\n\t2500 : 0, 2500\nsection K40m\n\t1868 : 0, 1868\nsection K80 (1 GPU)\n\t1642 : 0, 1642\nsection K20c\n\t1507 : 0, 1507\nsection RX 7900 XTX\n\t7716 :crit, 0, 7716\nsection PRO W7900\n\t5939 :crit, 0, 5939\nsection RX 7900 XT\n\t5986 :crit, 0, 5986\nsection PRO W7800\n\t4426 :crit, 0, 4426\nsection RX 7900 GRE\n\t4570 :crit, 0, 4570\nsection PRO W7700\n\t2943 :crit, 0, 2943\nsection RX 7600\n\t2561 :crit, 0, 2561\nsection PRO W7600\n\t2287 :crit, 0, 2287\nsection PRO W7500\n\t1682 :crit, 0, 1682\nsection RX 6900 XT\n\t4227 :crit, 0, 4227\nsection RX 6800 XT\n\t4241 :crit, 0, 4241\nsection PRO W6800\n\t3361 :crit, 0, 3361\nsection RX 6700 XT\n\t2908 :crit, 0, 2908\nsection RX 6800M\n\t3213 :crit, 0, 3213\nsection RX 6700M\n\t2429 :crit, 0, 2429\nsection RX 6600\n\t1839 :crit, 0, 1839\nsection RX 6500 XT\n\t1030 :crit, 0, 1030\nsection RX 5700 XT\n\t3253 :crit, 0, 3253\nsection RX 5700\n\t3167 :crit, 0, 3167\nsection RX 5600 XT\n\t2214 :crit, 0, 2214\nsection RX Vega 64\n\t3227 :crit, 0, 3227\nsection RX 590\n\t1688 :crit, 0, 1688\nsection RX 580 4GB\n\t1848 :crit, 0, 1848\nsection RX 580 2048SP 8GB\n\t1622 :crit, 0, 1622\nsection R9 390X\n\t2217 :crit, 0, 2217\nsection HD 7850\n\t635 :crit, 0, 635\nsection Arc B580 LE\n\t5370 :done, 0, 5370\nsection Arc A770 LE\n\t4568 :done, 0, 4568\nsection Arc A750 LE\n\t4314 :done, 0, 4314\nsection Arc A580\n\t3889 :done, 0, 3889\nsection Arc A380\n\t1115 :done, 0, 1115\nsection RTX 4090\n\t11496 : 0, 11496\nsection RTX 6000 Ada\n\t10293 : 0, 10293\nsection L40S\n\t7637 : 0, 7637\nsection RTX 4080 Super\n\t8218 : 0, 8218\nsection RTX 4080\n\t7933 : 0, 7933\nsection RTX 4070 Ti Super\n\t7295 : 0, 7295\nsection RTX 4070\n\t5016 : 0, 5016\nsection RTX 4080M\n\t5114 : 0, 5114\nsection RTX 4000 Ada\n\t4221 : 0, 4221\nsection RTX 4060\n\t3124 : 0, 3124\nsection RTX 4070M\n\t3092 : 0, 3092\nsection RTX 2000 Ada\n\t2526 : 0, 2526\nsection RTX 3090 Ti\n\t10956 : 0, 10956\nsection RTX 3090\n\t10732 : 0, 10732\nsection RTX 3080 Ti\n\t9832 : 0, 9832\nsection RTX 3080 12GB\n\t9657 : 0, 9657\nsection RTX A6000\n\t8814 : 0, 8814\nsection RTX 3080 10GB\n\t8118 : 0, 8118\nsection RTX 3080M Ti\n\t5908 : 0, 5908\nsection RTX 3070\n\t5096 : 0, 5096\nsection RTX 3060 Ti\n\t5129 : 0, 5129\nsection RTX A4000\n\t4945 : 0, 4945\nsection RTX A5000M\n\t4461 : 0, 4461\nsection RTX 3060\n\t4070 : 0, 4070\nsection RTX 3060M\n\t4012 : 0, 4012\nsection RTX 3050M Ti\n\t2341 : 0, 2341\nsection RTX 3050M\n\t2339 : 0, 2339\nsection Titan RTX\n\t7554 : 0, 7554\nsection RTX 6000\n\t6879 : 0, 6879\nsection RTX 8000 Passive\n\t5607 : 0, 5607\nsection RTX 2080 Ti\n\t6853 : 0, 6853\nsection RTX 2080 Super\n\t5284 : 0, 5284\nsection RTX 5000\n\t4773 : 0, 4773\nsection RTX 2070 Super\n\t4893 : 0, 4893\nsection RTX 2060 Super\n\t5035 : 0, 5035\nsection RTX 4000\n\t4584 : 0, 4584\nsection RTX 2060 KO\n\t3376 : 0, 3376\nsection RTX 2060\n\t3604 : 0, 3604\nsection GTX 1660 Super\n\t3551 : 0, 3551\nsection T4\n\t2887 : 0, 2887\nsection GTX 1660 Ti\n\t3041 : 0, 3041\nsection GTX 1660\n\t1992 : 0, 1992\nsection GTX 1650M 896C\n\t1858 : 0, 1858\nsection GTX 1650M 1024C\n\t1400 : 0, 1400\nsection T500\n\t665 : 0, 665\nsection Titan Xp\n\t5495 : 0, 5495\nsection GTX 1080 Ti\n\t4877 : 0, 4877\nsection GTX 1080\n\t3182 : 0, 3182\nsection GTX 1060 6GB\n\t1925 : 0, 1925\nsection GTX 1060M\n\t1882 : 0, 1882\nsection GTX 1050M Ti\n\t1224 : 0, 1224\nsection P1000\n\t839 : 0, 839\nsection GTX 970\n\t1721 : 0, 1721\nsection M4000\n\t1519 : 0, 1519\nsection M60 (1 GPU)\n\t1571 : 0, 1571\nsection GTX 960M\n\t872 : 0, 872\nsection GTX 770\n\t1215 : 0, 1215\nsection GTX 680 4GB\n\t1274 : 0, 1274\nsection K2000\n\t444 : 0, 444\nsection GT 630 (OEM)\n\t185 : 0, 185\nsection NVS 290\n\t9 : 0, 9\nsection Arise 1020\n\t6 :active, 0, 6\nsection M2 Max (38-CU, 32GB)\n\t4641 :done, 0, 4641\nsection M1 Ultra (64-CU, 128GB)\n\t8418 :done, 0, 8418\nsection M1 Max (24-CU, 32GB)\n\t4496 :done, 0, 4496\nsection M1 Pro (16-CU, 16GB)\n\t2329 :done, 0, 2329\nsection M1 (8-CU, 16GB)\n\t759 :done, 0, 759\nsection Radeon Graphics (7800X3D)\n\t498 :crit, 0, 498\nsection 780M (Z1 Extreme)\n\t860 :crit, 0, 860\nsection Vega 8 (4750G)\n\t511 :crit, 0, 511\nsection Vega 8 (3500U)\n\t288 :crit, 0, 288\nsection Arc 140V GPU (16GB)\n\t1282 :done, 0, 1282\nsection Arc Graphics (Ultra 9 185H)\n\t724 :done, 0, 724\nsection Iris Xe Graphics (i7-1265U)\n\t621 :done, 0, 621\nsection UHD Xe 32EUs\n\t245 :done, 0, 245\nsection UHD 770\n\t475 :done, 0, 475\nsection UHD 630\n\t301 :done, 0, 301\nsection UHD P630\n\t288 :done, 0, 288\nsection HD 5500\n\t192 :done, 0, 192\nsection HD 4600\n\t115 :done, 0, 115\nsection Orange Pi 5 Mali-G610 MP4\n\t232 :active, 0, 232\nsection Samsung Mali-G72 MP18 (S9+)\n\t230 :active, 0, 230\nsection 2x EPYC 9754\n\t5179 :crit, 0, 5179\nsection 2x EPYC 9654\n\t1814 :crit, 0, 1814\nsection 2x EPYC 7352\n\t739 :crit, 0, 739\nsection 2x EPYC 7313\n\t498 :crit, 0, 498\nsection 2x EPYC 7302\n\t784 :crit, 0, 784\nsection 2x 6980P\n\t7875 :done, 0, 7875\nsection 2x 6979P\n\t8135 :done, 0, 8135\nsection 2x Platinum 8592+\n\t3135 :done, 0, 3135\nsection 2x CPU Max 9480\n\t2037 :done, 0, 2037\nsection 2x Platinum 8480+\n\t2162 :done, 0, 2162\nsection 2x Platinum 8380\n\t1410 :done, 0, 1410\nsection 2x Platinum 8358\n\t1285 :done, 0, 1285\nsection 2x Platinum 8256\n\t396 :done, 0, 396\nsection 2x Platinum 8153\n\t691 :done, 0, 691\nsection 2x Gold 6248R\n\t755 :done, 0, 755\nsection 2x Gold 6128\n\t254 :done, 0, 254\nsection Phi 7210\n\t415 :done, 0, 415\nsection 4x E5-4620 v4\n\t460 :done, 0, 460\nsection 2x E5-2630 v4\n\t264 :done, 0, 264\nsection 2x E5-2623 v4\n\t125 :done, 0, 125\nsection 2x E5-2680 v3\n\t304 :done, 0, 304\nsection GH200 Neoverse-V2\n\t1323 : 0, 1323\nsection TR PRO 7995WX\n\t1715 :crit, 0, 1715\nsection TR 3970X\n\t463 :crit, 0, 463\nsection TR 1950X\n\t273 :crit, 0, 273\nsection Ryzen 7800X3D\n\t363 :crit, 0, 363\nsection Ryzen 5700X3D\n\t229 :crit, 0, 229\nsection FX-6100\n\t22 :crit, 0, 22\nsection Athlon X2 QL-65\n\t3 :crit, 0, 3\nsection Ultra 7 258V\n\t287 :done, 0, 287\nsection Ultra 9 185H\n\t317 :done, 0, 317\nsection i9-14900K\n\t490 :done, 0, 490\nsection i7-13700K\n\t504 :done, 0, 504\nsection i7-1265U\n\t128 :done, 0, 128\nsection i9-11900KB\n\t208 :done, 0, 208\nsection i9-10980XE\n\t286 :done, 0, 286\nsection E-2288G\n\t198 :done, 0, 198\nsection i7-9700\n\t103 :done, 0, 103\nsection i5-9600\n\t147 :done, 0, 147\nsection i7-8700K\n\t152 :done, 0, 152\nsection E-2176G\n\t201 :done, 0, 201\nsection i7-7700HQ\n\t108 :done, 0, 108\nsection E3-1240 v5\n\t141 :done, 0, 141\nsection i5-5300U\n\t37 :done, 0, 37\nsection i7-4770\n\t104 :done, 0, 104\nsection i7-4720HQ\n\t80 :done, 0, 80\nsection N2807\n\t7 :done, 0, 7\n```\n\n<details><summary>Single-GPU/CPU Benchmark Table</summary>\n\nColors: 🔴 AMD, 🔵 Intel, 🟢 Nvidia, ⚪ Apple, 🟡 ARM, 🟤 Glenfly\n\n| Device                                           | FP32<br>[TFlops/s] | Mem<br>[GB] | BW<br>[GB/s] | FP32/FP32<br>[MLUPs/s] | FP32/FP16S<br>[MLUPs/s] | FP32/FP16C<br>[MLUPs/s] |\n| :----------------------------------------------- | -----------------: | ----------: | -----------: | ---------------------: | ----------------------: | ----------------------: |\n|                                                  |                    |             |              |                        |                         |                         |\n| 🔴&nbsp;Instinct&nbsp;MI300X                     |             163.40 |         192 |         5300 |       20711&nbsp;(60%) |        38207&nbsp;(56%) |        31169&nbsp;(45%) |\n| 🔴&nbsp;Instinct&nbsp;MI250&nbsp;(1&nbsp;GCD)    |              45.26 |          64 |         1638 |             5638 (53%) |              9030 (42%) |              8506 (40%) |\n| 🔴&nbsp;Instinct&nbsp;MI210                      |              45.26 |          64 |         1638 |             6517 (61%) |              9547 (45%) |              8829 (41%) |\n| 🔴&nbsp;Instinct&nbsp;MI100                      |              46.14 |          32 |         1228 |             5093 (63%) |              8133 (51%) |              8542 (54%) |\n| 🔴&nbsp;Instinct&nbsp;MI60                       |              14.75 |          32 |         1024 |             3570 (53%) |              5047 (38%) |              5111 (38%) |\n| 🔴&nbsp;Radeon&nbsp;VII                          |              13.83 |          16 |         1024 |             4898 (73%) |              7778 (58%) |              5256 (40%) |\n| 🔵&nbsp;Data&nbsp;Center&nbsp;GPU&nbsp;Max&nbsp;1100 |          22.22 |          48 |         1229 |             3487 (43%) |              6209 (39%) |              3252 (20%) |\n| 🟢&nbsp;GH200&nbsp;94GB&nbsp;GPU                 |              66.91 |          94 |         4000 |       20595&nbsp;(79%) |        34689&nbsp;(67%) |        19407&nbsp;(37%) |\n| 🟢&nbsp;H100&nbsp;NVL                            |              60.32 |          94 |         3938 |       20018&nbsp;(78%) |        32613&nbsp;(64%) |        17605&nbsp;(34%) |\n| 🟢&nbsp;H100&nbsp;PCIe                           |              51.01 |          80 |         2000 |       11128&nbsp;(85%) |        20624&nbsp;(79%) |        13862&nbsp;(53%) |\n| 🟢&nbsp;A100&nbsp;SXM4&nbsp;80GB                 |              19.49 |          80 |         2039 |       10228&nbsp;(77%) |        18448&nbsp;(70%) |        11197&nbsp;(42%) |\n| 🟢&nbsp;A100&nbsp;PCIe&nbsp;80GB                 |              19.49 |          80 |         1935 |             9657 (76%) |        17896&nbsp;(71%) |        10817&nbsp;(43%) |\n| 🟢&nbsp;PG506-243&nbsp;/&nbsp;PG506-242          |              22.14 |          64 |         1638 |             8195 (77%) |        15654&nbsp;(74%) |        12271&nbsp;(58%) |\n| 🟢&nbsp;A100&nbsp;SXM4&nbsp;40GB                 |              19.49 |          40 |         1555 |             8522 (84%) |        16013&nbsp;(79%) |        11251&nbsp;(56%) |\n| 🟢&nbsp;A100&nbsp;PCIe&nbsp;40GB                 |              19.49 |          40 |         1555 |             8526 (84%) |        16035&nbsp;(79%) |        11088&nbsp;(55%) |\n| 🟢&nbsp;CMP&nbsp;170HX                           |               6.32 |           8 |         1493 |             7684 (79%) |        12392&nbsp;(64%) |              6859 (35%) |\n| 🟢&nbsp;A30                                      |              10.32 |          24 |          933 |             5004 (82%) |              9721 (80%) |              5726 (47%) |\n| 🟢&nbsp;Tesla&nbsp;V100&nbsp;SXM2&nbsp;32GB      |              15.67 |          32 |          900 |             4471 (76%) |              8947 (77%) |              7217 (62%) |\n| 🟢&nbsp;Tesla&nbsp;V100&nbsp;PCIe&nbsp;16GB      |              14.13 |          16 |          900 |             5128 (87%) |        10325&nbsp;(88%) |              7683 (66%) |\n| 🟢&nbsp;Quadro&nbsp;GV100                        |              16.66 |          32 |          870 |             3442 (61%) |              6641 (59%) |              5863 (52%) |\n| 🟢&nbsp;Titan&nbsp;V                             |              14.90 |          12 |          653 |             3601 (84%) |              7253 (86%) |              6957 (82%) |\n| 🟢&nbsp;Tesla&nbsp;P100&nbsp;16GB                |               9.52 |          16 |          732 |             3295 (69%) |              5950 (63%) |              4176 (44%) |\n| 🟢&nbsp;Tesla&nbsp;P100&nbsp;12GB                |               9.52 |          12 |          549 |             2427 (68%) |              4141 (58%) |              3999 (56%) |\n| 🟢&nbsp;GeForce&nbsp;GTX&nbsp;TITAN              |               4.71 |           6 |          288 |             1460 (77%) |              2500 (67%) |              1113 (30%) |\n| 🟢&nbsp;Tesla&nbsp;K40m                          |               4.29 |          12 |          288 |             1131 (60%) |              1868 (50%) |               912 (24%) |\n| 🟢&nbsp;Tesla&nbsp;K80&nbsp;(1&nbsp;GPU)         |               4.11 |          12 |          240 |              916 (58%) |              1642 (53%) |               943 (30%) |\n| 🟢&nbsp;Tesla&nbsp;K20c                          |               3.52 |           5 |          208 |              861 (63%) |              1507 (56%) |               720 (27%) |\n|                                                  |                    |             |              |                        |                         |                         |\n| 🔴&nbsp;Radeon&nbsp;RX&nbsp;7900&nbsp;XTX        |              61.44 |          24 |          960 |             3665 (58%) |              7644 (61%) |              7716 (62%) |\n| 🔴&nbsp;Radeon&nbsp;PRO&nbsp;W7900               |              61.30 |          48 |          864 |             3107 (55%) |              5939 (53%) |              5780 (52%) |\n| 🔴&nbsp;Radeon&nbsp;RX&nbsp;7900&nbsp;XT         |              51.61 |          20 |          800 |             3013 (58%) |              5856 (56%) |              5986 (58%) |\n| 🔴&nbsp;Radeon&nbsp;PRO&nbsp;W7800               |              45.20 |          32 |          576 |             1872 (50%) |              4426 (59%) |              4145 (55%) |\n| 🔴&nbsp;Radeon&nbsp;RX&nbsp;7900&nbsp;GRE        |              42.03 |          16 |          576 |             1996 (53%) |              4570 (61%) |              4463 (60%) |\n| 🔴&nbsp;Radeon&nbsp;PRO&nbsp;W7700               |              28.30 |          16 |          576 |             1547 (41%) |              2943 (39%) |              2899 (39%) |\n| 🔴&nbsp;Radeon&nbsp;RX&nbsp;7600                 |              21.75 |           8 |          288 |             1250 (66%) |              2561 (68%) |              2512 (67%) |\n| 🔴&nbsp;Radeon&nbsp;PRO&nbsp;W7600               |              20.00 |           8 |          288 |             1179 (63%) |              2263 (61%) |              2287 (61%) |\n| 🔴&nbsp;Radeon&nbsp;PRO&nbsp;W7500               |              12.20 |           8 |          172 |              856 (76%) |              1630 (73%) |              1682 (75%) |\n| 🔴&nbsp;Radeon&nbsp;RX&nbsp;6900&nbsp;XT         |              23.04 |          16 |          512 |             1968 (59%) |              4227 (64%) |              4207 (63%) |\n| 🔴&nbsp;Radeon&nbsp;RX&nbsp;6800&nbsp;XT         |              20.74 |          16 |          512 |             2008 (60%) |              4241 (64%) |              4224 (64%) |\n| 🔴&nbsp;Radeon&nbsp;PRO&nbsp;W6800               |              17.83 |          32 |          512 |             1620 (48%) |              3361 (51%) |              3180 (48%) |\n| 🔴&nbsp;Radeon&nbsp;RX&nbsp;6700&nbsp;XT         |              13.21 |          12 |          384 |             1408 (56%) |              2883 (58%) |              2908 (58%) |\n| 🔴&nbsp;Radeon&nbsp;RX&nbsp;6800M                |              11.78 |          12 |          384 |             1439 (57%) |              3190 (64%) |              3213 (64%) |\n| 🔴&nbsp;Radeon&nbsp;RX&nbsp;6700M                |              10.60 |          10 |          320 |             1194 (57%) |              2388 (57%) |              2429 (58%) |\n| 🔴&nbsp;Radeon&nbsp;RX&nbsp;6600                 |               8.93 |           8 |          224 |              963 (66%) |              1817 (62%) |              1839 (63%) |\n| 🔴&nbsp;Radeon&nbsp;RX&nbsp;6500&nbsp;XT         |               5.77 |           4 |          144 |              459 (49%) |              1011 (54%) |              1030 (55%) |\n| 🔴&nbsp;Radeon&nbsp;RX&nbsp;5700&nbsp;XT         |               9.75 |           8 |          448 |             1368 (47%) |              3253 (56%) |              3049 (52%) |\n| 🔴&nbsp;Radeon&nbsp;RX&nbsp;5700                 |               7.72 |           8 |          448 |             1521 (52%) |              3167 (54%) |              2758 (47%) |\n| 🔴&nbsp;Radeon&nbsp;RX&nbsp;5600&nbsp;XT         |               6.73 |           6 |          288 |             1136 (60%) |              2214 (59%) |              2148 (57%) |\n| 🔴&nbsp;Radeon&nbsp;RX&nbsp;Vega&nbsp;64         |              13.35 |           8 |          484 |             1875 (59%) |              2878 (46%) |              3227 (51%) |\n| 🔴&nbsp;Radeon&nbsp;RX&nbsp;590                  |               5.53 |           8 |          256 |             1257 (75%) |              1573 (47%) |              1688 (51%) |\n| 🔴&nbsp;Radeon&nbsp;RX&nbsp;580&nbsp;4GB         |               6.50 |           4 |          256 |              946 (57%) |              1848 (56%) |              1577 (47%) |\n| 🔴&nbsp;Radeon&nbsp;RX&nbsp;580&nbsp;2048SP&nbsp;8GB |           4.94 |           8 |          224 |              868 (59%) |              1622 (56%) |              1240 (43%) |\n| 🔴&nbsp;Radeon&nbsp;R9&nbsp;390X                 |               5.91 |           8 |          384 |             1733 (69%) |              2217 (44%) |              1722 (35%) |\n| 🔴&nbsp;Radeon&nbsp;HD&nbsp;7850                 |               1.84 |           2 |          154 |              112 (11%) |               120 ( 6%) |               635 (32%) |\n| 🔵&nbsp;Arc&nbsp;B580&nbsp;LE                    |              14.59 |          12 |          456 |             1573 (53%) |              5370 (91%) |              2511 (42%) |\n| 🔵&nbsp;Arc&nbsp;A770&nbsp;LE                    |              19.66 |          16 |          560 |             2663 (73%) |              4568 (63%) |              4519 (62%) |\n| 🔵&nbsp;Arc&nbsp;A750&nbsp;LE                    |              17.20 |           8 |          512 |             2555 (76%) |              4314 (65%) |              4047 (61%) |\n| 🔵&nbsp;Arc&nbsp;A580                            |              12.29 |           8 |          512 |             2534 (76%) |              3889 (58%) |              3488 (52%) |\n| 🔵&nbsp;Arc&nbsp;A380                            |               4.20 |           6 |          186 |              622 (51%) |              1097 (45%) |              1115 (46%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;4090               |              82.58 |          24 |         1008 |             5624 (85%) |             11091 (85%) |             11496 (88%) |\n| 🟢&nbsp;RTX&nbsp;6000&nbsp;Ada                   |              91.10 |          48 |          960 |             4997 (80%) |             10249 (82%) |             10293 (83%) |\n| 🟢&nbsp;L40S                                     |              91.61 |          48 |          864 |             3788 (67%) |              7637 (68%) |              7617 (68%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;4080&nbsp;Super    |              52.22 |          16 |          736 |             4089 (85%) |              7660 (80%) |              8218 (86%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;4080               |              55.45 |          16 |          717 |             3914 (84%) |              7626 (82%) |              7933 (85%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;4070&nbsp;Ti&nbsp;Super |         44.10 |          16 |          672 |             3694 (84%) |              6435 (74%) |              7295 (84%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;4070               |              29.15 |          12 |          504 |             2646 (80%) |              4548 (69%) |              5016 (77%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;4080M              |              33.85 |          12 |          432 |             2577 (91%) |              5086 (91%) |              5114 (91%) |\n| 🟢&nbsp;RTX&nbsp;4000&nbsp;Ada                   |              26.73 |          20 |          360 |             2130 (91%) |              3964 (85%) |              4221 (90%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;4060               |              15.11 |           8 |          272 |             1614 (91%) |              3052 (86%) |              3124 (88%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;4070M              |              18.25 |           8 |          256 |             1553 (93%) |              2945 (89%) |              3092 (93%) |\n| 🟢&nbsp;RTX&nbsp;2000&nbsp;Ada                   |              12.00 |          16 |          224 |             1351 (92%) |              2452 (84%) |              2526 (87%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;3090&nbsp;Ti       |              40.00 |          24 |         1008 |             5717 (87%) |             10956 (84%) |             10400 (79%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;3090               |              39.05 |          24 |          936 |             5418 (89%) |             10732 (88%) |             10215 (84%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;3080&nbsp;Ti       |              37.17 |          12 |          912 |             5202 (87%) |              9832 (87%) |              9347 (79%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;3080&nbsp;12GB     |              32.26 |          12 |          912 |             5071 (85%) |              9657 (81%) |              8615 (73%) |\n| 🟢&nbsp;RTX&nbsp;A6000                           |              40.00 |          48 |          768 |             4421 (88%) |              8814 (88%) |              8533 (86%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;3080&nbsp;10GB     |              29.77 |          10 |          760 |             4230 (85%) |              8118 (82%) |              7714 (78%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;3080M&nbsp;Ti      |              23.61 |          16 |          512 |             2985 (89%) |              5908 (89%) |              5780 (87%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;3070               |              20.31 |           8 |          448 |             2578 (88%) |              5096 (88%) |              5060 (87%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;3060&nbsp;Ti       |              16.49 |           8 |          448 |             2644 (90%) |              5129 (88%) |              4718 (81%) |\n| 🟢&nbsp;RTX&nbsp;A4000                           |              19.17 |          16 |          448 |             2500 (85%) |              4945 (85%) |              4664 (80%) |\n| 🟢&nbsp;RTX&nbsp;A5000M                          |              16.59 |          16 |          448 |             2228 (76%) |              4461 (77%) |              3662 (63%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;3060               |              13.17 |          12 |          360 |             2108 (90%) |              4070 (87%) |              3566 (76%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;3060M              |              10.94 |           6 |          336 |             2019 (92%) |              4012 (92%) |              3572 (82%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;3050M&nbsp;Ti      |               7.60 |           4 |          192 |             1181 (94%) |              2341 (94%) |              2253 (90%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;3050M              |               7.13 |           4 |          192 |             1180 (94%) |              2339 (94%) |              2016 (81%) |\n| 🟢&nbsp;Titan&nbsp;RTX                           |              16.31 |          24 |          672 |             3471 (79%) |              7456 (85%) |              7554 (87%) |\n| 🟢&nbsp;Quadro&nbsp;RTX&nbsp;6000                |              16.31 |          24 |          672 |             3307 (75%) |              6836 (78%) |              6879 (79%) |\n| 🟢&nbsp;Quadro&nbsp;RTX&nbsp;8000&nbsp;Passive   |              14.93 |          48 |          624 |             2591 (64%) |              5408 (67%) |              5607 (69%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;2080&nbsp;Ti       |              13.45 |          11 |          616 |             3194 (79%) |              6700 (84%) |              6853 (86%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;2080&nbsp;Super    |              11.34 |           8 |          496 |             2434 (75%) |              5284 (82%) |              5087 (79%) |\n| 🟢&nbsp;Quadro&nbsp;RTX&nbsp;5000                |              11.15 |          16 |          448 |             2341 (80%) |              4766 (82%) |              4773 (82%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;2070&nbsp;Super    |               9.22 |           8 |          448 |             2255 (77%) |              4866 (84%) |              4893 (84%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;2060&nbsp;Super    |               7.18 |           8 |          448 |             2503 (85%) |              5035 (87%) |              4463 (77%) |\n| 🟢&nbsp;Quadro&nbsp;RTX&nbsp;4000                |               7.12 |           8 |          416 |             2284 (84%) |              4584 (85%) |              4062 (75%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;2060&nbsp;KO       |               6.74 |           6 |          336 |             1643 (75%) |              3376 (77%) |              3266 (75%) |\n| 🟢&nbsp;GeForce&nbsp;RTX&nbsp;2060               |               6.74 |           6 |          336 |             1681 (77%) |              3604 (83%) |              3571 (82%) |\n| 🟢&nbsp;GeForce&nbsp;GTX&nbsp;1660&nbsp;Super    |               5.03 |           6 |          336 |             1696 (77%) |              3551 (81%) |              3040 (70%) |\n| 🟢&nbsp;Tesla&nbsp;T4                            |               8.14 |          15 |          300 |             1356 (69%) |              2869 (74%) |              2887 (74%) |\n| 🟢&nbsp;GeForce&nbsp;GTX&nbsp;1660&nbsp;Ti       |               5.48 |           6 |          288 |             1467 (78%) |              3041 (81%) |              3019 (81%) |\n| 🟢&nbsp;GeForce&nbsp;GTX&nbsp;1660               |               5.07 |           6 |          192 |             1016 (81%) |              1924 (77%) |              1992 (80%) |\n| 🟢&nbsp;GeForce&nbsp;GTX&nbsp;1650M&nbsp;896C    |               2.72 |           4 |          192 |              963 (77%) |              1836 (74%) |              1858 (75%) |\n| 🟢&nbsp;GeForce&nbsp;GTX&nbsp;1650M&nbsp;1024C   |               3.20 |           4 |          128 |              706 (84%) |              1214 (73%) |              1400 (84%) |\n| 🟢&nbsp;T500                                     |               3.04 |           4 |           80 |              339 (65%) |               578 (56%) |               665 (64%) |\n| 🟢&nbsp;Titan&nbsp;Xp                            |              12.15 |          12 |          548 |             2919 (82%) |              5495 (77%) |              5375 (76%) |\n| 🟢&nbsp;GeForce&nbsp;GTX&nbsp;1080&nbsp;Ti       |              12.06 |          11 |          484 |             2631 (83%) |              4837 (77%) |              4877 (78%) |\n| 🟢&nbsp;GeForce&nbsp;GTX&nbsp;1080               |               9.78 |           8 |          320 |             1623 (78%) |              3100 (75%) |              3182 (77%) |\n| 🟢&nbsp;GeForce&nbsp;GTX&nbsp;1060&nbsp;6GB      |               4.57 |           6 |          192 |              997 (79%) |              1925 (77%) |              1785 (72%) |\n| 🟢&nbsp;GeForce&nbsp;GTX&nbsp;1060M              |               4.44 |           6 |          192 |              983 (78%) |              1882 (75%) |              1803 (72%) |\n| 🟢&nbsp;GeForce&nbsp;GTX&nbsp;1050M Ti           |               2.49 |           4 |          112 |              631 (86%) |              1224 (84%) |              1115 (77%) |\n| 🟢&nbsp;Quadro&nbsp;P1000                        |               1.89 |           4 |           82 |              426 (79%) |               839 (79%) |               778 (73%) |\n| 🟢&nbsp;GeForce&nbsp;GTX&nbsp;970                |               4.17 |           4 |          224 |              980 (67%) |              1721 (59%) |              1623 (56%) |\n| 🟢&nbsp;Quadro&nbsp;M4000                        |               2.57 |           8 |          192 |              899 (72%) |              1519 (61%) |              1050 (42%) |\n| 🟢&nbsp;Tesla&nbsp;M60&nbsp;(1&nbsp;GPU)         |               4.82 |           8 |          160 |              853 (82%) |              1571 (76%) |              1557 (75%) |\n| 🟢&nbsp;GeForce&nbsp;GTX&nbsp;960M               |               1.51 |           4 |           80 |              442 (84%) |               872 (84%) |               627 (60%) |\n| 🟢&nbsp;GeForce&nbsp;GTX&nbsp;770                |               3.33 |           2 |          224 |              800 (55%) |              1215 (42%) |               876 (30%) |\n| 🟢&nbsp;GeForce&nbsp;GTX&nbsp;680&nbsp;4GB       |               3.33 |           4 |          192 |              783 (62%) |              1274 (51%) |               814 (33%) |\n| 🟢&nbsp;Quadro&nbsp;K2000                        |               0.73 |           2 |           64 |              312 (75%) |               444 (53%) |               171 (21%) |\n| 🟢&nbsp;GeForce&nbsp;GT&nbsp;630&nbsp;(OEM)      |               0.46 |           2 |           29 |              151 (81%) |               185 (50%) |                78 (21%) |\n| 🟢&nbsp;Quadro&nbsp;NVS&nbsp;290                 |               0.03 |         1/4 |            6 |                9 (22%) |                 4 ( 5%) |                 4 ( 5%) |\n| 🟤&nbsp;Arise&nbsp;1020                          |               1.50 |           2 |           19 |                6 ( 5%) |                 6 ( 2%) |                 6 ( 2%) |\n|                                                  |                    |             |              |                        |                         |                         |\n| ⚪&nbsp;M2&nbsp;Max&nbsp;GPU&nbsp;38CU&nbsp;32GB |               9.73 |          22 |          400 |             2405 (92%) |              4641 (89%) |              2444 (47%) |\n| ⚪&nbsp;M1&nbsp;Ultra&nbsp;GPU&nbsp;64CU&nbsp;128GB |           16.38 |          98 |          800 |             4519 (86%) |              8418 (81%) |              6915 (67%) |\n| ⚪&nbsp;M1&nbsp;Max&nbsp;GPU&nbsp;24CU&nbsp;32GB |               6.14 |          22 |          400 |             2369 (91%) |              4496 (87%) |              2777 (53%) |\n| ⚪&nbsp;M1&nbsp;Pro&nbsp;GPU&nbsp;16CU&nbsp;16GB |               4.10 |          11 |          200 |             1204 (92%) |              2329 (90%) |              1855 (71%) |\n| ⚪&nbsp;M1&nbsp;GPU&nbsp;8CU&nbsp;16GB           |               2.05 |          11 |           68 |              384 (86%) |               758 (85%) |               759 (86%) |\n| 🔴&nbsp;Radeon&nbsp;780M&nbsp;(Z1&nbsp;Extreme)  |               8.29 |           8 |          102 |              443 (66%) |               860 (65%) |               820 (62%) |\n| 🔴&nbsp;Radeon&nbsp;Graphics&nbsp;(7800X3D)      |               0.56 |          12 |          102 |              338 (51%) |               498 (37%) |               283 (21%) |\n| 🔴&nbsp;Radeon&nbsp;Vega&nbsp;8&nbsp;(4750G)     |               2.15 |          27 |           57 |              263 (71%) |               511 (70%) |               501 (68%) |\n| 🔴&nbsp;Radeon&nbsp;Vega&nbsp;8&nbsp;(3500U)     |               1.23 |           7 |           38 |              157 (63%) |               282 (57%) |               288 (58%) |\n| 🔵&nbsp;Arc&nbsp;140V&nbsp;GPU&nbsp;(16GB)       |               3.99 |          16 |          137 |              636 (71%) |              1282 (72%) |               773 (44%) |\n| 🔵&nbsp;Arc&nbsp;Graphics&nbsp;(Ultra&nbsp;9&nbsp;185H) |        4.81 |          14 |           90 |              271 (46%) |               710 (61%) |               724 (62%) |\n| 🔵&nbsp;Iris&nbsp;Xe&nbsp;Graphics&nbsp;(i7-1265U) |             1.92 |          13 |           77 |              342 (68%) |               621 (62%) |               574 (58%) |\n| 🔵&nbsp;UHD&nbsp;Graphics&nbsp;Xe&nbsp;32EUs     |               0.74 |          25 |           51 |              128 (38%) |               245 (37%) |               216 (32%) |\n| 🔵&nbsp;UHD&nbsp;Graphics&nbsp;770               |               0.82 |          30 |           90 |              342 (58%) |               475 (41%) |               278 (24%) |\n| 🔵&nbsp;UHD&nbsp;Graphics&nbsp;630               |               0.46 |           7 |           51 |              151 (45%) |               301 (45%) |               187 (28%) |\n| 🔵&nbsp;UHD&nbsp;Graphics&nbsp;P630              |               0.46 |          51 |           42 |              177 (65%) |               288 (53%) |               137 (25%) |\n| 🔵&nbsp;HD&nbsp;Graphics&nbsp;5500               |               0.35 |           3 |           26 |               75 (45%) |               192 (58%) |               108 (32%) |\n| 🔵&nbsp;HD&nbsp;Graphics&nbsp;4600               |               0.38 |           2 |           26 |              105 (63%) |               115 (35%) |                34 (10%) |\n| 🟡&nbsp;Mali-G610&nbsp;MP4 (Orange&nbsp;Pi&nbsp;5) |             0.06 |          16 |           34 |              130 (58%) |               232 (52%) |                93 (21%) |\n| 🟡&nbsp;Mali-G72&nbsp;MP18 (Samsung&nbsp;S9+)    |               0.24 |           4 |           29 |              110 (59%) |               230 (62%) |                21 ( 6%) |\n|                                                  |                    |             |              |                        |                         |                         |\n| 🔴&nbsp;2x&nbsp;EPYC&nbsp;9754                   |              50.79 |        3072 |          922 |             3276 (54%) |              5077 (42%) |              5179 (43%) |\n| 🔴&nbsp;2x&nbsp;EPYC&nbsp;9654                   |              43.62 |        1536 |          922 |             1381 (23%) |              1814 (15%) |              1801 (15%) |\n| 🔴&nbsp;2x&nbsp;EPYC&nbsp;7352                   |               3.53 |         512 |          410 |              739 (28%) |               106 ( 2%) |               412 ( 8%) |\n| 🔴&nbsp;2x&nbsp;EPYC&nbsp;7313                   |               3.07 |         128 |          410 |              498 (19%) |               367 ( 7%) |               418 ( 8%) |\n| 🔴&nbsp;2x&nbsp;EPYC&nbsp;7302                   |               3.07 |         128 |          410 |              784 (29%) |               336 ( 6%) |               411 ( 8%) |\n| 🔵&nbsp;2x&nbsp;Xeon&nbsp;6980P                  |              98.30 |        6144 |         1690 |             7875 (71%) |              5112 (23%) |              5610 (26%) |\n| 🔵&nbsp;2x&nbsp;Xeon&nbsp;6979P                  |              92.16 |        3072 |         1690 |             8135 (74%) |              4175 (19%) |              4622 (21%) |\n| 🔵&nbsp;2x&nbsp;Xeon&nbsp;Platinum&nbsp;8592+    |              31.13 |        1024 |          717 |             3135 (67%) |              2359 (25%) |              2466 (26%) |\n| 🔵&nbsp;2x&nbsp;Xeon&nbsp;CPU&nbsp;Max&nbsp;9480 |              27.24 |         256 |          614 |             2037 (51%) |              1520 (19%) |              1464 (18%) |\n| 🔵&nbsp;2x&nbsp;Xeon&nbsp;Platinum&nbsp;8480+    |              28.67 |         512 |          614 |             2162 (54%) |              1845 (23%) |              1884 (24%) |\n| 🔵&nbsp;2x&nbsp;Xeon&nbsp;Platinum&nbsp;8380     |              23.55 |        2048 |          410 |             1410 (53%) |              1159 (22%) |              1298 (24%) |\n| 🔵&nbsp;2x&nbsp;Xeon&nbsp;Platinum&nbsp;8358     |              21.30 |         256 |          410 |             1285 (48%) |              1007 (19%) |              1120 (21%) |\n| 🔵&nbsp;2x&nbsp;Xeon&nbsp;Platinum&nbsp;8256     |               3.89 |        1536 |          282 |              396 (22%) |               158 ( 4%) |               175 ( 5%) |\n| 🔵&nbsp;2x&nbsp;Xeon&nbsp;Platinum&nbsp;8153     |               8.19 |         384 |          256 |              691 (41%) |               290 ( 9%) |               328 (10%) |\n| 🔵&nbsp;2x&nbsp;Xeon&nbsp;Gold&nbsp;6248R        |              18.43 |         384 |          282 |              755 (41%) |               566 (15%) |               694 (19%) |\n| 🔵&nbsp;2x&nbsp;Xeon&nbsp;Gold&nbsp;6128         |               5.22 |         192 |          256 |              254 (15%) |               185 ( 6%) |               193 ( 6%) |\n| 🔵&nbsp;Xeon&nbsp;Phi&nbsp;7210                  |               5.32 |         192 |          102 |              415 (62%) |               193 (15%) |               223 (17%) |\n| 🔵&nbsp;4x&nbsp;Xeon&nbsp;E5-4620&nbsp;v4        |               2.69 |         512 |          273 |              460 (26%) |               275 ( 8%) |               239 ( 7%) |\n| 🔵&nbsp;2x&nbsp;Xeon&nbsp;E5-2630&nbsp;v4        |               1.41 |          64 |          137 |              264 (30%) |               146 ( 8%) |               129 ( 7%) |\n| 🔵&nbsp;2x&nbsp;Xeon&nbsp;E5-2623&nbsp;v4        |               0.67 |          64 |          137 |              125 (14%) |                66 ( 4%) |                59 ( 3%) |\n| 🔵&nbsp;2x&nbsp;Xeon&nbsp;E5-2680&nbsp;v3        |               1.92 |         128 |          137 |              304 (34%) |               234 (13%) |               291 (16%) |\n| 🟢&nbsp;GH200&nbsp;Neoverse-V2&nbsp;CPU          |               7.88 |         480 |          384 |             1323 (53%) |               853 (17%) |               683 (14%) |\n| 🔴&nbsp;Threadripper&nbsp;PRO&nbsp;7995WX        |              15.36 |         256 |          333 |             1134 (52%) |              1697 (39%) |              1715 (40%) |\n| 🔴&nbsp;Threadripper&nbsp;3970X                  |               3.79 |         128 |          102 |              376 (56%) |               103 ( 8%) |               463 (35%) |\n| 🔴&nbsp;Threadripper&nbsp;1950X                  |               0.87 |         128 |           85 |              273 (49%) |                43 ( 4%) |               151 (14%) |\n| 🔴&nbsp;Ryzen&nbsp;7&nbsp;7800X3D                |               1.08 |          32 |          102 |              296 (44%) |               361 (27%) |               363 (27%) |\n| 🔴&nbsp;Ryzen&nbsp;7&nbsp;5700X3D                |               0.87 |          32 |           51 |              229 (68%) |               135 (20%) |               173 (26%) |\n| 🔴&nbsp;FX-6100                                  |               0.16 |          16 |           26 |               11 ( 7%) |                11 ( 3%) |                22 ( 7%) |\n| 🔴&nbsp;Athlon&nbsp;X2&nbsp;QL-65                |               0.03 |           4 |           11 |                3 ( 4%) |                 2 ( 2%) |                 3 ( 2%) |\n| 🔵&nbsp;Core&nbsp;Ultra&nbsp;7&nbsp;258V         |               0.56 |          32 |          137 |              287 (32%) |               123 ( 7%) |               167 ( 9%) |\n| 🔵&nbsp;Core&nbsp;Ultra&nbsp;9&nbsp;185H         |               1.79 |          16 |           90 |              317 (54%) |               267 (23%) |               288 (25%) |\n| 🔵&nbsp;Core&nbsp;i9-14900K                      |               3.74 |          32 |           96 |              443 (71%) |               453 (36%) |               490 (39%) |\n| 🔵&nbsp;Core&nbsp;i7-13700K                      |               2.51 |          64 |           90 |              504 (86%) |               398 (34%) |               424 (36%) |\n| 🔵&nbsp;Core&nbsp;i7-1265U                       |               1.23 |          32 |           77 |              128 (26%) |                62 ( 6%) |                58 ( 6%) |\n| 🔵&nbsp;Core&nbsp;i9-11900KB                     |               0.84 |          32 |           51 |              109 (33%) |               195 (29%) |               208 (31%) |\n| 🔵&nbsp;Core&nbsp;i9-10980XE                     |               3.23 |         128 |           94 |              286 (47%) |               251 (21%) |               223 (18%) |\n| 🔵&nbsp;Xeon&nbsp;E-2288G                        |               0.95 |          32 |           43 |              196 (70%) |               182 (33%) |               198 (36%) |\n| 🔵&nbsp;Core&nbsp;i7-9700                        |               0.77 |          64 |           43 |              103 (37%) |                62 (11%) |                95 (17%) |\n| 🔵&nbsp;Core&nbsp;i5-9600                        |               0.60 |          16 |           43 |              146 (52%) |               127 (23%) |               147 (27%) |\n| 🔵&nbsp;Core&nbsp;i7-8700K                       |               0.71 |          16 |           51 |              152 (45%) |               134 (20%) |               116 (17%) |\n| 🔵&nbsp;Xeon&nbsp;E-2176G                        |               0.71 |          64 |           42 |              201 (74%) |               136 (25%) |               148 (27%) |\n| 🔵&nbsp;Core&nbsp;i7-7700HQ                      |               0.36 |          12 |           38 |               81 (32%) |                82 (16%) |               108 (22%) |\n| 🔵&nbsp;Xeon&nbsp;E3-1240&nbsp;v5                |               0.50 |          32 |           34 |              141 (63%) |                75 (17%) |                88 (20%) |\n| 🔵&nbsp;Core&nbsp;i7-4770                        |               0.44 |          16 |           26 |              104 (62%) |                69 (21%) |                59 (18%) |\n| 🔵&nbsp;Core&nbsp;i7-4720HQ                      |               0.33 |          16 |           26 |               80 (48%) |                23 ( 7%) |                60 (18%) |\n| 🔵&nbsp;Celeron&nbsp;N2807                       |               0.01 |           4 |           11 |                7 (10%) |                 3 ( 2%) |                 3 ( 2%) |\n\n</details>\n\n\n\n## Multi-GPU Benchmarks\n\nMulti-GPU benchmarks are done at the largest possible grid resolution with cubic domains, and either 2x1x1, 2x2x1 or 2x2x2 of these domains together. The (percentages in round brackets) are single-GPU [roofline model](https://en.wikipedia.org/wiki/Roofline_model) efficiency, and the (multiplicators in round brackets) are scaling factors relative to benchmarked single-GPU performance.\n\n<details><summary>Multi-GPU Benchmark Table</summary>\n\nColors: 🔴 AMD, 🔵 Intel, 🟢 Nvidia, ⚪ Apple, 🟡 ARM, 🟤 Glenfly\n\n| Device                                                          | FP32<br>[TFlops/s] | Mem<br>[GB] | BW<br>[GB/s] | FP32/FP32<br>[MLUPs/s] | FP32/FP16S<br>[MLUPs/s] | FP32/FP16C<br>[MLUPs/s] |\n| :-------------------------------------------------------------- | -----------------: | ----------: | -----------: | ---------------------: | ----------------------: | ----------------------: |\n|                                                                 |                    |             |              |                        |                         |                         |\n| 🔴&nbsp;1x&nbsp;Instinct&nbsp;MI250&nbsp;(1&nbsp;GCD)           |              45.26 |          64 |         1638 |             5638 (53%) |              9030 (42%) |              8506 (40%) |\n| 🔴&nbsp;1x&nbsp;Instinct&nbsp;MI250&nbsp;(2&nbsp;GCD)           |              90.52 |         128 |         3277 |            9460 (1.7x) |            14313 (1.6x) |            17338 (2.0x) |\n| 🔴&nbsp;2x&nbsp;Instinct&nbsp;MI250&nbsp;(4&nbsp;GCD)           |             181.04 |         256 |         6554 |      16925&nbsp;(3.0x) |            29163 (3.2x) |            29627 (3.5x) |\n| 🔴&nbsp;4x&nbsp;Instinct&nbsp;MI250&nbsp;(8&nbsp;GCD)           |             362.08 |         512 |        13107 |      27350&nbsp;(4.9x) |            52258 (5.8x) |            53521 (6.3x) |\n|                                                                 |                    |             |              |                        |                         |                         |\n| 🔴&nbsp;&nbsp;&nbsp;1x&nbsp;Instinct&nbsp;MI210                 |              45.26 |          64 |         1638 |             6347 (59%) |              8486 (40%) |              9105 (43%) |\n| 🔴&nbsp;&nbsp;&nbsp;2x&nbsp;Instinct&nbsp;MI210                 |              90.52 |         128 |         3277 |            7245 (1.1x) |            12050 (1.4x) |            13539 (1.5x) |\n| 🔴&nbsp;&nbsp;&nbsp;4x&nbsp;Instinct&nbsp;MI210                 |             181.04 |         256 |         6554 |            8816 (1.4x) |            17232 (2.0x) |            16892 (1.9x) |\n| 🔴&nbsp;&nbsp;&nbsp;8x&nbsp;Instinct&nbsp;MI210                 |             362.08 |         512 |        13107 |      13546&nbsp;(2.1x) |            27996 (3.3x) |            27820 (3.1x) |\n| 🔴&nbsp;16x&nbsp;Instinct&nbsp;MI210                            |             724.16 |        1024 |        26214 |      18094&nbsp;(2.9x) |            37360 (4.4x) |            37922 (4.2x) |\n| 🔴&nbsp;24x&nbsp;Instinct&nbsp;MI210                            |            1086.24 |        1536 |        39322 |      22056&nbsp;(3.5x) |            45033 (5.3x) |            44631 (4.9x) |\n| 🔴&nbsp;32x&nbsp;Instinct&nbsp;MI210                            |            1448.32 |        2048 |        52429 |      23881&nbsp;(3.8x) |            50952 (6.0x) |            48848 (5.4x) |\n|                                                                 |                    |             |              |                        |                         |                         |\n| 🔴&nbsp;1x&nbsp;Radeon&nbsp;VII                                 |              13.83 |          16 |         1024 |             4898 (73%) |              7778 (58%) |              5256 (40%) |\n| 🔴&nbsp;2x&nbsp;Radeon&nbsp;VII                                 |              27.66 |          32 |         2048 |            8113 (1.7x) |            15591 (2.0x) |            10352 (2.0x) |\n| 🔴&nbsp;4x&nbsp;Radeon&nbsp;VII                                 |              55.32 |          64 |         4096 |      12911&nbsp;(2.6x) |            24273 (3.1x) |            17080 (3.2x) |\n| 🔴&nbsp;8x&nbsp;Radeon&nbsp;VII                                 |             110.64 |         128 |         8192 |      21946&nbsp;(4.5x) |            30826 (4.0x) |            24572 (4.7x) |\n|                                                                 |                    |             |              |                        |                         |                         |\n| 🔵&nbsp;1x&nbsp;DC&nbsp;GPU&nbsp;Max&nbsp;1100                  |              22.22 |          48 |         1229 |             3487 (43%) |              6209 (39%) |              3252 (20%) |\n| 🔵&nbsp;2x&nbsp;DC&nbsp;GPU&nbsp;Max&nbsp;1100                  |              44.44 |          96 |         2458 |            6301 (1.8x) |            11815 (1.9x) |             5970 (1.8x) |\n| 🔵&nbsp;4x&nbsp;DC&nbsp;GPU&nbsp;Max&nbsp;1100                  |              88.88 |         192 |         4915 |           12162 (3.5x) |            22777 (3.7x) |            11759 (3.6x) |\n|                                                                 |                    |             |              |                        |                         |                         |\n| 🟢&nbsp;1x&nbsp;A100&nbsp;PCIe&nbsp;80GB                        |              19.49 |          80 |         1935 |             9657 (76%) |        17896&nbsp;(71%) |        10817&nbsp;(43%) |\n| 🟢&nbsp;2x&nbsp;A100&nbsp;PCIe&nbsp;80GB                        |              38.98 |         160 |         3870 |      15742&nbsp;(1.6x) |       27165&nbsp;(1.5x) |       17510&nbsp;(1.6x) |\n| 🟢&nbsp;4x&nbsp;A100&nbsp;PCIe&nbsp;80GB                        |              77.96 |         320 |         7740 |      25957&nbsp;(2.7x) |       52056&nbsp;(2.9x) |       33283&nbsp;(3.1x) |\n|                                                                 |                    |             |              |                        |                         |                         |\n| 🟢&nbsp;1x&nbsp;PG506-243&nbsp;/&nbsp;PG506-242                 |              22.14 |          64 |         1638 |             8195 (77%) |        15654&nbsp;(74%) |        12271&nbsp;(58%) |\n| 🟢&nbsp;2x&nbsp;PG506-243&nbsp;/&nbsp;PG506-242                 |              44.28 |         128 |         3277 |      13885&nbsp;(1.7x) |       24168&nbsp;(1.5x) |       20906&nbsp;(1.7x) |\n| 🟢&nbsp;4x&nbsp;PG506-243&nbsp;/&nbsp;PG506-242                 |              88.57 |         256 |         6554 |      23097&nbsp;(2.8x) |       41088&nbsp;(2.6x) |       36130&nbsp;(2.9x) |\n|                                                                 |                    |             |              |                        |                         |                         |\n| 🟢&nbsp;1x&nbsp;A100&nbsp;SXM4&nbsp;40GB                        |              19.49 |          40 |         1555 |             8543 (84%) |        15917&nbsp;(79%) |              8748 (43%) |\n| 🟢&nbsp;2x&nbsp;A100&nbsp;SXM4&nbsp;40GB                        |              38.98 |          80 |         3110 |      14311&nbsp;(1.7x) |            23707 (1.5x) |            15512 (1.8x) |\n| 🟢&nbsp;4x&nbsp;A100&nbsp;SXM4&nbsp;40GB                        |              77.96 |         160 |         6220 |      23411&nbsp;(2.7x) |            42400 (2.7x) |            29017 (3.3x) |\n| 🟢&nbsp;8x&nbsp;A100&nbsp;SXM4&nbsp;40GB                        |             155.92 |         320 |        12440 |      37619&nbsp;(4.4x) |            72965 (4.6x) |            63009 (7.2x) |\n|                                                                 |                    |             |              |                        |                         |                         |\n| 🟢&nbsp;1x&nbsp;A100&nbsp;SXM4&nbsp;40GB                        |              19.49 |          40 |         1555 |             8522 (84%) |        16013&nbsp;(79%) |        11251&nbsp;(56%) |\n| 🟢&nbsp;2x&nbsp;A100&nbsp;SXM4&nbsp;40GB                        |              38.98 |          80 |         3110 |      13629&nbsp;(1.6x) |            24620 (1.5x) |            18850 (1.7x) |\n| 🟢&nbsp;4x&nbsp;A100&nbsp;SXM4&nbsp;40GB                        |              77.96 |         160 |         6220 |      17978&nbsp;(2.1x) |            30604 (1.9x) |            30627 (2.7x) |\n|                                                                 |                    |             |              |                        |                         |                         |\n| 🟢&nbsp;1x&nbsp;Tesla&nbsp;V100&nbsp;SXM2&nbsp;32GB             |              15.67 |          32 |          900 |             4471 (76%) |              8947 (77%) |              7217 (62%) |\n| 🟢&nbsp;2x&nbsp;Tesla&nbsp;V100&nbsp;SXM2&nbsp;32GB             |              31.34 |          64 |         1800 |            7953 (1.8x) |            15469 (1.7x) |            12932 (1.8x) |\n| 🟢&nbsp;4x&nbsp;Tesla&nbsp;V100&nbsp;SXM2&nbsp;32GB             |              62.68 |         128 |         3600 |      13135&nbsp;(2.9x) |            26527 (3.0x) |            22686 (3.1x) |\n|                                                                 |                    |             |              |                        |                         |                         |\n| 🟢&nbsp;1x&nbsp;Tesla&nbsp;K40m                                 |               4.29 |          12 |          288 |             1131 (60%) |              1868 (50%) |               912 (24%) |\n| 🟢&nbsp;2x&nbsp;Tesla&nbsp;K40m                                 |               8.58 |          24 |          577 |            1971 (1.7x) |             3300 (1.8x) |             1801 (2.0x) |\n| 🟢&nbsp;3x&nbsp;K40m&nbsp;+&nbsp;1x&nbsp;Titan&nbsp;Xp          |              17.16 |          48 |         1154 |            3117 (2.8x) |             5174 (2.8x) |             3127 (3.4x) |\n|                                                                 |                    |             |              |                        |                         |                         |\n| 🟢&nbsp;1x&nbsp;Tesla&nbsp;K80&nbsp;(1&nbsp;GPU)                |               4.11 |          12 |          240 |              916 (58%) |              1642 (53%) |               943 (30%) |\n| 🟢&nbsp;1x&nbsp;Tesla&nbsp;K80&nbsp;(2&nbsp;GPU)                |               8.22 |          24 |          480 |            2086 (2.3x) |             3448 (2.1x) |             2174 (2.3x) |\n|                                                                 |                    |             |              |                        |                         |                         |\n| 🟢&nbsp;1x&nbsp;RTX&nbsp;A6000                                  |              40.00 |          48 |          768 |             4421 (88%) |              8814 (88%) |              8533 (86%) |\n| 🟢&nbsp;2x&nbsp;RTX&nbsp;A6000                                  |              80.00 |          96 |         1536 |            8041 (1.8x) |            15026 (1.7x) |            14795 (1.7x) |\n| 🟢&nbsp;4x&nbsp;RTX&nbsp;A6000                                  |             160.00 |         192 |         3072 |      14314&nbsp;(3.2x) |            27915 (3.2x) |            27227 (3.2x) |\n| 🟢&nbsp;8x&nbsp;RTX&nbsp;A6000                                  |             320.00 |         384 |         6144 |      19311&nbsp;(4.4x) |            40063 (4.5x) |            39004 (4.6x) |\n|                                                                 |                    |             |              |                        |                         |                         |\n| 🟢&nbsp;1x&nbsp;Quadro&nbsp;RTX&nbsp;8000&nbsp;Pa.              |              14.93 |          48 |          624 |             2591 (64%) |              5408 (67%) |              5607 (69%) |\n| 🟢&nbsp;2x&nbsp;Quadro&nbsp;RTX&nbsp;8000&nbsp;Pa.              |              29.86 |          96 |         1248 |            4767 (1.8x) |             9607 (1.8x) |            10214 (1.8x) |\n|                                                                 |                    |             |              |                        |                         |                         |\n| 🟢&nbsp;1x&nbsp;GeForce&nbsp;RTX&nbsp;2080&nbsp;Ti              |              13.45 |          11 |          616 |             3194 (79%) |              6700 (84%) |              6853 (86%) |\n| 🟢&nbsp;2x&nbsp;GeForce&nbsp;RTX&nbsp;2080&nbsp;Ti              |              26.90 |          22 |         1232 |            5085 (1.6x) |            10770 (1.6x) |            10922 (1.6x) |\n| 🟢&nbsp;4x&nbsp;GeForce&nbsp;RTX&nbsp;2080&nbsp;Ti              |              53.80 |          44 |         2464 |            9117 (2.9x) |            18415 (2.7x) |            18598 (2.7x) |\n| 🟢&nbsp;7x&nbsp;2080&nbsp;Ti&nbsp;+&nbsp;1x&nbsp;A100&nbsp;40GB |             107.60 |          88 |         4928 |      16146&nbsp;(5.1x) |            33732 (5.0x) |            33857 (4.9x) |\n|                                                                 |                    |             |              |                        |                         |                         |\n| 🔵&nbsp;1x&nbsp;A770&nbsp;+&nbsp;🟢&nbsp;1x&nbsp;Titan&nbsp;Xp  |              24.30 |          24 |         1095 |            4717 (1.7x) |             8380 (1.7x) |             8026 (1.6x) |\n\n</details>\n\n\n\n## FAQs\n\n### General\n\n- <details><summary>How to learn using FluidX3D?</summary><br>Follow the <a href=\"https://github.com/ProjectPhysX/FluidX3D/blob/master/DOCUMENTATION.md\">FluidX3D Documentation</a>!<br><br></details>\n\n- <details><summary>What physical model does FluidX3D use?</summary><br>FluidX3D implements the lattice Boltzmann method, a type of direct numerical simulation (DNS), the most accurate type of fluid simulation, but also the most computationally challenging. Optional extension models include volume force (Guo forcing), free surface (<a href=\"https://doi.org/10.3390/computation10060092\">volume-of-fluid</a> and <a href=\"https://doi.org/10.3390/computation10020021\">PLIC</a>), a temperature model and Smagorinsky-Lilly subgrid turbulence model.<br><br></details>\n\n- <details><summary>FluidX3D only uses FP32 or even FP32/FP16, in contrast to FP64. Are simulation results physically accurate?</summary><br>Yes, in all but extreme edge cases. The code has been specially optimized to minimize arithmetic round-off errors and make the most out of lower precision. With these optimizations, accuracy in most cases is indistinguishable from FP64 double-precision, even with FP32/FP16 mixed-precision. Details can be found in <a href=\"https://www.researchgate.net/publication/362275548_Accuracy_and_performance_of_the_lattice_Boltzmann_method_with_64-bit_32-bit_and_customized_16-bit_number_formats\">this paper</a>.<br><br></details>\n\n- <details><summary>Compared to the benchmark numbers stated <a href=\"https://www.researchgate.net/publication/362275548_Accuracy_and_performance_of_the_lattice_Boltzmann_method_with_64-bit_32-bit_and_customized_16-bit_number_formats\">here</a>, efficiency seems much lower but performance is slightly better for most devices. How can this be?</summary><br>In that paper, the One-Step-Pull swap algorithm is implemented, using only misaligned reads and coalesced writes. On almost all GPUs, the performance penalty for misaligned writes is much larger than for misaligned reads, and sometimes there is almost no penalty for misaligned reads at all. Because of this, One-Step-Pull runs at peak bandwidth and thus peak efficiency.<br>Here, a different swap algorithm termed <a href=\"https://doi.org/10.3390/computation10060092\">Esoteric-Pull</a> is used, a type of in-place streaming. This makes the LBM require much less memory (93 vs. 169 (FP32/FP32) or 55 vs. 93 (FP32/FP16) Bytes/cell for D3Q19), and also less memory bandwidth (153 vs. 171 (FP32/FP32) or 77 vs. 95 (FP32/FP16) Bytes/cell per time step for D3Q19) due to so-called implicit bounce-back boundaries. However memory access now is half coalesced and half misaligned for both reads and writes, so memory access efficiency is lower. For overall performance, these two effects approximately cancel out. The benefit of Esoteric-Pull - being able to simulate domains twice as large with the same amount of memory - clearly outweights the cost of slightly lower memory access efficiency, especially since performance is not reduced overall.<br><br></details>\n\n- <details><summary>Why don't you use CUDA? Wouldn't that be more efficient?</summary><br>No, that is a wrong myth. OpenCL is exactly as efficient as CUDA on Nvidia GPUs if optimized properly. <a href=\"https://www.researchgate.net/publication/362275548_Accuracy_and_performance_of_the_lattice_Boltzmann_method_with_64-bit_32-bit_and_customized_16-bit_number_formats\">Here</a> I did roofline model and analyzed OpenCL performance on various hardware. OpenCL efficiency on modern Nvidia GPUs can be 100% with the right memory access pattern, so CUDA can't possibly be any more efficient. Without any performance advantage, there is no reason to use proprietary CUDA over OpenCL, since OpenCL is compatible with a lot more hardware.<br><br></details>\n\n- <details><summary>Why no multi-relaxation-time (MRT) collision operator?</summary><br>The idea of MRT is to linearly transform the DDFs into \"moment space\" by matrix multiplication and relax these moments individually, promising better stability and accuracy. In practice, in the vast majority of cases, it has zero or even negative effects on stability and accuracy, and simple SRT is much superior. Apart from the kinematic shear viscosity and conserved terms, the remaining moments are non-physical quantities and their tuning is a blackbox. Although MRT can be implemented in an efficient manner with only a single matrix-vector multiplication in registers, leading to identical performance compared to SRT by remaining bandwidth-bound, storing the matrices vastly elongates and over-complicates the code for no real benefit.<br><br></details>\n\n### Hardware\n\n- <details><summary>Can FluidX3D run on multiple GPUs at the same time?</summary><br>Yes. The simulation grid is then split in domains, one for each GPU (domain decomposition method). The GPUs essentially pool their memory, enabling much larger grid resolution and higher performance. Rendering is parallelized across multiple GPUs as well; each GPU renders its own domain with a 3D offset, then rendered frames from all GPUs are overlayed with their z-buffers. Communication between domains is done over PCIe, so no SLI/Crossfire/NVLink/InfinityFabric is required. All GPUs must however be installed in the same node (PC/laptop/server). Even unholy combinations of Nvidia/AMD/Intel GPUs will work, although it is recommended to only use GPUs with similar memory capacity and bandwidth together. Using a fast gaming GPU and slow integrated GPU together would only decrease performance due to communication overhead.<br><br></details>\n\n- <details><summary>I'm on a budget and have only a cheap computer. Can I run FluidX3D on my toaster PC/laptop?</summary><br>Absolutely. Today even the most inexpensive hardware, like integrated GPUs or entry-level gaming GPUs, support OpenCL. You might be a bit more limited on memory capacity and grid resolution, but you should be good to go. I've tested FluidX3D on very old and inexpensive hardware and even on my Samsung S9+ smartphone, and it runs just fine, although admittedly a bit slower.<br><br></details>\n\n- <details><summary>I don't have an expensive workstation GPU, but only a gaming GPU. Will performance suffer?</summary><br>No. Efficiency on gaming GPUs is exactly as good as on their \"professional\"/workstation counterparts. Performance often is even better as gaming GPUs have higher boost clocks.<br><br></details>\n\n- <details><summary>Do I need a GPU with ECC memory?</summary><br>No. Gaming GPUs work just fine. Some Nvidia GPUs automatically reduce memory clocks for compute applications to almost entirely eliminate memory errors.<br><br></details>\n\n- <details><summary>My GPU does not support CUDA. Can I still use FluidX3D?</summary><br>Yes. FluidX3D uses OpenCL 1.2 and not CUDA, so it runs on any GPU from any vendor since around 2012.<br><br></details>\n\n- <details><summary>I don't have a dedicated graphics card at all. Can I still run FluidX3D on my PC/laptop?</summary><br>Yes. FluidX3D also runs on all integrated GPUs since around 2012, and also on CPUs.<br><br></details>\n\n- <details><summary>I need more memory than my GPU can offer. Can I run FluidX3D on my CPU as well?</summary><br>Yes. You only need to install the <a href=\"https://www.intel.com/content/www/us/en/developer/articles/technical/intel-cpu-runtime-for-opencl-applications-with-sycl-support.html\">Intel OpenCL CPU Runtime</a>.<br><br></details>\n\n- <details><summary>In the benchmarks you list some very expensive hardware. How do you get access to that?</summary><br>As a PhD candidate in computational physics, I used FluidX3D for my research, so I had access to BZHPC, SuperMUC-NG and JSC JURECA-DC supercomputers.<br><br></details>\n\n### Graphics\n\n- <details><summary>I don't have an RTX/DXR GPU that supports raytracing. Can I still use raytracing graphics in FluidX3D?</summary><br>Yes, and at full performance. FluidX3D does not use a bounding volume hierarchy (BVH) to accelerate raytracing, but fast ray-grid traversal instead, implemented directly in OpenCL C. This is much faster than BVH for moving isosurfaces in the LBM grid (~N vs. ~N²+log(N) runtime; LBM itself is ~N³), and it does not require any dedicated raytracing hardware. Raytracing in FluidX3D runs on any GPU that supports OpenCL 1.2.<br><br></details>\n\n- <details><summary>I have a datacenter/mining GPU without any video output or graphics hardware. Can FluidX3D still render simulation results?</summary><br>Yes. FluidX3D does all rendering (rasterization and raytracing) in OpenCL C, so no display output and no graphics features like OpenGL/Vulkan/DirectX are required. Rendering is just another form of compute after all. Rendered frames are passed to the CPU over PCIe and then the CPU can either draw them on screen through dedicated/integrated graphics or write them to the hard drive.<br><br></details>\n\n- <details><summary>I'm running FluidX3D on a remote (super-)computer and only have an SSH terminal. Can I still use graphics somehow?</summary><br>Yes, either directly as interactive ASCII graphics in the terminal or by storing rendered frames on the hard drive and then copying them over via `scp -r user@server.url:\"~/path/to/images/folder\" .`.<br><br></details>\n\n### Licensing\n\n- <details><summary>I want to learn about programming/software/physics/engineering. Can I use FluidX3D for free?</summary><br>Yes. Anyone can use FluidX3D for free for public research, education or personal use. Use by scientists, students and hobbyists is free of charge and well encouraged.<br><br></details>\n\n- <details><summary>I am a scientist/teacher with a paid position at a public institution. Can I use FluidX3D for my research/teaching?</summary><br>Yes, you can use FluidX3D free of charge. This is considered research/education, not commercial use. To give credit, the <a href=\"https://github.com/ProjectPhysX/FluidX3D#references\">references</a> listed below should be cited. If you publish data/results generated by altered source versions, the altered source code must be published as well.<br><br></details>\n\n- <details><summary>I work at a company in CFD/consulting/R&D or related fields. Can I use FluidX3D commercially?</summary><br>No. Commercial use is not allowed with the current license.<br><br></details>\n\n- <details><summary>Is FluidX3D open-source?</summary><br>No. \"Open-source\" as a technical term is defined as freely available without any restriction on use, but I am not comfortable with that. I have written FluidX3D in my spare time and no one should milk it for profits while I remain uncompensated, especially considering what other CFD software sells for. The technical term for the type of license I choose is \"source-available no-cost non-commercial\". The source code is freely available, and you are free to use, to alter and to redistribute it, as long as you do not sell it or make a profit from derived products/services, and as long as you do not use it for any military purposes (see the <a href=\"https://github.com/ProjectPhysX/FluidX3D/blob/master/LICENSE.md\">license</a> for details).<br><br></details>\n\n- <details><summary>Will FluidX3D at some point be available with a commercial license?</summary><br>Maybe I will add the option for a second, commercial license later on. If you are interested in commercial use, let me know. For non-commercial use in science and education, FluidX3D is and will always be free.<br><br></details>\n\n\n\n## External Code/Libraries/Images used in FluidX3D\n\n- [OpenCL-Headers](https://github.com/KhronosGroup/OpenCL-Headers) for GPU parallelization ([Khronos Group](https://www.khronos.org/opencl/))\n- [Win32 API](https://learn.microsoft.com/en-us/windows/win32/api/winbase/) for interactive graphics in Windows ([Microsoft](https://www.microsoft.com/))\n- [X11/Xlib](https://www.x.org/releases/current/doc/libX11/libX11/libX11.html) for interactive graphics in Linux ([The Open Group](https://www.x.org/releases/current/doc/libX11/libX11/libX11.html))\n- [marching-cubes tables](http://paulbourke.net/geometry/polygonise/) for isosurface generation on GPU ([Paul Bourke](http://paulbourke.net/geometry/))\n- [`src/lodepng.cpp`](https://github.com/lvandeve/lodepng/blob/master/lodepng.cpp) and [`src/lodepng.hpp`](https://github.com/lvandeve/lodepng/blob/master/lodepng.h) for `.png` encoding and decoding ([Lode Vandevenne](https://lodev.org/))\n- [SimplexNoise](https://weber.itn.liu.se/~stegu/simplexnoise/SimplexNoise.java) class in [`src/utilities.hpp`](https://github.com/ProjectPhysX/FluidX3D/blob/master/src/utilities.hpp) for generating continuous noise in 2D/3D/4D space ([Stefan Gustavson](https://github.com/stegu))\n- [`skybox/skybox8k.png`](https://www.hdri-hub.com/hdri-skies-aviation-aerospace) for free surface raytracing ([HDRI Hub](https://www.hdri-hub.com/))\n\n\n\n## References\n\n- Lehmann, M.: [Computational study of microplastic transport at the water-air interface with a memory-optimized lattice Boltzmann method](https://doi.org/10.15495/EPub_UBT_00006977). PhD thesis, (2023)\n- Lehmann, M.: [Esoteric Pull and Esoteric Push: Two Simple In-Place Streaming Schemes for the Lattice Boltzmann Method on GPUs](https://doi.org/10.3390/computation10060092). Computation, 10, 92, (2022)\n- Lehmann, M., Krause, M., Amati, G., Sega, M., Harting, J. and Gekle, S.: [Accuracy and performance of the lattice Boltzmann method with 64-bit, 32-bit, and customized 16-bit number formats](https://www.researchgate.net/publication/362275548_Accuracy_and_performance_of_the_lattice_Boltzmann_method_with_64-bit_32-bit_and_customized_16-bit_number_formats). Phys. Rev. E 106, 015308, (2022)\n- Lehmann, M.: [Combined scientific CFD simulation and interactive raytracing with OpenCL](https://www.researchgate.net/publication/360501260_Combined_scientific_CFD_simulation_and_interactive_raytracing_with_OpenCL). IWOCL'22: International Workshop on OpenCL, 3, 1-2, (2022)\n- Lehmann, M., Oehlschlägel, L.M., Häusl, F., Held, A. and Gekle, S.: [Ejection of marine microplastics by raindrops: a computational and experimental study](https://doi.org/10.1186/s43591-021-00018-8). Micropl.&Nanopl. 1, 18, (2021)\n- Lehmann, M.: [High Performance Free Surface LBM on GPUs](https://doi.org/10.15495/EPub_UBT_00005400). Master's thesis, (2019)\n- Lehmann, M. and Gekle, S.: [Analytic Solution to the Piecewise Linear Interface Construction Problem and Its Application in Curvature Calculation for Volume-of-Fluid Simulation Codes](https://doi.org/10.3390/computation10020021). Computation, 10, 21, (2022)\n\n\n\n## Contact\n\n- FluidX3D is solo-developed and maintained by Dr. Moritz Lehmann.\n- For any questions, feedback or other inquiries, contact me at [dr.moritz.lehmann@gmail.com](mailto:dr.moritz.lehmann@gmail.com?subject=FluidX3D).\n- Updates are posted on Mastodon via [@ProjectPhysX](https://mast.hpc.social/@ProjectPhysX)/[#FluidX3D](https://mast.hpc.social/tags/FluidX3D) and on [YouTube](https://youtube.com/@ProjectPhysX).\n\n\n\n## Support\n\nI'm developing FluidX3D in my spare time, to make computational fluid dynamics lightning fast, accessible on all hardware, and free for everyone.\n- You can support FluidX3D by reporting any bugs or things that don't work in the [issues](https://github.com/ProjectPhysX/FluidX3D/issues). I'm welcoming feedback!\n- If you like FluidX3D, share it with friends and colleagues. Spread the word that CFD is now lightning fast, accessible and free.\n- If you want to support FluidX3D financially, you can [sponsor me on GitHub](https://github.com/sponsors/ProjectPhysX) or [buy me a coffee](https://buymeacoffee.com/projectphysx). Thank you!"
        },
        {
          "name": "make.sh",
          "type": "blob",
          "size": 2.4052734375,
          "content": "#!/usr/bin/env bash\n# command line argument(s) for make.sh: device ID(s); if empty, FluidX3D will automatically choose the fastest available device(s)\n\ncase \"$(uname -a)\" in # automatically detect operating system and X11 support on Linux\n\t Darwin*) target=macOS                                                       ;;\n\t*Android) target=Android                                                     ;;\n\t Linux* ) if xhost >&/dev/null; then target=Linux-X11; else target=Linux; fi ;;\n\t*       ) target=Linux                                                       ;;\nesac\n\n#target=Linux-X11 # manually set to compile on Linux with X11 graphics\n#target=Linux     # manually set to compile on Linux (without X11)\n#target=macOS     # manually set to compile on macOS (without X11)\n#target=Android   # manually set to compile on Android (without X11)\n\necho -e \"\\033[92mInfo\\033[0m: Detected Operating System: \"${target}\necho_and_execute() { echo \"$@\"; \"$@\"; }\nif command -v make &>/dev/null; then # if make is available, compile FluidX3D with multiple CPU cores\n\techo -e \"\\033[92mInfo\\033[0m: Compiling with \"$(nproc)\" CPU cores.\"\n\tmake ${target} -j$(nproc) # compile FluidX3D with makefile\nelse # else (make is not installed), compile FluidX3D with a single CPU core\n\techo -e \"\\033[92mInfo\\033[0m: Compiling with 1 CPU core. For faster multi-core compiling, install make with \\\"sudo apt install make\\\".\"\n\tmkdir -p bin # create directory for executable\n\trm -rf temp bin/FluidX3D # prevent execution of old executable if compiling fails\n\tcase \"${target}\" in\n\t\tLinux-X11) echo_and_execute g++ src/*.cpp -o bin/FluidX3D -std=c++17 -pthread -O -Wno-comment -I./src/OpenCL/include -L./src/OpenCL/lib -lOpenCL -I./src/X11/include -L./src/X11/lib -lX11 -lXrandr ;;\n\t\tLinux    ) echo_and_execute g++ src/*.cpp -o bin/FluidX3D -std=c++17 -pthread -O -Wno-comment -I./src/OpenCL/include -L./src/OpenCL/lib -lOpenCL                                                    ;;\n\t\tmacOS    ) echo_and_execute g++ src/*.cpp -o bin/FluidX3D -std=c++17 -pthread -O -Wno-comment -I./src/OpenCL/include -framework OpenCL                                                              ;;\n\t\tAndroid  ) echo_and_execute g++ src/*.cpp -o bin/FluidX3D -std=c++17 -pthread -O -Wno-comment -I./src/OpenCL/include -L/system/vendor/lib64 -lOpenCL                                                ;;\n\tesac\nfi\n\nif [[ $? == 0 ]]; then bin/FluidX3D \"$@\"; fi # run FluidX3D only if last compilation was successful\n"
        },
        {
          "name": "makefile",
          "type": "blob",
          "size": 2.5458984375,
          "content": "MAKEFLAGS = -j$(nproc)\nCC = g++\nCFLAGS = -std=c++17 -pthread -O -Wno-comment\n\n.PHONY: no-target\nno-target:\n\t@echo \"\\033[91mError\\033[0m: Please select one of these targets: make Linux-X11, make Linux, make macOS, make Android\"\n\nLinux-X11 Linux macOS Android: LDFLAGS_OPENCL = -I./src/OpenCL/include\n\nLinux-X11 Linux: LDLIBS_OPENCL = -L./src/OpenCL/lib -lOpenCL\nmacOS: LDLIBS_OPENCL = -framework OpenCL\nAndroid: LDLIBS_OPENCL = -L/system/vendor/lib64 -lOpenCL\n\nLinux-X11: LDFLAGS_X11 = -I./src/X11/include\nLinux macOS Android: LDFLAGS_X11 =\n\nLinux-X11: LDLIBS_X11 = -L./src/X11/lib -lX11 -lXrandr\nLinux macOS Android: LDLIBS_X11 =\n\nLinux-X11 Linux macOS Android: bin/FluidX3D\n\nbin/FluidX3D: temp/graphics.o temp/info.o temp/kernel.o temp/lbm.o temp/lodepng.o temp/main.o temp/setup.o temp/shapes.o make.sh\n\t@mkdir -p bin\n\t$(CC) temp/*.o -o bin/FluidX3D $(CFLAGS) $(LDFLAGS_OPENCL) $(LDLIBS_OPENCL) $(LDFLAGS_X11) $(LDLIBS_X11)\n\ntemp/graphics.o: src/graphics.cpp src/defines.hpp src/graphics.hpp src/lodepng.hpp src/utilities.hpp make.sh\n\t@mkdir -p temp\n\t$(CC) -c src/graphics.cpp -o temp/graphics.o $(CFLAGS) $(LDFLAGS_X11)\n\ntemp/info.o: src/info.cpp src/defines.hpp src/graphics.hpp src/info.hpp src/lbm.hpp src/lodepng.hpp src/opencl.hpp src/units.hpp src/utilities.hpp make.sh\n\t@mkdir -p temp\n\t$(CC) -c src/info.cpp -o temp/info.o $(CFLAGS) $(LDFLAGS_OPENCL)\n\ntemp/kernel.o: src/kernel.cpp src/kernel.hpp src/lodepng.hpp src/utilities.hpp\n\t@mkdir -p temp\n\t$(CC) -c src/kernel.cpp -o temp/kernel.o $(CFLAGS)\n\ntemp/lbm.o: src/lbm.cpp src/defines.hpp src/graphics.hpp src/info.hpp src/lbm.hpp src/lodepng.hpp src/opencl.hpp src/units.hpp src/utilities.hpp make.sh\n\t@mkdir -p temp\n\t$(CC) -c src/lbm.cpp -o temp/lbm.o $(CFLAGS) $(LDFLAGS_OPENCL)\n\ntemp/lodepng.o: src/lodepng.cpp src/lodepng.hpp\n\t@mkdir -p temp\n\t$(CC) -c src/lodepng.cpp -o temp/lodepng.o $(CFLAGS)\n\ntemp/main.o: src/main.cpp src/defines.hpp src/graphics.hpp src/info.hpp src/lbm.hpp src/lodepng.hpp src/opencl.hpp src/setup.hpp src/shapes.hpp src/units.hpp src/utilities.hpp make.sh\n\t@mkdir -p temp\n\t$(CC) -c src/main.cpp -o temp/main.o $(CFLAGS) $(LDFLAGS_OPENCL)\n\ntemp/setup.o: src/setup.cpp src/defines.hpp src/graphics.hpp src/info.hpp src/lbm.hpp src/lodepng.hpp src/opencl.hpp src/setup.hpp src/shapes.hpp src/units.hpp src/utilities.hpp make.sh\n\t@mkdir -p temp\n\t$(CC) -c src/setup.cpp -o temp/setup.o $(CFLAGS) $(LDFLAGS_OPENCL)\n\ntemp/shapes.o: src/shapes.cpp src/shapes.hpp src/utilities.hpp make.sh\n\t@mkdir -p temp\n\t$(CC) -c src/shapes.cpp -o temp/shapes.o $(CFLAGS) $(LDFLAGS_OPENCL)\n\n.PHONY: clean\nclean:\n\t@rm -rf temp bin/FluidX3D\n"
        },
        {
          "name": "skybox",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}