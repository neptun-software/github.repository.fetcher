{
  "metadata": {
    "timestamp": 1736565852266,
    "page": 798,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "LukasBanana/LLGL",
      "stars": 2132,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.080078125,
          "content": "root=true\n[*]\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4306640625,
          "content": "# macOS Finder file .DS_Store\n.DS_Store\n\n# Intermediate build system files\nMakefile\nCMakeFiles\nbuild*/\n*.aps\n*.cache\n*.spvasm\n\n# Runtime output files for testing\nScreenshot.*\nCapture.*\n*.Results.png\nLLGL.trace.json\n\n# Output files from individual tests (Testbed is handled separately)\ntests/Output\n\n# Binary files for Go wrapper (libLLGL.dll, libLLGL.dll.a)\n*.exe\n*.dll\n*.dll.a\n\n# RenderDoc .cap capture files\n*.cap\n\n# VS Code folder\n.vscode"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2529296875,
          "content": "[submodule \"external/SPIRV-Headers\"]\n\tpath = external/SPIRV-Headers\n\turl = https://github.com/LukasBanana/SPIRV-Headers.git\n\tbranch = master\n[submodule \"external/GaussianLib\"]\n\tpath = external/GaussianLib\n\turl = https://github.com/LukasBanana/GaussianLib.git\n"
        },
        {
          "name": "BuildAndroid.sh",
          "type": "blob",
          "size": 11.4033203125,
          "content": "#!/bin/bash\n\nIFS=\"\" # Include whitespaces when expanding arrays of strings\nSOURCE_DIR=$PWD\nOUTPUT_DIR=\"build_android\"\nSKIP_VALIDATION=0\nCLEAR_CACHE=0\nENABLE_VULKAN=\"OFF\"\nENABLE_EXAMPLES=\"ON\"\nBUILD_TYPE=\"Release\"\nPROJECT_ONLY=0\nSTATIC_LIB=\"OFF\"\nANDROID_CXX_LIB=\"c++_shared\" # c++_shared/c++_static\nVERBOSE=0\nGENERATOR=\"CodeBlocks - Unix Makefiles\"\nANDROID_ABI=x86_64\nANDROID_API_LEVEL=21\nSUPPORTED_ANDROID_ABIS=(\"arm64-v8a\" \"armeabi-v7a\" \"x86\" \"x86_64\")\nGLES_VER=\"OpenGLES 3.0\"\nBUILD_APPS=0\n\nprint_help()\n{\n    echo \"USAGE:\"\n    echo \"  BuildAndroid.sh OPTIONS* [OUTPUT_DIR]\"\n    echo \"OPTIONS:\"\n    echo \"  -c, --clear-cache ......... Clear CMake cache and rebuild\"\n    echo \"  -d, --debug ............... Configure Debug build (default is Release)\"\n    echo \"  -h, --help ................ Print this help documentation and exit\"\n    echo \"  -p, --project-only [=G] ... Build project with CMake generator (default is CodeBlocks)\"\n    echo \"  -s, --static-lib .......... Build static lib (default is shared lib)\"\n    echo \"  -v, --verbose ............. Print additional information\"\n    echo \"  --abi=ABI ................. Set Android ABI (default is x86_64; accepts 'all')\"\n    echo \"  --api-level=VERSION ....... Set Android API level (default is 21)\"\n    echo \"  --apps .................... Generate Android Studio projects to build example apps (implies '--abi=all -s')\"\n    echo \"  --gles=VER ................ Enables the maximum OpenGLES version: 300 (default), 310, or 320\"\n    echo \"  --vulkan .................. Include Vulkan renderer\"\n    echo \"  --no-examples ............. Exclude example projects\"\n    echo \"NOTES:\"\n    echo \"  Default output directory is '$OUTPUT_DIR'\"\n}\n\n# Parse arguments\nfor ARG in \"$@\"; do\n    if [ \"$ARG\" = \"-h\" ] || [ \"$ARG\" = \"--help\" ]; then\n        print_help\n        exit 0\n    elif [ \"$ARG\" = \"-c\" ] || [ \"$ARG\" = \"--clear-cache\" ]; then\n        CLEAR_CACHE=1\n    elif [ \"$ARG\" = \"-d\" ] || [ \"$ARG\" = \"--debug\" ]; then\n        BUILD_TYPE=\"Debug\"\n    elif [ \"$ARG\" = \"-p\" ] || [ \"$ARG\" = \"--project-only\" ]; then\n        PROJECT_ONLY=1\n    elif [[ \"$ARG\" == -p=* ]]; then\n        PROJECT_ONLY=1\n        GENERATOR=\"${ARG:3}\"\n    elif [[ \"$ARG\" == --project-only=* ]]; then\n        PROJECT_ONLY=1\n        GENERATOR=\"${ARG:15}\"\n    elif [ \"$ARG\" = \"-s\" ] || [ \"$ARG\" = \"--static-lib\" ]; then\n        STATIC_LIB=\"ON\"\n        ANDROID_CXX_LIB=\"c++_static\"\n    elif [ \"$ARG\" = \"-v\" ] || [ \"$ARG\" = \"--verbose\" ]; then\n        VERBOSE=1\n    elif [[ \"$ARG\" == --abi=* ]]; then\n        ANDROID_ABI=\"${ARG:6}\"\n    elif [[ \"$ARG\" == --api-level=* ]]; then\n        ANDROID_API_LEVEL=${ARG:12}\n    elif [[ \"$ARG\" == --gles=* ]]; then\n        GLES_VER_NO=${ARG:7}\n        case $GLES_VER_NO in\n            320) GLES_VER=\"OpenGLES 3.2\" ;;\n            310) GLES_VER=\"OpenGLES 3.1\" ;;\n            300) GLES_VER=\"OpenGLES 3.0\" ;;\n            *) echo \"Unknown GLES version: $GLES_VER_NO; Must be 320, 310, or 300\"; exit 1 ;;\n        esac\n    elif [ \"$ARG\" = \"--vulkan\" ]; then\n        ENABLE_VULKAN=\"ON\"\n    elif [ \"$ARG\" = \"--no-examples\" ]; then\n        ENABLE_EXAMPLES=\"OFF\"\n    elif [ \"$ARG\" = \"--apps\" ]; then\n        BUILD_APPS=1\n        ANDROID_ABI=\"all\"\n        STATIC_LIB=\"ON\"\n        ANDROID_CXX_LIB=\"c++_static\"\n    else\n        OUTPUT_DIR=\"$ARG\"\n    fi\ndone\n\n# Make sure API level is high enough when Vulkan is enabled\nif [ \"$ENABLE_VULKAN\" = \"ON\" ]; then\n    if [ $ANDROID_API_LEVEL -lt 28 ]; then\n        if [ $VERBOSE -ne 0 ]; then\n            echo \"Clamping API level to 28 for Vulkan support (--api-level=$ANDROID_API_LEVEL)\"\n        fi\n        ANDROID_API_LEVEL=28\n    fi\nfi\n\n# Find Android NDK installation\nNDK_ROOT=\"\"\nif [ -z \"$ANDROID_NDK_HOME\" ]; then\n    if [ -z \"$ANDROID_NDK_ROOT\" ]; then\n        echo \"Error: Neither environment variable 'ANDROID_NDK_HOME' nor 'ANDROID_NDK_ROOT' are set\"\n        exit 1\n    else\n        NDK_ROOT=\"$ANDROID_NDK_ROOT\"\n    fi\nelse\n    NDK_ROOT=\"$ANDROID_NDK_HOME\"\nfi\n\nANDROID_CMAKE_TOOLCHAIN=\"${NDK_ROOT}/build/cmake/android.toolchain.cmake\"\n\nif [ ! -f \"$ANDROID_CMAKE_TOOLCHAIN\" ]; then\n    echo \"Error: CMake toolchain not found: ${ANDROID_CMAKE_TOOLCHAIN}\"\n    exit 1\nfi\n\n# Ensure we are inside the repository folder\nif [ ! -f \"CMakeLists.txt\" ]; then\n    echo \"Error: File not found: CMakeLists.txt\"\n    exit 1\nfi\n\n# Make output build folder\nif [ $CLEAR_CACHE = 1 ] && [ -d \"$OUTPUT_DIR\" ]; then\n    rm -rf \"$OUTPUT_DIR\"\nfi\n\nif [ ! -d \"$OUTPUT_DIR\" ]; then\n    mkdir \"$OUTPUT_DIR\"\nfi\n\n# Checkout external depenencies\nGAUSSIAN_LIB_DIR=\"GaussianLib/include\"\n\nif [ -f \"$SOURCE_DIR/external/$GAUSSIAN_LIB_DIR/Gauss/Gauss.h\" ]; then\n    GAUSSIAN_LIB_DIR=$(realpath \"$SOURCE_DIR/external/$GAUSSIAN_LIB_DIR\")\nelse\n    if [ ! -d \"$OUTPUT_DIR/$GAUSSIAN_LIB_DIR\" ]; then\n        (cd \"$OUTPUT_DIR\" && git clone https://github.com/LukasBanana/GaussianLib.git)\n    fi\n    GAUSSIAN_LIB_DIR=$(realpath \"$OUTPUT_DIR/$GAUSSIAN_LIB_DIR\")\nfi\n\n# Print additional information if in verbose mode\nif [ $VERBOSE -ne 0 ]; then\n    echo \"GAUSSIAN_LIB_DIR=$GAUSSIAN_LIB_DIR\"\n    if [ $PROJECT_ONLY -eq 0 ]; then\n        echo \"BUILD_TYPE=$BUILD_TYPE\"\n    else\n        echo \"GENERATOR=$GENERATOR\"\n    fi\n    echo \"ANDROID_ABI=$ANDROID_ABI\"\n    echo \"ANDROID_API_LEVEL=$ANDROID_API_LEVEL\"\nfi\n\n# Build into output directory (this syntax requires CMake 3.13+)\nBASE_OPTIONS=(\n    -DCMAKE_TOOLCHAIN_FILE=\"$ANDROID_CMAKE_TOOLCHAIN\"\n    -DANDROID_PLATFORM=$ANDROID_API_LEVEL\n    -DANDROID_STL=$ANDROID_CXX_LIB\n    -DANDROID_CPP_FEATURES=\"rtti exceptions\"\n    -DLLGL_BUILD_WRAPPER_C99=ON\n    -DLLGL_BUILD_RENDERER_OPENGLES3=ON\n    -DLLGL_GL_ENABLE_OPENGLES=$GLES_VER\n    -DLLGL_BUILD_RENDERER_NULL=$ENABLE_NULL\n    -DLLGL_BUILD_RENDERER_VULKAN=$ENABLE_VULKAN\n    -DLLGL_VK_ENABLE_SPIRV_REFLECT=$ENABLE_VULKAN\n    -DLLGL_BUILD_EXAMPLES=$ENABLE_EXAMPLES\n    -DLLGL_BUILD_TESTS=OFF\n    -DLLGL_BUILD_STATIC_LIB=$STATIC_LIB\n    -DGaussLib_INCLUDE_DIR:STRING=\"$GAUSSIAN_LIB_DIR\"\n    -S \"$SOURCE_DIR\"\n)\n\nif [ $VERBOSE -ne 0 ]; then\n    BASE_OPTIONS+=(-DCMAKE_VERBOSE_MAKEFILE=ON)\nfi\n\nbuild_with_android_abi()\n{\n    CURRENT_ANDROID_ABI=$1\n    CURRENT_OUTPUT_DIR=$2\n\n    if [ $VERBOSE -ne 0 ]; then\n        echo \"Build: ABI=$CURRENT_ANDROID_ABI, Output=$CURRENT_OUTPUT_DIR\"\n    fi\n\n    OPTIONS=(\n        ${BASE_OPTIONS[@]}\n        -DANDROID_ABI=$CURRENT_ANDROID_ABI\n        -B \"$CURRENT_OUTPUT_DIR\"\n    )\n\n    if [ ! -d \"$CURRENT_OUTPUT_DIR\" ]; then\n        mkdir \"$CURRENT_OUTPUT_DIR\"\n    fi\n\n    if [ $PROJECT_ONLY -eq 0 ]; then\n        cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE ${OPTIONS[@]}\n        cmake --build \"$CURRENT_OUTPUT_DIR\"\n    else\n        cmake ${OPTIONS[@]} -G \"$GENERATOR\"\n    fi\n}\n\nif [ $ANDROID_ABI = \"all\" ]; then\n    declare -i ABI_INDEX=1\n    for ABI in ${SUPPORTED_ANDROID_ABIS[@]}; do\n        if [ $VERBOSE -ne 0 ]; then\n            echo \"[${ABI_INDEX}/${#SUPPORTED_ANDROID_ABIS[@]}] Building with Android ABI: $ABI\"\n            ABI_INDEX+=1\n        fi\n        build_with_android_abi $ABI \"${OUTPUT_DIR}/${ABI}\"\n    done\nelse\n    build_with_android_abi $ANDROID_ABI \"$OUTPUT_DIR\"\nfi\n\n# Build project solutions for example apps\ngenerate_app_project()\n{\n    CURRENT_PROJECT=$1\n\n    echo \"Generate app project: $CURRENT_PROJECT\"\n\n    # Get source folder\n    ASSETS_SOURCE_DIR=\"$SOURCE_DIR/examples/Shared/Assets\"\n\n    if [[ \"${CURRENT_PROJECT:0:4}\" == \"C99_\" ]]; then\n        PROJECT_SOURCE_DIR=\"$SOURCE_DIR/examples/C99\"\n        if [[ \"$CURRENT_PROJECT\" == *D ]]; then\n            PROJECT_SOURCE_DIR=\"$PROJECT_SOURCE_DIR/${CURRENT_PROJECT:4:-1}\"\n        else\n            PROJECT_SOURCE_DIR=\"$PROJECT_SOURCE_DIR/${CURRENT_PROJECT:4}\"\n        fi\n    else\n        PROJECT_SOURCE_DIR=\"$SOURCE_DIR/examples/Cpp\"\n        if [[ \"$CURRENT_PROJECT\" == *D ]]; then\n            PROJECT_SOURCE_DIR=\"$PROJECT_SOURCE_DIR/${CURRENT_PROJECT:0:-1}\"\n        else\n            PROJECT_SOURCE_DIR=\"$PROJECT_SOURCE_DIR/$CURRENT_PROJECT\"\n        fi\n    fi\n\n    # Get destination folder\n    APP_ROOT=\"${OUTPUT_DIR}/apps/Example_$CURRENT_PROJECT\"\n\n    BIN_ROOT=${OUTPUT_DIR}/${ABI}/build\n\n    # Create folder structure\n    mkdir -p \"$APP_ROOT\"\n    PLATFORM_SOURCE_DIR=\"$SOURCE_DIR/examples/Shared/Platform/Android\"\n    cp -r \"$PLATFORM_SOURCE_DIR/app\" \"$APP_ROOT\"\n    cp \"$PLATFORM_SOURCE_DIR/build.gradle\" \"$APP_ROOT/build.gradle\"\n    cp \"$PLATFORM_SOURCE_DIR/settings.gradle\" \"$APP_ROOT/settings.gradle\"\n\n    mkdir -p \"$APP_ROOT/gradle/wrapper\"\n    cp -r \"$PLATFORM_SOURCE_DIR/gradle/wrapper/gradle-wrapper.properties\" \"$APP_ROOT/gradle/wrapper/gradle-wrapper.properties\"\n\n    # Copy binary files into JNI lib folders for respective ABI\n    for ABI in ${SUPPORTED_ANDROID_ABIS[@]}; do\n        LIB_FILENAME=\"libExample_${CURRENT_PROJECT}.so\"\n        SRC_LIB_PATH=\"$OUTPUT_DIR/$ABI/build\"\n        DST_LIB_PATH=\"$APP_ROOT/app/src/main/jniLibs/$ABI\"\n        mkdir -p \"$DST_LIB_PATH\"\n        cp \"$SRC_LIB_PATH/$LIB_FILENAME\" \"$DST_LIB_PATH/$LIB_FILENAME\"\n    done\n\n    # Replace meta data\n    sed -i \"s/LLGL_PROJECT_NAME/Example_${CURRENT_PROJECT}/g\" \"$APP_ROOT/app/src/main/AndroidManifest.xml\"\n    sed -i \"s/LLGL_APP_NAME/${CURRENT_PROJECT}/g\" \"$APP_ROOT/app/src/main/res/values/strings.xml\"\n    sed -i \"s/LLGL_APP_ID/${CURRENT_PROJECT}/g\" \"$APP_ROOT/app/build.gradle\"\n\n    # Find all required assets in Android.assets.txt file of respective project directory and copy them into app folder\n    ASSET_DIR=\"$APP_ROOT/app/src/main/assets\"\n    mkdir -p \"$ASSET_DIR\"\n\n    ASSETS_LIST_FILE=$(find \"$PROJECT_SOURCE_DIR\" -type f -name *.assets.txt)\n    if [ -f \"$ASSETS_LIST_FILE\" ]; then\n        # Read *.assets.txt file line-by-line into array and make sure '\\r' character is not present (on Win32 platform)\n        readarray -t ASSET_FILTERS < <(tr -d '\\r' < \"$ASSETS_LIST_FILE\")\n        ASSET_FILES=()\n        for FILTER in ${ASSET_FILTERS[@]}; do\n            # Search for patterns in both the shared assets and current project folder\n            for FILE in $ASSETS_SOURCE_DIR/$FILTER; do\n                if [ -f \"$FILE\" ]; then\n                    ASSET_FILES+=( \"$FILE\" )\n                fi\n            done\n            for FILE in $PROJECT_SOURCE_DIR/$FILTER; do\n                if [ -f \"$FILE\" ]; then\n                    ASSET_FILES+=( \"$FILE\" )\n                fi\n            done\n        done\n\n        # Copy all asset files into destination folder\n        for FILE in ${ASSET_FILES[@]}; do\n            if [ $VERBOSE -ne 0 ]; then\n                echo \"Copy asset: $(basename $FILE)\"\n            fi\n            cp \"$FILE\" \"$ASSET_DIR/$(basename $FILE)\"\n        done\n    fi\n\n    # Find all shaders and copy them into app folder\n    for FILE in $PROJECT_SOURCE_DIR/*.vert \\\n                $PROJECT_SOURCE_DIR/*.geom \\\n                $PROJECT_SOURCE_DIR/*.tesc \\\n                $PROJECT_SOURCE_DIR/*.tese \\\n                $PROJECT_SOURCE_DIR/*.frag \\\n                $PROJECT_SOURCE_DIR/*.comp \\\n                $PROJECT_SOURCE_DIR/*.spv; do\n        if [ -f \"$FILE\" ]; then\n            if [ $VERBOSE -ne 0 ]; then\n                echo \"Copy shader: $(basename $FILE)\"\n            fi\n            cp \"$FILE\" \"$ASSET_DIR/$(basename $FILE)\"\n        fi\n    done\n}\n\nif [ $BUILD_APPS -ne 0 ]; then\n\n    BIN_FILE_BASE=\"${OUTPUT_DIR}/${SUPPORTED_ANDROID_ABIS[0]}/build/libExample_\"\n    BIN_FILE_BASE_LEN=${#BIN_FILE_BASE}\n    EXAMPLE_BIN_FILES=(${BIN_FILE_BASE}*.so)\n\n    for BIN_FILE in ${EXAMPLE_BIN_FILES[@]}; do\n        if { [ $BUILD_TYPE = \"Debug\" ] && [[ $BIN_FILE == *D.so ]] } || { [ ! $BUILD_TYPE = \"Debug\" ] && ! [[ $BIN_FILE == *D.so ]] }; then\n            BIN_FILE_LEN=${#BIN_FILE}\n            PROJECT_NAME=${BIN_FILE:BIN_FILE_BASE_LEN:BIN_FILE_LEN-BIN_FILE_BASE_LEN-3}\n            generate_app_project $PROJECT_NAME\n        fi\n    done\n\nfi\n"
        },
        {
          "name": "BuildIOS.command",
          "type": "blob",
          "size": 4.1337890625,
          "content": "#!/bin/sh\n\nSOURCE_DIR=\"$(dirname $0)\"\nOUTPUT_DIR=\"$SOURCE_DIR/build_ios\"\nCLEAR_CACHE=0\nENABLE_NULL=\"OFF\"\nENABLE_GLES3=\"OFF\"\nENABLE_EXAMPLES=\"ON\"\nENABLE_TESTS=\"OFF\"\nBUILD_TYPE=\"Release\"\nDEPLOYMENT_TARGET=\"11.0\"\nPROJECT_ONLY=0\nSTATIC_LIB=\"OFF\"\nVERBOSE=0\n\n# When this .command script is launched from Finder, we have to change to the source directory explicitly\ncd $SOURCE_DIR\n\nprint_help()\n{\n    echo \"USAGE:\"\n    echo \"  BuildIOS.command OPTIONS* [OUTPUT_DIR]\"\n    echo \"OPTIONS:\"\n    echo \"  -c, --clear-cache ......... Clear CMake cache and rebuild\"\n    echo \"  -d, --debug ............... Configure Debug build (default is Release)\"\n    echo \"  -h, --help ................ Print this help documentation and exit\"\n    echo \"  -p, --project-only ........ Build project solution only (no compilation)\"\n    echo \"  -s, --static-lib .......... Build static lib (default is shared lib)\"\n    echo \"  -t, --target T ............ Sets deployment target to T (default is 11.0)\"\n    echo \"  -v, --verbose ............. Print additional information\"\n    echo \"  --null .................... Include Null renderer\"\n    echo \"  --gles .................... Include OpenGL ES 3 renderer\"\n    echo \"  --no-examples ............. Exclude example projects\"\n    echo \"NOTES:\"\n    echo \"  Default output directory is 'build_ios'\"\n}\n\n# Parse arguments\nREAD_TARGET=0\nfor ARG in \"$@\"; do\n    if [ $READ_TARGET = 1 ]; then\n        DEPLOYMENT_TARGET=\"$ARG\"\n        READ_TARGET=0\n    else\n        if [ \"$ARG\" = \"-h\" ] || [ \"$ARG\" = \"--help\" ]; then\n            print_help\n            exit 0\n        elif [ \"$ARG\" = \"-c\" ] || [ \"$ARG\" = \"--clear-cache\" ]; then\n            CLEAR_CACHE=1\n        elif [ \"$ARG\" = \"-d\" ] || [ \"$ARG\" = \"--debug\" ]; then\n            BUILD_TYPE=\"Debug\"\n        elif [ \"$ARG\" = \"-p\" ] || [ \"$ARG\" = \"--project-only\" ]; then\n            PROJECT_ONLY=1\n        elif [ \"$ARG\" = \"-s\" ] || [ \"$ARG\" = \"--static-lib\" ]; then\n            STATIC_LIB=\"ON\"\n        elif [ \"$ARG\" = \"-t\" ] || [ \"$ARG\" = \"--target\" ]; then\n            READ_TARGET=1\n        elif [ \"$ARG\" = \"-v\" ] || [ \"$ARG\" = \"--verbose\" ]; then\n            VERBOSE=1\n        elif [ \"$ARG\" = \"--null\" ]; then\n            ENABLE_NULL=\"ON\"\n        elif [ \"$ARG\" = \"--gles\" ]; then\n            ENABLE_GLES3=\"ON\"\n        elif [ \"$ARG\" = \"--no-examples\" ]; then\n            ENABLE_EXAMPLES=\"OFF\"\n        else\n            OUTPUT_DIR=\"$ARG\"\n        fi\n    fi\ndone\n\n# Ensure we are inside the repository folder\nif [ ! -f \"$SOURCE_DIR/CMakeLists.txt\" ]; then\n    echo \"Error: File not found: CMakeLists.txt\"\n    exit 1\nfi\n\n# Make output build folder\nif [ $CLEAR_CACHE = 1 ] && [ -d \"$OUTPUT_DIR\" ]; then\n    rm -rf \"$OUTPUT_DIR\"\nfi\n\nif [ ! -d \"$OUTPUT_DIR\" ]; then\n    mkdir \"$OUTPUT_DIR\"\nfi\n\n# Checkout external depenencies\nGAUSSIAN_LIB_DIR=\"GaussianLib/include\"\n\nif [ -f \"$SOURCE_DIR/external/$GAUSSIAN_LIB_DIR/Gauss/Gauss.h\" ]; then\n    GAUSSIAN_LIB_DIR=\"$SOURCE_DIR/external/$GAUSSIAN_LIB_DIR\"\nelse\n    if [ ! -d \"$OUTPUT_DIR/$GAUSSIAN_LIB_DIR\" ]; then\n        (cd \"$OUTPUT_DIR\" && git clone https://github.com/LukasBanana/GaussianLib.git)\n    fi\n    GAUSSIAN_LIB_DIR=\"$OUTPUT_DIR/$GAUSSIAN_LIB_DIR\"\nfi\n\n# Print additional information if in verbose mode\nif [ $VERBOSE -eq 1 ]; then\n    echo \"DEPLOYMENT_TARGET=$DEPLOYMENT_TARGET\"\n    echo \"GAUSSIAN_LIB_DIR=$GAUSSIAN_LIB_DIR\"\n    if [ $PROJECT_ONLY -eq 0 ]; then\n        echo \"BUILD_TYPE=$BUILD_TYPE\"\n    fi\nfi\n\n# Build into output directory (this syntax requires CMake 3.13+)\nOPTIONS=(\n    -DCMAKE_SYSTEM_NAME=iOS\n    -DCMAKE_OSX_ARCHITECTURES=\"arm64;x86_64\"\n    -DCMAKE_OSX_DEPLOYMENT_TARGET=\"$DEPLOYMENT_TARGET\"\n    -DCMAKE_XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH=NO\n    -DCMAKE_IOS_INSTALL_COMBINED=ON\n    -DLLGL_BUILD_RENDERER_NULL=$ENABLE_NULL\n    -DLLGL_BUILD_RENDERER_OPENGLES3=$ENABLE_GLES3\n    -DLLGL_BUILD_RENDERER_METAL=ON\n    -DLLGL_BUILD_STATIC_LIB=$STATIC_LIB\n    -DLLGL_BUILD_EXAMPLES=$ENABLE_EXAMPLES\n    -DLLGL_BUILD_TESTS=$ENABLE_TESTS\n    -DGaussLib_INCLUDE_DIR:STRING=\"$GAUSSIAN_LIB_DIR\"\n    -S \"$SOURCE_DIR\"\n    -B \"$OUTPUT_DIR\"\n)\n\nif [ $PROJECT_ONLY -eq 0 ]; then\n    cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE ${OPTIONS[@]}\n    cmake --build \"$OUTPUT_DIR\" -- -sdk iphonesimulator\nelse\n    cmake ${OPTIONS[@]} -G Xcode\nfi\n"
        },
        {
          "name": "BuildLinux.sh",
          "type": "blob",
          "size": 5.3095703125,
          "content": "#!/bin/bash\n\nSOURCE_DIR=$PWD\nOUTPUT_DIR=\"build_linux\"\nSKIP_VALIDATION=0\nCLEAR_CACHE=0\nENABLE_NULL=\"OFF\"\nENABLE_VULKAN=\"OFF\"\nENABLE_D3D11=\"OFF\"\nENABLE_D3D12=\"OFF\"\nENABLE_EXAMPLES=\"ON\"\nENABLE_TESTS=\"ON\"\nENABLE_GL2X=\"OFF\"\nBUILD_TYPE=\"Release\"\nPROJECT_ONLY=0\nSTATIC_LIB=\"OFF\"\nVERBOSE=0\nGENERATOR=\"CodeBlocks - Unix Makefiles\"\n\n# Check whether we are on a Linux distribution or MSYS on Windows\n[ \"$#\" -ge 1 ] && [ \"$1\" = \"-msys\" ] && PLATFORM_MSYS=1 || PLATFORM_MSYS=0\n\nif [ $PLATFORM_MSYS -eq 1 ]; then\n    OUTPUT_DIR=\"build_msys2\"\nfi\n\nprint_help()\n{\n    echo \"USAGE:\"\nif [ $PLATFORM_MSYS -eq 1 ]; then\n    echo \"  BuildMsys2.sh OPTIONS* [OUTPUT_DIR]\"\nelse\n    echo \"  BuildLinux.sh OPTIONS* [OUTPUT_DIR]\"\nfi\n    echo \"OPTIONS:\"\n    echo \"  -c, --clear-cache ......... Clear CMake cache and rebuild\"\n    echo \"  -d, --debug ............... Configure Debug build (default is Release)\"\n    echo \"  -h, --help ................ Print this help documentation and exit\"\n    echo \"  -p, --project-only [=G] ... Build project with CMake generator (default is CodeBlocks)\"\n    echo \"  -s, --static-lib .......... Build static lib (default is shared lib)\"\n    echo \"  -S, --skip-validation ..... Skip check for missing packages (X11, OpenGL etc.)\"\n    echo \"  -v, --verbose ............. Print additional information\"\n    echo \"  --legacy .................. Use GL2.x legacy mode\"\n    echo \"  --null .................... Include Null renderer\"\n    echo \"  --vulkan .................. Include Vulkan renderer\"\nif [ $PLATFORM_MSYS -eq 1 ]; then\n    echo \"  --d3d11 ................... Include D3D11 renderer (MSYS only) \"\n    echo \"  --d3d12 ................... Include D3D12 renderer (MSYS only) \"\nfi\n    echo \"  --no-examples ............. Exclude example projects\"\n    echo \"  --no-tests ................ Exclude test projects\"\n    echo \"NOTES:\"\n    echo \"  Default output directory is '$OUTPUT_DIR'\"\n}\n\n# Parse arguments\nfor ARG in \"$@\"; do\n    if [ \"$ARG\" = \"-h\" ] || [ \"$ARG\" = \"--help\" ]; then\n        print_help\n        exit 0\n    elif [ \"$ARG\" = \"-c\" ] || [ \"$ARG\" = \"--clear-cache\" ]; then\n        CLEAR_CACHE=1\n    elif [ \"$ARG\" = \"-d\" ] || [ \"$ARG\" = \"--debug\" ]; then\n        BUILD_TYPE=\"Debug\"\n    elif [ \"$ARG\" = \"-p\" ] || [ \"$ARG\" = \"--project-only\" ]; then\n        PROJECT_ONLY=1\n    elif [[ \"$ARG\" == -p=* ]]; then\n        PROJECT_ONLY=1\n        GENERATOR=\"${ARG:3}\"\n    elif [[ \"$ARG\" == --project-only=* ]]; then\n        PROJECT_ONLY=1\n        GENERATOR=\"${ARG:15}\"\n    elif [ \"$ARG\" = \"-s\" ] || [ \"$ARG\" = \"--static-lib\" ]; then\n        STATIC_LIB=\"ON\"\n    elif [ \"$ARG\" = \"-v\" ] || [ \"$ARG\" = \"--verbose\" ]; then\n        VERBOSE=1\n    elif [ \"$ARG\" = \"-S\" ] || [ \"$ARG\" = \"--skip-validation\" ]; then\n        SKIP_VALIDATION=1\n    elif [ \"$ARG\" = \"--legacy\" ]; then\n        ENABLE_GL2X=\"ON\"\n    elif [ \"$ARG\" = \"--null\" ]; then\n        ENABLE_NULL=\"ON\"\n    elif [ \"$ARG\" = \"--vulkan\" ]; then\n        ENABLE_VULKAN=\"ON\"\n    elif [ \"$ARG\" = \"--d3d11\" ]; then\n        if [ $PLATFORM_MSYS -eq 1 ]; then\n            ENABLE_D3D11=\"ON\"\n        else\n            echo \"Warning: D3D11 backend is only supported for MSYS\"\n        fi\n    elif [ \"$ARG\" = \"--d3d12\" ]; then\n        if [ $PLATFORM_MSYS -eq 1 ]; then\n            ENABLE_D3D12=\"ON\"\n        else\n            echo \"Warning: D3D12 backend is only supported for MSYS\"\n        fi\n    elif [ \"$ARG\" = \"--no-examples\" ]; then\n        ENABLE_EXAMPLES=\"OFF\"\n    elif [ \"$ARG\" = \"--no-tests\" ]; then\n        ENABLE_TESTS=\"OFF\"\n    elif [ ! \"$ARG\" = \"-msys\" ]; then\n        OUTPUT_DIR=\"$ARG\"\n    fi\ndone\n\n# Check packages are installed\nif [ $SKIP_VALIDATION -eq 0 ]; then\n    source scripts/ListMissingPackages.sh\nfi\n\n# Ensure we are inside the repository folder\nif [ ! -f \"CMakeLists.txt\" ]; then\n    echo \"Error: File not found: CMakeLists.txt\"\n    exit 1\nfi\n\n# Make output build folder\nif [ $CLEAR_CACHE = 1 ] && [ -d \"$OUTPUT_DIR\" ]; then\n    rm -rf \"$OUTPUT_DIR\"\nfi\n\nif [ ! -d \"$OUTPUT_DIR\" ]; then\n    mkdir \"$OUTPUT_DIR\"\nfi\n\n# Checkout external depenencies\nGAUSSIAN_LIB_DIR=\"GaussianLib/include\"\n\nif [ -f \"$SOURCE_DIR/external/$GAUSSIAN_LIB_DIR/Gauss/Gauss.h\" ]; then\n    GAUSSIAN_LIB_DIR=$(realpath \"$SOURCE_DIR/external/$GAUSSIAN_LIB_DIR\")\nelse\n    if [ ! -d \"$OUTPUT_DIR/$GAUSSIAN_LIB_DIR\" ]; then\n        (cd \"$OUTPUT_DIR\" && git clone https://github.com/LukasBanana/GaussianLib.git)\n    fi\n    GAUSSIAN_LIB_DIR=$(realpath \"$OUTPUT_DIR/$GAUSSIAN_LIB_DIR\")\nfi\n\n# Print additional information if in verbose mode\nif [ $VERBOSE -eq 1 ]; then\n    echo \"GAUSSIAN_LIB_DIR=$GAUSSIAN_LIB_DIR\"\n    if [ $PROJECT_ONLY -eq 0 ]; then\n        echo \"BUILD_TYPE=$BUILD_TYPE\"\n    else\n        echo \"GENERATOR=$GENERATOR\"\n    fi\nfi\n\n# Build into output directory (this syntax requires CMake 3.13+)\nOPTIONS=(\n    -DLLGL_BUILD_WRAPPER_C99=ON\n    -DLLGL_BUILD_RENDERER_OPENGL=ON\n    -DLLGL_GL_ENABLE_OPENGL2X=$ENABLE_GL2X\n    -DLLGL_BUILD_RENDERER_NULL=$ENABLE_NULL\n    -DLLGL_BUILD_RENDERER_VULKAN=$ENABLE_VULKAN\n    -DLLGL_BUILD_RENDERER_DIRECT3D11=$ENABLE_D3D11\n    -DLLGL_BUILD_RENDERER_DIRECT3D12=$ENABLE_D3D12\n    -DLLGL_BUILD_EXAMPLES=$ENABLE_EXAMPLES\n    -DLLGL_BUILD_TESTS=$ENABLE_TESTS\n    -DLLGL_BUILD_STATIC_LIB=$STATIC_LIB\n    -DGaussLib_INCLUDE_DIR:STRING=\"$GAUSSIAN_LIB_DIR\"\n    -S \"$SOURCE_DIR\"\n    -B \"$OUTPUT_DIR\"\n)\n\nif [ $PROJECT_ONLY -eq 0 ]; then\n    cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE ${OPTIONS[@]}\n    cmake --build \"$OUTPUT_DIR\"\nelse\n    cmake ${OPTIONS[@]} -G \"$GENERATOR\"\nfi\n"
        },
        {
          "name": "BuildMacOS.command",
          "type": "blob",
          "size": 8.1357421875,
          "content": "#!/bin/sh\n\nSOURCE_DIR=\"$(dirname $0)\"\nOUTPUT_DIR=\"$SOURCE_DIR/build_macos\"\nCLEAR_CACHE=0\nENABLE_NULL=\"OFF\"\nENABLE_METAL=\"ON\"\nENABLE_OPENGL=\"OFF\"\nENABLE_EXAMPLES=\"ON\"\nENABLE_TESTS=\"ON\"\nENABLE_WRAPPER_C99=\"ON\"\nBUILD_TYPE=\"Release\"\nPROJECT_ONLY=0\nSTATIC_LIB=\"OFF\"\nVERBOSE=0\nGENERATOR=\"\"\n\nLEGACY=0\nLEGACY_COMPILER=\"\"\nLEGACY_CXX=\"\"\nLEGACY_CC=\"\"\n\n# When this .command script is launched from Finder, we have to change to the source directory explicitly\ncd $SOURCE_DIR\n\nprint_help()\n{\n    echo \"USAGE:\"\n    echo \"  BuildMacOS.command OPTIONS* [OUTPUT_DIR]\"\n    echo \"OPTIONS:\"\n    echo \"  -c, --clear-cache ......... Clear CMake cache and rebuild\"\n    echo \"  -d, --debug ............... Configure Debug build (default is Release)\"\n    echo \"  -g, --generator=G ......... Select CMake generator (or cmake's default)\"\n    echo \"  -h, --help ................ Print this help documentation and exit\"\n    echo \"  -p, --project-only ........ Build project solution only (no compilation)\"\n    echo \"  -s, --static-lib .......... Build static lib (default is shared lib)\"\n    echo \"  -v, --verbose ............. Print additional information\"\n    echo \"  --null .................... Include Null renderer\"\n    echo \"  --gl ...................... Include OpenGL renderer\"\n    echo \"  --no-examples ............. Exclude example projects\"\n    echo \"  --no-tests ................ Exclude test projects\"\n    echo \"  --no-wrapper .............. Exclude C99 wrapper\"\n    echo \"  --legacy [=VER] ........... Legacy mode via MacPorts compiler (e.g. clang-11)\"\n    echo \"NOTES:\"\n    echo \"  Default output directory is 'build_macos'\"\n}\n\n# Parse arguments\nfor ARG in \"$@\"; do\n    if [ \"$ARG\" = \"-h\" ] || [ \"$ARG\" = \"--help\" ]; then\n        print_help\n        exit 0\n    elif [ \"$ARG\" = \"-c\" ] || [ \"$ARG\" = \"--clear-cache\" ]; then\n        CLEAR_CACHE=1\n    elif [ \"$ARG\" = \"-d\" ] || [ \"$ARG\" = \"--debug\" ]; then\n        BUILD_TYPE=\"Debug\"\n    elif [[ \"$ARG\" == -g=* ]]; then\n        GENERATOR=\"${ARG:3}\"\n    elif [[ \"$ARG\" == --generator=* ]]; then\n        GENERATOR=\"${ARG:12}\"\n    elif [ \"$ARG\" = \"-p\" ] || [ \"$ARG\" = \"--project-only\" ]; then\n        PROJECT_ONLY=1\n    elif [ \"$ARG\" = \"-s\" ] || [ \"$ARG\" = \"--static-lib\" ]; then\n        STATIC_LIB=\"ON\"\n    elif [ \"$ARG\" = \"-v\" ] || [ \"$ARG\" = \"--verbose\" ]; then\n        VERBOSE=1\n    elif [ \"$ARG\" = \"--null\" ]; then\n        ENABLE_NULL=\"ON\"\n    elif [ \"$ARG\" = \"--gl\" ]; then\n        ENABLE_OPENGL=\"ON\"\n    elif [ \"$ARG\" = \"--no-examples\" ]; then\n        ENABLE_EXAMPLES=\"OFF\"\n    elif [ \"$ARG\" = \"--no-tests\" ]; then\n        ENABLE_TESTS=\"OFF\"\n    elif [ \"$ARG\" = \"--no-wrapper\" ]; then\n        ENABLE_WRAPPER_C99=\"OFF\"\n    elif [ \"$ARG\" = \"--legacy\" ]; then\n        LEGACY=1\n    elif [[ \"$ARG\" == --legacy=* ]]; then\n        LEGACY=1\n        LEGACY_COMPILER=\"${ARG:9}\"\n    else\n        OUTPUT_DIR=\"$ARG\"\n    fi\ndone\n\n# Ensure we are inside the repository folder\nif [ ! -f \"$SOURCE_DIR/CMakeLists.txt\" ]; then\n    echo \"Error: File not found: CMakeLists.txt\"\n    exit 1\nfi\n\n# Verify configuration for legacy mode\nif [ $LEGACY -ne 0 ]; then\n    # Legacy mode only supports GL2.x\n    ENABLE_OPENGL=\"ON\"\n    ENABLE_METAL=\"OFF\"\n\n    PREFERRED_CLANG_VERSIONS=(15 14 13 12 11 16 17)\n    KNOWN_BAD_VERSIONS=(16 17)\n\n    if [ -z $LEGACY_COMPILER ]; then\n        # Find available compiler (start with clang-15 as clang-16 and 17 are known to have linker problems)\n        for VER in ${PREFERRED_CLANG_VERSIONS[@]}; do\n            if command -v clang++-mp-$VER &> /dev/null; then\n                LEGACY_CXX=\"clang++-mp-$VER\"\n                LEGACY_CC=\"clang-mp-$VER\"\n                break\n            fi\n        done\n    else\n        # Ensure MacPort of input compiler is installed (see macports.org)\n        if [[ \"$LEGACY_COMPILER\" == clang-* ]]; then\n            LEGACY_COMPILER_VER=${LEGACY_COMPILER:6}\n            LEGACY_CXX=\"clang++-mp-$LEGACY_COMPILER_VER\"\n            LEGACY_CC=\"clang-mp-$LEGACY_COMPILER_VER\"\n            if ! command -v $LEGACY_CXX &> /dev/null; then\n                echo \"Error: MacPort of Clang $LEGACY_COMPILER_VER is not installed (see macports.org)!\"\n                echo \"       Run the following command to install it:\"\n                echo \"       $ sudo port install $LEGACY_COMPILER\"\n                exit 1\n            fi\n        else\n            echo \"Error: Unsupported compiler for legacy mode: ${LEGACY_COMPILER}\"\n            echo \"       To select Clang 11 for instance, run the following command:\"\n            echo \"       $ ./BuildMacOS.command --legacy=clang-11\"\n            exit 1\n        fi\n    fi\n\n    # Check if no compiler has been found\n    if [ -z $LEGACY_CXX ]; then\n        echo \"Error: Could not find suitable compiler for legacy mode!\"\n        exit 1\n    fi\n\n    if [ $VERBOSE -ne 0 ]; then\n        echo \"Found suitable compiler for legacy mode: clang-$VER\"\n    fi\n\n    # Warn about known compiler versions to cause problems\n    for VER in ${KNOWN_BAD_VERSIONS[@]}; do\n        if [ \"$LEGACY_COMPILER\" = \"clang-$VER\" ]; then\n            echo \"Warning: Compiler $LEGACY_COMPILER is known to have problems building LLGL\"\n            break\n        fi\n    done\nfi\n\n# Make output build folder\nif [ $CLEAR_CACHE = 1 ] && [ -d \"$OUTPUT_DIR\" ]; then\n    rm -rf \"$OUTPUT_DIR\"\nfi\n\nif [ ! -d \"$OUTPUT_DIR\" ]; then\n    mkdir \"$OUTPUT_DIR\"\nfi\n\n# Checkout external dependencies\nGAUSSIAN_LIB_DIR=\"GaussianLib/include\"\n\nif [ -f \"$SOURCE_DIR/external/$GAUSSIAN_LIB_DIR/Gauss/Gauss.h\" ]; then\n    GAUSSIAN_LIB_DIR=\"$SOURCE_DIR/external/$GAUSSIAN_LIB_DIR\"\nelse\n    if [ ! -d \"$OUTPUT_DIR/$GAUSSIAN_LIB_DIR\" ]; then\n        (cd \"$OUTPUT_DIR\" && git clone https://github.com/LukasBanana/GaussianLib.git)\n    fi\n    GAUSSIAN_LIB_DIR=\"$OUTPUT_DIR/$GAUSSIAN_LIB_DIR\"\nfi\n\n# Print additional information if in verbose mode\nif [ $VERBOSE -ne 0 ]; then\n    echo \"GAUSSIAN_LIB_DIR=$GAUSSIAN_LIB_DIR\"\n    if [ $PROJECT_ONLY -eq 0 ]; then\n        echo \"BUILD_TYPE=$BUILD_TYPE\"\n    fi\nfi\n\n# Build into output directory (this syntax requires CMake 3.13+)\nOPTIONS=(\n    -DLLGL_BUILD_RENDERER_NULL=$ENABLE_NULL\n    -DLLGL_BUILD_RENDERER_OPENGL=$ENABLE_OPENGL\n    -DLLGL_BUILD_RENDERER_METAL=$ENABLE_METAL\n    -DLLGL_BUILD_EXAMPLES=$ENABLE_EXAMPLES\n    -DLLGL_BUILD_TESTS=$ENABLE_TESTS\n    -DLLGL_BUILD_STATIC_LIB=$STATIC_LIB\n    -DLLGL_BUILD_WRAPPER_C99=$ENABLE_WRAPPER_C99\n    -DGaussLib_INCLUDE_DIR:STRING=\"$GAUSSIAN_LIB_DIR\"\n    -S \"$SOURCE_DIR\"\n    -B \"$OUTPUT_DIR\"\n)\n\nif [ $LEGACY -ne 0 ]; then\n    # Compile in legacy mode with specific Clang compiler.\n    # GNU 4 from Xcode 3 will not work, so choose Clang from MacPorts.\n    # Also build for GL 2.x only and CoreVideo turned off.\n    LEGACY_OPTIONS=(\n        -E\n        env\n        CXX=$LEGACY_CXX\n        CC=$LEGACY_CC\n        cmake\n        -DLLGL_MACOS_ENABLE_COREVIDEO=OFF\n        -DLLGL_GL_ENABLE_OPENGL2X=ON\n    )\n    if [ $PROJECT_ONLY -eq 0 ]; then\n        if [ -z \"$GENERATOR\" ]; then\n            cmake ${LEGACY_OPTIONS[@]} -DCMAKE_BUILD_TYPE=$BUILD_TYPE ${OPTIONS[@]} # CMake default generator\n        else\n            cmake ${LEGACY_OPTIONS[@]} -DCMAKE_BUILD_TYPE=$BUILD_TYPE ${OPTIONS[@]} -G \"$GENERATOR\"\n        fi\n        cmake --build \"$OUTPUT_DIR\"\n    else\n        if [ -z \"$GENERATOR\" ]; then\n            GENERATOR=\"Xcode\" # Default to Xcode for project solution\n        fi\n        cmake ${LEGACY_OPTIONS[@]} ${OPTIONS[@]} -G \"$GENERATOR\"\n    fi\nelse\n    if [ $PROJECT_ONLY -eq 0 ]; then\n        if [ -z \"$GENERATOR\" ]; then\n            cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE ${OPTIONS[@]} # CMake default generator\n        else\n            cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE ${OPTIONS[@]} -G \"$GENERATOR\"\n        fi\n        cmake --build \"$OUTPUT_DIR\"\n\n        # Compile Metal shaders for all examples into the default.metallib.\n        # This is done by Xcode automatically when built from within the IDE,\n        # so we only do this when no project files are generated.\n        COMPILE_METAL_SCRIPT=$SOURCE_DIR/scripts/CompileMetalToMetallib.sh\n        if [ $VERBOSE -ne 0 ]; then\n            $COMPILE_METAL_SCRIPT macosx \"$OUTPUT_DIR/build\" -v\n        else\n            $COMPILE_METAL_SCRIPT macosx \"$OUTPUT_DIR/build\"\n        fi\n    else\n        if [ -z \"$GENERATOR\" ]; then\n            GENERATOR=\"Xcode\" # Default to Xcode for project solution\n        fi\n        cmake ${OPTIONS[@]} -G \"$GENERATOR\"\n    fi\nfi\n"
        },
        {
          "name": "BuildMsys2.sh",
          "type": "blob",
          "size": 0.048828125,
          "content": "#!/bin/bash\n./$(dirname $0)/BuildLinux.sh -msys $@"
        },
        {
          "name": "BuildWasm.sh",
          "type": "blob",
          "size": 5.4931640625,
          "content": "#!/bin/bash\n\nSOURCE_DIR=$PWD\nOUTPUT_DIR=\"build_wasm\"\nCLEAR_CACHE=0\nENABLE_EXAMPLES=\"ON\"\nENABLE_TESTS=\"ON\"\nENABLE_PTHREADS=\"OFF\"\nBUILD_TYPE=\"Release\"\nPROJECT_ONLY=0\nVERBOSE=0\nGENERATOR=\"CodeBlocks - Unix Makefiles\"\n\n# Check whether we are on a Linux distribution or MSYS on Windows\nprint_help()\n{\n    echo \"USAGE:\"\n    echo \"  BuildWasm.sh OPTIONS* [OUTPUT_DIR]\"\n    echo \"OPTIONS:\"\n    echo \"  -c, --clear-cache ......... Clear CMake cache and rebuild\"\n    echo \"  -h, --help ................ Print this help documentation and exit\"\n    echo \"  -d, --debug ............... Configure Debug build (default is Release)\"\n    echo \"  -p, --project-only [=G] ... Build project with CMake generator (default is CodeBlocks)\"\n    echo \"  -v, --verbose ............. Print additional information\"\n    echo \"  --no-examples ............. Exclude example projects\"\n    echo \"  --no-tests ................ Exclude test projects\"\n    echo \"  --pthreads ................ Enable pthreads (limits browser availability)\"\n    echo \"NOTES:\"\n    echo \"  Default output directory is '$OUTPUT_DIR'\"\n}\n\n# Parse arguments\nfor ARG in \"$@\"; do\n    if [ \"$ARG\" = \"-h\" ] || [ \"$ARG\" = \"--help\" ]; then\n        print_help\n        exit 0\n    elif [ \"$ARG\" = \"-c\" ] || [ \"$ARG\" = \"--clear-cache\" ]; then\n        CLEAR_CACHE=1\n    elif [ \"$ARG\" = \"-d\" ] || [ \"$ARG\" = \"--debug\" ]; then\n        BUILD_TYPE=\"Debug\"\n    elif [ \"$ARG\" = \"-p\" ] || [ \"$ARG\" = \"--project-only\" ]; then\n        PROJECT_ONLY=1\n    elif [[ \"$ARG\" == -p=* ]]; then\n        PROJECT_ONLY=1\n        GENERATOR=\"${ARG:3}\"\n    elif [[ \"$ARG\" == --project-only=* ]]; then\n        PROJECT_ONLY=1\n        GENERATOR=\"${ARG:15}\"\n    elif [ \"$ARG\" = \"-v\" ] || [ \"$ARG\" = \"--verbose\" ]; then\n        VERBOSE=1\n    elif [ \"$ARG\" = \"--null\" ]; then\n        ENABLE_NULL=\"ON\"\n    elif [ \"$ARG\" = \"--vulkan\" ]; then\n        ENABLE_VULKAN=\"ON\"\n    elif [ \"$ARG\" = \"--no-examples\" ]; then\n        ENABLE_EXAMPLES=\"OFF\"\n    elif [ \"$ARG\" = \"--no-tests\" ]; then\n        ENABLE_TESTS=\"OFF\"\n    elif [ \"$ARG\" = \"--pthreads\" ]; then\n        ENABLE_PTHREADS=\"ON\"\n    else\n        OUTPUT_DIR=\"$ARG\"\n    fi\ndone\n\n# Ensure we are inside the repository folder\nif [ ! -f \"CMakeLists.txt\" ]; then\n    echo \"Error: File not found: CMakeLists.txt\"\n    exit 1\nfi\n\n# Make output build folder\nif [ $CLEAR_CACHE = 1 ] && [ -d \"$OUTPUT_DIR\" ]; then\n    rm -rf \"$OUTPUT_DIR\"\nfi\n\nif [ ! -d \"$OUTPUT_DIR\" ]; then\n    mkdir \"$OUTPUT_DIR\"\nfi\n\n# Wrapper for 'realpath' when it's not available (like on macOS)\nget_realpath()\n{\n    if command -v realpath &> /dev/null; then\n        echo $(realpath \"$1\")\n    else\n        echo \"$1\"\n    fi\n}\n\n# Checkout external depenencies\nGAUSSIAN_LIB_DIR=\"GaussianLib/include\"\n\nif [ -f \"$SOURCE_DIR/external/$GAUSSIAN_LIB_DIR/Gauss/Gauss.h\" ]; then\n    GAUSSIAN_LIB_DIR=$(get_realpath \"$SOURCE_DIR/external/$GAUSSIAN_LIB_DIR\")\nelse\n    if [ ! -d \"$OUTPUT_DIR/$GAUSSIAN_LIB_DIR\" ]; then\n        (cd \"$OUTPUT_DIR\" && git clone https://github.com/LukasBanana/GaussianLib.git)\n    fi\n    GAUSSIAN_LIB_DIR=$(get_realpath \"$OUTPUT_DIR/$GAUSSIAN_LIB_DIR\")\nfi\n\n# Print additional information if in verbose mode\nif [ $VERBOSE -ne 0 ]; then\n    echo \"GAUSSIAN_LIB_DIR=$GAUSSIAN_LIB_DIR\"\n    if [ $PROJECT_ONLY -eq 0 ]; then\n        echo \"BUILD_TYPE=$BUILD_TYPE\"\n    else\n        echo \"GENERATOR=$GENERATOR\"\n    fi\nfi\n\n# Find Emscripten SDK\nif [ -z \"$EMSDK\" ]; then\n    echo \"Error: Missing EMSDK environment variable. Run 'source <PATH-TO-EMSDK>/emsdk_env.sh' to fix it.\"\n    exit 1\nfi\n\nEMSCRIPTEN_CMAKE_TOOLCHAIN=\"$EMSDK/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake\"\n\nif [ ! -f \"$EMSCRIPTEN_CMAKE_TOOLCHAIN\" ]; then\n    echo \"Error: Could not find file $EMSCRIPTEN_CMAKE_TOOLCHAIN\"\n    exit 1\nfi\n\n# Build into output directory (this syntax requried CMake 3.13+)\nOPTIONS=(\n    -DCMAKE_TOOLCHAIN_FILE=\"$EMSCRIPTEN_CMAKE_TOOLCHAIN\"\n    -DLLGL_BUILD_RENDERER_WEBGL=ON\n    -DLLGL_GL_ENABLE_OPENGL2X=OFF\n    -DLLGL_BUILD_RENDERER_NULL=OFF\n    -DLLGL_BUILD_RENDERER_VULKAN=OFF\n    -DLLGL_BUILD_RENDERER_DIRECT3D11=OFF\n    -DLLGL_BUILD_RENDERER_DIRECT3D12=OFF\n    -DLLGL_BUILD_EXAMPLES=$ENABLE_EXAMPLES\n    -DLLGL_BUILD_TESTS=$ENABLE_TESTS\n    -DLLGL_BUILD_STATIC_LIB=ON\n    -DLLGL_ENABLE_EMSCRIPTEN_PTHREADS=$ENABLE_PTHREADS\n    -DGaussLib_INCLUDE_DIR:STRING=\"$GAUSSIAN_LIB_DIR\"\n    -S \"$SOURCE_DIR\"\n    -B \"$OUTPUT_DIR\"\n)\n\nif [ $PROJECT_ONLY -eq 0 ]; then\n    cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE ${OPTIONS[@]}\n    cmake --build \"$OUTPUT_DIR\" -- -j 20\nelse\n    cmake ${OPTIONS[@]} -G \"$GENERATOR\"\nfi\n\n# Copys the input file to the output and removes '\\r' EOL characters from text files.\n# Web page will run on Linux server and Git must not convert EOL for this output file.\n# Otherwise, data offsets in the *.data.js script won't match with the *.data file after Git uploaded it.\ncopy_file_preserve_linux_eol()\n{\n    INPUT=$1\n    OUTPUT=$2\n    FILE_EXT=${INPUT##*.}\n    if [[ \"${FILE_EXT,,}\" =~ ^(txt|vert|frag|obj)$ ]]; then\n        if [ $VERBOSE -ne 0 ]; then\n            echo \"Copy asset (convert EOL): $(basename $INPUT)\"\n        fi\n        tr -d \"\\r\" < \"$INPUT\" > \"$OUTPUT\"\n    else\n        if [ $VERBOSE -ne 0 ]; then\n            echo \"Copy asset: $(basename $INPUT)\"\n        fi\n        cp \"$INPUT\" \"$OUTPUT\"\n    fi\n}\n\n# Generate HTML pages\nif [ $PROJECT_ONLY -eq 0 ] && [ $ENABLE_EXAMPLES == \"ON\" ]; then\n    scripts/GenerateHTML5Examples.sh                    \\\n        \"${SOURCE_DIR}\"                                 \\\n        \"${OUTPUT_DIR}\"                                 \\\n        $([ $BUILD_TYPE = \"Debug\" ] && echo \"--debug\")  \\\n        $([ $VERBOSE -ne 0 ] && echo \"--verbose\")\nfi\n"
        },
        {
          "name": "BuildWin64.bat",
          "type": "blob",
          "size": 1.7197265625,
          "content": "@echo OFF\n\nset SOURCE_DIR=%~dp0\nset OUTPUT_DIR=build_win64\nset BUILD_TYPE=Release\nset BUILD_ARCH=x64\nset ENABLE_EXAMPLES=ON\nset ENABLE_TESTS=ON\nset STATIC_LIB=OFF\nset VERBOSE=0\nset PROJECT_ONLY=0\n\nREM Ensure we are inside the repository folder\nif not exist \"CMakeLists.txt\" (\n    echo error: file not found: CMakeLists.txt\n    exit 1\n)\n\nREM Make output build folder\nif not \"%1\" == \"\" (\n    if \"%2\" == \"\" (\n        set OUTPUT_DIR=%1\n    ) else (\n        echo error: too many arguemnts\n        echo usage: BuildWin64.bat [OUTPUT_DIR]\n        exit 1\n    )\n)\n\nif not exist \"%OUTPUT_DIR%\" (\n    mkdir \"%OUTPUT_DIR%\"\n)\n\nREM Checkout external depenencies\nset GAUSSIAN_LIB_DIR=GaussianLib\\include\n\nif exist \"external\\%GAUSSIAN_LIB_DIR%\" (\n    set GAUSSIAN_LIB_DIR=external\\%GAUSSIAN_LIB_DIR%\n) else (\n    if not exist \"%GAUSSIAN_LIB_DIR%\" (\n        REM Clone third party into build folder\n        pushd %OUTPUT_DIR%\n        git clone https://github.com/LukasBanana/GaussianLib.git\n        popd\n    )\n    set GAUSSIAN_LIB_DIR=%OUTPUT_DIR%\\%GAUSSIAN_LIB_DIR%\n)\n\nREM Print additional information if in verbose mode\nif %VERBOSE% == 1 (\n    echo GAUSSIAN_LIB_DIR=%GAUSSIAN_LIB_DIR%\n)\n\nREM Build into output directory\nset OPTIONS= ^\n    -DLLGL_BUILD_WRAPPER_C99=ON ^\n    -DLLGL_BUILD_RENDERER_OPENGL=ON ^\n    -DLLGL_BUILD_RENDERER_DIRECT3D11=ON ^\n    -DLLGL_BUILD_RENDERER_DIRECT3D12=ON ^\n    -DLLGL_BUILD_EXAMPLES=%ENABLE_EXAMPLES% ^\n    -DLLGL_BUILD_TESTS=%ENABLE_TESTS% ^\n    -DLLGL_BUILD_STATIC_LIB=%STATIC_LIB% ^\n    -DGaussLib_INCLUDE_DIR:STRING=\"%GAUSSIAN_LIB_DIR%\" ^\n    -A %BUILD_ARCH% ^\n    -B \"%OUTPUT_DIR%\" ^\n    -S \"%SOURCE_DIR%\"\n\nif %PROJECT_ONLY% == 0 (\n    cmake %OPTIONS%\n    cmake --build \"%OUTPUT_DIR%\" --config %BUILD_TYPE%\n) else (\n    cmake %OPTIONS%\n)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 31.6005859375,
          "content": "#\n# CMakeLists.txt file for LLGL project\n#\n# Copyright (c) 2015 Lukas Hermanns. All rights reserved.\n# Licensed under the terms of the BSD 3-Clause license (see LICENSE.txt).\n#\n\n# Originally authored on 09/07/2015\n\ncmake_minimum_required(VERSION 3.12 FATAL_ERROR)\n\nproject(LLGL)\n\n# === Target platforms ===\n\nif(\"${CMAKE_GENERATOR_PLATFORM}\" STREQUAL \"x64\")\n    set(LLGL_BUILD_64BIT ON)\nelse()\n    set(LLGL_BUILD_64BIT OFF)\nendif()\n\nset(LLGL_UWP_PLATFORM OFF)\nset(LLGL_IOS_PLATFORM OFF)\nset(LLGL_ANDROID_PLATFORM OFF)\nset(LLGL_WASM_PLATFORM OFF)\n\nif(NOT DEFINED LLGL_TARGET_PLATFORM)\n    if(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Android\")\n        set(LLGL_TARGET_PLATFORM \"Android\")\n        if(NOT DEFINED ENV{ANDROID_NDK_ROOT})\n            message(FATAL_ERROR \"Cannot build for Android platform: Missing environment variable 'ANDROID_NDK_ROOT'\")\n        endif()\n        set(LLGL_ANDROID_PLATFORM ON)\n    elseif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"WindowsStore\")\n        set(LLGL_TARGET_PLATFORM \"${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_VERSION}\")\n        set(LLGL_UWP_PLATFORM ON)\n    elseif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Emscripten\")\n        set(LLGL_TARGET_PLATFORM \"WebAssembly\")\n        set(LLGL_WASM_PLATFORM ON)\n    elseif(WIN32)\n        if(LLGL_BUILD_64BIT)\n            set(LLGL_TARGET_PLATFORM \"Win64\")\n        else()\n            set(LLGL_TARGET_PLATFORM \"Win32\")\n        endif()\n    elseif(APPLE)\n        if(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"iOS\")\n            set(LLGL_TARGET_PLATFORM \"iOS\")\n            set(LLGL_IOS_PLATFORM ON)\n        else()\n            set(LLGL_TARGET_PLATFORM \"macOS\")\n        endif()\n    elseif(UNIX)\n        set(LLGL_TARGET_PLATFORM \"Linux\")\n    endif()\nendif()\n\n\n# === Project ===\n\nif(LLGL_UWP_PLATFORM)\n    set(CMAKE_CXX_STANDARD 17)\nelse()\n    set(CMAKE_CXX_STANDARD 11)\nendif()\n\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\n# XCODE_SCHEME_WORKING_DIRECTORY (used per target) requires CMake 3.17.5\nif(APPLE AND ${CMAKE_VERSION} VERSION_GREATER_EQUAL \"3.17.5\")\n    # Once Xcode schemes are generated for example, we also have to enable them globally or the main projects will disappear\n    set(CMAKE_XCODE_GENERATE_SCHEME TRUE)\nendif()\n\n\n# === Build path ===\n\nset(OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR}/build)\nset(EXECUTABLE_OUTPUT_PATH ${OUTPUT_DIR} CACHE PATH \"Build directory\" FORCE)\nset(LIBRARY_OUTPUT_PATH ${OUTPUT_DIR} CACHE PATH \"Build directory\" FORCE)\n\nset( EXTERNAL_MODULE_DIR            \"${PROJECT_SOURCE_DIR}/cmake\"                   )\nset( PROJECT_INCLUDE_DIR            \"${PROJECT_SOURCE_DIR}/include\"                 )\nset( EXTERNAL_INCLUDE_DIR           \"${PROJECT_SOURCE_DIR}/external\"                )\nset( EXAMPLE_PROJECTS_ROOT_DIR      \"${PROJECT_SOURCE_DIR}/examples\"                )\nset( EXAMPLE_CPP_PROJECTS_DIR       \"${EXAMPLE_PROJECTS_ROOT_DIR}/Cpp\"              )\nset( EXAMPLE_C99_PROJECTS_DIR       \"${EXAMPLE_PROJECTS_ROOT_DIR}/C99\"              )\nset( EXAMPLE_CSHARP_PROJECTS_DIR    \"${EXAMPLE_PROJECTS_ROOT_DIR}/CSharp\"           )\nset( SHARED_PLATFORM_DIR            \"${EXAMPLE_PROJECTS_ROOT_DIR}/Shared/Platform\"  )\nset( SHARED_ASSETS_DIR              \"${EXAMPLE_PROJECTS_ROOT_DIR}/Shared/Assets\"    )\nset( TEST_PROJECTS_DIR              \"${PROJECT_SOURCE_DIR}/tests\"                   )\nset( BACKEND_INCLUDE_DIR            \"${PROJECT_INCLUDE_DIR}/LLGL/Backend\"           )\n\n\n# === Macros ===\n\nif(LLGL_IOS_PLATFORM OR LLGL_ANDROID_PLATFORM OR LLGL_WASM_PLATFORM)\n    set(LLGL_MOBILE_PLATFORM ON)\nelse()\n    set(LLGL_MOBILE_PLATFORM OFF)\nendif()\n\nmacro(ADD_DEFINE IDENT)\n    add_definitions(\"-D${IDENT}\")\nendmacro()\n\nmacro(ADD_PROJECT_DEFINE TARGET_NAME IDENT)\n    target_compile_definitions(${TARGET_NAME} PRIVATE \"-D${IDENT}\")\nendmacro()\n\nmacro(ADD_DEBUG_DEFINE IDENT)\n    # Requires CMake 3.12\n    add_compile_definitions(\"$<$<CONFIG:Debug>:${IDENT}>\")\nendmacro()\n\n\n# === Functions ===\n\n# Filters sources files with a variadic argument for all directores:\n# Example:\n#   find_source_files(OutputFiles \"*.h;*.cpp\" ${MyProjectDir}/Base ${MyProjectDir}/Extensions)\nfunction(find_source_files OUTPUT_LIST FILTERS)\n    # Substitute predefined filters\n    if(\"${FILTERS}\" STREQUAL \"C\")\n        set(FILTERS \"*.c;*.h;*.inl\")\n    elseif(\"${FILTERS}\" STREQUAL \"CXX\")\n        set(FILTERS \"*.c;*.cpp;*.h;*.inl\")\n    elseif(\"${FILTERS}\" STREQUAL \"OBJC\")\n        set(FILTERS \"*.c;*.cpp;*.h;*.inl;*.m;*.mm\")\n    elseif(\"${FILTERS}\" STREQUAL \"RES\")\n        set(FILTERS \"*.c;*.cpp;*.h;*.inl;*.m;*.mm;*.metal;*.vert;*.frag;*.tesc;*.tese\")\n    elseif(\"${FILTERS}\" STREQUAL \"INC\")\n        set(FILTERS \"*.h;*.hpp;*.inl\")\n    endif()\n\n    # Collect all input directories for each filter\n    set(FilteredProjectDirs \"\")\n    set(ProjectDirs \"${ARGN}\")\n    foreach(ProjectSubdir ${ProjectDirs})\n        foreach(Filter ${FILTERS})\n            list(APPEND FilteredProjectDirs \"${ProjectSubdir}/${Filter}\")\n        endforeach()\n    endforeach()\n    \n    # Find all source files\n    file(GLOB FilteredProjectFiles ${FilteredProjectDirs})\n    \n    # Write filtered files to output variable\n    set(${OUTPUT_LIST} ${${OUTPUT_LIST}} ${FilteredProjectFiles} PARENT_SCOPE)\nendfunction()\n\n# Adds a (variadic) list of resource files to the output project files.\n# The resource files must be located in either the shared assets folder,\n# i.e. either under \"examples/Shared/Assets/\".\n# Example:\n#   add_project_resource_files(MyProjectFiles \"Models/ModelAssets-*.obj\" \"Textures/TextureAsset-1.jpg\")\nfunction(add_project_resource_files OUTPUT_LIST SRC_FOLDER)\n    # Iterate over all input filenames and expand their paths depending on their file extensions\n    set(ResourceFiles \"\")\n    set(InputFilenames \"${ARGN}\")\n    foreach(InputFile ${InputFilenames})\n        if(\"${InputFile}\" MATCHES \".+\\\\.(png|jpg|dds|tga|obj|txt|map|icns)\")\n            file(GLOB SharedResourceFiles \"${SHARED_ASSETS_DIR}/${InputFile}\")\n            file(GLOB ProjectResourceFiles \"${SRC_FOLDER}/${InputFile}\")\n            list(APPEND ResourceFiles \"${SharedResourceFiles}\" \"${ProjectResourceFiles}\")\n        endif()\n    endforeach()\n    \n    # Write expanded resource filenames to output variable\n    set(${OUTPUT_LIST} ${${OUTPUT_LIST}} ${ResourceFiles} PARENT_SCOPE)\nendfunction()\n\n# Bundles input source files together with platform specific resource files, e.g. macOS and iOS bundles.\nfunction(bundle_project_files OUTPUT_LIST SRC_FILES)\n    if(APPLE)\n        if (LLGL_IOS_PLATFORM)\n            find_source_files(BundledProjectFiles \"AppIcon.png;LaunchScreen.storyboard\" ${SHARED_PLATFORM_DIR}/iOS)\n        else()\n            find_source_files(BundledProjectFiles \"AppIcon.icns\" ${SHARED_PLATFORM_DIR}/macOS)\n        endif()\n        list(APPEND BundledProjectFiles \"${SRC_FILES}\")\n    else()\n        set(BundledProjectFiles \"${SRC_FILES}\")\n    endif()\n    set(${OUTPUT_LIST} ${BundledProjectFiles} PARENT_SCOPE)\nendfunction()\n\n# Main function to find and bundle project source files.\n# @param SRC_FILES: can either be a directory or a list of specific source files if it sends with \".cpp\", \".c\", \".h\", \".m\", or \".mm\".\nfunction(find_project_source_files OUTPUT_LIST SRC_FILES)\n    if(\"${SRC_FILES}\" MATCHES \".+\\\\.(cpp|c|h|m|mm|cs)\")\n        set(ProjectFiles \"${SRC_FILES}\")\n    else()\n        # Find all source files for project\n        if(APPLE)\n            find_source_files(ProjectFiles RES ${SRC_FILES})\n        else()\n            find_source_files(ProjectFiles CXX ${SRC_FILES})\n        endif()\n    endif()\n    \n    # Bundle source files and write to output variable\n    bundle_project_files(OutputProjectFiles \"${ProjectFiles}\")\n\n    # Also bundle potential assets for certain platforms\n    if(APPLE)\n        # Try to find an *.assets.txt file for current project\n        file(GLOB AssetsListFilename \"${SRC_FILES}/*.assets.txt\")\n        if(NOT \"${AssetsListFilename}\" STREQUAL \"\")\n            # Read *.assets.txt file and convert its content into a ';'-separated list to append project assets to bundle\n            file(READ \"${AssetsListFilename}\" AssetsListContents)\n            if(NOT \"${AssetsListContents}\" STREQUAL \"\")\n                string(REGEX REPLACE \";\" \"\\\\\\\\;\" AssetsListContents \"${AssetsListContents}\")\n                string(REGEX REPLACE \"\\n\" \";\" AssetsListContents \"${AssetsListContents}\")\n                add_project_resource_files(OutputProjectFiles \"${SRC_FILES}\" ${AssetsListContents})\n            endif()\n        endif()\n    endif()\n\n    # Write final project file list to output parameter\n    set(${OUTPUT_LIST} ${OutputProjectFiles} PARENT_SCOPE)\nendfunction()\n\nfunction(set_llgl_module_properties MODULE_NAME)\n    set_target_properties(\n        ${MODULE_NAME} PROPERTIES\n            LINKER_LANGUAGE CXX\n            DEBUG_POSTFIX   \"D\"\n            FOLDER          \"LLGL\"\n    )\nendfunction()\n\nfunction(append_global_property PROP_NAME OUTPUT_LIST NEW_ITEM)\n    get_property(PropertyList GLOBAL PROPERTY ${PROP_NAME})\n\n    # Link base libs first to avoid wrong order in GCC.\n    # For Clang, this order can cause duplicate linking entries, but shouldn't hurt.\n    # For now it's not worth the trouble having to distinguish between compiler toolchains (see CMAKE_CXX_COMPILER_ID).\n    list(APPEND PropertyList ${NEW_ITEM})\n\n    set_property(GLOBAL PROPERTY ${PROP_NAME} \"${PropertyList}\")\n    set(${OUTPUT_LIST} \"${PropertyList}\" PARENT_SCOPE)\nendfunction()\n\nfunction(add_llgl_module MODULE_NAME DEFINE_NAME SRC_FILES)\n    # Add module as either static or shared library\n    if(LLGL_BUILD_STATIC_LIB)\n        add_library(${MODULE_NAME} STATIC ${SRC_FILES})\n    else()\n        add_library(${MODULE_NAME} SHARED ${SRC_FILES})\n    endif()\n    \n    # Keep track of all active module names\n    append_global_property(LLGL_GLOBAL_MODULE_LIST None ${MODULE_NAME})\n    \n    # Add basic link libraries and properties\n    set_llgl_module_properties(${MODULE_NAME})\n    \n    ADD_PROJECT_DEFINE(LLGL ${DEFINE_NAME})\nendfunction()\n\n# Sets the working directory for startup for the specified project.\nfunction(set_project_working_dir PROJECT_NAME WORKING_DIR)\n    if(WIN32)\n        # VS_DEBUGGER_WORKING_DIRECTORY requires CMake 3.8.2\n        if(${CMAKE_VERSION} VERSION_GREATER_EQUAL \"3.8.2\")\n            set_target_properties(\n                ${PROJECT_NAME} PROPERTIES\n                VS_DEBUGGER_WORKING_DIRECTORY \"${WORKING_DIR}\"\n            )\n        endif()\n    elseif(APPLE)\n        if(${CMAKE_VERSION} VERSION_GREATER_EQUAL \"3.17.5\")\n            # XCODE_SCHEME_WORKING_DIRECTORY requires CMake 3.17.5\n            set_target_properties(\n                ${PROJECT_NAME} PROPERTIES\n                XCODE_GENERATE_SCHEME           TRUE\n                XCODE_SCHEME_WORKING_DIRECTORY  \"${WORKING_DIR}\"\n            )\n        endif()\n    endif()\nendfunction()\n\nfunction(add_llgl_example_project PROJECT_NAME LINKER_LANG SRC_FILES LIB_FILES)\n    if(APPLE)\n        # Project configurations\n        add_executable(${PROJECT_NAME} MACOSX_BUNDLE ${SRC_FILES})\n        target_link_libraries(${PROJECT_NAME} ${LIB_FILES})\n\n        # Configure bundle name and ID\n        if (${PROJECT_NAME} MATCHES \"Example_+\")\n            string(LENGTH \"Example_\" NAME_PREFIX_LEN)\n            string(SUBSTRING ${PROJECT_NAME} ${NAME_PREFIX_LEN} -1 PROJECT_BUNDLE_NAME)\n        elseif (${PROJECT_NAME} MATCHES \"Test_+\")\n            string(LENGTH \"Test_\" NAME_PREFIX_LEN)\n            string(SUBSTRING ${PROJECT_NAME} ${NAME_PREFIX_LEN} -1 PROJECT_BUNDLE_NAME)\n        else()\n            set(PROJECT_BUNDLE_NAME ${PROJECT_NAME})\n        endif()\n\n        # macOS/iOS bundle names must not have \"_\" characters\n        string(REPLACE \"_\" \"-\" PROJECT_BUNDLE_NAME \"${PROJECT_BUNDLE_NAME}\")\n\n        # Filter resource files into \"Resources\" folder\n        set(RES_FILES \"${SRC_FILES}\")\n        list(FILTER RES_FILES INCLUDE REGEX \".+\\\\.(png|jpg|dds|tga|obj|txt|map|icns)\")\n        source_group(\"Resources\" FILES ${RES_FILES})\n\n        # Don't compile these resource types, just keep them in the project solution\n        set_source_files_properties(${RES_FILES} PROPERTIES HEADER_FILE_ONLY TRUE)\n\n        # Filter shader files into \"Shaders\" folder\n        set(SHADER_FILES \"${SRC_FILES}\")\n        list(FILTER SHADER_FILES INCLUDE REGEX \".+\\\\.(metal|vert|frag|tesc|tese)\")\n        source_group(\"Shaders\" FILES ${SHADER_FILES})\n\n        # Set app icon for macOS and iOS\n        set(BundleResourceFiles \"${RES_FILES};${SHADER_FILES}\")\n        if(LLGL_IOS_PLATFORM)\n            set(BundleInfoPlistFile \"${SHARED_PLATFORM_DIR}/iOS/IOSBundleInfo.plist.in\")\n            set(BundleIconFile \"AppIcon.png\")\n        else()\n            set(BundleInfoPlistFile \"${SHARED_PLATFORM_DIR}/macOS/MacOSXBundleInfo.plist.in\")\n            set(BundleIconFile \"AppIcon.icns\")\n        endif()\n\n        # Configure Info.plist file for NSBundle\n        set_target_properties(\n            ${PROJECT_NAME} PROPERTIES\n            OUTPUT_NAME                         \"${PROJECT_NAME}\"\n            MACOSX_BUNDLE_BUNDLE_NAME           \"${PROJECT_BUNDLE_NAME}\"\n            MACOSX_BUNDLE_GUI_IDENTIFIER        \"LLGL.Examples.${PROJECT_BUNDLE_NAME}\"\n            MACOSX_BUNDLE_LONG_VERSION_STRING   \"LLGL-1.0\"\n            MACOSX_BUNDLE_SHORT_VERSION_STRING  \"1.0\"\n            MACOSX_BUNDLE_BUNDLE_VERSION        1.0\n            MACOSX_BUNDLE_ICON_FILE             \"${BundleIconFile}\"\n            MACOSX_BUNDLE                       ON\n            MACOSX_BUNDLE_INFO_PLIST            \"${BundleInfoPlistFile}\"\n            RESOURCE                            \"${BundleResourceFiles}\"\n        )\n    elseif(LLGL_ANDROID_PLATFORM)\n        # Android project configurations\n        add_library(${PROJECT_NAME} SHARED ${SRC_FILES})\n        target_link_libraries(${PROJECT_NAME} ${LIB_FILES})\n    else()\n        add_executable(${PROJECT_NAME} ${SRC_FILES})\n        target_link_libraries(${PROJECT_NAME} ${LIB_FILES})\n    endif()\n\n    # Configure linker settings\n    if(LLGL_ANDROID_PLATFORM)\n        # When linking the libExample*.so library for Android, we link with C++ semantics.\n        # Otherwise, the libc++_shared.so library will be unintentionally included,\n        # since the static dependencies like libLLGL.so must be build with C++, regardingless of the example project's language\n        set_target_properties(${PROJECT_NAME} PROPERTIES LINKER_LANGUAGE CXX DEBUG_POSTFIX \"D\")\n    else()\n        set_target_properties(${PROJECT_NAME} PROPERTIES LINKER_LANGUAGE ${LINKER_LANG} DEBUG_POSTFIX \"D\")\n    endif()\n    \n    # Configure working directory and project solution folder\n    if(${PROJECT_NAME} MATCHES \"Example_C99_+\")\n        string(SUBSTRING ${PROJECT_NAME} 12 -1 PROJECT_BASE_NAME)\n        set_project_working_dir(${PROJECT_NAME} \"${EXAMPLE_C99_PROJECTS_DIR}/${PROJECT_BASE_NAME}\")\n        set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"Examples (C99)\")\n    elseif(${PROJECT_NAME} MATCHES \"Example_CSharp_+\")\n        string(SUBSTRING ${PROJECT_NAME} 15 -1 PROJECT_BASE_NAME)\n        set_project_working_dir(${PROJECT_NAME} \"${EXAMPLE_CSHARP_PROJECTS_DIR}/${PROJECT_BASE_NAME}\")\n        set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"Examples (CSharp)\")\n    elseif(${PROJECT_NAME} MATCHES \"Example_+\")\n        string(SUBSTRING ${PROJECT_NAME} 8 -1 PROJECT_BASE_NAME)\n        set_project_working_dir(${PROJECT_NAME} \"${EXAMPLE_CPP_PROJECTS_DIR}/${PROJECT_BASE_NAME}\")\n        set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"Examples\")\n    elseif(${PROJECT_NAME} MATCHES \"Test_+\")\n        set_project_working_dir(${PROJECT_NAME} \"${TEST_PROJECTS_DIR}\")\n        set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"Tests\")\n    elseif(${PROJECT_NAME} MATCHES \"Testbed\")\n        set_project_working_dir(${PROJECT_NAME} \"${TEST_PROJECTS_DIR}/Testbed\")\n        set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"Tests\")\n    endif()\nendfunction()\n\n\n# === Preprocessor definitions ===\n\nif(WIN32)\n    ADD_DEFINE(_CRT_SECURE_NO_WARNINGS)\n    ADD_DEFINE(_SCL_SECURE_NO_WARNINGS)\n    ADD_DEFINE(UNICODE)\n    ADD_DEFINE(NOMINMAX)\n    ADD_DEFINE(_DISABLE_CONSTEXPR_MUTEX_CONSTRUCTOR)\n    if(MSVC)\n        # Disable some warnings for MSVC compiler\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /wd4250 /wd4251 /wd4290 /wd4103\")\n    endif(MSVC)\nendif(WIN32)\n\nADD_DEBUG_DEFINE(LLGL_DEBUG)\n\nif(LLGL_MOBILE_PLATFORM)\n    ADD_DEFINE(LLGL_MOBILE_PLATFORM)\nendif()\n\n\n# === Initialize summary variables ===\n\nset(SUMMARY_LIBRARY_TYPE \"Unknown\")\nset(SUMMARY_TARGET_ARCH \"Unknown\")\nset(SUMMARY_FLAGS \"\")\n\n\n# === Options ===\n\nif(APPLE)\n    set(CMAKE_MACOSX_RPATH 1)\nendif()\n\nif(${CMAKE_SIZEOF_VOID_P} EQUAL 8)\n    set(LLGL_BUILD_64BIT 1)\nelse()\n    set(LLGL_BUILD_64BIT 0)\nendif()\n\noption(LLGL_ENABLE_CHECKED_CAST \"Enable dynamic checked cast (only in Debug mode)\" ON)\noption(LLGL_ENABLE_DEBUG_LAYER \"Enable renderer debug layer (for both Debug and Release mode)\" ON)\noption(LLGL_ENABLE_EXCEPTIONS \"Enable C++ exceptions\" OFF)\n\noption(LLGL_PREFER_STL_CONTAINERS \"Prefers C++ STL containers over custom containers, e.g. std::vector over SmallVector<T>\" OFF)\n\noption(LLGL_BUILD_STATIC_LIB \"Build LLGL as static library\" OFF)\noption(LLGL_BUILD_TESTS \"Include test projects\" OFF)\noption(LLGL_BUILD_EXAMPLES \"Include example projects\" OFF)\n\noption(LLGL_BUILD_RENDERER_NULL \"Include Null renderer project\" ON)\n\nif(NOT LLGL_UWP_PLATFORM)\n    if(EMSCRIPTEN)\n        option(LLGL_BUILD_RENDERER_WEBGL \"Include WebGL renderer project\" ON)\n        option(LLGL_ENABLE_EMSCRIPTEN_PTHREADS \"Build for Wasm platform with pthreads (USE_PTHREADS). This limits browser availability!\" OFF)\n    elseif(LLGL_MOBILE_PLATFORM)\n        option(LLGL_BUILD_RENDERER_OPENGLES3 \"Include OpenGLES 3 renderer project\" ON)\n    else()\n        option(LLGL_BUILD_RENDERER_OPENGL \"Include OpenGL renderer project\" ON)\n    endif()\nendif()\n\nif(APPLE)\n    option(LLGL_MACOS_ENABLE_COREVIDEO \"Enable CoreVideo framework (for refresh rate of built-in displays)\" ON)\n    option(LLGL_BUILD_RENDERER_METAL \"Include Metal renderer project (experimental)\" OFF)\nelseif(NOT LLGL_UWP_PLATFORM)\n    option(LLGL_BUILD_RENDERER_VULKAN \"Include Vulkan renderer project (experimental)\" OFF)\nendif()\n\nif(WIN32)\n    option(LLGL_BUILD_RENDERER_DIRECT3D11 \"Include Direct3D11 renderer project\" ON)\n    option(LLGL_BUILD_RENDERER_DIRECT3D12 \"Include Direct3D12 renderer project (experimental)\" OFF)\nendif()\n\noption(LLGL_BUILD_WRAPPER_C99 \"Include wrapper for C99\" OFF)\noption(LLGL_BUILD_WRAPPER_CSHARP \"Include wrapper for C# (requires LLGL_BUILD_WRAPPER_C99)\" OFF)\n\nif(NOT LLGL_BUILD_WRAPPER_C99)\n    if(LLGL_BUILD_WRAPPER_CSHARP)\n        message(SEND_ERROR \"LLGL_BUILD_WRAPPER_CSHARP is enabled but not LLGL_BUILD_WRAPPER_C99; The C# wrapper depends on the C99 wrapper!\")\n    endif()\nendif()\n\nif(LLGL_ENABLE_CHECKED_CAST)\n    ADD_DEBUG_DEFINE(LLGL_ENABLE_CHECKED_CAST)\nendif()\n\nif(LLGL_ENABLE_DEBUG_LAYER)\n    ADD_DEFINE(LLGL_ENABLE_DEBUG_LAYER)\nendif()\n\nif(LLGL_ENABLE_EXCEPTIONS)\n    ADD_DEFINE(LLGL_ENABLE_EXCEPTIONS)\nendif()\n\nif(LLGL_BUILD_STATIC_LIB)\n    ADD_DEFINE(LLGL_BUILD_STATIC_LIB)\nendif()\n\nif(LLGL_PREFER_STL_CONTAINERS)\n    ADD_DEFINE(LLGL_PREFER_STL_CONTAINERS)\nendif()\n\nif(LLGL_MACOS_ENABLE_COREVIDEO)\n    ADD_DEFINE(LLGL_MACOS_ENABLE_COREVIDEO)\nendif()\n\nif(LLGL_WASM_PLATFORM)\n    set(SUMMARY_TARGET_ARCH \"wasm\")\nelseif(LLGL_MOBILE_PLATFORM)\n    if(\"${ANDROID_ABI}\" STREQUAL \"x86_64\")\n        set(ARCH_AMD64 ON)\n        set(SUMMARY_TARGET_ARCH \"x86-64\")\n    elseif(\"${ANDROID_ABI}\" STREQUAL \"x86\")\n        set(ARCH_IA32 ON)\n        set(SUMMARY_TARGET_ARCH \"x86\")\n    else()\n        set(ARCH_ARM64 ON)\n        set(SUMMARY_TARGET_ARCH \"arm64\")\n    endif()\nelseif(APPLE OR LLGL_BUILD_64BIT)\n    set(ARCH_AMD64 ON)\n    set(SUMMARY_TARGET_ARCH \"x86-64\")\nelse()\n    set(ARCH_IA32 ON)\n    set(SUMMARY_TARGET_ARCH \"x86\")\nendif()\n\nif(EMSCRIPTEN)\n    # When USE_PTHREADS is enabled, HTML5 pages cannot be opened in Chrome unless launched with '--enable-features=SharedArrayBuffer'\n    if(LLGL_ENABLE_EMSCRIPTEN_PTHREADS)\n        add_compile_options(\"SHELL:-s USE_PTHREADS\")\n        add_link_options(\"SHELL:-s USE_PTHREADS\")\n        set(SUMMARY_FLAGS ${SUMMARY_FLAGS} \"pthreads\")\n    endif()\n\n    # TODO: Emscripten file system pulls in a large amount of code. Consider limiting file system support to examples and tests.\n    add_link_options(\"SHELL:-s FORCE_FILESYSTEM\") # for examples\n\n    # LLGL needs at least WebGL 2.0\n    add_link_options(\"SHELL:-s MIN_WEBGL_VERSION=2\")\n    add_link_options(\"SHELL:-s MAX_WEBGL_VERSION=2\")\n    add_link_options(\"SHELL:-s OFFSCREEN_FRAMEBUFFER\") # required for explicit swap control\n    add_link_options(\"SHELL:-s ASSERTIONS\")\nendif()\n\n\n# === Global files ===\n\nset(FilesMsvcNatvis ${PROJECT_SOURCE_DIR}/LLGL.natvis)\n\n# Common files\nfind_source_files(FilesInclude                      \"*.h\"   \"${PROJECT_INCLUDE_DIR}/LLGL\")\nfind_source_files(FilesIncludeBackend               \"*.inl\" \"${PROJECT_INCLUDE_DIR}/LLGL/Backend\")\nfind_source_files(FilesIncludeContainer             \"*.h\"   \"${PROJECT_INCLUDE_DIR}/LLGL/Container\")\nfind_source_files(FilesIncludeUtils                 \"*.h\"   \"${PROJECT_INCLUDE_DIR}/LLGL/Utils\")\nfind_source_files(FilesIncludePlatformBase          \"*.h\"   \"${PROJECT_INCLUDE_DIR}/LLGL/Platform\")\nfind_source_files(FilesCore                         CXX     \"${PROJECT_SOURCE_DIR}/sources/Core\")\nfind_source_files(FilesPlatformBase                 CXX     \"${PROJECT_SOURCE_DIR}/sources/Platform\")\nfind_source_files(FilesRenderer                     CXX     \"${PROJECT_SOURCE_DIR}/sources/Renderer\")\n\nif(LLGL_ENABLE_DEBUG_LAYER)\n    find_source_files(FilesRendererDbg              CXX     \"${PROJECT_SOURCE_DIR}/sources/Renderer/DebugLayer\")\n    find_source_files(FilesRendererDbgBuffer        CXX     \"${PROJECT_SOURCE_DIR}/sources/Renderer/DebugLayer/Buffer\")\n    find_source_files(FilesRendererDbgRenderState   CXX     \"${PROJECT_SOURCE_DIR}/sources/Renderer/DebugLayer/RenderState\")\n    find_source_files(FilesRendererDbgShader        CXX     \"${PROJECT_SOURCE_DIR}/sources/Renderer/DebugLayer/Shader\")\n    find_source_files(FilesRendererDbgTexture       CXX     \"${PROJECT_SOURCE_DIR}/sources/Renderer/DebugLayer/Texture\")\nendif()\n\nif(EMSCRIPTEN)\n    find_source_files(FilesPlatform                 CXX     \"${PROJECT_SOURCE_DIR}/sources/Platform/Wasm\")\n    find_source_files(FilesIncludePlatform          CXX     \"${PROJECT_INCLUDE_DIR}/LLGL/Platform/Wasm\")\nelseif(WIN32)\n    if(LLGL_UWP_PLATFORM)\n        find_source_files(FilesPlatform             CXX     \"${PROJECT_SOURCE_DIR}/sources/Platform/UWP\")\n        find_source_files(FilesIncludePlatform      CXX     \"${PROJECT_INCLUDE_DIR}/LLGL/Platform/UWP\")\n    else()\n        find_source_files(FilesPlatform             CXX     \"${PROJECT_SOURCE_DIR}/sources/Platform/Win32\")\n        find_source_files(FilesIncludePlatform      CXX     \"${PROJECT_INCLUDE_DIR}/LLGL/Platform/Win32\")\n    endif()\nelse()\n    set(PlatformPosixDir \"${PROJECT_SOURCE_DIR}/sources/Platform/POSIX\")\n    if(APPLE)\n        if(LLGL_MOBILE_PLATFORM)\n            find_source_files(FilesPlatform         OBJC    \"${PROJECT_SOURCE_DIR}/sources/Platform/IOS\" \"${PlatformPosixDir}\")\n            find_source_files(FilesIncludePlatform  OBJC    \"${PROJECT_INCLUDE_DIR}/LLGL/Platform/IOS\")\n        else()\n            find_source_files(FilesPlatform         OBJC    \"${PROJECT_SOURCE_DIR}/sources/Platform/MacOS\" \"${PlatformPosixDir}\")\n            find_source_files(FilesIncludePlatform  OBJC    \"${PROJECT_INCLUDE_DIR}/LLGL/Platform/MacOS\")\n        endif()\n    elseif(UNIX)\n        if(LLGL_ANDROID_PLATFORM)\n            find_source_files(FilesPlatform         CXX     \"${PROJECT_SOURCE_DIR}/sources/Platform/Android\")\n            find_source_files(FilesIncludePlatform  CXX     \"${PROJECT_INCLUDE_DIR}/LLGL/Platform/Android\")\n        else()\n            find_source_files(FilesPlatform         CXX     \"${PROJECT_SOURCE_DIR}/sources/Platform/Linux\" \"${PlatformPosixDir}\")\n            find_source_files(FilesIncludePlatform  CXX     \"${PROJECT_INCLUDE_DIR}/LLGL/Platform/Linux\")\n        endif()\n    endif()\nendif()\n\nif(LLGL_ANDROID_PLATFORM)\n    set(ANDROID_APP_GLUE_DIR \"$ENV{ANDROID_NDK_ROOT}/sources/android/native_app_glue\")\n    set(\n        FilesAndroidNativeAppGlue\n        \"${ANDROID_APP_GLUE_DIR}/android_native_app_glue.c\"\n        \"${ANDROID_APP_GLUE_DIR}/android_native_app_glue.h\"\n    )\nendif()\n\n\n# === Source group folders ===\n\nsource_group(\"NatVis\" FILES ${FilesMsvcNatvis})\n\nsource_group(\"Include\"              FILES ${FilesInclude})\nsource_group(\"Include\\\\Backend\"     FILES ${FilesIncludeBackend})\nsource_group(\"Include\\\\Container\"   FILES ${FilesIncludeContainer})\nsource_group(\"Include\\\\Utils\"       FILES ${FilesIncludeUtils})\nsource_group(\"Include\\\\Platform\"    FILES ${FilesIncludePlatformBase} ${FilesIncludePlatform})\n\nsource_group(\"Sources\\\\Core\"        FILES ${FilesCore})\nsource_group(\"Sources\\\\Platform\"    FILES ${FilesPlatformBase} ${FilesPlatform})\nsource_group(\"Sources\\\\Renderer\"    FILES ${FilesRenderer})\n\nif(LLGL_ENABLE_DEBUG_LAYER)\n    source_group(\"Sources\\\\Renderer\\\\DebugLayer\"                FILES ${FilesRendererDbg})\n    source_group(\"Sources\\\\Renderer\\\\DebugLayer\\\\Buffer\"        FILES ${FilesRendererDbgBuffer})\n    source_group(\"Sources\\\\Renderer\\\\DebugLayer\\\\RenderState\"   FILES ${FilesRendererDbgRenderState})\n    source_group(\"Sources\\\\Renderer\\\\DebugLayer\\\\Shader\"        FILES ${FilesRendererDbgShader})\n    source_group(\"Sources\\\\Renderer\\\\DebugLayer\\\\Texture\"       FILES ${FilesRendererDbgTexture})\nendif()\n\nif(LLGL_ANDROID_PLATFORM)\n    source_group(\"native_app_glue\" FILES ${FilesAndroidNativeAppGlue})\nendif()\n\n\n# === Include directories ===\n\ninclude_directories(\"${PROJECT_INCLUDE_DIR}\")\n\ninclude(\"${EXTERNAL_MODULE_DIR}/FindGaussianLib.cmake\")\n\nif(LLGL_ANDROID_PLATFORM)\n    include_directories(${ANDROID_APP_GLUE_DIR})\nendif(LLGL_ANDROID_PLATFORM)\n\n\n# === Projects ===\n\nset(\n    FilesLLGL\n    ${FilesInclude}\n    ${FilesIncludeBackend}\n    ${FilesIncludeContainer}\n    ${FilesIncludeUtils}\n    ${FilesIncludePlatformBase}\n    ${FilesIncludePlatform}\n    ${FilesCore}\n    ${FilesPlatformBase}\n    ${FilesPlatform}\n    ${FilesRenderer}\n)\n\nif(MSVC)\n    list(APPEND FilesLLGL ${FilesMsvcNatvis})\nendif()\n\nif(LLGL_ENABLE_DEBUG_LAYER)\n    list(\n        APPEND FilesLLGL\n        ${FilesRendererDbg}\n        ${FilesRendererDbgBuffer}\n        ${FilesRendererDbgRenderState}\n        ${FilesRendererDbgShader}\n        ${FilesRendererDbgTexture}\n    )\nendif()\n\n# Wrapper: C99\nif(LLGL_BUILD_WRAPPER_C99)\n    find_source_files(FilesWrapperC99 CXX \"${PROJECT_SOURCE_DIR}/wrapper/C99\")\n    find_source_files(FilesIncludeC99 \"*.h\" \"${PROJECT_INCLUDE_DIR}/LLGL-C\")\n    source_group(\"Wrapper\\\\C99\\\\Include\" FILES ${FilesIncludeC99})\n    source_group(\"Wrapper\\\\C99\\\\Sources\" FILES ${FilesWrapperC99})\n    list(APPEND FilesLLGL ${FilesIncludeC99} ${FilesWrapperC99})\nendif()\n\n# Base project\nif(LLGL_BUILD_STATIC_LIB)\n    set(SUMMARY_LIBRARY_TYPE \"Static\")\n    add_library(LLGL STATIC ${FilesLLGL})\nelse()\n    set(SUMMARY_LIBRARY_TYPE \"Shared\")\n    add_library(LLGL SHARED ${FilesLLGL})\nendif()\n\ninclude(GNUInstallDirs)\ntarget_include_directories(LLGL INTERFACE\n                           $<BUILD_INTERFACE:${PROJECT_INCLUDE_DIR}>\n                           $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)\n\nif(LLGL_ANDROID_PLATFORM)\n    add_library(android_native_app_glue STATIC ${FilesAndroidNativeAppGlue})\n    set_target_properties(android_native_app_glue PROPERTIES LINKER_LANGUAGE C)\n    target_link_libraries(LLGL android log android_native_app_glue)\nelseif(LLGL_IOS_PLATFORM)\n    target_link_libraries(LLGL PUBLIC \"-framework Foundation -framework UIKit\")\nelseif(APPLE)\n    find_library(COCOA_LIBRARY Cocoa)\n    target_link_libraries(LLGL ${COCOA_LIBRARY})\n    if(LLGL_MACOS_ENABLE_COREVIDEO)\n        target_link_libraries(LLGL \"-framework CoreVideo\")\n    endif()\nelseif(EMSCRIPTEN)\n    target_link_libraries(LLGL embind)\nelseif(UNIX)\n    target_link_libraries(LLGL X11 pthread Xrandr)\n#elseif(LLGL_UWP_PLATFORM)\n#    set_target_properties(LLGL PROPERTIES VS_WINRT_REFERENCES \"Windows.Foundation.UniversalApiContract\")\nendif()\n\nset_property(GLOBAL PROPERTY LLGL_GLOBAL_MODULE_LIST LLGL)\n\nset_llgl_module_properties(LLGL)\n\nif(LLGL_ANDROID_PLATFORM)\n    append_global_property(LLGL_GLOBAL_MODULE_LIST None android_native_app_glue)\nendif()\n\nif(LLGL_BUILD_RENDERER_NULL)\n    add_subdirectory(sources/Renderer/Null)\nendif()\n\nif(LLGL_BUILD_RENDERER_OPENGL OR LLGL_BUILD_RENDERER_OPENGLES3 OR LLGL_BUILD_RENDERER_WEBGL)\n    add_subdirectory(sources/Renderer/OpenGL)\nendif()\n\nif(LLGL_BUILD_RENDERER_VULKAN)\n    add_subdirectory(sources/Renderer/Vulkan)\nendif()\n\nif(LLGL_BUILD_RENDERER_METAL)\n    add_subdirectory(sources/Renderer/Metal)\nendif()\n\nif(LLGL_BUILD_RENDERER_DIRECT3D11 OR LLGL_BUILD_RENDERER_DIRECT3D12)\n    add_subdirectory(sources/Renderer/DXCommon)\nendif()\n\nif(LLGL_BUILD_RENDERER_DIRECT3D11)\n    add_subdirectory(sources/Renderer/Direct3D11)\nendif()\n\nif(LLGL_BUILD_RENDERER_DIRECT3D12)\n    add_subdirectory(sources/Renderer/Direct3D12)\nendif()\n\n# Static libs must all be linked to the final apps (LLGL_BUILD_STATIC_LIB).\n# Also UWP apps need references to all loaded modules (LLGL_UWP_PLATFORM).\nif(LLGL_BUILD_STATIC_LIB OR LLGL_UWP_PLATFORM)\n    get_property(LLGL_MODULE_LIBS GLOBAL PROPERTY LLGL_GLOBAL_MODULE_LIST)\nelse()\n    set(LLGL_MODULE_LIBS LLGL)\nendif()\n\nif(GaussLib_INCLUDE_DIR)\n    if(LLGL_BUILD_TESTS AND NOT LLGL_MOBILE_PLATFORM)\n        add_subdirectory(tests)\n    endif()\n    if(LLGL_BUILD_EXAMPLES)\n        add_subdirectory(examples)\n    endif(LLGL_BUILD_EXAMPLES)\nelse(GaussLib_INCLUDE_DIR)\n    # If GaussianLib is not available, tests and examples cannot be enabled\n    if(LLGL_BUILD_TESTS)\n        message(SEND_ERROR \"LLGL_BUILD_TESTS is enabled but 'GaussLib_INCLUDE_DIR' path is missing\")\n    endif()\n    if(LLGL_BUILD_EXAMPLES)\n        message(SEND_ERROR \"LLGL_BUILD_EXAMPLES is enabled but 'GaussLib_INCLUDE_DIR' path is missing\")\n    endif()\nendif(GaussLib_INCLUDE_DIR)\n\n# Wrapper: C#\nif(LLGL_BUILD_WRAPPER_CSHARP)\n    add_subdirectory(wrapper/CSharp)\nendif()\n\n# Install targets, headers, and CMake config files\nget_property(LLGL_ALL_TARGETS GLOBAL PROPERTY LLGL_GLOBAL_MODULE_LIST)\nif(LLGL_BUILD_RENDERER_DIRECT3D11 OR LLGL_BUILD_RENDERER_DIRECT3D12)\n    list(APPEND LLGL_ALL_TARGETS LLGL_DXCommon)\nendif()\n\ninstall(TARGETS ${LLGL_ALL_TARGETS} EXPORT LLGLTargets RUNTIME LIBRARY ARCHIVE)\ninstall(DIRECTORY \"${PROJECT_INCLUDE_DIR}/\" DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\")\ninstall(EXPORT LLGLTargets NAMESPACE LLGL:: DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/LLGL\")\ninclude(CMakePackageConfigHelpers)\nconfigure_package_config_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/Config.cmake.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/LLGLConfig.cmake\"\n    INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/LLGL\n)\ninstall(FILES \"${CMAKE_CURRENT_BINARY_DIR}/LLGLConfig.cmake\" DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/LLGL\")\n\n# Summary Information\nmessage(STATUS \"~~~ Build Summary ~~~\")\n\nmessage(STATUS \"Target Platform: ${LLGL_TARGET_PLATFORM}\")\nmessage(STATUS \"Target Architecture: ${SUMMARY_TARGET_ARCH}\")\nmessage(STATUS \"Target Library: ${SUMMARY_LIBRARY_TYPE}\")\n\nif(LLGL_BUILD_RENDERER_NULL)\n    message(STATUS \"Build Renderer: Null\")\nendif()\n\nif(LLGL_BUILD_RENDERER_OPENGL)\n    message(STATUS \"Build Renderer: OpenGL\")\nendif()\n\nif(LLGL_BUILD_RENDERER_OPENGLES3)\n    message(STATUS \"Build Renderer: ${LLGL_GL_ENABLE_OPENGLES}\")\nendif()\n\nif(LLGL_BUILD_RENDERER_WEBGL)\n    message(STATUS \"Build Renderer: WebGL\")\nendif()\n\nif(LLGL_BUILD_RENDERER_VULKAN)\n    message(STATUS \"Build Renderer: Vulkan\")\nendif()\n\nif(LLGL_BUILD_RENDERER_METAL)\n    message(STATUS \"Build Renderer: Metal\")\nendif()\n\nif(LLGL_BUILD_RENDERER_DIRECT3D11)\n    message(STATUS \"Build Renderer: ${LLGL_D3D11_ENABLE_FEATURELEVEL}\")\nendif()\n\nif(LLGL_BUILD_RENDERER_DIRECT3D12)\n    message(STATUS \"Build Renderer: ${LLGL_D3D12_ENABLE_FEATURELEVEL}\")\nendif()\n\nif(LLGL_BUILD_WRAPPER_C99)\n    message(STATUS \"Build Wrapper: C99\")\nendif()\n\nif(LLGL_BUILD_WRAPPER_CSHARP)\n    message(STATUS \"Build Wrapper: C#\")\nendif()\n\nif(LLGL_BUILD_EXAMPLES)\n    message(STATUS \"Build Examples\")\nendif()\n\nif(LLGL_BUILD_TESTS)\n    message(STATUS \"Build Tests\")\nendif()\n\nif(LLGL_VK_ENABLE_SPIRV_REFLECT)\n    message(STATUS \"Including Submodule: SPIRV-Headers\")\nendif()\n\nif(NOT \"${SUMMARY_FLAGS}\" STREQUAL \"\")\n    message(STATUS \"Options: ${SUMMARY_FLAGS}\")\nendif()\n\nmessage(STATUS \"~~~~~~~~~~~~~~~~~~~~~\")\n\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.462890625,
          "content": "Copyright (C) 2015 Lukas Hermanns\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation  and/or other materials provided with the distribution.\n3. Neither the names of the copyright holders nor the names of any\n   contributors may be used to endorse or promote products derived from this\n   software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "LLGL.natvis",
          "type": "blob",
          "size": 3.10546875,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n    <Type Name=\"LLGL::ArrayView&lt;*&gt;\" Inheritable=\"false\">\n        <DisplayString>{{size = {size_}}}</DisplayString>\n        <Expand>\n            <Item Name=\"[size]\" ExcludeView=\"simple\">size_</Item>\n            <ArrayItems>\n                <Size>size_</Size>\n                <ValuePointer>data_</ValuePointer>\n            </ArrayItems>\n        </Expand>\n    </Type>\n    <Type Name=\"LLGL::DynamicArray&lt;*&gt;\" Inheritable=\"false\">\n        <DisplayString>{{size = {size_}}}</DisplayString>\n        <Expand>\n            <Item Name=\"[size]\" ExcludeView=\"simple\">size_</Item>\n            <ArrayItems>\n                <Size>size_</Size>\n                <ValuePointer>data_</ValuePointer>\n            </ArrayItems>\n        </Expand>\n    </Type>\n    <Type Name=\"LLGL::SmallVector&lt;*&gt;\" Inheritable=\"false\">\n        <DisplayString Condition=\"size_ &gt; $T2\">{{size = {size_} | dynamic}}</DisplayString>\n        <DisplayString>{{size = {size_} | static}}</DisplayString>\n        <Expand>\n            <Item Name=\"[size]\" ExcludeView=\"simple\">size_</Item>\n            <Item Name=\"[capacity]\" ExcludeView=\"simple\" Condition=\"size_ &lt;= $T2\">$T2</Item>\n            <Item Name=\"[capacity]\" ExcludeView=\"simple\" Condition=\"size_ &gt; $T2\">cap_</Item>\n            <ArrayItems>\n                <Size>size_</Size>\n                <ValuePointer>data_</ValuePointer>\n            </ArrayItems>\n        </Expand>\n    </Type>\n    <Type Name=\"LLGL::BasicStringView&lt;*&gt;\" Inheritable=\"false\">\n        <DisplayString>{data_,[size_]s}</DisplayString>\n        <Expand>\n            <Item Name=\"[length]\" ExcludeView=\"simple\">size_</Item>\n            <ArrayItems>\n                <Size>size_</Size>\n                <ValuePointer>data_</ValuePointer>\n            </ArrayItems>\n        </Expand>\n    </Type>\n    <Type Name=\"LLGL::BasicStringLiteral&lt;*&gt;\" Inheritable=\"false\">\n        <DisplayString>{data_,s}</DisplayString>\n        <Expand>\n            <Item Name=\"[reference]\" ExcludeView=\"simple\" Condition=\"size_ == -1\">true</Item>\n            <Item Name=\"[reference]\" ExcludeView=\"simple\" Condition=\"size_ != -1\">false</Item>\n            <Item Name=\"[length]\" ExcludeView=\"simple\">strlen(data_)</Item>\n            <ArrayItems>\n                <Size>strlen(data_)</Size>\n                <ValuePointer>data_</ValuePointer>\n            </ArrayItems>\n        </Expand>\n    </Type>\n    <Type Name=\"LLGL::UTF8String\" Inheritable=\"false\">\n        <DisplayString>{data_.data_,s}</DisplayString>\n        <Expand>\n            <Item Name=\"[length]\" ExcludeView=\"simple\">data_.size_ - 1</Item>\n            <Item Name=\"[capacity]\" ExcludeView=\"simple\" Condition=\"data_.size_ &lt;= 16\">16</Item>\n            <Item Name=\"[capacity]\" ExcludeView=\"simple\" Condition=\"data_.size_ &gt; 16\">data_.cap_ - 1</Item>\n            <Item Name=\"[c_str]\" ExcludeView=\"simple\">data_.data_</Item>\n            <ArrayItems>\n                <Size>data_.size_ - 1</Size>\n                <ValuePointer>data_.data_</ValuePointer>\n            </ArrayItems>\n        </Expand>\n    </Type>\n</AutoVisualizer>"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.076171875,
          "content": "# Low Level Graphics Library (LLGL)\n\n<p align=\"center\">\n    <a href=\"https://github.com/LukasBanana/LLGL/blob/master/LICENSE.txt\"><img alt=\"License\" src=\"https://img.shields.io/badge/license-BSD--3%20clause-blue.svg\" /></a>\n    <a href=\"https://discord.com/channels/1257440130021457941\"><img alt=\"Discord\" src=\"https://img.shields.io/discord/1257440130021457941?logo=discord&logoColor=white\"></a?>\n</p>\n\n<p align=\"center\"><img src=\"docu/LLGL_Logo.png\"/></p>\n\n\n## Abstract\n\nLLGL aims to be a thin abstraction layer for a wide variety of modern and legacy rendering APIs as well as a multitude of platforms targeting both desktop and mobile.\nLLGL provides close coupling with the underlying APIs for a rich feature set while also simplifying architectural hurdles.\nThe library is written mostly in C++11 with the addition of a C99, C# 6.0, and Go wrapper.\n\n\n## Documentation\n\n- **Version**: 0.04 Beta (see [ChangeLog](docu/ChangeLog))\n- [Getting Started with LLGL](docu/GettingStarted/Getting%20Started%20with%20LLGL.pdf) (PDF)\nwith Introduction, Hello Triangle Tutorial, and Extensibility Example with [GLFW](http://www.glfw.org/)\n- [LLGL Reference Manual](docu/refman.pdf) (PDF)\n- [LLGL Coding Conventions](docu/CodingConventions/Coding%20Conventions%20for%20LLGL.pdf) (PDF)\n- [C++ Examples and Tutorials](examples/Cpp)\n- [C99 Examples](examples/C99)\n- [C# Examples](examples/CSharp)\n- [Go Examples](examples/Go)\n- [WebGL Examples](https://lukasbanana.github.io/LLGL/docu/WebPage)\n\n\n## Platform Support\n\n| Platform | CI | D3D12 | D3D11 | Vulkan | OpenGL | Metal |\n|----------|:--:|:-----:|:-----:|:------:|:------:|:-----:|\n| <img src=\"docu/Icons/windows.svg\" height=\"20\" /> Windows | <p>[![MSVC16+ CI](https://github.com/LukasBanana/LLGL/actions/workflows/ci_windows.yml/badge.svg)](https://github.com/LukasBanana/LLGL/actions/workflows/ci_windows.yml)</p> <p>[![MSVC14 CI](https://ci.appveyor.com/api/projects/status/j09x8n07u3byfky0?svg=true)](https://ci.appveyor.com/project/LukasBanana/llgl)</p> | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | N/A |\n| <img src=\"docu/Icons/uwp.svg\" height=\"20\" /> UWP | [![UWP CI](https://github.com/LukasBanana/LLGL/actions/workflows/ci_uwp.yml/badge.svg)](https://github.com/LukasBanana/LLGL/actions/workflows/ci_uwp.yml) | :heavy_check_mark: | :heavy_check_mark: | N/A | N/A | N/A |\n| <img src=\"docu/Icons/linux.svg\" height=\"20\" /> GNU/Linux | [![GNU/Linux CI](https://github.com/LukasBanana/LLGL/actions/workflows/ci_linux.yml/badge.svg)](https://github.com/LukasBanana/LLGL/actions/workflows/ci_linux.yml) | N/A | N/A | :heavy_check_mark: | :heavy_check_mark: | N/A |\n| <img src=\"docu/Icons/macos.svg\" height=\"20\" /> macOS | [![macOS CI](https://github.com/LukasBanana/LLGL/actions/workflows/ci_macos.yml/badge.svg)](https://github.com/LukasBanana/LLGL/actions/workflows/ci_macos.yml) | N/A | N/A | N/A | :heavy_check_mark: | :heavy_check_mark: |\n| <img src=\"docu/Icons/ios.svg\" height=\"20\" /> iOS | [![iOS CI](https://github.com/LukasBanana/LLGL/actions/workflows/ci_ios.yml/badge.svg)](https://github.com/LukasBanana/LLGL/actions/workflows/ci_ios.yml) | N/A | N/A | N/A | :heavy_check_mark: | :heavy_check_mark: |\n| <img src=\"docu/Icons/android.svg\" height=\"20\" /> Android | [![Android CI](https://github.com/LukasBanana/LLGL/actions/workflows/ci_android.yml/badge.svg)](https://github.com/LukasBanana/LLGL/actions/workflows/ci_android.yml) | N/A | N/A | :construction: | :heavy_check_mark: | N/A |\n| <img src=\"docu/Icons/wasm.svg\" height=\"20\" /> Wasm | [![WebAssembly CI](https://github.com/LukasBanana/LLGL/actions/workflows/ci_wasm.yml/badge.svg)](https://github.com/LukasBanana/LLGL/actions/workflows/ci_wasm.yml) | N/A | N/A | N/A | :heavy_check_mark: | N/A |\n\n\n## Build Notes\n\nBuild scripts are provided for [**CMake**]((https://cmake.org/)). See [LLGL Build System](https://github.com/LukasBanana/LLGL/tree/master/docu#llgl-build-system) for more details.\n\n### Windows\n\n[**Visual Studio 2015**](https://visualstudio.microsoft.com/) or later is required to build LLGL on Windows.\nThe Windows SDK is also required to build D3D11 and D3D12 backends.\n\n### macOS, iOS\n\n[**Xcode 9**](https://developer.apple.com/xcode/) or later is required to build LLGL on macOS and iOS.\nFor older Macs, there is a legacy mode to build LLGL for Mac OS X 10.6 using [MacPorts](https://www.macports.org/) of Clang.\n\n### GNU/Linux\n\nLLGL on GNU/Linux requires the development libraries for [X11](https://www.x.org/) and its [Xrandr](https://www.x.org/wiki/Projects/XRandR/) extension (see [docs](docu#gnulinux) for details).\n\n### Android\n\n[Android NDK](https://developer.android.com/ndk) with at least API level 21 is required.\nThe build script supports generating project files for [Android Studio](https://developer.android.com/studio).\n\n## Installing (vcpkg)\n\nAlternatively, you can build and install LLGL using [vcpkg](https://github.com/Microsoft/vcpkg/) dependency manager:\n\n```\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    ./vcpkg install llgl\n```\n\nThe LLGL port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n\n## Showcase\n\n<p align=\"center\">\n    <img src=\"examples/Cpp/PostProcessing/Example.png\" alt=\"Screenshot missing: Post processing example\" style=\"width:300px;height:auto;\">\n    <img src=\"examples/Cpp/ShadowMapping/Example.png\" alt=\"Screenshot missing: Shadow mapping example\" style=\"width:300px;height:auto;\">\n</p>\n\n<p align=\"center\">\n    <img src=\"examples/Cpp/PBR/Example.png\" alt=\"Screenshot missing: PBR example\" style=\"width:300px;height:auto;\">\n    <img src=\"examples/Cpp/ClothPhysics/Example.gif\" alt=\"Screenshot missing: Cloth physics example\" style=\"width:300px;height:auto;\">\n</p>\n\n<p align=\"center\">\n    <img src=\"examples/Cpp/Fonts/Example.iOS.png\" alt=\"Screenshot missing: Fonts example (iOS)\" style=\"height:400px;width:auto;\">\n    <img src=\"examples/Cpp/ClothPhysics/Example.iOS.png\" alt=\"Screenshot missing: Cloth physics example (iOS)\" style=\"height:400px;width:auto;\">\n</p>\n\n"
        },
        {
          "name": "RunExamplesLinux.sh",
          "type": "blob",
          "size": 2.1748046875,
          "content": "#!/bin/bash\n\nDEFAULT_BUILD_DIRS=(\"build_linux/build\" \"build_linux/build/Debug\" \"bin/Linux-x86_64/build\")\n\nBUILD_DIR=\"${DEFAULT_BUILD_DIRS[0]}\"\n\nif [ \"$#\" -ge 1 ]; then\n    if [ \"$1\" != \"--\" ]; then\n        HELLO_EXAMPLE=\"Example_HelloTriangle\"\n        BUILD_DIR=$1\n        if [[ \"$BUILD_DIR\" == */ ]]; then\n            BUILD_DIR=\"${BUILD_DIR::-1}\" # Remove trailing '/' character from path\n        fi\n        if [ -f \"$BUILD_DIR/build/$HELLO_EXAMPLE\" ] || [ -f \"$BUILD_DIR/build/${HELLO_EXAMPLE}D\" ]; then\n            BUILD_DIR=\"$BUILD_DIR/build\"\n        fi\n    fi\n    shift\nelse\n    for DIR in \"${DEFAULT_BUILD_DIRS[@]}\"; do\n        if [ -d \"$DIR\" ]; then\n            if [ -f \"$DIR/libLLGL.so\" ] || [ -f \"$DIR/libLLGLD.so\" ] || [ -f \"$DIR/libLLGL.a\" ] || [ -f \"$DIR/libLLGLD.a\" ]; then\n                BUILD_DIR=\"$DIR\"\n                break\n            fi\n        fi\n    done\nfi\n\n# Validate build folder: Check for libLLGL.so/.a or libLLGLD.so/.a files\nif [ -d \"$BUILD_DIR\" ]; then\n    if [ -f \"$BUILD_DIR/libLLGL.so\" ] || [ -f \"$BUILD_DIR/libLLGLD.so\" ] || [ -f \"$BUILD_DIR/libLLGL.a\" ] || [ -f \"$BUILD_DIR/libLLGLD.a\" ]; then\n        echo \"Run examples from build directory: $BUILD_DIR\"\n    else\n        echo \"Error: Missing LLGL base lib (libLLGL.so/.a or libLLGLD.so/.a) in build folder: $BUILD_DIR\"\n        exit 1\n    fi\nelse\n    echo \"Error: Build folder not found: $BUILD_DIR\"\n    exit 1\nfi\n\nlist_examples()\n{\n    EXCLUDED=(MultiRenderer MultiThreading PBR ComputeShader)\n    EXAMPLE_DIRS=($(ls examples/Cpp))\n    for DIR in \"${EXAMPLE_DIRS[@]}\"; do\n        if ! echo \"${EXCLUDED[@]}}\" | grep -qw \"$DIR\"; then\n            # Include example if its source and binary files exist\n            if [ -f \"examples/Cpp/$DIR/Example.cpp\" ] && [ -f \"$BUILD_DIR/Example_$DIR\" -o -f \"$BUILD_DIR/Example_${DIR}D\" ]; then\n                echo \"$DIR\"\n            fi\n        fi\n    done\n}\n\nrun_example()\n(\n    EXAMPLE=$1\n    shift\n    EXE=\"../../../$BUILD_DIR/Example_$EXAMPLE\"\n    EXE_D=\"${EXE}D\"\n    cd examples/Cpp/$EXAMPLE\n    if [ -f \"$EXE_D\" ]; then\n        eval $EXE_D $@\n    else\n        eval $EXE $@\n    fi\n)\n\nEXAMPLES=($(list_examples))\n\nPS3=\"Select example: \"\nselect OPT in \"${EXAMPLES[@]}\"; do\n    run_example $OPT $@\ndone\n"
        },
        {
          "name": "RunExamplesMacOS.command",
          "type": "blob",
          "size": 1.916015625,
          "content": "#!/bin/sh\n\nDEFAULT_BUILD_DIRS=(\"build_macos/build\" \"build_macos/build/Debug\" \"bin/macOS-x64/build\")\n\nSOURCE_DIR=\"$(dirname $0)\"\nBUILD_DIR=\"$SOURCE_DIR/${DEFAULT_BUILD_DIRS[0]}\"\n\n# When this .command script is launched from Finder, we have to change to the source directory explicitly\ncd $SOURCE_DIR\n\nif [ \"$#\" -eq 1 ]; then\n    BUILD_DIR=$1\nelse\n    for DIR in \"${DEFAULT_BUILD_DIRS[@]}\"; do\n        if [ -d \"$DIR\" ]; then\n            if [ -f \"$DIR/libLLGL.dylib\" ] || [ -f \"$DIR/libLLGLD.dylib\" ] || [ -f \"$DIR/libLLGL.a\" ] || [ -f \"$DIR/libLLGLD.a\" ]; then\n                BUILD_DIR=\"$DIR\"\n                break\n            fi\n        fi\n    done\nfi\n\n# Validate build folder: Check for libLLGL.dylib/.a or libLLGLD.dylib/.a files\nif [ -d \"$BUILD_DIR\" ]; then\n    if [ -f \"$BUILD_DIR/libLLGL.dylib\" ] || [ -f \"$BUILD_DIR/libLLGLD.dylib\" ] || [ -f \"$BUILD_DIR/libLLGL.a\" ] || [ -f \"$BUILD_DIR/libLLGLD.a\" ]; then\n        echo \"Run examples from build directory: $BUILD_DIR\"\n    else\n        echo \"Error: Missing LLGL base lib (libLLGL.dylib/.a or libLLGLD.dylib/.a) in build folder: $BUILD_DIR\"\n        exit 1\n    fi\nelse\n    echo \"Error: Build folder not found: $BUILD_DIR\"\n    exit 1\nfi\n\nlist_examples()\n{\n    EXCLUDED=() # List any examples that are specifically excluded on Mac\n    EXAMPLE_DIRS=($(ls examples/Cpp))\n    for DIR in \"${EXAMPLE_DIRS[@]}\"; do\n        if ! echo \"${EXCLUDED[@]}}\" | grep -qw \"$DIR\"; then\n            # Include example if its source and binary files exist\n            if [ -f \"examples/Cpp/$DIR/Example.cpp\" ] && [ -f \"$BUILD_DIR/Example_${DIR}.app/Contents/MacOS/Example_${DIR}\" ]; then\n                echo \"$DIR\"\n            fi\n        fi\n    done\n}\n\nrun_example()\n(\n    EXAMPLE=$1\n    EXE=\"../../../$BUILD_DIR/Example_${EXAMPLE}.app/Contents/MacOS/Example_${EXAMPLE}\"\n    cd examples/Cpp/$EXAMPLE\n    eval $EXE\n)\n\nEXAMPLES=($(list_examples))\n\nPS3=\"Select example: \"\nselect OPT in \"${EXAMPLES[@]}\"; do\n    run_example $OPT\ndone\n"
        },
        {
          "name": "RunExamplesWin64.bat",
          "type": "blob",
          "size": 1.3896484375,
          "content": "@echo off\nsetlocal EnableDelayedExpansion\n\nREM Get build directory\nset BUILD_DIR=build_win64\\build\n\nif not \"%1\" == \"\" (\n    set BUILD_DIR=%1\n    if \"!BUILD_DIR:~-1!\"==\"\\\" set BUILD_DIR=!BUILD_DIR:~0,-1!\n    if \"!BUILD_DIR:~-1!\"==\"/\" set BUILD_DIR=!BUILD_DIR:~0,-1!\n    if not exist \"!BUILD_DIR!\\Debug\\LLGLD.dll\" (\n        if not exist \"!BUILD_DIR!\\Release\\LLGL.dll\" (\n            set BUILD_DIR=!BUILD_DIR!\\build\n        )\n    )\n)\n\nREM Find all example projects\nset EXAMPLES=\"\"\nfor /F \"TOKENS=* USEBACKQ\" %%F in (`dir /B /AD examples\\Cpp`) do (\n    if !EXAMPLES! EQU \"\" (\n        set EXAMPLES=%%F\n    ) else (\n        set EXAMPLES=!EXAMPLES! %%F\n    )\n)\n\n:Start\necho Select example:\n\necho  q.^)^ QUIT\necho  --------\n\nset /A NUM_EXAMPLES = 0\nfor %%F in (!EXAMPLES!) do (\n    set /A NUM_EXAMPLES += 1\n    set EXAMPLE_NAME[!NUM_EXAMPLES!]=%%F\n    if !NUM_EXAMPLES! LSS 10 (\n        echo  !NUM_EXAMPLES!.^)^ %%F\n    ) else (\n        echo !NUM_EXAMPLES!.^)^ %%F\n    )\n)\n\n:Prompt\nset /P \"INPUT=\"\n\nif not defined INPUT goto Prompt\n\nif \"%INPUT%\"==\"q\" goto End\nif \"%INPUT%\"==\"Q\" goto End\n\nif %INPUT% LEQ %NUM_EXAMPLES% (\n    set SELECTION=!EXAMPLE_NAME[%INPUT%]!\n    pushd %~dp0\\examples\\Cpp\\!SELECTION!\n    if exist \"%~dp0\\%BUILD_DIR%\\Debug\\Example_!SELECTION!D.exe\" (\n        %~dp0\\%BUILD_DIR%\\Debug\\Example_!SELECTION!D.exe\n    ) else (\n        %~dp0\\%BUILD_DIR%\\Release\\Example_!SELECTION!.exe\n    )\n    popd\n)\n\ngoto Start\n\n:End\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 2.95703125,
          "content": "version: 0.03.{build}\n\nenvironment:\n  matrix:\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      GENERATOR: \"Visual Studio 14 2015\"\n      ARCH: \"Win32\"\n      STATIC_LIB: OFF\n      CONFIG: Debug\n    \n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      GENERATOR: \"Visual Studio 14 2015\"\n      ARCH: \"Win32\"\n      STATIC_LIB: ON\n      CONFIG: Debug\n    \n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      GENERATOR: \"Visual Studio 14 2015\"\n      ARCH: \"Win32\"\n      STATIC_LIB: OFF\n      CONFIG: Release\n    \n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      GENERATOR: \"Visual Studio 14 2015\"\n      ARCH: \"Win32\"\n      STATIC_LIB: ON\n      CONFIG: Release\n    \n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      GENERATOR: \"Visual Studio 14 2015\"\n      ARCH: \"x64\"\n      STATIC_LIB: OFF\n      CONFIG: Debug\n    \n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      GENERATOR: \"Visual Studio 14 2015\"\n      ARCH: \"x64\"\n      STATIC_LIB: ON\n      CONFIG: Debug\n    \n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      GENERATOR: \"Visual Studio 14 2015\"\n      ARCH: \"x64\"\n      STATIC_LIB: OFF\n      CONFIG: Release\n\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      GENERATOR: \"Visual Studio 14 2015\"\n      ARCH: \"x64\"\n      STATIC_LIB: ON\n      CONFIG: Release\n\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      GENERATOR: \"Visual Studio 15 2017\"\n      ARCH: \"Win32\"\n      STATIC_LIB: OFF\n      CONFIG: Debug\n    \n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      GENERATOR: \"Visual Studio 15 2017\"\n      ARCH: \"Win32\"\n      STATIC_LIB: ON\n      CONFIG: Debug\n    \n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      GENERATOR: \"Visual Studio 15 2017\"\n      ARCH: \"Win32\"\n      STATIC_LIB: OFF\n      CONFIG: Release\n    \n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      GENERATOR: \"Visual Studio 15 2017\"\n      ARCH: \"Win32\"\n      STATIC_LIB: ON\n      CONFIG: Release\n    \n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      GENERATOR: \"Visual Studio 15 2017\"\n      ARCH: \"x64\"\n      STATIC_LIB: OFF\n      CONFIG: Debug\n    \n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      GENERATOR: \"Visual Studio 15 2017\"\n      ARCH: \"x64\"\n      STATIC_LIB: ON\n      CONFIG: Debug\n    \n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      GENERATOR: \"Visual Studio 15 2017\"\n      ARCH: \"x64\"\n      STATIC_LIB: OFF\n      CONFIG: Release\n\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      GENERATOR: \"Visual Studio 15 2017\"\n      ARCH: \"x64\"\n      STATIC_LIB: ON\n      CONFIG: Release\n\nbuild_script:\n  - git clone https://github.com/LukasBanana/GaussianLib.git\n  - cmake -G \"%GENERATOR%\" -A \"%ARCH%\" -DLLGL_BUILD_STATIC_LIB=%STATIC_LIB% -DLLGL_BUILD_EXAMPLES=ON -DLLGL_BUILD_TESTS=ON -DLLGL_BUILD_RENDERER_OPENGL=ON -DLLGL_BUILD_RENDERER_DIRECT3D11=ON -DLLGL_BUILD_RENDERER_DIRECT3D12=ON -DGaussLib_INCLUDE_DIR:STRING=\"GaussianLib/include\" -S . -B builds\n  - cmake --build builds --config \"%CONFIG%\"\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docu",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 0.4501953125,
          "content": "<!DOCTYPE HTML>\n<html lang=\"en-US\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta http-equiv=\"refresh\" content=\"0; url=docu/WebPage/index.html\">\n        <script type=\"text/javascript\">\n            window.location.href = \"docu/WebPage/index.html\"\n        </script>\n        <title>Page Redirection</title>\n    </head>\n    <body>\n        If you are not redirected automatically, follow this <a href=\"docu/WebPage/index.html\">link</a>.\n    </body>\n</html>"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "sources",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "wrapper",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}