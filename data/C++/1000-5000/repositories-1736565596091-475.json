{
  "metadata": {
    "timestamp": 1736565596091,
    "page": 475,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "NVIDIAGameWorks/Falcor",
      "stars": 2756,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.3701171875,
          "content": "# C++ formatting\n\nLanguage: Cpp\nBasedOnStyle: Chromium\nIndentWidth: 4\nColumnLimit: 140\nAccessModifierOffset: -4\nSortIncludes: false\nSortUsingDeclarations: false\nSpaceAfterTemplateKeyword: false\nDerivePointerAlignment: false\nPointerAlignment: Left\nFixNamespaceComments: true\n\nBinPackArguments: false\nAllowAllConstructorInitializersOnNextLine: true\nBreakConstructorInitializers: BeforeComma\nAlwaysBreakTemplateDeclarations: true\nAllowShortFunctionsOnASingleLine: Inline\nAllowShortEnumsOnASingleLine: true\nBreakBeforeBraces: Custom\nBraceWrapping:\n    AfterCaseLabel: true\n    AfterClass: true\n    AfterControlStatement: Always\n    AfterEnum: true\n    AfterFunction: true\n    AfterNamespace: true\n    AfterStruct: true\n    AfterUnion: true\n    AfterExternBlock: true\n    BeforeCatch: true\n    BeforeElse: true\n    BeforeLambdaBody: true\n    BeforeWhile: false\n    SplitEmptyFunction: false\n    SplitEmptyRecord: false\n    SplitEmptyNamespace: false\nIndentCaseLabels: false\n\nReflowComments: true\nCommentPragmas: '^\\\\.+'\nSpacesBeforeTrailingComments: 1\nPenaltyBreakComment: 0\nAlignAfterOpenBracket: BlockIndent\nIndentPPDirectives: None\nPenaltyReturnTypeOnItsOwnLine: 100000\nPenaltyBreakTemplateDeclaration: 100000\n\n---\n\n# Slang formatting\n\nLanguage: CSharp\nBasedOnStyle: Chromium\nIndentWidth: 4\nColumnLimit: 140\nAccessModifierOffset: -4\nSortIncludes: false\nSortUsingDeclarations: false\nSpaceAfterTemplateKeyword: false\nDerivePointerAlignment: false\nPointerAlignment: Left\nFixNamespaceComments: true\n\nBinPackArguments: false\nAllowAllConstructorInitializersOnNextLine: true\nBreakConstructorInitializers: BeforeComma\nAlwaysBreakTemplateDeclarations: true\nAllowShortFunctionsOnASingleLine: Inline\nAllowShortEnumsOnASingleLine: true\nBreakBeforeBraces: Custom\nBraceWrapping:\n    AfterCaseLabel: true\n    AfterClass: true\n    AfterControlStatement: Always\n    AfterEnum: true\n    AfterFunction: true\n    AfterNamespace: true\n    AfterStruct: true\n    AfterUnion: true\n    AfterExternBlock: true\n    BeforeCatch: true\n    BeforeElse: true\n    BeforeLambdaBody: true\n    BeforeWhile: false\n    SplitEmptyFunction: false\n    SplitEmptyRecord: false\n    SplitEmptyNamespace: false\nIndentCaseLabels: false\n\nReflowComments: true\nCommentPragmas: '^\\\\.+'\nSpacesBeforeTrailingComments: 1\nPenaltyBreakComment: 0\nAlignAfterOpenBracket: BlockIndent\nIndentPPDirectives: None\nPenaltyReturnTypeOnItsOwnLine: 100000\nPenaltyBreakTemplateDeclaration: 100000\n"
        },
        {
          "name": ".clang-format-ignore",
          "type": "blob",
          "size": 0.259765625,
          "content": "Source/Falcor/Rendering\nSource/Falcor/Scene\nSource/Mogwai\nSource/plugins/importers/USDImporter\nSource/RenderPasses/PathTracer\n\n# Explicitly whitelisted files\n!Source/Falcor/Rendering/Materials/BSDFs\n!Source/RenderPasses/DLSSPass/\n!Source/Falcor/Utils/fast_vector.h\n\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.5146484375,
          "content": "# Allow looking at files higher up in the directory tree\nroot = false\n\n# Set default editor config for all files:\n# - use utf-8 as default\n# - 4 spaces, no trailing whitespaces\n# - final newline for slightly cleaner diffs when changing the last line\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n# Override trailing whitespace setting for Markdown since there it's actually useful\n[*.{md}]\ntrim_trailing_whitespace = false\n\n[*.{yml,yaml}]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.169921875,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\n* text=auto\n# Format slang files as HLSL.\n*.slang gitlab-language=hlsl\n*.slangh gitlab-language=hlsl\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.318359375,
          "content": "# Build folder.\n/build/\n\n# Test output folder.\n/tests/data/\n\n# Media folders.\n/media\n/media_internal\n\n# Packman folders.\n/external/packman/\n/tools/.packman/\n\n# IDE folders.\n/.vs/\n/.vscode/\n\n# User files.\n/CMakeUserPresets.json\n\n# File types.\n*.user\n*.suo\n*.pyc\n*.VC.db\n*.VC.opendb\n*.pyc\n*slang-dump-*\n*.mp4\n*.tlog\n*.bak\n*.swp\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.5859375,
          "content": "[submodule \"external/pybind11\"]\n\tpath = external/pybind11\n\turl = https://github.com/skallweitNV/pybind11.git\n[submodule \"external/glfw\"]\n\tpath = external/glfw\n\turl = https://github.com/glfw/glfw.git\n[submodule \"external/args\"]\n\tpath = external/args\n\turl = https://github.com/Taywee/args.git\n[submodule \"external/fmt\"]\n\tpath = external/fmt\n\turl = https://github.com/fmtlib/fmt.git\n[submodule \"external/imgui\"]\n\tpath = external/imgui\n\turl = https://github.com/ocornut/imgui.git\n[submodule \"external/vulkan-headers\"]\n\tpath = external/vulkan-headers\n\turl = https://github.com/KhronosGroup/Vulkan-Headers\n"
        },
        {
          "name": ".vscode-default",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 17.994140625,
          "content": "cmake_minimum_required(VERSION 3.15)\n\ncmake_policy(SET CMP0077 NEW)\ncmake_policy(SET CMP0091 NEW)\ncmake_policy(SET CMP0104 NEW)\ncmake_policy(SET CMP0057 NEW)\n\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)\n\nproject(Falcor\n    DESCRIPTION \"Falcor Realtime Rendering Framework\"\n    LANGUAGES CXX C\n)\n\n# -----------------------------------------------------------------------------\n# Configuration options\n# -----------------------------------------------------------------------------\n\n# Enable/disable asserts. AUTO enables asserts in debug builds.\nset(FALCOR_ENABLE_ASSERTS \"AUTO\" CACHE STRING \"Enable asserts\")\nset_property(CACHE FALCOR_ENABLE_ASSERTS PROPERTY STRINGS AUTO ON OFF)\n\n# Enable/disable the profiler.\nset(FALCOR_ENABLE_PROFILER ON CACHE BOOL \"Enable profiler\")\n\n# Enable/disable using system Python distribution. This requires Python 3.7 to be available.\nset(FALCOR_USE_SYSTEM_PYTHON OFF CACHE BOOL \"Use system Python distribution\")\n\n# Enable/disable USD.\nset(FALCOR_ENABLE_USD ON CACHE BOOL \"Enable USD\")\n\n\n# Enable/disable Address Sanitizer.\nset(FALCOR_ENABLE_ASAN OFF CACHE BOOL \"Enable Address Sanitizer\")\n\n# Header validation.\n# If enabled, additional targets are generated to validate that headers are self sufficient.\nset(FALCOR_VALIDATE_HEADERS OFF CACHE BOOL \"Enable header validation\")\n\n# Precompiled headers.\n# If enabled, precompiled headers are used to speed up compilation.\nset(FALCOR_PRECOMPILED_HEADERS ON CACHE BOOL \"Enable precompiled headers\")\n\n# -----------------------------------------------------------------------------\n# Check platform\n# -----------------------------------------------------------------------------\n\nif(${CMAKE_SYSTEM_NAME} MATCHES \"Window\")\n    set(FALCOR_PLATFORM \"Windows\")\n    set(FALCOR_WINDOWS TRUE)\nelseif(${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\n    set(FALCOR_PLATFORM \"Linux\")\n    set(FALCOR_LINUX TRUE)\nelse()\n    message(FATAL_ERROR \"Unsupported platform!\")\nendif()\nmessage(STATUS \"Platform: ${FALCOR_PLATFORM}\")\n\n# Check if D3D12/Vulkan are available.\nset(FALCOR_HAS_D3D12 ${FALCOR_WINDOWS})\nset(FALCOR_HAS_VULKAN ON)\n\n# -----------------------------------------------------------------------------\n# git submodules\n# -----------------------------------------------------------------------------\n\nif(NOT EXISTS ${CMAKE_SOURCE_DIR}/external/pybind11/CMakeLists.txt)\n    message(STATUS \"Updating git submodules ...\")\n    find_package(Git REQUIRED)\n    execute_process(\n        COMMAND ${GIT_EXECUTABLE} submodule update --init\n        COMMAND_ERROR_IS_FATAL ANY\n    )\nendif()\n\n# -----------------------------------------------------------------------------\n# Packman\n# -----------------------------------------------------------------------------\n\n# Falcor uses packman to pull binary dependencies. We need to pull the dependencies\n# before CMake starts configuring the project as some of the configuration relies\n# on these dependencies being available. We also add additional targets to pull\n# the dependencies when the project is built such that they are updated automatically\n# if the manifest files change.\n\nif(FALCOR_WINDOWS)\n    set(PACKMAN \"${CMAKE_SOURCE_DIR}/tools/packman/packman.cmd\")\n    set(PACKMAN_PLATFORM \"windows-x86_64\")\nelseif(FALCOR_LINUX)\n    set(PACKMAN \"${CMAKE_SOURCE_DIR}/tools/packman/packman\")\n    set(PACKMAN_PLATFORM \"linux-x86_64\")\nendif()\n\n# Pull dependencies at configure time.\nmessage(STATUS \"Updating packman dependencies ...\")\nexecute_process(\n    COMMAND ${PACKMAN} pull ${CMAKE_SOURCE_DIR}/dependencies.xml --platform ${PACKMAN_PLATFORM}\n    COMMAND_ERROR_IS_FATAL ANY\n)\n\n# -----------------------------------------------------------------------------\n# Misc\n# -----------------------------------------------------------------------------\n\n# Setup workaround for re-running mt.exe when it fails due to a race condition with AV software.\ninclude(mt-retry)\n\n# Embed git information.\ninclude(git_version)\ngit_version_setup()\n\n# On Linux, we build with RPATH set to $ORIGIN to make build relocatable.\n# Also, we link with precompiled libraries that are compiled with _GLIBCXX_USE_CXX11_ABI=0,\n# so we need to compile with the same flag to avoid ABI incompatibilities.\nif(FALCOR_LINUX)\n    set(CMAKE_INSTALL_RPATH $ORIGIN)\n    set(CMAKE_BUILD_WITH_INSTALL_RPATH ON)\n    set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} -D_GLIBCXX_USE_CXX11_ABI=0)\nendif()\n\n\n# -----------------------------------------------------------------------------\n# CUDA\n# -----------------------------------------------------------------------------\n\n\n# Set default CUDA architecture to 75 (Turing).\n# This can be overwritten for individual targets using the CUDA_ARCHITECTURE property.\nif(NOT DEFINED CMAKE_CUDA_ARCHITECTURES)\n  set(CMAKE_CUDA_ARCHITECTURES 75-virtual)\nendif()\n\ninclude(CheckLanguage)\ncheck_language(CUDA)\nif(CMAKE_CUDA_COMPILER)\n    message(STATUS \"Enabling CUDA support.\")\n    enable_language(CUDA)\n    find_package(CUDAToolkit REQUIRED)\n    set(FALCOR_HAS_CUDA ON)\nelse()\n    set(FALCOR_HAS_CUDA OFF)\nendif()\n\n# -----------------------------------------------------------------------------\n# Python\n# -----------------------------------------------------------------------------\n\nif(FALCOR_USE_SYSTEM_PYTHON)\n    find_package(Python COMPONENTS Interpreter Development REQUIRED)\nelse()\n    set(Python_ROOT_DIR ${CMAKE_SOURCE_DIR}/external/packman/python)\n    find_package(Python COMPONENTS Interpreter Development REQUIRED)\nendif()\n\nif(FALCOR_WINDOWS)\n    set(TOOLS_PYTHON ${CMAKE_SOURCE_DIR}/tools/.packman/python/python)\nelseif(FALCOR_LINUX)\n    set(TOOLS_PYTHON ${Python_EXECUTABLE})\nendif()\n\n# -----------------------------------------------------------------------------\n# Global setup\n# -----------------------------------------------------------------------------\n\n# Require builds to be outside of source tree.\nfile(TO_CMAKE_PATH \"${PROJECT_BINARY_DIR}/CMakeLists.txt\" LOC_PATH)\nif(EXISTS \"${LOC_PATH}\")\n    message(FATAL_ERROR \"You cannot build in a source directory (or any directory with a CMakeLists.txt file). Please use a build directory instead.\")\nendif()\n\n# Enable folders (for Visual Studio).\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\n# Setup available build configurations.\nif(NOT SETUP_CONFIGURATION_TYPES)\n    set(SETUP_CONFIGURATION_TYPES 1)\n\n    if(CMAKE_CONFIGURATION_TYPES)\n        # multi config generator\n        set(CMAKE_CONFIGURATION_TYPES \"Debug;Release\" CACHE STRING \"\" FORCE)\n    else()\n        # single config generator\n        set_property(CACHE CMAKE_BUILD_TYPE PROPERTY HELPSTRING \"Choose the type of build\")\n        set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug;Release\")\n    endif()\nendif()\n\nset(FALCOR_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\nset(FALCOR_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n\nif(CMAKE_CONFIGURATION_TYPES)\n    set(FALCOR_OUTPUT_DIRECTORY ${FALCOR_RUNTIME_OUTPUT_DIRECTORY}/$<CONFIG>)\nelse()\n    set(FALCOR_OUTPUT_DIRECTORY ${FALCOR_RUNTIME_OUTPUT_DIRECTORY})\nendif()\n\nset(FALCOR_SHADER_OUTPUT_DIRECTORY ${FALCOR_OUTPUT_DIRECTORY}/shaders)\nset(FALCOR_PLUGIN_OUTPUT_DIRECTORY ${FALCOR_OUTPUT_DIRECTORY}/plugins)\n\n# -----------------------------------------------------------------------------\n# External dependencies\n# -----------------------------------------------------------------------------\n\nadd_subdirectory(external)\n\nmessage(STATUS \"Feature flags:\")\nmessage(STATUS \"FALCOR_HAS_D3D12: ${FALCOR_HAS_D3D12}\")\nmessage(STATUS \"FALCOR_HAS_VULKAN: ${FALCOR_HAS_VULKAN}\")\nmessage(STATUS \"FALCOR_HAS_AFTERMATH: ${FALCOR_HAS_AFTERMATH}\")\nmessage(STATUS \"FALCOR_HAS_NVAPI: ${FALCOR_HAS_NVAPI}\")\nmessage(STATUS \"FALCOR_HAS_PIX: ${FALCOR_HAS_PIX}\")\nmessage(STATUS \"FALCOR_HAS_CUDA: ${FALCOR_HAS_CUDA}\")\nmessage(STATUS \"FALCOR_HAS_OPTIX: ${FALCOR_HAS_OPTIX}\")\nmessage(STATUS \"FALCOR_HAS_D3D12_AGILITY_SDK: ${FALCOR_HAS_D3D12_AGILITY_SDK}\")\nmessage(STATUS \"FALCOR_HAS_NRD: ${FALCOR_HAS_NRD}\")\nmessage(STATUS \"FALCOR_HAS_DLSS: ${FALCOR_HAS_DLSS}\")\nmessage(STATUS \"FALCOR_HAS_NV_USD: ${FALCOR_HAS_NV_USD}\")\nmessage(STATUS \"FALCOR_HAS_MDL_SDK: ${FALCOR_HAS_MDL_SDK}\")\nmessage(STATUS \"FALCOR_ENABLE_USD: ${FALCOR_ENABLE_USD}\")\n\n# -----------------------------------------------------------------------------\n# Packman dependencies\n# -----------------------------------------------------------------------------\n\nadd_custom_target(packman_dependencies DEPENDS packman_dependencies_stamp)\nset_target_properties(packman_dependencies PROPERTIES FOLDER \"Misc\")\nadd_custom_command(\n    OUTPUT packman_dependencies_stamp\n    COMMAND ${PACKMAN} pull ${CMAKE_SOURCE_DIR}/dependencies.xml --platform ${PACKMAN_PLATFORM}\n    COMMAND ${CMAKE_COMMAND} -E touch packman_dependencies_stamp\n    MAIN_DEPENDENCY ${CMAKE_SOURCE_DIR}/dependencies.xml\n    COMMENT \"Updating packman dependencies\"\n)\n\n# -----------------------------------------------------------------------------\n# Shader file handling\n# -----------------------------------------------------------------------------\n\n# Regex for matching shader files.\nset(SHADER_EXTENSION_REGEX \"\\.(slang|slangh|hlsli|hlsl)$\")\n\n# Setup build rules to copy all shaders of a target to the output directory.\n# The specified output_dir is relative to the global shader output directory (FALCOR_SHADER_OUTPUT_DIRECTORY).\nfunction(target_copy_shaders target output_dir)\n    get_target_property(target_source_dir ${target} SOURCE_DIR)\n    set(shader_output_dir ${FALCOR_SHADER_OUTPUT_DIRECTORY}/${output_dir})\n\n    # Get list of all target sources.\n    get_target_property(target_sources_ ${target} SOURCES)\n\n    # Create custom commands for copying shader sources.\n    foreach(file ${target_sources_})\n        if(${file} MATCHES ${SHADER_EXTENSION_REGEX})\n            if(IS_ABSOLUTE ${file})\n                file(RELATIVE_PATH file ${target_source_dir} ${file})\n            endif()\n\n            set(src_file ${target_source_dir}/${file})\n            set(dst_file ${shader_output_dir}/${file})\n\n            add_custom_command(\n                OUTPUT ${dst_file}\n                COMMAND ${CMAKE_COMMAND} ARGS -E copy_if_different ${src_file} ${dst_file}\n                MAIN_DEPENDENCY ${src_file}\n                COMMENT \"${target}: Copying shader ${file}\"\n            )\n        endif()\n    endforeach()\nendfunction()\n\n# -----------------------------------------------------------------------------\n# Data file handling\n# -----------------------------------------------------------------------------\n\nadd_custom_target(copy_data_folder ALL\n    COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/data ${FALCOR_OUTPUT_DIRECTORY}/data\n)\nset_target_properties(copy_data_folder PROPERTIES FOLDER \"Misc\")\n\nadd_custom_target(copy_scripts_folder ALL\n    COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/scripts ${FALCOR_OUTPUT_DIRECTORY}/scripts\n)\nset_target_properties(copy_scripts_folder PROPERTIES FOLDER \"Misc\")\n\n# -----------------------------------------------------------------------------\n# Falcor applications\n# -----------------------------------------------------------------------------\n\n# Create a Falcor application and link the main Falcor library.\nfunction(add_falcor_executable target)\n    add_executable(${target})\n\n    target_link_libraries(${target} PRIVATE Falcor)\n\n    set_target_properties(${target} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${FALCOR_RUNTIME_OUTPUT_DIRECTORY})\n\n    set_target_properties(${target} PROPERTIES VS_DEBUGGER_ENVIRONMENT \"FALCOR_DEVMODE=1\")\nendfunction()\n\n# -----------------------------------------------------------------------------\n# Plugins\n# -----------------------------------------------------------------------------\n\n# Global render pass target list.\nset_property(GLOBAL PROPERTY FALCOR_PLUGIN_TARGETS)\n\n# Create a Falcor plugin.\nfunction(add_plugin target)\n    add_library(${target} SHARED)\n\n    target_link_libraries(${target} PRIVATE Falcor)\n\n    set_target_properties(${target} PROPERTIES\n        PREFIX \"\"\n        RUNTIME_OUTPUT_DIRECTORY ${FALCOR_PLUGIN_OUTPUT_DIRECTORY}\n        LIBRARY_OUTPUT_DIRECTORY ${FALCOR_PLUGIN_OUTPUT_DIRECTORY}\n        INSTALL_RPATH \"\\$ORIGIN/../\"\n    )\n\n    # Add target to global plugin target list.\n    set_property(GLOBAL APPEND PROPERTY FALCOR_PLUGIN_TARGETS ${target})\nendfunction()\n\n# -----------------------------------------------------------------------------\n# Helpers\n# -----------------------------------------------------------------------------\n\n# Helper function to create a source group for Visual Studio.\n# This adds all the target's sources to a source group in the given folder.\nfunction(target_source_group target folder)\n    set_target_properties(${target} PROPERTIES FOLDER ${folder})\n    get_target_property(target_source_dir ${target} SOURCE_DIR)\n    get_target_property(target_sources_ ${target} SOURCES)\n    source_group(TREE ${target_source_dir} FILES ${target_sources_} PREFIX \"\")\nendfunction()\n\n# -----------------------------------------------------------------------------\n# Deploy dependencies\n# -----------------------------------------------------------------------------\n\n# We currently use the legacy batch files for deploying additional binaries.\n# TODO: This should be replaced with a better approach allowing individual\n# targets to deploy dependencies.\n\nset(source_dir ${CMAKE_SOURCE_DIR})\nset(output_dir ${FALCOR_OUTPUT_DIRECTORY})\nfile(TO_NATIVE_PATH ${source_dir} source_dir)\nfile(TO_NATIVE_PATH ${output_dir} output_dir)\n\nif(FALCOR_WINDOWS)\n    add_custom_target(deploy_dependencies ALL\n        COMMAND ${CMAKE_SOURCE_DIR}/build_scripts/deploycommon.bat ${source_dir} ${output_dir} $<CONFIG> ${FALCOR_SLANG_DIR} ${FALCOR_DLSS_DIR}\n    )\nelseif(FALCOR_LINUX)\n    add_custom_target(deploy_dependencies ALL\n        COMMAND ${CMAKE_SOURCE_DIR}/build_scripts/deploycommon.sh ${source_dir} ${output_dir} $<CONFIG> ${FALCOR_SLANG_DIR} ${FALCOR_DLSS_DIR}\n    )\nendif()\nset_target_properties(deploy_dependencies PROPERTIES FOLDER \"Misc\")\n\n\n# -----------------------------------------------------------------------------\n# Header validation\n# -----------------------------------------------------------------------------\n\n# Helper function to validate header files of a target to be self sufficient.\n# This creates a new target with \"VH\" suffix that compiles one\n# translation unit for each header file found in the supplied targets sources list.\nfunction(validate_headers target)\n    if(NOT FALCOR_VALIDATE_HEADERS)\n        return()\n    endif()\n\n    cmake_parse_arguments(PARSE_ARGV 1 validate_header_args \"\" \"\" \"IGNORE\")\n    set(ignore_files ${validate_header_args_IGNORE})\n\n    message(STATUS \"Setting up header validation for target: ${target}\")\n\n    # Create a new target for validating headers.\n    set(validate_target ${target}VH)\n    add_library(${validate_target} OBJECT)\n\n    # Copy properties from original target.\n    foreach(property INCLUDE_DIRECTORIES LINK_LIBRARIES COMPILE_DEFINITIONS COMPILE_FEATURES)\n        get_target_property(value ${target} ${property})\n        if(value)\n            set_property(TARGET ${validate_target} PROPERTY ${property} ${value})\n        endif()\n    endforeach()\n\n    # Add target source directory as an include directory.\n    get_target_property(target_source_dir ${target} SOURCE_DIR)\n    target_include_directories(${validate_target} PRIVATE ${target_source_dir})\n\n    # Get list of source files.\n    get_target_property(sources ${target} SOURCES)\n\n    # Create a list of CPP files, each including one header.\n    set(validate_sources \"\")\n    foreach(file ${sources})\n        if(${file} MATCHES \"^[^.][^.].*\\\\.h$\" AND NOT ${file} IN_LIST ignore_files)\n            string(SHA1 id ${file})\n            # shorten to help avoid super long file names\n            string(SUBSTRING ${id} 0, 8, id)\n            set(cpp_file ${validate_target}/${id}.cpp)\n            set(cpp_content \"#include \\\"${file}\\\"\\n\")\n            file(CONFIGURE OUTPUT ${cpp_file} CONTENT ${cpp_content})\n            list(APPEND validate_sources ${CMAKE_CURRENT_BINARY_DIR}/${cpp_file})\n        endif()\n    endforeach()\n\n    target_compile_options(${validate_target} PRIVATE $<$<COMPILE_LANG_AND_ID:CXX,MSVC>:/bigobj>)\n\n    target_sources(${validate_target} PRIVATE ${validate_sources})\n    set_target_properties(${validate_target} PROPERTIES FOLDER \"Validation\")\nendfunction()\n\n# -----------------------------------------------------------------------------\n# Ninja log analyzer\n# -----------------------------------------------------------------------------\n\nif(${CMAKE_GENERATOR} MATCHES \"Ninja\")\n    add_custom_target(ninja_log_analyzer ALL\n        COMMAND ${TOOLS_PYTHON} ${CMAKE_SOURCE_DIR}/tools/ninja_log_analyzer.py ${CMAKE_CURRENT_BINARY_DIR}/.ninja_log -c 10\n    )\n    add_dependencies(ninja_log_analyzer Falcor FalcorPython FalcorTest Mogwai ${plugin_targets})\n    set_target_properties(ninja_log_analyzer PROPERTIES FOLDER \"Misc\")\nendif()\n\n# -----------------------------------------------------------------------------\n# Project sources\n# -----------------------------------------------------------------------------\n\nadd_subdirectory(Source/Falcor)\nadd_subdirectory(Source/Modules)\nadd_subdirectory(Source/Mogwai)\nadd_subdirectory(Source/plugins)\nadd_subdirectory(Source/RenderPasses)\nadd_subdirectory(Source/Samples)\nadd_subdirectory(Source/Tools)\n\nadd_dependencies(Falcor copy_data_folder copy_scripts_folder)\n\n# Make Falcor core library depend on deploying all dependencies.\nadd_dependencies(Falcor deploy_dependencies)\n\n# Get list of all plugin targets.\nget_property(plugin_targets GLOBAL PROPERTY FALCOR_PLUGIN_TARGETS)\n\n# Generate plugins.json file.\nif(plugin_targets)\n    set(json ${plugin_targets})\n    list(TRANSFORM json PREPEND \"\\\"\")\n    list(TRANSFORM json APPEND \"\\\"\")\n    list(JOIN json \", \" json)\n    string(PREPEND json \"[ \")\n    string(APPEND json \" ]\")\n    file(GENERATE OUTPUT ${FALCOR_PLUGIN_OUTPUT_DIRECTORY}/plugins.json CONTENT ${json})\nendif()\n\n# Generate settings.toml file.\nfile(GENERATE OUTPUT ${FALCOR_OUTPUT_DIRECTORY}/settings.json CONTENT \"{ \\\"standardsearchpath\\\" : { \\\"media\\\" : \\\"\\${FALCOR_MEDIA_FOLDERS}\\\", \\\"mdl\\\" : \\\"\\${FALCOR_MDL_PATHS}\\\" }}\")\n\n# Make Mogwai and FalcorPython depend on all plugins.\nif(plugin_targets)\n    add_dependencies(Mogwai ${plugin_targets})\n    add_dependencies(FalcorPython ${plugin_targets})\n    add_dependencies(Mogwai FalcorPython)\nendif()\n\n# Make Mogwai the default startup project in VS.\nset_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT Mogwai)\n"
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 7.15625,
          "content": "{\n    \"version\": 3,\n    \"cmakeMinimumRequired\": {\n        \"major\": 3,\n        \"minor\": 15,\n        \"patch\": 0\n    },\n    \"configurePresets\": [\n        {\n            \"name\": \"base\",\n            \"description\": \"Base configuration inherited by all presets.\",\n            \"hidden\": true,\n            \"cacheVariables\": {},\n            \"cmakeExecutable\": \"${sourceDir}/tools/.packman/cmake/bin/cmake\",\n            \"binaryDir\": \"${sourceDir}/build/${presetName}\"\n        },\n        {\n            \"name\": \"ci\",\n            \"description\": \"Enable additional options used for continous integration.\",\n            \"hidden\": true,\n            \"cacheVariables\": {\n                \"FALCOR_ENABLE_NRC\": \"ON\",\n                \"FALCOR_VALIDATE_HEADERS\": \"ON\",\n                \"FALCOR_PRECOMPILED_HEADERS\": \"OFF\"\n            }\n        },\n        {\n            \"name\": \"windows-base\",\n            \"description\": \"Base Windows configuration for specifying Windows SDK.\",\n            \"hidden\": true,\n            \"inherits\": \"base\",\n            \"cacheVariables\": {\n                \"CMAKE_SYSTEM_VERSION\": \"10.0.19041.0\"\n            }\n        },\n        {\n            \"name\": \"windows-vs2022-base\",\n            \"description\": \"Base Visual Studio 2022 configuration.\",\n            \"hidden\": true,\n            \"inherits\": \"windows-base\",\n            \"generator\": \"Visual Studio 17 2022\",\n            \"architecture\": {\n                \"value\": \"x64\",\n                \"strategy\": \"set\"\n            },\n            \"toolset\": {\n                \"value\": \"host=x86\",\n                \"strategy\": \"set\"\n            }\n        },\n        {\n            \"name\": \"windows-vs2022\",\n            \"displayName\": \"Windows VS2022\",\n            \"inherits\": [\n                \"windows-vs2022-base\"\n            ]\n        },\n        {\n            \"name\": \"windows-vs2022-ci\",\n            \"displayName\": \"Windows VS2022 (CI)\",\n            \"inherits\": [\n                \"windows-vs2022-base\",\n                \"ci\"\n            ]\n        },\n        {\n            \"name\": \"windows-ninja-msvc-base\",\n            \"description\": \"Base Ninja configuration using MSVC.\",\n            \"hidden\": true,\n            \"inherits\": \"windows-base\",\n            \"generator\": \"Ninja Multi-Config\",\n            \"architecture\": {\n                \"value\": \"x64\",\n                \"strategy\": \"external\"\n            },\n            \"toolset\": {\n                \"value\": \"host=x86,v143\",\n                \"strategy\": \"external\"\n            },\n            \"cacheVariables\": {\n                \"CMAKE_MAKE_PROGRAM\": \"${sourceDir}/tools/.packman/ninja/ninja.exe\",\n                \"CMAKE_CXX_COMPILER\": \"cl\"\n            },\n            \"vendor\": {\n                \"microsoft.com/VisualStudioSettings/CMake/1.0\": {\n                    \"hostOS\": [\n                        \"Windows\"\n                    ]\n                }\n            }\n        },\n        {\n            \"name\": \"windows-ninja-msvc\",\n            \"displayName\": \"Windows Ninja/MSVC\",\n            \"inherits\": [\n                \"windows-ninja-msvc-base\"\n            ]\n        },\n        {\n            \"name\": \"windows-ninja-msvc-ci\",\n            \"displayName\": \"Windows Ninja/MSVC (CI)\",\n            \"inherits\": [\n                \"windows-ninja-msvc-base\",\n                \"ci\"\n            ]\n        },\n        {\n            \"name\": \"linux-base\",\n            \"description\": \"Base Linux configuration.\",\n            \"hidden\": true,\n            \"inherits\": \"base\",\n            \"generator\": \"Ninja Multi-Config\",\n            \"cacheVariables\": {\n                \"CMAKE_MAKE_PROGRAM\": \"${sourceDir}/tools/.packman/ninja/ninja\"\n            }\n        },\n        {\n            \"name\": \"linux-clang-base\",\n            \"description\": \"Base Linux/Clang configuration.\",\n            \"hidden\": true,\n            \"inherits\": \"linux-base\",\n            \"cacheVariables\": {\n                \"CMAKE_C_COMPILER\": \"clang\",\n                \"CMAKE_CXX_COMPILER\": \"clang++\"\n            }\n        },\n        {\n            \"name\": \"linux-clang\",\n            \"displayName\": \"Linux/Clang\",\n            \"inherits\": [\n                \"linux-clang-base\"\n            ]\n        },\n        {\n            \"name\": \"linux-clang-ci\",\n            \"displayName\": \"Linux/Clang (CI)\",\n            \"inherits\": [\n                \"linux-clang-base\",\n                \"ci\"\n            ]\n        },\n        {\n            \"name\": \"linux-gcc-base\",\n            \"description\": \"Base Linux/GCC configuration.\",\n            \"hidden\": true,\n            \"inherits\": \"linux-base\",\n            \"cacheVariables\": {\n                \"CMAKE_C_COMPILER\": \"gcc\",\n                \"CMAKE_CXX_COMPILER\": \"g++\"\n            }\n        },\n        {\n            \"name\": \"linux-gcc\",\n            \"displayName\": \"Linux/GCC\",\n            \"inherits\": [\n                \"linux-gcc-base\"\n            ]\n        },\n        {\n            \"name\": \"linux-gcc-ci\",\n            \"displayName\": \"Linux/GCC (CI)\",\n            \"inherits\": [\n                \"linux-gcc-base\",\n                \"ci\"\n            ]\n        }\n    ],\n    \"buildPresets\": [\n        {\n            \"name\": \"windows-ninja-msvc-release\",\n            \"displayName\": \"Release\",\n            \"configurePreset\": \"windows-ninja-msvc\",\n            \"configuration\": \"Release\"\n        },\n        {\n            \"name\": \"windows-ninja-msvc-debug\",\n            \"displayName\": \"Debug\",\n            \"configurePreset\": \"windows-ninja-msvc\",\n            \"configuration\": \"Debug\"\n        },\n        {\n            \"name\": \"windows-ninja-msvc-ci-release\",\n            \"displayName\": \"Release\",\n            \"configurePreset\": \"windows-ninja-msvc-ci\",\n            \"configuration\": \"Release\"\n        },\n        {\n            \"name\": \"windows-ninja-msvc-ci-debug\",\n            \"displayName\": \"Debug\",\n            \"configurePreset\": \"windows-ninja-msvc-ci\",\n            \"configuration\": \"Debug\"\n        },\n        {\n            \"name\": \"linux-clang-release\",\n            \"displayName\": \"Release\",\n            \"configurePreset\": \"linux-clang\",\n            \"configuration\": \"Release\"\n        },\n        {\n            \"name\": \"linux-clang-debug\",\n            \"displayName\": \"Debug\",\n            \"configurePreset\": \"linux-clang\",\n            \"configuration\": \"Debug\"\n        },\n        {\n            \"name\": \"linux-clang-ci-release\",\n            \"displayName\": \"Release\",\n            \"configurePreset\": \"linux-clang-ci\",\n            \"configuration\": \"Release\"\n        },\n        {\n            \"name\": \"linux-clang-ci-debug\",\n            \"displayName\": \"Debug\",\n            \"configurePreset\": \"linux-clang-ci\",\n            \"configuration\": \"Debug\"\n        },\n        {\n            \"name\": \"linux-gcc-release\",\n            \"displayName\": \"Release\",\n            \"configurePreset\": \"linux-gcc\",\n            \"configuration\": \"Release\"\n        },\n        {\n            \"name\": \"linux-gcc-debug\",\n            \"displayName\": \"Debug\",\n            \"configurePreset\": \"linux-gcc\",\n            \"configuration\": \"Debug\"\n        },\n        {\n            \"name\": \"linux-gcc-ci-release\",\n            \"displayName\": \"Release\",\n            \"configurePreset\": \"linux-gcc-ci\",\n            \"configuration\": \"Release\"\n        },\n        {\n            \"name\": \"linux-gcc-ci-debug\",\n            \"displayName\": \"Debug\",\n            \"configurePreset\": \"linux-gcc-ci\",\n            \"configuration\": \"Debug\"\n        }\n    ]\n}\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.904296875,
          "content": "Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions\nare met:\n  * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in\n    the documentation and/or other materials provided with the distribution.\n  * Neither the name of NVIDIA CORPORATION nor the names of its contributors may be used to endorse or promote products derived\n    from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\nIN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\nOR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\nOR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\nEVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n---\n\nThis software links to the following components which are not licensed under the above license text.\nFor details on the specific licenses please refer to the provided links.\n\n- DLSS: https://github.com/NVIDIA/DLSS/blob/main/LICENSE.txt\n- RTXGI: https://github.com/NVIDIAGameWorks/RTXGI/blob/main/License.txt\n- RTXDI: https://github.com/NVIDIAGameWorks/RTXDI/blob/main/LICENSE.txt\n- NRD: https://github.com/NVIDIAGameWorks/RayTracingDenoiser/blob/master/LICENSE.txt\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.4228515625,
          "content": "![](docs/images/teaser.png)\n\n# Falcor\n\nFalcor is a real-time rendering framework supporting DirectX 12 and Vulkan. It aims to improve productivity of research and prototype projects.\n\nFeatures include:\n* Abstracting many common graphics operations, such as shader compilation, model loading, and scene rendering\n* Raytracing support\n* Python scripting support\n* Render graph system to build modular renderers\n* Common rendering techniques such post-processing effects\n* Unbiased path tracer\n* Integration of various RTX SDKs such as DLSS, RTXDI and NRD\n\n## Prerequisites\n- Windows 10 version 20H2 (October 2020 Update) or newer, OS build revision .789 or newer\n- Visual Studio 2022\n- [Windows 10 SDK (10.0.19041.0) for Windows 10, version 2004](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk/)\n- A GPU which supports DirectX Raytracing, such as the NVIDIA Titan V or GeForce RTX\n- NVIDIA driver 466.11 or newer\n\nOptional:\n- Windows 10 Graphics Tools. To run DirectX 12 applications with the debug layer enabled, you must install this. There are two ways to install it:\n    - Click the Windows button and type `Optional Features`, in the window that opens click `Add a feature` and select `Graphics Tools`.\n    - Download an offline package from [here](https://docs.microsoft.com/en-us/windows-hardware/test/hlk/windows-hardware-lab-kit#supplemental-content-for-graphics-media-and-mean-time-between-failures-mtbf-tests). Choose a ZIP file that matches the OS version you are using (not the SDK version used for building Falcor). The ZIP includes a document which explains how to install the graphics tools.\n- NVAPI, CUDA, OptiX (see below)\n\n## Building Falcor\nFalcor uses the [CMake](https://cmake.org) build system. Additional information on how to use Falcor with CMake is available in the [CMake](docs/development/cmake.md) development documetation page.\n\n### Visual Studio\nIf you are working with Visual Studio 2022, you can setup a native Visual Studio solution by running `setup_vs2022.bat` after cloning this repository. The solution files are written to `build/windows-vs2022` and the binary output is located in `build/windows-vs2022/bin`.\n\n### Visual Studio Code\nIf you are working with Visual Studio Code, run `setup.bat` after cloning this repository. This will setup a VS Code workspace in the `.vscode` folder with sensible defaults (only if `.vscode` does not exist yet). When opening the project folder in VS Code, it will prompt to install recommended extensions. We recommend you do, but at least make sure that _CMake Tools_ is installed. To build Falcor, you can select the configure preset by executing the _CMake: Select Configure Preset_ action (Ctrl+Shift+P). Choose the _Windows Ninja/MSVC_ preset. Then simply hit _Build_ (or press F7) to build the project. The binary output is located in `build/windows-ninja-msvc/bin`.\n\nWarning: Do not start VS Code from _Git Bash_, it will modify the `PATH` environment variable to an incompatible format, leading to issues with CMake.\n\n### Linux\nFalcor has experimental support for Ubuntu 22.04. To build Falcor on Linux, run `setup.sh` after cloning this repository. You also need to install some system library headers using:\n\n```\nsudo apt install xorg-dev libgtk-3-dev\n```\n\nYou can use the same instructions for building Falcor as described in the _Visual Studio Code_ section above, simply choose the _Linux/GCC_ preset.\n\n### Configure Presets\nFalcor uses _CMake Presets_ store in `CMakePresets.json` to provide a set of commonly used build configurations. You can get the full list of available configure presets running `cmake --list-presets`:\n\n```\n$ cmake --list-presets\nAvailable configure presets:\n\n  \"windows-vs2022\"           - Windows VS2022\n  \"windows-ninja-msvc\"       - Windows Ninja/MSVC\n  \"linux-clang\"              - Linux Ninja/Clang\n  \"linux-gcc\"                - Linux Ninja/GCC\n```\n\nUse `cmake --preset <preset name>` to generate the build tree for a given preset. The build tree is written to the `build/<preset name>` folder and the binary output files are in `build/<preset name>/bin`.\n\nAn existing build tree can be compiled using `cmake --build build/<preset name>`.\n\n## Falcor In Python\nFor more information on how to use Falcor as a Python module see [Falcor In Python](docs/falcor-in-python.md).\n\n## Microsoft DirectX 12 Agility SDK\nFalcor uses the [Microsoft DirectX 12 Agility SDK](https://devblogs.microsoft.com/directx/directx12agility/) to get access to the latest DirectX 12 features. Applications can enable the Agility SDK by putting `FALCOR_EXPORT_D3D12_AGILITY_SDK` in the main `.cpp` file. `Mogwai`, `FalcorTest` and `RenderGraphEditor` have the Agility SDK enabled by default.\n\n## NVAPI\nTo enable NVAPI support, head over to https://developer.nvidia.com/nvapi and download the latest version of NVAPI (this build is tested against version R535).\nExtract the content of the zip file into `external/packman/` and rename `R535-developer` to `nvapi`.\n\n## NSight Aftermath\nTo enable NSight Aftermath support, head over to https://developer.nvidia.com/nsight-aftermath and download the latest version of Aftermath (this build is tested against version 2023.1).\nExtract the content of the zip file into `external/packman/aftermath`.\n\n## CUDA\nTo enable CUDA support, download and install [CUDA 11.6.2](https://developer.nvidia.com/cuda-11-6-2-download-archive) or later and reconfigure the build.\n\nSee the `CudaInterop` sample application located in `Source/Samples/CudaInterop` for an example of how to use CUDA.\n\n## OptiX\nIf you want to use Falcor's OptiX functionality (specifically the `OptixDenoiser` render pass) download the [OptiX SDK](https://developer.nvidia.com/designworks/optix/download) (Falcor is currently tested against OptiX version 7.3) After running the installer, link or copy the OptiX SDK folder into `external/packman/optix` (i.e., file `external/packman/optix/include/optix.h` should exist).\n\nNote: You also need CUDA installed to compile the `OptixDenoiser` render pass, see above for details.\n\n## NVIDIA RTX SDKs\nFalcor ships with the following NVIDIA RTX SDKs:\n\n- DLSS (https://github.com/NVIDIA/DLSS)\n- RTXDI (https://github.com/NVIDIAGameWorks/RTXDI)\n- NRD (https://github.com/NVIDIAGameWorks/RayTracingDenoiser)\n\nNote that these SDKs are not under the same license as Falcor, see [LICENSE.md](LICENSE.md) for details.\n\n## Resources\n- [Falcor](https://github.com/NVIDIAGameWorks/Falcor): Falcor's GitHub page.\n- [Documentation](./docs/index.md): Additional information and tutorials.\n    - [Getting Started](./docs/getting-started.md)\n    - [Render Graph Tutorials](./docs/tutorials/index.md)\n- [Rendering Resources](https://benedikt-bitterli.me/resources) A collection of scenes loadable in Falcor (pbrt-v4 format).\n- [ORCA](https://developer.nvidia.com/orca): A collection of scenes and assets optimized for Falcor.\n- [Slang](https://github.com/shader-slang/slang): Falcor's shading language and compiler.\n\n## Citation\nIf you use Falcor in a research project leading to a publication, please cite the project.\nThe BibTex entry is\n\n```bibtex\n@Misc{Kallweit22,\n   author =      {Simon Kallweit and Petrik Clarberg and Craig Kolb and Tom{'a}{\\v s} Davidovi{\\v c} and Kai-Hwa Yao and Theresa Foley and Yong He and Lifan Wu and Lucy Chen and Tomas Akenine-M{\\\"o}ller and Chris Wyman and Cyril Crassin and Nir Benty},\n   title =       {The {Falcor} Rendering Framework},\n   year =        {2022},\n   month =       {8},\n   url =         {https://github.com/NVIDIAGameWorks/Falcor},\n   note =        {\\url{https://github.com/NVIDIAGameWorks/Falcor}}\n}\n```\n"
        },
        {
          "name": "Source",
          "type": "tree",
          "content": null
        },
        {
          "name": "build_scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "dependencies.xml",
          "type": "blob",
          "size": 3.8369140625,
          "content": "<project toolsVersion=\"6.0\">\n    <!-- Tools -->\n    <dependency name=\"tools_python\" linkPath=\"tools/.packman/python\">\n        <package name=\"python\" version=\"3.10.11+nv1-${platform}\" platforms=\"windows-x86_64 linux-x86_64\" />\n    </dependency>\n    <dependency name=\"tools_cmake\" linkPath=\"tools/.packman/cmake\">\n        <package name=\"cmake\" version=\"3.24.1+nv3-${platform}\" platforms=\"windows-x86_64 linux-x86_64\" />\n    </dependency>\n    <dependency name=\"tools_ninja\" linkPath=\"tools/.packman/ninja\">\n        <package name=\"ninja\" version=\"1.10.2+pipeline2996563-${platform}\" platforms=\"windows-x86_64 linux-x86_64\" />\n    </dependency>\n    <dependency name=\"tools_clang-format\" linkPath=\"tools/.packman/clang-format\">\n        <package name=\"clang-format\" version=\"15.0.6-windows-x86_64\" platforms=\"windows-x86_64\"/>\n    </dependency>\n    <!-- Media -->\n    <dependency name=\"media\" linkPath=\"media\">\n        <package name=\"falcor_media\" version=\"7acdf8b0\" />\n    </dependency>\n    <!-- Libraries -->\n    <dependency name=\"falcor_dependencies\" linkPath=\"external/packman/deps\">\n        <package name=\"falcor_dependencies\" version=\"f80dd590-${platform}\" platforms=\"windows-x86_64 linux-x86_64\" />\n    </dependency>\n    <remote name=\"github-slang\" type=\"https\" packageLocation=\"github.com/shader-slang/slang/releases/download/v${version}/slang-${version}-${platform}.zip\"/>\n    <dependency name=\"slang\" linkPath=\"external/packman/slang\">\n        <package name=\"slang\" version=\"2024.1.34\" remotes=\"github-slang\" platforms=\"windows-x86_64 linux-x86_64\"/>\n    </dependency>\n    <dependency name=\"pix\" linkPath=\"external/packman/pix\">\n        <package name=\"WinPixEventRuntime\" version=\"1.0.190604001\" platforms=\"windows-x86_64\" />\n    </dependency>\n    <dependency name=\"python\" linkPath=\"external/packman/python\">\n        <package name=\"python\" version=\"3.10.11+nv1-${platform}\" platforms=\"windows-x86_64 linux-x86_64\" />\n    </dependency>\n    <dependency name=\"nanovdb\" linkPath=\"external/packman/nanovdb\">\n        <package name=\"nanovdb\" version=\"32.3.3-37-${platform}-release\" platforms=\"windows-x86_64 linux-x86_64\" />\n    </dependency>\n    <dependency name=\"dxcompiler\" linkPath=\"external/packman/dxcompiler\">\n        <package name=\"dxcompiler\" version=\"1.7.2207\" platforms=\"windows-x86_64\" />\n    </dependency>\n    <dependency name=\"agility-sdk\" linkPath=\"external/packman/agility-sdk\">\n        <package name=\"agility-sdk\" version=\"1.4.10\" platforms=\"windows-x86_64\"/>\n    </dependency>\n    <dependency name=\"nvtt\" linkPath=\"external/packman/nvtt\">\n        <package name=\"nvtt\" version=\"3.1.6-${platform}\" platforms=\"windows-x86_64 linux-x86_64\" />\n    </dependency>\n    <dependency name=\"nv-usd-release\" linkPath=\"external/packman/nv-usd-release\">\n        <package name=\"nv-usd\" version=\"22.11.nv.0.2.424.27f22922-win64_nopy_release-dev_omniverse\" platforms=\"windows-x86_64\" />\n        <package name=\"nv-usd\" version=\"22.11.nv.0.2.424.27f22922-linux64_nopy-centos_release-dev_omniverse\" platforms=\"linux-x86_64\" />\n    </dependency>\n    <dependency name=\"nv-usd-debug\" linkPath=\"external/packman/nv-usd-debug\">\n        <package name=\"nv-usd\" version=\"22.11.nv.0.2.424.27f22922-win64_nopy_debug-dev_omniverse\" platforms=\"windows-x86_64\" />\n        <package name=\"nv-usd\" version=\"22.11.nv.0.2.424.27f22922-linux64_nopy-centos_debug-dev_omniverse\" platforms=\"linux-x86_64\" />\n    </dependency>\n    <dependency name=\"rtxdi\" linkPath=\"external/packman/rtxdi\">\n        <package name=\"rtxdi\" version=\"1.3.0-falcor\" platforms=\"windows-x86_64 linux-x86_64\" />\n    </dependency>\n    <dependency name=\"nrd\" linkPath=\"external/packman/nrd\">\n        <package name=\"nrd\" version=\"3.1.0-falcor-windows-x86_64\" platforms=\"windows-x86_64\" />\n    </dependency>\n    <dependency name=\"dlss\" linkPath=\"external/packman/dlss\">\n        <package name=\"dlss\" version=\"3.5.0\" platforms=\"windows-x86_64 linux-x86_64\" />\n    </dependency>\n</project>\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "environment.yml",
          "type": "blob",
          "size": 0.2314453125,
          "content": "name: falcor-pytorch\nchannels:\n    - pytorch\n    - nvidia\n    - conda-forge\ndependencies:\n    - numpy\n    - python=3.10\n    - pytorch-cuda=11.8\n    - torchaudio\n    - torchvision\n    - pip\n    - pip:\n        - pyexr\n        - largesteps\n"
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.bat",
          "type": "blob",
          "size": 0.7001953125,
          "content": ": This script is fetching all dependencies via packman.\n\n@echo off\nsetlocal\n\nset PACKMAN=%~dp0\\tools\\packman\\packman.cmd\nset PLATFORM=windows-x86_64\n\necho Updating git submodules ...\n\nwhere /q git\nif errorlevel 1 (\n    echo Cannot find git on PATH! Please initialize submodules manually and rerun.\n    exit /b 1\n) ELSE (\n    git submodule sync --recursive\n    git submodule update --init --recursive\n)\n\necho Fetching dependencies ...\n\ncall %PACKMAN% pull --platform %PLATFORM% %~dp0\\dependencies.xml\nif errorlevel 1 goto error\n\nif not exist %~dp0\\.vscode\\ (\n    echo Setting up VS Code workspace ...\n    xcopy %~dp0\\.vscode-default\\ %~dp0\\.vscode\\ /y\n)\n\nexit /b 0\n\n:error\necho Failed to fetch dependencies!\nexit /b 1\n"
        },
        {
          "name": "setup.sh",
          "type": "blob",
          "size": 1.1279296875,
          "content": "#!/bin/sh\n\n# This script is fetching all dependencies via packman.\n\nif [ \"$OSTYPE\" = \"msys\" ]; then\n    echo \"Do not use \"$0\" on Windows, use setup.bat instead.\"\n    exit 1\nfi\n\nBASE_DIR=$(dirname \"$0\")\nPACKMAN=${BASE_DIR}/tools/packman/packman\nPLATFORM=linux-x86_64\n\necho \"Updating git submodules ...\"\n\nif ! [ -x \"$(command -v git)\" ]; then\n    echo \"Cannot find git on PATH! Please initialize submodules manually and rerun.\"\n    exit 1\nelse\n    git submodule sync --recursive\n    git submodule update --init --recursive\nfi\n\necho \"Fetching dependencies ...\"\n\n${PACKMAN} pull --platform ${PLATFORM} ${BASE_DIR}/dependencies.xml\nif [ $? -ne 0 ]; then\n    echo \"Failed to fetch dependencies!\"\n    exit 1\nfi\n\nif [ ! -d ${BASE_DIR}/.vscode ]; then\n    echo \"Setting up VS Code workspace ...\"\n    cp -rp ${BASE_DIR}/.vscode-default ${BASE_DIR}/.vscode\nfi\n\n# HACK: Copy libnvtt.so.30106 to libnvtt.so so we can use it in our build.\n# This changes the actual packman package, but for now, this is the easiest solution.\necho \"Patching NVTT package ...\"\ncp -fp ${BASE_DIR}/external/packman/nvtt/libnvtt.so.30106 ${BASE_DIR}/external/packman/nvtt/libnvtt.so\n\nexit 0\n"
        },
        {
          "name": "setup_vs2022.bat",
          "type": "blob",
          "size": 0.78515625,
          "content": ": This script sets up a Visual Studio 2022 solution.\n\n@echo off\nsetlocal\n\nset PRESET_SUFFIX=\"\"\n\nif \"%~1\"==\"ci\" (\n    set PRESET_SUFFIX=\"-ci\"\n)\n\n: Fetch dependencies.\ncall %~dp0\\setup.bat\n\n: Configuration.\nset PRESET=windows-vs2022%PRESET_SUFFIX%\nset TOOLSET=host=x86\nset CMAKE_EXE=%~dp0\\tools\\.packman\\cmake\\bin\\cmake.exe\nset CUSTOM_CUDA_DIR=%~dp0\\external\\packman\\cuda\n\n: Check if custom CUDA directory contains a valid CUDA SDK.\n: Adjust toolset string to use the custom CUDA toolkit.\nif exist %CUSTOM_CUDA_DIR%\\bin\\nvcc.exe (\n    set TOOLSET=%TOOLSET%,cuda=\"%CUSTOM_CUDA_DIR%\"\n)\n\n: Configure solution by running cmake.\necho Configuring Visual Studio solution ...\n%CMAKE_EXE% --preset %PRESET% -T %TOOLSET%\nif errorlevel 1 (\n    echo Failed to configure solution!\n    exit /b 1\n)\n\n: Success.\nexit /b 0\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}