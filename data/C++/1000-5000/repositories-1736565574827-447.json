{
  "metadata": {
    "timestamp": 1736565574827,
    "page": 447,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "adnanaziz/EPIJudge",
      "stars": 2837,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4501953125,
          "content": "# JetBrains IDEs (CLion, IntelliJ, and PyCharm)\n.idea\n\n# CLIion CMake builds\ncmake-build-debug\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# Visual Studio 2017 files\n.vs\n/epi_judge_cpp/vs\n/epi_judge_cpp_solutions/vs\n/epi_judge_cpp/Release\n/epi_judge_cpp_solutions/Release\n/epi_judge_cpp/Debug\n/epi_judge_cpp_solutions/Debug\n\n# Generated by make\ncpp_build\nbuild\n\nepi_judge_java/java_build/\n*.class\n\n# OS X specific files\n.DS_Store"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.201171875,
          "content": "## [Unreleased]\n  - Highlight mismatched items in arrays (when printing test failure explanation)\n  - Run each test case with a timeout\n \n \n## [Beta 5] - 2020-01-11\n\n### Added\n  - Namespace for C++ test framework\n  - Python type hints\n  - Added a page to track progress on exercises (list of exercises with number of passed tests in each language)\n  - Added continuous testing  \n\n### Changed\n  - Changed test data format\n    - Now every field is encoded in pure JSON format  \n\n### Fixed\n  - Numerous fixes sent by our users\n  \n \n## [Beta 4] - 2018-05-08\n\n### Added\n  - This changelog\n  - New programs\n    - Fibonacci\n    - KthLargestElementInLongArray\n    - MaxSumSubarray\n    - QueueWithMaxUsingDeque\n    - RangeLookupInBst\n    - ReverseLinkedListIterative\n    - TwoSortedArraysMerge\n  - Separate compiler requirements for the solution projects  \n  \n### Changed\n  - [IMPORTANT] Java project now requires at least Java 9 JDK\n  - [IMPORTANT] [Windows only] C++ project now requires at least Visual Studio 17 Preview 6 \n    - You are still free to use MinGW or LXSS compilers\n  - [IMPORTANT] Python project now requires at least Python 3.6\n  - Java JSON library is divided into separate files\n  - Some solution code improvements\n  \n### Fixed\n  - Issue with C++ anonymous namespaces\n  - Several warnings issued by VS2017  \n \n### Removed\n  - All test cases with binary trees with height greater than 500 \n    - They may cause stack overflow on some systems\n \n \n## [Beta 3] - 2018-04-05\n\n### Added\n  - Exercise solutions\n\n\n## [Beta 2] - 2018-03-27\n\n### Added\n  - Print argument names on test failure\n  - Shared configuration file as an alternative for command-line parameters\n  \n  \n### Changed\n  - Make C++ framework C++14 conformant (previously C++17)\n  - Better support for detailed test failure explanation\n  - Change command-line interface\n  - Move include and import statements to top\n \n \n### Fixed\n  - Missing res_printer in search_for_min_max_in_array.py  \n  - Replace all long type usages with long long \n  \n  \n## [Beta 1] - 2018-02-01\n### Added\n  - Judge exercises in C++, Java, and Python\n  - Test framework for implementation evaluation\n  - Thousands of test cases\n  - Makefile and CMake (C++ only) projects\n  - Test run timing\n  - Video tutorials\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 13.314453125,
          "content": "## Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License\n\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\n\n### Section 1 – Definitions.\n\na. __Adapted Material__ means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\n\nb. __Copyright and Similar Rights__ means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\n\ne. __Effective Technological Measures__ means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\n\nf. __Exceptions and Limitations__ means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\n\nh. __Licensed Material__ means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\n\ni. __Licensed Rights__ means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\n\nh. __Licensor__ means the individual(s) or entity(ies) granting rights under this Public License.\n\ni. __NonCommercial__ means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this Public License, the exchange of the Licensed Material for other material subject to Copyright and Similar Rights by digital file-sharing or similar means is NonCommercial provided there is no payment of monetary compensation in connection with the exchange.\n\nj. __Share__ means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\n\nk. __Sui Generis Database Rights__ means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\n\nl. __You__ means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\n### Section 2 – Scope.\n\na. ___License grant.___\n\n   1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\n\n        A. reproduce and Share the Licensed Material, in whole or in part, for NonCommercial purposes only; and\n\n        B. produce and reproduce, but not Share, Adapted Material for NonCommercial purposes only.\n\n   2. __Exceptions and Limitations.__ For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\n\n   3. __Term.__ The term of this Public License is specified in Section 6(a).\n\n   4. __Media and formats; technical modifications allowed.__ The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\n\n    5. __Downstream recipients.__\n\n        A. __Offer from the Licensor – Licensed Material.__ Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\n\n        B. __No downstream restrictions.__ You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\n\n    6. __No endorsement.__ Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nb. ___Other rights.___\n\n   1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\n\n   2. Patent and trademark rights are not licensed under this Public License.\n\n   3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties, including when the Licensed Material is used other than for NonCommercial purposes.\n\n### Section 3 – License Conditions.\n\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\na. ___Attribution.___\n\n   1. If You Share the Licensed Material, You must:\n\n      A. retain the following if it is supplied by the Licensor with the Licensed Material:\n\n         i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\n\n         ii. a copyright notice;\n\n         iii. a notice that refers to this Public License;\n\n         iv. a notice that refers to the disclaimer of warranties;\n\n         v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\n      B. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and\n\n      C. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\n \n        For the avoidance of doubt, You do not have permission under this Public License to Share Adapted Material.\n\n    2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\n\n    3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\n### Section 4 – Sui Generis Database Rights.\n\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\na. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database for NonCommercial purposes only and provided You do not Share Adapted Material;\n\nb. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and\n\nc. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\n\n### Section 5 – Disclaimer of Warranties and Limitation of Liability.\n\na. __Unless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.__\n\nb. __To the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.__\n\nc. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\n### Section 6 – Term and Termination.\n\na. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\n\nb. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\n   1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\n\n   2. upon express reinstatement by the Licensor.\n\n    For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\n\nc. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\n\nd. Sections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\n### Section 7 – Other Terms and Conditions.\n\na. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\n\nb. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\n### Section 8 – Interpretation.\n\na. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\n\nb. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\n\nc. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\n\nd. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.0107421875,
          "content": "# EPI Judge\n\n## Beta 5\n\n## Introduction\n\nEPI Judge is meant to serve as a companion to our book Elements of Programming Interviews. Specifically, this project consists of the following:\n\n- **Stub programs** for each problem in our book in Python, Java, and C++\n- **Test-cases** that cover common corner-case and performance bugs\n- A **framework** for running these tests on your implementation on your machine\n\n## Installation\n\nHere's how to download the judge:\n\n    $ git clone https://github.com/adnanaziz/EPIJudge.git\nIf you do not have `git`, here's a good [tutorial](https://www.atlassian.com/git/tutorials/install-git) on installing git itself.\n\n## Running the judge using IDEs\n\nCheck out these one minute videos to see how easy it is to get started with the judge.\n\n### Python\n\n[PyCharm](https://youtu.be/ImD_iI-uGYo), [Eclipse](https://youtu.be/rZ1qqwEXwQY), [NetBeans](https://youtu.be/Z41jW1TyZwY)\n\n### Java\n\n[IntelliJ IDEA](https://youtu.be/1BzHUpluQHM), [Eclipse](https://youtu.be/i9uz9Zazo0A)\n\n### C++\n\n[CLion](https://youtu.be/aHPDApyyYEg), [Visual Studio 2017](https://youtu.be/hgd8IIQpBEE)\n\n\n## Running the judge from the command line\n\n### Python\n\n    $ python3 <program_name>.py\n\n#### Java\n\nUse the [`Makefile`](https://github.com/adnanaziz/EPIJudge/blob/master/epi_judge_java/Makefile). \n\nCompile and run a specific program:\n\n    $ make <program_name> \nExample:\n\n    $ make Anagrams\nCompile and run the last program that you edited:\n\n\t$ make\n\n### C++\n\nYou can manually compile and run all programs by directly invoking GCC and Clang. \n\n    $ g++ -pthread -std=c++14 -O3 -o anagrams anagrams.cc\nYou can also use the provided Makefile: `make <program_name>`. You can also use CMake with the provided CMakeLists.txt file. \n\n\t$ make \nThe default Makefile target is the last edited file.\n\n    $ make anagrams\n\n\n## FAQ\n\n- How can I contact the authors? \n\nPlease feel free to send us questions and feedback -  `adnan.aziz@gmail.com` and `tsung.hsien.lee@gmail.com`\n\n- Help, my EPIJudge is not working, what should I do?\n\nIf you do have issues, e.g., with install or with buggy tests, feel free to reach out to us via email. Please be as detailed as you can: the ideal is if you can upload a screencast video of the issue to youtube; failing that, please upload screenshots.  The more detailed the description of the problem and your environment (OS, language version, IDE and version), the easier it’ll be for us to help you.\n\n- I'm new to programming, and don't have any kind of development environment, what should I do?\n\nThe IntelliJ Integrated Development environments described above are best-in-class, and have free versions that will work fine for the EPI Judge. They do not include the compilers. You can get the Java development environment from [Oracle](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html), and the Python development environment from [Python.org](https://www.python.org/downloads/). For C++, you have multiple options. The simplest is to install [VisualStudio](https://code.visualstudio.com/download), which includes both the IDE and the compiler. Google is a good resource for installation help.\n\n- What compilers are supported for judge?\n  - C++\n    - Linux\n      - **GCC** 5.4.1 and newer\n      - **Clang** 4.0 and newer\n    - OS X  \n      - **Apple LLVM Clang** 9.0.0 and newer\n    - Windows\n      - **Visual Studio** 2017 and newer\n      - **MinGW** GCC 5.4.0 and newer\n      - **LXSS** (Windows Subsystem for Linux) GCC 5.4.0 and newer\n  - Java     \n    - **Java** 9 and newer\n  - Python\n    - **Python** 3.7 and newer\n   \n\n- What compilers are supported for solutions?\n  - C++\n      - Linux\n        - **GCC** 7.0.0 and newer\n        - **Clang** 5.0 and newer\n      - OS X  \n        - **Apple LLVM Clang** 9.0.0 and newer\n      - Windows\n      - **Visual Studio** 2017 and newer\n        - **MinGW** GCC 7.2.0 and newer\n        - **LXSS** (Windows Subsystem for Linux) GCC 7.2.0 and newer\n    - Java     \n      - **Java** 9 and newer\n    - Python\n      - **Python** 3.6 and newer \n\nLet us know if you managed to compile with an older version.\n\n- What does the UI look like?\n\nTake a look at this screenshot.\n\n<img src=\"http://elementsofprogramminginterviews.com/img/judge-ide-example.png\" width=\"600px\"></img>\n\n- How can I understand the test framework better?\n\nThe judge harness is fairly complex (but does not use nonstandard language features or libraries). You are welcome to study it, but we’d advise you against making changes to it (since it will lead to nasty merge conflicts when you update).\n\n- How do I import the C++ project?\n\nIf you want to import the project into your favourite IDE, you probably need to create IDE project with [CMake](https://cmake.org/) (no need to do it for CLion, it supports CMake out-of-the-box).\n\nHere is an example recipe for generationg Visual Studio project ([list](https://cmake.org/cmake/help/v3.10/manual/cmake-generators.7.html) of all CMake supported IDEs).\nAfter installing CMake, open your terminal, go to `epi_judge_cpp` folder and run following commands:\n\n    mkdir vs\n    cd vs\n    cmake -G \"Visual Studio 15 2017\" ..\n\nThen just open `epi_judge_cpp/vs/epi_judge_cpp.sln` solution with Visual Studio and it will load all EPI programs.\n\n## Tracking your progress\n\nThe file [index.html](https://github.com/adnanaziz/EPIJudge/blob/master/index.html) in the root of this project tracks your progress through the problems. Specifically, there's an expanding tab for each chapter. Click on it, and you will see your progress, e.g., as below. This file gets updated each time you execute a program. You can **use this file to map book problems to stub programs**.\n\n<img src=\"https://i.imgur.com/xjf7Z32.png\" width=\"600px\"></img>\n\n## Acknowledgments\n\nA big shout-out to the hundreds of users who tried out the release over the past couple of months. As always, we never fail to be impressed by the enthusiasm and commitment our readers have; it has served to bring out the best in us.\nWe all thank [Viacheslav Kroilov](https://github.com/metopa), for applying his exceptional software engineering skills to make EPI Judge a reality.\n"
        },
        {
          "name": "config.json",
          "type": "blob",
          "size": 0.0615234375,
          "content": "{\n    \"timeoutSeconds\": 0,\n    \"numFailedTestsBeforeStop\": 1\n}\n"
        },
        {
          "name": "epi_judge_cpp",
          "type": "tree",
          "content": null
        },
        {
          "name": "epi_judge_cpp_solutions",
          "type": "tree",
          "content": null
        },
        {
          "name": "epi_judge_java",
          "type": "tree",
          "content": null
        },
        {
          "name": "epi_judge_java_solutions",
          "type": "tree",
          "content": null
        },
        {
          "name": "epi_judge_python",
          "type": "tree",
          "content": null
        },
        {
          "name": "epi_judge_python_solutions",
          "type": "tree",
          "content": null
        },
        {
          "name": "epijudge_ci_test_tool.py",
          "type": "blob",
          "size": 5.2978515625,
          "content": "\"\"\"\nThis tool is intended for automated CI testing.\n\"\"\"\nimport enum\nimport os\nimport re\nimport subprocess\nimport sys\nfrom pathlib import Path\nfrom subprocess import TimeoutExpired, CompletedProcess\nfrom typing import List, Optional\n\nimport click\n\n\nclass TestMode(enum.Enum):\n    STUB = 'stub'\n    SOLUTION = 'solution'\n\n\nclass Language(enum.Enum):\n    CPP = 'cpp'\n    JAVA = 'java'\n    PYTHON = 'python'\n\n\ndef strip_ascii_codes(s: str) -> str:\n    ansi_escape = re.compile(\n        r'''\n        \\x1B    # ESC\n        [@-_]   # 7-bit C1 Fe\n        [0-?]*  # Parameter bytes\n            [ -/]*  # Intermediate bytes\n            [@-~]   # Final byte\n        ''', re.VERBOSE)\n    return ansi_escape.sub('', s)\n\n\ndef find_str_in_file(f: Path, s: str) -> bool:\n    \"\"\"Check if the given string is contained in the file.\n\n    :param f: file to search in\n    :param s: string to search to\n    \"\"\"\n    return f.read_text(encoding='utf-8').find(s) != -1\n\n\ndef execute_program(args: List[str], mode: TestMode) -> None:\n    \"\"\"Executes given program and checks its output\n    for strings specific for either test failure\n    (for testing stub programs) or success\n    (for testing solution programs).\n\n    :param args: arguments to be executed\n    :param mode: checking mode\n    \"\"\"\n    args_str = ' '.join(args)\n\n    def check_output(result: CompletedProcess):\n        stdout = strip_ascii_codes(result.stdout.decode())\n        error_string = f'Failure:\\nMode: {mode.value}\\nCommand: {args_str}\\nExit code: {result.returncode:X}\\nOutput:\\n{stdout}\\n'\n        if mode == TestMode.STUB:\n            if result.returncode not in (1, 2) or 'Test FAILED' not in stdout:\n                raise RuntimeError(error_string)\n        elif mode == TestMode.SOLUTION:\n            if (result.returncode != 0 or\n                    \"*** You've passed ALL tests. Congratulations! ***\" not in stdout):\n                raise RuntimeError(error_string)\n        else:\n            print('Invalid mode: {}'.format(mode))\n            sys.exit(1)\n\n    try:\n        result = subprocess.run(args, stdout=subprocess.PIPE, timeout=300)\n        check_output(result)\n    except RuntimeError as e:\n        print(e)\n        sys.exit(1)\n    except TimeoutExpired:\n        print(f\"{mode} > {args_str}: TIMEOUT\")\n        sys.exit(1)\n\n\ndef get_exec_args(file: Path, lang: Language, test_data_dir: Path) -> List[str]:\n    common_args = ['--test-data-dir', str(test_data_dir), '--no-tty']\n    if lang == Language.PYTHON:\n        return [sys.executable, str(file)] + common_args\n    if lang == Language.CPP:\n        return [str(file)] + common_args\n    if lang == Language.JAVA:\n        return [\n            'make', '-C',\n            str(file.parent.parent),\n            file.with_suffix('').name\n        ]  # Ad-hoc version\n    raise NotImplementedError()\n\n\ndef scan_lang_folder(src_dir: Path, build_dir: Optional[Path],\n                     lang: Language, mode: TestMode) -> List[Path]:\n    \"\"\"Search for all stab and solution files in the folder.\n    \"\"\"\n    lang_dir = f\"epi_judge_{lang.value}\"\n    if mode == TestMode.SOLUTION:\n        lang_dir += '_solutions'\n    src_dir = src_dir / lang_dir\n\n    if lang == Language.PYTHON:\n        return sorted([f for f in src_dir.glob(\"*.py\")\n                       if find_str_in_file(f, 'generic_test_main')])\n    elif lang == Language.CPP:\n        if not build_dir:\n            raise RuntimeError('Missing --build-dir')\n        solution_files = (f.with_suffix('').name for f in src_dir.glob(\"*.cc\")\n                          if find_str_in_file(f, 'GenericTestMain'))\n        EXCLUDED_FILES = ['queue_with_max_using_deque', 'reverse_list']\n        solution_files = sorted([build_dir / f for f in solution_files \n                                 if f not in EXCLUDED_FILES])\n        if os.name == 'nt':\n            return [f.with_suffix('.exe') for f in solution_files]\n        else:\n            return solution_files\n    elif lang == Language.JAVA:\n        EXCLUDED_FILES = ['QueueWithMaxUsingDeque.java', 'ReverseList.java']\n        return sorted([\n            f for f in (src_dir / 'epi').glob(\"*.java\") if\n            (find_str_in_file(f, '@EpiTest') and f.name not in EXCLUDED_FILES)\n        ])\n\n    raise NotImplementedError()\n\n\n@click.command(\n    'check_judge',\n    help='A tool for executing all judge programs in of a given kind.')\n@click.option('--build-dir',\n              help='Build directory (for C++)',\n              type=click.Path(file_okay=False, exists=True))\n@click.argument('lang',\n                type=click.Choice([Language.CPP.value, Language.JAVA.value, Language.PYTHON.value]))\n@click.argument('mode', type=click.Choice([TestMode.STUB.value, TestMode.SOLUTION.value]))\n@click.argument('src_dir', type=click.Path(file_okay=False, exists=True))\ndef check_judge(build_dir: str, src_dir: str, lang: str, mode: str) -> None:\n    lang = Language(lang)\n    mode = TestMode(mode)\n    if build_dir:\n        build_dir = Path(build_dir).absolute()\n    src_dir = Path(src_dir).absolute()\n    test_data_dir = src_dir / 'test_data'\n\n    files = scan_lang_folder(src_dir, build_dir, lang, mode)\n    if not files:\n        print('Programs are not found')\n        exit(1)\n\n    for i, f in enumerate(files):\n        print(f\"[{i + 1}/{len(files)}] {f}\", flush=True)\n        args = get_exec_args(f, lang, test_data_dir)\n        execute_program(args, mode)\n    print('Success')\n\n\nif __name__ == '__main__':\n    check_judge()\n"
        },
        {
          "name": "html",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 1.6552734375,
          "content": "<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\"/>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n    <link rel=\"stylesheet\" href=\"http://fonts.googleapis.com/css?family=Roboto:300,400,500,700\" type=\"text/css\">\n    <link rel=\"stylesheet\" href=\"html/css/material.indigo-pink.css\">\n    <link rel=\"stylesheet\" href=\"html/css/index.css\">\n    <title>EPIJudge</title>\n</head>\n<body>\n<script src=\"html/js/vue.js\"></script>\n<script src=\"html/js/material.js\"></script>\n<script src=\"problem_mapping.js\"></script>\n<script src=\"html/js/helpers.js\"></script>\n\n<div id=\"epijudge-app\">\n    <div class=\"mdl-layout mdl-js-layout mdl-layout--fixed-header\">\n        <header class=\"mdl-layout__header\" style=\"background-color: #002f6c\">\n            <div class=\"mdl-layout__header-row\">\n                <!-- Title -->\n                <span class=\"mdl-layout-title\" style=\"font-size: xx-large\">EPIJudge</span>\n                <div class=\"mdl-layout-spacer\"></div>\n                <nav class=\"mdl-navigation mdl-layout--large-screen-only\">\n                    <a class=\"mdl-navigation__link\" style=\"font-size: x-large\" href=\"https://elementsofprogramminginterviews.com/\">Website</a>\n                    <a class=\"mdl-navigation__link\" style=\"font-size: x-large\" href=\"https://github.com/adnanaziz/EPIJudge\">GitHub</a>\n                </nav>\n            </div>\n        </header>\n        <main class=\"epi_content mdl-layout__content\">\n            <div class=\"chapter-card-block\">\n                <chapter-card v-for=\"chapter in chapters\" v-bind:chapter=\"chapter\"></chapter-card>\n            </div>\n        </main>\n    </div>\n</div>\n\n<script src=\"html/js/index.js\"></script>\n\n</body>\n</html>"
        },
        {
          "name": "problem_mapping.js",
          "type": "blob",
          "size": 89.8779296875,
          "content": "problem_mapping = {\n    \"Chapter 04: Primitive Types\": {\n        \"4.00 Bootcamp: Primitive Types\": {\n            \"C++: count_bits.cc\": {\n                \"passed\": 0,\n                \"total\": 10001\n            },\n            \"Java: CountBits.java\": {\n                \"passed\": 0,\n                \"total\": 10001\n            },\n            \"Python: count_bits.py\": {\n                \"passed\": 0,\n                \"total\": 10001\n            }\n        },\n        \"4.01 Computing the parity of a word\": {\n            \"C++: parity.cc\": {\n                \"passed\": 0,\n                \"total\": 10000\n            },\n            \"Java: Parity.java\": {\n                \"passed\": 0,\n                \"total\": 10000\n            },\n            \"Python: parity.py\": {\n                \"passed\": 0,\n                \"total\": 10000\n            }\n        },\n        \"4.02 Swap bits\": {\n            \"C++: swap_bits.cc\": {\n                \"passed\": 0,\n                \"total\": 10001\n            },\n            \"Java: SwapBits.java\": {\n                \"passed\": 0,\n                \"total\": 10001\n            },\n            \"Python: swap_bits.py\": {\n                \"passed\": 0,\n                \"total\": 10001\n            }\n        },\n        \"4.03 Reverse bits\": {\n            \"C++: reverse_bits.cc\": {\n                \"passed\": 0,\n                \"total\": 10000\n            },\n            \"Java: ReverseBits.java\": {\n                \"passed\": 0,\n                \"total\": 10000\n            },\n            \"Python: reverse_bits.py\": {\n                \"passed\": 0,\n                \"total\": 10000\n            }\n        },\n        \"4.04 Find a closest integer with the same weight\": {\n            \"C++: closest_int_same_weight.cc\": {\n                \"passed\": 0,\n                \"total\": 10000\n            },\n            \"Java: ClosestIntSameWeight.java\": {\n                \"passed\": 0,\n                \"total\": 10000\n            },\n            \"Python: closest_int_same_weight.py\": { \n                \"passed\": 0,\n                \"total\": 10000\n            }\n        },\n        \"4.05 Compute product without arithmetical operators\": {\n            \"C++: primitive_multiply.cc\": {\n                \"passed\": 0,\n                \"total\": 10006\n            },\n            \"Java: PrimitiveMultiply.java\": {\n                \"passed\": 0,\n                \"total\": 10006\n            },\n            \"Python: primitive_multiply.py\": {\n                \"passed\": 0,\n                \"total\": 10006\n            }\n        },\n        \"4.06 Compute quotient without arithmetical operators\": {\n            \"C++: primitive_divide.cc\": {\n                \"passed\": 0,\n                \"total\": 10000\n            },\n            \"Java: PrimitiveDivide.java\": {\n                \"passed\": 0,\n                \"total\": 10000\n            },\n            \"Python: primitive_divide.py\": {\n                \"passed\": 0,\n                \"total\": 10000\n            }\n        },\n        \"4.07 Compute pow(x,y)\": {\n            \"C++: power_x_y.cc\": {\n                \"passed\": 0,\n                \"total\": 10002\n            },\n            \"Java: PowerXY.java\": {\n                \"passed\": 0,\n                \"total\": 10002\n            },\n            \"Python: power_x_y.py\": {\n                \"passed\": 0,\n                \"total\": 10002\n            }\n        },\n        \"4.08 Reverse digits\": {\n            \"C++: reverse_digits.cc\": {\n                \"passed\": 0,\n                \"total\": 19952\n            },\n            \"Java: ReverseDigits.java\": {\n                \"passed\": 0,\n                \"total\": 19952\n            },\n            \"Python: reverse_digits.py\": {\n                \"passed\": 0,\n                \"total\": 19952\n            }\n        },\n        \"4.09 Check if a decimal integer is a palindrome\": {\n            \"C++: is_number_palindromic.cc\": {\n                \"passed\": 0,\n                \"total\": 20000\n            },\n            \"Java: IsNumberPalindromic.java\": {\n                \"passed\": 0,\n                \"total\": 20000\n            },\n            \"Python: is_number_palindromic.py\": {\n                \"passed\": 0,\n                \"total\": 20000\n            }\n        },\n        \"4.10 Generate uniform random numbers\": {\n            \"C++: uniform_random_number.cc\": {\n                \"passed\": 0,\n                \"total\": 7\n            },\n            \"Java: UniformRandomNumber.java\": {\n                \"passed\": 0,\n                \"total\": 7\n            },\n            \"Python: uniform_random_number.py\": {\n                \"passed\": 0,\n                \"total\": 7\n            }\n        },\n        \"4.11 Rectangle intersection\": {\n            \"C++: rectangle_intersection.cc\": {\n                \"passed\": 0,\n                \"total\": 10000\n            },\n            \"Java: RectangleIntersection.java\": {\n                \"passed\": 0,\n                \"total\": 10000\n            },\n            \"Python: rectangle_intersection.py\": {\n                \"passed\": 0,\n                \"total\": 10000\n            }\n        }\n    },\n    \"Chapter 05: Arrays\": {\n        \"5.00 Bootcamp: Arrays\": {\n            \"C++: even_odd_array.cc\": {\n                \"passed\": 0,\n                \"total\": 1001\n            },\n            \"Java: EvenOddArray.java\": {\n                \"passed\": 0,\n                \"total\": 1001\n            },\n            \"Python: even_odd_array.py\": {\n                \"passed\": 0,\n                \"total\": 1001\n            }\n        },\n        \"5.01 The Dutch national flag problem\": {\n            \"C++: dutch_national_flag.cc\": {\n                \"passed\": 0,\n                \"total\": 204\n            },\n            \"Java: DutchNationalFlag.java\": {\n                \"passed\": 0,\n                \"total\": 204\n            },\n            \"Python: dutch_national_flag.py\": {\n                \"passed\": 0,\n                \"total\": 204\n            }\n        },\n        \"5.02 Increment an arbitrary-precision integer\": {\n            \"C++: int_as_array_increment.cc\": {\n                \"passed\": 0,\n                \"total\": 505\n            },\n            \"Java: IntAsArrayIncrement.java\": {\n                \"passed\": 0,\n                \"total\": 505\n            },\n            \"Python: int_as_array_increment.py\": {\n                \"passed\": 0,\n                \"total\": 505\n            }\n        },\n        \"5.03 Multiply two arbitrary-precision integers\": {\n            \"C++: int_as_array_multiply.cc\": {\n                \"passed\": 0,\n                \"total\": 1000\n            },\n            \"Java: IntAsArrayMultiply.java\": {\n                \"passed\": 0,\n                \"total\": 1000\n            },\n            \"Python: int_as_array_multiply.py\": {\n                \"passed\": 0,\n                \"total\": 1000\n            }\n        },\n        \"5.04 Advancing through an array\": {\n            \"C++: advance_by_offsets.cc\": {\n                \"passed\": 0,\n                \"total\": 2004\n            },\n            \"Java: AdvanceByOffsets.java\": {\n                \"passed\": 0,\n                \"total\": 2004\n            },\n            \"Python: advance_by_offsets.py\": {\n                \"passed\": 0,\n                \"total\": 2004\n            }\n        },\n        \"5.05 Delete duplicates from a sorted array\": {\n            \"C++: sorted_array_remove_dups.cc\": {\n                \"passed\": 0,\n                \"total\": 2003\n            },\n            \"Java: SortedArrayRemoveDups.java\": {\n                \"passed\": 0,\n                \"total\": 2003\n            },\n            \"Python: sorted_array_remove_dups.py\": {\n                \"passed\": 0,\n                \"total\": 2003\n            }\n        },\n        \"5.06 Buy and sell a stock once\": {\n            \"C++: buy_and_sell_stock.cc\": {\n                \"passed\": 0,\n                \"total\": 402\n            },\n            \"Java: BuyAndSellStock.java\": {\n                \"passed\": 0,\n                \"total\": 402\n            },\n            \"Python: buy_and_sell_stock.py\": {\n                \"passed\": 0,\n                \"total\": 402\n            }\n        },\n        \"5.07 Buy and sell a stock twice\": {\n            \"C++: buy_and_sell_stock_twice.cc\": {\n                \"passed\": 0,\n                \"total\": 402\n            },\n            \"Java: BuyAndSellStockTwice.java\": {\n                \"passed\": 0,\n                \"total\": 402\n            },\n            \"Python: buy_and_sell_stock_twice.py\": {\n                \"passed\": 0,\n                \"total\": 402\n            }\n        },\n        \"5.08 Computing an alternation\": {\n            \"C++: alternating_array.cc\": {\n                \"passed\": 0,\n                \"total\": 203\n            },\n            \"Java: AlternatingArray.java\": {\n                \"passed\": 0,\n                \"total\": 203\n            },\n            \"Python: alternating_array.py\": {\n                \"passed\": 0,\n                \"total\": 203\n            }\n        },\n        \"5.09 Enumerate all primes to n\": {\n            \"C++: prime_sieve.cc\": {\n                \"passed\": 0,\n                \"total\": 24\n            },\n            \"Java: PrimeSieve.java\": {\n                \"passed\": 0,\n                \"total\": 24\n            },\n            \"Python: prime_sieve.py\": {\n                \"passed\": 0,\n                \"total\": 24\n            }\n        },\n        \"5.10 Permute the elements of an array\": {\n            \"C++: apply_permutation.cc\": {\n                \"passed\": 0,\n                \"total\": 101\n            },\n            \"Java: ApplyPermutation.java\": {\n                \"passed\": 0,\n                \"total\": 101\n            },\n            \"Python: apply_permutation.py\": {\n                \"passed\": 0,\n                \"total\": 101\n            }\n        },\n        \"5.11 Compute the next permutation\": {\n            \"C++: next_permutation.cc\": {\n                \"passed\": 0,\n                \"total\": 2001\n            },\n            \"Java: NextPermutation.java\": {\n                \"passed\": 0,\n                \"total\": 2001\n            },\n            \"Python: next_permutation.py\": {\n                \"passed\": 0,\n                \"total\": 2001\n            }\n        },\n        \"5.12 Sample offline data\": {\n            \"C++: offline_sampling.cc\": {\n                \"passed\": 0,\n                \"total\": 8\n            },\n            \"Java: OfflineSampling.java\": {\n                \"passed\": 0,\n                \"total\": 8\n            },\n            \"Python: offline_sampling.py\": {\n                \"passed\": 0,\n                \"total\": 8\n            }\n        },\n        \"5.13 Sample online data\": {\n            \"C++: online_sampling.cc\": {\n                \"passed\": 0,\n                \"total\": 7\n            },\n            \"Java: OnlineSampling.java\": {\n                \"passed\": 0,\n                \"total\": 7\n            },\n            \"Python: online_sampling.py\": {\n                \"passed\": 0,\n                \"total\": 7\n            }\n        },\n        \"5.14 Compute a random permutation\": {\n            \"C++: random_permutation.cc\": {\n                \"passed\": 0,\n                \"total\": 6\n            },\n            \"Java: RandomPermutation.java\": {\n                \"passed\": 0,\n                \"total\": 6\n            },\n            \"Python: random_permutation.py\": {\n                \"passed\": 0,\n                \"total\": 6\n            }\n        },\n        \"5.15 Compute a random subset\": {\n            \"C++: random_subset.cc\": {\n                \"passed\": 0,\n                \"total\": 9\n            },\n            \"Java: RandomSubset.java\": {\n                \"passed\": 0,\n                \"total\": 9\n            },\n            \"Python: random_subset.py\": {\n                \"passed\": 0,\n                \"total\": 9\n            }\n        },\n        \"5.16 Generate nonuniform random numbers\": {\n            \"C++: nonuniform_random_number.cc\": {\n                \"passed\": 0,\n                \"total\": 10\n            },\n            \"Java: NonuniformRandomNumber.java\": {\n                \"passed\": 0,\n                \"total\": 10\n            },\n            \"Python: nonuniform_random_number.py\": {\n                \"passed\": 0,\n                \"total\": 10\n            }\n        },\n        \"5.17 The Sudoku checker problem\": {\n            \"C++: is_valid_sudoku.cc\": {\n                \"passed\": 0,\n                \"total\": 745\n            },\n            \"Java: IsValidSudoku.java\": {\n                \"passed\": 0,\n                \"total\": 745\n            },\n            \"Python: is_valid_sudoku.py\": {\n                \"passed\": 0,\n                \"total\": 745\n            }\n        },\n        \"5.18 Compute the spiral ordering of a 2D array\": {\n            \"C++: spiral_ordering.cc\": {\n                \"passed\": 0,\n                \"total\": 51\n            },\n            \"Java: SpiralOrdering.java\": {\n                \"passed\": 0,\n                \"total\": 51\n            },\n            \"Python: spiral_ordering.py\": {\n                \"passed\": 0,\n                \"total\": 51\n            }\n        },\n        \"5.19 Rotate a 2D array\": {\n            \"C++: matrix_rotation.cc\": {\n                \"passed\": 0,\n                \"total\": 51\n            },\n            \"Java: MatrixRotation.java\": {\n                \"passed\": 0,\n                \"total\": 51\n            },\n            \"Python: matrix_rotation.py\": {\n                \"passed\": 0,\n                \"total\": 51\n            }\n        },\n        \"5.20 Compute rows in Pascal's Triangle\": {\n            \"C++: pascal_triangle.cc\": {\n                \"passed\": 0,\n                \"total\": 35\n            },\n            \"Java: PascalTriangle.java\": {\n                \"passed\": 0,\n                \"total\": 35\n            },\n            \"Python: pascal_triangle.py\": {\n                \"passed\": 0,\n                \"total\": 35\n            }\n        }\n    },\n    \"Chapter 06: Strings\": {\n        \"6.00 Bootcamp: Strings\": {\n            \"C++: is_string_palindromic.cc\": {\n                \"passed\": 0,\n                \"total\": 10000\n            },\n            \"Java: IsStringPalindromic.java\": {\n                \"passed\": 0,\n                \"total\": 10000\n            },\n            \"Python: is_string_palindromic.py\": {\n                \"passed\": 0,\n                \"total\": 10000\n            }\n        },\n        \"6.01 Interconvert strings and integers\": {\n            \"C++: string_integer_interconversion.cc\": {\n                \"passed\": 0,\n                \"total\": 15002\n            },\n            \"Java: StringIntegerInterconversion.java\": {\n                \"passed\": 0,\n                \"total\": 15002\n            },\n            \"Python: string_integer_interconversion.py\": {\n                \"passed\": 0,\n                \"total\": 15002\n            }\n        },\n        \"6.02 Base conversion\": {\n            \"C++: convert_base.cc\": {\n                \"passed\": 0,\n                \"total\": 20001\n            },\n            \"Java: ConvertBase.java\": {\n                \"passed\": 0,\n                \"total\": 20001\n            },\n            \"Python: convert_base.py\": {\n                \"passed\": 0,\n                \"total\": 20001\n            }\n        },\n        \"6.03 Compute the spreadsheet column encoding\": {\n            \"C++: spreadsheet_encoding.cc\": {\n                \"passed\": 0,\n                \"total\": 10000\n            },\n            \"Java: SpreadsheetEncoding.java\": {\n                \"passed\": 0,\n                \"total\": 10000\n            },\n            \"Python: spreadsheet_encoding.py\": {\n                \"passed\": 0,\n                \"total\": 10000\n            }\n        },\n        \"6.04 Replace and remove\": {\n            \"C++: replace_and_remove.cc\": {\n                \"passed\": 0,\n                \"total\": 501\n            },\n            \"Java: ReplaceAndRemove.java\": {\n                \"passed\": 0,\n                \"total\": 501\n            },\n            \"Python: replace_and_remove.py\": {\n                \"passed\": 0,\n                \"total\": 501\n            }\n        },\n        \"6.05 Test palindromicity\": {\n            \"C++: is_string_palindromic_punctuation.cc\": {\n                \"passed\": 0,\n                \"total\": 305\n            },\n            \"Java: IsStringPalindromicPunctuation.java\": {\n                \"passed\": 0,\n                \"total\": 305\n            },\n            \"Python: is_string_palindromic_punctuation.py\": {\n                \"passed\": 0,\n                \"total\": 305\n            }\n        },\n        \"6.06 Reverse all the words in a sentence\": {\n            \"C++: reverse_words.cc\": {\n                \"passed\": 0,\n                \"total\": 103\n            },\n            \"Java: ReverseWords.java\": {\n                \"passed\": 0,\n                \"total\": 103\n            },\n            \"Python: reverse_words.py\": {\n                \"passed\": 0,\n                \"total\": 103\n            }\n        },\n        \"6.07 The look-and-say problem\": {\n            \"C++: look_and_say.cc\": {\n                \"passed\": 0,\n                \"total\": 40\n            },\n            \"Java: LookAndSay.java\": {\n                \"passed\": 0,\n                \"total\": 40\n            },\n            \"Python: look_and_say.py\": {\n                \"passed\": 0,\n                \"total\": 40\n            }\n        },\n        \"6.08 Convert from Roman to decimal\": {\n            \"C++: roman_to_integer.cc\": {\n                \"passed\": 0,\n                \"total\": 3999\n            },\n            \"Java: RomanToInteger.java\": {\n                \"passed\": 0,\n                \"total\": 3999\n            },\n            \"Python: roman_to_integer.py\": {\n                \"passed\": 0,\n                \"total\": 3999\n            }\n        },\n        \"6.09 Compute all valid IP addresses\": {\n            \"C++: valid_ip_addresses.cc\": {\n                \"passed\": 0,\n                \"total\": 10008\n            },\n            \"Java: ValidIpAddresses.java\": {\n                \"passed\": 0,\n                \"total\": 10008\n            },\n            \"Python: valid_ip_addresses.py\": {\n                \"passed\": 0,\n                \"total\": 10008\n            }\n        },\n        \"6.10 Write a string sinusoidally\": {\n            \"C++: snake_string.cc\": {\n                \"passed\": 0,\n                \"total\": 500\n            },\n            \"Java: SnakeString.java\": {\n                \"passed\": 0,\n                \"total\": 500\n            },\n            \"Python: snake_string.py\": {\n                \"passed\": 0,\n                \"total\": 500\n            }\n        },\n        \"6.11 Implement run-length encoding\": {\n            \"C++: run_length_compression.cc\": {\n                \"passed\": 0,\n                \"total\": 200\n            },\n            \"Java: RunLengthCompression.java\": {\n                \"passed\": 0,\n                \"total\": 200\n            },\n            \"Python: run_length_compression.py\": {\n                \"passed\": 0,\n                \"total\": 200\n            }\n        },\n        \"6.12 Find the first occurrence of a substring\": {\n            \"C++: substring_match.cc\": {\n                \"passed\": 0,\n                \"total\": 835\n            },\n            \"Java: SubstringMatch.java\": {\n                \"passed\": 0,\n                \"total\": 835\n            },\n            \"Python: substring_match.py\": {\n                \"passed\": 0,\n                \"total\": 835\n            }\n        }\n    },\n    \"Chapter 07: Linked Lists\": {\n        \"7.00 Bootcamp: Linked Lists\": {\n            \"C++: delete_from_list.cc\": {\n                \"passed\": 0,\n                \"total\": 457\n            },\n            \"C++: insert_in_list.cc\": {\n                \"passed\": 0,\n                \"total\": 504\n            },\n            \"C++: search_in_list.cc\": {\n                \"passed\": 0,\n                \"total\": 505\n            },\n            \"Java: DeleteFromList.java\": {\n                \"passed\": 0,\n                \"total\": 457\n            },\n            \"Java: InsertInList.java\": {\n                \"passed\": 0,\n                \"total\": 504\n            },\n            \"Java: SearchInList.java\": {\n                \"passed\": 0,\n                \"total\": 505\n            },\n            \"Python: delete_from_list.py\": {\n                \"passed\": 0,\n                \"total\": 457\n            },\n            \"Python: insert_in_list.py\": {\n                \"passed\": 0,\n                \"total\": 504\n            },\n            \"Python: search_in_list.py\": {\n                \"passed\": 0,\n                \"total\": 505\n            }\n        },\n        \"7.01 Merge two sorted lists\": {\n            \"C++: sorted_lists_merge.cc\": {\n                \"passed\": 0,\n                \"total\": 501\n            },\n            \"Java: SortedListsMerge.java\": {\n                \"passed\": 0,\n                \"total\": 501\n            },\n            \"Python: sorted_lists_merge.py\": {\n                \"passed\": 0,\n                \"total\": 501\n            }\n        },\n        \"7.02 Reverse a single sublist\": {\n            \"C++: reverse_sublist.cc\": {\n                \"passed\": 0,\n                \"total\": 210\n            },\n            \"Java: ReverseSublist.java\": {\n                \"passed\": 0,\n                \"total\": 210\n            },\n            \"Python: reverse_sublist.py\": {\n                \"passed\": 0,\n                \"total\": 210\n            }\n        },\n        \"7.03 Test for cyclicity\": {\n            \"C++: is_list_cyclic.cc\": {\n                \"passed\": 0,\n                \"total\": 102\n            },\n            \"Java: IsListCyclic.java\": {\n                \"passed\": 0,\n                \"total\": 102\n            },\n            \"Python: is_list_cyclic.py\": {\n                \"passed\": 0,\n                \"total\": 102\n            }\n        },\n        \"7.04 Test for overlapping lists---lists are cycle-free\": {\n            \"C++: do_terminated_lists_overlap.cc\": {\n                \"passed\": 0,\n                \"total\": 106\n            },\n            \"Java: DoTerminatedListsOverlap.java\": {\n                \"passed\": 0,\n                \"total\": 106\n            },\n            \"Python: do_terminated_lists_overlap.py\": {\n                \"passed\": 0,\n                \"total\": 106\n            }\n        },\n        \"7.05 Test for overlapping lists---lists may have cycles\": {\n            \"C++: do_lists_overlap.cc\": {\n                \"passed\": 0,\n                \"total\": 120\n            },\n            \"Java: DoListsOverlap.java\": {\n                \"passed\": 0,\n                \"total\": 120\n            },\n            \"Python: do_lists_overlap.py\": {\n                \"passed\": 0,\n                \"total\": 120\n            }\n        },\n        \"7.06 Delete a node from a singly linked list\": {\n            \"C++: delete_node_from_list.cc\": {\n                \"passed\": 0,\n                \"total\": 512\n            },\n            \"Java: DeleteNodeFromList.java\": {\n                \"passed\": 0,\n                \"total\": 512\n            },\n            \"Python: delete_node_from_list.py\": {\n                \"passed\": 0,\n                \"total\": 512\n            }\n        },\n        \"7.07 Remove the kth last element from a list\": {\n            \"C++: delete_kth_last_from_list.cc\": {\n                \"passed\": 0,\n                \"total\": 306\n            },\n            \"Java: DeleteKthLastFromList.java\": {\n                \"passed\": 0,\n                \"total\": 306\n            },\n            \"Python: delete_kth_last_from_list.py\": {\n                \"passed\": 0,\n                \"total\": 306\n            }\n        },\n        \"7.08 Remove duplicates from a sorted list\": {\n            \"C++: remove_duplicates_from_sorted_list.cc\": {\n                \"passed\": 0,\n                \"total\": 203\n            },\n            \"Java: RemoveDuplicatesFromSortedList.java\": {\n                \"passed\": 0,\n                \"total\": 203\n            },\n            \"Python: remove_duplicates_from_sorted_list.py\": {\n                \"passed\": 0,\n                \"total\": 203\n            }\n        },\n        \"7.09 Implement cyclic right shift for singly linked lists\": {\n            \"C++: list_cyclic_right_shift.cc\": {\n                \"passed\": 0,\n                \"total\": 507\n            },\n            \"Java: ListCyclicRightShift.java\": {\n                \"passed\": 0,\n                \"total\": 507\n            },\n            \"Python: list_cyclic_right_shift.py\": {\n                \"passed\": 0,\n                \"total\": 507\n            }\n        },\n        \"7.10 Implement even-odd merge\": {\n            \"C++: even_odd_list_merge.cc\": {\n                \"passed\": 0,\n                \"total\": 1015\n            },\n            \"Java: EvenOddListMerge.java\": {\n                \"passed\": 0,\n                \"total\": 1015\n            },\n            \"Python: even_odd_list_merge.py\": {\n                \"passed\": 0,\n                \"total\": 1015\n            }\n        },\n        \"7.11 Test whether a singly linked list is palindromic\": {\n            \"C++: is_list_palindromic.cc\": {\n                \"passed\": 0,\n                \"total\": 203\n            },\n            \"Java: IsListPalindromic.java\": {\n                \"passed\": 0,\n                \"total\": 203\n            },\n            \"Python: is_list_palindromic.py\": {\n                \"passed\": 0,\n                \"total\": 203\n            }\n        },\n        \"7.12 Implement list pivoting\": {\n            \"C++: pivot_list.cc\": {\n                \"passed\": 0,\n                \"total\": 208\n            },\n            \"Java: PivotList.java\": {\n                \"passed\": 0,\n                \"total\": 208\n            },\n            \"Python: pivot_list.py\": {\n                \"passed\": 0,\n                \"total\": 208\n            }\n        },\n        \"7.13 Add list-based integers\": {\n            \"C++: int_as_list_add.cc\": {\n                \"passed\": 0,\n                \"total\": 2002\n            },\n            \"Java: IntAsListAdd.java\": {\n                \"passed\": 0,\n                \"total\": 2002\n            },\n            \"Python: int_as_list_add.py\": {\n                \"passed\": 0,\n                \"total\": 2002\n            }\n        }\n    },\n    \"Chapter 08: Stacks and Queues\": {\n        \"8.01 Implement a stack with max API\": {\n            \"C++: stack_with_max.cc\": {\n                \"passed\": 0,\n                \"total\": 101\n            },\n            \"Java: StackWithMax.java\": {\n                \"passed\": 0,\n                \"total\": 101\n            },\n            \"Python: stack_with_max.py\": {\n                \"passed\": 0,\n                \"total\": 101\n            }\n        },\n        \"8.02 Evaluate RPN expressions\": {\n            \"C++: evaluate_rpn.cc\": {\n                \"passed\": 0,\n                \"total\": 108\n            },\n            \"Java: EvaluateRpn.java\": {\n                \"passed\": 0,\n                \"total\": 108\n            },\n            \"Python: evaluate_rpn.py\": {\n                \"passed\": 0,\n                \"total\": 108\n            }\n        },\n        \"8.03 Is a string well-formed?\": {\n            \"C++: is_valid_parenthesization.cc\": {\n                \"passed\": 0,\n                \"total\": 78\n            },\n            \"Java: IsValidParenthesization.java\": {\n                \"passed\": 0,\n                \"total\": 78\n            },\n            \"Python: is_valid_parenthesization.py\": {\n                \"passed\": 0,\n                \"total\": 78\n            }\n        },\n        \"8.04 Normalize pathnames\": {\n            \"C++: directory_path_normalization.cc\": {\n                \"passed\": 0,\n                \"total\": 255\n            },\n            \"Java: DirectoryPathNormalization.java\": {\n                \"passed\": 0,\n                \"total\": 255\n            },\n            \"Python: directory_path_normalization.py\": {\n                \"passed\": 0,\n                \"total\": 255\n            }\n        },\n        \"8.05 Compute buildings with a sunset view\": {\n            \"C++: sunset_view.cc\": {\n                \"passed\": 0,\n                \"total\": 101\n            },\n            \"Java: SunsetView.java\": {\n                \"passed\": 0,\n                \"total\": 101\n            },\n            \"Python: sunset_view.py\": {\n                \"passed\": 0,\n                \"total\": 101\n            }\n        },\n        \"8.06 Compute binary tree nodes in order of increasing depth\": {\n            \"C++: tree_level_order.cc\": {\n                \"passed\": 0,\n                \"total\": 3852\n            },\n            \"Java: TreeLevelOrder.java\": {\n                \"passed\": 0,\n                \"total\": 3852\n            },\n            \"Python: tree_level_order.py\": {\n                \"passed\": 0,\n                \"total\": 3852\n            }\n        },\n        \"8.07 Implement a circular queue\": {\n            \"C++: circular_queue.cc\": {\n                \"passed\": 0,\n                \"total\": 65\n            },\n            \"Java: CircularQueue.java\": {\n                \"passed\": 0,\n                \"total\": 65\n            },\n            \"Python: circular_queue.py\": {\n                \"passed\": 0,\n                \"total\": 65\n            }\n        },\n        \"8.08 Implement a queue using stacks\": {\n            \"C++: queue_from_stacks.cc\": {\n                \"passed\": 0,\n                \"total\": 65\n            },\n            \"Java: QueueFromStacks.java\": {\n                \"passed\": 0,\n                \"total\": 65\n            },\n            \"Python: queue_from_stacks.py\": {\n                \"passed\": 0,\n                \"total\": 65\n            }\n        },\n        \"8.09 Implement a queue with max API\": {\n            \"C++: queue_with_max.cc\": {\n                \"passed\": 0,\n                \"total\": 201\n            },\n            \"Java: QueueWithMax.java\": {\n                \"passed\": 0,\n                \"total\": 201\n            },\n            \"Python: queue_with_max.py\": {\n                \"passed\": 0,\n                \"total\": 201\n            }\n        }\n    },\n    \"Chapter 09: Binary Trees\": {\n        \"9.01 Test if a binary tree is height-balanced\": {\n            \"C++: is_tree_balanced.cc\": {\n                \"passed\": 0,\n                \"total\": 3852\n            },\n            \"Java: IsTreeBalanced.java\": {\n                \"passed\": 0,\n                \"total\": 3852\n            },\n            \"Python: is_tree_balanced.py\": {\n                \"passed\": 0,\n                \"total\": 3852\n            }\n        },\n        \"9.02 Test if a binary tree is symmetric\": {\n            \"C++: is_tree_symmetric.cc\": {\n                \"passed\": 0,\n                \"total\": 3852\n            },\n            \"Java: IsTreeSymmetric.java\": {\n                \"passed\": 0,\n                \"total\": 3852\n            },\n            \"Python: is_tree_symmetric.py\": {\n                \"passed\": 0,\n                \"total\": 3852\n            }\n        },\n        \"9.03 Compute the lowest common ancestor in a binary tree\": {\n            \"C++: lowest_common_ancestor.cc\": {\n                \"passed\": 0,\n                \"total\": 948\n            },\n            \"Java: LowestCommonAncestor.java\": {\n                \"passed\": 0,\n                \"total\": 948\n            },\n            \"Python: lowest_common_ancestor.py\": {\n                \"passed\": 0,\n                \"total\": 948\n            }\n        },\n        \"9.04 Compute the LCA when nodes have parent pointers\": {\n            \"C++: lowest_common_ancestor_with_parent.cc\": {\n                \"passed\": 0,\n                \"total\": 948\n            },\n            \"Java: LowestCommonAncestorWithParent.java\": {\n                \"passed\": 0,\n                \"total\": 948\n            },\n            \"Python: lowest_common_ancestor_with_parent.py\": {\n                \"passed\": 0,\n                \"total\": 948\n            }\n        },\n        \"9.05 Sum the root-to-leaf paths in a binary tree\": {\n            \"C++: sum_root_to_leaf.cc\": {\n                \"passed\": 0,\n                \"total\": 3849\n            },\n            \"Java: SumRootToLeaf.java\": {\n                \"passed\": 0,\n                \"total\": 3849\n            },\n            \"Python: sum_root_to_leaf.py\": {\n                \"passed\": 0,\n                \"total\": 3849\n            }\n        },\n        \"9.06 Find a root to leaf path with specified sum\": {\n            \"C++: path_sum.cc\": {\n                \"passed\": 0,\n                \"total\": 7690\n            },\n            \"Java: PathSum.java\": {\n                \"passed\": 0,\n                \"total\": 7690\n            },\n            \"Python: path_sum.py\": {\n                \"passed\": 0,\n                \"total\": 7690\n            }\n        },\n        \"9.07 Implement an inorder traversal without recursion\": {\n            \"C++: tree_inorder.cc\": {\n                \"passed\": 0,\n                \"total\": 3852\n            },\n            \"Java: TreeInorder.java\": {\n                \"passed\": 0,\n                \"total\": 3852\n            },\n            \"Python: tree_inorder.py\": {\n                \"passed\": 0,\n                \"total\": 3852\n            }\n        },\n        \"9.08 Compute the kth node in an inorder traversal\": {\n            \"C++: kth_node_in_tree.cc\": {\n                \"passed\": 0,\n                \"total\": 3851\n            },\n            \"Java: KthNodeInTree.java\": {\n                \"passed\": 0,\n                \"total\": 3851\n            },\n            \"Python: kth_node_in_tree.py\": {\n                \"passed\": 0,\n                \"total\": 3851\n            }\n        },\n        \"9.09 Compute the successor\": {\n            \"C++: successor_in_tree.cc\": {\n                \"passed\": 0,\n                \"total\": 948\n            },\n            \"Java: SuccessorInTree.java\": {\n                \"passed\": 0,\n                \"total\": 948\n            },\n            \"Python: successor_in_tree.py\": {\n                \"passed\": 0,\n                \"total\": 948\n            }\n        },\n        \"9.10 Implement an inorder traversal with constant space\": {\n            \"C++: tree_with_parent_inorder.cc\": {\n                \"passed\": 0,\n                \"total\": 3852\n            },\n            \"Java: TreeWithParentInorder.java\": {\n                \"passed\": 0,\n                \"total\": 3852\n            },\n            \"Python: tree_with_parent_inorder.py\": {\n                \"passed\": 0,\n                \"total\": 3852\n            }\n        },\n        \"9.11 Reconstruct a binary tree from traversal data\": {\n            \"C++: tree_from_preorder_inorder.cc\": {\n                \"passed\": 0,\n                \"total\": 3852\n            },\n            \"Java: TreeFromPreorderInorder.java\": {\n                \"passed\": 0,\n                \"total\": 3852\n            },\n            \"Python: tree_from_preorder_inorder.py\": {\n                \"passed\": 0,\n                \"total\": 3852\n            }\n        },\n        \"9.12 Reconstruct a binary tree from a preorder traversal with markers\": {\n            \"C++: tree_from_preorder_with_null.cc\": {\n                \"passed\": 0,\n                \"total\": 3852\n            },\n            \"Java: TreeFromPreorderWithNull.java\": {\n                \"passed\": 0,\n                \"total\": 3852\n            },\n            \"Python: tree_from_preorder_with_null.py\": {\n                \"passed\": 0,\n                \"total\": 3852\n            }\n        },\n        \"9.13 Compute the leaves of a binary tree\": {\n            \"C++: tree_connect_leaves.cc\": {\n                \"passed\": 0,\n                \"total\": 3852\n            },\n            \"Java: TreeConnectLeaves.java\": {\n                \"passed\": 0,\n                \"total\": 3852\n            },\n            \"Python: tree_connect_leaves.py\": {\n                \"passed\": 0,\n                \"total\": 3852\n            }\n        },\n        \"9.14 Compute the exterior of a binary tree\": {\n            \"C++: tree_exterior.cc\": {\n                \"passed\": 0,\n                \"total\": 3852\n            },\n            \"Java: TreeExterior.java\": {\n                \"passed\": 0,\n                \"total\": 3852\n            },\n            \"Python: tree_exterior.py\": {\n                \"passed\": 0,\n                \"total\": 3852\n            }\n        },\n        \"9.15 Compute the right sibling tree\": {\n            \"C++: tree_right_sibling.cc\": {\n                \"passed\": 0,\n                \"total\": 10\n            },\n            \"Java: TreeRightSibling.java\": {\n                \"passed\": 0,\n                \"total\": 10\n            },\n            \"Python: tree_right_sibling.py\": {\n                \"passed\": 0,\n                \"total\": 10\n            }\n        }\n    },\n    \"Chapter 10: Heaps\": {\n        \"10.01 Merge sorted files\": {\n            \"C++: sorted_arrays_merge.cc\": {\n                \"passed\": 0,\n                \"total\": 152\n            },\n            \"Java: SortedArraysMerge.java\": {\n                \"passed\": 0,\n                \"total\": 152\n            },\n            \"Python: sorted_arrays_merge.py\": {\n                \"passed\": 0,\n                \"total\": 152\n            }\n        },\n        \"10.02 Sort an increasing-decreasing array\": {\n            \"C++: sort_increasing_decreasing_array.cc\": {\n                \"passed\": 0,\n                \"total\": 203\n            },\n            \"Java: SortIncreasingDecreasingArray.java\": {\n                \"passed\": 0,\n                \"total\": 203\n            },\n            \"Python: sort_increasing_decreasing_array.py\": {\n                \"passed\": 0,\n                \"total\": 203\n            }\n        },\n        \"10.03 Sort an almost-sorted array\": {\n            \"C++: sort_almost_sorted_array.cc\": {\n                \"passed\": 0,\n                \"total\": 101\n            },\n            \"Java: SortAlmostSortedArray.java\": {\n                \"passed\": 0,\n                \"total\": 101\n            },\n            \"Python: sort_almost_sorted_array.py\": {\n                \"passed\": 0,\n                \"total\": 101\n            }\n        },\n        \"10.04 Compute the k closest stars\": {\n            \"C++: k_closest_stars.cc\": {\n                \"passed\": 0,\n                \"total\": 51\n            },\n            \"Java: KClosestStars.java\": {\n                \"passed\": 0,\n                \"total\": 51\n            },\n            \"Python: k_closest_stars.py\": {\n                \"passed\": 0,\n                \"total\": 51\n            }\n        },\n        \"10.05 Compute the median of online data\": {\n            \"C++: online_median.cc\": {\n                \"passed\": 0,\n                \"total\": 55\n            },\n            \"Java: OnlineMedian.java\": {\n                \"passed\": 0,\n                \"total\": 55\n            },\n            \"Python: online_median.py\": {\n                \"passed\": 0,\n                \"total\": 55\n            }\n        },\n        \"10.06 Compute the k largest elements in a max-heap\": {\n            \"C++: k_largest_in_heap.cc\": {\n                \"passed\": 0,\n                \"total\": 102\n            },\n            \"Java: KLargestInHeap.java\": {\n                \"passed\": 0,\n                \"total\": 102\n            },\n            \"Python: k_largest_in_heap.py\": {\n                \"passed\": 0,\n                \"total\": 102\n            }\n        }\n    },\n    \"Chapter 11: Searching\": {\n        \"11.01 Search a sorted array for first occurrence of k\": {\n            \"C++: search_first_key.cc\": {\n                \"passed\": 0,\n                \"total\": 314\n            },\n            \"Java: SearchFirstKey.java\": {\n                \"passed\": 0,\n                \"total\": 314\n            },\n            \"Python: search_first_key.py\": {\n                \"passed\": 0,\n                \"total\": 314\n            }\n        },\n        \"11.02 Search a sorted array for entry equal to its index\": {\n            \"C++: search_entry_equal_to_index.cc\": {\n                \"passed\": 0,\n                \"total\": 501\n            },\n            \"Java: SearchEntryEqualToIndex.java\": {\n                \"passed\": 0,\n                \"total\": 501\n            },\n            \"Python: search_entry_equal_to_index.py\": {\n                \"passed\": 0,\n                \"total\": 501\n            }\n        },\n        \"11.03 Search a cyclically sorted array\": {\n            \"C++: search_shifted_sorted_array.cc\": {\n                \"passed\": 0,\n                \"total\": 307\n            },\n            \"Java: SearchShiftedSortedArray.java\": {\n                \"passed\": 0,\n                \"total\": 307\n            },\n            \"Python: search_shifted_sorted_array.py\": {\n                \"passed\": 0,\n                \"total\": 307\n            }\n        },\n        \"11.04 Compute the integer square root\": {\n            \"C++: int_square_root.cc\": {\n                \"passed\": 0,\n                \"total\": 2000\n            },\n            \"Java: IntSquareRoot.java\": {\n                \"passed\": 0,\n                \"total\": 2000\n            },\n            \"Python: int_square_root.py\": {\n                \"passed\": 0,\n                \"total\": 2000\n            }\n        },\n        \"11.05 Compute the real square root\": {\n            \"C++: real_square_root.cc\": {\n                \"passed\": 0,\n                \"total\": 11003\n            },\n            \"Java: RealSquareRoot.java\": {\n                \"passed\": 0,\n                \"total\": 11003\n            },\n            \"Python: real_square_root.py\": {\n                \"passed\": 0,\n                \"total\": 11003\n            }\n        },\n        \"11.06 Search in a 2D sorted array\": {\n            \"C++: search_row_col_sorted_matrix.cc\": {\n                \"passed\": 0,\n                \"total\": 194\n            },\n            \"Java: SearchRowColSortedMatrix.java\": {\n                \"passed\": 0,\n                \"total\": 194\n            },\n            \"Python: search_row_col_sorted_matrix.py\": {\n                \"passed\": 0,\n                \"total\": 194\n            }\n        },\n        \"11.07 Find the min and max simultaneously\": {\n            \"C++: search_for_min_max_in_array.cc\": {\n                \"passed\": 0,\n                \"total\": 501\n            },\n            \"Java: SearchForMinMaxInArray.java\": {\n                \"passed\": 0,\n                \"total\": 501\n            },\n            \"Python: search_for_min_max_in_array.py\": {\n                \"passed\": 0,\n                \"total\": 501\n            }\n        },\n        \"11.08 Find the kth largest element\": {\n            \"C++: kth_largest_in_array.cc\": {\n                \"passed\": 0,\n                \"total\": 503\n            },\n            \"Java: KthLargestInArray.java\": {\n                \"passed\": 0,\n                \"total\": 503\n            },\n            \"Python: kth_largest_in_array.py\": {\n                \"passed\": 0,\n                \"total\": 503\n            }\n        },\n        \"11.09 Find the missing IP address\": {\n            \"C++: absent_value_array.cc\": {\n                \"passed\": 0,\n                \"total\": 100\n            },\n            \"Java: AbsentValueArray.java\": {\n                \"passed\": 0,\n                \"total\": 100\n            },\n            \"Python: absent_value_array.py\": {\n                \"passed\": 0,\n                \"total\": 100\n            }\n        },\n        \"11.10 Find the duplicate and missing elements\": {\n            \"C++: search_for_missing_element.cc\": {\n                \"passed\": 0,\n                \"total\": 50\n            },\n            \"Java: SearchForMissingElement.java\": {\n                \"passed\": 0,\n                \"total\": 50\n            },\n            \"Python: search_for_missing_element.py\": {\n                \"passed\": 0,\n                \"total\": 50\n            }\n        }\n    },\n    \"Chapter 12: Hash Tables\": {\n        \"12.00 Bootcamp: Hash Tables\": {\n            \"C++: anagrams.cc\": {\n                \"passed\": 0,\n                \"total\": 9\n            },\n            \"Java: Anagrams.java\": {\n                \"passed\": 0,\n                \"total\": 9\n            },\n            \"Python: anagrams.py\": {\n                \"passed\": 0,\n                \"total\": 9\n            }\n        },\n        \"12.01 Test for palindromic permutations\": {\n            \"C++: is_string_permutable_to_palindrome.cc\": {\n                \"passed\": 0,\n                \"total\": 305\n            },\n            \"Java: IsStringPermutableToPalindrome.java\": {\n                \"passed\": 0,\n                \"total\": 305\n            },\n            \"Python: is_string_permutable_to_palindrome.py\": {\n                \"passed\": 0,\n                \"total\": 305\n            }\n        },\n        \"12.02 Is an anonymous letter constructible?\": {\n            \"C++: is_anonymous_letter_constructible.cc\": {\n                \"passed\": 0,\n                \"total\": 212\n            },\n            \"Java: IsAnonymousLetterConstructible.java\": {\n                \"passed\": 0,\n                \"total\": 212\n            },\n            \"Python: is_anonymous_letter_constructible.py\": {\n                \"passed\": 0,\n                \"total\": 212\n            }\n        },\n        \"12.03 Implement an ISBN cache\": {\n            \"C++: lru_cache.cc\": {\n                \"passed\": 0,\n                \"total\": 101\n            },\n            \"Java: LruCache.java\": {\n                \"passed\": 0,\n                \"total\": 101\n            },\n            \"Python: lru_cache.py\": {\n                \"passed\": 0,\n                \"total\": 101\n            }\n        },\n        \"12.04 Compute the LCA, optimizing for close ancestors\": {\n            \"C++: lowest_common_ancestor_close_ancestor.cc\": {\n                \"passed\": 0,\n                \"total\": 948\n            },\n            \"Java: LowestCommonAncestorCloseAncestor.java\": {\n                \"passed\": 0,\n                \"total\": 948\n            },\n            \"Python: lowest_common_ancestor_close_ancestor.py\": {\n                \"passed\": 0,\n                \"total\": 948\n            }\n        },\n        \"12.05 Find the nearest repeated entries in an array\": {\n            \"C++: nearest_repeated_entries.cc\": {\n                \"passed\": 0,\n                \"total\": 505\n            },\n            \"Java: NearestRepeatedEntries.java\": {\n                \"passed\": 0,\n                \"total\": 505\n            },\n            \"Python: nearest_repeated_entries.py\": {\n                \"passed\": 0,\n                \"total\": 505\n            }\n        },\n        \"12.06 Find the smallest subarray covering all values\": {\n            \"C++: smallest_subarray_covering_set.cc\": {\n                \"passed\": 0,\n                \"total\": 904\n            },\n            \"Java: SmallestSubarrayCoveringSet.java\": {\n                \"passed\": 0,\n                \"total\": 904\n            },\n            \"Python: smallest_subarray_covering_set.py\": {\n                \"passed\": 0,\n                \"total\": 904\n            }\n        },\n        \"12.07 Find smallest subarray sequentially covering all values\": {\n            \"C++: smallest_subarray_covering_all_values.cc\": {\n                \"passed\": 0,\n                \"total\": 629\n            },\n            \"Java: SmallestSubarrayCoveringAllValues.java\": {\n                \"passed\": 0,\n                \"total\": 629\n            },\n            \"Python: smallest_subarray_covering_all_values.py\": {\n                \"passed\": 0,\n                \"total\": 629\n            }\n        },\n        \"12.08 Find the longest subarray with distinct entries\": {\n            \"C++: longest_subarray_with_distinct_values.cc\": {\n                \"passed\": 0,\n                \"total\": 987\n            },\n            \"Java: LongestSubarrayWithDistinctValues.java\": {\n                \"passed\": 0,\n                \"total\": 987\n            },\n            \"Python: longest_subarray_with_distinct_values.py\": {\n                \"passed\": 0,\n                \"total\": 987\n            }\n        },\n        \"12.09 Find the length of a longest contained interval\": {\n            \"C++: longest_contained_interval.cc\": {\n                \"passed\": 0,\n                \"total\": 203\n            },\n            \"Java: LongestContainedInterval.java\": {\n                \"passed\": 0,\n                \"total\": 203\n            },\n            \"Python: longest_contained_interval.py\": {\n                \"passed\": 0,\n                \"total\": 203\n            }\n        },\n        \"12.10 Compute all string decompositions\": {\n            \"C++: string_decompositions_into_dictionary_words.cc\": {\n                \"passed\": 0,\n                \"total\": 171\n            },\n            \"Java: StringDecompositionsIntoDictionaryWords.java\": {\n                \"passed\": 0,\n                \"total\": 171\n            },\n            \"Python: string_decompositions_into_dictionary_words.py\": {\n                \"passed\": 0,\n                \"total\": 171\n            }\n        },\n        \"12.11 Test the Collatz conjecture\": {\n            \"C++: collatz_checker.cc\": {\n                \"passed\": 0,\n                \"total\": 7\n            },\n            \"Java: CollatzChecker.java\": {\n                \"passed\": 0,\n                \"total\": 7\n            },\n            \"Python: collatz_checker.py\": {\n                \"passed\": 0,\n                \"total\": 7\n            }\n        }\n    },\n    \"Chapter 13: Sorting\": {\n        \"13.01 Compute the intersection of two sorted arrays\": {\n            \"C++: intersect_sorted_arrays.cc\": {\n                \"passed\": 0,\n                \"total\": 202\n            },\n            \"Java: IntersectSortedArrays.java\": {\n                \"passed\": 0,\n                \"total\": 202\n            },\n            \"Python: intersect_sorted_arrays.py\": {\n                \"passed\": 0,\n                \"total\": 202\n            }\n        },\n        \"13.02 Merge two sorted arrays\": {\n            \"C++: two_sorted_arrays_merge.cc\": {\n                \"passed\": 0,\n                \"total\": 201\n            },\n            \"Java: TwoSortedArraysMerge.java\": {\n                \"passed\": 0,\n                \"total\": 201\n            },\n            \"Python: two_sorted_arrays_merge.py\": {\n                \"passed\": 0,\n                \"total\": 201\n            }\n        },\n        \"13.03 Computing the h-index\": {\n            \"C++: h_index.cc\": {\n                \"passed\": 0,\n                \"total\": 1001\n            },\n            \"Java: HIndex.java\": {\n                \"passed\": 0,\n                \"total\": 1001\n            },\n            \"Python: h_index.py\": {\n                \"passed\": 0,\n                \"total\": 1001\n            }\n        },\n        \"13.04 Remove first-name duplicates\": {\n            \"C++: remove_duplicates.cc\": {\n                \"passed\": 0,\n                \"total\": 202\n            },\n            \"Java: RemoveDuplicates.java\": {\n                \"passed\": 0,\n                \"total\": 202\n            },\n            \"Python: remove_duplicates.py\": {\n                \"passed\": 0,\n                \"total\": 202\n            }\n        },\n        \"13.05 Smallest nonconstructible value\": {\n            \"C++: smallest_nonconstructible_value.cc\": {\n                \"passed\": 0,\n                \"total\": 308\n            },\n            \"Java: SmallestNonconstructibleValue.java\": {\n                \"passed\": 0,\n                \"total\": 308\n            },\n            \"Python: smallest_nonconstructible_value.py\": {\n                \"passed\": 0,\n                \"total\": 308\n            }\n        },\n        \"13.06 Render a calendar\": {\n            \"C++: calendar_rendering.cc\": {\n                \"passed\": 0,\n                \"total\": 97\n            },\n            \"Java: CalendarRendering.java\": {\n                \"passed\": 0,\n                \"total\": 97\n            },\n            \"Python: calendar_rendering.py\": {\n                \"passed\": 0,\n                \"total\": 97\n            }\n        },\n        \"13.07 Merging intervals\": {\n            \"C++: interval_add.cc\": {\n                \"passed\": 0,\n                \"total\": 103\n            },\n            \"Java: IntervalAdd.java\": {\n                \"passed\": 0,\n                \"total\": 103\n            },\n            \"Python: interval_add.py\": {\n                \"passed\": 0,\n                \"total\": 103\n            }\n        },\n        \"13.08 Compute the union of intervals\": {\n            \"C++: intervals_union.cc\": {\n                \"passed\": 0,\n                \"total\": 191\n            },\n            \"Java: IntervalsUnion.java\": {\n                \"passed\": 0,\n                \"total\": 191\n            },\n            \"Python: intervals_union.py\": {\n                \"passed\": 0,\n                \"total\": 191\n            }\n        },\n        \"13.09 Partitioning and sorting an array with many repeated entries\": {\n            \"C++: group_equal_entries.cc\": {\n                \"passed\": 0,\n                \"total\": 33\n            },\n            \"Java: GroupEqualEntries.java\": {\n                \"passed\": 0,\n                \"total\": 33\n            },\n            \"Python: group_equal_entries.py\": {\n                \"passed\": 0,\n                \"total\": 33\n            }\n        },\n        \"13.10 Team photo day---1\": {\n            \"C++: is_array_dominated.cc\": {\n                \"passed\": 0,\n                \"total\": 105\n            },\n            \"Java: IsArrayDominated.java\": {\n                \"passed\": 0,\n                \"total\": 105\n            },\n            \"Python: is_array_dominated.py\": {\n                \"passed\": 0,\n                \"total\": 105\n            }\n        },\n        \"13.11 Implement a fast sorting algorithm for lists\": {\n            \"C++: sort_list.cc\": {\n                \"passed\": 0,\n                \"total\": 209\n            },\n            \"Java: SortList.java\": {\n                \"passed\": 0,\n                \"total\": 209\n            },\n            \"Python: sort_list.py\": {\n                \"passed\": 0,\n                \"total\": 209\n            }\n        },\n        \"13.12 Compute a salary threshold\": {\n            \"C++: find_salary_threshold.cc\": {\n                \"passed\": 0,\n                \"total\": 1005\n            },\n            \"Java: FindSalaryThreshold.java\": {\n                \"passed\": 0,\n                \"total\": 1005\n            },\n            \"Python: find_salary_threshold.py\": {\n                \"passed\": 0,\n                \"total\": 1005\n            }\n        }\n    },\n    \"Chapter 14: Binary Search Trees\": {\n        \"14.00 Bootcamp: Binary Search Trees\": {\n            \"C++: search_in_bst.cc\": {\n                \"passed\": 0,\n                \"total\": 955\n            },\n            \"Java: SearchInBst.java\": {\n                \"passed\": 0,\n                \"total\": 955\n            },\n            \"Python: search_in_bst.py\": {\n                \"passed\": 0,\n                \"total\": 955\n            }\n        },\n        \"14.01 Test if a binary tree satisfies the BST property\": {\n            \"C++: is_tree_a_bst.cc\": {\n                \"passed\": 0,\n                \"total\": 3139\n            },\n            \"Java: IsTreeABst.java\": {\n                \"passed\": 0,\n                \"total\": 3139\n            },\n            \"Python: is_tree_a_bst.py\": {\n                \"passed\": 0,\n                \"total\": 3139\n            }\n        },\n        \"14.02 Find the first key greater than a given value in a BST\": {\n            \"C++: search_first_greater_value_in_bst.cc\": {\n                \"passed\": 0,\n                \"total\": 949\n            },\n            \"Java: SearchFirstGreaterValueInBst.java\": {\n                \"passed\": 0,\n                \"total\": 949\n            },\n            \"Python: search_first_greater_value_in_bst.py\": {\n                \"passed\": 0,\n                \"total\": 949\n            }\n        },\n        \"14.03 Find the k largest elements in a BST\": {\n            \"C++: k_largest_values_in_bst.cc\": {\n                \"passed\": 0,\n                \"total\": 949\n            },\n            \"Java: KLargestValuesInBst.java\": {\n                \"passed\": 0,\n                \"total\": 949\n            },\n            \"Python: k_largest_values_in_bst.py\": {\n                \"passed\": 0,\n                \"total\": 949\n            }\n        },\n        \"14.04 Compute the LCA in a BST\": {\n            \"C++: lowest_common_ancestor_in_bst.cc\": {\n                \"passed\": 0,\n                \"total\": 951\n            },\n            \"Java: LowestCommonAncestorInBst.java\": {\n                \"passed\": 0,\n                \"total\": 951\n            },\n            \"Python: lowest_common_ancestor_in_bst.py\": {\n                \"passed\": 0,\n                \"total\": 951\n            }\n        },\n        \"14.05 Reconstruct a BST from traversal data\": {\n            \"C++: bst_from_preorder.cc\": {\n                \"passed\": 0,\n                \"total\": 950\n            },\n            \"Java: BstFromPreorder.java\": {\n                \"passed\": 0,\n                \"total\": 950\n            },\n            \"Python: bst_from_preorder.py\": {\n                \"passed\": 0,\n                \"total\": 950\n            }\n        },\n        \"14.06 Find the closest entries in three sorted arrays\": {\n            \"C++: minimum_distance_3_sorted_arrays.cc\": {\n                \"passed\": 0,\n                \"total\": 51\n            },\n            \"Java: MinimumDistance3SortedArrays.java\": {\n                \"passed\": 0,\n                \"total\": 51\n            },\n            \"Python: minimum_distance_3_sorted_arrays.py\": {\n                \"passed\": 0,\n                \"total\": 51\n            }\n        },\n        \"14.07 Enumerate extended integers\": {\n            \"C++: a_b_sqrt2.cc\": {\n                \"passed\": 0,\n                \"total\": 13\n            },\n            \"Java: ABSqrt2.java\": {\n                \"passed\": 0,\n                \"total\": 13\n            },\n            \"Python: a_b_sqrt2.py\": {\n                \"passed\": 0,\n                \"total\": 13\n            }\n        },\n        \"14.08 Build a minimum height BST from a sorted array\": {\n            \"C++: bst_from_sorted_array.cc\": {\n                \"passed\": 0,\n                \"total\": 87\n            },\n            \"Java: BstFromSortedArray.java\": {\n                \"passed\": 0,\n                \"total\": 87\n            },\n            \"Python: bst_from_sorted_array.py\": {\n                \"passed\": 0,\n                \"total\": 87\n            }\n        },\n        \"14.09 Test if three BST nodes are totally ordered\": {\n            \"C++: descendant_and_ancestor_in_bst.cc\": {\n                \"passed\": 0,\n                \"total\": 958\n            },\n            \"Java: DescendantAndAncestorInBst.java\": {\n                \"passed\": 0,\n                \"total\": 958\n            },\n            \"Python: descendant_and_ancestor_in_bst.py\": {\n                \"passed\": 0,\n                \"total\": 958\n            }\n        },\n        \"14.10 The range lookup problem\": {\n            \"C++: range_lookup_in_bst.cc\": {\n                \"passed\": 0,\n                \"total\": 954\n            },\n            \"Java: RangeLookupInBst.java\": {\n                \"passed\": 0,\n                \"total\": 954\n            },\n            \"Python: range_lookup_in_bst.py\": {\n                \"passed\": 0,\n                \"total\": 954\n            }\n        },\n        \"14.11 Add credits\": {\n            \"C++: adding_credits.cc\": {\n                \"passed\": 0,\n                \"total\": 201\n            },\n            \"Java: AddingCredits.java\": {\n                \"passed\": 0,\n                \"total\": 201\n            },\n            \"Python: adding_credits.py\": {\n                \"passed\": 0,\n                \"total\": 201\n            }\n        }\n    },\n    \"Chapter 15: Recursion\": {\n        \"15.00 Bootcamp: Recursion\": {\n            \"C++: euclidean_gcd.cc\": {\n                \"passed\": 0,\n                \"total\": 10034\n            },\n            \"Java: EuclideanGcd.java\": {\n                \"passed\": 0,\n                \"total\": 10034\n            },\n            \"Python: euclidean_gcd.py\": {\n                \"passed\": 0,\n                \"total\": 10034\n            }\n        },\n        \"15.01 The Towers of Hanoi problem\": {\n            \"C++: hanoi.cc\": {\n                \"passed\": 0,\n                \"total\": 10\n            },\n            \"Java: Hanoi.java\": {\n                \"passed\": 0,\n                \"total\": 10\n            },\n            \"Python: hanoi.py\": {\n                \"passed\": 0,\n                \"total\": 10\n            }\n        },\n        \"15.02 Compute all mnemonics for a phone number\": {\n            \"C++: phone_number_mnemonic.cc\": {\n                \"passed\": 0,\n                \"total\": 102\n            },\n            \"Java: PhoneNumberMnemonic.java\": {\n                \"passed\": 0,\n                \"total\": 102\n            },\n            \"Python: phone_number_mnemonic.py\": {\n                \"passed\": 0,\n                \"total\": 102\n            }\n        },\n        \"15.03 Generate all nonattacking placements of n-Queens\": {\n            \"C++: n_queens.cc\": {\n                \"passed\": 0,\n                \"total\": 10\n            },\n            \"Java: NQueens.java\": {\n                \"passed\": 0,\n                \"total\": 10\n            },\n            \"Python: n_queens.py\": {\n                \"passed\": 0,\n                \"total\": 10\n            }\n        },\n        \"15.04 Generate permutations\": {\n            \"C++: permutations.cc\": {\n                \"passed\": 0,\n                \"total\": 8\n            },\n            \"Java: Permutations.java\": {\n                \"passed\": 0,\n                \"total\": 8\n            },\n            \"Python: permutations.py\": {\n                \"passed\": 0,\n                \"total\": 8\n            }\n        },\n        \"15.05 Generate the power set\": {\n            \"C++: power_set.cc\": {\n                \"passed\": 0,\n                \"total\": 15\n            },\n            \"Java: PowerSet.java\": {\n                \"passed\": 0,\n                \"total\": 15\n            },\n            \"Python: power_set.py\": {\n                \"passed\": 0,\n                \"total\": 15\n            }\n        },\n        \"15.06 Generate all subsets of size k\": {\n            \"C++: combinations.cc\": {\n                \"passed\": 0,\n                \"total\": 120\n            },\n            \"Java: Combinations.java\": {\n                \"passed\": 0,\n                \"total\": 120\n            },\n            \"Python: combinations.py\": {\n                \"passed\": 0,\n                \"total\": 120\n            }\n        },\n        \"15.07 Generate strings of matched parens\": {\n            \"C++: enumerate_balanced_parentheses.cc\": {\n                \"passed\": 0,\n                \"total\": 11\n            },\n            \"Java: EnumerateBalancedParentheses.java\": {\n                \"passed\": 0,\n                \"total\": 11\n            },\n            \"Python: enumerate_balanced_parentheses.py\": {\n                \"passed\": 0,\n                \"total\": 11\n            }\n        },\n        \"15.08 Generate palindromic decompositions\": {\n            \"C++: enumerate_palindromic_decompositions.cc\": {\n                \"passed\": 0,\n                \"total\": 522\n            },\n            \"Java: EnumeratePalindromicDecompositions.java\": {\n                \"passed\": 0,\n                \"total\": 522\n            },\n            \"Python: enumerate_palindromic_decompositions.py\": {\n                \"passed\": 0,\n                \"total\": 522\n            }\n        },\n        \"15.09 Generate binary trees\": {\n            \"C++: enumerate_trees.cc\": {\n                \"passed\": 0,\n                \"total\": 10\n            },\n            \"Java: EnumerateTrees.java\": {\n                \"passed\": 0,\n                \"total\": 10\n            },\n            \"Python: enumerate_trees.py\": {\n                \"passed\": 0,\n                \"total\": 10\n            }\n        },\n        \"15.10 Implement a Sudoku solver\": {\n            \"C++: sudoku_solve.cc\": {\n                \"passed\": 0,\n                \"total\": 400\n            },\n            \"Java: SudokuSolve.java\": {\n                \"passed\": 0,\n                \"total\": 400\n            },\n            \"Python: sudoku_solve.py\": {\n                \"passed\": 0,\n                \"total\": 400\n            }\n        },\n        \"15.11 Compute a Gray code\": {\n            \"C++: gray_code.cc\": {\n                \"passed\": 0,\n                \"total\": 10\n            },\n            \"Java: GrayCode.java\": {\n                \"passed\": 0,\n                \"total\": 10\n            },\n            \"Python: gray_code.py\": {\n                \"passed\": 0,\n                \"total\": 10\n            }\n        }\n    },\n    \"Chapter 16: Dynamic Programming\": {\n        \"16.00 Bootcamp: Dynamic Programming\": {\n            \"C++: fibonacci.cc\": {\n                \"passed\": 0,\n                \"total\": 46\n            },\n            \"C++: max_sum_subarray.cc\": {\n                \"passed\": 0,\n                \"total\": 1001\n            },\n            \"Java: Fibonacci.java\": {\n                \"passed\": 0,\n                \"total\": 46\n            },\n            \"Java: MaxSumSubarray.java\": {\n                \"passed\": 0,\n                \"total\": 1001\n            },\n            \"Python: fibonacci.py\": {\n                \"passed\": 0,\n                \"total\": 46\n            },\n            \"Python: max_sum_subarray.py\": {\n                \"passed\": 0,\n                \"total\": 1001\n            }\n        },\n        \"16.01 Count the number of score combinations\": {\n            \"C++: number_of_score_combinations.cc\": {\n                \"passed\": 0,\n                \"total\": 1003\n            },\n            \"Java: NumberOfScoreCombinations.java\": {\n                \"passed\": 0,\n                \"total\": 1003\n            },\n            \"Python: number_of_score_combinations.py\": {\n                \"passed\": 0,\n                \"total\": 1003\n            }\n        },\n        \"16.02 Compute the Levenshtein distance\": {\n            \"C++: levenshtein_distance.cc\": {\n                \"passed\": 0,\n                \"total\": 100\n            },\n            \"Java: LevenshteinDistance.java\": {\n                \"passed\": 0,\n                \"total\": 100\n            },\n            \"Python: levenshtein_distance.py\": {\n                \"passed\": 0,\n                \"total\": 100\n            }\n        },\n        \"16.03 Count the number of ways to traverse a 2D array\": {\n            \"C++: number_of_traversals_matrix.cc\": {\n                \"passed\": 0,\n                \"total\": 1775\n            },\n            \"Java: NumberOfTraversalsMatrix.java\": {\n                \"passed\": 0,\n                \"total\": 1775\n            },\n            \"Python: number_of_traversals_matrix.py\": {\n                \"passed\": 0,\n                \"total\": 1775\n            }\n        },\n        \"16.04 Compute the binomial coefficients\": {\n            \"C++: binomial_coefficients.cc\": {\n                \"passed\": 0,\n                \"total\": 5906\n            },\n            \"Java: BinomialCoefficients.java\": {\n                \"passed\": 0,\n                \"total\": 5906\n            },\n            \"Python: binomial_coefficients.py\": {\n                \"passed\": 0,\n                \"total\": 5906\n            }\n        },\n        \"16.05 Search for a sequence in a 2D array\": {\n            \"C++: is_string_in_matrix.cc\": {\n                \"passed\": 0,\n                \"total\": 186\n            },\n            \"Java: IsStringInMatrix.java\": {\n                \"passed\": 0,\n                \"total\": 186\n            },\n            \"Python: is_string_in_matrix.py\": {\n                \"passed\": 0,\n                \"total\": 186\n            }\n        },\n        \"16.06 The knapsack problem\": {\n            \"C++: knapsack.cc\": {\n                \"passed\": 0,\n                \"total\": 100\n            },\n            \"Java: Knapsack.java\": {\n                \"passed\": 0,\n                \"total\": 100\n            },\n            \"Python: knapsack.py\": {\n                \"passed\": 0,\n                \"total\": 100\n            }\n        },\n        \"16.07 Building a search index for domains\": {\n            \"C++: is_string_decomposable_into_words.cc\": {\n                \"passed\": 0,\n                \"total\": 41\n            },\n            \"Java: IsStringDecomposableIntoWords.java\": {\n                \"passed\": 0,\n                \"total\": 41\n            },\n            \"Python: is_string_decomposable_into_words.py\": {\n                \"passed\": 0,\n                \"total\": 41\n            }\n        },\n        \"16.08 Find the minimum weight path in a triangle\": {\n            \"C++: minimum_weight_path_in_a_triangle.cc\": {\n                \"passed\": 0,\n                \"total\": 101\n            },\n            \"Java: MinimumWeightPathInATriangle.java\": {\n                \"passed\": 0,\n                \"total\": 101\n            },\n            \"Python: minimum_weight_path_in_a_triangle.py\": {\n                \"passed\": 0,\n                \"total\": 101\n            }\n        },\n        \"16.09 Pick up coins for maximum gain\": {\n            \"C++: picking_up_coins.cc\": {\n                \"passed\": 0,\n                \"total\": 162\n            },\n            \"Java: PickingUpCoins.java\": {\n                \"passed\": 0,\n                \"total\": 162\n            },\n            \"Python: picking_up_coins.py\": {\n                \"passed\": 0,\n                \"total\": 162\n            }\n        },\n        \"16.10 Count the number of moves to climb stairs\": {\n            \"C++: number_of_traversals_staircase.cc\": {\n                \"passed\": 0,\n                \"total\": 546\n            },\n            \"Java: NumberOfTraversalsStaircase.java\": {\n                \"passed\": 0,\n                \"total\": 546\n            },\n            \"Python: number_of_traversals_staircase.py\": {\n                \"passed\": 0,\n                \"total\": 546\n            }\n        },\n        \"16.11 The pretty printing problem\": {\n            \"C++: pretty_printing.cc\": {\n                \"passed\": 0,\n                \"total\": 102\n            },\n            \"Java: PrettyPrinting.java\": {\n                \"passed\": 0,\n                \"total\": 102\n            },\n            \"Python: pretty_printing.py\": {\n                \"passed\": 0,\n                \"total\": 102\n            }\n        },\n        \"16.12 Find the longest nondecreasing subsequence\": {\n            \"C++: longest_nondecreasing_subsequence.cc\": {\n                \"passed\": 0,\n                \"total\": 200\n            },\n            \"Java: LongestNondecreasingSubsequence.java\": {\n                \"passed\": 0,\n                \"total\": 200\n            },\n            \"Python: longest_nondecreasing_subsequence.py\": {\n                \"passed\": 0,\n                \"total\": 200\n            }\n        }\n    },\n    \"Chapter 17: Greedy Algorithms and Invariants\": {\n        \"17.00 Bootcamp: Greedy Algorithms and Invariants\": {\n            \"C++: making_change.cc\": {\n                \"passed\": 0,\n                \"total\": 49999\n            },\n            \"Java: MakingChange.java\": {\n                \"passed\": 0,\n                \"total\": 49999\n            },\n            \"Python: making_change.py\": {\n                \"passed\": 0,\n                \"total\": 49999\n            }\n        },\n        \"17.01 Compute an optimum assignment of tasks\": {\n            \"C++: task_pairing.cc\": {\n                \"passed\": 0,\n                \"total\": 500\n            },\n            \"Java: TaskPairing.java\": {\n                \"passed\": 0,\n                \"total\": 500\n            },\n            \"Python: task_pairing.py\": {\n                \"passed\": 0,\n                \"total\": 500\n            }\n        },\n        \"17.02 Schedule to minimize waiting time\": {\n            \"C++: minimum_waiting_time.cc\": {\n                \"passed\": 0,\n                \"total\": 501\n            },\n            \"Java: MinimumWaitingTime.java\": {\n                \"passed\": 0,\n                \"total\": 501\n            },\n            \"Python: minimum_waiting_time.py\": {\n                \"passed\": 0,\n                \"total\": 501\n            }\n        },\n        \"17.03 The interval covering problem\": {\n            \"C++: minimum_points_covering_intervals.cc\": {\n                \"passed\": 0,\n                \"total\": 103\n            },\n            \"C++: two_sum.cc\": {\n                \"passed\": 0,\n                \"total\": 1005\n            },\n            \"Java: MinimumPointsCoveringIntervals.java\": {\n                \"passed\": 0,\n                \"total\": 103\n            },\n            \"Java: TwoSum.java\": {\n                \"passed\": 0,\n                \"total\": 1005\n            },\n            \"Python: minimum_points_covering_intervals.py\": {\n                \"passed\": 0,\n                \"total\": 103\n            },\n            \"Python: two_sum.py\": {\n                \"passed\": 0,\n                \"total\": 1005\n            }\n        },\n        \"17.04 The 3-sum problem\": {\n            \"C++: three_sum.cc\": {\n                \"passed\": 0,\n                \"total\": 1008\n            },\n            \"Java: ThreeSum.java\": {\n                \"passed\": 0,\n                \"total\": 1008\n            },\n            \"Python: three_sum.py\": {\n                \"passed\": 0,\n                \"total\": 1008\n            }\n        },\n        \"17.05 Find the majority element\": {\n            \"C++: majority_element.cc\": {\n                \"passed\": 0,\n                \"total\": 201\n            },\n            \"Java: MajorityElement.java\": {\n                \"passed\": 0,\n                \"total\": 201\n            },\n            \"Python: majority_element.py\": {\n                \"passed\": 0,\n                \"total\": 201\n            }\n        },\n        \"17.06 The gasup problem\": {\n            \"C++: refueling_schedule.cc\": {\n                \"passed\": 0,\n                \"total\": 202\n            },\n            \"Java: RefuelingSchedule.java\": {\n                \"passed\": 0,\n                \"total\": 202\n            },\n            \"Python: refueling_schedule.py\": {\n                \"passed\": 0,\n                \"total\": 202\n            }\n        },\n        \"17.07 Compute the maximum water trapped by a pair of vertical lines\": {\n            \"C++: max_trapped_water.cc\": {\n                \"passed\": 0,\n                \"total\": 204\n            },\n            \"Java: MaxTrappedWater.java\": {\n                \"passed\": 0,\n                \"total\": 204\n            },\n            \"Python: max_trapped_water.py\": {\n                \"passed\": 0,\n                \"total\": 204\n            }\n        },\n        \"17.08 Compute the largest rectangle under the skyline\": {\n            \"C++: largest_rectangle_under_skyline.cc\": {\n                \"passed\": 0,\n                \"total\": 1004\n            },\n            \"Java: LargestRectangleUnderSkyline.java\": {\n                \"passed\": 0,\n                \"total\": 1004\n            },\n            \"Python: largest_rectangle_under_skyline.py\": {\n                \"passed\": 0,\n                \"total\": 1004\n            }\n        }\n    },\n    \"Chapter 18: Graphs\": {\n        \"18.01 Search a maze\": {\n            \"C++: search_maze.cc\": {\n                \"passed\": 0,\n                \"total\": 101\n            },\n            \"Java: SearchMaze.java\": {\n                \"passed\": 0,\n                \"total\": 101\n            },\n            \"Python: search_maze.py\": {\n                \"passed\": 0,\n                \"total\": 101\n            }\n        },\n        \"18.02 Paint a Boolean matrix\": {\n            \"C++: matrix_connected_regions.cc\": {\n                \"passed\": 0,\n                \"total\": 50\n            },\n            \"Java: MatrixConnectedRegions.java\": {\n                \"passed\": 0,\n                \"total\": 50\n            },\n            \"Python: matrix_connected_regions.py\": {\n                \"passed\": 0,\n                \"total\": 50\n            }\n        },\n        \"18.03 Compute enclosed regions\": {\n            \"C++: matrix_enclosed_regions.cc\": {\n                \"passed\": 0,\n                \"total\": 51\n            },\n            \"Java: MatrixEnclosedRegions.java\": {\n                \"passed\": 0,\n                \"total\": 51\n            },\n            \"Python: matrix_enclosed_regions.py\": {\n                \"passed\": 0,\n                \"total\": 51\n            }\n        },\n        \"18.04 Deadlock detection\": {\n            \"C++: deadlock_detection.cc\": {\n                \"passed\": 0,\n                \"total\": 71\n            },\n            \"Java: DeadlockDetection.java\": {\n                \"passed\": 0,\n                \"total\": 71\n            },\n            \"Python: deadlock_detection.py\": {\n                \"passed\": 0,\n                \"total\": 71\n            }\n        },\n        \"18.05 Clone a graph\": {\n            \"C++: graph_clone.cc\": {\n                \"passed\": 0,\n                \"total\": 91\n            },\n            \"Java: GraphClone.java\": {\n                \"passed\": 0,\n                \"total\": 91\n            },\n            \"Python: graph_clone.py\": {\n                \"passed\": 0,\n                \"total\": 91\n            }\n        },\n        \"18.06 Making wired connections\": {\n            \"C++: is_circuit_wirable.cc\": {\n                \"passed\": 0,\n                \"total\": 85\n            },\n            \"Java: IsCircuitWirable.java\": {\n                \"passed\": 0,\n                \"total\": 85\n            },\n            \"Python: is_circuit_wirable.py\": {\n                \"passed\": 0,\n                \"total\": 85\n            }\n        },\n        \"18.07 Transform one string to another\": {\n            \"C++: string_transformability.cc\": {\n                \"passed\": 0,\n                \"total\": 48\n            },\n            \"Java: StringTransformability.java\": {\n                \"passed\": 0,\n                \"total\": 48\n            },\n            \"Python: string_transformability.py\": {\n                \"passed\": 0,\n                \"total\": 48\n            }\n        },\n        \"18.08 Team photo day---2\": {\n            \"C++: max_teams_in_photograph.cc\": {\n                \"passed\": 0,\n                \"total\": 69\n            },\n            \"Java: MaxTeamsInPhotograph.java\": {\n                \"passed\": 0,\n                \"total\": 69\n            },\n            \"Python: max_teams_in_photograph.py\": {\n                \"passed\": 0,\n                \"total\": 69\n            }\n        }\n    },\n    \"Chapter 24: Honors Class\": {\n        \"24.01 Compute the greatest common divisor\": {\n            \"C++: gcd.cc\": {\n                \"passed\": 0,\n                \"total\": 10034\n            },\n            \"Java: Gcd.java\": {\n                \"passed\": 0,\n                \"total\": 10034\n            },\n            \"Python: gcd.py\": {\n                \"passed\": 0,\n                \"total\": 10034\n            }\n        },\n        \"24.02 Find the first missing positive entry\": {\n            \"C++: first_missing_positive_entry.cc\": {\n                \"passed\": 0,\n                \"total\": 1001\n            },\n            \"Java: FirstMissingPositiveEntry.java\": {\n                \"passed\": 0,\n                \"total\": 1001\n            },\n            \"Python: first_missing_positive_entry.py\": {\n                \"passed\": 0,\n                \"total\": 1001\n            }\n        },\n        \"24.03 Buy and sell a stock at most k times\": {\n            \"C++: buy_and_sell_stock_k_times.cc\": {\n                \"passed\": 0,\n                \"total\": 201\n            },\n            \"Java: BuyAndSellStockKTimes.java\": {\n                \"passed\": 0,\n                \"total\": 201\n            },\n            \"Python: buy_and_sell_stock_k_times.py\": {\n                \"passed\": 0,\n                \"total\": 201\n            }\n        },\n        \"24.04 Compute the maximum product of all entries but one\": {\n            \"C++: max_product_all_but_one.cc\": {\n                \"passed\": 0,\n                \"total\": 35\n            },\n            \"Java: MaxProductAllButOne.java\": {\n                \"passed\": 0,\n                \"total\": 35\n            },\n            \"Python: max_product_all_but_one.py\": {\n                \"passed\": 0,\n                \"total\": 35\n            }\n        },\n        \"24.05 Compute the longest contiguous increasing subarray\": {\n            \"C++: longest_increasing_subarray.cc\": {\n                \"passed\": 0,\n                \"total\": 100\n            },\n            \"Java: LongestIncreasingSubarray.java\": {\n                \"passed\": 0,\n                \"total\": 100\n            },\n            \"Python: longest_increasing_subarray.py\": {\n                \"passed\": 0,\n                \"total\": 100\n            }\n        },\n        \"24.06 Rotate an array\": {\n            \"C++: rotate_array.cc\": {\n                \"passed\": 0,\n                \"total\": 101\n            },\n            \"Java: RotateArray.java\": {\n                \"passed\": 0,\n                \"total\": 101\n            },\n            \"Python: rotate_array.py\": {\n                \"passed\": 0,\n                \"total\": 101\n            }\n        },\n        \"24.07 Identify positions attacked by rooks\": {\n            \"C++: rook_attack.cc\": {\n                \"passed\": 0,\n                \"total\": 201\n            },\n            \"Java: RookAttack.java\": {\n                \"passed\": 0,\n                \"total\": 201\n            },\n            \"Python: rook_attack.py\": {\n                \"passed\": 0,\n                \"total\": 201\n            }\n        },\n        \"24.08 Justify text\": {\n            \"C++: left_right_justify_text.cc\": {\n                \"passed\": 0,\n                \"total\": 30\n            },\n            \"Java: LeftRightJustifyText.java\": {\n                \"passed\": 0,\n                \"total\": 30\n            },\n            \"Python: left_right_justify_text.py\": {\n                \"passed\": 0,\n                \"total\": 30\n            }\n        },\n        \"24.09 Implement list zipping\": {\n            \"C++: zip_list.cc\": {\n                \"passed\": 0,\n                \"total\": 51\n            },\n            \"Java: ZipList.java\": {\n                \"passed\": 0,\n                \"total\": 51\n            },\n            \"Python: zip_list.py\": {\n                \"passed\": 0,\n                \"total\": 51\n            }\n        },\n        \"24.10 Copy a postings list\": {\n            \"C++: copy_posting_list.cc\": {\n                \"passed\": 0,\n                \"total\": 34\n            },\n            \"Java: CopyPostingList.java\": {\n                \"passed\": 0,\n                \"total\": 34\n            },\n            \"Python: copy_posting_list.py\": {\n                \"passed\": 0,\n                \"total\": 34\n            }\n        },\n        \"24.11 Compute the longest substring with matching parens\": {\n            \"C++: longest_substring_with_matching_parentheses.cc\": {\n                \"passed\": 0,\n                \"total\": 342\n            },\n            \"Java: LongestSubstringWithMatchingParentheses.java\": {\n                \"passed\": 0,\n                \"total\": 342\n            },\n            \"Python: longest_substring_with_matching_parentheses.py\": {\n                \"passed\": 0,\n                \"total\": 342\n            }\n        },\n        \"24.12 Compute the maximum of a sliding window\": {\n            \"C++: max_of_sliding_window.cc\": {\n                \"passed\": 0,\n                \"total\": 149\n            },\n            \"Java: MaxOfSlidingWindow.java\": {\n                \"passed\": 0,\n                \"total\": 149\n            },\n            \"Python: max_of_sliding_window.py\": {\n                \"passed\": 0,\n                \"total\": 149\n            }\n        },\n        \"24.13 Compute fair bonuses\": {\n            \"C++: bonus.cc\": {\n                \"passed\": 0,\n                \"total\": 106\n            },\n            \"Java: Bonus.java\": {\n                \"passed\": 0,\n                \"total\": 106\n            },\n            \"Python: bonus.py\": {\n                \"passed\": 0,\n                \"total\": 106\n            }\n        },\n        \"24.14 Search a sorted array of unknown length\": {\n            \"C++: search_unknown_length_array.cc\": {\n                \"passed\": 0,\n                \"total\": 206\n            },\n            \"Java: SearchUnknownLengthArray.java\": {\n                \"passed\": 0,\n                \"total\": 206\n            },\n            \"Python: search_unknown_length_array.py\": {\n                \"passed\": 0,\n                \"total\": 206\n            }\n        },\n        \"24.15 Search in two sorted arrays\": {\n            \"C++: kth_largest_element_in_two_sorted_arrays.cc\": {\n                \"passed\": 0,\n                \"total\": 201\n            },\n            \"Java: KthLargestElementInTwoSortedArrays.java\": {\n                \"passed\": 0,\n                \"total\": 201\n            },\n            \"Python: kth_largest_element_in_two_sorted_arrays.py\": {\n                \"passed\": 0,\n                \"total\": 201\n            }\n        },\n        \"24.16 Find the kth largest element---large n, small k\": {\n            \"C++: kth_largest_element_in_long_array.cc\": {\n                \"passed\": 0,\n                \"total\": 503\n            },\n            \"Java: KthLargestElementInLongArray.java\": {\n                \"passed\": 0,\n                \"total\": 503\n            },\n            \"Python: kth_largest_element_in_long_array.py\": {\n                \"passed\": 0,\n                \"total\": 503\n            }\n        },\n        \"24.17 Find an element that appears only once\": {\n            \"C++: element_appearing_once.cc\": {\n                \"passed\": 0,\n                \"total\": 102\n            },\n            \"Java: ElementAppearingOnce.java\": {\n                \"passed\": 0,\n                \"total\": 102\n            },\n            \"Python: element_appearing_once.py\": {\n                \"passed\": 0,\n                \"total\": 102\n            }\n        },\n        \"24.18 Find the line through the most points\": {\n            \"C++: line_through_most_points.cc\": {\n                \"passed\": 0,\n                \"total\": 282\n            },\n            \"Java: LineThroughMostPoints.java\": {\n                \"passed\": 0,\n                \"total\": 282\n            },\n            \"Python: line_through_most_points.py\": {\n                \"passed\": 0,\n                \"total\": 282\n            }\n        },\n        \"24.19 Convert a sorted doubly linked list into a BST\": {\n            \"C++: sorted_list_to_bst.cc\": {\n                \"passed\": 0,\n                \"total\": 100\n            },\n            \"Java: SortedListToBst.java\": {\n                \"passed\": 0,\n                \"total\": 100\n            },\n            \"Python: sorted_list_to_bst.py\": {\n                \"passed\": 0,\n                \"total\": 100\n            }\n        },\n        \"24.20 Convert a BST to a sorted doubly linked list\": {\n            \"C++: bst_to_sorted_list.cc\": {\n                \"passed\": 0,\n                \"total\": 950\n            },\n            \"Java: BstToSortedList.java\": {\n                \"passed\": 0,\n                \"total\": 950\n            },\n            \"Python: bst_to_sorted_list.py\": {\n                \"passed\": 0,\n                \"total\": 950\n            }\n        },\n        \"24.21 Merge two BSTs\": {\n            \"C++: bst_merge.cc\": {\n                \"passed\": 0,\n                \"total\": 474\n            },\n            \"Java: BstMerge.java\": {\n                \"passed\": 0,\n                \"total\": 474\n            },\n            \"Python: bst_merge.py\": {\n                \"passed\": 0,\n                \"total\": 474\n            }\n        },\n        \"24.22 Implement regular expression matching\": {\n            \"C++: regular_expression.cc\": {\n                \"passed\": 0,\n                \"total\": 1596\n            },\n            \"Java: RegularExpression.java\": {\n                \"passed\": 0,\n                \"total\": 1596\n            },\n            \"Python: regular_expression.py\": {\n                \"passed\": 0,\n                \"total\": 1596\n            }\n        },\n        \"24.23 Synthesize an expression\": {\n            \"C++: insert_operators_in_string.cc\": {\n                \"passed\": 0,\n                \"total\": 101\n            },\n            \"Java: InsertOperatorsInString.java\": {\n                \"passed\": 0,\n                \"total\": 101\n            },\n            \"Python: insert_operators_in_string.py\": {\n                \"passed\": 0,\n                \"total\": 101\n            }\n        },\n        \"24.24 Count inversions\": {\n            \"C++: count_inversions.cc\": {\n                \"passed\": 0,\n                \"total\": 1001\n            },\n            \"Java: CountInversions.java\": {\n                \"passed\": 0,\n                \"total\": 1001\n            },\n            \"Python: count_inversions.py\": {\n                \"passed\": 0,\n                \"total\": 1001\n            }\n        },\n        \"24.25 Draw the skyline\": {\n            \"C++: drawing_skyline.cc\": {\n                \"passed\": 0,\n                \"total\": 30\n            },\n            \"Java: DrawingSkyline.java\": {\n                \"passed\": 0,\n                \"total\": 30\n            },\n            \"Python: drawing_skyline.py\": {\n                \"passed\": 0,\n                \"total\": 30\n            }\n        },\n        \"24.26 Measure with defective jugs\": {\n            \"C++: defective_jugs.cc\": {\n                \"passed\": 0,\n                \"total\": 200\n            },\n            \"Java: DefectiveJugs.java\": {\n                \"passed\": 0,\n                \"total\": 200\n            },\n            \"Python: defective_jugs.py\": {\n                \"passed\": 0,\n                \"total\": 200\n            }\n        },\n        \"24.27 Compute the maximum subarray sum in a circular array\": {\n            \"C++: maximum_subarray_in_circular_array.cc\": {\n                \"passed\": 0,\n                \"total\": 501\n            },\n            \"Java: MaximumSubarrayInCircularArray.java\": {\n                \"passed\": 0,\n                \"total\": 501\n            },\n            \"Python: maximum_subarray_in_circular_array.py\": {\n                \"passed\": 0,\n                \"total\": 501\n            }\n        },\n        \"24.28 Determine the critical height\": {\n            \"C++: max_safe_height.cc\": {\n                \"passed\": 0,\n                \"total\": 3829\n            },\n            \"Java: MaxSafeHeight.java\": {\n                \"passed\": 0,\n                \"total\": 3829\n            },\n            \"Python: max_safe_height.py\": {\n                \"passed\": 0,\n                \"total\": 3829\n            }\n        },\n        \"24.29 Find the maximum 2D subarray\": {\n            \"C++: max_square_submatrix.cc\": {\n                \"passed\": 0,\n                \"total\": 101\n            },\n            \"C++: max_submatrix.cc\": {\n                \"passed\": 0,\n                \"total\": 100\n            },\n            \"Java: MaxSquareSubmatrix.java\": {\n                \"passed\": 0,\n                \"total\": 101\n            },\n            \"Java: MaxSubmatrix.java\": {\n                \"passed\": 0,\n                \"total\": 100\n            },\n            \"Python: max_square_submatrix.py\": {\n                \"passed\": 0,\n                \"total\": 101\n            },\n            \"Python: max_submatrix.py\": {\n                \"passed\": 0,\n                \"total\": 100\n            }\n        },\n        \"24.30 Implement Huffman coding\": {\n            \"C++: huffman_coding.cc\": {\n                \"passed\": 0,\n                \"total\": 11\n            },\n            \"Java: HuffmanCoding.java\": {\n                \"passed\": 0,\n                \"total\": 11\n            },\n            \"Python: huffman_coding.py\": {\n                \"passed\": 0,\n                \"total\": 11\n            }\n        },\n        \"24.31 Trapping water\": {\n            \"C++: max_water_trappable.cc\": {\n                \"passed\": 0,\n                \"total\": 1001\n            },\n            \"Java: MaxWaterTrappable.java\": {\n                \"passed\": 0,\n                \"total\": 1001\n            },\n            \"Python: max_water_trappable.py\": {\n                \"passed\": 0,\n                \"total\": 1001\n            }\n        },\n        \"24.32 The heavy hitter problem\": {\n            \"C++: search_frequent_items.cc\": {\n                \"passed\": 0,\n                \"total\": 265\n            },\n            \"Java: SearchFrequentItems.java\": {\n                \"passed\": 0,\n                \"total\": 265\n            },\n            \"Python: search_frequent_items.py\": {\n                \"passed\": 0,\n                \"total\": 265\n            }\n        },\n        \"24.33 Find the longest subarray with sum constraint\": {\n            \"C++: longest_subarray_with_sum_constraint.cc\": {\n                \"passed\": 0,\n                \"total\": 102\n            },\n            \"Java: LongestSubarrayWithSumConstraint.java\": {\n                \"passed\": 0,\n                \"total\": 102\n            },\n            \"Python: longest_subarray_with_sum_constraint.py\": {\n                \"passed\": 0,\n                \"total\": 102\n            }\n        },\n        \"24.34 Road network\": {\n            \"C++: road_network.cc\": {\n                \"passed\": 0,\n                \"total\": 50\n            },\n            \"Java: RoadNetwork.java\": {\n                \"passed\": 0,\n                \"total\": 50\n            },\n            \"Python: road_network.py\": {\n                \"passed\": 0,\n                \"total\": 50\n            }\n        },\n        \"24.35 Test if arbitrage is possible\": {\n            \"C++: arbitrage.cc\": {\n                \"passed\": 0,\n                \"total\": 201\n            },\n            \"Java: Arbitrage.java\": {\n                \"passed\": 0,\n                \"total\": 201\n            },\n            \"Python: arbitrage.py\": {\n                \"passed\": 0,\n                \"total\": 201\n            }\n        }\n    }\n};"
        },
        {
          "name": "test_data",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}