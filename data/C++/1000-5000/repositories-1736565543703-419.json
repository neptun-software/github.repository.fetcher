{
  "metadata": {
    "timestamp": 1736565543703,
    "page": 419,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "iree-org/iree",
      "stars": 2924,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".bazel_to_cmake.cfg.py",
          "type": "blob",
          "size": 1.90234375,
          "content": "# Copyright 2020 The IREE Authors\n#\n# Licensed under the Apache License v2.0 with LLVM Exceptions.\n# See https://llvm.org/LICENSE.txt for license information.\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\nimport bazel_to_cmake_converter\nimport bazel_to_cmake_targets\n\nDEFAULT_ROOT_DIRS = [\"compiler\", \"runtime\", \"samples\", \"tests\", \"tools\"]\n\nREPO_MAP = {\n    # Since this is the @iree_core repo, map to empty since all internal\n    # targets are of the form \"//compiler\", not \"@iree_core//compiler\".\n    \"@iree_core\": \"\",\n}\n\n\nclass CustomBuildFileFunctions(bazel_to_cmake_converter.BuildFileFunctions):\n    def iree_compiler_cc_library(self, deps=[], **kwargs):\n        self.cc_library(deps=deps + [\"//compiler/src:defs\"], **kwargs)\n\n    def iree_runtime_cc_library(self, deps=[], **kwargs):\n        self.cc_library(deps=deps + [\"//runtime/src:runtime_defines\"], **kwargs)\n\n    def iree_runtime_cc_test(self, deps=[], **kwargs):\n        self.cc_test(deps=deps + [\"//runtime/src:runtime_defines\"], **kwargs)\n\n    def iree_compiler_cc_test(self, deps=[], **kwargs):\n        self.cc_test(deps=deps + [\"//compiler/src:defs\"], **kwargs)\n\n    def iree_runtime_cc_binary(self, deps=[], **kwargs):\n        self.cc_binary(deps=deps + [\"//runtime/src:runtime_defines\"], **kwargs)\n\n    def iree_compiler_cc_binary(self, deps=[], **kwargs):\n        self.cc_binary(deps=deps + [\"//compiler/src:defs\"], **kwargs)\n\n\nclass CustomTargetConverter(bazel_to_cmake_targets.TargetConverter):\n    def _initialize(self):\n        self._update_target_mappings(\n            {\n                \"//compiler/src:defs\": [],\n                \"//runtime/src:runtime_defines\": [],\n            }\n        )\n\n    def _convert_unmatched_target(self, target: str) -> str:\n        \"\"\"Converts unmatched targets in a repo specific way.\"\"\"\n        # Default rewrite: prefix with \"iree::\", without pruning the path.\n        return [\"iree::\" + self._convert_to_cmake_path(target)]\n"
        },
        {
          "name": ".bazelignore",
          "type": "blob",
          "size": 0.59375,
          "content": "# Copyright 2019 The IREE Authors\n#\n# Licensed under the Apache License v2.0 with LLVM Exceptions.\n# See https://llvm.org/LICENSE.txt for license information.\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n# Ignore 'experimental' folders. These builds are not regularly maintained.\n# If you wish to build/run a target under experimental/, you must remove this\n# line from this file.\nexperimental\n\n# Ignore third_party directories which contain BUILD files so that recursive\n# from root works.\nthird_party\n\n# Ignore the bazel directories when this directory is used as a local repository.\nbazel-*\n"
        },
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 0.7607421875,
          "content": "# Copyright 2019 The IREE Authors\n#\n# Licensed under the Apache License v2.0 with LLVM Exceptions.\n# See https://llvm.org/LICENSE.txt for license information.\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n# Import the main bazelrc config. This is in a separate file so that it's\n# possible to turn off some or all user and system bazelrc options by specifying\n# `--nosystem_rc --nohome_rc --noworkspace_rc --bazelrc=build_tools/bazel/iree.bazelrc`\nimport %workspace%/build_tools/bazel/iree.bazelrc\n\n# Run the configure_bazel.py script to generate.\nimport %workspace%/configured.bazelrc\n\n# The user.bazelrc file is not checked in but available for local mods.\n# Always keep this at the end of the file so that user flags override.\ntry-import %workspace%/user.bazelrc\n"
        },
        {
          "name": ".bazelversion",
          "type": "blob",
          "size": 0.005859375,
          "content": "7.3.1\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.388671875,
          "content": "# Copyright 2019 The IREE Authors\n#\n# Licensed under the Apache License v2.0 with LLVM Exceptions.\n# See https://llvm.org/LICENSE.txt for license information.\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n# IREE's runtime follows Google style while its compiler follows the\n# LLVM/MLIR variable naming and formatting style.\nBasedOnStyle: Google\n\n---\nLanguage: Json\nDisableFormat: true\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.53125,
          "content": "# This file contains the list of commits to exclude from 'git blame'.\n# Such commits do not meaningfully contribute to git history, and include\n# large-scale mechanical changes like code formatting style changes.\n#\n# To set this file as the default ignore file for 'git blame', run:\n# ```shell\n#   git config blame.ignoreRevsFile .git-blame-ignore-revs\n# ```\n\n# Use Black to format Python files (#14161)\nbe24f0258a520a48555c9baec9d2f737ba1c2ca0\n\n# Switch compiler to LLVM/MLIR formatting style (#14181)\n3b652d46e86cd82cc81922a964327b12dc914428\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.5234375,
          "content": "# See https://github.com/bazelbuild/buildtools/issues/914.\n# The buildifier tool used to format Bazel files decided that, despite claiming\n# to support Windows, it should convert line endings from \\r\\n to \\n.\n# This conflicts with the `git config core.autocrlf` setting so unfortunate\n# users such as us are thus forced to either:\n#   * get trivial line ending diffs on every change to a file\n#   * constantly run `git add . --renormalize`\n#   * override the git setting here\n*.bazel text eol=lf\n*.bzl text eol=lf\nWORKSPACE text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.232421875,
          "content": "# Python\n.env\n*.pyc\n**/.ipynb_checkpoints/\n.pytype/\n**/__pycache__/**\n\n# Visual Studio files\n.vs/\n.vscode/\n*.sdf\n*.opensdf\n*.VC.opendb\n*.suo\n*.user\n*.code-workspace\n\n# macOS files\n.DS_Store\n\n# CMake artifacts\nbuild/\nbuild-*/\nTesting/\n# Include iree.build package\n!compiler/bindings/python/iree/compiler/build/\n\n# Bazel artifacts\n**/bazel-*\nMODULE.bazel\nMODULE.bazel.lock\n\n# Executables\n*.exe\n*.out\n\n# Local-only config options\nconfigured.bazelrc\nuser.bazelrc\nversion_info.json\nversion_local.json\nCMakeUserPresets.json\n\n# Dear ImGui Ini files\nimgui.ini\n\n# Emacs autosaves\n*~\n\\#*\\#\n\n# Vim swap files\n[._]*.sw[a-p]\n\n# Source indexing files\ncompile_commands.json\n.cache/clangd\n\n# Language server configuration files\n.clangd\n\n# Pyenv files\n.python-version\n*.venv\n.venv\n\n# Python deployment artifacts\n*.whl\n*.egg-info\n\n# Android Studio / Gradle files\n.cxx\n.gradle\ngradlew\ngradlew.bat\ngradle/\nlocal.properties\n\n# Generated documentation files\nmkdocs/site/\ndocs/website/site/\n\n# Temporary files\niree/builtins/**/bin/*.ll\nartifacts/\n\n# Archive files\n*.tar\n*.tar.*\n\n# VS Code DevContainer\n.devcontainer/docker-compose.yml\n\n# Local cache files\nllvm-external-projects/iree-dialects/.cache\n\n# pkgci artifacts\nartifacts/\n\n# Side effects of local patching/merging\n*.orig\n*.rej\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.6337890625,
          "content": "[submodule \"third_party/googletest\"]\n\tpath = third_party/googletest\n\turl = https://github.com/google/googletest.git\n[submodule \"third_party/llvm-project\"]\n\tpath = third_party/llvm-project\n\turl = https://github.com/iree-org/llvm-project.git\n[submodule \"third_party/vulkan_headers\"]\n\tpath = third_party/vulkan_headers\n\turl = https://github.com/KhronosGroup/Vulkan-Headers.git\n[submodule \"third_party/benchmark\"]\n\tpath = third_party/benchmark\n\turl = https://github.com/google/benchmark.git\n[submodule \"third_party/tracy\"]\n\tpath = third_party/tracy\n\turl = https://github.com/wolfpld/tracy.git\n[submodule \"third_party/flatcc\"]\n\tpath = third_party/flatcc\n\turl = https://github.com/dvidelabs/flatcc.git\n[submodule \"third_party/spirv_cross\"]\n\tpath = third_party/spirv_cross\n\turl = https://github.com/KhronosGroup/SPIRV-Cross.git\n[submodule \"third_party/cpuinfo\"]\n\tpath = third_party/cpuinfo\n\turl = https://github.com/pytorch/cpuinfo.git\n[submodule \"third_party/webgpu-headers\"]\n\tpath = third_party/webgpu-headers\n\turl = https://github.com/webgpu-native/webgpu-headers.git\n[submodule \"third_party/musl\"]\n\tpath = third_party/musl\n\turl = https://github.com/powderluv/musl.git\n[submodule \"third_party/stablehlo\"]\n\tpath = third_party/stablehlo\n\turl = https://github.com/iree-org/stablehlo.git\n[submodule \"third_party/torch-mlir\"]\n\tpath = third_party/torch-mlir\n\turl = https://github.com/iree-org/torch-mlir.git\n[submodule \"third_party/hip-build-deps\"]\n\tpath = third_party/hip-build-deps\n\turl = https://github.com/iree-org/hip-build-deps.git\n[submodule \"third_party/hsa-runtime-headers\"]\n\tpath = third_party/hsa-runtime-headers\n\turl = https://github.com/iree-org/hsa-runtime-headers.git\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 4.626953125,
          "content": "# Pre-commit (https://pre-commit.com) configuration for assorted lint checks.\n#\n# See https://pre-commit.com/hooks.html for more hooks.\n\nexclude: \"third_party/\"\n\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v3.2.0\n    hooks:\n      - id: check-merge-conflict\n\n      - id: check-yaml\n        # * Extensions can't be included in the mkdocs schema, so skip checking\n        #   https://github.com/squidfunk/mkdocs-material/issues/6378\n        # * clang-format files use `---` to split for multiple languages,\n        #   resulting in errors like `expected a single document in the stream`\n        exclude: \"mkdocs.yml|.clang-format\"\n\n      - id: end-of-file-fixer\n        exclude_types: [\"image\", \"jupyter\"]\n\n      - id: trailing-whitespace\n        exclude_types: [\"image\", \"jupyter\"]\n\n  - repo: https://github.com/psf/black\n    rev: 23.3.0\n    hooks:\n      - id: black\n        name: Run Black to format Python files\n\n  - repo: https://github.com/pre-commit/mirrors-clang-format\n    # Loosely track the most recent versions in\n    #   * Runner images: https://github.com/actions/runner-images/\n    #   * Editor extensions: https://github.com/microsoft/vscode-cpptools\n    rev: v18.1.3\n    hooks:\n      - id: clang-format\n        name: Run clang-format on C/C++/etc. files\n        exclude_types: [\"jupyter\"]\n\n  - repo: https://github.com/igorshubovych/markdownlint-cli\n    rev: v0.41.0\n    hooks:\n      - id: markdownlint\n        name: Run markdownlint on .md files\n        args: [\"--config\", \"docs/.markdownlint.yml\"]\n        files: \"docs/website/.*.md\"\n        exclude: \"mlir-dialects/!(index).md\"\n\n  - repo: https://github.com/Lucas-C/pre-commit-hooks\n    rev: v1.5.5\n    hooks:\n      - id: forbid-tabs\n        exclude: \".gitmodules|Makefile\"\n\n  - repo: https://github.com/jlebar/pre-commit-hooks.git\n    rev: f2d115a052860b09b2888b4f104be614bf3b4779\n    hooks:\n      - id: do-not-submit\n\n  - repo: local\n    hooks:\n      - id: buildifier\n        name: Run buildifier\n        entry: buildifier\n        language: golang\n        # Pinned to v7.1.2, but of course we can't use a tag because semver\n        # and \"go install\" just don't work together???\n        # This makes absolutely no sense and the maintainers have no intention\n        # of improving it or at least explaining it as hundreds of developers\n        # search for basic support: https://github.com/golang/go/issues/35732.\n        # Docs are technically at https://go.dev/ref/mod#go-install ¯\\_(ツ)_/¯\n        additional_dependencies:\n          [\n            \"github.com/bazelbuild/buildtools/buildifier@1429e15ae755a6762d0edf9198062dc6ed04408d\",\n          ]\n        files: '^(.*/)?(BUILD\\.bazel|BUILD|WORKSPACE|WORKSPACE\\.bazel|WORKSPACE\\.bzlmod|MODULE\\.bazel)$|\\.BUILD$|\\.bzl$'\n        # Pin the language version so other system version are _not_ used.\n        # Older go versions used different syntax for \"go install\" (which is\n        # apparently different from \"go get\" and \"go build\"), so for this to\n        # work reliably at all we need to ensure at least some minimum. Syntax\n        # probably changed again in a future version, whatever.\n        language_version: \"1.16\"\n\n      # Convert BUILD.bazel files to CMakeLists.txt files in two passes to\n      # avoid potential race conditions.\n      # Note: this passes file names to the tool. The tool can also be run\n      # manually with no arguments specified to walk directories on its own.\n      # Keep the top level directories here in sync with .bazel_to_cmake.cfg.py.\n      - id: bazel_to_cmake_1\n        name: Run bazel_to_cmake.py on BUILD.bazel files\n        language: python\n        entry: ./build_tools/bazel_to_cmake/bazel_to_cmake.py\n        files: '^(compiler|runtime|samples|tests|tools)/(.*/)?(BUILD\\.bazel)$'\n      - id: bazel_to_cmake_2\n        name: Run bazel_to_cmake.py on CMakeLists.txt files\n        language: python\n        entry: ./build_tools/bazel_to_cmake/bazel_to_cmake.py\n        files: \"^(compiler|runtime|samples|tests|tools)/(.*/)?(CMakeLists.txt)$\"\n\n      - id: check_path_lengths\n        name: Check for excessively long path lengths\n        language: fail\n        entry: Path lengths relative to the root should be < 75 characters (run ./build_tools/scripts/check_path_lengths.py for detailed output)\n        # The regex includes/excludes here should roughly match the behavior of\n        # the check_path_lengths.py script.\n        files: '^compiler/.{66,}/\\w+\\.'\n        exclude: \"test/\"\n\n      - id: build_file_names\n        name: Check Bazel file names\n        entry: Files should be named BUILD.bazel instead of BUILD\n        language: fail\n        files: \"BUILD$\"\n\n    # TODO(scotttodd): mypy type checking for Python (https://mypy-lang.org/)\n"
        },
        {
          "name": ".yamllint.yml",
          "type": "blob",
          "size": 0.7900390625,
          "content": "# Copyright 2020 The IREE Authors\n#\n# Licensed under the Apache License v2.0 with LLVM Exceptions.\n# See https://llvm.org/LICENSE.txt for license information.\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\nextends: default\n\nrules:\n  # These do not appear to be conventional in GitHub actions.\n  document-end:\n    present: false\n  document-start:\n    present: false\n  # GitHub actions use \"on\" for triggers.\n  truthy: disable\n  # We have lots of long strings and command lines.\n  line-length: disable\n  comments:\n    # Formatters may do this (e.g. Prettier does) and it seems like the most\n    # trivial thing to get a failing check for.\n    min-spaces-from-content: 1\n  # This is not a useful check, especially when disabling entire blocks.\n  comments-indentation: disable\n\nignore: /third_party/*\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.6181640625,
          "content": "# This is the list of IREE's significant contributors.\n#\n# This does not necessarily list everyone who has contributed code, especially\n# since many employees of one corporation may be contributing. To see the full\n# list of contributors, see the revision history in source control.\n#\n# Please only add individuals if they are not contributing on behalf of a\n# company (who should be listed instead). Add new entries at the bottom of the\n# file.\nGoogle LLC\nFraunhofer-Gesellschaft zur Förderung der angewandten Forschung e.V. for its Fraunhofer Institute for Material Flow and Logistics (IML)\nNod, Inc.\nAdvanced Micro Devices, Inc.\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 0.3466796875,
          "content": "# Copyright 2019 The IREE Authors\n#\n# Licensed under the Apache License v2.0 with LLVM Exceptions.\n# See https://llvm.org/LICENSE.txt for license information.\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\npackage(\n    default_visibility = [\"//visibility:public\"],\n    features = [\"layering_check\"],\n    licenses = [\"notice\"],  # Apache 2.0\n)\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.708984375,
          "content": "cff-version: 1.2.0\nmessage: \"If you want to cite IREE, feel free to use this\"\ntitle: \"IREE\"\nabstract: >-\n  An MLIR-based compiler and runtime for ML models from multiple frameworks.\ndate-released: 2019-09-18\nauthors:\n  - name: \"The IREE Authors\"\ncontact:\n  - family-names: Vanik\n    given-names: Ben\n    email: ben.vanik@gmail.com\n    affiliation: Advanced Micro Devices, Inc.\n  - family-names: Laurenzo\n    given-names: Stella\n    email: stellaraccident@gmail.com\n    affiliation: Advanced Micro Devices, Inc.\nlicense: \"Apache-2.0 WITH LLVM-exception\"\nurl: \"https://iree.dev/\"\nrepository-code: \"https://github.com/iree-org/iree\"\nkeywords:\n  - compiler\n  - \"machine learning\"\n  - \"deep learning\"\n  - \"artificial intelligence\"\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 48.5966796875,
          "content": "# Copyright 2019 The IREE Authors\n#\n# Licensed under the Apache License v2.0 with LLVM Exceptions.\n# See https://llvm.org/LICENSE.txt for license information.\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\ncmake_minimum_required(VERSION 3.21...3.24)\n\n# LLVM requires CMP0116 for tblgen: https://reviews.llvm.org/D101083\n# CMP0116: Ninja generators transform `DEPFILE`s from `add_custom_command()`\n# New in CMake 3.20. https://cmake.org/cmake/help/latest/policy/CMP0116.html\nset(CMAKE_POLICY_DEFAULT_CMP0116 OLD)\nif(POLICY CMP0116)\n  cmake_policy(SET CMP0116 OLD)\nendif()\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nproject(IREE ASM C CXX)\nset(CMAKE_C_STANDARD 11)\nset(CMAKE_CXX_STANDARD 17)\n# LLVM defines this as a CACHE property and uses a policy that causes the\n# cache value to take precedence. This is causing us to mix 17/14 across\n# the boundary.\n# TODO: Remove this once the LLVM mechanism is updated. See:\n#   https://discourse.llvm.org/t/important-new-toolchain-requirements-to-build-llvm-will-most-likely-be-landing-within-a-week-prepare-your-buildbots/61447/9\nset(CMAKE_CXX_STANDARD 17 CACHE STRING \"C++ standard to conform to\" FORCE)\nset(IREE_IDE_FOLDER IREE)\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\nif(MSVC)\n  enable_language(ASM_MASM)\nelse()\n  enable_language(ASM)\nendif()\n\n# Set the default CMake build type so some of the build type dependent setting\n# in the submodules and functions (IREE assertion) can be set properly.\nset(DEFAULT_CMAKE_BUILD_TYPE \"Release\")\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  message(STATUS \"No build type selected, default to ${DEFAULT_CMAKE_BUILD_TYPE}\")\n  set(CMAKE_BUILD_TYPE \"${DEFAULT_CMAKE_BUILD_TYPE}\" CACHE STRING \"Build type (default ${DEFAULT_CMAKE_BUILD_TYPE})\" FORCE)\nendif()\n\ninclude(CMakeDependentOption)\n\n#-------------------------------------------------------------------------------\n# Project component configuration\n#-------------------------------------------------------------------------------\n\noption(IREE_ENABLE_RUNTIME_TRACING \"Enables instrumented runtime tracing.\" OFF)\noption(IREE_ENABLE_COMPILER_TRACING \"Enables instrumented compiler tracing.\" OFF)\noption(IREE_ENABLE_RENDERDOC_PROFILING \"Enables profiling HAL devices with the RenderDoc tool.\" OFF)\noption(IREE_ENABLE_THREADING \"Builds IREE in with thread library support.\" ON)\noption(IREE_ENABLE_CLANG_TIDY \"Builds IREE in with clang tidy enabled on IREE's libraries.\" OFF)\n\nset(IREE_TRACING_PROVIDER_DEFAULT \"tracy\" CACHE STRING \"Default tracing implementation.\")\nset(IREE_TRACING_PROVIDER ${IREE_TRACING_PROVIDER_DEFAULT} CACHE STRING \"Chooses which built-in tracing implementation is used when tracing is enabled.\")\nset(IREE_TRACING_PROVIDER_H \"\" CACHE STRING \"Header file for custom tracing providers.\")\nset(IREE_TRACING_MODE_DEFAULT \"2\" CACHE STRING \"Default tracing feature/verbosity mode. See iree/base/tracing.h for more.\")\nset(IREE_TRACING_MODE ${IREE_TRACING_MODE_DEFAULT} CACHE STRING \"Tracing feature/verbosity mode. See iree/base/tracing.h for more.\")\n\nif(IREE_ENABLE_COMPILER_TRACING AND NOT IREE_ENABLE_RUNTIME_TRACING)\n  message(SEND_ERROR\n      \"IREE_ENABLE_COMPILER_TRACING currently requires \"\n      \"-DIREE_ENABLE_RUNTIME_TRACING=ON\")\nendif()\n\n# TODO(#8469): remove the dependency on cpuinfo entirely.\nset(IREE_ENABLE_CPUINFO_DEFAULT ON)\nif(CMAKE_SYSTEM_NAME MATCHES \"Darwin|Emscripten|Windows|WindowsStore\")\n  set(IREE_ENABLE_CPUINFO_DEFAULT OFF)\nendif()\noption(IREE_ENABLE_CPUINFO \"Enables runtime use of cpuinfo for processor topology detection.\" ${IREE_ENABLE_CPUINFO_DEFAULT})\n\noption(IREE_BUILD_COMPILER \"Builds the IREE compiler.\" ON)\noption(IREE_BUILD_TESTS \"Builds IREE unit tests.\" ON)\noption(IREE_BUILD_DOCS \"Builds IREE documentation files.\" OFF)\noption(IREE_BUILD_SAMPLES \"Builds IREE sample projects.\" ON)\noption(IREE_BUILD_PYTHON_BINDINGS \"Builds the IREE python bindings\" OFF)\noption(IREE_BUILD_TRACY \"Enables building the 'iree-tracy-capture' CLI tool and includes it in runtime Python bindings.\" OFF)\noption(IREE_BUILD_BUNDLED_LLVM \"Builds the bundled llvm-project (vs using installed)\" ON)\n\n# Properties controlling version and naming of release artifacts.\nset(IREE_RELEASE_PACKAGE_SUFFIX \"\" CACHE STRING \"Suffix to append to distributed package names\")\nset(IREE_RELEASE_VERSION \"0.1a1\" CACHE STRING \"Version to embed in distributed packages\")\nset(IREE_RELEASE_REVISION \"HEAD\" CACHE STRING \"Version control revision information to embed in distributed packages\")\noption(IREE_EMBEDDED_RELEASE_INFO \"Embed the IREE version information in built artifacts.\" OFF)\n\n# Using already built host binaries, such as for cross-compilation.\nset(IREE_HOST_BIN_DIR_DEFAULT \"\")\nif(IREE_HOST_BINARY_ROOT)\n  message(WARNING \"IREE_HOST_BINARY_ROOT is deprecated. Use IREE_HOST_BIN_DIR\"\n                  \" pointing directly to the directory containing binaries\"\n                  \" instead.\")\n  set(IREE_HOST_BIN_DIR_DEFAULT \"${IREE_HOST_BINARY_ROOT}/bin\")\nendif()\nset(IREE_HOST_BIN_DIR \"${IREE_HOST_BIN_DIR_DEFAULT}\" CACHE STRING \"Path to directory containing IREE binary tools to use instead of building them from source.\")\n\noption(IREE_BUILD_BINDINGS_TFLITE \"Builds the IREE TFLite C API compatibility shim\" ON)\noption(IREE_BUILD_BINDINGS_TFLITE_JAVA \"Builds the IREE TFLite Java bindings with the C API compatibility shim\" ON)\n\noption(IREE_BUILD_ALL_CHECK_TEST_MODULES \"Builds all modules for iree_check_test, regardless of which would be tested\" ON)\n\noption(IREE_ENABLE_COLLECTIVE_RUNTIME_TESTS \"Enable runtime tests for collective operations.\" OFF)\n\n# For development, builds LLVM (and in the future) the whole compiler as\n# individual shared libraries similar to if passing -DBUILD_SHARED_LIBS=ON\n# to a standalone LLVM build. This can dramatically reduce linking time and\n# makes the management of some dependencies more strict.\n# This option is considered experimental and should not be relied on until\n# CI coverage is established.\noption(IREE_COMPILER_BUILD_SHARED_LIBS \"Enables BUILD_SHARED_LIBS CMake mode for LLVM and the compiler (this is only suitable for development)\" OFF)\n\n# Must be defined as an option (CMake does not do it automatically), even though\n# we override it for different parts of the tree.\n# This option is considered experimental and should not be relied on until\n# CI coverage is established.\noption(BUILD_SHARED_LIBS \"Instructs CMake to build libraries as shared if possible\" OFF)\n\n# Control of LTO settings for the runtime build.\nset(IREE_RUNTIME_OPTIMIZATION_PROFILE \"\" CACHE STRING\n    \"Build optimization profile to apply. One of '', 'lto', 'size'.\")\nset(IREE_LTO_MODE \"full\" CACHE STRING \"LTO type, 'thin' or 'full'. Only consulted on clang-like compilers.\")\noption(IREE_VISIBILITY_HIDDEN \"Builds all C/C++ libraries with hidden visibility\" ON)\n\n#-------------------------------------------------------------------------------\n# IREE command-line tooling configuration\n#-------------------------------------------------------------------------------\n\n# External user modules linked into IREE tooling (iree-run-module/etc).\n# These are only available in the internal IREE tools and here for testing\n# custom modules in standard workflows. This is not a deployment mechanism and\n# users integrating IREE into their libraries or applications will need to\n# manage the building and registering/resolving the modules themselves.\n#\n# See runtime/src/iree/tooling/modules/CMakeLists.txt for more information on\n# how to declare external modules.\nset(IREE_EXTERNAL_TOOLING_MODULES \"\" CACHE STRING \"\")\n\n#-------------------------------------------------------------------------------\n# IREE out of tree plugins\n#\n# IREE has multiple facilities for building with out of tree plugin sources.\n# The entry-point is via the -DIREE_CMAKE_PLUGIN_PATHS=<dir1;dir2> setting.\n# Each directory in this list can have any of the following files in it, which\n# will be included at the appropriate point in the CMake build:\n#\n#   iree_compiler_plugin.cmake : Included in the context of the compiler/\n#     directory before sources and bindings. Will execute with source and\n#     binary dir ${IREE_BUILD_DIR}/compiler/plugins (shared with all other\n#     dirs).\n#   iree_runtime_plugin.cmake : Included in the context of the runtime/\n#     directory before sources. Will execute with source and binary dir\n#     ${IREE_BUILD_DIR}/runtime/plugins (shared with all other dirs).\n#\n# Typically, these plugins will perform additional project setup, and\n# eventually call registration functions to advertise additional capabilities\n# to the build system.\n#\n# Super-projects can populate the list IREE_CMAKE_BUILTIN_PLUGIN_PATHS to\n# statically configure more plugin directories to be used.\n#\n# Compiler Plugins\n# ----------------\n# Compiler plugins are advertised to the build system via the function\n# iree_compiler_register_plugin(), which associated a plugin id to a build target\n# and registration function. See samples/compiler_plugins for examples.\n#\n# External HAL Driver Plugins\n# ---------------------------\n# HAL driver implementations are advertised to the build system via\n# iree_register_external_hal_driver(), which specifies the name, target,\n# registration function and optional source/binary directory.\n#-------------------------------------------------------------------------------\n\nset(IREE_CMAKE_PLUGIN_PATHS \"\" CACHE STRING \"Paths to be scanned for IREE CMake plugin includes\")\nlist(APPEND IREE_CMAKE_BUILTIN_PLUGIN_PATHS \"compiler/plugins\")\nif(IREE_BUILD_SAMPLES)\n  list(APPEND IREE_CMAKE_BUILTIN_PLUGIN_PATHS \"samples/compiler_plugins\")\nendif()\n\n#-------------------------------------------------------------------------------\n# Experimental project flags\n#-------------------------------------------------------------------------------\n\noption(IREE_BUILD_EXPERIMENTAL_WEB_SAMPLES \"Builds experimental web samples.\" OFF)\noption(IREE_BUILD_EXPERIMENTAL_HAL_EXECUTABLE_LIBRARY_CALL_HOOKS \"Build experimental hal_executable_library_call hook libraries that can be used with LD_PRELOAD against runtimes built with `-DCMAKE_C_FLAGS=-DIREE_HAL_EXECUTABLE_LIBRARY_CALL_HOOK`.\" OFF)\n\n#-------------------------------------------------------------------------------\n# CUDA Toolkit.\n#\n# Using the (optional) CUDA support in the compiler and runtime requires the\n# NVIDIA CUDA Toolkit. The toolkit can either be installed ahead of time or\n# it can be automatically downloaded on certain host architectures.\n#-------------------------------------------------------------------------------\n\nset(IREE_CUDA_AVAILABLE OFF)\n# The IREE cuda driver requires CUDA >= 12.\nset(IREE_CUDA_MIN_VERSION_REQUIRED 12)\nfind_package(CUDAToolkit ${IREE_CUDA_MIN_VERSION_REQUIRED})\nif(CUDAToolkit_FOUND)\n  set(IREE_CUDA_AVAILABLE ON)\nelse()\n  # We can download the SDK in build_tools/third_party/cuda/CMakeLists.txt, if\n  # on a supported platform/arch.\n  if(CMAKE_SYSTEM_NAME STREQUAL \"Linux\" OR WIN32)\n    if(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES \"(x86_64)|(AMD64|amd64)\")\n      set(IREE_CUDA_AVAILABLE ON)\n    endif()\n  endif()\nendif()\n\n#-------------------------------------------------------------------------------\n# HIP Default Target Configuration.\n#\n# HIP does not have a stable instruction set like NVIDIA PTX; it requires\n# binaries specific to a target chip. We have tests that generate and run\n# deployable code which need to specify the proper target chip.\n#-------------------------------------------------------------------------------\n\nset(IREE_HIP_TEST_TARGET_CHIP \"\" CACHE STRING\n  \"Target chip for HIP tests that need to compile device code. \\\n   Defaults to empty string to disable tests.\")\n\n#-------------------------------------------------------------------------------\n# Runtime HAL Driver Options\n# By default, all runtime drivers supported by the current platform which do\n# not require external deps are enabled by default. This can be changed with:\n#   -DIREE_HAL_DRIVER_DEFAULTS=OFF\n#-------------------------------------------------------------------------------\n\n# External HAL drivers; see runtime/src/iree/hal/drivers/CMakeLists.txt for more\n# information on how to declare external drivers.\nset(IREE_EXTERNAL_HAL_DRIVERS \"\" CACHE STRING \"\")\n\n# Additional executable loader deps to add dependent libraries to any target\n# using the default executable loader registration utilities.\n# TODO(benvanik): extend the deps to encompass the built-in loaders too so that\n# we have one flag. We could also support a list of deps and automatically\n# generate the registration from that via a configure file.\nset(IREE_HAL_EXECUTABLE_LOADER_EXTRA_DEPS \"\" CACHE STRING \"\")\n\n# Additional executable import provider deps to add dependent libraries to any\n# target using the default executable import registration utilities.\n# TODO(benvanik): extend the deps to encompass the built-in imports too so that\n# we have one flag. We could also support a list of deps and automatically\n# generate the registration from that via a configure file.\nset(IREE_HAL_EXECUTABLE_PLUGIN_EXTRA_DEPS \"\" CACHE STRING \"\")\n\noption(IREE_HAL_DRIVER_DEFAULTS \"Sets the default value for all runtime HAL drivers\" ON)\n\n# CUDA support is disabled by default. Note: a CUDA-compatible GPU with drivers is still\n# required to actually run CUDA workloads.\nset(IREE_HAL_DRIVER_CUDA_DEFAULT OFF)\n\n# HIP support is disabled by default. Note: a HIP-compatible GPU with drivers is still\n# required to actually run HIP workloads.\nset(IREE_HAL_DRIVER_HIP_DEFAULT OFF)\n\n# Metal support is enabled if it's one of the Apple platforms.\nset(IREE_HAL_DRIVER_METAL_DEFAULT ${IREE_HAL_DRIVER_DEFAULTS})\n# Right now only support Apple silicon devices.\nif(NOT APPLE OR NOT ${CMAKE_SYSTEM_PROCESSOR} MATCHES \"arm64\")\n  set(IREE_HAL_DRIVER_METAL_DEFAULT OFF)\nendif()\n\n# Null skeleton driver is only enabled in debug builds or dev mode.\n# We don't want to ship release builds with it or count it when calculating\n# binary sizes of minified builds.\nset(IREE_HAL_DRIVER_NULL_DEFAULT OFF)\nstring(TOUPPER \"${CMAKE_BUILD_TYPE}\" _UPPERCASE_CMAKE_BUILD_TYPE)\nif (IREE_DEV_MODE OR (_UPPERCASE_CMAKE_BUILD_TYPE STREQUAL \"DEBUG\"))\n  set(IREE_HAL_DRIVER_NULL_DEFAULT ON)\nendif()\n\n# Vulkan support is enabled by default if the platform might support Vulkan.\n# Apple platforms support Metal instead of Vulkan, though MoltenVK may work.\nset(IREE_HAL_DRIVER_VULKAN_DEFAULT ${IREE_HAL_DRIVER_DEFAULTS})\nif(APPLE)\n  set(IREE_HAL_DRIVER_VULKAN_DEFAULT OFF)\nendif()\n\noption(IREE_HAL_DRIVER_CUDA \"Enables the 'cuda' runtime HAL driver\" ${IREE_HAL_DRIVER_CUDA_DEFAULT})\noption(IREE_HAL_DRIVER_HIP \"Enables the 'hip' runtime HAL driver\" ${IREE_HAL_DRIVER_HIP_DEFAULT})\noption(IREE_HAL_DRIVER_LOCAL_SYNC \"Enables the 'local-sync' runtime HAL driver\" ${IREE_HAL_DRIVER_DEFAULTS})\noption(IREE_HAL_DRIVER_LOCAL_TASK \"Enables the 'local-task' runtime HAL driver\" ${IREE_HAL_DRIVER_DEFAULTS})\noption(IREE_HAL_DRIVER_METAL \"Enables the 'metal' runtime HAL driver\" ${IREE_HAL_DRIVER_METAL_DEFAULT})\noption(IREE_HAL_DRIVER_NULL \"Enables the 'null' runtime HAL driver\" ${IREE_HAL_DRIVER_NULL_DEFAULT})\noption(IREE_HAL_DRIVER_VULKAN \"Enables the 'vulkan' runtime HAL driver\" ${IREE_HAL_DRIVER_VULKAN_DEFAULT})\n\noption(IREE_HAL_EXECUTABLE_LOADER_DEFAULTS \"Sets the default value for all runtime HAL executable loaders\" ON)\nset(IREE_HAL_EXECUTABLE_LOADER_EMBEDDED_ELF_DEFAULT ${IREE_HAL_EXECUTABLE_LOADER_DEFAULTS})\nset(IREE_HAL_EXECUTABLE_LOADER_SYSTEM_LIBRARY_DEFAULT ${IREE_HAL_EXECUTABLE_LOADER_DEFAULTS})\nset(IREE_HAL_EXECUTABLE_LOADER_VMVX_MODULE_DEFAULT ${IREE_HAL_EXECUTABLE_LOADER_DEFAULTS})\n\noption(IREE_HAL_EXECUTABLE_PLUGIN_DEFAULTS \"Sets the default value for all runtime HAL executable plugin mechanisms\" ON)\nset(IREE_HAL_EXECUTABLE_PLUGIN_EMBEDDED_ELF_DEFAULT ${IREE_HAL_EXECUTABLE_PLUGIN_DEFAULTS})\nset(IREE_HAL_EXECUTABLE_PLUGIN_SYSTEM_LIBRARY_DEFAULT ${IREE_HAL_EXECUTABLE_PLUGIN_DEFAULTS})\n\n# Emscripten builds don't support embedded ELF libraries.\nif(EMSCRIPTEN)\n  set(IREE_HAL_EXECUTABLE_LOADER_EMBEDDED_ELF_DEFAULT OFF)\n  set(IREE_HAL_EXECUTABLE_PLUGIN_EMBEDDED_ELF_DEFAULT OFF)\nendif()\n\n# If no local driver is enabled then we force all the loaders/imports off; this\n# allows for simpler checks that don't need to see if both the driver and\n# feature is available.\nif(NOT IREE_HAL_DRIVER_LOCAL_SYNC AND NOT IREE_HAL_DRIVER_LOCAL_TASK)\n  set(IREE_HAL_EXECUTABLE_LOADER_EMBEDDED_ELF_DEFAULT OFF)\n  set(IREE_HAL_EXECUTABLE_LOADER_SYSTEM_LIBRARY_DEFAULT OFF)\n  set(IREE_HAL_EXECUTABLE_LOADER_VMVX_MODULE_DEFAULT OFF)\n  set(IREE_HAL_EXECUTABLE_PLUGIN_EMBEDDED_ELF_DEFAULT OFF)\n  set(IREE_HAL_EXECUTABLE_PLUGIN_SYSTEM_LIBRARY_DEFAULT OFF)\nendif()\n\noption(IREE_HAL_EXECUTABLE_LOADER_EMBEDDED_ELF \"Enables the embedded dynamic library loader for local HAL drivers\" ${IREE_HAL_EXECUTABLE_LOADER_EMBEDDED_ELF_DEFAULT})\noption(IREE_HAL_EXECUTABLE_LOADER_SYSTEM_LIBRARY \"Enables the system dynamic library loader for local HAL drivers\" ${IREE_HAL_EXECUTABLE_LOADER_SYSTEM_LIBRARY_DEFAULT})\noption(IREE_HAL_EXECUTABLE_LOADER_VMVX_MODULE \"Enables the VMVX module loader for local HAL drivers\" ${IREE_HAL_EXECUTABLE_LOADER_VMVX_MODULE_DEFAULT})\n\noption(IREE_HAL_EXECUTABLE_PLUGIN_EMBEDDED_ELF \"Enables the embedded dynamic library plugin mechanism for local HAL drivers\" ${IREE_HAL_EXECUTABLE_PLUGIN_EMBEDDED_ELF_DEFAULT})\noption(IREE_HAL_EXECUTABLE_PLUGIN_SYSTEM_LIBRARY \"Enables the system dynamic library plugin mechanism for local HAL drivers\" ${IREE_HAL_EXECUTABLE_PLUGIN_SYSTEM_LIBRARY_DEFAULT})\n\nif(IREE_BUILD_COMPILER)\n  # The compiler minimally requires the local task driver with the default\n  # (embedded elf) executable loader. This is used by the ConstEval component,\n  # which can also be used with VMVX or other loaders/devices. See issue#17070.\n  set(IREE_HAL_DRIVER_LOCAL_TASK ON)\n  set(IREE_HAL_EXECUTABLE_LOADER_EMBEDDED_ELF ON)\nendif()\n\nmessage(STATUS \"IREE HAL drivers:\")\nif(IREE_HAL_DRIVER_CUDA)\n  message(STATUS \"  - cuda\")\nendif()\nif(IREE_HAL_DRIVER_HIP)\n  message(STATUS \"  - hip\")\nendif()\nif(IREE_HAL_DRIVER_LOCAL_SYNC)\n  message(STATUS \"  - local-sync\")\nendif()\nif(IREE_HAL_DRIVER_LOCAL_TASK)\n  message(STATUS \"  - local-task\")\nendif()\nif(IREE_HAL_DRIVER_METAL)\n  message(STATUS \"  - metal\")\nendif()\nif(IREE_HAL_DRIVER_NULL)\n  message(STATUS \"  - null\")\nendif()\nif(IREE_HAL_DRIVER_VULKAN)\n  message(STATUS \"  - vulkan\")\nendif()\nif(IREE_EXTERNAL_HAL_DRIVERS)\n  message(STATUS \"  + external: ${IREE_EXTERNAL_HAL_DRIVERS}\")\nendif()\n\nmessage(STATUS \"IREE HAL local executable library loaders:\")\nif(IREE_HAL_EXECUTABLE_LOADER_EMBEDDED_ELF)\n  message(STATUS \"  - embedded-elf\")\nendif()\nif(IREE_HAL_EXECUTABLE_LOADER_SYSTEM_LIBRARY)\n  message(STATUS \"  - system-library\")\nendif()\nif(IREE_HAL_EXECUTABLE_LOADER_VMVX_MODULE)\n  message(STATUS \"  - vmvx-module\")\nendif()\n\nmessage(STATUS \"IREE HAL local executable plugin mechanisms:\")\nif(IREE_HAL_EXECUTABLE_PLUGIN_EMBEDDED_ELF)\n  message(STATUS \"  - embedded-elf\")\nendif()\nif(IREE_HAL_EXECUTABLE_PLUGIN_SYSTEM_LIBRARY)\n  message(STATUS \"  - system-library\")\nendif()\n\n#-------------------------------------------------------------------------------\n# Compiler Target Options\n# We try to keep the default build as simple as possible and disable heavy targets.\n# Some compiler targets like CUDA will install external deps as needed at configure time.\n# This can be changed with:\n#   -DIREE_TARGET_BACKEND_DEFAULTS=OFF\n#-------------------------------------------------------------------------------\n\noption(IREE_TARGET_BACKEND_DEFAULTS \"Sets the default value for all compiler target backends\" ON)\n\n# The VMVX backend is always enabled.\ncmake_dependent_option(IREE_TARGET_BACKEND_VMVX \"Enables the 'vmvx' compiler target backend\" ON ${IREE_BUILD_COMPILER} OFF)\n\n# Supported default target backends.\ncmake_dependent_option(IREE_TARGET_BACKEND_LLVM_CPU \"Enables the 'llvm-cpu' compiler target backend\" ${IREE_TARGET_BACKEND_DEFAULTS} ${IREE_BUILD_COMPILER} OFF)\ncmake_dependent_option(IREE_TARGET_BACKEND_LLVM_CPU_WASM \"Enables WebAssembly in the 'llvm-cpu' compiler target backend\" ${IREE_TARGET_BACKEND_DEFAULTS} ${IREE_TARGET_BACKEND_LLVM_CPU} OFF)\ncmake_dependent_option(IREE_TARGET_BACKEND_METAL_SPIRV \"Enables the 'metal-spirv' compiler target backend\" ${IREE_TARGET_BACKEND_DEFAULTS} ${IREE_BUILD_COMPILER} OFF)\ncmake_dependent_option(IREE_TARGET_BACKEND_VULKAN_SPIRV \"Enables the 'vulkan-spirv' compiler target backend\" ${IREE_TARGET_BACKEND_DEFAULTS} ${IREE_BUILD_COMPILER} OFF)\n\n# Default target backends that are not yet fully supported but are being brought up.\ncmake_dependent_option(IREE_TARGET_BACKEND_ROCM \"Enables the 'rocm' compiler target backend\" OFF ${IREE_BUILD_COMPILER} OFF)\n\n# Supported target backends that are only available on certain platforms.\nset(IREE_TARGET_BACKEND_CUDA_DEFAULT ${IREE_TARGET_BACKEND_DEFAULTS})\nif(NOT IREE_CUDA_AVAILABLE)\n  set(IREE_TARGET_BACKEND_CUDA_DEFAULT OFF)\nendif()\ncmake_dependent_option(IREE_TARGET_BACKEND_CUDA \"Enables the 'cuda' compiler target backend\" OFF ${IREE_BUILD_COMPILER} OFF)\n\n# Non-default target backends either have additional dependencies or are\n# experimental/niche in some fashion.\n# Disable WebGPU by default - it has complex deps and is under development.\ncmake_dependent_option(IREE_TARGET_BACKEND_WEBGPU_SPIRV \"Enables the 'webgpu' compiler target backend\" OFF ${IREE_BUILD_COMPILER} OFF)\n\n#-------------------------------------------------------------------------------\n# Compiler Input Dialects\n#-------------------------------------------------------------------------------\n\ncmake_dependent_option(IREE_INPUT_STABLEHLO \"Builds support for compiling StableHLO programs\" ON ${IREE_BUILD_COMPILER} OFF)\ncmake_dependent_option(IREE_INPUT_TORCH \"Builds support for compiling Torch MLIR programs\" ON ${IREE_BUILD_COMPILER} OFF)\ncmake_dependent_option(IREE_INPUT_TOSA \"Builds support for compiling TOSA programs\" ON ${IREE_BUILD_COMPILER} OFF)\n\nif(IREE_BUILD_COMPILER)\n  message(STATUS \"IREE compiler input dialects:\")\n  if(IREE_INPUT_STABLEHLO)\n    message(STATUS \"  - StableHLO\")\n  endif()\n  if(IREE_INPUT_TORCH)\n    message(STATUS \"  - Torch MLIR\")\n  endif()\n  if(IREE_INPUT_TOSA)\n    message(STATUS \"  - TOSA\")\n  endif()\nendif()\n\n#-------------------------------------------------------------------------------\n# Compiler Output Formats\n#-------------------------------------------------------------------------------\n\ncmake_dependent_option(IREE_OUTPUT_FORMAT_C \"Enables the 'vm-c' output format, using MLIR EmitC\" ON ${IREE_BUILD_COMPILER} OFF)\n\nif(IREE_BUILD_COMPILER)\n  message(STATUS \"IREE compiler output formats:\")\n  if(IREE_OUTPUT_FORMAT_C)\n    message(STATUS \"  - 'vm-c': textual C source module\")\n  endif()\n  # The 'vm-bytecode' and 'vm-asm' formats are always enabled.\n  message(STATUS \"  - 'vm-bytecode': VM bytecode\")\n  message(STATUS \"  - 'vm-asm': VM MLIR assembly\")\nendif()\n\n#-------------------------------------------------------------------------------\n# IREE compilation toolchain configuration\n#-------------------------------------------------------------------------------\n\noption(IREE_ENABLE_ASAN \"Enable address sanitizer\" OFF)\noption(IREE_ENABLE_MSAN \"Enable memory sanitizer\" OFF)\noption(IREE_ENABLE_TSAN \"Enable thread sanitizer\" OFF)\noption(IREE_ENABLE_UBSAN \"Enable undefined behavior sanitizer\" OFF)\noption(IREE_ENABLE_SPLIT_DWARF \"Enable gsplit-dwarf for debug information if the platform supports it\" OFF)\noption(IREE_ENABLE_THIN_ARCHIVES \"Enables thin ar archives (elf systems only). Disable for released static archives\" OFF)\noption(IREE_LINK_COMPILER_SHARED_LIBRARY \"Links IREE tools using the compiler compiled into a shared library\" ON)\noption(IREE_ENABLE_WERROR_FLAG \"Enable `-Werror` flag, treat error as warning\" ON)\noption(IREE_ENABLE_POSITION_INDEPENDENT_CODE \"Enable position independent code\" TRUE)\n\nif(IREE_LINK_COMPILER_SHARED_LIBRARY AND IREE_ENABLE_COMPILER_TRACING)\n  message(SEND_ERROR\n      \"IREE_ENABLE_COMPILER_TRACING requires \"\n      \"-DIREE_LINK_COMPILER_SHARED_LIBRARY=OFF (the compiler library must not \"\n      \"be unloaded before Tracy finishes, static linking is one workaround)\")\nendif()\n\noption(IREE_ENABLE_CCACHE\n    \"[DEPRECATED: Use CMAKE_<LANG>_COMPILER_LAUNCHER configure options or environment variables instead.] Use ccache if installed.\"\n    OFF)\n\nif(IREE_ENABLE_CCACHE)\n  message(WARNING\n      \"IREE_ENABLE_CCACHE is deprecated. Use CMAKE_<LANG>_COMPILER_LAUNCHER\"\n      \" configure options or environment variables instead.\")\n  find_program(CCACHE_PROGRAM ccache)\n  if(CCACHE_PROGRAM)\n      set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE \"${CCACHE_PROGRAM}\")\n  else()\n    message(SEND_ERROR\n        \"IREE_ENABLE_CCACHE was set, but executable `ccache` was not found.\")\n  endif()\nendif()\n\nset (CMAKE_POSITION_INDEPENDENT_CODE ${IREE_ENABLE_POSITION_INDEPENDENT_CODE})\n\noption(IREE_DEV_MODE \"Configure settings to optimize for IREE development (as opposed to CI or release)\" OFF)\n\n#-------------------------------------------------------------------------------\n# IREE assertions\n# We don't love the way this is done, but we have to line it up with how LLVM\n# does it and not diverge, since all implementations and all header users must\n# have the same definition of NDEBUG.\n#\n# LLVM defaults LLVM_ENABLE_ASSERTIONS to ON for Debug builds only but then\n# conditions itself to only update flags if not building Debug. We just let\n# IREE_ENABLE_ASSERTIONS be not conditioned on anything and only update the\n# flags in appropriate build types.\n#\n# If IREE_ENABLE_ASSERTIONS is set ON manually, then\n#   - NDEBUG must be undefined\n#   - LLVM_ENABLE_ASSERTIONS is forced off in order to keep multiple parties\n#     from mucking with globals.\n#\n# Since CMake forces NDEBUG for !Debug builds, some surgery needs to be done\n# at the top level to avoid divergence.\n#-------------------------------------------------------------------------------\n\noption(IREE_ENABLE_ASSERTIONS \"Force unset of NDEBUG compile option\" OFF)\n\n# Filter -DNDEBUG from CMAKE_CXX_FLAGS_* and CMAKE_C_FLAGS_* (if\n# CMAKE_BUILD_TYPE is not Debug).\nfunction(iree_fix_ndebug)\n  string(TOUPPER \"${CMAKE_BUILD_TYPE}\" _UPPERCASE_CMAKE_BUILD_TYPE)\n  if(IREE_ENABLE_ASSERTIONS AND NOT \"${_UPPERCASE_CMAKE_BUILD_TYPE}\" STREQUAL \"DEBUG\")\n    # Also remove /D NDEBUG to avoid MSVC warnings about conflicting defines.\n    foreach(_FLAGS_VAR_TO_SCRUB\n            CMAKE_CXX_FLAGS_${_UPPERCASE_CMAKE_BUILD_TYPE}\n            CMAKE_C_FLAGS_${_UPPERCASE_CMAKE_BUILD_TYPE})\n      set(_ORIGINAL_FLAGS \"${${_FLAGS_VAR_TO_SCRUB}}\")\n      string(REGEX REPLACE \"(^| )[/-]D *NDEBUG($| )\" \" \" _ALTERED_FLAGS \"${_ORIGINAL_FLAGS}\")\n      if(NOT \"${_ORIGINAL_FLAGS}\" STREQUAL \"${_ALTERED_FLAGS}\")\n        message(STATUS\n          \"IREE_ENABLE_ASSERTIONS force disabled NDEBUG for ${_FLAGS_VAR_TO_SCRUB}: '${_ORIGINAL_FLAGS}' -> '${_ALTERED_FLAGS}'\")\n        set(${_FLAGS_VAR_TO_SCRUB} \"${_ALTERED_FLAGS}\" PARENT_SCOPE)\n      endif()\n    endforeach()\n\n    # Make sure that LLVM doesn't add its own logic for assertion disabling.\n    # We'd like to make sure that we are not dueling over globals.\n    set(LLVM_ENABLE_ASSERTIONS OFF PARENT_SCOPE)\n  endif()\nendfunction()\niree_fix_ndebug()\n\n#-------------------------------------------------------------------------------\n# IREE utility definitions\n#-------------------------------------------------------------------------------\n\nlist(APPEND CMAKE_MODULE_PATH\n  ${CMAKE_CURRENT_LIST_DIR}/build_tools/cmake/\n)\n\ninclude(iree_macros)\ninclude(iree_copts)\ninclude(iree_cc_binary)\ninclude(iree_cc_library)\ninclude(iree_cc_test)\ninclude(iree_import_binary)\ninclude(iree_install_support)\ninclude(iree_external_cmake_options)\ninclude(iree_tablegen_library)\ninclude(iree_tablegen_doc)\ninclude(iree_c_embed_data)\ninclude(iree_bitcode_library)\ninclude(iree_bytecode_module)\ninclude(iree_c_module)\ninclude(iree_python)\ninclude(iree_lit_test)\ninclude(iree_llvm)\ninclude(iree_add_all_subdirs)\ninclude(iree_check_test)\ninclude(iree_e2e_generated_runner_test)\ninclude(iree_native_test)\ninclude(iree_cc_binary_benchmark)\ninclude(iree_hal_cts_test_suite)\ninclude(iree_static_linker_test)\ninclude(iree_plugin_register)\n\n# Default any sub-tree which doesn't provide its own package namespacing\n# to derive it relative to this directory and prefixed with iree/.\nset(IREE_PACKAGE_ROOT_DIR \"${CMAKE_CURRENT_LIST_DIR}\")\nset(IREE_PACKAGE_ROOT_PREFIX \"iree\")\n\n#-------------------------------------------------------------------------------\n# Experimental WebGPU HAL driver\n# Enable with: -DIREE_EXTERNAL_HAL_DRIVERS=webgpu\n#-------------------------------------------------------------------------------\n\niree_register_external_hal_driver(\n  NAME\n    webgpu\n  SOURCE_DIR\n    \"${CMAKE_CURRENT_SOURCE_DIR}/experimental/webgpu\"\n  BINARY_DIR\n    \"${CMAKE_CURRENT_BINARY_DIR}/experimental/webgpu\"\n  DRIVER_TARGET\n    iree::experimental::webgpu::registration\n  REGISTER_FN\n    iree_hal_webgpu_driver_module_register\n)\n\n#-------------------------------------------------------------------------------\n# IREE compilation flags\n#-------------------------------------------------------------------------------\n\niree_append_list_to_string(CMAKE_C_FLAGS_DEBUG ${IREE_C_FLAGS_DEBUG_LIST})\niree_append_list_to_string(CMAKE_CXX_FLAGS_DEBUG ${IREE_CXX_FLAGS_DEBUG_LIST})\n\nset(CMAKE_CXX_FLAGS_FASTBUILD \"-gmlt\" CACHE STRING \"Flags used by the C++ compiler during fast builds.\" FORCE)\nset(CMAKE_C_FLAGS_FASTBUILD \"-gmlt\" CACHE STRING \"Flags used by the C compiler during fast builds.\" FORCE)\nset(CMAKE_EXE_LINKER_FLAGS_FASTBUILD \"-Wl,-S\" CACHE STRING \"Flags used for linking binaries during fast builds.\" FORCE)\nset(CMAKE_SHARED_LINKER_FLAGS_FASTBUILD \"-Wl,-S\" CACHE STRING \"Flags used by the shared libraries linker binaries during fast builds.\" FORCE)\nmark_as_advanced(\n  CMAKE_CXX_FLAGS_FASTBUILD\n  CMAKE_C_FLAGS_FASTBUILD\n  CMAKE_EXE_LINKER_FLAGS_FASTBUILD\n  CMAKE_SHARED_LINKER_FLAGS_FASTBUILD\n)\n\n# Override the system's default linker.\n# See also: https://llvm.org/docs/CMake.html#llvm-use-linker.\nset(IREE_USE_LINKER \"\" CACHE STRING \"\")\n# Equivalent to setting -DIREE_USE_LINKER=lld.\n# Note that unlike LLVM's LLVM_ENABLE_LLD, this does _not_ build lld. You will\n# need to either install a recent version of lld or build it from source prior\n# to setting this option. See also: https://lld.llvm.org/#using-lld.\n# This option is disabled on Apple platforms, where lld is not supported.\ncmake_dependent_option(IREE_ENABLE_LLD \"Override the system's default linker to lld\" OFF \"NOT APPLE\" OFF)\n\ninclude(iree_setup_toolchain)\n\n#-------------------------------------------------------------------------------\n# Python\n# If building features that require Python development, find them early in\n# one invocation (some CMake versions are sensitive to resolving out of order).\n# Otherwise, for features that just require the interpreter, find that alone.\n#-------------------------------------------------------------------------------\n\nif(IREE_BUILD_PYTHON_BINDINGS)\n  # After CMake 3.18, we are able to limit the scope of the search to just\n  # Development.Module. Searching for Development will fail in situations where\n  # the Python libraries are not available. When possible, limit to just\n  # Development.Module.\n  # See https://pybind11.readthedocs.io/en/stable/compiling.html#findpython-mode\n  #\n  # Configuring the Development.Module is flaky in multi-project setups.\n  # \"Bootstrapping\" by first looking for the optional Development component\n  # seems to be robust generally.\n  # See: https://reviews.llvm.org/D118148\n  # If building Python packages, we have a hard requirement on 3.9+.\n  find_package(Python3 3.9 COMPONENTS Interpreter Development NumPy)\n  find_package(Python3 3.9 COMPONENTS Interpreter Development.Module NumPy REQUIRED)\n  # Some parts of the build use FindPython instead of FindPython3. Why? No\n  # one knows, but they are different. So make sure to bootstrap this one too.\n  # Not doing this here risks them diverging, which on multi-Python systems,\n  # can be troublesome. Note that pybind11 and nanobind require FindPython.\n  set(Python_EXECUTABLE \"${Python3_EXECUTABLE}\")\n  find_package(Python 3.9 COMPONENTS Interpreter Development.Module NumPy REQUIRED)\nelseif(IREE_BUILD_COMPILER OR IREE_BUILD_TESTS)\n  find_package(Python3 COMPONENTS Interpreter REQUIRED)\n  set(Python_EXECUTABLE \"${Python3_EXECUTABLE}\")\n  find_package(Python COMPONENTS Interpreter REQUIRED)\nendif()\n\nif(NOT \"${Python_EXECUTABLE}\" STREQUAL \"${Python3_EXECUTABLE}\")\n  message(WARNING \"FindPython and FindPython3 found different executables. You may need to pin -DPython_EXECUTABLE and -DPython3_EXECUTABLE (${Python_EXECUTABLE} vs ${Python3_EXECUTABLE})\")\nendif()\n\n#-------------------------------------------------------------------------------\n# Check if git submodules have been initialized.\n# This will only run if python3 is available.\n#-------------------------------------------------------------------------------\n\noption(IREE_ERROR_ON_MISSING_SUBMODULES \"Error if submodules have not been initialized.\" ON)\n\nfind_package(Python3 COMPONENTS Interpreter QUIET)\nfind_package(Git)\nif(IREE_ERROR_ON_MISSING_SUBMODULES AND Python3_FOUND AND Git_FOUND)\n  # Only check submodule status when the git commit changes.\n  execute_process(\n    COMMAND git rev-parse --short HEAD\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n    RESULT_VARIABLE SHORT_HASH_RESULT\n    OUTPUT_VARIABLE SHORT_HASH)\n  string(REGEX REPLACE \"\\n$\" \"\" SHORT_HASH \"${SHORT_HASH}\")\n  if(SHORT_HASH_RESULT EQUAL \"0\" AND NOT \"${IREE_GIT_SHORT_HASH}\" STREQUAL \"${SHORT_HASH}\")\n    if(NOT IREE_BUILD_COMPILER)\n      set(CHECK_SUBMODULE_ARGS \"--runtime_only\")\n    endif()\n    execute_process(\n      COMMAND ${Python3_EXECUTABLE} build_tools/scripts/git/check_submodule_init.py ${CHECK_SUBMODULE_ARGS}\n      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n      RESULT_VARIABLE SUBMODULE_INIT_RESULT\n    )\n    if(NOT SUBMODULE_INIT_RESULT EQUAL \"0\")\n      message(FATAL_ERROR \"check_submodule_init.py failed, see the logs above\")\n    else()\n      set(IREE_GIT_SHORT_HASH \"${SHORT_HASH}\" CACHE STRING \"\" FORCE)\n    endif()\n  endif()\nendif()\n\n#-------------------------------------------------------------------------------\n# IREE top-level targets\n# We define these here because various things in the build tree adds\n# dependencies to them.\n#-------------------------------------------------------------------------------\n\nif(IREE_BUILD_DOCS)\n  # Define a top-level custom target to drive generating documentation files.\n  # Add to the default target given that docs were explicitly requested.\n  add_custom_target(iree-doc ALL)\nendif()\n\n# Samples may require additional files to be built/configured and will add\n# dependencies to this target.\n# Note: These will be automatically built with test dependencies\n# (`iree-test-deps`).\nadd_custom_target(iree-sample-deps\n  COMMENT\n    \"Building IREE sample data targets\"\n)\n\n# Testing rules that require generation will add dependencies to this target.\n# This allows them to be EXCLUDE_FROM_ALL but still invokable.\nadd_custom_target(iree-test-deps\n  COMMENT\n    \"Building IREE test deps\"\n  DEPENDS\n    iree-sample-deps\n)\n\n# Testing rules that generate test scripts for iree-run-module-test will add\n# dependencies to this target. It is a subset of `iree-test-deps`.\nadd_custom_target(iree-run-module-test-deps\n  COMMENT\n    \"Building IREE run module test targets\"\n)\n\n# Convenience target for running IREE tests.\nadd_custom_target(iree-run-tests\n  COMMENT\n    \"Run IREE unit tests\"\n  WORKING_DIRECTORY\n    \"${CMAKE_CURRENT_BINARY_DIR}\"\n  USES_TERMINAL\n  COMMAND\n    \"${CMAKE_COMMAND}\" -E echo\n    \"The 'iree-run-tests' target is a helper for running ctest. For advanced\"\n    \"options, build dependencies and invoke ctest independently as in:\"\n  COMMAND\n    \"${CMAKE_COMMAND}\" -E echo\n    \"  \\\\(cd ${CMAKE_CURRENT_BINARY_DIR} \\\\&\\\\& cmake --build . --target iree-test-deps \\\\&\\\\& ctest --output-on-failure\\\\)\"\n  COMMAND\n    \"${CMAKE_COMMAND}\" -E echo\n    \"Run tests in parallel by setting a variable like CTEST_PARALLEL_LEVEL=25.\"\n  COMMAND\n    \"${CMAKE_CTEST_COMMAND}\"\n    --output-on-failure\n)\nadd_dependencies(iree-run-tests iree-test-deps)\n\n#-------------------------------------------------------------------------------\n# CUDA configuration for both the compiler and runtime.\n# We do this at the top level so that we can fail fast and make global\n# decisions that effect both compiler and runtime. It also helps with error\n# messaging to do this all in one place, since we can provide very targeted\n# advice.\n#-------------------------------------------------------------------------------\n\nset(IREE_CUDA_LIBDEVICE_PATH \"\" CACHE FILEPATH \"Absolute path to an appropriate libdevice.*.bc (needed to build the IREE cuda compiler target)\")\n\n# If any CUDA features are being built, try to locate a CUDA SDK. We will fall\n# back to this as needed for specific features.\nif(IREE_TARGET_BACKEND_CUDA OR IREE_HAL_DRIVER_CUDA)\n  add_subdirectory(build_tools/third_party/cuda EXCLUDE_FROM_ALL)\nendif()\n\n#-------------------------------------------------------------------------------\n# MLIR/LLVM Dependency\n#-------------------------------------------------------------------------------\n\n# Both the IREE and MLIR Python bindings require nanobind. We initialize it here\n# at the top level so that everything uses ours consistently.\nif(IREE_BUILD_PYTHON_BINDINGS OR IREE_BUILD_COMPILER)\n  include(FetchContent)\n  FetchContent_Declare(\n    nanobind\n    GIT_REPOSITORY https://github.com/wjakob/nanobind.git\n    GIT_TAG        0f9ce749b257fdfe701edb3cf6f7027ba029434a # v2.4.0\n  )\n  FetchContent_MakeAvailable(nanobind)\nendif()\n\n# Both the IREE and MLIR Python bindings require pybind11. We initialize it here\n# at the top level so that everything uses ours consistently.\nif(IREE_BUILD_PYTHON_BINDINGS AND IREE_BUILD_COMPILER)\n  set(pybind11_VERSION 2.13.6)\n  include(FetchContent)\n  FetchContent_Declare(\n      pybind11\n      GIT_REPOSITORY https://github.com/pybind/pybind11\n      GIT_TAG        v${pybind11_VERSION}\n  )\n  set(PYBIND11_FINDPYTHON ON)\n  FetchContent_MakeAvailable(pybind11)\n  # pybind11 source fetches do not include find_package integration, which is\n  # a shame since sub-projects can require that to work. If we were using\n  # CMake 3.24, we could just add OVERRIDE_FIND_PACKAGE to the\n  # FetchContent_Declare call above and it would take care of doing the\n  # following to let subsequent sub-project find_package calls to resolve\n  # successfully.\n  set(pybind11_DIR \"${pybind11_BINARY_DIR}\")\n  file(WRITE \"${pybind11_BINARY_DIR}/pybind11Config.cmake\" \"\")\n  file(WRITE \"${pybind11_BINARY_DIR}/pybind11ConfigVersion.cmake\"\n       \"set(PACKAGE_VERSION ${pybind11_VERSION})\\nset(PACKAGE_VERSION_COMPATIBLE TRUE)\")\nendif()\n\nif(NOT IREE_BUILD_COMPILER)\n  message(STATUS \"Not adding LLVM/MLIR because the configuration does not require it\")\nelse()\n  # Force enable BUILD_SHARED_LIBS for the compiler if instructed.\n  set(_IREE_ORIG_BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS})\n  if(IREE_COMPILER_BUILD_SHARED_LIBS)\n    set(BUILD_SHARED_LIBS ON CACHE BOOL \"\" FORCE)\n  endif()\n\n  # Get the main LLVM deps.\n  if(IREE_BUILD_BUNDLED_LLVM)\n    iree_llvm_configure_bundled()\n  else()\n    iree_llvm_configure_installed()\n  endif()\n\n  # Also add a library that can be depended on to get LLVM includes setup\n  # properly. bazel_to_cmake targets this for some header only pseudo deps.\n  add_library(IREELLVMIncludeSetup INTERFACE)\n  foreach(_d ${LLVM_INCLUDE_DIRS} ${MLIR_INCLUDE_DIRS} ${LLD_INCLUDE_DIRS})\n    # BUILD_INTERFACE only works one at a time.\n    target_include_directories(IREELLVMIncludeSetup INTERFACE\n      $<BUILD_INTERFACE:${_d}>\n    )\n  endforeach()\n  iree_install_targets(\n    TARGETS IREELLVMIncludeSetup\n    COMPONENT IREEPublicLibraries-Compiler\n    EXPORT_SET Compiler\n  )\n\n  # Splice the includes setup into base LLVM libraries so that using them\n  # gets everything nice and tidy. It would be super if some day, LLVM\n  # libraries set their right usage requirements for includes. In the meantime\n  # we add usage requirements to libraries at the root of all things LLVM.\n  iree_llvm_add_usage_requirements(LLVMSupport IREELLVMIncludeSetup)\n  iree_llvm_add_usage_requirements(MLIRSupport IREELLVMIncludeSetup)\n\n  # Add external projects.\n\n  message(STATUS \"Configuring llvm-external-projects/mlir-iree-dialects\")\n  list(APPEND CMAKE_MESSAGE_INDENT \"  \")\n  iree_llvm_add_external_project(mlir-iree-dialects ${CMAKE_CURRENT_SOURCE_DIR}/llvm-external-projects/iree-dialects)\n  list(POP_BACK CMAKE_MESSAGE_INDENT)\n\n  if(IREE_INPUT_STABLEHLO)\n    message(STATUS \"Configuring third_party/stablehlo\")\n    list(APPEND CMAKE_MESSAGE_INDENT \"  \")\n    iree_llvm_add_external_project(stablehlo ${CMAKE_CURRENT_SOURCE_DIR}/third_party/stablehlo)\n    list(POP_BACK CMAKE_MESSAGE_INDENT)\n  endif()\n\n  # Ensure that LLVM-based dependencies needed for testing are included.\n  add_dependencies(iree-test-deps FileCheck)\n  if(IREE_LLD_TARGET)\n    add_dependencies(iree-test-deps ${IREE_LLD_TARGET})\n  endif()\n  if(IREE_CLANG_TARGET)\n    add_dependencies(iree-test-deps ${IREE_CLANG_TARGET})\n  endif()\n\n  set(BUILD_SHARED_LIBS ${_IREE_ORIG_BUILD_SHARED_LIBS} CACHE BOOL \"\" FORCE)\nendif()\n\n#-------------------------------------------------------------------------------\n# Other dependencies\n# By default we bundle a number of dependencies needed to build the project.\n# When bundled like this, they are installed into the IREEBundledLibraries\n# component and exported to their subsystem which requires them (if a static\n# dep from the public API): \"Runtime\" or \"Compiler\".\n#\n# Some deps have a usable CMake build, and we add_subdirectory these, manually\n# using iree_install_targets to include them in our installation. Others require\n# custom CMake and these are in the build_tools/third_party directory.\n#\n# TODO: We should have a mode that purely uses find_package for OS friendly\n# packaging/externalizing deps.\n#-------------------------------------------------------------------------------\n\ninclude(external_cc_library)\ninclude(flatbuffer_c_library)\n\nadd_subdirectory(build_tools/third_party/llvm-project EXCLUDE_FROM_ALL)\n\nif((IREE_ENABLE_RUNTIME_TRACING OR IREE_ENABLE_COMPILER_TRACING) AND\n    IREE_TRACING_PROVIDER STREQUAL \"tracy\")\n  message(STATUS \"Configuring third_party/tracy\")\n  list(APPEND CMAKE_MESSAGE_INDENT \"  \")\n  add_subdirectory(third_party/tracy EXCLUDE_FROM_ALL)\n  list(POP_BACK CMAKE_MESSAGE_INDENT)\n  iree_install_targets(\n    TARGETS TracyClient\n    COMPONENT IREEBundledLibraries\n    EXPORT_SET Runtime\n  )\nendif()\n\niree_set_googletest_cmake_options()\nadd_subdirectory(third_party/googletest EXCLUDE_FROM_ALL)\n\nif(IREE_ENABLE_THREADING)\n  # Benchmark.\n  iree_set_benchmark_cmake_options()\n  add_subdirectory(third_party/benchmark EXCLUDE_FROM_ALL)\n  iree_install_targets(\n    TARGETS benchmark\n    COMPONENT IREEBundledLibraries\n    EXPORT_SET Runtime\n  )\n\n  if(IREE_ENABLE_CPUINFO)\n    iree_set_cpuinfo_cmake_options()\n    add_subdirectory(third_party/cpuinfo EXCLUDE_FROM_ALL)\n    iree_install_targets(\n      TARGETS cpuinfo\n      COMPONENT IREEBundledLibraries\n      EXPORT_SET Runtime\n    )\n  endif()\nendif()\n\n# This defines the iree-flatcc-cli target, so we don't use EXCLUDE_FROM_ALL.\nadd_subdirectory(build_tools/third_party/flatcc)\n\nif(IREE_HAL_DRIVER_CUDA)\n  add_subdirectory(build_tools/third_party/nccl EXCLUDE_FROM_ALL)\nendif()\n\nif(IREE_HAL_DRIVER_HIP)\n  add_subdirectory(build_tools/third_party/rccl EXCLUDE_FROM_ALL)\nendif()\n\nif(IREE_HAL_DRIVER_VULKAN)\n  add_subdirectory(third_party/vulkan_headers EXCLUDE_FROM_ALL)\n  iree_install_targets(\n    TARGETS Vulkan-Headers\n    COMPONENT IREEBundledLibraries\n    EXPORT_SET Runtime\n  )\nendif()\n\nif(IREE_BUILD_COMPILER)\n  add_subdirectory(build_tools/third_party/stablehlo EXCLUDE_FROM_ALL)\nendif()\n\nif(IREE_BUILD_TESTS)\n  include(iree_configure_testing)\nendif()\n\nif(IREE_TARGET_BACKEND_METAL_SPIRV)\n  # SPIRV-Cross is needed to cross compile SPIR-V into MSL source code.\n  iree_set_spirv_cross_cmake_options()\n  add_subdirectory(third_party/spirv_cross EXCLUDE_FROM_ALL)\nendif()\n\n#-------------------------------------------------------------------------------\n# IREE top-level libraries\n#-------------------------------------------------------------------------------\n\nif(IREE_ENABLE_CLANG_TIDY)\n  set(CMAKE_CXX_CLANG_TIDY clang-tidy -warnings-as-errors=*)\nendif()\n\nadd_subdirectory(build_tools/embed_data/)\n\n# tools/ can depend on compiler/ and runtime/.\n# Note: tools sub directory is added before compiler/ so that phony targets for\n# files with the same names from different rules are disambiguated towards\n# those in tools/.\nadd_subdirectory(tools)\nadd_subdirectory(compiler)\nadd_subdirectory(runtime)\n\n# Note: Test deps are not built as part of all (use the iree-test-deps target).\nadd_subdirectory(tests EXCLUDE_FROM_ALL)\n\nif(IREE_ENABLE_CLANG_TIDY)\n  set(CMAKE_CXX_CLANG_TIDY \"\")\nendif()\n\nif(IREE_BUILD_TRACY)\n  if(NOT CMAKE_SYSTEM_NAME MATCHES \"Darwin|Linux\")\n    message(WARNING \"Building Tracy (IREE_BUILD_TRACY) on non-Darwin/Linux is unsupported and may fail below.\")\n  endif()\n  add_subdirectory(build_tools/third_party/tracy ${CMAKE_CURRENT_BINARY_DIR}/tracy)\n  if(NOT TARGET IREETracyCaptureServer)\n    message(SEND_ERROR \"Could not build Tracy. Either unset IREE_BUILD_TRACY or look for missing dependencies above and install them.\")\n  endif()\nendif()\n\n# Order constraint: The python bindings install tools targets from tools/\n# and tracy, and must come after it.\nif(IREE_BUILD_PYTHON_BINDINGS)\n  # Write out a .env file to make IDEs and developers happy.\n  # Yes, we are writing this to the source dir. It is only for IDEs and if\n  # it gets clobbered, it is fine (it is also ignored in .gitignore).\n  set(_PYTHONPATH_ENV \"PYTHONPATH=$<SHELL_PATH:${CMAKE_CURRENT_BINARY_DIR}/compiler/bindings/python;${CMAKE_CURRENT_BINARY_DIR}/runtime/bindings/python>\\n\")\n  file(GENERATE OUTPUT \"${CMAKE_CURRENT_SOURCE_DIR}/.env\" CONTENT \"${_PYTHONPATH_ENV}\")\n  file(GENERATE OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/.env\" CONTENT \"${_PYTHONPATH_ENV}\")\n  # Similarly, write out .env.bat and .env.ps1 for Windows.\n  set(_PYTHONPATH_ENV_BAT \"set PYTHONPATH=$<SHELL_PATH:${CMAKE_CURRENT_BINARY_DIR}/compiler/bindings/python;${CMAKE_CURRENT_BINARY_DIR}/runtime/bindings/python>\\n\")\n  file(GENERATE OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/.env.bat\" CONTENT \"${_PYTHONPATH_ENV_BAT}\")\n  set(_PYTHONPATH_ENV_PS1 \"$env:PYTHONPATH = '$<SHELL_PATH:${CMAKE_CURRENT_BINARY_DIR}/compiler/bindings/python;${CMAKE_CURRENT_BINARY_DIR}/runtime/bindings/python>'\\n\")\n  file(GENERATE OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/.env.ps1\" CONTENT \"${_PYTHONPATH_ENV_PS1}\")\nendif()\n\nif(IREE_BUILD_BINDINGS_TFLITE)\n  add_subdirectory(runtime/bindings/tflite)\nendif()\n\nif(IREE_BUILD_EXPERIMENTAL_WEB_SAMPLES)\n  add_subdirectory(experimental/web)\nendif()\n\nif(IREE_BUILD_EXPERIMENTAL_HAL_EXECUTABLE_LIBRARY_CALL_HOOKS)\n  add_subdirectory(experimental/hal_executable_library_call_hooks)\nendif()\n\nset(IREE_PUBLIC_INCLUDE_DIRS \"${IREE_COMMON_INCLUDE_DIRS}\"\n    CACHE INTERNAL \"IREE: Include Directories\" FORCE)\n\n#-------------------------------------------------------------------------------\n# Optional features\n#-------------------------------------------------------------------------------\n\n# samples/ can depend on anything, so we include it last\nif(IREE_BUILD_SAMPLES)\n  add_subdirectory(samples)\nendif()\n\nif(IREE_BUILD_TESTS)\n  iree_create_ctest_customization()\nendif()\n\n#-------------------------------------------------------------------------------\n# Install/exports\n# Note that with no further options, install convenience targets install to\n# CMAKE_INSTALL_PREFIX. Per usual, this can be further prefixed with an\n# environment variable \"DESTDIST\" on a per invocation basis (i.e. to place under\n# a versioned path, etc).\n#\n# The `iree-install-dist` target includes everthing that is typically included in\n# a distribution tarball.\n#-------------------------------------------------------------------------------\n\nadd_subdirectory(build_tools/cmake ${IREE_BINARY_DIR}/lib/cmake/IREE)\n\n# Convenience installation targets.\niree_add_install_target(NAME iree-install-dist)\niree_add_install_target(\n  NAME iree-install-dev-libraries\n  ADD_TO iree-install-dist\n)\niree_add_install_target(\n  NAME iree-install-runtime-libraries\n  ADD_TO iree-install-dist\n)\niree_add_install_target(\n  NAME iree-install-tools\n  ADD_TO iree-install-dist\n)\n\niree_add_install_target(\n  NAME iree-install-cmake-exports\n  COMPONENT IREECMakeExports\n  ADD_TO iree-install-dev-libraries\n)\n\niree_add_install_target(\n  NAME iree-install-dev-libraries-runtime\n  COMPONENT IREEDevLibraries-Runtime\n  ADD_TO iree-install-dev-libraries\n)\n\niree_add_install_target(\n  NAME iree-install-bundled-libraries\n  COMPONENT IREEBundledLibraries\n  ADD_TO iree-install-dev-libraries-runtime\n)\n\nif(IREE_BUILD_COMPILER)\n  iree_add_install_target(\n    NAME iree-install-dev-libraries-compiler\n    COMPONENT IREEDevLibraries-Compiler\n    ADD_TO iree-install-dev-libraries\n  )\n\n  iree_add_install_target(\n    NAME iree-install-tools-compiler\n    COMPONENT IREETools-Compiler\n    ADD_TO iree-install-tools\n  )\n\n  iree_add_install_target(\n    NAME iree-install-tools-compiler-dev\n    COMPONENT IREETools-CompilerDev\n    ADD_TO iree-install-tools\n  )\n\n  iree_add_install_target(\n    NAME iree-install-tools-compiler-extra\n    COMPONENT IREETools-CompilerExtra\n    # TODO: Remove the ADD_TO here and include the component in the iree-dist\n    # tarball build stage.\n    ADD_TO iree-install-tools\n  )\n\n  iree_add_install_target(\n    NAME iree-install-runtime-libraries-compiler\n    COMPONENT IREERuntimeLibraries-Compiler\n    ADD_TO\n      iree-install-runtime-libraries\n      iree-install-tools-compiler\n      iree-install-dev-libraries-compiler\n  )\nendif()\n\niree_add_install_target(\n  NAME iree-install-tools-runtime\n  COMPONENT IREETools-Runtime\n  ADD_TO iree-install-tools\n)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.7490234375,
          "content": "# How to contribute\n\nWe'd love to accept your patches and contributions to this project.\n\nTo get started with contributing, please take a look at the\n[Contributing](https://iree.dev/developers/general/contributing/) guide.\n\n## Getting in touch\n\n*   [GitHub issues](https://github.com/iree-org/iree/issues): Feature requests,\n    bugs, and other work tracking\n*   [IREE Discord server](https://discord.gg/wEWh6Z9nMU): Daily development\n    discussions with the core team and collaborators\n*   [iree-technical-discussion email list](https://lists.lfaidata.foundation/g/iree-technical-discussion):\n    General and low-priority discussion\n\n## Community guidelines\n\nThis project follows the\n[LF Projects code of conduct](https://lfprojects.org/policies/code-of-conduct/).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 12.4208984375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n    TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n    1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n    2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n    3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n    4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n    5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n    6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n    7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n    8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n    9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n    END OF TERMS AND CONDITIONS\n\n    APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n    Copyright [yyyy] [name of copyright owner]\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\n--- LLVM Exceptions to the Apache 2.0 License ----\n\nAs an exception, if, as a result of your compiling your source code, portions\nof this Software are embedded into an Object form of such source code, you\nmay redistribute such embedded portions in such Object form without complying\nwith the conditions of Sections 4(a), 4(b) and 4(d) of the License.\n\nIn addition, if you combine or link compiled forms of this Software with\nsoftware that is licensed under the GPLv2 (\"Combined Software\") and if a\ncourt of competent jurisdiction determines that the patent provision (Section\n3), the indemnity provision (Section 9) or other Section of the License\nconflicts with the conditions of the GPLv2, you may retroactively and\nprospectively choose to deem waived or otherwise exclude such Section(s) of\nthe License, but only in their entirety and only with respect to the Combined\nSoftware.\n\n\n==============================================================================\nUse of logo\n==============================================================================\n\nThe above license does not apply to IREE related logos and artwork\noriginally provided through https://github.com/iree-org/artwork.\n\nPlease refer to Linux Foundation Trademark Usage page to learn about the usage\npolicy and guidelines: https://www.linuxfoundation.org/trademark-usage.\n"
        },
        {
          "name": "MAINTAINERS.md",
          "type": "blob",
          "size": 1.9775390625,
          "content": "# IREE Maintainer Information\n\nThe IREE project operates through collaborative development via\nDiscord, Pull Requests, and the mailing list. While much day to day work\ncan take place without much fanfare, the variety of code in the project\nis large, and this page attempts to document \"go to\" people with specialist\nskills, responsibility and insights for certain components. See also\n[CODEOWNERS](.github/CODEOWNERS) for path-based reviewers for various\ncomponents. If in doubt and there is a specific CODEOWNER for the path you\nare working on, consider that to be a more authoritative source than this file.\nThis file attempts to outline long term responsibility for questions of\nevolution, health, and design.\n\nThis file is kept in the `iree` core repository but can refer to other\naffiliated repositories at need. This is meant to help \"direct traffic\" and\nindividual projects should be authoritative about their status.\n\n## Overall\n\nStella Laurenzo (@stellaraccident) is the maintainer of last resort for\nuncovered components, questions of project direction, etc.\n\n## Compiler Maintainers\n\n* Runtime Interface: Ben Vanik (@benvanik)\n* High Level Optimizations: Mahesh Ravishankar (@MaheshRavishankar)\n* Code Generation: Mahesh Ravishankar (@MaheshRavishankar)\n* Input Pipelines:\n\n  * Torch: Rob Suderman (@rsuderman)\n  * TOSA: Maintainer Needed\n  * StableHLO: Maintainer Needed\n\n## Runtime Maintainers\n\n* Overall: Ben Vanik (@benvanik)\n* Default HAL Drivers: Lei Zhang (@antiagainst)\n\n## Build Tools, Infra, and Dependencies\n\n* LLVM Dependency: Mahesh Ravishankar (@MaheshRavishankar)\n* CI, Docs, and Tools: Scott Todd (@ScottTodd)\n* Other Dependencies: Ben Vanik (@benvanik) and Scott Todd (@ScottTodd)\n\n## APIs\n\n* Compiler C API: Stella Laurenzo (@stellaraccident)\n* Python Bindings: Stella Laurenzo (@stellaraccident)\n* Turbine: Stella Laurenzo (@stellaraccident)\n* PJRT: Maintainer Needed\n\n## Releasing\n\n* Python Releases: Stella Laurenzo (@stellaraccident)\n* Other packages, nightlies, and infra: Maintainer Needed\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.236328125,
          "content": "# IREE: Intermediate Representation Execution Environment\n\n<p><img src=\"docs/website/docs/assets/images/IREE_Logo_Icon_Color.svg\" width=\"48px\"></p>\n\nIREE (**I**ntermediate **R**epresentation **E**xecution **E**nvironment,\npronounced as \"eerie\") is an [MLIR](https://mlir.llvm.org/)-based end-to-end\ncompiler and runtime that lowers Machine Learning (ML) models to a unified IR\nthat scales up to meet the needs of the datacenter and down to satisfy the\nconstraints and special considerations of mobile and edge deployments.\n\nSee [our website](https://iree.dev/) for project details, user\nguides, and instructions on building from source.\n\n[![IREE Discord Status](https://discordapp.com/api/guilds/689900678990135345/widget.png?style=shield)]([https://discord.gg/wEWh6Z9nMU](https://discord.gg/wEWh6Z9nMU))\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit)](https://github.com/pre-commit/pre-commit)\n[![OpenSSF Best Practices](https://www.bestpractices.dev/projects/8738/badge)](https://www.bestpractices.dev/projects/8738)\n\n## Project news\n\n* 2024-05-23: [IREE joins the LF AI & Data Foundation as a sandbox-stage project](https://lfaidata.foundation/blog/2024/05/23/announcing-iree-a-new-initiative-for-machine-learning-deployment/)\n\n## Project status\n\n### Release status\n\nReleases notes are\n[published on GitHub releases](https://github.com/iree-org/iree/releases?q=prerelease%3Afalse).\n\n\n| Package | Release status |\n| -- | -- |\nGitHub release (stable) | [![GitHub Release](https://img.shields.io/github/v/release/iree-org/iree)](https://github.com/iree-org/iree/releases/latest)\nGitHub release (nightly) | [![GitHub Release](https://img.shields.io/github/v/release/iree-org/iree?include_prereleases)](https://github.com/iree-org/iree/releases)\nPython iree-base-compiler | [![PyPI version](https://badge.fury.io/py/iree-base-compiler.svg)](https://badge.fury.io/py/iree-base-compiler)\nPython iree-base-runtime | [![PyPI version](https://badge.fury.io/py/iree-base-runtime.svg)](https://badge.fury.io/py/iree-base-runtime)\n\n### Build status\n\n[![CI](https://github.com/iree-org/iree/actions/workflows/ci.yml/badge.svg?query=branch%3Amain+event%3Apush)](https://github.com/iree-org/iree/actions/workflows/ci.yml?query=branch%3Amain+event%3Apush)\n[![PkgCI](https://github.com/iree-org/iree/actions/workflows/pkgci.yml/badge.svg?query=branch%3Amain+event%3Apush)](https://github.com/iree-org/iree/actions/workflows/pkgci.yml?query=branch%3Amain+event%3Apush)\n\n#### Nightly build status\n\n| Operating system | Build status |\n| -- | --: |\nLinux | [![CI - Linux arm64 clang](https://github.com/iree-org/iree/actions/workflows/ci_linux_arm64_clang.yml/badge.svg?query=branch%3Amain+event%3Aschedule)](https://github.com/iree-org/iree/actions/workflows/ci_linux_arm64_clang.yml?query=branch%3Amain+event%3Aschedule)\nmacOS | [![CI - macOS x64 clang](https://github.com/iree-org/iree/actions/workflows/ci_macos_x64_clang.yml/badge.svg?query=branch%3Amain+event%3Aschedule)](https://github.com/iree-org/iree/actions/workflows/ci_macos_x64_clang.yml?query=branch%3Amain+event%3Aschedule)\nmacOS | [![CI - macOS arm64 clang](https://github.com/iree-org/iree/actions/workflows/ci_macos_arm64_clang.yml/badge.svg?query=branch%3Amain+event%3Aschedule)](https://github.com/iree-org/iree/actions/workflows/ci_macos_arm64_clang.yml?query=branch%3Amain+event%3Aschedule)\nWindows | [![CI - Windows x64 MSVC](https://github.com/iree-org/iree/actions/workflows/ci_windows_x64_msvc.yml/badge.svg?query=branch%3Amain+event%3Aschedule)](https://github.com/iree-org/iree/actions/workflows/ci_windows_x64_msvc.yml?query=branch%3Amain+event%3Aschedule)\n\nFor the full list of workflows see\nhttps://iree.dev/developers/general/github-actions/.\n\n## Communication channels\n\n*   [GitHub issues](https://github.com/iree-org/iree/issues): Feature requests,\n    bugs, and other work tracking\n*   [IREE Discord server](https://discord.gg/wEWh6Z9nMU): Daily development\n    discussions with the core team and collaborators\n*   (New) [iree-announce email list](https://lists.lfaidata.foundation/g/iree-announce):\n    Announcements\n*   (New) [iree-technical-discussion email list](https://lists.lfaidata.foundation/g/iree-technical-discussion):\n    General and low-priority discussion\n*   (Legacy) [iree-discuss email list](https://groups.google.com/forum/#!forum/iree-discuss):\n    Announcements, general and low-priority discussion\n\n### Related project channels\n\n*   [MLIR topic within LLVM Discourse](https://llvm.discourse.group/c/llvm-project/mlir/31):\n    IREE is enabled by and heavily relies on [MLIR](https://mlir.llvm.org). IREE\n    sometimes is referred to in certain MLIR discussions. Useful if you are also\n    interested in MLIR evolution.\n\n## Architecture overview\n\n<!-- TODO(scotttodd): switch to <picture> once better supported? https://github.blog/changelog/2022-05-19-specify-theme-context-for-images-in-markdown-beta/ -->\n![IREE Architecture](docs/website/docs/assets/images/iree_architecture_dark.svg#gh-dark-mode-only)\n![IREE Architecture](docs/website/docs/assets/images/iree_architecture.svg#gh-light-mode-only)\n\nSee [our website](https://iree.dev/) for more information.\n\n## Presentations and talks\n\nCommunity meeting recordings: [IREE YouTube channel](https://www.youtube.com/@iree4356)\n\nDate | Title | Recording | Slides\n---- | ----- | --------- | ------\n2021-06-09 | IREE Runtime Design Tech Talk | [recording](https://drive.google.com/file/d/1p0DcysaIg8rC7ErKYEgutQkOJGPFCU3s/view) | [slides](https://drive.google.com/file/d/1ikgOdZxnMz1ExqwrAiuTY9exbe3yMWbB/view?usp=sharing)\n2020-08-20 | IREE CodeGen (MLIR Open Design Meeting) | [recording](https://drive.google.com/file/d/1325zKXnNIXGw3cdWrDWJ1-bp952wvC6W/view?usp=sharing) | [slides](https://docs.google.com/presentation/d/1NetHjKAOYg49KixY5tELqFp6Zr2v8_ujGzWZ_3xvqC8/edit)\n2020-03-18 | Interactive HAL IR Walkthrough | [recording](https://drive.google.com/file/d/1_sWDgAPDfrGQZdxAapSA90AD1jVfhp-f/view?usp=sharing) |\n2020-01-31 | End-to-end MLIR Workflow in IREE (MLIR Open Design Meeting) | [recording](https://drive.google.com/open?id=1os9FaPodPI59uj7JJI3aXnTzkuttuVkR) | [slides](https://drive.google.com/open?id=1RCQ4ZPQFK9cVgu3IH1e5xbrBcqy7d_cEZ578j84OvYI)\n\n## License\n\nIREE is licensed under the terms of the Apache 2.0 License with LLVM Exceptions.\nSee [LICENSE](LICENSE) for more information.\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 3.9638671875,
          "content": "# IREE Releasing\n\nThis file documents the extant release process that IREE uses. This process\nand the automation (such as it is) has grown over many years and is due for\na refresh. However, in the interests of documenting what exists, we attempt\nto do so here.\n\n## Nightly Core Releases\n\nIREE development is primarily driven via automated nightly release snapshots.\nThese are scheduled automatically each day by the\n`schedule_candidate_release.yml` workflow, which selects a green commit from\nmain (for non optional CI tasks), created a tag of the format\n`iree-{X.Y.ZrcYYYYMMDD}` and schedules automation to populate the release.\n\nThe `build_package.yml` workflow then runs jobs to do builds for all\nplatforms and packages, finally triggering the\n`validate_and_publish_release.yml` workflow.\n\nRelease artifacts are uploaded as a GitHub\n[pre release](https://github.com/iree-org/iree/releases) and an index of files\nis updated by periodic automation at https://iree.dev/pip-release-links.html.\n\nSome debugging notes for this process are available here:\nhttps://iree.dev/developers/debugging/releases/.\n\n### Nightly Release Packages\n\nA number of packages are produced automatically:\n\n* `iree-dist-*.tar.xz` (manylinux x86_64 and aarch64): Install image of the\n  binaries and development assets needed to use or depend on the C/C++ parts\n  of the project.\n* `iree-base-compiler`: Binary Python wheels\n* `iree-base-runtime`: Binary Python wheels\n* `iree-tools-tf` and `iree-tools-tflite`: Pure Python wheels\n\n#### Linux Builds\n\nBinary Linux packages are built using a custom `manylinux` based Docker image\nhosted here:\nhttps://github.com/iree-org/base-docker-images/pkgs/container/manylinux_x86_64\nusing isolated self-hosted runners (only used for building checked in code) of\nsufficient size for building large components and GitHub managed runners for\nsmaller components. The project aims to target all non-EOL Python versions with\nLinux builds on x86_64 and aarch64.\n\n#### Windows Builds\n\nWindows builds are built using GitHub-hosted runners. Due to the cost, the\nproject aims to target the most recent version of Python only while building\nversion N-1 for the first year of the lifecycle of the next version.\n\nOnly the Python `iree-base-compiler` and `iree-base-runtime` packages are\nbuilt for Windows.\n\nThe release is published even if the Windows build fails. When this happens, it\nis fixed forward for the next snapshot.\n\n#### MacOS Builds\n\nMacOS builds are performed using GitHub-hosted runners. Due to the cost, the\nproject aims to target the most recent version of Python only while building\nversion N-1 for the first year of the lifecycle of the next version.\n\nOnly the Python `iree-base-compiler` and `iree-base-runtime` packages are\nbuilt for MacOS.\n\nThe release is published even if the MacOS build fails. When this happens, it\nis fixed forward for the next snapshot.\n\n## Retention\n\nThe project will keep pre-release tagged releases on its releases page for a\nminimum of 6 months. Releases older than this can be purged.\n\n## Distribution to Package Registries\n\nThe following package registry projects are managed as part of the IREE\nrelease process:\n\n### PyPI\n\n* https://pypi.org/project/iree-base-compiler/\n* https://pypi.org/project/iree-base-runtime/\n* https://pypi.org/project/iree-turbine/\n* https://pypi.org/project/iree-tools-tf/\n* https://pypi.org/project/iree-tools-tflite/\n\nDeprecated projects no longer updated:\n\n* https://pypi.org/project/iree-compiler/ (replaced by iree-base-compiler)\n* https://pypi.org/project/iree-runtime/ (replaced by iree-base-runtime)\n* https://pypi.org/project/iree-runtime-instrumented/ (functionality is\n  included in the main iree-runtime package)\n* https://pypi.org/project/iree-tools-xla/ (functionality is no longer needed)\n\n\n## Build Promotion\n\nThere are presently two build promotion processes documented:\n\n* Releasing IREE core packages:\n  https://iree.dev/developers/general/release-management/\n* Releasing iree-turbine packages:\n  https://github.com/iree-org/iree-turbine/blob/main/docs/releasing.md\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 2.7705078125,
          "content": "# Copyright 2019 The IREE Authors\n#\n# Licensed under the Apache License v2.0 with LLVM Exceptions.\n# See https://llvm.org/LICENSE.txt for license information.\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n# Workspace file for the IREE project.\n# buildozer: disable=positional-args\n\nworkspace(name = \"iree_core\")\n\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\nload(\"@bazel_tools//tools/build_defs/repo:utils.bzl\", \"maybe\")\n\n###############################################################################\n# Skylib\nhttp_archive(\n    name = \"bazel_skylib\",\n    sha256 = \"74d544d96f4a5bb630d465ca8bbcfe231e3594e5aae57e1edbf17a6eb3ca2506\",\n    urls = [\n        \"https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.3.0/bazel-skylib-1.3.0.tar.gz\",\n        \"https://github.com/bazelbuild/bazel-skylib/releases/download/1.3.0/bazel-skylib-1.3.0.tar.gz\",\n    ],\n)\n\nload(\"@bazel_skylib//:workspace.bzl\", \"bazel_skylib_workspace\")\n\nbazel_skylib_workspace()\n###############################################################################\n\n###############################################################################\n# llvm-project\n\nnew_local_repository(\n    name = \"llvm-raw\",\n    build_file_content = \"# empty\",\n    path = \"third_party/llvm-project\",\n)\n\nload(\"@llvm-raw//utils/bazel:configure.bzl\", \"llvm_configure\")\n\nllvm_configure(\n    name = \"llvm-project\",\n    # Keep this in sync with the targets in iree_llvm.cmake.\n    targets = [\n        \"AArch64\",\n        \"ARM\",\n        \"RISCV\",\n        \"X86\",\n        \"NVPTX\",\n        \"AMDGPU\",\n        \"WebAssembly\",\n    ],\n)\n\n###############################################################################\n\n###############################################################################\n# All other IREE submodule dependencies\n\nload(\"//build_tools/bazel:workspace.bzl\", \"configure_iree_cuda_deps\", \"configure_iree_submodule_deps\")\n\nconfigure_iree_submodule_deps()\n\nconfigure_iree_cuda_deps()\n\n###############################################################################\nmaybe(\n    http_archive,\n    name = \"llvm_zlib\",\n    build_file = \"@llvm-raw//utils/bazel/third_party_build:zlib-ng.BUILD\",\n    sha256 = \"e36bb346c00472a1f9ff2a0a4643e590a254be6379da7cddd9daeb9a7f296731\",\n    strip_prefix = \"zlib-ng-2.0.7\",\n    urls = [\n        \"https://github.com/zlib-ng/zlib-ng/archive/refs/tags/2.0.7.zip\",\n    ],\n)\n\n###############################################################################\nmaybe(\n    http_archive,\n    name = \"llvm_zstd\",\n    build_file = \"@llvm-raw//utils/bazel/third_party_build:zstd.BUILD\",\n    sha256 = \"7c42d56fac126929a6a85dbc73ff1db2411d04f104fae9bdea51305663a83fd0\",\n    strip_prefix = \"zstd-1.5.2\",\n    urls = [\n        \"https://github.com/facebook/zstd/releases/download/v1.5.2/zstd-1.5.2.tar.gz\",\n    ],\n)\n"
        },
        {
          "name": "build_tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "compiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure_bazel.py",
          "type": "blob",
          "size": 2.8984375,
          "content": "# Copyright 2020 The IREE Authors\n#\n# Licensed under the Apache License v2.0 with LLVM Exceptions.\n# See https://llvm.org/LICENSE.txt for license information.\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\nimport platform\nimport os\nimport subprocess\nimport sys\n\n\ndef detect_unix_platform_config(bazelrc):\n    # This is hoaky. Ideally, bazel had any kind of rational way of selecting\n    # options from within its environment (key word: \"rational\"), but sadly, it\n    # is unintelligible to mere mortals. Why should a build system have a way for\n    # people to condition their build options on what compiler they are using\n    # (without descending down the hole of deciphering what a Bazel toolchain is)?\n    # All I want to do is set a couple of project specific warning options!\n\n    if platform.system() == \"Darwin\":\n        print(f\"build --config=macos_clang\", file=bazelrc)\n        print(f\"build:release --config=macos_clang_release\", file=bazelrc)\n    else:\n        # If the user specified a CXX environment var, bazel will later respect that,\n        # so we just see if it says \"clang\".\n        cxx = os.environ.get(\"CXX\")\n        cc = os.environ.get(\"CC\")\n        if (cxx is not None and cc is None) or (cxx is None and cc is not None):\n            print(\n                \"WARNING: Only one of CXX or CC is set, which can confuse bazel. \"\n                \"Recommend: set both appropriately (or none)\"\n            )\n        if cc is not None and cxx is not None:\n            # Persist the variables.\n            print(f'build --action_env CC=\"{cc}\"', file=bazelrc)\n            print(f'build --action_env CXX=\"{cxx}\"', file=bazelrc)\n        else:\n            print(\n                \"WARNING: CC and CXX are not set, which can cause mismatches between \"\n                \"flag configurations and compiler. Recommend setting them explicitly.\"\n            )\n\n        if cxx is not None and \"clang\" in cxx:\n            print(f\"Choosing generic_clang config because CXX is set to clang ({cxx})\")\n            print(f\"build --config=generic_clang\", file=bazelrc)\n            print(f\"build:release --config=generic_clang_release\", file=bazelrc)\n        else:\n            print(\n                f\"Choosing generic_gcc config by default because no CXX set or \"\n                f\"not recognized as clang ({cxx})\"\n            )\n            print(f\"build --config=generic_gcc\", file=bazelrc)\n            print(f\"build:release --config=generic_gcc_release\", file=bazelrc)\n\n\ndef write_platform(bazelrc):\n    if platform.system() == \"Windows\":\n        print(f\"build --config=msvc\", file=bazelrc)\n        print(f\"build:release --config=msvc_release\", file=bazelrc)\n    else:\n        detect_unix_platform_config(bazelrc)\n\n\nif len(sys.argv) > 1:\n    local_bazelrc = sys.argv[1]\nelse:\n    local_bazelrc = os.path.join(os.path.dirname(__file__), \"configured.bazelrc\")\nwith open(local_bazelrc, \"wt\") as bazelrc:\n    write_platform(bazelrc)\n\nprint(\"Wrote\", local_bazelrc)\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "experimental",
          "type": "tree",
          "content": null
        },
        {
          "name": "integrations",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "llvm-external-projects",
          "type": "tree",
          "content": null
        },
        {
          "name": "runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}