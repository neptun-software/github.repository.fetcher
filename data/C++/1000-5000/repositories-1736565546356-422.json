{
  "metadata": {
    "timestamp": 1736565546356,
    "page": 422,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "PixarAnimationStudios/OpenSubdiv",
      "stars": 2913,
      "defaultBranch": "release",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.078125,
          "content": "\n# ignore build files\n/build/*\n/inst*\n\n*.pyc\nosdshim_wrap.cpp\nshim.py\n.DS_Store\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 28.65625,
          "content": "#\n#   Copyright 2013 Pixar\n#\n#   Licensed under the Apache License, Version 2.0 (the \"Apache License\")\n#   with the following modification; you may not use this file except in\n#   compliance with the Apache License and the following modification to it:\n#   Section 6. Trademarks. is deleted and replaced with:\n#\n#   6. Trademarks. This License does not grant permission to use the trade\n#      names, trademarks, service marks, or product names of the Licensor\n#      and its affiliates, except as required to comply with Section 4(c) of\n#      the License and to reproduce the content of the NOTICE file.\n#\n#   You may obtain a copy of the Apache License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the Apache License with the above modification is\n#   distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#   KIND, either express or implied. See the Apache License for the specific\n#   language governing permissions and limitations under the Apache License.\n#\n\ncmake_minimum_required(VERSION 3.12)\n\nproject(OpenSubdiv)\n\n# Set C++ standard requirements, allowing overrides\nif (NOT DEFINED CMAKE_CXX_STANDARD)\n    set(CMAKE_CXX_STANDARD 14)\nendif()\nif (NOT DEFINED CMAKE_CXX_STANDARD_REQUIRED)\n    set(CMAKE_CXX_STANDARD_REQUIRED ON)\nendif()\nif (NOT DEFINED CMAKE_CXX_EXTENSIONS)\n    set(CMAKE_CXX_EXTENSIONS OFF)\nendif()\n\n# Turn on folder support\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\n#-------------------------------------------------------------------------------\n# Obtain OpenSubdiv API version from version.h file\nif(EXISTS \"${OpenSubdiv_SOURCE_DIR}/opensubdiv/version.h\")\n    file(STRINGS \"${OpenSubdiv_SOURCE_DIR}/opensubdiv/version.h\"\n        OpenSubdiv_VERSION REGEX \"^#define OPENSUBDIV_VERSION .*$\")\n    string(REPLACE \"#define OPENSUBDIV_VERSION \" \"\" OpenSubdiv_VERSION ${OpenSubdiv_VERSION})\nelse()\n    message(FATAL_ERROR, \"Cannot locate opensubdiv/version.h in ${OpenSubdiv_SOURCE_DIR}\")\nendif()\n\n# Evaluate 'soname' from OSD version\n\n    # replace '_' with '.'\n    string(REGEX REPLACE \"(_)\" \".\" OSD_SONAME ${OpenSubdiv_VERSION})\n\n    # remove starting 'v' character\n    string(REGEX REPLACE \"^v\" \"\" OSD_SONAME ${OSD_SONAME})\n\n    add_definitions(\n        -DOPENSUBDIV_VERSION_STRING=\"${OSD_SONAME}\"\n    )\n\n#-------------------------------------------------------------------------------\n\nmessage(STATUS \"Compiling ${PROJECT_NAME} version ${OpenSubdiv_VERSION}\")\nmessage(STATUS \"Using cmake version ${CMAKE_VERSION}\")\n\n#-------------------------------------------------------------------------------\n# Determine if the project is built as a subproject (using add_subdirectory)\n# or if it is the main project.\nset(MAIN_PROJECT OFF)\nif (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)\n    set(MAIN_PROJECT ON)\nendif()\n\n# Specify the default install path\nif (NOT DEFINED CMAKE_INSTALL_PREFIX)\n    SET( CMAKE_INSTALL_PREFIX \"${PROJECT_BINARY_DIR}/\" )\nendif()\n\nif (NOT DEFINED CMAKE_INCDIR_BASE)\n    set( CMAKE_INCDIR_BASE include/opensubdiv )\nendif()\n\nif (NOT DEFINED CMAKE_BINDIR_BASE)\n    set( CMAKE_BINDIR_BASE bin )\nendif()\n\nif (NOT DEFINED CMAKE_LIBDIR_BASE)\n    set( CMAKE_LIBDIR_BASE lib )\nendif()\n\nif (NOT DEFINED CMAKE_FRAMEWORKDIR_BASE)\n    set( CMAKE_FRAMEWORKDIR_BASE Frameworks )\nendif()\n\nif (NOT DEFINED CMAKE_PLUGINDIR_BASE)\n    set( CMAKE_PLUGINDIR_BASE plugin )\nendif()\n\nif (NOT DEFINED CMAKE_DOCDIR_BASE)\n    set( CMAKE_DOCDIR_BASE share/doc/opensubdiv )\nelse()\n    if (IS_ABSOLUTE ${CMAKE_DOCDIR_BASE})\n        set( CMAKE_DOCDIR_BASE \"${CMAKE_DOCDIR_BASE}\" )\n    else()\n        set( CMAKE_DOCDIR_BASE \"${CMAKE_INSTALL_PREFIX}/${CMAKE_DOCDIR_BASE}\" )\n    endif()\nendif()\n\n# Allow install path to be overridden for cross-compile builds\nif(LIBRARY_OUTPUT_PATH_ROOT)\n    SET( CMAKE_INSTALL_PREFIX \"${LIBRARY_OUTPUT_PATH_ROOT}/\" )\nendif()\n\nif (MAIN_PROJECT)\n    # Set the directory where the executables will be stored.\n    set(EXECUTABLE_OUTPUT_PATH\n        \"${PROJECT_BINARY_DIR}/bin\"\n        CACHE PATH\n        \"Directory where executables will be stored\"\n    )\n\n    # Set the directory where the libraries will be stored.\n    set(LIBRARY_OUTPUT_PATH\n        \"${PROJECT_BINARY_DIR}/lib\"\n        CACHE PATH\n        \"Directory where all libraries will be stored\"\n    )\nendif()\n\n# Specify the list of directories to search for cmake modules.\nlist(APPEND CMAKE_MODULE_PATH\n    \"${PROJECT_SOURCE_DIR}/cmake\"\n)\n\n#-------------------------------------------------------------------------------\n# OpenSubdiv trips bugs in some older gcc versions\nif (CMAKE_COMPILER_IS_GNUCC)\n    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.8)\n        message(WARNING \"g++ 4.8 or newer recommended\")\n    endif()\nendif()\n\n# Detect Clang (until a cmake version provides built-in variables)\nif(${CMAKE_CXX_COMPILER_ID} MATCHES \"Clang\")\n    set(CMAKE_COMPILER_IS_CLANGCC 1)\nelseif(${CMAKE_CXX_COMPILER_ID} MATCHES \"Intel\")\n    set(CMAKE_COMPILER_IS_ICC 1)\nendif()\n\n\nif (NOT CMAKE_COMPILER_IS_ICC)\n    # Currently icc has a bug that asserts when linking rpaths containing long\n    # sequences of ':' that this command causes. The consequence is that examples\n    # built and installed using icc will not have an rpath pointing to the built\n    # OSD library which they depend on and will have to set LD_LIBRARY_PATH instead.\n    list(APPEND CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/lib\")\nendif()\n\n# add the automatically determined parts of the RPATH\n# which point to directories outside the build tree to the install RPATH\nSET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n\n# ensure that ARC is shown as enabled in the Xcode UI\nif(CMAKE_GENERATOR STREQUAL \"Xcode\")\n    set (CMAKE_XCODE_ATTRIBUTE_CLANG_ENABLE_OBJC_ARC \"YES\")\nendif()\n\n\nset(OSD_COMPILER_FLAGS)\n\n# Disable spurious warnings in gcc builds and clang\nif (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANGCC OR CMAKE_COMPILER_IS_ICC )\n\n    # Turn on all warnings\n    if(CMAKE_COMPILER_IS_ICC)\n        list(APPEND OSD_COMPILER_FLAGS -w2 -wd1572 -wd1418 -wd981 -wd383 -wd193 -wd444)\n    else()\n        list(APPEND OSD_COMPILER_FLAGS -Wall -Wextra)\n    endif()\n\n    if(WIN32)\n        # Make sure the constants in <math.h>/<cmath> get defined.\n        list(APPEND OSD_COMPILER_FLAGS -D_USE_MATH_DEFINES)\n\n        # Make sure WinDef.h does not define min and max macros which\n        # will conflict with std::min() and std::max().\n        list(APPEND OSD_COMPILER_FLAGS -DNOMINMAX)\n    endif()\n\n    # HBR uses the offsetof macro on a templated struct, which appears\n    # to spuriously set off this warning in both gcc and Clang\n    list(APPEND OSD_COMPILER_FLAGS -Wno-invalid-offsetof)\n\n    # HBR uses unions as an optimization for its memory allocation.\n    # Type casting between union members breaks strict aliasing rules from\n    # gcc 4.4.1 versions onwards. We disable the warning but keep aliasing\n    # optimization.\n    list(APPEND OSD_COMPILER_FLAGS -Wno-strict-aliasing)\n\n    # FAR and OSD have templated virtual function implementations that trigger\n    # a lot of hidden virtual function overloads (some of them spurious).\n    # Disable those for now in Clang.\n    if(CMAKE_COMPILER_IS_CLANGCC)\n        list(APPEND OSD_COMPILER_FLAGS -Wno-overloaded-virtual)\n    endif()\n\n    # Intel's icc compiler requires some libraries linked\n    if(CMAKE_COMPILER_IS_ICC)\n\n        foreach (ICC_LIB iomp5 irng intlc)\n\n            if(CMAKE_SIZEOF_VOID_P MATCHES \"8\")\n                list(APPEND ICC_LIB_ARCH \"intel64\")\n            elseif(CMAKE_SIZEOF_VOID_P MATCHES \"4\")\n                list(APPEND ICC_LIB_ARCH \"ia32\")\n            endif()\n\n            find_library( ICC_${ICC_LIB}\n                NAMES\n                    ${ICC_LIB}\n                HINTS\n                    ${ICC_LOCATION}\n                PATHS\n                    /opt/intel/lib/\n                PATH_SUFFIXES\n                    ${ICC_LIB_ARCH}\n                    lib/${ICC_LIB_ARCH}\n            )\n\n            if (ICC_${ICC_LIB})\n                list(APPEND ICC_LIBRARIES ${ICC_${ICC_LIB}})\n            else()\n                message( FATAL_ERROR \"${ICC_${ICC_LIB}} library not found - required by icc\" )\n            endif()\n\n        endforeach()\n    endif()\n\nelseif(MSVC)\n\n    list(APPEND OSD_COMPILER_FLAGS\n                    /W3     # Use warning level recommended for production purposes.\n                    /WX     # Treat all compiler warnings as errors.\n\n                    # warning C4005: macro redefinition\n                    /wd4005\n\n                    # these warnings are being triggered from inside VC's header files\n                    # warning C4350: behavior change: 'member1' called instead of 'member2'\n                    /wd4350\n                    # warning C4548: expression before comma has no effect; expected expression with side-effect\n                    /wd4548\n\n                    # Make sure WinDef.h does not define min and max macros which\n                    # will conflict with std::min() and std::max().\n                    /DNOMINMAX\n\n                    # Make sure the constants in <math.h> get defined.\n                    /D_USE_MATH_DEFINES\n\n                    # Do not enforce MSVC's safe CRT replacements.\n                    /D_CRT_SECURE_NO_WARNINGS\n\n                    # Disable checked iterators and iterator debugging.  Visual Studio\n                    # 2008 does not implement std::vector::data(), so we need to take the\n                    # address of std::vector::operator[](0) to get the memory location of\n                    # a vector's underlying data storage.  This does not work for an empty\n                    # vector if checked iterators or iterator debugging is enabled.\n\n                    # XXXX manuelk : we can't force SECURE_SCL to 0 or client code has\n                    # problems linking against OSD if their build is not also\n                    # overriding SSCL to the same value.\n                    # See : http://msdn.microsoft.com/en-us/library/vstudio/hh697468.aspx\n                    #/D_SECURE_SCL=0\n                    #/D_HAS_ITERATOR_DEBUGGING=0\n    )\n\n    option(MSVC_STATIC_CRT \"Statically link MSVC CRT\" OFF)\n\n    if(MSVC_STATIC_CRT)\n        message(STATUS \"Using static MSVC CRT\")\n        # http://stackoverflow.com/a/32128977/486990\n        add_compile_options(\n            \"$<$<CONFIG:Debug>:/MTd>\"\n            \"$<$<CONFIG:RelWithDebInfo>:/MT>\"\n            \"$<$<CONFIG:Release>:/MT>\"\n            \"$<$<CONFIG:MinSizeRel>:/MT>\"\n        )\n    else()\n        # Turn off a duplicate LIBCMT linker warning\n        set(CMAKE_EXE_LINKER_FLAGS\n            \"${CMAKE_EXE_LINKER_FLAGS} /NODEFAULTLIB:libcmt.lib\")\n        set(CMAKE_SHARED_LINKER_FLAGS\n            \"${CMAKE_SHARED_LINKER_FLAGS} /NODEFAULTLIB:libcmt.lib\")\n    endif()\n\nendif()\n\nif(${SIMD} MATCHES \"AVX\")\n    list(APPEND OSD_COMPILER_FLAGS -xAVX)\nendif()\n\nadd_definitions(${OSD_COMPILER_FLAGS})\n\n#-------------------------------------------------------------------------------\n\n# Ignore rules that will re-run cmake (this will avoid constant\n# reloading of the generated Visual Studio project).\nset(CMAKE_SUPPRESS_REGENERATION TRUE)\n\noption(PTEX_LOCATION \"Path to Ptex\" \"\")\noption(GLEW_LOCATION \"Path to GLEW\" \"\")\noption(GLFW_LOCATION \"Path to GLFW\" \"\")\n\noption(NO_LIB \"Disable the opensubdiv libs build (caveat emptor)\" OFF)\noption(NO_EXAMPLES \"Disable examples build\" OFF)\noption(NO_TUTORIALS \"Disable tutorials build\" OFF)\noption(NO_REGRESSION \"Disable regression tests build\" OFF)\noption(NO_PTEX \"Disable PTex support\" OFF)\noption(NO_DOC \"Disable documentation build\" OFF)\noption(NO_OMP \"Disable OpenMP backend\" OFF)\noption(NO_TBB \"Disable TBB backend\" OFF)\noption(NO_CUDA \"Disable CUDA backend\" OFF)\noption(NO_OPENCL \"Disable OpenCL backend\" OFF)\noption(NO_CLEW \"Disable CLEW wrapper library\" OFF)\noption(NO_OPENGL \"Disable OpenGL support\")\noption(NO_METAL \"Disable Metal support\" OFF)\noption(NO_DX \"Disable DirectX support\")\noption(NO_TESTS \"Disable all tests\")\noption(NO_GLTESTS \"Disable GL tests\")\noption(NO_GLEW \"Disable use of GLEW\" ON)\noption(NO_GLFW \"Disable components depending on GLFW\" OFF)\noption(NO_GLFW_X11 \"Disable GLFW components depending on X11\" OFF)\noption(NO_MACOS_FRAMEWORK \"Disable generation of framework on macOS\" OFF)\n\noption(OPENSUBDIV_GREGORY_EVAL_TRUE_DERIVATIVES \"Enable true derivative evaluation for Gregory basis patches\" OFF)\n\noption(BUILD_SHARED_LIBS \"Build shared libraries\" ON)\n\n# Save the current value of BUILD_SHARED_LIBS and restore it after\n# processing Find* modules, since some of the Find* modules invoked\n# below may wind up stomping over this value.\nset(build_shared_libs \"${BUILD_SHARED_LIBS}\")\n\nset(OSD_GPU FALSE)\n\n# Check for dependencies\nif(NOT NO_OMP)\n    find_package(OpenMP)\nendif()\nif(NOT NO_TBB)\n    find_package(TBB 2018 COMPONENTS tbb)\nendif()\nif (NOT NO_OPENGL)\n    find_package(OpenGL)\nendif()\nfind_package(OpenGLES)\nif(NOT NO_OPENCL)\n    if(NOT NO_CLEW)\n        find_package(CLEW)\n    endif()\n    if (NOT CLEW_FOUND)\n        find_package(OpenCL 1.1)\n    else()\n        set(OPENCL_FOUND TRUE)\n    endif()\nendif()\nif(NOT NO_CUDA)\n    find_package(CUDA 4.0)\nendif()\nif(NOT NO_GLFW AND NOT NO_OPENGL AND NOT ANDROID AND NOT IOS)\n    find_package(GLFW 3.0.0)\nendif()\nif(NOT NO_PTEX)\n   find_package(PTex 2.0)\n   find_package(ZLIB 1.2)\nendif()\nif(APPLE AND NOT NO_METAL)\n    find_package(Metal)\nendif()\nif (OPENGL_FOUND AND NOT IOS)\n    add_definitions(\n        -DOPENSUBDIV_HAS_OPENGL\n    )\n    if (NOT NO_GLEW)\n        if (APPLE)\n            find_package(GLEW)\n        else()\n            find_package(GLEW REQUIRED)\n        endif()\n    endif()\n    if(GLEW_FOUND)\n        add_definitions( -DOSD_USES_GLEW )\n    else()\n        add_definitions( -DOSD_USES_INTERNAL_GLAPILOADER )\n    endif()\nendif()\n\nif (WIN32 AND NOT NO_DX)\n   find_package(DXSDK)\nendif()\n\nif (NOT NO_DOC)\n    find_package(Doxygen 1.8.4)\n    find_package(Docutils 0.9)\nelse()\n    set(DOXYGEN_EXECUTABLE )\nendif()\n\n# Python is used optionally to process source and documentation source files.\nfind_package(Python COMPONENTS Interpreter)\n\nset(BUILD_SHARED_LIBS \"${build_shared_libs}\")\n\n# Warn about missing dependencies that will cause parts of OpenSubdiv to be\n# disabled.  Also, add preprocessor defines that can be used in the source\n# code to determine if a specific dependency is present or not.\n\nif(OPENMP_FOUND)\n    add_definitions(\n        -DOPENSUBDIV_HAS_OPENMP\n        ${OpenMP_CXX_FLAGS}\n    )\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_CXX_FLAGS}\")\nelse()\n    if (NOT NO_OMP)\n        message(WARNING\n            \"OpenMP was not found : support for OMP parallel compute kernels \"\n            \"will be disabled in Osd.  If your compiler supports OpenMP \"\n            \"directives, please refer to the FindOpenMP.cmake shared module \"\n            \"in your cmake installation.\")\n    endif()\nendif()\n\nif(TBB_FOUND)\n    add_definitions(\n        -DOPENSUBDIV_HAS_TBB\n        ${TBB_CXX_FLAGS}\n    )\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${TBB_CXX_FLAGS}\")\nelse()\n    if (NOT NO_TBB)\n        message(WARNING\n            \"TBB was not found : support for TBB parallel compute kernels \"\n            \"will be disabled in Osd.  If your environment supports TBB, \"\n            \"please make sure that TBB's CMake config is available in the \"\n            \"find_package() search path.\")\n    endif()\nendif()\n\nif( METAL_FOUND AND NOT NO_METAL)\n    set(OSD_GPU TRUE)\nendif()\n\nif( OPENGL_FOUND AND NOT NO_OPENGL)\n    set(OSD_GPU TRUE)\nendif()\n\nif(GLFW_FOUND AND (GLFW_VERSION VERSION_EQUAL 3.0 OR GLFW_VERSION VERSION_GREATER 3.0))\n    add_definitions( -DGLFW_VERSION_3 )\nendif()\n\nmacro(osd_detect_gl_version header)\n\n   if (EXISTS \"${header}\")\n       file(STRINGS \"${header}\" VERSION_4_2 REGEX \"^#define GL_VERSION_4_2.*$\")\n       if (VERSION_4_2)\n           set(OPENGL_4_2_FOUND TRUE)\n       else ()\n           message(WARNING \"OpenGL 4.2 dependent features not enabled\")\n       endif ()\n\n       file(STRINGS \"${header}\" VERSION_4_3 REGEX \"^#define GL_VERSION_4_3.*$\")\n       if (VERSION_4_3)\n           SET(OPENGL_4_3_FOUND TRUE)\n       else ()\n           message(WARNING \"OpenGL 4.3 dependent features not enabled\")\n       endif ()\n   endif ()\n\nendmacro()\n\nif(GLEW_FOUND AND GLEW_INCLUDE_DIR)\n\n    osd_detect_gl_version(${GLEW_INCLUDE_DIR}/GL/glew.h)\n    set(OPENGL_LOADER_INCLUDE_DIRS\n        ${GLEW_INCLUDE_DIR}\n        ${PROJECT_SOURCE_DIR}/glLoader)\n    set(OPENGL_LOADER_LIBRARIES\n        ${GLEW_LIBRARY}\n        OpenGL::GL\n        ${CMAKE_DL_LIBS})\n\nelseif(OPENGL_FOUND)\n\n    osd_detect_gl_version(${PROJECT_SOURCE_DIR}/glLoader/glApi.h)\n    set(OPENGL_LOADER_INCLUDE_DIRS\n        ${PROJECT_SOURCE_DIR}/glLoader)\n    set(OPENGL_LOADER_LIBRARIES\n        ${CMAKE_DL_LIBS})\n\nendif()\n\n# note : (GLSL transform feedback kernels require GL 4.2)\nif(OPENGL_4_2_FOUND)\n    add_definitions(\n        -DOPENSUBDIV_HAS_GLSL_TRANSFORM_FEEDBACK\n    )\nelse()\n    if (NOT NO_OPENGL)\n        message(WARNING\n            \"OpenGL 4.2 was not found : support for GLSL transform feedback kernels \"\n            \"will be disabled in Osd.  If you have an OpenGL SDK installed \"\n            \"(version 4.2 or above), please refer to the FindOpenGL.cmake \"\n            \"shared module in your cmake installation.\")\n    endif()\nendif()\n\n# note : (GLSL compute shader kernels require GL 4.3)\nif(OPENGL_4_3_FOUND)\n    add_definitions(\n        -DOPENSUBDIV_HAS_GLSL_COMPUTE\n    )\nelse()\n    if (NOT NO_OPENGL)\n        message(WARNING\n            \"OpenGL 4.3 was not found : support for GLSL compute shader kernels \"\n            \"will be disabled in Osd.  If you have an OpenGL SDK installed \"\n            \"(version 4.3 or above), please refer to the FindOpenGL.cmake \"\n            \"shared module in your cmake installation.\")\n    endif()\nendif()\n\nif(OPENGLES_FOUND)\n    add_definitions(\n        -DOPENSUBDIV_HAS_OPENGLES\n    )\n    set(OSD_GPU TRUE)\nendif()\n\nif(OPENCL_FOUND)\n    add_definitions(\n        -DOPENSUBDIV_HAS_OPENCL\n    )\n    if(CLEW_FOUND)\n        add_definitions(\n            -DOPENSUBDIV_HAS_CLEW\n        )\n        set(OPENCL_INCLUDE_DIRS ${CLEW_INCLUDE_DIR})\n        set(OPENCL_LIBRARIES ${CLEW_LIBRARY} ${CMAKE_DL_LIBS})\n    else()\n        if (NOT NO_CLEW)\n            message(WARNING\n                \"OpenCL was found, but CLEW was not. \"\n                \"Building with OpenCL support enabled, but the built binary \"\n                \"will not be portable to systems without OpenCL installed.\")\n        endif()\n    endif()\n\n    if (DXSDK_FOUND AND NOT NO_DX)\n        if (OPENCL_CL_D3D11_H_FOUND)\n            set(OPENCL_D3D11_INTEROP_FOUND \"YES\")\n            add_definitions(\n                -DOPENSUBDIV_HAS_OPENCL_DX_INTEROP\n                -DOPENSUBDIV_HAS_CL_D3D11_H\n            )\n        endif()\n        if (OPENCL_CL_D3D11_EXT_H_FOUND)\n            set(OPENCL_D3D11_INTEROP_FOUND \"YES\")\n            add_definitions(\n                -DOPENSUBDIV_HAS_OPENCL_DX_INTEROP\n                -DOPENSUBDIV_HAS_CL_D3D11_EXT_H\n            )\n        endif()\n    endif()\n    set(OSD_GPU TRUE)\nelse()\n    if (NOT NO_OPENCL)\n        message(WARNING\n            \"OpenCL was not found : support for OpenCL parallel compute kernels \"\n            \"will be disabled in Osd.  If you have the OpenCL SDK installed, \"\n            \"please refer to the FindOpenCL.cmake in ${PROJECT_SOURCE_DIR}/cmake.\")\n    endif()\nendif()\n\nif(CUDA_FOUND)\n    add_definitions(\n        -DOPENSUBDIV_HAS_CUDA\n        -DCUDA_ENABLE_DEPRECATED=0\n    )\n    set(OSD_GPU TRUE)\n\n    if (UNIX)\n        list( APPEND CUDA_NVCC_FLAGS -Xcompiler -fPIC )\n        # Use OSD_CUDA_NVCC_FLAGS to specify --gpu-architecture or other CUDA\n        # compilation options. The overrides here are only for compatibility\n        # with older OpenSubdiv releases and obsolete CUDA versions.\n        if (NOT DEFINED OSD_CUDA_NVCC_FLAGS)\n            if (CUDA_VERSION_MAJOR LESS 6)\n                set( OSD_CUDA_NVCC_FLAGS --gpu-architecture compute_11 )\n            elseif (CUDA_VERSION_MAJOR LESS 8)\n                set( OSD_CUDA_NVCC_FLAGS --gpu-architecture compute_20 )\n            endif()\n        endif()\n    endif()\n\n    if (DEFINED OSD_CUDA_NVCC_FLAGS)\n        list( APPEND CUDA_NVCC_FLAGS ${OSD_CUDA_NVCC_FLAGS})\n    endif()\n\nelse()\n    if (NOT NO_CUDA)\n        message(WARNING\n            \"CUDA was not found : support for CUDA parallel compute kernels \"\n            \"will be disabled in Osd.  If you have the CUDA SDK installed, please \"\n            \"refer to the FindCUDA.cmake shared module in your cmake installation.\")\n    endif()\nendif()\n\nif(PTEX_FOUND)\n    add_definitions(\n        -DOPENSUBDIV_HAS_PTEX\n        -DPTEX_STATIC\n    )\nelse()\n    if(NOT NO_PTEX)\n        message(WARNING\n            \"Ptex was not found : the OpenSubdiv Ptex example will not be \"\n            \"available.  If you do have Ptex installed and see this message, \"\n            \"please add your Ptex path to FindPTex.cmake in \"\n            \"${PROJECT_SOURCE_DIR}/cmake or set it through the PTEX_LOCATION \"\n            \"cmake command line argument or environment variable.\")\n    endif()\nendif()\n\nif( OPENSUBDIV_GREGORY_EVAL_TRUE_DERIVATIVES )\n    add_definitions(-DOPENSUBDIV_GREGORY_EVAL_TRUE_DERIVATIVES)\nendif()\n\n# Link examples & regressions against Osd\nif( BUILD_SHARED_LIBS )\n    if( OSD_GPU )\n        set( OSD_LINK_TARGET osd_dynamic_gpu osd_dynamic_cpu )\n    else()\n        set( OSD_LINK_TARGET osd_dynamic_cpu )\n    endif()\nelse()\n    if( OSD_GPU )\n        set( OSD_LINK_TARGET osd_static_gpu osd_static_cpu )\n    else()\n        set( OSD_LINK_TARGET osd_static_cpu )\n    endif()\nendif()\n\nif (WIN32)\n    if (\"${GLEW_LIBRARY}\" MATCHES \"glew32s(d|)\")\n        # Link against the static version of GLEW\n        add_definitions(\n            -DGLEW_STATIC\n        )\n    endif()\n\n    if (DXSDK_FOUND AND NOT NO_DX)\n        add_definitions(\n            -DOPENSUBDIV_HAS_DX11SDK\n        )\n        set(OSD_GPU TRUE)\n    elseif(NOT NO_DX)\n        message(WARNING\n            \"DirectX11 SDK was not found. \"\n            \"If you do have DXSDK installed and see this message, \"\n            \"please add your sdk path to FindDirectX.cmake in \"\n            \"${PROJECT_SOURCE_DIR}/cmake or set it through the \"\n            \"DXSDK_LOCATION cmake command line argument or \"\n            \"environment variable.\"\n        )\n    endif()\n\n    # Link examples & regressions statically against Osd for\n    # Windows until all the kinks can be worked out.\n    if( OSD_GPU )\n        set( OSD_LINK_TARGET osd_static_cpu osd_static_gpu )\n    else()\n        set( OSD_LINK_TARGET osd_static_cpu )\n    endif()\n\nendif()\n\n\n#-------------------------------------------------------------------------------\n# General-use macros\n\n# Macro for processing public headers into the build area for doxygen processing\n\nadd_custom_target( public_headers )\n\nmacro(osd_add_doxy_headers headers)\n    if (NOT NO_DOC AND DOXYGEN_FOUND)\n        file(RELATIVE_PATH path \"${OpenSubdiv_SOURCE_DIR}\" \"${CMAKE_CURRENT_SOURCE_DIR}\" )\n\n        string(REPLACE  \"/\" \"_\" targetpath ${path})\n\n        foreach (header ${headers})\n\n            set(infile \"${CMAKE_CURRENT_SOURCE_DIR}/${header}\")\n            set(outfile \"${OpenSubdiv_BINARY_DIR}/public_headers/${path}/${header}\")\n            set(targetname \"${targetpath}_${header}\")\n\n            add_custom_command(\n                OUTPUT\n                    \"${outfile}\"\n                COMMAND\n                    ${CMAKE_COMMAND}\n                ARGS\n                    -E copy ${infile} ${outfile}\n                DEPENDS\n                    ${infile}\n            )\n\n            add_custom_target(${targetname} DEPENDS \"${outfile}\")\n\n\n            list(APPEND headerfiles ${targetname} )\n        endforeach()\n\n        add_dependencies( public_headers ${headerfiles} )\n    endif()\nendmacro()\n\n# Kernel Stringification\n# We want to use preprocessor include directives to include GLSL, OpenCL, etc.\n# kernel source files in cpp files, but since the sources contain newline\n# characters we would need raw string literals from C++11 to do this directly.\n# To avoid depending on C++11 we instead use a small tool called \"stringify\"\n# to generate source files that are suitable for direct inclusion.\n\n# We provide a Python implementation for configurability, e.g. to\n# use when cross compiling or building multi-architecture binaries.\n# We also provide a C++ binary implementation so that Python is not\n# required (for backward compatibility).\nif (OPENGL_FOUND OR OPENCL_FOUND OR DXSDK_FOUND OR METAL_FOUND)\n    if(Python_Interpreter_FOUND)\n        set(OSD_STRINGIFY_TOOL ${CMAKE_CURRENT_SOURCE_DIR}/tools/stringify/stringify.py)\n        set(OSD_STRINGIFY ${Python_EXECUTABLE} ${OSD_STRINGIFY_TOOL})\n    else()\n        set(OSD_STRINGIFY_TOOL stringify)\n        set(OSD_STRINGIFY ${OSD_STRINGIFY_TOOL})\n        set(OSD_USES_STRINGIFY_TOOL_BINARY TRUE)\n    endif()\nendif()\n\nfunction(osd_stringify src_files varname)\n\n    set(inc_files \"\")\n\n    foreach(src_file ${src_files})\n\n        string(REGEX REPLACE \".*[.](.*)\" \"\\\\1\" extension \"${src_file}\")\n\n        string(REGEX REPLACE \"(.*)[.].*\" \"\\\\1.gen.h\" inc_file \"${src_file}\")\n        list(APPEND inc_files \"${CMAKE_CURRENT_BINARY_DIR}/${inc_file}\")\n\n        add_custom_command(\n            OUTPUT\n                \"${CMAKE_CURRENT_BINARY_DIR}/${inc_file}\"\n            COMMAND\n                ${OSD_STRINGIFY} \"${CMAKE_CURRENT_SOURCE_DIR}/${src_file}\" \"${CMAKE_CURRENT_BINARY_DIR}/${inc_file}\"\n            DEPENDS\n                ${OSD_STRINGIFY_TOOL} \"${CMAKE_CURRENT_SOURCE_DIR}/${src_file}\"\n        )\n\n    endforeach()\n    set(${varname} ${inc_files} PARENT_SCOPE)\nendfunction()\n\n# Macro wrapper for adding a non-cuda dependent executable\nmacro(osd_add_executable target folder)\n\n    add_executable(${target} ${ARGN})\n\n    set_target_properties(${target} PROPERTIES FOLDER ${folder})\n\n    if(CMAKE_COMPILER_IS_ICC)\n        target_link_libraries(${target} ${ICC_LIBRARIES})\n    endif()\n\n    if(APPLE)\n        set_property (TARGET ${target} APPEND_STRING PROPERTY\n              COMPILE_FLAGS \" -fobjc-arc \")\n    endif()\nendmacro()\n\n\n# Macro for adding a cuda executable if cuda is found and a regular\n# executable otherwise.\nmacro(osd_add_possibly_cuda_executable target folder)\n    if(CUDA_FOUND)\n        cuda_add_executable(${target} ${ARGN})\n    else()\n        add_executable(${target} ${ARGN})\n    endif()\n\n    set_target_properties(${target} PROPERTIES FOLDER ${folder})\n\n    # Workaround link dependencies for cuda examples on platforms with GLX\n    if(CUDA_FOUND AND OpenGL_GLX_FOUND)\n        target_link_libraries(${target} OpenGL::GLX)\n    endif()\n\n    if(CMAKE_COMPILER_IS_ICC)\n        target_link_libraries(${target} ${ICC_LIBRARIES})\n    endif()\n\n    if(APPLE)\n        set_property (TARGET ${target} APPEND_STRING PROPERTY\n              COMPILE_FLAGS \" -fobjc-arc \")\n    endif()\nendmacro()\n\n\n# Macro for adding a cuda library if cuda is found and a regular\n# library otherwise.\nmacro(osd_add_possibly_cuda_library target folder)\n    if(CUDA_FOUND)\n        cuda_add_library(${target} ${ARGN})\n    else()\n        add_library(${target} ${ARGN})\n    endif()\n    set_target_properties(${target} PROPERTIES FOLDER ${folder})\n\n    if(APPLE)\n        set_property (TARGET ${target} APPEND_STRING PROPERTY\n              COMPILE_FLAGS \" -fobjc-arc \")\n    endif()\nendmacro()\n\n\n# Macro for adding a (potentially cuda) GLFW executable.\nmacro(osd_add_glfw_executable target folder)\n\n    osd_add_possibly_cuda_executable(${target} ${folder} ${ARGN})\n\n    if(APPLE)\n        set_property (TARGET ${target} APPEND_STRING PROPERTY\n              COMPILE_FLAGS \" -fobjc-arc \")\n    endif()\n\nendmacro()\n\n#-------------------------------------------------------------------------------\n# Build targets\n\ninclude(GNUInstallDirs)\n\n# if you want to build examples against installed OpenSubdiv header files,\n# use OPENSUBDIV_INCLUDE_DIR.\n\n# example: if you have already installed opensubdiv libs in this cmake setup,\n# set (OPENSUBDIV_INCLUDE_DIR ${CMAKE_INSTALL_PREFIX}/${CMAKE_INCDIR_BASE})\n\nif (NOT OPENSUBDIV_INCLUDE_DIR)\n    set(OPENSUBDIV_INCLUDE_DIR \"${PROJECT_SOURCE_DIR}\")\nendif()\n\nif (NOT NO_TESTS)\n    enable_testing()\nendif()\n\nif (NOT NO_OPENGL)\n    add_subdirectory(glLoader)\nendif()\n\nif (OSD_USES_STRINGIFY_TOOL_BINARY)\n    add_subdirectory(tools/stringify)\nendif()\n\nadd_subdirectory(opensubdiv)\n\nif (NOT ANDROID) # XXXdyu\n    add_subdirectory(regression)\nendif()\n\nif (NOT NO_EXAMPLES)\n    add_subdirectory(examples)\nendif()\n\nif (NOT NO_TUTORIALS)\n    add_subdirectory(tutorials)\nendif()\n\nif (NOT NO_DOC)\n    add_subdirectory(documentation)\nendif()\n\n#\n# CMake Config.\n#\ninclude(CMakePackageConfigHelpers)\n\nset(OPENSUBDIV_CONFIG_PATH \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\")\n\nconfigure_package_config_file(\n    opensubdiv-config.cmake.in\n    ${CMAKE_CURRENT_BINARY_DIR}/OpenSubdivConfig.cmake\n    INSTALL_DESTINATION ${OPENSUBDIV_CONFIG_PATH}\n)\nwrite_basic_package_version_file(\n    ${CMAKE_CURRENT_BINARY_DIR}/OpenSubdivConfigVersion.cmake\n    VERSION ${OSD_SONAME}\n    COMPATIBILITY SameMajorVersion\n)\n\ninstall(EXPORT opensubdiv-targets\n    NAMESPACE OpenSubdiv::\n    FILE OpenSubdivTargets.cmake\n    DESTINATION ${OPENSUBDIV_CONFIG_PATH})\n\ninstall(FILES\n    ${CMAKE_CURRENT_BINARY_DIR}/OpenSubdivConfig.cmake\n    ${CMAKE_CURRENT_BINARY_DIR}/OpenSubdivConfigVersion.cmake\n    DESTINATION ${OPENSUBDIV_CONFIG_PATH}\n)\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 9.802734375,
          "content": "\n                               Modified Apache 2.0 License\n\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor\n      and its affiliates, except as required to comply with Section 4(c) of\n      the License and to reproduce the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n"
        },
        {
          "name": "NOTICE.txt",
          "type": "blob",
          "size": 0.3486328125,
          "content": "   OpenSubdiv\n   Copyright 2013 Pixar\n   All rights reserved.\n\n   This product includes software developed at:\n       Pixar (http://www.pixar.com/).\n       Dreamworks Animation (http://www.dreamworksanimation.com/)\n       Autodesk, Inc. (http://www.autodesk.com/).\n       Google, Inc. (http://www.google.com/).\n       DigitalFish (http://digitalfish.com/).\n"
        },
        {
          "name": "OpenSubdivCLA_corporate.pdf",
          "type": "blob",
          "size": 72.8525390625,
          "content": null
        },
        {
          "name": "OpenSubdivCLA_individual.pdf",
          "type": "blob",
          "size": 71.2998046875,
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.509765625,
          "content": "# OpenSubdiv\n\nOpenSubdiv is a set of open source libraries that implement high performance subdivision surface (subdiv) evaluation on massively parallel CPU and GPU architectures. This codepath is optimized for drawing deforming subdivs with static topology at interactive framerates. The resulting limit surface matches Pixar's Renderman to numerical precision.\n\nOpenSubdiv is covered by the Apache license, and is free to use for commercial or non-commercial use. This is the same code that Pixar uses internally for animated film production. Our intent is to encourage high performance accurate subdiv drawing by giving away the \"good stuff\".\n\nFeel free to use it and let us know what you think.\n\nFor more details about OpenSubdiv, see [Pixar Graphics Technologies](http://graphics.pixar.com).\n\n|         |   Linux   |  Windows  |   macOS   |\n|:-------:|:---------:|:---------:|:---------:|\n|   dev   | [![Build Status](https://dev.azure.com/PixarAnimationStudios/OpenSubdiv/_apis/build/status/PixarAnimationStudios.OpenSubdiv?branchName=dev&amp;jobName=Linux)](https://dev.azure.com/PixarAnimationStudios/OpenSubdiv/_build/latest?definitionId=2&branchName=dev) | [![Build Status](https://dev.azure.com/PixarAnimationStudios/OpenSubdiv/_apis/build/status/PixarAnimationStudios.OpenSubdiv?branchName=dev&amp;jobName=Windows)](https://dev.azure.com/PixarAnimationStudios/OpenSubdiv/_build/latest?definitionId=2&branchName=dev) | [![Build Status](https://dev.azure.com/PixarAnimationStudios/OpenSubdiv/_apis/build/status/PixarAnimationStudios.OpenSubdiv?branchName=dev&amp;jobName=macOS)](https://dev.azure.com/PixarAnimationStudios/OpenSubdiv/_build/latest?definitionId=2&branchName=dev) |\n|  release | [![Build Status](https://dev.azure.com/PixarAnimationStudios/OpenSubdiv/_apis/build/status/PixarAnimationStudios.OpenSubdiv?branchName=release&amp;jobName=Linux)](https://dev.azure.com/PixarAnimationStudios/OpenSubdiv/_build/latest?definitionId=2&branchName=release) | [![Build Status](https://dev.azure.com/PixarAnimationStudios/OpenSubdiv/_apis/build/status/PixarAnimationStudios.OpenSubdiv?branchName=release&amp;jobName=Windows)](https://dev.azure.com/PixarAnimationStudios/OpenSubdiv/_build/latest?definitionId=2&branchName=release) | [![Build Status](https://dev.azure.com/PixarAnimationStudios/OpenSubdiv/_apis/build/status/PixarAnimationStudios.OpenSubdiv?branchName=release&amp;jobName=macOS)](https://dev.azure.com/PixarAnimationStudios/OpenSubdiv/_build/latest?definitionId=2&branchName=release) |\n\n## Documents\n * [User Documents](http://graphics.pixar.com/opensubdiv/docs/intro.html)\n * [Doxygen API Documents](http://graphics.pixar.com/opensubdiv/docs/doxy_html/index.html)\n * [Release Notes](http://graphics.pixar.com/opensubdiv/docs/release_notes.html)\n\n## Forum\n * [OpenSubdiv Google Groups](https://groups.google.com/forum/embed/?place=forum/opensubdiv)\n\n## Prerequisite\n  For complete information, please refer OpenSubdiv documents:\n  [Building with CMake](http://graphics.pixar.com/opensubdiv/docs/cmake_build.html)\n\n * General requirements:\n\n| Lib                           | Min Version | Note       |\n| ----------------------------- | ----------- | ---------- |\n| [CMake](http://www.cmake.org) | 3.12        | *Required* |\n\n * Osd optional requirements:\n\n| Lib                                                                | Min Version | Note                        |\n| ------------------------------------------------------------------ | ----------- | ----------------------------|\n| [CUDA](http://developer.nvidia.com/cuda-toolkit)                   | 4.0         | cuda backend                |\n| [TBB](https://www.threadingbuildingblocks.org)                     | 2018        | TBB backend                 |\n| [OpenCL](http://www.khronos.org/opencl)                            | 1.1         | CL backend                  |\n| [DX11 SDK](http://www.microsoft.com/download/details.aspx?id=6812) |             | DX backend                  |\n| [Metal](https://developer.apple.com/metal/)                        | 1.2         | Metal backend               |\n\n * Requirements for building optional examples:\n\n| Lib                                  | Min Version | Note                              |\n| -------------------------------------| ----------- | --------------------------------- |\n| [GLFW](http://www.glfw.org)          | 3.0.0       | GL examples                       |\n| [Ptex](https://github.com/wdas/ptex) | 2.0         | ptex viewers                      |\n| [Zlib](http://www.zlib.net)          |             | (required for Ptex under windows) |\n\n * Requirements for building documentation:\n\n| Lib                                         |\n| ------------------------------------------- |\n| [Docutils](http://docutils.sourceforge.net) |\n| [Doxygen](http://www.doxygen.org)           |\n| [Graphviz](https://graphviz.gitlab.io/)     |\n\n\n## Build example to run glViewer and other example programs with minimal dependency\n\n### All platforms:\n\n  * Install cmake and GLFW\n\n   make sure GLFW install directories are configured as follows:\n\n```\n   ${GLFW_LOCATION}/include/GLFW/glfw3.h\n   ${GLFW_LOCATION}/lib/libglfw3.a (linux)\n   ${GLFW_LOCATION}/lib/glfw3.lib (windows)\n```\n\n  * Clone OpenSubdiv repository, and create a build directory.\n```\n   git clone https://github.com/PixarAnimationStudios/OpenSubdiv\n   mkdir build\n   cd build\n```\n\n### Windows (Visual Studio)\n\n```\ncmake ^\n    -G \"Visual Studio 15 2017 Win64\" ^\n    -D NO_PTEX=1 -D NO_DOC=1 ^\n    -D NO_OMP=1 -D NO_TBB=1 -D NO_CUDA=1 -D NO_OPENCL=1 -D NO_CLEW=1 ^\n    -D \"GLFW_LOCATION=*YOUR GLFW INSTALL LOCATION*\" ^\n    ..\n\ncmake --build . --config Release --target install\n```\n\n### Linux\n\n```\ncmake -D NO_PTEX=1 -D NO_DOC=1 \\\n      -D NO_OMP=1 -D NO_TBB=1 -D NO_CUDA=1 -D NO_OPENCL=1 -D NO_CLEW=1 \\\n      -D GLFW_LOCATION=\"*YOUR GLFW INSTALL LOCATION*\" \\\n      ..\n\ncmake --build . --config Release --target install\n```\n\n### macOS\n\n```\ncmake -G Xcode -D NO_PTEX=1 -D NO_DOC=1 \\\n      -D NO_OMP=1 -D NO_TBB=1 -D NO_CUDA=1 -D NO_OPENCL=1 -D NO_CLEW=1 \\\n      -D GLFW_LOCATION=\"*YOUR GLFW INSTALL LOCATION*\" \\\n      ..\n\ncmake --build . --config Release --target install\n```\n\n### iOS\n\n```\nSDKROOT=$(xcrun --sdk iphoneos --show-sdk-path) cmake -D NO_PTEX=1 -D NO_DOC=1 \\\n      -D NO_OMP=1 -D NO_TBB=1 -D NO_CUDA=1 -D NO_OPENCL=1 -D NO_CLEW=1 \\\n      -D CMAKE_TOOLCHAIN_FILE=../cmake/iOSToolchain.cmake -G Xcode \\\n      ..\n```\n\n  * This will produce an \"OpenSubdiv.xcodeproj\" that can be open and the targets 'mtlViewer' and 'mtlPtexViewer' (if NO_PTEX is ommitted and libPtex.a is installed in the iOS SDK) that can be run\n\n### Useful cmake options and environment variables\n\n````\n-DCMAKE_BUILD_TYPE=[Debug|Release]\n\n-DCMAKE_INSTALL_PREFIX=[base path to install OpenSubdiv]\n-DCMAKE_LIBDIR_BASE=[library directory basename (default: lib)]\n-DCMAKE_TOOLCHAIN_FILE=[toolchain file for crossplatform builds]\n\n-DCUDA_TOOLKIT_ROOT_DIR=[path to CUDA Toolkit]\n-DOSD_CUDA_NVCC_FLAGS=[CUDA options, e.g. --gpu-architecture]\n\n-DPTEX_LOCATION=[path to Ptex]\n-DGLFW_LOCATION=[path to GLFW]\n-DSTRINGIFY_LOCATION=[path to stringify utility]\n\n-DNO_LIB=1        // disable the opensubdiv libs build (caveat emptor)\n-DNO_EXAMPLES=1   // disable examples build\n-DNO_TUTORIALS=1  // disable tutorials build\n-DNO_REGRESSION=1 // disable regression tests build\n-DNO_PTEX=1       // disable PTex support\n-DNO_DOC=1        // disable documentation build\n-DNO_OMP=1        // disable OpenMP\n-DNO_TBB=1        // disable TBB\n-DNO_CUDA=1       // disable CUDA\n-DNO_OPENCL=1     // disable OpenCL\n-DNO_OPENGL=1     // disable OpenGL\n-DNO_CLEW=1       // disable CLEW wrapper library\n-DNO_METAL=1      // disable Metal\n````\n\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 2.326171875,
          "content": "trigger:\n- release\n- dev\n\njobs:\n- job: Linux\n  pool:\n    vmImage: 'ubuntu-20.04'\n  steps:\n  - script: |\n      sudo apt-get -qq update;\n      sudo pip install --upgrade pip\n      sudo apt-get install python-setuptools;\n      sudo apt-get install libglew-dev libxrandr-dev libxxf86vm-dev libxcursor-dev libxinerama-dev libxi-dev\n      sudo python build_scripts/build_osd.py --tests --tbb --omp --build $HOME/OSDgen/build --src $HOME/OSDgen/src $HOME/OSDinst\n    displayName: 'Building OpenSubdiv'\n  - script: |\n      cd $HOME/OSDgen/build/s\n      sudo ctest -T test -R \"bfr|far\"\n    displayName: 'Testing OpenSubdiv'\n  - task: PublishTestResults@2\n    inputs:\n      testResultsFormat: cTest\n      testResultsFiles: /home/vsts/OSDgen/build/s/Testing/*/Test.xml\n  - task: PublishPipelineArtifact@0\n    inputs:\n      artifactName: 'osd-linux'\n      targetPath: \"/home/vsts/OSDinst\"\n\n\n- job: macOS\n  pool:\n    vmImage: 'macOS-11'\n  steps:\n  - script: |\n      /bin/bash -c \"sudo xcode-select -s /Applications/Xcode_13.2.app/Contents/Developer\"\n      python build_scripts/build_osd.py --tests --tbb --generator Xcode --build $HOME/OSDgen/build --src $HOME/OSDgen/src $HOME/OSDinst\n    displayName: 'Building OpenSubdiv'\n  - script: |\n      cd $HOME/OSDgen/build/s\n      ctest -T test -R \"bfr|far\"\n    displayName: 'Testing OpenSubdiv'\n  - task: PublishTestResults@2\n    inputs:\n      testResultsFormat: cTest\n      testResultsFiles: /Users/runner/OSDgen/build/s/Testing/*/Test.xml\n  - task: PublishPipelineArtifact@0\n    inputs:\n      artifactName: 'osd-macOS'\n      targetPath: \"/Users/runner/OSDinst\"\n\n- job: Windows\n  pool:\n    vmImage: 'windows-2019'\n  steps:\n  - script: |\n      call C:\\\"Program Files (x86)\"\\\"Microsoft Visual Studio\"\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat\n      call set PATH=C:/Python27amd64;C:/Python27amd64/Scripts;%PATH%\n      call python build_scripts/build_osd.py --tests --tbb --omp --build %HOME%/OSDgen/build --src %HOME%/OSDgen/src %HOME%/OSDinst\n    displayName: 'Building OpenSubdiv'\n  - script: |\n      cd %HOME%/OSDgen/build/s\n      ctest -T test -R \"bfr|far\"\n    displayName: 'Testing OpenSubdiv'\n  - task: PublishTestResults@2\n    inputs:\n      testResultsFormat: cTest\n      testResultsFiles: D:/OSDgen/build/s/Testing/*/Test.xml\n  - task: PublishPipelineArtifact@0\n    inputs:\n      artifactName: 'osd-win64'\n      targetPath: \"D:/OSDinst\"\n"
        },
        {
          "name": "build_scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "glLoader",
          "type": "tree",
          "content": null
        },
        {
          "name": "opensubdiv-config.cmake.in",
          "type": "blob",
          "size": 0.2421875,
          "content": "@PACKAGE_INIT@\n\nset_and_check(OpenSubdiv_INCLUDE_DIR \"${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_INCLUDEDIR@\")\nset_and_check(OpenSubdiv_LIB_DIR \"${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_LIBDIR@\")\n\ninclude(\"${CMAKE_CURRENT_LIST_DIR}/OpenSubdivTargets.cmake\")\n"
        },
        {
          "name": "opensubdiv",
          "type": "tree",
          "content": null
        },
        {
          "name": "regression",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "tutorials",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}