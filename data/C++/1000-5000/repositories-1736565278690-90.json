{
  "metadata": {
    "timestamp": 1736565278690,
    "page": 90,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sass/libsass",
      "stars": 4341,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.283203125,
          "content": "# This file is for unifying the coding style for different editors and IDEs\n# editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\nindent_size = 2\n\n[{Makefile,GNUmakefile.am}]\nindent_style = tab\nindent_size = 4\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.064453125,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0283203125,
          "content": "# Miscellaneous stuff\n\n/sassc\n/sass-spec\n/plugins/\n\nVERSION\n.DS_Store\n.sass-cache\n*.gem\n*.gcno\n.svn/*\n.cproject\n.project\n.settings/\n*.db\n*.aps\n\n# Configuration stuff\n\nGNUmakefile.in\nGNUmakefile\n/aclocal.m4\n/autom4te.cache/\n/src/config.h\n/config.h.in\n/config.log\n/config.status\n/configure\n/libtool\n/m4/libtool.m4\n/m4/ltoptions.m4\n/m4/ltsugar.m4\n/m4/ltversion.m4\n/m4/lt~obsolete.m4\n/script/ar-lib\n/script/compile\n/script/config.guess\n/script/config.sub\n/script/depcomp\n/script/install-sh\n/script/ltmain.sh\n/script/missing\n/script/test-driver\n/src/stamp-h1\n/src/Makefile.in\n/src/Makefile\nlibsass/*\n\n# Build stuff\n\n*.o\n*.lo\n*.so\n*.dll\n*.a\n*.suo\n*.sdf\n*.opendb\n*.opensdf\na.out\nlibsass.js\ntester\ntester.exe\nbuild/\nconfig.h.in*\nlib/pkgconfig/\n\nbin/*\n.deps/\n.libs/\nwin/bin\n*.user\nwin/*.db\n\n# Final results\n\nsassc++\nlibsass.la\nsrc/support/libsass.pc\n\n# Cloned testing dirs\nsassc/\nsass-spec/\n\ninstaller/\n\n# Visual Studio cache directory\n.vs/\n\n# Visual Studio Code\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.5244140625,
          "content": "Sass is more than a technology; Sass is driven by the community of individuals\nthat power its development and use every day. As a community, we want to embrace\nthe very differences that have made our collaboration so powerful, and work\ntogether to provide the best environment for learning, growing, and sharing of\nideas. It is imperative that we keep Sass a fun, welcoming, challenging, and\nfair place to play.\n\n[The full community guidelines can be found on the Sass website.][link]\n\n[link]: https://sass-lang.com/community-guidelines\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.21484375,
          "content": "\nCopyright (C) 2012 by Hampton Catlin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\nThe following files in the spec were taken from the original Ruby Sass project which\nis copyright Hampton Catlin, Nathan Weizenbaum, and Chris Eppstein and under\nthe same license.\n"
        },
        {
          "name": "GNUmakefile.am",
          "type": "blob",
          "size": 2.61328125,
          "content": "ACLOCAL_AMFLAGS = ${ACLOCAL_FLAGS} -I m4 -I script\n\nAM_COPT = -Wall -O2\nAM_COVLDFLAGS =\n\nif ENABLE_COVERAGE\n\tAM_COPT = -Wall -O1 -fno-omit-frame-pointer --coverage\n\tAM_COVLDFLAGS += -lgcov\nendif\n\nAM_CPPFLAGS = -I$(top_srcdir)/include\nAM_CFLAGS   = $(AM_COPT)\nAM_CXXFLAGS = $(AM_COPT)\nAM_LDFLAGS  = $(AM_COPT) $(AM_COVLDFLAGS)\n\n# only needed to support old source tree\n# we have moved the files to src folder\nAM_CPPFLAGS += -I$(top_srcdir)\n\nRESOURCES =\nAM_CXXFLAGS += -std=c++11\nif COMPILER_IS_MINGW32\n  RESOURCES += res/libsass.rc\nendif\n\nTEST_EXTENSIONS = .rb\n\nif ENABLE_TESTS\n\nSASS_SASSC_PATH ?= $(top_srcdir)/sassc\nSASS_SPEC_PATH ?= $(top_srcdir)/sass-spec\nLIBSASS_SPEC_PATH ?= $(top_srcdir)/libsass-spec\n\nnoinst_PROGRAMS = tester\ntester_LDADD = src/libsass.la\ntester_LDFLAGS = $(AM_LDFLAGS)\nnodist_tester_SOURCES = $(SASS_SASSC_PATH)/sassc.c\nSASS_SASSC_VERSION ?= `cd \"$(SASS_SASSC_PATH)\" && ./version.sh`\ntester_CFLAGS = $(AM_CFLAGS) -DSASSC_VERSION=\"\\\"$(SASS_SASSC_VERSION)\\\"\"\ntester_CXXFLAGS = $(AM_CXXFLAGS) -DSASSC_VERSION=\"\\\"$(SASS_SASSC_VERSION)\\\"\"\n\nif ENABLE_COVERAGE\nnodist_EXTRA_tester_SOURCES = non-existent-file-to-force-CXX-linking.cxx\nendif\n\nTESTS = $(SASS_SPEC_PATH)/sass-spec.rb\nRB_LOG_COMPILER = ./script/tap-runner\nAM_RB_LOG_FLAGS = $(RUBY)\n\nSASS_TEST_FLAGS = --impl libsass\nSASS_TEST_FLAGS += -r $(SASS_SPEC_PATH)/spec\nSASS_TEST_FLAGS += -c $(top_srcdir)/tester$(EXEEXT)\nLIBSASS_TEST_FLAGS = --impl libsass\nLIBSASS_TEST_FLAGS += -r $(LIBSASS_SPEC_PATH)/spec\nLIBSASS_TEST_FLAGS += -c $(top_srcdir)/tester$(EXEEXT)\nCOMPRESSED_TEST_FLAGS = --impl libsass\nCOMPRESSED_TEST_FLAGS += -r $(LIBSASS_SPEC_PATH)/styles/compressed\nCOMPRESSED_TEST_FLAGS += -c $(top_srcdir)/tester$(EXEEXT)\nCOMPRESSED_TEST_FLAGS += --cmd-args=\"-t compressed\"\nAM_TESTS_ENVIRONMENT = TEST_FLAGS='$(SASS_TEST_FLAGS)'\n\nSASS_TESTER = $(RUBY) $(SASS_SPEC_PATH)/sass-spec.rb\n\ntest:\n\t$(SASS_TESTER) $(SASS_TEST_FLAGS)\n\t$(SASS_TESTER) $(LIBSASS_TEST_FLAGS)\n\t$(SASS_TESTER) $(COMPRESSED_TEST_FLAGS)\n\ntest_build:\n\t$(SASS_TESTER) $(SASS_TEST_FLAGS)\n\t$(SASS_TESTER) $(LIBSASS_TEST_FLAGS)\n\t$(SASS_TESTER) $(COMPRESSED_TEST_FLAGS)\n\ntest_full:\n\t$(SASS_TESTER) --run-todo $(SASS_TEST_FLAGS)\n\t$(SASS_TESTER) --run-todo $(LIBSASS_TEST_FLAGS)\n\t$(SASS_TESTER) --run-todo $(COMPRESSED_TEST_FLAGS)\n\ntest_probe:\n\t$(SASS_TESTER) --probe-todo $(SASS_TEST_FLAGS)\n\t$(SASS_TESTER) --probe-todo $(LIBSASS_TEST_FLAGS)\n\t$(SASS_TESTER) --probe-todo $(COMPRESSED_TEST_FLAGS)\n\ntest_interactive:\n\t$(SASS_TESTER) --interactive $(SASS_TEST_FLAGS)\n\t$(SASS_TESTER) --interactive $(LIBSASS_TEST_FLAGS)\n\t$(SASS_TESTER) --interactive $(COMPRESSED_TEST_FLAGS)\n\n.PHONY: test test_build test_full test_probe\n\nendif\n\nSUBDIRS = src\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 0.0478515625,
          "content": "// Autotools requires us to have this file. Boo.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.236328125,
          "content": "\nCopyright (C) 2012-2016 by the Sass Open Source Foundation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\nThe following files in the spec were taken from the original Ruby Sass project which\nis copyright Hampton Catlin, Nathan Weizenbaum, and Chris Eppstein and under\nthe same license.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 11.26171875,
          "content": "OS       ?= $(shell uname -s)\nCC       ?= cc\nCXX      ?= c++\nRM       ?= rm -f\nCP       ?= cp -a\nMKDIR    ?= mkdir\nRMDIR    ?= rmdir\nWINDRES  ?= windres\n# Solaris/Illumos flavors\n# ginstall from coreutils\nifeq ($(OS),SunOS)\nINSTALL  ?= ginstall\nendif\nINSTALL  ?= install\nCFLAGS   ?= -Wall\nCXXFLAGS ?= -Wall\nLDFLAGS  ?= -Wall\nifndef COVERAGE\n  CFLAGS   += -O2\n  CXXFLAGS += -O2\n  LDFLAGS  += -O2\nelse\n  CFLAGS   += -O1 -fno-omit-frame-pointer\n  CXXFLAGS += -O1 -fno-omit-frame-pointer\n  LDFLAGS  += -O1 -fno-omit-frame-pointer\nendif\nCAT ?= $(if $(filter $(OS),Windows_NT),type,cat)\n\nifneq (,$(findstring /cygdrive/,$(PATH)))\n\tUNAME := Cygwin\nelse\nifneq (,$(findstring Windows_NT,$(OS)))\n\tUNAME := Windows\nelse\nifneq (,$(findstring mingw32,$(MAKE)))\n\tUNAME := Windows\nelse\nifneq (,$(findstring MINGW32,$(shell uname -s)))\n\tUNAME := Windows\nelse\n\tUNAME := $(shell uname -s)\nendif\nendif\nendif\nendif\n\nifndef LIBSASS_VERSION\n\tifneq ($(wildcard ./.git/ ),)\n\t\tLIBSASS_VERSION ?= $(shell git describe --abbrev=4 --dirty --always --tags)\n\tendif\n\tifneq ($(wildcard VERSION),)\n\t\tLIBSASS_VERSION ?= $(shell $(CAT) VERSION)\n\tendif\nendif\nifdef LIBSASS_VERSION\n\tCFLAGS   += -DLIBSASS_VERSION=\"\\\"$(LIBSASS_VERSION)\\\"\"\n\tCXXFLAGS += -DLIBSASS_VERSION=\"\\\"$(LIBSASS_VERSION)\\\"\"\nendif\n\nLIBSASS_CPPSTD ?= c++11\nCXXFLAGS += -std=$(LIBSASS_CPPSTD)\nLDFLAGS  += -std=$(LIBSASS_CPPSTD)\n\nifeq (Windows,$(UNAME))\n\tifneq ($(BUILD),shared)\n\t\tSTATIC_ALL     ?= 1\n\tendif\n\tSTATIC_LIBGCC    ?= 1\n\tSTATIC_LIBSTDCPP ?= 1\nelse\n\tSTATIC_ALL       ?= 0\n\tSTATIC_LIBGCC    ?= 0\n\tSTATIC_LIBSTDCPP ?= 0\nendif\n\nifndef SASS_LIBSASS_PATH\n\tSASS_LIBSASS_PATH = $(CURDIR)\nendif\nifdef SASS_LIBSASS_PATH\n\tCFLAGS   += -I $(SASS_LIBSASS_PATH)/include\n\tCXXFLAGS += -I $(SASS_LIBSASS_PATH)/include\nelse\n\t# this is needed for mingw\n\tCFLAGS   += -I include\n\tCXXFLAGS += -I include\nendif\n\nCFLAGS   += $(EXTRA_CFLAGS)\nCXXFLAGS += $(EXTRA_CXXFLAGS)\nLDFLAGS  += $(EXTRA_LDFLAGS)\n\nLDLIBS = -lm\nifneq ($(BUILD),shared)\n\tifneq ($(STATIC_LIBSTDCPP),1)\n\t\tLDLIBS += -lstdc++\n\tendif\nendif\n\n# link statically into lib\n# makes it a lot more portable\n# increases size by about 50KB\nifeq ($(STATIC_ALL),1)\n\tLDFLAGS += -static\nendif\nifeq ($(STATIC_LIBGCC),1)\n\tLDFLAGS += -static-libgcc\nendif\nifeq ($(STATIC_LIBSTDCPP),1)\n\tLDFLAGS += -static-libstdc++\nendif\n\nifeq ($(UNAME),Darwin)\n\tCFLAGS += -stdlib=libc++\n\tCXXFLAGS += -stdlib=libc++\n\tLDFLAGS += -stdlib=libc++\nendif\n\nifneq (Windows,$(UNAME))\n\tifneq (FreeBSD,$(UNAME))\n\t\tifneq (OpenBSD,$(UNAME))\n\t\t\tLDFLAGS += -ldl\n\t\t\tLDLIBS += -ldl\n\t\tendif\n\tendif\nendif\n\nifneq ($(BUILD),shared)\n\tBUILD := static\nendif\nifeq ($(DEBUG),1)\n\tBUILD := debug-$(BUILD)\nendif\n\nifndef TRAVIS_BUILD_DIR\n\tifeq ($(OS),SunOS)\n\t\tPREFIX ?= /opt/local\n\telse\n\t\tPREFIX ?= /usr/local\n\tendif\nelse\n\tPREFIX ?= $(TRAVIS_BUILD_DIR)\nendif\n\nSASS_SASSC_PATH ?= sassc\nSASS_SPEC_PATH ?= sass-spec\nSASS_SPEC_SPEC_DIR ?= spec\nLIBSASS_SPEC_PATH ?= libsass-spec\nLIBSASS_SPEC_SPEC_DIR ?= spec\nSASSC_BIN = $(SASS_SASSC_PATH)/bin/sassc\nRUBY_BIN = ruby\n\nRESOURCES =\nSTATICLIB = lib/libsass.a\nSHAREDLIB = lib/libsass.so\nLIB_STATIC = $(SASS_LIBSASS_PATH)/lib/libsass.a\nLIB_SHARED = $(SASS_LIBSASS_PATH)/lib/libsass.so\nifeq ($(UNAME),Darwin)\n\tSHAREDLIB = lib/libsass.dylib\n\tLIB_SHARED = $(SASS_LIBSASS_PATH)/lib/libsass.dylib\nendif\nifeq (Windows,$(UNAME))\n\tSASSC_BIN = $(SASS_SASSC_PATH)/bin/sassc.exe\n\tRESOURCES += res/resource.rc\n\tSHAREDLIB  = lib/libsass.dll\n\tifeq (shared,$(BUILD))\n\t\tCFLAGS    += -D ADD_EXPORTS\n\t\tCXXFLAGS  += -D ADD_EXPORTS\n\t\tLIB_SHARED  = $(SASS_LIBSASS_PATH)/lib/libsass.dll\n\tendif\nelse\nifneq (Cygwin,$(UNAME))\n\tCFLAGS   += -fPIC\n\tCXXFLAGS += -fPIC\n\tLDFLAGS  += -fPIC\nendif\nendif\n\ninclude Makefile.conf\nOBJECTS = $(addprefix src/,$(SOURCES:.cpp=.o))\nCOBJECTS = $(addprefix src/,$(CSOURCES:.c=.o))\nRCOBJECTS = $(RESOURCES:.rc=.o)\n\nDEBUG_LVL ?= NONE\n\nCLEANUPS ?=\nCLEANUPS += $(RCOBJECTS)\nCLEANUPS += $(COBJECTS)\nCLEANUPS += $(OBJECTS)\nCLEANUPS += $(LIBSASS_LIB)\n\nall: $(BUILD)\n\ndebug: $(BUILD)\n\ndebug-static: LDFLAGS := -g $(filter-out -O2,$(LDFLAGS))\ndebug-static: CFLAGS := -g -DDEBUG -DDEBUG_LVL=\"$(DEBUG_LVL)\" $(filter-out -O2,$(CFLAGS))\ndebug-static: CXXFLAGS := -g -DDEBUG -DDEBUG_LVL=\"$(DEBUG_LVL)\" $(filter-out -O2,$(CXXFLAGS))\ndebug-static: static\n\ndebug-shared: LDFLAGS := -g $(filter-out -O2,$(LDFLAGS))\ndebug-shared: CFLAGS := -g -DDEBUG -DDEBUG_LVL=\"$(DEBUG_LVL)\" $(filter-out -O2,$(CFLAGS))\ndebug-shared: CXXFLAGS := -g -DDEBUG -DDEBUG_LVL=\"$(DEBUG_LVL)\" $(filter-out -O2,$(CXXFLAGS))\ndebug-shared: shared\n\nlib:\n\t$(MKDIR) lib\n\nlib/libsass.a: $(COBJECTS) $(OBJECTS) | lib\n\t$(AR) rcvs $@ $(COBJECTS) $(OBJECTS)\n\nlib/libsass.so: $(COBJECTS) $(OBJECTS) | lib\n\t$(CXX) -shared $(LDFLAGS) -o $@ $(COBJECTS) $(OBJECTS) $(LDLIBS)\n\nlib/libsass.dylib: $(COBJECTS) $(OBJECTS) | lib\n\t$(CXX) -shared $(LDFLAGS) -o $@ $(COBJECTS) $(OBJECTS) $(LDLIBS) \\\n\t-install_name @rpath/libsass.dylib\n\nlib/libsass.dll: $(COBJECTS) $(OBJECTS) $(RCOBJECTS) | lib\n\t$(CXX) -shared $(LDFLAGS) -o $@ $(COBJECTS) $(OBJECTS) $(RCOBJECTS) $(LDLIBS) \\\n\t-s -Wl,--subsystem,windows,--out-implib,lib/libsass.a\n\n%.o: %.c\n\t$(CC) $(CFLAGS) -c -o $@ $<\n\n%.o: %.rc\n\t$(WINDRES) -i $< -o $@\n\n%.o: %.cpp\n\t$(CXX) $(CXXFLAGS) -c -o $@ $<\n\n%: %.o static\n\t$(CXX) $(CXXFLAGS) -o $@ $+ $(LDFLAGS) $(LDLIBS)\n\ninstall: install-$(BUILD)\n\nstatic: $(STATICLIB)\nshared: $(SHAREDLIB)\n\n$(DESTDIR)$(PREFIX):\n\t$(MKDIR) $(DESTDIR)$(PREFIX)\n\n$(DESTDIR)$(PREFIX)/lib: | $(DESTDIR)$(PREFIX)\n\t$(MKDIR) $(DESTDIR)$(PREFIX)/lib\n\n$(DESTDIR)$(PREFIX)/include: | $(DESTDIR)$(PREFIX)\n\t$(MKDIR) $(DESTDIR)$(PREFIX)/include\n\n$(DESTDIR)$(PREFIX)/include/sass: | $(DESTDIR)$(PREFIX)/include\n\t$(MKDIR) $(DESTDIR)$(PREFIX)/include/sass\n\n$(DESTDIR)$(PREFIX)/include/%.h: include/%.h \\\n                                 | $(DESTDIR)$(PREFIX)/include/sass\n\t$(INSTALL) -v -m0644 \"$<\" \"$@\"\n\ninstall-headers: $(DESTDIR)$(PREFIX)/include/sass.h \\\n                 $(DESTDIR)$(PREFIX)/include/sass2scss.h \\\n                 $(DESTDIR)$(PREFIX)/include/sass/base.h \\\n                 $(DESTDIR)$(PREFIX)/include/sass/version.h \\\n                 $(DESTDIR)$(PREFIX)/include/sass/values.h \\\n                 $(DESTDIR)$(PREFIX)/include/sass/context.h \\\n                 $(DESTDIR)$(PREFIX)/include/sass/functions.h\n\n$(DESTDIR)$(PREFIX)/lib/%.a: lib/%.a \\\n                             | $(DESTDIR)$(PREFIX)/lib\n\t@$(INSTALL) -v -m0755 \"$<\" \"$@\"\n\n$(DESTDIR)$(PREFIX)/lib/%.so: lib/%.so \\\n                             | $(DESTDIR)$(PREFIX)/lib\n\t@$(INSTALL) -v -m0755 \"$<\" \"$@\"\n\n$(DESTDIR)$(PREFIX)/lib/%.dll: lib/%.dll \\\n                               | $(DESTDIR)$(PREFIX)/lib\n\t@$(INSTALL) -v -m0755 \"$<\" \"$@\"\n\n$(DESTDIR)$(PREFIX)/lib/%.dylib: lib/%.dylib \\\n                               | $(DESTDIR)$(PREFIX)/lib\n\t@$(INSTALL) -v -m0755 \"$<\" \"$@\"\n\ninstall-static: $(DESTDIR)$(PREFIX)/lib/libsass.a\n\ninstall-shared: $(DESTDIR)$(PREFIX)/$(SHAREDLIB) \\\n                install-headers\n\n$(SASSC_BIN): $(BUILD)\n\t$(MAKE) -C $(SASS_SASSC_PATH) build-$(BUILD)\n\nsassc: $(SASSC_BIN)\n\t$(SASSC_BIN) -v\n\nversion: $(SASSC_BIN)\n\t$(SASSC_BIN) -v\n\ntest: test_build\n\n$(SASS_SPEC_PATH):\n\tgit clone https://github.com/sass/sass-spec $(SASS_SPEC_PATH)\n\n$(LIBSASS_SPEC_PATH):\n\tgit clone https://github.com/mgreter/libsass-spec $(LIBSASS_SPEC_PATH)\n\ntest_build: $(SASSC_BIN) $(SASS_SPEC_PATH) $(LIBSASS_SPEC_PATH)\n\t$(RUBY_BIN) $(SASS_SPEC_PATH)/sass-spec.rb -c $(SASSC_BIN) --impl libsass \\\n\t--cmd-args \"-I $(SASS_SPEC_PATH)/$(SASS_SPEC_SPEC_DIR)\" \\\n\t$(LOG_FLAGS) $(SASS_SPEC_PATH)/$(SASS_SPEC_SPEC_DIR)\n\t$(RUBY_BIN) $(SASS_SPEC_PATH)/sass-spec.rb -c $(SASSC_BIN) --impl libsass \\\n\t--cmd-args \"-I $(LIBSASS_SPEC_PATH)/$(LIBSASS_SPEC_SPEC_DIR)\" \\\n\t$(LOG_FLAGS) $(LIBSASS_SPEC_PATH)/$(LIBSASS_SPEC_SPEC_DIR)\n\t$(RUBY_BIN) $(SASS_SPEC_PATH)/sass-spec.rb -c $(SASSC_BIN) --impl libsass \\\n\t--cmd-args \"-I $(LIBSASS_SPEC_PATH)/styles/compressed -t compressed\" \\\n\t$(LOG_FLAGS) $(LIBSASS_SPEC_PATH)/styles/compressed\n\t$(RUBY_BIN) $(SASS_SPEC_PATH)/sass-spec.rb -c $(SASSC_BIN) --impl libsass \\\n\t--cmd-args \"-I $(LIBSASS_SPEC_PATH)/styles/nested -t nested\" \\\n\t$(LOG_FLAGS) $(LIBSASS_SPEC_PATH)/styles/nested\n\ntest_full: $(SASSC_BIN) $(SASS_SPEC_PATH) $(LIBSASS_SPEC_PATH)\n\t$(RUBY_BIN) $(SASS_SPEC_PATH)/sass-spec.rb -c $(SASSC_BIN) --impl libsass \\\n\t--cmd-args \"-I $(SASS_SPEC_PATH)/$(SASS_SPEC_SPEC_DIR)\" \\\n\t--run-todo $(LOG_FLAGS) $(SASS_SPEC_PATH)/$(SASS_SPEC_SPEC_DIR)\n\t$(RUBY_BIN) $(SASS_SPEC_PATH)/sass-spec.rb -c $(SASSC_BIN) --impl libsass \\\n\t--cmd-args \"-I $(LIBSASS_SPEC_PATH)/$(LIBSASS_SPEC_SPEC_DIR)\" \\\n\t--run-todo $(LOG_FLAGS) $(LIBSASS_SPEC_PATH)/$(LIBSASS_SPEC_SPEC_DIR)\n\t$(RUBY_BIN) $(SASS_SPEC_PATH)/sass-spec.rb -c $(SASSC_BIN) --impl libsass \\\n\t--cmd-args \"-I $(LIBSASS_SPEC_PATH)/styles/compressed -t compressed\" \\\n\t--run-todo $(LOG_FLAGS) $(LIBSASS_SPEC_PATH)/styles/compressed\n\t$(RUBY_BIN) $(SASS_SPEC_PATH)/sass-spec.rb -c $(SASSC_BIN) --impl libsass \\\n\t--cmd-args \"-I $(LIBSASS_SPEC_PATH)/styles/nested -t nested\" \\\n\t--run-todo $(LOG_FLAGS) $(LIBSASS_SPEC_PATH)/styles/nested\n\ntest_probe: $(SASSC_BIN) $(SASS_SPEC_PATH) $(LIBSASS_SPEC_PATH)\n\t$(RUBY_BIN) $(SASS_SPEC_PATH)/sass-spec.rb -c $(SASSC_BIN) --impl libsass \\\n\t--cmd-args \"-I $(SASS_SPEC_PATH)/$(SASS_SPEC_SPEC_DIR)\" \\\n\t--probe-todo $(LOG_FLAGS) $(SASS_SPEC_PATH)/$(SASS_SPEC_SPEC_DIR)\n\t$(RUBY_BIN) $(SASS_SPEC_PATH)/sass-spec.rb -c $(SASSC_BIN) --impl libsass \\\n\t--cmd-args \"-I $(LIBSASS_SPEC_PATH)/$(LIBSASS_SPEC_SPEC_DIR)\" \\\n\t--probe-todo $(LOG_FLAGS) $(LIBSASS_SPEC_PATH)/$(LIBSASS_SPEC_SPEC_DIR)\n\t$(RUBY_BIN) $(SASS_SPEC_PATH)/sass-spec.rb -c $(SASSC_BIN) --impl libsass \\\n\t--cmd-args \"-I $(LIBSASS_SPEC_PATH)/styles/compressed -t compressed\" \\\n\t--probe-todo $(LOG_FLAGS) $(LIBSASS_SPEC_PATH)/styles/compressed\n\t$(RUBY_BIN) $(SASS_SPEC_PATH)/sass-spec.rb -c $(SASSC_BIN) --impl libsass \\\n\t--cmd-args \"-I $(LIBSASS_SPEC_PATH)/styles/nested -t nested\" \\\n\t--probe-todo $(LOG_FLAGS) $(LIBSASS_SPEC_PATH)/styles/nested\n\ntest_interactive: $(SASSC_BIN) $(SASS_SPEC_PATH) $(LIBSASS_SPEC_PATH)\n\t$(RUBY_BIN) $(SASS_SPEC_PATH)/sass-spec.rb -c $(SASSC_BIN) --impl libsass \\\n\t--cmd-args \"-I $(SASS_SPEC_PATH)/$(SASS_SPEC_SPEC_DIR)\" \\\n\t--interactive $(LOG_FLAGS) $(SASS_SPEC_PATH)/$(SASS_SPEC_SPEC_DIR)\n\t$(RUBY_BIN) $(SASS_SPEC_PATH)/sass-spec.rb -c $(SASSC_BIN) --impl libsass \\\n\t--cmd-args \"-I $(LIBSASS_SPEC_PATH)/$(LIBSASS_SPEC_SPEC_DIR)\" \\\n\t--interactive $(LOG_FLAGS) $(LIBSASS_SPEC_PATH)/$(LIBSASS_SPEC_SPEC_DIR)\n\t$(RUBY_BIN) $(SASS_SPEC_PATH)/sass-spec.rb -c $(SASSC_BIN) --impl libsass \\\n\t--cmd-args \"-I $(LIBSASS_SPEC_PATH)/styles/compressed -t compressed\" \\\n\t--interactive $(LOG_FLAGS) $(LIBSASS_SPEC_PATH)/styles/compressed\n\t$(RUBY_BIN) $(SASS_SPEC_PATH)/sass-spec.rb -c $(SASSC_BIN) --impl libsass \\\n\t--cmd-args \"-I $(LIBSASS_SPEC_PATH)/styles/nested -t nested\" \\\n\t--interactive $(LOG_FLAGS) $(LIBSASS_SPEC_PATH)/styles/nested\n\nclean-objects: | lib\n\t-$(RM) lib/*.a lib/*.so lib/*.dll lib/*.dylib lib/*.la\n\t-$(RMDIR) lib\nclean: clean-objects\n\t$(RM) $(CLEANUPS)\n\nclean-all:\n\t$(MAKE) -C $(SASS_SASSC_PATH) clean\n\nlib-file: lib-file-$(BUILD)\nlib-opts: lib-opts-$(BUILD)\n\nlib-file-static:\n\t@echo $(LIB_STATIC)\nlib-file-shared:\n\t@echo $(LIB_SHARED)\nlib-opts-static:\n\t@echo -L\"$(SASS_LIBSASS_PATH)/lib\"\nlib-opts-shared:\n\t@echo -L\"$(SASS_LIBSASS_PATH)/lib -lsass\"\n\n.PHONY: all static shared sassc \\\n        version install-headers \\\n        clean clean-all clean-objects \\\n        debug debug-static debug-shared \\\n        install install-static install-shared \\\n        lib-opts lib-opts-shared lib-opts-static \\\n        lib-file lib-file-shared lib-file-static \\\n        test test_build test_full test_probe\n.DELETE_ON_ERROR:\n"
        },
        {
          "name": "Makefile.conf",
          "type": "blob",
          "size": 2.767578125,
          "content": "# this is merely a common Makefile multiple implementers can use\n# bigger files (in terms of compile time) tend to go to the top,\n# so they don't end up as the last compile unit when compiling\n# in parallel. But we also want to mix them a little too avoid\n# heavy RAM usage peaks. Other than that the order is arbitrary.\n\n\nINCFILES = \\\n\tsass.h \\\n\tsass2scss.h \\\n\tsass/base.h \\\n\tsass/context.h \\\n\tsass/functions.h \\\n\tsass/values.h \\\n\tsass/version.h\n\nHPPFILES = \\\n\tast.hpp \\\n\tast2c.hpp \\\n\tast_def_macros.hpp \\\n\tast_fwd_decl.hpp \\\n\tast_helpers.hpp \\\n\tast_selectors.hpp \\\n\tast_supports.hpp \\\n\tast_values.hpp \\\n\tbacktrace.hpp \\\n\tbase64vlq.hpp \\\n\tbind.hpp \\\n\tc2ast.hpp \\\n\tcheck_nesting.hpp \\\n\tcolor_maps.hpp \\\n\tconstants.hpp \\\n\tcontext.hpp \\\n\tcssize.hpp \\\n\tdart_helpers.hpp \\\n\tdebug.hpp \\\n\tdebugger.hpp \\\n\temitter.hpp \\\n\tenvironment.hpp \\\n\terror_handling.hpp \\\n\teval.hpp \\\n\texpand.hpp \\\n\textender.hpp \\\n\textension.hpp \\\n\tfile.hpp \\\n\tfn_colors.hpp \\\n\tfn_lists.hpp \\\n\tfn_maps.hpp \\\n\tfn_miscs.hpp \\\n\tfn_numbers.hpp \\\n\tfn_selectors.hpp \\\n\tfn_strings.hpp \\\n\tfn_utils.hpp \\\n\tinspect.hpp \\\n\tjson.hpp \\\n\tkwd_arg_macros.hpp \\\n\tlexer.hpp \\\n\tlistize.hpp \\\n\tmapping.hpp \\\n\tmemory.hpp \\\n\tMurmurHash2.hpp \\\n\toperation.hpp \\\n\toperators.hpp \\\n\tordered_map.hpp \\\n\toutput.hpp \\\n\tparser.hpp \\\n\tpermutate.hpp \\\n\tplugins.hpp \\\n\tposition.hpp \\\n\tprelexer.hpp \\\n\tremove_placeholders.hpp \\\n\tsass.hpp \\\n\tsass_context.hpp \\\n\tsass_functions.hpp \\\n\tsass_values.hpp \\\n\tsettings.hpp \\\n\tsource.hpp \\\n\tsource_data.hpp \\\n\tsource_map.hpp \\\n\tstylesheet.hpp \\\n\tto_value.hpp \\\n\tunits.hpp \\\n\tutf8_string.hpp \\\n\tutil.hpp \\\n\tutil_string.hpp \\\n\tvalues.hpp \\\n\tmemory/allocator.hpp \\\n\tmemory/config.hpp \\\n\tmemory/memory_pool.hpp \\\n\tmemory/shared_ptr.hpp\n\nSOURCES = \\\n\tast.cpp \\\n\tast_values.cpp \\\n\tast_supports.cpp \\\n\tast_sel_cmp.cpp \\\n\tast_sel_unify.cpp \\\n\tast_sel_super.cpp \\\n\tast_sel_weave.cpp \\\n\tast_selectors.cpp \\\n\tcontext.cpp \\\n\tconstants.cpp \\\n\tfn_utils.cpp \\\n\tfn_miscs.cpp \\\n\tfn_maps.cpp \\\n\tfn_lists.cpp \\\n\tfn_colors.cpp \\\n\tfn_numbers.cpp \\\n\tfn_strings.cpp \\\n\tfn_selectors.cpp \\\n\tcolor_maps.cpp \\\n\tenvironment.cpp \\\n\tast_fwd_decl.cpp \\\n\tbind.cpp \\\n\tfile.cpp \\\n\tutil.cpp \\\n\tutil_string.cpp \\\n\tjson.cpp \\\n\tunits.cpp \\\n\tvalues.cpp \\\n\tplugins.cpp \\\n\tsource.cpp \\\n\tposition.cpp \\\n\tlexer.cpp \\\n\tparser.cpp \\\n\tparser_selectors.cpp \\\n\tprelexer.cpp \\\n\teval.cpp \\\n\teval_selectors.cpp \\\n\texpand.cpp \\\n\tlistize.cpp \\\n\tcssize.cpp \\\n\textender.cpp \\\n\textension.cpp \\\n\tstylesheet.cpp \\\n\toutput.cpp \\\n\tinspect.cpp \\\n\temitter.cpp \\\n\tcheck_nesting.cpp \\\n\tremove_placeholders.cpp \\\n\tsass.cpp \\\n\tsass_values.cpp \\\n\tsass_context.cpp \\\n\tsass_functions.cpp \\\n\tsass2scss.cpp \\\n\tbacktrace.cpp \\\n\toperators.cpp \\\n\tast2c.cpp \\\n\tc2ast.cpp \\\n\tto_value.cpp \\\n\tsource_map.cpp \\\n\terror_handling.cpp \\\n\tmemory/allocator.cpp \\\n\tmemory/shared_ptr.cpp \\\n\tutf8_string.cpp \\\n\tbase64vlq.cpp\n\nCSOURCES = \\\n  cencode.c\n"
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 5.55859375,
          "content": "LibSass - Sass compiler written in C++\n======================================\n\nCurrently maintained by Marcel Greter ([@mgreter]) and Michael Mifsud ([@xzyfer])\nOriginally created by Aaron Leung ([@akhleung]) and Hampton Catlin ([@hcatlin])\n\n[![GitHub CI](https://github.com/sass/libsass/actions/workflows/build-and-test.yml/badge.svg)](https://github.com/sass/libsass/actions/workflows/build-and-test.yml \"GitHub CI\")\n[![Windows CI](https://ci.appveyor.com/api/projects/status/github/sass/libsass?svg=true)](https://ci.appveyor.com/project/sass/libsass/branch/master \"Appveyor CI\")\n[![Coverage Status](https://img.shields.io/coveralls/sass/libsass.svg)](https://coveralls.io/r/sass/libsass?branch=master \"Code coverage of spec tests\")\n[![Percentage of issues still open](http://isitmaintained.com/badge/open/sass/libsass.svg)](http://isitmaintained.com/project/sass/libsass \"Percentage of issues still open\")\n[![Average time to resolve an issue](http://isitmaintained.com/badge/resolution/sass/libsass.svg)](http://isitmaintained.com/project/sass/libsass \"Average time to resolve an issue\")\n[![Bountysource](https://www.bountysource.com/badge/tracker?tracker_id=283068)](https://www.bountysource.com/trackers/283068-libsass?utm_source=283068&utm_medium=shield&utm_campaign=TRACKER_BADGE \"Bountysource\")\n\n**Warning:** [LibSass is deprecated](https://sass-lang.com/blog/libsass-is-deprecated).\nWhile it will continue to receive maintenance releases indefinitely, there are no\nplans to add additional features or compatibility with any new CSS or Sass features.\nProjects that still use it should move onto\n[Dart Sass](https://sass-lang.com/dart-sass).\n\n[LibSass](https://github.com/sass/libsass \"LibSass GitHub Project\") is just a library!\nIf you want to use LibSass to compile Sass, you need an implementer. Some\nimplementations are only bindings into other programming languages. But most also\nship with a command line interface (CLI) you can use directly. There is also\n[SassC](https://github.com/sass/sassc), which is the official lightweight\nCLI tool built by the same people as LibSass.\n\n### Excerpt of Supported Implementations:\n\n- https://github.com/sass/node-sass (Node.js)\n- https://github.com/sass/perl-libsass (Perl)\n- https://github.com/sass/libsass-python (Python)\n- https://github.com/wellington/go-libsass (Go)\n- https://github.com/sass/sassc-ruby (Ruby)\n- https://github.com/sass/libsass-net (C#)\n- https://github.com/medialize/sass.js (JS)\n- https://github.com/bit3/jsass (Java)\n- https://github.com/scottdavis/sass.ex (Elixir)\n- https://github.com/Youimmi/sass_compiler (Elixir)\n\nThis list does not say anything about the quality of either the listed or not listed [implementations](docs/implementations.md)!\nThe authors of the listed projects above are just known to work regularly together with LibSass developers.\n\nAbout\n-----\n\nLibSass is a C++ port of the original Ruby Sass CSS compiler with a [C API](docs/api-doc.md).\nWe coded LibSass with portability and efficiency in mind. You can expect LibSass to be a lot\nfaster than Ruby Sass and on par or faster than the best alternative CSS compilers around.\n\nDeveloping\n----------\n\nAs noted above, the LibSass repository does not contain any binaries or other way to execute\nLibSass. Therefore, you need an implementer to develop LibSass. Easiest is to start with\nthe official [SassC](http://github.com/sass/sassc) CLI wrapper. It is *guaranteed* to compile\nwith the latest code in LibSass master, since it is also used in the CI process. There is no\nlimitation here, as you may use any other LibSass implementer to test your LibSass branch!\n\nTesting\n-------\n\nSince LibSass is a pure library, tests are run through the [Sass-Spec](https://github.com/sass/sass-spec)\nproject using the [SassC](http://github.com/sass/sassc) CLI wrapper. To run the tests against LibSass while\ndeveloping, you can run `./script/spec`. This will clone SassC and Sass-Spec under the project folder and\nthen run the Sass-Spec test suite. You may want to update the clones to ensure you have the latest version.\nNote that the scripts in the `./script` folder are mainly intended for our CI needs.\n\nBuilding\n--------\n\nTo build LibSass you need GCC 4.7+ or Clang/LLVM. If your OS is older, you may need to upgrade\nthem first (or install clang as an alternative). On Windows, you need MinGW with GCC 4.7+ or VS 2013\nUpdate 4+. It is also possible to build LibSass with Clang/LLVM on Windows with various build chains\nand/or command line interpreters.\n\nSee the [build docs for further instructions](docs/build.md)!\n\nCompatibility\n-------------\n\nFor all intents and purposes LibSass is fully compatible with the Sass language spec. Any known\ndifferences can be found as open issues.\n\n\n\n\nAbout Sass\n----------\n\nSass is a CSS pre-processor language to add on exciting, new, awesome features to CSS. Sass was\nthe first language of its kind and by far the most mature and up to date codebase.\n\nSass was originally conceived of by the co-creator of this library, Hampton Catlin ([@hcatlin]).\nMost of the language has been the result of years of work by Natalie Weizenbaum ([@nex3]) and\nChris Eppstein ([@chriseppstein]).\n\nFor more information about Sass itself, please visit https://sass-lang.com\n\nInitial development of LibSass by Aaron Leung and Hampton Catlin was supported by [Moovweb](http://www.moovweb.com).\n\nLicensing\n---------\n\nOur [MIT license](LICENSE) is designed to be as simple and liberal as possible.\n\n[@hcatlin]: https://github.com/hcatlin\n[@akhleung]: https://github.com/akhleung\n[@chriseppstein]: https://github.com/chriseppstein\n[@nex3]: https://github.com/nex3\n[@mgreter]: https://github.com/mgreter\n[@xzyfer]: https://github.com/xzyfer\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.361328125,
          "content": "Serious about security\n======================\n\nThe LibSass team recognizes the important contributions the security research\ncommunity can make. We therefore encourage reporting security issues with the\ncode contained in this repository.\n\nIf you believe you have discovered a security vulnerability, please report it at\nhttps://hackerone.com/libsass instead of GitHub.\n\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 3.1669921875,
          "content": "os: Visual Studio 2013\n\nenvironment:\n  CTEST_OUTPUT_ON_FAILURE: 1\n  ruby_version: 24-x64\n  TargetPath: sassc/bin/sassc.exe\n  matrix:\n  - Compiler: msvc\n    Config: Release\n    Platform: Win32\n  - Compiler: msvc\n    Config: Debug\n    Platform: Win32\n  - Compiler: msvc\n    Config: Release\n    Platform: Win64\n  - Compiler: mingw\n    Build: static\n  - Compiler: mingw\n    Build: shared\n\ncache:\n  - C:\\Ruby%ruby_version%\\lib\\ruby\\gems\n  - C:\\mingw64\n\n# Uncomment to debug hanging builds via RDP, password can be found/set under Environment-Variables in appveyor settings!\n#\n# init:\n#   - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))\n#\n# on_finish:\n#   - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))\n\ninstall:\n  - git clone https://github.com/sass/sassc.git\n  - git clone https://github.com/sass/sass-spec.git\n  - set PATH=C:\\Ruby%ruby_version%\\bin;%PATH%\n  - ps: |\n      if(!(gem which minitest 2>$nul)) { gem install minitest --no-ri --no-rdoc }\n      if(!(gem which hrx 2>$nul)) { gem install hrx --no-ri --no-rdoc }\n      if ($env:Compiler -eq \"mingw\" -AND -Not (Test-Path \"C:\\mingw64\")) {\n        # Install MinGW.\n        $file = \"x86_64-4.9.2-release-win32-seh-rt_v4-rev3.7z\"\n        wget https://bintray.com/artifact/download/drewwells/generic/$file -OutFile $file\n        &7z x -oC:\\ $file > $null\n      }\n  - set PATH=C:\\mingw64\\bin;%PATH%\n  - set CC=gcc\n\nbuild_script:\n  - ps: |\n      if ($env:Compiler -eq \"mingw\") {\n        mingw32-make -j4 sassc\n      } else {\n        msbuild /m:4 /p:\"Configuration=$env:Config;Platform=$env:Platform\" sassc\\win\\sassc.sln\n      }\n\n      # print the branding art\n      mv script/branding script/branding.ps1\n      script/branding.ps1\n\n      # print the version info\n      &$env:TargetPath -v\n      ruby -v\n\ntest_script:\n  - ps: |\n      $PRNR = $env:APPVEYOR_PULL_REQUEST_NUMBER\n      if ($PRNR) {\n        echo \"Fetching info for PR $PRNR\"\n        wget https://api.github.com/repos/sass/libsass/pulls/$PRNR -OutFile pr.json\n        $json = cat pr.json -Raw\n        $SPEC_PR = [regex]::match($json,'sass\\/sass-spec(#|\\/pull\\/)([0-9]+)').Groups[2].Value\n        if ($SPEC_PR) {\n          echo \"Checkout sass spec PR $SPEC_PR\"\n          git -C sass-spec fetch -q -u origin pull/$SPEC_PR/head:ci-spec-pr-$SPEC_PR\n          git -C sass-spec checkout -q --force ci-spec-pr-$SPEC_PR\n        }\n      }\n      $env:TargetPath = Join-Path $pwd.Path $env:TargetPath\n      If (Test-Path \"$env:TargetPath\") {\n        ruby sass-spec/sass-spec.rb --probe-todo --impl libsass -c $env:TargetPath -s sass-spec/spec\n        if(-not($?)) {\n          echo \"sass-spec tests failed\"\n          exit 1\n        }\n      } else {\n        echo \"spec runner not found (compile error?)\"\n        exit 1\n      }\n      Write-Host \"Explicitly testing the case when cwd has Unicode characters: \" -nonewline\n      # See comments in gh-1774 for details.\n      cd test/e2e/unicode-pwd/Sáss-UŢF8/\n      &$env:TargetPath ./input.scss 2>&1>$null\n      if(-not($?)) {\n        echo \"Failed!\"\n        exit 1\n      } else {\n        echo \"Success!\"\n      }\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 4.16796875,
          "content": "#                                               -*- Autoconf -*-\n# Process this file with autoconf to produce a configure script.\n\nAC_PREREQ([2.61])\n\nAC_INIT([libsass], m4_esyscmd_s([./version.sh]), [support@moovweb.com])\nAC_CONFIG_SRCDIR([src/ast.hpp])\nAC_CONFIG_MACRO_DIR([m4])\nAC_CONFIG_HEADERS([src/config.h])\nAC_CONFIG_FILES([include/sass/version.h])\nAC_CONFIG_AUX_DIR([script])\n\n# These are flags passed to automake\n# Though they look like gcc flags!\nAM_INIT_AUTOMAKE([foreign parallel-tests -Wall])\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([no])])\n\n# Checks for programs.\nAC_PROG_CC\nAC_PROG_CXX\nAC_LANG_PUSH([C])\nAC_LANG_PUSH([C++])\nAC_GNU_SOURCE\n# Check fails on Travis, but it works fine\n# AX_CXX_COMPILE_STDCXX_11([ext],[optional])\nAC_CHECK_TOOL([AR], [ar], [false])\nAC_CHECK_TOOL([DLLTOOL], [dlltool], [false])\nAC_CHECK_TOOL([DLLWRAP], [dllwrap], [false])\nAC_CHECK_TOOL([WINDRES], [windres], [false])\nm4_ifdef([AM_PROG_AR], [AM_PROG_AR])\nLT_INIT([dlopen])\n\n# Checks for header files.\nAC_CHECK_HEADERS([unistd.h])\n\n# Checks for typedefs, structures, and compiler characteristics.\nAC_TYPE_SIZE_T\n\n# Checks for library functions.\nAC_FUNC_MALLOC\nAC_CHECK_FUNCS([floor getcwd strtol])\n\n# Checks for testing.\nAC_ARG_ENABLE(tests, AS_HELP_STRING([--enable-tests], [enable testing the build]),\n              [enable_tests=\"$enableval\"], [enable_tests=no])\n\nAS_CASE([$host], [*-*-mingw*], [is_mingw32=yes], [is_mingw32=no])\nAM_CONDITIONAL(COMPILER_IS_MINGW32, test \"x$is_mingw32\" = \"xyes\")\n\ndnl The dlopen() function is in the C library for *BSD and in\ndnl libdl on GLIBC-based systems\nif test \"x$is_mingw32\" != \"xyes\"; then\n  AC_SEARCH_LIBS([dlopen], [dl dld], [], [\n    AC_MSG_ERROR([unable to find the dlopen() function])\n  ])\nfi\n\nif test \"x$enable_tests\" = \"xyes\"; then\n  AC_PROG_CC\n  AC_PROG_AWK\n  # test need minitest gem\n  AC_PATH_PROG(RUBY, [ruby])\n  AC_PATH_PROG(TAPOUT, [tapout])\n  AC_REQUIRE_AUX_FILE([tap-driver])\n  AC_REQUIRE_AUX_FILE([tap-runner])\n  AC_ARG_WITH(sassc-dir,\n              AS_HELP_STRING([--with-sassc-dir=<dir>], [specify directory of sassc sources for testing (default: sassc)]),\n              [sassc_dir=\"$withval\"], [sassc_dir=\"sassc\"])\n  AC_CHECK_FILE([$sassc_dir/sassc.c], [], [\n    AC_MSG_ERROR([Unable to find sassc directory.\nYou must clone the sassc repository in this directory or specify\nthe --with-sassc-dir=<dir> argument.\n])\n  ])\n  SASS_SASSC_PATH=$sassc_dir\n  AC_SUBST(SASS_SASSC_PATH)\n\n  AC_ARG_WITH(sass-spec-dir,\n              AS_HELP_STRING([--with-sass-spec-dir=<dir>], [specify directory of sass-spec for testing (default: sass-spec)]),\n              [sass_spec_dir=\"$withval\"], [sass_spec_dir=\"sass-spec\"])\n  AC_CHECK_FILE([$sass_spec_dir/sass-spec.rb], [], [\n    AC_MSG_ERROR([Unable to find sass-spec directory.\nYou must clone the sass-spec repository in this directory or specify\nthe --with-sass-spec-dir=<dir> argument.\n])\n  ])\n  # Automake doesn't like its tests in an absolute path, so we make it relative.\n  case $sass_spec_dir in\n    /*)\n      SASS_SPEC_PATH=`$RUBY -e \"require 'pathname'; puts Pathname.new('$sass_spec_dir').relative_path_from(Pathname.new('$PWD')).to_s\"`\n      ;;\n    *)\n      SASS_SPEC_PATH=\"$sass_spec_dir\"\n      ;;\n  esac\n  AC_SUBST(SASS_SPEC_PATH)\nelse\n  # we do not really need these paths for non test build\n  # but automake may error if we do not define them here\n  SASS_SPEC_PATH=sass-spec\n  SASS_SASSC_PATH=sassc\n  AC_SUBST(SASS_SPEC_PATH)\n  AC_SUBST(SASS_SASSC_PATH)\nfi\n\nAM_CONDITIONAL(ENABLE_TESTS, test \"x$enable_tests\" = \"xyes\")\n\nAC_ARG_ENABLE([coverage],\n  [AS_HELP_STRING([--enable-coverage],\n    [enable coverage report for test suite])],\n    [enable_cov=$enableval],\n    [enable_cov=no])\n\nif test \"x$enable_cov\" = \"xyes\"; then\n\n    AC_CHECK_PROG(GCOV, gcov, gcov)\n\n    # Remove all optimization flags from C[XX]FLAGS\n    changequote({,})\n    CFLAGS=`echo \"$CFLAGS -O1 -fno-omit-frame-pointer\" | $SED -e 's/-O[0-9]*//g'`\n    CXXFLAGS=`echo \"$CXXFLAGS -O1 -fno-omit-frame-pointer\" | $SED -e 's/-O[0-9]*//g'`\n    changequote([,])\n\n    AC_SUBST(GCOV)\nfi\n\nAM_CONDITIONAL(ENABLE_COVERAGE, test \"x$enable_cov\" = \"xyes\")\n\nAC_SUBST(PACKAGE_VERSION)\n\nAC_MSG_NOTICE([Building libsass ($VERSION)])\n\nAC_CONFIG_FILES([GNUmakefile src/GNUmakefile src/support/libsass.pc])\nAC_OUTPUT\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "res",
          "type": "tree",
          "content": null
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.sh",
          "type": "blob",
          "size": 0.29296875,
          "content": "if test \"x$LIBSASS_VERSION\" = \"x\"; then\n  LIBSASS_VERSION=`git describe --abbrev=4 --dirty --always --tags 2>/dev/null`\nfi\nif test \"x$LIBSASS_VERSION\" = \"x\"; then\n  LIBSASS_VERSION=`cat VERSION 2>/dev/null`\nfi\nif test \"x$LIBSASS_VERSION\" = \"x\"; then\n  LIBSASS_VERSION=\"[na]\"\nfi\necho $LIBSASS_VERSION\n"
        },
        {
          "name": "win",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}