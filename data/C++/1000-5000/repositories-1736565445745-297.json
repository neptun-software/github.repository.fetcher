{
  "metadata": {
    "timestamp": 1736565445745,
    "page": 297,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "praydog/UEVR",
      "stars": 3303,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.34765625,
          "content": "---\nBasedOnStyle: LLVM\nIndentWidth: 4\nColumnLimit: 140\n---\nLanguage: Cpp\nAccessModifierOffset: -4\nAlignAfterOpenBracket: DontAlign\nAlignEscapedNewlines: Left\nAllowShortFunctionsOnASingleLine: InlineOnly\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nDerivePointerAlignment: false\nPointerAlignment: Left\nBreakConstructorInitializers: BeforeComma\n...\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 2.240234375,
          "content": "Checks: -*,readability-identifier-naming,readability-else-after-return\nHeaderFilterRegex: '^.*src.*\\.hpp$'\nCheckOptions:\n# Classes, structs, ...\n  - key:    readability-identifier-naming.NamespaceCase\n    value:  lower_case\n  - key:    readability-identifier-naming.ClassCase\n    value:  CamelCase\n  - key:    readability-identifier-naming.StructCase\n    value:  CamelCase\n  - key:    readability-identifier-naming.EnumCase\n    value:  CamelCase\n  - key:    readability-identifier-naming.UnionCase\n    value:  CamelCase\n  - key:    readability-identifier-naming.TypedefCase\n    value:  CamelCase\n\n# Variables, member variables, ...\n  - key:    readability-identifier-naming.ParameterCase\n    value:  lower_case\n  - key:    readability-identifier-naming.VariableCase\n    value:  lower_case\n  - key:    readability-identifier-naming.MemberCase\n    value:  lower_case\n  - key:    readability-identifier-naming.PublicMemberCase\n    value:  lower_case\n  - key:    readability-identifier-naming.ProtectedMemberCase\n    value:  lower_case\n  - key:    readability-identifier-naming.PrivateMemberCase\n    value:  lower_case\n  - key:    readability-identifier-naming.PrivateMemberSuffix\n    value:  ''\n\n# Functions, methods, ...\n  - key:    readability-identifier-naming.FunctionCase\n    value:  lower_case\n  - key:    readability-identifier-naming.MethodCase\n    value:  lower_case\n\n# Constants\n  - key:    readability-identifier-naming.ConstantPrefix\n    value:  ''\n  - key:    readability-identifier-naming.ConstantCase\n    value:  UPPER_CASE\n  - key:    readability-identifier-naming.ConstantMemberPrefix\n    value:  ''\n  - key:    readability-identifier-naming.ConstantMemberCase\n    value:  lower_case\n  - key:    readability-identifier-naming.ConstantParameterPrefix\n    value:  ''\n  - key:    readability-identifier-naming.ConstantParameterCase\n    value:  lower_case\n  - key:    readability-identifier-naming.LocalConstantParameterPrefix\n    value:  ''\n  - key:    readability-identifier-naming.LocalConstantCase\n    value:  lower_case\n  - key:    readability-identifier-naming.ConstexprVariablePrefix\n    value:  ''\n  - key:    readability-identifier-naming.ConstexprVariableCase\n    value:  lower_case\n\n# Other\n  - key:    readability-braces-around-statements.ShortStatementLines\n    value:  0"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3076171875,
          "content": "# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\nbuild/*\n.vscode/*\nout/*\n.vs/*\n\n# Ignore autogenerated headers\nsrc/CommitHash.hpp\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.4755859375,
          "content": "[submodule \"dependencies/submodules/glm\"]\n\tpath = dependencies/submodules/glm\n\turl = https://github.com/g-truc/glm\n[submodule \"dependencies/submodules/spdlog\"]\n\tpath = dependencies/submodules/spdlog\n\turl = https://github.com/gabime/spdlog\n[submodule \"dependencies/submodules/imgui\"]\n\tpath = dependencies/submodules/imgui\n\turl = https://github.com/ocornut/imgui.git\n[submodule \"dependencies/submodules/UESDK\"]\n\tpath = dependencies/submodules/UESDK\n\turl = git@github.com:praydog/UESDK.git\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 21.474609375,
          "content": "# This file is automatically generated from cmake.toml - DO NOT EDIT\n# See https://github.com/build-cpp/cmkr for more information\n\ncmake_minimum_required(VERSION 3.15)\n\nif(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)\n\tmessage(FATAL_ERROR \"In-tree builds are not supported. Run CMake from a separate directory: cmake -B build\")\nendif()\n\n# Regenerate CMakeLists.txt automatically in the root project\nset(CMKR_ROOT_PROJECT OFF)\nif(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)\n\tset(CMKR_ROOT_PROJECT ON)\n\n\t# Bootstrap cmkr\n\tinclude(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)\n\tif(CMKR_INCLUDE_RESULT)\n\t\tcmkr()\n\tendif()\n\n\t# Enable folder support\n\tset_property(GLOBAL PROPERTY USE_FOLDERS ON)\nendif()\n\n# Create a configure-time dependency on cmake.toml to improve IDE support\nif(CMKR_ROOT_PROJECT)\n\tconfigure_file(cmake.toml cmake.toml COPYONLY)\nendif()\n\n \nadd_compile_options($<$<CXX_COMPILER_ID:MSVC>:/MP>)\n\n# Enable PDB generation in release mode, but without the extra crap that RelWithDebInfo adds\nadd_compile_options(\"$<$<CONFIG:Release>:/Zi>\")\nadd_link_options(\"$<$<CONFIG:Release>:/DEBUG>\")\nadd_link_options(\"$<$<CONFIG:Release>:/OPT:REF>\")\nadd_link_options(\"$<$<CONFIG:Release>:/OPT:ICF>\")\n\nproject(uevr-proj)\n\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /MP\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /MP\")\n\nset(ASMJIT_STATIC ON CACHE BOOL \"\" FORCE)\n\nif (\"${CMAKE_BUILD_TYPE}\" MATCHES \"Release\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /MT\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /MT\")\n\n    # Statically compile runtime\n    string(REGEX REPLACE \"/MD\" \"/MT\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n    string(REGEX REPLACE \"/MD\" \"/MT\" CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n    string(REGEX REPLACE \"/MD\" \"/MT\" CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n    string(REGEX REPLACE \"/MD\" \"/MT\" CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE}\")\n\n    message(NOTICE \"Building in Release mode\")\nendif()\n\nset(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\n\nadd_subdirectory(dependencies/submodules/UESDK)\n\ninclude(FetchContent)\n\nmessage(STATUS \"Fetching bddisasm (70db095765ab2066dd88dfb7bbcc42259ed167c5)...\")\nFetchContent_Declare(bddisasm\n\tGIT_REPOSITORY\n\t\t\"https://github.com/bitdefender/bddisasm\"\n\tGIT_TAG\n\t\t70db095765ab2066dd88dfb7bbcc42259ed167c5\n)\nFetchContent_MakeAvailable(bddisasm)\n\nmessage(STATUS \"Fetching kananlib (61a04d4219e3cb81b524a6990d3924289982bbf6)...\")\nFetchContent_Declare(kananlib\n\tGIT_REPOSITORY\n\t\t\"https://github.com/cursey/kananlib\"\n\tGIT_TAG\n\t\t61a04d4219e3cb81b524a6990d3924289982bbf6\n)\nFetchContent_MakeAvailable(kananlib)\n\nset(SAFETYHOOK_FETCH_ZYDIS ON)\n\nmessage(STATUS \"Fetching safetyhook (4dce6a63268fc0a563f09a4e195b27ad847f9714)...\")\nFetchContent_Declare(safetyhook\n\tGIT_REPOSITORY\n\t\t\"https://github.com/praydog/safetyhook\"\n\tGIT_TAG\n\t\t4dce6a63268fc0a563f09a4e195b27ad847f9714\n)\nFetchContent_MakeAvailable(safetyhook)\n\nmessage(STATUS \"Fetching sdkgenny (f58077f8da8a271490c17558e93b75843b3afd19)...\")\nFetchContent_Declare(sdkgenny\n\tGIT_REPOSITORY\n\t\t\"https://github.com/cursey/sdkgenny\"\n\tGIT_TAG\n\t\tf58077f8da8a271490c17558e93b75843b3afd19\n)\nFetchContent_MakeAvailable(sdkgenny)\n\nmessage(STATUS \"Fetching openxr (458984d7f59d1ae6dc1b597d94b02e4f7132eaba)...\")\nFetchContent_Declare(openxr\n\tGIT_REPOSITORY\n\t\t\"https://github.com/KhronosGroup/OpenXR-SDK\"\n\tGIT_TAG\n\t\t458984d7f59d1ae6dc1b597d94b02e4f7132eaba\n)\nFetchContent_MakeAvailable(openxr)\n\nmessage(STATUS \"Fetching json (bc889afb4c5bf1c0d8ee29ef35eaaf4c8bef8a5d)...\")\nFetchContent_Declare(json\n\tGIT_REPOSITORY\n\t\t\"https://github.com/nlohmann/json\"\n\tGIT_TAG\n\t\tbc889afb4c5bf1c0d8ee29ef35eaaf4c8bef8a5d\n)\nFetchContent_MakeAvailable(json)\n\nmessage(STATUS \"Fetching asmjit (2a706fd2ba355808cada31ac1eed8ce28caa6b37)...\")\nFetchContent_Declare(asmjit\n\tGIT_REPOSITORY\n\t\t\"https://github.com/asmjit/asmjit.git\"\n\tGIT_TAG\n\t\t2a706fd2ba355808cada31ac1eed8ce28caa6b37\n)\nFetchContent_MakeAvailable(asmjit)\n\nset(TRACY_STATIC ON CACHE BOOL \"\" FORCE)\nset(TRACY_ENABLE OFF CACHE BOOL \"\" FORCE)\n\nmessage(STATUS \"Fetching tracy (897aec5b062664d2485f4f9a213715d2e527e0ca)...\")\nFetchContent_Declare(tracy\n\tGIT_REPOSITORY\n\t\t\"https://github.com/wolfpld/tracy\"\n\tGIT_TAG\n\t\t897aec5b062664d2485f4f9a213715d2e527e0ca\n)\nFetchContent_MakeAvailable(tracy)\n\nset(BUILD_TOOLS OFF CACHE BOOL \"\" FORCE)\n\nmessage(STATUS \"Fetching directxtk (f5026eb34e7053b1aff325d38db107703f394974)...\")\nFetchContent_Declare(directxtk\n\tGIT_REPOSITORY\n\t\t\"https://github.com/microsoft/DirectXTK\"\n\tGIT_TAG\n\t\tf5026eb34e7053b1aff325d38db107703f394974\n)\nFetchContent_MakeAvailable(directxtk)\n\nif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 19.35)\n    target_compile_options(DirectXTK PRIVATE /Zc:templateScope-)\nendif()\n\nset(BUILD_TOOLS OFF CACHE BOOL \"\" FORCE)\n\nmessage(STATUS \"Fetching directxtk12 (528801aa6dd8d628c2f756c41a76d300f47de478)...\")\nFetchContent_Declare(directxtk12\n\tGIT_REPOSITORY\n\t\t\"https://github.com/microsoft/DirectXTK12\"\n\tGIT_TAG\n\t\t528801aa6dd8d628c2f756c41a76d300f47de478\n)\nFetchContent_MakeAvailable(directxtk12)\n\nif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 19.35)\n    target_compile_options(DirectXTK12 PRIVATE /Zc:templateScope-)\nendif()\n\n# Target spdlog\nset(CMKR_TARGET spdlog)\nset(spdlog_SOURCES \"\")\n\nlist(APPEND spdlog_SOURCES\n\t\"dependencies/submodules/spdlog/src/async.cpp\"\n\t\"dependencies/submodules/spdlog/src/cfg.cpp\"\n\t\"dependencies/submodules/spdlog/src/color_sinks.cpp\"\n\t\"dependencies/submodules/spdlog/src/file_sinks.cpp\"\n\t\"dependencies/submodules/spdlog/src/fmt.cpp\"\n\t\"dependencies/submodules/spdlog/src/spdlog.cpp\"\n\t\"dependencies/submodules/spdlog/src/stdout_sinks.cpp\"\n)\n\nlist(APPEND spdlog_SOURCES\n\tcmake.toml\n)\n\nset(CMKR_SOURCES ${spdlog_SOURCES})\nadd_library(spdlog STATIC)\n\nif(spdlog_SOURCES)\n\ttarget_sources(spdlog PRIVATE ${spdlog_SOURCES})\nendif()\n\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${spdlog_SOURCES})\n\nadd_library(spdlog::spdlog ALIAS spdlog)\ntarget_compile_definitions(spdlog PUBLIC\n\tSPDLOG_COMPILED_LIB\n)\n\ntarget_include_directories(spdlog PUBLIC\n\t\"dependencies/submodules/spdlog/include\"\n)\n\nunset(CMKR_TARGET)\nunset(CMKR_SOURCES)\n\n# Target glm\nset(CMKR_TARGET glm)\nset(glm_SOURCES \"\")\n\nlist(APPEND glm_SOURCES\n\t\"dependencies/submodules/glm/glm/detail/glm.cpp\"\n)\n\nlist(APPEND glm_SOURCES\n\tcmake.toml\n)\n\nset(CMKR_SOURCES ${glm_SOURCES})\nadd_library(glm STATIC)\n\nif(glm_SOURCES)\n\ttarget_sources(glm PRIVATE ${glm_SOURCES})\nendif()\n\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${glm_SOURCES})\n\ntarget_include_directories(glm PUBLIC\n\t\"dependencies/submodules/glm\"\n)\n\nunset(CMKR_TARGET)\nunset(CMKR_SOURCES)\n\n# Target openvr\nset(CMKR_TARGET openvr)\nset(openvr_SOURCES \"\")\n\nlist(APPEND openvr_SOURCES\n\t\"dependencies/openvr/src/jsoncpp.cpp\"\n\t\"dependencies/openvr/src/openvr_api_public.cpp\"\n\t\"dependencies/openvr/src/vrcommon/dirtools_public.cpp\"\n\t\"dependencies/openvr/src/vrcommon/envvartools_public.cpp\"\n\t\"dependencies/openvr/src/vrcommon/hmderrors_public.cpp\"\n\t\"dependencies/openvr/src/vrcommon/pathtools_public.cpp\"\n\t\"dependencies/openvr/src/vrcommon/sharedlibtools_public.cpp\"\n\t\"dependencies/openvr/src/vrcommon/strtools_public.cpp\"\n\t\"dependencies/openvr/src/vrcommon/vrpathregistry_public.cpp\"\n\t\"dependencies/openvr/src/vrcommon/dirtools_public.cpp\"\n\t\"dependencies/openvr/src/vrcommon/envvartools_public.cpp\"\n\t\"dependencies/openvr/src/vrcommon/hmderrors_public.cpp\"\n\t\"dependencies/openvr/src/vrcommon/pathtools_public.cpp\"\n\t\"dependencies/openvr/src/vrcommon/sharedlibtools_public.cpp\"\n\t\"dependencies/openvr/src/vrcommon/strtools_public.cpp\"\n\t\"dependencies/openvr/src/vrcommon/vrpathregistry_public.cpp\"\n)\n\nlist(APPEND openvr_SOURCES\n\tcmake.toml\n)\n\nset(CMKR_SOURCES ${openvr_SOURCES})\nadd_library(openvr SHARED)\n\nif(openvr_SOURCES)\n\ttarget_sources(openvr PRIVATE ${openvr_SOURCES})\nendif()\n\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${openvr_SOURCES})\n\nadd_library(openvr_api ALIAS openvr)\ntarget_compile_definitions(openvr PUBLIC\n\tVR_API_PUBLIC\n\tWIN64\n)\n\ntarget_include_directories(openvr PUBLIC\n\t\"dependencies/openvr/headers\"\n)\n\nset_target_properties(openvr PROPERTIES\n\tOUTPUT_NAME\n\t\topenvr_api\n)\n\nunset(CMKR_TARGET)\nunset(CMKR_SOURCES)\n\n# Target imgui\nset(CMKR_TARGET imgui)\nset(imgui_SOURCES \"\")\n\nlist(APPEND imgui_SOURCES\n\t\"dependencies/submodules/imgui/imgui.cpp\"\n\t\"dependencies/submodules/imgui/imgui_demo.cpp\"\n\t\"dependencies/submodules/imgui/imgui_draw.cpp\"\n\t\"dependencies/submodules/imgui/imgui_tables.cpp\"\n\t\"dependencies/submodules/imgui/imgui_widgets.cpp\"\n)\n\nlist(APPEND imgui_SOURCES\n\tcmake.toml\n)\n\nset(CMKR_SOURCES ${imgui_SOURCES})\nadd_library(imgui STATIC)\n\nif(imgui_SOURCES)\n\ttarget_sources(imgui PRIVATE ${imgui_SOURCES})\nendif()\n\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${imgui_SOURCES})\n\ntarget_compile_definitions(imgui PUBLIC\n\t\"IMGUI_USER_CONFIG=\\\"${CMAKE_CURRENT_SOURCE_DIR}/src/uevr-imgui/uevr_imconfig.hpp\\\"\"\n)\n\ntarget_include_directories(imgui PUBLIC\n\t\"dependencies/submodules/imgui\"\n\t\"src/uevr-imgui\"\n)\n\nunset(CMKR_TARGET)\nunset(CMKR_SOURCES)\n\n# Target plugin_renderlib\nset(CMKR_TARGET plugin_renderlib)\nset(plugin_renderlib_SOURCES \"\")\n\nlist(APPEND plugin_renderlib_SOURCES\n\t\"examples/renderlib/imgui/imgui_impl_dx11.cpp\"\n\t\"examples/renderlib/imgui/imgui_impl_dx12.cpp\"\n\t\"examples/renderlib/imgui/imgui_impl_win32.cpp\"\n\t\"examples/renderlib/rendering/d3d11.cpp\"\n\t\"examples/renderlib/rendering/d3d12.cpp\"\n\t\"examples/renderlib/imgui/font_robotomedium.hpp\"\n\t\"examples/renderlib/imgui/re2_imconfig.hpp\"\n\t\"examples/renderlib/rendering/d3d11.hpp\"\n\t\"examples/renderlib/rendering/d3d12.hpp\"\n\t\"examples/renderlib/rendering/shared.hpp\"\n\t\"examples/renderlib/imgui/imgui_impl_dx11.h\"\n\t\"examples/renderlib/imgui/imgui_impl_dx12.h\"\n\t\"examples/renderlib/imgui/imgui_impl_win32.h\"\n)\n\nlist(APPEND plugin_renderlib_SOURCES\n\tcmake.toml\n)\n\nset(CMKR_SOURCES ${plugin_renderlib_SOURCES})\nadd_library(plugin_renderlib STATIC)\n\nif(plugin_renderlib_SOURCES)\n\ttarget_sources(plugin_renderlib PRIVATE ${plugin_renderlib_SOURCES})\nendif()\n\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${plugin_renderlib_SOURCES})\n\ntarget_compile_features(plugin_renderlib PUBLIC\n\tcxx_std_23\n)\n\ntarget_compile_options(plugin_renderlib PUBLIC\n\t\"/EHa\"\n\t\"/MP\"\n)\n\ntarget_include_directories(plugin_renderlib PUBLIC\n\t\"examples/renderlib\"\n\t\"include/\"\n)\n\ntarget_link_libraries(plugin_renderlib PUBLIC\n\timgui\n)\n\nunset(CMKR_TARGET)\nunset(CMKR_SOURCES)\n\n# Target example_plugin\nset(CMKR_TARGET example_plugin)\nset(example_plugin_SOURCES \"\")\n\nlist(APPEND example_plugin_SOURCES\n\t\"examples/example_plugin/Plugin.cpp\"\n)\n\nlist(APPEND example_plugin_SOURCES\n\tcmake.toml\n)\n\nset(CMKR_SOURCES ${example_plugin_SOURCES})\nadd_library(example_plugin SHARED)\n\nif(example_plugin_SOURCES)\n\ttarget_sources(example_plugin PRIVATE ${example_plugin_SOURCES})\nendif()\n\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${example_plugin_SOURCES})\n\ntarget_compile_features(example_plugin PUBLIC\n\tcxx_std_23\n)\n\ntarget_include_directories(example_plugin PUBLIC\n\t\"include/\"\n\t\"examples/renderlib\"\n)\n\ntarget_link_libraries(example_plugin PUBLIC\n\tplugin_renderlib\n)\n\nunset(CMKR_TARGET)\nunset(CMKR_SOURCES)\n\n# Target sdk-test\nset(CMKR_TARGET sdk-test)\nset(sdk-test_SOURCES \"\")\n\nlist(APPEND sdk-test_SOURCES\n\t\"side-projects/sdk-test/Main.cpp\"\n)\n\nlist(APPEND sdk-test_SOURCES\n\tcmake.toml\n)\n\nset(CMKR_SOURCES ${sdk-test_SOURCES})\nadd_library(sdk-test SHARED)\n\nif(sdk-test_SOURCES)\n\ttarget_sources(sdk-test PRIVATE ${sdk-test_SOURCES})\nendif()\n\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${sdk-test_SOURCES})\n\ntarget_compile_features(sdk-test PUBLIC\n\tcxx_std_23\n)\n\ntarget_include_directories(sdk-test PUBLIC\n\t\"shared/\"\n\t\"include/\"\n)\n\ntarget_link_libraries(sdk-test PUBLIC\n\tkananlib\n\tuesdk\n)\n\nunset(CMKR_TARGET)\nunset(CMKR_SOURCES)\n\n# Target vr-plugin-nullifier\nset(CMKR_TARGET vr-plugin-nullifier)\nset(vr-plugin-nullifier_SOURCES \"\")\n\nlist(APPEND vr-plugin-nullifier_SOURCES\n\t\"vr-plugin-nullifier/Main.cpp\"\n)\n\nlist(APPEND vr-plugin-nullifier_SOURCES\n\tcmake.toml\n)\n\nset(CMKR_SOURCES ${vr-plugin-nullifier_SOURCES})\nadd_library(vr-plugin-nullifier SHARED)\n\nif(vr-plugin-nullifier_SOURCES)\n\ttarget_sources(vr-plugin-nullifier PRIVATE ${vr-plugin-nullifier_SOURCES})\nendif()\n\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${vr-plugin-nullifier_SOURCES})\n\ntarget_compile_features(vr-plugin-nullifier PUBLIC\n\tcxx_std_23\n)\n\ntarget_compile_options(vr-plugin-nullifier PUBLIC\n\t\"/GS-\"\n\t\"/EHa\"\n\t\"/MP\"\n)\n\ntarget_link_libraries(vr-plugin-nullifier PUBLIC\n\tkananlib\n)\n\nset_target_properties(vr-plugin-nullifier PROPERTIES\n\tOUTPUT_NAME\n\t\tUEVRPluginNullifier\n\tRUNTIME_OUTPUT_DIRECTORY_RELEASE\n\t\t\"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}\"\n\tRUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO\n\t\t\"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}\"\n\tLIBRARY_OUTPUT_DIRECTORY_RELEASE\n\t\t\"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\n\tLIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO\n\t\t\"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\n\tARCHIVE_OUTPUT_DIRECTORY_RELEASE\n\t\t\"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\n\tARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO\n\t\t\"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\n)\n\nunset(CMKR_TARGET)\nunset(CMKR_SOURCES)\n\n# Target lua\nset(CMKR_TARGET lua)\nset(lua_SOURCES \"\")\n\nlist(APPEND lua_SOURCES\n\t\"dependencies/lua/src/lapi.c\"\n\t\"dependencies/lua/src/lauxlib.c\"\n\t\"dependencies/lua/src/lbaselib.c\"\n\t\"dependencies/lua/src/lcode.c\"\n\t\"dependencies/lua/src/lcorolib.c\"\n\t\"dependencies/lua/src/lctype.c\"\n\t\"dependencies/lua/src/ldblib.c\"\n\t\"dependencies/lua/src/ldebug.c\"\n\t\"dependencies/lua/src/ldo.c\"\n\t\"dependencies/lua/src/ldump.c\"\n\t\"dependencies/lua/src/lfunc.c\"\n\t\"dependencies/lua/src/lgc.c\"\n\t\"dependencies/lua/src/linit.c\"\n\t\"dependencies/lua/src/liolib.c\"\n\t\"dependencies/lua/src/llex.c\"\n\t\"dependencies/lua/src/lmathlib.c\"\n\t\"dependencies/lua/src/lmem.c\"\n\t\"dependencies/lua/src/loadlib.c\"\n\t\"dependencies/lua/src/lobject.c\"\n\t\"dependencies/lua/src/lopcodes.c\"\n\t\"dependencies/lua/src/loslib.c\"\n\t\"dependencies/lua/src/lparser.c\"\n\t\"dependencies/lua/src/lstate.c\"\n\t\"dependencies/lua/src/lstring.c\"\n\t\"dependencies/lua/src/lstrlib.c\"\n\t\"dependencies/lua/src/ltable.c\"\n\t\"dependencies/lua/src/ltablib.c\"\n\t\"dependencies/lua/src/ltests.c\"\n\t\"dependencies/lua/src/ltm.c\"\n\t\"dependencies/lua/src/lua.c\"\n\t\"dependencies/lua/src/lundump.c\"\n\t\"dependencies/lua/src/lutf8lib.c\"\n\t\"dependencies/lua/src/lvm.c\"\n\t\"dependencies/lua/src/lzio.c\"\n)\n\nlist(APPEND lua_SOURCES\n\tcmake.toml\n)\n\nset(CMKR_SOURCES ${lua_SOURCES})\nadd_library(lua STATIC)\n\nif(lua_SOURCES)\n\ttarget_sources(lua PRIVATE ${lua_SOURCES})\nendif()\n\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${lua_SOURCES})\n\ntarget_include_directories(lua PUBLIC\n\t\"dependencies/lua/src\"\n)\n\nunset(CMKR_TARGET)\nunset(CMKR_SOURCES)\n\n# Target sol2\nset(CMKR_TARGET sol2)\nset(sol2_SOURCES \"\")\n\nset(CMKR_SOURCES ${sol2_SOURCES})\nadd_library(sol2 INTERFACE)\n\nif(sol2_SOURCES)\n\ttarget_sources(sol2 INTERFACE ${sol2_SOURCES})\nendif()\n\ntarget_include_directories(sol2 INTERFACE\n\t\"dependencies/sol2/single/single/include\"\n)\n\nunset(CMKR_TARGET)\nunset(CMKR_SOURCES)\n\n# Target luavrlib\nset(CMKR_TARGET luavrlib)\nset(luavrlib_SOURCES \"\")\n\nlist(APPEND luavrlib_SOURCES\n\t\"lua-api/lib/src/ScriptContext.cpp\"\n\t\"lua-api/lib/src/ScriptState.cpp\"\n\t\"lua-api/lib/src/ScriptUtility.cpp\"\n\t\"lua-api/lib/src/datatypes/Quaternion.cpp\"\n\t\"lua-api/lib/src/datatypes/StructObject.cpp\"\n\t\"lua-api/lib/src/datatypes/Vector.cpp\"\n\t\"lua-api/lib/src/datatypes/XInput.cpp\"\n\t\"lua-api/lib/include/ScriptContext.hpp\"\n\t\"lua-api/lib/include/ScriptPrerequisites.hpp\"\n\t\"lua-api/lib/include/ScriptState.hpp\"\n\t\"lua-api/lib/include/ScriptUtility.hpp\"\n\t\"lua-api/lib/include/datatypes/FFrame.hpp\"\n\t\"lua-api/lib/include/datatypes/Quaternion.hpp\"\n\t\"lua-api/lib/include/datatypes/StructObject.hpp\"\n\t\"lua-api/lib/include/datatypes/Vector.hpp\"\n\t\"lua-api/lib/include/datatypes/XInput.hpp\"\n)\n\nlist(APPEND luavrlib_SOURCES\n\tcmake.toml\n)\n\nset(CMKR_SOURCES ${luavrlib_SOURCES})\nadd_library(luavrlib STATIC)\n\nif(luavrlib_SOURCES)\n\ttarget_sources(luavrlib PRIVATE ${luavrlib_SOURCES})\nendif()\n\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${luavrlib_SOURCES})\n\ntarget_compile_features(luavrlib PUBLIC\n\tcxx_std_23\n)\n\ntarget_compile_options(luavrlib PUBLIC\n\t\"/bigobj\"\n\t\"/EHa\"\n\t\"/MP\"\n)\n\ntarget_include_directories(luavrlib PUBLIC\n\t\"include/\"\n\t\"lua-api/lib/include\"\n)\n\ntarget_link_libraries(luavrlib PUBLIC\n\tlua\n\tsol2\n\tkananlib\n\tglm\n)\n\nunset(CMKR_TARGET)\nunset(CMKR_SOURCES)\n\n# Target LuaVR\nset(CMKR_TARGET LuaVR)\nset(LuaVR_SOURCES \"\")\n\nlist(APPEND LuaVR_SOURCES\n\t\"lua-api/Main.cpp\"\n)\n\nlist(APPEND LuaVR_SOURCES\n\tcmake.toml\n)\n\nset(CMKR_SOURCES ${LuaVR_SOURCES})\nadd_library(LuaVR SHARED)\n\nif(LuaVR_SOURCES)\n\ttarget_sources(LuaVR PRIVATE ${LuaVR_SOURCES})\nendif()\n\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${LuaVR_SOURCES})\n\ntarget_compile_features(LuaVR PUBLIC\n\tcxx_std_23\n)\n\ntarget_compile_options(LuaVR PUBLIC\n\t\"/bigobj\"\n\t\"/EHa\"\n\t\"/MP\"\n)\n\ntarget_include_directories(LuaVR PUBLIC\n\t\"include/\"\n)\n\ntarget_link_libraries(LuaVR PUBLIC\n\tluavrlib\n)\n\nset_target_properties(LuaVR PROPERTIES\n\tRUNTIME_OUTPUT_DIRECTORY_RELEASE\n\t\t\"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}\"\n\tRUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO\n\t\t\"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}\"\n\tLIBRARY_OUTPUT_DIRECTORY_RELEASE\n\t\t\"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\n\tLIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO\n\t\t\"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\n\tARCHIVE_OUTPUT_DIRECTORY_RELEASE\n\t\t\"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\n\tARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO\n\t\t\"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\n)\n\nunset(CMKR_TARGET)\nunset(CMKR_SOURCES)\n\n# Target uevr\nset(CMKR_TARGET uevr)\nset(uevr_SOURCES \"\")\n\nlist(APPEND uevr_SOURCES\n\t\"src/ExceptionHandler.cpp\"\n\t\"src/Framework.cpp\"\n\t\"src/Main.cpp\"\n\t\"src/Mod.cpp\"\n\t\"src/Mods.cpp\"\n\t\"src/WindowFilter.cpp\"\n\t\"src/hooks/D3D11Hook.cpp\"\n\t\"src/hooks/D3D12Hook.cpp\"\n\t\"src/hooks/DInputHook.cpp\"\n\t\"src/hooks/WindowsMessageHook.cpp\"\n\t\"src/hooks/XInputHook.cpp\"\n\t\"src/mods/FrameworkConfig.cpp\"\n\t\"src/mods/ImGuiThemeHelpers.cpp\"\n\t\"src/mods/LuaLoader.cpp\"\n\t\"src/mods/PluginLoader.cpp\"\n\t\"src/mods/UObjectHook.cpp\"\n\t\"src/mods/VR.cpp\"\n\t\"src/mods/pluginloader/FFakeStereoRenderingFunctions.cpp\"\n\t\"src/mods/pluginloader/FRHITexture2DFunctions.cpp\"\n\t\"src/mods/pluginloader/FRenderTargetPoolHook.cpp\"\n\t\"src/mods/pluginloader/FUObjectArrayFunctions.cpp\"\n\t\"src/mods/pluginloader/UScriptStructFunctions.cpp\"\n\t\"src/mods/uobjecthook/SDKDumper.cpp\"\n\t\"src/mods/vr/Bindings.cpp\"\n\t\"src/mods/vr/CVarManager.cpp\"\n\t\"src/mods/vr/D3D11Component.cpp\"\n\t\"src/mods/vr/D3D12Component.cpp\"\n\t\"src/mods/vr/FFakeStereoRenderingHook.cpp\"\n\t\"src/mods/vr/IXRTrackingSystemHook.cpp\"\n\t\"src/mods/vr/OverlayComponent.cpp\"\n\t\"src/mods/vr/RenderTargetPoolHook.cpp\"\n\t\"src/mods/vr/d3d12/CommandContext.cpp\"\n\t\"src/mods/vr/d3d12/DirectXTK.cpp\"\n\t\"src/mods/vr/d3d12/TextureContext.cpp\"\n\t\"src/mods/vr/runtimes/OpenVR.cpp\"\n\t\"src/mods/vr/runtimes/OpenXR.cpp\"\n\t\"src/uevr-imgui/imgui_impl_dx11.cpp\"\n\t\"src/uevr-imgui/imgui_impl_dx12.cpp\"\n\t\"src/uevr-imgui/imgui_impl_win32.cpp\"\n\t\"src/utility/ImGui.cpp\"\n\t\"src/ExceptionHandler.hpp\"\n\t\"src/Framework.hpp\"\n\t\"src/LicenseStrings.hpp\"\n\t\"src/Mod.hpp\"\n\t\"src/Mods.hpp\"\n\t\"src/WindowFilter.hpp\"\n\t\"src/hooks/D3D11Hook.hpp\"\n\t\"src/hooks/D3D12Hook.hpp\"\n\t\"src/hooks/DInputHook.hpp\"\n\t\"src/hooks/WindowsMessageHook.hpp\"\n\t\"src/hooks/XInputHook.hpp\"\n\t\"src/mods/FrameworkConfig.hpp\"\n\t\"src/mods/ImGuiThemeHelpers.hpp\"\n\t\"src/mods/LuaLoader.hpp\"\n\t\"src/mods/PluginLoader.hpp\"\n\t\"src/mods/UObjectHook.hpp\"\n\t\"src/mods/VR.hpp\"\n\t\"src/mods/pluginloader/FFakeStereoRenderingFunctions.hpp\"\n\t\"src/mods/pluginloader/FRHITexture2DFunctions.hpp\"\n\t\"src/mods/pluginloader/FRenderTargetPoolHook.hpp\"\n\t\"src/mods/pluginloader/FUObjectArrayFunctions.hpp\"\n\t\"src/mods/pluginloader/UScriptStructFunctions.hpp\"\n\t\"src/mods/uobjecthook/SDKDumper.hpp\"\n\t\"src/mods/vr/CVarManager.hpp\"\n\t\"src/mods/vr/D3D11Component.hpp\"\n\t\"src/mods/vr/D3D12Component.hpp\"\n\t\"src/mods/vr/FFakeStereoRenderingHook.hpp\"\n\t\"src/mods/vr/IXRTrackingSystemHook.hpp\"\n\t\"src/mods/vr/OverlayComponent.hpp\"\n\t\"src/mods/vr/RenderTargetPoolHook.hpp\"\n\t\"src/mods/vr/d3d12/ComPtr.hpp\"\n\t\"src/mods/vr/d3d12/CommandContext.hpp\"\n\t\"src/mods/vr/d3d12/DirectXTK.hpp\"\n\t\"src/mods/vr/d3d12/TextureContext.hpp\"\n\t\"src/mods/vr/runtimes/OpenVR.hpp\"\n\t\"src/mods/vr/runtimes/OpenXR.hpp\"\n\t\"src/mods/vr/runtimes/VRRuntime.hpp\"\n\t\"src/mods/vr/shaders/ps.hpp\"\n\t\"src/mods/vr/shaders/vs.hpp\"\n\t\"src/uevr-imgui/font_robotomedium.hpp\"\n\t\"src/uevr-imgui/uevr_imconfig.hpp\"\n\t\"src/utility/ImGui.hpp\"\n\t\"src/utility/Logging.hpp\"\n\t\"src/uevr-imgui/imgui_impl_dx11.h\"\n\t\"src/uevr-imgui/imgui_impl_dx12.h\"\n\t\"src/uevr-imgui/imgui_impl_win32.h\"\n)\n\nlist(APPEND uevr_SOURCES\n\tcmake.toml\n)\n\nset(CMKR_SOURCES ${uevr_SOURCES})\nadd_library(uevr SHARED)\n\nif(uevr_SOURCES)\n\ttarget_sources(uevr PRIVATE ${uevr_SOURCES})\nendif()\n\n\ntarget_compile_features(uevr PUBLIC\n\tcxx_std_23\n)\n\ntarget_compile_options(uevr PUBLIC\n\t\"/GS-\"\n\t\"/bigobj\"\n\t\"/EHa\"\n\t\"/MP\"\n)\n\ntarget_include_directories(uevr PUBLIC\n\t\"shared/\"\n\t\"src/\"\n\t\"include/\"\n\t\"${OPENXR_SOURCE_DIR}/src\"\n)\n\ntarget_link_libraries(uevr PUBLIC\n\tshlwapi\n\td3d11\n\td3d12\n\tsafetyhook\n\tglm\n\timgui\n\topenvr_api\n\topenxr_loader\n\tnlohmann_json\n\tVersion\n\tTracyClient\n\tDirectXTK\n\tDirectXTK12\n\tsdkgenny\n\tasmjit\n\tluavrlib\n)\n\ntarget_link_libraries(uevr PUBLIC\n\tkananlib\n\tuesdk\n)\n\nset_target_properties(uevr PROPERTIES\n\tOUTPUT_NAME\n\t\tUEVRBackend\n\tLINK_FLAGS\n\t\t\"/DELAYLOAD:openvr_api.dll\"\n\tRUNTIME_OUTPUT_DIRECTORY_RELEASE\n\t\t\"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}\"\n\tRUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO\n\t\t\"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}\"\n\tLIBRARY_OUTPUT_DIRECTORY_RELEASE\n\t\t\"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\n\tLIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO\n\t\t\"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\n\tARCHIVE_OUTPUT_DIRECTORY_RELEASE\n\t\t\"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\n\tARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO\n\t\t\"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\n)\n\nadd_custom_command(\n    TARGET uevr PRE_BUILD\n    COMMAND ${CMAKE_COMMAND} -E echo \"Generating commit hash...\"\n    COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_SOURCE_DIR} ${CMAKE_SOURCE_DIR}/MakeCommitHash.bat\n)\nadd_custom_command(\n    TARGET uevr POST_BUILD\n    COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:openvr> $<TARGET_FILE_DIR:uevr>)\n\nunset(CMKR_TARGET)\nunset(CMKR_SOURCES)\n\n"
        },
        {
          "name": "CMakeSettings.json",
          "type": "blob",
          "size": 0.4208984375,
          "content": "﻿{\n  \"configurations\": [\n    {\n      \"name\": \"x64-RelWithDebInfo\",\n      \"generator\": \"Visual Studio 17 2022 Win64\",\n      \"configurationType\": \"RelWithDebInfo\",\n      \"buildRoot\": \"${projectDir}\\\\out\\\\build\\\\${name}\",\n      \"installRoot\": \"${projectDir}\\\\out\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"\",\n      \"buildCommandArgs\": \"\",\n      \"ctestCommandArgs\": \"\",\n      \"inheritEnvironments\": [ \"msvc_x64_x64\" ]\n    }\n  ]\n}"
        },
        {
          "name": "COMPILING.md",
          "type": "blob",
          "size": 1.54296875,
          "content": "# Compiling UEVR\n\n## Necessary prerequisites\n\nYour GitHub account must have access to the [EpicGames](https://github.com/EpicGames/) GitHub organization. If you do not have access, you will not be able to compile UEVR.\n\nThis is because the [UESDK](https://github.com/praydog/UESDK) submodule is a fork of the [EpicGames/UnrealEngine](https://github.com/EpicGames/UnrealEngine) repository. You must have an SSH key set up with your GitHub account and an SSH agent running in order to clone the UESDK submodule.\n\nA C++23 compatible compiler is required. Visual Studio 2022 is recommended. Compilers other than MSVC have not been tested.\n\nCMake is required.\n\n## Compiling\n\n###  Clone the repository\n\n#### SSH\n```\ngit clone git@github.com:praydog/UEVR.git\n```\n\n#### HTTPS\n```\ngit clone https://github.com/praydog/UEVR\n```\n\n### Initialize the submodules\n\n```\ngit submodule update --init --recursive\n```\n\n### Set up CMake\n\n#### Command line\n\n```\ncmake -S . -B build ./build -G \"Visual Studio 17 2022\" -A x64 -DCMAKE_BUILD_TYPE=Release\ncmake --build ./build --config Release --target uevr\n```\n\n#### VSCode\n\n1. Install the [CMake Tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools) extension\n2. Open the UEVR folder in VSCode\n3. Press `Ctrl+Shift+P` and select `CMake: Configure`\n4. When \"Select a kit\" appears, select `Visual Studio Community 2022 Release - amd64`\n5. Select the desired build config (usually `Release` or `RelWithDebInfo`)\n6. You should now be able to compile UEVR by pressing `Ctrl+Shift+P` and selecting `CMake: Build` or by pressing `F7`"
        },
        {
          "name": "MakeCommitHash.bat",
          "type": "blob",
          "size": 1.6669921875,
          "content": "@echo off\n\nIF EXIST \"src/CommitHash.autogenerated\" (\necho The file \"src/CommitHash.autogenerated\" already exists.\nexit /b 0\n)\n\nFOR /F \"tokens=*\" %%g IN ('git rev-parse HEAD') DO (SET UEVR_COMMIT_HASH=%%g)\n\nFOR /F \"tokens=*\" %%t IN ('git describe --tags --abbrev^=0') DO (SET UEVR_TAG=%%t)\nIF \"%UEVR_TAG%\"==\"\" (SET UEVR_TAG=no_tag)\n\nFOR /F \"tokens=*\" %%c IN ('git describe --tags --long') DO (\nFOR /F \"tokens=1,2 delims=-\" %%a IN (\"%%c\") DO (\nSET UEVR_TAG_LONG=%%a\nSET UEVR_COMMITS_PAST_TAG=%%b\n)\n)\n\nIF \"%UEVR_COMMITS_PAST_TAG%\"==\"\" (SET UEVR_COMMITS_PAST_TAG=0)\n\nFOR /F \"tokens=*\" %%b IN ('git rev-parse --abbrev-ref HEAD') DO (SET UEVR_BRANCH=%%b)\n\nFOR /F \"tokens=*\" %%n IN ('git rev-list --count HEAD') DO (SET UEVR_TOTAL_COMMITS=%%n)\nIF \"%UEVR_TOTAL_COMMITS%\"==\"\" (SET UEVR_TOTAL_COMMITS=0)\n\nFOR /F \"tokens=2 delims==\" %%a IN ('wmic OS get localdatetime /value') DO (\nSET datetime=%%a\n)\n\nSET year=%datetime:~0,4%\nSET month=%datetime:~4,2%\nSET day=%datetime:~6,2%\nSET hour=%datetime:~8,2%\nSET minute=%datetime:~10,2%\n\necho #pragma once > src/CommitHash.autogenerated\necho #define UEVR_COMMIT_HASH \"%UEVR_COMMIT_HASH%\" >> src/CommitHash.autogenerated\necho #define UEVR_TAG \"%UEVR_TAG%\" >> src/CommitHash.autogenerated\necho #define UEVR_TAG_LONG \"%UEVR_TAG_LONG%\" >> src/CommitHash.autogenerated\necho #define UEVR_COMMITS_PAST_TAG %UEVR_COMMITS_PAST_TAG% >> src/CommitHash.autogenerated\necho #define UEVR_BRANCH \"%UEVR_BRANCH%\" >> src/CommitHash.autogenerated\necho #define UEVR_TOTAL_COMMITS %UEVR_TOTAL_COMMITS% >> src/CommitHash.autogenerated\necho #define UEVR_BUILD_DATE \"%day%.%month%.%year%\" >> src/CommitHash.autogenerated\necho #define UEVR_BUILD_TIME \"%hour%:%minute%\" >> src/CommitHash.autogenerated"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.84765625,
          "content": "# UEVR ![build](https://github.com/praydog/UEVR/actions/workflows/dev-release.yml/badge.svg)\n\nUniversal Unreal Engine VR Mod (4/5)\n\n## Supported Engine Versions\n\n4.8 - 5.4\n\n## Links\n\n- [Download (Stable release)](https://github.com/praydog/UEVR/releases)\n- [Download (Nightly release)](https://github.com/praydog/UEVR-nightly/releases/latest)\n- [Documentation](https://praydog.github.io/uevr-docs)\n- [Flat2VR Discord](https://flat2vr.com)\n\n## Features\n\n- Full 6DOF support out of the box (HMD movement)\n- Full stereoscopic 3D out of the box\n- Native UE4/UE5 stereo rendering system\n- Frontend GUI for easy process injection\n- Supports OpenVR and OpenXR runtimes\n- 3 rendering modes: Native Stereo, Synchronized Sequential, and Alternating/AFR\n- Automatic handling of most in-game UI so it is projected into 3D space\n- Optional 3DOF motion controls out of the box in many games, essentially emulating a semi-native VR experience\n- Optional roomscale movement in many games, moving the player character itself in 3D space along with the headset\n- User-authored UI-based system for adding motion controls and first person to games that don't support them\n- In-game menu with shortcuts for adjusting settings\n- Access to various CVars for fixing broken shaders/effects/performance issues\n- Optional depth buffer integration for improved latency on some headsets\n- Per-game configurations\n- [C++ Plugin system](https://praydog.github.io/uevr-docs/plugins/getting_started.html) and [Blueprint support](https://praydog.github.io/uevr-docs/plugins/blueprint.html) for modders to add additional features like motion controls\n\n## Getting Started\n\nBefore launching, ensure you have installed .NET 6.0 SDK. It should tell you where to install it upon first open, but if not, you can [download it from here](https://dotnet.microsoft.com/en-us/download/dotnet/6.0). Most people should click x64 in the top left table, under the Installers column, next to windows.\n\nDownload the latest release from the [Releases page](https://github.com/praydog/UEVR/releases)\n\n1. Launch UEVRInjector.exe\n2. Launch the target game\n3. Locate the game in the process dropdown list\n4. Select your desired runtime (OpenVR/OpenXR)\n5. Toggle existing VR plugin nullification (if necessary)\n6. Configure pre-injection settings\n7. Inject\n\n## To-dos before injection\n\n1. Disable HDR (it will still work without it, but the game will be darker than usual if it is)\n2. Start as administrator if the game is not visible in the list\n3. Pass `-nohmd` to the game's command line and/or delete VR plugins from the game directory if the game contains any existing VR plugins\n4. Disable any overlays that may conflict and cause crashes (Rivatuner, ASUS software, Razer software, Overwolf, etc...)\n5. Disable graphical options in-game that may cause crashes or severe issues like DLSS Frame Generation\n6. Consider disabling `Hardware Accelerated GPU Scheduling` in your Windows `Graphics settings`\n\n## In-Game Menu\n\nPress the **Insert** key or **L3+R3** on an XInput based controller to access the in-game menu, which opens by default at startup. With the menu open, hold **RT** for various shortcuts:\n\n- RT + Left Stick: Move the camera left/right/forward/back\n- RT + Right Stick: Move the camera up/down\n- RT + B: Reset camera offset\n- RT + Y: Recenter view\n- RT + X: Reset standing origin\n\n## Quick overview of rendering methods\n\n### Native Stereo\n\nWhen it works, it looks the best, performs the best (usually). Can cause crashes or graphical bugs if the game does not play well with it.\n\nTemporal effects like TAA are fully intact. DLSS/FSR2 usually work completely fine with no ghosting in this mode.\n\nFully synchronized eye rendering. Works with the majority of games. Uses the actual stereo rendering pipeline in the Unreal Engine to achieve a stereoscopic image.\n\n### Synchronized Sequential\n\nA form of AFR. Can fix many rendering bugs that are introduced with Native Stereo. Renders two frames **sequentially** in a **synchronized** fashion on the same engine tick.\n\nFully synchronized eye rendering. Game world does not advance time between frames.\n\nLooks normal but temporal effects like TAA will have ghosting/doubling effect. Motion blur will need to be turned off.\n\nThis is the first alternative option that should be used if Native Stereo is not working as expected or you are encountering graphical bugs.\n\n**Skip Draw** skips the viewport draw on the next engine tick. Usually works the best but sometimes particle effects may not play at the correct speed.\n\n**Skip Tick** skips the next engine tick entirely. Usually buggy but does fix particle effects and sometimes brings higher performance.\n\n### AFR\n\nAlternated Frame Rendering. Renders each eye on separate frames in an alternating fashion, with the game world advancing time in between frames. Causes eye desyncs and usually nausea along with it.\n\nNot synchronized. Generally should not be used unless the other two are unusable in some way.\n"
        },
        {
          "name": "cmake.toml",
          "type": "blob",
          "size": 8.5869140625,
          "content": "# Reference: https://build-cpp.github.io/cmkr/cmake-toml\n# to build:\n# > cmake -B build\n# > cmake --build build --config Release\n[project]\nname = \"uevr-proj\"\ncmake-before=\"\"\" \nadd_compile_options($<$<CXX_COMPILER_ID:MSVC>:/MP>)\n\n# Enable PDB generation in release mode, but without the extra crap that RelWithDebInfo adds\nadd_compile_options(\"$<$<CONFIG:Release>:/Zi>\")\nadd_link_options(\"$<$<CONFIG:Release>:/DEBUG>\")\nadd_link_options(\"$<$<CONFIG:Release>:/OPT:REF>\")\nadd_link_options(\"$<$<CONFIG:Release>:/OPT:ICF>\")\n\"\"\"\ncmake-after = \"\"\"\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /MP\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /MP\")\n\nset(ASMJIT_STATIC ON CACHE BOOL \"\" FORCE)\n\nif (\"${CMAKE_BUILD_TYPE}\" MATCHES \"Release\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /MT\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /MT\")\n\n    # Statically compile runtime\n    string(REGEX REPLACE \"/MD\" \"/MT\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n    string(REGEX REPLACE \"/MD\" \"/MT\" CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n    string(REGEX REPLACE \"/MD\" \"/MT\" CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n    string(REGEX REPLACE \"/MD\" \"/MT\" CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE}\")\n\n    message(NOTICE \"Building in Release mode\")\nendif()\n\nset(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\n\nadd_subdirectory(dependencies/submodules/UESDK)\n\"\"\"\n\n[target.spdlog]\ntype = \"static\"\nsources = [\"dependencies/submodules/spdlog/src/*.cpp\"]\ninclude-directories = [\"dependencies/submodules/spdlog/include\"]\ncompile-definitions = [\"SPDLOG_COMPILED_LIB\"]\nalias=\"spdlog::spdlog\"\n\n[target.glm]\ntype = \"static\"\nsources = [\"dependencies/submodules/glm/glm/**.cpp\"]\ninclude-directories = [\"dependencies/submodules/glm\"]\n\n[fetch-content.bddisasm]\ngit = \"https://github.com/bitdefender/bddisasm\"\ntag = \"70db095765ab2066dd88dfb7bbcc42259ed167c5\"\n\n[fetch-content.kananlib]\ngit = \"https://github.com/cursey/kananlib\"\ntag = \"61a04d4219e3cb81b524a6990d3924289982bbf6\"\n\n[fetch-content.safetyhook]\ngit = \"https://github.com/praydog/safetyhook\"\ntag = \"4dce6a63268fc0a563f09a4e195b27ad847f9714\"\ncmake-before=\"\"\"\nset(SAFETYHOOK_FETCH_ZYDIS ON)\n\"\"\"\n\n[fetch-content.sdkgenny]\ngit = \"https://github.com/cursey/sdkgenny\"\ntag = \"f58077f8da8a271490c17558e93b75843b3afd19\"\n\n[fetch-content.openxr]\ngit = \"https://github.com/KhronosGroup/OpenXR-SDK\"\ntag = \"458984d7f59d1ae6dc1b597d94b02e4f7132eaba\"\n\n[fetch-content.json]\ngit = \"https://github.com/nlohmann/json\"\ntag = \"bc889afb4c5bf1c0d8ee29ef35eaaf4c8bef8a5d\"\n\n[fetch-content.asmjit]\ngit = \"https://github.com/asmjit/asmjit.git\"\ntag = \"2a706fd2ba355808cada31ac1eed8ce28caa6b37\"\n\n[fetch-content.tracy]\ngit = \"https://github.com/wolfpld/tracy\"\ntag = \"897aec5b062664d2485f4f9a213715d2e527e0ca\"\ncmake-before=\"\"\"\nset(TRACY_STATIC ON CACHE BOOL \"\" FORCE)\nset(TRACY_ENABLE OFF CACHE BOOL \"\" FORCE)\n\"\"\"\n\n[fetch-content.directxtk]\ngit = \"https://github.com/microsoft/DirectXTK\"\ntag = \"f5026eb34e7053b1aff325d38db107703f394974\"\ncmake-before=\"\"\"\nset(BUILD_TOOLS OFF CACHE BOOL \"\" FORCE)\n\"\"\"\ncmake-after=\"\"\"\nif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 19.35)\n    target_compile_options(DirectXTK PRIVATE /Zc:templateScope-)\nendif()\n\"\"\"\n\n[fetch-content.directxtk12]\ngit = \"https://github.com/microsoft/DirectXTK12\"\ntag = \"528801aa6dd8d628c2f756c41a76d300f47de478\"\ncmake-before=\"\"\"\nset(BUILD_TOOLS OFF CACHE BOOL \"\" FORCE)\n\"\"\"\ncmake-after=\"\"\"\nif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 19.35)\n    target_compile_options(DirectXTK12 PRIVATE /Zc:templateScope-)\nendif()\n\"\"\"\n\n[target.openvr]\ntype = \"shared\"\nsources = [\"dependencies/openvr/src/**.cpp\", \"dependencies/openvr/src/vrcommon/**.cpp\"]\ninclude-directories = [\"dependencies/openvr/headers\"]\ncompile-definitions = [\"VR_API_PUBLIC\", \"WIN64\"]\nalias = \"openvr_api\"\n\n[target.openvr.properties]\nOUTPUT_NAME = \"openvr_api\"\n\n[target.imgui]\ntype = \"static\"\nsources = [\"dependencies/submodules/imgui/*.cpp\"]\ninclude-directories = [\"dependencies/submodules/imgui\", \"src/uevr-imgui\"]\ncompile-definitions = [\n    \"IMGUI_USER_CONFIG=\\\"${CMAKE_CURRENT_SOURCE_DIR}/src/uevr-imgui/uevr_imconfig.hpp\\\"\",\n]\n\n[target.plugin_renderlib]\ntype = \"static\"\nsources = [\"examples/renderlib/**.cpp\", \"examples/renderlib/**.c\"]\nheaders = [\"examples/renderlib/**.hpp\", \"examples/renderlib/**.h\"]\ninclude-directories = [\"examples/renderlib\", \"include/\"]\ncompile-options = [\"/EHa\", \"/MP\"]\ncompile-features = [\"cxx_std_23\"]\nlink-libraries = [\n    \"imgui\"\n]\n\n[template.plugin]\ntype = \"shared\"\ninclude-directories = [\"include/\", \"examples/renderlib\"]\ncompile-features = [\"cxx_std_23\"]\nlink-libraries = [\n    \"plugin_renderlib\",\n]\n\n[target.example_plugin]\ntype = \"plugin\"\nsources = [\"examples/example_plugin/**.cpp\", \"examples/example_plugin/**.c\"]\nheaders = [\"examples/example_plugin/**.hpp\", \"examples/example_plugin/**.h\"]\n\n[target.sdk-test]\ntype = \"shared\"\nsources = [\"side-projects/sdk-test/**.cpp\", \"side-projects/sdk-test/**.c\"]\nheaders = [\"side-projects/sdk-test/**.hpp\", \"side-projects/sdk-test/**.h\"]\ninclude-directories = [\"shared/\", \"include/\"]\ncompile-features = [\"cxx_std_23\"]\nlink-libraries = [\n    \"kananlib\",\n    \"uesdk\"\n]\n\n[target.vr-plugin-nullifier]\ntype = \"shared\"\nsources = [\"vr-plugin-nullifier/**.cpp\", \"vr-plugin-nullifier/**.c\"]\ncompile-options = [\"/GS-\", \"/EHa\", \"/MP\"]\ncompile-features = [\"cxx_std_23\"]\nlink-libraries = [\n    \"kananlib\"\n]\n\n[target.vr-plugin-nullifier.properties]\nOUTPUT_NAME = \"UEVRPluginNullifier\"\nRUNTIME_OUTPUT_DIRECTORY_RELEASE = \"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}\"\nRUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO = \"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}\"\nLIBRARY_OUTPUT_DIRECTORY_RELEASE = \"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\nLIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO = \"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\nARCHIVE_OUTPUT_DIRECTORY_RELEASE = \"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\nARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO = \"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\n\n[target.lua]\ntype = \"static\"\nsources = [\"dependencies/lua/src/*.c\"]\ninclude-directories = [\"dependencies/lua/src\"]\n\n[target.sol2]\ntype = \"interface\"\ninclude-directories = [\"dependencies/sol2/single/single/include\"]\n\n[target.luavrlib]\ntype = \"static\"\ncompile-features = [\"cxx_std_23\"]\ncompile-options = [\"/bigobj\", \"/EHa\", \"/MP\"]\ninclude-directories = [\"include/\", \"lua-api/lib/include\"]\nsources = [\"lua-api/lib/**.cpp\", \"lua-api/lib/**.c\"]\nheaders = [\"lua-api/lib/**.hpp\", \"lua-api/lib/**.h\"]\nlink-libraries = [\n    \"lua\",\n    \"sol2\",\n    \"kananlib\",\n    \"glm\"\n]\n\n[target.LuaVR]\ntype = \"shared\"\ncompile-features = [\"cxx_std_23\"]\ncompile-options = [\"/bigobj\", \"/EHa\", \"/MP\"]\ninclude-directories = [\"include/\"]\nsources = [\"lua-api/Main.cpp\"]\nlink-libraries = [\n    \"luavrlib\"\n]\n\n[target.LuaVR.properties]\nRUNTIME_OUTPUT_DIRECTORY_RELEASE = \"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}\"\nRUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO = \"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}\"\nLIBRARY_OUTPUT_DIRECTORY_RELEASE = \"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\nLIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO = \"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\nARCHIVE_OUTPUT_DIRECTORY_RELEASE = \"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\nARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO = \"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\n\n[template.ue4template]\ntype = \"shared\"\nsources = [\"src/**.cpp\", \"src/**.c\"]\nheaders = [\"src/**.hpp\", \"src/**.h\"]\ninclude-directories = [\n    \"shared/\", \n    \"src/\", \n    \"include/\", \n    \"${OPENXR_SOURCE_DIR}/src\"\n]\ncompile-options = [\"/GS-\", \"/bigobj\", \"/EHa\", \"/MP\"]\ncompile-features = [\"cxx_std_23\"]\ncompile-definitions = []\nlink-libraries = [\n    \"shlwapi\",\n    \"d3d11\",\n    \"d3d12\",\n    \"safetyhook\",\n    \"glm\",\n    \"imgui\",\n    \"openvr_api\",\n    \"openxr_loader\",\n    \"nlohmann_json\",\n    \"Version\",\n    \"TracyClient\",\n    \"DirectXTK\",\n    \"DirectXTK12\",\n    \"sdkgenny\",\n    \"asmjit\",\n    \"luavrlib\"\n]\n\n[template.ue4template.properties]\nOUTPUT_NAME = \"UEVRBackend\"\nLINK_FLAGS = \"/DELAYLOAD:openvr_api.dll\"\nRUNTIME_OUTPUT_DIRECTORY_RELEASE = \"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}\"\nRUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO = \"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}\"\nLIBRARY_OUTPUT_DIRECTORY_RELEASE = \"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\nLIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO = \"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\nARCHIVE_OUTPUT_DIRECTORY_RELEASE = \"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\nARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO = \"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\n\n[target.uevr]\ntype=\"ue4template\"\nlink-libraries = [\n    \"kananlib\",\n    \"uesdk\"\n]\ncmake-after=\"\"\"\nadd_custom_command(\n    TARGET uevr PRE_BUILD\n    COMMAND ${CMAKE_COMMAND} -E echo \"Generating commit hash...\"\n    COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_SOURCE_DIR} ${CMAKE_SOURCE_DIR}/MakeCommitHash.bat\n)\nadd_custom_command(\n    TARGET uevr POST_BUILD\n    COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:openvr> $<TARGET_FILE_DIR:uevr>)\n\n\"\"\"\n"
        },
        {
          "name": "cmkr.cmake",
          "type": "blob",
          "size": 10.0849609375,
          "content": "include_guard()\n\n# Change these defaults to point to your infrastructure if desired\nset(CMKR_REPO \"https://github.com/build-cpp/cmkr\" CACHE STRING \"cmkr git repository\" FORCE)\nset(CMKR_TAG \"v0.2.14\" CACHE STRING \"cmkr git tag (this needs to be available forever)\" FORCE)\nset(CMKR_COMMIT_HASH \"\" CACHE STRING \"cmkr git commit hash (optional)\" FORCE)\n\n# To bootstrap/generate a cmkr project: cmake -P cmkr.cmake\nif(CMAKE_SCRIPT_MODE_FILE)\n    set(CMAKE_BINARY_DIR \"${CMAKE_BINARY_DIR}/build\")\n    set(CMAKE_CURRENT_BINARY_DIR \"${CMAKE_BINARY_DIR}\")\n    file(MAKE_DIRECTORY \"${CMAKE_BINARY_DIR}\")\nendif()\n\n# Set these from the command line to customize for development/debugging purposes\nset(CMKR_EXECUTABLE \"\" CACHE FILEPATH \"cmkr executable\")\nset(CMKR_SKIP_GENERATION OFF CACHE BOOL \"skip automatic cmkr generation\")\nset(CMKR_BUILD_TYPE \"Debug\" CACHE STRING \"cmkr build configuration\")\nmark_as_advanced(CMKR_REPO CMKR_TAG CMKR_COMMIT_HASH CMKR_EXECUTABLE CMKR_SKIP_GENERATION CMKR_BUILD_TYPE)\n\n# Disable cmkr if generation is disabled\nif(DEFINED ENV{CI} OR CMKR_SKIP_GENERATION OR CMKR_BUILD_SKIP_GENERATION)\n    message(STATUS \"[cmkr] Skipping automatic cmkr generation\")\n    unset(CMKR_BUILD_SKIP_GENERATION CACHE)\n    macro(cmkr)\n    endmacro()\n    return()\nendif()\n\n# Disable cmkr if no cmake.toml file is found\nif(NOT CMAKE_SCRIPT_MODE_FILE AND NOT EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/cmake.toml\")\n    message(AUTHOR_WARNING \"[cmkr] Not found: ${CMAKE_CURRENT_SOURCE_DIR}/cmake.toml\")\n    macro(cmkr)\n    endmacro()\n    return()\nendif()\n\n# Convert a Windows native path to CMake path\nif(CMKR_EXECUTABLE MATCHES \"\\\\\\\\\")\n    string(REPLACE \"\\\\\" \"/\" CMKR_EXECUTABLE_CMAKE \"${CMKR_EXECUTABLE}\")\n    set(CMKR_EXECUTABLE \"${CMKR_EXECUTABLE_CMAKE}\" CACHE FILEPATH \"\" FORCE)\n    unset(CMKR_EXECUTABLE_CMAKE)\nendif()\n\n# Helper macro to execute a process (COMMAND_ERROR_IS_FATAL ANY is 3.19 and higher)\nfunction(cmkr_exec)\n    execute_process(COMMAND ${ARGV} RESULT_VARIABLE CMKR_EXEC_RESULT)\n    if(NOT CMKR_EXEC_RESULT EQUAL 0)\n        message(FATAL_ERROR \"cmkr_exec(${ARGV}) failed (exit code ${CMKR_EXEC_RESULT})\")\n    endif()\nendfunction()\n\n# Windows-specific hack (CMAKE_EXECUTABLE_PREFIX is not set at the moment)\nif(WIN32)\n    set(CMKR_EXECUTABLE_NAME \"cmkr.exe\")\nelse()\n    set(CMKR_EXECUTABLE_NAME \"cmkr\")\nendif()\n\n# Use cached cmkr if found\nif(DEFINED ENV{CMKR_CACHE})\n    set(CMKR_DIRECTORY_PREFIX \"$ENV{CMKR_CACHE}\")\n    string(REPLACE \"\\\\\" \"/\" CMKR_DIRECTORY_PREFIX \"${CMKR_DIRECTORY_PREFIX}\")\n    if(NOT CMKR_DIRECTORY_PREFIX MATCHES \"\\\\/$\")\n        set(CMKR_DIRECTORY_PREFIX \"${CMKR_DIRECTORY_PREFIX}/\")\n    endif()\n    # Build in release mode for the cache\n    set(CMKR_BUILD_TYPE \"Release\")\nelse()\n    set(CMKR_DIRECTORY_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}/_cmkr_\")\nendif()\nset(CMKR_DIRECTORY \"${CMKR_DIRECTORY_PREFIX}${CMKR_TAG}\")\nset(CMKR_CACHED_EXECUTABLE \"${CMKR_DIRECTORY}/bin/${CMKR_EXECUTABLE_NAME}\")\n\n# Helper function to check if a string starts with a prefix\n# Cannot use MATCHES, see: https://github.com/build-cpp/cmkr/issues/61\nfunction(cmkr_startswith str prefix result)\n    string(LENGTH \"${prefix}\" prefix_length)\n    string(LENGTH \"${str}\" str_length)\n    if(prefix_length LESS_EQUAL str_length)\n        string(SUBSTRING \"${str}\" 0 ${prefix_length} str_prefix)\n        if(prefix STREQUAL str_prefix)\n            set(\"${result}\" ON PARENT_SCOPE)\n            return()\n        endif()\n    endif()\n    set(\"${result}\" OFF PARENT_SCOPE)\nendfunction()\n\n# Handle upgrading logic\nif(CMKR_EXECUTABLE AND NOT CMKR_CACHED_EXECUTABLE STREQUAL CMKR_EXECUTABLE)\n    cmkr_startswith(\"${CMKR_EXECUTABLE}\" \"${CMAKE_CURRENT_BINARY_DIR}/_cmkr\" CMKR_STARTSWITH_BUILD)\n    cmkr_startswith(\"${CMKR_EXECUTABLE}\" \"${CMKR_DIRECTORY_PREFIX}\" CMKR_STARTSWITH_CACHE)\n    if(CMKR_STARTSWITH_BUILD)\n        if(DEFINED ENV{CMKR_CACHE})\n            message(AUTHOR_WARNING \"[cmkr] Switching to cached cmkr: '${CMKR_CACHED_EXECUTABLE}'\")\n            if(EXISTS \"${CMKR_CACHED_EXECUTABLE}\")\n                set(CMKR_EXECUTABLE \"${CMKR_CACHED_EXECUTABLE}\" CACHE FILEPATH \"Full path to cmkr executable\" FORCE)\n            else()\n                unset(CMKR_EXECUTABLE CACHE)\n            endif()\n        else()\n            message(AUTHOR_WARNING \"[cmkr] Upgrading '${CMKR_EXECUTABLE}' to '${CMKR_CACHED_EXECUTABLE}'\")\n            unset(CMKR_EXECUTABLE CACHE)\n        endif()\n    elseif(DEFINED ENV{CMKR_CACHE} AND CMKR_STARTSWITH_CACHE)\n        message(AUTHOR_WARNING \"[cmkr] Upgrading cached '${CMKR_EXECUTABLE}' to '${CMKR_CACHED_EXECUTABLE}'\")\n        unset(CMKR_EXECUTABLE CACHE)\n    endif()\nendif()\n\nif(CMKR_EXECUTABLE AND EXISTS \"${CMKR_EXECUTABLE}\")\n    message(VERBOSE \"[cmkr] Found cmkr: '${CMKR_EXECUTABLE}'\")\nelseif(CMKR_EXECUTABLE AND NOT CMKR_EXECUTABLE STREQUAL CMKR_CACHED_EXECUTABLE)\n    message(FATAL_ERROR \"[cmkr] '${CMKR_EXECUTABLE}' not found\")\nelseif(NOT CMKR_EXECUTABLE AND EXISTS \"${CMKR_CACHED_EXECUTABLE}\")\n    set(CMKR_EXECUTABLE \"${CMKR_CACHED_EXECUTABLE}\" CACHE FILEPATH \"Full path to cmkr executable\" FORCE)\n    message(STATUS \"[cmkr] Found cached cmkr: '${CMKR_EXECUTABLE}'\")\nelse()\n    set(CMKR_EXECUTABLE \"${CMKR_CACHED_EXECUTABLE}\" CACHE FILEPATH \"Full path to cmkr executable\" FORCE)\n    message(VERBOSE \"[cmkr] Bootstrapping '${CMKR_EXECUTABLE}'\")\n\n    message(STATUS \"[cmkr] Fetching cmkr...\")\n    if(EXISTS \"${CMKR_DIRECTORY}\")\n        cmkr_exec(\"${CMAKE_COMMAND}\" -E rm -rf \"${CMKR_DIRECTORY}\")\n    endif()\n    find_package(Git QUIET REQUIRED)\n    cmkr_exec(\"${GIT_EXECUTABLE}\"\n        clone\n        --config advice.detachedHead=false\n        --branch ${CMKR_TAG}\n        --depth 1\n        ${CMKR_REPO}\n        \"${CMKR_DIRECTORY}\"\n    )\n    if(CMKR_COMMIT_HASH)\n        execute_process(\n            COMMAND \"${GIT_EXECUTABLE}\" checkout -q \"${CMKR_COMMIT_HASH}\"\n            RESULT_VARIABLE CMKR_EXEC_RESULT\n            WORKING_DIRECTORY \"${CMKR_DIRECTORY}\"\n        )\n        if(NOT CMKR_EXEC_RESULT EQUAL 0)\n            message(FATAL_ERROR \"Tag '${CMKR_TAG}' hash is not '${CMKR_COMMIT_HASH}'\")\n        endif()\n    endif()\n    message(STATUS \"[cmkr] Building cmkr (using system compiler)...\")\n    cmkr_exec(\"${CMAKE_COMMAND}\"\n        --no-warn-unused-cli\n        \"${CMKR_DIRECTORY}\"\n        \"-B${CMKR_DIRECTORY}/build\"\n        \"-DCMAKE_BUILD_TYPE=${CMKR_BUILD_TYPE}\"\n        \"-DCMAKE_UNITY_BUILD=ON\"\n        \"-DCMAKE_INSTALL_PREFIX=${CMKR_DIRECTORY}\"\n        \"-DCMKR_GENERATE_DOCUMENTATION=OFF\"\n    )\n    cmkr_exec(\"${CMAKE_COMMAND}\"\n        --build \"${CMKR_DIRECTORY}/build\"\n        --config \"${CMKR_BUILD_TYPE}\"\n        --parallel\n    )\n    cmkr_exec(\"${CMAKE_COMMAND}\"\n        --install \"${CMKR_DIRECTORY}/build\"\n        --config \"${CMKR_BUILD_TYPE}\"\n        --prefix \"${CMKR_DIRECTORY}\"\n        --component cmkr\n    )\n    if(NOT EXISTS ${CMKR_EXECUTABLE})\n        message(FATAL_ERROR \"[cmkr] Failed to bootstrap '${CMKR_EXECUTABLE}'\")\n    endif()\n    cmkr_exec(\"${CMKR_EXECUTABLE}\" version)\n    message(STATUS \"[cmkr] Bootstrapped ${CMKR_EXECUTABLE}\")\nendif()\nexecute_process(COMMAND \"${CMKR_EXECUTABLE}\" version\n    RESULT_VARIABLE CMKR_EXEC_RESULT\n)\nif(NOT CMKR_EXEC_RESULT EQUAL 0)\n    message(FATAL_ERROR \"[cmkr] Failed to get version, try clearing the cache and rebuilding\")\nendif()\n\n# Use cmkr.cmake as a script\nif(CMAKE_SCRIPT_MODE_FILE)\n    if(NOT EXISTS \"${CMAKE_SOURCE_DIR}/cmake.toml\")\n        execute_process(COMMAND \"${CMKR_EXECUTABLE}\" init\n            RESULT_VARIABLE CMKR_EXEC_RESULT\n        )\n        if(NOT CMKR_EXEC_RESULT EQUAL 0)\n            message(FATAL_ERROR \"[cmkr] Failed to bootstrap cmkr project. Please report an issue: https://github.com/build-cpp/cmkr/issues/new\")\n        else()\n            message(STATUS \"[cmkr] Modify cmake.toml and then configure using: cmake -B build\")\n        endif()\n    else()\n        execute_process(COMMAND \"${CMKR_EXECUTABLE}\" gen\n            RESULT_VARIABLE CMKR_EXEC_RESULT\n        )\n        if(NOT CMKR_EXEC_RESULT EQUAL 0)\n            message(FATAL_ERROR \"[cmkr] Failed to generate project.\")\n        else()\n            message(STATUS \"[cmkr] Configure using: cmake -B build\")\n        endif()\n    endif()\nendif()\n\n# This is the macro that contains black magic\nmacro(cmkr)\n    # When this macro is called from the generated file, fake some internal CMake variables\n    get_source_file_property(CMKR_CURRENT_LIST_FILE \"${CMAKE_CURRENT_LIST_FILE}\" CMKR_CURRENT_LIST_FILE)\n    if(CMKR_CURRENT_LIST_FILE)\n        set(CMAKE_CURRENT_LIST_FILE \"${CMKR_CURRENT_LIST_FILE}\")\n        get_filename_component(CMAKE_CURRENT_LIST_DIR \"${CMAKE_CURRENT_LIST_FILE}\" DIRECTORY)\n    endif()\n\n    # File-based include guard (include_guard is not documented to work)\n    get_source_file_property(CMKR_INCLUDE_GUARD \"${CMAKE_CURRENT_LIST_FILE}\" CMKR_INCLUDE_GUARD)\n    if(NOT CMKR_INCLUDE_GUARD)\n        set_source_files_properties(\"${CMAKE_CURRENT_LIST_FILE}\" PROPERTIES CMKR_INCLUDE_GUARD TRUE)\n\n        file(SHA256 \"${CMAKE_CURRENT_LIST_FILE}\" CMKR_LIST_FILE_SHA256_PRE)\n\n        # Generate CMakeLists.txt\n        cmkr_exec(\"${CMKR_EXECUTABLE}\" gen\n            WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\"\n        )\n\n        file(SHA256 \"${CMAKE_CURRENT_LIST_FILE}\" CMKR_LIST_FILE_SHA256_POST)\n\n        # Delete the temporary file if it was left for some reason\n        set(CMKR_TEMP_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/CMakerLists.txt\")\n        if(EXISTS \"${CMKR_TEMP_FILE}\")\n            file(REMOVE \"${CMKR_TEMP_FILE}\")\n        endif()\n\n        if(NOT CMKR_LIST_FILE_SHA256_PRE STREQUAL CMKR_LIST_FILE_SHA256_POST)\n            # Copy the now-generated CMakeLists.txt to CMakerLists.txt\n            # This is done because you cannot include() a file you are currently in\n            configure_file(CMakeLists.txt \"${CMKR_TEMP_FILE}\" COPYONLY)\n\n            # Add the macro required for the hack at the start of the cmkr macro\n            set_source_files_properties(\"${CMKR_TEMP_FILE}\" PROPERTIES\n                CMKR_CURRENT_LIST_FILE \"${CMAKE_CURRENT_LIST_FILE}\"\n            )\n\n            # 'Execute' the newly-generated CMakeLists.txt\n            include(\"${CMKR_TEMP_FILE}\")\n\n            # Delete the generated file\n            file(REMOVE \"${CMKR_TEMP_FILE}\")\n\n            # Do not execute the rest of the original CMakeLists.txt\n            return()\n        endif()\n        # Resume executing the unmodified CMakeLists.txt\n    endif()\nendmacro()\n"
        },
        {
          "name": "dependencies",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "lua-api",
          "type": "tree",
          "content": null
        },
        {
          "name": "nightly-body.md",
          "type": "blob",
          "size": 0.888671875,
          "content": "## Installation and quick usage\n\nExtract the UEVR.zip to a folder of your choice, then:\n\n1. Launch the frontend GUI (UEVRInjector.exe)\n2. Launch the target game\n3. Locate the game in the process dropdown list\n4. Select your desired runtime (OpenVR/OpenXR)\n5. Toggle existing VR plugin nullification (if necessary)\n6. Configure pre-injection settings\n7. Inject\n\nMore information and troubleshooting can be found on the [Documentation](https://praydog.github.io/uevr-docs/) page.\n\n## Additional notes\n\nYou may need to whitelist the UEVR folder or executable within your antivirus software for the time being.\n\nIf nothing happens, try moving UEVR to a different folder.\n\n# Links\n[Main repository](https://github.com/praydog/UEVR)\n\n[Website](http://uevr.io)\n\n[Documentation](https://praydog.github.io/uevr-docs/)\n\n[Flatscreen to VR Modding Discord](http://flat2vr.com)\n\n[Donations](https://www.patreon.com/praydog)"
        },
        {
          "name": "side-projects",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "vr-plugin-nullifier",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}