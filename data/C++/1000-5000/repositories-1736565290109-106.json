{
  "metadata": {
    "timestamp": 1736565290109,
    "page": 106,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "harfbuzz/harfbuzz",
      "stars": 4257,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".ci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.0419921875,
          "content": "# The following tries to match the current code style, is imperfect for now\n# but good for new codes be added\n\nIndentWidth: 2\nTabWidth: 8\nUseTab: Always\nSpaceBeforeParens: Always\nAllowShortLoopsOnASingleLine: true\nBreakBeforeBraces: Custom\nBraceWrapping:\n  AfterEnum: true\n  AfterStruct: false\n  SplitEmptyFunction: false\n  AfterClass: true\n  AfterControlStatement: true\n  AfterEnum: false\n  AfterFunction: true\n  AfterNamespace: false\n  AfterStruct: true\n  AfterUnion: true\n  BeforeElse: true\nAlwaysBreakTemplateDeclarations: true\nAlignTrailingComments: true\nAlignEscapedNewlines: Left\nAllowShortBlocksOnASingleLine: true\nSpaceAfterCStyleCast: true\nAlwaysBreakAfterDefinitionReturnType: TopLevel\nBinPackParameters: false\nAllowShortFunctionsOnASingleLine: Inline\nAccessModifierOffset: 0\nAlignTrailingComments: true\nAllowShortIfStatementsOnASingleLine: true\nAlignAfterOpenBracket: Align\nAlignOperands: true\nAllowShortCaseLabelsOnASingleLine: true\n\n# We like to have this only for function parameters and structs fields, not always\n# AlignConsecutiveDeclarations: true\n"
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.142578125,
          "content": "comment: false\n\ncoverage:\n  status:\n    project:\n      default:\n        informational: true\n    patch:\n      default:\n        informational: true\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2900390625,
          "content": "root = true\n\n[*]\ncharset = utf-8\ntrim_trailing_whitespace = true\nend_of_line = lf\ninsert_final_newline = true\n\n[*.{c,cc,h,hh,rl}]\ntab_width = 8\nindent_size = 2\nindent_style = tab\n\n[*.{py,sh}]\nindent_style = tab\n\n[{meson.build,meson_options.txt}]\ntab_width = 8\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.1962890625,
          "content": "Behdad Esfahbod\nDavid Corbett\nDavid Turner\nEbrahim Byagowi\nGarret Rieger\nJonathan Kew\nKhaled Hosny\nLars Knoll\nMartin Hosken\nOwen Taylor\nRoderick Sheeter\nRoozbeh Pournader\nSimon Hausmann\nWerner Lemberg\n"
        },
        {
          "name": "BUILD.md",
          "type": "blob",
          "size": 1.396484375,
          "content": "On Linux, install the development packages for FreeType, Cairo, and GLib. For\nexample, on Ubuntu / Debian, you would do:\n\n    $ sudo apt-get install meson pkg-config ragel gtk-doc-tools gcc g++ libfreetype6-dev libglib2.0-dev libcairo2-dev\n\nwhereas on Fedora, RHEL, CentOS, and other Red Hat based systems you would do:\n\n    $ sudo dnf install meson pkgconfig gtk-doc gcc gcc-c++ freetype-devel glib2-devel cairo-devel\n\nand on ArchLinux and Manjaro:\n\n    $ sudo pacman -Suy meson pkg-config ragel gcc freetype2 glib2 glib2-devel cairo\n\nOn macOS:\n\n    brew install pkg-config ragel gtk-doc freetype glib cairo meson\n\nThen use meson to build the project and run the tests, like:\n\n    meson build && ninja -Cbuild && meson test -Cbuild\n\nOn Windows, meson can build the project like above if a working MSVC's cl.exe\n(`vcvarsall.bat`) or gcc/clang is already on your path, and if you use\nsomething like `meson build --wrap-mode=default` it fetches and compiles most\nof the dependencies also.  It is recommended to install CMake either manually\nor via the Visual Studio installer when building with MSVC, using meson.\n\nOur CI configurations are also a good source of learning how to build HarfBuzz.\n\nThere is also amalgamated source provided with HarfBuzz which reduces whole process\nof building HarfBuzz to `g++ src/harfbuzz.cc -fno-exceptions` but there is\nno guarantee provided with buildability and reliability of features you get.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 33.5087890625,
          "content": "cmake_minimum_required(VERSION 3.12)\nproject(harfbuzz)\n\nmessage(WARN \"HarfBuzz has a Meson port and tries to migrate all the other build systems to it, please consider using it as we might remove our cmake port soon.\")\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n## Limit framework build to Xcode generator\nif (BUILD_FRAMEWORK)\n  # for a framework build on macOS, use:\n  # cmake -DBUILD_FRAMEWORK=ON -Bbuild -H. -GXcode && cmake --build build\n  if (NOT \"${CMAKE_GENERATOR}\" STREQUAL \"Xcode\")\n    message(FATAL_ERROR\n      \"You should use Xcode generator with BUILD_FRAMEWORK enabled\")\n  endif ()\n  set (CMAKE_OSX_ARCHITECTURES \"$(ARCHS_STANDARD_32_64_BIT)\")\n  set (CMAKE_MACOSX_RPATH ON)\n  set (BUILD_SHARED_LIBS ON)\nendif ()\n\n\n## Disallow in-source builds, as CMake generated make files can collide with autotools ones\nif (NOT MSVC AND \"${PROJECT_BINARY_DIR}\" STREQUAL \"${PROJECT_SOURCE_DIR}\")\n  message(FATAL_ERROR\n    \"\nIn-source builds are not permitted!  Make a separate folder for\"\n    \" building, e.g.,\"\n    \"\n  mkdir build; cd build; cmake ..\"\n    \"\nBefore that, remove the files created by this failed run with\"\n    \"\n  rm -rf CMakeCache.txt CMakeFiles\")\nendif ()\n\n\n## HarfBuzz build configurations\noption(HB_HAVE_CAIRO \"Enable cairo interop helpers\" OFF)\noption(HB_HAVE_FREETYPE \"Enable freetype interop helpers\" OFF)\noption(HB_HAVE_GRAPHITE2 \"Enable Graphite2 complementary shaper\" OFF)\noption(HB_HAVE_GLIB \"Enable glib unicode functions\" OFF)\noption(HB_HAVE_ICU \"Enable icu unicode functions\" OFF)\nif (TARGET freetype)\n  set (HB_HAVE_FREETYPE ON)\n  add_definitions(-DHAVE_FREETYPE=1)\nendif ()\nif (APPLE)\n  option(HB_HAVE_CORETEXT \"Enable CoreText shaper backend on macOS\" ON)\n  set (CMAKE_MACOSX_RPATH ON)\nendif ()\nif (WIN32)\n  option(HB_HAVE_UNISCRIBE \"Enable Uniscribe shaper backend on Windows\" OFF)\n  option(HB_HAVE_GDI \"Enable GDI integration helpers on Windows\" OFF)\n  option(HB_HAVE_DIRECTWRITE \"Enable DirectWrite shaper backend on Windows\" OFF)\nendif ()\noption(HB_BUILD_UTILS \"Build harfbuzz utils, needs cairo, freetype, and glib properly be installed\" OFF)\nif (HB_BUILD_UTILS)\n  set (HB_HAVE_GLIB ON)\n  set (HB_HAVE_FREETYPE ON)\nendif ()\n\noption(HB_BUILD_SUBSET \"Build harfbuzz-subset\" ON)\n\noption(HB_HAVE_GOBJECT \"Enable GObject Bindings\" OFF)\nif (HB_HAVE_GOBJECT)\n  set (HB_HAVE_GLIB ON)\nendif ()\n\noption(HB_HAVE_INTROSPECTION \"Enable building introspection (.gir/.typelib) files\" OFF)\nif (HB_HAVE_INTROSPECTION)\n  set (HB_HAVE_GOBJECT ON)\n  set (HB_HAVE_GLIB ON)\nendif ()\n\ninclude_directories(AFTER\n  ${PROJECT_SOURCE_DIR}/src\n  ${PROJECT_BINARY_DIR}/src\n)\n\n# We need Python3_EXECUTABLE to be set for running the tests...\nfind_package(Python3 COMPONENTS Interpreter)\n\n## Functions and headers\ninclude (CheckFunctionExists)\ninclude (CheckIncludeFile)\ninclude (CheckIncludeFiles)\nmacro (check_funcs) # Similar to AC_CHECK_FUNCS of autotools\n  foreach (func_name ${ARGN})\n    string(TOUPPER ${func_name} definition_to_add)\n    check_function_exists(${func_name} HAVE_${definition_to_add})\n    if (${HAVE_${definition_to_add}})\n      add_definitions(-DHAVE_${definition_to_add})\n    endif ()\n  endforeach ()\nendmacro ()\nif (UNIX)\n  list(APPEND CMAKE_REQUIRED_LIBRARIES m)\nendif ()\ncheck_funcs(atexit mprotect sysconf getpagesize mmap isatty)\ncheck_include_file(unistd.h HAVE_UNISTD_H)\nif (${HAVE_UNISTD_H})\n  add_definitions(-DHAVE_UNISTD_H)\nendif ()\ncheck_include_file(sys/mman.h HAVE_SYS_MMAN_H)\nif (${HAVE_SYS_MMAN_H})\n  add_definitions(-DHAVE_SYS_MMAN_H)\nendif ()\ncheck_include_file(stdbool.h HAVE_STDBOOL_H)\nif (${HAVE_STDBOOL_H})\n  add_definitions(-DHAVE_STDBOOL_H)\nendif ()\n\n# These will be used while making pkg-config .pc files\nset(PC_REQUIRES_PRIV \"\")\nset(PC_LIBS_PRIV \"\")\n\nif (NOT MSVC)\n  set(THREADS_PREFER_PTHREAD_FLAG ON)\n  find_package(Threads)\n  if (CMAKE_USE_PTHREADS_INIT)\n    add_definitions(\"-DHAVE_PTHREAD\")\n    list(APPEND THIRD_PARTY_LIBS Threads::Threads)\n    list(APPEND PC_LIBS_PRIV -pthread)\n  endif ()\nendif ()\n\nif (MSVC)\n  add_definitions(-wd4244 -wd4267 -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS)\n  add_definitions(-bigobj)\nendif ()\n\n\n## Detect if we are running inside a distribution or regular repository folder\n# if (EXISTS \"${PROJECT_SOURCE_DIR}/ChangeLog\")\n#   # perhaps we are on dist directory\n#   set (IN_HB_DIST TRUE)\n#   #set (HB_VERSION_H \"${PROJECT_SOURCE_DIR}/src/hb-version.h\")\n# endif ()\n\nfile(READ meson.build MESONBUILD)\nstring(REGEX MATCH \"version: '(([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+))',\" HB_VERSION_MATCH ${MESONBUILD})\nset (HB_VERSION ${CMAKE_MATCH_1})\nset (HB_VERSION_MAJOR ${CMAKE_MATCH_2})\nset (HB_VERSION_MINOR ${CMAKE_MATCH_3})\nset (HB_VERSION_MICRO ${CMAKE_MATCH_4})\n\n## Define sources and headers of the project\nset (project_sources ${PROJECT_SOURCE_DIR}/src/harfbuzz.cc) # use amalgam source\nset (subset_project_sources\n     ${PROJECT_SOURCE_DIR}/src/hb-number.cc\n     ${PROJECT_SOURCE_DIR}/src/hb-number.hh\n     ${PROJECT_SOURCE_DIR}/src/hb-ot-cff1-table.cc\n     ${PROJECT_SOURCE_DIR}/src/hb-ot-cff2-table.cc\n     ${PROJECT_SOURCE_DIR}/src/hb-ot-post-table-v2subset.hh\n     ${PROJECT_SOURCE_DIR}/src/hb-static.cc\n     ${PROJECT_SOURCE_DIR}/src/hb-subset-cff-common.cc\n     ${PROJECT_SOURCE_DIR}/src/hb-subset-cff-common.hh\n     ${PROJECT_SOURCE_DIR}/src/hb-subset-cff1.cc\n     ${PROJECT_SOURCE_DIR}/src/hb-subset-cff2.cc\n     ${PROJECT_SOURCE_DIR}/src/hb-subset-input.cc\n     ${PROJECT_SOURCE_DIR}/src/hb-subset-input.hh\n     ${PROJECT_SOURCE_DIR}/src/hb-subset-instancer-iup.hh\n     ${PROJECT_SOURCE_DIR}/src/hb-subset-instancer-iup.cc\n     ${PROJECT_SOURCE_DIR}/src/hb-subset-instancer-solver.hh\n     ${PROJECT_SOURCE_DIR}/src/hb-subset-instancer-solver.cc\n     ${PROJECT_SOURCE_DIR}/src/hb-subset-accelerator.hh\n     ${PROJECT_SOURCE_DIR}/src/hb-subset-plan.cc\n     ${PROJECT_SOURCE_DIR}/src/hb-subset-plan.hh\n     ${PROJECT_SOURCE_DIR}/src/hb-subset-plan-member-list.hh\n     ${PROJECT_SOURCE_DIR}/src/hb-subset-serialize.cc\n     ${PROJECT_SOURCE_DIR}/src/hb-subset.cc\n     ${PROJECT_SOURCE_DIR}/src/hb-subset.hh\n     ${PROJECT_SOURCE_DIR}/src/hb-repacker.hh\n     ${PROJECT_SOURCE_DIR}/src/graph/graph.hh\n     ${PROJECT_SOURCE_DIR}/src/graph/gsubgpos-graph.hh\n     ${PROJECT_SOURCE_DIR}/src/graph/gsubgpos-context.hh\n     ${PROJECT_SOURCE_DIR}/src/graph/gsubgpos-context.cc\n     ${PROJECT_SOURCE_DIR}/src/graph/coverage-graph.hh\n     ${PROJECT_SOURCE_DIR}/src/graph/classdef-graph.hh\n     ${PROJECT_SOURCE_DIR}/src/graph/pairpos-graph.hh\n     ${PROJECT_SOURCE_DIR}/src/graph/markbasepos-graph.hh\n     ${PROJECT_SOURCE_DIR}/src/graph/split-helpers.hh\n     ${PROJECT_SOURCE_DIR}/src/graph/serialize.hh\n     ${PROJECT_SOURCE_DIR}/src/OT/Color/COLR/colrv1-closure.hh\n)\nset (project_extra_sources)\nset (project_headers\n     ${PROJECT_SOURCE_DIR}/src/hb-aat-layout.h\n     ${PROJECT_SOURCE_DIR}/src/hb-aat.h\n     ${PROJECT_SOURCE_DIR}/src/hb-blob.h\n     ${PROJECT_SOURCE_DIR}/src/hb-buffer.h\n     ${PROJECT_SOURCE_DIR}/src/hb-common.h\n     ${PROJECT_SOURCE_DIR}/src/hb-cplusplus.hh\n     ${PROJECT_SOURCE_DIR}/src/hb-deprecated.h\n     ${PROJECT_SOURCE_DIR}/src/hb-draw.h\n     ${PROJECT_SOURCE_DIR}/src/hb-face.h\n     ${PROJECT_SOURCE_DIR}/src/hb-font.h\n     ${PROJECT_SOURCE_DIR}/src/hb-map.h\n     ${PROJECT_SOURCE_DIR}/src/hb-ot-color.h\n     ${PROJECT_SOURCE_DIR}/src/hb-ot-deprecated.h\n     ${PROJECT_SOURCE_DIR}/src/hb-ot-font.h\n     ${PROJECT_SOURCE_DIR}/src/hb-ot-layout.h\n     ${PROJECT_SOURCE_DIR}/src/hb-ot-math.h\n     ${PROJECT_SOURCE_DIR}/src/hb-ot-meta.h\n     ${PROJECT_SOURCE_DIR}/src/hb-ot-metrics.h\n     ${PROJECT_SOURCE_DIR}/src/hb-ot-name.h\n     ${PROJECT_SOURCE_DIR}/src/hb-ot-shape.h\n     ${PROJECT_SOURCE_DIR}/src/hb-ot-var.h\n     ${PROJECT_SOURCE_DIR}/src/hb-ot.h\n     ${PROJECT_SOURCE_DIR}/src/hb-paint.h\n     ${PROJECT_SOURCE_DIR}/src/hb-set.h\n     ${PROJECT_SOURCE_DIR}/src/hb-shape-plan.h\n     ${PROJECT_SOURCE_DIR}/src/hb-shape.h\n     ${PROJECT_SOURCE_DIR}/src/hb-style.h\n     ${PROJECT_SOURCE_DIR}/src/hb-unicode.h\n     ${PROJECT_SOURCE_DIR}/src/hb-version.h\n     ${PROJECT_SOURCE_DIR}/src/hb.h\n)\nset (subset_project_headers\n     ${PROJECT_SOURCE_DIR}/src/hb-subset.h\n     ${PROJECT_SOURCE_DIR}/src/hb-subset-serialize.h\n)\n\n## Find and include needed header folders and libraries\nif (HB_HAVE_FREETYPE AND NOT TARGET freetype)\n  include (FindFreetype)\n  if (NOT FREETYPE_FOUND)\n    message(FATAL_ERROR \"HB_HAVE_FREETYPE was set, but we failed to find it. Maybe add a CMAKE_PREFIX_PATH= to your Freetype2 install prefix\")\n  endif ()\n\n  list(APPEND THIRD_PARTY_LIBS ${FREETYPE_LIBRARIES})\n  include_directories(AFTER ${FREETYPE_INCLUDE_DIRS})\n  add_definitions(-DHAVE_FREETYPE=1)\n\n  list(APPEND project_headers ${PROJECT_SOURCE_DIR}/src/hb-ft.h)\n\n  # So check_funcs can find its headers\n  set (CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${FREETYPE_INCLUDE_DIRS})\n  set (CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} ${FREETYPE_LIBRARIES})\n\n  check_funcs(FT_Get_Var_Blend_Coordinates FT_Set_Var_Blend_Coordinates FT_Done_MM_Var)\nendif ()\n\nif (HB_HAVE_FREETYPE)\n  list(APPEND PC_REQUIRES_PRIV \"freetype2 >= 12.0.6\")\nendif ()\n\nif (HB_HAVE_GRAPHITE2)\n  add_definitions(-DHAVE_GRAPHITE2)\n\n  find_path(GRAPHITE2_INCLUDE_DIR graphite2/Font.h)\n  find_library(GRAPHITE2_LIBRARY graphite2)\n\n  include_directories(${GRAPHITE2_INCLUDE_DIR})\n\n  list(APPEND project_headers ${PROJECT_SOURCE_DIR}/src/hb-graphite2.h)\n\n  list(APPEND THIRD_PARTY_LIBS ${GRAPHITE2_LIBRARY})\n\n  list(APPEND PC_REQUIRES_PRIV \"graphite2 >= 1.2.0\")\n\n  mark_as_advanced(GRAPHITE2_INCLUDE_DIR GRAPHITE2_LIBRARY)\nendif ()\n\nif (HB_HAVE_GLIB)\n  add_definitions(-DHAVE_GLIB)\n\n  # https://github.com/WebKit/webkit/blob/master/Source/cmake/FindGLIB.cmake\n  find_package(PkgConfig)\n  pkg_check_modules(PC_GLIB QUIET glib-2.0)\n\n  find_library(GLIB_LIBRARIES NAMES glib-2.0 HINTS ${PC_GLIB_LIBDIR} ${PC_GLIB_LIBRARY_DIRS})\n  find_path(GLIBCONFIG_INCLUDE_DIR NAMES glibconfig.h HINTS ${PC_LIBDIR} ${PC_LIBRARY_DIRS} ${PC_GLIB_INCLUDEDIR} ${PC_GLIB_INCLUDE_DIRS} PATH_SUFFIXES glib-2.0/include)\n  find_path(GLIB_INCLUDE_DIR NAMES glib.h HINTS ${PC_GLIB_INCLUDEDIR} ${PC_GLIB_INCLUDE_DIRS} PATH_SUFFIXES glib-2.0)\n\n  include_directories(${GLIBCONFIG_INCLUDE_DIR} ${GLIB_INCLUDE_DIR})\n\n  list(APPEND project_headers ${PROJECT_SOURCE_DIR}/src/hb-glib.h)\n\n  list(APPEND THIRD_PARTY_LIBS ${GLIB_LIBRARIES})\n\n  list(APPEND PC_REQUIRES_PRIV \"glib-2.0 >= 2.19.1\")\n\n  mark_as_advanced(GLIB_LIBRARIES GLIBCONFIG_INCLUDE_DIR GLIB_INCLUDE_DIR)\nendif ()\n\nif (HB_HAVE_ICU)\n  add_definitions(-DHAVE_ICU)\n\n  find_package(ICU REQUIRED COMPONENTS uc)\n\n  if (ICU_VERSION VERSION_GREATER_EQUAL 75.1)\n    set(CMAKE_CXX_STANDARD 17)\n  endif ()\n\n  list(APPEND project_headers ${PROJECT_SOURCE_DIR}/src/hb-icu.h)\n\n  list(APPEND THIRD_PARTY_LIBS ICU::uc)\nendif ()\n\nif (APPLE AND HB_HAVE_CORETEXT)\n  # Apple Advanced Typography\n  add_definitions(-DHAVE_CORETEXT)\n\n  list(APPEND project_headers ${PROJECT_SOURCE_DIR}/src/hb-coretext.h)\n\n  if (HB_IOS)\n    find_library(COREFOUNDATION CoreFoundation)\n    if (COREFOUNDATION)\n      list(APPEND THIRD_PARTY_LIBS ${COREFOUNDATION})\n      list(APPEND PC_LIBS_PRIV \"-framework CoreFoundation\")\n    endif ()\n    mark_as_advanced(COREFOUNDATION)\n\n    find_library(CORETEXT CoreText)\n    if (CORETEXT)\n      list(APPEND THIRD_PARTY_LIBS ${CORETEXT})\n      list(APPEND PC_LIBS_PRIV \"-framework CoreText\")\n    endif ()\n    mark_as_advanced(CORETEXT)\n\n    find_library(COREGRAPHICS CoreGraphics)\n    if (COREGRAPHICS)\n      list(APPEND THIRD_PARTY_LIBS ${COREGRAPHICS})\n      list(APPEND PC_LIBS_PRIV \"-framework CoreGraphics\")\n    endif ()\n    mark_as_advanced(COREGRAPHICS)\n  else ()\n    find_library(APPLICATION_SERVICES_FRAMEWORK ApplicationServices)\n    if (APPLICATION_SERVICES_FRAMEWORK)\n      list(APPEND THIRD_PARTY_LIBS ${APPLICATION_SERVICES_FRAMEWORK})\n      list(APPEND PC_LIBS_PRIV \"-framework ApplicationServices\")\n    endif ()\n\n    mark_as_advanced(APPLICATION_SERVICES_FRAMEWORK)\n  endif ()\nendif ()\n\nif (WIN32 AND HB_HAVE_GDI)\n  add_definitions(-DHAVE_GDI)\n  list(APPEND project_headers ${PROJECT_SOURCE_DIR}/src/hb-gdi.h)\n  list(APPEND THIRD_PARTY_LIBS gdi32)\n  list(APPEND PC_LIBS_PRIV -lgdi32)\nendif ()\n\nif (WIN32 AND HB_HAVE_UNISCRIBE)\n  add_definitions(-DHAVE_UNISCRIBE)\n  list(APPEND project_headers ${PROJECT_SOURCE_DIR}/src/hb-uniscribe.h)\n  list(APPEND THIRD_PARTY_LIBS usp10 gdi32 rpcrt4)\n  list(APPEND PC_LIBS_PRIV -lusp10 -lgdi32 -lrpcrt4)\nendif ()\n\nif (WIN32 AND HB_HAVE_DIRECTWRITE)\n  if (CMAKE_VERSION VERSION_GREATER 3.12)\n    check_include_files(\"windows.h;dwrite_1.h\" HAVE_DWRITE_1_H LANGUAGE CXX)\n  else ()\n    check_include_files(\"windows.h;dwrite_1.h\" HAVE_DWRITE_1_H)\n  endif ()\n  if (NOT HAVE_DWRITE_1_H)\n    message(FATAL_ERROR \"DirectWrite was enabled explicitly, but required header is missing\")\n  endif ()\n  add_definitions(-DHAVE_DIRECTWRITE)\n  list(APPEND project_headers ${PROJECT_SOURCE_DIR}/src/hb-directwrite.h)\nendif ()\n\nif (HB_HAVE_CAIRO)\n  # https://github.com/WebKit/webkit/blob/master/Source/cmake/FindCairo.cmake\n  find_package(PkgConfig)\n  pkg_check_modules(PC_CAIRO QUIET cairo)\n\n  find_path(CAIRO_INCLUDE_DIRS NAMES cairo.h HINTS ${PC_CAIRO_INCLUDEDIR} ${PC_CAIRO_INCLUDE_DIRS} PATH_SUFFIXES cairo)\n  find_library(CAIRO_LIBRARIESNAMES cairo HINTS ${PC_CAIRO_LIBDIR} ${PC_CAIRO_LIBRARY_DIRS})\n  if (NOT CAIRO_LIBRARIESNAMES)\n    message(FATAL_ERROR \"HB_HAVE_CAIRO is ON but Cairo libraries are not found\")\n  endif()\n  include_directories(${CAIRO_INCLUDE_DIRS})\n  mark_as_advanced(CAIRO_INCLUDE_DIRS CAIRO_LIBRARIESNAMES)\n  add_definitions(-DHAVE_CAIRO=1)\n  list(APPEND project_headers ${PROJECT_SOURCE_DIR}/src/hb-cairo.h)\n  list(APPEND THIRD_PARTY_LIBS ${CAIRO_LIBRARIESNAMES})\nendif()\n\nif (HB_HAVE_GOBJECT)\n  add_definitions(-DHAVE_GOBJECT)\n  include (FindPerl)\n\n  # Use the hints from glib-2.0.pc to find glib-mkenums\n  find_package(PkgConfig)\n  pkg_check_modules(PC_GLIB QUIET glib-2.0)\n  find_program(GLIB_MKENUMS glib-mkenums\n    HINTS ${PC_glib_mkenums}\n  )\n  set (GLIB_MKENUMS_CMD)\n\n  if (WIN32 AND NOT MINGW)\n    # In Visual Studio builds, shebang lines are not supported\n    # in the standard cmd.exe shell that we use, so we need to\n    # first determine whether glib-mkenums is a Python or PERL\n    # script\n    execute_process(COMMAND \"${Python3_EXECUTABLE}\" \"${GLIB_MKENUMS}\" --version\n      RESULT_VARIABLE GLIB_MKENUMS_PYTHON\n      OUTPUT_QUIET ERROR_QUIET\n    )\n    if (GLIB_MKENUMS_PYTHON EQUAL 0)\n      message(\"${GLIB_MKENUMS} is a Python script.\")\n      set (GLIB_MKENUMS_CMD \"${Python3_EXECUTABLE}\" \"${GLIB_MKENUMS}\")\n    else ()\n      execute_process(COMMAND \"${PERL_EXECUTABLE}\" \"${GLIB_MKENUMS}\" --version\n        RESULT_VARIABLE GLIB_MKENUMS_PERL\n        OUTPUT_QUIET ERROR_QUIET\n      )\n      if (GLIB_MKENUMS_PERL EQUAL 0)\n        message(\"${GLIB_MKENUMS} is a PERL script.\")\n        set (GLIB_MKENUMS_CMD \"${PERL_EXECUTABLE}\" \"${GLIB_MKENUMS}\")\n      endif ()\n      if (NOT GLIB_MKENUMS_PERL EQUAL 0 AND NOT GLIB_MKENUMS_PYTHON EQUAL 0)\n        message(FATAL_ERROR \"Unable to determine type of glib-mkenums script\")\n      endif ()\n    endif ()\n  else ()\n    set (GLIB_MKENUMS_CMD \"${GLIB_MKENUMS}\")\n  endif ()\n  if (NOT GLIB_MKENUMS_CMD)\n    message(FATAL_ERROR \"HB_HAVE_GOBJECT was set, but we failed to find glib-mkenums, which is required\")\n  endif ()\n\n  pkg_check_modules(PC_GOBJECT QUIET gobject-2.0)\n\n  find_library(GOBJECT_LIBRARIES NAMES gobject-2.0 HINTS ${PC_GLIB_LIBDIR} ${PC_GLIB_LIBRARY_DIRS})\n  find_path(GOBJECT_INCLUDE_DIR NAMES glib-object.h HINTS ${PC_GLIB_INCLUDEDIR} ${PC_GLIB_INCLUDE_DIRS} PATH_SUFFIXES glib-2.0)\n\n  include_directories(${GOBJECTCONFIG_INCLUDE_DIR} ${GOBJECT_INCLUDE_DIR})\n  mark_as_advanced(GOBJECT_LIBRARIES GOBJECT_INCLUDE_DIR)\n\n  list(APPEND hb_gobject_sources ${PROJECT_SOURCE_DIR}/src/hb-gobject-structs.cc)\n  list(APPEND hb_gobject_gen_sources\n    ${CMAKE_CURRENT_BINARY_DIR}/src/hb-gobject-enums.cc\n  )\n  list(APPEND hb_gobject_structs_headers\n    ${PROJECT_SOURCE_DIR}/src/hb-gobject-structs.h\n  )\n  list(APPEND hb_gobject_headers\n    ${PROJECT_SOURCE_DIR}/src/hb-gobject.h\n    ${hb_gobject_structs_headers}\n  )\n  list(APPEND hb_gobject_gen_headers\n    ${CMAKE_CURRENT_BINARY_DIR}/src/hb-gobject-enums.h\n  )\n\n  add_custom_command(\n    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/src/hb-gobject-enums.h\n    COMMAND ${GLIB_MKENUMS_CMD}\n      --template=${PROJECT_SOURCE_DIR}/src/hb-gobject-enums.h.tmpl\n      --identifier-prefix hb_\n      --symbol-prefix hb_gobject\n      ${hb_gobject_structs_headers}\n      ${project_headers}\n      > ${CMAKE_CURRENT_BINARY_DIR}/src/hb-gobject-enums.h.tmp\n    COMMAND \"${CMAKE_COMMAND}\"\n      \"-DENUM_INPUT_SRC=${CMAKE_CURRENT_BINARY_DIR}/src/hb-gobject-enums.h.tmp\"\n      \"-DENUM_OUTPUT_SRC=${CMAKE_CURRENT_BINARY_DIR}/src/hb-gobject-enums.h\"\n      -P ${PROJECT_SOURCE_DIR}/replace-enum-strings.cmake\n    DEPENDS ${PROJECT_SOURCE_DIR}/src/hb-gobject-enums.h.tmpl\n      ${hb_gobject_header}\n      ${project_headers}\n  )\n\n  add_custom_command(\n    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/src/hb-gobject-enums.cc\n    COMMAND ${GLIB_MKENUMS_CMD}\n      --template=${PROJECT_SOURCE_DIR}/src/hb-gobject-enums.cc.tmpl\n      --identifier-prefix hb_\n      --symbol-prefix hb_gobject\n      ${hb_gobject_header}\n      ${project_headers}\n      > ${CMAKE_CURRENT_BINARY_DIR}/src/hb-gobject-enums.cc.tmp\n    COMMAND \"${CMAKE_COMMAND}\"\n      \"-DENUM_INPUT_SRC=${CMAKE_CURRENT_BINARY_DIR}/src/hb-gobject-enums.cc.tmp\"\n      \"-DENUM_OUTPUT_SRC=${CMAKE_CURRENT_BINARY_DIR}/src/hb-gobject-enums.cc\"\n      -P ${PROJECT_SOURCE_DIR}/replace-enum-strings.cmake\n    DEPENDS ${PROJECT_SOURCE_DIR}/src/hb-gobject-enums.cc.tmpl\n      ${CMAKE_CURRENT_BINARY_DIR}/src/hb-gobject-enums.h\n      ${hb_gobject_header}\n      ${project_headers}\n  )\nendif ()\n\n\n## Define harfbuzz library\nadd_library(harfbuzz ${project_sources} ${project_extra_sources} ${project_headers})\ntarget_link_libraries(harfbuzz ${THIRD_PARTY_LIBS})\ntarget_include_directories(harfbuzz PUBLIC\n                           \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>\"\n                           \"$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/harfbuzz>\")\nif (HB_HAVE_FREETYPE AND TARGET freetype)\n  target_link_libraries(harfbuzz freetype)\nendif ()\n\n\n## Define harfbuzz-icu library\nif (HB_HAVE_ICU)\n  add_library(harfbuzz-icu ${PROJECT_SOURCE_DIR}/src/hb-icu.cc ${PROJECT_SOURCE_DIR}/src/hb-icu.h)\n  add_dependencies(harfbuzz-icu harfbuzz)\n  target_link_libraries(harfbuzz-icu harfbuzz ${THIRD_PARTY_LIBS})\n\n  if (BUILD_SHARED_LIBS)\n    set_target_properties(harfbuzz harfbuzz-icu PROPERTIES VISIBILITY_INLINES_HIDDEN TRUE)\n  endif ()\nendif ()\n\n\n## Define harfbuzz-subset library\nif (HB_BUILD_SUBSET)\n  add_library(harfbuzz-subset ${subset_project_sources} ${subset_project_headers})\n  list(APPEND project_headers ${PROJECT_SOURCE_DIR}/src/hb-subset.h ${PROJECT_SOURCE_DIR}/src/hb-subset-serialize.h)\n  add_dependencies(harfbuzz-subset harfbuzz)\n  target_link_libraries(harfbuzz-subset harfbuzz ${THIRD_PARTY_LIBS})\n\n  if (BUILD_SHARED_LIBS)\n    set_target_properties(harfbuzz harfbuzz-subset PROPERTIES VISIBILITY_INLINES_HIDDEN TRUE)\n  endif ()\nendif ()\n\nif (UNIX OR MINGW OR VITA)\n  # Make symbols link locally\n  include (CheckCXXCompilerFlag)\n  CHECK_CXX_COMPILER_FLAG(-Bsymbolic-functions CXX_SUPPORTS_FLAG_BSYMB_FUNCS)\n  if (CXX_SUPPORTS_FLAG_BSYMB_FUNCS)\n    link_libraries(-Bsymbolic-functions)\n  endif ()\n\n  # As of CMake 3.0.0, the compiler id for Apple-provided Clang is now \"AppleClang\";\n  # thus we use MATCHES instead of STREQUAL to include either regular Clang or AppleClang\n  if (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" OR CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    # Make sure we don't link to libstdc++\n    set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-rtti -fno-exceptions\")\n    set (CMAKE_CXX_IMPLICIT_LINK_LIBRARIES \"m\") # libm\n    set (CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES \"\")\n    set_target_properties(harfbuzz PROPERTIES LINKER_LANGUAGE C)\n    if (HB_BUILD_SUBSET)\n      set_target_properties(harfbuzz-subset PROPERTIES LINKER_LANGUAGE C)\n    endif ()\n\n    # No threadsafe statics as we do it ourselves\n    set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-threadsafe-statics\")\n  endif ()\n\n  CHECK_CXX_COMPILER_FLAG(\"-std=c++11\" COMPILER_SUPPORTS_CXX11)\n  if (COMPILER_SUPPORTS_CXX11)\n    set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\n  else()\n    message(STATUS \"The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.\")\n  endif()\nendif ()\n\n\n## Define harfbuzz-gobject library\nif (HB_HAVE_GOBJECT)\n  add_library(harfbuzz-gobject\n    ${hb_gobject_sources}\n    ${hb_gobject_gen_sources}\n    ${hb_gobject_headers}\n    ${hb_gobject_gen_headers}\n  )\n  include_directories(BEFORE ${CMAKE_CURRENT_BINARY_DIR}/src)\n  add_dependencies(harfbuzz-gobject harfbuzz)\n  target_link_libraries(harfbuzz-gobject harfbuzz ${GOBJECT_LIBRARIES} ${THIRD_PARTY_LIBS})\n\n  if (BUILD_SHARED_LIBS)\n    set_target_properties(harfbuzz-gobject PROPERTIES VISIBILITY_INLINES_HIDDEN TRUE)\n  endif ()\nendif ()\n\n## Define harfbuzz-cairo library\nif (HB_HAVE_CAIRO)\n  include_directories(${CAIRO_INCLUDE_DIRS})\n  add_library(harfbuzz-cairo ${PROJECT_SOURCE_DIR}/src/hb-cairo.cc ${PROJECT_SOURCE_DIR}/src/hb-static.cc ${PROJECT_SOURCE_DIR}/src/hb-cairo.h)\n  add_dependencies(harfbuzz-cairo harfbuzz)\n  target_link_libraries(harfbuzz-cairo harfbuzz ${THIRD_PARTY_LIBS})\n\n  if (BUILD_SHARED_LIBS)\n    set_target_properties(harfbuzz-cairo PROPERTIES VISIBILITY_INLINES_HIDDEN TRUE)\n  endif ()\nendif()\n\nif (BUILD_SHARED_LIBS AND WIN32 AND NOT MINGW)\n  add_definitions(\"-DHB_DLL_EXPORT\")\nendif ()\n\n# On Windows, g-ir-scanner requires a DLL build in order for it to work\nif (WIN32)\n  if (NOT BUILD_SHARED_LIBS)\n    message(\"Building introspection files on Windows requires BUILD_SHARED_LIBS to be enabled.\")\n    set (HB_HAVE_INTROSPECTION OFF)\n  endif ()\nendif ()\n\nif (HB_HAVE_INTROSPECTION)\n  find_package(PkgConfig)\n  pkg_check_modules(PC_GI QUIET gobject-introspection-1.0)\n\n  find_program(G_IR_SCANNER g-ir-scanner\n    HINTS ${PC_g_ir_scanner}\n  )\n\n  find_program(G_IR_COMPILER g-ir-compiler\n    HINTS ${PC_g_ir_compiler}\n  )\n\n  if (WIN32 AND NOT MINGW)\n    # Note that since we already enable HB_HAVE_GOBJECT\n    # we would already have Python3_EXECUTABLE handy\n    set (G_IR_SCANNER_CMD \"${Python3_EXECUTABLE}\" \"${G_IR_SCANNER}\")\n  else ()\n    set (G_IR_SCANNER_CMD \"${G_IR_SCANNER}\")\n  endif ()\n\n  # We need to account for the varying output directories\n  # when we build using Visual Studio projects\n  if (\"${CMAKE_GENERATOR}\" MATCHES \"Visual Studio*\")\n    set (hb_libpath \"${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>\")\n  else ()\n    set (hb_libpath \"$<TARGET_FILE_DIR:harfbuzz-gobject>\")\n  endif ()\n\n  # Get the CFlags that we used to build HarfBuzz/HarfBuzz-GObject\n  set (hb_defines_cflags \"\")\n  foreach (hb_cflag ${hb_cflags})\n    list(APPEND hb_defines_cflags \"-D${hb_cflag}\")\n  endforeach (hb_cflag)\n\n  # Get the other dependent libraries we used to build HarfBuzz/HarfBuzz-GObject\n  set (extra_libs \"\")\n  foreach (extra_lib ${THIRD_PARTY_LIBS})\n    # We don't want the .lib extension here...\n    string(REPLACE \".lib\" \"\" extra_lib_stripped \"${extra_lib}\")\n    list(APPEND extra_libs \"--extra-library=${extra_lib_stripped}\")\n  endforeach ()\n\n  set (introspected_sources)\n  foreach (f\n    ${project_headers}\n    ${project_sources}\n    ${hb_gobject_gen_sources}\n    ${hb_gobject_gen_headers}\n    ${hb_gobject_sources}\n    ${hb_gobject_headers}\n  )\n    if (WIN32)\n      # Nasty issue: We need to make drive letters lower case,\n      # otherwise g-ir-scanner won't like it and give us a bunch\n      # of invalid items and unresolved types...\n      STRING(SUBSTRING \"${f}\" 0 1 drive)\n      STRING(SUBSTRING \"${f}\" 1 -1 path)\n      if (drive MATCHES \"[A-Z]\")\n        STRING(TOLOWER ${drive} drive_lower)\n        list(APPEND introspected_sources \"${drive_lower}${path}\")\n      else ()\n        list(APPEND introspected_sources \"${f}\")\n      endif ()\n    else ()\n      list(APPEND introspected_sources \"${f}\")\n    endif ()\n  endforeach ()\n\n  file(REMOVE ${CMAKE_CURRENT_BINARY_DIR}/src/hb_gir_list)\n  foreach (s ${introspected_sources})\n    file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/src/hb_gir_list \"${s}\\n\")\n  endforeach ()\n\n  # Finally, build the introspection files...\n  add_custom_command(\n    TARGET harfbuzz-gobject\n    POST_BUILD\n    COMMAND ${G_IR_SCANNER_CMD}\n      --warn-all --no-libtool --verbose\n      --namespace=HarfBuzz\n      --nsversion=0.0\n      --symbol-prefix=hb\n      --symbol-prefix=hb_gobject\n      --identifier-prefix=hb_\n      --include GObject-2.0\n      --pkg-export=harfbuzz-gobject\n      --c-include=hb-gobject.h\n      --cflags-begin\n      -I${PROJECT_SOURCE_DIR}/src\n      -I${PROJECT_BINARY_DIR}/src\n      ${hb_includedir_cflags}\n      ${hb_defines_cflags}\n      -DHB_NO_SINGLE_HEADER_ERROR\n      -DHB_HAVE_GOBJECT\n      -DHB_EXTERN=\n      --cflags-end\n      --library=harfbuzz-gobject\n      --library=harfbuzz\n      -L${hb_libpath}\n      ${extra_libs}\n      --filelist ${CMAKE_CURRENT_BINARY_DIR}/src/hb_gir_list\n      -o ${hb_libpath}/HarfBuzz-0.0.gir\n    DEPENDS harfbuzz-gobject harfbuzz ${CMAKE_CURRENT_BINARY_DIR}/src/hb_gir_list\n  )\n\n  add_custom_command(\n    TARGET harfbuzz-gobject\n    POST_BUILD\n    COMMAND \"${G_IR_COMPILER}\"\n      --verbose --debug\n      --includedir ${CMAKE_CURRENT_BINARY_DIR}\n      ${hb_libpath}/HarfBuzz-0.0.gir\n      -o ${hb_libpath}/HarfBuzz-0.0.typelib\n    DEPENDS ${hb_libpath}/HarfBuzz-0.0.gir harfbuzz-gobject\n  )\nendif ()\n\n\n## Additional framework build configs\nif (BUILD_FRAMEWORK)\n  set (CMAKE_MACOSX_RPATH ON)\n  set_target_properties(harfbuzz PROPERTIES\n    FRAMEWORK TRUE\n    PUBLIC_HEADER \"${project_headers}\"\n    XCODE_ATTRIBUTE_INSTALL_PATH \"@rpath\"\n  )\n  set (MACOSX_FRAMEWORK_IDENTIFIER \"harfbuzz\")\n  set (MACOSX_FRAMEWORK_SHORT_VERSION_STRING \"${HB_VERSION}\")\n  set (MACOSX_FRAMEWORK_BUNDLE_VERSION \"${HB_VERSION}\")\nendif ()\n\n\n## Additional harfbuzz build artifacts\nif (HB_BUILD_UTILS)\n  add_definitions(\"-DPACKAGE_NAME=\\\"HarfBuzz\\\"\")\n  add_definitions(\"-DPACKAGE_VERSION=\\\"${HB_VERSION}\\\"\")\n\n  if (HB_HAVE_CAIRO)\n    add_executable(hb-view\n        ${PROJECT_SOURCE_DIR}/util/ansi-print.hh\n        ${PROJECT_SOURCE_DIR}/util/face-options.hh\n        ${PROJECT_SOURCE_DIR}/util/font-options.hh\n        ${PROJECT_SOURCE_DIR}/util/hb-view.cc\n        ${PROJECT_SOURCE_DIR}/util/helper-cairo-ansi.hh\n        ${PROJECT_SOURCE_DIR}/util/helper-cairo-ft.hh\n        ${PROJECT_SOURCE_DIR}/util/helper-cairo.hh\n        ${PROJECT_SOURCE_DIR}/util/main-font-text.hh\n        ${PROJECT_SOURCE_DIR}/util/options.hh\n        ${PROJECT_SOURCE_DIR}/util/output-options.hh\n        ${PROJECT_SOURCE_DIR}/util/shape-consumer.hh\n        ${PROJECT_SOURCE_DIR}/util/shape-options.hh\n        ${PROJECT_SOURCE_DIR}/util/text-options.hh\n        ${PROJECT_SOURCE_DIR}/util/view-cairo.hh\n        ${PROJECT_SOURCE_DIR}/util/view-options.hh\n    )\n    target_link_libraries(hb-view harfbuzz-cairo harfbuzz ${CAIRO_LIBRARIESNAMES})\n  endif()\n\n  add_executable(hb-shape\n        ${PROJECT_SOURCE_DIR}/util/batch.hh\n        ${PROJECT_SOURCE_DIR}/util/face-options.hh\n        ${PROJECT_SOURCE_DIR}/util/font-options.hh\n        ${PROJECT_SOURCE_DIR}/util/hb-shape.cc\n        ${PROJECT_SOURCE_DIR}/util/main-font-text.hh\n        ${PROJECT_SOURCE_DIR}/util/options.hh\n        ${PROJECT_SOURCE_DIR}/util/output-options.hh\n        ${PROJECT_SOURCE_DIR}/util/shape-consumer.hh\n        ${PROJECT_SOURCE_DIR}/util/shape-format.hh\n        ${PROJECT_SOURCE_DIR}/util/shape-options.hh\n        ${PROJECT_SOURCE_DIR}/util/shape-output.hh\n        ${PROJECT_SOURCE_DIR}/util/text-options.hh\n  )\n  target_link_libraries(hb-shape harfbuzz)\n\n  add_executable(hb-subset\n        ${PROJECT_SOURCE_DIR}/util/batch.hh\n        ${PROJECT_SOURCE_DIR}/util/face-options.hh\n        ${PROJECT_SOURCE_DIR}/util/hb-subset.cc\n        ${PROJECT_SOURCE_DIR}/util/main-font-text.hh\n        ${PROJECT_SOURCE_DIR}/util/options.hh\n        ${PROJECT_SOURCE_DIR}/util/output-options.hh\n        ${PROJECT_SOURCE_DIR}/util/text-options.hh\n        ${PROJECT_SOURCE_DIR}/util/helper-subset.hh\n  )\n  target_link_libraries(hb-subset harfbuzz harfbuzz-subset)\n\n  add_executable(hb-ot-shape-closure\n        ${PROJECT_SOURCE_DIR}/util/face-options.hh\n        ${PROJECT_SOURCE_DIR}/util/font-options.hh\n        ${PROJECT_SOURCE_DIR}/util/hb-ot-shape-closure.cc\n        ${PROJECT_SOURCE_DIR}/util/main-font-text.hh\n        ${PROJECT_SOURCE_DIR}/util/options.hh\n        ${PROJECT_SOURCE_DIR}/util/text-options.hh\n  )\n  target_link_libraries(hb-ot-shape-closure harfbuzz)\n\n  if (HB_HAVE_GOBJECT)\n    add_executable(hb-info\n        ${PROJECT_SOURCE_DIR}/util/batch.hh\n        ${PROJECT_SOURCE_DIR}/util/face-options.hh\n        ${PROJECT_SOURCE_DIR}/util/font-options.hh\n        ${PROJECT_SOURCE_DIR}/util/hb-info.cc\n        ${PROJECT_SOURCE_DIR}/util/options.hh\n    )\n    target_link_libraries(hb-info harfbuzz-gobject harfbuzz)\n  endif()\nendif ()\n\n\n## Install\ninclude (GNUInstallDirs)\n\nif (NOT SKIP_INSTALL_HEADERS AND NOT SKIP_INSTALL_ALL)\n  install(FILES ${project_headers} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/harfbuzz)\n  if (HB_HAVE_GOBJECT)\n    install(FILES ${hb_gobject_headers} ${hb_gobject_gen_headers} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/harfbuzz)\n  endif ()\nendif ()\n\n# get these variables in the required format\nlist(REMOVE_DUPLICATES PC_REQUIRES_PRIV)\nstring(REPLACE \";\" \", \" PC_REQUIRES_PRIV \"${PC_REQUIRES_PRIV}\")\nlist(REMOVE_DUPLICATES PC_LIBS_PRIV)\nstring(REPLACE \";\" \" \" PC_LIBS_PRIV \"${PC_LIBS_PRIV}\")\n\n# Macro to write pkg-config .pc configuration files\nmacro ( make_pkgconfig_pc_file name )\n  file(READ \"${PROJECT_SOURCE_DIR}/src/${name}.pc.in\" FSTR)\n\n  string(REPLACE \"%prefix%\" \"${CMAKE_INSTALL_PREFIX}\" FSTR ${FSTR})\n  string(REPLACE \"%exec_prefix%\" \"\\${prefix}\" FSTR ${FSTR})\n\n  if (IS_ABSOLUTE \"${CMAKE_INSTALL_INCLUDEDIR}\")\n    string(REPLACE \"%includedir%\" \"${CMAKE_INSTALL_INCLUDEDIR}\" FSTR ${FSTR})\n  else ()\n    string(REPLACE \"%includedir%\" \"\\${prefix}/${CMAKE_INSTALL_INCLUDEDIR}\" FSTR ${FSTR})\n  endif ()\n\n  if (IS_ABSOLUTE \"${CMAKE_INSTALL_LIBDIR}\")\n    string(REPLACE \"%libdir%\" \"${CMAKE_INSTALL_LIBDIR}\" FSTR ${FSTR})\n  else ()\n    string(REPLACE \"%libdir%\" \"\\${prefix}/${CMAKE_INSTALL_LIBDIR}\" FSTR ${FSTR})\n  endif ()\n\n  string(REPLACE \"%VERSION%\" \"${HB_VERSION}\" FSTR ${FSTR})\n  string(REPLACE \"%requires_private%\" \"${PC_REQUIRES_PRIV}\" FSTR ${FSTR})\n  string(REPLACE \"%libs_private%\" \"${PC_LIBS_PRIV}\" FSTR ${FSTR})\n\n  file(WRITE \"${PROJECT_BINARY_DIR}/${name}.pc\" ${FSTR})\n\n  install(\n    FILES \"${PROJECT_BINARY_DIR}/${name}.pc\"\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\"\n    COMPONENT pkgconfig\n  )\nendmacro ( make_pkgconfig_pc_file )\n\n# Generate hb-features.h with the features we enabled\nmacro (make_hb_features_h)\n  file(READ \"${PROJECT_SOURCE_DIR}/src/hb-features.h.in\" feature_h_in)\n  foreach(arg cairo coretext directwrite freetype gdi glib gobject graphite icu uniscribe wasm)\n    string(TOUPPER ${arg} feature_caps)\n    set(feature_instring \"#mesondefine HB_HAS_${feature_caps}\")\n    if (HB_HAVE_${feature_caps})\n      set(feature_outstring \"#define HB_HAS_${feature_caps} 1\")\n    else ()\n      set(feature_outstring \"/* #undef HB_HAS_${feature_caps} */\")\n    endif()\n    string(REPLACE ${feature_instring} ${feature_outstring} feature_h_in ${feature_h_in})\n  endforeach()\n  file(WRITE \"${PROJECT_BINARY_DIR}/src/hb-features.h\" ${feature_h_in})\n  if (NOT SKIP_INSTALL_HEADERS AND NOT SKIP_INSTALL_ALL)\n    install(\n      FILES \"${PROJECT_BINARY_DIR}/src/hb-features.h\"\n      DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/harfbuzz\"\n    )\n  endif()\nendmacro (make_hb_features_h)\n\nif (NOT SKIP_INSTALL_LIBRARIES AND NOT SKIP_INSTALL_ALL)\n  install(TARGETS harfbuzz\n    EXPORT harfbuzzConfig\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    FRAMEWORK DESTINATION Library/Frameworks\n  )\n  make_pkgconfig_pc_file(\"harfbuzz\")\n  install(EXPORT harfbuzzConfig\n      NAMESPACE harfbuzz::\n      DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/harfbuzz\n  )\n  if (HB_HAVE_ICU)\n    install(TARGETS harfbuzz-icu\n      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n      RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n      FRAMEWORK DESTINATION Library/Frameworks\n    )\n    make_pkgconfig_pc_file(\"harfbuzz-icu\")\n  endif ()\n  if (HB_HAVE_CAIRO)\n    install(TARGETS harfbuzz-cairo\n      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n      RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n      FRAMEWORK DESTINATION Library/Frameworks\n    )\n    make_pkgconfig_pc_file(\"harfbuzz-cairo\")\n  endif ()\n  if (HB_BUILD_SUBSET)\n    install(TARGETS harfbuzz-subset\n      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    )\n    make_pkgconfig_pc_file(\"harfbuzz-subset\")\n  endif ()\n  if (HB_BUILD_UTILS)\n    if (WIN32 AND BUILD_SHARED_LIBS)\n      install(TARGETS harfbuzz-subset\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n      )\n    endif ()\n    if (HB_HAVE_CAIRO)\n      install(TARGETS hb-view\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n      )\n    endif()\n    install(TARGETS hb-subset\n      RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    )\n\n    install(TARGETS hb-shape\n      RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    )\n\n    if (HB_HAVE_GOBJECT)\n      install(TARGETS hb-info\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n      )\n    endif()\n\n    install(TARGETS hb-ot-shape-closure\n      RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    )\n  endif ()\n  if (HB_HAVE_GOBJECT)\n    install(TARGETS harfbuzz-gobject\n      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n      RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    )\n    make_pkgconfig_pc_file(\"harfbuzz-gobject\")\n    if (HB_HAVE_INTROSPECTION)\n      if (\"${CMAKE_GENERATOR}\" MATCHES \"Visual Studio*\")\n        set (hb_libpath \"${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>\")\n      else ()\n        set (hb_libpath \"$<TARGET_FILE_DIR:harfbuzz-gobject>\")\n      endif ()\n\n      install(FILES \"${hb_libpath}/HarfBuzz-0.0.gir\"\n        DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/gir-1.0\n      )\n\n      install(FILES \"${hb_libpath}/HarfBuzz-0.0.typelib\"\n        DESTINATION ${CMAKE_INSTALL_LIBDIR}/girepository-1.0\n      )\n    endif ()\n  endif ()\n  make_hb_features_h()\nendif ()\n"
        },
        {
          "name": "CONFIG.md",
          "type": "blob",
          "size": 7.4892578125,
          "content": "# Configuring HarfBuzz\n\nMost of the time you will not need any custom configuration.  The configuration\noptions provided by `meson` should be enough.  In particular, if you just want\nHarfBuzz library plus hb-shape / hb-view utilities, make sure FreeType and Cairo\nare available and found during configuration.\n\nIf you are building for distribution, you should more carefully consider whether\nyou need Glib, ICU, Graphite2, as well as CoreText / Uniscribe / DWrite.  Make\nsure the relevant ones are enabled.\n\nIf you are building for custom environment (embedded, downloadable app, etc)\nwhere you mostly just want to call `hb_shape()` and the binary size of the\nresulting library is very important to you, the rest of this file guides you\nthrough your options to disable features you may not need, in exchange for\nbinary size savings.\n\n## Compiler Options\n\nMake sure you build with your compiler's \"optimize for size\" option.  On `gcc`\nthis is `-Os`, and can be enabled by passing `CXXFLAGS=-Os`.  On clang there\nis an even more extreme flag, `-Oz`.  Meson also provides `--buildtype=minsize`\nfor more convenience.\n\nHarfBuzz heavily uses inline functions and the optimize-size flag can make the\nlibrary smaller by 20% or more.  Moreover, sometimes, based on the target CPU,\nthe optimize-size builds perform *faster* as well, thanks to lower code\nfootprint and caching effects.  So, definitely try that even if size is not\nextremely tight but you have a huge application.  For example, Chrome does\nthat.  Note that this configuration also automatically enables certain internal\noptimizations.  Search for `HB_OPTIMIZE_SIZE` for details, if you are using\nother compilers, or continue reading.\n\nAnother compiler option to consider is \"link-time optimization\", also known as\n'lto'.  To enable that, feel free to use `-Db_lto=true` of meson.\nThis, also, can have a huge impact on the final size, 20% or more.\n\nFinally, if you are making a static library build or otherwise linking the\nlibrary into your app, make sure your linker removes unused functions.  This\ncan be tricky and differ from environment to environment, but you definitely\nwant to make sure this happens.  Otherwise, every unused public function will\nbe adding unneeded bytes to your binary.  The following pointers might come\nhandy:\n\n * https://lwn.net/Articles/741494/ (all of the four-part series)\n * https://elinux.org/images/2/2d/ELC2010-gc-sections_Denys_Vlasenko.pdf\n\nCombining the above three build options should already shrink your library a lot.\nThe rest of this file shows you ways to shrink the library even further at the\nexpense of removing functionality (that may not be needed).  The remaining\noptions are all enabled by defining pre-processor macros, which can be done\nvia `CXXFLAGS` or `CPPFLAGS` similarly.\n\n\n## Unicode-functions\n\nAccess to Unicode data can be configured at compile time as well as run-time.\nBy default, HarfBuzz ships with its own compact subset of properties from\nUnicode Character Database that it needs.  This is a highly-optimized\nimplementation that depending on compile settings (optimize-size or not)\ntakes around ~40kb or ~60kb.  Using this implementation (default) is highly\nrecommended, as HarfBuzz always ships with data from latest version of Unicode.\nThis implementation can be disabled by defining `HB_NO_UCD`.\n\nFor example, if you are enabling ICU as a built-in option, or GLib, those\ncan provide Unicode data as well, so defining `HB_NO_UCD` might save you\nspace without reducing functionality (to the extent that the Unicode version\nof those implementations is recent.)\n\nIf, however, you provide your own Unicode data to HarfBuzz at run-time by\ncalling `hb_buffer_set_unicode_funcs` on every buffer you create, and you do\nnot rely on `hb_unicode_funcs_get_default()` results, you can disable the\ninternal implementation by defining both `HB_NO_UCD` and `HB_NO_UNICODE_FUNCS`.\nThe latter is needed to guard against accidentally building a library without\nany default Unicode implementations.\n\n\n## Font-functions\n\nAccess to certain font functionalities can also be configured at run-time.  By\ndefault, HarfBuzz uses an efficient internal implementation of OpenType\nfunctionality for this.  This internal implementation is called `hb-ot-font`.\nAll newly-created `hb_font_t` objects by default use `hb-ot-font`.  Using this\nis highly recommended, and is what fonts use by default when they are created.\n\nMost embedded uses will probably use HarfBuzz with FreeType using `hb-ft.h`.\nIn that case, or if you otherwise provide those functions by calling\n`hb_font_set_funcs()` on every font you create, you can disable `hb-ot-font`\nwithout loss of functionality by defining `HB_NO_OT_FONT`.\n\n\n## Shapers\n\nMost HarfBuzz clients use it for the main shaper, called \"ot\".  However, it\nis legitimate to want to compile HarfBuzz with only another backend, eg.\nCoreText, for example for an iOS app.  For that, you want `HB_NO_OT_SHAPE`.\nIf you are going down that route, check if you want `HB_NO_OT`.\n\nThis is very rarely what you need.  Make sure you understand exactly what you\nare doing.\n\nDefining `HB_NO_FALLBACK_SHAPE` however is pretty harmless.  That removes the\n(unused) \"fallback\" shaper.  This is defined by the `HB_TINY` profile already\n(more below).\n\n\n## Thread-safety\n\nBy default HarfBuzz builds as a thread-safe library.  The exception is that\nthe `HB_TINY` predefined configuration (more below) disables thread-safety.\n\nIf you do *not* need thread-safety in the library (eg. you always call into\nHarfBuzz from the same thread), you can disable thread-safety by defining\n`HB_NO_MT`.  As noted already, this is enabled by `HB_TINY`.\n\n\n## Pre-defined configurations\n\nThe [`hb-config.hh`](src/hb-config.hh) internal header supports three\npre-defined configurations as well grouping of various configuration options.\nThe pre-defined configurations are:\n\n  * `HB_MINI`: Disables shaping of AAT as well as legacy fonts.  Ie. it produces\n    a capable OpenType shaper only.\n\n  * `HB_LEAN`: Disables various non-shaping functionality in the library, as well\n    as esoteric or rarely-used shaping features.  See the definition for details.\n\n  * `HB_TINY`: Enables both `HB_MINI` and `HB_LEAN` configurations, as well as\n    disabling thread-safety and debugging, and use even more size-optimized data\n    tables.\n\nTo setup the build with these options use something like:\n```\n$ meson setup build -Dcpp_args=-DHB_MINI -Dc_args=-DHB_MINI\n```\n\n## Tailoring configuration\n\nMost of the time, one of the pre-defined configuration is exactly what one needs.\nSometimes, however, the pre-defined configuration cuts out features that might\nbe desired in the library.  Unfortunately there is no quick way to undo those\nconfigurations from the command-line.\n\nHowever, configuration can still be overridden from a file.  To do that, add your\noverride instructions (mostly `undef` instructions) to a header file and define\nthe macro `HB_CONFIG_OVERRIDE_H` to the string containing to that header file's\nname.  HarfBuzz will then include that file at the appropriate place during\nconfiguration.\n\nUp until HarfBuzz 3.1.2, the configuration override header file's name was\nfixed and called `config-override.h`, and was activated by defining the macro\n`HAVE_CONFIG_OVERRIDE_H`.  That still works.\n\n\n## Notes\n\nNote that the config option `HB_NO_CFF`, which is enabled by `HB_LEAN` and\n`HB_TINY` does *not* mean that the resulting library won't work with CFF fonts.\nThe library can shape valid CFF fonts just fine, with or without this option.\nThis option disables (among other things) the code to calculate glyph extents\nfor CFF fonts or draw them, which many clients might not need.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.9248046875,
          "content": "HarfBuzz is licensed under the so-called \"Old MIT\" license.  Details follow.\nFor parts of HarfBuzz that are licensed under different licenses see individual\nfiles names COPYING in subdirectories where applicable.\n\nCopyright © 2010-2022  Google, Inc.\nCopyright © 2015-2020  Ebrahim Byagowi\nCopyright © 2019,2020  Facebook, Inc.\nCopyright © 2012,2015  Mozilla Foundation\nCopyright © 2011  Codethink Limited\nCopyright © 2008,2010  Nokia Corporation and/or its subsidiary(-ies)\nCopyright © 2009  Keith Stribley\nCopyright © 2011  Martin Hosken and SIL International\nCopyright © 2007  Chris Wilson\nCopyright © 2005,2006,2020,2021,2022,2023  Behdad Esfahbod\nCopyright © 2004,2007,2008,2009,2010,2013,2021,2022,2023  Red Hat, Inc.\nCopyright © 1998-2005  David Turner and Werner Lemberg\nCopyright © 2016  Igalia S.L.\nCopyright © 2022  Matthias Clasen\nCopyright © 2018,2021  Khaled Hosny\nCopyright © 2018,2019,2020  Adobe, Inc\nCopyright © 2013-2015  Alexei Podtelezhnikov\n\nFor full copyright notices consult the individual files in the package.\n\n\nPermission is hereby granted, without written agreement and without\nlicense or royalty fees, to use, copy, modify, and distribute this\nsoftware and its documentation for any purpose, provided that the\nabove copyright notice and the following two paragraphs appear in\nall copies of this software.\n\nIN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\nDIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\nARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\nIF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGE.\n\nTHE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\nBUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\nON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\nPROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 114.919921875,
          "content": "Overview of changes leading to 10.1.0\nTuesday, November 5, 2024\n====================================\n- Fix the sign of fallback vertical glyph advance (used when font has no\n  vertical advance data).\n- Increase maximum “CFF” operands limit 20 times to support more complex fonts.\n- Add “--face-loader” option to command line utilities.\n- Support “COLR” v0 table in hb_font_get_glyph_extents().\n- Add support for font functions that use Core Text APIs, similar to FreeType\n  font functions. This allows, for example, using drawing fonts that use the new\n  (and undocumented) “hvgl” table.\n- Update IANA and OT language registries, as well ase USE data files.\n- Fix build with ICU 76.\n- Various compiler warnings and build fixes.\n- Various subsetter fixes.\n\n- New API:\n+hb_face_create_or_fail()\n+hb_face_create_from_file_or_fail()\n+hb_coretext_face_create_from_file_or_fail()\n+hb_coretext_font_set_funcs()\n+hb_ft_face_create_from_file_or_fail()\n\nOverview of changes leading to 10.0.1\nTuesday, September 24, 2024\n====================================\n- Relax sanitization checks for “morx” subtables to fix broken AAT shaping of\n  macOS 15.0 version of GeezaPro.\n\n\nOverview of changes leading to 10.0.0\nMonday, September 23, 2024\n====================================\n- Unicode 16.0.0 support.\n- Various documentation fixes.\n- Various build fixes.\n- Add API to allow HarfBuzz client to set what glyph to use when a Unicode\n  Variation Selector is not supported by the font, which would allow the client\n  to customize what happens in this case, by using a different font for example.\n- Add a callback to for “hb_face_t” for getting the list of table tags. This is\n  now used to make calling “hb_face_get_table_tags()” work on a faces created by\n  “hb_face_create_for_tables()” (e.g. faces returned by “hb_subset_or_fail()”).\n- CGJ and Mongolian Variation Selectors are now ignored during glyph\n  positioning, previously they would block both glyph substitution and\n  positioning across them.\n- Support cairo script as an output format for “hb-view” command line tool.\n- Drop an optimization that would cause HarfBuzz not apply pair positioning\n  lookup subtables under certain circumstances, for compatibility with other\n  implementations that do apply these subtables.\n- Subsetting will now fail if source font has no glyphs, so feeding the subsetter\n  invalid data will not silently return an empty face.\n- If after partially instancing a font no variation data is left (the instance\n  is fully static), don’t consider this a failure.\n- Workaround a Firefox bug in displaying SVGs generated be “hb-view” command\n  line tool under certain circumstances.\n- Fix bug in macroman mapping for “cmap” table.\n- Fix difference shaping output when HarfBuzz is built with with\n  “HB_NO_OT_RULESETS_FAST_PATH” enabled.\n- Various subsetting and instancing fixes.\n- Various fuzzing fixes.\n- Add “with_libstdcxx” meson build option.\n\n\n- New API:\n+HB_SCRIPT_GARAY\n+HB_SCRIPT_GURUNG_KHEMA\n+HB_SCRIPT_KIRAT_RAI\n+HB_SCRIPT_OL_ONAL\n+HB_SCRIPT_SUNUWAR\n+HB_SCRIPT_TODHRI\n+HB_SCRIPT_TULU_TIGALARI\n+hb_buffer_set_not_found_variation_selector_glyph()\n+hb_buffer_get_not_found_variation_selector_glyph()\n+hb_get_table_tags_func_t\n+hb_face_set_get_table_tags_func()\n\n\nOverview of changes leading to 9.0.0\nThursday, Jun 27, 2024\n====================================\n- HarfBuzz now the supports the proposed new OpenType “VARC” table. This\n  replaces the previously supported “Variable Composites” experimental feature.\n  “VARC” support is still experimental and it is not enabled unless HarfBuzz is\n  built with experimental APIs enabled:\n  https://github.com/harfbuzz/boring-expansion-spec/blob/main/VARC.md\n- Autotools build system have been dropped. Meson is the only supported build\n  system in HarfBuzz going forward.\n- Speed up “AAT” shaping for short words by up to 4%.\n- Ignore unknown “CFF” operators.\n- “hb_subset_input_keep_everything()” now keeps also non-unicode “name” table\n  records.\n- Update the IANA and OpenType language tag registries.\n- Support composite glyphs with very large number of points in hb-draw API.\n- Various build fixes.\n\n\nOverview of changes leading to 8.5.0\nMonday, May 13, 2024\n====================================\n- API for partial instancing is now stable and have been promoted out of\n  experimental APIs.\n- Support instancing “BASE” table.\n- Speedup AAT shaping by 13–30%.\n- Various build fixes.\n- Various subsetter and instancer fixes.\n\n- New API:\n+HB_SUBSET_FLAGS_OPTIMIZE_IUP_DELTAS\n+hb_subset_input_get_axis_range()\n+hb_subset_input_pin_axis_location()\n\nOverview of changes leading to 8.4.0\nSaturday, March 29, 2024\n====================================\n- Add /bigobj to MSVC compiler flags in meson build, to fix building hb-subset.cc\n- Specify minimum versions of various dependencies in meson and autotools build.\n- When subsetting, place variation store at the end of “GDEF” table  to fix\n  shaping issues with some versions of Adobe InDesign.\n- Various build fixes.\n\n- New API:\n+hb_buffer_set_random_state()\n+hb_buffer_get_random_state()\n\nOverview of changes leading to 8.3.1\nSaturday, March 16, 2024\n====================================\n- hb_blob_create_from_file_or_fail() on Windows will now try to interpret the\n  file name as UTF-8 first, and as system code page if it is not valid UTF-8.\n- Fix hb_style_get_value() in fonts with “STAT” table.\n- Properly handle negative offsets in CFF table.\n- Update IANA Language Subtag Registry to 2024-03-07.\n- Subsetter now supports subsetting “BASE” table.\n- Subsetter will update “hhea” font metrics in sync with “OS/2” ones.\n- “--variations” option of “hb-subset” now supports leaving out values that\n  should be unchanged, e.g. “wght=:500:” will change the default and keep max\n  and min unchanged. It also supports “*=drop” to to pin all axes to default\n  location.\n- Fix hb_ot_math_get_glyph_kerning() to match updated “MATH” table spec.\n- Support legacy MacRoman encoding in “cmap” table.\n- Various build fixes.\n- Various subsetting and instancing fixes.\n\n- New API:\nhb_subset_input_pin_all_axes_to_default()\n\nOverview of changes leading to 8.3.0\nSaturday, November 11, 2023\n====================================\n- Improve memory barrier to fix potential segfaults.\n- Various build fixes.\n- Various subsetting and instancing fixes.\n- Rename “hb-subset” option “--instance” to “--variations” to match the other\n  tools. Old option is kept as an alias.\n\n- New API:\nHB_AAT_LAYOUT_FEATURE_TYPE_CURSIVE_CONNECTION\n\n- Deprecated API:\nHB_AAT_LAYOUT_FEATURE_TYPE_CURISVE_CONNECTION\n\nOverview of changes leading to 8.2.2\nWednesday, October 18, 2023\n“From the river to the sea, Palestine will be free”\n====================================\n- Fix regression from 8.1.0 in shaping fonts with duplicate feature tags.\n- Fix regression from 8.2.0 in parsing CSS-style feature strings.\n- Variable fonts instanciation now handles more tables.\n- Various CMake build improvements.\n- various fixes to build without errors with gcc 4.9.2.\n\n\nOverview of changes leading to 8.2.1\nMonday, September 18, 2023\n====================================\n- Unicode 15.1 support.\n\n\nOverview of changes leading to 8.2.0\nFriday, September 8, 2023\n====================================\n- Various build and fuzzing fixes\n- Improvements to COLRv1 painting.\n\n- New API:\n+hb_paint_color_glyph_func_t\n+hb_paint_funcs_set_color_glyph_func\n+hb_paint_color_glyph\n\n\nOverview of changes leading to 8.1.1\nWednesday, August 2, 2023\n====================================\n- Fix shaping of contextual rules at the end of string, introduced in 8.1.0\n- Fix stack-overflow in repacker with malicious fonts.\n- 30% speed up loading Noto Duployan font.\n\n\nOverview of changes leading to 8.1.0\nTuesday, August 1, 2023\n====================================\n- Fix long-standing build issue with the AIX compiler and older Apple clang.\n\n- Revert optimization that could cause timeout during subsetting with malicious fonts.\n\n- More optimization work:\n  - 45% speed up in shaping Noto Duployan font.\n  - 10% speed up in subsetting Noto Duployan font.\n  - Another 8% speed up in shaping Gulzar.\n  - 5% speed up in loading Roboto.\n\n- New API:\n+hb_ot_layout_collect_features_map()\n\n\nOverview of changes leading to 8.0.1\nWednesday, July 12, 2023\n====================================\n- Build fix on 32-bit ARM.\n\n- More speed optimizations:\n  - 60% speed up in retain-gid (used for IFT) subsetting of SourceHanSans-VF.\n  - 16% speed up in retain-gid (used for IFT) subsetting of NotoSansCJKkr.\n  - 38% speed up in subsetting (beyond-64k) mega-merged Noto.\n\n\nOverview of changes leading to 8.0.0\nSunday, July 9, 2023\n====================================\n- New, experimental, WebAssembly (WASM) shaper, that provides greater\n  flexibility over OpenType/AAT/Graphite shaping, using WebAssembly embedded\n  inside the font file. Currently WASM shaper is disabled by default and needs\n  to be enabled at build time. For details, see:\n\n    https://github.com/harfbuzz/harfbuzz/blob/main/docs/wasm-shaper.md\n\n  For example fonts making use of the WASM shaper, see:\n\n    https://github.com/harfbuzz/harfbuzz-wasm-examples\n\n- Improvements to Experimental features introduced in earlier releases:\n  - Support for subsetting beyond-64k and VarComposites fonts.\n  - Support for instancing variable fonts with cubic “glyf” table.\n\n- Many big speed optimizations:\n  - Up to 89% speedup loading variable fonts for shaping.\n  - Up to 88% speedup in small subsets of large (eg. CJK) fonts (both TTF and\n    OTF), essential for Incremental Font Transfer (IFT).\n  - Over 50% speedup in loading Roboto font for shaping.\n  - Up to 40% speed up in loading (sanitizing) complex fonts.\n  - 30% speed up in shaping Gulzar font.\n  - Over 25% speedup in glyph loading Roboto font.\n  - 10% speed up loading glyph shapes in VarComposite Hangul font.\n  - hb-hashmap optimizations & hashing improvements.\n\n- New macro HB_ALWAYS_INLINE. HarfBuzz now inlines functions more aggressively,\n  which results in some speedup at the expense of bigger code size. To disable\n  this feature define the macro to just inline.\n\n- New API:\n+HB_CODEPOINT_INVALID\n+hb_ot_layout_get_baseline2()\n+hb_ot_layout_get_baseline_with_fallback2()\n+hb_ot_layout_get_font_extents()\n+hb_ot_layout_get_font_extents2()\n+hb_subset_input_set_axis_range()\n\n\nOverview of changes leading to 7.3.0\nTuesday, May 9, 2023\n====================================\n- Speedup applying glyph variation in VarComposites fonts (over 40% speedup).\n  (Behdad Esfahbod)\n- Speedup instancing some fonts (over 20% speedup in instancing RobotoFlex).\n  (Behdad Esfahbod)\n- Speedup shaping some fonts (over 30% speedup in shaping Roboto).\n  (Behdad Esfahbod)\n- Support subsetting VarComposites and beyond-64k fonts. (Behdad Esfahbod)\n- New configuration macro HB_MINIMIZE_MEMORY_USAGE to favor optimizing memory\n  usage over speed. (Behdad Esfahbod)\n- Supporting setting the mapping between old and new glyph indices during\n  subsetting. (Garret Rieger)\n- Various fixes and improvements.\n  (Behdad Esfahbod, Denis Rochette, Garret Rieger, Han Seung Min, Qunxin Liu)\n\n- New API:\n+hb_subset_input_old_to_new_glyph_mapping()\n\n\nOverview of changes leading to 7.2.0\nThursday, April 27, 2023\n====================================\n- Add Tifinagh to the list of scripts that can natively be either right-to-left\n  or left-to-right, to improve handling of its glyph positioning.\n  (Simon Cozens)\n- Return also single substitution from hb_ot_layout_lookup_get_glyph_alternates()\n  (Behdad Esfahbod)\n- Fix 4.2.0 regression in applying across syllables in syllabic scripts.\n  (Behdad Esfahbod)\n- Add flag to avoid glyph substitution closure during subsetting, and the\n  corresponding “--no-layout-closure” option to “hb-subset” command line tool.\n  (Garret Rieger)\n- Support instancing COLRv1 table. (Qunxin Liu)\n- Don’t drop used user-defined name table entries during subsetting.\n  (Qunxin Liu)\n- Optimize handling of “gvar” table. (Behdad Esfahbod)\n- Various subsetter bug fixes and improvements. (Garret Rieger, Qunxin Liu)\n- Various documentation improvements. (Behdad Esfahbod, Josef Friedrich)\n\n- New API:\n+HB_SUBSET_FLAGS_NO_LAYOUT_CLOSURE\n+HB_UNICODE_COMBINING_CLASS_CCC132\n\n- Deprecated API:\n+HB_UNICODE_COMBINING_CLASS_CCC133\n\n\nOverview of changes leading to 7.1.0\nFriday, March 3, 2023\n====================================\n- New experimental hb_shape_justify() API that uses font variations to expand\n  or shrink the text to a given advance. (Behdad Esfahbod)\n- Various build and bug fixes. (Behdad Esfahbod, Garret Rieger, Qunxin Liu)\n\n- New API:\n+hb_font_set_variation()\n\n\nOverview of changes leading to 7.0.1\nMonday, February 20, 2023\n====================================\n- Various build and bug fixes.\n\n\nOverview of changes leading to 7.0.0\nSaturday, February 11, 2023\n====================================\n- New hb-paint API that is designed mainly to paint “COLRv1” glyphs, but can be\n  also used as a unified API to paint any of the glyph representations\n  supported by HarfBuzz (B/W outlines, color layers, or color bitmaps).\n  (Behdad Esfahbod, Matthias Clasen)\n- New hb-cairo API for integrating with cairo graphics library. This is provided\n  as a separate harfbuzz-cairo library. (Behdad Esfahbod, Matthias Clasen)\n- Support for instancing “CFF2” table. (Behdad Esfahbod)\n- Support font emboldening. (Behdad Esfahbod)\n- Support feature ranges with AAT shaping. (Behdad Esfahbod)\n- Experimental support to cubic curves in “glyf” table, see\n  https://github.com/harfbuzz/boring-expansion-spec/blob/main/glyf1-cubicOutlines.md\n  for spec. (Behdad Esfahbod)\n- Various subsetter improvements. (Garret Rieger, Qunxin Liu, Behdad Esfahbod)\n- Various documentation improvements.\n  (Behdad Esfahbod, Matthias Clasen, Khaled Hosny)\n- Significantly reduced memory use during shaping. (Behdad Esfahbod)\n- Greatly reduced memory use during subsetting “CFF” table. (Behdad Esfahbod)\n- New command line utility, hb-info, for querying various font information.\n  (Behdad Esfahbod, Matthias Clasen)\n- New hb-shape/hb-view options: --glyphs, --color-palette, --font-bold,\n  --font-grade, and --named-instance. (Behdad Esfahbod)\n- Miscellaneous fixes and improvements.\n  (Amir Masoud Abdol, Andres Salomon, Behdad Esfahbod, Chun-wei Fan,\n  Garret Rieger, Jens Kutilek, Khaled Hosny, Konstantin Käfer, Matthias Clasen,\n  Nirbheek Chauhan, Pedro J. Estébanez, Qunxin Liu, Sergei Trofimovich)\n\n- New API:\n+HB_FONT_NO_VAR_NAMED_INSTANCE\n+HB_PAINT_IMAGE_FORMAT_BGRA\n+HB_PAINT_IMAGE_FORMAT_PNG\n+HB_PAINT_IMAGE_FORMAT_SVG\n+hb_cairo_font_face_create_for_face\n+hb_cairo_font_face_create_for_font\n+hb_cairo_font_face_get_face\n+hb_cairo_font_face_get_font\n+hb_cairo_font_face_get_scale_factor\n+hb_cairo_font_face_set_font_init_func\n+hb_cairo_font_face_set_scale_factor\n+hb_cairo_font_init_func_t\n+hb_cairo_glyphs_from_buffer\n+hb_cairo_scaled_font_get_font\n+hb_color_line_get_color_stops\n+hb_color_line_get_color_stops_func_t\n+hb_color_line_get_extend\n+hb_color_line_get_extend_func_t\n+hb_color_line_t\n+hb_color_stop_t\n+hb_draw_funcs_get_empty\n+hb_draw_funcs_get_user_data\n+hb_draw_funcs_set_user_data\n+hb_face_collect_nominal_glyph_mapping\n+hb_font_draw_glyph\n+hb_font_draw_glyph_func_t\n+hb_font_funcs_set_draw_glyph_func\n+hb_font_funcs_set_paint_glyph_func\n+hb_font_get_synthetic_bold\n+hb_font_get_var_named_instance\n+hb_font_paint_glyph\n+hb_font_paint_glyph_func_t\n+hb_font_set_synthetic_bold\n+hb_map_keys\n+hb_map_next\n+hb_map_update\n+hb_map_values\n+hb_ot_color_glyph_has_paint\n+hb_ot_color_has_paint\n+hb_ot_layout_script_select_language2\n+hb_ot_name_id_predefined_t\n+hb_paint_color\n+hb_paint_color_func_t\n+hb_paint_composite_mode_t\n+hb_paint_custom_palette_color\n+hb_paint_custom_palette_color_func_t\n+hb_paint_extend_t\n+hb_paint_funcs_create\n+hb_paint_funcs_destroy\n+hb_paint_funcs_get_empty\n+hb_paint_funcs_get_user_data\n+hb_paint_funcs_is_immutable\n+hb_paint_funcs_make_immutable\n+hb_paint_funcs_reference\n+hb_paint_funcs_set_color_func\n+hb_paint_funcs_set_custom_palette_color_func\n+hb_paint_funcs_set_image_func\n+hb_paint_funcs_set_linear_gradient_func\n+hb_paint_funcs_set_pop_clip_func\n+hb_paint_funcs_set_pop_group_func\n+hb_paint_funcs_set_pop_transform_func\n+hb_paint_funcs_set_push_clip_glyph_func\n+hb_paint_funcs_set_push_clip_rectangle_func\n+hb_paint_funcs_set_push_group_func\n+hb_paint_funcs_set_push_transform_func\n+hb_paint_funcs_set_radial_gradient_func\n+hb_paint_funcs_set_sweep_gradient_func\n+hb_paint_funcs_set_user_data\n+hb_paint_funcs_t\n+hb_paint_image\n+hb_paint_image_func_t\n+hb_paint_linear_gradient\n+hb_paint_linear_gradient_func_t\n+hb_paint_pop_clip\n+hb_paint_pop_clip_func_t\n+hb_paint_pop_group\n+hb_paint_pop_group_func_t\n+hb_paint_pop_transform\n+hb_paint_pop_transform_func_t\n+hb_paint_push_clip_glyph\n+hb_paint_push_clip_glyph_func_t\n+hb_paint_push_clip_rectangle\n+hb_paint_push_clip_rectangle_func_t\n+hb_paint_push_group\n+hb_paint_push_group_func_t\n+hb_paint_push_transform\n+hb_paint_push_transform_func_t\n+hb_paint_radial_gradient\n+hb_paint_radial_gradient_func_t\n+hb_paint_sweep_gradient\n+hb_paint_sweep_gradient_func_t\n+hb_set_is_inverted\n+hb_subset_input_keep_everything\n\n- Deprecated API:\n+hb_font_funcs_set_glyph_shape_func\n+hb_font_get_glyph_shape_func_t\n+hb_font_get_glyph_shape\n\n\nOverview of changes leading to 6.0.0\nFriday, December 16, 2022\n====================================\n- A new API have been added to pre-process the face and speed up future\n  subsetting operations on that face. Provides up to a 95% reduction in\n  subsetting times when the same face is subset more than once.\n\n  For more details and benchmarks, see:\n  https://github.com/harfbuzz/harfbuzz/blob/main/docs/subset-preprocessing.md\n\n  (Garret Rieger, Behdad Esfahbod)\n\n- Shaping have been speedup by skipping entire lookups when the buffer contents\n  don't intersect with the lookup. Shows up to a 10% speedup in shaping some\n  fonts. (Behdad Esfahbod)\n\n- A new experimental feature, “Variable Composites” (enabled by passing\n  -Dexperimental_api=true to meson), is also featured in this release.\n  This technology enables drastic compression of fonts in the Chinese,\n  Japanese, Korean, and other writing systems, by reusing the OpenType Font\n  Variations technology for encoding “smart components” into the font.\n\n  The specification for these  extensions to the font format can be found in:\n  https://github.com/harfbuzz/boring-expansion-spec/blob/glyf1/glyf1.md\n\n  A test variable-font with ~7160 Hangul syllables derived from the\n  NotoSerifKR-VF font has been built, with existing OpenType technology, as\n  well as with the new Variable Composites (VarComposites) technology. The\n  VarComposites font is over 90% smaller than the OpenType version of the font!\n  Both fonts can be obtained from the “smarties” repository:\n  https://github.com/behdad/smarties/tree/3.0/fonts/hangul/serif\n\n  When building HarfBuzz with experimental features enabled, you can test\n  the “smarties” font with a sample character like this:\n\n  $ hb-view butchered-hangul-serif-smarties-variable.ttf -u AE01 --variations=wght=700\n\n  (Behdad Esfahbod)\n\n- The HarfBuzz subsetter can now drop axes by pinning them to specific values\n  (also referred to as instancing). There are a couple of restrictions\n  currently:\n\n  - Only works with TrueType (“glyf”) based fonts. “CFF2” fonts are not yet\n    supported.\n  - Only supports the case where all axes in a font are pinned.\n\n  (Garret Rieger, Qunxin Liu)\n\n- Miscellaneous fixes and improvements.\n\n  (Behdad Esfahbod, Christoph Reiter, David Corbett, Eli Schwartz, Garret\n   Rieger, Joel Auterson, Jordan Petridis, Khaled Hosny, Lorenz Wildberg,\n   Marco Rebhan, Martin Storsjö, Matthias Clasen, Qunxin Liu, Satadru Pramanik)\n\n\n- New API\n+hb_subset_input_pin_axis_location()\n+hb_subset_input_pin_axis_to_default()\n+hb_subset_preprocess()\n\n\nOverview of changes leading to 5.3.1\nWednesday, October 19, 2022\n====================================\n- Subsetter repacker fixes. (Garret Rieger)\n- Adjust Grapheme clusters for Katakana voiced sound marks. (Behdad Esfahbod)\n- New “hb-subset” option “--preprocess-face”. (Garret Rieger)\n\n\nOverview of changes leading to 5.3.0\nSaturday, October 8, 2022\n\"Women, Life, Freedom\" #MahsaAmini\n====================================\n- Don’t add glyphs from dropped MATH or COLR tables to the subset glyphs.\n  (Khaled Hosny)\n- Map “rlig” to appropriate AAT feature selectors. (Jonathan Kew)\n- Update USE data files to latest version. (David Corbett)\n- Check “CBDT” extents first before outline tables, to help with fonts that\n  also include an empty “glyf” table. (Khaled Hosny)\n- More work towards variable font instancing in the subsetter. (Qunxin Liu)\n- Subsetter repacker improvements. (Garret Rieger)\n- New API:\n+hb_ot_layout_lookup_get_optical_bound()\n+hb_face_builder_sort_tables()\n\n\nOverview of changes leading to 5.2.0\nSaturday, September 17, 2022\n====================================\n- Fix regressions in hb-ft font functions for FT_Face’s with transformation\n  matrix. (Behdad Esfahbod)\n- The experimental hb-repacker API now supports splitting several GPOS subtable\n  types when needed. (Garret Rieger)\n- The HarfBuzz extensions to OpenType font format are now opt-in behind\n  build-time flags. (Behdad Esfahbod)\n- The experimental hb-subset variable fonts instantiation API can now\n  instantiate more font tables and arbitrary axis locations. (Qunxin Liu)\n- Unicode 15 support. (David Corbett)\n- Various documentation improvements. (Behdad Esfahbod, Matthias Clasen)\n- The hb-view command line tool now detects WezTerm inline images support.\n  (Wez Furlong)\n- Fix FreeType and ICU dependency lookup with meson. (Xavier Claessens)\n\n- New API:\n+HB_SCRIPT_KAWI\n+HB_SCRIPT_NAG_MUNDARI\n\n\nOverview of changes leading to 5.1.0\nSunday, July 31, 2022\n====================================\n- More extensive buffer tracing messages. (Behdad Esfahbod)\n- Fix hb-ft regression in bitmap fonts rendering. (Behdad Esfahbod)\n- Support extension promotion of lookups in hb-subset-repacker. (Garret Rieger)\n- A new HB_GLYPH_FLAG_SAFE_TO_INSERT_TATWEEL for scripts that use elongation\n  (e.g. Arabic) to signify where it is safe to insert tatweel glyph without\n  interrupting shaping. (Behdad Esfahbod)\n- Add “--safe-to-insert-tatweel” to “hb-shape” tool. (Behdad Esfahbod)\n\n- New API\n+HB_GLYPH_FLAG_SAFE_TO_INSERT_TATWEEL\n+HB_BUFFER_FLAG_PRODUCE_SAFE_TO_INSERT_TATWEEL\n\n\nOverview of changes leading to 5.0.1\nSaturday, July 23, 2022\n====================================\n- Fix version 2 “avar” table with hb-ft. (Behdad Esfahbod)\n\n\nOverview of changes leading to 5.0.0\nSaturday, July 23, 2022\n====================================\n- Support fonts with more than 65535 glyphs in “GDEF”, “GSUB”, and “GPOS”\n  tables. This is part of https://github.com/be-fonts/boring-expansion-spec to\n  extend OpenType in a backward-compatible way.\n  (Behdad Esfahbod, Garret Rieger)\n- Complete support for more than 65535 glyphs in “glyf” table that started in\n  4.0.0 release. Part of boring-expansion-spec. (Behdad Esfahbod)\n- Support version 2 of “avar” table. Part of boring-expansion-spec.\n  (Behdad Esfahbod)\n- Fix mark attachment on multiple substitutions in some cases.\n  (Behdad Esfahbod)\n- Fix application of “calt”, “rclt”, and “ccmp” features to better match\n  Uniscribe behaviour with some Arabic fonts. (Behdad Esfahbod)\n- Improvement to interaction between multiple cursive attachments.\n  (Behdad Esfahbod)\n- Improve multiple mark interactions in Hebrew. (Behdad Esfahbod)\n- Implement language-specific forms in AAT shaping. (Behdad Esfahbod)\n- Fix variation of “VORG” table. (Behdad Esfahbod)\n- Support for specific script tags to be retained in the subsetter, and add\n  “--layout-scripts” option to “hb-subset” tool. (Garret Rieger)\n- Accept space as delimiter for --features/--variations in command line tools.\n- Improve subsetting of “COLR” table. (Qunxin Liu)\n- Improved fuzzing coverage for ot-math API. (Frédéric Wang)\n- Fix “kern” table version 2 (AAT) sanitization on 32-bit systems.\n  (Behdad Esfahbod)\n- Allow negative glyph advances from “graphite2” shaper. (Stephan Bergmann)\n- Implement loading (color) bitmap fonts with hb-ft. (Behdad Esfahbod)\n- Fix regression in hb-ft when changing font size. (Behdad Esfahbod)\n- Fix build on GCC < 7. (Kleis Auke Wolthuizen)\n- Dynamically load dwrite.dll on windows if “directwrite” shaper is enabled.\n  (Luca Bacci)\n- Provide a single-file harfbuzz-subset.cc file for easier alternate building\n  of hb-subset library, similar to harfbuzz.cc. (Khaled Hosny)\n\n- New API\n+HB_SUBSET_SETS_LAYOUT_SCRIPT_TAG\n+hb_language_matches()\n\n\nOverview of changes leading to 4.4.1\nWednesday, June 29, 2022\n====================================\n- Fix test failure with some compilers.\n- Fix Telugu and Kannada kerning regression.\n\n\nOverview of changes leading to 4.4.0\nMonday, June 27, 2022\n====================================\n- Caching of variable fonts shaping, in particular when using HarfBuzz’s own\n  font loading functions (ot). Bringing performance of variable shaping in par\n  with non-variable fonts shaping. (Behdad Esfahbod)\n- Caching of format 2 “Contextual Substitution” and “Chained Contexts\n  Substitution” lookups. Resulting in up to 20% speedup of lookup-heavy fonts\n  like Gulzar or Noto Nastaliq Urdu. (Behdad Esfahbod)\n- Improved ANSI output from hb-view. (Behdad Esfahbod)\n- Support for shaping legacy, pre-OpenType Windows 3.1-era, Arabic fonts that\n  relied on a fixed PUA encoding. (Khaled Hosny, Behdad Esfahbod)\n- Sinhala script is now shaped by the USE shaper instead of “indic” one.\n  (Behdad Esfahbod, David Corbett)\n- Thai shaper improvements. (David Corbett)\n- hb-ot-name API supports approximate BCP-47 language matching, for example\n  asking for “en_US” in a font that has only “en” names will return them.\n  (Behdad Esfahbod)\n- Optimized TrueType glyph shape loading. (Behdad Esfahbod)\n- Fix subsetting of HarfBuzz faces created via hb_face_create_for_tables().\n  (Garret Rieger)\n- Add 32 bit var store support to the subsetter. (Garret Rieger)\n\n- New API\n+HB_BUFFER_FLAG_DEFINED\n+HB_BUFFER_SERIALIZE_FLAG_DEFINED\n+hb_font_changed()\n+hb_font_get_serial()\n+hb_ft_hb_font_changed()\n+hb_set_hash()\n+hb_map_copy()\n+hb_map_hash()\n\n\nOverview of changes leading to 4.3.0\nFriday, May 20, 2022\n====================================\n- Major speed up in loading and subsetting fonts, especially in\n  handling CFF table. Subsetting some fonts is now 3 times faster.\n  (Behdad Esfahbod, Garret Rieger)\n- Speed up blending CFF2 table. (Behdad Esfahbod)\n- Speed up hb_ot_tags_from_language(). (Behdad Esfahbod, David Corbett)\n- Fix USE classification of U+10A38 to fix multiple marks on single Kharoshthi\n  base. (David Corbett)\n- Fix parsing of empty CFF Index. (Behdad Esfahbod)\n- Fix subsetting CPAL table with partial palette overlaps. (Garret Rieger)\n\n- New API\n+hb_map_is_equal() (Behdad Esfahbod)\n\n\nOverview of changes leading to 4.2.1\nSunday, April 24, 2022\n====================================\n- Make sure hb_blob_create_from_file_or_fail() always returns nullptr in case\n  of failure and not empty blob sometimes. (Khaled Hosny)\n- Add --passthrough-tables option to hb-subset. (Cosimo Lupo)\n- Reinstate a pause after basic features in Khmer shaper, fixing a regression\n  introduced in previous release. (Behdad Esfahbod)\n- Better handling of Regional_Indicator when shaped with RTL-native scripts,\n  reverting earlier fix that caused regressions in AAT shaping. (Behdad Esfahbod)\n\n\nOverview of changes leading to 4.2.0\nWednesday, March 30, 2022\n====================================\n- Source code reorganization, splitting large hb-ot-layout files into smaller,\n  per-subtable ones under OT/Layout/*. Code for more tables will follow suit in\n  later releases. (Garret Rieger, Behdad Esfahbod)\n- Revert Indic shaper change in previous release that broke some fonts and\n  instead make per-syllable restriction of “GSUB” application limited to\n  script-specific Indic features, while applying them and discretionary\n  features in one go. (Behdad Esfahbod)\n- Fix decoding of private in gvar table. (Behdad Esfahbod)\n- Fix handling of contextual lookups that delete too many glyphs. (Behdad Esfahbod)\n- Make “morx” deleted glyphs don’t block “GPOS” application. (Behdad Esfahbod)\n- Various build fixes. (Chun-wei Fan, Khaled Hosny)\n\n- New API\n+hb_set_next_many() (Andrew John)\n\n\nOverview of changes leading to 4.1.0\nWednesday, March 23, 2022\n====================================\n- Various OSS-Fuzz fixes. (Behdad Esfahbod)\n- Make fallback vertical-origin match FreeType’s. (Behdad Esfahbod)\n- Treat visible viramas like dependent vowels in USE shaper. (David Corbett)\n- Apply presentation forms features and discretionary features in one go in\n  Indic shaper, which seems to match Uniscribe and CoreText behaviour.\n  (Behdad Esfahbod, David Corbett)\n- Various bug fixes.\n\n- New API\n+hb_set_add_sorted_array() (Andrew John)\n\n\nOverview of changes leading to 4.0.1\nFriday, March 11, 2022\n====================================\n- Update OpenType to AAT mappings for “hist” and “vrtr” features.\n  (Florian Pircher)\n- Update IANA Language Subtag Registry to 2022-03-02. (David Corbett)\n- Update USE shaper to allow any non-numeric tail in a symbol cluster, and\n  remove obsolete data overrides. (David Corbett)\n- Fix handling of baseline variations to return correctly scaled values.\n  (Matthias Clasen)\n- A new experimental hb_subset_repack_or_fail() to repack an array of objects,\n  eliminating offset overflows. The API is not available unless HarfBuzz is\n  built with experimental APIs enabled. (Qunxin Liu)\n\n- New experimental API\n+hb_link_t\n+hb_object_t\n+hb_subset_repack_or_fail()\n\n\nOverview of changes leading to 4.0.0\nTuesday, March 1, 2022\n====================================\n- New public API to create subset plan and gather information on things like\n  glyph mappings in the final subset. The plan can then be passed on to perform\n  the subsetting operation. (Garret Rieger)\n- Draw API for extracting glyph shapes have been extended and finalized and is\n  no longer an experimental API. The draw API supports glyf, CFF and CFF2\n  glyph outlines tables, and applies variation settings set on the font as well\n  as synthetic slant. The new public API is not backward compatible with the\n  previous, non-public, experimental API. (Behdad Esfahbod)\n- The hb-view tool will use HarfBuzz draw API to render the glyphs instead of\n  cairo-ft when compiled with Cairo 1.17.5 or newer, setting HB_DRAW\n  environment variable to 1 or 0 will force using or not use the draw API,\n  respectively. (Behdad Esfahbod)\n- The hb-shape and hb-view tools now default to using HarfBuzz’s own font\n  loading functions (ot) instead of FreeType ones (ft). They also have a new\n  option, --font-slant, to apply synthetic slant to the font. (Behdad Esfahbod)\n- HarfBuzz now supports more than 65535 (the OpenType limit) glyph shapes and\n  metrics. See https://github.com/be-fonts/boring-expansion-spec/issues/6 and\n  https://github.com/be-fonts/boring-expansion-spec/issues/7 for details.\n  (Behdad Esfahbod)\n- New API to get the dominant horizontal baseline tag for a given script.\n  (Behdad Esfahbod)\n- New API to get the baseline positions from the font, and synthesize missing\n  ones. As well as new API to get font metrics and synthesize missing ones.\n  (Matthias Clasen)\n- Improvements to finding dependencies on Windows when building with Visual\n  Studio. (Chun-wei Fan)\n- New buffer flag, HB_BUFFER_FLAG_PRODUCE_UNSAFE_TO_CONCAT, that must be set\n  during shaping for HB_GLYPH_FLAG_UNSAFE_TO_CONCAT flag to be reliably\n  produced. This is to limit the performance hit of producing this flag to when\n  it is actually needed. (Behdad Esfahbod)\n- Documentation improvements. (Matthias Clasen)\n\n- New API\n - General:\n   +HB_BUFFER_FLAG_PRODUCE_UNSAFE_TO_CONCAT\n   +hb_var_num_t\n\n - Draw:\n   +hb_draw_funcs_t\n   +hb_draw_funcs_create()\n   +hb_draw_funcs_reference()\n   +hb_draw_funcs_destroy()\n   +hb_draw_funcs_is_immutable()\n   +hb_draw_funcs_make_immutable()\n   +hb_draw_move_to_func_t\n   +hb_draw_funcs_set_move_to_func()\n   +hb_draw_line_to_func_t\n   +hb_draw_funcs_set_line_to_func()\n   +hb_draw_quadratic_to_func_t\n   +hb_draw_funcs_set_quadratic_to_func()\n   +hb_draw_cubic_to_func_t\n   +hb_draw_funcs_set_cubic_to_func()\n   +hb_draw_close_path_func_t\n   +hb_draw_funcs_set_close_path_func()\n   +hb_draw_state_t\n   +HB_DRAW_STATE_DEFAULT\n   +hb_draw_move_to()\n   +hb_draw_line_to()\n   +hb_draw_quadratic_to()\n   +hb_draw_cubic_to()\n   +hb_draw_close_path()\n   +hb_font_get_glyph_shape_func_t\n   +hb_font_funcs_set_glyph_shape_func()\n   +hb_font_get_glyph_shape()\n\n - OpenType layout\n   +HB_OT_LAYOUT_BASELINE_TAG_IDEO_FACE_CENTRAL\n   +HB_OT_LAYOUT_BASELINE_TAG_IDEO_EMBOX_CENTRAL\n   +hb_ot_layout_get_horizontal_baseline_tag_for_script()\n   +hb_ot_layout_get_baseline_with_fallback()\n\n - Metrics:\n   +hb_ot_metrics_get_position_with_fallback()\n\n - Subset:\n   +hb_subset_plan_t\n   +hb_subset_plan_create_or_fail()\n   +hb_subset_plan_reference()\n   +hb_subset_plan_destroy()\n   +hb_subset_plan_set_user_data()\n   +hb_subset_plan_get_user_data()\n   +hb_subset_plan_execute_or_fail()\n   +hb_subset_plan_unicode_to_old_glyph_mapping()\n   +hb_subset_plan_new_to_old_glyph_mapping()\n   +hb_subset_plan_old_to_new_glyph_mapping()\n\n\nOverview of changes leading to 3.4.0\nSunday, February 13, 2022\n====================================\n- Perform sanity checks on shaping results is now part of “harfbuzz” library\n  and can be enabled by setting the buffer flag HB_BUFFER_FLAG_VERIFY.\n  (Behdad Esfahbod)\n- Arabic Mark Transient Reordering Algorithm have been updated to revision 6.\n  (Khaled Hosny)\n- ISO 15924 code for mathematical notation, ‘Zmth’, now maps to the OpenType\n  ‘math’ tag. (Alexis King)\n- It is now possible to get at once all math kerning values for a given glyph\n  at a given corner. (Alexis King)\n- Fix locale_t portability issues on systems the typedef’s it to a void\n  pointer. (Behdad Esfahbod)\n\n- New API:\n+HB_BUFFER_FLAG_VERIFY\n+HB_OT_TAG_MATH_SCRIPT\n+HB_SCRIPT_MATH\n+hb_ot_math_kern_entry_t\n+hb_ot_math_get_glyph_kernings()\n\n- Deprecated API\n+HB_OT_MATH_SCRIPT\n\n\nOverview of changes leading to 3.3.2\nSunday, February 6, 2022\n====================================\n- Revert splitting of pair positioning values introduced in 3.3.0 as it proved\n  problematic. (Behdad Esfahbod)\n\n\nOverview of changes leading to 3.3.1\nMonday, January 31, 2022\n====================================\n- Fix heap-use-after-free in harfbuzz-subset introduced in previous release.\n  (Garret Rieger)\n\n\nOverview of changes leading to 3.3.0\nMonday, January 31, 2022\n====================================\n- Improved documentation. (Matthias Clasen)\n- Internal code cleanup, using C++ standard library more. (Behdad Esfahbod)\n- The low 16-bits of face index will be used by hb_face_create() to select a\n  face inside a font collection file format, while the high 16-bits will be\n  used by hb_font_create() to load the named instance. (Behdad Esfahbod)\n- Glyph positions and other font metrics now apply synthetic slant set by\n  hb_font_set_synthetic_slant(), for improved positioning for synthetically\n  slanted fonts. (Behdad Esfahbod)\n- Fixed unintentional locale dependency in hb_variation_to_string() for decimal\n  point representation. (Matthias Clasen)\n- When applying pair positioning (kerning) the positioning value is split\n  between the two sides of the pair for improved cursor positioning between\n  such pairs. (Behdad Esfahbod)\n- Introduced new HB_GLYPH_FLAG_UNSAFE_TO_CONCAT, to be used in conjunction\n  with HB_GLYPH_FLAG_UNSAFE_TO_BREAK for optimizing re-shaping during line\n  breaking. Check the documentation for further details. (Behdad Esfahbod)\n- Improved handling of macrolanguages when mapping BCP 47 codes to OpenType\n  tags. (David Corbett)\n\n- New API:\n+HB_GLYPH_FLAG_UNSAFE_TO_CONCAT\n+hb_segment_properties_overlay()\n+hb_buffer_create_similar()\n+hb_font_set_synthetic_slant()\n+hb_font_get_synthetic_slant()\n+hb_font_get_var_coords_design()\n\n\nOverview of changes leading to 3.2.0\nFriday, November 26, 2021\n====================================\n“harfbuzz” library improvements:\n- Fixed shaping of Apple Color Emoji flags in right-to-left context. (Behdad Esfahbod)\n- Fixed positioning of CFF fonts in HB_TINY profile. (Behdad Esfahbod)\n- OpenType 1.9 language tags update. (David Corbett)\n- Add HB_NO_VERTICAL config option.\n- Add HB_CONFIG_OVERRIDE_H for easier configuration. (Behdad Esfahbod)\n\n“harfbuzz-subset” library improvements:\n- Improved packing of cmap, loca, and Ligature tables. (Garret Rieger)\n- Significantly improved overflow-resolution strategy in the repacker. (Garret Rieger)\n\n\nOverview of changes leading to 3.1.2\nFriday, November 26, 2021\n====================================\n- hb-shape / hb-view: revert treating text on the commandline as single\n  paragraph (was introduced in 3.0.0); add new --single-par to do that.\n  (Behdad Esfahbod)\n- Subsetter bug fixes. (Garret Rieger, Qunxin Liu, Behdad Esfahbod)\n\n\nOverview of changes leading to 3.1.1\nWednesday, November 8, 2021\n====================================\n- Work around GCC cast-align error/warning on some platforms. (Behdad Esfahbod)\n- Documentation improvements. (Matthias Clasen)\n\n\nOverview of changes leading to 3.1.0\nWednesday, November 3, 2021\n====================================\n- Better offset-overflow handling in the subsetter library. (Garret Rieger)\n- Improved Unicode 14 properties in the USE shaper, and various other USE\n  shaper fixes. (David Corbett)\n- MATH and COLR v1 tables subsetting support, and various other subsetter fixes.\n  (Qunxin Liu)\n- Support for Pwo Karen / Ason Chin medial la. (Simon Cozens)\n- Apply GPOS positioning when substituting with morx table, if kerx is missing.\n  (Behdad Esfahbod)\n- Apply calt and clig features across syllable boundaries in Indic shaper.\n  (Behdad Esfahbod)\n- meson option for enabling Graphite 2 has been renamed to graphite2.\n- Build and documentation fixes.\n\n- New API:\n+hb_buffer_set_not_found_glyph()\n+hb_buffer_get_not_found_glyph()\n\n\nOverview of changes leading to 3.0.0\nFriday, September 17, 2021\n====================================\n- Unicode 14.0 support (David Corbett).\n- The hb-subset API and the harfbuzz-subset library's ABI are now declared\n  stable. The harfbuzz-subset library would not have been possible without the\n  work of Garret Rieger and Qunxin Liu from Google Fonts, and the earlier work\n  of Michiharu Ariza from Adobe.\n- The hb-style API is now stable and no longer experimental.\n\n- New API:\n+hb_style_tag_t\n+hb_style_get_value()\n+hb_subset_input_t\n+hb_subset_flags_t\n+hb_subset_sets_t\n+hb_subset_input_create_or_fail()\n+hb_subset_input_reference()\n+hb_subset_input_destroy()\n+hb_subset_input_set_user_data()\n+hb_subset_input_get_user_data()\n+hb_subset_input_unicode_set()\n+hb_subset_input_glyph_set()\n+hb_subset_input_set()\n+hb_subset_input_get_flags()\n+hb_subset_input_set_flags()\n+hb_subset_or_fail()\n\n- Removed old unstable harfbuzz-subset API:\n-hb_subset_input_nameid_set()\n-hb_subset_input_namelangid_set()\n-hb_subset_input_layout_features_set()\n-hb_subset_input_no_subset_tables_set()\n-hb_subset_input_drop_tables_set()\n-hb_subset_input_set_drop_hints()\n-hb_subset_input_get_drop_hints()\n-hb_subset_input_set_desubroutinize()\n-hb_subset_input_get_desubroutinize()\n-hb_subset_input_set_retain_gids()\n-hb_subset_input_get_retain_gids()\n-hb_subset_input_set_name_legacy()\n-hb_subset_input_get_name_legacy()\n-hb_subset_input_set_overlaps_flag()\n-hb_subset_input_get_overlaps_flag()\n-hb_subset_input_set_notdef_outline()\n-hb_subset_input_get_notdef_outline()\n-hb_subset_input_set_no_prune_unicode_ranges()\n-hb_subset_input_get_no_prune_unicode_ranges()\n-hb_subset()\n\n\nOverview of changes leading to 2.9.1\nTuesday, September 7, 2021\n====================================\n- Final subset API is in place and if no issues are discovered, it will be the\n  stable subset API of HarfBuzz 3.0.0. Old API is kept to ease transition, but\n  will be removed in 3.0.0.\n- Various fuzzer-found bug fixes.\n- hb_buffer_append() now handles the pre- and post-context which previously\n  were left unchanged in the destination buffer.\n- hb-view / hb-shape now accept following new arguments:\n  o --unicodes-before/after: takes a list of hex numbers that represent Unicode\n    codepoints.\n- Undeprecated API:\n  hb_set_invert()\n\n\nOverview of changes leading to 2.9.0\nWednesday, August 18, 2021\nHistory Repeats Itself (Afghanistan)\n====================================\n- Subsetter API is being stabilized, with the first stable API to happen in\n  3.0.0 release (https://github.com/harfbuzz/harfbuzz/issues/3078).\n- Support multiple variation axes with same tag, aka HOI.\n- The “coretext” testing shaper now passes font variations to CoreText.\n- hb-shape/hb-view does not break line at new lines unless text is read from\n  file.\n- hb-view and hb-subset has a --batch now, similar to hb-shape.\n- The --batch mode now uses ; as argument separator instead of : used previously.\n- The --batch in hb-shape does not expect 0th argument anymore. That is, the\n  lines read are interpreted as argv[1:], instead of argv[0:].\n- The --batch option has been undocumented. We are ready to document it; send\n  feedback if you find it useful.\n- hb-subset got arguments revamps. Added much-requested --gids-file, --glyphs,\n  --glyphs-file, --unicodes-file, supporting ranges in --unicodes.\n- Various bug fixes.\n\n\nOverview of changes leading to 2.8.2\nTuesday, July 8, 2021\n====================================\n- Shaping LTR digits for RTL scripts now makes the native direction of the\n  digits LTR, applying shaping and positioning rules on the same glyph order as\n  Uniscribe. (Jonathan Kew, Khaled Hosny).\n- Subsetting COLR v1 and CPAL tables is now supported. (Garret Rieger, Qunxin Liu)\n- Various fixes and improvements to the subsetter. (Garret Rieger, Qunxin Liu, Behdad)\n- When applying morx table, mark glyph widths should not be zeroed. (Jonathan Kew)\n- GPOS is preferred over kerx, if GSUB was applied. (Behdad)\n- Regional_Indicator pairs are grouped together when clustering. (Behdad)\n- New API:\n+hb_blob_create_or_fail()\n+hb_blob_create_from_file_or_fail()\n+hb_set_copy()\n\n\nOverview of changes leading to 2.8.1\nTuesday, May 4, 2021\n====================================\n- Subsetter now fully supports GSUB/GPOS/GDEF tables (including variations); as\n  such, layout tables are retained by subsetter by default. (Garret Rieger, Qunxin Liu)\n- Build scripts no longer check for FontConfig as HarfBuzz does not use it.\n- hb-view supports iTerm2 and kitty inline image protocols (Khaled Hosny),\n  it can also use Chafa for terminal graphics if available (Hans Petter Jansson).\n\nOverview of changes leading to 2.8.0\nTuesday, March 16, 2021\n====================================\n- Shape joining scripts other than Arabic/Syriac using the Universal Shaping Engine.\n  Previously these were shaped using the generalized Arabic shaper. (David Corbett)\n- Fix regression in shaping of U+0B55 ORIYA SIGN OVERLINE. (David Corbett)\n- Update language tags. (David Corbett)\n- Variations: reduce error: do not round each interpolated delta. (Just van Rossum)\n- Documentation improvements. (Khaled Hosny, Nathan Willis)\n- Subsetter improvements: subsets most, if not all, lookup types now. (Garret Rieger, Qunxin Liu)\n- Fuzzer-found fixes and other improvements when memory failures happen. (Behdad)\n- Removed most atomic implementations now that we have C++11 atomic impl. (Behdad)\n- General codebase upkeep; using more C++11 features: constexpr constructors, etc. (Behdad)\n\n\nOverview of changes leading to 2.7.4\nSunday, December 27, 2020\n====================================\n- Fix missing --enable-introspection configure option from previous release\n  tarball.\n- Documentation updates.\n\n\nOverview of changes leading to 2.7.3\nWednesday, December 23, 2020\n====================================\n- Update USE shaper to 2020-08-13 specification, and other improvements.\n- Don’t disable liga feature in myanmar shaper, to match Uniscribe.\n- Improvements to language and script tags handling.\n- Update language system tag registry to OpenType 1.8.4\n- Support for serializing and deserializing Unicode buffers. Serialized buffers\n  are now delimited with `<>` or `[]` based on whether it is a Unicode or\n  glyphs buffer.\n- Increase buffer work limits to handle fonts with many complex lookups.\n- Handle more shaping operations in trace output.\n- Memory access fixes.\n- More OOM fixes.\n- Improved documentation.\n- Build system improvements.\n- New API:\n+hb_buffer_has_positions()\n+hb_buffer_serialize()\n+hb_buffer_serialize_unicode()\n+hb_buffer_deserialize_unicode()\n\n\nOverview of changes leading to 2.7.2\nSaturday, August 29, 2020\n====================================\n- Fix a regression in the previous release that caused a crash with Kaithi.\n- More OOM fixes.\n\n\nOverview of changes leading to 2.7.1\nThursday, August 13, 2020\n====================================\n- ot-funcs now handles variable empty glyphs better when hvar/vvar isn't present.\n- Reverted a GDEF processing regression.\n- A couple of fixes to handle OOM better.\n\n\nOverview of changes leading to 2.7.0\nSaturday, July 25, 2020\n====================================\n- Use an implementation for round that always rounds up, some minor fluctuations\n  are expected on var font specially when hb-ot callback is used.\n- Fix an AAT's `kerx` issue on broken rendering of Devanagari Sangam MN.\n- Remove AAT's `lcar` table support from _get_ligature_carets API, not even much\n  use on macOS installed fonts (only two files).  GDEF support is the recommended\n  one and expected to work properly after issues fixed two releases ago.\n- Minor memory fixes to handle OOM better specially in hb-ft.\n- Minor .so files versioning scheme change and remove stable/unstable scheme\n  differences, was never used in practice (always default to stable scheme).\n- We are now suggesting careful packaging of the library using meson,\n  https://github.com/harfbuzz/harfbuzz/wiki/Notes-on-migration-to-meson\n  for more information.\n- Distribution package URL is changed, either use GitHub generated tarballs,\n  `https://github.com/harfbuzz/harfbuzz/archive/$pkgver.tar.gz`\n  or, even more preferably use commit hash of the release and git checkouts like,\n  `git+https://github.com/harfbuzz/harfbuzz#commit=$commit`\n\n\nOverview of changes leading to 2.6.8\nMonday, June 22, 2020\n====================================\n- New API to fetch glyph alternates from GSUB table.\n- hb-coretext build fix for macOS < 10.10.\n- Meson build fixes, cmake port removal is postponed but please prepare for\n  it and give us feedback.\n  Autotools is still our main build system however please consider\n  experimenting with meson also for packaging the library.\n- New API:\n+hb_ot_layout_lookup_get_glyph_alternates()\n\n\nOverview of changes leading to 2.6.7\nWednesday, June 3, 2020\n====================================\n- Update to Unicode 13.0.0.\n- Fix hb_ot_layout_get_ligature_carets for fonts without lcar table, it was\n  completely broken for all the other fonts since 2.1.2.\n- As a part of our migration to meson, this release will be the last one\n  to provide cmake port files but autotools still is our main build system.\n  There is a possibility that the next version or the after be released\n  using meson.\n\n\nOverview of changes leading to 2.6.6\nTuesday, May 12, 2020\n====================================\n- A fix in AAT kerning for Geeza Pro.\n- Better support for resource fork fonts on macOS.\n\n\nOverview of changes leading to 2.6.5\nFriday, April 17, 2020\n====================================\n- Add experimental meson build system.  Autotools is still the primary\n  and supported build system.\n- AAT is now always preferred for horizontal scripts when both AAT and OT\n  layout tables exist at the same time.\n- Subsetter improvements.\n- New API:\n+hb_ft_font_lock_face()\n+hb_ft_font_unlock_face()\n\n\nOverview of changes leading to 2.6.4\nMonday, October 29, 2019\n====================================\n- Small bug fix.\n- Build fixes.\n\n\nOverview of changes leading to 2.6.3\nMonday, October 28, 2019\n====================================\n- Misc small fixes, mostly to build-related issues.\n- New API:\n+hb_font_get_nominal_glyphs()\n\n\nOverview of changes leading to 2.6.2\nMonday, September 30, 2019\n====================================\n- Misc small fixes, mostly to build-related issues.\n\n\nOverview of changes leading to 2.6.1\nThursday, August 22, 2019\n====================================\n- Fix regression with hb_font_create_sub_font scaling introduced in 2.6.0.\n- Change interpretation of font PTEM size / CoreText font size handling.\n  See https://github.com/harfbuzz/harfbuzz/pull/1484\n- hb-ot-font: Prefer symbol cmap subtable if present.\n- Apply 'dist'/'abvm'/'blwm' features to all scripts.\n- Drop experimental DirectWrite API.\n\n\nOverview of changes leading to 2.6.0\nTuesday, August 13, 2019\n====================================\n- New OpenType metrics, baseline, and metadata table access APIs.\n- New API to set font variations to a named-instance.\n- New hb-gdi.h header and API for creating hb_face_t from HFONT.\n- Amalgam: Provide a single-file harfbuzz.cc file for easier alternate building.\n- More size-reduction configurable options, enabled by HB_TINY.\n- New API:\n+hb_font_set_var_named_instance()\n+hb_gdi_face_create()\n+hb_ot_layout_baseline_tag_t\n+hb_ot_layout_get_baseline()\n+hb_ot_meta_tag_t\n+hb_ot_meta_get_entry_tags()\n+hb_ot_meta_reference_entry()\n+hb_ot_metrics_tag_t\n+hb_ot_metrics_get_position()\n+hb_ot_metrics_get_variation()\n+hb_ot_metrics_get_x_variation()\n+hb_ot_metrics_get_y_variation()\n\n\nOverview of changes leading to 2.5.3\nWednesday, June 26, 2019\n====================================\n- Fix UCD script data for Unicode 10+ scripts.  This was broken since 2.5.0.\n- More optimizations for HB_TINY.\n\n\nOverview of changes leading to 2.5.2\nThursday, June 20, 2019\n====================================\n- More hb-config.hh facilities to shrink library size, namely when built as\n  HB_TINY.\n- New documentation of custom configurations in CONFIG.md.\n- Fix build on gcc 4.8.  That's supported again.\n- Universal Shaping Engine improvements thanks to David Corbett.\n- API Changes: Undeprecate some horizontal-kerning API and re-enable in hb-ft,\n  such that Type1 fonts will continue kerning.\n\n\nOverview of changes leading to 2.5.1\nFriday, May 31, 2019\n====================================\n- Fix build with various versions of Visual Studio.\n- Improved documentation, thanks to Nathan Willis.\n- Bugfix in subsetting glyf table.\n- Improved scripts for cross-compiling for Windows using mingw.\n- Rename HB_MATH_GLYPH_PART_FLAG_EXTENDER to HB_OT_MATH_GLYPH_PART_FLAG_EXTENDER.\n  A deprecated macro is added for backwards-compatibility.\n\n\nOverview of changes leading to 2.5.0\nFriday, May 24, 2019\n====================================\n- This release does not include much functional changes, but includes major internal\n  code-base changes.  We now require C++11.  Support for gcc 4.8 and earlier has been\n  dropped.\n- New hb-config.hh facility for compiling smaller library for embedded and web usecases.\n- New Unicode Character Database implementation that is half the size of previously-used\n  UCDN.\n- Subsetter improvements.\n- Improved documentation, thanks to Nathan Willis.\n- Misc shaping fixes.\n\n\nOverview of changes leading to 2.4.0\nMonday, March 25, 2019\n====================================\n- Unicode 12.\n- Misc fixes.\n- Subsetter improvements.\n- New API:\nHB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE\nhb_directwrite_face_create()\n\n\nOverview of changes leading to 2.3.1\nWednesday, January 30, 2019\n====================================\n- AAT bug fixes.\n- Misc internal housekeeping cleanup.\n\n\nOverview of changes leading to 2.3.0\nThursday, December 20, 2018\n====================================\n- Fix regression on big-endian architectures.  Ouch!\n- Misc bug and build fixes.\n- Fix subsetting of simple GSUB/GDEF.\n- Merge CFF / CFF2 support contributed by Adobe.  This mostly involves\n  the subsetter, but also get_glyph_extents on CFF fonts.\n\nNew API in hb-aat.h:\n+hb_aat_layout_has_substitution()\n+hb_aat_layout_has_positioning()\n+hb_aat_layout_has_tracking()\n\n\nOverview of changes leading to 2.2.0\nThursday, November 29, 2018\n====================================\n- Misc shaping bug fixes.\n- Add font variations named-instance API.\n- Deprecate font variations axis enumeration API and add replacement.\n- AAT shaping improvements:\n  o Fixed 'kern' table Format 2 implementation.\n  o Implement 'feat' table API for feature detection.\n  o Blacklist 'GSUB' table of fonts from 'MUTF' foundry that also have 'morx'.\n\nNew API:\n+hb_aat_layout_feature_type_t\n+hb_aat_layout_feature_selector_t\n+hb_aat_layout_get_feature_types()\n+hb_aat_layout_feature_type_get_name_id\n+hb_aat_layout_feature_selector_info_t\n+HB_AAT_LAYOUT_NO_SELECTOR_INDEX\n+hb_aat_layout_feature_type_get_selector_infos()\n+hb_ot_var_axis_flags_t\n+hb_ot_var_axis_info_t\n+hb_ot_var_get_axis_infos()\n+hb_ot_var_find_axis_info()\n+hb_ot_var_get_named_instance_count()\n+hb_ot_var_named_instance_get_subfamily_name_id()\n+hb_ot_var_named_instance_get_postscript_name_id()\n+hb_ot_var_named_instance_get_design_coords()\n\nDeprecated API:\n+HB_OT_VAR_NO_AXIS_INDEX\n+hb_ot_var_axis_t\n+hb_ot_var_get_axes()\n+hb_ot_var_find_axis()\n\n\nOverview of changes leading to 2.1.3\nFriday, November 16, 2018\n====================================\n- Fix AAT 'mort' shaping, which was broken in 2.1.2\n\n\nOverview of changes leading to 2.1.2\nFriday, November 16, 2018\n====================================\n- Various internal changes.\n- AAT shaping improvements:\n  o Implement kern table Format 1 state-machine-based kerning.\n  o Implement cross-stream kerning (cursive positioning, etc).\n  o Ignore emptyish GSUB tables (zero scripts) if morx present.\n  o Don't apply GPOS if morx is being applied.  Matches Apple.\n\n\n-Overview of changes leading to 2.1.1\nMonday, November 5, 2018\n====================================\n- AAT improvements:\n  o Implement 'mort' table.\n  o Implement 'kern' subtables Format 1 and Format 3.\n\n\nOverview of changes leading to 2.1.0\nTuesday, October 30, 2018\n====================================\n- AAT shaping improvements:\n  o Allow user controlling AAT features, for whole buffer only currently.\n  o Several 'morx' fixes.\n  o Implement tuple-kerns in 'kerx'; Fixes kerning with Apple default\n    San Francisco fonts.\n- Support for color fonts:\n  o COLR/CPAL API to fetch color layers.\n  o SVG table to fetch SVG documents.\n  o CBDT/sbix API to fetch PNG images.\n- New 'name' table API.\n- hb-ot-font now uses 'VORG' table to correctly position CFF glyphs\n  in vertical layout.\n- Various fuzzer-found bug fixes.\n\nChanged API:\n\nA type and a macro added in 2.0.0 were renamed:\n\nhb_name_id_t -> hb_ot_name_id_t\nHB_NAME_ID_INVALID -> HB_OT_NAME_ID_INVALID\n\nNew API:\n\n+hb_color_t\n+HB_COLOR\n+hb_color_get_alpha()\n+hb_color_get_red()\n+hb_color_get_green()\n+hb_color_get_blue()\n+hb_ot_color_has_palettes()\n+hb_ot_color_palette_get_count()\n+hb_ot_color_palette_get_name_id()\n+hb_ot_color_palette_color_get_name_id()\n+hb_ot_color_palette_flags_t\n+hb_ot_color_palette_get_flags()\n+hb_ot_color_palette_get_colors()\n+hb_ot_color_has_layers()\n+hb_ot_color_layer_t\n+hb_ot_color_glyph_get_layers()\n+hb_ot_color_has_svg()\n+hb_ot_color_glyph_reference_svg()\n+hb_ot_color_has_png()\n+hb_ot_color_glyph_reference_png()\n\n+hb_ot_name_id_t\n+HB_OT_NAME_ID_INVALID\n+HB_OT_NAME_ID_COPYRIGHT\n+HB_OT_NAME_ID_FONT_FAMILY\n+HB_OT_NAME_ID_FONT_SUBFAMILY\n+HB_OT_NAME_ID_UNIQUE_ID\n+HB_OT_NAME_ID_FULL_NAME\n+HB_OT_NAME_ID_VERSION_STRING\n+HB_OT_NAME_ID_POSTSCRIPT_NAME\n+HB_OT_NAME_ID_TRADEMARK\n+HB_OT_NAME_ID_MANUFACTURER\n+HB_OT_NAME_ID_DESIGNER\n+HB_OT_NAME_ID_DESCRIPTION\n+HB_OT_NAME_ID_VENDOR_URL\n+HB_OT_NAME_ID_DESIGNER_URL\n+HB_OT_NAME_ID_LICENSE\n+HB_OT_NAME_ID_LICENSE_URL\n+HB_OT_NAME_ID_TYPOGRAPHIC_FAMILY\n+HB_OT_NAME_ID_TYPOGRAPHIC_SUBFAMILY\n+HB_OT_NAME_ID_MAC_FULL_NAME\n+HB_OT_NAME_ID_SAMPLE_TEXT\n+HB_OT_NAME_ID_CID_FINDFONT_NAME\n+HB_OT_NAME_ID_WWS_FAMILY\n+HB_OT_NAME_ID_WWS_SUBFAMILY\n+HB_OT_NAME_ID_LIGHT_BACKGROUND\n+HB_OT_NAME_ID_DARK_BACKGROUND\n+HB_OT_NAME_ID_VARIATIONS_PS_PREFIX\n+hb_ot_name_entry_t\n+hb_ot_name_list_names()\n+hb_ot_name_get_utf8()\n+hb_ot_name_get_utf16()\n+hb_ot_name_get_utf32()\n\n\nOverview of changes leading to 2.0.2\nSaturday, October 20, 2018\n====================================\n- Fix two minor memory access issues in AAT tables.\n\n\nOverview of changes leading to 2.0.1\nFriday, October 19, 2018\n====================================\n- Fix hb-version.h reported release version that went wrong (1.8.0)\n  with previous release.\n- Fix extrapolation in 'trak' table.\n- Fix hb-font infinite-recursion issue with some font funcs and\n  subclassed fonts.\n- Implement variation-kerning format in kerx table, although without\n  variation.\n- Fix return value of hb_map_is_empty().\n\n\nOverview of changes leading to 2.0.0\nThursday, October 18, 2018\n====================================\n- Added AAT shaping support (morx/kerx/trak).\n  Automatically used if GSUB/GPOS are not available respectively.\n  Set HB_OPTIONS=aat env var to have morx/kerx preferred over\n  GSUB/GPOS.\n- Apply TrueType kern table internally, instead of relying on\n  hb_font_t callbacks.\n- Khmer shaper significantly rewritten to better match Uniscribe.\n- Indic3 tags ('dev3', etc) are passed to USE shaper.\n- .dfont Mac font containers implemented.\n- Script- and language-mapping revamped to better use BCP 47.\n- Misc USE and Indic fixes.\n- Misc everything fixes.\n- Too many things to list.  Biggest release since 0.9.1, with\n  over 500 commits in just over 5 weeks!  Didn't intend it to\n  be a big release.  Just happened to become.\n- hb-ft now locks underlying FT_Face during use.\n\nAPI changes:\n\n- Newly-created hb_font_t's now have our internal \"hb-ot-font\"\n  callbacks set on them, so they should work out of the box\n  without any callbacks set.  If callbacks are set, everything\n  is back to what it was before, the fallback callbacks are\n  null.  If you to get the internal implementation modified,\n  sub_font it.\n\n- New hb_font_funcs_set_nominal_glyphs_func() allows speeding\n  up character to glyph mapping.\n\nNew API:\n+HB_FEATURE_GLOBAL_START\n+HB_FEATURE_GLOBAL_END\n+hb_buffer_set_invisible_glyph()\n+hb_buffer_get_invisible_glyph()\n+hb_font_funcs_set_nominal_glyphs_func()\n+hb_ot_layout_table_select_script()\n+hb_ot_layout_script_select_language()\n+hb_ot_layout_feature_get_name_ids()\n+hb_ot_layout_feature_get_characters()\n+hb_name_id_t\n+HB_NAME_ID_INVALID\n+HB_OT_MAX_TAGS_PER_SCRIPT\n+hb_ot_tags_from_script_and_language()\n+hb_ot_tags_to_script_and_language()\n\nDeprecated API:\n-hb_font_funcs_set_glyph_func()\n-hb_unicode_eastasian_width_func_t\n-hb_unicode_funcs_set_eastasian_width_func()\n-hb_unicode_eastasian_width()\n-hb_unicode_decompose_compatibility_func_t\n-HB_UNICODE_MAX_DECOMPOSITION_LEN\n-hb_unicode_funcs_set_decompose_compatibility_func()\n-hb_unicode_decompose_compatibility()\n-hb_font_funcs_set_glyph_h_kerning_func()\n-hb_font_funcs_set_glyph_v_kerning_func()\n-hb_font_get_glyph_h_kerning()\n-hb_font_get_glyph_v_kerning()\n-hb_font_get_glyph_kerning_for_direction()\n-hb_ot_layout_table_choose_script()\n-hb_ot_layout_script_find_language()\n-hb_ot_tags_from_script()\n-hb_ot_tag_from_language()\n\n\nOverview of changes leading to 1.9.0\nMonday, September 10, 2018\n====================================\n- Added 'cmap' API to hb_face_t.\n- Face-builder API.\n- hb-ot-font re-creation should be much leaner now, as the\n  font tables it uses are cached on hb_face_t now.\n- Internal source header file name changes:\n  hb-*-private.hh is renamed to hb-*.hh.\n\nNew API:\n+HB_UNICODE_MAX\n+hb_face_collect_unicodes()\n+hb_face_collect_variation_selectors()\n+hb_face_collect_variation_unicodes()\n+hb_face_builder_create()\n+hb_face_builder_add_table()\n\n\nOverview of changes leading to 1.8.8\nTuesday, August 14, 2018\n====================================\n- Fix hb-icu crash on architectures where compare_exchange_weak() can\n  fail falsely.  This bug was introduced in 1.8.4.\n  https://bugs.chromium.org/p/chromium/issues/detail?id=873568\n- More internal refactoring of atomic operations and singletons.\n- API changes:\n  The following functions do NOT reference their return value before\n  returning:\n  * hb_unicode_funcs_get_default()\n  * hb_glib_get_unicode_funcs()\n  * hb_icu_get_unicode_funcs()\n  This is consistent with their naming (\"get\", instead of \"reference\")\n  as well as how they are used in the wild (ie. no one calls destroy()\n  on their return value.)\n\n\nOverview of changes leading to 1.8.7\nWednesday, August 8, 2018\n====================================\n- Fix assertion failure with GDEF-blacklisted fonts.\n\n\nOverview of changes leading to 1.8.6\nTuesday, August 7, 2018\n====================================\n- Internal code shuffling.\n- New API to speed up getting advance widths for implementations\n  that have heavy overhead in get_h_advance callback:\n+hb_font_funcs_set_glyph_h_advances_func\n+hb_font_funcs_set_glyph_v_advances_func\n+hb_font_get_glyph_advances_for_direction\n+hb_font_get_glyph_h_advances\n+hb_font_get_glyph_h_advances_func_t\n+hb_font_get_glyph_v_advances\n+hb_font_get_glyph_v_advances_func_t\n\n\nOverview of changes leading to 1.8.5\nWednesday, August 1, 2018\n====================================\n- Major Khmer shaper improvements to better match Microsoft.\n- Indic bug fixes.\n- Internal improvements to atomic operations.\n\n\nOverview of changes leading to 1.8.4\nTuesday, July 17, 2018\n====================================\n- Fix build on non-C++11.\n- Use C++-style GCC atomics and C++11 atomics.\n\n\nOverview of changes leading to 1.8.3\nWednesday, July 11, 2018\n====================================\n- A couple of Indic / USE bug fixes.\n- Disable vectorization, as it was causing unaligned access bus error on\n  certain 32bit architectures.\n\n\nOverview of changes leading to 1.8.2\nTuesday, July 3, 2018\n====================================\n- Fix infinite loop in Khmer shaper.\n- Improve hb_blob_create_from_file() for streams.\n\n\nOverview of changes leading to 1.8.1\nTuesday, June 12, 2018\n====================================\n- Fix hb-version.h file generation; last two releases went out with wrong ones.\n- Add correctness bug in hb_set_t operations, introduced in 1.7.7.\n- Remove HB_SUBSET_BUILTIN build option.  Not necessary.\n\n\nOverview of changes leading to 1.8.0\nTuesday, June 5, 2018\n====================================\n- Update to Unicode 11.0.0.\n\n\nOverview of changes leading to 1.7.7\nTuesday, June 5, 2018\n====================================\n- Lots of internal changes, but not yet exposed externally.\n- All HarfBuzz objects are significantly smaller in size now.\n- Sinhala: Position repha on top of post-consonant, not base.\n  This better matches Windows 10 behavior, which was changed\n  from previous Windows versions.\n- New build options:\n  o New cpp macro HB_NO_ATEXIT\n  o New cpp macro HB_SUBSET_BUILTIN\n- Significant libharfbuzz-subset changes. API subject to change.\n- New API in libharfbuzz:\n\n+hb_blob_create_from_file()\n+hb_face_count()\n\nA hashmap implementation:\n+hb-map.h\n+HB_MAP_VALUE_INVALID\n+hb_map_t\n+hb_map_create()\n+hb_map_get_empty()\n+hb_map_reference()\n+hb_map_destroy()\n+hb_map_set_user_data()\n+hb_map_get_user_data()\n+hb_map_allocation_successful()\n+hb_map_clear()\n+hb_map_is_empty()\n+hb_map_get_population()\n+hb_map_set()\n+hb_map_get()\n+hb_map_del()\n+hb_map_has()\n\n\nOverview of changes leading to 1.7.6\nWednesday, March 7, 2018\n====================================\n\n- Fix to hb_set_t binary operations. Ouch.\n- New experimental harfbuzz-subset library. All of hb-subset.h\n  is experimental right now and API WILL change.\n\n- New API:\nhb_blob_copy_writable_or_fail()\nHB_OT_TAG_BASE\nhb_set_previous()\nhb_set_previous_range()\n\n\nOverview of changes leading to 1.7.5\nTuesday, January 30, 2018\n====================================\n\n- Separate Khmer shaper from Indic.\n- First stab at AAT morx. Not hooked up.\n- Misc bug fixes.\n\n\nOverview of changes leading to 1.7.4\nWednesday, December 20, 2017\n====================================\n\n- Fix collect_glyphs() regression caused by hb_set_t changes.\n\n\nOverview of changes leading to 1.7.3\nMonday, December 18, 2017\n====================================\n\n- hb_set_t performance tuning and optimizations.\n- Speed up collect_glyphs() and reject garbage data.\n- In hb_coretext_font_create() set font point-size (ptem).\n- Misc fixes.\n\n\nOverview of changes leading to 1.7.2\nMonday, December 4, 2017\n====================================\n\n- Optimize hb_set_add_range().\n- Misc fixes.\n- New API:\nhb_coretext_font_create()\n\n\nOverview of changes leading to 1.7.1\nTuesday, November 14, 2017\n====================================\n\n- Fix atexit object destruction regression.\n- Fix minor integer-overflow.\n\n\nOverview of changes leading to 1.7.0\nMonday, November 13, 2017\n====================================\n\n- Minor Indic fixes.\n- Implement kerning and glyph names in hb-ot-font.\n- Various DSO optimization re .data and .bss sizes.\n- Make C++11 optional; build fixes.\n- Mark all other backends \"unsafe-to-break\".\n- Graphite fix.\n\n\nOverview of changes leading to 1.6.3\nThursday, October 26th, 2017\n====================================\n\n- Fix hb_set_t some more.  Should be solid now.\n- Implement get_glyph_name() for hb-ot-font.\n- Misc fixes.\n\n\nOverview of changes leading to 1.6.2\nMonday, October 23nd, 2017\n====================================\n\n- Yesterday's release had a bad crasher; don't use it.  That's what\n  happens when one works on Sunday...\n  https://github.com/harfbuzz/harfbuzz/issues/578\n- Build fixes for FreeBSD and Chrome Android.\n\n\nOverview of changes leading to 1.6.1\nSunday, October 22nd, 2017\n====================================\n\n- Don't skip over COMBINING GRAPHEME JOINER when ligating, etc.\n  To be refined: https://github.com/harfbuzz/harfbuzz/issues/554\n- Faster hb_set_t implementation.\n- Don't use deprecated ICU API.\n- Fix undefined-behavior in Myanmar shaper, introduced in 1.6.0\n- Deprecated API:\n  hb_set_invert()\n\n\nOverview of changes leading to 1.6.0\nFriday, October the 13th, 2017\n====================================\n\n- Update to Unicode 10.\n\n- Various Indic and Universal Shaping Engine fixes as a result of\n  HarfBuzz Hackfest with Jonathan Kew at Web Engines Hackfest at\n  the Igalia offices in A Coruña, Spain.  Thanks Igalia for having\n  us!\n\n- Implement Unicode Arabic Mark Ordering Algorithm UTR#53.\n\n- Implement optical sizing / tracking in CoreText backend, using\n  new API hb_font_set_ptem().\n\n- Allow notifying hb_font_t that underlying FT_Face changed sizing,\n  using new API hb_ft_font_changed().\n\n- More Graphite backend RTL fixes.\n\n- Fix caching of variable font shaping plans.\n\n- hb-view / hb-shape now accept following new arguments:\n\n  o --unicodes: takes a list of hex numbers that represent Unicode\n    codepoints.\n\nNew API:\n+hb_face_get_table_tags()\n+hb_font_set_ptem()\n+hb_font_get_ptem()\n+hb_ft_font_changed()\n\n\nOverview of changes leading to 1.5.1\nTuesday, September 5, 2017\n====================================\n\n- Fix \"unsafe-to-break\" in fallback shaping and other corner cases.\n  All our tests pass with --verify now, meaning unsafe-to-break API\n  works as expected.\n- Add --unicodes to hb-view / hb-shape.\n- [indic] Treat Consonant_With_Stacker as consonant.  This will need\n  further tweaking.\n- hb_buffer_diff() tweaks.\n\n\nOverview of changes leading to 1.5.0\nWednesday, August 23, 2017\n====================================\n\n- Misc new API, for appending a buffer to another, and for comparing\n  contents of two buffers for types of differences.\n\n- New \"unsafe-to-break\" API.  Can be used to speed up reshaping\n  in line-breaking situations.  Essentially, after shaping, it returns\n  positions in the input string (some of the cluster boundaries) that\n  are \"safe to break\" in that if the text is segmented at that position\n  and two sides reshaped and concatenated, the shaping result is\n  exactly the same as shaping the text in one piece.\n\n  hb-view and hb-shape and hb-shape now take --verify, which verifies\n  the above property.\n\n  Some corner cases of the implementation are still not quite working.\n  Those will be fixed in subsequent releases.\n\n- New API:\n\nhb_buffer_append()\n\nhb_glyph_flags_t\nHB_GLYPH_FLAG_UNSAFE_TO_BREAK\nHB_GLYPH_FLAG_DEFINED\nhb_glyph_info_get_glyph_flags()\n\nHB_BUFFER_SERIALIZE_FLAG_GLYPH_FLAGS\n\nhb_buffer_diff_flags_t\nHB_BUFFER_DIFF_FLAG_EQUAL\nHB_BUFFER_DIFF_FLAG_CONTENT_TYPE_MISMATCH\nHB_BUFFER_DIFF_FLAG_LENGTH_MISMATCH\nHB_BUFFER_DIFF_FLAG_NOTDEF_PRESENT\nHB_BUFFER_DIFF_FLAG_DOTTED_CIRCLE_PRESENT\nHB_BUFFER_DIFF_FLAG_CODEPOINT_MISMATCH\nHB_BUFFER_DIFF_FLAG_CLUSTER_MISMATCH\nHB_BUFFER_DIFF_FLAG_GLYPH_FLAGS_MISMATCH\nHB_BUFFER_DIFF_FLAG_POSITION_MISMATCH\nhb_buffer_diff\n\n\nOverview of changes leading to 1.4.8\nTuesday, August 8, 2017\n====================================\n\n- Major fix to avar table handling.\n- Rename hb-shape --show-message to --trace.\n- Build fixes.\n\n\nOverview of changes leading to 1.4.7\nTuesday, July 18, 2017\n====================================\n\n- Multiple Indic, Tibetan, and Cham fixes.\n- CoreText: Allow disabling kerning.\n- Adjust Arabic feature order again.\n- Misc build fixes.\n\n\nOverview of changes leading to 1.4.6\nSunday, April 23, 2017\n====================================\n\n- Graphite2: Fix RTL positioning issue.\n- Backlist GDEF of more versions of Padauk and Tahoma.\n- New, experimental, cmake alternative build system.\n\n\nOverview of changes leading to 1.4.5\nFriday, March 10, 2017\n====================================\n\n- Revert \"Fix Context lookup application when moving back after a glyph...\"\n  This introduced memory access problems.  To be fixed properly soon.\n\n\nOverview of changes leading to 1.4.4\nSunday, March 5, 2017\n====================================\n\n- Fix Context lookup application when moving back after a glyph deletion.\n- Fix buffer-overrun in Bengali.\n\n\nOverview of changes leading to 1.4.3\nSaturday, February 25, 2017\n====================================\n\n- Route Adlam script to Arabic shaper.\n- Misc fixes.\n- New API:\n  hb_font_set_face()\n- Deprecate API:\n  hb_graphite2_font_get_gr_font()\n\n\nOverview of changes leading to 1.4.2\nMonday, January 23, 2017\n====================================\n\n- Implement OpenType Font Variation tables avar/fvar/HVAR/VVAR.\n- hb-shape and hb-view now accept --variations.\n- New API:\n\nhb_variation_t\nhb_variation_from_string()\nhb_variation_to_string()\n\nhb_font_set_variations()\nhb_font_set_var_coords_design()\nhb_font_get_var_coords_normalized()\n\nhb-ot-var.h:\nhb_ot_var_axis_t\nhb_ot_var_has_data()\nhb_ot_var_get_axis_count()\nhb_ot_var_get_axes()\nhb_ot_var_find_axis()\nhb_ot_var_normalize_variations()\nhb_ot_var_normalize_coords()\n\n- MVAR to be implemented later.  Access to named instances to be\n  implemented later as well.\n\n- Misc fixes.\n\n\nOverview of changes leading to 1.4.1\nThursday, January 5, 2017\n====================================\n\n- Always build and use UCDN for Unicode data by default.\n  Reduces dependence on version of Unicode data in glib,\n  specially in the Windows bundles we are shipping, which\n  have very old glib.\n\n\nOverview of changes leading to 1.4.0\nThursday, January 5, 2017\n====================================\n\n- Merged \"OpenType GX\" branch which adds core of support for\n  OpenType 1.8 Font Variations.  To that extent, the relevant\n  new API is:\n\nNew API:\nhb_font_set_var_coords_normalized()\n\n  with supporting API:\n\nNew API:\nHB_OT_LAYOUT_NO_VARIATIONS_INDEX\nhb_ot_layout_table_find_feature_variations()\nhb_ot_layout_feature_with_variations_get_lookups()\nhb_shape_plan_create2()\nhb_shape_plan_create_cached2()\n\n  Currently variations in GSUB/GPOS/GDEF are fully supported,\n  and no other tables are supported.  In particular, fvar/avar\n  are NOT supported, hence the hb_font_set_var_coords_normalized()\n  taking normalized coordinates.  API to take design coordinates\n  will be added in the future.\n\n  HVAR/VVAR/MVAR support will also be added to hb-ot-font in the\n  future.\n\n- Fix regression in GDEF glyph class processing.\n- Add decompositions for Chakma, Limbu, and Balinese in USE shaper.\n- Misc fixes.\n\n\nOverview of changes leading to 1.3.4\nMonday, December 5, 2016\n====================================\n\n- Fix vertical glyph origin in hb-ot-font.\n- Implement CBDT/CBLC color font glyph extents in hb-ot-font.\n\n\nOverview of changes leading to 1.3.3\nWednesday, September 28, 2016\n====================================\n\n- Implement parsing of OpenType MATH table.\nNew API:\nHB_OT_TAG_MATH\nHB_OT_MATH_SCRIPT\nhb_ot_math_constant_t\nhb_ot_math_kern_t\nhb_ot_math_glyph_variant_t\nhb_ot_math_glyph_part_flags_t\nhb_ot_math_glyph_part_t\nhb_ot_math_has_data\nhb_ot_math_get_constant\nhb_ot_math_get_glyph_italics_correction\nhb_ot_math_get_glyph_top_accent_attachment\nhb_ot_math_get_glyph_kerning\nhb_ot_math_is_glyph_extended_shape\nhb_ot_math_get_glyph_variants\nhb_ot_math_get_min_connector_overlap\nhb_ot_math_get_glyph_assembly\n\n\nOverview of changes leading to 1.3.2\nWednesday, September 27, 2016\n====================================\n\n- Fix build of hb-coretext on older OS X versions.\n\n\nOverview of changes leading to 1.3.1\nWednesday, September 7, 2016\n====================================\n\n- Blacklist bad GDEF of more fonts (Padauk).\n- More CoreText backend crash fixes with OS X 10.9.5.\n- Misc fixes.\n\n\nOverview of changes leading to 1.3.0\nThursday, July 21, 2016\n====================================\n\n- Update to Unicode 9.0.0\n- Move Javanese from Indic shaper to Universal Shaping Engine.\n- Allow MultipleSubst to delete a glyph (matching Windows engine).\n- Update Universal Shaping Engine to latest draft from Microsoft.\n- DirectWrite backend improvements.  Note: this backend is for testing ONLY.\n- CoreText backend improvements with unreachable fonts.\n- Implement symbol fonts (cmap 3.0.0) in hb-ft and hb-ot-font.\n- Blacklist bad GDEF of more fonts (Tahoma & others).\n- Misc fixes.\n\n\nOverview of changes leading to 1.2.7\nMonday, May 2, 2016\n====================================\n\n- Blacklist another version of Times New Roman (Bold) Italic from Windows 7.\n- Fix Mongolian Free Variation Selectors shaping with certain fonts.\n- Fix Tibetan shorthand contractions shaping.\n- Improved list of language tag mappings.\n- Unbreak build on Windows CE.\n- Make 'glyf' table loading lazy in hb-ot-font.\n\n\nOverview of changes leading to 1.2.6\nFriday, April 8, 2016\n====================================\n\n- Blacklist GDEF table of another set of Times New Roman (Bold) Italic.\n- DirectWrite backend improvements.  Note: DirectWrite backend is\n  exclusively for our internal testing and should NOT be used in any\n  production system whatsoever.\n\n\nOverview of changes leading to 1.2.5\nMonday, April 4, 2016\n====================================\n\n- Fix GDEF mark-filtering-set, which was broken in 1.2.3.\n\n\nOverview of changes leading to 1.2.4\nThursday, March 17, 2016\n====================================\n\n- Synthesize GDEF glyph class for any glyph that does not have one in GDEF.\n  I really hope we don't discover broken fonts that shape badly with this\n  change.\n- Misc build and other minor fixes.\n- API changes:\n  - Added HB_NDEBUG.  It's fine for production systems to define this to\n    disable high-overhead debugging checks.  However, I also reduced the\n    overhead of those checks, so it's a non-issue right now.  You can\n    forget it.  Just not defining anything at all is fine.\n\n\nOverview of changes leading to 1.2.3\nThursday, February 25, 2016\n====================================\n\n- Blacklist GDEF table of certain versions of Times New Roman (Bold) Italic,\n  due to bug in glyph class of ASCII double-quote character.  This should\n  address \"regression\" introduced in 1.2.0 when we switched mark zeroing\n  in most shapers from BY_UNICODE_LATE to BY_GDEF_LATE.\n  This fourth release in a week should finally stabilize things...\n\n- hb-ot-font's get_glyph() implementation saw some optimizations.  Though,\n  might be really hard to measure in real-world situations.\n\n- Also, two rather small API changes:\n\nWe now disable some time-consuming internal bookkeeping if built with NDEBUG\ndefined.  This is a first time that we use NDEBUG to disable debug code.  If\nthere exist production systems that do NOT want to enable NDEBUG, please let\nme know and I'll add HB_NDEBUG.\n\nAdded get_nominal_glyph() and get_variation_glyph() instead of get_glyph()\n\nNew API:\n- hb_font_get_nominal_glyph_func_t\n- hb_font_get_variation_glyph_func_t\n- hb_font_funcs_set_nominal_glyph_func()\n- hb_font_funcs_set_variation_glyph_func()\n- hb_font_get_nominal_glyph()\n- hb_font_get_variation_glyph()\n\nDeprecated API:\n- hb_font_get_glyph_func_t\n- hb_font_funcs_set_glyph_func()\n\nClients that implement their own font-funcs are encouraged to replace\ntheir get_glyph() implementation with a get_nominal_glyph() and\nget_variation_glyph() pair.  The variation version can assume that\nvariation_selector argument is not zero.  Old (deprecated) functions\nwill continue working indefinitely using internal gymnastics; it is\njust more efficient to use the new functions.\n\n\nOverview of changes leading to 1.2.2\nWednesday, February 24, 2016\n====================================\n\n- Fix regression with mark positioning with fonts that have\n  non-zero mark advances.  This was introduced in 1.2.0 while\n  trying to make mark and cursive attachments to work together.\n  I have partially reverted that, so this version is much more\n  like what we had before.  All clients who updated to 1.2.0\n  should update to this version.\n\n\nOverview of changes leading to 1.2.1\nTuesday, February 23, 2016\n====================================\n\n- CoreText: Fix bug with wrong scale if font scale was changed later.\n  https://github.com/libass/libass/issues/212\n- CoreText: Drastically speed up font initialization.\n- CoreText: Fix tiny leak.\n- Group ZWJ/ZWNJ with previous syllable under cluster-level=0.\n  https://github.com/harfbuzz/harfbuzz/issues/217\n- Add test/shaping/README.md about how to add tests to the suite.\n\n\nOverview of changes leading to 1.2.0\nFriday, February 19, 2016\n====================================\n\n- Fix various issues (hangs mostly) in case of memory allocation failure.\n- Change mark zeroing types of most shapers from BY_UNICODE_LATE to\n  BY_GDEF_LATE.  This seems to be what Uniscribe does.\n- Change mark zeroing of USE shaper from NONE to BY_GDEF_EARLY.  That's\n  what Windows does.\n- Allow GPOS cursive connection on marks, and fix the interaction with\n  mark attachment.  This work resulted in some changes to how mark\n  attachments work.  See:\n  https://github.com/harfbuzz/harfbuzz/issues/211\n  https://github.com/harfbuzz/harfbuzz/commit/86c68c7a2c971efe8e35b1f1bd99401dc8b688d2\n- Graphite2 shaper: improved negative advance handling (eg. Nastaliq).\n- Add nmake-based build system for Windows.\n- Minor speedup.\n- Misc. improvements.\n\n\nOverview of changes leading to 1.1.3\nMonday, January 11, 2016\n====================================\n\n- Ported Indic shaper to Unicode 8.0 data.\n- Universal Shaping Engine fixes.\n- Speed up CoreText shaper when font fallback happens in CoreText.\n- Documentation improvements, thanks to Khaled Hosny.\n- Very rough directwrite shaper for testing, thanks to Ebrahim Byagowi.\n- Misc bug fixes.\n- New API:\n\n  * Font extents:\n      hb_font_extents_t\n      hb_font_get_font_extents_func_t\n      hb_font_get_font_h_extents_func_t\n      hb_font_get_font_v_extents_func_t\n      hb_font_funcs_set_font_h_extents_func\n      hb_font_funcs_set_font_v_extents_func\n      hb_font_get_h_extents\n      hb_font_get_v_extents\n      hb_font_get_extents_for_direction\n\n  * Buffer message (aka debug):\n      hb_buffer_message_func_t\n      hb_buffer_set_message_func()\n    Actual message protocol to be fleshed out later.\n\n\nOverview of changes leading to 1.1.2\nWednesday, November 26, 2015\n====================================\n\n- Fix badly-broken fallback shaper that affected terminology.\n  https://github.com/harfbuzz/harfbuzz/issues/187\n- Fix y_scaling in Graphite shaper.\n- API changes:\n  * An unset glyph_h_origin() function in font-funcs now (sensibly)\n    implies horizontal origin at 0,0.  Ie, the nil callback returns\n    true instead of false.  As such, implementations that have a\n    glyph_h_origin() that simply returns true, can remove that function\n    with HarfBuzz >= 1.1.2.  This results in a tiny speedup.\n\n\nOverview of changes leading to 1.1.1\nWednesday, November 24, 2015\n====================================\n\n- Build fixes, specially for hb-coretext.\n\n\nOverview of changes leading to 1.1.0\nWednesday, November 18, 2015\n====================================\n\n- Implement 'stch' stretch feature for Syriac Abbreviation Mark.\n  https://github.com/harfbuzz/harfbuzz/issues/141\n- Disable use of decompose_compatibility() callback.\n- Implement \"shaping\" of various Unicode space characters, even\n  if the font does not support them.\n  https://github.com/harfbuzz/harfbuzz/issues/153\n- If font does not support U+2011 NO-BREAK HYPHEN, fallback to\n  U+2010 HYPHEN.\n- Changes resulting from libFuzzer continuous fuzzing:\n  * Reject font tables that need more than 8 edits,\n  * Bound buffer growth during shaping to 32x,\n  * Fix assertions and other issues at OOM / buffer max-growth.\n- Misc fixes and optimizations.\n- API changes:\n  * All fonts created with hb_font_create() now inherit from\n    (ie. have parent) hb_font_get_empty().\n\n\nOverview of changes leading to 1.0.6\nThursday, October 15, 2015\n====================================\n\n- Reduce max nesting level in OT lookups from 8 to 6.\n  Should not affect any real font as far as I know.\n- Fix memory access issue in ot-font.\n- Revert default load-flags of fonts created using hb_ft_font_create()\n  back to FT_LOAD_DEFAULT|FT_LOAD_NO_HINTING.  This was changed in\n  last release (1.0.5), but caused major issues, so revert.\n  https://github.com/harfbuzz/harfbuzz/issues/143\n\n\nOverview of changes leading to 1.0.5\nTuesday, October 13, 2015\n====================================\n\n- Fix multiple memory access bugs discovered using libFuzzer.\n  https://github.com/harfbuzz/harfbuzz/issues/139\n  Everyone should upgrade to this version as soon as possible.\n  We now have continuous fuzzing set up, to avoid issues like\n  these creeping in again.\n- Misc fixes.\n\n- New API:\n  * hb_font_set_parent().\n  * hb_ft_font_[sg]et_load_flags()\n    The default flags for fonts created using hb_ft_font_create()\n    has changed to default to FT_LOAD_DEFAULT now.  Previously it\n    was defaulting to FT_LOAD_DFEAULT|FT_LOAD_NO_HINTING.\n\n- API changes:\n  * Fonts now default to units-per-EM as their scale, instead of 0.\n  * hb_font_create_sub_font() does NOT make parent font immutable\n    anymore.  hb_font_make_immutable() does.\n\n\nOverview of changes leading to 1.0.4\nWednesday, September 30, 2015\n====================================\n\n- Fix minor out-of-bounds read error.\n\n\nOverview of changes leading to 1.0.3\nTuesday, September 1, 2015\n====================================\n\n- Start of user documentation, from Simon Cozens!\n- Implement glyph_extents() for TrueType fonts in hb-ot-font.\n- Improve GPOS cursive attachments with conflicting lookups.\n- More fixes for cluster-level = 1.\n- Uniscribe positioning fix.\n\n\nOverview of changes leading to 1.0.2\nWednesday, August 19, 2015\n====================================\n\n- Fix shaping with cluster-level > 0.\n- Fix Uniscribe backend font-size scaling.\n- Declare dependencies in harfbuzz.pc.\n  FreeType is not declared though, to avoid bugs in pkg-config\n  0.26 with recursive dependencies.\n- Slightly improved debug infrastructure.  More to come later.\n- Misc build fixes.\n\n\nOverview of changes leading to 1.0.1\nMonday, July 27, 2015\n====================================\n\n- Fix out-of-bounds access in USE shaper.\n\n\nOverview of changes leading to 1.0.0\nSunday, July 26, 2015\n====================================\n\n- Implement Universal Shaping Engine:\n  https://www.microsoft.com/typography/OpenTypeDev/USE/intro.htm\n  http://blogs.windows.com/bloggingwindows/2015/02/23/windows-shapes-the-worlds-languages/\n- Bump version to 1.0.0.  The soname was NOT bumped.\n\n\nOverview of changes leading to 0.9.42\nThursday, July 26, 2015\n=====================================\n\n- New API to allow for retrieving finer-grained cluster\n  mappings if the client desires to handle them.  Default\n  behavior is unchanged.\n- Fix cluster merging when removing default-ignorables.\n- Update to Unicode 8.0\n- hb-graphite2 fixes.\n- Misc fixes.\n- Removed HB_NO_MERGE_CLUSTERS hack.\n- New API:\n  hb_buffer_cluster_level_t enum\n  hb_buffer_get_cluster_level()\n  hb_buffer_set_cluster_level()\n  hb-shape / hb-view --cluster-level\n\n\nOverview of changes leading to 0.9.41\nThursday, June 18, 2015\n=====================================\n\n- Fix hb-coretext with trailing whitespace in right-to-left.\n- New API: hb_buffer_reverse_range().\n- Allow implementing atomic ops in config.h.\n- Fix hb_language_t in language bindings.\n- Misc fixes.\n\n\nOverview of changes leading to 0.9.40\nFriday, March 20, 2015\n=====================================\n\n- Another hb-coretext crasher fix.  Ouch!\n- Happy Norouz!\n\n\nOverview of changes leading to 0.9.39\nWednesday, March 4, 2015\n=====================================\n\n- Critical hb-coretext fixes.\n- Optimizations and refactoring; no functional change\n  expected.\n- Misc build fixes.\n\n\nOverview of changes leading to 0.9.38\nFriday, January 23, 2015\n=====================================\n\n- Fix minor out-of-bounds access in Indic shaper.\n- Change New Tai Lue shaping engine from South-East Asian to default,\n  reflecting change in Unicode encoding model.\n- Add hb-shape --font-size.  Can take up to two numbers for separate\n  x / y size.\n- Fix CoreText and FreeType scale issues with negative scales.\n- Reject blobs larger than 2GB.  This might break some icu-le-hb clients\n  that need security fixes.  See:\n  http://www.icu-project.org/trac/ticket/11450\n- Avoid accessing font tables during face destruction, in casce rogue\n  clients released face data already.\n- Fix up gobject-introspection a bit.  Python bindings kinda working.\n  See README.python.\n- Misc fixes.\n- API additions:\n  hb_ft_face_create_referenced()\n  hb_ft_font_create_referenced()\n\n\nOverview of changes leading to 0.9.37\nWednesday, December 17, 2014\n=====================================\n\n- Fix out-of-bounds access in Context lookup format 3.\n- Indic: Allow ZWJ/ZWNJ before syllable modifiers.\n\n\nOverview of changes leading to 0.9.36\nThursday, November 20, 2014\n=====================================\n\n- First time that three months went by without a release since\n  0.9.2 was released on August 10, 2012!\n- Fix performance bug in hb_ot_collect_glyphs():\n  https://bugzilla.mozilla.org/show_bug.cgi?id=1090869\n- Add basic vertical-text support to hb-ot-font.\n- Misc build fixes.\n\n\nOverview of changes leading to 0.9.35\nSaturday, August 13, 2014\n=====================================\n\n- Fix major shape-plan caching bug when more than one shaper were\n  provided to hb_shape_full() (as exercised by XeTeX).\n  http://www.mail-archive.com/debian-bugs-dist@lists.debian.org/msg1246370.html\n- Fix Arabic fallback shaping regression.  This was broken in 0.9.32.\n- Major hb-coretext fixes.  That backend is complete now, including\n  respecing buffer direction and language, down to vertical writing.\n- Build fixes for Windows CE.  Should build fine now.\n- Misc fixes:\n  Use atexit() only if it's safe to call from shared library\n  https://bugs.freedesktop.org/show_bug.cgi?id=82246\n  Mandaic had errors in its Unicode Joining_Type\n  https://bugs.freedesktop.org/show_bug.cgi?id=82306\n- API changes:\n\n  * hb_buffer_clear_contents() does not reset buffer flags now.\n\n    After 763e5466c0a03a7c27020e1e2598e488612529a7, one doesn't\n    need to set flags for different pieces of text.  The flags now\n    are something the client sets up once, depending on how it\n    actually uses the buffer.  As such, don't clear it in\n    clear_contents().\n\n    I don't expect any changes to be needed to any existing client.\n\n\nOverview of changes leading to 0.9.34\nSaturday, August 2, 2014\n=====================================\n\n- hb_feature_from_string() now accepts CSS font-feature-settings format.\n- As a result, hb-shape / hb-view --features also accept CSS-style strings.\n  Eg, \"'liga' off\" is accepted now.\n- Add old-spec Myanmar shaper:\n  https://bugs.freedesktop.org/show_bug.cgi?id=81775\n- Don't apply 'calt' in Hangul shaper.\n- Fix mark advance zeroing for Hebrew shaper:\n  https://bugs.freedesktop.org/show_bug.cgi?id=76767\n- Implement Windows-1256 custom Arabic shaping.  Only built on Windows,\n  and requires help from get_glyph().  Used by Firefox.\n  https://bugzilla.mozilla.org/show_bug.cgi?id=1045139\n- Disable 'liga' in vertical text.\n- Build fixes.\n- API changes:\n\n  * Make HB_BUFFER_FLAG_BOT/EOT easier to use.\n\n    Previously, we expected users to provide BOT/EOT flags when the\n    text *segment* was at paragraph boundaries.  This meant that for\n    clients that provide full paragraph to HarfBuzz (eg. Pango), they\n    had code like this:\n\n      hb_buffer_set_flags (hb_buffer,\n                           (item_offset == 0 ? HB_BUFFER_FLAG_BOT : 0) |\n                           (item_offset + item_length == paragraph_length ?\n                            HB_BUFFER_FLAG_EOT : 0));\n\n      hb_buffer_add_utf8 (hb_buffer,\n                          paragraph_text, paragraph_length,\n                          item_offset, item_length);\n\n    After this change such clients can simply say:\n\n      hb_buffer_set_flags (hb_buffer,\n                           HB_BUFFER_FLAG_BOT | HB_BUFFER_FLAG_EOT);\n\n      hb_buffer_add_utf8 (hb_buffer,\n                          paragraph_text, paragraph_length,\n                          item_offset, item_length);\n\n    Ie, HarfBuzz itself checks whether the segment is at the beginning/end\n    of the paragraph.  Clients that only pass item-at-a-time to HarfBuzz\n    continue not setting any flags whatsoever.\n\n    Another way to put it is: if there's pre-context text in the buffer,\n    HarfBuzz ignores the BOT flag.  If there's post-context, it ignores\n    EOT flag.\n\n\nOverview of changes leading to 0.9.33\nTuesday, July 22, 2014\n=====================================\n\n- Turn off ARabic 'cswh' feature that was accidentally turned on.\n- Add HB_TAG_MAX_SIGNED.\n- Make hb_face_make_immutable() really make face immutable!\n- Windows build fixes.\n\n\nOverview of changes leading to 0.9.32\nThursday, July 17, 2014\n=====================================\n\n- Apply Arabic shaping features in spec order exactly.\n- Another fix for Mongolian free variation selectors.\n- For non-Arabic scripts in Arabic shaper apply 'rlig' and 'calt'\n  together.\n- Minor adjustment to U+FFFD logic.\n- Fix hb-coretext build.\n\n\nOverview of changes leading to 0.9.31\nWednesday, July 16, 2014\n=====================================\n\n- Only accept valid UTF-8/16/32; we missed many cases before.\n- Better shaping of invalid UTF-8/16/32.  Falls back to\n  U+FFFD REPLACEMENT CHARACTER now.\n- With all changes in this release, the buffer will contain fully\n  valid Unicode after hb_buffer_add_utf8/16/32 no matter how\n  broken the input is.  This can be overridden though.  See below.\n- Fix Mongolian Variation Selectors for fonts without GDEF.\n- Fix minor invalid buffer access.\n- Accept zh-Hant and zh-Hans language tags.  hb_ot_tag_to_language()\n  now uses these instead of private tags.\n- Build fixes.\n- New API:\n  * hb_buffer_add_codepoints().  This does what hb_buffer_add_utf32()\n    used to do, ie. no validity check on the input at all.  add_utf32\n    now replaces invalid Unicode codepoints with the replacement\n    character (see below).\n  * hb_buffer_set_replacement_codepoint()\n  * hb_buffer_get_replacement_codepoint()\n    Previously, in hb_buffer_add_utf8 and hb_buffer_add_utf16, when\n    we detected broken input, we replaced that with (hb_codepoint_t)-1.\n    This has changed to use U+FFFD now, but can be changed using these\n    new API.\n\n\nOverview of changes leading to 0.9.30\nWednesday, July 9, 2014\n=====================================\n\n- Update to Unicode 7.0.0:\n  * New scripts Manichaean and Psalter Pahlavi are shaped using\n    Arabic shaper.\n  * All the other new scripts to through the generic shaper for\n    now.\n- Minor Indic improvements.\n- Fix graphite2 backend cluster mapping [crasher!]\n- API changes:\n  * New HB_SCRIPT_* values for Unicode 7.0 scripts.\n  * New function hb_ot_layout_language_get_required_feature().\n- Build fixes.\n\n\nOverview of changes leading to 0.9.29\nThursday, May 29, 2014\n=====================================\n\n- Implement cmap in hb-ot-font.h.  No variation-selectors yet.\n- Myanmar: Allow MedialYa+Asat.\n- Various Indic fixes:\n  * Support most characters in Extended Devanagary and Vedic\n    Unicode blocks.\n  * Allow digits and a some punctuation as consonant placeholders.\n- Build fixes.\n\n\nOverview of changes leading to 0.9.28\nMonday, April 28, 2014\n=====================================\n\n- Unbreak old-spec Indic shaping. (bug 76705)\n- Fix shaping of U+17DD and U+0FC6.\n- Add HB_NO_MERGE_CLUSTERS build option.  NOT to be enabled by default\n  for shipping libraries.  It's an option for further experimentation\n  right now.  When we are sure how to do it properly, we will add\n  public run-time API for the functionality.\n- Build fixes.\n\n\nOverview of changes leading to 0.9.27\nTuesday, March 18, 2014\n=====================================\n\n- Don't use \"register\" storage class specifier\n- Wrap definition of free_langs() with HAVE_ATEXIT\n- Add coretext_aat shaper and hb_coretext_face_create() constructor\n- If HAVE_ICU_BUILTIN is defined, use hb-icu Unicode callbacks\n- Add Myanmar test case from OpenType Myanmar spec\n- Only do fallback Hebrew composition if no GPOS 'mark' available\n- Allow bootstrapping without gtk-doc\n- Use AM_MISSING_PROG for ragel and git\n- Typo in ucdn's Makefile.am\n- Improve MemoryBarrier() implementation\n\n\nOverview of changes leading to 0.9.26\nThursday, January 30, 2014\n=====================================\n\n- Misc fixes.\n- Fix application of 'rtlm' feature.\n- Automatically apply frac/numr/dnom around U+2044 FRACTION SLASH.\n- New header: hb-ot-shape.h\n- Uniscribe: fix scratch-buffer accounting.\n- Reorder Tai Tham SAKOT to after tone-marks.\n- Add Hangul shaper.\n- New files:\n  hb-ot-shape-complex-hangul.cc\n  hb-ot-shape-complex-hebrew.cc\n  hb-ot-shape-complex-tibetan.cc\n- Disable 'cswh' feature in Arabic shaper.\n- Coretext: better handle surrogate pairs.\n- Add HB_TAG_MAX and _HB_SCRIPT_MAX_VALUE.\n\n\nOverview of changes leading to 0.9.25\nWednesday, December 4, 2013\n=====================================\n\n- Myanmar shaper improvements.\n- Avoid font fallback in CoreText backend.\n- Additional OpenType language tag mappiongs.\n- More aggressive shape-plan caching.\n- Build with / require automake 1.13.\n- Build with libtool 2.4.2.418 alpha to support ppc64le.\n\n\nOverview of changes leading to 0.9.24\nTuesday, November 13, 2013\n=====================================\n\n- Misc compiler warning fixes with clang.\n- No functional changes.\n\n\nOverview of changes leading to 0.9.23\nMonday, October 28, 2013\n=====================================\n\n- \"Udupi HarfBuzz Hackfest\", Paris, October 14..18 2013.\n- Fix (Chain)Context recursion with non-monotone lookup positions.\n- Misc Indic bug fixes.\n- New Javanese / Buginese shaping, similar to Windows 8.1.\n\n\nOverview of changes leading to 0.9.22\nThursday, October 3, 2013\n=====================================\n\n- Fix use-after-end-of-scope in hb_language_from_string().\n- Fix hiding of default_ignorables if font doesn't have space glyph.\n- Protect against out-of-range lookup indices.\n\n- API Changes:\n\n  * Added hb_ot_layout_table_get_lookup_count()\n\n\nOverview of changes leading to 0.9.21\nMonday, September 16, 2013\n=====================================\n\n- Rename gobject-introspection library name from harfbuzz to HarfBuzz.\n- Remove (long disabled) hb-old and hb-icu-le test shapers.\n- Misc gtk-doc and gobject-introspection annotations.\n- Misc fixes.\n- API changes:\n\n  * Add HB_SET_VALUE_INVALID\n\nOverview of changes leading to 0.9.20\nThursday, August 29, 2013\n=====================================\n\nGeneral:\n- Misc substitute_closure() fixes.\n- Build fixes.\n\nDocumentation:\n- gtk-doc boilerplate integrated.  Docs are built now, but\n  contain no contents.  By next release hopefully we have\n  some content in.  Enable using --enable-gtk-doc.\n\nGObject and Introspection:\n- Added harfbuzz-gobject library (hb-gobject.h) that has type\n  bindings for all HarfBuzz objects and enums.  Enable using\n  --with-gobject.\n- Added gobject-introspection boilerplate.  Nothing useful\n  right now.  Work in progress.  Gets enabled automatically if\n  --with-gobject is used.  Override with --disable-introspection.\n\nOpenType shaper:\n- Apply 'mark' in Myanmar shaper.\n- Don't apply 'dlig' by default.\n\nUniscribe shaper:\n- Support user features.\n- Fix loading of fonts that are also installed on the system.\n- Fix shaping of Arabic Presentation Forms.\n- Fix build with wide chars.\n\nCoreText shaper:\n- Support user features.\n\nSource changes:\n- hb_face_t code moved to hb-face.h / hb-face.cc.\n- Added hb-deprecated.h.\n\nAPI changes:\n- Added HB_DISABLE_DEPRECATED.\n- Deprecated HB_SCRIPT_CANADIAN_ABORIGINAL; replaced by\n  HB_SCRIPT_CANADIAN_SYLLABICS.\n- Deprecated HB_BUFFER_FLAGS_DEFAULT; replaced by\n  HB_BUFFER_FLAG_DEFAULT.\n- Deprecated HB_BUFFER_SERIALIZE_FLAGS_DEFAULT; replaced by\n  HB_BUFFER_SERIALIZE_FLAG_DEFAULT.\n\n\nOverview of changes leading to 0.9.19\nTuesday, July 16, 2013\n=====================================\n\n- Build fixes.\n- Better handling of multiple variation selectors in a row.\n- Pass on variation selector to GSUB if not consumed by cmap.\n- Fix undefined memory access.\n- Add Javanese config to Indic shaper.\n- Misc bug fixes.\n\nOverview of changes leading to 0.9.18\nTuesday, May 28, 2013\n=====================================\n\nNew build system:\n\n- All unneeded code is all disabled by default,\n\n- Uniscribe and CoreText shapers can be enabled with their --with options,\n\n- icu_le and old shapers cannot be enabled for now,\n\n- glib, freetype, and cairo will be detected automatically.\n  They can be force on/off'ed with their --with options,\n\n- icu and graphite2 are default off, can be enabled with their --with\n  options,\n\nMoreover, ICU support is now build into a separate library:\nlibharfbuzz-icu.so, and a new harfbuzz-icu.pc is shipped for it.\nDistros can enable ICU now without every application on earth\ngetting linked to via libharfbuzz.so.\n\nFor distros I recommend that they make sure they are building --with-glib\n--with-freetype --with-cairo, --with-icu, and optionally --with-graphite2;\nAnd package harfbuzz and harfbuzz-icu separately.\n\n\nOverview of changes leading to 0.9.17\nMonday, May 20, 2013\n=====================================\n\n- Build fixes.\n- Fix bug in hb_set_get_min().\n- Fix regression with Arabic mark positioning / width-zeroing.\n\nOverview of changes leading to 0.9.16\nFriday, April 19, 2013\n=====================================\n\n- Major speedup in OpenType lookup processing.  With the Amiri\n  Arabic font, this release is over 3x faster than previous\n  release.  All scripts / languages should see this speedup.\n\n- New --num-iterations option for hb-shape / hb-view; useful for\n  profiling.\n\nOverview of changes leading to 0.9.15\nFriday, April 05, 2013\n=====================================\n\n- Build fixes.\n- Fix crasher in graphite2 shaper.\n- Fix Arabic mark width zeroing regression.\n- Don't compose Hangul jamo into Unicode syllables.\n\n\nOverview of changes leading to 0.9.14\nThursday, March 21, 2013\n=====================================\n\n- Build fixes.\n- Fix time-consuming sanitize with malicious fonts.\n- Implement hb_buffer_deserialize_glyphs() for both json and text.\n- Do not ignore Hangul filler characters.\n- Indic fixes:\n  * Fix Malayalam pre-base reordering interaction with post-forms.\n  * Further adjust ZWJ handling.  Should fix known regressions from\n    0.9.13.\n\n\nOverview of changes leading to 0.9.13\nThursday, February 25, 2013\n=====================================\n\n- Build fixes.\n- Ngapi HarfBuzz Hackfest in London (February 2013):\n  * Fixed all known Indic bugs,\n  * New Win8-style Myanmar shaper,\n  * New South-East Asian shaper for Tai Tham, Cham, and New Tai Lue,\n  * Smartly ignore Default_Ignorable characters (joiners, etc) wheb\n    matching GSUB/GPOS lookups,\n  * Fix 'Phags-Pa U+A872 shaping,\n  * Fix partial disabling of default-on features,\n  * Allow disabling of TrueType kerning.\n- Fix possible crasher with broken fonts with overlapping tables.\n- Removed generated files from git again.  So, one needs ragel to\n  bootstrap from the git tree.\n\nAPI changes:\n- hb_shape() and related APIs now abort if buffer direction is\n  HB_DIRECTION_INVALID.  Previously, hb_shape() was calling\n  hb_buffer_guess_segment_properties() on the buffer before\n  shaping.  The heuristics in that function are fragile.  If the\n  user really wants the old behvaior, they can call that function\n  right before calling hb_shape() to get the old behavior.\n- hb_blob_create_sub_blob() always creates sub-blob with\n  HB_MEMORY_MODE_READONLY.  See comments for the reason.\n\n\nOverview of changes leading to 0.9.12\nThursday, January 18, 2013\n=====================================\n\n- Build fixes for Sun compiler.\n- Minor bug fix.\n\nOverview of changes leading to 0.9.11\nThursday, January 10, 2013\n=====================================\n\n- Build fixes.\n- Fix GPOS mark attachment with null Anchor offsets.\n- [Indic] Fix old-spec reordering of viramas if sequence ends in one.\n- Fix multi-threaded shaper data creation crash.\n- Add atomic ops for Solaris.\n\nAPI changes:\n- Rename hb_buffer_clear() to hb_buffer_clear_contents().\n\n\nOverview of changes leading to 0.9.10\nThursday, January 3, 2013\n=====================================\n\n- [Indic] Fixed rendering of Malayalam dot-reph\n- Updated OT language tags.\n- Updated graphite2 backend.\n- Improved hb_ot_layout_get_size_params() logic.\n- Improve hb-shape/hb-view help output.\n- Fixed hb-set.h implementation to not crash.\n- Fixed various issues with hb_ot_layout_collect_lookups().\n- Various build fixes.\n\nNew API:\n\nhb_graphite2_face_get_gr_face()\nhb_graphite2_font_get_gr_font()\nhb_coretext_face_get_cg_font()\n\nModified API:\n\nhb_ot_layout_get_size_params()\n\n\nOverview of changes leading to 0.9.9\nWednesday, December 5, 2012\n====================================\n\n- Fix build on Windows.\n- Minor improvements.\n\n\nOverview of changes leading to 0.9.8\nTuesday, December 4, 2012\n====================================\n\n\n- Actually implement hb_shape_plan_get_shaper ().\n- Make UCDB data tables const.\n- Lots of internal refactoring in OTLayout tables.\n- Flesh out hb_ot_layout_lookup_collect_glyphs().\n\nNew API:\n\nhb_ot_layout_collect_lookups()\nhb_ot_layout_get_size_params()\n\n\nOverview of changes leading to 0.9.7\nSunday, November 21, 2012\n====================================\n\n\nHarfBuzz \"All-You-Can-Eat-Sushi\" (aka Vancouver) Hackfest and follow-on fixes.\n\n- Fix Arabic contextual joining using pre-context text.\n- Fix Sinhala \"split matra\" mess.\n- Fix Khmer shaping with broken fonts.\n- Implement Thai \"PUA\" shaping for old fonts.\n- Do NOT route Kharoshthi script through the Indic shaper.\n- Disable fallback positioning for Indic and Thai shapers.\n- Misc fixes.\n\n\nhb-shape / hb-view changes:\n\n- Add --text-before and --text-after\n- Add --bot / --eot / --preserve-default-ignorables\n- hb-shape --output-format=json\n\n\nNew API:\n\nhb_buffer_clear()\n\nhb_buffer_flags_t\n\nHB_BUFFER_FLAGS_DEFAULT\nHB_BUFFER_FLAG_BOT\nHB_BUFFER_FLAG_EOT\nHB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES\n\nhb_buffer_set_flags()\nhb_buffer_get_flags()\n\nHB_BUFFER_SERIALIZE_FLAGS\nhb_buffer_serialize_glyphs()\nhb_buffer_deserialize_glyphs()\nhb_buffer_serialize_list_formats()\n\nhb_set_add_range()\nhb_set_del_range()\nhb_set_get_population()\nhb_set_next_range()\n\nhb_face_[sg]et_glyph_count()\n\nhb_segment_properties_t\nHB_SEGMENT_PROPERTIES_DEFAULT\nhb_segment_properties_equal()\nhb_segment_properties_hash()\n\nhb_buffer_set_segment_properties()\nhb_buffer_get_segment_properties()\n\nhb_ot_layout_glyph_class_t\nhb_ot_layout_get_glyph_class()\nhb_ot_layout_get_glyphs_in_class()\n\nhb_shape_plan_t\nhb_shape_plan_create()\nhb_shape_plan_create_cached()\nhb_shape_plan_get_empty()\nhb_shape_plan_reference()\nhb_shape_plan_destroy()\nhb_shape_plan_set_user_data()\nhb_shape_plan_get_user_data()\nhb_shape_plan_execute()\nhb_shape_plan_get_shaper()\n\nhb_ot_shape_plan_collect_lookups()\n\n\nAPI changes:\n\n- Remove \"mask\" parameter from hb_buffer_add().\n- Rename hb_ot_layout_would_substitute_lookup() and hb_ot_layout_substitute_closure_lookup().\n- hb-set.h API const correction.\n- Renamed hb_set_min/max() to hb_set_get_min/max().\n- Rename hb_ot_layout_feature_get_lookup_indexes() to hb_ot_layout_feature_get_lookups().\n- Rename hb_buffer_guess_properties() to hb_buffer_guess_segment_properties().\n\n\n\nOverview of changes leading to 0.9.6\nSunday, November 13, 2012\n====================================\n\n- Don't clear pre-context text if no new context is provided.\n- Fix ReverseChainingSubstLookup, which was totally borked.\n- Adjust output format of hb-shape a bit.\n- Include config.h.in in-tree.  Makes it easier for alternate build systems.\n- Fix hb_buffer_set_length(buffer, 0) invalid memory allocation.\n- Use ICU LayoutEngine's C API instead of C++.  Avoids much headache.\n- Drop glyphs for all of Unicode Default_Ignorable characters.\n- Misc build fixes.\n\nArabic shaper:\n- Enable 'dlig' and 'mset' features in Arabic shaper.\n- Implement 'Phags-pa shaping, improve Mongolian.\n\nIndic shaper:\n- Decompose Sinhala split matras the way old HarfBuzz / Pango did.\n- Initial support for Consonant Medials.\n- Start adding new-style Myanmar shaping.\n- Make reph and 'pref' logic introspect the font.\n- Route Meetei-Mayek through the Indic shaper.\n- Don't apply 'liga' in Indic shaper.\n- Improve Malayalam pre-base reordering Ra interaction with Chillus.\n\n\n\nOverview of changes leading to 0.9.5\nSunday, October 14, 2012\n====================================\n\n- Synthetic-GSUB Arabic fallback shaping.\n\n- Misc Indic improvements.\n\n- Add build system support for pthread.\n\n- Imported UCDN for in-tree Unicode callbacks implementation.\n\n- Context-aware Arabic joining.\n\n- Misc other fixes.\n\n- New API:\n\n  hb_feature_to/from-string()\n  hb_buffer_[sg]et_content_type()\n\n\n\nOverview of changes leading to 0.9.4\nTuesday, Sep 03, 2012\n====================================\n\n- Indic improvements with old-spec Malayalam.\n\n- Better fallback glyph positioning, specially with Thai / Lao marks.\n\n- Implement dotted-circle insertion.\n\n- Better Arabic fallback shaping / ligation.\n\n- Added ICU LayoutEngine backend for testing.  Call it by the 'icu_le' name.\n\n- Misc fixes.\n\n\n\nOverview of changes leading to 0.9.3\nFriday, Aug 18, 2012\n====================================\n\n- Fixed fallback mark positioning for left-to-right text.\n\n- Improve mark positioning for the remaining combining classes.\n\n- Unbreak Thai and fallback Arabic shaping.\n\n- Port Arabic shaper to shape-plan caching.\n\n- Use new ICU normalizer functions.\n\n\n\nOverview of changes leading to 0.9.2\nFriday, Aug 10, 2012\n====================================\n\n- Over a thousand commits!  This is the first major release of HarfBuzz.\n\n- HarfBuzz is feature-complete now!  It should be in par, or better, than\n  both Pango's shapers and old HarfBuzz / Qt shapers.\n\n- New Indic shaper, supporting main Indic scripts, Sinhala, and Khmer.\n\n- Improved Arabic shaper, with fallback Arabic shaping, supporting Arabic,\n  Sinhala, N'ko, Mongolian, and Mandaic.\n\n- New Thai / Lao shaper.\n\n- Tibetan / Hangul support in the generic shaper.\n\n- Synthetic GDEF support for fonts without a GDEF table.\n\n- Fallback mark positioning for fonts without a GPOS table.\n\n- Unicode normalization shaping heuristic during glyph mapping.\n\n- New experimental Graphite2 backend.\n\n- New Uniscribe backend (primarily for testing).\n\n- New CoreText backend (primarily for testing).\n\n- Major optimization and speedup.\n\n- Test suites and testing infrastructure (work in progress).\n\n- Greatly improved hb-view cmdline tool.\n\n- hb-shape cmdline tool.\n\n- Unicode 6.1 support.\n\nSummary of API changes:\n\no Changed API:\n\n  - Users are expected to only include main header files now (ie. hb.h,\n    hb-glib.h, hb-ft.h, ...)\n\n  - All struct tag names had their initial underscore removed.\n    Ie. \"struct _hb_buffer_t\" is \"struct hb_buffer_t\" now.\n\n  - All set_user_data() functions now take a \"replace\" boolean parameter.\n\n  - hb_buffer_create() takes zero arguments now.\n    Use hb_buffer_pre_allocate() to pre-allocate.\n\n  - hb_buffer_add_utf*() now accept -1 for length parameters,\n    meaning \"nul-terminated\".\n\n  - hb_direction_t enum values changed.\n\n  - All *_from_string() APIs now take a length parameter to allow for\n    non-nul-terminated strings. A -1 length means \"nul-terminated\".\n\n  - Typedef for hb_language_t changed.\n\n  - hb_get_table_func_t renamed to hb_reference_table_func_t.\n\n  - hb_ot_layout_table_choose_script()\n\n  - Various renames in hb-unicode.h.\n\no New API:\n\n  - hb_buffer_guess_properties()\n    Automatically called by hb_shape().\n\n  - hb_buffer_normalize_glyphs()\n\n  - hb_tag_from_string()\n\n  - hb-coretext.h\n\n  - hb-uniscribe.h\n\n  - hb_face_reference_blob()\n  - hb_face_[sg]et_index()\n  - hb_face_set_upem()\n\n  - hb_font_get_glyph_name_func_t\n    hb_font_get_glyph_from_name_func_t\n    hb_font_funcs_set_glyph_name_func()\n    hb_font_funcs_set_glyph_from_name_func()\n    hb_font_get_glyph_name()\n    hb_font_get_glyph_from_name()\n    hb_font_glyph_to_string()\n    hb_font_glyph_from_string()\n\n  - hb_font_set_funcs_data()\n\n  - hb_ft_font_set_funcs()\n  - hb_ft_font_get_face()\n\n  - hb-gobject.h (work in progress)\n\n  - hb_ot_shape_glyphs_closure()\n    hb_ot_layout_substitute_closure_lookup()\n\n  - hb-set.h\n\n  - hb_shape_full()\n\n  - hb_unicode_combining_class_t\n\n  - hb_unicode_compose_func_t\n    hb_unicode_decompose_func_t\n    hb_unicode_decompose_compatibility_func_t\n    hb_unicode_funcs_set_compose_func()\n    hb_unicode_funcs_set_decompose_func()\n    hb_unicode_funcs_set_decompose_compatibility_func()\n    hb_unicode_compose()\n    hb_unicode_decompose()\n    hb_unicode_decompose_compatibility()\n\no Removed API:\n\n  - hb_ft_get_font_funcs()\n\n  - hb_ot_layout_substitute_start()\n    hb_ot_layout_substitute_lookup()\n    hb_ot_layout_substitute_finish()\n    hb_ot_layout_position_start()\n    hb_ot_layout_position_lookup()\n    hb_ot_layout_position_finish()\n\n\n\nOverview of changes leading to 0.6.0\nFriday, May 27, 2011\n====================================\n\n- Vertical text support in GPOS\n- Almost all API entries have unit tests now, under test/\n- All thread-safety issues are fixed\n\nSummary of API changes follows.\n\n\n* Simple Types API:\n\n  o New API:\n    HB_LANGUAGE_INVALID\n    hb_language_get_default()\n    hb_direction_to_string()\n    hb_direction_from_string()\n    hb_script_get_horizontal_direction()\n    HB_UNTAG()\n\n  o Renamed API:\n    hb_category_t renamed to hb_unicode_general_category_t\n\n  o Changed API:\n    hb_language_t is a typed pointers now\n\n  o Removed API:\n    HB_TAG_STR()\n\n\n* Use ISO 15924 tags for hb_script_t:\n\n  o New API:\n    hb_script_from_iso15924_tag()\n    hb_script_to_iso15924_tag()\n    hb_script_from_string()\n\n  o Changed API:\n    HB_SCRIPT_* enum members changed value.\n\n\n* Buffer API streamlined:\n\n  o New API:\n    hb_buffer_reset()\n    hb_buffer_set_length()\n    hb_buffer_allocation_successful()\n\n  o Renamed API:\n    hb_buffer_ensure() renamed to hb_buffer_pre_allocate()\n    hb_buffer_add_glyph() renamed to hb_buffer_add()\n\n  o Removed API:\n    hb_buffer_clear()\n    hb_buffer_clear_positions()\n\n  o Changed API:\n    hb_buffer_get_glyph_infos() takes an out length parameter now\n    hb_buffer_get_glyph_positions() takes an out length parameter now\n\n\n* Blob API streamlined:\n\n  o New API:\n    hb_blob_get_data()\n    hb_blob_get_data_writable()\n\n  o Renamed API:\n    hb_blob_create_empty() renamed to hb_blob_get_empty()\n\n  o Removed API:\n    hb_blob_lock()\n    hb_blob_unlock()\n    hb_blob_is_writable()\n    hb_blob_try_writable()\n\n  o Changed API:\n    hb_blob_create() takes user_data before destroy now\n\n\n* Unicode functions API:\n\n  o Unicode function vectors can subclass other unicode function vectors now.\n    Unimplemented callbacks in the subclass automatically chainup to the parent.\n\n  o All hb_unicode_funcs_t callbacks take a user_data now.  Their setters\n    take a user_data and its respective destroy callback.\n\n  o New API:\n    hb_unicode_funcs_get_empty()\n    hb_unicode_funcs_get_default()\n    hb_unicode_funcs_get_parent()\n\n  o Changed API:\n    hb_unicode_funcs_create() now takes a parent_funcs.\n\n  o Removed func getter functions:\n    hb_unicode_funcs_get_mirroring_func()\n    hb_unicode_funcs_get_general_category_func()\n    hb_unicode_funcs_get_script_func()\n    hb_unicode_funcs_get_combining_class_func()\n    hb_unicode_funcs_get_eastasian_width_func()\n\n\n* Face API:\n\n  o Renamed API:\n    hb_face_get_table() renamed to hb_face_reference_table()\n    hb_face_create_for_data() renamed to hb_face_create()\n\n  o Changed API:\n    hb_face_create_for_tables() takes user_data before destroy now\n    hb_face_reference_table() returns empty blob instead of NULL\n    hb_get_table_func_t accepts the face as first parameter now\n\n* Font API:\n\n  o Fonts can subclass other fonts now.  Unimplemented callbacks in the\n    subclass automatically chainup to the parent.  When chaining up,\n    scale is adjusted if the parent font has a different scale.\n\n  o All hb_font_funcs_t callbacks take a user_data now.  Their setters\n    take a user_data and its respective destroy callback.\n\n  o New API:\n    hb_font_get_parent()\n    hb_font_funcs_get_empty()\n    hb_font_create_sub_font()\n\n  o Removed API:\n    hb_font_funcs_copy()\n    hb_font_unset_funcs()\n\n  o Removed func getter functions:\n    hb_font_funcs_get_glyph_func()\n    hb_font_funcs_get_glyph_advance_func()\n    hb_font_funcs_get_glyph_extents_func()\n    hb_font_funcs_get_contour_point_func()\n    hb_font_funcs_get_kerning_func()\n\n  o Changed API:\n    hb_font_create() takes a face and references it now\n    hb_font_set_funcs() takes user_data before destroy now\n    hb_font_set_scale() accepts signed integers now\n    hb_font_get_contour_point_func_t now takes glyph first, then point_index\n    hb_font_get_glyph_func_t returns a success boolean now\n\n\n* Changed object model:\n\n  o All object types have a _get_empty() now:\n    hb_blob_get_empty()\n    hb_buffer_get_empty()\n    hb_face_get_empty()\n    hb_font_get_empty()\n    hb_font_funcs_get_empty()\n    hb_unicode_funcs_get_empty()\n\n  o Added _set_user_data() and _get_user_data() for all object types:\n    hb_blob_get_user_data()\n    hb_blob_set_user_data()\n    hb_buffer_get_user_data()\n    hb_buffer_set_user_data()\n    hb_face_get_user_data()\n    hb_face_set_user_data()\n    hb_font_funcs_get_user_data()\n    hb_font_funcs_set_user_data()\n    hb_font_get_user_data()\n    hb_font_set_user_data()\n    hb_unicode_funcs_get_user_data()\n    hb_unicode_funcs_set_user_data()\n\n  o Removed the _get_reference_count() from all object types:\n    hb_blob_get_reference_count()\n    hb_buffer_get_reference_count()\n    hb_face_get_reference_count()\n    hb_font_funcs_get_reference_count()\n    hb_font_get_reference_count()\n    hb_unicode_funcs_get_reference_count()\n\n  o Added _make_immutable() and _is_immutable() for all object types except for buffer:\n    hb_blob_make_immutable()\n    hb_blob_is_immutable()\n    hb_face_make_immutable()\n    hb_face_is_immutable()\n\n\n* Changed API for vertical text support\n\n  o The following callbacks where removed:\n    hb_font_get_glyph_advance_func_t\n    hb_font_get_kerning_func_t\n\n  o The following new callbacks added instead:\n    hb_font_get_glyph_h_advance_func_t\n    hb_font_get_glyph_v_advance_func_t\n    hb_font_get_glyph_h_origin_func_t\n    hb_font_get_glyph_v_origin_func_t\n    hb_font_get_glyph_h_kerning_func_t\n    hb_font_get_glyph_v_kerning_func_t\n\n  o The following API removed as such:\n    hb_font_funcs_set_glyph_advance_func()\n    hb_font_funcs_set_kerning_func()\n    hb_font_get_glyph_advance()\n    hb_font_get_kerning()\n\n  o New API added instead:\n    hb_font_funcs_set_glyph_h_advance_func()\n    hb_font_funcs_set_glyph_v_advance_func()\n    hb_font_funcs_set_glyph_h_origin_func()\n    hb_font_funcs_set_glyph_v_origin_func()\n    hb_font_funcs_set_glyph_h_kerning_func()\n    hb_font_funcs_set_glyph_v_kerning_func()\n    hb_font_get_glyph_h_advance()\n    hb_font_get_glyph_v_advance()\n    hb_font_get_glyph_h_origin()\n    hb_font_get_glyph_v_origin()\n    hb_font_get_glyph_h_kerning()\n    hb_font_get_glyph_v_kerning()\n\n  o The following higher-leve API added for convenience:\n    hb_font_get_glyph_advance_for_direction()\n    hb_font_get_glyph_origin_for_direction()\n    hb_font_add_glyph_origin_for_direction()\n    hb_font_subtract_glyph_origin_for_direction()\n    hb_font_get_glyph_kerning_for_direction()\n    hb_font_get_glyph_extents_for_origin()\n    hb_font_get_glyph_contour_point_for_origin()\n\n\n* OpenType Layout API:\n\n  o New API:\n    hb_ot_layout_position_start()\n    hb_ot_layout_substitute_start()\n    hb_ot_layout_substitute_finish()\n\n\n* Glue code:\n\n  o New API:\n    hb_glib_script_to_script()\n    hb_glib_script_from_script()\n    hb_icu_script_to_script()\n    hb_icu_script_from_script()\n\n\n* Version API added:\n\n  o New API:\n    HB_VERSION_MAJOR\n    HB_VERSION_MINOR\n    HB_VERSION_MICRO\n    HB_VERSION_STRING\n    HB_VERSION_CHECK()\n    hb_version()\n    hb_version_string()\n    hb_version_check()\n\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.92578125,
          "content": "[![Linux CI Status](https://github.com/harfbuzz/harfbuzz/workflows/linux-ci/badge.svg)](https://github.com/harfbuzz/harfbuzz/workflows/linux-ci/badge.svg)\n[![CircleCI Build Status](https://circleci.com/gh/harfbuzz/harfbuzz/tree/main.svg?style=svg)](https://circleci.com/gh/harfbuzz/harfbuzz/tree/main)\n[![OSS-Fuzz Status](https://oss-fuzz-build-logs.storage.googleapis.com/badges/harfbuzz.svg)](https://oss-fuzz-build-logs.storage.googleapis.com/index.html)\n[![Coverity Scan Build Status](https://scan.coverity.com/projects/15166/badge.svg)](https://scan.coverity.com/projects/harfbuzz)\n[![Codacy Badge](https://app.codacy.com/project/badge/Grade/89c872f5ce1c42af802602bfcd15d90a)](https://app.codacy.com/gh/harfbuzz/harfbuzz/dashboard?utm_source=gh&utm_medium=referral&utm_content=&utm_campaign=Badge_grade)\n[![Codecov Code Coverage](https://codecov.io/gh/harfbuzz/harfbuzz/branch/main/graph/badge.svg)](https://codecov.io/gh/harfbuzz/harfbuzz)\n[![Packaging status](https://repology.org/badge/tiny-repos/harfbuzz.svg)](https://repology.org/project/harfbuzz/versions)\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/harfbuzz/harfbuzz/badge)](https://securityscorecards.dev/viewer/?uri=github.com/harfbuzz/harfbuzz)\n\n\n# HarfBuzz\n\nHarfBuzz is a text shaping engine. It primarily supports [OpenType][1], but also\n[Apple Advanced Typography][2]. HarfBuzz is used in Android, Chrome,\nChromeOS, Firefox, GNOME, GTK+, KDE, Qt, LibreOffice, OpenJDK, XeTeX,\nPlayStation, Microsoft Edge, Adobe Photoshop, Illustrator, InDesign,\nGodot Engine, Unreal Engine, and other places.\n\n[![xkcd-derived image](xkcd.png)](https://xkcd.com/2347/)\n\nFor bug reports, mailing list, and other information please visit:\n\n  http://harfbuzz.org/\n\nFor license information, see [COPYING](COPYING).\n\n## Documentation\n\nFor user manual as well as API documentation, check: https://harfbuzz.github.io\n\n## Download\n\nFor tarball releases of HarfBuzz, look [here][3]. At the same place you\nwill also find Win32/Win64 binary bundles that include `libharfbuzz` DLL,\n`hb-view.exe`, `hb-shape.exe`, and all dependencies.\n\nThe canonical source tree is available on [github][4].\n\nThe API that comes with `hb.h` will not change incompatibly. Other, peripheral,\nheaders are more likely to go through minor modifications, but again, we do our\nbest to never change API in an incompatible way. We will never break the ABI.\n\nIf you are not sure whether Pango or HarfBuzz is right for you, read [Pango vs\nHarfBuzz][5].\n\n## Development\n\nFor build information, see [BUILD.md](BUILD.md).\n\nFor custom configurations, see [CONFIG.md](CONFIG.md).\n\nFor testing and profiling, see [TESTING.md](TESTING.md).\n\nTo get a better idea of where HarfBuzz stands in the text rendering stack you\nmay want to read [State of Text Rendering 2024][6].\nHere are a few presentation slides about HarfBuzz at the\nInternationalization and Unicode Conference over the years:\n\n*   November 2014, [Unicode, OpenType, and HarfBuzz: Closing the Circle][7],\n*   October 2012, [HarfBuzz, The Free and Open Text Shaping Engine][8],\n*   October 2009, [HarfBuzz: the Free and Open Shaping Engine][9].\n\nBoth development and user support discussion around HarfBuzz happens on the\n[github][4].\n\nTo report bugs or submit patches please use [github][4] issues and\npull-requests.\n\nFor a comparison of old vs new HarfBuzz memory consumption see [this][10].\n\n<!--See past and upcoming [HarfBuzz Hackfests](https://freedesktop.org/wiki/Software/HarfBuzz/Hackfests/)!-->\n\n## Name\n\nHarfBuzz (حرف‌باز) is the literal Persian translation of “[OpenType][1]”,\ntransliterated using the Latin script. It also means \"talkative\" or\n\"glib\" (also a nod to the GNOME project where HarfBuzz originates from).\n\n> Background: Originally there was this font format called TrueType. People and\n> companies started calling their type engines all things ending in Type:\n> FreeType, CoolType, ClearType, etc. And then came OpenType, which is the\n> successor of TrueType. So, for my OpenType implementation, I decided to stick\n> with the concept but use the Persian translation. Which is fitting given that\n> Persian is written in the Arabic script, and OpenType is an extension of\n> TrueType that adds support for complex script rendering, and HarfBuzz is an\n> implementation of OpenType complex text shaping.\n\n<details>\n  <summary>Packaging status of HarfBuzz</summary>\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/harfbuzz.svg?header=harfbuzz)](https://repology.org/project/harfbuzz/versions)\n\n</details>\n\n[1]: https://docs.microsoft.com/en-us/typography/opentype/spec/\n[2]: https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6AATIntro.html\n[3]: https://github.com/harfbuzz/harfbuzz/releases\n[4]: https://github.com/harfbuzz/harfbuzz\n[5]: http://mces.blogspot.com/2009/11/pango-vs-harfbuzz.html\n[6]: http://behdad.org/text2024\n[7]: https://goo.gl/FSIQuC\n[8]: https://goo.gl/2wSRu\n[9]: http://behdad.org/download/Presentations/slippy/harfbuzz_slides.pdf\n[10]: https://goo.gl/woyty\n"
        },
        {
          "name": "README.python.md",
          "type": "blob",
          "size": 1.140625,
          "content": "To enable HarfBuzz bindings for Python among other languages, make sure\nyou have latest version of gobject-introspection available.  On Ubuntu,\nyou can install that this way:\n\n```bash\nsudo apt-get install libgirepository1.0-dev\n```\n\nAnd then run `meson setup` and make sure that `Introspection` is reported\nenabled in output.\n\nIf you are building with Visual Studio, it is recommended that Visual Studio\n2019 or later is used for this build, for the best build experience.\n\nCompile and install.\n\nMake sure you have the installation lib dir in `LD_LIBRARY_PATH` (or the\ninstallation DLL dir in `PATH` for Windows systems), as needed\nfor the linker to find the library.\n\nThen make sure you also have `GI_TYPELIB_PATH` pointing to the resulting\n`$prefix/lib/girepository-*` directory.\n\nMake sure you have pygobject installed.  Then check that the following\nimport works in your Python interpreter:\n\n```python\nfrom gi.repository import HarfBuzz\n```\n\nIf it does, you are ready to call HarfBuzz from Python!  Congratulations.\nSee [`src/sample.py`](src/sample.py).\n\nThe Python API will change.  Let us know on the mailing list if you are\nusing it, and send lots of feedback.\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 1.6689453125,
          "content": "# HarfBuzz release walk-through checklist:\n\n- [ ] Open gitk and review changes since last release.\n\n\t- [ ] Print all public API changes:\n        `git diff $(git describe | sed 's/-.*//').. src/*.h`\n\n    - [ ]  Document them in NEWS.\n        All API and API semantic changes should be clearly marked as API additions, API changes, or API deletions.\n\n    - [ ] Document deprecations.\n        Ensure all new API / deprecations are in listed correctly in docs/harfbuzz-sections.txt.\n        If release added new API, add entry for new API index at the end of docs/harfbuzz-docs.xml.\n\n     If there's a backward-incompatible API change (including deletions for API used anywhere), that's a release blocker.\n     Do NOT release.\n\n- [ ] Based on severity of changes, decide whether it's a minor or micro release number bump.\n\n- [ ] Search for 'XSince: REPLACEME' on the repository and replace it with the chosen version for the release, e.g. 'Since: 1.4.7'.\n\n- [ ] Make sure you have correct date and new version at the top of NEWS file.\n\n- [ ] Bump version in line 3 of meson.build.\n\n- [ ] Do a `meson test -Cbuild` so it both checks the tests and updates hb-version.h (use `git diff` to see if is really updated).\n\n- [ ] Commit NEWS, meson.build, and src/hb-version.h, as well as any REPLACEME changes you made.\n        The commit message is simply the release number, e. g. \"1.4.7\"\n\n- [ ] Do a `meson dist -Cbuild` that runs the tests against the latest committed changes.\n   If doesn't pass, something fishy is going on, reset the repo and start over.\n\n- [ ] Tag the release and sign it: e.g. `git tag -s 1.4.7 -m 1.4.7`.\n\t  Enter your GPG password.\n\n- [ ] Push the commit and tag out: `git push --follow-tags`.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.841796875,
          "content": "# Security Policy\n\nIf you have discovered a security vulnerability in this project, please report it\nprivately. **Do not disclose it as a public issue.** This gives me time to work with you\nto fix the issue before public exposure, reducing the chance that the exploit will be\nused before a patch is released.\n\nYou may submit the report in the following ways:\n\n- send an email to behdad@behdad.org and harfbuzz-admin@googlegroups.com; and/or\n- send me a [private vulnerability report](https://github.com/harfbuzz/harfbuzz/security/advisories/new)\n\nPlease provide the following information in your report:\n\n- A description of the vulnerability and its impact\n- How to reproduce the issue\n\nThis project is mostly maintained by two developers, working on a reasonable effort\nbasis. As such, we ask that you give us 90 days to work on a fix before public\ndisclosure.\n"
        },
        {
          "name": "TESTING.md",
          "type": "blob",
          "size": 0.7265625,
          "content": "## Build and Test\n\n```shell\nmeson build\nninja -Cbuild\nmeson test -Cbuild\n```\n\n### Debug with GDB\n\n```shell\nmeson test -Cbuild --gdb testname\n```\n\n## Build and Run\n\nDepending on what area you are working in change or add `HB_DEBUG_<whatever>`.\nValues defined in `hb-debug.hh`.\n\n```shell\nCPPFLAGS='-DHB_DEBUG_SUBSET=100' meson setup build --reconfigure\nmeson test -C build\n```\n\n### Run tests with asan\n\n```shell\nmeson setup build -Db_sanitize=address --reconfigure\nmeson compile -C build\nmeson test -C build\n```\n\n### Enable Debug Logging\n\n```shell\nCPPFLAGS=-DHB_DEBUG_SUBSET=100 meson build --reconfigure\nninja -C build\n```\n\n## Test with the Fuzzer\n\nFOr fuzzing, see `test/fuzzing/README.md`.\n\n## Profiling\n\nFor profiling, see `perf/README.md`.\n\n"
        },
        {
          "name": "THANKS",
          "type": "blob",
          "size": 0.1259765625,
          "content": "Bradley Grainger\nKenichi Ishibashi\nIvan Kuckir <https://photopea.com/>\nRyan Lortie\nJeff Muizelaar\nsuzuki toshiya\nPhilip Withnall\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "harfbuzz.doap",
          "type": "blob",
          "size": 0.806640625,
          "content": "<Project xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\"\n         xmlns:foaf=\"http://xmlns.com/foaf/0.1/\"\n         xmlns=\"http://usefulinc.com/ns/doap#\">\n\n  <name xml:lang=\"en\">harfbuzz</name>\n  <shortdesc xml:lang=\"en\">Text shaping library</shortdesc>\n\n  <homepage\n  rdf:resource=\"https://github.com/harfbuzz/harfbuzz\" />\n  <mailing-list\n  rdf:resource=\"https://github.com/harfbuzz/harfbuzz/discussions\" />\n  <download-page\n  rdf:resource=\"https://github.com/harfbuzz/harfbuzz/releases\" />\n  <bug-database\n  rdf:resource=\"https://github.com/harfbuzz/harfbuzz/issues\" />\n\n  <maintainer>\n    <foaf:Person>\n      <foaf:name>Behdad Esfahbod</foaf:name>\n      <foaf:mbox rdf:resource=\"mailto:harfbuzz@behdad.org\" />\n    </foaf:Person>\n  </maintainer>\n</Project>\n"
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 18.0703125,
          "content": "project('harfbuzz', 'c', 'cpp',\n  meson_version: '>= 0.55.0',\n  version: '10.1.0',\n  default_options: [\n    'cpp_eh=none',          # Just to support msvc, we are passing -fno-exceptions also anyway\n    # 'cpp_rtti=false',     # Do NOT enable, wraps inherit it and ICU needs RTTI\n    'cpp_std=c++11',\n    'wrap_mode=nofallback', # Use --wrap-mode=default to revert, https://github.com/harfbuzz/harfbuzz/pull/2548\n  ],\n)\n\nglib_min_version = '>= 2.30.0'\ncairo_min_version = '>= 1.10.0'\nchafa_min_version = '>= 1.6.0'\nicu_min_version = '>= 49.0'\ngraphite2_min_version = '>= 1.2.0'\n\nfreetype_min_version_actual = '>= 2.4.2'\nfreetype_min_version = '>= 12.0.6'    # Corresponds to `freetype_min_version_actual`\n\nhb_version_arr = meson.project_version().split('.')\nhb_version_major = hb_version_arr[0].to_int()\nhb_version_minor = hb_version_arr[1].to_int()\nhb_version_micro = hb_version_arr[2].to_int()\n\n# libtool versioning\nhb_version_int = 60000 + hb_version_major*100 + hb_version_minor*10 + hb_version_micro\nhb_libtool_version_info = '@0@:0:@0@'.format(hb_version_int)\n\npkgmod = import('pkgconfig')\ncpp = meson.get_compiler('cpp')\nnull_dep = dependency('', required: false)\n\n# Only perform these checks if cpp_std is c++11 as setting -std directly\n# produces a warning from meson.\nif get_option('cpp_std') == 'c++11'\n  # Enforce C++14 requirement for MSVC STL\n  if cpp.get_id() == 'clang' and cpp.get_define('_MSC_FULL_VER') != ''\n    add_project_arguments('-std=c++14', language: 'cpp')\n  elif cpp.get_id() == 'clang-cl'\n    # Clang-cl produces a warning when using -std=c++14, but not when using /std:c++14\n    add_project_arguments('/std:c++14', language : 'cpp')\n  endif\nendif\n\nif cpp.get_argument_syntax() == 'msvc'\n  # Ignore several spurious warnings for things HarfBuzz does very commonly.\n  # If a warning is completely useless and spammy, use '/wdXXXX' to suppress it\n  # If a warning is harmless but hard to fix, use '/woXXXX' so it's shown once\n  # NOTE: Only add warnings here if you are sure they're spurious\n  msvc_args = [\n    '/wd4244', # lossy type conversion (e.g. double -> int)\n    '/bigobj', # hb-subset.cc -- compile error C1128: number of sections exceeded object file format limit\n    cpp.get_supported_arguments(['/utf-8']), # set the input encoding to utf-8\n  ]\n  add_project_arguments(msvc_args, language: ['c', 'cpp'])\n  # Disable SAFESEH with MSVC for libs that use external deps that are built with MinGW\n  # noseh_link_args = ['/SAFESEH:NO']\nendif\n\nadd_project_link_arguments(cpp.get_supported_link_arguments([\n  '-Bsymbolic-functions'\n]), language: 'c')\n\nadd_project_arguments(cpp.get_supported_arguments([\n  '-fno-exceptions',\n  '-fno-rtti',\n  '-fno-threadsafe-statics',\n  '-fvisibility-inlines-hidden',\n]), language: 'cpp')\n\nif host_machine.cpu_family() == 'arm' and cpp.alignment('struct { char c; }') != 1\n  if cpp.has_argument('-mstructure-size-boundary=8')\n    add_project_arguments('-mstructure-size-boundary=8', language: 'cpp')\n  endif\nendif\n\nif host_machine.system() == 'windows'\n  add_project_arguments(cpp.get_supported_arguments([\n    '-Wa,-mbig-obj'\n  ]), language : 'cpp')\nendif\n\ncheck_headers = [\n  ['unistd.h'],\n  ['sys/mman.h'],\n  ['stdbool.h'],\n  ['xlocale.h'],\n]\n\ncheck_funcs = [\n  ['atexit', {'prefix': '#include <stdlib.h>'}],\n  ['mprotect', {'prefix': '#include <sys/mman.h>'}],\n  ['sysconf', {'prefix': '#include <unistd.h>'}],\n  ['getpagesize', {'prefix': '#include <unistd.h>'}],\n  ['mmap', {'prefix': '#include <sys/mman.h>'}],\n  ['isatty', {'prefix': '#include <unistd.h>'}],\n  ['uselocale', {'prefix': '#include <locale.h>'}],\n  ['newlocale', {'prefix': '#include <locale.h>'}],\n  ['sincosf', {'prefix': '#define _GNU_SOURCE\\n#include <math.h>'}],\n]\n\nm_dep = cpp.find_library('m', required: false)\n\nif meson.version().version_compare('>=0.60.0')\n  # Sadly, FreeType's versioning schemes are different between pkg-config and CMake\n  # pkg-config: freetype2, cmake: Freetype\n  freetype_dep = dependency('freetype2',\n                            version: freetype_min_version,\n                            method: 'pkg-config',\n                            required: false,\n                            allow_fallback: false)\n  if not freetype_dep.found()\n    freetype_dep = dependency('FreeType',\n                              version: freetype_min_version_actual,\n                              method: 'cmake',\n                              required: get_option('freetype'),\n                              default_options: ['harfbuzz=disabled'],\n                              allow_fallback: true)\n  endif\nelse\n  # painful hack to handle multiple dependencies but also respect options\n  freetype_opt = get_option('freetype')\n  # we want to handle enabled manually after fallbacks, but also handle disabled normally\n  if freetype_opt.enabled()\n    freetype_opt = false\n  endif\n  # try pkg-config name\n  freetype_dep = dependency('freetype2', version: freetype_min_version, method: 'pkg-config', required: freetype_opt)\n  # when disabled, leave it not-found\n  if not freetype_dep.found() and not get_option('freetype').disabled()\n    # Try cmake name\n    freetype_dep = dependency('Freetype', version: freetype_min_version_actual, method: 'cmake', required: false)\n    # Subproject fallback, `allow_fallback: true` means the fallback will be\n    # tried even if the freetype option is set to `auto`.\n    if not freetype_dep.found()\n      freetype_dep = dependency('freetype2',\n                                version: freetype_min_version,\n                                method: 'pkg-config',\n                                required: get_option('freetype'),\n                                default_options: ['harfbuzz=disabled'],\n                                allow_fallback: true)\n    endif\n  endif\nendif\n\nglib_dep = dependency('glib-2.0', version: glib_min_version, required: get_option('glib'))\ngobject_dep = dependency('gobject-2.0', version: glib_min_version, required: get_option('gobject'))\ngraphite2_dep = dependency('graphite2', version: graphite2_min_version, required: get_option('graphite2'))\ngraphite_dep = dependency('graphite2', version: graphite2_min_version, required: get_option('graphite'))\nwasm_dep = cpp.find_library('iwasm', required: get_option('wasm'))\n# How to check whether iwasm was built, and hence requires, LLVM?\n#llvm_dep = cpp.find_library('LLVM-15', required: get_option('wasm'))\n\nif meson.version().version_compare('>=0.60.0')\n  # pkg-config: icu-uc, cmake: ICU but with components\n  icu_dep = dependency('icu-uc', 'ICU',\n                            version: icu_min_version,\n                            components: 'uc',\n                            required: get_option('icu'),\n                            allow_fallback: true)\nelse\n  # painful hack to handle multiple dependencies but also respect options\n  icu_opt = get_option('icu')\n  # we want to handle enabled manually after fallbacks, but also handle disabled normally\n  if icu_opt.enabled()\n    icu_opt = false\n  endif\n  # try pkg-config name\n  icu_dep = dependency('icu-uc', version: icu_min_version, method: 'pkg-config', required: icu_opt)\n  # when disabled, leave it not-found\n  if not icu_dep.found() and not get_option('icu').disabled()\n    # Try cmake name\n    icu_dep = dependency('ICU', version: icu_min_version, method: 'cmake', components: 'uc', required: false)\n    # Try again with subproject fallback. `allow_fallback: true` means the\n    # fallback will be tried even if the icu option is set to `auto`, but\n    # we cannot pass this option until Meson 0.59.0, because no wrap file\n    # is checked into git.\n    if not icu_dep.found()\n      icu_dep = dependency('icu-uc',\n                           version: icu_min_version,\n                           method: 'pkg-config',\n                           required: get_option('icu'))\n    endif\n  endif\nendif\n\nif icu_dep.found() and icu_dep.version().version_compare('>=75.1') and (get_option('cpp_std') == 'c++11' or get_option('cpp_std') == 'c++14')\n  cpp17_arg = cpp.get_argument_syntax() == 'msvc' ? '/std:c++17' : '-std=c++17'\n  add_project_arguments(cpp17_arg, language: 'cpp')\nendif\n\nif icu_dep.found() and icu_dep.type_name() == 'pkgconfig'\n  icu_defs = icu_dep.get_variable(pkgconfig: 'DEFS', default_value: '').split()\n  if icu_defs.length() > 0\n    add_project_arguments(icu_defs, language: ['c', 'cpp'])\n  endif\nendif\n\ncairo_dep = null_dep\ncairo_ft_dep = null_dep\nif not get_option('cairo').disabled()\n  cairo_dep = dependency('cairo', version: cairo_min_version, required: false)\n  cairo_ft_dep = dependency('cairo-ft', version: cairo_min_version, required: false)\n\n  if (not cairo_dep.found() and\n      cpp.get_argument_syntax() == 'msvc' and\n      cpp.has_header('cairo.h'))\n    cairo_dep = cpp.find_library('cairo', required: false)\n    if cairo_dep.found() and cpp.has_function('cairo_ft_font_face_create_for_ft_face',\n                                              prefix: '#include <cairo-ft.h>',\n                                              dependencies: cairo_dep)\n      cairo_ft_dep = cairo_dep\n    endif\n  endif\n\n  if not cairo_dep.found()\n    # Note that we don't have harfbuzz -> cairo -> freetype2 -> harfbuzz fallback\n    # dependency cycle here because we have configured freetype2 above with\n    # harfbuzz support disabled, so when cairo will lookup freetype2 dependency\n    # it will be forced to use that one.\n    cairo_dep = dependency('cairo', version: cairo_min_version, required: get_option('cairo'))\n    cairo_ft_required = get_option('cairo').enabled() and get_option('freetype').enabled()\n    cairo_ft_dep = dependency('cairo-ft', version: cairo_min_version, required: cairo_ft_required)\n  endif\nendif\n\nchafa_dep = dependency('chafa', version: chafa_min_version, required: get_option('chafa'))\n\nconf = configuration_data()\nincconfig = include_directories('.')\n\nadd_project_arguments('-DHAVE_CONFIG_H', language: ['c', 'cpp'])\n\nwarn_cflags = [\n  '-Wno-non-virtual-dtor',\n]\n\ncpp_args = cpp.get_supported_arguments(warn_cflags)\n\nif glib_dep.found()\n  conf.set('HAVE_GLIB', 1)\nendif\n\nif gobject_dep.found()\n  conf.set('HAVE_GOBJECT', 1)\nendif\n\nif cairo_dep.found()\n  conf.set('HAVE_CAIRO', 1)\n  check_cairo_funcs = [\n    ['cairo_user_font_face_set_render_color_glyph_func', {'deps': cairo_dep}],\n    ['cairo_font_options_get_custom_palette_color', {'deps': cairo_dep}],\n    ['cairo_user_scaled_font_get_foreground_source', {'deps': cairo_dep}],\n  ]\n\n  if cairo_dep.type_name() == 'internal'\n    foreach func: check_cairo_funcs\n      name = func[0]\n      conf.set('HAVE_@0@'.format(name.to_upper()), 1)\n    endforeach\n  else\n    check_funcs += check_cairo_funcs\n  endif\nendif\n\nif cairo_ft_dep.found()\n  conf.set('HAVE_CAIRO_FT', 1)\nendif\n\nif chafa_dep.found()\n  conf.set('HAVE_CHAFA', 1)\nendif\n\nif wasm_dep.found()\n  conf.set('HAVE_WASM', 1)\n  conf.set('HB_WASM_MODULE_DIR', '\"'+get_option('prefix')+'/'+get_option('libdir')+'/harfbuzz/wasm\"')\nendif\n\nif graphite2_dep.found() or graphite_dep.found()\n  conf.set('HAVE_GRAPHITE2', 1)\nendif\n\nif icu_dep.found()\n  conf.set('HAVE_ICU', 1)\nendif\n\nif get_option('icu_builtin')\n  conf.set('HAVE_ICU_BUILTIN', 1)\nendif\n\nif get_option('experimental_api')\n  conf.set('HB_EXPERIMENTAL_API', 1)\nendif\n\nif freetype_dep.found()\n  conf.set('HAVE_FREETYPE', 1)\n  check_freetype_funcs = [\n    ['FT_Get_Var_Blend_Coordinates', {'deps': freetype_dep}],\n    ['FT_Set_Var_Blend_Coordinates', {'deps': freetype_dep}],\n    ['FT_Done_MM_Var', {'deps': freetype_dep}],\n    ['FT_Get_Transform', {'deps': freetype_dep}],\n  ]\n\n  if freetype_dep.type_name() == 'internal'\n    foreach func: check_freetype_funcs\n      name = func[0]\n      conf.set('HAVE_@0@'.format(name.to_upper()), 1)\n    endforeach\n  else\n    check_funcs += check_freetype_funcs\n  endif\nendif\n\ngdi_uniscribe_deps = []\n# GDI (Uniscribe) (Windows)\nif host_machine.system() == 'windows' and not get_option('gdi').disabled()\n  if (get_option('directwrite').enabled() and\n      not (cpp.has_header('usp10.h') and cpp.has_header('windows.h')))\n    error('GDI/Uniscribe was enabled explicitly, but required headers are missing.')\n  endif\n\n  gdi_deps_found = true\n  foreach usplib : ['usp10', 'gdi32', 'rpcrt4']\n    dep = cpp.find_library(usplib, required: get_option('gdi'))\n    gdi_deps_found = gdi_deps_found and dep.found()\n    gdi_uniscribe_deps += dep\n  endforeach\n\n  if gdi_deps_found\n    conf.set('HAVE_UNISCRIBE', 1)\n    conf.set('HAVE_GDI', 1)\n  endif\nendif\n\n# DirectWrite (Windows)\nif host_machine.system() == 'windows' and not get_option('directwrite').disabled()\n  if get_option('directwrite').enabled() and not cpp.has_header('dwrite_1.h')\n    error('DirectWrite was enabled explicitly, but required header is missing.')\n  endif\n\n  conf.set('HAVE_DIRECTWRITE', 1)\nendif\n\n# CoreText (macOS)\ncoretext_deps = []\nif host_machine.system() == 'darwin' and not get_option('coretext').disabled()\n  app_services_dep = dependency('appleframeworks', modules: ['ApplicationServices'], required: false)\n  if cpp.has_type('CTFontRef', prefix: '#include <ApplicationServices/ApplicationServices.h>', dependencies: app_services_dep)\n    coretext_deps += [app_services_dep]\n    conf.set('HAVE_CORETEXT', 1)\n  # On iOS CoreText and CoreGraphics are stand-alone frameworks\n  # Check for a different symbol to avoid getting cached result\n  else\n    coretext_dep = dependency('appleframeworks', modules: ['CoreText'], required: false)\n    coregraphics_dep = dependency('appleframeworks', modules: ['CoreGraphics'], required: false)\n    corefoundation_dep = dependency('appleframeworks', modules: ['CoreFoundation'], required: false)\n    if cpp.has_type('CTRunRef', prefix: '#include <CoreText/CoreText.h>', dependencies: [coretext_dep, coregraphics_dep, corefoundation_dep])\n      coretext_deps += [coretext_dep, coregraphics_dep, corefoundation_dep]\n      conf.set('HAVE_CORETEXT', 1)\n    elif get_option('coretext').enabled()\n      error('CoreText was enabled explicitly, but required headers or frameworks are missing.')\n    endif\n  endif\nendif\n\n# threads\nthread_dep = null_dep\nif host_machine.system() != 'windows'\n  thread_dep = dependency('threads', required: false)\n\n  if thread_dep.found()\n    conf.set('HAVE_PTHREAD', 1)\n  endif\nendif\n\nconf.set_quoted('PACKAGE_NAME', 'HarfBuzz')\nconf.set_quoted('PACKAGE_VERSION', meson.project_version())\n\nforeach check : check_headers\n  name = check[0]\n\n  if cpp.has_header(name)\n    conf.set('HAVE_@0@'.format(name.to_upper().underscorify()), 1)\n  endif\nendforeach\n\nharfbuzz_extra_deps = []\nforeach check : check_funcs\n  name = check[0]\n  opts = check.get(1, {})\n  link_withs = opts.get('link_with', [])\n  check_deps = opts.get('deps', [])\n  check_prefix = opts.get('prefix', '')\n  extra_deps = []\n  found = true\n\n  # First try without linking\n  found = cpp.has_function(name, prefix: check_prefix, dependencies: check_deps)\n\n  if not found and link_withs.length() > 0\n    found = true\n\n    foreach link_with : link_withs\n      dep = cpp.find_library(link_with, required: false)\n      if dep.found()\n        extra_deps += dep\n      else\n        found = false\n      endif\n    endforeach\n\n    if found\n      found = cpp.has_function(name, prefix: check_prefix, dependencies: check_deps + extra_deps)\n    endif\n  endif\n\n  if found\n    harfbuzz_extra_deps += extra_deps\n    conf.set('HAVE_@0@'.format(name.to_upper()), 1)\n  endif\nendforeach\n\n# CMake support (package install dir)\n\n# Equivalent to configure_package_config_file(INSTALL_DESTINATION ...), see\n# https://cmake.org/cmake/help/latest/module/CMakePackageConfigHelpers.html#command:configure_package_config_file.\n# In certain unusual packaging layouts such as Nixpkgs, the Harfbuzz package\n# is installed into two Nix store paths, \"out\" and \"dev\", where \"out\" contains\n# libraries only (i.e. lib/libharfbuzz.so) and \"dev\" contains development\n# files, i.e. include and lib/cmake. If CMake package files are installed to\n# \"out\", Nixpkgs will move them to \"dev\", which breaks assumptions about\n# our file paths. Since we need to figure out relative install paths here\n# to make a relocatable package, we do need to know the final path of our\n# CMake files to calculate the correct relative paths.\n# Of course, this still defaults to $libdir/cmake if unset, which works for\n# most packaging layouts.\ncmake_package_install_dir = get_option('cmakepackagedir')\n\nif cmake_package_install_dir == ''\n  cmake_package_install_dir = get_option('libdir') / 'cmake'\nendif\n\nsubdir('src')\n\nif not get_option('utilities').disabled()\n  subdir('util')\nendif\n\nif not get_option('tests').disabled()\n  subdir('test')\nendif\n\nif not get_option('benchmark').disabled()\n  subdir('perf')\nendif\n\nif not get_option('docs').disabled()\n  subdir('docs')\nendif\n\nconfigure_file(output: 'config.h', configuration: conf)\n\nalias_target('lib', libharfbuzz)\nalias_target('libs', libharfbuzz, libharfbuzz_subset)\n\nbuild_summary = {\n  'Directories':\n    {'prefix': get_option('prefix'),\n     'bindir': get_option('bindir'),\n     'libdir': get_option('libdir'),\n     'includedir': get_option('includedir'),\n     'datadir': get_option('datadir'),\n     'cmakepackagedir': cmake_package_install_dir\n    },\n  'Unicode callbacks (you want at least one)':\n    {'Builtin': true,\n     'Glib': conf.get('HAVE_GLIB', 0) == 1,\n     'ICU': conf.get('HAVE_ICU', 0) == 1,\n    },\n  'Font callbacks (the more the merrier)':\n    {'Builtin' : true,\n     'FreeType': conf.get('HAVE_FREETYPE', 0) == 1,\n    },\n  'Dependencies used for command-line utilities':\n    {'Cairo': conf.get('HAVE_CAIRO', 0) == 1,\n     'Chafa': conf.get('HAVE_CHAFA', 0) == 1,\n    },\n  'Additional shapers':\n    {'Graphite2': conf.get('HAVE_GRAPHITE2', 0) == 1,\n     'WebAssembly (experimental)': conf.get('HAVE_WASM', 0) == 1,\n    },\n  'Platform shapers (not normally needed)':\n    {'CoreText': conf.get('HAVE_CORETEXT', 0) == 1,\n     'DirectWrite (experimental)': conf.get('HAVE_DIRECTWRITE', 0) == 1,\n     'GDI/Uniscribe': (conf.get('HAVE_GDI', 0) == 1) and (conf.get('HAVE_UNISCRIBE', 0) == 1),\n    },\n  'Other features':\n    {'Documentation': conf.get('HAVE_GTK_DOC', 0) == 1,\n     'GObject bindings': conf.get('HAVE_GOBJECT', 0) == 1,\n     'Cairo integration': conf.get('HAVE_CAIRO', 0) == 1,\n     'Introspection': conf.get('HAVE_INTROSPECTION', 0) == 1,\n     'Experimental APIs': conf.get('HB_EXPERIMENTAL_API', 0) == 1,\n    },\n  'Testing':\n    {'Tests': get_option('tests').enabled(),\n     'Benchmark': get_option('benchmark').enabled(),\n    },\n}\nforeach section_title, section : build_summary\n  summary(section, bool_yn: true, section: section_title)\nendforeach\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 2.671875,
          "content": "# HarfBuzz feature options\noption('glib', type: 'feature', value: 'auto',\n  description: 'Enable GLib unicode functions')\noption('gobject', type: 'feature', value: 'auto',\n  description: 'Enable GObject bindings')\noption('cairo', type: 'feature', value: 'auto',\n  description: 'Use Cairo graphics library')\noption('chafa', type: 'feature', value: 'auto',\n  description: 'Use Chafa terminal graphics library')\noption('icu', type: 'feature', value: 'auto',\n  description: 'Enable ICU library unicode functions')\noption('graphite', type: 'feature', value: 'disabled',\n  description: 'Deprecated use graphite2 option instead')\noption('graphite2', type: 'feature', value: 'disabled',\n  description: 'Enable Graphite2 complementary shaper')\noption('freetype', type: 'feature', value: 'auto',\n  description: 'Enable freetype interop helpers')\noption('gdi', type: 'feature', value: 'disabled',\n  description: 'Enable GDI helpers and Uniscribe shaper backend (Windows only)')\noption('directwrite', type: 'feature', value: 'disabled',\n  description: 'Enable DirectWrite shaper backend on Windows (experimental)')\noption('coretext', type: 'feature', value: 'disabled',\n  description: 'Enable CoreText shaper backend on macOS')\noption('wasm', type: 'feature', value: 'disabled',\n  description: 'Enable WebAssembly shaper backend (experimental)')\n\n# Common feature options\noption('tests', type: 'feature', value: 'enabled', yield: true,\n  description: 'Enable or disable unit tests')\noption('introspection', type: 'feature', value: 'auto', yield: true,\n  description: 'Generate gobject-introspection bindings (.gir/.typelib files)')\noption('docs', type: 'feature', value: 'auto', yield: true,\n  description: 'Generate documentation with gtk-doc')\noption('doc_tests', type: 'boolean', value: false,\n  description: 'Run gtkdoc-check tests')\noption('utilities', type: 'feature', value: 'enabled', yield: true,\n  description: 'Build harfbuzz utils')\n\noption('benchmark', type: 'feature', value: 'disabled',\n  description: 'Enable benchmark tests')\noption('icu_builtin', type: 'boolean', value: false,\n  description: 'Don\\'t separate ICU support as harfbuzz-icu module')\noption('with_libstdcxx', type: 'boolean', value: false,\n  description: 'Allow linking with libstdc++')\noption('experimental_api', type: 'boolean', value: false,\n  description: 'Enable experimental APIs')\noption('ragel_subproject', type: 'boolean', value: false,\n  description: 'Build Ragel subproject if no suitable version is found')\noption('fuzzer_ldflags', type: 'string',\n  description: 'Extra LDFLAGS used during linking of fuzzing binaries')\n\n# Install directory options\noption('cmakepackagedir', type: 'string',\n  description: 'CMake package configuration install directory')\n"
        },
        {
          "name": "perf",
          "type": "tree",
          "content": null
        },
        {
          "name": "replace-enum-strings.cmake",
          "type": "blob",
          "size": 0.34375,
          "content": "# CMake script to replace items\r\n# in sources generated by glib-mkenums\r\n\r\nFILE(READ ${ENUM_INPUT_SRC} enum_in)\r\n\r\nSTRING(REPLACE\r\n  \"_t_get_type\"\r\n  \"_get_type\"\r\n  enum_out_tmp\r\n  \"${enum_in}\"\r\n  )\r\n\r\nSTRING(REPLACE\r\n  \"_T (\"\r\n  \" (\"\r\n  enum_out\r\n  \"${enum_out_tmp}\"\r\n  )\r\n\r\nFILE(WRITE ${ENUM_OUTPUT_SRC} \"${enum_out}\")\r\nFILE(REMOVE ${ENUM_INPUT_SRC})"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "subprojects",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        },
        {
          "name": "xkcd.png",
          "type": "blob",
          "size": 51.5146484375,
          "content": null
        }
      ]
    }
  ]
}