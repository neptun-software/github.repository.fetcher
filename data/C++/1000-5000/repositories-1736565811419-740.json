{
  "metadata": {
    "timestamp": 1736565811419,
    "page": 740,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "simongog/sdsl-lite",
      "stars": 2225,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.01171875,
          "content": "Make.helper\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2255859375,
          "content": "[submodule \"external/googletest\"]\n\tpath = external/googletest\n\turl = https://github.com/google/googletest.git\n[submodule \"external/libdivsufsort\"]\n\tpath = external/libdivsufsort\n\turl = https://github.com/simongog/libdivsufsort.git\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 4.0498046875,
          "content": "# Travis-CI build script for sdsl-lite\n\nlanguage: cpp\n\nsudo: false\n\nmatrix:\n  include:\n    - env: MYCC=\"gcc-4.9\" MYCXX=\"g++-4.9\" STDLIB=libstdc++\n      os: linux\n      addons: &gcc49\n        apt:\n          sources:\n            - kalakris-cmake\n            - ubuntu-toolchain-r-test\n          packages:\n            - cmake\n            - g++-4.9\n\n    - env: MYCC=\"gcc-5\" MYCXX=\"g++-5\" STDLIB=libstdc++\n      os: linux\n      addons: &gcc5\n        apt:\n          sources:\n            - kalakris-cmake\n            - ubuntu-toolchain-r-test\n          packages:\n            - cmake\n            - g++-5\n\n#    - env: MYCC=\"clang-3.7\" MYCXX=\"clang++-3.7\" STDLIB=libc++\n#      os: linux\n#      addons: &clang37\n#        apt:\n#          sources:\n#            - kalakris-cmake\n#            - ubuntu-toolchain-r-test\n#            - llvm-toolchain-precise-3.7\n#          packages:\n#            - cmake\n#            - clang-3.7\n\n    - env: MYCC=\"clang\" MYCXX=\"clang++\" STDLIB=libc++\n      os: osx\n\ninstall:\n  ############################################################################\n  # All the dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/\n  ############################################################################\n  - DEPS_DIR=\"${TRAVIS_BUILD_DIR}/deps\"\n  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}\n  ############################################################################\n  # Install a recent CMake (for LLVM)\n  ############################################################################\n  - |\n    if [[ \"${TRAVIS_OS_NAME}\" == \"linux\" ]]; then\n      CMAKE_URL=\"http://www.cmake.org/files/v3.3/cmake-3.3.2-Linux-x86_64.tar.gz\"\n      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake\n      export PATH=${DEPS_DIR}/cmake/bin:${PATH}\n    fi\n  ############################################################################\n  # Install libc++ and libc++abi (on Linux only; Xcode uses libc++ by default)\n  ############################################################################\n  - |\n    if [[ \"${TRAVIS_OS_NAME}\" == \"linux\" && \"${STDLIB}\" != \"libstdc++\" ]]; then\n      if   [[ \"${COMPILER}\" == \"clang++-3.5\" ]]; then LLVM_VERSION=\"3.5.2\"\n      elif [[ \"${COMPILER}\" == \"clang++-3.6\" ]]; then LLVM_VERSION=\"3.6.2\";\n      elif [[ \"${COMPILER}\" == \"clang++-3.7\" ]]; then LLVM_VERSION=\"3.7.0\";\n      else                                            LLVM_VERSION=\"trunk\"; fi\n      if [[ \"${LLVM_VERSION}\" != \"trunk\" ]]; then\n        LLVM_URL=\"http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz\"\n        LIBCXX_URL=\"http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz\"\n        LIBCXXABI_URL=\"http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz\"\n        TAR_FLAGS=\"-xJ\"\n      else\n        LLVM_URL=\"https://github.com/llvm-mirror/llvm/archive/master.tar.gz\"\n        LIBCXX_URL=\"https://github.com/llvm-mirror/libcxx/archive/master.tar.gz\"\n        LIBCXXABI_URL=\"https://github.com/llvm-mirror/libcxxabi/archive/master.tar.gz\"\n        TAR_FLAGS=\"-xz\"\n      fi\n      mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi\n      travis_retry wget --quiet -O - ${LLVM_URL} | tar --strip-components=1 ${TAR_FLAGS} -C llvm\n      travis_retry wget --quiet -O - ${LIBCXX_URL} | tar --strip-components=1 ${TAR_FLAGS} -C llvm/projects/libcxx\n      travis_retry wget --quiet -O - ${LIBCXXABI_URL} | tar --strip-components=1 ${TAR_FLAGS} -C llvm/projects/libcxxabi\n      (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_DIR}/llvm/install -DCMAKE_CXX_COMPILER=clang++)\n      (cd llvm/build/projects/libcxx && make install -j2)\n      (cd llvm/build/projects/libcxxabi && make install -j2)\n      export CXXFLAGS=\"-isystem ${DEPS_DIR}/llvm/install/include/c++/v1\"\n      export LDFLAGS=\"-L ${DEPS_DIR}/llvm/install/lib -l c++ -l c++abi\"\n      export LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:${DEPS_DIR}/llvm/install/lib\"\n    fi\n\nbefore_script:\n  - export CXX=$MYCXX\n  - export CC=$MYCC\n  - $CXX --version\n  - cmake --version\n\nscript:\n  - cd ${TRAVIS_BUILD_DIR}\n  - ./install.sh ..\n  - cd tutorial && make all\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 6.2783203125,
          "content": "cmake_minimum_required(VERSION 2.8.11)\nset(CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules\")\ninclude(AppendCompilerFlags)\n\n## Project information ##\nproject(sdsl CXX C)\nset(PROJECT_VENDOR \"Simon Gog\")\nset(PROJECT_CONTACT \"simon.gog@gmail.com\")\nset(PROJECT_URL \"https://github.com/simongog/sdsl-lite\")\nset(PROJECT_DESCRIPTION \"SDSL: Succinct Data Structure Library\")\nset(CMAKE_BUILD_TYPE \"Release\")\n\nfile(READ \"${CMAKE_CURRENT_SOURCE_DIR}/VERSION\" PROJECT_VERSION_FULL)\nstring(REGEX REPLACE \"[\\n\\r]\" \"\" PROJECT_VERSION_FULL \"${PROJECT_VERSION_FULL}\")\nstring(REGEX REPLACE \"^([0-9]+)\\\\.[0-9]+\\\\.[0-9]+$\" \"\\\\1\" PROJECT_VERSION_MAJOR \"${PROJECT_VERSION_FULL}\")\nstring(REGEX REPLACE \"^[0-9]+\\\\.([0-9]+)\\\\.[0-9]+$\" \"\\\\1\" PROJECT_VERSION_MINOR \"${PROJECT_VERSION_FULL}\")\nstring(REGEX REPLACE \"^[0-9]+\\\\.[0-9]+\\\\.([0-9]+)$\" \"\\\\1\" PROJECT_VERSION_PATCH \"${PROJECT_VERSION_FULL}\")\nset(PROJECT_VERSION \"${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}\")\nmath(EXPR LIBRARY_VERSION_MAJOR \"${PROJECT_VERSION_MAJOR}\")\nset(LIBRARY_VERSION_MINOR \"${PROJECT_VERSION_MINOR}\")\nset(LIBRARY_VERSION_PATCH \"${PROJECT_VERSION_PATCH}\")\nset(LIBRARY_VERSION \"${LIBRARY_VERSION_MAJOR}.${LIBRARY_VERSION_MINOR}\")\nset(LIBRARY_VERSION_FULL \"${LIBRARY_VERSION}.${LIBRARY_VERSION_PATCH}\")\n\n\noption(CODE_COVERAGE \"Set ON to add code coverage compile options\" OFF)\noption(GENERATE_DOC \"Set ON to generate doxygen API reference in build/doc directory\" OFF)\n\n# C++11 compiler Check\nif(NOT CMAKE_CXX_COMPILER_VERSION) # work around for cmake versions smaller than 2.8.10\n    execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE CMAKE_CXX_COMPILER_VERSION)\nendif()\nif(CMAKE_CXX_COMPILER MATCHES \".*clang.*\" OR CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n      set(CMAKE_COMPILER_IS_CLANGXX 1)\nendif()\nif(CMAKE_CXX_COMPILER_ID STREQUAL \"Intel\")\n    set(CMAKE_COMPILER_IS_INTEL 1)\nendif()\nif( (CMAKE_COMPILER_IS_GNUCXX AND ${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS 4.7) OR\n    (CMAKE_COMPILER_IS_CLANGXX AND ${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS 3.2))\n  message(FATAL_ERROR \"Your C++ compiler does not support C++11. Please install g++ 4.7 (or greater) or clang 3.2 (or greater)\")\nelse()\n  message(STATUS \"Compiler is recent enough to support C++11.\")\nendif()\n\nif( CMAKE_COMPILER_IS_GNUCXX )\n    append_cxx_compiler_flags(\"-std=c++11 -Wall -Wextra -DNDEBUG\" \"GCC\" CMAKE_CXX_FLAGS)\n    append_cxx_compiler_flags(\"-O3 -ffast-math -funroll-loops\" \"GCC\" CMAKE_CXX_OPT_FLAGS)\n    if ( CODE_COVERAGE )\n        append_cxx_compiler_flags(\"-g -fprofile-arcs -ftest-coverage -lgcov\" \"GCC\" CMAKE_CXX_FLAGS)\n    endif()\n\nelse()\n    if( CMAKE_COMPILER_IS_CLANGXX )\n\t\tappend_cxx_compiler_flags(\"-std=c++11 -DNDEBUG\" \"CLANG\" CMAKE_CXX_FLAGS)\n\t\tappend_cxx_compiler_flags(\"-stdlib=libc++\" \"CLANG\" CMAKE_CXX_FLAGS)\n\t\tappend_cxx_compiler_flags(\"-O3 -ffast-math -funroll-loops -D__extern_always_inline=\\\"extern __always_inline\\\" \" \"CLANG\" CMAKE_CXX_OPT_FLAGS)\n\telse()\n        if( CMAKE_COMPILER_IS_INTEL )\n            append_cxx_compiler_flags(\"-std=c++11 -Wall -Wextra -DNDEBUG\" \"INTEL\" CMAKE_CXX_FLAGS)\n            append_cxx_compiler_flags(\"-O3 -ffast-math -funroll-loops -no-inline-min-size -no-inline-max-size\" \"INTEL\" CMAKE_CXX_OPT_FLAGS)\n        else()\n            append_cxx_compiler_flags(\"/EHsc\" \"MSVC\" CMAKE_CXX_FLAGS)\n            append_cxx_compiler_flags(\"/Od\" \"MSVC\" CMAKE_CXX_FLAGS_DEBUG)\n            append_cxx_compiler_flags(\"/Ox\" \"MSVC\" CMAKE_CXX_FLAGS_RELEASE)\n            set(vars CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)\n            foreach(var ${vars})\n                string(REPLACE \"/MD\" \"-MT\" ${var} \"${${var}}\")\n            endforeach(var)\n\n            add_definitions(\"/DMSVC_COMPILER\")\n        endif()\n\tendif()\nendif()\n\ntry_compile(MODE_TI \"${PROJECT_BINARY_DIR}\" \"${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules/check_mode_ti.cpp\")\nif( MODE_TI )\n  if(MSVC)\n    add_definitions(\"/DMODE_TI\")\n  else()\n    add_definitions(\"-DMODE_TI\")\n  endif()\nendif()\n\ninclude(CheckSSE4_2)\nif( BUILTIN_POPCNT )\n  if( CMAKE_COMPILER_IS_GNUCXX )\n    append_cxx_compiler_flags(\"-msse4.2 -march=native\" \"GCC\" CMAKE_CXX_OPT_FLAGS)\n  endif()\n  if( CMAKE_COMPILER_IS_GNUCXX )\n    append_cxx_compiler_flags(\"-msse4.2 -march=native\" \"CLANG\" CMAKE_CXX_OPT_FLAGS)\n  endif()\n  if( CMAKE_COMPILER_IS_INTEL )\n    append_cxx_compiler_flags(\"-msse4.2 -march=native\" \"INTEL\" CMAKE_CXX_FLAGS)\n  endif()\nendif()\n\n# check for demangle support to get pretty C++ class names\ninclude(FindCxaDemangle)\nif( HAVE_CXA_DEMANGLE )\n    message(STATUS \"Compiler supports DEMANGLE.\")\n    if( CMAKE_COMPILER_IS_GNUCXX )\n        append_cxx_compiler_flags(\"-DHAVE_CXA_DEMANGLE\" \"GCC\" CMAKE_CXX_OPT_FLAGS)\n    else()\n        append_cxx_compiler_flags(\"-DHAVE_CXA_DEMANGLE\" \"CLANG\" CMAKE_CXX_OPT_FLAGS)\n    endif()\nendif()\n\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/Make.helper.cmake\"\n\t\t       \"${CMAKE_CURRENT_SOURCE_DIR}/Make.helper\" @ONLY)\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/lib/structure_tree.cpp.cmake\"\n               \"${CMAKE_CURRENT_SOURCE_DIR}/lib/structure_tree.cpp\" @ONLY)\n\nfind_package(Git)\nif(GIT_FOUND)\n    message(\"git found: ${GIT_EXECUTABLE}\")\nelse()\n    message(WARNING \"git not found. Cloning of submodules will not work.\")\nendif()\n\nadd_subdirectory(external)\nadd_subdirectory(include)\nadd_subdirectory(lib)\n\n## Add doxygen documentation generation target ##\nfind_package(Doxygen)\nif(GENERATE_DOC AND DOXYGEN_FOUND)\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/extras/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)\nadd_custom_target(docs ALL\n${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile\nWORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\nCOMMENT \"Generating API documentation with Doxygen\" VERBATIM\n)\nendif(GENERATE_DOC AND DOXYGEN_FOUND)\n\n## Add 'uninstall' target ##\nCONFIGURE_FILE(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules/cmake_uninstall.cmake.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/CMakeModules/cmake_uninstall.cmake\"\n  IMMEDIATE @ONLY)\nADD_CUSTOM_TARGET(uninstall-sdsl\n  \"${CMAKE_COMMAND}\" -P \"${CMAKE_CURRENT_BINARY_DIR}/CMakeModules/cmake_uninstall.cmake\")\n\ntarget_include_directories(sdsl PUBLIC include)\n\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/sdsl-lite.pc.cmake\"\n               \"${CMAKE_CURRENT_BINARY_DIR}/sdsl-lite.pc\" @ONLY)\ninstall(FILES \"${CMAKE_CURRENT_BINARY_DIR}/sdsl-lite.pc\"\n        DESTINATION \"lib/pkgconfig\")\n\nadd_subdirectory(test)\n"
        },
        {
          "name": "CMakeModules",
          "type": "tree",
          "content": null
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 0.685546875,
          "content": "The sdsl copyright is as follows:\n\nCopyright (C) 2007-2014 Simon Gog  All Right Reserved.\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see http://www.gnu.org/licenses/ .\n"
        },
        {
          "name": "Make.helper.cmake",
          "type": "blob",
          "size": 0.8642578125,
          "content": "LIB_DIR = @CMAKE_INSTALL_PREFIX@/lib\nINC_DIR = @CMAKE_INSTALL_PREFIX@/include\nMY_CXX_FLAGS=@CMAKE_CXX_FLAGS@ $(CODE_COVER)\nMY_CXX_OPT_FLAGS=@CMAKE_CXX_OPT_FLAGS@\nMY_CXX=@CMAKE_CXX_COMPILER@\nMY_CC=@CMAKE_C_COMPILER@\n\n# Returns $1-th .-separated part of string $2.\ndim = $(word $1, $(subst ., ,$2))\n\n# Returns value stored in column $3 for item with ID $2 in \n# config file $1\nconfig_select=$(shell cat $1 | grep -v \"^\\#\" | grep \"$2;\" | cut -f $3 -d';' )\n\n# Returns value stored in column $3 for a line matching $2\n# in config file $1\nconfig_filter=$(shell cat $1 | grep -v \"^\\#\" | fgrep \"$2\" | cut -f $3 -d';' )\n\n# Get all IDs from a config file $1\nconfig_ids=$(shell cat $1 | grep -v \"^\\#\" | cut -f 1 -d';')\n\n# Get column $2 from a config file $1\nconfig_column=$(shell cat $1 | grep -v \"^\\#\" | cut -f $2 -d';')\n\n# Get size of file $1 in bytes\nfile_size=$(shell wc -c < $1 | tr -d ' ')\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.775390625,
          "content": "SDSL - Succinct Data Structure Library\n=========\n\n[![Build Status](https://travis-ci.org/simongog/sdsl-lite.svg?branch=master)](https://travis-ci.org/simongog/sdsl-lite)\n\nWhat is it?\n-----------\n\nThe Succinct Data Structure Library (SDSL) is a powerful and flexible C++11\nlibrary implementing succinct data structures. In total, the library contains\nthe highlights of 40 [research publications][SDSLLIT]. Succinct data structures\ncan represent an object (such as a bitvector or a tree) in space close to the\ninformation-theoretic lower bound of the object while supporting operations\nof the original object efficiently. The theoretical time complexity of an\noperation performed on the classical data structure and the equivalent\nsuccinct data structure are (most of the time) identical.\n\nWhy SDSL?\n--------\n\nSuccinct data structures have very attractive theoretical properties. However,\nin practice implementing succinct data structures is non-trivial as they are\noften composed of complex operations on bitvectors. The SDSL Library provides\nhigh quality, open source implementations of many succinct data structures\nproposed in literature.\n\nSpecifically, the aim of the library is to provide basic and complex succinct\ndata structure which are\n\n  * Easy and intuitive to use (like the [STL][STL], which provides classical data structures),\n  * Faithful to the original theoretical results,\n  * Capable of handling large inputs (yes, we support 64-bit),\n  * Provide efficient construction of all implemented succinct data structures,\n  while at the same time enable good run-time performance.\n\n<a href=\"http://simongog.github.io/assets/data/space-vis.html\" >\n<img align=\"right\" src=\"extras/resources/space-vis.png?raw=true\" />\n</a>\n\nIn addition we provide additional functionality which can help you use succinct\ndata structure to their full potential.\n\n  * Each data structure can easily be serialized and loaded to/from disk.\n  * We provide functionality which helps you analyze the storage requirements of any\n  SDSL based data structure (see right)\n  * We support features such as hugepages and tracking the memory usage of each\n  SDSL data structure.\n  * Complex structures can be configured by template parameters and therefore\n    easily be composed. There exists one simple method which constructs\n    all complex structures.\n  * We maintain an extensive collection of examples which help you use the different\n    features provided by the library.\n  * All data structures are tested for correctness using a unit-testing framework.\n  * We provide a large collection of supporting documentation consisting of examples,\n    [cheat sheet][SDSLCS], [tutorial slides and walk-through][TUT].\n\nThe library contains many succinct data structures from the following categories:\n\n * Bitvectors supporting Rank and Select\n * Integer Vectors\n * Wavelet Trees\n * Compressed Suffix Arrays (CSA)\n * Balanced Parentheses Representations\n * Longest Common Prefix (LCP) Arrays\n * Compressed Suffix Trees (CST)\n * Range Minimum/Maximum Query (RMQ) Structures\n\nFor a complete overview including theoretical bounds see the\n[cheat sheet][SDSLCS] or the\n[wiki](https://github.com/simongog/sdsl-lite/wiki/List-of-Implemented-Data-Structures).\n\nDocumentation\n-------------\n\nWe provide an extensive set of documentation describing all data structures\nand features provided by the library. Specifically we provide\n\n* A [cheat sheet][SDSLCS] which succinctly\ndescribes the usage of the library.\n* An doxygen generated [API reference][DOXYGENDOCS] which lists all types and functions\nof the library.\n* A set of [example](examples/) programs demonstrating how different features\nof the library are used.\n* A tutorial [presentation][TUT] with the [example code](tutorial/) using in the\nsides demonstrating all features of the library in a step-by-step walk-through.\n* [Unit Tests](test/) which contain small code snippets used to test each\nlibrary feature.\n\nRequirements\n------------\n\nThe SDSL library requires:\n\n* A modern, C++11 ready compiler such as `g++` version 4.9 or higher or `clang` version 3.2 or higher.\n* The [cmake][cmake] build system.\n* A 64-bit operating system. Either Mac OS X or Linux are currently supported.\n* For increased performance the processor of the system should support fast bit operations available in `SSE4.2`\n\nInstallation\n------------\n\nTo download and install the library use the following commands.\n\n```sh\ngit clone https://github.com/simongog/sdsl-lite.git\ncd sdsl-lite\n./install.sh\n```\n\nThis installs the sdsl library into the `include` and `lib` directories in your\nhome directory. A different location prefix can be specified as a parameter of\nthe `install.sh` script:\n\n```sh\n./install.sh /usr/local/\n```\n\nTo build a portable sdsl library without using `SSE4.2` and `AVX2` instructions, set `BUILD_PORTABLE` at build time, e.g. `BUILD_PORTABLE=1 ./install.sh` or `mkdir build && BUILD_PORTABLE=1 cmake ..`.\nThese instructions are enabled by default if the processor of the build system supports them.\n\nTo remove the library from your system use the provided uninstall script:\n\n```sh\n./uninstall.sh\n```\n\nThere is also a [Gentoo Ebuild for SDSL][EBUILD] by Mathias Weller.\n\nGetting Started\n------------\n\nTo get you started with the library you can start by compiling the following\nsample program which constructs a compressed suffix array (a FM-Index) over the\ntext `mississippi!`, counts the number of occurrences of pattern `si` and\nstores the data structure, and a space usage visualization to the\nfiles `fm_index-file.sdsl` and `fm_index-file.sdsl.html`:\n\n```cpp\n#include <sdsl/suffix_arrays.hpp>\n#include <fstream>\n\nusing namespace sdsl;\n\nint main() {\n    csa_wt<> fm_index;\n    construct_im(fm_index, \"mississippi!\", 1);\n    std::cout << \"'si' occurs \" << count(fm_index,\"si\") << \" times.\\n\";\n    store_to_file(fm_index,\"fm_index-file.sdsl\");\n    std::ofstream out(\"fm_index-file.sdsl.html\");\n    write_structure<HTML_FORMAT>(fm_index,out);\n}\n```\n\nTo compile the program using `g++` run:\n\n```sh\ng++ -std=c++11 -O3 -DNDEBUG -I ~/include -L ~/lib program.cpp -o program -lsdsl -ldivsufsort -ldivsufsort64\n```\n\nNext we suggest you look at the comprehensive [tutorial][TUT] which describes\nall major features of the library or look at some of the provided [examples](examples).\n\nTest\n----\n\nImplementing succinct data structures can be tricky. To ensure that all data\nstructures behave as expected, we created a large collection of unit tests\nwhich can be used to check the correctness of the library on your computer.\nThe [test](./test) directory contains test code. We use [googletest][GTEST]\nframework and [make][MAKE] to run the tests. See the README file in the\ndirectory for details.\n\nTo simply run all unit tests after installing the library type\n\n```sh\ncd sdsl-lite/build\nmake test-sdsl\n```\n\nNote: Running the tests requires several sample files to be downloaded from the web\nand can take up to 2 hours on slow machines.\n\n\nBenchmarks\n----------\n\nTo ensure the library runs efficiently on your system we suggest you run our\n[benchmark suite](benchmark). The benchmark suite recreates a\npopular [experimental study](http://arxiv.org/abs/0712.3360) which you can\ndirectly compare to the results of your benchmark run.\n\nBug Reporting\n------------\n\nWhile we use an extensive set of unit tests and test coverage tools you might\nstill find bugs in the library. We encourage you to report any problems with\nthe library via the [github issue tracking system](https://github.com/simongog/sdsl-lite/issues)\nof the project.\n\nThe Latest Version\n------------------\n\nThe latest version can be found on the SDSL github project page https://github.com/simongog/sdsl-lite .\n\nIf you are running experiments in an academic settings we suggest you use the\nmost recent [released](https://github.com/simongog/sdsl-lite/releases) version\nof the library. This allows others to reproduce your experiments exactly.\n\nLicensing\n---------\n\nThe SDSL library is free software provided under the GNU General Public License\n(GPLv3). For more information see the [COPYING file][CF] in the library\ndirectory.\n\nWe distribute this library freely to foster the use and development of advanced\ndata structure. If you use the library in an academic setting please cite the\nfollowing paper:\n\n    @inproceedings{gbmp2014sea,\n      title     = {From Theory to Practice: Plug and Play with Succinct Data Structures},\n      author    = {Gog, Simon and Beller, Timo and Moffat, Alistair and Petri, Matthias},\n      booktitle = {13th International Symposium on Experimental Algorithms, (SEA 2014)},\n      year      = {2014},\n      pages     = {326-337},\n      ee        = {http://dx.doi.org/10.1007/978-3-319-07959-2_28}\n    }\n\nA preliminary version is available [here on arxiv][SEAPAPER].\n\n## External Resources used in SDSL\n\nWe have included the code of two excellent suffix array\nconstruction algorithms.\n\n* Yuta Mori's incredible fast suffix [libdivsufsort][DIVSUF]\n  algorithm for byte-alphabets.\n* An adapted version of [Jesper Larsson's][JESL] [implementation][QSUFIMPL] of\n  suffix array sorting on integer-alphabets (description of [Larsson and Sadakane][LS]).\n\nAdditionally, we use the [googletest][GTEST] framework to provide unit tests.\nOur visualizations are implemented using the [d3js][d3js]-library.\n\n\nAuthors\n--------\n\nThe main contributors to the library are:\n\n* [Johannes Bader](https://github.com/olydis)\n* [Timo Beller](https://github.com/tb38)\n* [Simon Gog](https://github.com/simongog) (Creator)\n* [Matthias Petri](https://github.com/mpetri)\n\nThis project is also supported by code contributions\nfrom other researchers. E.g. Juha Kärkkäinen,\n[Dominik Kempa](https://github.com/dkempa),\nand Simon Puglisi contributed a compressed bitvector\nimplementation ([hyb_vector][HB]).\nThis project further profited from excellent input of our students\nMarkus Brenner, Alexander Diehm, Christian Ocker, and Maike Zwerger. Stefan\nArnold helped us with tricky template questions. We are also grateful to\n[Diego Caro](https://github.com/diegocaro),\n[Travis Gagie](https://github.com/TravisGagie),\nKalle Karhu,\n[Bruce Kuo](https://github.com/bruce3557),\nJan Kurrus,\n[Shanika Kuruppu](https://github.com/skuruppu),\nJouni Siren,\nand [Julio Vizcaino](https://github.com/garviz)\nfor bug reports.\n\nContribute\n----------\n\nAre you working on a new or improved implementation of a succinct data structure?\nWe encourage you to contribute your implementation to the SDSL library to make\nyour work accessible to the community within the existing library framework.\nFeel free to contact any of the authors or create an issue on the\n[issue tracking system](https://github.com/simongog/sdsl-lite/issues).\n\n\n[STL]: http://www.sgi.com/tech/stl/ \"Standard Template Library\"\n[pz]: http://pizzachili.di.unipi.it/ \"Pizza&amp;Chli\"\n[d3js]: http://d3js.org \"D3JS library\"\n[cmake]: http://www.cmake.org/ \"CMake tool\"\n[MAKE]: http://www.gnu.org/software/make/ \"GNU Make\"\n[gcc]: http://gcc.gnu.org/ \"GNU Compiler Collection\"\n[DIVSUF]: https://github.com/y-256/libdivsufsort/ \"libdivsufsort\"\n[LS]: http://www.sciencedirect.com/science/article/pii/S0304397507005257 \"Larson &amp; Sadakane Algorithm\"\n[GTEST]: https://code.google.com/p/googletest/ \"Google C++ Testing Framework\"\n[SDSLCS]: http://simongog.github.io/assets/data/sdsl-cheatsheet.pdf \"SDSL Cheat Sheet\"\n[SDSLLIT]: https://github.com/simongog/sdsl-lite/wiki/Literature \"Succinct Data Structure Literature\"\n[TUT]: http://simongog.github.io/assets/data/sdsl-slides/tutorial \"Tutorial\"\n[QSUFIMPL]: http://www.larsson.dogma.net/qsufsort.c \"Original Qsufsort Implementation\"\n[JESL]: http://www.itu.dk/people/jesl/ \"Homepage of Jesper Larsson\"\n[CF]: https://github.com/simongog/sdsl-lite/blob/master/COPYING \"Licence\"\n[SEAPAPER]: http://arxiv.org/pdf/1311.1249v1.pdf \"SDSL paper\"\n[HB]: https://github.com/simongog/sdsl-lite/blob/hybrid_bitvector/include/sdsl/hybrid_vector.hpp \"Hybrid bitevctor\"\n[DOXYGENDOCS]: http://algo2.iti.kit.edu/gog/docs/html/index.html \"API Reference\"\n[EBUILD]: https://github.com/igel-kun/silly_ebuilds \"Gentoo EBuild\"\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.005859375,
          "content": "2.1.0\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.bat",
          "type": "blob",
          "size": 0.6474609375,
          "content": "@echo off\ncls\nset CUR_DIR=%cd%\necho CUR_DIR=%CUR_DIR%\n\nset SDSL_INSTALL_PREFIX=%USERPROFILE%\nif not \"%1\"==\"\" (\n    pushd .\n    cd %~dp0\n    set SDSL_INSTALL_PREFIX=%~f1\n    popd    \n)\necho Library will be installed in %SDSL_INSTALL_PREFIX%\n\nrem Change to the directory in which this script is located in\ncd %~dp0\n\nrem TODO git hook\n\ncd build\nif errorlevel 1 (\n    exit /b %errorlevel% \n)\n\n\nrem TODO clean-up build directory\n\ncmake -DCMAKE_INSTALL_PREFIX=\"${SDSL_INSTALL_PREFIX}\" -G\"Visual Studio 14 2015\" ..\nif errorlevel 1 (\n    echo ERROR: CMake build failed\n    exit /b %errorlevel%\n)\n\n\"%VS140COMNTOOLS%..\\IDE\\devenv.com\" /build release /project sdsl sdsl.sln\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 2.76953125,
          "content": "#!/bin/bash\n# This script builds all dependencies of sdsl\n# and installs the library on a LINUX or Mac OS X system\n\nCUR_DIR=`pwd`\nSDSL_INSTALL_PREFIX=${HOME}\nif [ $# -ge 1 ]; then\n\tSDSL_INSTALL_PREFIX=${1}\nfi\n\n# Get absolute path name of install directory\nmkdir -p \"${SDSL_INSTALL_PREFIX}\" 2> /dev/null\ncd \"${SDSL_INSTALL_PREFIX}\" > /dev/null 2>&1\nif [ $? != 0 ] ; then\n\techo \"ERROR: directory '${SDSL_INSTALL_PREFIX}' does not exist nor could be created.\"\n\techo \"Please choose another directory.\"\n\texit 1\nelse\n\tSDSL_INSTALL_PREFIX=`pwd -P`\nfi\n\necho \"Library will be installed in '${SDSL_INSTALL_PREFIX}'\"\n\ncd \"${CUR_DIR}\"\nOLD_DIR=\"$( cd \"$( dirname \"$0\" )\" && pwd )\" # gets the directory where the script is located in\ncd \"${OLD_DIR}\"\nOLD_DIR=`pwd`\n\n# (1) Copy pre-commit hook\n\n\nif [ -d \".git/hooks\" ]; then\n\techo \"Copy pre-commit into .git/hooks\"\n\tcp extras/pre-commit .git/hooks/\n\tif [ $? != 0 ]; then\n\t\techo \"WARNING: could not copy pre-commit script into .git/hooks\"\n\tfi\n\tchmod u+x .git/hooks/pre-commit\n\tif [ $? != 0 ]; then\n\t\techo \"WARNING: could not make pre-commit script executable\"\n\tfi\nelse\n\techo \"WARNING: .git/hooks directory does not exists.\"\n\techo \"         The pre-commit hook is not installed.\"\nfi\n\ncd build # change into the build directory\nif [ $? != 0 ]; then\n\texit 1\nfi\n./clean.sh # clean-up build directory\nif [ $? != 0 ]; then\n\texit 1\nfi\n\ncmake -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_INSTALL_PREFIX=\"${SDSL_INSTALL_PREFIX}\" .. # run cmake \nif [ $? != 0 ]; then\n\techo \"ERROR: CMake build failed.\"\n\texit 1\nfi\nmake sdsl # run make\nif [ $? != 0 ]; then\n\techo \"ERROR: Build failed.\"\n\texit 1\nfi\necho \"Removing old files\"\necho \"rm -rf '${SDSL_INSTALL_PREFIX}/include/sdsl/*'\"\nrm -rf \"${SDSL_INSTALL_PREFIX}/include/sdsl/*\"\nif [ $? != 0 ]; then\n\techo \"WARNING: Could not remove old header files.\"\nfi\necho \"rm -f '${SDSL_INSTALL_PREFIX}/lib/libsdsl*'\"\nrm -f \"${SDSL_INSTALL_PREFIX}/lib/libsdsl*\"\nif [ $? != 0 ]; then\n\techo \"WARNING: Could not remove old library file.\"\nfi\nmake install # install library\nif [ $? != 0 ]; then\n\techo \"ERROR: Installation failed.\"\n\texit 1\nfi\n\ncd ..\n\nif [ \"`pwd`\" != \"${OLD_DIR}\" ]; then\n\techo \"ERROR: we are not in the original dir ${OLD_DIR} now.\"\n\texit 1\nfi\n\necho \"SUCCESS: sdsl was installed successfully!\"\necho \"The sdsl include files are located in '${SDSL_INSTALL_PREFIX}/include'.\"\necho \"The library files are located in '${SDSL_INSTALL_PREFIX}/lib'.\"\necho \" \"\necho \"Sample programs can be found in the examples-directory.\"\necho \"A program 'example.cpp' can be compiled with the command: \"\necho \"g++ -std=c++11 -DNDEBUG -O3 [-msse4.2] \\\\\"\necho \"   -I${SDSL_INSTALL_PREFIX}/include -L${SDSL_INSTALL_PREFIX}/lib \\\\\"\necho \"   example.cpp -lsdsl -ldivsufsort -ldivsufsort64\"\necho \" \"\necho \"Tests in the test-directory\"\necho \"A cheat sheet in the extras/cheatsheet-directory.\"\necho \"Have fun!\"\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "sdsl-lite.pc.cmake",
          "type": "blob",
          "size": 0.2802734375,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nexec_prefix=${prefix}\nlibdir=${prefix}/lib\nincludedir=${prefix}/include\n\nName: @PROJECT_NAME@\nDescription: @PROJECT_DESCRIPTION@\nVersion: @PROJECT_VERSION_FULL@\nURL: @PROJECT_URL@\nLibs: -L${libdir} -lsdsl -ldivsufsort -ldivsufsort64\nCflags: -I${includedir}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tutorial",
          "type": "tree",
          "content": null
        },
        {
          "name": "uninstall.sh",
          "type": "blob",
          "size": 0.7158203125,
          "content": "#!/bin/bash\n# This script removes all installed  sdsl files\n# on a LINUX or Mac OS X system\n\nCUR_DIR=`pwd`\nSDSL_INSTALL_PREFIX=${HOME}\nif [ $# -ge 1 ]; then\n\tSDSL_INSTALL_PREFIX=${1}\nfi\n\necho \"Library files will be removed from\"\necho \"'${SDSL_INSTALL_PREFIX}/lib' and\"\necho \"'${SDSL_INSTALL_PREFIX}/include'\"\n\n\ncd \"${CUR_DIR}\"\nOLD_DIR=\"$( cd \"$( dirname \"$0\" )\" && pwd )\" # gets the directory where the script is located in\ncd \"${OLD_DIR}\"\nOLD_DIR=`pwd`\n\ncd build # change into the build directory\nif [ $? != 0 ]; then\n\texit 1\nfi\n\nif [ -f Makefile ]; then\n    make uninstall-sdsl\nfi\n\nif [ $? != 0 ]; then\n    exit 1\nfi\n\n./clean.sh # clean-up build directory\nif [ $? != 0 ]; then\n\texit 1\nfi\n\necho \"Installed sdsl files were removed.\"\n"
        }
      ]
    }
  ]
}