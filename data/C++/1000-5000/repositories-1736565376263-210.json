{
  "metadata": {
    "timestamp": 1736565376263,
    "page": 210,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "qpdf/qpdf",
      "stars": 3635,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.451171875,
          "content": "# -*- yaml -*-\n# This configuration requires at least clang-format 15.\n# See ./format-code for comments about the minimum version.\n# See https://clang.llvm.org/docs/ClangFormatStyleOptions.html\n---\nLanguage: Cpp\nBasedOnStyle: LLVM\nAlignAfterOpenBracket: AlwaysBreak\nAlignEscapedNewlines: DontAlign\nAlignOperands: DontAlign\nAllowShortFunctionsOnASingleLine: None\nAlwaysBreakAfterReturnType: AllDefinitions\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: false\nBinPackParameters: false\nBraceWrapping:\n  AfterClass:      true\n  AfterFunction:   true\n  AfterNamespace:  true\n  AfterStruct:     true\n  AfterUnion:      true\nBreakBeforeBraces: Custom\nBreakConstructorInitializers: AfterColon\nColumnLimit: 100\nDeriveLineEnding: false\nPackConstructorInitializers: Never\nIncludeCategories:\n  - Regex:           '^[\"<](qpdf)/'\n    Priority:        1\n    SortPriority:    0\n    CaseSensitive:   false\n  - Regex:           '.*'\n    Priority:        2\n    SortPriority:    0\n    CaseSensitive:   false\n  - Regex:           '.*'\n    Priority:        1\n    SortPriority:    0\n    CaseSensitive:   false\nIndentCaseBlocks: true\nIndentExternBlock: Indent\nIndentPPDirectives: AfterHash\nIndentWidth: 4\nInsertBraces: true\nInsertTrailingCommas: Wrapped\nKeepEmptyLinesAtTheStartOfBlocks: false\nNamespaceIndentation: All\nPointerAlignment: Left\nPPIndentWidth: 1\nSpaceBeforeCaseColon: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: false\nSpaceBeforeRangeBasedForLoopColon: false\n"
        },
        {
          "name": ".dir-locals.el",
          "type": "blob",
          "size": 1.20703125,
          "content": "((nil . ((indent-tabs-mode . nil)\n         (fill-column 100)\n         (qpdf-cc-style\n          .\n          (\"qpdf\"\n           (c-basic-offset . 4)\n           (c-comment-only-line-offset . 0)\n           (c-offsets-alist\n            (defun-block-intro . +)\n            (block-open . 0)\n            (substatement-open . 0)\n            (statement-cont . +)\n            (case-label . 0)\n            (access-label . -2)\n            (statement-case-intro . +)\n            (statement-case-open . +)\n            (arglist-intro . +)\n            (arglist-close . 0)\n            (inline-open . 0)\n            (inlambda . 0)\n           )\n          )\n         )\n         (c-noise-macro-names\n\t  . (\"QPDF_DLL\" \"QPDF_DLL_CLASS\" \"QPDF_DLL_PRIVATE\"))\n        )\n )\n (c++-mode . ((eval . (progn\n                        (add-to-list 'c-style-alist qpdf-cc-style)\n                        (c-set-style \"qpdf\")\n                      )\n              ))\n )\n (c-mode . ((eval . (progn\n                      (add-to-list 'c-style-alist qpdf-cc-style)\n                      (c-set-style \"qpdf\")\n                    )\n            ))\n )\n (gfm-mode . ((eval . (progn\n                        (setq fill-column 100)\n                        )\n                    ))\n )\n)\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.77734375,
          "content": "# .git-blame-ignore-revs\n#\n# Programmatically apply new formatting to code\n12f1eb15ca3fed6310402847559a7c99d3c77847\n# Formatting: remove space in range-style for loops\n7f023701dd843749cf878baabeb3d33917fda62f\n# Rerun format_code (after merging clang-tidy PR)\nd740c6ccced02147f84a39d5e5f0984d12bac6cb\n# Globally replace 'this->m->' with 'm->'\n85d784952f8a7c4d8c9e614663ebc5b1eb747384\n49e6365f63f3ad09f04093d421caee04bc042c0d\n# Switch line length from 80 to 100 columns\n6b077332d38c093de2618d5e1481b42222106065\n60965d5f4d608bdccc2ffd4e8753e12cbbbd71d2\n# Reflow comments and strings to 100 columns\n698a70e6a84cf7c0db667e9d9e021b4c34c85a3e\n3c5700c255f4603b5df9c6d183d13dd71a083cc3\n9ae7bdea966102f9621b22192747a891078e7470\n# Normalize white space in ChangeLog\nd7b909f97d3effc9540c35b0251bdf1c9abf187c\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.095703125,
          "content": "/build\n/build.*\n/cmake-build-*\nappimage/build\n/external-libs\n/distribution/\n.cache\n/html\nDoxyfile\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.353515625,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\nsphinx:\n   configuration: manual/conf.py\n\nformats: all\n\nsphinx:\n  fail_on_warning: true\n\npython:\n  install:\n    - requirements: manual/requirements.txt\n"
        },
        {
          "name": "Artistic-2.0",
          "type": "blob",
          "size": 8.626953125,
          "content": "Artistic License 2.0\n\nCopyright (c) 2000-2006, The Perl Foundation.\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nPreamble\n\nThis license establishes the terms under which a given free software\nPackage may be copied, modified, distributed, and/or\nredistributed. The intent is that the Copyright Holder maintains some\nartistic control over the development of that Package while still\nkeeping the Package available as open source and free software.\n\nYou are always permitted to make arrangements wholly outside of this\nlicense directly with the Copyright Holder of a given Package. If the\nterms of this license do not permit the full use that you propose to\nmake of the Package, you should contact the Copyright Holder and seek\na different licensing arrangement.\n\nDefinitions\n\n   \"Copyright Holder\" means the individual(s) or organization(s) named\n   in the copyright notice for the entire Package.\n\n   \"Contributor\" means any party that has contributed code or other\n   material to the Package, in accordance with the Copyright Holder's\n   procedures.\n\n   \"You\" and \"your\" means any person who would like to copy,\n   distribute, or modify the Package.\n\n   \"Package\" means the collection of files distributed by the\n   Copyright Holder, and derivatives of that collection and/or of\n   those files. A given Package may consist of either the Standard\n   Version, or a Modified Version.\n\n   \"Distribute\" means providing a copy of the Package or making it\n   accessible to anyone else, or in the case of a company or\n   organization, to others outside of your company or organization.\n\n   \"Distributor Fee\" means any fee that you charge for Distributing\n   this Package or providing support for this Package to another\n   party. It does not mean licensing fees.\n\n   \"Standard Version\" refers to the Package if it has not been\n   modified, or has been modified only in ways explicitly requested by\n   the Copyright Holder.\n\n   \"Modified Version\" means the Package, if it has been changed, and\n   such changes were not explicitly requested by the Copyright Holder.\n\n   \"Original License\" means this Artistic License as Distributed with\n   the Standard Version of the Package, in its current version or as\n   it may be modified by The Perl Foundation in the future.\n\n   \"Source\" form means the source code, documentation source, and\n   configuration files for the Package.\n\n   \"Compiled\" form means the compiled bytecode, object code, binary,\n   or any other form resulting from mechanical transformation or\n   translation of the Source form.\n\nPermission for Use and Modification Without Distribution\n\n(1) You are permitted to use the Standard Version and create and use\nModified Versions for any purpose without restriction, provided that\nyou do not Distribute the Modified Version.\n\nPermissions for Redistribution of the Standard Version\n\n(2) You may Distribute verbatim copies of the Source form of the\nStandard Version of this Package in any medium without restriction,\neither gratis or for a Distributor Fee, provided that you duplicate\nall of the original copyright notices and associated disclaimers. At\nyour discretion, such verbatim copies may or may not include a\nCompiled form of the Package.\n\n(3) You may apply any bug fixes, portability changes, and other\nmodifications made available from the Copyright Holder. The resulting\nPackage will still be considered the Standard Version, and as such\nwill be subject to the Original License.\n\nDistribution of Modified Versions of the Package as Source\n\n(4) You may Distribute your Modified Version as Source (either gratis\nor for a Distributor Fee, and with or without a Compiled form of the\nModified Version) provided that you clearly document how it differs\nfrom the Standard Version, including, but not limited to, documenting\nany non-standard features, executables, or modules, and provided that\nyou do at least ONE of the following:\n\n   (a) make the Modified Version available to the Copyright Holder of\n   the Standard Version, under the Original License, so that the\n   Copyright Holder may include your modifications in the Standard\n   Version.\n\n   (b) ensure that installation of your Modified Version does not\n   prevent the user installing or running the Standard Version. In\n   addition, the Modified Version must bear a name that is different\n   from the name of the Standard Version.\n\n   (c) allow anyone who receives a copy of the Modified Version to\n   make the Source form of the Modified Version available to others\n   under\n\n      (i) the Original License or\n\n      (ii) a license that permits the licensee to freely copy, modify\n      and redistribute the Modified Version using the same licensing\n      terms that apply to the copy that the licensee received, and\n      requires that the Source form of the Modified Version, and of\n      any works derived from it, be made freely available in that\n      license fees are prohibited but Distributor Fees are allowed.\n      Distribution of Compiled Forms of the Standard Version or\n      Modified Versions without the Source\n\n(5) You may Distribute Compiled forms of the Standard Version without\nthe Source, provided that you include complete instructions on how to\nget the Source of the Standard Version. Such instructions must be\nvalid at the time of your distribution. If these instructions, at any\ntime while you are carrying out such distribution, become invalid, you\nmust provide new instructions on demand or cease further\ndistribution. If you provide valid instructions or cease distribution\nwithin thirty days after you become aware that the instructions are\ninvalid, then you do not forfeit any of your rights under this\nlicense.\n\n(6) You may Distribute a Modified Version in Compiled form without the\nSource, provided that you comply with Section 4 with respect to the\nSource of the Modified Version.\n\nAggregating or Linking the Package\n\n(7) You may aggregate the Package (either the Standard Version or\nModified Version) with other packages and Distribute the resulting\naggregation provided that you do not charge a licensing fee for the\nPackage. Distributor Fees are permitted, and licensing fees for other\ncomponents in the aggregation are permitted. The terms of this license\napply to the use and Distribution of the Standard or Modified Versions\nas included in the aggregation.\n\n(8) You are permitted to link Modified and Standard Versions with\nother works, to embed the Package in a larger work of your own, or to\nbuild stand-alone binary or bytecode versions of applications that\ninclude the Package, and Distribute the result without restriction,\nprovided the result does not expose a direct interface to the Package.\n\nItems That are Not Considered Part of a Modified Version\n\n(9) Works (including, but not limited to, modules and scripts) that\nmerely extend or make use of the Package, do not, by themselves, cause\nthe Package to be a Modified Version. In addition, such works are not\nconsidered parts of the Package itself, and are not subject to the\nterms of this license.\n\nGeneral Provisions\n\n(10) Any use, modification, and distribution of the Standard or\nModified Versions is governed by this Artistic License. By using,\nmodifying or distributing the Package, you accept this license. Do not\nuse, modify, or distribute the Package, if you do not accept this\nlicense.\n\n(11) If your Modified Version has been derived from a Modified Version\nmade by someone other than you, you are nevertheless required to\nensure that your Modified Version complies with the requirements of\nthis license.\n\n(12) This license does not grant you the right to use any trademark,\nservice mark, tradename, or logo of the Copyright Holder.\n\n(13) This license includes the non-exclusive, worldwide,\nfree-of-charge patent license to make, have made, use, offer to sell,\nsell, import and otherwise transfer the Package with respect to any\npatent claims licensable by the Copyright Holder that are necessarily\ninfringed by the Package. If you institute patent litigation\n(including a cross-claim or counterclaim) against any party alleging\nthat the Package constitutes direct or contributory patent\ninfringement, then this Artistic License to you shall terminate on the\ndate that such litigation is filed.\n\n(14) Disclaimer of Warranty: THE PACKAGE IS PROVIDED BY THE COPYRIGHT\nHOLDER AND CONTRIBUTORS \"AS IS' AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES. THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE, OR NON-INFRINGEMENT ARE DISCLAIMED TO THE EXTENT\nPERMITTED BY YOUR LOCAL LAW.  UNLESS REQUIRED BY LAW, NO COPYRIGHT\nHOLDER OR CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE\nOF THE PACKAGE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 12.5224609375,
          "content": "# manual/installation.rst mentions the minimum cmake version.\ncmake_minimum_required(VERSION 3.16)\n\n# make_dist expects the version line to be on a line by itself after\n# the project line. When updating the version, check make_dist for all\n# the places it has to be updated. The doc configuration and CI build\n# also find the version number here. generate_auto_job also reads the\n# version from here.\nproject(qpdf\n  VERSION 11.10.0\n  LANGUAGES C CXX)\n\n# Enable correct rpath handling for MacOSX\ncmake_policy(SET CMP0042 NEW)\n# Honor CMAKE_REQUIRED_LIBRARIES when checking for include files\ncmake_policy(SET CMP0075 NEW)\n\n# *** OPTIONS ***\n\n# Keep all options here. It's easier to see the interdependencies this\n# way than spreading them throughout the files.\n#\n# ***** Keep manual/installation.rst (_build-options) up to date. *****\n\ninclude(CMakeDependentOption)\n\n# CMAKE_DEPENDENT_OPTION(\n#   OPTION \"Description\" default-value-if-visible\n#   \"when-visible\" value-if-not-visible)\n\n# Don't write tests based on MAINTAINER_MODE or CI_MODE. Instead, use\n# them as the basis for dependent options.\n\noption(MAINTAINER_MODE \"Set options for developing qpdf\" OFF)\nCMAKE_DEPENDENT_OPTION(\n  CI_MODE \"Set options for running in CI\" OFF\n  \"NOT MAINTAINER_MODE\" OFF)\nCMAKE_DEPENDENT_OPTION(\n  WERROR \"Treat compiler warnings as errors\" OFF\n  \"NOT MAINTAINER_MODE; NOT CI_MODE\" ON)\nCMAKE_DEPENDENT_OPTION(\n  CHECK_SIZES \"Compare sizes.cc with classes in public API\" OFF\n  \"NOT MAINTAINER_MODE\" ON)\nCMAKE_DEPENDENT_OPTION(\n  GENERATE_AUTO_JOB \"Automatically regenerate job files\" OFF\n  \"NOT MAINTAINER_MODE\" ON)\nCMAKE_DEPENDENT_OPTION(\n  ENABLE_QTC \"Enable QTC test coverage\" OFF\n  \"NOT MAINTAINER_MODE\" ON)\nCMAKE_DEPENDENT_OPTION(\n  SHOW_FAILED_TEST_OUTPUT \"Show qtest output on failure\" OFF\n  \"NOT CI_MODE\" ON)\n\n# To allow building doc to be disabled in maintainer mode, handle the\n# condition manually rather than using a dependent option.\nif(MAINTAINER_MODE)\n  set(default_BUILD_DOC ON)\nelse()\n  set(default_BUILD_DOC OFF)\nendif()\noption(BUILD_DOC \"Build documentation\" ${default_BUILD_DOC})\n# The values of BUILD_DOC_HTML and BUILD_DOC_PDF are ignored without\n# BUILD_DOC, so setting them to ON when not visible forces them to be\n# on in MAINTAINER_MODE and is harmless if BUILD_DOC is off.\nCMAKE_DEPENDENT_OPTION(\n  BUILD_DOC_HTML \"Build HTML documentation\"\n  ON \"BUILD_DOC;NOT MAINTAINER_MODE\" ON)\nCMAKE_DEPENDENT_OPTION(\n  BUILD_DOC_PDF \"Build PDF documentation\"\n  ON \"BUILD_DOC;NOT MAINTAINER_MODE\" ON)\nCMAKE_DEPENDENT_OPTION(\n  BUILD_DOC_DIST \"Create distribution of manual\" ON\n  \"BUILD_DOC_PDF;BUILD_DOC_HTML\" OFF)\n\noption(ENABLE_COVERAGE \"Enable coverage reporting\" OFF)\noption(BUILD_SHARED_LIBS \"Build qpdf shared libraries\" ON)\noption(BUILD_STATIC_LIBS \"Build qpdf static libraries\" ON)\noption(QTEST_COLOR \"Whether qtest's output should be in color\" ON)\noption(USE_INSECURE_RANDOM \"Use insecure random numbers\" OFF)\noption(SKIP_OS_SECURE_RANDOM\n  \"Suppress use of OS-provided secure random numbers\" OFF)\nCMAKE_DEPENDENT_OPTION(\n  AVOID_WINDOWS_HANDLE \"Avoid use of HANDLE in Windows\" OFF\n  \"WIN32\" OFF)\n\noption(OSS_FUZZ \"Specific build configuration for the oss-fuzz project\" OFF)\n\noption(USE_IMPLICIT_CRYPTO \"Enable any available external crypto provider\" ON)\nCMAKE_DEPENDENT_OPTION(\n  ALLOW_CRYPTO_NATIVE \"Allow native crypto as as fallback\" ON\n  \"USE_IMPLICIT_CRYPTO\" OFF)\nCMAKE_DEPENDENT_OPTION(\n  REQUIRE_CRYPTO_NATIVE \"Require native crypto provider\" OFF\n  \"NOT MAINTAINER_MODE; NOT CI_MODE\" ON)\noption(REQUIRE_CRYPTO_OPENSSL \"Require openssl crypto\" OFF)\noption(REQUIRE_CRYPTO_GNUTLS \"Require gnutls crypto\" OFF)\nset(DEFAULT_CRYPTO CACHE STRING \"\")\noption(DEFAULT_CRYPTO\n  \"Specify default crypto; otherwise chosen automatically\" \"\")\n\n# INSTALL_MANUAL is not dependent on building docs. When creating some\n# distributions, we build the doc in one run, copy doc-dist in, and\n# install it elsewhere.\noption(INSTALL_MANUAL \"Install documentation\" OFF)\n\noption(INSTALL_PKGCONFIG \"Install pkgconfig file\" ON)\noption(INSTALL_CMAKE_PACKAGE \"Install cmake package files\" ON)\noption(INSTALL_EXAMPLES \"Install example files\" ON)\n\noption(FUTURE \"Include ABI-breaking changes CONSIDERED for the next major release\" OFF)\noption(CXX_NEXT \"Build with next C++ standard version\" OFF)\n\n# *** END OPTIONS ***\n\nif(NOT (BUILD_STATIC_LIBS OR BUILD_SHARED_LIBS))\n  message(\n    FATAL_ERROR \"At least one of static or shared libraries must be built\")\nendif()\n\nset(CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE ON)\nadd_compile_definitions($<$<COMPILE_LANGUAGE:CXX>:POINTERHOLDER_TRANSITION=4>)\n\nif(ENABLE_QTC)\n  set(ENABLE_QTC_ARG)\nelse()\n  add_compile_definitions(QPDF_DISABLE_QTC=1)\n  set(ENABLE_QTC_ARG --disable-tc)\nendif()\n\nif(FUTURE)\n  add_compile_definitions(QPDF_FUTURE=1)\nendif()\n\nenable_testing()\nset(RUN_QTEST perl ${qpdf_SOURCE_DIR}/run-qtest ${ENABLE_QTC_ARG})\n\nif(WIN32)\n  find_program(COPY_COMMAND NAMES cp copy)\n  if(COPY_COMMAND STREQUAL \"COPY_COMMAND-NOTFOUND\")\n    set(COPY_COMMAND \"copy\")\n  endif()\nelse()\n  set(COPY_COMMAND \"cp\")\nendif()\n\n# For a long time, qpdf used libtool's version system. We are no\n# longer doing that, but to avoid potential conflict with older\n# versions, continue to have the shared library symlink point to a\n# file whose version shares minor and patch with the project version\n# and major with the SOVERSION. Starting with the transition to cmake,\n# increment SOVERSION every time we increment the project major\n# version. This works because qpdf uses semantic versioning. qpdf 10.x\n# was libqpdf28, so start from there.\n\nif(FUTURE)\n  math(EXPR qpdf_SOVERSION 0)\n  set(qpdf_LIBVERSION 0)\nelse()\n  math(EXPR qpdf_SOVERSION \"${PROJECT_VERSION_MAJOR} + 18\")\n  set(qpdf_LIBVERSION ${qpdf_SOVERSION}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH})\nendif()\n\nif(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})\n  message(FATAL_ERROR \"\nPlease build with cmake in a subdirectory, e.g.\n mkdir build\n cmake ..\n cmake --build .\nPlease remove CMakeCache.txt and the CMakeFiles directories.\")\nendif()\n\nif(CXX_NEXT)\n  set(CMAKE_CXX_STANDARD 20)\nelse()\n  set(CMAKE_CXX_STANDARD 17)\nendif()\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_C_VISIBILITY_PRESET hidden)\nset(CMAKE_CXX_VISIBILITY_PRESET hidden)\n\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n\nif(WIN32 AND NOT SKIP_OS_SECURE_RANDOM)\n  list(APPEND CMAKE_REQUIRED_LIBRARIES Advapi32)\nendif()\n\ninclude(CheckCXXSourceCompiles)\nset(ATOMIC_LIBRARY)\nfunction(check_atomic)\n  foreach(I 0 1)\n    if(I)\n      set(CMAKE_REQUIRED_LIBRARIES atomic)\n    endif()\n    check_cxx_source_compiles(\n      \"#include <atomic>\nint main() {\n    static std::atomic<unsigned long long> a{0};\n    a = a.fetch_add(1LL);\n    return 0;\n}\"\n      ATOMIC_WORKED${I})\n    if(ATOMIC_WORKED0)\n      return()\n    endif()\n  endforeach()\n  if(ATOMIC_WORKED1)\n    set(ATOMIC_LIBRARY atomic PARENT_SCOPE)\n  endif()\nendfunction()\ncheck_atomic()\n\nset(WINDOWS_WMAIN_COMPILE \"\")\nset(WINDOWS_WMAIN_LINK \"\")\nif(WIN32)\n  function(check_wmain)\n    foreach(I 0 1)\n      if(NOT WINDOWS_WMAIN_COMPILE)\n        if(I)\n          set(CMAKE_REQUIRED_LINK_OPTIONS -municode)\n        endif()\n        check_cxx_source_compiles(\n          \"#include <windows.h>\n#include <string.h>\n#include <stdio.h>\nextern \\\"C\\\"\nint wmain(int argc, wchar_t* argv[])\n{\n    size_t x = wcslen(argv[0]);\n    return 0;\n}\n\"\n          WMAIN_WORKED${I})\n      endif()\n    endforeach()\n    if(WMAIN_WORKED1 OR WMAIN_WORKED1)\n      set(WINDOWS_WMAIN_COMPILE -DWINDOWS_WMAIN PARENT_SCOPE)\n      if(WMAIN_WORKED1 AND NOT WMAIN_WORKED0)\n        set(WINDOWS_WMAIN_LINK -municode PARENT_SCOPE)\n      endif()\n    endif()\n  endfunction()\n  check_wmain()\nendif()\n\nif(MSVC)\n  list(APPEND CMAKE_REQUIRED_LINK_OPTIONS -link setargv.obj)\n  list(APPEND WINDOWS_WMAIN_LINK -link wsetargv.obj)\nendif()\nif(MINGW)\n  execute_process(\n    COMMAND gcc --print-file-name=CRT_glob.o\n    OUTPUT_VARIABLE CRT_GLOB_O\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\n  list(APPEND WINDOWS_WMAIN_LINK ${CRT_GLOB_O})\nendif()\n\ninclude(GNUInstallDirs)\n\n# Compiler flags\n#\n# **NOTE** -- each flag must have its own cache variable.\n\ninclude(qpdfCheckFlag)\nif(WERROR)\n  if(MSVC)\n    add_compile_options(/WX)\n  else()\n    qpdf_maybe_add_flag(C -Werror flag_werror)\n  endif()\nendif()\n\nif(MSVC)\n  # /Gy combines identical functions -- useful with C++ templates\n  add_compile_options(/Gy)\n  add_compile_options(/W3)    # warning level 3\nelse()\n  qpdf_maybe_add_flag(C -Wall flag_wall)\n  qpdf_maybe_add_flag(C -Wconversion flag_conversion)\n  qpdf_maybe_add_flag(C -Wsign-conversion flag_sign-conversion)\n  qpdf_maybe_add_flag(C -Wshadow=local flag_shadow_local)\n  qpdf_maybe_add_flag(CXX -Wold-style-cast flag_old-style-cast)\nendif()\n\n# We don't include the jpeg library's include path in the PUBLIC\n# interface for libqpdf since only Pl_DCT.hh requires it. This is\n# documented. Some examples and tests use it though so we have to\n# define it. CMakeLists.txt for libqpdf sets the value for\n# JPEG_INCLUDE which can be selectively added to include paths other\n# tools.\nset(JPEG_INCLUDE)\n\nif(${CMAKE_SIZEOF_VOID_P} EQUAL 8)\n  set(WORDSIZE 64)\nelse()\n  set(WORDSIZE 32)\nendif()\nif(MSVC)\n  set(CPACK_SYSTEM_NAME \"msvc${WORDSIZE}\")\nelseif(MINGW)\n  set(CPACK_SYSTEM_NAME \"mingw${WORDSIZE}\")\nendif()\nset(CPACK_RESOURCE_FILE_LICENSE \"${qpdf_SOURCE_DIR}/LICENSE.txt\")\nset(CPACK_PACKAGE_HOMEPAGE_URL \"https://qpdf.sourceforge.io/\")\nset(CPACK_NSIS_MUI_ICON \"${qpdf_SOURCE_DIR}/logo/qpdf.ico\")\n\nif(ENABLE_COVERAGE)\n  add_compile_options(--coverage -O0)\n  add_link_options(--coverage)\nendif()\n\ninclude(CPack)\n\n# Install components -- documented in _installation in\n# manual/installation.rst.\nset(COMPONENT_DEV \"dev\")\nset(COMPONENT_LIB \"lib\") # runtime library\nset(COMPONENT_CLI \"cli\")\nset(COMPONENT_DOC \"doc\")\nset(COMPONENT_EXAMPLES \"examples\") # example sources\n\nif(WIN32)\n  include(InstallRequiredSystemLibraries)\nendif()\n\nset(auto_job_inputs\n  # Keep in sync with SOURCES in generate_auto_job\n  generate_auto_job\n  CMakeLists.txt\n  manual/_ext/qpdf.py\n  job.yml\n  manual/cli.rst\n  manual/qpdf.1.in\n)\n\nset(auto_job_outputs\n  # Keep in sync with DESTS in generate_auto_job\n  libqpdf/qpdf/auto_job_decl.hh\n  libqpdf/qpdf/auto_job_init.hh\n  libqpdf/qpdf/auto_job_help.hh\n  libqpdf/qpdf/auto_job_schema.hh\n  libqpdf/qpdf/auto_job_json_decl.hh\n  libqpdf/qpdf/auto_job_json_init.hh\n  manual/qpdf.1\n)\n\nif(GENERATE_AUTO_JOB)\n  add_custom_command(\n    OUTPUT ${auto_job_outputs}\n    COMMAND ${qpdf_SOURCE_DIR}/generate_auto_job --generate\n    WORKING_DIRECTORY ${qpdf_SOURCE_DIR}\n    DEPENDS ${auto_job_inputs})\n  add_custom_target(auto_job_files ALL DEPENDS ${auto_job_outputs})\nendif()\n\nadd_test(\n  NAME check-assert\n  COMMAND perl ${qpdf_SOURCE_DIR}/check_assert)\n\n# add_subdirectory order affects test order\nadd_subdirectory(include)\nadd_subdirectory(libqpdf)\nadd_subdirectory(compare-for-test)\nadd_subdirectory(qpdf)\nadd_subdirectory(libtests)\nadd_subdirectory(examples)\nadd_subdirectory(zlib-flate)\nadd_subdirectory(manual)\nadd_subdirectory(fuzz)\n\n# We don't need to show everything -- just the things that we really\n# need to be sure are right or that are turned on or off with complex\n# logic.\nget_property(MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nmessage(STATUS \"\")\nmessage(STATUS \"*** Summary ***\")\nmessage(STATUS \"  qpdf version: ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}\")\nif(MULTI_CONFIG)\n  message(STATUS \"  build type: specify --config at build time\")\nelseif(CMAKE_BUILD_TYPE)\n  message(STATUS \"  build type: ${CMAKE_BUILD_TYPE}\")\nendif()\nmessage(STATUS \"  build shared libraries: ${BUILD_SHARED_LIBS}\")\nmessage(STATUS \"  build static libraries: ${BUILD_STATIC_LIBS}\")\nmessage(STATUS \"  build manual: ${BUILD_DOC}\")\nmessage(STATUS \"  compiler warnings are errors: ${WERROR}\")\nmessage(STATUS \"  QTC test coverage: ${ENABLE_QTC}\")\nmessage(STATUS \"  include future changes: ${FUTURE}\")\nmessage(STATUS \"  system: ${CPACK_SYSTEM_NAME}\")\nmessage(STATUS \"\")\nmessage(STATUS \"*** Options Summary ***\")\nforeach(PROP\n    COMPILE_OPTIONS INTERFACE_COMPILE_OPTIONS\n    COMPILE_DEFINITIONS INTERFACE_COMPILE_DEFINITIONS\n    INCLUDE_DIRECTORIES INTERFACE_INCLUDE_DIRECTORIES\n    INTERFACE_SYSTEM_INCLUDE_DIRECTORIES\n    LINK_OPTIONS INTERFACE_LINK_OPTIONS\n    LINK_LIBRARIES INTERFACE_LINK_LIBRARIES\n    LINK_DIRECTORIES INTERFACE_LINK_DIRECTORIES)\n  get_target_property(VAL libqpdf ${PROP})\n  if(NOT (VAL STREQUAL \"VAL-NOTFOUND\"))\n    message(STATUS \"  ${PROP}: ${VAL}\")\n  endif()\nendforeach()\nif(APPLE)\n  message(STATUS \"  CMAKE_OSX_SYSROOT: ${CMAKE_OSX_SYSROOT}\")\nendif()\nmessage(STATUS \"\")\nmessage(STATUS \"See above for crypto summary.\")\nmessage(STATUS \"\")\nif(NOT (MULTI_CONFIG OR CMAKE_BUILD_TYPE))\n  message(WARNING \"  CMAKE_BUILD_TYPE is not set; using default settings\")\nendif()\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 190.1025390625,
          "content": "2024-09-20  Chao Li  <mslichao@outlook.com>\n\n\t* Add C API function qpdf_oh_free_buffer to release memory allocated\n\tby stream data functions.\n\n2024-08-25  M Holger  <m.holger@qpdf.org>\n\n\t* Add new command-line arguments --remove-metadata and --remove-info\n\tto exclude document metadata and information from the output PDF\n\tfile. Patially fixes #1145.\n\n2024-08-06  M Holger  <m.holger@qpdf.org>\n\n\t* Bug fix: when writing real numbers as JSON ensure that they don't\n\thave a trailing decimal point. Fixes #1261.\n\n2024-07-14  M Holger  <m.holger@qpdf.org>\n\n\t* Bug fix: handle named destinations where the entry is a\n\tdictionary with /D entry instead of an explicit destination.\n\tFixes #1238.\n\n2024-07-04  M Holger  <m.holger@qpdf.org>\n\n\t* Treat corrupt JPEG streams as unfilterable. This avoids them\n\tgetting uncompressed when writing PDF files with decode level all.\n\n2024-07-02  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QPDF::setMaxWarnings to set the maximum of warnings before\n\twarning suppression.\n\n\t* Add static option to Pl_DCT to limit memory usage of \n\tdecompression. The option is generally exposed but is primarily\n\tintended to support fuzz tests, which have explicit memory limits\n\tthat are smaller than what is commonly seen in the wild with PDF\n\tfiles.\n\n\t* Add static option to Pl_DCT to control whether decompression of\n\tcorrupt JPEG data is attempted.\n\n2024-07-01  M Holger  <m.holger@qpdf.org>\n\n\t* Bug fix: certain invalid object streams caused the insertion of\n\tinvalid entries into in the xref table.\n\n2024-06-29  M Holger  <m.holger@qpdf.org>\n\n\t* Bug fix: in QPDFOutlineObjectHelper detect loops in the list of\n\tdirect children of an outline item.\n\n2024-06-27  M Holger  <m.holger@qpdf.org>\n\n\t* Add sanity check in QPDF xref table reconstruction to reject\n\tobjects with impossibly large object id in order to improve\n\thandling of severely damaged PDF files.\n\n2024-06-25  M Holger  <m.holger@qpdf.org>\n\n\t* Detect severely damaged PDF files early. After parsing the xref\n\ttable in QPDF throw a damagedPDF exception if the root of the pages\n\ttree is not a dictionary.\n\n2024-06-07  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 11.9.1: release\n\n2024-06-06  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Rewrite a recursive function to be iterative in linearization to\n\tenable more complex files to be linearized, especially on Windows.\n\n2024-02-24  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Avoid non-standard use of `std::basic_string_view`. Contribution\n\tfrom Zoe Clifford.\n\n2024-02-24  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 11.9.0: release\n\n2024-02-17  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add ENABLE_COVERAGE cmake option to assist with generating\n\tcoverage reports.\n\n\t* From M. Holger: add QPDFObjectHandle::writeJSON to directly\n\twrite a JSON representation to a pipeline. This is much faster\n\tthan writing the serialized result of getJSON.\n\n2024-02-11  Jay Berkenbilt  <ejb@ql.org>\n\n\t* The previous fix to #1056 was incomplete. When setting a check\n\tbox value, the previous fix allowed any value other than /Off to\n\tmean checked. Now we also set the actual value based on the\n\tallowable non-/Off value in the normal appearance dictionary.\n\tFixes #1056.\n\n2024-02-03  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add fuzz testing for JSON.\n\n2024-01-15  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add JSON::getDictItem (from m-holger)\n\n2024-01-10  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Allow --overlay and --underlay to be repeated. They may appear\n\tmultiple times on the command-line and will be stacked in the\n\torder in which they appear. In QPDFJob JSON, the overlay and\n\tunderlay keys may contain arrays. For compatibility, they may also\n\tcontain a single dictionary.\n\n2024-01-09  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add new command-line arguments --file and --range which can be\n\tused within --pages in place of positional arguments. Allow --file\n\tto be used inside of --overlay and --underlay as well. These new\n\toptions can be freely intermixed with positional arguments. Also\n\tadd file(), range(), and password() to QPDFJob::PagesConfig as an\n\talternative to pageSpec.\n\n2024-01-08  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 11.8.0: release\n\n2024-01-07  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: treat references to older generations of objects as\n\tnull.\n\n2024-01-06  Jay Berkenbilt  <ejb@ql.org>\n\n\t* When recovering a file's xref table, attempt to find xref\n\tstreams if a traditional trailer dictionary is not found. Fixes\n\t#1103.\n\n2024-01-05  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add --set-page-labels command-line argument and supporting API.\n\tFixes #939.\n\t  - QPDFJob::Config::setPageLabels\n\t  - pdf_page_label_e enumerated type\n\t  - QPDFPageLabelDocumentHelper::pageLabelDict\n\n2024-01-01  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Support comma-separated numeric values with --collate to select\n\tdifferent group sizes from different files. Fixes #505.\n\n\t* Support \"x\" before a group in a numeric range to exclude a group\n\tfrom the previous group. Details are in the manual. Fixes #564,\n\t#790.\n\n2023-12-29  Jay Berkenbilt  <ejb@ql.org>\n\n\t* When flattening annotations, preserve annotations without any\n\tappearance information at all, such as types /Link, /Popup, and\n\t/Projection. Fixes #1039.\n\n2023-12-25  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Detect overlong UTF-8 in the UTF-8 decoder, and fix detection of\n\t8-bit characters in erroneous UTF-8 strings.\n\n2023-12-24  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 11.7.0: release\n\n2023-12-23  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Define CPACK_NSIS_MODIFY_PATH for the Windows builds so the\n\tofficial installers will offer to modify PATH when installing\n\tqpdf. Fixes #1054.\n\n\t* Add QPDFAcroFormDocumentHelper::disableDigitalSignatures, which\n\tdisables any digital signature fields, leaving their visual\n\trepresentations intact. The --remove-restrictions command-line\n\targument now calls this. Fixes #1015.\n\n2023-12-22  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Generate a more complete qpdf \"man page\" from the same source as\n\tqpdf --help. Fixes #1064.\n\n\t* Allow the syntax \"--encrypt --user-password=user-password\n\t--owner-password=owner-password --bits={40,128,256}\" when\n\tencrypting PDF files. This is an alternative to the syntax\n\t\"--encrypt user-password owner-password {40,128,256}\", which will\n\tcontinue to be supported. The new syntax works better with shell\n\tcompletion and allows creation of passwords that start with \"-\".\n\tFixes #874.\n\n\t* When setting a check box value, allow any value other than /Off\n\tto mean checked. This is permitted by the spec. Previously, any\n\tvalue other than /Yes or /Off was rejected. Fixes #1056.\n\n2023-12-21  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Fix to QPDF JSON: a floating point number that appears in\n\tscientific notation will be converted to fixed-point notation,\n\trounded to six digits after the decimal point. Fixes #1079.\n\n\t* Fix to QPDF JSON: the syntax \"n:/pdf-syntax\" is now accepted as\n\tan alternative way to represent names. This can be used for any\n\tname (e.g. \"n:/text#2fplain\"), but it is necessary when the name\n\tcontains binary characters. For example, /one#a0two must be\n\trepresented as \"n:/one#a0two\" since the single byte a0 is not\n\tvalid in JSON. Fixes #1072.\n\n\t* From M. Holger: Refactor QPDFParser for performance. See #1059\n\tfor a discussion.\n\n2023-12-20  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Update code and tests so that qpdf's test suite no longer\n\tdepends on the output of any specific zlib implementation. This\n\tmakes it possible to get a fully passing test suite with any\n\tAPI-compatible zlib library. CI tests with the default zlib as\n\twell as zlib-ng (including verifying that zlib-ng is not the\n\tdefault), but any zlib implementation should work. Fixes #774.\n\n\t* Bug fix: with --compress-streams=n, don't compress object, XRef,\n\tor linearization hint streams.\n\n2023-12-16  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add new C++ functions \"qpdf_c_get_qpdf\" and \"qpdf_c_wrap\" to\n\tqpdf-c.h that make it possible to write your own extern \"C\"\n\tfunctions in C++ that interoperate with the C API. See\n\texamples/extend-c-api for more information.\n\n\t* Bug fix from M. Holger: the default for /Columns in PNG filter\n\tis 1, but libqpdf was acting like it was 0.\n\n\t* Enhancement from M. Holger: add methods to Buffer to work more\n\teasily with std::string.\n\n2023-12-10  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 11.6.4: release\n\n2023-12-09  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Install fix: include cmake files with the dev component.\n\n2023-11-20  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Build AppImage with an older Linux distribution to support AWS\n\tLambda. Fixes #1086.\n\n2023-10-15  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 11.6.3: release\n\n2023-10-14  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Tweak linearization code to better handle files between 2 GB and\n\t4 GB in size. Fixes #1023.\n\n\t* Fix data loss bug: qpdf could discard a the character after an\n\tescaped octal string consisting of less than three digits. For\n\tcontent, this would only happen with QDF or when normalizing\n\tcontent. Outside of content, it could have happened in any binary\n\tstring, such as /ID, if the encoding software used octal escape\n\tstrings with less than three digits. This bug was introduced\n\tbetween 10.6.3 and 11.0.0. Fixes #1050.\n\n2023-10-07  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 11.6.2: release\n\n\t* Bug fix: when piping stream data, don't call finish on failure\n\tif the failure was caused by a previous call to finish. Fixes\n\t#1042.\n\n\t* Push .idea directory with the beginning of a sharable JetBrains\n\tCLion configuration.\n\n2023-09-05  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 11.6.1: release\n\n\t* Fix a logic error introduced in 11.6.0 in the fix to\n\tcopyForeignObject. The bug could result in some pages not being\n\tcopied.\n\n2023-09-03  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 11.6.0: release\n\n\t* ascii85 parser: ignore spaces everywhere including between ~\n\tand >. Fixes #973.\n\n\t* Bug fix: with --pages, if one of the external files had warnings\n\tbut the main file did not, the warning was previously not taken\n\tinto consideration when determining the exit status.\n\n\t* Put quotation marks around the command in completion output to\n\tbetter handle spaces in paths. It is not a perfect fix (ideally,\n\tfull shell-compatible quoting should be used), but it handles more\n\tcases than the old code and should handle all reasonable cases of\n\tqpdf being in a directory with a space in its name, which is\n\tcommon in Windows. Fixes #1021.\n\n\t* Move check for random number device to runtime instead of\n\tcompile time. Since, by default, the crypto provider provides\n\trandom numbers, runtime determination of a random number device is\n\tusually not needed. Fixes #1022.\n\n2023-09-02  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Maintain links to foreign pages when copying foreign objects.\n\tThis allows hyperlinks in imported files to work. Fixes #1003.\n\n\t* Bug fix: Return a null object if an attempt is made to to copy a\n\tforeign /Pages object with copyForeignObject. This corrects a\n\tpossible crash. Fixes #1010.\n\n\t* Bug fix: Return a null object if an attempt is made to to copy a\n\tforeign /Pages object with copyForeignObject. Fixes #1003.\n\n\t* Add /MediaBox to a page if absent. Thanks M. Holger.\n\n\t* Use std::vector internally for Pl_Buffer to\n\tavoid incompatibility with C++20. Thanks to Zoe Clifford. Fixes #1024.\n\n2023-07-09  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 11.5.0: release\n\n\t* This release consists entirely of changes made by M. Holger.\n\tMostly this is changes to the private API, performance\n\tenhancements, code cleanup, and reformatting to 100 columns\n\tinstead of 80. For qpdf development, we are starting to use\n\tJetBrains CLion, so a lot of the changes are moving us toward a\n\tcleaner development experience in that environment.\n\n2023-06-15  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: when a the same page is copied multiple times, copy\n\tthe annotations rather than having multiple pages share an\n\tannotation object. Thanks to M. Holger for the fix. Fixes #600.\n\n2023-06-14  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add \"FUTURE\" build option for enabling experimental APIs. Do not\n\tpackage qpdf built with the FUTURE option as there are no binary\n\tcompatibility or even source compatibility guarantees. The option\n\tis intended for developers who want to ensure that future\n\tpotentially breaking changes are compatible with their code or\n\tprovide feedback on upcoming changes. At present, the only feature\n\tenabled by FUTURE is a move constructor for QPDFObjectHandle.\n\tWhile this shouldn't break any code, it would change details about\n\thow many copies of a specific QPDFObjectHandle were in existence,\n\tso it could potentially break code that was relying on internal\n\tshared pointer reference counts. Thanks to M. Holger for the idea\n\tand contribution.\n\n2023-05-25  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add new method Buffer::copy and deprecate Buffer copy\n\tconstructor and assignment operator. Buffer copy operations are\n\texpensive as they always involve copying the buffer content. Use\n\t\"buffer2 = buffer1.copy();\" or \"Buffer buffer2{buffer1.copy()};\"\n\tto make it explicit that copying is intended. This change was\n\tcontributed by M. Holger.\n\n2023-05-21  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 11.4.0: release\n\n2023-05-20  Jay Berkenbilt  <ejb@ql.org>\n\n\t* From M. Holger: add QPDF::newReserved as a better alternative to\n\tQPDFObjectHandle::newReserved. The operation of creating a new\n\treserved object fits better in the QPDF API. The old call just\n\tdelegates to the new one.\n\n2023-05-13  Jay Berkenbilt  <ejb@ql.org>\n\n\t* When an annotation dictionary's appearance dictionary (`/AP`)\n\thas a key that is a stream, disregard `/AS` (which is supposed to\n\tpoint to a subkey). This enables qpdf to not ignore annotations\n\tthat have incorrect values for `/AS` when the appearance stream is\n\tdirectly in the `/AP` dictionary instead of in a subkey. Fixes\n\t#949.\n\n2023-04-02  Jay Berkenbilt  <ejb@ql.org>\n\t* Allow QPDFJob's workflow to be split into a reading phase and a\n\twriting phase to allow the caller to operate on the QPDF object\n\tbefore it is written. This adds methods QPDFJob::createQPDF and\n\tQPDFJob::writeQPDF and corresponding C API functions\n\tqpdfjob_create_qpdf and qpdfjob_write_qpdf. Thanks to M. Holger\n\tfor the contribution.\n\n2023-04-01  Jay Berkenbilt  <ejb@ql.org>\n\t* From M. Holger: throw a logic error if an uninitialized or\n\tforeign QPDFObjectHandle is added to an array.\n\n2023-03-18  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Enhance --optimize-images to support images nested inside of\n\tform XObjects. Thanks to Connor Osborne (github user cdosborn) for\n\tthe contribution. Fixes #923.\n\n2023-02-25  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 11.3.0: release\n\n\t* When performing overlay or underlay operations, convert the\n\toriginal page to a form XObject instead of simply isolating its\n\tcontents with q/Q operators. This prevents unbalanced q/Q\n\toperators in any of the original pages from messing up the\n\tgraphics state of anything that is overlaid on top of it. Fixes\n\t#904.\n\n2023-02-18  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Treat all linearization errors and warnings as warnings, and\n\tissue them through the normal warning system using the new error\n\tcode qpdf_e_linearization. That means that --no-warn will suppress\n\tthem, and the file name is included in the warning. Fixes #851.\n\n2023-01-28  Jay Berkenbilt  <ejb@ql.org>\n\n\t* New option --remove-restrictions removes security restrictions\n\tfrom digitally signed files. Fixes #833.\n\n2023-01-09  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: flatten annotations should handle a page with no\n\t/Resources key. Fixes #827.\n\n2022-11-20  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 11.2.0: release\n\n\t* Add a few convenience methods to QPDFTokenizer::Token for\n\tchecking token types. thanks to M. Holger for the contribution.\n\n\t* Add stream creation methods to the QPDF class as a better\n\talternative to the ones in the QPDFObjectHandle class. Thanks to\n\tM. Holger for the contribution.\n\n2022-11-19  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: handle special case of an earlier xref stream object's\n\tobject number being reused by an update made by appending the\n\tfile. Fixes #809.\n\n2022-10-08  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Fix major performance bug with the openssl crypto provider when\n\tusing OpenSSL 3. The legacy loader and rc4 algorithm was being\n\tloaded with every call to the crypto provider instead of once in\n\tthe life of the program. Fixes #798.\n\n\t* performance_check: add --test option to limit which tests are\n\trun.\n\n2022-10-06  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Change minimum required C++ version from C++-14 to C++-17.\n\n\t* Fix another symbol export issue with the MinGW build.\n\n2022-10-01  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 11.1.1: release\n\n2022-09-27  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: avoid having the AppImage discard the first argument\n\twhen renamed to one of the embedded executables. Fixes #789.\n\n\t* Add AppImage-specific tests to CI. These test different\n\tinvocation styles and loading of the proper shared library.\n\n2022-09-26  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: avoid using PDF Doc encoding for strings whose PDF Doc\n\tencoding representation starts with UTF-16 or UTF-8 markers. Fixes\n\t#778.\n\n2022-09-27  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add tests to CI for char being unsigned by default.\n\n2022-09-14  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 11.1.0: release\n\n\t* Add notes to documentation clarifying that installing the dev\n\tcomponent usually requires the lib component to also be installed.\n\n\t* Set CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE ON in cmake to\n\t(hopefully) solve the problem of older installed qpdf headers\n\tinterfering with building qpdf from source. Fixes #763.\n\n2022-09-12  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add some missing DLL exports that only affect the Windows build.\n\n\t* Remove compile-time test for LL_FMT. It's unlikely that any\n\tcompiler new enough to build qpdf still doesn't support %lld.\n\n2022-09-10  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 11.0.0: release\n\n2022-09-09  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QPDFObjectHandle::isSameObjectAs to test whether two\n\tQPDFObjectHandle objects point to the same underlying object.\n\n\t* Expose ability to create custom loggers and to get and set the\n\tlogger for QPDF and QPDFJob through the C API.\n\n2022-09-08  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Added new functions to the C API to support qpdf JSON:\n\tqpdf_create_from_json_file, qpdf_create_from_json_data,\n\tqpdf_update_from_json_file, qpdf_update_from_json_data, and\n\tqpdf_write_json. Examples can be found in qpdf-ctest.c (in the\n\tsource tree), tests 42 through 47.\n\n\t* Add QPDFObjectHandle::isDestroyed() to test whether an indirect\n\tobject was from a QPDF that has been destroyed.\n\n2022-09-07  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QPDFObjectHandle::getQPDF(), which returns a reference, as\n\tan alternative to QPDFObjectHandle::getOwningQPDF().\n\n2022-09-06  Jay Berkenbilt  <ejb@ql.org>\n\n\t* For all bounding box methods in QPDFPageObjectHelper other than\n\tMediaBox, add a parameter `copy_if_fallback`, and add comments\n\texplaining in depth exactly what copy_if_shared and\n\tcopy_if_fallback mean. Fixes #664.\n\n\t* Add new methods getArtBox and getBleedBox to\n\tQPDFPageObjectHelper, completing the set of bounding box methods.\n\n\t* The --show-encryption option now works even if a correct\n\tpassword is not supplied. If you were using --show-encryption to\n\ttest whether you have the right password, use --requires-password\n\tinstead. Fixes #598.\n\n2022-09-05  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add a move constructor to Buffer, making it possible to move\n\trather than copy the internal buffer. Thanks to jbarlow83 for the\n\tcontribution.\n\n2022-09-02  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add new QPDF::create() factory method that returns\n\tstd::shared_ptr<QPDF>.\n\n\t* Prevent copying/assigning to QPDF objects in the API. It has\n\tnever been safe to do this, but the API wasn't preventing it.\n\n2022-09-01  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Remove QPDFObject.hh from include/qpdf. The only reason to\n\tinclude was to get QPDFObject::object_type_e. Instead, include\n\tqpdf/Constants.h, and change `QPDFObject::ot_` to `::ot_`.\n\n\t* More optimizations and cleanup from m-holger (#726, #730)\n\tincluding major refactor of QPDF's internal representations of\n\tobjects. In addition to a large performance improvement, this also\n\tmade it possible for QPDFObjectHandle::getOwningQPDF() to return a\n\tnull pointer if the owning QPDF had been destroyed. (A more\n\tcomplete solution to this problem will be introduced for qpdf 12.)\n\tThis work also paves the way for a future alternative to\n\tQPDFObjectHandle that is more idiomatic C++ and has greater type\n\tsafety.\n\n2022-08-31  Jay Berkenbilt  <ejb@ql.org>\n\n\t* From m-holger (#729): refactor QPDF's parser into a new\n\tQPDFParser class, cleaning the code, significantly improving\n\tperformance.\n\n2022-08-27  Jay Berkenbilt  <ejb@ql.org>\n\n\t* From m-holger: major refactoring of QPDFTokenizer to improve\n\treadability and to optimize performance. This also included some\n\toptimizations to some InputSource classes. Thanks for this\n\texcellent contribution. Fixes #749, #442.\n\n2022-08-07  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add new build configuration option ENABLE_QTC, which is off by\n\tdefault when not running in MAINTAINER_MODE. When this is off,\n\tQTC coverage calls sprinkled throughout the qpdf source code are\n\tcompiled out for increased performance. See \"Build Options\" in the\n\tmanual for a discussion. Fixes #714.\n\n2022-08-06  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Added by m-holger: QPDF::getObject() method as a simpler form of\n\tgetObjectByID or getObjectByObjGen. The older methods are being\n\tretained for compatibility and are not deprecated.\n\n2022-07-24  Jay Berkenbilt  <ejb@ql.org>\n\n\t* include/qpdf/JSON.hh: Schema validation: allow a single item to\n\tappear anywhere that the schema has an array of a single item.\n\tThis makes it possible to change an element of the schema from an\n\titem to an array to allow the data to accept an array where a\n\tsingle value was previously required. This change is needed to\n\tallow QPDFJob JSON to start accepting multiple items where a\n\tsingle item used to be expected without breaking backward\n\tcompatibility. Without this change, the earlier fix to\n\tremoveAttachment would be a breaking change. Also allow the schema\n\tto contain a multi-element array, which means that the output has\n\tto have an array of the same length in the corresponding location,\n\tand each element is validated against the corresponding schema\n\telement.\n\n\t* QPDFObjectHandle: for the methods insertItem, appendItem,\n\teraseItem, replaceKey, and removeKey, add a corresponding\n\t\"AndGetNew\" and/or \"AndGetOld\" methods. The ones that end with\n\t\"AndGetNew\" return the newly added item. The ones that end with\n\t\"AndGetOld\" return the old value. The AndGetNew methods make it\n\tpossible to create a new object, add it to an array or dictionary,\n\tand get a handle to it all in one line. The AndGetOld methods make\n\tit easier to retrieve an old value when removing or replacing it.\n\n\t* Thanks to m-holger for doing significant cleanup of private APIs\n\tand internals around QPDFObjGen and for significantly improving\n\tthe performance of QPDFObjGen -- See #731. This includes a few\n\tuser-visible changes:\n\t- Addition of QPDFObjectHandle::StreamDataProvider::provideStreamData\n\t  overloads that take QPDFObjGen\n\t- Addition of an optional argument to QPDFObjGen::unparse allowing\n\t  specification of a separator character, with the default\n\t  resulting in the old behavior\n\tExamples have been updated to use improved APIs. The old\n\tprovideStreamData overloads will continue to be supported, so\n\tupdating older code to use the new interfaces is entirely at the\n\tprogrammer's discretion.\n\n2022-06-25  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add tracking methods QPDF::everCalledGetAllPages() and\n\tQPDF::everPushedInheritedAttributesToPages(). Since those methods\n\tmay have the side effect of creating new objects and replace\n\tobjects in various places in the pages tree, it's useful to be\n\table to find out whether they've ever been called.\n\n2022-06-18  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QPDFJob::registerProgressReporter, making it possible to\n\toverride the progress reporter that is used when --progress (or\n\tthe equivalent) is configured with QPDFJob. This is\n\tqpdfjob_register_progress_reporter in the C API.\n\n\t* Add examples that show how to capture QPDFJob's output by\n\tconfiguring the default logger (qpdfjob-save-attachment.cc,\n\tqpdfjob-c-save-attachment.c). Fixes #691.\n\n\t* Add C API for QPDFLogger -- see qpdflogger-c.h\n\n\t* Add additional qpdfjob C API functions take a handle.\n\n\t* Add qpdf_exit_code_e to Constants.h so that exit codes from\n\tQPDFJob are accessible to the C API.\n\n\t* When --progress or --verbose is combined with writing to\n\tstandard output, progress reporting and verbose messages go to\n\tstandard error. Previously it was disabled in this case.\n\n2022-06-05  Jay Berkenbilt  <ejb@ql.org>\n\n\t* QPDFJob: API breaking change: QPDFJob::doIfVerbose passes a\n\tPipeline& rather than a std::ostream& to the the callback\n\tfunction.\n\n\t* Add integer types to pipeline's operator<<: short, int, long,\n\tlong long, unsigned short, unsigned int, unsigned long, unsigned\n\tlong long.\n\n2022-05-30  Jay Berkenbilt  <ejb@ql.org>\n\n\t* qpdf JSON is now at version 2. New command-line arguments:\n\t--json-output, --json-input, --update-from-json. New methods\n\tQPDF::writeJSON, QPDF::createFromJSON, QPDF::updateFromJSON. For\n\tdetails, see the \"qpdf JSON\" chapter of the manual.\n\n\t* When showing encryption data in json output, when the user\n\tpassword was recovered with by the owner password and the\n\tspecified password does not match the user password, reveal the\n\tuser password. This is not possible with 256-bit keys.\n\n\t* Include additional information in --list-attachments --verbose\n\tand in --json --json-key=attachments.\n\n\t* Add QUtil::qpdf_time_to_iso8601 and QUtil::pdf_time_to_iso8601\n\tfor converting PDF/qpdf timestamps to ISO-8601 date format.\n\n2022-05-18  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QUtil::FileCloser to the public API. This is a simple inline\n\tclass to help with automatic file closing.\n\n2022-05-17  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Allow passing *uninitialized* (not null) objects to\n\treplaceStreamData as filter and/or decode_parms to leave any\n\texisting values for /Filter and /DecodeParms untouched.\n\n2022-05-15  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QUtil::is_long_long to test whether a string can be\n\tconverted to a long long and back without loss of information.\n\n2022-05-04  Jay Berkenbilt  <ejb@ql.org>\n\n\t* JSON: add a new \"blob\" type that takes a function to write data\n\tinto. The blob is serialized as a base64-encoded representation of\n\twhatever is written to the function.\n\n\t* FileInputSource has new constructors that eliminate the need to\n\tcall setFilename or setFile in most cases.\n\n\t* Enhance JSON by adding a write method that takes a Pipeline* and\n\tdepth, and add several helper methods to make it easier to write\n\tlarge amounts of JSON incrementally without having to have the\n\twhole thing in memory.\n\n\t* json v1 output: make \"pages\" and \"objects\" consistent.\n\tPreviously, \"objects\" always reflected the objects exactly as they\n\tappeared in the original file, while \"pages\" reflected objects\n\tafter repair of the pages tree. This could be misleading. Now, if\n\t\"pages\" is specified, \"objects\" shows the effects of repairing the\n\tpage tree, and if not, it doesn't. This makes no difference for\n\tcorrect PDF files that don't have problems in the pages tree. JSON\n\tv2 will behave in a similar way.\n\n2022-05-03  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add new Pipeline class Pl_String which appends to a std::string&\n\tpassed to it at construction.\n\n\t* Add new Pipeline class Pl_OStream, similar to Pl_StdioFile but\n\ttakes a std::ostream instead of a FILE*.\n\n\t* Add new convenience methods to Pipeline: writeCStr and\n\twriteString. Also add a limit << operator that takes C strings and\n\tstd::strings. Also add an overloaded version of write that takes\n\t\"char const*\".\n\n\t* API change: Pipeline::write now takes \"unsigned char const *\"\n\tinstead of \"unsigned char*\". Callers shouldn't have to change\n\tanything, though can stop using writable strings or\n\tQUtil::unsigned_char_pointer. If you have implemented your own\n\tpipelines, you should change your write method to take a const\n\tpointer.\n\n2022-05-01  Jay Berkenbilt  <ejb@ql.org>\n\n\t* JSON: add reactors to the JSON parser, making it possible to\n\treact to JSON parsing events as they occur and to block the\n\tresults from being stored. This makes it possible to incrementally\n\tparse arbitrarily large JSON inputs.\n\n2022-04-30  Jay Berkenbilt  <ejb@ql.org>\n\n\t* QPDFWriter: change encryption API calls\n\t  - Remove deprecated versions of setR*EncryptionParameters\n\t    methods from before qpdf 8.4.0\n\t  - Replace setR2EncryptionParameters with\n\t    setR2EncryptionParametersInsecure\n\t  - Replace setR3EncryptionParameters with\n\t    setR3EncryptionParametersInsecure\n\t  - Replace setR4EncryptionParameters with\n\t    setR4EncryptionParametersInsecure\n\n\t* C API: change encryption API calls to match C++ interface\n\t  - Remove pre-8.4.0 functions:\n\t    - qpdf_set_r3_encryption_parameters\n\t    - qpdf_set_r4_encryption_parameters\n\t    - qpdf_set_r5_encryption_parameters\n\t    - qpdf_set_r6_encryption_parameters\n\t  - Add \"_insecure\" to insecure encryption triggers:\n\t    - Replace void qpdf_set_r2_encryption_parameters\n\t      with qpdf_set_r2_encryption_parameters_insecure\n\t    - Replace void qpdf_set_r3_encryption_parameters2\n\t      with qpdf_set_r3_encryption_parameters_insecure\n\t    - Replace void qpdf_set_r4_encryption_parameters2\n\t      with qpdf_set_r4_encryption_parameters_insecure\n\n\t* Make attempting to write encrypted files that use RC4 (40-bit or\n\t128-bit without AES) an error rather than a warning when\n\t--allow-weak-crypto is not specified. Fixes #576.\n\n2022-04-24  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: \"removeAttachment\" in the job JSON now takes an array\n\tof strings instead of a string. It should have taken an array of\n\tstrings since the corresponding command-line argument,\n\t--remove-attachment, is repeatable. Fixes #693.\n\n\t* Deprecate QPDFObjectHandle::replaceOrRemoveKey -- it does and\n\talways has done the same thing as replaceKey.\n\n2022-04-23  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add a new QPDF::warn method that takes the parameters of\n\tQPDFExc's constructor except for the filename, which is taken from\n\tthe QPDF object. This is a shorter way to issue warnings on behalf\n\tof a QPDF object.\n\n\t* Add new method QUtil::is_explicit_utf8 that tests whether a\n\tstring is explicitly marked as being UTF-8 encoded, as allowed by\n\tthe PDF 2.0 spec. Such a string starts with the bytes 0xEF 0xBB\n\t0xBF, which is the UTF-8 encoding of U+FEFF.\n\n\t* Add new method QUtil::get_next_utf8_codepoint as a low-level\n\thelper for iterating through the UTF-8 characters in a byte\n\tstring.\n\n2022-04-16  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Breaking CLI change: the default value for --json is now\n\t\"latest\" rather than \"1\". At this moment, \"1\" is the latest\n\tversion, but version \"2\" will be added before the release of\n\tqpdf 11.\n\n\t* Perform code cleanup including some source-compatible but not\n\tbinary compatible changes to function signatures, use of anonymous\n\tnamespaces, and use of \"= default\" and \"= delete\" in declarations.\n\n2022-04-09  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Replace PointerHolder with std::shared_ptr through the QPDF API.\n\tA backward-compatible interface is provided and enabled by default\n\twith a warning that can be turned off. See \"Smart Pointers\" in the\n\t\"Design and Library Notes\" section of the manual for information\n\tincluding a detailed migration process to assist with migrating\n\tcode that uses the qpdf library.\n\n2022-04-03  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add automatic code formatting with clang-format. See \"Code\n\tFormatting\" in the \"Contributing to qpdf\" chapter of the manual.\n\n2022-03-19  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 10.6.3.0cmake1: unofficial release\n\n\t* Conversion of build system to cmake. This change doesn't include\n\tany user-visible functional changes to the library API or CLI but\n\tcompletely replaces the build system. Details can be found in the\n\tmanual in the \"Building and Installing QPDF\" and \"Notes for\n\tPackagers\" sections, especially \"Converting From autoconf to\n\tcmake\" in \"Building and Installing QPDF\". Highlights of the\n\tchanges can be found in the release notes.\n\n2022-03-08  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 10.6.3: release\n\n\t* Use Windows 2022 github runners and therefore Visual Studio 2022\n\tto create Windows distributions\n\n\t* Fix DLL export issue with mingw (Windows)\n\n2022-03-07  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Minor internal changes to assist with building in other\n\tenvironments: rename internal bits.icc to qpdf/bits_functions.hh\n\t(not part of public API), enforce reordering of header files to\n\tprevent jpeglib.h from interfering with other headers, remove an\n\tunused header that was accidentally added in 10.6.0 but never\n\treferenced by any code.\n\n\t* Make build work and tests work when NDEBUG is defined. This\n\tinvolved a few changes to some test files but no changes to any\n\tlibrary code.\n\n2022-02-25  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix in JSON parser: accept \\/ in a string as valid input per\n\tJSON spec even though we don't translate / to \\/ on output.\n\n2022-02-22  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Recognize PDF strings explicitly marked as UTF-8 as allowed by\n\tthe PDF 2.0 spec. Fixes #654.\n\n2022-02-18  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: when generating appearance streams, the font size was\n\tsubstituted incorrectly from /DA if Tf was absent or the number\n\tpreceding Tf was out of range. Fixes #655.\n\n2022-02-16  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 10.6.2: release\n\n2022-02-15  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Fix asymmetrical logic between\n\tQPDFObjectHandle::newUnicodeString() and\n\tQPDFObjectHandle::getUTF8Val(). The asymmetrical logic didn't\n\tmatter before fixing the PDF Doc transcoding bugs.\n\n\t* When analyzing PDF strings, recognize UTF-16LE as UTF-16. The\n\tPDF spec only allows UTF-16BE, but most readers seem to allow\n\tboth. Fixes #649.\n\n\t* Bug fix: 10.6.0 inadvertently removed an unknown/undocumented\n\tCLI parsing feature, which has been restored in 10.6.2. Fixes #652.\n\n\t* Don't map 0x18 through 0x1f, 0x7f, 0x9f, or 0xad as fixed points\n\twhen transcoding UTF-8 to PDFDoc. These code points have different\n\tmeanings in those two encoding systems. Fixes #650.\n\n2022-02-11  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 10.6.1: release\n\n\t* Fix some compilation issues from use of abs without including\n\tproper headers.\n\n2022-02-09  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 10.6.0: release\n\n\t* Fix one more PDF doc encoding omission: 0xAD is also undefined.\n\tFixes #637.\n\n2022-02-08  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: when splitting pages with --split-pages or selecting\n\tpages with --pages, set the output PDF version to the maximum of\n\tall the input PDF versions. This is a fix to QPDFJob. If you are\n\tcreating output PDF files yourself from multiple inputs, you will\n\tneed to code the same thing. The new PDFVersion object, its\n\tupdateIfGreater() method, and the new QPDF and QPDFWriter methods\n\tdescribed below make this very easy to do. Fixes #610.\n\n\t* Add new class PDFVersion for more convenient comparison of PDF\n\tversion numbers from the %!PDF header.\n\n\t* Add QPDF::getVersionAsPDFVersion() to return the PDF version and\n\textension together as a PDFVersion object instead of a string.\n\n\t* Add a QPDFWriter::setMinimumPDFVersion() that takes a PDFVersion\n\tobject.\n\n2022-02-06  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Pl_Buffer and QPDFWriter: add getBufferSharedPointer(), which\n\tturns a PointerHolder<Buffer> but will return a\n\tstd::shared_ptr<Buffer> in qpdf 11.\n\n\t* From m-holger: add getKeyIfDict(), which calls getKey for\n\tdictionaries and returns null if called on null. This is for\n\teasier access to optional, lower-level dictionaries.\n\n2022-02-05  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add several new accessors to QPDFObjectHandle: the bool\n\tgetValueAsX(X&) accessors allow an alternative way to retrieve\n\tvalues from QPDFObjectHandle objects and can result in more\n\tconcise code in many situations. Thanks to m-holger for the\n\tcontribution.\n\n\t* Add qpdf_oh_new_binary_unicode_string and\n\tqpdf_oh_get_binary_utf8_value to the C API. This makes it possible\n\tto handle UTF-8-encoded strings with embedded NUL characters. Thanks\n\tto m-holger for the contribution.\n\n\t* Add a global user-defined string literal \"_qpdf\" as a shorthand\n\tfor QPDFObjectHandle::parse, allowing you to create\n\tQPDFObjectHandle objects with\n\n\tQPDFObjectHandle oh = \"<</Some (PDF)>>\"_qpdf;\n\n\t* Expose QPDF::emptyPDF to the C API as qpdf_empty_pdf()\n\n\t* Add comments letting people know that the version string\n\treturned by QPDF::QPDFVersion and qpdf_get_qpdf_version is static.\n\n\t* Add QUtil::make_unique_cstr to return a std::unique_ptr<char[]>\n\tas an alternative to QUtil::copy_string and\n\tQUtil::make_shared_cstr.\n\n2022-02-04  Jay Berkenbilt  <ejb@ql.org>\n\n\t* New preprocessor symbols QPDF_MAJOR_VERSION, QPDF_MINOR_VERSION,\n\tQPDF_PATCH_VERSION as numbers and QPDF_VERSION as a string. These\n\tcan be used for feature testing in code. These are in qpdf/DLL.h,\n\twhich is included by every header that adds to the public API.\n\tSince these constants are introduced in version 10.6, it's\n\timportant for them to be in a header that everyone already\n\tincludes so you don't have to try to include a header that won't\n\tbe there.\n\n\t* PointerHolder: add a get() method and a use_count() method for\n\tcompatibility with std::shared_ptr. In qpdf 11, qpdf's APIs will\n\tswitch to using std::shared_ptr instead of PointerHolder, though\n\tthere will be a PointerHolder class with a backward-compatible\n\tAPI. To ease the transition, we are adding get() now with the same\n\tsemantics as std::shared_ptr's get. Note that there is a\n\tdifference in behavior: const PointerHolder has always behaved\n\tincorrectly. const PointerHolder objects only returned const\n\tpointers. This is wrong. If you want a const pointer, use\n\tPointerHolder<T const>. A const PointerHolder just shouldn't allow\n\tits pointer to be reassigned. The new get() method behaves\n\tcorrectly in that calling get() on a const PointerHolder to a\n\tnon-const pointer returns a non-const pointer. This is the way\n\tregular pointers behave.\n\n2022-02-01  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Major refactor: all functionality from the qpdf CLI is now\n\tavailable for library users using the QPDFJob class. See comments\n\tin include/qpdf/QPDFJob.hh and a new chapter about QPDFJob in the\n\tmanual. QPDFJob provides fluent interfaces for setting options\n\tthat exactly map to command-line arguments. There are also methods\n\tfor initializing QPDFJob from an argv array and from a JSON\n\tobject.\n\n\t* A light C API around basic QPDFJob functionality is in\n\tinclude/qpdf/qpdfjob-c.h.p\n\n\t* Add new functions version of QUtil::call_main_from_wmain that\n\ttakes a constant argv array.\n\n2022-01-31  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Have --json-help just output the JSON object, leaving a\n\tdescription to --help and the manual.\n\n\t* The --json flag now takes a version number as an optional\n\tparameter. The default will remain version 1 for compatibility\n\tuntil the release of qpdf 11, after which it will become \"latest\".\n\tAt this time, there's only version 1, but a version 2 may appear\n\tin a future qpdf.\n\n2022-01-28  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QPDFUsage exception, which is thrown by QPDFJob to indicate\n\tcommand-line usage or job configuration errors.\n\n2022-01-22  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QUtil::make_shared_cstr to return a std::shared_ptr<char>\n\tinstead of a char* like QUtil::copy_string\n\n\t* JSON: for (qpdf-specific, not official) \"schema\" checking, add\n\tthe ability to treat missing fields as optional. Also ensure that\n\tvalues in the schema are dictionary, array, or string.\n\n\t* Add convenience methods isNameAndEquals and isDictionaryOfType\n\tto QPDFObjectHandle with corresponding functions added to the C\n\tAPI. Thanks to m-holger for the contribution.\n\n2022-01-17  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add JSON::parse. Now qpdf's JSON class implements a\n\tgeneral-purpose JSON parser and serializer, but there are better\n\toptions for general use. This is really designed for qpdf's\n\tinternal use and is set up to be compatible with qpdf's existing\n\tAPI and to hook into a planned JSON-based API to the QPDFJob\n\tclass.\n\n\t* Add isDictionary and isArray to JSON\n\n2022-01-11  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Major overhaul of documentation and help for the qpdf\n\tcommand-line tool. qpdf --help is now broken into topics rather\n\tthan being one great wall of text, and the command-line arguments\n\tare indexed in the manual. The entire text of the \"Running qpdf\"\n\tchapter has been reviewed thoroughly. Many thanks once again to\n\tM. Holger for a detailed review and editorial assistance with the\n\tmanual.\n\n\t* Bug fix: add missing characters from PDF doc encoding.\n\tFixes #606.\n\n2021-12-29  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add method QUtil::file_can_be_opened\n\n2021-12-21  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 10.5.0: release\n\n\t* Add documentation link to top-level README\n\n\t* Discontinue inclusion of the pre-built documentation in the\n\tsource distribution. Consult the packaging documentation in the\n\tmanual for details. The file README-doc.txt is installed in the\n\tdoc directory by default and contains information that users will\n\tneed to know to find the documentation.\n\n2021-12-19  Jay Berkenbilt  <ejb@ql.org>\n\n\t* C API: clarify documentation around string lengths. Add two new\n\tmethods: qpdf_oh_get_binary_string_value and\n\tqpdf_oh_new_binary_string to make the need to handle the length\n\tand data separate in more explicit in cases in which the string\n\tdata may contain embedded null characters.\n\n2021-12-17  Jay Berkenbilt  <ejb@ql.org>\n\n\t* C API: simplify error handling for uncaught errors (never in a\n\treleased version) and clarify documentation in qpdf-c.h around\n\terror handling. See qpdf-c.h for details, including how to check\n\tfor errors and the new function qpdf_silence_errors.\n\n\t* C API: expose getTypeCode and getTypeName from QPDFObjectHandle.\n\tFixes #597.\n\n\t* C API: add functions for working with stream data. Search for\n\t\"STREAM FUNCTIONS\" in qpdf-c.h. Fixes #596.\n\n\t* QPDFObjectHandle object types have been moved from\n\tQPDFObject::object_type_e to qpdf_object_type_e (defined in\n\tConstants.h). Old values are available for backward compatibility.\n\n\t* Add Pl_Buffer::getMallocBuffer() to initialize a buffer with\n\tmalloc in support of the C API\n\n2021-12-16  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add several functions to the C API for working with pages. C\n\twrappers around several of the \"Legacy\" page operations from\n\tQPDFObjectHandle.hh have been added. See \"PAGE FUNCTIONS\" in\n\tqpdf-c.h for details. Fixes #594.\n\n2021-12-12  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Convert documentation from docbook to reStructuredText/Sphinx.\n\n2021-12-10  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Handle bitstream overflow errors more gracefully. Fixes #581.\n\n\t* C API: add qpdf_get_object_by_id, qpdf_make_indirect_object, and\n\tqpdf_replace_object, exposing the corresponding methods in QPDF\n\tand QPDFObjectHandle. Fixes #588.\n\n\t* Add missing QPDF_DLL to QPDFObjectHandle::addTokenFilter so that\n\tit is actually accessible as part of the public interface as\n\tintended. Fixes #580.\n\n\t* C API: Overhaul how errors are handle the C API's object handle\n\tinterfaces. Clarify documentation regarding object accessors and\n\thow type errors and warnings are handled. Many cases that used to\n\tcrash code that used the C API can now be trapped and will be\n\twritten stderr if not trapped. See qpdf-c.h for details.\n\n\t* C API: Add qpdf_oh_new_uninitialized to explicitly create\n\tuninitialized object handles.\n\n\t* Add new error code qpdf_e_object that is used for exceptions\n\t(including warnings) that are caused by using QPDFObjectHandle\n\tmethods on object handles of the wrong type.\n\n2021-12-02  Jay Berkenbilt  <ejb@ql.org>\n\n\t* C API: Add qpdf_oh_is_initialized.\n\n\t* C API: Add qpdf_get_last_string_length to return the length of\n\tthe last string returned. This is necessary in order to fully\n\tretrieve values of strings that may contain embedded null characters.\n\n\t* C API: Add qpdf_oh_new_object to clone an object handle. Change\n\timplemented by m-holger in #587.\n\n2021-11-16  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 10.4.0: release\n\n2021-11-10  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add --allow-weak-crypto option to suppress warnings about use of\n\tweak cryptographic algorithms. Update documentation around this\n\tissue. Fixes #358.\n\n2021-11-07  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Relax xref recovery logic a bit so that files whose objects are\n\teither missing endobj or have endobj at other than the beginning\n\tof a line can still be recovered. Fixes #573.\n\n2021-11-04  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add support for OpenSSL 3. Fixes #568.\n\n\tThe OpenSSL version is detected at compile-time. If you want to\n\tbuild with OpenSSL 3 on a system that has OpenSSL 1 installed, you\n\tcan run configure like this (or similar to this depending on how\n\tyou installed openssl3):\n\n\tpc_openssl_CFLAGS=-I/path/to/openssl3/include \\\n\tpc_openssl_LIBS='-L/path/to/openssl3/lib64 -lssl -lcrypto' \\\n\t./configure\n\n\twhere /path/to/openssl3 is wherever your OpenSSL 3 distribution is\n\tinstalled. You may also need to set the LD_LIBRARY_PATH\n\tenvironment variable if it's not installed in a standard location.\n\n\t* Add range check in QPDFNumberTreeObjectHelper (fuzz issue 37740).\n\n\t* Add QIntC::range_check_subtract to do range checking on\n\tsubtraction, which has different boundary conditions from\n\taddition.\n\n\t* Bug fix: fix crash that could occur under certain conditions\n\twhen using --pages with files that had form fields. Fixes #548.\n\n\t* Add an extra check to the library to detect when foreign objects\n\tare inserted directly (instead of using\n\t<function>QPDF::copyForeignObject</function>) at the time of\n\tinsertion rather than when the file is written. Catching the error\n\tsooner makes it much easier to locate the incorrect code.\n\n2021-11-03  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: make overlay/underlay work on a page with no resource\n\tdictionary. Fixes #527.\n\n2021-11-02  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QPDF::findPage to the public API. This is primarily to help\n\timprove the efficiency of code that wraps the qpdf library, such\n\tas pikepdf. Fixes #516.\n\n\t* zlib-flate: warn and exit with code 3 when there is corrupted\n\tinput data even when decompression is possible. We do this in the\n\tzlib-flate CLI so that it can be more reliably used to test the\n\tvalidity of zlib streams, but we don't warn by default in qpdf\n\titself because PDF files in the wild exist with this problem and\n\tother readers appear to tolerate it. There is a PDF in the qpdf\n\ttest suite (form-filled-by-acrobat.pdf) that was written by a\n\tversion of Adobe Acrobat that exhibits this problem. Fixes #562.\n\n\t* Add Pl_Flate::setWarnCallback to make it possible to be notified\n\tof data errors that are recoverable but still indicate invalid\n\tdata.\n\n\t* Improve error reporting when someone forgets the -- after\n\t--pages. Fixes #555.\n\n2021-05-12  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: ensure we don't overflow any string bounds while\n\thandling completion, even when we are given bogus input values.\n\tFixes #441.\n\n2021-05-09  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Improve performance of preservation of object streams by\n\tavoiding unnecessary traversal of objects when there are no object\n\tstreams.\n\n2021-05-08  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 10.3.2: release\n\n\t* Fix problem that caused the generated manual from being included\n\tin the Windows distributions. Fixes #521.\n\n\t* Fix 11-year-old bug of leaving unreferenced objects in preserved\n\tobject streams. Fixes #520.\n\n2021-04-17  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Portability fix: use tm_gmtoff rather than global timezone\n\tvariable if available to get timezone offset. This fixes\n\tcompilation on BSD and also results in a daylight saving\n\ttime-aware offset for Linux or other GNU systems. Fixes #515.\n\n2021-04-05  Jay Berkenbilt  <ejb@ql.org>\n\n\t* When adding a page, if the page already exists, make a shallow\n\tcopy of the page instead of throwing an exception. This makes the\n\tbehavior of adding a page from the library consistent with what\n\tthe CLI does and also with what the library does if it starts with\n\ta file that already has a duplicated page. Note that this means\n\tthat, in some cases, the page you pass to addPage or addPageAt\n\t(either in QPDF or QPDFPageDocumentHelper) will not be the same\n\tobject that actually gets added. (This has actually always been\n\tthe case.) That means that, if you are going to do subsequent\n\tmodification on the page, you should retrieve it again.\n\n2021-03-11  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 10.3.1: release\n\n\t* Bug fix: allow /DR to be direct in /AcroForm\n\n2021-03-04  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 10.3.0: release\n\n\t* The last several changes are in support of fixing more complex\n\tcases of keeping form fields working properly through page copying\n\toperations. Fixes #509.\n\n\t* Deprecated QPDFAcroFormDocumentHelper::copyFieldsFromForeignPage\n\t-- use QPDFAcroFormDocumentHelper::fixCopiedAnnotations instead.\n\tThe API for dealing with annotations and form fields around\n\tcopying pages is extremely complex and very hard to get right. It\n\tis planned for a future version of qpdf to have a higher level\n\tinterface for dealing with copying pages around and preserving\n\tdocument-level constructs.\n\n\t* Add QPDFAcroFormDocumentHelper::getFieldsWithQualifiedName for\n\treturning a list of fields by name.\n\n\t* Add QPDFAcroFormDocumentHelper::addAndRenameFormFields to add a\n\tcollection of fields while ensuring that, within the collection,\n\tfields with the same name continue to have the same name, but that\n\tthey don't conflict with exiting fields in the document.\n\n\t* Add QPDFAcroFormDocumentHelper::setFormFieldName for changing\n\tthe name of a form field in a manner that preserves\n\tQPDFAcroFormDocumentHelper's cache.\n\n2021-03-03  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Handle /DR properly when copying form fields. This is a\n\tsignificant rework of the form field copying from 10.2.0. It\n\tensures that when copy fields from different files, we resolve any\n\tconflicting names in resources.\n\n\t* Add QPDFMatrix::operator==\n\n\t* Add QPDFObjectHandle::makeResourcesIndirect\n\n2021-03-02  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add an optional resource_names argument to getUniqueResourceName\n\tfor added efficiency.\n\n\t* Add conflict detection QPDFObjectHandle::mergeResources.\n\n2021-03-01  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Improve code that finds unreferenced resources to ignore names\n\tin the content stream that are not fonts or XObjects. This should\n\treduce the number of cases when qpdf needlessly decides not to\n\tremove unreferenced resources. Hopefully it doesn't create any new\n\tbugs where it removes unreferenced resources that it isn't\n\tsupposed to.\n\n\t* Add QPDF::numWarnings() -- useful to tell whether any warnings\n\twere issued by a specific bit of code.\n\n2021-02-26  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: QPDFFormFieldObjectHelper was mis-handling /DA, /Q, and\n\t/DR in ways that usually didn't matter but were still wrong. /DA\n\tand /Q were being found in the field hierarchy, but if not found,\n\tthe default values in the /AcroForm dictionary were not being\n\tused. /DR was being treated as an inherited field in the field\n\tdictionary, which is wrong. It is actually supposed to come from\n\tthe /AcroForm dictionary. We were getting away with this since\n\tmany popular form writers seem to copy it to the field as well,\n\teven though the spec makes no mention of doing this. To support\n\tthis, QPDFFormFieldObjectHelper::getDefaultResources was added.\n\n2021-02-25  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Update StreamDataProvider examples to use copyStream() when they\n\twant to get to the original stream data from the provider. Prior\n\tto 10.2.0, we had to copy the stream to another QPDF, but now we\n\tcan just use copyStream().\n\n\t* Bug fix/behavior change: when QPDF::replaceObject or\n\tQPDF::swapObjects is called, existing QPDFObjectHandle instances\n\twill now notice the change. This removes a long-standing source of\n\tbugs and confusing behavior.\n\n2021-02-23  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 10.2.0: release\n\n\t* The test for the input and output files being the same wasn't\n\timplemented correctly for --split-pages since the specified output\n\tfile is really a pattern, not the actual output file.\n\n2021-02-22  Jay Berkenbilt  <ejb@ql.org>\n\n\t* From qpdf CLI, --pages and --split-pages will properly preserve\n\tinteractive form functionality. Fixes #340.\n\n\t* Add QPDFAcroFormDocumentHelper::copyFieldsFromForeignPage to\n\tcopy form fields from a foreign page into the current file. (This\n\tmethod didn't work and was deprecated in 10.3.0.)\n\n\t* Add QPDFFormFieldObjectHelper::getTopLevelField to get the\n\ttop-level field for a given form field.\n\n\t* Update pdf-overlay-page example to include copying of\n\tannotations.\n\n\t* Add a new version of QPDFPageObjectHelper::placeFormXObject that\n\tinitializes the transformation matrix that was used so you don't\n\thave to call both placeFormXObject and\n\tgetMatrixForFormXObjectPlacement.\n\n2021-02-21  Jay Berkenbilt  <ejb@ql.org>\n\n\t* From qpdf CLI, --overlay and --underlay will copy annotations\n\tand form fields from overlay/underlay file. Fixes #395.\n\n\t* Add QPDFPageObjectHelper::copyAnnotations, which copies\n\tannotations and, if applicable, associated form fields, from one\n\tpage to another, possibly transforming the rectangles.\n\n\t* Bug fix: --flatten-rotation now applies the required\n\ttransformation to annotations on the page.\n\n\t* Add QPDFAcroFormDocumentHelper::transformAnnotations to apply a\n\ttransformation to a group of annotations.\n\n\t* Add QPDFObjGen::unparse()\n\n\t* Add QPDFObjectHandle::copyStream() for making a copy of a stream\n\twithin the same QPDF instance.\n\n\t* Allow QPDFObjectHandle::newArray and\n\tQPDFObjectHandle::newFromMatrix take QPDFMatrix as well as\n\tQPDFObjectHandle::Matrix\n\n\t* Make member variables a--f of QPDFMatrix public\n\n2021-02-20  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Allow --rotate=0 to clear rotation from a page.\n\n2021-02-18  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QPDFAcroFormDocumentHelper::addFormField, which adds a new\n\tform field, initializing the AcroForm dictionary if needed.\n\n\t* Add QPDFPageObjectHelper::getMatrixForFormXObjectPlacement,\n\twhich returns the transformation matrix required to map from a\n\tform field's coordinate system into a specific rectangle within\n\tthe page.\n\n\t* Add QUtil::path_basename to get last element of a path.\n\n\t* Add examples/pdf-attach-file.cc to illustrate new file\n\tattachment method and also new parse that takes indirect objects.\n\n2021-02-17  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Allow optional numeric argument to --collate. If --collate=n is\n\tgiven, pull n pages from the first file, n pages from the second\n\tfile, etc., until we run out of pages.\n\n2021-02-15  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add a version of QPDFObjectHandle::parse that takes a QPDF* as\n\tcontext so that it can parse strings containing indirect object\n\treferences.\n\n2021-02-14  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add new versions of QPDFObjectHandle::replaceStreamData that\n\ttake std::function objects for cases when you need something\n\tbetween a static string and a full-fledged StreamDataProvider.\n\tUsing this with QUtil::file_provider is a very easy way to create\n\ta stream from the contents of a file.\n\n2021-02-12  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Move formerly internal QPDFMatrix class to the public API. This\n\tclass provides convenience methods for working with transformation\n\tmatrices.\n\n\t* QUtil::double_to_string: trim trailing zeroes by default, and\n\tadd option to not trim trailing zeroes. This causes a syntactic\n\tbut semantically preserving change in output when doubles are\n\tconverted to strings. The library uses double_to_string in only a\n\tfew places. In practice, output will be different (trailing zeroes\n\tremoved) in code that creates form XObjects (mostly generation of\n\tappearance streams for form fields as well as overlay and\n\tunderlay) and in the flatten rotation code that was added in qpdf\n\t10.1.\n\n2021-02-10  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Require a C++-14 compiler.\n\n\t* Detect loops when adding when reading outlines dictionary upon\n\tinitialization of QPDFOutlineDocumentHelper (fuzz issue 30507).\n\n\t* Add \"attachments\" as an additional json key, and add some\n\tinformation about attachments to the json output.\n\n\t* Add new command-line arguments for operating on attachments:\n\t--list-attachments, --add-attachment, --remove-attachment,\n\t--copy-attachments-from. See --help and manual for details.\n\n2021-02-09  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add methods to QUtil for working with PDF timestamp strings:\n\tpdf_time_to_qpdf_time, qpdf_time_to_pdf_time,\n\tget_current_qpdf_time.\n\n2021-02-08  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add helper classes for file attachments:\n\tQPDFEmbeddedFileDocumentHelper, QPDFFileSpecObjectHelper,\n\tQPDFEFStreamObjectHelper. See their header files for details.\n\n2021-02-07  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add new functions QUtil::pipe_file and QUtil::file_provider for\n\tsending the contents of a file through a pipeline as binary data.\n\n2021-02-04  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add new option --password-file=file for reading the decryption\n\tpassword from a file. file may be \"-\" to read from standard input.\n\tFixes #499.\n\n\t* By default, give an error if a user attempts to encrypt a file\n\twith a 256-bit key, a non-empty user password, and an empty owner\n\tpassword. Such files are insecure since they can be opened with no\n\tpassword. To allow explicit creation of files like this, pass the\n\tnew --allow-insecure option. Thanks to github user RobK88 for a\n\tdetailed analysis and for reporting this issue. Fixes #501.\n\n2021-02-02  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: if a form XObject lacks a resources dictionary,\n\tconsider any names in that form XObject to be referenced from the\n\tcontaining page. This is compliant with older PDF versions. Also\n\tdetect if any form XObjects have any unresolved names and, if so,\n\tdon't remove unreferenced resources from them or from the page\n\tthat contains them. Fixes #494.\n\n2021-01-31  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: properly handle strings if they appear in inline image\n\tdictionaries while externalizing inline images.\n\n2021-01-30  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add examples/pdf-name-number-tree.cc to illustrate new\n\tname/number tree API and new array/dictionary iterator API.\n\n2021-01-29  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add methods to QPDFObjectHandle that provide a C++ iterator API,\n\tincluding C++11 range-for iteration, over arrays and dictionaries.\n\tWith this, you can do\n\n\tfor (auto i: dict_oh.ditems())\n\t{\n\t    // i.first is a string, i.second is a QPDFObjectHandle\n\t}\n\tfor (auto i: array_oh.aitems())\n\t{\n\t    // i is a QPDFObjectHandle\n\t}\n\n\t* QPDFObjectHandle::is* methods to check type now return false on\n\tuninitialized objects rather than crashing or throwing a logic\n\terror.\n\n2021-01-24  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Implement remove for name and number trees as well as exposing\n\tremove and insertAfter methods for iterators. With this addition,\n\tqpdf now has robust read/write support for name and number trees.\n\n2021-01-23  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add an insert method to QPDFNameTreeObjectHelper and\n\tQPDFNumberTreeObjectHelper.\n\n\t* QPDFNameTreeObjectHelper and QPDFNumberTreeObjectHelper will\n\tautomatically repair broken name and number trees by default. This\n\tbehavior can be turned off.\n\n\t* Change behavior of QPDFObjectHandle::newUnicodeString so that it\n\tencodes ASCII or PDFDocEncoding if those encodings will support\n\tall the characters in the string, resorting to UTF-16 only if the\n\tother encodings are insufficient. This is a cleaner implementation\n\tof the intention of encoding strings for use outside of contents\n\tand results in fewer instances of ASCII strings being needlessly\n\tencoded as UTF-16. This change may cause qpdf to generate\n\tdifferent output from the same input when form field values are\n\tset using methods from QPDFFormFieldObjectHelper.\n\n2021-01-16  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add new constructors for QPDFNameTreeObjectHelper and\n\tQPDFNumberTreeObjectHelper that take a QPDF object so they can\n\tcreate indirect objects and issue warnings. The old constructors\n\tare deprecated and will be removed in qpdf 11. Just pass in the\n\towning QPDF of the object handle used to initialize the helpers.\n\n\t* Re-implement QPDFNameTreeObjectHelper and\n\tQPDFNumberTreeObjectHelper to be much more efficient and to have\n\tan iterator-based API in addition to the existing one. This makes\n\tit possible to use \"range-for\" loops over these helpers and to\n\titerate through name and number trees without creating a map\n\tcontaining all the keys and values, which is slow and potentially\n\tconsumes a lot of memory.\n\n\t* Add warn() to QPDF's public API.\n\n2021-01-11  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Fix very old error in code that was finding attachment streams.\n\tProbably this error never mattered, but the code was still not\n\texactly right.\n\n2021-01-06  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Give warnings instead of segfaulting if a QPDF operation is\n\tattempted after calling closeInputSource(). Fixes #495.\n\n2021-01-05  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 10.1.0: release\n\n2021-01-04  Jay Berkenbilt  <ejb@ql.org>\n\n\t* When qpdf CLI extracts pages, it now only attempts to remove\n\tunreferenced resources from the pages that it is keeping. This\n\tchange dramatically reduces the time it takes to extract a small\n\tnumber of pages from a large, complex file.\n\n\t* Move getNext()->write() calls in some pipelines to ensure that\n\tstate gates properly reset even if the next pipeline's write\n\tthrows an exception (fuzz issue 28262).\n\n2021-01-03  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Don't include -o nospace with zsh completion setup so file\n\tcompletion works normally. Fixes #473.\n\n2021-01-02  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Make QPDFPageObjectHelper methods pipeContents, parseContents,\n\tand addContentTokenFilter work with form XObjects.\n\n\t* Rename some QPDFPageObjectHelper methods and make them support\n\tform XObjects as well as pages. The old names will be preserved\n\tfrom compatibility.\n\t- pipePageContents -> pipeContents\n\t- parsePageContents -> parseContents\n\n\t* Add QPDFObjectHandle::parseAsContents to apply ParserCallbacks\n\tto a form XObject.\n\n\t* QPDFPageObjectHelper::externalizeInlineImages can be called with\n\tform XObjects as well as pages.\n\n\t* Bug fix: QPDFPageObjectHelper::externalizeInlineImages was not\n\tdescending into form XObjects on a page. It now does this by\n\tdefault. In the extremely unlikely event that anyone was actually\n\tdepending on the old behavior, it is available by passing\n\tshallow=true to the externalizeInlineImages call.\n\n\t* Bug fix: QPDFObjectHandle::filterPageContents was broken for\n\tpages with an array of content streams. This caused\n\texternalize-inline-images to also be broken for this case.\n\n2021-01-01  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add methods to QPDFPageObjectHelper: forEachXObject,\n\tforEachImage, forEachFormXObject to call a function on each\n\tXObject (or image or form XObject) in a page or form XObject,\n\tpossibly recursing into nested form XObjects.\n\n\t* Add method QPDFPageObjectHelper::getFormXObjects to return a map\n\tof keys to form XObjects (non-recursively) from a page or form\n\tXObject.\n\n\t* Add method QPDFObjectHandle::isImage to test whether an object\n\tis an image.\n\n2020-12-31  Jay Berkenbilt  <ejb@ql.org>\n\n\t* QPDFPageObjectHelper::removeUnreferencedResources can now be\n\tcalled with a QPDFPageObjectHelper created from a form XObject.\n\tThe method already recursed into form XObjects.\n\n\t* Rename some QPDFPageObjectHelper methods and make them support\n\tform XObjects as well as pages. The old names will be preserved\n\tfrom compatibility.\n\t- getPageImages -> getImages\n\t- filterPageContents -> filterContents\n\n\t* Add QPDFObjectHandle::isFormXObject to test whether an object is\n\ta form XObject.\n\n2020-12-30  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QPDFPageObjectHelper::flattenRotation and --flatten-rotation\n\toption to the qpdf CLI. The flattenRotation method removes any\n\t/Rotate key from a page dictionary and implements the same\n\trotation by modifying the page's contents such that the various\n\tpage boxes are altered and the page renders identically. This can\n\tbe used to work around buggy PDF applications that don't properly\n\thandle page rotation. The --flatten-rotation option to the qpdf\n\tCLI calls flattenRotation for every page.\n\n2020-12-26  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QPDFObjectHandle::setFilterOnWrite, which can be used to\n\ttell QPDFWriter not to filter a stream on output even if it can.\n\tYou can use this to prevent QPDFWriter from touching a stream\n\t(either uncompressing or compressing) that you have optimized or\n\totherwise ensured looks exactly the way you want it, even if\n\tdecode level or stream compression would otherwise cause\n\tQPDFWriter to modify the stream.\n\n\t* Add ostream << for QPDFObjGen. (Don't ask why it took 7.5 years\n\tfor me to decide to do this.)\n\n2020-12-25  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Refactor write code to eliminate an extra full traversal of\n\tobjects in the file and to remove assumptions that preclude stream\n\treferences from appearing in /DecodeParms of filterable streams.\n\tThis results in an approximately 8% performance reduction in write\n\ttimes.\n\n2020-12-23  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Allow library users to provide their own decoders for stream\n\tfilters by deriving classes from QPDFStreamFilter and registering\n\tthem using QPDF::registerStreamFilter. Registered stream filters\n\tprovide code to validate and interpret /DecodeParms for a specific\n\t/Filter and also to provide a pipeline that will decode. Note that\n\tit is possible to encode to a filter type that is not supported\n\teven without this feature. See examples/pdf-custom-filter.cc for\n\tan example of using custom stream filters.\n\n2020-12-22  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QPDFObjectHandle::makeDirect(bool allow_streams) -- if\n\tallow_streams is true, preserve indirect references to streams\n\trather than throwing an exception. This allows the object to be\n\tmade as direct as possible while preserving stream references.\n\n2020-12-20  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add qpdf_register_progress_reporter method to C API,\n\tcorresponding to QPDFWriter::registerProgressReporter. Fixes #487.\n\n2020-11-28  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add new functions to the C API for manipulating\n\tQPDFObjectHandles. The new functions allow creation and\n\tmodification of objects, which brings a lot of additional power to\n\tthe C API. See include/qpdf/qpdf-c.h for details and\n\texamples/pdf-c-objects.c for a simple example.\n\n2020-11-21  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 10.0.4: release\n\n\t* Fix QIntC::range_check to handle negative numbers properly (fuzz\n\tissue 26994).\n\n2020-11-11  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Treat a direct page object as a runtime error rather than a\n\tlogic error since it is actually possible to create a file that\n\thas this (fuzz issue 27393).\n\n2020-11-09  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Handle \".\" appearing in --pages not preceded by a numeric range\n\tas a special case in command-line parsing code.\n\n2020-11-04  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Ignore the value of the offset/generation field in an xref entry\n\tfor a deleted object. Also attempt file recovery on lower-level\n\texceptions thrown while reading the xref table. Fixes #482.\n\n2020-10-31  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 10.0.3: release\n\n\t* Don't enter extension initialization in QPDFWriter on a direct\n\tobject. Fixes stack overflow in pathological case of /Root being a\n\tdirect object (fuzz issue 26761).\n\n\t* My previous fix to #449 (handling foreign streams with indirect\n\tobjects in /Filter and/or /DecodeParms) was incorrect and caused\n\tother problems. There is a now a correct fix to the original\n\tproblem. Fixes #478.\n\n2020-10-27  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 10.0.2: release\n\n2020-10-25  Jay Berkenbilt  <ejb@ql.org>\n\n\t* When signing distribution files, generate sha256 checksums\n\tinstead of md5, sha1, and sha512. sha256 seems to be more widely\n\tused, and there's no reason to use md5 or sha1 anymore.\n\n\t* Official Windows releases are now built using the openssl crypto\n\tprovider. The native provider is still available for selection at\n\truntime using the QPDF_CRYPTO_PROVIDER environment variable.\n\n\t* Bug fix: --no-warn was not suppressing some warnings that might\n\tbe generated by --split-pages.\n\n2020-10-23  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: when concatenating content streams, insert a newline if\n\tneeded to prevent the last token from the old stream from being\n\tmerged with the first token of the new stream. Qpdf was mistakenly\n\tconcatenating the streams without regard to the specification that\n\tcontent streams are to be broken on token boundaries. Fixes #444.\n\n\t* fix-qdf: handle empty streams better with ignore newline by\n\ttreating them as empty even though, technically, a blank line\n\twould be required inside the Stream. This just makes it easier to\n\tadd place-holder empty streams while editing qdf files by hand.\n\n2020-10-22  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Fix memory leak that could occur if objects in object streams\n\twere resolved more than once and the objects within the object\n\tstreams contained circular references. This leak could be\n\ttriggered when qpdf was run with --object-streams=generate on\n\tfiles that already had object streams containing circular\n\treferences (fuzz issue 23642).\n\n\t* Add QIntC::range_check for checking to see whether adding two\n\tnumbers together will cause an overflow.\n\n\t* Fix loop detection problem when traversing page thumbnails\n\tduring optimization (fuzz issue 23172).\n\n2020-10-21  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: properly handle copying foreign streams that have\n\tindirect /Filter or /DecodeParms keys when stream data has been\n\treplaced. The circumstances leading to this bug are very unusual\n\tbut would cause qpdf to either generate an internal error or some\n\tother kind of warning situation if it would occur. Fixes #449.\n\n\t* Qpdf's build and CI has been migrated from Azure Pipelines\n\t(Azure DevOps) to GitHub Actions.\n\n\t* Remove some fuzz files that triggered Mal/PDFEx-H with some\n\tvirus scanners. There's plenty of coverage in the fuzz corpus\n\twithout these files, and it's a nuisance to have virus checkers\n\tremove them. Fixes #460.\n\n\t* Ensure that numeric conversion is not affected by the user's\n\tglobal locale setting. Fixes #459.\n\n\t* Add qpdf-<version>-linux-x86_64.zip to the list of built\n\tdistributions. This is a simple zip file that contains just the\n\tqpdf executables and the dependent shared libraries that would not\n\tordinarily be present on a base system. This minimal binary\n\tdistribution works as is when used as a Lambda layer in AWS and\n\tcould be suitable for inclusion in a docker image or other\n\tstandalone Linux/x86_64 environment where you want minimal support\n\tfor running the qpdf executable. Fixes #352.\n\n2020-10-20  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add --warning-exit-0 option to the qpdf command line. When\n\tspecified, qpdf will exit with a status of 0 rather than 3 when\n\tthere are warnings without errors. Combine with --no-warn to\n\tcompletely ignore warnings.\n\n\t* Bug fix: fix further cases in which errors were written to\n\tstdout. Fixes #438.\n\n\t* Build option: add --disable-rpath option to ./configure, which\n\tdisables passing -rpath to the linker when building shared\n\tlibraries with libtool. Fixes #422.\n\n2020-10-16  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Accept pull request that improves how the Windows native crypto\n\tprovider is obtained.\n\n\t* Accept pull request that improves performance in processing\n\tfiles in memory.\n\n\t* Accept pull requests that improve openssl configuration and\n\terror reporting.\n\n\t* Build using GitHub Actions. The intention is that this will\n\treplace Azure Pipelines as the official CI for qpdf for the next\n\trelease.\n\n2020-10-15  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Make many minor improvements to the build process and code\n\thealth, including fixing a lgtm warning and compiler warnings from\n\tnewer version of gcc and MSVC toolchains. Add several cosmetic\n\timprovements to build output in CI.\n\n\t* Added LL_FMT to config.h.in. This is populated automatically by\n\tautoconf, but if build with your own build system, you may need to\n\tdefine it as whatever the format string needed by printf for long\n\tlong is. Usually this is \"%lld\", but it can be \"%I64d\" for some\n\tolder Windows-based compilers.\n\n2020-04-29  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: qpdf --check was writing errors and warnings reported\n\tby checkLinearization to stdout instead of stderr. Fixes #438.\n\n2020-04-09  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 10.0.1: release\n\n2020-04-08  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: qpdf 10.0.0 introduced a bug in which\n\tQPDFObjectHandle::getStreamData would return the raw data when\n\tcalled on an unfilterable stream instead of throwing an exception\n\tlike it's supposed to. Fixes #425.\n\n2020-04-07  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Improve pdf-invert-images example to show a pattern of copying\n\tstreams into another QPDF object to enable a stream data provider\n\tto access the original stream data.\n\n\t* Fix error that caused a compilation error with clang. Fixes\n\t#424.\n\n2020-04-06  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 10.0.0: release\n\n\t* Move random number generation into the crypto providers. The old\n\tos-based secure random number generation with fallback to insecure\n\trandom number generation (only if allowed at build time) has moved\n\tinto the native crypto provider. If using other providers\n\t(currently gnutls or openssl), random number generation will use\n\tthose libraries. The old interfaces for supplying your own random\n\tnumber generator are still in place. Fixes #418.\n\n\t* Source-level incompatibility: remove QUtil::srandom. There was\n\tno reason to ever call this, and it didn't do anything unless\n\tinsecure random number generation was compiled in, which it is not\n\tby default. If you were calling this, just remove the call because\n\tit wasn't doing anything anyway.\n\n\t* Add openssl crypto provider, contributed by Dean Scarff. This\n\tprovider is implemented using OpenSSL and also works with\n\tBoringSSL.\n\n2020-04-04  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add a new provideStreamData method for StreamDataProvider that\n\tallows a success code to be returned and that accepts the\n\tsuppress_warnings and will_retry methods. This makes it possible\n\tto have a StreamDataProvider call pipeStreamData and propagate its\n\tresults back. This change allows better error handling and\n\trecovery when objects are copied from other files and when\n\t\"immediate copy from\" is enabled.\n\n\t* When copying foreign streams, the same type of recovery from\n\tstreams with filtering errors is performed as when dealing with\n\tstreams in the original input. This could happen, for example, if\n\tyou are using the --pages option to take pages from another file\n\tand that file has errors in it.\n\n\t* Add a new version of QPDFObjectHandle::pipeStreamData whose\n\treturn value indicates overall success or failure rather than\n\twhether nor not filtering was attempted. It should have always\n\tbeen this way. This change was done in a backward-compatible\n\tfashion. Previously existing pipeStreamData methods' return values\n\tmean the same as always.\n\n\t* Add \"objectinfo\" section to json output. In this release,\n\tinformation about whether each object is a stream or not is\n\tprovided. There's otherwise no way to tell conclusively from the\n\tjson output. Over time, other computed information about objects\n\tmay be added here.\n\n\t* Add new option --remove-unreferenced-resources that takes auto,\n\tyes, or no as options. This tells qpdf whether to attempt to\n\tremove unreferenced resources from pages when doing page splitting\n\toperations. Prior to this change, the default was to attempt to\n\tremove unreferenced resources, but this operation was very slow,\n\tespecially for large and complex files. The new default is \"auto\",\n\twhich tells qpdf to analyze the file for shared resources. This is\n\ta relatively quick test. If no shared resources are found, then we\n\tdon't attempt to remove unreferenced resources, because\n\tunreferenced resources never occur in files without shared\n\tresources. To force qpdf to look for and remove unreferenced\n\tresources, use --remove-unreferenced-resources=yes. The option\n\t--preserve-unreferenced-resources is now a synonym for\n\t--remove-unreferenced-resources=no.\n\n\t* Use std::atomic for unique ID generation internally within the\n\tlibrary. This eliminates the already extremely low chance of a\n\tcollision, improves thread safety, and removes a dependency on a\n\trandom number generator. Thanks to Dean Scarff for the\n\tcontribution.\n\n2020-04-03  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Allow qpdf to be built on systems without wchar_t. All \"normal\"\n\tsystems have wchar_t because it is part of the C++ standard, but\n\tthere are some stripped down environments that don't have it. See\n\tREADME.md (search for wchar_t) for instructions and a discussion.\n\tFixes #406.\n\n\t* Add two extra optional arguments to\n\tQPDFPageObjectHelper::placeFormXObject to control whether the\n\tplaced item is allowed to be shrunk or expanded to fit within or\n\tmaximally fill the destination rectangle. Prior to this change,\n\tplaceFormXObject might shrink it but would never expand it.\n\n\t* When calling the C API, accept any non-zero value as TRUE rather\n\tthan just 1. This appears to resolve issues on Windows when\n\tcalling some versions of the DLL directly from other languages.\n\n2020-04-02  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add method QPDFObjectHandle::unsafeShallowCopy for copying only\n\ttop-level dictionary keys or array items. See comments in\n\tQPDFObjectHandle.hh for when this should be used.\n\n\t* Remove Members class indirection for QPDFObjectHandle. Those are\n\tcopied and assigned too often, and that change caused a very\n\tsubstantial performance hit.\n\n2020-03-31  Jay Berkenbilt  <ejb@ql.org>\n\n\t* When detecting unreferenced images during page splitting, if any\n\tXObjects are form XObjects, recursively descend into them and\n\tremove any unreferenced objects from them too. Fixes #373.\n\n\t* Add QPDFObjectHandle::filterAsContents, which filters a stream's\n\tdata as if it were page contents. This can be useful to filter\n\tform XObjects the same way we would filter page contents.\n\n\t* If QPDF_EXECUTABLE is set, use it as the path to qpdf for\n\tpurposes of completion. This variable is only read during the\n\texecution of `qpdf --completion-zsh` and `qpdf\n\t--completion-bash`. It is not used during the actual evaluation of\n\tcompletions.\n\n2020-02-22  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Update pdf-set-form-values.cc to use and mention\n\tgenerateAppearance, which hadn't been added when the example was\n\toriginally created.\n\n\t* Detect, warn, and correct the case of /Pages in the document\n\tcatalog incorrectly pointing to a page or intermediate node\n\tinstead of the root of the pages tree. Fixes #398.\n\n2020-01-26  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 9.1.1: release\n\n\t* Bug fix: in qdf mode, do not write out any XRef streams that may\n\thave appeared in the original file. These are usually\n\tunreferenced, but with --preserve-unreferenced, they could be\n\twritten out, which breaks fix-qdf's assumption that there is at\n\tmost one XRef stream and that it appears at the end of the file.\n\tFixes #386.\n\n\t* Bug fix: when externalizing inline images, a colorspace value\n\tthat was a lookup key in the page's /Resource -> /ColorSpace\n\tdictionary was not properly handled. Fixes #392.\n\n\t* Add \"encrypt\" key to the json output. This contains largely the\n\tsame information as given by --show-encryption but in a\n\tconsistent, parseable format.\n\n\t* Add options --is-encrypted and --requires-password. These can be\n\tused with files, including encrypted files with unknown passwords,\n\tto determine whether or not a file is encrypted and whether a\n\tpassword is required to open the file. The --requires-password\n\toption can also be used to determine whether a supplied password\n\tis correct. Information is supplied through exit codes, making\n\tthese options particularly useful for shell scripts. Fixes #390.\n\n2020-01-14  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Fix for Windows being unable to acquire crypt context with a new\n\tkeyset. Thanks to Cloudmersive for the fix. Fixes #387.\n\n\t* Rewrite fix-qdf in C++. This means fix-qdf is a proper\n\texecutable now, and there is no longer a runtime requirement on\n\tperl.\n\n\t* Add QUtil::call_main_from_wmain, a helper function that can be\n\tcalled in the body of wmain to convert UTF-16 arguments to UTF-8\n\targuments and then call another main function.\n\n2020-01-13  Jay Berkenbilt  <ejb@ql.org>\n\n\t* QUtil::read_lines_from_file: add new versions that use FILE*,\n\tuse FILE* instead if std::ifstream internally to support correct\n\thandling of Unicode filenames in Windows, and add the option to\n\tpreserve line endings.\n\n2019-11-17  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 9.1.0: release\n\n\t* This is the first version of qpdf that requires C++-11.\n\n2019-11-09  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 9.1.rc1: release\n\n\t* Improve behavior of wildcard expansion for msvc executable when\n\trun from the Windows cmd.exe shell. Unlike in UNIX environments,\n\tWindows leaves it up to the executable to expand its own\n\twildcards. Fixes #224.\n\n\t* Allow :even or :odd to be appended to numeric ranges for\n\t--pages, --rotate, and other options that take page ranges.\n\n\t* When reading /P from the encryption dictionary, use static_cast\n\tinstead of QIntC to convert the value to a signed integer. The\n\tvalue of /P is a bit field, and PDF files have been found in the\n\twild where /P is represented as an unsigned integer even though\n\tthe spec states that it is a signed 32-bit value. By using\n\tstatic_cast, we allow qpdf to compensate for writers that\n\tincorrectly represent the correct bit field as an unsigned value.\n\tFixes #382.\n\n2019-11-05  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add support for pluggable crypto providers, enabling multiple\n\timplementations of the cryptographic functions needed by qpdf.\n\tThis feature was added by request of Red Hat, which recognized the\n\tuse of qpdf's native crypto implementations as a potential\n\tsecurity liability, preferring instead to get all crypto\n\tfunctionality from a third-party library that receives a lot of\n\tscrutiny. However it was also important to me to not impose any\n\tunnecessary third party dependencies on my users or packagers,\n\tsome of which build qpdf for lots of environments, some of which\n\tmay not easily support gnutls. Starting in qpdf 9.1.0, it is be\n\tpossible to build qpdf with both the native and gnutls crypto\n\tproviders or with either in isolation. In support of this feature,\n\tnew classes QPDFCryptoProvider and QPDFCryptoImpl have been added\n\tto the public interface. See QPDFCryptoImpl.hh for details about\n\tadding your own crypto provider and QPDFCryptoProvider.hh for\n\tdetails about choosing which one is used. Note that selection of\n\tcrypto providers is invisible to anyone who doesn't explicitly\n\tcare. Neither end users nor developers have to be concerned about\n\tit.\n\n\t* The environment variable QPDF_CRYPTO_PROVIDER can be used to\n\toverride qpdf's default choice of crypto provider. The\n\t--show-crypto flag to the qpdf CLI can be used to present a list\n\tof supported crypto providers with the default provider always\n\tlisted first.\n\n\t* Add gnutls crypto provider. Thanks to Zdenek Dohnal for\n\tcontributing the code that I ultimately used in the gnutls crypto\n\tprovider and for engaging in an extended discussion about this\n\tfeature. Fixes #218.\n\n2019-10-22  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Incorporate changes from Masamichi Hosoda <trueroad@trueroad.jp>\n\tto properly handle signature in the following ways:\n\t  - Always represent /Contents in a signature dictionary as a hex\n\t    string\n\t  - Do not compress signature dictionaries when generating object\n\t    streams\n\t  - Do not encrypt/decrypt the /Contents field of the signature\n\t    dictionary when creating or reading encrypted files\n\n\t* Incorporate changes from Masamichi Hosoda <trueroad@trueroad.jp>\n\tto add additional methods for making it possible to gain deeper\n\tinsight into cross reference tables and object renumbering. These\n\tnew API calls make it possible for applications to go into PDF\n\tfiles created by qpdf and make changes to them that go beyond\n\tworking with the PDF at the object level. The specific use case\n\tfor these changes was to write an external tool to perform digital\n\tsignature, but there could be other uses as well. New methods\n\tinclude the following, all of which are described in their\n\trespective headers:\n\t  - QPDF::getXRefTable()\n\t  - QPDFObjectHandle::getParsedOffset()\n\t  - QPDFWriter::getRenumberedObjGen(QPDFObjGen)\n\t  - QPDFWriter::getWrittenXRefTable()\n\n2019-10-12  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 9.0.2: release\n\n\t* Change the name of the temporary file used by --replace-input to\n\twork with arbitrary absolute or relative paths without requiring\n\tpath splitting logic. Fixes #365.\n\n2019-09-20  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 9.0.1: release\n\n2019-09-19  Jay Berkenbilt  <ejb@ql.org>\n\n\t* When converting an array to a Rectangle, ensure that llx <= urx\n\tand lly <= ury. This prevents flatten-annotations from flipping\n\tfields whose coordinates are messed up in the input. Fixes #363.\n\n\t* Warn when duplicated dictionary keys are found during parsing.\n\tThe behavior remains as before: later keys override earlier ones.\n\tHowever, this generates a warning now rather than being silently\n\tignored. Fixes #345.\n\n2019-09-17  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Fix a few integer warnings for big-endian systems.\n\n\t* QIntC tests: don't assume char is signed. Fixes #361.\n\n2019-08-31  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 9.0.0: release\n\n\t* Add QPDF::anyWarnings() method to find out whether there have\n\tbeen any warnings without resetting the list.\n\n\t* Add QPDF::closeInputSource() method to release the input source\n\tso the input file can be deleted or renamed.\n\n\t* Add methods rename_file and remove_file to QUtil.\n\n2019-08-24  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QPDF::userPasswordMatched() and QPDF::ownerPasswordMatched()\n\tmethods so it can be determined separately whether the supplied\n\tpassword matched the user password, the owner password, or both.\n\tFixes #159.\n\n2019-08-23  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add --recompress-streams option to qpdf and\n\tQPDFWriter::setRecompressFlate to cause QPDFWriter to recompress\n\tstreams that are already compressed with /FlateDecode.\n\n\t* Add option Pl_Flate::setCompressionLevel to globally set the\n\tzlib compression level used by all Pl_Flate pipelines.\n\n\t* Add --compression-level flag to qpdf to set the zlib compression\n\tlevel. When combined with --recompress-flate, this will cause most\n\tof qpdf's streams to use the maximum compression level. This\n\tresults in only a very small amount of savings in size that comes\n\tat a fairly significant performance cost, but it could be useful\n\tfor archival files or other cases where every byte counts and\n\tcreation time doesn't matter so much. Note that using\n\t--object-streams=generate in combination with these options gives\n\tyou the biggest advantage. Fixes #113.\n\n2019-08-22  Jay Berkenbilt  <ejb@ql.org>\n\n\t* In QPDFObjectHandle::ParserCallbacks, in addition to\n\thandleObject(QPDFObjectHandle), allow developers to override\n\thandleObject(QPDFObjectHandle, size_t offset, size_t length). If\n\tthis method appears instead, it is called with the offset of the\n\tobject in the content stream (which may be concatenated from an\n\tarray of streams) and the length of the object. Intervening\n\twhitespace and comments are not included in offset and length.\n\n\t* Add method\n\tQPDFObjectHandle::ParserCallbacks::contentSize(size_t). If\n\tdefined, it is called by the content stream parser before the\n\tfirst call to handleObject, and the argument is the total size in\n\tbytes of the content streams.\n\n\t* Add QPDFObjectHandle::isDirectNull() -- a const method that\n\tallows determining whether an object is a literal null without\n\tattempting to resolve it.\n\n\t* Stop replacing indirect references to null with literal null in\n\tarrays when writing output with QPDFWriter.\n\n2019-08-19  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Accept (and warn for) extraneous whitespace preceding the xref\n\ttable. Fixes #341.\n\n\t* Accept (and warn for) extraneous whitespace between the stream\n\tkeyword and newline. Fixes #329.\n\n\t* Properly handle name tokens containing # not preceding two\n\thexadecimal digits. Such names are invalid in PDF >= 1.2 but valid\n\tin PDF 1.0 and 1.1. Prior to this fix, qpdf's behavior was to\n\ttreat such tokens as an error for PDF >= 1.2, but for older PDF\n\ttokens, the name was silently accepted, and when the name token\n\twas written out, the # was changed to #23, which is the correct\n\tway to represent a # character. This behavior was problematic for\n\tseveral reasons: one is that, ordinarily, content streams are not\n\tparsed, so this would cause things like image references whose\n\tnames contained # to break. Also, even if the input file was 1.0\n\tor 1.1, there's no guarantee that the output file wouldn't be\n\twritten at a new version, resulting in invalid name tokens. The\n\tnew behavior is to issue a warning upon encountering such a token\n\tbut to accept it, regardless of the PDF version. Such tokens are\n\twritten out properly as well. Additionally, the warning message\n\tindicates that the tokens are invalid for PDF >= 1.2. Fixes #332.\n\n\t* Non-compatible API change: remove\n\tQPDFTokenizer::allowPoundAnywhereInName(). There were a lot of\n\tproblems with this. When it was used, any name tokens read would\n\talways be modified on output, which is never the correct behavior.\n\tThis method used to signal QPDFTokenizer to not treat # specially\n\tin name tokens, which resulted in the incorrect behavior whose fix\n\tis described in the preceding item.\n\n2019-08-18  Jay Berkenbilt  <ejb@ql.org>\n\n\t* When traversing the pages tree, if an invalid /Type key is\n\tencountered, fix it. This is not done for all operations, but it\n\twill be done for any case in which getAllPages is called. This\n\tincludes all page-based CLI operations. (Hopefully) Fixes #349.\n\n2019-08-17  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Change internal implementation of QPDF arrays to use sparse\n\tarrays, which results in using much less memory for arrays with\n\tlarge numbers of nulls. Various files have been encountered in the\n\twild that contains thousands of arrays with millions of nulls.\n\tFixes #305, #311.\n\n2019-07-03  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Non-compatible API change: change\n\tQPDFOutlineDocumentHelper::getTopLevelOutlines and\n\tQPDFOutlineObjectHelper::getKids to return a std::vector instead\n\tof a std::list of QPDFOutlineObjectHelper objects. This is to work\n\taround bugs with some compilers' STL implementations that are\n\tchoking with list here. There's no deep reason for these to be\n\tlists instead of vectors. Fixes #297.\n\n2019-06-22  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Handle encrypted files with missing or invalid /Length entries\n\tin the encryption dictionary.\n\n\t* QPDFWriter: allow calling set*EncryptionParameters before\n\tcalling setFilename. Fixes #336.\n\n\t* It now works to run --completion-bash and --completion-zsh when\n\tqpdf is started from an AppImage.\n\n\t* Provided a more useful error message when Windows can't get\n\tsecurity context. Thanks to user zdenop for supplying some code.\n\tFixes #286.\n\n\t* Favor PointerHolder over manual memory allocation in shippable\n\tcode where possible. Fixes #235.\n\n\t* If pkg-config is available, use it to local libjpeg and zlib. If\n\tnot, fall back to old behavior. Fixes #324.\n\n\t* The \"make install\" target explicitly sets a mode rather than\n\trelying the user's umask. Fixes #326.\n\n\t* When a file has linearization warnings but no errors, qpdf\n\t--check and --check-linearization now exit with code 3 instead\n\tof 2. Fixes #50.\n\n\t* Add new function QUtil::read_file_into_memory.\n\n2019-06-21  Jay Berkenbilt  <ejb@ql.org>\n\n\t* When supported, qpdf builds with -fvisibility=hidden, which\n\tremoves non-exported symbols from the shared library in a manner\n\tsimilar to how Windows DLLs work. This is better for performance\n\tand also better for safety and protection of private interfaces.\n\tSee https://gcc.gnu.org/wiki/Visibility. *NOTE*: If you are\n\tgetting linker errors trying to catch exceptions or derive things\n\tfrom a base class in the qpdf library, it's possible that a\n\tQPDF_DLL_CLASS declaration is missing somewhere. Please report\n\tthis as a bug at https://github.com/qpdf/qpdf/issues.\n\n\t* Source-level incompatibility: remove the version\n\tQPDF::copyForeignObject with an unused boolean parameter. If you\n\twere, for some reason, calling this, just take the parameter away.\n\n\t* Source-level incompatibility: remove the version\n\tQPDFTokenizer::expectInlineImage with no arguments. It didn't\n\tproduce correct inline images. This is a very low-level routine.\n\tThere is little reason to call it outside of qpdf's lexical\n\tengine.\n\n\t* Source-level incompatibility: rename QUtil::strcasecmp to\n\tQUtil::str_compare_nocase. This is a non-compatible change, but\n\tQUtil::strcasecmp is hardly the most important part of qpdf's API.\n\tThe reason for this change is that strcasecmp is a macro on some\n\tsystems, and that was causing problems when QUtil.hh was included\n\tin certain circumstances. Fixes #242.\n\n2019-06-20  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Enable compilation with additional warnings for integer\n\tconversion and sign (-Wsign-conversion, -Wconversion for gcc and\n\tsimilar; -W3 for msvc) if supported. These warnings are on by\n\tdefault can be turned off by passing --disable-int-warnings\n\n\t* Fix all integer sign and conversion warnings. This makes all\n\tinteger type conversions that have potential data loss explicit\n\twith calls that do range checks and raise an exception.\n\n\t* Change out_bufsize argument to Pl_Flate's constructor for int to\n\tunsigned int for compatibility with underlying zlib\n\timplementation.\n\n\t* Change QPDFObjectHandle::pipeStreamData's encode_flags argument\n\tfrom unsigned long to int since int is the underlying type of the\n\tenumerated type values that are passed to it. This change should\n\tbe invisible to virtually all code unless you are compiling with\n\tstrict warning flags and explicitly casting to unsigned long.\n\n\t* Add methods to QPDFObjectHandle to return the value of Integer\n\tobjects as int and unsigned int with range checking and fallback\n\tbehavior to avoid silent underflow/overflow conditions.\n\n\t* Add functions to QUtil to convert unsigned integers to strings,\n\tavoiding implicit conversion between unsigned and signed integer\n\ttypes.\n\n\t* Add QIntC.hh, containing integer type converters that do range\n\tchecking.\n\n2019-06-18  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Remove previously submitted qpdf_read_memory_fuzzer as it is a\n\tsmall subset of qpdf_fuzzer.\n\n2019-06-15  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Update CI (Azure Pipelines) to run tests with some sanitizers.\n\n\t* Do \"ideal integration\" with oss-fuzz. This includes adding a\n\tbetter fuzzer with a seed corpus and adding automated tests of the\n\tfuzzer with the test data.\n\n\t* When parsing files, while reading an object, if there are too\n\tmany consecutive errors without enough intervening successes, give\n\tup on the specific object. This reduces cases in which very badly\n\tdamaged files send qpdf into a tail spin reading one character at\n\ta time and reporting warnings.\n\n2019-06-13  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Perform initial integration of Google's oss-fuzz project by\n\tcopying the fuzzer someone from Google already did into the qpdf\n\trepository and adding build support. This shift in control is in\n\tpreparation for an ideal integration with oss-fuzz.\n\n2019-06-09  Jay Berkenbilt  <ejb@ql.org>\n\n\t* When /DecodeParms is an empty list, ignore it on read and delete\n\tit on write. Fixes #331.\n\n2019-05-18  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 8.4.2: release\n\n2019-05-16  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Fix memory error in Windows-only code from typo. Fixes #330.\n\n2019-04-27  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 8.4.1: release\n\n2019-04-20  Jay Berkenbilt  <ejb@ql.org>\n\n\t* When qpdf --version is run, it will detect if the qpdf CLI was\n\tbuilt with a different version of qpdf than the library. This\n\tusually indicates that multiple versions of qpdf are installed and\n\tthat the library path is not set up properly. This situation\n\tsometimes causes confusing behavior for users who are not actually\n\trunning the version of qpdf they think they are running.\n\n\t* Add parameter --remove-page-labels to remove page labels from\n\toutput. In qpdf 8.3.0, the behavior changed so that page labels\n\twere preserved when merging and splitting files. Some users were\n\trelying on the fact that if you ran qpdf --empty --pages ... all\n\tpage labels were dropped. This option makes it possible to get\n\tthat behavior if it is explicitly desired. Fixes #317.\n\n\t* Add parameter --keep-files-open-threshold to override the\n\tmaximum number of files that qpdf will allow to be kept open at\n\tonce. Fixes #288.\n\n\t* Handle Unicode characters in filenames properly on Windows. The\n\tchanges to support Unicode on the CLI in Windows broke Unicode\n\tfilenames on that platform. Fixes #298.\n\n\t* Slightly tighten logic that determines whether an object is a\n\tpage. The previous logic was sometimes failing to preserve\n\tannotations because they were passing the overly loose test for\n\twhether something was a page. This fix has a slight risk of\n\tcausing some extraneous objects to be copied during page splitting\n\tand merging for erroneous PDF files whose page objects contain\n\tinvalid types or are missing the /Type key entirely, both of which\n\twould be invalid according to the PDF specification.\n\n\t* Revert change that included preservation of outlines (bookmarks)\n\tin --split-pages. The way it was implemented caused a very\n\tsignificant performance penalty when splitting pages with\n\toutlines. We need a better solution that only copies the relevant\n\titems, not the whole tree.\n\n2019-03-11  Jay Berkenbilt  <ejb@ql.org>\n\n\t* JSON serialization: add missing leading 0 to decimal values\n\tbetween -1 and 1. Fixes #308.\n\n2019-02-01  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 8.4.0: release\n\n2019-01-31  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: do better pre-checks on images before optimizing;\n\trefuse to optimize images that can't be converted to JPEG because\n\tof colorspace or depth.\n\n\t* Add new options --externalize-inline-images, which converts\n\tinline images larger than a specified size to regular images, and\n\t--ii-min-bytes, which tweaks that size.\n\n\t* When optimizing images, inline images are now included in the\n\toptimization, first being converted to regular images. Use\n\t--keep-inline-images to exclude them from optimization. Fixes #278.\n\n\t* Add method QPDFPageObjectHelper::externalizeInlineImages, which\n\tconverts inline images whose size is at least a specified amount\n\tto regular images.\n\n\t* Remove traces of acroread, which hasn't been available in Linux\n\tfor a long time.\n\n2019-01-30  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Do not include space after ID operator in inline image data. The\n\ttoken now correctly contains the image data, the EI operator,\n\tand the delimiter that precedes the EI operator.\n\n\t* Improve locating of an inline image's EI operator to correctly\n\thandle the case of EI appearing inside the image data.\n\n\t* Very low-level QPDFTokenizer API now includes an\n\texpectInlineImage method that takes an input stream, enabling it\n\tto locate an inline image's EI operator better. When this method\n\tis called, the inline image token returned will not contain the EI\n\toperator and will contain correct image data. This is called\n\tautomatically everywhere within the qpdf library. Most user code\n\twill never have to use the low-level tokenizer API. If you use\n\tPl_QPDFTokenizer, this will be done automatically for you. If you\n\tuse the low-level API and call expectInlineImage, you should call\n\tthe new version.\n\n2019-01-29  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: when returning an inline image token, the tokenizer no\n\tlonger includes the delimiter that follows EI. The\n\tQPDFObjectHandle created from the token was correct.\n\n\t* Handle files with direct page objects, which is not allowed by\n\tthe PDF spec but has been seen in the wild. Fixes #164.\n\n2019-01-28  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: when using --stream-data=compress, object streams and\n\txref streams were not compressed. They were compressed if no\n\t--stream-data option was specified. Fixes #271.\n\n\t* When linearizing or getting the list of all pages in a file,\n\treplace duplicated page objects with a shallow copy of the page\n\tobject. Linearization and all page manipulation APIs require page\n\tobjects to be unique. Pages that were originally duplicated will\n\tstill share contents and any other indirect resources. Fixes #268.\n\n2019-01-26  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add --overlay and --underlay options. Fixes #207.\n\n\t* Create examples/pdf-overlay-page.cc to demonstrate use of\n\tpage/form XObject interaction\n\n\t* Add new methods QPDFPageObjectHelper::getFormXObjectForPage,\n\twhich creates a form XObject equivalent to a page, and\n\tQPDFObjectHandle::placeFormXObject, which generates content stream\n\tcode to placing a form XObject on a page.\n\n2019-01-25  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add new method QPDFObjectHandle::getUniqueResourceName() to\n\treturn an unused key available to be used in a resource\n\tdictionary.\n\n\t* Add new method QPDFPageObjectHelper::getAttribute() that\n\tproperly handles inherited attributes and allows for creation of a\n\tcopy of shared attributes. This is very useful if you are getting\n\tan attribute of a page dictionary with the intent to modify it\n\tprivately for that page.\n\n\t* Fix QPDFPageObjectHelper::getPageImages (and the legacy\n\tQPDFObjectHandle::getPageImages()) to properly handle images in\n\tinherited resources dictionaries.\n\n2019-01-20  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Tweak the content code generated for variable text fields to\n\tbetter handle font sizes and multi-line text.\n\n\t* When generating appearance streams for variable text\n\tannotations, properly handle the cases of there being no\n\tappearance dictionary, no appearance stream, or an appearance\n\tstream with no BMC..EMC marker.\n\n\t* When flattening annotations, remove annotations from the file\n\tthat don't have appearance streams. These were previously being\n\tpreserved, but since they are invisible, there is no reason to\n\tpreserve them when flattening annotations.\n\n2019-01-19  Jay Berkenbilt  <ejb@ql.org>\n\n\t* NOTE: qpdf CLI: some non-compatible changes were made to how\n\tqpdf interprets password arguments that contain Unicode characters\n\tthat fall outside of ASCII. On Windows, the non-compatibility was\n\tunavoidable, as explained in the release notes. On all platforms,\n\tit is possible to get the old behavior if desired, though the old\n\tbehavior would almost always result in files that other\n\tapplications were unable to open. As it stands, qpdf should now be\n\table to open passwords encrypted with a wide range of passwords\n\tthat some other viewers might not handle, though even now, qpdf's\n\tUnicode password handling is not 100% complete.\n\n\t* Add --password-mode option, which allows fine-grained control of\n\thow password arguments are treated. This is discussed fully in the\n\tmanual. Fixes #215.\n\n\t* Add option --suppress-password-recovery to disable the behavior\n\tof searching for a correct password by re-encoding the provided\n\tpassword. This option can be useful if you want to ensure you know\n\texactly what password is being used.\n\n2019-01-17  Jay Berkenbilt  <ejb@ql.org>\n\n\t* When attempting to open an encrypted file with a password, if\n\tthe password doesn't work, try alternative passwords created by\n\tre-interpreting the supplied password with different string\n\tencodings. This makes qpdf able to recover passwords with\n\tnon-ASCII characters when either the decryption or encryption\n\toperation was performed with an incorrectly encoded password.\n\n\t* Fix data loss bug: qpdf was discarding referenced resources in\n\tthe case in which a page's resource dictionary contained an\n\tindirect reference for either /Font or /XObject that contained\n\tfonts or XObjects not referenced on all pages that shared the\n\tresource. This was a \"typo\" in the code. The comment explained the\n\tcorrect behavior, and the code was clearly intended to handle this\n\tissue, but the implementation had an error in it. This is fixed by\n\ta single-line change, which can be found in git commit\n\t4bc434000c42a7191e705c8a38216ca6743ad9ff. That commit can be used\n\tas a patch that applies cleanly against qpdf 8.1.0 and forward.\n\tThe bug was introduced in version 8.1.0. For the record, this is\n\tthe first bug in qpdf's history that could result in silent loss\n\tof data when processing a correct input file. Fixes #276.\n\n2019-01-15  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QUtil::possible_repaired_encodings which, given a string,\n\tgenerates other strings that represent re-interpretation of the\n\tbytes in a different coding system. This is used to help recover\n\tpasswords if the password string was improperly encoded on a\n\tdifferent system due to user error or a software bug.\n\n2019-01-14  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add new CLI flags to 128-bit and 256-bit encryption: --assemble,\n\t--annotate, --form, and --modify-other to control encryption\n\tpermissions with more granularity than was allowed with the\n\t--modify flag. Fixes #214.\n\n\t* Add new versions of\n\tQPDFWriter::setR{3,4,5,6}EncryptionParameters that allow\n\tindividual setting of the various permission bits. The old\n\tinterfaces are retained for backward compatibility. In the \"C\"\n\tAPI, add qpdf_set_r{3,4,5,6}_encryption_parameters2. The new\n\tinterfaces use separate booleans for various permissions instead\n\tof the qpdf_r3_modify_e enumerated type, which set permission bits\n\tin predefined groups.\n\n\t* Add versions of utf8 to single-byte character transcoders that\n\treturn a success code.\n\n2019-01-13  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add several more string transcoding and analysis methods to\n\tQUtil for bidirectional conversion between PDF Doc, Win Ansi, Mac\n\tRoman, UTF-6, and UTF-16 along with detection of valid UTF-8 and\n\tUTF-16.\n\n2019-01-12  Jay Berkenbilt  <ejb@ql.org>\n\n\t* In the --pages option, allow the same page to be specified more\n\tthan once. You can now do \"--pages A.pdf 1,1 --\" or\n\t\"--pages A.pdf 1 A.pdf 1\" instead of having to use two different\n\tpaths to specify A.pdf. Fixes #272.\n\n\t* Add QPDFPageObjectHelper::shallowCopyPage(). This method creates\n\ta new page object that is a \"shallow copy\" of the given page as\n\tdescribed in the comments in QPDFPageObjectHelper. The resulting\n\tobject has not been added anywhere but is ready to be passed to\n\tQPDFPageDocumentHelper::addPage of its own QPDF or another QPDF\n\tobject.\n\n\t* Add QPDF::getUniqueId() method to return an identifier that is\n\tintended to be unique within the scope of all QPDF objects created\n\tby the calling application in a single run.\n\n\t* In --pages, allow \".\" as a replacement for the current input\n\tfile, making it possible to say \"qpdf A.pdf --pages . 1-3 --\"\n\tinstead of having to repeat the input filename.\n\n2019-01-10  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add new configure option --enable-avoid-windows-handle, which\n\tcauses the symbol AVOID_WINDOWS_HANDLE to be defined. If set, we\n\tavoid using Windows I/O HANDLE, which is disallowed in some\n\tversions of the Windows SDK, such as for Windows phones.\n\tQUtil::same_file will always return false in this case. Only\n\tapplies to Windows builds.\n\n\t* Add new method QPDF::setImmediateCopyFrom. When called on a\n\tsource QPDF object, streams can be copied FROM that object to\n\tother ones without having to keep the source QPDF or its input\n\tsource around. The cost is copying the streams into RAM. See\n\tcomments in QPDF.hh for setImmediateCopyFrom for a detailed\n\texplanation.\n\n2019-01-07  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 8.3.0: release\n\n\t* Add sample completion files in completions. These can be used by\n\tpackagers to install on the system wherever bash and zsh keep\n\ttheir vendor-supplied completions.\n\n\t* Add configure flag --enable-check-autofiles, which is on by\n\tdefault. Packagers whose packaging systems automatically refresh\n\tautoconf or libtool files should pass --disable-check-autofiles to\n\t./configure to suppress warnings about automatically generated\n\tfiles being outdated.\n\n2019-01-06  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Remove the restriction in most cases that the source QPDF used\n\tin a copyForeignObject call has to stick around until the\n\tdestination QPDF is written. The exceptional case is when the\n\tsource stream gets is data using a\n\tQPDFObjectHandle::StreamDataProvider. For a more in-depth\n\tdiscussion, see comments around copyForeignObject in QPDF.hh.\n\tFixes #219.\n\n2019-01-05  Jay Berkenbilt  <ejb@ql.org>\n\n\t* When generating appearances, if the font uses one of the\n\tstandard, built-in encodings, restrict the character set to that\n\trather than just to ASCII. This will allow most appearances to\n\tcontain characters from the ISO-Latin-1 range plus a few\n\tadditional characters.\n\n\t* Add methods QUtil::utf8_to_win_ansi and\n\tQUtil::utf8_to_mac_roman.\n\n\t* Add method QUtil::utf8_to_utf16.\n\n2019-01-04  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add new option --optimize-images, which recompresses every image\n\tusing DCT (JPEG) compression as long as the image is not already\n\tcompressed with lossy compression and recompressing the image\n\treduces its size. The additional options --oi-min-width,\n\t--oi-min-height, and --oi-min-area prevent recompression of images\n\twhose width, height, or pixel area (width * height) are below a\n\tspecified threshold.\n\n\t* Add new option --collate. When specified, the semantics of\n\t--pages change from concatenation to collation. See the manual for\n\ta more detailed discussion. Fixes #259.\n\n\t* Add new method QPDFWriter::getFinalVersion, which returns the\n\tPDF version that will ultimately be written to the final file. See\n\tcomments in QPDFWriter.hh for some restrictions on its use. Fixes\n\t#266.\n\n\t* When unexpected errors are found while checking linearization\n\tdata, print an error message instead of calling assert, which\n\tcause the program to crash. Fixes #209, #231.\n\n\t* Detect and recover from dangling references. If a PDF file\n\tcontained an indirect reference to a non-existent object (which is\n\tvalid), when adding a new object to the file, it was possible for\n\tthe new object to take the object ID of the dangling reference,\n\tthereby causing the dangling reference to point to the new object.\n\tThis case is now prevented. Fixes #240.\n\n2019-01-03  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add --generate-appearances flag to the qpdf command-line tool to\n\ttrigger generation of appearance streams.\n\n\t* Fix behavior of form field value setting to handle the following\n\tcases:\n\t  - Strings are always written as UTF-16\n\t  - Check boxes and radio buttons are handled properly with\n\t    synchronization of values and appearance states\n\n\t* Define constants in qpdf/Constants.h for interpretation of\n\tannotation and form field flags\n\n\t* Add QPDFAnnotationObjectHelper::getFlags\n\n\t* Add many new methods to QPDFFormFieldObjectHelper for querying\n\tflags and field types\n\n\t* Add new methods for appearance stream generation. See comments\n\tin QPDFFormFieldObjectHelper.hh for generateAppearance() for a\n\tdescription of limitations.\n\t  - QPDFAcroFormDocumentHelper::generateAppearancesIfNeeded\n\t  - QPDFFormFieldObjectHelper::generateAppearance\n\n\t* Bug fix: when writing form field values, always write string\n\tvalues encoded as UTF-16.\n\n\t* Add method QUtil::utf8_to_ascii, which returns an ASCII string\n\tfor a UTF-8 string, replacing out-of-range characters with a\n\tspecified substitute.\n\n2019-01-02  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add method QPDFObjectHandle::getResourceNames that returns a set\n\tof strings representing all second-level keys in a dictionary\n\t(i.e. all keys of all direct dictionary members).\n\n2018-12-31  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add --flatten-annotations flag to the qpdf command-line tool for\n\tannotation flattening.\n\n\t* Add methods for flattening form fields and annotations:\n\t  - QPDFPageDocumentHelper::flattenAnnotations - integrate\n\t    annotation appearance streams into page contents with special\n\t    handling for form fields: if appearance streams are up to date\n\t    (/NeedAppearances is false in /AcroForm), the /AcroForm key of\n\t    the document catalog is removed. Otherwise, a warning is\n\t    issued, and form fields are ignored. Non-form-field\n\t    annotations are always flattened if an appearance stream can\n\t    be found.\n\t  - QPDFAnnotationObjectHelper::getPageContentForAppearance -\n\t    generate the content stream fragment to render an appearance\n\t    stream in a page's content stream as a form xobject. Called by\n\t    flattenAnnotations.\n\n\t* Add method QPDFObjectHandle::mergeResources(), which merges\n\tresource dictionaries. See detailed description in\n\tQPDFObjectHandle.hh.\n\n\t* Add QPDFObjectHandle::Matrix, similar to\n\tQPDFObjectHandle::Rectangle, as a convenience class for\n\tsix-element arrays that are used as matrices.\n\n2018-12-23  Jay Berkenbilt  <ejb@ql.org>\n\n\t* When specifying @arg on the command line, if the file \"arg\" does\n\tnot exist, just treat this is a normal argument. This makes it\n\teasier to deal with files whose names start with the @ character.\n\tFixes #265.\n\n\t* Tweak completion so it works with zsh as well using\n\tbashcompinit.\n\n2018-12-22  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add new options --json, --json-key, and --json-object to\n\tgenerate a json representation of the PDF file. This is described\n\tin more depth in the manual. You can also run qpdf --json-help to\n\tget a description of the json format.\n\n2018-12-21  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Allow --show-object=trailer for showing the document trailer.\n\n\t* You can now use eval $(qpdf --completion-bash) to enable bash\n\tcompletion for qpdf. It's not perfect, but it works pretty well.\n\n2018-12-19  Jay Berkenbilt  <ejb@ql.org>\n\n\t* When splitting pages using --split-pages, the outlines\n\tdictionary and some supporting metadata are copied into the split\n\tfiles. The result is that all bookmarks from the original file\n\tappear, and those that point to pages that are preserved work\n\twhile those that point to pages that are not preserved don't do\n\tanything. This is an interim step toward proper support for\n\tbookmark preservation in split files.\n\n\t* Add QPDFOutlineDocumentHelper and QPDFOutlineObjectHelper for\n\thandling outlines (bookmarks) including bidirectionally mapping\n\tbetween bookmarks and pages. Initially there is no support for\n\tmodifying the outlines hierarchy.\n\n2018-12-18  Jay Berkenbilt  <ejb@ql.org>\n\n\t* New method QPDFObjectHandle::getJSON() returns a JSON object\n\twith a partial representation of the object. See\n\tQPDFObjectHandle.hh for a detailed description.\n\n\t* Add a simple JSON serializer. This is not a complete or\n\tgeneral-purpose JSON library. It allows assembly and serialization\n\tof JSON structures with some restrictions, which are described in\n\tthe header file.\n\n\t* Add QPDFNameTreeObjectHelper class. This class provides useful\n\tmethods for dealing with name trees, which are discussed in\n\tsection 7.9.6 of the PDF spec (ISO-32000).\n\n\t* Preserve page labels when merging and splitting files. Prior\n\tversions of qpdf simply preserved the page label information from\n\tthe first file, which usually wouldn't make any sense in the\n\tmerged file. Now any page that had a page number in any original\n\tfile will have the same page number after merging or splitting.\n\n\t* Add QPDFPageLabelDocumentHelper class. This is a document helper\n\tclass that provides useful methods for dealing with page labels.\n\tIt abstracts the fact that they are stored as number trees and\n\tdeals with interpolating intermediate values that are not in the\n\ttree. It also has helper functions used by the qpdf command line\n\ttool to preserve page labels when merging and splitting files.\n\n\t* Add QPDFNumberTreeObjectHelper class. This class provides useful\n\tmethods for dealing with number trees, which are discussed in\n\tsection 7.9.7 of the PDF spec (ISO-32000). Page label dictionaries\n\tare represented as number trees.\n\n\t* New method QPDFObjectHandle::wrapInArray returns the object\n\titself if it is an array. Otherwise, it returns an array\n\tcontaining the object. This is useful for dealing with PDF data\n\tthat is sometimes expressed as a single element and sometimes\n\texpressed as an array, which is a somewhat common PDF idiom.\n\n2018-10-11  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Files generated by autogen.sh are now committed so that it is\n\tpossible to build on platforms without autoconf directly from a\n\tclean checkout of the repository. The configure script detects if\n\tthe files are out of date when it also determines that the tools\n\tare present to regenerate them.\n\n\t* Add build in Azure Pipelines, now that it is free for open\n\tsource projects.\n\n2018-08-18  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 8.2.1: release\n\n\t* Add new option --keep-files-open=[yn] to control whether qpdf\n\tkeeps files open when merging. Prior to version 8.1.0, qpdf always\n\tkept all files open, but this meant that the number of files that\n\tcould be merged was limited by the operating system's open file\n\tlimit. Version 8.1.0 opened files as they were referenced, but\n\tthis caused a major performance impact. Version 8.2.0 optimized\n\tthe performance but did so in a way that, for local file systems,\n\tthere was a small but unavoidable performance hit, but for\n\tnetworked file systems, the performance impact could be very high.\n\tStarting with version 8.2.1, the default behavior is that files\n\tare kept open if no more than 200 files are specified, but that\n\tthe behavior can be explicitly overridden with the\n\t--keep-files-open flag. If you are merging more than 200 files but\n\tless than the operating system's max open files limit, you may\n\twant to use --keep-files-open=y. If you are using a local file\n\tsystem where the overhead is low and you might sometimes merge\n\tmore than the OS limit's number of files, you may want to specify\n\t--keep-files-open=n. Fixes #237.\n\n2018-08-16  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 8.2.0: release\n\n2018-08-14  Jay Berkenbilt  <ejb@ql.org>\n\n\t* For the mingw builds, change the name of the DLL import library\n\tfrom libqpdf.a to libqpdf.dll.a to avoid confusing it with a\n\tstatic library. This potentially clears the way for supporting a\n\tstatic library in the future, though presently, the qpdf Windows\n\tbuild only builds the DLL and executables. Fixes #225.\n\n2018-08-13  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add new class QPDFSystemError, derived from std::runtime_error,\n\twhich is now thrown by QUtil::throw_system_error. This enables the\n\ttriggering errno value to be retrieved. Fixes #221.\n\n2018-08-12  Jay Berkenbilt  <ejb@ql.org>\n\n\t* qpdf command line: add --no-warn option to suppress issuing\n\twarning messages. If there are any conditions that would have\n\tcaused warnings to be issued, the exit status is still 3.\n\n\t* Rewrite the internals of Pl_Buffer to be much more efficient in\n\tuse of memory at a very slight performance cost. The old\n\timplementation could cause memory usage to go out of control for\n\tfiles with large images compressed using the TIFF predictor.\n\tFixes #228.\n\n2018-08-05  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: end of line characters were not properly handled inside\n\tstrings in some cases. Fixes #226.\n\n\t* Bug fix: infinite loop on progress reporting for very small\n\tfiles. Fixes #230.\n\n2018-08-04  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Performance fix: optimize page merging operation to avoid\n\tunnecessary open/close calls on files being merged. Fixes #217.\n\n\t* Add ClosedFileInputSource::stayOpen method, enabling a\n\tClosedFileInputSource to stay open during manually indicated\n\tperiods of high activity, thus reducing the overhead of frequent\n\topen/close operations.\n\n2018-06-23  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 8.1.0: release\n\n2018-06-22  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: properly decrypt files with 40-bit keys that use\n\trevision 3 of the security handler. Prior to this, qpdf was\n\treporting \"invalid password\" in this case. Fixes #212.\n\n\t* With --verbose, print information about each input file when\n\tmerging files.\n\n\t* Add progress reporting to QPDFWriter. Programmatically, you can\n\tregister a progress reporter with registerProgressReporter(). From\n\tthe command line, passing --progress will give progress indicators\n\tin increments of no less than 1% as output files are written.\n\tFixes #200.\n\n\t* Add new method QPDF::getObjectCount(). This gives an approximate\n\t(upper bound) account of objects in the QPDF object.\n\n\t* Don't leave files open when merging. This makes it possible\n\tmerge more files at once than the operating system's open file\n\tlimit. Fixes #154.\n\n\t* Add ClosedFileInputSource class, and input source that keeps its\n\tinput file closed when not reading it. At the expense of some\n\tperformance, this allows you to operate on many files without\n\topening too many files at the operating system level.\n\n\t* Add new option --preserve-unreferenced-resources, which\n\tsuppresses removal of unreferenced objects from page resource\n\tdictionaries during page splitting operations.\n\n2018-06-21  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add method QPDFPageObjectHelper::removeUnreferencedResources and\n\talso QPDFPageDocumentHelper::removeUnreferencedResources that\n\tcalls the former on every page. This method removes any XObject or\n\tFont references from the page's resource dictionary if they are\n\tnot referenced anywhere in any of the content streams. This\n\tsignificantly reduces the size of split files whose pages\n\tinternally share resource dictionaries. Fixes #203.\n\n\t* The --rotate option to qpdf no longer requires an explicit page\n\trange. You can now rotate all pages of a document with\n\tqpdf --rotate=angle in.pdf out.pdf. Fixes #211.\n\n\t* Create examples/pdf-set-form-values.cc to illustrate use of\n\tinteractive form helpers.\n\n\t* Added methods QPDFAcroFormDocumentHelper::setNeedAppearances and\n\tadded methods to QPDFFormFieldObjectHelper to set a field's value,\n\toptionally updating the document to indicate that appearance\n\tstreams need to be regenerated.\n\n\t* Added QPDFObject::newUnicodeString and QPDFObject::unparseBinary\n\tto allow for more convenient creation of strings that are\n\texplicitly encoded in UTF-16 BE. This is useful for creating\n\tUnicode strings that appear outside of content streams, such as in\n\tpage labels, outlines, form field values, etc.\n\n2018-06-20  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Added new classes QPDFAcroFormDocumentHelper,\n\tQPDFFormFieldObjectHelper, and QPDFAnnotationObjectHelper to\n\tassist with working with interactive forms in PDF files. At\n\tpresent, API methods for reading forms, form fields, and widget\n\tannotations have been added. It is likely that some additional\n\tmethods for modifying forms will be added in the future. Note that\n\tqpdf remains a library whose function is primarily focused around\n\tdocument structure and metadata rather than content. As such, it\n\tis not expected that qpdf will have higher level APIs for\n\tgenerating form contents, but qpdf will hopefully gain the\n\tcapability to deal with the bookkeeping aspects of wiring up all\n\tthe objects, which could make it a useful library for other\n\tsoftware that works with PDF interactive forms. PDF forms are\n\tcomplex, and the terminology around them is confusing. Please see\n\tcomments at the top of QPDFAcroFormDocumentHelper.hh for\n\tadditional discussion.\n\n\t* Added new classes QPDFPageDocumentHelper and QPDFPageObjectHelper\n\tfor page-level API functions. These classes introduce a new API\n\tpattern of document helpers and object helpers in qpdf. The helper\n\tclasses provide a higher level API for working with certain types\n\tof structural features of PDF while still staying true to qpdf's\n\tphilosophy of not isolating the user from the underlying\n\tstructure. Please see the chapter in the documentation entitled\n\t\"Design and Library Notes\" for additional discussion. The examples\n\thave also been updated to use QPDFPageDocumentHelper and\n\tQPDFPageObjectHelper when performing page-level operations.\n\n2018-06-19  Jay Berkenbilt  <ejb@ql.org>\n\n\t* New QPDFObject::Rectangle class will convert to and from arrays\n\tof four numerical values. Rectangles are used in various places\n\twithin the PDF file format and are called out as a specific data\n\ttype in the PDF specification.\n\n2018-05-12  Jay Berkenbilt  <ejb@ql.org>\n\n\t* In newline before endstream mode, an extra newline was not\n\tinserted prior to the endstream that ends object streams.\n\tFixes #205.\n\n2018-04-15  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Arbitrarily limit the depth of data structures represented by\n\tdirect object. This is CVE-2018-9918. Fixes #202.\n\n2018-03-06  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 8.0.2: release\n\n\t* Properly handle pages with no contents. Fixes #194.\n\n2018-03-05  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Improve handling of loops while following cross reference\n\ttables. Fixes #192.\n\n2018-03-04  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 8.0.1: release\n\n\t* On the command line when specifying page ranges, support\n\tpreceding a page number by \"r\" to indicate that it should be\n\tcounted from the end. For example, the range r3-r1 would indicate\n\tthe last three pages of a document.\n\n2018-03-03  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Ignore zlib data check errors while uncompressing streams. This\n\tis consistent with behaviors of other readers and enables handling\n\tof some incorrectly written zlib streams. Fixes #191.\n\n2018-02-25  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 8.0.0: release\n\n2018-02-17  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Fix QPDFObjectHandle::getUTF8Val() to properly handle strings\n\tthat are encoded with PDF Doc Encoding. Fixes #179.\n\n\t* Add qpdf_check_pdf to the \"C\" API. This method just attempts to\n\tread the entire file and produce no output, making possible to\n\tassess whether the file has any errors that qpdf can detect.\n\n\t* Major enhancements to handling of type errors within the qpdf\n\tlibrary. This fix is intended to eliminate those annoying cases\n\twhere qpdf would exit with a message like \"operation for\n\tdictionary object attempted on object of wrong type\" without\n\tproviding any context. Now qpdf keeps enough context to be able to\n\tissue a proper warning and to handle such conditions in a sensible\n\tway. This should greatly increase the number of bad files that\n\tqpdf can recover, and it should make it much easier to figure out\n\twhat's broken when a file contains errors.\n\n\t* Error message fix: replace \"file position\" with \"offset\" in\n\terror messages that report lexical or parsing errors. Sometimes\n\tit's an offset in an object stream or a content stream rather than\n\ta file position, so this makes the error message less confusing in\n\tthose cases. It still requires some knowledge to find the exact\n\tposition of the error, since when it's not a file offset, it's\n\tprobably an offset into a stream after uncompressing it.\n\n\t* Error message fix: correct some cases in which the object that\n\tcontained a lexical error was omitted from the error message.\n\n\t* Error message fix: improve file name in the error message when\n\tthere is a parser error inside an object stream.\n\n2018-02-11  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QPDFObjectHandle::filterPageContents method to provide a\n\tdifferent interface for applying token filters to page contents\n\twithout modifying the ultimate output.\n\n2018-02-04  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Changes listed on today's date are numerous and reflect\n\tsignificant enhancements to qpdf's lexical layer. While many\n\tnuances are discussed and a handful of small bugs were fixed, it\n\tshould be emphasized that none of these issues have any impact on\n\tany output or behavior of qpdf under \"normal\" operation. There are\n\tsome changes that have an effect on content stream normalization\n\tas with qdf mode or on code that interacts with PDF files\n\tlexically using QPDFTokenizer. There are no incompatible changes\n\tfor normal operation. There are a few changes that will affect the\n\texact error messages issued on certain bad files, and there is a\n\tsmall non-compatible enhancement regarding the behavior of\n\tmanually constructed QPDFTokenizer::Token objects. Users of the\n\tqpdf command line tool will see no changes other than the addition\n\tof a new command-line flag and possibly some improved error\n\tmessages.\n\n\t* Significant lexer (tokenizer) enhancements. These are changes to\n\tthe QPDFTokenizer class. These changes are of concern only to\n\tpeople who are operating with PDF files at the lexical layer using\n\tqpdf. They have little or no impact on most high-level interfaces\n\tor the command-line tool.\n\n\tNew token types tt_space and tt_comment to recognize whitespace\n\tand comments. this makes it possible to tokenize a PDF file or\n\tstream and preserve everything about it.\n\n\tFor backward compatibility, space and comment tokens are not\n\treturned by the tokenizer unless QPDFTokenizer.includeIgnorable()\n\tis called.\n\n\tBetter handling of null bytes. These are now included in space\n\ttokens rather than being their own \"tt_word\" tokens. This should\n\thave no impact on any correct PDF file and has no impact on\n\toutput, but it may change offsets in some error messages when\n\ttrying to parse contents of bad files. Under default operation,\n\tqpdf does not attempt to parse content streams, so this change is\n\tmostly invisible.\n\n\tBug fix to handling of bad tokens at ends of streams. Now, when\n\tallowEOF() has been called, these are treated as bad tokens\n\t(tt_bad or an exception, depending on invocation), and a\n\tseparate tt_eof token is returned. Before the bad token\n\tcontents were returned as the value of a tt_eof token. tt_eof\n\ttokens are always empty now.\n\n\tFix a bug that would, on rare occasions, report the offset in an\n\terror message in the wrong space because of spaces or comments\n\tadjacent to a bad token.\n\n\tClarify in comments exactly where the input source is positioned\n\tsurrounding calls to readToken and getToken.\n\n\t* Add a new token type for inline images. This token type is only\n\treturned by QPDFTokenizer immediately following a call to\n\texpectInlineImage(). This change includes internal refactoring of\n\ta handful of places that all separately handled inline images, The\n\tlogic of detecting inline images in content streams is now handled\n\tin one place in the code. Also we are more flexible about what\n\tcharacters may surround the EI operator that marks the end of an\n\tinline image.\n\n\t* New method QPDFObjectHandle::parsePageContents() to improve upon\n\tQPDFObjectHandle::parseContentStream(). The parseContentStream\n\tmethod used to operate on a single content stream, but was fixed\n\tto properly handle pages with contents split across multiple\n\tstreams in an earlier release. The new method parsePageContents()\n\tcan be called on the page object rather than the value of the\n\tpage dictionary's /Contents key. This removes a few lines of\n\tboiler-plate code from any code that uses parseContentStream, and\n\tit also enables creation of more helpful error messages if\n\tproblems are encountered as the error messages can include\n\tinformation about which page the streams come from.\n\n\t* Update content stream parsing example\n\t(examples/pdf-parse-content.cc) to use new\n\tQPDFObjectHandle::parsePageContents() method in favor of the older\n\tQPDFObjectHandle::parseContentStream() method.\n\n\t* Bug fix: change where the trailing newline is added to a stream\n\tin QDF mode when content normalization is enabled (the default for\n\tQDF mode). Before, the content normalizer ensured that the output\n\tended with a trailing newline, but this had the undesired side\n\teffect of including the newline in the stream data for purposes of\n\tlength computation. QPDFWriter already appends a newline without\n\tcounting in length for better readability. Ordinarily this makes\n\tno difference, but in the rare case of a page's contents being\n\tsplit in the middle of a token, the old behavior could cause the\n\textra newline to be interpreted as part of the token. This bug\n\tcould only be triggered in qdf mode, which is a mode intended for\n\tmanual inspection of PDF files' contents, so it is very unlikely\n\tto have caused any actual problems for people using qpdf for\n\tproduction use. Even if it did, it would be very unusual for a PDF\n\tfile to actually be adversely affected by this issue.\n\n\t* Add support for coalescing a page's contents into a single\n\tstream if they are represented as an array of streams. This can be\n\tperformed from the command line using the --coalesce-contents\n\toption. Coalescing content streams can simplify things for\n\tsoftware that wants to operate on a page's content streams without\n\thaving to handle weird edge cases like content streams split in\n\tthe middle of tokens. Note that\n\tQPDFObjectHandle::parsePageContents and\n\tQPDFObjectHandle::parseContentStream already handled split content\n\tstreams. This is mainly to set the stage for new methods of\n\toperating on page contents. The new method\n\tQPDFObjectHandle::pipeContentStreams will pipe all of a page's\n\tcontent streams though a single pipeline. The new method\n\tQPDFObjectHandle.coalesceContentStreams, when called on a page\n\tobject, will do nothing if the page's contents are a single\n\tstream, but if they are an array of streams, it will replace the\n\tpage's contents with a single stream whose contents are the\n\tconcatenation of the original streams.\n\n\t* A few library routines throw exceptions if called on non-page\n\tobjects. These constraints have been relaxed somewhat to make qpdf\n\tmore tolerant of files whose page dictionaries are not properly\n\tmarked as such. Mostly exceptions about page operations being\n\tcalled on non page objects will only be thrown in cases where the\n\toperation had no chance of succeeding anyway. This change has no\n\timpact on any default mode operations, but it could allow\n\tapplications that use page-level APIs in QPDFObjectHandle to be\n\tmore tolerant of certain types of damaged files.\n\n\t* Add QPDFObjectHandle::TokenFilter class and methods to use it to\n\tperform lexical filtering on content streams. You can call\n\tQPDFObjectHandle::addTokenFilter on stream object, or you can call\n\tthe higher level QPDFObjectHandle::addContentTokenFilter on a page\n\tobject to cause the stream's contents to passed through a token\n\tfilter while being retrieved by QPDFWriter or any other consumer.\n\tFor details on using TokenFilter, please see comments in\n\tQPDFObjectHandle.hh.\n\n\t* Enhance the string, type QPDFTokenizer::Token constructor to\n\tinitialize a raw value in addition to a value. Tokens have a\n\tvalue, which is a canonical representation, and a raw value. For\n\tall tokens except strings and names, the raw value and the value\n\tare the same. For strings, the value excludes the outer delimiters\n\tand has non-printing characters normalized. For names, the value\n\tresolves non-printing characters. In order to better facilitate\n\ttoken filters that mostly preserve contents and to enable\n\tdevelopers to be mostly unconcerned about the nuances of token\n\tvalues and raw values, creating string and name tokens now\n\tproperly handles this subtlety of values and raw values. When\n\tconstructing string tokens, take care to avoid passing in the\n\touter delimiters. This has always been the case, but it is now\n\tclarified in comments in QPDFObjectHandle.hh::TokenFilter. This\n\thas no impact on any existing code unless there's some code\n\tsomewhere that was relying on Token::getRawValue() returning an\n\tempty string for a manually constructed token. The token class's\n\toperator== method still only looks at type and value, not raw\n\tvalue. For example, string tokens for <41> and (A) would still be\n\tequal because both are representations of the string \"A\".\n\n\t* Add QPDFObjectHandle::isDataModified method. This method just\n\treturns true if addTokenFilter has been called on the stream. It\n\tenables a caller to determine whether it is safe to optimize away\n\tpiping of stream data in cases where the input and output are\n\texpected to be the same. QPDFWriter uses this internally to skip\n\tthe optimization of not re-compressing already compressed streams\n\tif addTokenFilter has been called. Most developers will not have\n\tto worry about this as it is used internally in the library in the\n\tplaces that need it. If you are manually retrieving stream data\n\twith QPDFObjectHandle::getStreamData or\n\tQPDFObjectHandle::pipeStreamData, you don't need to worry about\n\tthis at all.\n\n\t* Provide heavily annotated examples/pdf-filter-tokens.cc example\n\tthat illustrates use of some simple token filters.\n\n\t* When normalizing content streams, as in qdf mode, issue warning\n\tabout bad tokens. Content streams are only normalized when this is\n\texplicitly requested, so this has no impact on normal operation.\n\tHowever, in qdf mode, if qpdf detects a bad token, it means that\n\teither there's a bug in qpdf's lexer, that the file is damaged, or\n\tthat the page's contents are split in a weird way. In any of those\n\tcases, qpdf could potentially damage the stream's contents by\n\treplacing carriage returns with newlines or otherwise messing with\n\tspaces. The mostly likely case of this would be an inline image's\n\tcompressed data being divided across two streams and having the\n\tcompressed data in the second stream contain a carriage return as\n\tpart of its binary data. If you are using qdf mode just to look at\n\tPDF files in text editors, this usually doesn't matter. In cases\n\tof contents split across multiple streams, coalescing streams\n\twould eliminate the problem, so the warning mentions this. Prior\n\tto this enhancement, the chances of qdf mode writing incorrect\n\tdata were already very low. This change should make it nearly\n\timpossible for qdf mode to unknowingly write invalid data.\n\n2018-02-04  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QPDFWriter::setLinearizationPass1Filename method and\n\t--linearize-pass1 command line option to allow specification of a\n\tfile into which QPDFWriter will write its intermediate\n\tlinearization pass 1 file. This is useful only for debugging qpdf.\n\tqpdf creates linearized files by computing the output in two\n\tpasses. Ordinarily the first pass is discarded and not written\n\tanywhere. This option allows it to be inspected.\n\n2018-02-04  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 7.1.1: release\n\n\t* Bug fix: properly linearize files whose /ID has a length of\n\tother than 16 bytes.\n\n\t* Rename some test files to avoid files with three dots in their\n\tnames. Fixes #173.\n\n\t* Fix various build and compilation issues on some platforms and\n\tcompilers. Fixes #176, #172, #177\n\n\t* Fix a few typos and clarify a few comments in header files.\n\n2018-01-14  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 7.1.0: release\n\n\t* Allow raw encryption key to be specified in library and command\n\tline with the QPDF::setPasswordIsHexKey method and\n\t--password-is-hex-key option. Allow encryption key to be displayed\n\twith --show-encryption-key option. Thanks to Didier Stevens\n\t<didier.stevens@gmail.com> for the idea and contribution of one\n\timplementation of this idea. See his blog post at\n\thttps://blog.didierstevens.com/2017/12/28/cracking-encrypted-pdfs-part-3/\n\tfor a discussion of using this for cracking encrypted PDFs. I hope\n\tthat a future release of qpdf will include some additional\n\trecovery options that may also make use of this capability.\n\n2018-01-13  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Fix lexical error: the PDF specification allows floating point\n\tnumbers to end with \".\". Fixes #165.\n\n\t* Fix link order in the build to avoid conflicts when building\n\tfrom source while an older version of qpdf is installed. Fixes #158.\n\n\t* Add support for TIFF predictor for LZW and Flate streams. Now\n\tall predictor functions are supported. Fixes #171.\n\n2017-12-25  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Clarify documentation around options that control parsing but\n\tnot output creation. Two options: --suppress-recovery and\n\t--ignore-xref-streams, were documented in the \"Advanced\n\tTransformation Options\" section of the manual and --help output\n\teven though they are not related to output. These are now\n\tdescribed in a separate section called \"Advanced Parsing Options.\"\n\n\t* Implement remaining PNG filters for decode. Prior versions could\n\tdecode only the \"up\" filter. Now all PNG filters (sub, up,\n\taverage, Paeth, optimal) are supported for decoding. Thanks to\n\tTobias Hoffmann for providing a test PDF file that has images with\n\tall PNG filters along with different numbers of bits per sample\n\tand samples per pixel, and thanks to Casey Rojas for providing\n\timplementations of the remaining PNG filters.\n\n\tThe implementation of the remaining PNG filters changed the\n\tinterface to the private Pl_PNGFilter class, but this class's\n\theader file is not in the installation, and there is no public\n\tinterface to the class. Within the library, the class is never\n\tallocated on the stack; it is only ever dynamically allocated. As\n\tsuch, this does not actually break binary compatibility of the\n\tlibrary.\n\n2017-09-15  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 7.0.0: release\n\n2017-09-12  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Relicense qpdf under version 2.0 of the Apache License rather\n\tthan version 2.0 of the Artistic License. Both are fine, but the\n\tApache License is in more widespread use, and I like it a little\n\tbetter than Artistic-2.0. It is my intention that there be no\n\tchange in what you can or can't do with qpdf. Versions of qpdf\n\tprior to version 7 were released under the terms of version 2.0 of\n\tthe Artistic License. At your option, you may continue to consider\n\tqpdf to be licensed under those terms. Please see the manual for\n\tadditional information.\n\n\t* Improve the error message that is issued when QPDFWriter\n\tencounters a stream that can't be decoded. In particular, mention\n\tthat the stream will be copied without filtering to avoid data\n\tloss.\n\n\t* Add new methods to the C API to correspond to new additions to\n\tQPDFWriter:\n\t- qpdf_set_compress_streams\n\t- qpdf_set_decode_level\n\t- qpdf_set_preserve_unreferenced_objects\n\t- qpdf_set_newline_before_endstream\n\n2017-08-25  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Re-implement parser iteratively to avoid stack overflow on very\n\tdeeply nested arrays and dictionaries. Fixes #146.\n\n\t* Detect infinite loop while finding additional xref tables. Fixes\n\t#149.\n\n2017-08-22  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 7.0.b1: release\n\n\t* Convert all README files to markdown. Names changed as follows:\n\t  - README --> README.md\n\t  - README.hardening --> README-hardening.md\n\t  - README.maintainer --> README-maintainer.md\n\t  - README-what-to-download.txt --> README-what-to-download.md\n\t  - README-windows.txt --> README-windows.md\n\t  The file README-windows-install.txt remains a text file.\n\n2017-08-21  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add support for writing PCLm files. Most of the work was done by\n\tSahil Arora <sahilarora.535@gmail.com> as part of a Google Summer\n\tof Code project in 2017. PCLm support is useful only for clients\n\tthat specifically know how to create PCLm files. Support in qpdf\n\tis just for ensuring that objects are written in the correct order\n\tand for including some additional material in the output that is\n\trequired by the PCLm standard.\n\n2017-08-19  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Remove --precheck-streams. This is enabled by default now\n\twithout any efficiency cost. This feature was never released.\n\n\t* Update pdf-create example to illustrate use of additional image\n\tcompression filters.\n\n\t* Add support for /RunLengthDecode and /DCTDecode:\n\t  - New pipeline types Pl_RunLength and Pl_DCT\n\t  - New command-line flags --compress-streams and --decode-level\n\t    to replace/enhance --stream-data\n\t  - New QPDFWriter::setCompressStreams and\n\t    QPDFWriter::setDecodeLevel methods\n\t  Please see documentation, header files, and help messages for\n\t  details on these new features.\n\n2017-08-12  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QPDFObjectHandle::rotatePage to apply rotation to a page\n\tobject. Add --rotate option to qpdf to specify page rotation from\n\tthe command line.\n\n\t* Provide --verbose option that causes qpdf to print an indication\n\tof what files it is writing.\n\n\t* Change --single-pages to --split-pages and make it take an\n\toptional argument specifying the number of pages per file.\n\n2017-08-11  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Fix --newline-before-endstream to always add a newline before\n\tendstream even if the last character was already a newline. This\n\tis actually what's required by PDF/A. Fixes #133.\n\n\t* Handle encrypted files whose encryption parameters are too\n\tshort. Fixes #96.\n\n2017-08-10  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Remove dependency on libpcre.\n\n\t* Be more forgiving of certain types of errors in the xref table\n\tthat don't interfere with interpreting the table.\n\n\t* Remove unused \"tracing\" parameter from PointerHolder's\n\t(T*, bool) constructor. This change breaks source code\n\tcompatibility, but since this argument to PointerHolder has not\n\tused for a long time and the presence of a boolean parameter in\n\tthe primary constructor makes it too easy to use that by mistake\n\twhen trying to use PointerHolder for arrays, it seems like it's\n\tfinally time to take it out. If you have a compile error because\n\tof this change, please check to see whether you intended to use\n\tthe (bool, T*) version of the constructor instead. If not, just\n\tremove the second parameter.\n\n2017-08-09  Jay Berkenbilt  <ejb@ql.org>\n\n\t* When recovering stream length, find endobj without endstream as\n\twell as just looking for endstream. Be a little more lax about\n\twhere we allow it to be found.\n\n2017-08-05  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add --single-pages option to cause output to be written to a\n\tseparate file for each page rather than one big file.\n\n\t* Process --pages options earlier so that certain inspection\n\toptions, like --show-pages, can show the state after the merging\n\toperations.\n\n2017-08-02  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Fix off-by-one error in parsing pages options. Fixes #129.\n\n2017-07-29  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Support @filename and @- in the qpdf command-line tool to read\n\tcommand-line arguments, one per line, from the named file. @-\n\treads from standard input. Fixes #16.\n\n\t* Detect when input file and output file are the same and exit to\n\tavoid overwriting and losing input file. Fixes #29.\n\n\t* When passing multiple inspection arguments, run --check first,\n\tand defer exit until after all the checks have been run. This\n\tmakes it possible to force operations such as --show-xref to be\n\tdelayed until after recovery attempts have been made. For example,\n\tif you have a file with a syntactically valid xref table that has\n\tsome offsets that are incorrect, running qpdf --check --show-xref\n\ton that file will first recover the xref and the dump the\n\trecovered xref, while just running qpdf --show-xref will show the\n\txref table as present in the file. Fixes #42.\n\n\t* When recovering stream length, indicate the recovered length.\n\tFixes #44.\n\n\t* Add --newline-before-endstream command-line option and\n\tsetNewlineBeforeEndstream method to QPDFWriter. This forces qpdf\n\tto always add a newline before the endstream keyword. It is a\n\tnecessary but not sufficient condition for PDF/A compliance. Fixes\n\t#103.\n\n\t* Handle zlib data errors when decoding streams. Fixes #106.\n\n\t* Improve handling of files where the \"stream\" keyword is not\n\tfollowed by proper line terminators. Fixes #104.\n\n\t* Fix content stream parsing to handle cases of structures within\n\tthe stream split across stream boundaries. Fixes #73.\n\n2017-07-28  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add --preserve-unreferenced command-line option and\n\tsetPreserveUnreferencedObjects method to QPDFWriter. This option\n\tcauses QPDFWriter to write all objects from the input file to the\n\toutput file regardless of whether the objects are referenced.\n\tObjects are written to the output file in numerical order from the\n\tinput file. This option has no effect for linearized files.\n\n2017-07-27  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add --precheck-streams command-line option and setStreamPrecheck\n\tmethod to QPDFWriter to tell QPDFWriter to attempt decoding a\n\tstream fully before deciding whether to filter it or not.\n\n\t* Recover gracefully from streams that aren't filterable because\n\tthe filter parameters are invalid in the stream dictionary or the\n\tdictionary itself is invalid.\n\n\t* Significantly improve recoverability from invalid qpdf objects.\n\tMost conditions in basic object parsing that used to cause qpdf to\n\texit are now warnings. There are still many more opportunities for\n\timprovements of this sort beyond just object parsing.\n\n2017-07-26  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Fixes to infinite loops below also fix problems reported in\n\tother issues and cover CVE-2017-11624, CVE-2017-11625,\n\tCVE-2017-11626, and CVE-2017-11627.\n\n\t* Don't attempt to interpret syntactic keywords (like R and\n\tendobj) found while parsing content streams.\n\n\t* Detect infinite loops while resolving objects. This could happen\n\tif something inside an object that had to be resolved during\n\tparsing, such as a stream length, recursively referenced the\n\tobject being resolved.\n\n\t* CVE-2017-9208: Handle references to and appearance of object 0\n\tas a special case. Object 0 is not allowed, and qpdf was using it\n\tinternally to represent direct objects.\n\n\t* CVE-2017-9209: Fix infinite loop caused by attempting to\n\treconstruct the xref table while already in the process of\n\treconstructing the xref table.\n\n\t* CVE-2017-9210: Fix infinite loop caused by attempting to unparse\n\tan object for inclusion in the text of an exception.\n\n2015-11-10  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 6.0.0: release\n\n\t* No changes from 5.2.0. The 5.2.0 release broke binary\n\tcompatibility and was withdrawn.\n\n2015-10-31  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 5.2.0: release\n\n\t* libqpdf/QPDF.cc (read_xrefTable): Be tolerant of some malformed\n\txref tables that don't have the required trailing space after each\n\tline.\n\n2015-10-29  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Implement QPDFWriter::setDeterministicID and --deterministic-id\n\tcommand-line flag to qpdf to request generation of a deterministic\n\t/ID for non-encrypted files.\n\n2015-05-24  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 5.1.3: release\n\n\t* Bug fix: fix-qdf was not handling object streams with more than\n\t255 objects in them.\n\n\t* Handle Microsoft crypt provider initialization properly for case\n\twhere no keys have been previously created, such as in a fresh\n\tWindows installation.\n\n\t* Include time.h in QUtil.hh for time_t\n\n2015-02-21  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Detect loops in Pages structure. Thanks to Gynvael Coldwind and\n\tMateusz Jurczyk of the Google Security Team for providing a sample\n\tfile with this problem.\n\n\t* Prevent buffer overrun when converting a password to an\n\tencryption key. Thanks to Gynvael Coldwind and Mateusz Jurczyk of\n\tthe Google Security Team for providing a sample file with this\n\tproblem.\n\n\t* Ensure that arguments to \"R\" when parsing the file are direct\n\tobjects before trying to resolve them. This prevents specially\n\tcrafted files from causing qpdf to crash with a stack overflow.\n\tThanks to Gynvael Coldwind and Mateusz Jurczyk of the Google\n\tSecurity Team for providing a sample file with this problem.\n\n2014-12-01  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Some broken PDF files lack the required /Type key for /Page and\n\t/Pages nodes in the page dictionary. QPDF now uses other methods\n\tto figure out what kind of node it is looking at so that it can\n\thandle those files. Original reported at\n\thttps://bugs.launchpad.net/ubuntu/+source/qpdf/+bug/1397413\n\n2014-11-14  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: QPDFObjectHandle::getPageContents() no longer throws an\n\texception when called on a page that has no /Contents key in its\n\tdictionary. This is allowed by the spec, and some software\n\tpackages generate files like this for pages that are blank in the\n\toriginal.\n\n2014-06-07  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 5.1.2: release\n\n\t* MS Visual C++ build: explicitly target Windows 5.0.1 (XP)\n\n\t* New example program: pdf-split-pages: efficiently split PDF\n\tfiles into individual pages.\n\n\t* Bug fix: don't fail on files that contain streams where /Filter\n\tor /DecodeParms references a stream. Before, qpdf would try to\n\tconvert these to direct objects, which would fail because of the\n\tstream.\n\n2014-02-22  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: if the last object in the first part of a linearized\n\tfile had an offset that was below 65536 by less than the size of\n\tthe hint stream, the xref stream was invalid and the resulting file\n\tis not usable.\tThis is now fixed.\n\n2014-01-14  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 5.1.1: release\n\n2013-12-26  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: when copying foreign objects (which occurs during page\n\tsplitting among other cases), avoid traversing the same object\n\tmore than once if it appears more than once in the same direct\n\tobject.\t This bug is performance-only and does not affect the\n\tactual output.\n\n2013-12-17  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 5.1.0: release\n\n2013-12-16  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Document and make explicit that passing null to\n\tQUtil::setRandomDataProvider() resets the random data provider.\n\n\t* Provide QUtil::getRandomDataProvider().\n\n2013-12-14  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Allow any space rather than just newline to follow xref header.\n\tThis allows qpdf to read a wider range of damaged files.\n\n2013-11-30  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Allow user-supplied random data provider to be used in place of\n\tOS-provided or insecure random number generation.  See\n\tdocumentation for 5.1.0 for details.\n\n\t* Add configure option --enable-os-secure-random (enabled by\n\tdefault).  Pass --disable-os-secure-random or define\n\tSKIP_OS_SECURE_RANDOM to avoid attempts to use the operating\n\tsystem-provided secure random number generation.  This can be\n\tespecially useful on Windows if you wish to avoid any dependency\n\ton Microsoft's cryptography system.\n\n2013-11-29  Jay Berkenbilt  <ejb@ql.org>\n\n\t* If NO_GET_ENVIRONMENT is #defined, for Windows only,\n\tQUtil::get_env will always return false.  This was added to\n\tsupport a user who needs to avoid calling GetEnvironmentVariable\n\tfrom the Windows API.  QUtil::get_env is not used for any\n\tfunctionality in qpdf and exists only to support the test suite\n\tincluding test coverage support with QTC (part of qtest).\n\n\t* Add /FS to msvc builds to allow parallel builds to work with\n\tVisual C++ 2013.\n\n\t* Add missing #include <algorithm> in some files that use std::min\n\tand std::max.\n\n2013-11-21  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Change image comparison tests, which are disabled by default, to\n\tuse tiff files with 8 bits per sample rather than 4.  This works\n\taround a bug in tiffcmp but also increases time and disk space for\n\timage comparison tests.\n\n2013-10-28  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Fix MacOS compilation errors by adding a missing #include\n\t<string> in a header file.\n\n2013-10-18  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 5.0.1: release\n\n\t* Warn when -accessibility=n is specified with a modern encryption\n\tformat (R > 3).\t Also, accept this flag (and ignore with warning)\n\twith 256-bit encryption.  qpdf has always ignored the\n\taccessibility setting with R > 3, but it previously did so\n\tsilently.\n\n2013-10-05  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Replace operator[] in std::string and std::vector with \"at\" in\n\torder to get bounds checking.  This reduces the chances that\n\tincorrect code will result in data exposure or buffer overruns.\n\tSee README.hardening for additional notes.\n\n\t* Use cryptographically secure random number generation when\n\tavailable.  See additional notes in README.\n\n\t* Replace some assert() calls with std::logic_error exceptions.\n\tIdeally there shouldn't be assert() calls outside of testing.\n\tThis change may make a few more potential code errors in handling\n\tinvalid data recoverable.\n\n\t* Security fix: In places where std::vector<T>(size_t) was used,\n\teither validate that the size parameter is sane or refactor code\n\tto avoid the need to pre-allocate the vector.  This reduces the\n\tlikelihood of allocating a lot of memory in response to invalid\n\tdata in linearization hint streams.\n\n\t* Security fix: sanitize /W array in cross reference stream to\n\tavoid a potential integer overflow in a multiplication.\t It is\n\tunlikely that any exploits were possible from this bug as\n\tadditional checks were also performed.\n\n\t* Security fix: avoid buffer overrun that could be caused by bogus\n\tdata in linearization hint streams.  The incorrect code could only\n\tbe triggered when checking linearization data, which must be\n\tinvoked explicitly.  qpdf does not check linearization data when\n\treading or writing linearized files, but the qpdf --check command\n\tdoes check linearization data.\n\n\t* Security fix: properly handle empty strings in\n\tQPDF_Name::normalizeName.  The empty string is not a valid name\n\tand would never be parsed as a name, so there were no known\n\tconditions where this method could be called with an empty string.\n\n\t* Security fix: perform additional argument sanity checks when\n\treading bit streams.\n\n\t* Security fix: in QUtil::toUTF8, change bounds checking to avoid\n\thaving a pointer point temporarily outside the bounds of an\n\tarray.\tSome compiler optimizations could have made the original\n\tcode unsafe.\n\n2013-07-10  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 5.0.0: release\n\n\t* 4.2.0 turned out to be binary incompatible on some platforms\n\teven though there were no changes to the public API.  Therefore\n\tthe 4.2.0 release has been withdrawn, and is being replaced with a\n\t5.0.0 release that acknowledges the ABI change and also removes\n\tsome problematic methods from the public API.\n\n\t* Remove methods from public API that were only intended to be\n\tused by QPDFWriter and really didn't make sense to call from\n\tanywhere else as they required internal knowledge that only\n\tQPDFWriter had:\n\t   - QPDF::getLinearizedParts\n\t   - QPDF::generateHintStream\n\t   - QPDF::getObjectStreamData\n\t   - QPDF::getCompressibleObjGens\n\t   - QPDF::getCompressibleObjects\n\n2013-07-07  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 4.2.0: release [withdrawn]\n\n\t* Ignore error case of a stream's decode parameters having invalid\n\tlength when there are no stream filters.\n\n\t* qpdf: add --show-npages command-line option, which causes the\n\tnumber of pages in the input file to be printed on a line by\n\titself.\n\n\t* qpdf: allow omission of range in --pages.  If range is omitted\n\tsuch that an argument that is supposed to be a range is an invalid\n\trange and a valid file name, the range of 1-z is assumed.  This\n\tmakes it possible to merge a bunch of files with something like\n\tqpdf --empty out.pdf --pages *.pdf --\n\n2013-06-15  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Handle some additional broken files with missing /ID in trailer\n\tfor encrypted files and with space rather than newline after xref.\n\n2013-06-14  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Detect and correct /Outlines dictionary being a direct object\n\twhen linearizing files.\t This is not allowed by the spec but has\n\tbeen seen in the wild.\tPrior to this change, such a file would\n\tcause an internal error in the linearization code, which assumed\n\t/Outlines was indirect.\n\n\t* Add /Length key to crypt filter dictionary for encrypted files.\n\tThis key is optional, but some version of MacOS reportedly fail to\n\topen encrypted PDF files without this key.\n\n\t* Bug fix: properly handle object stream generation when the\n\toriginal file has some compressible objects with generation != 0.\n\n\t* Add QPDF::getCompressibleObjGens() and deprecate\n\tQPDF::getCompressibleObjects(), which had a flaw in its logic.\n\n\t* Add new QPDFObjectHandle::getObjGen() method and indicate in\n\tcomments that its use is favored over getObjectID() and\n\tgetGeneration() for most cases.\n\n\t* Add new QPDFObjGen object to represent an object ID/generation\n\tpair.\n\n2013-04-14  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 4.1.0: release\n\n2013-03-25  Jay Berkenbilt  <ejb@ql.org>\n\n\t* manual/qpdf-manual.xml: Document the casting policy that is\n\tfollowed in qpdf's implementation.\n\n2013-03-11  Jay Berkenbilt  <ejb@ql.org>\n\n\t* When creating Windows binary distributions, make sure to only\n\tcopy DLLs of the correct type.\tThe ensures that the 32-bit\n\tdistributions contain 32-bit DLLs and the 64-bit distributions\n\tcontain 64-bit DLLs.\n\n2013-03-07  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Use ./install-sh (already present) instead of \"install -c\" to\n\tinstall executables to fix portability problems against different\n\tUNIX variants.\n\n2013-03-03  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add protected terminateParsing method to\n\tQPDFObjectHandle::ParserCallbacks that implementor can call to\n\tterminate parsing of a content stream.\n\n2013-02-28  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Favor fopen_s and strerror_s on MSVC to avoid CRT security\n\twarnings.  This is useful for people who may want to use qpdf in\n\tan application that is Windows 8 certified.\n\n\t* New method QUtil::safe_fopen to wrap calls to fopen.\tThis is\n\tless cumbersome than calling QUtil::fopen_wrapper.\n\n\t* Remove all calls to sprintf\n\n\t* New method QUtil::int_to_string_base to convert to octal or\n\thexadecimal (or decimal) strings without using sprintf\n\n2013-02-26  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Rewrite QUtil::int_to_string and QUtil::double_to_string to\n\tremove internal length limits but to remain backward compatible\n\twith the old versions for valid inputs.\n\n2013-02-23  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Bug fix: properly handle overridden compressed objects.  When\n\tcaching objects from an object stream, only cache objects that,\n\tbased on the xref table, would actually be resolved into this\n\tstream.\t Prior to this fix, if an object stream A contained an\n\tobject B that was overridden by an appended section of the file,\n\tqpdf would cache the old value of B if any non-overridden member\n\tof A was accessed before B.  This commit fixes that bug.\n\n2013-01-31  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Do not remove libtool's .la file during the make install step.\n\tNote to packagers: if your distribution wants to you remove the\n\t.la file, you will have to do that yourself now.\n\n2013-01-25  Jay Berkenbilt  <ejb@ql.org>\n\n\t* New method QUtil::hex_encode to encode binary data as a\n\thexadecimal string\n\n\t* qpdf --check was exiting with status 0 in some rare cases even\n\twhen errors were found.\t It now always exits with one of the\n\tdocument error codes (0 for success, 2 for errors, 3 or warnings).\n\n2013-01-24  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Make --enable-werror work for MSVC, and generally handle warning\n\toptions better for that compiler.  Warning flags for that compiler\n\twere previous hard-coded into the build with /WX enabled\n\tunconditionally.\n\n\t* Split warning flags into WFLAGS in autoconf.mk to make them\n\teasier to override.  Before they were repeated in CFLAGS and\n\tCXXFLAGS and were commingled with other compiler flags.\n\n\t* qpdf --check now does syntactic checks all pages' content\n\tstreams as well as checking overall document structure.\t Semantic\n\terrors are still not checked, and there are no plans to add\n\tsemantic checks.\n\n2013-01-22  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QPDFObjectHandle::getTypeCode().\tThis method returns a\n\tunique integer (enumerated type) value corresponding to the object\n\ttype of the QPDFObjectHandle.  It can be used as an alternative to\n\tthe QPDFObjectHandle::is* methods for type testing, particularly\n\twhere there is a desire to use a switch statement or optimize for\n\tperformance when testing object types.\n\n\t* Add QPDFObjectHandle::getTypeName().\tThis method returns a\n\tstring literal describing the object type.  It is useful for\n\ttesting and debugging.\n\n2013-01-20  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QPDFObjectHandle::parseContentStream, which parses the\n\tobjects in a content stream and calls handlers in a callback\n\tclass.\tThe example pdf-parse-content illustrates it use.\n\n\t* Add QPDF_Operator and QPDF_InlineImage types along with\n\tappropriate wrapper methods in QPDFObjectHandle.  These new object\n\ttypes are to facilitate content stream parsing.\n\n2013-01-17  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 4.0.1: release\n\n\t* Add clarifying comment in QPDF.hh for methods that return the\n\tuser password to state that it is no longer possible with newer\n\tencryption formats to recover the user password knowing the owner\n\tpassword.\n\n\t* Fix detection of binary attachments in the test suite.  This\n\tresolves false test failures on some platforms.\t No changes to the\n\tactual QPDF code were made.\n\n2012-12-31  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 4.0.0: release\n\n\t* Add new methods qpdf_get_pdf_extension_level,\n\tqpdf_set_r5_encryption_parameters,\n\tqpdf_set_r6_encryption_parameters,\n\tqpdf_set_minimum_pdf_version_and_extension, and\n\tqpdf_force_pdf_version_and_extension to support new functionality\n\tfrom the C API.\n\n2012-12-30  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Fix long-standing bug that could theoretically have resulted in\n\tpossible misinterpretation of decode parameters in streams.  As\n\tfar as I can tell, it is extremely unlikely that files with the\n\tcharacteristics that would have triggered the bug actually exist\n\tin cases that qpdf versions prior to 4.0.0 could have read.\n\tUnencrypted files with encrypted attachments would have triggered\n\tthis bug, but qpdf versions prior to 4.0.0 already refused to open\n\tsuch files.\n\n\t* Fix long-standing bug in which a stream that used a crypt\n\tfilter and was otherwise not filterable by qpdf would be decrypted\n\tproperly but would retain the crypt filter indication in the\n\tfile.  There are no known ways to create files like this, so it is\n\tunlikely that anyone ever hit this bug.\n\n2012-12-29  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add read/write support for both the deprecated Acrobat IX\n\tencryption format and the Acrobat X/PDF 2.0 encryption format\n\tusing 256-bit AES keys.\t Using the Acrobat IX format (R=5) forces\n\tthe version of the file to 1.7 with extension level 3.\tUsing the\n\tPDF 2.0 format (R=6) forces it to 1.7 extension level 8.\n\n\t* Add new method QPDF::getEncryptionKey to return the actual\n\tencryption key used for encryption of data in the file.\t The key\n\tis returned as a std::string.\n\n\t* Non-compatible API change: change signature of\n\tQPDF::compute_data_key to take the R and V values from the\n\tencryption dictionary.\tThere is no reason for any application\n\tcode to call this method since handling of encryption is done\n\tautomatically by the qpdf library.  It is used internally by\n\tQPDFWriter.\n\n\t* Support reading and decryption of files whose main text is not\n\tencrypted but whose attachments are.  More generally, support the\n\tcase of files and streams encrypted differently with some\n\tlimitations, described in the documentation.  This was not\n\tpreviously supported due to lack of test files, but I created test\n\tfiles using a trial version of Acrobat XI to fully implement this\n\tcase.\n\n\t* Incorporate sha2 code from sphlib 3.0.  See README for\n\tlicensing.  Create private pipeline class for computing hashes\n\twith sha256, sha384, and sha512.\n\n\t* Allow specification of initialization vector when using AES\n\tfiltering.  This is required to compute the hash used in /R=6 (PDF\n\t2.0) encryption.\n\n2012-12-28  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add random number generation functions to QUtil.\n\n\t* Fix old bug that could cause an infinite loop if user password\n\trecovery methods were called and a password contained the \"(\"\n\tcharacter (which happens to be the first byte of padding used by\n\tolder PDF encryption formats).\tThis bug was noticed while reading\n\tcode and would not happen under ordinary usage patterns even if\n\tthe password contained that character.\n\n2012-12-27  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add awareness of extension level to PDF Version methods for both\n\treading and writing.  This includes adding method\n\tQPDF::getExtensionLevel and new versions of\n\tQPDFWriter::setMinimumPDFVersion and QPDFWriter::forcePDFVersion\n\tthat support extension levels.\tThe qpdf command-line tool\n\tinterprets version numbers of the form x.y.z as version x.y at\n\textension level z.\n\n\t* Update AES classes to support use of 256-bit keys.\n\n\t* Non-compatible API change: Removed public method\n\tQPDF::flattenScalarReferences.\tInstead, just flatten the scalar\n\treferences we actually need to flatten.\t Flattening scalar\n\treferences was a wrong decision years ago and has occasionally\n\tcaused other problems, among which were that it caused qpdf to\n\tvisit otherwise unreferenced and possibly erroneous objects in the\n\tfile when it didn't have to.  There's no reason that any\n\tnon-internal code would have had to call this.\n\n\t* Non-compatible API change: Removed public method\n\tQPDF::decodeStreams which was previously used by qpdf --check but\n\tis no longer used.  The decodeStreams method could generate false\n\tpositives since it would attempt to access all objects in the file\n\tincluding those that were not referenced.  There's no reason that\n\tany non-internal code would have had to call this.\n\n\t* Non-compatible API change: Removed public method\n\tQPDF::trimTrailerForWrite, which was only intended for use by\n\tQPDFWriter and which is no longer used.\n\n2012-12-26  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add new fields to QPDF::EncryptionData to support newer\n\tencryption formats (V=5, R=5 and R=6)\n\n\t* Non-compatible API change: Change public nested class\n\tQPDF::EncryptionData to make all member fields private and to add\n\tmethod calls.  This is a non-compatible API change, but changing\n\tEncryptionData is necessary to support newer encryption formats,\n\tand making this change will prevent the need from making a\n\tnon-compatible change in the future if new fields are added.  A\n\tpublic nested class should never have had public members to begin\n\twith.\n\n2012-12-25  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Allow PDF header to appear anywhere in the first 1024 bytes of\n\tthe file as recommended in the implementation notes of the Adobe\n\tversion of the PDF spec.\n\n2012-11-20  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add zlib and libpcre to Requires.private in the pkg-config file\n\tto support static linking.  Thanks Tobias Hoffmann for pointing\n\tout the omission.\n\n\t* Ignore (with warning) non-freed objects in the xref table whose\n\toffset is 0.  Some PDF producers (incorrectly) do this.\t See\n\thttps://bugs.linuxfoundation.org/show_bug.cgi?id=1081.\n\n2012-09-23  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add public methods QPDF::processInputSource and\n\tQPDFWriter::setOutputPipeline to allow users to read from custom\n\tinput sources and to write to custom pipelines.\t This allows the\n\tmaximum flexibility in sources for reading and writing PDF files.\n\n2012-09-06  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 3.0.2: release\n\n\t* Add new method QPDFWriter::setExtraHeaderText to add extra text,\n\tsuch as application-specific comments, to near the beginning of a\n\tPDF file.  For linearized files, this appears after the\n\tlinearization parameter dictionary.  For non-linearized files, it\n\tappears right after the PDF header and non-ASCII comment.\n\n\t* Make it possible to write the same QPDF object with two\n\tdifferent QPDFWriter objects that have both called\n\tsetLinearization(true) by making private method\n\tQPDF::calculateLinearizationData() properly initialize its state.\n\n\t* Bug fix: Writing after calling QPDFWriter::setOutputMemory()\n\twould cause a segmentation fault because of an internal field not\n\tbeing initialized, rendering that method useless.  This has been\n\tcorrected.\n\n2012-08-11  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 3.0.1: release\n\n\t* Bug fix: let EOF terminate a literal token as well as\n\twhitespace or comments.\n\n2012-07-31  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 3.0.0: release\n\n2012-07-29  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 3.0.rc1: release\n\n2012-07-25  Jay Berkenbilt  <ejb@ql.org>\n\n\t* From Tobias: add QPDFObjectHandle::replaceStreamData that takes\n\ta std::string analogous to the QPDFObjectHandle::newStream that\n\ttakes a string that was added earlier.\n\n2012-07-21  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Change configure to have image comparison tests disabled by\n\tdefault.  Update README and README.maintainer with information\n\tabout running them.\n\n\t* Add --pages command-line option to qpdf to enable page-based\n\tmerging and splitting.\n\n\t* Add new method QPDFObjectHandle::replaceDict to replace a\n\tstream's dictionary.  Use with caution; see comments in\n\tQPDFObjectHandle.hh.\n\n\t* Add new method QPDFObjectHandle::parse for creation of\n\tQPDFObjectHandle objects from string representations of the\n\tobjects.  Thanks to Tobias Hoffmann for the idea.\n\n2012-07-15  Jay Berkenbilt  <ejb@ql.org>\n\n\t* add new QPDF::isEncrypted method that returns some additional\n\tinformation beyond other versions.\n\n\t* libqpdf/QPDFWriter.cc: fix copyEncryptionParameters to fix the\n\tminimum PDF version based on other file's encryption needs.  This\n\tis a fix to code added on 2012-07-14 and did not impact previously\n\treleased code.\n\n\t* libqpdf/QPDFWriter.cc (copyEncryptionParameters): Bug fix: qpdf\n\twas not preserving whether or not AES encryption was being used\n\twhen copying encryption parameters.  The file would still have\n\tbeen properly encrypted, but a file that started off encrypted\n\twith AES could have become encrypted with RC4.\n\n2012-07-14  Jay Berkenbilt  <ejb@ql.org>\n\n\t* QPDFWriter: add public copyEncryptionParameters to allow copying\n\tencryption parameters from another file.\n\n\t* QPDFWriter: detect if the user has inserted an indirect object\n\tfrom another QPDF object and throw an exception directing the user\n\tto copyForeignObject.\n\n2012-07-11  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Added new APIs to copy objects from one QPDF to another.  This\n\tincludes letting QPDF::addPage() (and QPDF::addPageAt()) accept a\n\tpage object from another QPDF and adding\n\tQPDF::copyForeignObject().  See QPDF.hh for details.\n\n\t* Add method QPDFObjectHandle::getOwningQPDF() to return the QPDF\n\tobject associated with an indirect QPDFObjectHandle.\n\n\t* Add convenience methods to QPDFObjectHandle: assertIndirect(),\n\tisPageObject(), isPagesObject()\n\n\t* Cache when QPDF::pushInheritedAttributesToPage() has been called\n\tto avoid traversing the pages trees multiple times.  This state is\n\tcleared by QPDF::updateAllPagesCache() and ignored by\n\tQPDF::flattenPagesTree().\n\n2012-07-08  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QPDFObjectHandle::newReserved to create a reserved object\n\tand QPDF::replaceReserved to replace it with a real object.\n\tQPDFObjectHandle::newReserved reserves an object ID in a QPDF\n\tobject and ensures that any references to it remain unresolved.\n\tWhen QPDF::replaceReserved is later called, previous references to\n\tthe reserved object will properly resolve to the replaced object.\n\n2012-07-07  Jay Berkenbilt  <ejb@ql.org>\n\n\t* NOTE: BREAKING API CHANGE.  Remove previously required length\n\tparameter from the version QPDFObjectHandle::replaceStreamData\n\tthat uses a stream data provider.  Prior to qpdf 3.0.0, you had to\n\tcompute the stream length in advance so that qpdf could internally\n\tverify that the stream data had the same length every time the\n\tprovider was invoked.  Now this requirement is enforced a\n\tdifferent way, and the length parameter is no longer required.\n\tNote that I take API-breaking changes very seriously and only did\n\tit in this case since the lack of need to know length in advance\n\tcould significantly simplify people's code.  If you were\n\tpreviously going to a lot of trouble to compute the length of the\n\tnew stream data in advance, you now no longer have to do that.\n\tYou can just drop the length parameter and remove any code that\n\twas previously computing the length.  Thanks to Tobias Hoffmann\n\tfor pointing out how annoying the original interface was.\n\n2012-07-05  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QPDFWriter methods to write to an already open stdio FILE*.\n\tImplementation and idea area based on contributions from Tobias\n\tHoffmann.\n\n2012-07-04  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Accept changes from Tobias Hoffmann: add public method\n\tQPDF::pushInheritedAttributesToPage including warnings for\n\tnon-inherited keys that may be discarded from /Pages by\n\tnon-conformant PDF files when the /Pages tree is flattened.\n\n2012-06-27  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add Pl_Concatenate pipeline for stream concatenation also\n\timplemented by Tobias Hoffmann.\t Also added test code\n\t(libtests/concatenate.cc).\n\n\t* Add new methods implemented by Tobias Hoffmann:\n\tQPDFObjectHandle::newReal(double) and\n\tQPDFObjectHandle::newStream(QPDF*, std::string const&).\n\n2012-06-26  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Minor changes so that support for PDF files larger than 4GB\n\tworks well with 32-bit and 64-bit Linux and also with 32-bit and\n\t64-bit Windows with both MSVC and mingw.\n\n\t* Rework internal methods for doing recovery of the cross\n\treference tables for much greater efficiency both in terms of time\n\tand memory usage.\n\n2012-06-24  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Support PDF files larger than 4 GB.  This involved many changes\n\tto the ABI to increase the size of integer types used in various\n\tplaces as well as increasing the amount of padding used when\n\tcreating linearized files.  Automated tests for large files are\n\tdisabled by default.  Run ./configure --help for information on\n\tenabling them.\tRunning the tests requires 11 GB of free disk\n\tspace and takes several minutes.\n\n2012-06-22  Jay Berkenbilt  <ejb@ql.org>\n\n\t* examples/pdf-create.cc: Provide an example of creating a PDF\n\tfrom scratch.  This simple PDF has a single page with some text\n\tand an image.\n\n\t* Add empty QPDFObjectHandle factories for array and dictionary.\n\tWith PDF-from-scratch capability, it is useful to be able to\n\tcreate empty arrays and dictionaries and add keys to them.\n\tUpdated pdf_from_scratch.cc to use these interfaces.\n\n2012-06-21  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QPDF::emptyPDF() to create an empty QPDF object suitable for\n\tadding pages and other objects to.  pdf_from_scratch.cc is test\n\tcode that exercises it.\n\n\t* make/libtool.mk: Place user-specified CPPFLAGS and LDFLAGS later\n\tin the compilation so that if a user installs things in a\n\tnon-standard place that they have to tell the build about, earlier\n\tversions of qpdf installed there won't break the build.\t Thanks to\n\tMacports for reporting this.  (Fixes bug 3468860.)\n\n\t* Instead of using off_t in the public APIs, use qpdf_offset_t\n\tinstead.  This is defined as long long in qpdf/Types.h.\t If your\n\tsystem doesn't support long long, you can redefine it.\n\n\t* Add pkg-config files\n\n\t* QPDFObjectHandle: add shallowCopy() method\n\n\t* QPDF: add new APIs for adding and removing pages.  This includes\n\taddPage(), addPageAt(), and removePage().  Also a method\n\tupdateAllPagesCache() is now available to force update of the\n\tinternal pages cache if you should modify the pages structure\n\tmanually.\n\n\t* QPDF: new processFile method that takes an open FILE*\n\tinstead of a filename.\n\n2012-06-20  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add new array mutation routines to QPDFObjectHandle.\n\tImplemented by Tobias Hoffmann.\n\n\t* Rework APIs that use size_t, off_t, and primitive integer types\n\tso that size_t is used for sizes of memory and off_t is used for\n\tfile offsets.  Also set _FILE_OFFSET_BITS so that large files can\n\tbe supported on 32-bit UNIX/Linux platforms.  The code assumes in\n\tplaces that sizeof(off_t) >= sizeof(size_t).  This resulted in\n\tnon-compatible ABI changes and hopefully clears the way for QPDF\n\tto work with files that are larger than 4 GiB in size.\n\n\t* Add support for versioned symbols on ELF platforms.\n\n\t* Various fixes for gcc 4.7\n\n2011-04-06  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Fix PCRE to stop using deprecated (and now dropped) interfaces.\n\n2011-12-28  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 2.3.1: release\n\n\t* include <stdint.h> if available to support MSVC 2010\n\n\t* Since PCRE is not necessarily thread safe, don't declare any\n\tPCRE objects to be static.\n\n\t* Disregard stderr output from ghostscript when using it to\n\tcompare images in the test suite; see comments in qpdf.test for\n\tdetails.\n\n\t* Fixed a few documentation errors.\n\n2011-08-11  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 2.3.0: release\n\n\t* include/qpdf/qpdf-c.h (\"C\"): add new methods\n\tqpdf_init_write_memory, qpdf_get_buffer_length, and\n\tqpdf_get_buffer to support writing to memory from the C API.\n\n\t* include/qpdf/qpdf-c.h (\"C\"): add new methods qpdf_get_info_key\n\tand qpdf_set_info_key for manipulating text fields of the /Info\n\tdictionary.\n\n2011-08-10  Jay Berkenbilt  <ejb@ql.org>\n\n\t* libqpdf/QPDFWriter.cc (copyEncryptionParameters): preserve\n\twhether metadata is encryption.\t This fixes part of bug 3173659:\n\tthe password becomes invalid if qpdf copies an encrypted file with\n\tcleartext-metadata.\n\n\t* include/qpdf/QPDFWriter.hh: add a new constructor that takes\n\tonly a QPDF reference and leaves specification of output for\n\tlater.\tAdd methods setOutputFilename() to set the output to a\n\tfilename or stdout, and setOutputMemory() to indicate that output\n\tshould go to a memory buffer.  Add method getBuffer() to retrieve\n\tthe buffer used if output was saved to a memory buffer.\n\n\t* include/qpdf/QPDF.hh: add methods replaceObject() and\n\tswapObjects() to allow replacement of an object and swapping of\n\ttwo objects by object ID.\n\n\t* include/qpdf/QPDFObjectHandle.hh: add new methods getDictAsMap()\n\tand getArrayAsVector() for returning the elements of a dictionary\n\tor an array as a map or vector.\n\n2011-06-25  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 2.2.4: release\n\n2011-06-23  Jay Berkenbilt  <ejb@ql.org>\n\n\t* make/libtool.mk (install): Do not strip executables and shared\n\tlibraries during installation.\tLeave that up to the packager.\n\n\t* configure.ac: disable -Werror by default.\n\n2011-05-07  Jay Berkenbilt  <ejb@ql.org>\n\n\t* libqpdf/QPDF_linearization.cc (isLinearized): remove unused\n\toffset variable, found by a gcc 4.6 warning.\n\n2011-04-30  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 2.2.3: release\n\n\t* libqpdf/QPDF.cc (readObjectInternal): Accept the case of the\n\tstream keyword being followed by carriage return by itself.  While\n\tthis is not permitted by the specification, there are PDF files\n\tthat do this, and other readers can read them.\n\n\t* libqpdf/Pl_QPDFTokenizer.cc (processChar): When an inline image\n\tis detected, suspend normalization only up to the end of the\n\tinline image rather than for the remainder of the content stream.\n\t(Fixes qpdf-Bugs 3152169.)\n\n2011-01-31  Jay Berkenbilt  <ejb@ql.org>\n\n\t* libqpdf/QPDF.cc (readObjectAtOffset): use -1 rather than 0 when\n\treading an object at a given to indicate that no object number is\n\texpected.  This allows xref recovery to proceed even if a file\n\tuses the invalid object number 0 as a regular object.\n\n\t* libqpdf/QPDF_linearization.cc (isLinearized): use -1 rather than\n\t0 as a sentinel for not having found the first object in the\n\tfile.  Since -1 can never match the regular expression, this\n\tprevents an infinite loop when checking a file that starts with\n\t(erroneous) 0 0 obj.  (Fixes qpdf-Bugs-3159950.)\n\n2010-10-04  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 2.2.2: release\n\n\t* include/qpdf/qpdf-c.h: Add qpdf_read_memory to C API to call\n\tQPDF::processMemoryFile.\n\n2010-10-01  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 2.2.1: release\n\n\t* include/qpdf/QPDF.hh: Add setOutputStreams method to allow\n\tredirection of library-generated output/error to alternative\n\tstreams.\n\n\t* include/qpdf/QPDF.hh: Add processMemoryFile method for\n\tprocessing a PDF file from a memory buffer instead of a file.\n\n2010-09-24  Jay Berkenbilt  <ejb@ql.org>\n\n\t* libqpdf/QPDF.cc: change private \"file\" method to be a\n\tPointerHolder<InputSource> to prepare qpdf for being able to work\n\twith PDF files loaded into memory in addition to working with\n\tfiles on disk.\n\n\t* include/qpdf/PointerHolder.hh: add operator* and operator->\n\tmethods so that PointerHolder objects can be used like pointers.\n\tThis is consistent with the smart pointer objects in the next\n\trevision of C++.\n\n2010-09-05  Jay Berkenbilt  <ejb@ql.org>\n\n\t* libqpdf/QPDF.cc (readObjectInternal): Recognize empty objects\n\tand treat them as null.\n\n\t* libqpdf/QPDF_Stream.cc (filterable): Handle inline image filter\n\tabbreviations as stream filter abbreviations.  Although this is\n\tnot technically allowed by the PDF specification, table H.1 in the\n\tpre-ISO spec indicates that Adobe's readers accept them.  Thanks\n\tto Jian Ma <stronghorse@tom.com> for bringing this to my\n\tattention.\n\n2010-08-14  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 2.2.0: release\n\n\t* Rename README.windows to README-windows.txt and convert its line\n\tendings to Windows-style line endings.\tAlso mention Jian Ma's VC6\n\tport in the manual and README-windows.txt.\n\n2010-08-09  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QPDFObjectHandle::getRawStreamData to return raw\n\t(unfiltered) stream data.\n\n2010-08-08  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 2.2.rc1: release\n\n2010-08-05  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add QPDFObjectHandle::addPageContents, a convenience routine for\n\tappending or prepending new streams to a page's content streams.\n\tThe \"pdf-double-page-size\" example illustrates its use.\n\n\t* Add new methods to QPDFObjectHandle: replaceStreamData and\n\tnewStream.  These methods allow users of the qpdf library to add\n\tnew streams and to replace data of existing streams.  The\n\t\"pdf-double-page-size\" and \"pdf-invert-images\" examples illustrate\n\ttheir use.\n\n2010-06-06  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Fix memory leak for QPDF objects whose underlying PDF objects\n\tcontain circular references.  Thanks to Jian Ma\n\t<stronghorse@tom.com> for calling my attention to the memory leak.\n\n2010-04-25  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 2.1.5: release\n\n\t* libqpdf/QPDF_encryption.cc (compute_encryption_key): remove\n\trestrictions on length of file identifier string.  (Fixes\n\tqpdf-Bugs-2991412.)\n\n2010-04-18  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 2.1.4: release\n\n\t* libqpdf/QPDFWriter.cc (writeLinearized): the padding calculation\n\tfix in 2.1.2 was applied in only one place but it was needed in\n\ttwo places since there are actually two cross reference streams in\n\ta linearized file.  The new padding calculation is now used for\n\tboth streams.  Hopefully this should put an end to linearization\n\tpadding problems.  (Fixes qpdf-Bugs-2979219.)\n\n2010-04-10  Jay Berkenbilt  <ejb@ql.org>\n\n\t* qpdf/qpdf.cc (main): Since qpdf --check only checks syntax and\n\tstream encoding without doing any semantic checks, make the output\n\tclearer when no errors around found.  This is inspired by\n\tqpdf-Bugs-2983225.\n\n2010-03-27  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 2.1.3: release\n\n\t* libqpdf/QPDF_optimization.cc (flattenScalarReferences): Flatten\n\tscalar references for unreferenced objects as well as those seen\n\tduring traversal of the file.  This matters when preserving object\n\tstreams that contain unreferenced objects with indirect scalars.\n\t(Fixes qpdf-Bugs-2974522.)  Updated TODO with a description of a\n\tpossibly better fix involving removal of flattenScalarReferences.\n\n\t* libqpdf/Pl_AES_PDF.cc (finish): Don't complain if an AES input\n\tbuffer is not a multiple of 16 bytes.  Instead, just pad with\n\tnulls and hope for the best.  PDF files have been encountered \"in\n\tthe wild\" that contain AES buffers that aren't a multiple of 16\n\tbytes.\n\n2010-01-24  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 2.1.2: release\n\n\t* libqpdf/QPDFWriter.cc: fix logic error in padding calculation.\n\tWhen writing linearized files with cross reference streams, the\n\tpadding calculation failed to take differences in sizes of\n\tcompressed data between pass 1 and pass 2 into consideration.\n\n2009-12-14  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 2.1.1: release\n\n\t* qpdf/qtest/qpdf.test: improve test for acroread to make sure it\n\tactually works and is not just present in the path.\n\n2009-12-13  Jay Berkenbilt  <ejb@ql.org>\n\n\t* libqpdf/qpdf/Pl_AES_PDF.hh: include <stdint.h>, if available, so\n\twe have valid definitions of uint32_t.\n\n2009-10-30  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 2.1: release\n\n\t* libqpdf/QPDF.cc: be more forgiving of extraneous whitespace in\n\tthe xref table and while recovering from error conditions.\n\n2009-10-26  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Work around failure of PCRE test case; this test case exercises\n\tan aspect of PCRE that qpdf does not use, and the test fails with\n\tthe version of PCRE on Red Hat Enterprise Linux 5, so we ignore\n\tfailure on this particular test case.\n\n\t* Fix RPM .spec file to include \"C\" examples\n\n2009-10-24  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 2.1.rc1: release\n\n\t* Provide interfaces for getting qpdf's own version number\n\n2009-10-19  Jay Berkenbilt  <ejb@ql.org>\n\n\t* include/qpdf/QPDF.hh (QPDF): getWarnings now returns a list of\n\tQPDFExc rather than a list of strings.\tThis way, warnings may be\n\tinspected in more detail.\n\n\t* Include information about the last object read in most error\n\tmessages.  Most of the time, this will provide a good hint as to\n\twhich object contains the error, but it's possible that the last\n\tobject read may not necessarily be the one that has the error if\n\tthe erroneous object was previously read and cached.\n\n2009-10-18  Jay Berkenbilt  <ejb@ql.org>\n\n\t* If forcing version, disable object stream creation and/or\n\tencryption if previous specifications are incompatible with new\n\tversion.  It is still possible that PDF content, compression\n\tschemes, etc., may be incompatible with the new version, but at\n\tleast this way, older viewers will at least have a chance.\n\n\t* libqpdf/QPDFWriter.cc (unparseObject): avoid compressing\n\tMetadata streams if possible.\n\n2009-10-13  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Upgrade embedded qtest to version 1.4, which allows the test\n\tsuite to be run in Windows with MSYS and ActiveState Perl rather\n\tthan requiring Cygwin perl.\n\n2009-10-04  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Implement support AES encrypt and crypt filters.  Implementation\n\tis not fully tested due to lack of test data but has been tested\n\tfor several cases.\n\n2009-10-04  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add methods to QPDFWriter and corresponding command line\n\targuments to qpdf to set the minimum output PDF version and also\n\tto force the version to a particular value.\n\n\t* libqpdf/QPDF.cc (processXRefStream): warn and ignore extra xref\n\tstream entries when stream is larger than reported size.  This\n\tused to be a fatal error.  (Fixes qpdf-Bugs-2872265.)\n\n2009-09-27  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Add several methods to query permissions controlled by the\n\tencryption dictionary.\tNote that qpdf does not enforce these\n\tpermissions even though it allows the user to query them.\n\n\t* The function QPDF::getUserPassword returned the user password\n\twith the required padding as specified by the PDF specification.\n\tThis is seldom useful to users.\t This function has been replaced\n\tby QPDF::getPaddedUserPassword.\t Call the new\n\tQPDF::getTrimmedUserPassword to retrieve the user password in a\n\thuman-readable format.\n\n\t* qpdf/qpdf.cc (main): qpdf --check now prints the PDF version\n\tnumber in addition to its other output.\n\n2009-09-26  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Removed all references to QEXC; now using std::runtime_error and\n\tstd::logic_error and their subclasses for all exceptions.\n\n2009-05-03  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 2.0.6: release\n\n\t* libqpdf/QPDF_Stream.cc (filterable): ignore /DecodeParms if it's\n\tnot a type we recognize.  (Fixes qpdf-Bugs-2779746.)\n\n2009-03-10  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 2.0.5: release\n\n2009-03-09  Jay Berkenbilt  <ejb@ql.org>\n\n\t* libqpdf/Pl_LZWDecoder.cc: adjust LZWDecoder full table\n\tdetection, now having been able to adequately test boundary\n\tconditions both and with and without early code change.\t Also\n\tcompared implementation with other LZW decoders.\n\n2009-03-08  Jay Berkenbilt  <ejb@ql.org>\n\n\t* qpdf/fix-qdf (write_ostream): Adjust offsets while writing\n\tobject streams to account for changes in the length of the\n\tdictionary and offset tables.\n\n\t* qpdf/qpdf.cc (main): In check mode, in addition to checking\n\tstructure of file, attempt to decode all stream data.\n\n\t* libqpdf/QPDFWriter.cc (QPDFWriter::writeObject): In QDF mode,\n\twrite a comment to the QDF file before each object that indicates\n\tthe object ID of the corresponding object from the original file.\n\tAdd --no-original-object-ids flag to qpdf and\n\tsetSuppressOriginalObjectIDs() method to QPDFWriter to turn this\n\tbehavior off.\n\n\t* libqpdf/QPDF.cc (QPDF::pipeStreamData): Issue a warning instead\n\tof failing if there is a problem found while decoding stream.\n\n\t* qpdf/qpdf.cc: Exit with a status of 3 if warnings were found\n\tregardless of what mode we're in.\n\n2009-02-21  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 2.0.4: release\n\n2009-02-20  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Fix many typos in comments and strings.\n\n\t* qpdf/qpdf.cc: in --check mode, if there are warnings but no\n\terrors, exit with a status of 3.\n\n\t* libqpdf/QPDF.cc (QPDF::insertXrefEntry): when recovering the\n\tcross-reference table, have objects we encounter later in the file\n\tsupersede those we found earlier.  This improves the chances of\n\tbeing able to recover appended files with damaged cross-reference\n\ttables.\n\n2009-02-19  Jay Berkenbilt  <ejb@ql.org>\n\n\t* libqpdf/Pl_LZWDecoder.cc: correct logic error for previously\n\tuntested case of running the LZW decoder without the \"early code\n\tchange\" flag.  Thanks to a bug report from \"Atom Smasher\", I\n\tfinally was able to obtain an input stream compressed in this way.\n\n2009-02-15  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 2.0.3: release\n\n2008-12-11  Jay Berkenbilt  <ejb@ql.org>\n\n\t* qpdf/qpdf.cc (main): Accept -help and -version as well as --help\n\tand --version\n\n2008-11-23  Jay Berkenbilt  <ejb@ql.org>\n\n\t* Include stdio.h in a few files for proper compilation with (yet\n\tto be released) gcc 4.4\n\n\t* updated embedded qtest to version 1.3\n\n\t* libqpdf/QPDF_String.cc (QPDF_String::getUTF8Val): handle\n\tUTF-16BE properly rather than just treating the string as a string\n\tof 16-bit characters.\n\n2008-06-30  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 2.0.2: release\n\n\t* updated embedded qtest to version 1.2 (includes previous\n\tchanges)\n\n2008-06-07  Jay Berkenbilt  <ejb@ql.org>\n\n\t* qpdf/qtest/qpdf/diff-encrypted: change == to = so that the test\n\tsuite passes when /bin/sh is not bash\n\n2008-05-07  Jay Berkenbilt  <ejb@ql.org>\n\n\t* qtest/bin/qtest-driver (run_test): increase timeout for qtest to\n\tbe more tolerant of slow machines\n\n2008-05-06  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 2.0.1: release\n\n\t* make/rules.mk: fix logic with .dep generation for .lo files so\n\tthat dependencies work properly with libtool\n\n2008-05-05  Jay Berkenbilt  <ejb@ql.org>\n\n\t* libqpdf/qpdf/MD5.hh: fix header to be 64-bit clean\n\n\t* configure.ac: add tests for sized integer types\n\n2008-05-04  Jay Berkenbilt  <ejb@ql.org>\n\n\t* libqpdf/QPDF_encryption.cc: do not assume size_t is unsigned int\n\n\t* qpdf/qtest/qpdf.test: removed locale-specific tests.\tThese were\n\treally to check bugs in perl 5.8.0 and are obsolete now.  They\n\talso make the test suite fail in some environments that don't have\n\tall the locales fully configured.\n\n\t* various: updated several files for gcc 4.3 by adding missing\n\tincludes (string.h, stdlib.h)\n\n2008-04-26  Jay Berkenbilt  <ejb@ql.org>\n\n\t* 2.0: initial public release\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "NOTICE.md",
          "type": "blob",
          "size": 2.62109375,
          "content": "QPDF is copyright (c) 2005-2024 Jay Berkenbilt\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n\nVersions of qpdf prior to version 7 were released under the terms of version 2.0 of the Artistic License. At your option, you may continue to consider qpdf to be licensed under those terms. Please see the manual for additional information.\n\nThe qpdf distribution includes a copy of [qtest](https://qtest.sourceforge.io), which is released under the terms of the [version 2.0 of the Artistic license](https://opensource.org/licenses/Artistic-2.0), which can be found at https://opensource.org/licenses/Artistic-2.0.\n\nThe Rijndael encryption implementation used as the basis for AES encryption and decryption support comes from Philip J. Erdelsky's public domain implementation.  The files `libqpdf/rijndael.cc` and `libqpdf/qpdf/rijndael.h` remain in the public domain.  They were obtained from\n* http://www.efgh.com/software/rijndael.htm\n* http://www.efgh.com/software/rijndael.txt\n\nThe embedded sha2 code comes from sphlib 3.0\n* http://www.saphir2.com/sphlib/\n\nThat code has the following license:\n  ```\n  Copyright (c) 2007-2011  Projet RNRT SAPHIR\n\n  Permission is hereby granted, free of charge, to any person obtaining\n  a copy of this software and associated documentation files (the\n  \"Software\"), to deal in the Software without restriction, including\n  without limitation the rights to use, copy, modify, merge, publish,\n  distribute, sublicense, and/or sell copies of the Software, and to\n  permit persons to whom the Software is furnished to do so, subject to\n  the following conditions:\n\n  The above copyright notice and this permission notice shall be included\n  in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n  ```\n"
        },
        {
          "name": "README-appimage.md",
          "type": "blob",
          "size": 0.8896484375,
          "content": "# Using the qpdf AppImage bundle (for Linux x86_64 systems only)\n\nTips:\n\n* After downloading, you have to set the executable bit for any AppImage (for security reasons this is disabled by\n  default): `chmod +x <name-of-application>.AppImage`\n\n* Run the qpdf AppImage with the `--ai-usage` parameter to start learning some useful details about built-in features of\n  this specific AppImage.\n\n* You can rename the AppImage to any name allowed for file names on Linux. The `.AppImage` suffix is not required for it\n  to function. It will also work as expected if you invoke it from a symlink. Using `qpdf` as its filename or symlink\n  name is OK. However, you may want to continue using the qpdf package provided by your system's package manager side by\n  side with the AppImage bundle: in this case it is recommended to use `qpdf.ai` as a short name for (or as the symlink\n  name to) the qpdf-<version>.AppImage.\n"
        },
        {
          "name": "README-doc.txt",
          "type": "blob",
          "size": 0.7138671875,
          "content": "WHERE TO FIND THE qpdf DOCUMENTATION\n\nComplete documentation for qpdf can be found online here:\nhttps://qpdf.readthedocs.io\n\nSome distributions include offline documentation typically in a\nlocation such as /usr/share/doc/qpdf. If it isn't there, you can find\na zip file containing the documentation in the qpdf release area:\nhttps://github.com/qpdf/qpdf/releases\n\nOffline documentation contains the following:\n\n* PDF: qpdf-manual.pdf\n* HTML: manual-html/index.html\n* SINGLE-PAGE HTML: manual-single-page-html/index.html\n\nIf you are reading this file from the source distribution, you can\nfind the documentation sources in the \"manual\" directory. There is\ninformation in the manual about how to build and package the\ndocumentation.\n"
        },
        {
          "name": "README-hardening.md",
          "type": "blob",
          "size": 2.6943359375,
          "content": "# Avoiding `operator[]`\n\nDuring a security review by Red Hat security team (specifically Florian Weimer), it was discovered that qpdf used `std::string` and `std::vector`'s `operator[]`, which has no bounds checking by design. Instead, using those objects' `at()` method is preferable since it does bounds checking.  Florian has a tool that can detect all uses of these methods and report them.  I have a short perl script that automatically corrects any such uses.  The perl script is not intended to be general, but it could be reasonably general.  The only known shortcut is that it might not work very well with some cases of nested `[]`'s like `a[b[c]]` or with cases where there are line breaks inside the brackets.  For qpdf's coding style, it worked on all cases reported.\n\nTo use this, obtain htcondor-analyzer, run it, and respond to the report.  Here's what I did.\n\n```\nsudo aptitude install libclang-dev llvm llvm-dev clang\ncd /tmp\ngit clone https://github.com/fweimer/htcondor-analyzer\n# HEAD = 5fa06fc68a9b0677e9de162279185d58ba1e8477 at this writing\ncd htcondor-analyzer\nmake\n```\n\nIn qpdf:\n\n```\n/tmp/htcondor-analyzer/create-db\nCC=/tmp/htcondor-analyzer/cc CXX=/tmp/htcondor-analyzer/cxx ./configure --disable-shared --disable-werror\n# to remove conftest.c\n\\rm htcondor-analyzer.sqlite\n/tmp/htcondor-analyzer/create-db\n```\n\nRepeat until no more errors:\n\n```\n/tmp/fix-at.pl is shown below.\n```\n\n```\nmake\n/tmp/htcondor-analyzer/report | grep std:: | grep qpdf >| /tmp/r\nperl /tmp/fix-at.pl /tmp/r\n# move all *.new over the original file.  patmv is my script.  Can\n# also use a for loop.\npatmv -f s/.new// **/*.new\n```\n\n/tmp/fix-at.pl:\n```perl\n#!/usr/bin/env perl\nrequire 5.008;\nuse warnings;\nuse strict;\nuse File::Basename;\n\nmy $whoami = basename($0);\n\nmy %to_fix = ();\nwhile (<>)\n{\n    chomp;\n    die unless m/^([^:]+):(\\d+):(\\d+):\\s*(.*)$/;\n    my ($file, $line, $col, $message) = ($1, $2, $3, $4);\n    if ($message !~ m/operator\\[\\]/)\n    {\n        warn \"skipping $_\\n\";\n        next;\n    }\n    push(@{$to_fix{$file}}, [$line, $col, $message]);\n}\nforeach my $file (sort keys %to_fix)\n{\n    open(F, \"<$file\") or die;\n    my @lines = (<F>);\n    close(F);\n    my $last = \"\";\n    my @data = reverse sort { ($a->[0] <=> $b->[0]) || ($a->[1] <=> $b->[1]) } @{$to_fix{$file}};\n    foreach my $d (@data)\n    {\n        my ($line, $col) = @$d;\n        next if $last eq \"$line:$col\";\n        $last = \"$line:$col\";\n        die if $line-- < 1;\n        die if $col-- < 1;\n        print $lines[$line];\n        $lines[$line] =~ s/^(.{$col})([^\\[]+)\\[([^\\]]+)\\]/$1$2.at($3)/ or die \"$file:$last\\n\";\n        print $lines[$line];\n    }\n    open(F, \">$file.new\") or die;\n    foreach my $line (@lines)\n    {\n        print F $line;\n    }\n    close(F) or die;\n}\n```\n"
        },
        {
          "name": "README-maintainer.md",
          "type": "blob",
          "size": 32.71484375,
          "content": "# Maintainer Notes\n\n## Contents\n\n* [ROUTINE DEVELOPMENT](#routine-development)\n* [VERSIONS](#versions)\n* [CHECKING DOCS ON readthedocs](#checking-docs-on-readthedocs)\n* [GOOGLE OSS-FUZZ](#google-oss-fuzz)\n* [CODING RULES](#coding-rules)\n* [ZLIB COMPATIBILITY](#zlib-compatibility)\n* [HOW TO ADD A COMMAND-LINE ARGUMENT](#how-to-add-a-command-line-argument)\n* [RELEASE PREPARATION](#release-preparation)\n* [CREATING A RELEASE](#creating-a-release)\n* [RUNNING pikepdf's TEST SUITE](#running-pikepdfs-test-suite)\n* [OTHER NOTES](#other-notes)\n* [DEPRECATION](#deprecation)\n* [LOCAL WINDOWS TESTING PROCEDURE](#local-windows-testing-procedure)\n* [DOCS ON readthedocs.org](#docs-on-readthedocsorg)\n* [CMAKE notes](#cmake-notes)\n* [ABI checks](#abi-checks)\n* [CODE FORMATTING](#code-formatting)\n\n\n## ROUTINE DEVELOPMENT\n\n**Remember to check pull requests as well as issues in github.**\n\nInclude `-DCMAKE_EXPORT_COMPILE_COMMANDS=ON` with cmake if using emacs lsp mode.\n\nDefault:\n\n```\ncmake -DMAINTAINER_MODE=ON -DBUILD_STATIC_LIBS=OFF \\\n   -DCMAKE_BUILD_TYPE=RelWithDebInfo ..\n```\n\nDebugging:\n\n```\ncmake -DMAINTAINER_MODE=ON -DBUILD_SHARED_LIBS=OFF \\\n   -DCMAKE_BUILD_TYPE=Debug ..\n```\n\nProfiling:\n\n```\nCFLAGS=-pg LDFLAGS=-pg \\\n   cmake -DMAINTAINER_MODE=ON -DBUILD_SHARED_LIBS=OFF \\\n   -DCMAKE_BUILD_TYPE=Debug ..\n```\n\nThen run `gprof gmon.out`. Note that gmon.out is not cumulative.\n\nCoverage:\n\n```\ncmake -DMAINTAINER_MODE=ON -DBUILD_SHARED_LIBS=OFF \\\n   -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE=ON..\n```\n\nThen, from the build directory, run the test suite (`ctest --verbose`) followed by\n```\ngcovr -r .. --html --html-details -o coverage-report.html\n```\n\nNote that, in early 2024, branch coverage information is not very accurate with C++.\n\nMemory checks:\n\n```\nCFLAGS=\"-fsanitize=address -fsanitize=undefined\" \\\n   CXXFLAGS=\"-fsanitize=address -fsanitize=undefined\" \\\n   LDFLAGS=\"-fsanitize=address -fsanitize=undefined\" \\\n   CC=clang CXX=clang++ \\\n   cmake -DMAINTAINER_MODE=ON -DBUILD_SHARED_LIBS=OFF \\\n   -DCMAKE_BUILD_TYPE=Debug ..\n```\n\nWindows:\n\n```\n../cmake-win {mingw|msvc} maint\n```\n\nSee ./build-scripts for other ways to run the build for different\nconfigurations.\n\n## VERSIONS\n\n* The version number on the main branch is whatever the version would\n  be if the top of the branch were released. If the most recent\n  release is version a.b.c, then\n\n  * If there are any ABI-breaking changes since the last release,\n    main's version is a+1.0.0\n  * Else if there is any new public API, main's version is a.b+1.0\n  * Else if there are any code changes, main's version is a.b.c+1\n\n* Whenever we bump the version number, bump shared library versions as\n  well.\n\n* Every released major/minor version has an a.b branch which is used\n  primarily for documentation but could potentially be used to create\n  a new patch release after main has moved on. We don't do that as a\n  rule, but there's no reason we couldn't do it if main had unreleased\n  ABI/API changes that were still in flux and an important bug fix was\n  needed on the most recent release. In that case, a release can be\n  cut from a release branch and then either main can be rebased from\n  there or the changes can be merged back, depending on the amount of\n  drift.\n\n## CHECKING DOCS ON readthedocs\n\nTo check docs on readthedocs.io without running all of CI, push to the\ndoc-check branch. Then visit https://qpdf.readthedocs.io/en/doc-check/\nBuilding docs from pull requests is also enabled.\n\n## GOOGLE OSS-FUZZ\n\n* See ../misc/fuzz (not in repo) for unfixed, downloaded fuzz test cases\n\n* qpdf project: https://github.com/google/oss-fuzz/tree/master/projects/qpdf\n\n* Adding new test cases: download the file from oss-fuzz and drop it\n  in fuzz/qpdf_extra/issue-number.fuzz. When ready to include it, add\n  to fuzz/CMakeLists.txt. Until ready to use, the file can be stored\n  anywhere, and the absolute path can be passed to the reproduction\n  code as described below.\n\n* To test locally, see https://github.com/google/oss-fuzz/tree/master/docs/,\n  especially new_project_guide.md. Summary:\n\n  Clone the oss-fuzz project. From the root directory of the repository:\n\n  ```\n  python3 infra/helper.py build_image --pull qpdf\n  python3 infra/helper.py build_fuzzers [ --sanitizer memory|undefined|address ] qpdf [path-to-qpdf-source]\n  python3 infra/helper.py check_build qpdf\n  python3 infra/helper.py build_fuzzers --sanitizer coverage qpdf\n  python3 infra/helper.py coverage qpdf\n  ```\n\n  To reproduce a test case, build with the correct sanitizer, then run\n\n  python3 infra/helper.py reproduce qpdf <specific-fuzzer> testcase\n\n  where fuzzer is the fuzzer used in the crash.\n\n  The fuzzer is in build/out/qpdf. It can be run with a directory as\n  an argument to run against files in a directory. You can use\n\n  qpdf_fuzzer -merge=1 cur new >& /dev/null&\n\n  to add any files from new into cur if they increase coverage. You\n  need to do this with the coverage build (the one with\n  --sanitizer coverage)\n\n* General documentation: http://libfuzzer.info\n\n* Build status: https://oss-fuzz-build-logs.storage.googleapis.com/index.html\n\n* Project status: https://oss-fuzz.com/ (private -- log in with Google account)\n\n* Latest corpus:\n  gs://qpdf-backup.clusterfuzz-external.appspot.com/corpus/libFuzzer/qpdf_fuzzer/latest.zip\n\n## CODING RULES\n\n* Code is formatted with clang-format. See .clang-format and the\n  \"Code Formatting\" section in manual/contributing.rst for details.\n  See also \"CODE FORMATTING\" below.\n\n* Use std::to_string instead of QUtil::int_to_string et al\n\n* Use of assert:\n\n  * Test code: #include <qpdf/assert_test.h> first.\n  * Debug code: #include <qpdf/assert_debug.h> first and use\n    qpdf_assert_debug instead of assert.\n\n  These rules are enforced by the check-assert test. This practices\n  serves to\n\n  * remind us that assert in release code disappears and so should only\n    be used for debugging; when doing so use a Debug build\n    configuration\n\n  * protect us from using assert in test code without explicitly\n    removing the NDEBUG definition, since that would cause the assert\n    not to actually be testing anything in non-Debug build\n    configurations.\n\n* In a source file, include the header file that declares the source\n  class first followed by a blank line. If a config file is needed\n  first, put a blank line between that and the header followed by\n  another blank line. This assures that each header file is included\n  first at least once, thereby ensuring that it explicitly includes\n  all the headers it needs, which in turn alleviates lots of header\n  ordering problems. The blank line ensures that formatters don't\n  mess this up by resorting the headers.\n\n* Avoid atoi. Use QUtil::string_to_int instead. It does\n  overflow/underflow checking.\n\n* Avoid certain functions that tend to be macros or create compilation\n  errors on some platforms. Known cases: strcasecmp, abs. Avoid min\n  and max. If needed, std::min and std::max are okay to use in C++\n  code with <algorithm> included.\n\n* Remember to avoid using `operator[]` with `std::string` or\n  `std::vector`. Instead, use `at()`. See README-hardening.md for\n  details.\n\n* Use QIntC for type conversions -- see casting policy in docs.\n\n* Remember to imbue ostringstreams with std::locale::classic() before\n  outputting numbers. This protects against the user's global locale\n  altering otherwise deterministic values. (See github issue #459.)\n  One could argue that error messages containing numbers should\n  respect the user's locale, but I think it's more important for\n  output to be consistent, since the messages in question are not\n  really targeted at the end user.\n\n* Use QPDF_DLL on all methods that are to be exported in the shared\n  library/DLL. Use QPDF_DLL_CLASS for all classes whose type\n  information is needed. This is important for classes that are used\n  as exceptions, subclassed, or tested with dynamic_cast across the\n  the shared object boundary (or \"shared library boundary\" -- we may\n  use either term in comments and documentation). In particular,\n  anything new derived from Pipeline or InputSource should be marked\n  with QPDF_DLL_CLASS. We shouldn't need to do it for QPDFObjectHelper\n  or QPDFDocumentHelper subclasses since there's no reason to use\n  dynamic_cast with those, but doing it anyway may help with some\n  strange cases for mingw or with some code generators that may\n  systematically do this for other reasons.\n\n  IMPORTANT NOTE ABOUT QPDF_DLL_CLASS: On mingw, the vtable for a\n  class with some virtual methods and no pure virtual methods seems\n  often (always?) not to be generated if the destructor is inline or\n  declared with `= default`. Therefore, for any class that is intended\n  to be used as a base class and doesn't contain any pure virtual\n  methods, you must declare the destructor in the header without\n  `= default` and provide a non-inline implementation in the source\n  file. Add this comment to the implementation:\n\n    ```cpp\n    // Must be explicit and not inline -- see QPDF_DLL_CLASS in\n    // README-maintainer\n    ```\n\n* Put private member variables in std::unique_ptr<Members> for all\n  public classes. Forward declare Members in the header file and define\n  Members in the implementation file. One of the major benefits of\n  defining Members in the implementation file is that it makes it easier\n  to use private classes as data members and simplifies the include order.\n  Remember that Members must be fully defined before the destructor of the\n  main class. For an example of this pattern see class JSONHandler.\n\n  Exception: indirection through std::unique_ptr<Members> incurs an overhead,\n  so don't do it for:\n  * (especially private) classes that are copied a lot, like QPDFObjectHandle\n    and QPDFObject.\n  * classes that are a shared pointer to another class, such as QPDFObjectHandle\n    or JSON.\n\n  For exported classes that do not use the member pattern for performance\n  reasons it is worth considering adding a std::unique_ptr to an empty Members\n  class initialized to nullptr to give the flexibility to add data members\n  without breaking the ABI.\n\n  Note that, as of qpdf 11, many public classes use `std::shared_ptr`\n  instead. Changing this to `std::unique_ptr` is ABI-breaking. If the\n  class doesn't allow copying, we can switch it to std::unique_ptr and\n  let that be the thing that prevents copying. If the intention is to\n  allow the object to be copied by value and treated as if it were\n  copied by reference, then `std::shared_ptr<Members>` should be used.\n  The `JSON` class is an example of this. As a rule, we should avoid\n  this design pattern. It's better to make things non-copiable and to\n  require explicit use of shared pointers, so going forward,\n  `std::unique_ptr` should be preferred.\n\n* Traversal of objects is expensive. It's worth adding some complexity\n  to avoid needless traversals of objects.\n\n* Avoid attaching too much metadata to objects and object handles\n  since those have to get copied around a lot.\n\n* Prefer std::string_view to std::string const& and char const*.\n\n  * Where functions rely on strings being null-terminated, std::string_view may not be appropriate.\n\n  * For return values, consider whether returning a string_view is safe or whether it is more appropriate\n    to return a std::string or std::string const&, especially in the public API.\n\n  * NEVER replace a std::string const& return value with std::string_view in the public API.\n\n\n## ZLIB COMPATIBILITY\n\nThe qpdf test suite is designed to be independent of the output of any\nparticular version of zlib. There are several strategies to make this\nwork:\n\n* `build-scripts/test-alt-zlib` runs in CI and runs the test suite\n  with a non-default zlib. Please refer to that code for an example of\n  how to do this in case you want to test locally.\n\n* The test suite is full of cases that compare output PDF files with\n  expected PDF files in the test suite. If the file contains data that\n  was compressed by QPDFWriter, then the output file will depend on\n  the behavior of zlib. As such, using a simple comparison won't work.\n  There are several strategies used by the test suite.\n\n  * A new program called `qpdf-test-compare`, in most cases, is a drop\n    in replacement for a simple file comparison. This code make sure\n    the two files have exactly the same number of objects with the\n    same object and generation numbers, and that corresponding objects\n    are identical with the following allowances (consult its source\n    code for all the details details):\n    * The `/Length` key is not compared in stream dictionaries.\n    * The second element of `/ID` is not compared.\n    * If the first and second element of `/ID` are the same, then the\n      first element if `/ID` is also not compared.\n    * If a stream is compressed with `/FlateDecode`, the\n      _uncompressed_ stream data is compared. Otherwise, the raw\n      stream data is compared.\n    * Generated fields in the `/Encrypt` dictionary are not compared,\n      though password-protected files must have the same password.\n    * Differences in the contents of `/XRef` streams are ignored.\n\n    To use this, run `qpdf-test-compare actual.pdf expected.pdf`, and\n    expect the output to match `expected.pdf`. For example, if a test\n    used to be written like this;\n    ```perl\n    $td->runtest(\"check output\",\n                 {$td->FILE => \"a.pdf\"},\n                 {$td->FILE => \"out.pdf\"});\n    ```\n    then write it like this instead:\n    ```perl\n    $td->runtest(\"check output\",\n                 {$td->COMMAND => \"qpdf-test-compare a.pdf out.pdf\"},\n                 {$td->FILE => \"out.pdf\", $td->EXIT_STATUS => 0});\n    ```\n    You can look at `compare-for-test/qtest/compare.test` for\n    additional examples.\n\n    Here's what's going on:\n    * If the files \"match\" according to the rules of\n      `qpdf-test-compare`, the output of the program is the expected\n      file.\n    * If the files do not match, the output is the actual file. The\n      reason is that, if a change is made that results in an expected\n      change to the expected file, the output of the comparison can be\n      used to replace the expected file (as long as it is definitely\n      known to be correct—no shortcuts here!). That way, it doesn't\n      matter which zlib you use to generate test files.\n    * As a special debugging tool, you can set the `QPDF_COMPARE_WHY`\n      environment variable to any value. In this case, if the files\n      don't match, the output is a description of the first thing in\n      the file that doesn't match. This is mostly useful for debugging\n      `qpdf-test-compare` itself, but it can also be helpful as a\n      sanity check that the differences are expected. If you are\n      trying to find out the _real_ differences, a suggestion is to\n      convert both files to qdf and compare them lexically.\n\n  * There are some cases where `qpdf-test-compare` can't be used. For\n    example, if you need to actually test one of the things that\n    `qpdf-test-compare` ignores, you'll need some other mechanism.\n    There are tests for deterministic ID creation and xref streams\n    that have to implement other mechanisms. Also, linearization hint\n    streams and the linearization dictionary in a linearized file\n    contain file offsets. Rather than ignoring those, it can be\n    helpful to create linearized files using `--compress-streams=n`.\n    In that case, `QPDFWriter` won't compress any data, so the PDF\n    will be independent of the output of any particular zlib\n    implementation.\n\nYou can find many examples of how tests were rewritten by looking at\nthe commits preceding the one that added this section of this README\nfile.\n\nNote about `/ID`: many test cases use `--static-id` to have a\npredictable `/ID` for testing. Many other test cases use\n`--deterministic-id`. While `--static-id` is unaffected by file\ncontents, `--deterministic-id` is based on file contents and so is\ndependent on zlib output if there is any newly compressed data. By\nusing `qpdf-test-compare`, it's actually not necessary to use either\n`--static-id` or `--deterministic-id`. It may still be necessary to\nuse `--static-aes-iv` if comparing encrypted files, but since\n`qpdf-test-compare` ignores `/Perms`, a wider range of encrypted files\ncan be compared using `qpdf-test-compare`.\n\n## HOW TO ADD A COMMAND-LINE ARGUMENT\n\nQuick reminder:\n\n* Add an entry to the top half of job.yml for the command-line\n  argument\n* Add an entry to the bottom half of job.yml for the job JSON field\n* Add documentation for the new option to cli.rst\n* Implement the QPDFJob::Config method in QPDFJob_config.cc\n* Adding new options tables is harder -- see below\n\nQPDFJob is documented in three places:\n\n* This section provides a quick reminder for how to add a command-line\n  argument\n\n* generate_auto_job has a detailed explanation about how QPDFJob and\n  generate_auto_job work together\n\n* The manual (\"QPDFJob Design\" in qpdf-job.rst) discusses the design\n  approach, rationale, and evolution of QPDFJob.\n\nCommand-line arguments are closely coupled with QPDFJob. To add a new\ncommand-line argument, add the option to the appropriate table in\njob.yml. This will automatically declare a method in the private\nArgParser class in QPDFJob_argv.cc which you have to implement. The\nimplementation should make calls to methods in QPDFJob via its Config\nclasses. Then, add the same option to either the no-json section of\njob.yml if it is to be excluded from the job json structure, or add it\nunder the json structure to the place where it should appear in the\njson structure.\n\nIn most cases, adding a new option will automatically declare and call\nthe appropriate Config method, which you then have to implement. If\nyou need a manual handler, you have to declare the option as manual in\njob.yml and implement the handler yourself, though the automatically\ngenerated code will declare it for you.\n\nAdding a new option table is a bit harder and is not well-documented.\nFor a simple example, look at the code that added the\n--set-page-labels table. That change was divided into two commits (one\nfor the manual changes, and one for the generated changes) to make it\neasier to use as an example.\n\nThe build will fail until the new option is documented in\nmanual/cli.rst. To do that, create documentation for the option by\nadding a \".. qpdf:option::\" directive followed by a magic help comment\nas described at the top of manual/cli.rst. Put this in the correct\nhelp topic. Help topics roughly correspond with sections in that\nchapter and are created using a special \".. help-topic\" comment.\nFollow the example of other options for style.\n\nWhen done, the following should happen:\n\n* qpdf --new-option should work as expected\n* qpdf --help=--new-option should show the help from the comment in cli.rst\n* qpdf --help=topic should list --new-option for the correct topic\n* --new-option should appear in the manual\n* --new-option should be in the command-line option index in the manual\n* A Config method (in Config or one of the other Config classes in\n  QPDFJob) should exist that corresponds to the command-line flag\n* The job JSON file should have a new key in the schema corresponding\n  to the new option\n\n## RELEASE PREPARATION\n\n* Each year, update copyright notices. This will find all relevant\n  places (assuming current copyright is from last year):\n\n  ```\n  git --no-pager grep -i -n -P \"copyright.*$(expr $(date +%Y) - 1).*berkenbilt\"\n  ```\n\n  Also update the copyright in these places:\n  * debian package -- search for copyright.*berkenbilt in debian/copyright\n  * qtest-driver, TestDriver.pm in qtest source\n\n  Copyright last updated: 2024.\n\n* Take a look at \"External Libraries\" in TODO to see if we need to\n  make any changes. There is still some automation work left to do, so\n  handling external-libs releases is still manual. See also\n  README-maintainer in external-libs.\n\n* Check for open fuzz crashes at https://oss-fuzz.com\n\n* Check all open issues and pull requests in github and the\n  sourceforge trackers. Don't forget pull\n  requests. Note: If the location for reporting issues changes, do a\n  careful check of documentation and code to make sure any comments\n  that include the issue creation URL are updated.\n\n* Check `TODO` file to make sure all planned items for the release are\n  done or retargeted.\n\n* Check work `qpdf` project for private issues\n\n* Make sure the code is formatted.\n\n  ```\n  ./format-code\n  ```\n\n* Run a spelling checker over the source code to catch errors in\n  variable names, strings, and comments.\n\n  ```\n  ./spell-check\n  ```\n\n  This uses cspell. Install with `npm install -g cspell`. The output\n  of cspell is suitable for use with `M-x grep` in emacs. Add\n  exceptions to cSpell.json.\n\n* If needed, run large file and image comparison tests by setting\n  these environment variables:\n\n  ```\n  QPDF_LARGE_FILE_TEST_PATH=/full/path\n  QPDF_TEST_COMPARE_IMAGES=1\n  ```\n\n  For Windows, use a Windows style path, not an MSYS path for large files.\n\n* If any interfaces were added or changed, check C API to see whether\n  changes are appropriate there as well. If necessary, review the\n  casting policy in the manual, and ensure that integer types are\n  properly handled with QIntC or the appropriate cast. Remember to\n  ensure that any exceptions thrown by the library are caught and\n  converted. See `trap_errors` in qpdf-c.cc.\n\n* Double check versions and shared library details. They should\n  already be up to date in the code.\n\n  * Make sure version numbers are consistent in the following locations:\n    * CMakeLists.txt\n    * include/qpdf/DLL.h\n\n  `make_dist` verifies this consistency, and CI fails if they are\n  inconsistent.\n\n* Update release notes in manual. Look at diffs and ChangeLog.\n  Update release date in `manual/release-notes.rst`. Change \"not yet\n  released\" to an actual date for the release.\n\n* Add a release entry to ChangeLog: \"x.y.z: release\"\n\n* Commit changes with title \"Prepare x.y.z release\"\n\n* Performance test is included with binary compatibility steps. Even\n  if releasing a new major release and not doing binary compatibility\n  testing, do performance testing.\n\n* Test for performance and binary compatibility:\n\n  ```\n  ./abi-perf-test v<old> @\n  ```\n\n  * Prefix with `SKIP_PERF=1` to skip performance test.\n  * Prefix with `SKIP_TESTS=1` to skip test suite run.\n\n  See \"ABI checks\" for details about the process.\n  End state:\n  * /tmp/check-abi/perf contains the performance comparison\n  * /tmp/check-abi/old contains old sizes and library\n  * /tmp/check-abi/new contains new sizes and library\n  * run check_abi manually to compare\n\n## CREATING A RELEASE\n\n* Push to main. This will create an artifact called distribution\n  which will contain all the distribution files. Download these,\n  verify the checksums from the job output, rename to remove -ci from\n  the names, and extract to the release archive area.\n\n* Sign the source distribution:\n\n```\nversion=x.y.z\ngpg --detach-sign --armor qpdf-$version.tar.gz\n```\n\n* Build and test the debian package. This includes running autopkgtest.\n\n* Add a calendar reminder to check the status of the debian package to\n  make sure it is transitioning properly and to resolve any issues.\n\n* From the release archive area, sign the releases.\n\n```\n\\rm -f *.sha256\nfiles=(*)\nsha256sum ${files[*]} >| qpdf-$version.sha256\ngpg --clearsign --armor qpdf-$version.sha256\nmv qpdf-$version.sha256.asc qpdf-$version.sha256\nchmod 444 *\nchmod 555 *.AppImage\n```\n\n* When creating releases on github and sourceforge, remember to copy\n  `README-what-to-download.md` separately onto the download area if\n  needed.\n\n* Ensure that the main branch has been pushed to github. The\n  rev-parse command below should show the same commit hash for all its\n  arguments. Create and push a signed tag. This should be run with\n  HEAD pointing to the tip of main.\n\n```\ngit rev-parse qpdf/main @\ngit tag -s v$version @ -m\"qpdf $version\"\ngit push qpdf v$version\n```\n\n* Update documentation branches\n\n```\ngit push qpdf @:$(echo $version | sed -E 's/\\.[^\\.]+$//')\ngit push qpdf @:stable\n```\n\n* If this is an x.y.0 release, visit\n  https://readthedocs.org/projects/qpdf/versions/ (log in with\n  github), and activate the latest major/minor version\n\n* Create a github release after pushing the tag. `gcurl` is an alias\n  that includes the auth token.\n\n```\n# Create release\n\nGITHUB_TOKEN=$(qdata-show cred github-token)\nfunction gcurl() { curl -H \"Authorization: token $GITHUB_TOKEN\" ${1+\"$@\"}; }\n\nurl=$(gcurl -s -XPOST https://api.github.com/repos/qpdf/qpdf/releases -d'{\"tag_name\": \"v'$version'\", \"name\": \"qpdf '$version'\", \"draft\": true}' | jq -r '.url')\n\n# Get upload url\nupload_url=$(gcurl -s $url | jq -r '.upload_url' | sed -E -e 's/\\{.*\\}//')\necho $upload_url\n\n# Upload all the files. You can add a label attribute too, which\n# overrides the name.\nfor i in *; do\n  mime=$(file -b --mime-type $i)\n  gcurl -H \"Content-Type: $mime\" --data-binary @$i \"$upload_url?name=$i\"\ndone\n```\n\nIf needed, go onto github and make any manual updates such as\nindicating a pre-release, adding release notes, etc.\n\nTemplate for release notes.\n\n```\nThis is qpdf version x.y.z. (Brief description)\n\nFor a full list of changes from previous releases, please see the [release notes](https://qpdf.readthedocs.io/en/stable/release-notes.html). See also [README-what-to-download](./README-what-to-download.md) for details about\nthe available source and binary distributions.\n```\n\n```\n# Publish release\ngcurl -XPOST $url -d'{\"draft\": false}'\n```\n\n* Upload files to sourceforge.\n\n```\nrsync -vrlcO ./ jay_berkenbilt,qpdf@frs.sourceforge.net:/home/frs/project/q/qp/qpdf/qpdf/$version/\n```\n\n* On sourceforge, make the source package the default for all but\n  Windows, and make the 64-bit msvc build the default for Windows.\n\n* Publish a news item manually on sourceforge using the release notes text. Remove the relative link\n  to README-what-to-download.md (just reference the file by name)\n\n* Upload the debian package and Ubuntu ppa backports.\n\n* Email the qpdf-announce list.\n\n## RUNNING pikepdf's TEST SUITE\n\nWe run pikepdf's test suite from CI. These instructions show how to do\nit manually.\n\nDo this in a separate shell.\n\n```\ncd ...qpdf-source-tree...\nexport QPDF_SOURCE_TREE=$PWD\nexport QPDF_BUILD_LIBDIR=$QPDF_SOURCE_TREE/build/libqpdf\nexport LD_LIBRARY_PATH=$QPDF_BUILD_LIBDIR\nrm -rf /tmp/z\nmkdir /tmp/z\ncd /tmp/z\ngit clone git@github.com:pikepdf/pikepdf\npython3 -m venv v\nsource v/bin/activate\ncd pikepdf\npython3 -m pip install --upgrade pip\npython3 -m pip install '.[test]'\nrehash\npython3 -m pip install .\npytest -n auto\n```\n\nIf there are failures, use git bisect to figure out where the failure\nwas introduced. For example, set up a work area like this:\n\n```\nrm -rf /tmp/z\nmkdir /tmp/z\ncd /tmp/z\ngit clone file://$HOME/source/qpdf/qpdf/.git qpdf\ngit clone git@github.com:pikepdf/pikepdf\nexport QPDF_SOURCE_TREE=/tmp/z/qpdf\nexport QPDF_BUILD_LIBDIR=$QPDF_SOURCE_TREE/build/libqpdf\nexport LD_LIBRARY_PATH=$QPDF_BUILD_LIBDIR\ncd qpdf\nmkdir build\ncmake -B build -DMAINTAINER_MODE=ON -DBUILD_STATIC_LIBS=OFF \\\n   -DCMAKE_BUILD_TYPE=RelWithDebInfo\ncat <<'EOF'\n#!/bin/bash\ncd /tmp/z/pikepdf\ncmake --build /tmp/z/qpdf/build -j16 --target libqpdf -- -k\ngit clean -dfx\nrm -rf ../v\npython3 -m venv ../v\nsource ../v/bin/activate\npython3 -m pip install --upgrade pip\npython3 -m pip install '.[test]'\npython3 -m pip install .\npytest -n auto\nEOF\nchmod +x /tmp/check\n```\n\nThen in /tmp/z/qpdf, run git bisect. Use /tmp/check at each stage to\ntest whether it's a good or bad commit.\n\n## OTHER NOTES\n\nFor local iteration on the AppImage generation, it works to just\n./build-scripts/build-appimage and get the resulting AppImage from the\ndistribution directory. You can pass additional arguments to\nbuild-appimage, which passes them along to to docker.\n\nUse -e SKIP_TESTS=1 to skip the test suite.\nUse -ti -e RUN_SHELL=1 to run a shell instead of the build script.\n\nTo iterate on the scripts directly in the source tree, you can run\n\n```\ndocker build -t qpdfbuild appimage\ndocker run --privileged --rm -ti -e SKIP_TESTS=1 -e RUN_SHELL=1 \\\n       -v $PWD/..:/tmp/build ${1+\"$@\"} qpdfbuild\n```\n\nThis will put you at a shell prompt inside the container with your\ncurrent directory set to the top of the source tree and your uid equal\nto the owner of the parent directory source tree.\n\nNote: this will leave some extra files (like .bash_history) in the\nparent directory of the source tree. You will want to clean those up.\n\n## DEPRECATION\n\nThis is a reminder of how to use and test deprecation.\n\nTo temporarily disable deprecation warnings for testing:\n\n```cpp\n#ifdef _MSC_VER\n# pragma warning(disable : 4996)\n#endif\n#if (defined(__GNUC__) || defined(__clang__))\n# pragma GCC diagnostic push\n# pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n#endif\n    // Do deprecated thing here\n#if (defined(__GNUC__) || defined(__clang__))\n# pragma GCC diagnostic pop\n#endif\n```\n\nTo declare something as deprecated:\n\n```cpp\n[[deprecated(\"explanation\")]]\n```\n\n## LOCAL WINDOWS TESTING PROCEDURE\n\nThis is what I do for routine testing on Windows.\n\n* From Windows, git clone from my Linux clone, and unzip\n  `external-libs`.\n\n* Start a command-line shell for x86_64 and x86 tools from Visual\n  studio. From there, start C:\\msys64\\mingw64 twice and\n  C:\\msys64\\mingw32 twice.\n\n* Create a build directory for each of the four permutations. Then, in\n  each build directory, run `../cmake-win <tool> maint`.\n\n* Run `cmake --build . -j4`. For MSVC, add `--config Release`\n\n* Test with with msvc: `ctest --verbose -C Release`\n\n* Test with mingw:  `ctest --verbose -C RelWithDebInfo`\n\n## DOCS ON readthedocs.org\n\n* Registered for an account at readthedocs.org with my github account\n* Project page: https://readthedocs.org/projects/qpdf/\n* Docs: https://qpdf.readthedocs.io/\n* Admin -> Settings\n  * Set project home page\n  * Advanced\n    * Show version warning\n    * Default version: stable\n  * Email Notifications: set email address for build failures\n\nAt this time, there is nothing in .github/workflows to support this.\nIt's all set up as an integration directly between github and\nreadthedocs.\n\nThe way readthedocs.org does stable and versions doesn't exactly work\nfor qpdf. My tagging convention is different from what they expect,\nand I don't need versions for every point release. I have the\nfollowing branching strategy to support docs:\n\n* x.y -- points to the latest x.y.z release\n* stable -- points to the latest release\n\nThe release process includes updating the approach branches and\nactivating versions.\n\n## CMAKE notes\n\nTo verify the various cmake options and their interactions, several\nmanual tests were done:\n\n* Break installed qpdf executables (qpdf, fix-qdf, zlib-flate), the\n  shared library, and DLL.h to ensure that other qpdf installations do\n  not interfere with building from source\n\n* Build static only and shared only\n\n* Install separate components separately\n\n* Build only HTML docs and only PDF docs\n\n* Try MAINTAINER_MODE without BUILD_DOC\n\nWe are using RelWithDebInfo for mingw and other non-Windows builds but\nRelease for MSVC. There are linker warnings if MSVC is built with\nRelWithDebInfo when using external-libs.\n\n## ABI checks\n\nUntil the conversion of the build to cmake, we relied on running the\ntest suite with old executables and a new library. When QPDFJob was\nintroduced, this method got much less reliable since a lot of public\nAPI doesn't cross the shared library boundary. Also, when switching to\ncmake, we wanted a stronger check that the library had the expected\nABI.\n\nOur ABI check now consists of three parts:\n\n* The same check as before: run the test suite with old executables\n  and a new library\n\n* Do a literal comparison of the symbols in the old and new shared\n  libraries -- this is a strong test of ABI change\n\n* Do a check to ensure that object sizes didn't change -- even with no\n  changes to the API of exported functions, size changes break API\n\nThe combination of these checks is pretty strong, though there are\nstill things that could potentially break ABI, such as\n\n* Changes to the types of public or protected data members without\n  changing the size\n\n* Changes to the meanings of parameters with changing the signature\n\nNot breaking ABI/API still requires care.\n\nThe check_abi script is responsible for performing many of these\nsteps. See comments in check_abi for additional notes. Running\n\"check_abi check-sizes\" is run by ctest on Linux when CHECK_SIZES is\non.\n\n## CODE FORMATTING\n\n* Emacs doesn't indent breaking strings concatenated with + over\n  lines but clang-format does. It's clearer with clang-format. To\n  get emacs and clang-format to agree, parenthesize the expression\n  that builds the concatenated string.\n\n* With\n\n  ```cpp\n  long_function(long_function(\n      args)\n\n  ```\n\n  clang-format anchors relative to the first function, and emacs\n  anchors relative to the second function. Use\n\n  ```cpp\n  long_function(\n      // line-break\n      long_function(\n\t  args)\n  ```\n  to resolve.\n\nIn the revision control history, there is a commit around April 3,\n2022 with the title \"Update some code manually to get better\nformatting results\" that shows several examples of changing code so\nthat clang-format produces several results. (In git this is commit\n77e889495f7c513ba8677df5fe662f08053709eb.)\n\nThe commits that have the bulk of automatic or mechanical reformatting are\nlisted in .git-blame-ignore-revs. Any new bulk updates should be added there.\n\n[//]: # (cSpell:ignore pikepdfs readthedocsorg .)\n"
        },
        {
          "name": "README-what-to-download.md",
          "type": "blob",
          "size": 3.9033203125,
          "content": "To build from source for Linux or other UNIX/UNIX-like systems, it is generally sufficient to download just the\r\nsource `qpdf-<version>.tar.gz` file.\r\n\r\nWindows Binaries\r\n\r\nYou can download Windows binaries that are statically linked with qpdf's external dependencies and use the OpenSSL\r\ncrypto provider. There are several options:\r\n\r\n* For Windows installers, you can download the `.exe` file for a traditional installer that allows relocation, or you\r\n  can download the `.zip` file which you can unzip to any location. Note that the `msvc` executables perform slightly\r\n  better than the `mingw` executables.\r\n\r\n* `qpdf-<version>-bin-msvc64.exe` - Use this for 64-bit Windows systems. This is the highest performance Windows\r\n  release. It is usually the best choice for using qpdf from the command line. It is also the right choice if you are\r\n  building non-Debug code for 64-bit systems using a recent version of Microsoft Visual C++.\r\n\r\n* `qpdf-<version>-bin-mingw64.exe` - This is a 64-bit version built with mingw. Use this for 64-bit Windows systems if\r\n  you want development libraries that work with the 64-bit version of mingw. If you are dynamically loading qpdf from\r\n  the DLL, this version has fewer DLLs than the msvc version and does not require a Visual C++ runtime DLL. Unlike with\r\n  the MSVC releases, it is possible to link a debugging build with mingw against non-debugging libraries built with\r\n  mingw.\r\n\r\n* `qpdf-<version>-bin-msvc32.exe` - This is a 32-bit version built with MSVC. Use this if you need to run qpdf on a\r\n  32-bit system or if you are building 32-bit executables in non-Debug mode with Microsoft Visual C++. The 32-bit\r\n  executables will work on 64-bit systems as well and are capable of working with files larger than 2 GB.\r\n\r\n* `qpdf-<version>-bin-mingw32.exe` - This is a 32-bit version built with mingw. It will work on 32-bit or 64-bit systems\r\n  and can handle files larger than 2 GB.\r\n\r\nLinux Binaries\r\n\r\nVirtually all Linux distributions include packages for qpdf. There is also a PPA for Ubuntu\r\nat https://launchpad.net/~qpdf/+archive/ubuntu/qpdf that includes the latest version of qpdf for recent versions of\r\nUbuntu. However, there are some downloads available for Linux as well.\r\n\r\n* `qpdf-<version>-x86_64.AppImage` - If you'd like to run the latest version of qpdf as\r\n  an [AppImage](https://appimage.org/), you can download this. This is a self-contained executable that you make\r\n  symlink `qpdf` to and run on most reasonably recent Linux distributions. See README-appimage.md in the qpdf source\r\n  distribution for additional details, or run the AppImage with the `--ai-usage` argument to get help specific to the\r\n  AppImage.\r\n\r\n* `qpdf-<version>-bin-linux-x86_64.zip` - This is not intended to be an end-user distribution. It is a (nearly)\r\n  stand-alone Linux binary, built using an Ubuntu LTS release. It contains the qpdf executables and shared libraries as\r\n  well as dependent shared libraries that would not typically be present on a minimal system. This can be used to\r\n  include qpdf in a minimal environment such as a docker container. It is also known to work as a layer in AWS Lambda\r\n  and was initially created for that purpose. The executables have their runpath set to looks for the qpdf library\r\n  in `../lib` relative to the location of the executables, which makes this distribution relocatable.\r\n\r\nWindows Build Support\r\n\r\nIf you are building on Windows and want to use pre-built external static libraries, you should obtain current versions\r\nfrom https://github.com/qpdf/external-libs/releases. The `external-libs` directory contains older versions that will not\r\nwork with qpdf versions >= 10.0.2. Please see README-windows.md in the qpdf source distribution. The libraries from this\r\ndistribution will not work with a Debug build with MSVC.\r\n\r\nDocumentation\r\n\r\n* `qpdf-<version>-doc.zip` - This is a downloadable version of the qpdf manual. An online version is hosted\r\n  at https://qpdf.readthedocs.io.\r\n"
        },
        {
          "name": "README-windows.md",
          "type": "blob",
          "size": 5.2294921875,
          "content": "Common Setup\r\n============\r\n\r\nYou may need to disable antivirus software to run qpdf's test suite. Running Windows Defender on Windows 10 does not interfere with building or running qpdf or its test suite.\r\n\r\nStarting with qpdf version 11, qpdf is built with cmake. You can build qpdf with Visual C++ in Release mode with the pre-built external-libraries distribution (described below) without having any additional tools installed. You can also build with Visual C++ using JetBrains CLion with the external libraries distribution as long as you pass `-DBUILD_SHARED_LIBS=OFF`. It also works to use the build type `RelWithDebInfo`, in which case you can run qpdf in the debugger. To run the test suite, you need MSYS2.\r\n\r\nHere's what I did on my system:\r\n\r\n* Download msys2 (64-bit) from msys2.org\r\n* Run the installer.\r\n* Run msys2_shell.cmd by allowing the installer to start it.\r\n* From the prompt:\r\n  * Run `pacman -Syu` and follow the instructions, which may tell you\r\n    to close the window and rerun the command multiple times.\r\n  * Run `pacman -Su` to fully update.\r\n  * `pacman -S make base-devel git zip unzip`\r\n  * `pacman -S mingw-w64-x86_64-toolchain mingw-w64-i686-toolchain`\r\n\r\nYou need cmake. If you have Visual Studio or JetBrains CLion installed, you can use the cmake that comes with those tools to build with both MSVC and mingw. You can also a install a native Windows cmake from cmake.org.\r\n\r\nTo build qpdf with Visual Studio from msys2 so you can run its test suite, start the msys2 mingw32 or mingw64 shell from a command window started from one of the Visual Studio shell windows. You must have it inherit the path. For example:\r\n\r\n* Start x64 native tools command prompt from msvc\r\n* `set MSYS2_PATH_TYPE=inherit`\r\n* `C:\\msys64\\mingw64`\r\n\r\nFor the test suite to work properly, your build directory must be on the same drive as your source directory. This is because there are parts of the test environment that create relative paths from one to the other. You can use a cross-drive symlink if needed.\r\n\r\nImage comparison tests are disabled by default, but it is possible to run them on Windows. To do so, set the `QPDF_TEST_COMPARE_IMAGES` environment variable to `1` and install the additional third-party dependencies described in the manual. These may be provided in an environment such as MSYS or Cygwin or can be downloaded separately for other environments. You may extract or install the following software into separate folders each and add the `bin` folder to your `PATH` environment variable to make executables and DLLs available. If installers are provided, they might do that already by default.\r\n\r\n* [LibJpeg](http://gnuwin32.sourceforge.net/packages/jpeg.htm): This archive provides some needed DLLs needed by LibTiff.\r\n* [LibTiff](http://gnuwin32.sourceforge.net/packages/tiff.htm): This archive provides some needed binaries and DLLs if you want to use the image comparison tests. It depends on some DLLs from LibJpeg.\r\n* [GhostScript](http://www.ghostscript.com/download/gsdnld.html): GhostScript is needed for image comparison tests. It's important that the binary is available as `gs`, while its default name is `gswin32[c].exe`. You can either copy one of the original files, use `mklink` to create a hard/softlink, or provide a custom `gs.cmd` wrapper that forwards all arguments to one of the original binaries. Using `mklink` with `gswin32c.exe` is probably the best choice.\r\n\r\n# External Libraries\r\n\r\nIn order to build qpdf, you must have a copy of `zlib` and the `jpeg` library. You can download [prebuilt static external libraries from the qpdf/external-libs github repository](https://github.com/qpdf/external-libs/releases). These include `zlib`, `jpeg`, and `openssl` libraries. For MSVC, you must use a non-debugging build configuration. There are files called `external-libs-bin.zip` and `external-libs-src.zip`. If you are building with a recent MSVC or MINGW with MSYS2, you can just extract the `qpdf-external-libs-bin.zip` zip file into the top-level qpdf source tree. The qpdf build detects the presence of the `external-libs` directory automatically. You don't need to set any cmake options.\r\n\r\nYou can also obtain `zlib` and `jpeg` directly on your own and install them. Just make sure cmake can find them.\r\n\r\nExternal libraries are built using GitHub Actions from the [qpdf/external-libs](https://github.com/qpdf/external-libs) repository.\r\n\r\n# Running tools from the build area\r\n\r\nYou can run qpdf's tests without modifying your PATH. If you want to manually run executables from the build tree on Windows, you need to add the `libqpdf` build directory to your path so it can find the qpdf DLL. This would typically be either `libqpdf` or `libqpdf/<CONFIG>` (e.g., `libqpdf/Release`) depending on which cmake generator you are using. Alternatively, you can disable `BUILD_SHARED_LIBS` for your Windows build. This will cause the executables to use the static qpdf library and not build a qpdf DLL at all.\r\n\r\n# Runtime DLLs\r\n\r\nBoth build methods create executables and DLLs that are dependent on the compiler's runtime DLLs.  When you run `cmake --install` or `cpack`, the installation process will automatically detect the DLLs and copy them into the installation bin directory. For mingw, a perl script is used. For MSVC, `cmake`'s `InstallRequiredSystemLibraries` module is adequate.\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.8076171875,
          "content": "[![qpdf](logo/qpdf.svg)](https://qpdf.sourceforge.io)\n\n[![qpdf Build](https://github.com/qpdf/qpdf/workflows/QPDF%20Build/badge.svg)](https://github.com/qpdf/qpdf/actions)\n[![Documentation Status](https://readthedocs.org/projects/qpdf/badge/?version=latest)](https://qpdf.readthedocs.io/en/latest/?badge=latest)\n\nqpdf is a command-line tool and C++ library that performs content-preserving transformations on PDF files. It supports\nlinearization, encryption, and numerous other features. It can also be used for splitting and merging files, creating\nPDF files (but you have to supply all the content yourself), and inspecting files for study or analysis. qpdf does not\nrender PDFs or perform text extraction, and it does not contain higher-level interfaces for working with page contents.\nIt is a low-level tool for working with the structure of PDF files and can be a valuable tool for anyone who wants to do\nprogrammatic or command-line-based manipulation of PDF files.\n\nThe [qpdf Manual](https://qpdf.readthedocs.io) is hosted online at https://qpdf.readthedocs.io. The project website\nis https://qpdf.sourceforge.io. The source code repository is hosted at GitHub: https://github.com/qpdf/qpdf.\n\n# Verifying Distributions\n\nThe public key used to sign qpdf source distributions has\nfingerprint `C2C9 6B10 011F E009 E6D1  DF82 8A75 D109 9801 2C7E` and can be found at https://q.ql.org/pubkey.asc or\ndownloaded from a public key server.\n\n# Copyright, License\n\nqpdf is copyright (c) 2005-2024 Jay Berkenbilt\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the\nLicense. You may obtain a copy of the License at\n\nhttps://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"\nAS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific\nlanguage governing permissions and limitations under the License.\n\nYou may also see the license in the file [LICENSE.txt](LICENSE.txt) in the source distribution.\n\nVersions of qpdf prior to version 7 were released under the terms of version 2.0 of the Artistic License. At your\noption, you may continue to consider qpdf to be licensed under those terms. Please see the manual for additional\ninformation. The Artistic License appears in the file [Artistic-2.0](Artistic-2.0) in the source distribution.\n\n# Prerequisites\n\nqpdf requires a C++ compiler that supports C++-17.\n\nTo compile and link something with qpdf, you can use `pkg-config` with package name `libqpdf` or `cmake` with package\nname `qpdf`. Here's an example of a `CMakeLists.txt` file that builds a program with the qpdf library:\n\n```\ncmake_minimum_required(VERSION 3.16)\nproject(some-application LANGUAGES CXX)\nfind_package(qpdf)\nadd_executable(some-application some-application.cc)\ntarget_link_libraries(some-application qpdf::libqpdf)\n```\n\nqpdf depends on the external libraries [zlib](https://www.zlib.net/) and [jpeg](https://www.ijg.org/files/).\nThe [libjpeg-turbo](https://libjpeg-turbo.org/) library is also known to work since it is compatible with the regular\njpeg library, and qpdf doesn't use any interfaces that aren't present in the straight jpeg8 API. These are part of every\nLinux distribution and are readily available. Download information appears in the documentation. For Windows, you can\ndownload pre-built binary versions of these libraries for some compilers; see [README-windows.md](README-windows.md) for\nadditional details.\n\nDepending on which crypto providers are enabled, then [GnuTLS](https://www.gnutls.org/)\nand [OpenSSL](https://openssl.org) may also be required. This is discussed more in [Crypto providers](#crypto-providers)\nbelow.\n\nDetailed information appears in the [manual](https://qpdf.readthedocs.io/en/latest/installation.html).\n\n# Licensing terms of embedded software\n\nqpdf makes use of zlib and jpeg libraries for its functionality. These packages can be downloaded separately from their\nown download locations. If the optional GnuTLS or OpenSSL crypto providers are enabled, then GnuTLS and/or OpenSSL are\nalso required.\n\nPlease see the [NOTICE](NOTICE.md) file for information on licenses of embedded software.\n\n# Crypto providers\n\nqpdf can use different crypto implementations. These can be selected at compile time or at runtime. The native crypto\nimplementations that were used in all versions prior to 9.1.0 are still present, but they are not built into qpdf by\ndefault if any external providers are available at build time.\n\nThe following providers are available:\n\n* `gnutls`: an implementation that uses the GnuTLS library to provide crypto; causes libqpdf to link with the GnuTLS\n  library\n* `openssl`: an implementation that can use the OpenSSL (or BoringSSL) libraries to provide crypto; causes libqpdf to\n  link with the OpenSSL library\n* `native`: a native implementation where all the source is embedded in qpdf and no external dependencies are required\n\nThe default behavior is for cmake to discover which other crypto providers can be supported based on available external\nlibraries, to build all available external crypto providers, and to use an external provider as the default over the\nnative one. By default, the native crypto provider will be used only if no external providers are available. This\nbehavior can be changed with various cmake options\nas [described in the manual](https://qpdf.readthedocs.io/en/latest/installation.html#build-time-crypto-selection).\n\n## Note about weak cryptographic algorithms\n\nThe PDF file format used to rely on RC4 for encryption. Using 256-bit keys always uses AES instead, and with 128-bit\nkeys, you can elect to use AES. qpdf does its best to warn when someone is writing a file with weak cryptographic\nalgorithms, but qpdf must always retain support for being able to read and even write files with weak encryption to be\nable to fully support older PDF files and older PDF readers.\n\n# Building from source distribution on UNIX/Linux\n\nStarting with version 11, qpdf builds with cmake. The default configuration with cmake works on most systems. On\nWindows, you can build qpdf with Visual Studio using cmake without having any additional tools installed. However, to\nrun the test suite, you need MSYS2, and you also need MSYS2 to build with mingw.\n\nExample UNIX/Linux build:\n\n```\ncmake -S . -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo\ncmake --build build\n```\n\nExample mingw build from an MSYS2 mingw shell:\n\n```\ncmake -S . -B build -G 'MSYS Makefiles' -DCMAKE_BUILD_TYPE=RelWithDebInfo\ncmake --build build\n```\n\nExample MSVC build from an MSYS shell or from a Windows command shell with Visual Studio command-line tools in the path:\n\n```\ncmake -S . -B build\ncmake --build build --config Release\n```\n\nInstallation can be done with `cmake --install`. Packages can be made with `cpack`.\n\nThe tests use `qtest`, and the test driver is invoked by `ctest`. To see the real underlying tests,\nrun `ctest --verbose` so that you can see `qtest`'s output. If you need to turn off qtest's color output,\npass `-DQTEST_COLOR=0` to cmake.\n\nFor additional information, please refer to the [manual](https://qpdf.readthedocs.io/en/latest/installation.html).\n\n# Building on Windows\n\nqpdf is known to build and pass its test suite with mingw and Microsoft Visual C++. Both 32-bit and 64-bit versions\nwork. In addition to the manual, see [README-windows.md](README-windows.md) for more details on how to build under\nWindows.\n\n# Building Documentation\n\nThe qpdf manual is written in reStructured Text format and is build with [sphinx](https://www.sphinx-doc.org). The\nsources to the user manual can be found in the `manual` directory. For more detailed information, consult\nthe [Building and Installing qpdf section of the manual](https://qpdf.readthedocs.io/en/latest/installation.html) or\nconsult the [build-doc script](build-scripts/build-doc).\n\n# Additional Notes on Build\n\nqpdf provides cmake configuration files and pkg-config files. They support static and dynamic linking. In general, you\ndo not need the header files from qpdf's dependencies to be available to builds that _use_ qpdf. The only exception to\nthis is that, if you include `Pl_DCT.hh`, you need header files from `libjpeg`. Since this is a rare case, qpdf's cmake\nand pkg-config files do not automatically add a JPEG include path to the build. If you are using `Pl_DCT` explicitly,\nyou probably already have that configured in your build.\n\nTo learn about using the library, please read comments in the header files in [include/qpdf](include/qpdf/),\nespecially [QPDF.hh](include/qpdf/QPDF.hh), [QPDFObjectHandle.hh](include/qpdf/QPDFObjectHandle.hh), and\n[QPDFWriter.hh](include/qpdf/QPDFWriter.hh). These are the best sources of documentation on the API. You can also study\nthe code of [QPDFJob.cc](libqpdf/QPDFJob.cc), which exercises most of the public interface. There are additional example\nprograms in the [examples](examples/) directory.\n\n# Additional Notes on Test Suite\n\nBy default, slow tests and tests that require dependencies beyond those needed to build qpdf are disabled. Slow tests\ninclude image comparison tests and large file tests. Image comparison tests can be enabled by setting\nthe `QPDF_TEST_COMPARE_IMAGES` environment variable to `1`. Large file tests can be enabled setting\nthe `QPDF_LARGE_FILE_TEST_PATH` environment variable to the absolute path of a directory with at least 11 GB of free\nspace that can handle files over 4 GB in size. On Windows, this should be a Windows path (e.g. `C:\\LargeFileTemp` even\nif the build is being run from an MSYS2 environment. The test suite provides nearly full coverage even without these\ntests. Unless you are making deep changes to the library that would impact the contents of the generated PDF files or\ntesting this on a new platform for the first time, there is no real reason to run these tests. If you're just running\nthe test suite to make sure that qpdf works for your build, the default tests are adequate.\n\nIf you are packaging qpdf for a distribution and preparing a build that is run by an autobuilder, you may want to\npass `-DSHOW_FAILED_TEST_OUTPUT=1` to `cmake` and run `ctest` with the `--verbose` or `--output-on-failure` option. This\nway, if the test suite fails, test failure detail will be included in the build output. Otherwise, you will have to have\naccess to the `qtest.log` file from the build to view test failures. The Debian packages for qpdf enable this option.\nMore notes for packagers can be found in [the manual](https://qpdf.readthedocs.io/en/latest/packaging.html).\n\n# Random Number Generation\n\nBy default, qpdf uses the crypto provider for generating random numbers. The rest of this applies only if you are using\nthe native crypto provider.\n\nIf the native crypto provider is in use, then, when `qpdf` detects either the Windows cryptography API or the existence\nof `/dev/urandom`, `/dev/arandom`, or `/dev/random`, it uses them to generate cryptographically secure random numbers.\nIf none of these conditions are true, the build will fail with an error. This behavior can be modified in several ways:\n\n* If you use the cmake option `SKIP_OS_SECURE_RANDOM` or define the `SKIP_OS_SECURE_RANDOM` preprocessor symbol, qpdf\n  will not attempt to use Windows cryptography or the random device. You must either supply your own random data\n  provider or allow use of insecure random numbers.\n* If you turn on the cmake option `USE_INSECURE_RANDOM` or define the `USE_INSECURE_RANDOM` preprocessor symbol, qpdf\n  will try insecure random numbers if OS-provided secure random numbers are disabled. This is not a fallback. In order\n  for insecure random numbers to be used, you must also disable OS secure random numbers since, otherwise, failure to\n  find OS secure random numbers is a compile error. The insecure random number source is stdlib's `random()` or `rand()`\n  calls. These random numbers are not cryptography secure, but the qpdf library is fully functional using them. Using\n  non-secure random numbers means that it's easier in some cases to guess encryption keys.\n* In all cases, you may supply your own random data provider. To do this, derive a class\n  from `qpdf/RandomDataProvider` (since version 5.1.0) and call `QUtil::setRandomDataProvider` before you create\n  any `QPDF` objects. If you supply your own random data provider, it will always be used even if support for one of the\n  other random data providers is compiled in. If you wish to avoid any possibility of your build of qpdf from using\n  anything but a user-supplied random data provider, you can define `SKIP_OS_SECURE_RANDOM` and\n  not `USE_INSECURE_RANDOM`. In this case, qpdf will throw a runtime error if any attempt is made to generate random\n  numbers and no random data provider has been supplied.\n\n# Acknowledgments\n\nThe qpdf project has a JetBrains license through\ntheir [Open Source Program](https://www.jetbrains.com/community/opensource/#support). We are grateful for this program\nand have been enjoying the benefits of their high-quality products.\n"
        },
        {
          "name": "TODO-pages.md",
          "type": "blob",
          "size": 26.822265625,
          "content": "# Pages\n\nThis document describes a project known as the _pages epic_. The goal of the pages epic is to enable\nqpdf to properly preserve all functionality associated with a page as pages are copied from one PDF\nto another (or back to the same PDF). A secondary goal is to add more flexibility to the ways in\nwhich documents can be split and combined (flexible assembly).\n\nThis is a work in progress. As implementation proceeds, details will become more solid. Comments are\nencouraged. Please make comments in the [qpdf pages epic\ndiscussion](https://github.com/qpdf/qpdf/discussions/1104). As ideas are refined, they will be\nupdated in this document.\n\n# Tasks\n\nThis a breakdown of work. It is near the top of the file for easy access but doesn't make sense\nwithout reading the rest of the file.\n\n* Create `QPDFAssembler` and incrementally move functionality from `QPDFJob` into it.\n* Create `QPDFSplitter` to use `QPDFAssembler`. Write a section in the manual describing how they\n  work, but leave the detailed API documentation in the header files. Model after how `QPDFJob` is\n  documented.\n* Break down remaining work, to include coming up with a mechanism for tracking destinations and\n  creating helper classes for other document-level operations, then incrementally adding support for\n  each idea. Keep the manual updated as we go.\n\n# Design and Background\n\nTerminology:\n* _Page-level data_: information that is contained within objects reachable from the page dictionary\n  without traversing through any `/Parent` pointers\n* _Document-level data_: information that is reachable from the document catalog (`/Root`) that is\n  not reachable from a page dictionary as well as the `/Info` dictionary\n\nPDF uses document-level data in a variety of ways. There is some document-level data that has each\nof the following properties, among others:\n* References pages by object ID (outlines, interactive forms)\n* Doesn't reference any pages (embedded files)\n* Doesn't reference any pages but influences page rendering (optional content/layers)\n* Doesn't reference any pages but contains information about pages (page labels)\n* Contains information used by pages (named destinations)\n\nAs long as qpdf has had the ability to copy pages from one PDF to another, it has had robust\nhandling of page-level data. When qpdf creates a new PDF file from existing PDF files, it starts\nwith a specific PDF, known as the _primary input_. The primary input may be a file or the built-in\n_empty PDF_. Prior to the implementation of the pages epic, qpdf has ignored document-level data\n(except for page labels and interactive form fields) when merging and splitting files. Any\ndocument-level data in the primary input was preserved, and any document-level data other than form\nfields and page labels was discarded from the other files. After this work is complete, qpdf will\nhandle other document-level data in a manner that preserves the functionality of all pages in the\nfinal PDF. Here are several examples of problems in qpdf prior to the implementation of the pages\nepic:\n* If two files with optional content (layers) are merged, all layers in all but the primary input\n  will be visible in the combined file.\n* If two files with file attachments are merged, attachments will be retained on the primary input\n  but dropped on the others. (qpdf has other ways to copy attachments from one file to another.)\n* If two files with hyperlinks are merged, any hyperlink from other than primary input become\n  non-functional.\n* If two files with outlines are merged, the outlines from the original file will appear in their\n  entirety, including outlines that point to pages that are no longer there, and outlines will be\n  lost from all files except the primary input.\n\nRegarding page assembly, prior to the pages epic, qpdf allows combining pages from arbitrary numbers\nof input PDFs to create an output PDF, or in the case of page splitting, multiple output PDFs. The\nAPI allows arbitrary combinations of input and output files. The command-line allows only the\nfollowing:\n* Merge: creation of a single output file from a primary input and any number of other inputs by\n  selecting pages by index from the beginning or end of the file\n* Split: creation of multiple output files from a single input or the result of a merge into files\n  whose primary input is the empty PDF and that contain a fixed number of pages per group\n* Overlay/underlay: layering pages on top of each other with a maximum of one underlay and one\n  overlay and with no ability to specify transformation of the pages (such as scaling, placing them\n  in a particular spot).\n\nThe pages epic consists of two broad categories of work:\n* Proper handling of document-level features when splitting and merging documents\n* Flexible assembly: greatly increased flexibility in the ways in which pages can be selected from\n  the various input files and combined for the output file. This includes creation of blank pages\n  and composition of pages (n-up or other ways of combining multiple input pages into one output\n  page)\n\nHere are some examples of things that will become possible:\n\n* Stacking arbitrary pages on top of each other with full control over transformation and cropping,\n  including being able to access information about the various bounding boxes associated with the\n  pages (generalization of underlay/overlay)\n* Inserting blank pages\n* Doing n-up page layouts\n* Creating single very long or wide pages with output from other pages\n* Re-ordering pages for printing booklets (also called signatures or printer spreads)\n* Selecting pages based on the outline hierarchy, tags, or article threads\n* Keeping only and all relevant parts of the outline hierarchies from all input files\n\nThe rest of this document describes the details of what how these features will work and what needs\nto be done to make them possible to build.\n\n# Architecture\n\nCreate a `QPDFAssembler` class to handle merging and a `QPDFSplitter` to handle splitting. The\ncomplex assembly logic can be handled by `QPDFAssembler`. `QPDFSplitter` can invoke `QPDFAssembler`\nwith a previous `QPDFAssembler`'s output (or any `QPDF`) multiple times to create the split files.\nThis will mostly involve moving code from `QPDFJob` to `QPDFAssembler` and `QPDFSplitter` and having\n`QPDFJob` invoke them.\n\nPrior to implementation of the pages epic, `QPDFJob` goes through the following stages:\n\n* create QPDF\n  * update from JSON\n  * page specs (`--pages`)\n    * Create a QPDF for each input source\n    * Figure out whether to keep files open\n    * Remove unreferenced resources if needed\n    * Remove pages from the pages tree\n    * Handle collation\n    * Copy or revive all final pages\n      * When copying foreign pages, possibly remove unreferenced resources\n      * Handle the same page copied more than once by cloning the page dictionary while sharing any\n        indirect references\n      * Preserve form fields and page labels\n    * Delete pages from the primary input that were not used in the output\n    * Delete unreferenced form fields\n  * rotation\n  * underlay/overlay\n  * transformations\n    * disable signatures\n    * externalize images\n    * optimize images\n    * generate appearances\n    * flatten annotations\n    * coalesce contents\n    * flatten rotation\n    * remove page labels\n    * remove attachments\n    * add attachments\n    * copy attachments\n* write QPDF\n  * One of:\n    * Do inspections\n    * Write single file\n    * Split pages\n      * Remove unreference resources if needed\n      * Preserve form fields and page labels\n\nBroadly, the above has to be modified in the following ways:\n* The transformations step has to be pulled out as that will stay in `QPDFJob`.\n* Most of write QPDF will stay in `QPDFJob`, but the split logic will move to `QPDFSplitter`.\n* The entire create QPDF logic will move into `QPDFAssembler`.\n* `QPDFAssembler`'s API will allow using an arbitrary QPDF as an input rather than having to start\n  with a file. That makes it possible to do arbitrary work on the PDF prior to passing it to\n  `QPDFAssembler`. The API contract will state that, if an existing `QPDF` is used as the primary\n  input, the same `QPDF` will be returned. Effectively, `QPDFAssembler` will modify the `QPDF` in\n  place.\n* `QPDFAssembler` and `QPDFSplitter` may need a C API, or perhaps C users will have to work through\n  `QPDFJob`, which will expose nearly all of the functionality.\n\nWithin `QPDFAssembler`, we will extend the create QPDF logic in the following ways:\n* Allow creation of blank pages as an additional input source\n* Generalize underlay/overlay\n  * Enable controlling placement\n  * Make repeatable (done)\n* Add additional reordering options\n  * We don't need to provide hooks for this. If someone is going to code a hook, they can just\n    compute the page ordering directly.\n* Have a page composition stage after the overlay/underlay stage\n  * Allow n-up, left-to-right (can reverse page order to get rtl), top-to-bottom, or modular\n    composition like pstops\n* Add additional ways to select pages besides range (e.g. based on outlines)\n* Enhance existing logic to handle other document-level structures, preferably in a way that\n  requires less duplication between split and merge.\n  * We don't need to turn on and off most types of document constructs individually. People can\n    preprocess using the API or qpdf JSON if they want fine-grained control.\n  * For things like attachments and outlines, we can add additional flags.\n\nWithin `QPDFSplitter`, we will add additional ways to specify boundaries for splitting.\n\nWe must take care with the implementations and APIs for `QPDFSplitter`, `QPDFAssembler`, and\n`QPDFJob` to avoid excessive duplication. Perhaps `QPDFJob` can create and configure a\n`QPDFAssembler` and `QPDFSplitter` on the fly to avoid too much duplication of state.\n\nMuch of the logic will actually reside in other helper classes. For example, `QPDFAssembler` will\nprobably not operate with numeric ranges, leaving that to `QPDFJob` and `QUtil` but will instead\nhave vectors of page numbers. The logic for creating page groups from outlines, threads, or\nstructure will most likely live in the document helpers for those bits of functionality. This keeps\nneedless clutter out of `QPDFAssembler` and also makes it possible for people to perform their own\nsubset of functionality by calling lower-level interfaces. The main power of `QPDFAssembler` will be\nto manage sequencing and destination tracking as well as to provide a future-proof API that will\nallow developers to automatically benefit from additional document-level support as it is added to\nqpdf.\n\nOther notes:\n* Per jbarlow, raw pointers are hard to work with in pybind11. Use references or shared pointers\n  instead for fluent interfaces.\n\n\n## Flexible Assembly\n\nThis section discusses modifications to the command-line syntax to make it easier to add flexibility\ngoing forward without breaking backward compatibility. In qpdf 11.9.0, we added non-positional\noptions to `--pages`, `--overlay`, `--underlay` and modified configuration to make it easier to add\nnew options.\n\nIn several cases, we allow specification of transformations or placements. In this context:\n* The origin is always lower-left corner.\n* A _dimension_ may be absolute or relative.\n  * An _absolute dimension_ is `{n}` (in points), `{n}in` (inches), `{n}cm` (centimeters),\n  * A _relative dimension_ is expressed in terms of the corresponding dimension of one of a page's\n    boxes. Which dimension is determined by context.\n    * `{n}{M|C|B|T|A}` is `{n}` times the corresponding dimension of the media, crop, bleed, trim,\n      or art box. Example: `0.5M` would be half the width or height of the media box.\n    * `{n}+{M|C|B|T|A}` is `{n}` plus the corresponding dimension. Example: `-0.5in+T` is half an\n      inch (36 points) less than the width or height of the trim box.\n* A _size_ is\n  * `{w}x{h}`, where `{w}` and `{h}` are dimensions\n  * `letter|a4` (potentially add other page sizes)\n* A _position_ is `{x}x{y}` where `{x}` and `{y}` are dimensions offset from the origin\n* A _rectangle_ is `{llx},{lly},{urx},{ury}` (lower|upper left|right x|y) with `llx` < `urx` and\n  `lly` < `ury`\n  * Examples:\n    * `0.1M,0.1M,0.9M,0.9M` is a box whose llx is 10% of the media box width, lly is 10% of the\n      height, urx is 90% of the width, and ury is 90% of the height\n    * `0,0,612,792` is a box whose size is that of a US Letter page.\n  * A rectangle may also be just one of `M|C|B|T|A` to refer to a page's media, crop, bleed, trim,\n    or art box.\n\nIt's tempting to allow assemblies to be nested, but this gets very complicated. From the C++ API,\nthere is no problem using the output of one `QPDFAssembler` as the input to another, but supporting\nthis from the CLI is hard because of the way JSON/arg parsing is set up. If people need to do that,\nthey can just create intermediate files.\n\nProposed CLI enhancements:\n\n```\n# --pages: inputs\n--file=x [ --password=x ]\n--blank=n  [ --size={size} [ --size-from-page=n ] ]  # see below\n# modifiers refer to most recent input\n--range=...\n--with-attachments={none|all|referenced}  # default = referenced\n--with-outlines={none|all|referenced}  # default = referenced\n--...  # future options to select pages based on outlines, article threads, tags, etc.\n# placement (matrix transformation -- see notes below)\n--rotate=[+-]angle[:page-range]  # existing\n--scale=x,y[:page-range]\n--translate=dx,dy[:page-range]  # dx and dy are dimensions\n--flip={h|v}[:page-range]\n--transform=a,b,c,d,e,f[:page-range]\n--set-box={M|C|B|T|A}=rect[:page-range]  # change a bounding box\n# stacking -- make --underlay and --overlay repeatable\n--{underlay|overlay} ... --\n--file=x [ --password=x ]\n--from, --to, --repeat  # same as current --overlay, --underlay\n--from-rect={rect} # default = T -- see notes\n--to-rect={rect} # default = M -- see notes\n# composition -- a new QPDFJob stage between stacking and transformation\n--compose=...  # see notes\n--n-up={2,4,6,9,16}\n--concat={h|v}  # concatenate all pages to a single big page\n# reordering\n--collate=a,b,c  # exists\n--booklet=...  # re-order pages for book signatures like psbook -- see notes\n# split\n--split-pages=n  # existing\n--split-after=a,b,c  # split after each named page\n--...  # future options to split based on outlines, article threads, tags, etc.\n```\n\nNotes:\n* For `--blank`, `--size` specifies the size of the blank page. If any relative dimensions are used,\n  `--size-from-page=n` must be used to specify the page (from n in the overall input) that relative\n  dimensions should be taken from. It is an error to specify a relative size based on another blank\n  page. (Let's not complicate things by doing a graph traversal to find an eventual absolute page.\n  Just disallow a blank page to specified relative to another blank page.)\n* For stacking, the default is to map the source page's trim box onto the destination page's\n  mediabox. This is a weird default, but it's there for compatibility. The `--from-rect` and\n  `--to-rect` may be used to map an arbitrary region of the over/underlay file into an arbitrary\n  region of a page. With the defaults, an overlay or underlay page will be stretched or shrunk if\n  pages are of variable size. Absolute rectangles can be used to avoid this. If a rectangle uses\n  relative dimensions, they are relative to the page that has the rectangle. You can't create a\n  `--to-rect` relative to the size of the from page or vice versa. If you need to do this, use\n  external logic to compute the rectangles and then use absolute rectangles.\n* `--compose`: XXX\n* `--booklet`: XXX\n* I'm not sure what impact composition should have on page labels. Most likely, we should drop page\n  labels on composition. If someone wants them, they can use `--set-page-labels`.\n\n### Compose, Booklet\n\nThis section needs to be fleshed out. It is probably lower priority than document-level work.\n\nHere are some ideas from pstops. The following is an excerpt from the pstops manual page. Maybe we\ncan come up with something similar using our enhanced rectangle syntax.\n\nThis section contains some sample re‐arrangements. To put two pages on one sheet (of A4 paper),\nthe pagespec to use is:\n```\n2:0L@.7(21cm,0)+1L@.7(21cm,14.85cm)\n```\nTo select all of the odd pages in reverse order, use:\n```\n2:‐0\n```\nTo re‐arrange pages for printing 2‐up booklets, use\n```\n4:‐3L@.7(21cm,0)+0L@.7(21cm,14.85cm)\n```\nfor the front sides, and\n```\n4:1L@.7(21cm,0)+‐2L@.7(21cm,14.85cm)\n```\nfor the reverse sides (or join them with a comma for duplex printing).\n\nFrom issue #493\n```\n pdf2ps infile.pdf infile.ps\n ps2ps -pa4 \"2:0R(4.5cm,26.85cm)+1R(4.5cm,14.85cm)\" infile.ps outfile.ps\n ps2pdf outfile.ps outfile.pdf\n ```\n\nNotes on signatures (psbook). For a signature of size 3, we have the following assuming a 2-up\nconfiguration that is printed double-sided so that, when the whole stack is placed face-up and\nfolded in half, page 1 is on top.\n* front: 6,7, back: 8,5\n* front: 4,9, back: 10,3\n* front: 2,11, back: 12,1\n\nThis is the same as duplex 2-up with pages in order 6, 7, 8, 5, 4, 9, 10, 3, 2, 11, 12, 1\n\nn-up:\n* For 2-up, calculate new w and h such that w/h maintains a fixed ratio and w and h are the largest\n  values that can fit within 1/2 the page with specified margins.\n* Can support 1, 2, 4, 6, 9, 16. 2 and 6 require rotation. The others don't. Will probably need to\n  change getFormXObjectForPage to handle other boxes than trim box.\n* Maybe define n-up a scale and rotate followed by fitting the result into a specified rectangle. I\n  might already have this logic in QPDFAnnotationObjectHelper::getPageContentForAppearance.\n\n## Destinations\n\nWe will have to keep track of destinations that point to a page when the page is moved or copied.\nFor example, if an outline has a destination that points to a particular rectangle on page 5 of the\nsecond file, and we end up dropping a portion of that page into an n-up configuration on a specific\noutput page, we will have to keep track of enough information to replace the destination with a new\none that points to the new physical location of the same material. For another example, consider a\ncase in which the left side of page 3 of the primary input ends up as page 5 of the output and the\nright side of page 3 ends up as page 6. We would have to map destinations from a single source page\nto different destination pages based on which part of the page it was on. If part of the rectangle\npoints to one page and part to another, what do we do? I suggest we go with the top/center of the\nrectangle.\n\nA destination consists of a QPDF, page object, and rectangle in user coordinates. When `QPDFJob`\ncopies a page or converts it to a form XObject, possibly with transformations applied, it will have\nto be able to map a destination to the same triple (QPDF, page object, rectangle) on all pages that\ncontain data from the original page. When writing the final output, any destination that no longer\npoints anywhere should be dropped, and any destination that points to multiple places will need to\nbe handled according to some specification.\n\nWhenever we create any new thing from a page, we create _derived page data_. Examples of derived\npage data would include a copy of the page and a form XObject created from a page. We will have to\nkeep a mapping from any source page to all of its derived objects along with any transformations or\nclipping. When a derived page data object is placed on a final page, that information can be\ncombined with the position and any transformations onto the final page to be able to map any\ndestination to a new one or to determine that it points outside of the visible area. There is\nalready code in placeFormXObject and the code that places appearance streams that deals with these\nkinds of mappings.\n\nWhat do we do if a source page is copied multiple times? I think we will have to just make the new\ndestination point to the first place that the target appears with precedence going to the original\nlocation. If we can detect this, we can give a warning.\n\n# Document-level Behavior\n\nBoth merging and splitting contain logic, sometimes duplicated, to handle page labels, form fields,\nand annotations. We will need to build logic for other things. This section is a rough breakdown of\nthe different things in the document catalog (plus the info dictionary, which is referenced from the\ntrailer) and how we may have to handle them. We will need to implement various ObjectHelper and\nDocumentHelper classes.\n\n7.7.2 contains the list of all keys in the document catalog.\n\nDocument-level structures to merge:\n* Extensions\n  * Must be combination of Extensions from all input files\n* PageLabels\n  * Ensure each page has its original label\n  * Allow post-processing\n* Names -- see below\n  * Combine per tree\n  * May require disambiguation\n  * Page: TemplateInstantiated\n* Dests\n  * Keep referenced destinations across all files\n  * May need to disambiguate or \"flatten\" or convert to named dests with the names tree\n* Outlines\n* Threads (easy)\n  * Page: B\n* AcroForm\n* StructTreeRoot\n  * Page: StructParents\n  * See jbarlow's comments in #1104 for additional notes\n* MarkInfo (see 14.7 - Logical Structure, 14.8 Tagged PDF)\n* SpiderInfo\n  * Page: ID\n* OutputIntents\n  * Page: OutputIntents\n* PieceInfo\n  * Page: PieceInfo\n* OCProperties\n* Requirements\n* AF (file specification dictionaries)\n  * Page: AF\n* DPartRoot\n  * Page: DPart\n* Version\n  * Maximum\n\nThings that stay with the first document that has one and/or will not be supported\n* AA (Additional Actions)\n  * Would be possible to combine and let the first contributor win, but it probably wouldn't usually\n    be what we want.\n* Info (not part of document catalog)\n* ViewerPreferences\n* PageLayout\n* PageMode\n* OpenAction\n* URI\n* Metadata\n* Lang\n* NeedsRendering\n* Collection\n* Perms\n* Legal\n* DSS\n\nName dictionary (7.7.4)\n* Dests\n* AP (appearance streams)\n* JavaScript\n* Pages (named pages)\n* Templates\n  * Combine across all documents\n  * Page: TemplateInstantiated points to a named page\n* IDS\n* URLS\n* EmbeddedFiles\n* AlternatePresentations\n* Renditions\n\nMost of chapter 12 applies. See Document-level navigation (12.3).\n\n# Feature to Issue Mapping\n\nLast checked: 2024-01-18\n\n```\ngh search issues label:pages --repo qpdf/qpdf --limit 200 --state=open\n```\n\n* Allow an existing `QPDF` to be an input to a merge or underlay/overlay operation when using the\n  `QPDFAssembler` C++ API\n  * Issues: none\n* Fixes to copying annotations\n  * Issues: #1116\n  * Notes:\n    * This is a PR that includes some failing test cases\n    * Fix `/P`\n    * Allow copying of annotations from a region of a page (not sure I want to add that)\n    * Allow selection of pages without annotations (not sure I want to do that)\n* Generate a mapping from source to destination for all destinations\n  * Issues: #1077\n  * Notes:\n    * Source can be an outline or link, either directly or via action. If link, it should include\n      the page.\n    * Destination can be a structure destination, which should map to a regular destination.\n    * source: page X -> link -> action -> dest: page Y\n    * source: page X -> link -> action -> dest: structure -> page Y\n    * Consider something in json that dumps this.\n    * We will need to associate this with a QPDF. It would be great if remote or embedded go-to\n      actions could be handled, but that's ambitious.\n    * It will be necessary to keep some global map that includes all QPDF objects that are part of\n      the final file.\n    * An interesting use case to consider would be to create a QPDF object from an embedded file and\n      append the embedded file and make the embedded actions work. This would probably require some\n      way to tell qpdf that a particular external file came from an embedded file.\n* Control size of page and position/transformation of overlay/underlay\n  * Issues: #1031, #811, #740, #559\n  * Notes:\n    * It should be possible to define a destination page from scratch or in terms of other pages and\n      then place page contents onto it with arbitrary transformations applied.\n    * It should be possible to compute the size of the destination page in terms of the source\n      pages, e.g., to create one long or wide page from other pages.\n    * Also allow specification of which page box to use\n* Preserve hyperlinks when doing any page operations\n  * See also \"Generate a mapping from source to destination for all destinations\"\n  * Issues: #1003, #797, #94\n  * Notes:\n    * A link annotation that points to a destination rather than an external URL should continue to\n      work when files are split or merged.\n* Awareness of structured and tagged PDF (14.7, 14.8)\n  * Issues: #957, #953, #490\n  * Notes:\n    * This looks complicated. It may be not be possible to do this fully in the first increment, but\n      we have to keep it in mind and warn if we can't and we see /SD in an action.\n    * #490 has some good analysis\n* Interleave pages with ordering\n  * Issues: #921\n  * Notes:\n    * From 921: interleave odd pages and reversed even pages. This might require different handling\n      for even/odd numbers of pages. Make sure it's natural for the cases of len(odd) == len(even)\n      or len(odd) == 1+len(even)\n* Preserve all attachments when merging files\n  * Issues: #856\n  * Notes:\n    * If all pages of a file are selected, keep all attachments\n    * If some pages of a file are selected\n      * Keep all attachments if there are any embedded file annotations\n      * Otherwise, what? Do we have a keep-attachments flag of some sort? Or do we just make the\n        user copy attachments from one file to another?\n* Apply clipping to a page\n  * Issues: #771\n  * Notes:\n    * Create a form xobject from a page, then apply a specific clipping region expressed in\n      coordinates or as a percentage\n* Ability to create a blank page\n  * Issues: #753\n  * Notes:\n    * Create a blank page of a specific size or of the same size as another page\n* Split groups with explicit boundaries\n  * Issues: #741, #616\n  * Notes:\n    * Example: --split-after a,b,c\n* Handle Optional Content (layers) (8.11)\n  * Issues: #672, #9, #570\n* Scale a page up or down to fit to a size\n  * Issues: #611\n* Place contents of pages adjacent horizontally or vertically on one page\n  * Issues: #1040, #546\n* nup, booklet\n  * Issues: #493, #461, #152\n  * Notes:\n    * #461 may want the inverse of booklet and discusses reader and printer spreads\n* Flexible multiplexing\n  * Issues: #505 (already implemented with --collate)\n* Split pages based on outlines\n  * Issues: #477\n* Keep relevant parts of outline hierarchy\n  * Issues: #457, #356, #343, #323, #1199\n  * Notes:\n    * There is some helpful discussion in #343 including\n      * Preserving open/closed status\n      * Preserving javascript actions\n    * #1199 suggests being able to add outlines based on the file name when merging files. A related\n      idea could be merge outline hierarchies by creating a new top-level item for each merged file.\n* Split pages: write pages to memory\n  * Issues: #1130\n\n# Other use cases\n\n* Other ways to specify pages besides numeric range\n  * all pages reachable from a section of the outline hierarchy\n  * something based on threads or document structure\n  * selection based on page labels\n* Placement for composition, overlay, underlay\n  * Scale the smaller page up to the size of the larger page\n  * Center the smaller page horizontally and bottom-align the trim boxes\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 41.5126953125,
          "content": "Contents\n========\n\n- [Always](#always)\n- [In Progress](#in-progress)\n- [Next](#next)\n- [Possible future JSON enhancements](#possible-future-json-enhancements)\n- [QPDFJob](#qpdfjob)\n- [Documentation](#documentation)\n- [Document-level work](#document-level-work)\n- [Text Appearance Streams](#text-appearance-streams)\n- [Fuzz Errors](#fuzz-errors)\n- [External Libraries](#external-libraries)\n- [ABI Changes](#abi-changes)\n- [C++ Version Changes](#c-version-changes)\n- [Page splitting/merging](#page-splittingmerging)\n- [Analytics](#analytics)\n- [General](#general)\n\n- [HISTORICAL NOTES](#historical-notes)\n\nAlways\n======\n\n* Evaluate issues tagged with `next` and `bug`. Remember to check discussions and pull requests in\n  addition to regular issues.\n* When close to release, make sure external-libs is building and follow instructions in\n  ../external-libs/README\n\nIn Progress\n===========\n\nModernize qpdf\n--------------\n\nUpdate code to make use of the facilities provided by C++17. In particular, replace early qpdf C-style code\nwith modern equivalent. Key updates are:\n\n* use the standard library where appropriate\n* replace C-strings with std::string or std::string_view\n* replace raw pointer with smart pointers or standard library containers\n* replace std::string const& with std::string_view where appropriate\n* replace std::shared_ptr with std::unique_ptr or references to the underlying object where appropriate\n\nNext steps are:\n\n* review function signatures in the public API\n* replace code that uses QUtil::make_shared_cstr etc\n\nExcept for the above, prefer to make modernization changes as part of other updates.\n\nNext\n====\n\n* Add some additional code coverage analysis to CI\n* Spell check: Have the spell-check script synchronize cSpell.json with .idea/dictionaries/qpdf.xml,\n  which should be set to the union of all the validated user dictionaries.\n* Maybe fix #553 -- use file times for attachments (trivial with C++-20)\n* std::string_view transition -- work being done by m-holger\n* Support incremental updates. See \"incremental updates\" in [General](#general). See also issue #22.\n  * Make it possible to see incremental updates in qdf mode.\n  * Make it possible to add incremental updates.\n  * We may want a writing mode that preserves object IDs. See #339.\n  * Issue #1148 raises concerns about mixing xref tables and xref streams. We will have to consider\n    how qpdf should deal with this while making sure not to break hybrid-ref files, which are in the\n    test suite.\n* Support digital signatures. This probably requires support for incremental updates. First, add\n  support for verifying digital signatures. Then we can consider adding support for signing\n  documents, though the ability to sign documents is less useful without an interactive process of\n  filling in a field. We may want to support only a subset of digital signature with invisible\n  signature fields or with existing fields.\n* Support public key security handler (Section 7.6.5.)\n\nPossible future JSON enhancements\n=================================\n\n* Consider not including unreferenced objects and trimming the trailer in the same way that\n  QPDFWriter does (except don't remove `/ID`). This means excluding the linearization dictionary and\n  hint stream, the encryption dictionary, all keys from trailer that are removed by\n  QPDFWriter::getTrimmedTrailer except `/ID`, any object streams, and the xref stream as long as all\n  those objects are unreferenced. (They always should be, but there could be some bizarre case of\n  someone creating a PDF file that has an indirect reference to one of those, in which case we need\n  to preserve it.) If this is done, make `--preserve-unreferenced` preserve unreference objects and\n  also those extra keys. Search for \"linear\" and \"trailer\" in json.rst to update the various places\n  in the documentation that discuss this. Also update the help for --json and\n  --preserve-unreferenced.\n\n* Add to JSON output the information available from a few additional informational options:\n\n  * --check: add but maybe not by default?\n\n  * --show-linearization: add but maybe not by default? Also figure out whether warnings reported\n    for some of the PDF specs (1.7) are qpdf problems. This may not be worth adding in the first\n    increment.\n\n  * --show-xref: add\n\n* Consider having --check, --show-encryption, etc., just select the right keys when in json mode. I\n  don't think I want check on by default, so that might be different.\n\n* Consider having warnings be included in the json in a \"warnings\" key in json mode.\n\nQPDFJob\n=======\n\nHere are some ideas for QPDFJob that didn't make it into 10.6. Not all of these are necessarily\ngood -- just things to consider.\n\n* How do we chain jobs? The idea would be that the input and/or output of a QPDFJob could be a QPDF\n  object rather than a file. For input, it's pretty easy. For output, none of the output-specific\n  options (encrypt, compress-streams, objects-streams, etc.) would have any affect, so we would have\n  to treat this like inspect for error checking. The QPDF object in the state where it's ready to be\n  sent off to QPDFWriter would be used as the input to the next QPDFJob. For the job json, I think\n  we can have the output be an identifier that can be used as the input for another QPDFJob. For a\n  json file, we could the top level detect if it's an array with the convention that exactly one has\n  an output, or we could have a subkey with other job definitions or something. Ideally, any input\n  (copy-attachments-from, pages, etc.) could use a QPDF object. It wouldn't surprise me if this\n  exposes bugs in qpdf around foreign streams as this has been a relatively fragile area before.\n\nDocumentation\n=============\n\n* Do a full pass through the documentation.\n\n  * Make sure `qpdf` is consistent. Use qpdf when just referring to the package.\n  * Make sure markup is consistent\n  * Autogenerate where possible\n  * Consider which parts might be good candidates for moving to the wiki.\n\n* Commit 'Manual - enable line wrapping in table cells' from Mon Jan 17 12:22:35 2022 +0000 enables\n  table cell wrapping. See if this can be incorporated directly into sphinx_rtd_theme and the\n  workaround can be removed.\n\n* When possible, update the debian package to include docs again. See\n  https://bugs.debian.org/1004159 for details.\n\nDocument-level work\n===================\n\n* Ideas here may by superseded by #593.\n\n* QPDFPageCopier -- object for moving pages around within files or between files and performing\n  various transformations. Reread/rewrite\n  _page-selection in the manual if needed.\n\n  * Handle all the stuff of pages and split-pages\n  * Do n-up, booklet, collation\n  * Look through cli and see what else...flatten-*?\n  * See comments in QPDFPageDocumentHelper.hh for addPage -- search for \"a future version\".\n  * Make it efficient for bulk operations\n  * Make certain doc-level features selectable\n  * qpdf.cc should do all its page operations, including overlay/underlay, splitting, and merging,\n    using this\n  * There should also be example code\n\n* After doc-level checks are in, call --check on the output files in the \"Copy Annotations\" tests.\n\n* Document-level checks. For example, for forms, make sure all form fields point to an annotation on\n  exactly one page as well as that all widget annotations are associated with a form field. Hook\n  this into QPDFPageCopier as well as the doc helpers. Make sure it is called from --check.\n\n* See also issues tagged with \"pages\". Include closed issues.\n\n* Add flags to CLI to select which document-level options to preserve or not preserve. We will\n  probably need a pair of mutually exclusive, repeatable options with a way to specify all, none,\n  only {x,y}, or all but {x,y}.\n\n* If a page contains a reference a file attachment annotation, when that page is copied, if the file\n  attachment appears in the top-level EmbeddedFiles tree, that entry should be preserved in the\n  destination file. Otherwise, we probably will require the use of --copy-attachments-from to\n  preserve these. What will the strategy be for deduplicating in the automatic case?\n\nText Appearance Streams\n=======================\n\nThis is a list of known issues with text appearance streams and things we might do about it.\n\n* For variable text, the spec says to pull any resources from /DR that are referenced in /DA but if\n  the resource dictionary already has that resource, just use the one that's there. The current code\n  looks only for /Tf and adds it if needed. We might want to instead merge /DR with resources and\n  then remove anything that's unreferenced. We have all the code required for that in ResourceFinder\n  except TfFinder also gets the font size, which ResourceFinder doesn't do.\n\n* There are things we are missing because we don't look at font metrics. The code from TextBuilder\n  (work) has almost everything in it that is required. Once we have knowledge of character widths,\n  we can support quadding and multiline text fields (/Ff 4096), and we can potentially squeeze text\n  to fit into a field. For multiline, first squeeze vertically down to the font height, then squeeze\n  horizontally with Tz. For single line, squeeze horizontally with Tz. If we use Tz, issue a\n  warning.\n\n* When mapping characters to widths, we will need to care about character encoding. For built-in\n  fonts, we can create a map from Unicode code point to width and then go from the font's encoding\n  to unicode to the width. See misc/character-encoding/ (not on github)\n  and font metric information for the 14 standard fonts in my local pdf-spec directory.\n\n* Once we know about character widths, we can correctly support auto-sized variable text fields\n  (0 Tf). If this is fixed, search for \"auto-sized\" in cli.rst.\n\nFuzz Errors\n===========\n\n* https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=<N>\n\n* See also [discussion](https://github.com/qpdf/qpdf-dev/discussions/6).\n\nExternal Libraries\n==================\n\nCurrent state (10.0.2):\n\n* qpdf/external-libs repository builds external-libs on a schedule. It detects and downloads the\n  latest versions of zlib, jpeg, and openssl and creates source and binary distribution zip files in\n  an artifact called \"distribution\".\n\n* Releases in qpdf/external-libs are made manually. They contain qpdf-external-libs-{bin,src}.zip.\n\n* The qpdf build finds the latest non-prerelease release and downloads the qpdf-external-libs-*.zip\n  files from the releases in the setup stage.\n\n* To upgrade to a new version of external-libs, create a new release of qpdf/external-libs (see\n  README-maintainer in external-libs) from the distribution artifact of the most recent successful\n  build after ensuring that it works.\n\nDesired state:\n\n* The qpdf/external-libs repository should create release candidates. Ideally, every scheduled run\n  would make its zip files available. A personal access token with actions:read scope for the\n  qpdf/external-libs repository is required to download the artifact from an action run, and\n  qpdf/qpdf's secrets.GITHUB_TOKEN doesn't have this access. We could create a service account for\n  this purpose. As an alternative, we could have a draft release in qpdf/external-libs that the\n  qpdf/external-libs build could update with each candidate. It may also be possible to solve this\n  by developing a simple GitHub app.\n\n* Scheduled runs of the qpdf build in the qpdf/qpdf repository (not a fork or pull request) could\n  download external-libs from the release candidate area instead of the latest stable release.\n  Pushes to the build branch should still use the latest release so it always matches the main\n  branch.\n\n* Periodically, we would create a release of external-libs from the release candidate zip files.\n  This could be done safely because we know the latest qpdf works with it. This could be done at\n  least before every release of qpdf, but potentially it could be done at other times, such as when\n  a new dependency version is available or after some period of time.\n\nOther notes:\n\n* The external-libs branch in qpdf/qpdf was never documented. We might be able to get away with\n  deleting it.\n\n* See README-maintainer in qpdf/external-libs for information on creating a release. This could be\n  at least partially scripted in a way that works for the qpdf/qpdf repository as well since they\n  are very similar.\n\nABI Changes\n===========\n\nThis is a list of changes to make next time there is an ABI change. Comments appear in the code\nprefixed by \"ABI\".\n\nAlways:\n* Search for ABI in source and header files\n* Search for \"[[deprecated\" to find deprecated APIs that can be removed\n* Search for issues, pull requests, and discussions with the \"abi\" label\n* Check discussion \"qpdf X planning\" where X is the next major version. This should be tagged `abi`\n\nFor qpdf 12, see https://github.com/qpdf/qpdf/discussions/785\n\nC++ Version Changes\n===================\n\nUse\n```\n// C++NN: ...\n```\nto mark places in the code that should be updated when we require at least that version of C++.\n\nPage splitting/merging\n======================\n\n* Update page splitting and merging to handle document-level constructs with page impact such as\n  interactive forms and article threading. Check keys in the document catalog for others, such as\n  outlines, page labels, thumbnails, and zones. For threads, Subramanyam provided a test file; see\n  ../misc/article-threads.pdf. Email Q-Count: 431864 from 2009-11-03.\n\n* bookmarks (outlines) 12.3.3\n  * support bookmarks when merging\n  * prune bookmarks that don't point to a surviving page when merging or splitting\n  * make sure conflicting named destinations work possibly test by including the same file by two\n    paths in a merge\n  * see also comments in issue 343\n\n  Note: original implementation of bookmark preservation for split pages caused a very high\n  performance hit. The problem was introduced in 313ba081265f69ac9a0324f9fe87087c72918191 and\n  reverted in the commit that adds this paragraph. The revert includes marking a few tests cases as\n  $td->EXPECT_FAILURE. When properly coded, the test cases will need to be adjusted to only include\n  the parts of the outlines that are actually copied. The tests in question are\n  \"split page with outlines\". When implementing properly, ensure that the performance is not\n  adversely affected by timing split-pages on a large file with complex outlines such as the PDF\n  specification.\n\n  When pruning outlines, keep all outlines in the hierarchy that are above an outline for a page we\n  care about. If one of the ancestor outlines points to a non-existent page, clear its dest. If an\n  outline does not have any children that point to pages in the document, just omit it.\n\n  Possible strategy:\n  * resolve all named destinations to explicit destinations\n  * concatenate top-level outlines\n  * prune outlines whose dests don't point to a valid page\n  * recompute all /Count fields\n\n  Test files\n  * page-labels-and-outlines.pdf: old file with both page labels and outlines. All destinations are\n    explicit destinations. Each page has Potato and a number. All titles are feline names.\n  * outlines-with-actions.pdf: mixture of explicit destinations, named destinations, goto actions\n    with explicit destinations, and goto actions with named destinations; uses /Dests key in names\n    dictionary. Each page has Salad and a number. All titles are silly words. One destination is an\n    indirect object.\n  * outlines-with-old-root-dests.pdf: like outlines-with-actions except it uses the PDF-1.1 /Dests\n    dictionary for named destinations, and each page has Soup and a number. Also pages are numbered\n    with upper-case Roman numerals starting with 0. All titles are silly words preceded by a bullet.\n\n  If outline handling is significantly improved, see ../misc/bad-outlines/bad-outlines.pdf and\n  email:\n  https://mail.google.com/mail/u/0/#search/rfc822msgid%3A02aa01d3d013%249f766990%24de633cb0%24%40mono.hr)\n\n* Form fields: should be similar to outlines.\n\nAnalytics\n=========\n\nConsider features that make it easier to detect certain patterns in PDF files. The information below\ncould be computed using an external program that reads the existing json, but if it's useful enough,\nwe could add it directly to the json output.\n\n* Add to \"pages\" in the json:\n  * \"inheritsresources\": bool; whether there are any inherited attributes from ancestor page tree\n    nodes\n  * \"sharedresources\": a list of indirect objects that are\n    \"/Resources\" dictionaries or \"XObject\" resource dictionary subkeys of either the page itself or\n    of any form XObject referenced by the page.\n\n* Add to \"objectinfo\" in json: \"directpagerefcount\": the number of pages that directly reference\n  this object (i.e., you can find an indirect reference to the object in the page dictionary without\n  traversing over any indirect objects)\n\nGeneral\n=======\n\nNOTE: Some items in this list refer to files in my personal home directory or that are otherwise not\npublicly accessible. This includes things sent to me by email that are specifically not public. Even\nso, I find it useful to make reference to them in this list.\n\n* Provide support in QPDFWriter for writing incremental updates. Provide support in qpdf for\n  preserving incremental updates. The goal should be that QDF mode should be fully functional for\n  files with incremental updates including fix_qdf. This will work best if original object IDs are\n  preserved when a file is written. We will also have to preserve generations, which are, I believe,\n  completely ignored by QPDFWriter. If an update adds an object with a higher generation, any\n  reference to the object with a lower generation resolves to the null object. Increasing the\n  generation represents reusing an object number, while keeping the generation the same is updating\n  an object. I think qpdf must handle generations correctly, but make sure to test this carefully.\n\n  Note that there's nothing that says an indirect object in one update can't refer to an object that\n  doesn't appear until a later update. This means that qpdf has to hang onto indirect nulls,\n  including when they appear as dictionary values. In this case, QPDF_Dictionary::getKeys() ignores\n  all keys with null values, and hasKey() returns false for keys that have null values. QPDF_Dictionary\n  already handles the special case of keys that are indirect nulls, which is used to reserve foreign\n  objects, including foreign pages which may or may not be copied. We also have to make\n  sure that the testing for this handles non-trivial cases of the targets of indirect nulls being\n  replaced by real objects in an update. Such indirect nulls should appear in tests as dictionary\n  values and as array values. In the distant past, qpdf used to replace indirect nulls with direct\n  nulls, but I think there are no longer any remnants of that behavior.\n\n  I'm not sure how this plays with linearization, if at all. For cases where incremental updates are\n  not being preserved as incremental updates and where the data is being folded in (as is always the\n  case with qpdf now), none of this should make any difference in the actual semantics of the files.\n\n  One thought about how to implement this would be to have a QPDF object that is an incremental\n  update to an underlying QPDF object. Objects would be resolved from the underlying QPDF if not\n  found in the main one. When you write this type of QPDF, it can either flatten or it can write as\n  incremental updates. Perhaps, in incremental mode, QPDF reads each increment as a separate QPDF\n  with this kind of layering.\n\n* Consider enabling code scanning on GitHub.\n\n* Add an option --ignore-encryption to ignore encryption information and treat encrypted files as if\n  they weren't encrypted. This should make it possible to solve #598 (--show-encryption without a\n  password). We'll need to make sure we don't try to filter any streams in this mode. Ideally we\n  should be able to combine this with --json so we can look at the raw encrypted strings and streams\n  if we want to, though be sure to document that the resulting JSON won't be convertible back to a\n  valid PDF. Since providing the password may reveal additional details, --show-encryption could\n  potentially retry with this option if the first time doesn't work. Then, with the file open, we\n  can read the encryption dictionary normally. If this is done, search for \"raw, encrypted\" in\n  json.rst.\n\n* In libtests, separate executables that need the object library from those that strictly use public\n  API. Move as many of the test drivers from the qpdf directory into the latter category as long as\n  doing so isn't too troublesome from a coverage standpoint.\n\n* Refactor pages tree. See [discussion](https://github.com/qpdf/qpdf-dev/discussions/10).\n\n* Consider generating a non-flat pages tree before creating output to better handle files with lots\n  of pages. If there are more than 256 pages, add a second layer with the second layer nodes having\n  no more than 256 nodes and being as evenly sizes as possible. Don't worry about the case of more\n  than 65,536 pages. If the top node has more than 256 children, we'll live with it. This is only\n  safe if all intermediate page nodes have only /Kids, /Parent, /Type, and /Count.\n\n* Look at https://bestpractices.coreinfrastructure.org/en\n\n* Rework tests so that nothing is written into the source directory. Ideally then the entire build\n  could be done with a read-only source tree.\n\n* Large file tests fail with linux32 before and after cmake. This was first noticed after 10.6.3. I\n  don't think it's worth fixing.\n\n* Consider updating the fuzzer with code that exercises copyAnnotations, file attachments, and name\n  and number trees. Check fuzzer coverage.\n\n* Add code for creation of a file attachment annotation. It should also be possible to create a\n  widget annotation and a form field. Update the pdf-attach-file.cc example with new APIs when\n  ready.\n\n* Flattening of form XObjects seems like something that would be useful in the library. We are\n  seeing more cases of completely valid PDF files with form XObjects that cause problems in other\n  software. Flattening of form XObjects could be a useful way to work around those issues or to\n  prepare files for additional processing, making it possible for users of the qpdf library to not\n  be concerned about form XObjects. This could be done recursively; i.e., we could have a method to\n  embed a form XObject into whatever contains it, whether that is a form XObject or a page. This\n  would require more significant interpretation of the content stream. We would need a test file in\n  which the placement of the form XObject has to be in the right place, e.g., the form XObject\n  partially obscures earlier code and is partially obscured by later code. Keys in the resource\n  dictionary may need to be changed -- create test cases with lots of duplicated/overlapping keys.\n\n* Part of closed_file_input_source.cc is disabled on Windows because of odd failures. It might be\n  worth investigating so we can fully exercise this in the test suite. That said,\n  ClosedFileInputSource is exercised elsewhere in qpdf's test suite, so this is not that pressing.\n\n* If possible, consider adding CCITT3, CCITT4, or any other easy filters. For some reference code\n  that we probably can't use but may be handy anyway, see\n  http://partners.adobe.com/public/developer/ps/sdk/index_archive.html\n\n* If possible, support the following types of broken files:\n\n  - Files that have no whitespace token after \"endobj\" such that endobj collides with the start of\n    the next object\n\n  - See ../misc/broken-files\n\n  - See ../misc/bad-files-issue-476. This directory contains a snapshot of the google doc and linked\n    PDF files from issue #476. Please see the issue for details.\n\n* Additional form features\n  * set value from CLI? Specify title, and provide way to disambiguate, probably by giving objgen of\n    field\n\n* Pl_TIFFPredictor is pretty slow.\n\n* Support for handling file names with Unicode characters in Windows is incomplete. qpdf seems to\n  support them okay from a functionality standpoint, and the right thing happens if you pass in\n  UTF-8 encoded filenames to qpdf library routines in Windows (they are converted internally to\n  wchar_t*), but file names are encoded in UTF-8 on output, which doesn't produce nice error\n  messages or output on Windows in some cases.\n\n* If we ever wanted to do anything more with character encoding, see ../misc/character-encoding/,\n  which includes machine-readable dump of table D.2 in the ISO-32000 PDF spec. This shows the\n  mapping between Unicode, StandardEncoding, WinAnsiEncoding, MacRomanEncoding, and PDFDocEncoding.\n\n* Some test cases on bad files fail because qpdf is unable to find the root dictionary when it fails\n  to read the trailer. Recovery could find the root dictionary and even the info dictionary in other\n  ways. In particular, issue-202.pdf can be opened by evince, and there's no real reason that qpdf\n  couldn't be made to be able to recover that file as well.\n\n* Audit every place where qpdf allocates memory to see whether there are cases where malicious\n  inputs could cause qpdf to attempt to grab very large amounts of memory. Certainly there are cases\n  like this, such as if a very highly compressed, very large image stream is requested in a buffer.\n  Hopefully normal input to output filtering doesn't ever try to do this. QPDFWriter should be\n  checked carefully too. See also bugs/private/from-email-663916/\n\n* Interactive form modification:\n  https://github.com/qpdf/qpdf/issues/213 contains a good discussion of some ideas for adding\n  methods to modify annotations and form fields if we want to make it easier to support\n  modifications to interactive forms. Some of the ideas have been implemented, and some of the\n  probably never will be implemented, but it's worth a read if there is an intention to work on\n  this. In the issue, search for \"Regarding write functionality\", and read that comment and the\n  responses to it.\n\n* Look at ~/Q/pdf-collection/forms-from-appian/\n\n* When decrypting files with /R=6, hash_V5 is called more than once with the same inputs. Caching\n  the results or refactoring to reduce the number of identical calls could improve performance for\n  workloads that involve processing large numbers of small files.\n\n* Consider adding a method to balance the pages tree. It would call pushInheritedAttributesToPage,\n  construct a pages tree from scratch, and replace the /Pages key of the root dictionary with the\n  new tree.\n\n* Study what's required to support savable forms that can be saved by Adobe Reader. Does this\n  require actually signing the document with an Adobe private key? Search for \"Digital signatures\"\n  in the PDF spec, and look at ~/Q/pdf-collection/form-with-full-save.pdf, which came from Adobe's\n  example site. See also ../misc/digital-sign-from-trueroad/ and\n  ../misc/digital-signatures/digitally-signed-pdf-xfa.pdf. If digital signatures are implemented,\n  update the docs on crypto providers, which mention that this may happen in the future.\n\n* Qpdf does not honor /EFF when adding new file attachments. When it encrypts, it never generates\n  streams with explicit crypt filters. Prior to 10.2, there was an incorrect attempt to treat /EFF\n  as a default value for decrypting file attachment streams, but it is not supposed to mean that.\n  Instead, it is intended for conforming writers to obey this when adding new attachments. Qpdf is\n  not a conforming writer in that respect.\n\n* The whole xref handling code in the QPDF object allows the same object with more than one\n  generation to coexist, but a lot of logic assumes this isn't the case. Anything that creates\n  mappings only with the object number and not the generation is this way, including most of the\n  interaction between QPDFWriter and QPDF. If we wanted to allow the same object with more than one\n  generation to coexist, which I'm not sure is allowed, we could fix this by changing xref_table.\n  Alternatively, we could detect and disallow that case. In fact, it appears that Adobe reader and\n  other PDF viewing software silently ignores objects of this type, so this is probably not a big\n  deal.\n\n* From a suggestion in bug 3152169, consider having an option to re-encode inline images with an\n  ASCII encoding.\n\n* From github issue 2, provide more in-depth output for examining hint stream contents. Consider\n  adding on option to provide a human-readable dump of linearization hint tables. This should\n  include improving the 'overflow reading bit stream' message as reported in issue #2. There are\n  multiple calls to stopOnError in the linearization checking code. Ideally, these should not\n  terminate checking. It would require re-acquiring an understanding of all that code to make the\n  checks more robust. In particular, it's hard to look at the code and quickly determine what is a\n  true logic error and what could happen because of malformed user input. See also\n  ../misc/linearization-errors.\n\n* If I ever decide to make appearance stream-generation aware of fonts or font metrics, see email\n  from Tobias with Message-ID\n  <5C3C9C6C.8000102@thax.hardliners.org> dated 2019-01-14.\n\n* Look at places in the code where object traversal is being done and, where possible, try to avoid\n  it entirely or at least avoid ever traversing the same objects multiple times.\n\n----------------------------------------------------------------------\n\n### HISTORICAL NOTES\n\n* [Performance](#performance)\n* [QPDFPagesTree](#qpdfpagestree)\n* [Rejected Ideas](#rejected-ideas)\n\nPerformance\n===========\n\nAs described in https://github.com/qpdf/qpdf/issues/401, there was great performance degradation\nbetween qpdf 7.1.1 and 9.1.1. Doing a bisect between dac65a21fb4fa5f871e31c314280b75adde89a6c and\nrelease-qpdf-7.1.1, I found several commits that damaged performance. I fixed some of them to\nimprove performance by about 70% (as measured by saying that old times were 170% of new times). The\nremaining commits that broke performance either can't be correct because they would re-introduce an\nold bug or aren't worth correcting because of the high value they offer relative to a relatively low\npenalty. For historical reference, here are the commits. The numbers are the time in seconds on the\nmachine I happened to be using of splitting the first 100 pages of PDF32000_2008.pdf 20 times and\ntaking an average duration.\n\nCommits that broke performance:\n\n* d0e99f195a987c483bbb6c5449cf39bee34e08a1 -- object description and context: 0.39 -> 0.45\n* a01359189b32c60c2d55b039f7aefd6c3ce0ebde (minus 313ba08) -- fix dangling references: 0.55 -> 0.6\n* e5f504b6c5dc34337cc0b316b4a7b1fca7e614b1 -- sparse array: 0.6 -> 0.62\n\nOther intermediate steps that were previously fixed:\n\n* 313ba081265f69ac9a0324f9fe87087c72918191 -- copy outlines into split: 0.55 -> 4.0\n* a01359189b32c60c2d55b039f7aefd6c3ce0ebde -- fix dangling references:\n  4.0 -> 9.0\n\nThis commit fixed the awful problem introduced in 313ba081:\n\n* a5a016cdd26a8e5c99e5f019bc30d1bdf6c050a2 -- revert outline preservation: 9.0 -> 0.6\n\nNote that the fix dangling references commit had a much worse impact prior to removing the outline\npreservation, so I also measured its impact in isolation.\n\nA few important lessons (in README-maintainer)\n\n* Indirection through PointerHolder<Members> is expensive, and should not be used for things that\n  are created and destroyed frequently such as QPDFObjectHandle and QPDFObject.\n* Traversal of objects is expensive and should be avoided where possible.\n\nAlso, it turns out that PointerHolder is more performant than std::shared_ptr. (This was true at the\ntime but subsequent implementations of std::shared_ptr became much more efficient.)\n\nQPDFPagesTree\n=============\n\nSee also [discussion](https://github.com/qpdf/qpdf-dev/discussions/10).\n\nOn a few occasions, I have considered implementing a QPDFPagesTree object that would allow the\ndocument's original page tree structure to be preserved. See comments at the top QPDF_pages.cc for\nwhy this was abandoned.\n\nPartial work is in refs/attic/QPDFPagesTree. QPDFPageTree is mostly implemented and mostly tested.\nThere are not enough cases of different kinds of operations (pclm, linearize, json, etc.) with\nnon-flat pages trees. Insertion is not implemented. Insertion is potentially complex because of the\nissue of inherited objects. We will have to call pushInheritedAttributesToPage before adding any\npages to the pages tree. The test suite is failing on that branch.\n\nSome parts of page tree repair are silent (no warnings). All page tree repair should warn. The\nreason is that page tree repair will change object numbers, and knowing that is important when\nworking with JSON output.\n\nIf we were to do this, we would still need keep a pages cache for efficient insertion. There's no\nreason we can't keep a vector of page objects up to date and just do a traversal the first time we\ndo getAllPages just like we do now. The difference is that we would not flatten the pages tree. It\nwould be useful to go through QPDF_pages and reimplement everything without calling\nflattenPagesTree. Then we can remove flattenPagesTree, which is private. That said, with the\naddition of creating non-flat pages trees, there is really no reason not to flatten the pages tree\nfor internal use.\n\nIn its current state, QPDFPagesTree does not proactively fix /Type or correct page objects that are\nused multiple times. You have to traverse the pages tree to trigger this operation. It would be nice\nif we would do that somewhere but not do it more often than necessary so isPagesObject and\nisPageObject are reliable and can be made more reliable. Maybe add a validate or repair function? It\nshould also make sure /Count and /Parent are correct.\n\nRejected Ideas\n==============\n\n* Investigate whether there is a way to automate the memory checker tests for Windows.\n\n* The second xref stream for linearized files has to be padded only because we need file_size as\n  computed in pass 1 to be accurate. If we were not allowing writing to a pipe, we could seek back\n  to the beginning and fill in the value of /L in the linearization dictionary as an optimization to\n  alleviate the need for this padding. Doing so would require us to pad the /L value individually\n  and also to save the file descriptor and determine whether it's seekable. This is probably not\n  worth bothering with.\n\n* Based on an idea suggested by user \"Atom Smasher\", consider providing some mechanism to recover\n  earlier versions of a file embedded prior to appended sections.\n\n* Consider creating a sanitizer to make it easier for people to send broken files. Now that we have\n  json mode, this is probably no longer worth doing. Here is the previous idea, possibly implemented\n  by making it possible to run the lexer (tokenizer) over a whole file. Make it possible to replace\n  all strings in a file lexically even on badly broken files. Ideally this should work files that\n  are lacking xref, have broken links, duplicated dictionary keys, syntax errors, etc., and ideally\n  it should work with encrypted files if possible. This should go through the streams and strings\n  and replace them with fixed or random characters, preferably, but not necessarily, in a manner\n  that works with fonts. One possibility would be to detect whether a string contains characters\n  with normal encoding, and if so, use 0x41. If the string uses character maps, use 0x01. The output\n  should otherwise be unrelated to the input. This could be built after the filtering and tokenizer\n  rewrite and should be done in a manner that takes advantage of the other lexical features. This\n  sanitizer should also clear metadata and replace images. If I ever do this, the file from issue\n  #494 would be a great one to look at.\n\n* Here are some notes about having stream data providers modify stream dictionaries. I had wanted to\n  add this functionality to make it more efficient to create stream data providers that may\n  dynamically decide what kind of filters to use and that may end up modifying the dictionary\n  conditionally depending on the original stream data. Ultimately I decided not to implement this\n  feature. This paragraph describes why.\n\n  * When writing, the way objects are placed into the queue for writing strongly precludes creation\n    of any new indirect objects, or even changing which indirect objects are referenced from which\n    other objects, because we sometimes write as we are traversing and enqueuing objects. For\n    non-linearized files, there is a risk that an indirect object that used to be referenced would\n    no longer be referenced, and whether it was already written to the output file would be based on\n    an accident of where it was encountered when traversing the object structure. For linearized\n    files, the situation is considerably worse. We decide which section of the file to write an\n    object to based on a mapping of which objects are used by which other objects. Changing this\n    mapping could cause an object to appear in the wrong section, to be written even though it is\n    unreferenced, or to be entirely omitted since, during linearization, we don't enqueue new\n    objects as we traverse for writing.\n\n  * There are several places in QPDFWriter that query a stream's dictionary in order to prepare for\n    writing or to make decisions about certain aspects of the writing process. If the stream data\n    provider has the chance to modify the dictionary, every piece of code that gets stream data\n    would have to be aware of this. This would potentially include end user code. For example, any\n    code that called getDict() on a stream before installing a stream data provider and expected\n    that dictionary to be valid would potentially be broken. As implemented right now, you must\n    perform any modifications on the dictionary in advance and provided /Filter and /DecodeParms at\n    the time you installed the stream data provider. This means that some computations would have to\n    be done more than once, but for linearized files, stream data providers are already called more\n    than once. If the work done by a stream data provider is especially expensive, it can implement\n    its own cache.\n\n  The example examples/pdf-custom-filter.cc demonstrates the use of custom stream filters. This\n  includes a custom pipeline, a custom stream filter, as well as modification of a stream's\n  dictionary to include creation of a new stream that is referenced from /DecodeParms.\n\n* Removal of raw QPDF* from the API. Discussions in #747 and #754. This is a summary of the\n  arguments I put forth in #754. The idea was to make QPDF::QPDF() private and require all QPDF\n  objects to be shared pointers created with QPDF::create(). This would enable us to have\n  QPDFObjectHandle::getOwningQPDF() return a std::weak_ptr<QPDF>. Prior to #726 (\n  QPDFObject/QPDFValue split, released in qpdf 11.0.0), getOwningQPDF() could return an invalid\n  pointer if the owning QPDF disappeared, but this is no longer the case, which removes the main\n  motivation. qpdf 11 added QPDF::create() anyway though.\n\n  Removing raw QPDF* would look something like this. Note that you can't use std::make_shared<T>\n  unless T has a public constructor.\n\n  QPDF_POINTER_TRANSITION = 0 -- no warnings around calling the QPDF constructor\n  QPDF_POINTER_TRANSITION = 1 -- calls to QPDF() are deprecated, but QPDF is still available so code\n                                 can be backward compatible and use std::make_shared<QPDF>\n  QPDF_POINTER_TRANSITION = 2 -- the QPDF constructor is private; all calls to\n                                 std::make_shared<QPDF> have to be replaced with QPDF::create\n\n  If we were to do this, we'd have to look at each use of QPDF* in the interface and decide whether\n  to use a std::shared_ptr or a std::weak_ptr. The answer would almost always be to use a std::\n  weak_ptr, which means we'd have to take the extra step of calling lock(), and it means there would\n  be lots of code changes cause people would have to pass weak pointers instead of raw pointers\n  around, and those have to be constructed and locked. Passing std::shared_ptr around leaves the\n  possibility of creating circular references. It seems to be too much trouble in the library and\n  too much toil for library users to be worth the small benefit of not having to call resetObjGen in\n  QPDF's destructor.\n\n* Fix Multiple Direct Object Parent Issue\n\n  This idea was rejected because it would be complicated to implement and would likely have a high\n  performance cost to fix what is not really that big of a problem in practice.\n\n  It is possible for a QPDFObjectHandle for a direct object to be contained inside of multiple\n  QPDFObjectHandle objects or even replicated across multiple QPDF objects. This creates a\n  potentially confusing and unintentional aliasing of direct objects. There are known cases in the\n  qpdf library where this happens including page splitting and merging (particularly with page\n  labels, and possibly with other cases), and also with unsafeShallowCopy. Disallowing this would\n  incur a significant performance penalty and is probably not worth doing. If we were to do it, here\n  are some ideas.\n\n  * Add std::weak_ptr<QPDFObject> parent to QPDFObject. When adding a direct object to an array or\n    dictionary, set its parent. When removing it, clear the parent pointer. The parent pointer would\n    always be null for indirect objects, so the parent pointer, which would reside in QPDFObject,\n    would have to be managed by QPDFObjectHandle. This is because QPDFObject can't tell the\n    difference between a resolved indirect object and a direct object.\n\n  * Phase 1: When a direct object that already has a parent is added to a dictionary or array, issue\n    a warning. There would need to be unsafe add methods used by unsafeShallowCopy. These would add\n    but not modify the parent pointer.\n\n  * Phase 2: In the next major release, make the multiple parent case an error. Require people to\n    create a copy. The unsafe operations would still have to be permitted.\n\n  This approach would allow an object to be moved from one object to another by removing it, which\n  returns the now orphaned object, and then inserting it somewhere else. It also doesn't break the\n  pattern of adding a direct object to something and subsequently mutating it. It just prevents the\n  same object from being added to more than one thing.\n"
        },
        {
          "name": "abi-perf-test",
          "type": "blob",
          "size": 3.1044921875,
          "content": "#!/usr/bin/env bash\nset -eo pipefail\ncd $(dirname $0)\nwhoami=$(basename $0)\n\nif [[ $(git status -s | grep -E -v abi-perf-test | wc -l) != 0 ]]; then\n    echo 1>&2 \"${whoami}: git is not clean. (abi-perf-test changes ignored)\"\n    git status -s\n    exit 2\nfi\n\nold_rev=${1-bad}\nnew_rev=${2-bad}\n\nif [ \"$new_rev\" = \"bad\" ]; then\n    echo 1>&2 \"Usage: $whoami old-rev new-rev\"\n    exit 2\nfi\n\nold_rev_hash=$(git rev-parse $old_rev)\nnew_rev_hash=$(git rev-parse $new_rev)\n\ncat <<EOF\n\nChecking ABI:\n* old revision: $old_rev = $old_rev_hash\n* new revision: $new_rev = $new_rev_hash\n\nEOF\n\nwork=/tmp/check-abi\nif [ -d $work ]; then\n   if [ ! -f $work/.abi ]; then\n       echo 1>&2 \"$work exists and is not ours\"\n       exit 2\n   else\n       rm -rf $work\n   fi\nfi\nmkdir -p $work/{old,new}\ntouch $work/.abi\n\nsource=$PWD\nrepo=file://$source/.git\ncd $work\ngit clone $repo qpdf\ncd qpdf\n\ngit tag abi-old $old_rev_hash\ngit tag abi-new $new_rev_hash\n\necho \"** building old version **\"\n\ngit checkout abi-old\ncmake -S . -B build \\\n  -DMAINTAINER_MODE=1 -DBUILD_STATIC_LIBS=0 -DBUILD_DOC=0 \\\n  -DCMAKE_BUILD_TYPE=RelWithDebInfo\ncmake --build build -j$(nproc)\n\necho \"** saving old library and size information **\"\n\n./build/qpdf/sizes >| $work/old/sizes\ncp build/libqpdf/libqpdf.so.*.* $work/old\n\nif [ \"$SKIP_PERF\" != \"1\" ]; then\n    echo \"** writing performance details for old revision to $work/perf **\"\n    $source/performance_check --dir $source/../performance-test-files | \\\n        tee -a $work/perf\nfi\n\necho \"** building new version's library and sizes **\"\n\ngit checkout abi-new\ncmake -S . -B build \\\n  -DMAINTAINER_MODE=1 -DBUILD_STATIC_LIBS=0 -DBUILD_DOC=0 \\\n  -DCMAKE_BUILD_TYPE=RelWithDebInfo\ncmake --build build -j$(nproc) --target sizes\n\necho \"** saving new library and size information **\"\n\n$source/check_abi check-sizes --lib build/libqpdf/libqpdf.so\n./build/qpdf/sizes >| $work/new/sizes\ncp build/libqpdf/libqpdf.so.*.* $work/new\n\necho \"** running ABI comparison **\"\n\n$source/check_abi compare --old-lib $work/old/libqpdf.so.*.* \\\n  --new-lib build/libqpdf/libqpdf.so \\\n  --old-sizes $work/old/sizes --new-sizes $work/new/sizes\n\ntest_warn=0\nif [ \"$SKIP_TESTS\" != \"1\" ]; then\n    # Switch back to the previous release and run tests. There may be\n    # some failures based on functionality change. We are looking for\n    # ABI breakage.\n    git checkout abi-old\n    set +e\n    (cd build; ctest --verbose)\n    if [ $? != 0 ]; then\n        test_warn=1\n    fi\n    set -e\nfi\n\ngit checkout abi-new\n\nif [ \"$SKIP_PERF\" != \"1\" ]; then\n    echo \"** writing performance details for new revision to $work/perf **\"\n\n    cmake -S . -B build \\\n      -DMAINTAINER_MODE=1 -DBUILD_STATIC_LIBS=0 -DBUILD_DOC=0 \\\n      -DCMAKE_BUILD_TYPE=RelWithDebInfo\n    cmake --build build -j$(nproc)\n    $source/performance_check --dir $source/../performance-test-files | \\\n        tee -a $work/perf\nfi\n\nif [ $test_warn = 1 ]; then\n    cat <<EOF\n\n**********************************************************************\nThere were some test failures; inspect to determine whether they are\nABI-related.\n\nCheck test results in $work/qpdf/build\n**********************************************************************\n\nEOF\nfi\n"
        },
        {
          "name": "appimage",
          "type": "tree",
          "content": null
        },
        {
          "name": "build-scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "cSpell.json",
          "type": "blob",
          "size": 11.8037109375,
          "content": "{\n  \"version\": \"0.1\",\n  \"words\": [\n    \"abcdefghijklmnopqrstuvwxy\",\n    \"abuild\",\n    \"aclocal\",\n    \"acro\",\n    \"acroform\",\n    \"acroread\",\n    \"admon\",\n    \"advapi\",\n    \"aesv\",\n    \"afdh\",\n    \"afdhph\",\n    \"ageneration\",\n    \"aitems\",\n    \"alternativename\",\n    \"annotationflags\",\n    \"annots\",\n    \"aobjid\",\n    \"apcm\",\n    \"apdict\",\n    \"appdir\",\n    \"appearancestate\",\n    \"appendable\",\n    \"appian\",\n    \"appimage\",\n    \"appspot\",\n    \"arandom\",\n    \"argfile\",\n    \"arora\",\n    \"artbox\",\n    \"asciihexdecode\",\n    \"asciihexdecoder\",\n    \"asdf\",\n    \"atoi\",\n    \"autobuilder\",\n    \"autobuilders\",\n    \"autofiles\",\n    \"autogen\",\n    \"autolabel\",\n    \"autopkgtest\",\n    \"baaa\",\n    \"backports\",\n    \"bashcompinit\",\n    \"bashdefault\",\n    \"berkenbilt\",\n    \"binmode\",\n    \"bitspercomponent\",\n    \"bitstream\",\n    \"bitwriter\",\n    \"blinearize\",\n    \"boldseq\",\n    \"bookinfo\",\n    \"boxkey\",\n    \"bpreserve\",\n    \"bqpdf\",\n    \"brdp\",\n    \"bufferinputsource\",\n    \"bufpl\",\n    \"bufsize\",\n    \"buildrules\",\n    \"calledgetallpages\",\n    \"ccase\",\n    \"ccitt\",\n    \"cdef\",\n    \"cdict\",\n    \"cdosborn\",\n    \"cerr\",\n    \"cfis\",\n    \"cflags\",\n    \"ciphertext\",\n    \"classname\",\n    \"cleanpatch\",\n    \"clearsign\",\n    \"cleartext\",\n    \"closedfileinputsource\",\n    \"cloudmersive\",\n    \"clusterfuzz\",\n    \"cmake\",\n    \"cmatch\",\n    \"codepoint\",\n    \"coldwind\",\n    \"colorspace\",\n    \"conftest\",\n    \"connor\",\n    \"contentnormalizer\",\n    \"copiable\",\n    \"cout\",\n    \"cpack\",\n    \"cphe\",\n    \"cppflags\",\n    \"crbegin\",\n    \"creationdate\",\n    \"cregex\",\n    \"crend\",\n    \"crnl\",\n    \"cropbox\",\n    \"cryptorandomdataprovider\",\n    \"csoe\",\n    \"cstr\",\n    \"ctest\",\n    \"cwmain\",\n    \"cxxflags\",\n    \"cygwin\",\n    \"datafile\",\n    \"dbuild\",\n    \"dcmake\",\n    \"dctdecode\",\n    \"decltype\",\n    \"decodelevel\",\n    \"decodeparms\",\n    \"decrypter\",\n    \"deduplicating\",\n    \"defaultvalue\",\n    \"denable\",\n    \"deps\",\n    \"deserialization\",\n    \"destdir\",\n    \"destpage\",\n    \"destpageposfrom\",\n    \"dests\",\n    \"devel\",\n    \"didier\",\n    \"diffutils\",\n    \"dinstall\",\n    \"directpagerefcount\",\n    \"distclean\",\n    \"ditems\",\n    \"dmaintainer\",\n    \"docbook\",\n    \"docdir\",\n    \"dohnal\",\n    \"dontalign\",\n    \"dontpanic\",\n    \"downsampled\",\n    \"downsampler\",\n    \"dqpdf\",\n    \"dqtest\",\n    \"dquote\",\n    \"drequire\",\n    \"dshow\",\n    \"dtdvalid\",\n    \"dwindows\",\n    \"earlychange\",\n    \"ebra\",\n    \"ecks\",\n    \"efdh\",\n    \"efoh\",\n    \"efsoh\",\n    \"encodable\",\n    \"encp\",\n    \"endforeach\",\n    \"endfunction\",\n    \"endianness\",\n    \"endl\",\n    \"endobj\",\n    \"endstream\",\n    \"enspliel\",\n    \"envar\",\n    \"erasdf\",\n    \"errno\",\n    \"esize\",\n    \"eval\",\n    \"extlibdir\",\n    \"fclose\",\n    \"fdict\",\n    \"ffield\",\n    \"fghij\",\n    \"fieldflags\",\n    \"fileinputsource\",\n    \"filenow\",\n    \"filep\",\n    \"filetrailer\",\n    \"firstname\",\n    \"firstterm\",\n    \"flarp\",\n    \"flate\",\n    \"flatelzwdecode\",\n    \"flate's\",\n    \"florian\",\n    \"fmatrix\",\n    \"fopen\",\n    \"forcenone\",\n    \"fplain\",\n    \"fsanitize\",\n    \"fseeki\",\n    \"fseeko\",\n    \"fsoh\",\n    \"ftelli\",\n    \"fuzzer\",\n    \"fuzzers\",\n    \"fvisibility\",\n    \"gajic\",\n    \"gajić\",\n    \"gcovr\",\n    \"gcurl\",\n    \"genname\",\n    \"genok\",\n    \"getu\",\n    \"ghostscript\",\n    \"glarp\",\n    \"glerbl\",\n    \"gmon\",\n    \"gmtoff\",\n    \"gnuc\",\n    \"gnutls\",\n    \"gprof\",\n    \"grandkid\",\n    \"grandkids\",\n    \"gswin\",\n    \"gynvael\",\n    \"hagoogamagoogle\",\n    \"hasacroform\",\n    \"hcryptprov\",\n    \"hdict\",\n    \"hexchars\",\n    \"hexkey\",\n    \"hexkeylen\",\n    \"hexstrings\",\n    \"hoffmann\",\n    \"holger\",\n    \"hosoda\",\n    \"htcondor\",\n    \"htdocs\",\n    \"idempotency\",\n    \"ifdef\",\n    \"ifdefs\",\n    \"ifeq\",\n    \"ifstream\",\n    \"iinfilename\",\n    \"imagemask\",\n    \"impls\",\n    \"includedir\",\n    \"indoc\",\n    \"infile\",\n    \"infilename\",\n    \"inheritsresources\",\n    \"initially\",\n    \"inlineimage\",\n    \"inpdf\",\n    \"inputsource\",\n    \"insecurerandomdataprovider\",\n    \"inttypes\",\n    \"iostream\",\n    \"ioutfilename\",\n    \"irdp\",\n    \"ischeckbox\",\n    \"ischoice\",\n    \"isradiobutton\",\n    \"istext\",\n    \"istr\",\n    \"italicseq\",\n    \"itemizedlist\",\n    \"jarr\",\n    \"jbarlow\",\n    \"jbig\",\n    \"jblob\",\n    \"jdimension\",\n    \"jdouble\",\n    \"jerr\",\n    \"jexp\",\n    \"jian\",\n    \"jint\",\n    \"jklmnopqrstuvwxyz\",\n    \"jmap\",\n    \"jmpbuf\",\n    \"jmsg\",\n    \"jnull\",\n    \"jpeglib\",\n    \"jpool\",\n    \"jsamparray\",\n    \"jsample\",\n    \"jsamprow\",\n    \"jsimd\",\n    \"jsonhandler\",\n    \"jsonversion\",\n    \"jstr\",\n    \"jurczyk\",\n    \"keybits\",\n    \"kgdl\",\n    \"lastnum\",\n    \"lastreleased\",\n    \"latexmk\",\n    \"latexpdf\",\n    \"lbuf\",\n    \"lcrypto\",\n    \"ldflags\",\n    \"ldquo\",\n    \"libclang\",\n    \"libcmt\",\n    \"libcmtd\",\n    \"libctx\",\n    \"libdir\",\n    \"libgcc\",\n    \"libjpeg\",\n    \"libpcre\",\n    \"libqpdf\",\n    \"libstdc\",\n    \"libtests\",\n    \"libversion\",\n    \"libz\",\n    \"lindict\",\n    \"linearization\",\n    \"linearize\",\n    \"linearizes\",\n    \"linearizing\",\n    \"linebuf\",\n    \"linefeeds\",\n    \"linkend\",\n    \"linkey\",\n    \"linp\",\n    \"listitem\",\n    \"ljpeg\",\n    \"localtime\",\n    \"longjmp\",\n    \"losslessly\",\n    \"lpstr\",\n    \"lqpdf\",\n    \"lssl\",\n    \"ltime\",\n    \"lzwdecoder\",\n    \"macports\",\n    \"maint\",\n    \"makefiles\",\n    \"makelangid\",\n    \"malloc\",\n    \"mandir\",\n    \"mappingname\",\n    \"masamichi\",\n    \"mateusz\",\n    \"maxdepth\",\n    \"maxobjectid\",\n    \"maxplus\",\n    \"maxval\",\n    \"mdash\",\n    \"mediabox\",\n    \"memstream\",\n    \"mindepth\",\n    \"minminus\",\n    \"mkdir\",\n    \"mkinstalldirs\",\n    \"mklink\",\n    \"moddate\",\n    \"modificationdate\",\n    \"modifyannotations\",\n    \"modifyassembly\",\n    \"modifyforms\",\n    \"modifyother\",\n    \"monoseq\",\n    \"msvc\",\n    \"msvcrt\",\n    \"msvc's\",\n    \"msys\",\n    \"multithreaded\",\n    \"municode\",\n    \"mutators\",\n    \"namelink\",\n    \"namesp\",\n    \"nannots\",\n    \"nbsp\",\n    \"ndash\",\n    \"ndebug\",\n    \"needappearances\",\n    \"nendstream\",\n    \"newdict\",\n    \"newpage\",\n    \"nfields\",\n    \"nfirst\",\n    \"ngrandkids\",\n    \"nkids\",\n    \"nlines\",\n    \"nntree\",\n    \"nobjects\",\n    \"nocase\",\n    \"nodash\",\n    \"nodefaultlib\",\n    \"nolint\",\n    \"noout\",\n    \"notfound\",\n    \"nowarn\",\n    \"npages\",\n    \"nproc\",\n    \"nrounds\",\n    \"nshared\",\n    \"nsis\",\n    \"nspaces\",\n    \"nspecs\",\n    \"nstripes\",\n    \"nullptr\",\n    \"numrange\",\n    \"numtree\",\n    \"nval\",\n    \"nwarnings\",\n    \"objdesc\",\n    \"objdump\",\n    \"objectinfo\",\n    \"objgen\",\n    \"objidok\",\n    \"objok\",\n    \"objspec\",\n    \"objstm\",\n    \"odict\",\n    \"offsetinputsource\",\n    \"ofirst\",\n    \"oiter\",\n    \"olast\",\n    \"oldpdf\",\n    \"olimits\",\n    \"olist\",\n    \"omap\",\n    \"omatrix\",\n    \"onum\",\n    \"opages\",\n    \"opath\",\n    \"orred\",\n    \"ossl\",\n    \"ostream\",\n    \"ostringstream\",\n    \"ostringstreams\",\n    \"outbuffer\",\n    \"outdoc\",\n    \"outfile\",\n    \"outfilename\",\n    \"outname\",\n    \"outpdf\",\n    \"outpdfw\",\n    \"outprefix\",\n    \"outval\",\n    \"ownerpasswordmatched\",\n    \"pacman\",\n    \"paeth\",\n    \"pagelabel\",\n    \"pagelabels\",\n    \"pagemode\",\n    \"pageno\",\n    \"pagenos\",\n    \"pageobj\",\n    \"pagepos\",\n    \"pageposfrom\",\n    \"pagespec\",\n    \"parms\",\n    \"parseable\",\n    \"parsecontent\",\n    \"parsedoffset\",\n    \"partialname\",\n    \"pathsep\",\n    \"patmv\",\n    \"patrepl\",\n    \"pavlyuk\",\n    \"pbytes\",\n    \"pclm\",\n    \"pcre\",\n    \"pdfdoc\",\n    \"pdflatex\",\n    \"pdfs\",\n    \"pdfversion\",\n    \"pdlin\",\n    \"pfeifle\",\n    \"pikepdf\",\n    \"pikepdf's\",\n    \"pkgconfig\",\n    \"pldh\",\n    \"pluggable\",\n    \"pngfilter\",\n    \"pngify\",\n    \"pngpredictor\",\n    \"pointerholder\",\n    \"poppler\",\n    \"prebuild\",\n    \"precheck\",\n    \"preferredcontents\",\n    \"preferredname\",\n    \"prefiltering\",\n    \"prepended\",\n    \"prepending\",\n    \"printf\",\n    \"printhigh\",\n    \"printlow\",\n    \"procset\",\n    \"procsets\",\n    \"programfiles\",\n    \"programlisting\",\n    \"proxied\",\n    \"psbook\",\n    \"pstops\",\n    \"pushbuttons\",\n    \"pushedinheritedpageresources\",\n    \"putu\",\n    \"pval\",\n    \"pybind\",\n    \"pytest\",\n    \"qarray\",\n    \"qdata\",\n    \"qdict\",\n    \"qexc\",\n    \"qintc\",\n    \"qnumbers\",\n    \"qpdf\",\n    \"qpdfacroformdocumenthelper\",\n    \"qpdfannotationobjecthelper\",\n    \"qpdfargparser\",\n    \"qpdfbuild\",\n    \"qpdfconstants\",\n    \"qpdfcrypto\",\n    \"qpdfcryptoimpl\",\n    \"qpdfcryptoprovider\",\n    \"qpdfdocumenthelper\",\n    \"qpdfef\",\n    \"qpdfefstreamobjecthelper\",\n    \"qpdfembeddedfiledocumenthelper\",\n    \"qpdfexc\",\n    \"qpdffake\",\n    \"qpdffilespecobjecthelper\",\n    \"qpdfformfieldobjecthelper\",\n    \"qpdfjob\",\n    \"qpdflogger\",\n    \"qpdfmatrix\",\n    \"qpdfnametreeobjecthelper\",\n    \"qpdfnumbertreeobjecthelper\",\n    \"qpdfobject\",\n    \"qpdfobjecthandle\",\n    \"qpdfobjecthelper\",\n    \"qpdfobjgen\",\n    \"qpdfoutlinedocumenthelper\",\n    \"qpdfoutlineobjecthelper\",\n    \"qpdfpagedocumenthelper\",\n    \"qpdfpagelabeldocumenthelper\",\n    \"qpdfpageobjecthelper\",\n    \"qpdfpagestree\",\n    \"qpdfparser\",\n    \"qpdf's\",\n    \"qpdfs\",\n    \"qpdfstreamfilter\",\n    \"qpdfsystemerror\",\n    \"qpdftokenizer\",\n    \"qpdftypes\",\n    \"qpdfusage\",\n    \"qpdfvalue\",\n    \"qpdfwriter\",\n    \"qpdfx\",\n    \"qpdfxrefentry\",\n    \"qstream\",\n    \"qstrings\",\n    \"qtest\",\n    \"quadding\",\n    \"quotedblbase\",\n    \"quotedblright\",\n    \"quoteleft\",\n    \"quoteright\",\n    \"quotesinglbase\",\n    \"qutil\",\n    \"qwer\",\n    \"qwert\",\n    \"qwww\",\n    \"randomdataprovider\",\n    \"rcon\",\n    \"rdicts\",\n    \"rdpp\",\n    \"rdquo\",\n    \"recovereduserpassword\",\n    \"refcount\",\n    \"referring\",\n    \"refpage\",\n    \"refpos\",\n    \"reimplement\",\n    \"resampler\",\n    \"resave\",\n    \"resourcefinder\",\n    \"retargeted\",\n    \"rfont\",\n    \"rijndael\",\n    \"rkey\",\n    \"rklength\",\n    \"rnames\",\n    \"rotatex\",\n    \"roundoff\",\n    \"rpath\",\n    \"rstream\",\n    \"runlength\",\n    \"runlengthdecode\",\n    \"runpath\",\n    \"runtest\",\n    \"sahil\",\n    \"samp\",\n    \"sarray\",\n    \"scanline\",\n    \"scanlines\",\n    \"scarff\",\n    \"securerandomdataprovider\",\n    \"seekable\",\n    \"segfaulting\",\n    \"setargv\",\n    \"setjmp\",\n    \"sharedresources\",\n    \"singlehtml\",\n    \"smatch\",\n    \"softlink\",\n    \"soname\",\n    \"soversion\",\n    \"sparseoharray\",\n    \"sphlib\",\n    \"splittingmerging\",\n    \"sprintf\",\n    \"squote\",\n    \"srandom\",\n    \"srdp\",\n    \"sregex\",\n    \"stampfile\",\n    \"stamppdf\",\n    \"startxref\",\n    \"stdexcept\",\n    \"stdint\",\n    \"stdiofile\",\n    \"stdlib\",\n    \"stdlib's\",\n    \"stgz\",\n    \"stod\",\n    \"stoi\",\n    \"strcasecmp\",\n    \"strcmp\",\n    \"streammethod\",\n    \"strequal\",\n    \"strerror\",\n    \"stringmethod\",\n    \"stringprep\",\n    \"stripesize\",\n    \"strtoui\",\n    \"struct\",\n    \"stylesheet\",\n    \"subclassing\",\n    \"subdict\",\n    \"subdictionaries\",\n    \"subdictionary\",\n    \"subdirs\",\n    \"subkey\",\n    \"subkeys\",\n    \"sublang\",\n    \"submatches\",\n    \"subparsers\",\n    \"subramanyam\",\n    \"substract\",\n    \"swversion\",\n    \"sysnow\",\n    \"sysroot\",\n    \"syuu\",\n    \"tbuf\",\n    \"testcase\",\n    \"testcov\",\n    \"testfile\",\n    \"texlive\",\n    \"tgen\",\n    \"tiffcmp\",\n    \"tiffpredictor\",\n    \"tmatrix\",\n    \"tnum\",\n    \"tobj\",\n    \"tobjid\",\n    \"toctree\",\n    \"toolchains\",\n    \"toplevel\",\n    \"transcoders\",\n    \"trueroad\",\n    \"tval\",\n    \"typeinfo\",\n    \"tzoff\",\n    \"tzset\",\n    \"uinow\",\n    \"uiter\",\n    \"ularge\",\n    \"ulink\",\n    \"umaxplus\",\n    \"uncategorized\",\n    \"uncompresesd\",\n    \"uncompress\",\n    \"uncompressing\",\n    \"unconflicting\",\n    \"underlaying\",\n    \"unencrypted\",\n    \"unexport\",\n    \"unfilterable\",\n    \"unparse\",\n    \"unparsing\",\n    \"unpickling\",\n    \"unrepaired\",\n    \"unretrieved\",\n    \"unversioned\",\n    \"upages\",\n    \"upass\",\n    \"urandom\",\n    \"userpasswordmatched\",\n    \"uval\",\n    \"variablelist\",\n    \"varlistentry\",\n    \"varname\",\n    \"vecs\",\n    \"venv\",\n    \"verifycontext\",\n    \"versionless\",\n    \"virtualenv\",\n    \"vitaliy\",\n    \"vkey\",\n    \"vrlc\",\n    \"vtable\",\n    \"wchar\",\n    \"wconversion\",\n    \"wcslen\",\n    \"wdeprecated\",\n    \"weimer\",\n    \"werror\",\n    \"wfilename\",\n    \"wfilenamep\",\n    \"wflags\",\n    \"wfopen\",\n    \"winansi\",\n    \"wincrypt\",\n    \"wmain\",\n    \"wmatrix\",\n    \"wmode\",\n    \"wmodep\",\n    \"wnew\",\n    \"wordsize\",\n    \"wpath\",\n    \"wrename\",\n    \"wsetargv\",\n    \"wshadow\",\n    \"wsign\",\n    \"wunlink\",\n    \"xgen\",\n    \"xobject\",\n    \"xpacket\",\n    \"xpdf\",\n    \"xpost\",\n    \"xsltproc\",\n    \"yabcy\",\n    \"yscale\",\n    \"yuiop\",\n    \"zabcdefghi\",\n    \"žarko\",\n    \"žarko's\",\n    \"zdata\",\n    \"zdenek\",\n    \"zdenop\",\n    \"zeroize\",\n    \"zeroizing\"\n  ]\n}\n"
        },
        {
          "name": "check_abi",
          "type": "blob",
          "size": 8.318359375,
          "content": "#!/usr/bin/env python3\nimport os\nimport sys\nimport argparse\nimport subprocess\nimport re\n\nwhoami = os.path.basename(sys.argv[0])\nwhereami = os.path.dirname(os.path.realpath(__file__))\n\n\ndef warn(*args, **kwargs):\n    print(*args, file=sys.stderr, **kwargs)\n\n\nclass Main:\n    def main(self, args=sys.argv[1:], prog=whoami):\n        options = self.parse_args(args, prog)\n        if options.action == 'dump':\n            self.dump(options)\n        elif options.action == 'check-sizes':\n            self.check_sizes(options)\n        elif options.action == 'compare':\n            self.compare(options)\n        else:\n            exit(f'{whoami}: unknown action')\n\n    def parse_args(self, args, prog):\n        parser = argparse.ArgumentParser(\n            prog=prog,\n            # formatter_class=argparse.RawDescriptionHelpFormatter,\n            description='Check ABI for changes',\n        )\n\n        subparsers = parser.add_subparsers(\n            dest='action',\n            help='specify subcommand; run action with --help for details',\n            required=True)\n        lib_arg = ('--lib', {'help': 'library file', 'required': True})\n\n        p_dump = subparsers.add_parser(\n            'dump',\n            help='dump qpdf symbols in a library')\n        p_dump.add_argument(lib_arg[0], **lib_arg[1])\n\n        p_check_sizes = subparsers.add_parser(\n            'check-sizes',\n            help='check consistency between library and sizes.cc')\n        p_check_sizes.add_argument(lib_arg[0], **lib_arg[1])\n\n        p_compare = subparsers.add_parser(\n            'compare',\n            help='compare libraries and sizes')\n        p_compare.add_argument('--new-lib',\n                               help='new library file',\n                               required=True)\n        p_compare.add_argument('--old-lib',\n                               help='old library file',\n                               required=True)\n        p_compare.add_argument('--old-sizes',\n                               help='output of old sizes',\n                               required=True)\n        p_compare.add_argument('--new-sizes',\n                               help='output of new sizes',\n                               required=True)\n        return parser.parse_args(args)\n\n    def get_versions(self, path):\n        p = os.path.basename(os.path.realpath(path))\n        m = re.match(r'^libqpdf.so.(\\d+).(\\d+).(\\d+)$', p)\n        if not m:\n            exit(f'{whoami}: {path} does end with libqpdf.so.x.y.z')\n        major = int(m.group(1))\n        minor = int(m.group(2))\n        patch = int(m.group(3))\n        return (major, minor, patch)\n\n    def get_symbols(self, path):\n        symbols = set()\n        p = subprocess.run(\n            ['nm', '-D', '--demangle', '--with-symbol-versions', path],\n            stdout=subprocess.PIPE)\n        if p.returncode:\n            exit(f'{whoami}: failed to get symbols from {path}')\n        for line in p.stdout.decode().split('\\n'):\n            # The LIBQPDF_\\d+ comes from the version tag in\n            # libqpdf.map.in.\n            m = re.match(r'^[0-9a-f]+ (.) (.+)@@LIBQPDF_\\d+\\s*$', line)\n            if not m:\n                continue\n            symbol = m.group(2)\n            if re.match(r'^((void|int|bool|(.*? for)) )?std::', symbol):\n                # Calling different methods of STL classes causes\n                # different template instantiations to appear.\n                # Standard library methods that sneak into the binary\n                # interface are not considered part of the qpdf ABI.\n                continue\n            symbols.add(symbol)\n        return symbols\n\n    def dump(self, options):\n        # This is just for manual use to investigate surprises.\n        for i in sorted(self.get_symbols(options.lib)):\n            print(i)\n\n    def check_sizes(self, options):\n        # Make sure that every class with methods in the public API\n        # appears in sizes.cc either explicitly ignored or in a\n        # print_size call. This enables us to reliably test whether\n        # any object changed size by following the ABI checking\n        # procedures outlined in README-maintainer.\n\n        # To keep things up to date, whenever we add or remove\n        # objects, we have to update sizes.cc. The check-sizes option\n        # can be run at any time on an up-to-date build.\n\n        lib = self.get_symbols(options.lib)\n        classes = set()\n        for i in sorted(lib):\n            # Find a symbol that looks like a class method.\n            m = re.match(\n                r'(((?:^\\S*?::)?(?:[^:\\s]+))::([^:\\s]+))(?:\\[[^\\]]+\\])?\\(',\n                i)\n            if m:\n                full = m.group(1)\n                clas = m.group(2)\n                method = m.group(3)\n                if full.startswith('std::') or method.startswith('~'):\n                    # Sometimes std:: template instantiations make it\n                    # into the library. Ignore those. Also ignore\n                    # classes whose only exported method is a\n                    # destructor.\n                    continue\n                # Otherwise, if the class exports a method, we\n                # potentially care about changes to its size, so add\n                # it.\n                classes.add(clas)\n        in_sizes = set()\n        # Read the sizes.cc to make sure everything's there.\n        with open(os.path.join(whereami, 'qpdf/sizes.cc'), 'r') as f:\n            for line in f.readlines():\n                m = re.search(r'^\\s*(?:ignore_class|print_size)\\((.*?)\\)',\n                              line)\n                if m:\n                    in_sizes.add(m.group(1))\n        sizes_only = in_sizes - classes\n        classes_only = classes - in_sizes\n        if sizes_only or classes_only:\n            if sizes_only:\n                print(\"classes in sizes.cc but not in the library:\")\n                for i in sorted(sizes_only):\n                    print(' ', i)\n            if classes_only:\n                print(\"classes in the library but not in sizes.cc:\")\n                for i in sorted(classes_only):\n                    print(' ', i)\n            exit(f'{whoami}: mismatch between library and sizes.cc')\n        else:\n            print(f'{whoami}: sizes.cc is consistent with the library')\n\n    def read_sizes(self, filename):\n        sizes = {}\n        with open(filename, 'r') as f:\n            for line in f.readlines():\n                line = line.strip()\n                m = re.match(r'^(.*) (\\d+)$', line)\n                if not m:\n                    exit(f'{filename}: bad sizes line: {line}')\n                sizes[m.group(1)] = m.group(2)\n        return sizes\n\n    def compare(self, options):\n        old_version = self.get_versions(options.old_lib)\n        new_version = self.get_versions(options.new_lib)\n        old = self.get_symbols(options.old_lib)\n        new = self.get_symbols(options.new_lib)\n        if old_version > new_version:\n            exit(f'{whoami}: old version is newer than new version')\n        allow_abi_change = new_version[0] > old_version[0]\n        allow_added = allow_abi_change or (new_version[1] > old_version[1])\n        removed = sorted(old - new)\n        added = sorted(new - old)\n        if removed:\n            print('INTERFACES REMOVED:')\n            for i in removed:\n                print(' ', i)\n        else:\n            print('No interfaces were removed')\n        if added:\n            print('INTERFACES ADDED')\n            for i in added:\n                print(' ', i)\n        else:\n            print('No interfaces were added')\n\n        if removed and not allow_abi_change:\n            exit(f'{whoami}: **ERROR**: major version must be bumped')\n        elif added and not allow_added:\n            exit(f'{whoami}: **ERROR**: minor version must be bumped')\n        else:\n            print(f'{whoami}: ABI check passed.')\n\n        old_sizes = self.read_sizes(options.old_sizes)\n        new_sizes = self.read_sizes(options.new_sizes)\n        size_errors = False\n        for k, v in old_sizes.items():\n            if k in new_sizes and v != new_sizes[k]:\n                size_errors = True\n                print(f'{k} changed size from {v} to {new_sizes[k]}')\n        if size_errors:\n            if not allow_abi_change:\n                exit(f'{whoami}:'\n                     'size changes detected; this is an ABI change.')\n        else:\n            print(f'{whoami}: no size changes detected')\n\n\nif __name__ == '__main__':\n    try:\n        Main().main()\n    except KeyboardInterrupt:\n        exit(130)\n"
        },
        {
          "name": "check_assert",
          "type": "blob",
          "size": 1.408203125,
          "content": "#!/usr/bin/env perl\nrequire 5.008;\nuse warnings;\nuse strict;\nuse File::Basename;\n\nmy $whoami = basename($0);\nchdir(dirname($0)) or die;\n\nmy $errors = 0;\nforeach my $file (glob('*/*.c'), glob('*/*.cc'),\n                  glob('*/*/*.h'), glob('*/*/*.hh'))\n{\n    my $assert_test = 0;\n    if ($file =~ m,^libqpdf/qpdf/assert_,)\n    {\n        next;\n    }\n    open(F, \"<$file\") or die;\n    my $first_include = undef;\n    while (<F>)\n    {\n        if (m,^\\s*#\\s*include <qpdf/assert_(.*?).h>,)\n        {\n            if ($1 eq 'test')\n            {\n                $assert_test = 1;\n            }\n            if (defined $first_include)\n            {\n                error(\"$file:$.: qpdf/assert header must be first\");\n            }\n        }\n        if (m,^\\s*#\\s*include <(.*?)>,)\n        {\n            my $header = $1;\n            if (($header eq 'cassert') || ($header eq 'assert.h'))\n            {\n                error(\"$file:$.: assert.h and cassert are not allowed --\" .\n                      \" use one of the qpdf/assert_ files instead\");\n            }\n            $first_include = 1;\n        }\n        if ((! $assert_test) && (m/assert\\(/))\n        {\n            error(\"$file:$.: call qpdf_assert_debug instead of assert\");\n        }\n    }\n    close(F);\n}\nif ($errors)\n{\n    die \"$whoami: errors detected\\n\";\n}\nprint \"$whoami: no incorrect use of assert found\\n\";\n\nsub error\n{\n    my $msg = shift;\n    warn $msg, \"\\n\";\n    $errors = 1;\n}\n"
        },
        {
          "name": "cmake-win",
          "type": "blob",
          "size": 1.029296875,
          "content": "#!/bin/bash\nset -e\nwhoami=$(basename $0)\ntool=$1\nmode=$2\nconfig=${3-RelWithDebInfo}\n\ndir=$(realpath --relative-to . $(dirname $0))\nif [ \"$dir\" = \".\" ]; then\n    echo 1>&2 \"$whoami: run from other than the source directory.\"\n    exit 2\nfi\ndeclare -a args\ncase $tool in\n    msvc)\n        args=(-DCMAKE_BUILD_TYPE=$config)\n        if cl 2>&1 | grep -q 'for x86'; then\n            args=(\"${args[@]}\" -A win32)\n        fi\n        ;;\n    mingw)\n        args=(-G 'MSYS Makefiles' -DCMAKE_BUILD_TYPE=$config)\n        ;;\n    *)\n        echo 1>&2 \"Usage: $whoami {msvc|mingw}\"\n        exit 2\n        ;;\nesac\nif [ \"$mode\" = \"maint\" ]; then\n    args=(\"${args[@]}\" -DWERROR=1 -DBUILD_STATIC_LIBS=0)\nelif [ \"$mode\" = \"ci\" ]; then\n    args=(\"${args[@]}\" -DCI_MODE=1 -DINSTALL_MANUAL=1)\nfi\nargs=(\"${args[@]}\" -DCPACK_NSIS_MODIFY_PATH=ON)\n\nset -x\ncmake \"${args[@]}\" $dir\nset +x\nif [ \"$tool\" = \"msvc\" ]; then\n    echo \"\"\n    echo \"***\"\n    echo \"*** Remember to pass --config $config to cmake --build\"\n    echo \"***  and -C $config to ctest\"\n    echo \"***\"\n    echo \"\"\nfi\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.2451171875,
          "content": "# When modifying this file, please validate using\n# curl -X POST --data-binary @codecov.yml https://codecov.io/validate\n\ncoverage:\n  status:\n    project:\n      default:\n        informational: true\n    patch:\n      default:\n        informational: true\n"
        },
        {
          "name": "compare-for-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "completions",
          "type": "tree",
          "content": null
        },
        {
          "name": "copy_dlls",
          "type": "blob",
          "size": 2.76171875,
          "content": "#!/usr/bin/env perl\nrequire 5.008;\nuse warnings;\nuse strict;\nuse File::Basename;\nuse File::Path qw(make_path);\n\nmy $whoami = basename($0);\n\nusage() unless @ARGV == 3;\nmy ($file, $libqpdf, $destdir) = @ARGV;\nmy $filedir = dirname($file);\n\nmy $sep = ($^O eq 'MSWin32' ? ';' : ':');\nmy @path = ($filedir, '.', split($sep, $ENV{'PATH'}));\nforeach my $var (qw(LIB))\n{\n    if (exists $ENV{$var})\n    {\n        push(@path, split($sep, $ENV{$var}));\n    }\n}\n\nmy $format = undef;\nmy @to_find = get_dlls($file);\n\nmy %final = ();\nmy @notfound = ();\n\nwhile (@to_find)\n{\n    my $dll = shift(@to_find);\n    my $found = 0;\n    foreach my $dir ($libqpdf, @path)\n    {\n        if ((-f \"$dir/$dll\") && is_format(\"$dir/$dll\", $format))\n        {\n            if (! exists $final{$dll})\n            {\n                if ($dir ne $libqpdf)\n                {\n                    $final{$dll} = \"$dir/$dll\";\n                }\n                push(@to_find, get_dlls(\"$dir/$dll\"));\n            }\n            $found = 1;\n            last;\n        }\n    }\n    if (! $found)\n    {\n        push(@notfound, $dll);\n    }\n}\nif (@notfound)\n{\n    die \"$whoami: can't find the following dlls: \" .\n\tjoin(', ', @notfound), \"\\n\";\n}\n\nmake_path($destdir);\nforeach my $dll (sort keys (%final))\n{\n    my $f = $final{$dll};\n    $f =~ s,\\\\,/,g;\n    print \"Copying $f to $destdir\\n\";\n    system(\"cp -p '$f' '$destdir'\") == 0 or\n\tdie \"$whoami: copy $f to $destdir failed\\n\";\n}\n\nsub get_dlls\n{\n    my @result = ();\n    my $exe = shift;\n    open(O, \"objdump -p \\\"$exe\\\"|\") or die \"$whoami: can't run objdump\\n\";\n    while (<O>)\n    {\n        if (m/^\\s+DLL Name:\\s+(.+\\.dll)/i)\n        {\n            my $dll = $1;\n            $dll =~ tr/A-Z/a-z/;\n            next if $dll =~ m/^(kernel32|user32|msvcrt|advapi32)\\.dll$/;\n            next if $dll =~ m/^(api-ms-win.*|ws2_32|crypt32|bcrypt)\\.dll$/;\n            push(@result, $dll);\n        }\n        elsif (m/^Magic.*\\((PE.+?)\\)/)\n        {\n            $format = $1;\n        }\n    }\n    close(O);\n    if (! defined $format)\n    {\n        die \"$whoami: can't determine format of $exe\\n\";\n    }\n    @result;\n}\n\nsub is_format\n{\n    my ($file, $format) = @_;\n    $file =~ s,\\\\,/,g;\n    # Special case: msvc*.dll seem to be able to behave both as 32-bit\n    # and 64-bit DLLs.  Either that, or this logic is wrong for those\n    # DLLs and it doesn't matter because they're already installed on\n    # my test system (which doesn't have msvc installed on it).\n    if ($file =~ m,/msvc,i)\n    {\n        return 1;\n    }\n    my $result = 0;\n    my $file_format = `file \"$file\"`;\n    print \"$file $format $file_format\\n\";\n    if ($? == 0)\n    {\n        if ($file_format =~ m/\\Q${format}\\E executable/)\n        {\n            $result = 1;\n        }\n    }\n    $result;\n}\n\nsub usage\n{\n    die \"Usage: $whoami {exe|dll} libqpdf-dir destdir\\n\";\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "format-code",
          "type": "blob",
          "size": 1.59375,
          "content": "#!/bin/sh\n\n# Formatting rules are in .clang-format.\n\n# To protect a block of code from automatic formatting, enclose in\n# comments such as\n#\n#  // clang-format off\n#  ...\n#  // clang-format on\n\n# Sometimes, a comment of the form `// line-break` may appear in the\n# code to prevent clang-format from removing an intentional line\n# break.\n\n# For emacs users, the file `.dir-locals.el` configures cc-mode for an\n# indentation style that is close to but not exactly like what\n# clang-format produces. clang-format is authoritative.\n\n# Please see \"Code Formatting\" in the manual for additional notes.\n\n# If a newer version of clang-format causes changes to the output that\n# are improvements, bump the minimum required version of clang-format\n# here, and update manual/contributing.rst. There's a comment there\n# that refers to this comment. See also .clang-format.\nmin_version=18\n\nclang_format=clang-format\nif clang-format-$min_version --version >/dev/null 2>&1; then\n    clang_format=clang-format-$min_version\nelse\n    clang_version=$(clang-format --version | \\\n        awk '{for (i=1; i<=NF; i++) if ($i == \"version\") {print int($(i+1)); exit}}')\n    if [ \"$clang_version\" -lt \"$min_version\" ]; then\n        echo \"clang-format version >= $min_version is required\"\n        exit 2\n    fi\nfi\n\ncd $(dirname $0)\nfor i in $(find . -name '*build*' -prune -o '(' \\\n\t\t-name '*.hh' -o -name '*.h' -o -name '*.cc' -o -name '*.c' \\\n\t\t')' -print); do\n    if $clang_format < $i >| $i.new; then\n\tif diff -q $i $i.new >/dev/null 2>/dev/null; then\n\t    echo \"okay:    $i\"\n\t    rm $i.new\n\telse\n\t    echo \"updated: $i\"\n\t    mv $i.new $i\n\tfi\n    fi\ndone\n"
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "generate_auto_job",
          "type": "blob",
          "size": 40.517578125,
          "content": "#!/usr/bin/env python3\nimport os\nimport sys\nimport argparse\nimport hashlib\nimport re\nimport yaml\nimport json\nimport filecmp\nfrom contextlib import contextmanager\n\n# The purpose of this code is to automatically generate various parts\n# of the QPDFJob class. It is fairly complicated and extremely\n# bespoke, so understanding it is important if modifications are to be\n# made.\n\n# Documentation of QPDFJob is divided among three places:\n#\n# * \"HOW TO ADD A COMMAND-LINE ARGUMENT\" in README-maintainer provides\n#   a quick reminder for how to add a command-line argument\n#\n# * This file has a detailed explanation about how QPDFJob and\n#   generate_auto_job work together\n#\n# * The manual (\"QPDFJob Design\" in qpdf-job.rst) discusses the design\n#   approach, rationale, and evolution of QPDFJob.\n#\n# QPDFJob solved the problem of moving extensive functionality that\n# lived in qpdf.cc into the library. The QPDFJob class consists of\n# four major sections:\n#\n# * The run() method and its subsidiaries are responsible for\n#   performing the actual operations on PDF files. This is implemented\n#   in QPDFJob.cc\n#\n# * The nested Config class and the other classes it creates provide\n#   an API for setting up a QPDFJob instance and correspond to the\n#   command-line arguments of the qpdf executable. This is implemented\n#   in QPDFJob_config.cc\n#\n# * The argument parsing code reads an argv array and calls\n#   configuration methods. This is implemented in QPDFJob_argv.cc. The\n#   argument parsing logic itself is implemented in the QPDFArgParser\n#   class.\n#\n# * The job JSON handling code, which reads a QPDFJob JSON file and\n#   calls configuration methods. This is implemented in\n#   QPDFJob_json.cc. The JSON parsing code is in the JSON class. A\n#   sax-like JSON handler class that calls callbacks in response to\n#   items in the JSON is implemented in the JSONHandler class.\n#\n# This code has the job of ensuring that configuration, command-line\n# arguments, and JSON are all consistent and complete so that a\n# developer or user can freely move among those different ways of\n# interacting with QPDFJob in a predictable fashion. In addition, help\n# information for each option appears in manual/cli.rst, and that\n# information is used in the creation of the job JSON schema and to supply\n# help text to QPDFArgParser. This code also ensures that there is an\n# exact match between options in job.yml and options in cli.rst.\n#\n# The job.yml file contains the data that drives this code. To\n# understand job.yml, here are some important concepts.\n#\n# QPDFArgParser option table. There is support for positional\n# arguments, options consisting of flags and optional parameters, and\n# subparsers that start with a regular parameterless flag, have their\n# own positional and option sections, and are terminated with -- by\n# itself. Examples of this include --encrypt and --pages. An \"option\n# table\" contains an optional positional argument handler and a list\n# of valid options with specifications about their parameters. There\n# are three kinds of option tables:\n#\n# * The built-in \"help\" option table contains help commands, like\n#   --help and --version, that are only valid when they appear as the\n#   single command-line argument.\n#\n# * The \"main\" option table contains the options that are valid\n#   starting at the beginning of argument parsing.\n#\n# * A named option table can be started manually by the argument\n#   parsing code to switch the argument parser's context. Switching\n#   the parser to a new option table is manual (via a call to\n#   selectOptionTable). Context reverts to the main option table\n#   automatically when -- is encountered.\n#\n# In QPDFJob.hh, there is a Config class for each option table except\n# help.\n#\n# Option type: bare, required/optional parameter, required/optional\n# choices. A bare argument is just a flag, like --qdf. A parameter\n# option takes an arbitrary parameter, like --password. A choices\n# option takes one of a fixed list of choices, like --object-streams.\n# If a parameter or choices option's parameter is option, the empty\n# string may be specified as an option, such as --collate (or\n# --collate=). For a bare option, --option= is always the same as just\n# --option. This makes it possible to switch an option from bare to\n# optional choice to optional parameter all without breaking\n# compatibility.\n#\n# JSON \"schema\". This is a qpdf-specific \"schema\" for JSON. It is not\n# related to any kind of standard JSON schema. It is described in\n# JSON.hh and in the manual. QPDFJob uses the JSON \"schema\" in a mode\n# in which keys in the schema are all optional in the JSON object.\n#\n# Here is the mapping between configuration, argv, and JSON.\n#\n# The help options table is implemented solely for argv processing and\n# has no counterpart in configuration or JSON.\n#\n# The config() method returns a shared pointer to a Config object.\n# Every command-line option in the main option table has a\n# corresponding method in Config whose name is the option converted to\n# camel case. For bare options and options with optional parameters, a\n# version exists that takes no arguments. For other than bare options,\n# a version exist, possibly in addition, that takes a std::string\n# const&. For example, the --qdf flag implies a qdf() method in\n# Config, and the --object-streams flag implies an\n# objectStreams(std::string const&) method in Config. For flags in\n# option tables, the method is declared inside a config class specific\n# to the option table. The mapping between option tables and config\n# classes is explicit in job.yml. Positional arguments are handled\n# individually and manually -- see QPDFJob.hh in the CONFIGURATION\n# section for details. See examples/qpdf-job.cc for an example.\n#\n# To understand the rest, start at main and follow comments in the\n# code.\n\nwhoami = os.path.basename(sys.argv[0])\nBANNER = f'''//\n// This file is automatically generated by {whoami}.\n// Edits will be automatically overwritten if the build is\n// run in maintainer mode.\n//\n// clang-format off\n//'''\n\nMAN_BANNER = f'''.\\\\\"\n.\\\\\" This file is automatically generated by {whoami}.\n.\\\\\" Edits will be automatically overwritten if the build is\n.\\\\\" run in maintainer mode.\n.\\\\\"\n'''\n\ndef warn(*args, **kwargs):\n    print(*args, file=sys.stderr, **kwargs)\n\n\n@contextmanager\ndef write_file(filename):\n    tmpfile = filename + '.tmp'\n    with open(tmpfile, 'w') as f:\n        yield f\n    if os.path.exists(filename) and filecmp.cmp(filename, tmpfile, False):\n        os.unlink(tmpfile)\n    else:\n        os.rename(tmpfile, filename)\n\n\nclass Main:\n    # SOURCES is a list of source files whose contents are used by\n    # this program. If they change, we are out of date.\n    SOURCES = [\n        # Keep this list in sync with CMakeLists.txt: auto_job_inputs\n        whoami,\n        'CMakeLists.txt',\n        'manual/_ext/qpdf.py',\n        'job.yml',\n        'manual/cli.rst',\n        'manual/qpdf.1.in',\n    ]\n    # DESTS is a map to the output files this code generates. These\n    # generated files, as well as those added to DESTS later in the\n    # code, are included in various places by QPDFJob.hh or any of the\n    # implementing QPDFJob*.cc files.\n    DESTS = {\n        # Keep this list in sync with CMakeLists.txt: auto_job_outputs\n        'decl': 'libqpdf/qpdf/auto_job_decl.hh',\n        'init': 'libqpdf/qpdf/auto_job_init.hh',\n        'help': 'libqpdf/qpdf/auto_job_help.hh',\n        'schema': 'libqpdf/qpdf/auto_job_schema.hh',\n        'json_decl': 'libqpdf/qpdf/auto_job_json_decl.hh',\n        'json_init': 'libqpdf/qpdf/auto_job_json_init.hh',\n        'man': 'manual/qpdf.1',\n        # Others are added in top\n    }\n    # SUMS contains a checksum for each source and destination and is\n    # used to detect whether we're up to date without having to force\n    # recompilation all the time. This way the build can invoke this\n    # script unconditionally without causing stuff to rebuild every\n    # time.\n    SUMS = 'job.sums'\n\n    def main(self, args=sys.argv[1:], prog=whoami):\n        options = self.parse_args(args, prog)\n        self.top(options)\n\n    def parse_args(self, args, prog):\n        parser = argparse.ArgumentParser(\n            prog=prog,\n            description='Generate files for QPDFJob',\n        )\n        mxg = parser.add_mutually_exclusive_group(required=True)\n        mxg.add_argument('--check',\n                         help='update checksums if files are not up to date',\n                         action='store_true', default=False)\n        mxg.add_argument('--generate',\n                         help='generate files from sources',\n                         action='store_true', default=False)\n        return parser.parse_args(args)\n\n    def top(self, options):\n        with open('job.yml', 'r') as f:\n            data = yaml.safe_load(f.read())\n        # config_decls maps a config key from an option in \"options\"\n        # (from job.yml) to a list of declarations. A declaration is\n        # generated for each config method for that option table.\n        self.config_decls = {}\n        # Keep track of which configs we've declared since we can have\n        # option tables share a config class, as with the encryption\n        # tables.\n        self.declared_configs = set()\n\n        # Update DESTS -- see above. This ensures that each config\n        # class's contents are included in job.sums.\n        for o in data['options']:\n            config = o.get('config', None)\n            if config is not None:\n                self.DESTS[config] = f'include/qpdf/auto_job_{config}.hh'\n                self.config_decls[config] = []\n\n        if self.check_hashes():\n            exit(0)\n        elif options.check:\n            exit(f'{whoami}: auto job inputs have changed')\n        elif options.generate:\n            self.generate(data)\n        else:\n            exit(f'{whoami} unknown mode')\n\n    def get_hashes(self):\n        hashes = {}\n        for i in sorted([*self.SOURCES, *self.DESTS.values()]):\n            m = hashlib.sha256()\n            try:\n                with open(i, 'rb') as f:\n                    m.update(f.read())\n                hashes[i] = m.hexdigest()\n            except FileNotFoundError:\n                pass\n        return hashes\n\n    def check_hashes(self):\n        hashes = self.get_hashes()\n        match = False\n        try:\n            old_hashes = {}\n            with open(self.SUMS, 'r') as f:\n                for line in f.readlines():\n                    m = re.match(r'^(\\S+) (\\S+)\\s*$', line)\n                    if m:\n                        old_hashes[m.group(1)] = m.group(2)\n            match = old_hashes == hashes\n            if not match:\n                # Write to stdout, not stderr. What we write to stderr\n                # is visible in a normal build. Writing to stdout will\n                # hide it in that case but expose it if you directly\n                # run ./generate_auto_job --check as in CI.\n                print(f'*** {whoami} hash mismatches ***')\n                match = False\n                for k, v in hashes.items():\n                    if k not in old_hashes:\n                        print(f'  {k} is not in job.sums')\n                    elif v != old_hashes[k]:\n                        print(f'  {k} was modified')\n                for k in old_hashes:\n                    if k not in hashes:\n                        print(f'  {k} disappeared')\n        except Exception:\n            pass\n        return match\n\n    def update_hashes(self):\n        hashes = self.get_hashes()\n        with open(self.SUMS, 'w') as f:\n            print(f'# Generated by {whoami}', file=f)\n            for k, v in hashes.items():\n                print(f'{k} {v}', file=f)\n\n    def generate_doc(self, df, f, f_man):\n        st_top = 0\n        st_topic = 1\n        st_option = 2\n        st_option_help = 3\n        state = st_top\n\n        indent = None\n        topic = None\n        option = None\n        short_text = None\n        long_text = None\n\n        # Generate a bunch of short static functions rather than a big\n        # member function for help. Some compilers have problems with\n        # very large member functions in classes in anonymous\n        # namespaces.\n\n        help_files = 0\n        help_lines = 0\n\n        self.all_topics = set(self.options_without_help)\n        self.referenced_topics = set()\n\n        def set_indent(x):\n            nonlocal indent\n            indent = ' ' * len(x)\n\n        def append_long_text(line, topic):\n            nonlocal indent, long_text\n            if line == '\\n':\n                long_text += '\\n'\n            elif line.startswith(indent):\n                long_text += line[len(indent):]\n            else:\n                long_text = long_text.strip()\n                if long_text == '':\n                    raise Exception(f'missing long text for {topic}')\n                long_text += '\\n'\n                if 'help' not in topic:\n                    # Help for --help itself has --help=... not\n                    # referring to specific options.\n                    for i in re.finditer(r'--help=([^\\.\\s]+)', long_text):\n                        self.referenced_topics.add(i.group(1))\n                return True\n            return False\n\n        def manify(text):\n            lines = text.split('\\n')\n            out = []\n            last_was_item = False\n            for line in lines:\n                if line.startswith('- '):\n                    last_was_item = True\n                    out.append('.IP \\\\[bu]')\n                    out.append(line[2:])\n                elif last_was_item and line.startswith('  '):\n                    out.append(line[2:])\n                else:\n                    last_was_item = False\n                    out.append(line)\n            return '\\n'.join(out)\n\n        last_option_topic = ''\n        lineno = 0\n        for line in df.readlines():\n            if help_lines == 0:\n                if help_files > 0:\n                    print('}', file=f)\n                help_files += 1\n                help_lines += 1\n                print(f'static void add_help_{help_files}(QPDFArgParser& ap)\\n'\n                      '{', file=f)\n            lineno += 1\n            if state == st_top:\n                m = re.match(r'^(\\s*\\.\\. )help-topic (\\S+): (.*)$', line)\n                if m:\n                    set_indent(m.group(1))\n                    topic = m.group(2)\n                    short_text = m.group(3)\n                    long_text = ''\n                    state = st_topic\n                    continue\n                m = re.match(\n                    r'^(\\s*\\.\\. )qpdf:option:: (([^=\\[\\s]+)([\\[= ](.+))?)$',\n                    line)\n                if m:\n                    if topic is None:\n                        raise Exception('option seen before topic')\n                    set_indent(m.group(1))\n                    option = m.group(3)\n                    synopsis = m.group(2)\n                    if synopsis.endswith('`'):\n                        raise Exception(\n                            f'stray ` at end of option line (line {lineno})')\n                    if synopsis != option:\n                        long_text = synopsis + '\\n'\n                    else:\n                        long_text = ''\n                    state = st_option\n                    continue\n            elif state == st_topic:\n                if append_long_text(line, topic):\n                    self.all_topics.add(topic)\n                    print(f'ap.addHelpTopic(\"{topic}\", \"{short_text}\",'\n                          f' R\"({long_text})\");', file=f)\n                    print(f'.SH {topic.upper()} ({short_text})', file=f_man)\n                    print(manify(long_text), file=f_man, end='')\n                    help_lines += 1\n                    state = st_top\n            elif state == st_option:\n                if line == '\\n' or line.startswith(indent):\n                    m = re.match(r'^(\\s*\\.\\. )help: (.*)$', line)\n                    if m:\n                        set_indent(m.group(1))\n                        short_text = m.group(2)\n                        state = st_option_help\n                else:\n                    raise Exception('option without help text')\n            elif state == st_option_help:\n                if append_long_text(line, option):\n                    if option in self.options_without_help:\n                        self.options_without_help.remove(option)\n                    else:\n                        raise Exception(\n                            f'help for unknown option {option},'\n                            f' lineno={lineno}')\n                    if option not in self.help_options:\n                        self.jdata[option[2:]]['help'] = short_text\n                    print(f'ap.addOptionHelp(\"{option}\", \"{topic}\",'\n                          f' \"{short_text}\", R\"({long_text})\");', file=f)\n                    if last_option_topic != topic:\n                        print('.PP\\nRelated Options:', file=f_man)\n                    last_option_topic = topic\n                    print(f'.TP\\n.B {option} \\\\-\\\\- {short_text}', file=f_man)\n                    print(manify(long_text), file=f_man, end='')\n                    help_lines += 1\n                    state = st_top\n            if help_lines == 20:\n                help_lines = 0\n        print('}', file=f)\n        print('static void add_help(QPDFArgParser& ap)\\n{', file=f)\n        for i in range(help_files):\n            print(f'    add_help_{i+1}(ap);', file=f)\n        print('ap.addHelpFooter(\"For detailed help, visit'\n              ' the qpdf manual: https://qpdf.readthedocs.io\\\\n\");', file=f)\n        print('}\\n', file=f)\n        print('''.SH SEE ALSO\n.PP\nFor a summary of qpdf's options, please run \\\\fBqpdf \\\\-\\\\-help\\\\fR.\nA complete manual can be found at https://qpdf.readthedocs.io.\n''', file=f_man, end='')\n        for i in self.referenced_topics:\n            if i not in self.all_topics:\n                raise Exception(f'help text referenced --help={i}')\n        for i in self.options_without_help:\n            raise Exception(\n                'Options without help: ' +\n                ', '.join(self.options_without_help))\n\n    def generate(self, data):\n        warn(f'{whoami}: regenerating auto job files')\n        self.validate(data)\n\n        version = None\n        with open('CMakeLists.txt', 'r') as f:\n            for line in f.readlines():\n                if line.strip().startswith('VERSION '):\n                    version = line.strip().split(' ')[1]\n        if version is None:\n            raise Exception(\"can't read version from CMakeLists.txt\")\n\n        # Keep track of which options are help options since they are\n        # handled specially. Add the built-in help options to tables\n        # that we populate as we read job.yml since we won't encounter\n        # these in job.yml\n        self.help_options = set(\n            ['--completion-bash', '--completion-zsh', '--help']\n        )\n        # Keep track of which options we have encountered but haven't\n        # seen help text for. This enables us to report if any option\n        # is missing help.\n        self.options_without_help = set(self.help_options)\n\n        # Compute the information needed for generated files and write\n        # the files.\n        self.prepare(data)\n        with write_file(self.DESTS['decl']) as f:\n            print(BANNER, file=f)\n            for i in self.decls:\n                print(i, file=f)\n        with write_file(self.DESTS['init']) as f:\n            print(BANNER, file=f)\n            for i in self.init:\n                print(i, file=f)\n        with write_file(self.DESTS['help']) as f:\n            with write_file(self.DESTS['man']) as f_man:\n                print(MAN_BANNER, file=f_man, end='')\n                with open('manual/qpdf.1.in', 'r') as m_in:\n                    for line in m_in.readlines():\n                        line = line.replace('@PROJECT_VERSION@', version)\n                        print(line, file=f_man, end='')\n                with open('manual/cli.rst', 'r') as df:\n                    print(BANNER, file=f)\n                    self.generate_doc(df, f, f_man)\n\n        # Compute the json files after the config and arg parsing\n        # files. We need to have full information about all the\n        # options before we can generate the schema. Generating the\n        # schema also generates the json header files.\n        self.generate_schema(data)\n        with write_file(self.DESTS['schema']) as f:\n            print('static constexpr char const* JOB_SCHEMA_DATA = R\"(' +\n                  json.dumps(self.schema, indent=2, separators=(',', ': ')) +\n                  ')\";', file=f)\n        for k, v in self.config_decls.items():\n            with write_file(self.DESTS[k]) as f:\n                print(BANNER, file=f)\n                for i in v:\n                    print(i, file=f)\n        with write_file(self.DESTS['json_decl']) as f:\n            print(BANNER, file=f)\n            for i in self.json_decls:\n                print(i, file=f)\n        with write_file(self.DESTS['json_init']) as f:\n            print(BANNER, file=f)\n            for i in self.json_init:\n                print(i, file=f)\n\n        # Update hashes last to ensure that this will be rerun in the\n        # event of a failure.\n        self.update_hashes()\n        # DON'T ADD CODE TO generate AFTER update_hashes\n\n    def handle_trivial(self, i, identifier, cfg, prefix, kind, v):\n        # A \"trivial\" option is one whose handler does nothing other\n        # than to call the config method with the same name (switched\n        # to camelCase).\n        decl_arg = 1\n        decl_arg_optional = False\n        if kind == 'bare':\n            decl_arg = 0\n            self.init.append(f'this->ap.addBare(\"{i}\", '\n                             f'[this](){{{cfg}->{identifier}();}});')\n        elif kind == 'required_parameter':\n            self.init.append(\n                f'this->ap.addRequiredParameter(\"{i}\", '\n                f'[this](std::string const& x){{{cfg}->{identifier}(x);}}'\n                f', \"{v}\");')\n        elif kind == 'optional_parameter':\n            decl_arg_optional = True\n            self.init.append(\n                f'this->ap.addOptionalParameter(\"{i}\", '\n                f'[this](std::string const& x){{{cfg}->{identifier}(x);}});')\n        elif kind == 'required_choices':\n            self.init.append(\n                f'this->ap.addChoices(\"{i}\", '\n                f'[this](std::string const& x){{{cfg}->{identifier}(x);}}'\n                f', true, {v}_choices);')\n        elif kind == 'optional_choices':\n            decl_arg_optional = True\n            self.init.append(\n                f'this->ap.addChoices(\"{i}\", '\n                f'[this](std::string const& x){{{cfg}->{identifier}(x);}}'\n                f', false, {v}_choices);')\n\n        # Generate declarations for config methods separately by\n        # config object.\n        config_prefix = prefix + 'Config'\n        arg = ''\n        if decl_arg:\n            arg = 'std::string const& parameter'\n        fn = f'{config_prefix}* {identifier}({arg})'\n        if fn not in self.declared_configs:\n            self.declared_configs.add(fn)\n            self.config_decls[cfg].append(f'QPDF_DLL {fn};')\n            if decl_arg_optional:\n                # Rather than making the parameter optional, add an\n                # overloaded method that takes no arguments. This\n                # strategy enables us to change an option from bare to\n                # optional_parameter or optional_choices without\n                # breaking binary compatibility. The overloaded\n                # methods both have to be implemented manually. They\n                # are not automatically called, so if you forget,\n                # someone will get a link error if they try to call\n                # one.\n                self.config_decls[cfg].append(\n                    f'QPDF_DLL {config_prefix}* {identifier}();')\n\n    def handle_flag(self, i, identifier, kind, v):\n        # For flags that require manual handlers, declare the handler\n        # and register it. They have to be implemented manually in\n        # QPDFJob_argv.cc. You get compiler/linker errors for any\n        # missing methods.\n        if kind == 'bare':\n            self.decls.append(f'void {identifier}();')\n            self.init.append(f'this->ap.addBare(\"{i}\", '\n                             f'b(&ArgParser::{identifier}));')\n        elif kind == 'required_parameter':\n            self.decls.append(f'void {identifier}(std::string const&);')\n            self.init.append(f'this->ap.addRequiredParameter(\"{i}\", '\n                             f'p(&ArgParser::{identifier})'\n                             f', \"{v}\");')\n        elif kind == 'optional_parameter':\n            self.decls.append(f'void {identifier}(std::string const&);')\n            self.init.append(f'this->ap.addOptionalParameter(\"{i}\", '\n                             f'p(&ArgParser::{identifier}));')\n        elif kind == 'required_choices':\n            self.decls.append(f'void {identifier}(std::string const&);')\n            self.init.append(f'this->ap.addChoices(\"{i}\", '\n                             f'p(&ArgParser::{identifier})'\n                             f', true, {v}_choices);')\n        elif kind == 'optional_choices':\n            self.decls.append(f'void {identifier}(std::string const&);')\n            self.init.append(f'this->ap.addChoices(\"{i}\", '\n                             f'p(&ArgParser::{identifier})'\n                             f', false, {v}_choices);')\n\n    def prepare(self, data):\n        self.decls = []         # argv handler declarations\n        self.init = []          # initialize arg parsing code\n        self.json_decls = []    # json handler declarations\n        self.json_init = []     # initialize json handlers\n        self.jdata = {}         # running data used for json generate\n        self.by_table = {}      # table information by name for easy lookup\n\n        def add_jdata(flag, table, details):\n            # Keep track of each flag and where it appears so we can\n            # check consistency between the json information and the\n            # options section.\n            nonlocal self\n            if table == 'help':\n                self.help_options.add(f'--{flag}')\n            elif flag in self.jdata:\n                self.jdata[flag]['tables'][table] = details\n            else:\n                self.jdata[flag] = {\n                    'tables': {table: details},\n                }\n\n        # helper functions\n        self.init.append('auto b = [this](void (ArgParser::*f)()) {')\n        self.init.append('    return QPDFArgParser::bindBare(f, this);')\n        self.init.append('};')\n        self.init.append(\n            'auto p = [this](void (ArgParser::*f)(std::string const&)) {')\n        self.init.append('    return QPDFArgParser::bindParam(f, this);')\n        self.init.append('};')\n        self.init.append('')\n\n        # static variables for each set of choices for choices options\n        for k, v in data['choices'].items():\n            s = f'static char const* {k}_choices[] = {{'\n            for i in v:\n                s += f'\"{i}\", '\n            s += '0};'\n            self.init.append(s)\n            self.json_init.append(s)\n        self.init.append('')\n        self.json_init.append('')\n\n        # constants for the table names to reduce hard-coding strings\n        # in the handlers\n        for o in data['options']:\n            table = o['table']\n            if table in ('main', 'help'):\n                continue\n            i = self.to_identifier(table, 'O', True)\n            self.decls.append(f'static constexpr char const* {i} = \"{table}\";')\n        self.decls.append('')\n\n        # Walk through all the options adding declarations for the\n        # option handlers and initialization code to register the\n        # handlers in QPDFArgParser. For \"trivial\" cases,\n        # QPDFArgParser will call the corresponding config method\n        # automatically. Otherwise, it will declare a handler that you\n        # have to explicitly implement.\n\n        # If you add a new option table, you have to set config to the\n        # name of a member variable that you declare in the ArgParser\n        # class in QPDFJob_argv.cc. Then there should be an option in\n        # the main table, also listed as manual in job.yml, that\n        # switches to it. See implementations of any of the existing\n        # options that do this for examples.\n        for o in data['options']:\n            table = o['table']\n            config = o.get('config', None)\n            table_prefix = o.get('prefix', '')\n            arg_prefix = 'arg' + table_prefix\n            config_prefix = o.get('config_prefix', table_prefix)\n            manual = o.get('manual', [])\n            json_prefix = table_prefix or table\n            self.by_table[json_prefix] = {\n                'config': config,\n                'manual': manual,\n            }\n            if table == 'main':\n                self.init.append('this->ap.selectMainOptionTable();')\n            elif table == 'help':\n                self.init.append('this->ap.selectHelpOptionTable();')\n            else:\n                identifier = self.to_identifier(table, 'argEnd', False)\n                self.init.append(f'this->ap.registerOptionTable(\"{table}\",'\n                                 f' b(&ArgParser::{identifier}));')\n            if o.get('positional', False):\n                self.decls.append(\n                    f'void {arg_prefix}Positional(std::string const&);')\n                self.init.append('this->ap.addPositional('\n                                 f'p(&ArgParser::{arg_prefix}Positional));')\n\n            flags = {}\n            for i in o.get('bare', []):\n                flags[i] = ['bare', None]\n            for i, v in o.get('required_parameter', {}).items():\n                flags[i] = ['required_parameter', v]\n            for i in o.get('optional_parameter', []):\n                flags[i] = ['optional_parameter', None]\n            for i, v in o.get('required_choices', {}).items():\n                flags[i] = ['required_choices', v]\n            for i, v in o.get('optional_choices', {}).items():\n                flags[i] = ['optional_choices', v]\n                self.options_without_help.add(f'--{i}')\n\n            for i, [kind, v] in flags.items():\n                self.options_without_help.add(f'--{i}')\n                add_jdata(i, json_prefix, [kind, v])\n                if config is None or i in manual:\n                    identifier = self.to_identifier(i, arg_prefix, False)\n                    self.handle_flag(i, identifier, kind, v)\n                else:\n                    identifier = self.to_identifier(i, '', False)\n                    self.handle_trivial(\n                        i, identifier, config, config_prefix, kind, v)\n\n            # Subsidiary options tables need end methods to do any\n            # final checking within the option table. Final checking\n            # for the main option table is handled by\n            # checkConfiguration, which is called explicitly in the\n            # QPDFJob code.\n            if table not in ('main', 'help'):\n                identifier = self.to_identifier(table, 'argEnd', False)\n                self.decls.append(f'void {identifier}();')\n\n    def handle_json_trivial(self, flag_key, fdata):\n        config = None\n        for t, [kind, v] in fdata['tables'].items():\n            # We have determined that all tables, if multiple, have\n            # the same config.\n            tdata = self.by_table[t]\n            config = tdata['config']\n        if kind == 'bare':\n            self.json_init.append(\n                f'addBare([this]() {{ {config}->{flag_key}(); }});')\n        elif kind == 'required_parameter' or kind == 'optional_parameter':\n            # Optional parameters end up just being the empty string,\n            # so the handler has to deal with it. The empty string is\n            # also allowed for non-optional.\n            self.json_init.append(\n                f'addParameter([this](std::string const& p)'\n                f' {{ {config}->{flag_key}(p); }});')\n        elif kind == 'required_choices':\n            self.json_init.append(\n                f'addChoices({v}_choices, true,'\n                f' [this](std::string const& p)'\n                f' {{ {config}->{flag_key}(p); }});')\n        elif kind == 'optional_choices':\n            self.json_init.append(\n                f'addChoices({v}_choices, false,'\n                f' [this](std::string const& p)'\n                f' {{ {config}->{flag_key}(p); }});')\n\n    def handle_json_manual(self, path):\n        method = re.sub(r'\\.([a-zA-Z0-9])',\n                        lambda x: x.group(1).upper(),\n                        f'setup{path}')\n        self.json_decls.append(f'void {method}();')\n        self.json_init.append(f'{method}();')\n\n    def option_to_json_key(self, s):\n        return self.to_identifier(s, '', False)\n\n    def flag_to_schema_key(self, k):\n        if k.startswith('_'):\n            schema_key = k[1:]\n        else:\n            schema_key = re.sub(r'[^\\.]+\\.', '', k)\n        return self.option_to_json_key(schema_key)\n\n    def build_schema(self, j, path, flag, expected, options_seen):\n        # j: the part of data from \"json\" in job.yml as we traverse it\n        # path: a string representation of the path in the json\n        # flag: the command-line flag\n        # expected: a map of command-line options we expect to eventually see\n        # options_seen: which options we have seen so far\n\n        # As described in job.yml, the json can have keys that don't\n        # map to options. This includes keys whose values are\n        # dictionaries as well as keys that correspond to positional\n        # arguments. These start with _ and get their help from\n        # job.yml. Things that correspond to options get their help\n        # from the help text we gathered from cli.rst.\n\n        if flag in expected:\n            options_seen.add(flag)\n        elif flag.startswith('__'):\n            # This marks a flag that has no JSON equivalent because it\n            # is handled in some other fashion.\n            options_seen.add(flag[2:])\n            return\n        elif isinstance(j, str):\n            if not flag.startswith('_'):\n                raise Exception(f'json: {flag} has a description'\n                                ' but doesn\\'t start with _')\n        elif not (flag == '' or flag.startswith('_')):\n            raise Exception(f'json: unknown key {flag}')\n\n        # The logic here is subtle and makes sense if you understand\n        # how our JSON schemas work. They are described in JSON.hh,\n        # but basically, if you see a dictionary, the schema should\n        # have a dictionary with the same keys whose values are\n        # descriptive. If you see an array, the array should have\n        # single member that describes each element of the array. See\n        # JSON.hh for details.\n\n        # See comments in QPDFJob_json.cc in the Handlers class\n        # declaration to understand how and why the methods called\n        # here work. The idea is that Handlers keeps a stack of\n        # JSONHandler shared pointers so that we can register our\n        # handlers in the right place as we go.\n        if isinstance(j, dict):\n            schema_value = {}\n            if flag:\n                identifier = self.to_identifier(path, '', False)\n                self.json_decls.append(f'void begin{identifier}(JSON);')\n                self.json_decls.append(f'void end{identifier}();')\n                self.json_init.append(\n                    f'beginDict(bindJSON(&Handlers::begin{identifier}),'\n                    f' bindBare(&Handlers::end{identifier})); // {path}')\n            for k, v in j.items():\n                schema_key = self.flag_to_schema_key(k)\n                subpath = f'{path}.{schema_key}'\n                self.json_init.append(f'pushKey(\"{schema_key}\");')\n                schema_value[schema_key] = self.build_schema(\n                    v, subpath, k, expected, options_seen)\n                self.json_init.append(f'popHandler(); // key: {schema_key}')\n        elif isinstance(j, list):\n            if len(j) != 1:\n                raise Exception('json contains array with length != 1')\n            identifier = self.to_identifier(path, '', False)\n            self.json_decls.append(f'void begin{identifier}Array(JSON);')\n            self.json_decls.append(f'void end{identifier}Array();')\n            self.json_init.append(\n                f'beginArray(bindJSON(&Handlers::begin{identifier}Array),'\n                f' bindBare(&Handlers::end{identifier}Array));'\n                f' // {path}[]')\n            schema_value = [\n                self.build_schema(j[0], path, flag,\n                                  expected, options_seen)\n            ]\n            self.json_init.append(\n                f'popHandler(); // array: {path}[]')\n        else:\n            schema_value = j\n            if schema_value is None:\n                schema_value = re.sub(\n                    r'--([^\\s=]+)',\n                    lambda x: self.option_to_json_key(x.group(1)),\n                    expected[flag]['help'])\n            is_trivial = False\n            if flag in expected:\n                is_trivial = True\n                common_config = None\n                for t in expected[flag]['tables']:\n                    tdata = self.by_table[t]\n                    if flag in tdata['manual']:\n                        is_trivial = False\n                    if common_config is None:\n                        common_config = tdata['config']\n                    elif common_config != tdata['config']:\n                        is_trivial = False\n            config_key = self.flag_to_schema_key(flag)\n            if is_trivial:\n                self.handle_json_trivial(config_key, expected[flag])\n            else:\n                self.handle_json_manual(path)\n        return schema_value\n\n    def generate_schema(self, data):\n        # Check to make sure that every command-line option is\n        # represented in data['json']. Build a list of options that we\n        # expect. If an option appears once, we just expect to see it\n        # once. If it appears in more than one options table, we need\n        # to see a separate version of it for each option table. It is\n        # represented in job.yml prepended with the table prefix. The\n        # table prefix is removed in the schema. Example: \"password\"\n        # appears multiple times, so the json section of job.yml has\n        # main.password, uo.password, etc. But most options appear\n        # only once, so we can just list them as they are. There is a\n        # nearly exact match between option tables and dictionary in\n        # the job json schema, but it's not perfect because of how\n        # positional arguments are handled, so we have to do this\n        # extra work. Information about which tables a particular\n        # option appeared in is gathered up in prepare().\n        expected = {}\n        for k, v in self.jdata.items():\n            tables = v['tables']\n            if len(tables) == 1:\n                expected[k] = {**v}\n            else:\n                for t in sorted(tables):\n                    expected[f'{t}.{k}'] = {**v}\n        options_seen = set()\n\n        # Walk through the json information building the schema as we\n        # go. This verifies consistency between command-line options\n        # and the json section of the data and builds up a schema by\n        # populating with help information as available. In addition\n        # to generating the schema, we declare and register json\n        # handlers that correspond with it. That way, we can first\n        # check a job JSON file against the schema, and if it matches,\n        # we have fewer error opportunities while calling handlers.\n        self.schema = self.build_schema(\n            data['json'], '', '', expected, options_seen)\n        if options_seen != set(expected.keys()):\n            raise Exception('missing from json: ' +\n                            str(set(expected.keys()) - options_seen))\n\n    def check_keys(self, what, d, exp):\n        if not isinstance(d, dict):\n            exit(f'{what} is not a dictionary')\n        actual = set(d.keys())\n        extra = actual - exp\n        if extra:\n            exit(f'{what}: unknown keys = {extra}')\n\n    def validate(self, data):\n        self.check_keys('top', data, set(\n            ['choices', 'options', 'json']))\n        for o in data['options']:\n            self.check_keys('top', o, set(\n                ['table', 'prefix', 'config', 'config_prefix',\n                 'manual', 'bare', 'positional',\n                 'optional_parameter', 'required_parameter',\n                 'required_choices', 'optional_choices']))\n\n    def to_identifier(self, label, prefix, const):\n        identifier = re.sub(r'[^a-zA-Z0-9]', '_', label)\n        if const:\n            identifier = f'{prefix}_{identifier.upper()}'\n        else:\n            if prefix:\n                identifier = f'{prefix}_{identifier}'\n            identifier = re.sub(r'_([a-z])',\n                                lambda x: x.group(1).upper(),\n                                identifier).replace('_', '')\n        return identifier\n\n\nif __name__ == '__main__':\n    try:\n        os.chdir(os.path.dirname(os.path.realpath(__file__)))\n        Main().main()\n    except KeyboardInterrupt:\n        exit(130)\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "job.sums",
          "type": "blob",
          "size": 1.71875,
          "content": "# Generated by generate_auto_job\nCMakeLists.txt 4aaa3d5df1713d9e3b9c6778101c6af3efa2131a2f4c069095abee269d5eaccc\ngenerate_auto_job f64733b79dcee5a0e3e8ccc6976448e8ddf0e8b6529987a66a7d3ab2ebc10a86\ninclude/qpdf/auto_job_c_att.hh 4c2b171ea00531db54720bf49a43f8b34481586ae7fb6cbf225099ee42bc5bb4\ninclude/qpdf/auto_job_c_copy_att.hh 50609012bff14fd82f0649185940d617d05d530cdc522185c7f3920a561ccb42\ninclude/qpdf/auto_job_c_enc.hh 28446f3c32153a52afa239ea40503e6cc8ac2c026813526a349e0cd4ae17ddd5\ninclude/qpdf/auto_job_c_main.hh 84f463237235b2c095b747a4f5dd00f109ee596a1c207b944efb296c0c568cae\ninclude/qpdf/auto_job_c_pages.hh 09ca15649cc94fdaf6d9bdae28a20723f2a66616bf15aa86d83df31051d82506\ninclude/qpdf/auto_job_c_uo.hh 9c2f98a355858dd54d0bba444b73177a59c9e56833e02fa6406f429c07f39e62\njob.yml 31935064eca625af7657b23f2f12c614d14751ec0b12702482b1768a04905d22\nlibqpdf/qpdf/auto_job_decl.hh 20d6affe1e260f5a1af4f1d82a820b933835440ff03020e877382da2e8dac6c6\nlibqpdf/qpdf/auto_job_help.hh 1e9181f4729a22ff91ab54e2b4a82e6af0c57a8327efb222a4196adb609c1ade\nlibqpdf/qpdf/auto_job_init.hh e2a6bb87870c5522a01b15461c9fe909e360f5c7fed06e41acf13a125bd1d03e\nlibqpdf/qpdf/auto_job_json_decl.hh 843892c8e8652a86b7eb573893ef24050b7f36fe313f7251874be5cd4cdbe3fd\nlibqpdf/qpdf/auto_job_json_init.hh 344c2fb473f88fe829c93b1efe6c70a0e4796537b8eb35e421d955fff481ba7d\nlibqpdf/qpdf/auto_job_schema.hh 6d3eef5137b8828eaa301a1b3cf75cb7bb812aa6e2d8301de865b42d238d7a7c\nmanual/_ext/qpdf.py 6add6321666031d55ed4aedf7c00e5662bba856dfcd66ccb526563bffefbb580\nmanual/cli.rst b7f37995f13346518ae7b2ea84836fba13b4da4e1f55be5f2a861f20dea0ccdb\nmanual/qpdf.1 59c26635017cba5d142ec3fcc4aebcb91e0cf1355d51365db84f48b21585ad8d\nmanual/qpdf.1.in 436ecc85d45c4c9e2dbd1725fb7f0177fb627179469f114561adf3cb6cbb677b\n"
        },
        {
          "name": "job.yml",
          "type": "blob",
          "size": 10.1611328125,
          "content": "# See \"HOW TO ADD A COMMAND-LINE ARGUMENT\" in README-maintainer.\n\n# REMEMBER: if you add an optional_choices or optional_parameter, you\n# have to explicitly remember to implement the overloaded config\n# method that takes no arguments. Since no generated code will call it\n# automatically, there is no automated reminder to do this. If you\n# forget, it will be a link error if someone tries to call it.\n\nchoices:\n  yn:\n    - \"y\"\n    - \"n\"\n  password_mode:\n    - bytes\n    - hex-bytes\n    - unicode\n    - auto\n  stream_data:\n    - compress\n    - preserve\n    - uncompress\n  decode_level:\n    - none\n    - generalized\n    - specialized\n    - all\n  object_streams:\n    - disable\n    - preserve\n    - generate\n  remove_unref:\n    - auto\n    - \"yes\"\n    - \"no\"\n  flatten:\n    - all\n    - print\n    - screen\n  json_key:\n    # The list of selectable top-level keys id duplicated in the\n    # following places: job.yml, QPDFJob::json_schema, and\n    # QPDFJob::doJSON.\n    - acroform\n    - attachments\n    - encrypt\n    - objectinfo   # only v1\n    - objects      # only v1\n    - outlines\n    - pagelabels\n    - pages\n    - qpdf         # only v2\n  json_output:\n    - 2\n    - latest\n  json_stream_data:\n    - none\n    - inline\n    - file\n  json_version:\n    - 1\n    - 2\n    - latest\n  enc_bits:\n    - 40\n    - 128\n    - 256\n  print128:\n    - full\n    - low\n    - none\n  modify128:\n    - all\n    - annotate\n    - form\n    - assembly\n    - none\noptions:\n  - table: help\n    bare:\n      - version\n      - copyright\n      - show-crypto\n      - job-json-help\n    optional_choices:\n      json-help: json_version\n  - table: main\n    config: c_main\n    manual:\n      - add-attachment\n      - copy-attachments-from\n      - encrypt\n      - overlay\n      - pages\n      - underlay\n      - empty\n      - replace-input\n      - set-page-labels\n    positional: true\n    bare:\n      - add-attachment\n      - allow-weak-crypto\n      - check\n      - check-linearization\n      - coalesce-contents\n      - copy-attachments-from\n      - decrypt\n      - deterministic-id\n      - empty\n      - encrypt\n      - externalize-inline-images\n      - filtered-stream-data\n      - flatten-rotation\n      - generate-appearances\n      - ignore-xref-streams\n      - is-encrypted\n      - json-input\n      - keep-inline-images\n      - linearize\n      - list-attachments\n      - newline-before-endstream\n      - no-original-object-ids\n      - no-warn\n      - optimize-images\n      - overlay\n      - pages\n      - password-is-hex-key\n      - preserve-unreferenced\n      - preserve-unreferenced-resources\n      - progress\n      - qdf\n      - raw-stream-data\n      - recompress-flate\n      - remove-info\n      - remove-metadata\n      - remove-page-labels\n      - replace-input\n      - report-memory-usage\n      - requires-password\n      - remove-restrictions\n      - set-page-labels\n      - show-encryption\n      - show-encryption-key\n      - show-linearization\n      - show-npages\n      - show-pages\n      - show-xref\n      - static-aes-iv\n      - static-id\n      - suppress-password-recovery\n      - suppress-recovery\n      - test-json-schema\n      - underlay\n      - verbose\n      - warning-exit-0\n      - with-images\n    optional_parameter:\n      - collate\n      - split-pages\n    required_parameter:\n      compression-level: level\n      copy-encryption: file\n      encryption-file-password: password\n      force-version: version\n      ii-min-bytes: minimum\n      job-json-file: file\n      json-object: trailer\n      keep-files-open-threshold: count\n      linearize-pass1: filename\n      min-version: version\n      oi-min-area: minimum\n      oi-min-height: minimum\n      oi-min-width: minimum\n      password: password\n      password-file: password\n      remove-attachment: attachment\n      rotate: \"[+|-]angle\"\n      show-attachment: attachment\n      show-object: trailer\n      json-stream-prefix: stream-file-prefix\n      update-from-json: qpdf-json file\n    required_choices:\n      compress-streams: yn\n      decode-level: decode_level\n      flatten-annotations: flatten\n      json-key: json_key\n      json-stream-data: json_stream_data\n      keep-files-open: yn\n      normalize-content: yn\n      object-streams: object_streams\n      password-mode: password_mode\n      remove-unreferenced-resources: remove_unref\n      stream-data: stream_data\n    optional_choices:\n      json: json_version\n      json-output: json_output\n  - table: pages\n    config: c_pages\n    prefix: Pages\n    positional: true\n    required_parameter:\n      file: file\n      range: page-range\n      password: password\n  - table: encryption\n    config: c_main\n    prefix: Enc\n    positional: true\n    manual:\n      - user-password\n      - owner-password\n      - bits\n    required_parameter:\n      user-password: user_password\n      owner-password: owner_password\n    required_choices:\n      bits: enc_bits\n  - table: 40-bit encryption\n    config: c_enc\n    config_prefix: Enc\n    prefix: Enc40\n    required_choices:\n      extract: yn\n      annotate: yn\n      print: yn\n      modify: yn\n  - table: 128-bit encryption\n    config: c_enc\n    config_prefix: Enc\n    prefix: Enc128\n    bare:\n      - cleartext-metadata\n      - force-V4\n    required_choices:\n      accessibility: yn\n      extract: yn\n      print: print128\n      assemble: yn\n      annotate: yn\n      form: yn\n      modify-other: yn\n      modify: modify128\n      use-aes: yn\n  - table: 256-bit encryption\n    config: c_enc\n    config_prefix: Enc\n    prefix: Enc256\n    bare:\n      - cleartext-metadata\n      - force-R5\n      - allow-insecure\n    required_choices:\n      accessibility: yn\n      extract: yn\n      print: print128\n      assemble: yn\n      annotate: yn\n      form: yn\n      modify-other: yn\n      modify: modify128\n  - table: underlay/overlay\n    config: c_uo\n    prefix: UO\n    positional: true\n    required_parameter:\n      file: file\n      to: page-range\n      from: page-range\n      repeat: page-range\n      password: password\n  - table: attachment\n    config: c_att\n    prefix: Att\n    positional: true\n    bare:\n      - replace\n    required_parameter:\n      key: attachment-key\n      filename: filename\n      creationdate: creation-date\n      moddate: modification-date\n      mimetype: mime/type\n      description: description\n  - table: copy attachment\n    config: c_copy_att\n    prefix: CopyAtt\n    positional: true\n    required_parameter:\n      prefix: prefix\n      password: password\n  - table: set page labels\n    prefix: PageLabels\n    positional: true\njson:\n  # The structure of this section defines what the json input to\n  # QPDFJob looks like. If a key starts with underscore, it does not\n  # map to a command-line argument. If the value is a string, that is\n  # the help information. Otherwise, if the value is null, it has to\n  # match a command-line option, and its properties and help come from\n  # other information known by generate_auto_job. This information is\n  # used to construct a \"schema\" (as in JSON.hh) for the json input to\n  # QPDFJob. The leading underscore is removed. If a key starts with a\n  # double underscore, it corresponds to a command-line argument that\n  # does not have a counterpart in the JSON. This signals that the\n  # command-line argument was not forgotten, but it is otherwise\n  # ignored by the JSON. *NOTE*: all keys are converted to camelCase\n  # for the schema and must appear that way in the user-supplied json.\n  # This makes it more convenient to populate JSON objects in some\n  # languages.\n\n  # input\n  _inputFile: \"input filename\"\n  main.password:\n  password-file:\n  empty:\n  json-input:\n  # output\n  _outputFile: \"output filename\"\n  replace-input:\n  # output options\n  qdf:\n  preserve-unreferenced:\n  newline-before-endstream:\n  normalize-content:\n  stream-data:\n  compress-streams:\n  recompress-flate:\n  decode-level:\n  decrypt:\n  deterministic-id:\n  static-aes-iv:\n  static-id:\n  no-original-object-ids:\n  copy-encryption:\n  encryption-file-password:\n  linearize:\n  linearize-pass1:\n  object-streams:\n  min-version:\n  force-version:\n  progress:\n  split-pages:\n  json-output:\n  remove-restrictions:\n  encrypt:\n    user-password:\n    owner-password:\n    __bits:\n    _40bit:\n      Enc40.annotate:\n      Enc40.extract:\n      Enc40.modify:\n      Enc40.print:\n    _128bit:\n      Enc128.accessibility:\n      Enc128.annotate:\n      Enc128.assemble:\n      Enc128.cleartext-metadata:\n      Enc128.extract:\n      Enc128.form:\n      Enc128.modify-other:\n      Enc128.modify:\n      Enc128.print:\n      force-V4:\n      use-aes:\n    _256bit:\n      Enc256.accessibility:\n      Enc256.annotate:\n      Enc256.assemble:\n      Enc256.cleartext-metadata:\n      Enc256.extract:\n      Enc256.form:\n      Enc256.modify-other:\n      Enc256.modify:\n      Enc256.print:\n      allow-insecure:\n      force-R5:\n  # inspect\n  check:\n  check-linearization:\n  filtered-stream-data:\n  raw-stream-data:\n  show-encryption:\n  show-encryption-key:\n  show-linearization:\n  show-npages:\n  show-object:\n  show-pages:\n  show-xref:\n  with-images:\n  list-attachments:\n  show-attachment:\n  json:\n  json-key:\n    - null\n  json-object:\n    - null\n  json-stream-data:\n  json-stream-prefix:\n  # other options\n  update-from-json:\n  allow-weak-crypto:\n  keep-files-open:\n  keep-files-open-threshold:\n  no-warn:\n  verbose:\n  test-json-schema:\n  ignore-xref-streams:\n  password-is-hex-key:\n  password-mode:\n  suppress-password-recovery:\n  suppress-recovery:\n  coalesce-contents:\n  compression-level:\n  externalize-inline-images:\n  ii-min-bytes:\n  remove-unreferenced-resources:\n  add-attachment:\n    - _file: \"file to attach\"\n      creationdate:\n      description:\n      filename:\n      key:\n      mimetype:\n      moddate:\n      replace:\n  remove-attachment:\n    - null\n  copy-attachments-from:\n    - _file: \"file to copy attachments from\"\n      CopyAtt.password:\n      prefix:\n  collate:\n  flatten-annotations:\n  flatten-rotation:\n  generate-appearances:\n  keep-inline-images:\n  oi-min-area:\n  oi-min-height:\n  oi-min-width:\n  optimize-images:\n  pages:\n    - Pages.file:\n      Pages.password:\n      range:\n  remove-info:\n  remove-metadata:\n  remove-page-labels:\n  report-memory-usage:\n  rotate:\n  set-page-labels:\n    - null\n  overlay:\n    - UO.file:\n      UO.password:\n      from:\n      repeat:\n      to:\n  underlay:\n    - UO.file:\n      UO.password:\n      from:\n      repeat:\n      to:\n  warning-exit-0:\n  job-json-file:\n  preserve-unreferenced-resources:\n  requires-password:\n  is-encrypted:\n"
        },
        {
          "name": "libqpdf.map.in",
          "type": "blob",
          "size": 0.0458984375,
          "content": "LIBQPDF_@qpdf_SOVERSION@ {\n  global:\n    *;\n};\n"
        },
        {
          "name": "libqpdf.pc.in",
          "type": "blob",
          "size": 0.2978515625,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nexec_prefix=${prefix}\nlibdir=@CMAKE_INSTALL_FULL_LIBDIR@\nincludedir=@CMAKE_INSTALL_FULL_INCLUDEDIR@\n\nName: libqpdf\nDescription: PDF transformation library\nVersion: @PROJECT_VERSION@\nRequires.private: zlib, libjpeg@CRYPTO_PKG@\nLibs: -L${libdir} -lqpdf\nCflags: -I${includedir}\n"
        },
        {
          "name": "libqpdf",
          "type": "tree",
          "content": null
        },
        {
          "name": "libtests",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo",
          "type": "tree",
          "content": null
        },
        {
          "name": "make_dist",
          "type": "blob",
          "size": 3.5107421875,
          "content": "#!/usr/bin/env perl\n#\n# This program creates a source distribution of qpdf.  For details,\n# see README-maintainer.\n#\n\nrequire 5.008;\nuse warnings;\nuse strict;\nuse File::Basename;\nuse Cwd;\nuse Cwd 'abs_path';\nuse IO::File;\nuse File::Path qw(rmtree make_path);\n\nmy $whoami = basename($0);\n\nmy $tmp = $ENV{'TMPDIR'} || '/tmp';\nmy $keep_tmp = 0;\nmy $ci_mode = 0;\nmy $version = undef;\nforeach my $arg (@ARGV)\n{\n    if ($arg eq '--keep-tmp')\n    {\n        $keep_tmp = 1;\n    }\n    elsif ($arg eq '--ci')\n    {\n        $ci_mode = 1;\n    }\n    elsif (! defined $version)\n    {\n        $version = $arg;\n    }\n    else\n    {\n\tusage();\n    }\n}\n\nif ($ci_mode && (! defined $version))\n{\n    $version = get_version_from_cmake();\n}\n\nusage() unless defined $version;\nusage() unless $version =~ m/^(\\d+\\.\\d+(?:\\.(a|b|rc)?\\d+)?)$/;\nmy $distname = \"qpdf-$version\";\nmy $tmpdir = \"${tmp}/$distname\";\nif ((-d $tmpdir) && (! $keep_tmp))\n{\n    rmtree($tmpdir);\n}\nmake_path($tmp);\nrun(\"git archive --prefix=qpdf-$version/ HEAD . | (cd $tmp; tar xf -)\");\ncd($tmpdir);\n\n# Check versions\nmy $cmakeversion = get_version_from_cmake();\nmy $code_version = get_version_from_source();\n\nmy $version_error = 0;\nif ($version ne $cmakeversion)\n{\n    print \"$whoami: cmake version = $cmakeversion\\n\";\n    $version_error = 1;\n}\nif ($version ne $code_version)\n{\n    print \"$whoami: QPDF.cc version = $code_version\\n\";\n    $version_error = 1;\n}\nif ($version_error)\n{\n    die \"$whoami: version numbers are not consistent\\n\";\n}\n\ncd($tmp);\nrun(\"tar czvf $distname.tar.gz-candidate $distname\");\nmy $distfile = ($ci_mode ? \"$distname-ci.tar.gz\" : \"$distname.tar.gz\");\nrename \"$distname.tar.gz-candidate\", $distfile or die;\n\nif (! $keep_tmp)\n{\n    rmtree($tmpdir);\n}\n\nprint \"\nSource distribution created as ${tmp}/$distfile\nIf this is a release, don't forget to tag the version control system and\nmake a backup of the release tar file.\n\n\";\n\nsub get_version_from_cmake\n{\n    my $fh = safe_open(\"CMakeLists.txt\");\n    my $cmake_version = 'unknown';\n    my $saw_project = 0;\n    while (<$fh>)\n    {\n        if (m/project\\(qpdf/)\n        {\n            $saw_project = 1;\n        }\n        elsif ($saw_project && m/VERSION (\\S+)$/)\n        {\n            $cmake_version = $1;\n            last;\n        }\n    }\n    $fh->close();\n    $cmake_version;\n}\n\nsub get_version_from_source\n{\n    my $fh = safe_open(\"include/qpdf/DLL.h\");\n    my $code_version = 'unknown';\n    my $major = '';\n    my $minor = '';\n    my $patch = '';\n    while (<$fh>)\n    {\n        if (m/QPDF_MAJOR_VERSION (\\d+)/)\n        {\n            $major = $1;\n        }\n        elsif (m/QPDF_MINOR_VERSION (\\d+)/)\n        {\n            $minor = $1;\n        }\n        elsif (m/QPDF_PATCH_VERSION (\\d+)/)\n        {\n            $patch = $1;\n        }\n        elsif (m/QPDF_VERSION \\\"([^\\\"]+)\\\"/)\n        {\n            $code_version = $1;\n        }\n    }\n    my $t = sprintf(\"%s.%s.%s\", $major, $minor, $patch);\n    if ($t ne $code_version)\n    {\n        die \"$whoami: version is inconsistent in DLL.h:\" .\n            \" $t vs $code_version\\n\";\n    }\n\n    $fh->close();\n    $code_version;\n}\n\nsub safe_open\n{\n    my $file = shift;\n    my $fh = new IO::File(\"<$file\") or die \"$whoami: can't open $file: $!\";\n    $fh;\n}\n\nsub run\n{\n    my $cmd = shift;\n    system($cmd) == 0 or die \"$whoami: $cmd failed\\n\";\n}\n\nsub cd\n{\n    my $dir = shift;\n    chdir($dir) or die;\n}\n\nsub usage\n{\n    die \"\nUsage: $whoami [--keep-tmp] {--ci|version}\n\n$whoami creates ${tmp}/qpdf-<version> and deletes it when done. With\n--keep-tmp, the directory is kept. This can be useful for debugging\nthe release process.\n\n\";\n}\n"
        },
        {
          "name": "manual",
          "type": "tree",
          "content": null
        },
        {
          "name": "performance_check",
          "type": "blob",
          "size": 8.642578125,
          "content": "#!/usr/bin/env perl\nrequire 5.008;\nuse warnings;\nuse strict;\nuse File::Basename;\nuse Time::HiRes qw(gettimeofday tv_interval);\nuse File::Path qw(make_path);\nuse IPC::Open3;\nuse IO::Pipe;\n\nmy $whoami = basename($0);\n$| = 1;\n\n# [ name, [ args ] ]\n# If <IN> appears, it is replaced with the input file name. Otherwise,\n# the input file name is added to the end of the arguments.\nmy @tests = (\n    ['no arguments', []],\n    ['generate object streams', ['--object-streams=generate']],\n    ['disable object streams', ['--object-streams=disable']],\n    ['split pages', ['--split-pages', '--remove-unreferenced-resources=no']],\n    ['shared resource check', ['--split-pages', '--remove-unreferenced-resources=auto']],\n    ['linearize', ['--linearize']],\n    ['encrypt', ['--encrypt', 'u', 'o', '256', '--']],\n    ['extract first page', ['--empty', '--pages', '<IN>', '1', '--']],\n    ['json-output', ['--json-output']],\n    ['json-input', ['--json-input']],\n    );\n\n# If arg is not found in help output, look here. If not here, skip test.\n# { new => old } -- if new is not found, replace with old; if old is\n#                   if old is empty, remove argument\nmy %arg_compat = (\n    '--remove-unreferenced-resources=no' => '--preserve-unreferenced-resources',\n    '--remove-unreferenced-resources=yes' => '',\n    '--remove-unreferenced-resources=auto' => undef,\n    '--report-memory-usage' => '',\n    );\n\nmy $executable = undef;\nmy $test_dir = undef;\nmy $test_file = undef;\nmy $workdir = undef;\nmy $maxtime = undef;\nmy $iterations = undef;\n\nmy $default_executable = 'build/qpdf/qpdf';\nmy $default_test_dir = '../performance-test-files';\nmy $default_test_file = undef;\nmy $default_workdir = 'build/perf';\nmy $default_maxtime = 20;\nmy $default_iterations = 20;\n\nsub usage\n{\n    warn \"\nUsage: $whoami [ args ]\n  --dir dir           test on all files in dir (default: $default_test_dir)\n  --file file         test only on the named file\n  --executable qpdf   use the specified qpdf (default: $default_executable)\n  --workdir           where to write output pdfs (default: $default_workdir)\n  --maxtime           maximum time for a test; 0 means unlimited (default: $default_maxtime)\n  --iterations        number of iterations (default: $default_iterations)\n  --test regexp       run only tests that match specified pattern\n\nPopulate $test_dir with files you want to use for performance\nbenchmarking. PDF files and qpdf JSON files are allowed. The qpdf\nrelease process uses a clone of\nhttps://github.com/qpdf/performance-test-files for this purpose.\n\nTests:\n\";\n    foreach my $t (@tests)\n    {\n        warn \"  $t->[0]\\n\";\n    }\n    exit 2;\n}\n\nmy $test_re = undef;\nwhile (@ARGV)\n{\n    my $arg = shift(@ARGV);\n    if ('--dir' eq $arg)\n    {\n        usage() unless @ARGV;\n        $test_dir = shift(@ARGV);\n        $test_file = undef;\n    }\n    elsif ('--file' eq $arg)\n    {\n        usage() unless @ARGV;\n        $test_file = shift(@ARGV);\n        $test_dir = undef;\n    }\n    elsif ('--executable' eq $arg)\n    {\n        usage() unless @ARGV;\n        $executable = shift(@ARGV);\n    }\n    elsif ('--workdir' eq $arg)\n    {\n        usage() unless @ARGV;\n        $workdir = shift(@ARGV);\n    }\n    elsif ('--maxtime' eq $arg)\n    {\n        usage() unless @ARGV;\n        $maxtime = shift(@ARGV);\n    }\n    elsif ('--iterations' eq $arg)\n    {\n        usage() unless @ARGV;\n        $iterations = shift(@ARGV);\n    }\n    elsif ('--test' eq $arg)\n    {\n        usage() unless @ARGV;\n        $test_re = shift(@ARGV);\n    }\n    else\n    {\n        usage();\n    }\n}\n\nif ((! defined $test_dir) && (! defined $test_file))\n{\n    $test_dir = $default_test_dir;\n}\nif (! defined $executable)\n{\n    $executable = $default_executable;\n}\nif (! defined $workdir)\n{\n    $workdir = $default_workdir;\n}\nif (! defined $maxtime)\n{\n    $maxtime = $default_maxtime;\n}\nif (! defined $iterations)\n{\n    $iterations = $default_iterations;\n}\n\nmy @test_files = ();\nmy @json_test_files = ();\n{ # private scope\n    my @tmp = ();\n    if (defined $test_file)\n    {\n        push(@tmp, $test_file);\n    }\n    else\n    {\n        opendir(D, $test_dir) or die \"\n$whoami: can't open test directory: $!\n\nConfigured test directory: $test_dir\n\nPopulate $test_dir with a clone of the\nqpdf/performance-test-files github repository.\nRun $whoami --help for details.\n\nRepository URL: https://github.com/qpdf/performance-test-files\n\n\";\n        my @entries = readdir(D);\n        closedir(D);\n        for (sort @entries)\n        {\n            my $file = \"$test_dir/$_\";\n            if (-f $file && $file =~ m/.(pdf|json)$/i)\n            {\n                push(@tmp, $file);\n            }\n        }\n    }\n    foreach my $i (@tmp)\n    {\n        if ($i =~ m/.json$/)\n        {\n            push(@json_test_files, $i);\n        }\n        else\n        {\n            push(@test_files, $i);\n        }\n    }\n}\n\nmy $report_mem = filter_args([\"--report-memory-usage\"]);\n{\n    my ($r, $mem) = run_cmd($executable, @$report_mem,\n                            \"--empty\", File::Spec->devnull());\n    if ($r != 0)\n    {\n        die \"$whoami: $executable doesn't seem to work\\n\";\n    }\n    if ($mem == 0)\n    {\n        print \"** Note: memory information is not available **\\n\";\n    }\n}\n\nrun_tests();\nprint \"\\n\";\n\nsub filter_args\n{\n    my $args = shift;\n    my $help = `$executable --help=all`;\n    my $new_args = [];\n    foreach my $arg (@$args)\n    {\n        my $to_check = $arg;\n        $to_check =~ s/=.*$//;\n        if (($to_check =~ m/^-/) && (index($help, $to_check) == -1))\n        {\n            my $new_arg = $arg_compat{$arg};\n            if (! defined $new_arg)\n            {\n                return undef;\n            }\n            if ($new_arg ne '')\n            {\n                print \"  replacing $arg with $new_arg\\n\";\n                push(@$new_args, $new_arg);\n            }\n        }\n        else\n        {\n            push(@$new_args, $arg);\n        }\n    }\n    $new_args;\n}\n\nsub run_tests\n{\n    my $args = shift;\n\n    chomp(my $commit = `git describe @`);\n    print \"commit: $commit\\n\";\n    print \"Format: time-in-seconds  RAM-in-MiB  filename\\n\";\n    make_path($workdir);\n    foreach my $test (@tests)\n    {\n        my ($name, $args) = @$test;\n        if ((defined $test_re) && $name !~ m/$test_re/)\n        {\n            print \" skipping test $name\\n\";\n            next;\n        }\n        print \" test: $name\\n\";\n        $args = filter_args($args);\n        if (! defined $args)\n        {\n            print \"  skipping (unknown arguments)\\n\";\n            next;\n        }\n        my $test_files = \\@test_files;\n        foreach my $arg (@$args)\n        {\n            if ($arg eq '--json-input')\n            {\n                $test_files = \\@json_test_files;\n                last;\n            }\n        }\n        foreach my $file (@$test_files)\n        {\n            my $time = run_test($file, $args);\n            if (defined $time)\n            {\n                print \"  $time  \" . basename($file) .\"\\n\";\n            }\n            else\n            {\n                print \"   $file skipped\\n\";\n            }\n        }\n    }\n}\n\nsub run_test\n{\n    my ($file, $args) = @_;\n\n    my $outfile = \"out.pdf\";\n    my $found_in = 0;\n    my @cmd = ($executable, @$report_mem);\n    for (@$args)\n    {\n        my $arg = $_;\n        if ($arg eq '--json-output')\n        {\n            $outfile = \"out.json\";\n        }\n        elsif ($arg eq '<IN>')\n        {\n            $found_in = 1;\n            $arg = $file;\n        }\n        push(@cmd, $arg);\n    }\n    if (! $found_in)\n    {\n        push(@cmd, $file);\n    }\n    push(@cmd, \"$workdir/$outfile\");\n    # Run once and discard to update caches\n    system(\"sync\");\n    run_cmd(@cmd);\n    my $i = 0;\n    my $total = 0;\n    my $max_mem = 0;\n    while ($i < $iterations)\n    {\n        my $start = [gettimeofday];\n        my ($r, $mem) = run_cmd(@cmd);\n        if ($r == 2)\n        {\n            # interrupt\n            exit(2);\n        }\n        my $end = [gettimeofday];\n        if ($r != 0)\n        {\n            print \"  command failed; ignoring results\\n\";\n            return undef;\n        }\n        $max_mem = $mem > $max_mem ? $mem : $max_mem;\n        my $elapsed = tv_interval($start, $end);\n        $total += $elapsed;\n        ++$i;\n        if (($maxtime > 0) && ($total >= $maxtime) && ($i >= 3))\n        {\n            # This is taking too long, so take what we have\n            last;\n        }\n    }\n    return sprintf(\"%8.4f  %8.4f\", $total / $i, $max_mem / 1048576);\n}\n\nsub run_cmd\n{\n    my @cmd = @_;\n    my $pipe = IO::Pipe->new();\n    my $pid = open3(my $child_in, '>&STDOUT', $pipe->writer(), @cmd);\n    $child_in->close();\n    waitpid($pid, 0);\n    my $r = $?;\n    my $mem = 0;\n    while (<$pipe>)\n    {\n        if (m/qpdf-max-memory-usage (\\d+)/)\n        {\n            $mem = $1;\n        }\n        else\n        {\n            warn $_;\n        }\n    }\n    ($r, $mem);\n}\n"
        },
        {
          "name": "pkg-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "qpdf",
          "type": "tree",
          "content": null
        },
        {
          "name": "qpdfConfig.cmake.in",
          "type": "blob",
          "size": 0.0712890625,
          "content": "@PACKAGE_INIT@\ninclude(\"${CMAKE_CURRENT_LIST_DIR}/libqpdfTargets.cmake\")\n"
        },
        {
          "name": "qtest",
          "type": "tree",
          "content": null
        },
        {
          "name": "run-qtest",
          "type": "blob",
          "size": 2.8798828125,
          "content": "#!/usr/bin/env perl\nrequire 5.008;\nuse warnings;\nuse strict;\nuse Cwd 'abs_path';\nuse File::Basename;\nuse File::Spec;\n\nmy $whoami = basename($0);\n\nmy $top = undef;\nmy $code = undef;\nmy @bin = ();\nmy $color = undef;\nmy $show_on_failure = 0;\nmy $disable_tc = 0;\nmy @tc = ();\n\nif ($^O =~ m/^MSWin32|msys$/)\n{\n    for (@ARGV)\n    {\n        s,^([A-Z]):/,/\\L$1\\E/,;\n    }\n}\n\nwhile (@ARGV)\n{\n    my $arg = shift(@ARGV);\n    if ($arg eq '--top')\n    {\n        usage() unless @ARGV;\n        $top = shift(@ARGV);\n    }\n    elsif ($arg eq '--code')\n    {\n        usage() unless @ARGV;\n        $code = shift(@ARGV);\n    }\n    elsif ($arg eq '--bin')\n    {\n        usage() unless @ARGV;\n        push(@bin, shift(@ARGV));\n    }\n    elsif ($arg eq '--color')\n    {\n        usage() unless @ARGV;\n        $color = cmake_bool(shift(@ARGV));\n    }\n    elsif ($arg eq '--show-on-failure')\n    {\n        usage() unless @ARGV;\n        $show_on_failure = cmake_bool(shift(@ARGV));\n    }\n    elsif ($arg eq '--disable-tc')\n    {\n        $disable_tc = 1;\n    }\n    elsif ($arg eq '--tc')\n    {\n        usage() unless @ARGV;\n        while (@ARGV && ($ARGV[0] !~ m/^--/))\n        {\n            # On Windows, a literal glob in quotes is expanded by the\n            # shell, so we have to handle globs when expanded by the\n            # shell by consuming arguments until the next --.\n\n            my $t = shift(@ARGV);\n            if (exists $ENV{'TESTS'})\n            {\n                # No point enabling coverage if we're intentionally\n                # running only a subset of tests.\n                next;\n            }\n            push(@tc, $t);\n        }\n    }\n    elsif ($arg eq '--env')\n    {\n        usage() unless @ARGV;\n        my $var = shift(@ARGV);\n        usage() unless $var =~ m/^([^=]+)=(.*)$/;\n        $ENV{$1} = $2;\n    }\n    else\n    {\n        usage();\n    }\n}\nusage() unless (defined $top && defined $code && scalar(@bin));\n\nmy @cmd = (\"$top/qtest/bin/qtest-driver\");\nif (defined $color)\n{\n    push(@cmd, \"-stdout-tty=$color\");\n}\npush(@cmd,\n     \"-bindirs\", join(':', @bin),\n     \"-datadir\", \"$code/qtest\",\n     \"-junit-suffix\", basename($code));\n\nif (scalar(@tc) && (! $disable_tc))\n{\n    my @tc_srcs = map {\n        File::Spec->abs2rel(abs_path($_))\n    } map {\n        # On non-Windows, a literal glob in quotes is not expanded by\n        # the shell, so we have to handle globs explicitly.\n        glob($_)\n    } @tc;\n\n    $ENV{'TC_SRCS'} = join(' ', @tc_srcs);\n    push(@cmd, \"-covdir\", $code);\n}\n\nmy $r = system(@cmd);\nif (($r != 0) && $show_on_failure && open(R, \"<qtest.log\"))\n{\n    binmode R;\n    while (<R>)\n    {\n        print;\n    }\n    close(R);\n}\nexit($r == 0 ? 0 : 2);\n\nsub cmake_bool\n{\n    my $arg = shift;\n    ($arg =~ m/^(1|on|true|y(es)?)$/i) ? 1 : 0;\n}\n\nsub usage\n{\n    die \"\nUsage: $whoami options\n  --top source-tree\n  --code code-subdir\n  --bin bindir ...\n  [--color [01]]\n  [--show-on-failure [01]]\n  [--tc \\\"../a/*.cc\\\" ...]\n\";\n}\n"
        },
        {
          "name": "spell-check",
          "type": "blob",
          "size": 0.677734375,
          "content": "#!/bin/sh\n\n# Use comments starting with cSpell:ignore to ignore certain words for\n# the entire file. For source files, you can put these anywhere. For\n# markdown files, to keep them out of the way, we keep them at the\n# bottom of the file in a list. See README-maintainer as an example.\n\n# Global exceptions should be added to cSpell.json. Keep the words in\n# that file sorted.\n\n# cspell can be installed with `npm install -g cspell`.\n\n# cspell does its own expansion of shell wildcards.\ncd $(dirname $0)\ncspell '**/*.hh' 'include/qpdf/*.h' '**/*.cc' \\\n       'manual/*.rst' 'manual/*.in' 'manual/_ext/*.py' \\\n       '**/CMakeLists.txt' 'README*.md' 'TODO*.md' \\\n       'README*.txt' ChangeLog\n"
        },
        {
          "name": "zlib-flate",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}