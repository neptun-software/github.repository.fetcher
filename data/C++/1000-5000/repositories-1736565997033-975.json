{
  "metadata": {
    "timestamp": 1736565997033,
    "page": 975,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/shaderc",
      "stars": 1882,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0771484375,
          "content": "---\n# Use Google code formatting rules.\nLanguage: Cpp\nBasedOnStyle: Google\n...\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3251953125,
          "content": "build/\nbuild-*/\nout/\n*.pyc\n*.swp\ncompile_commands.json\n.ycm_extra_conf.py\ncscope.*\nthird_party/abseil_cpp\nthird_party/effcee\nthird_party/glslang\nthird_party/googletest\nthird_party/re2\nthird_party/spirv-tools\nthird_party/spirv-headers\nthird_party/spirv-cross\nthird_party/tint\nandroid_test/libs\nandroid_test/include\n.DS_Store\n.vscode/\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.302734375,
          "content": "# This is the official list of shaderc authors for copyright purposes.\n# This file is distinct from the CONTRIBUTORS files.\n# See the latter for an explanation.\n\n# Names should be added to this file as:\n# Name or Organization <email address>\n# The email address is not required for organizations.\n\nGoogle Inc.\n"
        },
        {
          "name": "Android.mk",
          "type": "blob",
          "size": 2.740234375,
          "content": "# Copyright 2020 The Shaderc Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nROOT_SHADERC_PATH := $(call my-dir)\n\ninclude $(ROOT_SHADERC_PATH)/third_party/Android.mk\ninclude $(ROOT_SHADERC_PATH)/libshaderc_util/Android.mk\ninclude $(ROOT_SHADERC_PATH)/libshaderc/Android.mk\n\nALL_LIBS:=libglslang.a \\\n\tlibshaderc.a \\\n\tlibshaderc_util.a \\\n\tlibSPIRV.a \\\n\tlibSPIRV-Tools.a \\\n\tlibSPIRV-Tools-opt.a\n\nSHADERC_HEADERS=shaderc.hpp shaderc.h env.h status.h visibility.h\nSHADERC_HEADERS_IN_OUT_DIR=$(foreach H,$(SHADERC_HEADERS),$(NDK_APP_LIBS_OUT)/../include/shaderc/$(H))\n\ndefine gen_libshaderc_header\n$(call generate-file-dir,$(NDK_APP_LIBS_OUT)/../include/shaderc/$(1))\n$(NDK_APP_LIBS_OUT)/../include/shaderc/$(1) : \\\n\t\t$(ROOT_SHADERC_PATH)/libshaderc/include/shaderc/$(1)\n\t$(call host-cp,$(ROOT_SHADERC_PATH)/libshaderc/include/shaderc/$(1) \\\n\t\t,$(NDK_APP_LIBS_OUT)/../include/shaderc/$(1))\n\nendef\n# Generate headers\n$(eval $(foreach H,$(SHADERC_HEADERS),$(call gen_libshaderc_header,$(H))))\nlibshaderc_headers: $(SHADERC_HEADERS_IN_OUT_DIR)\n.PHONY: libshaderc_headers\n\n\n# Rules for combining library files to form a single libshader_combined.a.\n# It always goes into $(TARGET_OUT)\n$(call generate-file-dir,$(TARGET_OUT)/combine.ar)\n$(TARGET_OUT)/combine.ar: $(TARGET_OUT) $(addprefix $(TARGET_OUT)/, $(ALL_LIBS))\n\t$(file >$(TARGET_OUT)/combine.ar,create libshaderc_combined.a)\n\t$(foreach lib,$(ALL_LIBS),$(file >>$(TARGET_OUT)/combine.ar,addlib $(lib)))\n\t$(file >>$(TARGET_OUT)/combine.ar,save)\n\t$(file >>$(TARGET_OUT)/combine.ar,end)\n\n$(TARGET_OUT)/libshaderc_combined.a: $(addprefix $(TARGET_OUT)/, $(ALL_LIBS)) $(TARGET_OUT)/combine.ar\n\t@echo \"[$(TARGET_ARCH_ABI)] Combine: libshaderc_combined.a <= $(ALL_LIBS)\"\n\t@cd $(TARGET_OUT) && $(TARGET_AR) -M < combine.ar && cd $(ROOT_SHADERC_PATH)\n\t@$(TARGET_STRIP) --strip-debug $(TARGET_OUT)/libshaderc_combined.a\n\n$(call generate-file-dir,$(NDK_APP_LIBS_OUT)/$(APP_STL)/$(TARGET_ARCH_ABI)/libshaderc.a)\n$(NDK_APP_LIBS_OUT)/$(APP_STL)/$(TARGET_ARCH_ABI)/libshaderc.a: \\\n\t\t$(TARGET_OUT)/libshaderc_combined.a\n\t$(call host-cp,$(TARGET_OUT)/libshaderc_combined.a \\\n\t\t,$(NDK_APP_LIBS_OUT)/$(APP_STL)/$(TARGET_ARCH_ABI)/libshaderc.a)\n\nlibshaderc_combined: libshaderc_headers \\\n\t$(NDK_APP_LIBS_OUT)/$(APP_STL)/$(TARGET_ARCH_ABI)/libshaderc.a\n"
        },
        {
          "name": "BUILD.gn",
          "type": "blob",
          "size": 3.208984375,
          "content": "# Copyright 2018 The Shaderc Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport(\"//build_overrides/build.gni\")\nimport(\"//build_overrides/shaderc.gni\")\n\nglslang_dir = shaderc_glslang_dir\nspirv_tools_dir = shaderc_spirv_tools_dir\n\nconfig(\"shaderc_util_public\") {\n  include_dirs = [ \"libshaderc_util/include\" ]\n}\n\nsource_set(\"shaderc_util_sources\") {\n  sources = [\n    \"libshaderc_util/include/libshaderc_util/counting_includer.h\",\n    \"libshaderc_util/include/libshaderc_util/exceptions.h\",\n    \"libshaderc_util/include/libshaderc_util/file_finder.h\",\n    \"libshaderc_util/include/libshaderc_util/format.h\",\n    \"libshaderc_util/include/libshaderc_util/io_shaderc.h\",\n    \"libshaderc_util/include/libshaderc_util/message.h\",\n    \"libshaderc_util/include/libshaderc_util/mutex.h\",\n    \"libshaderc_util/include/libshaderc_util/resources.h\",\n    \"libshaderc_util/include/libshaderc_util/spirv_tools_wrapper.h\",\n    \"libshaderc_util/include/libshaderc_util/string_piece.h\",\n    \"libshaderc_util/include/libshaderc_util/universal_unistd.h\",\n    \"libshaderc_util/include/libshaderc_util/version_profile.h\",\n    \"libshaderc_util/src/compiler.cc\",\n    \"libshaderc_util/src/file_finder.cc\",\n    \"libshaderc_util/src/io_shaderc.cc\",\n    \"libshaderc_util/src/message.cc\",\n    \"libshaderc_util/src/resources.cc\",\n    \"libshaderc_util/src/shader_stage.cc\",\n    \"libshaderc_util/src/spirv_tools_wrapper.cc\",\n    \"libshaderc_util/src/version_profile.cc\",\n  ]\n\n  # Configure Glslang's interface to include HLSL-related entry points.\n  defines = [ \"ENABLE_HLSL=1\" ]\n\n  public_configs = [ \":shaderc_util_public\" ]\n\n  deps = [\n    \"${glslang_dir}:glslang_sources\",\n    \"${spirv_tools_dir}:spvtools\",\n  ]\n\n  if (build_with_chromium) {\n    configs -= [ \"//build/config/compiler:chromium_code\" ]\n    configs += [ \"//build/config/compiler:no_chromium_code\" ]\n  }\n}\n\nconfig(\"shaderc_public\") {\n  include_dirs = [ \"libshaderc/include\" ]\n  if (is_component_build) {\n    defines = [ \"SHADERC_SHAREDLIB\" ]\n  }\n}\n\ncomponent(\"libshaderc\") {\n  public_configs = [\n    \":shaderc_public\",\n    \":shaderc_util_public\",\n  ]\n\n  defines = [ \"SHADERC_IMPLEMENTATION\" ]\n\n  sources = [\n    \"libshaderc/include/shaderc/env.h\",\n    \"libshaderc/include/shaderc/shaderc.h\",\n    \"libshaderc/include/shaderc/shaderc.hpp\",\n    \"libshaderc/include/shaderc/status.h\",\n    \"libshaderc/include/shaderc/visibility.h\",\n    \"libshaderc/src/shaderc.cc\",\n    \"libshaderc/src/shaderc_private.h\",\n  ]\n\n  deps = [\n    \":shaderc_util_sources\",\n    \"${spirv_tools_dir}:spvtools\",\n    \"${spirv_tools_dir}:spvtools_val\",\n    \"${glslang_dir}:glslang_sources\",\n  ]\n\n  if (build_with_chromium) {\n    configs -= [ \"//build/config/compiler:chromium_code\" ]\n    configs += [ \"//build/config/compiler:no_chromium_code\" ]\n  }\n}\n"
        },
        {
          "name": "CHANGES",
          "type": "blob",
          "size": 15.2373046875,
          "content": "Revision history for Shaderc\n\nv2024.5-dev\n - Start development\n\nv2024.4\n - Support Vulkan 1.4\n\nv2024.3\n - Update dependencies: Glslang, SPRIV-Tools, SPIRV-Headers\n   - SPIRV-Tools is at v2024.4.rc1\n   - This incorporates a SPIRV-Tools fix which was limiting parallelism.\n     Validator friendly name generation was serializing on a mutex\n     protecting the locale object.\n - During HLSL compilation or any optimizing compile, don't tell the\n   validator to use \"friendly names\".  This should save time spent in the\n   initial validation step of the optimization recipe.\n - Adapt test golden results to Glslang changes which reorder\n   decorations by object enum value.\n - Fix ndk-build library dependencies: libshaderc_util depends on glslang\n - Use Python 3.12 on Linux CI bots\n - Fix Python 3.12 warnings for string escapes\n\nv2024.2\n - Update dependencies:\n     Glslang: top of tree 2024-06-21\n     SPIRV-Header: top of tree 2024-06-21\n     SPIRV-Tools: v2024.3.rc1\n - Build:\n    - Remove support for VS2017\n\nv2024.1\n - Update dependencies\n - Propagate test/install options to Glslang\n\nv2024.0\n - Update dependencies\n - Utilities:\n    - Use Python3 explicitly in utility scripts\n\nv2023.8 2024-01-03\n - API: Expose rlaxed Vulkan rules from glslang\n - Update to Glslang 14.0.0\n - CMake:\n   - Comply with CMP0148: Use PythonInterp\n   - Use TARGET_OBJECTS to simplify creating the shaderc_shared library.\n\nv2023.7 2023-10-12\n - Update dependencies\n - Finish converting build instructions and flags to always use C++17\n - Add GitHub CI to test more flows\n\nv2023.6 2023-08-09\n - Update dependencies, including SPIRV-Tools v2023.4.rc2\n\nv2023.5 2023-07-19\n - Update dependencies\n - Update to Android NDK r25c\n - Update Android API level for test project (#1333)\n - For testing, add a dependency on Abseil's C++ library\n - Fix MSVC runtime library linking in CMake (#1339)\n\nv2023.4 2023-05-24\n - Refresh Glslang, SPIRV-Tools, SPIRV-Headers\n - Android.mk:\n    - Require NDK 21d or later\n    - Update scripts for generating the shared library, which\n      should fix Windows\n - glslc and APIs:\n    - Add options to control mesh shading limits\n\nv2023.3 2023-03-17\n - Shaderc now requires C++17\n - Drop support for VS 2015\n - Add glslc option -fpreserve-bindings\n - Refresh Glslang, SPIRV-Tools\n\nv2023.2 2023-01-18\n - Update DEPS to pull in SPIRV-Tools bugfix #5049\n\nv2023.1 2023-01-13\n - General/Build\n   - Removed support for GCC-based code coverage builds\n   - Update minimum CMake to 3.17.2\n - Fix C++20 compatibility: explicitly construct string_piece when\n   comparing to `char*`\n\nv2022.4 2022-11-30\n - Update to Glslang 11\n - Update SPIRV-Tools, SPIRV-Headers dependencies\n - Add Cmake BUNDLE DESTINATION option for target install\n - The code coverage build is no longer being tested\n\nv2022.3 2022-10-12\n - #1264: Implement defaults for SPV_EXT_mesh_shader builtins\n - Update SPIRV-Tools to v2022.4\n\nv2022.2 2022-08-11\n - Require CMake 3.14 or later\n - Support 16bit types in HLSL, via glslc option -fhlsl-16bit-types\n   and associated library API methods. PR #1251\n - Update glslc tests for newer Glslang debug output\n - Update SPIRV-Tools v2022.3 plus one patch\n - Update SPIRV-Headers\n\nv2022.1 2022-02-03\n - Update DEPS to include two fixes on top of SPIRV-Tools v2022.1:\n    - Validator handles Nontemporal image operand\n    - Optimizer handles RayQueryKHR type\n\nv2022.0 2022-01-27\n - Update to Glslang 11.8.0\n\nv2021.4 2022-01-27\n - Support Vulkan 1.3\n - Support targeting SPIR-V 1.6, which is the default for Vulkan 1.3\n - Updated copyright check: Excludes Glslang generated files when\n   building in source tree\n - Fix Android.mk rules for building libshaderc_combined, to adapt to more\n   recent NDKs that have removed the GNU binutils.\n\nv2021.3 2021-11-11\n - Add build switch to disable copyright check\n - Update DEPS:\n    - SPIRV-Tools v2021.4\n    - SPIRV-Headers GitHub master 2021-11-11\n    - Glslang GitHub master 2021-11-11\n\nv2021.2 2021-08-25\n - README: Mention Common Lisp bindings (external)\n - Update DEPS:\n    - SPIRV-Tools v2021.3\n    - SPIRV-Headers master 2021-08-25\n    - Glslang GitHub master 2021-08-25\n\nv2021.1 2021-06-21\n - Disable --target-env=opengl_compat with an explicit error message\n   - It has been deprecated for a long time.\n\nv2021.0 2021-04-21\n - Refresh dependencies (in DEPS):\n   - SPIRV-Tools v2021.1\n   - SPIRV-Headers snapshot 2021-04-21\n   - Glslang 11.2.0, snapshot 2021-04-21\n - Fixes:\n   #1174: Windows Bazel support: rename internal headers io.* to io_shaderc.*\n\nv2020.5 2021-02-19\n - Refresh dependencies (in DEPS):\n   - SPIRV-Tools v2020.7 + 1 patch\n   - Glslang 11.1.0\n - Add option to skip building examples\n - Fixes:\n   #1153: Improve file+line parsing from Glslang messages\n\nv2020.4 2020-12-09\n - Removed svpc\n - Fixed issues with embedders getting duplicate symbols\n - Converted C-style casts to static_cast\n - Rolled ahead to fix/pickup Vulkan Raytracing support\n\nv2020.3 2020-09-02\n - General:\n   - Last release with spvc\n   - Cleaned up issues discovered by Infer\n - spvc:\n   - Added support for Dawn using deprecated Options constructor\n   - Adding support for the additional fixed sample mask in MSL\n\nv2020.2 2020-07-23\n - General:\n   - Remove VS2013 support\n   - Support both posix and non-posix MinGW toolchains\n   - Support optionally building Tint tooling for WGSL\n   - Add -h option to glslc, spvc; same as --help\n   - Add source file license checker\n   - BUILD.gn improvements\n\n - glslc, libshaderc:\n   - Update to Glslang generator 9\n   - Add interface to support 16bit types in HLSL\n   - Add glslc hidden experimental option -mfmt=wgsl; requires Tint\n\n - spvc:\n   - Add minimum buffer size for Dawn reflection\n\nv2020.1 2020-06-09\n This is the last version that officially supports VS2013.\n\n - General:\n   - Added warning signs about unsupported downloads (#1041)\n   - Added .NET bindings to README.md (#1060)\n   - Only add -fPIC if supported by the compiler. (#1061)\n\n - glslc, libshaderc:\n   - Removed Singleton pattern around access to glslang (#1059)\n\n - spvc:\n   - Added concept of comparison sampler to API (#1036)\n   - Added support for options.hlsl.nonwritable_uav_texture_as_srv (#1048)\n   - Support forcing storage buffers to be always declared as UAV. (#1076)\n\nv2020.0 2020-03-06\n - General:\n   - Getting spirv.hpp from SPIRV-Headers instead of not glslang (#992)\n   - Added clarification about status of artifacts in downloads.md (#1012)\n\n - glslc, libshaderc:\n   - Added support for new Glslang profile enum, EProfileCount (#973)\n   - Updated user documentation for -S in glslc (#978)\n   - Add documentation for Vulkan 1.2 and SPIR-V 1.5 (#980)\n   - Removed NV_EXTENSIONS conditionals (#1003)\n   - Added support for generating WebGPU SPIR-V to libshaderc (#1021)\n   - Rolled in all DEPS for provisional SPIR-V extensions for raytracing\n\n - spvc:\n   - Normalized API behaviour (#967)\n   - Added source_set target for libshaderc_spvc (#976)\n   - Added in support for spvc logging to the terminal (#981)\n   - Internal refactoring to reduce boiler plate in API implementations (#984)\n   - Added newline to logging messages to make them readable (#985)\n   - Added reflection support for Dawn:\n     - storage textures (#1001)\n     - storage texture format (#1005)\n     - texture dimension for storage textures (#1008)\n     - is storage texture declared as multisampled texture (#1011)\n   - Converted compile options to require explicit environments (#1019)\n   - Added knob to control force_zero_initialized_variables in SPIRV-Cross (#1028)\n\nv2019.1 2020-01-22\n - glslc, libshaderc:\n   - Add -fnan-clamp: Generate code for max and min builtins so that,\n     given a NaN operand, will return the other operand. Similarly, the\n     clamp builtin favours non-NaN operands, as if clamp was implemented\n     as the composition of max and min.\n   - Add -finvert-y\n   - Using SetBeforeHlslLegalization for more relaxed validation rules\n   - Added support for SPIR-V 1.5\n   - Add --emit-line-directive option\n   - Added support for Vulkan 1.2\n - spvc:\n   - Add many options:\n\t--flatten-multidimensional-arrays\n\t--es\n\t--no-es\n\t--glsl-emit-push-constant-as-ubo\n\t--msl-swizzle-texture-samples\n\t--msl-platform=ios|macos\n\t--msl-pad-fragment-output\n\t--msl-capture-output\n\t--msl-domain-lower-left\n\t--msl-argument-buffers\n\t--msl-discrete-descriptor-set=<number>\n\t--hlsl-enable-compat\n   - Reintroduce shaderc_spvc_compile_options_set_shader_model\n   - Added option to inject robust buffer access code\n   - Added support for emitting ToVulkan shaders\n   - Added spirv-opt based IR generation as alternative to built in spirv_cross IR gen\n   - Added API for specifying source and target execution environments\n   - Added option & reflection API methods neede by Dawn\n   - Substantial internal refactoring and code cleanup\n   - Large number of breaking changes to the API\n      -  Replaced shaderc_spvc_compile_options_set_shader_model with\n         shaderc_spvc_compile_options_set_hlsl_shader_model\n      - Compiler initialization and shader generation moved into seperate calls\n      - Seperated return codes from shaderc ones\n      - Many small API changes\n   - Improvements to testing\n      - Refactoring and clean up of run_spirv_cross_tests.py\n      - Seperation of expectations into known failures, known invalids, and cases\n        that need investigation\n      - Tweaks and fixes to substantially increase passing cases\n      - Added support for running tests using spvc IR generation\n   - Infrastructure\n   - Update DEPS with cross-verified commits from associated repos.\n   - Add utils/roll-deps\n - Infrastructure:\n   - Removed Appveyor artifacts link\n   - Improvements and clean up of DEPS rolling scripts\n   - Enabled warnings about implicit fallthrough\n   - Enabled improper semicolon warnings\n   - Restricted -fPIC to platforms that support it\n   - Converted remaining scripts to use Python 3\n   - Replaced nosetest with unittest\n   - Removed assumptions aabout location of spirv-tools, effcee, and RE2\n   - Migrated BUILD.gn spirv_cross dependency to local repo\n - Fixes:\n   - Fix duplicate install paths when using VisualStudio\n   - Fixed BUILD.gn for Chromium, Dawn & Fuchsia\n   - Explicitly enabled HLSL support in glslang\n   - Added installing necessary headers in Android.mk\n   - Removed unsupported Unicode characters\n   - Fixed detection of spirv-headers directory\n   #666: Update Docker file to use Python3\n\nv2019.0 2019-06-04\n - Add optional spvc, libshaderc_spvc as wrapper around SPIRV-Cross:\n   - Rejects bad modules by running the SPIR-V validator first\n   - Skips exception-heavy SPIRV-Cross SPIR-V parser\n - Support NV extensions for shader stages\n - Require SPIRV-Tools and SPIRV-Headers with SPIR-V 1.4 support\n Build support:\n - Use KhronosGroup/glslang instead of google/glslang\n - Stop running tests on VS 2013 (googletest no longer supports VS2013)\n - Require Python3 for building\n - Support Chromium's GN build system\n - Kokoro build fixes\n - Cmake build fixes: Only build subdirs if those targets are not yet defined\n - Use Android.mk from Glslang\n - Dockerfile gets re2 and effcee sources\n - Fixes for newer googletest\n - Add address sanitizer presubmit bot\n - Generate config files for pkg-config\n Spvc:\n - Add option to specify source environment.  Spvc will transform from source\n   to target environment if they are different.  This only works for WebGPU0\n   and Vulkan 1.1.\n Fixes:\n  #499: In HLSL compilation, relax layout and logical pointer validation rules\n   prior to running the legalization recipe.\n\nv2018.0 2018-10-01\n - Support -fhlsl_functionality1 (also -fhlsl-functionality1)\n - Support NVIDIA Turing extensions. Requires updated Glslang and SPIRV-Tools.\n - Use SPIR-V optimization and HLSL legalization recipes from SPIRV-Tools.\n   - Pass target environment into SPIRV-Tools code, e.g. from --target-env vulkan1.1\n - Add SONAME=1 property to shared library\n - Support GN build for Chromium\n Fixes:\n  #469: Add virtual dtor to classes with virtual functions.\n  #457: Fix writing SPIR-V binaries to standard output on Windows.\n\nv2017.2 2018-02-27\n - Add a shared library version of libshaderc\n - Support GLSL 4.6 and ESSL 3.2\n - Fail compilation if a resource does not have a binding.\n - Add options for automatically setting bindings for (uniform) resources that\n   don't have bindings set in shader source.\n - Add options for automatically setting locations for pipline inputs and outputs.\n - Add option for using HLSL IO mappings as expressed in source.\n - Add options for setting resource binding base numbers.\n - Add option to use HLSL resource register numbers for bindings.\n - HLSL compilation now defaults to HLSL packing rules.\n   (This change is inherited from Glslang commit 7cca140.)\n - HLSL compilation runs SPIR-V \"legalization\" transforms to reduce\n   manipulation of opaque handles (e.g. images), to satisfy Vulkan rules.\n - Adapt to Glslang generator version numbers:\n   - To 2: a fix for code generation for atomicCounterDecrement.\n   - To 3: change memory barrier semantics masks\n   - To 4: generate more access chains for swizzles\n - CMake install rules uses GNUInstallDirs.  For example, install to lib64\n   when that is the norm for the target system.\n\nv2017.1 2017-03-10\n - Add option to automatically assign bindings to uniform variables\n   that don't have an explicit 'binding' layout in the shader source.\n - Enable NVIDIA extensions by default in GLSL compilation\n - README mentions language bindings provided by 3rd parties.\n - README describes the known-good branch on GitHub\n - Fixed examples in shaderc.h; added C API use to examples/online-compile\n - Fixes issues:\n   #289: Don't output an object file when compilation fails.\n   #296: Enable use of the CMake in Android Studio.\n\nv2016.2 2016-12-13\n - Describe Shaderc's level of stability.\n - Support HLSL compilation, exposing functionality in Glslang.\n   - Supported in C, C++ API\n   - glslc accepts \"-x hlsl\", and assumes .hlsl files are HLSL.\n   - glslc accepts \"-fentry-point=<name>\" to set entry point name,\n     overriding default value \"main\".\n - Support setting shader resource limits in C, C++ APIs, and in\n   glslc\n   - glslc adds -flimit=<setting>\n   - glslc adds --show-limits to display defaults and valid resource\n     limit syntax.\n   - glslc adds \"-flimit-file <file>\" support to read Glslang resource\n     configuration files, i.e. the output of \"glslangValidator -c\".\n - Enable AMD extensions by default in GLSL compilation\n - Fixes issues:\n   #281: Work around Android build issue with abspath on Windows\n   #283: Increase default maxDrawBuffers to 4, to match Vulkan/GLES3.0\n\nv2016.1 2016-10-12\n - C API for assembling now takes an options object\n - Support compilation options to optimize for size.\n - Maintain compatibility with recent SPIRV-Tools and Glslang versions.\n - Update examples.\n - Build cleanups.\n - Fixes issues:\n   #238: Fix invocation of python scripts during build\n\nv2016.0 2016-07-07\n\n - Adds v<year>.<index> versioning, with \"-dev\" suffix to indicate work in\n   progress. The intent is to summarize and report functionalities more easily\n   for incorporating into downstream projects.\n\n - Summary of functionalities (See the README.md for more details):\n   - Provides libraries and command line tools for generating SPIR-V modules\n   - Supports GLSL source code or SPIR-V assembly as input\n   - Supports SPIR-V binary or assembly text as output\n   - Command line options follow GCC/Clang conventions\n   - Supports various semantics (OpenGL, OpenGL Compatible and Vulkan)\n   - Supports #include\n   - Supports user-defined macros\n   - Supports dependency information dumping\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 5.5771484375,
          "content": "# Copyright 2020 The Shaderc Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\ncmake_minimum_required(VERSION 3.22.1)\n\nproject(shaderc)\nenable_testing()\n\nif (\"${CMAKE_BUILD_TYPE}\" STREQUAL \"\")\n  message(STATUS \"No build type selected, default to Debug\")\n  set(CMAKE_BUILD_TYPE \"Debug\")\nendif()\n\nmessage(STATUS \"Shaderc: build type is \\\"${CMAKE_BUILD_TYPE}\\\".\")\n\noption(SHADERC_ENABLE_WGSL_OUTPUT \"Enable WGSL output\" OFF)\n\noption(SHADERC_SKIP_INSTALL \"Skip installation\" ${SHADERC_SKIP_INSTALL})\nif(NOT ${SHADERC_SKIP_INSTALL})\n  set(SHADERC_ENABLE_INSTALL ON)\nendif()\n\noption(SHADERC_SKIP_TESTS \"Skip building tests\" ${SHADERC_SKIP_TESTS})\nif(NOT ${SHADERC_SKIP_TESTS})\n  set(SHADERC_ENABLE_TESTS ON)\nendif()\nif(${SHADERC_ENABLE_TESTS})\n  message(STATUS \"Configuring Shaderc to build tests.\")\nelse()\n  message(STATUS \"Configuring Shaderc to avoid building tests.\")\nendif()\n\noption(SHADERC_SKIP_EXAMPLES \"Skip building examples\" ${SHADERC_SKIP_EXAMPLES})\nif(NOT ${SHADERC_SKIP_EXAMPLES})\n  set(SHADERC_ENABLE_EXAMPLES ON)\nendif()\nif(${SHADERC_ENABLE_EXAMPLES})\n  message(STATUS \"Configuring Shaderc to build examples.\")\nelse()\n  message(STATUS \"Configuring Shaderc to avoid building examples.\")\nendif()\n\noption(SHADERC_SKIP_COPYRIGHT_CHECK \"Skip copyright check\" ${SHADERC_SKIP_COPYRIGHT_CHECK})\nif(NOT ${SHADERC_SKIP_COPYRIGHT_CHECK})\n  set(SHADERC_ENABLE_COPYRIGHT_CHECK ON)\nendif()\nif(${SHADERC_ENABLE_COPYRIGHT_CHECK})\n  message(STATUS \"Configuring Shaderc to check copyrights.\")\nelse()\n  message(STATUS \"Configuring Shaderc to avoid checking copyrights.\")\nendif()\n\noption(SHADERC_ENABLE_WERROR_COMPILE \"Enable passing -Werror to compiler, if available\" ON)\n\nset (CMAKE_CXX_STANDARD 17)\n\ninclude(GNUInstallDirs)\ninclude(cmake/setup_build.cmake)\ninclude(cmake/utils.cmake)\ninclude(CheckCXXCompilerFlag)\n\nset(SPIRV_CROSS_EXCEPTIONS_TO_ASSERTIONS ${DISABLE_EXCEPTIONS} CACHE BOOL \"Coupling SPIRV-Cross exception conversion to DISABLE_EXCEPTIONS\" FORCE)\nif(DISABLE_EXCEPTIONS)\n  # Need to set additional values here, since some of the wrapped code occurs in\n  # .h/.hpp files, so maybe included outside of the library.\n add_definitions(-DSPIRV_CROSS_EXCEPTIONS_TO_ASSERTIONS)\nendif()\n\n# These flags are not supported on Windows and some older version of GCC\n# that our bots use.\n# Warning about implicit fallthrough in switch blocks\ncheck_cxx_compiler_flag(-Wimplicit-fallthrough COMPILER_SUPPORTS_FALLTHROUGH_WARNING)\nif (COMPILER_SUPPORTS_FALLTHROUGH_WARNING)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wimplicit-fallthrough\")\nendif()\n\n# Warning about extra semi-colons\ncheck_cxx_compiler_flag(-Wextra-semi COMPILER_SUPPORTS_EXTRA_SEMI_WARNING)\nif (COMPILER_SUPPORTS_EXTRA_SEMI_WARNING)\n    add_compile_options(\"-Wextra-semi\")\nendif()\n\nfind_package(Python COMPONENTS Interpreter REQUIRED)\n\nif (SHADERC_ENABLE_COPYRIGHT_CHECK)\n  add_custom_target(check-copyright ALL\n    ${Python_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/utils/add_copyright.py\n    --check\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n    COMMENT \"Check copyright\")\nendif()\n\nadd_custom_target(add-copyright\n  ${Python_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/utils/add_copyright.py\n  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n  COMMENT \"Add copyright\")\n\nif(MSVC)\n  option(SHADERC_ENABLE_SHARED_CRT\n          \"Use the shared CRT instead of the static CRT\"\n\t\t  OFF)\n  if (SHADERC_ENABLE_SHARED_CRT)\n    set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>DLL\")\n  else()\n    set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\n  endif()\nendif(MSVC)\n\n\n# Configure subdirectories.\n# We depend on these for later projects, so they should come first.\nadd_subdirectory(third_party)\n\nadd_subdirectory(libshaderc_util)\nadd_subdirectory(libshaderc)\nadd_subdirectory(glslc)\nif(${SHADERC_ENABLE_EXAMPLES})\n    add_subdirectory(examples)\nendif()\n\nadd_custom_target(build-version\n  ${Python_EXECUTABLE}\n  ${CMAKE_CURRENT_SOURCE_DIR}/utils/update_build_version.py\n  ${shaderc_SOURCE_DIR} ${spirv-tools_SOURCE_DIR} ${glslang_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR}/build-version.inc\n  COMMENT \"Update build-version.inc in the Shaderc build directory (if necessary).\")\n\nfunction(define_pkg_config_file NAME LIBS)\n  add_custom_target(${NAME}-pkg-config ALL\n    COMMAND ${CMAKE_COMMAND}\n      -DCHANGES_FILE=${CMAKE_CURRENT_SOURCE_DIR}/CHANGES\n      -DTEMPLATE_FILE=${CMAKE_CURRENT_SOURCE_DIR}/cmake/${NAME}.pc.in\n      -DOUT_FILE=${CMAKE_CURRENT_BINARY_DIR}/${NAME}.pc\n      -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}\n      -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}\n      -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}\n      -DLIBS=${LIBS}\n      -P ${CMAKE_CURRENT_SOURCE_DIR}/cmake/write_pkg_config.cmake\n  DEPENDS \"CHANGES\" \"cmake/${NAME}.pc.in\" \"cmake/write_pkg_config.cmake\")\n\n  if (SHADERC_ENABLE_INSTALL)\n    install(\n      FILES\n        ${CMAKE_CURRENT_BINARY_DIR}/${NAME}.pc\n      DESTINATION\n        ${CMAKE_INSTALL_LIBDIR}/pkgconfig)\n  endif()\nendfunction()\n\ndefine_pkg_config_file(shaderc -lshaderc_shared)\ndefine_pkg_config_file(shaderc_static \"-lshaderc ${EXTRA_STATIC_PKGCONFIG_LIBS} -lshaderc_util\")\ndefine_pkg_config_file(shaderc_combined -lshaderc_combined)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.3525390625,
          "content": "Want to contribute?  Great!  First, read this page (including the small print at\nthe end).  Then, have a look at [`DEVELOPMENT.howto.md`](DEVELOPMENT.howto.md),\nwhich contains useful info to guide you along the way.\n\n## Before you contribute\n\nBefore we can use your code, you must sign the\n[Google Individual Contributor License Agreement](https://developers.google.com/open-source/cla/individual?csw=1)\n(CLA), which you can do online. The CLA is necessary mainly because you own the\ncopyright to your changes, even after your contribution becomes part of our\ncodebase, so we need your permission to use and distribute your code. We also\nneed to be sure of various other things -- for instance that you'll tell us if\nyou know that your code infringes on other people's patents. You don't have to\nsign the CLA until after you've submitted your code for review and a member has\napproved it, but you must do it before we can put your code into our codebase.\n\nBefore you start working on a larger contribution, you should get in touch with\nus first through the issue tracker with your idea so that we can help out and\npossibly guide you. Coordinating up front makes it much easier to avoid\nfrustration later on.\n\n## The small print\n\nContributions made by corporations are covered by a different agreement than\nthe one above, the Software Grant and Corporate Contributor License Agreement.\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 0.861328125,
          "content": "# People who have agreed to one of the CLAs and can contribute patches.\n# The AUTHORS file lists the copyright holders; this file\n# lists people.  For example, Google employees are listed here\n# but not in AUTHORS, because Google holds the copyright.\n#\n# https://developers.google.com/open-source/cla/individual\n# https://developers.google.com/open-source/cla/corporate\n#\n# Names should be added to this file as:\n#     Name <email address>\n\nLei Zhang <antiagainst@google.com>\nDavid Neto <dneto@google.com>\nAndrew Woloszyn <awoloszyn@google.com>\nStefanus Du Toit <sdt@google.com>\nDejan Mircevski <deki@google.com>\nMark Adams <marka@nvidia.com>\nJason Ekstrand <jason.ekstrand@intel.com>\nDamien Mabin <dmabin@google.com>\nQining Lu <qining@google.com>\nJakob Vogel <JakobpunktVogel@gmail.com>\nDavid Yen <dyen@google.com>\nAdam Chainz <adam@adamj.eu>\nRobin Quint <robin.quint@outlook.com>\n"
        },
        {
          "name": "DEPS",
          "type": "blob",
          "size": 1.328125,
          "content": "use_relative_paths = True\n\nvars = {\n  'abseil_git':  'https://github.com/abseil',\n  'google_git':  'https://github.com/google',\n  'khronos_git': 'https://github.com/KhronosGroup',\n\n  'abseil_revision': '1315c900e1ddbb08a23e06eeb9a06450052ccb5e',\n  'effcee_revision': '08da24ec245a274fea3a128ba50068f163390565',\n  'glslang_revision': '340bf88f3fdb4f4a25b7071cd2c1205035fc6eaa',\n  'googletest_revision': '1d17ea141d2c11b8917d2c7d029f1c4e2b9769b2',\n  're2_revision': '4a8cee3dd3c3d81b6fe8b867811e193d5819df07',\n  'spirv_headers_revision': '3f17b2af6784bfa2c5aa5dbb8e0e74a607dd8b3b',\n  'spirv_tools_revision': '8f98634c4a2615e24888c77f425d13ef4893e8dc',\n}\n\ndeps = {\n  'third_party/abseil_cpp':\n      Var('abseil_git') + '/abseil-cpp.git@' + Var('abseil_revision'),\n\n  'third_party/effcee': Var('google_git') + '/effcee.git@' +\n      Var('effcee_revision'),\n\n  'third_party/googletest': Var('google_git') + '/googletest.git@' +\n      Var('googletest_revision'),\n\n  'third_party/glslang': Var('khronos_git') + '/glslang.git@' +\n      Var('glslang_revision'),\n\n  'third_party/re2': Var('google_git') + '/re2.git@' +\n      Var('re2_revision'),\n\n  'third_party/spirv-headers': Var('khronos_git') + '/SPIRV-Headers.git@' +\n      Var('spirv_headers_revision'),\n\n  'third_party/spirv-tools': Var('khronos_git') + '/SPIRV-Tools.git@' +\n      Var('spirv_tools_revision'),\n}\n"
        },
        {
          "name": "DEVELOPMENT.howto.md",
          "type": "blob",
          "size": 2.517578125,
          "content": "Thank you for considering Shaderc development!  Please make sure you review\n[`CONTRIBUTING.md`](CONTRIBUTING.md) for important preliminary info.\n\n## Building\n\nInstructions for first-time building can be found in [`README.md`](README.md).\nIncremental build after a source change can be done using `ninja` (or\n`cmake --build`) and `ctest` exactly as in the first-time procedure.\n\n## Code reviews\n\n(Terminology: we consider everyone with write access to our GitHub repo a\nproject _member_.)\n\nAll submissions, including submissions by project members, require review.  We\nuse GitHub pull requests to facilitate the review process.  A submission may be\naccepted by any project member (other than the submitter), who will then squash\nthe changes into a single commit and cherry-pick them into the repository.\n\nBefore accepting, there may be some review feedback prompting changes in the\nsubmission.  You should expect reviewers to strictly insist on the\n[commenting](https://google.github.io/styleguide/cppguide.html#Comments)\nguidelines -- in particular, every file, class, method, data member, and global\nwill require a comment.  Reviewers will also expect to see test coverage for\nevery code change.  _How much_ coverage will be a judgment call on a\ncase-by-case basis, balancing the required effort against the incremental\nbenefit.  Coverage will be expected.  As a matter of development philosophy,\nwe will strive to engineer the code to make writing tests easy.\n\n## Coding style\n\nFor our C++ files, we use the\n[Google C++ style guide](https://google.github.io/styleguide/cppguide.html).\n(Conveniently, the formatting rules it specifies can be achieved using\n`clang-format -style=google`.)\n\nFor our Python files, we use the\n[Google Python style guide](https://google.github.io/styleguide/pyguide.html).\n\n## Supported platforms\n\nWe expect Shaderc to always build and test successfully on the platforms listed\nbelow.  Please keep that in mind when offering contributions.  This list will\nlikely grow over time.\n\n| Platform | Build Status |\n|:--------:|:------------:|\n| Android (ARMv7)  | Not Automated |\n| Linux (x86_64)   | [![Linux Build Status](https://travis-ci.org/google/shaderc.svg)](https://travis-ci.org/google/shaderc \"Linux Build Status\") |\n| Mac OS X | [![Mac Build Status](https://travis-ci.org/google/shaderc.svg)](https://travis-ci.org/google/shaderc \"Mac Build Status\") |\n| Windows (x86_64) | [![Windows Build status](https://ci.appveyor.com/api/projects/status/g6c372blna7vnk1l?svg=true)](https://ci.appveyor.com/project/dneto0/shaderc \"Windows Build Status\") |\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.123046875,
          "content": "# Copyright 2016 The Shaderc Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM alpine\n\nMAINTAINER Google Shaderc Team\n\nRUN apk add --update \\\n    build-base \\\n    cmake \\\n    git \\\n    ninja \\\n    python3 \\\n    py-pip \\\n  && rm -rf /var/cache/apk/*\n\nWORKDIR /root\nRUN git clone https://github.com/google/shaderc\n\nWORKDIR shaderc\nRUN ./utils/git-sync-deps\n\nWORKDIR build\nRUN cmake -GNinja \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=/usr/local \\\n    .. \\\n  && ninja install\n\nWORKDIR /root\nRUN rm -rf shaderc\n\nRUN adduser -s /bin/sh -D shaderc\nUSER shaderc\n\nVOLUME /code\nWORKDIR /code\n\nCMD [\"/bin/sh\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.98046875,
          "content": "# Shaderc\n\nA collection of tools, libraries and tests for shader compilation.\nAt the moment it includes:\n\n- [`glslc`](glslc), a command line compiler for GLSL/HLSL to SPIR-V, and\n- [`libshaderc`](libshaderc), a library API for accessing `glslc` functionality.\n\n**Note:** The fact that that `libshaderc` is not named `libshaderc_glslc` is a\nquirk of history, and a known inconsistency. Changing it would require a\nsignificant amount of renaming and breaking of downstream projects, so it is\nbeing left as is.\n\n`glslc` wraps around core functionality in [glslang][khr-glslang]\nand [SPIRV-Tools][spirv-tools]. `glslc` and its library aims to\nto provide:\n* a command line compiler with GCC- and Clang-like usage, for better\n  integration with build systems\n* an API where functionality can be added without breaking existing clients\n* an API supporting standard concurrency patterns across multiple\n  operating systems\n* increased functionality such as file `#include` support\n\n## Downloads\n\n**Note: These binaries are just the artifacts of the builders and have not\n  undergone any QA, thus they should be considered unsupported.**\n\n<img alt=\"Linux\" src=\"kokoro/img/linux.png\" width=\"20px\" height=\"20px\" hspace=\"2px\"/>[![Linux Build Status](https://storage.googleapis.com/shaderc/badges/build_status_linux_clang_release.svg)](https://storage.googleapis.com/shaderc/badges/build_link_linux_clang_release.html)\n<img alt=\"MacOS\" src=\"kokoro/img/macos.png\" width=\"20px\" height=\"20px\" hspace=\"2px\"/>[![MacOS Build Status](https://storage.googleapis.com/shaderc/badges/build_status_macos_clang_release.svg)](https://storage.googleapis.com/shaderc/badges/build_link_macos_clang_release.html)\n<img alt=\"Windows\" src=\"kokoro/img/windows.png\" width=\"20px\" height=\"20px\" hspace=\"2px\"/>[![Windows Build Status](https://storage.googleapis.com/shaderc/badges/build_status_windows_vs2019_release.svg)](https://storage.googleapis.com/shaderc/badges/build_link_windows_vs2019_release.html)\n\n[More downloads](downloads.md)\n\n## Status\n\nShaderc has maintained backward compatibility for quite some time, and we\ndon't anticipate any breaking changes.\nOngoing enhancements are described in the [CHANGES](CHANGES) file.\n\nShaderc has been shipping in the\n[Android NDK](https://developer.android.com/ndk/index.html) since version r12b.\n(The NDK build uses sources from https://android.googlesource.com/platform/external/shaderc/.\nThose repos are downstream from GitHub.)\nWe currently require r25c.\n\nFor licensing terms, please see the [`LICENSE`](LICENSE) file.  If interested in\ncontributing to this project, please see [`CONTRIBUTING.md`](CONTRIBUTING.md).\n\nThis is not an official Google product (experimental or otherwise), it is just\ncode that happens to be owned by Google.  That may change if Shaderc gains\ncontributions from others.  See the [`CONTRIBUTING.md`](CONTRIBUTING.md) file\nfor more information. See also the [`AUTHORS`](AUTHORS) and\n[`CONTRIBUTORS`](CONTRIBUTORS) files.\n\n## File organization\n\n- `android_test/` : a small Android application to verify compilation\n- `cmake/`: CMake utility functions and configuration for Shaderc\n- `examples/`: Example programs\n- `glslc/`: an executable to compile GLSL to SPIR-V\n- `libshaderc/`: a library for compiling shader strings into SPIR-V\n- `libshaderc_util/`: a utility library used by multiple shaderc components\n- `third_party/`: third party open source packages; see below\n- `utils/`: utility scripts for Shaderc\n\nShaderc depends on glslang, the Khronos reference compiler for GLSL.\n\nShaderc depends on [SPIRV-Tools][spirv-tools] for assembling, disassembling,\nand transforming SPIR-V binaries.\n\nFor testing, Shaderc depends on:\n| Library | URL | Description |\n| -- | -- | -- |\n| Googletest | https://github.com/google/googletest | Testing framework |\n| Effcee | https://github.com/google/effcee | Stateful pattern matcher inspired by LLVM's FileCheck |\n| RE2 | https://github.com/google/re2 | Regular expression matcher |\n| Abseil | https://github.com/abseil/abseil-cpp | Common basic utilities in C++ |\n\nIn the following sections, `$SOURCE_DIR` is the directory you intend to clone\nShaderc into.\n\n## Getting and building Shaderc\n\n**If you only want prebuilt executables or libraries, see the\n[Downloads](#downloads) section.**\n\nThe rest of this section describes how to build Shaderc from sources.\n\nNote: Shaderc assumes Glslang supports HLSL compilation.  The instructions\nbelow assume you're building Glslang from sources, and in a subtree\nof `shaderc/third_party`.  In that scenario, Glslang's HLSL support\nis automatically enabled.  Shaderc also can be built using a Glslang\nfrom outside the `shaderc/third_party` tree.  In that case you must\nensure that that external Glslang is built with HLSL functionality.\nSee Glslang's `ENABLE_HLSL` CMake setting.)\n\n1) Check out the source code:\n\n```sh\ngit clone https://github.com/google/shaderc $SOURCE_DIR\ncd $SOURCE_DIR\n./utils/git-sync-deps\n```\n\n**Note:** The [known-good](https://github.com/google/shaderc/tree/known-good)\nbranch of the repository contains a\n[known_good.json](https://github.com/google/shaderc/blob/known-good/known_good.json)\nfile describing a set of repo URLs and specific commits that have been\ntested together.  This information is updated periodically, and typically\nmatches the latest update of these sources in the development branch\nof the Android NDK.\nThe `known-good` branch also contains a\n[update_shaderc.py](https://github.com/google/shaderc/blob/known-good/update_shaderc_sources.py)\nscript that will read the JSON file and checkout those specific commits for you.\n\n2) Ensure you have the requisite tools -- see the tools subsection below.\n\n3) Decide where to place the build output. In the following steps, we'll call it\n   `$BUILD_DIR`. Any new directory should work. We recommend building outside\n   the source tree, but it is also common to build in a (new) subdirectory of\n   `$SOURCE_DIR`, such as `$SOURCE_DIR/build`.\n\n4a) Build (and test) with Ninja on Linux or Windows:\n\n```sh\ncd $BUILD_DIR\ncmake -GNinja -DCMAKE_BUILD_TYPE={Debug|Release|RelWithDebInfo} $SOURCE_DIR\nninja\nctest # optional\n```\n\n4b) Or build (and test) with MSVC on Windows:\n\n```sh\ncd $BUILD_DIR\ncmake $SOURCE_DIR\ncmake --build . --config {Release|Debug|MinSizeRel|RelWithDebInfo}\nctest -C {Release|Debug|MinSizeRel|RelWithDebInfo}\n```\n\n4c) Or build with MinGW on Linux for Windows:\n\n```sh\ncd $BUILD_DIR\ncmake -GNinja -DCMAKE_BUILD_TYPE={Debug|Release|RelWithDebInfo} $SOURCE_DIR \\\n   -DCMAKE_TOOLCHAIN_FILE=$SOURCE_DIR/cmake/linux-mingw-toolchain.cmake\nninja\n```\n\nAfter a successful build, you should have a `glslc` executable somewhere under\nthe `$BUILD_DIR/glslc/` directory, as well as a `libshaderc` library somewhere\nunder the `$BUILD_DIR/libshaderc/` directory.\n\nThe default behavior on MSVC is to link with the static CRT. If you would like\nto change this behavior `-DSHADERC_ENABLE_SHARED_CRT` may be passed on the\ncmake configure line.\n\nSee [the libshaderc README](libshaderc/README.md) for more on using the library\nAPI in your project.\n\n### Tools you'll need\n\nFor building, testing, and profiling Shaderc, the following tools should be\ninstalled regardless of your OS:\n\n- A C++17 compiler. Recent versions of Clang, GCC, and MSVC work.\n- [CMake](http://www.cmake.org/) 3.14 or later: for generating compilation targets.\n    - Shaderc is tested with cmake 3.17.2\n- [Python 3](http://www.python.org/): for utility scripts and running the test suite.\n\nOn Linux, if cross compiling to Windows:\n- [`mingw`](http://www.mingw.org): A GCC-based cross compiler targeting Windows\n    so that generated executables use the Microsoft C runtime libraries.\n    The MinGW compiler must support C++17.\n\nOn Windows, the following tools should be installed and available on your path:\n\n- Visual Studio 2019 or later. Previous versions of Visual Studio may work but\n  are untested and unsupported.\n- Git - including the associated tools, Bash, `diff`.\n\nOptionally, the following tools may be installed on any OS:\n\n - [`asciidoctor`](http://asciidoctor.org/): for generating documentation.\n   - [`pygments.rb`](https://rubygems.org/gems/pygments.rb) required by\n     `asciidoctor` for syntax highlighting.\n\n### Building and running Shaderc using Docker\n\nPlease make sure you have the Docker engine\n[installed](https://docs.docker.com/engine/installation/) on your machine.\n\nTo create a Docker image containing Shaderc command line tools, issue the\nfollowing command in `${SOURCE_DIR}`: `docker build -t <IMAGE-NAME> .`.\nThe created image will have all the command line tools installed at\n`/usr/local` internally, and a data volume mounted at `/code`.\n\nAssume `<IMAGE-NAME>` is `shaderc/shaderc` from now on.\n\nTo invoke a tool from the above created image in a Docker container:\n\n```bash\ndocker run shaderc/shaderc glslc --version\n```\n\nAlternatively, you can mount a host directory (e.g., `example`) containing\nthe shaders you want to manipulate and run different kinds of tools via\nan interactive shell in the container:\n\n```bash\n$ docker run -i -t -v `pwd`/example:/code shaderc/shaderc\n/code $ ls\ntest.vert\n/code $ glslc -c -o - test.vert | spirv-dis\n```\n\n## Bug tracking\n\nWe track bugs using GitHub -- click on the \"Issues\" button on\n[the project's GitHub page](https://github.com/google/shaderc).\n\n## Bindings\n\nBindings are maintained by third parties, may contain content\noffered under a different license, and may reference or contain\nolder versions of Shaderc and its dependencies.\n\n* **Python:** [pyshaderc][pyshaderc]\n* **Rust:** [shaderc-rs][shaderc-rs]\n* **Go:** [gshaderc][gshaderc]\n* **.NET:** [shaderc.net][shadercdotnet]\n* **Common Lisp:** [shadercl][shaderccommonlisp]\n\n[khr-glslang]: https://github.com/KhronosGroup/glslang\n[spirv-tools]: https://github.com/KhronosGroup/SPIRV-Tools\n[spirv-cross]: https://github.com/KhronosGroup/SPIRV-Cross\n[pyshaderc]: https://github.com/realitix/pyshaderc\n[shaderc-rs]: https://github.com/google/shaderc-rs\n[appveyor]: https://ci.appveyor.com/project/dneto0/shaderc\n[dawn]: https://dawn.googlesource.com/dawn\n[gshaderc]: https://github.com/celer/gshaderc\n[shadercdotnet]: https://github.com/jpbruyere/shaderc.net\n[shaderccommonlisp]: https://github.com/JolifantoBambla/shadercl\n"
        },
        {
          "name": "android_test",
          "type": "tree",
          "content": null
        },
        {
          "name": "build_overrides",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "downloads.md",
          "type": "blob",
          "size": 1.033203125,
          "content": "# Downloads\nDownload the latest builds.\n\n**Note: These binaries are just the artifacts of the builders and have not\n  undergone any QA, thus they should be considered unsupported.**\n\n## Release\n| Windows | Linux | MacOS |\n| --- | --- | --- |\n| [MSVC 2019](https://storage.googleapis.com/shaderc/badges/build_link_windows_vs2019_release.html) | [clang](https://storage.googleapis.com/shaderc/badges/build_link_linux_clang_release.html) | [clang](https://storage.googleapis.com/shaderc/badges/build_link_macos_clang_release.html) |\n| | [gcc](https://storage.googleapis.com/shaderc/badges/build_link_linux_gcc_release.html) | |\n\n## Debug\n| Windows | Linux | MacOS |\n| --- | --- | --- |\n| [MSVC 2019](https://storage.googleapis.com/shaderc/badges/build_link_windows_vs2019_debug.html) | [clang](https://storage.googleapis.com/shaderc/badges/build_link_linux_clang_debug.html) | [clang](https://storage.googleapis.com/shaderc/badges/build_link_macos_clang_debug.html) |\n| | [gcc](https://storage.googleapis.com/shaderc/badges/build_link_linux_gcc_debug.html) | |\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "glslc",
          "type": "tree",
          "content": null
        },
        {
          "name": "kokoro",
          "type": "tree",
          "content": null
        },
        {
          "name": "libshaderc",
          "type": "tree",
          "content": null
        },
        {
          "name": "libshaderc_util",
          "type": "tree",
          "content": null
        },
        {
          "name": "license-checker.cfg",
          "type": "blob",
          "size": 0.8515625,
          "content": "[\n    {\n        \"licenses\": [ \"Apache-2.0\" ],\n        \"paths\": [\n            {\n                \"exclude\": [\n                    \"**.md\",\n                    \"**.png\",\n                    \"**/README.asciidoc\",\n\n                    \".*\",\n                    \"AUTHORS\",\n                    \"CHANGES\",\n                    \"CONTRIBUTORS\",\n                    \"DEPS\",\n                    \"LICENSE\",\n\n                    \"cmake/*.pc.in\",\n                    \"libshaderc_util/testdata/dir/subdir/include_file.2\",\n                    \"libshaderc_util/testdata/include_file.1\",\n\n                    \"utils/git-sync-deps\",\n\n                    \"third_party/**\"\n                ]\n            }\n        ]\n    },\n    {\n        \"licenses\": [ \"BSD-3-Clause\" ],\n        \"paths\": [\n            { \"exclude\": [ \"**\" ] },\n            { \"include\": [ \"utils/git-sync-deps\" ] }\n        ]\n    }\n]\n"
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}