{
  "metadata": {
    "timestamp": 1736565752840,
    "page": 675,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/zetasql",
      "stars": 2344,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bazelignore",
          "type": "blob",
          "size": 0.0087890625,
          "content": "examples\n"
        },
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 2.8623046875,
          "content": "#\n# Copyright 2019 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n# ZetaSQL requires c++17 support to match internal Google development\n# environments.\n# This is a special snowflake setting that bazel requires special handling for.\n\n# By default, we don't suppress any warnings, to get clang-specific warning\n# suppression you can invoke with --config=clang\nbuild:clang --action_env=BAZEL_CXXOPTS=\"-std=c++17\"\nbuild:clang --cxxopt=-std=c++17\nbuild:clang --cxxopt=-Wno-module-import-in-extern-c\nbuild:clang --cxxopt=-Wno-deprecated-declarations\nbuild:clang --cxxopt=-Wno-range-loop-analysis\nbuild:clang --cxxopt=-Wno-inconsistent-missing-override\nbuild:clang --cxxopt=-Wno-char-subscripts\nbuild:clang --cxxopt=-Wno-enum-compare-switch\nbuild:clang --cxxopt=-Wno-deprecated-declarations\nbuild:clang --cxxopt=-Wno-defaulted-function-deleted\nbuild:clang --cxxopt=-Wno-unused-private-field\nbuild:clang --cxxopt=-Wno-return-std-move\nbuild:clang --cxxopt=-Wno-reorder-ctor\nbuild:clang --cxxopt=-Wno-unused-const-variable\nbuild:clang --cxxopt=-Wno-unused-function\nbuild:clang --cxxopt=-Wno-macro-redefined\n# By default, we don't suppress any warnings, to get g++-specific warning\n# suppression you can invoke with --config=g++\nbuild:g++ --action_env=BAZEL_CXXOPTS=\"-std=c++17\"\nbuild:g++ --cxxopt=-std=c++17\nbuild:g++ --cxxopt=-Wno-sign-compare\nbuild:g++ --cxxopt=-Wno-switch\nbuild:g++ --cxxopt=-Wno-unused-function\nbuild:g++ --cxxopt=-Wno-unused-but-set-parameter\nbuild:g++ --cxxopt=-Wno-unused-but-set-variable\nbuild:g++ --cxxopt=-Wno-char-subscripts\nbuild:g++ --cxxopt=-Wno-nonnull-compare\nbuild:g++ --cxxopt=-Wno-return-type\nbuild:g++ --cxxopt=-Wno-class-memaccess\nbuild:g++ --cxxopt=-Wno-deprecated-declarations\n# For string_fortified\nbuild:g++ --cxxopt=-Wno-stringop-truncation\n\n# C++17 is required to build ZetaSQL, hence `-cxxopt=-std=c++17`. On MacOS\n# `--host_cxxopt=-std=c++17` is also needed.\n# \"--enable_bzlmod=false\" is required because grpc does not support bzlmod yet.\n# \"--java_runtime_version=remotejdk_11\": to make the build more hermetic.\nbuild --cxxopt=-std=c++17 --host_cxxopt=-std=c++17 --config=clang --enable_bzlmod=false --java_runtime_version=remotejdk_11\nrun --cxxopt=-std=c++17 --host_cxxopt=-std=c++17 --config=clang --enable_bzlmod=false --java_runtime_version=remotejdk_11\ntest --cxxopt=-std=c++17 --host_cxxopt=-std=c++17 --config=clang --enable_bzlmod=false --java_runtime_version=remotejdk_11\n"
        },
        {
          "name": ".bazelversion",
          "type": "blob",
          "size": 0.005859375,
          "content": "7.2.1\n"
        },
        {
          "name": "BUILD",
          "type": "blob",
          "size": 0.7021484375,
          "content": "#\n# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n\"\"\" Additional bazel imports for zetasql \"\"\"\n\nlicenses([\"notice\"])  # Apache 2.0\n\nexports_files([\n    \"LICENSE\",\n    \"zetasql_deps.bzl\",\n])\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.8974609375,
          "content": "# How to Contribute\n\nWe are not currently accepting external code contributions to this project.\nPlease feel free to file bugs and feature requests using\n[GitHub's issue tracker](https://github.com/google/zetasql/issues/new).\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution,\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted\none (even if it was for a different project), you probably don't need to do it\nagain.\n\n## Community Guidelines\n\nThis project follows\n[Google's Open Source Community Guidelines](https://opensource.google.com/conduct/).\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 2.5283203125,
          "content": "################################################################################\n#                                     BUILD                                    #\n################################################################################\n\nFROM ubuntu:18.04 as build\n\n# Setup java\nRUN apt-get update && apt-get -qq install -y default-jre default-jdk\n\n# Install prerequisites for bazel\nRUN apt-get -qq install curl tar build-essential wget python python3 zip unzip\n\nENV BAZEL_VERSION=7.2.1\n\nRUN apt install apt-transport-https curl gnupg -y\nRUN curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor >bazel-archive-keyring.gpg\nRUN mv bazel-archive-keyring.gpg /usr/share/keyrings\nRUN echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/bazel-archive-keyring.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8\" | tee /etc/apt/sources.list.d/bazel.list\n\nRUN apt update && apt -qq install -y bazel-${BAZEL_VERSION}\nRUN ln -s /usr/bin/bazel-${BAZEL_VERSION} /usr/bin/bazel\n\nRUN apt-get update && DEBIAN_FRONTEND=\"noninteractive\"                         \\\n    TZ=\"America/Los_Angeles\" apt-get install -y tzdata\n\n# Unfortunately ZetaSQL has issues with clang (default bazel compiler), so\n# we install GCC. Also install make for rules_foreign_cc bazel rules.\nRUN apt-get -qq install -y software-properties-common make rename  git ca-certificates libgnutls30\nRUN apt-get -qq install -y software-properties-common\nRUN add-apt-repository ppa:ubuntu-toolchain-r/test                          && \\\n    apt-get -qq update                                                      && \\\n    apt-get -qq install -y gcc-11 g++-11 make rename  git                   && \\\n    apt-get -qq install -y ca-certificates libgnutls30                      && \\\n    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 90          \\\n                        --slave   /usr/bin/g++ g++ /usr/bin/g++-11          && \\\n    update-alternatives --set gcc /usr/bin/gcc-11\n\n\n# To support fileNames with non-ascii characters\nRUN apt-get -qq install locales && locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\n\nCOPY . /zetasql\n\n# Create a new user zetasql to avoid running as root.\nRUN useradd -ms /bin/bash zetasql\nRUN chown -R zetasql:zetasql /zetasql\nUSER zetasql\n\nENV HOME=/home/zetasql\nRUN mkdir -p $HOME/bin\n\n# Supported MODE:\n# - `build` (default): Builds all ZetaSQL targets.\n# - `execute_query`: Installs the `execute_query` tool only. Erases all other\n#                    build artifacts.\nARG MODE=build\n\nRUN cd zetasql && ./docker_build.sh $MODE\n\nENV PATH=$PATH:$HOME/bin\n\nWORKDIR /zetasql\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "PULL_REQUEST_TEMPLATE.md",
          "type": "blob",
          "size": 0.224609375,
          "content": "We are not currently accepting external code contributions to this project.\nPlease feel free to file bugs and feature requests using GitHub's issue tracker.\n\nAlso see: https://github.com/google/zetasql/blob/master/CONTRIBUTING.md\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.859375,
          "content": "## ZetaSQL - Analyzer Framework for SQL\n\nZetaSQL defines a SQL language (grammar, types, data model, semantics, and\nfunction library) and\nimplements parsing and analysis for that language as a reusable component.\nZetaSQL is not itself a database or query engine. Instead,\nit's intended to be used by multiple engines, to provide consistent\nlanguage and behavior (name resolution, type checking, implicit\ncasting, etc.). Specific query engines may implement a subset of features,\ngiving errors for unsupported features.\nZetaSQL's compliance test suite can be used to validate query engine\nimplementations are correct and consistent.\n\nZetaSQL implements the GoogleSQL language, which is used across several of\nGoogle's SQL products, both publicly and internally, including BigQuery,\nSpanner, F1, BigTable, Dremel, Procella, and others.\n\nGoogleSQL and ZetaSQL have been described in these publications:\n\n* (CDMS 2022) [GoogleSQL: A SQL Language as a Component](https://cdmsworkshop.github.io/2022/Slides/Fri_C2.5_DavidWilhite.pptx) (Slides)\n* (SIGMOD 2017) [Spanner: Becoming a SQL System](https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/46103.pdf) -- See section 6.\n* (VLDB 2024) [SQL Has Problems. We Can Fix Them: Pipe Syntax in SQL](https://research.google/pubs/pub1005959/) -- Describes GoogleSQL's new pipe query syntax.\n\nSome other documentation:\n\n* [ZetaSQL Language Reference](docs/README.md)\n* [ZetaSQL Resolved AST](docs/resolved_ast.md), documenting the intermediate representation produced by the ZetaSQL analyzer.\n* [ZetaSQL Toolkit](https://github.com/GoogleCloudPlatform/zetasql-toolkit), a project using ZetaSQL to analyze and understand queries against BigQuery, and other ZetaSQL engines.\n* Pipe query syntax\n    * See the [reference documentation](https://github.com/google/zetasql/blob/master/docs/pipe-syntax.md) and [research paper](https://research.google/pubs/pub1005959/).\n    * See some [example scripts](zetasql/examples/pipe_queries) and [TPC-H queries](zetasql/examples/tpch).\n\n## Project Overview\n\nThe main components and APIs are in these directories under `zetasql/`:\n\n* `zetasql/public`: Most public APIs are here.\n* `zetasql/resolved_ast`: Defines the [Resolved AST](docs/resolved_ast.md), which the analyzer produces.\n* `zetasql/parser`: The grammar and parser implementation. (Semi-public, since the parse trees are not a stable API.)\n* `zetasql/analyzer`: The internal implementation of query analysis.\n* `zetasql/reference_impl`: The reference implementation for executing queries.\n* `zetasql/compliance`: Compliance test framework and compliance tests.\n* `zetasql/public/functions`: Function implementations for engines to use.\n* `zetasql/tools/execute_query`: Interactive query execution for debugging.\n* `zetasql/java/com/google/zetasql`: Java APIs, implemented by calling a local RPC server.\n\nMultiplatform support is planned for the following platforms:\n\n - Linux (Ubuntu 20.04 is our reference platform, but others may work).\n   - gcc-9+ is required, recent versions of clang may work.\n - MacOS (Experimental)\n\nWe do not provide any guarantees of API stability and *cannot accept\ncontributions*.\n\n## Running Queries with `execute_query`\n\nThe `execute_query` tool can parse, analyze and run SQL\nqueries using the reference implementation.\n\nSee [Execute Query](execute_query.md) for more details on using the tool.\n\nYou can run it using binaries from\n[Releases](https://github.com/google/zetasql/releases), or build it using the\ninstructions below.\n\nThere are some runnable example queries in\n[`zetasql/examples/tpch`](zetasql/examples/tpch) and\n[`zetasql/examples/pipe_queries`](zetasql/examples/pipe_queries).\n\n### Getting and Running `execute_query`\n#### Pre-built Binaries\n\nZetaSQL provides pre-built binaries for `execute_query` for Linux and MacOS on\nthe [Releases](https://github.com/google/zetasql/releases) page. You can run\nthe downloaded binary like:\n\n```bash\nchmod +x execute_query_linux\n./execute_query_linux --web\n```\n\nMacOS users may see the error `execute_query_macos cannot be opened because the developer cannot be verified.`.\nYou can right click the `execute_query_macos` file, click \"open\", and then you\nshould be able to run the binary.\n\nNote the prebuilt binaries require GCC-9+ and tzdata. If you run into dependency\nissues or if the binary is incompatible with your platform, you can try running\n`execute_query` with Docker. See the [Run with Docker](#run-with-docker)\nsection.\n\n#### Running from a Bazel Build\n\nYou can build `execute_query` with Bazel from source and run it by:\n\n```bash\nbazel run zetasql/tools/execute_query:execute_query -- --web\n```\n\n#### Run with Docker\n\nYou can run `execute_query` using Docker. Download the pre-built Docker image\nfile `zetasql_docker.tar.gz` from the\n[Releases](https://github.com/google/zetasql/releases) page, and load the image\nusing:\n\n```bash\nsudo docker load -i /path/to/the/downloaded/zetasql_docker.tar.gz\n```\n\nThe Docker image name is `zetasql`. (You can also build a Docker image locally\nusing the instructions in the [Build with Docker](#build-with-docker) section.)\n\nYou can then run `execute_query` using:\n\n```bash\nsudo docker run --init -it -h=$(hostname) -p 8080:8080 zetasql execute_query --web\n```\n\nIf you are using MacOS with an Apple M1/M2 chip, add the additional argument\n`--platform=linux/amd64`:\n\n```bash\nsudo docker run --init -it -h=$(hostname) -p 8080:8080 --platform linux/amd64 zetasql execute_query --web\n```\n\nArgument descriptions:\n\n* `--init`: Allows `execute_query` to handle signals properly.\n* `-it`: Runs the container in interactive mode.\n* `-h=$(hostname)`: Makes the hostname of the container the same as that of the\n                    host.\n* `-p 8080:8080`: Sets up port forwarding.\n* `zetasql`: The docker image name.\n\n`-h=$(hostname)` and `-p 8080:8080` together make the URL address of the\nweb server accessible from the host machine.\n\nAlternatively, you can run this to start a bash shell, and then run\n`execute_query` inside:\n\n```bash\nsudo docker run --init -it -h=$(hostname) -p 8080:8080 my-zetasql-image\n\n# Inside the container bash shell\nexecute_query --web\n```\n\n## How to Build\n\n### Build with Bazel\n\nZetaSQL uses [Bazel](https://bazel.build) for building and dependency\nresolution. Instructions for installing Bazel can be found in\nhttps://bazel.build/install. The Bazel version that ZetaSQL uses is specified in\nthe `.bazelversion` file.\n\nBesides Bazel, the following dependencies are also needed:\n\n* GCC-9+ or equivalent Clang\n* tzdata\n\n`tzdata` provides the support for time zone information. It is generally\navailable on MacOS. If you run Linux and it is not pre-installed, you can\ninstall it with `apt-get install tzdata`.\n\nOnce the dependencies are installed, you can build or run ZetaSQL targets as\nneeded, for example:\n\n```bash\n# Build everything.\nbazel build ...\n\n# Build and run the execute_query tool.\nbazel run //zetasql/tools/execute_query:execute_query -- --web\n\n# The built binary can be found under bazel-bin and run directly.\nbazel-bin/zetasql/tools/execute_query/execute_query --web\n\n# Build and run a test.\nbazel test //zetasql/parser:parser_set_test\n```\n\nSome Mac users may experience build issues due to the Python error\n`ModuleNotFoundError: no module named 'google.protobuf'`. To resolve it, run\n`pip install protobuf==<version>` to install python protobuf. The protobuf\nversion can be found in the `zetasql_deps_step_2.bzl` file.\n\n### Build with Docker\n\nZetaSQL also provides a `Dockerfile` which configures all the dependencies so\nthat users can build ZetaSQL more easily across different platforms.\n\nTo build the Docker image locally (called `my-zetasql-image` here), run:\n\n```bash\nsudo docker build . -t my-zetasql-image -f Dockerfile\n```\n\nAlternatively, ZetaSQL provides pre-built Docker images named `zetasql`. See the\n[Releases](https://github.com/google/zetasql/releases) page. You can load the\ndownloaded image by:\n\n```bash\nsudo docker load -i /path/to/the/downloaded/zetasql_docker.tar.gz\n```\n\nTo run builds or other commands inside the Docker environment, run this command\nto open a bash shell inside the container:\n\n```bash\n# Start a bash shell running inside the Docker container.\nsudo docker run -it my-zetasql-image\n```\n\nReplace `my-zetasql-image` with `zetasql` if you use the pre-built Docker image.\n\nThen you can run the commands from the [Build with Bazel](#build-with-bazel)\nsection above.\n\n\n## Differential Privacy\nFor questions, documentation, and examples of ZetaSQL's implementation of\nDifferential Privacy, please check out\n(https://github.com/google/differential-privacy).\n\n## Versions\n\nZetaSQL makes no guarantees regarding compatibility between releases.\nBreaking changes may be made at any time. Our releases are numbered based\non the date of the commit the release is cut from. The number format is\nYYYY.MM.n, where YYYY is the year, MM is the two digit month, and n is a\nsequence number within the time period.\n\n## License\n\n[Apache License 2.0](LICENSE)\n\n## Support Disclaimer\nThis is not an officially supported Google product.\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 3.634765625,
          "content": "#\n# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n\"\"\" Workspace for Open Source ZetaSQL library \"\"\"\n\nworkspace(name = \"com_google_zetasql\")\n\n# Bazel doesn't support recursively loading dependencies.\n# The recommended pattern is for a repo to provide a 'my_repo_deps()' method\n# which will download all dependencies. Thus, a _direct dependency of 'my_repo'\n# can ask it to load it dependencies. However, if 'my_repo' has dependencies\n# which themselves have dependencies, and provide a 'child_repo_deps()',\n# there is no way to compose a workspace such that 'my_repo_deps' calls\n# 'child_repo_deps' (since this would represent a serialization of\n# load-then-statement, which is forbidden).  So, we take the tactic of providing\n# a serialized sequence of numbered steps that must be invoked in series to\n# load all dependencies.  Copy the following code exactly into your WORKSPACE\n# to fully download all dependencies. The exact nature of what happens at\n# each step may change over time (and additional steps may be added in the\n# future).\n\n# Skip to step_1 if you don't require java support. If you _only_ need\n# java support, you still must include all steps.\n\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\nhttp_archive(\n    name = \"toolchains_llvm\",\n    canonical_id = \"1.0.0\",\n    sha256 = \"e91c4361f99011a54814e1afbe5c436e0d329871146a3cd58c23a2b4afb50737\",\n    strip_prefix = \"toolchains_llvm-1.0.0\",\n    url = \"https://github.com/bazel-contrib/toolchains_llvm/releases/download/1.0.0/toolchains_llvm-1.0.0.tar.gz\",\n)\n\nhttp_archive(\n    name = \"rules_jvm_external\",\n    sha256 = \"b17d7388feb9bfa7f2fa09031b32707df529f26c91ab9e5d909eb1676badd9a6\",\n    strip_prefix = \"rules_jvm_external-4.5\",\n    urls = [\"https://github.com/bazelbuild/rules_jvm_external/archive/4.5.zip\"],\n)\n\n# gRPC Java\nhttp_archive(\n    name = \"io_grpc_grpc_java\",\n    sha256 = \"301e0de87c7659cc790bd2a7265970a71632d55773128c98768385091c0a1a97\",\n    strip_prefix = \"grpc-java-1.61.0\",\n    url = \"https://github.com/grpc/grpc-java/archive/v1.61.0.zip\",\n)\n\nload(\"@rules_jvm_external//:repositories.bzl\", \"rules_jvm_external_deps\")\n\nrules_jvm_external_deps()\n\nload(\"@rules_jvm_external//:setup.bzl\", \"rules_jvm_external_setup\")\n\nrules_jvm_external_setup()\n\nload(\"@com_google_zetasql//bazel:zetasql_java_deps.bzl\", \"zetasql_java_deps\")\nzetasql_java_deps()\n\nload(\"@maven//:defs.bzl\", \"pinned_maven_install\")\npinned_maven_install()\n\n# Creates an alias of the form @com_foo_bar//jar for each\n# @maven//:com_foo_bar\nload(\"@maven//:compat.bzl\", \"compat_repositories\")\ncompat_repositories()\n\n# If java support is not required, copy starting from here\nload(\"@com_google_zetasql//bazel:zetasql_deps_step_1.bzl\", \"zetasql_deps_step_1\")\n\nzetasql_deps_step_1()\n\nload(\"@com_google_zetasql//bazel:zetasql_deps_step_2.bzl\", \"zetasql_deps_step_2\")\n\nzetasql_deps_step_2()\n\nload(\"@com_google_zetasql//bazel:zetasql_deps_step_3.bzl\", \"zetasql_deps_step_3\")\n\nzetasql_deps_step_3()\n\n# Required only for java builds\nload(\"@io_grpc_grpc_java//:repositories.bzl\", \"grpc_java_repositories\")\ngrpc_java_repositories()\n\nload(\"@com_google_zetasql//bazel:zetasql_deps_step_4.bzl\", \"zetasql_deps_step_4\")\n\nzetasql_deps_step_4()\n\n"
        },
        {
          "name": "bazel",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker_build.sh",
          "type": "blob",
          "size": 1.2607421875,
          "content": "#!/bin/bash\n#\n# Copyright 2024 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nset -e\nset -x\n\nMODE=$1\n\nCC=/usr/bin/gcc\nCXX=/usr/bin/g++\n\nif [ \"$MODE\" = \"build\" ]; then\n  # Build everything.\n  bazel build ${BAZEL_ARGS} -c opt ...\nelif [ \"$MODE\" = \"execute_query\" ]; then\n  # Install the execute_query tool.\n  bazel build ${BAZEL_ARGS} -c opt --dynamic_mode=off //zetasql/tools/execute_query:execute_query\n  # Move the generated binary to the home directory so that users can run it\n  # directly.\n  cp /zetasql/bazel-bin/zetasql/tools/execute_query/execute_query $HOME/bin/execute_query\n  # Remove the downloaded and generated artifacts to keep the image small.\n  bazel clean --expunge\nelse\n  echo \"Unknown mode: $MODE\"\n  echo \"Supported modes are: build, execute_query\"\n  exit 1\nfi\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "execute_query.md",
          "type": "blob",
          "size": 4.4541015625,
          "content": "## Execute Query\n\n`execute_query` is a tool to parse, analyze and run SQL queries using the\nreference implementation.\n\nYou can run a query by supplying it directly on the command-line:\n\n```sh\nexecute_query \"select 1 + 1;\"\n```\n\nThe tool can be run as a local web server that presents a UI where you can enter\na query and execute it interactively. The following command will run a local web\nserver and show a URL that you can open in your browser. You can also provide an\noptional `--port` flag (the default port is 8080).\n\n```sh\nexecute_query --web\n```\n\n> [!NOTE]\n> Note that this tool is intended primarily as a way to explore the language and\n> debug its implementation. It executes queries using the internal reference\n> implementation which is intended primarily for testing. It is not performant\n> or scalable, and there is no query optimizer.\n\n### Modes\n\nThe default mode executes the query and shows the result. Other modes\nshow the intermediate stages like parse trees and analzyer output.\nFor example, this shows the\nparse tree, the resolved AST, and the results of executing the query.\n\n```sh\nexecute_query --mode=parse,analyze,execute 'SELECT 1+2, CONCAT(\"hello\", \" world\");'\n```\n\nThe web UI (run with the `--web` flag) has checkboxes for selecting these modes.\n\nThe modes are:\n\n* `execute`: Executes the query and shows results in a table. In the\n  command-line mode, you can also see the results in JSON or textproto format\n  using the `--output_mode` flag.\n* `analyze`: Shows the resolved AST, as documented in [ZetaSQL Resolved\n  AST](https://github.com/google/zetasql/blob/master/docs/resolved_ast.md)\n* `parse`: Shows the parse tree as defined in\n  [ast_node.h](https://github.com/google/zetasql/blob/master/zetasql/parser/ast_node.h)\n* `explain`: Shows the evaluator query plan (for execution in the reference\n  implementation)\n* `unparse`: Shows the result of converting the parse tree back to SQL\n* `unanalyze`: Shows the result of converting the resolved AST back to SQL\n\n### Catalogs\n\nThe tool also includes some built-in catalogs that provide some pre-defined\ntables with sample data that you can use for queries. You can specify the\ncatalog to use with the `--catalog` flag. In the web UI, the\ncatalog can be selected from a dropdown list.\n\nThe following catalogs are supported:\n\n* `none`: An empty catalog with no tables.\n* `sample`: The sample catalog defined in\n  [sample_catalog.cc](https://github.com/google/zetasql/blob/master/zetasql/testdata/sample_catalog.cc),\n  which is used for most [analyzer tests](https://github.com/google/zetasql/tree/master/zetasql/analyzer/testdata).\n  These tables do not have any data.\n* `tpch`: A catalog with the standard \n  [tables](https://github.com/google/zetasql/tree/master/zetasql/examples/tpch/describe.txt)\n  from the TPC-H benchmark, with a 1MB dataset.\n\nFor example, the `sample` catalog defines the tables `KeyValue` and\n`MultipleColumns`, and the `tpch` catalog defines the tables `Orders`,\n`LineItem` and `Customer`, among others. You can see the schema of these tables\nby executing `DESCRIBE <table name>`.\n\nIn `parse` mode, the catalog isn't used, so any statement can be parsed\nregardless of the catalog.\n\nFor `analyze` and `execute` modes, the catalog is used to resolve table schemas.\n\nWhen executing queries, some catalogs provided have data attached to the\ntables. Queries against those tables will be executable.\n\n### Executable statements\n\nExecution is mostly limited to queries. They can be written in standard syntax\nusing `SELECT` or in  pipe syntax using `FROM`.\n\nOther executable statements:\n\n* `DESCRIBE <object_name>;` shows table schemas or function signatures, looking\n  up names from the selected catalog.\n* `SELECT <expression>;` can be used to evaluate expressions. In the\n  command-line mode, you can also specify `--sql_mode=expression` to interpret\n  the input as expressions.\n\nDDL statements that update the catalog:\n\n* `CREATE FUNCTION` creates a SQL UDF, or defines signatures for non-SQL UDFs.\n  These functions support analysis but not execution.\n* `CREATE TABLE FUNCTION `creates ia SQL TVF, or defines a signature for non-SQL\n  a TVF.\n* `CREATE TABLE` defines a table.  It will have zero rows when queried.\n\nSQL functions and TVFs will be executable.  Non-SQL functions and TVFs don't\nhave an implementation, so queries using them can be analyzed but can't be\nexecuted.\n\n### Example queries\n\nThere are some runnable example queries in\n[`zetasql/examples/tpch`](zetasql/examples/tpch) and\n[`zetasql/examples/pipe_queries`](zetasql/examples/pipe_queries).\n"
        },
        {
          "name": "java",
          "type": "tree",
          "content": null
        },
        {
          "name": "javatests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "zetasql",
          "type": "tree",
          "content": null
        },
        {
          "name": "zetasql_grpc.bzl",
          "type": "blob",
          "size": 1.244140625,
          "content": "#\n# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n\"\"\" Rule for gRPC C++ API generation \"\"\"\n\nload(\"@com_github_grpc_grpc//bazel:generate_cc.bzl\", \"generate_cc\")\n\ndef cc_grpc_library(name, srcs, deps, **kwargs):\n    if len(srcs) > 1:\n        fail(\"Only one srcs value supported\", \"srcs\")\n\n    codegen_grpc_target = name + \"__grpc_codegen\"\n\n    generate_cc(\n        name = codegen_grpc_target,\n        srcs = srcs,\n        plugin = \"@com_github_grpc_grpc//:grpc_cpp_plugin\",\n        well_known_protos = True,\n        **kwargs\n    )\n\n    native.cc_library(\n        name = name,\n        srcs = [codegen_grpc_target],\n        hdrs = [codegen_grpc_target],\n        deps = [\"@com_github_grpc_grpc//:grpc++_codegen_proto\"] + deps,\n        **kwargs\n    )\n"
        }
      ]
    }
  ]
}