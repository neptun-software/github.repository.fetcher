{
  "metadata": {
    "timestamp": 1736565563029,
    "page": 436,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dropbox/djinni",
      "stars": 2882,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.439453125,
          "content": ".DS_Store\n\n**/.idea/workspace.xml\n**/.idea/tasks.xml\n\n# android makefiles\nGypAndroid.mk\nsupport/*.target.mk\n*.target.mk\nGypAndroid.mk\n\n# gyp\ndeps/gyp\n\n# android build artifacts\nlibs/\nobj/\n\n# ios build artifacts\nbuild/\nbuild_ios/\n\n# xcode stuff\nproject.xcworkspace\n*.xccheckout\nDerivedData\n*.xcuserdatad/\n\n# djinni output directories\ndjinni-output-temp/\n\n# intellij-plugin build artifact\nintellij-plugin/djinni.jar\n\n# profiling output\ncallgrind.out.*\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 2.4521484375,
          "content": "cmake_minimum_required(VERSION 3.6.0)\n\nproject(djinni_support_lib)\n\ninclude(GNUInstallDirs)\n\nset(SRC_SHARED\n  \"support-lib/djinni_common.hpp\"\n  \"support-lib/proxy_cache_interface.hpp\"\n  \"support-lib/proxy_cache_impl.hpp\"\n)\n\nset(SRC_JNI\n  \"support-lib/jni/djinni_support.hpp\"\n  \"support-lib/jni/Marshal.hpp\"\n  \"support-lib/jni/djinni_support.cpp\"\n)\n\nset(SRC_OBJC\n  \"support-lib/objc/DJICppWrapperCache+Private.h\"\n  \"support-lib/objc/DJIError.h\"\n  \"support-lib/objc/DJIMarshal+Private.h\"\n  \"support-lib/objc/DJIObjcWrapperCache+Private.h\"\n  \"support-lib/objc/DJIError.mm\"\n  \"support-lib/objc/DJIProxyCaches.mm\"\n)\n\noption(DJINNI_STATIC_LIB \"Build Djinni support library as a static library instead of dynamic (the default).\" off)\nif(DJINNI_STATIC_LIB)\n  add_library(djinni_support_lib STATIC ${SRC_SHARED})\nelse()\n  add_library(djinni_support_lib SHARED ${SRC_SHARED})\nendif()\nsource_group(\"\" FILES ${SRC_SHARED})\n\nset_target_properties(djinni_support_lib PROPERTIES\n  CXX_STANDARD 11\n  CXX_STANDARD_REQUIRED true\n  CXX_EXTENSIONS false\n)\n\n# Objective-C support\noption(DJINNI_WITH_OBJC \"Include the Objective-C support code in Djinni support library.\" off)\nif(DJINNI_WITH_OBJC)\n  target_include_directories(djinni_support_lib PUBLIC \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/support-lib/objc/>\")\n  target_sources(djinni_support_lib PRIVATE ${SRC_OBJC})\n  source_group(\"objc\" FILES ${SRC_OBJC})\n  target_compile_options(djinni_support_lib PUBLIC \"-fobjc-arc\")\nendif()\n\n# JNI support\noption(DJINNI_WITH_JNI \"Include the JNI support code in Djinni support library.\" off)\nif(DJINNI_WITH_JNI)\n  if(NOT DJINNI_STATIC_LIB)\n    list(APPEND SRC_JNI \"support-lib/jni/djinni_main.cpp\")\n  endif()\n  target_include_directories(djinni_support_lib PUBLIC \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/support-lib/jni/>\")\n  target_sources(djinni_support_lib PRIVATE ${SRC_JNI})\n  source_group(\"jni\" FILES ${SRC_JNI})\n  # Do not use the host's jni.h on Android as it is provided automatically by the NDK\n  if(NOT ANDROID)\n    find_package(JNI REQUIRED QUIET)\n    target_include_directories(djinni_support_lib PUBLIC \"${JNI_INCLUDE_DIRS}\")\n  endif()\nendif()\n\nif(NOT (DJINNI_WITH_OBJC OR DJINNI_WITH_JNI))\n  message(FATAL_ERROR \"At least one of DJINNI_WITH_OBJC or DJINNI_WITH_JNI must be enabled.\")\nendif()\n\n# Store path to the \"run\" executable so it can be passed as argument to add_custom_command() scripts\nset(DJINNI_RUN_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/src/run\" CACHE FILEPATH \"Path to the Djinni generator executable.\")\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 0.228515625,
          "content": "The following is a partial list of individuals or corporations\nwho have identified their contributions to the djinni project.\n\nThe complete list of contributors can be identified through\nGit history.\n\n- Google Inc.\n- Microsoft Corp.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.4013671875,
          "content": "#\n# Environment variables for overriding default behavior.\n#\n\nifndef ANDROID_NDK_HOME\nANDROID_NDK_HOME = $(abspath $(dir $(realpath $(shell which ndk-build))))\nendif\n\nSCALA_VERSION=2.11\nDJINNI_VERSION=0.1-SNAPSHOT\nOUTPUT_JAR=src/target/scala-$(SCALA_VERSION)/djinni-assembly-$(DJINNI_VERSION).jar\n\n#\n# Global targets.\n#\n\nall: djinni example_ios example_android example_localhost test\n\nclean: djinni_jar_clean test_clean\n\t-ndk-build -C example/android/app/ clean\n\t-xcodebuild -workspace example/objc/TextSort.xcworkspace -scheme TextSort -configuration 'Debug' -sdk iphonesimulator clean\n\t-rm -rf libs/\n\t-rm -rf obj/\n\t-rm -rf build/\n\t-rm -rf build_ios/\n\t-rm -f GypAndroid.mk\n\n# rule to lazily clone gyp\n# freeze gyp at the last version with android support\n./deps/gyp:\n\tgit clone https://chromium.googlesource.com/external/gyp.git ./deps/gyp\n\tcd deps/gyp && git checkout -q 0bb67471bca068996e15b56738fa4824dfa19de0\n\ndjinni:\n\tcd src && ./build\n\n$(OUTPUT_JAR):\n\tcd src && sbt assembly\n\ndjinni_jar: $(OUTPUT_JAR)\n\ndjinni_jar_clean:\n\tcd src && sbt clean\n\n# we specify a root target for android to prevent all of the targets from spidering out\nGypAndroid.mk: ./deps/gyp example/libtextsort.gyp support-lib/support_lib.gyp example/example.djinni\n\t./example/run_djinni.sh\n\tANDROID_BUILD_TOP=$(ANDROID_NDK_HOME) deps/gyp/gyp --depth=. -f android -DOS=android -Icommon.gypi example/libtextsort.gyp --root-target=libtextsort_jni\n\n# we specify a root target for android to prevent all of the targets from spidering out\n./build_ios/example/libtextsort.xcodeproj: ./deps/gyp example/libtextsort.gyp support-lib/support_lib.gyp example/example.djinni\n\t./example/run_djinni.sh\n\tdeps/gyp/gyp --depth=. -f xcode -DOS=ios --generator-output ./build_ios -Icommon.gypi example/libtextsort.gyp\n\nexample_ios: ./build_ios/example/libtextsort.xcodeproj\n\txcodebuild -workspace example/objc/TextSort.xcworkspace \\\n           -scheme TextSort \\\n           -configuration 'Debug' \\\n           -sdk iphonesimulator\n\n# this target implicitly depends on GypAndroid.mk since gradle will try to make it\nexample_android: GypAndroid.mk\n\tcd example/android/ && ./gradlew app:assembleDebug\n\t@echo \"Apks produced at:\"\n\t@python example/glob.py example/ '*.apk'\n\nexample_localhost: ./deps/java\n\tcd example && make localhost\n\ntest: ./deps/java\n\tmake -C test-suite\n\ntest_clean:\n\tmake -C test-suite clean\n\n.PHONY: example_android example_ios example_localhost test test_clean djinni clean all dinni_jar\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 22.47265625,
          "content": "# Djinni\n\nDjinni is a tool for generating cross-language type declarations and interface bindings. It's\ndesigned to connect C++ with either Java or Objective-C. Python support is available in an\nexperimental version on the `python` branch.\n\nDjinni can be used to interface cross-platform C++ library code with platform-specific Java and\nObjective-C on Android and iOS.  We announced Djinni at CppCon 2014. You can see the\n[slides](https://bit.ly/djinnitalk) and [video](https://bit.ly/djinnivideo).  For more info about\nDjinni and how others are using it, check out the community links at the end of this document.\n\n__Maintenance note:__ This repo is stable but no longer maintained by Dropbox.  If you have\nquestions or want to talk to other users of Djinni, you can join the Slack community via the\nlink at the end of this document.\n\n## Main Features\n- Generates parallel C++, Java and Objective-C type definitions from a single interface\n  description file.\n- Supports the intersection of the three core languages' primitive types, and user-defined\n  enums, records, and interfaces.\n- Generates interface code allowing bidirectional calls between C++ and Java (with JNI) or\n  Objective-C (with Objective-C++).\n- Can autogenerate comparator functions (equality, ordering) on data types.\n\n## Getting Started\n\n### Types\nDjinni generates code based on interface definitions in an IDL file. An IDL file can contain\nthree kinds of declarations: enums, records, and interfaces.\n\n* Enums become C++ enum classes, Java enums, or ObjC `NS_ENUM`s.\n* Flags become C++ enum classes with convenient bit-oriented operators, Java enums with `EnumSet`, or ObjC `NS_OPTIONS`.\n* Records are pure-data value objects.\n* Interfaces are objects with defined methods to call (in C++, passed by `shared_ptr`). Djinni\n  produces code allowing an interface implemented in C++ to be transparently used from ObjC or\n  Java, and vice versa.\n\n### IDL Files\nDjinni's input is an interface description file. Here's an example:\n\n    # Multi-line comments can be added here. This comment will be propagated\n    # to each generated definition.\n    my_enum = enum {\n        option1;\n        option2;\n        option3;\n    }\n\n    my_flags = flags {\n      flag1;\n      flag2;\n      flag3;\n      no_flags = none;\n      all_flags = all;\n    }\n\n    my_record = record {\n        id: i32;\n        info: string;\n        store: set<string>;\n        hash: map<string, i32>;\n\n        values: list<another_record>;\n\n        # Comments can also be put here\n\n        # Constants can be included\n        const string_const: string = \"Constants can be put here\";\n        const min_value: another_record = {\n            key1 = 0,\n            key2 = \"\"\n        };\n    }\n\n    another_record = record {\n        key1: i32;\n        key2: string;\n    } deriving (eq, ord)\n\n    # This interface will be implemented in C++ and can be called from any language.\n    my_cpp_interface = interface +c {\n        method_returning_nothing(value: i32);\n        method_returning_some_type(key: string): another_record;\n        static get_version(): i32;\n\n        # Interfaces can also have constants\n        const version: i32 = 1;\n    }\n\n    # This interface will be implemented in Java and ObjC and can be called from C++.\n    my_client_interface = interface +j +o {\n        log_string(str: string): bool;\n    }\n\nDjinni files can also include each other. Adding the line:\n\n    @import \"relative/path/to/filename.djinni\"\n\nat the beginning of a file will simply include another file. Child file paths are\nrelative to the location of the file that contains the @import. Two different djinni files\ncannot define the same type. `@import` behaves like `#include` with `#pragma once` in C++, or\nlike ObjC's `#import`: if a file is included multiple times through different paths, then it\nwill only be processed once.\n\n### Generate Code\nWhen the Djinni file(s) are ready, from the command line or a bash script you can run:\n\n    src/run \\\n       --java-out JAVA_OUTPUT_FOLDER \\\n       --java-package com.example.jnigenpackage \\\n       --java-cpp-exception DbxException \\ # Choose between a customized C++ exception in Java and java.lang.RuntimeException (the default).\n       --ident-java-field mFooBar \\ # Optional, this adds an \"m\" in front of Java field names\n       \\\n       --cpp-out CPP_OUTPUT_FOLDER \\\n       \\\n       --jni-out JNI_OUTPUT_FOLDER \\\n       --ident-jni-class NativeFooBar \\ # This adds a \"Native\" prefix to JNI class\n       --ident-jni-file NativeFooBar \\ # This adds a prefix to the JNI filenames otherwise the cpp and jni filenames are the same.\n       \\\n       --objc-out OBJC_OUTPUT_FOLDER \\\n       --objc-type-prefix DB \\ # Apple suggests Objective-C classes have a prefix for each defined type.\n       \\\n       --objcpp-out OBJC_OUTPUT_FOLDER \\\n       \\\n       --idl MY_PROJECT.djinni\n\nSome other options are also available, such as `--cpp-namespace` that put generated C++ code into the namespace specified. For a list of all options, run\n`src/run --help`\n\nSample generated code is in the `example/generated-src/` and `test-suite/generated-src/`\ndirectories of this distribution.\n\nNote that if a language's output folder is not specified, that language will not be generated.\nFor more information, run `run --help` to see all command line arguments available.\n\n### Use Generated Code in Your Project\n\n#### Java / JNI / C++ Project\n\n##### Includes & Build target\nThe following headers / code will be generated for each defined type:\n\n| Type       | C++ header             | C++ source                 | Java                | JNI header            | JNI source            |\n|------------|------------------------|----------------------------|---------------------|-----------------------|-----------------------|\n| Enum/Flags | my\\_enum.hpp           |                            | MyEnum.java         | NativeMyEnum.hpp      | NativeMyEnum.cpp      |\n| Record     | my\\_record[\\_base].hpp | my\\_record[\\_base].cpp (+) | MyRecord[Base].java | NativeMyRecord.hpp    | NativeMyRecord.cpp    |\n| Interface  | my\\_interface.hpp      | my\\_interface.cpp (+)      | MyInterface.java    | NativeMyInterface.hpp | NativeMyInterface.cpp |\n\n(+) Generated only for types that contain constants.\n\nAdd all generated source files to your build target, as well as the contents of\n`support-lib/java`.\n\n##### Our JNI approach\nJNI stands for Java Native Interface, an extension of the Java language to allow interop with\nnative (C/C++) code or libraries. Complete documentation on JNI is available at:\nhttp://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/jniTOC.html\n\nFor each type, built-in (`list`, `string`, etc.) or user-defined, Djinni produces a translator\nclass with a `toJava` and `fromJava` function to translate back and forth.\n\nApplication code is responsible for the initial load of the JNI library. Add a static block\nsomewhere in your code:\n\n    System.loadLibrary(\"YourLibraryName\");\n    // The name is specified in Android.mk / build.gradle / Makefile, depending on your build system.\n\nIf you package your native library in a jar, you can also use `com.dropbox.djinni.NativeLibLoader` \nto help unpack and load your lib(s).  See the [Localhost README](example/localhost/README.md)\nfor details.\n\nWhen a native library is called, JNI calls a special function called `JNI_OnLoad`. If you use\nDjinni for all JNI interface code, include `support_lib/jni/djinni_main.cpp`; if not,\nyou'll need to add calls to your own `JNI_OnLoad` and `JNI_OnUnload` functions. See\n`support-lib/jni/djinni_main.cpp` for details.\n\n#### Objective-C / C++ Project\n\n##### Includes & Build Target\nGenerated files for Objective-C / C++ are as follows (assuming prefix is `DB`):\n\n| Type       | C++ header             | C++ source                 | Objective-C files        | Objective-C++ files         |\n|------------|------------------------|----------------------------|--------------------------|-----------------------------|\n| Enum/Flags | my\\_enum.hpp           |                            | DBMyEnum.h               |                             |\n| Record     | my\\_record[\\_base].hpp | my\\_record[\\_base].cpp (+) | DBMyRecord[Base].h       | DBMyRecord[Base]+Private.h  |\n|            |                        |                            | DBMyRecord[Base].mm (++) | DBMyRecord[Base]+Private.mm |\n| Interface  | my\\_interface.hpp      | my\\_interface.cpp (+)      | DBMyInterface.h          | DBMyInterface+Private.h     |\n|            |                        |                            |                          | DBMyInterface+Private.mm    |\n\n(+) Generated only for types that contain constants.\n(++) Generated only for types with derived operations and/or constants. These have `.mm` extensions to allow non-trivial constants.\n\nAdd all generated files to your build target, as well as the contents of `support-lib/objc`.\nNote that `+Private` files can only be used with ObjC++ source (other headers are pure ObjC) and are not required by Objective-C users of your interface.\n\n## Details of Generated Types\n### Enum\nEnums are translated to C++ `enum class`es with underlying type `int`, ObjC `NS_ENUM`s with\nunderlying type `NSInteger`, and Java enums.\n\n### Flags\nFlags are translated to C++ `enum class`es with underlying type `unsigned` and a generated set\nof overloaded bitwise operators for convenience, ObjC `NS_OPTIONS` with underlying type\n`NSUInteger`, and Java `EnumSet<>`. Contrary to the above enums, the enumerants of flags represent\nsingle bits instead of integral values.\n\nWhen specifying a `flags` type in your IDL file you can assign special semantics to options:\n\n```\nmy_flags = flags {\n  flag1;\n  flag2;\n  flag3;\n  no_flags = none;\n  all_flags = all;\n}\n```\nIn the above example the elements marked with `none` and `all` are given special meaning.\nIn C++ and ObjC the `no_flags` option is generated with a value that has no bits set (i.e. `0`),\nand `all_flags` is generated as a bitwise-or combination of all other values. In Java these\nspecial options are not generated as one can just use `EnumSet.noneOf()` and `EnumSet.allOf()`.\n\n### Record\nRecords are data objects. In C++, records contain all their elements by value, including other\nrecords (so a record cannot contain itself).\n\n#### Data types\nThe available data types for a record, argument, or return value are:\n\n - Boolean (`bool`)\n - Primitives (`i8`, `i16`, `i32`, `i64`, `f32`, `f64`).\n - Strings (`string`)\n - Binary (`binary`). This is implemented as `std::vector<uint8_t>` in C++, `byte[]` in Java,\n   and `NSData` in Objective-C.\n - Date (`date`).  This is `chrono::system_clock::time_point` in C++, `Date` in Java, and\n   `NSDate` in Objective-C.\n - List (`list<type>`). This is `vector<T>` in C++, `ArrayList` in Java, and `NSArray`\n   in Objective-C. Primitives in a list will be boxed in Java and Objective-C.\n - Set (`set<type>`). This is `unordered_set<T>` in C++, `HashSet` in Java, and `NSSet` in\n   Objective-C. Primitives in a set will be boxed in Java and Objective-C.\n - Map (`map<typeA, typeB>`). This is `unordered_map<K, V>` in C++, `HashMap` in Java, and\n   `NSDictionary` in Objective-C. Primitives in a map will be boxed in Java and Objective-C.\n - Enumerations / Flags\n - Optionals (`optional<typeA>`). This is `std::experimental::optional<T>` in C++11, object /\n   boxed primitive reference in Java (which can be `null`), and object / NSNumber strong\n   reference in Objective-C (which can be `nil`).\n - Other record types. This is generated with a by-value semantic, i.e. the copy method will\n   deep-copy the contents.\n\n#### Extensions\nTo support extra fields and/or methods, a record can be \"extended\" in any language. To extend\na record in a language, you can add a `+c` (C++), `+j` (Java), or `+o` (ObjC) flag after the\nrecord tag. The generated type will have a `Base` suffix, and you should create a derived type\nwithout the suffix that extends the record type.\n\nThe derived type must be constructible in the same way as the `Base` type. Interfaces will\nalways use the derived type.\n\n#### Derived methods\nFor record types, Haskell-style \"deriving\" declarations are supported to generate some common\nmethods. Djinni is capable of generating equality and order comparators, implemented\nas operator overloading in C++ and standard comparison functions in Java / Objective-C.\n\nThings to note:\n\n - All fields in the record are compared in the order they appear in the record declaration.\n   If you need to add a field later, make sure the order is correct.\n - Ordering comparison is not supported for collection types, optionals, and booleans.\n - To compare records containing other records, the inner record must derive at least the same\n   types of comparators as the outer record.\n\n### Interface\n\n#### Special Methods for C++ Only\n`+c` interfaces (implementable only in C++) can have methods flagged with the special keywords const and static which have special effects in C++:\n\n   special_methods = interface +c {\n       const accessor_method();\n       static factory_method();\n   }\n   \n- `const` methods will be declared as const in C++, though this cannot be enforced on callers in other languages, which lack this feature.\n- `static` methods will become a static method of the C++ class, which can be called from other languages without an object.  This is often useful for factory methods to act as a cross-language constructor.\n\n#### Exception Handling\nWhen an interface implemented in C++ throws a `std::exception`, it will be translated to a\n`java.lang.RuntimeException` in Java or an `NSException` in Objective-C. The `what()` message\nwill be translated as well.\n\n### Constants\nConstants can be defined within interfaces and records. In Java and C++ they are part of the\ngenerated class; and in Objective-C, constant names are globals with the name of the\ninterface/record prefixed. Example:\n\n   record_with_const = record +c +j +o {\n       const const_value: i32 = 8;\n   }\n\nwill be `RecordWithConst::CONST_VALUE` in C++, `RecordWithConst.CONST_VALUE` in Java, and\n`RecordWithConstConstValue` in Objective-C.\n\n## Modularization and Library Support\nWhen generating the interface for your project and wish to make it available to other users\nin all of C++/Objective-C/Java you can tell Djinni to generate a special YAML file as part\nof the code generation process. This file then contains all the information Djinni requires\nto include your types in a different project. Instructing Djinni to create these YAML files\nis controlled by the following arguments:\n- `--yaml-out`: The output folder for YAML files (Generator disabled if unspecified).\n- `--yaml-out-file`: If specified all types are merged into a single YAML file instead of generating one file per type (relative to `--yaml-out`).\n- `--yaml-prefix`: The prefix to add to type names stored in YAML files (default: `\"\"`).\n\nSuch a YAML file looks as follows:\n```yml\n---\nname: mylib_record1\ntypedef: 'record +c deriving(eq, ord)'\nparams: []\nprefix: 'mylib'\ncpp:\n    typename: '::mylib::Record1'\n    header: '\"MyLib/Record1.hpp\"'\n    byValue: false\nobjc:\n    typename: 'MLBRecord1'\n    header: '\"MLB/MLBRecord1.h\"'\n    boxed: 'MLBRecord1'\n    pointer: true\n    hash: '%s.hash'\nobjcpp:\n    translator: '::mylib::djinni::objc::Record1'\n    header: '\"mylib/djinni/objc/Record1.hpp\"'\njava:\n    typename: 'com.example.mylib.Record1'\n    boxed: 'com.example.mylib.Record1'\n    reference: true\n    generic: true\n    hash: '%s.hashCode()'\njni:\n    translator: '::mylib::djinni::jni::Record1'\n    header: '\"Duration-jni.hpp\"'\n    typename: jobject\n    typeSignature: 'Lcom/example/mylib/Record1;'\n---\nname: mylib_interface1\ntypedef: 'interface +j +o'\n    (...)\n---\nname: mylib_enum1\ntypedef: 'enum'\n    (...)\n\n```\nEach document in the YAML file describes one extern type.\nA full documentation of all fields is available in `example/example.yaml`. You can also check\nthe files `test-suite/djinni/date.yaml` and `test-suite/djinni/duration.yaml` for some\nreal working examples of what you can do with it.\n\nTo use a library type in your project simply include it in your IDL file and refer to it using\nits name identifier:\n```\n@extern \"mylib.yaml\"\n\nclient_interface = interface +c {\n  foo(): mylib_record1;\n}\n```\n\nThese files can be created by hand as long as you follow the required format. This allows you\nto support types not generated by Djinni. See `test-suite/djinni/duration.yaml` and the\naccompanying translators in `test-suite/handwritten-src/cpp/Duration-objc.hpp` and \n`test-suite/handwritten-src/cpp/Duration-jni.hpp` for an advanced example. Handwritten\ntranslators implement the following concept:\n```cpp\n// For C++ <-> Objective-C\nstruct Record1\n{\n    using CppType = ::mylib::Record1;\n    using ObjcType = MLBRecord1*;\n\n    static CppType toCpp(ObjcType o) { return /* your magic here */; }\n    static ObjcType fromCpp(CppType c) { return /* your magic here */; }\n\n    // Option 1: use this if no boxing is required\n    using Boxed = Record1;\n    // Option 2: or this if you do need dedicated boxing behavior\n    struct Boxed\n    {\n        using ObjcType = MLBRecord1Special*;\n        static CppType toCpp(ObjcType o) { return /* your magic here */; }\n        static ObjcType fromCpp(CppType c) { return /* your magic here */; }\n    }\n};\n```\n```cpp\n// For C++ <-> JNI\n#include \"djinni_support.hpp\"\nstruct Record1\n{\n    using CppType = ::mylib::Record1;\n    using JniType = jobject;\n\n    static CppType toCpp(JniType j) { return /* your magic here */; }\n    // The return type *must* be LocalRef<T> if T is not a primitive!\n    static ::djinni::LocalRef<jobject> JniType fromCpp(CppType c) { return /* your magic here */; }\n\n    using Boxed = Record1;\n};\n```\nFor `interface` classes the `CppType` alias is expected to be a `std::shared_ptr<T>`.\n\nBe sure to put the translators into representative and distinct namespaces.\n\nIf your type is generic the translator takes the same number of template parameters.\nAt usage each is instantiated with the translators of the respective type argument.\n```cpp\ntemplate<class A, class B>\nstruct Record1\n{\n    using CppType = ::mylib::Record1<typename A::CppType, typename B::CppType>;\n    using ObjcType = MLBRecord1*;\n\n    static CppType toCpp(ObjcType o)\n    {\n        // Use A::toCpp() and B::toCpp() if necessary\n        return /* your magic here */;\n    }\n    static ObjcType fromCpp(CppType c)\n    {\n        // Use A::fromCpp() and B::fromCpp() if necessary\n        return /* your magic here */;\n    }\n\n    using Boxed = Record1;\n};\n```\n\n## Miscellaneous\n### Record constructors / initializers\nDjinni does not permit custom constructors for records or interfaces, since there would be\nno way to implement them in Java except by manually editing the autogenerated file. Instead,\nuse extended records or static functions.\n\n### Identifier Format\nDjinni supports overridable formats for most generated filenames and identifiers. The complete\nlist can found by invoking Djinni with `--help`. The format is specified by formatting the\nword FooBar in the desired style:\n- `FOO_BAR` -> `GENERATED_IDENT`\n- `mFooBar` -> `mGeneratedIdent`\n- `FooBar` -> `GeneratedIdent`\n\n### Integer types\nIn Djinni, i8 through i64 are all used with fixed length. The C++ builtin `int`, `long`, etc\nand Objective-C `NSInteger` are not used because their length varies by architecture. Unsigned\nintegers are not included because they are not available in Java.\n\n## Test Suite\nRun `make test` to invoke the test suite, found in the test-suite subdirectory. It will build and run Java code on a local JVMy, plus Objective-C on an iOS simulator.  The latter will only work on a Mac with Xcode.\n\n## Generate a standalone jar\n\nThe `djinni_jar` target of the main `Makefile` creates a standalone `.jar`. \nThis uses the [sbt assembly plugin](https://github.com/sbt/sbt-assembly) under the hoods.\n\nSimply call this target from the root directory:\n```shell\nmake djinni_jar\n```\nThis will produce a `.jar` file inside the `src/target/scala_<SCALA_VERSION>/djinni-assembly-<VERSION>.jar`.\n\nYou can move and use it as any other executable `.jar`.\n\nAssuming the `.jar` is located at `$DJINNI_JAR_DIR` its version equals `0.1-SNAPSHOT`:\n```shell\n# Example\njava -jar $DJINNI_JAR_DIR/djinni-assembly-0.1-SNAPSHOT.jar \\\n    --java-out \"$temp_out/java\" \\\n    --java-package $java_package \\\n    --java-class-access-modifier \"package\" \\\n    --java-nullable-annotation \"javax.annotation.CheckForNull\" \\\n    --java-nonnull-annotation \"javax.annotation.Nonnull\" \\\n    --ident-java-field mFooBar \\\n    \\\n    --cpp-out \"$temp_out/cpp\" \\\n    --cpp-namespace textsort \\\n    --ident-cpp-enum-type foo_bar \\\n    \\\n    --jni-out \"$temp_out/jni\" \\\n    --ident-jni-class NativeFooBar \\\n    --ident-jni-file NativeFooBar \\\n    \\\n    --objc-out \"$temp_out/objc\" \\\n    --objcpp-out \"$temp_out/objc\" \\\n    --objc-type-prefix TXS \\\n    --objc-swift-bridging-header \"TextSort-Bridging-Header\" \\\n    \\\n    --idl \"$in\"\n```\n\n*Note*: The `all` target of the main `Makefile` includes the `djinni_jar` target.\n\n## Generate an iOS universal binary of the support library.\n\nThe `ios-build-support-lib.sh` helps you to build an universal static library for iOS platforms.\nIt uses the platform file of the [ios-cmake](https://github.com/leetal/ios-cmake) repository.\n\nIt basically creates one universal static library per `IOS_PLATFORM` variable and uses `lipo` \nto merge all the files in one.\n\nThere is basically two variables you would like to modify:\n\n- `BUILD_APPLE_ARCHITECTURES`: Specifies which `IOS_PLATFORM` to build.\nFor more informations, take a look at https://github.com/leetal/ios-cmake.\n\n- `ENABLE_BITCODE`: enable/disable the bitcode generation.\n\n## Android Parcelable records\n\nDjinni supports generating records that implements `android.os.parcelable`.\n\nIn order to do that, there are two steps needed:\n- deriving the records that should be parcelable with the keyword parcelable: `deriving(parcelable)`\n- run Djinni with the following flag `--java-implement-android-os-parcelable true`\n\n## Community Links\n\n* Join the discussion with other developers at the [Mobile C++ Slack Community](https://mobilecpp.herokuapp.com/)\n* There are a set of [tutorials](http://mobilecpptutorials.com/) for building a cross-platform app using Djinni.\n* [mx3](https://github.com/libmx3/mx3) is an example project demonstrating use of Djinni and other tools.\n* [Slides](https://bit.ly/djinnitalk) and [video](https://bit.ly/djinnivideo) from the CppCon 2014 talk where we introduced Djinni.\n* [Slides](https://bit.ly/djinnitalk2) and [video](https://bit.ly/djinnivideo2) from the CppCon 2015 talk about Djinni implementation techniques, and the addition of Python.\n* You can see a [CppCon 2014 talk](https://www.youtube.com/watch?v=5AZMEm3rZ2Y) by app developers at Dropbox about their cross-platform experiences.\n\n## Authors\n- Kannan Goundan\n- Tony Grue\n- Derek He\n- Steven Kabbes\n- Jacob Potter\n- Iulia Tamas\n- Andrew Twyman\n\n## Contacts\n- Andrew Twyman - `artwymana+djinni@gmail.com`\n- Jacob Potter - `djinni@j4cbo.com`\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "common.gypi",
          "type": "blob",
          "size": 1.5029296875,
          "content": "{\n  \"target_defaults\": {\n    \"default_configuration\": \"Debug\",\n    # enable android short names (not full paths) for linking libraries\n    \"android_unmangled_name\": 1,\n    'cflags':    [ '-gdwarf-2', '-Werror', '-Wall', '-Wextra', '-Wno-missing-field-initializers' ],\n    'cflags_cc': [ '-std=c++11', '-frtti', '-fexceptions' ],\n    'xcode_settings': {\n      'OTHER_CFLAGS' : ['-Wall'],\n      'OTHER_CPLUSPLUSFLAGS' : ['-Wall'],\n      'CLANG_CXX_LANGUAGE_STANDARD': 'c++11',\n      'CLANG_CXX_LIBRARY': 'libc++',\n      'DEAD_CODE_STRIPPING': 'YES',\n      'SKIP_INSTALL': 'YES',\n      'CLANG_ENABLE_OBJC_ARC': 'YES',\n      'IPHONEOS_DEPLOYMENT_TARGET': '8.0',\n    },\n    \"conditions\": [\n        ['OS==\"ios\"', {\n          \"xcode_settings\" : {\n            'SDKROOT': 'iphoneos',\n            'SUPPORTED_PLATFORMS': 'iphonesimulator iphoneos',\n          }\n        }]\n    ],\n    'configurations': {\n      'Debug': {\n        # do _not_ put defines here, unless you add them in cflags as well\n        # ios/clang doesn't respect them :(\n        'defines': [ 'DEBUG=1' ],\n        'cflags' : [ '-g', '-O0', '-DDEBUG=1' ],\n        'xcode_settings': {\n          'ONLY_ACTIVE_ARCH': 'YES',\n        },\n      },\n      'Release': {\n        'defines': [\n          'NDEBUG=1',\n        ],\n        'cflags': [\n          '-Os',\n          '-fomit-frame-pointer',\n          '-fdata-sections',\n          '-ffunction-sections',\n          '-DNDEBUG=1',\n        ],\n        'xcode_settings': {\n          'DEAD_CODE_STRIPPING': 'YES',\n        },\n      },\n    },\n  },\n}\n"
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "example-with-packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "extension-libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "intellij-plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "support-lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-suite",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}