{
  "metadata": {
    "timestamp": 1736565530818,
    "page": 405,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ChaiScript/ChaiScript",
      "stars": 2972,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".buckconfig",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.3603515625,
          "content": "# clang-format: 11\nAccessModifierOffset:                 -2\nAlignAfterOpenBracket:                Align\nAlignConsecutiveBitFields:            false\nAllowShortBlocksOnASingleLine:        false\nAllowShortFunctionsOnASingleLine:     Inline\nAllowShortLambdasOnASingleLine:       All\nAlwaysBreakTemplateDeclarations:      true\nBasedOnStyle:                         WebKit\nBinPackArguments:                     true\nBinPackParameters:                    true\nBreakBeforeBraces:                    Attach\nColumnLimit:                          0\nCpp11BracedListStyle:                 true\nFixNamespaceComments:                 true\nIncludeBlocks:                        Preserve\nIndentCaseLabels:                     true\nIndentPPDirectives:                   None\nIndentWidth:                          2\nKeepEmptyLinesAtTheStartOfBlocks:     false\nNamespaceIndentation:                 All\nPenaltyBreakBeforeFirstCallParameter: 200\nPenaltyBreakComment:                  5\nPenaltyBreakFirstLessLess:            50\nPenaltyExcessCharacter:               4\nPointerAlignment:                     Right\nSortIncludes:                         true\nSpaceAfterTemplateKeyword:            false\nSpaceBeforeCpp11BracedList:           false\nSpaceInEmptyBlock:                    false\nStandard:                             Latest\nTabWidth:                             2\nUseTab:                               Never"
        },
        {
          "name": ".decent_ci-Linux.yaml",
          "type": "blob",
          "size": 2.365234375,
          "content": "compilers:\n  - name: \"clang\"\n    version: \"3.6\"\n    skip_packaging: true\n    cmake_extra_flags: -DUSE_LIBCXX:BOOL=OFF -DBUILD_SAMPLES:BOOL=ON -DBUILD_PACKAGE:BOOL=ON -DBUILD_TESTING:BOOL=ON -DRUN_PERFORMANCE_TESTS:BOOL=ON\n    collect_performance_results: true\n  - name: \"clang\"\n    build_tag: \"LibC++\"\n    version: \"3.6\"\n    skip_packaging: true\n    cmake_extra_flags: -DUSE_LIBCXX:BOOL=ON -DBUILD_SAMPLES:BOOL=ON -DBUILD_PACKAGE:BOOL=ON -DBUILD_TESTING:BOOL=ON\n  - name: \"clang\"\n    build_tag: AddressSanitizer\n    version: \"3.6\"\n    skip_packaging: true\n    cmake_extra_flags: -DRUN_FUZZY_TESTS:BOOL=TRUE -DUSE_LIBCXX:BOOL=OFF -DBUILD_SAMPLES:BOOL=ON -DBUILD_PACKAGE:BOOL=ON -DBUILD_TESTING:BOOL=ON -DENABLE_ADDRESS_SANITIZER:BOOL=ON\n  - name: \"clang\"\n    build_tag: ThreadSanitizer\n    version: \"3.6\"\n    skip_packaging: true\n    cmake_extra_flags: -DUSE_LIBCXX:BOOL=OFF -DBUILD_SAMPLES:BOOL=ON -DBUILD_PACKAGE:BOOL=ON -DBUILD_TESTING:BOOL=ON -DENABLE_THREAD_SANITIZER:BOOL=ON\n  - name: \"clang\"\n    version: \"3.7\"\n    skip_packaging: true\n    cmake_extra_flags: -DUSE_LIBCXX:BOOL=OFF -DBUILD_SAMPLES:BOOL=ON -DBUILD_PACKAGE:BOOL=ON -DBUILD_TESTING:BOOL=ON -DRUN_PERFORMANCE_TESTS:BOOL=ON\n    collect_performance_results: true\n  - name: \"clang\"\n    build_tag: \"LibC++\"\n    version: \"3.7\"\n    skip_packaging: true\n    cmake_extra_flags: -DUSE_LIBCXX:BOOL=ON -DBUILD_SAMPLES:BOOL=ON -DBUILD_PACKAGE:BOOL=ON -DBUILD_TESTING:BOOL=ON\n  - name: \"gcc\"\n    version: \"4.9\"\n    cmake_extra_flags: -DBUILD_PACKAGE:BOOL=ON -DBUILD_TESTING:BOOL=ON -DBUILD_TESTING:BOOL=ON -DRUN_PERFORMANCE_TESTS:BOOL=ON\n    collect_performance_results: true\n  - name: \"gcc\"\n    version: \"4.9\"\n    skip_packaging: true\n    build_tag: \"NoThreads\"\n    cmake_extra_flags: -DBUILD_PACKAGE:BOOL=ON -DBUILD_TESTING:BOOL=ON -DBUILD_TESTING:BOOL=ON -DRUN_PERFORMANCE_TESTS:BOOL=ON -DMULTITHREAD_SUPPORT_ENABLED:BOOL=OFF\n    collect_performance_results: true\n  - name: \"gcc\"\n    version: \"5\"\n    skip_packaging: true\n    cmake_extra_flags: -DBUILD_SAMPLES:BOOL=ON -DBUILD_PACKAGE:BOOL=ON -DBUILD_TESTING:BOOL=ON -DRUN_PERFORMANCE_TESTS:BOOL=ON\n    collect_performance_results: true\n  - name: cppcheck\n    compiler_extra_flags: --enable=all -I include --inline-suppr -Umax  --suppress=\"*:unittests/catch.hpp\" --force --suppress=\"unusedFunction:*\"\n  - name: custom_check\n    commands:\n       - ./contrib/check_for_tabs.rb\n       - ./contrib/check_for_todos.rb\n\n"
        },
        {
          "name": ".decent_ci-MacOS.yaml",
          "type": "blob",
          "size": 0.177734375,
          "content": "compilers:\n  - name: clang\n    cmake_extra_flags: -DBUILD_SAMPLES:BOOL=ON -DBUILD_PACKAGE:BOOL=ON -DBUILD_TESTING:BOOL=ON -DCOMMIT_SHA=$COMMIT_SHA\n    build_package_generator: TBZ2\n\n"
        },
        {
          "name": ".decent_ci-Windows.yaml",
          "type": "blob",
          "size": 0.728515625,
          "content": "compilers:\n  - name: Visual Studio\n    version: 14\n    cmake_extra_flags: -DBUILD_SAMPLES:BOOL=ON -DBUILD_PACKAGE:BOOL=ON -DBUILD_TESTING:BOOL=ON -DCOMMIT_SHA=%COMMIT_SHA%\n    compiler_extra_flags: /analyze\n    skip_packaging: true\n  - name: Visual Studio\n    version: 14\n    architecture: Win64\n    cmake_extra_flags: -DBUILD_SAMPLES:BOOL=ON -DBUILD_PACKAGE:BOOL=ON -DBUILD_TESTING:BOOL=ON -DCOMMIT_SHA=%COMMIT_SHA%\n    compiler_extra_flags: /analyze\n    skip_packaging: true\n  - name: Visual Studio\n    version: 14\n    build_type: Debug\n    architecture: Win64\n    cmake_extra_flags: -DBUILD_SAMPLES:BOOL=ON -DBUILD_PACKAGE:BOOL=ON -DBUILD_TESTING:BOOL=ON -DCOMMIT_SHA=%COMMIT_SHA%\n    compiler_extra_flags: /analyze\n    skip_packaging: true\n\n\n"
        },
        {
          "name": ".decent_ci.yaml",
          "type": "blob",
          "size": 0.1845703125,
          "content": "results_repository : ChaiScript/ChaiScript-BuildResults\nresults_path : _posts\nresults_base_url : https://chaiscript.github.io/ChaiScript-BuildResults\naging_pull_requests_notification: true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.068359375,
          "content": "/buck-out/\n/.buckd/\n/buckaroo/\n.buckconfig.local\nBUCKAROO_DEPS\n/build\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 2.994140625,
          "content": "language: cpp\n\n\naddons:\n  apt:\n    sources: \n      - ubuntu-toolchain-r-test\n      - llvm-toolchain-trusty-5.0\n      - sourceline: 'deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-5.0 main'\n        key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'\n    packages:\n      - g++-7\n      - g++-8\n  coverity_scan:\n    project:\n      name: \"ChaiScript/ChaiScript\"\n      description: \"Build submitted via Travis CI\"\n    notification_email: jason@emptycrate.com\n    build_command_prepend: \"cmake -D ENABLE_COVERAGE:BOOL=TRUE -D CMAKE_BUILD_TYPE:STRING=Debug . \"\n    build_command:   \"cmake --build . -- -j2\"\n    branch_pattern: coverity_scan\n      \nmatrix:\n  include:\n    - os: linux\n      sudo: false\n      env: GCC_VER=\"7\"\n      compiler: gcc\n      #    - os: linux\n      #sudo: false\n      #env: GCC_VER=\"6\" CMAKE_OPTIONS=\"-D DYNLOAD_ENABLED:BOOL=FALSE -D MULTITHREAD_SUPPORT_ENABLED:BOOL=FALSE -D USE_STD_MAKE_SHARED:BOOL=TRUE\" BUILD_ONLY=1\n      #compiler: gcc\n    - os: linux\n      sudo: false\n      env: GCC_VER=\"7\" CPPCHECK=1 CMAKE_OPTIONS=\"-D RUN_FUZZY_TESTS:BOOL=TRUE\"\n      compiler: gcc\n    - os: linux\n      sudo: false\n      env: GCC_VER=\"8\" CPPCHECK=1 COVERAGE=1 CMAKE_OPTIONS=\"-D RUN_FUZZY_TESTS:BOOL=TRUE\"\n      compiler: gcc\n    #- os: osx\n    #  compiler: clang\n    #  osx_image: xcode10\n    #  env: CLANG_VER=\"5.0\"\n    #- os: osx\n    #  compiler: clang\n    #  osx_image: xcode10\n    #  env: CLANG_VER=\"5.0\" CMAKE_OPTIONS=\"-D DYNLOAD_ENABLED:BOOL=FALSE -D MULTITHREAD_SUPPORT_ENABLED:BOOL=FALSE -D USE_STD_MAKE_SHARED:BOOL=TRUE\" BUILD_ONLY=1\n  \nenv:\n  global:\n    - secure: eiaR6pXiiEpyB8+LLQ1NvZdl0Yylru1BLy9lMoHl+IpUNGGQGywmW/2WAn77rFfmR1OPA2qWQLfgPwgK0HxUA9HHlot9tre5QhiN2Lw8NOT8tCZ6tTm2+QntDBjBGJyal/knRvQkn/6qs6GxlXRerz4ArnnuPL1vESt3zwB0YtU=\n    # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created\n    - secure: \"LfolGjP8tWm3yAwthfu3yp8Zn40aueFae580UUR34gusG87cyglq2tQDtxdy+63gWEeNfArbv9n5rZv+bDW3ggHyPjuCKKc1PlZAy07lfXUXf1uz+SFhNvNoYTn3mQG3VZ08o116p4Le2p8yqu4bylJ8wckEq7PrTwvSGVQWTWM=\"\n\nbefore_install:\n  - if [ \"${GCC_VER}\" != \"\" ]; then export CXX=\"g++-$GCC_VER\" CC=\"gcc-$GCC_VER\" GCOV=\"gcov-$GCC_VER\" ; fi\n  #- if [ \"${CLANG_VER}\" != \"\" ]; then export CXX=\"clang++-$CLANG_VER\"; fi\n  - pip install --user cpp-coveralls\n\nscript: \n  - cmake -D ENABLE_COVERAGE:BOOL=TRUE -D CMAKE_BUILD_TYPE:STRING=Debug $CMAKE_OPTIONS . \n  - cmake --build . -- -j2\n  - if [ \"${BUILD_ONLY}\" != \"1\" ]; then ctest; fi\n  - if [ \"${COVERAGE}\" = \"1\" ]; then bash <(curl -s https://raw.githubusercontent.com/codecov/codecov-bash/master/codecov) -x $GCOV -a \"-s `pwd`\" ; fi\n\n#after_script:\n#  - if [ ${CPPCHECK} = 1 ]; then contrib/codeanalysis/runcppcheck.sh ; fi\n\n\nnotifications:\n  email:\n    recipients:\n      - jason@emptycrate.com\n    on_success: always\n    on_failure: always\n  webhooks:\n    urls:\n      - https://webhooks.gitter.im/e/4be9a2720eaa1bb2a6c9\n    on_success: change  # options: [always|never|change] default: always\n    on_failure: always  # options: [always|never|change] default: always\n    on_start: false     # default: false\n"
        },
        {
          "name": "BUCK",
          "type": "blob",
          "size": 0.2158203125,
          "content": "prebuilt_cxx_library(\n  name = 'chaiscript',\n  header_only = True,\n  header_namespace = 'chaiscript',\n  exported_headers = subdir_glob([\n    ('include/chaiscript', '**/*.hpp'),\n  ]),\n  visibility = [\n    'PUBLIC',\n  ],\n)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 17.552734375,
          "content": "cmake_minimum_required(VERSION 3.12)\ncmake_policy(SET CMP0054 NEW)\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n# required since cmake 3.4 at least for libc++\nset(CMAKE_ENABLE_EXPORTS ON)\n\nproject(chaiscript)\n\noption(MULTITHREAD_SUPPORT_ENABLED \"Multithreaded Support Enabled\" TRUE)\noption(DYNLOAD_ENABLED \"Dynamic Loading Support Enabled\" TRUE)\n\n\noption(BUILD_MODULES \"Build Extra Modules (stl)\" TRUE)\noption(BUILD_SAMPLES \"Build Samples Folder\" FALSE)\noption(RUN_FUZZY_TESTS \"Run tests generated by AFL\" FALSE)\noption(USE_STD_MAKE_SHARED \"Use std::make_shared instead of chaiscript::make_shared\" FALSE)\noption(RUN_PERFORMANCE_TESTS \"Run Performance Tests\" FALSE)\n\nmark_as_advanced(USE_STD_MAKE_SHARED)\n\nif(USE_STD_MAKE_SHARED)\n  add_definitions(-DCHAISCRIPT_USE_STD_MAKE_SHARED)\nendif()\n\nif(CMAKE_COMPILER_IS_GNUCC)\n  option(ENABLE_COVERAGE \"Enable Coverage Reporting in GCC\" FALSE)\n\n  if(ENABLE_COVERAGE)\n    add_definitions(--coverage -O0)\n    set(LINKER_FLAGS \"${LINKER_FLAGS} --coverage\")\n  endif()\nendif()\n\nif(CMAKE_COMPILER_IS_GNUCC OR \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n  option(ENABLE_THREAD_SANITIZER \"Enable thread sanitizer testing in gcc/clang\" FALSE)\n  if(ENABLE_THREAD_SANITIZER)\n    add_definitions(-fsanitize=thread -g)\n    set(LINKER_FLAGS \"${LINKER_FLAGS} -fsanitize=thread\")\n  endif()\n\n  option(ENABLE_ADDRESS_SANITIZER \"Enable address sanitizer testing in gcc/clang\" FALSE)\n  if(ENABLE_ADDRESS_SANITIZER)\n    add_definitions(-fsanitize=address -g)\n    set(LINKER_FLAGS \"${LINKER_FLAGS} -fsanitize=address\")\n\n    option(BUILD_LIBFUZZ_TESTER \"Build libfuzzer tool\" FALSE)\n  endif()\n\n  option(ENABLE_MEMORY_SANITIZER \"Enable memory sanitizer testing in gcc/clang\" FALSE)\n  if(ENABLE_MEMORY_SANITIZER)\n    add_definitions(-fsanitize=memory -fsanitize-memory-track-origins -g)\n    set(LINKER_FLAGS \"${LINKER_FLAGS} -fsanitize=memory -fsanitize-memory-track-origins \")\n  endif()\n\n  option(ENABLE_UNDEFINED_SANITIZER \"Enable undefined behavior sanitizer testing in gcc/clang\" FALSE)\n  if(ENABLE_UNDEFINED_SANITIZER)\n    add_definitions(-fsanitize=undefined -g)\n    set(LINKER_FLAGS \"${LINKER_FLAGS} -fsanitize=undefined\")\n  endif()\n\n  option(ENABLE_LTO \"Enable Link Time Optimization\" FALSE)\n  if(ENABLE_LTO)\n    check_ipo_supported()\n    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)\n  endif()\n\n  option(GPROF_OUTPUT \"Generate profile data\" FALSE)\n  if(GPROF_OUTPUT)\n    add_definitions(-pg)\n    set(LINKER_FLAGS \"${LINKER_FLAGS} -pg\")\n  endif()\n\n\n  option(PROFILE_GENERATE \"Generate profile data\" FALSE)\n  if(PROFILE_GENERATE)\n    add_definitions(-fprofile-generate)\n    set(LINKER_FLAGS \"${LINKER_FLAGS} -fprofile-generate\")\n  endif()\n\n  option(PROFILE_USE \"Use profile data\" FALSE)\n  if(PROFILE_USE)\n    add_definitions(-fprofile-use)\n    set(LINKER_FLAGS \"${LINKER_FLAGS} -fprofile-use\")\n  endif()\n\n\nendif()\n\nlist(APPEND CPACK_SOURCE_IGNORE_FILES \"${CMAKE_CURRENT_BINARY_DIR}\")\nlist(APPEND CPACK_SOURCE_IGNORE_FILES \"\\\\\\\\.svn\")\nlist(APPEND CPACK_SOURCE_IGNORE_FILES \"\\\\\\\\.git\")\nlist(APPEND CPACK_SOURCE_IGNORE_FILES \".swp\")\nlist(APPEND CPACK_SOURCE_IGNORE_FILES \".*~\")\n\nset(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/license.txt\")\nset(CPACK_RESOURCE_FILE_README \"${CMAKE_CURRENT_SOURCE_DIR}/readme.md\")\nset(CPACK_PACKAGE_DESCRIPTION_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/description.txt\")\n\nset(CPACK_PACKAGE_VERSION_MAJOR 7)\nset(CPACK_PACKAGE_VERSION_MINOR 0)\nset(CPACK_PACKAGE_VERSION_PATCH 0)\n\nset(CPACK_PACKAGE_EXECUTABLES \"chai;ChaiScript Eval\")\nset(CPACK_PACKAGE_VENDOR \"ChaiScript.com\")\nset(CPACK_PACKAGE_CONTACT \"contact@chaiscript.com\")\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"An embedded scripting language for C++\")\n\nset(CPACK_DEBIAN_PACKAGE_SECTION \"devel\")\nset(CPACK_DEBIAN_PACKAGE_PRIORITY \"optional\")\n\nset(CPACK_RPM_PACKAGE_LICENSE \"BSD\")\nset(CPACK_RPM_PACKAGE_GROUP \"Programming\")\n\nset(CHAI_VERSION ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH})\n\nconfigure_file(Doxyfile.in ${CMAKE_BINARY_DIR}/Doxyfile)\n\ninclude(CTest)\ninclude(CPack)\ninclude(cmake/Catch.cmake)\n\nif(NOT MINGW)\n  find_library(READLINE_LIBRARY NAMES readline PATH /usr/lib /usr/local/lib /opt/local/lib)\nendif()\n\nif(UNIX AND NOT APPLE)\n  find_program(VALGRIND NAMES valgrind PATH /usr/bin /usr/local/bin)\nendif()\n\nenable_testing()\n\n\nmessage(STATUS \"Detecting readline support\")\nif(READLINE_LIBRARY)\n  message(STATUS \"Found: ${READLINE_LIBRARY}\")\n  set(READLINE_LIB readline)\n  add_definitions(/DREADLINE_AVAILABLE)\nelse()\n  message(STATUS \"Not Found\")\n  set(READLINE_LIB)\n  set(READLINE_FLAG)\nendif()\n\nif(MSVC)\n  add_definitions(/W4 /w14545 /w34242 /w34254 /w34287 /w44263 /w44265 /w44296 /w44311 /w44826 /we4289 /w14546 /w14547 /w14549 /w14555 /w14619 /w14905 /w14906 /w14928)\n\n  if(MSVC_VERSION STREQUAL \"1800\")\n    # VS2013 doesn't have magic statics\n    add_definitions(/w44640)\n  else()\n    # enum warnings are too noisy on MSVC2013\n    add_definitions(/w34062)\n  endif()\n\n  add_definitions(/bigobj /permissive- /utf-8)\n  # Note on MSVC compiler flags.\n  # The code base selective disables warnings as necessary when the compiler is complaining too much\n  # about something that is perfectly valid, or there is simply no technical way around it\n  # This particular warning, C4503 is in regards to the decorated names that MSVC generates internally.\n  # The error did not come up until the move to C++11, but the compiler doesn't give enough information\n  # to determine where the error is coming from, and the internet provides no real information for\n  # how to workaround or fix the error. So I'm disabling it globally.\n  add_definitions(/wd4503)\nelse()\n  add_definitions(-Wall -Wextra -Wconversion -Wshadow -Wnon-virtual-dtor -Wold-style-cast -Wcast-align -Wcast-qual -Wunused -Woverloaded-virtual -Wno-noexcept-type -Wpedantic -Werror=return-type)\n\n  if(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\" OR \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"AppleClang\")\n    add_definitions(-Weverything -Wno-c++98-compat-pedantic  -Wno-c++98-compat -Wno-documentation -Wno-switch-enum -Wno-weak-vtables -Wno-missing-prototypes -Wno-padded -Wno-missing-noreturn -Wno-exit-time-destructors -Wno-documentation-unknown-command -Wno-unused-template -Wno-undef -Wno-double-promotion)\n  else()\n    add_definitions(-Wnoexcept)\n  endif()\n\n  if(APPLE)\n    add_definitions(-Wno-sign-compare)\n  endif()\nendif()\n\nif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n  option(USE_LIBCXX \"Use clang's libcxx\" FALSE)\n\n  if(USE_LIBCXX)\n    add_definitions(-stdlib=libc++)\n    set(LINKER_FLAGS \"${LINKER_FLAGS} -stdlib=libc++\")\n  endif()\nendif()\n\n# limitations in MinGW require us to make an optimized build\n# for the sake of object sizes or something\nif(MINGW OR CYGWIN)\n  add_definitions(-O3)\nendif()\n\ninclude_directories(include)\n\n\nset(Chai_INCLUDES include/chaiscript/chaiscript.hpp include/chaiscript/chaiscript_threading.hpp include/chaiscript/dispatchkit/bad_boxed_cast.hpp include/chaiscript/dispatchkit/bind_first.hpp include/chaiscript/dispatchkit/bootstrap.hpp include/chaiscript/dispatchkit/bootstrap_stl.hpp include/chaiscript/dispatchkit/boxed_cast.hpp include/chaiscript/dispatchkit/boxed_cast_helper.hpp include/chaiscript/dispatchkit/boxed_number.hpp include/chaiscript/dispatchkit/boxed_value.hpp include/chaiscript/dispatchkit/dispatchkit.hpp include/chaiscript/dispatchkit/type_conversions.hpp include/chaiscript/dispatchkit/dynamic_object.hpp include/chaiscript/dispatchkit/exception_specification.hpp include/chaiscript/dispatchkit/function_call.hpp include/chaiscript/dispatchkit/function_call_detail.hpp include/chaiscript/dispatchkit/handle_return.hpp include/chaiscript/dispatchkit/operators.hpp include/chaiscript/dispatchkit/proxy_constructors.hpp include/chaiscript/dispatchkit/proxy_functions.hpp include/chaiscript/dispatchkit/proxy_functions_detail.hpp include/chaiscript/dispatchkit/register_function.hpp include/chaiscript/dispatchkit/type_info.hpp include/chaiscript/language/chaiscript_algebraic.hpp include/chaiscript/language/chaiscript_common.hpp include/chaiscript/language/chaiscript_engine.hpp include/chaiscript/language/chaiscript_eval.hpp include/chaiscript/language/chaiscript_parser.hpp include/chaiscript/language/chaiscript_prelude.hpp include/chaiscript/language/chaiscript_prelude_docs.hpp include/chaiscript/utility/utility.hpp include/chaiscript/utility/json.hpp include/chaiscript/utility/json_wrap.hpp)\n\nset_source_files_properties(${Chai_INCLUDES} PROPERTIES HEADER_FILE_ONLY TRUE)\n\nif(NOT MULTITHREAD_SUPPORT_ENABLED)\n  add_definitions(-DCHAISCRIPT_NO_THREADS)\nendif()\n\nif(NOT DYNLOAD_ENABLED)\n  add_definitions(-DCHAISCRIPT_NO_DYNLOAD)\nendif()\n\nif(CMAKE_HOST_UNIX)\n  if(DYNLOAD_ENABLED)\n    if(NOT ${CMAKE_SYSTEM_NAME} MATCHES \"FreeBSD\" AND NOT ${CMAKE_SYSTEM_NAME} MATCHES \"Haiku\")\n      list(APPEND LIBS \"dl\")\n    endif()\n  endif()\n\n  if(MULTITHREAD_SUPPORT_ENABLED)\n    if(CMAKE_COMPILER_IS_GNUCC)\n      execute_process(COMMAND ${CMAKE_C_COMPILER} --version OUTPUT_VARIABLE GCC_FULL_VERSION)\n      if(GCC_FULL_VERSION MATCHES \"4.8.1.*ubuntu\")\n        set(LINKER_FLAGS \"${LINKER_FLAGS} -Wl,--no-as-needed -pthread\")\n      else()\n        set(LINKER_FLAGS \"${LINKER_FLAGS} -pthread\")\n      endif()\n    else()\n      set(LINKER_FLAGS \"${LINKER_FLAGS} -pthread\")\n    endif()\n\n    add_definitions(-pthread)\n  endif()\n\nendif()\n\nlist(APPEND LIBS ${READLINE_LIB})\n\nset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${LINKER_FLAGS}\")\nset(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} ${LINKER_FLAGS}\")\nset(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} ${LINKER_FLAGS}\")\n\nadd_library(stdlib STATIC static_libs/chaiscript_stdlib.cpp)\nadd_library(parser STATIC static_libs/chaiscript_parser.cpp)\n\nadd_library(chaiscript_stdlib-${CHAI_VERSION} MODULE src/chaiscript_stdlib_module.cpp)\ntarget_link_libraries(chaiscript_stdlib-${CHAI_VERSION} ${LIBS} ${CMAKE_THREAD_LIBS_INIT})\n\nset(CHAISCRIPT_LIBS stdlib parser)\n\nadd_executable(chai src/main.cpp ${Chai_INCLUDES})\ntarget_link_libraries(chai ${LIBS} ${CHAISCRIPT_LIBS})\n\nadd_library(chaiscript INTERFACE)\ntarget_include_directories(chaiscript INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/include)\n\nif(BUILD_SAMPLES)\n  add_executable(sanity_checks src/sanity_checks.cpp)\n  target_link_libraries(sanity_checks ${LIBS})\n  add_executable(test_num_exceptions samples/test_num_exceptions.cpp)\n  target_link_libraries(test_num_exceptions ${LIBS} ${CHAISCRIPT_LIBS})\n  add_executable(memory_leak_test samples/memory_leak_test.cpp)\n  target_link_libraries(memory_leak_test ${LIBS} ${CHAISCRIPT_LIBS})\n  add_executable(inheritance samples/inheritance.cpp)\n  target_link_libraries(inheritance ${LIBS} ${CHAISCRIPT_LIBS})\n  add_executable(factory samples/factory.cpp)\n  target_link_libraries(factory ${LIBS} ${CHAISCRIPT_LIBS})\n  add_executable(fun_call_performance samples/fun_call_performance.cpp)\n  target_link_libraries(fun_call_performance ${LIBS} ${CHAISCRIPT_LIBS})\nendif()\n\n\nif(BUILD_MODULES)\n  add_library(test_module MODULE src/test_module.cpp)\n  target_link_libraries(test_module ${LIBS})\n\n  add_library(stl_extra MODULE src/stl_extra.cpp)\n  target_link_libraries(stl_extra ${LIBS})\n\n  set(MODULES stl_extra)\nendif()\n\n\nfile(GLOB UNIT_TESTS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}/unittests/ ${CMAKE_CURRENT_SOURCE_DIR}/unittests/*.chai ${CMAKE_CURRENT_SOURCE_DIR}/unittests/3.x/*.chai)\nlist(SORT UNIT_TESTS)\n\nfile(GLOB PERFORMANCE_TESTS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}/performance_tests/ ${CMAKE_CURRENT_SOURCE_DIR}/performance_tests/*.chai)\nlist(SORT PERFORMANCE_TESTS)\n\n\nif(RUN_FUZZY_TESTS)\n\n  file(MAKE_DIRECTORY \"${CMAKE_BINARY_DIR}/unittests\")\n\n  execute_process(\n    COMMAND ${CMAKE_COMMAND} -E tar xjf ${CMAKE_CURRENT_SOURCE_DIR}/unittests/fuzzy_tests-2017-07-20.tar.bz2\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/unittests\n    )\n\n\n  file(GLOB FUZZY_TESTS RELATIVE ${CMAKE_BINARY_DIR}/unittests/ ${CMAKE_BINARY_DIR}/unittests/MINIMIZED/*)\n  list(SORT FUZZY_TESTS)\n\n  foreach(filename ${FUZZY_TESTS})\n    message(STATUS \"Adding test ${filename}\")\n    add_test(fuzz.${filename} chai \"-e\" \"--exception\" \"--any-exception\" ${CMAKE_CURRENT_SOURCE_DIR}/unittests/fuzz_unit_test.inc ${CMAKE_BINARY_DIR}/unittests/${filename})\n  endforeach()\n\n  set_property(TEST ${FUZZY_EXCEPTION_TESTS}\n    PROPERTY ENVIRONMENT\n    \"CHAI_USE_PATH=${CMAKE_CURRENT_SOURCE_DIR}/unittests/\"\n    \"CHAI_MODULE_PATH=${CMAKE_CURRENT_BINARY_DIR}/\"\n    )\n\nendif()\n\n\nif(BUILD_TESTING)\n\n  option(UNIT_TEST_LIGHT \"Unit tests light (expect module loading failures)\" FALSE)\n\n  add_test(version_check chai -c  \"if(\\\"\\\\\\${ version() };\\\\\\${version_major()};\\\\\\${version_minor()};\\\\\\${version_patch()}\\\" != \\\"${CHAI_VERSION};${CPACK_PACKAGE_VERSION_MAJOR};${CPACK_PACKAGE_VERSION_MINOR};${CPACK_PACKAGE_VERSION_PATCH}\\\") { exit(-1) }\")\n  set_property(TEST version_check\n    PROPERTY ENVIRONMENT\n    \"CHAI_USE_PATH=${CMAKE_CURRENT_SOURCE_DIR}/unittests/\"\n    \"CHAI_MODULE_PATH=${CMAKE_CURRENT_BINARY_DIR}/\"\n  )\n\n  add_test(version_check_2 chai --version )\n  set_property(TEST version_check_2\n    PROPERTY ENVIRONMENT\n    \"CHAI_MODULE_PATH=${CMAKE_CURRENT_BINARY_DIR}/\"\n    PROPERTY PASS_REGULAR_EXPRESSION \"${CHAI_VERSION}\"\n  )\n\n  add_test(help chai --help )\n  set_property(TEST help\n    PROPERTY ENVIRONMENT\n    \"CHAI_MODULE_PATH=${CMAKE_CURRENT_BINARY_DIR}/\"\n  )\n\n\n  set(TESTS \"\")\n\n  foreach(filename ${UNIT_TESTS})\n    message(STATUS \"Adding unit test ${filename}\")\n    add_test(unit.${filename} chai ${CMAKE_CURRENT_SOURCE_DIR}/unittests/unit_test.inc ${CMAKE_CURRENT_SOURCE_DIR}/unittests/${filename})\n    list(APPEND TESTS unit.${filename})\n  endforeach()\n\n  if(RUN_PERFORMANCE_TESTS)\n    foreach(filename ${PERFORMANCE_TESTS})\n      message(STATUS \"Adding performance test ${filename}\")\n\n      add_test(NAME performance.${filename} COMMAND ${VALGRIND} --tool=callgrind --callgrind-out-file=callgrind.performance.${filename} $<TARGET_FILE:chai> ${CMAKE_CURRENT_SOURCE_DIR}/performance_tests/${filename})\n      list(APPEND TESTS performance.${filename})\n    endforeach()\n\n    add_executable(profile_cpp_calls_2 performance_tests/profile_cpp_calls_2.cpp)\n    target_link_libraries(profile_cpp_calls_2 ${LIBS})\n    add_test(NAME performance.profile_cpp_calls_2 COMMAND ${VALGRIND} --tool=callgrind --callgrind-out-file=callgrind.performance.profile_cpp_calls_2 $<TARGET_FILE:profile_cpp_calls_2>)\n\n    add_executable(profile_fun_wrappers performance_tests/profile_fun_wrappers.cpp)\n    target_link_libraries(profile_fun_wrappers ${LIBS})\n    add_test(NAME performance.profile_fun_wrappers COMMAND ${VALGRIND} --tool=callgrind --callgrind-out-file=callgrind.performance.profile_fun_wrappers $<TARGET_FILE:profile_fun_wrappers>)\n  endif()\n\n  set_property(TEST ${TESTS}\n    PROPERTY ENVIRONMENT\n    \"CHAI_USE_PATH=${CMAKE_CURRENT_SOURCE_DIR}/unittests/\"\n    \"CHAI_MODULE_PATH=${CMAKE_CURRENT_BINARY_DIR}/\"\n  )\n\n  if(NOT UNIT_TEST_LIGHT)\n    add_executable(compiled_tests unittests/compiled_tests.cpp)\n    target_link_libraries(compiled_tests ${LIBS} ${CHAISCRIPT_LIBS})\n    catch_discover_tests(compiled_tests TEST_PREFIX \"compiled.\")\n\n    add_executable(static_chaiscript_test unittests/static_chaiscript.cpp)\n    target_link_libraries(static_chaiscript_test ${LIBS})\n    add_test(NAME Static_ChaiScript_Test COMMAND static_chaiscript_test)\n\n    add_executable(boxed_cast_test unittests/boxed_cast_test.cpp)\n    target_link_libraries(boxed_cast_test ${LIBS})\n    add_test(NAME Boxed_Cast_Test COMMAND boxed_cast_test)\n\n    add_executable(type_info_test unittests/type_info_test.cpp)\n    target_link_libraries(type_info_test ${LIBS})\n    add_test(NAME Type_Info_Test COMMAND type_info_test)\n\n    add_executable(c_linkage_test unittests/c_linkage_test.cpp)\n    target_link_libraries(c_linkage_test ${LIBS} ${CHAISCRIPT_LIBS})\n    add_test(NAME C_Linkage_Test COMMAND c_linkage_test)\n\n    add_executable(integer_literal_test unittests/integer_literal_test.cpp)\n    target_link_libraries(integer_literal_test ${LIBS} ${CHAISCRIPT_LIBS})\n    add_test(NAME Integer_Literal_Test COMMAND integer_literal_test)\n\n    if(MULTITHREAD_SUPPORT_ENABLED)\n      add_executable(multithreaded_test unittests/multithreaded_test.cpp)\n      target_link_libraries(multithreaded_test ${LIBS})\n      add_test(NAME Multithreaded_Test COMMAND multithreaded_test)\n      set_property(TEST Multithreaded_Test\n        PROPERTY ENVIRONMENT\n        \"CHAI_USE_PATH=${CMAKE_CURRENT_SOURCE_DIR}/unittests/\"\n        \"CHAI_MODULE_PATH=${CMAKE_CURRENT_BINARY_DIR}/\"\n      )\n    endif()\n\n    add_executable(multifile_test\n      unittests/multifile_test_main.cpp\n      unittests/multifile_test_chai.cpp\n      unittests/multifile_test_module.cpp\n    )\n    target_link_libraries(multifile_test ${LIBS})\n    add_test(NAME MultiFile_Test COMMAND multifile_test)\n\n    install(TARGETS test_module RUNTIME DESTINATION bin LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}/chaiscript\")\n  endif()\nendif()\n\n\nif(BUILD_LIBFUZZ_TESTER)\n  add_executable(fuzzer src/libfuzzer_client.cpp src/sha3.cpp)\n  target_compile_options(fuzzer PRIVATE \"-fsanitize=fuzzer,address\")\n  target_link_libraries(fuzzer PRIVATE ${LIBS} \"-fsanitize=fuzzer,address\")\nendif()\n\n\ninstall(TARGETS chai chaiscript_stdlib-${CHAI_VERSION} ${MODULES} RUNTIME DESTINATION bin LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}/chaiscript\")\n\ninstall(DIRECTORY include/chaiscript DESTINATION include\n  PATTERN \"*.hpp\"\n  PATTERN \"*/.svn*\" EXCLUDE\n  PATTERN \"*/.git*\" EXCLUDE\n  PATTERN \"*~\" EXCLUDE)\ninstall(DIRECTORY unittests DESTINATION share/chaiscript\n  PATTERN \"*.chai\"\n  PATTERN \"*.inc\"\n  PATTERN \"*/.svn*\" EXCLUDE\n  PATTERN \"*/.git*\" EXCLUDE\n  PATTERN \"*~\" EXCLUDE)\ninstall(DIRECTORY samples DESTINATION share/chaiscript\n  PATTERN \"*.chai\"\n  PATTERN \"*/.svn*\" EXCLUDE\n  PATTERN \"*/.git*\" EXCLUDE\n  PATTERN \"*~\" EXCLUDE)\n\nconfigure_file(contrib/pkgconfig/chaiscript.pc.in lib/pkgconfig/chaiscript.pc @ONLY)\ninstall(FILES \"${chaiscript_BINARY_DIR}/lib/pkgconfig/chaiscript.pc\"\n        DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n\n    \n"
        },
        {
          "name": "DesignGoals.md",
          "type": "blob",
          "size": 1.025390625,
          "content": "# Introduction\n\nThis document outlines the principles that drive the development of ChaiScript. ChaiScript does not intent to be the perfect tool for *every* situation, but it does intend to be a good general purpose tool for *most* situations.\n\n# Goals\n\n1. Trivially easy to integrate with C++ projects\n2. 0 external depenencies\n3. \"Perfect\" integration with C++\n   * Direct mapping between ChaiScript objects and C++ objects\n   * Direct mapping between ChaiScript functions and C++ functions\n   * Direct mapping between ChaiScript exceptions and C++ exceptions\n3. Never surprise the C++ developer\n   * Object lifetimes managed by the stack\n   * Familiar syntax to C++ developers\n4. Perform \"well enough\" to not get in the way\n\n\n# Alternatives\n\n## Sol2\n\nIf you are looking for the fastest performing scripting language and don't mind Lua, you might want to consider [sol2](https://github.com/ThePhD/sol2).\n\n## SWIG\n\nIf you are looking for the most flexible solution to be able to support multiple target languages, consider [SWIG](http://swig.org)\n\n"
        },
        {
          "name": "Doxyfile.in",
          "type": "blob",
          "size": 78.83984375,
          "content": "# Doxyfile 1.8.4\n\n# This file describes the settings to be used by the documentation system\n# doxygen (www.doxygen.org) for a project.\n#\n# All text after a double hash (##) is considered a comment and is placed\n# in front of the TAG it is preceding .\n# All text after a hash (#) is considered a comment and will be ignored.\n# The format is:\n#       TAG = value [value, ...]\n# For lists items can also be appended using:\n#       TAG += value [value, ...]\n# Values that contain spaces should be placed between quotes (\" \").\n\n#---------------------------------------------------------------------------\n# Project related configuration options\n#---------------------------------------------------------------------------\n\n# This tag specifies the encoding used for all characters in the config file\n# that follow. The default is UTF-8 which is also the encoding used for all\n# text before the first occurrence of this tag. Doxygen uses libiconv (or the\n# iconv built into libc) for the transcoding. See\n# http://www.gnu.org/software/libiconv for the list of possible encodings.\n\nDOXYFILE_ENCODING      = UTF-8\n\n# The PROJECT_NAME tag is a single word (or sequence of words) that should\n# identify the project. Note that if you do not use Doxywizard you need\n# to put quotes around the project name if it contains spaces.\n\nPROJECT_NAME           = \"ChaiScript\"\n\n# The PROJECT_NUMBER tag can be used to enter a project or revision number.\n# This could be handy for archiving the generated documentation or\n# if some version control system is used.\n\nPROJECT_NUMBER         = ${CHAI_VERSION}\n\n# Using the PROJECT_BRIEF tag one can provide an optional one line description\n# for a project that appears at the top of each page and should give viewer\n# a quick idea about the purpose of the project. Keep the description short.\n\nPROJECT_BRIEF          = \"An easy to use embedded scripting language for C++.\"\n\n# With the PROJECT_LOGO tag one can specify an logo or icon that is\n# included in the documentation. The maximum height of the logo should not\n# exceed 55 pixels and the maximum width should not exceed 200 pixels.\n# Doxygen will copy the logo to the output directory.\n\nPROJECT_LOGO           =\n\n# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute)\n# base path where the generated documentation will be put.\n# If a relative path is entered, it will be relative to the location\n# where doxygen was started. If left blank the current directory will be used.\n\nOUTPUT_DIRECTORY       = docs\n\n# If the CREATE_SUBDIRS tag is set to YES, then doxygen will create\n# 4096 sub-directories (in 2 levels) under the output directory of each output\n# format and will distribute the generated files over these directories.\n# Enabling this option can be useful when feeding doxygen a huge amount of\n# source files, where putting all generated files in the same directory would\n# otherwise cause performance problems for the file system.\n\nCREATE_SUBDIRS         = NO\n\n# The OUTPUT_LANGUAGE tag is used to specify the language in which all\n# documentation generated by doxygen is written. Doxygen will use this\n# information to generate all constant output in the proper language.\n# The default language is English, other supported languages are:\n# Afrikaans, Arabic, Brazilian, Catalan, Chinese, Chinese-Traditional,\n# Croatian, Czech, Danish, Dutch, Esperanto, Farsi, Finnish, French, German,\n# Greek, Hungarian, Italian, Japanese, Japanese-en (Japanese with English\n# messages), Korean, Korean-en, Latvian, Lithuanian, Norwegian, Macedonian,\n# Persian, Polish, Portuguese, Romanian, Russian, Serbian, Serbian-Cyrillic,\n# Slovak, Slovene, Spanish, Swedish, Ukrainian, and Vietnamese.\n\nOUTPUT_LANGUAGE        = English\n\n# If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will\n# include brief member descriptions after the members that are listed in\n# the file and class documentation (similar to JavaDoc).\n# Set to NO to disable this.\n\nBRIEF_MEMBER_DESC      = YES\n\n# If the REPEAT_BRIEF tag is set to YES (the default) Doxygen will prepend\n# the brief description of a member or function before the detailed description.\n# Note: if both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the\n# brief descriptions will be completely suppressed.\n\nREPEAT_BRIEF           = YES\n\n# This tag implements a quasi-intelligent brief description abbreviator\n# that is used to form the text in various listings. Each string\n# in this list, if found as the leading text of the brief description, will be\n# stripped from the text and the result after processing the whole list, is\n# used as the annotated text. Otherwise, the brief description is used as-is.\n# If left blank, the following values are used (\"$name\" is automatically\n# replaced with the name of the entity): \"The $name class\" \"The $name widget\"\n# \"The $name file\" \"is\" \"provides\" \"specifies\" \"contains\"\n# \"represents\" \"a\" \"an\" \"the\"\n\nABBREVIATE_BRIEF       =\n\n# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then\n# Doxygen will generate a detailed section even if there is only a brief\n# description.\n\nALWAYS_DETAILED_SEC    = NO\n\n# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all\n# inherited members of a class in the documentation of that class as if those\n# members were ordinary class members. Constructors, destructors and assignment\n# operators of the base classes will not be shown.\n\nINLINE_INHERITED_MEMB  = NO\n\n# If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full\n# path before files name in the file list and in the header files. If set\n# to NO the shortest path that makes the file name unique will be used.\n\nFULL_PATH_NAMES        = YES\n\n# If the FULL_PATH_NAMES tag is set to YES then the STRIP_FROM_PATH tag\n# can be used to strip a user-defined part of the path. Stripping is\n# only done if one of the specified strings matches the left-hand part of\n# the path. The tag can be used to show relative paths in the file list.\n# If left blank the directory from which doxygen is run is used as the\n# path to strip. Note that you specify absolute paths here, but also\n# relative paths, which will be relative from the directory where doxygen is\n# started.\n\nSTRIP_FROM_PATH        = ${CMAKE_SOURCE_DIR}\n\n# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of\n# the path mentioned in the documentation of a class, which tells\n# the reader which header file to include in order to use a class.\n# If left blank only the name of the header file containing the class\n# definition is used. Otherwise one should specify the include paths that\n# are normally passed to the compiler using the -I flag.\n\nSTRIP_FROM_INC_PATH    = ${CMAKE_SOURCE_DIR}/include/\n\n# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter\n# (but less readable) file names. This can be useful if your file system\n# doesn't support long names like on DOS, Mac, or CD-ROM.\n\nSHORT_NAMES            = NO\n\n# If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen\n# will interpret the first line (until the first dot) of a JavaDoc-style\n# comment as the brief description. If set to NO, the JavaDoc\n# comments will behave just like regular Qt-style comments\n# (thus requiring an explicit @brief command for a brief description.)\n\nJAVADOC_AUTOBRIEF      = NO\n\n# If the QT_AUTOBRIEF tag is set to YES then Doxygen will\n# interpret the first line (until the first dot) of a Qt-style\n# comment as the brief description. If set to NO, the comments\n# will behave just like regular Qt-style comments (thus requiring\n# an explicit \\brief command for a brief description.)\n\nQT_AUTOBRIEF           = NO\n\n# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make Doxygen\n# treat a multi-line C++ special comment block (i.e. a block of //! or ///\n# comments) as a brief description. This used to be the default behaviour.\n# The new default is to treat a multi-line C++ comment block as a detailed\n# description. Set this tag to YES if you prefer the old behaviour instead.\n\nMULTILINE_CPP_IS_BRIEF = NO\n\n# If the INHERIT_DOCS tag is set to YES (the default) then an undocumented\n# member inherits the documentation from any documented member that it\n# re-implements.\n\nINHERIT_DOCS           = YES\n\n# If the SEPARATE_MEMBER_PAGES tag is set to YES, then doxygen will produce\n# a new page for each member. If set to NO, the documentation of a member will\n# be part of the file/class/namespace that contains it.\n\nSEPARATE_MEMBER_PAGES  = NO\n\n# The TAB_SIZE tag can be used to set the number of spaces in a tab.\n# Doxygen uses this value to replace tabs by spaces in code fragments.\n\nTAB_SIZE               = 2\n\n# This tag can be used to specify a number of aliases that acts\n# as commands in the documentation. An alias has the form \"name=value\".\n# For example adding \"sideeffect=\\par Side Effects:\\n\" will allow you to\n# put the command \\sideeffect (or @sideeffect) in the documentation, which\n# will result in a user-defined paragraph with heading \"Side Effects:\".\n# You can put \\n's in the value part of an alias to insert newlines.\n\nALIASES                =\n\n# This tag can be used to specify a number of word-keyword mappings (TCL only).\n# A mapping has the form \"name=value\". For example adding\n# \"class=itcl::class\" will allow you to use the command class in the\n# itcl::class meaning.\n\nTCL_SUBST              =\n\n# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C\n# sources only. Doxygen will then generate output that is more tailored for C.\n# For instance, some of the names that are used will be different. The list\n# of all members will be omitted, etc.\n\nOPTIMIZE_OUTPUT_FOR_C  = NO\n\n# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java\n# sources only. Doxygen will then generate output that is more tailored for\n# Java. For instance, namespaces will be presented as packages, qualified\n# scopes will look different, etc.\n\nOPTIMIZE_OUTPUT_JAVA   = NO\n\n# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran\n# sources only. Doxygen will then generate output that is more tailored for\n# Fortran.\n\nOPTIMIZE_FOR_FORTRAN   = NO\n\n# Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL\n# sources. Doxygen will then generate output that is tailored for\n# VHDL.\n\nOPTIMIZE_OUTPUT_VHDL   = NO\n\n# Doxygen selects the parser to use depending on the extension of the files it\n# parses. With this tag you can assign which parser to use for a given\n# extension. Doxygen has a built-in mapping, but you can override or extend it\n# using this tag. The format is ext=language, where ext is a file extension,\n# and language is one of the parsers supported by doxygen: IDL, Java,\n# Javascript, CSharp, C, C++, D, PHP, Objective-C, Python, Fortran, VHDL, C,\n# C++. For instance to make doxygen treat .inc files as Fortran files (default\n# is PHP), and .f files as C (default is Fortran), use: inc=Fortran f=C. Note\n# that for custom extensions you also need to set FILE_PATTERNS otherwise the\n# files are not read by doxygen.\n\nEXTENSION_MAPPING      =\n\n# If MARKDOWN_SUPPORT is enabled (the default) then doxygen pre-processes all\n# comments according to the Markdown format, which allows for more readable\n# documentation. See http://daringfireball.net/projects/markdown/ for details.\n# The output of markdown processing is further processed by doxygen, so you\n# can mix doxygen, HTML, and XML commands with Markdown formatting.\n# Disable only in case of backward compatibilities issues.\n\nMARKDOWN_SUPPORT       = YES\n\n# When enabled doxygen tries to link words that correspond to documented\n# classes, or namespaces to their corresponding documentation. Such a link can\n# be prevented in individual cases by by putting a % sign in front of the word\n# or globally by setting AUTOLINK_SUPPORT to NO.\n\nAUTOLINK_SUPPORT       = YES\n\n# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want\n# to include (a tag file for) the STL sources as input, then you should\n# set this tag to YES in order to let doxygen match functions declarations and\n# definitions whose arguments contain STL classes (e.g. func(std::string); v.s.\n# func(std::string) {}). This also makes the inheritance and collaboration\n# diagrams that involve STL classes more complete and accurate.\n\nBUILTIN_STL_SUPPORT    = YES\n\n# If you use Microsoft's C++/CLI language, you should set this option to YES to\n# enable parsing support.\n\nCPP_CLI_SUPPORT        = NO\n\n# Set the SIP_SUPPORT tag to YES if your project consists of sip sources only.\n# Doxygen will parse them like normal C++ but will assume all classes use public\n# instead of private inheritance when no explicit protection keyword is present.\n\nSIP_SUPPORT            = NO\n\n# For Microsoft's IDL there are propget and propput attributes to indicate\n# getter and setter methods for a property. Setting this option to YES (the\n# default) will make doxygen replace the get and set methods by a property in\n# the documentation. This will only work if the methods are indeed getting or\n# setting a simple type. If this is not the case, or you want to show the\n# methods anyway, you should set this option to NO.\n\nIDL_PROPERTY_SUPPORT   = YES\n\n# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC\n# tag is set to YES, then doxygen will reuse the documentation of the first\n# member in the group (if any) for the other members of the group. By default\n# all members of a group must be documented explicitly.\n\nDISTRIBUTE_GROUP_DOC   = NO\n\n# Set the SUBGROUPING tag to YES (the default) to allow class member groups of\n# the same type (for instance a group of public functions) to be put as a\n# subgroup of that type (e.g. under the Public Functions section). Set it to\n# NO to prevent subgrouping. Alternatively, this can be done per class using\n# the \\nosubgrouping command.\n\nSUBGROUPING            = YES\n\n# When the INLINE_GROUPED_CLASSES tag is set to YES, classes, structs and\n# unions are shown inside the group in which they are included (e.g. using\n# @ingroup) instead of on a separate page (for HTML and Man pages) or\n# section (for LaTeX and RTF).\n\nINLINE_GROUPED_CLASSES = NO\n\n# When the INLINE_SIMPLE_STRUCTS tag is set to YES, structs, classes, and\n# unions with only public data fields or simple typedef fields will be shown\n# inline in the documentation of the scope in which they are defined (i.e. file,\n# namespace, or group documentation), provided this scope is documented. If set\n# to NO (the default), structs, classes, and unions are shown on a separate\n# page (for HTML and Man pages) or section (for LaTeX and RTF).\n\nINLINE_SIMPLE_STRUCTS  = YES\n\n# When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum\n# is documented as struct, union, or enum with the name of the typedef. So\n# typedef struct TypeS {} TypeT, will appear in the documentation as a struct\n# with name TypeT. When disabled the typedef will appear as a member of a file,\n# namespace, or class. And the struct will be named TypeS. This can typically\n# be useful for C code in case the coding convention dictates that all compound\n# types are typedef'ed and only the typedef is referenced, never the tag name.\n\nTYPEDEF_HIDES_STRUCT   = NO\n\n# The size of the symbol lookup cache can be set using LOOKUP_CACHE_SIZE. This\n# cache is used to resolve symbols given their name and scope. Since this can\n# be an expensive process and often the same symbol appear multiple times in\n# the code, doxygen keeps a cache of pre-resolved symbols. If the cache is too\n# small doxygen will become slower. If the cache is too large, memory is wasted.\n# The cache size is given by this formula: 2^(16+LOOKUP_CACHE_SIZE). The valid\n# range is 0..9, the default is 0, corresponding to a cache size of 2^16 = 65536\n# symbols.\n\nLOOKUP_CACHE_SIZE      = 0\n\n#---------------------------------------------------------------------------\n# Build related configuration options\n#---------------------------------------------------------------------------\n\n# If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in\n# documentation are documented, even if no documentation was available.\n# Private class members and static file members will be hidden unless\n# the EXTRACT_PRIVATE respectively EXTRACT_STATIC tags are set to YES\n\nEXTRACT_ALL            = YES\n\n# If the EXTRACT_PRIVATE tag is set to YES all private members of a class\n# will be included in the documentation.\n\nEXTRACT_PRIVATE        = NO\n\n# If the EXTRACT_PACKAGE tag is set to YES all members with package or internal\n# scope will be included in the documentation.\n\nEXTRACT_PACKAGE        = YES\n\n# If the EXTRACT_STATIC tag is set to YES all static members of a file\n# will be included in the documentation.\n\nEXTRACT_STATIC         = YES\n\n# If the EXTRACT_LOCAL_CLASSES tag is set to YES classes (and structs)\n# defined locally in source files will be included in the documentation.\n# If set to NO only classes defined in header files are included.\n\nEXTRACT_LOCAL_CLASSES  = YES\n\n# This flag is only useful for Objective-C code. When set to YES local\n# methods, which are defined in the implementation section but not in\n# the interface are included in the documentation.\n# If set to NO (the default) only methods in the interface are included.\n\nEXTRACT_LOCAL_METHODS  = NO\n\n# If this flag is set to YES, the members of anonymous namespaces will be\n# extracted and appear in the documentation as a namespace called\n# 'anonymous_namespace{file}', where file will be replaced with the base\n# name of the file that contains the anonymous namespace. By default\n# anonymous namespaces are hidden.\n\nEXTRACT_ANON_NSPACES   = NO\n\n# If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all\n# undocumented members of documented classes, files or namespaces.\n# If set to NO (the default) these members will be included in the\n# various overviews, but no documentation section is generated.\n# This option has no effect if EXTRACT_ALL is enabled.\n\nHIDE_UNDOC_MEMBERS     = NO\n\n# If the HIDE_UNDOC_CLASSES tag is set to YES, Doxygen will hide all\n# undocumented classes that are normally visible in the class hierarchy.\n# If set to NO (the default) these classes will be included in the various\n# overviews. This option has no effect if EXTRACT_ALL is enabled.\n\nHIDE_UNDOC_CLASSES     = NO\n\n# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, Doxygen will hide all\n# friend (class|struct|union) declarations.\n# If set to NO (the default) these declarations will be included in the\n# documentation.\n\nHIDE_FRIEND_COMPOUNDS  = NO\n\n# If the HIDE_IN_BODY_DOCS tag is set to YES, Doxygen will hide any\n# documentation blocks found inside the body of a function.\n# If set to NO (the default) these blocks will be appended to the\n# function's detailed documentation block.\n\nHIDE_IN_BODY_DOCS      = NO\n\n# The INTERNAL_DOCS tag determines if documentation\n# that is typed after a \\internal command is included. If the tag is set\n# to NO (the default) then the documentation will be excluded.\n# Set it to YES to include the internal documentation.\n\nINTERNAL_DOCS          = NO\n\n# If the CASE_SENSE_NAMES tag is set to NO then Doxygen will only generate\n# file names in lower-case letters. If set to YES upper-case letters are also\n# allowed. This is useful if you have classes or files whose names only differ\n# in case and if your file system supports case sensitive file names. Windows\n# and Mac users are advised to set this option to NO.\n\nCASE_SENSE_NAMES       = YES\n\n# If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen\n# will show members with their full class and namespace scopes in the\n# documentation. If set to YES the scope will be hidden.\n\nHIDE_SCOPE_NAMES       = NO\n\n# If the SHOW_INCLUDE_FILES tag is set to YES (the default) then Doxygen\n# will put a list of the files that are included by a file in the documentation\n# of that file.\n\nSHOW_INCLUDE_FILES     = YES\n\n# If the FORCE_LOCAL_INCLUDES tag is set to YES then Doxygen\n# will list include files with double quotes in the documentation\n# rather than with sharp brackets.\n\nFORCE_LOCAL_INCLUDES   = NO\n\n# If the INLINE_INFO tag is set to YES (the default) then a tag [inline]\n# is inserted in the documentation for inline members.\n\nINLINE_INFO            = YES\n\n# If the SORT_MEMBER_DOCS tag is set to YES (the default) then doxygen\n# will sort the (detailed) documentation of file and class members\n# alphabetically by member name. If set to NO the members will appear in\n# declaration order.\n\nSORT_MEMBER_DOCS       = YES\n\n# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the\n# brief documentation of file, namespace and class members alphabetically\n# by member name. If set to NO (the default) the members will appear in\n# declaration order.\n\nSORT_BRIEF_DOCS        = NO\n\n# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen\n# will sort the (brief and detailed) documentation of class members so that\n# constructors and destructors are listed first. If set to NO (the default)\n# the constructors will appear in the respective orders defined by\n# SORT_MEMBER_DOCS and SORT_BRIEF_DOCS.\n# This tag will be ignored for brief docs if SORT_BRIEF_DOCS is set to NO\n# and ignored for detailed docs if SORT_MEMBER_DOCS is set to NO.\n\nSORT_MEMBERS_CTORS_1ST = NO\n\n# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the\n# hierarchy of group names into alphabetical order. If set to NO (the default)\n# the group names will appear in their defined order.\n\nSORT_GROUP_NAMES       = NO\n\n# If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be\n# sorted by fully-qualified names, including namespaces. If set to\n# NO (the default), the class list will be sorted only by class name,\n# not including the namespace part.\n# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES.\n# Note: This option applies only to the class list, not to the\n# alphabetical list.\n\nSORT_BY_SCOPE_NAME     = NO\n\n# If the STRICT_PROTO_MATCHING option is enabled and doxygen fails to\n# do proper type resolution of all parameters of a function it will reject a\n# match between the prototype and the implementation of a member function even\n# if there is only one candidate or it is obvious which candidate to choose\n# by doing a simple string match. By disabling STRICT_PROTO_MATCHING doxygen\n# will still accept a match between prototype and implementation in such cases.\n\nSTRICT_PROTO_MATCHING  = NO\n\n# The GENERATE_TODOLIST tag can be used to enable (YES) or\n# disable (NO) the todo list. This list is created by putting \\todo\n# commands in the documentation.\n\nGENERATE_TODOLIST      = YES\n\n# The GENERATE_TESTLIST tag can be used to enable (YES) or\n# disable (NO) the test list. This list is created by putting \\test\n# commands in the documentation.\n\nGENERATE_TESTLIST      = YES\n\n# The GENERATE_BUGLIST tag can be used to enable (YES) or\n# disable (NO) the bug list. This list is created by putting \\bug\n# commands in the documentation.\n\nGENERATE_BUGLIST       = YES\n\n# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or\n# disable (NO) the deprecated list. This list is created by putting\n# \\deprecated commands in the documentation.\n\nGENERATE_DEPRECATEDLIST= YES\n\n# The ENABLED_SECTIONS tag can be used to enable conditional\n# documentation sections, marked by \\if section-label ... \\endif\n# and \\cond section-label ... \\endcond blocks.\n\nENABLED_SECTIONS       =\n\n# The MAX_INITIALIZER_LINES tag determines the maximum number of lines\n# the initial value of a variable or macro consists of for it to appear in\n# the documentation. If the initializer consists of more lines than specified\n# here it will be hidden. Use a value of 0 to hide initializers completely.\n# The appearance of the initializer of individual variables and macros in the\n# documentation can be controlled using \\showinitializer or \\hideinitializer\n# command in the documentation regardless of this setting.\n\nMAX_INITIALIZER_LINES  = 30\n\n# Set the SHOW_USED_FILES tag to NO to disable the list of files generated\n# at the bottom of the documentation of classes and structs. If set to YES the\n# list will mention the files that were used to generate the documentation.\n\nSHOW_USED_FILES        = YES\n\n# Set the SHOW_FILES tag to NO to disable the generation of the Files page.\n# This will remove the Files entry from the Quick Index and from the\n# Folder Tree View (if specified). The default is YES.\n\nSHOW_FILES             = YES\n\n# Set the SHOW_NAMESPACES tag to NO to disable the generation of the\n# Namespaces page.\n# This will remove the Namespaces entry from the Quick Index\n# and from the Folder Tree View (if specified). The default is YES.\n\nSHOW_NAMESPACES        = YES\n\n# The FILE_VERSION_FILTER tag can be used to specify a program or script that\n# doxygen should invoke to get the current version for each file (typically from\n# the version control system). Doxygen will invoke the program by executing (via\n# popen()) the command <command> <input-file>, where <command> is the value of\n# the FILE_VERSION_FILTER tag, and <input-file> is the name of an input file\n# provided by doxygen. Whatever the program writes to standard output\n# is used as the file version. See the manual for examples.\n\nFILE_VERSION_FILTER    =\n\n# The LAYOUT_FILE tag can be used to specify a layout file which will be parsed\n# by doxygen. The layout file controls the global structure of the generated\n# output files in an output format independent way. To create the layout file\n# that represents doxygen's defaults, run doxygen with the -l option.\n# You can optionally specify a file name after the option, if omitted\n# DoxygenLayout.xml will be used as the name of the layout file.\n\nLAYOUT_FILE            =\n\n# The CITE_BIB_FILES tag can be used to specify one or more bib files\n# containing the references data. This must be a list of .bib files. The\n# .bib extension is automatically appended if omitted. Using this command\n# requires the bibtex tool to be installed. See also\n# http://en.wikipedia.org/wiki/BibTeX for more info. For LaTeX the style\n# of the bibliography can be controlled using LATEX_BIB_STYLE. To use this\n# feature you need bibtex and perl available in the search path. Do not use\n# file names with spaces, bibtex cannot handle them.\n\nCITE_BIB_FILES         =\n\n#---------------------------------------------------------------------------\n# configuration options related to warning and progress messages\n#---------------------------------------------------------------------------\n\n# The QUIET tag can be used to turn on/off the messages that are generated\n# by doxygen. Possible values are YES and NO. If left blank NO is used.\n\nQUIET                  = NO\n\n# The WARNINGS tag can be used to turn on/off the warning messages that are\n# generated by doxygen. Possible values are YES and NO. If left blank\n# NO is used.\n\nWARNINGS               = YES\n\n# If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate warnings\n# for undocumented members. If EXTRACT_ALL is set to YES then this flag will\n# automatically be disabled.\n\nWARN_IF_UNDOCUMENTED   = YES\n\n# If WARN_IF_DOC_ERROR is set to YES, doxygen will generate warnings for\n# potential errors in the documentation, such as not documenting some\n# parameters in a documented function, or documenting parameters that\n# don't exist or using markup commands wrongly.\n\nWARN_IF_DOC_ERROR      = YES\n\n# The WARN_NO_PARAMDOC option can be enabled to get warnings for\n# functions that are documented, but have no documentation for their parameters\n# or return value. If set to NO (the default) doxygen will only warn about\n# wrong or incomplete parameter documentation, but not about the absence of\n# documentation.\n\nWARN_NO_PARAMDOC       = NO\n\n# The WARN_FORMAT tag determines the format of the warning messages that\n# doxygen can produce. The string should contain the $file, $line, and $text\n# tags, which will be replaced by the file and line number from which the\n# warning originated and the warning text. Optionally the format may contain\n# $version, which will be replaced by the version of the file (if it could\n# be obtained via FILE_VERSION_FILTER)\n\nWARN_FORMAT            = \"$file:$line: $text\"\n\n# The WARN_LOGFILE tag can be used to specify a file to which warning\n# and error messages should be written. If left blank the output is written\n# to stderr.\n\nWARN_LOGFILE           =\n\n#---------------------------------------------------------------------------\n# configuration options related to the input files\n#---------------------------------------------------------------------------\n\n# The INPUT tag can be used to specify the files and/or directories that contain\n# documented source files. You may enter file names like \"myfile.cpp\" or\n# directories like \"/usr/src/myproject\". Separate the files or directories\n# with spaces.\n\nINPUT                  = ${CMAKE_SOURCE_DIR}/include/chaiscript\n\n# This tag can be used to specify the character encoding of the source files\n# that doxygen parses. Internally doxygen uses the UTF-8 encoding, which is\n# also the default input encoding. Doxygen uses libiconv (or the iconv built\n# into libc) for the transcoding. See http://www.gnu.org/software/libiconv for\n# the list of possible encodings.\n\nINPUT_ENCODING         = UTF-8\n\n# If the value of the INPUT tag contains directories, you can use the\n# FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp\n# and *.h) to filter out the source-files in the directories. If left\n# blank the following patterns are tested:\n# *.c *.cc *.cxx *.cpp *.c++ *.d *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh\n# *.hxx *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.dox *.py\n# *.f90 *.f *.for *.vhd *.vhdl\n\nFILE_PATTERNS          =\n\n# The RECURSIVE tag can be used to turn specify whether or not subdirectories\n# should be searched for input files as well. Possible values are YES and NO.\n# If left blank NO is used.\n\nRECURSIVE              = YES\n\n# The EXCLUDE tag can be used to specify files and/or directories that should be\n# excluded from the INPUT source files. This way you can easily exclude a\n# subdirectory from a directory tree whose root is specified with the INPUT tag.\n# Note that relative paths are relative to the directory from which doxygen is\n# run.\n\nEXCLUDE                =\n\n# The EXCLUDE_SYMLINKS tag can be used to select whether or not files or\n# directories that are symbolic links (a Unix file system feature) are excluded\n# from the input.\n\nEXCLUDE_SYMLINKS       = NO\n\n# If the value of the INPUT tag contains directories, you can use the\n# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude\n# certain files from those directories. Note that the wildcards are matched\n# against the file with absolute path, so to exclude all test directories\n# for example use the pattern */test/*\n\nEXCLUDE_PATTERNS       =\n\n# The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names\n# (namespaces, classes, functions, etc.) that should be excluded from the\n# output. The symbol name can be a fully qualified name, a word, or if the\n# wildcard * is used, a substring. Examples: ANamespace, AClass,\n# AClass::ANamespace, ANamespace::*Test\n\nEXCLUDE_SYMBOLS        =\n\n# The EXAMPLE_PATH tag can be used to specify one or more files or\n# directories that contain example code fragments that are included (see\n# the \\include command).\n\nEXAMPLE_PATH           =\n\n# If the value of the EXAMPLE_PATH tag contains directories, you can use the\n# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp\n# and *.h) to filter out the source-files in the directories. If left\n# blank all files are included.\n\nEXAMPLE_PATTERNS       =\n\n# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be\n# searched for input files to be used with the \\include or \\dontinclude\n# commands irrespective of the value of the RECURSIVE tag.\n# Possible values are YES and NO. If left blank NO is used.\n\nEXAMPLE_RECURSIVE      = NO\n\n# The IMAGE_PATH tag can be used to specify one or more files or\n# directories that contain image that are included in the documentation (see\n# the \\image command).\n\nIMAGE_PATH             =\n\n# The INPUT_FILTER tag can be used to specify a program that doxygen should\n# invoke to filter for each input file. Doxygen will invoke the filter program\n# by executing (via popen()) the command <filter> <input-file>, where <filter>\n# is the value of the INPUT_FILTER tag, and <input-file> is the name of an\n# input file. Doxygen will then use the output that the filter program writes\n# to standard output.\n# If FILTER_PATTERNS is specified, this tag will be ignored.\n# Note that the filter must not add or remove lines; it is applied before the\n# code is scanned, but not when the output code is generated. If lines are added\n# or removed, the anchors will not be placed correctly.\n\nINPUT_FILTER           =\n\n# The FILTER_PATTERNS tag can be used to specify filters on a per file pattern\n# basis.\n# Doxygen will compare the file name with each pattern and apply the\n# filter if there is a match.\n# The filters are a list of the form:\n# pattern=filter (like *.cpp=my_cpp_filter). See INPUT_FILTER for further\n# info on how filters are used. If FILTER_PATTERNS is empty or if\n# non of the patterns match the file name, INPUT_FILTER is applied.\n\nFILTER_PATTERNS        =\n\n# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using\n# INPUT_FILTER) will be used to filter the input files when producing source\n# files to browse (i.e. when SOURCE_BROWSER is set to YES).\n\nFILTER_SOURCE_FILES    = NO\n\n# The FILTER_SOURCE_PATTERNS tag can be used to specify source filters per file\n# pattern. A pattern will override the setting for FILTER_PATTERN (if any)\n# and it is also possible to disable source filtering for a specific pattern\n# using *.ext= (so without naming a filter). This option only has effect when\n# FILTER_SOURCE_FILES is enabled.\n\nFILTER_SOURCE_PATTERNS =\n\n# If the USE_MD_FILE_AS_MAINPAGE tag refers to the name of a markdown file that\n# is part of the input, its contents will be placed on the main page\n# (index.html). This can be useful if you have a project on for instance GitHub\n# and want reuse the introduction page also for the doxygen output.\n\nUSE_MDFILE_AS_MAINPAGE = ${CMAKE_SOURCE_DIR}/readme.md\n\n#---------------------------------------------------------------------------\n# configuration options related to source browsing\n#---------------------------------------------------------------------------\n\n# If the SOURCE_BROWSER tag is set to YES then a list of source files will\n# be generated. Documented entities will be cross-referenced with these sources.\n# Note: To get rid of all source code in the generated output, make sure also\n# VERBATIM_HEADERS is set to NO.\n\nSOURCE_BROWSER         = YES\n\n# Setting the INLINE_SOURCES tag to YES will include the body\n# of functions and classes directly in the documentation.\n\nINLINE_SOURCES         = NO\n\n# Setting the STRIP_CODE_COMMENTS tag to YES (the default) will instruct\n# doxygen to hide any special comment blocks from generated source code\n# fragments. Normal C, C++ and Fortran comments will always remain visible.\n\nSTRIP_CODE_COMMENTS    = YES\n\n# If the REFERENCED_BY_RELATION tag is set to YES\n# then for each documented function all documented\n# functions referencing it will be listed.\n\nREFERENCED_BY_RELATION = NO\n\n# If the REFERENCES_RELATION tag is set to YES\n# then for each documented function all documented entities\n# called/used by that function will be listed.\n\nREFERENCES_RELATION    = NO\n\n# If the REFERENCES_LINK_SOURCE tag is set to YES (the default)\n# and SOURCE_BROWSER tag is set to YES, then the hyperlinks from\n# functions in REFERENCES_RELATION and REFERENCED_BY_RELATION lists will\n# link to the source code.\n# Otherwise they will link to the documentation.\n\nREFERENCES_LINK_SOURCE = YES\n\n# If the USE_HTAGS tag is set to YES then the references to source code\n# will point to the HTML generated by the htags(1) tool instead of doxygen\n# built-in source browser. The htags tool is part of GNU's global source\n# tagging system (see http://www.gnu.org/software/global/global.html). You\n# will need version 4.8.6 or higher.\n\nUSE_HTAGS              = NO\n\n# If the VERBATIM_HEADERS tag is set to YES (the default) then Doxygen\n# will generate a verbatim copy of the header file for each class for\n# which an include is specified. Set to NO to disable this.\n\nVERBATIM_HEADERS       = YES\n\n#---------------------------------------------------------------------------\n# configuration options related to the alphabetical class index\n#---------------------------------------------------------------------------\n\n# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index\n# of all compounds will be generated. Enable this if the project\n# contains a lot of classes, structs, unions or interfaces.\n\nALPHABETICAL_INDEX     = YES\n\n# If the alphabetical index is enabled (see ALPHABETICAL_INDEX) then\n# the COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns\n# in which this list will be split (can be a number in the range [1..20])\n\nCOLS_IN_ALPHA_INDEX    = 5\n\n# In case all classes in a project start with a common prefix, all\n# classes will be put under the same header in the alphabetical index.\n# The IGNORE_PREFIX tag can be used to specify one or more prefixes that\n# should be ignored while generating the index headers.\n\nIGNORE_PREFIX          =\n\n#---------------------------------------------------------------------------\n# configuration options related to the HTML output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_HTML tag is set to YES (the default) Doxygen will\n# generate HTML output.\n\nGENERATE_HTML          = YES\n\n# The HTML_OUTPUT tag is used to specify where the HTML docs will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `html' will be used as the default path.\n\nHTML_OUTPUT            = html\n\n# The HTML_FILE_EXTENSION tag can be used to specify the file extension for\n# each generated HTML page (for example: .htm,.php,.asp). If it is left blank\n# doxygen will generate files with .html extension.\n\nHTML_FILE_EXTENSION    = .html\n\n# The HTML_HEADER tag can be used to specify a personal HTML header for\n# each generated HTML page. If it is left blank doxygen will generate a\n# standard header. Note that when using a custom header you are responsible\n#  for the proper inclusion of any scripts and style sheets that doxygen\n# needs, which is dependent on the configuration options used.\n# It is advised to generate a default header using \"doxygen -w html\n# header.html footer.html stylesheet.css YourConfigFile\" and then modify\n# that header. Note that the header is subject to change so you typically\n# have to redo this when upgrading to a newer version of doxygen or when\n# changing the value of configuration settings such as GENERATE_TREEVIEW!\n\nHTML_HEADER            =\n\n# The HTML_FOOTER tag can be used to specify a personal HTML footer for\n# each generated HTML page. If it is left blank doxygen will generate a\n# standard footer.\n\nHTML_FOOTER            =\n\n# The HTML_STYLESHEET tag can be used to specify a user-defined cascading\n# style sheet that is used by each HTML page. It can be used to\n# fine-tune the look of the HTML output. If left blank doxygen will\n# generate a default style sheet. Note that it is recommended to use\n# HTML_EXTRA_STYLESHEET instead of this one, as it is more robust and this\n# tag will in the future become obsolete.\n\nHTML_STYLESHEET        =\n\n# The HTML_EXTRA_STYLESHEET tag can be used to specify an additional\n# user-defined cascading style sheet that is included after the standard\n# style sheets created by doxygen. Using this option one can overrule\n# certain style aspects. This is preferred over using HTML_STYLESHEET\n# since it does not replace the standard style sheet and is therefor more\n# robust against future updates. Doxygen will copy the style sheet file to\n# the output directory.\n\nHTML_EXTRA_STYLESHEET  =\n\n# The HTML_EXTRA_FILES tag can be used to specify one or more extra images or\n# other source files which should be copied to the HTML output directory. Note\n# that these files will be copied to the base HTML output directory. Use the\n# $relpath^ marker in the HTML_HEADER and/or HTML_FOOTER files to load these\n# files. In the HTML_STYLESHEET file, use the file name only. Also note that\n# the files will be copied as-is; there are no commands or markers available.\n\nHTML_EXTRA_FILES       =\n\n# The HTML_COLORSTYLE_HUE tag controls the color of the HTML output.\n# Doxygen will adjust the colors in the style sheet and background images\n# according to this color. Hue is specified as an angle on a colorwheel,\n# see http://en.wikipedia.org/wiki/Hue for more information.\n# For instance the value 0 represents red, 60 is yellow, 120 is green,\n# 180 is cyan, 240 is blue, 300 purple, and 360 is red again.\n# The allowed range is 0 to 359.\n\nHTML_COLORSTYLE_HUE    = 220\n\n# The HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of\n# the colors in the HTML output. For a value of 0 the output will use\n# grayscales only. A value of 255 will produce the most vivid colors.\n\nHTML_COLORSTYLE_SAT    = 100\n\n# The HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to\n# the luminance component of the colors in the HTML output. Values below\n# 100 gradually make the output lighter, whereas values above 100 make\n# the output darker. The value divided by 100 is the actual gamma applied,\n# so 80 represents a gamma of 0.8, The value 220 represents a gamma of 2.2,\n# and 100 does not change the gamma.\n\nHTML_COLORSTYLE_GAMMA  = 80\n\n# If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML\n# page will contain the date and time when the page was generated. Setting\n# this to NO can help when comparing the output of multiple runs.\n\nHTML_TIMESTAMP         = YES\n\n# If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML\n# documentation will contain sections that can be hidden and shown after the\n# page has loaded.\n\nHTML_DYNAMIC_SECTIONS  = YES\n\n# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of\n# entries shown in the various tree structured indices initially; the user\n# can expand and collapse entries dynamically later on. Doxygen will expand\n# the tree to such a level that at most the specified number of entries are\n# visible (unless a fully collapsed tree already exceeds this amount).\n# So setting the number of entries 1 will produce a full collapsed tree by\n# default. 0 is a special value representing an infinite number of entries\n# and will result in a full expanded tree by default.\n\nHTML_INDEX_NUM_ENTRIES = 100\n\n# If the GENERATE_DOCSET tag is set to YES, additional index files\n# will be generated that can be used as input for Apple's Xcode 3\n# integrated development environment, introduced with OSX 10.5 (Leopard).\n# To create a documentation set, doxygen will generate a Makefile in the\n# HTML output directory. Running make will produce the docset in that\n# directory and running \"make install\" will install the docset in\n# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find\n# it at startup.\n# See http://developer.apple.com/tools/creatingdocsetswithdoxygen.html\n# for more information.\n\nGENERATE_DOCSET        = NO\n\n# When GENERATE_DOCSET tag is set to YES, this tag determines the name of the\n# feed. A documentation feed provides an umbrella under which multiple\n# documentation sets from a single provider (such as a company or product suite)\n# can be grouped.\n\nDOCSET_FEEDNAME        = \"Doxygen generated docs\"\n\n# When GENERATE_DOCSET tag is set to YES, this tag specifies a string that\n# should uniquely identify the documentation set bundle. This should be a\n# reverse domain-name style string, e.g. com.mycompany.MyDocSet. Doxygen\n# will append .docset to the name.\n\nDOCSET_BUNDLE_ID       = org.doxygen.Project\n\n# When GENERATE_PUBLISHER_ID tag specifies a string that should uniquely\n# identify the documentation publisher. This should be a reverse domain-name\n# style string, e.g. com.mycompany.MyDocSet.documentation.\n\nDOCSET_PUBLISHER_ID    = org.doxygen.Publisher\n\n# The GENERATE_PUBLISHER_NAME tag identifies the documentation publisher.\n\nDOCSET_PUBLISHER_NAME  = Publisher\n\n# If the GENERATE_HTMLHELP tag is set to YES, additional index files\n# will be generated that can be used as input for tools like the\n# Microsoft HTML help workshop to generate a compiled HTML help file (.chm)\n# of the generated HTML documentation.\n\nGENERATE_HTMLHELP      = NO\n\n# If the GENERATE_HTMLHELP tag is set to YES, the CHM_FILE tag can\n# be used to specify the file name of the resulting .chm file. You\n# can add a path in front of the file if the result should not be\n# written to the html output directory.\n\nCHM_FILE               =\n\n# If the GENERATE_HTMLHELP tag is set to YES, the HHC_LOCATION tag can\n# be used to specify the location (absolute path including file name) of\n# the HTML help compiler (hhc.exe). If non-empty doxygen will try to run\n# the HTML help compiler on the generated index.hhp.\n\nHHC_LOCATION           =\n\n# If the GENERATE_HTMLHELP tag is set to YES, the GENERATE_CHI flag\n# controls if a separate .chi index file is generated (YES) or that\n# it should be included in the master .chm file (NO).\n\nGENERATE_CHI           = NO\n\n# If the GENERATE_HTMLHELP tag is set to YES, the CHM_INDEX_ENCODING\n# is used to encode HtmlHelp index (hhk), content (hhc) and project file\n# content.\n\nCHM_INDEX_ENCODING     =\n\n# If the GENERATE_HTMLHELP tag is set to YES, the BINARY_TOC flag\n# controls whether a binary table of contents is generated (YES) or a\n# normal table of contents (NO) in the .chm file.\n\nBINARY_TOC             = NO\n\n# The TOC_EXPAND flag can be set to YES to add extra items for group members\n# to the contents of the HTML help documentation and to the tree view.\n\nTOC_EXPAND             = NO\n\n# If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and\n# QHP_VIRTUAL_FOLDER are set, an additional index file will be generated\n# that can be used as input for Qt's qhelpgenerator to generate a\n# Qt Compressed Help (.qch) of the generated HTML documentation.\n\nGENERATE_QHP           = NO\n\n# If the QHG_LOCATION tag is specified, the QCH_FILE tag can\n# be used to specify the file name of the resulting .qch file.\n# The path specified is relative to the HTML output folder.\n\nQCH_FILE               =\n\n# The QHP_NAMESPACE tag specifies the namespace to use when generating\n# Qt Help Project output. For more information please see\n# http://doc.trolltech.com/qthelpproject.html#namespace\n\nQHP_NAMESPACE          = org.doxygen.Project\n\n# The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating\n# Qt Help Project output. For more information please see\n# http://doc.trolltech.com/qthelpproject.html#virtual-folders\n\nQHP_VIRTUAL_FOLDER     = doc\n\n# If QHP_CUST_FILTER_NAME is set, it specifies the name of a custom filter to\n# add. For more information please see\n# http://doc.trolltech.com/qthelpproject.html#custom-filters\n\nQHP_CUST_FILTER_NAME   =\n\n# The QHP_CUST_FILT_ATTRS tag specifies the list of the attributes of the\n# custom filter to add. For more information please see\n# <a href=\"http://doc.trolltech.com/qthelpproject.html#custom-filters\">\n# Qt Help Project / Custom Filters</a>.\n\nQHP_CUST_FILTER_ATTRS  =\n\n# The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this\n# project's\n# filter section matches.\n# <a href=\"http://doc.trolltech.com/qthelpproject.html#filter-attributes\">\n# Qt Help Project / Filter Attributes</a>.\n\nQHP_SECT_FILTER_ATTRS  =\n\n# If the GENERATE_QHP tag is set to YES, the QHG_LOCATION tag can\n# be used to specify the location of Qt's qhelpgenerator.\n# If non-empty doxygen will try to run qhelpgenerator on the generated\n# .qhp file.\n\nQHG_LOCATION           =\n\n# If the GENERATE_ECLIPSEHELP tag is set to YES, additional index files\n#  will be generated, which together with the HTML files, form an Eclipse help\n# plugin. To install this plugin and make it available under the help contents\n# menu in Eclipse, the contents of the directory containing the HTML and XML\n# files needs to be copied into the plugins directory of eclipse. The name of\n# the directory within the plugins directory should be the same as\n# the ECLIPSE_DOC_ID value. After copying Eclipse needs to be restarted before\n# the help appears.\n\nGENERATE_ECLIPSEHELP   = NO\n\n# A unique identifier for the eclipse help plugin. When installing the plugin\n# the directory name containing the HTML and XML files should also have\n# this name.\n\nECLIPSE_DOC_ID         = org.doxygen.Project\n\n# The DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs)\n# at top of each HTML page. The value NO (the default) enables the index and\n# the value YES disables it. Since the tabs have the same information as the\n# navigation tree you can set this option to NO if you already set\n# GENERATE_TREEVIEW to YES.\n\nDISABLE_INDEX          = NO\n\n# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index\n# structure should be generated to display hierarchical information.\n# If the tag value is set to YES, a side panel will be generated\n# containing a tree-like index structure (just like the one that\n# is generated for HTML Help). For this to work a browser that supports\n# JavaScript, DHTML, CSS and frames is required (i.e. any modern browser).\n# Windows users are probably better off using the HTML help feature.\n# Since the tree basically has the same information as the tab index you\n# could consider to set DISABLE_INDEX to NO when enabling this option.\n\nGENERATE_TREEVIEW      = NO\n\n# The ENUM_VALUES_PER_LINE tag can be used to set the number of enum values\n# (range [0,1..20]) that doxygen will group on one line in the generated HTML\n# documentation. Note that a value of 0 will completely suppress the enum\n# values from appearing in the overview section.\n\nENUM_VALUES_PER_LINE   = 4\n\n# If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be\n# used to set the initial width (in pixels) of the frame in which the tree\n# is shown.\n\nTREEVIEW_WIDTH         = 250\n\n# When the EXT_LINKS_IN_WINDOW option is set to YES doxygen will open\n# links to external symbols imported via tag files in a separate window.\n\nEXT_LINKS_IN_WINDOW    = NO\n\n# Use this tag to change the font size of Latex formulas included\n# as images in the HTML documentation. The default is 10. Note that\n# when you change the font size after a successful doxygen run you need\n# to manually remove any form_*.png images from the HTML output directory\n# to force them to be regenerated.\n\nFORMULA_FONTSIZE       = 10\n\n# Use the FORMULA_TRANPARENT tag to determine whether or not the images\n# generated for formulas are transparent PNGs. Transparent PNGs are\n# not supported properly for IE 6.0, but are supported on all modern browsers.\n# Note that when changing this option you need to delete any form_*.png files\n# in the HTML output before the changes have effect.\n\nFORMULA_TRANSPARENT    = YES\n\n# Enable the USE_MATHJAX option to render LaTeX formulas using MathJax\n# (see http://www.mathjax.org) which uses client side Javascript for the\n# rendering instead of using prerendered bitmaps. Use this if you do not\n# have LaTeX installed or if you want to formulas look prettier in the HTML\n# output. When enabled you may also need to install MathJax separately and\n# configure the path to it using the MATHJAX_RELPATH option.\n\nUSE_MATHJAX            = NO\n\n# When MathJax is enabled you can set the default output format to be used for\n# the MathJax output. Supported types are HTML-CSS, NativeMML (i.e. MathML) and\n# SVG. The default value is HTML-CSS, which is slower, but has the best\n# compatibility.\n\nMATHJAX_FORMAT         = HTML-CSS\n\n# When MathJax is enabled you need to specify the location relative to the\n# HTML output directory using the MATHJAX_RELPATH option. The destination\n# directory should contain the MathJax.js script. For instance, if the mathjax\n# directory is located at the same level as the HTML output directory, then\n# MATHJAX_RELPATH should be ../mathjax. The default value points to\n# the MathJax Content Delivery Network so you can quickly see the result without\n# installing MathJax.\n# However, it is strongly recommended to install a local\n# copy of MathJax from http://www.mathjax.org before deployment.\n\nMATHJAX_RELPATH        = http://cdn.mathjax.org/mathjax/latest\n\n# The MATHJAX_EXTENSIONS tag can be used to specify one or MathJax extension\n# names that should be enabled during MathJax rendering.\n\nMATHJAX_EXTENSIONS     =\n\n# The MATHJAX_CODEFILE tag can be used to specify a file with javascript\n# pieces of code that will be used on startup of the MathJax code.\n\nMATHJAX_CODEFILE       =\n\n# When the SEARCHENGINE tag is enabled doxygen will generate a search box\n# for the HTML output. The underlying search engine uses javascript\n# and DHTML and should work on any modern browser. Note that when using\n# HTML help (GENERATE_HTMLHELP), Qt help (GENERATE_QHP), or docsets\n# (GENERATE_DOCSET) there is already a search function so this one should\n# typically be disabled. For large projects the javascript based search engine\n# can be slow, then enabling SERVER_BASED_SEARCH may provide a better solution.\n\nSEARCHENGINE           = YES\n\n# When the SERVER_BASED_SEARCH tag is enabled the search engine will be\n# implemented using a web server instead of a web client using Javascript.\n# There are two flavours of web server based search depending on the\n# EXTERNAL_SEARCH setting. When disabled, doxygen will generate a PHP script for\n# searching and an index file used by the script. When EXTERNAL_SEARCH is\n# enabled the indexing and searching needs to be provided by external tools.\n# See the manual for details.\n\nSERVER_BASED_SEARCH    = NO\n\n# When EXTERNAL_SEARCH is enabled doxygen will no longer generate the PHP\n# script for searching. Instead the search results are written to an XML file\n# which needs to be processed by an external indexer. Doxygen will invoke an\n# external search engine pointed to by the SEARCHENGINE_URL option to obtain\n# the search results. Doxygen ships with an example indexer (doxyindexer) and\n# search engine (doxysearch.cgi) which are based on the open source search\n# engine library Xapian. See the manual for configuration details.\n\nEXTERNAL_SEARCH        = NO\n\n# The SEARCHENGINE_URL should point to a search engine hosted by a web server\n# which will returned the search results when EXTERNAL_SEARCH is enabled.\n# Doxygen ships with an example search engine (doxysearch) which is based on\n# the open source search engine library Xapian. See the manual for configuration\n# details.\n\nSEARCHENGINE_URL       =\n\n# When SERVER_BASED_SEARCH and EXTERNAL_SEARCH are both enabled the unindexed\n# search data is written to a file for indexing by an external tool. With the\n# SEARCHDATA_FILE tag the name of this file can be specified.\n\nSEARCHDATA_FILE        = searchdata.xml\n\n# When SERVER_BASED_SEARCH AND EXTERNAL_SEARCH are both enabled the\n# EXTERNAL_SEARCH_ID tag can be used as an identifier for the project. This is\n# useful in combination with EXTRA_SEARCH_MAPPINGS to search through multiple\n# projects and redirect the results back to the right project.\n\nEXTERNAL_SEARCH_ID     =\n\n# The EXTRA_SEARCH_MAPPINGS tag can be used to enable searching through doxygen\n# projects other than the one defined by this configuration file, but that are\n# all added to the same external search index. Each project needs to have a\n# unique id set via EXTERNAL_SEARCH_ID. The search mapping then maps the id\n# of to a relative location where the documentation can be found.\n# The format is: EXTRA_SEARCH_MAPPINGS = id1=loc1 id2=loc2 ...\n\nEXTRA_SEARCH_MAPPINGS  =\n\n#---------------------------------------------------------------------------\n# configuration options related to the LaTeX output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_LATEX tag is set to YES (the default) Doxygen will\n# generate Latex output.\n\nGENERATE_LATEX         = YES\n\n# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `latex' will be used as the default path.\n\nLATEX_OUTPUT           = latex\n\n# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be\n# invoked. If left blank `latex' will be used as the default command name.\n# Note that when enabling USE_PDFLATEX this option is only used for\n# generating bitmaps for formulas in the HTML output, but not in the\n# Makefile that is written to the output directory.\n\nLATEX_CMD_NAME         = latex\n\n# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to\n# generate index for LaTeX. If left blank `makeindex' will be used as the\n# default command name.\n\nMAKEINDEX_CMD_NAME     = makeindex\n\n# If the COMPACT_LATEX tag is set to YES Doxygen generates more compact\n# LaTeX documents. This may be useful for small projects and may help to\n# save some trees in general.\n\nCOMPACT_LATEX          = NO\n\n# The PAPER_TYPE tag can be used to set the paper type that is used\n# by the printer. Possible values are: a4, letter, legal and\n# executive. If left blank a4 will be used.\n\nPAPER_TYPE             = a4\n\n# The EXTRA_PACKAGES tag can be to specify one or more names of LaTeX\n# packages that should be included in the LaTeX output.\n\nEXTRA_PACKAGES         =\n\n# The LATEX_HEADER tag can be used to specify a personal LaTeX header for\n# the generated latex document. The header should contain everything until\n# the first chapter. If it is left blank doxygen will generate a\n# standard header. Notice: only use this tag if you know what you are doing!\n\nLATEX_HEADER           =\n\n# The LATEX_FOOTER tag can be used to specify a personal LaTeX footer for\n# the generated latex document. The footer should contain everything after\n# the last chapter. If it is left blank doxygen will generate a\n# standard footer. Notice: only use this tag if you know what you are doing!\n\nLATEX_FOOTER           =\n\n# The LATEX_EXTRA_FILES tag can be used to specify one or more extra images\n# or other source files which should be copied to the LaTeX output directory.\n# Note that the files will be copied as-is; there are no commands or markers\n# available.\n\nLATEX_EXTRA_FILES      =\n\n# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated\n# is prepared for conversion to pdf (using ps2pdf). The pdf file will\n# contain links (just like the HTML output) instead of page references\n# This makes the output suitable for online browsing using a pdf viewer.\n\nPDF_HYPERLINKS         = YES\n\n# If the USE_PDFLATEX tag is set to YES, pdflatex will be used instead of\n# plain latex in the generated Makefile. Set this option to YES to get a\n# higher quality PDF documentation.\n\nUSE_PDFLATEX           = YES\n\n# If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \\\\batchmode.\n# command to the generated LaTeX files. This will instruct LaTeX to keep\n# running if errors occur, instead of asking the user for help.\n# This option is also used when generating formulas in HTML.\n\nLATEX_BATCHMODE        = NO\n\n# If LATEX_HIDE_INDICES is set to YES then doxygen will not\n# include the index chapters (such as File Index, Compound Index, etc.)\n# in the output.\n\nLATEX_HIDE_INDICES     = NO\n\n# If LATEX_SOURCE_CODE is set to YES then doxygen will include\n# source code with syntax highlighting in the LaTeX output.\n# Note that which sources are shown also depends on other settings\n# such as SOURCE_BROWSER.\n\nLATEX_SOURCE_CODE      = NO\n\n# The LATEX_BIB_STYLE tag can be used to specify the style to use for the\n# bibliography, e.g. plainnat, or ieeetr. The default style is \"plain\". See\n# http://en.wikipedia.org/wiki/BibTeX for more info.\n\nLATEX_BIB_STYLE        = plain\n\n#---------------------------------------------------------------------------\n# configuration options related to the RTF output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_RTF tag is set to YES Doxygen will generate RTF output\n# The RTF output is optimized for Word 97 and may not look very pretty with\n# other RTF readers or editors.\n\nGENERATE_RTF           = NO\n\n# The RTF_OUTPUT tag is used to specify where the RTF docs will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `rtf' will be used as the default path.\n\nRTF_OUTPUT             = rtf\n\n# If the COMPACT_RTF tag is set to YES Doxygen generates more compact\n# RTF documents. This may be useful for small projects and may help to\n# save some trees in general.\n\nCOMPACT_RTF            = NO\n\n# If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated\n# will contain hyperlink fields. The RTF file will\n# contain links (just like the HTML output) instead of page references.\n# This makes the output suitable for online browsing using WORD or other\n# programs which support those fields.\n# Note: wordpad (write) and others do not support links.\n\nRTF_HYPERLINKS         = NO\n\n# Load style sheet definitions from file. Syntax is similar to doxygen's\n# config file, i.e. a series of assignments. You only have to provide\n# replacements, missing definitions are set to their default value.\n\nRTF_STYLESHEET_FILE    =\n\n# Set optional variables used in the generation of an rtf document.\n# Syntax is similar to doxygen's config file.\n\nRTF_EXTENSIONS_FILE    =\n\n#---------------------------------------------------------------------------\n# configuration options related to the man page output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_MAN tag is set to YES (the default) Doxygen will\n# generate man pages\n\nGENERATE_MAN           = NO\n\n# The MAN_OUTPUT tag is used to specify where the man pages will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `man' will be used as the default path.\n\nMAN_OUTPUT             = man\n\n# The MAN_EXTENSION tag determines the extension that is added to\n# the generated man pages (default is the subroutine's section .3)\n\nMAN_EXTENSION          = .3\n\n# If the MAN_LINKS tag is set to YES and Doxygen generates man output,\n# then it will generate one additional man file for each entity\n# documented in the real man page(s). These additional files\n# only source the real man page, but without them the man command\n# would be unable to find the correct page. The default is NO.\n\nMAN_LINKS              = NO\n\n#---------------------------------------------------------------------------\n# configuration options related to the XML output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_XML tag is set to YES Doxygen will\n# generate an XML file that captures the structure of\n# the code including all documentation.\n\nGENERATE_XML           = NO\n\n# The XML_OUTPUT tag is used to specify where the XML pages will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `xml' will be used as the default path.\n\nXML_OUTPUT             = xml\n\n# The XML_SCHEMA tag can be used to specify an XML schema,\n# which can be used by a validating XML parser to check the\n# syntax of the XML files.\n\nXML_SCHEMA             =\n\n# The XML_DTD tag can be used to specify an XML DTD,\n# which can be used by a validating XML parser to check the\n# syntax of the XML files.\n\nXML_DTD                =\n\n# If the XML_PROGRAMLISTING tag is set to YES Doxygen will\n# dump the program listings (including syntax highlighting\n# and cross-referencing information) to the XML output. Note that\n# enabling this will significantly increase the size of the XML output.\n\nXML_PROGRAMLISTING     = YES\n\n#---------------------------------------------------------------------------\n# configuration options related to the DOCBOOK output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_DOCBOOK tag is set to YES Doxygen will generate DOCBOOK files\n# that can be used to generate PDF.\n\nGENERATE_DOCBOOK       = NO\n\n# The DOCBOOK_OUTPUT tag is used to specify where the DOCBOOK pages will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be put in\n# front of it. If left blank docbook will be used as the default path.\n\nDOCBOOK_OUTPUT         = docbook\n\n#---------------------------------------------------------------------------\n# configuration options for the AutoGen Definitions output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_AUTOGEN_DEF tag is set to YES Doxygen will\n# generate an AutoGen Definitions (see autogen.sf.net) file\n# that captures the structure of the code including all\n# documentation. Note that this feature is still experimental\n# and incomplete at the moment.\n\nGENERATE_AUTOGEN_DEF   = NO\n\n#---------------------------------------------------------------------------\n# configuration options related to the Perl module output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_PERLMOD tag is set to YES Doxygen will\n# generate a Perl module file that captures the structure of\n# the code including all documentation. Note that this\n# feature is still experimental and incomplete at the\n# moment.\n\nGENERATE_PERLMOD       = NO\n\n# If the PERLMOD_LATEX tag is set to YES Doxygen will generate\n# the necessary Makefile rules, Perl scripts and LaTeX code to be able\n# to generate PDF and DVI output from the Perl module output.\n\nPERLMOD_LATEX          = NO\n\n# If the PERLMOD_PRETTY tag is set to YES the Perl module output will be\n# nicely formatted so it can be parsed by a human reader.\n# This is useful\n# if you want to understand what is going on.\n# On the other hand, if this\n# tag is set to NO the size of the Perl module output will be much smaller\n# and Perl will parse it just the same.\n\nPERLMOD_PRETTY         = YES\n\n# The names of the make variables in the generated doxyrules.make file\n# are prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX.\n# This is useful so different doxyrules.make files included by the same\n# Makefile don't overwrite each other's variables.\n\nPERLMOD_MAKEVAR_PREFIX =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the preprocessor\n#---------------------------------------------------------------------------\n\n# If the ENABLE_PREPROCESSING tag is set to YES (the default) Doxygen will\n# evaluate all C-preprocessor directives found in the sources and include\n# files.\n\nENABLE_PREPROCESSING   = YES\n\n# If the MACRO_EXPANSION tag is set to YES Doxygen will expand all macro\n# names in the source code. If set to NO (the default) only conditional\n# compilation will be performed. Macro expansion can be done in a controlled\n# way by setting EXPAND_ONLY_PREDEF to YES.\n\nMACRO_EXPANSION        = NO\n\n# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES\n# then the macro expansion is limited to the macros specified with the\n# PREDEFINED and EXPAND_AS_DEFINED tags.\n\nEXPAND_ONLY_PREDEF     = NO\n\n# If the SEARCH_INCLUDES tag is set to YES (the default) the includes files\n# pointed to by INCLUDE_PATH will be searched when a #include is found.\n\nSEARCH_INCLUDES        = YES\n\n# The INCLUDE_PATH tag can be used to specify one or more directories that\n# contain include files that are not input files but should be processed by\n# the preprocessor.\n\nINCLUDE_PATH           =\n\n# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard\n# patterns (like *.h and *.hpp) to filter out the header-files in the\n# directories. If left blank, the patterns specified with FILE_PATTERNS will\n# be used.\n\nINCLUDE_FILE_PATTERNS  =\n\n# The PREDEFINED tag can be used to specify one or more macro names that\n# are defined before the preprocessor is started (similar to the -D option of\n# gcc). The argument of the tag is a list of macros of the form: name\n# or name=definition (no spaces). If the definition and the = are\n# omitted =1 is assumed. To prevent a macro definition from being\n# undefined via #undef or recursively expanded use the := operator\n# instead of the = operator.\n\nPREDEFINED             =\n\n# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then\n# this tag can be used to specify a list of macro names that should be expanded.\n# The macro definition that is found in the sources will be used.\n# Use the PREDEFINED tag if you want to use a different macro definition that\n# overrules the definition found in the source code.\n\nEXPAND_AS_DEFINED      =\n\n# If the SKIP_FUNCTION_MACROS tag is set to YES (the default) then\n# doxygen's preprocessor will remove all references to function-like macros\n# that are alone on a line, have an all uppercase name, and do not end with a\n# semicolon, because these will confuse the parser if not removed.\n\nSKIP_FUNCTION_MACROS   = YES\n\n#---------------------------------------------------------------------------\n# Configuration::additions related to external references\n#---------------------------------------------------------------------------\n\n# The TAGFILES option can be used to specify one or more tagfiles. For each\n# tag file the location of the external documentation should be added. The\n# format of a tag file without this location is as follows:\n#\n# TAGFILES = file1 file2 ...\n# Adding location for the tag files is done as follows:\n#\n# TAGFILES = file1=loc1 \"file2 = loc2\" ...\n# where \"loc1\" and \"loc2\" can be relative or absolute paths\n# or URLs. Note that each tag file must have a unique name (where the name does\n# NOT include the path). If a tag file is not located in the directory in which\n# doxygen is run, you must also specify the path to the tagfile here.\n\nTAGFILES               =\n\n# When a file name is specified after GENERATE_TAGFILE, doxygen will create\n# a tag file that is based on the input files it reads.\n\nGENERATE_TAGFILE       =\n\n# If the ALLEXTERNALS tag is set to YES all external classes will be listed\n# in the class index. If set to NO only the inherited external classes\n# will be listed.\n\nALLEXTERNALS           = NO\n\n# If the EXTERNAL_GROUPS tag is set to YES all external groups will be listed\n# in the modules index. If set to NO, only the current project's groups will\n# be listed.\n\nEXTERNAL_GROUPS        = YES\n\n# If the EXTERNAL_PAGES tag is set to YES all external pages will be listed\n# in the related pages index. If set to NO, only the current project's\n# pages will be listed.\n\nEXTERNAL_PAGES         = YES\n\n# The PERL_PATH should be the absolute path and name of the perl script\n# interpreter (i.e. the result of `which perl').\n\nPERL_PATH              = /usr/bin/perl\n\n#---------------------------------------------------------------------------\n# Configuration options related to the dot tool\n#---------------------------------------------------------------------------\n\n# If the CLASS_DIAGRAMS tag is set to YES (the default) Doxygen will\n# generate a inheritance diagram (in HTML, RTF and LaTeX) for classes with base\n# or super classes. Setting the tag to NO turns the diagrams off. Note that\n# this option also works with HAVE_DOT disabled, but it is recommended to\n# install and use dot, since it yields more powerful graphs.\n\nCLASS_DIAGRAMS         = YES\n\n# You can define message sequence charts within doxygen comments using the \\msc\n# command. Doxygen will then run the mscgen tool (see\n# http://www.mcternan.me.uk/mscgen/) to produce the chart and insert it in the\n# documentation. The MSCGEN_PATH tag allows you to specify the directory where\n# the mscgen tool resides. If left empty the tool is assumed to be found in the\n# default search path.\n\nMSCGEN_PATH            =\n\n# If set to YES, the inheritance and collaboration graphs will hide\n# inheritance and usage relations if the target is undocumented\n# or is not a class.\n\nHIDE_UNDOC_RELATIONS   = YES\n\n# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is\n# available from the path. This tool is part of Graphviz, a graph visualization\n# toolkit from AT&T and Lucent Bell Labs. The other options in this section\n# have no effect if this option is set to NO (the default)\n\nHAVE_DOT               = YES\n\n# The DOT_NUM_THREADS specifies the number of dot invocations doxygen is\n# allowed to run in parallel. When set to 0 (the default) doxygen will\n# base this on the number of processors available in the system. You can set it\n# explicitly to a value larger than 0 to get control over the balance\n# between CPU load and processing speed.\n\nDOT_NUM_THREADS        = 0\n\n# By default doxygen will use the Helvetica font for all dot files that\n# doxygen generates. When you want a differently looking font you can specify\n# the font name using DOT_FONTNAME. You need to make sure dot is able to find\n# the font, which can be done by putting it in a standard location or by setting\n# the DOTFONTPATH environment variable or by setting DOT_FONTPATH to the\n# directory containing the font.\n\nDOT_FONTNAME           = Helvetica\n\n# The DOT_FONTSIZE tag can be used to set the size of the font of dot graphs.\n# The default size is 10pt.\n\nDOT_FONTSIZE           = 10\n\n# By default doxygen will tell dot to use the Helvetica font.\n# If you specify a different font using DOT_FONTNAME you can use DOT_FONTPATH to\n# set the path where dot can find it.\n\nDOT_FONTPATH           =\n\n# If the CLASS_GRAPH and HAVE_DOT tags are set to YES then doxygen\n# will generate a graph for each documented class showing the direct and\n# indirect inheritance relations. Setting this tag to YES will force the\n# CLASS_DIAGRAMS tag to NO.\n\nCLASS_GRAPH            = YES\n\n# If the COLLABORATION_GRAPH and HAVE_DOT tags are set to YES then doxygen\n# will generate a graph for each documented class showing the direct and\n# indirect implementation dependencies (inheritance, containment, and\n# class references variables) of the class with other documented classes.\n\nCOLLABORATION_GRAPH    = YES\n\n# If the GROUP_GRAPHS and HAVE_DOT tags are set to YES then doxygen\n# will generate a graph for groups, showing the direct groups dependencies\n\nGROUP_GRAPHS           = YES\n\n# If the UML_LOOK tag is set to YES doxygen will generate inheritance and\n# collaboration diagrams in a style similar to the OMG's Unified Modeling\n# Language.\n\nUML_LOOK               = NO\n\n# If the UML_LOOK tag is enabled, the fields and methods are shown inside\n# the class node. If there are many fields or methods and many nodes the\n# graph may become too big to be useful. The UML_LIMIT_NUM_FIELDS\n# threshold limits the number of items for each type to make the size more\n# manageable. Set this to 0 for no limit. Note that the threshold may be\n# exceeded by 50% before the limit is enforced.\n\nUML_LIMIT_NUM_FIELDS   = 10\n\n# If set to YES, the inheritance and collaboration graphs will show the\n# relations between templates and their instances.\n\nTEMPLATE_RELATIONS     = YES\n\n# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDE_GRAPH, and HAVE_DOT\n# tags are set to YES then doxygen will generate a graph for each documented\n# file showing the direct and indirect include dependencies of the file with\n# other documented files.\n\nINCLUDE_GRAPH          = YES\n\n# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDED_BY_GRAPH, and\n# HAVE_DOT tags are set to YES then doxygen will generate a graph for each\n# documented header file showing the documented files that directly or\n# indirectly include this file.\n\nINCLUDED_BY_GRAPH      = YES\n\n# If the CALL_GRAPH and HAVE_DOT options are set to YES then\n# doxygen will generate a call dependency graph for every global function\n# or class method. Note that enabling this option will significantly increase\n# the time of a run. So in most cases it will be better to enable call graphs\n# for selected functions only using the \\callgraph command.\n\nCALL_GRAPH             = YES\n\n# If the CALLER_GRAPH and HAVE_DOT tags are set to YES then\n# doxygen will generate a caller dependency graph for every global function\n# or class method. Note that enabling this option will significantly increase\n# the time of a run. So in most cases it will be better to enable caller\n# graphs for selected functions only using the \\callergraph command.\n\nCALLER_GRAPH           = YES\n\n# If the GRAPHICAL_HIERARCHY and HAVE_DOT tags are set to YES then doxygen\n# will generate a graphical hierarchy of all classes instead of a textual one.\n\nGRAPHICAL_HIERARCHY    = YES\n\n# If the DIRECTORY_GRAPH and HAVE_DOT tags are set to YES\n# then doxygen will show the dependencies a directory has on other directories\n# in a graphical way. The dependency relations are determined by the #include\n# relations between the files in the directories.\n\nDIRECTORY_GRAPH        = YES\n\n# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images\n# generated by dot. Possible values are svg, png, jpg, or gif.\n# If left blank png will be used. If you choose svg you need to set\n# HTML_FILE_EXTENSION to xhtml in order to make the SVG files\n# visible in IE 9+ (other browsers do not have this requirement).\n\nDOT_IMAGE_FORMAT       = png\n\n# If DOT_IMAGE_FORMAT is set to svg, then this option can be set to YES to\n# enable generation of interactive SVG images that allow zooming and panning.\n# Note that this requires a modern browser other than Internet Explorer.\n# Tested and working are Firefox, Chrome, Safari, and Opera. For IE 9+ you\n# need to set HTML_FILE_EXTENSION to xhtml in order to make the SVG files\n# visible. Older versions of IE do not have SVG support.\n\nINTERACTIVE_SVG        = YES\n\n# The tag DOT_PATH can be used to specify the path where the dot tool can be\n# found. If left blank, it is assumed the dot tool can be found in the path.\n\nDOT_PATH               =\n\n# The DOTFILE_DIRS tag can be used to specify one or more directories that\n# contain dot files that are included in the documentation (see the\n# \\dotfile command).\n\nDOTFILE_DIRS           =\n\n# The MSCFILE_DIRS tag can be used to specify one or more directories that\n# contain msc files that are included in the documentation (see the\n# \\mscfile command).\n\nMSCFILE_DIRS           =\n\n# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of\n# nodes that will be shown in the graph. If the number of nodes in a graph\n# becomes larger than this value, doxygen will truncate the graph, which is\n# visualized by representing a node as a red box. Note that doxygen if the\n# number of direct children of the root node in a graph is already larger than\n# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note\n# that the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.\n\nDOT_GRAPH_MAX_NODES    = 50\n\n# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the\n# graphs generated by dot. A depth value of 3 means that only nodes reachable\n# from the root by following a path via at most 3 edges will be shown. Nodes\n# that lay further from the root node will be omitted. Note that setting this\n# option to 1 or 2 may greatly reduce the computation time needed for large\n# code bases. Also note that the size of a graph can be further restricted by\n# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.\n\nMAX_DOT_GRAPH_DEPTH    = 0\n\n# Set the DOT_TRANSPARENT tag to YES to generate images with a transparent\n# background. This is disabled by default, because dot on Windows does not\n# seem to support this out of the box. Warning: Depending on the platform used,\n# enabling this option may lead to badly anti-aliased labels on the edges of\n# a graph (i.e. they become hard to read).\n\nDOT_TRANSPARENT        = NO\n\n# Set the DOT_MULTI_TARGETS tag to YES allow dot to generate multiple output\n# files in one run (i.e. multiple -o and -T options on the command line). This\n# makes dot run faster, but since only newer versions of dot (>1.8.10)\n# support this, this feature is disabled by default.\n\nDOT_MULTI_TARGETS      = YES\n\n# If the GENERATE_LEGEND tag is set to YES (the default) Doxygen will\n# generate a legend page explaining the meaning of the various boxes and\n# arrows in the dot generated graphs.\n\nGENERATE_LEGEND        = YES\n\n# If the DOT_CLEANUP tag is set to YES (the default) Doxygen will\n# remove the intermediate dot files that are used to generate\n# the various graphs.\n\nDOT_CLEANUP            = YES\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.537109375,
          "content": "BSD-3-Clause License\n\nCopyright 2009-2018 Jason Turner\nCopyright 2009-2012 Jonathan Turner.\n\nAll Rights Reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above\n    copyright notice, this list of conditions and the following\n    disclaimer in the documentation and/or other materials provided\n    with the distribution.\n  * Neither the name of Jason Turner nor Jonathan Turner nor the \n    name of contributors may be used to endorse or promote products derived\n    from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.4990234375,
          "content": "version: 6.1.x.{build}\nimage:\n  - Visual Studio 2019\nenvironment:\n  matrix:\n  - VS_VERSION: \"Visual Studio 16\"\nbuild_script:\n- cmd: >-\n    mkdir build\n\n    cd build\n\n    cmake c:\\Projects\\chaiscript -G \"%VS_VERSION%\" -DBUILD_TESTING:BOOL=ON -DBUILD_MODULES:BOOL=ON\n\n    cmake --build . --config Debug\ntest_script:\n- cmd: ctest -C Debug\nnotifications:\n- provider: Webhook\n  url: https://webhooks.gitter.im/e/9ff725a985b5679d1d5d\n  on_build_success: true\n  on_build_failure: true\n  on_build_status_changed: false\n"
        },
        {
          "name": "biicode.conf",
          "type": "blob",
          "size": 0.0576171875,
          "content": "[paths]\n        include\n\n[parent]\n\tChaiScript/ChaiScript: 0"
        },
        {
          "name": "buckaroo.json",
          "type": "blob",
          "size": 0.0263671875,
          "content": "{\n  \"name\": \"ChaiScript\"\n}\n"
        },
        {
          "name": "cheatsheet.md",
          "type": "blob",
          "size": 14.8544921875,
          "content": "# ChaiScript Versioning\n\nChaiScript tries to follow the [Semantic Versioning](http://semver.org/) scheme. This basically means:\n\n  * Major Version Number: API changes / breaking changes\n  * Minor Version Number: New Features\n  * Patch Version Number: Minor changes / enhancements\n\n\n\n# Initializing ChaiScript\n\n```\nchaiscript::ChaiScript chai; // initializes ChaiScript, adding the standard ChaiScript types (map, string, ...)\n```\n\nNote that ChaiScript cannot be used as a global / static object unless it is being compiled with `CHAISCRIPT_NO_THREADS`.\n\n# Adding Things To The Engine\n\n## Adding a Function / Method / Member\n\n### General\n\n```cpp\nchai.add(chaiscript::fun(&function_name), \"function_name\");\nchai.add(chaiscript::fun(&Class::method_name), \"method_name\");\nchai.add(chaiscript::fun(&Class::member_name), \"member_name\");\n```\n\n### Bound Member Functions\n\n```cpp\nchai.add(chaiscript::fun(&Class::method_name, Class_instance_ptr), \"method_name\");\nchai.add(chaiscript::fun(&Class::member_name, Class_instance_ptr), \"member_name\");\n```\n\n### With Overloads\n\n#### Preferred\n\n```cpp\nchai.add(chaiscript::fun<ReturnType (ParamType1, ParamType2)>(&function_with_overloads), \"function_name\");\n```\n\n#### Alternative\n\n```cpp\nchai.add(chaiscript::fun(static_cast<ReturnType (*)(ParamType1, ParamType2)>(&function_with_overloads)), \"function_name\");\n```\nThis overload technique is also used when exposing base members using derived type\n\n```cpp\nstruct Base\n{\n  int data;\n};\n\nstruct Derived : public Base\n{};\n\nchai.add(chaiscript::fun(static_cast<int(Derived::*)>(&Derived::data)), \"data\");\n```\n\n### Lambda\n\n```cpp\nchai.add(\n  chaiscript::fun<std::function<std::string (bool)>>(\n    [](bool type) {\n      if (type) { return \"x\"; }\n      else { return \"y\"; }\n    }), \"function_name\");\n```\n\n### Constructors\n\n```cpp\nchai.add(chaiscript::constructor<MyType ()>(), \"MyType\");\nchai.add(chaiscript::constructor<MyType (const MyType &)>(), \"MyType\");\n```\n\n## Adding Types\n\nIt's not strictly necessary to add types, but it helps with many things. Cloning, better errors, etc.\n\n```cpp\nchai.add(chaiscript::user_type<MyClass>(), \"MyClass\");\n```\n\n## Adding Type Conversions\n\nUser-defined type conversions are possible, defined in either script or in C++.\n\n\n\n### ChaiScript Defined Conversions\n\nFunction objects (including lambdas) can be used to add type conversions\nfrom inside of ChaiScript:\n\n```\nadd_type_conversion(type(\"string\"), type(\"Type_Info\"), fun(s) { return type(s); });\n```\n\n### C++ Defined Conversions\n\nInvoking a C++ type conversion possible with `static_cast`\n\n```cpp\nchai.add(chaiscript::type_conversion<T, bool>());\n```\n\nCalling a user-defined type conversion that takes a lambda\n\n```cpp\nchai.add(chaiscript::type_conversion<TestBaseType, Type2>([](const TestBaseType &t_bt) { /* return converted thing */ }));\n```\n\n### Class Hierarchies\n\nIf you want objects to be convertable between base and derived classes, you must tell ChaiScript about the relationship.\n\n```cpp\nchai.add(chaiscript::base_class<Base, Derived>());\n```\n\nIf you have multiple classes in your inheritance graph, you will probably want to tell ChaiScript about all relationships.\n\n```cpp\nchai.add(chaiscript::base_class<Base, Derived>());\nchai.add(chaiscript::base_class<Derived, MoreDerived>());\nchai.add(chaiscript::base_class<Base, MoreDerived>());\n```\n\n### Helpers\n\nA helper function exists for strongly typed and ChaiScript `Vector` function conversion definition:\n\n```\nchai.add(chaiscript::vector_conversion<std::vector<int>>());\n```\n\nA helper function also exists for strongly typed and ChaiScript `Map` function conversion definition:\n\n```\nchai.add(chaiscript::map_conversion<std::map<std::string, int>>());\n```\n\n\n\nThis allows you to pass a ChaiScript function to a function requiring `std::vector<int>`\n\n## Adding Objects\n\n```\nchai.add(chaiscript::var(somevar), \"somevar\"); // copied in\nchai.add(chaiscript::var(std::ref(somevar)), \"somevar\"); // by reference, shared between C++ and chai\nauto shareddouble = std::make_shared<double>(4.3);\nchai.add(chaiscript::var(shareddouble), \"shareddouble\"); // by shared_ptr, shared between c++ and chai\nchai.add(chaiscript::const_var(somevar), \"somevar\"); // copied in and made const\nchai.add_global_const(chaiscript::const_var(somevar), \"somevar\"); // global const. Throws if value is non-const, throws if object exists\nchai.add_global(chaiscript::var(somevar), \"somevar\"); // global non-const, throws if object exists\nchai.set_global(chaiscript::var(somevar), \"somevar\"); // global non-const, overwrites existing object\n```\n\n## Adding Namespaces\n\nNamespaces will not be populated until `import` is called.\nThis saves memory and computing costs if a namespace is not imported into every ChaiScript instance.\n\n```cpp\nchai.register_namespace([](chaiscript::Namespace& math) {\n    math[\"pi\"] = chaiscript::const_var(3.14159);\n    math[\"sin\"] = chaiscript::var(chaiscript::fun([](const double x) { return sin(x); })); },\n    \"math\");\n```\n\nImport namespace in ChaiScript\n```\nimport(\"math\")\nprint(math.pi) // prints 3.14159\n```\n\n# Using STL\nChaiScript recognizes many types from STL, but you have to add specific instantiation yourself.\n\n```cpp\ntypedef std::vector<std::pair<int, std::string>> data_list;\ndata_list my_list{ make_pair(0, \"Hello\"), make_pair(1, \"World\") };\nchai.add(chaiscript::bootstrap::standard_library::vector_type<data_list>(\"DataList\"));\nchai.add(chaiscript::bootstrap::standard_library::pair_type<data_list::value_type>(\"DataElement\"));\nchai.add(chaiscript::var(&my_list), \"data_list\");\nchai.eval(R\"_(\n    for(var i=0; i<data_list.size(); ++i)\n    {\n      print(to_string(data_list[i].first) + \" \" + data_list[i].second)\n    }\n  )_\");\n```\n\n# Executing Script\n\n## General\n\n```cpp\nchai.eval(\"print(\\\"Hello World\\\")\");\nchai.eval(R\"(print(\"Hello World\"))\");\n```\n\n## Unboxing Return Values\n\nReturns values are of the type `Boxed_Value` which is meant to be opaque to the programmer. Use one of the unboxing methods to access the internal data.\n\n### Prefered\n\n```cpp\nchai.eval<double>(\"5.3 + 2.1\"); // returns 7.4 as a C++ double\n```\n\n### Alternative\n\n```cpp\nauto v = chai.eval(\"5.3 + 2.1\");\nchai.boxed_cast<double>(v); // extracts double value from boxed_value and applies known conversions\nchaiscript::boxed_cast<double>(v); // free function version, does not know about conversions\n```\n\n### Converting Between Algebraic Types\n\n```cpp\nchaiscript::Boxed_Number(chai.eval(\"5.3 + 2.1\")).get_as<int>(); // works with any number type\n// which is equivalent to, but much more automatic than:\nstatic_cast<int>(chai.eval<double>(\"5.3+2.1\")); // this version only works if we know that it's a double\n```\n\n### Conversion Caveats\n\nConversion to `std::shared_ptr<T> &` is supported for function calls, but if you attempt to keep a reference to a `shared_ptr<>` you might invoke undefined behavior\n\n```cpp\n// ok this is supported, you can register it with chaiscript engine\nvoid nullify_shared_ptr(std::shared_ptr<int> &t) {\n  t = nullptr\n}\n```\n\n```cpp\nint main()\n{\n  // do some stuff and create a chaiscript instance\n  std::shared_ptr<int> &ptr = chai.eval<std::shared_ptr<int> &>(somevalue);\n  // DO NOT do this. Taking a non-const reference to a shared_ptr is not \n  // supported and causes undefined behavior in the chaiscript engine\n}\n```\n\n\n## Sharing Values\n\n```cpp\ndouble &d = chai.eval(\"var i = 5.2; i\"); // d is now a reference to i in the script\nstd::shared_ptr<double> d = chai.eval(\"var i = 5.2; i\"); // same result but reference counted\n\nd = 3;\nchai.eval(\"print(i)\"); // prints 3\n```\n\n## Catching Eval Errors\n\n```cpp\ntry {\n  chai.eval(\"2.3 + \\\"String\\\"\");\n} catch (const chaiscript::exception::eval_error &e) {\n  std::cout << \"Error\\n\" << e.pretty_print() << '\\n';\n}\n```\n\n## Catching Errors Thrown From Script\n\n```cpp\ntry {\n  chai.eval(\"throw(runtime_error(\\\"error\\\"))\", chaiscript::exception_specification<int, double, float, const std::string &, const std::exception &>());\n} catch (const double e) {\n} catch (int) {\n} catch (float) {\n} catch (const std::string &) {\n} catch (const std::exception &e) {\n  // This is the one that will be called in the specific throw() above\n}\n```\n\n## Sharing Functions\n\n\n```cpp\nauto p = chai.eval<std::function<std::string (double)>>(\"to_string\"); \np(5); // calls chaiscript's 'to_string' function, returning std::string(\"5\")\n```\n\nNote: backtick treats operators as normal functions\n\n```cpp\nauto p = chai.eval<std::function<int (int, int)>>(\"`+`\"); \np(5, 6); // calls chaiscript's '+' function, returning 11\n```\n\n```cpp\nauto p = chai.eval<std::function<std::string (int, double)>>(\"fun(x,y) { to_string(x) + to_string(y); }\");\np(3,4.2); // evaluates the lambda function, returning the string \"34.2\" to C++\n```\n\n# Language Reference\n\n## Variables\n\n```\nvar i; // uninitialized variable, can take any value on first assignment;\nauto j; // equiv to var\n\nvar k = 5; // initialized to 5 (integer)\nvar l := k; // reference to k\nauto &m = k; // reference to k\n\nglobal g = 5; // creates a global variable. If global already exists, it is not re-added\nglobal g = 2; // global 'g' now equals 2\n\nglobal g2;\nif (g2.is_var_undef()) { g2 = 4; } // only initialize g2 once, if global decl hit more than once\n\nGLOBAL g3; // all upper case version also accepted\n```\n\n## Looping\n\n```\n// c-style for loops\nfor (var i = 0; i < 100; ++i) { print(i); }\n```\n\n```\n// while\nwhile (some_condition()) { /* do something */ }\n```\n\n```\n// ranged for\nfor (i : [1, 2, 3]) { print(i); }\n```\n\nEach of the loop styles can be broken using the `break` statement. For example:\n\n```\nwhile (some_condition()) {\n  /* do something */\n  if (another_condition()) { break; }\n}\n```\n\n## Conditionals\n\n```\nif (expression) { }\n```\n\n```\n// C++17-style init-if blocks\n// Value of 'statement' is scoped for entire `if` block\nif (statement; expression) { }\n```\n\n## Switch Statements\n\n``` chaiscript\nvar myvalue = 2\nswitch (myvalue) {\n    case (1) {\n        print(\"My Value is 1\");\n        break;\n    }\n    case (2) {\n        print(\"My Value is 2\");\n        break;\n    }\n    default {\n        print(\"My Value is something else.\";\n    }\n}\n```\n\n## Built-in Types\n\nThere are a number of built-in types that are part of ChaiScript.\n\n### Vectors and Maps\n\n```\nvar v = [1,2,3u,4ll,\"16\", `+`]; // creates vector of heterogenous values\nvar m = [\"a\":1, \"b\":2]; // map of string:value pairs\n\n// Add a value to the vector by value.\nv.push_back(123);\n\n// Add an object to the vector by reference.\nv.push_back_ref(m);\n```\n\n### Numbers\n\nFloating point values default to `double` type and integers default to `int` type. All C++ suffixes\nsuch as `f`, `ll`, `u` as well as scientific notation are supported\n\n```\n1.0 // double\n1.0f // float\n1.0l // long double\n1 // int\n1u // unsigned int\n1ul // unsigned long\n1ull // unsigned long long\n```\n\nLiterals are automatically sized, just as in C++. For example: `10000000000` is > 32bits and the appropriate type is used to hold it\non your platform.\n\n\n## Functions\n\nNote that any type of ChaiScript function can be passed freely to C++ and automatically\nconverted into a `std::function` object.\n\n### General \n\n```\ndef myfun(x, y) { x + y; } // last statement in body is the return value\ndef myfun(x, y) { return x + y; } // equiv \n```\n\n### Optionally Typed\n\n```\ndef myfun(x, int y) { x + y; } // requires y to be an int\n```\n\n### With Guards\n\n```\ndef myfun(x, int y) : y > 5 { x - y; } // only called if y > 5\n```\n\n### Methods\n\nMethods and functions are mostly equivalent\n\n```\ndef string::add(int y) { this + to_string(y); }\ndef add(string s, int y) { s + to_string(y); } //equiv functionality\n\n// calling new function/method\n\"a\".add(1); // returns a1\nadd(\"a\", 1); // returns a1, either calling syntax works with either def above\n```\n\n### Lambdas\n\n```\nvar l = fun(x) { x * 15; }\nl(2) // returns 30\n\nvar a = 13\nvar m = fun[a](x) { x * a; } \nm(3); // a was captured (by reference), returns 39\n\nvar n = bind(fun(x,y) { x * y; }, _, 10);\nn(2); // returns 20 \n```\n\n\n\n## ChaiScript Defined Types\n\nDefine a type called \"MyType\" with one member value \"a\" and a getter\n\n### Preferred\n\n```\nclass MyType {\n  var value;\n  def MyType() { this.value = \"a\"; }\n  def get_value() { \"Value Is: \" + this.value; }\n};\n```\n\n### Alternative \n\n```\nattr MyType::value;\ndef MyType::MyType() { this.value = \"a\"; }\ndef MyType::get_value() { \"Value Is: \" + this.value; }\n```\n\n### Using\n\n```\nvar m = MyType(); // calls constructor\nprint(m.get_value()); // prints \"Value Is: a\"\nprint(get_value(m)); // prints \"Value Is: a\"\n```\n\n## Dynamic Objects\n\nAll ChaiScript defined types and generic Dynamic_Object support dynamic parameters\n\n```\nvar o = Dynamic_Object();\no.f = fun(x) { print(x); }\no.f(3); // prints \"3\"\n```\n\nImplicit 'this' is allowed:\n\n```\nvar o = Dynamic_Object();\no.x = 3;\no.f = fun(y) { print(this.x + y); }\no.f(10); // prints 13\n```\n\n## Namespaces\n\nNamespaces in ChaiScript are Dynamic Objects with global scope\n\n```\nnamespace(\"math\") // create a new namespace\n\nmath.square = fun(x) { x * x } // add a function to the \"math\" namespace\nmath.sum_squares = fun(x, y) { math.square(x) + math.square(y) }\n\nprint(math.square(4)) // prints 16\nprint(math.sum_squares(2, 5)) // prints 29\n```\n\n### Option Explicit\n\nIf you want to disable dynamic parameter definitions, you can `set_explicit`.\n\n```\nclass My_Class {\n  def My_Class() {\n    this.set_explicit(true);\n    this.x = 2; // this would fail with explicit set to true\n  }\n};\n```\n\n## method_missing\n\nA function of the signature `method_missing(object, name, param1, param2, param3)` will be called if an appropriate\nmethod cannot be found\n\n```\ndef method_missing(int i, string name, Vector v) {\n  print(\"method_missing(${i}, ${name}), ${v.size()} params\");\n}\n\n5.bob(1,2,3); // prints \"method_missing(5, bob, 3 params)\"\n```\n\n`method_missing` signature can be either 2 parameters or 3 parameters. If the signature contains two parameters\nit is treated as a property. If the property contains a function then additional parameters are passed to\nthe contained function.\n\nIf both a 2 parameter and a 3 parameter signature match, the 3 parameter function always wins.\n\n## Context\n\n * `__LINE__` Current file line number\n * `__FILE__` Full path of current file\n * `__CLASS__` Name of current class\n * `__FUNC__` Name of current function\n\n\n# Built-in Functions\n\n## Evaluation\n\n```\neval(\"4 + 5\") // dynamically eval script string and returns value of last statement\neval_file(\"filename\") // evals file and returns value of last statement\nuse(\"filename\") // evals file exactly once and returns value of last statement\n                // if the file had already been 'used' nothing happens and undefined is returned\n```\n\nBoth `use` and `eval_file` search the 'usepaths' passed to the ChaiScript constructor\n\n## JSON\n\n * `from_json` converts a JSON string into its strongly typed (map, vector, int, double, string) representations\n * `to_json` converts a ChaiScript object (either a `Object` or one of map, vector, int, double, string) tree into its JSON string representation\n \n## Extras\nChaiScript itself does not provide a link to the math functions defined in `<cmath>`. You can either add them yourself, or use the [ChaiScript_Extras](https://github.com/ChaiScript/ChaiScript_Extras) helper library. (Which also provides some additional string functions.)\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "description.txt",
          "type": "blob",
          "size": 0.1962890625,
          "content": "ChaiScript is a header-only C++ embedded scripting language loosely based on ECMA script. It is designed for ease of use and tight integration with C++. See http://www.chaiscript.com for more details.\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "license.txt",
          "type": "blob",
          "size": 1.537109375,
          "content": "BSD-3-Clause License\n\nCopyright 2009-2018 Jason Turner\nCopyright 2009-2012 Jonathan Turner.\n\nAll Rights Reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above\n    copyright notice, this list of conditions and the following\n    disclaimer in the documentation and/or other materials provided\n    with the distribution.\n  * Neither the name of Jason Turner nor Jonathan Turner nor the \n    name of contributors may be used to endorse or promote products derived\n    from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "performance_tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 4.689453125,
          "content": "<a href=\"https://www.patreon.com/bePatron?u=2977989&redirect_uri=https%3A%2F%2Fwww.patreon.com%2Flefticus\">\n    <img height=\"40\" width=\"204\" src=\"https://s3-us-west-1.amazonaws.com/widget-images/become-patron-widget-medium%402x.png\">\n</a>\n\n\nMaster Status: [![Linux Build Status](https://travis-ci.org/ChaiScript/ChaiScript.png?branch=master)](https://travis-ci.org/ChaiScript/ChaiScript) [![Windows Build status](https://ci.appveyor.com/api/projects/status/6u3r4s81kkjqmsqw?svg=true)](https://ci.appveyor.com/project/lefticus/chaiscript) [![codecov.io](http://codecov.io/github/ChaiScript/ChaiScript/coverage.svg?branch=master)](http://codecov.io/github/ChaiScript/ChaiScript?branch=master)\n\nDevelop Status: [![Linux Build Status](https://travis-ci.org/ChaiScript/ChaiScript.png?branch=develop)](https://travis-ci.org/ChaiScript/ChaiScript) [![Windows Build status](https://ci.appveyor.com/api/projects/status/6u3r4s81kkjqmsqw/branch/develop?svg=true)](https://ci.appveyor.com/project/lefticus/chaiscript/branch/develop) [![codecov.io](http://codecov.io/github/ChaiScript/ChaiScript/coverage.svg?branch=develop)](http://codecov.io/github/ChaiScript/ChaiScript?branch=develop)\n\nChaiScript\n\nhttp://www.chaiscript.com\n\n(c) 2009-2012 Jonathan Turner\n(c) 2009-2017 Jason Turner\n\nRelease under the BSD license, see \"license.txt\" for details.\n\n\nIntroduction\n============\n\n[![Gitter](https://badges.gitter.im/JoinChat.svg)](https://gitter.im/ChaiScript/ChaiScript?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nChaiScript is one of the only embedded scripting language designed from the\nground up to directly target C++ and take advantage of modern C++ development\ntechniques, working with the developer how they would expect it to work.  Being a\nnative C++ application, it has some advantages over existing embedded scripting\nlanguages:\n\n1. It uses a header-only approach, which makes it easy to integrate with\n   existing projects.\n2. It maintains type safety between your C++ application and the user scripts.\n3. It supports a variety of C++ techniques including callbacks, overloaded\n   functions, class methods, and stl containers.\n\n\nRequirements\n============\n\nChaiScript requires a C++17 compiler to build with support for variadic\ntemplates.  It has been tested with gcc 7 and clang 6 (with libcxx).\n\nInstallation using vcpkg\n========================\n\nYou can download and install ChaiScript using the [vcpkg](https://github.com/Microsoft/vcpkg/) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    vcpkg install chaiscript\n\nThe ChaiScript port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\nUsage\n=====\n\n* Add the ChaiScript include directory to your project's header search path\n* Add `#include <chaiscript/chaiscript.hpp>` to your source file\n* Instantiate the ChaiScript engine in your application.  For example, create a\n  new engine with the name `chai` like so: `chaiscript::ChaiScript chai`\n* The default behavior is to load the ChaiScript standard library from a\n  loadable module. A second option is to compile the library into your code,\n  see below for an example.\n\nOnce instantiated, the engine is ready to start running ChaiScript source. You\nhave two main options for processing ChaiScript source: a line at a time using\n`chai.eval(string)` and a file at a time using `chai.eval_file(fname)`\n\nTo make functions in your C++ code visible to scripts, they must be registered\nwith the scripting engine.  To do so, call add:\n\n    chai.add(chaiscript::fun(&my_function), \"my_function_name\");\n\nOnce registered the function will be visible to scripts as \"my_function_name\"\n\nExamples\n========\n\nChaiScript is similar to ECMAScript (aka JavaScript(tm)), but with some\nmodifications to make it easier to use.  For usage examples see the \"samples\"\ndirectory, and for more in-depth look at the language, the unit tests in the\n\"unittests\" directory cover the most ground.\n\nFor examples of how to register parts of your C++ application, see\n\"example.cpp\" in the \"samples\" directory. Example.cpp is verbose and shows every\npossible way of working with the library. For further documentation generate\nthe doxygen documentation in the build folder or see the website\nhttp://www.chaiscript.com.\n\n\nThe shortest complete example possible follows:\n\n```C++\n/// main.cpp\n\n#include <chaiscript/chaiscript.hpp>\n\ndouble function(int i, double j)\n{\n  return i * j;\n}\n\nint main()\n{\n  chaiscript::ChaiScript chai;\n  chai.add(chaiscript::fun(&function), \"function\");\n\n  double d = chai.eval<double>(\"function(3, 4.75);\");\n}\n```\n"
        },
        {
          "name": "releasenotes.md",
          "type": "blob",
          "size": 12.341796875,
          "content": "Notes:\n=======\nCurrent Version: 6.1.1\n\n### Changes since 6.1.0\n\n * Handle the returning of `&` to `*` types. This specifically comes up with `std::vector<int *>` and similar containers\n * Update CMake to use `LIBDIR` instead of `lib` #502 by @guoyunhe\n * Add documentation for installing ChaiScript with vcpkg #500 by @grdowns\n * Fix warning for implicit 'this' lambda capture in C++20 #495 by @Josh-Thompson\n\n### Changes since 6.0.0\n\n * Add namespacing support #290 @stephenberry\n * Add utf parsing support\n * cheatsheet.md updates\n * `add_class` utility support for scoped enums #306 @StanEpp\n * Parser optimizations #300 @niXman\n * Various JSON fixes #377 #400 #409 #371 @totalgee @dinghram @arcoRocks\n * Various cleanups, bugfixes and warning fixes and minor performance improvements\n * Support for C++17 compilers!\n * Support for UTF8 BOM #439 @AlekMosingiewicz @MarioLiebisch\n\n### Changes since 5.8.6\n\n*6.0.0 is a massive rework compared to 5.x. It now requires a C++14 enabled compiler*\n\n#### Compiler Requirements\n\n* MSVC 2015 or greater\n* g++ 4.9 or greater\n* clang 3.6 or greater\n\n#### Breaking Changes\n\n* Instantiating a ChaiScript object now, by default, builds the stdlib in\n  * This was done to address the most common support issues of loading stdlib dynamically at runtime\n  * If you want the old behavior, use include/chaiscript/chaiscript_basic.hpp\n* Headers have been reorganized to fully separate stdlib/parser/engine from each other (some faster builds)\n* Bootstrap functions no longer return a reference to the module added to (compile time savings)\n* It's now no longer possible modify AST_Nodes (compile time, runtime efficiency)\n* Function annotations no longer exist (simplifies code, reduces compile time, compile size)\n\n#### New Features Added\n\n* Modular optimization system; this can be accessed via the ChaiScript_Basic interface\n* Execution tracing capability; also accessed via ChaiScript_Basic interface\n* range-based for loops `for( id : container ) { }` (much better performance than other loop types)\n* If-init expressions (ala C++17)\n* Support for passing r-value references to functions\n* Support for containing unique_ptr\n* Add helpers for exposing enum classes to ChaiScript\n* Allow typed ChaiScript defined functions to perform conversions on call #303\n\n#### Improvements\n\n* Compile time improvements\n* Compile size improvements\n* Significant runtime improvements (see \"Modular optimization system\")\n* Significant parser improvements, both with parse-time and parser initialization time (Thanks @niXman)\n* Fix type conversion to bool in conditionals\n\n#### Improvements Still Need To Be Made\n\n* File location tracking has been rewritten; this currently means error location reporting is not as good as it was\n* Tracing capability needs to be tested and vetted\n\n### Changes since 5.8.5\n* Optimize away `return` statements in lambdas also\n* Allow conversions to bool in conditionals\n* Don't allow `class` statements inside of scopes\n* Properly error when a dynamic object non-function member is called\n\n### Changes since 5.8.4\n* Fix order of operations for prefix operators\n* Make sure atomics are initialized properly\n* Remove parsing of unused prefix `&` operator\n\n### Changes since 5.8.3\n* Fix case with some numeric conversions mixed with numerics that do not need conversion\n\n### Changes since 5.8.2\n* Add support for reference of pointer return types\n\n### Changes since 5.8.1\n* Allow casting to non-const & std::shared_ptr<T>\n\n\n### Changes since 5.8.0\n* Fix parsing of floats to be locale independent #250\n* Various warning fixes on various platforms\n\n\n### Changes since 5.7.1\n* Make all parser iterator operations range checked\n* Parse in-string eval statements once, not once for each execution\n* Fix parsing of operators (ie 1<-1 now parses)\n* Fix variable scoping for functors\n* Exception reduction\n* Various object lifetime fixes\n* Add JSON support for load / save #207\n* Numeric overload resolution fixes #209 \n* Fix long long #208 \n* Add octal escapes in strings #211\n* Fixed sizing of binary literals #213\n* Added support for != with bool values #217\n* Various value assignment vector fixes \n* Fixed broken hex escape sequences from @ChristianKaeser\n* Multiply defined symbols fixes #232 @RaptorFactor\n* Add add_class<Enum> helper #233  @vrennert\n* Cheatsheet fixes #235 @mlamby\n* Fix parsing of strings inside of in-string eval statements\n* Allow lower-case global keyword\n* Enable thread-local on MSVC (should be significant performance boost)\n\n\n### Changes since 5.7.0\n* Build time reduction\n* Build size reduction\n* Performance increases\n* Fixed ~20 crash-bugs found with fuzzy testing #194\n  * Let unhandled exceptions propogate to user\n  * Report eval_error when break statement is not in loop\n  * Fix handling of 0 length scripts closes #193\n  * Don't crash on arity mismatch - Specifically affects the case where no overloads exist for a given function\n  * Fix error printing for `bind` calls\n  * Handle unexpected continue statement\n  * Check arity during bind\n  * Don't allow arith conversion on variadic function\n  * Correct `bind` parameter match count\n  * Add in expected Boxed_Value exception cases\n  * Check access to AST, don't allow `;` in func def\n  * Don't attempt arithmetic unary & call\n  * Don't crash on 0 param call to `bind`\n  * Catch errors during member function dispatch\n  * Properly handle type of const bool &\n* Automatic deduction of lambda type signatures\n* Work with non-polymorphic parent/child conversions\n* Move to codecov for coverage reporting\n* Add `.at` method for Map objects\n* Various corrections for support of move-only objects\n\n\n### Changes since 5.6.0\n\n* Significant code cleanups and reduction\n* Smaller builds\n* Faster compiles\n* Less runtime memory usage\n* ~2x faster runtimes\n* biicode support\n* method_missing feature added #164 @arBmind\n* Generic objects with dynamic properties support\n* Add ability to call functions contained in properties\n* Add lambda captures\n* Create [cheatsheet.md](cheatsheet.md) for all-in-one reference of features\n* Fix support for libc++\n* Eliminate clone of return value stored locally\n* Eliminate 'return' statements when last line of function\n* Reduce number of runtime exceptions occuring\n* Reduce copies / moves of return values. \n* make `use` statement return value of last statement in file\n* Add ability to access fixed array sizes\n* Add support for scientific notation floating point literals #174  @totalgee\n\n\n### Changes since 5.5.1\n* Throw exception on integer divide by 0\n* Add optional type specification to function declarations\n   \n  ```\n  def func(int i, j, double k) {\n    // i must be an int.\n    // j can be anything\n    // k must be a double\n    // normal conversion rules still apply\n  }\n   ```\n* Many minor fixes for compiler warnings\n* Add support for `std::future` and `std::async`\n  ```\n  var f := async(someFunction);\n  var f2 := async(someFunction2);\n\n  // someFunction and someFunction2 are running in parallel now\n  f.get();\n  f2.get();\n  ```\n* Fully support r-value returns, supporting move-only objects and reducing object copies\n\n\n### Changes since 5.5.0\n* 30% performance increase\n* Fix handling of object stack, resulting in greatly reduced memory usage\n* Code cleanups\n\n### Changes since 5.4.0\n* 2x performance increase\n* Significant code cleanups\n* Throw exception if user attempts to call function on null object\n* Allow user defined type conversions\n* Fix object lifetime for nested function calls made at the global scope\n* Fix returning of boolean values from function calls\n\n\n### Changes since 5.3.1\n* Decreased compile time and build size\n* Make \"reflection\" module built in (losing some of the time / build size gains)\n* Add new \"class\" syntax for ChaiScript defined methods and attributes see: [unittests/class.chai](unittests/class.chai) for examples\n* Minor performance enhancements\n* major to_string performance enhancements\n* Provide API for retrieving registered type name #124\n* Added strong reference to container to range object #132\n\n\n### Changes since 5.3.0\n* Add automatic conversion of arithmetic return types, following the same\n  rules as conversion of arithmetic types when passing parameters\n* Add automatic casting up the inheritence hierarchy when possible.\n* Enable travis.ci testing\n* Allow users to add globals from within script\n* Various static analysis fixes\n* Code modernization to C++11\n* Unofficial support for Haiku added\n* Fix #121 - Inability to compile on cygwin\n* Formatting fixes and spelling corrections\n* Apply \"include what you use\" https://code.google.com/p/include-what-you-use/\n* Apply clang-modernize\n* Various threading fixes\n* Performance improvements\n\n### Changes since 5.2.0\n* Official support for MSVC with C++11. All major platforms and compilers are now support for C++11 release\n\n### Changes since 4.2.0\n* Enhanced unit tests\n* Add `continue` statement, fix various use cases for `for`  loops\n* Fix use of suffixed numbers in vector initialization\n* Code cleanups\n* Eliminate global data, which makes code more portable and thread safe\n* Fix issue #79\n* Merge pretty_print fixes from @mgee #82\n* Compiler warning fixes for latest compiler releases\n* Fix threading problems\n* Fix linking error on MacOS Mavericks #88\n* Allow non-const globals\n* Make sure user cannot name a variable with `::` in it #91\n* Fix various string / map / vector `size` and `count` calls for compilers which have weird overloads for them. #90 #93 #95\n* Make module search path relative to the currently running executable\n* Build and work with wstring windows builds\n* fix for some new line cases in the middle of a vector initialization from jespada\n\n### Changes since 5.1.0\n* Add support for automatic conversion of arithmetic types when possible\n  and when no ambiguous method dispatch exists.\n\n### Changes since 5.0.0\n* Fix sizing of numeric constants to match that of the C++ standard\n* Add support for u,ll,l,f suffixes for numeric constants\n* Siginificant improvement in error reporting\n\n### Changes since 4.0.0\n* Dropped boost in favor of C++11\n* Separated out stdlib to make more options for compile time improvements\n\n### Changes since 3.1.0\n* svenstaro: Unused variables and CMake consistency fixes\n* Added support for returning pointers from functions (#13)\n* Compile with -pedantic (#9)\n* Fix issues with multiple ChaiScript object types having the same attribute name (#15)\n* Prevent variable redeclaration in same scope (#22)\n* mgee: Boxed_Number improvements (#27)\n* Support switch statements (#34)\n* Fix uint16 comparions (#26)\n* Add ability to add const_var globals in Module objects (#14)\n* Add support for ternary operators ?:\n* Add headers to CMakeLists so they show up in IDEs\n* Add ability to get vector of defined objects and vector of defined functions\n* Fix memory leak in cyclical references\n* Clean up static analysis issues discovered\n* Fix vector construction to be consistent with map construction\n* Increased unit tests to 161\n* Performance enhancements\n\n### Changes since 3.0.0\n* Numeric operations performance increased approximately 10x\n* Looping operations performance increased up to 2x\n* Engine start up time decreased\n* Several parsing bugs related to index operators fixed\n* Added full support for all C algebraic types: double, long double, float, int, long, char,\n  uint8_t, uint16_t, uint32_t, uint64_t, int8_t, int16_t, int32_t, int64_t\n* Enhanced support for capturing of exceptions thrown from ChaiScript in C++\n\n### Changes since 2.3.3\n* Code simplifications\n* Fully integrate documentation with source code in doxygen style comments\n* Unit tests increased from 114 to 137\n* Automatic conversion between boost::function objects and ChaiScript functions \n* Many bug fixes\n* Minor performance improvements\n* Namespace reorganization to make end user code more accessible\n* clang support\n* VisualStudio 2010 Support\n* Support for C++ base classes and automatic upcasting \n* Remove __ reserved identifiers\n* Better code organization to reduce #ifdefs \n* clanmills: command line options for chai eval\n* clanmills: parser cleanups and code reduction\n* Function introspection and reflection \n* Correct function dispatch order to account for base classes and provide a defined order of dispatch \n* Predictable object lifetime that emulates C++ stack lifetime\n* emarcotte: pkgconfig support\n* standardize on method/member naming and indentation\n* 64bit Visual Studio support\n* Better support for const objects\n* Drastic reduction of runtime exceptions - making debug builds orders of magnitude faster\n* Support for platforms with no loadable module support\n* Add helper macro for registering class \n"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "static_libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "supporters.md",
          "type": "blob",
          "size": 0.0009765625,
          "content": "\n"
        },
        {
          "name": "unittests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}