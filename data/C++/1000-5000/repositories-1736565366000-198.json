{
  "metadata": {
    "timestamp": 1736565366000,
    "page": 198,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mapnik/mapnik",
      "stars": 3709,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.759765625,
          "content": "Language: Cpp\nAccessModifierOffset: -2\nAlignAfterOpenBracket: Align\nAlignArrayOfStructures: None\nAlignConsecutiveAssignments: None\nAlignConsecutiveDeclarations: None\nAlignConsecutiveMacros: Consecutive\nAlignEscapedNewlines: Right\nAlignOperands: Align\nAlignTrailingComments: true\nAllowAllArgumentsOnNextLine: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: Empty\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortEnumsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: Inline\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLambdasOnASingleLine: Inline\n# AlwaysBreakAfterReturnType:\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: false\nBitFieldColonSpacing: After\nBreakBeforeBraces: Custom\nBraceWrapping:\n  AfterCaseLabel: false\n  AfterClass: true\n  AfterControlStatement: Always\n  AfterEnum: false # see AllowShortEnumsOnASingleLine\n  AfterFunction: true # see AllowShortFunctionsOnASingleLine\n  AfterNamespace: false\n  AfterStruct: true\n  AfterExternBlock: false\n  BeforeCatch: true\n  BeforeElse: true\n  BeforeLambdaBody: false\n  BeforeWhile: false\n  SplitEmptyFunction: false\n  SplitEmptyRecord: false\n  SplitEmptyNamespace: false\nBreakBeforeBinaryOperators: None\nBreakBeforeConceptDeclarations: false\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializers: BeforeComma\nBreakInheritanceList: AfterComma\nBreakStringLiterals: true\nColumnLimit: 120\nCompactNamespaces: false\nContinuationIndentWidth: 2\nCpp11BracedListStyle: true\nDeriveLineEnding: true\nEmptyLineAfterAccessModifier: Leave\nEmptyLineBeforeAccessModifier: LogicalBlock\nFixNamespaceComments: true\nIncludeBlocks: Preserve\nIndentCaseBlocks: false\nIndentCaseLabels: true\nIndentExternBlock: NoIndent\nIndentPPDirectives: None\nIndentRequires: true\nIndentWidth: 4\nIndentWrappedFunctionNames: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nLambdaBodyIndentation: Signature\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\n# PackConstructorInitializers: CurrentLine # only clang-format > 14\nPointerAlignment: Left\n#QualifierAlignment: Left # only clang-format > 14\nReferenceAlignment: Left\nReflowComments: true\nSortIncludes: Never\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: false\nSpaceBeforeInheritanceColon: true\nStandard: c++14\nBinPackParameters: false\nBreakBeforeInheritanceComma: false\nIncludeCategories:\n  # Headers in <> without extension.\n  - Regex: '<([A-Za-z0-9\\Q/-_\\E])+>'\n    Priority: 1\n  # Headers in <> from specific external libraries.\n  - Regex: '<(boost)\\/'\n    Priority: 2\n  # Headers in <> from specific external libraries.\n  - Regex: '<(mapnik)\\/'\n    Priority: 3\n  # Headers in <> with extension.\n  - Regex: '<([A-Za-z0-9.\\Q/-_\\E])+>'\n    Priority: 4\n  # Headers in \"\" with extension.\n  - Regex: '\"([A-Za-z0-9.\\Q/-_\\E])+\"'\n    Priority: 5\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0439453125,
          "content": "*.svg text eol=lf\nscons/** linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.1533203125,
          "content": ".DS_Store\n.vscode\n.cache\n*.gcov\n*.gcda\n*.gcno\n*~\n*.o\n*.pyc\n*.os\n*.so\n*.so.*\n*.a\n*.swp\n*.dylib\nmapnik-gyp\nplugins/input/*.input\nplugins/input/templates/*.input\ndemo/c++/rundemo\nbindings/python/mapnik/paths.py\nconfig.cache\nconfig.log\nconfig.py\nmapnik-settings.env\nmason_packages/\n.mason/\n.sconf_temp/\n.sconsign.dblite\ndemo/viewer/viewer.ini\ntests/cpp_tests/font_registration_test\ntests/python_tests/raster_colorizer_test.png\ntests/python_tests/raster_colorizer_test_save.xml\nutils/mapnik-config/mapnik-config\nutils/shapeindex/shapeindex\nutils/mapnik-index/mapnik-index\nutils/ogrindex/ogrindex\nutils/pgsql2sqlite/pgsql2sqlite\nutils/svg2png/svg2png\nutils/mapnik-render/mapnik-render\ndemo/python/demo*\ndemo/python/map.xml\ntests/data/sqlite/*index\ndemo/c++/cairo-demo.pdf\ndemo/c++/cairo-demo.png\ndemo/c++/cairo-demo256.png\ndemo/c++/cairo-demo.svg\ndemo/c++/demo.tif\ndemo/c++/demo.jpg\ndemo/c++/demo.png\ndemo/c++/demo256.png\ndemo/viewer/Makefile\ndemo/viewer/Makefile.Debug\ndemo/viewer/Makefile.Release\ndemo/viewer/release/\ndemo/viewer/ui_about.h\ndemo/viewer/ui_info.h\ndemo/viewer/ui_layer_info.h\ntest/standalone/*-bin\ntest/unit/run\ntest/visual/run\n# cmake \nbuild\n.vs\n\nCMakeUserPresets.json\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.734375,
          "content": "[submodule \"test/data\"]\n\tpath = test/data\n\turl = https://github.com/mapnik/test-data.git\n\tbranch = master\n[submodule \"test/data-visual\"]\n\tpath = test/data-visual\n\turl = https://github.com/mapnik/test-data-visual.git\n\tbranch = master\n[submodule \"deps/mapbox/variant\"]\n\tpath = deps/mapbox/variant\n\turl = https://github.com/mapbox/variant.git\n        branch = master\n[submodule \"deps/mapbox/geometry\"]\n\tpath = deps/mapbox/geometry\n\turl = https://github.com/mapbox/geometry.hpp.git\n        branch = master\n[submodule \"deps/mapbox/protozero\"]\n\tpath = deps/mapbox/protozero\n\turl = https://github.com/mapbox/protozero.git\n        branch = master\n[submodule \"deps/mapbox/polylabel\"]\n\tpath = deps/mapbox/polylabel\n\turl = https://github.com/mapbox/polylabel.git\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.521484375,
          "content": "# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\nrepos:\n    - repo: https://github.com/pre-commit/pre-commit-hooks\n      rev: v4.6.0\n      hooks:\n          - id: trailing-whitespace\n            files: ^.*\\.cmake|CMakeLists\\.txt$\n          - id: end-of-file-fixer\n            files: ^.*\\.cmake|CMakeLists\\.txt$\n            \n    - repo: https://github.com/pre-commit/mirrors-clang-format\n      rev: v18.1.3\n      hooks:\n          - id: clang-format\n            types_or: [c++, c]\n"
        },
        {
          "name": "AUTHORS.md",
          "type": "blob",
          "size": 1.3681640625,
          "content": "## Mapnik Contributors\n\nMapnik is written by Artem Pavlenko with contributions from:\n\n* Andy Allen\n* AJ Ashton\n* Matt Amos\n* Lucio Asnaghi\n* Alexandre Bonnasseau\n* Justin Bronn\n* Joel Brown\n* Christopher Brown\n* Jon Burgess\n* Stephan Bösch-Plepelits\n* Manel Clos\n* Toby Collet\n* Robert Coup\n* Berteun Damman\n* Petr Dlouhy\n* Jiri Drbalek\n* Jean-Francois Doyon\n* David Eastcott\n* Seth Fitzsimmons\n* Sean Gillies\n* Krzysztof Godlewski\n* Beau Gunderson\n* John Hague\n* Dominic Hargreaves\n* Axel Haustant\n* Aubrey Holland\n* Jordan Hollinger\n* Tom Hughes\n* Konstantin Käfer\n* Mak Kolybabi\n* Peter Körner\n* Hermann Kraus\n* Stella Laurenzo\n* XinGang Li\n* lightmare\n* David Leaver\n* Carlos López\n* Dennis Luxen\n* Tom MacWright\n* Sara Metz\n* Michal Migurski\n* Andrii Mishkovskyi\n* Ben Moores\n* Mike Morris\n* Dražen Odobašić\n* Cameron Patrick\n* Clint Pells\n* Igor Podolskiy\n* Reid Priedhorsky\n* Brian Quinion\n* Even Rouault\n* Marcin Rudowski\n* Sandro Santilli\n* Christopher Schmidt\n* Andreas Schneider\n* Vincent Schut\n* Ehud Shabtai\n* David Siegel\n* Steve Singer\n* Paul Smith\n* Vince Spader\n* Philipp Spitzer\n* Dane Springmeyer\n* Craig de Stigter\n* Dave Stubbs\n* River Tarnell\n* Cezary Tarnowski\n* Blake Thompson\n* Oliver Tonnhofer\n* Jochen Topf\n* Alberto Valverde\n* Martijn van Oosterhout \n* Andreas Volz\n* Lennard voor den Dag\n* Shaun Walbridge\n* Rich Wareham\n* Nick Whitelegg\n* Leslie Wu\n* Roman Galacz\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 91.3115234375,
          "content": "# Mapnik Changelog\n\nA simple log of core changes affecting Mapnik usage.\n\nDevelopers: Please commit along with changes.\n\nFor a complete change history, see the git log.\n\n## Mapnik 4.0.4\n\nReleased December 4th, 2024\n\n(Packaged from [51a8a59f1](https://github.com/mapnik/mapnik/commit/51a8a59f1)\n\n- Explicit conversions operators in Expressions bool(expr), int(expr), float(expr), str(expr)\n- value::to_bool() - sync logic with Python bool() operator e.g `if 0 -> false : else -> true`\n- Demo viewer - fix bounding box reprojection\n\n## Mapnik 4.0.3\n\nReleased October 30th, 2024\n\n(Packaged from [05389e3c7](https://github.com/mapnik/mapnik/commit/05389e3c7))\n\n- Remove 'final' specifier from invalid_featureset implementation\n  (issues with dynamic_cast<> when building using Apple clang version 16.0.0 on darwin-arm64)\n- Rename invalid_featureset to empty_featureset\n- Upgrade to SCons v4.8.1\n- Fix unit tests e.g  #endif statement (via @bgardner-noggin)\n\n## Mapnik 4.0.2\n\nReleased August 21st, 2024\n\n- CMake build - set `SOVERSION` to `${MAPNIK_MAJOR_VERSION}.${MAPNIK_MINOR_VERSION}`\n- Upgraded SCons build system to v4.8.0\n\n## Mapnik 4.0.1\n\n- Use CMAKE_INSTALL_LIBDIR for libdir in pkg-config files\n- Support gcc 14\n- Improved accuracy of bounding box re-projections. Automatic spliting at (0, 0) and merging results.\n- Fixes missing features when using WGS 84 / Arctic Polar Stereographic (`epsg:4326 <-> epsg:3995`)\n- Added `area_of_use` method to `mapnik::projection`\n\n## Mapnik 4.0.0\n\n#### Notice\n\n- Mapnik now requires C++17 compliant compiler (`-std=c++17`)\n- Mapnik now supports CMake as a build system. See [#4191](https://github.com/mapnik/mapnik/pull/4191) and the [docs](https://github.com/mapnik/mapnik/blob/master/docs/cmake-usage.md) for more info.\n\n#### Breaking Changes\n\n- Reworked datasource plugin system. Plugins now need to implement a class with the macros in `datasource_plugin.hpp` ([#4291](https://github.com/mapnik/mapnik/pull/4291))\n- mapnik now has a global `mapnik::setup()` method which have to be called before any other functions of mapnik. Defined in `mapnik.hpp`. Currently there is a auto setup functionality. It can be disabled using the cmake option `DISABLE_MAPNIK_AUTOSETUP=ON`. Note: In order not to insert this change into every code base, it is currently still called during the dynamic initialisation time. However, if mapnik is compiled statically, this function must be called.  ([#4291](https://github.com/mapnik/mapnik/pull/4291))\n\n#### Core\n\n- Rewrote parser grammars using Boost.Spirit X3 (replacing Boost.Spirit Qi)\n- Fixed bbox reprojection ([#3935](https://github.com/mapnik/mapnik/issues/3935))\n- Fixed missing MarkersSymbolizer placement on zero-length lines ([#3899](https://github.com/mapnik/mapnik/issues/3899))\n- Fixed segfault when ShieldSymbolizer has invalid placements ([5464ae9](https://github.com/mapnik/mapnik/commit/5464ae9cdfd32983883463bcc2396dc0e51d885f), [#3604](https://github.com/mapnik/mapnik/issues/3604#issuecomment-281542148))\n- Fixed `apply_color_blind_filter` ([#3862](https://github.com/mapnik/mapnik/issues/3862))\n- Fixed GroupSymbolizer crash, `svg::path_attributes` are now stored in `std::deque` ([#3455](https://github.com/mapnik/mapnik/issues/3455))\n- Fixed compilation with ICU >= 61 ([#3880](https://github.com/mapnik/mapnik/issues/3880), [#3965](https://github.com/mapnik/mapnik/issues/3965))\n- Duplicate Style name in map XML now throws `config_error` in strict mode ([#3770](https://github.com/mapnik/mapnik/issues/3770), [#3917](https://github.com/mapnik/mapnik/issues/3917))\n- Improved padding calculation for polygon/line clipping ([#3909](https://github.com/mapnik/mapnik/issues/3909))\n- Slightly improved `sql_utils::table_from_sql` ([2587bb3](https://github.com/mapnik/mapnik/commit/2587bb3a1d8db397acfa8dcc2d332da3a8a9399f))\n- Added wrappers for proper quoting in SQL query construction: `sql_utils::identifier`, `sql_utils::literal` ([7b21713](https://github.com/mapnik/mapnik/commit/7b217133e2749b82c2638551045c4edbece15086))\n- Added two-argument `sql_utils::unquote`, `sql_utils::unquote_copy` that also collapse inner quotes ([a4e8ea2](https://github.com/mapnik/mapnik/commit/a4e8ea21be297d89bbf36ba594d6c661a7a9ac81))\n- Fixed mapnik static build with static plugins ([#4291](https://github.com/mapnik/mapnik/pull/4291))\n- Reworked mapnik::enumeration<...> ([#4372](https://github.com/mapnik/mapnik/pull/4372))\n\n#### Plugins\n\n- GDAL: fixed several issues with overviews ([#3912](https://github.com/mapnik/mapnik/issues/3912))\n- PostGIS: changed syntax for user `@variable` interpolation to `!@variable!` ([#3618](https://github.com/mapnik/mapnik/issues/3618))\n- PGraster: added variable interpolation like in PostGIS plugin ([#3618](https://github.com/mapnik/mapnik/issues/3618))\n- PostGIS & PGraster: using parameter `estimate_extent` now requires PostGIS >= 2.1.0 ([#3624](https://github.com/mapnik/mapnik/issues/3624))\n- PostGIS & PGraster: added parameter `application_name` [#3984](https://github.com/mapnik/mapnik/pull/3984)\n- PostGIS & PGraster: substituted numeric `!tokens!` now always have decimal point ([#3942](https://github.com/mapnik/mapnik/pull/3942))\n- PostGIS & PGraster: substituted `!bbox!` is now constructed with `ST_MakeEnvelope` ([#3319](https://github.com/mapnik/mapnik/pull/3319))\n\n\n## 3.0.20\n\nReleased: April 12, 2018\n\n(Packaged from [f02c7bc](https://github.com/mapnik/mapnik/commit/f02c7bcdb))\n\n- Make `max_image_area` a datasource parameter for GDAL.\n- GDAL Driver Overview Fix and Memory Reduction ([#3872](https://github.com/mapnik/mapnik/issues/3872))\n- Raster colorizer: check image bounds ([#3879](https://github.com/mapnik/mapnik/issues/3879))\n- Removed usage of `typename` in template template declarations (available in C++17) ([#3882](https://github.com/mapnik/mapnik/issues/3882))\n\n\n## 3.0.19\n\nReleased: March 06, 2018\n\n(Packaged from [d50562d](https://github.com/mapnik/mapnik/commit/d50562d54))\n\n- Backported scaling of precision by polygon size  ([#3844](https://github.com/mapnik/mapnik/issues/3844))\n- Backported GRID placement ([#3847](https://github.com/mapnik/mapnik/issues/3847), [#3854](https://github.com/mapnik/mapnik/issues/3854), [#3855](https://github.com/mapnik/mapnik/issues/3855))\n- Added missing `MAPNIK_DECL` to all `text_placement_` types ([7ce142a](https://github.com/mapnik/mapnik/commit/7ce142a5aa8e9da5ddd11266a054c1e69052230d))\n- Fixed invalid memory access if input buffer size is zero ([a602c65](https://github.com/mapnik/mapnik/commit/a602c65354a4b595821d2300f38ebc107d07e2a9))\n- Fixed handling of an empty polygon in `grid_vertex_converter` ([2f2dcf1](https://github.com/mapnik/mapnik/commit/2f2dcf1eeae71aaa7878f4bc9a39741321f07e68))\n- Fixed `PROJ_LIB` detection logic ([44f1ae3](https://github.com/mapnik/mapnik/commit/44f1ae3a6e9e9979d1a93343f40db6cd7dbf51d5))\n- Default to `icu-config` for obtaining `ICU_DATA` if `u_getDataDirectory` fails ([2cef98d](https://github.com/mapnik/mapnik/commit/2cef98d7f76cdd302afcf15f1c585379537e8f1d))\n\n\n## 3.0.18\n\nReleased: January 26, 2018\n\n(Packaged from [44ef46c](https://github.com/mapnik/mapnik/commit/44ef46c81))\n\n- SVG parser - fixed logic for calculating dimensions when `width` and `height` expressed in\n  percentage units ([#3812](https://github.com/mapnik/mapnik/issues/3812))\n- New improved `interior` placement algorithm ([#3839](https://github.com/mapnik/mapnik/issues/3839))\n- Fixed handling of an empty interior rings in `polygon_vertex_processor` ([#3833](https://github.com/mapnik/mapnik/issues/3833))\n- Fixed handling of an empty interior rings in `vertex_adapter` ([#3842](https://github.com/mapnik/mapnik/issues/3842))([#3838](https://github.com/mapnik/mapnik/issues/3838))\n\n\n## 3.0.17\n\nReleased: November 29, 2017\n\n(Packaged from [ebdd96c](https://github.com/mapnik/mapnik/commit/ebdd96c61))\n\n- Use `Scons 3` as an internal build sytsem + support both Python 2 and 3.\n- Added glibcxx workaround to support libstdc++-4.8\n\n\n## 3.0.16\n\nReleased: November 16, 2017\n\n(Packaged from [8d7b75e](https://github.com/mapnik/mapnik/commit/8d7b75e))\n\n- Added \"strict\" SVG parsing mode with consistent error handling  and disabled processing of unsupported attributes.\n- Added support for `<use>` element.\n- Implemented compile time string literal to integer conversion, to be able to convert large `if/else if/else` statements to `switch`.\n- WKB reader - pre-allocate optimisations in `multi_polygon` and `geometry_collection`.\n- Set alpha values in RGBA TIFFs even when `NODATA` value is present. ([#3714](https://github.com/mapnik/mapnik/issues/3714))\n- Support building with ICU >= 59.\n- SCons - added `ICU_DATA`, `PROJ_LIB` and `GDAL_DATA` settings, available via `mapnik-config`\n- Fixed centroid and interior text placement algorithms ([#3771](https://github.com/mapnik/mapnik/issues/3771))\n- Fixed memory leak ([#3775](https://github.com/mapnik/mapnik/issues/3775))\n- SVG parser - fixed default gradient vector in linear gradient.\n- Fixed bounding box collection logic ([#3709](https://github.com/mapnik/mapnik/issues/3709))\n\n\n## 3.0.15\n\nReleased: June 16, 2017\n\n(Packaged from [6e6cf84](https://github.com/mapnik/mapnik/commit/6e6cf84))\n\n- Restored `filter_factor` logic in `gdal.input` and added to `raster.input` ([#3699](https://github.com/mapnik/mapnik/issues/3699))\n   (updated tests [mapnik/test-data-visual@fd518f1](https://github.com/mapnik/test-data-visual/commit/fd518f1f512b8aea4ac740c2ce12c249616a291c))\n- Fixed bug related to rows swapping implementation in `tiff_reader` ref [#3679](https://github.com/mapnik/mapnik/issues/3679)\n   (updated visual tests to catch this regression in the future\n      [mapnik/test-data-visual@be0ba96](https://github.com/mapnik/test-data-visual/commit/be0ba965cd2240576a8edfca84801cbb7a4832d6))\n- TIFF I/O - port memory mapped based I/O from master\n\n\n## 3.0.14\n\nReleased: June 5, 2017\n\n(Packaged from [2b42e17](https://github.com/mapnik/mapnik/commit/2b42e17))\n\n- Fixed problems with high levels of overzooming in the GDAL and raster plugin where data would be slightly offset\n- High levels of overzooming on raster data no longer results in the return of a transparent image.\n- Fixed bug in `mapnik::util::file::data()` ([a220bda](https://github.com/mapnik/mapnik/commit/a220bda05d2aa1))\n- TIFF I/O - added support for grey scale multiband images + fixed and made generic `read_stripped` and `read_generic`.\n- shapeindex - return error code when no features can read from shapefile ([#3198](https://github.com/mapnik/mapnik/issues/3198))\n- Upgrade Scons to `2.5.1`\n- Fixed bug (typo) in `raster_featureset.cpp` ([#3696](https://github.com/mapnik/mapnik/issues/3696))\n- Made `freetype_engine` singleton again. This allows for better control of its life-time. Original interface is preserved via adding static methods ([#3688](https://github.com/mapnik/mapnik/issues/3688))\n\n\n## 3.0.13\n\nReleased: February 8, 2017\n\n(Packaged from [2a153c0](https://github.com/mapnik/mapnik/commit/2a153c0))\n\n- Unbundle `unifont` font from distribution\n- GeoJSON: improved parsing grammar avoiding temp synthesised attribute ([#3507](https://github.com/mapnik/mapnik/issues/3507))\n- GeoJSON: expose `num_features_to_query` datasource parameter + unit test ([#3515](https://github.com/mapnik/mapnik/issues/3515))\n- Fixed intersecting extents in different projections (PR [#3525](https://github.com/mapnik/mapnik/issues/3525) )\n- Fixed `blur` implementation by taking into account `scale_factor`\n- postgis.input - use 2D box for pgraster bounding box (PR [#3551](https://github.com/mapnik/mapnik/issues/3551))\n- Fixed GroupSymbolizer PairLayout with 3+ items ([#3526](https://github.com/mapnik/mapnik/issues/3526))\n- Simplified `hash` implementation ([204d30e](https://github.com/mapnik/mapnik/commit/204d30e58d3553278ab6bcda2d4122b0f13f6392))\n- Simplified `mapnik::value` conversion rules ([#3570](https://github.com/mapnik/mapnik/issues/3570))\n- Changed `render_thunk_list` to `std::list<render_thunk>` (PR [#3585](https://github.com/mapnik/mapnik/issues/3585))\n- Upgraded to variant `v1.1.5`\n- CSV.input - fixed `blank` line test ([8a3a380](https://github.com/mapnik/mapnik/commit/8a3a380b3b5c64681f2478b4f0d06f6a907f5eed))\n- GeoJSON - handle empty elements in position grammar (ref [#3609](https://github.com/mapnik/mapnik/issues/3609))\n- mapnik-index - return failure on invalid bounding box (ref [#3611](https://github.com/mapnik/mapnik/issues/3611))\n\n\n## 3.0.12\n\nReleased: September 8, 2016\n\n(Packaged from [1d22d86](https://github.com/mapnik/mapnik/commit/1d22d86))\n\n- Ensured gdal.input is registered once (refs [#3093](https://github.com/mapnik/mapnik/issues/3093) [#3339](https://github.com/mapnik/mapnik/issues/3339) [#3340](https://github.com/mapnik/mapnik/issues/3340))\n- Fixed `mapnik::util::is_clockwise` implementation to use coordinates relative to the origin and avoid numeric precision issues\n- `mapnik-index` is updated to fail on first error in input (csv)\n- Added `guard` to `get_object_severity` method (ref [#3322](https://github.com/mapnik/mapnik/issues/3322))\n- Improved `hash` calculation for `mapnik::value` (ref [#3406](https://github.com/mapnik/mapnik/issues/3406))\n- AGG - made cover `unsigned` to avoid left shift of negative values (ref [#3406](https://github.com/mapnik/mapnik/issues/3406))\n- Fixed using `scale_factor` in `evaluate_transform(..)`\n- Fixed line spacing logic by applying `scale factor`\n- ~~Fixed `stringify_object/stringify_array` implementations by disabling white space skipping (ref [#3419](https://github.com/mapnik/mapnik/issues/3419))~~\n- Added geojson unit test for property types/values\n- JSON - added support for object and array type in `json_value` and update `stringifier`\n- GDAL.input - fallback to using `overviews` if present ([8e84828](https://github.com/mapnik/mapnik/commit/8e8482803bb435726534c3b686a56037b7d3e8ad))\n- TopoJSON.input - improved and simplified grammar/parser implementation ([#3429](https://github.com/mapnik/mapnik/pull/3429))\n- GDAL.input - Added support for non-alpha mask band\n- TopoJSON.input - fixed order of ellements limitation (ref [#3434](https://github.com/mapnik/mapnik/issues/3434))\n- Fixed stroke-width size not included in markers ellipse bounding box (ref [#3445](https://github.com/mapnik/mapnik/issues/3445))\n- Implemented `char_array_buffer` and removed `boost::iostreams` dependency ([2e8c0d3](https://github.com/mapnik/mapnik/commit/2e8c0d36c2237f2815d8004c1b96bad909056eb9))\n- JSON.input - `extract_bounding_box_grammar` - make features optional (ref [#3463](https://github.com/mapnik/mapnik/issues/3463))\n- Ensure input plugins return `empty_featureset` rather than `nullptr` (feature_ptr())\n- Added support for quantising small (less than 3 pixel) images (ref [#3466](https://github.com/mapnik/mapnik/issues/3466))\n- Added support for natural logarithm function in expressions (ref [#3475](https://github.com/mapnik/mapnik/issues/3475))\n- Improved logic determining if certain compiler features are available e.g `inheriting constructors` (MSVC)\n- GeoJSON - corrected quoting in `stringify` objects (ref [#3491](https://github.com/mapnik/mapnik/issues/3491))\n- GeoJSON - ensured consistent ordering of attribute descriptors (ref [#3494](https://github.com/mapnik/mapnik/issues/3494))\n- GeoJSON - exposed `num_features_to_query` as datasource paramer (ref [#3495](https://github.com/mapnik/mapnik/issues/3495))\n- Replaced `boost::mpl::vector<Types...>` with `std::tuple<Types...>` (ref [#3503](https://github.com/mapnik/mapnik/issues/3503))\n- BuildingSymbolizer - fixed closing segment of polygon in building symbolizer (ref [#3505](https://github.com/mapnik/mapnik/issues/3505))\n- Update dependencies versions\n- Fixed warnings when compiling with g++5\n- Fixed image swap (ref [#3513](https://github.com/mapnik/mapnik/issues/3513))\n- Stop bundling testdata in source tarball (ref [#3335](https://github.com/mapnik/mapnik/issues/3335))\n\n\n## 3.0.11\n\nReleased: April 1, 2016\n\n(Packaged from [8d9dc27](https://github.com/mapnik/mapnik/commit/8d9dc27))\n\n - Raster scaling: fixed crash and clipping negative pixel values of floating point rasters ([#3349](https://github.com/mapnik/mapnik/pull/3349))\n - Restored support for unquoted strings in expressions ([#3390](https://github.com/mapnik/mapnik/pull/3390))\n - [TWKB](https://github.com/TWKB/) support via [#3356](https://github.com/mapnik/mapnik/pull/3356) ([#3355](https://github.com/mapnik/mapnik/issues/3355))\n - Visual test runner can render SVG, PDF and Postscript with Cairo renderer ([#3418](https://github.com/mapnik/mapnik/pull/3418))\n - Scale factor is now applied also to `text-line-spacing` and transforms ([#3416](https://github.com/mapnik/mapnik/pull/3416))\n\n\n## 3.0.10\n\nReleased: February 25, 2016\n\n(Packaged from [5c0d496](https://github.com/mapnik/mapnik/commit/5c0d496))\n\n - The `shapeindex` command now has a `--index-parts` option. When used the index will be bigger\n   but will allow the Shapefile datasource to only parse polygon parts within the query bounds.\n - WARNING: index files generated with this newer Mapnik are invalid for older versions of Mapnik.\n - Any `.index` files accompanying a `.shp` must now be regenerated otherwise\n   it will be skipped. To avoid this problem you can delete the existing `.index` files, or ideally run `shapeindex` to recreate the `.index`. ([#3300](https://github.com/mapnik/mapnik/pull/3300))\n   The trigger for this change was an optimization that required a new binary format for the shapefile indexes ([#3217](https://github.com/mapnik/mapnik/pull/3217)).\n - Shapeindex - another fix for skipping `null` shapes ([#3288](https://github.com/mapnik/mapnik/issues/3288))\n - Fixed support for filter expressions starting with `not` ([#3017](https://github.com/mapnik/mapnik/issues/3017))\n - Ensure `mapped_memory_cache` acts as singleton across shared objects ([#3306](https://github.com/mapnik/mapnik/issues/3306))\n - Removed miniz support in PNG encoder ([#3281](https://github.com/mapnik/mapnik/issues/3281))\n - Added `-fvisibility=hidden -fvisibility-inlines-hidden` to default compiler flags\n - Fixed parsing of SVG `PathElement` ([#3225](https://github.com/mapnik/mapnik/issues/3225))\n - JSON parsing now supports arbitrary (nested) attributes in `geometry`\n - Support for rendering `dash-array` in SVGs\n - SVG parser is now stricter (fails is all input is not parsable) ([#3251](https://github.com/mapnik/mapnik/issues/3251))\n - SVG parser now correctly handles optional separator `(,)` between multiple command parts\n - Optimized parsing of `png` format string\n - The `memory_datasource` now dynamically reports correct datasource type (vector or raster)\n - Upgraded `mapbox::variant v1.1.0`\n - Compare: https://github.com/mapnik/mapnik/compare/v3.0.9...v3.0.10\n\n\n## 3.0.9\n\nReleased: November 26, 2015\n\n(Packaged from [03a0926](https://github.com/mapnik/mapnik/commit/03a0926))\n\n - Fixed offsetting of complex paths and sharp angles ([#3160](https://github.com/mapnik/mapnik/pull/3160)) (via [@winni159](https://github.com/winni159))\n - Fixed mapnik.util.variant issue when compiling with gcc-5.x and SSO enabled by default ([#3103](https://github.com/mapnik/mapnik/issues/3103)) (via [@nkovacs](https://github.com/nkovacs))\n - Fixed issue with complex scripts where some character sequences weren't rendered correctly ([#3050](https://github.com/mapnik/mapnik/issues/3050)) (via [@jkroll20](https://github.com/jkroll20))\n - Revived postgis.input tests\n - JSON: geometry grammar has been re-factored and optimized to have expectation points\n - Filled missing specializations for value_bool in `mapnik::value` comparison operators\n - `mapnik.Image` - fixed copy semantics implementation for internal buffer\n - JSON parsing: unified error_handler across all grammars\n - Improved unit test coverage\n - Raster scaling: fixed nodata handling, accuracy when working with small floats and clipping floats by \\[0; 255\\] ([#3147](https://github.com/mapnik/mapnik/pull/3147))\n - Added [`code of conduct`](http://contributor-covenant.org)\n - GeoJSON plug-in is updated to skip feature with empty geometries\n - GeoJSON plug-in : ensure original order of features is preserved (fixed) ([#3182](https://github.com/mapnik/mapnik/issues/3182))\n - Shapeindex utility: fixed `empty` shapes handling and ported tests to c++\n - Centroid algorithm: fixed invalid input handling, particularly empty geometries ([#3185](https://github.com/mapnik/mapnik/pull/3185))\n - Updated SCons build system to the latest version 2.4.1 (http://scons.org/)\n\n\n## 3.0.8\n\nReleased: October 23, 2015\n\n(Packaged from [2d15567](https://github.com/mapnik/mapnik/commit/2d15567))\n\n - Renamed `SHAPE_MEMORY_MAPPED_FILE` define to `MAPNIK_MEMORY_MAPPED_FILE`. Pass `./configure MEMORY_MAPPED_FILE=True|False` to request\n   support for memory mapped files across Mapnik plugins (currently shape, csv, and geojson).\n - Unified `mapnik-index` utility supporting GeoJSON and CSV formats\n - Increased unit test coverage for GeoJSON and CSV plugins\n - shape.input - re-factor to support \\*.shx and improve handling various bogus shapefiles\n - geojson.input - make JSON parser stricter + support single Feature/Geometry as well as FeatureCollection\n - maintain 'FT_LOAD_NO_HINTING' + support >= harfbuzz 1.0.5\n - geojson.input - implement on-disk-index support\n\n\n## 3.0.7\n\nReleased: October 12, 2015\n\n(Packaged from [e161253](https://github.com/mapnik/mapnik/commit/e161253))\n\n - Removed `MAPNIK_VERSION_IS_RELEASE` define / `mapnik-config --version` not longer reports `-pre` for non-release versions.\n   Use `mapnik-config --git-revision` instead ([#3123](https://github.com/mapnik/mapnik/issues/3123))\n - Renamed `nik2img` command to `mapnik-render`\n - PostGIS: Fixed handling of all attributes when `key_field_as_attribute=false` ([#3120](https://github.com/mapnik/mapnik/issues/3120))\n - PostGIS: Fixed parsing of `key_field_as_attribute` as boolean: now `true/false` can be used in addition to `0/1`\n\n\n## 3.0.6\n\nReleased: October 7, 2015\n\n(Packaged from [3cebe97](https://github.com/mapnik/mapnik/commit/3cebe97))\n\n- PostGIS plugin: added `key_field_as_attribute` option. Defaults to `True` to preserve current behavior of having the `key_field` added both\n  as an attribute and as the `feature.id` value. If `key_field_as_attribute=false` is passed then the attribute is discarded ([#3115](https://github.com/mapnik/mapnik/issues/3115))\n- CSV plugin has been further optimized and has gained experimental support for on-disk indexes ([#3089](https://github.com/mapnik/mapnik/issues/3089))\n- SVG parser now fallsback to using `viewbox` if explicit dimensions are lacking ([#3081](https://github.com/mapnik/mapnik/issues/3081))\n- Visual tests: new command line arguments `--agg`, `--cairo`, `--svg`, `--grid` for selecting renderers ([#3074](https://github.com/mapnik/mapnik/pull/3074))\n- Visual tests: new command line argument `--scale-factor` or abbreviated `-s` for setting scale factor ([#3074](https://github.com/mapnik/mapnik/pull/3074))\n- Fixed parsing colors in hexadecimal notation ([#3075](https://github.com/mapnik/mapnik/pull/3075))\n- Removed mapnik::Feature type alias of mapnik::feature_impl ([#3099](https://github.com/mapnik/mapnik/pull/3099))\n- Fixed linking order for plugins to avoid possible linking errors on linux systems ([#3105](https://github.com/mapnik/mapnik/issues/3105))\n\n\n## 3.0.5\n\nReleased: September 16, 2015\n\n(Packaged from [165c704](https://github.com/mapnik/mapnik/commit/165c704))\n\n- `scale-hsla` image filter: parameters are no longer limited by interval \\[0, 1\\] ([#3054](https://github.com/mapnik/mapnik/pull/3054))\n- Windows: Fixed SVG file loading from unicode paths\n- `colorize-alpha` image filter: fixed normalization of color components ([#3058](https://github.com/mapnik/mapnik/pull/3058))\n- `colorize-alpha` image filter: added support for transparent colors ([#3061](https://github.com/mapnik/mapnik/pull/3061))\n- Enable reading optional `MAPNIK_LOG_FORMAT` environment variable([6d1ffc8](https://github.com/mapnik/mapnik/commit/6d1ffc8a93008b8c0a89d87d68b59afb2cb3757f))\n- CSV.input uses memory mapped file by default on \\*nix.\n- Updated bundled fonts to the latest version\n- Topojson.input - fixed geometry_index logic which was causing missing features\n- Fixed SVG file loading from unicode paths ([mapnik/node-mapnik#517](https://github.com/mapnik/node-mapnik/issues/517))\n- CSV.input - improved support for LF/CR/CRLF line endings on all platforms ([#3065](https://github.com/mapnik/mapnik/issues/3065))\n- Revive `zero allocation image interface` and add unit tests\n- Benchmark: use return values of test runner.\n\n\n## 3.0.4\n\nReleased: August 26, 2015\n\n(Packaged from [17bb81c](https://github.com/mapnik/mapnik/commit/17bb81c))\n\n- CSV.input: plug-in has been re-factored to minimise memory usage and to improve handling of larger input.\n  (NOTE: [large_csv](https://github.com/mapnik/mapnik/tree/large_csv) branch adds experimental trunsduction parser with deferred string initialisation)\n- CSV.input: added internal spatial index (boost::geometry::index::tree) for fast `bounding box` queries ([#3010](https://github.com/mapnik/mapnik/pull/3010))\n- Fixed deadlock in recursive datasource registration via [@zerebubuth](https://github.com/zerebubuth) ([#3038](https://github.com/mapnik/mapnik/pull/3038))\n- Introduced new command line argument `--limit` or `-l` to limit number of failed tests via [@talaj](https://github.com/talaj) ([#2996](https://github.com/mapnik/mapnik/pull/2996))\n\n\n## 3.0.3\n\nReleased: August 12, 2015\n\n(Packaged from [3d262c7](https://github.com/mapnik/mapnik/commit/3d262c7))\n\n- Fixed an issue with fields over size of `int32` in `OGR` plugin ([mapnik/node-mapnik#499](https://github.com/mapnik/node-mapnik/issues/499))\n- Added 3 new image-filters to simulate types of colorblindness (`color-blind-protanope`,`color-blind-deuteranope`,`color-blind-tritanope`)\n- Fix so that null text boxes have no bounding boxes when attempting placement ( [162f82c](https://github.com/mapnik/mapnik/commit/162f82cba5b0fb984c425586c6a4b354917abc47) )\n- Patch to add legacy method for setting JPEG quality in images ( [#3024](https://github.com/mapnik/mapnik/issues/3024) )\n- Added `filter_image` method which can modify an image in place or return a new image that is filtered\n- Added missing typedef's in `mapnik::geometry` to allow experimenting with different containers\n\n\n## 3.0.2\n\nReleased: July 31, 2015\n\n(Packaged from [8305e74](https://github.com/mapnik/mapnik/commit/8305e74))\n\n#### Summary\n\nThis release is centered around improvements to the SVG parsing within mapnik. Most work was done in pull request [#3003](https://github.com/mapnik/mapnik/issues/3003).\n\n- Added container to log SVG parsing errors\n- Reimplemented to use rapidxml for parsing XML (DOM)\n- Support both xml:id and id attributes ( xml:id takes precedence )\n- Added parse_id_from_url using boost::spirit\n- Added error tracking when parsing doubles\n- Unit tests for svg_parser to improve coverage\n- Fixed rx/ry validation for rounded_rect\n- Fixed dimensions parsing\n- Remove libxml2 dependency\n\n\n## 3.0.1\n\nReleased: July 27th, 2015\n\n(Packaged from [28f6f4d](https://github.com/mapnik/mapnik/commit/28f6f4d))\n\n#### Summary\n\nThe 3.0.1 fixes a few bugs in geojson parsing, svg parsing, and rendering. It also avoids a potential hang when using `line-geometry-transform` and includes a speedup for text rendering compared to v3.0.0. It is fully back compatible with v3.0.0 and everyone is encouraged to upgrade.\n\n- Fixed text placement performance after [#2949](https://github.com/mapnik/mapnik/issues/2949) ([#2963](https://github.com/mapnik/mapnik/issues/2963))\n- Fixed rendering behavior for `text-minimum-path-length` which regressed in 3.0.0 ([#2990](https://github.com/mapnik/mapnik/issues/2990))\n- Fixed handling of `xml:id` in SVG parsing ([#2989](https://github.com/mapnik/mapnik/issues/2989))\n- Fixed handling of out of range `rx` and `ry` in SVG `rect` ([#2991](https://github.com/mapnik/mapnik/issues/2991))\n- Fixed reporting of envelope from `mapnik::memory_datasource` when new features are added ([#2985](https://github.com/mapnik/mapnik/issues/2985))\n- Fixed parsing of GeoJSON when unknown properties encountered at `FeatureCollection` level ([#2983](https://github.com/mapnik/mapnik/issues/2983))\n- Fixed parsing of GeoJSON when properties contained `{}` ([#2964](https://github.com/mapnik/mapnik/issues/2964))\n- Fixed potential hang due to invalid use of `line-geometry-transform` ([6d6cb15](https://github.com/mapnik/mapnik/commit/6d6cb15))\n- Moved unmaintained plugins out of core: `osm`, `occi`, and `rasterlite` ([#2980](https://github.com/mapnik/mapnik/issues/2980))\n\n\n## 3.0.0\n\nReleased: July 7th, 2015\n\n(Packaged from [e6891a0](https://github.com/mapnik/mapnik/commit/e6891a0))\n\n#### Summary\n\nThe 3.0 release is a major milestone for Mapnik and includes many performance and design improvements. The is the first release to provide text shaping using the harfbuzz library. This harfbuzz support unlocks improved rendering and layer for many new languages, particularly SE Asian scripts. The internal storage for working with images and geometries has been made more flexible, faster, and strongly typed. The python bindings that were previously bundled with Mapnik have now been moved to <https://github.com/mapnik/python-mapnik> and are versioned independently.\n\n#### Notice\n\n - Mapnik 3.0.0 requires a compiler capable of `std=c++11`.\n - It is highly recommended you use the `clang++` compiler on both OS X and Linux since it has robust c++11 support lower memory requirements.\n\n##### Major Changes\n\n- Improved support for International Text (now uses harfbuzz library for text shaping)\n\n- Uses latest C++11 features for better performance (especially map loading)\n\n- Expressions everywhere: all symbolizer properties can now be data driven expressions (with the exception of `face-name` and `fontset-name` on the `TextSymbolizer`).\n\n- Rewritten geometry storage based on `std::vector` ([#2739](https://github.com/mapnik/mapnik/issues/2739))\n  - Separate storage of polygon exterior rings and interior rings to allow for more robust clipping of parts.\n  - Enforces consistent winding order per OGC spec (exterior rings are CCW, interior CW)\n  - Reduced memory consumption for layers with many points\n  - Ability to adapt Mapnik geometries to boost::geometry operations (in a zero-copy way)\n  - Ability to have i/o grammars for json/wkt work on geometries rather than paths for better efficiency and simpler code\n\n- Added new and experimental `dot` symbolizer for fast rendering of points\n\n- New functions supported in expressions: `exp`, `sin`, `cos`, `tan`, `atan`, `abs`.\n\n- New constants supported in expressions: `PI`, `DEG_TO_RAD`, `RAD_TO_DEG`\n\n- Added support for a variety of different grayscale images:\n  - `mapnik.imageType.null`\n  - `mapnik.imageType.rgba8`\n  - `mapnik.imageType.gray8`\n  - `mapnik.imageType.gray8s`\n  - `mapnik.imageType.gray16`\n  - `mapnik.imageType.gray16s`\n  - `mapnik.imageType.gray32`\n  - `mapnik.imageType.gray32s`\n  - `mapnik.imageType.gray32f`\n  - `mapnik.imageType.gray64`\n  - `mapnik.imageType.gray64s`\n  - `mapnik.imageType.gray64f`\n\n- Pattern symbolizers now support SVG input and applying transformations on them dynamically\n\n- Experimental / interface may change: `@variables` can be passed to renderer and evaluated in expressions\n\n- Supports being built with clang++ using `-fvisibility=hidden -flto` for smaller binaries\n\n- Supports being built with Visual Studio 2014 CTP \\#3\n\n- Shield icons are now pixel snapped for crisp rendering\n\n- `MarkersSymbolizer` now supports `avoid-edges`, `offset`, `geometry-transform`, `simplify` for `line` placement and two new `placement` options called `vertex-last` and `vertex-first` to place a single marker at the end or beginning of a path. Also `clip` is now respected when rendering markers on a LineString\ngeometry.\n\n- `TextSymbolizer` now supports `smooth`, `simplify`, `halo-opacity`, `halo-comp-op`, and `halo-transform`\n\n- `ShieldSymbolizer` now supports `smooth`, `simplify`, `halo-opacity`, `halo-comp-op`, and `halo-transform`\n\n- The `text-transform` property of `TextSymbolizer` now supports `reverse` value to flip direction of text.\n\n- The `TextSymbolizer` now supports `font-feature-settings` for advanced control over Opentype font rendering (https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings)\n\n- New GroupSymbolizer for applying multiple symbolizers in a single layout\n\n- AGG renderer: fixed geometry offsetting to work after smoothing to produce more consistent results ([#2202](https://github.com/mapnik/mapnik/issues/2202))\n\n- AGG renderer: increased `vertex_dist_epsilon` to ensure nearly coincident points are discarded more readily ([#2196](https://github.com/mapnik/mapnik/issues/2196))\n\n- GDAL plugin\n  - Now keeps datasets open for the lifetime of the datasource (rather than per featureset)\n  - Added back support for user driven `nodata` on rgb(a) images ([#2023](https://github.com/mapnik/mapnik/issues/2023))\n  - Allowed nodata to override alpha band if set on rgba images ([#2023](https://github.com/mapnik/mapnik/issues/2023))\n  - Added `nodata_tolerance` option to set nearby pixels transparent (has similar effect to the `nearblack` program) ([#2023](https://github.com/mapnik/mapnik/issues/2023))\n  - At process exit Mapnik core no longer calls `dlclose` on gdal.input ([#2716](https://github.com/mapnik/mapnik/issues/2716))\n\n- TopoJSON plugin\n  - Now supporting optional `bbox` property on layer\n  - Fixed support for reporting correct `feature.id()`\n  - Now supports `inline` string for passing data from memory\n  - Faster parsing via static initialization of grammars\n  - Fix crash on invalid arc index\n\n- GeoJSON plugin\n  - Now supporting optional `bbox` property on layer\n  - Fixed support for reporting correct `feature.id()`\n  - Now supports `inline` string for passing data from memory\n  - Faster parsing via static initialization of grammars\n\n- SQLite plugin\n  - Fixed support for handling all column types\n\n- CSV Plugin\n  - Added the ability to pass an `extent` in options\n\n- PostGIS plugin\n  - Added Async support to  - https://github.com/mapnik/mapnik/wiki/PostGIS-Async\n  - Added support for rendering 3D and 4D geometries (previously silently skipped) ([#44](https://github.com/mapnik/mapnik/issues/44))\n\n- Added support for web fonts: `.woff` format ([#2113](https://github.com/mapnik/mapnik/issues/2113))\n\n- Added missing support for `geometry-transform` in `line-pattern` and `polygon-pattern` symbolizers ([#2065](https://github.com/mapnik/mapnik/issues/2065))\n\n- Dropped support for Sun compiler\n\n- Upgraded unifont to `unifont-6.3.20131020`\n\n- Fixed crash when rendering to cairo context from python ([#2031](https://github.com/mapnik/mapnik/issues/2031))\n\n- Moved `label-position-tolerance` from `unsigned` type to `double`\n\n- Added support for more seamless blurring by rendering to a larger internal image to avoid edge effects ([#1478](https://github.com/mapnik/mapnik/issues/1478))\n\n- Fixed rendering of large shapes at high zoom levels, which might dissapear due to integer overflow. This\n  bug was previously fixable when geometries were clipped, but would, until now, re-appear if clipping was turned\n  off for a symbolizer ([#2000](https://github.com/mapnik/mapnik/issues/2000))\n\n- Added single color argument support to `colorize-alpha` to allow colorizing alpha with one color.\n\n- Added `color-to-alpha` `image-filter` to allow for applying alpha in proportion to color similiarity ([#2023](https://github.com/mapnik/mapnik/issues/2023))\n\n- Fixed alpha handling bug with `comp-op:dst-over` ([#1995](https://github.com/mapnik/mapnik/issues/1995))\n\n- Fixed alpha handling bug with building-fill-opacity ([#2011](https://github.com/mapnik/mapnik/issues/2011))\n\n- Optimized mapnik.Path.to_wkb\n\n- Python: added `__geo_interface__` to mapnik.Feature and mapnik.Path ([#2009](https://github.com/mapnik/mapnik/issues/2009))\n\n- Python: Exposed optimized WKTReader for parsing WKT into geometry paths ([6bfbb53](https://github.com/mapnik/mapnik/commit/6bfbb53))\n\n- Optimized expression evaluation of text by avoiding extra copy ([1dd1275](https://github.com/mapnik/mapnik/commit/1dd1275))\n\n- Added Map level `background-image-comp-op` to control the compositing operation used to blend the\n`background-image` onto the `background-color`. Has no meaning if `background-color` or `background-image`\nare not set. ([#1966](https://github.com/mapnik/mapnik/issues/1966))\n\n- Added Map level `background-image-opacity` to dynamically set the opacity of the `background-image` ([#1966](https://github.com/mapnik/mapnik/issues/1966))\n\n- Removed `RENDERING_STATS` compile option since it should be replaced with a better solution ([#1956](https://github.com/mapnik/mapnik/issues/1956))\n\n- Added support to experimental `svg_renderer` for grouping layers for inkscape and illustrator ([#1917](https://github.com/mapnik/mapnik/issues/1917))\n\n- Fixed compile of python bindings against Python 3.x\n\n- Optimized SVG loading by improving color parsing speed ([#1918](https://github.com/mapnik/mapnik/issues/1918))\n\n- Fixed startup problem when fonts cannot be read due to lacking permissions ([#1919](https://github.com/mapnik/mapnik/issues/1919))\n\n- Fixed bad behavior when negative image dimensions are requested ([#1927](https://github.com/mapnik/mapnik/issues/1927))\n\n- Fixed handling of `marker-ignore-placement:true` when `marker-placement:line` ([#1931](https://github.com/mapnik/mapnik/issues/1931))\n\n- Fixed handling of svg `opacity` in Cairo renderer ([#1943](https://github.com/mapnik/mapnik/issues/1943))\n\n- Fixed handling of SVG files which contain empty `<g>` ([#1944](https://github.com/mapnik/mapnik/issues/1944))\n\n- Fixed various 32bit test failures\n\n- Fixed compile against icu when by using `U_NAMESPACE_QUALIFIER`\n\n- Fixed missing support for using PathExpression in `marker-file` ([#1952](https://github.com/mapnik/mapnik/issues/1952))\n\n- Added support for `line-pattern-offset` ([#1991](https://github.com/mapnik/mapnik/issues/1991))\n\n- Added support for building on Android (tested with `android-ndk-r9`)\n\n- Added support for compiling with both -ansi (aka -std=c++98) and -std=c++11\n\n- Added support for compiling and linking on OS X against libc++\n\n- Fixed regression in handling `F` type dbf fields, introduced in v2.2.0.\n\n- Added the ability to create a mapnik Feature from a geojson feature with `mapnik.Feature.from_geojson` in python.\n\n- Added to python bindings: `has_tiff`, `has_png`, `has_webp`, `has_proj4`, `has_svg_renderer`, and `has_grid_renderer`\n\n- Made it possible to disable compilation of `grid_renderer` with `./configure GRID_RENDERER=False` ([#1962](https://github.com/mapnik/mapnik/issues/1962))\n\n- Added `premultiplied` property on mapnik::image_32 / mapnik.Image to enable knowledge of premultiplied status of image buffer.\n\n- Added `webp` image encoding and decoding support ([#1955](https://github.com/mapnik/mapnik/issues/1955))\n\n- Added `scale-hsla` image-filter that allows scaling colors in HSL color space. RGB is converted to HSL (hue-saturation-lightness) and then each value (and the original alpha value) is stretched based on the specified scaling values. An example syntax is `scale-hsla(0,1,0,1,0,1,0,1)` which means no change because the full range will be kept (0 for lowest, 1 for highest). Other examples are: 1) `scale-hsla(0,0,0,1,0,1,0,1)` which would force all colors to be red in hue in the same way `scale-hsla(1,1,0,1,0,1,0,1)` would, 2) `scale-hsla(0,1,1,1,0,1,0,1)` which would cause all colors to become fully saturated, 3) `scale-hsla(0,1,1,1,0,1,.5,1)` which would force no colors to be any more transparent than half, and 4) `scale-hsla(0,1,1,1,0,1,0,.5)` which would force all colors to be at least half transparent. ([#1954](https://github.com/mapnik/mapnik/issues/1954))\n\n- The `shapeindex` tool now works correctly with point 3d geometry types\n\n\n## 2.2.0\n\nReleased June 3rd, 2013\n\n(Packaged from [9231205](https://github.com/mapnik/mapnik/commit/9231205))\n\nSummary: The 2.2.0 release is primarily a performance and stability release. The code line represents development in the master branch since the release of 2.1.0 in Aug 2012 and therefore includes nearly a year of bug-fixes and optimizations. Nearly 500 new tests have been added bring the total coverage to 925. Shapefile and PostGIS datasources have benefited from numerous stability fixes, 64 bit integer support has been added to support OSM data in the grid renderer and in attribute filtering, and many fixes have landed for higher quality output when using a custom `scale_factor` during rendering. Critical code paths have been optimized include raster rendering, xml map loading, string to number conversion, vector reprojection when using `epsg:4326` and `epsg:3857`, `hextree` encoding, halo rendering, and rendering when using a custom `gamma`. Mapnik 2.2 also compiles faster than previous releases in the 2.x series and drops several unneeded and hard to install dependencies making builds on OS X and Windows easier than any previous release.\n\n- Removed 3 dependencies without loosing any functionality: `ltdl`, `cairomm` and `libsigc++` ([#1804](https://github.com/mapnik/mapnik/issues/1804),[#806](https://github.com/mapnik/mapnik/issues/806),[#1681](https://github.com/mapnik/mapnik/issues/1681))\n\n- Added 64 bit integer support in expressions, feature ids, and the grid_renderer ([#1661](https://github.com/mapnik/mapnik/issues/1661),[#1662](https://github.com/mapnik/mapnik/issues/1662),[#1662](https://github.com/mapnik/mapnik/issues/1662))\n\n- Added the ability to disable the need for various dependencies: `proj4`, `libpng`, `libtiff`, `libjpeg`\n\n- Added faster reprojection support between `epsg:3857` and `epsg:4326` ([#1705](https://github.com/mapnik/mapnik/issues/1705),[#1703](https://github.com/mapnik/mapnik/issues/1703),[#1579](https://github.com/mapnik/mapnik/issues/1579))\n\n- Added `colorize-alpha` image filter that applies user provided color gradients based on level of alpha.\n  Accepts one or more colors separated by commas. Each color can be paired with an `offset` value separated\n  by a space that is either `0-100%` or `0.0-1.0`. An `offset` of `0` is implied and the default. For background\n  on where this design came from see http://www.w3.org/TR/SVG/pservers.html#GradientStops. A simple example\n  of colorizing alpha into a \"rainbow\" is `colorize-alpha(blue,cyan,lightgreen, yellow, orange, red)`. An example of\n  using offsets and the variety of supported color encodings is to produce a ramp which sharp contrast between `blue`\n  and `cyan` is `colorize-alpha(blue 30%, cyan, yellow 0.7 , rgb(0%,80%,0%) 90%)` ([#1371](https://github.com/mapnik/mapnik/issues/1371)).\n\n- Fixed concurrency problem when using cursors in postgis plugin ([#1823](https://github.com/mapnik/mapnik/issues/1823),[#1588](https://github.com/mapnik/mapnik/issues/1588))\n\n- Fixed postgres connection pool leaks when using `persist_connection=false` ([#1764](https://github.com/mapnik/mapnik/issues/1764))\n\n- Fixed postgres connection key to respect highest value of `max_size` and `initial_size` for any layer in map ([#1599](https://github.com/mapnik/mapnik/issues/1599))\n\n- Fixed potential crash in wkb parsing when postgis returns null geometry ([#1843](https://github.com/mapnik/mapnik/issues/1843))\n\n- Fixed blurry rendering of image and SVG icons ([#1316](https://github.com/mapnik/mapnik/issues/1316))\n\n- Added detection of invalid srs values when loading xml ([#646](https://github.com/mapnik/mapnik/issues/646))\n\n- Added support for specifying a base_path as a third, optional argument to load_xml\n\n- Removed muffling of projection errors while rendering ([#646](https://github.com/mapnik/mapnik/issues/646))\n\n- Improved logging system (https://github.com/mapnik/mapnik/wiki/Logging)\n\n- Added support for reading images from in memory streams ([#1805](https://github.com/mapnik/mapnik/issues/1805))\n\n- Optimized halo rendering. When halo radius is < 1 new method will be used automatically ([#1781](https://github.com/mapnik/mapnik/issues/1781))\n\n- Added `text-halo-rasterizer` property. Set to `fast` for lower quality but faster\n  halo rendering ([#1298](https://github.com/mapnik/mapnik/issues/1298)) which matched new default method when radius is < 1.\n\n- Added support in `shape`, `sqlite`, `geojson`, and `csv` plugin for handling non-latin characters in the paths to file-based resources ([#1177](https://github.com/mapnik/mapnik/issues/1177))\n\n- Fixed rendering of markers when their size is greater than the specified `spacing` value ([#1487](https://github.com/mapnik/mapnik/issues/1487))\n\n- Fixed handling of alpha premultiplication in image scaling ([#1489](https://github.com/mapnik/mapnik/issues/1489))\n\n- Optimized rendering when a style with no symbolizers is encountered ([#1517](https://github.com/mapnik/mapnik/issues/1517))\n\n- Optimized string handling and type conversion by removing `boost::to_lower`, `boost::trim`, and `boost::lexical_cast` usage ([#1687](https://github.com/mapnik/mapnik/issues/1687),[#1687](https://github.com/mapnik/mapnik/issues/1687),[#1633](https://github.com/mapnik/mapnik/issues/1633))\n\n- Optimized alpha preserving `hextree` method for quantization of png images ([#1629](https://github.com/mapnik/mapnik/issues/1629))\n\n- Faster rendering of rasters by reducing memory allocation of temporary buffers ([#1516](https://github.com/mapnik/mapnik/issues/1516))\n\n- Fixed some raster reprojection artifacts ([#1501](https://github.com/mapnik/mapnik/issues/1501))\n\n- Fixed raster alignment when width != height and raster is being scaled ([#1748](https://github.com/mapnik/mapnik/issues/1748),[#1622](https://github.com/mapnik/mapnik/issues/1622))\n\n- Added support for caching rasters for re-use during rendering when styling more than once per layer ([#1543](https://github.com/mapnik/mapnik/issues/1543))\n\n- Improved compile speeds of the code - in some cases by up to 2x and removed need for freetype dependency when building code against mapnik ([#1688](https://github.com/mapnik/mapnik/issues/1688), [#1756](https://github.com/mapnik/mapnik/issues/1756))\n\n- Removed internal rule cache on `mapnik::Map` c++ object ([#1723](https://github.com/mapnik/mapnik/issues/1723))\n\n- Improved the scaled rendering of various map features when using `scale_factor` > 1 ([#1280](https://github.com/mapnik/mapnik/issues/1280),[#1100](https://github.com/mapnik/mapnik/issues/1100),[#1273](https://github.com/mapnik/mapnik/issues/1273),[#1792](https://github.com/mapnik/mapnik/issues/1792),[#1291](https://github.com/mapnik/mapnik/issues/1291),[#1344](https://github.com/mapnik/mapnik/issues/1344),[#1279](https://github.com/mapnik/mapnik/issues/1279),[#1624](https://github.com/mapnik/mapnik/issues/1624),[#1767](https://github.com/mapnik/mapnik/issues/1767),[#1766](https://github.com/mapnik/mapnik/issues/1766))\n\n- Added C++ api for overriding scale_denominator to enable rendering at fixed scale ([#1582](https://github.com/mapnik/mapnik/issues/1582))\n\n- Added Layer `buffer-size` that can be used to override Map `buffer-size` to avoid\n  over-fetching of data that does not need to be buffered as much as other layers.\n  Map level `buffer-size` will be default if layers do not set the option. Renamed a\n  previously undocumented parameter by the same name that impacted clipping extent and\n  was not needed (clipping padding should likely be a symbolizer level option) ([#1566](https://github.com/mapnik/mapnik/issues/1566))\n\n- Fixed potential file descriptor leaks in image readers when invalid images were encountered ([#1783](https://github.com/mapnik/mapnik/issues/1783))\n\n- Fixed alpha handling in the `blur` and `invert` image filters ([#1541](https://github.com/mapnik/mapnik/issues/1541))\n\n- Fixed error reporting in the python plugin ([#1422](https://github.com/mapnik/mapnik/issues/1422))\n\n- Added the ability to run tests without installing with `make test-local`\n\n- Reduced library binary size by adding support for `-fvisibility-inlines-hidden` and `-fvisibility=hidden` ([#1826](https://github.com/mapnik/mapnik/issues/1826),[#1832](https://github.com/mapnik/mapnik/issues/1832))\n\n- Added `mapnik::map_request` class, a special object to allow passing mutable map objects to renderer ([#1737](https://github.com/mapnik/mapnik/issues/1737))\n\n- Added the ability to use `boost::hash` on `mapnik::value` types ([#1729](https://github.com/mapnik/mapnik/issues/1729))\n\n- Removed obsolete `geos` plugin (functionality replaced by `csv` plugin) and unmaintained `kismet` plugin ([#1809](https://github.com/mapnik/mapnik/issues/1809),[#1833](https://github.com/mapnik/mapnik/issues/1833))\n\n- Added new `mapnik-config` flags: `--all-flags`, `--defines`, `--git-describe`, `--includes`, `--dep-includes`, `--cxxflags`, `--cxx` ([#1443](https://github.com/mapnik/mapnik/issues/1443))\n\n- Added support for unicode strings as arguments in python bindings ([#163](https://github.com/mapnik/mapnik/issues/163))\n\n- Added DebugSymbolizer which is able to render the otherwise invisible collision boxes ([#1366](https://github.com/mapnik/mapnik/issues/1366))\n\n- Optimized rendering by reducing overhead of using `gamma` property ([#1174](https://github.com/mapnik/mapnik/issues/1174))\n\n- Fixed rendering artifacts when using `polygon-gamma` or `line-gamma` equal to 0 ([#761](https://github.com/mapnik/mapnik/issues/761),[#1763](https://github.com/mapnik/mapnik/issues/1763))\n\n- Fixed and optimized the display of excessive precision of some float data in labels ([#430](https://github.com/mapnik/mapnik/issues/430),[#1697](https://github.com/mapnik/mapnik/issues/1697))\n\n- Removed the `bind` option for datasources ([#1654](https://github.com/mapnik/mapnik/issues/1654))\n\n- Added ability to access style list from map by (name,obj) in python ([#1725](https://github.com/mapnik/mapnik/issues/1725))\n\n- Added `is_solid` method to python mapnik.Image and mapnik.ImageView classes ([#1728](https://github.com/mapnik/mapnik/issues/1728))\n\n- Changed scale_denominator C++ interface to take scale as first argument rather than map.\n\n- Added support for `background-image` in cairo_renderer ([#1724](https://github.com/mapnik/mapnik/issues/1724))\n\n- Fixed building symbolizer rendering to be fully sensitive to alpha ([8b66128](https://github.com/mapnik/mapnik/commit/8b66128c892), [bc8ea1c](https://github.com/mapnik/mapnik/commit/bc8ea1c5a7a))\n\n- `<Filter>[attr]</Filter>` now returns false if attr is an empty string ([#1665](https://github.com/mapnik/mapnik/issues/1665))\n\n- `<Filter>[attr]!=null</Filter>` now returns true if attr is not null ([#1642](https://github.com/mapnik/mapnik/issues/1642))\n\n- Added support for DBF `Logical` type: [#1614](https://github.com/mapnik/mapnik/issues/1614)\n\n- Added serialization of `line-offset` to save_map ([#1562](https://github.com/mapnik/mapnik/issues/1562))\n\n- Enabled default input plugin directory and fonts path to be set inherited from environment settings in\n  python bindings to make it easier to run tests locally ([#1594](https://github.com/mapnik/mapnik/issues/1594)). New environment settings are:\n    - MAPNIK_INPUT_PLUGINS_DIRECTORY\n    - MAPNIK_FONT_DIRECTORY\n\n- Added support for controlling rendering behavior of markers on multi-geometries `marker-multi-policy` ([#1555](https://github.com/mapnik/mapnik/issues/1555),[#1573](https://github.com/mapnik/mapnik/issues/1573))\n\n- Added alternative PNG/ZLIB implementation (`miniz`) that can be enabled with `e=miniz` ([#1554](https://github.com/mapnik/mapnik/issues/1554))\n\n- Added support for setting zlib `Z_FIXED` strategy with format string: `png:z=fixed`\n\n- Fixed handling of transparency level option in `octree` png encoding ([#1556](https://github.com/mapnik/mapnik/issues/1556))\n\n- Added ability to pass a pre-created collision detector to the cairo renderer ([#1444](https://github.com/mapnik/mapnik/issues/1444))\n\n- Tolerance parameter is now supported for querying datasources at a given point ([#503](https://github.com/mapnik/mapnik/issues/503)/[#1499](https://github.com/mapnik/mapnik/issues/1499))\n\n- Improved detection of newlines in CSV files - now more robust in the face of mixed newline types ([#1497](https://github.com/mapnik/mapnik/issues/1497))\n\n- Allow style level compositing operations to work outside of featureset extents across tiled requests ([#1477](https://github.com/mapnik/mapnik/issues/1477))\n\n- Support for encoding `literal` postgres types as strings [69fb17c](https://github.com/mapnik/mapnik/commit/69fb17cd3)/[#1466](https://github.com/mapnik/mapnik/issues/1466)\n\n- Fixed zoom_all behavior when Map maximum-extent is provided. Previously maximum-extent was used outright but\n  now the combined layer extents will be again respected: they will be clipped to the maximum-extent if possible\n  and only when back-projecting fails for all layers will the maximum-extent be used as a fallback ([#1473](https://github.com/mapnik/mapnik/issues/1473))\n\n- Compile time flag called `PLUGIN_LINKING` to allow input datasource plugins to be statically linked with the mapnik library ([#249](https://github.com/mapnik/mapnik/issues/249))\n\n- Fixed `dasharray` rendering in cairo backend ([#1740](https://github.com/mapnik/mapnik/issues/1740))\n\n- Fixed handling of `opacity` in svg rendering ([#1744](https://github.com/mapnik/mapnik/issues/1744))\n\n- Fixed uneven rendering of markers along lines ([#1693](https://github.com/mapnik/mapnik/issues/1693))\n\n- Fixed handling of extra bytes in some shapefile fields ([#1605](https://github.com/mapnik/mapnik/issues/1605))\n\n- Fixed handling (finally) of null shapes and partially corrupt shapefiles ([#1630](https://github.com/mapnik/mapnik/issues/1630),[#1621](https://github.com/mapnik/mapnik/issues/1621))\n\n- Added ability to re-use `mapnik::image_32` and `mapnik::grid` by exposing a `clear` method ([#1571](https://github.com/mapnik/mapnik/issues/1571))\n\n- Added support for writing RGB (no A) png images by using the format string of `png:t=0` ([#1559](https://github.com/mapnik/mapnik/issues/1559))\n\n- Added experimental support for geometry simplification at symbolizer level ([#1385](https://github.com/mapnik/mapnik/issues/1385))\n\n## Mapnik 2.1.0\n\nReleased Aug 23, 2012\n\n(Packaged from [a25aac8](https://github.com/mapnik/mapnik/commit/a25aac8))\n\n- Feature-level compositing (comp-op) for all symbolizers (except building) in AGG and Cairo renderers ([#1409](https://github.com/mapnik/mapnik/issues/1409))\n\n- Style-level compositing (comp-op) ([#1409](https://github.com/mapnik/mapnik/issues/1409)) and style-level opacity for AGG renderer ([#314](https://github.com/mapnik/mapnik/issues/314))\n\n- New experimental framework for image manipulation called `image-filters` to allow things to be done across entire layer canvas like burring ([#1412](https://github.com/mapnik/mapnik/issues/1412))\n\n- Support for recoloring stroke, fill, and opacity of SVG files ([#1410](https://github.com/mapnik/mapnik/issues/1410) / [#659](https://github.com/mapnik/mapnik/issues/659))\n\n- Support for data-driven transform expressions ([#664](https://github.com/mapnik/mapnik/issues/664))\n\n- New support for offsetting geometries / parallel lines in line_symbolizer ([#927](https://github.com/mapnik/mapnik/issues/927)/[#1269](https://github.com/mapnik/mapnik/issues/1269))\n\n- New support for clipping geometries - now default enabled on all symbolizers ([#1116](https://github.com/mapnik/mapnik/issues/1116))\n\n- Framework for chainable geometry transformations (called `vertex_converters`) so that you can do things like clip, smooth, and offset at the same time ([#927](https://github.com/mapnik/mapnik/issues/927))\n\n- WKT parsing now is more robust and supports multi-geometries ([#745](https://github.com/mapnik/mapnik/issues/745))\n\n- New support for outputting WKT/WKB/GeoJSON/SVG from mapnik.Geometry objects ([#1411](https://github.com/mapnik/mapnik/issues/1411))\n\n- New experimental python datasource plugin ([#1337](https://github.com/mapnik/mapnik/issues/1337))\n\n- New experimental geojson datasource plugin using in-memory rtree indexing ([#1413](https://github.com/mapnik/mapnik/issues/1413))\n\n- Cairo rendering is now much more similiar to AGG rendering as cairo backend now supports `scale_factor` ([#1280](https://github.com/mapnik/mapnik/issues/1280)) and other fixed have landed ([#1343](https://github.com/mapnik/mapnik/issues/1343), [#1233](https://github.com/mapnik/mapnik/issues/1233), [#1344](https://github.com/mapnik/mapnik/issues/1344), [#1242](https://github.com/mapnik/mapnik/issues/1242), [#687](https://github.com/mapnik/mapnik/issues/687), [#737](https://github.com/mapnik/mapnik/issues/737), [#1006](https://github.com/mapnik/mapnik/issues/1006), [#1071](https://github.com/mapnik/mapnik/issues/1071))\n\n- mapnik::Feature objects and datasource plugins now use a `Context` to store attribute schemas to reduce the memory footprint of features ([#834](https://github.com/mapnik/mapnik/issues/834))\n\n- Added Stroke `miterlimit` ([#786](https://github.com/mapnik/mapnik/issues/786))\n\n- Python: exposed Map `background_image` (and aliased `background` to `background_color`)\n\n- Python: exposed BuildingSymbolizer\n\n- Support in the CSV plugin for reading JSON encoded geometries ([#1392](https://github.com/mapnik/mapnik/issues/1392))\n\n- Increased grid encoding performance ([#1315](https://github.com/mapnik/mapnik/issues/1315))\n\n- Added support for setting opacity dynamically on images in polygon pattern and markers symbolizers\n\n- Added support for filtering on a features geometry type, either `point`, `linestring`, `polygon`,\n  or `collection` using the expression keyword of `[mapnik::geometry_type]` ([#546](https://github.com/mapnik/mapnik/issues/546))\n\n- MarkersSymbolizer width and height moved to expressions ([#1102](https://github.com/mapnik/mapnik/issues/1102))\n\n- PostGIS: Added `simplify_geometries` option - will trigger ST_Simplify on geometries before returning to Mapnik ([#1179](https://github.com/mapnik/mapnik/issues/1179))\n\n- Improved error feedback for invalid values passed to map.query_point\n\n- Fixed rendering of thin svg lines ([#1129](https://github.com/mapnik/mapnik/issues/1129))\n\n- Improved logging/debugging system with release logs and file redirection (https://github.com/mapnik/mapnik/wiki/Runtime-Logging) ([#937](https://github.com/mapnik/mapnik/issues/937) and partially [#986](https://github.com/mapnik/mapnik/issues/986), [#467](https://github.com/mapnik/mapnik/issues/467))\n\n- GDAL: allow setting `nodata` value on the fly (will override value if `nodata` is set in data) ([#1161](https://github.com/mapnik/mapnik/issues/1161))\n\n- GDAL: respect `nodata` for paletted/colormapped images ([#1160](https://github.com/mapnik/mapnik/issues/1160))\n\n- PostGIS: Added a new option called `autodetect_key_field` (by default false) that if true will\n  trigger autodetection of the table primary key allowing for feature.id() to represent\n  globally unique ids. This option has no effect if the user has not manually supplied the `key_field` option. ([#804](https://github.com/mapnik/mapnik/issues/804))\n\n- Cairo: Add full rendering support for markers to match AGG renderer functionality ([#1071](https://github.com/mapnik/mapnik/issues/1071))\n\n- Fix Markers rendering so that ellipse height/width units are pixels (previously were unintentionally radii) ([#1134](https://github.com/mapnik/mapnik/issues/1134))\n\n- Added `ignore-placement` attribute to markers-symbolizer ([#1135](https://github.com/mapnik/mapnik/issues/1135))\n\n- Removed PointDatasource - use more robust MemoryDatasource instead ([#1032](https://github.com/mapnik/mapnik/issues/1032))\n\n- SQLite - Added support for !intersects! token in sql subselects ([#809](https://github.com/mapnik/mapnik/issues/809)) allow custom positioning of rtree spatial filter.\n\n- New CSV plugin - reads tabular files - autodetecting geo columns, newlines, and delimiters. Uses in-memory featureset for fast rendering and is not designed for large files ([#902](https://github.com/mapnik/mapnik/issues/902))\n\n- Fixed bug in shield line placement when dx/dy are used to shift the label relative to the placement point (Matt Amos) ([#908](https://github.com/mapnik/mapnik/issues/908))\n\n- Added <layer_by_sql> parameter in OGR plugin to select a layer by SQL query (besides name or index): see http://www.gdal.org/ogr/ogr_sql.html for specifications (kunitoki) ([#472](https://github.com/mapnik/mapnik/issues/472))\n\n- Added support for output maps as tiff files (addresses [#967](https://github.com/mapnik/mapnik/issues/967) partially)\n\n- Added support for justify-alignment=auto. This is the new default. ([#1125](https://github.com/mapnik/mapnik/issues/1125))\n\n- Added support for grouped rendering using the `group-by` layer option: https://github.com/mapnik/mapnik/wiki/Grouped-rendering\n\n\n## Mapnik 2.0.2\n\nReleased Aug 3, 2012\n\n(Packaged from [adb2ec7](https://github.com/mapnik/mapnik/commit/adb2ec741))\n\n- Fixed handling of empty WKB geometries ([#1334](https://github.com/mapnik/mapnik/issues/1334))\n\n- Fixed naming of `stroke-dashoffset` in save_map ([cc3cd5f](https://github.com/mapnik/mapnik/commit/cc3cd5f63f28))\n\n- Fixed support for boost 1.50 ([8dea5a5](https://github.com/mapnik/mapnik/commit/8dea5a5fe239233))\n\n- Fixed TextSymbolizer placement in Cairo backend so it respects avoid-edges and minimum-padding across all renderers ([#1242](https://github.com/mapnik/mapnik/issues/1242))\n\n- Fixed ShieldSymbolizer placement so it respects avoid-edges and minimum-padding across all renderers ([#1242](https://github.com/mapnik/mapnik/issues/1242))\n\n- Rolled back change made in 2.0.1 to marker width/height meaning that Mapnik > 2.0.2 will stick to assuming width/heigh are radii for back compatibility with 2.0.0. The reverted change is seen below as \"Fix Markers rendering so that ellipse height/width units are pixels (previously were unintentionally radii)\". Issue tracking this is [#1163](https://github.com/mapnik/mapnik/issues/1163)\n\n- XML: Fixed to avoid throwing if a `<Parameters>` element is encountered (which is supported in >= 2.1.x)\n\n- Support for PostGIS 2.0 in the pgsql2sqlite command ([e69c44e](https://github.com/mapnik/mapnik/commit/e69c44e), [47e5b3c](https://github.com/mapnik/mapnik/commit/47e5b3c))\n\n- Fixed reference counting of Py_None when returning null attributes from Postgres during UTFGrid encoding, which could cause a Fatal Python error: deallocating None ([#1221](https://github.com/mapnik/mapnik/issues/1221))\n\n- Fixed possible breakage registering plugins via python if a custom PREFIX or DESTDIR was used (e.g. macports/homebrew) ([#1171](https://github.com/mapnik/mapnik/issues/1171))\n\n- Fixed memory leak in the case of proj >= 4.8 and a projection initialization error ([#1173](https://github.com/mapnik/mapnik/issues/1173))\n\n\n## Mapnik 2.0.1\n\nReleased April 10, 2012\n\n(Packaged from [57347e9](https://github.com/mapnik/mapnik/commit/57347e9106))\n\n- Support for PostGIS 2.0 ([#956](https://github.com/mapnik/mapnik/issues/956),[#1083](https://github.com/mapnik/mapnik/issues/1083))\n\n- Switched back to \"libmapnik\" and \"import mapnik\" rather than \"mapnik2\" (mapnik2 will still work from python) ([#941](https://github.com/mapnik/mapnik/issues/941))\n\n- Restored Python 2.5 compatibility ([#904](https://github.com/mapnik/mapnik/issues/904))\n\n- Fixed `mapnik-config --version` ([#903](https://github.com/mapnik/mapnik/issues/903))\n\n- Cairo: Add full rendering support for markers to match AGG renderer functionality ([#1071](https://github.com/mapnik/mapnik/issues/1071))\n\n- Fix Markers rendering so that ellipse height/width units are pixels (previously were unintentially radii) ([#1134](https://github.com/mapnik/mapnik/issues/1134))\n\n- Added `ignore-placement` attribute to markers-symbolizer ([#1135](https://github.com/mapnik/mapnik/issues/1135))\n\n- Removed svn_revision info from mapnik-config and python bindings as git is now used\n\n- Removed OGCServer from core - now at https://github.com/mapnik/OGCServer ([e7f6267](https://github.com/mapnik/mapnik/commit/e7f6267))\n\n- Fixed SQLite open stability across platforms/versions ([#854](https://github.com/mapnik/mapnik/issues/854))\n\n- Workaround for boost interprocess compile error with recent gcc versions ([#950](https://github.com/mapnik/mapnik/issues/950),[#1001](https://github.com/mapnik/mapnik/issues/1001),[#1082](https://github.com/mapnik/mapnik/issues/1082))\n\n- Fix possible memory corruption when using `hextree` mode for png color reduction ([#1087](https://github.com/mapnik/mapnik/issues/1087))\n\n- Fixed bug in shield line placement when dx/dy are used to shift the label relative to the placement point (Matt Amos) ([#908](https://github.com/mapnik/mapnik/issues/908))\n\n- Fix to avoid modifying a feature if an attribute is requested that does not exist ([0f5ab18](https://github.com/mapnik/mapnik/commit/0f5ab18ed))\n\n- Fixed ability to save to jpeg format from python ([7387afd](https://github.com/mapnik/mapnik/commit/7387afd96)) ([#896](https://github.com/mapnik/mapnik/issues/896))\n\n\n## Mapnik 2.0.0\n\nReleased September 26, 2011\n\n(Packaged from [5b4c20e](https://github.com/mapnik/mapnik/commit/5b4c20eab3))\n\n- Add minimum-path-length property to text_symbolizer to allow labels to be placed only on lines of a certain length ([#865](https://github.com/mapnik/mapnik/issues/865))\n\n- Add support for png quantization using fixed palettes ([#843](https://github.com/mapnik/mapnik/issues/843))\n\n- Add AlsoFilter functionality - https://github.com/mapnik/mapnik/wiki/AlsoFilter\n\n- SQLite Plugin: optimize i/o using shared cache and no mutexes ([#797](https://github.com/mapnik/mapnik/issues/797))\n\n- Directly link input plugins to libmapnik to avoid having to set dlopen flags from binding languages ([#790](https://github.com/mapnik/mapnik/issues/790))\n\n- Throw an error during registration for fonts which Freetype2 does not report a family or style name (r2985).\n\n- Fixed quoting syntax for \"table\".\"attribute\" in PostGIS plugin (previously if table aliases were used quoting like \"table.attribute\" would cause query failure) (r2979).\n\n- Added the ability to control the PostGIS feature id by suppling a key_field to reference and integer attribute name (r2979).\n\n- Added alternative, more robust proj_transform functions to project a bbox using more points than just the four\n  corners to ensure an optimally sized bbox despite proj4 out of bounds conditions. (olt)\n\n- Added map.base parameter that can be set to control where files with relative paths should be interpreted\n  from when a map is loaded from a string or saved to a string. It defaults to an empty string which means\n  that the base path will be the current working directory of the mapnik process. When a stylesheet is read\n  from a file that files directory is used. And a custom value can still be passed as an argument to\n  load_map_from_string().\n\n- Added python function `render_grid` to allow conversion of grid buffer to python object containing list of grid\n  pixels, list of keys, and a and dictionary of feature attributes.\n\n- Added new rendering backend, grid_renderer, that collects the attributes of rendered features and\n  burns their ids into a grid buffer.\n\n- Added optional `maximum-extent` parameter to map object. If set will be used, instead of combined\n  layer extents, for return value of map.zoom_all(). Useful in cases where the combined layer extents\n  cannot possibly be projected into the map srs or the user wishes to control map bounds without\n  modifying the extents of each layer.\n\n- Support for `nodata` values with grey and rgb images in GDAL plugin ([#727](https://github.com/mapnik/mapnik/issues/727))\n\n- Print warning if invalid XML property names are used ([#110](https://github.com/mapnik/mapnik/issues/110))\n\n- Made XML property names use consistent dashes, never underscores ([#644](https://github.com/mapnik/mapnik/issues/644))\n\n- Added support for drawing only first matching rule using filter-mode=\"first\" in Style ([#706](https://github.com/mapnik/mapnik/issues/706))\n\n- Added support to PointSymbolizer (`ignore_placement`) for skipping adding placed points to collision detector ([#564](https://github.com/mapnik/mapnik/issues/564))\n\n- Added ability to register fonts within XML using Map level `font-directory` parameter ([#168](https://github.com/mapnik/mapnik/issues/168))\n\n- TextSymbolizer: Change text_convert to text_transform to better match css naming (r2211)\n\n- Shapefile Plugin: Throw error if attribute name is requested that does not exist ([#604](https://github.com/mapnik/mapnik/issues/604))\n\n- Upgraded to the latest proj4 string literal for EPSG:4326 (WGS84) as global default projection ([#333](https://github.com/mapnik/mapnik/issues/333))\n\n- Added `mapnik_version_from_string()` function in python bindings to easily convert string representation\n  of version number to the integer format used in `mapnik/version.hpp`. e.g. `0.7.1` --> `701`.\n\n- Added xinclude (http://www.w3.org/TR/xinclude/) support to libxml2-based xml parser (oldtopos) ([#567](https://github.com/mapnik/mapnik/issues/567))\n\n- Optimized rendering speeds by avoiding locking in the projection code (r2063) (r2713)\n\n- Added support for setting global alignment of polygon pattern fills ([#203](https://github.com/mapnik/mapnik/issues/203))\n\n- Added support for choosing OGR layer by index number using `layer_by_index` parameter (r1904)\n\n- Added support for fractional halo widths (using FT Stroker) ([#93](https://github.com/mapnik/mapnik/issues/93))\n\n- Added support for reading jpeg images (in addition to png/tiff) for image symbolizers ([#518](https://github.com/mapnik/mapnik/issues/518))\n\n- Made libjpeg dependency optional at compile time and added mapnik2.has_jpeg() method to check for support in python ([#545](https://github.com/mapnik/mapnik/issues/545)).\n\n- Fixed reading of PostGIS data on Big Endian systems ([#515](https://github.com/mapnik/mapnik/issues/515))\n\n- PostGIS: Added better support for alternative schemas ([#500](https://github.com/mapnik/mapnik/issues/500))\n\n- AGG Renderer - Enforced default gamma function on all symbolizers to ensure proper antialiasing\n  even when gamma is modified on the PolygonSymbolizer. ([#512](https://github.com/mapnik/mapnik/issues/512))\n\n- Added ability to read pre 2.0.0 stylesheets, but prints a warning for deprecated syntax (r1592, [#501](https://github.com/mapnik/mapnik/issues/501))\n\n- Rasterlite Plugin: Experimental support for Rasterlite, to practically use sqlite database with wavelet compressed rasters ([#469](https://github.com/mapnik/mapnik/issues/469))\n\n- PNG: fixed png256 for large images and some improvements to reduce color corruptions ([#522](https://github.com/mapnik/mapnik/issues/522))\n\n- Implement MarkersSymbolizer in Cairo render and improve the markers placement finder. ([#553](https://github.com/mapnik/mapnik/issues/553))\n\n\n# Mapnik 0.7.2\n\nReleased Oct 18, 2011\n\n(Packaged from [bc5cabe](https://github.com/mapnik/mapnik/commit/bc5cabeb6a))\n\n- Added forward compatibility for Mapnik 2.0 XML syntax (https://github.com/mapnik/mapnik/wiki/Mapnik2/Changes)\n\n- Build fixes to ensure boost_threads are not used unless THREADING=multi build option is used\n\n- Fixes for the clang compiler\n\n- Support for latest libpng (>= 1.5.x) (r2999)\n\n- Fixes to the postgres pool\n\n- Fix for correct transparency levels in png256/png8 output ([#540](https://github.com/mapnik/mapnik/issues/540))\n\n- Various build system fixes, especially for gcc compiler on open solaris.\n\n- When plugins are not found, report the searched directories ([#568](https://github.com/mapnik/mapnik/issues/568))\n\n- Improved font loading support ([#559](https://github.com/mapnik/mapnik/issues/559))\n\n- Fix to shapeindex for allowing indexing of directory of shapefiles like `shapeindex dir/*shp`\n\n- Fixed handling of null and multipatch shapes in shapefile driver - avoiding inf loop ([#573](https://github.com/mapnik/mapnik/issues/573))\n\n- Fixed raster alpha blending ([#589](https://github.com/mapnik/mapnik/issues/589),[#674](https://github.com/mapnik/mapnik/issues/674))\n\n- Enhanced support for faster reprojection if proj >= 4.8 is used ([#575](https://github.com/mapnik/mapnik/issues/575))\n\n- Allow for late-binding of datasources ([#622](https://github.com/mapnik/mapnik/issues/622))\n\n- Fix to OSM plugin to avoid over-caching of data ([#542](https://github.com/mapnik/mapnik/issues/542))\n\n- Various fixes to sqlite, ogr, and occi driver backported from trunk.\n\n- Ensured that `\\n` triggers linebreaks in text rendering ([#584](https://github.com/mapnik/mapnik/issues/584))\n\n- Support for boost filesystem v3\n\n- Fixes to cairo renderer to avoid missing images (r2526)\n\n- Fixed reading of label_position_tolerance on text_symbolizer and height for building_symbolizer\n\n\n# Mapnik 0.7.1\n\nReleased March 23, 2010\n\n(Packaged from [db89f1c](https://github.com/mapnik/mapnik/commit/db89f1ca75) / r1745)\n\n- Rasters: Various fixes and improvements to 8bit png output ([#522](https://github.com/mapnik/mapnik/issues/522),[#475](https://github.com/mapnik/mapnik/issues/475))\n\n- XML: Save map buffer_size when serializing map.\n\n- SCons: Added new build options `PRIORITIZE_LINKING` and `LINK_PRIORITY`. The first is a boolean (default True)\n  of whether to use the new sorting implementation that gives explcit preference to custom or local paths\n  during compile and linking that will affect builds when duplicate libraries and include directories are on the\n  system. LINK_PRIORITY defaults to prioritizing internal sources of the mapnik source folder, then local/user\n  installed libraries over system libraries, but the option can be customized. Sorting not only ensures that\n  compiling and linking will more likely match the desired libraries but also gives more likelyhood to avoid\n  the scenario where libraries are linked that don't match the includes libmapnik compiled against.\n\n- XML: Fixed behavior of PolygonPatternSymbolizer and LinePatternSymbolizer whereby width, height,\n  and type of images is actually allowed to be optionally ommitted ([#508](https://github.com/mapnik/mapnik/issues/508)). This was added in r1543 but\n  only worked correctly for PointSymbolizer and ShieldSymbolizer.\n\n- Fixed reading of PostGIS data on Big Endian systems ([#515](https://github.com/mapnik/mapnik/issues/515))\n\n- PostGIS: Added better support for alterative schemas ([#500](https://github.com/mapnik/mapnik/issues/500))\n\n- AGG Renderer - Enforced default gamma function on all symbolizers to ensure proper antialiasing\n  even when gamma is modified on the PolygonSymbolizer. ([#512](https://github.com/mapnik/mapnik/issues/512))\n\n- PNG: fixed png256 for large images and some improvements to reduce color corruptions ([#522](https://github.com/mapnik/mapnik/issues/522))\n\n- PNG: Added new quantization method for indexed png format using `hextree` with full support for alpha\n  channel. Also new method has some optimizations for color gradients common when using elevation based\n  rasters. By default old method using `octree` is used. (r1680, r1683, [#477](https://github.com/mapnik/mapnik/issues/477))\n\n- PNG: Added initial support for passing options to png writter like number of colors, transparency\n  support, quantization method and possibly other in future using type parameter. For example\n  \"png8:c=128:t=1:m=h\" limits palette to 128 colors, uses only binary transparency (0 - none,\n  1 - binary, 2 - full), and new method of quantization using `hextree` (h - `hextree`, o - `octree`).\n  Existing type \"png256\" can be also written using \"png8:c=256:m=o:t=2\"  (r1680, r1683, [#477](https://github.com/mapnik/mapnik/issues/477))\n\n\n# Mapnik 0.7.0\n\nReleased January, 19 2010\n\n(Packaged from [a0da946](https://github.com/mapnik/mapnik/commit/a0da946be9) / r1574)\n\n- Core: Fixed linking to external libagg (r1297,r1299)\n\n- Core: Completed full support for PPC (Big endian) architectures (r1352 -> r1357)\n\n- Gdal Plugin: Added support for Gdal overviews, enabling fast loading of > 1GB rasters ([#54](https://github.com/mapnik/mapnik/issues/54))\n\n    * Use the gdaladdo utility to add overviews to existing GDAL datasets\n\n- PostGIS: Added an optional `geometry_table` parameter. The `geometry_table` used by Mapnik to look up\n  metadata in the geometry_columns and calculate extents (when the `geometry_field` and `srid` parameters\n  are not supplied). If `geometry_table` is not specified Mapnik will attempt to determine the name of the\n  table to query based on parsing the `table` parameter, which may fail for complex queries with more than\n  one `from` keyword. Using this parameter should allow for existing metadata and table indexes to be used\n  while opening the door to much more complicated subqueries being passed to the `table` parameter without\n  failing ([#260](https://github.com/mapnik/mapnik/issues/260), [#426](https://github.com/mapnik/mapnik/issues/426)).\n\n- PostGIS Plugin: Added optional `geometry_field` and `srid` parameters. If specified these will allow\n  Mapnik to skip several queries to try to determine these values dynamically, and can be helpful to avoid\n  possible query failures during metadata lookup with complex subqueries as discussed in [#260](https://github.com/mapnik/mapnik/issues/260) and [#436](https://github.com/mapnik/mapnik/issues/436), but\n  also solvable by specifying the `geometry_table` parameter. (r1300,[#376](https://github.com/mapnik/mapnik/issues/376))\n\n- PostGIS: Added an optional `extent_from_subquery` parameter that when true (while the `extent` parameter is\n  not provided and `estimate_extent` is false) will direct Mapnik to calculate the extent upon the exact table\n  or sql provided in the `table` parameter. If a sub-select is used for the table parameter then this will,\n  in cases where the subquery limits results, provide a faster and more accurate layer extent. It will have\n  no effect if the `table` parameter is simply an existing table. This parameter is false by default. ([#456](https://github.com/mapnik/mapnik/issues/456))\n\n- PostGIS Plugin: Added `!bbox!` token substitution ability in sql query string. This opens the door for various\n  complex queries that may aggregate geometries to be kept fast by allowing proper placement of the bbox\n  query to be used by indexes. ([#415](https://github.com/mapnik/mapnik/issues/415))\n\n    * Pass the bbox token inside a subquery like: !bbox!\n\n    * Valid Usages include:\n      ```sql\n        <Parameter name=\"table\">\n          (Select ST_Union(geom) as geom from table where ST_Intersects(geometry,!bbox!)) as map\n        </Parameter>\n\n        <Parameter name=\"table\">\n          (Select * from table where geom && !bbox!) as map\n        </Parameter>\n      ```\n\n- PostGIS Plugin: Added `scale_denominator` substitution ability in sql query string ([#415](https://github.com/mapnik/mapnik/issues/415)/[#465](https://github.com/mapnik/mapnik/issues/465))\n\n    * Pass the scale_denominator token inside a subquery like: !scale_denominator!\n\n    * e.g. (Select * from table where field_value > !scale_denominator!) as map\n\n- PostGIS Plugin: Added support for quoted table names (r1454) ([#393](https://github.com/mapnik/mapnik/issues/393))\n\n- PostGIS: Add a `persist_connection` option (default true), that when false will release\n  the idle psql connection after datasource goes out of scope (r1337) ([#433](https://github.com/mapnik/mapnik/issues/433),[#434](https://github.com/mapnik/mapnik/issues/434))\n\n- PostGIS: Added support for BigInt (int8) postgres type (384)\n\n- PostGIS Plugin: Throw and report errors if SQL execution fails (r1291) ([#363](https://github.com/mapnik/mapnik/issues/363), [#242](https://github.com/mapnik/mapnik/issues/242))\n\n- PostGIS Plugin: Fixed problem in conversion of long numbers to strings (r1302,1303)\n\n- PostGIS Plugin: Added missing support for BigInt(int8) postgres datatypes (r1250) ([#384](https://github.com/mapnik/mapnik/issues/384))\n\n- OGR Plugin: Added support for reading multipoint features ([#458](https://github.com/mapnik/mapnik/issues/458))\n\n- Shape Plugin: Fixed bug in file extension stripping ([#413](https://github.com/mapnik/mapnik/issues/413))\n\n- Shape Plugin: Fixed missing compiler flags that causes crashing on newer g++ versions ([#436](https://github.com/mapnik/mapnik/issues/436))\n\n- PNG: Fixed problem with garbled/striped png256 output along sharp edges([#416](https://github.com/mapnik/mapnik/issues/416),[#445](https://github.com/mapnik/mapnik/issues/445),[#447](https://github.com/mapnik/mapnik/issues/447),[#202](https://github.com/mapnik/mapnik/issues/202))\n\n- PNG: Added support for semi-transparency in png256 output ([#477](https://github.com/mapnik/mapnik/issues/477),[#202](https://github.com/mapnik/mapnik/issues/202))\n\n- PolygonSymbolizer: Added `gamma` attribute to allow for dilation of polygon edges - a solution\n  to gap artifacts or \"ghost lines\" between adjacent polygons and allows for slight sharpening of\n  the edges of non overlapping polygons. Accepts any values but 0-1 is the recommended range.\n\n- TextSymbolizer: Large set of new attributes: `text_transform`, `line_spacing`, `character_spacing`,\n  `wrap_character`, `wrap_before`, `horizontal_alignment`, `justify_alignment`, and `opacity`.\n\n    * More details at changesets: r1254 and r1341\n\n- SheildSymbolizer: Added special new attributes: `unlock_image`, `VERTEX` placement, `no_text` and many\n  attributes previously only supported in the TextSymbolizer: `allow_overlap`, `vertical_alignment`,\n  `horizontal_alignment`, `justify_alignment`, `wrap_width`, `wrap_character`, `wrap_before`, `text_transform`,\n  `line_spacing`, `character_spacing`, and `opacity`.\n\n    * More details at changeset r1341\n\n- XML: Added support for using CDATA with libxml2 parser (r1364)\n\n- XML: Fixed memory leak in libxml2 implementation ([#473](https://github.com/mapnik/mapnik/issues/473))\n\n- XML: Added function to serialize map to string, called `mapnik.save_map_to_string()` ([#396](https://github.com/mapnik/mapnik/issues/396))\n\n- XML: Added parameter to <Map> called `minimum_version` to allow for enforcing the minimum Mapnik version\n  needed for XML features used in the mapfiles. Uses Major.Minor.Point syntax, for example\n  <Map minimum_version=\"0.6.1\"> would throw an error if the user is running Mapnik less than 0.6.1.\n\n- XML: Added support for relative paths when using entities and `mapnik.load_map_from_string()` ([#440](https://github.com/mapnik/mapnik/issues/440))\n\n- XML: Made width and height optional for symbolizers using images (r1543)\n\n- XML: Ensured that default values for layers are not serialized in save_map() (r1366)\n\n- XML: Added missing serialization of PointSymbolizer `opacity` and `allow_overlap` attributes (r1358)\n\n- XML: Default text vertical_alignment now dependent on dy ([#485](https://github.com/mapnik/mapnik/issues/485), r1527)\n\n- Python: Exposed ability to write to Cairo formats using `mapnik.render_to_file()` and without pycairo ([#381](https://github.com/mapnik/mapnik/issues/381))\n\n- Python: Fixed potential crash if pycairo support is enabled but python-cairo module is missing ([#392](https://github.com/mapnik/mapnik/issues/392))\n\n- Python: Added `mapnik.has_pycairo()` function to test for pycairo support (r1278) ([#284](https://github.com/mapnik/mapnik/issues/284))\n\n- Python: Added `mapnik.register_plugins()` and `mapnik.register_fonts()` functions (r1256)\n\n- Python: Pickling support for point_symbolizer (r1295) ([#345](https://github.com/mapnik/mapnik/issues/345))\n\n- Python: Ensured mapnik::config_errors now throw RuntimeError exception instead of UserWarning exception ([#442](https://github.com/mapnik/mapnik/issues/442))\n\n- Filters: Added support for `!=` as an alias to `<>` for not-equals filters (avoids &lt;&gt;) (r1326) ([#427](https://github.com/mapnik/mapnik/issues/427))\n\n- SCons: Improved boost auto-detection (r1255,r1279)\n\n- SCons: Fixed support for JOBS=N and FAST=True to enable faster compiling (r1440)\n\n- SCons: Ensured that -h or --help will properly print help on custom Mapnik options before a user\n  has been able to properly run `configure`. (r1514)\n\n- SCons: Added ability to link to custom icu library name using ICU_LIB_NAME (r1414)\n\n- SCons: Improved reliability of python linking on OSX ([#380](https://github.com/mapnik/mapnik/issues/380))\n\n- Fonts: Added unifont to auto-installed fonts, which is used by the OSM styles as a fallback font (r1328)\n\n\n# Mapnik 0.6.1\n\nReleased July 14, 2009\n\n(Packaged from [353ff57](https://github.com/mapnik/mapnik/commit/353ff576c7) / r1247)\n\n- Plugins: expose list of registered plugins as a `plugin_names()` method of DatasourceCache (r1180)\n\n- XML: Fixed serialization and parsing bugs related to handling of integers and Enums ([#328](https://github.com/mapnik/mapnik/issues/328),[#353](https://github.com/mapnik/mapnik/issues/353))\n\n- SCons: Added the ability to set the PKG_CONFIG_PATH env setting ([#217](https://github.com/mapnik/mapnik/issues/217))\n\n- SCons: Improved linking to only required libraries for libmapnik ([#371](https://github.com/mapnik/mapnik/issues/371))\n\n- Shape Plugin: Added compile time flag to allow disabling the use of memory mapped files (r1213) ([#342](https://github.com/mapnik/mapnik/issues/342))\n\n- Core: Improved support for PPC (Big endian) architectures (r1198 -> r1213)\n\n- Scons: Improved auto-detection of boost libs/headers (r1200) ([#297](https://github.com/mapnik/mapnik/issues/297))\n\n- Plugins: Exposed list of available/registered plugins (r1180) ([#246](https://github.com/mapnik/mapnik/issues/246))\n\n- SCons: Improve build support for SunCC (patches from River Tarnell) (r1168, r1169)\n\n- Python: Pickling support for text_symbolizer (r1164) ([#345](https://github.com/mapnik/mapnik/issues/345))\n\n- Python: Pickling support for proj_transform and view/coord_transform (r1163) ([#345](https://github.com/mapnik/mapnik/issues/345))\n\n- Python: Pickling support for parameters (r1162) ([#345](https://github.com/mapnik/mapnik/issues/345))\n\n- Python: Pickling support for stroke objects (r1161) ([#345](https://github.com/mapnik/mapnik/issues/345))\n\n- Python: Pickling support for line_symbolizer (r1160) ([#345](https://github.com/mapnik/mapnik/issues/345))\n\n- Python: Pickling support for projection objects (r1159) ([#345](https://github.com/mapnik/mapnik/issues/345))\n\n- Python: Pickling support for shield_symbolizer (r1158) ([#345](https://github.com/mapnik/mapnik/issues/345))\n\n- Python: Pickling support for polygon_symbolizer (r1157) ([#345](https://github.com/mapnik/mapnik/issues/345))\n\n- Python: Pickling support for query objects (r1156) ([#345](https://github.com/mapnik/mapnik/issues/345))\n\n- Python: Pickling support for pattern symbolizers (r1155) ([#345](https://github.com/mapnik/mapnik/issues/345))\n\n- Python: Pickling support for raster_symbolizer (r1154) ([#345](https://github.com/mapnik/mapnik/issues/345))\n\n- Python: Added `mapnik.has_cairo()` function to test for cairo support (r1152) ([#284](https://github.com/mapnik/mapnik/issues/284))\n\n- Python: Exposed dash_array get method (r1151) ([#317](https://github.com/mapnik/mapnik/issues/317))\n\n- Python: Pickling support for Coord objects ([#345](https://github.com/mapnik/mapnik/issues/345))\n\n- GDAL Plugin: Added an experimental option to open files in `shared mode` (r1143)\n\n- Python: Exposed RasterSymbolizer options in Python (r1139)\n\n- Plugins: Fixed support for non-file based sources in GDAL and OGR plugins ([#336](https://github.com/mapnik/mapnik/issues/336),[#337](https://github.com/mapnik/mapnik/issues/337))\n\n- Plugins: Formal inclusion of new plugin for Kismet server (r1127) ([#293](https://github.com/mapnik/mapnik/issues/293))\n\n- Python: Made access to features and featuresets more Pythonic (r1121) ([#171](https://github.com/mapnik/mapnik/issues/171),[#280](https://github.com/mapnik/mapnik/issues/280),[#283](https://github.com/mapnik/mapnik/issues/283))\n\n- XML: Ensured relative paths in XML are interpreted relative to XML file location (r1124) ([#326](https://github.com/mapnik/mapnik/issues/326))\n\n- XML: Added ability to serialize all default symbolizer values by passing third argument to save_map(m,`file.xml`,True)(r1117) ([#327](https://github.com/mapnik/mapnik/issues/327))\n\n- Core: Added support for alpha transparency when writing to png256 (patch from Marcin Rudowski) ([#202](https://github.com/mapnik/mapnik/issues/202))\n\n- SCons: Ensured ABI compatibility information is embedded in libmapnik.dylib on Mac OS X ([#322](https://github.com/mapnik/mapnik/issues/322))\n\n- SCons: Ensured that the full `install_name` path would be added to libmapnik.dylib on Mac OS X ([#374](https://github.com/mapnik/mapnik/issues/374))\n\n- Tests: Added testing framework in Python using nose (r1101-r1105)\n\n- Raster Plugin: Added a tile/bbox-based read policy for large (rasters width * height > 1024 * 1024 will be loaded in chunks) (r1089)\n\n- OGCServer: Made lxml dependency optional (r1085) ([#303](https://github.com/mapnik/mapnik/issues/303))\n\n- Rasters: Handle rounding to allow better alignment of raster layers (r1079) ([#295](https://github.com/mapnik/mapnik/issues/295))\n\n- AGG Renderer: Added option to control output JPEG quality (r1078) ([#198](https://github.com/mapnik/mapnik/issues/198))\n\n- Plugins: Fixed segfault in OGR Plugin with empty geometries (r1074) ([#292](https://github.com/mapnik/mapnik/issues/292))\n\n\n# Mapnik 0.6.0\n\nReleased April 1, 2009\n\n(Packaged from [c88e034](https://github.com/mapnik/mapnik/commit/c88e03436f) / r1066)\n\n- Python: Added support for aspect_fix_mode (r1013)\n\n- OGCServer Fixed axis-ordering for WMS 1.3.0 request (r1051) ([#241](https://github.com/mapnik/mapnik/issues/241))\n\n- Plugins: Added option to all plugins to support using a `base` path argument (r1042)\n\n- Symbolizers: RasterSymbolizer now support composing modes for hillshading (r1027)\n\n- SCons: Added options to build the rundemo and pgsql2sqlite tools (r989)\n\n- OGCServer: Added content-length output (r986)\n\n- SCons: Replaced LIBS/INCLUDES options for postgres and gdal with pg_config and gdal-config (r977)\n\n- SCons: Created an optional configure stage (r973)\n\n- Python: Added further pickling/copy support to Map, Layers, Datasources, Styles,and Rules (r907,r913,r921)\n\n- Plugins: Added Sqlite driver for reading sqlite databases (r881)\n\n- Python: Exposed a number of properties for the Text Symbolizer (r869)\n\n- Plugins: PostGIS plugin now accepts multi-line queries (r862)\n\n- Filter parsing: Allow numbers in the filter field name.\n  This allows for shapefiles with columns like `1970`.\n\n- Plugins: Added OGR driver for reading all OGR supported formats (kunitoki) (r836) ([#170](https://github.com/mapnik/mapnik/issues/170))\n\n- XML: Added serialization of Fontsets (r807)\n\n- XML: Added support for reading xml from a string (r806)\n\n- C++: renamed mapnik::Color to mapnik::color (r796)\n\n- Python: Made available the scale_denominator property from the map in c++ and python (r794)\n\n- Python: Added ability to resize map and clear all layers and styles from python (r793)\n\n- Python: Exposed Proj to/from transformation for projected coordinate systems (r792,r822) ([#117](https://github.com/mapnik/mapnik/issues/117))\n\n- Memory Datasource: Added support for dynamically adding Points to map using Point Datasource (r790)\n\n- XML: Added xml serialization for abstract, title, minzoom, maxzoom, and queryable attributes (r787)\n\n- Core: Transformation is now skipped if srs values match exactly (r777)\n\n- Symbolizers: `min_distance` now honored for POINT placement using Text Symbolizer (r771)\n\n- Plugins: PostGIS plugin now accepts a geometry_field,record_limit, cursor_size options (r769,r872)\n\n- Python: Added ability to transform as a method on Coord and Envelope objects (r764)\n\n- Python: Added docstrings to the Layer object (r763)\n\n- Plugins: Loosened the type checking in Shapefile Plugin dbf reader (r762)\n\n- Fonts: Added support for Right-to-left Hebrew text (r749)\n\n- Core: Added a Map buffer parameter - helps to avoid cut labels at tile edges (r744)\n\n- Symbolizers: Added opacity support to Point Symbolizer (r743)\n\n- Symbolizers: Added support of using Points with Shield Symbolizer (r741)\n\n- Plugins: PostGIS plugin now accepts alternate schemas (r773)\n\n- Core: Added a Map aspect_fix_mode to ensure proper syncing of map dimensions and bbox (r705)\n\n- Fonts: Added support for fallback fonts (r704)\n\n- Cairo: Cairo support exposed in Python (r666)\n\n- Plugins: Added OSM plugin for reading directly from OSM data (r663)\n\n- Filters: Added support for boolean expressions (r660)\n\n- Python: Added ability to open Image32 files (r652)\n\n- Cairo: Cairo rendering support added (r656)\n\n- Core: Added unicode support based on ICU (r650)\n\n- Core: Added support for single and multi threaded variants of Mapnik (r632,r634)\n\n- Plugins: Use memory mapped files for reading shape file (r628)\n\n- Core: Use streams to write images (i/o re-factor) (r628) ([#15](https://github.com/mapnik/mapnik/issues/15))\n\n# Mapnik 0.5.1\n\nReleased April 15, 2008\n\n(Packaged from [c29cb73](https://github.com/mapnik/mapnik/commit/c29cb7386d))\n\n# Mapnik 0.5.0\n\nReleased April 15, 2008\n\n(Packaged from [0464a35](https://github.com/mapnik/mapnik/commit/0464a3563c))\n\n# Mapnik 0.4.0\n\nReleased February 26, 2007\n\n(Packaged from [8d73e3a](https://github.com/mapnik/mapnik/commit/8d73e3a8dc))\n\n# Mapnik 0.3.0\n\nReleased May 22, 2006\n\n(Packaged from [3ae046e](https://github.com/mapnik/mapnik/commit/3ae046ebe2))\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.89453125,
          "content": "# This CITATION.cff file was generated with cffinit.\n# Visit https://bit.ly/cffinit to generate yours today!\n\ncff-version: 1.2.0\ntitle: mapnik\nmessage: >-\n  If you use this software, please cite it using the\n  metadata from this file.\ntype: software\nauthors:\n  - given-names: Artem\n    family-names: Pavlenko\nidentifiers:\n  - type: url\n    value: 'https://github.com/mapnik/mapnik'\n    description: GitHub Repository\n  - type: swh\n    value: >-\n      swh:1:dir:3f5758e17e9d54016ca694268da68cf6856fab58\n    description: Software Archive\nrepository-code: 'https://github.com/mapnik/mapnik'\nurl: 'https://mapnik.org/'\nabstract: >-\n  Mapnik is an open source toolkit for developing\n  mapping applications. At the core is a C++ shared\n  library providing algorithms and patterns for\n  spatial data access and visualization.\nkeywords:\n  - mapping\n  - gis\n  - cartography\n  - beautiful-maps\n  - rendering\nlicense: LGPL-2.1\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 18.8623046875,
          "content": "cmake_minimum_required(VERSION 3.15)\n# 3.15 is required since the Boost::XXXX targets was first added. https://cmake.org/cmake/help/latest/module/FindBoost.html#imported-targets\n# 3.14 is required since SQLite3 Module was first added. https://cmake.org/cmake/help/latest/module/FindSQLite3.html#findsqlite3\n\ninclude(cmake/GetVersion.cmake)\nget_mapnik_version()\n\nproject(mapnik\n    VERSION ${MAPNIK_MAJOR_VERSION}.${MAPNIK_MINOR_VERSION}.${MAPNIK_PATCH_VERSION}\n    HOMEPAGE_URL \"https://mapnik.org/\"\n    DESCRIPTION \"Mapnik is an open source toolkit for developing mapping applications\"\n    LANGUAGES CXX\n)\nmessage(STATUS \"mapnik version: ${PROJECT_VERSION}\")\n\n# https://cliutils.gitlab.io/modern-cmake/chapters/features/ides.html\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\nset(CMAKE_FIND_PACKAGE_TARGETS_GLOBAL ON) # with newer cmake versions put all find_package in global scope\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\ninclude(FeatureSummary)\ninclude(MapnikOption)\ninclude(MapnikMinimumVersions)\ninclude(MapnikFindPackage)\ninclude(MapnikInstall)\n\ninclude(CTest)\nadd_feature_info(BUILD_TESTING BUILD_TESTING \"Adds tests\")\n\nmapnik_option(INSTALL_DEPENDENCIES \"if ON, all dependencies (eg. required dlls) will be copied into CMAKE_INSTALL_PREFIX/MAPNIK_BIN_DIR.\" ON)\nmapnik_option(BUILD_SHARED_LIBS \"build mapnik dynamic(ON) or static(OFF)\" ON)\nmapnik_option(BUILD_SHARED_PLUGINS \"build dynamic plugins\" ${BUILD_SHARED_LIBS}) # use BUILD_SHARED_LIBS as default option\nmapnik_option(BUILD_SHARED_CRT \"(only windows with msvc) use msvc shared crt\" ON)\nif(WIN32 AND BUILD_SHARED_PLUGINS AND NOT BUILD_SHARED_LIBS)\n    message(FATAL_ERROR \"static libmapnik and dynamic plugins won't work correctly\")\nendif()\n\nmapnik_option(USE_EXTERNAL_MAPBOX_GEOMETRY \"Use a external mapnik/geometry.hpp. If off, use the submodule\" OFF)\nmapnik_option(USE_EXTERNAL_MAPBOX_POLYLABEL \"Use a external mapnik/polylabel. If off, use the submodule\" OFF)\nmapnik_option(USE_EXTERNAL_MAPBOX_PROTOZERO \"Use a external mapnik/protozero. If off, use the submodule\" OFF)\nmapnik_option(USE_EXTERNAL_MAPBOX_VARIANT \"Use a external mapnik/variant. If off, use the submodule\" OFF)\nmapnik_option(USE_JPEG \"adds jpeg support\" ON)\nmapnik_option(USE_PNG \"adds png support\" ON)\nmapnik_option(USE_TIFF \"adds tiff support\" ON)\nmapnik_option(USE_WEBP \"adds webp support\" ON)\nmapnik_option(USE_LIBXML2 \"adds libxml2 support\" ON)\nmapnik_option(USE_CAIRO \"adds the cairo renderer\" ON)\nmapnik_option(USE_PROJ \"adds proj support\" ON)\nmapnik_option(USE_GRID_RENDERER \"adds grid renderer\" ON)\nmapnik_option(USE_SVG_RENDERER \"adds svg renderer\" ON)\nmapnik_option(USE_BIGINT \"uses 64 bit instead of 32\" ON)\nmapnik_option(USE_BOOST_FILESYSTEM \"use boost::filesytem even if `std::filesystem` is available (since c++17)\" OFF)\nmapnik_option(USE_MEMORY_MAPPED_FILE \"uses file cache\" ON)\nmapnik_option(USE_MULTITHREADED \"enables the multithreaded features (threadsafe)\" ON)\nmapnik_option(USE_NO_ATEXIT \"disable atexit\" OFF)\nmapnik_option(USE_NO_DLCLOSE \"disable dlclose\" OFF)\nmapnik_option(USE_DEBUG_OUTPUT \"enables some debug messages for development\" OFF)\nmapnik_option(USE_LOG \"enables logging output. See log severity level.\" OFF)\n# 0 = debug\n# 1 = warn\n# 2 = error\n# 3 = none\nset(USE_LOG_SEVERITY \"1\" CACHE STRING \"sets the logging severity (only applies when USE_LOG is ON\")\nmapnik_option(USE_STATS \"Enable statistics reporting\" OFF)\n\nmapnik_option(DISABLE_MAPNIK_AUTOSETUP \"disables the autosetup. Need to call mapnik::setup() then\" OFF)\n\nmapnik_option(USE_PLUGIN_INPUT_CSV \"adds plugin input csv\" ON)\nmapnik_option(USE_PLUGIN_INPUT_GDAL \"adds plugin input gdal\" ON)\nmapnik_option(USE_PLUGIN_INPUT_GEOBUF \"adds plugin input geobuf\" ON)\nmapnik_option(USE_PLUGIN_INPUT_GEOJSON \"adds plugin input geojson\" ON)\nmapnik_option(USE_PLUGIN_INPUT_OGR \"adds plugin input ogr\" ON)\nmapnik_option(USE_PLUGIN_INPUT_PGRASTER \"adds plugin input pgraster\" ON)\nmapnik_option(USE_PLUGIN_INPUT_POSTGIS \"adds plugin input postgis\" ON)\nmapnik_option(USE_PLUGIN_INPUT_RASTER \"adds plugin input raster\" ON)\nmapnik_option(USE_PLUGIN_INPUT_SHAPE \"adds plugin input shape\" ON)\nmapnik_option(USE_PLUGIN_INPUT_SQLITE \"adds plugin input sqlite\" ON)\nmapnik_option(USE_PLUGIN_INPUT_TOPOJSON \"adds plugin input topojson\" ON)\n\nmapnik_option(BUILD_DEMO_VIEWER \"builds the demo viewer\" ON)\nmapnik_option(BUILD_DEMO_CPP \"builds the demo c++ application\" ON)\n\nmapnik_option(BUILD_BENCHMARK \"builds benchmark project\" ON)\n\nmapnik_option(BUILD_UTILITY_GEOMETRY_TO_WKB \"builds the utility program geometry_to_wkb\" ON)\nmapnik_option(BUILD_UTILITY_MAPNIK_INDEX \"builds the utility program mapnik_index\" ON)\nmapnik_option(BUILD_UTILITY_MAPNIK_RENDER \"builds the utility program mapnik_render\" ON)\nmapnik_option(BUILD_UTILITY_OGRINDEX \"builds the utility program ogrindex\" OFF)\nmapnik_option(BUILD_UTILITY_PGSQL2SQLITE \"builds the utility program pgsql2sqlite\" ON)\nmapnik_option(BUILD_UTILITY_SHAPEINDEX \"builds the utility program shapeindex\" ON)\nmapnik_option(BUILD_UTILITY_SVG2PNG \"builds the utility program svg2png\" ON)\n\nmapnik_option(USE_BOOST_REGEX_ICU_WORKAROUND \"if you don't use your system libraries and get double linked icu libraries set this to ON\" OFF)\nmapnik_option(USE_GLIBC_WORKAROUND \"see https://github.com/mapnik/mapnik/pull/3792 if you building with libstdc++-4.9\" OFF)\n\nfeature_summary(WHAT ENABLED_FEATURES DISABLED_FEATURES)\nfeature_summary(FILENAME \"${CMAKE_CURRENT_BINARY_DIR}/features.log\" WHAT ENABLED_FEATURES DISABLED_FEATURES)\n\ninclude(GNUInstallDirs)\n# See for more details: https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html\nset(MAPNIK_BIN_DIR ${CMAKE_INSTALL_BINDIR} CACHE STRING \"Install directory for binaries\")\nset(MAPNIK_LIB_DIR ${CMAKE_INSTALL_LIBDIR} CACHE STRING \"Install directory for libraries\")\nset(MAPNIK_ARCHIVE_DIR ${CMAKE_INSTALL_LIBDIR} CACHE STRING \"Install directory for archives\")\nset(MAPNIK_INCLUDE_DIR ${CMAKE_INSTALL_INCLUDEDIR} CACHE STRING \"Install directory for the headers\")\nset(MAPNIK_CMAKE_DIR ${MAPNIK_LIB_DIR}/cmake/mapnik CACHE STRING \"Install directory of the cmake targets\")\nset(MAPNIK_PKGCONF_DIR ${MAPNIK_LIB_DIR}/pkgconfig CACHE STRING \"Install directory for the .pc files for pkg-config\")\nset(MAPNIK_OUTPUT_DIR \"${CMAKE_BINARY_DIR}/out\")\nif(WIN32)\n    set(DEFAULT_PLUGINS_INSTALL_DIR ${MAPNIK_BIN_DIR}/mapnik/input)\nelse()\n    set(DEFAULT_PLUGINS_INSTALL_DIR ${MAPNIK_LIB_DIR}/mapnik/input)\nendif()\nset(PLUGINS_INSTALL_DIR ${DEFAULT_PLUGINS_INSTALL_DIR} CACHE STRING \"installs the plugins in the specified directory\")\nmessage(STATUS \"Installing plugins to ${PLUGINS_INSTALL_DIR}\")\n\nset(FONTS_INSTALL_DIR ${MAPNIK_LIB_DIR}/mapnik/fonts CACHE STRING \"installs the fonts in the specified directory\")\nmessage(STATUS \"Installing fonts to ${FONTS_INSTALL_DIR}\")\n\nset(MAPNIK_COMPILE_DEFS \"\")\nset(MAPNIK_OPTIONAL_LIBS \"\")\nset(MAPNIK_OPTIONAL_LIBS_INCLUDE \"\")\n\n#############################\n#############################\n# Begin project configuration\n#############################\n#############################\n\nset(CMAKE_CXX_STANDARD 17 CACHE STRING \"Sets the c++ standard. c++17 is minimum.\")\nset(CMAKE_CXX_STANDARD_REQUIRED ON) # require the specified CMAKE_CXX_STANDARD\nset(CMAKE_CXX_EXTENSIONS OFF CACHE STRING \"Enables the compiler specific extensions.\") # Fallsback to -std=c++<ver> if off\nmessage(STATUS \"Using c++${CMAKE_CXX_STANDARD}\")\nmessage(STATUS \"Using c++ extensions: ${CXX_EXTENSIONS}\")\n\n# add debug postfix to the libraries\nset(CMAKE_DEBUG_POSTFIX \"d\" CACHE STRING \"sets the debug library postfix on mapnik, wkt and json\")\nmessage(STATUS \"postfix for debug libraries: ${CMAKE_DEBUG_POSTFIX}\")\n\nset(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>$<$<BOOL:${BUILD_SHARED_CRT}>:DLL>\")\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${MAPNIK_OUTPUT_DIR}\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${MAPNIK_OUTPUT_DIR}\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${MAPNIK_OUTPUT_DIR}/lib\")\n\n# needs to be before the first call of find_boost.\nif(CMAKE_CXX_STANDARD VERSION_LESS 17)\n    list(APPEND MAPNIK_COMPILE_DEFS BOOST_SPIRIT_X3_HIDE_CXX17_WARNING)\nendif()\n\nif(USE_MULTITHREADED)\n    set(Boost_USE_MULTITHREADED ON)\n    list(APPEND MAPNIK_COMPILE_DEFS MAPNIK_THREADSAFE)\nelse()\n    set(Boost_USE_MULTITHREADED OFF)\nendif()\n\n\nmapnik_find_package(PkgConfig REQUIRED)\nmapnik_find_threads()\nmapnik_find_package(ICU REQUIRED COMPONENTS uc i18n data)\n\nmapnik_find_package(Boost ${BOOST_MIN_VERSION} REQUIRED COMPONENTS regex)\nif(CMAKE_CXX_STANDARD VERSION_LESS 17)\n    set(USE_BOOST_FILESYSTEM ON CACHE BOOL \"Use boost::filesystem\" FORCE)\nendif()\nif(USE_BOOST_FILESYSTEM)\n    mapnik_find_package(Boost ${BOOST_MIN_VERSION} REQUIRED COMPONENTS filesystem system)\nendif()\n\nlist(APPEND MAPNIK_COMPILE_DEFS BOOST_REGEX_HAS_ICU)\nif(USE_BOOST_REGEX_ICU_WORKAROUND)\n    message(STATUS \"using boost regex workaround\")\n    set_property(TARGET Boost::regex PROPERTY INTERFACE_LINK_LIBRARIES)\nendif()\ninclude(CheckBoostRegexIcu)\ncheck_boost_regex()\nif(BOOST_REGEX_HAS_ICU)\n    message(STATUS \"boost regex has icu support\")\n    list(APPEND MAPNIK_COMPILE_DEFS BOOST_REGEX_HAS_ICU)\nendif()\n\nmapnik_find_package(Freetype REQUIRED)\n\n# try to find harfbuzz with the native configuration and fallback to our \"own\" FindHarfBuzz\nmapnik_find_package(harfbuzz CONFIG QUIET)\nif(harfbuzz_FOUND)\n    message(STATUS \"Found harfbuzz native cmake\")\n    list(APPEND MAPNIK_OPTIONAL_LIBS harfbuzz::harfbuzz)\nelse()\n    # Use pkg-config when harfbuzz is not found.\n    # It might be possible that in future version harfbuzz could only be found via pkg-config.\n    # harfbuzz related discussion: https://github.com/harfbuzz/harfbuzz/issues/2653\n    message(STATUS \"harfbuzz not found via cmake. Searching via pkg-config...\")\n    mapnik_pkg_check_modules(harfbuzz REQUIRED IMPORTED_TARGET harfbuzz>=${HARFBUZZ_MIN_VERSION})\n    list(APPEND MAPNIK_OPTIONAL_LIBS PkgConfig::harfbuzz)\nendif()\n\nif(USE_EXTERNAL_MAPBOX_GEOMETRY)\n    # this is used to provide a way to specify include dirs with CACHE VARIABLES\n    if(NOT MAPBOX_GEOMETRY_INCLUDE_DIRS)\n        message(STATUS \"Searching for the include dir of mapbox/geometry.hpp\")\n        find_path(MAPBOX_GEOMETRY_INCLUDE_DIRS \"mapbox/geometry.hpp\" REQUIRED)\n    endif()\nelse()\n    set(MAPBOX_GEOMETRY_INCLUDE_DIRS\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/deps/mapbox/geometry/include>\n        $<INSTALL_INTERFACE:include>\n    )\nendif()\nif(NOT MAPBOX_GEOMETRY_INCLUDE_DIRS)\n    message(FATAL_ERROR \"Set -DMAPBOX_GEOMETRY_INCLUDE_DIRS to the mapbox/geometry.hpp include dir\")\nendif()\n\nif(USE_EXTERNAL_MAPBOX_POLYLABEL)\n    if(NOT MAPBOX_POLYLABEL_INCLUDE_DIRS)\n        message(STATUS \"Searching for the include dir of mapbox/polylabel\")\n        find_path(MAPBOX_POLYLABEL_INCLUDE_DIRS \"mapbox/polylabel.hpp\")\n    endif()\nelse()\n    set(MAPBOX_POLYLABEL_INCLUDE_DIRS\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/deps/mapbox/polylabel/include>\n        $<INSTALL_INTERFACE:include>\n    )\nendif()\nif(NOT MAPBOX_POLYLABEL_INCLUDE_DIRS)\n    message(FATAL_ERROR \"Set MAPBOX_POLYLABEL_INCLUDE_DIRS to the mapbox/geometry include dir\")\nendif()\n\nif(USE_EXTERNAL_MAPBOX_PROTOZERO)\n    if(NOT MAPBOX_PROTOZERO_INCLUDE_DIRS)\n        message(STATUS \"Searching for the include dir of mapbox/protozero\")\n        find_path(MAPBOX_PROTOZERO_INCLUDE_DIRS \"protozero/pbf_message.hpp\")\n    endif()\nelse()\n    set(MAPBOX_PROTOZERO_INCLUDE_DIRS\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/deps/mapbox/protozero/include>\n        $<INSTALL_INTERFACE:include>\n    )\nendif()\nif(NOT MAPBOX_PROTOZERO_INCLUDE_DIRS)\n    message(FATAL_ERROR \"Set MAPBOX_PROTOZERO_INCLUDE_DIRS to the mapbox/protozero include dir\")\nendif()\n\nif(USE_EXTERNAL_MAPBOX_VARIANT)\n    if(NOT MAPBOX_VARIANT_INCLUDE_DIRS)\n        message(STATUS \"Searching for the include dir of mapbox/variant\")\n        find_path(MAPBOX_VARIANT_INCLUDE_DIRS \"mapbox/variant.hpp\")\n    endif()\nelse()\n    set(MAPBOX_VARIANT_INCLUDE_DIRS\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/deps/mapbox/variant/include>\n        $<INSTALL_INTERFACE:include>\n    )\nendif()\nif(NOT MAPBOX_VARIANT_INCLUDE_DIRS)\n    message(FATAL_ERROR \"Set MAPBOX_VARIANT_INCLUDE_DIRS to the mapbox/variant include dir\")\nendif()\n\n# (used by MapnikInstall.cmake. properties are needed since \"set(...)\" will be out of scope\nset_property(GLOBAL PROPERTY TARGETS \"\")\nset_property(GLOBAL PROPERTY PLUGINS \"\")\nset_property(GLOBAL PROPERTY MAPNIK_UTILITIES \"\")\n\nif(USE_GLIBC_WORKAROUND)\n    list(APPEND MAPNIK_COMPILE_DEFS MAPNIK_ENABLE_GLIBC_WORKAROUND)\nendif()\n\nif(USE_BIGINT)\n    list(APPEND MAPNIK_COMPILE_DEFS BIGINT)\nendif()\n\nif(USE_BOOST_FILESYSTEM)\n    list(APPEND MAPNIK_COMPILE_DEFS USE_BOOST_FILESYSTEM)\n    list(APPEND MAPNIK_OPTIONAL_LIBS Boost::filesystem)\nendif()\n\nif(USE_MEMORY_MAPPED_FILE)\n    list(APPEND MAPNIK_COMPILE_DEFS MAPNIK_MEMORY_MAPPED_FILE)\nendif()\n\nif(USE_NO_ATEXIT)\n    list(APPEND MAPNIK_COMPILE_DEFS MAPNIK_NO_ATEXIT)\nendif()\n\nif(USE_NO_DLCLOSE)\n    list(APPEND MAPNIK_COMPILE_DEFS MAPNIK_NO_DLCLOSE)\nendif()\n\nif(USE_DEBUG_OUTPUT)\n    list(APPEND MAPNIK_COMPILE_DEFS MAPNIK_DEBUG)\nendif()\n\nif(USE_LOG)\n    list(APPEND MAPNIK_COMPILE_DEFS MAPNIK_LOG MAPNIK_DEFAULT_LOG_SEVERITY=${USE_LOG_SEVERITY})\nendif()\n\nif(USE_STATS)\n    list(APPEND MAPNIK_COMPILE_DEFS MAPNIK_STATS)\nendif()\n\nif(USE_LIBXML2)\n    mapnik_find_package(LibXml2 REQUIRED)\n    list(APPEND MAPNIK_COMPILE_DEFS HAVE_LIBXML2)\n    list(APPEND MAPNIK_OPTIONAL_LIBS LibXml2::LibXml2)\nendif()\n\nif(USE_PNG)\n    mapnik_find_package(PNG REQUIRED)\n    list(APPEND MAPNIK_COMPILE_DEFS HAVE_PNG)\n    list(APPEND MAPNIK_OPTIONAL_LIBS PNG::PNG)\nendif()\n\nif(USE_JPEG)\n    mapnik_find_package(JPEG REQUIRED)\n    list(APPEND MAPNIK_COMPILE_DEFS HAVE_JPEG)\n    list(APPEND MAPNIK_OPTIONAL_LIBS JPEG::JPEG)\nendif()\n\nif(USE_TIFF)\n    mapnik_find_package(TIFF REQUIRED)\n    list(APPEND MAPNIK_COMPILE_DEFS HAVE_TIFF)\n    list(APPEND MAPNIK_OPTIONAL_LIBS TIFF::TIFF)\nendif()\n\nif(USE_WEBP)\n    mapnik_pkg_check_modules(WebP REQUIRED IMPORTED_TARGET libwebp)\n    list(APPEND MAPNIK_COMPILE_DEFS HAVE_WEBP)\n    list(APPEND MAPNIK_OPTIONAL_LIBS PkgConfig::WebP)\nendif()\n\nif(USE_CAIRO)\n    mapnik_pkg_check_modules(Cairo REQUIRED IMPORTED_TARGET cairo)\n    list(APPEND MAPNIK_COMPILE_DEFS HAVE_CAIRO)\n    list(APPEND MAPNIK_OPTIONAL_LIBS PkgConfig::Cairo)\nendif()\n\nif(USE_PROJ)\n    #https://proj.org/development/cmake.html\n    mapnik_find_package(PROJ QUIET)\n    # currently the cmake files are not installed, when installing proj via apt-get. So search via pkg-config\n    if(NOT PROJ_FOUND)\n        message(STATUS \"PROJ not found via FindPROJ. Searching via pkg-config...\")\n        mapnik_pkg_check_modules(PROJ REQUIRED IMPORTED_TARGET proj>=${PROJ_MIN_VERSION})\n        string(REGEX MATCH \"([0-9]+)\\.([0-9]+)\\.([0-9]+)\" _dummy \"${PROJ_VERSION}\")\n        set(PROJ_VERSION_MAJOR \"${CMAKE_MATCH_1}\")\n        set(PROJ_VERSION_MINOR \"${CMAKE_MATCH_2}\")\n        set(PROJ_VERSION_PATCH \"${CMAKE_MATCH_3}\")\n        list(APPEND MAPNIK_OPTIONAL_LIBS PkgConfig::PROJ)\n    else()\n        if(PROJ_VERSION VERSION_LESS PROJ_MIN_VERSION)\n            message(FATAL_ERROR \"Proj needs to be at least version ${PROJ_MIN_VERSION}\")\n        endif()\n        list(APPEND MAPNIK_OPTIONAL_LIBS ${PROJ_LIBRARIES})\n        list(APPEND MAPNIK_OPTIONAL_LIBS_INCLUDE $<BUILD_INTERFACE:${PROJ_INCLUDE_DIRS}>)\n    endif()\n    math(EXPR MAPNIK_PROJ_VERSION \"${PROJ_VERSION_MAJOR}*10000 + ${PROJ_VERSION_MINOR}*100 + ${PROJ_VERSION_PATCH}\" OUTPUT_FORMAT DECIMAL)\n    message(STATUS \"Using mapnik PROJ version: ${MAPNIK_PROJ_VERSION}\")\n    list(APPEND MAPNIK_COMPILE_DEFS MAPNIK_USE_PROJ MAPNIK_PROJ_VERSION=${MAPNIK_PROJ_VERSION})\nendif()\n\nif(USE_GRID_RENDERER)\n    list(APPEND MAPNIK_COMPILE_DEFS GRID_RENDERER)\nendif()\n\nif(USE_SVG_RENDERER)\n    list(APPEND MAPNIK_COMPILE_DEFS SVG_RENDERER)\nendif()\n\nif(NOT WIN32)\n    message(STATUS \"Compiling with -DMAPNIK_HAS_DLCFN\")\n    list(APPEND MAPNIK_COMPILE_DEFS MAPNIK_HAS_DLCFN)\n    list(APPEND MAPNIK_OPTIONAL_LIBS ${CMAKE_DL_LIBS})\nendif()\n\nif(NOT BUILD_SHARED_PLUGINS)\n    list(APPEND MAPNIK_COMPILE_DEFS MAPNIK_STATIC_PLUGINS)\nendif()\n# when building static, this have to be public so that all depending libs know about\nif(NOT BUILD_SHARED_LIBS)\n    list(APPEND MAPNIK_COMPILE_DEFS MAPNIK_STATIC_DEFINE)\nendif()\n\nif(DISABLE_MAPNIK_AUTOSETUP)\n    list(APPEND MAPNIK_COMPILE_DEFS MAPNIK_DISABLE_AUTOSETUP)\nendif()\n\n# force utf-8 source code processing\n# see https://docs.microsoft.com/de-de/cpp/build/reference/utf-8-set-source-and-executable-character-sets-to-utf-8?view=msvc-170\nadd_compile_options(\n    \"$<$<CXX_COMPILER_ID:MSVC>:/utf-8>\"\n    \"$<$<CXX_COMPILER_ID:MSVC>:/EHsc>\"\n)\n\nadd_library(core INTERFACE)\nadd_library(mapnik::core ALIAS core)\n\ntarget_include_directories(core INTERFACE\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n    $<BUILD_INTERFACE:${MAPBOX_GEOMETRY_INCLUDE_DIRS}>\n    $<BUILD_INTERFACE:${MAPBOX_POLYLABEL_INCLUDE_DIRS}>\n    $<BUILD_INTERFACE:${MAPBOX_VARIANT_INCLUDE_DIRS}>\n    $<BUILD_INTERFACE:${MAPBOX_PROTOZERO_INCLUDE_DIRS}>\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/deps>\n    $<INSTALL_INTERFACE:include>\n    ${MAPNIK_OPTIONAL_LIBS_INCLUDE}\n)\ntarget_link_libraries(core INTERFACE\n    Threads::Threads\n    ICU::uc\n    ICU::data\n    ICU::i18n\n    Boost::headers\n    Boost::regex\n    Freetype::Freetype\n    ${MAPNIK_OPTIONAL_LIBS}\n)\n\ntarget_compile_definitions(core INTERFACE ${MAPNIK_COMPILE_DEFS})\n\nmapnik_install(core)\n\n###\n# forward declaring libraries to consume them when building static plugins (circle deps between mapnik <-> plugin_target)\nadd_library(mapnik \"\")\nadd_library(mapnik::mapnik ALIAS mapnik)\nadd_library(wkt STATIC \"\")\nadd_library(mapnik::wkt ALIAS wkt)\nadd_library(json STATIC \"\")\nadd_library(mapnik::json ALIAS json)\n# end forward declaration\n###\n\nadd_subdirectory(deps)\nadd_subdirectory(plugins)\nadd_subdirectory(src)\nadd_subdirectory(utils)\nadd_subdirectory(demo)\nif(BUILD_BENCHMARK)\n    add_subdirectory(benchmark)\nendif()\nif(BUILD_TESTING)\n    add_subdirectory(test)\nendif()\nfile(COPY fonts DESTINATION \"${MAPNIK_OUTPUT_DIR}\")\n\nfeature_summary(FILENAME \"${CMAKE_CURRENT_BINARY_DIR}/packages.log\" WHAT PACKAGES_FOUND PACKAGES_NOT_FOUND INCLUDE_QUIET_PACKAGES)\n\n# start package mapnik\ninclude(MapnikExport)\ninclude(MapnikExportPkgConfig)\n\ninstall(DIRECTORY include/mapnik/ DESTINATION \"${MAPNIK_INCLUDE_DIR}/mapnik\")\ninstall(DIRECTORY deps/agg/include/ DESTINATION \"${MAPNIK_INCLUDE_DIR}/mapnik/agg\")\ninstall(DIRECTORY deps/mapnik DESTINATION \"${MAPNIK_INCLUDE_DIR}\")\nfile(GLOB TTF_FONT_FILES \"fonts/*/*/*.ttf\")\ninstall(FILES ${TTF_FONT_FILES} DESTINATION \"${FONTS_INSTALL_DIR}\")\n\nif(NOT USE_EXTERNAL_MAPBOX_GEOMETRY)\n    install(DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/deps/mapbox/geometry/include/\" DESTINATION \"${MAPNIK_INCLUDE_DIR}\")\nendif()\nif(NOT USE_EXTERNAL_MAPBOX_POLYLABEL)\n    install(DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/deps/mapbox/polylabel/include/\" DESTINATION \"${MAPNIK_INCLUDE_DIR}\")\nendif()\nif(NOT USE_EXTERNAL_MAPBOX_PROTOZERO)\n    install(DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/deps/mapbox/protozero/include/\" DESTINATION \"${MAPNIK_INCLUDE_DIR}\")\nendif()\nif(NOT USE_EXTERNAL_MAPBOX_VARIANT)\n    install(DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/deps/mapbox/variant/include/\" DESTINATION \"${MAPNIK_INCLUDE_DIR}\")\nendif()\n\nmapnik_install_targets()\n\ninclude(pack)\n"
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 9.6474609375,
          "content": "{\n    \"version\": 6,\n    \"cmakeMinimumRequired\": {\n        \"major\": 3,\n        \"minor\": 25,\n        \"patch\": 0\n    },\n    \"configurePresets\": [\n        {\n            \"name\": \"use-ninja\",\n            \"hidden\": true,\n            \"generator\": \"Ninja\",\n            \"cacheVariables\": {\n                \"CMAKE_EXPORT_COMPILE_COMMANDS\": \"ON\"\n            }\n        },\n        {\n            \"name\": \"default-build-dir\",\n            \"hidden\": true,\n            \"binaryDir\": \"${sourceDir}/build\"\n        },\n        {\n            \"name\": \"debug-build\",\n            \"hidden\": true,\n            \"cacheVariables\": {\n                \"CMAKE_BUILD_TYPE\": \"Debug\",\n                \"USE_DEBUG_OUTPUT\": \"ON\",\n                \"USE_LOG\": \"ON\",\n                \"USE_LOG_SEVERITY\": \"0\"\n            }\n        },\n        {\n            \"name\": \"release-with-debug-build\",\n            \"hidden\": true,\n            \"cacheVariables\": {\n                \"CMAKE_BUILD_TYPE\": \"RelWithDebInfo\",\n                \"USE_DEBUG_OUTPUT\": \"OFF\",\n                \"USE_LOG\": \"OFF\"\n            }\n        },\n        {\n            \"name\": \"release-build\",\n            \"hidden\": true,\n            \"cacheVariables\": {\n                \"CMAKE_BUILD_TYPE\": \"Release\",\n                \"USE_DEBUG_OUTPUT\": \"OFF\",\n                \"USE_LOG\": \"OFF\"\n            }\n        },\n        {\n            \"name\": \"use-clang\",\n            \"hidden\": true,\n            \"inherits\": [\n                \"default-build-dir\",\n                \"use-ninja\"\n            ],\n            \"cacheVariables\": {\n                \"CMAKE_C_COMPILER\": \"clang\",\n                \"CMAKE_CXX_COMPILER\": \"clang++\",\n                \"CMAKE_CXX_FLAGS\": \"-stdlib=libc++\",\n                \"CMAKE_EXE_LINKER_FLAGS\": \"-stdlib=libc++\",\n                \"CMAKE_SHARED_LINKER_FLAGS\": \"-stdlib=libc++\"\n            }\n        },\n        {\n            \"name\": \"use-gcc\",\n            \"hidden\": true,\n            \"inherits\": [\n                \"default-build-dir\",\n                \"use-ninja\"\n            ],\n            \"cacheVariables\": {\n                \"CMAKE_C_COMPILER\": \"gcc\",\n                \"CMAKE_CXX_COMPILER\": \"g++\"\n            }\n        },\n        {\n            \"name\": \"use-msvc-cl\",\n            \"hidden\": true,\n            \"inherits\": [\n                \"default-build-dir\",\n                \"use-ninja\"\n            ],\n            \"cacheVariables\": {\n                \"CMAKE_C_COMPILER\": \"cl\",\n                \"CMAKE_CXX_COMPILER\": \"cl\"\n            }\n        },\n        {\n            \"name\": \"use-msvc-clang-cl\",\n            \"hidden\": true,\n            \"inherits\": [\n                \"default-build-dir\",\n                \"use-ninja\"\n            ],\n            \"cacheVariables\": {\n                \"CMAKE_C_COMPILER\": \"clang-cl\",\n                \"CMAKE_CXX_COMPILER\": \"clang-cl\"\n            }\n        },\n        {\n            \"name\": \"linux-clang-debug\",\n            \"displayName\": \"Linux clang debug\",\n            \"inherits\": [\n                \"use-clang\",\n                \"debug-build\"\n            ]\n        },\n        {\n            \"name\": \"linux-clang-release\",\n            \"displayName\": \"Linux clang release\",\n            \"inherits\": [\n                \"use-clang\",\n                \"release-build\"\n            ]\n        },\n        {\n            \"name\": \"linux-gcc-debug\",\n            \"displayName\": \"Linux gcc debug\",\n            \"inherits\": [\n                \"use-gcc\",\n                \"debug-build\"\n            ]\n        },\n        {\n            \"name\": \"linux-gcc-release\",\n            \"displayName\": \"Linux gcc release\",\n            \"inherits\": [\n                \"use-gcc\",\n                \"release-build\"\n            ]\n        },\n        {\n            \"name\": \"windows-arch-x64\",\n            \"hidden\": true,\n            \"architecture\": {\n                \"value\": \"x64\",\n                \"strategy\": \"external\"\n            },\n            \"toolset\": {\n                \"value\": \"host=x64\",\n                \"strategy\": \"external\"\n            }\n        },\n        {\n            \"name\": \"windows-default\",\n            \"displayName\": \"Windows x64 Debug\",\n            \"hidden\": true,\n            \"inherits\": [\n                \"use-msvc-cl\",\n                \"windows-arch-x64\"\n            ],\n            \"vendor\": {\n                \"microsoft.com/VisualStudioSettings/CMake/1.0\": {\n                    \"hostOS\": [\n                        \"Windows\"\n                    ]\n                }\n            }\n        },\n        {\n            \"name\": \"windows-debug\",\n            \"displayName\": \"Windows x64 Debug\",\n            \"inherits\": [\n                \"windows-default\",\n                \"debug-build\"\n            ]\n        },\n        {\n            \"name\": \"windows-release\",\n            \"displayName\": \"Windows x64 Release\",\n            \"inherits\": [\n                \"windows-default\",\n                \"release-build\"\n            ]\n        },\n        {\n            \"name\": \"ci-options\",\n            \"hidden\": true,\n            \"cacheVariables\": {\n                \"BUILD_TESTING\": \"ON\",\n                \"BUILD_DEMO_VIEWER\": \"OFF\",\n                \"DISABLE_MAPNIK_AUTOSETUP\": \"ON\"\n            },\n            \"toolchainFile\": \"vcpkg/scripts/buildsystems/vcpkg.cmake\"\n        },\n        {\n            \"name\": \"windows-ci\",\n            \"description\": \"used by the ci pipeline\",\n            \"inherits\": [\n                \"windows-release\",\n                \"ci-options\"\n            ],\n            \"cacheVariables\": {\n                \"INSTALL_DEPENDENCIES\": \"ON\",\n                \"ADDITIONAL_LIBARIES_PATHS\": \"${sourceDir}/build/vcpkg_installed/x64-windows/bin\"\n            },\n            \"environment\": {\n                \"PROJ_LIB\": \"${sourceDir}/build/vcpkg_installed/x64-windows/share/proj\"\n            }\n        },\n        {\n            \"name\": \"linux-ci\",\n            \"description\": \"used by the ci pipeline\",\n            \"inherits\": [\n                \"release-with-debug-build\",\n                \"use-gcc\",\n                \"ci-options\"\n            ],\n            \"cacheVariables\": {\n                \"CMAKE_CXX_FLAGS\": \"--coverage\"\n            },\n            \"environment\": {\n                \"PROJ_LIB\": \"${sourceDir}/build/vcpkg_installed/x64-linux/share/proj\"\n            }\n        },\n        {\n            \"name\": \"linux-ci-release\",\n            \"description\": \"used by the ci pipeline for releasing\",\n            \"inherits\": [\n                \"release-build\",\n                \"linux-gcc-release\"\n            ],\n            \"cacheVariables\": {\n                \"BUILD_TESTING\": \"OFF\",\n                \"BUILD_DEMO_VIEWER\": \"OFF\",\n                \"USE_MEMORY_MAPPED_FILE\": \"ON\"\n            }\n        },\n        {\n            \"name\": \"macos-ci-arm64\",\n            \"description\": \"used by the ci pipeline\",\n            \"inherits\": [\n                \"use-ninja\",\n                \"release-with-debug-build\",\n                \"default-build-dir\",\n                \"ci-options\"\n            ],\n            \"cacheVariables\": {\n                \"CMAKE_CXX_FLAGS\": \"-fprofile-arcs -ftest-coverage\"\n            },\n            \"environment\": {\n                \"PROJ_LIB\": \"${sourceDir}/build/vcpkg_installed/arm64-osx/share/proj\"\n            }\n        },\n        {\n            \"name\": \"macos-ci-x64\",\n            \"description\": \"used by the ci pipeline\",\n            \"inherits\": [\n                \"use-ninja\",\n                \"release-with-debug-build\",\n                \"default-build-dir\",\n                \"ci-options\"\n            ],\n            \"cacheVariables\": {\n                \"CMAKE_CXX_FLAGS\": \"-fprofile-arcs -ftest-coverage\"\n            },\n            \"environment\": {\n                \"PROJ_LIB\": \"${sourceDir}/build/vcpkg_installed/x64-osx/share/proj\"\n            }\n        }\n    ],\n    \"buildPresets\": [\n        {\n            \"name\": \"windows-debug\",\n            \"configurePreset\": \"windows-debug\"\n        },\n        {\n            \"name\": \"windows-release\",\n            \"configurePreset\": \"windows-release\"\n        },\n        {\n            \"name\": \"linux-clang-debug\",\n            \"configurePreset\": \"linux-clang-debug\"\n        },\n        {\n            \"name\": \"linux-clang-release\",\n            \"configurePreset\": \"linux-clang-release\"\n        },\n        {\n            \"name\": \"linux-gcc-debug\",\n            \"configurePreset\": \"linux-gcc-debug\"\n        },\n        {\n            \"name\": \"linux-gcc-release\",\n            \"configurePreset\": \"linux-gcc-release\"\n        },\n        {\n            \"name\": \"windows-ci\",\n            \"configurePreset\": \"windows-ci\"\n        },\n        {\n            \"name\": \"linux-ci\",\n            \"configurePreset\": \"linux-ci\"\n        },\n        {\n            \"name\": \"linux-ci-release\",\n            \"configurePreset\": \"linux-ci-release\"\n        },\n        {\n            \"name\": \"macos-ci-arm64\",\n            \"configurePreset\": \"macos-ci-arm64\"\n        },\n        {\n            \"name\": \"macos-ci-x64\",\n            \"configurePreset\": \"macos-ci-x64\"\n        }\n    ],\n    \"testPresets\": [\n        {\n            \"name\": \"test-default\",\n            \"hidden\": true,\n            \"output\": {\n                \"outputOnFailure\": true\n            },\n            \"execution\": {\n                \"noTestsAction\": \"error\",\n                \"stopOnFailure\": false\n            }\n        },\n        {\n            \"name\": \"windows-ci\",\n            \"configurePreset\": \"windows-ci\",\n            \"inherits\": [\n                \"test-default\"\n            ]\n        },\n        {\n            \"name\": \"linux-ci\",\n            \"configurePreset\": \"linux-ci\",\n            \"inherits\": [\n                \"test-default\"\n            ]\n        },\n        {\n            \"name\": \"macos-ci-arm64\",\n            \"configurePreset\": \"macos-ci-arm64\",\n            \"inherits\": [\n                \"test-default\"\n            ]\n        },\n        {\n            \"name\": \"macos-ci-x64\",\n            \"configurePreset\": \"macos-ci-x64\",\n            \"inherits\": [\n                \"test-default\"\n            ]\n        }\n    ]\n}\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 1.93359375,
          "content": "# Contributor Code of Conduct\n\nAs contributors and maintainers of this project, and in the interest of fostering an open and welcoming community, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.\n\nWe are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, or nationality.\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery\n* Personal attacks\n* Trolling or insulting/derogatory comments\n* Public or private harassment\n* Publishing other's private information, such as physical or electronic addresses, without explicit permission\n* Other unethical or unprofessional conduct.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct. By adopting this Code of Conduct, project maintainers commit themselves to fairly and consistently applying these principles to every aspect of managing this project. Project maintainers who do not follow or enforce the Code of Conduct may be permanently removed from the project team.\n\nThis code of conduct applies both within project spaces and in public spaces when an individual is representing the project or its community.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the project maintainers.\n\nThis Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.2.0, available at [http://contributor-covenant.org/version/1/2/0/](http://contributor-covenant.org/version/1/2/0/)"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 25.8994140625,
          "content": "                  GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 2.1, February 1999\n\n Copyright (C) 1991, 1999 Free Software Foundation, Inc.\n 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts\n as the successor of the GNU Library Public License, version 2, hence\n the version number 2.1.]\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Lesser General Public License, applies to some\nspecially designated software packages--typically libraries--of the\nFree Software Foundation and other authors who decide to use it.  You\ncan use it too, but we suggest you first think carefully about whether\nthis license or the ordinary General Public License is the better\nstrategy to use in any particular case, based on the explanations below.\n\n  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n\n  To protect your rights, we need to make restrictions that forbid\ndistributors to deny you these rights or to ask you to surrender these\nrights.  These restrictions translate to certain responsibilities for\nyou if you distribute copies of the library or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link other code with the library, you must provide\ncomplete object files to the recipients, so that they can relink them\nwith the library after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  We protect your rights with a two-step method: (1) we copyright the\nlibrary, and (2) we offer you this license, which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  To protect each distributor, we want to make it very clear that\nthere is no warranty for the free library.  Also, if the library is\nmodified by someone else and passed on, the recipients should know\nthat what they have is not the original version, so that the original\nauthor's reputation will not be affected by problems that might be\nintroduced by others.\n\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\nconsistent with the full freedom of use specified in this license.\n\n  Most GNU software, including some libraries, is covered by the\nordinary GNU General Public License.  This license, the GNU Lesser\nGeneral Public License, applies to certain designated libraries, and\nis quite different from the ordinary General Public License.  We use\nthis license for certain libraries in order to permit linking those\nlibraries into non-free programs.\n\n  When a program is linked with a library, whether statically or using\na shared library, the combination of the two is legally speaking a\ncombined work, a derivative of the original library.  The ordinary\nGeneral Public License therefore permits such linking only if the\nentire combination fits its criteria of freedom.  The Lesser General\nPublic License permits more lax criteria for linking other code with\nthe library.\n\n  We call this license the \"Lesser\" General Public License because it\ndoes Less to protect the user's freedom than the ordinary General\nPublic License.  It also provides other free software developers Less\nof an advantage over competing non-free programs.  These disadvantages\nare the reason we use the ordinary General Public License for many\nlibraries.  However, the Lesser license provides advantages in certain\nspecial circumstances.\n\n  For example, on rare occasions, there may be a special need to\nencourage the widest possible use of a certain library, so that it becomes\na de-facto standard.  To achieve this, non-free programs must be\nallowed to use the library.  A more frequent case is that a free\nlibrary does the same job as widely used non-free libraries.  In this\ncase, there is little to gain by limiting the free library to free\nsoftware only, so we use the Lesser General Public License.\n\n  In other cases, permission to use a particular library in non-free\nprograms enables a greater number of people to use a large body of\nfree software.  For example, permission to use the GNU C Library in\nnon-free programs enables many more people to use the whole GNU\noperating system, as well as its variant, the GNU/Linux operating\nsystem.\n\n  Although the Lesser General Public License is Less protective of the\nusers' freedom, it does ensure that the user of a program that is\nlinked with the Library has the freedom and the wherewithal to run\nthat program using a modified version of the Library.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a\n\"work based on the library\" and a \"work that uses the library\".  The\nformer contains code derived from the library, whereas the latter must\nbe combined with the library in order to run.\n\n                  GNU LESSER GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library or other\nprogram which contains a notice placed by the copyright holder or\nother authorized party saying it may be distributed under the terms of\nthis Lesser General Public License (also called \"this License\").\nEach licensee is addressed as \"you\".\n\n  A \"library\" means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The \"Library\", below, refers to any such software library or work\nwhich has been distributed under these terms.  A \"work based on the\nLibrary\" means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term \"modification\".)\n\n  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n\n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Library,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Library, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\nwith the Library (or with a work based on the Library) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a \"work that uses the Library\".  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a \"work that uses the Library\" with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a \"work that uses the\nlibrary\".  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a \"work that uses the Library\" uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\n  6. As an exception to the Sections above, you may also combine or\nlink a \"work that uses the Library\" with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable \"work that\n    uses the Library\", as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    d) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    e) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the \"work that uses the\nLibrary\" must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe materials to be distributed need not include anything that is\nnormally distributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties with\nthis License.\n\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply,\nand the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Library\nspecifies a version number of this License which applies to it and\n\"any later version\", you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation.  If the Library does not specify a\nlicense version number, you may choose any version ever published by\nthe Free Software Foundation.\n\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision will be guided by the two goals of preserving the free status\nof all derivatives of our free software and of promoting the sharing\nand reuse of software generally.\n\n                            NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n           How to Apply These Terms to Your New Libraries\n\n  If you develop a new library, and you want it to be of the greatest\npossible use to the public, we recommend making it free software that\neveryone can redistribute and change.  You can do so by permitting\nredistribution under these terms (or, alternatively, under the terms of the\nordinary General Public License).\n\n  To apply these terms, attach the following notices to the library.  It is\nsafest to attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the library's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the library, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n  <signature of Ty Coon>, 1 April 1990\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 5.6337890625,
          "content": "# Mapnik Installation\n\nMapnik runs on Linux, OS X, Windows, and BSD systems.\n\n## Package managers\n### vcpkg \nTo install mapnik with vcpkg type `vcpkg install mapnik`. It will install a minimal version of mapnik and all the needed dependencies. \nTo install more features, type `vcpkg search mapnik` to see all available features.\n\n## Source build\n\nFirst clone mapnik from github and initialize submodules\n\n```bash\ngit clone https://github.com/mapnik/mapnik.git\ncd mapnik\ngit submodule update --init\n```\n\nTo configure and build Mapnik do:\n\n```bash\n./configure\nmake\n```\n\nTo trigger parallel compilation you can pass a JOBS value to make:\n\n```bash\nJOBS=4 make\n```\n\nMapnik needs > 2 GB of RAM to build. If you use parallel compilation it needs more.\n\nIf you are on a system with less memory make sure you only build with one JOB:\n\n```bash\nJOBS=1 make\n```\n\nTo use a Python interpreter that is not named `python` for your build, do\nsomething like the following instead:\n\n```bash\n    $ PYTHON=python3 ./configure\n    $ make PYTHON=python3\n```\n\nNOTE: the above will not work on windows, rather see https://github.com/mapnik/mapnik/wiki/WindowsInstallation\n\nThen to run the tests locally (without needing to install):\n\n    make test\n\nInstall like:\n\n    make install\n\nIf you need to uninstall do:\n\n    make uninstall\n\nFor more details see the `Building` Section below.\n\nPlatform specific install guides at https://github.com/mapnik/mapnik/wiki/Mapnik-Installation\n\nFor troubleshooting help see https://github.com/mapnik/mapnik/wiki/InstallationTroubleshooting\n\n\n## Depends\n\nBuild system dependencies are:\n\n * C++ compiler supporting `-std=c++17` (like >= g++ 9 or >= clang++ 5)\n * \\>= 2 GB RAM (> 5 GB for g++)\n * Python 3\n * Scons (a copy is bundled) or CMake >= 3.15 see [docs/cmake-usage.md](./docs/cmake-usage.md)\n\nMapnik Core depends on:\n\n * Boost\n    - \\>= 1.73 is required\n    - These libraries are used:\n      - filesystem\n      - system\n      - regex (optionally built with icu regex support)\n      - program_options (optionally for mapnik command line programs)\n * libicuuc >= 4.0 (ideally >= 4.2) - International Components for Unicode\n * libz - Zlib compression\n * libfreetype - Freetype2 for font support (Install requires freetype-config)\n * libxml2 - XML parsing (Install requires xml2-config)\n * libharfbuzz - an OpenType text shaping engine (>=0.9.34 needed for CSS font-feature-settings support)\n\nMapnik Core optionally depends on:\n\n * libpng >= 1.2.x - PNG graphics (Default enabled, if found)\n * libjpeg - JPEG graphics (Default enabled, if found)\n * libtiff - TIFF graphics (Default enabled, if found)\n * libwebp - WEBP graphics  (Default enabled, if found)\n * libproj >= 7.2.0 - PROJ projection library (Default enabled, if found)\n\nAdditional optional dependencies:\n\n * Cairo >= 1.6.0 - Graphics library for output formats like PDF, PS, and SVG\n    - pkg-config - Required for building with cairo support\n * PostgreSQL (for PostGIS plugin support)\n    - libpq - PostreSQL libraries\n    - pg_config - PostgreSQL installation capabilities\n * libgdal - GDAL/OGR input (For gdal and ogr plugin support) (>= GDAL 2.0.2 for thread safety - https://github.com/mapnik/mapnik/issues/3339)\n * libsqlite3 - SQLite input (needs RTree support builtin) (sqlite plugin support)\n\nInstructions for installing many of these dependencies on\nvarious platforms can be found at the Mapnik Wiki:\n\nhttps://github.com/mapnik/mapnik/wiki/Mapnik-Installation\n\n\n## Building\n\nThe build system uses SCons, a pure python equivalent to autotools or cmake.\n\nWe provide a simple Makefile wrapper that can be used like:\n\n    ./configure && make && make install\n\nFor help on what options are accepted do:\n\n    ./configure --help\n\nTo interact with the local copy of scons directly you can do:\n\n    python scons/scons.py configure\n\nYou can also use a globally installed scons:\n\n    scons configure\n\nIf you want to clean your build do:\n\n    make clean\n\nIf you experience odd configure errors, try cleaning the configure caches:\n\n    make distclean\n\nTo install in a custom location do:\n\n    ./configure PREFIX=/opt/mapnik\n\nTo pass custom CXXFLAGS or LDFLAGS do:\n\n    ./configure CUSTOM_CXXFLAGS=\"-g -I/usr/include\" CUSTOM_LDFLAGS=\"-L/usr/lib\"\n\nTo pass custom paths to a dependency, like boost, do:\n\n    ./configure BOOST_INCLUDES=/opt/boost/include BOOST_LIBS=/opt/boost/lib\n\nTo pass custom paths to a dependency, like icu, do:\n\n    ./configure ICU_INCLUDES=/usr/local/include ICU_LIBS=/usr/local/include\n\nFor more details on usage see:\n\n    https://github.com/mapnik/mapnik/wiki/UsingScons\n\n\n## Testing Installation\n\nYou can run the Mapnik tests locally (without installing) like:\n\n    make test\n\n## Python Bindings\n\nPython bindings are not included by default. You'll need to add those separately. \n\n * Build from source: https://github.com/mapnik/python-mapnik\n\n## Learning Mapnik\n\n### Help\n\nMapnik has an active community of talented users and developers making beautiful maps.\n\nIf you need help or want to participate starting points include:\n\n- Sign up and post to the mailing list: http://mapnik.org/contact/\n- Join and ask questions on the #mapnik channel on irc://irc.freenode.net/mapnik\n- Add your help questions to https://github.com/mapnik/mapnik-support\n\n### Cartographers\n\nTileMill, which uses Mapnik internally, offers great step by step tutorials for\nlearning advanced map styling: https://tilemill-project.github.io/tilemill/docs/crashcourse/introduction/\n\n### Programmers\n\nMapnik is great for building your own mapping applications. Visit\nhttps://github.com/mapnik/mapnik/wiki/LearningMapnik for basic\ntutorials on how to programmatically use Mapnik.\n\n### Contributors\n\nRead [docs/contributing.md](docs/contributing.md) for resources for getting involved with Mapnik development.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.1357421875,
          "content": "OS := $(shell uname -s)\n\nifeq ($(JOBS),)\n\tJOBS:=1\nendif\n\nifeq ($(HEAVY_JOBS),)\n\tHEAVY_JOBS:=1\nendif\n\nall: mapnik\n\ninstall:\n\t$(PYTHON) scons/scons.py -j$(JOBS) --config=cache --implicit-cache --max-drift=1 install\n\nrelease:\n\t./scripts/publish_release.sh\n\ntest-release:\n\t./scripts/test_release.sh\n\nsrc/json/libmapnik-json.a:\n\t# we first build memory intensive files with -j$(HEAVY_JOBS)\n\t$(PYTHON) scons/scons.py -j$(HEAVY_JOBS) \\\n\t\t--config=cache --implicit-cache --max-drift=1 \\\n\t\tsrc/renderer_common/render_group_symbolizer.os \\\n\t\tsrc/renderer_common/render_markers_symbolizer.os \\\n\t\tsrc/renderer_common/render_thunk_extractor.os \\\n\t\tsrc/json/libmapnik-json.a \\\n\t\tsrc/wkt/libmapnik-wkt.a \\\n\t\tsrc/css/css_grammar_x3.os \\\n\t\tsrc/css/css_color_grammar_x3.os \\\n\t\tsrc/expression_grammar_x3.os \\\n\t\tsrc/transform_expression_grammar_x3.os \\\n\t\tsrc/image_filter_grammar_x3.os \\\n\t\tsrc/marker_helpers.os \\\n\t\tsrc/svg/svg_transform_parser.os \\\n\t\tsrc/agg/process_line_symbolizer.os \\\n\t\tplugins/input/geojson/geojson_datasource.os \\\n\t\tsrc/svg/svg_path_parser.os \\\n\t\tsrc/svg/svg_parser.os \\\n\t\tsrc/svg/svg_points_parser.os \\\n\t\tsrc/svg/svg_transform_parser.os \\\n\n\nmapnik: src/json/libmapnik-json.a\n\t# then install the rest with -j$(JOBS)\n\t$(PYTHON) scons/scons.py -j$(JOBS) --config=cache --implicit-cache --max-drift=1\n\nclean:\n\t@$(PYTHON) scons/scons.py -j$(JOBS) -c --config=cache --implicit-cache --max-drift=1\n\t@if test -e \".sconsign.dblite\"; then rm \".sconsign.dblite\"; fi\n\t@if test -e \"config.log\"; then rm \"config.log\"; fi\n\t@if test -e \"config.cache\"; then rm \"config.cache\"; fi\n\t@if test -e \".sconf_temp/\"; then rm -r \".sconf_temp/\"; fi\n\t@find ./ -name \"*.pyc\" -exec rm {} \\;\n\t@find ./ -name \"*.os\" -exec rm {} \\;\n\t@find ./src/ -name \"*.dylib\" -exec rm {} \\;\n\t@find ./src/ -name \"*.so\" -exec rm {} \\;\n\t@find ./ -name \"*.o\" -exec rm {} \\;\n\t@find ./src/ -name \"*.a\" -exec rm {} \\;\n\t@find ./ -name \"*.gcda\" -exec rm {} \\;\n\t@find ./ -name \"*.gcno\" -exec rm {} \\;\n\ndistclean:\n\tif test -e \"config.py\"; then mv \"config.py\" \"config.py.backup\"; fi\n\nreset: distclean\n\nrebuild:\n\tmake uninstall && make clean && time make && make install\n\nuninstall:\n\t@$(PYTHON) scons/scons.py -j$(JOBS) --config=cache --implicit-cache --max-drift=1 uninstall\n\ntest/data-visual:\n\t./scripts/ensure_test_data.sh\n\ntest/data:\n\t./scripts/ensure_test_data.sh\n\ntest: ./test/data test/data-visual\n\t@./test/run\n\ncheck: test\n\nbench:\n\t./benchmark/run\n\ndemo:\n\tcd demo/c++; ./rundemo `mapnik-config --prefix`\n\n# note: pass --gen-suppressions=yes to create new suppression entries\ngrind:\n\t@source localize.sh && \\\n\t    valgrind --suppressions=./test/unit/valgrind.supp --leak-check=full --log-fd=1 ./test/visual/run | grep definitely;\n\t@source localize.sh && \\\n\tfor FILE in test/standalone/*-bin; do \\\n\t\tvalgrind --suppressions=./test/unit/valgrind.supp --leak-check=full --log-fd=1 $${FILE} | grep definitely; \\\n\tdone\n\t@source localize.sh && \\\n\t    valgrind --suppressions=./test/unit/valgrind.supp --leak-check=full --log-fd=1 ./test/unit/run | grep definitely;\n\nrender:\n\t@for FILE in tests/data/good_maps/*xml; do \\\n\t\tnik2img.py $${FILE} /tmp/$$(basename $${FILE}).png; \\\n\tdone\n\n.PHONY: install mapnik clean distclean reset uninstall test demo pep8 grind render\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.8837890625,
          "content": "```\n    _/      _/                                _/  _/\n   _/_/  _/_/    _/_/_/  _/_/_/    _/_/_/        _/  _/\n  _/  _/  _/  _/    _/  _/    _/  _/    _/  _/  _/_/\n _/      _/  _/    _/  _/    _/  _/    _/  _/  _/  _/\n_/      _/    _/_/_/  _/_/_/    _/    _/  _/  _/    _/\n                     _/\n                    _/\n```\n\n[![TravisCI](https://api.travis-ci.com/mapnik/mapnik.svg?branch=master)](http://travis-ci.com/mapnik/mapnik)\n[![codecov](https://codecov.io/gh/mapnik/mapnik/branch/master/graph/badge.svg)](https://codecov.io/gh/mapnik/mapnik)\n\nMapnik is an open source toolkit for developing mapping applications. At the core is a C++ shared library providing algorithms and patterns for spatial data access and visualization.\n\nMapnik is basically a collection of geographic objects like maps, layers, datasources, features, and geometries. The library doesn't rely on any OS specific \"windowing systems\" and it can be deployed to any server environment. It is intended to play fair in a multi-threaded environment and is aimed primarily, but not exclusively, at web-based development.\n\nFor further information see [http://mapnik.org](http://mapnik.org) and also our [wiki documentation](https://github.com/mapnik/mapnik/wiki).\n\n# Installation\n\nSee [INSTALL.md](INSTALL.md) for installation instructions and the [Install](https://github.com/mapnik/mapnik/wiki/Mapnik-Installation) page on the wiki for guides.\n\n# Code of Conduct\n\nPlease note that this project is released with a [Contributor Code of Conduct](https://github.com/mapnik/mapnik/blob/master/CODE_OF_CONDUCT.md). By participating in this project you agree to abide by its terms.\n\n# License\n\nMapnik software is free and is released under the LGPL v2.1 ([GNU Lesser General Public License, version 2.1](https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html)). Please see [COPYING](https://github.com/mapnik/mapnik/blob/master/COPYING) for more information.\n"
        },
        {
          "name": "SConstruct",
          "type": "blob",
          "size": 97.419921875,
          "content": "# This file is part of Mapnik (c++ mapping toolkit)\n#\n# Copyright (C) 2024 Artem Pavlenko\n#\n# Mapnik is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Lesser General Public\n# License as published by the Free Software Foundation; either\n# version 2.1 of the License, or (at your option) any later version.\n#\n# This library is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with this library; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport os\nimport sys\nimport re\nimport platform\nfrom glob import glob\nfrom copy import copy\nfrom subprocess import run, Popen, PIPE\nfrom SCons.SConf import SetCacheMode\nimport pickle\n\ntry:\n    import distutils.sysconfig\n    HAS_DISTUTILS = True\nexcept:\n    HAS_DISTUTILS = False\n\nfrom shlex import quote as shquote\nfrom subprocess import DEVNULL\n\nLIBDIR_SCHEMA_DEFAULT='lib'\nseverities = ['debug', 'warn', 'error', 'none']\n\nICU_INCLUDES_DEFAULT='/usr/include'\nICU_LIBS_DEFAULT='/usr/'\n\nDEFAULT_CC = \"cc\"\nDEFAULT_CXX = \"c++\"\nDEFAULT_CXX_STD = \"17\"\nDEFAULT_CXX_CXXFLAGS = \" -DU_USING_ICU_NAMESPACE=0\"\nDEFAULT_CXX_LINKFLAGS = \"\"\nif sys.platform == 'darwin':\n    # homebrew default\n    ICU_INCLUDES_DEFAULT='/usr/local/opt/icu4c/include/'\n    ICU_LIBS_DEFAULT='/usr/local/opt/icu4c/'\n\npy3 = None\n\n# local file to hold custom user configuration variables\n# Todo check timestamp, reload if changed?\nSCONS_LOCAL_CONFIG = 'config.py'\n# build log\nSCONS_LOCAL_LOG = 'config.log'\n# local pickled file to cache configured environment\nSCONS_CONFIGURE_CACHE = 'config.cache'\n# directory SCons uses to stash build tests\nSCONF_TEMP_DIR = '.sconf_temp'\n# auto-search directories for boost libs/headers\nBOOST_SEARCH_PREFIXES = ['/usr/local','/opt/local','/sw','/usr',]\nBOOST_MIN_VERSION = '1.73'\n#CAIRO_MIN_VERSION = '1.8.0'\nPROJ_MIN_VERSION = (7, 2, 0)\nPROJ_MIN_VERSION_STRING = \"%s.%s.%s\" % PROJ_MIN_VERSION\nHARFBUZZ_MIN_VERSION = (0, 9, 34)\nHARFBUZZ_MIN_VERSION_STRING = \"%s.%s.%s\" % HARFBUZZ_MIN_VERSION\n\n\nDEFAULT_LINK_PRIORITY = ['internal','other','frameworks','user','system']\n\n\npretty_dep_names = {\n    'clntsh':'Oracle database library | configure with OCCI_LIBS & OCCI_INCLUDES | more info: https://github.com/mapnik/mapnik/wiki/OCCI',\n    'gdal':'GDAL C++ library | configured using gdal-config program | try setting GDAL_CONFIG SCons option | more info: https://github.com/mapnik/mapnik/wiki/GDAL',\n    'ogr':'OGR-enabled GDAL C++ Library | configured using gdal-config program | try setting GDAL_CONFIG SCons option | more info: https://github.com/mapnik/mapnik/wiki/OGR',\n    'cairo':'Cairo C library | configured using pkg-config | try setting PKG_CONFIG_PATH SCons option',\n    'proj':'Proj C Projections library | configure with PROJ_LIBS & PROJ_INCLUDES | more info: http://trac.osgeo.org/proj/',\n    'proj-min-version':'libproj >=%s required' % PROJ_MIN_VERSION_STRING,\n    'pg':'Postgres C Library required for PostGIS plugin | configure with pg_config program or configure with PG_LIBS & PG_INCLUDES | more info: https://github.com/mapnik/mapnik/wiki/PostGIS',\n    'sqlite3':'SQLite3 C Library | configure with SQLITE_LIBS & SQLITE_INCLUDES | more info: https://github.com/mapnik/mapnik/wiki/SQLite',\n    'jpeg':'JPEG C library | configure with JPEG_LIBS & JPEG_INCLUDES',\n    'tiff':'TIFF C library | configure with TIFF_LIBS & TIFF_INCLUDES',\n    'png':'PNG C library | configure with PNG_LIBS & PNG_INCLUDES',\n    'webp':'WEBP C library | configure with WEBP_LIBS & WEBP_INCLUDES',\n    'icuuc':'ICU C++ library | configure with ICU_LIBS & ICU_INCLUDES or use ICU_LIB_NAME to specify custom lib name  | more info: http://site.icu-project.org/',\n    'harfbuzz':'HarfBuzz text shaping library | configure with HB_LIBS & HB_INCLUDES',\n    'harfbuzz-min-version':'HarfBuzz >= %s (required for font-feature-settings support)' % HARFBUZZ_MIN_VERSION_STRING,\n    'z':'Z compression library | more info: http://www.zlib.net/',\n    'm':'Basic math library, part of C++ stlib',\n    'pkg-config':'pkg-config tool | more info: http://pkg-config.freedesktop.org',\n    'pg_config':'pg_config program | try setting PG_CONFIG SCons option',\n    'pq':'libpq library (postgres client) | try setting PG_CONFIG SCons option or configure with PG_LIBS & PG_INCLUDES',\n    'xml2-config':'xml2-config program | try setting XML2_CONFIG SCons option or avoid the need for xml2-config command by configuring with XML2_LIBS & XML2_INCLUDES',\n    'libxml2':'libxml2 library | try setting XML2_CONFIG SCons option to point to location of xml2-config program or configure with XML2_LIBS & XML2_INCLUDES',\n    'gdal-config':'gdal-config program | try setting GDAL_CONFIG SCons option',\n    'freetype-config':'freetype-config program | try setting FREETYPE_CONFIG SCons option or configure with FREETYPE_LIBS & FREETYPE_INCLUDES',\n    'freetype':'libfreetype library | try setting FREETYPE_CONFIG SCons option or configure with FREETYPE_LIBS & FREETYPE_INCLUDES',\n    'osm':'more info: https://github.com/mapnik/mapnik/wiki/OsmPlugin',\n    'boost_regex_icu':'libboost_regex built with optional ICU unicode support is needed for unicode regex support in mapnik.',\n    'sqlite_rtree':'The SQLite plugin requires libsqlite3 built with RTREE support (-DSQLITE_ENABLE_RTREE=1)',\n    'pgsql2sqlite_rtree':'The pgsql2sqlite program requires libsqlite3 built with RTREE support (-DSQLITE_ENABLE_RTREE=1)',\n    'PROJ_LIB':'The directory where proj stores its data files. Must exist for proj to work correctly',\n    'GDAL_DATA':'The directory where GDAL stores its data files. Must exist for GDAL to work correctly',\n    'ICU_DATA':'The directory where icu stores its data files. If ICU reports a path, it must exist. ICU can also be built without .dat files and in that case this path is empty'\n    }\n\n# Core plugin build configuration\n# opts.AddVariables still hardcoded however...\nPLUGINS = { # plugins with external dependencies\n            # configured by calling project, hence 'path':None\n            'postgis': {'default':True,'path':None,'inc':'libpq-fe.h','lib':'pq','lang':'C'},\n            'pgraster': {'default':True,'path':None,'inc':'libpq-fe.h','lib':'pq','lang':'C'},\n            'gdal':    {'default':True,'path':None,'inc':'gdal_priv.h','lib':'gdal','lang':'C++'},\n            'ogr':     {'default':True,'path':None,'inc':'ogrsf_frmts.h','lib':'gdal','lang':'C++'},\n            'sqlite':  {'default':True,'path':'SQLITE','inc':'sqlite3.h','lib':'sqlite3','lang':'C'},\n            # plugins without external dependencies requiring CheckLibWithHeader...\n            'shape':   {'default':True,'path':None,'inc':None,'lib':None,'lang':'C++'},\n            'csv':     {'default':True,'path':None,'inc':None,'lib':None,'lang':'C++'},\n            'raster':  {'default':True,'path':None,'inc':None,'lib':None,'lang':'C++'},\n            'geojson': {'default':True,'path':None,'inc':None,'lib':None,'lang':'C++'},\n            'geobuf':  {'default':True,'path':None,'inc':None,'lib':None,'lang':'C++'},\n            'topojson':{'default':True,'path':None,'inc':None,'lib':None,'lang':'C++'}\n            }\n\n\ndef init_environment(env):\n    env.Decider('MD5-timestamp')\n    env['ORIGIN'] = Literal('$ORIGIN')\n    env['ENV']['ORIGIN'] = '$ORIGIN'\n    if os.environ.get('RANLIB'):\n        env['RANLIB'] = os.environ['RANLIB']\n    if os.environ.get('AR'):\n        env['AR'] = os.environ['AR']\n\n#### SCons build options and initial setup ####\nenv = Environment(ENV=os.environ)\n\ninit_environment(env)\n\ndef fix_path(path):\n    return str(os.path.abspath(path))\n\ndef color_print(color,text,newline=True):\n    # 1 - red\n    # 2 - green\n    # 3 - yellow\n    # 4 - blue\n    text = \"\\033[9%sm%s\\033[0m\" % (color,text)\n    if not newline:\n        print (text, end='')\n    else:\n        print (text)\n\ndef regular_print(color,text,newline=True):\n    if not newline:\n        print (text, end = '')\n    else:\n        print (text)\n\ndef shell_command(cmd, *args, **kwargs):\n    \"\"\" Run command through shell.\n\n    `cmd` should be a valid, properly shell-quoted command.\n\n    Additional positional arguments, if provided, will each\n    be individually quoted as necessary and appended to `cmd`,\n    separated by spaces.\n\n    `logstream` optional keyword argument should be either:\n        - a file-like object, into which the command-line\n          and the command's STDERR output will be written; or\n        - None, in which case STDERR will go to DEVNULL.\n\n    Additional keyword arguments will be passed to `Popen`.\n\n    Returns a tuple `(result, output)` where:\n    `result` = True if the command completed successfully,\n               False otherwise\n    `output` = captured STDOUT with trailing whitespace removed\n    \"\"\"\n    # `cmd` itself is intentionally not wrapped in `shquote` here\n    # in order to support passing user-provided commands that may\n    # include arguments. For example:\n    #\n    #   ret, out = shell_command(env['CXX'], '--version')\n    #\n    # needs to work even if `env['CXX'] == 'ccache c++'`\n    #\n    if args:\n        cmdstr = ' '.join([cmd] + [shquote(a) for a in args])\n    else:\n        cmdstr = cmd\n    # redirect STDERR to `logstream` if provided\n    try:\n        logstream = kwargs.pop('logstream')\n    except KeyError:\n        logstream = None\n    else:\n        if logstream is not None:\n            logstream.write(cmdstr + '\\n')\n            kwargs['stderr'] = logstream\n        else:\n            kwargs['stderr'] = DEVNULL\n    # execute command and capture output\n    proc = Popen(cmdstr, shell=True, stdout=PIPE, **kwargs)\n    out, err = proc.communicate()\n    try:\n        outtext = out.decode(sys.stdout.encoding or 'UTF-8').rstrip()\n    except UnicodeDecodeError:\n        outtext = out.decode('UTF-8', errors='replace').rstrip()\n    if logstream is not None and outtext:\n        logstream.write('->\\t' + outtext.replace('\\n', '\\n->\\t') + '\\n')\n    return proc.returncode == 0, outtext\n\ndef silent_command(cmd, *args):\n    return shell_command(cmd, *args, stderr=DEVNULL)\n\ndef config_command(cmd, *args):\n    return shell_command(cmd, *args, logstream=conf.logstream)\n\ndef strip_first(string,find,replace=''):\n    if string.startswith(find):\n        return string.replace(find,replace,1)\n    return string\n\n# http://www.scons.org/wiki/InstallTargets\ndef create_uninstall_target(env, path, is_glob=False):\n    if 'uninstall' in COMMAND_LINE_TARGETS:\n        if is_glob:\n            all_files = Glob(path,strings=True)\n            for filei in all_files:\n                env.Command( \"uninstall-\"+filei, filei,\n                [\n                Delete(\"$SOURCE\"),\n                ])\n                env.Alias(\"uninstall\", \"uninstall-\"+filei)\n        else:\n            if os.path.exists(path):\n                env.Command( \"uninstall-\"+path, path,\n                [\n                Delete(\"$SOURCE\"),\n                ])\n                env.Alias(\"uninstall\", \"uninstall-\"+path)\n\ndef rm_path(item,set,_env):\n    for i in _env[set]:\n        if i.startswith(item):\n            _env[set].remove(i)\n\ndef sort_paths(items,priority):\n    \"\"\"Sort paths such that compiling and linking will globally prefer custom or local libs\n    over system libraries by fixing up the order libs are passed to the compiler and the linker.\n\n    Ideally preference could be by-target instead of global, but our SCons implementation\n    is not currently utilizing different SCons build env()'s as we should.\n\n    Overally the current approach within these scripts is to prepend paths of preference\n    and append all others, but this does not give enough control (particularly due to the\n    approach of assuming /usr/LIBSCHEMA and letting paths be parsed and added by pkg-config).\n\n    In effect /usr/lib is likely to come before /usr/local/lib which makes linking against\n    custom built icu or boost impossible when those libraries are available in both places.\n\n    Sorting using a priority list allows this to be controlled, and fine tuned.\n    \"\"\"\n\n    new = []\n    path_types = {'internal':[],'other':[],'frameworks':[],'user':[],'system':[]}\n    # parse types of paths into logical/meaningful groups\n    # based on commonly encountered lib directories on linux and osx\n    for i in items:\n        # internal paths for code kept inside\n        # the mapnik sources\n        if i.startswith('#'):\n            path_types['internal'].append(i)\n        # Mac OS X user installed frameworks\n        elif '/Library/Frameworks' in i:\n            path_types['frameworks'].append(i)\n        # various 'local' installs like /usr/local or /opt/local\n        elif 'local' in i or '/sw' in i:\n            if '/usr/local' in i:\n                path_types['user'].insert(0,i)\n            else:\n                path_types['user'].append(i)\n        # key system libs (likely others will fall into 'other')\n        elif '/usr/' in i or '/System' in i or i.startswith('/lib'):\n            path_types['system'].append(i)\n        # anything not yet matched...\n        # likely a combo of rare system lib paths and\n        # very custom user paths that should ideally be\n        # in 'user'\n        else:\n            path_types['other'].append(i)\n    # build up new list based on priority list\n    for path in priority:\n        if path in path_types:\n            dirs = path_types[path]\n            new.extend(dirs)\n            path_types.pop(path)\n        else:\n            color_print(1,'\\nSorry, \"%s\" is NOT a valid value for option \"LINK_PRIORITY\": values include: %s' % (path,','.join(path_types.keys())))\n            color_print(1,'\\tinternal: the local directory of the Mapnik sources (prefix #) (eg. used to link internal agg)')\n            color_print(1,'\\tframeworks: on osx the /Library/Frameworks directory')\n            color_print(1,'\\tuser: any path with \"local\" or \"/sw\" inside it')\n            color_print(1,'\\tsystem: any path not yet matched with \"/usr/\",\"/lib\", or \"/System\" (osx) inside it')\n            color_print(1,'\\tother: any paths you specified not matched by criteria used to parse the others')\n            color_print(1,'\\tother: any paths you specified not matched by criteria used to parse the others')\n            color_print(1,'The Default priority is: %s' % ','.join(DEFAULT_LINK_PRIORITY))\n            color_print(1,'Any priority groups not listed will be appended to the list at the end')\n            Exit(1)\n    # append remaining paths potentially not requested\n    # by any custom priority list defined by user\n    for k,v in path_types.items():\n        new.extend(v)\n    return new\n\ndef pretty_dep(dep):\n    pretty = pretty_dep_names.get(dep)\n    if pretty:\n        return '%s (%s)' % (dep,pretty)\n    elif 'boost' in dep:\n        return '%s (%s)' % (dep,'more info see: https://github.com/mapnik/mapnik/wiki/Mapnik-Installation & http://www.boost.org')\n    return dep\n\ndef pretty_deps(indent, deps):\n    return indent + indent.join(pretty_dep(dep) for dep in deps)\n\n\nDEFAULT_PLUGINS = []\nfor k,v in PLUGINS.items():\n   if v['default']:\n       DEFAULT_PLUGINS.append(k)\n\n# All of the following options may be modified at the command-line, for example:\n# `python scons/scons.py PREFIX=/opt`\nopts = Variables()\n\nopts.AddVariables(\n    # Compiler options\n    ('CXX', 'The C++ compiler to use to compile mapnik', DEFAULT_CXX),\n    ('CXX_STD', 'The C++ compiler standard (string).', DEFAULT_CXX_STD),\n    ('CC', 'The C compiler used for configure checks of C libs.', DEFAULT_CC),\n    ('CUSTOM_CXXFLAGS', 'Custom C++ flags, e.g. -I<include dir> if you have headers in a nonstandard directory <include dir>', ''),\n    ('CUSTOM_DEFINES', 'Custom Compiler DEFINES, e.g. -DENABLE_THIS', ''),\n    ('CUSTOM_CFLAGS', 'Custom C flags, e.g. -I<include dir> if you have headers in a nonstandard directory <include dir> (only used for configure checks)', ''),\n    ('CUSTOM_LDFLAGS', 'Custom linker flags, e.g. -L<lib dir> if you have libraries in a nonstandard directory <lib dir>', ''),\n    EnumVariable('LINKING', \"Set library format for libmapnik\",'shared', ['shared','static']),\n    EnumVariable('RUNTIME_LINK', \"Set preference for linking dependencies\",'shared', ['shared','static']),\n    EnumVariable('OPTIMIZATION','Set compiler optimization level','3', ['0','1','2','3','4','s']),\n    # Note: setting DEBUG=True will override any custom OPTIMIZATION level\n    BoolVariable('DEBUG', 'Compile a debug version of Mapnik', 'False'),\n    BoolVariable('COVERAGE', 'Compile a libmapnik and plugins with --coverage', 'False'),\n    ListVariable('INPUT_PLUGINS','Input drivers to include',DEFAULT_PLUGINS,PLUGINS.keys()),\n    ('WARNING_CXXFLAGS', 'Compiler flags you can set to reduce warning levels which are placed after -Wall.', ''),\n\n    # SCons build behavior options\n    ('HOST', 'Set the target host for cross compiling', ''),\n    ('CONFIG', \"The path to the python file in which to save user configuration options. Currently : '%s'\" % SCONS_LOCAL_CONFIG,SCONS_LOCAL_CONFIG),\n    BoolVariable('USE_CONFIG', \"Use SCons user '%s' file (will also write variables after successful configuration)\", 'True'),\n    BoolVariable('NO_ATEXIT', 'Will prevent Singletons from being deleted atexit of main thread', 'False'),\n    BoolVariable('NO_DLCLOSE', 'Will prevent plugins from being unloaded', 'False'),\n    BoolVariable('ENABLE_GLIBC_WORKAROUND', \"Workaround known GLIBC symbol exports to allow building against libstdc++-4.8 without binaries needing throw_out_of_range_fmt\", 'False'),\n    # http://www.scons.org/wiki/GoFastButton\n    # http://stackoverflow.com/questions/1318863/how-to-optimize-an-scons-script\n    BoolVariable('PRIORITIZE_LINKING', 'Sort list of lib and inc directories to ensure preferential compiling and linking (useful when duplicate libs)', 'True'),\n    ('LINK_PRIORITY','Priority list in which to sort library and include paths (default order is internal, other, frameworks, user, then system - see source of `sort_paths` function for more detail)',','.join(DEFAULT_LINK_PRIORITY)),\n\n    # Install Variables\n    ('PREFIX', 'The install path \"prefix\"', '/usr/local'),\n    ('LIBDIR_SCHEMA', 'The library sub-directory appended to the \"prefix\", sometimes lib64 on 64bit linux systems', LIBDIR_SCHEMA_DEFAULT),\n    ('DESTDIR', 'The root directory to install into. Useful mainly for binary package building', '/'),\n    ('PATH', 'A custom path (or multiple paths divided by \":\") to append to the $PATH env to prioritize usage of command line programs (if multiple are present on the system)', ''),\n    ('PATH_REMOVE', 'A path prefix to exclude from all known command and compile paths (create multiple excludes separated by :)', ''),\n    ('PATH_REPLACE', 'Two path prefixes (divided with a :) to search/replace from all known command and compile paths', ''),\n    ('MAPNIK_NAME', 'Name of library', 'mapnik'),\n\n    # Boost variables\n    # default is '/usr/include', see FindBoost method below\n    ('BOOST_INCLUDES', 'Search path for boost include files', '',False),\n    # default is '/usr/' + LIBDIR_SCHEMA, see FindBoost method below\n    ('BOOST_LIBS', 'Search path for boost library files', '',False),\n    ('BOOST_TOOLKIT','Specify boost toolkit, e.g., gcc41.','',False),\n    ('BOOST_ABI', 'Specify boost ABI, e.g., d.','',False),\n    ('BOOST_VERSION','Specify boost version, e.g., 1_35.','',False),\n\n    # Variables for required dependencies\n    ('FREETYPE_CONFIG', 'The path to the freetype-config executable.', 'freetype-config'),\n    ('XML2_CONFIG', 'The path to the xml2-config executable.', 'xml2-config'),\n    PathVariable('ICU_INCLUDES', 'Search path for ICU include files', ICU_INCLUDES_DEFAULT, PathVariable.PathAccept),\n    PathVariable('ICU_LIBS','Search path for ICU include files',ICU_LIBS_DEFAULT + LIBDIR_SCHEMA_DEFAULT, PathVariable.PathAccept),\n    ('ICU_LIB_NAME', 'The library name for icu (such as icuuc, sicuuc, or icucore)', 'icuuc', PathVariable.PathAccept),\n    PathVariable('HB_INCLUDES', 'Search path for HarfBuzz include files', '/usr/include', PathVariable.PathAccept),\n    PathVariable('HB_LIBS','Search path for HarfBuzz include files','/usr/' + LIBDIR_SCHEMA_DEFAULT, PathVariable.PathAccept),\n    BoolVariable('PNG', 'Build Mapnik with PNG read and write support', 'True'),\n    PathVariable('PNG_INCLUDES', 'Search path for libpng include files', '/usr/include', PathVariable.PathAccept),\n    PathVariable('PNG_LIBS','Search path for libpng library files','/usr/' + LIBDIR_SCHEMA_DEFAULT, PathVariable.PathAccept),\n    BoolVariable('JPEG', 'Build Mapnik with JPEG read and write support', 'True'),\n    PathVariable('JPEG_INCLUDES', 'Search path for libjpeg include files', '/usr/include', PathVariable.PathAccept),\n    PathVariable('JPEG_LIBS', 'Search path for libjpeg library files', '/usr/' + LIBDIR_SCHEMA_DEFAULT, PathVariable.PathAccept),\n    BoolVariable('TIFF', 'Build Mapnik with TIFF read and write support', 'True'),\n    PathVariable('TIFF_INCLUDES', 'Search path for libtiff include files', '/usr/include', PathVariable.PathAccept),\n    PathVariable('TIFF_LIBS', 'Search path for libtiff library files', '/usr/' + LIBDIR_SCHEMA_DEFAULT, PathVariable.PathAccept),\n    BoolVariable('WEBP', 'Build Mapnik with WEBP read', 'True'),\n    PathVariable('WEBP_INCLUDES', 'Search path for libwebp include files', '/usr/include', PathVariable.PathAccept),\n    PathVariable('WEBP_LIBS','Search path for libwebp library files','/usr/' + LIBDIR_SCHEMA_DEFAULT, PathVariable.PathAccept),\n    BoolVariable('PROJ', 'Build Mapnik with proj support to enable transformations between many different projections', 'True'),\n    PathVariable('PROJ_INCLUDES', 'Search path for libproj include files', '/usr/include', PathVariable.PathAccept),\n    PathVariable('PROJ_LIBS', 'Search path for libproj library files', '/usr/' + LIBDIR_SCHEMA_DEFAULT, PathVariable.PathAccept),\n    ('PG_INCLUDES', 'Search path for libpq (postgres client) include files', ''),\n    ('PG_LIBS', 'Search path for libpq (postgres client) library files', ''),\n    ('FREETYPE_INCLUDES', 'Search path for Freetype include files', ''),\n    ('FREETYPE_LIBS', 'Search path for Freetype library files', ''),\n    ('XML2_INCLUDES', 'Search path for libxml2 include files', ''),\n    ('XML2_LIBS', 'Search path for libxml2 library files', ''),\n    ('PKG_CONFIG_PATH', 'Use this path to point pkg-config to .pc files instead of the PKG_CONFIG_PATH environment setting',''),\n\n    # Variables affecting rendering back-ends\n\n    BoolVariable('GRID_RENDERER', 'build support for native grid renderer', 'True'),\n    BoolVariable('SVG_RENDERER', 'build support for native svg renderer', 'False'),\n    BoolVariable('CPP_TESTS', 'Compile the C++ tests', 'True'),\n    BoolVariable('BENCHMARK', 'Compile the C++ benchmark scripts', 'False'),\n\n    # Variables for optional dependencies\n    # Note: cairo and and pycairo are optional but configured automatically through pkg-config\n    # Therefore, we use a single boolean for whether to attempt to build cairo support.\n    BoolVariable('CAIRO', 'Attempt to build with Cairo rendering support', 'True'),\n    PathVariable('CAIRO_INCLUDES', 'Search path for cairo include files', '',PathVariable.PathAccept),\n    PathVariable('CAIRO_LIBS', 'Search path for cairo library files','',PathVariable.PathAccept),\n    ('GDAL_CONFIG', 'The path to the gdal-config executable for finding gdal and ogr details.', 'gdal-config'),\n    ('PG_CONFIG', 'The path to the pg_config executable.', 'pg_config'),\n    PathVariable('OCCI_INCLUDES', 'Search path for OCCI include files', '/usr/lib/oracle/10.2.0.3/client/include', PathVariable.PathAccept),\n    PathVariable('OCCI_LIBS', 'Search path for OCCI library files', '/usr/lib/oracle/10.2.0.3/client/'+ LIBDIR_SCHEMA_DEFAULT, PathVariable.PathAccept),\n    PathVariable('SQLITE_INCLUDES', 'Search path for SQLITE include files', '/usr/include/', PathVariable.PathAccept),\n    PathVariable('SQLITE_LIBS', 'Search path for SQLITE library files', '/usr/' + LIBDIR_SCHEMA_DEFAULT, PathVariable.PathAccept),\n    PathVariable('RASTERLITE_INCLUDES', 'Search path for RASTERLITE include files', '/usr/include/', PathVariable.PathAccept),\n    PathVariable('RASTERLITE_LIBS', 'Search path for RASTERLITE library files', '/usr/' + LIBDIR_SCHEMA_DEFAULT, PathVariable.PathAccept),\n\n    # Variables for logging and statistics\n    BoolVariable('ENABLE_LOG', 'Enable logging, which is enabled by default when building in *debug*', 'False'),\n    BoolVariable('ENABLE_STATS', 'Enable global statistics during map processing', 'False'),\n    ('DEFAULT_LOG_SEVERITY', 'The default severity of the logger (eg. ' + ', '.join(severities) + ')', 'error'),\n\n    # Plugin linking\n    EnumVariable('PLUGIN_LINKING', \"Set plugin linking with libmapnik\", 'shared', ['shared','static']),\n\n    # Other variables\n    BoolVariable('MEMORY_MAPPED_FILE', 'Utilize memory-mapped files in Shapefile Plugin (higher memory usage, better performance)', 'True'),\n    ('SYSTEM_FONTS','Provide location for python bindings to register fonts (if provided then the bundled DejaVu fonts are not installed)',''),\n    ('LIB_DIR_NAME','Name to use for the subfolder beside libmapnik where fonts and plugins are installed','mapnik'),\n    PathVariable('PYTHON','Full path to Python executable used to build bindings', sys.executable),\n    BoolVariable('FULL_LIB_PATH', 'Embed the full and absolute path to libmapnik when linking (\"install_name\" on OS X/rpath on Linux)', 'True'),\n    BoolVariable('ENABLE_SONAME', 'Embed a soname in libmapnik on Linux', 'True'),\n    EnumVariable('THREADING','Set threading support','multi', ['multi','single']),\n    EnumVariable('XMLPARSER','Set xml parser','ptree', ['libxml2','ptree']),\n    BoolVariable('DEMO', 'Compile demo c++ application', 'True'),\n    BoolVariable('PGSQL2SQLITE', 'Compile and install a utility to convert postgres tables to sqlite', 'False'),\n    BoolVariable('SHAPEINDEX', 'Compile and install a utility to generate shapefile indexes in the custom format (.index) Mapnik supports', 'True'),\n    BoolVariable('MAPNIK_INDEX', 'Compile and install a utility to generate spatial indexes for CSV and GeoJSON in the custom format (.index) Mapnik supports', 'True'),\n    BoolVariable('SVG2PNG', 'Compile and install a utility to generate render an svg file to a png on the command line', 'False'),\n    BoolVariable('MAPNIK_RENDER', 'Compile and install a utility to render a map to an image', 'True'),\n    BoolVariable('COLOR_PRINT', 'Print build status information in color', 'True'),\n    BoolVariable('BIGINT', 'Compile support for 64-bit integers in mapnik::value', 'True'),\n    BoolVariable('USE_BOOST_FILESYSTEM','Use boost::filesytem even if `std::filesystem` is available (since c++17)', 'False'),\n    BoolVariable('QUIET', 'Reduce build verbosity', 'False'),\n)\n\n# variables to pickle after successful configure step\n# these include all scons core variables as well as custom\n# env variables needed in SConscript files\npickle_store = [# Scons internal variables\n        'CC', # compiler user to check if c deps compile during configure\n        'CXX', # C++ compiler to compile mapnik\n        'CXX_STD', # C++ standard e.g 17 (as in -std=c++17)\n        'CFLAGS',\n        'CPPDEFINES',\n        'CPPFLAGS', # c preprocessor flags\n        'CPPPATH',\n        'CXXFLAGS', # C++ flags built up during configure\n        'LIBPATH',\n        'LIBS',\n        'LINKFLAGS',\n        'RPATH',\n        'CUSTOM_LDFLAGS', # user submitted\n        'CUSTOM_DEFINES', # user submitted\n        'CUSTOM_CXXFLAGS', # user submitted\n        'CUSTOM_CFLAGS', # user submitted\n        'MAPNIK_LIB_NAME',\n        'LINK',\n        'RUNTIME_LINK',\n        # Mapnik's SConstruct build variables\n        'PLUGINS',\n        'ABI_VERSION',\n        'MAPNIK_VERSION_STRING',\n        'MAPNIK_VERSION',\n        'PLATFORM',\n        'BOOST_ABI',\n        'BOOST_APPEND',\n        'LIBDIR_SCHEMA',\n        'REQUESTED_PLUGINS',\n        'COLOR_PRINT',\n        'HAS_CAIRO',\n        'MAPNIK_HAS_DLFCN',\n        'HAS_PYCAIRO',\n        'PYCAIRO_PATHS',\n        'HAS_LIBXML2',\n        'PKG_CONFIG_PATH',\n        'PATH',\n        'PATH_REMOVE',\n        'PATH_REPLACE',\n        'MAPNIK_LIB_DIR',\n        'MAPNIK_LIB_DIR_DEST',\n        'INSTALL_PREFIX',\n        'MAPNIK_INPUT_PLUGINS',\n        'MAPNIK_INPUT_PLUGINS_DEST',\n        'MAPNIK_FONTS',\n        'MAPNIK_FONTS_DEST',\n        'MAPNIK_BUNDLED_SHARE_DIRECTORY',\n        'MAPNIK_LIB_BASE',\n        'MAPNIK_LIB_BASE_DEST',\n        'EXTRA_FREETYPE_LIBS',\n        'LIBMAPNIK_CPPATHS',\n        'LIBMAPNIK_DEFINES',\n        'LIBMAPNIK_CXXFLAGS',\n        'CAIRO_LIBPATHS',\n        'CAIRO_ALL_LIBS',\n        'CAIRO_CPPPATHS',\n        'GRID_RENDERER',\n        'SVG_RENDERER',\n        'SQLITE_LINKFLAGS',\n        'BOOST_LIB_VERSION_FROM_HEADER',\n        'BIGINT',\n        'USE_BOOST_FILESYSTEM',\n        'HOST',\n        'QUERIED_GDAL_DATA',\n        'QUERIED_ICU_DATA',\n        'QUERIED_PROJ_LIB',\n        'QUIET'\n        ]\n\n# Add all other user configurable options to pickle pickle_store\n# We add here more options than are needed for the build stage\n# but helpful so that scons -h shows the exact cached options\nfor opt in opts.options:\n    if opt.key not in pickle_store:\n        pickle_store.append(opt.key)\n\ndef rollback_option(env, variable):\n    global opts\n    for item in opts.options:\n        if item.key == variable:\n            env[variable] = item.default\n\n# Method of adding configure behavior to Scons adapted from:\n# http://freeorion.svn.sourceforge.net/svnroot/freeorion/trunk/FreeOrion/SConstruct\npreconfigured = False\nforce_configure = False\ncommand_line_args = sys.argv[1:]\n\nHELP_REQUESTED = False\n\nif ('-h' in command_line_args) or ('--help' in command_line_args):\n    HELP_REQUESTED = True\n\nif 'configure' in command_line_args and not HELP_REQUESTED:\n    force_configure = True\nelif HELP_REQUESTED:\n    # to ensure config gets skipped when help is requested\n    preconfigured = True\n\n# need no-op for clean on fresh checkout\n# https://github.com/mapnik/mapnik/issues/2112\nif not os.path.exists(SCONS_LOCAL_LOG) and not os.path.exists(SCONS_CONFIGURE_CACHE) \\\n  and ('-c' in command_line_args or '--clean' in command_line_args):\n    print ('all good: nothing to clean, but you might want to run \"make distclean\"')\n    Exit(0)\n\n# initially populate environment with defaults and any possible custom arguments\nopts.Update(env)\n\n# if we are not configuring overwrite environment with pickled settings\nif not force_configure:\n    if os.path.exists(SCONS_CONFIGURE_CACHE):\n        try:\n            pickled_environment = open(SCONS_CONFIGURE_CACHE, 'rb')\n            pickled_values = pickle.load(pickled_environment)\n            for key, value in pickled_values.items():\n                env[key] = value\n            preconfigured = True\n        except:\n            preconfigured = False\n    else:\n        preconfigured = False\n\n# check for missing keys in pickled settings\n# which can occur when keys are added or changed between\n# rebuilds, e.g. for folks following trunk\nfor opt in pickle_store:\n    if not opt in env:\n        #print 'missing opt', opt\n        preconfigured = False\n\n# if custom arguments are supplied make sure to accept them\nif opts.args:\n    # since we have custom arguments update environment with all opts to\n    # make sure to absorb the custom ones\n    opts.Update(env)\n    # now since we've got custom arguments we'll disregard any\n    # pickled environment and force another configuration\n    preconfigured = False\n\nelif preconfigured:\n    if not HELP_REQUESTED:\n        color_print(4,'Using previous successful configuration...')\n        color_print(4,'Re-configure by running \"python scons/scons.py configure\".')\n\nif 'COLOR_PRINT' in env and env['COLOR_PRINT'] == False:\n    color_print = regular_print\n\nif sys.platform == \"win32\":\n    color_print = regular_print\n\ncolor_print(4,'\\nWelcome to Mapnik...\\n')\n\n#### Custom Configure Checks ###\n\ndef prioritize_paths(context, silent=True):\n    env = context.env\n    prefs = env['LINK_PRIORITY'].split(',')\n    if not silent:\n        context.Message( 'Sorting lib and inc compiler paths...')\n    env['LIBPATH'] = sort_paths(env['LIBPATH'], prefs)\n    env['CPPPATH'] = sort_paths(env['CPPPATH'], prefs)\n    if silent:\n        context.did_show_result=1\n    ret = context.Result( True )\n    return ret\n\ndef CheckPKGConfig(context, version):\n    context.Message( 'Checking for pkg-config... ' )\n    context.sconf.cached = False\n    ret, _ = config_command('pkg-config --atleast-pkgconfig-version', version)\n    context.Result( ret )\n    return ret\n\ndef CheckPKG(context, name):\n    context.Message( 'Checking for %s... ' % name )\n    context.sconf.cached = False\n    ret, _ = config_command('pkg-config --exists', name)\n    context.Result( ret )\n    return ret\n\ndef CheckPKGVersion(context, name, version):\n    context.Message( 'Checking for at least version %s for %s... ' % (version,name) )\n    context.sconf.cached = False\n    ret, _ = config_command('pkg-config --atleast-version', version, name)\n    context.Result( ret )\n    return ret\n\ndef parse_config(context, config, checks='--libs --cflags'):\n    env = context.env\n    tool = config.lower().replace('_','-')\n    toolname = tool\n    if config in ('GDAL_CONFIG'):\n        toolname += ' %s' % checks\n    context.Message( 'Checking for %s... ' % toolname)\n    context.sconf.cached = False\n    cmd = '%s %s' % (env[config], checks)\n    ret, value = config_command(cmd)\n    parsed = False\n    if ret:\n        try:\n            if 'gdal-config' in cmd:\n                env.ParseConfig(cmd)\n                # hack for potential -framework GDAL syntax\n                # which will not end up being added to env['LIBS']\n                # and thus breaks knowledge below that gdal worked\n                # TODO - upgrade our scons logic to support Framework linking\n                if env['PLATFORM'] == 'Darwin':\n                    if value and '-framework GDAL' in value:\n                        env['LIBS'].append('gdal')\n                        if os.path.exists('/Library/Frameworks/GDAL.framework/unix/lib'):\n                            env['LIBPATH'].insert(0,'/Library/Frameworks/GDAL.framework/unix/lib')\n                    if 'GDAL' in env.get('FRAMEWORKS',[]):\n                        env[\"FRAMEWORKS\"].remove(\"GDAL\")\n            else:\n                env.ParseConfig(cmd)\n            parsed = True\n        except OSError as e:\n            ret = False\n            print (' (xml2-config not found!)')\n    if not parsed:\n        if config in ('GDAL_CONFIG'):\n            # optional deps...\n            if tool not in env['SKIPPED_DEPS']:\n                env['SKIPPED_DEPS'].append(tool)\n            rollback_option(env, config)\n        else: # freetype and libxml2, not optional\n            if tool not in env['MISSING_DEPS']:\n                env['MISSING_DEPS'].append(tool)\n    context.Result( ret )\n    return ret\n\ndef get_pkg_lib(context, config, lib):\n    libpattern = r'-l([^\\s]*)'\n    libname = None\n    env = context.env\n    context.Message( 'Checking for name of %s library... ' % lib)\n    context.sconf.cached = False\n    ret, value = config_command(env[config], '--libs')\n    parsed = False\n    if ret:\n        try:\n            if ' ' in value:\n                parts = value.split(' ')\n                if len(parts) > 1:\n                    value = parts[1]\n            libnames = re.findall(libpattern, value)\n            if libnames:\n                libname = libnames[0]\n            else:\n                # osx 1.8 install gives '-framework GDAL'\n                libname = 'gdal'\n        except Exception as e:\n            ret = False\n            print (' unable to determine library name:# {0!s}'.format(e))\n            return None\n    context.Result( libname )\n    return libname\n\ndef parse_pg_config(context, config):\n    # TODO - leverage `LDFLAGS_SL` if RUNTIME_LINK==static\n    env = context.env\n    tool = config.lower()\n    context.Message( 'Checking for %s... ' % tool)\n    context.sconf.cached = False\n    ret, lib_path = config_command(env[config], '--libdir')\n    ret, inc_path = config_command(env[config], '--includedir')\n    if ret:\n        env.AppendUnique(CPPPATH = fix_path(inc_path))\n        env.AppendUnique(LIBPATH = fix_path(lib_path))\n        lpq = env['PLUGINS']['postgis']['lib']\n        env.Append(LIBS = lpq)\n    else:\n        env['SKIPPED_DEPS'].append(tool)\n        rollback_option(env, config)\n    context.Result( ret )\n    return ret\n\ndef ogr_enabled(context):\n    env = context.env\n    context.Message( 'Checking if gdal is ogr enabled... ')\n    context.sconf.cached = False\n    ret, out = config_command(env['GDAL_CONFIG'], '--ogr-enabled')\n    if ret:\n        ret = (out == 'yes')\n    if not ret:\n        if 'ogr' not in env['SKIPPED_DEPS']:\n            env['SKIPPED_DEPS'].append('ogr')\n    context.Result( ret )\n    return ret\n\ndef FindBoost(context, prefixes, thread_flag):\n    \"\"\"Routine to auto-find boost header dir, lib dir, and library naming structure.\n\n    \"\"\"\n    context.Message( 'Searching for boost libs and headers... ' )\n    env = context.env\n\n    BOOST_LIB_DIR = None\n    BOOST_INCLUDE_DIR = None\n    BOOST_APPEND = None\n    env['BOOST_APPEND'] = str()\n    search_lib = 'libboost_filesystem'\n\n    # note: must call normpath to strip trailing slash otherwise dirname\n    # does not remove 'lib' and 'include'\n    prefixes.insert(0,os.path.dirname(os.path.normpath(env['BOOST_INCLUDES'])))\n    prefixes.insert(0,os.path.dirname(os.path.normpath(env['BOOST_LIBS'])))\n    for searchDir in prefixes:\n        libItems = glob(os.path.join(searchDir, env['LIBDIR_SCHEMA'], '%s*.*' % search_lib))\n        if not libItems:\n            libItems = glob(os.path.join(searchDir, 'lib/%s*.*' % search_lib))\n        incItems = glob(os.path.join(searchDir, 'include/boost*/'))\n        if len(libItems) >= 1 and len(incItems) >= 1:\n            BOOST_LIB_DIR = os.path.dirname(libItems[0])\n            BOOST_INCLUDE_DIR = incItems[0].rstrip('boost/')\n            shortest_lib_name = min(libItems, key=len)\n            match = re.search(r'%s(.*)\\..*' % search_lib, shortest_lib_name)\n            if hasattr(match,'groups'):\n                BOOST_APPEND = match.groups()[0]\n            break\n\n    msg = str()\n\n    if BOOST_LIB_DIR:\n        msg += '\\nFound boost libs: %s' % BOOST_LIB_DIR\n        env['BOOST_LIBS'] = BOOST_LIB_DIR\n    elif not env['BOOST_LIBS']:\n        env['BOOST_LIBS'] = '/usr/' + env['LIBDIR_SCHEMA']\n        msg += '\\nUsing default boost lib dir: %s' % env['BOOST_LIBS']\n    else:\n        msg += '\\nUsing boost lib dir: %s' % env['BOOST_LIBS']\n\n    if BOOST_INCLUDE_DIR:\n        msg += '\\nFound boost headers: %s' % BOOST_INCLUDE_DIR\n        env['BOOST_INCLUDES'] = BOOST_INCLUDE_DIR\n    elif not env['BOOST_INCLUDES']:\n        env['BOOST_INCLUDES'] = '/usr/include'\n        msg += '\\nUsing default boost include dir: %s' % env['BOOST_INCLUDES']\n    else:\n        msg += '\\nUsing boost include dir: %s' % env['BOOST_INCLUDES']\n\n    if not env['BOOST_TOOLKIT'] and not env['BOOST_ABI'] and not env['BOOST_VERSION']:\n        if BOOST_APPEND:\n            msg += '\\nFound boost lib name extension: %s' % BOOST_APPEND\n            env['BOOST_APPEND'] = BOOST_APPEND\n    else:\n        # Creating BOOST_APPEND according to the Boost library naming order,\n        # which goes <toolset>-<threading>-<abi>-<version>. See:\n        #  http://www.boost.org/doc/libs/1_35_0/more/getting_started/unix-variants.html#library-naming\n        append_params = ['']\n        if env['BOOST_TOOLKIT']: append_params.append(env['BOOST_TOOLKIT'])\n        if thread_flag: append_params.append(thread_flag)\n        if env['BOOST_ABI']: append_params.append(env['BOOST_ABI'])\n        if env['BOOST_VERSION']: append_params.append(env['BOOST_VERSION'])\n\n        # Constructing the BOOST_APPEND setting that will be used to find the\n        # Boost libraries.\n        if len(append_params) > 1:\n            env['BOOST_APPEND'] = '-'.join(append_params)\n        msg += '\\nFound boost lib name extension: %s' % env['BOOST_APPEND']\n\n    env.AppendUnique(CPPPATH = fix_path(env['BOOST_INCLUDES']))\n    env.AppendUnique(LIBPATH = fix_path(env['BOOST_LIBS']))\n    if env['COLOR_PRINT']:\n        msg = \"\\033[94m%s\\033[0m\" % (msg)\n    ret = context.Result(msg)\n    return ret\n\ndef CheckBoost(context, version, silent=False):\n    # Boost versions are in format major.minor.subminor\n    v_arr = version.split(\".\")\n    version_n = 0\n    if len(v_arr) > 0:\n        version_n += int(v_arr[0])*100000\n    if len(v_arr) > 1:\n        version_n += int(v_arr[1])*100\n    if len(v_arr) > 2:\n        version_n += int(v_arr[2])\n\n    if not silent:\n        context.Message('Checking for Boost version >= %s... ' % (version))\n    ret = context.TryRun(\"\"\"\n\n#include <boost/version.hpp>\n\nint main()\n{\n    return BOOST_VERSION >= %d ? 0 : 1;\n}\n\n\"\"\" % version_n, '.cpp')[0]\n    if silent:\n        context.did_show_result=1\n    context.Result(ret)\n    return ret\n\ndef CheckIcuData(context, silent=False):\n\n    if not silent:\n        context.Message('Checking for ICU data directory...')\n    ret, out = context.TryRun(\"\"\"\n\n#include <unicode/putil.h>\n#include <iostream>\n\nint main() {\n    std::string result = u_getDataDirectory();\n    std::cout << result;\n    if (result.empty()) {\n        return -1;\n    }\n    return 0;\n}\n\n\"\"\", '.cpp')\n    if silent:\n        context.did_show_result=1\n    if ret:\n        value = out.strip()\n        context.Result('u_getDataDirectory returned %s' % value)\n        return value\n    else:\n        ret, value = config_command('icu-config --icudatadir')\n        if ret:\n            context.Result('icu-config returned %s' % value)\n            return value\n        else:\n            context.Result('Failed to detect (mapnik-config will have null value)')\n            return ''\n\n\ndef CheckGdalData(context, silent=False):\n    env = context.env\n    if not silent:\n        context.Message('Checking for GDAL data directory... ')\n    context.sconf.cached = False\n    ret, out = config_command(env['GDAL_CONFIG'], '--datadir')\n    value = out.strip()\n    if silent:\n        context.did_show_result=1\n    if ret:\n        context.Result('%s returned %s' % (env['GDAL_CONFIG'], value))\n    else:\n        context.Result('Failed to detect (mapnik-config will have null value)')\n    return value\n\ndef proj_version(context):\n    context.Message('Checking for Proj version >=%s...' % PROJ_MIN_VERSION_STRING)\n    ret, out = context.TryRun(\"\"\"\n#include \"proj.h\"\n#include <stdio.h>\n#define PROJ_VERSION_ATLEAST(major,minor,micro) \\\n        ((major)*10000+(minor)*100+(micro) <= \\\n         PROJ_VERSION_MAJOR*10000+PROJ_VERSION_MINOR*100+PROJ_VERSION_PATCH)\nint main()\n{\n    printf(\"%d;%d.%d.%d\", PROJ_VERSION_ATLEAST{min-version}, PROJ_VERSION_MAJOR, PROJ_VERSION_MINOR, PROJ_VERSION_PATCH);\n    return 0;\n}\n\"\"\".replace(\"{min-version}\", str(PROJ_MIN_VERSION)),'.c')\n    if not ret:\n        context.Result('error (could not get version from proj.h)')\n    else:\n        ok_str, found_version_str = out.strip().split(';', 1)\n        major,minor,patch = found_version_str.split('.')\n        ret = int(ok_str), int(major)*10000+int(minor)*100+int(patch)\n        if ret:\n            context.Result('yes (found Proj %s)' % found_version_str)\n        else:\n            context.Result('no (found Proj %s)' % found_version_str)\n    return ret\n\ndef CheckProjData(context, silent=False):\n    if not silent:\n        context.Message('Checking for PROJ_LIB directory...')\n    result = run(['pkg-config', 'proj', '--variable=datadir'], stdout=PIPE)\n    value = result.stdout.decode('utf-8').strip()\n\n    if silent:\n        context.did_show_result=1\n    if os.path.exists(value):\n        context.Result('`pkg-config proj --variable=datadir` returned:\\n%s ' % value)\n    else:\n        value = None\n        context.Result('Failed to detect (mapnik-config will have null value)')\n    return value\n\ndef CheckCairoHasFreetype(context, silent=False):\n    if not silent:\n        context.Message('Checking for cairo freetype font support ... ')\n    context.env.AppendUnique(CPPPATH=copy(env['CAIRO_CPPPATHS']))\n\n    ret, out = context.TryRun(\"\"\"\n\n#include <cairo-features.h>\n\nint main()\n{\n    #ifdef CAIRO_HAS_FT_FONT\n    return 0;\n    #else\n    return 1;\n    #endif\n}\n\n\"\"\", '.cpp')\n    if silent:\n        context.did_show_result=1\n    context.Result(ret)\n    for item in env['CAIRO_CPPPATHS']:\n        rm_path(item,'CPPPATH',context.env)\n    return ret\n\ndef CheckHasDlfcn(context, silent=False):\n    if not silent:\n        context.Message('Checking for dlfcn.h support ... ')\n    ret = context.TryCompile(\"\"\"\n\n#include <dlfcn.h>\n\nint main()\n{\n    return 0;\n}\n\n\"\"\", '.cpp')\n    if silent:\n        context.did_show_result=1\n    context.Result(ret)\n    return ret\n\ndef GetBoostLibVersion(context):\n    ret, out = context.TryRun(\"\"\"\n\n#include <boost/version.hpp>\n#include <iostream>\n\nint main()\n{\n\nstd::cout << BOOST_LIB_VERSION << std::endl;\nreturn 0;\n}\n\n\"\"\", '.cpp')\n    # hack to avoid printed output\n    context.did_show_result=1\n    context.Result(ret)\n    return out.strip()\n\ndef CheckBoostScopedEnum(context, silent=False):\n    if not silent:\n        context.Message('Checking whether Boost was compiled with C++11 scoped enums ... ')\n    ret = context.TryLink(\"\"\"\n#include <boost/filesystem.hpp>\n\nint main()\n{\n    boost::filesystem::path a, b;\n    boost::filesystem::copy_file(a, b);\n    return 0;\n}\n\"\"\", '.cpp')\n    if silent:\n        context.did_show_result=1\n    context.Result(ret)\n    return ret\n\ndef icu_at_least(context, min_version_str):\n    context.Message('Checking for ICU version >= %s... ' % min_version_str)\n    ret, out = context.TryRun(\"\"\"\n\n#include <unicode/uversion.h>\n#include <iostream>\n\nint main()\n{\n    std::cout << U_ICU_VERSION_MAJOR_NUM << \".\" << U_ICU_VERSION_MINOR_NUM << std::endl;\n    return 0;\n}\n\n\"\"\", '.cpp')\n    try:\n        found_version_str = out.strip()\n        found_version = tuple(map(int, found_version_str.split('.')))\n        min_version = tuple(map(int, min_version_str.split('.')))\n    except:\n        context.Result('error (could not get version from unicode/uversion.h)')\n        return False\n\n    if found_version >= min_version:\n        context.Result('yes (found ICU %s)' % found_version_str)\n        return True\n\n    context.Result('no (found ICU %s)' % found_version_str)\n    return False\n\ndef harfbuzz_version(context):\n    context.Message('Checking for HarfBuzz version >= %s... ' % HARFBUZZ_MIN_VERSION_STRING)\n    ret, out = context.TryRun(\"\"\"\n\n#include \"harfbuzz/hb.h\"\n#include <iostream>\n\n#ifndef HB_VERSION_ATLEAST\n#define HB_VERSION_ATLEAST(...) 0\n#endif\n\nint main()\n{\n    std::cout << HB_VERSION_ATLEAST(%s, %s, %s) << \";\" << HB_VERSION_STRING;\n    return 0;\n}\n\n\"\"\" % HARFBUZZ_MIN_VERSION, '.cpp')\n    if not ret:\n        context.Result('error (could not get version from hb.h)')\n    else:\n        ok_str, found_version_str = out.strip().split(';', 1)\n        ret = int(ok_str)\n        if ret:\n            context.Result('yes (found HarfBuzz %s)' % found_version_str)\n        else:\n            context.Result('no (found HarfBuzz %s)' % found_version_str)\n    return ret\n\ndef harfbuzz_with_freetype_support(context):\n    context.Message('Checking for HarfBuzz with freetype support... ')\n    ret, out = context.TryRun(\"\"\"\n\n#include \"harfbuzz/hb-ft.h\"\n#include <iostream>\n\nint main()\n{\n    return 0;\n}\n\n\"\"\", '.cpp')\n    context.Result(ret)\n    return ret\n\ndef boost_regex_has_icu(context):\n    context.env.Append(LIBS='icui18n')\n    if env['RUNTIME_LINK'] == 'static':\n        # re-order icu libs to ensure linux linker is happy\n        for lib_name in ['icui18n',env['ICU_LIB_NAME'],'icudata']:\n            if lib_name in context.env['LIBS']:\n                context.env['LIBS'].remove(lib_name)\n            context.env.Append(LIBS=lib_name)\n    context.Message('Checking if boost_regex was built with ICU unicode support... ')\n    ret, out = context.TryRun(\"\"\"\n\n#include <boost/regex/icu.hpp>\n#include <unicode/unistr.h>\n\nint main()\n{\n    U_NAMESPACE_QUALIFIER UnicodeString ustr;\n    try {\n        boost::u32regex pattern = boost::make_u32regex(ustr);\n    }\n    // an exception is fine, still indicates support is\n    // likely compiled into regex\n    catch (...) {\n        return 0;\n    }\n    return 0;\n}\n\n\"\"\", '.cpp')\n    context.Result(ret)\n    return ret\n\ndef sqlite_has_rtree(context, silent=False):\n    \"\"\" check an sqlite3 install has rtree support.\n\n    PRAGMA compile_options;\n    http://www.sqlite.org/c3ref/compileoption_get.html\n    \"\"\"\n\n    if not silent:\n        context.Message('Checking if SQLite supports RTREE... ')\n    ret, out = context.TryRun(\"\"\"\n\n#include <sqlite3.h>\n#include <stdio.h>\n\nint main()\n{\n    sqlite3* db;\n    int rc;\n    rc = sqlite3_open(\":memory:\", &db);\n    if (rc != SQLITE_OK)\n    {\n        printf(\"error 1: %s\\\\n\", sqlite3_errmsg(db));\n    }\n    const char * sql = \"create virtual table foo using rtree(pkid, xmin, xmax, ymin, ymax)\";\n    rc = sqlite3_exec(db, sql, 0, 0, 0);\n    if (rc != SQLITE_OK)\n    {\n        printf(\"error 2: %s\\\\n\", sqlite3_errmsg(db));\n        sqlite3_close(db);\n    }\n    else\n    {\n        printf(\"yes, has rtree!\\\\n\");\n        sqlite3_close(db);\n        return 0;\n    }\n\n    return -1;\n}\n\n\"\"\", '.c')\n    if silent:\n        context.did_show_result=1\n    context.Result(ret)\n    return ret\n\n__cplusplus = {'14':'201402L', '17':'201703L', '20':'202002L'}\n\ndef supports_cxx_std (context, silent=False):\n    cplusplus_string = __cplusplus[env['CXX_STD']]\n    if not silent:\n        context.Message('Checking if compiler (%s) supports -std=c++%s flag... ' % (context.env.get('CXX','CXX'), env['CXX_STD']))\n    ret, out = context.TryRun(\"\"\"\n\nint main()\n{\n#if __cplusplus >= %s\n    return 0;\n#else\n    return -1;\n#endif\n}\n\n\"\"\" % cplusplus_string ,'.cpp')\n    if silent:\n        context.did_show_result=1\n    context.Result(ret)\n    return ret\n\nconf_tests = { 'prioritize_paths'      : prioritize_paths,\n               'CheckPKGConfig'        : CheckPKGConfig,\n               'CheckPKG'              : CheckPKG,\n               'CheckPKGVersion'       : CheckPKGVersion,\n               'FindBoost'             : FindBoost,\n               'CheckBoost'            : CheckBoost,\n               'CheckIcuData'          : CheckIcuData,\n               'proj_version'          : proj_version,\n               'CheckProjData'         : CheckProjData,\n               'CheckGdalData'         : CheckGdalData,\n               'CheckCairoHasFreetype' : CheckCairoHasFreetype,\n               'CheckHasDlfcn'         : CheckHasDlfcn,\n               'GetBoostLibVersion'    : GetBoostLibVersion,\n               'parse_config'          : parse_config,\n               'parse_pg_config'       : parse_pg_config,\n               'ogr_enabled'           : ogr_enabled,\n               'get_pkg_lib'           : get_pkg_lib,\n               'icu_at_least'          : icu_at_least,\n               'harfbuzz_version'      : harfbuzz_version,\n               'harfbuzz_with_freetype_support': harfbuzz_with_freetype_support,\n               'boost_regex_has_icu'   : boost_regex_has_icu,\n               'sqlite_has_rtree'      : sqlite_has_rtree,\n               'supports_cxx_std'      : supports_cxx_std,\n               'CheckBoostScopedEnum'  : CheckBoostScopedEnum,\n               }\n\ndef GetMapnikLibVersion():\n    ver = []\n    for line in open('include/mapnik/version.hpp').readlines():\n        if line.startswith('#define MAPNIK_MAJOR_VERSION'):\n            ver.append(line.split(' ')[2].strip())\n        if line.startswith('#define MAPNIK_MINOR_VERSION'):\n            ver.append(line.split(' ')[2].strip())\n        if line.startswith('#define MAPNIK_PATCH_VERSION'):\n            ver.append(line.split(' ')[2].strip())\n    version_string = \".\".join(ver)\n    return version_string\n\nif not preconfigured:\n    color_print(4,'Configuring build environment...')\n    if env['USE_CONFIG']:\n        if not env['CONFIG'].endswith('.py'):\n            color_print(1,'SCons CONFIG file specified is not a python file, will not be read...')\n        else:\n            # Accept more than one file as comma-delimited list\n            user_confs = env['CONFIG'].split(',')\n            # If they exist add the files to the existing `opts`\n            for conf in user_confs:\n                if os.path.exists(conf):\n                    opts.files.append(conf)\n                    color_print(4,\"SCons CONFIG found: '%s', variables will be inherited...\" % conf)\n                    optfile = open(conf, 'r')\n                    #print optfile.read().replace(\"\\n\", \" \").replace(\"'\",\"\").replace(\" = \",\"=\")\n                    optfile.close()\n\n                elif not conf == SCONS_LOCAL_CONFIG:\n                    # if default missing, no worries\n                    # but if the default is overridden and the file is not found, give warning\n                    color_print(1,\"SCons CONFIG not found: '%s'\" % conf)\n            # Recreate the base environment using modified `opts`\n            env = Environment(ENV=os.environ,options=opts)\n            init_environment(env)\n            env['USE_CONFIG'] = True\n    else:\n        color_print(4,'SCons USE_CONFIG specified as false, will not inherit variables python config file...')\n\n\n    conf = Configure(env, custom_tests = conf_tests)\n\n    if env['DEBUG']:\n        mode = 'debug mode'\n    else:\n        mode = 'release mode'\n\n    if env['COVERAGE']:\n        mode += ' (with coverage)'\n\n    env['PLATFORM'] = platform.uname()[0]\n    color_print(4,\"Configuring on %s in *%s*...\" % (env['PLATFORM'],mode))\n\n    ret, cxx_version = config_command(env['CXX'], '--version')\n    if ret:\n        color_print(5, \"C++ compiler: %s\" % cxx_version)\n    else:\n        color_print(5, \"Could not detect C++ compiler\")\n\n    env['MISSING_DEPS'] = []\n    env['SKIPPED_DEPS'] = []\n    env['HAS_CAIRO'] = False\n    env['CAIRO_LIBPATHS'] = []\n    env['CAIRO_ALL_LIBS'] = []\n    env['CAIRO_CPPPATHS'] = []\n    env['HAS_PYCAIRO'] = False\n    env['PYCAIRO_PATHS'] = []\n    env['HAS_LIBXML2'] = False\n    env['LIBMAPNIK_LIBS'] = []\n    env['LIBMAPNIK_LINKFLAGS'] = []\n    env['LIBMAPNIK_CPPATHS'] = []\n    env['LIBMAPNIK_DEFINES'] = []\n    env['LIBMAPNIK_CXXFLAGS'] = []\n    env['PLUGINS'] = PLUGINS\n    env['EXTRA_FREETYPE_LIBS'] = []\n    env['SQLITE_LINKFLAGS'] = []\n    env['QUERIED_PROJ_LIB'] = None\n    env['QUERIED_ICU_DATA'] = None\n    env['QUERIED_GDAL_DATA'] = None\n\n    # previously a leading / was expected for LIB_DIR_NAME\n    # now strip it to ensure expected behavior\n    if env['LIB_DIR_NAME'].startswith(os.path.sep):\n        env['LIB_DIR_NAME'] = strip_first(env['LIB_DIR_NAME'],os.path.sep)\n\n    # base install location\n    env['MAPNIK_LIB_BASE'] = os.path.join(env['PREFIX'],env['LIBDIR_SCHEMA'])\n    # directory for plugins and fonts\n    env['MAPNIK_LIB_DIR'] = os.path.join(env['MAPNIK_LIB_BASE'],env['LIB_DIR_NAME'])\n    # input plugins sub directory\n    env['MAPNIK_INPUT_PLUGINS'] = os.path.join(env['MAPNIK_LIB_DIR'],'input')\n    # fonts sub directory\n    if env['SYSTEM_FONTS']:\n        env['MAPNIK_FONTS'] = os.path.normpath(env['SYSTEM_FONTS'])\n    else:\n        env['MAPNIK_FONTS'] = os.path.join(env['MAPNIK_LIB_DIR'],'fonts')\n\n    # install prefix is a pre-pended base location to\n    # re-route the install and only intended for package building\n    # we normalize to ensure no trailing slash and proper pre-pending to the absolute prefix\n    install_prefix = os.path.normpath(fix_path(env['DESTDIR'])) + fix_path(env['PREFIX'])\n    env['INSTALL_PREFIX'] = strip_first(install_prefix,'//','/')\n    # all values from above based on install_prefix\n    # if env['DESTDIR'] == '/' these should be unchanged\n    env['MAPNIK_LIB_BASE_DEST'] = os.path.join(env['INSTALL_PREFIX'],env['LIBDIR_SCHEMA'])\n    env['MAPNIK_LIB_DIR_DEST'] =  os.path.join(env['MAPNIK_LIB_BASE_DEST'],env['LIB_DIR_NAME'])\n    env['MAPNIK_INPUT_PLUGINS_DEST'] = os.path.join(env['MAPNIK_LIB_DIR_DEST'],'input')\n    if env['SYSTEM_FONTS']:\n        env['MAPNIK_FONTS_DEST'] = os.path.normpath(env['SYSTEM_FONTS'])\n    else:\n        env['MAPNIK_FONTS_DEST'] = os.path.join(env['MAPNIK_LIB_DIR_DEST'],'fonts')\n\n    if env['LINKING'] == 'static':\n       env['MAPNIK_LIB_NAME'] = '${LIBPREFIX}${MAPNIK_NAME}${LIBSUFFIX}'\n    else:\n       env['MAPNIK_LIB_NAME'] = '${SHLIBPREFIX}${MAPNIK_NAME}${SHLIBSUFFIX}'\n\n    if env['PKG_CONFIG_PATH']:\n        env['ENV']['PKG_CONFIG_PATH'] = fix_path(env['PKG_CONFIG_PATH'])\n        # otherwise this variable == os.environ[\"PKG_CONFIG_PATH\"]\n\n    if env['PATH']:\n        env['ENV']['PATH'] = fix_path(env['PATH']) + ':' + env['ENV']['PATH']\n\n    if env['SYSTEM_FONTS']:\n        if not os.path.isdir(env['SYSTEM_FONTS']):\n            color_print(1,'Warning: Directory specified for SYSTEM_FONTS does not exist!')\n\n    # Set up for libraries and headers dependency checks\n    env['CPPPATH'] = ['#include']\n    env['LIBPATH'] = ['#src','#src/json','#src/wkt']\n\n    # set any custom cxxflags and ldflags to come first\n    if sys.platform == 'darwin' and not env['HOST']:\n        DEFAULT_CXX_CXXFLAGS += ' -stdlib=libc++'\n        DEFAULT_CXX_LINKFLAGS = ' -stdlib=libc++'\n    env.Append(CPPDEFINES = env['CUSTOM_DEFINES'])\n    env.Append(CXXFLAGS = \"-std=c++%s %s\" % (env['CXX_STD'], DEFAULT_CXX_CXXFLAGS))\n    env.Append(CXXFLAGS = env['CUSTOM_CXXFLAGS'])\n    env.Append(CFLAGS = env['CUSTOM_CFLAGS'])\n    env.Append(LINKFLAGS = DEFAULT_CXX_LINKFLAGS)\n\n    custom_ldflags = env.ParseFlags(env['CUSTOM_LDFLAGS'])\n    env.Append(LINKFLAGS = custom_ldflags.pop('LINKFLAGS'),\n               LIBS = custom_ldflags.pop('LIBS'))\n    env.AppendUnique(FRAMEWORKS = custom_ldflags.pop('FRAMEWORKS'),\n                     LIBPATH = custom_ldflags.pop('LIBPATH'),\n                     RPATH = custom_ldflags.pop('RPATH'))\n    # ParseFlags puts everything it does not recognize into CCFLAGS,\n    # but let's assume the user knows better: add those to LINKFLAGS.\n    # In order to prevent duplication of flags which ParseFlags puts\n    # into both CCFLAGS and LINKFLAGS, call AppendUnique.\n    env.AppendUnique(LINKFLAGS = custom_ldflags.pop('CCFLAGS'))\n\n    invalid_ldflags = {k:v for k,v in custom_ldflags.items() if v}\n    if invalid_ldflags:\n        color_print(3, 'Warning: CUSTOM_LDFLAGS contained some flags that SCons recognized as not for linker.')\n        color_print(3, 'The following flags will be ignored:')\n        for key, value in invalid_ldflags.items():\n            color_print(3, '\\t%s = %r' % (key, value))\n\n    ### platform specific bits\n\n    thread_suffix = 'mt'\n    if env['PLATFORM'] == 'FreeBSD':\n        thread_suffix = ''\n        env.Append(LIBS = 'pthread')\n\n    if env['MEMORY_MAPPED_FILE']:\n        env.Append(CPPDEFINES = '-DMAPNIK_MEMORY_MAPPED_FILE')\n\n    # allow for mac osx /usr/lib/libicucore.dylib compatibility\n    # requires custom supplied headers since Apple does not include them\n    # details: http://lists.apple.com/archives/xcode-users/2005/Jun/msg00633.html\n    # To use system lib download and make && make install one of these:\n    # http://www.opensource.apple.com/tarballs/ICU/\n    # then copy the headers to a location that mapnik will find\n    if 'core' in env['ICU_LIB_NAME']:\n        env.Append(CPPDEFINES = '-DU_HIDE_DRAFT_API')\n        env.Append(CPPDEFINES = '-DUDISABLE_RENAMING')\n        if os.path.exists(env['ICU_LIB_NAME']):\n            #-sICU_LINK=\" -L/usr/lib -licucore\n            env['ICU_LIB_NAME'] = os.path.basename(env['ICU_LIB_NAME']).replace('.dylib','').replace('lib','')\n\n    # Adding the required prerequisite library directories to the include path for\n    # compiling and the library path for linking, respectively.\n    for required in ('ICU', 'SQLITE', 'HB'):\n        inc_path = env['%s_INCLUDES' % required]\n        lib_path = env['%s_LIBS' % required]\n        env.AppendUnique(CPPPATH = fix_path(inc_path))\n        env.AppendUnique(LIBPATH = fix_path(lib_path))\n\n    REQUIRED_LIBSHEADERS = [\n        ['z', 'zlib.h', True,'C'],\n        [env['ICU_LIB_NAME'],'unicode/unistr.h',True,'C++'],\n        ['harfbuzz', 'harfbuzz/hb.h',True,'C++']\n    ]\n    OPTIONAL_LIBSHEADERS = []\n\n    CHECK_PKG_CONFIG = conf.CheckPKGConfig('0.15.0')\n    if env.get('FREETYPE_LIBS') or env.get('FREETYPE_INCLUDES'):\n        REQUIRED_LIBSHEADERS.insert(0,['freetype','ft2build.h',True,'C'])\n        if env.get('FREETYPE_INCLUDES'):\n            inc_path = env['FREETYPE_INCLUDES']\n            env.AppendUnique(CPPPATH = fix_path(inc_path))\n        if env.get('FREETYPE_LIBS'):\n            lib_path = env['FREETYPE_LIBS']\n            env.AppendUnique(LIBPATH = fix_path(lib_path))\n    elif CHECK_PKG_CONFIG and conf.CheckPKG('freetype2'):\n        # Freetype 2.9+ doesn't use freetype-config and uses pkg-config instead\n        cmd = 'pkg-config freetype2 --libs --cflags'\n        if env['RUNTIME_LINK'] == 'static':\n            cmd += ' --static'\n\n        temp_env = Environment(ENV=os.environ)\n        try:\n            temp_env.ParseConfig(cmd)\n            for lib in temp_env['LIBS']:\n                env.AppendUnique(LIBPATH = fix_path(lib))\n            for inc in temp_env['CPPPATH']:\n                env.AppendUnique(CPPPATH = fix_path(inc))\n        except OSError as e:\n            pass\n    elif conf.parse_config('FREETYPE_CONFIG'):\n        # check if freetype links to bz2\n        if env['RUNTIME_LINK'] == 'static':\n            temp_env = env.Clone()\n            temp_env['LIBS'] = []\n            try:\n                # TODO - freetype-config accepts --static as of v2.5.3\n                temp_env.ParseConfig('%s --libs' % env['FREETYPE_CONFIG'])\n                if 'bz2' in temp_env['LIBS']:\n                    env['EXTRA_FREETYPE_LIBS'].append('bz2')\n            except OSError as e:\n                pass\n\n    if env['XMLPARSER'] == 'libxml2':\n        if env.get('XML2_LIBS') or env.get('XML2_INCLUDES'):\n            OPTIONAL_LIBSHEADERS.insert(0,['libxml2','libxml/parser.h',True,'C'])\n            if env.get('XML2_INCLUDES'):\n                inc_path = env['XML2_INCLUDES']\n                env.AppendUnique(CPPPATH = fix_path(inc_path))\n            if env.get('XML2_LIBS'):\n                lib_path = env['XML2_LIBS']\n                env.AppendUnique(LIBPATH = fix_path(lib_path))\n        elif CHECK_PKG_CONFIG and conf.CheckPKG('libxml-2.0'):\n            # libxml2 2.9.10+ doesn't use xml2-config and uses pkg-config instead\n            cmd = 'pkg-config libxml-2.0 --libs --cflags'\n\n            temp_env = Environment(ENV=os.environ)\n            try:\n                temp_env.ParseConfig(cmd)\n                for inc in temp_env['CPPPATH']:\n                    env.AppendUnique(CPPPATH = fix_path(inc))\n                    env['HAS_LIBXML2'] = True\n                for lib in temp_env['LIBS']:\n                    env.AppendUnique(LIBPATH = fix_path(lib))\n                    env['HAS_LIBXML2'] = True\n            except OSError as e:\n                pass\n        elif conf.parse_config('XML2_CONFIG',checks='--cflags'):\n            env['HAS_LIBXML2'] = True\n        else:\n            env['MISSING_DEPS'].append('libxml2')\n\n    if not env['HOST']:\n        if conf.CheckHasDlfcn():\n            env.Append(CPPDEFINES = '-DMAPNIK_HAS_DLCFN')\n        else:\n            env['SKIPPED_DEPS'].append('dlfcn')\n\n    if env['JPEG']:\n        OPTIONAL_LIBSHEADERS.append(['jpeg', ['stdio.h', 'jpeglib.h'], False,'C','-DHAVE_JPEG'])\n        inc_path = env['%s_INCLUDES' % 'JPEG']\n        lib_path = env['%s_LIBS' % 'JPEG']\n        env.AppendUnique(CPPPATH = fix_path(inc_path))\n        env.AppendUnique(LIBPATH = fix_path(lib_path))\n    else:\n        env['SKIPPED_DEPS'].append('jpeg')\n\n    if env['PROJ']:\n        OPTIONAL_LIBSHEADERS.append(['proj', 'proj.h', False,'C','-DMAPNIK_USE_PROJ'])\n        inc_path = env['%s_INCLUDES' % 'PROJ']\n        lib_path = env['%s_LIBS' % 'PROJ']\n        env.AppendUnique(CPPPATH = fix_path(inc_path))\n        env.AppendUnique(LIBPATH = fix_path(lib_path))\n    else:\n        env['SKIPPED_DEPS'].append('proj')\n\n    if env['PNG']:\n        OPTIONAL_LIBSHEADERS.append(['png', 'png.h', False,'C','-DHAVE_PNG'])\n        inc_path = env['%s_INCLUDES' % 'PNG']\n        lib_path = env['%s_LIBS' % 'PNG']\n        env.AppendUnique(CPPPATH = fix_path(inc_path))\n        env.AppendUnique(LIBPATH = fix_path(lib_path))\n    else:\n        env['SKIPPED_DEPS'].append('png')\n\n    if env['WEBP']:\n        if env.get('WEBP_LIBS') or env.get('WEBP_INCLUDES'):\n            OPTIONAL_LIBSHEADERS.append(['webp', 'webp/decode.h', False,'C','-DHAVE_WEBP'])\n            inc_path = env['WEBP_INCLUDES']\n            lib_path = env['WEBP_LIBS']\n            env.AppendUnique(CPPPATH = fix_path(inc_path))\n            env.AppendUnique(LIBPATH = fix_path(lib_path))\n        else:\n            cmd = 'pkg-config libwebp --libs --cflags'\n            if env['RUNTIME_LINK'] == 'static':\n                cmd += ' --static'\n            temp_env = Environment(ENV=os.environ)\n            try:\n                temp_env.ParseConfig(cmd)\n                for lib in temp_env['LIBS']:\n                    env.AppendUnique(LIBPATH = fix_path(lib))\n                for inc in temp_env['CPPPATH']:\n                    env.AppendUnique(CPPPATH = fix_path(inc))\n            except OSError as e:\n                pass\n    else:\n        env['SKIPPED_DEPS'].append('webp')\n\n    if env['TIFF']:\n        OPTIONAL_LIBSHEADERS.append(['tiff', 'tiff.h', False,'C','-DHAVE_TIFF'])\n        inc_path = env['%s_INCLUDES' % 'TIFF']\n        lib_path = env['%s_LIBS' % 'TIFF']\n        env.AppendUnique(CPPPATH = fix_path(inc_path))\n        env.AppendUnique(LIBPATH = fix_path(lib_path))\n    else:\n        env['SKIPPED_DEPS'].append('tiff')\n\n    # if requested, sort LIBPATH and CPPPATH before running CheckLibWithHeader tests\n    if env['PRIORITIZE_LINKING']:\n        conf.prioritize_paths(silent=True)\n\n    # test for CXX_STD support, which is required\n    if not env['HOST'] and not conf.supports_cxx_std():\n        color_print(1,\"C++ compiler does not support C++%s standard (-std=c++%s), which is required.\"\n                      \" Please upgrade your compiler\" % (env['CXX_STD'], env['CXX_STD']))\n        Exit(1)\n\n    if not env['HOST']:\n        for libname, headers, required, lang in REQUIRED_LIBSHEADERS:\n            if not conf.CheckLibWithHeader(libname, headers, lang):\n                if required:\n                    color_print(1, 'Could not find required header or shared library for %s' % libname)\n                    env['MISSING_DEPS'].append(libname)\n                else:\n                    color_print(4, 'Could not find optional header or shared library for %s' % libname)\n                    env['SKIPPED_DEPS'].append(libname)\n            else:\n                if libname == env['ICU_LIB_NAME']:\n                    if env['ICU_LIB_NAME'] not in env['MISSING_DEPS']:\n                        if not conf.icu_at_least(\"4.0\"):\n                            # expression_string.cpp and map.cpp use fromUTF* function only available in >= ICU 4.2\n                            env['MISSING_DEPS'].append(env['ICU_LIB_NAME'])\n                elif libname == 'harfbuzz':\n                    if not conf.harfbuzz_version():\n                        env['SKIPPED_DEPS'].append('harfbuzz-min-version')\n                    if not conf.harfbuzz_with_freetype_support():\n                        env['MISSING_DEPS'].append('harfbuzz-with-freetype-support')\n\n    if env['BIGINT']:\n        env.Append(CPPDEFINES = '-DBIGINT')\n\n    if int(env['CXX_STD']) < 17:\n        env['USE_BOOST_FILESYSTEM'] = True\n\n    if env['USE_BOOST_FILESYSTEM']:\n        env.Append(CPPDEFINES = '-DUSE_BOOST_FILESYSTEM')\n\n    if env['THREADING'] == 'multi':\n        thread_flag = thread_suffix\n    else:\n        thread_flag = ''\n\n    conf.FindBoost(BOOST_SEARCH_PREFIXES,thread_flag)\n\n    has_boost_devel = True\n    if not env['HOST']:\n        if not conf.CheckHeader(header='boost/version.hpp',language='C++'):\n            env['MISSING_DEPS'].append('boost development headers')\n            has_boost_devel = False\n\n    if has_boost_devel:\n        if not env['HOST']:\n            env['BOOST_LIB_VERSION_FROM_HEADER'] = conf.GetBoostLibVersion()\n\n        # The other required boost headers.\n        BOOST_LIBSHEADERS = [\n            ['regex', 'boost/regex.hpp', True],\n            ['program_options', 'boost/program_options.hpp', False]\n        ]\n\n        if env['USE_BOOST_FILESYSTEM']:\n            BOOST_LIBSHEADERS.append(['system', 'boost/system/system_error.hpp', True])\n            BOOST_LIBSHEADERS.append(['filesystem', 'boost/filesystem/operations.hpp', True])\n        # if requested, sort LIBPATH and CPPPATH before running CheckLibWithHeader tests\n        if env['PRIORITIZE_LINKING']:\n            conf.prioritize_paths(silent=True)\n\n        if not env['HOST']:\n            # if the user is not setting custom boost configuration\n            # enforce boost version greater than or equal to BOOST_MIN_VERSION\n            if not conf.CheckBoost(BOOST_MIN_VERSION):\n                color_print(4,'Found boost lib version... %s' % env.get('BOOST_LIB_VERSION_FROM_HEADER') )\n                color_print(1,'Boost version %s or greater is required' % BOOST_MIN_VERSION)\n                if not env['BOOST_VERSION']:\n                    env['MISSING_DEPS'].append('boost version >= %s' % BOOST_MIN_VERSION)\n            else:\n                color_print(4,'Found boost lib version... %s' % env.get('BOOST_LIB_VERSION_FROM_HEADER') )\n\n        if not env['HOST']:\n            for count, libinfo in enumerate(BOOST_LIBSHEADERS):\n                if not conf.CheckLibWithHeader('boost_%s%s' % (libinfo[0],env['BOOST_APPEND']), libinfo[1], 'C++'):\n                    if libinfo[2]:\n                        color_print(1,'Could not find required header or shared library for boost %s' % libinfo[0])\n                        env['MISSING_DEPS'].append('boost ' + libinfo[0])\n                    else:\n                        color_print(4,'Could not find optional header or shared library for boost %s' % libinfo[0])\n                        env['SKIPPED_DEPS'].append('boost ' + libinfo[0])\n\n        # Boost versions before 1.57 are broken when the system package and\n        # Mapnik are compiled against different standards. On Ubuntu 14.04\n        # using boost 1.54, it breaks scoped enums. It's a bit of a hack to\n        # just turn it off like this, but seems the only available work-\n        # around. See https://svn.boost.org/trac/boost/ticket/6779 for more\n        # details.\n        if not env['HOST']:\n            if not conf.CheckBoostScopedEnum():\n                boost_version = [int(x) for x in env.get('BOOST_LIB_VERSION_FROM_HEADER').split('_') if x]\n                if boost_version < [1, 51]:\n                    env.Append(CXXFLAGS = '-DBOOST_NO_SCOPED_ENUMS')\n                elif boost_version < [1, 57]:\n                    env.Append(CXXFLAGS = '-DBOOST_NO_CXX11_SCOPED_ENUMS')\n\n    if not env['HOST'] and env['ICU_LIB_NAME'] not in env['MISSING_DEPS']:\n        # http://lists.boost.org/Archives/boost/2009/03/150076.php\n        # we need libicui18n if using static boost libraries, so it is\n        # important to try this check with the library linked\n        if conf.boost_regex_has_icu():\n            # TODO - should avoid having this be globally defined...\n            env.Append(CPPDEFINES = '-DBOOST_REGEX_HAS_ICU')\n        else:\n            env['SKIPPED_DEPS'].append('boost_regex_icu')\n\n        for libname, headers, required, lang, define in OPTIONAL_LIBSHEADERS:\n            if not env['HOST']:\n                if not conf.CheckLibWithHeader(libname, headers, lang):\n                    if required:\n                        color_print(1, 'Could not find required header or shared library for %s' % libname)\n                        env['MISSING_DEPS'].append(libname)\n                    else:\n                        color_print(4, 'Could not find optional header or shared library for %s' % libname)\n                        env['SKIPPED_DEPS'].append(libname)\n                elif libname == 'proj':\n                    result, version = conf.proj_version()\n                    if not result:\n                        env['SKIPPED_DEPS'].append('proj-min-version')\n                    else:\n                        env.Append(CPPDEFINES = define)\n                        env.Append(CPPDEFINES = \"-DMAPNIK_PROJ_VERSION=%d\" % version)\n                else:\n                    env.Append(CPPDEFINES = define)\n            else:\n                env.Append(CPPDEFINES = define)\n\n    env['REQUESTED_PLUGINS'] = [ driver.strip() for driver in Split(env['INPUT_PLUGINS'])]\n\n    SQLITE_HAS_RTREE = None\n    if env['HOST']:\n        SQLITE_HAS_RTREE = True\n\n    if not env['HOST']:\n        env['QUERIED_PROJ_LIB'] = conf.CheckProjData()\n        if os.environ.get('PROJ_LIB'):\n            env['QUERIED_PROJ_LIB'] = os.environ['PROJ_LIB']\n            color_print(4,'Detected PROJ_LIB in environ, using env value instead: %s' % os.environ['PROJ_LIB'] )\n        env['QUERIED_ICU_DATA'] = conf.CheckIcuData()\n        if os.environ.get('ICU_DATA'):\n            env['QUERIED_ICU_DATA'] = os.environ['ICU_DATA']\n            color_print(4,'Detected ICU_DATA in environ, using env value instead: %s' % os.environ['ICU_DATA'] )\n        env['QUERIED_GDAL_DATA'] = conf.CheckGdalData()\n        if os.environ.get('GDAL_DATA'):\n            env['QUERIED_GDAL_DATA'] = os.environ['GDAL_DATA']\n            color_print(4,'Detected GDAL_DATA in environ, using env value instead: %s' % os.environ['GDAL_DATA'] )\n        # now validate the paths actually exist\n        if env['QUERIED_PROJ_LIB'] and not os.path.exists(env['QUERIED_PROJ_LIB']):\n            color_print(1,'%s not detected on your system' % env['QUERIED_PROJ_LIB'] )\n            env['MISSING_DEPS'].append('PROJ_LIB')\n        if env['QUERIED_GDAL_DATA'] and not os.path.exists(env['QUERIED_GDAL_DATA']):\n            color_print(1,'%s not detected on your system' % env['QUERIED_GDAL_DATA'] )\n            env['MISSING_DEPS'].append('GDAL_DATA')\n        if env['QUERIED_ICU_DATA'] and not os.path.exists(env['QUERIED_ICU_DATA']):\n            color_print(1,'%s not detected on your system' % env['QUERIED_ICU_DATA'] )\n            env['MISSING_DEPS'].append('ICU_DATA')\n\n    if len(env['REQUESTED_PLUGINS']):\n        if env['HOST']:\n            for plugin in env['REQUESTED_PLUGINS']:\n                details = env['PLUGINS'][plugin]\n                if details['lib']:\n                    env.AppendUnique(LIBS=details['lib'])\n        else:\n            color_print(4,'Checking for requested plugins dependencies...')\n            for plugin in env['REQUESTED_PLUGINS']:\n                details = env['PLUGINS'][plugin]\n                if plugin == 'gdal':\n                    if conf.parse_config('GDAL_CONFIG',checks='--libs'):\n                        conf.parse_config('GDAL_CONFIG',checks='--cflags')\n                        libname = conf.get_pkg_lib('GDAL_CONFIG','gdal')\n                        if libname:\n                            if not conf.CheckLibWithHeader(libname, details['inc'], details['lang']):\n                                env['SKIPPED_DEPS'].append('gdal')\n                                if libname in env['LIBS']:\n                                     env['LIBS'].remove(libname)\n                            else:\n                                details['lib'] = libname\n                elif plugin == 'postgis' or plugin == 'pgraster':\n                    if env.get('PG_LIBS') or env.get('PG_INCLUDES'):\n                        libname = details['lib']\n                        if env.get('PG_INCLUDES'):\n                            inc_path = env['PG_INCLUDES']\n                            env.AppendUnique(CPPPATH = fix_path(inc_path))\n                        if env.get('PG_LIBS'):\n                            lib_path = env['PG_LIBS']\n                            env.AppendUnique(LIBPATH = fix_path(lib_path))\n                        if not conf.CheckLibWithHeader(libname, details['inc'], details['lang']):\n                            env['SKIPPED_DEPS'].append(libname)\n                            if libname in env['LIBS']:\n                                 env['LIBS'].remove(libname)\n                        else:\n                            details['lib'] = libname\n                    else:\n                        conf.parse_pg_config('PG_CONFIG')\n                elif plugin == 'ogr':\n                    if conf.ogr_enabled():\n                        if conf.parse_config('GDAL_CONFIG',checks='--libs'):\n                            conf.parse_config('GDAL_CONFIG',checks='--cflags')\n                            libname = conf.get_pkg_lib('GDAL_CONFIG','ogr')\n                            if libname:\n                                if not conf.CheckLibWithHeader(libname, details['inc'], details['lang']):\n                                    if 'gdal' not in env['SKIPPED_DEPS']:\n                                        env['SKIPPED_DEPS'].append('gdal')\n                                    if libname in env['LIBS']:\n                                         env['LIBS'].remove(libname)\n                                else:\n                                    details['lib'] = libname\n                elif details['path'] and details['lib'] and details['inc']:\n                    backup = env.Clone().Dictionary()\n                    # Note, the 'delete_existing' keyword makes sure that these paths are prepended\n                    # to the beginning of the path list even if they already exist\n                    incpath = env['%s_INCLUDES' % details['path']]\n                    libpath = env['%s_LIBS' % details['path']]\n                    env.PrependUnique(CPPPATH = fix_path(incpath),delete_existing=True)\n                    env.PrependUnique(LIBPATH = fix_path(libpath),delete_existing=True)\n                    if not conf.CheckLibWithHeader(details['lib'], details['inc'], details['lang']):\n                        env.Replace(**backup)\n                        env['SKIPPED_DEPS'].append(details['lib'])\n                    if plugin == 'sqlite':\n                        sqlite_backup = env.Clone().Dictionary()\n                        # if statically linking, on linux we likely\n                        # need to link sqlite to pthreads and dl\n                        if env['RUNTIME_LINK'] == 'static' and not env['PLATFORM'] == 'Darwin':\n                            if CHECK_PKG_CONFIG and conf.CheckPKG('sqlite3'):\n                                sqlite_env = env.Clone()\n                                try:\n                                    sqlite_env.ParseConfig('pkg-config --static --libs sqlite3')\n                                    for lib in sqlite_env['LIBS']:\n                                        if not lib in env['LIBS']:\n                                            env[\"SQLITE_LINKFLAGS\"].append(lib)\n                                            env.Append(LIBS=lib)\n                                except OSError as e:\n                                    for lib in [\"sqlite3\",\"dl\",\"pthread\"]:\n                                        if not lib in env['LIBS']:\n                                            env[\"SQLITE_LINKFLAGS\"].append(\"lib\")\n                                            env.Append(LIBS=lib)\n                            else:\n                                for lib in [\"sqlite3\",\"dl\",\"pthread\"]:\n                                    if not lib in env['LIBS']:\n                                        env[\"SQLITE_LINKFLAGS\"].append(\"lib\")\n                                        env.Append(LIBS=lib)\n                        SQLITE_HAS_RTREE = conf.sqlite_has_rtree()\n                        if not SQLITE_HAS_RTREE:\n                            env.Replace(**sqlite_backup)\n                            if details['lib'] in env['LIBS']:\n                                env['LIBS'].remove(details['lib'])\n                            env['SKIPPED_DEPS'].append('sqlite_rtree')\n                        else:\n                            env.Replace(**sqlite_backup)\n                elif details['lib'] and details['inc']:\n                    if not conf.CheckLibWithHeader(details['lib'], details['inc'], details['lang']):\n                        env['SKIPPED_DEPS'].append(details['lib'])\n\n            # re-append the local paths for mapnik sources to the beginning of the list\n            # to make sure they come before any plugins that were 'prepended'\n            env.PrependUnique(CPPPATH = '#include', delete_existing=True)\n            env.PrependUnique(LIBPATH = '#src', delete_existing=True)\n\n    if not env['HOST']:\n        if env['PGSQL2SQLITE']:\n            if 'sqlite3' not in env['LIBS']:\n                env.AppendUnique(LIBS='sqlite3')\n                env.AppendUnique(CPPPATH = fix_path(env['SQLITE_INCLUDES']))\n                env.AppendUnique(LIBPATH = fix_path(env['SQLITE_LIBS']))\n            if 'pq' not in env['LIBS']:\n                if not conf.parse_pg_config('PG_CONFIG'):\n                    env['PGSQL2SQLITE'] = False\n            if not SQLITE_HAS_RTREE:\n                env['SKIPPED_DEPS'].append('pgsql2sqlite_rtree')\n                env['PGSQL2SQLITE'] = False\n\n    # we rely on an internal, patched copy of agg with critical fixes\n    # prepend to make sure we link locally\n    env.Prepend(CPPPATH = '#deps/agg/include')\n    env.Prepend(LIBPATH = '#deps/agg')\n    env.Prepend(CPPPATH = '#deps/mapbox/variant/include')\n    env.Prepend(CPPPATH = '#deps/mapbox/geometry/include')\n    env.Prepend(CPPPATH = '#deps/mapbox/protozero/include')\n    env.Prepend(CPPPATH = '#deps/mapbox/polylabel/include')\n    # prepend deps dir for auxillary headers\n    env.Prepend(CPPPATH = '#deps')\n\n    if env['CAIRO']:\n        if env['CAIRO_LIBS'] or env['CAIRO_INCLUDES']:\n            c_inc = env['CAIRO_INCLUDES']\n            if env['CAIRO_LIBS']:\n                env[\"CAIRO_LIBPATHS\"].append(fix_path(env['CAIRO_LIBS']))\n                if not env['CAIRO_INCLUDES']:\n                    c_inc = env['CAIRO_LIBS'].replace('lib','',1)\n            if c_inc:\n                c_inc = os.path.normpath(fix_path(env['CAIRO_INCLUDES']))\n                if c_inc.endswith('include'):\n                    c_inc = os.path.dirname(c_inc)\n                env[\"CAIRO_CPPPATHS\"].extend(\n                    [\n                      os.path.join(c_inc,'include/cairo'),\n                      os.path.join(c_inc,'include/pixman-1'),\n                      #os.path.join(c_inc,'include/freetype2'),\n                      #os.path.join(c_inc,'include/libpng'),\n                    ]\n                )\n                env[\"CAIRO_ALL_LIBS\"] = ['cairo']\n                if env['RUNTIME_LINK'] == 'static':\n                    env[\"CAIRO_ALL_LIBS\"].append('pixman-1')\n                # todo - run actual checkLib?\n                env['HAS_CAIRO'] = True\n        else:\n            if not CHECK_PKG_CONFIG:\n                env['HAS_CAIRO'] = False\n                env['SKIPPED_DEPS'].append('pkg-config')\n                env['SKIPPED_DEPS'].append('cairo')\n            elif not conf.CheckPKG('cairo'):\n                env['HAS_CAIRO'] = False\n                env['SKIPPED_DEPS'].append('cairo')\n            else:\n                print ('Checking for cairo lib and include paths... ', end = '')\n                cmd = 'pkg-config --libs --cflags cairo'\n                if env['RUNTIME_LINK'] == 'static':\n                    cmd += ' --static'\n                cairo_env = env.Clone()\n                try:\n                    cairo_env.ParseConfig(cmd)\n                    for lib in cairo_env['LIBS']:\n                        if not lib in env['LIBS']:\n                            env[\"CAIRO_ALL_LIBS\"].append(lib)\n                    for lpath in cairo_env['LIBPATH']:\n                        if not lpath in env['LIBPATH']:\n                            env[\"CAIRO_LIBPATHS\"].append(lpath)\n                    for inc in cairo_env['CPPPATH']:\n                        if not inc in env['CPPPATH']:\n                            env[\"CAIRO_CPPPATHS\"].append(inc)\n                    env['HAS_CAIRO'] = True\n                    print ('yes')\n                except OSError as e:\n                    color_print(1,'no')\n                    env['SKIPPED_DEPS'].append('cairo')\n                    color_print(1,'pkg-config reported: %s' % e)\n\n    else:\n        color_print(4,'Not building with cairo support, pass CAIRO=True to enable')\n\n    if not env['HOST'] and env['HAS_CAIRO']:\n        if not conf.CheckCairoHasFreetype():\n            env['SKIPPED_DEPS'].append('cairo')\n            env['HAS_CAIRO'] = False\n\n    #### End Config Stage for Required Dependencies ####\n\n    if env['MISSING_DEPS']:\n        # if required dependencies are missing, print warnings and then let SCons finish without building or saving local config\n        color_print(1,'\\nExiting... the following required dependencies were not found:' + pretty_deps('\\n   - ', env['MISSING_DEPS']))\n        color_print(1,\"\\nSee '%s' for details on possible problems.\" % (fix_path(SCONS_LOCAL_LOG)))\n        if env['SKIPPED_DEPS']:\n            color_print(4,'\\nAlso, these OPTIONAL dependencies were not found:' + pretty_deps('\\n   - ', env['SKIPPED_DEPS']))\n        color_print(4,\"\\nSet custom paths to these libraries and header files on the command-line or in a file called '%s'\" % SCONS_LOCAL_CONFIG)\n        color_print(4,\"    ie. $ python scons/scons.py BOOST_INCLUDES=/usr/local/include BOOST_LIBS=/usr/local/lib\")\n        color_print(4, \"\\nOnce all required dependencies are found a local '%s' will be saved and then install:\" % SCONS_LOCAL_CONFIG)\n        color_print(4,\"    $ sudo python scons/scons.py install\")\n        color_print(4,\"\\nTo view available path variables:\\n    $ python scons/scons.py --help or -h\")\n        color_print(4,'\\nTo view overall SCons help options:\\n    $ python scons/scons.py --help-options or -H\\n')\n        color_print(4,'More info: https://github.com/mapnik/mapnik/wiki/Mapnik-Installation')\n        if not HELP_REQUESTED:\n            Exit(1)\n    else:\n        # Save the custom variables in a SCONS_LOCAL_CONFIG\n        # that will be reloaded to allow for `install` without re-specifying custom variables\n        color_print(4,\"\\nAll Required dependencies found!\\n\")\n        if env['USE_CONFIG']:\n            if os.path.exists(SCONS_LOCAL_CONFIG):\n                action = 'Overwriting and re-saving'\n                os.unlink(SCONS_LOCAL_CONFIG)\n            else:\n                action = 'Saving new'\n            color_print(4,\"%s file '%s'...\" % (action,SCONS_LOCAL_CONFIG))\n            color_print(4,\"Will hold custom path variables from commandline and python config file(s)...\")\n            opts.Save(SCONS_LOCAL_CONFIG,env)\n        else:\n          color_print(4,\"Did not use user config file, no custom path variables will be saved...\")\n\n        if env['SKIPPED_DEPS']:\n            color_print(4,'\\nNote: will build without these OPTIONAL dependencies:' + pretty_deps('\\n   - ', env['SKIPPED_DEPS']))\n            print\n\n        # fetch the mapnik version header in order to set the\n        # ABI version used to build libmapnik.so on linux in src/build.py\n        abi = GetMapnikLibVersion()\n        abi_split = abi.split('.')\n        env['ABI_VERSION'] = abi_split\n        env['MAPNIK_VERSION_STRING'] = abi\n        env['MAPNIK_VERSION'] = str(int(abi_split[0])*100000+int(abi_split[1])*100+int(abi_split[2]))\n\n        # Common DEFINES.\n        env.Append(CPPDEFINES = '-D%s' % env['PLATFORM'].upper())\n        if env['THREADING'] == 'multi':\n            env.Append(CPPDEFINES = '-DMAPNIK_THREADSAFE')\n\n        if env['NO_ATEXIT']:\n            env.Append(CPPDEFINES = '-DMAPNIK_NO_ATEXIT')\n\n        if env['NO_DLCLOSE'] or env['COVERAGE']:\n            env.Append(CPPDEFINES = '-DMAPNIK_NO_DLCLOSE')\n\n        if env['ENABLE_GLIBC_WORKAROUND']:\n            env.Append(CPPDEFINES = '-DMAPNIK_ENABLE_GLIBC_WORKAROUND')\n\n        # Mac OSX (Darwin) special settings\n        if env['PLATFORM'] == 'Darwin':\n            pthread = ''\n        else:\n            pthread = '-pthread'\n\n        # Common debugging flags.\n        # http://lists.fedoraproject.org/pipermail/devel/2010-November/144952.html\n        debug_flags  = ['-g', '-fno-omit-frame-pointer']\n        debug_defines = ['-DDEBUG', '-DMAPNIK_DEBUG']\n        ndebug_defines = ['-DNDEBUG']\n\n        # faster compile\n        # http://www.boost.org/doc/libs/1_47_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_5.html#spirit.what_s_new.spirit_2_5.breaking_changes\n        env.Append(CPPDEFINES = '-DBOOST_SPIRIT_NO_PREDEFINED_TERMINALS=1')\n        env.Append(CPPDEFINES = '-DBOOST_PHOENIX_NO_PREDEFINED_TERMINALS=1')\n        # c++11 support / https://github.com/mapnik/mapnik/issues/1683\n        #  - upgrade to PHOENIX_V3 since that is needed for c++11 compile\n        env.Append(CPPDEFINES = '-DBOOST_SPIRIT_USE_PHOENIX_V3=1')\n\n        # Enable logging in debug mode (always) and release mode (when specified)\n        if env['DEFAULT_LOG_SEVERITY']:\n            if env['DEFAULT_LOG_SEVERITY'] not in severities:\n                severities_list = ', '.join(\"'%s'\" % s for s in severities)\n                color_print(1,\"Cannot set default logger severity to '%s', available options are %s.\" % (env['DEFAULT_LOG_SEVERITY'], severities_list))\n                Exit(1)\n            else:\n                log_severity = severities.index(env['DEFAULT_LOG_SEVERITY'])\n        else:\n            severities_list = ', '.join(\"'%s'\" % s for s in severities)\n            color_print(1,\"No logger severity specified, available options are %s.\" % severities_list)\n            Exit(1)\n\n        log_enabled = ['-DMAPNIK_LOG', '-DMAPNIK_DEFAULT_LOG_SEVERITY=%d' % log_severity]\n\n        if env['DEBUG']:\n            debug_defines += log_enabled\n        else:\n            if env['ENABLE_LOG']:\n                ndebug_defines += log_enabled\n\n        # Enable statistics reporting\n        if env['ENABLE_STATS']:\n            debug_defines.append('-DMAPNIK_STATS')\n            ndebug_defines.append('-DMAPNIK_STATS')\n\n        # Add rdynamic to allow using statics between application and plugins\n        # http://stackoverflow.com/questions/8623657/multiple-instances-of-singleton-across-shared-libraries-on-linux\n        if env['PLATFORM'] != 'Darwin' and env['CXX'] == 'g++':\n            env.MergeFlags('-rdynamic')\n\n        if env['DEBUG']:\n            env.Append(CXXFLAGS = debug_flags)\n            env.Append(CPPDEFINES = debug_defines)\n        else:\n            env.Append(CPPDEFINES = ndebug_defines)\n\n        # Common flags for g++/clang++ CXX compiler.\n        # TODO: clean up code more to make -Wextra -Wsign-compare -Wsign-conversion -Wconversion viable\n        # -Wfloat-equal -Wold-style-cast -Wexit-time-destructors -Wglobal-constructors -Wreserved-id-macro -Wheader-hygiene -Wmissing-noreturn\n        common_cxx_flags = '-fvisibility=hidden -fvisibility-inlines-hidden -Wall %s %s -ftemplate-depth-300 -Wsign-compare ' % (env['WARNING_CXXFLAGS'], pthread)\n\n        if 'clang++' in env['CXX']:\n            common_cxx_flags += ' -Wno-unsequenced  -Wtautological-compare -Wheader-hygiene '\n        if env['DEBUG']:\n            env.Append(CXXFLAGS = common_cxx_flags + '-O0')\n        else:\n            env.Append(CXXFLAGS = common_cxx_flags + '-O%s' % (env['OPTIMIZATION']))\n\n\n        # if requested, sort LIBPATH and CPPPATH one last time before saving...\n        if env['PRIORITIZE_LINKING']:\n            conf.prioritize_paths(silent=True)\n\n        # finish config stage and pickle results\n        env = conf.Finish()\n        env_cache = open(SCONS_CONFIGURE_CACHE, 'wb')\n        pickle_dict = {}\n        for i in pickle_store:\n            pickle_dict[i] = env.get(i)\n        pickle.dump(pickle_dict, env_cache)\n        env_cache.close()\n        # fix up permissions on configure outputs\n        # this is hackish but avoids potential problems\n        # with a non-root configure following a root install\n        # that also triggered a re-configure\n        try:\n            os.chmod(SCONS_CONFIGURE_CACHE,0o666)\n        except: pass\n        try:\n            os.chmod(SCONS_LOCAL_CONFIG,0o666)\n        except: pass\n        try:\n            os.chmod('.sconsign.dblite',0o666)\n        except: pass\n        try:\n            os.chmod(SCONS_LOCAL_LOG,0o666)\n        except: pass\n        try:\n            for item in glob('%s/*' % SCONF_TEMP_DIR):\n                os.chmod(item,0o666)\n        except: pass\n\n        if 'configure' in command_line_args:\n            color_print(4,'\\nConfigure completed: run `make` to build or `make install`')\n            if not HELP_REQUESTED:\n                Exit(0)\n\n# autogenerate help on default/current SCons options\nHelp(opts.GenerateHelpText(env))\n\n#### Builds ####\nif not HELP_REQUESTED:\n\n    if 'uninstall' in COMMAND_LINE_TARGETS:\n        # dummy action in case there is nothing to uninstall, to avoid phony error..\n        env.Alias(\"uninstall\", \"\")\n    env['create_uninstall_target'] = create_uninstall_target\n\n    if env['PKG_CONFIG_PATH']:\n        env['ENV']['PKG_CONFIG_PATH'] = fix_path(env['PKG_CONFIG_PATH'])\n        # otherwise this variable == os.environ[\"PKG_CONFIG_PATH\"]\n\n    if env['PATH']:\n        env['ENV']['PATH'] = fix_path(env['PATH']) + ':' + env['ENV']['PATH']\n\n    if env['PATH_REMOVE']:\n        for p in env['PATH_REMOVE'].split(':'):\n            if p in env['ENV']['PATH']:\n                env['ENV']['PATH'].replace(p,'')\n            rm_path(p,'LIBPATH',env)\n            rm_path(p,'CPPPATH',env)\n            rm_path(p,'CXXFLAGS',env)\n            rm_path(p,'CAIRO_LIBPATHS',env)\n            rm_path(p,'CAIRO_CPPPATHS',env)\n\n    if env['PATH_REPLACE']:\n        searches,replace = env['PATH_REPLACE'].split(':')\n        for search in searches.split(','):\n            if search in env['ENV']['PATH']:\n                env['ENV']['PATH'] = os.path.abspath(env['ENV']['PATH'].replace(search,replace))\n            def replace_path(set,s,r):\n                idx = 0\n                for i in env[set]:\n                    if s in i:\n                        env[set][idx] = os.path.abspath(env[set][idx].replace(s,r))\n                    idx +=1\n            replace_path('LIBPATH',search,replace)\n            replace_path('CPPPATH',search,replace)\n            replace_path('CXXFLAGS',search,replace)\n            replace_path('CAIRO_LIBPATHS',search,replace)\n            replace_path('CAIRO_CPPPATHS',search,replace)\n\n    # Adjust verbosity\n    if env['QUIET']:\n        env.Append(CXXCOMSTR = \"Compiling $SOURCE\")\n        env.Append(SHCXXCOMSTR = \"Compiling shared $SOURCE\")\n        env.Append(LINKCOMSTR = \"Linking $TARGET\")\n        env.Append(SHLINKCOMSTR = \"Linking shared $TARGET\")\n\n    # export env so it is available in build.py files\n    Export('env')\n\n    plugin_base = env.Clone()\n\n    if env['COVERAGE']:\n        plugin_base.Append(LINKFLAGS='--coverage')\n        plugin_base.Append(CXXFLAGS='--coverage')\n\n    Export('plugin_base')\n\n    # Build agg first, doesn't need anything special\n    if env['RUNTIME_LINK'] == 'shared':\n        SConscript('deps/agg/build.py')\n\n    # Build spirit grammars\n    SConscript('src/json/build.py')\n    SConscript('src/wkt/build.py')\n\n    # Build the core library\n    SConscript('src/build.py')\n\n    # Install headers\n    SConscript('include/build.py')\n\n    # Build the requested and able-to-be-compiled input plug-ins\n    GDAL_BUILT = False\n    OGR_BUILT = False\n    POSTGIS_BUILT = False\n    PGRASTER_BUILT = False\n    for plugin in env['PLUGINS']:\n        if env['PLUGIN_LINKING'] == 'static' or plugin not in env['REQUESTED_PLUGINS']:\n            if os.path.exists('plugins/input/%s.input' % plugin):\n                os.unlink('plugins/input/%s.input' % plugin)\n        elif plugin in env['REQUESTED_PLUGINS']:\n            details = env['PLUGINS'][plugin]\n            if details['lib'] in env['LIBS']:\n                if env['PLUGIN_LINKING'] == 'shared':\n                    SConscript('plugins/input/%s/build.py' % plugin)\n                # hack to avoid breaking on plugins with the same dep\n                if plugin == 'ogr': OGR_BUILT = True\n                if plugin == 'gdal': GDAL_BUILT = True\n                if plugin == 'postgis': POSTGIS_BUILT = True\n                if plugin == 'pgraster': PGRASTER_BUILT = True\n                if plugin == 'ogr' or plugin == 'gdal':\n                    if GDAL_BUILT and OGR_BUILT:\n                        env['LIBS'].remove(details['lib'])\n                elif plugin == 'postgis' or plugin == 'pgraster':\n                    if POSTGIS_BUILT and PGRASTER_BUILT:\n                        env['LIBS'].remove(details['lib'])\n                else:\n                    env['LIBS'].remove(details['lib'])\n            elif not details['lib']:\n                if env['PLUGIN_LINKING'] == 'shared':\n                    # build internal datasource input plugins\n                    SConscript('plugins/input/%s/build.py' % plugin)\n            else:\n                color_print(1,\"Notice: dependencies not met for plugin '%s', not building...\" % plugin)\n                if os.path.exists('plugins/input/%s.input' % plugin):\n                    os.unlink('plugins/input/%s.input' % plugin)\n\n    create_uninstall_target(env, env['MAPNIK_LIB_DIR_DEST'], False)\n    create_uninstall_target(env, env['MAPNIK_INPUT_PLUGINS_DEST'] , False)\n\n    if 'install' in COMMAND_LINE_TARGETS:\n        # if statically linking plugins still make sure\n        # to create the dynamic plugins directory\n        if env['PLUGIN_LINKING'] == 'static':\n            if not os.path.exists(env['MAPNIK_INPUT_PLUGINS_DEST']):\n                os.makedirs(env['MAPNIK_INPUT_PLUGINS_DEST'])\n        # before installing plugins, wipe out any previously\n        # installed plugins that we are no longer building\n        for plugin in PLUGINS.keys():\n            plugin_path = os.path.join(env['MAPNIK_INPUT_PLUGINS_DEST'],'%s.input' % plugin)\n            if os.path.exists(plugin_path):\n                if plugin not in env['REQUESTED_PLUGINS'] or env['PLUGIN_LINKING'] == 'static':\n                    color_print(4,\"Notice: removing out of date plugin: '%s'\" % plugin_path)\n                    os.unlink(plugin_path)\n\n    # Build the c++ rundemo app if requested\n    if not env['HOST']:\n        if env['DEMO']:\n            SConscript('demo/c++/build.py')\n\n    # Build shapeindex and remove its dependency from the LIBS\n    if not env['HOST']:\n        if 'boost_program_options%s' % env['BOOST_APPEND'] in env['LIBS']:\n            if env['SHAPEINDEX']:\n                SConscript('utils/shapeindex/build.py')\n            if env['MAPNIK_INDEX']:\n                SConscript('utils/mapnik-index/build.py')\n            # Build the pgsql2psqlite app if requested\n            if env['PGSQL2SQLITE']:\n                SConscript('utils/pgsql2sqlite/build.py')\n            if env['SVG2PNG']:\n                SConscript('utils/svg2png/build.py')\n            if env['MAPNIK_RENDER']:\n                SConscript('utils/mapnik-render/build.py')\n            # devtools not ready for public\n            #SConscript('utils/ogrindex/build.py')\n            env['LIBS'].remove('boost_program_options%s' % env['BOOST_APPEND'])\n        else :\n            color_print(1,\"WARNING: Cannot find boost_program_options. 'shapeindex' and other command line programs will not be available\")\n\n    # Configure fonts and if requested install the bundled DejaVu fonts\n    SConscript('fonts/build.py')\n\n    # build C++ tests\n    SConscript('test/build.py')\n\n    if env['BENCHMARK']:\n        SConscript('benchmark/build.py')\n\n    if os.path.exists('./bindings/python/build.py'):\n        SConscript('./bindings/python/build.py')\n\n    # install mapnik-config script\n    SConscript('utils/mapnik-config/build.py')\n\n    # write the viewer.ini file\n    SConscript('demo/viewer/build.py')\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.126953125,
          "content": "ignore:\n  - \"mason_packages\"\n  - \"benchmark\"\n  - \"deps\"\n  - \".sconf_temp\"\n  - \"scons\"\n  - \"test\"\n  - \"demo\"\n  - \"docs\"\n  - \"fonts\""
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 1.076171875,
          "content": "#! /usr/bin/env bash\n\nset -eu\n\n: ${PYTHON:=python}\n\n# Only some shells (Bash and Z shell) support arrays. Therefore,\n# the following code provides an alternative for users calling the script\n# with shells other than Bash or Z shell (e.g. Debian users using Dash).\nTHE_SHELL=$(basename $SHELL)\nif [ \"$THE_SHELL\" != \"bash\" ] && [ \"$THE_SHELL\" != \"zsh\" ]; then\n    if [ -f mapnik-settings.env ]; then\n        echo \"WARNING: Reading from mapnik-settings.env is supported with Bash or Z shell only.\"\n    fi\n    $PYTHON scons/scons.py --implicit-deps-changed configure \"$@\"\n    exit 0\nfi\n\n# mapnik-settings.env is an optional file to store\n# environment variables that should be used before\n# running tests like PROJ_LIB, GDAL_DATA, and ICU_DATA\n# These do not normally need to be set except when\n# building against binary versions of dependencies like\n# done via bootstrap.sh\n\nif [ -f mapnik-settings.env ]; then\n    echo \"Inheriting from mapnik-settings.env\"\n    . ./mapnik-settings.env\n    VARS=( $(cat mapnik-settings.env) )\nfi\n\n$PYTHON scons/scons.py --implicit-deps-changed configure ${VARS[*]:-} \"$@\"\n"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "fonts",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "localize.sh",
          "type": "blob",
          "size": 0.951171875,
          "content": "#!/bin/bash\n\n# TODO - use rpath to avoid needing this to run tests locally\n\nexport CURRENT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\nif [[ $(uname -s) == 'Darwin' ]]; then\n    export DYLD_LIBRARY_PATH=\"${CURRENT_DIR}/src/\":${DYLD_LIBRARY_PATH:-\"\"}\nelif [[ $(uname -s) == 'Linux' ]]; then\n    export LD_LIBRARY_PATH=\"${CURRENT_DIR}/src/\":${LD_LIBRARY_PATH:-\"\"}\nfi\n\nexport PATH=$(pwd)/utils/mapnik-render/:${PATH}\nexport PATH=$(pwd)/utils/mapnik-index/:${PATH}\nexport PATH=$(pwd)/utils/mapnik-config/:${PATH}\nexport PATH=$(pwd)/utils/shapeindex/:${PATH}\n\n# mapnik-settings.env is an optional file to store\n# environment variables that should be used before\n# running tests like PROJ_LIB, GDAL_DATA, and ICU_DATA\n# These do not normally need to be set except when\n# building against binary versions of dependencies like\n# done via bootstrap.sh\nif [[ -f mapnik-settings.env ]]; then\n    echo \"Inheriting from mapnik-settings.env\"\n    source mapnik-settings.env\nfi\n"
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "scons",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "vcpkg.json",
          "type": "blob",
          "size": 1.216796875,
          "content": "{\n  \"name\": \"mapnik\",\n  \"version-string\": \"master\",\n  \"description\": \"Mapnik is an open source toolkit for developing mapping applications.\",\n  \"homepage\": \"https://github.com/mapnik/mapnik\",\n  \"dependencies\": [\n    \"boost-assign\",\n    \"boost-bimap\",\n    \"boost-format\",\n    \"boost-geometry\",\n    \"boost-gil\",\n    \"boost-interprocess\",\n    {\n      \"name\": \"boost-locale\",\n      \"features\": [\n        \"icu\"\n      ]\n    },\n    \"boost-msm\",\n    \"boost-program-options\",\n    \"boost-property-tree\",\n    {\n      \"name\": \"boost-regex\",\n      \"features\": [\n        \"icu\"\n      ]\n    },\n    \"boost-spirit\",\n    \"boost-system\",\n    \"cairo\",\n    \"cairomm\",\n    {\n      \"name\": \"freetype\",\n      \"features\": [\n        \"bzip2\",\n        \"png\"\n      ]\n    },\n    \"gdal\",\n    {\n      \"name\": \"harfbuzz\",\n      \"features\": [\n        \"icu\"\n      ]\n    },\n    {\n      \"name\": \"harfbuzz\",\n      \"features\": [\n        \"coretext\"\n      ],\n      \"platform\": \"osx\"\n    },\n    \"icu\",\n    \"libjpeg-turbo\",\n    \"libpng\",\n    \"libpq\",\n    \"libwebp\",\n    \"libxml2\",\n    \"mapbox-geometry\",\n    \"mapbox-polylabel\",\n    \"mapbox-variant\",\n    \"proj\",\n    \"protozero\",\n    {\n      \"name\": \"sqlite3\",\n      \"features\": [\n        \"rtree\"\n      ]\n    },\n    \"tiff\",\n    \"zlib\"\n  ]\n}\n"
        }
      ]
    }
  ]
}