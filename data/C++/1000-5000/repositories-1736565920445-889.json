{
  "metadata": {
    "timestamp": 1736565920445,
    "page": 889,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "facebookincubator/spectrum",
      "stars": 1990,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1630859375,
          "content": "# Android / Gradle / Intellij\nlocal.properties\n*.iml\n.gradle\n.idea\n.externalNativeBuild\nbuild\nexternal\nandroidLibs/third-party/*/merge\nios/SpectrumKitSample/Pods\n.cxx\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.79296875,
          "content": "# 1.3.0 (Jan, 2022)\nPlease see GitHub for detailed changes: https://github.com/facebookincubator/spectrum/compare/v1.2.0...v1.3.0\n\n# 1.2.0 (Jun 5, 2020)\n- Error is now reported for images with a pixel format kCGImagePixelFormatRGB555 (iOS)\n- Fixed an issue by which metadata wouldn't be added to the encoded image\n- Avoids copying thumbnail metadata on transcoded images\n- Renamed VectorImageSink to VectorBitmapImageSink\n- Fixed Kotlin compatibility issues from SoLoaderWrapper\n- Fixed an issue that would result in ignoring the output pixel specification in certain situations\n- Increased test coverage\n- Fixed heap-use-after-free in avif decompressor\n- Support RGBA for PNG compression\n- Fixed compilation on Windows\n- Fixed memory leak in ScalingScanlineProcessingBlock\n- Updated deps: libavif 0.6.2, libwebp 1.1.0\n\n\n# 1.1.0 (May 24, 2019)\n\n - Spectrum now supports modular headers when using cocoapods\n - Spectrum now supports setting the compression level for libpng\n - Spectrum now supports setting a custom SoLoader implementation\n - Fixed Spectrum's PNG encode operations from ARGB input\n - Spectrum's dependency on libwebp is updated to 1.0.2\n - Spectrum has experimental support for decoding AV1 frames in IVF containers\n - Improved documentation including highlights of Kotlin/Swift interoperability\n - Various fixes and improvements\n\n# 1.0.0 (January 17, 2019)\n\n - Spectrum can now write interlaced PNG files\n - Spectrum now supports consuming JPEG images with 4:1:1 and 4:4:0 chroma subsampling (see GitHub issue 8)\n - Spectrum will default to 4:2:0 chroma subsampling for iOS bitmaps\n - Spectrum builds with proper SIMD support for mozjpeg on Android ARMv7\n - Fixed Spectrum build on case-sensitive file systems\n - Improved documentation\n - Various fixes and improvements\n\n# 0.9.0 (November 20, 2018)\n\n - Initial release\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.27734375,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at <opensource-conduct@fb.com>. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.744140625,
          "content": "# Contributing to Spectrum\n\nWe aim to make contributing to this project as easy and transparent as possible.\n\n## Issues\n\nWe use GitHub issues to track public bugs. Please ensure your description is clear and has sufficient instructions to be able to reproduce the issue.\n\n## Security Issues\n\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe disclosure of security bugs. In those cases, please go through the process outlined on that page and do not file a public issue.\n\n## Pull Requests\n\nWe welcome pull requests.\n\n1. Fork the repo and create your branch from `master`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed or added APIs, update the documentation.\n4. Make sure the test suite passes.\n5. If you haven't already, complete the [Contributor License Agreement](https://code.facebook.com/cla) (\"CLA\").\n\n## Our Development Process\n\nEach pull request is first submitted into Facebook's internal repositories by a Facebook team member. Once the commit has successfully passed Facebook's internal test suite, it will be exported back out from Facebook's repository. We endeavour to do this as soon as possible for all commits.\n\n## Contributor License Agreement (\"CLA\")\n\nIn order to accept your pull request, we need you to submit a CLA. You only need to do this once to work on any of Facebook's open source projects.\n\nComplete your CLA here: https://code.facebook.com/cla.\n\n## License\n\nBy contributing to Spectrum, you agree that your contributions will be licensed under its MIT license.\n\n## Coding Style\n\nMatch the style and conventions of the surrounding code. We have automated tools that will enforce style for some files (e.g. the C++ core) once we import your pull request into our internal code reviewing tools.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.060546875,
          "content": "MIT License\n\nCopyright (c) Facebook, Inc. and its affiliates.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.7958984375,
          "content": "<p align=\"center\">\n  <a href=\"https://libspectrum.io/\">\n    <img src=\"website/static/img/spectrum_logo_color.svg\" width=\"20%\" />\n  </a>\n</p>\n<h1 align=\"center\">\n  Spectrum\n</h1>\n<p align=\"center\">\n  <a href=\"https://circleci.com/gh/facebookincubator/spectrum\">\n    <img src=\"https://circleci.com/gh/facebookincubator/spectrum.svg?style=svg\" alt=\"CircleCI\" />\n  </a>\n</p>\n\nSpectrum is a cross-platform image transcoding library that can easily be integrated into an Android or iOS project to efficiently perform common image operations.\n\nThe Spectrum APIs incorporate declarative traits. This simplifies the usage for the developer by focusing on the desired outcome. At the same time it enables Spectrum to transparently choose the best execution sequence. Additionally, Spectrum makes common image operations simple by surfacing many difficult operations that are not typically exposed by platform frameworks. For example, some JPEG-to-JPEG operations like cropping are executed lossless, and disabling chroma sub-sampling when saving graphical JPEGs will lead to better quality final products.\n\nFind out more at our [website](https://libspectrum.io).\n\n## Requirements\n\nSpectrum was built with mobile iOS and Android in mind but could be wrapped for any platform.\n\n## Getting started\n\nPlease refer to our _Getting Started chapters_ in our documentation to start using Spectrum to transcode your images on [Android](https://libspectrum.io/docs/getting_started_android) and [iOS](https://libspectrum.io/docs/getting_started_ios).\n\n## Join the Spectrum community\n\nPlease use our [issues page](https://github.com/facebookincubator/spectrum/issues) to let us know of any problems.\n\nFor pull requests, please see the [CONTRIBUTING](./CONTRIBUTING.md) file for information on how to help out.\n\n## License\n\nSpectrum is [MIT-licensed](./LICENSE).\n"
        },
        {
          "name": "Specs",
          "type": "tree",
          "content": null
        },
        {
          "name": "SpectrumCore.podspec",
          "type": "blob",
          "size": 2.5068359375,
          "content": "# Copyright (c) Facebook, Inc. and its affiliates.\n\ncompiler_flags = '-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1 -DSPECTRUM_TARGET_IOS -DSPECTRUM_EXTERNAL'\n\nversion = '1.3.0'\n\nPod::Spec.new do |spec|\n  spec.name = 'SpectrumCore'\n  spec.version = version\n  spec.summary = 'A client-side image transcoding library.'\n  spec.description = <<-DESC\nSpectrum is a cross-platform image transcoding library that can easily be integrated into an iOS project to efficiently perform common image operations.\n                       DESC\n\n  spec.homepage = 'http://libspectrum.io'\n  spec.license = { :type => 'MIT', :file => 'LICENSE' }\n  spec.authors = 'Facebook'\n  spec.source = { :git => 'https://github.com/facebookincubator/spectrum.git', :tag => \"v#{version}\" }\n  spec.ios.deployment_target = '8.0'\n  spec.default_subspecs = 'Plugins/Jpeg',\n                          'Plugins/Png',\n                          'Plugins/Webp'\n\n  spec.dependency 'spectrum-folly', '~> 2019.01.21.00'\n  spec.compiler_flags = compiler_flags\n\n  spec.subspec 'Base' do |base_spec|\n    base_spec.header_dir = 'spectrum'\n    base_spec.header_mappings_dir = 'cpp/spectrum'\n    base_spec.source_files = 'cpp/spectrum/**/*.{h,cpp}'\n    base_spec.exclude_files = 'cpp/spectrum/plugins'\n  end\n\n  spec.subspec 'Plugins' do |plugins_spec|\n    plugins_spec.subspec 'Jpeg' do |plugins_jpeg_spec|\n      plugins_jpeg_spec.dependency 'SpectrumCore/Base', version\n      plugins_jpeg_spec.dependency 'mozjpeg', '3.3.2'\n      plugins_jpeg_spec.source_files = 'cpp/spectrum/plugins/jpeg/**/*.{h,cpp}'\n      plugins_jpeg_spec.header_dir = 'spectrum/plugins/jpeg'\n      plugins_jpeg_spec.header_mappings_dir = 'cpp/spectrum/plugins/jpeg'\n    end\n\n    plugins_spec.subspec 'Png' do |plugins_png_spec|\n      plugins_png_spec.dependency 'SpectrumCore/Base', version\n      plugins_png_spec.dependency 'libpng', '~> 1.6.35'\n      plugins_png_spec.source_files = 'cpp/spectrum/plugins/png/**/*.{h,cpp}'\n      plugins_png_spec.header_dir = 'spectrum/plugins/png'\n      plugins_png_spec.header_mappings_dir = 'cpp/spectrum/plugins/png'\n    end\n\n    plugins_spec.subspec 'Webp' do |plugins_webp_spec|\n      plugins_webp_spec.dependency 'SpectrumCore/Base', version\n      plugins_webp_spec.dependency 'libwebp', '~> 1.1.0'\n      plugins_webp_spec.source_files = 'cpp/spectrum/plugins/webp/**/*.{h,cpp}'\n      plugins_webp_spec.header_dir = 'spectrum/plugins/webp'\n      plugins_webp_spec.header_mappings_dir = 'cpp/spectrum/plugins/webp'\n      plugins_webp_spec.compiler_flags = \"-DCOCOAPODS_BUILD\"\n    end\n  end\nend\n"
        },
        {
          "name": "SpectrumKit.podspec",
          "type": "blob",
          "size": 2.736328125,
          "content": "# Copyright (c) Facebook, Inc. and its affiliates.\n\ncompiler_flags = '-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1'\n\nversion = '1.3.0'\n\nPod::Spec.new do |spec|\n  spec.name = 'SpectrumKit'\n  spec.version = version\n  spec.summary = 'A client-side image transcoding library.'\n  spec.description = <<-DESC\nSpectrum is a cross-platform image transcoding library that can easily be integrated into an  iOS project to efficiently perform common image operations.\n                       DESC\n\n  spec.homepage = 'http://libspectrum.io'\n  spec.license = { :type => 'MIT', :file => 'LICENSE' }\n  spec.authors = 'Facebook'\n  spec.source = { :git => 'https://github.com/facebookincubator/spectrum.git', :tag => \"v#{version}\" }\n  spec.ios.deployment_target = '8.0'\n  spec.default_subspecs = 'Plugins/Default'\n  spec.dependency 'spectrum-folly', '~> 2019.01.21.00'\n  spec.compiler_flags = compiler_flags\n\n  spec.subspec 'Base' do |base_spec|\n    base_spec.header_dir = 'SpectrumKit'\n    base_spec.source_files = 'ios/SpectrumKit/SpectrumKit/**/*.{h,m,mm}'\n    base_spec.dependency 'SpectrumCore/Base'\n    base_spec.exclude_files = 'ios/SpectrumKit/SpectrumKit/Internal'\n    base_spec.public_header_files = 'ios/SpectrumKit/SpectrumKit/Configuration/**/*.h',\n                                    'ios/SpectrumKit/SpectrumKit/*.h',\n                                    'ios/SpectrumKit/SpectrumKit/Requirements/*.h',\n                                    'ios/SpectrumKit/SpectrumKit/Misc/*.h',\n                                    'ios/SpectrumKit/SpectrumKit/Image/*.h'\n  end\n\n  spec.subspec 'Plugins' do |plugins_spec|\n    plugins_spec.subspec 'Default' do |default_spec|\n      default_spec.dependency 'SpectrumKit/Plugins/Jpeg', version\n      default_spec.dependency 'SpectrumKit/Plugins/Png', version\n      default_spec.dependency 'SpectrumKit/Plugins/Webp', version\n      default_spec.source_files = 'ios/SpectrumKit/SpectrumKitPlugins/Default/**/*'\n    end\n\n    plugins_spec.subspec 'Jpeg' do |plugins_jpeg_spec|\n      plugins_jpeg_spec.dependency 'SpectrumKit/Base', version\n      plugins_jpeg_spec.dependency 'SpectrumCore/Plugins/Jpeg'\n      plugins_jpeg_spec.source_files = 'ios/SpectrumKit/SpectrumKitPlugins/Jpeg/**/*'\n    end\n\n    plugins_spec.subspec 'Png' do |plugins_png_spec|\n      plugins_png_spec.dependency 'SpectrumKit/Base', version\n      plugins_png_spec.dependency 'SpectrumCore/Plugins/Png', version\n      plugins_png_spec.source_files = 'ios/SpectrumKit/SpectrumKitPlugins/Png/**/*'\n    end\n\n    plugins_spec.subspec 'Webp' do |plugins_webp_spec|\n      plugins_webp_spec.dependency 'SpectrumKit/Base', version\n      plugins_webp_spec.dependency 'SpectrumCore/Plugins/Webp', version\n      plugins_webp_spec.source_files = 'ios/SpectrumKit/SpectrumKitPlugins/Webp/**/*'\n    end\n  end\nend\n"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "androidLibs",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 7.400390625,
          "content": "// Copyright (c) Facebook, Inc. and its affiliates.\n//\n// This source code is licensed under the MIT license found in the\n// LICENSE file in the root directory of this source tree.\n\n// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    ext {\n        minSdkVersion = 15\n        targetSdkVersion = 28\n        compileSdkVersion = 28\n        kotlinVersion = '1.6.10'\n        buildToolsVersion = '30.0.2'\n        sourceCompatibilityVersion = JavaVersion.VERSION_1_7\n        targetCompatibilityVersion = JavaVersion.VERSION_1_7\n    }\n    repositories {\n        google()\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:7.0.4'\n        classpath 'com.vanniktech:gradle-maven-publish-plugin:0.18.0'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion\"\n    }\n}\n\nplugins {\n    id 'de.undercouch.download' version '3.4.3'\n}\n\nsubprojects {\n    repositories {\n        google()\n        mavenLocal()\n        mavenCentral()\n    }\n}\n\next.isRelease = { ['publish', 'publishToMaven'].any { gradle.startParameter.taskNames.contains(it) } }\n\next.deps = [\n        // Android Support Libraries\n        supportAppCompat: 'androidx.appcompat:appcompat:1.0.0',\n        supportTestRunner: 'androidx.test:runner:1.1.0',\n        supportTestRules: 'androidx.test:rules:1.1.0',\n        supportMultidex: 'androidx.multidex:multidex:2.0.1',\n\n        // Annotations\n        jsr305: 'com.google.code.findbugs:jsr305:3.0.1',\n\n        // First-party\n        soloader: 'com.facebook.soloader:soloader:0.10.4',\n\n        // Third-party\n        dexmaker: 'com.google.dexmaker:dexmaker:1.2',\n        dexmakerMockito: 'com.google.dexmaker:dexmaker-mockito:1.2',\n        festAssert: 'org.easytesting:fest-assert-core:2.0M10',\n        junit: 'junit:junit:4.12',\n        kotlinAndroidKtx: 'androidx.core:core-ktx:1.0.1',\n        kotlinJdk: \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion\",\n        mockitoCore: 'org.mockito:mockito-core:1.10.19',\n        robolectric: 'org.robolectric:robolectric:3.0',\n]\n\n//\n// Custom plugin to download external native libraries and merge them with our\n// overrides and custom configurations.\n//\n\napply plugin: 'de.undercouch.download'\nimport de.undercouch.gradle.tasks.download.Download\n\nclass SpectrumDownloadAndMergeExtension {\n    String externalSourceUri\n    String externalSourceInclude\n    String overrideInclude\n\n    // The files matching pattern and action are used for replacing tokens\n    // in the imported third-party files. E.g. to emulate an \"./configure\" call\n    String filesMatchingPattern\n    Action<? super FileCopyDetails> filesMatchingAction\n\n    /**\n     * The cache revision is used to avoid invalidating the gradle cache information\n     * of external files copied from other destinations. Such invalidation (e.g.\n     * updating the timestamp causes the entire native code to be rebuild). And\n     * we care about developer experience.\n     *\n     * As a consequence, the cache revision needs to be updated when there's any\n     * change regarding the external dependency (either the downloaded version\n     * of the override)\n     */\n    Integer cacheRevision\n}\n\nclass SpectrumDownloadAndMergePlugin implements Plugin<Project> {\n\n    final def getDownloadFileName = { final URL src ->\n        final def i = src.file.lastIndexOf('/')\n        return src.file.substring(i + 1)\n    }\n\n    boolean isCacheOutOfDate(\n            final File revisionFile,\n            final Integer revisionNumber,\n            final String projectName = null) {\n        boolean outOfDate = false\n        if (revisionNumber == null || !revisionFile.exists()) {\n            outOfDate = true\n        } else {\n            final def content = revisionFile.text\n            outOfDate = !content.isInteger() || content as Integer != revisionNumber\n        }\n\n        if (projectName != null) {\n            println \"External library '${projectName}' is \" +\n                    (outOfDate ? \"out-of-date, preparing...\" : \"up-to-date\")\n        }\n        return outOfDate\n    }\n\n    void apply(Project project) {\n        final def extension = project.extensions.create(\n            'downloadAndMergeNativeLibrary',\n            SpectrumDownloadAndMergeExtension)\n\n        final def downloadDir = new File(\"${project.getBuildDir()}/download\")\n        final def extractionDir = new File(\"${project.getBuildDir()}/downloadExtracted\")\n        final def mergeDir = new File(\"${project.getProjectDir()}/merge/${project.name}\")\n        final def overrideDir = new File(\"${project.getProjectDir()}/override\")\n        final def revisionFile = new File(\"${project.getBuildDir()}/spectrum_cache_revision.txt\")\n\n        // extensions are only properly instantiated after evaluation\n        project.afterEvaluate {\n            project.task('createNativeDepsDirectories') {\n                downloadDir.mkdirs()\n                extractionDir.mkdirs()\n                mergeDir.mkdirs()\n            }\n\n            project.task('cleanNativeLibrary', type: Delete) {\n                delete mergeDir\n                delete extractionDir\n            }\n\n            project.task(\n                    'downloadNativeLibrarySource',\n                    dependsOn: 'createNativeDepsDirectories',\n                    type: Download) {\n                src extension.externalSourceUri\n                onlyIfNewer true\n                overwrite false\n                dest new File(downloadDir, getDownloadFileName(src))\n            }\n\n            project.task(\n                    'extractNativeLibrarySource',\n                    dependsOn: 'downloadNativeLibrarySource',\n                    type: Copy) {\n                from project.tarTree(\n                    project.tasks.getByName('downloadNativeLibrarySource').dest)\n                include '**'\n                includeEmptyDirs = false\n                into extractionDir\n            }\n\n            project.task(\n                    'copyExternalSources',\n                    dependsOn: 'extractNativeLibrarySource',\n                    type: Copy) {\n                onlyIf {\n                  isCacheOutOfDate(revisionFile, extension.cacheRevision)\n                }\n                from extractionDir\n                include extension.externalSourceInclude\n                includeEmptyDirs = false\n                if (extension.filesMatchingPattern != null) {\n                    filesMatching(extension.filesMatchingPattern, extension.filesMatchingAction)\n                }\n                into mergeDir\n            }\n\n            project.task(\n                    'copyOverrideSources',\n                    dependsOn: 'copyExternalSources',\n                    type: Copy) {\n                onlyIf {\n                  isCacheOutOfDate(revisionFile, extension.cacheRevision)\n                }\n                from overrideDir\n                include extension.overrideInclude\n                includeEmptyDirs = false\n                into mergeDir\n            }\n\n            project.task(\n                    'prepareNativeLibrary',\n                    dependsOn: 'copyOverrideSources') {\n                onlyIf {\n                  isCacheOutOfDate(revisionFile, extension.cacheRevision, project.name)\n                }\n                doLast {\n                  println \"Prepared library '${project.name}' in folder ${mergeDir}\"\n                  revisionFile.text = extension.cacheRevision.toString()\n                }\n            }\n        }\n    }\n}\n\next.SpectrumDownloadAndMergePlugin = SpectrumDownloadAndMergePlugin\n"
        },
        {
          "name": "cpp",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.9072265625,
          "content": "# Copyright (c) Facebook, Inc. and its affiliates.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\n# POM publishing constants\nVERSION_NAME=1.3.0\nGROUP=com.facebook.spectrum\nSONATYPE_STAGING_PROFILE=comfacebook\nPOM_URL=https://github.com/facebookincubator/spectrum\nPOM_SCM_URL=https://github.com/facebookincubator/spectrum.git\nPOM_SCM_CONNECTION=scm:git:https://github.com/facebookincubator/spectrum.git\nPOM_SCM_DEV_CONNECTION=scm:git:git@github.com:facebookincubator/spectrum.git\nPOM_LICENCE_NAME=MIT\nPOM_LICENCE_URL=https://github.com/facebookincubator/spectrum/blob/master/LICENSE\nPOM_ISSUES_URL=https://github.com/facebookincubator/spectrum/issues\nPOM_LICENCE_DIST=repo\nPOM_DEVELOPER_ID=facebook\nPOM_DEVELOPER_NAME=facebook\n\n# Global build constants for gradle\nandroid.useAndroidX=true\n\n# Deps for publishing\nGRADLE_VERSIONS_PLUGIN_VERSION=0.15.0\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.171875,
          "content": "#!/usr/bin/env sh\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=$(save \"$@\")\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\n# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\nif [ \"$(uname)\" = \"Darwin\" ] && [ \"$HOME\" = \"$PWD\" ]; then\n  cd \"$(dirname \"$0\")\"\nfi\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.20703125,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windows variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "ios",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.9951171875,
          "content": "// Copyright (c) Facebook, Inc. and its affiliates.\n//\n// This source code is licensed under the MIT license found in the\n// LICENSE file in the root directory of this source tree.\n\ninclude ':android'\ninclude ':android:sample'\ninclude ':android:spectrumdefault'\ninclude ':android:spectrumpluginjpeg'\ninclude ':android:spectrumpluginplatform'\ninclude ':android:spectrumpluginpng'\ninclude ':android:spectrumpluginwebp'\ninclude ':android:spectrumtestutils'\ninclude ':android:spectrumtests'\ninclude ':cpp'\ninclude ':fbjni'\ninclude ':folly'\ninclude ':glog'\ninclude ':libpng'\ninclude ':libwebp'\ninclude ':mozjpeg'\n\nproject(':fbjni').projectDir = file('androidLibs/fbjni')\nproject(':folly').projectDir = file('androidLibs/third-party/folly')\nproject(':glog').projectDir = file('androidLibs/third-party/glog')\nproject(':libpng').projectDir = file('androidLibs/third-party/libpng')\nproject(':libwebp').projectDir = file('androidLibs/third-party/libwebp')\nproject(':mozjpeg').projectDir = file('androidLibs/third-party/mozjpeg')\n"
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}