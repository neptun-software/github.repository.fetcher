{
  "metadata": {
    "timestamp": 1736565284632,
    "page": 98,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jarro2783/cxxopts",
      "stars": 4288,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.4453125,
          "content": "---\nLanguage:        Cpp\nBasedOnStyle:  LLVM\nAccessModifierOffset: 0\nAlignConsecutiveAssignments: true\nAlwaysBreakAfterReturnType: TopLevel\nBreakBeforeBraces: Custom\nBraceWrapping:\n  AfterEnum: true\n  AfterClass: true\n  AfterStruct: true\n  AfterFunction: true\n  AfterNamespace: true\n  AfterControlStatement: Always\n  BeforeElse: true\nConstructorInitializerIndentWidth: 2\nContinuationIndentWidth: 2\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7333984375,
          "content": "syntax: glob\n\n# Temporary, cache, swap files\n\\#\\#* \n*.swp\n*.bkp\n\n# Files which \"ask\" to be hidden\n*~\n.*\nunused/\n\n# Build artifacts\n*.a\n*.o\n*.so\n*.ptx\nbin/*\nlib/*\nbuild/\nbuild-*/\nbazel-*\n\n# Core dumps\ncore\ncore.*\ncore-*\n\n# CMake & CTest-generated files\nCMakeCache.txt\nCMakeFiles/\ncmake_install.cmake\nCMakeScripts/*\nCMakeTmp/*\nMakefile\nCTestTestfile.cmake\nTesting/\n\n# Eclise IDE-related files\n.project\n.cproject\n.settings\n\n# CLion IDE-related files\n.idea/\ncmake-build-*/\n\n# Patching\n*.diff\n*.rej\n*.orig\n\n# Files/folders downloaded from other repositories as part of the build\nexternal/*\nthird-party/*\n\n# Miscellaneous\ntags\nlog\n*.log\n*.v3breakpoints\ngmon.out\n.DS_Store\n\n# Doxygen\ndoxygen.log\nDoxyfile\ndocs/\n\n# Archives\n*.zip\n*.gz\n*.bz2\n*.tgz\n*.tar\n*.xz\n\n"
        },
        {
          "name": ".tipi",
          "type": "tree",
          "content": null
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 2.4345703125,
          "content": "sudo: required\ndist: trusty\nlanguage: cpp\nos:\n  - linux\nmatrix:\n  include:\n    - os: linux\n      env: COMPILER=g++-6\n      addons:\n        apt:\n          packages:\n            - g++-6\n          sources: &sources\n            - llvm-toolchain-trusty-3.8\n            - llvm-toolchain-trusty-5.0\n            - ubuntu-toolchain-r-test\n    - os: linux\n      env: COMPILER=g++-6 UNICODE_OPTIONS=-DCXXOPTS_USE_UNICODE_HELP=Yes\n      addons:\n        apt:\n          packages:\n            - g++-6\n          sources: *sources\n    - os: linux\n      env: COMPILER=g++-7\n      addons:\n        apt:\n          packages:\n            - g++-7\n          sources: *sources\n    - os: linux\n      env: COMPILER=g++-7 UNICODE_OPTIONS=-DCXXOPTS_USE_UNICODE_HELP=Yes\n      addons:\n        apt:\n          packages:\n            - g++-7\n          sources: *sources\n    - os: linux\n      env: COMPILER=g++-5\n      addons:\n        apt:\n          packages:\n            - g++-5\n          sources: *sources\n    - os: linux\n      env: COMPILER=g++-5 UNICODE_OPTIONS=-DCXXOPTS_USE_UNICODE_HELP=Yes\n      addons:\n        apt:\n          packages:\n            - g++-5\n          sources: *sources\n    - os: linux\n      env: COMPILER=g++-4.8\n      addons:\n        apt:\n          packages:\n            - g++-4.8\n          sources: *sources\n    - os: linux\n      env: COMPILER=g++-4.8 UNICODE_OPTIONS=-DCXXOPTS_USE_UNICODE_HELP=Yes\n      addons:\n        apt:\n          packages:\n            - g++-4.8\n          sources: *sources\n    - os: linux\n      env: COMPILER=clang++-3.8 CXXFLAGS=-stdlib=libc++\n      addons:\n        apt:\n          packages:\n            - clang-3.8\n            - libc++-dev\n          sources: *sources\n    - os: linux\n      env: COMPILER=clang++-3.8 CXXFLAGS=-stdlib=libc++ UNICODE_OPTIONS=-DCXXOPTS_USE_UNICODE_HELP=Yes\n      addons:\n        apt:\n          packages:\n            - clang-3.8\n            - libc++-dev\n          sources: *sources\n    - os: linux\n      env: COMPILER=clang++-5.0 CMAKE_OPTIONS=-DCXXOPTS_CXX_STANDARD=17\n      addons:\n        apt:\n          packages:\n            - clang-5.0\n            - g++-5\n          sources: *sources\nscript: >\n    cmake -Werror=dev -DCXXOPTS_BUILD_TESTS=ON -DCMAKE_CXX_COMPILER=$COMPILER\n    -DCMAKE_CXX_FLAGS=$CXXFLAGS $UNICODE_OPTIONS $CMAKE_OPTIONS .\n    && make && make ARGS=--output-on-failure test\n\nbefore_install:\n  - if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then brew update          ; fi\n  - if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then brew install icu4c; fi\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 0.353515625,
          "content": "load(\"@rules_cc//cc:defs.bzl\", \"cc_library\")\n\ncc_library(\n    name = \"cxxopts\",\n    hdrs = [\"include/cxxopts.hpp\"],\n    strip_include_prefix = \"include\",\n    visibility = [\"//visibility:public\"],\n)\n\nload(\"@rules_fuzzing//fuzzing:cc_defs.bzl\", \"cc_fuzz_test\")\n\ncc_fuzz_test(\n    name = \"cxxopts_fuzz_test\",\n    srcs = [\"test/fuzz.cpp\"],\n    deps = [\":cxxopts\"],\n)"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 4.6826171875,
          "content": "# Changelog\n\nThis is the changelog for `cxxopts`, a C++11 library for parsing command line\noptions. The project adheres to semantic versioning.\n\n## 3.2.1\n\n### Bug fixes\n\n* Fix compilation with optional on C++20.\n\n## 3.2\n\n### Bug fixes\n\n* Fix unannotated fallthrough.\n* Fix sign conversion with Unicode output.\n* Don't initialize regex in static initialiser.\n* Fix incorrect integer overflow checks.\n\n### Added\n\n* Add fuzzing to CI\n\n### Changed\n\n* Change quote output to '' to match Windows.\n* Don't split positional arguments by the list delimiter.\n* Order help groups by the order they were added.\n\n## 3.1.1\n\n### Bug Fixes\n\n* Fixed version number in header.\n* Fixed cast warning in Unicode function.\n\n## 3.1\n\n### Added\n\n* Support for multiple long names for the same option (= multiple long aliases)\n* Add a `program()` function to retrieve the program name.\n* Added a .clang-format file.\n* Added iterator and printing for a ParseResult.\n\n### Changed\n\n* Cleanup exception code, add cxxopts::exceptions namespace.\n* Renamed several exceptions to be more descriptive, and added to a nested namespace.\n\n### Bug Fixes\n\n* Fix `arguments()` having no key for options that only have a short name.\n\n## 3.0\n\n### Changed\n\n* Only search for a C++ compiler in CMakeLists.txt.\n* Allow for exceptions to be disabled.\n* Fix duplicate default options when there is a short and long option.\n* Add `CXXOPTS_NO_EXCEPTIONS` to disable exceptions.\n* Fix char parsing for space and check for length.\n* Change argument type in `Options::parse` from `char**` to `const char**`.\n* Refactor parser to not change its arguments.\n* `ParseResult` doesn't depend on a reference to the parser.\n* Fixed several warnings and code quality issues.\n* Improved formatting for help descriptions.\n* Improve integer parsing.\n\n### Added\n\n* A list of unmatched arguments is available in `ParseResult`.\n* Support single letter options with argument attached.\n* Use <optional> if it is present.\n\n### Bug Fixes\n\n* Fix missing option name in exception.\n\n## 2.2\n\n### Changed\n\n* Allow integers to have leading zeroes.\n* Build the tests by default.\n* Don't check for container when showing positional help.\n\n### Added\n\n* Iterator inputs to `parse_positional`.\n* Throw an exception if the option in `parse_positional` doesn't exist.\n* Parse a delimited list in a single argument for vector options.\n* Add an option to disable implicit value on booleans.\n\n### Bug Fixes\n\n* Fix a warning about possible loss of data.\n* Fix version numbering in CMakeLists.txt\n* Remove unused declaration of the undefined `ParseResult::get_option`.\n* Throw on invalid option syntax when beginning with a `-`.\n* Throw in `as` when option wasn't present.\n* Fix catching exceptions by reference.\n* Fix out of bounds errors parsing integers.\n\n## 2.1.1\n\n### Bug Fixes\n\n* Revert the change adding `const` type for `argv`, because most users expect\n  to pass a non-const `argv` from `main`.\n\n## 2.1\n\n### Changed\n\n* Options with implicit arguments now require the `--option=value` form if\n  they are to be specified with an option. This is to remove the ambiguity\n  when a positional argument could follow an option with an implicit value.\n  For example, `--foo value`, where `foo` has an implicit value, will be\n  parsed as `--foo=implicit` and a positional argument `value`.\n* Boolean values are no longer special, but are just an option with a default\n  and implicit value.\n\n### Added\n\n* Added support for `std::optional` as a storage type.\n* Allow the help string to be customised.\n* Use `const` for the type in the `argv` parameter, since the contents of the\n  arguments is never modified.\n\n### Bug Fixes\n\n* Building against GCC 4.9 was broken due to overly strict shadow warnings.\n* Fixed an ambiguous overload in the `parse_positional` function when an\n  `initializer_list` was directly passed.\n* Fixed precedence in the Boolean value regex.\n\n## 2.0\n\n### Changed\n\n* `Options::parse` returns a ParseResult rather than storing the parse\n  result internally.\n* Options with default values now get counted as appearing once if they\n  were not specified by the user.\n\n### Added\n\n* A new `ParseResult` object that is the immutable result of parsing. It\n  responds to the same `count` and `operator[]` as `Options` of 1.x did.\n* The function `ParseResult::arguments` returns a vector of the parsed\n  arguments to iterate through in the order they were provided.\n* The symbol `cxxopts::version` for the version of the library.\n* Booleans can be specified with various strings and explicitly set false.\n\n## 1.x\n\nThe 1.x series was the first major version of the library, with release numbers\nstarting to follow semantic versioning, after 0.x being unstable.  It never had\na changelog maintained for it. Releases mostly contained bug fixes, with the\noccasional feature added.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 2.9267578125,
          "content": "# Copyright (c) 2014 Jarryd Beck\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\ncmake_minimum_required(VERSION 3.1...3.19)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/\")\ninclude(cxxopts)\n\n# Get the version of the library\ncxxopts_getversion(VERSION)\n\nproject(cxxopts\n    VERSION \"${VERSION}\"\n    LANGUAGES CXX\n)\n\nset(\"PROJECT_DESCRIPTION\" \"A header-only lightweight C++ command line option parser\")\nset(\"PROJECT_HOMEPAGE_URL\" \"https://github.com/jarro2783/cxxopts\")\n\n# Must include after the project call due to GNUInstallDirs requiring a language be enabled (IE. CXX)\ninclude(GNUInstallDirs)\n\n# Determine whether this is a standalone project or included by other projects\nset(CXXOPTS_STANDALONE_PROJECT OFF)\nif (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)\n    set(CXXOPTS_STANDALONE_PROJECT ON)\nendif()\n\n# Establish the project options\noption(CXXOPTS_BUILD_EXAMPLES \"Set to ON to build examples\" ${CXXOPTS_STANDALONE_PROJECT})\noption(CXXOPTS_BUILD_TESTS \"Set to ON to build tests\" ${CXXOPTS_STANDALONE_PROJECT})\noption(CXXOPTS_ENABLE_INSTALL \"Generate the install target\" ${CXXOPTS_STANDALONE_PROJECT})\noption(CXXOPTS_ENABLE_WARNINGS \"Add warnings to CMAKE_CXX_FLAGS\" ${CXXOPTS_STANDALONE_PROJECT})\noption(CXXOPTS_USE_UNICODE_HELP \"Use ICU Unicode library\" OFF)\n\nif (CXXOPTS_STANDALONE_PROJECT)\n    cxxopts_set_cxx_standard()\nendif()\n\nif (CXXOPTS_ENABLE_WARNINGS)\n    cxxopts_enable_warnings()\nendif()\n\nadd_library(cxxopts INTERFACE)\nadd_library(cxxopts::cxxopts ALIAS cxxopts)\nadd_subdirectory(include)\n\n# Link against the ICU library when requested\nif(CXXOPTS_USE_UNICODE_HELP)\n    cxxopts_use_unicode()\nendif()\n\n# Install cxxopts when requested by the user\nif (CXXOPTS_ENABLE_INSTALL)\n    cxxopts_install_logic()\nendif()\n\n# Build examples when requested by the user\nif (CXXOPTS_BUILD_EXAMPLES)\n    add_subdirectory(src)\nendif()\n\n# Enable testing when requested by the user\nif (CXXOPTS_BUILD_TESTS)\n    enable_testing()\n    add_subdirectory(test)\nendif()\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 1.203125,
          "content": "== System installation ==\n\nThis library is header only. So you can either copy `include/cxxopts.hpp` to `/usr/include` or `/usr/local/include`, or add `include` to your search path.\n\n== Building the examples and tests ==\n\nIt is preferable to build out of source. Make a build directory somewhere, and then\ndo the following, where `${CXXOPTS_DIR}` is the path that you checked out `cxxopts`\nto:\n\n  cmake ${CXXOPTS_DIR}\n  make\n\nYou can use another build tool, such as ninja.\n\n  cmake -G Ninja ${CXXOPTS_DIR}\n  ninja\n\n\nTo run the tests, you have to configure `cxxopts` with another flag:\n   cmake -D CXXOPTS_BUILD_TESTS=On ${CXXOPTS_DIR}\n   make\n   make test\n\n== Using cxxopts in tipi.build projects ==\n\n`cxxopts` can be easily used in [tipi.build](https://tipi.build) projects simply by adding the following entry to your `.tipi/deps`:\n\n```json\n{\n  \"jarro2783/cxxopts\": { \"@\": \"v3.0.0\" }\n}\n```\n\nTo try this you can run the following command in `/src` (change the target name appropriately to `linux` or `macos` or `windows`):\n\n```bash\ntipi . -t <target>\n./build/linux-cxx17/bin/test_package -v\n```\n\nTo develop `cxxopts` using tipi run the following command at the root of the repository:\n\n```bash\ntipi . -t <target> --test all -v\n```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0302734375,
          "content": "Copyright (c) 2014 Jarryd Beck\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.1875,
          "content": "[![Build Status](https://travis-ci.org/jarro2783/cxxopts.svg?branch=master)](https://travis-ci.org/jarro2783/cxxopts)\n\n# Release versions\n\nNote that `master` is generally a work in progress, and you probably want to use a\ntagged release version.\n\n## Version 3 breaking changes\n\nIf you have used version 2, there are a couple of breaking changes in version 3\nthat you should be aware of. If you are new to `cxxopts` you can skip this\nsection.\n\nThe parser no longer modifies its arguments, so you can pass a const `argc` and\n`argv` and expect them not to be changed.\n\nThe `ParseResult` object no longer depends on the parser. So it can be returned\nfrom a scope outside the parser and still work. Now that the inputs are not\nmodified, `ParseResult` stores a list of the unmatched arguments. These are\nretrieved like follows:\n\n```cpp\nauto result = options.parse(argc, argv);\nresult.unmatched(); // get the unmatched arguments\n```\n\n# Quick start\n\nThis is a lightweight C++ option parser library, supporting the standard GNU\nstyle syntax for options.\n\nOptions can be given as:\n\n    --long\n    --long=argument\n    --long argument\n    -a\n    -ab\n    -abc argument\n\nwhere c takes an argument, but a and b do not.\n\nAdditionally, anything after `--` will be parsed as a positional argument.\n\n## Basics\n\n```cpp\n#include <cxxopts.hpp>\n```\n\nCreate a `cxxopts::Options` instance.\n\n```cpp\ncxxopts::Options options(\"MyProgram\", \"One line description of MyProgram\");\n```\n\nThen use `add_options`.\n\n```cpp\noptions.add_options()\n  (\"d,debug\", \"Enable debugging\") // a bool parameter\n  (\"i,integer\", \"Int param\", cxxopts::value<int>())\n  (\"f,file\", \"File name\", cxxopts::value<std::string>())\n  (\"v,verbose\", \"Verbose output\", cxxopts::value<bool>()->default_value(\"false\"))\n  ;\n```\n\nOptions are declared with a long and an optional short option. A description\nmust be provided. The third argument is the value, if omitted it is boolean.\nAny type can be given as long as it can be parsed, with operator>>.\n\nTo parse the command line do:\n\n```cpp\nauto result = options.parse(argc, argv);\n```\n\nTo retrieve an option use `result.count(\"option\")` to get the number of times\nit appeared, and\n\n```cpp\nresult[\"opt\"].as<type>()\n```\n\nto get its value. If \"opt\" doesn't exist, or isn't of the right type, then an\nexception will be thrown.\n\n## Unrecognised arguments\n\nYou can allow unrecognised arguments to be skipped. This applies to both\npositional arguments that are not parsed into another option, and `--`\narguments that do not match an argument that you specify. This is done by\ncalling:\n\n```cpp\noptions.allow_unrecognised_options();\n```\n\nand in the result object they are retrieved with:\n\n```cpp\nresult.unmatched()\n```\n\n## Exceptions\n\nExceptional situations throw C++ exceptions. There are two types of\nexceptions: errors defining the options, and errors when parsing a list of\narguments. All exceptions derive from `cxxopts::exceptions::exception`. Errors\ndefining options derive from `cxxopts::exceptions::specification` and errors\nparsing arguments derive from `cxxopts::exceptions::parsing`.\n\nAll exceptions define a `what()` function to get a printable string\nexplaining the error.\n\n## Help groups\n\nOptions can be placed into groups for the purposes of displaying help messages.\nTo place options in a group, pass the group as a string to `add_options`. Then,\nwhen displaying the help, pass the groups that you would like displayed as a\nvector to the `help` function.\n\n## Positional Arguments\n\nPositional arguments are those given without a preceding flag and can be used\nalongside non-positional arguments. There may be multiple positional arguments,\nand the final positional argument may be a container type to hold a list of all\nremaining positionals.\n\nTo set up positional arguments, first declare the options, then configure a\nset of those arguments as positional like:\n\n```cpp\noptions.add_options()\n  (\"script\", \"The script file to execute\", cxxopts::value<std::string>())\n  (\"server\", \"The server to execute on\", cxxopts::value<std::string>())\n  (\"filenames\", \"The filename(s) to process\", cxxopts::value<std::vector<std::string>>());\n\noptions.parse_positional({\"script\", \"server\", \"filenames\"});\n\n// Parse options the usual way\noptions.parse(argc, argv);\n```\n\nFor example, parsing the following arguments:\n~~~\nmy_script.py my_server.com file1.txt file2.txt file3.txt\n~~~\nwill result in parsed arguments like the following table:\n\n| Field         | Value                                     |\n| ------------- | ----------------------------------------- |\n| `\"script\"`    | `\"my_script.py\"`                          |\n| `\"server\"`    | `\"my_server.com\"`                         |\n| `\"filenames\"` | `{\"file1.txt\", \"file2.txt\", \"file3.txt\"}` |\n\n## Default and implicit values\n\nAn option can be declared with a default or an implicit value, or both.\n\nA default value is the value that an option takes when it is not specified\non the command line. The following specifies a default value for an option:\n\n```cpp\ncxxopts::value<std::string>()->default_value(\"value\")\n```\n\nAn implicit value is the value that an option takes when it is given on the\ncommand line without an argument. The following specifies an implicit value:\n\n```cpp\ncxxopts::value<std::string>()->implicit_value(\"implicit\")\n```\n\nIf an option had both, then not specifying it would give the value `\"value\"`,\nwriting it on the command line as `--option` would give the value `\"implicit\"`,\nand writing `--option=another` would give it the value `\"another\"`.\n\nNote that the default and implicit value is always stored as a string,\nregardless of the type that you want to store it in. It will be parsed as\nthough it was given on the command line.\n\nDefault values are not counted by `Options::count`.\n\n## Boolean values\n\nBoolean options have a default implicit value of `\"true\"`, which can be\noverridden. The effect is that writing `-o` by itself will set option `o` to\n`true`. However, they can also be written with various strings using `=value`.\nThere is no way to disambiguate positional arguments from the value following\na boolean, so we have chosen that they will be positional arguments, and\ntherefore, `-o false` does not work.\n\n## `std::vector<T>` values\n\nParsing a list of values into a `std::vector<T>` is also supported, as long as `T`\ncan be parsed. To separate single values in a list the define symbol `CXXOPTS_VECTOR_DELIMITER`\nis used, which is ',' by default. Ensure that you use no whitespaces between values because\nthose would be interpreted as the next command line option. Example for a command line option\nthat can be parsed as a `std::vector<double>`:\n\n~~~\n--my_list=1,-2.1,3,4.5\n~~~\n\n## Options specified multiple times\n\nThe same option can be specified several times, with different arguments, which will all\nbe recorded in order of appearance. An example:\n\n~~~\n--use train --use bus --use ferry\n~~~\n\nthis is supported through the use of a vector of value for the option:\n\n~~~\noptions.add_options()\n  (\"use\", \"Usable means of transport\", cxxopts::value<std::vector<std::string>>())\n~~~\n\n## Custom help\n\nThe string after the program name on the first line of the help can be\ncompletely replaced by calling `options.custom_help`. Note that you might\nalso want to override the positional help by calling `options.positional_help`.\n\n\n## Example\n\nPutting all together:\n```cpp\nint main(int argc, char** argv)\n{\n    cxxopts::Options options(\"test\", \"A brief description\");\n\n    options.add_options()\n        (\"b,bar\", \"Param bar\", cxxopts::value<std::string>())\n        (\"d,debug\", \"Enable debugging\", cxxopts::value<bool>()->default_value(\"false\"))\n        (\"f,foo\", \"Param foo\", cxxopts::value<int>()->default_value(\"10\"))\n        (\"h,help\", \"Print usage\")\n    ;\n\n    auto result = options.parse(argc, argv);\n\n    if (result.count(\"help\"))\n    {\n      std::cout << options.help() << std::endl;\n      exit(0);\n    }\n    bool debug = result[\"debug\"].as<bool>();\n    std::string bar;\n    if (result.count(\"bar\"))\n      bar = result[\"bar\"].as<std::string>();\n    int foo = result[\"foo\"].as<int>();\n\n    return 0;\n}\n```\n\n# Linking\n\nThis is a header only library.\n\n# Requirements\n\nThe only build requirement is a C++ compiler that supports C++11 features such as:\n\n* regex\n* constexpr\n* default constructors\n\nGCC >= 4.9 or clang >= 3.1 with libc++ are known to work.\n\nThe following compilers are known not to work:\n\n* MSVC 2013\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 0.5,
          "content": "load(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\nhttp_archive(\n    name = \"rules_fuzzing\",\n    sha256 = \"d9002dd3cd6437017f08593124fdd1b13b3473c7b929ceb0e60d317cb9346118\",\n    strip_prefix = \"rules_fuzzing-0.3.2\",\n    urls = [\"https://github.com/bazelbuild/rules_fuzzing/archive/v0.3.2.zip\"],\n)\n\nload(\"@rules_fuzzing//fuzzing:repositories.bzl\", \"rules_fuzzing_dependencies\")\n\nrules_fuzzing_dependencies()\n\nload(\"@rules_fuzzing//fuzzing:init.bzl\", \"rules_fuzzing_init\")\n\nrules_fuzzing_init()\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}