{
  "metadata": {
    "timestamp": 1736565656288,
    "page": 548,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "marcj/TypeRunner",
      "stars": 2610,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0302734375,
          "content": ".idea\ncmake-*\nbuild*\nDockerfile"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.03515625,
          "content": "cmake-build-debug\n.idea\n*.tsbytecode"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.4111328125,
          "content": "[submodule \"libs/tracy\"]\n\tpath = libs/tracy\n\turl = git@github.com:wolfpld/tracy.git\n[submodule \"libs/fmt\"]\n\tpath = libs/fmt\n\turl = git@github.com:fmtlib/fmt.git\n[submodule \"libs/imgui\"]\n\tpath = libs/imgui\n\turl = git@github.com:ocornut/imgui.git\n[submodule \"libs/asmjit\"]\n\tpath = libs/asmjit\n\turl = git@github.com:asmjit/asmjit.git\n[submodule \"libs/doctest\"]\n\tpath = libs/doctest\n\turl = git@github.com:doctest/doctest.git\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.857421875,
          "content": "cmake_minimum_required(VERSION 3.16)\nproject(typescript)\n\nset(CMAKE_CXX_STANDARD 20)\n\nset(CMAKE_CXX_FLAGS \"-Wno-unused-variable -Wno-switch -Wno-trigraphs\")\n\nif(CMAKE_BUILD_TYPE STREQUAL \"Release\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O3 -ffast-math\")\nendif()\n\ninclude_directories(libs/tracy/)\ninclude_directories(libs/fmt/include/)\n\nlist(APPEND CMAKE_MODULE_PATH libs)\n\nadd_subdirectory(libs/doctest)\nadd_subdirectory(libs/tracy)\nadd_subdirectory(libs/fmt)\n\nset(ASMJIT_STATIC TRUE)\n#add_subdirectory(libs/asmjit)\n\n# enable for profiling\n#add_definitions(-DTRACY_ENABLE)\n#link_libraries(Tracy::TracyClient)\n\n#include_directories(libs/asmjit/src)\ninclude_directories(libs/magic_enum)\n\nadd_subdirectory(src)\n\nadd_executable(typescript_main main.cpp)\ntarget_link_libraries(typescript_main typescript)\n\nadd_executable(bench bench.cpp)\ntarget_link_libraries(bench typescript)"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.916015625,
          "content": "FROM debian:bullseye\n\nRUN apt-get update && apt-get -y install gnupg wget\nRUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|apt-key add -\nRUN echo \"deb http://apt.llvm.org/bullseye/ llvm-toolchain-bullseye-14 main\" > /etc/apt/sources.list.d/clang.list\n\n# Install dependencies\nRUN apt-get -qq update && \\\n    apt-get install -qqy --no-install-recommends \\\n        clang-14 lldb-14 lld-14 ca-certificates \\\n        autoconf automake cmake dpkg-dev file git make patch \\\n        libc-dev libc++-dev libgcc-10-dev libstdc++-10-dev  \\\n        dirmngr gnupg2 lbzip2 wget xz-utils libtinfo5 && \\\n    rm -rf /var/lib/apt/lists/*\n\nADD . /typerunner\nWORKDIR /typerunner\nRUN mkdir build\nRUN cd build && cmake -DCMAKE_CXX_COMPILER=clang++-14 -DCMAKE_C_COMPILER=clang-14 -DCMAKE_BUILD_TYPE=Release ..\nRUN cd build && make bench typescript_main -j 8\nRUN ./build/bench tests/objectLiterals1.ts\nRUN ./build/typescript_main tests/objectLiterals1.ts"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.078125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2021 Marc J. Schmidt <marc@marcjschmidt.de>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.115234375,
          "content": "\nxcode:\n\tcd xcode && cmake -D CMAKE_C_COMPILER=\"`xcrun -find cc`\" -D CMAKE_CXX_COMPILER=\"`xcrun -find c++`\" .. -GXcode"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.291015625,
          "content": "# TypeRunner\n\n<p align=\"center\">\n<img src=\"./docs/logo.png\"/>\n</p>\n\n<p align=\"center\">\nHigh-performance TypeScript compiler.\n</p>\n\n## Goals\n\n- Parser\n- Type checking (as CLI and as library)\n- Language Server\n- Interactive type debugging\n- Type information in other languages\n- (optional) transpiling to JavaScript\n- (optional) RTTI in JavaScript\n- (optional) type profiler\n\nAdditionally, making TypeScript type checking as fast as possible and providing a native library for other languages so they can use TypeScript type information without the need for a JavaScript engine enables all sorts of use cases like JSON-Schema replacement, ORM DSL, encoding information (like Protocol Buffers schema) and more.\n\n### Non-goals\n\n- Drop-in replacement for the official TypeScript compiler\n- Runtime\n\nBeing a drop-in replacement for the entire official TypeScript compiler (tsc) would require copying design limitations, bugs, and legacy decisions of tsc. Because of TypeScript's 10-year history there are many features that are unnecessary today but kept for compatibility. We focus on a stricter subset of TypeScript, which means TypeRunner won't support some features such as JSDoc and several compiler options.\n\n## Status\n\nThe source code in the initial version is really only a proof of concept. It consists of roughly 30k LoC and shows very promising results. The approach is to use a TypeScript-to-bytecode compiler and then to run the bytecode in a custom virtual machine. The data show that this approach can lead to a hundred- to several-thousand-fold improvement in speed.\n\n![TypeRunner Debugger](./docs/typerunner-debugger.png)\n\nOnce the project gets funding through the community, development will continue.\n\n## Performance\n\n`TypeRunner cold` means the file was seen for the first time and has to be compiled to bytecode first. `TypeRunner warm` means the bytecode could be directly executed because it was cached. Usually only a few files change between compilations. For example, if you have a project with 100 files and edit one and rerun type checking,  only the changed file has the slower `cold` timing. \n\nThe `tsc` numbers below are after 10 iterations (the JavaScript engine V8 JIT optimises it early already), which leads to the most conservative comparisons. Running a single iteration is 10x slower, and a cold `tsc` start is even slower because of the initial bootstrap delay of several hundred milliseconds. Therefore you can safely assume that `tsc` is slower than what the numbers shown below.\n\nNote that compilation has not yet been optimised (for example, it still uses a slow memory allocator, the optimisation of which can result in another tenfold improvement).\n\n### Basic variables\n\n```typescript\nconst v1: string = \"abc\";\nconst v2: number = 123;\n```\n\n```\nTypeScript tsc:  0.8ms\nTypeRunner cold: 0.004688500ms (170x faster)\nTypeRunner warm: 0.000079584ms (10,052x faster)\n```\n\n### Generic function\n\n```typescript\nfunction doIt<T extends number>(v: T) {\n}\nconst a = doIt<number>;\na(23);\n```\n\n```\nTypeScript tsc:  1.4ms\nTypeRunner cold: 0.014966250ms (93x faster)\nTypeRunner warm: 0.000181875ms (7,697x faster)\n```\n\n### Object literal type\n\n```typescript\ntype Person = {name: string, age: number}\n\nconst a: Person = {name: 'Peter', age: 52};\nconst b: Person = {name: 'Peter', age: '52'};\n```\n\n```\nTypeScript tsc:  1.5ms\nTypeRunner cold: 0.009106375ms (164x faster)\nTypeRunner warm: 0.000836959ms (1,795x faster)\n```\n\n### Complex type\n\n```typescript\ntype StringToNum<T extends string, A extends 0[] = []> = `${A['length']}` extends T ? A['length'] : StringToNum<T, [...A, 0]>;\nconst var1: StringToNum<'999'> = 999;\n```\n\n```\nTypeScript tsc:  350.2ms\nTypeRunner cold:   0.862534792ms (406x faster)\nTypeRunner warm:   0.839308334ms (417x faster)\n```\n\n## FAQ\n\n### Why?\n\nTypeScript has one of the most versatile type systems, but the official tooling is very slow and the types are not usable in other languages. We want to make it fast and bring type computation accessible to all languages.\n\nWe believe that TypeScript can be much faster. Many workarounds exist to mitigate slow type checking. Some \"TypeScript runtimes\" even entirely disable type checking (and thus the key selling point of TypeScript) by default and rely on suboptimal editor-only type checking (which is still slow). We think it is possible to build a TypeScript compiler that is so fast that you can run TypeScript files directly with all its type checking features enabled and still have almost instant compile time.\n\nWe also believe that TypeScript is more than just a linter. It is a language that is so powerful and can be used for much more. Imagine writing a schema such as the following and be able to validate data against it in any language: JavaScript, C++, C, Rust, or Go.\n\n```typescript\nexport interface User {\n    id: number & PrimaryKey;\n    name: string & MinLength<3>;\n    password: string;\n}\nexport type ReadUser = Omit<User, 'password'>\nexport type CreateUser = Omit<User, 'id'>;\n```\n\nWith TypeRunner this will be possible and thus has the potential to replace JSON schema with a much more powerful way of defining schemas. It doesn't stop with JSON schema however: ORM, GraphQL, gRPC, Protocol Buffers, and many more technologies that rely on schema information could rely on the powerful TypeScript type system to increase usability and efficiency dramatically. This brings isomorphic TypeScript to a whole new level.\n\n### Why doesn't Microsoft implement it like this?\n\nMicrosoft has had the goal to create wide adoption of TypeScript. That means to find product-market fit and improve UX, iteration speed is key to success. Writing high-performance code usually impacts these goals negatively.\n\nAlso, implementing features to make adoption easier and [dogfooding](https://en.wikipedia.org/wiki/Eating_your_own_dog_food) are important strategies to make sure the product you're building will actually be adopted and solves real problems. However, since the TypeScript team doesn't have unlimited resources, this means that they have to focus on what brings growth. Performance is not something that brings much growth, especially if you take into consideration that the market expands every four years or so by 100%, which means that most developers are beginners and have priorities other than performance.\n\nStrategically speaking it makes sense for Microsoft to develop TypeScript the way they do it, at least for the moment.\n\n### Why not a drop-in replacement for `tsc`?\n\nTypeScript offers a lot of functionality. Many things are targeted at a smooth transition from JavaScript to TypeScript by allowing not-so-strict syntax and alternative type declaration syntax like JSDoc. Although these features have a big impact on new TypeScript users they are not so much used in projects where TypeScript is used more strictly. TypeScript comes also with a fairly big variety of transpilers/transformers to generate JavaScript for all the different versions of of ECMAScript standards. While we think that although these features have a big value for new users and adoption, we want to focus more on the enterprise side of things where performance often translates directly to money.\n\n### What is currently supported?\n\nOnly very basic type expressions are currently supported: primitives, variable declaration, (generic) function declaration, some type functions like type aliases, (distributive) conditional types, template literals, array/tuples, index access, union, rest, and a few other things. They are implemented in a very rough way just enough to proof that the language in its core can be implemented in a fast way.\n\n### When will it be released?\n\nCurrently, the development of TypeRunner is almost stalled and was more an experiment/proof of concept. To actually make this a reality, funding is necessary. In the  coming weeks, we will set up a kickstarter/funding project, which makes it possible for the community that is interested in high-speed TypeScript to make this a reality.\n\n### Why C++ and not Rust?\n\nBecause I know C++ much better than Rust. The market of good C++ developers is much bigger. TypeScript code also maps surprisingly well to C++, so porting\nthe scanner, parser, and AST structure is actually rather easy, which allows back-porting features from TypeScript tsc to TypeRunner much easier. I also find Rust ugly.\n\n### Why not port TypeScript?\n\nPorting TypeScript alone to a faster language won't yield much performance difference since the V8 JIT optimises TypeScript compiler already, and the current slowdown comes mainly from architectural decisions made to work well in a JavaScript runtime (where optimisation strategies are very limited). To get a much faster compiler you have to do both: use a fast compiling language and use an architecture that utilizes all performance advantages of that language.\n\nThat being said, in the current stage the actual TypeScript scanner/parser code is ported from the TypeScript compiler to make back-porting easier. It's also at the moment the most complicated and slowest code (with over 20k LoC), which will be improved in the future.\n\n### What can I do to support this project?\n\nFollow me on Twitter and fund it once the funding campaign is published: [twitter.com/MarcJSchmidt](https://twitter.com/MarcJSchmidt)\n\n### How does it work/Why is it so fast?\n\nIt is fast because it does the heavy-lifting only once per file and the type computation/comparison is optimised in a custom virtual machine.\n\nThe compiler consists of 3 stages: parsing to AST, compiling to bytecode, and executing the bytecode in a virtual machine. The first two stages are the most expensive and have to be done for each file once. The resulting bytecode can then be cached on disk.\n\nThe compiler has a simple data-flow analysis implemented to generate more efficient bytecode (like tail call/tail rest detection, and detecting usage of potential usage of super instructions). It also tries to precompute as much as possible. For example, all literal values will have in the bytecode header a precomputed 64-bit hash so that the virtual machine can compare literal types with a simple integer comparison and use it in hash-tables.\n\nThe stack based virtual machine tries to be lightweight and highly-performant as the most work happens here. It uses multiple memory pools with garbage collection, fix-sized type structure, tail call optimisation, and tuple re-use (tail rest optimisation). For list-structures, linked lists and hash tables (based on precomputed literal hash) are used to make lookups very fast.\n\nThe instruction set consists of currently 83 instructions: https://github.com/marcj/TypeRunner/blob/master/src/checker/instructions.h and will likely grow in the future.\n\n## Development\n\nTypeRunner is written in modern C++ with cmake, doctest, imgui, tracy, fmt. To work on this project first clone the repository:\n\n```sh\n$ git clone git@github.com:marcj/TypeRunner.git\n$ cd TypeRunner\n$ git submodule update --init --recursive\n```\n\nTo compile using Docker:\n\n```sh\n$ docker build -t typerunner -f Dockerfile .\n$ docker run typerunner build/bench tests/objectLiterals1.ts\n```\n\nTo compile natively make sure cmake and a C++ compiler is installed. We use LLVM toolchain per default. To build the project run the usual cmake command:\n\n```sh\n$ mkdir build\n$ cd build\n$ cmake -DCMAKE_CXX_COMPILER=clang++-14 -DCMAKE_C_COMPILER=clang-14 -DCMAKE_BUILD_TYPE=Release ..\n$ make bench -j 8\n$ ./bench ../tests/objectLiterals1.ts\n```\n\nBinaries are created in the build folder, which can now be executed.\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 1.0830078125,
          "content": "# Todo\n\n| Type             | Parser | Compiler | VM  |\n|------------------|--------|----------|-----|\n| String           | [X]    | [X]      | [X] |\n| Number           | [X]    | [X]      | [X] |\n| Boolean          | [X]    | [X]      | [X] |\n| BigInt           | [X]    | [X]      | [X] |\n| String Literal   | [X]    | [X]      | [X] |\n| Number Literal   | [X]    | [X]      | [X] |\n| BigInt Literal   | [X]    | [X]      | [X] |\n| Bool Literal     | [X]    | [X]      | [X] |\n| Interfaces       | [X]    | [X]      | 50% |\n| Object Literal   | [X]    | [X]      | [X] |\n| Classes          | [X]    | 20%      | 5%  |\n| Union            | [X]    | [X]      | [X] |\n| Intersection     | [X]    | []       | []  |\n| Functions        | [X]    | 50%      | 30% |\n| Template Literal | [X]    | 50%      | 20% |\n\n- [] Optimiser Parser\n - [] Memory pool\n- [] Inference\n - [] Binary Expressions\n - [] Binary Expressions\n- [] Type narrowing\n - [] If-Else \n - [] While \n - [] Early Return \n- [] Type Guards\n- [] Type Assertions\n- [] Interface merging\n - [] Primitives (lazy)\n- [] Globals\n- [] Modules\n- [] Namespaces\n\n"
        },
        {
          "name": "bench.cpp",
          "type": "blob",
          "size": 1.8818359375,
          "content": "#include <iostream>\n#include <memory>\n#include <unistd.h>\n\n#include \"./src/core.h\"\n#include \"./src/fs.h\"\n#include \"./src/parser2.h\"\n#include \"./src/checker/vm2.h\"\n#include \"./src/checker/module2.h\"\n#include \"./src/checker/debug.h\"\n#include \"./src/checker/compiler.h\"\n\nusing namespace tr;\n\nvoid compileAndRun(const string &code, const string &fileName) {\n    ZoneScoped;\n    auto iterations = 1000;\n    auto cold = benchRun(iterations, [&] {\n        checker::Compiler compiler;\n        Parser parser;\n        auto result = parser.parseSourceFile(fileName, code, types::ScriptTarget::Latest, false, ScriptKind::TS, {});\n        auto program = compiler.compileSourceFile(result);\n        auto bin = program.build();\n        auto module = make_shared<vm2::Module>(bin, fileName, code);\n        vm2::run(module);\n    });\n\n    checker::Compiler compiler;\n    Parser parser;\n    auto result = parser.parseSourceFile(fileName, code, types::ScriptTarget::Latest, false, ScriptKind::TS, {});\n    auto program = compiler.compileSourceFile(result);\n    auto bin = program.build();\n    auto module = make_shared<vm2::Module>(bin, fileName, code);\n    auto warm = benchRun(iterations, [&] {\n        module->clear();\n        vm2::run(module);\n    });\n\n    std::cout << fmt::format(\"typerunner: {} iterations (it): cold {:.9f}ms/it, warm {:.9f}ms/it\\n\", iterations, cold.count() / iterations, warm.count() / iterations);\n}\n\nint main(int argc, char *argv[]) {\n    ZoneScoped;\n    std::string file;\n    auto cwd = std::filesystem::current_path();\n\n    if (argc > 1) {\n        file = cwd.string() + \"/\" + argv[1];\n    } else {\n        file = cwd.string() + \"/../tests/basic1.ts\";\n    }\n\n    if (!fileExists(file)) {\n        std::cout << \"File not found \" << file << \"\\n\";\n        return 4;\n    }\n    auto code = fileRead(file);\n    auto relative = std::filesystem::relative(file, cwd);\n    compileAndRun(code, relative.string());\n    return 0;\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.cpp",
          "type": "blob",
          "size": 1.955078125,
          "content": "#include <iostream>\n#include <memory>\n#include <unistd.h>\n\n#include \"./src/core.h\"\n#include \"./src/fs.h\"\n#include \"./src/parser2.h\"\n#include \"./src/checker/vm2.h\"\n#include \"./src/checker/module2.h\"\n#include \"./src/checker/debug.h\"\n#include \"./src/checker/compiler.h\"\n\nusing namespace tr;\n\nvoid run(const string &bytecode, const string &code, const string &fileName) {\n    ZoneScoped;\n    auto module = std::make_shared<vm2::Module>(bytecode, fileName, code);\n    bench(1, [&]{\n        vm2::run(module);\n        module->printErrors();\n    });\n}\n\nvoid compileAndRun(const string &code, const string &file, const string &fileName) {\n    ZoneScoped;\n    auto bytecodePath = file + \".tsb\";\n    auto buffer = fileRead(file);\n    checker::Compiler compiler;\n    Parser parser;\n    auto result = parser.parseSourceFile(file, buffer, types::ScriptTarget::Latest, false, ScriptKind::TS, {});\n    auto program = compiler.compileSourceFile(result);\n    auto bin = program.build();\n    fileWrite(bytecodePath, bin);\n    std::filesystem::last_write_time(bytecodePath, std::filesystem::last_write_time(file));\n    checker::printBin(bin);\n    auto module = make_shared<vm2::Module>(bin, fileName, code);\n    vm2::run(module);\n    module->printErrors();\n}\n\nint main(int argc, char *argv[]) {\n    ZoneScoped;\n    std::string file;\n    auto cwd = std::filesystem::current_path();\n\n    if (argc > 1) {\n        file = cwd.string() + \"/\" + argv[1];\n    } else {\n        file = cwd.string() + \"/../tests/basic1.ts\";\n    }\n\n    if (!fileExists(file)) {\n        std::cout << \"File not found \" << file << \"\\n\";\n        return 4;\n    }\n    auto code = fileRead(file);\n    auto bytecode = file + \".tsb\";\n    auto relative = std::filesystem::relative(file, cwd);\n\n    if (fileExists(bytecode) && std::filesystem::last_write_time(bytecode) == std::filesystem::last_write_time(file)) {\n        run(fileRead(bytecode), code, relative.string());\n    } else {\n        compileAndRun(code, file, relative.string());\n    }\n    return 0;\n}\n"
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 12.65234375,
          "content": "{\n  \"name\": \"typescript-cpp\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 2,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"name\": \"typescript-cpp\",\n      \"version\": \"1.0.0\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"ts-node\": \"^10.9.1\",\n        \"typescript\": \"^4.7.4\"\n      }\n    },\n    \"node_modules/@cspotcode/source-map-support\": {\n      \"version\": \"0.8.1\",\n      \"resolved\": \"https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz\",\n      \"integrity\": \"sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==\",\n      \"dependencies\": {\n        \"@jridgewell/trace-mapping\": \"0.3.9\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@jridgewell/resolve-uri\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.0.tgz\",\n      \"integrity\": \"sha512-F2msla3tad+Mfht5cJq7LSXcdudKTWCVYUgw6pLFOOHSTtZlj6SWNYAp+AhuqLmWdBO2X5hPrLcu8cVP8fy28w==\",\n      \"engines\": {\n        \"node\": \">=6.0.0\"\n      }\n    },\n    \"node_modules/@jridgewell/sourcemap-codec\": {\n      \"version\": \"1.4.14\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.14.tgz\",\n      \"integrity\": \"sha512-XPSJHWmi394fuUuzDnGz1wiKqWfo1yXecHQMRf2l6hztTO+nPru658AyDngaBe7isIxEkRsPR3FZh+s7iVa4Uw==\"\n    },\n    \"node_modules/@jridgewell/trace-mapping\": {\n      \"version\": \"0.3.9\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz\",\n      \"integrity\": \"sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==\",\n      \"dependencies\": {\n        \"@jridgewell/resolve-uri\": \"^3.0.3\",\n        \"@jridgewell/sourcemap-codec\": \"^1.4.10\"\n      }\n    },\n    \"node_modules/@tsconfig/node10\": {\n      \"version\": \"1.0.9\",\n      \"resolved\": \"https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.9.tgz\",\n      \"integrity\": \"sha512-jNsYVVxU8v5g43Erja32laIDHXeoNvFEpX33OK4d6hljo3jDhCBDhx5dhCCTMWUojscpAagGiRkBKxpdl9fxqA==\"\n    },\n    \"node_modules/@tsconfig/node12\": {\n      \"version\": \"1.0.11\",\n      \"resolved\": \"https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz\",\n      \"integrity\": \"sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==\"\n    },\n    \"node_modules/@tsconfig/node14\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz\",\n      \"integrity\": \"sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==\"\n    },\n    \"node_modules/@tsconfig/node16\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.3.tgz\",\n      \"integrity\": \"sha512-yOlFc+7UtL/89t2ZhjPvvB/DeAr3r+Dq58IgzsFkOAvVC6NMJXmCGjbptdXdR9qsX7pKcTL+s87FtYREi2dEEQ==\"\n    },\n    \"node_modules/@types/node\": {\n      \"version\": \"18.6.3\",\n      \"resolved\": \"https://registry.npmjs.org/@types/node/-/node-18.6.3.tgz\",\n      \"integrity\": \"sha512-6qKpDtoaYLM+5+AFChLhHermMQxc3TOEFIDzrZLPRGHPrLEwqFkkT5Kx3ju05g6X7uDPazz3jHbKPX0KzCjntg==\",\n      \"peer\": true\n    },\n    \"node_modules/acorn\": {\n      \"version\": \"8.8.0\",\n      \"resolved\": \"https://registry.npmjs.org/acorn/-/acorn-8.8.0.tgz\",\n      \"integrity\": \"sha512-QOxyigPVrpZ2GXT+PFyZTl6TtOFc5egxHIP9IlQ+RbupQuX4RkT/Bee4/kQuC02Xkzg84JcT7oLYtDIQxp+v7w==\",\n      \"bin\": {\n        \"acorn\": \"bin/acorn\"\n      },\n      \"engines\": {\n        \"node\": \">=0.4.0\"\n      }\n    },\n    \"node_modules/acorn-walk\": {\n      \"version\": \"8.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.2.0.tgz\",\n      \"integrity\": \"sha512-k+iyHEuPgSw6SbuDpGQM+06HQUa04DZ3o+F6CSzXMvvI5KMvnaEqXe+YVe555R9nn6GPt404fos4wcgpw12SDA==\",\n      \"engines\": {\n        \"node\": \">=0.4.0\"\n      }\n    },\n    \"node_modules/arg\": {\n      \"version\": \"4.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/arg/-/arg-4.1.3.tgz\",\n      \"integrity\": \"sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==\"\n    },\n    \"node_modules/create-require\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz\",\n      \"integrity\": \"sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==\"\n    },\n    \"node_modules/diff\": {\n      \"version\": \"4.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/diff/-/diff-4.0.2.tgz\",\n      \"integrity\": \"sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==\",\n      \"engines\": {\n        \"node\": \">=0.3.1\"\n      }\n    },\n    \"node_modules/make-error\": {\n      \"version\": \"1.3.6\",\n      \"resolved\": \"https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz\",\n      \"integrity\": \"sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==\"\n    },\n    \"node_modules/ts-node\": {\n      \"version\": \"10.9.1\",\n      \"resolved\": \"https://registry.npmjs.org/ts-node/-/ts-node-10.9.1.tgz\",\n      \"integrity\": \"sha512-NtVysVPkxxrwFGUUxGYhfux8k78pQB3JqYBXlLRZgdGUqTO5wU/UyHop5p70iEbGhB7q5KmiZiU0Y3KlJrScEw==\",\n      \"dependencies\": {\n        \"@cspotcode/source-map-support\": \"^0.8.0\",\n        \"@tsconfig/node10\": \"^1.0.7\",\n        \"@tsconfig/node12\": \"^1.0.7\",\n        \"@tsconfig/node14\": \"^1.0.0\",\n        \"@tsconfig/node16\": \"^1.0.2\",\n        \"acorn\": \"^8.4.1\",\n        \"acorn-walk\": \"^8.1.1\",\n        \"arg\": \"^4.1.0\",\n        \"create-require\": \"^1.1.0\",\n        \"diff\": \"^4.0.1\",\n        \"make-error\": \"^1.1.1\",\n        \"v8-compile-cache-lib\": \"^3.0.1\",\n        \"yn\": \"3.1.1\"\n      },\n      \"bin\": {\n        \"ts-node\": \"dist/bin.js\",\n        \"ts-node-cwd\": \"dist/bin-cwd.js\",\n        \"ts-node-esm\": \"dist/bin-esm.js\",\n        \"ts-node-script\": \"dist/bin-script.js\",\n        \"ts-node-transpile-only\": \"dist/bin-transpile.js\",\n        \"ts-script\": \"dist/bin-script-deprecated.js\"\n      },\n      \"peerDependencies\": {\n        \"@swc/core\": \">=1.2.50\",\n        \"@swc/wasm\": \">=1.2.50\",\n        \"@types/node\": \"*\",\n        \"typescript\": \">=2.7\"\n      },\n      \"peerDependenciesMeta\": {\n        \"@swc/core\": {\n          \"optional\": true\n        },\n        \"@swc/wasm\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/typescript\": {\n      \"version\": \"4.7.4\",\n      \"resolved\": \"https://registry.npmjs.org/typescript/-/typescript-4.7.4.tgz\",\n      \"integrity\": \"sha512-C0WQT0gezHuw6AdY1M2jxUO83Rjf0HP7Sk1DtXj6j1EwkQNZrHAg2XPWlq62oqEhYvONq5pkC2Y9oPljWToLmQ==\",\n      \"bin\": {\n        \"tsc\": \"bin/tsc\",\n        \"tsserver\": \"bin/tsserver\"\n      },\n      \"engines\": {\n        \"node\": \">=4.2.0\"\n      }\n    },\n    \"node_modules/v8-compile-cache-lib\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz\",\n      \"integrity\": \"sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==\"\n    },\n    \"node_modules/yn\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/yn/-/yn-3.1.1.tgz\",\n      \"integrity\": \"sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==\",\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    }\n  },\n  \"dependencies\": {\n    \"@cspotcode/source-map-support\": {\n      \"version\": \"0.8.1\",\n      \"resolved\": \"https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz\",\n      \"integrity\": \"sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==\",\n      \"requires\": {\n        \"@jridgewell/trace-mapping\": \"0.3.9\"\n      }\n    },\n    \"@jridgewell/resolve-uri\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.0.tgz\",\n      \"integrity\": \"sha512-F2msla3tad+Mfht5cJq7LSXcdudKTWCVYUgw6pLFOOHSTtZlj6SWNYAp+AhuqLmWdBO2X5hPrLcu8cVP8fy28w==\"\n    },\n    \"@jridgewell/sourcemap-codec\": {\n      \"version\": \"1.4.14\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.14.tgz\",\n      \"integrity\": \"sha512-XPSJHWmi394fuUuzDnGz1wiKqWfo1yXecHQMRf2l6hztTO+nPru658AyDngaBe7isIxEkRsPR3FZh+s7iVa4Uw==\"\n    },\n    \"@jridgewell/trace-mapping\": {\n      \"version\": \"0.3.9\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz\",\n      \"integrity\": \"sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==\",\n      \"requires\": {\n        \"@jridgewell/resolve-uri\": \"^3.0.3\",\n        \"@jridgewell/sourcemap-codec\": \"^1.4.10\"\n      }\n    },\n    \"@tsconfig/node10\": {\n      \"version\": \"1.0.9\",\n      \"resolved\": \"https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.9.tgz\",\n      \"integrity\": \"sha512-jNsYVVxU8v5g43Erja32laIDHXeoNvFEpX33OK4d6hljo3jDhCBDhx5dhCCTMWUojscpAagGiRkBKxpdl9fxqA==\"\n    },\n    \"@tsconfig/node12\": {\n      \"version\": \"1.0.11\",\n      \"resolved\": \"https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz\",\n      \"integrity\": \"sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==\"\n    },\n    \"@tsconfig/node14\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz\",\n      \"integrity\": \"sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==\"\n    },\n    \"@tsconfig/node16\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.3.tgz\",\n      \"integrity\": \"sha512-yOlFc+7UtL/89t2ZhjPvvB/DeAr3r+Dq58IgzsFkOAvVC6NMJXmCGjbptdXdR9qsX7pKcTL+s87FtYREi2dEEQ==\"\n    },\n    \"@types/node\": {\n      \"version\": \"18.6.3\",\n      \"resolved\": \"https://registry.npmjs.org/@types/node/-/node-18.6.3.tgz\",\n      \"integrity\": \"sha512-6qKpDtoaYLM+5+AFChLhHermMQxc3TOEFIDzrZLPRGHPrLEwqFkkT5Kx3ju05g6X7uDPazz3jHbKPX0KzCjntg==\",\n      \"peer\": true\n    },\n    \"acorn\": {\n      \"version\": \"8.8.0\",\n      \"resolved\": \"https://registry.npmjs.org/acorn/-/acorn-8.8.0.tgz\",\n      \"integrity\": \"sha512-QOxyigPVrpZ2GXT+PFyZTl6TtOFc5egxHIP9IlQ+RbupQuX4RkT/Bee4/kQuC02Xkzg84JcT7oLYtDIQxp+v7w==\"\n    },\n    \"acorn-walk\": {\n      \"version\": \"8.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.2.0.tgz\",\n      \"integrity\": \"sha512-k+iyHEuPgSw6SbuDpGQM+06HQUa04DZ3o+F6CSzXMvvI5KMvnaEqXe+YVe555R9nn6GPt404fos4wcgpw12SDA==\"\n    },\n    \"arg\": {\n      \"version\": \"4.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/arg/-/arg-4.1.3.tgz\",\n      \"integrity\": \"sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==\"\n    },\n    \"create-require\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz\",\n      \"integrity\": \"sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==\"\n    },\n    \"diff\": {\n      \"version\": \"4.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/diff/-/diff-4.0.2.tgz\",\n      \"integrity\": \"sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==\"\n    },\n    \"make-error\": {\n      \"version\": \"1.3.6\",\n      \"resolved\": \"https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz\",\n      \"integrity\": \"sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==\"\n    },\n    \"ts-node\": {\n      \"version\": \"10.9.1\",\n      \"resolved\": \"https://registry.npmjs.org/ts-node/-/ts-node-10.9.1.tgz\",\n      \"integrity\": \"sha512-NtVysVPkxxrwFGUUxGYhfux8k78pQB3JqYBXlLRZgdGUqTO5wU/UyHop5p70iEbGhB7q5KmiZiU0Y3KlJrScEw==\",\n      \"requires\": {\n        \"@cspotcode/source-map-support\": \"^0.8.0\",\n        \"@tsconfig/node10\": \"^1.0.7\",\n        \"@tsconfig/node12\": \"^1.0.7\",\n        \"@tsconfig/node14\": \"^1.0.0\",\n        \"@tsconfig/node16\": \"^1.0.2\",\n        \"acorn\": \"^8.4.1\",\n        \"acorn-walk\": \"^8.1.1\",\n        \"arg\": \"^4.1.0\",\n        \"create-require\": \"^1.1.0\",\n        \"diff\": \"^4.0.1\",\n        \"make-error\": \"^1.1.1\",\n        \"v8-compile-cache-lib\": \"^3.0.1\",\n        \"yn\": \"3.1.1\"\n      }\n    },\n    \"typescript\": {\n      \"version\": \"4.7.4\",\n      \"resolved\": \"https://registry.npmjs.org/typescript/-/typescript-4.7.4.tgz\",\n      \"integrity\": \"sha512-C0WQT0gezHuw6AdY1M2jxUO83Rjf0HP7Sk1DtXj6j1EwkQNZrHAg2XPWlq62oqEhYvONq5pkC2Y9oPljWToLmQ==\"\n    },\n    \"v8-compile-cache-lib\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz\",\n      \"integrity\": \"sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==\"\n    },\n    \"yn\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/yn/-/yn-3.1.1.tgz\",\n      \"integrity\": \"sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==\"\n    }\n  }\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.5439453125,
          "content": "{\n  \"name\": \"typerunner\",\n  \"version\": \"0.0.1\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"README.md\"\n  ],\n  \"directories\": {\n    \"test\": \"tests\"\n  },\n  \"scripts\": {\n    \"bench\": \"ts-node tests/bench.ts\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/marcj/TypeRunner.git\"\n  },\n  \"author\": \"\",\n  \"bugs\": {\n    \"url\": \"https://github.com/marcj/TypeRunner/issues\"\n  },\n  \"homepage\": \"https://github.com/marcj/TypeRunner#readme\",\n  \"devDependencies\": {\n    \"ts-node\": \"^10.9.1\",\n    \"typescript\": \"^4.7.4\"\n  }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}