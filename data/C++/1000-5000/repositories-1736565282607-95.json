{
  "metadata": {
    "timestamp": 1736565282607,
    "page": 95,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ThePhD/sol2",
      "stars": 4322,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.1591796875,
          "content": "# # # # sol2\n# The MIT License (MIT)\n# \n# Copyright (c) 2013-2022 Rapptz, ThePhD, and contributors\n# \n# Permission is hereby granted, free of charge, to any person obtaining a copy of\n# this software and associated documentation files (the \"Software\"), to deal in\n# the Software without restriction, including without limitation the rights to\n# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n# the Software, and to permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n# \n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n# \n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n---\nBasedOnStyle: WebKit\nIndentWidth: 5\nTabWidth: 5\nContinuationIndentWidth: 5\nUseTab: ForIndentation\n\n# Namespaces\nNamespaceIndentation: All\nCompactNamespaces: true\nFixNamespaceComments: true\n\n# Overall Alignment\nColumnLimit: 160\nAlignAfterOpenBracket: DontAlign # uses ContinuationIndentWidth for this instead\nAccessModifierOffset: -5 # do not push public: or private: around\n#AlignConsecutiveAssignments: true # affects more than what's expected: do not use\n#AlignConsecutiveDeclarations: true # affects more than what's expected: do not use\n\n# Type Alignment\nDerivePointerAlignment: false\nPointerAlignment: Left\nAlwaysBreakTemplateDeclarations: true\nAlwaysBreakBeforeMultilineStrings: true\n\n# Comments\nAlignTrailingComments: true\nReflowComments: true\n\n# Macros\nAlignEscapedNewlines: Left\n#IndentPPDirectives: None\n\n# Functions\nAllowShortFunctionsOnASingleLine: None\nAlwaysBreakAfterReturnType: None\nBreakConstructorInitializers: BeforeComma\nConstructorInitializerIndentWidth: 0\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nBinPackArguments: false\nBinPackParameters: true\n\n# Classes\nBreakBeforeInheritanceComma: false\n\n# Braces\nCpp11BracedListStyle: false\nBreakBeforeBraces: Custom\nBraceWrapping:\n  AfterEnum: false\n  AfterStruct: false\n  AfterControlStatement: false\n  AfterClass: false\n  AfterNamespace: false\n  AfterStruct: false\n  AfterUnion: false\n  BeforeElse: true\n  BeforeCatch: true\n  IndentBraces: false\n  SplitEmptyFunction: false\n  SplitEmptyRecord: false\n  SplitEmptyNamespace: true\n\n# Control Statements\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nIndentCaseLabels: false\n\n# Spaces\nSpaceAfterCStyleCast: false\nSpacesInCStyleCastParentheses: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesInAngles: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nMaxEmptyLinesToKeep: 3\n\n# OCD\nSortUsingDeclarations: true\nSortIncludes: false\n\n---\nLanguage: Cpp\nStandard: Cpp11\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 1.2412109375,
          "content": "# # # # sol2\r\n# The MIT License (MIT)\r\n# \r\n# Copyright (c) 2013-2022 Rapptz, ThePhD, and contributors\r\n# \r\n# Permission is hereby granted, free of charge, to any person obtaining a copy of\r\n# this software and associated documentation files (the \"Software\"), to deal in\r\n# the Software without restriction, including without limitation the rights to\r\n# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\n# the Software, and to permit persons to whom the Software is furnished to do so,\r\n# subject to the following conditions:\r\n# \r\n# The above copyright notice and this permission notice shall be included in all\r\n# copies or substantial portions of the Software.\r\n# \r\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\n# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\n# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\n# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n# Ignore literally everything\r\n**\r\n\r\n# Except the script directory\r\n!scripts/preparation*\r\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.388671875,
          "content": "# # # # sol2\r\n# The MIT License (MIT)\r\n# \r\n# Copyright (c) 2013-2022 Rapptz, ThePhD, and contributors\r\n# \r\n# Permission is hereby granted, free of charge, to any person obtaining a copy of\r\n# this software and associated documentation files (the \"Software\"), to deal in\r\n# the Software without restriction, including without limitation the rights to\r\n# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\n# the Software, and to permit persons to whom the Software is furnished to do so,\r\n# subject to the following conditions:\r\n# \r\n# The above copyright notice and this permission notice shall be included in all\r\n# copies or substantial portions of the Software.\r\n# \r\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\n# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\n# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\n# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n# Python (Bytecode)\r\n*.pyc\r\n\r\n# ninja files\r\n*.ninja\r\n\r\n# Visual Studio\r\n*.props\r\n*.user\r\n.vs/\r\nDebug/\r\nRelease/\r\nx64/\r\nx86/\r\n*.pyproj\r\n*.vcxproj\r\n*.vcxproj.filters\r\n*.tlog\r\n*.lastbuildstate\r\n*.idb\r\n*.sln\r\n*.gitattributes\r\n\r\n# VSCode\r\n.vscode/\r\n\r\n# scratch space\r\n/main.cpp\r\nscratch/\r\n\r\n# CMake\r\n/.cmake\r\nbuild/\r\nbuild-sol2/\r\nCMakeCache.txt\r\nCMakeFiles/\r\n\r\n# Compiler outputs\r\nobj/*\r\nbin/*\r\nmain.exe\r\nmain.o\r\nlua53.dll\r\nlua-5.3.4.dll\r\nmain.ilk\r\nmain.pdb\r\n\r\n# Dropbox interference\r\n.dropbox*\r\n\r\n# QtCreator\r\n*.creator.user.*\r\n*.config\r\n*.creator\r\n*.files\r\n*.includes\r\n\r\n# Local Lua Testbeds\r\nlua-5.4.0-cxx/\r\nlua-5.4.0/\r\nlua-5.4.0-work1-cxx/\r\nlua-5.4.0-work1/\r\nlua-5.3.4-cxx/\r\nlua-5.3.4/\r\nlua-5.3.2/\r\nlua-5.3.1/\r\nlua-5.3.0/\r\nlua-5.2.4/\r\nlua-5.2.2/\r\nlua-5.2.3/\r\nlua-5.1.5/\r\nLuaJIT-2.1.0/\r\nluajit-2.0.5/\r\nluajit-2.0.3/\r\nliblua.a\r\nlib/liblua5.2.a\r\n\r\n# Docs Artefacts\r\ndocs/build/\r\n\r\n# Sublime Text\r\n*.sublime-workspace\r\n*.sublime-project\r\n\r\n\r\n# MacOS Garbage\r\n.DS_Store\r\n\r\n# Windows Crap\r\ndesktop.ini\r\n*.db\r\n\r\n# Miscellaneous\r\nexternal/\r\nvendor/\r\n.idea/\r\ncmake-build-debug/\r\ncmake-build-relwithdebinfo/\r\ncmake-build-release/\r\n/subprojects/*\r\n!/subprojects/*.wrap\r\nlua-5.3/\r\nlua-5.3-cxx/\r\nlua-5.4/\r\nLuaJIT-2.0/\r\nLuaJIT-2.1/\r\nlua-5.1/\r\nlua-5.2/\r\n~syncthing*\r\n.tmp\r\n**/._**\n"
        },
        {
          "name": ".style.yapf",
          "type": "blob",
          "size": 0.396484375,
          "content": "[style]\r\nbased_on_style = pep8\r\nuse_tabs = true\r\nindent_width = 5\r\n\r\nspaces_before_comment = 1\r\nspaces_around_power_operator = true\r\nspace_between_ending_comma_and_closing_bracket = true\r\n\r\ncontinuation_align_style = SPACE\r\nsplit_before_first_argument = false\r\nsplit_complex_comprehension = true\r\ndedent_closing_brackets = false\r\ncoalesce_brackets = true\r\nalign_closing_bracket_with_visual_indent = false\r\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 11.9052734375,
          "content": "# # # # sol2\n# The MIT License (MIT)\n# \n# Copyright (c) 2013-2022 Rapptz, ThePhD, and contributors\n# \n# Permission is hereby granted, free of charge, to any person obtaining a copy of\n# this software and associated documentation files (the \"Software\"), to deal in\n# the Software without restriction, including without limitation the rights to\n# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n# the Software, and to permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n# \n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n# \n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n# # # # sol2\n# # # Required minimum version statement\ncmake_minimum_required(VERSION 3.16.0)\n# # # Project Include - file that is included after project declaration is finished\nset(CMAKE_PROJECT_INCLUDE \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/Includes/Project.cmake\")\n\n# # # project declaration\nproject(sol2 VERSION 4.0.0 LANGUAGES CXX C)\n\nif (sol2-is-top-level-project)\n\tmessage(STATUS \"sol2 is the top-level directory...\")\nendif()\n\n# Include standard modules\ninclude(CMakePackageConfigHelpers)\ninclude(CheckCXXCompilerFlag)\ninclude(CMakeDependentOption)\ninclude(GNUInstallDirs)\ninclude(FetchContent)\n\n# # # Configuration\n# # Cached defines, strings, paths and options\nset(SOL2_LUA_VERSION \"5.4.4\" CACHE STRING \"The version of Lua needed. Can be 5.1, 5.2, 5.3, 5.4, LuaJIT, or a more specific 3-part version number for a specifc Lua (e.g., 5.4.4 or luajit-2.0.5)\")\nset(SOL2_BUILD_LUA TRUE CACHE BOOL \"Always build Lua, do not search for it in the system\")\nset(SOL2_PLATFORM \"x64\" CACHE STRING \"Target platform to compile for when building binaries (x86, x64)\")\noption(SOL2_CI \"Whether or not we are in continguous integration mode\" OFF)\noption(SOL2_SYSTEM_INCLUDE \"Whether or not sol2 should be considered a system include. This helps suppress errors for when the sol2 author is a big derp and doesn't fix every single warning, ever.\" ON)\noption(SOL2_TESTS \"Enable build of tests\" OFF)\noption(SOL2_EXAMPLES \"Enable build of examples\" OFF)\noption(SOL2_INTEROP_EXAMPLES \"Enable build of interop examples\" OFF)\noption(SOL2_DYNAMIC_LOADING_EXAMPLES \"Enable build of interop examples\" OFF)\noption(SOL2_SINGLE \"Enable generation and build of single header files\" OFF)\noption(SOL2_DOCS \"Enable build of documentation\" OFF)\noption(SOL2_ENABLE_INSTALL \"Enable installation of Sol2\" ON)\n# Single tests and examples tests will only be turned on if both SINGLE and TESTS are defined\nCMAKE_DEPENDENT_OPTION(SOL2_TESTS_SINGLE \"Enable build of tests using the premade single headers\" ON\n\t\"SOL2_SINGLE;SOL2_TESTS\" OFF)\nCMAKE_DEPENDENT_OPTION(SOL2_EXAMPLES_SINGLE \"Enable build of examples using the generated single headers\" OFF\n\t\"SOL2_SINGLE;SOL2_EXAMPLES\" OFF)\nCMAKE_DEPENDENT_OPTION(SOL2_INTEROP_EXAMPLES_SINGLE \"Enable build of interop examples using the generated single headers\" OFF\n\t\"SOL2_SINGLE;SOL2_INTEROP_EXAMPLES\" OFF)\nCMAKE_DEPENDENT_OPTION(SOL2_DYNAMIC_LOADING_EXAMPLES_SINGLE \"Enable build of dynamic loading examples using the generated single headers\" OFF\n\t\"SOL2_SINGLE;SOL2_DYNAMIC_LOADING_EXAMPLES\" OFF)\nCMAKE_DEPENDENT_OPTION(SOL2_TESTS_EXAMPLES \"Enable build of examples as tests\" ON\n\t\"SOL2_EXAMPLES\" OFF)\nCMAKE_DEPENDENT_OPTION(SOL2_TESTS_INTEROP_EXAMPLES \"Enable build of interop examples as tests\" ON\n\t\"SOL2_INTEROP_EXAMPLES\" OFF)\nCMAKE_DEPENDENT_OPTION(SOL2_TESTS_DYNAMIC_LOADING_EXAMPLES \"Enable build of dynamic loading examples as tests\" ON\n\t\"SOL2_DYNAMIC_LOADING_EXAMPLES\" OFF)\nCMAKE_DEPENDENT_OPTION(BUILD_LUA_AS_DLL \"Build Lua as a DLL\" ON\n\t\"SOL2_BUILD_LUA\" OFF)\n\n\nif (SOL2_SYSTEM_INCLUDE)\n\tset(sol2-system-include SYSTEM)\nendif()\n\n# # # sol2 Source Groups\n# # Sources everyone is going to need\n# Header files\nfile(GLOB_RECURSE sol2-headers\n\tLIST_DIRECTORIES FALSE\n\tCONFIGURE_DEPENDS\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/sol*.hpp\n)\n\nfile(GLOB_RECURSE sol2-sources\n\tLIST_DIRECTORIES FALSE\n\tCONFIGURE_DEPENDS\n\t${CMAKE_CURRENT_SOURCE_DIR}/source/**\n)\n\n# # # sol2 Library\n# # Add a target for sol2's library to be included by external users\nadd_library(sol2 INTERFACE)\nadd_library(sol2::sol2 ALIAS sol2)\ntarget_include_directories(sol2 ${sol2-system-include}\n\tINTERFACE\n\t$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n\t$<INSTALL_INTERFACE:include>)\n\n# # Version configurations\nconfigure_package_config_file(\n\tcmake/sol2-config.cmake.in\n\t\"${CMAKE_CURRENT_BINARY_DIR}/cmake/sol2-config.cmake\"\n\tINSTALL_DESTINATION ${CMAKE_INSTALL_DATADIR}/cmake/sol2\n\tNO_CHECK_REQUIRED_COMPONENTS_MACRO)\n\nwrite_basic_package_version_file(\n\t\"${CMAKE_CURRENT_BINARY_DIR}/cmake/sol2-config-version.cmake\"\n\tCOMPATIBILITY AnyNewerVersion)\n\nexport(TARGETS sol2\n\tFILE \"${CMAKE_CURRENT_BINARY_DIR}/cmake/sol2-targets.cmake\")\n\nif(SOL2_ENABLE_INSTALL)\n\tinstall(TARGETS sol2\n\t\tEXPORT sol2)\n\n\tinstall(EXPORT sol2\n\t\tNAMESPACE sol2::\n\t\tFILE sol2-targets.cmake\n\t\tDESTINATION \"${CMAKE_INSTALL_DATADIR}/cmake/sol2\")\n\n\tinstall(DIRECTORY include/sol\n\t\tDESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\")\n\n\tinstall(FILES\n\t\t\"${CMAKE_CURRENT_BINARY_DIR}/cmake/sol2-config.cmake\"\n\t\t\"${CMAKE_CURRENT_BINARY_DIR}/cmake/sol2-config-version.cmake\"\n\t\tDESTINATION \"${CMAKE_INSTALL_DATADIR}/cmake/sol2\")\nendif()\n\n# # # sol2 Library - Single header target\nif (SOL2_SINGLE)\n\tmessage(STATUS \"sol2 adding single...\")\n\tadd_subdirectory(single)\nendif()\n\n# # # documentation\n# Generates the docs\nif (SOL2_DOCS)\n\tmessage(STATUS \"sol2 adding docs...\")\n\tadd_subdirectory(documentation)\nendif()\n\nif(SOL2_ENABLE_INSTALL)\n\t# pkg-config support, except on Windows\n\tif(NOT WIN32 OR NOT CMAKE_HOST_SYSTEM_NAME MATCHES Windows)\n\t\tset(PKGCONFIG_INSTALL_DIR\n\t\t\t\"${CMAKE_INSTALL_DATAROOTDIR}/pkgconfig\"\n\t\t\tCACHE PATH \"Path where sol2.pc is installed\")\n\n\t\tconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/sol2.pc.in\" \"${CMAKE_CURRENT_BINARY_DIR}/sol2.pc\" @ONLY)\n\t\tinstall(FILES \"${CMAKE_CURRENT_BINARY_DIR}/sol2.pc\" DESTINATION \"${PKGCONFIG_INSTALL_DIR}\")\n\tendif()\nendif()\n\nif (SOL2_CI)\n\tmessage(STATUS \"sol2 Contiguous Integration is on\")\nendif()\n\nif (SOL2_EXAMPLES OR SOL2_TESTS_EXAMPLES OR SOL2_EXAMPLES_SINGLE OR SOL2_INTEROP_EXAMPLES OR SOL2_TESTS_INTEROP_EXAMPLES OR SOL2_INTEROP_EXAMPLES_SINGLE OR SOL2_DYNAMIC_LOADING_EXAMPLES OR SOL2_TESTS_DYNAMIC_LOADING_EXAMPLES OR SOL2_DYNAMIC_LOADING_EXAMPLES_SINGLE)\n\tset(SOL2_DO_EXAMPLES TRUE)\nelse()\n\tset(SOL2_DO_EXAMPLES FALSE)\nendif()\n\nif (SOL2_TESTS OR SOL2_TESTS_SINGLE)\n\tset(SOL2_DO_TESTS TRUE)\nelse()\n\tset(SOL2_DO_TESTS FALSE)\nendif()\n\n# # # Tests, Examples and other CI suites that come with sol2\nif (sol2-is-top-level-project)\n\t# # # General project output locations\n\tif (CMAKE_SIZEOF_VOID_P EQUAL 4)\n\t\tset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/x86/lib\")\n\t\tset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/x86/bin\")\n\t\tset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/x86/bin\")\n\telse()\n\t\tset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/x64/lib\")\n\t\tset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/x64/bin\")\n\t\tset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/x64/bin\")\n\tendif()\n\n\tif (NOT CMAKE_CXX_STANDARD GREATER_EQUAL 17)\n\t\tset(CMAKE_CXX_STANDARD 17)\n\tendif()\n\n\tif (NOT CMAKE_C_STANDARD GREATER_EQUAL 11)\n\t\tset(CMAKE_C_STANDARD 11)\n\tendif()\n\n\t# Build Flag Settings\n\t# Basic/Normal flags\n\tcheck_compiler_flag(disable-permissive MSVC /permissive- GCC -pedantic)\n\tcheck_compiler_flag(utf8-literal-encoding MSVC /execution-charset:utf-8 GCC -fexec-charset=utf-8)\n\tcheck_compiler_flag(utf8-source-encoding MSVC /source-charset:utf-8 GCC -finput-charset=utf-8)\n\tcheck_compiler_flag(extra-constexpr-depth MSVC /constexpr:depth2147483647 GCC -fconstexpr-depth=2147483647 CLANG -fconstexpr-depth=2147483647)\n\tcheck_compiler_flag(extra-constexpr-steps MSVC /constexpr:steps2147483647 GCC -fconstexpr-ops-limit=2147483647 CLANG -fconstexpr-steps=2147483647)\n\tcheck_compiler_flag(template-debugging-mode GCC -ftemplate-backtrace-limit=0)\n\tcheck_compiler_flag(big-obj MSVC /bigobj)\n\t# Overall warning flags\n\tcheck_compiler_flag(pedantic GCC -pedantic)\n\tcheck_compiler_flag(warn-pedantic GCC -Wpedantic)\n\tcheck_compiler_flag(warn-all MSVC /W4 GCC -Wall)\n\tcheck_compiler_flag(warn-extra GCC -Wextra)\n\tcheck_compiler_flag(warn-errors MSVC /WX GCC -Werror)\n\t# Individual warnings/errors\n\tcheck_compiler_diagnostic(unknown-warning)\n\tcheck_compiler_diagnostic(unknown-warning-option)\n\tcheck_compiler_diagnostic(microsoft-cast)\n\tcheck_compiler_diagnostic(noexcept-type)\n\tcheck_compiler_diagnostic(unreachable-code MSVC 4702)\n\tcheck_compiler_diagnostic(padding-from-alignment MSVC 4324)\n\n\t# # # Libraries\n\t# Here, we pull in all the necessary libraries for building examples and tests\n\t# Find threading library\n\tfind_package(Threads REQUIRED)\n\n\tstring(TOLOWER ${SOL2_LUA_VERSION} NORMALIZED_LUA_VERSION)\n\t# Find way to get Lua: build if requested, or attempt to build if no matching version is found\n\tif (SOL2_BUILD_LUA)\n\t\tfind_package(LuaBuild REQUIRED COMPONENTS ${SOL2_LUA_VERSION})\n\telseif (NOT SOL2_LUA_VERSION)\n\t\tfind_package(LuaBuild REQUIRED)\n\telse ()\n\t\tif (NORMALIZED_LUA_VERSION MATCHES \"5.1\")\n\t\t\tset(CREATE_LUALIB_TARGET TRUE)\n\t\t\tfind_package(Lua 5.1 EXACT REQUIRED)\n\t\telseif(NORMALIZED_LUA_VERSION MATCHES \"5.2\")\n\t\t\tset(CREATE_LUALIB_TARGET TRUE)\n\t\t\tfind_package(Lua 5.2 EXACT REQUIRED)\n\t\telseif(NORMALIZED_LUA_VERSION MATCHES \"5.3\")\n\t\t\tset(CREATE_LUALIB_TARGET TRUE)\n\t\t\tfind_package(Lua 5.3 EXACT REQUIRED)\n\t\telseif(NORMALIZED_LUA_VERSION MATCHES \"5.4\")\n\t\t\tset(CREATE_LUALIB_TARGET TRUE)\n\t\t\tfind_package(Lua 5.4 EXACT REQUIRED)\n\t\telseif(NORMALIZED_LUA_VERSION MATCHES \"luajit\")\n\t\t\tset(CREATE_LUALIB_TARGET TRUE)\n\t\t\tfind_package(LuaJIT REQUIRED)\n\t\telse()\n\t\t\tfind_package(LuaBuild ${SOL2_LUA_VERSION} REQUIRED)\n\t\tendif()\n\tendif()\n\n\tif (CREATE_LUALIB_TARGET AND LUA_FOUND)\n\t\tset(lualib lua_imported_lib_${SOL2_LUA_VERSION})\n\t\tforeach(lua_search_lib ${LUA_LIBRARIES})\n\t\t\tget_filename_component(lsl_fname ${lua_search_lib} NAME)\n\t\t\tif (lsl_fname MATCHES \"lua\" OR lsl_fname MATCHES \"Lua\" OR lsl_fname MATCHES \"LUA\")\n\t\t\t\tif (lsl_fname MATCHES \"\\.so|\\.dylib|\\.dll\")\n\t\t\t\t\tset(lualibtype SHARED)\n\t\t\t\t\tset(lualiblocation ${lua_search_lib})\n\t\t\t\telse()\n\t\t\t\t\tset(lualibtype STATIC)\n\t\t\t\t\tset(lualiblocation ${lua_search_lib})\n\t\t\t\tendif()\n\t\t\telse()\n\t\t\t\tset(LUA_SEARCH_DEPENDENCY_LIBS ${LUA_SEARCH_DEPENDENCY_LIBS} \"${lua_search_lib}\")\n\t\t\tendif()\n\t\tendforeach()\n\t\tadd_library(${lualib} ${lualibtype} IMPORTED)\n\t\tset_target_properties(${lualib}\n\t\t\tPROPERTIES \n\t\t\tINTERFACE_INCLUDE_DIRECTORIES ${LUA_INCLUDE_DIR}\n\t\t\tINTERFACE_LINK_LIBRARIES \"${LUA_SEARCH_DEPENDENCY_LIBS} ${CMAKE_DL_LIBS}\"\n\t\t\tIMPORTED_LINK_INTERFACE_LANGUAGES C\n\t\t\tIMPORTED_LOCATION ${lualiblocation})\n\t\tset(LUA_LIBRARIES ${lualib})\n\tendif()\n\n\tif (NOT LUA_FOUND AND NOT LUABUILD_FOUND)\n\t\tmessage(FATAL_ERROR \"sol2 Lua \\\"${SOL2_LUA_VERSION}\\\" not found and could not be targeted for building\")\n\tendif()\n\t\n\t# # Enable test harness for regular, example or single tests\n\tif (SOL2_DO_TESTS OR (SOL2_TESTS_EXAMPLES AND SOL2_DO_EXAMPLES))\n\t\t# enable ctest\n\t\tmessage(STATUS \"sol2 testing enabled...\")\n\t\tenable_testing()\n\tendif()\n\t\n\t# # # Examples\n\t# # Enable examples to be built against the library\n\tif (SOL2_DO_EXAMPLES)\n\t\t# NOTE: will also add to tests if TESTS is defined\n\t\tmessage(STATUS \"sol2 adding examples...\")\n\t\tadd_subdirectory(examples)\n\tendif()\n\t\n\t# # # Tests\n\t# # Add tests here\n\tif (SOL2_DO_TESTS)\n\t\t# add subdir to get going\n\t\tmessage(STATUS \"sol2 adding tests...\")\n\t\tadd_subdirectory(tests)\n\tendif()\n\n\t# # # Scratch Space\n\t# # Scratch space for diagnosing bugs and other shenanigans\n\tif (SOL2_SCRATCH)\n\t\tmessage(STATUS \"sol2 adding scratch space...\")\n\t\tadd_subdirectory(scratch)\n\tendif()\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.2099609375,
          "content": "## Contributing to sol\r\n\r\nLooking to contribute to sol? Well, first thing I want to mention is thank you!\r\nSecond of all, this is probably where you should look :)\r\n\r\n## Reporting Issues\r\n\r\nIf you found a bug, please make sure to make an issue in the issue tracker.\r\n\r\nThe guidelines for reporting a bug are relatively simple and are as follows:\r\n\r\n1. Produce a simple, short, compilable test case that reproduces your problem.\r\n2. Make a descriptive title that summarises the bug as a whole.\r\n3. Explain the bug in as much detail as you can in the body of the issue.\r\n\r\nIf you have all of those requirements set, then your issue reporting is golden.\r\n\r\n## Submitting a pull request\r\n\r\nSubmitting a pull request is fairly simple, just make sure it focuses on a single aspect and doesn't \r\nmanage to have scope creep and it's probably good to go. It would be incredibly lovely if the style is \r\nconsistent to those found in the repository.\r\n\r\nTo help with this, a `.clang-format` is included. Please run it on your code before you push anything.\r\n\r\nIf you don't meet all of these style guidelines, don't fret. I'll probably fix it. But please\r\ndo make an effort to actually meet them. Otherwise I'm more likely to reject the pull request.\r\n"
        },
        {
          "name": "CONTRIBUTORS.md",
          "type": "blob",
          "size": 1.0498046875,
          "content": "# 🎉 Donators! ♥ 🎉\r\n\r\nThank you to all patrons, donators and contributors who help keep sol2 amazing.\r\n\r\n- Robert Salvet\r\n- Ορφέας Ζαφείρης - 2x Donations!\r\n- Michael Wallar\r\n- Johannes Schultz\r\n- Elias Daler\r\n- BECKMANN & EGLE Industrieelektronik GmbH [bue.de](https://www.bue.de/)\r\n\r\n\r\n# 🎉 Patrons! ♥ 🎉\r\n\r\nBeyond just a one-time donation, patrons make a continued commitment to help keep sol2 supported and bug-free. Thank you for your patronage! Here are the supporters that wanted to be featured as sol2 contributors.\r\n\r\n- Joel Falcou\r\n- Michael Caisse\r\n- Joshua Fisher\r\n- Ορφέας Ζαφείρης\r\n\r\n\r\n# Company Patrons / Supporters #\r\n\r\nCompanies who sign up for a long-term support contract or patronage are listed here! They really push forward what's possible with sol2 (and the newer v3)! Please reach out to phdofthehouse@gmail.com if you are interested in a custom solution or a long-term support contract that goes beyond the current release's needs!\r\n\r\n- Intrepid Control Systems [intrepidcs.com](https://www.intrepidcs.com/)\r\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 3.0126953125,
          "content": "# # # # sol2\n# The MIT License (MIT)\n# \n# Copyright (c) 2013-2017 Rapptz, ThePhD, and contributors\n# \n# Permission is hereby granted, free of charge, to any person obtaining a copy of\n# this software and associated documentation files (the \"Software\"), to deal in\n# the Software without restriction, including without limitation the rights to\n# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n# the Software, and to permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n# \n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n# \n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n# Start from the ubuntu:bionic image\nFROM ubuntu:bionic\n# owner\nLABEL author=\"ThePhD <phdofthehouse@gmail.com>\"\nLABEL maintainer=\"ThePhD <phdofthehouse@gmail.com>\"\n# We want our working directory to be the home directory\nWORKDIR /root\n\n# RUN is how you write to the image you've pulled down\n# RUN actions are \"committed\" to the image, and everything will\n# start from the base after all run commands are executed\nRUN apt-get update && apt-get install -y \\\n    zsh\n\n# Scripts should be added directly to the docker image to get us started\n# We can mount the whole sol2 directory later as a volume\nADD scripts/ /root/sol2-scripts\n\nRUN mkdir -p /root/build-sol2/Debug /root/build-sol2/Release\nRUN chmod +x /root/sol2-scripts/preparation.linux.sh\n\nVOLUME /root/sol2\n#ADD . /root/sol2\n\n# # Above this is more or less static parts: the rest is non-static\n# # This is ordered like this so making multiple of these\n# # containers is more or less identical up to this point\n# Command line arguments, with default values\nARG SOL2_PLATFORM=x64\nARG SOL2_LUA_VERSION=x64\nARG SOL2_LUA_VERSION=5.4.4\nARG SOL2_TEST_SINGLE=false\nARG SOL2_TEST_INTEROP=false\nARG SOL2_CI=true\nARG GCC_VERSION\nARG LLVM_VERSION\n\n# Potential environment variables\nENV SOL2_LUA_VERSION=${SOL2_LUA_VERSION} SOL2_TEST_SINGLE=${SOL2_TEST_SINGLE} SOL2_TEST_INTEROP=${SOL2_TEST_INTEROP} SOL2_CI=${SOL2_CI} SOL2_PLATFORM=${SOL2_PLATFORM} GCC_VERSION=${GCC_VERSION} LLVM_VERSION=${LLVM_VERSION} SOL2_DIR=/root/sol2\n\nRUN [\"/usr/bin/env\", \"zsh\", \"-e\", \"/root/sol2-scripts/preparation.linux.sh\"]\n\n# CMD/ENTRYPOINT is different from RUN\n# these are done on a per-instantiation and essentially describe\n# the DEFAULT behavior of this container when its started, not what state it\n# gets \"saved\" in...\n# it only runs the last CMD/ENTRYPOINT as the default behavior:\n# multiple CMDs will not be respected\nENTRYPOINT [\"/usr/bin/env\", \"zsh\", \"-e\", \"/root/sol2/scripts/run.linux.sh\"]\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.09765625,
          "content": "The MIT License (MIT)\r\n\r\nCopyright (c) 2013-2022 Rapptz, ThePhD, and contributors\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.0400390625,
          "content": "# sol2\n\n[![Documentation Status](https://readthedocs.org/projects/sol2/badge/?version=latest)](http://sol2.readthedocs.io/en/latest/?badge=latest)\n\n\n\nsol2 is a C++ library binding to Lua. It currently supports all Lua versions 5.1+ (LuaJIT 2.0+ and MoonJIT included). sol2 aims to be easy to use and easy to add to a project. The library is header-only for easy integration with projects, and a single header can be used for drag-and-drop start up.\n\n\n\n## Sneak Peek\n\n```cpp\n#include <sol/sol.hpp>\n#include <cassert>\n\nint main() {\n    sol::state lua;\n    int x = 0;\n    lua.set_function(\"beep\", [&x]{ ++x; });\n    lua.script(\"beep()\");\n    assert(x == 1);\n}\n```\n\n```cpp\n#include <sol/sol.hpp>\n#include <cassert>\n\nstruct vars {\n    int boop = 0;\n};\n\nint main() {\n    sol::state lua;\n    lua.new_usertype<vars>(\"vars\", \"boop\", &vars::boop);\n    lua.script(\"beep = vars.new()\\n\"\n               \"beep.boop = 1\");\n    assert(lua.get<vars>(\"beep\").boop == 1);\n}\n```\n\nMore examples are given in the examples directory [here](https://github.com/ThePhD/sol2/tree/develop/examples). \n\n\n## Documentation\n\nFind it [here](http://sol2.rtfd.io/). A run-through kind of tutorial is [here](http://sol2.readthedocs.io/en/latest/tutorial/all-the-things.html)! The API documentation goes over most cases (particularly, the \"api/usertype\" and \"api/table_proxy\" and \"api/function\" sections) that should still get you off your feet and going, and there's an examples directory [here](https://github.com/ThePhD/sol2/tree/develop/examples) as well.\n\n\n\n\n# \"I need X Feature or Fix, Right Now™\"\n\nFind the support option that's right for you, [here](https://github.com/ThePhD/.github/blob/main/SUPPORT.md)! If you're happy to wait, you can just file a boring issue and we'll get to it Whenever There Is Time™.\n\n\n\n## I want to donate to help!\n\nYou can find [donation and sponorship options here](https://github.com/ThePhD/.github/blob/main/SUPPORT.md#support-in-general) and from the little heart button near the top of this repository that will take you to a bevy of links in which you can donate and show support for this project and others!\n\n\n\n\n# Features\n\n- [Fastest in the land](http://sol2.readthedocs.io/en/latest/benchmarks.html) (see: sol2 bar in graph).\n- Supports retrieval and setting of multiple types including: \n  * `std::string`, `std::wstring`, `std::u16string` and `std::u32string` support (and for views).\n  * understands and works with containers such as `std::map/unordered_map`, c-style arrays, vectors, non-standard custom containers and more.\n  * user-defined types, with or **without** registering that type \n  * `std::unique_ptr`, `std::shared_ptr`, and optional support of other pointer types like `boost::shared_ptr`.\n  * custom `optional<T>` that works with references, and support for the inferior `std::optional`.\n  * C++17 support for variants and similar new types.\n- Lambda, function, and member function bindings are supported.\n- Intermediate type for checking if a variable exists.\n- Simple API that completely abstracts away the C stack API, including `protected_function` with the ability to use an error-handling function.\n- `operator[]`-style manipulation of tables\n- C++ type representations in Lua userdata as `usertype`s with guaranteed cleanup.\n- Customization points to allow your C++ objects to be pushed and retrieved from Lua as multiple consecutive objects, or anything else you desire!\n- Overloaded function calls: `my_function(1); my_function(\"Hello\")` in the same Lua script route to different function calls based on parameters\n- Support for tables, nested tables, table iteration with `table.for_each` / `begin()` and `end()` iterators.\n- Zero string overhead for usertype function lookup.\n\n\n\n## Supported Compilers\n\nsol2 makes use of C++17 features. GCC 7.x.x and Clang 3.9.x (with `-std=c++1z` and appropriate standard library) or higher should be able to compile without problems. However, the officially supported and CI-tested compilers are:\n\n- GCC 7.x.x+ (MinGW 7.x.x+)\n- Clang 3.9.x+\n- Visual Studio 2017 Community (Visual C++ 15.0)+\n\nPlease make sure you use the `-std=c++2a`, `-std=c++1z`, `-std=c++17` or better standard flags \n(some of these flags are the defaults in later versions of GCC, such as 7+ and better).\n\nIf you would like support for an older compiler (at the cost of some features), use the latest tagged sol2 branch. If you would like support for an even older compiler, feel free to contact me for a Custom Solution.\n\nsol2 is checked by-hand for other platforms as well, including Android-based builds with GCC and iOS-based builds out of XCode with Apple-clang. It should work on both of these platforms, so long as you have the proper standards flags. If something doesn't work or you need special options, you may need to look into the different ways to support the project to have it done for you!\n\n\n\n## Creating a single header\n\nYou can grab a single header (and the single forward header) out of the library [here](https://github.com/ThePhD/sol2/tree/develop/single). For stable version, check the releases tab on GitHub for a provided single header file for maximum ease of use. A script called [`single.py`](https://github.com/ThePhD/sol2/blob/develop/single/single.py) is provided in the repository if there's some bleeding edge change that hasn't been published on the releases page. You can run this script to create a single file version of the library so you can only include that part of it. Check `single.py --help` for more info.\n\nIf you use CMake, you can also configure and generate a project that will generate the `sol2_single_header` for you. You can also include the project using CMake. Run CMake for more details. Thanks @Nava2, @alkino, @mrgreywater and others for help with making the CMake build a reality.\n\n\n\n\n# Testing\n\nTesting turns on certain CI-only variables in the CMake to test a myriad of configuration options. You can generate the tests by running CMake and configuring `SOL2_TESTS`, `SOL2_TESTS_SINGLE`, `SOL2_TESTS_EXAMPLES`, and `SOL2_EXAMPLES` to be on. Make sure `SOL2_SINGLE` is also on.\n\nYou will need any flavor of python3 and an available compiler. The testing suite will build its own version of Lua and LuaJIT, so you do not have to provide one (you may provide one with the `LUA_LOCAL_DIR` variable).\n\n\n\n# Presentations\n\n\"A Sun For the Moon - A Zero-Overhead Lua Abstraction using C++\"  \nThePhD\nLua Workshop 2016 - Mashape, San Francisco, CA  \n[Deck](https://github.com/ThePhD/sol2/blob/develop/docs/presentations/2016.10.14%20-%20ThePhD%20-%20No%20Overhead%20C%20Abstraction.pdf)\n\n\"Wrapping Lua C in C++ - Efficiently, Nicely, and with a Touch of Magic\"  \nThePhD\nBoston C++ Meetup November 2017 - CiC (Milk Street), Boston, MA  \n[Deck](https://github.com/ThePhD/sol2/blob/develop/docs/presentations/2017.11.08%20-%20ThePhD%20-%20Wrapping%20Lua%20C%20in%20C%2B%2B.pdf)\n\n\"Biting the CMake Bullet\"  \nThePhD\nBoston C++ Meetup February 2018 - CiC (Main Street), Cambridge, MA  \n[Deck](https://github.com/ThePhD/sol2/blob/develop/docs/presentations/2018.02.06%20-%20ThePhD%20-%20Biting%20the%20CMake%20Bullet.pdf)\n\n\"Compile Fast, Run Faster, Scale Forever: A look into the sol2 Library\"  \nThePhD\nC++Now 2018 - Hudson Commons, Aspen Physics Center, Aspen, Colorado  \n[Deck](https://github.com/ThePhD/sol2/blob/develop/docs/presentations/2018.05.10%20-%20ThePhD%20-%20Compile%20Fast%2C%20Run%20Faster%2C%20Scale%20Forever.pdf)\n\n\"Scripting at the Speed of Thought: Using Lua in C++ with sol2\"  \nThePhD\nCppCon 2018 - 404 Keystone, Meydenbauer Center, Aspen, Colorado  \n[Deck](https://github.com/ThePhD/sol2/blob/develop/docs/presentations/2018.09.28%20-%20ThePhD%20-%20Scripting%20at%20the%20Speed%20of%20Thought.pdf)\n\n\"The Plan for Tomorrow: Compile-Time Extension Points in C++\"\nThePhD\nC++Now 2019 - Flug Auditorium, Aspen Physics Center, Aspen, Colorado\n[Deck](https://github.com/ThePhD/sol2/blob/develop/docs/presentations/2019.05.10%20-%20ThePhD%20-%20The%20Plan%20for%20Tomorrow%20-%20Compile-Time%20Extension%20Points%20in%20C%2b%2b.pdf)\n\n\n\n\n# License\n\nsol2 is distributed with an MIT License. You can see LICENSE.txt for more info.\n\nIf you need a custom solution, [feel free to reach out](https://soasis.org/contact/opensource/).\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "list_headers.py",
          "type": "blob",
          "size": 2.0859375,
          "content": "#!/usr/bin/env python\n\nimport os\nimport re\n\ndescription = \"Lists all primary sol2 header files\"\n\nscript_path = os.path.normpath(os.path.dirname(os.path.realpath(__file__)))\nworking_dir = os.getcwd()\nos.chdir(script_path)\n\nincludes = set([])\nlocal_include = re.compile(r'#(\\s*?)include \"(.*?)\"')\nproject_include = re.compile(r'#(\\s*?)include <sol/(.*?)>')\npragma_once_cpp = re.compile(r'(\\s*)#(\\s*)pragma(\\s+)once')\nifndef_cpp = re.compile(r'#ifndef SOL_.*?_HPP')\ndefine_cpp = re.compile(r'#define SOL_.*?_HPP')\nendif_cpp = re.compile(r'#endif // SOL_.*?_HPP')\n\n\ndef get_include(line, base_path):\n\tlocal_match = local_include.match(line)\n\tif local_match:\n\t\t# local include found\n\t\tfull_path = os.path.normpath(\n\t\t    os.path.join(base_path, local_match.group(2))).replace(\n\t\t        '\\\\', '/')\n\t\treturn full_path\n\tproject_match = project_include.match(line)\n\tif project_match:\n\t\t# local include found\n\t\tfull_path = os.path.normpath(\n\t\t    os.path.join(base_path, project_match.group(2))).replace(\n\t\t        '\\\\', '/')\n\t\treturn full_path\n\treturn None\n\n\ndef is_include_guard(line):\n\treturn ifndef_cpp.match(line) or define_cpp.match(\n\t    line) or endif_cpp.match(line) or pragma_once_cpp.match(line)\n\n\ndef process_file(filename):\n\tglobal includes\n\tfilename = os.path.normpath(filename)\n\trelativefilename = filename.replace(script_path + os.sep, \"\").replace(\n\t    \"\\\\\", \"/\")\n\n\trel_filename = os.path.relpath(filename, script_path).replace('\\\\', '/')\n\n\tif rel_filename in includes:\n\t\treturn\n\n\tempty_line_state = True\n\n\twith open(filename, 'r', encoding='utf-8') as f:\n\t\tincludes.add(rel_filename)\n\n\t\tfor line in f:\n\t\t\t# skip comments\n\t\t\tif line.startswith('//'):\n\t\t\t\tcontinue\n\n\t\t\t# skip include guard non-sense\n\t\t\tif is_include_guard(line):\n\t\t\t\tcontinue\n\n\t\t\t# get relative directory\n\t\t\tbase_path = os.path.dirname(filename)\n\n\t\t\t# see if it's an include file\n\t\t\tname = get_include(line, base_path)\n\n\t\t\tif name:\n\t\t\t\tprocess_file(name)\n\t\t\t\tcontinue\n\nprocessed_files = [os.path.join(script_path, x) for x in ['include/sol/sol.hpp']]\n\nfor processed_file in processed_files:\n\tprocess_file(processed_file)\n\nfor include in includes:\n\tprint(include)"
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 1.5029296875,
          "content": "project('sol2', 'cpp')\n\n# Find lua dependency\nif get_option('lua_cpp')\n\tlua_cpp = 'true'\nelse\n\tlua_cpp = 'false'\nendif\n\nlua_dep = dependency('lua', fallback: [ 'lua', 'lua_dep' ], default_options: [ 'lua_cpp=' + lua_cpp ])\n\n# Set compiler flags if we're compiling lua as C++.\ncompile_args = []\n\nif get_option('lua_cpp')\n\tcompile_args = [ '-DSOL_USING_CXX_LUA=1' ]\nendif\n\n# Expose standard dependency.\nsol2_dep = declare_dependency(\n\tinclude_directories: include_directories('./include'),\n\tcompile_args: compile_args,\n\tdependencies: [ lua_dep ],\n)\n\n# Single header targets requested.\nif get_option('single')\n\n\t# Check if we have python installed (required for creating single).\n\tpython = find_program('python3', required: false)\n\n\tif not python.found()\n\t\tpython = find_program('python', required: false)\n\tendif\n\n\tif not python.found() \n\t\terror('Could not locate Python. Python is required when building a single header.')\n\tendif\n\n\t# List all headers that the single header comprises of.\n\tcmd = run_command(python, 'list_headers.py')\n\n\tif cmd.returncode() != 0\n\t\terror('Could not list sol2 header files.')\n\tendif\n\n\t# Create our custom target to generate the single header file.\n\tsol2_single = custom_target('sol2_single',\n\t\tinput: cmd.stdout().strip().split('\\n'),\n\t\toutput: 'sol.hpp',\n\t\tcommand: [ python, files('single/single.py'), '--input', './include', '--output', '@OUTPUT@' ]\n\t)\n\n\t# Expose the dependency.\n\tsol2_dep = declare_dependency(\n\t\tsources: [ sol2_single ],\n\t\tcompile_args: compile_args,\n\t\tdependencies: [ lua_dep ],\n\t)\nendif\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 0.2216796875,
          "content": "option('single', type: 'boolean', value: false, description: 'Generate the sol2 single header and expose the corresponding build targets')\noption('lua_cpp', type: 'boolean', value: false, description: 'Compile lua as C++ code')"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "single",
          "type": "tree",
          "content": null
        },
        {
          "name": "sol2.natvis",
          "type": "blob",
          "size": 1.9404296875,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?> \r\n<AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\r\n\t<Type Name=\"sol::optional&lt;*&gt;\">\r\n\t\t<DisplayString Condition=\"m_has_value == false\">empty</DisplayString>\r\n\t\t<DisplayString Condition=\"m_has_value ==  true\">{m_value}</DisplayString>\r\n\t\t<Expand>\r\n\t\t\t<Item Name=\"value\" Condition=\"m_has_value == true\">m_value</Item>\r\n\t\t</Expand>\r\n\t</Type>\r\n\t<Type Name=\"sol::basic_reference&lt;*&gt;\">\r\n\t\t<DisplayString>ref={ref} state={luastate}</DisplayString>\r\n\t\t<Expand>\r\n\t\t\t<Item Name=\"reference index\">ref</Item>\r\n\t\t\t<Item Name=\"state\">luastate</Item>\r\n\t\t</Expand>\r\n\t</Type>\r\n\t<Type Name=\"sol::stack_reference\">\r\n\t\t<DisplayString>index={index} state={luastate}</DisplayString>\r\n\t\t<Expand>\r\n\t\t\t<Item Name=\"stack index\">index</Item>\r\n\t\t\t<Item Name=\"state\">luastate</Item>\r\n\t\t</Expand>\r\n\t</Type>\r\n\t<Type Name=\"sol::basic_coroutine&lt;*&gt;\">\r\n\t\t<DisplayString>ref={this->ref} status={stats} error handler={m_error_handler}</DisplayString>\r\n\t\t<Expand>\r\n\t\t\t<Item Name=\"status\">stats</Item>\r\n\t\t\t<Item Name=\"error handler\">m_error_handler</Item>\r\n\t\t\t<Item Name=\"reference\">*($T1*)this</Item>\r\n\t\t</Expand>\r\n\t</Type>\r\n\t<Type Name=\"sol::basic_protected_function&lt;*&gt;\">\r\n\t\t<DisplayString>status={stats} error handler={m_error_handler} index={index} state={luastate}</DisplayString>\r\n\t\t<Expand>\r\n\t\t\t<Item Name=\"error handler\">m_error_handler</Item>\r\n\t\t\t<Item Name=\"reference\">*($T1*)this</Item>\r\n\t\t</Expand>\r\n\t</Type>\r\n\t<Type Name=\"sol::state_view\">\r\n\t\t<DisplayString>L={L} globals={global} registry={reg}</DisplayString>\r\n\t\t<Expand>\r\n\t\t\t<Item Name=\"globals\">global</Item>\r\n\t\t\t<Item Name=\"registry\">reg</Item>\r\n\t\t\t<Item Name=\"state\">L</Item>\r\n\t\t</Expand>\r\n\t</Type>\r\n\t<Type Name=\"sol::state\">\r\n\t\t<DisplayString>L={L} globals={global} registry={reg}</DisplayString>\r\n\t\t<Expand>\r\n\t\t\t<Item Name=\"globals\">global</Item>\r\n\t\t\t<Item Name=\"registry\">reg</Item>\r\n\t\t\t<Item Name=\"state\">L</Item>\r\n\t\t</Expand>\r\n\t</Type>\r\n</AutoVisualizer>\r\n"
        },
        {
          "name": "sol2.pc.in",
          "type": "blob",
          "size": 0.140625,
          "content": "includedir=@CMAKE_INSTALL_FULL_INCLUDEDIR@\n\nName: sol2\nDescription: C++ <-> Lua Wrapper Library\nVersion: @sol2_VERSION@\nCflags: -I${includedir}\n"
        },
        {
          "name": "subprojects",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}