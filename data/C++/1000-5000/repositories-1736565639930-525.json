{
  "metadata": {
    "timestamp": 1736565639930,
    "page": 525,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "apitrace/apitrace",
      "stars": 2655,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dir-locals.el",
          "type": "blob",
          "size": 0.19921875,
          "content": "((nil\n  (indent-tabs-mode . nil)\n  (tab-width . 8)\n  (c-basic-offset . 4)\n  (c-file-style . \"stroustrup\")\n  (eval . (progn\n\t    (c-set-offset 'innamespace '0)\n\t    (c-set-offset 'inline-open '0)))\n  )\n )\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.5,
          "content": "# http://editorconfig.org\n\nroot = true\n\n[*]\ntab_width = 8\n\n[*.{c,h,cpp,hpp,cc,hh,inl,m,mm,rc}]\nindent_style = space\nindent_size = 4\n\n[{CMakeLists.txt,*.cmake}]\nindent_style = space\nindent_size = 4\n\n[*.{markdown,md}]\nindent_style = space\ntrim_trailing_whitespace = false\n\n[*.ps1]\nindent_style = space\nindent_size = 4\n\n[*.py]\nindent_style = space\nindent_size = 4\n\n[*.sh]\nindent_style = space\nindent_size = 4\n\n[*.yml]\nindent_style = space\nindent_size = 2\n\n[{Makefile,*.mk,*.def}]\nindent_style = tab\nindent_size = 8\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5703125,
          "content": ".*.sw?\n.cache\n*~\n*.7z\n*.a\n*.bin\n*.bmp\n*.bz2\n*.cbp\n*.dll\n*.dmg\n*.dylib\n*.exe\n*.exp\n*.framework\n*.gz\n*.ilk\n*.json\n*.lib\n*.log\n*.moc*\n*.o\n*.obj\n*.pdb\n*.png\n*.pnm\n*.pfm\n*.pyc\n*.pyo\n*.so\n*.trace\n*.zip\n*.ubj\nCMakeCache.txt\nCMakeFiles\ncmake_install.cmake\nCMakeLists.txt.user\nCMakeScripts\ncompile_commands.json\nCPackConfig.cmake\n_CPack_Packages\nCPackSourceConfig.cmake\nCTestTestfile.cmake\nMakefile\napitrace\nbtest\nstest\ndxsdk\ndxsdk-master\neglretrace\nglretrace\ngltrim\nguids_test\ninstall_manifest.txt\nqapitrace\nqubjson_test\ntrace_parser_flags_test\ntraces\nTesting\nos_thread_test\n/build\nversion.h\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.939453125,
          "content": "[submodule \"frametrim/tests\"]\n\tpath = frametrim/tests\n\turl = https://github.com/apitrace/gltrim-tests.git\n\tshallow = true\n[submodule \"thirdparty/brotli\"]\n\tpath = thirdparty/brotli\n\turl = https://github.com/google/brotli\n\tshallow = true\n[submodule \"thirdparty/gtest\"]\n\tpath = thirdparty/gtest\n\turl = https://github.com/google/googletest\n\tshallow = true\n[submodule \"thirdparty/libbacktrace\"]\n\tpath = thirdparty/libbacktrace\n\turl = https://github.com/ianlancetaylor/libbacktrace\n\tshallow = true\n[submodule \"thirdparty/libpng\"]\n\tpath = thirdparty/libpng\n\turl = https://github.com/apitrace/libpng\n\tshallow = true\n[submodule \"thirdparty/snappy\"]\n\tpath = thirdparty/snappy\n\turl = https://github.com/google/snappy\n\tshallow = true\n[submodule \"thirdparty/zlib\"]\n\tpath = thirdparty/zlib\n\turl = https://github.com/madler/zlib\n\tshallow = true\n[submodule \"thirdparty/directxmath\"]\n\tpath = thirdparty/directxmath\n\turl = https://github.com/microsoft/DirectXMath\n\tshallow = true\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 23.935546875,
          "content": "message (STATUS \"Using CMake ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}\")\n\ncmake_minimum_required (VERSION 3.15.0)\n\n# Enable CMAKE_MSVC_RUNTIME_LIBRARY\ncmake_policy (SET CMP0091 NEW)\n# http://www.cmake.org/cmake/help/v3.0/policy/CMP0042.html\ncmake_policy (SET CMP0042 NEW)\n# https://cmake.org/cmake/help/v3.20/policy/CMP0048.html\ncmake_policy (SET CMP0048 NEW)\n\nif (CMAKE_GENERATOR STREQUAL \"Xcode\")\n    message (FATAL_ERROR \"Xcode generator is not supported. Please build with \\\"Unix Makefiles\\\" or \\\"Ninja\\\" generators.\")\nendif ()\n\n\nproject (apitrace)\n\n\n##############################################################################\n# Options\n\n# We use a cached string variable instead of the standard (boolean) OPTION\n# command so that we can default to auto-detecting optional depencies, while\n# still providing a mechanism to force/disable these optional dependencies, as\n# prescribed in http://www.gentoo.org/proj/en/qa/automagic.xml\nif (NOT MINGW)\n    set (CMAKE_INTERPROCEDURAL_OPTIMIZATION True)\nendif ()\nset (ENABLE_GUI \"AUTO\" CACHE STRING \"Enable Qt GUI.\")\noption (ENABLE_QT6 \"Use Qt6 support.\" OFF)\n\noption (ENABLE_CLI \"Enable command Line interface.\" ON)\n\noption (ENABLE_X11 \"Enable X11 support.\" ON)\n\noption (ENABLE_EGL \"Enable EGL support.\" ON)\n\noption (ENABLE_WAFFLE \"Enable WAFFLE support.\" OFF)\n\noption (ENABLE_SSE42 \"Enable SSE 4.2 intrinsics.\" OFF)\n\noption (ENABLE_FRAME_POINTER \"Disable frame pointer omission\" ON)\n\noption (ENABLE_ASAN \"Enable Address Sanitizer\" OFF)\n\noption (ENABLE_SSP \"Enable Stack Smashing Protection\" OFF)\n\noption (ENABLE_LLVM_PDB \"Enable PDB with LLVM\" OFF)\n\noption (BUILD_TESTING \"Enable unit tests\" ON)\n\noption (ENABLE_TESTS \"Enable additional tests\" OFF)\n\nif (ANDROID)\n    message (FATAL_ERROR \"Android is no longer supported (https://git.io/vH2gW)\")\nendif ()\n\n# Proprietary Linux games often ship their own libraries (zlib, libstdc++,\n# etc.) in order to ship a single set of binaries across multiple\n# distributions.  Given that apitrace wrapper modules will be loaded into those\n# processes, they must not depend on any shared object that could also be\n# provided by such applications.  See also\n# http://lists.freedesktop.org/archives/mesa-dev/2015-March/079121.html\noption (ENABLE_STATIC_SNAPPY \"Statically link against snappy\" ON)\nif (CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n    option (ENABLE_STATIC_LIBGCC \"Statically link LD_PRELOAD wrappers against libgcc\" ON)\n    option (ENABLE_STATIC_LIBSTDCXX \"Statically link LD_PRELOAD wrappers against libstdc++\" ON)\n    if (NOT (ENABLE_STATIC_LIBGCC AND\n             ENABLE_STATIC_LIBSTDCXX AND\n             ENABLE_STATIC_SNAPPY) AND\n        NOT \"$ENV{CI}\" MATCHES [[^[Tt]rue$]])\n    message (WARNING \"Wrapper dependencies not statically linked\")\n    endif ()\n    option (ENABLE_STATIC_EXE \"Statically link executables\" OFF)\nendif ()\n\n\n##############################################################################\n# Set global build options\n\nmacro (add_compiler_flags)\n    string (REPLACE \";\" \" \" _FLAGS \"${ARGV}\")\n    set (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${_FLAGS}\")\n    set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${_FLAGS}\")\nendmacro ()\n\nmacro (add_linker_flags)\n    string (REPLACE \";\" \" \" _FLAGS \"${ARGV}\")\n    set (CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${_FLAGS}\")\n    set (CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} ${_FLAGS}\")\n    set (CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} ${_FLAGS}\")\nendmacro ()\n\n# Use static runtime\n# https://cmake.org/cmake/help/v3.15/variable/CMAKE_MSVC_RUNTIME_LIBRARY.html\nif (MSVC)\n    set (CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\nendif ()\n\n# Enable Address Sanitizer\nif (ENABLE_ASAN)\n    if (MSVC)\n        # https://docs.microsoft.com/en-us/cpp/sanitizers/asan?view=msvc-160\n        # https://devblogs.microsoft.com/cppblog/addresssanitizer-asan-for-windows-with-msvc/\n        add_compiler_flags (/fsanitize=address)\n        # TODO: Replace /incremental with /incremental:no\n    else ()\n        add_compiler_flags (-fsanitize=address)\n        add_linker_flags (-fsanitize=address)\n    endif ()\nendif ()\n\n# Enable stack protection\nif (ENABLE_SSP)\n    if (MSVC)\n        add_compiler_flags (/GS)\n    else ()\n        add_compiler_flags (-fstack-protector-all)\n        # MinGW doesn't link against libssp automatically, and furthermore\n        # we want static linking.\n        if (MINGW)\n            set (SSP_LIBRARY \"-Wl,-Bstatic -lssp -Wl,-Bdynamic\")\n            set (CMAKE_C_STANDARD_LIBRARIES \"${SSP_LIBRARY} ${CMAKE_C_STANDARD_LIBRARIES}\")\n            set (CMAKE_CXX_STANDARD_LIBRARIES \"${SSP_LIBRARY} ${CMAKE_CXX_STANDARD_LIBRARIES}\")\n        else ()\n            add_linker_flags (-fstack-protector-all)\n        endif ()\n    endif ()\nendif ()\n\n\n##############################################################################\n# Find dependencies\n\ninclude (CheckCXXSourceCompiles)\n\nif (MSVC)\n    if (${MSVC_VERSION} LESS 1920)\n        message (FATAL_ERROR \"Visual Studio 2019 or later required\")\n    endif ()\nendif ()\n\n# Check for compiler TLS support.  We don't use compiler TLS support on Windows\n# because, even if the compiler supports it, Windows XP does not support TLS on\n# DLLs.\nif (NOT WIN32)\n    check_cxx_source_compiles (\"__thread int i; int main() { return 0; }\" HAVE_COMPILER_TLS)\n    if (NOT HAVE_COMPILER_TLS)\n        message (FATAL_ERROR \"C++ compiler does not support __thread keyword.\")\n    endif ()\nendif ()\n\n# Check whether we're targeting Intel X86 architecture\ncheck_cxx_source_compiles (\"#if defined(__i386__) || defined(__x86_64__) || defined(_M_IX86) || defined(_M_AMD64)\\nint main() { return 0; }\\n#else\\n#error\\n#endif\" HAVE_X86)\n\n# CMake fails to detect we're crosscompiling when using MSVC Arm cross compilation toolchain\nif (MSVC AND NOT HAVE_X86)\n    set (CMAKE_CROSSCOMPILING TRUE)\nendif ()\n\nlist (APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)\ninclude (ConvenienceLibrary)\ninclude (InstallPDB)\n\nfind_package (Python3 REQUIRED)\n\nfind_package (Threads)\n\nif (CMAKE_SYSTEM_NAME STREQUAL \"Linux\" AND NOT ENABLE_STATIC_EXE)\n    find_package (procps)\n    if (PROCPS_FOUND)\n        add_definitions (-DHAVE_READPROC_H)\n    endif ()\nendif ()\n\nif (ENABLE_GUI)\n    if (NOT (ENABLE_GUI STREQUAL \"AUTO\"))\n        set (REQUIRE_GUI REQUIRED)\n    endif ()\n    if (POLICY CMP0020)\n        cmake_policy (SET CMP0020 NEW)\n    endif()\n    if (ENABLE_QT6)\n        find_package (Qt6 COMPONENTS Widgets Network ${REQUIRE_GUI})\n    else ()\n        find_package (Qt5 5.15 COMPONENTS Widgets Network ${REQUIRE_GUI})\n    endif ()\nendif ()\n\nif (WIN32)\n    # http://msdn.microsoft.com/en-us/library/aa383745.aspx\n    # Windows 8\n    add_definitions (-D_WIN32_WINNT=0x0602 -DWINVER=0x0602)\n\n    find_package (DirectX)\n\n    if (MSVC)\n        # Log Windows SDK version\n        unset (WINDOWS_SDK_VERSION)\n        if (DEFINED CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION)\n            set (WINDOWS_SDK_VERSION ${CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION})\n        elseif (DEFINED ENV{WindowsSDKLibVersion})\n            string (REGEX REPLACE \"\\\\\\\\$\" \"\" WINDOWS_SDK_VERSION \"$ENV{WindowsSDKLibVersion}\")\n        endif ()\n        if (DEFINED WINDOWS_SDK_VERSION)\n            message (STATUS \"Using Windows SDK ${WINDOWS_SDK_VERSION}\")\n        endif ()\n\n        # https://developer.microsoft.com/en-us/windows/projects/campaigns/windows-dev-essentials-how-windows-10-sdks-ship\n        set (REQUIRED_WINDOWS_SDK 10.0.18362)\n        if (NOT DirectX_D3D11_4_INCLUDE_FOUND)\n            if (CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION)\n                message (SEND_ERROR\n                    \"Windows ${REQUIRED_WINDOWS_SDK} SDK required, but ${CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION} found.\\n\"\n                    \"Install it then select it by configuring with -DCMAKE_SYSTEM_VERSION=${REQUIRED_WINDOWS_SDK} option.\")\n\n            else ()\n                message (SEND_ERROR\n                    \"Windows ${REQUIRED_WINDOWS_SDK} SDK required.\\n\"\n                    \"Install it then select it by invoking `vcvarsall.bat <arch> ${REQUIRED_WINDOWS_SDK}`\"\n                )\n            endif ()\n        endif ()\n    endif ()\n\n    set (ENABLE_EGL false)\nelseif (APPLE)\n    set (ENABLE_EGL false)\n    add_definitions (-DGL_SILENCE_DEPRECATION)\nelseif (ENABLE_X11)\n    find_package (X11)\n\n    if (X11_FOUND)\n        include_directories (${X11_INCLUDE_DIR})\n        add_definitions (-DHAVE_X11)\n    else ()\n        # Print a clear message when X11 is not found\n        include (FindPackageMessage)\n        find_package_message (X11 \"Could not find X11\" \"\")\n    endif ()\nendif ()\n\nif (ENABLE_EGL AND ENABLE_WAFFLE)\n    # Use Waffle for eglretrace\n    find_package (Waffle REQUIRED)\nendif ()\n\nif (ENABLE_EGL AND NOT ENABLE_X11)\n    add_definitions (-DEGL_NO_X11)\nendif ()\n\n\n##############################################################################\n# Set project build options\n\nset (CMAKE_C_STANDARD 99)\nset (CXX_STANDARD_REQUIRED ON)\nset (CMAKE_CXX_STANDARD 17)\nset (CXX_STANDARD_REQUIRED ON)\n\ninclude (CheckCXXCompilerFlag)\ninclude (CheckIncludeFileCXX)\n\nadd_definitions (\n    -D__STDC_LIMIT_MACROS\n    -D__STDC_FORMAT_MACROS\n)\n\nif (NOT WIN32)\n    CHECK_CXX_COMPILER_FLAG(\"-fvisibility=hidden\" CXX_COMPILER_FLAG_VISIBILITY)\n    if (CXX_COMPILER_FLAG_VISIBILITY)\n        add_compiler_flags (-fvisibility=hidden)\n    endif ()\nendif ()\n\nif (MSVC)\n    # No RTTI required\n    string (REGEX REPLACE \"/GR *\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n    set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /GR-\")\n\n    # Disable C++ exceptions\n    add_definitions (-D_HAS_EXCEPTIONS=0)\n    string (REGEX REPLACE \"/EHsc *\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n    set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /EHs-c-\")\n\n    # Avoid error LNK1322: cannot avoid potential ARM hazard\n    if (NOT HAVE_X86)\n        add_compiler_flags (/Gy)\n    endif ()\n\n    # Enable math constants defines\n    add_definitions (-D_USE_MATH_DEFINES)\n\n    # No min/max macros\n    add_definitions (-DNOMINMAX)\n\n    # Adjust warnings\n    add_definitions (-D_CRT_SECURE_NO_DEPRECATE -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS)\n    add_definitions (-D_SCL_SECURE_NO_DEPRECATE -D_SCL_SECURE_NO_WARNINGS)\n    add_compiler_flags (-W3)\n    # XXX: it's safer to use ssize_t everywhere instead of disabling warning\n    add_compiler_flags (-wd4018) # signed/unsigned mismatch\n    add_compiler_flags (-wd4063) # not a valid value for switch of enum\n    add_compiler_flags (-wd4100) # unreferenced formal parameter\n    add_compiler_flags (-wd4127) # conditional expression is constant\n    add_compiler_flags (-wd4244) # conversion from 'type1' to 'type2', possible loss of data\n    add_compiler_flags (-wd4267) # conversion from 'type1' to 'type2', possible loss of data\n    add_compiler_flags (-wd4505) # unreferenced local function has been removed\n    add_compiler_flags (-wd4512) # assignment operator could not be generated\n    add_compiler_flags (-wd4577) # 'noexcept' used with no exception handling mode specified\n    add_compiler_flags (-wd4800) # forcing value to bool 'true' or 'false' (performance warning)\nelse ()\n    # Adjust warnings\n    add_compiler_flags (-Wall)\n    # XXX: it's safer to use ssize_t everywhere instead of disabling warning\n    add_compiler_flags (-Wno-sign-compare) # comparison between signed and unsigned integer expressions\n\n    # Disable strict aliasing assumptions.  We generate a lot of C++ code, and\n    # it's not always easy to guarantee or spot when strict aliasing\n    # assumptions are violated.  Above all, the benefit is not worth the risk.\n    add_compiler_flags (-fno-strict-aliasing)\n\n    if (CMAKE_CXX_COMPILER_ID MATCHES Clang)\n        add_compiler_flags (-Wno-pointer-bool-conversion)\n    endif ()\n\n    # No RTTI required\n    set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-rtti\")\n\n    # Disable C++ exceptions\n    set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-exceptions\")\n\n    if (HAVE_X86)\n        # Enable SSE2 intrinsics on x86\n        if (MINGW AND CMAKE_SIZEOF_VOID_P EQUAL 4)\n            add_compiler_flags (-msse2 -mfpmath=sse)\n\n            # And tell GCC to assume 4 bytes alignment, many Linux/Windows\n            # applications only guarantee that, but not on systems where ABI\n            # clearly states otherwise.\n            #\n            # See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=38496\n            if (CMAKE_CXX_COMPILER_ID MATCHES Clang)\n                add_compiler_flags (-mstackrealign)\n            else ()\n                add_compiler_flags (-mincoming-stack-boundary=2)\n            endif ()\n        endif ()\n\n        if (ENABLE_SSE42)\n            if (CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n                add_compiler_flags (-msse4.2)\n            endif ()\n            add_definitions (-DHAVE_SSE42)\n        endif ()\n    endif ()\n\n    # Be nice to Eclipse\n    add_compiler_flags (-fmessage-length=0)\nendif ()\n\nif (APPLE)\n    check_cxx_source_compiles (\"#include <AvailabilityMacros.h>\\n#if MAC_OS_X_VERSION_MAX_ALLOWED >= 101200\\nint main() { return 0; }\\n#endif\" HAVE_MACOSX_10_12_SDK)\n    if (NOT HAVE_MACOSX_10_12_SDK)\n        message (FATAL_ERROR \"macOS 10.12 SDK or newer (i.e. Xcode 8.0 or newer) required\")\n    endif ()\nendif ()\n\nif (MINGW)\n    if (NOT CMAKE_CXX_COMPILER_ID MATCHES Clang)\n        execute_process (\n            COMMAND \"${CMAKE_COMMAND}\" -E echo \"#include <thread>\\n#ifdef _GLIBCXX_GCC_GTHR_POSIX_H\\n#error _GLIBCXX_GCC_GTHR_POSIX_H\\n#endif\"\n            COMMAND \"${CMAKE_CXX_COMPILER}\" -x c++ -E -\n            RESULT_VARIABLE STATUS_GTHREADS_POSIX\n            OUTPUT_QUIET\n            ERROR_QUIET\n        )\n        if (NOT STATUS_GTHREADS_POSIX EQUAL 0)\n            message (WARNING \"MinGW with POSIX threads detected; Win32 threads recommended.\")\n        else ()\n            # On older GCC versions use our C++11 threads implementation to avoid depending on winpthreads.\n            # Newer GCC versions already support win32 threads.\n            execute_process (\n                COMMAND \"${CMAKE_COMMAND}\" -E echo \"#include <thread>\\n#ifdef _GLIBCXX_HAS_GTHREADS\\n#error _GLIBCXX_HAS_GTHREADS\\n#endif\"\n                COMMAND \"${CMAKE_CXX_COMPILER}\" -x c++ -E -\n                RESULT_VARIABLE STATUS_GTHREADS\n                OUTPUT_QUIET\n                ERROR_QUIET\n            )\n            if (STATUS_GTHREADS EQUAL 0)\n                include_directories (${CMAKE_CURRENT_SOURCE_DIR}/compat/cxx11-threads)\n            endif ()\n        endif ()\n    endif ()\n\n    # Avoid depending on MinGW runtime DLLs\n    if (NOT ENABLE_ASAN)\n        add_linker_flags (-static -static-libgcc -static-libstdc++)\n    endif ()\n\n    if (CMAKE_CXX_COMPILER_ID MATCHES Clang)\n        if (ENABLE_LLVM_PDB)\n            # https://github.com/mstorsjo/llvm-mingw#pdb-support\n            set (CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -gcodeview\")\n            set (CMAKE_C_FLAGS_RELWITHDEBINFO \"${CMAKE_C_FLAGS_RELWITHDEBINFO} -gcodeview\")\n            set (CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -gcodeview\")\n            set (CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -gcodeview\")\n            add_linker_flags (-Wl,-pdb=)\n        else ()\n            # Generate DWARF aranges debugging information.\n            # https://github.com/jrfonseca/drmingw/issues/42\n            set (CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -gdwarf-aranges\")\n            set (CMAKE_C_FLAGS_RELWITHDEBINFO \"${CMAKE_C_FLAGS_RELWITHDEBINFO} -gdwarf-aranges\")\n            set (CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -gdwarf-aranges\")\n            set (CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -gdwarf-aranges\")\n        endif ()\n    endif ()\n\nelseif (ENABLE_STATIC_EXE)\n    set (CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++\")\nendif ()\n\nif (ENABLE_FRAME_POINTER)\n    # disable frame pointer omission\n    if (MSVC)\n        add_compiler_flags (/Oy-)\n    else ()\n        add_compiler_flags (-fno-omit-frame-pointer)\n    endif ()\nendif ()\n\nif (WIN32)\n    # Increase number of sections in obj files\n    if (MSVC)\n        add_compiler_flags (-bigobj)\n    elseif (NOT CMAKE_CXX_COMPILER_ID MATCHES Clang)\n        add_compiler_flags (-Wa,-mbig-obj)\n    endif ()\n\n    # Enable Data Execution Prevention and Address Space Layout Randomization\n    if (MSVC)\n        add_linker_flags (/NXCOMPAT /DYNAMICBASE)\n    else ()\n        add_linker_flags (-Wl,--nxcompat)\n\n        # `--dynamicbase` causes ld segmentation fault with Ubuntu 20.04 MinGW\n        # cross compilation toolchain, unless it's paired with\n        # `--export-all-symbols`\n        set (CMAKE_REQUIRED_LINK_OPTIONS \"-Wl,--dynamicbase\")\n        check_cxx_source_compiles(\"int main() { return 0; }\" HAVE_DYNAMICBASE)\n        unset (CMAKE_REQUIRED_LINK_OPTIONS)\n        if (HAVE_DYNAMICBASE)\n            add_linker_flags (-Wl,--dynamicbase)\n        endif ()\n    endif ()\n\n    # Use more than 2GB virtual memory address space for 32-bits processes\n    # where available (3GB on 32-bits Windows with 4GT, 4GB on 64-bits Windows)\n    if (CMAKE_SIZEOF_VOID_P EQUAL 4)\n        if (MSVC)\n            add_linker_flags (/LARGEADDRESSAWARE)\n        else ()\n            add_linker_flags (-Wl,--large-address-aware)\n        endif ()\n    endif ()\nendif ()\n\nif (CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n    # For RTLD_DEFAULT and RTLD_NEXT\n    add_definitions (-D_GNU_SOURCE)\nendif ()\n\ninclude (TestBigEndian)\ntest_big_endian (HAVE_BIGENDIAN)\nif (HAVE_BIGENDIAN)\n    add_definitions (-DHAVE_BIGENDIAN)\nendif ()\n\n# Put all executables into the same top level build directory, regardless of\n# which subdirectory they are declared\nset (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})\n\nif (BUILD_TESTING)\n    enable_testing ()\nendif ()\nif (CMAKE_CROSSCOMPILING AND NOT CMAKE_CROSSCOMPILING_EMULATOR)\n    add_custom_target (check)\nelseif (DEFINED CMAKE_BUILD_TYPE)\n    # Single configuration\n    add_custom_target (check COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure USES_TERMINAL)\nelse ()\n    # Multiple configuration\n    add_custom_target (check COMMAND ${CMAKE_CTEST_COMMAND} -C \"$<CONFIG>\" --output-on-failure USES_TERMINAL)\nendif ()\n\n\n##############################################################################\n# Installation directories\n\nif (CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n    # Debian multiarch support\n    execute_process(COMMAND dpkg-architecture -qDEB_HOST_MULTIARCH\n        OUTPUT_VARIABLE ARCH_SUBDIR\n        ERROR_QUIET\n        OUTPUT_STRIP_TRAILING_WHITESPACE\n    )\nendif()\n\nif (WIN32 OR APPLE)\n    # On Windows/MacOSX, applications are usually installed on a directory of\n    # their own\n    set (DOC_DEFAULT_INSTALL_DIR doc)\n    set (LIB_INSTALL_DIR lib)\n    set (LIB_ARCH_INSTALL_DIR lib)\nelse ()\n    set (DOC_DEFAULT_INSTALL_DIR share/doc/${CMAKE_PROJECT_NAME})\n    set (LIB_INSTALL_DIR lib${LIB_SUFFIX}/${CMAKE_PROJECT_NAME})\n    if (ARCH_SUBDIR)\n        set (LIB_ARCH_INSTALL_DIR lib/${ARCH_SUBDIR}/${CMAKE_PROJECT_NAME})\n    else ()\n        set (LIB_ARCH_INSTALL_DIR lib${LIB_SUFFIX}/${CMAKE_PROJECT_NAME})\n    endif ()\nendif ()\n\n# Allow customization of the doc installation dir (Slackware uses different\n# location)\nset (DOC_INSTALL_DIR \"${DOC_DEFAULT_INSTALL_DIR}\" CACHE STRING \"Documentation installation directory\")\n\nset (SCRIPTS_INSTALL_DIR ${LIB_INSTALL_DIR}/scripts)\nset (WRAPPER_INSTALL_DIR ${LIB_ARCH_INSTALL_DIR}/wrappers)\n\n\n##############################################################################\n# Bundled dependencies\n#\n# We prefer to bundle and statically link against many dependencies:\n# - on Windows to make it easy to deploy the wrappers DLLs\n# - on unices to prevent symbol collisions when tracing applications that link\n# against other versions of these libraries\n\ninclude_directories (${CMAKE_CURRENT_SOURCE_DIR}/compat)\n\nif (NOT WIN32 AND NOT ENABLE_STATIC_EXE)\n\n    if (NOT ENABLE_STATIC_SNAPPY)\n        find_package (Snappy)\n    endif ()\n\n    # zlib 1.2.4-1.2.5 made it impossible to read the last block of incomplete\n    # gzip traces (e.g., apitrace-tests/traces/zlib-no-eof.trace).\n    find_package (ZLIB 1.2.6)\n\n    # FindPNG.cmake will search ZLIB internally (without requiring any particular\n    # version), adding its include dirs and libraries, and overwriting ZLIB_FOUND.\n    # So if the system's ZLIB was did not meet the our requirements, then there's\n    # no safe way to use the system's PNG library.\n    if (NOT APPLE AND ZLIB_FOUND)\n        find_package (PNG)\n    endif ()\n\n    find_package (PkgConfig)\n    if (PKG_CONFIG_FOUND)\n        pkg_check_modules (BROTLIDEC IMPORTED_TARGET libbrotlidec>=1.0.7)\n        pkg_check_modules (BROTLIENC IMPORTED_TARGET libbrotlienc>=1.0.7)\n    endif ()\n\n    find_package (GTest)\nendif ()\n\nadd_subdirectory (thirdparty)\n\n# We use bundled headers for all Khronos APIs, to guarantee support for both\n# OpenGL and OpenGL ES at build time, because the OpenGL and OpenGL ES 1 APIs\n# are so intertwined that conditional compilation extremely difficult. This\n# also avoids missing/inconsistent declarations in system headers.\ninclude_directories (BEFORE ${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/khronos)\n\n# Convenience macro for adding unit tests\nmacro (add_gtest)\n    add_executable (${ARGV})\n    target_link_libraries (${ARGV0} GTest::GTest)\n    add_dependencies (check ${ARGV0})\n    add_test (NAME ${ARGV0} COMMAND ${ARGV0})\nendmacro ()\n\n\n##############################################################################\n# Common libraries / utilities\n\ninclude_directories (\n    ${CMAKE_CURRENT_SOURCE_DIR}/lib/trace\n    ${CMAKE_CURRENT_SOURCE_DIR}/lib/os\n    ${CMAKE_CURRENT_SOURCE_DIR}/compat\n)\n\nadd_subdirectory (lib)\nadd_subdirectory (dispatch)\nadd_subdirectory (helpers)\nadd_subdirectory (wrappers)\nadd_subdirectory (retrace)\nadd_subdirectory (frametrim)\n\n\n##############################################################################\n# CLI\n\nif (ENABLE_CLI)\n    if (WIN32)\n        add_subdirectory (inject)\n    endif ()\n    add_subdirectory (cli)\n    add_subdirectory (scripts)\nendif ()\n\n\n##############################################################################\n# GUI\n\nif (ENABLE_GUI AND (Qt6_FOUND OR Qt5_FOUND))\n  add_subdirectory (gui)\nendif ()\n\n\n##############################################################################\n# Additional tests\n\nif (ENABLE_TESTS)\n    if (NOT EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/tests/CMakeLists.txt\")\n        message (EMIT_ERROR\n                 \"tests/CMakeLists.txt is missing, please do\\n\"\n                 \"  git clone https://github.com/apitrace/apitrace-tests tests\")\n    else ()\n        add_subdirectory (tests)\n    endif ()\nendif ()\n\n\n##############################################################################\n# Versioning\n\nfind_package (Git)\nadd_custom_target (version\n    BYPRODUCTS\n        ${CMAKE_BINARY_DIR}/version.h\n    COMMAND\n        ${CMAKE_COMMAND} -D SRC=${CMAKE_SOURCE_DIR}/version.h.in\n                         -D DST=${CMAKE_BINARY_DIR}/version.h\n                         -D GIT_EXECUTABLE=\"${GIT_EXECUTABLE}\"\n                         -P ${CMAKE_SOURCE_DIR}/cmake/GenerateVersion.cmake\n)\n\n##############################################################################\n# Packaging\n\ninstall (\n    FILES\n        README.markdown\n        docs/BUGS.markdown\n        docs/NEWS.markdown\n        docs/USAGE.markdown\n    DESTINATION ${DOC_INSTALL_DIR}\n)\ninstall (\n    FILES LICENSE\n    DESTINATION ${DOC_INSTALL_DIR}\n    RENAME LICENSE.txt\n)\n\n# External scripts rely upon CPACK_PACKAGE_VERSION=latest for determining URLs\n# for the latest artifacts.\nset (CPACK_PACKAGE_VERSION \"latest\")\n# https://docs.github.com/en/actions/reference/environment-variables#default-environment-variables\nif (\"$ENV{GITHUB_ACTIONS}\" STREQUAL \"true\" AND \"$ENV{GITHUB_REF}\" MATCHES [[^refs/tags/([^/]*)$]])\n    set (CPACK_PACKAGE_VERSION \"${CMAKE_MATCH_1}\")\nendif ()\n\n# cpack mistakenly detects Mingw-w64 as win32\nif (MINGW)\n    if (CMAKE_SIZEOF_VOID_P EQUAL 8)\n        set (CPACK_SYSTEM_NAME win64)\n    endif ()\nendif ()\n\n# distinguish the Windows Arm packages\nif (WIN32 AND NOT HAVE_X86)\n    if (CMAKE_SIZEOF_VOID_P EQUAL 8)\n        set (CPACK_SYSTEM_NAME win64-arm)\n    else ()\n        set (CPACK_SYSTEM_NAME win32-arm)\n    endif ()\nendif ()\nif (CMAKE_SYSTEM_NAME STREQUAL \"Linux\" AND CMAKE_SYSTEM_PROCESSOR STREQUAL \"aarch64\")\n    set (CPACK_SYSTEM_NAME Linux-arm64)\nendif ()\n\n# See http://www.vtk.org/Wiki/CMake:CPackPackageGenerators\nif (WIN32)\n    set (CPACK_GENERATOR \"7Z\")\nelseif (APPLE)\n    set (CPACK_GENERATOR \"DragNDrop\")\nelse ()\n    set (CPACK_GENERATOR \"TBZ2\")\nendif ()\n\ninclude(CPack)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.171875,
          "content": "Copyright 2007-2012 VMware, Inc.\nCopyright 2011 Intel Corporation\nCopyright 2011 LunarG, Inc.\nCopyright 2011 Zack Rusin\nCopyright 2011-2012 Jose Fonseca\n\nAll Rights Reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
        },
        {
          "name": "README.markdown",
          "type": "blob",
          "size": 1.1103515625,
          "content": "About **apitrace**\n==================\n\n**apitrace** consists of a set of tools to:\n\n* trace OpenGL, Direct3D, and DirectDraw APIs calls to a file;\n\n* replay OpenGL and Direct3D calls from a file;\n\n* inspect OpenGL and Direct3D state at any call while retracing;\n\n* visualize and edit trace files.\n\nSee the [apitrace homepage](https://apitrace.github.io/) for more details.\n\n\nStatus\n======\n\nTL;DR: Apitrace is still being maintained, but the maintainer has very little\ntime to work on it, so patches/issues/requests are addressed if/as time permits.\n\nLong version [here](https://jrfonseca.blogspot.co.uk/2016/10/apitrace-maintenance.html)\n\n\nObtaining **apitrace**\n======================\n\nTo obtain apitrace either [download the latest\nbinaries](https://apitrace.github.io/#download) for your platform if available,\nor follow [these instructions](docs/INSTALL.markdown) to build and install it\nyourself.\n\nOn 64bits Linux and Windows platforms you'll need apitrace binaries that match\nthe architecture (32bits or 64bits) of the application being traced.\n\n\nUsage\n=====\n\nDetailed usage instructions are available [here](docs/USAGE.markdown).\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "compat",
          "type": "tree",
          "content": null
        },
        {
          "name": "dispatch",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "frametrim",
          "type": "tree",
          "content": null
        },
        {
          "name": "gui",
          "type": "tree",
          "content": null
        },
        {
          "name": "helpers",
          "type": "tree",
          "content": null
        },
        {
          "name": "inject",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "retrace",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "specs",
          "type": "tree",
          "content": null
        },
        {
          "name": "thirdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.h.in",
          "type": "blob",
          "size": 0.0576171875,
          "content": "#pragma once\n#define APITRACE_VERSION \"@APITRACE_VERSION@\"\n"
        },
        {
          "name": "wrappers",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}