{
  "metadata": {
    "timestamp": 1736565958987,
    "page": 939,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mfontanini/libtins",
      "stars": 1928,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0302734375,
          "content": "build/**\ninclude/tins/config.h\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.111328125,
          "content": "[submodule \"googletest\"]\n\tpath = googletest\n    url = https://github.com/google/googletest.git\n    ignore = dirty\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.279296875,
          "content": "language: cpp\n\nsudo: false\n\ncompiler:\n  - gcc\n  - clang\n\nos:\n  - linux\n  - osx\n\naddons:\n  apt:\n    packages:\n    - libpcap-dev\n    - libssl-dev\n    - libboost-all-dev\n\nbefore_script:\n  - mkdir build\n  - cd build\n  - cmake .. -DLIBTINS_ENABLE_CXX11=1\n  - make tests\n\nscript:\n  - ctest -V"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 21.8232421875,
          "content": "##### v4.5 - Sun Aug 20 04:46:53 PM UTC 2023\n\n- Add VXLAN support (#501)\n\n- Add `FileSniffer` constructor taking a `FILE*` (#499).\n\n- Remove use of deprecated `std::iterator` (#481).\n\n- Add missing `algorithm` header include (#497).\n\n- Validate high order two bits of first dns label octet (#494).\n\n- Use `CMAKE_INSTALL_LIBDIR` in `CONF_CMAKE_INSTALL_DIR` (#472).\n\n- Ignore IPv6 packets with payload after one with no Next Header (#500).\n\n- Fix unqualified `std::move` call warnings on clang (#488).\n\n- Fix incorrect IP address range calculation when using /0 prefix (#484) (#486).\n\n- Fall back to system GTest if available (#473).\n\n- Fix compilation issue on android (#471).\n\n- Fix DNS parser reading garbage on misreported packet size (#468).\n\n- Fix DNS parser misinterpreting bad label size (#466).\n\n##### v4.4 - Thu Feb 17 14:41:59 UTC 2022\n\n- Add RFC8335 extended echo types to `ICMP` and `ICMPv6` (#426)\n\n- Handle loops in DNS name decompression (#444)\n\n- Fix Windows' `interface` macro colliding with uses of that identifier in the code (#458)\n\n- Sending IPv6 packets to a link-scope destination address now uses the right interface index (#448)\n\n- Fix incorrect endian being used for ICMP's `gateway` and `address_mask` (#437)\n\n- Socket in `PacketSender::open_l3_socket` is now closed if `setsockopt` fails (#433)\n\n- Fix various incorrect doxygen documentation comments (#439).\n\n- Fix infinite loop when querying the routing table in \\*BSD (#427)\n\n##### v4.3 - Fri Sep 18 03:08:33 UTC 2020\n\n- Assign a PDUType to `Dot11ControlTA` (#420)\n\n- Don't consider IPv6 ESP header a normal extension header (#374)\n\n- Don't include non-existing headers when installed without libpcap (#382)\n\n- Add `IPv6Address::is_local_unicast` (#369)\n\n- Fix memory leak in `PacketWriter` (#343)\n\n- Fix memory leaks in `OfflinePacketFilter` (#343)\n\n- Fix detection of new TCP stream (#335)\n\n- Introduce `TCP::has_flags` (#334)\n\n- Fix padding calculations in RadioTapWriter (#333)\n\n##### v4.2 - Fri Mar  8 04:15:13 UTC 2019\n\n- Updated location of installed CMake files in unix systems (#331)\n\n- Fix check to detect cross compilation (#330)\n\n- Allow getting a PDU's advertised size and use it in `PacketWriter` (#324)\n\n- Install DLLs in right directory (#326)\n\n- Add missing Dot11 tagged option types (#305)\n\n- Add support for DLT_RAW (#313)\n\n- Fix potential invalid memory accesses when parsing RadioTap (#322)\n\n##### v4.1 - Tue Dec 11 02:08:48 UTC 2018\n\n- Fix serialization for QinQ (#316)\n\n- Added base class access specifier for socket_close_error (#306)\n\n- Rewrote hw_address_to_string to not require a stringstream (#299)\n\n- Make RadioTapParser::skip_to_field check for end of buffer (#296)\n\n- Ensure local include directory comes before system. (#293)\n\n- Calculate IP option sizes properly (#288)\n\n- Add parsing of well known IPv6 extension headers (#287)\n\n- Add missing operators to address classes (#275)\n\n- Add version macros in config.h\n\n- Don't assume IPv6 uses ICMPv6 underneath\n\n- Allow users to specify library install dir\n\n- Use Sleep windows function passing milliseconds as parameter\n\n- Implement IPv6::recv_response\n\n- Don't use nullptr in non C++11 code\n\n- Ignore (possibly malformed) options after EOL (#281)\n\n- Don't include dot11.h in tins.h if it is not configured in the library (#277)\n\n- Fix memory leak in PDU's move assignment operator\n\n- Append padding to IPv6 options\n\n##### v4.0 - Mon Dec  4 00:04:30 UTC 2017\n\n- Add parent PDU to each PDU.\n\n- Removed parent PDU parameter on `PDU::write_serialization`.\n\n- Split `utils.h` into multiple files under the `utils` directory.\n\n- Split `internals.h` into multiple files under the `detail` directory.\n\n- Improve compilation times by removing useless include directives.\n\n- Refactor `PDUOption` conversions so that heavy headers are not included in source file.\n\n- Use `std::vector` instead of `std::list` in `TCP`, `IP`, `IPv6`, `DHCP`, `DHCPv6`, `DNS`, `LLC`, `Dot11` and `PPPoE`.\n\n- Improve performance on `IP`, `IPv6` and `TCP` by compiting option sizes during serialization.\n\n- Minor performance improvements in `DNS`.\n\n- Fix `IPv6` next header handling. Now each one contains its own type and the next type is only set during serialization for ease of use.\n\n- Refactor `RadioTap` parsing and serialization using a generic parser/writer.\n\n- Add `BaseSniffer::set_pcap_sniffing_method` to specify whether `pcap_loop` or `pcap_dispatch` should be used when sniffing.\n\n- Use `IFF_POINTOPOINT` on BSD when getting broadcast address for an interface.\n\n- Added cipher and akm suites from 802.11-2016.\n\n- Add IPv6 layer parsing on `Loopback` packets.\n\n- Allow serializing `Loopback` on Windows.\n\n- Use the right flag on `Loopback` for `IPv6`.\n\n- Use the first fragment as a base when reassembling `IP` packets in `IPv4Reassembler`.\n\n- Restructure CMake files removing useless `CMakeLists.txt` in `include` paths.\n\n- Add getter/setter for \"more data\" field in `Dot11Base`.\n\n- Implemented matching for ND protocol related ICMPv6 messages.\n\n- Ensure TCP::OptionTypes has 8-bit range.\n\n- Add header files into CMake sources so IDE can pick them up.\n\n- Add MPLS \"experimental\" field.\n\n- Fix dhcpv6::duid_type constructor from duid_ll.\n\n##### v3.5 - Sat Apr  1 09:11:58 PDT 2017\n\n- Added Utils::route6_entries\n\n- Allow masking IPv4/6 and hardware addresses via `operator&`\n\n- Add IPv4Address::from_prefix_length\n\n- Move `stream_id` into a new file and rename it `StreamIdentifier`\n\n- Allow disabling TCPIP classes\n\n- Properly handle out of order SACKs on `AckTracker`\n\n- Move TCP data tracking into a separate class\n\n- Allow constructing `StreamIdentifier` from a `Stream`\n\n- Allow configuring pcap timestamp precision\n\n- Allow building libtins using MinGW\n\n- Allow including libtins using `add_subdirectory` via CMake\n\n- Allow setting customer user data to each TCP stream\n\n- Allow skipping data forward in TCP streams\n\n- Allow attaching to already existing TCP streams\n\n- Fix: AddressRange masks first address as well\n\n- Fix: Add TINS_API to `IPv4Address::operator<<`, `DataTracker` and `AckTracker`\n\n- Fix: Don't always set `key_t` to 0 on `RSNEAPOL`\n\n- Fix: Handle MLDv1 properly on ICMP\n\n- Fix: Make Utils::resolve_hwaddress work on Windows\n\n- Fix: Interface was sometimes considered down when it was up (BSD/Linux)\n\n- Fix: Don't set `Dot1Q`'s payload type if next protocol type is unknown\n\n- Fix: Use recvfrom on BSD/OSX when capturing layer 3 packets\n\n- Fix: Make `Timestamp::current_time` work on Windows\n\n- Fix: Forward `NetworkInterface` argument when calling `PacketSender::send_l2`\n\n- Fix: `Timestamp` overflow issue\n\n- Fix: boost's include directories variable incorrectly used on build system\n\n- Fix: Configuring auto cleanup of `Stream`'s server data not working\n\n- Fix: Set `EthernetII` payload type to `UNKNOWN` if there's no inner PDU\n\n- Fix: Set payload type to 0 if there's no inner PDU in `IP`, `Dot1Q` and `IPv6`\n\n- Fix: Buffer length check issues on `Dot11QosData`\n\n- Fix: Use AF_INET6 flag when opening L3 IPv6 socket\n\n- Fix: Check expecter size properly on `DNS::extract_metadata`\n\n- Fix: several unused parameter warnings\n\n- Fix: CCMP decryption issue when `Dot11QoSData` has a TID != 0\n\n##### v3.4 - Wed Mar  9 20:24:54 PST 2016\n\n- Check the secure bit on HandshakeCapturer to detect 2nd packet\n\n- Add info members directly into NetworkInterface\n\n- Add IPv6 addresses to NetworkInterface::Info\n\n- Make *MemoryStream use size_t rather than uint32_t\n\n- Add WPA2Decrypter callback interface\n\n- Set MACOSX_RPATH to ON\n\n- Don't fail configuration if openssl is missing\n\n- Build layer 5 as RawPDU if IPv6 has fragment header\n\n- Fix examples so they build on gcc 4.6\n\n- Fix flag value for sniffer's immediate mode\n\n- Fix IP fragment reassemble when packet has flags DF+MF\n\n- Add extract_metadata to main PDU classes\n\n- Fix examples to make them work on Windows\n\n- Use timercmp/sub and std::chrono to subtract timevals on PacketSender\n\n- Build examples against local libtins build\n\n- Add uninstall target\n\n- Prefix HAVE_ config.h macros with TINS_\n\n- Use compiler intrinsics to swap bytes\n\n- Use C++11 mode by default\n\n- Add missing TINS_API to PDU classes.\n\n- Extend/fix ICMPv6 enum values and unify naming\n\n- Return an empty string for dot11 ssid, if ssid is present but empty\n\n- Implement new TCP stream follower mechanism\n\n- Use ExternalProject_Add rather than including the gtest directory\n\n- Fix invalid endian on IP fragment offset on OSX\n\n##### v3.3 - Sun Jan 31 21:06:04 PST 2016\n\n- Add TCP connection close example\n\n- Move implementations on utils.h to utils.cpp\n\n- Add ICMPv6 Multicast Listener Query Messages support\n\n- Add ICMPv6 Multicast Listener Report Message support\n\n- Make DNS::Query and DNS::Resource lowercase and deprecate the old names\n\n- Change DNS::query/resource::type to query_type and deprecate old name\n\n- Add DNS Start Of Authority parsing and serialization\n\n- Parse and serialize MX preference field correctly\n\n- Add NetworkInterface::friendly_name to get Windows friendly names\n\n- Mask 16 bits on random number generated on traceroute example\n\n- Fix TCP sequence number addition/subtraction when wrapping around\n\n- Use 802.1ad protocol flag when seralizing stacked Dot1Q\n\n- Code cleanup and use same syntax on the entire project\n\n- Correctly serialize PPPoE session packets\n\n- Fix IPv6 extension headers parsing/serialization\n\n- Include examples before src to avoid duplicate tins target issue\n\n- Add MPLS PDU and hook it up with ICMP extensions\n\n- Set UDP checksum to 0xffff if it's 0\n\n- Don't define TINS_STATIC in config.h\n\n- Fix invalid RSNEAPOL parsing issue\n\n- Remove special clang on OSX case when building gtest\n\n- Update pseudoheader_checksum signature\n\n- Fix overall checksum calculation\n\n- Set ICMP payload length without padding if no extensions are present\n\n- Export classes on Windows shared lib builds\n\n- Use google/googletest submodule and update to HEAD\n\n- Remove unused cassert header inclusions\n\n- Add input/output memory stream classes port PDU classes to use them\n\n- Add extensions for ICMP/ICMPv6\n\n- Fix RSNInformation issues on big endian architectures\n\n- Add IP::fragment_offset and IP::flags\n\n- Don't set Ethernet type if inner PDU type is unknown\n\n- Don't run IP source address overwrite tests on OSX\n\n- Always calculate IP/IPv6 checksum\n\n- Fix invalid constant value on PPPoE\n\n- Define default constructor for PKTAP\n\n- Guard 802.11 parsing code on PPI around HAVE_DOT11\n\n- Fix parsing of Dot11 packets encapsulated on PPI having FCS-at-end\n\n- Fix DataLinkType typo on doxygen docs\n\n- Update docs on sniff_loop handle persistency\n\n- Use uint32_t for DNS resource TTL setter\n\n- Erase streams when they're reassembed on IPv4Reassembler\n\n- Make all exceptions derive from exception_base\n\n- Add remove_option member to IP, TCP, Dot11, ICMPv6, DHCP and DHCPv6\n\n- Allow HW addresses to be 00:00:00:00:00 on NetworkInterface::info\n\n- Increment option size when adding a new DHCPv6 option\n\n- Use NOMINMAX on examples\n\n- Add metric field to RouteEntry\n\n- Allow setting immediate mode on Sniffer\n\n- Use one flags field for all flags on SnifferConfiguration\n\n- Add ICMP responses example\n\n- Add interfaces_info example\n\n- Fix bug on SessionKeys::SessionKeys\n\n- Fix compilation errors on android platform\n\n- Fix example compilation on Windows\n\n- Add PacketWriter::write overload that takes a Packet\n\n- Use different IP addresses on IP tests depending on OS\n\n- Allow retrieving keys on WPA2Decrypter\n\n- Add NetworkInterface::is_up and NetworkInterface::info\n\n- Add NetworkInterface::Info::is_up\n\n- Fix compilation warnings on Windows x64\n\n- Fix FindPCAP.cmake to find winpcap on x64\n\n- Fix more tests warnings triggered on Windows\n\n- Fix tests compilation warnings on Windows\n\n- Fix error on VC triggered by pcap redefining the \"inline\" keyword\n\n- Soften DNS parsing rules\n\n- Replace WIN32 macro with _WIN32\n\n- Fix IPv6Address::to_string on Windows\n\n- Fix DNS issues triggered on VC\n\n- Add google test as git submodule\n\n- Perserve IP protocol when using RawPDU\n\n- Use pcap_sendpacket by default to send packets on Windows\n\n- Don't allow receiving l2 packets on windows\n\n- Added RadioTap channel map type\n\n- Made rsn_information() a const member function to make Dot11ManagementFrame\nimmutable\n\n- Ensure HAVE_CXX11 is checked when defining TINS_IS_CXX11\n\n- Use one integer field for all flags on TCP\n\n- Fix invalid DNS IPv4 address parsing on big endian arch\n\n- Don't compile WPA2 test if LIBTINS_ENABLE_WPA2=0\n\n- Add Dot11 radio measurement name corresponding to IEEE 802.11-2012\n\n-------------------------------------------------------------------------------\n\n##### v3.2 - Fri Mar 20 22:12:23 PST 2015\n\n- Added include guard for config.h.\n\n- The functor used on BaseSniffer::sniff_loop can now take a Packet.\n\n- Added mcs, tx_flags, ext and data_retries options to RadioTap.\n\n- Fixed big endian representation of RadioTap header.\n\n- RadioTap's dbm_signal and dbm_noise are now signed.\n\n- RadioTap now throws if an option is not present when getting\nits value.\n\n- TKIP decryption now works correctly on packets from AP to STA.\n\n- Added support for PKTAP header.\n\n- Fixed endian issue on IPv4Address::ip_to_int on Windows.\n\n- Fixed IP parsing when total length is 0 due to TCP segmentation offload.\n\n- Re-added support for pkg-config.\n\n- TCPStreamFollower now calls PDU::find_pdu instead of PDU::rfind_pdu.\n\n- Fixed assertion throw caused by DNS parsing on Windows on debug mode.\n\n- Added throw on BSD when trying to send_recv L3 packets.\n\n- Added Loopback::matches_response.\n\n- Removed obsolete autotools files.\n\n- Fixed exception thrown when an interface didn't have an IP address\non NetworkInterface.\n\n- Added NetworkInterface::is_loopback.\n\n- Moved all headers to the directory include/tins.\n\n- Fixed compilation warning on TCPStramFollower due to signed to unsigned\nconversion on integral constant.\n\n- BaseSniffer::get_pcap_handle is now public.\n\n- PPPoE session packets are now parsed correctly.\n\n- Fixed invalid Loopback protocol detection on FreeBSD/OSX.\n\n- Fixed OSX IP packet sending issue.\n\n- Added useful constructors to RawPDU.\n\n- Fixed compilation errors on FreeBSD.\n\n- Improved documentation on several classes.\n\n- Fixed parsing bug when allocating IP over IP packets.\n\n- Fixed Windows network interface naming.\n\n- Utils::network_interface returns pcap compatible names on Windows.\n\n- NetworkInterface::name now works on Windows.\n\n- Added documentation generation through the build system.\n\n- Added SnifferConfiguration class.\n\n- Fixed bug on Dot3 serialization.\n\n- Added OfflinePacketFilter class.\n\n- Renamed NOEXCEPT macro to TINS_NOEXCEPT.\n\n- Added DataLinkType class.\n\n- IPv4Address now uses inet_pton when constructing from string.\n\n-------------------------------------------------------------------------------\n\n##### v3.1 - Sun Aug 24 21:39:43 ART 2014\n\n- Fixed ICMPv6 checksum error on serialization.\n\n- Fixed empty domain name encoding on DNS.\n\n- Changed the build system to CMake.\n\n-------------------------------------------------------------------------------\n\n##### v3.0 - Thu Aug  7 21:39:09 ART 2014\n\n- Timestamps can now be constructed from std::chrono::duration.\n\n- Packets can now be constructed from a PDU pointer and take ownership\nof it.\n\n- All protocols now set the next layer protocol flag, regardless if\nit was already set. This was not done in some protocols,\nlike EthernetII, and as a consequence if the network layer protocol\nwas replaced by other, the packet would be serialized incorrectly.\n\n- Fixed invalid parsing of some unknown DNS records.\n\n- Fixed unaligned memory accesses that were not supported under\nARMv4 and ARMv5.\n\n- Added BaseSniffer::set_extract_raw_pdus.\n\n- Reduced minimum automake version to 1.11.\n\n- Added Utils::to_string(PDU::PDUType).\n\n- Fixed error compilations on Windows.\n\n- Fixed ICMPv6 checksum calculation.\n\n- Added method in IP and TCP to emplace an option (C++11 only).\n\n- Added small option optimization to PDUOption.\n\n- Fixed error compilation on RSNInformation.\n\n- Renamed ICMP::check to ICMP::checksum.\n\n- Added Sniffer support to set interface to promiscuous mode.\n\n- TCPStreamFollower now handles overlapping fragments correctly.\n\n- Fixed bugs in TCPStreamFollower which didn't allow it to follow\nstream correctly.\n\n- TCPStreamFollower now doesn't clear its state after every call to\nTCPStreamFollower::follow_streams.\n\n- Added IPv6 flag check to pdu_flag_to_ip_type.\n\n- Added DHCP::hostname to extract the hostname options.\n\n- Removed extra qualifier on SessionKeys::decrypt_unicast which\nproduced compilation errors on some platforms.\n\n- PacketSender::send now uses PDU::matches_flag to match specific\nPDU types.\n\n- Removed 'no newline at end of file' warnings.\n\n- Fixed bug when calling BIOCIMMEDIATE on *BSD.\n\n- Fixed bug on PacketSender::send_recv which didn't work under *BSD.\n\n- Fixed bug triggered by not including the string header.\n\n-------------------------------------------------------------------------------\n\n##### v2.0 - Thu Jan 23 11:09:38 ART 2014\n\n- DNSResourceRecord was removed. Now DNS records are added using\nDNS::Resource.\n\n- tins.h now includes ppi.h.\n\n- Done significant improvements in the speed of DNS parsing.\n\n- Added PDUOption<>::to<> which converts a PDUOption to a specific type.\n\n- Layer 3 packets sent using PacketSender::send_recv for which the\nanswer is a different PDU type.\n\n- ICMP::gateway now uses IPv4Address.\n\n- Added support for ICMP address mask request/reply.\n\n- Fixed bug in PacketSender when using send_recv and a layer 2 PDU. The\ninterface in which the packet was sent was not the default_interface\nset when the sender was constructed.\n\n- IP packets sent using PacketSender::send_recv now match ICMP\nresponses.\n\n- Added support for ICMP timestamp request/reply packets.\nICMP::matches_response now works with these types of packets as well.\n\n- Added support for reassembling of fragmented IP packets via the\nIPv4Reassembler class.\n\n- Fragmented IP packet's inner_pdu PDUs are not decoded now.\n\n- Added 1000ms as the default read timeout used when calling\npcap_open_live. Added BaseSniffer::set_timeout to modify this parameter.\n\n- Added the --disable-dot11 configure switch.\n\n- Added support for IPSec.\n\n- Fixed bug triggered when ifaddrs::ifa_addr was null in\nNetworkInterface::addresses.\n\n- Added another overload of Utils::route_entries which returns the\nresult either than storing it in a parameter.\n\n- Added ARP monitor, WPS detector, DNS queries sniffer and DNS spoofer\nexamples.\n\n- Added another Sniffer constructor which doesn't expect the maximum\ncapture size.\n\n- Added tins_cast as a replacement for dynamic_cast on PDUs.\n\n-------------------------------------------------------------------------------\n\n##### v1.2 - Mon oct  7 23:33:49 ART 2013\n\n- Added BaseSniffer::begin and BaseSniffer::end.\n\n- BaseSniffer::next_packet uses pcap_loop instead of pcap_next, which\ndoesn't work well on some linux distributions.\n\n- Added PPI PDU class.\n\n- Fixed a bug in EthernetII triggered when the size of the whole frame\nwas lower than 60 bytes.\n\n- Added AddressRange class and IPv4Address, IPv6Address and\nHWAddress<>::operator/.\n\n- Added is_broadcast, is_multicast and is_unicast to IPv4, IPv6\nand HWAddress.\n\n- Added is_private and is_loopback methods to IPv4 and IPv6 addresses.\n\n- Done some optimizations on TCP's constructor from buffer.\n\n- Added helper functions to Dot11Data to retrieve the source,\ndestination and BSSID addresses.\n\n- Fixed bugs in DNS triggered when parsing MX and unknown records.\n\n- BaseSniffer::next_packet now iterates until a valid packet is found.\n\n- TCP::get_flag is now const.\n\n- The --disable-wpa2 now works as expected.\n\nv1.1 - Wed Jun  5 09:03:37 ART 2013\n\n- Implemented std::hash specialization for IPv4, IPv6 and HWAddress<>\ntypes.\n\n- Added a RSNHandshakeCapturer class.\n\n- Added WPA2Decrypter class.\n\n- IEEE 802.11 frames are not parsed if the RadioTap FAILED_FCS flag\nis on.\n\n- RadioTap now calculates its size everytime it's serialized.\n\n- Splitted the dot11.h and dot11.cpp files into several files to\nspeed up compilation times.\n\n- Added HWAddress<>::is_broadcast and HWAddress::operator[].\n\n- Fixed a bug triggered when parsing Dot11QoSData frames.\n\nv1.0 - Tue Apr 23 20:40:57 ART 2013\n\n- Link layer protocol PDUs now don't hold a NetworkInterface. This led\nto changes in their constructors.\n\n- Removed the obsolete PDU* parameter taken by several classes'\nconstructors.\n\n- IP now sets the sender's address automatically when no link layer\nPDU is used.\n\n- IP, TCP and UDP now calculate the checksum everytime they're\nserialized.\n\n- Added PDU::rfind_pdu.\n\n- Defined several exception types.\n\n- Implemented matches_response on several protocols.\n\n- PacketSender is now movable.\n\n- Added an overload of add_option that takes an rvalue-reference in IP,\nTCP, DHCP, ICMPv6 and Dot11.\n\n- Added support for GNU/kFreeBSD.\n\n- Removed several deprecated methods, such as PDU::clone_packet.\n\n- Added PacketSender::send(PDU&, NetworkInterface).\n\n- Normalized the TLV options naming conventions in all of the classes\nthat used them.\n\n- Added support for Dot1Q, STP, PPPoE protocols.\n\n- Made some important optimizations on PDUOption<>'s constructors.\n\n- Added Utils::resolve_domain and Utils::resolve_domain6\n\n-------------------------------------------------------------------------------\n\n##### v0.3 - Thu Jan 31 16:47:27 ART 2013\n\n- Added IPv6, ICMPv6 and DHCPv6 classes.\n\n- Added support for Loopback interfaces and the Linux Crooked Capture\npseudo protocol.\n\n- Added support for IPv6 records in DNS.\n\n- Added Packet/RefPacket class.\n\n- Added support for FreeBSD, OSX and Windows.\n\n- Added C++11 move semantics to several classes.\n\n- Done a complete rewrite of the build system; it now uses libtool.\n\n- Fixed several bugs in DNS.\n\n-------------------------------------------------------------------------------\n\n##### v0.2 - Sat Oct 20 11:26:40 2012\n\n- Added support for big endian architectures.\n\n- Simplified several interfaces.\n\n- Added IPv4Address and HWAddress class to simplify handling IP and hardware addresses.\n\n- Added NetworkInterface class to abstract network interfaces.\n\n- Added TCPStreamFollower class to follow TCP streams on the fly.\n\n- Added WEPDecrypter class to decrypt WEP-encrypted 802.11 data frames on the fly.\n\n- Added several new PDUs: Loopback, IEEE802_3, LLC, DNS.\n\n- Added support for reading and writing pcap files.\n\n- Moved to BSD-2 license.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 11.837890625,
          "content": "CMAKE_MINIMUM_REQUIRED(VERSION 2.8.1)\nPROJECT(libtins)\n\nOPTION(LIBTINS_BUILD_EXAMPLES \"Build examples\" ON)\nOPTION(LIBTINS_BUILD_TESTS \"Build tests\" ON)\n\n# Compile in release mode by default\nIF(NOT CMAKE_BUILD_TYPE)\n    MESSAGE(STATUS \"Setting build type to 'RelWithDebInfo' as none was specified.\")\n    SET(CMAKE_BUILD_TYPE RelWithDebInfo)\nELSE(NOT CMAKE_BUILD_TYPE)\n    MESSAGE(STATUS \"Using specified '${CMAKE_BUILD_TYPE}' build type.\")\nENDIF(NOT CMAKE_BUILD_TYPE)\n\n# Compilation flags.\nIF(MSVC)\n    # Don't always use Wall, since VC's /Wall is ridiculously verbose.\n    SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /W3\")\n    # Disable VC secure checks, since these are not really issues.\n    ADD_DEFINITIONS(\"-D_CRT_SECURE_NO_WARNINGS=1\")\n    ADD_DEFINITIONS(\"-D_SCL_SECURE_NO_WARNINGS=1\")\n    ADD_DEFINITIONS(\"-DNOGDI=1\")\nELSE()\n    SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wextra\")\nENDIF()\n\nIF(APPLE)\n    # This is set to ON as of policy CMP0042\n    SET(CMAKE_MACOSX_RPATH ON)\nENDIF()\n\n# Build output checks\nOPTION(LIBTINS_BUILD_SHARED \"Build libtins as a shared library.\" ON)\nIF(LIBTINS_BUILD_SHARED)\n    MESSAGE(\n        STATUS\n        \"Build will generate a shared library. \"\n        \"Use LIBTINS_BUILD_SHARED=0 to perform a static build\"\n    )\n    SET(LIBTINS_TYPE SHARED)\nELSE(LIBTINS_BUILD_SHARED)\n    MESSAGE(STATUS \"Build will generate a static library.\")\n    SET(LIBTINS_TYPE STATIC)\n    ADD_DEFINITIONS(\"-DTINS_STATIC=1\")\nENDIF(LIBTINS_BUILD_SHARED)\n\n# The version number.\nSET(TINS_VERSION_MAJOR 4)\nSET(TINS_VERSION_MINOR 6)\nSET(TINS_VERSION_PATCH 0)\nSET(LIBTINS_VERSION \"${TINS_VERSION_MAJOR}.${TINS_VERSION_MINOR}\")\n\n# Required Packages\nSET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/\")\n\n# Allow disabling packet capture mechanism\nOPTION(LIBTINS_ENABLE_PCAP \"Enable capturing packets via libpcap\" ON)\n\n# Look for libpcap\nIF(LIBTINS_ENABLE_PCAP)\n    FIND_PACKAGE(PCAP REQUIRED)\n    SET(TINS_HAVE_PCAP ON)\nENDIF()\n\n# Set some Windows specific flags\nIF(WIN32)\n    # We need to link against these libs\n    SET(LIBTINS_OS_LIBS Ws2_32.lib Iphlpapi.lib)\n\n    # Add the NOMINMAX macro to avoid Windows' min and max macros.\n    ADD_DEFINITIONS(-DNOMINMAX)\n\n    # MinWG need some extra definitions to compile properly (WIN32 for PCAP and WIN32_WINNT version for ws2tcpip.h)\n    IF(MINGW)\n        ADD_DEFINITIONS(-DWIN32)\n        MACRO(get_WIN32_WINNT version)\n        IF (WIN32 AND CMAKE_SYSTEM_VERSION)\n            SET(ver ${CMAKE_SYSTEM_VERSION})\n            STRING(REPLACE \".\" \"\" ver ${ver})\n            STRING(REGEX REPLACE \"([0-9])\" \"0\\\\1\" ver ${ver})\n            SET(${version} \"0x${ver}\")\n        ENDIF()\n        ENDMACRO()\n        get_WIN32_WINNT(ver)\n        ADD_DEFINITIONS(-D_WIN32_WINNT=${ver})\n    ENDIF(MINGW)\n\nENDIF(WIN32)\n\nINCLUDE(ExternalProject)\n\n# *******************\n# Compilation options\n# *******************\n\n# Always check for C++ features\nINCLUDE(CheckCXXFeatures)\n\nIF(HAS_GCC_BUILTIN_SWAP)\n    SET(TINS_HAVE_GCC_BUILTIN_SWAP ON)\nENDIF()\n\n# C++11 support\nOPTION(LIBTINS_ENABLE_CXX11 \"Compile libtins with c++11 features\" ON)\nIF(LIBTINS_ENABLE_CXX11)\n    # We only use declval and decltype on gcc/clang as VC fails to build that code,\n    # at least on VC2013\n    IF(HAS_CXX11_RVALUE_REFERENCES AND HAS_CXX11_FUNCTIONAL AND HAS_CXX11_CHRONO AND\n       HAS_CXX11_NOEXCEPT AND ((HAS_CXX11_DECLVAL AND HAS_CXX11_DECLTYPE) OR MSVC))\n        SET(TINS_HAVE_CXX11 ON)\n        MESSAGE(STATUS \"Enabling C++11 features\")\n        SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${CXX11_COMPILER_FLAGS}\")\n    ELSE()\n        MESSAGE(WARNING \"The compiler doesn't support the necessary C++11 features. \"\n                        \"Disabling C++11 on this build\")\n    ENDIF()\nELSE(LIBTINS_ENABLE_CXX11)\n    MESSAGE(\n        WARNING\n        \"Disabling C++11 features. Use LIBTINS_ENABLE_CXX11=1 to enable them. \"\n        \"Unless you are using an old compiler, you should enable this option, \"\n        \"as it increases the library's performance\")\nENDIF(LIBTINS_ENABLE_CXX11)\n\n# IEEE 802.11 and WPA2 decryption support\nOPTION(LIBTINS_ENABLE_DOT11 \"Compile libtins with IEEE 802.11 support\" ON)\nOPTION(LIBTINS_ENABLE_WPA2 \"Compile libtins with WPA2 decryption features (requires OpenSSL)\" ON)\nIF(LIBTINS_ENABLE_DOT11)\n    SET(TINS_HAVE_DOT11 ON)\n    MESSAGE(STATUS \"Enabling IEEE 802.11 support.\")\n    IF(LIBTINS_ENABLE_WPA2)\n        FIND_PACKAGE(OpenSSL)\n        IF(OPENSSL_FOUND)\n            SET(TINS_HAVE_WPA2_DECRYPTION ON)\n            MESSAGE(STATUS \"Enabling WPA2 decryption support.\")\n        ELSE()\n            MESSAGE(WARNING \"Disabling WPA2 decryption support since OpenSSL was not found\")\n            # Default this to empty strings\n            SET(OPENSSL_INCLUDE_DIR \"\")\n            SET(OPENSSL_LIBRARIES \"\")\n        ENDIF()\n    ELSE(LIBTINS_ENABLE_WPA2)\n        MESSAGE(STATUS \"Disabling WPA2 decryption support.\")\n    ENDIF(LIBTINS_ENABLE_WPA2)\nENDIF(LIBTINS_ENABLE_DOT11)\n\n# Optionally enable TCPIP classes (on by default)\nOPTION(LIBTINS_ENABLE_TCPIP \"Enable TCPIP classes\" ON)\nIF(LIBTINS_ENABLE_TCPIP AND TINS_HAVE_CXX11)\n    SET(TINS_HAVE_TCPIP ON)\n    MESSAGE(STATUS \"Enabling TCPIP classes\")\nELSE()\n    SET(TINS_HAVE_TCPIP OFF)\n    MESSAGE(STATUS \"Disabling TCPIP classes\")\nENDIF()\n\n# Search for libboost\nFIND_PACKAGE(Boost)\n\n# Optionally enable the ACK tracker (on by default)\nOPTION(LIBTINS_ENABLE_ACK_TRACKER \"Enable TCP ACK tracking support\" ON)\nIF(LIBTINS_ENABLE_ACK_TRACKER AND TINS_HAVE_CXX11)\n    IF (Boost_FOUND)\n        MESSAGE(STATUS \"Enabling TCP ACK tracking support.\")\n        INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})\n        SET(TINS_HAVE_ACK_TRACKER ON)\n    ELSE()\n        MESSAGE(WARNING \"Disabling ACK tracking support as boost.icl was not found\")\n        SET(TINS_HAVE_ACK_TRACKER OFF)\n    ENDIF()\nELSE()\n    SET(TINS_HAVE_ACK_TRACKER OFF)\n    MESSAGE(STATUS \"Disabling ACK tracking support\")\nENDIF()\n\n# Optionally enable the TCP stream custom data (on by default)\nOPTION(LIBTINS_ENABLE_TCP_STREAM_CUSTOM_DATA \"Enable TCP stream custom data support\" ON)\nIF(LIBTINS_ENABLE_TCP_STREAM_CUSTOM_DATA AND TINS_HAVE_CXX11)\n    IF (Boost_FOUND)\n        MESSAGE(STATUS \"Enabling TCP stream custom data support.\")\n        INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})\n        SET(TINS_HAVE_TCP_STREAM_CUSTOM_DATA ON)\n    ELSE()\n        MESSAGE(WARNING \"Disabling TCP stream custom data support as boost.any was not found\")\n        SET(TINS_HAVE_TCP_STREAM_CUSTOM_DATA OFF)\n    ENDIF()\nELSE()\n    SET(TINS_HAVE_TCP_STREAM_CUSTOM_DATA OFF)\n    MESSAGE(STATUS \"Disabling TCP stream custom data support\")\nENDIF()\n\nOPTION(LIBTINS_ENABLE_WPA2_CALLBACKS \"Enable WPA2 callback interface\" ON)\nIF(LIBTINS_ENABLE_WPA2_CALLBACKS AND TINS_HAVE_WPA2_DECRYPTION AND TINS_HAVE_CXX11)\n    SET(STATUS \"Enabling WPA2 callback interface\")\n    SET(TINS_HAVE_WPA2_CALLBACKS ON)\nENDIF()\n\n# Use pcap_sendpacket to send l2 packets rather than raw sockets\nIF(WIN32)\n    SET(USE_PCAP_SENDPACKET_DEFAULT ON)\nELSE(WIN32)\n    SET(USE_PCAP_SENDPACKET_DEFAULT OFF)\nENDIF(WIN32)\n\nOPTION(LIBTINS_USE_PCAP_SENDPACKET \"Use pcap_sendpacket to send l2 packets\"\n        ${USE_PCAP_SENDPACKET_DEFAULT})\nIF(LIBTINS_ENABLE_PCAP AND LIBTINS_USE_PCAP_SENDPACKET)\n    SET(TINS_HAVE_PACKET_SENDER_PCAP_SENDPACKET ON)\n    MESSAGE(STATUS \"Using pcap_sendpacket to send l2 packets.\")\nENDIF()\n\n# Add a target to generate API documentation using Doxygen\nFIND_PACKAGE(Doxygen QUIET)\nIF(DOXYGEN_FOUND)\n    CONFIGURE_FILE(\n        ${CMAKE_CURRENT_SOURCE_DIR}/docs/Doxyfile.in\n        ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile\n        @ONLY\n    )\n    ADD_CUSTOM_TARGET(\n        docs\n        ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        COMMENT \"Generating API documentation with Doxygen\" VERBATIM\n    )\nENDIF(DOXYGEN_FOUND)\n\n# Configuration file\nCONFIGURE_FILE(\n  \"${PROJECT_SOURCE_DIR}/include/tins/config.h.in\"\n  \"${PROJECT_SOURCE_DIR}/include/tins/config.h\"\n)\n\nIF (NOT CMAKE_INSTALL_LIBDIR)\n    SET(CMAKE_INSTALL_LIBDIR lib)\nENDIF()\nIF (NOT CMAKE_INSTALL_BINDIR)\n    SET(CMAKE_INSTALL_BINDIR bin)\nENDIF()\n# The library output directory\nSET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})\nSET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})\n# Support for pkg-config\nSET(pkgconfig_prefix      ${CMAKE_INSTALL_PREFIX})\nSET(pkgconfig_exec_prefix ${CMAKE_INSTALL_PREFIX})\nSET(pkgconfig_libdir      ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})\nSET(pkgconfig_version     ${LIBTINS_VERSION})\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/libtins.pc.in\n                ${CMAKE_CURRENT_BINARY_DIR}/libtins.pc @ONLY)\n\nINSTALL(\n    FILES\n    ${CMAKE_CURRENT_BINARY_DIR}/libtins.pc\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig\n)\n\n# Confiugure the uninstall script\nCONFIGURE_FILE(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\"\n    IMMEDIATE @ONLY\n)\n\n# Add uninstall target\nADD_CUSTOM_TARGET(uninstall\n    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)\n\n# ******************\n# Add subdirectories\n# ******************\nADD_SUBDIRECTORY(src)\n\nIF(LIBTINS_BUILD_EXAMPLES)\n    IF(LIBTINS_ENABLE_PCAP)\n        ADD_SUBDIRECTORY(examples)\n    ELSE()\n        MESSAGE(STATUS \"Not building examples as pcap support is disabled\")\n    ENDIF()\nENDIF()\n\nIF(LIBTINS_BUILD_TESTS)\n    # Only include googletest if the git submodule has been fetched\n    IF(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/googletest/CMakeLists.txt\")\n        # Enable tests and add the test directory\n        MESSAGE(STATUS \"Tests have been enabled\")\n        SET(GOOGLETEST_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/googletest)\n        SET(GOOGLETEST_INCLUDE ${GOOGLETEST_ROOT}/googletest/include)\n        SET(GOOGLETEST_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/googletest)\n        SET(GOOGLETEST_LIBRARY ${GOOGLETEST_BINARY_DIR}/googletest)\n\n        ExternalProject_Add(\n            googletest\n            DOWNLOAD_COMMAND \"\"\n            SOURCE_DIR ${GOOGLETEST_ROOT}\n            BINARY_DIR ${GOOGLETEST_BINARY_DIR}\n            CMAKE_CACHE_ARGS \"-DBUILD_GTEST:bool=ON\" \"-DBUILD_GMOCK:bool=OFF\"\n                            \"-Dgtest_force_shared_crt:bool=ON\"\n                            \"-DCMAKE_CXX_COMPILER:path=${CMAKE_CXX_COMPILER}\"\n            INSTALL_COMMAND \"\"\n        )\n        # Make sure we build googletest before anything else\n        ADD_DEPENDENCIES(tins googletest)\n        ENABLE_TESTING()\n        ADD_SUBDIRECTORY(tests)\n    ELSE()\n        FIND_PACKAGE(GTest QUIET)\n        IF(${GTest_FOUND})\n            ENABLE_TESTING()\n            ADD_SUBDIRECTORY(tests)\n        ELSE()\n            MESSAGE(STATUS \"googletest git submodule is absent. Run `git submodule init && git submodule update` to get it\")\n        ENDIF()\n    ENDIF()\nENDIF()\n\n# **********************************\n# CMake project configuration export\n# **********************************\n\nif(UNIX)\n    set(CONF_CMAKE_INSTALL_DIR \"${CMAKE_INSTALL_LIBDIR}/cmake/libtins\")\nelse()\n    set(CONF_CMAKE_INSTALL_DIR CMake)\nendif()\n\n# Add all targets to the build-tree export set\nEXPORT(\n    TARGETS tins\n    FILE \"${PROJECT_BINARY_DIR}/libtinsTargets.cmake\"\n)\n\n# Export the package for use from the build-tree\n# (this registers the build-tree with a global CMake-registry)\nEXPORT(PACKAGE libtins)\n\n# Create the libtinsConfig.cmake and libtinsConfigVersion.cmake files\n# for the build tree\nSET(CONF_INCLUDE_DIRS \"${PROJECT_SOURCE_DIR}/include\")\nCONFIGURE_FILE(\n    cmake/libtinsConfig.cmake.in\n    \"${PROJECT_BINARY_DIR}/libtinsConfig.cmake\" @ONLY\n)\nCONFIGURE_FILE(\n    cmake/libtinsConfigVersion.cmake.in\n    \"${PROJECT_BINARY_DIR}/libtinsConfigVersion.cmake\" @ONLY\n)\n# Install the libtinsConfig.cmake and libtinsConfigVersion.cmake\nINSTALL(\n    FILES\n    \"${PROJECT_BINARY_DIR}/libtinsConfig.cmake\"\n    \"${PROJECT_BINARY_DIR}/libtinsConfigVersion.cmake\"\n    DESTINATION ${CONF_CMAKE_INSTALL_DIR}\n    COMPONENT dev\n)\n\n# Install the export set for use with the install-tree\nINSTALL(\n    EXPORT libtinsTargets\n    DESTINATION ${CONF_CMAKE_INSTALL_DIR}\n    COMPONENT dev\n)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.0859375,
          "content": "# Contributing\n\nBug reports and enhancements to the library are really valued and appreciated!\n\n# Bug reports\n\nIf you find a bug, please report it! Bugs on the library are taken seriously \nand a patch for them is usually pushed on the same day. \n\nWhen reporting a bug, please make sure to indicate the platform (e.g. GNU/Linux, Windows, OSX)\nin which you came across the issue, as this is essential to finding the cause.\n\n## Packet parsing bugs\n\nIf you find a bug related to packet parsing (e.g. a field on a packet contains an \ninvalid value), please try to provide a pcap file that contains the packet that\nwas incorrectly parsed. Doing this will make it very simple to find the issue, plus\nyou will be asked to provide this file anyway, so this just makes things\neasier.\n\n# Pull requests\n\nPull requests are very welcomed. When doing a pull request please:\n\n* Notice that your code will be compiled and tests will be run automatically by the travis and \nappveyor CI tools. If your code has issues on any of the tested platforms (GNU/Linux, Windows\nand OSX), please fix it or otherwise the PR won't be merged. \n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.2734375,
          "content": "Copyright (c) 2012-2017, Matias Fontanini\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n* Redistributions of source code must retain the above copyright\n  notice, this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above\n  copyright notice, this list of conditions and the following disclaimer\n  in the documentation and/or other materials provided with the\n  distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.7470703125,
          "content": "# libtins\n\n[![Build status](https://travis-ci.org/mfontanini/libtins.svg?branch=master)](https://travis-ci.org/mfontanini/libtins) \n[![Build status](https://ci.appveyor.com/api/projects/status/33n8ib68nx3tptib/branch/master?svg=true)](https://ci.appveyor.com/project/mfontanini/libtins/branch/master)\n\nlibtins is a high-level, multiplatform C++ network packet sniffing and \ncrafting library. \n\nIts main purpose is to provide the C++ developer an easy, efficient, \nplatform and endianess-independent way to create tools which need to \nsend, receive and manipulate specially crafted packets. \n\nIn order to read tutorials, examples and checkout some benchmarks of the\nlibrary, please visit:\n\nhttp://libtins.github.io/\n\n## Compiling ##\n\n[libtins](http://libtins.github.io/) depends on \n[libpcap](http://www.tcpdump.org/) and \n[openssl](http://www.openssl.org/), although the latter is not necessary \nif some features of the library are disabled.\n\nIn order to compile, execute:\n\n```Shell\n# Create the build directory\nmkdir build\ncd build\n\n# Configure the project. Add any relevant configuration flags\ncmake ../\n\n# Compile!\nmake\n```\n\n### Static/shared build\nNote that by default, only the shared object is compiled. If you would\nlike to generate a static library file, run:\n\n```Shell\ncmake ../ -DLIBTINS_BUILD_SHARED=0\n```\n\nThe generated static/shared library files will be located in the \n_build/lib_ directory.\n\n### C++11 support\n\nlibtins is noticeably faster if you enable _C++11_ support. Therefore, \nif your compiler supports this standard, then you should enable it. \nIn order to do so, use the _LIBTINS_ENABLE_CXX11_ switch:\n\n```Shell\ncmake ../ -DLIBTINS_ENABLE_CXX11=1\n```\n\n### TCP ACK tracker\n\nThe TCP ACK tracker feature requires the boost.icl library (header only).\nThis feature is enabled by default but will be disabled if the boost\nheaders are not found. You can disable this feature by using:\n\n```Shell\ncmake ../ -DLIBTINS_ENABLE_ACK_TRACKER=0\n```\n\nIf your boost installation is on some non-standard path, use \nthe parameters shown on the\n[CMake FindBoost help](https://cmake.org/cmake/help/v3.0/module/FindBoost.html)\n\n### WPA2 decryption\n\nIf you want to disable _WPA2_ decryption support, which will remove \nopenssl as a dependency for compilation, use the \n_LIBTINS_ENABLE_WPA2_ switch:\n\n```Shell\ncmake ../ -DLIBTINS_ENABLE_WPA2=0\n```\n\n### IEEE 802.11 support\n\nIf you want to disable IEEE 802.11 support(this will also disable \nRadioTap and WPA2 decryption), which will reduce the size of the \nresulting library in around 20%, use the _LIBTINS_ENABLE_DOT11_ switch:\n\n```Shell\ncmake ../ -DLIBTINS_ENABLE_DOT11=0\n```\n\n## Installing ##\n\nOnce you're done, if you want to install the header files and the \nshared object, execute as root:\n\n```Shell\nmake install\n```\n\nThis will install the shared object typically in _/usr/local/lib_. Note\nthat you might have to update ldconfig's cache before using it, so \nin order to invalidate it, you should run(as root):\n\n```Shell\nldconfig\n```\n\n## Running tests ##\n\nYou may want to run the unit tests on your system so you make sure\neverything works. In order to do so, you need to follow these steps:\n\n```Shell\n# This will fetch the googletest submodule, needed for tests\ngit submodule init\ngit submodule update\n\nmkdir build\ncd build\n\n# Use any options you want\ncmake .. \n\n# Compile tests\nmake tests\n\n# Run them\nmake test\n```\n\nIf you find that any tests fail, please create an ticket in the\nissue tracker indicating the platform and architecture you're using.\n\n## Examples ##\n\nYou might want to have a look at the examples located  in the \"examples\"\ndirectory. The same samples can be found online at:\n\nhttp://libtins.github.io/examples/\n\n## Contributing ##\n\nIf you want to report a bug or make a pull request, please have a look at \nthe [contributing](CONTRIBUTING.md) file before doing so.\n"
        },
        {
          "name": "THANKS",
          "type": "blob",
          "size": 0.17578125,
          "content": "We'd like to thank the following people, who have been of great help\nthrough the development of libtins:\n\n- Raúl Benencia <rbenencia@gmail.com> - For creating the Debian package.\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "googletest",
          "type": "commit",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "libtins.pc.in",
          "type": "blob",
          "size": 0.279296875,
          "content": "prefix=@pkgconfig_prefix@\nexec_prefix=@pkgconfig_exec_prefix@\nlibdir=@pkgconfig_libdir@\nincludedir=${prefix}/include\n\nName: libtins\nDescription: C++ packet crafting, sniffing and interpretation library.\nVersion: @pkgconfig_version@\nLibs: -L${libdir} -ltins\nCflags: -I${includedir}/tins\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}