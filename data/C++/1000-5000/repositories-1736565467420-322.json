{
  "metadata": {
    "timestamp": 1736565467420,
    "page": 322,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "yyzybb537/libgo",
      "stars": 3227,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.63671875,
          "content": "*.o\n*.t\n*.a\n*.so\nlibgo/context/*.asm\n\nthird_party/gtest/*\nlibgo/common/cmake_config.h\nvs_proj/vs201*\n.ycm_extra_conf.py\n.ycm_extra_conf.pyc\nbuild/\ntutorial/build/\ntest/util/out.exe\ntest/util/a.out\ntest/golang/libgo_test\nlibgo/context/*.S\n\nthird_party/boost.context/b2\nthird_party/boost.context/bin.v2/\nthird_party/boost.context/bjam\nthird_party/boost.context/bootstrap.log\nthird_party/boost.context/project-config.jam\nthird_party/boost.context/project-config.jam.*\nthird_party/boost.context/tools/build/src/engine/bin.linuxx86_64/*\nthird_party/boost.context/stage/\nthird_party/boost.context/tools/build/src/engine/bootstrap/jam*\n\ntest/gtest_unit/build\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.11328125,
          "content": "[submodule \"third_party/fast_asio\"]\n\tpath = third_party/fast_asio\n\turl = https://github.com/yyzybb537/fast_asio.git\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.7333984375,
          "content": "sudo: required\ndist: trusty\nlanguage: cpp\n\ncompiler:\n    - gcc\n\nbefore_install:\n    - sudo add-apt-repository -y ppa:kojoley/boost\n    - sudo apt-get update -y || echo \"update error\"\n    - lsb_release -a\n\ninstall:\n    - git clone https://github.com/yyzybb537/Boost-dev-bin.git /tmp/boost-dev-bin && sudo dpkg -i /tmp/boost-dev-bin/libboost1.59-all-dev.deb\n    - ls /usr/local/lib/libboost*\n    - sudo ldconfig\n    - sudo apt-get install -y -qq cmake \n\nscript: \n    - mkdir build; pushd build;\n    - cmake .. && make -j4\n    - popd;\n    - pushd test/gtest_unit; mkdir build; pushd build;\n    - cmake .. && make -j4 && ../runall.sh\n    - popd;\n\nafter_success:\n    - \n\nbranches:\n    only:\n    - dev\n    - 3.0\n    - master\n\nnotifications:\n  email: true\n\n\n"
        },
        {
          "name": ".travis_scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 6.8154296875,
          "content": "cmake_minimum_required(VERSION 2.8)\n\n###################################################################################\nproject(libgo)\n\nenable_language(C ASM)\n\nif (CMAKE_BUILD_TYPE)\nelse()\n    set(CMAKE_BUILD_TYPE RELEASE)\n    #set(CMAKE_BUILD_TYPE DEBUG)\nendif()\n\nmessage(\"------------ Options -------------\")\nmessage(\"  CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}\")\nmessage(\"  CMAKE_COMMAND: ${CMAKE_COMMAND}\")\n\noption(ENABLE_DEBUGGER \"enable debugger\" OFF)\nif (ENABLE_DEBUGGER)\n    set(ENABLE_DEBUGGER 1)\n    message (\"  enable_debugger: yes\")\nelse()\n    set(ENABLE_DEBUGGER 0)\n    message (\"  enable_debugger: no\")\nendif()\n\noption(DISABLE_HOOK \"disable hook\" OFF)\nif (DISABLE_HOOK)\n    set(ENABLE_HOOK 0)\n    message (\"  enable_hook: no\")\nelse()\n    set(ENABLE_HOOK 1)\n    message (\"  enable_hook: yes\")\nendif()\n\nset(USE_ROUTINE_SYNC 1)\nmessage (\"  use routine_sync tools: yes\")\n\nif (BUILD_DYNAMIC)\n    message (\"  build dynamic lib: yes\")\nelse()\n    message (\"  build dynamic lib: no\")\nendif()\n\nmessage(\"-------------- Env ---------------\")\nmessage(\"  CMAKE_SOURCE_DIR: ${CMAKE_SOURCE_DIR}\")\nmessage(\"  CMAKE_BINARY_DIR: ${CMAKE_BINARY_DIR}\")\nmessage(\"----------------------------------\")\n\nconfigure_file(${PROJECT_SOURCE_DIR}/libgo/common/cmake_config.h.in ${PROJECT_SOURCE_DIR}/libgo/common/cmake_config.h)\nmessage(\"----------------------------------\")\n\nif (UNIX)\n    set(CMAKE_CXX_FLAGS \"-std=c++11 -D__const__=  -fPIC -fno-strict-aliasing -Wall ${CMAKE_CXX_FLAGS}\")\n    set(CMAKE_CXX_FLAGS_DEBUG \"-g\")\n    set(CMAKE_CXX_FLAGS_RELEASE \"-g -O3 -DNDEBUG\")\n\n    execute_process(COMMAND \"chmod\" \"+x\" \"${PROJECT_SOURCE_DIR}/third_party/select_asm.sh\")\n    execute_process(COMMAND \"chmod\" \"+x\" \"${PROJECT_SOURCE_DIR}/third_party/boost.context/bootstrap.sh\")\n    execute_process(COMMAND \"chmod\" \"+x\" \"${PROJECT_SOURCE_DIR}/third_party/boost.context/tools/build/src/engine/build.sh\")\n\t\n    set(CMAKE_ASM_SOURCE_FILE_EXTENSIONS S)\n    message(\"--> select asm source file, please wait about 5 seconds ...\")\n    execute_process(COMMAND \"${PROJECT_SOURCE_DIR}/third_party/select_asm.sh\" \"${PROJECT_SOURCE_DIR}\" \"jump\" OUTPUT_VARIABLE jump_asm_file)\n    execute_process(COMMAND \"${PROJECT_SOURCE_DIR}/third_party/select_asm.sh\" \"${PROJECT_SOURCE_DIR}\" \"make\" OUTPUT_VARIABLE make_asm_file)\nelseif (WIN32)\n    # windows platform\n    add_definitions(-D_CRT_SECURE_NO_WARNINGS)\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /MTd /EHsc\")\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /MT /EHsc\")\n\n    #set(CMAKE_ASM_SOURCE_FILE_EXTENSIONS asm)\n    #file(COPY ${PROJECT_SOURCE_DIR}/third_party/boost.context/libs/context/src/asm/make_x86_64_ms_pe_masm.asm DESTINATION ${PROJECT_SOURCE_DIR}/libgo/context)\n    #file(COPY ${PROJECT_SOURCE_DIR}/third_party/boost.context/libs/context/src/asm/jump_x86_64_ms_pe_masm.asm DESTINATION ${PROJECT_SOURCE_DIR}/libgo/context)\nendif()\n\nmessage(\"------------ Cxx flags -------------\")\nmessage(\"  CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}: ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}}\")\nmessage(\"------------------------------------\")\n\ninclude_directories(${PROJECT_SOURCE_DIR})\naux_source_directory(${PROJECT_SOURCE_DIR}/libgo CO_SRC_LIST)\naux_source_directory(${PROJECT_SOURCE_DIR}/libgo/common CO_SRC_LIST)\naux_source_directory(${PROJECT_SOURCE_DIR}/libgo/context CO_SRC_LIST)\naux_source_directory(${PROJECT_SOURCE_DIR}/libgo/task CO_SRC_LIST)\naux_source_directory(${PROJECT_SOURCE_DIR}/libgo/scheduler CO_SRC_LIST)\naux_source_directory(${PROJECT_SOURCE_DIR}/libgo/routine_sync_libgo CO_SRC_LIST)\naux_source_directory(${PROJECT_SOURCE_DIR}/libgo/timer CO_SRC_LIST)\naux_source_directory(${PROJECT_SOURCE_DIR}/libgo/cls CO_SRC_LIST)\naux_source_directory(${PROJECT_SOURCE_DIR}/libgo/defer CO_SRC_LIST)\naux_source_directory(${PROJECT_SOURCE_DIR}/libgo/pool CO_SRC_LIST)\naux_source_directory(${PROJECT_SOURCE_DIR}/libgo/debug CO_SRC_LIST)\n\nif (NOT DISABLE_HOOK)\n    if (UNIX)\n        aux_source_directory(${PROJECT_SOURCE_DIR}/libgo/netio/unix CO_SRC_LIST)\n    elseif (WIN32)\n\tinclude_directories(${PROJECT_SOURCE_DIR}/libgo/netio/windows)\n        aux_source_directory(${PROJECT_SOURCE_DIR}/libgo/netio/windows CO_SRC_LIST)\n\taux_source_directory(${PROJECT_SOURCE_DIR}/libgo/context/fiber CO_SRC_LIST)\n\tlist(APPEND CO_SRC_LIST ${PROJECT_SOURCE_DIR}/libgo/netio/windows/xhook/xhook.cpp)\n    endif()\nelse()\n    aux_source_directory(${PROJECT_SOURCE_DIR}/libgo/netio/disable_hook CO_SRC_LIST)\nendif()\n\nset(TARGET \"libgo\")\nset(STATIC_T \"libgo_static\")\nset(STATIC_HOOK \"static_hook\")\n\nlist(APPEND CO_SRC_LIST ${jump_asm_file})\nlist(APPEND CO_SRC_LIST ${make_asm_file})\nadd_library(\"${STATIC_T}\" STATIC ${CO_SRC_LIST})\nset_target_properties(\"${STATIC_T}\" PROPERTIES OUTPUT_NAME \"${TARGET}\")\n\nif (UNIX)\n    install(TARGETS ${STATIC_T} LIBRARY DESTINATION \"lib\" ARCHIVE DESTINATION \"lib\")\n    install(DIRECTORY ${PROJECT_SOURCE_DIR}/libgo/ DESTINATION \"include/libgo\" FILES_MATCHING PATTERN \"*.h\")\n        #PATTERN \"windows\" EXCLUDE\n\n    add_library(\"${STATIC_HOOK}\" STATIC \"${PROJECT_SOURCE_DIR}/libgo/netio/unix/static_hook/static_hook.cpp\")\n\n    if (BUILD_DYNAMIC)\n        set(SHARED_T \"libgo_dynamic\")\n        add_library(\"${SHARED_T}\" SHARED ${CO_SRC_LIST})\n        set_target_properties(\"${SHARED_T}\" PROPERTIES OUTPUT_NAME \"${TARGET}\")\n        target_link_libraries(\"${SHARED_T}\" ${LINK_LIBS} -ldl)\n        install(TARGETS ${SHARED_T} LIBRARY DESTINATION \"lib\" ARCHIVE DESTINATION \"lib\")\n    endif()\n\n    add_custom_target(debug\n        COMMAND ${CMAKE_COMMAND} -DCMAKE_BUILD_TYPE=DEBUG ${CMAKE_SOURCE_DIR}\n        COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target all\n        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n        COMMENT \"Switch CMAKE_BUILD_TYPE to Debug\"\n    )\n\n    add_custom_target(release\n        COMMAND ${CMAKE_COMMAND} -DCMAKE_BUILD_TYPE=RELEASE ${CMAKE_SOURCE_DIR}\n        COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target all\n        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n        COMMENT \"Switch CMAKE_BUILD_TYPE to Release\"\n    )\n\n    set(PROFILE_FLAGS \"-pg ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}}\")\n\n    #message(\"PROFILE_FLAGS: ${PROFILE_FLAGS}\")\n    add_custom_target(profile\n        COMMAND ${CMAKE_COMMAND} -DCMAKE_BUILD_TYPE=PROFILE -DCMAKE_CXX_FLAGS_PROFILE=\\\\'${PROFILE_FLAGS}\\\\' ${CMAKE_SOURCE_DIR}\n        COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target all\n        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n        COMMENT \"Switch CMAKE_BUILD_TYPE to PROFILE\"\n    )\n\n    add_custom_target(uninstall\n        COMMAND rm ${CMAKE_INSTALL_PREFIX}/lib/liblibgo.a ${CMAKE_INSTALL_PREFIX}/lib/liblibgo.so ${CMAKE_INSTALL_PREFIX}/lib/liblibgo_main.a -f\n        COMMAND rm ${CMAKE_INSTALL_PREFIX}/include/libgo -rf\n    )\n\nelseif (WIN32)\n    set_target_properties(\"${STATIC_T}\" PROPERTIES COMPILE_FLAGS \"/wd4819 /wd4267\")\nendif()\n\nif (WIN32)\n    if (BOOST_ROOT)\n\t    add_subdirectory(${PROJECT_SOURCE_DIR}/test/gtest_unit)\n\t    add_subdirectory(${PROJECT_SOURCE_DIR}/tutorial)\n    endif()\nendif()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05859375,
          "content": "The MIT License (MIT)\nCopyright (c) 2016 yuyangzi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in \nthe Software without restriction, including without limitation the rights to use\n, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of \nthe Software, and to permit persons to whom the Software is furnished to do so, \nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS \nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR \nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER \nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.27734375,
          "content": "# libgo\n\n[![Build Status](https://travis-ci.org/yyzybb537/libgo.svg?branch=master)](https://travis-ci.org/yyzybb537/libgo)\n\n### libgo -- a coroutine library and a parallel Programming Library\n\nLibgo is a stackful coroutine library for collaborative scheduling written in C++ 11, and it is also a powerful and easy-to-use parallel programming library.\n\nThree platforms are currently supported:\n\n    Linux\n\n    MacOSX\n    \n    Windows (Win7 or above,x86 or x64,complie with VS2015/2017)\n\n\nUsing libgo to write multi-threaded programs, it can be developed as fast and logical as golang and Erlang concurrent languages, and has the performance advantages of C++ native.It make it happen that one can serve God and Mammon.\n\nLibgo has the following characteristics:\n\n*   1.Provide golang's General powerful protocol, write code based on coroutine, can write simple code in a synchronous manner, while achieving asynchronous performance.\n\n*   2.Supporting massive coroutines, creating 1 million coroutines requires only 4.5 GB of physical memory. (data from real test, in no deliberately compressed stack situation.)\n\n*   3.Supporting multi-threaded scheduling protocols, providing efficient load balancing strategy and synchronization mechanism, it is easy to write efficient multi-threaded programs.\n\n*   4.The number of scheduled threads supports dynamic scaling, and there is no head blocking caused by slow scheduling.\n\n*   5.Use hook technology to make synchronous third-party libraries of linking processes become asynchronous calls, which greatly improves their performance. There's no need to worry that some DB authorities don't provide asynchronous drivers, such as hiredis and mysqlclient, which are client drivers that can be used directly and can achieve performance comparable to that of asynchronous drivers.\n\n*   6.Both dynamic links and full static links are supported, which makes it easy to generate executable files using C++ 11 static links and deploy them to low-level Linux systems.\n\n*   7.Provide Channel, Co_mutex, Co_rwmutex, timer and other features to help users write programs more easily.\n\n*   8.Supports local variables (CLS) of the process, and completely covers all scenarios of TLS (read the tutorial code sample13_cls.cpp for details).\n\n* From user feedback in the past two years, many developers have a project with an asynchronous non-blocking model (probably based on epoll, libuv or ASIO network libraries) and then need access to DBs such as MySQL that do not provide asynchronous driver. Conventional connection pool and thread pool schemes are intensive in high concurrency scenarios (each connection have to correspond to a thread for Best performance. Thousands of instruction cycles of thread context switching  are intensive and too many active threads will lead to a sharp decline performance in OS scheduling capacity, which is unacceptable to many develops.\n\n* In this situation, there is no need to reconstruct the existing code if we want to use libgo to solve the problem of blocking operation in non-blocking model. The new libgo 3.0 has created three special tools for this scenario, which can solve this problem without intrusion: multi-scheduler with isolated running environment and easy interaction (read the tutorial code sample1_go.cpp for details), libggo can instead of the traditional thread pool scheme. (read tutorial code sample10_co_pool.cpp and sample11_connection_pool.cpp for details)\n\n\n* ** tutorial directory contains many tutorial codes, including detailed instructions, so that develop can learn libgo library step by step. **\n\n\n* If you find any bugs, good suggestions, or use ambiguities, you can submit a issue or contact the author directly:\nEmail: 289633152@qq.com\n\n \n### compile and use libgo :\n\n *    Vcpkg:\n\n        \nIf you have installed vcpkg, you can install it directly using vcpkg:\n      $ vcpkg install libgo\n\n *    Linux: \n\n        1.Use cmake to compile and install：\n\n            $ mkdir build\n            $ cd build\n            $ cmake ..\n\t    $ make debug     #Skip it if you don`t want a debuggable versions.\n            $ sudo make uninstall\n            $ sudo make install\n\n \n        2.Dynamic link to glibc: (put libgo at the front of link list)\n        \n            g++ -std=c++11 test.cpp -llibgo -ldl [-lother_libs]\n            \n        3.Full static link: (put libgo at the front of link list)\n\n            g++ -std=c++11 test.cpp -llibgo -Wl,--whole-archive -lstatic_hook -lc -lpthread -Wl,--no-whole-archive [-lother_libs] -static\n\n *    Windows: (3.0 is compatible with windows, just use master branch directly!)\n \n        0.When using GitHub to download code on windows, we must pay attention to the problem of newline characters. Please install git correctly (using default options) and use git clone to download source code. (Do not download compressed packages)\n \n        1.Use CMake to build project. \n\t\t\t\n\t\t\t#For example vs2015(x64)：\n\t\t\t$ cmake .. -G\"Visual Studio 14 2015 Win64\"\n\n\t\t\t#For example vs2015(x86)：\n\t\t\t$ cmake .. -G\"Visual Studio 14 2015\"\n        \n        2.If you want to execute the test code, please link the boost library. And set BOOST_ROOT in the cmake parameter:\n        \n        \t\tFor example：\n        \t\t$ cmake .. -G\"Visual Studio 14 2015 Win64\" -DBOOST_ROOT=\"e:\\\\boost_1_69_0\"\n\n### performance\n\nLike golang, libgo implements a complete scheduler (users only need to create a coroutine without concern for the execution, suspension and resource recovery of the coroutine). Therefore, libgo is qualified to compare the performance of single-threaded with golang (It is not qualified to do performance comparison in different ability).\n\n<img width=\"400\" src=\"imgs/switch_cost.png\"/>\n\nTest environment: \n2018 13-inch MAC notebook (CPU minimum)\nOperating System: Mac OSX\nCPU: 2.3 GHz Intel Core i5 (4 Core 8 Threads)\nTest script: $test/golang/test.sh thread_number\n\n\n<img width=\"600\" src=\"imgs/switch_speed.png\"/>\n\n### Matters needing attention(WARNING)：\n \nTLS or non-reentrant library functions that depend on TLS implementation should be avoided as far as possible.\nIf it is unavoidable to use, we should pay attention to stop accessing the TLS data generated before handover after the process handover.\n\n\n### There are several kinds of behaviors that may cause the process switching:\n\n* The user calls co_yield to actively give up the cpu span.\n* Competitive Cooperative Lock, Channel Reading and Writing.\n* System Call of Sleep Series.\n* System calls waiting for events to trigger, such as poll, select, epoll_wait.\n* DNS-related system calls (gethostbyname series).\n* Connect, accept, data read-write operations on blocking sockets.\n* Data Read-Write Operation on Pipe.\n\n### System Call List of Hook on Linux System:\n\n\t\tconnect   \n\t\tread      \n\t\treadv     \n\t\trecv      \n\t\trecvfrom  \n\t\trecvmsg   \n\t\twrite     \n\t\twritev    \n\t\tsend      \n\t\tsendto    \n\t\tsendmsg   \n\t\tpoll      \n\t\t__poll\n\t\tselect    \n\t\taccept    \n\t\tsleep     \n\t\tusleep    \n\t\tnanosleep\n\t\tgethostbyname                                                               \n\t\tgethostbyname2                                                              \n\t\tgethostbyname_r                                                             \n\t\tgethostbyname2_r                                                            \n\t\tgethostbyaddr                                                               \n\t\tgethostbyaddr_r\n\n\tThe above system calls are all possible blocking system calls. The whole thread is no longer blocked in the process. During the blocking waiting period, the CPU can switch to other processes to execute.System calls executed in native threads by HOOK are 100% consistent with the behavior of the original system calls without any change.\n  \n\t\tsocket\n\t\tsocketpair\n\t\tpipe\n\t\tpipe2\n\t\tclose     \n\t\t__close\n\t\tfcntl     \n\t\tioctl     \n\t\tgetsockopt\n\t\tsetsockopt\n\t\tdup       \n\t\tdup2      \n\t\tdup3      \n\n    The above system calls will not cause blocking, although they are also Hook, but will not completely change their behavior, only for tracking socket options and status.\n\n### System Call List of Hook on Windows System:\n\n\t\tioctlsocket                                                                        \n\t\tWSAIoctl                                                                           \n\t\tselect                                                                             \n\t\tconnect                                                                            \n\t\tWSAConnect                                                                         \n\t\taccept                                                                             \n\t\tWSAAccept                                                                          \n\t\tWSARecv                                                                            \n\t\trecv                                                                               \n\t\trecvfrom                                                                           \n\t\tWSARecvFrom                                                                        \n\t\tWSARecvMsg                                                                         \n\t\tWSASend                                                                            \n\t\tsend                                                                               \n\t\tsendto                                                                             \n\t\tWSASendTo                                                                          \n\t\tWSASendMsg\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 4.130859375,
          "content": "TODO:\n增加可以与async模型配合使用的协程池, 用户可以将同步网络操作或其他阻塞的请求投递进来(比如:mysql操作),\n    将用户的主循环也放入协程中执行, epollwait变成poll2个fd, 一个epollfd, 一个callback-fd, 以便快速响应.\n    触发后在hook过的用户的epollwait/kqueue/iocp里面调用callback, 以此保证callback和触发点在同一个或同一组线程\n    投递时：if (!channel.TryPush(xx)) go { func(xx); while (co_num < maxPoolNum) { channel >> x; func(x); }}\n实现一个连接池, 与协程池搭配使用, 简化mysql\\hiredis等库的使用方式.\n支持同时等待多个Channel\n优化sync库(仿照futex的实现, 尝试无锁队列实现channel)\nmaster分支兼容macos\n解决第三方库、glibc++ exception使用tls的隐患(pthread_xxx_specific ?)\n\nDeprecated:\n协程对象Task内存布局调优，tls池化，每个池使用多写一读链表队列，申请时仅在当前线程的池中申请，可以免锁，释放时均衡每个线程的池水水位，可以塞入其他线程的池中。\n环切(runnable状态)搭配星切, 提升协程切换性能\n    A）使用环切调度替代现在的星切调度(CoYeild时选择下一个切换目标)，必要时才切换回线程处理epoll、定时器、sleep等逻辑，同时协调好多线程调度\n    B）调度器的Run函数里面做了很多协程切换之外的事情，尽量降低这部分在非必要时的cpu消耗，比如：有任务加入定时器是设置一个tls标记为true，只有标记为true时才去处理定时器相关逻辑。\n    C）调度器中的runnable队列使用了自旋锁，没有竞争时对原子变量的操作也是比较昂贵的，runnable队列可以优化成多写一读，仅在写入端加锁的队列。\n\nDONE:\n支持exception\n优化co_mutex, 为BlockWait抽象出一个WaitObject, 管理等待中的协程, 以免不同的WaitObject竞争同一个全局锁\n阻塞socket的超时设置(RECVTIMEO, SENDTIMEO)在协程中处理\n修复gtest单元测试代码链接错误的问题\n支持poll\n支持accept\n支持asio\n降低空转时的cpu资源占用\n解决http性能测试出现error, 无法加入epoll的问题\n支持sleep nanosleep poll(timeout)\n正确处理Add into epoll, add into wait_list, set timer And epoll_wait, cancel这几件事的同步关系\n支持select \n支持channel特性\n添加命名空间\nHOOK read write时, 不要影响读文件\n使用shared-stack方案, 降低一点点协程切换速度换取内存的节约使用, 支持创建海量协程\n网络IO以外的阻塞调用, 可以使用co_await异步化\nselect中对exceptfds正确检测!\n移植Windows: \n    1.HOOK WINAPI, 使用多select模型\n        Hook List: accept connect select WSARecv WSASend\n    2.ucontext->windows.fiber\nWIN HOOK: send recv WSARecv** WSASend**\n重新尝试boost.context\\boost.coroutine\n增加编译选项：ENABLE_BOOST_COROUTINE  DISABLE_HOOK  ENABLE_SEGMENTED_STACK\n支持多个线程poll同一个fd\nHOOK close接口, 正确模拟阻塞式read/write中被close时的行为(close后唤醒等待这个fd的协程)\n优化性能, HOOK的syscall中减少syscall的调用, 使用缓存数据, 避免频繁切换内核态\n改进定时器, 从双红黑树改为单红黑树, 提升性能\n改进定时器, 加快cancel的速度.(方案1.使用侵入式红黑树. 方案2.保存iterator)\nWork Stealing...\n__attribute__ ((always_inline))\n调度器重入不再crash\nHOOK select poll时, 正确处理文件等非socket句柄\n打造类似TLS的CLS(协程局部对象)\nhook __poll, 源syscall使用__libc_poll, 以支持gethostbyname系列函数\n解决并发调用gethostbyname_r时,内部共用同一个udp socket的问题\n用户调用过poll的fd应该设置对应的readable\\writable, 降低io的latency\ngo dispatch(xx) stack(xxx) malloc-free(xx,yy) func;用这种灵活的语法替代go_dispatch这种老旧的方式。\n协程亲缘性\n调度器改成多个(1个默认的全局调度器+多个用户自定义调度器), 去除全局访问点, go增加参数指定调度器.\n以glibc的静、动态链接方式来区分hook实现方法, 而不是libgo库本身.(try:优先尝试dlysm, 失败后再用__xxx的方式)\nScheduler::Stop用于安全退出main函数\n"
        },
        {
          "name": "imgs",
          "type": "tree",
          "content": null
        },
        {
          "name": "libgo",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.7060546875,
          "content": "{\n  \"name\": \"libgo\",\n  \"version\": \"3.2.4\",\n  \"description\": \"C++ coroutine framework.\",\n  \"main\": \"index.js\",\n  \"directories\": {\n    \"test\": \"test\"\n  },\n  \"scripts\": {\n    \"build\": \"mkdir -p build && cd build && cmake .. && make\",\n    \"install\": \"mkdir -p build && cd build && cmake .. && make && make uninstall && make install\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/yyzybb537/libgo.git\"\n  },\n  \"keywords\": [\n    \"libgo\",\n    \"c++\",\n    \"coroutine\"\n  ],\n  \"author\": \"yyz\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/yyzybb537/libgo/issues\"\n  },\n  \"homepage\": \"https://github.com/yyzybb537/libgo#readme\"\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tutorial",
          "type": "tree",
          "content": null
        },
        {
          "name": "vs_proj",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}