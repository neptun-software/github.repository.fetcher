{
  "metadata": {
    "timestamp": 1736565765384,
    "page": 691,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tuyoogame/huatuo",
      "stars": 2317,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0126953125,
          "content": "/huatuo/test\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0517578125,
          "content": "MIT License\n\nCopyright (c) 2022 focus-creative-games\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.6240234375,
          "content": "\n# huatuo\n\n[![license](http://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/focus-creative-games/huatuo/blob/main/LICENSE)\n\n<br/>\n\n![icon](docs/images/logo.png)\n\n<br/>\n\nhuatuo是一个**特性完整、零成本、高性能、低内存**的**近乎完美**的Unity全平台原生c#热更方案。\n\nhuatuo扩充了il2cpp的代码，使它由纯[AOT](https://en.wikipedia.org/wiki/Ahead-of-time_compilation) runtime变成‘AOT+Interpreter’ 混合runtime，进而原生支持动态加载assembly，使得基于il2cpp backend打包的游戏不仅能在Android平台，也能在IOS、Consoles等限制了JIT的平台上高效地以**AOT+interpreter**混合模式执行。从底层彻底支持了热更新。\n\nhuatuo**开创性地实现了 `differential hybrid dll` 技术**====。即可以对AOT dll任意增删改，huatuo会智能地让变化或者新增的类和函数以interpreter模式运行，但未改动的类和函数以AOT方式运行，让热更新的游戏逻辑的运行性能基本达到原生AOT的水平。\n\n## 特性\n\n- 特性完整。 近乎完整实现了[ECMA-335规范](https://www.ecma-international.org/publications-and-standards/standards/ecma-335/)，除了 下文中\"限制和注意事项\" 之外的特性都支持。\n- 零学习和使用成本。 huatuo将纯AOT runtime增强为完整的runtime，使得热更新代码与AOT代码无缝工作。脚本类与AOT类在同一个运行时内，可以随意写继承、反射、多线程(volatile、ThreadStatic、Task、async)之类的代码。不需要额外写任何特殊代码、没有代码生成，也没有什么特殊限制。\n- 执行高效。实现了一个极其高效的寄存器解释器，所有指标都大幅优于其他热更新方案。[性能测试报告](https://xxx/huatuo/performance/benchmark/#性能测试报告)\n- 内存高效。 热更新脚本中定义的类跟普通c#类占用一样的内存空间，远优于其他热更新方案。[内存占用报告](https://xxx/huatuo/performance/benchmark/#内存占用报告)\n- 原生支持hotfix修复AOT部分代码。几乎不增加任何开发和运行开销。\n- **开创性地实现了 `differential hybrid dll` 技术**。即可以将某个热更新dll先AOT形式打包，后面可以对该dll任意增删改，huatuo会智能地让变化或者新增的类和函数以interpreter模式运行，但未改动的类和函数以AOT方式运行。这意味着热更新的游戏逻辑的运行性能将接近原生AOT的水平。\n\n## 工作原理\n\nhuatuo从mono的[hybrid mode execution](https://developpaper.com/new-net-interpreter-mono-has-arrived/)技术中得到启发，为unity的il2cpp之类的AOT runtime额外提供了interpreter模块，将它们由纯AOT运行时改造为\"AOT + Interpreter\"混合运行方式。\n\n![icon](docs/images/architecture.png)\n\n更具体地说，huatuo做了以下几点工作：\n\n- 实现了一个高效的元数据(dll)解析库\n- 改造了元数据管理模块，实现了元数据的动态注册\n- 实现了一个IL指令集到自定义的寄存器指令集的compiler\n- 实现了一个高效的寄存器解释器\n- 额外提供大量的instinct函数，提升解释器性能\n- 提供hotfix AOT的支持\n\n## 与其他流行的c#热更新方案的区别\n\n### 本质比较\n\nhuatuo是原生的c#热更新方案。通俗地说，il2cpp相当于mono的aot模块，huatuo相当于mono的interpreter模块，两者合一成为完整mono。huatuo使得il2cpp变成一个全功能的runtime，原生（即通过System.Reflection.Assembly.Load）支持动态加载dll，从而支持ios平台的热更新。\n\n正因为huatuo是原生runtime级别实现，热更新部分的类型与主工程AOT部分类型是完全等价并且无缝统一的。可以随意调用、继承、反射、多线程，不需要生成代码或者写适配器。\n\n其他热更新方案则是独立vm，与il2cpp的关系本质上相当于mono中嵌入lua的关系。因此类型系统不统一，为了让热更新类型能够继承AOT部分类型，需要写适配器，并且解释器中的类型不能为主工程的类型系统所识别。特性不完整、开发麻烦、运行效率低下。\n\n### 实际使用体验或者特性比较\n\n- huatuo学习和使用成本几乎为零。huatuo让il2cpp变成全功能的runtime，学习和使用成本几乎为零，几乎零侵入性。而其他方案则有大量的坑和需要规避的规则，学习和使用成本，需要对原项目作大量改造。\n- huatuo可以使用所有c#的特性。而其他方案往往有大量的限制。\n- huatuo中可以直接支持使用和继承主工程中的类型。其他方案要写适配器或者生成代码。\n- huatuo中热更新部分元数据与AOT元数据无缝统一。像反射代码能够正常工作的，AOT部分也可以通过标准Reflection接口创建出热更新对象。其他方案做不到。\n- huatuo对多线程支持良好。像多线程、ThreadStatic、async等等特性都是huatuo直接支持，其他方案除了async特性外均难以支持。\n- huatuo中Unity工作流与原生几乎完全相同。huatuo中热更新MonoBehaviour可以直接挂载在热更新资源上，并且正确工作。其他方案不行。\n- huatuo兼容性极高。各种第三方库只要在il2cpp下能工作，在huatuo下也能正常工作。其他方案往往要大量魔改源码。\n- huatuo内存效率极高。huatuo中热更新类型与主工程的AOT类型完全等价，占用一样多的空间。其他方案的同等类型则是假类型，不仅不能被runtime识别，还多占了数倍空间。\n- huatuo执行效率高。huatuo中热更新部分与主工程AOT部分交互属于il2cpp内部交互，效率极高。而其他方案则是独立虚拟机与il2cpp之间的效率，不仅交互麻烦还效率低下。\n\n## 文档\n\n- [文档站](https://xxx/)，**推荐使用**\n- [FAQ](https://xxx/huatuo/faq/)\n- [限制和注意事项](https://xxx/huatuo/performance/limit/)\n- [示例项目](https://github.com/focus-creative-games/huatuo_trial)\n- [==>致谢名单<==](https://xxx/huatuo/donate/)\n\n## 稳定性状况\n\n=== **庆祝于 2021.6.7 第一款使用huatuo的android和iOS双端休闲游戏正式上线** ===，7月份还有几款中重游戏上线或者对外测试。\n\n技术评估上目前稳定性处于Beta版本。由于huatuo技术原理的先进性，bug本质上不多，稳定得非常快。\n\n- 目前PC、Android、iOS 已跑通所有单元测试，可稳定体验使用。\n- 测试了游戏常用库和框架的兼容性，兼容性良好。只要能在il2cpp backend下工作的库都可以在huatuo下正常工作。甚至那些与il2cpp因为AOT问题不兼容的库，现在因为huatuo对il2cpp的能力扩充，反而可以正常运行了。具体参见 [兼容性报告](https://xxx/huatuo/performance/compatible/)\n- 已经有几十个大中型游戏项目较完整地接入huatuo，并且其中一些在紧锣密鼓作上线前测试。具体参见收集的一些 [完整接入的商业项目列表](https://xxx/huatuo/ref_project/)\n\n## RoadMap\n\nhuatuo虽然与il2cpp相关，但绝大多数核心代码独立于il2cpp，很容易移植（预计一个月）到其他不支持AOT+Interpreter的CLR平台。无论unity如何版本变迁，哪怕废弃了il2cpp改用.net 6+，huatuo会持续跟进，稳定地提供跨平台的CLR热更新服务，直至某天.net官方直接支持AOT+Interpreter，则huatuo完成其历史使命。\n\n- 支持Unity 2019、2020和2021系列版本 (2022.6 -)\n- 支持32位 (2022.6 - 2022.7)\n- 指令优化，编译后指令数减少到原来1/4-1/2，基础指令和大多数对象模型指令有100%-300%的性能提升。 (2022.7 -)\n- 支持增量式gc (2022.8 -)\n\n## license\n\nHuatuo is licensed under the [MIT](https://github.com/xxx/huatuo/blob/main/LICENSE) license\n"
        },
        {
          "name": "README_en.md",
          "type": "blob",
          "size": 7.994140625,
          "content": "#huatuo\n\n[![license](http://img.shields.io/badge/license-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n<br/>\n\n![icon](docs/images/logo.png)\n\n<br/>\n\nHuatuo is a near-perfect C# hot update solution with complete features, zero cost, high performance, and low memory.\n\nhuatuo provides interpreter modules for pure AOT CLRs such as il2cpp, so that apps based on them can efficiently use the **AOT+interpreter** hybrid mode not only on the Android platform, but also on IOS, Consoles and other platforms that limit JIT. Execute, from the bottom to fully support the hot update.\n\n## Features\n\n- Features complete. Nearly complete implementation of the [ECMA-335 specification](https://www.ecma-international.org/publications-and-standards/standards/ecma-335/), except for the features below \"Limitations and Notes\" are supported.\n- Zero learning and usage costs. huatuo enhances the pure AOT runtime into a full CLR runtime, making hot update code work seamlessly with AOT code. Script classes are in the same runtime as AOT classes, even code like reflection, multi-threading (volatile, ThreadStatic, Task, async) works fine. There is no need to write any special code, no code generation, and no special restrictions.\n- Execute efficiently. Implemented an extremely efficient register interpreter that outperformed other hot update schemes by a large margin by all metrics. [Performance test report](https://xxx.github.io/huatuo/performance/benchmark/)\n- Memory efficient. The classes defined in the hot update script occupy the same memory space as ordinary C# classes, which is far superior to other hot update solutions. [Memory usage report](https://xxx.github.io/huatuo/performance/benchmark/#%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E6%8A%A5%E5%91%8A)\n- Native support for hotfix to repair part of AOT code. Adds almost no development and runtime overhead.\n\n## working principle\n\nInspired by mono's [Hybrid mode execution](https://developpaper.com/new-net-interpreter-mono-has-arrived/) technology, huatuo provides additional interpreter modules for AOT runtimes such as unity's il2cpp , transforming them from pure AOT runtime to \"AOT + Interpreter\" hybrid operation mode, which completely supports hot update from the bottom.\n\n![icon](docs/images/architecture.png)\n\nMore specifically, huatuo does the following:\n\n- Implemented an efficient metadata (dll) parsing library\n- Modified the metadata management module of il2cpp to realize the dynamic registration of metadata\n- Implemented a compiler from an IL instruction set to a custom register instruction set\n- Implemented an efficient register interpreter\n- Provide a large number of instinct functions additionally to improve the performance of the interpreter\n- Provide hotfix AOT support (in progress)\n\n## Documentation\n\n- ~~[wiki](https://github.com/xxx/huatuo/wiki/home)~~\n- [Document](https://xxx.github.io/)，**recommend**\n- [FAQ](https://xxx.github.io/huatuo/faq/)\n- [Best Practices](https://xxx.github.io/huatuo/start_up/best_practices/)\n- [Source Structure and Trace Debugging](https://xxx.github.io/huatuo/source_inspect/)\n- [Sample Project](https://github.com/xxx/huatuo_trial)\n- [==>Acknowledgments<==](https://xxx.github.io/huatuo/donate/)\n\n## Stability status\n\nIn terms of technical evaluation, the current stability is between the Alpha version and the Beta version.\n\n- Completed unit tests for most instructions. Only a few instructions such as calli and initblk that are difficult to construct directly in C# do not have corresponding unit tests added.\n- Completing various syntax tests against the c# specification.\n- Tested the compatibility of common game libraries and frameworks, and the compatibility is good. See [Compatibility Report](docs/compatible.md)\n- [luban](https://github.com/xxx/luban) config can be loaded correctly\n- Can correctly run lightweight games like [2048](https://github.com/dgkanatsios/2048)\n- Can run small games like [StarForce](https://github.com/EllanJiang/StarForce)\n- Helping some small, medium and large (there is a heavy MMORPG project) to migrate and test huatuo. It is expected that large-scale game projects such as MMORPG can be successfully run this month.\n\n## Limitations and Notes\n\n**Features not included in the restrictions are all supported by huatuo**. Please stop asking if huatuo supports a certain feature.\n\n- Support 5.x, 2017-2022 full series of versions, but not every minor version. For details, see [Currently Supported Unity Versions](https://xxx.github.io/huatuo/support_versions/).\n- Unable to create instances of **hot update non-enumeration value types** of ordinary AOT generics (**delegate, Nullable, arrays (including multi-dimensional) are not limited, hot update generics are also completely unlimited**) instance of the type. For example, List&lt;HotUpdateValueType&gt; is not supported but List&lt;int&gt;, List&lt;HotUpdateClass&gt; and List&lt;HotUpdateEnum&gt; are supported. For specific reasons, see [AOT generic limitation and principle introduction](https://xxx.github.io/huatuo/performance/generic_limit/). This will be more completely resolved in the July version, and there will be no restrictions after that.\n- The default async task that returns **custom value type** is temporarily not supported, and native value types such as int and enumeration and class types are not restricted. The reason is that the compiler will generate the generic class instantiation of AsyncTaskMethodBuilder&lt;T&gt; for async by default. If you use custom Task and AsyncTaskMethodBuilder like ETask, there are no restrictions. This limitation of native async will be resolved in subsequent versions.\n- **Note to use link.xml or code reference to avoid Unity cutting code. Avoid the error that the function can be called during the development period, but the function cannot be found after the release. We will provide default templates in the future.\n- BeginInvoke and EndInvoke of delegate are not supported. It just doesn't feel necessary to do it.\n- Due to the limitation of Unity's resource management mechanism (the script uuid has been determined during packaging, and the GUID corresponding to the hot update script cannot be found), the hot update MonoBehaviour needs to be compiled into an independent dll and mounted on the resource to be correctly reversed change\n- Incremental gc is not supported yet. Due to the tight time, it is too late to carefully deal with the memory barrier details of incremental gc. This issue will be resolved soon.\n- Temporarily does not support C# source code debugging of the real machine after packaging, but can print the error stack (only accurate to the function), and can also track and debug in the Debug project generated by Build. You can use the usual mono debugging for debugging during the development period under the Editor.\n\n\n\n## RoadMap\n\nAlthough huatuo is related to il2cpp, most of the core code is independent of il2cpp and can be easily ported (expected one month) to other CLR platforms that do not support AOT+Interpreter. No matter how the version of Unity changes, even if il2cpp is abandoned and .net 6+ is used, huatuo will continue to follow up and stably provide cross-platform CLR hot update service until one day when .net officially supports AOT+Interpreter, huatuo will complete its historical mission.\n\n- Continue to fix bugs to make a medium and large game work properly (2022.4)\n- Continue to follow up the version update of Unity and support more Unity versions. See [Currently Supported Unity Versions](https://xxx.github.io/huatuo/support_versions/)\n- Support hotfix bug in AOT part (2022.6)\n- Remove most common AOT generic class restrictions (2022.6)\n- Support incremental gc. (2022.6)\n- Instruction optimization, the number of instructions after compilation is reduced to 1/4-1/2, and the performance of basic instructions and most object model instructions is improved by 100%-300%. (2022.6 preview version)\n- Support for extern functions (2022.7)\n- Other memory and efficiency optimizations, and code refactoring\n- **===godot engine support ===**(2022.12)\n\n## license\n\nHuatuo is licensed under the [MIT](https://github.com/xxx/huatuo/blob/main/LICENSE) license\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "huatuo",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}