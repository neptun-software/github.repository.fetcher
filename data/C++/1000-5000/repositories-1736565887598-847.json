{
  "metadata": {
    "timestamp": 1736565887598,
    "page": 847,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ThingPulse/esp8266-oled-ssd1306",
      "stars": 2051,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2900390625,
          "content": "# This file is for unifying the coding style for different editors and IDEs\n# editorconfig.org\n\nroot = true\n\n[*]\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\nindent_size = 2\nmax_line_length = 120\ncurly_bracket_next_line = false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0126953125,
          "content": ".vscode\n.pio\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.123046875,
          "content": "set(COMPONENT_ADD_INCLUDEDIRS src)\nset(COMPONENT_PRIV_REQUIRES arduino-esp32)\nset(COMPONENT_SRCDIRS src)\nregister_component()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.8330078125,
          "content": "# Contributing to ThingPulse OLED SSD1306\n\n:+1::tada: First off, thanks for taking the time to contribute! :tada::+1:\n\nThe following is a set of guidelines for contributing to the ThingPulse OLED SSD1306 library on GitHub. These are just guidelines, not rules, use your best judgment and feel free to propose changes to this document in a pull request.\n\nIt is appreciated if you raise an issue _before_ you start changing the code, discussing the proposed change; emphasizing that you are proposing to develop the patch yourself, and outlining the strategy for implementation. This type of discussion is what we should be doing on the issues list and it is better to do this before or in parallel to developing the patch rather than having \"you should have done it this way\" type of feedback on the PR itself.\n\n### Table Of Contents\n* [General remarks](#general-remarks)\n* [Writing Documentation](#writing-documentation)\n* [Working with Git and GitHub](#working-with-git-and-github)\n  * [General flow](#general-flow)\n  * [Keeping your fork in sync](#keeping-your-fork-in-sync)\n  * [Commit messages](#commit-messages)\n\n## General remarks\nWe are a friendly and welcoming community and look forward to your contributions. Once your contribution is integrated into this repository we feel responsible for it. Therefore, be prepared for constructive feedback. Before we merge anything we need to ensure that it fits in and is consistent with the rest of code.\nIf you made something really cool but won't spend the time to integrate it into this upstream project please still share it in your fork on GitHub. If you mention it in an issue we'll take a look at it anyway.\n\n## Writing Documentation\nThingPulse maintains documentation for its products at [https://github.com/thingpulse/docs/](https://github.com/thingpulse/docs/). If you contribute features for this project that require altering the respective product guide then we ask you to prepare a pull request with the necessary documentation changes as well.\n\n## Working with Git and GitHub\n\nAvoid intermediate merge commits. [Rebase](https://www.atlassian.com/git/tutorials/merging-vs-rebasing) your feature branch onto `master` to pull updates and verify your local changes against them before placing the pull request.\n\n### General flow\n1. [Fork](https://help.github.com/articles/fork-a-repo) this repository on GitHub.\n1. [Create a branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/#creating-a-branch) in your fork on GitHub **based on the `master` branch**.\n1. Clone the fork on your machine with `git clone https://github.com/<your-account>/<esp8266-oled-ssd1306>.git`\n1. `cd <weather-station-fork>` then run `git remote add upstream https://github.com/ThingPulse/esp8266-oled-ssd1306`\n1. `git checkout <branch-name>`\n1. Make changes to the code base and commit them using e.g. `git commit -a -m 'Look ma, I did it'`\n1. When you're done bring your fork up-to-date with the upstream repo ([see below](#keeping-your-fork-in-sync)). Then rebase your branch on `master` running `git rebase master`.\n1. `git push`\n1. [Create a pull request](https://help.github.com/articles/creating-a-pull-request/) (PR) on GitHub.\n\nThis is just one way of doing things. If you're proficient in Git matters you're free to choose your own. If you want to read more then the [GitHub chapter in the Git book](http://git-scm.com/book/en/v2/GitHub-Contributing-to-a-Project#The-GitHub-Flow) is a way to start. [GitHub's own documentation](https://help.github.com/categories/collaborating/) contains a wealth of information as well.\n\n### Keeping your fork in sync\nYou need to sync your fork with the upstream repository from time to time, latest before you rebase (see flow above).\n\n1. `git fetch upstream`\n1. `git checkout master`\n1. `git merge upstream/master`\n\n### Commit messages\n\nFrom: [http://git-scm.com/book/ch5-2.html](http://git-scm.com/book/ch5-2.html)\n<pre>\nShort (50 chars or less) summary of changes\n\nMore detailed explanatory text, if necessary.  Wrap it to about 72\ncharacters or so.  In some contexts, the first line is treated as the\nsubject of an email and the rest of the text as the body.  The blank\nline separating the summary from the body is critical (unless you omit\nthe body entirely); tools like rebase can get confused if you run the\ntwo together.\n\nFurther paragraphs come after blank lines.\n\n- Bullet points are okay, too\n- Typically a hyphen or asterisk is used for the bullet, preceded by a\n   single space, with blank lines in between, but conventions vary here\n</pre>\n\nDon't forget to [reference affected issues](https://help.github.com/articles/closing-issues-via-commit-messages/) in the commit message to have them closed automatically on GitHub.\n\n[Amend](https://help.github.com/articles/changing-a-commit-message/) your commit messages if necessary to make sure what the world sees on GitHub is as expressive and meaningful as possible.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.498046875,
          "content": "# ThingPulse OLED SSD1306 (ESP8266/ESP32/Mbed-OS)\n\n[![PlatformIO Registry](https://badges.registry.platformio.org/packages/thingpulse/library/ESP8266%20and%20ESP32%20OLED%20driver%20for%20SSD1306%20displays.svg)](https://registry.platformio.org/libraries/thingpulse/ESP8266%20and%20ESP32%20OLED%20driver%20for%20SSD1306%20displays)\n[![Build Status](https://github.com/ThingPulse/esp8266-oled-ssd1306/actions/workflows/main.yml/badge.svg)](https://github.com/ThingPulse/esp8266-oled-ssd1306/actions)\n\nThis is a driver for SSD1306 and SH1106 128x64, 128x32, 64x48 and 64x32 OLED displays running on the Arduino/ESP8266 & ESP32 and mbed-os platforms.\nCan be used with either the I2C or SPI version of the display.\n\nThis library drives the OLED display included in the [ThingPulse IoT starter kit](https://thingpulse.com/product/esp8266-iot-electronics-starter-kit-weatherstation-planespotter-worldclock/) aka classic kit aka weather station kit.\n\n[![ThingPulse ESP8266 WeatherStation Classic Kit](https://github.com/ThingPulse/esp8266-weather-station/blob/master/resources/ThingPulse-ESP8266-Weather-Station.jpeg?raw=true)](https://thingpulse.com/product/esp8266-iot-electronics-starter-kit-weatherstation-planespotter-worldclock/)\n\nYou can either download this library as a zip file and unpack it to your Arduino/libraries folder or find it in the Arduino library manager under \"ESP8266 and ESP32 Oled Driver for SSD1306 display\". For mbed-os a copy of the files are available as an mbed-os library.\n\nIt is also available as a [PlatformIO library](https://platformio.org/lib/show/2978/ESP8266%20and%20ESP32%20OLED%20driver%20for%20SSD1306%20displays/examples). Just execute the following command:\n```\nplatformio lib install 2978\n```\n\n## Service level promise\n\n<table><tr><td><img src=\"https://thingpulse.com/assets/ThingPulse-open-source-prime.png\" width=\"150\">\n</td><td>This is a ThingPulse <em>prime</em> project. See our <a href=\"https://thingpulse.com/about/open-source-commitment/\">open-source commitment declaration</a> for what this means.</td></tr></table>\n\n## Credits\n\nThis library has initially been written by [Daniel Eichhorn](https://github.com/squix78). Many thanks go to [Fabrice Weinberg](https://github.com/FWeinb) for optimizing and refactoring many aspects of the library. Also many thanks to the many committers who helped to add new features and who fixed many bugs. Mbed-OS support and other improvements were contributed by [Helmut Tschemernjak](https://github.com/helmut64).\n\nThe init sequence for the SSD1306 was inspired by Adafruit's library for the same display.\n\n## mbed-os\nThis library has been adopted to support the ARM mbed-os environment. A copy of this library is available in mbed-os under the name OLED_SSD1306 by Helmut Tschemernjak. An alternate installation option is to copy the following files into your mbed-os project: OLEDDisplay.cpp OLEDDisplay.h OLEDDisplayFonts.h OLEDDisplayUi.cpp OLEDDisplayUi.h SSD1306I2C.h\n\n## Usage\n\nCheck out the examples folder for a few comprehensive demonstrations how to use the library. Also check out the [ESP8266 Weather Station](https://github.com/ThingPulse/esp8266-weather-station) library which uses the OLED library to display beautiful weather information.\n\n## Upgrade\n\nThe API changed a lot with the 3.0 release. If you were using this library with older versions please have a look at the [Upgrade Guide](UPGRADE-3.0.md).\n\nGoing from 3.x version to 4.0 a lot of internals changed and compatibility for more displays was added. Please read the [Upgrade Guide](UPGRADE-4.0.md).\n\n## Features\n\n* Draw pixels at given coordinates\n* Draw lines from given coordinates to given coordinates\n* Draw or fill a rectangle with given dimensions\n* Draw Text at given coordinates:\n * Define Alignment: Left, Right and Center\n * Set the Fontface you want to use (see section Fonts below)\n * Limit the width of the text by an amount of pixels. Before this widths will be reached, the renderer will wrap the text to a new line if possible\n* Display content in automatically side scrolling carousel\n * Define transition cycles\n * Define how long one frame will be displayed\n * Draw the different frames in callback methods\n * One indicator per frame will be automatically displayed. The active frame will be displayed from inactive once\n\n## Fonts\n\nFonts are defined in a proprietary but open format. You can create new font files by choosing from a given list\nof open sourced Fonts from this web app: http://oleddisplay.squix.ch\nChoose the font family, style and size, check the preview image and if you like what you see click the \"Create\" button. This will create the font array in a text area form where you can copy and paste it into a new or existing header file.\n\n\n![FontTool](https://github.com/squix78/esp8266-oled-ssd1306/raw/master/resources/FontTool.png)\n\n## Hardware Abstraction\n\nThe library supports different protocols to access the OLED display. Currently there is support for I2C using the built in Wire.h library, I2C by using the much faster [BRZO I2C library](https://github.com/pasko-zh/brzo_i2c) written in assembler and it also supports displays which come with the SPI interface.\n\n### I2C with Wire.h\n\n```C++\n#include <Wire.h>\n#include \"SSD1306Wire.h\"\n\n// for 128x64 displays:\nSSD1306Wire display(0x3c, SDA, SCL);  // ADDRESS, SDA, SCL\n// for 128x32 displays:\n// SSD1306Wire display(0x3c, SDA, SCL, GEOMETRY_128_32);  // ADDRESS, SDA, SCL, GEOMETRY_128_32 (or 128_64)\n// for using 2nd Hardware I2C (if available)\n// SSD1306Wire(0x3c, SDA, SCL, GEOMETRY_128_64, I2C_TWO); //default value is I2C_ONE if not mentioned\n// By default SD1306Wire set I2C frequency to 700000, you can use set either another frequency or skip setting the frequency by providing -1 value\n// SSD1306Wire(0x3c, SDA, SCL, GEOMETRY_128_64, I2C_ONE, 400000); //set I2C frequency to 400kHz\n// SSD1306Wire(0x3c, SDA, SCL, GEOMETRY_128_64, I2C_ONE, -1); //skip setting the I2C bus frequency\n```\n\nfor a SH1106:\n```C++\n#include <Wire.h>\n#include \"SH1106Wire.h\"\n\nSH1106Wire display(0x3c, SDA, SCL);  // ADDRESS, SDA, SCL\n// By default SH1106Wire set I2C frequency to 700000, you can use set either another frequency or skip setting the frequency by providing -1 value\n// SH1106Wire(0x3c, SDA, SCL, GEOMETRY_128_64, I2C_ONE, 400000); //set I2C frequency to 400kHz\n// SH1106Wire(0x3c, SDA, SCL, GEOMETRY_128_64, I2C_ONE, -1); //skip setting the I2C bus frequency\n```\n\n### I2C with brzo_i2c\n\n```C++\n#include <brzo_i2c.h>\n#include \"SSD1306Brzo.h\"\n\nSSD1306Brzo display(0x3c, SDA, SCL);  // ADDRESS, SDA, SCL\n```\nor for the SH1106:\n```C++\n#include <brzo_i2c.h>\n#include \"SH1106Brzo.h\"\n\nSH1106Brzo display(0x3c, SDA, SCL);  // ADDRESS, SDA, SCL\n```\n\n### SPI\n\n```C++\n#include <SPI.h>\n#include \"SSD1306Spi.h\"\n\nSSD1306Spi display(D0, D2, D8);  // RES, DC, CS\n```\nor for the SH1106:\n```C++\n#include <SPI.h>\n#include \"SH1106Spi.h\"\n\nSH1106Spi display(D0, D2, CS);  // RES, DC, CS\n```\n\nIn case the CS pin is not used (hard wired to ground), pass CS as -1.\n\n## API\n\n### Display Control\n\n```C++\n// Initialize the display\nvoid init();\n\n// Free the memory used by the display\nvoid end();\n\n// Cycle through the initialization\nvoid resetDisplay(void);\n\n// Connect again to the display through I2C\nvoid reconnect(void);\n\n// Turn the display on\nvoid displayOn(void);\n\n// Turn the display offs\nvoid displayOff(void);\n\n// Clear the local pixel buffer\nvoid clear(void);\n\n// Write the buffer to the display memory\nvoid display(void);\n\n// Inverted display mode\nvoid invertDisplay(void);\n\n// Normal display mode\nvoid normalDisplay(void);\n\n// Set display contrast\n// really low brightness & contrast: contrast = 10, precharge = 5, comdetect = 0\n// normal brightness & contrast:  contrast = 100\nvoid setContrast(uint8_t contrast, uint8_t precharge = 241, uint8_t comdetect = 64);\n\n// Convenience method to access\nvoid setBrightness(uint8_t);\n\n// Turn the display upside down\nvoid flipScreenVertically();\n\n// Draw the screen mirrored\nvoid mirrorScreen();\n```\n\n## Pixel drawing\n\n```C++\n\n/* Drawing functions */\n// Sets the color of all pixel operations\n// color : BLACK, WHITE, INVERSE\nvoid setColor(OLEDDISPLAY_COLOR color);\n\n// Draw a pixel at given position\nvoid setPixel(int16_t x, int16_t y);\n\n// Draw a line from position 0 to position 1\nvoid drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1);\n\n// Draw the border of a rectangle at the given location\nvoid drawRect(int16_t x, int16_t y, int16_t width, int16_t height);\n\n// Fill the rectangle\nvoid fillRect(int16_t x, int16_t y, int16_t width, int16_t height);\n\n// Draw the border of a circle\nvoid drawCircle(int16_t x, int16_t y, int16_t radius);\n\n// Fill circle\nvoid fillCircle(int16_t x, int16_t y, int16_t radius);\n\n// Draw an empty triangle i.e. only the outline\nvoid drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2);\n\n// Draw a solid triangle i.e. filled\nvoid fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2);\n\n// Draw a line horizontally\nvoid drawHorizontalLine(int16_t x, int16_t y, int16_t length);\n\n// Draw a lin vertically\nvoid drawVerticalLine(int16_t x, int16_t y, int16_t length);\n\n// Draws a rounded progress bar with the outer dimensions given by width and height. Progress is\n// a unsigned byte value between 0 and 100\nvoid drawProgressBar(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t progress);\n\n// Draw a bitmap in the internal image format\nvoid drawFastImage(int16_t x, int16_t y, int16_t width, int16_t height, const uint8_t *image);\n\n// Draw a XBM\nvoid drawXbm(int16_t x, int16_t y, int16_t width, int16_t height, const uint8_t *xbm);\n```\n\n## Text operations\n\n``` C++\n// Draws a string at the given location, returns how many chars have been written\nuint16_t drawString(int16_t x, int16_t y, const String &text);\n\n// Draws a String with a maximum width at the given location.\n// If the given String is wider than the specified width\n// The text will be wrapped to the next line at a space or dash\n// returns 0 if everything fits on the screen or the numbers of characters in the\n// first line if not\nuint16_t drawStringMaxWidth(int16_t x, int16_t y, uint16_t maxLineWidth, const String &text);\n\n// Returns the width of the const char* with the current\n// font settings\nuint16_t getStringWidth(const char* text, uint16_t length, bool utf8 = false);\n\n// Convencience method for the const char version\nuint16_t getStringWidth(const String &text);\n\n// Specifies relative to which anchor point\n// the text is rendered. Available constants:\n// TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER_BOTH\nvoid setTextAlignment(OLEDDISPLAY_TEXT_ALIGNMENT textAlignment);\n\n// Sets the current font. Available default fonts\n// ArialMT_Plain_10, ArialMT_Plain_16, ArialMT_Plain_24\n// Or create one with the font tool at http://oleddisplay.squix.ch\nvoid setFont(const uint8_t* fontData);\n```\n\n## Arduino `Print` functionality\n\nBecause this class has been \"derived\" from Arduino's `Print` class, you can use the functions it provides. In plain language, this means that you can use `print`, `println` and `printf` to the display. Internally, a buffer holds the text that was printed to the display previously (that would still fit on the display) and every time you print something, this buffer is put on the screen, using the functions from the previous section.\n\nWhat that means is that printing using `print` and \"manually\" putting things on the display are somewhat mutually exclusive: as soon as you print, everything that was on the display already is gone and only what you put there before with `print`, `println` or `printf` remains. Still, using `print` is a very simple way to put something on the display quickly.\n\nOne extra function is provided: `cls()`\n```cpp\n// cls() will clear the display immediately and empty the logBuffer, meaning\n// the next print statement will print at the top of the display again.\n// cls() should not be confused with clear(), which only clears the internal\n// graphics buffer, which can then be shown on the display with display().\nvoid cls();\n\n> _Note that printing to the display, contrary to what you might expect, does not wrap your lines, so everything on a line that doesn't fit on the screen is cut off._\n```\n\n&nbsp;\n\n<hr>\n\n## Ui Library (OLEDDisplayUi)\n\nThe Ui Library is used to provide a basic set of user interface elements called `Frames` and `Overlays`. A `Frame` is used to provide\ninformation to the user. The default behaviour is to display a `Frame` for a defined time and than move to the next `Frame`. The library also\nprovides an `Indicator` element that will be updated accordingly. An `Overlay` on the other hand is a piece of information (e.g. a clock) that\nis always displayed at the same position.\n\n```C++\n/**\n * Initialise the display\n */\nvoid init();\n\n/**\n * Configure the internal used target FPS\n */\nvoid setTargetFPS(uint8_t fps);\n\n/**\n * Enable automatic transition to next frame after the some time can be configured with\n * `setTimePerFrame` and `setTimePerTransition`.\n */\nvoid enableAutoTransition();\n\n/**\n * Disable automatic transition to next frame.\n */\nvoid disableAutoTransition();\n\n/**\n * Set the direction if the automatic transitioning\n */\nvoid setAutoTransitionForwards();\nvoid setAutoTransitionBackwards();\n\n/**\n *  Set the approx. time a frame is displayed\n */\nvoid setTimePerFrame(uint16_t time);\n\n/**\n * Set the approx. time a transition will take\n */\nvoid setTimePerTransition(uint16_t time);\n\n/**\n * Draw the indicator.\n * This is the default state for all frames if\n * the indicator was hidden on the previous frame\n * it will be slided in.\n */\nvoid enableIndicator();\n\n/**\n * Don't draw the indicator.\n * This will slide out the indicator\n * when transitioning to the next frame.\n */\nvoid disableIndicator();\n\n/**\n * Enable drawing of all indicators.\n */\nvoid enableAllIndicators();\n\n/**\n * Disable drawing of all indicators.\n */\nvoid disableAllIndicators();\n\n/**\n * Set the position of the indicator bar.\n */\nvoid setIndicatorPosition(IndicatorPosition pos);\n\n/**\n * Set the direction of the indicator bar. Defining the order of frames ASCENDING / DESCENDING\n */\nvoid setIndicatorDirection(IndicatorDirection dir);\n\n/**\n * Set the symbol to indicate an active frame in the indicator bar.\n */\nvoid setActiveSymbol(const uint8_t* symbol);\n\n/**\n * Set the symbol to indicate an inactive frame in the indicator bar.\n */\nvoid setInactiveSymbol(const uint8_t* symbol);\n\n/**\n * Configure what animation is used to transition from one frame to another\n */\nvoid setFrameAnimation(AnimationDirection dir);\n\n/**\n * Add frame drawing functions\n */\nvoid setFrames(FrameCallback* frameFunctions, uint8_t frameCount);\n\n/**\n * Add overlays drawing functions that are draw independent of the Frames\n */\nvoid setOverlays(OverlayCallback* overlayFunctions, uint8_t overlayCount);\n\n/**\n * Set the function that will draw each step\n * in the loading animation\n */\nvoid setLoadingDrawFunction(LoadingDrawFunction loadingDrawFunction);\n\n/**\n * Run the loading process\n */\nvoid runLoadingProcess(LoadingStage* stages, uint8_t stagesCount);\n\n// Manual control\nvoid nextFrame();\nvoid previousFrame();\n\n/**\n * Switch without transition to frame `frame`.\n */\nvoid switchToFrame(uint8_t frame);\n\n/**\n * Transition to frame `frame`. When the `frame` number is bigger than the current\n * frame the forward animation will be used, otherwise the backwards animation is used.\n */\nvoid transitionToFrame(uint8_t frame);\n\n// State Info\nOLEDDisplayUiState* getUiState();\n\n// This needs to be called in the main loop\n// the returned value is the remaining time (in ms)\n// you have to draw after drawing to keep the frame budget.\nint8_t update();\n```\n\n## Creating and using XBM bitmaps\n\nIf you want to display your own images with this library, the best way to do this is using a bitmap.\n\nThere are two options to convert an image to a compatible bitmap:\n1. **Using Gimp.**\n   In this case exporting the bitmap in an 1-bit XBM format is sufficient.\n2. **Using a converter website.**\n   You could also use online converter services like e.g. [https://javl.github.io/image2cpp/](https://javl.github.io/image2cpp/). The uploaded image should have the same dimension as the screen (e.g. 128x64). The following output settings should be set:\n    - Draw Mode: Horizontal - 1 bit per pixel\n    - Swap bits in byte: swap checkbox should be checked.\n\nThe resulting bitmap can be put into a header file:\n```C++\nconst unsigned char epd_example [] PROGMEM = {\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ... \n    ...\n};\n```\n\nSubsequently, it can be used like this:\n```C++\ndisplay.clear();\ndisplay.drawXbm(0, 0, 128, 64, epd_example); // assuming your bitmap is 128x64\ndisplay.display();\n```\n\n## Example: SSD1306Demo\n\n### Frame 1\n![DemoFrame1](https://github.com/squix78/esp8266-oled-ssd1306/raw/master/resources/DemoFrame1.jpg)\n\nThis frame shows three things:\n * How to draw an XMB image\n * How to draw static text which is not moved by the frame transition\n * The active/inactive frame indicators\n\n### Frame 2\n![DemoFrame2](https://github.com/squix78/esp8266-oled-ssd1306/raw/master/resources/DemoFrame2.jpg)\n\nCurrently there are one fontface with three sizes included in the library: Arial 10, 16 and 24. Once the converter is published you will be able to convert any ttf font into the used format.\n\n### Frame 3\n\n![DemoFrame3](https://github.com/squix78/esp8266-oled-ssd1306/raw/master/resources/DemoFrame3.jpg)\n\nThis frame demonstrates the text alignment. The coordinates in the frame show relative to which position the texts have been rendered.\n\n### Frame 4\n\n![DemoFrame4](https://github.com/squix78/esp8266-oled-ssd1306/raw/master/resources/DemoFrame4.jpg)\n\nThis shows how to use define a maximum width after which the driver automatically wraps a word to the next line. This comes in very handy if you have longer texts to display.\n\n### SPI version\n\n![SPIVersion](https://github.com/neptune2/esp8266-oled-ssd1306/raw/master/resources/SPI_version.jpg)\n\nThis shows the code working on the SPI version of the display. See demo code for ESP8266 pins used.\n\n## Selection of projects using this library\n\n * [QRCode ESP8266](https://github.com/anunpanya/ESP8266_QRcode) (by @anunpanya)\n * [Scan I2C](https://github.com/hallard/Scan-I2C-WiFi) (by @hallard)\n * [ThingPulse Weather Station](https://github.com/ThingPulse/esp8266-weather-station)\n * [Meshtastic](https://www.meshtastic.org/) - an open source GPS communicator mesh radio\n * [OpenMQTTGateway](https://docs.openmqttgateway.com) - OpenMQTTGateway aims to unify various technologies and protocols into a single firmware. This reduces the need for multiple physical bridges and streamlines diverse technologies under the widely-used MQTT protocol.\n * [OpenAstroTracker](https://openastrotech.com) - Open source hardware and software for Astrophotography. The firmware for the mounts supports displays and uses this library to drive them.\n * Yours?\n"
        },
        {
          "name": "README_GEOMETRY_64_48.md",
          "type": "blob",
          "size": 0.44140625,
          "content": "# GEOMETRY_64_48\n\nThe 64x48 geometry setting are working with the `Wire.h` and `brzo_i2c` libraries.\n\nI've tested it successfully with a WEMOS D1 mini Lite and a WEMOS OLED shield\n\nInitialization code:\n\n- Wire\n```\n#include <Wire.h>\n#include <SSD1306Wire.h>\nSSD1306Wire display(0x3c, D2, D1, GEOMETRY_64_48 ); // WEMOS OLED shield\n```\n\n- BRZO i2c\n```\n#include <SSD1306Brzo.h>\nSSD1306Brzo display(0x3c, D2, D1, GEOMETRY_64_48 ); // WEMOS OLED Shield\n```\n"
        },
        {
          "name": "UPGRADE-3.0.md",
          "type": "blob",
          "size": 4.5732421875,
          "content": "# Upgrade from 2.0 to 3.0\n\nWhile developing version 3.0 we made some breaking changes to the public\nAPI of this library. This document will help you update your code to work with\nversion 3.0\n\n## Font Definitions\n\nTo get better performance and a smaller font definition format, we change the memory\nlayout of the font definition format. If you are using custom fonts not included in\nthis library we updated the font generator [here](http://oleddisplay.squix.ch/#/home).\nPlease update your fonts to be working with 3.0 by selecting the respective version in the dropdown.\n\n\n## Architectural Changes\n\nTo become a more versatile library for the SSD1306 chipset we abstracted the\nhardware connection into subclasses of the base display class now called `OLEDDisplay`.\nThis library is currently shipping with three implementations:\n\n  * `SSD1306Wire` implementing the I2C protocol using the Wire Library.    \n  * `SSD1306Brzo` implementing the I2C protocol using the faster [`brzo_i2c`](https://github.com/pasko-zh/brzo_i2c) library.\n  * `SSD1306Spi` implementing the SPI protocol.\n\nTo keep backwards compatiblity with the old API `SSD1306` is an alias of `SSD1306Wire`.\nIf you are not using the UI components you don't have to change anything to keep your code working.\n\n## Name Changes\n\n[Naming things is hard](http://martinfowler.com/bliki/TwoHardThings.html), to better reflect our intention with this library\nwe changed the name of the base class to `OLEDDisplay` and the UI library accordingly to `OLEDDisplayUi`.\nAs a consequence the type definitions of all frame and overlay related functions changed.\nThis means that you have to update all your frame drawing callbacks from:\n\n```c\nbool frame1(SSD1306 *display,  SSD1306UiState* state, int x, int y);\n```\n\ntoo\n\n```c\nvoid frame1(OLEDDisplay *display,  OLEDDisplayUiState* state, int16_t x, int16_t y);\n```\n\nAnd your overlay drawing functions from:\n\n```c\nbool overlay1(SSD1306 *display,  SSD1306UiState* state);\n```\n\ntoo\n\n```c\nvoid overlay1(OLEDDisplay *display,  OLEDDisplayUiState* state);\n```\n\n## New Features\n\n### Loading Animation\n\nWhile using this library ourself we noticed a pattern emerging. We want to drawing\na loading progress while connecting to WiFi and updating weather data etc.\n\nThe simplest thing was to add the function `drawProgressBar(x, y, width,  height, progress)`\n,where `progress` is between `0` and `100`, right to the `OLEDDisplay` class.\n\nBut we didn't stop there. We added a new feature to the `OLEDDisplayUi` called `LoadingStages`.\nYou can define your loading process like this:\n\n```c++\nLoadingStage loadingStages[] = {\n  {\n    .process = \"Connect to WiFi\",\n    .callback = []() {\n      // Connect to WiFi\n    }\n  },\n  {\n    .process = \"Get time from NTP\",\n    .callback = []() {\n      // Get current time via NTP\n    }\n  }\n  // more steps\n};\n\nint LOADING_STAGES_COUNT = sizeof(loadingStages) / sizeof(LoadingStage);\n```\n\nAfter defining your array of `LoadingStages` you can then run the loading process by using\n`ui.runLoadingProcess(loadingStages, LOADING_STAGES_COUNT)`. This will give you a\nnice little loading animation you can see in the beginning of [this](https://vimeo.com/168362918)\nvideo.\n\nTo further customize this you are free to define your own `LoadingDrawFunction` like this:\n\n```c\nvoid myLoadingDraw(OLEDDisplay *display, LoadingStage* stage, uint8_t progress) {\n  display->setTextAlignment(TEXT_ALIGN_CENTER);\n  display->setFont(ArialMT_Plain_10);\n  // stage->process contains the text of the current progress e.q. \"Connect to WiFi\"\n  display->drawString(64, 18, stage->process);\n  // you could just print the current process without the progress bar\n  display->drawString(64, 28, progress);\n}\n```\n\nAfter defining a function like that, you can pass it to the Ui library by use\n`ui.setLoadingDrawFunction(myLoadingDraw)`.\n\n\n### Text Logging\n\nIt is always useful to display some text on the display without worrying to much\nwhere it goes and managing it. In 3.0 we made the `OLEDDisplay` class implement\n[`Print`](https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/Print.h)\nso you can use it like you would use `Serial`. We calls this feature `LogBuffer`\nand the only thing you have to do is to define how many lines you want to display\nand how many characters there are on average on each. This is done by calling\n`setLogBuffer(lines, chars);`. If there is not enough memory the function will\nreturn false.\n\nAfter that you can draw the `LogBuffer` anywhere you want by calling `drawLogBuffer(x, y)`.\n(Note: You have to call `display()` to update the screen)\nWe made a [video](https://www.youtube.com/watch?v=8Fiss77A3TE) showing this feature in action.\n"
        },
        {
          "name": "UPGRADE-4.0.md",
          "type": "blob",
          "size": 0.59765625,
          "content": "# Upgrade from 3.x to 4.0\n\nThere are changes that breaks compatibility with older versions.\n\n1. You'll have to change data type for all your binary resources such as images and fonts from\n    \n    ```c\n    const char MySymbol[] PROGMEM = {\n    ```\n    \n    to\n    \n    ```c\n    const uint8_t MySymbol[] PROGMEM = {\n    ```\n\n1. Arguments of `setContrast` from `char` to `uint8_t`\n    \n    ```c++\n    void OLEDDisplay::setContrast(char contrast, char precharge, char comdetect);\n    ```\n    \n    to\n    \n    ```c++\n    void OLEDDisplay::setContrast(uint8_t contrast, uint8_t precharge, uint8_t comdetect);\n    ```\n"
        },
        {
          "name": "component.mk",
          "type": "blob",
          "size": 0.091796875,
          "content": "COMPONENT_ADD_INCLUDEDIRS := src\nCOMPONENT_SRCDIRS := src\nCXXFLAGS += -Wno-ignored-qualifiers\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "keywords.txt",
          "type": "blob",
          "size": 2.1826171875,
          "content": "#######################################\n# Syntax Coloring Map List\n#######################################\n\n\n#######################################\n# Constants (LITERAL1)\n#######################################\nINVERSE    LITERAL1\n\nTEXT_ALIGN_LEFT    LITERAL1\nTEXT_ALIGN_RIGHT    LITERAL1\nTEXT_ALIGN_CENTER    LITERAL1\nTEXT_ALIGN_CENTER_BOTH    LITERAL1\n\nGEOMETRY_128_64    LITERAL1\nGEOMETRY_128_32    LITERAL1\nGEOMETRY_RAWMODE    LITERAL1\n\nArialMT_Plain_10    LITERAL1\nArialMT_Plain_16    LITERAL1\nArialMT_Plain_24    LITERAL1\n\nSLIDE_UP    LITERAL1\nSLIDE_DOWN    LITERAL1\nSLIDE_LEFT    LITERAL1\nSLIDE_RIGHT    LITERAL1\n\nTOP    LITERAL1\nRIGHT    LITERAL1\nBOTTOM    LITERAL1\nLEFT    LITERAL1\n\nLEFT_RIGHT    LITERAL1\nRIGHT_LEFT    LITERAL1\n\nIN_TRANSITION    LITERAL1\nFIXED    LITERAL1\n\n\n#######################################\n# Datatypes (KEYWORD1)\n#######################################\nOLEDDisplay    KEYWORD1\nOLEDDisplayUi    KEYWORD1\n\nSH1106Wire    KEYWORD1\nSH1106Brzo    KEYWORD1\nSH1106Spi    KEYWORD1\n\nSSD1306Wire    KEYWORD1\nSSD1306Brzo    KEYWORD1\nSSD1306I2C    KEYWORD1\nSSD1306Spi    KEYWORD1\n\n\n#######################################\n# Methods and Functions (KEYWORD2)\n#######################################\nallocateBuffer    KEYWORD2\ninit    KEYWORD2\nresetDisplay    KEYWORD2\nsetColor    KEYWORD2\ngetColor    KEYWORD2\nsetPixel    KEYWORD2\nsetPixelColor    KEYWORD2\nclearPixel    KEYWORD2\ndrawLine    KEYWORD2\ndrawRect    KEYWORD2\nfillRect    KEYWORD2\ndrawCircle    KEYWORD2\ndrawCircleQuads    KEYWORD2\nfillCircle    KEYWORD2\nfillRing    KEYWORD2\ndrawHorizontalLine    KEYWORD2\ndrawVerticalLine    KEYWORD2\ndrawProgressBar    KEYWORD2\ndrawFastImage    KEYWORD2\ndrawXbm    KEYWORD2\ndrawIco16x16    KEYWORD2\ndrawString    KEYWORD2\ndrawStringMaxWidth    KEYWORD2\ngetStringWidth    KEYWORD2\nsetTextAlignment    KEYWORD2\nsetFont    KEYWORD2\nsetFontTableLookupFunction    KEYWORD2\ndisplayOn    KEYWORD2\ndisplayOff    KEYWORD2\ninvertDisplay    KEYWORD2\nnormalDisplay    KEYWORD2\nsetContrast    KEYWORD2\nsetBrightness    KEYWORD2\nresetOrientation    KEYWORD2\nflipScreenVertically    KEYWORD2\nmirrorScreen    KEYWORD2\ndisplay    KEYWORD2\nsetLogBuffer    KEYWORD2\ndrawLogBuffer    KEYWORD2\ngetWidth    KEYWORD2\ngetHeight    KEYWORD2\n"
        },
        {
          "name": "library.json",
          "type": "blob",
          "size": 0.701171875,
          "content": "{\n  \"name\": \"ESP8266 and ESP32 OLED driver for SSD1306 displays\",\n  \"version\": \"4.6.1\",\n  \"keywords\": \"ssd1306, oled, display, i2c\",\n  \"description\": \"I2C display driver for SSD1306 OLED displays connected to ESP8266, ESP32, Mbed-OS\",\n  \"license\": \"MIT\",\n  \"repository\":\n  {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/ThingPulse/esp8266-oled-ssd1306\"\n  },\n  \"authors\":\n  [\n    {\n        \"name\": \"Daniel Eichhorn, ThingPulse\",\n        \"email\": \"squix78@gmail.com\",\n        \"url\": \"https://thingpulse.com\"\n    },\n    {\n        \"name\": \"Fabrice Weinberg\",\n        \"email\": \"fabrice@weinberg.me\"\n    }\n  ],\n  \"frameworks\": \"arduino\",\n  \"platforms\": [\n    \"espressif8266\",\n    \"espressif32\",\n    \"nordicnrf52\"\n  ]\n}\n"
        },
        {
          "name": "library.properties",
          "type": "blob",
          "size": 0.4990234375,
          "content": "name=ESP8266 and ESP32 OLED driver for SSD1306 displays\nversion=4.6.1\nauthor=ThingPulse, Fabrice Weinberg\nmaintainer=ThingPulse <info@thingpulse.com>\nsentence=I2C display driver for SSD1306 OLED displays connected to ESP8266, ESP32, Mbed-OS\nparagraph=The following geometries are currently supported: 128x64, 128x32, 64x48. The init sequence was inspired by Adafruit's library for the same display.\ncategory=Display\nurl=https://github.com/ThingPulse/esp8266-oled-ssd1306\narchitectures=esp8266,esp32\nlicense=MIT\n"
        },
        {
          "name": "license",
          "type": "blob",
          "size": 1.130859375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 by Daniel Eichhorn\nCopyright (c) 2016 by Fabrice Weinberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nSee more at http://blog.squix.ch\n"
        },
        {
          "name": "platformio.ini",
          "type": "blob",
          "size": 0.564453125,
          "content": "; PlatformIO Project Configuration File\n;\n;   Build options: build flags, source filter\n;   Upload options: custom upload port, speed and extra flags\n;   Library options: dependencies, extra library storages\n;   Advanced options: extra scripting\n;\n; Please visit documentation for the other options and examples\n; http://docs.platformio.org/page/projectconf.html\n\n[env:d1_mini]\nplatform = espressif8266\nboard = d1_mini\nframework = arduino\nupload_speed = 921600\nboard_build.f_cpu = 160000000L\nupload_port = /dev/cu.SLAB_USBtoUART\nmonitor_port = /dev/cu.SLAB_USBtoUART\nlib_deps =\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}