{
  "metadata": {
    "timestamp": 1736565812345,
    "page": 741,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "yse/easy_profiler",
      "stars": 2224,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.162109375,
          "content": "---\nLanguage:       Cpp\nBasedOnStyle:   Google\nColumnLimit:    100\nIndentWidth:    4\nReflowComments: false\n#IndentPPDirectives: PPDIS_AfterHash #since clang 6.0\n...\n\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.046875,
          "content": "* text=auto\n\n*.ico binary\n\n*.cpp text\n*.h text\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.185546875,
          "content": "bin\n*build*\n!BUILD\n.*\n*.user\n/*.prof\n.idea/\nbazel*\n\n# CMake/QtCreator folders and files created on Windows\nCMakeFiles/\n*/CMakeFiles/\nCMakeCache*.*\nMakefile*\nmoc_*.*\nmocs_*.*\nqrc_*.*\n*.cmake\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.84375,
          "content": "dist: xenial\ncache: ccache\nlanguage: cpp\njobs:\n  include:\n    - compiler: gcc\n      os: linux\n      addons:\n        apt:\n          sources:\n            - ubuntu-toolchain-r-test\n          packages:\n            - g++-5\n            - cmake\n            - cmake-data\n            - qt5-default\n      env:\n        -CXX_COMPILER=g++-5\n        -C_COMPILER=gcc-5\n    - os: osx\n      osx_image: xcode11.4\n      env:\n        -CXX_COMPILER=g++-5\n        -C_COMPILER=gcc-5\n        -HOMEBREW_NO_AUTO_UPDATE=1\nscript:\n  - mkdir build\n  - cd build\n  - if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then\n        export PATH=/usr/local/opt/qt/bin:$PATH;\n    fi\n  - cmake -DCMAKE_CXX_COMPILER=$CXX_COMPILER -DCMAKE_C_COMPILER=$C_COMPILER  .. && make -j3\ninstall:\n  - if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then\n        brew install gcc5;\n        brew install qt;\n        brew link --force qt;\n    fi\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.7822265625,
          "content": "cmake_minimum_required(VERSION 3.0)\nproject(easy_profiler CXX)\n\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\nif (CMAKE_VERSION VERSION_LESS \"3.1\")\n    if (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\" OR CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\" OR CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\")\n      set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=gnu++11\")\n    endif ()\nelse ()\n    set(CMAKE_CXX_STANDARD 11)\n    set(CMAKE_CXX_STANDARD_REQUIRED ON)\nendif ()\n\nif (MSVC)\n    if (NOT (MSVC_VERSION LESS 1914))\n        # turn on valid __cplusplus macro value for visual studio (available since msvc 2017 update 7)\n        set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /Zc:__cplusplus\")\n    endif ()\nendif ()\n\noption(EASY_PROFILER_NO_GUI \"Build easy_profiler without the GUI application (required Qt)\" OFF)\n\nset(EASY_PROGRAM_VERSION_MAJOR 2)\nset(EASY_PROGRAM_VERSION_MINOR 1)\nset(EASY_PROGRAM_VERSION_PATCH 0)\nset(EASY_PRODUCT_VERSION_STRING \"${EASY_PROGRAM_VERSION_MAJOR}.${EASY_PROGRAM_VERSION_MINOR}.${EASY_PROGRAM_VERSION_PATCH}\")\n\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)\n\n# set(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_LIST_DIR}/sdk)\n\nmacro(easy_define_target_option TARGET SOURCE_OPTION TARGET_DEFINITION)\n    if (${SOURCE_OPTION})\n        set(_VALUE 1)\n    else ()\n        set(_VALUE 0)\n    endif ()\n    target_compile_options(${TARGET} PUBLIC -D${TARGET_DEFINITION}=${_VALUE})\nendmacro()\n\nSET(CMAKE_INSTALL_RPATH \"$ORIGIN\")\n\nadd_subdirectory(easy_profiler_core)\nif (NOT EASY_PROFILER_NO_GUI)\n    add_subdirectory(profiler_gui)\nendif()\nadd_subdirectory(easy_profiler_converter)\n\nif (NOT EASY_PROFILER_NO_SAMPLES)\n    add_subdirectory(sample)\n    add_subdirectory(reader)\nendif ()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0693359375,
          "content": "MIT License\n\nCopyright (c) 2016-2021 Sergey Yagovtsev, Victor Zarubkin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.6171875,
          "content": "# easy_profiler [![2.1.0](https://img.shields.io/badge/stable-2.1.0-009688.svg)](https://github.com/yse/easy_profiler/releases/tag/v2.1.0) [![3.x.x](https://img.shields.io/badge/latest-3.x.x-f57f17.svg)](https://github.com/yse/easy_profiler)\n\n[![Build Status](https://ci.appveyor.com/api/projects/status/github/yse/easy_profiler?branch=develop&svg=true)](https://ci.appveyor.com/project/yse/easy-profiler/branch/develop)\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://www.apache.org/licenses/LICENSE-2.0)\n\n1. [About](#about)\n2. [Key features](#key-features)\n3. [Usage](#usage)\n    - [Integration](#integration)\n       - [General build system](#general)\n       - [CMake](#if-using-cmake)\n    - [Inserting blocks](#inserting-blocks)\n    - [Storing variables](#storing-variables)\n    - [Collect profiling data](#collect-profiling-data)\n        - [Streaming over network](#streaming-over-network)\n        - [Dump to file](#dump-to-file)\n        - [Note about thread context-switch events](#note-about-thread-context-switch-events)\n        - [Profiling application startup](#profiling-application-startup)\n4. [Build](#build)\n    - [Linux](#linux)\n    - [MacOS](#macos)\n    - [Windows](#windows)\n    - [QNX](#qnx)\n    - [Android](#android)\n5. [Notes about major release 1.x -> 2.x and 2.x -> 3.x](#status)\n6. [License](#license)\n\n# About\nLightweight cross-platform profiler library for c++\n\nYou can profile any function in you code. Furthermore this library provide measuring time of any block of code.\nFor example, information for 12 millions of blocks is using less than 300Mb of memory.\nWorking profiler slows your application execution for only 1-2%.\n\n![Block time](https://hsto.org/files/3e4/afe/8b7/3e4afe8b77ac4ad3a6f8c805be4b7f13.png)\n_Average overhead per block is about 15ns/block (tested on Intel Core i7-5930K 3.5GHz, Win7)_\n\nDisabled profiler will not affect your application execution in any way. You can leave it in your Release build\nand enable it at run-time at any moment during application launch to see what is happening at the moment.\n\nAlso the library can capture system's context switch events between threads. Context switch information includes\nduration, target thread id, thread owner process id, thread owner process name.\n\nYou can see the results of measuring in simple GUI application which provides full statistics and renders beautiful time-line.\n\n![GUI screenshot](https://cloud.githubusercontent.com/assets/1775230/24852044/a0b1edd0-1dde-11e7-8736-7052b840ad06.png)\n_Profiling CryEngine SDK example_\n\n![New UI Style](https://user-images.githubusercontent.com/10530007/40890463-0ab378f8-677f-11e8-9b10-9c62ffb7d5b8.png)\n_New UI style in version 2.0_\n\n# Key features\n\n- Extremely low overhead\n- Low additional memory usage\n- Cross-platform\n- Profiling over network\n- Capture thread context-switch events\n- Store user variables (both single values and arrays)\n- GUI could be connected to an application which is already profiling (so you can profile initialization of your application)\n- Monitor main thread fps at real-time in GUI even if profiling is disabled or draw your own HUD/fps-plot directly in your application using data provided by profiler\n- Save a snapshot (selected area) of profiled data from file\n- Add bookmarks at any place on the timeline\n- Configurable timer type with CMakeLists or preprocessor macros \n\n# Usage\n\n## Integration\n\n### General\n\nFirst of all you can specify path to include directory which contains `include/profiler` directory and define macro `BUILD_WITH_EASY_PROFILER`.\nFor linking with easy_profiler you can specify path to library.\n\n### If using CMake\n\nIf you are using `cmake` set `CMAKE_PREFIX_PATH` to `lib/cmake/easy_profiler` directory (from [release](https://github.com/yse/easy_profiler/releases) package) and use function `find_package(easy_profiler)` with `target_link_libraries(... easy_profiler)`. \n\nExample:\n``` cmake\nproject(my_application)\n\nset(SOURCES\n    main.cpp\n)\n\n# CMAKE_PREFIX_PATH should be set to <easy_profiler-release_dir>/lib/cmake/easy_profiler\nfind_package(easy_profiler REQUIRED)  # STEP 1 #########################\n\nadd_executable(my_application ${SOURCES})\n\ntarget_link_libraries(my_application easy_profiler)  # STEP 2 ##########\n```\n\n## Inserting blocks\n\nExample of usage.\n\n```cpp\n#include <easy/profiler.h>\n\nvoid foo() {\n    EASY_FUNCTION(profiler::colors::Magenta); // Magenta block with name \"foo\"\n\n    EASY_BLOCK(\"Calculating sum\"); // Begin block with default color == Amber100\n    int sum = 0;\n    for (int i = 0; i < 10; ++i) {\n        EASY_BLOCK(\"Addition\", profiler::colors::Red); // Scoped red block (no EASY_END_BLOCK needed)\n        sum += i;\n    }\n    EASY_END_BLOCK; // End of \"Calculating sum\" block\n\n    EASY_BLOCK(\"Calculating multiplication\", profiler::colors::Blue500); // Blue block\n    int mul = 1;\n    for (int i = 1; i < 11; ++i)\n        mul *= i;\n    //EASY_END_BLOCK; // This is not needed because all blocks are ended on destructor when closing braces met\n}\n\nvoid bar() {\n    EASY_FUNCTION(0xfff080aa); // Function block with custom ARGB color\n}\n\nvoid baz() {\n    EASY_FUNCTION(); // Function block with default color == Amber100\n}\n```\n\nEasyProfiler is using Google Material-Design colors palette, but you can use custom colors in ARGB format (like shown in example above).  \nThe default color is `Amber100` (it is used when you do not specify color explicitly). \n\n## Storing variables\n\nExample of storing variables:\n```cpp\n#include <easy/profiler.h>\n#include <easy/arbitrary_value.h> // EASY_VALUE, EASY_ARRAY are defined here\n\nclass Object {\n    Vector3 m_position; // Let's suppose Vector3 is a struct { float x, y, z; };\n    unsigned int  m_id;\npublic:\n    void act() {\n        EASY_FUNCTION(profiler::colors::Cyan);\n\n        // Dump variables values\n        constexpr auto Size = sizeof(Vector3) / sizeof(float);\n        EASY_VALUE(\"id\", m_id);\n        EASY_ARRAY(\"position\", &m_position.x, Size, profiler::color::Red);\n\n        // Do something ...\n    }\n\n    void loop(uint32_t N) {\n        EASY_FUNCTION();\n        EASY_VALUE(\"N\", N, EASY_VIN(\"N\")); /* EASY_VIN is used here to ensure\n                                            that this value id will always be\n                                            the same, because the address of N\n                                            can change */\n        for (uint32_t i = 0; i < N; ++i) {\n            // Do something\n        }\n    }\n};\n```\n\n## Collect profiling data\n\nThere are two ways to collect profiling data: streaming over network and dumping data to file.\n\n### Streaming over network\n\nThis is the most preferred and convenient method in many cases.\n\n1. (In profiled app) Invoke `profiler::startListen()`. This will start new thread to listen `28077` port for the start-capture-signal from profiler_gui.\n2. (In UI) Connect profiler_gui to your application using `hostname` or `IP-address`.\n3. (In UI) Press `Start capture` button in profiler_gui.\n4. (In UI) Press `Stop capture` button in profiler_gui to stop capturing and wait until profiled data will be passed over network.\n5. (Optional step)(In profiled app) Invoke `profiler::stopListen()` to stop listening. \n\nExample:\n```cpp\nvoid main() {\n    profiler::startListen();\n    /* do work */\n}\n```\n\n### Dump to file\n\n1. (Profiled application) Start capturing by putting `EASY_PROFILER_ENABLE` macro somewhere into the code.\n2. (Profiled application) Dump profiled data to file in any place you want by `profiler::dumpBlocksToFile(\"test_profile.prof\")` function.\n\nExample:\n```cpp\nvoid main() {\n    EASY_PROFILER_ENABLE;\n    /* do work */\n    profiler::dumpBlocksToFile(\"test_profile.prof\");\n}\n```\n\n### Note about thread context-switch events\n\nTo capture a thread context-switch events you need:\n\n- On Windows: launch your application \"as Administrator\"\n- On Linux: you can launch special `systemtap` script with root privileges as follow (example on Fedora):\n```bash\n#stap -o /tmp/cs_profiling_info.log scripts/context_switch_logger.stp name APPLICATION_NAME\n```\nAPPLICATION_NAME - name of your application\n\nThere are some known issues on a linux based systems (for more information see [wiki](https://github.com/yse/easy_profiler/wiki/Known-bugs-and-issues))\n\n### Profiling application startup\n\nTo profile your application startup (when using [network](#streaming-over-network) method) add `EASY_PROFILER_ENABLE` macro into the code together with `profiler::startListen()`. \n\nExample:\n```cpp\nvoid main() {\n    EASY_PROFILER_ENABLE;\n    profiler::startListen();\n    /* do work */\n}\n```\n\nThis will allow you to collect profiling data before profiler_gui connection. profiler_gui will automatically display capturing dialog window after successful connection to the profiled application. \n\n# Build\n\n## Prerequisites\n\n* CMake 3.0 or higher\n* Compiler with c++11 support\n  * for Unix systems: compiler with `thread_local` support is **highly recommended**: _GCC >=4.8_, _Clang >=3.3_\n\nAdditional requirements for GUI:\n* Qt 5.3.0 or higher\n\n## Linux\n\n```bash\n$ mkdir build\n$ cd build\n$ cmake -DCMAKE_BUILD_TYPE=\"Release\" ..\n$ make\n```\n\n## MacOS\n\n```bash\n$ mkdir build\n$ cd build\n$ cmake -DCMAKE_CXX_COMPILER=g++-5 -DCMAKE_C_COMPILER=gcc-5 -DCMAKE_BUILD_TYPE=\"Release\" ..\n$ make\n```\n\n## Windows\n\nIf you are using QtCreator IDE you can just open `CMakeLists.txt` file in root directory.\nIf you are using Visual Studio you can generate solution by cmake generator command.\nExamples shows how to generate Win64 solution for Visual Studio 2013. To generate for another version use proper cmake generator (-G \"name of generator\").\n\n### Way 1\nSpecify path to cmake scripts in Qt6 dir (usually in lib/cmake subdir) and execute cmake generator command,\nfor example:\n```batch\n$ mkdir build\n$ cd build\n$ cmake -DCMAKE_PREFIX_PATH=\"C:\\Qt\\6.7.2\\msvc2013_64\\lib\\cmake\" .. -G \"Visual Studio 12 2013 Win64\"\n```\n\n### Way 2\nCreate system variable \"Qt6Widgets_DIR\" and set it's value to \"[path-to-Qt6-binaries]\\lib\\cmake\\Qt6Widgets\".\nFor example, \"C:\\Qt\\5.3\\msvc2013_64\\lib\\cmake\\Qt6Widgets\".\nAnd then run cmake generator as follows:\n```batch\n$ mkdir build\n$ cd build\n$ cmake .. -G \"Visual Studio 12 2013 Win64\"\n```\n\n## QNX\n```bash\n$ souce $QNX_ENVIRONMENT\n$ mkdir build\n$ cd build\n$ cmake -DCMAKE_TOOLCHAIN_FILE=/path/to/QNXToolchain.cmake ..\n```\nFor more information and example for `QNXToolchain.cmake` see [this PR](https://github.com/yse/easy_profiler/pull/145) \n\n## Android\n\nYou can build native library for android by using NDK and standalone toolchain. See [comment for this PR](https://github.com/yse/easy_profiler/pull/137#issuecomment-436167127) to get a more detailed instruction.\n\n# Status\n## Migration 1.x --> 2.x\nBranch `develop` contains all v2.0.0 features and new UI style.  \nPlease, note that .prof file header has changed in v2.0.0:\n```cpp\nstruct EasyFileHeader {\n    uint32_t signature = 0;\n    uint32_t version = 0;\n    profiler::processid_t pid = 0;\n    int64_t cpu_frequency = 0;\n    profiler::timestamp_t begin_time = 0;\n    profiler::timestamp_t end_time = 0;\n    \n    // Changed order of memory_size and blocks_number relative to v1.3.0\n    uint64_t memory_size = 0;\n    uint64_t descriptors_memory_size = 0;\n    uint32_t total_blocks_number = 0;\n    uint32_t total_descriptors_number = 0;\n};\n```\n\n## Migration 2.x --> 3.x\n\nThere are some functions in the 2.x release that conflicts with system functions, for example `now()`. You can find more details in the related [issue](https://github.com/yse/easy_profiler/issues/215) and [PR](https://github.com/yse/easy_profiler/pull/188)\n\n# License\n\nLicensed under either of\n- MIT license ([mit.lic](mit.lic) or http://opensource.org/licenses/MIT)\n- Apache License, Version 2.0 ([apache.lic](apache.lic) or http://www.apache.org/licenses/LICENSE-2.0)\n\nat your option.\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "apache.lic",
          "type": "blob",
          "size": 9.935546875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "appveyor.bat",
          "type": "blob",
          "size": 0.1005859375,
          "content": "mkdir build_msvc\ncd build_msvc\ncmake -G \"%GENERATOR%\"  ../\ncmake --build . --config Release\n\ngoto :EOF\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.3359375,
          "content": "platform:\n  - Win64\n\nconfiguration:\n  - Release\n\nenvironment:\n  matrix:\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013\n      Qt5Widgets_DIR: \"C:\\\\Qt\\\\5.5\\\\msvc2013_64\\\\lib\\\\cmake\\\\Qt5Widgets\"\n      GENERATOR: \"Visual Studio 12 2013 Win64\"\n\ntest: off\n\nbuild_script:\n  - CALL appveyor.bat\n\nskip_commits:\n  message: /.*\\[skip appveyor\\].*/\n"
        },
        {
          "name": "easy_profiler_converter",
          "type": "tree",
          "content": null
        },
        {
          "name": "easy_profiler_core",
          "type": "tree",
          "content": null
        },
        {
          "name": "mit.lic",
          "type": "blob",
          "size": 1.064453125,
          "content": "Copyright (c) 2016-2019 Sergey Yagovtsev, Victor Zarubkin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights \nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \nof the Software, and to permit persons to whom the Software is furnished \nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR \nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE \nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, \nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE \nUSE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "profiler_gui",
          "type": "tree",
          "content": null
        },
        {
          "name": "reader",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}