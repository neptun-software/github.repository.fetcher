{
  "metadata": {
    "timestamp": 1736565859720,
    "page": 810,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dfeneyrou/palanteer",
      "stars": 2110,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".codechecker.json",
          "type": "blob",
          "size": 0.939453125,
          "content": "{\n    \"analyze\": [\n        \"--skip=$HOME/codechecker/skip_palanteer.txt\",\n        \"--disable=cert-err34-c\",\n        \"--disable=bugprone-incorrect-roundings\",\n        \"--disable=bugprone-narrowing-conversions\",\n        \"--disable=bugprone-reserved-identifier\",\n        \"--disable=cppcoreguidelines-special-member-functions\",\n        \"--disable=cert-dcl21-cpp\",\n        \"--disable=cert-dcl37-c\",\n        \"--disable=cert-dcl50-cpp\",\n        \"--disable=cert-dcl51-cpp\",\n        \"--disable=cert-err58-cpp\",\n        \"--disable=misc-definitions-in-headers\",\n        \"--disable=performance-no-int-to-ptr\",\n        \"--disable=google-explicit-constructor\",\n        \"--disable=deadcode.DeadStores\"\n    ],\n    \"parse\": [\n        \"--trim-path-prefix\",\n        \"$HOME/codechecker\"\n    ],\n    \"server\": [\n        \"--workspace=$HOME/workspace\",\n        \"--port=9090\"\n    ],\n    \"store\": [\n        \"--name=palanteer\",\n        \"--url=http://codechecker.my:9090/palanteer\"\n    ]\n}\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.130859375,
          "content": "ï»¿build/*\n__pycache__\nserver/scripting/palanteer_scripting.egg-info/*\npython/palanteer.egg-info\n\n# Visual Studio CMake\n/.vs/*\n/out/*\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.787109375,
          "content": "cmake_minimum_required(VERSION 3.15)\nproject(palanteer VERSION 1.0.0 DESCRIPTION \"Palanteer\")\n\n# Options\n\n# All targets are not required for all usages\n#  * C++ developer who does not plan to script   : only the viewer (as the C++ instrumentation library is a header file). No Python required.\n#  * C++ developer who wants to script only      : only the python scripting package\n#  * Python developer who does not plan to script: the viewer and the python instrumentation package\n#  * Python developer who wants to script only   : the python scripting package and the python instrumentation package\n\noption(PALANTEER_BUILD_VIEWER \"Build the Server/Viewer\" ON)\noption(PALANTEER_BUILD_CPP_EXAMPLE \"Build the C++ example program\" ON)\noption(PALANTEER_BUILD_PYTHON_INSTRUMENTATION \"Build the python instrumentation\" ON)\noption(PALANTEER_BUILD_SERVER_SCRIPTING \"Build the python scripting package\" ON)\n\n# Policies\ncmake_policy(SET CMP0009 NEW) # For GLOB_RECURSE\ncmake_policy(SET CMP0072 NEW) # For OpenGL (Linux)\n\n# Use ccache if available\nfind_program(CCACHE_PROGRAM ccache)\nif(CCACHE_PROGRAM)\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE \"${CCACHE_PROGRAM}\")\nendif(CCACHE_PROGRAM)\n\n# Add the ASAN target\nset(CMAKE_CXX_FLAGS_ASAN \"-Wall -fsanitize=address -fno-omit-frame-pointer -g\" CACHE STRING\n \"Flags used by the C++ compiler during asan builds.\"  FORCE)\nset(CMAKE_C_FLAGS_ASAN \"-Wall -fsanitize=address -fno-omit-frame-pointer -g\" CACHE STRING\n  \"Flags used by the C compiler during asan builds.\"  FORCE)\nset(CMAKE_EXE_LINKER_FLAGS_ASAN\n  \"-fsanitize=address\" CACHE STRING  \"Flags used for linking binaries during asan builds.\"  FORCE)\nset(CMAKE_SHARED_LINKER_FLAGS_ASAN\n  \"-fsanitize=address\" CACHE STRING  \"Flags used by the shared libraries linker during asan builds.\"  FORCE)\nmark_as_advanced(CMAKE_CXX_FLAGS_ASAN CMAKE_C_FLAGS_ASAN CMAKE_EXE_LINKER_FLAGS_ASAN CMAKE_SHARED_LINKER_FLAGS_ASAN)\nset(CMAKE_BUILD_TYPE \"${CMAKE_BUILD_TYPE}\" CACHE STRING\n  \"Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel Asan.\" FORCE)\n\n# Built type\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Release CACHE STRING \"Type of build\" FORCE)\nendif()\nmessage(\"Build type: ${CMAKE_BUILD_TYPE}   (change with -DCMAKE_BUILD_TYPE=<Debug|Release|RelWithDebInfo|MinSizeRel|Asan>)\")\nmessage(\"Custom configuration flags can be passed with -DCUSTOM_FLAGS=\\\"-D<name1>=value1 -D<name2>=value2 ...\\\"\")\n\n# Store output in an easy location\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/lib\")\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin\")\n\nif (POLICY CMP0094)  # https://cmake.org/cmake/help/latest/policy/CMP0094.html\n  cmake_policy(SET CMP0094 NEW)  # FindPython should return the first matching Python\nendif ()\n\n# needed on GitHub Actions CI: actions/setup-python does not touch registry/frameworks on Windows/macOS\n# this mirrors PythonInterp behavior which did not consult registry/frameworks first\nif (NOT DEFINED Python_FIND_REGISTRY)\n  set(Python_FIND_REGISTRY \"LAST\")\nendif ()\nif (NOT DEFINED Python_FIND_FRAMEWORK)\n  set(Python_FIND_FRAMEWORK \"LAST\")\nendif ()\n\n\n# System flags\n# ============\n\n# Register our package finders\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${PROJECT_SOURCE_DIR}/cmake\")\n\n# Multithreading is used (both client and server applications)\nset(THREADS_PREFER_PTHREAD_FLAG ON)\nfind_package(Threads REQUIRED)\n\n\n# Palanteer\n# ==========\n\n# Build libpalanteer\nadd_subdirectory(c++)\n\n# Build the viewer\nif (PALANTEER_BUILD_VIEWER)\n\tadd_subdirectory(server/viewer)\nendif()\n\n# Build the C++ example\nif (PALANTEER_BUILD_CPP_EXAMPLE)\n\tadd_subdirectory(c++/testprogram)\nendif()\n\n# Build the python instrumentation package\nif (PALANTEER_BUILD_PYTHON_INSTRUMENTATION)\n\tadd_subdirectory(python)\nendif()\n\n# Build the python scripting package\nif (PALANTEER_BUILD_SERVER_SCRIPTING)\n\tadd_subdirectory(server/scripting)\nendif()\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 4.2412109375,
          "content": "Global installation\n===================\n\n## Clone the GIT repository\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ shell\ngit clone https://github.com/dfeneyrou/palanteer\ncd palanteer\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n## Build and install all components\n\nRequires CMake, gcc/MSVC, Python 3.7+ with pysetuptools and wheel.\n\n### On Linux\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ shell\nmkdir build\ncd build\ncmake .. -DCMAKE_BUILD_TYPE=Release\nmake -j$(nproc) install\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOutput:\n  - `./bin/palanter` (viewer)\n  - `./bin/testprogram` (C++ example program)\n  - the installation of the Python module `palanteer` (Python instrumentation)\n  - the installation of the Python module `palanteer_scripting` (scripting module)\n\nThe \"install\" target builds all components (as `make` would do) and additionaly installs the 2 Python built `wheel` packages (globally if root, else locally).\n\n### On Windows\n\n`vcvarsall.bat` or equivalent shall be called beforehand, so that the MSVC compiler is accessible.\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ shell\nmkdir build\ncd build\ncmake .. -DCMAKE_BUILD_TYPE=Release -G \"NMake Makefiles\"\nnmake install\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOutput:\n  - `bin\\palanter.exe` (viewer)\n  - `bin\\testprogram.exe` (C++ example program)\n  - the installation of the Python module `palanteer` (Python instrumentation)\n  - the installation of the Python module `palanteer_scripting` (scripting module)\n\nThe \"install\" target builds all components (as `make` would do) and additionaly installs the 2 built `wheel` Python packages (globally if administrator, else locally).\n\n## Customized test program\n\nThe C++ test program receives customized compilation flags through the variable `CUSTOM_FLAGS`. <br/>\nFor the list of options, refer to the [instrumentation configuration](https://dfeneyrou.github.io/palanteer/instrumentation_configuration_cpp.md.html).\n\nFor instance, the following command builds the testprogram with Palanteer fully disabled (example for Linux):\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ shell\ncmake .. -DCUSTOM_FLAGS=\"-DUSE_PL=0\"\nmake testprogram\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAnother example (for Linux), the following command builds the testprogram with Palanteer and:\n - without the memory tracing\n - with the external string feature activated\n - with simple assertions\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ shell\ncmake .. -DCUSTOM_FLAGS=\"-DPL_IMPL_OVERLOAD_NEW_DELETE=0 -DPL_EXTERNAL_STRINGS=1 -DPL_SIMPLE_ASSERT=1\"\nmake testprogram\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nNOTE: Beware that the `CUSTOM_FLAGS` value is persistent with cmake. To clear it, simply use ```-DCUSTOM_FLAGS=\"\"``` in a cmake configuration call\n\n## Manual installation of Python modules\n\nCalling ```make``` without the \"install\" target just builds some components. <br/>\nThe two Python modules (instrumentation and scripting) are generated as `wheel` packages.\n\nThey can be installed manually with `pip`:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ shell\npip install python/dist/palanteer-<XXX>-.whl\npip install server/scripting/dist/palanteer_scripting-<XXX>-.whl\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n## Deactivating some components\n\nAll components of Palanteer are usually not required. <br/>\nSome typical usages are:\n  - A C++ developer who does not plan to script\n    - Only the viewer, as the C++ instrumentation library is a header file\n    - No Python required.\n  - A C++ developer who wants to script only\n    - Only the python scripting package, as the C++ instrumentation library is a header file\n  - A Python developer who does not plan to script\n    - The viewer\n    - The python instrumentation package\n  - A Python developer who wants to script only\n    - The python scripting package\n    - The python instrumentation package\n\nSuch roles, or a mix of them, can be enforced with the following CMake options (to use with `-D<option>=<ON|OFF>` at configuration time, ON as a default):\n  - `PALANTEER_BUILD_VIEWER`\n  - `PALANTEER_BUILD_CPP_EXAMPLE`\n  - `PALANTEER_BUILD_PYTHON_INSTRUMENTATION`\n  - `PALANTEER_BUILD_SERVER_SCRIPTING`\n\nExample:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ shell\ncmake .. -DCMAKE_BUILD_TYPE=Release -DPALANTEER_BUILD_CPP_EXAMPLE=OFF -DPALANTEER_BUILD_SERVER_SCRIPTING=OFF\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe persistence of this configuration is ensured by the CMake caching mechanism.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 2.7353515625,
          "content": "# License\n\n`Palanteer` uses two different licenses, depending on the components and their inherent constraints:\n  1. Instrumentation libraries shall preserve the user's freedom to distribute their program in closed sources\n     - In this case, the **MIT license** applies\n  1. Improvement on the server tooling side shall benefit to the community\n     - In this case, the **Affero GNU General Public License version 3 or later (AGPL v3+)** applies\n\n\nThe big lines are:\n\n  - `./c++`, `./python` and `./tools` are under the **MIT license**\n    - these folders contain the instrumentation libraries and helper tools\n    - This permissive license preserves developers's rights about distributing their software, even if delivered with instrumentation (modified or not).\n  - `./server/base` is also under the **MIT license**\n    - as an exception for server side, the code in this folder, if useful, can be reused in closed source projects.\n  - `./server/common`, `./server/viewer` and `./python/python_scripting` are under the **AGPL v3+ license**\n    - these parts shall benefit to the community (i.e. sources must be shared if a derivative is distributed) while free to use and modify\n    - \"Affero\" version of the GPL was naturally chosen to cover also the case of distribution over network\n\nTo remove any ambiguity, each folder contains the associated license and each file has a license header.\n\nThe snapshotted external dependencies have the following licenses:\n\n| Dependency name                  | License type                | URL                                            | Used by           | Location in the project      |\n| ---------                        | -----------                 | ----                                           | ---               | --------                     |\n| Khronos OpenGL API and Extension | MIT                         | https://www.khronos.org/registry/OpenGL/api/GL | Viewer            | server/external/             |\n| Dear ImGui                       | MIT                         | https://github.com/ocornut/imgui               | Viewer            | server/external/imgui        |\n| stb_image                        | Public domain               | https://github.com/nothings/stb                | Viewer            | server/external/stb_image.h  |\n| Fonts 'Roboto-Medium.ttf'        | Apache License, Version 2.0 | https://fonts.google.com/specimen/Roboto       | Viewer            | server/viewer/vwFontData.cpp |\n| ZStandard                        | BSD                         | https://facebook.github.io/zstd                | Viewer, scripting | server/external/zstd         |\n| Markdeep                         | BSD                         | https://casual-effects.com/markdeep            | Documentation     | doc/                         |\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.9580078125,
          "content": "# Look into Palanteer and get an omniscient view of your program\n\n[![Build Status](https://github.com/dfeneyrou/palanteer/workflows/build/badge.svg)](https://github.com/dfeneyrou/palanteer/actions?workflow=build)\n\nPalanteer is a set of lean and efficient tools to improve the quality of software, for C++ and Python programs.\n\n<img src=\"docs/images/views.gif \" alt=\"Palanteer viewer image\" width=\"1000\"/>\n\nSimple code instrumentation, mostly automatic in Python, delivers powerful features:\n  - **Collection of meaningful atomic events** on timings, memory, locks wait and usage, context switches, data values..\n  - **Efficient logging** with a printf-compatible interface\n  - **Visual and interactive observation** of records: hierarchical logs, timeline, plot, histogram, flame graph...\n  - **Remote command call and events observation can be scripted in Python**: deep testing has never been simpler\n  - **C++**:\n    - ultralight single-header cross-platform instrumentation library\n    - [printf-like nanosecond logging](https://dfeneyrou.github.io/palanteer/index.html#easyandefficientlogging) with level, category and graphable arguments\n    - compile time selection of [groups of instrumentation](https://dfeneyrou.github.io/palanteer/base_concepts.md.html#c++specific/groups)\n    - compile-time hashing of [static strings](https://dfeneyrou.github.io/palanteer/base_concepts.md.html#staticanddynamicstrings) to minimize their cost\n    - compile-time striping of [all instrumentation static strings](https://dfeneyrou.github.io/palanteer/getting_started.md.html#quickc++externalstringconfiguration)\n    - [enhanced assertions](https://dfeneyrou.github.io/palanteer/index.html#enhancedassertions), stack trace dump...\n    - [automatic code instrumentation](https://dfeneyrou.github.io/palanteer/getting_started.md.html#quickc++automaticfunctionsinstrumentation) (Linux GCC only)\n  - **Python**:\n    - [Automatic instrumentation](https://dfeneyrou.github.io/palanteer/instrumentation_api_python.md.html#automaticinstrumentationwithoutcodemodification) of functions enter/leave, memory allocations, raised exceptions, garbage collection runs\n    - Seamless support of multithreading, asyncio/gevent\n\nRecording simultaneously [up to 8 streams](https://dfeneyrou.github.io/palanteer/index.html#multistream) (i.e., from different processes) is supported.\n\nPalanteer is an efficient, lean and comprehensive solution for better and enjoyable software development!\n\n## C++ instrumentation example\n\nBelow is a simple example of a C++ program instrumented with Palanteer and generating 100 000 random integers.\nThe range can be remotely configured with a user-defined CLI.\n\nThe Python scripting module can control this program, in particular:\n   - call the setBoundsCliHandler to change the configuration\n   - temporarily stop the program at the freeze point\n   - see all \"random data\" values and the timing of the scope event \"Generate some random values\"\n\n<details>\n  <summary> See C++ example code </summary>\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ c++\n// File: example.cpp\n// On Linux, build with:  g++ -DUSE_PL=1 -I <palanteer C++ instrumentation folder> example.cpp -lpthread -o example\n#include <stdlib.h>          // For \"rand\"\n#define PL_IMPLEMENTATION 1  // The instrumentation library shall be \"implemented\" once\n#include \"palanteer.h\"\n\nint globalMinValue = 0, globalMaxValue = 10;\n\n// Handler (=user implementation) of the example CLI, which sets the range\nvoid setBoundsCliHandler(plCliIo& cio)             // 'cio' is a communication helper passed to each C++ CLI handler\n{\n    int minValue = cio.getParamInt(0);             // Get the 2 CLI parameters as integers (as declared)\n    int maxValue = cio.getParamInt(1);\n    if(minValue>maxValue) {                        // Case where the CLI execution fails. The text answer contains some information about it\n        cio.setErrorState(\"Minimum value (%d) shall be lower than the maximum value (%d)\", minValue, maxValue);\n        return;\n    }\n\n    // Modify the state of the program. No care about thread-safety here, to keep the example simple\n    globalMinValue = minValue;\n    globalMaxValue = maxValue;\n    // CLI execution was successful (because no call to cio.setErrorState())\n}\n\n\nint main(int argc, char** argv)\n{\n    plInitAndStart(\"example\");              // Start the instrumentation, for the program named \"example\"\n    plDeclareThread(\"Main\");                // Declare the current thread as \"Main\" so that it can be identified more easily in the script\n    plRegisterCli(setBoundsCliHandler, \"config:setRange\", \"min=int max=int\", \"Sets the value bounds of the random generator\");  // Declare our CLI\n    plFreezePoint();                        // Add a freeze point here to be able to configure the program at a controlled moment\n\n    plBegin(\"Generate some random values\");\n    for(int i=0; i<100000; ++i) {\n        int value = globalMinValue + rand()%(globalMaxValue+1-globalMinValue);\n        plData(\"random data\", value);       // Here are the \"useful\" values\n    }\n    plEnd(\"\");                              // Shortcut for plEnd(\"Generate some random values\")\n\n    plStopAndUninit();                      // Stop and uninitialize the instrumentation\n    return 0;\n}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n</details>\n\nSome C++ performance figures (see [here](https://dfeneyrou.github.io/palanteer/index.html#performance) for more details):\n  - nanosecond resolution and ~25 nanoseconds cost per event on a standard x64 machine\n  - up to ~5 millions events per second when recording, bottleneck on the server processing side\n  - up to ~150 000 events per second when processing the flow through a Python script, bottleneck on the Python script side\n\n## Python instrumentation example\n\nExecution of unmodified Python programs can be analyzed directly with a syntax similar to the one of `cProfile`, as a large part of the instrumentation is automated by default:\n   - Functions enter/leave\n   - Interpreter memory allocations\n   - All raised exceptions\n   - Garbage collection runs\n   - Coroutines\n\nIn some cases, a manual instrumentation which enhances or replaces the automatic one is desired. <br/>\nThe example below is an equivalent of the C++ code above, but in Python:\n\n<details>\n  <summary> See Python manual instrumentation example code </summary>\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ python\n#! /usr/bin/env python3\nimport sys\nimport random\nfrom palanteer import *\n\nglobalMinValue, globalMaxValue =  0, 10\n\n# Handler (=implementation) of the example CLI, which sets the range\ndef setBoundsCliHandler(minValue, maxValue):              # 2 parameters (both integer) as declared\n    global globalMinValue, globalMaxValue\n    if minValue>maxValue:                                 # Case where the CLI execution fails (non null status). The text answer contains some information about it\n        return 1, \"Minimum value (%d) shall be lower than the maximum value (%d)\" % (minValue, maxValue)\n\n    # Modify the state of the program\n    globalMinValue, globalMaxValue = minValue, maxValue\n    # CLI execution was successful (null status)\n    return 0, \"\"\n\n\ndef main(argv):\n    global globalMinValue, globalMaxValue\n\n    plInitAndStart(\"example\")                             # Start the instrumentation\n    plDeclareThread(\"Main\")                               # Declare the current thread as \"Main\", so that it can be identified more easily in the script\n    plRegisterCli(setBoundsCliHandler, \"config:setRange\", \"min=int max=int\", \"Sets the value bounds of the random generator\")  # Declare the CLI\n    plFreezePoint()                                       # Add a freeze point here to be able to configure the program at a controlled moment\n\n    plBegin(\"Generate some random values\")\n    for i in range(100000):\n        value = int(globalMinValue + random.random()*(globalMaxValue+1-globalMinValue))\n        plData(\"random data\", value)                      # Here are the \"useful\" values\n    plEnd(\"\")                                             # Shortcut for plEnd(\"Generate some random values\")\n\n    plStopAndUninit()                                     # Stop and uninitialize the instrumentation\n\n# Bootstrap\nif __name__ == \"__main__\":\n    main(sys.argv)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n</details>\n\n\n## Scripting example\n\nBoth examples above (C++ and Python) can be remotely controlled with a simple Python script.\n\nTypical usages are:\n  - Tests based on stimulation/configuration with CLI and events observation, as data can also be traced\n  - Evaluation of the program performance\n  - Monitoring\n  - ...\n\n<details>\n  <summary> See a scripting example code (Python) </summary>\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ python\n#! /usr/bin/env python3\nimport sys\nimport palanteer_scripting as ps\n\ndef main(argv):\n    if len(sys.argv)<2:\n        print(\"Error: missing parameters (the program to launch)\")\n        sys.exit(1)\n\n    # Initialize the scripting module\n    ps.initialize_scripting()\n\n    # Enable the freeze mode so that we can safely configure the program once stopped on its freeze point\n    ps.program_set_freeze_mode(True)\n\n    # Launch the program under test\n    ps.process_launch(sys.argv[1], args=sys.argv[2:])\n    # From here, we are connected to the remote program\n\n    # Configure the selection of events to receive\n    my_selection = ps.EvtSpec(thread=\"Main\", events=[\"random data\"]) # Thread \"Main\", only the event \"random data\"\n    ps.data_configure_events(my_selection)\n\n    # Configure the program\n    status, response = ps.program_cli(\"config:setRange min=300 max=500\")\n    if status!=0:\n        print(\"Error when configuring: %s\\nKeeping original settings.\" % response)\n\n    # Disable the freeze mode so that the program resumes its execution\n    ps.program_set_freeze_mode(False)\n\n    # Collect the events as long as the program is alive or we got some events in the last round\n    qty, sum_values, min_value, max_value, has_worked = 0, 0, 1e9, 0, True\n    while ps.process_is_running() or has_worked:\n        has_worked = False\n        for e in ps.data_collect_events(timeout_sec=1.):  # Loop on received events, per batch\n            has_worked, qty, sum_values, min_value, max_value = True, qty+1, sum_values+e.value, min(min_value, e.value), max(max_value, e.value)\n\n    # Display the result of the processed collection of data\n    print(\"Quantity: %d\\nMinimum : %d\\nAverage : %d\\nMaximum : %d\" % (qty, min_value, sum_values/max(qty,1), max_value))\n\n    # Cleaning\n    ps.process_stop()            # Kills the launched process, if still running\n    ps.uninitialize_scripting()  # Uninitialize the scripting module\n\n\n# Bootstrap\nif __name__ == \"__main__\":\n    main(sys.argv)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n</details>\n\nThe execution of this last script, with the compile C++ as parameter, gives the following output:\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n> time ./remoteScript.py example\nQuantity: 100000\nMinimum : 300\nAverage : 400\nMaximum : 500\n./remoteScript.py example  0.62s user 0.02s system 24% cpu 2.587 total\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDetails can be found [here](https://dfeneyrou.github.io/palanteer/index.html#overview/commonfeatures/remotecontrol).\n\n## Logging\n\nLogs are timestamped printf-like messages that contain a severity level and a category for easier filtering.\n\nNanosecond efficiency is reached by leveraging compile-time pre-computations and deferring formatting on the viewer side. <br/>\nConsole display can also be enabled dynamically, for easy local debugging.\n\nExample:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ C++\nplLogDebug(\"input\", \"Key '%c' pressed\", pressedKeyChar);\n\nplLogInfo(\"computation result\", \"The resulting value of the phase %-20s is %g with the code 0x%08x\",\n          phaseStr, floatResult, errorCode);\n\nplLogWarn(\"phase\", \"End of a computation\");\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAn [internal comparison](https://dfeneyrou.github.io/palanteer/index.html#easyandefficientlogging) with the popular `spdlog` and the performant `Nanolog` (Standford) shows that`Palanteer`:\n  - is ~50x faster at runtime than `spdlog` and only twice slower than `Nanolog`\n  - is 6x faster for compiling a log call than `spdlog` and 10x faster than `Nanolog`\n  - provides more flexibility on the log selection at compile time, and the possibility to obfuscate all static strings.\n  - can provide more context around logs, like simultaneous tracing, and a powerful viewer for filtering and visualizing (all log arguments can be graphed)\n\n\n## Documentation\n\nThe complete documentation is accessible inside the repository, and online:\n  - [Introduction](https://dfeneyrou.github.io/palanteer/index.html)\n  - [Getting started](https://dfeneyrou.github.io/palanteer/getting_started.md.html)\n  - [Base concepts](https://dfeneyrou.github.io/palanteer/base_concepts.md.html)\n  - [C++ instrumentation API](https://dfeneyrou.github.io/palanteer/instrumentation_api_cpp.md.html)\n  - [C++ instrumentation configuration](https://dfeneyrou.github.io/palanteer/instrumentation_configuration_cpp.md.html)\n  - [Python instrumentation API](https://dfeneyrou.github.io/palanteer/instrumentation_api_python.md.html)\n  - [Scripting API](https://dfeneyrou.github.io/palanteer/scripting_api.md.html)\n  - [More](https://dfeneyrou.github.io/palanteer/more.md.html)\n\n## OS Support\n\nViewer and scripting library:\n  - Linux 64 bits\n  - Windows 10\n\nInstrumentation libraries:\n   - Linux 32 or 64 bits (tested on PC and armv7l)\n   - Windows 10\n   - Support for virtual threads\n     - in [C++](https://dfeneyrou.github.io/palanteer/instrumentation_api_cpp.md.html#c++instrumentationapi/virtualthreads) (userland threads, like fibers)\n     - in [Python](https://dfeneyrou.github.io/palanteer/instrumentation_api_python.md.html#virtualthreads) (asyncio / gevent)\n\n## Requirements\n\nPalanteer is lean, its full installation requires only usual components:\n  - a C++14+ compiler (gcc, clang or MSVC) in Windows 10 or Linux 64 bits for the viewer and scripting module\n  - a C++11+ compiler (tested with gcc, clang and MSVC) 32 or 64 bits for the C++ instrumentation library\n  - CPython 3.7+\n  - OpenGL 3.3+\n\nIn particular, the C++ single-header instrumentation library requires only C++11 or above.\n\nSee [here](https://dfeneyrou.github.io/palanteer/index.html#requirements) for more details on the requirements per component.\n\nOther dependencies are snapshotted inside this repository, so for information only:\n\n| Dependency name                  | License type                | URL                                            |\n|----------------------------------|-----------------------------|------------------------------------------------|\n| Khronos OpenGL API and Extension | MIT                         | https://www.khronos.org/registry/OpenGL/api/GL |\n| Dear ImGui                       | MIT                         | https://github.com/ocornut/imgui               |\n| stb                              | Public domain               | https://github.com/nothings/stb                |\n| Fonts 'Roboto-Medium.ttf'        | Apache License, Version 2.0 | https://fonts.google.com/specimen/Roboto       |\n| ZStandard                        | BSD                         | https://facebook.github.io/zstd                |\n| Markdeep                         | BSD                         | https://casual-effects.com/markdeep            |\n\n\n## License\n\nThe instrumentation libraries are under the MIT license.\n\nThe viewer and the Python scripting module are under the AGPLv3+.\n\nSee [LICENSE.md](LICENSE.md) for details.\n\n\n## Warning: Beta state\n\nEven if no major bugs are known and special care has been taken to test as many cases as possible, this project is young and in beta state.\n\nYour feedback and raised issues are warmly welcome to improve its quality, especially as it aims at improving software quality...\n\nThe state of the \"interfaces\" is:\n  - **Instrumentation API**: stable, no big changes planned\n  - **Client-server protocol**: still evolving. The induced constraint is that the servers and instrumentation libraries shall match.\n  - **Record storage**: still evolving. The impact of compatibility breaks is that older records cannot be read anymore.\n\nInterface stability and support of older versions is planned when the project is more mature. At the moment, such constraint would clamp down on its evolution.\n"
        },
        {
          "name": "c++",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}