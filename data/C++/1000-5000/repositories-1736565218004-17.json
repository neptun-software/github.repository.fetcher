{
  "metadata": {
    "timestamp": 1736565218004,
    "page": 17,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ConfettiFX/The-Forge",
      "stars": 4896,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 4.91015625,
          "content": "---\n# BasedOnStyle:  LLVM\nAccessModifierOffset: -4\nAlignAfterOpenBracket: Align\n#AlignArrayOfStructures: Left\nAlignConsecutiveAssignments: None\nAlignConsecutiveBitFields: None\nAlignConsecutiveDeclarations: AcrossComments\nAlignConsecutiveMacros: AcrossEmptyLinesAndComments \nAlignEscapedNewlines: Left\nAlignOperands:   Align\nAlignTrailingComments: true\nAllowAllArgumentsOnNextLine: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortEnumsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLambdasOnASingleLine: All\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: true\nBinPackParameters: true\nBitFieldColonSpacing: Both\n#BreakAfterAttributes: Never\nBreakAfterJavaFieldAnnotations: false\n#BreakArrays:     true\nBreakBeforeBinaryOperators: None\nBreakBeforeConceptDeclarations: true\nBreakBeforeBraces: Allman\n#BreakBeforeInlineASMColon: OnlyMultiline\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializers: AfterColon\nBreakInheritanceList: AfterColon\nBreakStringLiterals: true\nColumnLimit:     140\nCompactNamespaces: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: false\nDerivePointerAlignment: false\nDisableFormat:   false\n#EmptyLineAfterAccessModifier: Never\nEmptyLineBeforeAccessModifier: LogicalBlock\nFixNamespaceComments: true\nIncludeBlocks:   Regroup\nIncludeCategories:\n  - Regex:           'pch.h[\">]$'\n    Priority:        -100\n    SortPriority:    0\n    CaseSensitive:   true\n  - Regex:           'Interfaces\\/IMemory.h[\">]$'\n    Priority:        100\n    SortPriority:    0\n    CaseSensitive:   true\n  - Regex:           '\\/(Config.h|AuraConfig.h)[\">]$'\n    Priority:        1\n    SortPriority:    0\n    CaseSensitive:   true\n  - Regex:           'ThirdParty\\/'\n    Priority:        3\n    SortPriority:    0\n    CaseSensitive:   true\n  - Regex:           'Interfaces\\/'\n    Priority:        4\n    SortPriority:    0\n    CaseSensitive:   true\n  - Regex:           '\\.fsl[\">]$'\n    Priority:        7\n    SortPriority:    0\n    CaseSensitive:   false\n  - Regex:           '^<[[:alnum:]_\\-\\.\\/]+>$'\n    Priority:        2\n    SortPriority:    0\n    CaseSensitive:   false\n  - Regex:           '^\"[[:alnum:]_\\-\\.]+\"$'\n    Priority:        6\n    SortPriority:    0\n    CaseSensitive:   false\n  - Regex:           '.*'\n    Priority:        5\n    SortPriority:    0\n    CaseSensitive:   false\nIncludeIsMainRegex: '(Impl)?$'\n#IndentAccessModifiers: false\nIndentCaseBlocks: false\nIndentCaseLabels: false\nIndentExternBlock: NoIndent\nIndentGotoLabels: true\nIndentPPDirectives: None\nIndentRequires: true\nIndentWidth:     4\nIndentWrappedFunctionNames: false\n#InsertBraces:    false\n#InsertNewlineAtEOF: true\nInsertTrailingCommas: None\n#IntegerLiteralSeparator:\n#  Binary:          0\n#  BinaryMinDigits: 0\n#  Decimal:         0\n#  DecimalMinDigits: 0\n#  Hex:             0\n#  HexMinDigits:    0\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\n#LambdaBodyIndentation: Signature\n#LineEnding:      CRLF\nUseCRLF: true\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 4\nObjCBreakBeforeNestedBlockParam: true\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\n#PackConstructorInitializers: Never\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\n#PenaltyBreakOpenParenthesis: 0\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyIndentedWhitespace: 0\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerAlignment: Left\n#PPIndentWidth:   -1\n#QualifierAlignment: Left\n#ReferenceAlignment: Pointer\nReflowComments:  true\n#RemoveBracesLLVM: false\n#RemoveSemicolon: false\n#RequiresClausePosition: OwnLine\n#RequiresExpressionIndentation: OuterScope\n#SeparateDefinitionBlocks: Always\n#ShortNamespaceLines: 1\nSortIncludes: false\nSortJavaStaticImport: Before\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: false\nSpaceAroundPointerQualifiers: Default\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCaseColon: false\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: false\nSpaceBeforeInheritanceColon: false\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceBeforeSquareBrackets: false\nSpaceInEmptyBlock: false\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles: false\nSpacesInConditionalStatement: false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\n#SpacesInLineCommentPrefix:\n#  Minimum:         1\n#  Maximum:         -1\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Latest\nTabWidth:        4\nUseTab:          Never\n...\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 6.087890625,
          "content": "# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# Visual Studio\n**/.vs/\n**/.vscode/\n**/x64/\n**.vcxproj.user\n**.user\n**.log\n**.VC.db\n**.ilk\n**.pdb\n**.ipdb\n**.iobj\n**/UpgradeLog.htm\n\n#  Visual Studio User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# Pycharm IDE files\n**.idea\n**.bak\n\n# Android build artifacts\nExamples_3/Unit_Tests/Android_VisualStudio2017/Android-*\nExamples_3/Unit_Tests/Android_VisualStudio2019/Android-*\nExamples_3/Visibility_Buffer/Android_VisualStudio2017/Android-*\nExamples_3/Visibility_Buffer/Android_VisualStudio2019/Android-*\nExamples_3/Visibility_Buffer2/Android_VisualStudio2019/Android-*\nExamples_3/Ephemeris/Android_VisualStudio2017/Android-*\nExamples_3/Ephemeris/Android_VisualStudio2019/Android-*\n**/.gradle\n**/.agde\nCommon_3/OS/Android/Packaging/build/**\n\n#Quest build artifacts\nExamples_3/Visibility_Buffer/Quest_VisualStudio2019/Android-*\nExamples_3/Unit_Tests/Quest_VisualStudio2019/Android-*\nExamples_3/Ephemeris/Quest_VisualStudio2019/Android-*\n\n##Xcode User settings\nxcuserdata/\n## compatibility with Xcode 8 and earlier (ignoring not required starting Xcode 9)\n*.xcscmblueprint\n*.xccheckout\n\n# General Apple\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Art\n# Art/\nArt.zip\nPBR.zip\n# Examples_3/Unit_Tests/Textures/PBR/\n\n# Binary Shaders\n**/D3D12/Binary/\n**/Vulkan/Binary/\n**/D3D11/Binary/\n**/Metal/Binary/\n**/D3D12/Compiled/\n**/Shaders/Compiled/\n\n# ReloadServer\n**/reload-server.txt\n**/server-log.txt\n\n# MacOS Common Shaders\nExamples_3/Aura/macOS Xcode/The-Forge/Shaders/\nExamples_3/Ephemeris/macOS Xcode/The-Forge/Shaders/\nExamples_3/Unit_Tests/macOS Xcode/The-Forge/Shaders/\nExamples_3/Aura/macOS Xcode/The-Forge/CompiledShaders/\nExamples_3/Ephemeris/macOS Xcode/The-Forge/CompiledShaders/\nExamples_3/Unit_Tests/macOS Xcode/The-Forge/CompiledShaders/\n\n# Automatically Generated Files\n**/Renderer/IRendererDLL.h\n**/Renderer/Renderer.cpp\n\n# Obj folders\n/**/obj/\n/**/bin/\n/**/macOS\\ Xcode/**/Bin/\n/**/macOS\\ Xcode/**/build/\n**/Xcode_Cache/\n**/Xcode_Cache_Sanitizers/\n**/BinSanitizers/\n\n# Nuget packages\nTools/ShaderBuildCommand/packages/\n**/ThirdParty/OpenSource/hlslparser/Ext/ShaderTranslator/packages/\n\n# Linux / SteamOS_CodeLite files\n/**/SteamOS_CodeLite/.codelite/\n/**/SteamOS_CodeLite/.cache/\n/**/SteamOS_CodeLite/.build-debug/\n/**/SteamOS_CodeLite/.build-release/\n/**/SteamOS_CodeLite/*/*.mk\n/**/SteamOS_CodeLite/*/*.txt\n/**/SteamOS_CodeLite/Makefile\n/**/SteamOS_CodeLite/*/Debug\n/**/SteamOS_CodeLite/*/Release\n/**/Linux/*/*.mk\n/**/Linux/*/*.txt\n/**/Linux/*.mk\n/**/Linux/*.txt\n/**/Linux/*/Debug\n/**/Linux/*/Release\n/**/Linux/Debug\n/**/Linux/Release\n/**/Linux/.codelite/\n/**/Linux/.build-debug/\n/**/Linux/.build-release/\n/**/Linux/Makefile\nExamples_3/Visibility_Buffer/SteamOS_CodeLite/SpirVTools/*/*.txt\nCommon_3/Resources/AnimationSystem/ThirdParty/OpenSource/ozz-animation/Ubuntu/*/*.txt\nCommon_3/Tools/BunyArchive/codelite/*.mk\nCommon_3/Tools/BunyArchive/codelite/.*\nCommon_3/Tools/BunyArchive/codelite/Debug/*\nCommon_3/Tools/BunyArchive/codelite/Release/*\nCommon_3/Tools/BunyArchive/codelite/Makefile\nCommon_3/Tools/BunyArchive/codelite/*.txt\n**/tags\nCommon_3/Tools/BunyArchive/Xcode/Debug/*\n\n# Generated animation files\n*.ozz\n/**/ThirdParty/OpenSource/ozz-animation/**/*.mk\n/**/Tools/AssetPipeline/Apple/Release/\n/**/Tools/AssetPipeline/Apple/Debug/\n\n#assimp ignores\n/**/ThirdParty/OpenSource/assimp/4.1.0/**/*.mk\n/**/ThirdParty/OpenSource/assimp/4.1.0/**/build/\n/**/ThirdParty/OpenSource/assimp/4.1.0/**/Build/\n/**/ThirdParty/OpenSource/assimp/4.1.0/**/test/\n/**/ThirdParty/OpenSource/assimp/4.1.0/**/tools/\n/**/ThirdParty/OpenSource/assimp/4.1.0/**/Temp/\n/**/ThirdParty/OpenSource/assimp/4.1.0/**/Bin/\n/**/ThirdParty/OpenSource/assimp/4.1.0/**/assimp.txt/\n/**/ThirdParty/OpenSource/assimp/4.1.0/**/Assimp.txt/\n\n#Memleak files\n*.memleaks\n\n#PVS-Studio files\n*.PVS-Studio.*\n\n#MTuner files\n*.MTuner\n\n#SDF files\n/**/Unit_Tests/SDF/\n\n# Build artifacts\n/Examples_3/Visibility_Buffer/SteamOS_CodeLite/**/*.mk\n/Examples_3/Visibility_Buffer/SteamOS_CodeLite/**/*.mk\n/Examples_3/Unit_Tests/SteamOS_CodeLite/**/*.mk\n/Examples_3/Unit_Tests/SteamOS_CodeLite/**/*.mk\n/**/Ubuntu/**/*.txt\n\n/**/linux/**/*.txt\n/Common_3/Tools/AssetPipeline/Linux/*.txt\nCommon_3/Tools/AssetPipeline/Linux/.build-\n/Common_3/Tools/AssetPipeline/Linux/AssetPipelineCmd.mk\n/Common_3/Tools/AssetPipeline/Linux/.cache/\n/Common_3/Tools/AssetPipeline/Linux/compile_commands.json\nCommon_3/Tools/ThirdParty/OpenSource/ISPCTextureCompressor/Linux/ispc_texcomp.mk\nCommon_3/Tools/ThirdParty/OpenSource/ISPCTextureCompressor/Linux/ispc_texcomp.txt\nCommon_3/Tools/ThirdParty/OpenSource/ISPCTextureCompressor/Linux/compile_flags.txt\n/Examples_3/Unit_Tests/SteamOS_CodeLite/compile_commands.json\n/Examples_3/Unit_Tests/SteamOS_CodeLite/.codelite\n/Examples_3/Visibility_Buffer/SteamOS_CodeLite/compile_commands.json\n/Examples_3/Visibility_Buffer2/SteamOS_CodeLite/compile_commands.json\n\n/Examples_3/Visibility_Buffer/SteamOS_CodeLite/.build\n/Examples_3/Visibility_Buffer/SteamOS_CodeLite/.build-release\n\n/Examples_3/Visibility_Buffer/SteamOS_CodeLite/.codelite\n/Examples_3/Visibility_Buffer/SteamOS_CodeLite/*/Debug\n/Examples_3/Visibility_Buffer/SteamOS_CodeLite/*/Release\n**.results\n**.BenchmarkCompare\n\n#Parser\n/**/Parser/**/TestData/\n\n#Python\n*.pyc\n\n#Noesis\nCommon_3/Application/ThirdParty/noesisgui/Lib\nCommon_3/Application/ThirdParty/noesisgui/SDK/_build/**/build\n!Common_3/Application/ThirdParty/noesisgui/SDK/_build/*.sln\n!Common_3/Application/ThirdParty/noesisgui/SDK/_build/*.vcxproj\n!Common_3/Application/ThirdParty/noesisgui/SDK/_build/*.vcxproj.filters\n\n#ISPC Texture compressor generated files\n/Common_3/Tools/ThirdParty/OpenSource/ISPCTextureCompressor/ispc_texcomp/kernel_*.h\n\n#Benchmarks\n/**/**Benchmarks/**\n\n#clang-format\n**/clang-tools/clang-format-files.txt\n**/clang-tools/out-files.txt\n"
        },
        {
          "name": "Common_3",
          "type": "tree",
          "content": null
        },
        {
          "name": "Examples_3",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.1005859375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright (c) 2017 - 2024 The Forge Interactive Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "PRE_BUILD.bat",
          "type": "blob",
          "size": 0.408203125,
          "content": ":: ENTRY POINT\n::\n@echo off\n@SETLOCAL EnableDelayedExpansion\n\n:: Change active working directory in case we run script for outside of TheForge\ncd /D \"%~dp0\"\n\nset filename=Art.zip\nif exist %filename% (\n    del %filename%\n)\n\necho Pulling Art Assets\n\"Tools/wget\" -O %filename% http://www.conffx.com/%filename%\n\necho Unzipping Art Assets...\n\"Tools/7z\" x %filename% -y > NUL\n\necho Finishing up...\ndel %filename%\n\nexit /b 0\n"
        },
        {
          "name": "PRE_BUILD.command",
          "type": "blob",
          "size": 0.5400390625,
          "content": "#!/bin/bash\n\n# Change active working directory in case we run script for outside of TheForge\ncd \"$(dirname \"$0\")\"\n\nfilename=Art.zip\n\nrm $filename\n\ncurl -L -o $filename http://www.conffx.com/$filename\nunzip -o $filename\n\n# rsync --remove-source-files -a \"./Art/PBR/\" \"./Examples_3/Unit_Tests/UnitTestResources/Textures/PBR\"\nif [ -d \"Art/ZipFilesDds\" ]; then\n\tmv -f \"Art/ZipFilesDds\" \"Examples_3/Unit_Tests/UnitTestResources\"\nfi\nif [ -d \"Art/ZipFilesKtx\" ]; then\n\tmv -f \"Art/ZipFilesKtx\" \"Examples_3/Unit_Tests/UnitTestResources\"\nfi\n\nrm $filename\n\nexit 0\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 95.3271484375,
          "content": "<img src=\"Screenshots/The Forge - Colour Black Landscape.png\" width=\"108\" height=\"46\" />\n\nThe Forge Framework (TM) is a cross-platform programming framework supporting the following platforms:\n- Windows 10/11 \n    * with DirectX 12 \n    * with DXR \n    * DirectX 11 fallback for older Windows platforms\n* Steam Deck\n    * with Vulkan 1.1\n    * with VK_KHR_ray_query Ray Tracing API\n- Android Pie or higher\n  * with Vulkan 1.1\n* Apple\n    * iOS 14.1 / 17.0\n    * iPad OS 14.1 / 17.0\n    * macOS 11.0 / 14.0, with Intel and Apple silicon support\n- Quest 2 using Vulkan 1.1\n- XBOX One / XBOX One X / XBOX Series S/X *\n- PS4 / PS4 Pro *\n- PS5 *\n- Switch using Vulkan 1.1 *\n\n*(the console platforms are only available for accredited developers on request. Please note that you need a license from us to use the console platforms.)\n\nThe Forge Framework (TM) (TF) provides building blocks to \n- extend \n   * Existing game engines so that they support more platforms (Starfield ...)\n   * Old games (e.g. 20+ years) can be brought back to modern gaming platforms\n   * … and/or write custom game engines from scratch (most notable Supergiant Hades, Hypixel Game Engine)\n- write SDKs (Adreno SDK, Oculus / Qualcomm VR SDKs, Dolby AR SDK, Dolby Vision etc.), enable new technology (Google Stadia, Dolby Vision, Meta App framework etc.)\n- Supports most of the gaming platforms\nAs such it is a core part of our service business.\n\nWe offer many platforms (PC, macOS / iOS, Android, Steamdeck, Quest) under the Apacke License Version 2.0 here on Github. \nWe offer a commercial license for game consoles (Playstation, XBOX, and Switch). \n\n\nHere is an overview:\n![The Forge Overview](Screenshots/TheForgeOverview.png) \n\n- Game Layer (partially provided)\n- App\n- Renderer / Scene (not provided) / Resource Streaming (not provided) / Resource Loading / Animation\n- Graphics / OS / Utilities\nWhat is not there: Physics / Networking / Sound\n\nThe \"lego\" High-Level Features supported on all platforms are at the moment:\n- Resource Loader capable to load textures, buffers and geometry data asynchronously\n- [Lua Scripting System](https://www.lua.org/) - currently used for automatic testing and in 06_Playground to load models and textures and animate the camera and in several other unit tests to cycle through the options they offer during automatic testing.\n- Animation System based on [Ozz Animation System](https://github.com/guillaumeblanc/ozz-animation)\n- Consistent Math Library  based on an extended version of [Vectormath](https://github.com/glampert/vectormath) with NEON intrinsics for mobile platforms. It also supports now Double precision.\n- Consistent Memory Managament: \n  * on GPU following [Vulkan Memory Allocator](https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator) and the [D3D12 Memory Allocator](https://github.com/GPUOpen-LibrariesAndSDKs/D3D12MemoryAllocator)\n  * on CPU [Fluid Studios Memory Manager](http://www.paulnettle.com/)\n- Custom Input system library with Gestures for Touch devices written in C\n- Fast Entity Component System based on [flecs](https://github.com/SanderMertens/flecs) \n- Cross-platform FileSystem C API, supporting disk-based files, memory streams, and files in zip archives\n- UI system based on [Dear imGui](https://github.com/ocornut/imgui) extended for touch input devices\n- Shader Translator using a superset of HLSL as the shader language, called The Forge Shading Language. There is a Wiki page on [The Forge Shading Language](https://github.com/ConfettiFX/The-Forge/wiki/The-Forge-Shading-Language-(FSL))\n- Various implementations of high-end Graphics Effects and game engine sub-systems as shown in the unit tests below\n\nPlease find a link and credits for all open-source packages used at the end of this readme.\n\n<a href=\"https://discord.gg/hJS54bz\" target=\"_blank\"><img src=\"Screenshots/Discord.png\" \nalt=\"Twitter\" width=\"20\" height=\"20\" border=\"0\" /> Join the Discord channel at https://discord.gg/hJS54bz</a>\n\n<a href=\"https://twitter.com/TheForge_FX?lang=en\" target=\"_blank\"><img src=\"Screenshots/twitter.png\" \nalt=\"Twitter\" width=\"20\" height=\"20\" border=\"0\" /> Join the channel at https://twitter.com/TheForge_FX?lang=en</a>\n\nThe Forge Interactive Inc. is a [Khronos member](https://www.khronos.org/members/list)\n \n\n\n<!---\n# Build Status \n\n[![Windows](https://github.com/ConfettiFX/The-Forge/actions/workflows/build_windows.yml/badge.svg)](https://github.com/ConfettiFX/The-Forge/actions/workflows/build_windows.yml)\n[![MacOS + iOS](https://github.com/ConfettiFX/The-Forge/actions/workflows/build_macos.yml/badge.svg)](https://github.com/ConfettiFX/The-Forge/actions/workflows/build_macos.yml)\n[![Linux](https://github.com/ConfettiFX/The-Forge/actions/workflows/build_linux.yml/badge.svg)](https://github.com/ConfettiFX/The-Forge/actions/workflows/build_linux.yml)\n[![Android + Meta Quest](https://github.com/ConfettiFX/The-Forge/actions/workflows/build_android.yml/badge.svg)](https://github.com/ConfettiFX/The-Forge/actions/workflows/build_android.yml)\n--->\n\n# News\n\n## Release 1.60 - October 11th, 2024 - GPU Work Graphs | Filesystem Refactor | Window System Refactor Phase 1 \n\n### GPU Work Graphs\nWe are testing GPU Work Graphs now for a while. We see opportunities to implement more complex compute driven interactions, which helps us to move towards GPU-driven rendering more and more. The current example runs the clear buffers and triangle culling in a GPU Work Graph if GPU Work Graphs are supported. Otherwise it takes the old path. So visually there is no change.\n\n### Filesystem Refactor\nWe data drive the everything in a game engine. For the file system, we finally managed to implement that too in the public repository. We also removed unnecessary copies and symlinks. Please note our file system consists of \"two\" file systems. One for the run-time and one for tools. You can't ship a tools file system in a game :-) I know that this is well known but people always want to check if a path is right, a directory exists, a file exists, before they load this one file ... yeaahh ... so our run-time file system prevents that from happening.\n\n### Window System Refactor Phase 1\nWith the on-going challenges in the area of upscaling and general window management on Operating systems that support windows, we decided to refactor our window system to bring it up to existing standards and allow us to integrate upscalers easier. Currently most upscalers do not consider the pixel center, they were written by people who never studied Bresenham's algorithm. We wanted to make sure our upscaler actually works without introducing Moire patterns or strong staircase effects like the ones currently promoted by hardware vendors.\nWe will add more functionality in Phase 2 ... \n\n### Steamdeck \nWe are pushing forward in making Steamdeck a first class citizen. It represents our Linux run-time efforts, so we can switch if its necessary to any Linux distro ... \n\n\n\n## Release 1.59 - September 6th, 2024 - STAR WARS™: Bounty Hunter™ | Replaced Gainput with our own Input library | Removed Vulkan from Windows Run-Time | Removed API Switch | Third-Party Integration\n\nSTAR WARS™: Bounty Hunter™\nBounty Hunter was ported with the help of The Forge Framework to all the platforms mentioned in the screenshot:\n[![STAR WARS™: Bounty Hunter™](Screenshots/StarWars.png)](https://www.youtube.com/watch?v=jiBmgse9GTc)\n\n### Replaced Gainput with our own Input library\nWe wrote a new input library from scratch in C. Its design follows the architecture of the rendering API. So one high-level interface file IInput.h and then platform specific files for each of the target devices. It has less lines of code compared to gainput and is easier to maintain for a small team. We are still testing it as we speak. Let us know if you see any bugs.\n\n### Removed Vulkan from Windows Run-time\nOver the last couple of years in many of our projects, it became apparent that the best option to ship a PC / Windows game is DirectX 12. The main reason is the reduced QA effort and reliability. The other reason is that we constantly get forced to upgrade on PC to a newer version, while mobile -which is the more important platform- stays far behind. So we are not officially supporting the Vulkan run-time on Windows anymore. We have an internal version that we test and obviously we support Vulkan on Android, Switch and Steamdeck (native support).\n\n### Removed API Switch from the Run-time\nConcluding that Vulkan is not a good API for PC anymore, we removed the switching functionality we had in there before to switch between DirectX 12 and Vulkan on PC and OpenGL ES 2.0 and Vulkan on Android.\nFor Android we utilized the switching functionality to switch between OpenGL ES 2.0 and Vulkan for a business class application that we helped to build (Facebook Application framework). This was necessary to run on billions of mobile devices. Looking at the latest numbers it doesn't make sense for us to support OpenGL ES 2.0 and therefore we dropped support and also don't need switching anymore.\n\n### Removed Commercial Middleware from GitHub\nWe decided to remove our commercial middleware from GitHub. Development will now happen in our internal repositories only.\n\n### Commercial Console licenses\nFor the last seven years we offered TF for free to anyone asking. We are going to change this now for the console platforms XBOX, Playstation and Switch. You will require a commercial license to use those from here on.\n\n### Removed unit tests\n- 09a_HybridRaytracing\n\n### Third-Party Libraries\nWe are improving our Third-Party Library integration substantially by making the ones we use more integrated into The Forge Eco System. While doing so we removed the ones we do not use anymore. Here is a list:\n- soloud\n- rmem\n- cjson\n- MTuner\n- TinyXML\n\n\n## Release 1.58 - June 17th, 2024 Behemoth | Compute-Driven Mega Particle System | Triangle Visibility Buffer 2.0 Update\n\n### Announce trailer for Behemoth\nWe helped Skydance Interactive to optimize Behemoth last year. Click on the image below to see the announce trailer:\n\n[![Behemoth Trailer from June 2024](Screenshots/Behemoth/Behemoth.png)](https://youtu.be/hTmjjzwSp-E?si=rj0G6yrqv5Cr6Gn9)\n\n\n### Compute-Based Mega Particle System\nThis unit test was based on some of our research into software rasterization and GPU-driven rendering. A particle system completely running in very few compute shaders with one large buffer holding most of the data. Like with all things GPU-Driven, the trick is to execute one compute shader once on one buffer to reduce read / write memory bandwidth. Although this is not new wisdom, you will be surprised how many particle systems get this still wrong ... having compute shaders for each stage of the particle life time or even worse doing most of the particle work on the CPU.\nThis particle system was demoed last year in a few talks in September on a Samsung S22. Here are the slides:\n\nhttp://www.conffx.com/WolfgangEngelParticleSystem.pptx \n\n\nIt is meant to be used to implement next-gen Mega Particle systems in which we simulate always 100000th or millions of particles at once instead of the few dozen ones contemporary systems simulate. \n\n#### Android Samsung S22 1170x540 resolution\nThis screenshot shows 4 million firefly-like particles, with 10000 lights attached to them and 8 shadows. Those numbers were thought to be not possible on mobile phones before.\n![Mega Particle System Android Samsung S22](Screenshots/Particle%20System/AndroidS22_1170x540.png) \n\n#### Android Samsung S23 1170x540 resolution\nSame setting as above.\n![Mega Particle System Android Samsung S23](Screenshots/Particle%20System/Android_S23_1170x540.png)\n\n#### Android Samsung S24 1170x540 resolution\nSame setting as above. \n![Mega Particle System Android Samsung S24](Screenshots/Particle%20System/Android_S24_1170x540.png) \n\n#### PS5 running at 4K\n![Mega Particle System PS5](Screenshots/Particle%20System/PS5_4K.png) \n\n#### Windows with AMD RX 6400 at 1080p\n![Mega Particle System PC Windows](Screenshots/Particle%20System/Windows_1080p.png) \n\n\n### Triangle Visibility Buffer 2.0\nwe have the new compute based TVB 2.0 approach now running on all platforms (on Android only S22). You can download slides from the I3D talk from\n\nhttp://www.conffx.com/I3D-VisibilityBuffer2.pptx \n\n\n\n\n## Release 1.57 - May 8th, 2024 Visibility Buffer 2.0 Prototype | Visibility Buffer 1.0 One Draw call  \n\n### Visibility Buffer Research - I3D talk\n\nWe are giving a talk about our latest Visibility Buffer research on I3D. Here is a short primer what it is about:\n\nThe original idea of the Triangle Visibility Buffer is based on an article by [[burns2013]. [schied15] and [schied16] extended what was described in the original article. Christoph Schied implemented a modern version with an early version of OpenGL (supporting MultiDrawIndirect) into The Forge Framework in September 2015. \nWe ported this code to all platforms and simplified and extended it in the following years by adding a triangle filtering stage following [chajdas] and [wihlidal17] and a new way of shading.\nOur on-going improvements simplified the approach incrementally and the architecture started to resemble what was described in the original article by [burns2013] again, leveraging the modern tools of the newer graphics APIs. \nIn contrast to [burns2013], the actual storage of triangles in our implementation of a Visibility Buffer happens due to the triangle removal and draw compaction step with an optimal “massaged” data set.\nBy having removed overdraw in the Visibility Buffer and Depth Buffer, we run a shading approach that shades everything with one regular draw call. We called the shading stage Forward++ due to its resemblance to forward shading and its usage of a tiled light list for applying many lights. It was a step up from Forward+ that requires numerous draw calls.\nWe described all this in several talks at game industry conferences, for example on GDCE 2016 [engel16] and during XFest 2018, showing considerable performance gains due to reduced memory bandwidth compared to traditional G-buffer based rendering architectures. \nA blog post that was updated over the years for what we call now Triangle Visibility Buffer 1.0 (TVB 1.0) can be found here [engel18]. \n\nOver the last years we extended this original idea with a Order-Independent Transparency approach (it is more efficient to sort triangle IDs in a per-pixel linked list compared to storing layers of a G-Buffer), software VRS and then we developed a Visibility Buffer approach that doesn't require draw calls to fill the depth and Visibility Buffer and one that requires much less draw calls in parallel. \nThis release offers -what we call- an updated Triangle Visibility Buffer 1.0 (TVB 1.0) and a prototype for the Triangle Visibility Buffer 2.0 (TVB 2.0).\n\nThe changes to TVB 1.0 are evolutionary. We used to map each mesh to an indirect draw element. This reuqired the use of DrawID to map back to the per-mesh data. When working on a game engine with a very high amount of draw calls, it imposed a limitation on the number of \"draws\" we could do, due to having only a limited number of bits available in the VB.\nAdditionally, instancing was implemented using a separate instanced draw for each instanced mesh. We refactored the data flow between the draws and the shade pass.\nThere is now no reliance on DrawID and instances are handled transparently using the same unified draw. This both simplifies the flow of data and allows us to draw more \"instanced\" meshes.\nApart from being able to use a very high-number of draw calls, the performance didn't change.\n\nThe new TVB 2.0 approach is revolutionary in a sense that it doesn't use draw calls anymore to fill the depth and visibility buffer. There are two compute shader invocations that filter triangles and eventually fill the depth and visibility buffer. \nNot using draw calls anymore, makes the whole code base more consistent and less convoluted -compared to TVB 1.0-. \n\nYou can find now the new Visibilty Buffer 2 approach in \n\nThe-Forge\\Examples_3\\Visibility_Buffer2\n\nThis is still in an early stage of development. We only support a limited number of platforms: Windows D3D12, PS4/5, XBOX, and macOS / iOS.\n\n\n### Sanitized initRenderer\nwe cleaned up the whole initRenderer code. Merged GPUConfig into GraphicsConfig and unified naming. \n\n### Metal run-time improvements\nWe improved the Metal Validation Support. \n\n### Art\nEverything related to Art assets is now in the Art folder.\n\n### Bug fixes\nLots of fixes.\n\nReferences:\n[burns2013] Christopher A. Burns, Warren A. Hunt, \"The Visibility Buffer: A Cache-Friendly Approach to Deferred Shading\", 2013, Journal of Computer Graphics Techniques (JCGT) 2:2, Pages 55 - 69.\n\n[schied2015] Christoph Schied, Carsten Dachsbacher, \"Deferred Attribute Interpolation for Memory-Efficient Deferred Shading\" , Kit Publication Website: http://cg.ivd.kit.edu/publications/2015/dais/DAIS.pdf\n\n[schied16] Christoph Schied, Carsten Dachsbacher, \"Deferred Attribute Interpolation Shading\", 2016, GPU Pro 7, Pages \n\n[chajdas] Matthaeus Chajdas, GeometryFX, 2016, AMD Developer Website http://gpuopen.com/gaming-product/geometryfx/\n\n[wihlidal17] Graham Wihlidal, \"Optimizing the Graphics Pipeline with Compute\", 2017, GPU Zen 1, Pages 277--320\n\n[engel16] Wolfgang Engel, \"4K Rendering Breakthrough: The Filtered and Culled Visibility Buffer\", 2016, GDC Vault: https://www.gdcvault.com/play/1023792/4K-Rendering-Breakthrough-The-Filtered\n\n[engel18] Wolfgang Engel, \"Triangle Visibility Buffer\", 2018, Wolfgang Engel's Diary of a Graphics Programmer Blog http://diaryofagraphicsprogrammer.blogspot.com/2018/03/triangle-visibility-buffer.html\n\n\n## Release 1.56 - April 4th, 2024 I3D | Warzone Mobile | Visibility Buffer | Aura on macOS | Ephemeris on Switch | GPU breadcrumbs | Swappy in Android | Screen-space Shadows | Metal Debug Markers improved\n\n\n### I3D \nWe are sponsoring I3D again. Come by and say hi! We also will be giving a talk on the new development around Triangle Visibility Buffer.\n\n\n[![I3D Sponsorship](Screenshots/I3D/Platinum%20Sponsor.png)](https://i3dsymposium.org/2024/)\n\n\n### Warzone Mobile launched\nWe work on Warzone Mobile since August 2020. The game launched on March 21, 2024.\n\n![Warzone Mobile](Screenshots/Warzone%20Mobile/cod-warzone-eng-1_11zon.jpg) \n\n![Warzone Mobile](Screenshots/Warzone%20Mobile/WZM-LIMITEDRELEASE-1128-TOUT.jpg) \n\n### Visibility Buffer\nWe removed CPU cluster culling and simplified the animation data usage. Now traingle filtering only takes one dispatch each frame again.\n\n### Swappy frame pacer is now vailable in Android/Vulkan\nWe integrated the [Swappy](https://developer.android.com/games/sdk/frame-pacing) frame pacer into the Android / Vulkan eco system. \n\n\n### GPUCfg system improved with more ids and less string compares\nwe did another pass on the GPUCfg system and now we can generate the vendor Ids and model Ids with a python script to keep the *_gpu.data list easily up to date for each platform. \nWe removed most of the name comparisons and replaced them with the id comparisons which should speed up parsing time and is more specific.\n\n### Screen-Space Shadows in UT9\nWe added to the number of shadow approaches in that unit test screen-space shadows. These are complementary to regular shadow mapping and add more detail. We also fixed a number of inconsistencies with the other shadow map approaches.\n\nPS5 - Screen-Space Shadows on\n![Screen-Space Shadows PS5](Screenshots/Screen-Space-Shadows/Prospero/PS5-1-20240401-0031.png) \n\nPS5 - Screen-Space Shadows off\n![Screen-Space Shadows PS5](Screenshots/Screen-Space-Shadows/Prospero/PS5-1-20240401-0032.png) \n\nNintendo Switch\n![Screen-Space Shadows Switch](Screenshots/Screen-Space-Shadows/Switch/XAL02100097362-20240401-0007.PNG) \n\nPS4\n![Screen-Space Shadows PS4](Screenshots/Screen-Space-Shadows/Orbis/PS4-1-20240401-0051.png) \n\n\n### GPU breadcrumbs on all platforms\nNow you can have GPU crash reports on all platforms. We skipped OpenGL ES and DX11 so ...\n\nA simple example of a crash report is this:\n\n2024-04-04 23:44:08 [MainThread     ] 09a_HybridRaytracing.cp:1685   ERR| [Breadcrumb] Simulating a GPU crash situation (RAYTRACE SHADOWS)...\n2024-04-04 23:44:10 [MainThread     ] 09a_HybridRaytracing.cp:2428  INFO| Last rendering step (approx): Raytrace Shadows, crashed frame: 2\n\nWe will extend the reporting a bit more over time.\n\n\n### Ephemeris now also runs on Switch ... \n\n\n## Release 1.55 - March 1st, 2024 - Ephemeris | gpu.data | Many bug fixes and smaller improvements\n\n### Ephemeris 2.0 Update \nWe improved Ephemeris again and support it now on more platforms. Updating some of the algorithms used and adding more features. \n\n\n[![Ephemeris 2.0 on February 28th, 2024](https://github.com/ConfettiFX/Custom-Middleware/blob/master/Ephemeris/Screenshots/apple_m1.png)](https://vimeo.com/918128458)\n\n\nNow we are supporting PC, XBOX'es, PS4/5, Android, Steamdeck, iOS (requires iPhone 11 or higher  (so far not Switch)\n\n\nEphemeris on XBOX Series X\n![Ephemeris 2.0 on February 28th, 2024](https://github.com/ConfettiFX/Custom-Middleware/blob/master/Ephemeris/Screenshots/scarlet.png)\n\nEphemeris on Android\n![Ephemeris 2.0 on February 28th, 2024](https://github.com/ConfettiFX/Custom-Middleware/blob/master/Ephemeris/Screenshots/android.png)\n\nEphemeris on PS4\n![Ephemeris 2.0 on February 28th, 2024](https://github.com/ConfettiFX/Custom-Middleware/blob/master/Ephemeris/Screenshots/PS4.png)\n\nEphemeris on PS5\n![Ephemeris 2.0 on February 28th, 2024](https://github.com/ConfettiFX/Custom-Middleware/blob/master/Ephemeris/Screenshots/PS5.png)\n\n\n\n### IGraphics.h \nWe changed the graphics interface for cmdBindRenderTargets\n\n```\n// old\nDECLARE_RENDERER_FUNCTION(void, cmdBindRenderTargets, Cmd* pCmd, uint32_t renderTargetCount, RenderTarget** ppRenderTargets, RenderTarget* pDepthStencil, const LoadActionsDesc* loadActions, uint32_t* pColorArraySlices, uint32_t* pColorMipSlices, uint32_t depthArraySlice, uint32_t depthMipSlice)\n// new\nDECLARE_RENDERER_FUNCTION(void, cmdBindRenderTargets, Cmd* pCmd, const BindRenderTargetsDesc* pDesc)\n```\nInstead of a long list of parameters we now provide a struct that gives us enough flexibility to pack more functionality in there.\n\n### Variable Rate Shading\nWe added Variable Rate Shading to the Visibility Buffer OIT example test 15a. This way we have a better looking test scene with St. Miguel.\n\nVRS allows rendering parts of the render target at different resolution based on the auto-generated VRS map, thus achieving higher performance with minimal quality loss. It is inspired by Michael Drobot's SIGGRAPH 2020 talk: https://research.activision.com/publications/2020-09/software-based-variable-rate-shading-in-call-of-duty--modern-war\n\nThe key idea behind the software-based approach is to render everything in 4xMS targets and use a stencil buffer as a VRS map. VRS map is automatically generated based on the local image gradients.\nIt could be used on a way wider range of platforms and devices than the hardware-based approach since the hardware VRS support is broken or not supported on many platforms. Because this software approach utilizes 2x2 tiles we could also achieve higher image quality compared to hardware-based VRS.\n\nShading rate view based on the color per 2x2 pixel quad:\n- White – 1 sample (top left, always shaded);\n- Blue – 2 horizontal samples;\n- Red – 2 vertical samples;\n- Green – all 4 samples;\n\nPC\n![VRS](Screenshots/UT%2015a/vrs_original1.png) \n\nDebug Output with the original Image on PC\n![VRS](Screenshots/UT%2015a/vrs_map_debug_vs_original1.png) \n\nPC\n![VRS](Screenshots/UT%2015a/vrs_original2.png) \n\nDebug Output with the original Image on PC\n![VRS](Screenshots/UT%2015a/vrs_map_debug_vs_original2.png) \n\nAndroid\n![VRS](Screenshots/UT%2015a/original2.jpg) \n\nDebug Output with the original Image on Android\n![VRS](Screenshots/UT%2015a/debug_vs_original2.jpg) \n\nAndroid\n![VRS](Screenshots/UT%2015a/original3.jpg) \n\nDebug Output with the original Image on Android\n![VRS](Screenshots/UT%2015a/debug_vs_original3.jpg) \n\n\nExample 15a_VisibilityBufferOIT now has an additional option to toggle VRS - \"Enable Variable Rate Shading\"\nThe Debug view can now be toggled with the \"Draw Debug Targets\" option. This shows the auto-generated VRS map if VRS is enabled.\n\nLimitations:\n\tRelies on programmable sample locations support – not widely supported on Android devices.\n\nSupported platforms:\nPS4, PS5, all XBOXes, Nintendo Switch, Android (Galaxy S23 and higher), Windows(Vulkan/DX12), macOS/iOS.\n\n\n### gpu.data\nYou want to check out those files. They are now dedicated per supported platform. So it is easier for us to differ between different Playstations, XBOX'es, Switches, Android, iOS etc..\n\n### Unlinked Multi GPU\nThe Unlinked Multi GPU example was broken on AMD 7x GPUs with Vulkan. We fixed it.\n\n### Vulkan\nwe track GPU memory now and will extend this to other platforms.\n\n### Vulkan mobile support\nWe support now the VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME extension\n\n### Remote UI \nVarious bug fixes to make this more stable. Still alpha ... will crash.\n\n\n### Retired:\n- 35 Variable Rate Shading ... this went into the Visibility Buffer OIT example 15a.\n- Basis Library - after not having found any practical usage case, we removed Basis again.\n\n\n\n## Release 1.54 - February 2nd, 2024 - Remote UI Control | Shader Server | Visibility Buffer | Asset Pipeline | GPU Config System | macOS/iOS | Lots more ...\nOur last release was in October 2022. We were so busy that we lost track of time. In March 2023 we planned to make the next release. We started testing and fixing and improving code up until today. The amount of improvements coming back from the -most of the time- 8 - 10 projects we are working on where so many, it was hard to integrate all this, test it and then maintain it. To a certain degree our business has higher priority than making GitHub releases but we realize that letting a lot of time pass makes it substantially harder for us to get the whole code base back in shape, even with a company size of nearly 40 graphics programmers. So we cut down functional or unit tests, so that we have less variables. We also restructured large parts of our code base so that it is easier to maintain. One of the constant maintenance challenges were the macOS / iOS run-time (More about that below). \nWe invested a lot in our testing environment. We have more consoles now for testing and we also have a much needed screenshot testing system. We outsource testing to external service providers more. We removed Linux as a stand-alone target but the native Steamdeck support should make up for this. \nWe tried to be conservative about increasing API versions because we know on many platforms our target group will use older OS or API implementations. Nevertheless we were more adventurous this year then before. So we bumped up with a larger step than in previous years.\nOur next release is planned for in about four weeks time. We still have work to do to bring up a few source code parts but now the increments are much smaller. \nIn the meantime some of the games we worked on, or are still working on, shipped:\n\nForza Motorsport has launched in the meantime:\n\n![Forza Motorsport](Screenshots/Forza/Forza-Motorsport-Photo-Mode-Effects-Menu.jpg)\n\nStarfield has launched:\n\n![Starfield](Screenshots/Starfield/starfield-screenshot-new-atlantis-1536x864.jpg)\n\nNo Man Sky has launched on macOS:\n\n![No Man's Sky](Screenshots/NoMansSky/NoMansSky.png)\n![No Man's Sky](Screenshots/NoMansSky/NoMansSky_2.png)\n\n\n### Internal automated testing setup on our internal GitLab server \n- Our automated testing setup that tests all the platforms now takes 38 minutes for one run. At some point it was more. We revamped this substantially since the last release adding now screenshot comparisons and a few extra steps for static code analysis. \n\n### Visibility Buffer \n- the Visibility Buffer went through a lot of upgrades since October 2022. I think the most notable ones are:\n  * Refactored the whole code so that it is easier to re-use in all our examples, there is now a dedicated Visibility Buffer directory holding this code\n  * Animation of characters is now integrated (https://github.com/ConfettiFX/The-Forge/wiki/Triangle-Visibility-Buffer-Pre-Skinned-Animations)\n  * Tangent and Bi-Tangent calculation is moved to the pixel shader and we removed the buffers\n\n\n\n### Software Variable Rate Shading\n\nThis Unit test represents software-based variable rate shading (VRS) technique that allows rendering parts of the render target at different resolution based on the auto-generated VRS map, thus achieving higher performance with minimal quality loss. It is inspired by Michael Drobot's SIGGRAPH 2020 talk: https://docs.google.com/presentation/d/1WlntBELCK47vKyOTYI_h_fZahf6LabxS/edit?usp=drive_link&ouid=108042338473354174059&rtpof=true&sd=true\n\nPC Windows (2560x1080):\n![Variable Rate Shading on PC](Screenshots/35_VariableRateShading_Win10_RX7600_2560x1080.png)\n\nSwitch (1280x720):\n![Variable Rate Shading on Switch](Screenshots/35_VariableRateShading_Switch_1280x720.PNG)\n\nXBOX One S (1080p):\n![Variable Rate Shading on XBOX One S](Screenshots/35_VariableRateShading_XboxOneS_1920x1080.png)\n\nPS4 Pro (3840x2160):\n![Variable Rate Shading on XBOX One S](Screenshots/35_VariableRateShading_PS4Pro_3840x2160.png)\n\nThe key idea behind the software-based approach is to render everything in 4xMS targets and use a stencil buffer as a VRS map. The VRS map is automatically generated based on the local image gradients.\nThe advantage of this approach is that it runs on a wider range of platforms and devices than the hardware-based approach since the hardware VRS support is broken or not supported on many platforms. Because this software approach utilizes 2x2 tiles we can also achieve higher image quality compared to hardware-based VRS.\n\nShading rate view based on the color per 2x2 pixel quad:\n- White – 1 sample (top left, always shaded);\n- Blue – 2 horizontal samples;\n- Red – 2 vertical samples;\n- Green – all 4 samples;\n\n![Variable Rate Shading Debug](Screenshots/35_VRS_Debug.png)\n\nUI description:\n- Toggle VRS – enable/disable VRS\n- Draw Cubes – enable/disable dynamic objects in the scene\n- Toggle Debug View – shows auto-generated VRS map if VRS is enabled\n- Blur kernel Size – change blur kernel size of the blur applied to the background image to highlight performance benefits of the solution by making fragment shader heavy enough.\nLimitations:\n\tRelies on programmable sample locations support – not widely supported on Android devices.\n\nSupported platforms:\n\nPS4, PS5, all XBOXes, Nintendo Switch, Android (Galaxy S23 and higher), Windows(Vulkan/DX12).\nImplemented on MacOS/IOS, but doesn’t give expected performance benefits due to the issue with stencil testing on that platform\n\n### Shader Server\n\nTo enable re-compilation of shaders during run-time we implemented a cross-platform shader server that allows to recompile shaders by pressing CTRL-S or a button in a dedicated menu.\nYou can find the documentation in the Wiki in the FSL section.\n\n### Remote UI Control\nWhen working remotely, on mobile or console  it can cumbersome to control the development UI.\nWe added a remote control application in Common_3\\Tools\\UIRemoteControl which allows control of all UI elements on all platforms.\nIt works as follows:\n- Build and Launch the Remote Control App located in Common_3/Tools/UIRemoteControl\n- When a unit test is started on the target application (i.e. consoles), it starts listening for connections on a part (8889 by default)\n- In the Remote Control App, enter the target ip address and click connect\n\n![Remote UI Control](Screenshots/Remote%20UI.jpg)\n\nThis is alpha software so expect it to crash ...\n\n\n### VK_EXT_device_fault support\nThis extension allows developers to query for additional information on GPU faults which may have caused device loss, and to generate binary crash dumps.\n\n\n### Ray Queries in Ray Tracing\n\nWe switched to Ray Queries for the common Ray Tracing APIs on all the platforms we support. The current Ray Tracing APIs increase the amount of memory necessary substantially, decrease performance and can't add much visually because the whole game has to run with lower resolution, lower texture resolution and lower graphics quality (to make up for this, upscalers were introduced that add new issues to the final image). \nBecause Ray Tracing became a Marketing term valuable to GPU manufacturers, some game developers support now Ray Tracing to help increase hardware sales. So we are going with the flow here by offering those APIs.\n\nmacOS (1440x810)\n![Ray Queries on macOS](Screenshots/Raytracing/16_Raytracing_M2Mac_1440x810.png)\n\nPS5 (3840x2160)\n![Ray Queries on PS5](Screenshots/Raytracing/16_Raytracing_PS5_3840x2160.png)\n\nWindows 10 (2560x1080)\n![Ray Queries on Windows 10](Screenshots/Raytracing/16_Raytracing_Win10_RX7600_2560x1080.png)\n\nXBOX One Series X (1920x1080)\n![Ray Queries on XBOX One Series X](Screenshots/Raytracing/16_Raytracing_XboxSeriesX_1920x1080.png)\n\niPhone 11 (Model A2111) at resolution 896x414\n![Ray Queries on iOS](Screenshots/Raytracing/16_Raytracing_iOS.png)\n\nWe do not have a denoiser for the Path Tracer.\n\n\n### GPU Configuration System\n\nThis is a cross-platform system that can track GPU capabilities on all platforms and switch on and off features of a game for different platforms. To read a lot more about this follow the link below.\n\n[GPU Configuration system](##-GPU-Config-System)\n\n\n### New macOS / iOS run-time\n\nWe think the Metal API is a well balanced Graphics API that walks the path between low-level and high-level very well. We ran into one general problem with the Metal API for both platforms. It is hard to maintain the code base. There is an architectural problem that was probably introduced due to lack in experience in shipping games.\nIn essence what Apple decided to do is have calls like this:\n\nhttps://developer.apple.com/documentation/swift/marking-api-availability-in-objective-c\n\nAnything a hardware vendor describes as available and working might not be working with the next upgrade of the operating system, hardware or just the API or XCode. \nIf you have a few hundred of those macros in your code, it becomes a lottery what works and what not on a variety of hardware. On some hardware one is broken, on the other hardware something else.\nSo there are two ways to deal with this: for every @available macro you start adding a #define to switch off or replace that code based on the underlying hardware and software platform. You would have to manually track if what the macro says is true on a wide range of platforms with different outcome.\nSo for example on macOS 10.13 running on a certain Macbook Pro (I make this up) with an Intel GPU it is broken but then a very similar Macbook Pro that has additionally a dedicated GPU actually runs it. Now you have to track what \"class of Macbook Pro\" we are talking about and if the Macbook Pro in question has an Intel or an AMD GPU. \nWe track all this data already so that is not a problem. We know exactly what piece of hardware we are looking at (see above GPU Config system). \nThe problem is that we have to guard every @available macro with some of this. From a QA standpoint that generates an explosion of QA requests. To cut down on the number of variables we decided to focus only on calls that are available in two different macOS and two different iOS versions. Here is the code in iOperatingSystem.h\n\n```\n// Support fixed set of OS versions in order to minimize maintenance efforts\n// Two runtimes. Using IOS in the name as iOS versions are easier to remember\n// Try to match the macOS version with the relevant features in iOS version\n#define IOS14_API     API_AVAILABLE(macos(11.0), ios(14.1))\n#define IOS14_RUNTIME @available(macOS 11.0, iOS 14.1, *)\n\n#define IOS17_API     API_AVAILABLE(macos(14.0), ios(17.0))\n#define IOS17_RUNTIME @available(macOS 14.0, iOS 17.0, *)\n```\n\n\n### Dynamic Rendering extension - VK_KHR_dynamic_rendering\nWe were one of the big proponents of the Dynamic Rendering extension. As game developers we took over part of the driver development by adopting Vulkan as a Graphics API. The cost of game production rose substantially due to that because our QA efforts had to be increased to deal with an API that is more lower level. \nOne of the interesting findings that were made by many who adopted Vulkan in games is that a Vulkan run-time in most cases runs slower on the GPU compared to the DirectX 11 run-time. It is very hard to optimize a Vulkan run-time to run as fast as a DirectX 11 run-time on the GPU. This is due to parts of the responsibilities having shifted from the device driver writer to the game developer. The main advantage of using Vulkan is the lower CPU overhead. While older DirectX 11 drivers were so inefficiently programmed that they were bringing down high-end PC CPUs and did not allow anymore to run two GPUs in SLI / Crossfire (hence the practical death of multi-GPU support for games), Vulkan has a substantially lower CPU overhead. \nSo that being said the one thing that shouldn't have been moved from the driver into the game developer space is the render pass concept. It is so close to the hardware that device driver writers can deal much better with it then game developers. In our measurements of tiled hardware renderers, using tiles never had a positive effect. We can imagine a device driver writer with direct access to the hardware can make tiles run much faster than we can.\nThis is why we embrace the dynamic rendering extension.\n\n\n\n### Removed glTF loading from the resource loader\nglTF is an art exchange format but not suitable to load game assets. There are mostly two reasons for this: it doesn't make sense to load one glTF file for each \"model\" and it also doesn't make sense to load one glTF file for a scene because that would not allow streaming. Generally the way we load art assets is in one large zipped file with one \"fopen\" call. To not use any other OS calls we load from this large file all the assets by looking into a look-up table, find the address in memory, run a pointer there and then copy the data into system memory (that was a simplified view but should suffice for this purpose). To allow streaming depending on the type of game, we pre-package art assets in meaningful ways so when we load on demand they are as expected.\nglTF does not align with this concept or the fact that we compress data to fit into our internal caches. In other words it doesn't make sense to use glTF during run-time of a game.\n\nThe Asset Pipeline now loads and converts and optimizes glTF data into our internal format offline. This can be adjusted to the needs of any type of game and represents currently a proof-of-concept.\n\n\n### Unified the art assets to St. Miguel\nToday there is no point in using Sponza as a test scene anymore. One can argue that even St. Miguel does not fullfil that purpose. Nevertheless it is currently the best we got. We removed all Sponza art assets and replaced them with St. Miguel.\n\n\n### Updated Wiki Documentation\nWe updated the Wiki documentation. Check it out. We know it could be more ...\n\n- Retired functional / unit tests\n  - 04_ExecuteIndirect - it is used now extensively in the Visibility Buffer ... we don't need that test anymore\n  - 07_Tessellation - similar to geometry shaders, the tessellation shaders never really worked out. So we are removing the unit test\n  - 18_VirtualTexture - similar to geometry shader and tessellation shader, this didn't seem to have worked out ... support became more spotty ... so better remove it\n  - 33_YUV - looks like this never worked out and was only supported by a small amount of hardware / software combinations ... so not useful for game development\n  - 37_PrecomputedVolumeDLUT - a very specific technique that didn't show any new abilities, so we removed it\n  - 38_AmbientOcclusion_GTAO - the maintainer could not fix one bug in the implementation ... so we removed it until someone else can write a consistent implementation for all platforms\n\n\n\nSee the release notes from previous releases in the [Release section](https://github.com/ConfettiFX/The-Forge/releases).\n\n  \n# PC Windows Requirements:\n\n1. Windows\n    * Windows 10 1809 or higher\n    * Windows 11\n\n2. Latest GPU drivers\n    * AMD: https://www.amd.com/en/support\n    * Intel: https://www.intel.com/content/www/us/en/download-center/home.html\n    * NVIDIA: https://www.nvidia.com/download/index.aspx\n\n3. Visual Studio 2019 with Windows SDK 10.0.17763.0 (available in the Visual Studio Intaller)\n    * Direct downloads are also available at https://developer.microsoft.com/en-us/windows/downloads/sdk-archive\n\n4. The Forge now includes the Vulkan SDK 1.2.162, and does not require it to be separately installed on the system.\n\n6. The Forge is currently tested on \n    * AMD 6500, 6700 XT and others (various)\n    * NVIDIA GeForce 10x, 20x, 30x GPUs (various)\n\n\n# macOS Requirements:\n\n1. macOS & Xcode\n    * macOS 11.0 with Xcode 14.3.1, or\n    * macOS 14.0 with Xcode 15.0.1\n\n2. The Forge is currently tested on the following macOS devices:\n    * iMac Intel with AMD RADEON 580 (Part No. MNED2xx/A)\n    * iMac with M1 macOS 11.6\n    * Mac Mini M2 with MacOS 14.1\n\n\nAt this moment we do not have access to an iMac Pro or Mac Pro. We can test those either with Team Viewer access or by getting them into the office and integrating them into our build system.\nWe will not test any Hackintosh configuration. \n\n\n# iOS Requirements:\n\n1. iOS 14.1 or 17.0\n\n2. XCode: see macOS\n\nTo run the unit tests, The Forge requires an iOS device with an A9 or higher CPU (see [GPU Processors](https://developer.apple.com/library/content/documentation/DeviceInformation/Reference/iOSDeviceCompatibility/HardwareGPUInformation/HardwareGPUInformation.html) or see iOS_Family in this table [iOS_GPUFamily3_v3](https://developer.apple.com/metal/Metal-Feature-Set-Tables.pdf)). This is required to support the hardware tessellation unit test and the ExecuteIndirect unit test (requires indirect buffer support). \nThe Visibility Buffer doesn't run on older iOS devices because the [texture argument buffer](https://developer.apple.com/documentation/metal/fundamental_components/gpu_resources/understanding_argument_buffers) on those devices is limited to 31 (see [Metal Feature Set Table](https://developer.apple.com/metal/Metal-Feature-Set-Tables.pdf) and look for the entry \"Maximum number of entries in the texture argument table, per graphics or compute function\") , while on macOS it is 128, which we need for the bindless texture array. \n\nWe are currently testing on \n* iPhone 7 (Model A1778)\n* iPhone Xs Max (Model MT5D2LL/A)\n\n\n# iPad OS Requirements:\n\n1. iPadOS 14.1 or 17.0\n\n2. XCode: see macOS\n\nWe are currently testing on:\n    * iPad 6th gen (Model A1893)\n    * iPad Pro with M1 with 16.6\n\n\n# Steam Deck Requirements:\n\nA Steam Deck can be used to build and run a native Linux app using Vulkan.\n\nWe are currently testing on:\n    * Steam Deck LCD 512GB\n    * SteamOS 3.4.6\n    * CodeLite 17.0.0\n    * gcc 12.2.0\n\n\n## Steam Deck Environment Setup:\n1. Complete initial device setup to reach the main Steam Deck UI\n2. Hold down power button and select \"Desktop Mode\"\n3. Set password (and root password) through the settings UI under \"Users\" -> \"Change Password\"\n4. Disable SteamOS root partition readonly mode with `sudo steamos-readonly disable`. \n    - This setting is used by the system to protect programs from modifying its environment. You can restore it using `sudo steamos-readonly enable`\n5. Set up `pacman`:\n    1. `sudo pacman-key --init`\n    2. `sudo pacman-key --populate archlinux`\n    3. `sudo pacman-key --populate holo`\n    4. `sudo pacman-key --refresh-keys` (This command will take 15+ minutes to complete)\n6. Install development tools:\n    1. `sudo pacman -S glibc linux-api-headers git git-lfs base-devel libjpeg zlib curl libtiff libpng pcre2 expat libsecret gtk3 glib2 xz sdl fontconfig pango harfbuzz cairo gdk-pixbuf2 libx11 xorgproto atk freetype2 wayland libnotify qt5-base sqlite3 libssh linux-neptune-headers libarchive libxrandr libxrender systemd systemd-libs`\n        * Many of these packages are only partially installed by default to reduce SteamOS installation size.\n    2. `git lfs install`\n    3. Update pacman file database: `sudo pacman -Fy`\n        * `pacman -F <filename>` can be used to locate packages containing missing files, if you have additional dependencies for your project.\n    4. Install `yay`:\n        1. `mkdir /home/deck/.yay-install && cd /home/deck/.yay-install`\n        2. `git clone https://aur.archlinux.org/yay-bin.git .`\n        3. `makepkg -si`\n    5. Install CodeLite: `yay -S codelite`\n7. Setup The Forge:\n    * Clone The-Forge and Custom-Middleware next to each other, open the UbuntuCodelite workspace for one of the example solutions, and run.\n\n\n# Android Requirements:\n\n1. Android Phone with Android Pie (9.x) for Vulkan 1.1 support\n2. Visual Studio 2019\n3. Android API level 23 or higher\n\nAt the moment, the Android run-time does not support the following unit tests due to -what we consider- driver bugs or lack of support:\n    * 09a_HybridRayTracing\n    * 11_LinkedMultiGPU\n    * 11a_UnlinkedMultiGPU\n    * 16_RayTracing \n    * Aura\n    * Ephemeris\n\n4. We are currently testing on \n* [Samsung S20 Ultra (Qualcomm Snapdragon 865 (Vulkan 1.1.120))](https://www.gsmarena.com/samsung_galaxy_s20_ultra_5g-10040.php) with Android 10. Please note that this version uses the Qualcomm based chipset compared to the European version that uses the Exynos chipset.\n* [Samsung Galaxy Note9 (Qualcomm 845 Octa-Core (Vulkan 1.1.87))](https://www.samsung.com/us/business/support/owners/product/galaxy-note9-unlocked/) with Android 10.0. Please note this is the Qualcomm version only available in the US\n\n## Setup Android Environment\n- Download and install [.NET Core SDK 2.2](https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-2.2.107-windows-x64-installer)\n- Download and install [Android Game Development Extension (Version 23.1.82)](https://dl.google.com/android/agde/release/75/20230504-180905/AndroidGameDevelopmentExtension-2019-v23.1.82.vsix)\n    - Further reading: ([AGDE Quickstart](https://developer.android.com/games/agde/quickstart))\n- Download and extract [Java JDK 17.0.2](https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_windows-x64_bin.zip)\n    - Set the `JAVA_HOME` environment variable to the extracted `jdk-17.0.2` folder (which contains `bin`, `conf`, `include`, and other folders)\n- After AGDE installation, open the SDK Manager from the toolbar and:\n    - Install SDK\n    - Install Android NDK r21e (21.4.7075529). The versions might not be visible so be sure to check the \"Show Package Details\" option.\n    - Set `ANDROID_HOME` and `ANDROID_SDK_ROOT` environment variable to point at the installed SDK (usually `C:\\Android`)\n\n### Steps if You want to create a new Project\n\n1) Create a new project\n2) Project->Add Item->Android->Android APK\n3) Setup the properties of the project for the Android-arm64-v8a platform, this can be done using one of two ways:\n\n- You can copy the properties from any Unit Test.\n- Use the already provided `.props` files\n  - There are 2 `.props` files\n    1. `Common_3/IDE/Visual Studio/TF_Shared.props` can be added to the project using the property manager\n    2. `AGDEVersions.props` needs to be added manually into the project between the ` <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />` and `<Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />` lines (see Unit Tests for reference)\n\nFor link directories,\n- `$(SolutionDir)$(Platform)\\$(Configuration)\\` (this is where we have all our libs. set it accordingly)\n  - *NOTE* This can be avoided by adding our libs as references (Right-click project -> Add -> Reference -> Pick the ones you want to link -> Ok)\n\nNotes:\n- Add -lm to your project Linker Command Line options for if you get any undefined math operations error\n- If you get error related to \"cannot use 'throw' with exceptions disabled\", Enable exceptions in C++ Project settings\n- If you get error related to multiple instances of ioctl add BIONIC_IOCTL_NO_SIGNEDNESS_OVERLOAD in preprocessor definitions\n- If you get errors related to neon support not enabled -Enable Advance SIMD to Yes -Set floating point ABI to softfp\n\n# Quest 2 Requirements:\n1. Follow the Android setup instructions specified above\n2. Download OVR mobile sdk from oculus website.\n    - https://developer.oculus.com/downloads/package/oculus-mobile-sdk/\n    - Tested with ovr-mobile-sdk version 1.50\n3. Place unzipped sdk in `The-Forge/Common_3/ThirdParty/OpenSource/ovr_sdk_mobile`\n4. Run examples from `Examples_3/Unit_Tests/Quest_VisualStudio2019`. \nAs a side note the following examples may not be current compatible with the Quest:\n    * 05_FontRendering\n    * 13_UserInterface\n    * 17_EntityComponentSystem\n    * 33_YUV\n\n\n# Install \n * For PC Windows run PRE_BUILD.bat. It will download and unzip the art assets and install the shader builder extension for Visual Studio 2019.\n * For Linux and Mac run PRE_BUILD.command.\n  \n    It will only download and unzip required Art Assets (No plugins/extensions install). \n\n\n# Unit Tests\nThere are the following unit tests in The Forge:\n\n## 1. Transformation\n\nThis unit test just shows a simple solar system. It is our \"3D game Hello World\" setup for cross-platform rendering.\n\n![Image of the Transformations Unit test](Screenshots/01_Transformations.PNG)\n\n\n## 3. Multi-Threaded Rendering\n\nThis unit test shows how to generate a large number of command buffers on all platforms supported by The Forge. This unit test is based on [a demo by Intel called Stardust](https://software.intel.com/en-us/articles/using-vulkan-graphics-api-to-render-a-cloud-of-animated-particles-in-stardust-application).\n\n![Image of the Multi-Threaded command buffer generation example](Screenshots/03_MultiThreading.PNG)\n\n\n## 6. Material Playground\n\nThis unit test shows a range of game related materials:\n\nHair:\nMany years ago in 2012 / 2013, we helped AMD and Crystal Dynamics with the development of TressFX for Tomb Raider. We also wrote an article about the implementation in GPU Pro 5 and gave a few joint presentations on conferences like FMX. At the end of last year we revisited TressFX. We took the current code in the GitHub repository, changed it a bit and ported it to The Forge. It now runs on PC with DirectX 12 / Vulkan, macOS and iOS with Metal 2 and on the XBOX One. We also created a few new hair assets so that we can showcase it. Here is a screenshot of our programmer art:\n\n![Hair on PC](Screenshots/MaterialPlayground/06_MaterialPlayground_Hair_closup.gif)\n\nMetal:\n\n![Material Playground Metal on PC](Screenshots/MaterialPlayground/06_MaterialPlayground_Metal.png)\n\nWood:\n\n![Material Playground Wood on PC](Screenshots/MaterialPlayground/06_MaterialPlayground_Wood.png)\n\n\n\n## 9. Light and Shadow Playground\nThis unit test shows various shadow and lighting techniques that can be chosen from a drop down menu. There will be more in the future.\n\n * Exponential Shadow Map - this is based on [Marco Salvi's](https://pixelstoomany.wordpress.com/category/shadows/exponential-shadow-maps/) @marcosalvi papers. This technique filters out the edge of the shadow map by approximating the shadow test using exponential function that involves three subjects: the depth value rendered by the light source, the actual depth value that is being tested against, and the constant value defined by the user to control the softness of the shadow\n  * Adaptive Shadow Map with Parallax Correction Cache - this is based on the article \"Parallax-Corrected Cached Shadow Maps\" by Pavlo Turchyn in [GPU Zen 2](https://gpuzen.blogspot.com/2019/05/gpu-zen-2-parallax-corrected-cached.htm). It adaptively chooses which light source view to be used when rendering a shadow map based on a hiearchical grid structure. The grid structure is constantly updated depending on the user's point of view and it uses caching system that only renders uncovered part of the scene. The algorithm greatly reduce shadow aliasing that is normally found in traditional shadow map due to insufficient resolution. Pavlo Turchyn's paper from GPU Pro 2 added an additional improvement by implementing multi resolution filtering, a technique that approximates larger size PCF kernel using multiple mipmaps to achieve cheap soft shadow. He also describes how he integrated a Parallax Correction Cache to Adaptive Shadow Map, an algorithm that approximates moving sun's shadow on static scene without rendering tiles of shadow map every frame. The algorithm is generally used in an open world game to approximate the simulation of day & night’s shadow cycle more realistically without too much CPU/GPU cost.\n  * Signed Distance Field Soft Shadow - this is based on [Daniel Wright's Siggraph 2015](http://advances.realtimerendering.com/s2015/DynamicOcclusionWithSignedDistanceFields.pdf) @EpicShaders presentation. To achieve real time SDF shadow, we store the distance to the nearest surface for every unique Meshes to a 3D volume texture atlas. The Mesh SDF is generated offline using triangle ray tracing, and half precision float 3D volume texture atlas is accurate enough to represent 3D meshes with SDF. The current implementation only supports rigid meshes and uniform transformations (non-uniform scale is not supported). An approximate cone intersection can be achieved  by measuring the closest distance of a passed ray to an occluder which gives us a cheap soft shadow when using SDF.\n\nTo achieve  high-performance, the playground runs on our signature rendering architecture called Triangle Visibility Buffer. The step that generates the SDF data also uses this architecture.\n\nClick on the following screenshot to see a movie:\n\n[![Signed Distance Field Soft Shadow Map](Screenshots/LightNShadowPlayground/SDF_Visualize.png)](https://vimeo.com/352985038)\n\nThe following PC screenshots are taken on Windows 10 with a AMD RX550 GPU (driver 19.7.1) with a resolution of 1920x1080. \n\nExponential Shadow Maps:\n\n![Light and Shadow Playground - Exponential Shadow Map](Screenshots/LightNShadowPlayground/ExponentialShadowMap.png)\n\nAdaptive Shadow Map with Parallax Correction Cache\n\n![Adaptive Shadow Map with Parallax Correction Cache](Screenshots/LightNShadowPlayground/ASM_Two.png)\n\nSigned Distance Field Soft Shadow:\n\n![Signed Distance Field Soft Shadow Map](Screenshots/LightNShadowPlayground/SDF_1.png)\n\nSigned Distance Field Soft Shadows - Debug Visualization\n\n![Signed Distance Field Soft Shadow Map](Screenshots/LightNShadowPlayground/SDF_Visualize.png)\n\nThe following shots show Signed Distance Field Soft Shadows running on iMac with a AMD RADEON Pro 580\n\n![Signed Distance Field Soft Shadow Map](Screenshots/LightNShadowPlayground/SDF_macOS_1.png)\n\n![Signed Distance Field Soft Shadow Map](Screenshots/LightNShadowPlayground/SDF_macOS_2.png)\n\nThe following shots show Signed Distance Field Soft Shadows running on XBOX One:\n\n![Signed Distance Field Soft Shadow Map](Screenshots/LightNShadowPlayground/SDF_XBOX_1.png)\n\n![Signed Distance Field Soft Shadow Map](Screenshots/LightNShadowPlayground/SDF_XBOX_2.png)\n\n![Signed Distance Field Soft Shadow Map](Screenshots/LightNShadowPlayground/SDF_XBOX_3.png)\n\nReadme for Signed Distance Field Soft Shadow Maps:\n\nTo generate the SDF Mesh data you should select “Signed Distance Field” as the selected shadow type in the Light and Shadow Playground. There is a button called “Generate Missing SDF” and once its clicked, it shows a progress bar that represents the remaining SDF mesh objects utilized for SDF data generation. This process is multithreaded, so the user can still move around the scene while waiting for the SDF process to be finished. This is a long process and it could consume up to 8+ hours depending on your CPU specs. To check how many SDF objects there are presently in the scene, you can mark the checkbox \"Visualize SDF Geometry On The Scene\".\n\nThis unit test also supports screen-space shadows. These are complementary to regular shadow mapping and add more detail. We also fixed a number of inconsistencies with the other shadow map approaches.\n\nPS5 - Screen-Space Shadows on\n![Screen-Space Shadows PS5](Screenshots/Screen-Space-Shadows/Prospero/PS5-1-20240401-0031.png) \n\nPS5 - Screen-Space Shadows off\n![Screen-Space Shadows PS5](Screenshots/Screen-Space-Shadows/Prospero/PS5-1-20240401-0032.png) \n\nNintendo Switch\n![Screen-Space Shadows Switch](Screenshots/Screen-Space-Shadows/Switch/XAL02100097362-20240401-0007.PNG) \n\nPS4\n![Screen-Space Shadows PS4](Screenshots/Screen-Space-Shadows/Orbis/PS4-1-20240401-0051.png) \n\n\n## 9a. Hybrid Ray-Traced Shadows\nThis unit test was build by Kostas Anagnostou @KostasAAA to show how to ray trace shadows without using a ray tracing API like DXR / RTX. It should run on all GPUs (not just NVIDIA RTX GPUs) and the expectation is that it should run comparable with a DXR / RTX based version even on a NVIDIA RTX GPU. That means the users of your game do not have to buy a NVIDIA RTX GPU to enjoy HRT shadows :-)\n\n\n<!--![Hybrid Ray Traced Shadows](Screenshots/09a_HRT_Shadows.png)-->\n\nMac M2 (1440x838)\n![Hybrid Ray Traced Shadows](Screenshots/09a_HybridRaytracing_M2Mac_1440x838.png)\n\nPS4 Pro (3840x2160)\n![Hybrid Ray Traced Shadows](Screenshots/09a_HybridRaytracing_PS4Pro_3840x2160.png)\n\nSwitch (1280x720)\n![Hybrid Ray Traced Shadows](Screenshots/09a_HybridRaytracing_Switch_1280x720.PNG)\n\nXBOX One Series S (1080p)\n![Hybrid Ray Traced Shadows](Screenshots/09a_HybridRaytracing_XboxOneS_1920x1080.png)\n\niPad Pro 12.9-inch (5th generation) (Model A2378) (2733x2048)\n![Hybrid Ray Traced Shadows](Screenshots/09a_HRT_Shadows_iPad_2733x2048.png)\n\n## 10. Screen-Space Reflections\nThis test offers two choices: you can pick either Pixel Projected Reflections or AMD's FX Stochastic Screen Space Reflection. We just made AMD's FX code cross-platform. It runs now on Windows, Linux, macOS, Switch, PS and XBOX.\n\nHere are the screenshots of AMD's FX Stochastic Screen Space Reflections:\n\nWindows 10 (2560x1080)\n![AMD FX Stochastic Screen Space Reflections](Screenshots/SSSR/10_ScreenSpaceReflections_Win10_RX7600_2560x1080.png)\n\nPS4 PRO (3840x2160)\n![AMD FX Stochastic Screen Space Reflections](Screenshots/SSSR/10_ScreenSpaceReflections_PS4Pro_3840x2160.png)\n\nSwitch (1280x720)\n![AMD FX Stochastic Screen Space Reflections](Screenshots/SSSR/10_ScreenSpaceReflections_Switch_1280x720.PNG)\n\nMac M2 (1440x838)\n![AMD FX Stochastic Screen Space Reflections](Screenshots/SSSR/10_ScreenSpaceReflections_M2Mac_1440x838%20.png)\n\nXBOX One Series S (1080p)\n![AMD FX Stochastic Screen Space Reflections](Screenshots/SSSR/10_ScreenSpaceReflections_XboxOneS_1920x1080.png)\n\niPad Pro 12.9-inch (5th generation) (Model A2378) (1366x1024)\n![AMD FX Stochastic Screen Space Reflections](Screenshots/SSSR/10_ScreenSpaceReflections_IPad_1366x1024.PNG)\n<!--\nWindows final scene:\n![AMD FX Stochastic Screen Space Reflections](Screenshots/SSSR/SSSR_Scene_with_reflections.png)\n\nWithout denoising:\n![AMD FX Stochastic Screen Space Reflections before denoise](Screenshots/SSSR/SSSR_Reflections_only_defore_denoise.png)\n\nWith denoising:\n![AMD FX Stochastic Screen Space Reflections before denoise](Screenshots/SSSR/SSSR_Reflections_with_denoise.png)\n\nPS4:\n![AMD FX Stochastic Screen Space Reflections on PS4](Screenshots/SSSR/SSSR_on_PS4.png)\n\nmacOS:\n![AMD FX Stochastic Screen Space Reflections on macOS](Screenshots/SSSR/SSSR_on_macOS.png)\n\nIn case you pick Pixel-Projected Reflections, the application features an implementation of the papers [Optimized pixel-projected reflections for planar reflectors](http://advances.realtimerendering.com/s2017/PixelProjectedReflectionsAC_v_1.92.pdf) and [IMPLEMENTATION OF OPTIMIZED PIXEL-PROJECTED REFLECTIONS FOR PLANAR REFLECTORS](https://github.com/byumjin/Jin-Engine-2.1/blob/master/%5BByumjin%20Kim%5D%20Master%20Thesis_Final.pdf)\n\n![Image of the Pixel-Projected Reflections Unit test](Screenshots/10_Pixel-ProjectedReflections.png)\n-->\n\n## 11. Multi-GPU (Driver support only on PC Windows)\nThis unit test shows a typical VR Multi-GPU configuration. One eye is rendered by one GPU and the other eye by the other one.\n\n![Image of the Multi-GPU Unit test](Screenshots/11_MultiGPU.png)\n\n## 11a. Unlinked multiple GPUs (Driver support only on PC Windows)\nFor professional visualization applications, we now support unlinked multiple GPUs. A new renderer API is added to enumerate available GPUs. Renderer creation is extended to allow explicit GPU selection using the enumerated GPU list. Multiple Renderers can be created this way. The resource loader interface has been extended to support multiple Renderers. It is initialized with the list of all Renderers created. To select which Renderer (GPU) resources are loaded on, the NodeIndex used in linked GPU configurations is reused for the same purpose. Resources cannot be shared on multiple Renderers however, resources must be duplicated explicitly if needed. To retrieve generated content from one GPU to another (e.g. for presentation), a new resource loader operation is provided to schedule a transfer from a texture to a buffer. The target buffer should be mappable. This operation requires proper synchronization with the rendering work; a semaphore can be provided to the copy operation for that purpose. Available with Vulkan and D3D12. For other APIs, the enumeration API will not create a RendererContext which indicates lack of unlinked multi GPU support.\n\n![Image of the Unlinked Multiple GPUs Unit test](Screenshots/11a_UnlinkedMultipleGPUs.PNG)\n\n## 12. File System Test\nThis unit test showcases a cross-platform FileSystem C API, supporting disk-based files, memory streams, and files in zip archives. The API can be viewed in [IFileSystem.h](/Common_3/OS/Interfaces/IFileSystem.h), and all of the example code has been updated to use the new API.\n   * The API is based around `Path`s, where each `Path` represents an absolute, canonical path string on a particular file system. You can query information about the files at `Path`s, open files as `FileStream`s, and copy files between different `Path`s.\n   * The concept of `FileSystemRoot`s has been replaced by `ResourceDirectory`s. `ResourceDirectory`s are predefined directories where resources are expected to exist, and there are convenience functions to open files in resource directories. If your resources don’t exist within the default directory for a particular resource type, you can call `fsSetPathForResourceDirectory` to relocate the resource directory; see the unit tests for sample code on how to do this.\n   \n![File System Unit Test](Screenshots/12_FileSystem.png)\n\n\n\n\n## 14. Wave Intrinsics\nThis unit test shows how to use the new wave intrinsics. Supporting Windows with DirectX 12 / Vulkan, Linux with Vulkan and macOS / iOS.\n\n![Image of the Wave Intrinsics unit test in The Forge](Screenshots/15_WaveIntrinsics.png)\n\n## 15. Order-Independent Transparency\nThis unit test compares various Order-Indpendent Transparency Methods. In the moment it shows:\n- Alpha blended transparency\n- Weighted blended Order Independent Transparency [Morgan McGuire Blog Entry 2014](http://casual-effects.blogspot.com/2014/03/weighted-blended-order-independent.html) and [Morgan McGuire Blog Entry 2015](http://casual-effects.blogspot.com/2015/03/implemented-weighted-blended-order.html)\n- Weighted blended Order Independent Transparency by Volition [GDC 2018 Talk](https://www.gdcvault.com/play/1025400/Rendering-Technology-in-Agents-of)\n- Adaptive Order Independent Transparency with Raster Order Views [paper by Intel, supports DirectX 11, 12 only](https://software.intel.com/en-us/articles/oit-approximation-with-pixel-synchronization-update-2014), and a [Primer](https://software.intel.com/en-us/gamedev/articles/rasterizer-order-views-101-a-primer)\n- Phenomenological Transparency - Diffusion, Refraction, Shadows by [Morgan McGuire](https://casual-effects.com/research/McGuire2017Transparency/McGuire2017Transparency.pdf)\n![Image of the Order-Indpendent Transparency unit test in The Forge](Screenshots/14_OIT.png)\n\n## 15a. Visibility Buffer OIT\nThis unit test shows how to handle per triangle order-independent transparency in an intuitive way in the Visibility Buffer context. The main idea is that a per-pixel linked list of triangle IDs is holding layers of transparency. This is occupies less memory and is more efficient than storing per-pixel information.\n\nWe also added Variable Rate Shading to this unit test. This way we have a better looking test scene with St. Miguel.\n\nVRS allows rendering parts of the render target at different resolution based on the auto-generated VRS map, thus achieving higher performance with minimal quality loss. It is inspired by Michael Drobot's SIGGRAPH 2020 talk: https://docs.google.com/presentation/d/1WlntBELCK47vKyOTYI_h_fZahf6LabxS/edit?usp=drive_link&ouid=108042338473354174059&rtpof=true&sd=true\n\nThe key idea behind the software-based approach is to render everything in 4xMS targets and use a stencil buffer as a VRS map. VRS map is automatically generated based on the local image gradients.\nIt could be used on a way wider range of platforms and devices than the hardware-based approach since the hardware VRS support is broken or not supported on many platforms. Because this software approach utilizes 2x2 tiles we could also achieve higher image quality compared to hardware-based VRS.\n\nShading rate view based on the color per 2x2 pixel quad:\n- White – 1 sample (top left, always shaded);\n- Blue – 2 horizontal samples;\n- Red – 2 vertical samples;\n- Green – all 4 samples;\n\nPC\n![VRS](Screenshots/UT%2015a/vrs_original1.png) \n\nDebug Output with the original Image on PC\n![VRS](Screenshots/UT%2015a/vrs_map_debug_vs_original1.png) \n\nPC\n![VRS](Screenshots/UT%2015a/vrs_original2.png) \n\nDebug Output with the original Image on PC\n![VRS](Screenshots/UT%2015a/vrs_map_debug_vs_original2.png) \n\nAndroid\n![VRS](Screenshots/UT%2015a/original2.jpg) \n\nDebug Output with the original Image on Android\n![VRS](Screenshots/UT%2015a/debug_vs_original2.jpg) \n\nAndroid\n![VRS](Screenshots/UT%2015a/original3.jpg) \n\nDebug Output with the original Image on Android\n![VRS](Screenshots/UT%2015a/debug_vs_original3.jpg) \n\n\nExample 15a_VisibilityBufferOIT now has an additional option to toggle VRS - \"Enable Variable Rate Shading\"\nThe Debug view can now be toggled with the \"Draw Debug Targets\" option. This shows the auto-generated VRS map if VRS is enabled.\n\nLimitations:\n\tRelies on programmable sample locations support – not widely supported on Android devices.\n\nSupported platforms:\nPS4, PS5, all XBOXes, Nintendo Switch, Android (Galaxy S23 and higher), Windows(Vulkan/DX12), macOS/iOS.\n\n## 16. Path Tracer - Ray Tracing\nWe switched to Ray Queries for the common Ray Tracing APIs on all the platforms we support. The current Ray Tracing APIs increase the amount of memory necessary substantially, decrease performance and can't add much visually because the whole game has to run with lower resolution, lower texture resolution and lower graphics quality (to make up for this, upscalers were introduced that add new issues to the final image). \nBecause Ray Tracing became a Marketing term valuable to GPU manufacturers, some game developers support now Ray Tracing to help increase hardware sales. So we are going with the flow here by offering those APIs.\n\nmacOS (1440x810)\n![Ray Queries on macOS](Screenshots/Raytracing/16_Raytracing_M2Mac_1440x810.png)\n\nPS5 (1080p)\n![Ray Queries on PS5](Screenshots/Raytracing/16_Raytracing_PS5_1080p.png)\n\nWindows 10 (2560x1080)\n![Ray Queries on Windows 10](Screenshots/Raytracing/16_Raytracing_Win10_RX7600_2560x1080.png)\n\nXBOX One Series X (1080p)\n![Ray Queries on XBOX One Series X](Screenshots/Raytracing/16_Raytracing_XboxSeriesX_1920x1080.png)\n\niPhone 11 (Model A2111) at resolution 896x414\n![Ray Queries on iOS](Screenshots/Raytracing/16_Raytracing_iOS.png)\n\nWe do not have a denoiser for the Path Tracer.\n\n\n## 17. Entity Component System Test\nThis unit test shows how to use the high-performance entity component system in The Forge. \n![Image of the Entity Component System unit test in The Forge](Screenshots/17_EntityComponentSystem.png)\n\nThis unit test uses\n\n[![flecs](https://user-images.githubusercontent.com/9919222/104115165-0a4e4700-52c1-11eb-85d6-9bdfa9a0265f.png)](https://github.com/SanderMertens/flecs)\n\nCompared to our old ECS system our build times are now much better and the overall system runs faster:\n\n```\nCPU: intel i7-7700k\nGPU: AMD Radeon RX570\n\nOld ECS\nDebug\nSingle Threaded: 90.0ms \nMulti Threaded 29.0ms\n\nRelease:\nSingle Threaded: 5.7ms\nMulti Threaded: 2.3ms\n\n\nflecs\nDebug\nSingle Threaded: 23.0ms   \nMulti Threaded 6.8ms\n\nRelease\nSingle Threaded 1.7ms\nMulti Threaded 0.9ms\n```\n\n\n\n## 19. C Hot Reloading\nThis unit test showcases an implementation of code hot reloading in C, we've used and adapted the following GitHub library\n\n[cr](https://github.com/fungos/cr)\n\n for this. \n \n ![C Code Hot Reloading Unit test](Screenshots/19_CodeHotReload.PNG)\n \n The test contains two projects:\n- 19_CodeHotReload_Main: generates the executable. All code in this project can't be hot-reloaded. This is the project you should set as startup project when running the program form an IDE.\n- 19a_CodeHotReload_Game: for development platforms Windows/MacOS/Linux generates a dynamic library that is loaded by the Main project in runtime, when the dynamic library changes the Main program reloads the new code. For Android/IOS/Quest/Consoles this project is compiled and linked statically.\n\nHow to use it: While the Main project is running open 19_CodeHotReload_Game.cpp and perform some change, there are lines marked with `TRY_CODE_RELOAD` to make easy changes. Once the file is saved, you can rebuild the project and see the changes happen automatically.\n- Windows/Linux: Click on the UI \"RebuildGame\" button.\n- MacOS: Command+B on XCode to rebuild.\n\nNote: In this implementation we can't call any functions from The Forge from the HotReloadable project (19a_CodeHotReload_Game), this is because we are compiling OS and Renderer as static libraries and linking them directly to the exe. Ideally these projects should be compiled as dynamic libraries in order to expose their functionality to the exe and hot reloadable dll. The reason we didn't implement it in this way is because all our other projects are already setup to use static libraries.\n\n\n## 21. Animation\nThis unit test shows a wide range of animation tasks. We used Ozz to achieve those. The following shots were taken on an Android phone. \n\nOzz Playback Animation\nHere is how to playback a clip on a rig:\n\n![Image of the Ozz Playback Animation](Screenshots/Animations/Animations_playback_stand.webp)\n\nOzz Playback Blending\nThis option shows how to blend multiple clips and play them back on a rig:\n\n![Image of the Ozz Playback Blending](Screenshots/Animations/Animations_Playback_blending.webp)\n\n\n<!--\nOzz Joint Attachment\nThis option shows how to attach an object to a rig which is being posed by an animation.\n\n![Image of the Ozz Playback Blending](Screenshots/Animations/Animations_Playback_blending.webp)\n-->\n\nOzz Partial Blending\nThis option shows how to blend clips having each only effect a certain portion of joints.\n\n![Image of the Ozz Partial Blending](Screenshots/Animations/Animation_partial_blending.webp)\n\nOzz Additive Blending\nThis option shows how to introduce an additive clip onto another clip and play the result on a rig.\n\n![Image of the Ozz Additive Blending](Screenshots/Animations/Animation_additive_blending.webp)\n\nOzz Baked Physics\nThis option shows how to use a scene of a physics interaction that has been baked into an animation and play it back on a rig.\n\n![Image of the Ozz Baked Physics](Screenshots/Animations/Baked_physics.webp)\n\nOzz Multi Threading\nThis option shows how to animate multiple rigs simultaneously while using multi-threading for the animation updates:\n\n![Image of the Ozz Multi Threading](Screenshots/Animations/Animations_multithreading.webp)\n\n\n## 28. Ozz Skinning\nThis unit test shows how to use skinning with Ozz\n\n![Image of the Ozz Skinning unit test](Screenshots/Skinning_PC.gif)\n\n\n \n\n## 36 AlgorithmsAndContainers\nThis unit test is used to make sure the string, dynamic array and hash map implementation is stable.\n\n\n# Examples\n\n## Triangle Visibility Buffer 1.0\nThis is an implementation of the Triangle Visibility Buffer that utilizes indirect draw calls. An early version of this example was covered in various conference talks. [Here](https://diaryofagraphicsprogrammer.blogspot.com/2018/03/triangle-visibility-buffer.html) is a blog entry that details the implementation in The Forge.\n\n![Image of the Visibility Buffer](Screenshots/Visibility_Buffer.png)\n\n\n## Triangle Visibility Buffer 2.0\nThis is a more GPU Driven version of the Triangle Visibility Buffer. All the indirect draw calls are replaced by one large compute shader.\n\n\n\n# Tools\nBelow are screenshots and descriptions of some of the tools we integrated.\n\n## SAST Tools\n\n[PVS-Studio](https://pvs-studio.com/pvs-studio/?utm_source=website&utm_medium=github&utm_campaign=open_source) - static analyzer for C, C++, C#, and Java code.\n\n## Shader Server\n\nTo enable re-compilation of shaders during run-time we implemented a cross-platform shader server that allows to recompile shaders by pressing CTRL-S or a button in a dedicated menu.\nYou can find the documentation in the Wiki in the FSL section.\n\n## Remote UI Control\nWhen working remotely, on mobile or console  it can cumbersome to control the development UI.\nWe added a remote control application in Common_3\\Tools\\UIRemoteControl which allows control of all UI elements on all platforms.\nIt works as follows:\n- Build and Launch the Remote Control App located in Common_3/Tools/UIRemoteControl\n- When a unit test is started on the target application (i.e. consoles), it starts listening for connections on a part (8889 by default)\n- In the Remote Control App, enter the target ip address and click connect\n\n![Remote UI Control](Screenshots/Remote%20UI.jpg)\n\n\n## Ray Tracing Benchmark\nBased on request we are providing a Ray Tracing Benchmark in 16_RayTracing. It allows you to compare the performance of three platforms: \n  * Windows with DirectX 12 DXR\n  * Windows with Vulkan RTX\n  * Linux with Vulkan RTX\n\n  We will extend this benchmark to the non-public platforms we support to compare the PC performance with console performance. \n  The benchmark comes with batch files for all three platforms. Each run generates a HTML output file from the profiler that is integrated in TF. The default number of iterations is 64 but you can adjust that.  There is a Readme file in the 16_RayTracing folder that describes the options.\n\nWindows DirectX 12 DXR, GeForce RTX 2070 Super, 3840x1600, NVIDIA Driver 441.99\n\n![Windows DXR output of Ray Tracing Benchmark](Screenshots/16_Path_Tracer_Profile_DX.PNG) \n\nWindows Vulkan RTX, GeForce RTX 2070 Super, 3840x1600, NVIDIA Driver 441.99\n\n![Windows RTX output of Ray Tracing Benchmark](Screenshots/16_Path_Tracer_Profile.PNG) \n\n\n## Microprofiler\nWe integrated the [Micro Profiler](https://github.com/zeux/microprofile) into our code base by replacing the proprietary UI with imGUI and simplified the usage. Now it is much more tightly and consistently integrated in our code base.\n\nHere are screenshots of the Microprofiler running the Visibility Buffer on PC:\n\n![Microprofiler](Screenshots/MicroProfiler/VB_Detailed.png)\n\n![Microprofiler](Screenshots/MicroProfiler/VB_Plot.PNG)\n\n![Microprofiler](Screenshots/MicroProfiler/VB_Timer.PNG)\n\n![Microprofiler](Screenshots/MicroProfiler/VB_Timer_2.PNG)\n\nHere are screenshots of the Microprofiler running a unit test on iOS:\n\n![Microprofiler](Screenshots/MicroProfiler/IMG_0004_iOS.PNG)\n\n![Microprofiler](Screenshots/MicroProfiler/IMG_0005_iOS.PNG)\n\n![Microprofiler](Screenshots/MicroProfiler/IMG_0006_iOS.PNG)\n\nCheck out the [Wikipage](https://github.com/ConfettiFX/The-Forge/wiki/Microprofiler---How-to-Use) for an explanation on how to use it.\n\n## Shader Translator\nWe provide a shader translator, that translates one shader language -a superset of HLSL called Forge Shader Language (FLS) - to the target shader language of all our target platforms. That includes the console and mobile platforms as well.\nIt is written in Python. We expect this shader translator to be an easier to maintain solution for smaller game teams because it allows to add additional data to the shader source file with less effort. Such data could be for example a bucket classification or different shaders for different capability levels of the underlying platform, descriptor memory requirements or resource memory requirements in general, material info or just information to easier pre-compile pipelines.\nThe actual shader compilation will be done by the native compiler of the target platform.\n\n [How to use the Shader Translator](https://github.com/ConfettiFX/The-Forge/wiki/How-to-Use-The-Shader-Translator)\n\n## GPU Config System\nThis is a general system that can track GPU capabilities on all platforms and switch on and off features of a game for different platforms. \n\n## Summary\n\n- [GPU Configuration system](#GPU-Configuration-system)\n  - [Hardware Capabilities](#Hardware-Capabilities)\n  - [GPUPresetLevel](#gpupresetlevel)\n  - [GPU Selection](#GPU-Selection)\n  - [Driver Rejection](#Driver-Rejection)\n  - [User Extended Settings](#User-Extended-Settings)\n\n- [Open questions](#Open-questions)\n- [List of available properties](#List-of-available-properties)\n\n## GPU Configuration system\n\nOur configuration system allows to:\n\n- Access an exhaustive list of **hardware features** and **capabilities** (see Vulkan hardware capability viewer) \n- Give a **performance rating** to each available gpu (office, low, medium, high, ultra) \n- **Choose a specific gpu** when multiple are available\n- Turn on and off certain hardware features (ex: **turn off raytracing support** for a specific vendor)\n- Disable certain gpu **depending on the current driver version**\n- Set application settings based on the current hardware (ex: disable certain game mechanics if there are no proper support for advanced transparency)\n\nWhat it is not:\n\n- A full feature configuration system you see in most game, ex: **Graphic Settings** panel\n- TheForge is mainly designed to deal with hardware features, his goal is not to manage the specific settings of your application.\n\n![GPU Config System](Screenshots/gpuConf.jpg)\n\n### Hardware Capabilities\n\nTheForge lets you access various structures that store hardware information about the current device your application is using:\n\n- GPUSettings: storing various flags that indicate the hardware features supported across different platform (**mHDRSupported**, **mTessellationSupported**, **mRaytracingSupported**, **mROVsSupported**, **mTessellationSupported**, **mVRAM**, **mWaveOpsSupportFlags**, ...)\n  - The quality index assigned to the gpu is set inside the **mGpuVendorPreset** attribute\n- GPUCapBits: storing the list of all the available texture formats (**TinyImageFormat_R32G32_UINT**, **TinyImageFormat_R32_SFLOAT**, **TinyImageFormat_ASTC_8x8_SRGB**, ...)\n- RendererContext: storing features and extensions specific to each graphic API\n  - GpuInfo attribute can be used to access the native interface directly (**IDXGIAdapter**, **VkPhysicalDeviceProperties2**, **MTLDevice**, ...) \n\n### GPUPresetLevel\n\nA performance index is assigned to the current gpu during the initialization phases in *initRenderer(*). This value comes from reading the gpu.data file in the **RD_GPU_CONFIG** directory, previously set via **fsSetPathForResourceDir()**.\n\nThis file contains a list of available model of graphics card and their manufacturers. You can find the URLs that were used to create this database at the beginning of the file. Feel free to keep this list updated as needed. \n\nConsoles have been added inside this list:\n\n- **Xbox:** the modelID is obtained by invoking **XsystemGetDevicetype**, which return a enum value you can find on the [msdn](https://learn.microsoft.com/en-us/gaming/gdk/_content/gc/reference/system/xsystem/enums/xsystemdevicetype) documentation page\n- **Playstation:** use a proprietary platform macro to assign an identifier for each console\n- **Nintendo Switch:** use the the model code of the nvidia tegra device\n- **SteamDeck:** use the model code of the amd apu\n\nIf the model is missing you can use the **DefaultPresetLevel** property to assign a GPUPresetLevel to any unknown device. This can be usefull on a client machine or for testing your application's quality presets on multiple graphic cards.\n\n*gpu.data:*\n\n```\nBEGIN_VENDOR_LIST;\nintel; 0x163C, 0x8086, 0x8087;\nnvidia; 0x10DE\namd; 0x1002, 0x1022;\nqualcomm; 0x5143;\nimagination technologies; 0x1010;\nsamsung; 0x144D;\narm; 0x13b5;\napple; 0x106b;\nEND_VENDOR_LIST;\n\nBEGIN_DEFAULT_CONFIGURATION;\n#if the current gpu doesn't exist in GPU_LIST use this instead\nDefaultPresetLevel; Low;\nEND_DEFAULT_CONFIGURATION;\n\n#VendorId; DeviceId; Classification; Name ; Revision ID (Can be null) ; Codename (can be null)\nBEGIN_GPU_LIST;\n# --- NVIDIA GPUs --- \n0x10de; 0x0045; Low; NVIDIA GeForce 6800 GT\n0x10de; 0x0040; Low; NVIDIA GeForce 6800 Ultra\n...\n0x10de;\t0x2860; Ultra; GeForce RTX 4070 Max-Q / Mobile;\n0x10de;\t0x2704; Ultra; GeForce RTX 4080;\n...\n# --- INTEL GPUs ---\n0x8086; 0xA780; Medium; Intel(R) Xe Graphics\n# --- XBOX ---\n0x7a0d; 0x2; Low; Xbox One;\n...\nEND_GPU_LIST;\n```\n\n### GPU Selection\n\nWhen multiple devices are available it's possible to write a set of rules which can be used to select one device against an other. If there are no rules, the first gpu found will be used. Those rules are defined in the *gpu.cfg* file also located in the **RD_GPU_CONFIG** directory.\n\nThe rules are in **descending order**, and the first rule that gives a different result for two distinct gpu will make the final decision.\n\nEach gpu are compared one against on another in their discovery order, once one is rejected it will no longer be used as a potential candidate. The discovery order of the gpu can affect the final outcome (imagine a list of rock, paper and scissor, the last remaining candidate will vary depending in the order they are processed)\n\nThe possible syntaxes for a rule is:\n\n- *\\<property\\>;*\n\n```\nBEGIN_GPU_SELECTION;\nGpuPresetLevel;\nDirectXFeatureLevel;\nVRAM;\nEND_GPU_SELECTION;\n```\n\nThis will choose the gpu with the greatest **GpuPresetLevel**, if they are both equal it will pick the one with the greatest **DirectXFeatureLevel** on windows and finally, if they all return the same, it will pick the one with the maximum amount of **VRAM**.\n\n- *\\<property\\> \\<comparator\\> \\<value\\>**,** \\<property\\> \\<comparator\\> \\<value\\>, ... ;*\n```\nBEGIN_GPU_SELECTION;\nDirectXFeatureLevel < 11;\ndeviceid == PreferredGPU;\n# Intel vendor: 0x8086 && 0x8087 && 0x163C\nVendorID != 0x8086, VendorID != 0x8087, VendorID != 0x163C;\nEND_GPU_SELECTION;\n```\n\nThis will first eliminate the gpu if the **DirectXFeatureLevel** is lower than 11, then it will use the special variable **PreferredGPU** to choose the gpu with the matching deviceid, if it is correctly set, and finally it will skip intel gpu.\n\nYou can combine those different syntax to come down with your own set of rule.\n\n### Driver Rejection\n\nIf you want to reject a specific driver for a given manufacturer, you can add the following rule in **gpu.cfg**:\n\n*\\<vendorID\\>; DriverVersion \\<comparator\\> \\<driverVersion\\>; \\<reasonStr\\>;*\n\n```\nBEGIN_DRIVER_REJECTION;\n# amd: 0x1002, 0x1022\n0x1002; DriverVersion <= 23.10.23.03; 09a unit test artefacts, pixelated and too bright, 15a flickers;\n0x1022; DriverVersion <= 23.10.23.03; 09a unit test artefacts, pixelated and too bright, 15a flickers;\nEND_GPU_SETTINGS;\n```\n\nThis will reject all amd drivers prior to 23.10.23.03. You can use this to inform your users that they should update their graphic driver.\n\nDriver convention name:\n\n- **Nvidia**: *\\<Major\\>.\\<Minor\\>* ex: **537.13**\n- **AMD**: \\<YEAR\\>.\\<MONTH\\>.\\<REVISION\\> ex: **23.10.23.03**\n- **Intel**:  we only use the **\\<BUILD_NUMBER\\>**, normally it's supposed to look like this *\\<OS\\>.0.\\<BUILD_NUMBER\\>* but Vulkan only return the last part, for instance, 31.0.101.5074 will become **101.5074** see [intel convention](https://www.intel.com/content/www/us/en/support/articles/000005654/graphics.html)\n\n### Configuration Settings\n\nIt's possible to turn on and off certain hardware features and gpu properties using specific rules in **gpu.cfg**. This way you can disable functionalities on a specific set of devices. The rule syntax is the following:\n\n*\\<sourceProperty\\>; \\<compProperty\\> \\<comparator\\> \\<compValue\\>, ... ; \\<assignmentValue\\>;*\n\n```\nBEGIN_GPU_SETTINGS;\n# nvidia\nmaxRootSignatureDWORDS; vendorID == 0x10DE; 64;\n# amd\nmaxRootSignatureDWORDS; vendorID == 0x1002; 13;\n# disable tesselation support on arm system\ntessellationsupported; vendorID == 0x13B5; 0;\nEND_GPU_SETTINGS;\n```\n\nThis will set the maximum size of the **rootSignature** to 64x32bits DWORD on nvidia, and 13 on AMD graphic card. It will also disable tessellation shader on ARM system.\n\n### User Extended Settings\n\nIt's possible to set application wide settings using gpu.cfg. First you will need to register your settings by filling the **ExtendedSettings** attribute of your **RendererDesc** instance. You will have to provide a string literal and an integer variable to store the setting's value:\n\n``` c++\nconst char* gSettingNames[];\nstruct ConfigSettings gGpuSettings;\n    \nExtendedSettings extendedSettings = {};\nextendedSettings.mNumSettings = ESettings::Count;\nextendedSettings.pSettings = (uint32_t*)&gGpuSettings;\nextendedSettings.ppSettingNames = gSettingNames;\n\nRendererDesc settings;\nmemset(&settings, 0, sizeof(settings));\nsettings.pExtendedSettings = &extendedSettings;\n```\n\nOnce it's done you can add your rules in gpu.cfg, the syntax is the following one:\n\n*\\<settingName\\>; \\<property\\> \\<comparator\\> \\<comparisonValue\\>, ... ; \\<assignmentValue\\>*\n\n```\nBEGIN_USER_SETTINGS;\nEnableAOIT; RasterOrderViewSupport == 1; 1;\nEND_USER_SETTINGS;\n```\n\nThis will set the **EnableAOIT** variable to 1 if the hardware supports [razterizer order views](https://learn.microsoft.com/en-us/windows/win32/direct3d11/rasterizer-order-views)\n\n### Open questions\n\n- Should we use \\<VendorID\\> or their string literals?\n- Should we add || and && operator for configuring rule?\n  - currently \",\" can be used as && operator\n- Should we add the possibility to configure which graphic API we want to use?\n\n### List of available properties\n\n| Property name                     | Read  | Write |\n| --------------------------------- | ----- | ----- |\n| allowbuffertextureinsameheap      | :white_check_mark: | :white_check_mark:      |\n| builtindrawid                     | :white_check_mark: | :white_check_mark:      |\n| cubemaptexturearraysupported      | :white_check_mark: | :white_check_mark:      |\n| tessellationindirectdrawsupported | :white_check_mark: | :white_check_mark:      |\n| isheadless                        | :white_check_mark: | :white_check_mark:      |\n| deviceid                          | :white_check_mark: | :x:   |\n| directxfeaturelevel               | :white_check_mark: | :white_check_mark:      |\n| geometryshadersupported           | :white_check_mark: | :white_check_mark:      |\n| gpupresetlevel                    | :white_check_mark: | :white_check_mark:      |\n| graphicqueuesupported             | :white_check_mark: | :white_check_mark:      |\n| hdrsupported                      | :white_check_mark: | :white_check_mark:      |\n| dynamicrenderingenabled           | :white_check_mark: | :white_check_mark:      |\n| indirectcommandbuffer             | :white_check_mark: | :white_check_mark:      |\n| indirectrootconstant              | :white_check_mark: | :white_check_mark:      |\n| maxboundtextures                  | :white_check_mark: | :white_check_mark:      |\n| maxrootsignaturedwords            | :white_check_mark: | :white_check_mark:      |\n| maxvertexinputbindings            | :white_check_mark: | :white_check_mark:      |\n| multidrawindirect                 | :white_check_mark: | :white_check_mark:      |\n| occlusionqueries                  | :white_check_mark: | :white_check_mark:      |\n| pipelinestatsqueries              | :white_check_mark: | :white_check_mark:      |\n| primitiveidsupported              | :white_check_mark: | :white_check_mark:      |\n| rasterorderviewsupport            | :white_check_mark: | :white_check_mark:      |\n| raytracingsupported               | :white_check_mark: | :white_check_mark:      |\n| rayquerysupported                 | :white_check_mark: | :white_check_mark:      |\n| raypipelinesupported              | :white_check_mark: | :white_check_mark:      |\n| softwarevrssupported              | :white_check_mark: | :white_check_mark:      |\n| tessellationsupported             | :white_check_mark: | :white_check_mark:      |\n| timestampqueries                  | :white_check_mark: | :white_check_mark:      |\n| uniformbufferalignment            | :white_check_mark: | :white_check_mark:      |\n| uploadbuffertexturealignment      | :white_check_mark: | :white_check_mark:      |\n| uploadbuffertexturerowalignment   | :white_check_mark: | :white_check_mark:      |\n| vendorid                          | :white_check_mark: | :x:   |\n| vram                              | :white_check_mark: | :white_check_mark:      |\n| wavelanecount                     | :white_check_mark: | :white_check_mark:      |\n| waveopssupport                    | :white_check_mark: | :white_check_mark:      |\n\n# Releases / Maintenance\nThe Forge Interactive Inc. will prepare releases when all the platforms are stable and running and push them to this GitHub repository. Up until a release, development will happen on internal server. This is to sync up the console, mobile, macOS and PC versions of the source code.\n\n# Products\nWe would appreciate it if you could send us a link in case your product uses The Forge. Here are the ones we received so far or we contributed to:\n\n## STAR WARS™: Bounty Hunter™\nBounty Hunter was ported with the help of The Forge Framework to all the platforms mentioned in the screenshot:\n[![STAR WARS™: Bounty Hunter™](Screenshots/StarWars.png)](https://www.youtube.com/watch?v=jiBmgse9GTc)\n\n## BuildBox\nThe game engine BuildBox is now using The Forge (click on image to go to the Steam Store): \n\n[![BuildBox](Screenshots/BuildBox.PNG)](https://signup.buildbox.com/product/bb3)\n\n## Lethis\nThe Game \"Lethis Path of Progress\" is now using The Forge (click on image to go to the Steam Store)\n\n[![Lethis](Screenshots/Lethis.PNG)](https://store.steampowered.com/app/359230/Lethis__Path_of_Progress/)\n\n## Supergiant Games Hades\n[Supergiant's Hades](https://www.supergiantgames.com/games/hades/) we are working with Supergiant since 2014. One of the on-going challenges was that their run-time was written in C#. At the beginning of last year, we suggested to help them in building a new cross-platform game engine in C/C++ from scratch with The Forge. The project started in April 2019 and the first version of this new engine launched in May this year. Hades was then released for Microsoft Windows, macOS, and Nintendo Switch on September 17, 2020. The game can run on all platforms supported by The Forge.\n\nHere is a screenshot of Hades running on Switch:\n\n![Supergiant Hades](Screenshots/Supergiant_Hades.jpg)\n\nHere is an article by [Forbes](https://www.forbes.com/sites/davidthier/2020/09/27/you-need-to-play-the-game-at-the-top-of-the-nintendo-switch-charts/#6e9128ba2f80) about Hades being at the top of the Nintendo Switch Charts.\nHades is also a technology showcase for Intel's integrated GPUs on macOS and Windows. The target group of the game seems to often own those GPUs.\n\n## Bethesda's Creation Engine\nBethesda based their rendering layer for their next-gen engine on The Forge. We helped integrate and optimize it. \nIt always brings us pleasure to see The Forge running in AAA games like this:\n\n[![Starfield](Screenshots/starfield-screenshot.jpg)](https://www.youtube.com/watch?v=ZHZOTFMyMyM)\n\nWe added The Forge to the Creation Engine in 2019.\n\nHere is more info about this game engine:\n\n[Todd Howard Teases Bethesda's New Game Engine Behind The Elder Scrolls 6 And Starfield](https://www.thegamer.com/starfield-the-elder-scrolls-6-new-game-engine/)\n\n[Bethesda's overhauling its engine for Starfield and The Elder Scrolls 6](https://www.gamesradar.com/bethesda-engine-starfield-elder-scrolls-6/)\n\n\n## No Man's Sky\nThe Forge made an appearance during the Apple developer conference 2022. We added it to the game \"No Man's Sky\" from Hello Games to bring this game up on macOS / iOS. For the Youtube video click on the image below and jump to 1:22:40\n\n[![No Man's Sky on YouTube](Screenshots/NoMansSky.PNG)](https://www.youtube.com/watch?v=q5D55G7Ejs8)\n\nWe helped to ship the macOS version of No Man's Sky.\n\n\n## M²H - Stroke Therapy\nM²H uses The Forge - [M²H](https://msquarehealthcare.com/) is a medical technology company. They have developed a physics-based video game therapy solution that is backed by leading edge neuroscience, powered by Artificial Intelligence and controlled by dynamic movement – all working in concert to stimulate vast improvement of cognitive and motor functions for patients with stroke and the aged.\nThe Forge provides the rendering layer for their application.\nHere is a YouTube video on what they do:\n\n[![M²H on YouTube](Screenshots/M2Hscreenshot.PNG)](https://www.youtube.com/watch?v=l2Gr2Ts48e8&t=12s)\n\n## StarVR One SDK\nThe Forge was used to build the StarVR One SDK from 2016 - 2017:\n\n<a href=\"https://www.starvr.com\" target=\"_blank\"><img src=\"Screenshots/StarVR.PNG\" \nalt=\"StarVR\" width=\"300\" height=\"159\" border=\"0\" /></a>\n\n\n## Torque 3D\nThe Forge Framework will be used as the rendering framework in Torque 3D:\n\n<a href=\"http://www.garagegames.com/products/torque-3d\" target=\"_blank\"><img src=\"Screenshots/Torque-Logo_H.png\" \nalt=\"Torque 3D\" width=\"417\" height=\"106\" border=\"0\" /></a>\n\n## Star Wars Galaxies Level Editor\nSWB is an editor for the 2003 game 'Star Wars Galaxies' that can edit terrains, scenes, particles and import/export models via FBX. The editor uses an engine called 'atlas' that will be made open source in the future. It focuses on making efficient use of the new graphics APIs (with help from The-Forge!), ease-of-use and terrain rendering.\n\n![SWB Level Editor](Screenshots/SWB.png)\n\n# Writing Guidelines\nFor contributions to The Forge we apply the following writing guidelines:\n * We limit all code to C++ 11 by setting the Clang and other compiler flags\n * We follow the [Orthodox C++ guidelines] (https://gist.github.com/bkaradzic/2e39896bc7d8c34e042b) minus C++ 14 support (see above)\n * Please note that we are going to move towards C99 usage more and more because this language makes it easier to develop high-performance applications in a team. With the increased call numbers of modern APIs and the always performance-detoriating C++ features, C++ is becoming more and more a productivity and run-time performance challenge. C is also a better starting point to port to other languages like RUST. In case any of those languages become common in development.\n\n# User Group Meetings \nThere will be a user group meeting during GDC. In case you want to organize a user group meeting in your country / town at any other point in time, we would like to support this. We could send an engineer for a talk.\n\n# Support for Education \nLet us know if you are in need for eductional support.\n\n\n# Open-Source Libraries\nThe Forge utilizes the following Open-Source libraries:\n* [Fontstash](https://github.com/memononen/fontstash)\n* [Vectormath](https://github.com/glampert/vectormath)\n* [Nothings](https://github.com/nothings/stb) single file libs \n  * [stb.h](https://github.com/nothings/stb/blob/master/stb.h)\n  * [stb_image.h](https://github.com/nothings/stb/blob/master/stb_image.h)\n  * [stb_image_resize.h](https://github.com/nothings/stb/blob/master/stb_image_resize.h)\n  * [stb_image_write.h](https://github.com/nothings/stb/blob/master/stb_image_write.h)\n  * [stb_ds](https://github.com/nothings/stb/blob/master/stb_ds.h)\n* [SPIRV_Cross](https://github.com/KhronosGroup/SPIRV-Cross)\n* [Vulkan Memory Allocator](https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator)\n* [D3D12 Memory Allocator](https://github.com/GPUOpen-LibrariesAndSDKs/D3D12MemoryAllocator)\n* [WinPixEventRuntime](https://blogs.msdn.microsoft.com/pix/winpixeventruntime/)\n* [Fluid Studios Memory Manager](http://www.paulnettle.com/)\n* [volk Metaloader for Vulkan](https://github.com/zeux/volk)\n* [Dear ImGui](https://github.com/ocornut/imgui)\n* [DirectX Shader Compiler](https://github.com/Microsoft/DirectXShaderCompiler)\n* [Ozz Animation System](https://github.com/guillaumeblanc/ozz-animation)\n* [Lua Scripting System](https://www.lua.org/)\n* [TressFX](https://github.com/GPUOpen-Effects/TressFX)\n* [meshoptimizer](https://github.com/zeux/meshoptimizer)\n* [TinyImageFormat](https://github.com/DeanoC/tiny_imageformat)\n* [flecs](https://github.com/SanderMertens/flecs)\n* [CPU Features](https://github.com/google/cpu_features)\n* [HIDAPI](https://github.com/libusb/hidapi)\n* [bstrlib](https://github.com/websnarf/bstrlib)\n* [cr](https://github.com/fungos/cr)\n\n\n\n\n"
        },
        {
          "name": "Screenshots",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}