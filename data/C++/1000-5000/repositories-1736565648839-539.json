{
  "metadata": {
    "timestamp": 1736565648839,
    "page": 539,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "grame-cncm/faust",
      "stars": 2627,
      "defaultBranch": "master-dev",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.2001953125,
          "content": "################################################\n# Official .clang-format for the Faust project\n# Authors : Y. Orlarey, S. Letz\n# Version 1, 2024/04/16\n################################################\n---\nLanguage:        Cpp\n# BasedOnStyle:  Google\nAccessModifierOffset: -1\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: true\nAlignConsecutiveDeclarations: true\nAlignEscapedNewlines: Left\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: true\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: InlineOnly\nAllowShortIfStatementsOnASingleLine: false\nInsertBraces:    true\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   true\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Custom\nBreakBeforeInheritanceComma: false\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeColon\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     100\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeCategories:\n  - Regex:           '^<.*\\.h>'\n    Priority:        1\n  - Regex:           '^<.*'\n    Priority:        2\n  - Regex:           '.*'\n    Priority:        3\nIncludeIsMainRegex: '([-_](test|unittest))?$'\nIndentCaseLabels: true\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: false\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\nReflowComments:  true\nSortIncludes:    true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Auto\nTabWidth:        4\nUseTab:          Never\n...\n\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0146484375,
          "content": "/build/faustdir"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.078125,
          "content": "/debian export-ignore  \n.gitattributes export-ignore  \n.gitignore export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5205078125,
          "content": "dox/*\nbuild/xcode/*\nbuild/bin/*\nbuild/lib/*\nbuild/cmake-build-*\n*~\ncompile.sh\n*.aux\n*.log\n*.out\n*.rai\n*.rao\n*.toc\n*.o\n*.mxo\n*.bak\n*.app\n.DS_Store\n*tmp*\n*dir\nwindows/_output/\nwindows/.vs/\nwindows/*.*db\nwindows/*.user\n*.opensdf\n*.sdf\ncompiler/faust\nuser.mk\n### VSCode cache\n.*.VC.db\n.vscode/\n### Xcode Patch ###\n*.xcodeproj/*\n!*.xcodeproj/project.pbxproj\n!*.xcodeproj/xcshareddata/\n!*.xcworkspace/contents.xcworkspacedata\ntests/impulse-tests/ir\n### ESLint\n.eslintrc.json\n*-mdoc\n*-svg\n### Intellij IDEs\n.idea/\n### Pyenv\n.python-version\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.830078125,
          "content": "[submodule \"libraries\"]\n\tpath = libraries\n\turl = https://github.com/grame-cncm/faustlibraries.git\n[submodule \"architecture/android/app/oboe\"]\n\tpath = architecture/android/app/oboe\n\turl = https://github.com/google/oboe\n[submodule \"architecture/smartKeyboard/android/app/oboe\"]\n\tpath = architecture/smartKeyboard/android/app/oboe\n\turl = https://github.com/google/oboe\n[submodule \"tools/faust2ck\"]\n\tpath = tools/faust2ck\n\turl = https://github.com/ccrma/faust2ck\n[submodule \"architecture/max-msp/py2max\"]\n\tpath = architecture/max-msp/py2max\n\turl = https://github.com/shakfu/py2max.git\n[submodule \"tools/physicalModeling/mesh2faust/spectra\"]\n\tpath = tools/physicalModeling/mesh2faust/spectra\n\turl = https://github.com/yixuan/spectra.git\n[submodule \"node-matcher-plugin\"]\n\tpath = node-matcher-plugin\n\turl = https://github.com/nuchi/node-matcher-plugin.git\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.8330078125,
          "content": "\nsudo: required\ndist: xenial\nlanguage: cpp\n\nmatrix:\n  include:\n    - os: linux\n      addons:\n        apt:\n          sources:\n            - ubuntu-toolchain-r-test\n          packages:\n            - g++-4.9\n            - libmicrohttpd-dev\n            - libgtk2.0-dev \n            - libqt4-dev \n            - libasound2-dev \n            - libqrencode-dev \n            - portaudio19-dev \n            - libjack-jackd2-dev \n            - libcsound64-dev \n            - dssi-dev \n            - lv2-dev \n            - puredata-dev \n            - supercollider-dev\n      env:\n        - MATRIX_EVAL=\"CC=gcc-4.9 && CXX=g++-4.9\"\n\nbefore_install:\n    - eval \"${MATRIX_EVAL}\"\n  \nbranches:\n  only:\n  - master-dev\n\nscript: \n  - make travis\n  # - ./tests/architecture-tests/testtravis\n  # Do also some impulse response tests\n  - make -C tests/impulse-tests travis -j 2\n\n"
        },
        {
          "name": "COPYING.txt",
          "type": "blob",
          "size": 26.8984375,
          "content": "    FAUST compiler, Version 2.78.1\n    Copyright (C) 2003-2024 GRAME, Centre National de Creation Musicale\n    Copyright (C) 2023-2024 INRIA\n    ---------------------------------------------------------------------\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as \n    published by the Free Software Foundation; either version 2.1 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n\n----------------------------------------------------------------------------\n                  GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 2.1, February 1999\n\n Copyright (C) 1991, 1999 Free Software Foundation, Inc.\n 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts\n as the successor of the GNU Library Public License, version 2, hence\n the version number 2.1.]\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Lesser General Public License, applies to some\nspecially designated software packages--typically libraries--of the\nFree Software Foundation and other authors who decide to use it.  You\ncan use it too, but we suggest you first think carefully about whether\nthis license or the ordinary General Public License is the better\nstrategy to use in any particular case, based on the explanations below.\n\n  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n\n  To protect your rights, we need to make restrictions that forbid\ndistributors to deny you these rights or to ask you to surrender these\nrights.  These restrictions translate to certain responsibilities for\nyou if you distribute copies of the library or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link other code with the library, you must provide\ncomplete object files to the recipients, so that they can relink them\nwith the library after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  We protect your rights with a two-step method: (1) we copyright the\nlibrary, and (2) we offer you this license, which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  To protect each distributor, we want to make it very clear that\nthere is no warranty for the free library.  Also, if the library is\nmodified by someone else and passed on, the recipients should know\nthat what they have is not the original version, so that the original\nauthor's reputation will not be affected by problems that might be\nintroduced by others.\n\f\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\nconsistent with the full freedom of use specified in this license.\n\n  Most GNU software, including some libraries, is covered by the\nordinary GNU General Public License.  This license, the GNU Lesser\nGeneral Public License, applies to certain designated libraries, and\nis quite different from the ordinary General Public License.  We use\nthis license for certain libraries in order to permit linking those\nlibraries into non-free programs.\n\n  When a program is linked with a library, whether statically or using\na shared library, the combination of the two is legally speaking a\ncombined work, a derivative of the original library.  The ordinary\nGeneral Public License therefore permits such linking only if the\nentire combination fits its criteria of freedom.  The Lesser General\nPublic License permits more lax criteria for linking other code with\nthe library.\n\n  We call this license the \"Lesser\" General Public License because it\ndoes Less to protect the user's freedom than the ordinary General\nPublic License.  It also provides other free software developers Less\nof an advantage over competing non-free programs.  These disadvantages\nare the reason we use the ordinary General Public License for many\nlibraries.  However, the Lesser license provides advantages in certain\nspecial circumstances.\n\n  For example, on rare occasions, there may be a special need to\nencourage the widest possible use of a certain library, so that it becomes\na de-facto standard.  To achieve this, non-free programs must be\nallowed to use the library.  A more frequent case is that a free\nlibrary does the same job as widely used non-free libraries.  In this\ncase, there is little to gain by limiting the free library to free\nsoftware only, so we use the Lesser General Public License.\n\n  In other cases, permission to use a particular library in non-free\nprograms enables a greater number of people to use a large body of\nfree software.  For example, permission to use the GNU C Library in\nnon-free programs enables many more people to use the whole GNU\noperating system, as well as its variant, the GNU/Linux operating\nsystem.\n\n  Although the Lesser General Public License is Less protective of the\nusers' freedom, it does ensure that the user of a program that is\nlinked with the Library has the freedom and the wherewithal to run\nthat program using a modified version of the Library.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a\n\"work based on the library\" and a \"work that uses the library\".  The\nformer contains code derived from the library, whereas the latter must\nbe combined with the library in order to run.\n\f\n                  GNU LESSER GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library or other\nprogram which contains a notice placed by the copyright holder or\nother authorized party saying it may be distributed under the terms of\nthis Lesser General Public License (also called \"this License\").\nEach licensee is addressed as \"you\".\n\n  A \"library\" means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The \"Library\", below, refers to any such software library or work\nwhich has been distributed under these terms.  A \"work based on the\nLibrary\" means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term \"modification\".)\n\n  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n\n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\f\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Library,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Library, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\nwith the Library (or with a work based on the Library) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\f\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a \"work that uses the Library\".  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a \"work that uses the Library\" with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a \"work that uses the\nlibrary\".  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a \"work that uses the Library\" uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\f\n  6. As an exception to the Sections above, you may also combine or\nlink a \"work that uses the Library\" with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable \"work that\n    uses the Library\", as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    d) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    e) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the \"work that uses the\nLibrary\" must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe materials to be distributed need not include anything that is\nnormally distributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\f\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties with\nthis License.\n\f\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply,\nand the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Library\nspecifies a version number of this License which applies to it and\n\"any later version\", you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation.  If the Library does not specify a\nlicense version number, you may choose any version ever published by\nthe Free Software Foundation.\n\f\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision will be guided by the two goals of preserving the free status\nof all derivatives of our free software and of promoting the sharing\nand reuse of software generally.\n\n                            NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\f\n           How to Apply These Terms to Your New Libraries\n\n  If you develop a new library, and you want it to be of the greatest\npossible use to the public, we recommend making it free software that\neveryone can redistribute and change.  You can do so by permitting\nredistribution under these terms (or, alternatively, under the terms of the\nordinary General Public License).\n\n  To apply these terms, attach the following notices to the library.  It is\nsafest to attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the library's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the library, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n  <signature of Ty Coon>, 1 April 1990\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.44921875,
          "content": "FROM debian:stable-slim\nMAINTAINER Vincent Giersch <vincent@flat.io>\n\nRUN mkdir /faust\nWORKDIR /faust\nCOPY . /faust\n\nRUN \\\n  apt-get update && \\\n  apt-get install -y build-essential llvm libncurses5-dev libncurses5 libmicrohttpd-dev git cmake pkg-config && \\\n  rm -rf /var/lib/apt/lists/*\n\nRUN \\\n  make && make install && \\\n  make clean && \\\n  apt-get purge -y build-essential llvm libncurses5-dev && apt-get autoremove -y\n\nENTRYPOINT [\"/usr/local/bin/faust\"]\n"
        },
        {
          "name": "Dockerfile-aarch64",
          "type": "blob",
          "size": 1.6533203125,
          "content": "FROM quay.io/pypa/manylinux_2_28_aarch64\r\n\r\nRUN mkdir /faust\r\nWORKDIR /faust\r\nCOPY . /faust\r\n\r\n# need ncurses-devel for `tinfo` -ltinfo\r\nRUN yum install -y libxml2-devel ncurses-devel libmicrohttpd-devel git cmake pkgconfig\r\nRUN yum update -y cmake\r\n\r\n# build ncurses because we need libncurses.a in `Make.llvm.static`,\r\n# and the yum package `ncurses-devel` may not have it\r\nRUN git clone https://github.com/mirror/ncurses.git\r\nWORKDIR ncurses\r\nRUN ./configure --prefix=/usr/local/ncurses/6_4 --with-shared --with-pkg-config-libdir=/usr/local/ncurses/6_4/lib/pkgconfig --enable-pc-files\r\nRUN make && make install\r\n\r\nWORKDIR /faust\r\nENV LLVM_CONFIG=\"/faust/llvm/bin/llvm-config\"\r\nRUN chmod u+x $LLVM_CONFIG\r\n\r\nWORKDIR /faust/build\r\nRUN cmake -C ./backends/all.cmake . -Bbuild -DCMAKE_PREFIX_PATH=\"/usr/local/ncurses/6_4/lib/pkgconfig\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE=ON -DINCLUDE_DYNAMIC=ON -DINCLUDE_STATIC=ON -DINCLUDE_LLVM=ON -DUSE_LLVM_CONFIG=ON -DLLVM_CONFIG=$LLVM_CONFIG\r\nRUN cmake --build build --config Release\r\n\r\nWORKDIR /faust/build/lib\r\nRUN rm -f libfaust.so libfaust.so.2\r\n# get the newest libfaust.\r\nRUN mv $(ls -1 libfaust.so.* | tail -n1) libfaust.so\r\nRUN strip --strip-unneeded libfaust.so\r\n\r\n# cleanup to prevent running out of space during GitHub Action\r\nRUN yum clean all\r\nRUN rm -rf /var/cache/yum\r\nWORKDIR /faust/build\r\nRUN rm -rf build\r\nRUN rm -rf bin\r\nWORKDIR /faust\r\nRUN rm -rf ncurses\r\nRUN rm -rf llvm\r\nRUN rm -rf architecture\r\nRUN rm -rf embedded\r\nRUN rm -rf examples\r\nRUN rm -rf libraries\r\nRUN rm -rf tests\r\n\r\n# Create the zip of libfaust\r\nWORKDIR /faust/build\r\nRUN yum install -y zip\r\nRUN zip -r libfaust-ubuntu-aarch64.zip lib\r\nRUN rm -rf lib\r\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 11.2138671875,
          "content": "version := 2.78.1\n\nsystem\t?= $(shell uname -s)\n\n-include user.mk\nDESTDIR ?=\nPREFIX ?= /usr/local\nINSTALL_LIBDIR ?= lib\nCROSS=i586-mingw32msvc-\nBUILDLOCATION := build\nDEBUGFOLDER := faustdebug\nBINLOCATION := $(BUILDLOCATION)/bin\nLIBLOCATION := $(BUILDLOCATION)/lib\n\nMAKEFILE := Makefile.unix\n\nprefix := $(DESTDIR)$(PREFIX)\narch   := $(wildcard architecture/*.*)\nmfiles := $(wildcard examples/Makefile.*)\nvname := faust-$(version)-$(shell date +%y%m%d.%H%M%S)\nzname := faust-$(version)\n\n.PHONY: all world benchmark remote ios ios-llvm wasm sound2faust\n\n# The main targets\n\ncompiler : updatesubmodules\n\t$(MAKE) -C $(BUILDLOCATION) cmake BACKENDS=regular.cmake TARGETS=regular.cmake\n\t$(MAKE) -C $(BUILDLOCATION)\n\nmost : updatesubmodules\n\t$(MAKE) -C $(BUILDLOCATION) cmake BACKENDS=most.cmake TARGETS=most.cmake\n\t$(MAKE) -C $(BUILDLOCATION)\n\ndeveloper : updatesubmodules\n\t$(MAKE) -C $(BUILDLOCATION) cmake BACKENDS=all.cmake TARGETS=developer.cmake\n\t$(MAKE) -C $(BUILDLOCATION)\n\nall : updatesubmodules\n\t$(MAKE) -C $(BUILDLOCATION) cmake BACKENDS=all.cmake TARGETS=all.cmake\n\t$(MAKE) -C $(BUILDLOCATION)\n\nlibsall : updatesubmodules\n\t$(MAKE) -C $(BUILDLOCATION) cmake BACKENDS=regular.cmake TARGETS=all.cmake\n\t$(MAKE) -C $(BUILDLOCATION)\n\ntravis : updatesubmodules\n\t$(MAKE) -C $(BUILDLOCATION) cmake BACKENDS=backends.cmake TARGETS=regular.cmake\n\t$(MAKE) -C $(BUILDLOCATION)\n\n# Universal and native: special developer modes\n\nuniversal :\n\t$(MAKE) -C $(BUILDLOCATION) universal\n\t@echo\n\t@echo \"### Universal mode is ON\"\n\t@echo \"### You need to recompile\"\n\t@echo \"### Use 'make native' to revert\"\n\nnative :\n\t$(MAKE) -C $(BUILDLOCATION) native\n\t@echo\n\t@echo \"### Universal mode is OFF\"\n\t@echo \"### You need to recompile\"\n\n# make world (MAINTAINERS TARGET): This builds all the common targets for a\n# fairly complete Faust installation: Faust compiler (including the LLVM\n# backend) and library, sound2faust utility, OSC and HTTPD libraries (both\n# static and dynamic).\n\n# CAVEAT: END USERS should note that this target requires a substantial amount\n# of additional dependencies (in particular, LLVM) which aren't readily\n# pre-installed on most systems, hence you should NOT use this target (which\n# is mostly aimed at package maintainers) unless you KNOW WHAT YOU'RE DOING.\n# Don't complain if the target doesn't build for you, use one of the standard\n# build targets instead. You have been warned! :)\n\n# MAINTAINERS: Once the \"remote\" target is readily supported on most\n# platforms, it should be added here. This requires Jack2 1.9.10 or later\n# which isn't regularly installed on most systems at present, so we skip this\n# target for now.\n\nworld : all \n\t$(MAKE) -C tools/sound2faust\n\nbenchmark : developer\n\t$(MAKE) -C tools/benchmark all\n\nremote : developer\n\t$(MAKE) -C embedded/faustremote/RemoteServer all\n\t$(MAKE) -C embedded/faustremote all\n\ndebug :\n\t$(MAKE) -C $(BUILDLOCATION) FAUSTDIR=faustdebug RELEASE_TYPE=Debug NONDETERMINISM_LINT=yes\n#\t$(MAKE) -C compiler debug -f $(MAKEFILE) prefix=$(prefix)\n\nioslib :\n\t$(MAKE) -C $(BUILDLOCATION) ioslib\n\nwasm :\n\t$(MAKE) -C $(BUILDLOCATION) wasmlib\n\t$(MAKE) -C $(BUILDLOCATION) cmake WORKLET=on\n\t$(MAKE) -C $(BUILDLOCATION) wasmglue\n\t# Hack : be sure to use LIB_NAME define in build/wasmglue/CMakeLists.txt\n\techo \"export default FaustModule;\" >> $(BUILDLOCATION)/lib/libfaust-worklet-glue.js\n\t# Fix for EMCC codegen bug\n\techo \"var tempDouble, tempI64;\" >> $(BUILDLOCATION)/lib/libfaust-worklet-glue.js\n\t$(MAKE) -C $(BUILDLOCATION) cmake WORKLET=off\n\t$(MAKE) -C $(BUILDLOCATION) wasmglue\n\nsound2faust :\n\t$(MAKE) -C tools/sound2faust\n\n.PHONY: clean install uninstall dist parser help format\n\nhelp :\n\t@echo \"===== Faust main makefile =====\"\n\t@echo \"Main targets\"\n\t@echo \" 'compiler' (def): builds the Faust compiler (without the LLVM backend), and the Faust osc and httpd libraries\"\n\t@echo \" 'most'          : builds the Faust compiler with LLVM backend and every static libraries\"\n\t@echo \" 'developer'     : builds the Faust compiler with every possible backends and every static libraries\"\n\t@echo \" 'all'           : builds the Faust compiler with every possible backends and every static and dynamic libraries\"\n\t@echo \" 'libsall'       : builds the Faust compiler (without the LLVM backend) and includes all the static and dynamic libraries\"\n\t@echo\n\t@echo \" 'install'       : install the compiler, tools and the architecture files in $(prefix)/bin $(prefix)/share/faust $(prefix)/include/faust\"\n\t@echo \" 'clean'         : remove all object files (but keep build configurations)\"\n\t@echo \" 'distclean'     : clean everything by removing the build/faustdir folder\"\n\t@echo \n\t@echo \"Other targets\"\n\t@echo \" 'debug'         : similar to 'all' target but with debug info. Output is in $(BUILDLOCATION)/$(DEBUGFOLDER)\"\n\t@echo \" 'wasm'          : builds the Faust WebAssembly libraries\"\n\t@echo \" 'benchmark'     : builds the benchmark tools (see tools/benchmark)\"\n\t@echo \" 'remote'        : builds the libfaustremote.a library and the Faust RemoteServer\"\n\t@echo \" 'sound2faust'   : builds the sound2faust utilities (requires libsndfile)\"\n\t@echo \" 'parser'        : generates the parser from the lex and yacc files\"\n\t@echo\n\t@echo \"Distribution target\"\n\t@echo \" 'world'         : the 'all' target and sound2faust\"\n\t@echo\n\t@echo \"Platform specific targets:\"\n\t@echo \" 'universal'     : [MacOSX] switch to universal binaries mode\"\n\t@echo \" 'native'        : [MacOSX] switch to native mode\"\n\t@echo \" 'ioslib'        : [iOS] build the Faust static library for iOS\"\n\t@echo\n\t@echo \"Utilities targets:\"\n\t@echo \" 'man'              : generate the Faust man page\"\n\t@echo \" 'doc'              : generate the documentation using doxygen\"\n\t@echo \" 'doclib'           : generate the documentation of the Faust libraries\"\n\t@echo \" 'updatesubmodules' : update the libraries submodule\"\n\t@echo \" 'devinstall'       : install the benchmark tools\"\n\t@echo \" 'uninstall'        : undo what install did\"\n\t@echo \" 'dist'             : make a Faust distribution as a .zip file\"\n\t@echo \" 'log'              : make a changelog file\"\n\t@echo \" 'format'           : clang-format all src files\"\n\t@echo\n\nreadme:\n\t@cat resources/man-header.txt\n\t@build/bin/faust -h | sed -e 's/\\(-[a-zA-Z][a-zA-Z]*\\)/**\\1**/' \\\n\t\t\t | sed -e 's/\\(--[a-zA-Z][a-zA-Z-]*\\)/**\\1**/' \\\n\t\t\t | sed -e 's/</\\\\</g' \\\n\t\t\t | sed '/-----*/ G' \\\n\t\t\t | sed '/\\.$$/ G' \n\t@cat resources/man-footer.txt\n\t\t \n\t\nparser :\n\t$(MAKE) -C compiler/parser\n\nclean :\n\t$(MAKE) -C build clean\n\t$(MAKE) -C embedded/faustremote/RemoteServer clean\n\t$(MAKE) -C embedded/faustremote clean\n\t$(MAKE) -C tools/sound2faust clean\n\t$(MAKE) -C tools/benchmark clean\n\ndistclean :\n\trm -rf build/faustdir\n\ndoc: $(wildcard compiler/*.cpp) $(wildcard compiler/*/*.cpp) $(wildcard compiler/*/*.h) $(wildcard compiler/*/*.hh)\n\tcd documentation/libfaust && doxygen\n\tcd documentation/libfaustremote && doxygen\n\tcd documentation/compiler && doxygen\n\t\n\nformat :\n\tfind compiler -path compiler/parser -prune -o -iname '*.cpp' -execdir clang-format -i -style=file {} \\;\n\tfind compiler -path compiler/parser -prune -o -iname '*.hh' -execdir clang-format -i -style=file {} \\;\n\tfind compiler -path compiler/parser -prune -o -iname '*.h' -execdir clang-format -i -style=file {} \\;\n\n# the target 'lib' can be used to init and update the libraries submodule\nupdatesubmodules :\n\tif test -d .git; then git submodule update --init --recursive; fi\n\n\ndoclib : updatesubmodules\n\t./libraries/generateDoc\n\nman :\n\tmake -C documentation/man man\n\ninstall :\n\tmake -C $(BUILDLOCATION) install DESTDIR=$(DESTDIR) PREFIX=$(PREFIX)\n\nuninstall :\n\tmake -C $(BUILDLOCATION) uninstall\n\n\n# install benchmark tools\ndevinstall:\n\t$(MAKE) -C tools/benchmark install\n\n# make a Faust distribution tarball\ndist = faust-$(version)\nsubmodules = libraries tools/faust2ck\ndist :\n\trm -rf $(dist)\n# Make sure that the submodules are initialized.\n\tgit submodule update --init\n# Grab the main source.\n\tgit archive --format=tar.gz --prefix=$(dist)/ HEAD | tar xfz -\n# Grab the submodules.\n\tfor x in $(submodules); do (cd $(dist) && rm -rf $$x && git -C ../$$x archive --format=tar.gz --prefix=$$x/ HEAD | tar xfz -); done\n# Create the source tarball.\n\ttar cfz $(dist).tar.gz $(dist)\n\trm -rf $(dist)\n\n# this does the same, but uses the $(debversion) instead (see below) which\n# includes the actual git revision number and hash (useful for git snapshots)\ndist-snapshot :\n\t$(MAKE) dist dist=faust-$(debversion)\n\nlog :\n\tgit log --oneline --date-order --reverse --after={2014-05-19} master >log-$(version)\n\n# Make Debian packages. This builds a package from the current HEAD in a\n# subdirectory named $(debdist). It also creates the source archive that goes\n# along with it. All files will be created in the toplevel Faust source\n# directory.\n\n# To make this work, you need to have the Debian package toolchain (debuild\n# and friends) installed. Also make sure you have your DEBEMAIL and\n# DEBFULLNAME environment variables set up as explained in the debchange(1)\n# manual page. These are needed to create changelog entries and in order to\n# sign the Debian packages created with 'make deb' and 'make debsrc'.\n\n# The typical workflow is as follows:\n\n# 1. Run 'make debchange' once to create a new debian/changelog entry. You\n# *must* do this once so that debuild knows about the proper version number of\n# the package.\n\n# 2. Run 'make deb' to build a signed binary package. Or 'make deb-us' for an\n# unsigned one.\n\n# If you only need the binary package for local deployment then you're done.\n# Otherwise proceed to step 3.\n\n# 3. Run 'make debsrc' to create a signed Debian source package which can be\n# uploaded, e.g, to Launchpad using 'dput'. Or 'make debsrc-us' for an\n# unsigned package.\n\n# 4. Run 'make debclean' to get rid of any files that were created in steps 2\n# and 3.\n\n# The Debian version gets derived from the package version $(version) as well\n# as the date and serial number of the last commit.\ndebversion = $(version)+git$(shell git log -1 --format=%cd --date=short 2>/dev/null | sed -e 's/-//g')+$(shell git rev-list --count HEAD 2>/dev/null)\n# Debian revision number of the package.\ndebrevision = 1\n# Source tarball and folder.\ndebsrc = faust_$(debversion).orig.tar.gz\ndebdist = faust-$(debversion)\n\n# This is used for automatically generated debian/changelog entries (cf. 'make\n# debchange'). Adjust as needed.\ndebmsg = \"Build from latest upstream source.\"\ndebprio = \"low\"\n\n.PHONY: debversion debchange debclean deb debsrc deb-us debsrc-us\n\ndebversion:\n\t@echo $(debversion)\n\ndebchange:\n\tdch -u $(debprio) -v $(debversion)-$(debrevision) $(debmsg) && dch -r \"\"\n\ndebclean:\n\trm -rf $(debdist)\n\trm -f faust_$(version)+git* faust-dbgsym_$(version)+git*\n\ndeb: $(debsrc)\n\trm -rf $(debdist)\n\ttar xfz $(debsrc)\n# Here we just copy debian/ from the working copy since it might have changes\n# that haven't been committed yet.\n\tcd $(debdist) && cp -R ../debian . && debuild $(DEBUILD_FLAGS)\n\trm -rf $(debdist)\n\ndebsrc:\n\t$(MAKE) deb DEBUILD_FLAGS=-S\n\ndeb-us:\n\t$(MAKE) deb DEBUILD_FLAGS=\"-us -uc\"\n\ndebsrc-us:\n\t$(MAKE) deb DEBUILD_FLAGS=\"-S -us -uc\"\n\n$(debsrc) :\n\trm -rf $(debdist)\n# Make sure that the submodules are initialized.\n\tgit submodule update --init\n# Grab the main source.\n\tgit archive --format=tar.gz --prefix=$(debdist)/ HEAD | tar xfz -\n# Grab the submodules.\n\tfor x in $(submodules); do (cd $(debdist) && rm -rf $$x && git -C ../$$x archive --format=tar.gz --prefix=$$x/ HEAD | tar xfz -); done\n# Create the source tarball.\n\ttar cfz $(debsrc) $(debdist)\n\trm -rf $(debdist)\n\n# DO NOT DELETE\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.89453125,
          "content": "# Faust - Programming Language for Audio Applications and Plugins\n\n## Grame, Centre National de Creation Musicale: <https://www.grame.fr>\n\nBuild status: [![Ubuntu](https://github.com/grame-cncm/faust/actions/workflows/ubuntu.yml/badge.svg)](https://github.com/grame-cncm/faust/actions/workflows/ubuntu.yml) [![MacOS](https://github.com/grame-cncm/faust/actions/workflows/macos.yml/badge.svg)](https://github.com/grame-cncm/faust/actions/workflows/macos.yml) [![Windows](https://github.com/grame-cncm/faust/actions/workflows/windows.yml/badge.svg)](https://github.com/grame-cncm/faust/actions/workflows/windows.yml)\n\n## Introduction\n\nFaust (Functional Audio Stream) is a functional programming language specifically designed for real-time signal processing and synthesis. A distinctive characteristic of Faust is that it is fully compiled.\n\nThe Faust compiler translates DSP specifications into very efficient code for various languages (C++, C, JAVA, LLVM IR, WebAssembly etc.) working at sample level. It targets high-performance signal processing applications, libraries, and audio plug-ins for a variety of audio platforms and standards. A same Faust specification can be used to easily generate various kinds of native standalone applications, iOS and Android apps, as well as Csound, LADSPA, Max/MSP, PD, Q, SuperCollider, VST, AU plugins, etc. (see the README in the `/architecture` folder for an exhaustive list).\n\nWhile there are Faust contributors everywhere across the globe, Faust is mainly being developed at Grame, Centre National de Creation Musicale (<https://www.grame.fr>), its birthplace.\n\n## Versions and Branches\n\nThe Faust distribution can be downloaded on the Faust Github repository: <https://github.com/grame-cncm/faust>. Official release packages are also available here: <https://github.com/grame-cncm/faust/releases>.\n\nIn the following subsections, details about the branches of the repository are given.\n\n### `master`\n\n`master` is the main Faust branch. It can compile in different languages: C, C++, JAVA, LLVM IR, WebAssembly etc. Thanks to its ability to generate LLVM IR and by using LLVM JIT, Faust is \"embeddable\" in any C++ program through a library called `libfaust`, which is needed by some sister projects of Faust such as FaustLive, FaucK, faustgen~, etc.\n\n### `master-dev` (Preferred Development Branch)\n\n`master-dev` is the development sub-branch of `master`. It is used by Faust developers to commit their changes and can be considered as \"the main development branch.\" The goal is to make sure that `master` is always functional. Merges between `master-dev` and `master` are carried out typically where doing a release.\n\nMore experimental branches are also available but are not documented here.\n\n## Overview of the Faust Distribution\n\nThis is an overview of the content of the top-level folders of the Faust distribution. Most of these folders contain their own README describing their content in more details.\n\n\tarchitecture/          : the architecture files currently supported\n\tbuild/                 : build tools and scripts (cmake based)\n\tbenchmark/             : tools to measure the impact of various compiler options\n\tcompiler/              : sources of the Faust compiler\n\tdebian/                : files for Debian installation\n\tdocumentation/         : Faust developer's documentation\n\texamples/              : Faust programs examples organized by categories\n\tinstaller/             : various installers for Linux distribution\n\tlibraries/             : DSP libraries\n\tsyntax-highlighting/   : support for syntax highlighting for several editors\n\ttests/                 : various tests\n\ttools/                 : additional easy-to-use scripts (faust2...) to produce binaries and plugins\n\twindows/               : Windows related resources\n\n## Libraries and additional dependencies\n\nFaust libraries are now in a [separated project](https://github.com/grame-cncm/faustlibraries) and included as a git submodule. \n\nThe [oboe](https://github.com/google/oboe) project is included as submodule in two different places: `architecture/android/app/oboe` and `architecture/smartkeyboard/app/oboe`. \n\nThe [faust2ck](https://github.com/ccrma/faust2ck) project is included as submodule in `tools/faust2ck`. \n\nThe [py2max](https://github.com/shakfu/py2max) project is also included as submodule in `architecture/max-msp/py2max`. \n\nThe [node-matcher-plugin](https://github.com/nuchi/node-matcher-plugin) project is also included as submodule in `node-matcher-plugin`. \n\nThese submodules are synchronized from time to time in the main Faust repository using the following commands:\n\n    git submodule update --remote --merge\n    git add libraries tools/faust2ck architecture/android/app/oboe architecture/smartKeyboard/android/app/oboe architecture/max-msp/py2max node-matcher-plugin\n    git commit -m \"Faust updated to the latest version of the libraries, faust2ck, oboe, py2max, node-matcher-plugin\"\n    git push\n\nOr to synchronize the *libraries* folder only:\n\n    git submodule update --remote --merge libraries\n    git add libraries \n    git commit -m \"Faust updated to the latest version of libraries.\"\n    git push\n    \nOr to synchronize the *faust2ck* folder only:\n\n    git submodule update --remote --merge tools/faust2ck\n    git add tools/faust2ck \n    git commit -m \"Faust updated to the latest version of faust2ck.\"\n    git push\n\nOr to synchronize the *py2max* folder only (note that current used stable py2max version is v0.1.1):\n\n    git submodule update --remote --merge architecture/max-msp/py2max\n    git add architecture/max-msp/py2max \n    git commit -m \"Faust updated to the latest version of py2max.\"\n    git push\n    \nOr to synchronize the *node-matcher-plugin* folder only:\n\n    git submodule update --remote --merge node-matcher-plugin\n    git add node-matcher-plugin\n    git commit -m \"Faust updated to the latest version of node-matcher-plugin.\"\n    git push\n\n## Compilation and Installation\n\nSince release 2.5.18, Faust compilation and installation is based on [CMake](https://cmake.org/). For details about compilation, you should look at the [Faust wiki pages](https://github.com/grame-cncm/faust/wiki) or go directly to the [simple tutorial](https://github.com/grame-cncm/faust/wiki/BuildingSimple) to compile and install.\n\n## Using the Faust Examples\n\nThe `/examples` folder contains dozen of example Faust codes organized by categories. There are many options to use them.\n\n### Online Faust Editor\n\nThe [Online Faust Editor](https://fausteditor.grame.fr) is a zero-conf tool that provides all the compilation services, including binaries generation for all the supported platforms and architectures.\n\n### Online Faust IDE\n\nThe [Online Faust IDE](https://faustide.grame.fr) is a zero-conf tool that provides all the compilation services, including binaries generation for all the supported platforms and architectures, but also various utilities for signal processing development.\n\n### Faust Playground\n\n[Faust Playground](https://faustplayground.grame.fr/) is an online tool to compile and use Faust code directly in a web browser. To use a Faust example from the `/examples` folder, just drag-and-drop it in the work space and it should work right away!\n\n### FaustLive\n\n[FaustLive](https://github.com/grame-cncm/faustlive) is a program that was designed to facilitate the prototyping of Faust codes. It embeds the LLVM powered dynamic libfaust compiler allowing you to very rapidly compile Faust codes on your computer. Binaries and installation packages of FaustLive are available for [Linux, Windows and OSX](https://github.com/grame-cncm/faustlive/releases).\n\n### `faust2...` Scripts and Programs\n\nThe `faust2...` scripts and programs are command line tools allowing to compile Faust codes to any of the supported Faust targets (\"architectures\"). They are placed on your system during the Faust installation process. The fastest way to get an exhaustive list of all of them is to open a terminal window, type `faust2`, and then press the Tab key for auto-completion. For example, to compile a Faust code as a JACK application with a Qt interface, run:\n\n\tfaust2jaqt yourCode.dsp\n\nThe most commonly used `faust2` scripts are:\n\n    faust2alqt              : ALSA application with Qt UI\n    faust2ladspa            : LADSPA plug-in\n    faust2pdf               : pdf block diagram\n    faust2supercollider     : SuperCollider external\n    faust2alsa              : ALSA application with GTK UI\n    faust2faustvst          : VST plug-in\n    faust2lv2               : LV2 plug-in\n    faust2plot              : command line program to debug DSP (sample plotting, etc.)\n    faust2svg               : SVG block diagram\n    faust2alsaconsole       : ALSA command line program\n    faust2mathdoc           : automatic pdf mathematical documentation\n    faust2png               : png block diagram\n    faust2android           : Android app\n    faust2graph             : svg graph\n    faust2puredata          : PureData external\n    faust2api               : API generator\n    faust2msp               : MaxMSP 5 external and patch\n    faust2max6              : MaxMSP 6 (and later) external and patch\n    faust2ios               : iOS app\n    faust2ros               : ROS app\n    faust2au                : Audio Unit plugin\n    faust2rosgtk            : ROS app with GTK UI\n    faust2bela              : BELA program\n    faust2jack              : JACK application with GTK UI\n    faust2netjackconsole    : NetJack command line program\n    faust2rpialsaconsole    : Raspberry Pi ALSA command line program\n    faust2caqt              : CoreAudio application with Qt UI\n    faust2jackconsole       : JACK command line program\n    faust2netjackqt         : NetJack application with Qt UI\n    faust2rpinetjackconsole : Raspberry Pi JACK command line program\n    faust2caqtios           : iOS app with Qt UI\n    faust2octave            : Octave script\n    faust2csound            : CSOUND Opcode\n    faust2owl               : OWL Program\n    faust2sig               : SVG signal\n    faust2jaqt              : JACK application with Qt UI\n\nObviously, the corresponding dependencies for each of them must be installed on your system for compilation to be successful. For example, if you use `faust2jaqt`, JACK and Qt libraries must be installed.\n\n## Documentation and Resources\n\n* `/documentation/faust-quick-reference.pdf` contains the most up-to-date documentation of Faust.\n* `/documentation/library.pdf` contains the documentation of the Faust DSP libraries.\n* The [Faust website](https://faust.grame.fr) contains useful resources around Faust.\n* The [Faust online course](https://ccrma.stanford.edu/~rmichon/faustWorkshops/course2015/) or the [Faust Hero in 2 Hours tutorial](https://ccrma.stanford.edu/~rmichon/faustTutorials/#faust-hero-in-2-hours) might be good starting points for beginners.\n* [Julius Smith's website](https://ccrma.stanford.edu/~jos) is an incredible resource on various topics around DSP and Faust.\n\n## Acknowledgements\n\nMany persons have been contributing to the Faust project by\nproviding code for the compiler, architecture files, libraries,\nexamples, documentation, scripts, bug reports, ideas, etc.\n\nI would like to thank them and especially: Fons Adriaensen, Tiziano\nBole, Baktery Chanka, Thomas Charbonnel, Damien Cramet, Etienne\nGaudrin, Albert Graef, Stefan Kersten, Victor Lazzarini, Matthieu\nLeberre, Mathieu Leroi, Kjetil Matheussen, Remy Muller, Sampo\nSavolainen, Nicolas Scaringella, Stephen Sinclair, Travis Skare,\nJulius Smith, as well as my colleagues at GRAME, in particular :\nDominique Fober, Stephane Letz and Karim Barkati, and from the\nASTREE project : Jerome Barthelemy (IRCAM), Alain Bonardi (IRCAM),\nRaffaele Ciavarella (IRCAM), Pierre Jouvelot (Ecole des\nMines/ParisTech), Laurent Pottier (U. Saint-Etienne)\n\n## Questions and suggestions\n\nIf you have questions suggestions and comments, or if you want to\ncontribute to the project, two mailing lists are available:\n- [Development List](https://lists.sourceforge.net/lists/listinfo/faudiostream-devel)\n- [Users List](https://lists.sourceforge.net/lists/listinfo/faudiostream-users)\n\n[Yann Orlarey](https://github.com/orlarey)\n"
        },
        {
          "name": "WHATSNEW.md",
          "type": "blob",
          "size": 0.2470703125,
          "content": "## Faust - Programming Language for Audio Applications and Plugins\n\nThe Faust project is now described in the [README](https://github.com/grame-cncm/faust) file. The project releases can be accessed [here](https://github.com/grame-cncm/faust/releases).\n"
        },
        {
          "name": "adding-feature.md",
          "type": "blob",
          "size": 7.5966796875,
          "content": "# On adding features to languages\n\n## First of all\n\nAdding a feature has a very high development cost, mainly due to the fact that this new feature induces a break in the versions: there will be the next code that will not be compilable by the previous language (which can be even worse if your feature doesn't ensure backward compatibility: the break occurs in both directions). In this respect, it may be useful to write a compatibility script. Also, the first question to ask yourself when adding a feature is:\n\n- is the feature you are about to add really necessary? In other words: Is it useful only in a negligible number of cases? Is it understandable only by the few gurus who wrote the language? Can it simply be emulated directly in the language (or in the compiler)? Will it be difficult to maintain?\n- isn't the code base too unstable to afford a new potential source of bugs? If you hesitated to answer no to any of these questions, you should close this file and reconsider adding a feature.\n\nWith that said, let's get down to business.\n\n## Practical example\n\nThe problem considered here is the addition of a signal interval annotation system in the Faust language, allowing to indicate and test compiler-calculated major/minorities. This language (like all DSLs) is certainly not a very good example for the general case, however, some techniques should be quite similar.\n\nWe propose to add two pairs of primitives to Faust:\n\n * `highest(s)` and `lowest(s)`, single-input signals returning respectively the major and minor of the signal `s` computed by the compiler. From the point of view of the Faust type lattice, they are constants, computable at compile time (of course), floating point (so not boolean), parallelizable (I think), and this, whatever the input signal.\n\n * `assertbounds(lo, hi, sig)`, with `lo` and `hi` two constants known at compile time, which will have two behaviors: in normal mode, it creates a signal whose value is that of `sig` but whose interval is `[lo, hi]`, in debug mode, it checks during execution that this interval is indeed checked.\n\nN.B. Two other primitives concerning the resolution of signals should probably be added.\n\n## Lexer/Parser\n\nThe first step is to extend the set of valid Faust programs so that they contain (preferably exactly) the strings representing these primitives, by modifying the syntax (lexing) and semantics (parsing) of Faust. Indeed, if we ask Faust to compile the following program:\n\n    process = assertbounds(-1, 1);\n\nwe get the following error: \n\n    1 : ERROR : undefined symbol : assertbounds\n\nTo do this, we have to modify the files describing the lexer and the parser, here written in Flex/Bison (for more details, see the Dragon Book)\n\nIn Faust, these files are located in `compiler/parser`.\n\n### Lexing\n\nIn Bison, the declaration of tokens is done in the parser, here `faustparser.y`, so let's declare 4 new tokens:\n\n     %token ASSERTBOUNDS\n     %token LOWEST\n     %token HIGHEST\n\nThen we need to associate these tokens with Faust strings, so let's modify the lexer. The file containing the lexer is in `faustlexer.l`. Just add (between the two `%%`) :\n\n    \"assertbounds\" return ASSERTBOUNDS;\n    \"lowest\" return LOWEST;\n    \"highest\" return HIGHEST;\n\nLet's recompile the parser and the compiler (`make parser` and `make` at the root). Compiling the example :\n\n    process = assertbounds(-1, 1);\n\nwe now get: \n\n    1 : ERROR : syntax error\n    \n### Parsing\n\nSince we are going to add a primitive, it will logically come from the non-terminal `primitive`. Since we are dealing with primitives, our tokens will be terminal.\n\nWarning: we are talking about the implementation of a new primitive, not an `xtended` one.\n\nIn most compilers, for a primitive of arity `n`, it is usual to ask the parser to build an object symbolizing the primitive by calling the `C++` constructor of the primitive with the result of parsing the arguments of the primitive. However, since the Faust language describes a block algebra, the arguments are not always explicitly passed to the primitive, they can be routed. Hence a small _wrapper_ around the constructor of the primitive, depending on the airty of the primitive.\n\nAs they have an arity of 1 and 3, two new boxes must be defined: \n\n\t| ASSERTBOUNDS { $$ = boxPrim3(sigAssertBounds);}\n\t| LOWEST { $$ = boxPrim1(sigLowest);}\n\t| HIGHEST { $$ = boxPrim1(sigHighest);}\n\nthe parsing is finished.\n\n## Signal constructors\n\nFaust constructors are extremely classical from a computational point of view: each signal is a tree with in its root a symbol unique to the operation of the signal (e.g. an ADD symbol for an addition) and as children its arguments (boilerplate incoming code).\n\nThey are defined in `signals.cpp` with their destructors (in the functional programming sense of the term, not memory management).\n\nBut first we have to define the symbols of the signals. For optimization reasons, they are defined once and for all in `global.hh` and `global.cpp` (a single mutable object called `gGlobal` which emulates the global variables to the whole code):\n\n`global.hh`\n\n```c++\nSym SIGASSERTBOUNDS;\nSym SIGHIGHEST;\nSym SIGLOWEST;\n```\n\n`global.cpp`\n\n```c++\nSIGASSERTBOUNDS = symbol(\"sigAssertBounds\");\nSIGHIGHEST = symbol(\"sigHighest\");\nSIGLOWEST = symbol(\"sigLowest\");\n```\n\nWe can now define the constructor of the signal `assertbounds` as well as its destructor :\n\n`signals.hh`\n\n```c++\nTree sigAssertBounds(Tree s1, Tree s2, Tree s3);\nTree sigLowest(Tree s);\nTree sigHighest(Tree s);\n\nbool isSigAssertBounds(Tree t, Tree& s1, Tree& s2, Tree& s3);\nbool isSigLowest(Tree t, Tree& s);\nbool isSigHighest(Tree t, Tree& s);\n```\n\n`signals.cpp`\n\n```c++\nTree sigAssertBounds(Tree s1, Tree s2, Tree s3)\n{\n    return tree(gGlobal->SIGASSERTBOUNDS, s1, s2, s3);\n}\n\nbool isSigAssertBounds(Tree t, Tree& s1, Tree& s2, Tree& s3)\n{\n    return isTree(t, gGlobal->SIGASSERTBOUNDS, s1, s2, s3);\n}\n```\n\nAnd now it compiles, unfortunately. Indeed, if the compiler is now able to create an object for the primitives, it still has no idea how to compile it. And indeed, if we compile the example: \n\n\t`process = assertbounds;`\n\nWe get:\n\n    ERROR: getSubSignals unrecognized signal: sigAssertBounds[-1,1,SigInput[0]]\n    \n## Compilation\n\nNow that the signals are built, we can start compiling. Let's modify the `getSubSignals` function. This function is in the `subsignals.cpp` file (we can for example use the auto-generated documentation with Doxygen `make doc` at the root, or the definition search features in modern editors like Emacs), it just extracts the signals from the subtrees of the signal tree (let's not forget that a signal is stored as a tree). Our boxes all have two signals, so we can use the `sigPrefix` case as an example.\n\nAfter compiling and executing the code, we get the new and more interesting error: \n\n\tERROR inferring signal type: unrecognized signal\n\nSo we have to modify the type inference system present in the `signals/sigtyperules.cpp` file. The formal definition of Faust types can be found as a comment in the header of the `sigtype.hh` file.\n\nLet's start with `assertbounds`, the principle of this function being to add bounds to a signal, just use the `promoteInterval` method\n\nother files to change for the backend -ocpp\n\n- `signals/sigToGraph.cpp`, for signal graphs\n\n- `signals/sigIdentity.cpp`, for signal graphs\n\n- `boxes/ppbox.cpp`, for diagrams\n\n- `generator/compile_scal.cpp`, this file is the one that contains the actual compilation\n\n- `sigprint.cpp`, if you need a special drawing\n\nThink about tests against the: \n\n- generated code\n\n- intervals\n\nWhat happens with non-decimal constants in the F2D version?\n\nWhat happens if the interval gives an exact version in double but there is an overflow in float (e.g. annoying delays)?\n"
        },
        {
          "name": "architecture",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "compiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "embedded",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "installer",
          "type": "tree",
          "content": null
        },
        {
          "name": "libraries",
          "type": "commit",
          "content": null
        },
        {
          "name": "node-matcher-plugin",
          "type": "commit",
          "content": null
        },
        {
          "name": "syntax-highlighting",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "version",
          "type": "blob",
          "size": 3.900390625,
          "content": "#!/bin/bash\n# \n# Faust project\n# version management tool\n#\n\nfunction warn {\n\techo \"WARNING ! This tools is intended to change the current version number\"\n\techo \"NOT to recall a previous Faust version !\"\n}\nfunction major {\n\techo $1 | sed 's/\\..*//'\n}\nfunction minor {\n\techo $1 | sed 's/[0-9]*\\.\\([0-9]*\\)\\..*/\\1/'\n}\nfunction patch {\n\techo $1 | sed 's/[0-9]*\\.[0-9]*\\.\\([0-9]*\\)/\\1/'\n}\nfunction winVer {\n\techo $1 | sed \"s/\\./,$2/g\"\n}\nfunction rcUpdate {\n \tsed \"s/FILEVERSION[ \t].*/FILEVERSION $2/\" $1 | \\\n \tsed \"s/PRODUCTVERSION[ \t].*/PRODUCTVERSION $2/\" | \\\n \tsed \"s/VALUE \\\"FileVersion\\\"..*/VALUE \\\"FileVersion\\\", \\\"$3\\\"/\" | \\\n \tsed \"s/VALUE \\\"ProductVersion\\\"..*/VALUE \\\"ProductVersion\\\", \\\"$3\\\"/\"\n}\n\nif [ $# -ne 1 ]\nthen\n\techo \"Faust version management utility\"\n\techo \"usage: version version_num\"\n\techo \"       version_num format: n.n.n\"\n\twarn\n\texit 1\nfi\n\nwarn\necho \"Type OK to continue... \"\nread CONT\n[ \"$CONT\" == \"OK\" ] || exit 1\n\n\nROOT=.\nVERSION=$1\nMAJOR=$(major $VERSION)\nMINOR=$(minor $VERSION)\nPATCH=$(patch $VERSION)\nWINVERS=$(winVer $VERSION)\",0\"\nWINVERS2=$(winVer $VERSION \" \")\", 0\"\n\nif [ -d compiler ]\nthen\n\techo \"moving version number to $VERSION\"\nelse\n\techo \"this script must be called from the Faust project root directory\"\n\texit 1\nfi\n\nLIBFAUSTACTION=$ROOT/.github/workflows/libfaust.yml\necho \" updating $LIBFAUSTACTION\"\nsed \"s/FAUST_VERSION*: *..*/FAUST_VERSION: $VERSION/\" $LIBFAUSTACTION > TMP$$\nmv -f TMP$$ $LIBFAUSTACTION\n\nMAKEF=$ROOT/Makefile\necho \" updating $MAKEF\"\nsed \"s/^version *:= *..*/version := $VERSION/\" $MAKEF > TMP$$\nmv -f TMP$$ $MAKEF\n\nMAKEF=$ROOT/build/Makefile\necho \" updating $MAKEF\"\nsed \"s/^VERSION *:= *..*/VERSION := $VERSION/\" $MAKEF > TMP$$\nmv -f TMP$$ $MAKEF\n\nCMAKE=$ROOT/build/CMakeLists.txt\necho \" updating $CMAKE\"\nsed \"s/set (VERSION[ \t]*[0-9].*)/set (VERSION $VERSION)/\" $CMAKE > TMP$$\nmv TMP$$ $CMAKE\n\nMAKERELEASE=$ROOT/build/MakeRelease.bat\necho \" updating $MAKERELEASE\"\nsed \"s/^SET VERSION=[0-9].*/SET VERSION=$VERSION/\" $MAKERELEASE > TMP$$\nmv TMP$$ $MAKERELEASE\n\nFAUST=$ROOT/architecture/faust/export.h\necho \" updating $FAUST\"\nsed \"s/FAUSTVERSION[ \t]\\\".*\\\"/FAUSTVERSION \\\"$VERSION\\\"/\" $FAUST > TMP$$\nmv -f TMP$$ $FAUST\nsed \"s/FAUSTMAJORVERSION[ \t].*/FAUSTMAJORVERSION $MAJOR/\" $FAUST > TMP$$\nmv -f TMP$$ $FAUST\nsed \"s/FAUSTMINORVERSION[ \t].*/FAUSTMINORVERSION $MINOR/\" $FAUST > TMP$$\nmv -f TMP$$ $FAUST\nsed \"s/FAUSTPATCHVERSION[ \t].*/FAUSTPATCHVERSION $PATCH/\" $FAUST > TMP$$\nmv -f TMP$$ $FAUST\n\nFAUSTRC=$ROOT/windows/faust.rc\necho \" updating $FAUSTRC\"\nrcUpdate $FAUSTRC $WINVERS \"$WINVERS2\" > TMP$$\nmv -f TMP$$ $FAUSTRC\n\nFAUSTDLLRC=$ROOT/windows/faustdll.rc\necho \" updating $FAUSTDLLRC\"\nrcUpdate $FAUSTRC $WINVERS \"$WINVERS2\" > TMP$$\nmv -f TMP$$ $FAUSTDLLRC\n\nMAN=$ROOT/documentation/man/man-header.txt\necho \" updating $MAN\"\nsed \"s/% man(1) Version [ \t]*[0-9].*/% man(1) Version $VERSION (`LC_ALL=C date +%d-%B-%Y`) | Faust man page/\" $MAN > TMP$$\nmv -f TMP$$ $MAN\n\nCOPYING=$ROOT/COPYING.txt\necho \" updating $COPYING\"\nsed \"s/FAUST compiler, Version[ \t]*[0-9].*/FAUST compiler, Version $VERSION/\" $COPYING > TMP$$\nmv -f TMP$$ $COPYING\n\nDOXYFILE1=$ROOT/documentation/libfaust/Doxyfile\necho \" updating $DOXYFILE1\"\nsed \"s/PROJECT_NUMBER         = [ \t]*[0-9].*/PROJECT_NUMBER         = $VERSION/\" $DOXYFILE1 > TMP$$\nmv -f TMP$$ $DOXYFILE1\n\nDOXYFILE2=$ROOT/compiler/Doxyfile\necho \" updating $DOXYFILE2\"\nsed \"s/PROJECT_NUMBER         = [ \t]*[0-9].*/PROJECT_NUMBER         = $VERSION/\" $DOXYFILE2 > TMP$$\nmv -f TMP$$ $DOXYFILE2\n\nDOXYFILE3=$ROOT/documentation/libfaustremote/Doxyfile\necho \" updating $DOXYFILE3\"\nsed \"s/PROJECT_NUMBER         = [ \t]*[0-9].*/PROJECT_NUMBER         = $VERSION/\" $DOXYFILE3 > TMP$$\nmv -f TMP$$ $DOXYFILE3\n\nDOXYFILE4=$ROOT/documentation/compiler/Doxyfile\necho \" updating $DOXYFILE4\"\nsed \"s/PROJECT_NUMBER         = [ \t]*[0-9].*/PROJECT_NUMBER         = $VERSION/\" $DOXYFILE4 > TMP$$\nmv -f TMP$$ $DOXYFILE4\n\nmake man\n\necho $VERSION > version.txt\necho \"### You need to recompile Faust for the change to take effect.\"\nexit 0\n"
        },
        {
          "name": "windows",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}