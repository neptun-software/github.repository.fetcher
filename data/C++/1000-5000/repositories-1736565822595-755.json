{
  "metadata": {
    "timestamp": 1736565822595,
    "page": 755,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "snap-stanford/snap",
      "stars": 2205,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7001953125,
          "content": "# Mac OS X\n.DS_Store\n\n# Xcode\n*.pbxuser\n*.mode1v3\n*.mode2v3\n*.perspectivev3\n*.xcuserstate\nproject.xcworkspace/\nxcuserdata/\n\nbuild/\n\n# Compiler-generated files\n*.o\n*.dSYM/\n*.pyc\n\n# Test-generated files \ntest_*.dat\ntest_*.dot\ntest_*.gif\nsample_*.dot\n*.graph\n*.log\n*.m\n*.net\n*.out\n*.paj\n*.png\n*.plt\n*.tab\n*.ps\n*.pool\n*.xml\n\n# Backup files\n*~.nib\n*.swo\n*.swp\n\n# Doxygen-produced files\ndoxygen/snapdoc-dev\ndoxygen/snapdoc-user\ndoxygen/log*.txt\ndoxygen/snap\n\n# Ignore executables, but keep everything else\nsnap-core/testSnap\ntest/run-all-tests\n!test/graphviz/base*\ntutorials/*\n!tutorials/*.*\n!tutorials/Makefile\n!tutorials/cncom\n!tutorials/graphviz\n!tutorials/parser\ntutorials/.DS_Store\ntutorials/*.dSYM\nbenchmarking/*.dat\n"
        },
        {
          "name": "Credits.txt",
          "type": "blob",
          "size": 1.169921875,
          "content": "Stanford Network Analysis Platform (SNAP) is a general purpose, high\nperformance system for graph and network manipulation and analysis.\n\nJure Leskovec started developing SNAP during his PhD studies in 2005.\nRok Sosic has been maintaining the code since 2012. GLib, which is used\nextensively by SNAP, was started by Marko Grobelnik in 1996.\n\nThe following people also contributed to the development of SNAP\n(in alphabetical order).\n\nRuth-Ann Armstrong\nArijit Banerjee\nAustin Benson\nJustin Cheng\nRoyce Cheng-Yue\nBlaz Fortuna\nFlorian Geigl\nStephen Dean Guo\nAgrim Gupta\nShubham Gupta\nTim Hsieh\nRichard Hsu\nFarzaan Kaiyom\nChentai Kao\nMario Karlovcec\nNikhil Khadke\nVikesh Khanna\nEmmanouil Kiagias\nMyunghwan Kim\nVid Kocijan\nViswesh Krishna\nSaachi Jain\nJason Jong\nPeter Lofgren\nStephen Macke\nCarolina Mattsson\nJulian McAuley\nMorteza Milani\nRiyad Parvez\nYonathan Perez\nMohana Prasad\nRohan Puttagunta\nMartin Raison\nSheila Ramaswamy\nManuel Gomez Rodriguez\nKenny Root\nDavide Sardina\nChristoph Schaefer\nPararth Shah\nNicholas Shelly\nKlemen Simonic\nGuo Tai\nMing Han Teh\nBa-Quan Truong\nUtkarsh Upadhyay\nTheodore Vasiloudis\nViswajith Venugopal\nAvery Wang\nJaewon Yang\nHao Yin\nDavid Zeng\nChenguang Zhu\nZiga Zupanec\n\n"
        },
        {
          "name": "License.txt",
          "type": "blob",
          "size": 1.50390625,
          "content": "* Copyright (c) 2007-2019, Jure Leskovec\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without\n* modification, are permitted provided that the following conditions are met:\n*     * Redistributions of source code must retain the above copyright\n*       notice, this list of conditions and the following disclaimer.\n*     * Redistributions in binary form must reproduce the above copyright\n*       notice, this list of conditions and the following disclaimer in the\n*       documentation and/or other materials provided with the distribution.\n*     * Neither the name of Stanford University nor the names of its contributors\n*       may be used to endorse or promote products derived from this software\n*       without specific prior written permission.\n*\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\n* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY\n* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.283203125,
          "content": "#\r\n# Makefile for non-Microsoft compilers\r\n#\r\n\r\nall: MakeAll\r\n\r\ntest: TestAll\r\n\r\nMakeAll:\r\n\t$(MAKE) -C snap-core\r\n\t$(MAKE) -C examples\r\n\r\nTestAll:\r\n\t$(MAKE) run -C test\r\n\r\nclean:\r\n\t$(MAKE) clean -C snap-core\r\n\t$(MAKE) clean -C examples\r\n\t$(MAKE) clean -C test\r\n\t$(MAKE) clean -C tutorials\r\n"
        },
        {
          "name": "Makefile.config",
          "type": "blob",
          "size": 1.828125,
          "content": "#\n#\tGlobal configuration for SNAP makefiles\n#\n\nGLIB = glib-core\nSNAP = snap-core\nGLIBADV = glib-adv\nSNAPADV = snap-adv\nSNAPEXP = snap-exp\n\nCGLIB = ../$(GLIB)\nCSNAP = ../$(SNAP)\n\nEXGLIB = ../../$(GLIB)\nEXSNAP = ../../$(SNAP)\nEXGLIBADV = ../../$(GLIBADV)\nEXSNAPADV = ../../$(SNAPADV)\nEXSNAPEXP = ../../$(SNAPEXP)\n\nUNAME := $(shell uname)\n\nifeq ($(UNAME), Linux)\n  # Linux flags\n  CC = g++\n  CXXFLAGS += -std=c++98 -Wall\n  CXXFLAGS += -O3 -DNDEBUG -fopenmp\n  # turn on for crash debugging, get symbols with <prog> 2>&1 | c++filt\n  #CXXFLAGS += -g -rdynamic\n  #CXXFLAGS += -ggdb\n  # turn on for OpenMP\n  CXXOPENMP = \n  LDFLAGS +=\n  LIBS += -lrt\n\nelse ifeq ($(UNAME), Darwin)\n  # OS X flags\n  CC = g++\n  CXXFLAGS += -std=c++98 -Wall -Wno-unknown-pragmas\n  CXXFLAGS += -O3 -DNDEBUG\n  CLANG := $(shell g++ -v 2>&1 | grep clang | cut -d \" \" -f 2)\n  ifeq ($(CLANG), LLVM)\n    CXXFLAGS += -DNOMP\n    CXXOPENMP =\n  else ifeq ($(CLANG), clang)\n    CXXFLAGS += -DNOMP\n    CXXOPENMP =\n  else\n    CXXFLAGS += -fopenmp\n    #CXXOPENMP += -fopenmp\n  endif\n  LDFLAGS +=\n  LIBS +=\n\n  # If a dynamic library, i.e. gtest, is installed in some local directory,\n  # for example by Anaconda, the program might fail with 'image not found'.\n  # Use one of the solutions below.\n  # 1. set the path to the lib directory in the executable at linking time\n  #LDFLAGS += -Wl,-rpath,$(HOME)/miniconda3/lib\n  # 2. set one of the following environment variables from your shell at run time\n  #export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/miniconda3/lib\n  #export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:$HOME/miniconda3/lib\n  #export DYLD_FALLBACK_LIBRARY_PATH=$DYLD_FALLBACK_LIBRARY_PATH:$HOME/miniconda3/lib\n\nelse ifeq ($(shell uname -o), Cygwin)\n  # Cygwin flags\n  CC = g++\n  CXXFLAGS += -Wall -D__STDC_LIMIT_MACROS\n  CXXFLAGS += -O3 -DNDEBUG\n  CXXOPENMP = -fopenmp\n  LDFLAGS += -fopenmp\n  LIBS +=\n\nendif\n\n"
        },
        {
          "name": "ReadMe.txt",
          "type": "blob",
          "size": 13.1728515625,
          "content": "========================================================================\r\n  SNAP : Stanford Network Analysis Platform\r\n\thttp://snap.stanford.edu\r\n========================================================================\r\n\r\nStanford Network Analysis Platform (SNAP) is a general purpose, high\r\nperformance system for analysis and manipulation of large networks.\r\nSNAP is written in C++ and it scales to massive graphs with hundreds\r\nof millions of nodes and billions of edges.\r\n\r\n/////////////////////////////////////////////////////////////////////////////\r\n\r\nDirectory structure:\r\n  http://snap.stanford.edu/snap/description.html\r\n\r\n  snap-core: \r\n        the core SNAP graph library\r\n  snap-adv: \r\n        advanced SNAP components, not in the core, but used by examples\r\n  snap-exp:\r\n        experimental SNAP components, still in development\r\n  examples:\r\n        small sample applications that demonstrate SNAP functionality\r\n  tutorials:\r\n        simple programs, demonstrating use of various classes\r\n  glib-core: \r\n        STL-like library that implements basic data structures, like vectors\r\n        (TVec), hash-tables (THash) and strings (TStr), provides\r\n        serialization and so on\r\n  test:\r\n        unit tests for various classes\r\n  doxygen:\r\n        SNAP reference manuals\r\n\r\nCode compiles under Windows (Microsoft Visual Studio, CygWin with gcc) and\r\nLinux and Mac (gcc). Use the SnapExamples*.sln or provided makefiles.\r\n\r\nSome of applications expect that GnuPlot and GraphViz are installed and\r\naccessible -- paths are in the system PATH variable or they reside in the\r\nworking directory.\r\n\r\n/////////////////////////////////////////////////////////////////////////////\r\n\r\nExample applications for advanced SNAP functionality are available\r\nin the examples directory and described at:\r\n  http://snap.stanford.edu/snap/description.html.\r\n\r\nTo compile from the command line, execute:\r\n  make all\t# compiles SNAP and all sample applications\r\n\r\nTo compile on Mac OS X, using Xcode:\r\n  1. From the Toolbar, select Scheme (e.g. 'bigclam').\r\n  2. Product -> Build.  (or Cmd + B).\r\n  3. Run executable via the command line; or\r\n     Choose the scheme's executable (Product -> Edit Scheme -> Run -> Info)\r\n     and run: Product -> Run (or Cmd + R). \r\n     Note: If using Gnuplot, add the PATH to the scheme's environment variables.\r\n     or create symlink to /usr/bin:\r\n     sudo ln -s <gnuplot_dir>/gnuplot /usr/bin/\r\n  For code completion, the \"docs\" target has been created which includes all\r\n  Snap-related files and example programs.\r\n\r\nDescription of examples:\r\n  agmfit :\r\n        Detects network communities from a given network by fitting\r\n\tAGM to the given network by maximum likelihood estimation.\r\n  agmgen :\r\n\tImplements the Affiliation Graph Model (AGM). AGM generates\r\n        a realistic looking graph from the community affiliation of the nodes.\r\n  bigclam :\r\n\tFormulates community detection problems into non-negative matrix\r\n\tfactorization and discovers community membership factors of nodes.\r\n  cascadegen :\r\n        Identifies cascades in a list of events.\r\n  cascades :\r\n  \tSimulates a SI (susceptible-infected) model on a network and computes\r\n\tstructural properties of cascades.\r\n  centrality :\r\n\tComputes node centrality measures for a graph: closeness, eigen,\r\n\tdegree, betweenness, page rank, hubs and authorities.\r\n  cesna :\r\n        Implements a large scale overlapping community detection method\r\n        for networks with node attributes based on Communities from\r\n        Edge Structure and Node Attributes (CESNA).\r\n  circles :\r\n\tImplements a method for identifying users social circles.\r\n  cliques :\r\n\tFinds overlapping dense groups of nodes in networks,\r\n\tbased on the Clique Percolation Method.\r\n  coda :\r\n        Implements a large scale overlapping community detection method \r\n        based on Communities through Directed Affiliations (CoDA), which\r\n        handles directed as well as undirected networks. The method is able\r\n        to find 2-mode communities where the member nodes form a bipartite\r\n        connectivity structure.\r\n  community :\r\n\tImplements network community detection algorithms: Girvan-Newman,\r\n\tClauset-Newman-Moore and Infomap.\r\n  concomp :\r\n\tComputes weakly, strongly and biconnected connected components,\r\n\tarticulation points and bridge edges of a graph.\r\n  flows :\r\n        Computes the maximum network flow in a network.\r\n  forestfire : \r\n\tGenerates graphs using the Forest Fire model.\r\n  graphgen : \r\n\tGenerates undirected graphs using one of the many SNAP graph generators.\r\n  graphhash : \r\n\tDemonstrates the use of TGHash graph hash table, useful for\r\n\tcounting frequencies of small subgraphs or information cascades.\r\n  infopath :\r\n        Implements stochastic algorithm for dynamic network inference from\r\n        cascade data, see http://snap.stanford.edu/infopath/.\r\n  kcores :\r\n  \tComputes the k-core decomposition of the network and plots\r\n\tthe number of nodes in a k-core of a graph as a function of k.\r\n  kronem : \r\n  \tEstimates Kronecker graph parameter matrix using EM algorithm.\r\n  kronfit : \r\n  \tEstimates Kronecker graph parameter matrix.\r\n  krongen : \r\n  \tGenerates Kronecker graphs.\r\n  localmotifcluster :\r\n\tImplements a local method for motif-based clustering using MAPPR.\r\n  lshtest :\r\n\tImplements locality sensitive hashing.\r\n  magfit :\r\n\tEstimates Multiplicative Attribute Graph (MAG) model parameter.\r\n  maggen : \r\n\tGenerates Multiplicative Attribute Graphs (MAG).\r\n  mkdatasets :\r\n\tDemonstrates how to load different kinds of networks in various\r\n\tnetwork formats and how to compute various statistics of the network.\r\n  motifcluster : \r\n  \tImplements a spectral method for motif-based clustering.\t\r\n  motifs : \r\n  \tCounts the number of occurrence of every possible subgraph on K nodes \r\n  \tin the network.\r\n  ncpplot : \r\n\tPlots the Network Community Profile (NCP).\r\n  netevol :\r\n  \tComputes properties of an evolving network, like evolution of \r\n  \tdiameter, densification power law, degree distribution, etc.\r\n  netinf :\r\n\tImplements netinf algorithm for network inference from\r\n\tcascade data, see http://snap.stanford.edu/netinf.\r\n  netstat :\r\n  \tComputes statistical properties of a static network, like degree\r\n\tdistribution, hop plot, clustering coefficient, distribution of sizes\r\n\tof connected components, spectral properties of graph adjacency\r\n\tmatrix, etc.\r\n  randwalk :\r\n        Computes Personalized PageRank between pairs of nodes.\r\n  rolx :\r\n        Implements the rolx algorithm for analysing the structural\r\n        roles in the graph.\r\n  testgraph :\r\n\tDemonstrates some of the basic SNAP functionality.\r\n  temporalmotifs :\r\n\tCounts temporal motifs in temporal networks.\r\n  zygote :\r\n        Demonstrates how to use SNAP with the Zygote library, which\r\n        significantly speeds up computations that need to process the\r\n        same large graph many times.\r\n\r\n/////////////////////////////////////////////////////////////////////////////\r\n\r\nSNAP documentation:\r\n  http://snap.stanford.edu/snap/doc.html\r\n\r\nThe library defines Graphs (nodes and edges) and Networks (graphs with data\r\nassociated with nodes and edges).\r\n\r\nGraph types:\r\n  TNGraph : \r\n  \tdirected graph (single directed edge between a pair of nodes)\r\n  TUNGraph : \r\n  \tundirected graph (single undirected edge between a pair of nodes)\r\n  TNEGraph : \r\n  \tdirected multi-graph (multiple directed edges can exist between\r\n        a pair of nodes)\r\n\r\nNetwork types:\r\n  TNodeNet<TNodeData> : \r\n  \tlike TNGraph, but with TNodeData object for each node\r\n  TNodeEDatNet<TNodeData,TEdgeData> :\r\n        like TNGraph, but with TNodeData object for each node and TEdgeData\r\n        object for each edge\r\n  TNodeEdgeNet<TNodeData, TEdgeData> : \r\n  \tlike TNEGraph but with TNodeData object for each node and TEdgeData\r\n\tobject for each edge\r\n  TNEANet :\r\n        like TNEGraph, but with attributes on nodes and edges. The attributes\r\n        are dynamic in that they can be defined at runtime\r\n  TBigNet<TNodeData> : \r\n  \tmemory efficient implementation of TNodeNet (avoids memory\r\n\tfragmentation)\r\n\r\nTo generate reference manuals, install doxygen (www.doxygen.org), and execute:\r\n  cd doxygen; make all    # generates user and developer reference manuals\r\n\r\n/////////////////////////////////////////////////////////////////////////////\r\n\r\nSNAP tutorials\r\n\r\nSample programs demonstrating the use of foundational SNAP classes and\r\nfunctionality are available in the tutorials directory.\r\n\r\nTo compile all the tutorials, execute the following command line:\r\n  cd tutorials; make all    # generates all the tutorials\r\n\r\n/////////////////////////////////////////////////////////////////////////////\r\n\r\nSNAP unit tests\r\n\r\nUnit tests are available in the test directory.\r\n\r\nTo run unit tests, install googletest (code.google.com/p/googletest) and\r\nexecute:\r\n  cd test; make run    # compiles and runs all the tests\r\n\r\n/////////////////////////////////////////////////////////////////////////////\r\n\r\nDescription of SNAP files:\r\n  http://snap.stanford.edu/snap/description.html\r\n\r\nsnap-core:\r\n  alg.h : Simple algorithms like counting node degrees, simple graph\r\n        manipulation (adding/deleting self edges, deleting isolated nodes)\r\n        and testing whether graph is a tree or a star.\r\n  anf.h : Approximate Neighborhood Function: linear time algorithm to\r\n        approximately calculate the diameter of massive graphs.\r\n  bfsdfs.h : Algorithms based on Breath First Search (BFS) and Depth First\r\n        Search (DFS): shortest paths, spanning trees, graph diameter, and\r\n        similar.\r\n  bignet.h : Memory efficient implementation of a network with data on\r\n        nodes. Use when working with very large networks.\r\n  casc.h : Computes cascades from a list of events.\r\n  centr.h : Node centrality measures: closeness, betweenness, PageRank, ...\r\n  cmty.h : Algorithms for network community detection: Modularity,\r\n        Girvan-Newman, Clauset-Newman-Moore.\r\n  cncom.h : Connected components: weakly, strongly and biconnected\r\n        components, articular nodes and bridge edges.\r\n  ff.h : Forest Fire model for generating networks that densify and have\r\n        shrinking diameters.\r\n  flow.h: Maximum flow algorithms.\r\n  gbase.h : Defines flags that are used to identify functionality of graphs.\r\n  ggen.h : Various graph generators: random graphs, copying model,\r\n        preferential attachment, RMAT, configuration model, Small world model.\r\n  ghash.h : Hash table with directed graphs (<tt>TNGraph</tt>) as keys. Uses\r\n        efficient adaptive approximate graph isomorphism testing to scale to\r\n        large graphs. Useful when one wants to count frequencies of various\r\n        small subgraphs or cascades.\r\n  gio.h : Graph input output. Methods for loading and saving various textual\r\n        and XML based graph formats: Pajek, ORA, DynNet, GraphML (GML), \r\n        Matlab.\r\n  graph.h : Implements graph types TUNGraph, TNGraph and TNEGraph.\r\n  gstat.h : Computes many structural properties of static and evolving networks.\r\n  gsvd.h : Eigen and singular value decomposition of graph adjacency matrix.\r\n  gviz.h : Interface to GraphViz for plotting small graphs.\r\n  kcore.h : K-core decomposition of networks.\r\n  network.h : Implements network types TNodeNet, TNodeEDatNet and TNodeEdgeNet.\r\n  randwalk.h : Computing random walk scores and personalized PageRank\r\n\tbetween pairs of nodes\r\n  Snap.h : Main include file of the library.\r\n  statplot.h : Plots of various structural network properties: clustering,\r\n        degrees, diameter, spectrum, connected components.\r\n  subgraph.h : Extracting subgraphs and converting between different\r\n        graph/network types.\r\n  timenet.h : Temporally evolving networks.\r\n  triad.h : Functions for counting triads (triples of connected nodes in the\r\n        network) and computing clustering coefficient.\r\n  util.h : Utilities to manipulate PDFs, CDFs and CCDFs. Quick and dirty\r\n        string manipulation, URL and domain manipulation routines.\r\n\r\nsnap-adv:\r\n  agm*.h : Implements the Affiliation Graph Model (AGM).\r\n  cliques.h : Maximal clique detection and Clique Percolation method.\r\n  graphcounter.h : Performs fast graph isomorphism testing to count the\r\n        frequency of topologically distinct sub-graphs.\r\n  kronecker.h : Kronecker Graph generator and KronFit algorithm for\r\n        estimating parameters of Kronecker graphs.\r\n  mag.h : Implements the Multiplicative Attribute Graph (MAG).\r\n  motifcluster.h : Implements motif-based clustering algorithms.\r\n  ncp.h : Network community profile plot. Implements local spectral graph\r\n        partitioning method to efficiently find communities in networks.\r\n  rolx.h : Node role detection.\r\n  subgraphenum.h : Enumerates all connected induced sub-graphs of particular\r\n        size.\r\n\r\nsnap-exp:\r\n  arxiv.h : Functions for parsing Arxiv data and standardizing author names.\r\n  dblp.h : Parser for XML dump of DBLP data.\r\n  imdbnet.h : Actors-to-movies bipartite network of IMDB.\r\n  mxdag.h  Finds the maximum directed-acyclic subgraph of a given\r\n        directed graph.\r\n  signnet.h : Networks with signed (+1, -1) edges that can denote\r\n        trust/distrust between the nodes of the network.\r\n  sir.h : SIR epidemic model and SIR parameter estimation.\r\n  spinn3r.h : Past parser for loading blog post data from Spinn3r.\r\n  trawling.h : Algorithm of extracting bipartite cliques from the network.\r\n  wgtnet.h : Weighted networks.\r\n  wikinet.h : Networks based on Wikipedia.\r\n\r\n\r\n\r\n"
        },
        {
          "name": "Release.txt",
          "type": "blob",
          "size": 26.4599609375,
          "content": "Release Notes for SNAP\n\nStanford Network Analysis Platform (SNAP) is a general purpose, high\nperformance system for graph and network manipulation and analysis.\n\nThis file contains a high-level description of changes in SNAP releases.\n\nRelease 6.0, Dec 4, 2020\n\nThis is a major release, significant new functionality includes: a large family\nof egonet functions, dense and sparse floating-point vector attributes, graph\nunion functions.\n\nHere is a detailed list:\n\n- implemented a large family of egonet functions GetEgonetHop(),\n  GetInEgonetHop(), GetOutEgonetHop(), GetInEgonetSub(), GetEgonetAttr(),\n  GetInEgonetAttr(), GetOutEgonetAttr(), GetInEgonetSubAttr()\n- implemented dense and sparse floating-point vector attributes for TNEANet\n- implemented graph union functions GetGraphUnion(), GetGraphUnionAttr()\n- implemented a new method TSnapQueue::Sample()\n- implemented AddNodeWithAttributes() and AddEdgeWithAttributes()\n- improved CommunityGirvanNewman(), so that the input graph is not modified\n- improved GetClustCf(), so that all output parameters are initialized\n- added dummy AddEdge(), IsEdge() methods with edge IDs to TUNGraph and\n  TNGraph classes for compatibility with TNEANet\n- changed the parameter names for GetClustCf(), which is needed for snap.py\n- updated the definition of gettimeofday() for compilation of snap.py with\n  python 3.5 and 3.6 on Windows\n- completed the implementation of aaMean policy in AggregateVector()\n- defined '/' operator for TStr, which is required in AggregateVector()\n- fixed the problem of GetStrVal() and AddRow() not being available in snap.py\n- fixed the handling of the random generator in GenDegSeq() and GenPrefAttach()\n- fixed a bug in edge attribute iterator in IntAttrValueEI()\n- fixed bugs in AddIntVAttrDatE(), AppendIntVAttrDatE()\n- fixed a few minor issues in the documentation\n- fixed compilation problems with TTable::GetStrVal()\n- improved parameters for OpenMP compilation on Cygwin and macOS\n- improved doxygen parameters and updated doxyblock.py for python3\n- updated Makefiles with $(HOME) references\n- updated Makefiles with additional instructions for building on Anaconda\n- updated graphviz baseline files for graphviz version 2.38.0\n\nRelease 5.0, Aug 29, 2019\n\nThis is a maintenance release and brings several upgrades.\n\nHere is a detailed list:\n\n- upgraded Visual Studio files to version 2019\n- added support for g++ compiler versions 6.0+\n- modified the code for python3 support\n- added a license text\n- implemented rolx:FPrintNodeMappings() to determine node IDs for features\n- turned on the printing of feature matrix in rolx\n- removed the Visual Studio 2008 solution file\n\nRelease 4.1, Jul 25, 2018\n\nThis is a minor release and brings several bug fixes and improvements.\n\nHere is a detailed list:\n\n- fixed the parsing of floating point numbers in TSsParserMP\n- fixed bugs in temporal motif counting, ignore self loops\n- fixed a bug in GetWeightedShortestPath()\n- fixed a bug in GenRndPowerLaw(), GenDegSeq() requires a sorted vector\n- fixed a crash in GetESubGraph() for multigraphs\n- improved LoadPajek(), so that it can read edges without weights\n- improved the parsing of integers in TSsParserMP\n- improved the quality of word2vec embeddings\n- added a flag for random walk output in node2vec\n- defined a new type TFltVFltV for TVec<TFltV>\n- fixed compilation errors and a few compilation warnings on macOS\n- implemented GetSubGraphRenumber(), which is required by Snap.py\n- implemented GetNodeTriadsAll(), which is needed by Snap.py\n- implemented GetBfsEffDiamAll(), which is needed by Snap.py\n- implemented GetClustCfAll(), which is needed by Snap.py\n- implemented GetTriadsAll(), which is needed by Snap.py\n- added 'const' to node2vec code to make it work with Snap.py\n\nRelease 4.0, Jul 27, 2017\n\nThis is a major release and brings significant new functionality: local\nhigher-order clustering, counting of temporal motifs, node embedding with\nnode2vec, locality sensitive hashing, K nearest neighbor graph construction,\nfast object loading using memory mapped files, and sparse attributes.\n\nHere is a detailed list:\n\n- implemented local higher-order clustering, see examples/localmotifcluster\n- implemented counting of temporal motifs, see examples/temporalmotifs\n- implemented node embedding with node2vec, see examples/node2vec\n- implemented locality sensitive hashing, see examples/lshtest\n- implemented K nearest neighbor graph construction, see\n  examples/knnjaccardsim\n- implemented methods for computing biased random walks, required for node2vec\n- implemented fast loading of objects using a memory mapped files via shared\n  memory for the following classes: TVec, TStrPool, TBigStrPool, THashKeyDat,\n  THash, TStrHash, TUNGraph, TNGraph, TMMNet, TNEANet, TNodeNet, TNodeEDatNet,\n  TNodeEdgeNet, TUndirNet, TDirNet, TTable, TTableContext\n- implemented a shared-memory class TShMIn for input stream objects\n- implemented sparse attributes (vector rather than hash based) in TMMNet and\n  TNEANet\n- implemented a backward compatible load function TNEANet::Load_V2()\n- implemented a method to convert a dense network to sparse\n  TNEANet::ConvertToSparse()\n- implemented node2vec for TNEANet, TNGraph, and TNodeEDatNet\n- defined a number of new vector and hash classes\n- implemented base TNum class for integer based classes\n- implemented a class for 64-bit integers TInt64\n- expanded TVVVec to work with 64-bit integers\n- expanded TVVec to work with 64-bit integers\n- changed API for centrality calculations so that IsDir is the last parameter\n- improved the code for betweenness centrality for directed graphs\n- implemented AddNodeUnchecked() for TNodeNet, TNodeEDatNet, TNodeEdgeNet,\n  TNEANet, TUndirNet, TDirNet\n- implemented SortNodeAdjV() for TUndirNet, TDirNet\n- implemented TAttr::Load() to work with sparse attributes\n- fixed a division by 0 in TTable::FillBucketsByWindow()\n- fixed a bug in GenRewire() for directed graphs\n- fixed a problem in GetGraphAnf(), dist=1 was redundant\n- fixed a negative index error in casc.cpp\n- fixed incorrect GCC_ATOMIC to better support ToNetwork() on Windows\n- fixed a possible infinite loop in GetRndEdgeNonAdjNode()\n- fixed node2vec crashing on directed graphs\n- fixed and optimized TMMNet::ToNetworkMP\n- added assertions for preventing writing to read only objects\n- added a test for GenRwire()\n- added tests for fast loading from shared memory\n- added tests for jaccard similarity\n- improved printing of 64-bit values\n- renamed AddAtm() to AddMP()\n- replaced GetMn() with explicit code to enable compilation in Snap.py\n- removed profiling code from GetTriangleCnt()\n- removed a redundant openmp flag from Makefile\n- removed dependency of table.h on centr.h\n- moved MapPageRank() and MapHits() from table.h to centr.h\n- moved GetMapPageRank() and GetMapHitsIterator() from table.h to centr.cpp\n- made edits for the code to compile with gcc on Mac OS X 10.9 and clang on\n  macOS 10.12\n- updated code for compilation of Snap.py on Windows\n- commented out obsolete GetMergeSortedV()\n- commented out CountTriangles(), a previous implementation of\n  GetTriangleCnt()\n- commented out dummy definitions of TNGraphMP, TNEANetMP\n- fixed a few documentation typos in alg.h\n- fixed a minor typo in agm comments\n- edited ReadMe.txt to use only ASCII characters\n\nRelease 3.0, Jul 18, 2016\n\nThis is a mega large release. It brings major new functionality: relational\ntables, multimodal graphs, multi-threaded operations, personalized pagerank,\nmotif-based network clustering, and hundreds of other additional features and\ncapabilities.\n\n- implemented a new class TTable for relational tables\n  - implemented new supporting classes for TTable: TPredicate, TAtomicPredicate,\n    TPredicateNode, TTableContext, TPrimitive, TTableRow, GroupStmt,\n    TRowIterator, TRowIteratorWithRemove, TTableIterator\n  - implemented a wide range of standard relational operations on TTable\n  - implemented fast parallel select and join operations on TTable\n  - implemented IsNextK, SimJoin and SimJoinPerGroup methods\n  - implemented MapPageRank function to compute pagerank of a graph sequence\n- implemented a new class TMMNet for multimodal networks\n  - implemented new subclasses of TMMNet: TModeNet for modes and TCrossNet\n    for cross nets\n- added new methods and examples: randwalk, motifcluster, cascadegen\n  - randwalk computes random walk scores and personalized pagerank\n    between pairs of nodes\n  - motifcluster implements a spectral method for motif-based network clustering\n  - cascadegen computes cascades from a list of events\n- created a new contrib directory for contributions to SNAP\n- added a new contribution from University of Catania: RI algorithm for\n  one-to-one exact subgraph isomorphism problem maintaining topological\n  constraints\n- implemented new methods for motif-based network clustering (motifcluster)\n- implemented new methods for personalized pagerank (randwalk)\n- implemented fast pagerank and hits, sequential and parallel\n- implemented new methods for weighted pagerank, sequential and parallel\n- implemented a new method for shortest paths\n- implemented new methods for weighted farness centrality,\n  closeness centrality, and betweennesscentrality\n- extended routines for calculating betweenness and closeness centrality\n  to both directed and undirected graphs, and TNEANet\n- implemented fast methods for triangle counting, sequential and parallel, and\n  supporting methods\n- implemented new methods that build cascades from a list of events (cascadegen)\n- implemented a fast top-down BFS algorithm, TBreathFS::DoBfsHybrid()\n- turned on OpenMP functionality on supported platforms: Linux and Mac with GCC\n  - introduced GCC_ATOMIC flag for __sync_... GCC functions\n  - unified all OpenMP flags to USE_OPENMP\n  - implemented many parallel operations\n- implemented a new class TUndirNet for undirected networks\n- implemented a new class TDirNet for directed networks\n- implemented a new class TNGraphMP for directed graphs, supporting\n  multi-threaded operations\n- implemented a new class TNEANetMP for directed multigraphs with\n  attributes, supporting multi-threaded operations\n- implemented new class THashMP, hash table with multiprocessing support\n- implemented a new experimental class in glib-adv, THashGenericMP,\n  a hash table which supports multithreading and non-integer value types\n- implemented a new class TSsParserMP, a multithreaded parser for parallel\n  text load\n- implemented a new class TAttr, a hash-based implementation of sparse\n  attributes\n- implemented a new class TMaxPriorityQueue, max priority queue\n- implemented a new class TStopwatch to benchmark operations\n- implemented new methods for converting tables to graphs and networks,\n  sequential and parallel\n- implemented new methods for loading tables into multimodal networks\n- implemented new attribute type for TNEANet: integer vectors\n- implemented sparse attributes for TNEANet nodes and edges\n- implemented new methods in TNEANet to return integer attribute names, values\n- implemented a new method in TNEANet for summing the weights of all the\n  outgoing edges of a node\n- implemented new functions for converting numpy arrays to SNAP and vice versa\n- added a method to sort the adjacency list of a node in a graph\n- added methods to add nodes and edges without performing consistency checks\n- implemented gettimeofday() on Windows\n- implemented new methods to access individual components in TTriple\n- implemented new methods to access individual components in TQuad\n- implemented new TVec methods Reduce(), CopyUniqueFrom(), GetRndVal(),\n  AddMP(), MoveLastMP(), SearchBinLeft()\n- implemented new THash method GetDatWithDefault()\n- implemented new TStrPool method GetMemUsed()\n- implemented new TCh method IsHashCh()\n- implemented new TBigStrPool method GetMemUsed()\n- implemented new TStrHash methods GetMemUsed(), GetStr()\n- implemented new TStrHashF_DJB methods GetPrimHashCd(), GetSecHashCd()\n- implemented new TGnuPlot methods PlotValRank(), PlotValOverTm(),\n  PlotCntOverTm()\n- implemented new TSsParser methods GetUInt64(), IsUInt64() to support int64\n- implemented a new TSecTm method GetYmdTmStr2()\n- defined new TTriple type TIntStrStrTr\n- defined new TVec type TIntStrStrTrV\n- defined new THash types TIntStrPrVH, TIntIntStrPrH, TIntPrH,\n  TIntIntPrPrIntH, TIntIntPrPrFltH, TIntIntPrPr\n- added new tests TTable, TUndirNet, TDirNet, TMMNet, TModeNet, TCrossNet,\n  TAttr, multimodal, priority-queue, randwalk\n- added new tutorials for TAttr, TDirNet, TUndirNet, multimodal, TSsParser\n- implemented Visual Studio 2010 project files for all the examples\n- expanded the test for TTNEANet\n- expanded the tutorials for TNGraph, TUNGraph, demo-gio\n- improved the code for recognition of input file type in bigclam, cesna, coda\n- implemented non-consecutive node numbering for bigclam input graphs\n- changed the flows sample input from binary to text\n- updated documentation for cesna\n- extended testSnap.cpp with a betweenness calculation\n- renamed min and max macros in glib-core/bd.h to MIN and MAX to avoid conflicts\n- changed class TMIn to use uint64 size rather than int\n- expanded TMin with methods for reading of memory mapped files on Linux\n- added time support to gnuplot\n- updated TVec::Resize() code to support 2B elements for TInt\n- changed TVecPool::AddV() to use TSize rather than TSizeTy and uint \n  for length type\n- changed the local path for gnuplot on Mac\n- added range checking to TSsParser GetInt(), GetFloat(), GetUInt64()\n- made minor updates for gnuplot output format\n- made minor updates in json.h\n- improved handling of TZipIn::SevenZipPath\n- updated TZipIn TZipOut to properly handle paths\n- commented out TDir::Exists() on Windows\n- fixed the return type of IsDirected\n- fixed a bug in TNodeEdgeNet::TNodeI::GetInNDat\n- fixed TNEANet::DelEdge(), which crashed if any attributes were detected\n- fixed a bug in GetEgonet, so in and out-edges to center node are included\n- fixed the initialization of TBreathFS\n- fixed a minor warning in Crash()\n- fixed reading of empty lines in TSsParser::Next()\n- fixed redundant space at the end of TSsParser::GetLnStr()\n- fixed syntax errors in circles.h\n- added a new experimental directory snap-exp/bfs-dev for BFS code\n- added a new experimental directory snap-exp/cascades-dev for code that\n  creates cascades\n- added a new experimental directory snap-exp/cascades-benchmark for code\n  that benchmarks cascade operations\n- added a new experimental directory snap-exp/multimodal-dev for code\n  for multimodal networks\n- implemented an experimental TUNGraphMP for undirected graphs, supporting\n  multi-threaded operations\n- implemented an experimental class TMNet for multimodal networks with\n  three different subvariants TSVNode, TMVNode, TCVNode\n- added a new experimental directory snap-exp/test-dev for various test programs\n\nRelease 2.4, May 11, 2015\n\n- implemented TLSHash() class for locality sensitive hashing\n- implemented SaveEdgeListNet(), LoadEdgeListNet()\n- expanded Load/SaveEdgeListNet() with support for node attributes\n- implemented IsAttrDeletedN(), IsIntAttrDeletedN(), IsFltAttrDeletedN()\n- implemented IsStrAttrDeletedN(), IsAttrDeletedE(), IsIntAttrDeletedE()\n- implemented IsFltAttrDeletedE(), IsStrAttrDeletedE()\n- implemented GetIntAttrIndDatE(), GetFtlAttrIndDatE(), GetStrAttrIndDatE()\n- implemented GetIntAttrIndDatN(), GetStrAttrIndDatN(), GetFltAttrIndDatN()\n- implemented GetAttrIndN(), GetAttrIndE()\n- implemented IsEmpty() and IsEnd methods() for THashSetKeyI\n- implemented Next() method to THashSetKeyI\n- added Load() method to TCh\n- added functions to compare triples by 2nd and 3rd value\n- added functions for checking whether a directory exists\n- added *= operator to TUInt64 to support the type in vector indexes\n- added contrib directory and its readme\n- made sentinel line optional for LoadEdgeListNet()\n- fixed NodeId to NodeI for iterators\n- fixed an incorrect method reference in AttrValueEI()\n- fixed a problem in subgraph.cpp:GetEgonet() with bidirectional connections\n- updated GLib code with upstream code\n- added a comment on PNG support for GNUPlot on Mac\n- added comments for methods in gio.cpp\n- added an example on how to update values in a hash table\n- put back tutorials Xcode project files\n\nRelease 2.3, Jun 16, 2014\n\n- implemented RolX algorithm for detecting node roles\n- implemented flow agorithms\n- added an example for the RolX algorithm\n- added an example for the flow algorithms\n- implemented a new function GetEgonet()\n- added tests and demo code for functions in alg.h\n- changed gnuplot version test, so that it runs only on demand, not at start\n- expanded cncom tests and the demo\n- expanded the code to work on non-OpenMP Mac OS X\n- renamed GetIntAttrDatN to GetIntAttrIndDatN so that it works in Snap.py\n- renamed GetIntAttrDatE to GetIntAttrIndDatE so that it works in Snap.py\n- updated the AGM related code to work with SWIG\n- added an error description when file open fails\n- fix a bug in loading attributes when the node ids are non-integers\n- fixed kronfit to use the right output file name given by arg \"-o:\"\n- fixed TUNGraph::AddNode() to add reciprocal edges when given vector\n- fixed a bug with GetMxSccSz\n- fixed GenCircle and GenGrid to add reciprocal edges properly\n- improved the fix for sorting the SCC sizes\n- improved the handling of getrusage()\n\nRelease 2.2, Mar 12, 2014\n\n- added CoDA, 2-mode community detection method, in examples/coda\n- added CESNA, community detection method for networks with node attributes,\n  in examples/cesna\n- added Infomap community detection algorithm in examples/community\n- added a second demo of connected components in tutorials/demo-cncom1.cpp\n- added a demo of text file parsing in tutorials/demo-TSsParser.cpp\n- added a function to plot multiple TMom hash tables on a single plot\n- extended TMom to compute the mode value of the data\n- added a PlotValV() function that plots error bars/variances\n- added SetVal() to TVec\n- added support for generating PNG on Mac OS X\n- improved Resize() to allocate maximum number of elements possible \n- improved error handling of TZipIn for non-zip files\n- appended 'X' to the names of copy out scalar parameters in snap-core\n- added GetVal(), GetPrimHashCd() and GetSecHashCd() to TCnCom\n- replaced aborts with exceptions for Snap.py\n- updated Makefiles and code to compile on OS X Maverics\n- added g++ flags in Makefile\n- added compilation switches Snap.py, Snapworld, and backtraces in Makefile\n- added checks in accessing attributes in TNEANet\n- changed FailR to EFailR in TZipIn\n- fixed bug in TMom standard error computation\n- fixed an incorrect assertion in TBreathFS<PGraph>::GetRndPath()\n- fixed infinite loop in TNEANet::DelEdge()\n- fixed a problem in TNEANet::DelEdge()\n- fixed a problem in TNEANet::DelNode()\n- fixed TNEANet::Add{Int,Str,Flt}AttrDat[NE]() to use KeyId instead of NId\n- fixed a problem with a missing variable initialization in mag.cpp\n- fixed #26, change in endianness detection due to gcc compiler bug\n- fixed a bug in CntUniqBiDirEdges()\n- fixed small bugs in Cnt... functions in alg.h\n- fixed TMom plots\n- fixed incorrect index in glib-core/tm.h:GetMonthNm()\n- fixed incorrect index in TTm::GetCurLocTm().GetMonth()\n- made minor code changes to reduce compiler warnings\n\nRelease 2.1, Sep 12, 2013\n\n- implemented a new network class TNEANet and PNEANet for graphs with\n  attributes\n- added new GetVal1() and GetVal2() methods to access components of TPair\n- renamed Get*Values() to Get*Val()\n- added a new function to create a rewired version (using configuation model)\n  of a given graph\n- added sorting to TGStatVec::GetValV\n- extended function TSnap::PrintInfo() in gbase.h\n- added statistics for undirected graphs.\n- added Strong and Bi-connected component statistics\n- added functions to plot k-Core decomposition plots\n- updated graph statistics\n- implemented TTable::Defrag\n- changed some casts in unicode.h to fix compilation errors on gcc 4.8.1\n- defined NDEBUG compilation flag to disable assertions in production\n- improved saving of PNG and EPS files to take into account the full path\n- added static variables in TGnuPlot: GnuPlotPath and GnuPlotFNm for\n  gnuplot executable\n- added a final renormalization step to GetHits() needed for disconnected\n  graphs\n- added GraphVizLayout sfdp\n- added benchmark for THash and TVec\n- improved PlotHops\n- fixed a bug in TSsParser::GetLineStr()\n- fixed a small bug in GetKCoreEdges()\n- updated cncom.h:IsWeaklyConn() so that it does not crash for empty graphs\n- fixed #38 community example does not work on email-Enron.txt\n- fixed zygote example on Mac OS X\n- made changes needed for snap.py on Windows\n- changed gbase.h so that it compiles with swig\n- moved WriteN() to util.cpp to prevent compile warnings on Mac OS X\n- made Snapworld functions defined only on Unix-like systems\n- make bigclam.cpp faster\n- added fixed vector size to the hash, vec benchmarks\n- made minor code changes to reduce compiler warnings\n- fixed demo-topology-benchmark.cpp compilation on Cygwin\n- commented out class IsDerivedFrom\n\nRelease 2.0, May 13, 2013\n\n- significantly changed several classes and methods, not backward compatible.\n  This version is not able to read binary files or class serializations,\n  produced by previous SNAP versions.\n- added support for 64-bit vector length in TVec\n- added support for 64-bit vector length in TVecPool\n- implemented a new hash function for TVec with 10x improvement over the\n  previous one. This change is not backward compatible for hash tables. Old\n  hash functions are available in TVecHashF_OldGLib.\n- implemented new 10x faster hash functions for TPair, TTriple, TQuad and TTuple\n- added 64-bit random number generators GetUniDevInt64() and GetUniDevUInt64()\n- implemented new TVec method UnionLen() and GetMemSize()\n- moved vector access functions in TLocClust from private to public\n- added new examples agmfit, bigclam, circles, zygote, XcodeTest\n- added new tutorials for bfsdfs, cncom, gviz, triad\n- added new unit tests for alg, bfsdfs, cncom, gvi, THashSet, triad\n- added Mac OS X Xcode support for examples\n- added Mac OS X support for doxygen\n- fixed #36 normalized eigenvector centrality values to use L2 rather than L1\n- fixed #17 integer overflow bug in TSnap::GenRndGnm()\n- fixed a bug in THashSet::Defrag()\n- fixed a bug in IsTree()\n- fixed a bug in TVec::NextPerm()\n- fixed GetNodeTriads(), it was not checking for an empty group\n- changed GetTriads and GetClustCf to return triads as int64 rather than int\n  to prevent integer overflow for large graphs\n- implemented much faster TSsParser\n- added OpenMP compilation flags\n- implemented stackdump for g++\n- merged updates from the most recent version of GLib\n- undefined __STDC_LIMIT_MACROS in base.h to prevent double definition warnings\n- removed include <stdio.h> in examples/*/stdefx.h to correctly define SIZE_MAX\n- removed a redundant GetNodeTriads() variant\n- changed type of PGraph::TNodeI to PGraph::TObj::TNodeI in triad.h\n- fixed warnings about implicit conversions from int64 to int in dt.h, tm.h,\n  os.h.\n\nRelease 1.11, Dec 21, 2012\n\n- added new examples netinf, infopath\n- added new advanced modules cascnetinf, cascdynetinf\n- added new distribution functions to glib-core/dt.h::TRnd: GetRayleigh(),\n  GetWeibull()\n- added demo programs for graph input/output (gio.h), graph generators\n  (ggen.h), THash\n- added tests for graph input/output (gio.h), graph generators (ggen.h), THash\n- unified the names of intermediate files for demos and tests to demo*.dat\n  and test*.dat\n- added cases to test edge iterator with very few nodes\n- expanded TUNGraph test to include graphs with loops and the number of\n  edges in such graphs\n- added ManipulateEdges test for TUNGraph\n- added test in TUNGraph for checking edge iterator following deletion\n- added OSX Xcode project\n- updated snap-test Xcode project with gtest code completion/syntax.\n- improved tutorial and test Makefiles to work on Mac OS X\n- improved Snap.o make rule, added dependencies for *.h, *.cpp in glib-core\n  and snap-core\n- improved demo Makefile so that individual targets do not need to be\n  specified\n- added path to snap-exp to examples makefiles\n- changed function parameters in TStrPool to const reference\n- added assertion for DegSeq vector to be sorted\n- added an assertion for edges in random graphs to prevent infinite loops\n- fixed #27 - No node checking when load Epinions in signnet.cpp\n- fixed #28 - no TGraphViz class in signnet.cpp\n- fixed #29 - no check for inserting node in bfsdfs.h\n- fixed #17 \"example/cliques\" does not compile with gcc 4.7\n- fixed #21, undetected 32-bit overflow in TGraphAnf<PGraph>::InitAnfBits(),\n  the calculation is now done in 64-bits and an exception is thrown if the\n  final result is more than 32-bit\n- fixed bug in LoadPajek for graph files with colors\n- changed EFailR() to FailR() when out of memory\n- included bd.h in all files that use Class... macros, so that doxygen\n  correctly documents those classes\n- added #7, add Snap version number to reference manuals\n- implemented #8, improve the front page for reference manuals\n- added .gitignore file for Xcode project\n\nRelease 1.10, Oct 15, 2012\n\n- fixed TUNGraph to return correct number of edges, not backward compatible.\n  This version is not able to read binary TUNGraphs, saved by previous SNAP\n  versions.\n- added a new example graphhash\n- fixed #13, GHash incorrectly handles non-existent keys\n- fixed #12, Graphviz keeps outputting a PostScript file on non-Windows\n- fixed #15, bug in netevol.cpp\n- fixed #14, TSnap::GenCircle creates self-loops\n- fixed a bug in TSnap::GetBfsTree which failed for revised AddNode()\n- included \"<new>\" in unicode.h to support Xcode with the Apple compiler\n- fixed bug in TUNGraph:BegEI(), some edges could be missed by the iterator\n\nRelease 1.9.2, Oct 2, 2012\n\n- removed a default parameter in triad.h so that the code compiles in\n  Visual Studio 2010\n- in source code converted all 8bit characters to 7bit characters \\xnn\n\nRelease 1.9.1, Sep 28, 2012\n\n- fixed name mismatch between GetUniq... and CntUniq... to CntUniq...\n- reversed the changes in centr.h:GetNodeEcc() name and definition to pre-1.9\n\nRelease 1.9, Sep 26, 2012\n\n- names of functions in gviz.h have been changed, not backward compatible\n- neighbor abbreviations have been changed thoughout the code,\n    nbh -> nbr, Nbh -> Nbr, not backward compatible\n- a new class TBPGraph has been added to support bipartite graphs\n- new examples have been added agmgen, circles, kronem, magfit, maggen\n- code automatically detects gnuplot version to address \"set ticks\"\n- makefiles automatically detect OS version\n- snap directory has been split to snap-core, snap-adv, snap-exp\n- glib directory has been split to glib-core and glib-adv\n- reference manuals have been created for users and developers\n- tutorials have been created for many classes\n- tests have been created for many classes\n- programming guide has been created for developers\n- code has been changed to remove compilation warnings\n- merged with the latest glib version\n- numerous code improvements and bug fixes\n\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "doxygen",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "glib-adv",
          "type": "tree",
          "content": null
        },
        {
          "name": "glib-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "snap-adv",
          "type": "tree",
          "content": null
        },
        {
          "name": "snap-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "snap-exp",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tutorials",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}