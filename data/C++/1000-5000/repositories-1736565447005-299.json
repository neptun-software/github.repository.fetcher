{
  "metadata": {
    "timestamp": 1736565447005,
    "page": 299,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tdlib/telegram-bot-api",
      "stars": 3298,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 5.546875,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  Google\nAccessModifierOffset: -1\nAlignAfterOpenBracket: Align\nAlignArrayOfStructures: None\nAlignConsecutiveAssignments:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  PadOperators:    true\nAlignConsecutiveBitFields:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  PadOperators:    false\nAlignConsecutiveDeclarations:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  PadOperators:    false\nAlignConsecutiveMacros:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  PadOperators:    false\nAlignEscapedNewlines: Left\nAlignOperands:   Align\nAlignTrailingComments:\n  Kind:            Always\n  OverEmptyLines:  0\nAllowAllArgumentsOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortEnumsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: None # All\nAllowShortIfStatementsOnASingleLine: Never # WithoutElse\nAllowShortLambdasOnASingleLine: Inline # All\nAllowShortLoopsOnASingleLine: false # true\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: Yes\n# AttributeMacros:\n#   - __capability\nBinPackArguments: true\nBinPackParameters: true\nBitFieldColonSpacing: Both\nBraceWrapping:\n  AfterCaseLabel:  false\n  AfterClass:      false\n  AfterControlStatement: Never\n  AfterEnum:       false\n  AfterExternBlock: false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  BeforeLambdaBody: false\n  BeforeWhile:     false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakAfterAttributes: Never\n# BreakAfterJavaFieldAnnotations: false\nBreakArrays:     true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeConceptDeclarations: Always\nBreakBeforeInlineASMColon: OnlyMultiline\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializers: BeforeComma # BeforeColon\nBreakInheritanceList: BeforeComma # BeforeColon\nBreakStringLiterals: true\nColumnLimit:     120 # 80\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: true\nDisableFormat:   false\nEmptyLineAfterAccessModifier: Never\nEmptyLineBeforeAccessModifier: LogicalBlock\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - Q_FOREACH_THIS_LIST_MUST_BE_NON_EMPTY\nIncludeBlocks:   Preserve\nIncludeCategories:\n  - Regex:           '.*'\n    Priority:        0\nIndentAccessModifiers: false\nIndentCaseBlocks: false\nIndentCaseLabels: true\nIndentExternBlock: AfterExternBlock\nIndentGotoLabels: true\nIndentPPDirectives: None\nIndentRequiresClause: true\nIndentWidth:     2\nIndentWrappedFunctionNames: false\nInsertBraces:    false\nInsertNewlineAtEOF: false\n# InsertTrailingCommas: None\nIntegerLiteralSeparator:\n  Binary:          0\n  Decimal:         0\n  Hex:             0\n# JavaScriptQuotes: Leave\n# JavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nLambdaBodyIndentation: Signature\nLineEnding:      DeriveLF\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\n# ObjCBinPackProtocolList: Never\n# ObjCBlockIndentWidth: 2\n# ObjCBreakBeforeNestedBlockParam: true\n# ObjCSpaceAfterProperty: false\n# ObjCSpaceBeforeProtocolList: true\nPackConstructorInitializers: NextLine\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakOpenParenthesis: 0\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyIndentedWhitespace: 0\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Right # Left\nPPIndentWidth:   -1\nQualifierAlignment: Leave\nReferenceAlignment: Pointer\nReflowComments:  false # true\nRemoveBracesLLVM: false\nRemoveSemicolon: false\nRequiresClausePosition: OwnLine\nRequiresExpressionIndentation: OuterScope\nSeparateDefinitionBlocks: Leave\nShortNamespaceLines: 0 # 1\nSortIncludes: CaseInsensitive # CaseSensitive\n# SortJavaStaticImport: Before\nSortUsingDeclarations: Lexicographic # LexicographicNumeric\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceAroundPointerQualifiers: Default\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCaseColon: false\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeParensOptions:\n  AfterControlStatements: true\n  AfterForeachMacros: true\n  AfterFunctionDefinitionName: false\n  AfterFunctionDeclarationName: false\n  AfterIfMacros:   true\n  AfterOverloadedOperator: false\n  AfterRequiresInClause: false\n  AfterRequiresInExpression: false\n  BeforeNonEmptyParentheses: false\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceBeforeSquareBrackets: false\nSpaceInEmptyBlock: false\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles:  Never\nSpacesInConditionalStatement: false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInLineCommentPrefix:\n  Minimum:         1\n  Maximum:         1 # -1\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Auto\nTabWidth:        100 # 8\nUseTab:          Never\n...\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.396484375,
          "content": "* text=auto\n\n*.cpp text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.h text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.md text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.txt text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n*.html text whitespace=blank-at-eol,space-before-tab,blank-at-eof,tab-in-indent\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.044921875,
          "content": "**/*build*/\n**/.*.swp\n**/.DS_Store\nbin/\nvcpkg/"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0654296875,
          "content": "[submodule \"td\"]\n\tpath = td\n\turl = https://github.com/tdlib/td.git\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.419921875,
          "content": "cmake_minimum_required(VERSION 3.0.2 FATAL_ERROR)\n\nif (POLICY CMP0065)\n  # do not export symbols from executables\n  # affects compiler checks in project(), so must be set before it\n  cmake_policy(SET CMP0065 NEW)\nendif()\n\nproject(TelegramBotApi VERSION 8.2 LANGUAGES CXX)\n\nif (POLICY CMP0069)\n  option(TELEGRAM_BOT_API_ENABLE_LTO \"Use \\\"ON\\\" to enable Link Time Optimization.\")\n  set(TD_ENABLE_LTO \"${TELEGRAM_BOT_API_ENABLE_LTO}\" CACHE STRING \"Enable LTO\" FORCE)\nendif()\n\nadd_subdirectory(td EXCLUDE_FROM_ALL)\n\nif (NOT DEFINED CMAKE_MODULE_PATH)\n  set(CMAKE_MODULE_PATH \"\")\nendif()\nset(CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/td/CMake\" \"${CMAKE_MODULE_PATH}\")\n\nif (NOT DEFINED CMAKE_INSTALL_BINDIR)\n  set(CMAKE_INSTALL_BINDIR \"bin\")\nendif()\n\nif (POLICY CMP0054)\n  # do not expand quoted arguments\n  cmake_policy(SET CMP0054 NEW)\nendif()\nif (POLICY CMP0060)\n  # link libraries by full path\n  cmake_policy(SET CMP0060 NEW)\nendif()\nif (POLICY CMP0074)\n  # use environment variables to find libraries\n  cmake_policy(SET CMP0074 NEW)\nendif()\n\ninclude(PreventInSourceBuild)\nprevent_in_source_build()\n\nif (POLICY CMP0069 AND TELEGRAM_BOT_API_ENABLE_LTO)\n  cmake_policy(SET CMP0069 NEW)\n  include(CheckIPOSupported)\n  check_ipo_supported(RESULT IPO_SUPPORTED LANGUAGES CXX)\n  if (IPO_SUPPORTED)\n    string(REPLACE \";\" \" \" CXX_FLAGS_IPO \"${CMAKE_CXX_COMPILE_OPTIONS_IPO}\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${CXX_FLAGS_IPO}\")\n\n    string(REPLACE \";\" \" \" LINK_FLAGS_IPO \"${CMAKE_CXX_LINK_OPTIONS_IPO}\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${LINK_FLAGS_IPO}\")\n  endif()\nendif()\n\nset(CMAKE_THREAD_PREFER_PTHREAD ON)\nset(THREADS_PREFER_PTHREAD_FLAG ON)\nfind_package(Threads REQUIRED)\n\nif (THREADS_HAVE_PTHREAD_ARG)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pthread\")\nendif()\n\ninclude(TdSetUpCompiler)\ntd_set_up_compiler()\n\nif (CLANG OR GCC)\n  if (MEMPROF)\n    include(CheckCXXCompilerFlag)\n    check_cxx_compiler_flag(-no-pie CXX_NO_PIE_FLAG)\n    if (CXX_NO_PIE_FLAG)\n      set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -no-pie\")\n    elseif (APPLE)\n      set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,-no_pie\")\n    endif()\n    include(AddCXXCompilerFlag)\n    add_cxx_compiler_flag(\"-static-libstdc++\")\n    add_cxx_compiler_flag(\"-static-libgcc\")\n  endif()\nendif()\n\nset(TELEGRAM_BOT_API_SOURCE\n  telegram-bot-api/telegram-bot-api.cpp\n\n  telegram-bot-api/Client.cpp\n  telegram-bot-api/ClientManager.cpp\n  telegram-bot-api/HttpConnection.cpp\n  telegram-bot-api/HttpStatConnection.cpp\n  telegram-bot-api/Query.cpp\n  telegram-bot-api/Stats.cpp\n  telegram-bot-api/Watchdog.cpp\n  telegram-bot-api/WebhookActor.cpp\n\n  telegram-bot-api/Client.h\n  telegram-bot-api/ClientManager.h\n  telegram-bot-api/ClientParameters.h\n  telegram-bot-api/HttpConnection.h\n  telegram-bot-api/HttpServer.h\n  telegram-bot-api/HttpStatConnection.h\n  telegram-bot-api/Query.h\n  telegram-bot-api/Stats.h\n  telegram-bot-api/Watchdog.h\n  telegram-bot-api/WebhookActor.h\n)\n\nadd_executable(telegram-bot-api ${TELEGRAM_BOT_API_SOURCE})\ntarget_include_directories(telegram-bot-api PRIVATE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)\ntarget_link_libraries(telegram-bot-api PRIVATE memprof tdactor tdcore tddb tdnet tdutils)\n\ninstall(TARGETS telegram-bot-api RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\")\nif (MSVC AND VCPKG_TOOLCHAIN)\n  install(DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/\" DESTINATION \"${CMAKE_INSTALL_BINDIR}\" FILES_MATCHING PATTERN \"*.dll\" PATTERN \"*.pdb\")\nendif()\n"
        },
        {
          "name": "LICENSE_1_0.txt",
          "type": "blob",
          "size": 1.306640625,
          "content": "Boost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.2509765625,
          "content": "# Telegram Bot API\n\nThe Telegram Bot API provides an HTTP API for creating [Telegram Bots](https://core.telegram.org/bots).\n\nIf you've got any questions about bots or would like to report an issue with your bot, kindly contact us at [@BotSupport](https://t.me/BotSupport) in Telegram.\n\nPlease note that only global Bot API issues that affect all bots are suitable for this repository.\n\n## Table of Contents\n- [Installation](#installation)\n- [Dependencies](#dependencies)\n- [Usage](#usage)\n- [Documentation](#documentation)\n- [Moving a bot to a local server](#switching)\n- [Moving a bot from one local server to another](#moving)\n- [License](#license)\n\n<a name=\"installation\"></a>\n## Installation\n\nThe simplest way to build and install `Telegram Bot API server` is to use our [Telegram Bot API server build instructions generator](https://tdlib.github.io/telegram-bot-api/build.html).\nIf you do that, you'll only need to choose the target operating system to receive the complete build instructions.\n\nIn general, you need to install all `Telegram Bot API server` [dependencies](#dependencies) and compile the source code using CMake:\n\n```sh\ngit clone --recursive https://github.com/tdlib/telegram-bot-api.git\ncd telegram-bot-api\nmkdir build\ncd build\ncmake -DCMAKE_BUILD_TYPE=Release ..\ncmake --build . --target install\n```\n\n<a name=\"dependencies\"></a>\n## Dependencies\nTo build and run `Telegram Bot API server` you will need:\n\n* OpenSSL\n* zlib\n* C++14 compatible compiler (e.g., Clang 3.4+, GCC 4.9+, MSVC 19.0+ (Visual Studio 2015+), Intel C++ Compiler 17+) (build only)\n* gperf (build only)\n* CMake (3.0.2+, build only)\n\n<a name=\"usage\"></a>\n## Usage\n\nUse `telegram-bot-api --help` to receive the list of all available options of the Telegram Bot API server.\n\nThe only mandatory options are `--api-id` and `--api-hash`. You must obtain your own `api_id` and `api_hash`\nas described in https://core.telegram.org/api/obtaining_api_id and specify them using the `--api-id` and `--api-hash` options\nor the `TELEGRAM_API_ID` and `TELEGRAM_API_HASH` environment variables.\n\nTo enable Bot API features not available at `https://api.telegram.org`, specify the option `--local`. In the local mode the Bot API server allows to:\n* Download files without a size limit.\n* Upload files up to 2000 MB.\n* Upload files using their local path and [the file URI scheme](https://en.wikipedia.org/wiki/File_URI_scheme).\n* Use an HTTP URL for the webhook.\n* Use any local IP address for the webhook.\n* Use any port for the webhook.\n* Set *max_webhook_connections* up to 100000.\n* Receive the absolute local path as a value of the *file_path* field without the need to download the file after a *getFile* request.\n\nThe Telegram Bot API server accepts only HTTP requests, so a TLS termination proxy needs to be used to handle remote HTTPS requests.\n\nBy default the Telegram Bot API server is launched on the port 8081, which can be changed using the option `--http-port`.\n\n<a name=\"documentation\"></a>\n## Documentation\nSee [Bots: An introduction for developers](https://core.telegram.org/bots) for a brief description of Telegram Bots and their features.\n\nSee the [Telegram Bot API documentation](https://core.telegram.org/bots/api) for a description of the Bot API interface and a complete list of available classes, methods and updates.\n\nSee the [Telegram Bot API server build instructions generator](https://tdlib.github.io/telegram-bot-api/build.html) for detailed instructions on how to build the Telegram Bot API server.\n\nSubscribe to [@BotNews](https://t.me/botnews) to be the first to know about the latest updates and join the discussion in [@BotTalk](https://t.me/bottalk).\n\n<a name=\"switching\"></a>\n## Moving a bot to a local server\n\nTo guarantee that your bot will receive all updates, you must deregister it with the `https://api.telegram.org` server by calling the method [logOut](https://core.telegram.org/bots/api#logout).\nAfter the bot is logged out, you can replace the address to which the bot sends requests with the address of your local server and use it in the usual way.\nIf the server is launched in `--local` mode, make sure that the bot can correctly handle absolute file paths in response to `getFile` requests.\n\n<a name=\"moving\"></a>\n## Moving a bot from one local server to another\n\nIf the bot is logged in on more than one server simultaneously, there is no guarantee that it will receive all updates.\nTo move a bot from one local server to another you can use the method [logOut](https://core.telegram.org/bots/api#logout) to log out on the old server before switching to the new one.\n\nIf you want to avoid losing updates between logging out on the old server and launching on the new server, you can remove the bot's webhook using the method\n[deleteWebhook](https://core.telegram.org/bots/api#deletewebhook), then use the method [close](https://core.telegram.org/bots/api#close) to close the bot instance.\nAfter the instance is closed, locate the bot's subdirectory in the working directory of the old server by the bot's user ID, move the subdirectory to the working directory of the new server\nand continue sending requests to the new server as usual.\n\n<a name=\"license\"></a>\n## License\n`Telegram Bot API server` source code is licensed under the terms of the Boost Software License. See [LICENSE_1_0.txt](http://www.boost.org/LICENSE_1_0.txt) for more information.\n"
        },
        {
          "name": "build.html",
          "type": "blob",
          "size": 24.990234375,
          "content": "<!DOCTYPE html>\n<html>\n\n<head>\n<title>Telegram Bot API server build instructions</title>\n  <style>\n    :root {\n      --background: #fafafa;\n      --color: black;\n      --color-primary: #0088ff;\n      --color-code-block: #ebf9ff;\n      --color-select-border: rgb(211, 211, 211);\n      --color-checkbox-background: rgb(211, 211, 211);\n      --color-checkbox-tick: #ffffff;\n      --color-copy-success-background: #c1ffc6;\n      --color-copy-success-border: rgb(0, 255, 0);\n      --color-copy-fail-background: #ffcbcb;\n      --color-copy-fail-border: rgb(255, 0, 0);\n\n      color: var(--color);\n      background: var(--background);\n    }\n    @media (prefers-color-scheme: dark) {\n      :root {\n        --background: #0e0e0e;\n        --color: rgb(190, 190, 190);\n        --color-primary: #0088ff;\n        --color-code-block: #101315;\n        --color-select-border: rgb(54, 54, 54);\n        --color-checkbox-background: rgb(51, 51, 51);\n        --color-checkbox-tick: #ffffff;\n        --color-copy-success-background: #001f00;\n        --color-copy-success-border: rgb(0, 255, 0);\n        --color-copy-fail-background: #1f0000;\n        --color-copy-fail-border: rgb(255, 0, 0);\n      }\n    }\n    body {\n      font-family: 'Segoe UI', Arial, Helvetica, sans-serif;\n    }\n    .hide {\n      display: none;\n    }\n    div.main {\n      max-width: 1250px;\n      padding: 25px;\n      margin: auto;\n      font-size: 16px;\n    }\n\n    p {\n      margin: 0;\n    }\n    .main > div {\n      margin-bottom: 20px;\n    }\n\n    #buildCommands {\n      font-family: Consolas, monospace;\n      margin-left: 40px;\n      background: var(--color-code-block);\n      padding: 5px;\n      margin-bottom: 0;\n      display: block;\n    }\n    #buildCommands ul {\n      list-style: '$ ';\n    }\n\n    a {\n      color: var(--color-primary);\n      text-decoration-color: transparent;\n      transition: text-decoration-color 200ms;\n    }\n    a:hover {\n      text-decoration: underline;\n    }\n    select, button {\n      border: 1px solid var(--color-select-border);\n      background-color: var(--background);\n      color: var(--color);\n      padding: 5px;\n      margin-top: 5px;\n      transition: border 200ms, padding 200ms;\n      border-radius: 999em;\n      font-size: 16px;\n      cursor: pointer;\n    }\n\n    select:focus, button:focus {\n      outline: none;\n      border-color: var(--color-primary);\n      border-width: 2px;\n      padding: 4px;\n    }\n\n    label * {\n      vertical-align: middle;\n    }\n\n    input[type=checkbox] {\n      margin-right: 5px;\n      appearance: none;\n      -webkit-appearance: none;\n      -moz-appearance: none;\n      background-color: var(--color-checkbox-background);\n      height: 20px;\n      width: 20px;\n      border-radius: 3px;\n      position: relative;\n      transition: background-color 200ms;\n    }\n    input[type=checkbox]::after {\n      content: \"\";\n      transition: border-color 200ms;\n      position: absolute;\n      left: 6px;\n      top: 2px;\n      width: 5px;\n      height: 10px;\n      border: solid transparent;\n      border-width: 0 3px 3px 0;\n      -webkit-transform: rotate(45deg);\n      -ms-transform: rotate(45deg);\n      transform: rotate(45deg);\n    }\n    input[type=checkbox]:checked {\n      background-color: var(--color-primary);\n    }\n    input[type=checkbox]:checked::after {\n      border-color: var(--color-checkbox-tick);\n    }\n\n    input[type=radio] {\n      margin-right: 5px;\n      appearance: none;\n      -webkit-appearance: none;\n      -moz-appearance: none;\n      background-color: var(--color-checkbox-background);\n      height: 20px;\n      width: 20px;\n      border-radius: 100%;\n      position: relative;\n      transition: background-color 200ms;\n    }\n    input[type=radio]::after {\n      content: \"\";\n      transition: border-color 200ms;\n      position: absolute;\n      left: 10px;\n      top: 10px;\n      width: 0;\n      height: 0;\n      border-radius: 100%;\n      background-color: transparent;\n      transition: width 200ms, height 200ms, left 200ms, top 200ms, background-color 100ms;\n    }\n    input[type=radio]:checked::after {\n      background-color: var(--color-primary);\n      left: 2px;\n      top: 2px;\n      width: 16px;\n      height: 16px;\n    }\n\n    #copyBuildCommandsButton {\n      margin-left: 40px;\n    }\n    #copyBuildCommandsButton.success {\n      background: var(--color-copy-success-background);\n      border-color: var(--color-copy-success-border);\n    }\n    #copyBuildCommandsButton.fail {\n      background: var(--color-copy-fail-background);\n      border-color: var(--color-copy-fail-border);\n    }\n  </style>\n</head>\n\n<body onload=\"onLoad(true)\" onpopstate=\"onLoad(false)\">\n\n<div class=\"main\">\n  <div id=\"osSelectDiv\" class=\"large\">\n    <p>Choose an operating system on which you want to use the Telegram Bot API server:</p>\n    <select id=\"osSelect\" onchange=\"onOsChanged(false)\" autofocus class=\"large\">\n      <option>Choose an operating system:</option>\n      <option>Windows</option>\n      <option>Linux</option>\n      <option>macOS</option>\n      <option>FreeBSD</option>\n      <option>OpenBSD</option>\n      <option>NetBSD</option>\n    </select>\n    <p></p>\n  </div>\n\n  <div id=\"linuxSelectDiv\" class=\"hide\">\n    <p>Choose a Linux distro on which you want to use the Telegram Bot API server:</p>\n    <select id=\"linuxSelect\" onchange=\"onOsChanged(false)\" class=\"large\">\n      <option>Choose a Linux distro:</option>\n      <option>Alpine</option>\n      <option>CentOS 7</option>\n      <option>CentOS 8</option>\n      <option>CentOS Stream 9</option>\n      <option>Debian 8/9</option>\n      <option>Debian 10+</option>\n      <option>Fedora 21+</option>\n      <option>Ubuntu 14</option>\n      <option>Ubuntu 16</option>\n      <option>Ubuntu 18</option>\n      <option>Ubuntu 20</option>\n      <option>Ubuntu 22</option>\n      <option>Ubuntu 24</option>\n      <option>Other</option>\n    </select>\n    <p></p>\n  </div>\n\n  <div id=\"buildOptionsDiv\" class=\"hide\">\n    <div id=\"buildDebugDiv\" class=\"hide\">\n      <label><input type=\"checkbox\" id=\"buildDebugCheckbox\" onchange=\"onOptionsChanged()\"/>Build the debug binary. Debug binaries are much larger and slower than the release one.</label>\n    </div>\n\n    <div id=\"buildInstallLocalDiv\" class=\"hide\">\n      <label><input type=\"checkbox\" id=\"buildInstallLocalCheckbox\" onchange=\"onOptionsChanged()\"/>Install the built Telegram Bot API server to /usr/local instead of placing the files to telegram-bot-api/bin.</label>\n    </div>\n\n    <p></p>\n\n    <div id=\"buildCompilerDiv\" class=\"hide\">\n      <span>Choose which compiler you want to use to build the Telegram Bot API server:</span><br>\n      <label><input type=\"radio\" id=\"buildCompilerRadioGcc\" name=\"buildCompilerRadio\" onchange=\"onOptionsChanged()\" checked/>g++</label>\n      <label><input type=\"radio\" id=\"buildCompilerRadioClang\" name=\"buildCompilerRadio\" onchange=\"onOptionsChanged()\"/>clang (recommended)</label>\n      <p></p>\n    </div>\n\n    <div id=\"buildShellDiv\" class=\"hide\">\n      <span>Choose which shell application you want to use for building:</span><br>\n      <label><input type=\"radio\" id=\"buildShellRadioPowerShell\" name=\"buildShellRadio\" onchange=\"onOptionsChanged()\" checked/>PowerShell</label>\n      <label><input type=\"radio\" id=\"buildShellRadioBash\" name=\"buildShellRadio\" onchange=\"onOptionsChanged()\"/>mintty/Bash</label>\n      <p></p>\n    </div>\n\n    <div id=\"buildShellBsdDiv\" class=\"hide\">\n      <span>Choose which shell application you want to use for building:</span><br>\n      <label><input type=\"radio\" id=\"buildShellBsdRadioCsh\" name=\"buildShellRadioBsd\" onchange=\"onOptionsChanged()\" checked/>tcsh/csh</label>\n      <label><input type=\"radio\" id=\"buildShellBsdRadioBash\" name=\"buildShellRadioBsd\" onchange=\"onOptionsChanged()\"/>Bash</label>\n      <p></p>\n    </div>\n\n    <div id=\"buildMacOsHostDiv\" class=\"hide\">\n      <span>Choose host architecture:</span><br>\n      <label><input type=\"radio\" id=\"buildMacOsHostRadioAppleSilicon\" name=\"buildMacOsHostRadio\" onchange=\"onOptionsChanged()\" checked/>Apple silicon</label>\n      <label><input type=\"radio\" id=\"buildMacOsHostRadioIntel\" name=\"buildMacOsHostRadio\" onchange=\"onOptionsChanged()\"/>Intel</label>\n      <p></p>\n    </div>\n\n    <div id=\"buildBitnessDiv\" class=\"hide\">\n      <span>Choose for which bitness you want to build the Telegram Bot API server:</span><br>\n      <label><input type=\"radio\" id=\"buildBitnessRadio64\" name=\"buildBitnessRadio\" onchange=\"onOptionsChanged()\" checked/>64</label>\n      <label><input type=\"radio\" id=\"buildBitnessRadio32\" name=\"buildBitnessRadio\" onchange=\"onOptionsChanged()\"/>32</label>\n      <p></p>\n    </div>\n\n    <div id=\"buildRootDiv\" class=\"hide\">\n      <label><input type=\"checkbox\" id=\"buildRootCheckbox\" onchange=\"onOptionsChanged()\"/>Build from root user (not recommended).</label>\n    </div>\n\n    <p></p>\n  </div>\n\n  <div id=\"buildTextDiv\" class=\"hide\">\n    <p id=\"buildText\">Hidden text</p>\n  </div>\n\n  <div id=\"buildCommandsDiv\" class=\"hide\">\n    <p id=\"buildPre\">Hidden text</p>\n    <code id=\"buildCommands\">Empty commands</code>\n    <button id=\"copyBuildCommandsButton\" onclick=\"copyBuildInstructions()\">\n        <span id=\"copyBuildCommandsText\">Copy</span>\n    </button>\n  </div>\n</div>\n\n<script>\nfunction onLoad(initial) {\n  var url = new URL(window.location.href);\n  var os = url.searchParams.get('os');\n\n  if (!os) {\n    os = '';\n  }\n  var os_options = document.getElementById('osSelect').options;\n  for (var i = 0; i < os_options.length; i++) {\n    os_options[i].selected = os_options[i].text.toLowerCase() === os.toLowerCase();\n  }\n\n  onOsChanged(initial || !history.state);\n}\n\nfunction onOsChanged(initial) {\n  var os = document.getElementById('osSelect').value;\n  if (os.includes('Choose ')) {\n    if (history.state !== '' && history.state !== null) {\n      history.pushState('', '', 'build.html');\n    }\n\n    document.getElementById('linuxSelectDiv').style.display = 'none';\n    document.getElementById('buildTextDiv').style.display = 'none';\n    document.getElementById('buildOptionsDiv').style.display = 'none';\n    document.getElementById('buildCommandsDiv').style.display = 'none';\n    return;\n  }\n\n  if (!initial && history.state !== os) {\n    history.pushState(os, '', 'build.html?os=' + encodeURIComponent(os));\n  }\n\n  var os_linux = os.includes('Linux');\n  if (os_linux) {\n    document.getElementById('linuxSelectDiv').style.display = 'block';\n\n    var linux_distro = document.getElementById('linuxSelect').value;\n    if (linux_distro.includes('Choose ')) {\n      document.getElementById('buildTextDiv').style.display = 'none';\n      document.getElementById('buildOptionsDiv').style.display = 'none';\n      document.getElementById('buildCommandsDiv').style.display = 'none';\n      return;\n    }\n  } else {\n    document.getElementById('linuxSelectDiv').style.display = 'none';\n  }\n\n  document.getElementById('buildTextDiv').style.display = 'block';\n  document.getElementById('buildText').innerHTML = 'Here is complete instruction for building Telegram Bot API Server on ' + os + ':';\n\n  document.getElementById('buildOptionsDiv').style.display = 'block';\n\n  onOptionsChanged();\n}\n\nfunction onOptionsChanged() {\n  var os = document.getElementById('osSelect').value;\n\n  var os_windows = os.includes('Windows');\n  var os_linux = os.includes('Linux');\n  var os_mac = os.includes('macOS');\n  var os_freebsd = os.includes('FreeBSD');\n  var os_openbsd = os.includes('OpenBSD');\n  var os_netbsd = os.includes('NetBSD');\n\n  var linux_distro = 'none';\n  if (os_linux) {\n    linux_distro = document.getElementById('linuxSelect').value;\n  }\n  document.getElementById('buildCommandsDiv').style.display = 'block';\n\n  var use_clang = os_freebsd || os_openbsd;\n  if (os_linux && linux_distro !== 'Alpine' && !linux_distro.includes('CentOS') && !linux_distro.includes('Fedora')) {\n    document.getElementById('buildCompilerDiv').style.display = 'block';\n    use_clang = document.getElementById('buildCompilerRadioClang').checked;\n  } else {\n    document.getElementById('buildCompilerDiv').style.display = 'none';\n  }\n\n  var use_root = false;\n  if ((os_linux && linux_distro !== 'Other') || os_openbsd || os_netbsd) {\n    use_root = document.getElementById('buildRootCheckbox').checked;\n    document.getElementById('buildRootDiv').style.display = 'block';\n  } else {\n    document.getElementById('buildRootDiv').style.display = 'none';\n  }\n\n  var use_powershell = false;\n  var use_cmd = false;\n  var use_csh = false;\n  var homebrew_install_dir = '';\n  var os_mac_host_name = '';\n  if (os_windows) {\n    document.getElementById('buildShellDiv').style.display = 'block';\n    use_powershell = document.getElementById('buildShellRadioPowerShell').checked;\n  } else {\n    document.getElementById('buildShellDiv').style.display = 'none';\n  }\n  if (os_freebsd) {\n    document.getElementById('buildShellBsdDiv').style.display = 'block';\n    use_csh = document.getElementById('buildShellBsdRadioCsh').checked;\n  } else {\n    document.getElementById('buildShellBsdDiv').style.display = 'none';\n  }\n  if (os_mac) {\n    document.getElementById('buildMacOsHostDiv').style.display = 'block';\n    if (document.getElementById('buildMacOsHostRadioAppleSilicon').checked) {\n      homebrew_install_dir = '/opt/homebrew';\n      os_mac_host_name = 'Apple silicon';\n    } else {\n      homebrew_install_dir = '/usr/local';\n      os_mac_host_name = 'Intel';\n    }\n  } else {\n    document.getElementById('buildMacOsHostDiv').style.display = 'none';\n  }\n\n  var use_msvc = os_windows;\n  var use_vcpkg = os_windows;\n\n  var is_debug_build = document.getElementById('buildDebugCheckbox').checked;\n  document.getElementById('buildDebugDiv').style.display = 'block';\n\n  var sudo = 'sudo ';\n  if (use_root || linux_distro.includes('Debian') || os_freebsd || os_openbsd || os_netbsd) {\n    sudo = '';\n  }\n\n  var build_32bit = false;\n  var build_64bit = false;\n  if (use_msvc) {\n    document.getElementById('buildBitnessDiv').style.display = 'block';\n    build_32bit = document.getElementById('buildBitnessRadio32').checked;\n    build_64bit = document.getElementById('buildBitnessRadio64').checked;\n  } else {\n    document.getElementById('buildBitnessDiv').style.display = 'none';\n  }\n\n  var local = './';\n  if (use_cmd) {\n    local = '.\\\\';\n  }\n\n  var install_dir = 'telegram-bot-api/bin';\n  if (!os_windows) {\n    document.getElementById('buildInstallLocalDiv').style.display = 'block';\n    if (document.getElementById('buildInstallLocalCheckbox').checked) {\n      install_dir = '/usr/local';\n    }\n  } else {\n    document.getElementById('buildInstallLocalDiv').style.display = 'none';\n  }\n\n  var pre_text = [];\n  if (os_windows) {\n    pre_text.push('Note that Windows Subsystem for Linux (WSL) and Cygwin are not Windows environments, so you need to use instructions for Linux for them instead.');\n    pre_text.push('Download and install <a href=\"https://visualstudio.microsoft.com/ru/vs/community/\">Microsoft Visual Studio</a>. Enable C++ support while installing.');\n    pre_text.push('Download and install <a href=\"https://cmake.org/download/\">CMake</a>; choose \"Add CMake to the system PATH\" option while installing.');\n    pre_text.push('Download and install <a href=\"https://git-scm.com/download/win\">Git</a>.');\n  }\n  if (os_linux && linux_distro === 'Other') {\n    var compiler = use_clang ? 'clang >= 3.4, libc++' : 'g++ >= 4.9.2';\n    pre_text.push('Install Git, ' + compiler + ', make, CMake >= 3.0.2, OpenSSL-dev, zlib-dev, gperf using your package manager.');\n  }\n  if (os_freebsd) {\n    pre_text.push('Note that the following instruction is for FreeBSD 13.');\n    pre_text.push('Note that the following calls to <code>pkg</code> needs to be run as <code>root</code>.');\n  }\n  if (os_openbsd) {\n    pre_text.push('Note that the following instruction is for OpenBSD 6.7 and default KSH shell.');\n    pre_text.push('Note that building requires a lot of memory, so you may need to increase allowed per-process memory usage in /etc/login.conf or build from root.');\n  }\n  if (os_netbsd) {\n    pre_text.push('Note that the following instruction is for NetBSD 8+ and default SH shell.');\n  }\n\n  var terminal_name = (function () {\n    if (os_windows) {\n      return use_powershell ? 'PowerShell' : 'mintty/Bash';\n    }\n    if (os_mac) {\n      return 'Terminal';\n    }\n    if (os_openbsd) {\n      return 'ksh';\n    }\n    if (os_netbsd) {\n      return 'sh';\n    }\n    if (use_csh) {\n      return 'tcsh/csh';\n    }\n    return 'Bash';\n  })();\n  if (os_windows) {\n    pre_text.push('Close and re-open ' + terminal_name + ' if the PATH environment variable was changed.');\n  }\n  pre_text.push('Run these commands in ' + terminal_name + ' to build Bot API server and to install it to ' + install_dir + ':');\n  document.getElementById('buildPre').innerHTML = '<ul><li>' + pre_text.join('</li><li>') + '</li></ul>';\n  document.getElementById('buildPre').style.display = 'block';\n\n  if (install_dir !== '/usr/local') {\n    install_dir = '..';\n  }\n\n  function getClangVersionSuffix() {\n    switch (linux_distro) {\n      case 'Ubuntu 14':\n        return '-3.9';\n      case 'Ubuntu 18':\n        return '-6.0';\n      case 'Ubuntu 20':\n        return '-10';\n      case 'Ubuntu 22':\n        return '-14';\n      case 'Ubuntu 24':\n        return '-18';\n      default:\n        return ''; // use default version\n    }\n  }\n\n  function getLibcplusplusVersionSuffix() {\n    switch (linux_distro) {\n      case 'Ubuntu 20':\n      case 'Ubuntu 22':\n      case 'Ubuntu 24':\n        return getClangVersionSuffix();\n      default:\n        return ''; // use default version\n    }\n  }\n\n  var commands = [];\n\n  var cmake = 'cmake';\n  if (os_mac) {\n    commands.push('xcode-select --install');\n    commands.push('/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"');\n    commands.push('brew install gperf cmake openssl');\n  } else if (os_linux && linux_distro !== 'Other') {\n    switch (linux_distro) {\n      case 'Alpine':\n        commands.push(sudo + 'apk update');\n        commands.push(sudo + 'apk upgrade');\n        var packages = 'alpine-sdk linux-headers git zlib-dev openssl-dev gperf cmake';\n        commands.push(sudo + 'apk add ' + packages);\n        break;\n      case 'CentOS 7':\n        commands.push(sudo + 'yum update -y');\n        commands.push(sudo + 'yum install -y centos-release-scl-rh epel-release');\n        commands.push(sudo + 'yum install -y devtoolset-9-gcc devtoolset-9-gcc-c++');\n        cmake = 'cmake3';\n        var packages = 'gcc-c++ make git zlib-devel openssl-devel gperf ' + cmake;\n        commands.push(sudo + 'yum install -y ' + packages);\n        break;\n      case 'CentOS 8':\n      case 'CentOS Stream 9':\n        commands.push(sudo + 'dnf update -y');\n        if (linux_distro === 'CentOS 8') {\n          commands.push(sudo + 'dnf --enablerepo=powertools install gperf');\n        } else {\n          commands.push(sudo + 'dnf --enablerepo=crb install gperf');\n        }\n        var packages = 'gcc-c++ make git zlib-devel openssl-devel cmake';\n        commands.push(sudo + 'dnf install -y ' + packages);\n        break;\n      case 'Fedora 21+':\n        commands.push(sudo + 'dnf update -y');\n        var packages = 'gperf gcc-c++ make git zlib-devel openssl-devel cmake';\n        commands.push(sudo + 'dnf install -y ' + packages);\n        break;\n      case 'Debian 8/9':\n      case 'Debian 10+':\n      case 'Ubuntu 14':\n      case 'Ubuntu 16':\n      case 'Ubuntu 18':\n      case 'Ubuntu 20':\n      case 'Ubuntu 22':\n      case 'Ubuntu 24':\n        if (linux_distro.includes('Debian') && !use_root) {\n          commands.push('su -');\n        }\n        if (linux_distro === 'Ubuntu 14' && !use_clang) {\n          commands.push(sudo + 'add-apt-repository ppa:ubuntu-toolchain-r/test');\n        }\n        commands.push(sudo + 'apt-get update');\n        commands.push(sudo + 'apt-get upgrade');\n        var packages = 'make git zlib1g-dev libssl-dev gperf';\n        if (linux_distro === 'Ubuntu 14') {\n          packages += ' cmake3';\n        } else {\n          packages += ' cmake';\n        }\n        if (use_clang) {\n          packages += ' clang' + getClangVersionSuffix() + ' libc++' + getLibcplusplusVersionSuffix() + '-dev';\n          if (linux_distro === 'Debian 10+' || linux_distro === 'Ubuntu 18' || linux_distro === 'Ubuntu 20' || linux_distro === 'Ubuntu 22' || linux_distro === 'Ubuntu 24') {\n            packages += ' libc++abi' + getLibcplusplusVersionSuffix() + '-dev';\n          }\n        } else {\n          packages += ' g++';\n          if (linux_distro === 'Ubuntu 14') {\n            packages += '-4.9';\n          }\n        }\n        commands.push(sudo + 'apt-get install ' + packages);\n        if (linux_distro.includes('Debian') && !use_root) {\n          commands.push('exit');\n        }\n        break;\n    }\n  } else if (os_freebsd) {\n    commands.push(sudo + 'pkg upgrade');\n    var packages = 'git gperf cmake';\n    commands.push(sudo + 'pkg install ' + packages);\n  } else if (os_openbsd) {\n    if (!use_root) {\n      commands.push('su -');\n    }\n    var packages = 'git gperf php-7.2.10 cmake';\n    commands.push('pkg_add -z ' + packages);\n    if (!use_root) {\n      commands.push('exit');\n    }\n  } else if (os_netbsd) {\n    if (!use_root) {\n      commands.push('su -');\n    }\n    commands.push('export PKG_PATH=http://cdn.netbsd.org/pub/pkgsrc/packages/NetBSD/$(uname -p)/$(uname -r)/All');\n    var packages = 'git gperf pcre2 cmake openssl gcc12-libs mozilla-rootcerts-openssl';\n    commands.push('pkg_add ' + packages);\n    if (!use_root) {\n      commands.push('exit');\n    }\n  }\n  commands.push('git clone --recursive https://github.com/tdlib/telegram-bot-api.git');\n\n  commands.push('cd telegram-bot-api');\n\n  if (use_vcpkg) {\n    commands.push('git clone https://github.com/Microsoft/vcpkg.git');\n    commands.push('cd vcpkg');\n    commands.push(local + 'bootstrap-vcpkg.bat');\n    if (build_64bit) {\n      commands.push(local + 'vcpkg.exe install gperf:x64-windows openssl:x64-windows zlib:x64-windows');\n    } else {\n      commands.push(local + 'vcpkg.exe install gperf:x86-windows openssl:x86-windows zlib:x86-windows');\n    }\n    commands.push('cd ..');\n  }\n\n  function getBacicCmakeInitOptions() {\n    var options = [];\n    if (!use_msvc) {\n      options.push('-DCMAKE_BUILD_TYPE=' + (is_debug_build ? 'Debug' : 'Release'));\n    }\n    if (use_msvc) {\n      if (build_64bit) {\n        options.push('-A x64');\n      } else {\n        options.push('-A Win32');\n      }\n    }\n    return options;\n  }\n\n  commands.push(use_powershell ? 'Remove-Item build -Force -Recurse -ErrorAction SilentlyContinue' : 'rm -rf build');\n  commands.push('mkdir build');\n  commands.push('cd build');\n\n  cmake_init_options = getBacicCmakeInitOptions();\n  if (os_mac) {\n    cmake_init_options.push('-DOPENSSL_ROOT_DIR=' + homebrew_install_dir + '/opt/openssl/');\n  }\n  cmake_init_options.push('-DCMAKE_INSTALL_PREFIX:PATH=' + install_dir);\n  if (use_vcpkg) {\n    cmake_init_options.push('-DCMAKE_TOOLCHAIN_FILE:FILEPATH=../vcpkg/scripts/buildsystems/vcpkg.cmake');\n  }\n\n  function getCmakeInitCommand(options) {\n    var prefix = '';\n    if (os_linux) {\n      if (use_clang) {\n        var clang_version_suffix = getClangVersionSuffix();\n        prefix = 'CXXFLAGS=\"-stdlib=libc++\" CC=/usr/bin/clang' + clang_version_suffix + ' CXX=/usr/bin/clang++' + clang_version_suffix + ' ';\n      } else if (linux_distro === 'Ubuntu 14') {\n        prefix = 'CC=/usr/bin/gcc-4.9 CXX=/usr/bin/g++-4.9 ';\n      } else if (linux_distro === 'CentOS 7') {\n        prefix = 'CC=/opt/rh/devtoolset-9/root/usr/bin/gcc CXX=/opt/rh/devtoolset-9/root/usr/bin/g++ ';\n      }\n    }\n    return prefix + cmake + ' ' + options.join(' ') + ' ..';\n  }\n  commands.push(getCmakeInitCommand(cmake_init_options));\n\n  if (os_openbsd) {\n    commands.push(cmake + ' --build . --target prepare_cross_compiling');\n    commands.push('cd ../td');\n    commands.push('php-7.2 SplitSource.php');\n    commands.push('cd ../build');\n  }\n  let build_command = cmake + ' --build . --target install';\n  if (use_msvc) {\n    if (!is_debug_build) {\n      commands.push(build_command + ' --config Release');\n    }\n    if (is_debug_build) {\n      commands.push(build_command + ' --config Debug');\n    }\n  } else {\n    commands.push(build_command);\n  }\n  if (os_openbsd) {\n    commands.push('cd ../td');\n    commands.push('php-7.2 SplitSource.php --undo');\n  }\n  commands.push('cd ../..');\n  if (install_dir !== '/usr/local') {\n    install_dir = 'telegram-bot-api';\n  }\n  commands.push((use_powershell ? 'dir ' : 'ls -l ') + install_dir + '/bin/telegram-bot-api*');\n  document.getElementById('buildCommands').innerHTML = '<ul><li>' + commands.join('</li><li>') + '</li></ul>';\n  document.getElementById('copyBuildCommandsButton').style.display = commands.includes('exit') ? 'none' : 'block';\n}\n\nfunction copyBuildInstructions() {\n  var text = document.getElementById('buildCommands').innerText;\n\n  function resetButtonState (state) {\n    document.getElementById('copyBuildCommandsButton').classList.remove(state);\n    document.getElementById('copyBuildCommandsText').innerText = \"Copy\";\n  }\n\n  navigator.clipboard.writeText(text).then(result => {\n    document.getElementById('copyBuildCommandsButton').classList.add('success');\n    document.getElementById('copyBuildCommandsText').innerText = \"Copied!\";\n    setTimeout(() => resetButtonState('success'), 5000);\n  }, error => {\n    document.getElementById('copyBuildCommandsButton').classList.add('fail');\n    document.getElementById('copyBuildCommandsText').innerText = \"Couldn't copy :(\";\n    setTimeout(() => resetButtonState('fail'), 5000);\n  })\n}\n\n</script>\n\n</body>\n</html>\n"
        },
        {
          "name": "td",
          "type": "commit",
          "content": null
        },
        {
          "name": "telegram-bot-api",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}