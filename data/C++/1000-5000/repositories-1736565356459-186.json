{
  "metadata": {
    "timestamp": 1736565356459,
    "page": 186,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SeriousCache/UABE",
      "stars": 3763,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1630859375,
          "content": "/.vs/\n/out/\n**.aps\n**.suo\n**.vcxproj.user\n/fetchcontent/*-src/\n/fetchcontent/ispc_compiler/\n/TypeTreeGenerator/.vs\n/TypeTreeGenerator/out\n/Tools/TypeTreeGenerator.pdb\n"
        },
        {
          "name": "AssetsTools",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.033203125,
          "content": "cmake_minimum_required (VERSION 3.18)\nproject (AssetBundleExtractor)\nset(UABE_ROOT ${CMAKE_CURRENT_SOURCE_DIR})\n\n#set(THREADS_PREFER_PTHREAD_FLAG ON)\n#find_package(Threads REQUIRED)\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/CMakeModules\")\n#find_package(ispc_texcomp REQUIRED)\n#find_package(texgenpack REQUIRED)\n#find_package(mCtrl REQUIRED)\n#find_package(jsmn REQUIRED)\n\n#Enable C++20 support\nset(CMAKE_CXX_STANDARD 23) #23, since MSVC++ no longer appears to enable std::format with standard 20.\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG\")\n\nadd_compile_options(/W3)\nadd_definitions(-DUNICODE)\nadd_definitions(-D_UNICODE)\n\ninclude(depend.cmake)\n\nadd_subdirectory (Launcher)\nadd_subdirectory (libCompression)\nadd_subdirectory (libStringConverter)\nadd_subdirectory (CrnlibWrap)\nadd_subdirectory (AssetsTools)\nadd_subdirectory (ModInstaller)\nadd_subdirectory (UABE_Generic)\nadd_subdirectory (UABE_Win32)\nadd_subdirectory (Plugins)\nadd_subdirectory (TexToolWrap)\n"
        },
        {
          "name": "CMakeModules",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeSettings.Example.json",
          "type": "blob",
          "size": 1.90625,
          "content": "ï»¿{\n  \"configurations\": [\n    {\n      \"name\": \"x64-Debug\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Debug\",\n      \"inheritEnvironments\": [ \"msvc_x64_x64\" ],\n      \"buildRoot\": \"${projectDir}\\\\out\\\\build\\\\${name}\",\n      \"installRoot\": \"${projectDir}\\\\out\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"\",\n      \"buildCommandArgs\": \"\",\n      \"ctestCommandArgs\": \"\",\n      \"variables\": [\n        {\n          \"name\": \"PVRTexTool_ROOT\",\n          \"value\": \"X:/Path/To/PowerVR/PVRTexTool\",\n          \"type\": \"PATH\"\n        },\n        {\n          \"name\": \"FMOD_ROOT\",\n          \"value\": \"X:/Path/To/FMOD\",\n          \"type\": \"PATH\"\n        }\n      ]\n    },\n    {\n      \"name\": \"x64-Release\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Release\",\n      \"buildRoot\": \"${projectDir}\\\\out\\\\build\\\\${name}\",\n      \"installRoot\": \"${projectDir}\\\\out\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"\",\n      \"buildCommandArgs\": \"\",\n      \"ctestCommandArgs\": \"\",\n      \"inheritEnvironments\": [ \"msvc_x64_x64\" ],\n      \"variables\": [\n        {\n          \"name\": \"PVRTexTool_ROOT\",\n          \"value\": \"X:/Path/To/PowerVR/PVRTexTool\",\n          \"type\": \"PATH\"\n        },\n        {\n          \"name\": \"FMOD_ROOT\",\n          \"value\": \"X:/Path/To/FMOD\",\n          \"type\": \"PATH\"\n        }\n      ]\n    },\n    {\n      \"name\": \"x86-Release\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Release\",\n      \"buildRoot\": \"${projectDir}\\\\out\\\\build\\\\${name}\",\n      \"installRoot\": \"${projectDir}\\\\out\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"\",\n      \"buildCommandArgs\": \"\",\n      \"ctestCommandArgs\": \"\",\n      \"inheritEnvironments\": [ \"msvc_x86\" ],\n      \"variables\": [\n        {\n          \"name\": \"PVRTexTool_ROOT\",\n          \"value\": \"X:/Path/To/PowerVR/PVRTexTool\",\n          \"type\": \"PATH\"\n        },\n        {\n          \"name\": \"FMOD_ROOT\",\n          \"value\": \"X:/Path/To/FMOD\",\n          \"type\": \"PATH\"\n        }\n      ]\n    }\n  ]\n}"
        },
        {
          "name": "CrnlibWrap",
          "type": "tree",
          "content": null
        },
        {
          "name": "Launcher",
          "type": "tree",
          "content": null
        },
        {
          "name": "Licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "ModInstaller",
          "type": "tree",
          "content": null
        },
        {
          "name": "Plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.56640625,
          "content": "# Asset Bundle Extractor\n.assets and AssetBundle editor.  \nNot affiliated with Unity Technologies.\n\nUABE is an editor for 3.4+/4/5/2017-2021.3 .assets and AssetBundle files. It can create standalone mod installers from changes to .assets and/or bundles.\n\nThere are multiple plugins to convert assets from/to common file formats :\n- The Texture plugin can export and import .png and .tga files (Texture2D only) and decode&encode most texture formats used by Unity.\n- The TextAsset plugin can export and import .txt files.\n- The AudioClip plugin can export uncompressed .wav files from Unity 5+ AudioClip assets using FMOD, .m4a files from WebGL builds and Unity 4 sound files.\n- The Mesh plugin can export .obj and .dae (Collada) files, also supporting rigged SkinnedMeshRenderers.\n- The Utility plugin can export and import byte arrays and resources (StreamingInfo, StreamedResource) within the View Data editor.\n\n## Building\nUABE can be built within Visual Studio (Community) 2022 using the Open Folder option (CMake).\n\nThe non-proprietary dependencies are downloaded and patched during CMake configuration.  \nThe proprietary dependencies are optional and can be disabled:\n- FMOD: Remove the AudioClip plugin by removing the corresponding line in Plugins/CMakeLists.txt.\n- PVRTexTool: Remove TexToolWrap by removing the corresponding line in CMakeLists.txt. This removes support for some texture formats used (mostly) for mobile games.\n\nTo embed the proprietary SDKs, set the PVRTexTool_ROOT and FMOD_ROOT CMake variables accordingly.  \nThe CMakeSettings.Example.json shows how a CMakeSettings.json for Visual Studio could look like.  \nIf the build process cannot find the SDKs, check if the cmake files in CMakeModules look in the correct subfolders. Also note that UABE is still using an old version of FMOD (with plans to substitute it entirely), so it may not work with recent versions.\n\n### Portability Notes\n- UABE uses plain Win32 for the GUI. The GUI portions are isolated to the UABE_Win32 module, some plugins and the mCtrl dependency. winelib could be an option for a Linux GUI port, however.\n- Compilers other than MSVC++ are not tested with UABE and likely require some code changes.\n- Uses C++20-feature std::format, which is not supported by gcc yet (as of writing this). [fmtlib](https://github.com/fmtlib/fmt) may be a quick drop-in replacement.\n\n## License\nUABE is licensed under the Eclipse Public License, v. 2.0 (EPL 2.0) license (see [Licenses/license.txt](Licenses/license.txt)).  \nSee [Readme.License.txt](Readme.License.txt) for more details, including a listing of dependencies and copyright notices.\n"
        },
        {
          "name": "Readme.License.txt",
          "type": "blob",
          "size": 2.3505859375,
          "content": "The license files referred to in this document are located in the Licenses directory.\nBy using this software, you agree to be bound by the terms and conditions of the Eclipse Public License, v. 2.0 (EPL 2.0), see license.txt.\nThe components listed below are not distributed under the EPL 2.0 license. The FMOD Sound System and PowerVR Tools components are only distributed in binary releases of AssetBundleExtractor.\n\nAssetBundleExtractor uses the open-source libraries\nLodePNG (see LodePNG_license.txt, https://github.com/lvandeve/lodepng),\nlibsquish (see libsquish_license.txt),\nstb_image (public domain, https://github.com/nothings/stb),\ncrunch (public domain, https://github.com/richgel999/crunch),\ncrunch Unity fork (see crunch-unity_license.txt, https://github.com/Unity-Technologies/crunch/tree/unity),\nLZMA SDK (public domain, http://7-zip.org/sdk.html),\nlz4 (see lz4_license.txt, https://github.com/Cyan4973/lz4),\nastc-encoder (see astcenc_license.txt, https://github.com/ARM-software/astc-encoder),\nhalf (see half_license.txt, http://half.sourceforge.net/),\nFast ISPC Texture Compressor (see ispc_texcomp_license.txt, https://github.com/GameTechDev/ISPCTextureCompressor),\njsmn (see jsmn_license.txt, https://github.com/zserge/jsmn),\ntexgenpack (see texgenpack_license.txt, https://github.com/hglm/texgenpack) with its dependencies libfgen (see libfgen_license.txt and libfgen_lgpl.txt, https://github.com/hglm/libfgen) and pthreads-win32 (see pthreads_license.txt, https://sourceforge.net/projects/pthreads4w/),\nmCtrl (see mctrl_license.txt, https://www.mctrl.org/),\nCecil (see cecil_license.txt, https://github.com/jbevain/cecil),\nassimp (see assimp_license.txt, https://github.com/assimp/assimp) with its dependency poly2tri (see lower section of assimp_license.txt, http://code.google.com/p/poly2tri/),\nwavfile (CC BY 4.0, see https://creativecommons.org/licenses/by/4.0/, by Douglas Thain, https://www3.nd.edu/~dthain/courses/cse20211/fall2013/wavfile/ - slightly modified for UABE),\nand portions of vgmstream (see vgmstream_license.txt, https://github.com/vgmstream/vgmstream).\n\nUses FMOD Sound System, copyright Â© Firelight Technologies Pty, Ltd., 1994-2015.\nThis product includes components of the PowerVR Tools Software from Imagination Technologies Limited.\n\nUnity is a registered trademark of Unity Technologies. The creator of this tool is in no way affiliated with Unity Technologies."
        },
        {
          "name": "TexToolWrap",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "TypeTreeGenerator",
          "type": "tree",
          "content": null
        },
        {
          "name": "UABE_Generic",
          "type": "tree",
          "content": null
        },
        {
          "name": "UABE_Win32",
          "type": "tree",
          "content": null
        },
        {
          "name": "classdata.tpk",
          "type": "blob",
          "size": 71.9931640625,
          "content": null
        },
        {
          "name": "depend.cmake",
          "type": "blob",
          "size": 15.4892578125,
          "content": "include(FetchContent)\n\n# ASTC Encoder\n\nFetchContent_Declare(\n  astcenc\n  GIT_REPOSITORY https://github.com/ARM-software/astc-encoder\n  GIT_TAG 7e2a81ed5abc202c6f06be9302d193ba44a765c9 #3.5\n  BINARY_DIR  \"${CMAKE_CURRENT_BINARY_DIR}/_deps/astcenc-build\"\n  SUBBUILD_DIR \"${CMAKE_CURRENT_BINARY_DIR}/_deps/astcenc-subbuild\"\n  SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/astcenc-src\"\n)\nset(ISA_SSE41 ON CACHE BOOL \"\")\nset(CLI OFF CACHE BOOL \"\")\nif (NOT astcenc_POPULATED)\n\tFetchContent_Populate(\n\t\tastcenc\n\t)\nendif (NOT astcenc_POPULATED)\nfind_package(Git REQUIRED)\nexecute_process(COMMAND ${GIT_EXECUTABLE} apply \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/astcenc-x86-32-popcntu64-patch-7e2a81ed5abc202c6f06be9302d193ba44a765c9.patch\"\n\t            WORKING_DIRECTORY ${astcenc_SOURCE_DIR}\n\t            ERROR_QUIET)\nadd_subdirectory(${astcenc_SOURCE_DIR} ${astcenc_BINARY_DIR})\n\n# Crunch (Unity fork, compatible with the formats used in Unity 2017.3 onwards)\n\nFetchContent_Declare(\n  crunch-unity\n  GIT_REPOSITORY https://github.com/Unity-Technologies/crunch\n  GIT_TAG 8708900eca8ec609d279270e72936258f81ddfb7\n  BINARY_DIR  \"${CMAKE_CURRENT_BINARY_DIR}/_deps/crunch-unity-build\"\n  SUBBUILD_DIR \"${CMAKE_CURRENT_BINARY_DIR}/_deps/crunch-unity-subbuild\"\n  SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/crunch-unity-src\"\n)\nif (NOT crunch-unity_POPULATED)\n\tFetchContent_Populate(crunch-unity)\nendif (NOT crunch-unity_POPULATED)\nfind_package(Git REQUIRED)\nexecute_process(COMMAND ${GIT_EXECUTABLE} apply \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/crunch-unity-patch-8708900eca8ec609d279270e72936258f81ddfb7.patch\"\n\t            WORKING_DIRECTORY ${crunch-unity_SOURCE_DIR}\n\t            ERROR_QUIET)\n#Check if the patch is applied.\nexecute_process(COMMAND ${GIT_EXECUTABLE} apply --reverse --check \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/crunch-unity-patch-8708900eca8ec609d279270e72936258f81ddfb7.patch\"\n\t\t\t\tWORKING_DIRECTORY ${crunch-unity_SOURCE_DIR})\n\nfile(GLOB crnlib-unity_SOURCES_EXCLUDE \"${crunch-unity_SOURCE_DIR}/crnlib/lzham*.cpp\")\nfile(GLOB crnlib-unity_SOURCES \"${crunch-unity_SOURCE_DIR}/crnlib/*.cpp\")\nlist(REMOVE_ITEM crnlib-unity_SOURCES ${crnlib-unity_SOURCES_EXCLUDE})\nadd_library (crnlib-unity STATIC ${crnlib-unity_SOURCES})\ntarget_include_directories (crnlib-unity PUBLIC \"${crunch-unity_SOURCE_DIR}/inc\")\n\n# Crunch (older version, compatible with the formats used in Unity 5 .. 2017.2)\n\nFetchContent_Declare(\n  crunch-legacy\n  GIT_REPOSITORY https://github.com/BinomialLLC/crunch\n  GIT_TAG 671a0648c8a440b4397f1d96ea5cf5700f830417\n  BINARY_DIR  \"${CMAKE_CURRENT_BINARY_DIR}/_deps/crunch-legacy-build\"\n  SUBBUILD_DIR \"${CMAKE_CURRENT_BINARY_DIR}/_deps/crunch-legacy-subbuild\"\n  SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/crunch-legacy-src\"\n)\nif (NOT crunch-legacy_POPULATED)\n\tFetchContent_Populate(crunch-legacy)\nendif (NOT crunch-legacy_POPULATED)\nfind_package(Git REQUIRED)\nexecute_process(COMMAND ${GIT_EXECUTABLE} apply \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/crunch-legacy-patch-671a0648c8a440b4397f1d96ea5cf5700f830417.patch\"\n\t            WORKING_DIRECTORY ${crunch-legacy_SOURCE_DIR}\n\t            ERROR_QUIET)\n#Check if the patch is applied.\nexecute_process(COMMAND ${GIT_EXECUTABLE} apply --reverse --check \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/crunch-legacy-patch-671a0648c8a440b4397f1d96ea5cf5700f830417.patch\"\n\t\t\t\tWORKING_DIRECTORY ${crunch-legacy_SOURCE_DIR})\n\nfile(GLOB crnlib-legacy_SOURCES_EXCLUDE \"${crunch-legacy_SOURCE_DIR}/crnlib/lzham*.cpp\")\nfile(GLOB crnlib-legacy_SOURCES ${crunch-legacy_SOURCE_DIR}/crnlib/*.cpp)\nlist(REMOVE_ITEM crnlib-legacy_SOURCES ${crnlib-legacy_SOURCES_EXCLUDE})\nadd_library (crnlib-legacy STATIC ${crnlib-legacy_SOURCES})\ntarget_include_directories (crnlib-legacy PUBLIC \"${crunch-legacy_SOURCE_DIR}/inc\")\n\n# Squish (Official repo appears to be https://sourceforge.net/projects/libsquish/ , previously on Google Code)\n\nFetchContent_Declare(\n  libsquish\n  URL \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/libsquish-1.15.tgz\"\n  URL_HASH SHA256=628796EEBA608866183A61D080D46967C9DDA6723BC0A3EC52324C85D2147269\n  SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/libsquish-src\"\n)\nif (NOT libsquish_POPULATED)\n\tFetchContent_Populate(libsquish)\nendif (NOT libsquish_POPULATED)\nset(BUILD_SQUISH_WITH_OPENMP OFF CACHE BOOL \"\")\nadd_subdirectory(\"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/libsquish-src\" \"${CMAKE_CURRENT_BINARY_DIR}/_deps/libsquish-build\")\nset(LIBSQUISH_INCLUDE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/libsquish-src\")\n\n# ISPC Texture Compressor\n#  Requires the ISPC compiler (https://github.com/ispc/ispc) to generate some object files.\n# Official Windows Binaries: https://github.com/ispc/ispc/releases/download/v1.17.0/ispc-v1.17.0-windows.zip\n# Binaries exist for other platforms, assuming Windows for now. Could also be compiled from scratch instead.\n\nFetchContent_Declare(\n  ispc_texcomp\n  GIT_REPOSITORY https://github.com/GameTechDev/ISPCTextureCompressor\n  GIT_TAG 14d998c02b71c356ff3a1ec1adc9243a517bbf38\n  BINARY_DIR  \"${CMAKE_CURRENT_BINARY_DIR}/_deps/ispc_texcomp-build\"\n  SUBBUILD_DIR \"${CMAKE_CURRENT_BINARY_DIR}/_deps/ispc_texcomp-subbuild\"\n  SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/ispc_texcomp-src\"\n)\nset(ISA_SSE41 ON CACHE BOOL \"\")\nset(CLI OFF CACHE BOOL \"\")\nif (NOT ispc_texcomp_POPULATED)\n\tFetchContent_Populate(ispc_texcomp)\nendif (NOT ispc_texcomp_POPULATED)\n# Fetch the ISPC compiler binaries\nFetchContent_Declare(\n  ispc_compiler_binaries\n  URL https://github.com/ispc/ispc/releases/download/v1.17.0/ispc-v1.17.0-windows.zip\n  URL_HASH SHA256=E9A7CC98F69357482985BCBF69FA006632CEE7B3606069B4D5E16DC62092D660\n  SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/ispc_compiler\"\n)\nif (NOT ispc_compiler_binaries_POPULATED)\n\tFetchContent_Populate(ispc_compiler_binaries)\nendif (NOT ispc_compiler_binaries_POPULATED)\n\n# Custom command to invoke the ISPC compiler.\nif (CMAKE_SIZEOF_VOID_P EQUAL 8)\n\tset(ISPC_COMPILER_COMMAND_ARCH \"\")\nelseif (CMAKE_SIZEOF_VOID_P EQUAL 4)\n\tset(ISPC_COMPILER_COMMAND_ARCH \"--arch=x86\")\nendif ()\nadd_custom_command(\n\tOUTPUT\n\t\t${ispc_texcomp_BINARY_DIR}/kernel.obj\n\t\t${ispc_texcomp_BINARY_DIR}/kernel_sse4.obj\n\t\t${ispc_texcomp_BINARY_DIR}/kernel_avx.obj\n\t\t${ispc_texcomp_BINARY_DIR}/kernel_ispc.h\n\n\t\t${ispc_texcomp_BINARY_DIR}/kernel_astc.obj\n\t\t${ispc_texcomp_BINARY_DIR}/kernel_astc_sse4.obj\n\t\t${ispc_texcomp_BINARY_DIR}/kernel_astc_avx.obj\n\t\t${ispc_texcomp_BINARY_DIR}/kernel_astc_ispc.h\n\tCOMMAND\n\t\t\"${ispc_compiler_binaries_SOURCE_DIR}/bin/ispc.exe\" -O2 \"${ispc_texcomp_SOURCE_DIR}/ispc_texcomp/kernel.ispc\"\n\t\t-o \"${ispc_texcomp_BINARY_DIR}/kernel.obj\"\n\t\t-h \"${ispc_texcomp_BINARY_DIR}/kernel_ispc.h\"\n\t\t${ISPC_COMPILER_COMMAND_ARCH}\n\t\t--target=sse4,avx\n\t\t--opt=fast-math\n\tCOMMAND\n\t\t\"${ispc_compiler_binaries_SOURCE_DIR}/bin/ispc.exe\" -O2 \"${ispc_texcomp_SOURCE_DIR}/ispc_texcomp/kernel_astc.ispc\"\n\t\t-o \"${ispc_texcomp_BINARY_DIR}/kernel_astc.obj\"\n\t\t-h \"${ispc_texcomp_BINARY_DIR}/kernel_astc_ispc.h\"\n\t\t${ISPC_COMPILER_COMMAND_ARCH}\n\t\t--target=sse4,avx\n\t\t--opt=fast-math\n\tWORKING_DIRECTORY \"${ispc_texcomp_BINARY_DIR}\"\n)\n# Create the actual ispc_texcomp library.\nadd_library (ispc_texcomp SHARED\n\t${ispc_texcomp_SOURCE_DIR}/ispc_texcomp/ispc_texcomp.cpp\n\t${ispc_texcomp_SOURCE_DIR}/ispc_texcomp/ispc_texcomp_astc.cpp\n\t${ispc_texcomp_SOURCE_DIR}/ispc_texcomp/ispc_texcomp.def\n\t${ispc_texcomp_BINARY_DIR}/kernel.obj\n\t${ispc_texcomp_BINARY_DIR}/kernel_sse4.obj\n\t${ispc_texcomp_BINARY_DIR}/kernel_avx.obj\n\t${ispc_texcomp_BINARY_DIR}/kernel_astc.obj\n\t${ispc_texcomp_BINARY_DIR}/kernel_astc_sse4.obj\n\t${ispc_texcomp_BINARY_DIR}/kernel_astc_avx.obj\n)\ntarget_include_directories (ispc_texcomp PUBLIC \"${ispc_texcomp_SOURCE_DIR}/ispc_texcomp\")\ntarget_include_directories (ispc_texcomp PRIVATE \"${ispc_texcomp_BINARY_DIR}\")\nset_target_properties(ispc_texcomp PROPERTIES RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin\")\n\n# texgenpack (only used for decompression) and dependencies\n\nFetchContent_Declare(\n  pthreads4w\n  GIT_REPOSITORY https://github.com/jwinarske/pthreads4w\n  GIT_TAG 02fecc211d626f28e05ecbb0c10f739bd36d6442 #2.10.0 RC\n  BINARY_DIR  \"${CMAKE_CURRENT_BINARY_DIR}/_deps/pthreads4w-build\"\n  SUBBUILD_DIR \"${CMAKE_CURRENT_BINARY_DIR}/_deps/pthreads4w-subbuild\"\n  SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/pthreads4w-src\"\n)\nif (NOT pthreads4w_POPULATED)\n\tFetchContent_Populate(pthreads4w)\nendif (NOT pthreads4w_POPULATED)\nFetchContent_Declare(\n  libfgen\n  GIT_REPOSITORY https://github.com/hglm/libfgen\n  GIT_TAG 071e5130f5286850eafe8de65f51e05604a02929\n  BINARY_DIR  \"${CMAKE_CURRENT_BINARY_DIR}/_deps/libfgen-build\"\n  SUBBUILD_DIR \"${CMAKE_CURRENT_BINARY_DIR}/_deps/libfgen-subbuild\"\n  SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/libfgen-src\"\n)\nif (NOT libfgen_POPULATED)\n\tFetchContent_Populate(libfgen)\nendif (NOT libfgen_POPULATED)\nFetchContent_Declare(\n  texgenpack\n  GIT_REPOSITORY https://github.com/hglm/texgenpack\n  GIT_TAG cf548ef583ca9592a55ea217b0ec43a2e25b9cbe #0.96\n  BINARY_DIR  \"${CMAKE_CURRENT_BINARY_DIR}/_deps/texgenpack-build\"\n  SUBBUILD_DIR \"${CMAKE_CURRENT_BINARY_DIR}/_deps/texgenpack-subbuild\"\n  SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/texgenpack-src\"\n)\nif (NOT texgenpack_POPULATED)\n\tFetchContent_Populate(texgenpack)\nendif (NOT texgenpack_POPULATED)\nfind_package(Git REQUIRED)\nexecute_process(COMMAND ${GIT_EXECUTABLE} apply \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/texgenpack-patch-cf548ef583ca9592a55ea217b0ec43a2e25b9cbe.patch\"\n\t\t\t\tWORKING_DIRECTORY ${texgenpack_SOURCE_DIR}\n\t\t\t\tERROR_QUIET)\nexecute_process(COMMAND ${GIT_EXECUTABLE} apply \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/libfgen-patch-071e5130f5286850eafe8de65f51e05604a02929.patch\"\n\t\t\t\tWORKING_DIRECTORY ${libfgen_SOURCE_DIR}\n\t\t\t\tERROR_QUIET)\nexecute_process(COMMAND ${GIT_EXECUTABLE} apply \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/pthreads4w-patch-02fecc211d626f28e05ecbb0c10f739bd36d6442.patch\"\n\t\t\t\tWORKING_DIRECTORY ${pthreads4w_SOURCE_DIR}\n\t\t\t\tERROR_QUIET)\n# Verify that the patches have been applied.\nexecute_process(COMMAND ${GIT_EXECUTABLE} apply --reverse --check \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/texgenpack-patch-cf548ef583ca9592a55ea217b0ec43a2e25b9cbe.patch\"\n\t\t\t\tWORKING_DIRECTORY ${texgenpack_SOURCE_DIR})\nexecute_process(COMMAND ${GIT_EXECUTABLE} apply --reverse --check \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/libfgen-patch-071e5130f5286850eafe8de65f51e05604a02929.patch\"\n\t\t\t\tWORKING_DIRECTORY ${libfgen_SOURCE_DIR})\nexecute_process(COMMAND ${GIT_EXECUTABLE} apply --reverse --check \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/pthreads4w-patch-02fecc211d626f28e05ecbb0c10f739bd36d6442.patch\"\n\t\t\t\tWORKING_DIRECTORY ${pthreads4w_SOURCE_DIR})\n\nadd_library (pthreads4w STATIC \"${pthreads4w_SOURCE_DIR}/pthread.c\")\ntarget_include_directories (pthreads4w PUBLIC \"${pthreads4w_SOURCE_DIR}\")\ntarget_compile_definitions(pthreads4w PRIVATE PTW32_STATIC_LIB HAVE_CONFIG_H)\nadd_library (libfgen STATIC\n\t\"${libfgen_SOURCE_DIR}/bitstring.c\" \"${libfgen_SOURCE_DIR}/cache.c\" \"${libfgen_SOURCE_DIR}/crossover.c\"\n\t\"${libfgen_SOURCE_DIR}/decode.c\" \"${libfgen_SOURCE_DIR}/error.c\" \"${libfgen_SOURCE_DIR}/ffit.c\"\n\t\"${libfgen_SOURCE_DIR}/ga.c\" \"${libfgen_SOURCE_DIR}/gray.c\" \"${libfgen_SOURCE_DIR}/migration.c\"\n\t\"${libfgen_SOURCE_DIR}/mutation.c\" \"${libfgen_SOURCE_DIR}/parameters.c\" \"${libfgen_SOURCE_DIR}/population.c\"\n\t\"${libfgen_SOURCE_DIR}/pso.c\" \"${libfgen_SOURCE_DIR}/random.c\" \"${libfgen_SOURCE_DIR}/seed.c\"\n\t\"${libfgen_SOURCE_DIR}/selection.c\" \"${libfgen_SOURCE_DIR}/steady_state.c\"\n)\ntarget_include_directories (libfgen PUBLIC \"${libfgen_SOURCE_DIR}\")\ntarget_link_libraries(libfgen PUBLIC pthreads4w)\nadd_library (texgenpack SHARED\n\t\"${texgenpack_SOURCE_DIR}/astc.c\" \"${texgenpack_SOURCE_DIR}/bptc.c\" \"${texgenpack_SOURCE_DIR}/calibrate.c\"\n\t\"${texgenpack_SOURCE_DIR}/compare.c\" \"${texgenpack_SOURCE_DIR}/compress.c\" \"${texgenpack_SOURCE_DIR}/dxtc.c\"\n\t\"${texgenpack_SOURCE_DIR}/etc2.c\" \"${texgenpack_SOURCE_DIR}/file.c\" \"${texgenpack_SOURCE_DIR}/half_float.c\"\n\t\"${texgenpack_SOURCE_DIR}/image.c\" \"${texgenpack_SOURCE_DIR}/mipmap.c\" \"${texgenpack_SOURCE_DIR}/rgtc.c\"\n\t\"${texgenpack_SOURCE_DIR}/texgenpack.c\" \"${texgenpack_SOURCE_DIR}/texture.c\"\n)\ntarget_include_directories (texgenpack PUBLIC \"${texgenpack_SOURCE_DIR}\")\ntarget_link_libraries(texgenpack PRIVATE libfgen pthreads4w)\ntarget_compile_definitions(texgenpack PRIVATE TEXGENPACK_EXPORTS)\nset_target_properties(texgenpack PROPERTIES RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin\")\n\n# mCtrl, with patches for UABE (customized TreeList and Mditab controls)\n# Note: The patches disable some features of mCtrl to save miniscule amounts of space.\n\nset(MCTRL_BUILD_EXAMPLES OFF CACHE BOOL \"\" FORCE)\nset(MCTRL_BUILD_TESTS OFF CACHE BOOL \"\" FORCE)\nFetchContent_Declare(\n  mctrl\n  GIT_REPOSITORY https://github.com/mity/mctrl\n  GIT_TAG 42334bfbfffbb1530e69213199e775e54edbad21 #release-0.11.5\n  BINARY_DIR  \"${CMAKE_CURRENT_BINARY_DIR}/_deps/mctrl-build\"\n  SUBBUILD_DIR \"${CMAKE_CURRENT_BINARY_DIR}/_deps/mctrl-subbuild\"\n  SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/mctrl-src\"\n)\nif (NOT mctrl_POPULATED)\n\tFetchContent_Populate(mctrl)\nendif (NOT mctrl_POPULATED)\nfind_package(Git REQUIRED)\nexecute_process(COMMAND ${GIT_EXECUTABLE} apply \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/mctrl-patch-42334bfbfffbb1530e69213199e775e54edbad21.patch\"\n\t\t\t\tWORKING_DIRECTORY ${mctrl_SOURCE_DIR}\n\t\t\t\tERROR_QUIET)\n# Verify that the patch has been applied.\nexecute_process(COMMAND ${GIT_EXECUTABLE} apply --reverse --check \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/mctrl-patch-42334bfbfffbb1530e69213199e775e54edbad21.patch\"\n\t\t\t\tWORKING_DIRECTORY ${mctrl_SOURCE_DIR})\nadd_subdirectory(${mctrl_SOURCE_DIR} ${mctrl_BINARY_DIR})\nset(MCTRL_INCLUDE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/mctrl-src/include\")\n\n# jsmn\n\nFetchContent_Declare(\n  jsmn\n  GIT_REPOSITORY https://github.com/zserge/jsmn\n  GIT_TAG 25647e692c7906b96ffd2b05ca54c097948e879c\n  BINARY_DIR  \"${CMAKE_CURRENT_BINARY_DIR}/_deps/jsmn-build\"\n  SUBBUILD_DIR \"${CMAKE_CURRENT_BINARY_DIR}/_deps/jsmn-subbuild\"\n  SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/jsmn-src\"\n)\nif (NOT jsmn_POPULATED)\n\tFetchContent_Populate(jsmn)\nendif (NOT jsmn_POPULATED)\nadd_library (jsmn INTERFACE)\ntarget_include_directories (jsmn INTERFACE \"${jsmn_SOURCE_DIR}\")\n\n# assimp\n\nFetchContent_Declare(\n  assimp\n  GIT_REPOSITORY https://github.com/assimp/assimp\n  GIT_TAG 80799bdbf90ce626475635815ee18537718a05b1 #4.1.0\n  BINARY_DIR  \"${CMAKE_CURRENT_BINARY_DIR}/_deps/assimp-build\"\n  SUBBUILD_DIR \"${CMAKE_CURRENT_BINARY_DIR}/_deps/assimp-subbuild\"\n  SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/assimp-src\"\n)\nif (NOT assimp_POPULATED)\n\tFetchContent_Populate(assimp)\nendif (NOT assimp_POPULATED)\nfind_package(Git REQUIRED)\nexecute_process(COMMAND ${GIT_EXECUTABLE} apply \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/assimp-patch-80799bdbf90ce626475635815ee18537718a05b1.patch\"\n\t\t\t\tWORKING_DIRECTORY ${assimp_SOURCE_DIR}\n\t\t\t\tERROR_QUIET)\n# Verify that the patch has been applied.\nexecute_process(COMMAND ${GIT_EXECUTABLE} apply --reverse --check \"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/assimp-patch-80799bdbf90ce626475635815ee18537718a05b1.patch\"\n\t\t\t\tWORKING_DIRECTORY ${assimp_SOURCE_DIR})\nset(BUILD_SHARED_LIBS OFF CACHE BOOL \"\")\nset(ASSIMP_BUILD_ASSIMP_TOOLS OFF CACHE BOOL \"\")\nset(ASSIMP_BUILD_TESTS OFF CACHE BOOL \"\")\nset(ASSIMP_BUILD_ALL_IMPORTERS_BY_DEFAULT OFF CACHE BOOL \"\")\nset(ASSIMP_BUILD_COLLADA_IMPORTER ON CACHE BOOL \"\" FORCE)\nset(ASSIMP_BUILD_3MF_IMPORTER ON CACHE BOOL \"\" FORCE) # Required to prevent linker errors. Something apparently uses this importer.\nadd_subdirectory(\"${CMAKE_CURRENT_SOURCE_DIR}/fetchcontent/assimp-src\" \"${CMAKE_CURRENT_BINARY_DIR}/_deps/assimp-build\")\nset(ASSIMP_INCLUDE_DIR \"${assimp_SOURCE_DIR}/include\" \"${assimp_BINARY_DIR}/include\" \"${assimp_SOURCE_DIR}/code\")\nSET(CMAKE_DEBUG_POSTFIX \"\" CACHE STRING \"\" FORCE)\n"
        },
        {
          "name": "fetchcontent",
          "type": "tree",
          "content": null
        },
        {
          "name": "inc",
          "type": "tree",
          "content": null
        },
        {
          "name": "libCompression",
          "type": "tree",
          "content": null
        },
        {
          "name": "libStringConverter",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}