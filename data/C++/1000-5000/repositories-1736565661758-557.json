{
  "metadata": {
    "timestamp": 1736565661758,
    "page": 557,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "facebook/fbthrift",
      "stars": 2589,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.822265625,
          "content": "*~\n\n# autoreconf artifacts\nMakefile.in\n/thrift/aclocal.m4\n/thrift/autom4te.cache/\n/thrift/build-aux/\n/thrift/config.guess\n/thrift/config.hin\n/thrift/configure\n\n# Configure artifacts\n# Can't include all Makefiles, since some are non-autoconf\n.deps\n.dirstamp\n_configs.sed\n/thrift/Makefile\n/thrift/compiler/Makefile\n/thrift/config.h\n/thrift/lib/cpp/thrift_config.h\n/thrift/config.log\n/thrift/config.status\n/thrift/lib/Makefile\n/thrift/lib/cpp/Makefile\n/thrift/lib/cpp2/Makefile\n/thrift/lib/cpp2/test/Makefile\n/thrift/lib/thrift/Makefile\n/thrift/libtool\n/thrift/stamp-h1\n/thrift/m4/libtool.m4\n/thrift/m4/lt*\n\n# Build artifacts\n.libs\n*.o\n*.lo\n*.a\n*.la\n*.pyc\ngen-cpp\ngen-cpp2\n/thrift/.python-local/\nCMakeCache.txt\nCMakeFiles\nCPackConfig.cmake\nCPackSourceConfig.cmake\nMakefile\ncmake_install.cmake\n/build/bin\n/build/thrift\n/thrift/lib/java/**/target\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 5.125,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\ncmake_minimum_required(VERSION 3.1.3 FATAL_ERROR)\n\n# Package information.\nif (NOT DEFINED PACKAGE_VERSION)\n  set(PACKAGE_VERSION 1.0.0)\nendif ()\nproject(THRIFT VERSION ${PACKAGE_VERSION} LANGUAGES CXX)\n\nif (NOT DEFINED CPACK_GENERATOR)\n  set(CPACK_GENERATOR RPM)\nendif ()\nset(CPACK_RPM_PACKAGE_PROVIDES thrift)\ninclude(CPack)\n\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n\nset(BIN_INSTALL_DIR bin CACHE STRING\n    \"The subdirectory where the compiler binary should be installed\")\nset(INCLUDE_INSTALL_DIR include CACHE STRING\n    \"The subdirectory where include files should be installed\")\nset(LIB_INSTALL_DIR lib CACHE STRING\n    \"The subdirectory where libraries should be installed\")\nset(CMAKE_INSTALL_DIR lib/cmake/fbthrift CACHE STRING\n    \"The subdirectory where CMake package config files should be installed\")\n\nset(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}\")\nset(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n\n# Add root dir so qualified includes work, e.g. #include \"thrift/compiler/*.h\".\ninclude_directories(.)\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\n\n# Set directory of the Find$x.cmake files to properly include dependencies.\nset(CMAKE_STD_MODULE_PATH ${CMAKE_MODULE_PATH})\nset(CMAKE_MODULE_PATH\n  ${CMAKE_CURRENT_SOURCE_DIR}/thrift/cmake\n  # For in-fbsource builds:\n  ${CMAKE_CURRENT_SOURCE_DIR}/../opensource/fbcode_builder/CMake\n  # For shipit-transformed builds:\n  ${CMAKE_CURRENT_SOURCE_DIR}/build/fbcode_builder/CMake\n  ${CMAKE_MODULE_PATH})\n\n# Find required dependencies.\nfind_package(Boost REQUIRED filesystem)\nfind_package(fmt CONFIG REQUIRED)\nfind_package(OpenSSL REQUIRED)\n\nif(NOT CMAKE_CXX_STANDARD)\n  set(CMAKE_CXX_STANDARD 17)\n  set(CMAKE_CXX_STANDARD_REQUIRED ON)\n  message(STATUS \"setting C++ standard to C++${CMAKE_CXX_STANDARD}\")\nendif()\nset(CMAKE_CXX_EXTENSIONS OFF)\n\n# Explicitly enable coroutine support, since GCC does not enable it\n# by default when targeting C++17.\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n  add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fcoroutines>)\nendif()\n\n# Enable modular builds.\noption(THRIFT_COMPILER_ONLY \"Build the Thrift compiler only\" OFF)\noption(THRIFT_LIB_ONLY \"Build the Thrift libraries only\" OFF)\nif (THRIFT_COMPILER_ONLY OR THRIFT_LIB_ONLY)\n  set(build_all OFF)\nelse ()\n  set(build_all ON)\nendif ()\n\nset(\n  thriftpy AUTO\n  CACHE BOOL\n  \"Install the thrift/lib/py library as an FB Python archive manifest\"\n)\nset_property(CACHE thriftpy PROPERTY STRINGS ON OFF AUTO)\noption(thriftpy3\n  \"Include thrift-py3 library and extensions in the build, requires Cython\"\n  OFF\n)\n\n# Find required dependencies for the Thrift compiler.\nif (THRIFT_COMPILER_ONLY OR build_all)\n  include_directories(${OPENSSL_INCLUDE_DIR})\n  set(THRIFT1 thrift1)\n  set(THRIFTCPP2 thriftcpp2)\n  include(ThriftLibrary.cmake)\n  install(FILES ThriftLibrary.cmake DESTINATION ${INCLUDE_INSTALL_DIR}/thrift)\nendif ()\n\n# Find required dependencies for thrift/lib\nif (THRIFT_LIB_ONLY OR build_all)\n  find_package(Gflags REQUIRED)\n  find_package(Glog REQUIRED)\n  find_package(folly CONFIG REQUIRED)\n  find_package(fizz CONFIG REQUIRED)\n  find_package(wangle CONFIG REQUIRED)\n  find_package(ZLIB REQUIRED)\n  find_package(Zstd REQUIRED)\n  find_package(Xxhash REQUIRED)\n  find_package(mvfst CONFIG REQUIRED)\n  # https://cmake.org/cmake/help/v3.9/module/FindThreads.html\n  set(THREADS_PREFER_PTHREAD_FLAG ON)\n  find_package(Threads)\n  include_directories(\n    ${LIBGFLAGS_INCLUDE_DIR}\n    ${GLOG_INCLUDE_DIRS}\n    ${OPENSSL_INCLUDE_DIR}\n    ${ZSTD_INCLUDE_DIRS}\n    ${Xxhash_INCLUDE_DIR}\n  )\n  add_definitions(\"-DTHRIFT_HAVE_LIBSNAPPY=0\")\n  if (THRIFT_LIB_ONLY)\n    find_program(THRIFT1 thrift1)\n    include(${THRIFT_COMPILER_INCLUDE}/thrift/ThriftLibrary.cmake)\n  endif ()\n\nendif ()\n\nif(thriftpy3)\n  find_package(PythonInterp 3.6 REQUIRED)\n  find_package(PythonLibs 3 REQUIRED)\n  find_package(Cython 0.28 REQUIRED)\nendif()\n\n# Add the test dependencies\n# To run tests: `make test`\nif(enable_tests)\n  find_package(PythonInterp REQUIRED)\n  find_package(GTest REQUIRED)\n  find_package(GMock REQUIRED)\n  include_directories(\n    ${GTEST_INCLUDE_DIRS}\n    ${GMOCK_INCLUDE_DIRS}\n  )\n  enable_testing()\nendif(enable_tests)\n\n# Create a generalized function for tests\nfunction(thrift_gtest tname srcfile)\n  add_executable(\"${tname}-t\" ${srcfile})\n  target_link_libraries(\n    \"${tname}-t\"\n\n    ${ARGN}\n    ${GTEST_BOTH_LIBRARIES}\n    ${GMOCK_BOTH_LIBRARIES}\n    pthread\n  )\n  gtest_add_tests(\"${tname}-t\" \"\" ${srcfile})\nendfunction(thrift_gtest)\n\nadd_subdirectory(thrift)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.27734375,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at <opensource-conduct@fb.com>. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.3720703125,
          "content": "# Contributing to fbthrift\nWe want to make contributing to this project as easy and transparent as\npossible.\n\n## Our Development Process\nExternal pull requests are first applied to facebook's internal\nbranch, then synced with fbthrift github repository.\n\n## Pull Requests\nWe actively welcome your pull requests.\n1. Fork the repo and create your branch from `master`.\n2. If you've added code that should be tested, add tests\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n5. Make sure your code lints.\n6. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n\n## Contributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\n\nComplete your CLA here: <https://code.facebook.com/cla/>\n\n## Issues\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe\ndisclosure of security bugs. In those cases, please go through the process\noutlined on that page and do not file a public issue.\n\n## Coding Style\n* 80 character line length\n\n## License\nBy contributing to fbthrift, you agree that your contributions will be licensed\nunder its Apache 2.0 license.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.072265625,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2014 Facebook\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.9638671875,
          "content": "Facebook Thrift\n---------------\n\n[![Support Ukraine](https://img.shields.io/badge/Support-Ukraine-FFD500?style=flat&labelColor=005BBB)](https://opensource.fb.com/support-ukraine)\n[![Linux Build Status](\n  https://github.com/facebook/fbthrift/actions/workflows/getdeps_linux.yml/badge.svg)](\n  https://github.com/facebook/fbthrift/actions/workflows/getdeps_linux.yml)\n[![macOS Build Status](\n  https://github.com/facebook/fbthrift/actions/workflows/getdeps_mac.yml/badge.svg)](\n  https://github.com/facebook/fbthrift/actions/workflows/getdeps_mac.yml)\n[![Windows Build Status](\n  https://github.com/facebook/fbthrift/actions/workflows/getdeps_windows.yml/badge.svg)](\n  https://github.com/facebook/fbthrift/actions/workflows/getdeps_windows.yml)\n<img src=\"thrift/website/static/img/logo.svg\"\n     alt=\"Facebook Thrift Logo\" align=\"right\" width=\"20%\"/>\n\nThrift is a serialization and RPC framework for service communication. Thrift enables these features in all major languages, and there is strong support for C++, Python, Hack, and Java. Most services at Facebook are written using Thrift for RPC, and some storage systems use Thrift for serializing records on disk.\n\nFacebook Thrift is not a distribution of [Apache Thrift](https://thrift.apache.org/). This is an evolved internal branch of Thrift that Facebook re-released to the open source community in February 2014. Facebook Thrift was originally released closely tracking Apache Thrift but is now evolving in new directions. In particular, the compiler was rewritten from scratch and the new implementation features a fully asynchronous Thrift server. Read more about these improvements in the [ThriftServer documentation](https://github.com/facebook/fbthrift/blob/main/thrift/doc/languages/cpp/cpp2.md).\n\nYou can also learn more about this project in the original Facebook Code [blog post](https://code.facebook.com/posts/1468950976659943/under-the-hood-building-and-open-sourcing-fbthrift/).\n\nTable of Contents\n=========================\n\n* [About Thrift](#about-thrift)\n  * [A Code Generator](#a-code-generator)\n  * [A Serialization Framework](#a-serialization-framework)\n  * [An RPC Framework](#an-rpc-framework)\n* [Building](#building)\n  * [Dependencies](#dependencies)\n  * [Build](#build)\n  * [Thrift Files](#thrift-files)\n* [C++ Static Reflection](#c-static-reflection)\n* [C++ Server Metrics](#c-server-metrics)\n\n## About Thrift\nAt a high level, Thrift is three major things:\n\n### A Code Generator\n\nThrift has a code generator which generates data structures that can be serialized using Thrift, and client and server stubs for RPC, in different languages.\n\n### A Serialization Framework\n\nThrift has a set of protocols for serialization that may be used in different languages to serialize the generated structures created from the code generator.\n\n### An RPC Framework\n\nThrift has a framework to frame messages to send between clients and servers and to call application-defined functions when receiving messages in different languages.\n\nThere are several key goals for these components:\n* Ease of use:\n  Thrift takes care of the boilerplate of serialization and RPC and enables the developer to focus on the schema of the system's serializable types and on the interfaces of the system's RPC services.\n\n* Cross-language support:\n  Thrift enables intercommunication between different languages. For example, a Python client communicating with a C++ server.\n\n* Performance:\n  Thrift structures and services enable fast serialization and deserialization, and its RPC protocol and frameworks are designed with performance as a feature.\n\n* Backwards compatibility:\n  Thrift allows fields to be added to and removed from serializable types in a manner that preserves backward and forward compatibility.\n\n## Building\n\n### Dependencies\n\nOn Linux or MacOS (with [Homebrew](https://brew.sh/) installed) you can install\nsystem dependencies to avoid building them:\n\n    # Clone the repo\n    git clone https://github.com/facebook/fbthrift\n    # Install dependencies\n    cd fbthrift\n    ./build/fbcode_builder/getdeps.py install-system-deps --recursive fbthrift\n\nOn other platforms or if on Linux and without system dependencies `getdeps.py`\nwill mostly download and build them for you during the build step.\n\nSome of the dependencies `getdeps.py` uses and installs are:\n\n**System**:\n[Boost](https://www.boost.org),\n[CMake](https://cmake.org),\n[OpenSSLv1.0.2g](https://www.openssl.org),\n[PThreads](https://computing.llnl.gov/tutorials/pthreads),\n[Python](https://www.python.org/), and\n[Zlib](https://zlib.net)\n\n**External**:\n[{fmt}](https://github.com/fmtlib/fmt),\n[GFlags](https://github.com/gflags/gflags),\n[GLog](https://github.com/google/glog), and\n[GTest and GMock](https://github.com/google/googletest)\n\n**Facebook**:\n[Fizz](https://github.com/facebookincubator/fizz),\n[Folly](https://github.com/facebook/folly),\n[Wangle](https://github.com/facebook/wangle), and\n[Zstd](https://github.com/facebook/zstd)\n\nThe Thrift compiler only depends on Boost, CMake and {fmt}.\n\n### Build\n\n    # Clone the repo\n    git clone https://github.com/facebook/fbthrift\n    cd fbthrift\n    # Build, using system dependencies if available\n    ./build/fbcode_builder/getdeps.py --allow-system-packages build fbthrift\n\n`getdeps.py` will invoke cmake etc and put output in its scratch area (you can see in logs, and can override with `--scratch-path`):\n\n* `installed/fbthrift/bin/thrift1`: The Thrift compiler binary to generate client and\n  server code.\n* `installed/fbthrift/lib/libthriftcpp2.a`: Library for clients and servers.\n\nIf you want to invoke `cmake` again to iterate, there is a helpful `run_cmake.py` output in the scratch `build/fbthrift` directory.\n\nCMake options:\n\n* `THRIFT_COMPILER_ONLY`:\n  specifies whether to build only the Thrift compiler (OFF by default)\n* `enable_tests`:\n  specifies whether to enable tests\n\n### Thrift Files\n\nWhen using thrift and the CMake build system, include: `ThriftLibrary.cmake` in\nyour project. This includes the following macro to help building Thrift files:\n\n    thrift_library(\n      #file_name\n      #services\n      #language\n      #options\n      #file_path\n      #output_path\n    )\n\nThis generates a library called `file_name-<language>`. That is, for\n`Test.thrift` compiled as cpp2, it will generate the library `Test-cpp2`.\nThis should be added as a dependency to any source or header file that contains\nan include to generated code.\n\n## C++ Static Reflection\n\nInformation regarding C++ Static Reflection support can be found under the [static reflection library directory](thrift/lib/cpp2/reflection/), in the corresponding [`README` file](thrift/lib/cpp2/reflection/README.md).\n\n## C++ Server Metrics\n\nTo collect runtime stats from a Thrift server, e.g. the number of active requests/connections, the C++ Thrift server supports an observer API that installs callbacks at a set of specific execution points in the server.\n\nTo expose collected metrics out of the server process, one way is to use `fb303` interfaces, see [fb303 Github repo](https://github.com/facebook/fb303).\n\n## License\n\nFacebook Thrift is [Apache 2.0 licensed](LICENSE).\n"
        },
        {
          "name": "ThriftLibrary.cmake",
          "type": "blob",
          "size": 9.3857421875,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n#\n# Requirements:\n# Please provide the following two variables before using these macros:\n#   ${THRIFT1} - path/to/bin/thrift1\n#   ${THRIFTCPP2} - path/to/lib/thriftcpp2\n#\n\n#\n# thrift_object\n# This creates a object that will contain the source files and all the proper\n# dependencies to generate and compile thrift generated files\n#\n# Params:\n#   @file_name - The name of the thrift file\n#   @services  - A list of services that are declared in the thrift file\n#   @language  - The generator to use (cpp or cpp2)\n#   @options   - Extra options to pass to the generator\n#   @file_path - The directory where the thrift file lives\n#   @output_path - The directory where the thrift objects will be built\n#   @include_prefix - The last part of output_path, relative include prefix\n#\n# Output:\n#  A object file named `${file-name}-${language}-obj` to include into your\n#  project's library\n#\n# Notes:\n# If any of the fields is empty, it is still required to provide an empty string\n#\n# Usage:\n#   thrift_object(\n#     #file_name\n#     #services\n#     #language\n#     #options\n#     #file_path\n#     #output_path\n#     #include_prefix\n#   )\n#   add_library(somelib $<TARGET_OBJECTS:${file_name}-${language}-obj> ...)\n#\n\nmacro(thrift_object\n  file_name\n  services\n  language\n  options\n  file_path\n  output_path\n  include_prefix\n)\n  thrift_generate(\n    \"${file_name}\"\n    \"${services}\"\n    \"${language}\"\n    \"${options}\"\n    \"${file_path}\"\n    \"${output_path}\"\n    \"${include_prefix}\"\n    \"${ARGN}\"\n  )\n  bypass_source_check(${${file_name}-${language}-SOURCES})\n  add_library(\n    \"${file_name}-${language}-obj\"\n    OBJECT\n    ${${file_name}-${language}-SOURCES}\n  )\n  add_dependencies(\n    \"${file_name}-${language}-obj\"\n    \"${file_name}-${language}-target\"\n  )\n  message(\"Thrift will create the Object file : ${file_name}-${language}-obj\")\nendmacro()\n\n# thrift_library\n# Same as thrift object in terms of usage but creates the library instead of\n# object so that you can use to link against your library instead of including\n# all symbols into your library\n#\n# Params:\n#   @file_name - The name of the thrift file\n#   @services  - A list of services that are declared in the thrift file\n#   @language  - The generator to use (cpp or cpp2)\n#   @options   - Extra options to pass to the generator\n#   @file_path - The directory where the thrift file lives\n#   @output_path - The directory where the thrift objects will be built\n#   @include_prefix - The last part of output_path, relative include prefix\n#\n# Output:\n#  A library file named `${file-name}-${language}` to link against your\n#  project's library\n#\n# Notes:\n# If any of the fields is empty, it is still required to provide an empty string\n#\n# Usage:\n#   thrift_library(\n#     #file_name\n#     #services\n#     #language\n#     #options\n#     #file_path\n#     #output_path\n#     #include_prefix\n#   )\n#   add_library(somelib ...)\n#   target_link_libraries(somelib ${file_name}-${language} ...)\n#\n\nmacro(thrift_library\n  file_name\n  services\n  language\n  options\n  file_path\n  output_path\n  include_prefix\n)\n  thrift_object(\n    \"${file_name}\"\n    \"${services}\"\n    \"${language}\"\n    \"${options}\"\n    \"${file_path}\"\n    \"${output_path}\"\n    \"${include_prefix}\"\n    \"${ARGN}\"\n  )\n  add_library(\n    \"${file_name}-${language}\"\n    $<TARGET_OBJECTS:${file_name}-${language}-obj>\n  )\n  target_link_libraries(\"${file_name}-${language}\" ${THRIFTCPP2})\n  message(\"Thrift will create the Library file : ${file_name}-${language}\")\nendmacro()\n\n#\n# bypass_source_check\n# This tells cmake to ignore if it doesn't see the following sources in\n# the library that will be installed. Thrift files are generated at compile\n# time so they do not exist at source check time\n#\n# Params:\n#   @sources - The list of files to ignore in source check\n#\n\nmacro(bypass_source_check sources)\n  set_source_files_properties(\n    ${sources}\n    PROPERTIES GENERATED TRUE\n  )\nendmacro()\n\n#\n# thrift_generate\n# This is used to codegen thrift files using the thrift compiler\n# Supports library names that differ from the file name (to handle two libraries\n# with the same filename on disk (in different folders))\n# Params:\n#   @file_name - Input file name. Will be used for naming the CMake\n#       target if TARGET_NAME_BASE is not specified.\n#   @services  - A list of services that are declared in the thrift file\n#   @language  - The generator to use (cpp, cpp2 or py3)\n#   @options   - Extra options to pass to the generator\n#   @output_path - The directory where the thrift file lives\n#   @include_prefix - Prefix to use for thrift includes in generated sources\n#   @TARGET_NAME_BASE (optional) - name used for target instead of real filename\n#   @THRIFT_INCLUDE_DIRECTORIES (optional) path to thrift include directories\n#\n# Output:\n#  file-language-target     - A custom target to add a dependency\n#  ${file-language-HEADERS} - The generated Header Files.\n#  ${file-language-SOURCES} - The generated Source Files.\n#\n# Notes:\n# If any of the fields is empty, it is still required to provide an empty string\n#\n# When using file_language-SOURCES it should always call:\n#   bypass_source_check(${file_language-SOURCES})\n# This will prevent cmake from complaining about missing source files\n#\nmacro(thrift_generate\n  file_name\n  services\n  language\n  options\n  file_path\n  output_path\n  include_prefix\n)\n  cmake_parse_arguments(THRIFT_GENERATE   # Prefix\n    \"\" # Options\n    \"TARGET_NAME_BASE\" # One Value args\n    \"THRIFT_INCLUDE_DIRECTORIES\" # Multi-value args\n    \"${ARGN}\")\n\n  set(source_file_name ${file_name})\n  set(target_file_name ${file_name})\n  set(thrift_include_directories)\n  foreach(dir ${THRIFT_GENERATE_THRIFT_INCLUDE_DIRECTORIES})\n    list(APPEND thrift_include_directories \"-I\" \"${dir}\")\n  endforeach()\n  if(DEFINED THRIFT_GENERATE_TARGET_NAME_BASE\n     AND NOT THRIFT_GENERATE_TARGET_NAME_BASE STREQUAL \"\")\n    set(target_file_name ${THRIFT_GENERATE_TARGET_NAME_BASE})\n  endif()\n\n  set(\"${target_file_name}-${language}-HEADERS\"\n    ${output_path}/gen-${language}/${source_file_name}_constants.h\n    ${output_path}/gen-${language}/${source_file_name}_data.h\n    ${output_path}/gen-${language}/${source_file_name}_metadata.h\n    ${output_path}/gen-${language}/${source_file_name}_types.h\n    ${output_path}/gen-${language}/${source_file_name}_types.tcc\n  )\n  set(\"${target_file_name}-${language}-SOURCES\"\n    ${output_path}/gen-${language}/${source_file_name}_constants.cpp\n    ${output_path}/gen-${language}/${source_file_name}_data.cpp\n    ${output_path}/gen-${language}/${source_file_name}_types.cpp\n  )\n  if(\"${options}\" MATCHES \"layouts\")\n    set(\"${target_file_name}-${language}-SOURCES\"\n      ${${target_file_name}-${language}-SOURCES}\n      ${output_path}/gen-${language}/${source_file_name}_layouts.cpp\n    )\n  endif()\n  if(NOT \"${options}\" MATCHES \"no_metadata\")\n    set(\"${target_file_name}-${language}-SOURCES\"\n      ${${target_file_name}-${language}-SOURCES}\n      ${output_path}/gen-${language}/${source_file_name}_metadata.cpp\n    )\n  endif()\n  foreach(service ${services})\n    set(\"${target_file_name}-${language}-HEADERS\"\n      ${${source_file_name}-${language}-HEADERS}\n      ${output_path}/gen-${language}/${service}.h\n      ${output_path}/gen-${language}/${service}.tcc\n      ${output_path}/gen-${language}/${service}AsyncClient.h\n      ${output_path}/gen-${language}/${service}_custom_protocol.h\n    )\n    set(\"${target_file_name}-${language}-SOURCES\"\n      ${${source_file_name}-${language}-SOURCES}\n      ${output_path}/gen-${language}/${service}.cpp\n      ${output_path}/gen-${language}/${service}AsyncClient.cpp\n    )\n  endforeach()\n  if(\"${include_prefix}\" STREQUAL \"\")\n    set(include_prefix_text \"\")\n  else()\n    set(include_prefix_text \"include_prefix=${include_prefix}\")\n    if(NOT \"${options}\" STREQUAL \"\")\n      set(include_prefix_text \",${include_prefix_text}\")\n    endif()\n  endif()\n  set(gen_language ${language})\n  if(\"${language}\" STREQUAL \"cpp2\")\n    set(gen_language \"mstch_cpp2\")\n  elseif(\"${language}\" STREQUAL \"py3\")\n    set(gen_language \"mstch_py3\")\n    file(WRITE \"${output_path}/gen-${language}/${source_file_name}/__init__.py\")\n  endif()\n  add_custom_command(\n    OUTPUT ${${target_file_name}-${language}-HEADERS}\n      ${${target_file_name}-${language}-SOURCES}\n    COMMAND ${THRIFT1}\n      --gen \"${gen_language}:${options}${include_prefix_text}\"\n      -o ${output_path}\n      ${thrift_include_directories}\n      \"${file_path}/${source_file_name}.thrift\"\n    DEPENDS\n      ${THRIFT1}\n      \"${file_path}/${source_file_name}.thrift\"\n    COMMENT \"Generating ${target_file_name} files. Output: ${output_path}\"\n  )\n  add_custom_target(\n    ${target_file_name}-${language}-target ALL\n    DEPENDS ${${language}-${language}-HEADERS}\n      ${${target_file_name}-${language}-SOURCES}\n  )\n  install(\n    DIRECTORY gen-${language}\n    DESTINATION include/${include_prefix}\n    FILES_MATCHING PATTERN \"*.h\")\n  install(\n    DIRECTORY gen-${language}\n    DESTINATION include/${include_prefix}\n    FILES_MATCHING PATTERN \"*.tcc\")\nendmacro()\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "thrift",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}