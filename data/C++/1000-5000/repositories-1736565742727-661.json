{
  "metadata": {
    "timestamp": 1736565742727,
    "page": 661,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zouxiaohang/TinySTL",
      "stars": 2361,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.1806640625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n\n[Dd]ebug/\n[Rr]elease/\nx64/\nbuild/\n[Bb]in/\n[Oo]bj/\n\n# Enable \"build/\" folder in the NuGet Packages folder since NuGet packages use it for MSBuild targets\n!packages/*/build/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.log\n*.scc\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n*.ncrunch*\n.*crunch*.local.xml\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.Publish.xml\n\n# NuGet Packages Directory\n## TODO: If you have NuGet Package Restore enabled, uncomment the next line\n#packages/\n\n# Windows Azure Build Output\ncsx\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.[Pp]ublish.xml\n*.pfx\n*.publishsettings\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\nApp_Data/*.mdf\nApp_Data/*.ldf\n\n\n#LightSwitch generated files\nGeneratedArtifacts/\n_Pvt_Extensions/\nModelManifest.xml\n\n# =========================\n# Windows detritus\n# =========================\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Mac desktop service store files\n.DS_Store\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.5810546875,
          "content": "TinySTL\n=======\n采用C++11实现一款简易的STL标准库，既是C++STL的一个子集（裁剪了一些容器和算法）又是一个超集（增加了一些容器和算法）\n\n目的：练习数据结构与算法和C++ Template编程\n\n编译环境：VS2013及以上版本\n\n##开发计划：\n  * STL的几大基本组件，如string、vector、list、deque、set、map、unordered_\\*等\n  * STL算法库中的大部分算法\n  * circular buffer\n  * bitmap\n  * skip list\n  * binary search tree\n  * AVL tree\n  * rbtree\n  * segment tree\n  * splay tree\n  * rope\n  * Van Emde Boas tree\n  * treap\n  * B-tree\n  * trie\n  * suffix array/tree\n  * Disjoint-set data structure\n  * k-d tree\n  * R-tree\n  * Matrix\n  * Graph\n  * bloom filter\n\n##完成进度：\n* STL的几大基本组件\n    * type traits：100%  \n    * 空间配置器：100%\n    * iterator traits：100%\n    * reverse_iterator：100%\n    * vector：100%\n    * string：100%\n    * priority_queue：100%\n    * stack：100%\n    * deque：100%\n    * queue：100%\n    * pair：100%\n    * list：100%\n\t* unordered_set：100%\n\t* unique_ptr：100%\n\t* shared_ptr：100%\n\t* cow_ptr：100%\n* STL Algorithms:  \n    * fill：100% \n    * fill_n：100% \n    * find：100%\n    * is_heap：100%\n    * min、max：100%\n    * make_heap：100%\n    * pop_heap：100%\n    * push_heap：100%\n    * sort_heap：100%\n    * swap：100%\n    * all_of：100%\n    * any_of：100%\n    * none_of：100%\n    * find_if：100%\n    * find_if_not：100%\n    * adjacent_find：100%\n    * count：100%\n    * count_if：100%\n    * mismatch：100%\n    * equal：100%\n\t* is_permutation：100%\n\t* search：100%\n\t* advance：100%\n\t* sort：100%\n\t* generate：100%\n\t* generate_n：100%\n\t* distance：100%\n\t* copy：100%\n* 其他组件：\n    * circular_buffer：100%   \n    * bitmap：100%\n    * binary_search_tree：100%\n    * avl_tree：100%\n\t* suffix_array：100%\n\t* directed_graph：100%\n\t* trie tree：100%\n\t* Disjoint-set data structure：100%\n\n##TinySTL单元测试(原单元测试代码逐步)：\n  * pair：100%\n  * algorithm：20%\n  * vector：100%\n  * string：100%\n  * priority_queue：100%\n  * suffix_array：100%\n  * queue：100%\n  * stack：100%\n  * bitmap：100%\n  * circular_buffer：100%\n  * deque：100%\n  * list：100%\n  * binary_search_tree：100%\n  * avl_tree：100%\n  * unordered_set：100%\n  * directed_graph：100%\n  * trie tree：100%\n  * unique_ptr：100%\n  * shared_ptr：100%\n  * Disjoint-set data structure：100%\n\n#TinySTL性能测试:\n###测试环境：Windows 7 && VS2013 && release模式\n###测试结果：\n####(1):vector&lt;int>\n\n    //std::vector<int> vec;\n    TinySTL::vector<int> vec;\n\tProfilerInstance::start();\n\tint i = 0;\n\tfor (; i != 10000; ++i){\n\t\tvec.push_back(i);\n\t}\n\tProfilerInstance::finish();\n\tProfilerInstance::dumpDuringTime();\n    \n|container|quantity|time(ms)|  \n|---------|--------|--------|  \n|TinySTL::vector&lt;int>|10万|2|  \n|TinySTL::vector&lt;int>|100万|11|  \n|TinySTL::vector&lt;int>|1000万|129|  \n|std::vector&lt;int>|10万|6|  \n|std::vector&lt;int>|100万|16|  \n|std::vector&lt;int>|1000万|210|    \n####(2):vector&lt;string>\n\n    //std::vector<std::string> vec;\n    TinySTL::vector<std::string> vec;\n\tProfilerInstance::start();\n\tint i = 0;\n\tfor (; i != 100000; ++i){\n\t\tvec.push_back(std::string(\"zouxiaohang\"));\n\t}\n\tProfilerInstance::finish();\n\tProfilerInstance::dumpDuringTime();\n    \n|container|quantity|time(ms)|  \n|---------|--------|--------|  \n|TinySTL::vector&lt;string>|10万|18|  \n|TinySTL::vector&lt;string>|100万|181|  \n|TinySTL::vector&lt;string>|1000万|2372|  \n|std::vector&lt;string>|10万|29|  \n|std::vector&lt;string>|100万|232|  \n|std::vector&lt;string>|1000万|1972|\n####(3):circular_buffer&lt;int, N>\n\n    TinySTL::circular_buffer<int, 10000> cb(10000, 0);\n    //boost::circular_buffer<int> cb(10000, 0);\n\tProfilerInstance::start();\n\tfor (int i = 0; i != 10000000; ++i){\n\t\tcb.push_back(i);\n\t}\n\tProfilerInstance::finish();\n\tProfilerInstance::dumpDuringTime();\n    \n|container|quantity|time(ms)|  \n|---------|--------|--------|  \n|TinySTL::circular_buffer|1000万|75|  \n|TinySTL::circular_buffer|10000万|604|  \n|TinySTL::circular_buffer|100000万|5936|  \n|boost::circular_buffer|1000万|22|  \n|boost::circular_buffer|10000万|252|  \n|boost::circular_buffer|100000万|2241|  \n####(4):题目：利用bitmap找出str中未出现的字母  \n\n    std::string str(\"abcdefghijklmnpqrstuvwxyz\");\n    TinySTL::bitmap<26> bm;\n\tfor (auto it = str.cbegin(); it != str.cend(); ++it){\n\t\tbm.set(*it - 'a');\n\t}\n\tcout << bm << endl;\n\tcout << bm.size() << endl;\n\tfor (int i = 0; i != 26; ++i){\n\t\tif (!bm.test(i))\n\t\t\tcout << \"字母\" << (char)('a' + i) << \"没出现！！！\" << endl;\n\t}\n输出结果：  \n\n    111111111111110111111111111000000\n    32  \n    字母o没出现！！！\n    \n####(5):string\n\n    //std::string str;\n    TinySTL::string str;\n\tProfilerInstance::start();\n\tint i = 0;\n\tfor (; i != 1000000; ++i){\n\t\tstr.push_back('x');\n\t}\n\tProfilerInstance::finish();\n\tProfilerInstance::dumpDuringTime();\n    \n|container|quantity|time(ms)|  \n|---------|--------|--------|  \n|TinySTL::string|100万|7|  \n|TinySTL::string|1000万|39|  \n|TinySTL::string|10000万|484|  \n|std::string|100万|37|  \n|std::string|1000万|229|  \n|std::string|10000万|1965|  \n\n####(6):priority_queue&lt;int>\n\n    //std::priority_queue<int> pq;\n    TinySTL::priority_queue<int> pq;\n\tProfilerInstance::start();\n\tint i = 0;\n\tfor (; i != 100000; ++i){\n\t\tpq.push(i);\n\t}\n\tProfilerInstance::finish();\n\tProfilerInstance::dumpDuringTime();\n    \n|container|quantity|time(ms)|  \n|---------|--------|--------|  \n|TinySTL::priority_queue&lt;int>|10万|13|  \n|TinySTL::priority_queue&lt;int>|100万|97|  \n|TinySTL::priority_queue&lt;int>|1000万|1032|  \n|std::priority_queue&lt;int>|10万|12|  \n|std::priority_queue&lt;int>|100万|67|  \n|std::priority_queue&lt;int>|1000万|752|  \n\n    TinySTL::vector<int> v;\n    int i = 0;\n\tfor (; i != 100000; ++i){\n\t\tv.push_back(i);\n\t}\n\t//std::priority_queue<int> pq(v.begin(), v.end());\n\tTinySTL::priority_queue<int> pq(v.begin(), v.end());\n\tProfilerInstance::start();\n\tfor (i = 0; i != 100000; ++i){\n\t\tpq.pop();\n\t}\n\tProfilerInstance::finish();\n\tProfilerInstance::dumpDuringTime();\n    \n|container|quantity|time(ms)|  \n|---------|--------|--------|  \n|TinySTL::priority_queue&lt;int>|10万|19|  \n|TinySTL::priority_queue&lt;int>|100万|137|  \n|TinySTL::priority_queue&lt;int>|1000万|1532|  \n|std::priority_queue&lt;int>|10万|7|  \n|std::priority_queue&lt;int>|100万|92|  \n|std::priority_queue&lt;int>|1000万|1214|  \n\n####(7):binary_search_tree&lt;string>\n\n    ifstream f;\n\t//char buff[256] = { 0 };\n\tstd::string word;\n\tf.open(\"C:\\\\Users\\\\zxh\\\\Desktop\\\\text.txt\");\n\tTinySTL::vector<TinySTL::string> v;\n\twhile (f.good()){\n\t\tf >> word;\n\t\t//std::copy(word.begin(), word.end(), buff);\n\t\t//v.push_back(TinySTL::string(buff, buff + word.size()));\n\t\tv.push_back(word);\n\t}\n\tTinySTL::binary_search_tree<TinySTL::string> sbst;\n\tProfilerInstance::start();\n\tfor (const auto& word : v){\n\t\tsbst.insert(word);\n\t}\n\tProfilerInstance::finish();\n\tProfilerInstance::dumpDuringTime();\n\tf.close();\n    \n|container|quantity|time(ms)|  \n|---------|--------|--------|  \n|TinySTL::binary_search_tree&lt;string>|44067|16|  \n|TinySTL::binary_search_tree&lt;string>|169664|64|  \n|TinySTL::binary_search_tree&lt;string>|438230|277|   \n\n####(8):deque&lt;int>\n\n    //std::deque<int> dq;\n    TinySTL::deque<int> dq;\n\tProfilerInstance::start();\n\tconst int max = 10000000;\n\tint i = 0;\n\tfor (; i != max / 2; ++i){\n\t\tdq.push_front(i);\n\t}\n\tfor (; i != max; ++i){\n\t\tdq.push_back(i);\n\t}\n\tProfilerInstance::finish();\n\tProfilerInstance::dumpDuringTime();\n    \n|container|quantity|time(ms)|  \n|---------|--------|--------|  \n|TinySTL::deque&lt;int>|10万|15|  \n|TinySTL::deque&lt;int>|100万|78|  \n|TinySTL::deque&lt;int>|1000万|1186|  \n|std::deque&lt;int>|10万|90|  \n|std::deque&lt;int>|100万|1087|  \n|std::deque&lt;int>|1000万|4835|  \n#####ps：这个性能差距的原因1是内部实现的机制不同，我的deque是预先分配内存因此相同条件下占用的内存更多，而stl的deque是需要的时候再分配，更加节省内存；2是stl的deque实现了更多更灵活的插入删除操作，我只是实现了在头尾的插入和删除\n\n####(9):avl_tree&lt;int> \n    TinySTL::binary_search_tree<int> bst;\n    TinySTL::avl_tree<int> avlt;\n\tfor (int i = 0; i != 10000; ++i){\n\t\tavlt.insert(i);\n\t\tbst.insert(i);\n\t}\n\tcout << \"binary_search_tree height = \" << bst.height() << endl;\n\tcout << \"avl_tree height = \" << avlt.height() << endl;\n输出结果：  \n\n    binary_search_tree height = 10000\n    avl_tree height = 14\n\n\n####(10):list&lt;int>\n\n    TinySTL::list<int> list;\n    //std::list<int> list;\n\tconst size_t max = 100000;\n\tProfilerInstance::start();\n\tfor (size_t i = 0; i != max; ++i)\n\t\tlist.push_back(i);\n\tProfilerInstance::finish();\n\tProfilerInstance::dumpDuringTime();\n    \n|container|quantity|time(ms)|  \n|---------|--------|--------|  \n|TinySTL::list&lt;int>|10万|4|  \n|TinySTL::list&lt;int>|100万|33|  \n|TinySTL::list&lt;int>|1000万|286|  \n|std::list&lt;int>|10万|189|  \n|std::list&lt;int>|100万|1774|  \n|std::list&lt;int>|1000万|17571|  \n\n\n####(11):list&lt;int>::sort()\n\n    TinySTL::list<int> list1;\n    std::list<int> list2;\n\tstd::default_random_engine dre;\n\tstd::uniform_int_distribution<int> id;\n\tconst size_t max = 10000;\n\tfor (int i = 0; i != max; ++i){\n\t\tauto n = id(dre);\n\t\tlist1.push_back(n);\n\t\tlist2.push_back(n);\n\t}\n\tdouble cost1 = 0.0, cost2 = 0.0;\n\tfor (int i = 0; i != 100; ++i){\n\t\tProfilerInstance::start();\n\t\tlist1.sort();//TinySTL::list<int>\n\t\tProfilerInstance::finish();\n\t\tcost1 += ProfilerInstance::millisecond();\n\n\t\tProfilerInstance::start();\n\t\tlist2.sort();//std::list<int>\n\t\tProfilerInstance::finish();\n\t\tcost2 += ProfilerInstance::millisecond();\n\t}\n\tcout << \"TinySTL time: \" << cost1 / 100 << \"ms\" << endl;\n\tcout << \"std time: \" << cost2 / 100 << \"ms\" << endl;\n    \n|container|quantity|time(ms)|  \n|---------|--------|--------|  \n|TinySTL::list&lt;int>|1万|0.88|  \n|TinySTL::list&lt;int>|10万|17.621|  \n|TinySTL::list&lt;int>|100万|591.354|  \n|std::list&lt;int>|1万|1.25|  \n|std::list&lt;int>|10万|35.692|  \n|std::list&lt;int>|100万|665.128|  \n\n\n####(12):suffix_array\n\n    char arr[] = { 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'b' };\n    TinySTL::suffix_array sa(arr, 8);\n\tauto suffixArray = sa.suffixArray();\n\tauto rankArray = sa.rankArray();\n\tauto heightArray = sa.heightArray();\n\n\tTinySTL::Test::print_container(suffixArray, \"suffixArray\");\n\tTinySTL::Test::print_container(rankArray, \"rankArray\");\n\tTinySTL::Test::print_container(heightArray, \"heightArray\");\n    \n![image](https://raw.githubusercontent.com/zouxiaohang/TinySTL/master/TinySTL/ScreenShots/suffix_array.png)\n\n\n\n\n####(13):unordered_set&lt;int>\n\n    TinySTL::Unordered_set<int> ust(10);\n\t//std::unordered_set<int> ust(10);\n\tconst size_t insert_count = 1000000;\n\tconst uint64_t query_count = 100000000;\n\t//calculate total insert time\n\tProfilerInstance::start();\n\tfor (size_t i = 0; i != insert_count; ++i){\n\t\tust.insert(i);//per insert time\n\t}\n\tProfilerInstance::finish();\n\tProfilerInstance::dumpDuringTime();\n\n\t//calculate total query time\n\tProfilerInstance::start();\n\tfor (uint64_t i = 0; i != query_count; ++i){\n\t\tust.count(i);//per query time\n\t}\n\tProfilerInstance::finish();\n\tProfilerInstance::dumpDuringTime();\n    \n|container|quantity|insert time(ms)|query time(ms)|    \n|---------|--------|--------|--------|    \n|TinySTL::unordered_set&lt;int>|1万/1亿|8|97|      \n|TinySTL::unordered_set&lt;int>|10万/10亿|139|1000|    \n|TinySTL::unordered_set&lt;int>|100万/100亿|1214|9546|    \n|std::unordered_set&lt;int>|1万/1亿|64|101|    \n|std::unordered_set&lt;int>|10万/10亿|884|953|    \n|std::unordered_set&lt;int>|100万/100亿|2781|9682|   \n\n\n\n\n####(14):sort\n\n    std::random_device rd;\n\tconst int len = 10000000;\n\tint arr[len];\n\tstd::generate(std::begin(arr), std::end(arr), [&rd](){return rd(); });\n\tProfilerInstance::start();\n\tTinySTL::sort(std::begin(arr), std::end(arr));\n\t//std::sort(std::begin(arr), std::end(arr));\n\tProfilerInstance::finish();\n\tProfilerInstance::dumpDuringTime();\n    \n|algorithm|quantity|time(ms)|  \n|---------|--------|--------|  \n|TinySTL::sort|10万|11|  \n|TinySTL::sort|100万|133|  \n|TinySTL::sort|1000万|1547|  \n|std::sort|10万|13|  \n|std::sort|100万|147|  \n|std::sort|1000万|1730| \n\n\n\n\n####(15):directed_graph\n\n    template<class Index, class Value>\n\tusing dGraph = TinySTL::directed_graph < Index, Value > ;\n\tdGraph<int, int> g;\n\tdGraph<int, int>::nodes_set_type set1, set2, set3;\n\tset1.push_back(g.make_node(1, 11));\n\tset1.push_back(g.make_node(2, 22));\n\tset1.push_back(g.make_node(3, 33));\n\tg.add_node(g.make_node(0, 0), set1);\n\n\tset2.push_back(g.make_node(5, 55));\n\tset2.push_back(g.make_node(6, 66));\n\tset2.push_back(g.make_node(7, 77));\n\tg.add_node(g.make_node(1, 11), set2);\n\n\tset3.push_back(g.make_node(12, 1212));\n\tset3.push_back(g.make_node(13, 1313));\n\tset3.push_back(g.make_node(14, 1414));\n\tg.add_node(7, set3);\n\n\tg.make_edge(12, 2);\n\tg.make_edge(12, 3);\n\tg.make_edge(12, 0);\n\tstd::cout << \"graph after add nodes:\" << std::endl;\n\tstd::cout << g.to_string();\n\n\tauto func = [](const dGraph<int, int>::node_type& node){\n\t\tstd::cout << \"[\" << node.first << \",\" << node.second << \"]\" << std::endl;\n\t};\n\tstd::cout << \"graph DFS from node(1, 11):\" << std::endl;\n\tg.DFS(1, func);\n\tstd::cout << \"graph BFS from node(1, 11):\" << std::endl;\n\tg.BFS(1, func);\n\n\tstd::cout << \"graph after delete node(7, 77):\" << std::endl;\n\tg.delete_node(dGraph<int, int>::node_type(7, 77));\n\tstd::cout << g.to_string();\n    \n![image](https://raw.githubusercontent.com/zouxiaohang/TinySTL/master/TinySTL/ScreenShots/graph1.png)  \n![image](https://raw.githubusercontent.com/zouxiaohang/TinySTL/master/TinySTL/ScreenShots/graph_dfs.png)  \n![image](https://raw.githubusercontent.com/zouxiaohang/TinySTL/master/TinySTL/ScreenShots/graph_bfs.png)  \n![image](https://raw.githubusercontent.com/zouxiaohang/TinySTL/master/TinySTL/ScreenShots/graph2.png)\n\n\n\n\n\n####(16):trie tree\n\n    TinySTL::trie_tree t;\n\tstd::ifstream in;\n\tin.open(\"C:\\\\Users\\\\zxh\\\\Desktop\\\\trie_tree_test.txt\");\n\tstd::vector<std::string> v;\n\tstd::string s;\n\twhile (in){\n\t\tin >> s;\n\t\tv.push_back(s);\n\t}\n\tProfilerInstance::start();\n\tfor (const auto& str : v){\n\t\tt.insert(TinySTL::string(str.data()));\n\t}\n\tProfilerInstance::finish();\n\tstd::cout << \"build trie tree costs \" << ProfilerInstance::millisecond() << \"ms\" << std::endl;\n\n\tProfilerInstance::start();\n\tauto res = t.get_word_by_prefix(\"v\");\n\tProfilerInstance::finish();\n\tstd::cout << \"get word by prefix \\\"v\\\" costs \" << ProfilerInstance::millisecond() << \"ms\" << std::endl;\n\tauto i = 0;\n\tfor (const auto& str : res){\n\t\t++i;\n\t\tif (i % 10 == 0) std::cout << std::endl;\n\t\tstd::cout << str << \" \";\n\t}\n\tstd::cout << std::endl;\n    \n![image](https://raw.githubusercontent.com/zouxiaohang/TinySTL/master/TinySTL/ScreenShots/trie_tree.png)  \n\n\n\n####(17):shared_ptr\n\n    shared_ptr<string> sp1(new string(\"hello\"));\n\tassert(sp1.use_count() == 1);\n\tassert(*sp1 == \"hello\");\n\tsp1->append(\" world\");\n\tassert(*sp1 == \"hello world\");\n\n\t{\n\t\tauto sp2 = sp1;\n\t\tassert(sp1.use_count() == 2);\n\t}\n\tassert(sp1.use_count() == 1);\n\n\n\n####(18):unique_ptr\n\n    auto up = make_unique<string>(10, '0');\n\tup->append(\"111\");\n\tassert(*up == \"0000000000111\");\n\n\tup.release();\n\tassert(up == nullptr);\n\n\tup.reset(new string(\"hello\"));\n\tassert(*up == \"hello\");\n\n\n\n####(19):cow_ptr\n\n    cow_ptr<string> cp1 = make_cow<string>(\"zouxiaohang\");\n\tauto cp2 = cp1, cp3 = cp1;\n\tassert(cp1 == cp2 && cp2 == cp3);\n\tassert(*cp1 == *cp2 && *cp2 == *cp3 && *cp3 == \"zouxiaohang\");\n\n\tstring s = *cp2;//read\n\tassert(s == \"zouxiaohang\");\n\tassert(cp1 == cp2 && cp2 == cp3);\n\tassert(*cp1 == *cp2 && *cp2 == *cp3 && *cp3 == \"zouxiaohang\");\n\n\t*cp2 = (\"C++\");//write\n\tassert(*cp1 == *cp3 && *cp3 == \"zouxiaohang\");\n\tassert(*cp2 == \"C++\");\n\n\n\n\n####(19):union-find set\n\n    uf_set<10> uf;\n\tuf.Union(0, 1);\n\tuf.Union(2, 3);\n\tuf.Union(3, 1);\n\tassert(uf.Find(0) == uf.Find(2));\n    \n \n    \n"
        },
        {
          "name": "TinySTL.sln",
          "type": "blob",
          "size": 0.9501953125,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Express 2013 for Windows Desktop\nVisualStudioVersion = 12.0.21005.1\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"TinySTL\", \"TinySTL\\TinySTL.vcxproj\", \"{8B728502-8B31-4983-B9C3-13D8CCA52181}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Win32 = Debug|Win32\n\t\tRelease|Win32 = Release|Win32\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{8B728502-8B31-4983-B9C3-13D8CCA52181}.Debug|Win32.ActiveCfg = Debug|Win32\n\t\t{8B728502-8B31-4983-B9C3-13D8CCA52181}.Debug|Win32.Build.0 = Debug|Win32\n\t\t{8B728502-8B31-4983-B9C3-13D8CCA52181}.Release|Win32.ActiveCfg = Release|Win32\n\t\t{8B728502-8B31-4983-B9C3-13D8CCA52181}.Release|Win32.Build.0 = Release|Win32\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "TinySTL",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}