{
  "metadata": {
    "timestamp": 1736565880691,
    "page": 839,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mitsuba-renderer/mitsuba2",
      "stars": 2058,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 3.7080078125,
          "content": "version: 1.0.{build}\nimage:\n- Visual Studio 2019\ntest: off\nskip_branch_with_pr: true\nplatform:\n- x64\nbuild:\n  parallel: true\n  #cache:\n  #- C:\\Miniconda-x64\\pkgs\n  #- C:\\Miniconda36-x64\\pkgs\nenvironment:\n  matrix:\n    - PYTHON_VERSION: 2.7\n      MINICONDA: C:\\Miniconda-x64\n      BUILD_MODE: Debug\n    - PYTHON_VERSION: 3.5\n      MINICONDA: C:\\Miniconda35-x64\n      BUILD_MODE: Release\n  fast_finish: true\n  priv_key:\n    secure: 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\ninstall:\n- ps: |\n    $fileContent = \"-----BEGIN RSA PRIVATE KEY-----`n\"\n    $fileContent += $env:priv_key.Replace(' ', \"`n\")\n    $fileContent += \"`n-----END RSA PRIVATE KEY-----`n\"\n    Set-Content c:\\users\\appveyor\\.ssh\\id_rsa $fileContent\n    (Get-Content .gitmodules).replace('https://github.com/mitsuba-renderer/enoki', 'git@github.com:mitsuba-renderer/enoki.git') | Set-Content .gitmodules\n    git submodule -q update --init\n    (Get-Content ext/nanogui/.gitmodules).replace('https://github.com/mitsuba-renderer/enoki', 'git@github.com:mitsuba-renderer/enoki.git') | Set-Content ext/nanogui/.gitmodules\n    git submodule -q update --init --recursive\n- ps: |\n      $env:PATH = \"$env:MINICONDA;$env:MINICONDA\\Scripts;$env:PATH\"\n      $env:PYTHONHOME = \"$env:MINICONDA\"\n      conda update -y -q conda\n      conda install -y -q pytest numpy scipy\nbuild_script:\n- set PATH = \"%MINICONDA%;%MINICONDA%\\Scripts;%PATH%\"\n- cmake -G \"Visual Studio 16 2019\" -A \"x64\" -DCMAKE_SUPPRESS_REGENERATION=1 .\n- set MSBuildLogger=\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n- cmake --build . --config %BUILD_MODE% -- /v:m /m /logger:%MSBuildLogger%\n- setpath.bat\n- python -m pytest -v\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.4208984375,
          "content": "---\nLanguage:        Cpp\nAccessModifierOffset: -4\nAlignConsecutiveAssignments: true\nAlignEscapedNewlinesLeft: false\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: false\nBinPackParameters: true\nBreakBeforeBinaryOperators: false\nBreakBeforeBraces: Attach\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nColumnLimit:     80\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: false\nDerivePointerBinding: false\nExperimentalAutoDetectBinPacking: false\nIndentCaseLabels: true\nIndentFunctionDeclarationAfterType: false\nIndentWidth:     4\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 60\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerBindsToType: false\nSpaceAfterControlStatementKeyword: true\nSpaceAfterCStyleCast: true\nSpaceBeforeAssignmentOperators: true\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nStandard:        Cpp11\nTabWidth:        4\nUseTab:          Never\n...\n\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.9619140625,
          "content": "# CMake\n/CMakeCache.txt\n/CPackConfig.cmake\n/CPackSourceConfig.cmake\nCMakeFiles\ncmake_install.cmake\nCTestTestfile.cmake\nCPackConfig.cmake\nCPackSourceConfig.cmake\nMakefile\n\n# Ninja\n/.ninja_deps\n/.ninja_log\n*.ninja\n\n# Miscellaneous;\n/ext_build\n/build*\n/dist\n*.dir\n*~\n\\.DS_Store\nTesting\n/.cache\n/.ipynb_checkpoints\n/.pytest_cache\nlibrender_ptx.h\nlibrender_ptx.cpp\n\n# SublimeText\n*.sublime-project\n*.sublime-workspace\n\n# Visual Studio / VS Code\n**/.vscode/*\n*.vcxproj\nmitsuba.sdf\nmitsuba.sln\nmitsuba.opensdf\nmitsuba.VC.VC.opendb\nmitsuba.VC.db\nDebug\nRelease\n*.user\n*.filters\n/.vs\n/x64\n\n# Python\n__pycache__\n*.pyc\n/.pytest_cache\n\n# Binaries\n*.dylib\n*.so\n*.dll\n/src/mitsuba/mitsuba\n/src/mtsgui/mtsgui\n/src/libui/libui_resources.*\n/html\n\n# Docs\ndocs/generated/plugins.rst\ndocs/_build/\n\n# Config\ninclude/mitsuba/core/config.h\nsrc/python/config.py\nmitsuba.conf\n\n# Ignore compilation commands (Generated by CMake if\n# -DCMAKE_EXPORT_COMPILE_COMMANDS=1 is specified)\ncompile_commands.json\n/.clangd\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.26953125,
          "content": "[submodule \"ext/tbb\"]\n    path = ext/tbb\n    url = https://github.com/wjakob/tbb\n[submodule \"ext/zlib\"]\n    path = ext/zlib\n    url = https://github.com/mitsuba-renderer/zlib\n[submodule \"ext/libpng\"]\n    path = ext/libpng\n    url = https://github.com/mitsuba-renderer/libpng.git\n[submodule \"ext/libjpeg\"]\n    path = ext/libjpeg\n    url = https://github.com/mitsuba-renderer/libjpeg\n[submodule \"ext/openexr\"]\n    path = ext/openexr\n    url = https://github.com/mitsuba-renderer/openexr\n[submodule \"ext/tinyformat\"]\n    path = ext/tinyformat\n    url = https://github.com/mitsuba-renderer/tinyformat\n[submodule \"ext/pugixml\"]\n    path = ext/pugixml\n    url = https://github.com/mitsuba-renderer/pugixml\n[submodule \"ext/asmjit\"]\n    path = ext/asmjit\n    url = https://github.com/mitsuba-renderer/asmjit\n[submodule \"ext/pybind11\"]\n    path = ext/pybind11\n    url = https://github.com/pybind/pybind11\n[submodule \"ext/enoki\"]\n    path = ext/enoki\n    url = https://github.com/mitsuba-renderer/enoki\n[submodule \"ext/nanogui\"]\n    path = ext/nanogui\n    url = https://github.com/mitsuba-renderer/nanogui\n[submodule \"resources/data\"]\n    path = resources/data\n    url = https://github.com/mitsuba-renderer/mitsuba-data\n[submodule \"ext/embree\"]\n    path = ext/embree\n    url = https://github.com/wjakob/embree\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 22.6962890625,
          "content": "# This is the main CMake build file used to compile Mitsuba\ncmake_minimum_required (VERSION 3.9.0)\nproject(mitsuba)\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_CURRENT_SOURCE_DIR}/resources\")\n\n# ---------- Setup mitsuba.conf ----------\n\nif (NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/mitsuba.conf)\n  file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/resources/mitsuba.conf.template\n       DESTINATION ${CMAKE_CURRENT_SOURCE_DIR})\n  file(RENAME mitsuba.conf.template mitsuba.conf)\n  set(MITSUBA_COPIED_CONFIG_FILE 1)\nendif()\n\n# ---------- Check for submodules ----------\n\nif (NOT IS_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/ext/openexr/OpenEXR\")\n  message(FATAL_ERROR \"The Mitsuba dependencies are missing! \"\n    \"You probably did not clone the project with --recursive. It is possible to recover \"\n    \"by invoking\\n$ git submodule update --init --recursive\")\nendif()\n\n# ---------- Detect Python ----------\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/ext/pybind11/tools\")\nset(Python_ADDITIONAL_VERSIONS 3.9 3.8 3.7 3.6 3.5)\nfind_package(PythonLibsNew REQUIRED)\n\n\n# ---------- Detect renderer variants ----------\n\n# We want CMake to re-run whenever 'mitsuba.conf' changes because the build\n# system dynamically adds or removes build targets based on this file. There\n# unfortunately isn't a nice way of specifying such dependencies in CMake, but\n# it turns out that one can abuse the 'configure_file' mechanism to this end\n# (we simply ignore the output file created by it.)\nconfigure_file(mitsuba.conf ${CMAKE_CURRENT_BINARY_DIR}/ext_build/unused)\n\n# Generate the config.h headers from the configuration\nexecute_process(\n  COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/resources/configure.py ${CMAKE_CXX_COMPILER_ID}\n  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n  OUTPUT_VARIABLE MTS_VARIANTS\n  ERROR_VARIABLE MTS_VARIANTS_ERR\n)\nif (MTS_VARIANTS_ERR)\n  message(FATAL_ERROR \"Could not run resources/configure.py script: ${MTS_VARIANTS_ERR}\")\nendif()\n\nlist(LENGTH MTS_VARIANTS MTS_VARIANTS_COUNT)\n\nmessage(STATUS \"Building the following variants of Mitsuba:\")\nforeach (MTS_VARIANT ${MTS_VARIANTS})\n  string(REPLACE \"|\" \";\" MTS_VARIANT ${MTS_VARIANT})\n  list(GET MTS_VARIANT 0 MTS_VARIANT_NAME)\n  list(GET MTS_VARIANT 1 MTS_VARIANT_FLOAT)\n  list(GET MTS_VARIANT 2 MTS_VARIANT_SPECTRUM)\n  message(STATUS \" * ${MTS_VARIANT_NAME}\")\nendforeach()\n\nif (MTS_VARIANTS MATCHES \"gpu_\")\n  set(MTS_ENABLE_OPTIX ON)\nendif()\n\n# ----------------------------------\n\n# ---------- User options ----------\n\noption(MTS_ENABLE_PYTHON  \"Build Python bindings for Mitsuba, Enoki, and NanoGUI?\" ON)\noption(MTS_ENABLE_EMBREE  \"Use Embree for ray tracing operations?\" OFF)\noption(MTS_ENABLE_GUI     \"Build GUI\" OFF)\nif (MTS_ENABLE_OPTIX)\n  option(MTS_USE_OPTIX_HEADERS \"Use OptiX header files instead of resolving GPU ray tracing API ourselves.\" OFF)\nendif()\n\nif (UNIX)\n  option(MTS_ENABLE_PROFILER \"Enable sampling profiler\" ON)\nendif()\n\n# Use GCC/Clang address sanitizer?\n# NOTE: To use this in conjunction with Python plugin, you will need to call\n# On OSX:\n#   export DYLD_INSERT_LIBRARIES=<path to libclang_rt.asan_osx_dynamic.dylib>\n# On Linux:\n#   export LD_LIBRARY_PATH=<path to libasan.so>\n\noption(MTS_SANITIZE_ADDRESS \"Enable GCC/Clang address sanitizer?\" OFF) # To catch out-of-bounds accesses\noption(MTS_SANITIZE_MEMORY  \"Enable GCC/Clang memory sanitizer?\"  OFF) # To catch use of unitialized memory\n\noption(MTS_THROW_TRAPS_DEBUGGER \"Trap the debugger on calls to `Throw`?\" OFF)\nif(MTS_THROW_TRAPS_DEBUGGER)\n  add_definitions(-DMTS_THROW_TRAPS_DEBUGGER)\nendif()\n\n# For developers: ability to disable Link Time Optimization to speed up builds\noption(MTS_ENABLE_LTO \"Enable Link Time Optimization (LTO)?\" ON)\n\nif (MTS_ENABLE_OPTIX AND MTS_USE_OPTIX_HEADERS)\n  set(MTS_OPTIX_PATH \"/opt/optix\" CACHE STRING \"Path to OptiX installation\")\nendif()\n\n# ----------------------------------\n\nif (POLICY CMP0022)\n  cmake_policy(SET CMP0022 NEW) # New-style link interface\nendif()\n\nif (POLICY CMP0056)\n  cmake_policy(SET CMP0056 NEW) # try_compile: pass linker flags to compiler\nendif()\n\nif (POLICY CMP0058)\n  cmake_policy(SET CMP0058 NEW) # Ninja requires custom command byproducts to be explicit.\nendif()\n\nif (POLICY CMP0042)\n  cmake_policy(SET CMP0042 NEW) # MACOSX_RPATH is enabled by default\nendif()\nset(CMAKE_MACOSX_RPATH ON)\n\nif (POLICY CMP0068)\n  cmake_policy(SET CMP0068 NEW) # RPATH settings on macOS don't affect install_name.\nendif()\n\ninclude(CheckCXXCompilerFlag)\ninclude(CheckCXXSourceRuns)\ninclude(TestBigEndian)\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/src/cmake\")\n\n# Set a default build configuration (Release)\nif (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  message(STATUS \"Setting build type to 'Release' as none was specified.\")\n  set(CMAKE_BUILD_TYPE Release CACHE STRING \"Choose the type of build.\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug\" \"Release\"\n    \"MinSizeRel\" \"RelWithDebInfo\")\nendif()\nstring(TOUPPER \"${CMAKE_BUILD_TYPE}\" U_CMAKE_BUILD_TYPE)\n\nmacro(CHECK_CXX_COMPILER_AND_LINKER_FLAGS _RESULT _CXX_FLAGS _LINKER_FLAGS)\n  set(CMAKE_REQUIRED_FLAGS ${_CXX_FLAGS})\n  set(CMAKE_REQUIRED_LIBRARIES ${_LINKER_FLAGS})\n  set(CMAKE_REQUIRED_QUIET TRUE)\n  check_cxx_source_runs(\"#include <iostream>\\nint main(int argc, char **argv) { std::cout << \\\"test\\\"; return 0; }\" ${_RESULT})\n  set(CMAKE_REQUIRED_FLAGS \"\")\n  set(CMAKE_REQUIRED_LIBRARIES \"\")\nendmacro()\n\nif (CMAKE_CXX_COMPILER_ID MATCHES \"^(GNU)$\")\n   if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 8.0)\n     message(FATAL_ERROR \"Your version of GCC is too old (found version ${CMAKE_CXX_COMPILER_VERSION}. Please use at least GCC 8.0)\")\n   endif()\nendif()\n\nif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n   if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7.0)\n     message(FATAL_ERROR \"Your version of Clang is too old (found version ${CMAKE_CXX_COMPILER_VERSION}. Please use at least Clang 7.0)\")\n   endif()\nendif()\n\n# Prefer libc++ in conjunction with Clang\nif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" AND NOT CMAKE_CXX_FLAGS MATCHES \"-stdlib=libc\\\\+\\\\+\")\n  CHECK_CXX_COMPILER_AND_LINKER_FLAGS(HAS_LIBCPP \"-stdlib=libc++\" \"-stdlib=libc++\")\n  if (HAS_LIBCPP)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -stdlib=libc++ -D_LIBCPP_VERSION\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -stdlib=libc++\")\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -stdlib=libc++\")\n    message(STATUS \"Mitsuba: using libc++.\")\n  else()\n    CHECK_CXX_COMPILER_AND_LINKER_FLAGS(HAS_LIBCPP_AND_CPPABI \"-stdlib=libc++\" \"-stdlib=libc++ -lc++abi\")\n    if (HAS_LIBCPP_AND_CPPABI)\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -stdlib=libc++ -D_LIBCPP_VERSION\")\n      set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -stdlib=libc++ -lc++abi\")\n      set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -stdlib=libc++ -lc++abi\")\n      message(STATUS \"Mitsuba: using libc++ and libc++abi.\")\n    else()\n      message(FATAL_ERROR \"When Clang is used to compile Mitsuba, libc++ must be available -- GCC's libstdc++ is not supported! (please install the libc++ development headers, provided e.g. by the packages 'libc++-dev' and 'libc++abi-dev' on Debian/Ubuntu).\")\n    endif()\n  endif()\nendif()\n\n\n# Clang/GCC address sanitizer\nif ((MTS_SANITIZE_ADDRESS OR MTS_SANITIZE_MEMORY) AND (CMAKE_CXX_COMPILER_ID MATCHES \"(GNU|Clang)\"))\n  # Don't optimize too heavily\n  if (U_CMAKE_BUILD_TYPE MATCHES REL)\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -O1\")\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -O1\")\n    add_compile_options(-O1 -fno-optimize-sibling-calls)\n  endif()\n\n  add_compile_options(-fno-omit-frame-pointer)\n\n  if (MTS_SANITIZE_ADDRESS)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fsanitize=address\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address\")\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=address\")\n    message(STATUS \"Mitsuba: enabling the address sanitizer.\")\n  endif()\n\n  if (MTS_SANITIZE_MEMORY)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fsanitize=memory\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=memory\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=memory\")\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=memory\")\n    message(STATUS \"Mitsuba: enabling the memory sanitizer.\")\n  endif()\nendif()\n\n# Enable folders for projects in Visual Studio\nif (CMAKE_GENERATOR MATCHES \"Visual Studio\")\n  set_property(GLOBAL PROPERTY USE_FOLDERS ON)\nendif()\n\nif (UNIX AND NOT APPLE)\n  # Fix to point the compiler to a header file (__cxxabi_config.h)\n  # on recent versions of Debian/Ubuntu\n  include_directories(/usr/include/libcxxabi)\nendif()\n\n# Build the dependencies\nadd_subdirectory(ext ext_build)\n\n# Always add the include directories for tinyformat, Enoki and Eigen\ninclude_directories(include\n  ${TINYFORMAT_INCLUDE_DIRS}\n  ${EIGEN_INCLUDE_DIRS}\n  ${ENOKI_INCLUDE_DIRS}\n  ${TBB_INCLUDE_DIRS}\n)\n\nif (MTS_ENABLE_EMBREE)\n  include_directories(${EMBREE_INCLUDE_DIRS})\n  add_definitions(-DMTS_ENABLE_EMBREE=1)\n  message(STATUS \"Mitsuba: using Embree for CPU ray tracing.\")\nelse()\n  message(STATUS \"Mitsuba: using builtin implementation for CPU ray tracing.\")\nendif()\n\nif (MTS_ENABLE_OPTIX)\n  if (MTS_USE_OPTIX_HEADERS AND NOT EXISTS \"${MTS_OPTIX_PATH}/include/optix.h\")\n    message(FATAL_ERROR \"optix.h not found, run CMake with -DMTS_OPTIX_PATH=...\")\n  endif()\n\n  if (MTS_USE_OPTIX_HEADERS)\n    find_package(CUDA 10.0 REQUIRED)\n    include_directories(${MTS_OPTIX_PATH}/include ${CUDA_INCLUDE_DIRS})\n    add_definitions(-DMTS_USE_OPTIX_HEADERS=1)\n    message(STATUS \"Mitsuba: OptiX header files will be used.\")\n  endif()\n\n  message(STATUS \"Mitsuba: using OptiX for GPU ray tracing.\")\n  add_definitions(-DMTS_ENABLE_OPTIX=1)\nendif()\n\n# Compile with compiler warnings turned on\nif (MSVC)\n  if (${MSVC_VERSION} LESS 1924)\n    message(FATAL_ERROR \"MSVC 1924 or higher is required. You are running version ${MSVC_VERSION}.\")\n  endif()\n  if(CMAKE_CXX_FLAGS MATCHES \"/W[0-4]\")\n    string(REGEX REPLACE \"/W[0-4]\" \"/W4\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n  else()\n    add_compile_options(\"/W4\")\n  endif()\nelse()\n  add_compile_options(\"-Wall\" \"-Wextra\")\n  add_compile_options(\"-Wno-unused-local-typedefs\")\n  if (CMAKE_CXX_COMPILER_ID MATCHES \"Intel\")\n    # Quench inlining-related remarks\n    add_compile_options(\"-wd11074\" \"-wd11076\")\n  endif()\nendif()\n\n# Language and optimization flags that are used to compile Mitsuba\nif (CMAKE_CXX_COMPILER_ID MATCHES \"GNU|Clang|Intel\")\n  CHECK_CXX_COMPILER_FLAG(\"-std=gnu++17\" HAS_GNUPP17_FLAG)\n  CHECK_CXX_COMPILER_FLAG(\"-std=c++17\" HAS_CPP17_FLAG)\n\n  if (HAS_GNUPP17_FLAG)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=gnu++17\")\n  elseif (HAS_CPP17_FLAG)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++17\")\n  else()\n    message(FATAL_ERROR \"Unsupported compiler -- Mitsuba requires C++17 support!\")\n  endif()\n\n  # Set the default symbol visibility to hidden (very important to obtain small binaries)\n  if (U_CMAKE_BUILD_TYPE MATCHES REL)\n    # Increase function size limits for inlining on GCC (useful for templated\n    # code where significant portions can be optimized away during inlining)\n    if (CMAKE_CXX_COMPILER_ID MATCHES \"GNU\")\n      add_compile_options(\"-finline-limit=150\")\n    endif()\n\n    if (NOT CMAKE_CXX_COMPILER_ID MATCHES \"GNU\")\n      # Set the default symbol visibility to hidden except on GCC\n      # which has some issues with extern partial template specialization\n      add_compile_options(\"-fvisibility=hidden\")\n    endif()\n  endif()\nendif()\n\n# Force colored output for the ninja generator\nif (CMAKE_GENERATOR STREQUAL \"Ninja\")\n  if (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fcolor-diagnostics\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fcolor-diagnostics\")\n  elseif (CMAKE_CXX_COMPILER_ID MATCHES \"GNU\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fdiagnostics-color=always\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fdiagnostics-color=always\")\n  endif()\nendif()\n\nif (MSVC)\n  # Compile in C++17 mode\n  add_compile_options(\"/std:c++17\")\n\n  # Disable annoying MSVC warnings (all targets)\n  add_definitions(/D \"_CRT_SECURE_NO_WARNINGS\" /D \"_SCL_SECURE_NO_WARNINGS\" /D \"_SILENCE_CXX17_UNCAUGHT_EXCEPTION_DEPRECATION_WARNING\")\n\n  # Disable secure SCL\n  add_definitions(/D \"_SECURE_SCL=0\")\n\n  # Don't issue implicit linking pragmas for TBB\n  add_definitions(/D \"__TBB_NO_IMPLICIT_LINKAGE\")\n\n  # Disable problematic windows.h min/max macros\n  add_definitions(/D \"NOMINMAX\")\n\n  # Don't complain about not DLL-exporting STL classes\n  add_compile_options(\"/wd4251\")\n\n  # Function '..' marked as __forceinline not inlined\n  add_compile_options(\"/wd4714\")\n\n  # unreferenced local function has been removed\n  add_compile_options(\"/wd4505\")\n\n  # Declaration of type hides class member\n  add_compile_options(\"/wd4458\" \"/wd4459\")\n\n  # Check operator precedence for possible error\n  add_compile_options(\"/wd4554\")\n\n  # structure was padded due to alignment specifier\n  add_compile_options(\"/wd4324\")\n\n  # conditional expression is constant\n  add_compile_options(\"/wd4127\")\n\n  # Workaround for MSVC 2017\n  add_compile_options(\"/wd4244\")\n\n  # Parallel build on MSVC\n  add_compile_options(\"/MP\")\n\n  # Permit many sections in .obj files\n  add_compile_options(\"/bigobj\")\n\n  # Use defines from math.h (M_PI, etc)\n  add_compile_options(/D \"_USE_MATH_DEFINES\")\n\n  # Don't complain about incompatible modifier on explicit instantiations\n  add_compile_options(\"/wd4910\")\nendif()\n\nif (U_CMAKE_BUILD_TYPE MATCHES DEBUG AND CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  add_compile_options(\"-fno-limit-debug-info\")\nendif()\n\n# Enable link time optimization in release mode (if possible)\nif (U_CMAKE_BUILD_TYPE MATCHES REL AND CMAKE_CXX_COMPILER_ID MATCHES \"(GNU|Clang)\")\n  if (NOT MTS_ENABLE_LTO)\n    message(STATUS \"Mitsuba: LTO support disabled (MTS_ENABLE_LTO=OFF).\")\n  elseif (NOT CMAKE_CXX_FLAGS MATCHES \"-flto\")\n    # Enable link time optimization\n    set(BACKUP_C_FLAGS ${CMAKE_CXX_FLAGS})\n    set(BACKUP_CXX_FLAGS ${CMAKE_C_FLAGS})\n    set(BACKUP_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS})\n    set(BACKUP_SHARED_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS})\n\n    if (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n      set(CMAKE_CXX_FLAGS \"-flto=thin ${CMAKE_CXX_FLAGS}\")\n      set(CMAKE_C_FLAGS \"-flto=thin ${CMAKE_C_FLAGS}\")\n\n      file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/.cache)\n      if (APPLE)\n        set(CMAKE_EXE_LINKER_FLAGS    \"-flto=thin -Wl,-cache_path_lto,${CMAKE_CURRENT_BINARY_DIR}/.cache ${CMAKE_EXE_LINKER_FLAGS}\")\n        set(CMAKE_SHARED_LINKER_FLAGS \"-flto=thin -Wl,-cache_path_lto,${CMAKE_CURRENT_BINARY_DIR}/.cache ${CMAKE_SHARED_LINKER_FLAGS}\")\n      else()\n        set(CMAKE_EXE_LINKER_FLAGS    \"-flto=thin -Wl,-plugin-opt,cache-dir=${CMAKE_CURRENT_BINARY_DIR}/.cache ${CMAKE_EXE_LINKER_FLAGS}\")\n        set(CMAKE_SHARED_LINKER_FLAGS \"-flto=thin -Wl,-plugin-opt,cache-dir=${CMAKE_CURRENT_BINARY_DIR}/.cache ${CMAKE_SHARED_LINKER_FLAGS}\")\n      endif()\n\n      if (NOT APPLE AND U_CMAKE_BUILD_TYPE MATCHES MINSIZEREL)\n          # Clang Gold plugin does not support -Os\n          set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -O3\")\n          set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -O3\")\n      endif()\n    else()\n      set(CMAKE_EXE_LINKER_FLAGS \"-flto ${CMAKE_EXE_LINKER_FLAGS}\")\n      set(CMAKE_SHARED_LINKER_FLAGS \"-flto ${CMAKE_SHARED_LINKER_FLAGS}\")\n      set(CMAKE_CXX_FLAGS \"-flto -fno-fat-lto-objects ${CMAKE_CXX_FLAGS}\")\n      set(CMAKE_C_FLAGS \"-flto -fno-fat-lto-objects ${CMAKE_C_FLAGS}\")\n    endif()\n\n    file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_FILES_DIRECTORY}/CMakeTmp/test.c \"int main(int argc, char **argv) { return 0; }\")\n    try_compile(HAS_LTO\n      ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_FILES_DIRECTORY}/CMakeTmp\n      ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_FILES_DIRECTORY}/CMakeTmp/test.c)\n\n    if (HAS_LTO)\n      message(STATUS \"Mitsuba: LTO support enabled.\")\n    else()\n      message(STATUS \"Mitsuba: LTO not supported by the compiler.\")\n      set(CMAKE_C_FLAGS ${BACKUP_CXX_FLAGS})\n      set(CMAKE_CXX_FLAGS ${BACKUP_C_FLAGS})\n      set(CMAKE_EXE_LINKER_FLAGS ${BACKUP_EXE_LINKER_FLAGS})\n      set(CMAKE_SHARED_LINKER_FLAGS ${BACKUP_SHARED_LINKER_FLAGS})\n    endif()\n  endif()\nelseif(MSVC)\n  set(Configurations RELEASE RELWITHDEBINFO MINSIZEREL)\n  set(LinkTypes EXE SHARED MODULE STATIC)\n  foreach(Configuration ${Configurations})\n    set(FLAGS ${CMAKE_CXX_FLAGS_${Configuration}})\n\n    if (NOT FLAGS MATCHES \"/GL\")\n      set(FLAGS \"${FLAGS} /GL\")\n    endif()\n\n    set(\"CMAKE_CXX_FLAGS_${Configuration}\" \"${FLAGS}\" CACHE STRING \"\" FORCE)\n\n    foreach(LinkType ${LinkTypes})\n      set(FLAGS \"${CMAKE_${LinkType}_LINKER_FLAGS_${Configuration}}\")\n\n      if (NOT FLAGS MATCHES \"/LTCG\")\n        set(FLAGS \"${FLAGS} /LTCG\")\n      endif()\n\n      if ((LinkType STREQUAL \"EXE\" OR LinkType STREQUAL \"SHARED\") AND NOT (Configuration MATCHES DEB) AND NOT FLAGS MATCHES \"/OPT:REF,ICF\")\n        set(FLAGS \"${FLAGS} /OPT:REF,ICF\")\n      endif()\n\n      set(\"CMAKE_${LinkType}_LINKER_FLAGS_${Configuration}\" \"${FLAGS}\" CACHE STRING \"\" FORCE)\n    endforeach()\n  endforeach()\n\n  foreach(LinkType EXE SHARED)\n    string(REGEX REPLACE \"\\/INCREMENTAL(\\:NO)?\" \"\" CMAKE_${LinkType}_LINKER_FLAGS_DEBUG \"${CMAKE_${LinkType}_LINKER_FLAGS_DEBUG}\")\n    set(\"CMAKE_${LinkType}_LINKER_FLAGS_DEBUG\" \"${CMAKE_${LinkType}_LINKER_FLAGS_DEBUG} /INCREMENTAL:NO\")\n  endforeach()\n\n  message(STATUS \"Mitsuba: LTO support enabled.\")\nendif()\n\n# Set platform-specific flags\nif (WIN32)\n  add_definitions(-D__WINDOWS__)\nelseif(UNIX)\n  if(APPLE)\n    add_definitions(-D__OSX__)\n  else()\n    add_definitions(-D__LINUX__)\n  endif()\nendif()\n\ntest_big_endian(IS_BIG_ENDIAN)\nif (IS_BIG_ENDIAN)\n  add_definitions(-DBIG_ENDIAN)\nelse()\n  add_definitions(-DLITTLE_ENDIAN)\nendif()\n\nif (MTS_ENABLE_PROFILER)\n  add_definitions(-DMTS_ENABLE_PROFILER)\n  message(STATUS \"Mitsuba: sampling profiler enabled.\")\nelse()\n  message(STATUS \"Mitsuba: sampling profiler disabled.\")\nendif()\n\n# Get the current working branch\nexecute_process(\n  COMMAND git rev-parse --abbrev-ref HEAD\n  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n  OUTPUT_VARIABLE GIT_BRANCH\n  OUTPUT_STRIP_TRAILING_WHITESPACE\n)\n\n# Get the latest abbreviated commit hash of the working branch\nexecute_process(\n  COMMAND git log -1 --format=%h\n  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n  OUTPUT_VARIABLE GIT_COMMIT_HASH\n  OUTPUT_STRIP_TRAILING_WHITESPACE\n)\n\n# Schedules a file to be copied to the 'dist' directory\nfunction(add_dist)\n  set(MITSUBA_DIST ${MITSUBA_DIST} ${ARGV} CACHE INTERNAL \"\")\nendfunction()\n\n# Registers a test directory to be run by the `pytest` command\nfunction(add_tests)\n  file(GLOB TEST_FILES ${ARGV}/test_*)\n  set(MITSUBA_TEST_DIRECTORIES ${MITSUBA_TEST_DIRECTORIES} ${TEST_FILES} CACHE INTERNAL \"\")\nendfunction()\n\n# Function for creating Mitsuba plugins\nfunction(add_plugin)\n  list(GET ARGV 0 TARGET)\n  list(REMOVE_AT ARGV 0)\n  add_library(${TARGET}-obj OBJECT ${ARGV})\n  add_library(${TARGET} SHARED $<TARGET_OBJECTS:${TARGET}-obj>)\n  set_property(TARGET ${TARGET} PROPERTY POSITION_INDEPENDENT_CODE ON)\n  set_property(TARGET ${TARGET}-obj PROPERTY POSITION_INDEPENDENT_CODE ON)\n  set_target_properties(${TARGET} PROPERTIES PREFIX \"\")\n  target_link_libraries(${TARGET} PRIVATE mitsuba-core mitsuba-render tbb)\n  add_dist(plugins/${TARGET})\n  set_target_properties(${TARGET} ${TARGET}-obj PROPERTIES FOLDER plugins/${MTS_PLUGIN_PREFIX}/${TARGET})\nendfunction(add_plugin)\n\n# Initialize CMake variables\nset(MITSUBA_DIST \"\" CACHE INTERNAL \"\")\nset(MITSUBA_TEST_DIRECTORIES \"\" CACHE INTERNAL \"\")\n\n# Rpath handling for OSX and Linux\nif (APPLE)\n  set(CMAKE_BUILD_RPATH \"@loader_path\")\n  SET(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)\nelseif (UNIX)\n  SET(CMAKE_INSTALL_RPATH \"\\$ORIGIN\")\n  SET(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)\nendif()\n\nif (CMAKE_CXX_COMPILER_ID MATCHES \"(GNU|Clang)\" AND NOT MTS_VARIANTS MATCHES \"double\")\n  # Be extra noisy about unintended float->double conversions\n  add_compile_options(\"-Wdouble-promotion\")\nendif()\n\n# Register the Mitsuba codebase\nadd_subdirectory(src)\n\n# Copy dependencies into the 'dist' directory\nforeach(ITEM ${MITSUBA_DIST})\n  get_filename_component(TARGET_NAME ${ITEM} NAME)\n  get_filename_component(TARGET_DIRECTORY ${ITEM} DIRECTORY)\n  get_target_property(TARGET_OUTPUT_NAME ${TARGET_NAME} OUTPUT_NAME)\n  get_target_property(TARGET_SUFFIX ${TARGET_NAME} SUFFIX)\n  get_target_property(TARGET_PREFIX ${TARGET_NAME} PREFIX)\n  if (TARGET_OUTPUT_NAME MATCHES \"NOTFOUND\")\n    set(TARGET_OUTPUT_NAME ${TARGET_NAME})\n  endif()\n  if (TARGET_PREFIX MATCHES \"NOTFOUND\")\n    get_target_property(TARGET_TYPE ${TARGET_NAME} TYPE)\n    set(TARGET_PREFIX ${CMAKE_${TARGET_TYPE}_PREFIX})\n  endif()\n  if (TARGET_SUFFIX MATCHES \"NOTFOUND\")\n    get_target_property(TARGET_TYPE ${TARGET_NAME} TYPE)\n    set(TARGET_SUFFIX ${CMAKE_${TARGET_TYPE}_SUFFIX})\n  endif()\n  set(TARGET_FILENAME ${TARGET_PREFIX}${TARGET_OUTPUT_NAME}${TARGET_SUFFIX})\n  if (TARGET_DIRECTORY STREQUAL \"\")\n    set(TARGET_DIRECTORY \".\")\n  endif()\n  set(OUTPUT_FILE ${CMAKE_BINARY_DIR}/dist/${TARGET_DIRECTORY}/${TARGET_FILENAME})\n  add_custom_command(\n    OUTPUT ${OUTPUT_FILE} DEPENDS ${TARGET_NAME}\n    COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${TARGET_NAME}> ${OUTPUT_FILE})\n  list(APPEND MITSUBA_DIST_OUT ${OUTPUT_FILE})\nendforeach()\n\nmacro (add_file DST SRC)\n  set(OUTPUT_FILE ${CMAKE_BINARY_DIR}/dist/${DST})\n  add_custom_command(\n    OUTPUT ${OUTPUT_FILE} DEPENDS ${SRC} ${ARGN}\n    COMMAND ${CMAKE_COMMAND} -E copy ${SRC} ${OUTPUT_FILE})\n  list(APPEND MITSUBA_DIST_OUT ${OUTPUT_FILE})\nendmacro()\n\nadd_file(data/srgb.coeff ${CMAKE_BINARY_DIR}/ext_build/rgb2spec/srgb.coeff rgb2spec_opt_run)\n\nfile(COPY resources/data/ior DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/dist/data)\n\nadd_custom_target(dist-copy ALL DEPENDS ${MITSUBA_DIST_OUT})\nset_property(TARGET dist-copy PROPERTY FOLDER misc)\n\n# Documentation\nfind_package(Sphinx)\nif (Sphinx_FOUND)\n  set(SPHINX_INPUT_DIR  \"${CMAKE_CURRENT_SOURCE_DIR}/docs\")\n  set(SPHINX_OUTPUT_DIR \"${CMAKE_CURRENT_BINARY_DIR}/html\")\n\n  add_custom_target(mkdoc\n      ${SPHINX_EXECUTABLE} -b html \"${SPHINX_INPUT_DIR}\" \"${SPHINX_OUTPUT_DIR}\"\n      COMMENT \"Building HTML documentation with Sphinx\"\n      USES_TERMINAL)\n\n    set(SPHINX_INPUT_DIR_API  \"${CMAKE_CURRENT_SOURCE_DIR}/docs/docs_api\")\n    set(SPHINX_OUTPUT_DIR_API \"${CMAKE_CURRENT_BINARY_DIR}/html_api\")\n\n  add_custom_target(mkdoc-api\n      ${SPHINX_EXECUTABLE} -b html \"${SPHINX_INPUT_DIR_API}\" \"${SPHINX_OUTPUT_DIR_API}\"\n      COMMENT \"Building HTML documentation with Sphinx\"\n      DEPENDS mitsuba-python dist-copy\n      USES_TERMINAL)\nendif()\n\nif (MSVC)\n  set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT mitsuba)\nendif()\n\nif(NOT WIN32)\n  string(ASCII 27 Esc)\n  set(ColorReset \"${Esc}[m\")\n  set(BoldRed \"${Esc}[1;31m\")\nendif()\n\nif (MITSUBA_COPIED_CONFIG_FILE)\n  message(WARNING \"\\n${BoldRed}Created a default 'mitsuba.conf' configuration \"\n          \"file. You will probably want to edit this file to specify the \"\n          \"desired configurations before starting to compile.${ColorReset}\")\nendif()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.138671875,
          "content": "Copyright (c) 2017 Wenzel Jakob <wenzel.jakob@epfl.ch>, All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nYou are under no obligation whatsoever to provide any bug fixes, patches, or\nupgrades to the features, functionality or performance of the source code\n(\"Enhancements\") to anyone; however, if you choose to make your Enhancements\navailable either publicly, or directly to the author of this software, without\nimposing a separate written license agreement for such Enhancements, then you\nhereby grant the following license: a non-exclusive, royalty-free perpetual\nlicense to install, use, modify, prepare derivative works, incorporate into\nother computer software, distribute, and sublicense such enhancements or\nderivative works thereof, in binary and source code form.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.0458984375,
          "content": "<img src=\"https://github.com/mitsuba-renderer/mitsuba2/raw/master/docs/images/logo_plain.png\" width=\"120\" height=\"120\" alt=\"Mitsuba logo\">\n\n# Mitsuba Renderer 2\n<!--\n| Documentation   | Linux             | Windows             |\n|      :---:      |       :---:       |        :---:        |\n| [![docs][1]][2] | [![rgl-ci][3]][4] | [![appveyor][5]][6] |\n\n\n[1]: https://readthedocs.org/projects/mitsuba2/badge/?version=master\n[2]: https://mitsuba2.readthedocs.io/en/latest/src/getting_started/intro.html\n[3]: https://rgl-ci.epfl.ch/app/rest/builds/buildType(id:Mitsuba2_Build)/statusIcon.svg\n[4]: https://rgl-ci.epfl.ch/viewType.html?buildTypeId=Mitsuba2_Build&guest=1\n[5]: https://ci.appveyor.com/api/projects/status/eb84mmtvnt8ko8bh/branch/master?svg=true\n[6]: https://ci.appveyor.com/project/wjakob/mitsuba2/branch/master\n-->\n| Documentation   |\n|      :---:      |\n| [![docs][1]][2] |\n\n\n[1]: https://readthedocs.org/projects/mitsuba2/badge/?version=latest\n[2]: https://mitsuba2.readthedocs.io/en/latest/src/getting_started/intro.html\n\n## This repository is deprecated\n\n*NOTE*: [Mitsuba 3](https://github.com/mitsuba-renderer/mitsuba3) has recently\nbeen released, which addresses many long-standing limitations of Mitsuba 2.\nThis repository is therefore deprecated: it will not receive updates or\nbugfixes, and we recommend that you migrate to Mitsuba 3.\n\n## Introduction\n\nMitsuba 2 is a research-oriented rendering system written in portable C++17. It\nconsists of a small set of core libraries and a wide variety of plugins that\nimplement functionality ranging from materials and light sources to complete\nrendering algorithms. Mitsuba 2 strives to retain scene compatibility with its\npredecessor [Mitsuba 0.6](https://github.com/mitsuba-renderer/mitsuba).\nHowever, in most other respects, it is a completely new system following a\ndifferent set of goals.\n\nThe most significant change of Mitsuba 2 is that it is a *retargetable*\nrenderer: this means that the underlying implementations and data structures\nare specified in a generic fashion that can be transformed to accomplish a\nnumber of different tasks. For example:\n\n1. In the simplest case, Mitsuba 2 is an ordinary CPU-based RGB renderer that\n   processes one ray at a time similar to its predecessor [Mitsuba\n   0.6](https://github.com/mitsuba-renderer/mitsuba).\n\n2. Alternatively, Mitsuba 2 can be transformed into a differentiable renderer\n   that runs on NVIDIA RTX GPUs. A differentiable rendering algorithm is able\n   to compute derivatives of the entire simulation with respect to input\n   parameters such as camera pose, geometry, BSDFs, textures, and volumes. In\n   conjunction with gradient-based optimization, this opens door to challenging\n   inverse problems including computational material design and scene reconstruction.\n\n3. Another type of transformation turns Mitsuba 2 into a vectorized CPU\n   renderer that leverages Single Instruction/Multiple Data (SIMD) instruction\n   sets such as AVX512 on modern CPUs to efficiently sample many light paths in\n   parallel.\n\n4. Yet another type of transformation rewrites physical aspects of the\n   simulation: Mitsuba can be used as a monochromatic renderer, RGB-based\n   renderer, or spectral renderer. Each variant can optionally account for the\n   effects of polarization if desired.\n\nIn addition to the above transformations, there are\nseveral other noteworthy changes:\n\n1. Mitsuba 2 provides very fine-grained Python bindings to essentially every\n   function using [pybind11](https://github.com/pybind/pybind11). This makes it\n   possible to import the renderer into a Jupyter notebook and develop new\n   algorithms interactively while visualizing their behavior using plots.\n\n2. The renderer includes a large automated test suite written in Python, and\n   its development relies on several continuous integration servers that\n   compile and test new commits on different operating systems using various\n   compilation settings (e.g. debug/release builds, single/double precision,\n   etc). Manually checking that external contributions don't break existing\n   functionality had become a severe bottleneck in the previous Mitsuba 0.6\n   codebase, hence the goal of this infrastructure is to avoid such manual\n   checks and streamline interactions with the community (Pull Requests, etc.)\n   in the future.\n\n3. An all-new cross-platform user interface is currently being developed using\n   the [NanoGUI](https://github.com/mitsuba-renderer/nanogui) library. *Note\n   that this is not yet complete.*\n\n## Compiling and using Mitsuba 2\n\nPlease see the [documentation](http://mitsuba2.readthedocs.org/en/latest) for\ndetails on how to compile, use, and extend Mitsuba 2.\n\n## About\n\nThis project was created by [Wenzel Jakob](http://rgl.epfl.ch/people/wjakob).\nSignificant features and/or improvements to the code were contributed by\n[Merlin Nimier-David](https://merlin.nimierdavid.fr/),\n[Guillaume Loubet](https://maverick.inria.fr/Membres/Guillaume.Loubet/),\n[Benoît Ruiz](https://github.com/4str0m),\n[Sébastien Speierer](https://github.com/Speierers),\n[Delio Vicini](https://dvicini.github.io/),\nand [Tizian Zeltner](https://tizianzeltner.com/).\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "ext",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "setpath.bat",
          "type": "blob",
          "size": 0.521484375,
          "content": "@echo off\n\nREM ***************************************************************\nREM * This script adds Mitsuba to the current path on Windows.\nREM * It assumes that Mitsuba is either compiled within the \nREM * source tree or within a subdirectory named 'build'.\nREM ***************************************************************\n\nset MITSUBA_DIR=%~dp0\nset MITSUBA_DIR=%MITSUBA_DIR:~0,-1%\nset PATH=%PATH%;%MITSUBA_DIR%\\dist;%MITSUBA_DIR%\\build\\dist\nset PYTHONPATH=%PYTHONPATH%;%MITSUBA_DIR%\\dist\\python;%MITSUBA_DIR%\\build\\dist\\python\n"
        },
        {
          "name": "setpath.ps1",
          "type": "blob",
          "size": 0.5341796875,
          "content": "\n# ***************************************************************\n# * This script adds Mitsuba to the current path on Windows.\n# * It assumes that Mitsuba is either compiled within the \n# * source tree or within a subdirectory named 'build'.\n# ***************************************************************\n\n$env:MITSUBA_DIR=Get-Location\n$env:PATH=$env:PATH + \";\" + $env:MITSUBA_DIR + \"\\dist;\" + $env:MITSUBA_DIR + \"\\build\\dist\"\n$env:PYTHONPATH=$env:PYTHONPATH + \";\" +$env:MITSUBA_DIR + \"\\dist\\python;\" + $env:MITSUBA_DIR + \"\\build\\dist\\python\"\n"
        },
        {
          "name": "setpath.sh",
          "type": "blob",
          "size": 0.9208984375,
          "content": "#\n# This script adds Mitsuba to the current path.\n# It works with both Bash and Zsh and assumes that Mitsuba\n# is compiled within the source tree or a subdirectory\n# named 'build'.\n#\n# NOTE: this script must be sourced and not run, i.e.\n#    . setpath.sh        for Bash\n#    source setpath.sh   for Zsh or Bash\n#\n\nif [[ \"$#\" -ge \"1\" ]]; then\n    BUILD_DIR=\"$1\"\nelse\n    BUILD_DIR=\"build\"\nfi\n\nif [[ \"${BASH_SOURCE[0]}\" == \"${0}\" ]]; then\n    echo \"The setpath.sh script must be sourced, not executed. In other words, run\\n\"\n    echo \"$ source setpath.sh\\n\"\n    exit 0\nfi\n\nif [ \"$BASH_VERSION\" ]; then\n    MITSUBA_DIR=$(dirname \"$BASH_SOURCE\")\n    export MITSUBA_DIR=$(builtin cd \"$MITSUBA_DIR\"; builtin pwd)\nelif [ \"$ZSH_VERSION\" ]; then\n    export MITSUBA_DIR=$(dirname \"$0:A\")\nfi\n\nexport PYTHONPATH=\"$MITSUBA_DIR/dist/python:$MITSUBA_DIR/$BUILD_DIR/dist/python:$PYTHONPATH\"\nexport PATH=\"$MITSUBA_DIR/dist:$MITSUBA_DIR/$BUILD_DIR/dist:$PATH\"\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.3134765625,
          "content": "[tool:pytest]\nminversion = 3.0\nnorecursedirs = ext ext_build build build-debug CMakeFiles dist include .git\npython_paths = dist dist/python\n\n\n[pycodestyle]\n# E402: module level import not at top of file (needed for Mitsuba variants)\n# W503/W504: line break occurred before/after a binary operator\nignore = E402,W503,W504\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}