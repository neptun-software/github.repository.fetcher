{
  "metadata": {
    "timestamp": 1736565544207,
    "page": 420,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ChrisKnott/Algojammer",
      "stars": 2914,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.072265625,
          "content": "__pycache__\nc_ext/build/*\nc_ext/dist/*\nc_ext/Algorecord.egg-info\n.DS_Store"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0751953125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2018 Chris Knott\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.083984375,
          "content": "# Algojammer\n\n**Algojammer** is an experimental, proof-of-concept code editor for writing algorithms in Python. It was mainly written to assist with solving the kind of algorithm problems that feature in competitions like [Google Code Jam](https://code.google.com/codejam/), [Topcoder](https://tco18.topcoder.com/algorithm/) and [HackerRank](https://www.hackerrank.com/domains/algorithms).\n\n![Editor](https://github.com/ChrisKnott/Algojammer/raw/master/README/Algojammer.gif)  \n<sup>Writing code for a Bubble Sort algorithm (sorting array of 10 numbers, then changing code to 100 numbers)</sup>\n\nAlgojammer is heavily inspired by <sub><sup>(stolen from)</sup></sub> the work of [Bret Victor](http://worrydream.com/), particularly [Learnable Programming](http://worrydream.com/LearnableProgramming/) (2012) and [Inventing On Principle](https://vimeo.com/36579366) (2012), although it only incorporates some of the ideas presented. A longer list of other influences and similar projects is given in [Inspiration](https://github.com/ChrisKnott/Algojammer#inspiration). \n\nThe project is not finished, but I am not in a position to work on it at the moment, so I am putting it out there in the hope of inspiring others to contribute, or at least provoke some interesting discussion.\n\n## Overview\n\n### Editor\nThe left hand side of the main window is a text editor where you should write your algorithm. We refer to the contents of the Editor as \"Maincode\".\n\n![Editor](https://github.com/ChrisKnott/Algojammer/raw/master/README/Editor.png)\n\nThis editor uses [Ace](https://ace.c9.io/). See [this page](https://github.com/ajaxorg/ace/wiki/Default-Keyboard-Shortcuts) for keybindings.\n\n### Execution\nBy default your code is re-run immediately on any changes. Algojammer is a \"time-travelling\" or \"omniscient\" debugger, where steps of execution can be arbitrarily jumped to. There is not really any concept of \"debugging\" in the sense of controlling the execution of the code via breakpoints or \"stepping through\". The Execution of your code should be thought of as just a physical *fact* about the lines of text you have written. In the same way we might consider the *\"Number Of 'e' Characters\"* in the code, or the *\"Average Line Length\"* of the code, the *\"Execution\"* of the code, is just a **static fact that is entirely determined by the code**.\n\nOf course, while the *\"Number Of 'e' Characters\"* is a fairly simple fact - just a single integer - the Execution is quite a complicated fact. The Execution is so complicated, actually, that reasoning about and moulding the Execution into what you want is essentially the entire art and craft of programming. The features of Algojammer are designed to help you understand the Execution of your code *visually*, so it can be **intentionally crafted**, bit-by-bit, into the algorithm you want.\n\nThe Execution consists of two elements;\n- The **Steps** taken through the code, as each line executes in turn\n- The **State** of any variables at any of one of these Steps.\n\n### Timeline\nTo the right of your code editor is the Timeline, the first tool to help understand the Execution. Each Step is represented by a small square on the Timeline. These squares proceed from left to right, and line up with the corresponding line of code that was executed. The Timeline can be zoomed and scrolled with the mouse, and the Current Step is highlighted. Hold shift to set the Current Step.\n\n![Timeline](https://github.com/ChrisKnott/Algojammer/raw/master/README/Timeline.png)  \n<sup>The Timeline with Step #32 highlighted as the Current Step</sup>\n\nThe Timeline can give an immediate \"feel\" or \"shape\" to an algorithm by giving you some idea of how Execution is distributed across the lines. Notice in the following screenshot of a Bubble Sort algorithm, we can see that with each pass of the algorithm, the bottom two lines are executed less and less frequently. This gives us some hints that this particular sorting algorithm performs well on nearly-sorted data. Other sorting algorithms have a different \"shape\".\n\n![Bubble Sort](https://github.com/ChrisKnott/Algojammer/raw/master/README/Bubble.png)\n\n### Metacode\nIn Algojammer, we can interrogate and investigate the Execution by writing Metacode. Metacode is **code that we write about the Maincode's Execution**.\n\nA lot of programmers will have, as a final attempt at tracking down a tricky bug, done something like this;\n1. Give up on \"debugging\" (stepping through + watch variables)\n2. Add logging EVERYWHERE\n3. Run the program\n4. Write a script to parse this massive log file\n5. Using new superpowers, start investigating the problem\n\nMetacode can be thought of as a reification of this sort of process. The basic idea is... we are programmers, we have chosen Python to describe our algorithm, we might as well use Python to describe the queries we have about that algorithm as well. *\"When is x less than y?\"*, *\"Is p ever twice as big as q at the same time that r is negative?\"* etc. - these types of questions are natural answered by writing code.\n\nThe following screenshot is from [Chronon](http://chrononsystems.com/), which is an omniscient debugger for Java. The user is adding a filter to find places where a certain condition is true (kind of like a conditional breakpoint).\n\n![Chronon dialog](https://github.com/ChrisKnott/Algojammer/raw/master/README/Chronon.png)  \n<sup>Specifying a simple condition via GUI dialog (?!)</sup>\n\nThings like this make me wonder if designers have lost their minds. People have got so used to interacting with computers through dialogs that they struggle to imagine anything else - even if those people *are programmers*, and they ***are programming at the time!*** To be clear, Chronon is an *absolutely phenomenal* product (way better than this project!), but this dialog genuinely reminded me of those [intentionally terrible UIs for entering phone numbers](https://imgur.com/a/4f3XB) that were a meme a while ago. Metacode neatly replaces this kind of clumsiness.\n\nIn normal programming environments, the distinction between Maincode and Metacode is not explicit. Usually, Metacode, such as print statements or logging, is mixed directly in with Maincode. For some queries we might have, this is not too bad, but for more advanced queries that incorporate questions about, say, *how data mutates across time*, you might have to actually refactor your code to log the data you want. Explicitly separate Metacode - with an omniscient view of the entire Execution - avoids this issue entirely.\n\n### Sheets\nThe output of Metacode generally goes on Sheets. Conceptually, Sheets should be thought of like scraps of paper - messy, temporary aids to help with comprehension. They are not part of your algorithm and would normally be discarded as soon as they have achieved their goal, which is greater understanding.\n\nSheets perform the role that is covered in normal IDEs by watch windows and the debug console, but with the added advantage of being able to output both text and pictures.\n\n![Sheet](https://github.com/ChrisKnott/Algojammer/raw/master/README/Sheet%201.png)  \n<sup>The equivalent of a watch variable</sup>\n  \n![Sheet](https://github.com/ChrisKnott/Algojammer/raw/master/README/Sheet%202.png)  \n<sup>Printing an array on multiple lines, with indexes</sup>\n\n![Sheet](https://github.com/ChrisKnott/Algojammer/raw/master/README/Sheet%203.png)  \n<sup>Drawing the contents of an array as a bar chart</sup>\n\n![Sheet](https://github.com/ChrisKnott/Algojammer/raw/master/README/Metacode.gif)  \n<sup>Editing the Metacode for an output to change it's appearance</sup>\n\nTo add an output to a Sheet, right click the Sheet and select 'Add'. To edit that output's Metacode, right click *it* and select 'Edit'.\n\n### State\nIn a Metacode editor, **any variables that are in scope in Maincode at the Current Step will automatically be in scope**, with their values set to whatever they were on that Step. This is why in the above examples, the Metacode can just refer to `X`, a Maincode variable, and also why the picture changes as we scrub through.\n\nThere's nothing to stop you overriding these values but it won't have any effect outside of that code snippet (remember - *Execution is just a static fact!*).\n\nOn top of this, **Metacode is completely omniscient**. You also have access to a special variable `jam`, that can be thought of like a Swiss army knife for interrogating the Execution. For example `jam.state(100)` will return a state object for Step #100. So, we can calculate things like `jam.state(1000).x - jam.state(2000).x` - the change in the value of `x` between Step #1000 and Step #2000.\n\nWe can also query things like `jam.visits(6)` - an array that tells us every Step that executed Line #6, or `jam.line(250)` - the Line that was executed on Step #250. \n\nEventually more 'tools' will be added to the `jam` object such as the ability to query the callstack.\n\n### Markers\n(not finished)\\\n~~Apart from Sheets, the only other place that Metacode can output information is to the Timeline in the form of Markers. Markers are basically the closest Algojammer equivalent to breakpoints. Markers appear on the Timeline as vertical coloured lines, and should be used to show **where in the Execution certain conditions are true**.~~\n\n~~Markers are stored in the dictionary `jam.markers`, which can be read from any Metacode editor, but only written to from the special Marker Editor. You can open the Marker Editor by right clicking the Timeline.~~\n\n~~Only 100 Markers can be set at one time (this is for performance reasons, it's not a design choice).~~\n\n## Demo\nA quick demo is available on [YouTube](https://www.youtube.com/watch?v=9XPE4uT0AdE).\n\n![Video](https://github.com/ChrisKnott/Algojammer/raw/master/README/vid.png)\n\n## Running Algojammer\n```diff\n- Consider the current implementation of Algojammer a design prototype \n- It *will* crash, do weird things and leak memory like a sieve\n- I am currently in the process of rewriting it properly and to incorporate feedback\n```\n\nInstall and run Algojammer like this;\n```bash\ngit clone https://github.com/ChrisKnott/Algojammer.git\npip3 install eel\ncd Algojammer/c_ext\npython3 setup.py build install\ncd ..\npython3 algojammer.py\n```\n\nCurrently Algojammer uses [Eel](https://github.com/ChrisKnott/Eel) for the GUI, which means you need Chrome or Chromium installed. The Execution is recorded using a C++ extension that requires a C++11 compiler to build.\n\nAlgojammer is only tested on Python 3.5, and due to the very hacky nature in which it is currently implemented, probably doesn't work on many other versions.\n\n## Plans\nA criticism that is sometimes levelled at Bret Victor's (or Chris Grainger's) work is that the demos feel revolutionary but essentially solve \"toy problems\", and start to creak when you think how they might scale to \"real programming\".\n\nAlgojammer is definitely still within the \"toy\" sphere. However, I think it moves forward in a couple of important ways. Firstly, it is designed to solve toy problems (questions from algorithm competitions) that are;\n1. Outside of my control\n2. Genuinely hard\n3. Measurable\n\nI think this is important because it attaches a certain degree of **falsifiability** to some of the navel-gazing, pretentious nonsense I've written above. Ultimately, when the clock's ticking in Code Jam, and I just *really need to solve this problem*, do I reach for a tool like Algojammer? This test can't be faked. An actual \"bicycle for the mind\", is not something that feels revolutionary in a conference talk. An actual bicycle is something that let's me **easily beat people who are better than me in a race**.\n\nSo, this is the current goal for the project: **to build a tool that has a provably positive effect on people's performance in Code Jam**.\n\nUnfortunately I have reached the limits of my enthusiasm, ability and ideas at the moment, so I am putting it out slightly early in the hopes that other people can help, or at least to stimulate some interesting discussion.\n\nPlease use the [Issues](https://github.com/ChrisKnott/Algojammer/issues) for starting discussions on ideas you might have for either design, or engineering. It doesn't have to be related to Python or Algorithms. I am not interested in actual issues in this actual codebase - this is a demo/prototype.\n\n## Inspiration\n\nIf you like things like this, you should check out this stuff...\n- [JIVE](https://cse.buffalo.edu/jive/) - an omniscient debugger for Java with visualisations and query based debugging, seems to be a research project of University of Buffalo.\n- [Light Table](http://lighttable.com/) - \"next generation code editor\" by Chris Grainger. See also [What Does Programming Look Like In 10 Years?](https://www.youtube.com/watch?v=zQo4jUVWI_I) and [Toward a better programming](http://www.chris-granger.com/2014/03/27/toward-a-better-programming/) for more advanced ideas.\n- [ldb](http://scholar.sun.ac.za/handle/10019.1/96853) - A reverse debugger written as part of Abraham Coetzee's Masters thesis *\"Combining reverse debugging and live programming towards visual thinking in computer programming\"*. The thesis is full of great insights and gives a great summary of other work.\n- [Observable](https://beta.observablehq.com/) - a new type of interactive/explorative coding from Mike Bostock, creator of the D3 visualisation library\n- [Seymour](https://harc.github.io/seymour-live2017/) - a Javascript like programming language and associated coding environment, with live diagrams of execution. A Y-Combinator research project by Saketh Kasibatla and Alex Warth.\n- [Chronon](http://chrononsystems.com/) - a very professional omniscient debugger for Java (\"a DVR for Java\").\n- [ODB](http://omniscientdebugger.github.io/) - Omniscient Debugger, for Java from 2007, by Bil Lewis. I think this coined the term \"omniscient debugger\".\n- [Chronomancer](https://robert.ocallahan.org/2007/08/announcing-chronomancer_21.html) - An omniscient debugger for C++ from 2007 by Robert O'Callahan\n- [rr](https://rr-project.org/) - Also by Robert O'Callahan, a low level reversible debugger - basically an omniscient version of gdb\n\nThere are many other projects out there such as [RevPDB](https://morepypy.blogspot.com/2016/07/reverse-debugging-for-python.html) (a reversible debugger for Python from the Pypy team) and [Undo](https://undo.io/) (reversible debugger for C++), but I haven't looked into them in detail.\n\n"
        },
        {
          "name": "README",
          "type": "tree",
          "content": null
        },
        {
          "name": "algojammer.py",
          "type": "blob",
          "size": 1.197265625,
          "content": "import gevent.monkey; gevent.monkey.patch_all()\nimport eel, state_boxes as sbx, execution as exe, state as sta, time as tme\n\nstate = {\n    'step': 0,\n    'snapshots': [],\n    'mode': 'stopped'\n}\npage_geom = {\n    'algojammer.html': {'size': (1300, 800), 'position': (610, 200)},\n    'sheet.html':      {'size': ( 500, 800), 'position': (100, 200)}\n}\n\neel.init('web')\n\n@eel.expose\ndef read_example():\n    with open('files/example.py', encoding='utf8') as example_file:\n        eel.set_code(example_file.read())\n\n@eel.expose\ndef run(code, stdin=''):\n    while state['mode'] != 'stopped':\n        state['mode'] = 'interrupt'\n        eel.sleep(0.01)\n\n    state['mode'] = 'running'\n    sta.execution_start()\n    exe.bounded_exec(code, 10**7, report)\n    state['mode'] = 'stopped'\n\ndef report(data):\n    if state['mode'] == 'interrupt':\n        raise InterruptedError('Code changed during execution')\n\n    sta.execution_report(data)\n    eel.execution_report(data)\n\n@eel.expose\ndef update_state(n=state['step'], force=False):\n    if n != state['step'] or force:\n        state['step'] = n\n        snapshot, modules = sta.get_state(n)\n        sbx.update_state_boxes(snapshot, modules)\n\neel.start('algojammer.html', geometry=page_geom)\n"
        },
        {
          "name": "c_ext",
          "type": "tree",
          "content": null
        },
        {
          "name": "canvas.html",
          "type": "blob",
          "size": 0.1796875,
          "content": "<div>\n\t<canvas id='%id' width='%width' height='%height'></canvas>\n\t<script>\n\tvar canvas = document.getElementById('%id');\n\tvar c$ = canvas.getContext('2d');\n\t%drawing\n\t</script>\n</div>"
        },
        {
          "name": "drawing.py",
          "type": "blob",
          "size": 1.20703125,
          "content": "drawing = {'num': 0}\n\nwith open('canvas.html', encoding='utf8') as template_file:\n    template = template_file.read()\n\ndef start():\n    drawing['num'] += 1\n    canvas_id = 'state_canvas%d' % drawing['num']\n    drawing['code'] = template.replace(r'%id', canvas_id) \\\n                              .replace(r'%width', '600')  \\\n                              .replace(r'%height', '600')\n\ndef end():\n    return drawing['code'].replace(r'%drawing', '')\n\ndef add(code):\n    drawing['code'] = drawing['code'].replace(r'%drawing', code + r'%drawing')\n\n# User methods\ndef ink(r, g, b):\n    add('''\n    c$.fillStyle = 'rgb(%d, %d, %d)';\n    c$.strokeStyle = 'rgb(%d, %d, %d)';''' % (r, g, b, r, g, b))\n\ndef line(x1, y1, x2, y2):\n    add('''\n    c$.beginPath();\n    c$.moveTo(%d, %d);\n    c$.lineTo(%d, %d);\n    c$.closePath();\n    c$.stroke();''' % (x1, y1, x2, y2))\n\ndef rect(x, y, w, h):\n    add('''\n    c$.fillRect(%d, %d, %d, %d);''' % (x, y, w, h)) \n\ndef circ(x, y, r):\n    add('''\n    c$.beginPath();\n    c$.arc(%d, %d, %d, 0, 2 * Math.PI);\n    c$.fill();\n    c$.stroke();''' % (x, y, r))\n\ndef font(size):\n    add('''\n    c$.font = '%dpx Arial';''' % size)\n\ndef text(s, x, y):\n    add('''\n    c$.fillText(%s, %d, %d);''' % (repr(s), x, y))\n"
        },
        {
          "name": "execution.py",
          "type": "blob",
          "size": 0.7392578125,
          "content": "import io, sys, copy as cpy, traceback as tbk, types as typ, time as tme\nimport hashlib as hsh, state as sta, algorecord as rec, pickle as pkl, io\n\ndef bounded_exec(code, limit, report):\n    D = {'hash': hsh.md5(code.encode('utf-8')).hexdigest(),\n         'line': [], 'steps': 0}\n\n    def update(lines):\n        D['steps'] += len(lines)\n        D['line'] = lines\n        report(D)\n\n        if D['steps'] > limit:\n            raise RuntimeError('Reached max execution steps')\n\n        tme.sleep(0.001)    # Yield to other threads        \n\n    try:\n        code = compile(code, 'algojammer', 'exec')\n        rec.clear_recordings()\n        rec.start_trace(update)\n        exec(code, {})\n    except Exception as e:\n        tbk.print_exc()\n\n    rec.stop_trace()\n"
        },
        {
          "name": "files",
          "type": "tree",
          "content": null
        },
        {
          "name": "state.py",
          "type": "blob",
          "size": 2.111328125,
          "content": "import eel\nimport random as rnd, copy as cpy, pickle as pkl, io, algorecord as rec\n\nexecution = {}\n\nclass Jam:\n    def state(self, n):\n        state_at_step_n = State()\n        state_dict, _ = get_state(n)\n        for var, val in state_dict.items():\n            setattr(state_at_step_n, var, val)\n        return state_at_step_n\n\n    def visits(self, n):\n        if 0 <= n < len(execution['visits']):\n            return execution['visits'][n]\n        else:\n            return []\n\n    def line(self, s):\n        return execution['lines'][s]\n\n    def stack(self, n):\n        return []   # TODO: This needs some refactoring in the C++ module to work...\n\nclass State:\n    pass\n\ndef execution_start():\n    execution['lines'] = []\n    execution['visits'] = []\n\ndef execution_report(data):\n    shift = len(execution['lines'])\n    execution['lines'] += data['line']\n    for i, l in enumerate(data['line']):\n        if l > len(execution['visits']):\n            for _ in range(len(execution['visits']), l):\n                execution['visits'].append([])\n\n        execution['visits'][l - 1].append(i + shift);\n\n@eel.expose\ndef get_all_variables():\n    var_names = [str(s) for s in rec.get_all_variables()] # weird bugs here...\n    return sorted(var_names)\n\ndef get_state(step):\n    # Could move this whole function into C++ ext for performance...\n    milestone = rec.get_milestone(step)\n\n    obj = {0: None}\n    bytes_io = io.BytesIO(milestone['pickle_bytes'].getvalue())\n    unpickler = pkl.Unpickler(bytes_io)\n    for obj_id in milestone['pickle_order']:\n        try:\n            obj[obj_id] = unpickler.load()\n        except:\n            obj[obj_id] = '<pickle error>'\n\n    state = {}\n    for s, op, o, k, v in milestone['assignments']:\n        # This is a sort of mini VM that re-executes all assignments\n        if s <= step:\n            if v in obj:\n                if op == 0:     # o = v\n                    state[obj[o]] = obj[v]\n                elif op == 1:   # o[k] = v\n                    obj[o][obj[k]] = obj[v]\n                elif op == 2:   # o.k = v\n                    setattr(obj[o], obj[k], obj[v])\n        else:\n            break\n\n    return state, {}\n"
        },
        {
          "name": "state_boxes.py",
          "type": "blob",
          "size": 2.7373046875,
          "content": "import eel, copy as cpy, html as htm, os, json as jsn\nimport tkinter as tkt, tkinter.filedialog as fdg\nimport drawing as drw, state as sta\n\nbox_code = {}\ndata = {'snapshot': {},\n        'modules': {}}\n\n@eel.expose\ndef get_state_box_templates():\n    templates = {}\n    for folder, _, files in os.walk('templates'):\n        d = templates\n        for p in folder.split(os.path.sep):\n            if p not in d:\n                d[p] = {}\n            d = d[p]\n\n        for file in files:\n            if file.endswith('.py'):\n                with open(os.path.join(folder, file), encoding='utf8') as file:\n                    lines = file.read().split('\\n')\n                    name, code = lines[0], '\\n'.join(lines[1:])\n                    d[name] = code\n    return templates\n\n@eel.expose\ndef set_state_box_code(uid, code):\n    box_code[uid] = code.strip()\n    update_state_boxes(None, None)\n\n@eel.expose\ndef delete_state_box(uid):\n    box_code.pop(uid)\n\n@eel.expose\ndef get_state_box_code(uid):\n    return box_code[uid]\n\ndef state_print(*args, **kwargs):\n    sep, end = kwargs.get('sep', ' '), kwargs.get('end', '\\n')\n    output = sep.join(str(arg) for arg in args) + end\n    data['print'] += output\n\n@eel.expose\ndef update_state_boxes(snapshot, modules):\n    snapshot = snapshot or data['snapshot']\n    data['snapshot'] = snapshot\n\n    modules = modules or data['modules']\n    data['modules'] = modules\n\n    for uid, code in box_code.items():\n        snapshot_copy = cpy.deepcopy(snapshot)\n        snapshot_copy.update(modules)\n        snapshot_copy['jam'] = sta.Jam()\n        snapshot_copy['print'] = state_print\n        try:\n            if code.startswith('#draw'):\n                # Add drawing functions to snapshot scope\n                for f in 'ink line circ rect font text'.split():\n                    snapshot_copy[f] = eval('drw.' + f)\n                drw.start()\n                exec(code, snapshot_copy)\n                value = drw.end()\n            else:\n                data['print'] = ''\n                exec(code, snapshot_copy)\n                value = htm.escape(data['print'])\n        except Exception as e:\n            value = htm.escape(repr(e))\n\n        eel.set_state_box_value(uid, value)\n\nroot = tkt.Tk()\nroot.withdraw()\nroot.update()\n\n@eel.expose\ndef save_state_boxes(box_info):\n    for i, box in enumerate(box_info):\n        box_info[i]['code'] = box_code[box['id']]\n    \n    root.update()\n    save_path = fdg.asksaveasfilename()\n    root.update()\n\n    with open(save_path, 'w', encoding='utf8') as save_file:\n        jsn.dump(box_info, save_file)\n\n@eel.expose\ndef load_state_boxes():\n    root.update()\n    load_path = fdg.askopenfilename()\n    root.update()\n\n    with open(load_path, encoding='utf8') as load_file:\n        box_info = jsn.load(load_file)\n        return box_info\n\n"
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}